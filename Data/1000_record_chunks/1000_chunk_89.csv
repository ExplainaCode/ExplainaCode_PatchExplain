record_number,buggy_code,fixed_code,code_similarity
88001,"protected boolean setDebugMode(final boolean mode){
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mLatinIME);
  final boolean previousDebugSetting=prefs.getBoolean(PREF_DEBUG_MODE,false);
  final SharedPreferences.Editor editor=prefs.edit();
  editor.putBoolean(PREF_DEBUG_MODE,true);
  editor.commit();
  return previousDebugSetting;
}","protected boolean setDebugMode(final boolean mode){
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mLatinIME);
  final boolean previousDebugSetting=prefs.getBoolean(PREF_DEBUG_MODE,false);
  final SharedPreferences.Editor editor=prefs.edit();
  editor.putBoolean(PREF_DEBUG_MODE,mode);
  editor.commit();
  return previousDebugSetting;
}",0.9918478260869564
88002,"protected boolean setDebugMode(final boolean mode){
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mLatinIME);
  final boolean previousDebugSetting=prefs.getBoolean(PREF_DEBUG_MODE,false);
  final SharedPreferences.Editor editor=prefs.edit();
  editor.putBoolean(PREF_DEBUG_MODE,true);
  editor.commit();
  return previousDebugSetting;
}","protected boolean setDebugMode(final boolean mode){
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mLatinIME);
  final boolean previousDebugSetting=prefs.getBoolean(PREF_DEBUG_MODE,false);
  final SharedPreferences.Editor editor=prefs.edit();
  editor.putBoolean(PREF_DEBUG_MODE,mode);
  editor.commit();
  return previousDebugSetting;
}",0.9918478260869564
88003,"public boolean isCursorTouchingWord(){
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return false;
  CharSequence before=ic.getTextBeforeCursor(1,0);
  CharSequence after=ic.getTextAfterCursor(1,0);
  if (!TextUtils.isEmpty(before) && !mSettingsValues.isWordSeparator(before.charAt(0))) {
    return true;
  }
  if (!TextUtils.isEmpty(after) && !mSettingsValues.isWordSeparator(after.charAt(0))) {
    return true;
  }
  return false;
}","public boolean isCursorTouchingWord(){
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return false;
  CharSequence before=ic.getTextBeforeCursor(1,0);
  CharSequence after=ic.getTextAfterCursor(1,0);
  if (!TextUtils.isEmpty(before) && !mSettingsValues.isWordSeparator(before.charAt(0)) && !mSettingsValues.isSymbolExcludedFromWordSeparators(before.charAt(0))) {
    return true;
  }
  if (!TextUtils.isEmpty(after) && !mSettingsValues.isWordSeparator(after.charAt(0)) && !mSettingsValues.isSymbolExcludedFromWordSeparators(after.charAt(0))) {
    return true;
  }
  return false;
}",0.8653667595171773
88004,"private void handleLanguageSwitchKey(){
  final boolean includesOtherImes=!mSettingsValues.mIncludesOtherImesInLanguageSwitchList;
  final IBinder token=getWindow().getWindow().getAttributes().token;
  if (mShouldSwitchToLastSubtype) {
    final InputMethodSubtypeCompatWrapper lastSubtype=mImm.getLastInputMethodSubtype();
    final boolean lastSubtypeBelongsToThisIme=SubtypeUtils.checkIfSubtypeBelongsToThisIme(this,lastSubtype);
    if ((includesOtherImes || lastSubtypeBelongsToThisIme) && mImm.switchToLastInputMethod(token)) {
      mShouldSwitchToLastSubtype=false;
    }
 else {
      mImm.switchToNextInputMethod(token,!includesOtherImes);
      mShouldSwitchToLastSubtype=true;
    }
  }
 else {
    mImm.switchToNextInputMethod(token,!includesOtherImes);
  }
}","private void handleLanguageSwitchKey(){
  final boolean includesOtherImes=mSettingsValues.mIncludesOtherImesInLanguageSwitchList;
  final IBinder token=getWindow().getWindow().getAttributes().token;
  if (mShouldSwitchToLastSubtype) {
    final InputMethodSubtypeCompatWrapper lastSubtype=mImm.getLastInputMethodSubtype();
    final boolean lastSubtypeBelongsToThisIme=SubtypeUtils.checkIfSubtypeBelongsToThisIme(this,lastSubtype);
    if ((includesOtherImes || lastSubtypeBelongsToThisIme) && mImm.switchToLastInputMethod(token)) {
      mShouldSwitchToLastSubtype=false;
    }
 else {
      mImm.switchToNextInputMethod(token,!includesOtherImes);
      mShouldSwitchToLastSubtype=true;
    }
  }
 else {
    mImm.switchToNextInputMethod(token,!includesOtherImes);
  }
}",0.9993519118600128
88005,"public void updateBigramPredictions(){
  if (mSuggest == null || !isSuggestionsRequested())   return;
  if (!mSettingsValues.mBigramPredictionEnabled) {
    setPunctuationSuggestions();
    return;
  }
  final SuggestedWords.Builder builder;
  if (mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    final CharSequence prevWord=EditingUtils.getThisWord(getCurrentInputConnection(),mSettingsValues.mWordSeparators);
    if (!TextUtils.isEmpty(prevWord)) {
      builder=mSuggest.getBigramPredictionWordBuilder(prevWord);
    }
 else {
      builder=null;
    }
  }
 else {
    builder=null;
  }
  if (null == builder || builder.size() > 0) {
    showSuggestions(builder.build(),""String_Node_Str"");
  }
 else {
    if (!isShowingPunctuationList())     setPunctuationSuggestions();
  }
}","public void updateBigramPredictions(){
  if (mSuggest == null || !isSuggestionsRequested())   return;
  if (!mSettingsValues.mBigramPredictionEnabled) {
    setPunctuationSuggestions();
    return;
  }
  final SuggestedWords.Builder builder;
  if (mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    final CharSequence prevWord=EditingUtils.getThisWord(getCurrentInputConnection(),mSettingsValues.mWordSeparators);
    if (!TextUtils.isEmpty(prevWord)) {
      builder=mSuggest.getBigramPredictionWordBuilder(prevWord);
    }
 else {
      builder=null;
    }
  }
 else {
    builder=null;
  }
  if (null != builder && builder.size() > 0) {
    showSuggestions(builder.build(),""String_Node_Str"");
  }
 else {
    if (!isShowingPunctuationList())     setPunctuationSuggestions();
  }
}",0.9835234474017744
88006,"public void updateBigramPredictions(){
  if (mSuggest == null || !isSuggestionsRequested())   return;
  if (!mSettingsValues.mBigramPredictionEnabled) {
    setPunctuationSuggestions();
    return;
  }
  final SuggestedWords.Builder builder;
  if (mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    final CharSequence prevWord=EditingUtils.getThisWord(getCurrentInputConnection(),mSettingsValues.mWordSeparators);
    if (!TextUtils.isEmpty(prevWord)) {
      builder=mSuggest.getBigramPredictionWordBuilder(prevWord);
    }
 else {
      builder=null;
    }
  }
 else {
    builder=null;
  }
  if (null == builder || builder.size() > 0) {
    showSuggestions(builder.build(),""String_Node_Str"");
  }
 else {
    if (!isShowingPunctuationList())     setPunctuationSuggestions();
  }
}","public void updateBigramPredictions(){
  if (mSuggest == null || !isSuggestionsRequested())   return;
  if (!mSettingsValues.mBigramPredictionEnabled) {
    setPunctuationSuggestions();
    return;
  }
  final SuggestedWords.Builder builder;
  if (mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    final CharSequence prevWord=EditingUtils.getThisWord(getCurrentInputConnection(),mSettingsValues.mWordSeparators);
    if (!TextUtils.isEmpty(prevWord)) {
      builder=mSuggest.getBigramPredictionWordBuilder(prevWord);
    }
 else {
      builder=null;
    }
  }
 else {
    builder=null;
  }
  if (null != builder && builder.size() > 0) {
    showSuggestions(builder.build(),""String_Node_Str"");
  }
 else {
    if (!isShowingPunctuationList())     setPunctuationSuggestions();
  }
}",0.9835234474017744
88007,"@Override public void pickSuggestionManually(final int index,final CharSequence suggestion){
  mComposingStateManager.onFinishComposingText();
  final SuggestedWords suggestedWords=mSuggestionsView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  if (mInputAttributes.mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    if (mSuggestionsView != null) {
      mSuggestionsView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    resetComposingState(true);
    final InputConnection ic=getCurrentInputConnection();
    if (ic != null) {
      final CompletionInfo completionInfo=mApplicationSpecifiedCompletions[index];
      ic.commitCompletion(completionInfo);
    }
    return;
  }
  if (suggestion.length() == 1 && isShowingPunctuationList()) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestedWords);
    final int primaryCode=suggestion.charAt(0);
    onCodeInput(primaryCode,KeyboardActionListener.SUGGESTION_STRIP_COORDINATE,KeyboardActionListener.SUGGESTION_STRIP_COORDINATE);
    return;
  }
  LatinImeLogger.logOnManualSuggestion(mWordComposer.getTypedWord().toString(),suggestion.toString(),index,suggestedWords);
  mExpectingUpdateSelection=true;
  commitChosenWord(suggestion,LastComposedWord.COMMIT_TYPE_MANUAL_PICK,LastComposedWord.NOT_A_SEPARATOR);
  if (index == 0) {
    addToUserUnigramAndBigramDictionaries(suggestion,UserUnigramDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  mSpaceState=SPACE_STATE_PHANTOM;
  mKeyboardSwitcher.updateShiftState();
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mSuggest.hasMainDictionary() || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  Utils.Stats.onSeparator((char)Keyboard.CODE_SPACE,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  if (!showingAddToDictionaryHint) {
    updateBigramPredictions();
  }
 else {
    if (mIsUserDictionaryAvailable) {
      mSuggestionsView.showAddToDictionaryHint(suggestion,mSettingsValues.mHintToSaveText);
    }
 else {
      mHandler.postUpdateSuggestions();
    }
  }
}","@Override public void pickSuggestionManually(final int index,final CharSequence suggestion){
  mComposingStateManager.onFinishComposingText();
  final SuggestedWords suggestedWords=mSuggestionsView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  if (SPACE_STATE_PHANTOM == mSpaceState && suggestion.length() > 0) {
    int firstChar=Character.codePointAt(suggestion,0);
    if ((!mSettingsValues.isWeakSpaceStripper(firstChar)) && (!mSettingsValues.isWeakSpaceSwapper(firstChar))) {
      sendKeyCodePoint(Keyboard.CODE_SPACE);
    }
  }
  if (mInputAttributes.mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    if (mSuggestionsView != null) {
      mSuggestionsView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    resetComposingState(true);
    final InputConnection ic=getCurrentInputConnection();
    if (ic != null) {
      final CompletionInfo completionInfo=mApplicationSpecifiedCompletions[index];
      ic.commitCompletion(completionInfo);
    }
    return;
  }
  if (suggestion.length() == 1 && isShowingPunctuationList()) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestedWords);
    final int primaryCode=suggestion.charAt(0);
    onCodeInput(primaryCode,KeyboardActionListener.SUGGESTION_STRIP_COORDINATE,KeyboardActionListener.SUGGESTION_STRIP_COORDINATE);
    return;
  }
  LatinImeLogger.logOnManualSuggestion(mWordComposer.getTypedWord().toString(),suggestion.toString(),index,suggestedWords);
  mExpectingUpdateSelection=true;
  commitChosenWord(suggestion,LastComposedWord.COMMIT_TYPE_MANUAL_PICK,LastComposedWord.NOT_A_SEPARATOR);
  if (index == 0) {
    addToUserUnigramAndBigramDictionaries(suggestion,UserUnigramDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  mSpaceState=SPACE_STATE_PHANTOM;
  mKeyboardSwitcher.updateShiftState();
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mSuggest.hasMainDictionary() || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  Utils.Stats.onSeparator((char)Keyboard.CODE_SPACE,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  if (!showingAddToDictionaryHint) {
    updateBigramPredictions();
  }
 else {
    if (mIsUserDictionaryAvailable) {
      mSuggestionsView.showAddToDictionaryHint(suggestion,mSettingsValues.mHintToSaveText);
    }
 else {
      mHandler.postUpdateSuggestions();
    }
  }
}",0.9405820533548908
88008,"public void testManualPickThenSpaceThenType(){
  final String WORD1_TO_TYPE=""String_Node_Str"";
  final String WORD2_TO_TYPE=""String_Node_Str"";
  final String EXPECTED_RESULT=""String_Node_Str"";
  type(WORD1_TO_TYPE);
  mLatinIME.pickSuggestionManually(0,WORD1_TO_TYPE);
  type(WORD2_TO_TYPE);
  assertEquals(""String_Node_Str"",WORD1_TO_TYPE + WORD2_TO_TYPE,mTextView.getText().toString());
}","public void testManualPickThenSpaceThenType(){
  final String WORD1_TO_TYPE=""String_Node_Str"";
  final String WORD2_TO_TYPE=""String_Node_Str"";
  final String EXPECTED_RESULT=""String_Node_Str"";
  type(WORD1_TO_TYPE);
  mLatinIME.pickSuggestionManually(0,WORD1_TO_TYPE);
  type(WORD2_TO_TYPE);
  assertEquals(""String_Node_Str"",EXPECTED_RESULT,mTextView.getText().toString());
}",0.9424083769633508
88009,"@Override public void pickSuggestionManually(final int index,final CharSequence suggestion){
  mComposingStateManager.onFinishComposingText();
  final SuggestedWords suggestedWords=mSuggestionsView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  if (mInputAttributes.mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    if (mSuggestionsView != null) {
      mSuggestionsView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    resetComposingState(true);
    final InputConnection ic=getCurrentInputConnection();
    if (ic != null) {
      final CompletionInfo completionInfo=mApplicationSpecifiedCompletions[index];
      ic.commitCompletion(completionInfo);
    }
    return;
  }
  if (suggestion.length() == 1 && isShowingPunctuationList()) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestedWords);
    final int primaryCode=suggestion.charAt(0);
    onCodeInput(primaryCode,KeyboardActionListener.SUGGESTION_STRIP_COORDINATE,KeyboardActionListener.SUGGESTION_STRIP_COORDINATE);
    return;
  }
  LatinImeLogger.logOnManualSuggestion(mWordComposer.getTypedWord().toString(),suggestion.toString(),index,suggestedWords);
  mExpectingUpdateSelection=true;
  commitChosenWord(suggestion,LastComposedWord.COMMIT_TYPE_MANUAL_PICK,LastComposedWord.NOT_A_SEPARATOR);
  if (index == 0) {
    addToUserUnigramAndBigramDictionaries(suggestion,UserUnigramDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  mSpaceState=SPACE_STATE_PHANTOM;
  mKeyboardSwitcher.updateShiftState();
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mSuggest.hasMainDictionary() || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  Utils.Stats.onSeparator((char)Keyboard.CODE_SPACE,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  if (!showingAddToDictionaryHint) {
    updateBigramPredictions();
  }
 else {
    if (mIsUserDictionaryAvailable) {
      mSuggestionsView.showAddToDictionaryHint(suggestion,mSettingsValues.mHintToSaveText);
    }
 else {
      mHandler.postUpdateSuggestions();
    }
  }
}","@Override public void pickSuggestionManually(final int index,final CharSequence suggestion){
  mComposingStateManager.onFinishComposingText();
  final SuggestedWords suggestedWords=mSuggestionsView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  if (SPACE_STATE_PHANTOM == mSpaceState && suggestion.length() > 0) {
    int firstChar=Character.codePointAt(suggestion,0);
    if ((!mSettingsValues.isWeakSpaceStripper(firstChar)) && (!mSettingsValues.isWeakSpaceSwapper(firstChar))) {
      sendKeyCodePoint(Keyboard.CODE_SPACE);
    }
  }
  if (mInputAttributes.mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    if (mSuggestionsView != null) {
      mSuggestionsView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    resetComposingState(true);
    final InputConnection ic=getCurrentInputConnection();
    if (ic != null) {
      final CompletionInfo completionInfo=mApplicationSpecifiedCompletions[index];
      ic.commitCompletion(completionInfo);
    }
    return;
  }
  if (suggestion.length() == 1 && isShowingPunctuationList()) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestedWords);
    final int primaryCode=suggestion.charAt(0);
    onCodeInput(primaryCode,KeyboardActionListener.SUGGESTION_STRIP_COORDINATE,KeyboardActionListener.SUGGESTION_STRIP_COORDINATE);
    return;
  }
  LatinImeLogger.logOnManualSuggestion(mWordComposer.getTypedWord().toString(),suggestion.toString(),index,suggestedWords);
  mExpectingUpdateSelection=true;
  commitChosenWord(suggestion,LastComposedWord.COMMIT_TYPE_MANUAL_PICK,LastComposedWord.NOT_A_SEPARATOR);
  if (index == 0) {
    addToUserUnigramAndBigramDictionaries(suggestion,UserUnigramDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  mSpaceState=SPACE_STATE_PHANTOM;
  mKeyboardSwitcher.updateShiftState();
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mSuggest.hasMainDictionary() || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  Utils.Stats.onSeparator((char)Keyboard.CODE_SPACE,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  if (!showingAddToDictionaryHint) {
    updateBigramPredictions();
  }
 else {
    if (mIsUserDictionaryAvailable) {
      mSuggestionsView.showAddToDictionaryHint(suggestion,mSettingsValues.mHintToSaveText);
    }
 else {
      mHandler.postUpdateSuggestions();
    }
  }
}",0.9405820533548908
88010,"public void testManualPickThenSpaceThenType(){
  final String WORD1_TO_TYPE=""String_Node_Str"";
  final String WORD2_TO_TYPE=""String_Node_Str"";
  final String EXPECTED_RESULT=""String_Node_Str"";
  type(WORD1_TO_TYPE);
  mLatinIME.pickSuggestionManually(0,WORD1_TO_TYPE);
  type(WORD2_TO_TYPE);
  assertEquals(""String_Node_Str"",WORD1_TO_TYPE + WORD2_TO_TYPE,mTextView.getText().toString());
}","public void testManualPickThenSpaceThenType(){
  final String WORD1_TO_TYPE=""String_Node_Str"";
  final String WORD2_TO_TYPE=""String_Node_Str"";
  final String EXPECTED_RESULT=""String_Node_Str"";
  type(WORD1_TO_TYPE);
  mLatinIME.pickSuggestionManually(0,WORD1_TO_TYPE);
  type(WORD2_TO_TYPE);
  assertEquals(""String_Node_Str"",EXPECTED_RESULT,mTextView.getText().toString());
}",0.9424083769633508
88011,"public boolean isAlphabetManualShiftedKeyboard(){
  return mElementId != ELEMENT_ALPHABET_MANUAL_SHIFTED;
}","public boolean isAlphabetManualShiftedKeyboard(){
  return mElementId == ELEMENT_ALPHABET_MANUAL_SHIFTED;
}",0.9906542056074766
88012,"public boolean isAlphabetManualShiftedKeyboard(){
  return mElementId != ELEMENT_ALPHABET_MANUAL_SHIFTED;
}","public boolean isAlphabetManualShiftedKeyboard(){
  return mElementId == ELEMENT_ALPHABET_MANUAL_SHIFTED;
}",0.9906542056074766
88013,"public boolean isAlphabetManualShiftedKeyboard(){
  return mElementId != ELEMENT_ALPHABET_MANUAL_SHIFTED;
}","public boolean isAlphabetManualShiftedKeyboard(){
  return mElementId == ELEMENT_ALPHABET_MANUAL_SHIFTED;
}",0.9906542056074766
88014,"private CharSequence specificTldProcessingOnTextInput(final InputConnection ic,final CharSequence text){
  if (text.length() <= 1 || text.charAt(0) != Keyboard.CODE_PERIOD || !Character.isLetter(text.charAt(1))) {
    return text;
  }
  final CharSequence lastOne=ic.getTextBeforeCursor(1,0);
  if (lastOne != null && lastOne.length() == 1 && lastOne.charAt(0) == Keyboard.CODE_PERIOD) {
    mSpaceState=SPACE_STATE_NONE;
    return text.subSequence(1,text.length());
  }
 else {
    return text;
  }
}","private CharSequence specificTldProcessingOnTextInput(final InputConnection ic,final CharSequence text){
  if (text.length() <= 1 || text.charAt(0) != Keyboard.CODE_PERIOD || !Character.isLetter(text.charAt(1))) {
    return text;
  }
  mSpaceState=SPACE_STATE_NONE;
  final CharSequence lastOne=ic.getTextBeforeCursor(1,0);
  if (lastOne != null && lastOne.length() == 1 && lastOne.charAt(0) == Keyboard.CODE_PERIOD) {
    return text.subSequence(1,text.length());
  }
 else {
    return text;
  }
}",0.934131736526946
88015,"private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  mWordComposer.resumeSuggestionOnLastComposedWord(mLastComposedWord);
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength,0).toString();
    if (!TextUtils.equals(mWordComposer.getTypedWord(),wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength,0);
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}","private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  mWordComposer.resumeSuggestionOnLastComposedWord(mLastComposedWord);
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength,0).toString();
    if (!TextUtils.equals(mWordComposer.getTypedWord(),wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength,0);
  mComposingStateManager.onStartComposingText();
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}",0.9676140118968936
88016,"private CharSequence specificTldProcessingOnTextInput(final InputConnection ic,final CharSequence text){
  if (text.length() <= 1 || text.charAt(0) != Keyboard.CODE_PERIOD || !Character.isLetter(text.charAt(1))) {
    return text;
  }
  final CharSequence lastOne=ic.getTextBeforeCursor(1,0);
  if (lastOne != null && lastOne.length() == 1 && lastOne.charAt(0) == Keyboard.CODE_PERIOD) {
    mSpaceState=SPACE_STATE_NONE;
    return text.subSequence(1,text.length());
  }
 else {
    return text;
  }
}","private CharSequence specificTldProcessingOnTextInput(final InputConnection ic,final CharSequence text){
  if (text.length() <= 1 || text.charAt(0) != Keyboard.CODE_PERIOD || !Character.isLetter(text.charAt(1))) {
    return text;
  }
  mSpaceState=SPACE_STATE_NONE;
  final CharSequence lastOne=ic.getTextBeforeCursor(1,0);
  if (lastOne != null && lastOne.length() == 1 && lastOne.charAt(0) == Keyboard.CODE_PERIOD) {
    return text.subSequence(1,text.length());
  }
 else {
    return text;
  }
}",0.934131736526946
88017,"private CharSequence specificTldProcessingOnTextInput(final InputConnection ic,final CharSequence text){
  if (text.length() <= 1 || text.charAt(0) != Keyboard.CODE_PERIOD || !Character.isLetter(text.charAt(1))) {
    return text;
  }
  final CharSequence lastOne=ic.getTextBeforeCursor(1,0);
  if (lastOne != null && lastOne.length() == 1 && lastOne.charAt(0) == Keyboard.CODE_PERIOD) {
    mSpaceState=SPACE_STATE_NONE;
    return text.subSequence(1,text.length());
  }
 else {
    return text;
  }
}","private CharSequence specificTldProcessingOnTextInput(final InputConnection ic,final CharSequence text){
  if (text.length() <= 1 || text.charAt(0) != Keyboard.CODE_PERIOD || !Character.isLetter(text.charAt(1))) {
    return text;
  }
  mSpaceState=SPACE_STATE_NONE;
  final CharSequence lastOne=ic.getTextBeforeCursor(1,0);
  if (lastOne != null && lastOne.length() == 1 && lastOne.charAt(0) == Keyboard.CODE_PERIOD) {
    return text.subSequence(1,text.length());
  }
 else {
    return text;
  }
}",0.934131736526946
88018,"private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  mWordComposer.resumeSuggestionOnLastComposedWord(mLastComposedWord);
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength + 1,0).subSequence(0,restartLength).toString();
    if (!TextUtils.equals(mWordComposer.getTypedWord(),wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength + 1,0);
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}","private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  mWordComposer.resumeSuggestionOnLastComposedWord(mLastComposedWord);
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength,0).toString();
    if (!TextUtils.equals(mWordComposer.getTypedWord(),wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength,0);
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}",0.9753497668221186
88019,"public LastComposedWord commitWord(final int type){
  final LastComposedWord lastComposedWord=new LastComposedWord(mCodes,mXCoordinates,mYCoordinates,mTypedWord.toString(),null == mAutoCorrection ? null : mAutoCorrection.toString());
  if (type != LastComposedWord.COMMIT_TYPE_DECIDED_WORD) {
    lastComposedWord.deactivate();
  }
  mCodes.clear();
  mTypedWord.setLength(0);
  mAutoCorrection=null;
  return lastComposedWord;
}","public LastComposedWord commitWord(final int type){
  final ArrayList<int[]> codes=mCodes;
  final int[] xCoordinates=mXCoordinates;
  final int[] yCoordinates=mYCoordinates;
  mCodes=new ArrayList<int[]>(N);
  mXCoordinates=new int[N];
  mYCoordinates=new int[N];
  final LastComposedWord lastComposedWord=new LastComposedWord(codes,xCoordinates,yCoordinates,mTypedWord.toString(),null == mAutoCorrection ? null : mAutoCorrection.toString());
  if (type != LastComposedWord.COMMIT_TYPE_DECIDED_WORD) {
    lastComposedWord.deactivate();
  }
  mTypedWord.setLength(0);
  mAutoCorrection=null;
  return lastComposedWord;
}",0.6628571428571428
88020,"private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  mWordComposer.resumeSuggestionOnLastComposedWord(mLastComposedWord);
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength,0).toString();
    if (!TextUtils.equals(mWordComposer.getTypedWord(),wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength,0);
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}","private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  mWordComposer.resumeSuggestionOnLastComposedWord(mLastComposedWord);
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength,0).toString();
    if (!TextUtils.equals(mWordComposer.getTypedWord(),wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength,0);
  mComposingStateManager.onStartComposingText();
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}",0.9676140118968936
88021,"private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  mWordComposer.resumeSuggestionOnLastComposedWord(mLastComposedWord);
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength + 1,0).subSequence(0,restartLength).toString();
    if (!TextUtils.equals(mWordComposer.getTypedWord(),wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength + 1,0);
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}","private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  mWordComposer.resumeSuggestionOnLastComposedWord(mLastComposedWord);
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength,0).toString();
    if (!TextUtils.equals(mWordComposer.getTypedWord(),wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength,0);
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}",0.9753497668221186
88022,"public LastComposedWord commitWord(final int type){
  final LastComposedWord lastComposedWord=new LastComposedWord(mCodes,mXCoordinates,mYCoordinates,mTypedWord.toString(),null == mAutoCorrection ? null : mAutoCorrection.toString());
  if (type != LastComposedWord.COMMIT_TYPE_DECIDED_WORD) {
    lastComposedWord.deactivate();
  }
  mCodes.clear();
  mTypedWord.setLength(0);
  mAutoCorrection=null;
  return lastComposedWord;
}","public LastComposedWord commitWord(final int type){
  final ArrayList<int[]> codes=mCodes;
  final int[] xCoordinates=mXCoordinates;
  final int[] yCoordinates=mYCoordinates;
  mCodes=new ArrayList<int[]>(N);
  mXCoordinates=new int[N];
  mYCoordinates=new int[N];
  final LastComposedWord lastComposedWord=new LastComposedWord(codes,xCoordinates,yCoordinates,mTypedWord.toString(),null == mAutoCorrection ? null : mAutoCorrection.toString());
  if (type != LastComposedWord.COMMIT_TYPE_DECIDED_WORD) {
    lastComposedWord.deactivate();
  }
  mTypedWord.setLength(0);
  mAutoCorrection=null;
  return lastComposedWord;
}",0.6628571428571428
88023,"/** 
 * Delete the last keystroke as a result of hitting backspace.
 */
public void deleteLast(){
  final int size=size();
  if (size > 0) {
    final int lastPos=size - 1;
    char lastChar=mTypedWord.charAt(lastPos);
    mCodes.remove(lastPos);
    mTypedWord.deleteCharAt(lastPos);
    if (Character.isUpperCase(lastChar))     mCapsCount--;
  }
  if (size() == 0) {
    mIsFirstCharCapitalized=false;
  }
  if (mTrailingSingleQuotesCount > 0) {
    --mTrailingSingleQuotesCount;
  }
 else {
    for (int i=mTypedWord.offsetByCodePoints(mTypedWord.length(),-1); i >= 0; i=mTypedWord.offsetByCodePoints(i,-1)) {
      if (Keyboard.CODE_SINGLE_QUOTE != mTypedWord.codePointAt(i))       break;
      ++mTrailingSingleQuotesCount;
    }
  }
  mAutoCorrection=null;
}","/** 
 * Delete the last keystroke as a result of hitting backspace.
 */
public void deleteLast(){
  final int size=size();
  if (size > 0) {
    final int lastPos=size - 1;
    char lastChar=mTypedWord.charAt(lastPos);
    mCodes.remove(lastPos);
    mTypedWord.deleteCharAt(lastPos);
    if (Character.isUpperCase(lastChar))     mCapsCount--;
  }
  if (size() == 0) {
    mIsFirstCharCapitalized=false;
  }
  if (mTrailingSingleQuotesCount > 0) {
    --mTrailingSingleQuotesCount;
  }
 else {
    int i=mTypedWord.length();
    while (i > 0) {
      i=mTypedWord.offsetByCodePoints(i,-1);
      if (Keyboard.CODE_SINGLE_QUOTE != mTypedWord.codePointAt(i))       break;
      ++mTrailingSingleQuotesCount;
    }
  }
  mAutoCorrection=null;
}",0.9142857142857144
88024,"/** 
 * Delete the last keystroke as a result of hitting backspace.
 */
public void deleteLast(){
  final int size=size();
  if (size > 0) {
    final int lastPos=size - 1;
    char lastChar=mTypedWord.charAt(lastPos);
    mCodes.remove(lastPos);
    mTypedWord.deleteCharAt(lastPos);
    if (Character.isUpperCase(lastChar))     mCapsCount--;
  }
  if (size() == 0) {
    mIsFirstCharCapitalized=false;
  }
  if (mTrailingSingleQuotesCount > 0) {
    --mTrailingSingleQuotesCount;
  }
 else {
    for (int i=mTypedWord.offsetByCodePoints(mTypedWord.length(),-1); i >= 0; i=mTypedWord.offsetByCodePoints(i,-1)) {
      if (Keyboard.CODE_SINGLE_QUOTE != mTypedWord.codePointAt(i))       break;
      ++mTrailingSingleQuotesCount;
    }
  }
  mAutoCorrection=null;
}","/** 
 * Delete the last keystroke as a result of hitting backspace.
 */
public void deleteLast(){
  final int size=size();
  if (size > 0) {
    final int lastPos=size - 1;
    char lastChar=mTypedWord.charAt(lastPos);
    mCodes.remove(lastPos);
    mTypedWord.deleteCharAt(lastPos);
    if (Character.isUpperCase(lastChar))     mCapsCount--;
  }
  if (size() == 0) {
    mIsFirstCharCapitalized=false;
  }
  if (mTrailingSingleQuotesCount > 0) {
    --mTrailingSingleQuotesCount;
  }
 else {
    int i=mTypedWord.length();
    while (i > 0) {
      i=mTypedWord.offsetByCodePoints(i,-1);
      if (Keyboard.CODE_SINGLE_QUOTE != mTypedWord.codePointAt(i))       break;
      ++mTrailingSingleQuotesCount;
    }
  }
  mAutoCorrection=null;
}",0.9142857142857144
88025,"private void handleBackspaceWhileInBatchEdit(final int spaceState,final InputConnection ic){
  mVoiceProxy.handleBackspace();
  mHandler.postUpdateShiftKeyState();
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
    return;
  }
  if (mWordComposer.isComposingWord()) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      ic.setComposingText(getTextWithUnderline(mWordComposer.getTypedWord()),1);
      if (!mWordComposer.isComposingWord()) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    if (mWordComposer.didAutoCorrectToAnotherWord()) {
      Utils.Stats.onAutoCorrectionCancellation();
      cancelAutoCorrect(ic);
      return;
    }
    if (SPACE_STATE_DOUBLE == spaceState) {
      if (revertDoubleSpace(ic)) {
        return;
      }
    }
 else     if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
      if (revertSwapPunctuation(ic)) {
        return;
      }
    }
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      ic.deleteSurroundingText(1,0);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        ic.deleteSurroundingText(1,0);
      }
      if (isSuggestionsRequested()) {
        restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
      }
    }
  }
}","private void handleBackspaceWhileInBatchEdit(final int spaceState,final InputConnection ic){
  mVoiceProxy.handleBackspace();
  mHandler.postUpdateShiftKeyState();
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
    return;
  }
  if (mWordComposer.isComposingWord()) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      ic.setComposingText(getTextWithUnderline(mWordComposer.getTypedWord()),1);
      if (!mWordComposer.isComposingWord()) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    if (mWordComposer.didAutoCorrectToAnotherWord()) {
      Utils.Stats.onAutoCorrectionCancellation();
      cancelAutoCorrect(ic);
      return;
    }
    if (SPACE_STATE_DOUBLE == spaceState) {
      if (revertDoubleSpace(ic)) {
        return;
      }
    }
 else     if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
      if (revertSwapPunctuation(ic)) {
        return;
      }
    }
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      if (mLastSelectionStart != mLastSelectionEnd) {
        final int lengthToDelete=mLastSelectionEnd - mLastSelectionStart;
        ic.setSelection(mLastSelectionEnd,mLastSelectionEnd);
        ic.deleteSurroundingText(lengthToDelete,0);
      }
 else {
        if (NOT_A_CURSOR_POSITION == mLastSelectionEnd) {
          sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
        }
 else {
          ic.deleteSurroundingText(1,0);
        }
        if (mDeleteCount > DELETE_ACCELERATE_AT) {
          ic.deleteSurroundingText(1,0);
        }
      }
      if (isSuggestionsRequested()) {
        restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
      }
    }
  }
}",0.8824029470104846
88026,"private void handleBackspaceWhileInBatchEdit(final int spaceState,final InputConnection ic){
  mVoiceProxy.handleBackspace();
  mHandler.postUpdateShiftKeyState();
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
    return;
  }
  if (mWordComposer.isComposingWord()) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      ic.setComposingText(getTextWithUnderline(mWordComposer.getTypedWord()),1);
      if (!mWordComposer.isComposingWord()) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    if (mWordComposer.didAutoCorrectToAnotherWord()) {
      Utils.Stats.onAutoCorrectionCancellation();
      cancelAutoCorrect(ic);
      return;
    }
    if (SPACE_STATE_DOUBLE == spaceState) {
      if (revertDoubleSpace(ic)) {
        return;
      }
    }
 else     if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
      if (revertSwapPunctuation(ic)) {
        return;
      }
    }
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      ic.deleteSurroundingText(1,0);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        ic.deleteSurroundingText(1,0);
      }
      if (isSuggestionsRequested()) {
        restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
      }
    }
  }
}","private void handleBackspaceWhileInBatchEdit(final int spaceState,final InputConnection ic){
  mVoiceProxy.handleBackspace();
  mHandler.postUpdateShiftKeyState();
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
    return;
  }
  if (mWordComposer.isComposingWord()) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      ic.setComposingText(getTextWithUnderline(mWordComposer.getTypedWord()),1);
      if (!mWordComposer.isComposingWord()) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    if (mWordComposer.didAutoCorrectToAnotherWord()) {
      Utils.Stats.onAutoCorrectionCancellation();
      cancelAutoCorrect(ic);
      return;
    }
    if (SPACE_STATE_DOUBLE == spaceState) {
      if (revertDoubleSpace(ic)) {
        return;
      }
    }
 else     if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
      if (revertSwapPunctuation(ic)) {
        return;
      }
    }
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      if (mLastSelectionStart != mLastSelectionEnd) {
        final int lengthToDelete=mLastSelectionEnd - mLastSelectionStart;
        ic.setSelection(mLastSelectionEnd,mLastSelectionEnd);
        ic.deleteSurroundingText(lengthToDelete,0);
      }
 else {
        if (NOT_A_CURSOR_POSITION == mLastSelectionEnd) {
          sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
        }
 else {
          ic.deleteSurroundingText(1,0);
        }
        if (mDeleteCount > DELETE_ACCELERATE_AT) {
          ic.deleteSurroundingText(1,0);
        }
      }
      if (isSuggestionsRequested()) {
        restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
      }
    }
  }
}",0.8824029470104846
88027,"private void handleBackspaceWhileInBatchEdit(final int spaceState,final InputConnection ic){
  mVoiceProxy.handleBackspace();
  mHandler.postUpdateShiftKeyState();
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
    return;
  }
  if (mWordComposer.isComposingWord()) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      ic.setComposingText(getTextWithUnderline(mWordComposer.getTypedWord()),1);
      if (!mWordComposer.isComposingWord()) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    if (mWordComposer.didAutoCorrectToAnotherWord()) {
      Utils.Stats.onAutoCorrectionCancellation();
      cancelAutoCorrect(ic);
      return;
    }
    if (SPACE_STATE_DOUBLE == spaceState) {
      if (revertDoubleSpace(ic)) {
        return;
      }
    }
 else     if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
      if (revertSwapPunctuation(ic)) {
        return;
      }
    }
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      ic.deleteSurroundingText(1,0);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        ic.deleteSurroundingText(1,0);
      }
      if (isSuggestionsRequested()) {
        restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
      }
    }
  }
}","private void handleBackspaceWhileInBatchEdit(final int spaceState,final InputConnection ic){
  mVoiceProxy.handleBackspace();
  mHandler.postUpdateShiftKeyState();
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
    return;
  }
  if (mWordComposer.isComposingWord()) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      ic.setComposingText(getTextWithUnderline(mWordComposer.getTypedWord()),1);
      if (!mWordComposer.isComposingWord()) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    if (mWordComposer.didAutoCorrectToAnotherWord()) {
      Utils.Stats.onAutoCorrectionCancellation();
      cancelAutoCorrect(ic);
      return;
    }
    if (SPACE_STATE_DOUBLE == spaceState) {
      if (revertDoubleSpace(ic)) {
        return;
      }
    }
 else     if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
      if (revertSwapPunctuation(ic)) {
        return;
      }
    }
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      if (mLastSelectionStart != mLastSelectionEnd) {
        final int lengthToDelete=mLastSelectionEnd - mLastSelectionStart;
        ic.setSelection(mLastSelectionEnd,mLastSelectionEnd);
        ic.deleteSurroundingText(lengthToDelete,0);
      }
 else {
        if (NOT_A_CURSOR_POSITION == mLastSelectionEnd) {
          sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
        }
 else {
          ic.deleteSurroundingText(1,0);
        }
        if (mDeleteCount > DELETE_ACCELERATE_AT) {
          ic.deleteSurroundingText(1,0);
        }
      }
      if (isSuggestionsRequested()) {
        restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
      }
    }
  }
}",0.8824029470104846
88028,"private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength + 1,0).subSequence(0,restartLength).toString();
    if (!mWordComposer.getTypedWord().equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength + 1,0);
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}","private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength + 1,0).subSequence(0,restartLength).toString();
    if (!TextUtils.equals(mWordComposer.getTypedWord(),wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength + 1,0);
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}",0.9824086603518268
88029,"private void cancelAutoCorrect(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final String originallyTypedWord=mWordComposer.getTypedWord();
  final CharSequence autoCorrectedTo=mWordComposer.getAutoCorrectionOrNull();
  final int cancelLength=autoCorrectedTo.length();
  final CharSequence separator=ic.getTextBeforeCursor(1,0);
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(cancelLength + 1,0).subSequence(0,cancelLength).toString();
    if (!autoCorrectedTo.equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + autoCorrectedTo + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
    if (originallyTypedWord.equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + originallyTypedWord + ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(cancelLength + 1,0);
  ic.commitText(originallyTypedWord,1);
  ic.commitText(separator,1);
  mWordComposer.deleteAutoCorrection();
  mWordComposer.onCommitWord(WordComposer.COMMIT_TYPE_CANCEL_AUTO_CORRECT);
  Utils.Stats.onSeparator(separator.charAt(0),WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}","private void cancelAutoCorrect(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final String originallyTypedWord=mWordComposer.getTypedWord();
  final CharSequence autoCorrectedTo=mWordComposer.getAutoCorrectionOrNull();
  final int cancelLength=autoCorrectedTo.length();
  final CharSequence separator=ic.getTextBeforeCursor(1,0);
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(cancelLength + 1,0).subSequence(0,cancelLength).toString();
    if (!TextUtils.equals(autoCorrectedTo,wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + autoCorrectedTo + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
    if (TextUtils.equals(originallyTypedWord,wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + originallyTypedWord + ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(cancelLength + 1,0);
  ic.commitText(originallyTypedWord,1);
  ic.commitText(separator,1);
  mWordComposer.deleteAutoCorrection();
  mWordComposer.onCommitWord(WordComposer.COMMIT_TYPE_CANCEL_AUTO_CORRECT);
  Utils.Stats.onSeparator(separator.charAt(0),WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}",0.9748283752860412
88030,"private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength + 1,0).subSequence(0,restartLength).toString();
    if (!mWordComposer.getTypedWord().equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength + 1,0);
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}","private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength + 1,0).subSequence(0,restartLength).toString();
    if (!TextUtils.equals(mWordComposer.getTypedWord(),wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength + 1,0);
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}",0.9824086603518268
88031,"private void cancelAutoCorrect(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final String originallyTypedWord=mWordComposer.getTypedWord();
  final CharSequence autoCorrectedTo=mWordComposer.getAutoCorrectionOrNull();
  final int cancelLength=autoCorrectedTo.length();
  final CharSequence separator=ic.getTextBeforeCursor(1,0);
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(cancelLength + 1,0).subSequence(0,cancelLength).toString();
    if (!autoCorrectedTo.equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + autoCorrectedTo + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
    if (originallyTypedWord.equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + originallyTypedWord + ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(cancelLength + 1,0);
  ic.commitText(originallyTypedWord,1);
  ic.commitText(separator,1);
  mWordComposer.deleteAutoCorrection();
  mWordComposer.onCommitWord(WordComposer.COMMIT_TYPE_CANCEL_AUTO_CORRECT);
  Utils.Stats.onSeparator(separator.charAt(0),WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}","private void cancelAutoCorrect(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final String originallyTypedWord=mWordComposer.getTypedWord();
  final CharSequence autoCorrectedTo=mWordComposer.getAutoCorrectionOrNull();
  final int cancelLength=autoCorrectedTo.length();
  final CharSequence separator=ic.getTextBeforeCursor(1,0);
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(cancelLength + 1,0).subSequence(0,cancelLength).toString();
    if (!TextUtils.equals(autoCorrectedTo,wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + autoCorrectedTo + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
    if (TextUtils.equals(originallyTypedWord,wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + originallyTypedWord + ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(cancelLength + 1,0);
  ic.commitText(originallyTypedWord,1);
  ic.commitText(separator,1);
  mWordComposer.deleteAutoCorrection();
  mWordComposer.onCommitWord(WordComposer.COMMIT_TYPE_CANCEL_AUTO_CORRECT);
  Utils.Stats.onSeparator(separator.charAt(0),WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}",0.9748283752860412
88032,"@Override public void pickSuggestionManually(int index,CharSequence suggestion){
  mComposingStateManager.onFinishComposingText();
  SuggestedWords suggestions=mSuggestionsView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mInputAttributes.mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    if (ic != null) {
      final CompletionInfo completionInfo=mApplicationSpecifiedCompletions[index];
      ic.commitCompletion(completionInfo);
    }
    if (mSuggestionsView != null) {
      mSuggestionsView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && (mSettingsValues.isWordSeparator(suggestion.charAt(0)) || mSettingsValues.isSuggestedPunctuation(suggestion.charAt(0)))) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestions.mWords);
    final int rawPrimaryCode=suggestion.charAt(0);
    final Keyboard keyboard=mKeyboardSwitcher.getKeyboard();
    final boolean isRtl=keyboard != null && keyboard.mIsRtlKeyboard;
    final int primaryCode=Key.getRtlParenthesisCode(rawPrimaryCode,isRtl);
    insertPunctuationFromSuggestionStrip(ic,primaryCode);
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  mExpectingUpdateSelection=true;
  commitChosenWord(suggestion,WordComposer.COMMIT_TYPE_MANUAL_PICK);
  if (index == 0) {
    addToUserUnigramAndBigramDictionaries(suggestion,UserUnigramDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  LatinImeLogger.logOnManualSuggestion(mWordComposer.getTypedWord().toString(),suggestion.toString(),index,suggestions.mWords);
  if (mInputAttributes.mInsertSpaceOnPickSuggestionManually) {
    sendMagicSpace();
  }
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mSuggest.hasMainDictionary() || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  Utils.Stats.onSeparator((char)Keyboard.CODE_SPACE,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  if (!showingAddToDictionaryHint) {
    updateBigramPredictions();
  }
 else {
    if (mIsUserDictionaryAvailable) {
      mSuggestionsView.showAddToDictionaryHint(suggestion,mSettingsValues.mHintToSaveText);
    }
 else {
      mHandler.postUpdateSuggestions();
    }
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}","@Override public void pickSuggestionManually(int index,CharSequence suggestion){
  mComposingStateManager.onFinishComposingText();
  SuggestedWords suggestions=mSuggestionsView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mInputAttributes.mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    if (ic != null) {
      final CompletionInfo completionInfo=mApplicationSpecifiedCompletions[index];
      ic.commitCompletion(completionInfo);
    }
    if (mSuggestionsView != null) {
      mSuggestionsView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && (mSettingsValues.isWordSeparator(suggestion.charAt(0)) || mSettingsValues.isSuggestedPunctuation(suggestion.charAt(0)))) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestions.mWords);
    final int rawPrimaryCode=suggestion.charAt(0);
    final Keyboard keyboard=mKeyboardSwitcher.getKeyboard();
    final boolean isRtl=keyboard != null && keyboard.mIsRtlKeyboard;
    final int primaryCode=Key.getRtlParenthesisCode(rawPrimaryCode,isRtl);
    insertPunctuationFromSuggestionStrip(ic,primaryCode);
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  LatinImeLogger.logOnManualSuggestion(mWordComposer.getTypedWord().toString(),suggestion.toString(),index,suggestions.mWords);
  mExpectingUpdateSelection=true;
  commitChosenWord(suggestion,WordComposer.COMMIT_TYPE_MANUAL_PICK);
  if (index == 0) {
    addToUserUnigramAndBigramDictionaries(suggestion,UserUnigramDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  if (mInputAttributes.mInsertSpaceOnPickSuggestionManually) {
    sendMagicSpace();
  }
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mSuggest.hasMainDictionary() || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  Utils.Stats.onSeparator((char)Keyboard.CODE_SPACE,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  if (!showingAddToDictionaryHint) {
    updateBigramPredictions();
  }
 else {
    if (mIsUserDictionaryAvailable) {
      mSuggestionsView.showAddToDictionaryHint(suggestion,mSettingsValues.mHintToSaveText);
    }
 else {
      mHandler.postUpdateSuggestions();
    }
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9523632303684406
88033,"private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength + 1,0).subSequence(0,restartLength).toString();
    if (!mWordComposer.getTypedWord().equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength + 1,0);
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}","private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength + 1,0).subSequence(0,restartLength).toString();
    if (!TextUtils.equals(mWordComposer.getTypedWord(),wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength + 1,0);
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}",0.9824086603518268
88034,"private void cancelAutoCorrect(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final String originallyTypedWord=mWordComposer.getTypedWord();
  final CharSequence autoCorrectedTo=mWordComposer.getAutoCorrectionOrNull();
  final int cancelLength=autoCorrectedTo.length();
  final CharSequence separator=ic.getTextBeforeCursor(1,0);
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(cancelLength + 1,0).subSequence(0,cancelLength).toString();
    if (!autoCorrectedTo.equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + autoCorrectedTo + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
    if (originallyTypedWord.equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + originallyTypedWord + ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(cancelLength + 1,0);
  ic.commitText(originallyTypedWord,1);
  ic.commitText(separator,1);
  mWordComposer.deleteAutoCorrection();
  mWordComposer.onCommitWord(WordComposer.COMMIT_TYPE_CANCEL_AUTO_CORRECT);
  Utils.Stats.onSeparator(separator.charAt(0),WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}","private void cancelAutoCorrect(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final String originallyTypedWord=mWordComposer.getTypedWord();
  final CharSequence autoCorrectedTo=mWordComposer.getAutoCorrectionOrNull();
  final int cancelLength=autoCorrectedTo.length();
  final CharSequence separator=ic.getTextBeforeCursor(1,0);
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(cancelLength + 1,0).subSequence(0,cancelLength).toString();
    if (!TextUtils.equals(autoCorrectedTo,wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + autoCorrectedTo + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
    if (TextUtils.equals(originallyTypedWord,wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + originallyTypedWord + ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(cancelLength + 1,0);
  ic.commitText(originallyTypedWord,1);
  ic.commitText(separator,1);
  mWordComposer.deleteAutoCorrection();
  mWordComposer.onCommitWord(WordComposer.COMMIT_TYPE_CANCEL_AUTO_CORRECT);
  Utils.Stats.onSeparator(separator.charAt(0),WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}",0.9748283752860412
88035,"@Override public void pickSuggestionManually(int index,CharSequence suggestion){
  mComposingStateManager.onFinishComposingText();
  SuggestedWords suggestions=mSuggestionsView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mInputAttributes.mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    if (ic != null) {
      final CompletionInfo completionInfo=mApplicationSpecifiedCompletions[index];
      ic.commitCompletion(completionInfo);
    }
    if (mSuggestionsView != null) {
      mSuggestionsView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && (mSettingsValues.isWordSeparator(suggestion.charAt(0)) || mSettingsValues.isSuggestedPunctuation(suggestion.charAt(0)))) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestions.mWords);
    final int rawPrimaryCode=suggestion.charAt(0);
    final Keyboard keyboard=mKeyboardSwitcher.getKeyboard();
    final boolean isRtl=keyboard != null && keyboard.mIsRtlKeyboard;
    final int primaryCode=Key.getRtlParenthesisCode(rawPrimaryCode,isRtl);
    insertPunctuationFromSuggestionStrip(ic,primaryCode);
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  mExpectingUpdateSelection=true;
  commitChosenWord(suggestion,WordComposer.COMMIT_TYPE_MANUAL_PICK);
  if (index == 0) {
    addToUserUnigramAndBigramDictionaries(suggestion,UserUnigramDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  LatinImeLogger.logOnManualSuggestion(mWordComposer.getTypedWord().toString(),suggestion.toString(),index,suggestions.mWords);
  if (mInputAttributes.mInsertSpaceOnPickSuggestionManually) {
    sendMagicSpace();
  }
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mSuggest.hasMainDictionary() || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  Utils.Stats.onSeparator((char)Keyboard.CODE_SPACE,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  if (!showingAddToDictionaryHint) {
    updateBigramPredictions();
  }
 else {
    if (mIsUserDictionaryAvailable) {
      mSuggestionsView.showAddToDictionaryHint(suggestion,mSettingsValues.mHintToSaveText);
    }
 else {
      mHandler.postUpdateSuggestions();
    }
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}","@Override public void pickSuggestionManually(int index,CharSequence suggestion){
  mComposingStateManager.onFinishComposingText();
  SuggestedWords suggestions=mSuggestionsView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mInputAttributes.mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    if (ic != null) {
      final CompletionInfo completionInfo=mApplicationSpecifiedCompletions[index];
      ic.commitCompletion(completionInfo);
    }
    if (mSuggestionsView != null) {
      mSuggestionsView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && (mSettingsValues.isWordSeparator(suggestion.charAt(0)) || mSettingsValues.isSuggestedPunctuation(suggestion.charAt(0)))) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestions.mWords);
    final int rawPrimaryCode=suggestion.charAt(0);
    final Keyboard keyboard=mKeyboardSwitcher.getKeyboard();
    final boolean isRtl=keyboard != null && keyboard.mIsRtlKeyboard;
    final int primaryCode=Key.getRtlParenthesisCode(rawPrimaryCode,isRtl);
    insertPunctuationFromSuggestionStrip(ic,primaryCode);
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  LatinImeLogger.logOnManualSuggestion(mWordComposer.getTypedWord().toString(),suggestion.toString(),index,suggestions.mWords);
  mExpectingUpdateSelection=true;
  commitChosenWord(suggestion,WordComposer.COMMIT_TYPE_MANUAL_PICK);
  if (index == 0) {
    addToUserUnigramAndBigramDictionaries(suggestion,UserUnigramDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  if (mInputAttributes.mInsertSpaceOnPickSuggestionManually) {
    sendMagicSpace();
  }
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mSuggest.hasMainDictionary() || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  Utils.Stats.onSeparator((char)Keyboard.CODE_SPACE,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  if (!showingAddToDictionaryHint) {
    updateBigramPredictions();
  }
 else {
    if (mIsUserDictionaryAvailable) {
      mSuggestionsView.showAddToDictionaryHint(suggestion,mSettingsValues.mHintToSaveText);
    }
 else {
      mHandler.postUpdateSuggestions();
    }
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9523632303684406
88036,"private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength + 1,0).subSequence(0,restartLength).toString();
    if (!mWordComposer.getTypedWord().equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength + 1,0);
  mWordComposer.resumeSuggestionOnKeptWord();
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}","private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength + 1,0).subSequence(0,restartLength).toString();
    if (!mWordComposer.getTypedWord().equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength + 1,0);
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}",0.9373297002724796
88037,"private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength + 1,0).subSequence(0,restartLength).toString();
    if (!mWordComposer.getTypedWord().equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength + 1,0);
  mWordComposer.resumeSuggestionOnKeptWord();
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}","private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength + 1,0).subSequence(0,restartLength).toString();
    if (!mWordComposer.getTypedWord().equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength + 1,0);
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}",0.9373297002724796
88038,"private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength + 1,0).subSequence(0,restartLength).toString();
    if (!mWordComposer.getTypedWord().equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength + 1,0);
  mWordComposer.resumeSuggestionOnKeptWord();
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}","private void restartSuggestionsOnManuallyPickedTypedWord(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final int restartLength=mWordComposer.size();
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(restartLength + 1,0).subSequence(0,restartLength).toString();
    if (!mWordComposer.getTypedWord().equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + mWordComposer.getTypedWord() + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(restartLength + 1,0);
  ic.setComposingText(mWordComposer.getTypedWord(),1);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}",0.9373297002724796
88039,"public void updateSuggestions(){
  if ((mSuggest == null || !isSuggestionsRequested()) && !mVoiceProxy.isVoiceInputHighlighted()) {
    return;
  }
  mHandler.cancelUpdateSuggestions();
  mHandler.cancelUpdateBigramPredictions();
  if (!mWordComposer.isComposingWord()) {
    setPunctuationSuggestions();
    return;
  }
  final InputConnection ic=getCurrentInputConnection();
  final CharSequence prevWord;
  if (null == ic) {
    prevWord=null;
  }
 else {
    prevWord=EditingUtils.getPreviousWord(ic,mSettingsValues.mWordSeparators);
  }
  final SuggestedWords.Builder builder=mSuggest.getSuggestedWordBuilder(mWordComposer,prevWord,mKeyboardSwitcher.getKeyboard().getProximityInfo(),mCorrectionMode);
  boolean autoCorrectionAvailable=!mInputAttributes.mInputTypeNoAutoCorrect && mSuggest.hasAutoCorrection();
  final CharSequence typedWord=mWordComposer.getTypedWord();
  final int quotesCount=mWordComposer.trailingSingleQuotesCount();
  final boolean allowsToBeAutoCorrected=AutoCorrection.allowsToBeAutoCorrected(mSuggest.getUnigramDictionaries(),quotesCount > 0 ? typedWord.subSequence(0,typedWord.length() - quotesCount) : typedWord,preferCapitalization());
  if (mCorrectionMode == Suggest.CORRECTION_FULL || mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    autoCorrectionAvailable|=(!allowsToBeAutoCorrected);
  }
  autoCorrectionAvailable&=!mWordComposer.isMostlyCaps();
  if (typedWord != null) {
    if (builder.size() > 1 || typedWord.length() == 1 || (!allowsToBeAutoCorrected) || mSuggestionsView.isShowingAddToDictionaryHint()) {
      builder.setTypedWordValid(!allowsToBeAutoCorrected).setHasMinimalSuggestion(autoCorrectionAvailable);
    }
 else {
      SuggestedWords previousSuggestions=mSuggestionsView.getSuggestions();
      if (previousSuggestions == mSettingsValues.mSuggestPuncList) {
        if (builder.size() == 0) {
          return;
        }
        previousSuggestions=SuggestedWords.EMPTY;
      }
      builder.addTypedWordAndPreviousSuggestions(typedWord,previousSuggestions);
    }
  }
  showSuggestions(builder.build(),typedWord);
}","public void updateSuggestions(){
  if ((mSuggest == null || !isSuggestionsRequested()) && !mVoiceProxy.isVoiceInputHighlighted()) {
    if (mWordComposer.isComposingWord()) {
      Log.w(TAG,""String_Node_Str"");
      mWordComposer.setAutoCorrection(mWordComposer.getTypedWord());
    }
    return;
  }
  mHandler.cancelUpdateSuggestions();
  mHandler.cancelUpdateBigramPredictions();
  if (!mWordComposer.isComposingWord()) {
    setPunctuationSuggestions();
    return;
  }
  final InputConnection ic=getCurrentInputConnection();
  final CharSequence prevWord;
  if (null == ic) {
    prevWord=null;
  }
 else {
    prevWord=EditingUtils.getPreviousWord(ic,mSettingsValues.mWordSeparators);
  }
  final SuggestedWords.Builder builder=mSuggest.getSuggestedWordBuilder(mWordComposer,prevWord,mKeyboardSwitcher.getKeyboard().getProximityInfo(),mCorrectionMode);
  boolean autoCorrectionAvailable=!mInputAttributes.mInputTypeNoAutoCorrect && mSuggest.hasAutoCorrection();
  final CharSequence typedWord=mWordComposer.getTypedWord();
  final int quotesCount=mWordComposer.trailingSingleQuotesCount();
  final boolean allowsToBeAutoCorrected=AutoCorrection.allowsToBeAutoCorrected(mSuggest.getUnigramDictionaries(),quotesCount > 0 ? typedWord.subSequence(0,typedWord.length() - quotesCount) : typedWord,preferCapitalization());
  if (mCorrectionMode == Suggest.CORRECTION_FULL || mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    autoCorrectionAvailable|=(!allowsToBeAutoCorrected);
  }
  autoCorrectionAvailable&=!mWordComposer.isMostlyCaps();
  if (typedWord != null) {
    if (builder.size() > 1 || typedWord.length() == 1 || (!allowsToBeAutoCorrected) || mSuggestionsView.isShowingAddToDictionaryHint()) {
      builder.setTypedWordValid(!allowsToBeAutoCorrected).setHasMinimalSuggestion(autoCorrectionAvailable);
    }
 else {
      SuggestedWords previousSuggestions=mSuggestionsView.getSuggestions();
      if (previousSuggestions == mSettingsValues.mSuggestPuncList) {
        if (builder.size() == 0) {
          return;
        }
        previousSuggestions=SuggestedWords.EMPTY;
      }
      builder.addTypedWordAndPreviousSuggestions(typedWord,previousSuggestions);
    }
  }
  showSuggestions(builder.build(),typedWord);
}",0.9643683479870432
88040,"private void handleBackspaceWhileInBatchEdit(final int spaceState,final InputConnection ic){
  mVoiceProxy.handleBackspace();
  mHandler.postUpdateShiftKeyState();
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
    return;
  }
  if (mWordComposer.isComposingWord()) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      ic.setComposingText(getTextWithUnderline(mWordComposer.getTypedWord()),1);
      if (!mWordComposer.isComposingWord()) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    if (mWordComposer.didAutoCorrectToAnotherWord()) {
      Utils.Stats.onAutoCorrectionCancellation();
      cancelAutoCorrect(ic);
      return;
    }
    if (SPACE_STATE_DOUBLE == spaceState) {
      if (revertDoubleSpace(ic)) {
        return;
      }
    }
 else     if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
      if (revertSwapPunctuation(ic)) {
        return;
      }
    }
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      ic.deleteSurroundingText(1,0);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        ic.deleteSurroundingText(1,0);
      }
      restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
    }
  }
}","private void handleBackspaceWhileInBatchEdit(final int spaceState,final InputConnection ic){
  mVoiceProxy.handleBackspace();
  mHandler.postUpdateShiftKeyState();
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
    return;
  }
  if (mWordComposer.isComposingWord()) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      ic.setComposingText(getTextWithUnderline(mWordComposer.getTypedWord()),1);
      if (!mWordComposer.isComposingWord()) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    if (mWordComposer.didAutoCorrectToAnotherWord()) {
      Utils.Stats.onAutoCorrectionCancellation();
      cancelAutoCorrect(ic);
      return;
    }
    if (SPACE_STATE_DOUBLE == spaceState) {
      if (revertDoubleSpace(ic)) {
        return;
      }
    }
 else     if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
      if (revertSwapPunctuation(ic)) {
        return;
      }
    }
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      ic.deleteSurroundingText(1,0);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        ic.deleteSurroundingText(1,0);
      }
      if (isSuggestionsRequested()) {
        restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
      }
    }
  }
}",0.9797782126549248
88041,"public void updateSuggestions(){
  if ((mSuggest == null || !isSuggestionsRequested()) && !mVoiceProxy.isVoiceInputHighlighted()) {
    return;
  }
  mHandler.cancelUpdateSuggestions();
  mHandler.cancelUpdateBigramPredictions();
  if (!mWordComposer.isComposingWord()) {
    setPunctuationSuggestions();
    return;
  }
  final InputConnection ic=getCurrentInputConnection();
  final CharSequence prevWord;
  if (null == ic) {
    prevWord=null;
  }
 else {
    prevWord=EditingUtils.getPreviousWord(ic,mSettingsValues.mWordSeparators);
  }
  final SuggestedWords.Builder builder=mSuggest.getSuggestedWordBuilder(mWordComposer,prevWord,mKeyboardSwitcher.getKeyboard().getProximityInfo(),mCorrectionMode);
  boolean autoCorrectionAvailable=!mInputAttributes.mInputTypeNoAutoCorrect && mSuggest.hasAutoCorrection();
  final CharSequence typedWord=mWordComposer.getTypedWord();
  final int quotesCount=mWordComposer.trailingSingleQuotesCount();
  final boolean allowsToBeAutoCorrected=AutoCorrection.allowsToBeAutoCorrected(mSuggest.getUnigramDictionaries(),quotesCount > 0 ? typedWord.subSequence(0,typedWord.length() - quotesCount) : typedWord,preferCapitalization());
  if (mCorrectionMode == Suggest.CORRECTION_FULL || mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    autoCorrectionAvailable|=(!allowsToBeAutoCorrected);
  }
  autoCorrectionAvailable&=!mWordComposer.isMostlyCaps();
  if (typedWord != null) {
    if (builder.size() > 1 || typedWord.length() == 1 || (!allowsToBeAutoCorrected) || mSuggestionsView.isShowingAddToDictionaryHint()) {
      builder.setTypedWordValid(!allowsToBeAutoCorrected).setHasMinimalSuggestion(autoCorrectionAvailable);
    }
 else {
      SuggestedWords previousSuggestions=mSuggestionsView.getSuggestions();
      if (previousSuggestions == mSettingsValues.mSuggestPuncList) {
        if (builder.size() == 0) {
          return;
        }
        previousSuggestions=SuggestedWords.EMPTY;
      }
      builder.addTypedWordAndPreviousSuggestions(typedWord,previousSuggestions);
    }
  }
  showSuggestions(builder.build(),typedWord);
}","public void updateSuggestions(){
  if ((mSuggest == null || !isSuggestionsRequested()) && !mVoiceProxy.isVoiceInputHighlighted()) {
    if (mWordComposer.isComposingWord()) {
      Log.w(TAG,""String_Node_Str"");
      mWordComposer.setAutoCorrection(mWordComposer.getTypedWord());
    }
    return;
  }
  mHandler.cancelUpdateSuggestions();
  mHandler.cancelUpdateBigramPredictions();
  if (!mWordComposer.isComposingWord()) {
    setPunctuationSuggestions();
    return;
  }
  final InputConnection ic=getCurrentInputConnection();
  final CharSequence prevWord;
  if (null == ic) {
    prevWord=null;
  }
 else {
    prevWord=EditingUtils.getPreviousWord(ic,mSettingsValues.mWordSeparators);
  }
  final SuggestedWords.Builder builder=mSuggest.getSuggestedWordBuilder(mWordComposer,prevWord,mKeyboardSwitcher.getKeyboard().getProximityInfo(),mCorrectionMode);
  boolean autoCorrectionAvailable=!mInputAttributes.mInputTypeNoAutoCorrect && mSuggest.hasAutoCorrection();
  final CharSequence typedWord=mWordComposer.getTypedWord();
  final int quotesCount=mWordComposer.trailingSingleQuotesCount();
  final boolean allowsToBeAutoCorrected=AutoCorrection.allowsToBeAutoCorrected(mSuggest.getUnigramDictionaries(),quotesCount > 0 ? typedWord.subSequence(0,typedWord.length() - quotesCount) : typedWord,preferCapitalization());
  if (mCorrectionMode == Suggest.CORRECTION_FULL || mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    autoCorrectionAvailable|=(!allowsToBeAutoCorrected);
  }
  autoCorrectionAvailable&=!mWordComposer.isMostlyCaps();
  if (typedWord != null) {
    if (builder.size() > 1 || typedWord.length() == 1 || (!allowsToBeAutoCorrected) || mSuggestionsView.isShowingAddToDictionaryHint()) {
      builder.setTypedWordValid(!allowsToBeAutoCorrected).setHasMinimalSuggestion(autoCorrectionAvailable);
    }
 else {
      SuggestedWords previousSuggestions=mSuggestionsView.getSuggestions();
      if (previousSuggestions == mSettingsValues.mSuggestPuncList) {
        if (builder.size() == 0) {
          return;
        }
        previousSuggestions=SuggestedWords.EMPTY;
      }
      builder.addTypedWordAndPreviousSuggestions(typedWord,previousSuggestions);
    }
  }
  showSuggestions(builder.build(),typedWord);
}",0.9643683479870432
88042,"private void handleBackspaceWhileInBatchEdit(final int spaceState,final InputConnection ic){
  mVoiceProxy.handleBackspace();
  mHandler.postUpdateShiftKeyState();
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
    return;
  }
  if (mWordComposer.isComposingWord()) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      ic.setComposingText(getTextWithUnderline(mWordComposer.getTypedWord()),1);
      if (!mWordComposer.isComposingWord()) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    if (mWordComposer.didAutoCorrectToAnotherWord()) {
      Utils.Stats.onAutoCorrectionCancellation();
      cancelAutoCorrect(ic);
      return;
    }
    if (SPACE_STATE_DOUBLE == spaceState) {
      if (revertDoubleSpace(ic)) {
        return;
      }
    }
 else     if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
      if (revertSwapPunctuation(ic)) {
        return;
      }
    }
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      ic.deleteSurroundingText(1,0);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        ic.deleteSurroundingText(1,0);
      }
      restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
    }
  }
}","private void handleBackspaceWhileInBatchEdit(final int spaceState,final InputConnection ic){
  mVoiceProxy.handleBackspace();
  mHandler.postUpdateShiftKeyState();
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
    return;
  }
  if (mWordComposer.isComposingWord()) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      ic.setComposingText(getTextWithUnderline(mWordComposer.getTypedWord()),1);
      if (!mWordComposer.isComposingWord()) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    if (mWordComposer.didAutoCorrectToAnotherWord()) {
      Utils.Stats.onAutoCorrectionCancellation();
      cancelAutoCorrect(ic);
      return;
    }
    if (SPACE_STATE_DOUBLE == spaceState) {
      if (revertDoubleSpace(ic)) {
        return;
      }
    }
 else     if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
      if (revertSwapPunctuation(ic)) {
        return;
      }
    }
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      ic.deleteSurroundingText(1,0);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        ic.deleteSurroundingText(1,0);
      }
      if (isSuggestionsRequested()) {
        restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
      }
    }
  }
}",0.9797782126549248
88043,"public void updateSuggestions(){
  if ((mSuggest == null || !isSuggestionsRequested()) && !mVoiceProxy.isVoiceInputHighlighted()) {
    return;
  }
  mHandler.cancelUpdateSuggestions();
  mHandler.cancelUpdateBigramPredictions();
  if (!mWordComposer.isComposingWord()) {
    setPunctuationSuggestions();
    return;
  }
  final InputConnection ic=getCurrentInputConnection();
  final CharSequence prevWord;
  if (null == ic) {
    prevWord=null;
  }
 else {
    prevWord=EditingUtils.getPreviousWord(ic,mSettingsValues.mWordSeparators);
  }
  final SuggestedWords.Builder builder=mSuggest.getSuggestedWordBuilder(mWordComposer,prevWord,mKeyboardSwitcher.getKeyboard().getProximityInfo(),mCorrectionMode);
  boolean autoCorrectionAvailable=!mInputAttributes.mInputTypeNoAutoCorrect && mSuggest.hasAutoCorrection();
  final CharSequence typedWord=mWordComposer.getTypedWord();
  final int quotesCount=mWordComposer.trailingSingleQuotesCount();
  final boolean allowsToBeAutoCorrected=AutoCorrection.allowsToBeAutoCorrected(mSuggest.getUnigramDictionaries(),quotesCount > 0 ? typedWord.subSequence(0,typedWord.length() - quotesCount) : typedWord,preferCapitalization());
  if (mCorrectionMode == Suggest.CORRECTION_FULL || mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    autoCorrectionAvailable|=(!allowsToBeAutoCorrected);
  }
  autoCorrectionAvailable&=!mWordComposer.isMostlyCaps();
  if (typedWord != null) {
    if (builder.size() > 1 || typedWord.length() == 1 || (!allowsToBeAutoCorrected) || mSuggestionsView.isShowingAddToDictionaryHint()) {
      builder.setTypedWordValid(!allowsToBeAutoCorrected).setHasMinimalSuggestion(autoCorrectionAvailable);
    }
 else {
      SuggestedWords previousSuggestions=mSuggestionsView.getSuggestions();
      if (previousSuggestions == mSettingsValues.mSuggestPuncList) {
        if (builder.size() == 0) {
          return;
        }
        previousSuggestions=SuggestedWords.EMPTY;
      }
      builder.addTypedWordAndPreviousSuggestions(typedWord,previousSuggestions);
    }
  }
  showSuggestions(builder.build(),typedWord);
}","public void updateSuggestions(){
  if ((mSuggest == null || !isSuggestionsRequested()) && !mVoiceProxy.isVoiceInputHighlighted()) {
    if (mWordComposer.isComposingWord()) {
      Log.w(TAG,""String_Node_Str"");
      mWordComposer.setAutoCorrection(mWordComposer.getTypedWord());
    }
    return;
  }
  mHandler.cancelUpdateSuggestions();
  mHandler.cancelUpdateBigramPredictions();
  if (!mWordComposer.isComposingWord()) {
    setPunctuationSuggestions();
    return;
  }
  final InputConnection ic=getCurrentInputConnection();
  final CharSequence prevWord;
  if (null == ic) {
    prevWord=null;
  }
 else {
    prevWord=EditingUtils.getPreviousWord(ic,mSettingsValues.mWordSeparators);
  }
  final SuggestedWords.Builder builder=mSuggest.getSuggestedWordBuilder(mWordComposer,prevWord,mKeyboardSwitcher.getKeyboard().getProximityInfo(),mCorrectionMode);
  boolean autoCorrectionAvailable=!mInputAttributes.mInputTypeNoAutoCorrect && mSuggest.hasAutoCorrection();
  final CharSequence typedWord=mWordComposer.getTypedWord();
  final int quotesCount=mWordComposer.trailingSingleQuotesCount();
  final boolean allowsToBeAutoCorrected=AutoCorrection.allowsToBeAutoCorrected(mSuggest.getUnigramDictionaries(),quotesCount > 0 ? typedWord.subSequence(0,typedWord.length() - quotesCount) : typedWord,preferCapitalization());
  if (mCorrectionMode == Suggest.CORRECTION_FULL || mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    autoCorrectionAvailable|=(!allowsToBeAutoCorrected);
  }
  autoCorrectionAvailable&=!mWordComposer.isMostlyCaps();
  if (typedWord != null) {
    if (builder.size() > 1 || typedWord.length() == 1 || (!allowsToBeAutoCorrected) || mSuggestionsView.isShowingAddToDictionaryHint()) {
      builder.setTypedWordValid(!allowsToBeAutoCorrected).setHasMinimalSuggestion(autoCorrectionAvailable);
    }
 else {
      SuggestedWords previousSuggestions=mSuggestionsView.getSuggestions();
      if (previousSuggestions == mSettingsValues.mSuggestPuncList) {
        if (builder.size() == 0) {
          return;
        }
        previousSuggestions=SuggestedWords.EMPTY;
      }
      builder.addTypedWordAndPreviousSuggestions(typedWord,previousSuggestions);
    }
  }
  showSuggestions(builder.build(),typedWord);
}",0.9643683479870432
88044,"private void handleBackspaceWhileInBatchEdit(final int spaceState,final InputConnection ic){
  mVoiceProxy.handleBackspace();
  mHandler.postUpdateShiftKeyState();
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
    return;
  }
  if (mWordComposer.isComposingWord()) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      ic.setComposingText(getTextWithUnderline(mWordComposer.getTypedWord()),1);
      if (!mWordComposer.isComposingWord()) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    if (mWordComposer.didAutoCorrectToAnotherWord()) {
      Utils.Stats.onAutoCorrectionCancellation();
      cancelAutoCorrect(ic);
      return;
    }
    if (SPACE_STATE_DOUBLE == spaceState) {
      if (revertDoubleSpace(ic)) {
        return;
      }
    }
 else     if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
      if (revertSwapPunctuation(ic)) {
        return;
      }
    }
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      ic.deleteSurroundingText(1,0);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        ic.deleteSurroundingText(1,0);
      }
      restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
    }
  }
}","private void handleBackspaceWhileInBatchEdit(final int spaceState,final InputConnection ic){
  mVoiceProxy.handleBackspace();
  mHandler.postUpdateShiftKeyState();
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
    return;
  }
  if (mWordComposer.isComposingWord()) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      ic.setComposingText(getTextWithUnderline(mWordComposer.getTypedWord()),1);
      if (!mWordComposer.isComposingWord()) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    if (mWordComposer.didAutoCorrectToAnotherWord()) {
      Utils.Stats.onAutoCorrectionCancellation();
      cancelAutoCorrect(ic);
      return;
    }
    if (SPACE_STATE_DOUBLE == spaceState) {
      if (revertDoubleSpace(ic)) {
        return;
      }
    }
 else     if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
      if (revertSwapPunctuation(ic)) {
        return;
      }
    }
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      ic.deleteSurroundingText(1,0);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        ic.deleteSurroundingText(1,0);
      }
      if (isSuggestionsRequested()) {
        restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
      }
    }
  }
}",0.9797782126549248
88045,"/** 
 * Check if the cursor is actually at the end of a word. If so, restart suggestions on this word, else do nothing.
 */
private void restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(final InputConnection ic){
  final CharSequence textBeforeCursor=ic.getTextBeforeCursor(1,0);
  if (TextUtils.isEmpty(textBeforeCursor) || mSettingsValues.isWordSeparator(textBeforeCursor.charAt(0)))   return;
  final CharSequence textAfterCursor=ic.getTextAfterCursor(1,0);
  if (!TextUtils.isEmpty(textAfterCursor) && !mSettingsValues.isWordSeparator(textAfterCursor.charAt(0)))   return;
  final CharSequence word=EditingUtils.getWordAtCursor(ic,mSettingsValues.mWordSeparators);
  if (TextUtils.isEmpty(word))   return;
  if (word.length() == 1 && !Character.isLetter(word.charAt(0)))   return;
  restartSuggestionsOnWordBeforeCursor(ic,word);
}","/** 
 * Check if the cursor is actually at the end of a word. If so, restart suggestions on this word, else do nothing.
 */
private void restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(final InputConnection ic){
  final CharSequence textBeforeCursor=ic.getTextBeforeCursor(1,0);
  if (TextUtils.isEmpty(textBeforeCursor) || mSettingsValues.isWordSeparator(textBeforeCursor.charAt(0)))   return;
  final CharSequence textAfterCursor=ic.getTextAfterCursor(1,0);
  if (!TextUtils.isEmpty(textAfterCursor) && !mSettingsValues.isWordSeparator(textAfterCursor.charAt(0)))   return;
  CharSequence word=EditingUtils.getWordAtCursor(ic,mSettingsValues.mWordSeparators);
  while (!TextUtils.isEmpty(word) && Keyboard.CODE_SINGLE_QUOTE == word.charAt(0)) {
    word=word.subSequence(1,word.length());
  }
  if (TextUtils.isEmpty(word))   return;
  final char firstChar=word.charAt(0);
  if (word.length() == 1 && !Character.isLetter(firstChar))   return;
  if (!(isAlphabet(firstChar) || mSettingsValues.isSymbolExcludedFromWordSeparators(firstChar))) {
    return;
  }
  restartSuggestionsOnWordBeforeCursor(ic,word);
}",0.8008213552361396
88046,"/** 
 * Check if the cursor is actually at the end of a word. If so, restart suggestions on this word, else do nothing.
 */
private void restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(final InputConnection ic){
  final CharSequence textBeforeCursor=ic.getTextBeforeCursor(1,0);
  if (TextUtils.isEmpty(textBeforeCursor) || mSettingsValues.isWordSeparator(textBeforeCursor.charAt(0)))   return;
  final CharSequence textAfterCursor=ic.getTextAfterCursor(1,0);
  if (!TextUtils.isEmpty(textAfterCursor) && !mSettingsValues.isWordSeparator(textAfterCursor.charAt(0)))   return;
  final CharSequence word=EditingUtils.getWordAtCursor(ic,mSettingsValues.mWordSeparators);
  if (TextUtils.isEmpty(word))   return;
  if (word.length() == 1 && !Character.isLetter(word.charAt(0)))   return;
  restartSuggestionsOnWordBeforeCursor(ic,word);
}","/** 
 * Check if the cursor is actually at the end of a word. If so, restart suggestions on this word, else do nothing.
 */
private void restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(final InputConnection ic){
  final CharSequence textBeforeCursor=ic.getTextBeforeCursor(1,0);
  if (TextUtils.isEmpty(textBeforeCursor) || mSettingsValues.isWordSeparator(textBeforeCursor.charAt(0)))   return;
  final CharSequence textAfterCursor=ic.getTextAfterCursor(1,0);
  if (!TextUtils.isEmpty(textAfterCursor) && !mSettingsValues.isWordSeparator(textAfterCursor.charAt(0)))   return;
  CharSequence word=EditingUtils.getWordAtCursor(ic,mSettingsValues.mWordSeparators);
  while (!TextUtils.isEmpty(word) && Keyboard.CODE_SINGLE_QUOTE == word.charAt(0)) {
    word=word.subSequence(1,word.length());
  }
  if (TextUtils.isEmpty(word))   return;
  final char firstChar=word.charAt(0);
  if (word.length() == 1 && !Character.isLetter(firstChar))   return;
  if (!(isAlphabet(firstChar) || mSettingsValues.isSymbolExcludedFromWordSeparators(firstChar))) {
    return;
  }
  restartSuggestionsOnWordBeforeCursor(ic,word);
}",0.8008213552361396
88047,"/** 
 * Check if the cursor is actually at the end of a word. If so, restart suggestions on this word, else do nothing.
 */
private void restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(final InputConnection ic){
  final CharSequence textBeforeCursor=ic.getTextBeforeCursor(1,0);
  if (TextUtils.isEmpty(textBeforeCursor) || mSettingsValues.isWordSeparator(textBeforeCursor.charAt(0)))   return;
  final CharSequence textAfterCursor=ic.getTextAfterCursor(1,0);
  if (!TextUtils.isEmpty(textAfterCursor) && !mSettingsValues.isWordSeparator(textAfterCursor.charAt(0)))   return;
  final CharSequence word=EditingUtils.getWordAtCursor(ic,mSettingsValues.mWordSeparators);
  if (TextUtils.isEmpty(word))   return;
  if (word.length() == 1 && !Character.isLetter(word.charAt(0)))   return;
  restartSuggestionsOnWordBeforeCursor(ic,word);
}","/** 
 * Check if the cursor is actually at the end of a word. If so, restart suggestions on this word, else do nothing.
 */
private void restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(final InputConnection ic){
  final CharSequence textBeforeCursor=ic.getTextBeforeCursor(1,0);
  if (TextUtils.isEmpty(textBeforeCursor) || mSettingsValues.isWordSeparator(textBeforeCursor.charAt(0)))   return;
  final CharSequence textAfterCursor=ic.getTextAfterCursor(1,0);
  if (!TextUtils.isEmpty(textAfterCursor) && !mSettingsValues.isWordSeparator(textAfterCursor.charAt(0)))   return;
  CharSequence word=EditingUtils.getWordAtCursor(ic,mSettingsValues.mWordSeparators);
  while (!TextUtils.isEmpty(word) && Keyboard.CODE_SINGLE_QUOTE == word.charAt(0)) {
    word=word.subSequence(1,word.length());
  }
  if (TextUtils.isEmpty(word))   return;
  final char firstChar=word.charAt(0);
  if (word.length() == 1 && !Character.isLetter(firstChar))   return;
  if (!(isAlphabet(firstChar) || mSettingsValues.isSymbolExcludedFromWordSeparators(firstChar))) {
    return;
  }
  restartSuggestionsOnWordBeforeCursor(ic,word);
}",0.8008213552361396
88048,"public static boolean hasMultipleEnabledIMEsOrSubtypes(final boolean shouldIncludeAuxiliarySubtypes){
  final InputMethodManagerCompatWrapper imm=InputMethodManagerCompatWrapper.getInstance();
  if (imm == null)   return false;
  final List<InputMethodInfoCompatWrapper> enabledImis=imm.getEnabledInputMethodList();
  int filteredImisCount=0;
  for (  InputMethodInfoCompatWrapper imi : enabledImis) {
    if (filteredImisCount > 1)     return true;
    final List<InputMethodSubtypeCompatWrapper> subtypes=imm.getEnabledInputMethodSubtypeList(imi,true);
    if (subtypes.isEmpty()) {
      ++filteredImisCount;
      continue;
    }
    int auxCount=0;
    for (    InputMethodSubtypeCompatWrapper subtype : subtypes) {
      if (subtype.isAuxiliary()) {
        ++auxCount;
      }
    }
    final int nonAuxCount=subtypes.size() - auxCount;
    if (nonAuxCount > 0 || (shouldIncludeAuxiliarySubtypes && auxCount > 1)) {
      ++filteredImisCount;
      continue;
    }
  }
  return filteredImisCount > 1 || imm.getEnabledInputMethodSubtypeList(null,false).size() > 1;
}","public static boolean hasMultipleEnabledIMEsOrSubtypes(final boolean shouldIncludeAuxiliarySubtypes){
  final InputMethodManagerCompatWrapper imm=InputMethodManagerCompatWrapper.getInstance();
  if (imm == null)   return false;
  final List<InputMethodInfoCompatWrapper> enabledImis=imm.getEnabledInputMethodList();
  int filteredImisCount=0;
  for (  InputMethodInfoCompatWrapper imi : enabledImis) {
    if (filteredImisCount > 1)     return true;
    final List<InputMethodSubtypeCompatWrapper> subtypes=imm.getEnabledInputMethodSubtypeList(imi,true);
    if (subtypes.isEmpty()) {
      ++filteredImisCount;
      continue;
    }
    int auxCount=0;
    for (    InputMethodSubtypeCompatWrapper subtype : subtypes) {
      if (subtype.isAuxiliary()) {
        ++auxCount;
      }
    }
    final int nonAuxCount=subtypes.size() - auxCount;
    if (nonAuxCount > 0 || (shouldIncludeAuxiliarySubtypes && auxCount > 1)) {
      ++filteredImisCount;
      continue;
    }
  }
  if (filteredImisCount > 1) {
    return true;
  }
  final List<InputMethodSubtypeCompatWrapper> subtypes=imm.getEnabledInputMethodSubtypeList(null,true);
  int keyboardCount=0;
  for (  InputMethodSubtypeCompatWrapper subtype : subtypes) {
    if (SubtypeSwitcher.KEYBOARD_MODE.equals(subtype.getMode())) {
      ++keyboardCount;
    }
  }
  return keyboardCount > 1;
}",0.8673005374121537
88049,"public static boolean hasMultipleEnabledIMEsOrSubtypes(final boolean shouldIncludeAuxiliarySubtypes){
  final InputMethodManagerCompatWrapper imm=InputMethodManagerCompatWrapper.getInstance();
  if (imm == null)   return false;
  final List<InputMethodInfoCompatWrapper> enabledImis=imm.getEnabledInputMethodList();
  int filteredImisCount=0;
  for (  InputMethodInfoCompatWrapper imi : enabledImis) {
    if (filteredImisCount > 1)     return true;
    final List<InputMethodSubtypeCompatWrapper> subtypes=imm.getEnabledInputMethodSubtypeList(imi,true);
    if (subtypes.isEmpty()) {
      ++filteredImisCount;
      continue;
    }
    int auxCount=0;
    for (    InputMethodSubtypeCompatWrapper subtype : subtypes) {
      if (subtype.isAuxiliary()) {
        ++auxCount;
      }
    }
    final int nonAuxCount=subtypes.size() - auxCount;
    if (nonAuxCount > 0 || (shouldIncludeAuxiliarySubtypes && auxCount > 1)) {
      ++filteredImisCount;
      continue;
    }
  }
  return filteredImisCount > 1 || imm.getEnabledInputMethodSubtypeList(null,false).size() > 1;
}","public static boolean hasMultipleEnabledIMEsOrSubtypes(final boolean shouldIncludeAuxiliarySubtypes){
  final InputMethodManagerCompatWrapper imm=InputMethodManagerCompatWrapper.getInstance();
  if (imm == null)   return false;
  final List<InputMethodInfoCompatWrapper> enabledImis=imm.getEnabledInputMethodList();
  int filteredImisCount=0;
  for (  InputMethodInfoCompatWrapper imi : enabledImis) {
    if (filteredImisCount > 1)     return true;
    final List<InputMethodSubtypeCompatWrapper> subtypes=imm.getEnabledInputMethodSubtypeList(imi,true);
    if (subtypes.isEmpty()) {
      ++filteredImisCount;
      continue;
    }
    int auxCount=0;
    for (    InputMethodSubtypeCompatWrapper subtype : subtypes) {
      if (subtype.isAuxiliary()) {
        ++auxCount;
      }
    }
    final int nonAuxCount=subtypes.size() - auxCount;
    if (nonAuxCount > 0 || (shouldIncludeAuxiliarySubtypes && auxCount > 1)) {
      ++filteredImisCount;
      continue;
    }
  }
  if (filteredImisCount > 1) {
    return true;
  }
  final List<InputMethodSubtypeCompatWrapper> subtypes=imm.getEnabledInputMethodSubtypeList(null,true);
  int keyboardCount=0;
  for (  InputMethodSubtypeCompatWrapper subtype : subtypes) {
    if (SubtypeSwitcher.KEYBOARD_MODE.equals(subtype.getMode())) {
      ++keyboardCount;
    }
  }
  return keyboardCount > 1;
}",0.8673005374121537
88050,"@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (DEBUG) {
    Log.i(TAG,""String_Node_Str"" + oldSelStart + ""String_Node_Str""+ oldSelEnd+ ""String_Node_Str""+ mLastSelectionStart+ ""String_Node_Str""+ mLastSelectionEnd+ ""String_Node_Str""+ newSelStart+ ""String_Node_Str""+ newSelEnd+ ""String_Node_Str""+ candidatesStart+ ""String_Node_Str""+ candidatesEnd);
  }
  mVoiceProxy.setCursorAndSelection(newSelEnd,newSelStart);
  final boolean selectionChanged=(newSelStart != candidatesEnd || newSelEnd != candidatesEnd) && mLastSelectionStart != newSelStart;
  final boolean candidatesCleared=candidatesStart == -1 && candidatesEnd == -1;
  if (!mExpectingUpdateSelection) {
    if (SPACE_STATE_WEAK == mSpaceState) {
      mSpaceState=SPACE_STATE_NONE;
    }
    if (((mWordComposer.isComposingWord()) || mVoiceProxy.isVoiceInputHighlighted()) && (selectionChanged || candidatesCleared)) {
      mWordComposer.reset();
      updateSuggestions();
      final InputConnection ic=getCurrentInputConnection();
      if (ic != null) {
        ic.finishComposingText();
      }
      mComposingStateManager.onFinishComposingText();
      mVoiceProxy.setVoiceInputHighlighted(false);
    }
 else     if (!mWordComposer.isComposingWord()) {
      updateSuggestions();
    }
  }
  mExpectingUpdateSelection=false;
  mHandler.postUpdateShiftKeyState();
  mLastSelectionStart=newSelStart;
  mLastSelectionEnd=newSelEnd;
}","@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (DEBUG) {
    Log.i(TAG,""String_Node_Str"" + oldSelStart + ""String_Node_Str""+ oldSelEnd+ ""String_Node_Str""+ mLastSelectionStart+ ""String_Node_Str""+ mLastSelectionEnd+ ""String_Node_Str""+ newSelStart+ ""String_Node_Str""+ newSelEnd+ ""String_Node_Str""+ candidatesStart+ ""String_Node_Str""+ candidatesEnd);
  }
  mVoiceProxy.setCursorAndSelection(newSelEnd,newSelStart);
  final boolean selectionChanged=(newSelStart != candidatesEnd || newSelEnd != candidatesEnd) && mLastSelectionStart != newSelStart;
  final boolean candidatesCleared=candidatesStart == -1 && candidatesEnd == -1;
  if (!mExpectingUpdateSelection) {
    if (SPACE_STATE_WEAK == mSpaceState) {
      mSpaceState=SPACE_STATE_NONE;
    }
    if (((mWordComposer.isComposingWord()) || mVoiceProxy.isVoiceInputHighlighted()) && (selectionChanged || candidatesCleared)) {
      mWordComposer.reset();
      updateSuggestions();
      final InputConnection ic=getCurrentInputConnection();
      if (ic != null) {
        ic.finishComposingText();
      }
      mComposingStateManager.onFinishComposingText();
      mVoiceProxy.setVoiceInputHighlighted(false);
    }
 else     if (!mWordComposer.isComposingWord()) {
      mWordComposer.reset();
      updateSuggestions();
    }
  }
  mExpectingUpdateSelection=false;
  mHandler.postUpdateShiftKeyState();
  mLastSelectionStart=newSelStart;
  mLastSelectionEnd=newSelEnd;
}",0.990990990990991
88051,"@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (DEBUG) {
    Log.i(TAG,""String_Node_Str"" + oldSelStart + ""String_Node_Str""+ oldSelEnd+ ""String_Node_Str""+ mLastSelectionStart+ ""String_Node_Str""+ mLastSelectionEnd+ ""String_Node_Str""+ newSelStart+ ""String_Node_Str""+ newSelEnd+ ""String_Node_Str""+ candidatesStart+ ""String_Node_Str""+ candidatesEnd);
  }
  mVoiceProxy.setCursorAndSelection(newSelEnd,newSelStart);
  final boolean selectionChanged=(newSelStart != candidatesEnd || newSelEnd != candidatesEnd) && mLastSelectionStart != newSelStart;
  final boolean candidatesCleared=candidatesStart == -1 && candidatesEnd == -1;
  if (!mExpectingUpdateSelection) {
    if (SPACE_STATE_WEAK == mSpaceState) {
      mSpaceState=SPACE_STATE_NONE;
    }
    if (((mWordComposer.isComposingWord()) || mVoiceProxy.isVoiceInputHighlighted()) && (selectionChanged || candidatesCleared)) {
      mWordComposer.reset();
      updateSuggestions();
      final InputConnection ic=getCurrentInputConnection();
      if (ic != null) {
        ic.finishComposingText();
      }
      mComposingStateManager.onFinishComposingText();
      mVoiceProxy.setVoiceInputHighlighted(false);
    }
 else     if (!mWordComposer.isComposingWord()) {
      updateSuggestions();
    }
  }
  mExpectingUpdateSelection=false;
  mHandler.postUpdateShiftKeyState();
  mLastSelectionStart=newSelStart;
  mLastSelectionEnd=newSelEnd;
}","@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (DEBUG) {
    Log.i(TAG,""String_Node_Str"" + oldSelStart + ""String_Node_Str""+ oldSelEnd+ ""String_Node_Str""+ mLastSelectionStart+ ""String_Node_Str""+ mLastSelectionEnd+ ""String_Node_Str""+ newSelStart+ ""String_Node_Str""+ newSelEnd+ ""String_Node_Str""+ candidatesStart+ ""String_Node_Str""+ candidatesEnd);
  }
  mVoiceProxy.setCursorAndSelection(newSelEnd,newSelStart);
  final boolean selectionChanged=(newSelStart != candidatesEnd || newSelEnd != candidatesEnd) && mLastSelectionStart != newSelStart;
  final boolean candidatesCleared=candidatesStart == -1 && candidatesEnd == -1;
  if (!mExpectingUpdateSelection) {
    if (SPACE_STATE_WEAK == mSpaceState) {
      mSpaceState=SPACE_STATE_NONE;
    }
    if (((mWordComposer.isComposingWord()) || mVoiceProxy.isVoiceInputHighlighted()) && (selectionChanged || candidatesCleared)) {
      mWordComposer.reset();
      updateSuggestions();
      final InputConnection ic=getCurrentInputConnection();
      if (ic != null) {
        ic.finishComposingText();
      }
      mComposingStateManager.onFinishComposingText();
      mVoiceProxy.setVoiceInputHighlighted(false);
    }
 else     if (!mWordComposer.isComposingWord()) {
      mWordComposer.reset();
      updateSuggestions();
    }
  }
  mExpectingUpdateSelection=false;
  mHandler.postUpdateShiftKeyState();
  mLastSelectionStart=newSelStart;
  mLastSelectionEnd=newSelEnd;
}",0.990990990990991
88052,"public static boolean hasMultipleEnabledIMEsOrSubtypes(final boolean shouldIncludeAuxiliarySubtypes){
  final InputMethodManagerCompatWrapper imm=InputMethodManagerCompatWrapper.getInstance();
  if (imm == null)   return false;
  final List<InputMethodInfoCompatWrapper> enabledImis=imm.getEnabledInputMethodList();
  int filteredImisCount=0;
  for (  InputMethodInfoCompatWrapper imi : enabledImis) {
    if (filteredImisCount > 1)     return true;
    final List<InputMethodSubtypeCompatWrapper> subtypes=imm.getEnabledInputMethodSubtypeList(imi,true);
    if (subtypes.isEmpty()) {
      ++filteredImisCount;
      continue;
    }
    int auxCount=0;
    for (    InputMethodSubtypeCompatWrapper subtype : subtypes) {
      if (subtype.isAuxiliary()) {
        ++auxCount;
      }
    }
    final int nonAuxCount=subtypes.size() - auxCount;
    if (nonAuxCount > 0 || (shouldIncludeAuxiliarySubtypes && auxCount > 1)) {
      ++filteredImisCount;
      continue;
    }
  }
  return filteredImisCount > 1 || imm.getEnabledInputMethodSubtypeList(null,false).size() > 1;
}","public static boolean hasMultipleEnabledIMEsOrSubtypes(final boolean shouldIncludeAuxiliarySubtypes){
  final InputMethodManagerCompatWrapper imm=InputMethodManagerCompatWrapper.getInstance();
  if (imm == null)   return false;
  final List<InputMethodInfoCompatWrapper> enabledImis=imm.getEnabledInputMethodList();
  int filteredImisCount=0;
  for (  InputMethodInfoCompatWrapper imi : enabledImis) {
    if (filteredImisCount > 1)     return true;
    final List<InputMethodSubtypeCompatWrapper> subtypes=imm.getEnabledInputMethodSubtypeList(imi,true);
    if (subtypes.isEmpty()) {
      ++filteredImisCount;
      continue;
    }
    int auxCount=0;
    for (    InputMethodSubtypeCompatWrapper subtype : subtypes) {
      if (subtype.isAuxiliary()) {
        ++auxCount;
      }
    }
    final int nonAuxCount=subtypes.size() - auxCount;
    if (nonAuxCount > 0 || (shouldIncludeAuxiliarySubtypes && auxCount > 1)) {
      ++filteredImisCount;
      continue;
    }
  }
  if (filteredImisCount > 1) {
    return true;
  }
  final List<InputMethodSubtypeCompatWrapper> subtypes=imm.getEnabledInputMethodSubtypeList(null,true);
  int keyboardCount=0;
  for (  InputMethodSubtypeCompatWrapper subtype : subtypes) {
    if (SubtypeSwitcher.KEYBOARD_MODE.equals(subtype.getMode())) {
      ++keyboardCount;
    }
  }
  return keyboardCount > 1;
}",0.8673005374121537
88053,"@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (DEBUG) {
    Log.i(TAG,""String_Node_Str"" + oldSelStart + ""String_Node_Str""+ oldSelEnd+ ""String_Node_Str""+ mLastSelectionStart+ ""String_Node_Str""+ mLastSelectionEnd+ ""String_Node_Str""+ newSelStart+ ""String_Node_Str""+ newSelEnd+ ""String_Node_Str""+ candidatesStart+ ""String_Node_Str""+ candidatesEnd);
  }
  mVoiceProxy.setCursorAndSelection(newSelEnd,newSelStart);
  final boolean selectionChanged=(newSelStart != candidatesEnd || newSelEnd != candidatesEnd) && mLastSelectionStart != newSelStart;
  final boolean candidatesCleared=candidatesStart == -1 && candidatesEnd == -1;
  if (!mExpectingUpdateSelection) {
    if (SPACE_STATE_WEAK == mSpaceState) {
      mSpaceState=SPACE_STATE_NONE;
    }
    if (((mWordComposer.isComposingWord()) || mVoiceProxy.isVoiceInputHighlighted()) && (selectionChanged || candidatesCleared)) {
      mWordComposer.reset();
      updateSuggestions();
      final InputConnection ic=getCurrentInputConnection();
      if (ic != null) {
        ic.finishComposingText();
      }
      mComposingStateManager.onFinishComposingText();
      mVoiceProxy.setVoiceInputHighlighted(false);
    }
 else     if (!mWordComposer.isComposingWord()) {
      updateSuggestions();
    }
  }
  mExpectingUpdateSelection=false;
  mHandler.postUpdateShiftKeyState();
  mLastSelectionStart=newSelStart;
  mLastSelectionEnd=newSelEnd;
}","@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (DEBUG) {
    Log.i(TAG,""String_Node_Str"" + oldSelStart + ""String_Node_Str""+ oldSelEnd+ ""String_Node_Str""+ mLastSelectionStart+ ""String_Node_Str""+ mLastSelectionEnd+ ""String_Node_Str""+ newSelStart+ ""String_Node_Str""+ newSelEnd+ ""String_Node_Str""+ candidatesStart+ ""String_Node_Str""+ candidatesEnd);
  }
  mVoiceProxy.setCursorAndSelection(newSelEnd,newSelStart);
  final boolean selectionChanged=(newSelStart != candidatesEnd || newSelEnd != candidatesEnd) && mLastSelectionStart != newSelStart;
  final boolean candidatesCleared=candidatesStart == -1 && candidatesEnd == -1;
  if (!mExpectingUpdateSelection) {
    if (SPACE_STATE_WEAK == mSpaceState) {
      mSpaceState=SPACE_STATE_NONE;
    }
    if (((mWordComposer.isComposingWord()) || mVoiceProxy.isVoiceInputHighlighted()) && (selectionChanged || candidatesCleared)) {
      mWordComposer.reset();
      updateSuggestions();
      final InputConnection ic=getCurrentInputConnection();
      if (ic != null) {
        ic.finishComposingText();
      }
      mComposingStateManager.onFinishComposingText();
      mVoiceProxy.setVoiceInputHighlighted(false);
    }
 else     if (!mWordComposer.isComposingWord()) {
      mWordComposer.reset();
      updateSuggestions();
    }
  }
  mExpectingUpdateSelection=false;
  mHandler.postUpdateShiftKeyState();
  mLastSelectionStart=newSelStart;
  mLastSelectionEnd=newSelEnd;
}",0.990990990990991
88054,"@Override public void startElement(String uri,String localName,String qName,Attributes attrs){
  if (BIGRAM_W1_TAG.equals(localName)) {
    mW1=attrs.getValue(uri,BIGRAM_W1_ATTRIBUTE);
  }
 else   if (BIGRAM_W2_TAG.equals(localName)) {
    String w2=attrs.getValue(uri,BIGRAM_W2_ATTRIBUTE);
    int freq=Integer.parseInt(attrs.getValue(uri,BIGRAM_FREQ_ATTRIBUTE));
    WeightedString bigram=new WeightedString(w2,freq / 8);
    ArrayList<WeightedString> bigramList=mBigramsMap.get(mW1);
    if (null == bigramList)     bigramList=new ArrayList<WeightedString>();
    bigramList.add(bigram);
    mBigramsMap.put(mW1,bigramList);
  }
}","@Override public void startElement(String uri,String localName,String qName,Attributes attrs){
  if (BIGRAM_W1_TAG.equals(localName)) {
    mW1=attrs.getValue(uri,BIGRAM_W1_ATTRIBUTE);
  }
 else   if (BIGRAM_W2_TAG.equals(localName)) {
    String w2=attrs.getValue(uri,BIGRAM_W2_ATTRIBUTE);
    int freq=Integer.parseInt(attrs.getValue(uri,BIGRAM_FREQ_ATTRIBUTE));
    WeightedString bigram=new WeightedString(w2,freq / XML_TO_MEMORY_RATIO);
    ArrayList<WeightedString> bigramList=mBigramsMap.get(mW1);
    if (null == bigramList)     bigramList=new ArrayList<WeightedString>();
    bigramList.add(bigram);
    mBigramsMap.put(mW1,bigramList);
  }
}",0.9844236760124612
88055,"@Override public void startElement(String uri,String localName,String qName,Attributes attrs){
  if (BIGRAM_W1_TAG.equals(localName)) {
    mW1=attrs.getValue(uri,BIGRAM_W1_ATTRIBUTE);
  }
 else   if (BIGRAM_W2_TAG.equals(localName)) {
    String w2=attrs.getValue(uri,BIGRAM_W2_ATTRIBUTE);
    int freq=Integer.parseInt(attrs.getValue(uri,BIGRAM_FREQ_ATTRIBUTE));
    WeightedString bigram=new WeightedString(w2,freq / 8);
    ArrayList<WeightedString> bigramList=mBigramsMap.get(mW1);
    if (null == bigramList)     bigramList=new ArrayList<WeightedString>();
    bigramList.add(bigram);
    mBigramsMap.put(mW1,bigramList);
  }
}","@Override public void startElement(String uri,String localName,String qName,Attributes attrs){
  if (BIGRAM_W1_TAG.equals(localName)) {
    mW1=attrs.getValue(uri,BIGRAM_W1_ATTRIBUTE);
  }
 else   if (BIGRAM_W2_TAG.equals(localName)) {
    String w2=attrs.getValue(uri,BIGRAM_W2_ATTRIBUTE);
    int freq=Integer.parseInt(attrs.getValue(uri,BIGRAM_FREQ_ATTRIBUTE));
    WeightedString bigram=new WeightedString(w2,freq / XML_TO_MEMORY_RATIO);
    ArrayList<WeightedString> bigramList=mBigramsMap.get(mW1);
    if (null == bigramList)     bigramList=new ArrayList<WeightedString>();
    bigramList.add(bigram);
    mBigramsMap.put(mW1,bigramList);
  }
}",0.9844236760124612
88056,"@Override public void startElement(String uri,String localName,String qName,Attributes attrs){
  if (BIGRAM_W1_TAG.equals(localName)) {
    mW1=attrs.getValue(uri,BIGRAM_W1_ATTRIBUTE);
  }
 else   if (BIGRAM_W2_TAG.equals(localName)) {
    String w2=attrs.getValue(uri,BIGRAM_W2_ATTRIBUTE);
    int freq=Integer.parseInt(attrs.getValue(uri,BIGRAM_FREQ_ATTRIBUTE));
    WeightedString bigram=new WeightedString(w2,freq / 8);
    ArrayList<WeightedString> bigramList=mBigramsMap.get(mW1);
    if (null == bigramList)     bigramList=new ArrayList<WeightedString>();
    bigramList.add(bigram);
    mBigramsMap.put(mW1,bigramList);
  }
}","@Override public void startElement(String uri,String localName,String qName,Attributes attrs){
  if (BIGRAM_W1_TAG.equals(localName)) {
    mW1=attrs.getValue(uri,BIGRAM_W1_ATTRIBUTE);
  }
 else   if (BIGRAM_W2_TAG.equals(localName)) {
    String w2=attrs.getValue(uri,BIGRAM_W2_ATTRIBUTE);
    int freq=Integer.parseInt(attrs.getValue(uri,BIGRAM_FREQ_ATTRIBUTE));
    WeightedString bigram=new WeightedString(w2,freq / XML_TO_MEMORY_RATIO);
    ArrayList<WeightedString> bigramList=mBigramsMap.get(mW1);
    if (null == bigramList)     bigramList=new ArrayList<WeightedString>();
    bigramList.add(bigram);
    mBigramsMap.put(mW1,bigramList);
  }
}",0.9844236760124612
88057,"public InputAttributes(final EditorInfo editorInfo,final boolean isFullscreenMode){
  if (editorInfo == null || editorInfo.inputType == InputType.TYPE_CLASS_TEXT) {
    mInsertSpaceOnPickSuggestionManually=false;
    mIsSettingsSuggestionStripOn=false;
    mInputTypeNoAutoCorrect=false;
    mApplicationSpecifiedCompletionOn=false;
  }
 else {
    final int inputType=editorInfo.inputType;
    if (inputType == InputType.TYPE_NULL) {
      Log.i(TAG,""String_Node_Str"");
    }
    final int inputClass=inputType & InputType.TYPE_MASK_CLASS;
    final int variation=inputType & InputType.TYPE_MASK_VARIATION;
    if (inputClass == 0) {
      Log.w(TAG,String.format(""String_Node_Str"" + ""String_Node_Str"",inputType,editorInfo.imeOptions));
    }
    final boolean flagNoSuggestions=0 != (inputType & InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
    final boolean flagMultiLine=0 != (inputType & InputType.TYPE_TEXT_FLAG_MULTI_LINE);
    final boolean flagAutoCorrect=0 != (inputType & InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
    final boolean flagAutoComplete=0 != (inputType & InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE);
    if (InputTypeCompatUtils.isPasswordInputType(inputType) || InputTypeCompatUtils.isVisiblePasswordInputType(inputType) || InputTypeCompatUtils.isEmailVariation(variation)|| InputType.TYPE_TEXT_VARIATION_URI == variation || InputType.TYPE_TEXT_VARIATION_FILTER == variation || flagNoSuggestions || flagAutoComplete) {
      mIsSettingsSuggestionStripOn=false;
    }
 else {
      mIsSettingsSuggestionStripOn=true;
    }
    if (InputTypeCompatUtils.isEmailVariation(variation) || variation == InputType.TYPE_TEXT_VARIATION_PERSON_NAME) {
      mInsertSpaceOnPickSuggestionManually=false;
    }
 else {
      mInsertSpaceOnPickSuggestionManually=true;
    }
    if ((variation == InputType.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT && !flagAutoCorrect) || flagNoSuggestions || (!flagAutoCorrect && !flagMultiLine)) {
      mInputTypeNoAutoCorrect=true;
    }
 else {
      mInputTypeNoAutoCorrect=false;
    }
    mApplicationSpecifiedCompletionOn=flagAutoComplete && isFullscreenMode;
  }
}","public InputAttributes(final EditorInfo editorInfo,final boolean isFullscreenMode){
  final int inputType=null != editorInfo ? editorInfo.inputType : 0;
  final int inputClass=inputType & InputType.TYPE_MASK_CLASS;
  if (inputClass != InputType.TYPE_CLASS_TEXT) {
    if (null == editorInfo) {
      Log.w(TAG,""String_Node_Str"");
    }
 else     if (InputType.TYPE_NULL == inputType) {
      Log.i(TAG,""String_Node_Str"");
    }
 else     if (inputClass == 0) {
      Log.w(TAG,String.format(""String_Node_Str"" + ""String_Node_Str"",inputType,editorInfo.imeOptions));
    }
    mInsertSpaceOnPickSuggestionManually=false;
    mIsSettingsSuggestionStripOn=false;
    mInputTypeNoAutoCorrect=false;
    mApplicationSpecifiedCompletionOn=false;
  }
 else {
    final int variation=inputType & InputType.TYPE_MASK_VARIATION;
    final boolean flagNoSuggestions=0 != (inputType & InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
    final boolean flagMultiLine=0 != (inputType & InputType.TYPE_TEXT_FLAG_MULTI_LINE);
    final boolean flagAutoCorrect=0 != (inputType & InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
    final boolean flagAutoComplete=0 != (inputType & InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE);
    if (InputTypeCompatUtils.isPasswordInputType(inputType) || InputTypeCompatUtils.isVisiblePasswordInputType(inputType) || InputTypeCompatUtils.isEmailVariation(variation)|| InputType.TYPE_TEXT_VARIATION_URI == variation || InputType.TYPE_TEXT_VARIATION_FILTER == variation || flagNoSuggestions || flagAutoComplete) {
      mIsSettingsSuggestionStripOn=false;
    }
 else {
      mIsSettingsSuggestionStripOn=true;
    }
    if (InputTypeCompatUtils.isEmailVariation(variation) || variation == InputType.TYPE_TEXT_VARIATION_PERSON_NAME) {
      mInsertSpaceOnPickSuggestionManually=false;
    }
 else {
      mInsertSpaceOnPickSuggestionManually=true;
    }
    if ((variation == InputType.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT && !flagAutoCorrect) || flagNoSuggestions || (!flagAutoCorrect && !flagMultiLine)) {
      mInputTypeNoAutoCorrect=true;
    }
 else {
      mInputTypeNoAutoCorrect=false;
    }
    mApplicationSpecifiedCompletionOn=flagAutoComplete && isFullscreenMode;
  }
}",0.7810817138843362
88058,"private void commitCurrentAutoCorrection(final int separatorCodePoint,final InputConnection ic){
  if (mHandler.hasPendingUpdateSuggestions()) {
    mHandler.cancelUpdateSuggestions();
    updateSuggestions();
  }
  final CharSequence autoCorrection=mWordComposer.getAutoCorrectionOrNull();
  if (autoCorrection != null) {
    final String typedWord=mWordComposer.getTypedWord();
    if (TextUtils.isEmpty(typedWord)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
    }
    Utils.Stats.onAutoCorrection(typedWord,autoCorrection.toString(),separatorCodePoint);
    mExpectingUpdateSelection=true;
    commitBestWord(autoCorrection);
    addToUserUnigramAndBigramDictionaries(autoCorrection,UserUnigramDictionary.FREQUENCY_FOR_TYPED);
    if (!typedWord.equals(autoCorrection) && null != ic) {
      InputConnectionCompatUtils.commitCorrection(ic,mLastSelectionEnd - typedWord.length(),typedWord,autoCorrection);
    }
  }
}","private void commitCurrentAutoCorrection(final int separatorCodePoint,final InputConnection ic){
  if (mHandler.hasPendingUpdateSuggestions()) {
    mHandler.cancelUpdateSuggestions();
    updateSuggestions();
  }
  final CharSequence autoCorrection=mWordComposer.getAutoCorrectionOrNull();
  if (autoCorrection != null) {
    final String typedWord=mWordComposer.getTypedWord();
    if (TextUtils.isEmpty(typedWord)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
    }
    Utils.Stats.onAutoCorrection(typedWord,autoCorrection.toString(),separatorCodePoint);
    mExpectingUpdateSelection=true;
    commitChosenWord(autoCorrection,WordComposer.COMMIT_TYPE_DECIDED_WORD);
    addToUserUnigramAndBigramDictionaries(autoCorrection,UserUnigramDictionary.FREQUENCY_FOR_TYPED);
    if (!typedWord.equals(autoCorrection) && null != ic) {
      InputConnectionCompatUtils.commitCorrection(ic,mLastSelectionEnd - typedWord.length(),typedWord,autoCorrection);
    }
  }
}",0.9557157569515964
88059,"@Override public void pickSuggestionManually(int index,CharSequence suggestion){
  mComposingStateManager.onFinishComposingText();
  SuggestedWords suggestions=mSuggestionsView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mInputAttributes.mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    if (ic != null) {
      final CompletionInfo completionInfo=mApplicationSpecifiedCompletions[index];
      ic.commitCompletion(completionInfo);
    }
    if (mSuggestionsView != null) {
      mSuggestionsView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && (mSettingsValues.isWordSeparator(suggestion.charAt(0)) || mSettingsValues.isSuggestedPunctuation(suggestion.charAt(0)))) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestions.mWords);
    final int rawPrimaryCode=suggestion.charAt(0);
    final Keyboard keyboard=mKeyboardSwitcher.getKeyboard();
    final boolean isRtl=keyboard != null && keyboard.mIsRtlKeyboard;
    final int primaryCode=Key.getRtlParenthesisCode(rawPrimaryCode,isRtl);
    insertPunctuationFromSuggestionStrip(ic,primaryCode);
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  mExpectingUpdateSelection=true;
  commitBestWord(suggestion);
  if (index == 0) {
    addToUserUnigramAndBigramDictionaries(suggestion,UserUnigramDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  LatinImeLogger.logOnManualSuggestion(mWordComposer.getTypedWord().toString(),suggestion.toString(),index,suggestions.mWords);
  if (mInputAttributes.mInsertSpaceOnPickSuggestionManually) {
    sendMagicSpace();
  }
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mSuggest.hasMainDictionary() || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  Utils.Stats.onSeparator((char)Keyboard.CODE_SPACE,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  if (!showingAddToDictionaryHint) {
    updateBigramPredictions();
  }
  if (showingAddToDictionaryHint) {
    if (mIsUserDictionaryAvailable) {
      mSuggestionsView.showAddToDictionaryHint(suggestion,mSettingsValues.mHintToSaveText);
    }
 else {
      mHandler.postUpdateSuggestions();
    }
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}","@Override public void pickSuggestionManually(int index,CharSequence suggestion){
  mComposingStateManager.onFinishComposingText();
  SuggestedWords suggestions=mSuggestionsView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mInputAttributes.mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    if (ic != null) {
      final CompletionInfo completionInfo=mApplicationSpecifiedCompletions[index];
      ic.commitCompletion(completionInfo);
    }
    if (mSuggestionsView != null) {
      mSuggestionsView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && (mSettingsValues.isWordSeparator(suggestion.charAt(0)) || mSettingsValues.isSuggestedPunctuation(suggestion.charAt(0)))) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestions.mWords);
    final int rawPrimaryCode=suggestion.charAt(0);
    final Keyboard keyboard=mKeyboardSwitcher.getKeyboard();
    final boolean isRtl=keyboard != null && keyboard.mIsRtlKeyboard;
    final int primaryCode=Key.getRtlParenthesisCode(rawPrimaryCode,isRtl);
    insertPunctuationFromSuggestionStrip(ic,primaryCode);
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  mExpectingUpdateSelection=true;
  commitChosenWord(suggestion,WordComposer.COMMIT_TYPE_MANUAL_PICK);
  if (index == 0) {
    addToUserUnigramAndBigramDictionaries(suggestion,UserUnigramDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  LatinImeLogger.logOnManualSuggestion(mWordComposer.getTypedWord().toString(),suggestion.toString(),index,suggestions.mWords);
  if (mInputAttributes.mInsertSpaceOnPickSuggestionManually) {
    sendMagicSpace();
  }
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mSuggest.hasMainDictionary() || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  Utils.Stats.onSeparator((char)Keyboard.CODE_SPACE,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  if (!showingAddToDictionaryHint) {
    updateBigramPredictions();
  }
  if (showingAddToDictionaryHint) {
    if (mIsUserDictionaryAvailable) {
      mSuggestionsView.showAddToDictionaryHint(suggestion,mSettingsValues.mHintToSaveText);
    }
 else {
      mHandler.postUpdateSuggestions();
    }
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9912817659061398
88060,"private void cancelAutoCorrect(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final String originallyTypedWord=mWordComposer.getTypedWord();
  final CharSequence autoCorrectedTo=mWordComposer.getAutoCorrectionOrNull();
  final int cancelLength=autoCorrectedTo.length();
  final CharSequence separator=ic.getTextBeforeCursor(1,0);
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(cancelLength + 1,0).subSequence(0,cancelLength).toString();
    if (!autoCorrectedTo.equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + autoCorrectedTo + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
    if (originallyTypedWord.equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + originallyTypedWord + ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(cancelLength + 1,0);
  ic.commitText(originallyTypedWord,1);
  ic.commitText(separator,1);
  mWordComposer.deleteAutoCorrection();
  mWordComposer.onCommitWord();
  Utils.Stats.onSeparator(separator.charAt(0),WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}","private void cancelAutoCorrect(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final String originallyTypedWord=mWordComposer.getTypedWord();
  final CharSequence autoCorrectedTo=mWordComposer.getAutoCorrectionOrNull();
  final int cancelLength=autoCorrectedTo.length();
  final CharSequence separator=ic.getTextBeforeCursor(1,0);
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(cancelLength + 1,0).subSequence(0,cancelLength).toString();
    if (!autoCorrectedTo.equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + autoCorrectedTo + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
    if (originallyTypedWord.equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + originallyTypedWord + ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(cancelLength + 1,0);
  ic.commitText(originallyTypedWord,1);
  ic.commitText(separator,1);
  mWordComposer.deleteAutoCorrection();
  mWordComposer.onCommitWord(WordComposer.COMMIT_TYPE_CANCEL_AUTO_CORRECT);
  Utils.Stats.onSeparator(separator.charAt(0),WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}",0.9827990617670056
88061,"public void commitTyped(final InputConnection ic){
  if (!mWordComposer.isComposingWord())   return;
  final CharSequence typedWord=mWordComposer.getTypedWord();
  mWordComposer.onCommitWord();
  if (typedWord.length() > 0) {
    if (ic != null) {
      ic.commitText(typedWord,1);
    }
    addToUserUnigramAndBigramDictionaries(typedWord,UserUnigramDictionary.FREQUENCY_FOR_TYPED);
  }
  updateSuggestions();
}","public void commitTyped(final InputConnection ic){
  if (!mWordComposer.isComposingWord())   return;
  final CharSequence typedWord=mWordComposer.getTypedWord();
  mWordComposer.onCommitWord(WordComposer.COMMIT_TYPE_USER_TYPED_WORD);
  if (typedWord.length() > 0) {
    if (ic != null) {
      ic.commitText(typedWord,1);
    }
    addToUserUnigramAndBigramDictionaries(typedWord,UserUnigramDictionary.FREQUENCY_FOR_TYPED);
  }
  updateSuggestions();
}",0.9537037037037036
88062,"public void onCommitWord(){
  mCommittedWordSavedForSuggestionResuming=mCurrentWord;
  mCurrentWord=new CharacterStore();
}","public void onCommitWord(final int type){
  mCommittedWordSavedForSuggestionResuming=mCurrentWord;
  if (type != COMMIT_TYPE_DECIDED_WORD) {
    mCommittedWordSavedForSuggestionResuming.mAutoCorrection=null;
  }
  mCurrentWord=new CharacterStore();
}",0.6595174262734584
88063,"public InputAttributes(final EditorInfo editorInfo,final boolean isFullscreenMode){
  if (editorInfo == null || editorInfo.inputType == InputType.TYPE_CLASS_TEXT) {
    mInsertSpaceOnPickSuggestionManually=false;
    mIsSettingsSuggestionStripOn=false;
    mInputTypeNoAutoCorrect=false;
    mApplicationSpecifiedCompletionOn=false;
  }
 else {
    final int inputType=editorInfo.inputType;
    if (inputType == InputType.TYPE_NULL) {
      Log.i(TAG,""String_Node_Str"");
    }
    final int inputClass=inputType & InputType.TYPE_MASK_CLASS;
    final int variation=inputType & InputType.TYPE_MASK_VARIATION;
    if (inputClass == 0) {
      Log.w(TAG,String.format(""String_Node_Str"" + ""String_Node_Str"",inputType,editorInfo.imeOptions));
    }
    final boolean flagNoSuggestions=0 != (inputType & InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
    final boolean flagMultiLine=0 != (inputType & InputType.TYPE_TEXT_FLAG_MULTI_LINE);
    final boolean flagAutoCorrect=0 != (inputType & InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
    final boolean flagAutoComplete=0 != (inputType & InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE);
    if (InputTypeCompatUtils.isPasswordInputType(inputType) || InputTypeCompatUtils.isVisiblePasswordInputType(inputType) || InputTypeCompatUtils.isEmailVariation(variation)|| InputType.TYPE_TEXT_VARIATION_URI == variation || InputType.TYPE_TEXT_VARIATION_FILTER == variation || flagNoSuggestions || flagAutoComplete) {
      mIsSettingsSuggestionStripOn=false;
    }
 else {
      mIsSettingsSuggestionStripOn=true;
    }
    if (InputTypeCompatUtils.isEmailVariation(variation) || variation == InputType.TYPE_TEXT_VARIATION_PERSON_NAME) {
      mInsertSpaceOnPickSuggestionManually=false;
    }
 else {
      mInsertSpaceOnPickSuggestionManually=true;
    }
    if ((variation == InputType.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT && !flagAutoCorrect) || flagNoSuggestions || (!flagAutoCorrect && !flagMultiLine)) {
      mInputTypeNoAutoCorrect=true;
    }
 else {
      mInputTypeNoAutoCorrect=false;
    }
    mApplicationSpecifiedCompletionOn=flagAutoComplete && isFullscreenMode;
  }
}","public InputAttributes(final EditorInfo editorInfo,final boolean isFullscreenMode){
  final int inputType=null != editorInfo ? editorInfo.inputType : 0;
  final int inputClass=inputType & InputType.TYPE_MASK_CLASS;
  if (inputClass != InputType.TYPE_CLASS_TEXT) {
    if (null == editorInfo) {
      Log.w(TAG,""String_Node_Str"");
    }
 else     if (InputType.TYPE_NULL == inputType) {
      Log.i(TAG,""String_Node_Str"");
    }
 else     if (inputClass == 0) {
      Log.w(TAG,String.format(""String_Node_Str"" + ""String_Node_Str"",inputType,editorInfo.imeOptions));
    }
    mInsertSpaceOnPickSuggestionManually=false;
    mIsSettingsSuggestionStripOn=false;
    mInputTypeNoAutoCorrect=false;
    mApplicationSpecifiedCompletionOn=false;
  }
 else {
    final int variation=inputType & InputType.TYPE_MASK_VARIATION;
    final boolean flagNoSuggestions=0 != (inputType & InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
    final boolean flagMultiLine=0 != (inputType & InputType.TYPE_TEXT_FLAG_MULTI_LINE);
    final boolean flagAutoCorrect=0 != (inputType & InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
    final boolean flagAutoComplete=0 != (inputType & InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE);
    if (InputTypeCompatUtils.isPasswordInputType(inputType) || InputTypeCompatUtils.isVisiblePasswordInputType(inputType) || InputTypeCompatUtils.isEmailVariation(variation)|| InputType.TYPE_TEXT_VARIATION_URI == variation || InputType.TYPE_TEXT_VARIATION_FILTER == variation || flagNoSuggestions || flagAutoComplete) {
      mIsSettingsSuggestionStripOn=false;
    }
 else {
      mIsSettingsSuggestionStripOn=true;
    }
    if (InputTypeCompatUtils.isEmailVariation(variation) || variation == InputType.TYPE_TEXT_VARIATION_PERSON_NAME) {
      mInsertSpaceOnPickSuggestionManually=false;
    }
 else {
      mInsertSpaceOnPickSuggestionManually=true;
    }
    if ((variation == InputType.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT && !flagAutoCorrect) || flagNoSuggestions || (!flagAutoCorrect && !flagMultiLine)) {
      mInputTypeNoAutoCorrect=true;
    }
 else {
      mInputTypeNoAutoCorrect=false;
    }
    mApplicationSpecifiedCompletionOn=flagAutoComplete && isFullscreenMode;
  }
}",0.7810817138843362
88064,"private void commitCurrentAutoCorrection(final int separatorCodePoint,final InputConnection ic){
  if (mHandler.hasPendingUpdateSuggestions()) {
    mHandler.cancelUpdateSuggestions();
    updateSuggestions();
  }
  final CharSequence autoCorrection=mWordComposer.getAutoCorrectionOrNull();
  if (autoCorrection != null) {
    final String typedWord=mWordComposer.getTypedWord();
    if (TextUtils.isEmpty(typedWord)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
    }
    Utils.Stats.onAutoCorrection(typedWord,autoCorrection.toString(),separatorCodePoint);
    mExpectingUpdateSelection=true;
    commitBestWord(autoCorrection);
    addToUserUnigramAndBigramDictionaries(autoCorrection,UserUnigramDictionary.FREQUENCY_FOR_TYPED);
    if (!typedWord.equals(autoCorrection) && null != ic) {
      InputConnectionCompatUtils.commitCorrection(ic,mLastSelectionEnd - typedWord.length(),typedWord,autoCorrection);
    }
  }
}","private void commitCurrentAutoCorrection(final int separatorCodePoint,final InputConnection ic){
  if (mHandler.hasPendingUpdateSuggestions()) {
    mHandler.cancelUpdateSuggestions();
    updateSuggestions();
  }
  final CharSequence autoCorrection=mWordComposer.getAutoCorrectionOrNull();
  if (autoCorrection != null) {
    final String typedWord=mWordComposer.getTypedWord();
    if (TextUtils.isEmpty(typedWord)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
    }
    Utils.Stats.onAutoCorrection(typedWord,autoCorrection.toString(),separatorCodePoint);
    mExpectingUpdateSelection=true;
    commitChosenWord(autoCorrection,WordComposer.COMMIT_TYPE_DECIDED_WORD);
    addToUserUnigramAndBigramDictionaries(autoCorrection,UserUnigramDictionary.FREQUENCY_FOR_TYPED);
    if (!typedWord.equals(autoCorrection) && null != ic) {
      InputConnectionCompatUtils.commitCorrection(ic,mLastSelectionEnd - typedWord.length(),typedWord,autoCorrection);
    }
  }
}",0.9557157569515964
88065,"@Override public void pickSuggestionManually(int index,CharSequence suggestion){
  mComposingStateManager.onFinishComposingText();
  SuggestedWords suggestions=mSuggestionsView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mInputAttributes.mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    if (ic != null) {
      final CompletionInfo completionInfo=mApplicationSpecifiedCompletions[index];
      ic.commitCompletion(completionInfo);
    }
    if (mSuggestionsView != null) {
      mSuggestionsView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && (mSettingsValues.isWordSeparator(suggestion.charAt(0)) || mSettingsValues.isSuggestedPunctuation(suggestion.charAt(0)))) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestions.mWords);
    final int rawPrimaryCode=suggestion.charAt(0);
    final Keyboard keyboard=mKeyboardSwitcher.getKeyboard();
    final boolean isRtl=keyboard != null && keyboard.mIsRtlKeyboard;
    final int primaryCode=Key.getRtlParenthesisCode(rawPrimaryCode,isRtl);
    insertPunctuationFromSuggestionStrip(ic,primaryCode);
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  mExpectingUpdateSelection=true;
  commitBestWord(suggestion);
  if (index == 0) {
    addToUserUnigramAndBigramDictionaries(suggestion,UserUnigramDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  LatinImeLogger.logOnManualSuggestion(mWordComposer.getTypedWord().toString(),suggestion.toString(),index,suggestions.mWords);
  if (mInputAttributes.mInsertSpaceOnPickSuggestionManually) {
    sendMagicSpace();
  }
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mSuggest.hasMainDictionary() || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  Utils.Stats.onSeparator((char)Keyboard.CODE_SPACE,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  if (!showingAddToDictionaryHint) {
    updateBigramPredictions();
  }
  if (showingAddToDictionaryHint) {
    if (mIsUserDictionaryAvailable) {
      mSuggestionsView.showAddToDictionaryHint(suggestion,mSettingsValues.mHintToSaveText);
    }
 else {
      mHandler.postUpdateSuggestions();
    }
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}","@Override public void pickSuggestionManually(int index,CharSequence suggestion){
  mComposingStateManager.onFinishComposingText();
  SuggestedWords suggestions=mSuggestionsView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mInputAttributes.mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    if (ic != null) {
      final CompletionInfo completionInfo=mApplicationSpecifiedCompletions[index];
      ic.commitCompletion(completionInfo);
    }
    if (mSuggestionsView != null) {
      mSuggestionsView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && (mSettingsValues.isWordSeparator(suggestion.charAt(0)) || mSettingsValues.isSuggestedPunctuation(suggestion.charAt(0)))) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestions.mWords);
    final int rawPrimaryCode=suggestion.charAt(0);
    final Keyboard keyboard=mKeyboardSwitcher.getKeyboard();
    final boolean isRtl=keyboard != null && keyboard.mIsRtlKeyboard;
    final int primaryCode=Key.getRtlParenthesisCode(rawPrimaryCode,isRtl);
    insertPunctuationFromSuggestionStrip(ic,primaryCode);
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  mExpectingUpdateSelection=true;
  commitChosenWord(suggestion,WordComposer.COMMIT_TYPE_MANUAL_PICK);
  if (index == 0) {
    addToUserUnigramAndBigramDictionaries(suggestion,UserUnigramDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  LatinImeLogger.logOnManualSuggestion(mWordComposer.getTypedWord().toString(),suggestion.toString(),index,suggestions.mWords);
  if (mInputAttributes.mInsertSpaceOnPickSuggestionManually) {
    sendMagicSpace();
  }
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mSuggest.hasMainDictionary() || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  Utils.Stats.onSeparator((char)Keyboard.CODE_SPACE,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  if (!showingAddToDictionaryHint) {
    updateBigramPredictions();
  }
  if (showingAddToDictionaryHint) {
    if (mIsUserDictionaryAvailable) {
      mSuggestionsView.showAddToDictionaryHint(suggestion,mSettingsValues.mHintToSaveText);
    }
 else {
      mHandler.postUpdateSuggestions();
    }
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9912817659061398
88066,"private void cancelAutoCorrect(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final String originallyTypedWord=mWordComposer.getTypedWord();
  final CharSequence autoCorrectedTo=mWordComposer.getAutoCorrectionOrNull();
  final int cancelLength=autoCorrectedTo.length();
  final CharSequence separator=ic.getTextBeforeCursor(1,0);
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(cancelLength + 1,0).subSequence(0,cancelLength).toString();
    if (!autoCorrectedTo.equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + autoCorrectedTo + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
    if (originallyTypedWord.equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + originallyTypedWord + ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(cancelLength + 1,0);
  ic.commitText(originallyTypedWord,1);
  ic.commitText(separator,1);
  mWordComposer.deleteAutoCorrection();
  mWordComposer.onCommitWord();
  Utils.Stats.onSeparator(separator.charAt(0),WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}","private void cancelAutoCorrect(final InputConnection ic){
  mWordComposer.resumeSuggestionOnKeptWord();
  final String originallyTypedWord=mWordComposer.getTypedWord();
  final CharSequence autoCorrectedTo=mWordComposer.getAutoCorrectionOrNull();
  final int cancelLength=autoCorrectedTo.length();
  final CharSequence separator=ic.getTextBeforeCursor(1,0);
  if (DEBUG) {
    final String wordBeforeCursor=ic.getTextBeforeCursor(cancelLength + 1,0).subSequence(0,cancelLength).toString();
    if (!autoCorrectedTo.equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + autoCorrectedTo + ""String_Node_Str""+ wordBeforeCursor+ ""String_Node_Str"");
    }
    if (originallyTypedWord.equals(wordBeforeCursor)) {
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + originallyTypedWord + ""String_Node_Str"");
    }
  }
  ic.deleteSurroundingText(cancelLength + 1,0);
  ic.commitText(originallyTypedWord,1);
  ic.commitText(separator,1);
  mWordComposer.deleteAutoCorrection();
  mWordComposer.onCommitWord(WordComposer.COMMIT_TYPE_CANCEL_AUTO_CORRECT);
  Utils.Stats.onSeparator(separator.charAt(0),WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  mHandler.cancelUpdateBigramPredictions();
  mHandler.postUpdateSuggestions();
}",0.9827990617670056
88067,"public void commitTyped(final InputConnection ic){
  if (!mWordComposer.isComposingWord())   return;
  final CharSequence typedWord=mWordComposer.getTypedWord();
  mWordComposer.onCommitWord();
  if (typedWord.length() > 0) {
    if (ic != null) {
      ic.commitText(typedWord,1);
    }
    addToUserUnigramAndBigramDictionaries(typedWord,UserUnigramDictionary.FREQUENCY_FOR_TYPED);
  }
  updateSuggestions();
}","public void commitTyped(final InputConnection ic){
  if (!mWordComposer.isComposingWord())   return;
  final CharSequence typedWord=mWordComposer.getTypedWord();
  mWordComposer.onCommitWord(WordComposer.COMMIT_TYPE_USER_TYPED_WORD);
  if (typedWord.length() > 0) {
    if (ic != null) {
      ic.commitText(typedWord,1);
    }
    addToUserUnigramAndBigramDictionaries(typedWord,UserUnigramDictionary.FREQUENCY_FOR_TYPED);
  }
  updateSuggestions();
}",0.9537037037037036
88068,"public void onCommitWord(){
  mCommittedWordSavedForSuggestionResuming=mCurrentWord;
  mCurrentWord=new CharacterStore();
}","public void onCommitWord(final int type){
  mCommittedWordSavedForSuggestionResuming=mCurrentWord;
  if (type != COMMIT_TYPE_DECIDED_WORD) {
    mCommittedWordSavedForSuggestionResuming.mAutoCorrection=null;
  }
  mCurrentWord=new CharacterStore();
}",0.6595174262734584
88069,"private void handleBackspaceWhileInBatchEdit(final int spaceState,final InputConnection ic){
  mVoiceProxy.handleBackspace();
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
    return;
  }
  final boolean deleteChar=!mHasUncommittedTypedChars;
  if (mHasUncommittedTypedChars) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      final CharSequence textWithUnderline=mComposingStateManager.isAutoCorrectionIndicatorOn() ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mWordComposer.getTypedWord()) : mWordComposer.getTypedWord();
      ic.setComposingText(textWithUnderline,1);
      if (mWordComposer.size() == 0) {
        mHasUncommittedTypedChars=false;
      }
      if (1 == length) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
    mHandler.postUpdateShiftKeyState();
    return;
  }
  mHandler.postUpdateShiftKeyState();
  if (null != mWordSavedForAutoCorrectCancellation) {
    Utils.Stats.onAutoCorrectionCancellation();
    cancelAutoCorrect(ic);
    mWordSavedForAutoCorrectCancellation=null;
    return;
  }
 else {
    mWordSavedForAutoCorrectCancellation=null;
  }
  if (SPACE_STATE_DOUBLE == spaceState) {
    if (revertDoubleSpace(ic)) {
      return;
    }
  }
 else   if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
    if (revertSwapPunctuation(ic)) {
      return;
    }
  }
  if (deleteChar) {
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      ic.deleteSurroundingText(1,0);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        ic.deleteSurroundingText(1,0);
      }
      restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
    }
  }
}","private void handleBackspaceWhileInBatchEdit(final int spaceState,final InputConnection ic){
  mVoiceProxy.handleBackspace();
  mHandler.postUpdateShiftKeyState();
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
    return;
  }
  final boolean deleteChar=!mHasUncommittedTypedChars;
  if (mHasUncommittedTypedChars) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      final CharSequence textWithUnderline=mComposingStateManager.isAutoCorrectionIndicatorOn() ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mWordComposer.getTypedWord()) : mWordComposer.getTypedWord();
      ic.setComposingText(textWithUnderline,1);
      if (mWordComposer.size() == 0) {
        mHasUncommittedTypedChars=false;
      }
      if (1 == length) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
    return;
  }
  if (null != mWordSavedForAutoCorrectCancellation) {
    Utils.Stats.onAutoCorrectionCancellation();
    cancelAutoCorrect(ic);
    mWordSavedForAutoCorrectCancellation=null;
    return;
  }
 else {
    mWordSavedForAutoCorrectCancellation=null;
  }
  if (SPACE_STATE_DOUBLE == spaceState) {
    if (revertDoubleSpace(ic)) {
      return;
    }
  }
 else   if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
    if (revertSwapPunctuation(ic)) {
      return;
    }
  }
  if (deleteChar) {
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      ic.deleteSurroundingText(1,0);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        ic.deleteSurroundingText(1,0);
      }
      restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
    }
  }
}",0.9701338825952626
88070,"private void handleBackspace(final int spaceState){
  if (mVoiceProxy.logAndRevertVoiceInput())   return;
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  mVoiceProxy.handleBackspace();
  final boolean deleteChar=!mHasUncommittedTypedChars;
  if (mHasUncommittedTypedChars) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      final CharSequence textWithUnderline=mComposingStateManager.isAutoCorrectionIndicatorOn() ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mWordComposer.getTypedWord()) : mWordComposer.getTypedWord();
      ic.setComposingText(textWithUnderline,1);
      if (mWordComposer.size() == 0) {
        mHasUncommittedTypedChars=false;
      }
      if (1 == length) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
  mHandler.postUpdateShiftKeyState();
  if (null != mWordSavedForAutoCorrectCancellation) {
    Utils.Stats.onAutoCorrectionCancellation();
    cancelAutoCorrect(ic);
    mWordSavedForAutoCorrectCancellation=null;
    ic.endBatchEdit();
    return;
  }
 else {
    mWordSavedForAutoCorrectCancellation=null;
  }
  if (SPACE_STATE_DOUBLE == spaceState) {
    if (revertDoubleSpace(ic)) {
      ic.endBatchEdit();
      return;
    }
  }
 else   if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
    if (revertSwapPunctuation(ic)) {
      ic.endBatchEdit();
      return;
    }
  }
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
  }
 else   if (deleteChar) {
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      ic.deleteSurroundingText(1,0);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        ic.deleteSurroundingText(1,0);
      }
      restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
    }
  }
  ic.endBatchEdit();
}","private void handleBackspace(final int spaceState){
  if (mVoiceProxy.logAndRevertVoiceInput())   return;
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  mVoiceProxy.handleBackspace();
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
    ic.endBatchEdit();
    return;
  }
  final boolean deleteChar=!mHasUncommittedTypedChars;
  if (mHasUncommittedTypedChars) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      final CharSequence textWithUnderline=mComposingStateManager.isAutoCorrectionIndicatorOn() ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mWordComposer.getTypedWord()) : mWordComposer.getTypedWord();
      ic.setComposingText(textWithUnderline,1);
      if (mWordComposer.size() == 0) {
        mHasUncommittedTypedChars=false;
      }
      if (1 == length) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
    mHandler.postUpdateShiftKeyState();
    ic.endBatchEdit();
    return;
  }
  mHandler.postUpdateShiftKeyState();
  if (null != mWordSavedForAutoCorrectCancellation) {
    Utils.Stats.onAutoCorrectionCancellation();
    cancelAutoCorrect(ic);
    mWordSavedForAutoCorrectCancellation=null;
    ic.endBatchEdit();
    return;
  }
 else {
    mWordSavedForAutoCorrectCancellation=null;
  }
  if (SPACE_STATE_DOUBLE == spaceState) {
    if (revertDoubleSpace(ic)) {
      ic.endBatchEdit();
      return;
    }
  }
 else   if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
    if (revertSwapPunctuation(ic)) {
      ic.endBatchEdit();
      return;
    }
  }
  if (deleteChar) {
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      ic.deleteSurroundingText(1,0);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        ic.deleteSurroundingText(1,0);
      }
      restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
    }
  }
  ic.endBatchEdit();
}",0.912442396313364
88071,"@Override public void onTextInput(CharSequence text){
  mVoiceProxy.commitVoiceInput();
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  commitTyped(ic);
  maybeRemovePreviousPeriod(ic,text);
  ic.commitText(text,1);
  ic.endBatchEdit();
  mKeyboardSwitcher.updateShiftState();
  mKeyboardSwitcher.onCodeInput(Keyboard.CODE_DUMMY);
  mSpaceState=SPACE_STATE_NONE;
  mEnteredText=text;
}","@Override public void onTextInput(CharSequence text){
  mVoiceProxy.commitVoiceInput();
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  commitTyped(ic);
  maybeRemovePreviousPeriod(ic,text);
  ic.commitText(text,1);
  ic.endBatchEdit();
  mKeyboardSwitcher.updateShiftState();
  mKeyboardSwitcher.onCodeInput(Keyboard.CODE_DUMMY);
  mSpaceState=SPACE_STATE_NONE;
  mWordSavedForAutoCorrectCancellation=null;
  mEnteredText=text;
}",0.951974386339381
88072,"private void handleSeparator(final int primaryCode,final int x,final int y,final int spaceState){
  mVoiceProxy.handleSeparator();
  mComposingStateManager.onFinishComposingText();
  if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
    mHandler.cancelUpdateBigramPredictions();
    mHandler.postUpdateSuggestions();
  }
  boolean pickedDefault=false;
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mHasUncommittedTypedChars) {
    final boolean shouldAutoCorrect=mSettingsValues.mAutoCorrectEnabled && !mInputTypeNoAutoCorrect;
    if (shouldAutoCorrect && primaryCode != Keyboard.CODE_SINGLE_QUOTE) {
      pickedDefault=pickDefaultSuggestion(primaryCode);
    }
 else {
      commitTyped(ic);
    }
  }
 else {
    mWordSavedForAutoCorrectCancellation=null;
  }
  final boolean swapMagicSpace;
  if (Keyboard.CODE_ENTER == primaryCode && (SPACE_STATE_MAGIC == spaceState || SPACE_STATE_SWAP_PUNCTUATION == spaceState)) {
    removeTrailingSpaceWhileInBatchEdit(ic);
    swapMagicSpace=false;
  }
 else   if (SPACE_STATE_MAGIC == spaceState) {
    if (mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
      swapMagicSpace=true;
    }
 else {
      swapMagicSpace=false;
      if (mSettingsValues.isMagicSpaceStripper(primaryCode)) {
        removeTrailingSpaceWhileInBatchEdit(ic);
      }
    }
  }
 else {
    swapMagicSpace=false;
  }
  sendKeyChar((char)primaryCode);
  if (Keyboard.CODE_SPACE == primaryCode) {
    if (isSuggestionsRequested()) {
      if (maybeDoubleSpaceWhileInBatchEdit(ic)) {
        mSpaceState=SPACE_STATE_DOUBLE;
      }
 else       if (!isShowingPunctuationList()) {
        mSpaceState=SPACE_STATE_WEAK;
      }
    }
    mHandler.startDoubleSpacesTimer();
    if (!isCursorTouchingWord()) {
      mHandler.cancelUpdateSuggestions();
      mHandler.postUpdateBigramPredictions();
    }
  }
 else {
    if (swapMagicSpace) {
      swapSwapperAndSpaceWhileInBatchEdit(ic);
      mSpaceState=SPACE_STATE_MAGIC;
    }
    setPunctuationSuggestions();
  }
  Utils.Stats.onSeparator((char)primaryCode,x,y);
  if (pickedDefault) {
    CharSequence typedWord=mWordComposer.getTypedWord();
    if (!TextUtils.isEmpty(typedWord) && !typedWord.equals(mBestWord)) {
      InputConnectionCompatUtils.commitCorrection(ic,mLastSelectionEnd - typedWord.length(),typedWord,mBestWord);
    }
  }
  mKeyboardSwitcher.updateShiftState();
  if (ic != null) {
    ic.endBatchEdit();
  }
}","private void handleSeparator(final int primaryCode,final int x,final int y,final int spaceState){
  mVoiceProxy.handleSeparator();
  mComposingStateManager.onFinishComposingText();
  if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
    mHandler.cancelUpdateBigramPredictions();
    mHandler.postUpdateSuggestions();
  }
  boolean pickedDefault=false;
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  mWordSavedForAutoCorrectCancellation=null;
  if (mHasUncommittedTypedChars) {
    final boolean shouldAutoCorrect=mSettingsValues.mAutoCorrectEnabled && !mInputTypeNoAutoCorrect;
    if (shouldAutoCorrect && primaryCode != Keyboard.CODE_SINGLE_QUOTE) {
      pickedDefault=pickDefaultSuggestion(primaryCode);
    }
 else {
      commitTyped(ic);
    }
  }
  final boolean swapMagicSpace;
  if (Keyboard.CODE_ENTER == primaryCode && (SPACE_STATE_MAGIC == spaceState || SPACE_STATE_SWAP_PUNCTUATION == spaceState)) {
    removeTrailingSpaceWhileInBatchEdit(ic);
    swapMagicSpace=false;
  }
 else   if (SPACE_STATE_MAGIC == spaceState) {
    if (mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
      swapMagicSpace=true;
    }
 else {
      swapMagicSpace=false;
      if (mSettingsValues.isMagicSpaceStripper(primaryCode)) {
        removeTrailingSpaceWhileInBatchEdit(ic);
      }
    }
  }
 else {
    swapMagicSpace=false;
  }
  sendKeyChar((char)primaryCode);
  if (Keyboard.CODE_SPACE == primaryCode) {
    if (isSuggestionsRequested()) {
      if (maybeDoubleSpaceWhileInBatchEdit(ic)) {
        mSpaceState=SPACE_STATE_DOUBLE;
      }
 else       if (!isShowingPunctuationList()) {
        mSpaceState=SPACE_STATE_WEAK;
      }
    }
    mHandler.startDoubleSpacesTimer();
    if (!isCursorTouchingWord()) {
      mHandler.cancelUpdateSuggestions();
      mHandler.postUpdateBigramPredictions();
    }
  }
 else {
    if (swapMagicSpace) {
      swapSwapperAndSpaceWhileInBatchEdit(ic);
      mSpaceState=SPACE_STATE_MAGIC;
    }
    setPunctuationSuggestions();
  }
  Utils.Stats.onSeparator((char)primaryCode,x,y);
  if (pickedDefault) {
    CharSequence typedWord=mWordComposer.getTypedWord();
    if (!TextUtils.isEmpty(typedWord) && !typedWord.equals(mBestWord)) {
      InputConnectionCompatUtils.commitCorrection(ic,mLastSelectionEnd - typedWord.length(),typedWord,mBestWord);
    }
  }
  mKeyboardSwitcher.updateShiftState();
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9791164658634538
88073,"private void handleBackspace(final int spaceState){
  if (mVoiceProxy.logAndRevertVoiceInput())   return;
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  mVoiceProxy.handleBackspace();
  final boolean deleteChar=!mHasUncommittedTypedChars;
  if (mHasUncommittedTypedChars) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      final CharSequence textWithUnderline=mComposingStateManager.isAutoCorrectionIndicatorOn() ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mWordComposer.getTypedWord()) : mWordComposer.getTypedWord();
      ic.setComposingText(textWithUnderline,1);
      if (mWordComposer.size() == 0) {
        mHasUncommittedTypedChars=false;
      }
      if (1 == length) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
  mHandler.postUpdateShiftKeyState();
  if (null != mWordSavedForAutoCorrectCancellation) {
    Utils.Stats.onAutoCorrectionCancellation();
    cancelAutoCorrect(ic);
    mWordSavedForAutoCorrectCancellation=null;
    ic.endBatchEdit();
    return;
  }
 else {
    mWordSavedForAutoCorrectCancellation=null;
  }
  if (SPACE_STATE_DOUBLE == spaceState) {
    if (revertDoubleSpace(ic)) {
      ic.endBatchEdit();
      return;
    }
  }
 else   if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
    if (revertSwapPunctuation(ic)) {
      ic.endBatchEdit();
      return;
    }
  }
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
  }
 else   if (deleteChar) {
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      ic.deleteSurroundingText(1,0);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        ic.deleteSurroundingText(1,0);
      }
      restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
    }
  }
  ic.endBatchEdit();
}","private void handleBackspace(final int spaceState){
  if (mVoiceProxy.logAndRevertVoiceInput())   return;
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  mVoiceProxy.handleBackspace();
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
    ic.endBatchEdit();
    return;
  }
  final boolean deleteChar=!mHasUncommittedTypedChars;
  if (mHasUncommittedTypedChars) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      final CharSequence textWithUnderline=mComposingStateManager.isAutoCorrectionIndicatorOn() ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mWordComposer.getTypedWord()) : mWordComposer.getTypedWord();
      ic.setComposingText(textWithUnderline,1);
      if (mWordComposer.size() == 0) {
        mHasUncommittedTypedChars=false;
      }
      if (1 == length) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
    mHandler.postUpdateShiftKeyState();
    ic.endBatchEdit();
    return;
  }
  mHandler.postUpdateShiftKeyState();
  if (null != mWordSavedForAutoCorrectCancellation) {
    Utils.Stats.onAutoCorrectionCancellation();
    cancelAutoCorrect(ic);
    mWordSavedForAutoCorrectCancellation=null;
    ic.endBatchEdit();
    return;
  }
 else {
    mWordSavedForAutoCorrectCancellation=null;
  }
  if (SPACE_STATE_DOUBLE == spaceState) {
    if (revertDoubleSpace(ic)) {
      ic.endBatchEdit();
      return;
    }
  }
 else   if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
    if (revertSwapPunctuation(ic)) {
      ic.endBatchEdit();
      return;
    }
  }
  if (deleteChar) {
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      ic.deleteSurroundingText(1,0);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        ic.deleteSurroundingText(1,0);
      }
      restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
    }
  }
  ic.endBatchEdit();
}",0.912442396313364
88074,"@Override public void onTextInput(CharSequence text){
  mVoiceProxy.commitVoiceInput();
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  commitTyped(ic);
  maybeRemovePreviousPeriod(ic,text);
  ic.commitText(text,1);
  ic.endBatchEdit();
  mKeyboardSwitcher.updateShiftState();
  mKeyboardSwitcher.onCodeInput(Keyboard.CODE_DUMMY);
  mSpaceState=SPACE_STATE_NONE;
  mEnteredText=text;
}","@Override public void onTextInput(CharSequence text){
  mVoiceProxy.commitVoiceInput();
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  commitTyped(ic);
  maybeRemovePreviousPeriod(ic,text);
  ic.commitText(text,1);
  ic.endBatchEdit();
  mKeyboardSwitcher.updateShiftState();
  mKeyboardSwitcher.onCodeInput(Keyboard.CODE_DUMMY);
  mSpaceState=SPACE_STATE_NONE;
  mWordSavedForAutoCorrectCancellation=null;
  mEnteredText=text;
}",0.951974386339381
88075,"private void handleSeparator(final int primaryCode,final int x,final int y,final int spaceState){
  mVoiceProxy.handleSeparator();
  mComposingStateManager.onFinishComposingText();
  if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
    mHandler.cancelUpdateBigramPredictions();
    mHandler.postUpdateSuggestions();
  }
  boolean pickedDefault=false;
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mHasUncommittedTypedChars) {
    final boolean shouldAutoCorrect=mSettingsValues.mAutoCorrectEnabled && !mInputTypeNoAutoCorrect;
    if (shouldAutoCorrect && primaryCode != Keyboard.CODE_SINGLE_QUOTE) {
      pickedDefault=pickDefaultSuggestion(primaryCode);
    }
 else {
      commitTyped(ic);
    }
  }
 else {
    mWordSavedForAutoCorrectCancellation=null;
  }
  final boolean swapMagicSpace;
  if (Keyboard.CODE_ENTER == primaryCode && (SPACE_STATE_MAGIC == spaceState || SPACE_STATE_SWAP_PUNCTUATION == spaceState)) {
    removeTrailingSpaceWhileInBatchEdit(ic);
    swapMagicSpace=false;
  }
 else   if (SPACE_STATE_MAGIC == spaceState) {
    if (mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
      swapMagicSpace=true;
    }
 else {
      swapMagicSpace=false;
      if (mSettingsValues.isMagicSpaceStripper(primaryCode)) {
        removeTrailingSpaceWhileInBatchEdit(ic);
      }
    }
  }
 else {
    swapMagicSpace=false;
  }
  sendKeyChar((char)primaryCode);
  if (Keyboard.CODE_SPACE == primaryCode) {
    if (isSuggestionsRequested()) {
      if (maybeDoubleSpaceWhileInBatchEdit(ic)) {
        mSpaceState=SPACE_STATE_DOUBLE;
      }
 else       if (!isShowingPunctuationList()) {
        mSpaceState=SPACE_STATE_WEAK;
      }
    }
    mHandler.startDoubleSpacesTimer();
    if (!isCursorTouchingWord()) {
      mHandler.cancelUpdateSuggestions();
      mHandler.postUpdateBigramPredictions();
    }
  }
 else {
    if (swapMagicSpace) {
      swapSwapperAndSpaceWhileInBatchEdit(ic);
      mSpaceState=SPACE_STATE_MAGIC;
    }
    setPunctuationSuggestions();
  }
  Utils.Stats.onSeparator((char)primaryCode,x,y);
  if (pickedDefault) {
    CharSequence typedWord=mWordComposer.getTypedWord();
    if (!TextUtils.isEmpty(typedWord) && !typedWord.equals(mBestWord)) {
      InputConnectionCompatUtils.commitCorrection(ic,mLastSelectionEnd - typedWord.length(),typedWord,mBestWord);
    }
  }
  mKeyboardSwitcher.updateShiftState();
  if (ic != null) {
    ic.endBatchEdit();
  }
}","private void handleSeparator(final int primaryCode,final int x,final int y,final int spaceState){
  mVoiceProxy.handleSeparator();
  mComposingStateManager.onFinishComposingText();
  if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
    mHandler.cancelUpdateBigramPredictions();
    mHandler.postUpdateSuggestions();
  }
  boolean pickedDefault=false;
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  mWordSavedForAutoCorrectCancellation=null;
  if (mHasUncommittedTypedChars) {
    final boolean shouldAutoCorrect=mSettingsValues.mAutoCorrectEnabled && !mInputTypeNoAutoCorrect;
    if (shouldAutoCorrect && primaryCode != Keyboard.CODE_SINGLE_QUOTE) {
      pickedDefault=pickDefaultSuggestion(primaryCode);
    }
 else {
      commitTyped(ic);
    }
  }
  final boolean swapMagicSpace;
  if (Keyboard.CODE_ENTER == primaryCode && (SPACE_STATE_MAGIC == spaceState || SPACE_STATE_SWAP_PUNCTUATION == spaceState)) {
    removeTrailingSpaceWhileInBatchEdit(ic);
    swapMagicSpace=false;
  }
 else   if (SPACE_STATE_MAGIC == spaceState) {
    if (mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
      swapMagicSpace=true;
    }
 else {
      swapMagicSpace=false;
      if (mSettingsValues.isMagicSpaceStripper(primaryCode)) {
        removeTrailingSpaceWhileInBatchEdit(ic);
      }
    }
  }
 else {
    swapMagicSpace=false;
  }
  sendKeyChar((char)primaryCode);
  if (Keyboard.CODE_SPACE == primaryCode) {
    if (isSuggestionsRequested()) {
      if (maybeDoubleSpaceWhileInBatchEdit(ic)) {
        mSpaceState=SPACE_STATE_DOUBLE;
      }
 else       if (!isShowingPunctuationList()) {
        mSpaceState=SPACE_STATE_WEAK;
      }
    }
    mHandler.startDoubleSpacesTimer();
    if (!isCursorTouchingWord()) {
      mHandler.cancelUpdateSuggestions();
      mHandler.postUpdateBigramPredictions();
    }
  }
 else {
    if (swapMagicSpace) {
      swapSwapperAndSpaceWhileInBatchEdit(ic);
      mSpaceState=SPACE_STATE_MAGIC;
    }
    setPunctuationSuggestions();
  }
  Utils.Stats.onSeparator((char)primaryCode,x,y);
  if (pickedDefault) {
    CharSequence typedWord=mWordComposer.getTypedWord();
    if (!TextUtils.isEmpty(typedWord) && !typedWord.equals(mBestWord)) {
      InputConnectionCompatUtils.commitCorrection(ic,mLastSelectionEnd - typedWord.length(),typedWord,mBestWord);
    }
  }
  mKeyboardSwitcher.updateShiftState();
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9791164658634538
88076,"private void handleBackspace(final int spaceState){
  if (mVoiceProxy.logAndRevertVoiceInput())   return;
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  mVoiceProxy.handleBackspace();
  final boolean deleteChar=!mHasUncommittedTypedChars;
  if (mHasUncommittedTypedChars) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      final CharSequence textWithUnderline=mComposingStateManager.isAutoCorrectionIndicatorOn() ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mWordComposer.getTypedWord()) : mWordComposer.getTypedWord();
      ic.setComposingText(textWithUnderline,1);
      if (mWordComposer.size() == 0) {
        mHasUncommittedTypedChars=false;
      }
      if (1 == length) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
  mHandler.postUpdateShiftKeyState();
  if (null != mWordSavedForAutoCorrectCancellation) {
    Utils.Stats.onAutoCorrectionCancellation();
    cancelAutoCorrect(ic);
    mWordSavedForAutoCorrectCancellation=null;
    ic.endBatchEdit();
    return;
  }
 else {
    mWordSavedForAutoCorrectCancellation=null;
  }
  if (SPACE_STATE_DOUBLE == spaceState) {
    if (revertDoubleSpace(ic)) {
      ic.endBatchEdit();
      return;
    }
  }
 else   if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
    if (revertSwapPunctuation(ic)) {
      ic.endBatchEdit();
      return;
    }
  }
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
  }
 else   if (deleteChar) {
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      ic.deleteSurroundingText(1,0);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        ic.deleteSurroundingText(1,0);
      }
      restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
    }
  }
  ic.endBatchEdit();
}","private void handleBackspace(final int spaceState){
  if (mVoiceProxy.logAndRevertVoiceInput())   return;
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  mVoiceProxy.handleBackspace();
  if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
    ic.endBatchEdit();
    return;
  }
  final boolean deleteChar=!mHasUncommittedTypedChars;
  if (mHasUncommittedTypedChars) {
    final int length=mWordComposer.size();
    if (length > 0) {
      mWordComposer.deleteLast();
      final CharSequence textWithUnderline=mComposingStateManager.isAutoCorrectionIndicatorOn() ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mWordComposer.getTypedWord()) : mWordComposer.getTypedWord();
      ic.setComposingText(textWithUnderline,1);
      if (mWordComposer.size() == 0) {
        mHasUncommittedTypedChars=false;
      }
      if (1 == length) {
        mHandler.postUpdateBigramPredictions();
      }
 else {
        mHandler.postUpdateSuggestions();
      }
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
    mHandler.postUpdateShiftKeyState();
    ic.endBatchEdit();
    return;
  }
  mHandler.postUpdateShiftKeyState();
  if (null != mWordSavedForAutoCorrectCancellation) {
    Utils.Stats.onAutoCorrectionCancellation();
    cancelAutoCorrect(ic);
    mWordSavedForAutoCorrectCancellation=null;
    ic.endBatchEdit();
    return;
  }
 else {
    mWordSavedForAutoCorrectCancellation=null;
  }
  if (SPACE_STATE_DOUBLE == spaceState) {
    if (revertDoubleSpace(ic)) {
      ic.endBatchEdit();
      return;
    }
  }
 else   if (SPACE_STATE_SWAP_PUNCTUATION == spaceState) {
    if (revertSwapPunctuation(ic)) {
      ic.endBatchEdit();
      return;
    }
  }
  if (deleteChar) {
    if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
      restartSuggestionsOnManuallyPickedTypedWord(ic);
    }
 else {
      ic.deleteSurroundingText(1,0);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        ic.deleteSurroundingText(1,0);
      }
      restartSuggestionsOnWordBeforeCursorIfAtEndOfWord(ic);
    }
  }
  ic.endBatchEdit();
}",0.912442396313364
88077,"@Override public void onTextInput(CharSequence text){
  mVoiceProxy.commitVoiceInput();
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  commitTyped(ic);
  maybeRemovePreviousPeriod(ic,text);
  ic.commitText(text,1);
  ic.endBatchEdit();
  mKeyboardSwitcher.updateShiftState();
  mKeyboardSwitcher.onCodeInput(Keyboard.CODE_DUMMY);
  mSpaceState=SPACE_STATE_NONE;
  mEnteredText=text;
}","@Override public void onTextInput(CharSequence text){
  mVoiceProxy.commitVoiceInput();
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  commitTyped(ic);
  maybeRemovePreviousPeriod(ic,text);
  ic.commitText(text,1);
  ic.endBatchEdit();
  mKeyboardSwitcher.updateShiftState();
  mKeyboardSwitcher.onCodeInput(Keyboard.CODE_DUMMY);
  mSpaceState=SPACE_STATE_NONE;
  mWordSavedForAutoCorrectCancellation=null;
  mEnteredText=text;
}",0.951974386339381
88078,"private void handleSeparator(final int primaryCode,final int x,final int y,final int spaceState){
  mVoiceProxy.handleSeparator();
  mComposingStateManager.onFinishComposingText();
  if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
    mHandler.cancelUpdateBigramPredictions();
    mHandler.postUpdateSuggestions();
  }
  boolean pickedDefault=false;
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mHasUncommittedTypedChars) {
    final boolean shouldAutoCorrect=mSettingsValues.mAutoCorrectEnabled && !mInputTypeNoAutoCorrect;
    if (shouldAutoCorrect && primaryCode != Keyboard.CODE_SINGLE_QUOTE) {
      pickedDefault=pickDefaultSuggestion(primaryCode);
    }
 else {
      commitTyped(ic);
    }
  }
 else {
    mWordSavedForAutoCorrectCancellation=null;
  }
  final boolean swapMagicSpace;
  if (Keyboard.CODE_ENTER == primaryCode && (SPACE_STATE_MAGIC == spaceState || SPACE_STATE_SWAP_PUNCTUATION == spaceState)) {
    removeTrailingSpaceWhileInBatchEdit(ic);
    swapMagicSpace=false;
  }
 else   if (SPACE_STATE_MAGIC == spaceState) {
    if (mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
      swapMagicSpace=true;
    }
 else {
      swapMagicSpace=false;
      if (mSettingsValues.isMagicSpaceStripper(primaryCode)) {
        removeTrailingSpaceWhileInBatchEdit(ic);
      }
    }
  }
 else {
    swapMagicSpace=false;
  }
  sendKeyChar((char)primaryCode);
  if (Keyboard.CODE_SPACE == primaryCode) {
    if (isSuggestionsRequested()) {
      if (maybeDoubleSpaceWhileInBatchEdit(ic)) {
        mSpaceState=SPACE_STATE_DOUBLE;
      }
 else       if (!isShowingPunctuationList()) {
        mSpaceState=SPACE_STATE_WEAK;
      }
    }
    mHandler.startDoubleSpacesTimer();
    if (!isCursorTouchingWord()) {
      mHandler.cancelUpdateSuggestions();
      mHandler.postUpdateBigramPredictions();
    }
  }
 else {
    if (swapMagicSpace) {
      swapSwapperAndSpaceWhileInBatchEdit(ic);
      mSpaceState=SPACE_STATE_MAGIC;
    }
    setPunctuationSuggestions();
  }
  Utils.Stats.onSeparator((char)primaryCode,x,y);
  if (pickedDefault) {
    CharSequence typedWord=mWordComposer.getTypedWord();
    if (!TextUtils.isEmpty(typedWord) && !typedWord.equals(mBestWord)) {
      InputConnectionCompatUtils.commitCorrection(ic,mLastSelectionEnd - typedWord.length(),typedWord,mBestWord);
    }
  }
  mKeyboardSwitcher.updateShiftState();
  if (ic != null) {
    ic.endBatchEdit();
  }
}","private void handleSeparator(final int primaryCode,final int x,final int y,final int spaceState){
  mVoiceProxy.handleSeparator();
  mComposingStateManager.onFinishComposingText();
  if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
    mHandler.cancelUpdateBigramPredictions();
    mHandler.postUpdateSuggestions();
  }
  boolean pickedDefault=false;
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  mWordSavedForAutoCorrectCancellation=null;
  if (mHasUncommittedTypedChars) {
    final boolean shouldAutoCorrect=mSettingsValues.mAutoCorrectEnabled && !mInputTypeNoAutoCorrect;
    if (shouldAutoCorrect && primaryCode != Keyboard.CODE_SINGLE_QUOTE) {
      pickedDefault=pickDefaultSuggestion(primaryCode);
    }
 else {
      commitTyped(ic);
    }
  }
  final boolean swapMagicSpace;
  if (Keyboard.CODE_ENTER == primaryCode && (SPACE_STATE_MAGIC == spaceState || SPACE_STATE_SWAP_PUNCTUATION == spaceState)) {
    removeTrailingSpaceWhileInBatchEdit(ic);
    swapMagicSpace=false;
  }
 else   if (SPACE_STATE_MAGIC == spaceState) {
    if (mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
      swapMagicSpace=true;
    }
 else {
      swapMagicSpace=false;
      if (mSettingsValues.isMagicSpaceStripper(primaryCode)) {
        removeTrailingSpaceWhileInBatchEdit(ic);
      }
    }
  }
 else {
    swapMagicSpace=false;
  }
  sendKeyChar((char)primaryCode);
  if (Keyboard.CODE_SPACE == primaryCode) {
    if (isSuggestionsRequested()) {
      if (maybeDoubleSpaceWhileInBatchEdit(ic)) {
        mSpaceState=SPACE_STATE_DOUBLE;
      }
 else       if (!isShowingPunctuationList()) {
        mSpaceState=SPACE_STATE_WEAK;
      }
    }
    mHandler.startDoubleSpacesTimer();
    if (!isCursorTouchingWord()) {
      mHandler.cancelUpdateSuggestions();
      mHandler.postUpdateBigramPredictions();
    }
  }
 else {
    if (swapMagicSpace) {
      swapSwapperAndSpaceWhileInBatchEdit(ic);
      mSpaceState=SPACE_STATE_MAGIC;
    }
    setPunctuationSuggestions();
  }
  Utils.Stats.onSeparator((char)primaryCode,x,y);
  if (pickedDefault) {
    CharSequence typedWord=mWordComposer.getTypedWord();
    if (!TextUtils.isEmpty(typedWord) && !typedWord.equals(mBestWord)) {
      InputConnectionCompatUtils.commitCorrection(ic,mLastSelectionEnd - typedWord.length(),typedWord,mBestWord);
    }
  }
  mKeyboardSwitcher.updateShiftState();
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9791164658634538
88079,"public static CharSequence getTextWithAutoCorrectionIndicatorUnderline(Context context,CharSequence text){
  if (TextUtils.isEmpty(text) || CONSTRUCTOR_SuggestionSpan == null || OBJ_FLAG_AUTO_CORRECTION == null) {
    return text;
  }
  final Spannable spannable=text instanceof Spannable ? (Spannable)text : new SpannableString(text);
  final Object[] args={context,null,new String[]{},(int)OBJ_FLAG_AUTO_CORRECTION,(Class<?>)SuggestionSpanPickedNotificationReceiver.class};
  final Object ss=CompatUtils.newInstance(CONSTRUCTOR_SuggestionSpan,args);
  if (ss == null) {
    Log.w(TAG,""String_Node_Str"");
    return text;
  }
  spannable.setSpan(ss,0,text.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE | Spanned.SPAN_COMPOSING);
  return spannable;
}","public static CharSequence getTextWithAutoCorrectionIndicatorUnderline(Context context,CharSequence text){
  if (TextUtils.isEmpty(text) || CONSTRUCTOR_SuggestionSpan == null || OBJ_FLAG_AUTO_CORRECTION == null || OBJ_SUGGESTION_MAX_SIZE == null) {
    return text;
  }
  final Spannable spannable=text instanceof Spannable ? (Spannable)text : new SpannableString(text);
  final Object[] args={context,null,new String[]{},(int)OBJ_FLAG_AUTO_CORRECTION,(Class<?>)SuggestionSpanPickedNotificationReceiver.class};
  final Object ss=CompatUtils.newInstance(CONSTRUCTOR_SuggestionSpan,args);
  if (ss == null) {
    Log.w(TAG,""String_Node_Str"");
    return text;
  }
  spannable.setSpan(ss,0,text.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE | Spanned.SPAN_COMPOSING);
  return spannable;
}",0.9771092217135384
88080,"/** 
 * Finds all possible nearby key codes around a touch event point and returns the nearest key. The algorithm to determine the nearby keys depends on the threshold set by  {@link #setProximityThreshold(int)} and the mode set by{@link #setProximityCorrectionEnabled(boolean)}.
 * @param x The x-coordinate of a touch point
 * @param y The y-coordinate of a touch point
 * @param allCodes All nearby key codes except functional key are returned in this array
 * @return The nearest key
 */
public Key getKeyAndNearbyCodes(int x,int y,final int[] allCodes){
  final List<Key> keys=getKeyboard().mKeys;
  final int touchX=getTouchX(x);
  final int touchY=getTouchY(y);
  initializeNearbyKeys();
  Key primaryKey=null;
  for (  final int index : mKeyboard.getNearestKeys(touchX,touchY)) {
    final Key key=keys.get(index);
    final boolean isOnKey=key.isOnKey(touchX,touchY);
    final int distance=key.squaredDistanceToEdge(touchX,touchY);
    if (isOnKey || (mProximityCorrectOn && distance < mProximityThresholdSquare)) {
      final int insertedPosition=sortNearbyKeys(index,distance,isOnKey);
      if (insertedPosition == 0 && isOnKey) {
        primaryKey=key;
      }
    }
  }
  if (allCodes != null && allCodes.length > 0) {
    getNearbyKeyCodes(allCodes);
    if (DEBUG) {
      Log.d(TAG,""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ (primaryKey == null ? ""String_Node_Str"" : primaryKey.mCode)+ ""String_Node_Str""+ Arrays.toString(allCodes));
    }
  }
  return primaryKey;
}","/** 
 * Finds all possible nearby key codes around a touch event point and returns the nearest key. The algorithm to determine the nearby keys depends on the threshold set by  {@link #setProximityThreshold(int)} and the mode set by{@link #setProximityCorrectionEnabled(boolean)}.
 * @param x The x-coordinate of a touch point
 * @param y The y-coordinate of a touch point
 * @param allCodes All nearby key codes except functional key are returned in this array
 * @return The nearest key
 */
public Key getKeyAndNearbyCodes(int x,int y,final int[] allCodes){
  final List<Key> keys=getKeyboard().mKeys;
  final int touchX=getTouchX(x);
  final int touchY=getTouchY(y);
  initializeNearbyKeys();
  Key primaryKey=null;
  for (  final int index : mKeyboard.getNearestKeys(touchX,touchY)) {
    final Key key=keys.get(index);
    final boolean isOnKey=key.isOnKey(touchX,touchY);
    final int distance=key.squaredDistanceToEdge(touchX,touchY);
    if (isOnKey || (mProximityCorrectOn && distance < mProximityThresholdSquare)) {
      final int insertedPosition=sortNearbyKeys(index,distance,isOnKey);
      if (insertedPosition == 0 && isOnKey) {
        primaryKey=key;
      }
    }
  }
  if (allCodes != null && allCodes.length > 0) {
    getNearbyKeyCodes(allCodes);
    if (DEBUG) {
      Log.d(TAG,""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ printableCode(primaryKey)+ ""String_Node_Str""+ printableCodes(allCodes));
    }
  }
  return primaryKey;
}",0.9627391742195368
88081,"private void printTouchEvent(String title,int x,int y,long eventTime){
  final Key key=mKeyDetector.getKeyAndNearbyCodes(x,y,null);
  final String code=(key == null) ? ""String_Node_Str"" : keyCodePrintable(key.mCode);
  final long delta=eventTime - mPreviousEventTime;
  Log.d(TAG,String.format(""String_Node_Str"",title,(mKeyAlreadyProcessed ? ""String_Node_Str"" : ""String_Node_Str""),mPointerId,x,y,delta,code));
  mPreviousEventTime=eventTime;
}","private void printTouchEvent(String title,int x,int y,long eventTime){
  final Key key=mKeyDetector.getKeyAndNearbyCodes(x,y,null);
  final String code=KeyDetector.printableCode(key);
  final long delta=eventTime - mPreviousEventTime;
  Log.d(TAG,String.format(""String_Node_Str"",title,(mKeyAlreadyProcessed ? ""String_Node_Str"" : ""String_Node_Str""),mPointerId,x,y,delta,code));
  mPreviousEventTime=eventTime;
}",0.902696365767878
88082,"private boolean callListenerOnPressAndCheckKeyboardLayoutChange(Key key,boolean withSliding){
  final boolean ignoreModifierKey=mIgnoreModifierKey && key.isModifier();
  if (DEBUG_LISTENER)   Log.d(TAG,""String_Node_Str"" + keyCodePrintable(key.mCode) + ""String_Node_Str""+ withSliding+ ""String_Node_Str""+ ignoreModifierKey);
  if (ignoreModifierKey) {
    return false;
  }
  if (key.isEnabled()) {
    mListener.onPress(key.mCode,withSliding);
    final boolean keyboardLayoutHasBeenChanged=mKeyboardLayoutHasBeenChanged;
    mKeyboardLayoutHasBeenChanged=false;
    return keyboardLayoutHasBeenChanged;
  }
  return false;
}","private boolean callListenerOnPressAndCheckKeyboardLayoutChange(Key key,boolean withSliding){
  final boolean ignoreModifierKey=mIgnoreModifierKey && key.isModifier();
  if (DEBUG_LISTENER) {
    Log.d(TAG,""String_Node_Str"" + KeyDetector.printableCode(key.mCode) + ""String_Node_Str""+ withSliding+ ""String_Node_Str""+ ignoreModifierKey+ ""String_Node_Str""+ key.isEnabled());
  }
  if (ignoreModifierKey) {
    return false;
  }
  if (key.isEnabled()) {
    mListener.onPress(key.mCode,withSliding);
    final boolean keyboardLayoutHasBeenChanged=mKeyboardLayoutHasBeenChanged;
    mKeyboardLayoutHasBeenChanged=false;
    return keyboardLayoutHasBeenChanged;
  }
  return false;
}",0.9331283627978478
88083,"private void callListenerOnRelease(Key key,int primaryCode,boolean withSliding){
  final boolean ignoreModifierKey=mIgnoreModifierKey && key.isModifier();
  if (DEBUG_LISTENER)   Log.d(TAG,""String_Node_Str"" + keyCodePrintable(primaryCode) + ""String_Node_Str""+ withSliding+ ""String_Node_Str""+ ignoreModifierKey);
  if (ignoreModifierKey) {
    return;
  }
  if (key.isEnabled()) {
    mListener.onRelease(primaryCode,withSliding);
  }
}","private void callListenerOnRelease(Key key,int primaryCode,boolean withSliding){
  final boolean ignoreModifierKey=mIgnoreModifierKey && key.isModifier();
  if (DEBUG_LISTENER) {
    Log.d(TAG,""String_Node_Str"" + KeyDetector.printableCode(primaryCode) + ""String_Node_Str""+ withSliding+ ""String_Node_Str""+ ignoreModifierKey+ ""String_Node_Str""+ key.isEnabled());
  }
  if (ignoreModifierKey) {
    return;
  }
  if (key.isEnabled()) {
    mListener.onRelease(primaryCode,withSliding);
  }
}",0.7410617551462622
88084,"private void callListenerOnCodeInput(Key key,int primaryCode,int[] keyCodes,int x,int y){
  final boolean ignoreModifierKey=mIgnoreModifierKey && key.isModifier();
  final boolean alterCode=key.altCodeWhileTyping() && mTimerProxy.isTyping();
  final int code=alterCode ? key.mAltCode : primaryCode;
  final CharSequence text=(code != Keyboard.CODE_DUMMY) ? null : key.mOutputText;
  if (DEBUG_LISTENER) {
    Log.d(TAG,""String_Node_Str"" + keyCodePrintable(code) + ""String_Node_Str""+ text+ ""String_Node_Str""+ Arrays.toString(keyCodes)+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ ignoreModifierKey+ ""String_Node_Str""+ alterCode);
  }
  if (ignoreModifierKey) {
    return;
  }
  if (key.isEnabled()) {
    if (code != Keyboard.CODE_DUMMY) {
      mListener.onCodeInput(code,keyCodes,x,y);
    }
 else     if (text != null) {
      mListener.onTextInput(text);
    }
    if (!key.altCodeWhileTyping() && !key.isModifier()) {
      mTimerProxy.startKeyTypedTimer(sIgnoreSpecialKeyTimeout);
    }
  }
}","private void callListenerOnCodeInput(Key key,int primaryCode,int[] keyCodes,int x,int y){
  final boolean ignoreModifierKey=mIgnoreModifierKey && key.isModifier();
  final boolean alterCode=key.altCodeWhileTyping() && mTimerProxy.isTyping();
  final int code=alterCode ? key.mAltCode : primaryCode;
  final CharSequence text=(code != Keyboard.CODE_DUMMY) ? null : key.mOutputText;
  if (DEBUG_LISTENER) {
    Log.d(TAG,""String_Node_Str"" + KeyDetector.printableCode(code) + ""String_Node_Str""+ text+ ""String_Node_Str""+ KeyDetector.printableCodes(keyCodes)+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ ignoreModifierKey+ ""String_Node_Str""+ alterCode+ ""String_Node_Str""+ key.isEnabled());
  }
  if (ignoreModifierKey) {
    return;
  }
  if (key.isEnabled()) {
    if (code != Keyboard.CODE_DUMMY) {
      mListener.onCodeInput(code,keyCodes,x,y);
    }
 else     if (text != null) {
      mListener.onTextInput(text);
    }
    if (!key.altCodeWhileTyping() && !key.isModifier()) {
      mTimerProxy.startKeyTypedTimer(sIgnoreSpecialKeyTimeout);
    }
  }
}",0.9511961722488038
88085,"public static CharSequence getTextWithAutoCorrectionIndicatorUnderline(Context context,CharSequence text){
  if (TextUtils.isEmpty(text) || CONSTRUCTOR_SuggestionSpan == null || OBJ_FLAG_AUTO_CORRECTION == null) {
    return text;
  }
  final Spannable spannable=text instanceof Spannable ? (Spannable)text : new SpannableString(text);
  final Object[] args={context,null,new String[]{},(int)OBJ_FLAG_AUTO_CORRECTION,(Class<?>)SuggestionSpanPickedNotificationReceiver.class};
  final Object ss=CompatUtils.newInstance(CONSTRUCTOR_SuggestionSpan,args);
  if (ss == null) {
    Log.w(TAG,""String_Node_Str"");
    return text;
  }
  spannable.setSpan(ss,0,text.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE | Spanned.SPAN_COMPOSING);
  return spannable;
}","public static CharSequence getTextWithAutoCorrectionIndicatorUnderline(Context context,CharSequence text){
  if (TextUtils.isEmpty(text) || CONSTRUCTOR_SuggestionSpan == null || OBJ_FLAG_AUTO_CORRECTION == null || OBJ_SUGGESTION_MAX_SIZE == null) {
    return text;
  }
  final Spannable spannable=text instanceof Spannable ? (Spannable)text : new SpannableString(text);
  final Object[] args={context,null,new String[]{},(int)OBJ_FLAG_AUTO_CORRECTION,(Class<?>)SuggestionSpanPickedNotificationReceiver.class};
  final Object ss=CompatUtils.newInstance(CONSTRUCTOR_SuggestionSpan,args);
  if (ss == null) {
    Log.w(TAG,""String_Node_Str"");
    return text;
  }
  spannable.setSpan(ss,0,text.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE | Spanned.SPAN_COMPOSING);
  return spannable;
}",0.9771092217135384
88086,"/** 
 * Finds all possible nearby key codes around a touch event point and returns the nearest key. The algorithm to determine the nearby keys depends on the threshold set by  {@link #setProximityThreshold(int)} and the mode set by{@link #setProximityCorrectionEnabled(boolean)}.
 * @param x The x-coordinate of a touch point
 * @param y The y-coordinate of a touch point
 * @param allCodes All nearby key codes except functional key are returned in this array
 * @return The nearest key
 */
public Key getKeyAndNearbyCodes(int x,int y,final int[] allCodes){
  final List<Key> keys=getKeyboard().mKeys;
  final int touchX=getTouchX(x);
  final int touchY=getTouchY(y);
  initializeNearbyKeys();
  Key primaryKey=null;
  for (  final int index : mKeyboard.getNearestKeys(touchX,touchY)) {
    final Key key=keys.get(index);
    final boolean isOnKey=key.isOnKey(touchX,touchY);
    final int distance=key.squaredDistanceToEdge(touchX,touchY);
    if (isOnKey || (mProximityCorrectOn && distance < mProximityThresholdSquare)) {
      final int insertedPosition=sortNearbyKeys(index,distance,isOnKey);
      if (insertedPosition == 0 && isOnKey) {
        primaryKey=key;
      }
    }
  }
  if (allCodes != null && allCodes.length > 0) {
    getNearbyKeyCodes(allCodes);
    if (DEBUG) {
      Log.d(TAG,""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ (primaryKey == null ? ""String_Node_Str"" : primaryKey.mCode)+ ""String_Node_Str""+ Arrays.toString(allCodes));
    }
  }
  return primaryKey;
}","/** 
 * Finds all possible nearby key codes around a touch event point and returns the nearest key. The algorithm to determine the nearby keys depends on the threshold set by  {@link #setProximityThreshold(int)} and the mode set by{@link #setProximityCorrectionEnabled(boolean)}.
 * @param x The x-coordinate of a touch point
 * @param y The y-coordinate of a touch point
 * @param allCodes All nearby key codes except functional key are returned in this array
 * @return The nearest key
 */
public Key getKeyAndNearbyCodes(int x,int y,final int[] allCodes){
  final List<Key> keys=getKeyboard().mKeys;
  final int touchX=getTouchX(x);
  final int touchY=getTouchY(y);
  initializeNearbyKeys();
  Key primaryKey=null;
  for (  final int index : mKeyboard.getNearestKeys(touchX,touchY)) {
    final Key key=keys.get(index);
    final boolean isOnKey=key.isOnKey(touchX,touchY);
    final int distance=key.squaredDistanceToEdge(touchX,touchY);
    if (isOnKey || (mProximityCorrectOn && distance < mProximityThresholdSquare)) {
      final int insertedPosition=sortNearbyKeys(index,distance,isOnKey);
      if (insertedPosition == 0 && isOnKey) {
        primaryKey=key;
      }
    }
  }
  if (allCodes != null && allCodes.length > 0) {
    getNearbyKeyCodes(allCodes);
    if (DEBUG) {
      Log.d(TAG,""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ printableCode(primaryKey)+ ""String_Node_Str""+ printableCodes(allCodes));
    }
  }
  return primaryKey;
}",0.9627391742195368
88087,"private void printTouchEvent(String title,int x,int y,long eventTime){
  final Key key=mKeyDetector.getKeyAndNearbyCodes(x,y,null);
  final String code=(key == null) ? ""String_Node_Str"" : keyCodePrintable(key.mCode);
  final long delta=eventTime - mPreviousEventTime;
  Log.d(TAG,String.format(""String_Node_Str"",title,(mKeyAlreadyProcessed ? ""String_Node_Str"" : ""String_Node_Str""),mPointerId,x,y,delta,code));
  mPreviousEventTime=eventTime;
}","private void printTouchEvent(String title,int x,int y,long eventTime){
  final Key key=mKeyDetector.getKeyAndNearbyCodes(x,y,null);
  final String code=KeyDetector.printableCode(key);
  final long delta=eventTime - mPreviousEventTime;
  Log.d(TAG,String.format(""String_Node_Str"",title,(mKeyAlreadyProcessed ? ""String_Node_Str"" : ""String_Node_Str""),mPointerId,x,y,delta,code));
  mPreviousEventTime=eventTime;
}",0.902696365767878
88088,"private boolean callListenerOnPressAndCheckKeyboardLayoutChange(Key key,boolean withSliding){
  final boolean ignoreModifierKey=mIgnoreModifierKey && key.isModifier();
  if (DEBUG_LISTENER)   Log.d(TAG,""String_Node_Str"" + keyCodePrintable(key.mCode) + ""String_Node_Str""+ withSliding+ ""String_Node_Str""+ ignoreModifierKey);
  if (ignoreModifierKey) {
    return false;
  }
  if (key.isEnabled()) {
    mListener.onPress(key.mCode,withSliding);
    final boolean keyboardLayoutHasBeenChanged=mKeyboardLayoutHasBeenChanged;
    mKeyboardLayoutHasBeenChanged=false;
    return keyboardLayoutHasBeenChanged;
  }
  return false;
}","private boolean callListenerOnPressAndCheckKeyboardLayoutChange(Key key,boolean withSliding){
  final boolean ignoreModifierKey=mIgnoreModifierKey && key.isModifier();
  if (DEBUG_LISTENER) {
    Log.d(TAG,""String_Node_Str"" + KeyDetector.printableCode(key.mCode) + ""String_Node_Str""+ withSliding+ ""String_Node_Str""+ ignoreModifierKey+ ""String_Node_Str""+ key.isEnabled());
  }
  if (ignoreModifierKey) {
    return false;
  }
  if (key.isEnabled()) {
    mListener.onPress(key.mCode,withSliding);
    final boolean keyboardLayoutHasBeenChanged=mKeyboardLayoutHasBeenChanged;
    mKeyboardLayoutHasBeenChanged=false;
    return keyboardLayoutHasBeenChanged;
  }
  return false;
}",0.9331283627978478
88089,"private void callListenerOnRelease(Key key,int primaryCode,boolean withSliding){
  final boolean ignoreModifierKey=mIgnoreModifierKey && key.isModifier();
  if (DEBUG_LISTENER)   Log.d(TAG,""String_Node_Str"" + keyCodePrintable(primaryCode) + ""String_Node_Str""+ withSliding+ ""String_Node_Str""+ ignoreModifierKey);
  if (ignoreModifierKey) {
    return;
  }
  if (key.isEnabled()) {
    mListener.onRelease(primaryCode,withSliding);
  }
}","private void callListenerOnRelease(Key key,int primaryCode,boolean withSliding){
  final boolean ignoreModifierKey=mIgnoreModifierKey && key.isModifier();
  if (DEBUG_LISTENER) {
    Log.d(TAG,""String_Node_Str"" + KeyDetector.printableCode(primaryCode) + ""String_Node_Str""+ withSliding+ ""String_Node_Str""+ ignoreModifierKey+ ""String_Node_Str""+ key.isEnabled());
  }
  if (ignoreModifierKey) {
    return;
  }
  if (key.isEnabled()) {
    mListener.onRelease(primaryCode,withSliding);
  }
}",0.7410617551462622
88090,"private void callListenerOnCodeInput(Key key,int primaryCode,int[] keyCodes,int x,int y){
  final boolean ignoreModifierKey=mIgnoreModifierKey && key.isModifier();
  final boolean alterCode=key.altCodeWhileTyping() && mTimerProxy.isTyping();
  final int code=alterCode ? key.mAltCode : primaryCode;
  final CharSequence text=(code != Keyboard.CODE_DUMMY) ? null : key.mOutputText;
  if (DEBUG_LISTENER) {
    Log.d(TAG,""String_Node_Str"" + keyCodePrintable(code) + ""String_Node_Str""+ text+ ""String_Node_Str""+ Arrays.toString(keyCodes)+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ ignoreModifierKey+ ""String_Node_Str""+ alterCode);
  }
  if (ignoreModifierKey) {
    return;
  }
  if (key.isEnabled()) {
    if (code != Keyboard.CODE_DUMMY) {
      mListener.onCodeInput(code,keyCodes,x,y);
    }
 else     if (text != null) {
      mListener.onTextInput(text);
    }
    if (!key.altCodeWhileTyping() && !key.isModifier()) {
      mTimerProxy.startKeyTypedTimer(sIgnoreSpecialKeyTimeout);
    }
  }
}","private void callListenerOnCodeInput(Key key,int primaryCode,int[] keyCodes,int x,int y){
  final boolean ignoreModifierKey=mIgnoreModifierKey && key.isModifier();
  final boolean alterCode=key.altCodeWhileTyping() && mTimerProxy.isTyping();
  final int code=alterCode ? key.mAltCode : primaryCode;
  final CharSequence text=(code != Keyboard.CODE_DUMMY) ? null : key.mOutputText;
  if (DEBUG_LISTENER) {
    Log.d(TAG,""String_Node_Str"" + KeyDetector.printableCode(code) + ""String_Node_Str""+ text+ ""String_Node_Str""+ KeyDetector.printableCodes(keyCodes)+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ ignoreModifierKey+ ""String_Node_Str""+ alterCode+ ""String_Node_Str""+ key.isEnabled());
  }
  if (ignoreModifierKey) {
    return;
  }
  if (key.isEnabled()) {
    if (code != Keyboard.CODE_DUMMY) {
      mListener.onCodeInput(code,keyCodes,x,y);
    }
 else     if (text != null) {
      mListener.onTextInput(text);
    }
    if (!key.altCodeWhileTyping() && !key.isModifier()) {
      mTimerProxy.startKeyTypedTimer(sIgnoreSpecialKeyTimeout);
    }
  }
}",0.9511961722488038
88091,"/** 
 * Finds all possible nearby key codes around a touch event point and returns the nearest key. The algorithm to determine the nearby keys depends on the threshold set by  {@link #setProximityThreshold(int)} and the mode set by{@link #setProximityCorrectionEnabled(boolean)}.
 * @param x The x-coordinate of a touch point
 * @param y The y-coordinate of a touch point
 * @param allCodes All nearby key codes except functional key are returned in this array
 * @return The nearest key
 */
public Key getKeyAndNearbyCodes(int x,int y,final int[] allCodes){
  final List<Key> keys=getKeyboard().mKeys;
  final int touchX=getTouchX(x);
  final int touchY=getTouchY(y);
  initializeNearbyKeys();
  Key primaryKey=null;
  for (  final int index : mKeyboard.getNearestKeys(touchX,touchY)) {
    final Key key=keys.get(index);
    final boolean isOnKey=key.isOnKey(touchX,touchY);
    final int distance=key.squaredDistanceToEdge(touchX,touchY);
    if (isOnKey || (mProximityCorrectOn && distance < mProximityThresholdSquare)) {
      final int insertedPosition=sortNearbyKeys(index,distance,isOnKey);
      if (insertedPosition == 0 && isOnKey) {
        primaryKey=key;
      }
    }
  }
  if (allCodes != null && allCodes.length > 0) {
    getNearbyKeyCodes(allCodes);
    if (DEBUG) {
      Log.d(TAG,""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ (primaryKey == null ? ""String_Node_Str"" : primaryKey.mCode)+ ""String_Node_Str""+ Arrays.toString(allCodes));
    }
  }
  return primaryKey;
}","/** 
 * Finds all possible nearby key codes around a touch event point and returns the nearest key. The algorithm to determine the nearby keys depends on the threshold set by  {@link #setProximityThreshold(int)} and the mode set by{@link #setProximityCorrectionEnabled(boolean)}.
 * @param x The x-coordinate of a touch point
 * @param y The y-coordinate of a touch point
 * @param allCodes All nearby key codes except functional key are returned in this array
 * @return The nearest key
 */
public Key getKeyAndNearbyCodes(int x,int y,final int[] allCodes){
  final List<Key> keys=getKeyboard().mKeys;
  final int touchX=getTouchX(x);
  final int touchY=getTouchY(y);
  initializeNearbyKeys();
  Key primaryKey=null;
  for (  final int index : mKeyboard.getNearestKeys(touchX,touchY)) {
    final Key key=keys.get(index);
    final boolean isOnKey=key.isOnKey(touchX,touchY);
    final int distance=key.squaredDistanceToEdge(touchX,touchY);
    if (isOnKey || (mProximityCorrectOn && distance < mProximityThresholdSquare)) {
      final int insertedPosition=sortNearbyKeys(index,distance,isOnKey);
      if (insertedPosition == 0 && isOnKey) {
        primaryKey=key;
      }
    }
  }
  if (allCodes != null && allCodes.length > 0) {
    getNearbyKeyCodes(allCodes);
    if (DEBUG) {
      Log.d(TAG,""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ printableCode(primaryKey)+ ""String_Node_Str""+ printableCodes(allCodes));
    }
  }
  return primaryKey;
}",0.9627391742195368
88092,"private void printTouchEvent(String title,int x,int y,long eventTime){
  final Key key=mKeyDetector.getKeyAndNearbyCodes(x,y,null);
  final String code=(key == null) ? ""String_Node_Str"" : keyCodePrintable(key.mCode);
  final long delta=eventTime - mPreviousEventTime;
  Log.d(TAG,String.format(""String_Node_Str"",title,(mKeyAlreadyProcessed ? ""String_Node_Str"" : ""String_Node_Str""),mPointerId,x,y,delta,code));
  mPreviousEventTime=eventTime;
}","private void printTouchEvent(String title,int x,int y,long eventTime){
  final Key key=mKeyDetector.getKeyAndNearbyCodes(x,y,null);
  final String code=KeyDetector.printableCode(key);
  final long delta=eventTime - mPreviousEventTime;
  Log.d(TAG,String.format(""String_Node_Str"",title,(mKeyAlreadyProcessed ? ""String_Node_Str"" : ""String_Node_Str""),mPointerId,x,y,delta,code));
  mPreviousEventTime=eventTime;
}",0.902696365767878
88093,"private boolean callListenerOnPressAndCheckKeyboardLayoutChange(Key key,boolean withSliding){
  final boolean ignoreModifierKey=mIgnoreModifierKey && key.isModifier();
  if (DEBUG_LISTENER)   Log.d(TAG,""String_Node_Str"" + keyCodePrintable(key.mCode) + ""String_Node_Str""+ withSliding+ ""String_Node_Str""+ ignoreModifierKey);
  if (ignoreModifierKey) {
    return false;
  }
  if (key.isEnabled()) {
    mListener.onPress(key.mCode,withSliding);
    final boolean keyboardLayoutHasBeenChanged=mKeyboardLayoutHasBeenChanged;
    mKeyboardLayoutHasBeenChanged=false;
    return keyboardLayoutHasBeenChanged;
  }
  return false;
}","private boolean callListenerOnPressAndCheckKeyboardLayoutChange(Key key,boolean withSliding){
  final boolean ignoreModifierKey=mIgnoreModifierKey && key.isModifier();
  if (DEBUG_LISTENER) {
    Log.d(TAG,""String_Node_Str"" + KeyDetector.printableCode(key.mCode) + ""String_Node_Str""+ withSliding+ ""String_Node_Str""+ ignoreModifierKey+ ""String_Node_Str""+ key.isEnabled());
  }
  if (ignoreModifierKey) {
    return false;
  }
  if (key.isEnabled()) {
    mListener.onPress(key.mCode,withSliding);
    final boolean keyboardLayoutHasBeenChanged=mKeyboardLayoutHasBeenChanged;
    mKeyboardLayoutHasBeenChanged=false;
    return keyboardLayoutHasBeenChanged;
  }
  return false;
}",0.9331283627978478
88094,"private void callListenerOnRelease(Key key,int primaryCode,boolean withSliding){
  final boolean ignoreModifierKey=mIgnoreModifierKey && key.isModifier();
  if (DEBUG_LISTENER)   Log.d(TAG,""String_Node_Str"" + keyCodePrintable(primaryCode) + ""String_Node_Str""+ withSliding+ ""String_Node_Str""+ ignoreModifierKey);
  if (ignoreModifierKey) {
    return;
  }
  if (key.isEnabled()) {
    mListener.onRelease(primaryCode,withSliding);
  }
}","private void callListenerOnRelease(Key key,int primaryCode,boolean withSliding){
  final boolean ignoreModifierKey=mIgnoreModifierKey && key.isModifier();
  if (DEBUG_LISTENER) {
    Log.d(TAG,""String_Node_Str"" + KeyDetector.printableCode(primaryCode) + ""String_Node_Str""+ withSliding+ ""String_Node_Str""+ ignoreModifierKey+ ""String_Node_Str""+ key.isEnabled());
  }
  if (ignoreModifierKey) {
    return;
  }
  if (key.isEnabled()) {
    mListener.onRelease(primaryCode,withSliding);
  }
}",0.7410617551462622
88095,"private void callListenerOnCodeInput(Key key,int primaryCode,int[] keyCodes,int x,int y){
  final boolean ignoreModifierKey=mIgnoreModifierKey && key.isModifier();
  final boolean alterCode=key.altCodeWhileTyping() && mTimerProxy.isTyping();
  final int code=alterCode ? key.mAltCode : primaryCode;
  final CharSequence text=(code != Keyboard.CODE_DUMMY) ? null : key.mOutputText;
  if (DEBUG_LISTENER) {
    Log.d(TAG,""String_Node_Str"" + keyCodePrintable(code) + ""String_Node_Str""+ text+ ""String_Node_Str""+ Arrays.toString(keyCodes)+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ ignoreModifierKey+ ""String_Node_Str""+ alterCode);
  }
  if (ignoreModifierKey) {
    return;
  }
  if (key.isEnabled()) {
    if (code != Keyboard.CODE_DUMMY) {
      mListener.onCodeInput(code,keyCodes,x,y);
    }
 else     if (text != null) {
      mListener.onTextInput(text);
    }
    if (!key.altCodeWhileTyping() && !key.isModifier()) {
      mTimerProxy.startKeyTypedTimer(sIgnoreSpecialKeyTimeout);
    }
  }
}","private void callListenerOnCodeInput(Key key,int primaryCode,int[] keyCodes,int x,int y){
  final boolean ignoreModifierKey=mIgnoreModifierKey && key.isModifier();
  final boolean alterCode=key.altCodeWhileTyping() && mTimerProxy.isTyping();
  final int code=alterCode ? key.mAltCode : primaryCode;
  final CharSequence text=(code != Keyboard.CODE_DUMMY) ? null : key.mOutputText;
  if (DEBUG_LISTENER) {
    Log.d(TAG,""String_Node_Str"" + KeyDetector.printableCode(code) + ""String_Node_Str""+ text+ ""String_Node_Str""+ KeyDetector.printableCodes(keyCodes)+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ ignoreModifierKey+ ""String_Node_Str""+ alterCode+ ""String_Node_Str""+ key.isEnabled());
  }
  if (ignoreModifierKey) {
    return;
  }
  if (key.isEnabled()) {
    if (code != Keyboard.CODE_DUMMY) {
      mListener.onCodeInput(code,keyCodes,x,y);
    }
 else     if (text != null) {
      mListener.onTextInput(text);
    }
    if (!key.altCodeWhileTyping() && !key.isModifier()) {
      mTimerProxy.startKeyTypedTimer(sIgnoreSpecialKeyTimeout);
    }
  }
}",0.9511961722488038
88096,"private void handleCharacter(final int primaryCode,final int[] keyCodes,final int x,final int y,final int spaceState){
  mVoiceProxy.handleCharacter();
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null)   ic.beginBatchEdit();
  if (SPACE_STATE_MAGIC == spaceState && mSettingsValues.isMagicSpaceStripper(primaryCode)) {
    removeTrailingSpaceWhileInBatchEdit(ic);
  }
  int code=primaryCode;
  if ((isAlphabet(code) || mSettingsValues.isSymbolExcludedFromWordSeparators(code)) && isSuggestionsRequested() && !isCursorTouchingWord()) {
    if (!mHasUncommittedTypedChars) {
      mHasUncommittedTypedChars=true;
      mComposingStringBuilder.setLength(0);
      mWordComposer.reset();
      clearSuggestions();
      mComposingStateManager.onFinishComposingText();
    }
  }
  if (code == Keyboard.CODE_SINGLE_QUOTE && !isCursorTouchingWord()) {
    mHasUncommittedTypedChars=false;
  }
  final KeyboardSwitcher switcher=mKeyboardSwitcher;
  if (switcher.isShiftedOrShiftLocked()) {
    if (keyCodes == null || keyCodes[0] < Character.MIN_CODE_POINT || keyCodes[0] > Character.MAX_CODE_POINT) {
      if (null != ic)       ic.endBatchEdit();
      return;
    }
    code=keyCodes[0];
    if (switcher.isAlphabetMode() && Character.isLowerCase(code)) {
      final String upperCaseString=new String(new int[]{code},0,1).toUpperCase(mSubtypeSwitcher.getInputLocale());
      if (upperCaseString.codePointCount(0,upperCaseString.length()) == 1) {
        code=upperCaseString.codePointAt(0);
      }
 else {
        onTextInput(upperCaseString);
        if (null != ic)         ic.endBatchEdit();
        return;
      }
    }
  }
  if (mHasUncommittedTypedChars) {
    mComposingStringBuilder.append((char)code);
    mWordComposer.add(code,keyCodes,x,y);
    if (ic != null) {
      if (mWordComposer.size() == 1) {
        mWordComposer.setAutoCapitalized(getCurrentAutoCapsState());
        mComposingStateManager.onStartComposingText();
      }
      final CharSequence textWithUnderline=mComposingStateManager.isAutoCorrectionIndicatorOn() ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mComposingStringBuilder) : mComposingStringBuilder;
      ic.setComposingText(textWithUnderline,1);
    }
    mHandler.postUpdateSuggestions();
  }
 else {
    sendKeyChar((char)code);
  }
  if (SPACE_STATE_MAGIC == spaceState && mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
    if (null != ic)     swapSwapperAndSpaceWhileInBatchEdit(ic);
  }
  switcher.updateShiftState();
  if (LatinIME.PERF_DEBUG)   measureCps();
  TextEntryState.typedCharacter((char)code,mSettingsValues.isWordSeparator(code),x,y);
  if (null != ic)   ic.endBatchEdit();
}","private void handleCharacter(final int primaryCode,final int[] keyCodes,final int x,final int y,final int spaceState){
  mVoiceProxy.handleCharacter();
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null)   ic.beginBatchEdit();
  if (SPACE_STATE_MAGIC == spaceState && mSettingsValues.isMagicSpaceStripper(primaryCode)) {
    removeTrailingSpaceWhileInBatchEdit(ic);
  }
  int code=primaryCode;
  if ((isAlphabet(code) || mSettingsValues.isSymbolExcludedFromWordSeparators(code)) && isSuggestionsRequested() && !isCursorTouchingWord()) {
    if (!mHasUncommittedTypedChars) {
      mHasUncommittedTypedChars=(Keyboard.CODE_SINGLE_QUOTE != code);
      mComposingStringBuilder.setLength(0);
      mWordComposer.reset();
      clearSuggestions();
      mComposingStateManager.onFinishComposingText();
    }
  }
  final KeyboardSwitcher switcher=mKeyboardSwitcher;
  if (switcher.isShiftedOrShiftLocked()) {
    if (keyCodes == null || keyCodes[0] < Character.MIN_CODE_POINT || keyCodes[0] > Character.MAX_CODE_POINT) {
      if (null != ic)       ic.endBatchEdit();
      return;
    }
    code=keyCodes[0];
    if (switcher.isAlphabetMode() && Character.isLowerCase(code)) {
      final String upperCaseString=new String(new int[]{code},0,1).toUpperCase(mSubtypeSwitcher.getInputLocale());
      if (upperCaseString.codePointCount(0,upperCaseString.length()) == 1) {
        code=upperCaseString.codePointAt(0);
      }
 else {
        onTextInput(upperCaseString);
        if (null != ic)         ic.endBatchEdit();
        return;
      }
    }
  }
  if (mHasUncommittedTypedChars) {
    mComposingStringBuilder.append((char)code);
    mWordComposer.add(code,keyCodes,x,y);
    if (ic != null) {
      if (mWordComposer.size() == 1) {
        mWordComposer.setAutoCapitalized(getCurrentAutoCapsState());
        mComposingStateManager.onStartComposingText();
      }
      final CharSequence textWithUnderline=mComposingStateManager.isAutoCorrectionIndicatorOn() ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mComposingStringBuilder) : mComposingStringBuilder;
      ic.setComposingText(textWithUnderline,1);
    }
    mHandler.postUpdateSuggestions();
  }
 else {
    sendKeyChar((char)code);
  }
  if (SPACE_STATE_MAGIC == spaceState && mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
    if (null != ic)     swapSwapperAndSpaceWhileInBatchEdit(ic);
  }
  switcher.updateShiftState();
  if (LatinIME.PERF_DEBUG)   measureCps();
  TextEntryState.typedCharacter((char)code,mSettingsValues.isWordSeparator(code),x,y);
  if (null != ic)   ic.endBatchEdit();
}",0.9218277945619336
88097,"private void handleCharacter(final int primaryCode,final int[] keyCodes,final int x,final int y,final int spaceState){
  mVoiceProxy.handleCharacter();
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null)   ic.beginBatchEdit();
  if (SPACE_STATE_MAGIC == spaceState && mSettingsValues.isMagicSpaceStripper(primaryCode)) {
    removeTrailingSpaceWhileInBatchEdit(ic);
  }
  int code=primaryCode;
  if ((isAlphabet(code) || mSettingsValues.isSymbolExcludedFromWordSeparators(code)) && isSuggestionsRequested() && !isCursorTouchingWord()) {
    if (!mHasUncommittedTypedChars) {
      mHasUncommittedTypedChars=true;
      mComposingStringBuilder.setLength(0);
      mWordComposer.reset();
      clearSuggestions();
      mComposingStateManager.onFinishComposingText();
    }
  }
  if (code == Keyboard.CODE_SINGLE_QUOTE && !isCursorTouchingWord()) {
    mHasUncommittedTypedChars=false;
  }
  final KeyboardSwitcher switcher=mKeyboardSwitcher;
  if (switcher.isShiftedOrShiftLocked()) {
    if (keyCodes == null || keyCodes[0] < Character.MIN_CODE_POINT || keyCodes[0] > Character.MAX_CODE_POINT) {
      if (null != ic)       ic.endBatchEdit();
      return;
    }
    code=keyCodes[0];
    if (switcher.isAlphabetMode() && Character.isLowerCase(code)) {
      final String upperCaseString=new String(new int[]{code},0,1).toUpperCase(mSubtypeSwitcher.getInputLocale());
      if (upperCaseString.codePointCount(0,upperCaseString.length()) == 1) {
        code=upperCaseString.codePointAt(0);
      }
 else {
        onTextInput(upperCaseString);
        if (null != ic)         ic.endBatchEdit();
        return;
      }
    }
  }
  if (mHasUncommittedTypedChars) {
    mComposingStringBuilder.append((char)code);
    mWordComposer.add(code,keyCodes,x,y);
    if (ic != null) {
      if (mWordComposer.size() == 1) {
        mWordComposer.setAutoCapitalized(getCurrentAutoCapsState());
        mComposingStateManager.onStartComposingText();
      }
      final CharSequence textWithUnderline=mComposingStateManager.isAutoCorrectionIndicatorOn() ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mComposingStringBuilder) : mComposingStringBuilder;
      ic.setComposingText(textWithUnderline,1);
    }
    mHandler.postUpdateSuggestions();
  }
 else {
    sendKeyChar((char)code);
  }
  if (SPACE_STATE_MAGIC == spaceState && mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
    if (null != ic)     swapSwapperAndSpaceWhileInBatchEdit(ic);
  }
  switcher.updateShiftState();
  if (LatinIME.PERF_DEBUG)   measureCps();
  TextEntryState.typedCharacter((char)code,mSettingsValues.isWordSeparator(code),x,y);
  if (null != ic)   ic.endBatchEdit();
}","private void handleCharacter(final int primaryCode,final int[] keyCodes,final int x,final int y,final int spaceState){
  mVoiceProxy.handleCharacter();
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null)   ic.beginBatchEdit();
  if (SPACE_STATE_MAGIC == spaceState && mSettingsValues.isMagicSpaceStripper(primaryCode)) {
    removeTrailingSpaceWhileInBatchEdit(ic);
  }
  int code=primaryCode;
  if ((isAlphabet(code) || mSettingsValues.isSymbolExcludedFromWordSeparators(code)) && isSuggestionsRequested() && !isCursorTouchingWord()) {
    if (!mHasUncommittedTypedChars) {
      mHasUncommittedTypedChars=(Keyboard.CODE_SINGLE_QUOTE != code);
      mComposingStringBuilder.setLength(0);
      mWordComposer.reset();
      clearSuggestions();
      mComposingStateManager.onFinishComposingText();
    }
  }
  final KeyboardSwitcher switcher=mKeyboardSwitcher;
  if (switcher.isShiftedOrShiftLocked()) {
    if (keyCodes == null || keyCodes[0] < Character.MIN_CODE_POINT || keyCodes[0] > Character.MAX_CODE_POINT) {
      if (null != ic)       ic.endBatchEdit();
      return;
    }
    code=keyCodes[0];
    if (switcher.isAlphabetMode() && Character.isLowerCase(code)) {
      final String upperCaseString=new String(new int[]{code},0,1).toUpperCase(mSubtypeSwitcher.getInputLocale());
      if (upperCaseString.codePointCount(0,upperCaseString.length()) == 1) {
        code=upperCaseString.codePointAt(0);
      }
 else {
        onTextInput(upperCaseString);
        if (null != ic)         ic.endBatchEdit();
        return;
      }
    }
  }
  if (mHasUncommittedTypedChars) {
    mComposingStringBuilder.append((char)code);
    mWordComposer.add(code,keyCodes,x,y);
    if (ic != null) {
      if (mWordComposer.size() == 1) {
        mWordComposer.setAutoCapitalized(getCurrentAutoCapsState());
        mComposingStateManager.onStartComposingText();
      }
      final CharSequence textWithUnderline=mComposingStateManager.isAutoCorrectionIndicatorOn() ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mComposingStringBuilder) : mComposingStringBuilder;
      ic.setComposingText(textWithUnderline,1);
    }
    mHandler.postUpdateSuggestions();
  }
 else {
    sendKeyChar((char)code);
  }
  if (SPACE_STATE_MAGIC == spaceState && mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
    if (null != ic)     swapSwapperAndSpaceWhileInBatchEdit(ic);
  }
  switcher.updateShiftState();
  if (LatinIME.PERF_DEBUG)   measureCps();
  TextEntryState.typedCharacter((char)code,mSettingsValues.isWordSeparator(code),x,y);
  if (null != ic)   ic.endBatchEdit();
}",0.9218277945619336
88098,"/** 
 * Adds a word to the dictionary and makes it persistent.
 * @param word the word to add. If the word is capitalized, then the dictionary willrecognize it as a capitalized word when searched.
 * @param frequency the frequency of occurrence of the word. A frequency of 255 is consideredthe highest.
 * @TODO use a higher or float range for frequency
 */
@Override public synchronized void addWord(final String word,final int frequency){
  if (getRequiresReload())   loadDictionaryAsync();
  if (word.length() >= getMaxWordLength())   return;
  super.addWord(word,frequency);
  final ContentValues values=new ContentValues(5);
  values.put(Words.WORD,word);
  values.put(Words.FREQUENCY,frequency);
  values.put(Words.LOCALE,mLocale);
  values.put(Words.APP_ID,0);
  final ContentResolver contentResolver=getContext().getContentResolver();
  final ContentProviderClient client=contentResolver.acquireContentProviderClient(Words.CONTENT_URI);
  if (null == client)   return;
  new Thread(""String_Node_Str""){
    @Override public void run(){
      try {
        final Cursor cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
        if (cursor != null && cursor.moveToFirst()) {
          final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
          if (locale != null && locale.equals(mLocale.toString())) {
            final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
            final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
            client.update(uri,values,null,null);
          }
        }
 else {
          client.insert(Words.CONTENT_URI,values);
        }
      }
 catch (      RemoteException e) {
      }
    }
  }
.start();
  setRequiresReload(false);
}","/** 
 * Adds a word to the dictionary and makes it persistent.
 * @param word the word to add. If the word is capitalized, then the dictionary willrecognize it as a capitalized word when searched.
 * @param frequency the frequency of occurrence of the word. A frequency of 255 is consideredthe highest.
 * @TODO use a higher or float range for frequency
 */
@Override public synchronized void addWord(final String word,final int frequency){
  if (getRequiresReload())   loadDictionaryAsync();
  if (word.length() >= getMaxWordLength())   return;
  super.addWord(word,frequency);
  final ContentValues values=new ContentValues(5);
  values.put(Words.WORD,word);
  values.put(Words.FREQUENCY,frequency);
  values.put(Words.LOCALE,mLocale);
  values.put(Words.APP_ID,0);
  final ContentResolver contentResolver=getContext().getContentResolver();
  final ContentProviderClient client=contentResolver.acquireContentProviderClient(Words.CONTENT_URI);
  if (null == client)   return;
  new Thread(""String_Node_Str""){
    @Override public void run(){
      Cursor cursor=null;
      try {
        cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
        if (cursor != null && cursor.moveToFirst()) {
          final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
          if (locale != null && locale.equals(mLocale.toString())) {
            final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
            final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
            client.update(uri,values,null,null);
          }
        }
 else {
          client.insert(Words.CONTENT_URI,values);
        }
      }
 catch (      RemoteException e) {
      }
 finally {
        if (null != cursor)         cursor.close();
        client.release();
      }
    }
  }
.start();
  setRequiresReload(false);
}",0.9631436314363144
88099,"@Override public void run(){
  try {
    final Cursor cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
    if (cursor != null && cursor.moveToFirst()) {
      final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
      if (locale != null && locale.equals(mLocale.toString())) {
        final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
        final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
        client.update(uri,values,null,null);
      }
    }
 else {
      client.insert(Words.CONTENT_URI,values);
    }
  }
 catch (  RemoteException e) {
  }
}","@Override public void run(){
  Cursor cursor=null;
  try {
    cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
    if (cursor != null && cursor.moveToFirst()) {
      final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
      if (locale != null && locale.equals(mLocale.toString())) {
        final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
        final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
        client.update(uri,values,null,null);
      }
    }
 else {
      client.insert(Words.CONTENT_URI,values);
    }
  }
 catch (  RemoteException e) {
  }
 finally {
    if (null != cursor)     cursor.close();
    client.release();
  }
}",0.9186535764375876
88100,"/** 
 * Adds a word to the dictionary and makes it persistent.
 * @param word the word to add. If the word is capitalized, then the dictionary willrecognize it as a capitalized word when searched.
 * @param frequency the frequency of occurrence of the word. A frequency of 255 is consideredthe highest.
 * @TODO use a higher or float range for frequency
 */
@Override public synchronized void addWord(final String word,final int frequency){
  if (getRequiresReload())   loadDictionaryAsync();
  if (word.length() >= getMaxWordLength())   return;
  super.addWord(word,frequency);
  final ContentValues values=new ContentValues(5);
  values.put(Words.WORD,word);
  values.put(Words.FREQUENCY,frequency);
  values.put(Words.LOCALE,mLocale);
  values.put(Words.APP_ID,0);
  final ContentResolver contentResolver=getContext().getContentResolver();
  final ContentProviderClient client=contentResolver.acquireContentProviderClient(Words.CONTENT_URI);
  if (null == client)   return;
  new Thread(""String_Node_Str""){
    @Override public void run(){
      try {
        final Cursor cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
        if (cursor != null && cursor.moveToFirst()) {
          final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
          if (locale != null && locale.equals(mLocale.toString())) {
            final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
            final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
            client.update(uri,values,null,null);
          }
        }
 else {
          client.insert(Words.CONTENT_URI,values);
        }
      }
 catch (      RemoteException e) {
      }
    }
  }
.start();
  setRequiresReload(false);
}","/** 
 * Adds a word to the dictionary and makes it persistent.
 * @param word the word to add. If the word is capitalized, then the dictionary willrecognize it as a capitalized word when searched.
 * @param frequency the frequency of occurrence of the word. A frequency of 255 is consideredthe highest.
 * @TODO use a higher or float range for frequency
 */
@Override public synchronized void addWord(final String word,final int frequency){
  if (getRequiresReload())   loadDictionaryAsync();
  if (word.length() >= getMaxWordLength())   return;
  super.addWord(word,frequency);
  final ContentValues values=new ContentValues(5);
  values.put(Words.WORD,word);
  values.put(Words.FREQUENCY,frequency);
  values.put(Words.LOCALE,mLocale);
  values.put(Words.APP_ID,0);
  final ContentResolver contentResolver=getContext().getContentResolver();
  final ContentProviderClient client=contentResolver.acquireContentProviderClient(Words.CONTENT_URI);
  if (null == client)   return;
  new Thread(""String_Node_Str""){
    @Override public void run(){
      Cursor cursor=null;
      try {
        cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
        if (cursor != null && cursor.moveToFirst()) {
          final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
          if (locale != null && locale.equals(mLocale.toString())) {
            final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
            final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
            client.update(uri,values,null,null);
          }
        }
 else {
          client.insert(Words.CONTENT_URI,values);
        }
      }
 catch (      RemoteException e) {
      }
 finally {
        if (null != cursor)         cursor.close();
        client.release();
      }
    }
  }
.start();
  setRequiresReload(false);
}",0.9631436314363144
88101,"@Override public void run(){
  try {
    final Cursor cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
    if (cursor != null && cursor.moveToFirst()) {
      final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
      if (locale != null && locale.equals(mLocale.toString())) {
        final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
        final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
        client.update(uri,values,null,null);
      }
    }
 else {
      client.insert(Words.CONTENT_URI,values);
    }
  }
 catch (  RemoteException e) {
  }
}","@Override public void run(){
  Cursor cursor=null;
  try {
    cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
    if (cursor != null && cursor.moveToFirst()) {
      final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
      if (locale != null && locale.equals(mLocale.toString())) {
        final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
        final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
        client.update(uri,values,null,null);
      }
    }
 else {
      client.insert(Words.CONTENT_URI,values);
    }
  }
 catch (  RemoteException e) {
  }
 finally {
    if (null != cursor)     cursor.close();
    client.release();
  }
}",0.9186535764375876
88102,"/** 
 * Adds a word to the dictionary and makes it persistent.
 * @param word the word to add. If the word is capitalized, then the dictionary willrecognize it as a capitalized word when searched.
 * @param frequency the frequency of occurrence of the word. A frequency of 255 is consideredthe highest.
 * @TODO use a higher or float range for frequency
 */
@Override public synchronized void addWord(final String word,final int frequency){
  if (getRequiresReload())   loadDictionaryAsync();
  if (word.length() >= getMaxWordLength())   return;
  super.addWord(word,frequency);
  final ContentValues values=new ContentValues(5);
  values.put(Words.WORD,word);
  values.put(Words.FREQUENCY,frequency);
  values.put(Words.LOCALE,mLocale);
  values.put(Words.APP_ID,0);
  final ContentResolver contentResolver=getContext().getContentResolver();
  final ContentProviderClient client=contentResolver.acquireContentProviderClient(Words.CONTENT_URI);
  if (null == client)   return;
  new Thread(""String_Node_Str""){
    @Override public void run(){
      try {
        final Cursor cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
        if (cursor != null && cursor.moveToFirst()) {
          final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
          if (locale != null && locale.equals(mLocale.toString())) {
            final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
            final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
            client.update(uri,values,null,null);
          }
        }
 else {
          client.insert(Words.CONTENT_URI,values);
        }
      }
 catch (      RemoteException e) {
      }
    }
  }
.start();
  setRequiresReload(false);
}","/** 
 * Adds a word to the dictionary and makes it persistent.
 * @param word the word to add. If the word is capitalized, then the dictionary willrecognize it as a capitalized word when searched.
 * @param frequency the frequency of occurrence of the word. A frequency of 255 is consideredthe highest.
 * @TODO use a higher or float range for frequency
 */
@Override public synchronized void addWord(final String word,final int frequency){
  if (getRequiresReload())   loadDictionaryAsync();
  if (word.length() >= getMaxWordLength())   return;
  super.addWord(word,frequency);
  final ContentValues values=new ContentValues(5);
  values.put(Words.WORD,word);
  values.put(Words.FREQUENCY,frequency);
  values.put(Words.LOCALE,mLocale);
  values.put(Words.APP_ID,0);
  final ContentResolver contentResolver=getContext().getContentResolver();
  final ContentProviderClient client=contentResolver.acquireContentProviderClient(Words.CONTENT_URI);
  if (null == client)   return;
  new Thread(""String_Node_Str""){
    @Override public void run(){
      Cursor cursor=null;
      try {
        cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
        if (cursor != null && cursor.moveToFirst()) {
          final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
          if (locale != null && locale.equals(mLocale.toString())) {
            final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
            final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
            client.update(uri,values,null,null);
          }
        }
 else {
          client.insert(Words.CONTENT_URI,values);
        }
      }
 catch (      RemoteException e) {
      }
 finally {
        if (null != cursor)         cursor.close();
        client.release();
      }
    }
  }
.start();
  setRequiresReload(false);
}",0.9631436314363144
88103,"@Override public void run(){
  try {
    final Cursor cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
    if (cursor != null && cursor.moveToFirst()) {
      final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
      if (locale != null && locale.equals(mLocale.toString())) {
        final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
        final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
        client.update(uri,values,null,null);
      }
    }
 else {
      client.insert(Words.CONTENT_URI,values);
    }
  }
 catch (  RemoteException e) {
  }
}","@Override public void run(){
  Cursor cursor=null;
  try {
    cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
    if (cursor != null && cursor.moveToFirst()) {
      final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
      if (locale != null && locale.equals(mLocale.toString())) {
        final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
        final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
        client.update(uri,values,null,null);
      }
    }
 else {
      client.insert(Words.CONTENT_URI,values);
    }
  }
 catch (  RemoteException e) {
  }
 finally {
    if (null != cursor)     cursor.close();
    client.release();
  }
}",0.9186535764375876
88104,"/** 
 * Adds a word to the dictionary and makes it persistent.
 * @param word the word to add. If the word is capitalized, then the dictionary willrecognize it as a capitalized word when searched.
 * @param frequency the frequency of occurrence of the word. A frequency of 255 is consideredthe highest.
 * @TODO use a higher or float range for frequency
 */
@Override public synchronized void addWord(final String word,final int frequency){
  if (getRequiresReload())   loadDictionaryAsync();
  if (word.length() >= getMaxWordLength())   return;
  super.addWord(word,frequency);
  final ContentValues values=new ContentValues(5);
  values.put(Words.WORD,word);
  values.put(Words.FREQUENCY,frequency);
  values.put(Words.LOCALE,mLocale);
  values.put(Words.APP_ID,0);
  final ContentResolver contentResolver=getContext().getContentResolver();
  final ContentProviderClient client=contentResolver.acquireContentProviderClient(Words.CONTENT_URI);
  if (null == client)   return;
  new Thread(""String_Node_Str""){
    @Override public void run(){
      try {
        final Cursor cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
        if (cursor != null && cursor.moveToFirst()) {
          final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
          if (locale != null && locale.equals(mLocale.toString())) {
            final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
            final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
            client.update(uri,values,null,null);
          }
        }
 else {
          client.insert(Words.CONTENT_URI,values);
        }
      }
 catch (      RemoteException e) {
      }
    }
  }
.start();
  setRequiresReload(false);
}","/** 
 * Adds a word to the dictionary and makes it persistent.
 * @param word the word to add. If the word is capitalized, then the dictionary willrecognize it as a capitalized word when searched.
 * @param frequency the frequency of occurrence of the word. A frequency of 255 is consideredthe highest.
 * @TODO use a higher or float range for frequency
 */
@Override public synchronized void addWord(final String word,final int frequency){
  if (getRequiresReload())   loadDictionaryAsync();
  if (word.length() >= getMaxWordLength())   return;
  super.addWord(word,frequency);
  final ContentValues values=new ContentValues(5);
  values.put(Words.WORD,word);
  values.put(Words.FREQUENCY,frequency);
  values.put(Words.LOCALE,mLocale);
  values.put(Words.APP_ID,0);
  final ContentResolver contentResolver=getContext().getContentResolver();
  final ContentProviderClient client=contentResolver.acquireContentProviderClient(Words.CONTENT_URI);
  if (null == client)   return;
  new Thread(""String_Node_Str""){
    @Override public void run(){
      Cursor cursor=null;
      try {
        cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
        if (cursor != null && cursor.moveToFirst()) {
          final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
          if (locale != null && locale.equals(mLocale.toString())) {
            final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
            final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
            client.update(uri,values,null,null);
          }
        }
 else {
          client.insert(Words.CONTENT_URI,values);
        }
      }
 catch (      RemoteException e) {
      }
 finally {
        if (null != cursor)         cursor.close();
        client.release();
      }
    }
  }
.start();
  setRequiresReload(false);
}",0.9631436314363144
88105,"@Override public void run(){
  try {
    final Cursor cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
    if (cursor != null && cursor.moveToFirst()) {
      final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
      if (locale != null && locale.equals(mLocale.toString())) {
        final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
        final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
        client.update(uri,values,null,null);
      }
    }
 else {
      client.insert(Words.CONTENT_URI,values);
    }
  }
 catch (  RemoteException e) {
  }
}","@Override public void run(){
  Cursor cursor=null;
  try {
    cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
    if (cursor != null && cursor.moveToFirst()) {
      final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
      if (locale != null && locale.equals(mLocale.toString())) {
        final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
        final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
        client.update(uri,values,null,null);
      }
    }
 else {
      client.insert(Words.CONTENT_URI,values);
    }
  }
 catch (  RemoteException e) {
  }
 finally {
    if (null != cursor)     cursor.close();
    client.release();
  }
}",0.9186535764375876
88106,"/** 
 * Adds a word to the dictionary and makes it persistent.
 * @param word the word to add. If the word is capitalized, then the dictionary willrecognize it as a capitalized word when searched.
 * @param frequency the frequency of occurrence of the word. A frequency of 255 is consideredthe highest.
 * @TODO use a higher or float range for frequency
 */
@Override public synchronized void addWord(final String word,final int frequency){
  if (getRequiresReload())   loadDictionaryAsync();
  if (word.length() >= getMaxWordLength())   return;
  super.addWord(word,frequency);
  final ContentValues values=new ContentValues(5);
  values.put(Words.WORD,word);
  values.put(Words.FREQUENCY,frequency);
  values.put(Words.LOCALE,mLocale);
  values.put(Words.APP_ID,0);
  final ContentResolver contentResolver=getContext().getContentResolver();
  final ContentProviderClient client=contentResolver.acquireContentProviderClient(Words.CONTENT_URI);
  if (null == client)   return;
  new Thread(""String_Node_Str""){
    @Override public void run(){
      try {
        final Cursor cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
        if (cursor != null && cursor.moveToFirst()) {
          final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
          if (locale != null && locale.equals(mLocale.toString())) {
            final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
            final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
            client.update(uri,values,null,null);
          }
        }
 else {
          client.insert(Words.CONTENT_URI,values);
        }
      }
 catch (      RemoteException e) {
      }
    }
  }
.start();
  setRequiresReload(false);
}","/** 
 * Adds a word to the dictionary and makes it persistent.
 * @param word the word to add. If the word is capitalized, then the dictionary willrecognize it as a capitalized word when searched.
 * @param frequency the frequency of occurrence of the word. A frequency of 255 is consideredthe highest.
 * @TODO use a higher or float range for frequency
 */
@Override public synchronized void addWord(final String word,final int frequency){
  if (getRequiresReload())   loadDictionaryAsync();
  if (word.length() >= getMaxWordLength())   return;
  super.addWord(word,frequency);
  final ContentValues values=new ContentValues(5);
  values.put(Words.WORD,word);
  values.put(Words.FREQUENCY,frequency);
  values.put(Words.LOCALE,mLocale);
  values.put(Words.APP_ID,0);
  final ContentResolver contentResolver=getContext().getContentResolver();
  final ContentProviderClient client=contentResolver.acquireContentProviderClient(Words.CONTENT_URI);
  if (null == client)   return;
  new Thread(""String_Node_Str""){
    @Override public void run(){
      Cursor cursor=null;
      try {
        cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
        if (cursor != null && cursor.moveToFirst()) {
          final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
          if (locale != null && locale.equals(mLocale.toString())) {
            final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
            final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
            client.update(uri,values,null,null);
          }
        }
 else {
          client.insert(Words.CONTENT_URI,values);
        }
      }
 catch (      RemoteException e) {
      }
 finally {
        if (null != cursor)         cursor.close();
        client.release();
      }
    }
  }
.start();
  setRequiresReload(false);
}",0.9631436314363144
88107,"@Override public void run(){
  try {
    final Cursor cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
    if (cursor != null && cursor.moveToFirst()) {
      final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
      if (locale != null && locale.equals(mLocale.toString())) {
        final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
        final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
        client.update(uri,values,null,null);
      }
    }
 else {
      client.insert(Words.CONTENT_URI,values);
    }
  }
 catch (  RemoteException e) {
  }
}","@Override public void run(){
  Cursor cursor=null;
  try {
    cursor=client.query(Words.CONTENT_URI,PROJECTION_ADD,""String_Node_Str"",new String[]{word,mLocale},null);
    if (cursor != null && cursor.moveToFirst()) {
      final String locale=cursor.getString(cursor.getColumnIndex(Words.LOCALE));
      if (locale != null && locale.equals(mLocale.toString())) {
        final long id=cursor.getLong(cursor.getColumnIndex(Words._ID));
        final Uri uri=Uri.withAppendedPath(Words.CONTENT_URI,Long.toString(id));
        client.update(uri,values,null,null);
      }
    }
 else {
      client.insert(Words.CONTENT_URI,values);
    }
  }
 catch (  RemoteException e) {
  }
 finally {
    if (null != cursor)     cursor.close();
    client.release();
  }
}",0.9186535764375876
88108,"/** 
 * Gets a list of suggestions for a specific string. This returns a list of possible corrections for the text passed as an argument. It may split or group words, and even perform grammatical analysis.
 */
@Override public SuggestionsInfo onGetSuggestions(final TextInfo textInfo,final int suggestionsLimit){
  try {
    final String text=textInfo.getText();
    if (shouldFilterOut(text)) {
      DictAndProximity dictInfo=null;
      try {
        dictInfo=mDictionaryPool.takeOrGetNull();
        if (null == dictInfo)         return NOT_IN_DICT_EMPTY_SUGGESTIONS;
        return dictInfo.mDictionary.isValidWord(text) ? IN_DICT_EMPTY_SUGGESTIONS : NOT_IN_DICT_EMPTY_SUGGESTIONS;
      }
  finally {
        if (null != dictInfo) {
          if (!mDictionaryPool.offer(dictInfo)) {
            Log.e(TAG,""String_Node_Str"");
          }
        }
      }
    }
    final SuggestionsGatherer suggestionsGatherer=new SuggestionsGatherer(text,mService.mSuggestionThreshold,mService.mLikelyThreshold,suggestionsLimit);
    final WordComposer composer=new WordComposer();
    final int length=text.length();
    for (int i=0; i < length; ++i) {
      final int character=text.codePointAt(i);
      final int proximityIndex=SpellCheckerProximityInfo.getIndexOf(character);
      final int[] proximities;
      if (-1 == proximityIndex) {
        proximities=new int[]{character};
      }
 else {
        proximities=Arrays.copyOfRange(SpellCheckerProximityInfo.PROXIMITY,proximityIndex,proximityIndex + SpellCheckerProximityInfo.ROW_SIZE);
      }
      composer.add(character,proximities,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
    }
    final int capitalizeType=getCapitalizationType(text);
    boolean isInDict=true;
    DictAndProximity dictInfo=null;
    try {
      dictInfo=mDictionaryPool.takeOrGetNull();
      if (null == dictInfo)       return NOT_IN_DICT_EMPTY_SUGGESTIONS;
      dictInfo.mDictionary.getWords(composer,suggestionsGatherer,dictInfo.mProximityInfo);
      isInDict=dictInfo.mDictionary.isValidWord(text);
      if (!isInDict && CAPITALIZE_NONE != capitalizeType) {
        isInDict=dictInfo.mDictionary.isValidWord(text.toLowerCase(mLocale));
      }
    }
  finally {
      if (null != dictInfo) {
        if (!mDictionaryPool.offer(dictInfo)) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    final SuggestionsGatherer.Result result=suggestionsGatherer.getResults(capitalizeType,mLocale);
    if (DBG) {
      Log.i(TAG,""String_Node_Str"" + text + ""String_Node_Str""+ suggestionsLimit);
      Log.i(TAG,""String_Node_Str"" + isInDict);
      Log.i(TAG,""String_Node_Str"" + (!isInDict));
      Log.i(TAG,""String_Node_Str"" + result.mHasLikelySuggestions);
      if (null != result.mSuggestions) {
        for (        String suggestion : result.mSuggestions) {
          Log.i(TAG,suggestion);
        }
      }
    }
    final int flags=(isInDict ? SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY : SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO);
    return new SuggestionsInfo(flags,result.mSuggestions);
  }
 catch (  RuntimeException e) {
    if (DBG) {
      throw e;
    }
 else {
      Log.e(TAG,""String_Node_Str"" + e);
      return NOT_IN_DICT_EMPTY_SUGGESTIONS;
    }
  }
}","/** 
 * Gets a list of suggestions for a specific string. This returns a list of possible corrections for the text passed as an argument. It may split or group words, and even perform grammatical analysis.
 */
@Override public SuggestionsInfo onGetSuggestions(final TextInfo textInfo,final int suggestionsLimit){
  try {
    final String text=textInfo.getText();
    if (shouldFilterOut(text)) {
      DictAndProximity dictInfo=null;
      try {
        dictInfo=mDictionaryPool.takeOrGetNull();
        if (null == dictInfo)         return getNotInDictEmptySuggestions();
        return dictInfo.mDictionary.isValidWord(text) ? getInDictEmptySuggestions() : getNotInDictEmptySuggestions();
      }
  finally {
        if (null != dictInfo) {
          if (!mDictionaryPool.offer(dictInfo)) {
            Log.e(TAG,""String_Node_Str"");
          }
        }
      }
    }
    final SuggestionsGatherer suggestionsGatherer=new SuggestionsGatherer(text,mService.mSuggestionThreshold,mService.mLikelyThreshold,suggestionsLimit);
    final WordComposer composer=new WordComposer();
    final int length=text.length();
    for (int i=0; i < length; ++i) {
      final int character=text.codePointAt(i);
      final int proximityIndex=SpellCheckerProximityInfo.getIndexOf(character);
      final int[] proximities;
      if (-1 == proximityIndex) {
        proximities=new int[]{character};
      }
 else {
        proximities=Arrays.copyOfRange(SpellCheckerProximityInfo.PROXIMITY,proximityIndex,proximityIndex + SpellCheckerProximityInfo.ROW_SIZE);
      }
      composer.add(character,proximities,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
    }
    final int capitalizeType=getCapitalizationType(text);
    boolean isInDict=true;
    DictAndProximity dictInfo=null;
    try {
      dictInfo=mDictionaryPool.takeOrGetNull();
      if (null == dictInfo)       return getNotInDictEmptySuggestions();
      dictInfo.mDictionary.getWords(composer,suggestionsGatherer,dictInfo.mProximityInfo);
      isInDict=dictInfo.mDictionary.isValidWord(text);
      if (!isInDict && CAPITALIZE_NONE != capitalizeType) {
        isInDict=dictInfo.mDictionary.isValidWord(text.toLowerCase(mLocale));
      }
    }
  finally {
      if (null != dictInfo) {
        if (!mDictionaryPool.offer(dictInfo)) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    final SuggestionsGatherer.Result result=suggestionsGatherer.getResults(capitalizeType,mLocale);
    if (DBG) {
      Log.i(TAG,""String_Node_Str"" + text + ""String_Node_Str""+ suggestionsLimit);
      Log.i(TAG,""String_Node_Str"" + isInDict);
      Log.i(TAG,""String_Node_Str"" + (!isInDict));
      Log.i(TAG,""String_Node_Str"" + result.mHasLikelySuggestions);
      if (null != result.mSuggestions) {
        for (        String suggestion : result.mSuggestions) {
          Log.i(TAG,suggestion);
        }
      }
    }
    final int flags=(isInDict ? SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY : SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO);
    return new SuggestionsInfo(flags,result.mSuggestions);
  }
 catch (  RuntimeException e) {
    if (DBG) {
      throw e;
    }
 else {
      Log.e(TAG,""String_Node_Str"" + e);
      return getNotInDictEmptySuggestions();
    }
  }
}",0.9399075500770416
88109,"/** 
 * Gets a list of suggestions for a specific string. This returns a list of possible corrections for the text passed as an argument. It may split or group words, and even perform grammatical analysis.
 */
@Override public SuggestionsInfo onGetSuggestions(final TextInfo textInfo,final int suggestionsLimit){
  try {
    final String text=textInfo.getText();
    if (shouldFilterOut(text)) {
      DictAndProximity dictInfo=null;
      try {
        dictInfo=mDictionaryPool.takeOrGetNull();
        if (null == dictInfo)         return NOT_IN_DICT_EMPTY_SUGGESTIONS;
        return dictInfo.mDictionary.isValidWord(text) ? IN_DICT_EMPTY_SUGGESTIONS : NOT_IN_DICT_EMPTY_SUGGESTIONS;
      }
  finally {
        if (null != dictInfo) {
          if (!mDictionaryPool.offer(dictInfo)) {
            Log.e(TAG,""String_Node_Str"");
          }
        }
      }
    }
    final SuggestionsGatherer suggestionsGatherer=new SuggestionsGatherer(text,mService.mSuggestionThreshold,mService.mLikelyThreshold,suggestionsLimit);
    final WordComposer composer=new WordComposer();
    final int length=text.length();
    for (int i=0; i < length; ++i) {
      final int character=text.codePointAt(i);
      final int proximityIndex=SpellCheckerProximityInfo.getIndexOf(character);
      final int[] proximities;
      if (-1 == proximityIndex) {
        proximities=new int[]{character};
      }
 else {
        proximities=Arrays.copyOfRange(SpellCheckerProximityInfo.PROXIMITY,proximityIndex,proximityIndex + SpellCheckerProximityInfo.ROW_SIZE);
      }
      composer.add(character,proximities,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
    }
    final int capitalizeType=getCapitalizationType(text);
    boolean isInDict=true;
    DictAndProximity dictInfo=null;
    try {
      dictInfo=mDictionaryPool.takeOrGetNull();
      if (null == dictInfo)       return NOT_IN_DICT_EMPTY_SUGGESTIONS;
      dictInfo.mDictionary.getWords(composer,suggestionsGatherer,dictInfo.mProximityInfo);
      isInDict=dictInfo.mDictionary.isValidWord(text);
      if (!isInDict && CAPITALIZE_NONE != capitalizeType) {
        isInDict=dictInfo.mDictionary.isValidWord(text.toLowerCase(mLocale));
      }
    }
  finally {
      if (null != dictInfo) {
        if (!mDictionaryPool.offer(dictInfo)) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    final SuggestionsGatherer.Result result=suggestionsGatherer.getResults(capitalizeType,mLocale);
    if (DBG) {
      Log.i(TAG,""String_Node_Str"" + text + ""String_Node_Str""+ suggestionsLimit);
      Log.i(TAG,""String_Node_Str"" + isInDict);
      Log.i(TAG,""String_Node_Str"" + (!isInDict));
      Log.i(TAG,""String_Node_Str"" + result.mHasLikelySuggestions);
      if (null != result.mSuggestions) {
        for (        String suggestion : result.mSuggestions) {
          Log.i(TAG,suggestion);
        }
      }
    }
    final int flags=(isInDict ? SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY : SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO);
    return new SuggestionsInfo(flags,result.mSuggestions);
  }
 catch (  RuntimeException e) {
    if (DBG) {
      throw e;
    }
 else {
      Log.e(TAG,""String_Node_Str"" + e);
      return NOT_IN_DICT_EMPTY_SUGGESTIONS;
    }
  }
}","/** 
 * Gets a list of suggestions for a specific string. This returns a list of possible corrections for the text passed as an argument. It may split or group words, and even perform grammatical analysis.
 */
@Override public SuggestionsInfo onGetSuggestions(final TextInfo textInfo,final int suggestionsLimit){
  try {
    final String text=textInfo.getText();
    if (shouldFilterOut(text)) {
      DictAndProximity dictInfo=null;
      try {
        dictInfo=mDictionaryPool.takeOrGetNull();
        if (null == dictInfo)         return getNotInDictEmptySuggestions();
        return dictInfo.mDictionary.isValidWord(text) ? getInDictEmptySuggestions() : getNotInDictEmptySuggestions();
      }
  finally {
        if (null != dictInfo) {
          if (!mDictionaryPool.offer(dictInfo)) {
            Log.e(TAG,""String_Node_Str"");
          }
        }
      }
    }
    final SuggestionsGatherer suggestionsGatherer=new SuggestionsGatherer(text,mService.mSuggestionThreshold,mService.mLikelyThreshold,suggestionsLimit);
    final WordComposer composer=new WordComposer();
    final int length=text.length();
    for (int i=0; i < length; ++i) {
      final int character=text.codePointAt(i);
      final int proximityIndex=SpellCheckerProximityInfo.getIndexOf(character);
      final int[] proximities;
      if (-1 == proximityIndex) {
        proximities=new int[]{character};
      }
 else {
        proximities=Arrays.copyOfRange(SpellCheckerProximityInfo.PROXIMITY,proximityIndex,proximityIndex + SpellCheckerProximityInfo.ROW_SIZE);
      }
      composer.add(character,proximities,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
    }
    final int capitalizeType=getCapitalizationType(text);
    boolean isInDict=true;
    DictAndProximity dictInfo=null;
    try {
      dictInfo=mDictionaryPool.takeOrGetNull();
      if (null == dictInfo)       return getNotInDictEmptySuggestions();
      dictInfo.mDictionary.getWords(composer,suggestionsGatherer,dictInfo.mProximityInfo);
      isInDict=dictInfo.mDictionary.isValidWord(text);
      if (!isInDict && CAPITALIZE_NONE != capitalizeType) {
        isInDict=dictInfo.mDictionary.isValidWord(text.toLowerCase(mLocale));
      }
    }
  finally {
      if (null != dictInfo) {
        if (!mDictionaryPool.offer(dictInfo)) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    final SuggestionsGatherer.Result result=suggestionsGatherer.getResults(capitalizeType,mLocale);
    if (DBG) {
      Log.i(TAG,""String_Node_Str"" + text + ""String_Node_Str""+ suggestionsLimit);
      Log.i(TAG,""String_Node_Str"" + isInDict);
      Log.i(TAG,""String_Node_Str"" + (!isInDict));
      Log.i(TAG,""String_Node_Str"" + result.mHasLikelySuggestions);
      if (null != result.mSuggestions) {
        for (        String suggestion : result.mSuggestions) {
          Log.i(TAG,suggestion);
        }
      }
    }
    final int flags=(isInDict ? SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY : SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO);
    return new SuggestionsInfo(flags,result.mSuggestions);
  }
 catch (  RuntimeException e) {
    if (DBG) {
      throw e;
    }
 else {
      Log.e(TAG,""String_Node_Str"" + e);
      return getNotInDictEmptySuggestions();
    }
  }
}",0.9399075500770416
88110,"/** 
 * Gets a list of suggestions for a specific string. This returns a list of possible corrections for the text passed as an argument. It may split or group words, and even perform grammatical analysis.
 */
@Override public SuggestionsInfo onGetSuggestions(final TextInfo textInfo,final int suggestionsLimit){
  try {
    final String text=textInfo.getText();
    if (shouldFilterOut(text)) {
      DictAndProximity dictInfo=null;
      try {
        dictInfo=mDictionaryPool.takeOrGetNull();
        if (null == dictInfo)         return NOT_IN_DICT_EMPTY_SUGGESTIONS;
        return dictInfo.mDictionary.isValidWord(text) ? IN_DICT_EMPTY_SUGGESTIONS : NOT_IN_DICT_EMPTY_SUGGESTIONS;
      }
  finally {
        if (null != dictInfo) {
          if (!mDictionaryPool.offer(dictInfo)) {
            Log.e(TAG,""String_Node_Str"");
          }
        }
      }
    }
    final SuggestionsGatherer suggestionsGatherer=new SuggestionsGatherer(text,mService.mSuggestionThreshold,mService.mLikelyThreshold,suggestionsLimit);
    final WordComposer composer=new WordComposer();
    final int length=text.length();
    for (int i=0; i < length; ++i) {
      final int character=text.codePointAt(i);
      final int proximityIndex=SpellCheckerProximityInfo.getIndexOf(character);
      final int[] proximities;
      if (-1 == proximityIndex) {
        proximities=new int[]{character};
      }
 else {
        proximities=Arrays.copyOfRange(SpellCheckerProximityInfo.PROXIMITY,proximityIndex,proximityIndex + SpellCheckerProximityInfo.ROW_SIZE);
      }
      composer.add(character,proximities,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
    }
    final int capitalizeType=getCapitalizationType(text);
    boolean isInDict=true;
    DictAndProximity dictInfo=null;
    try {
      dictInfo=mDictionaryPool.takeOrGetNull();
      if (null == dictInfo)       return NOT_IN_DICT_EMPTY_SUGGESTIONS;
      dictInfo.mDictionary.getWords(composer,suggestionsGatherer,dictInfo.mProximityInfo);
      isInDict=dictInfo.mDictionary.isValidWord(text);
      if (!isInDict && CAPITALIZE_NONE != capitalizeType) {
        isInDict=dictInfo.mDictionary.isValidWord(text.toLowerCase(mLocale));
      }
    }
  finally {
      if (null != dictInfo) {
        if (!mDictionaryPool.offer(dictInfo)) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    final SuggestionsGatherer.Result result=suggestionsGatherer.getResults(capitalizeType,mLocale);
    if (DBG) {
      Log.i(TAG,""String_Node_Str"" + text + ""String_Node_Str""+ suggestionsLimit);
      Log.i(TAG,""String_Node_Str"" + isInDict);
      Log.i(TAG,""String_Node_Str"" + (!isInDict));
      Log.i(TAG,""String_Node_Str"" + result.mHasLikelySuggestions);
      if (null != result.mSuggestions) {
        for (        String suggestion : result.mSuggestions) {
          Log.i(TAG,suggestion);
        }
      }
    }
    final int flags=(isInDict ? SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY : SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO);
    return new SuggestionsInfo(flags,result.mSuggestions);
  }
 catch (  RuntimeException e) {
    if (DBG) {
      throw e;
    }
 else {
      Log.e(TAG,""String_Node_Str"" + e);
      return NOT_IN_DICT_EMPTY_SUGGESTIONS;
    }
  }
}","/** 
 * Gets a list of suggestions for a specific string. This returns a list of possible corrections for the text passed as an argument. It may split or group words, and even perform grammatical analysis.
 */
@Override public SuggestionsInfo onGetSuggestions(final TextInfo textInfo,final int suggestionsLimit){
  try {
    final String text=textInfo.getText();
    if (shouldFilterOut(text)) {
      DictAndProximity dictInfo=null;
      try {
        dictInfo=mDictionaryPool.takeOrGetNull();
        if (null == dictInfo)         return getNotInDictEmptySuggestions();
        return dictInfo.mDictionary.isValidWord(text) ? getInDictEmptySuggestions() : getNotInDictEmptySuggestions();
      }
  finally {
        if (null != dictInfo) {
          if (!mDictionaryPool.offer(dictInfo)) {
            Log.e(TAG,""String_Node_Str"");
          }
        }
      }
    }
    final SuggestionsGatherer suggestionsGatherer=new SuggestionsGatherer(text,mService.mSuggestionThreshold,mService.mLikelyThreshold,suggestionsLimit);
    final WordComposer composer=new WordComposer();
    final int length=text.length();
    for (int i=0; i < length; ++i) {
      final int character=text.codePointAt(i);
      final int proximityIndex=SpellCheckerProximityInfo.getIndexOf(character);
      final int[] proximities;
      if (-1 == proximityIndex) {
        proximities=new int[]{character};
      }
 else {
        proximities=Arrays.copyOfRange(SpellCheckerProximityInfo.PROXIMITY,proximityIndex,proximityIndex + SpellCheckerProximityInfo.ROW_SIZE);
      }
      composer.add(character,proximities,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
    }
    final int capitalizeType=getCapitalizationType(text);
    boolean isInDict=true;
    DictAndProximity dictInfo=null;
    try {
      dictInfo=mDictionaryPool.takeOrGetNull();
      if (null == dictInfo)       return getNotInDictEmptySuggestions();
      dictInfo.mDictionary.getWords(composer,suggestionsGatherer,dictInfo.mProximityInfo);
      isInDict=dictInfo.mDictionary.isValidWord(text);
      if (!isInDict && CAPITALIZE_NONE != capitalizeType) {
        isInDict=dictInfo.mDictionary.isValidWord(text.toLowerCase(mLocale));
      }
    }
  finally {
      if (null != dictInfo) {
        if (!mDictionaryPool.offer(dictInfo)) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    final SuggestionsGatherer.Result result=suggestionsGatherer.getResults(capitalizeType,mLocale);
    if (DBG) {
      Log.i(TAG,""String_Node_Str"" + text + ""String_Node_Str""+ suggestionsLimit);
      Log.i(TAG,""String_Node_Str"" + isInDict);
      Log.i(TAG,""String_Node_Str"" + (!isInDict));
      Log.i(TAG,""String_Node_Str"" + result.mHasLikelySuggestions);
      if (null != result.mSuggestions) {
        for (        String suggestion : result.mSuggestions) {
          Log.i(TAG,suggestion);
        }
      }
    }
    final int flags=(isInDict ? SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY : SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO);
    return new SuggestionsInfo(flags,result.mSuggestions);
  }
 catch (  RuntimeException e) {
    if (DBG) {
      throw e;
    }
 else {
      Log.e(TAG,""String_Node_Str"" + e);
      return getNotInDictEmptySuggestions();
    }
  }
}",0.9399075500770416
88111,"private void maybeRemovePreviousPeriod(final InputConnection ic,CharSequence text){
  CharSequence lastOne=ic.getTextBeforeCursor(1,0);
  if (lastOne != null && lastOne.length() == 1 && lastOne.charAt(0) == Keyboard.CODE_PERIOD && text.charAt(0) == Keyboard.CODE_PERIOD) {
    ic.deleteSurroundingText(1,0);
  }
}","private void maybeRemovePreviousPeriod(final InputConnection ic,CharSequence text){
  final CharSequence lastOne=ic.getTextBeforeCursor(1,0);
  if (lastOne != null && lastOne.length() == 1 && lastOne.charAt(0) == Keyboard.CODE_PERIOD && text.charAt(0) == Keyboard.CODE_PERIOD) {
    ic.deleteSurroundingText(1,0);
  }
}",0.990506329113924
88112,"private void handleSeparator(int primaryCode,int x,int y){
  mVoiceProxy.handleSeparator();
  mComposingStateManager.onFinishComposingText();
  if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
    mHandler.cancelUpdateBigramPredictions();
    mHandler.postUpdateSuggestions();
  }
  boolean pickedDefault=false;
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mHasUncommittedTypedChars) {
    final boolean shouldAutoCorrect=mSettingsValues.mAutoCorrectEnabled && !mInputTypeNoAutoCorrect;
    if (shouldAutoCorrect && primaryCode != Keyboard.CODE_SINGLE_QUOTE) {
      pickedDefault=pickDefaultSuggestion(primaryCode);
    }
 else {
      commitTyped(ic);
    }
  }
  if (mJustAddedMagicSpace) {
    if (mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
      sendKeyChar((char)primaryCode);
      swapSwapperAndSpace();
    }
 else {
      if (mSettingsValues.isMagicSpaceStripper(primaryCode))       removeTrailingSpace();
      sendKeyChar((char)primaryCode);
      mJustAddedMagicSpace=false;
    }
  }
 else {
    sendKeyChar((char)primaryCode);
  }
  if (isSuggestionsRequested() && primaryCode == Keyboard.CODE_SPACE) {
    maybeDoubleSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true,x,y);
  if (pickedDefault) {
    CharSequence typedWord=mWordComposer.getTypedWord();
    TextEntryState.backToAcceptedDefault(typedWord);
    if (!TextUtils.isEmpty(typedWord) && !typedWord.equals(mBestWord)) {
      InputConnectionCompatUtils.commitCorrection(ic,mLastSelectionEnd - typedWord.length(),typedWord,mBestWord);
    }
  }
  if (Keyboard.CODE_SPACE == primaryCode) {
    if (!isCursorTouchingWord()) {
      mHandler.cancelUpdateSuggestions();
      mHandler.postUpdateBigramPredictions();
    }
  }
 else {
    setPunctuationSuggestions();
  }
  mKeyboardSwitcher.updateShiftState();
  if (ic != null) {
    ic.endBatchEdit();
  }
}","private void handleSeparator(int primaryCode,int x,int y){
  mVoiceProxy.handleSeparator();
  mComposingStateManager.onFinishComposingText();
  if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
    mHandler.cancelUpdateBigramPredictions();
    mHandler.postUpdateSuggestions();
  }
  boolean pickedDefault=false;
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mHasUncommittedTypedChars) {
    final boolean shouldAutoCorrect=mSettingsValues.mAutoCorrectEnabled && !mInputTypeNoAutoCorrect;
    if (shouldAutoCorrect && primaryCode != Keyboard.CODE_SINGLE_QUOTE) {
      pickedDefault=pickDefaultSuggestion(primaryCode);
    }
 else {
      commitTyped(ic);
    }
  }
  if (mJustAddedMagicSpace) {
    if (mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
      sendKeyChar((char)primaryCode);
      swapSwapperAndSpaceWhileInBatchEdit(ic);
    }
 else {
      if (mSettingsValues.isMagicSpaceStripper(primaryCode)) {
        removeTrailingSpaceWhileInBatchEdit(ic);
      }
      sendKeyChar((char)primaryCode);
      mJustAddedMagicSpace=false;
    }
  }
 else {
    sendKeyChar((char)primaryCode);
  }
  if (isSuggestionsRequested() && primaryCode == Keyboard.CODE_SPACE) {
    maybeDoubleSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true,x,y);
  if (pickedDefault) {
    CharSequence typedWord=mWordComposer.getTypedWord();
    TextEntryState.backToAcceptedDefault(typedWord);
    if (!TextUtils.isEmpty(typedWord) && !typedWord.equals(mBestWord)) {
      InputConnectionCompatUtils.commitCorrection(ic,mLastSelectionEnd - typedWord.length(),typedWord,mBestWord);
    }
  }
  if (Keyboard.CODE_SPACE == primaryCode) {
    if (!isCursorTouchingWord()) {
      mHandler.cancelUpdateSuggestions();
      mHandler.postUpdateBigramPredictions();
    }
  }
 else {
    setPunctuationSuggestions();
  }
  mKeyboardSwitcher.updateShiftState();
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9858442871587462
88113,"private void handleCharacter(int primaryCode,int[] keyCodes,int x,int y){
  mVoiceProxy.handleCharacter();
  if (mJustAddedMagicSpace && mSettingsValues.isMagicSpaceStripper(primaryCode)) {
    removeTrailingSpace();
  }
  int code=primaryCode;
  if ((isAlphabet(code) || mSettingsValues.isSymbolExcludedFromWordSeparators(code)) && isSuggestionsRequested() && !isCursorTouchingWord()) {
    if (!mHasUncommittedTypedChars) {
      mHasUncommittedTypedChars=true;
      mComposingStringBuilder.setLength(0);
      mWordComposer.reset();
      clearSuggestions();
      mComposingStateManager.onFinishComposingText();
    }
  }
  final KeyboardSwitcher switcher=mKeyboardSwitcher;
  if (switcher.isShiftedOrShiftLocked()) {
    if (keyCodes == null || keyCodes[0] < Character.MIN_CODE_POINT || keyCodes[0] > Character.MAX_CODE_POINT) {
      return;
    }
    code=keyCodes[0];
    if (switcher.isAlphabetMode() && Character.isLowerCase(code)) {
      final String upperCaseString=new String(new int[]{code},0,1).toUpperCase(mSubtypeSwitcher.getInputLocale());
      if (upperCaseString.codePointCount(0,upperCaseString.length()) == 1) {
        code=upperCaseString.codePointAt(0);
      }
 else {
        onTextInput(upperCaseString);
        return;
      }
    }
  }
  if (mHasUncommittedTypedChars) {
    mComposingStringBuilder.append((char)code);
    mWordComposer.add(code,keyCodes,x,y);
    final InputConnection ic=getCurrentInputConnection();
    if (ic != null) {
      if (mWordComposer.size() == 1) {
        mWordComposer.setAutoCapitalized(getCurrentAutoCapsState());
        mComposingStateManager.onStartComposingText();
      }
      final CharSequence textWithUnderline=mComposingStateManager.isAutoCorrectionIndicatorOn() ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mComposingStringBuilder) : mComposingStringBuilder;
      ic.setComposingText(textWithUnderline,1);
    }
    mHandler.postUpdateSuggestions();
  }
 else {
    sendKeyChar((char)code);
  }
  if (mJustAddedMagicSpace && mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
    swapSwapperAndSpace();
  }
 else {
    mJustAddedMagicSpace=false;
  }
  switcher.updateShiftState();
  if (LatinIME.PERF_DEBUG)   measureCps();
  TextEntryState.typedCharacter((char)code,mSettingsValues.isWordSeparator(code),x,y);
}","private void handleCharacter(int primaryCode,int[] keyCodes,int x,int y){
  mVoiceProxy.handleCharacter();
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null)   ic.beginBatchEdit();
  if (mJustAddedMagicSpace && mSettingsValues.isMagicSpaceStripper(primaryCode)) {
    removeTrailingSpaceWhileInBatchEdit(ic);
  }
  int code=primaryCode;
  if ((isAlphabet(code) || mSettingsValues.isSymbolExcludedFromWordSeparators(code)) && isSuggestionsRequested() && !isCursorTouchingWord()) {
    if (!mHasUncommittedTypedChars) {
      mHasUncommittedTypedChars=true;
      mComposingStringBuilder.setLength(0);
      mWordComposer.reset();
      clearSuggestions();
      mComposingStateManager.onFinishComposingText();
    }
  }
  final KeyboardSwitcher switcher=mKeyboardSwitcher;
  if (switcher.isShiftedOrShiftLocked()) {
    if (keyCodes == null || keyCodes[0] < Character.MIN_CODE_POINT || keyCodes[0] > Character.MAX_CODE_POINT) {
      if (null != ic)       ic.endBatchEdit();
      return;
    }
    code=keyCodes[0];
    if (switcher.isAlphabetMode() && Character.isLowerCase(code)) {
      final String upperCaseString=new String(new int[]{code},0,1).toUpperCase(mSubtypeSwitcher.getInputLocale());
      if (upperCaseString.codePointCount(0,upperCaseString.length()) == 1) {
        code=upperCaseString.codePointAt(0);
      }
 else {
        onTextInput(upperCaseString);
        if (null != ic)         ic.endBatchEdit();
        return;
      }
    }
  }
  if (mHasUncommittedTypedChars) {
    mComposingStringBuilder.append((char)code);
    mWordComposer.add(code,keyCodes,x,y);
    if (ic != null) {
      if (mWordComposer.size() == 1) {
        mWordComposer.setAutoCapitalized(getCurrentAutoCapsState());
        mComposingStateManager.onStartComposingText();
      }
      final CharSequence textWithUnderline=mComposingStateManager.isAutoCorrectionIndicatorOn() ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mComposingStringBuilder) : mComposingStringBuilder;
      ic.setComposingText(textWithUnderline,1);
    }
    mHandler.postUpdateSuggestions();
  }
 else {
    sendKeyChar((char)code);
  }
  if (mJustAddedMagicSpace && mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
    if (null != ic)     swapSwapperAndSpaceWhileInBatchEdit(ic);
  }
 else {
    mJustAddedMagicSpace=false;
  }
  switcher.updateShiftState();
  if (LatinIME.PERF_DEBUG)   measureCps();
  TextEntryState.typedCharacter((char)code,mSettingsValues.isWordSeparator(code),x,y);
  if (null != ic)   ic.endBatchEdit();
}",0.9277800574476815
88114,"private void maybeRemovePreviousPeriod(final InputConnection ic,CharSequence text){
  CharSequence lastOne=ic.getTextBeforeCursor(1,0);
  if (lastOne != null && lastOne.length() == 1 && lastOne.charAt(0) == Keyboard.CODE_PERIOD && text.charAt(0) == Keyboard.CODE_PERIOD) {
    ic.deleteSurroundingText(1,0);
  }
}","private void maybeRemovePreviousPeriod(final InputConnection ic,CharSequence text){
  final CharSequence lastOne=ic.getTextBeforeCursor(1,0);
  if (lastOne != null && lastOne.length() == 1 && lastOne.charAt(0) == Keyboard.CODE_PERIOD && text.charAt(0) == Keyboard.CODE_PERIOD) {
    ic.deleteSurroundingText(1,0);
  }
}",0.990506329113924
88115,"private void handleSeparator(int primaryCode,int x,int y){
  mVoiceProxy.handleSeparator();
  mComposingStateManager.onFinishComposingText();
  if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
    mHandler.cancelUpdateBigramPredictions();
    mHandler.postUpdateSuggestions();
  }
  boolean pickedDefault=false;
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mHasUncommittedTypedChars) {
    final boolean shouldAutoCorrect=mSettingsValues.mAutoCorrectEnabled && !mInputTypeNoAutoCorrect;
    if (shouldAutoCorrect && primaryCode != Keyboard.CODE_SINGLE_QUOTE) {
      pickedDefault=pickDefaultSuggestion(primaryCode);
    }
 else {
      commitTyped(ic);
    }
  }
  if (mJustAddedMagicSpace) {
    if (mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
      sendKeyChar((char)primaryCode);
      swapSwapperAndSpace();
    }
 else {
      if (mSettingsValues.isMagicSpaceStripper(primaryCode))       removeTrailingSpace();
      sendKeyChar((char)primaryCode);
      mJustAddedMagicSpace=false;
    }
  }
 else {
    sendKeyChar((char)primaryCode);
  }
  if (isSuggestionsRequested() && primaryCode == Keyboard.CODE_SPACE) {
    maybeDoubleSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true,x,y);
  if (pickedDefault) {
    CharSequence typedWord=mWordComposer.getTypedWord();
    TextEntryState.backToAcceptedDefault(typedWord);
    if (!TextUtils.isEmpty(typedWord) && !typedWord.equals(mBestWord)) {
      InputConnectionCompatUtils.commitCorrection(ic,mLastSelectionEnd - typedWord.length(),typedWord,mBestWord);
    }
  }
  if (Keyboard.CODE_SPACE == primaryCode) {
    if (!isCursorTouchingWord()) {
      mHandler.cancelUpdateSuggestions();
      mHandler.postUpdateBigramPredictions();
    }
  }
 else {
    setPunctuationSuggestions();
  }
  mKeyboardSwitcher.updateShiftState();
  if (ic != null) {
    ic.endBatchEdit();
  }
}","private void handleSeparator(int primaryCode,int x,int y){
  mVoiceProxy.handleSeparator();
  mComposingStateManager.onFinishComposingText();
  if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
    mHandler.cancelUpdateBigramPredictions();
    mHandler.postUpdateSuggestions();
  }
  boolean pickedDefault=false;
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mHasUncommittedTypedChars) {
    final boolean shouldAutoCorrect=mSettingsValues.mAutoCorrectEnabled && !mInputTypeNoAutoCorrect;
    if (shouldAutoCorrect && primaryCode != Keyboard.CODE_SINGLE_QUOTE) {
      pickedDefault=pickDefaultSuggestion(primaryCode);
    }
 else {
      commitTyped(ic);
    }
  }
  if (mJustAddedMagicSpace) {
    if (mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
      sendKeyChar((char)primaryCode);
      swapSwapperAndSpaceWhileInBatchEdit(ic);
    }
 else {
      if (mSettingsValues.isMagicSpaceStripper(primaryCode)) {
        removeTrailingSpaceWhileInBatchEdit(ic);
      }
      sendKeyChar((char)primaryCode);
      mJustAddedMagicSpace=false;
    }
  }
 else {
    sendKeyChar((char)primaryCode);
  }
  if (isSuggestionsRequested() && primaryCode == Keyboard.CODE_SPACE) {
    maybeDoubleSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true,x,y);
  if (pickedDefault) {
    CharSequence typedWord=mWordComposer.getTypedWord();
    TextEntryState.backToAcceptedDefault(typedWord);
    if (!TextUtils.isEmpty(typedWord) && !typedWord.equals(mBestWord)) {
      InputConnectionCompatUtils.commitCorrection(ic,mLastSelectionEnd - typedWord.length(),typedWord,mBestWord);
    }
  }
  if (Keyboard.CODE_SPACE == primaryCode) {
    if (!isCursorTouchingWord()) {
      mHandler.cancelUpdateSuggestions();
      mHandler.postUpdateBigramPredictions();
    }
  }
 else {
    setPunctuationSuggestions();
  }
  mKeyboardSwitcher.updateShiftState();
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9858442871587462
88116,"private void handleCharacter(int primaryCode,int[] keyCodes,int x,int y){
  mVoiceProxy.handleCharacter();
  if (mJustAddedMagicSpace && mSettingsValues.isMagicSpaceStripper(primaryCode)) {
    removeTrailingSpace();
  }
  int code=primaryCode;
  if ((isAlphabet(code) || mSettingsValues.isSymbolExcludedFromWordSeparators(code)) && isSuggestionsRequested() && !isCursorTouchingWord()) {
    if (!mHasUncommittedTypedChars) {
      mHasUncommittedTypedChars=true;
      mComposingStringBuilder.setLength(0);
      mWordComposer.reset();
      clearSuggestions();
      mComposingStateManager.onFinishComposingText();
    }
  }
  final KeyboardSwitcher switcher=mKeyboardSwitcher;
  if (switcher.isShiftedOrShiftLocked()) {
    if (keyCodes == null || keyCodes[0] < Character.MIN_CODE_POINT || keyCodes[0] > Character.MAX_CODE_POINT) {
      return;
    }
    code=keyCodes[0];
    if (switcher.isAlphabetMode() && Character.isLowerCase(code)) {
      final String upperCaseString=new String(new int[]{code},0,1).toUpperCase(mSubtypeSwitcher.getInputLocale());
      if (upperCaseString.codePointCount(0,upperCaseString.length()) == 1) {
        code=upperCaseString.codePointAt(0);
      }
 else {
        onTextInput(upperCaseString);
        return;
      }
    }
  }
  if (mHasUncommittedTypedChars) {
    mComposingStringBuilder.append((char)code);
    mWordComposer.add(code,keyCodes,x,y);
    final InputConnection ic=getCurrentInputConnection();
    if (ic != null) {
      if (mWordComposer.size() == 1) {
        mWordComposer.setAutoCapitalized(getCurrentAutoCapsState());
        mComposingStateManager.onStartComposingText();
      }
      final CharSequence textWithUnderline=mComposingStateManager.isAutoCorrectionIndicatorOn() ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mComposingStringBuilder) : mComposingStringBuilder;
      ic.setComposingText(textWithUnderline,1);
    }
    mHandler.postUpdateSuggestions();
  }
 else {
    sendKeyChar((char)code);
  }
  if (mJustAddedMagicSpace && mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
    swapSwapperAndSpace();
  }
 else {
    mJustAddedMagicSpace=false;
  }
  switcher.updateShiftState();
  if (LatinIME.PERF_DEBUG)   measureCps();
  TextEntryState.typedCharacter((char)code,mSettingsValues.isWordSeparator(code),x,y);
}","private void handleCharacter(int primaryCode,int[] keyCodes,int x,int y){
  mVoiceProxy.handleCharacter();
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null)   ic.beginBatchEdit();
  if (mJustAddedMagicSpace && mSettingsValues.isMagicSpaceStripper(primaryCode)) {
    removeTrailingSpaceWhileInBatchEdit(ic);
  }
  int code=primaryCode;
  if ((isAlphabet(code) || mSettingsValues.isSymbolExcludedFromWordSeparators(code)) && isSuggestionsRequested() && !isCursorTouchingWord()) {
    if (!mHasUncommittedTypedChars) {
      mHasUncommittedTypedChars=true;
      mComposingStringBuilder.setLength(0);
      mWordComposer.reset();
      clearSuggestions();
      mComposingStateManager.onFinishComposingText();
    }
  }
  final KeyboardSwitcher switcher=mKeyboardSwitcher;
  if (switcher.isShiftedOrShiftLocked()) {
    if (keyCodes == null || keyCodes[0] < Character.MIN_CODE_POINT || keyCodes[0] > Character.MAX_CODE_POINT) {
      if (null != ic)       ic.endBatchEdit();
      return;
    }
    code=keyCodes[0];
    if (switcher.isAlphabetMode() && Character.isLowerCase(code)) {
      final String upperCaseString=new String(new int[]{code},0,1).toUpperCase(mSubtypeSwitcher.getInputLocale());
      if (upperCaseString.codePointCount(0,upperCaseString.length()) == 1) {
        code=upperCaseString.codePointAt(0);
      }
 else {
        onTextInput(upperCaseString);
        if (null != ic)         ic.endBatchEdit();
        return;
      }
    }
  }
  if (mHasUncommittedTypedChars) {
    mComposingStringBuilder.append((char)code);
    mWordComposer.add(code,keyCodes,x,y);
    if (ic != null) {
      if (mWordComposer.size() == 1) {
        mWordComposer.setAutoCapitalized(getCurrentAutoCapsState());
        mComposingStateManager.onStartComposingText();
      }
      final CharSequence textWithUnderline=mComposingStateManager.isAutoCorrectionIndicatorOn() ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mComposingStringBuilder) : mComposingStringBuilder;
      ic.setComposingText(textWithUnderline,1);
    }
    mHandler.postUpdateSuggestions();
  }
 else {
    sendKeyChar((char)code);
  }
  if (mJustAddedMagicSpace && mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
    if (null != ic)     swapSwapperAndSpaceWhileInBatchEdit(ic);
  }
 else {
    mJustAddedMagicSpace=false;
  }
  switcher.updateShiftState();
  if (LatinIME.PERF_DEBUG)   measureCps();
  TextEntryState.typedCharacter((char)code,mSettingsValues.isWordSeparator(code),x,y);
  if (null != ic)   ic.endBatchEdit();
}",0.9277800574476815
88117,"/** 
 * Gets a list of suggestions for a specific string. This returns a list of possible corrections for the text passed as an argument. It may split or group words, and even perform grammatical analysis.
 */
@Override public SuggestionsInfo onGetSuggestions(final TextInfo textInfo,final int suggestionsLimit){
  try {
    final String text=textInfo.getText();
    if (shouldFilterOut(text)) {
      DictAndProximity dictInfo=null;
      try {
        dictInfo=mDictionaryPool.takeOrGetNull();
        if (null == dictInfo)         return NOT_IN_DICT_EMPTY_SUGGESTIONS;
        return dictInfo.mDictionary.isValidWord(text) ? IN_DICT_EMPTY_SUGGESTIONS : NOT_IN_DICT_EMPTY_SUGGESTIONS;
      }
  finally {
        if (null != dictInfo) {
          if (!mDictionaryPool.offer(dictInfo)) {
            Log.e(TAG,""String_Node_Str"");
          }
        }
      }
    }
    final SuggestionsGatherer suggestionsGatherer=new SuggestionsGatherer(text,mService.mSuggestionThreshold,mService.mLikelyThreshold,suggestionsLimit);
    final WordComposer composer=new WordComposer();
    final int length=text.length();
    for (int i=0; i < length; ++i) {
      final int character=text.codePointAt(i);
      final int proximityIndex=SpellCheckerProximityInfo.getIndexOf(character);
      final int[] proximities;
      if (-1 == proximityIndex) {
        proximities=new int[]{character};
      }
 else {
        proximities=Arrays.copyOfRange(SpellCheckerProximityInfo.PROXIMITY,proximityIndex,proximityIndex + SpellCheckerProximityInfo.ROW_SIZE);
      }
      composer.add(character,proximities,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
    }
    final int capitalizeType=getCapitalizationType(text);
    boolean isInDict=true;
    DictAndProximity dictInfo=null;
    try {
      dictInfo=mDictionaryPool.takeOrGetNull();
      if (null == dictInfo)       return NOT_IN_DICT_EMPTY_SUGGESTIONS;
      dictInfo.mDictionary.getWords(composer,suggestionsGatherer,dictInfo.mProximityInfo);
      isInDict=dictInfo.mDictionary.isValidWord(text);
      if (!isInDict && CAPITALIZE_NONE != capitalizeType) {
        isInDict=dictInfo.mDictionary.isValidWord(text.toLowerCase(mLocale));
      }
    }
  finally {
      if (null != dictInfo) {
        if (!mDictionaryPool.offer(dictInfo)) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    final SuggestionsGatherer.Result result=suggestionsGatherer.getResults(capitalizeType,mLocale);
    if (DBG) {
      Log.i(TAG,""String_Node_Str"" + text + ""String_Node_Str""+ suggestionsLimit);
      Log.i(TAG,""String_Node_Str"" + isInDict);
      Log.i(TAG,""String_Node_Str"" + (!isInDict));
      Log.i(TAG,""String_Node_Str"" + result.mHasLikelySuggestions);
      if (null != result.mSuggestions) {
        for (        String suggestion : result.mSuggestions) {
          Log.i(TAG,suggestion);
        }
      }
    }
    final int flags=(isInDict ? SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY : SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO);
    return new SuggestionsInfo(flags,result.mSuggestions);
  }
 catch (  RuntimeException e) {
    if (DBG) {
      throw e;
    }
 else {
      Log.e(TAG,""String_Node_Str"" + e);
      return NOT_IN_DICT_EMPTY_SUGGESTIONS;
    }
  }
}","/** 
 * Gets a list of suggestions for a specific string. This returns a list of possible corrections for the text passed as an argument. It may split or group words, and even perform grammatical analysis.
 */
@Override public SuggestionsInfo onGetSuggestions(final TextInfo textInfo,final int suggestionsLimit){
  try {
    final String text=textInfo.getText();
    if (shouldFilterOut(text)) {
      DictAndProximity dictInfo=null;
      try {
        dictInfo=mDictionaryPool.takeOrGetNull();
        if (null == dictInfo)         return getNotInDictEmptySuggestions();
        return dictInfo.mDictionary.isValidWord(text) ? getInDictEmptySuggestions() : getNotInDictEmptySuggestions();
      }
  finally {
        if (null != dictInfo) {
          if (!mDictionaryPool.offer(dictInfo)) {
            Log.e(TAG,""String_Node_Str"");
          }
        }
      }
    }
    final SuggestionsGatherer suggestionsGatherer=new SuggestionsGatherer(text,mService.mSuggestionThreshold,mService.mLikelyThreshold,suggestionsLimit);
    final WordComposer composer=new WordComposer();
    final int length=text.length();
    for (int i=0; i < length; ++i) {
      final int character=text.codePointAt(i);
      final int proximityIndex=SpellCheckerProximityInfo.getIndexOf(character);
      final int[] proximities;
      if (-1 == proximityIndex) {
        proximities=new int[]{character};
      }
 else {
        proximities=Arrays.copyOfRange(SpellCheckerProximityInfo.PROXIMITY,proximityIndex,proximityIndex + SpellCheckerProximityInfo.ROW_SIZE);
      }
      composer.add(character,proximities,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
    }
    final int capitalizeType=getCapitalizationType(text);
    boolean isInDict=true;
    DictAndProximity dictInfo=null;
    try {
      dictInfo=mDictionaryPool.takeOrGetNull();
      if (null == dictInfo)       return getNotInDictEmptySuggestions();
      dictInfo.mDictionary.getWords(composer,suggestionsGatherer,dictInfo.mProximityInfo);
      isInDict=dictInfo.mDictionary.isValidWord(text);
      if (!isInDict && CAPITALIZE_NONE != capitalizeType) {
        isInDict=dictInfo.mDictionary.isValidWord(text.toLowerCase(mLocale));
      }
    }
  finally {
      if (null != dictInfo) {
        if (!mDictionaryPool.offer(dictInfo)) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    final SuggestionsGatherer.Result result=suggestionsGatherer.getResults(capitalizeType,mLocale);
    if (DBG) {
      Log.i(TAG,""String_Node_Str"" + text + ""String_Node_Str""+ suggestionsLimit);
      Log.i(TAG,""String_Node_Str"" + isInDict);
      Log.i(TAG,""String_Node_Str"" + (!isInDict));
      Log.i(TAG,""String_Node_Str"" + result.mHasLikelySuggestions);
      if (null != result.mSuggestions) {
        for (        String suggestion : result.mSuggestions) {
          Log.i(TAG,suggestion);
        }
      }
    }
    final int flags=(isInDict ? SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY : SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO);
    return new SuggestionsInfo(flags,result.mSuggestions);
  }
 catch (  RuntimeException e) {
    if (DBG) {
      throw e;
    }
 else {
      Log.e(TAG,""String_Node_Str"" + e);
      return getNotInDictEmptySuggestions();
    }
  }
}",0.9399075500770416
88118,"private void maybeRemovePreviousPeriod(final InputConnection ic,CharSequence text){
  CharSequence lastOne=ic.getTextBeforeCursor(1,0);
  if (lastOne != null && lastOne.length() == 1 && lastOne.charAt(0) == Keyboard.CODE_PERIOD && text.charAt(0) == Keyboard.CODE_PERIOD) {
    ic.deleteSurroundingText(1,0);
  }
}","private void maybeRemovePreviousPeriod(final InputConnection ic,CharSequence text){
  final CharSequence lastOne=ic.getTextBeforeCursor(1,0);
  if (lastOne != null && lastOne.length() == 1 && lastOne.charAt(0) == Keyboard.CODE_PERIOD && text.charAt(0) == Keyboard.CODE_PERIOD) {
    ic.deleteSurroundingText(1,0);
  }
}",0.990506329113924
88119,"private void handleSeparator(int primaryCode,int x,int y){
  mVoiceProxy.handleSeparator();
  mComposingStateManager.onFinishComposingText();
  if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
    mHandler.cancelUpdateBigramPredictions();
    mHandler.postUpdateSuggestions();
  }
  boolean pickedDefault=false;
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mHasUncommittedTypedChars) {
    final boolean shouldAutoCorrect=mSettingsValues.mAutoCorrectEnabled && !mInputTypeNoAutoCorrect;
    if (shouldAutoCorrect && primaryCode != Keyboard.CODE_SINGLE_QUOTE) {
      pickedDefault=pickDefaultSuggestion(primaryCode);
    }
 else {
      commitTyped(ic);
    }
  }
  if (mJustAddedMagicSpace) {
    if (mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
      sendKeyChar((char)primaryCode);
      swapSwapperAndSpace();
    }
 else {
      if (mSettingsValues.isMagicSpaceStripper(primaryCode))       removeTrailingSpace();
      sendKeyChar((char)primaryCode);
      mJustAddedMagicSpace=false;
    }
  }
 else {
    sendKeyChar((char)primaryCode);
  }
  if (isSuggestionsRequested() && primaryCode == Keyboard.CODE_SPACE) {
    maybeDoubleSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true,x,y);
  if (pickedDefault) {
    CharSequence typedWord=mWordComposer.getTypedWord();
    TextEntryState.backToAcceptedDefault(typedWord);
    if (!TextUtils.isEmpty(typedWord) && !typedWord.equals(mBestWord)) {
      InputConnectionCompatUtils.commitCorrection(ic,mLastSelectionEnd - typedWord.length(),typedWord,mBestWord);
    }
  }
  if (Keyboard.CODE_SPACE == primaryCode) {
    if (!isCursorTouchingWord()) {
      mHandler.cancelUpdateSuggestions();
      mHandler.postUpdateBigramPredictions();
    }
  }
 else {
    setPunctuationSuggestions();
  }
  mKeyboardSwitcher.updateShiftState();
  if (ic != null) {
    ic.endBatchEdit();
  }
}","private void handleSeparator(int primaryCode,int x,int y){
  mVoiceProxy.handleSeparator();
  mComposingStateManager.onFinishComposingText();
  if (mSuggestionsView != null && mSuggestionsView.dismissAddToDictionaryHint()) {
    mHandler.cancelUpdateBigramPredictions();
    mHandler.postUpdateSuggestions();
  }
  boolean pickedDefault=false;
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mHasUncommittedTypedChars) {
    final boolean shouldAutoCorrect=mSettingsValues.mAutoCorrectEnabled && !mInputTypeNoAutoCorrect;
    if (shouldAutoCorrect && primaryCode != Keyboard.CODE_SINGLE_QUOTE) {
      pickedDefault=pickDefaultSuggestion(primaryCode);
    }
 else {
      commitTyped(ic);
    }
  }
  if (mJustAddedMagicSpace) {
    if (mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
      sendKeyChar((char)primaryCode);
      swapSwapperAndSpaceWhileInBatchEdit(ic);
    }
 else {
      if (mSettingsValues.isMagicSpaceStripper(primaryCode)) {
        removeTrailingSpaceWhileInBatchEdit(ic);
      }
      sendKeyChar((char)primaryCode);
      mJustAddedMagicSpace=false;
    }
  }
 else {
    sendKeyChar((char)primaryCode);
  }
  if (isSuggestionsRequested() && primaryCode == Keyboard.CODE_SPACE) {
    maybeDoubleSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true,x,y);
  if (pickedDefault) {
    CharSequence typedWord=mWordComposer.getTypedWord();
    TextEntryState.backToAcceptedDefault(typedWord);
    if (!TextUtils.isEmpty(typedWord) && !typedWord.equals(mBestWord)) {
      InputConnectionCompatUtils.commitCorrection(ic,mLastSelectionEnd - typedWord.length(),typedWord,mBestWord);
    }
  }
  if (Keyboard.CODE_SPACE == primaryCode) {
    if (!isCursorTouchingWord()) {
      mHandler.cancelUpdateSuggestions();
      mHandler.postUpdateBigramPredictions();
    }
  }
 else {
    setPunctuationSuggestions();
  }
  mKeyboardSwitcher.updateShiftState();
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9858442871587462
88120,"private void handleCharacter(int primaryCode,int[] keyCodes,int x,int y){
  mVoiceProxy.handleCharacter();
  if (mJustAddedMagicSpace && mSettingsValues.isMagicSpaceStripper(primaryCode)) {
    removeTrailingSpace();
  }
  int code=primaryCode;
  if ((isAlphabet(code) || mSettingsValues.isSymbolExcludedFromWordSeparators(code)) && isSuggestionsRequested() && !isCursorTouchingWord()) {
    if (!mHasUncommittedTypedChars) {
      mHasUncommittedTypedChars=true;
      mComposingStringBuilder.setLength(0);
      mWordComposer.reset();
      clearSuggestions();
      mComposingStateManager.onFinishComposingText();
    }
  }
  final KeyboardSwitcher switcher=mKeyboardSwitcher;
  if (switcher.isShiftedOrShiftLocked()) {
    if (keyCodes == null || keyCodes[0] < Character.MIN_CODE_POINT || keyCodes[0] > Character.MAX_CODE_POINT) {
      return;
    }
    code=keyCodes[0];
    if (switcher.isAlphabetMode() && Character.isLowerCase(code)) {
      final String upperCaseString=new String(new int[]{code},0,1).toUpperCase(mSubtypeSwitcher.getInputLocale());
      if (upperCaseString.codePointCount(0,upperCaseString.length()) == 1) {
        code=upperCaseString.codePointAt(0);
      }
 else {
        onTextInput(upperCaseString);
        return;
      }
    }
  }
  if (mHasUncommittedTypedChars) {
    mComposingStringBuilder.append((char)code);
    mWordComposer.add(code,keyCodes,x,y);
    final InputConnection ic=getCurrentInputConnection();
    if (ic != null) {
      if (mWordComposer.size() == 1) {
        mWordComposer.setAutoCapitalized(getCurrentAutoCapsState());
        mComposingStateManager.onStartComposingText();
      }
      final CharSequence textWithUnderline=mComposingStateManager.isAutoCorrectionIndicatorOn() ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mComposingStringBuilder) : mComposingStringBuilder;
      ic.setComposingText(textWithUnderline,1);
    }
    mHandler.postUpdateSuggestions();
  }
 else {
    sendKeyChar((char)code);
  }
  if (mJustAddedMagicSpace && mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
    swapSwapperAndSpace();
  }
 else {
    mJustAddedMagicSpace=false;
  }
  switcher.updateShiftState();
  if (LatinIME.PERF_DEBUG)   measureCps();
  TextEntryState.typedCharacter((char)code,mSettingsValues.isWordSeparator(code),x,y);
}","private void handleCharacter(int primaryCode,int[] keyCodes,int x,int y){
  mVoiceProxy.handleCharacter();
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null)   ic.beginBatchEdit();
  if (mJustAddedMagicSpace && mSettingsValues.isMagicSpaceStripper(primaryCode)) {
    removeTrailingSpaceWhileInBatchEdit(ic);
  }
  int code=primaryCode;
  if ((isAlphabet(code) || mSettingsValues.isSymbolExcludedFromWordSeparators(code)) && isSuggestionsRequested() && !isCursorTouchingWord()) {
    if (!mHasUncommittedTypedChars) {
      mHasUncommittedTypedChars=true;
      mComposingStringBuilder.setLength(0);
      mWordComposer.reset();
      clearSuggestions();
      mComposingStateManager.onFinishComposingText();
    }
  }
  final KeyboardSwitcher switcher=mKeyboardSwitcher;
  if (switcher.isShiftedOrShiftLocked()) {
    if (keyCodes == null || keyCodes[0] < Character.MIN_CODE_POINT || keyCodes[0] > Character.MAX_CODE_POINT) {
      if (null != ic)       ic.endBatchEdit();
      return;
    }
    code=keyCodes[0];
    if (switcher.isAlphabetMode() && Character.isLowerCase(code)) {
      final String upperCaseString=new String(new int[]{code},0,1).toUpperCase(mSubtypeSwitcher.getInputLocale());
      if (upperCaseString.codePointCount(0,upperCaseString.length()) == 1) {
        code=upperCaseString.codePointAt(0);
      }
 else {
        onTextInput(upperCaseString);
        if (null != ic)         ic.endBatchEdit();
        return;
      }
    }
  }
  if (mHasUncommittedTypedChars) {
    mComposingStringBuilder.append((char)code);
    mWordComposer.add(code,keyCodes,x,y);
    if (ic != null) {
      if (mWordComposer.size() == 1) {
        mWordComposer.setAutoCapitalized(getCurrentAutoCapsState());
        mComposingStateManager.onStartComposingText();
      }
      final CharSequence textWithUnderline=mComposingStateManager.isAutoCorrectionIndicatorOn() ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mComposingStringBuilder) : mComposingStringBuilder;
      ic.setComposingText(textWithUnderline,1);
    }
    mHandler.postUpdateSuggestions();
  }
 else {
    sendKeyChar((char)code);
  }
  if (mJustAddedMagicSpace && mSettingsValues.isMagicSpaceSwapper(primaryCode)) {
    if (null != ic)     swapSwapperAndSpaceWhileInBatchEdit(ic);
  }
 else {
    mJustAddedMagicSpace=false;
  }
  switcher.updateShiftState();
  if (LatinIME.PERF_DEBUG)   measureCps();
  TextEntryState.typedCharacter((char)code,mSettingsValues.isWordSeparator(code),x,y);
  if (null != ic)   ic.endBatchEdit();
}",0.9277800574476815
88121,"public void setSuggestions(SuggestedWords words){
  if (mSuggestionsView != null) {
    mSuggestionsView.setSuggestions(words);
    mKeyboardSwitcher.onAutoCorrectionStateChanged(words.hasWordAboveAutoCorrectionScoreThreshold());
  }
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    final boolean oldAutoCorrectionIndicator=mComposingStateManager.isAutoCorrectionIndicatorOn();
    final boolean newAutoCorrectionIndicator=Utils.willAutoCorrect(words);
    if (oldAutoCorrectionIndicator != newAutoCorrectionIndicator) {
      final CharSequence textWithUnderline=newAutoCorrectionIndicator ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mComposingStringBuilder) : mComposingStringBuilder;
      if (!TextUtils.isEmpty(textWithUnderline)) {
        ic.setComposingText(textWithUnderline,1);
      }
      mComposingStateManager.setAutoCorrectionIndicatorOn(newAutoCorrectionIndicator);
    }
  }
}","public void setSuggestions(SuggestedWords words){
  if (mSuggestionsView != null) {
    mSuggestionsView.setSuggestions(words);
    mKeyboardSwitcher.onAutoCorrectionStateChanged(words.hasWordAboveAutoCorrectionScoreThreshold());
  }
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    final boolean oldAutoCorrectionIndicator=mComposingStateManager.isAutoCorrectionIndicatorOn();
    final boolean newAutoCorrectionIndicator=Utils.willAutoCorrect(words);
    if (oldAutoCorrectionIndicator != newAutoCorrectionIndicator) {
      if (LatinImeLogger.sDBG) {
        Log.d(TAG,""String_Node_Str"" + oldAutoCorrectionIndicator + ""String_Node_Str""+ newAutoCorrectionIndicator);
      }
      final CharSequence textWithUnderline=newAutoCorrectionIndicator ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mComposingStringBuilder) : mComposingStringBuilder;
      if (!TextUtils.isEmpty(textWithUnderline)) {
        ic.setComposingText(textWithUnderline,1);
      }
      mComposingStateManager.setAutoCorrectionIndicatorOn(newAutoCorrectionIndicator);
    }
  }
}",0.9242718446601942
88122,"public void setSuggestions(SuggestedWords words){
  if (mSuggestionsView != null) {
    mSuggestionsView.setSuggestions(words);
    mKeyboardSwitcher.onAutoCorrectionStateChanged(words.hasWordAboveAutoCorrectionScoreThreshold());
  }
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    final boolean oldAutoCorrectionIndicator=mComposingStateManager.isAutoCorrectionIndicatorOn();
    final boolean newAutoCorrectionIndicator=Utils.willAutoCorrect(words);
    if (oldAutoCorrectionIndicator != newAutoCorrectionIndicator) {
      final CharSequence textWithUnderline=newAutoCorrectionIndicator ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mComposingStringBuilder) : mComposingStringBuilder;
      if (!TextUtils.isEmpty(textWithUnderline)) {
        ic.setComposingText(textWithUnderline,1);
      }
      mComposingStateManager.setAutoCorrectionIndicatorOn(newAutoCorrectionIndicator);
    }
  }
}","public void setSuggestions(SuggestedWords words){
  if (mSuggestionsView != null) {
    mSuggestionsView.setSuggestions(words);
    mKeyboardSwitcher.onAutoCorrectionStateChanged(words.hasWordAboveAutoCorrectionScoreThreshold());
  }
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    final boolean oldAutoCorrectionIndicator=mComposingStateManager.isAutoCorrectionIndicatorOn();
    final boolean newAutoCorrectionIndicator=Utils.willAutoCorrect(words);
    if (oldAutoCorrectionIndicator != newAutoCorrectionIndicator) {
      if (LatinImeLogger.sDBG) {
        Log.d(TAG,""String_Node_Str"" + oldAutoCorrectionIndicator + ""String_Node_Str""+ newAutoCorrectionIndicator);
      }
      final CharSequence textWithUnderline=newAutoCorrectionIndicator ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mComposingStringBuilder) : mComposingStringBuilder;
      if (!TextUtils.isEmpty(textWithUnderline)) {
        ic.setComposingText(textWithUnderline,1);
      }
      mComposingStateManager.setAutoCorrectionIndicatorOn(newAutoCorrectionIndicator);
    }
  }
}",0.9242718446601942
88123,"public void setSuggestions(SuggestedWords words){
  if (mSuggestionsView != null) {
    mSuggestionsView.setSuggestions(words);
    mKeyboardSwitcher.onAutoCorrectionStateChanged(words.hasWordAboveAutoCorrectionScoreThreshold());
  }
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    final boolean oldAutoCorrectionIndicator=mComposingStateManager.isAutoCorrectionIndicatorOn();
    final boolean newAutoCorrectionIndicator=Utils.willAutoCorrect(words);
    if (oldAutoCorrectionIndicator != newAutoCorrectionIndicator) {
      final CharSequence textWithUnderline=newAutoCorrectionIndicator ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mComposingStringBuilder) : mComposingStringBuilder;
      if (!TextUtils.isEmpty(textWithUnderline)) {
        ic.setComposingText(textWithUnderline,1);
      }
      mComposingStateManager.setAutoCorrectionIndicatorOn(newAutoCorrectionIndicator);
    }
  }
}","public void setSuggestions(SuggestedWords words){
  if (mSuggestionsView != null) {
    mSuggestionsView.setSuggestions(words);
    mKeyboardSwitcher.onAutoCorrectionStateChanged(words.hasWordAboveAutoCorrectionScoreThreshold());
  }
  final InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    final boolean oldAutoCorrectionIndicator=mComposingStateManager.isAutoCorrectionIndicatorOn();
    final boolean newAutoCorrectionIndicator=Utils.willAutoCorrect(words);
    if (oldAutoCorrectionIndicator != newAutoCorrectionIndicator) {
      if (LatinImeLogger.sDBG) {
        Log.d(TAG,""String_Node_Str"" + oldAutoCorrectionIndicator + ""String_Node_Str""+ newAutoCorrectionIndicator);
      }
      final CharSequence textWithUnderline=newAutoCorrectionIndicator ? SuggestionSpanUtils.getTextWithAutoCorrectionIndicatorUnderline(this,mComposingStringBuilder) : mComposingStringBuilder;
      if (!TextUtils.isEmpty(textWithUnderline)) {
        ic.setComposingText(textWithUnderline,1);
      }
      mComposingStateManager.setAutoCorrectionIndicatorOn(newAutoCorrectionIndicator);
    }
  }
}",0.9242718446601942
88124,"public void showSuggestions(SuggestedWords suggestedWords,CharSequence typedWord){
  setSuggestions(suggestedWords);
  if (suggestedWords.size() > 0) {
    if (Utils.shouldBlockedBySafetyNetForAutoCorrection(suggestedWords,mSuggest)) {
      mBestWord=typedWord;
    }
 else     if (suggestedWords.hasAutoCorrectionWord()) {
      mBestWord=suggestedWords.getWord(1);
    }
 else {
      mBestWord=typedWord;
    }
  }
 else {
    mBestWord=null;
  }
  setSuggestionStripShown(isSuggestionsStripVisible());
}","public void showSuggestions(SuggestedWords suggestedWords,CharSequence typedWord){
  final boolean shouldBlockAutoCorrectionBySafetyNet=Utils.shouldBlockAutoCorrectionBySafetyNet(suggestedWords,mSuggest);
  if (shouldBlockAutoCorrectionBySafetyNet) {
    suggestedWords.setShouldBlockAutoCorrection();
  }
  setSuggestions(suggestedWords);
  if (suggestedWords.size() > 0) {
    if (shouldBlockAutoCorrectionBySafetyNet) {
      mBestWord=typedWord;
    }
 else     if (suggestedWords.hasAutoCorrectionWord()) {
      mBestWord=suggestedWords.getWord(1);
    }
 else {
      mBestWord=typedWord;
    }
  }
 else {
    mBestWord=null;
  }
  setSuggestionStripShown(isSuggestionsStripVisible());
}",0.6816292601828762
88125,"public boolean hasWordAboveAutoCorrectionScoreThreshold(){
  return mHasMinimalSuggestion && ((size() > 1 && !mTypedWordValid) || mTypedWordValid);
}","public boolean hasWordAboveAutoCorrectionScoreThreshold(){
  return mHasAutoCorrectionCandidate && ((size() > 1 && !mTypedWordValid) || mTypedWordValid);
}",0.9078947368421052
88126,"public boolean hasAutoCorrectionWord(){
  return mHasMinimalSuggestion && size() > 1 && !mTypedWordValid;
}","public boolean hasAutoCorrectionWord(){
  return mHasAutoCorrectionCandidate && size() > 1 && !mTypedWordValid;
}",0.8727272727272727
88127,"private SuggestedWords(List<CharSequence> words,boolean typedWordValid,boolean hasMinimalSuggestion,boolean isPunctuationSuggestions,List<SuggestedWordInfo> suggestedWordInfoList){
  if (words != null) {
    mWords=words;
  }
 else {
    mWords=Collections.emptyList();
  }
  mTypedWordValid=typedWordValid;
  mHasMinimalSuggestion=hasMinimalSuggestion;
  mIsPunctuationSuggestions=isPunctuationSuggestions;
  mSuggestedWordInfoList=suggestedWordInfoList;
}","private SuggestedWords(List<CharSequence> words,boolean typedWordValid,boolean hasAutoCorrectionCandidate,boolean isPunctuationSuggestions,List<SuggestedWordInfo> suggestedWordInfoList){
  if (words != null) {
    mWords=words;
  }
 else {
    mWords=Collections.emptyList();
  }
  mTypedWordValid=typedWordValid;
  mHasAutoCorrectionCandidate=hasAutoCorrectionCandidate;
  mIsPunctuationSuggestions=isPunctuationSuggestions;
  mSuggestedWordInfoList=suggestedWordInfoList;
  mShouldBlockAutoCorrection=false;
}",0.8388429752066116
88128,"public String toString(){
  final StringBuilder sb=new StringBuilder(""String_Node_Str"" + mTypedWordValid + ""String_Node_Str""+ mHasMinimalSuggestion+ ""String_Node_Str""+ mIsPunctuationSuggestions+ ""String_Node_Str"");
  for (  CharSequence s : mWords) {
    sb.append(s);
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}","@Override public String toString(){
  final StringBuilder sb=new StringBuilder(""String_Node_Str"" + mTypedWordValid + ""String_Node_Str""+ mHasMinimalSuggestion+ ""String_Node_Str""+ mIsPunctuationSuggestions+ ""String_Node_Str"");
  for (  CharSequence s : mWords) {
    sb.append(s);
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}",0.9851632047477744
88129,"private int getSuggestionTextColor(int index,SuggestedWords suggestions,int pos){
  final boolean isSuggested=(pos != 0);
  final int color;
  if (index == mCenterSuggestionIndex && Utils.willAutoCorrect(suggestions)) {
    color=mColorAutoCorrect;
  }
 else   if (isSuggested) {
    color=mColorSuggested;
  }
 else {
    color=mColorTypedWord;
  }
  final SuggestedWordInfo info=(pos < suggestions.size()) ? suggestions.getInfo(pos) : null;
  if (info != null && info.isObsoleteSuggestedWord()) {
    return applyAlpha(color,mAlphaObsoleted);
  }
 else {
    return color;
  }
}","private int getSuggestionTextColor(int index,SuggestedWords suggestions,int pos){
  final boolean isSuggested=(pos != 0);
  final int color;
  if (index == mCenterSuggestionIndex && Utils.willAutoCorrect(suggestions)) {
    color=mColorAutoCorrect;
  }
 else   if (isSuggested) {
    color=mColorSuggested;
  }
 else {
    color=mColorTypedWord;
  }
  if (LatinImeLogger.sDBG) {
    if (index == mCenterSuggestionIndex && suggestions.mHasAutoCorrectionCandidate && suggestions.shouldBlockAutoCorrection()) {
      return 0xFFFF0000;
    }
  }
  final SuggestedWordInfo info=(pos < suggestions.size()) ? suggestions.getInfo(pos) : null;
  if (info != null && info.isObsoleteSuggestedWord()) {
    return applyAlpha(color,mAlphaObsoleted);
  }
 else {
    return color;
  }
}",0.8573540280857354
88130,"public static boolean willAutoCorrect(SuggestedWords suggestions){
  return !suggestions.mTypedWordValid && suggestions.mHasMinimalSuggestion;
}","public static boolean willAutoCorrect(SuggestedWords suggestions){
  return !suggestions.mTypedWordValid && suggestions.mHasAutoCorrectionCandidate && !suggestions.shouldBlockAutoCorrection();
}",0.8284023668639053
88131,"public void showSuggestions(SuggestedWords suggestedWords,CharSequence typedWord){
  setSuggestions(suggestedWords);
  if (suggestedWords.size() > 0) {
    if (Utils.shouldBlockedBySafetyNetForAutoCorrection(suggestedWords,mSuggest)) {
      mBestWord=typedWord;
    }
 else     if (suggestedWords.hasAutoCorrectionWord()) {
      mBestWord=suggestedWords.getWord(1);
    }
 else {
      mBestWord=typedWord;
    }
  }
 else {
    mBestWord=null;
  }
  setSuggestionStripShown(isSuggestionsStripVisible());
}","public void showSuggestions(SuggestedWords suggestedWords,CharSequence typedWord){
  final boolean shouldBlockAutoCorrectionBySafetyNet=Utils.shouldBlockAutoCorrectionBySafetyNet(suggestedWords,mSuggest);
  if (shouldBlockAutoCorrectionBySafetyNet) {
    suggestedWords.setShouldBlockAutoCorrection();
  }
  setSuggestions(suggestedWords);
  if (suggestedWords.size() > 0) {
    if (shouldBlockAutoCorrectionBySafetyNet) {
      mBestWord=typedWord;
    }
 else     if (suggestedWords.hasAutoCorrectionWord()) {
      mBestWord=suggestedWords.getWord(1);
    }
 else {
      mBestWord=typedWord;
    }
  }
 else {
    mBestWord=null;
  }
  setSuggestionStripShown(isSuggestionsStripVisible());
}",0.6816292601828762
88132,"public boolean hasWordAboveAutoCorrectionScoreThreshold(){
  return mHasMinimalSuggestion && ((size() > 1 && !mTypedWordValid) || mTypedWordValid);
}","public boolean hasWordAboveAutoCorrectionScoreThreshold(){
  return mHasAutoCorrectionCandidate && ((size() > 1 && !mTypedWordValid) || mTypedWordValid);
}",0.9078947368421052
88133,"public boolean hasAutoCorrectionWord(){
  return mHasMinimalSuggestion && size() > 1 && !mTypedWordValid;
}","public boolean hasAutoCorrectionWord(){
  return mHasAutoCorrectionCandidate && size() > 1 && !mTypedWordValid;
}",0.8727272727272727
88134,"private SuggestedWords(List<CharSequence> words,boolean typedWordValid,boolean hasMinimalSuggestion,boolean isPunctuationSuggestions,List<SuggestedWordInfo> suggestedWordInfoList){
  if (words != null) {
    mWords=words;
  }
 else {
    mWords=Collections.emptyList();
  }
  mTypedWordValid=typedWordValid;
  mHasMinimalSuggestion=hasMinimalSuggestion;
  mIsPunctuationSuggestions=isPunctuationSuggestions;
  mSuggestedWordInfoList=suggestedWordInfoList;
}","private SuggestedWords(List<CharSequence> words,boolean typedWordValid,boolean hasAutoCorrectionCandidate,boolean isPunctuationSuggestions,List<SuggestedWordInfo> suggestedWordInfoList){
  if (words != null) {
    mWords=words;
  }
 else {
    mWords=Collections.emptyList();
  }
  mTypedWordValid=typedWordValid;
  mHasAutoCorrectionCandidate=hasAutoCorrectionCandidate;
  mIsPunctuationSuggestions=isPunctuationSuggestions;
  mSuggestedWordInfoList=suggestedWordInfoList;
  mShouldBlockAutoCorrection=false;
}",0.8388429752066116
88135,"public String toString(){
  final StringBuilder sb=new StringBuilder(""String_Node_Str"" + mTypedWordValid + ""String_Node_Str""+ mHasMinimalSuggestion+ ""String_Node_Str""+ mIsPunctuationSuggestions+ ""String_Node_Str"");
  for (  CharSequence s : mWords) {
    sb.append(s);
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}","@Override public String toString(){
  final StringBuilder sb=new StringBuilder(""String_Node_Str"" + mTypedWordValid + ""String_Node_Str""+ mHasMinimalSuggestion+ ""String_Node_Str""+ mIsPunctuationSuggestions+ ""String_Node_Str"");
  for (  CharSequence s : mWords) {
    sb.append(s);
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}",0.9851632047477744
88136,"private int getSuggestionTextColor(int index,SuggestedWords suggestions,int pos){
  final boolean isSuggested=(pos != 0);
  final int color;
  if (index == mCenterSuggestionIndex && Utils.willAutoCorrect(suggestions)) {
    color=mColorAutoCorrect;
  }
 else   if (isSuggested) {
    color=mColorSuggested;
  }
 else {
    color=mColorTypedWord;
  }
  final SuggestedWordInfo info=(pos < suggestions.size()) ? suggestions.getInfo(pos) : null;
  if (info != null && info.isObsoleteSuggestedWord()) {
    return applyAlpha(color,mAlphaObsoleted);
  }
 else {
    return color;
  }
}","private int getSuggestionTextColor(int index,SuggestedWords suggestions,int pos){
  final boolean isSuggested=(pos != 0);
  final int color;
  if (index == mCenterSuggestionIndex && Utils.willAutoCorrect(suggestions)) {
    color=mColorAutoCorrect;
  }
 else   if (isSuggested) {
    color=mColorSuggested;
  }
 else {
    color=mColorTypedWord;
  }
  if (LatinImeLogger.sDBG) {
    if (index == mCenterSuggestionIndex && suggestions.mHasAutoCorrectionCandidate && suggestions.shouldBlockAutoCorrection()) {
      return 0xFFFF0000;
    }
  }
  final SuggestedWordInfo info=(pos < suggestions.size()) ? suggestions.getInfo(pos) : null;
  if (info != null && info.isObsoleteSuggestedWord()) {
    return applyAlpha(color,mAlphaObsoleted);
  }
 else {
    return color;
  }
}",0.8573540280857354
88137,"public static boolean willAutoCorrect(SuggestedWords suggestions){
  return !suggestions.mTypedWordValid && suggestions.mHasMinimalSuggestion;
}","public static boolean willAutoCorrect(SuggestedWords suggestions){
  return !suggestions.mTypedWordValid && suggestions.mHasAutoCorrectionCandidate && !suggestions.shouldBlockAutoCorrection();
}",0.8284023668639053
88138,"public void showSuggestions(SuggestedWords suggestedWords,CharSequence typedWord){
  setSuggestions(suggestedWords);
  if (suggestedWords.size() > 0) {
    if (Utils.shouldBlockedBySafetyNetForAutoCorrection(suggestedWords,mSuggest)) {
      mBestWord=typedWord;
    }
 else     if (suggestedWords.hasAutoCorrectionWord()) {
      mBestWord=suggestedWords.getWord(1);
    }
 else {
      mBestWord=typedWord;
    }
  }
 else {
    mBestWord=null;
  }
  setSuggestionStripShown(isSuggestionsStripVisible());
}","public void showSuggestions(SuggestedWords suggestedWords,CharSequence typedWord){
  final boolean shouldBlockAutoCorrectionBySafetyNet=Utils.shouldBlockAutoCorrectionBySafetyNet(suggestedWords,mSuggest);
  if (shouldBlockAutoCorrectionBySafetyNet) {
    suggestedWords.setShouldBlockAutoCorrection();
  }
  setSuggestions(suggestedWords);
  if (suggestedWords.size() > 0) {
    if (shouldBlockAutoCorrectionBySafetyNet) {
      mBestWord=typedWord;
    }
 else     if (suggestedWords.hasAutoCorrectionWord()) {
      mBestWord=suggestedWords.getWord(1);
    }
 else {
      mBestWord=typedWord;
    }
  }
 else {
    mBestWord=null;
  }
  setSuggestionStripShown(isSuggestionsStripVisible());
}",0.6816292601828762
88139,"public boolean hasWordAboveAutoCorrectionScoreThreshold(){
  return mHasMinimalSuggestion && ((size() > 1 && !mTypedWordValid) || mTypedWordValid);
}","public boolean hasWordAboveAutoCorrectionScoreThreshold(){
  return mHasAutoCorrectionCandidate && ((size() > 1 && !mTypedWordValid) || mTypedWordValid);
}",0.9078947368421052
88140,"public boolean hasAutoCorrectionWord(){
  return mHasMinimalSuggestion && size() > 1 && !mTypedWordValid;
}","public boolean hasAutoCorrectionWord(){
  return mHasAutoCorrectionCandidate && size() > 1 && !mTypedWordValid;
}",0.8727272727272727
88141,"private SuggestedWords(List<CharSequence> words,boolean typedWordValid,boolean hasMinimalSuggestion,boolean isPunctuationSuggestions,List<SuggestedWordInfo> suggestedWordInfoList){
  if (words != null) {
    mWords=words;
  }
 else {
    mWords=Collections.emptyList();
  }
  mTypedWordValid=typedWordValid;
  mHasMinimalSuggestion=hasMinimalSuggestion;
  mIsPunctuationSuggestions=isPunctuationSuggestions;
  mSuggestedWordInfoList=suggestedWordInfoList;
}","private SuggestedWords(List<CharSequence> words,boolean typedWordValid,boolean hasAutoCorrectionCandidate,boolean isPunctuationSuggestions,List<SuggestedWordInfo> suggestedWordInfoList){
  if (words != null) {
    mWords=words;
  }
 else {
    mWords=Collections.emptyList();
  }
  mTypedWordValid=typedWordValid;
  mHasAutoCorrectionCandidate=hasAutoCorrectionCandidate;
  mIsPunctuationSuggestions=isPunctuationSuggestions;
  mSuggestedWordInfoList=suggestedWordInfoList;
  mShouldBlockAutoCorrection=false;
}",0.8388429752066116
88142,"public String toString(){
  final StringBuilder sb=new StringBuilder(""String_Node_Str"" + mTypedWordValid + ""String_Node_Str""+ mHasMinimalSuggestion+ ""String_Node_Str""+ mIsPunctuationSuggestions+ ""String_Node_Str"");
  for (  CharSequence s : mWords) {
    sb.append(s);
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}","@Override public String toString(){
  final StringBuilder sb=new StringBuilder(""String_Node_Str"" + mTypedWordValid + ""String_Node_Str""+ mHasMinimalSuggestion+ ""String_Node_Str""+ mIsPunctuationSuggestions+ ""String_Node_Str"");
  for (  CharSequence s : mWords) {
    sb.append(s);
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}",0.9851632047477744
88143,"private int getSuggestionTextColor(int index,SuggestedWords suggestions,int pos){
  final boolean isSuggested=(pos != 0);
  final int color;
  if (index == mCenterSuggestionIndex && Utils.willAutoCorrect(suggestions)) {
    color=mColorAutoCorrect;
  }
 else   if (isSuggested) {
    color=mColorSuggested;
  }
 else {
    color=mColorTypedWord;
  }
  final SuggestedWordInfo info=(pos < suggestions.size()) ? suggestions.getInfo(pos) : null;
  if (info != null && info.isObsoleteSuggestedWord()) {
    return applyAlpha(color,mAlphaObsoleted);
  }
 else {
    return color;
  }
}","private int getSuggestionTextColor(int index,SuggestedWords suggestions,int pos){
  final boolean isSuggested=(pos != 0);
  final int color;
  if (index == mCenterSuggestionIndex && Utils.willAutoCorrect(suggestions)) {
    color=mColorAutoCorrect;
  }
 else   if (isSuggested) {
    color=mColorSuggested;
  }
 else {
    color=mColorTypedWord;
  }
  if (LatinImeLogger.sDBG) {
    if (index == mCenterSuggestionIndex && suggestions.mHasAutoCorrectionCandidate && suggestions.shouldBlockAutoCorrection()) {
      return 0xFFFF0000;
    }
  }
  final SuggestedWordInfo info=(pos < suggestions.size()) ? suggestions.getInfo(pos) : null;
  if (info != null && info.isObsoleteSuggestedWord()) {
    return applyAlpha(color,mAlphaObsoleted);
  }
 else {
    return color;
  }
}",0.8573540280857354
88144,"public static boolean willAutoCorrect(SuggestedWords suggestions){
  return !suggestions.mTypedWordValid && suggestions.mHasMinimalSuggestion;
}","public static boolean willAutoCorrect(SuggestedWords suggestions){
  return !suggestions.mTypedWordValid && suggestions.mHasAutoCorrectionCandidate && !suggestions.shouldBlockAutoCorrection();
}",0.8284023668639053
88145,"private boolean hasAutoCorrectionForTypedWord(Map<String,Dictionary> dictionaries,WordComposer wordComposer,ArrayList<CharSequence> suggestions,CharSequence typedWord,int correctionMode){
  if (TextUtils.isEmpty(typedWord))   return false;
  boolean isValidWord=isValidWordForAutoCorrection(dictionaries,typedWord,false);
  return wordComposer.size() > 1 && suggestions.size() > 0 && isValidWord && (correctionMode == Suggest.CORRECTION_FULL || correctionMode == Suggest.CORRECTION_FULL_BIGRAM);
}","private boolean hasAutoCorrectionForTypedWord(Map<String,Dictionary> dictionaries,WordComposer wordComposer,ArrayList<CharSequence> suggestions,CharSequence typedWord,int correctionMode){
  if (TextUtils.isEmpty(typedWord))   return false;
  boolean allowsAutoCorrect=allowsToBeAutoCorrected(dictionaries,typedWord,false);
  return wordComposer.size() > 1 && suggestions.size() > 0 && !allowsAutoCorrect && (correctionMode == Suggest.CORRECTION_FULL || correctionMode == Suggest.CORRECTION_FULL_BIGRAM);
}",0.9141716566866268
88146,"public void updateSuggestions(){
  if ((mSuggest == null || !isSuggestionsRequested()) && !mVoiceProxy.isVoiceInputHighlighted()) {
    return;
  }
  mHandler.cancelUpdateSuggestions();
  mHandler.cancelUpdateBigramPredictions();
  if (!mHasUncommittedTypedChars) {
    setPunctuationSuggestions();
    return;
  }
  final WordComposer wordComposer=mWordComposer;
  final InputConnection ic=getCurrentInputConnection();
  final CharSequence prevWord;
  if (null == ic) {
    prevWord=null;
  }
 else {
    prevWord=EditingUtils.getPreviousWord(ic,mSettingsValues.mWordSeparators);
  }
  final SuggestedWords.Builder builder=mSuggest.getSuggestedWordBuilder(wordComposer,prevWord,mKeyboardSwitcher.getLatinKeyboard().getProximityInfo());
  boolean autoCorrectionAvailable=!mInputTypeNoAutoCorrect && mSuggest.hasAutoCorrection();
  final CharSequence typedWord=wordComposer.getTypedWord();
  final boolean typedWordValid=AutoCorrection.isValidWordForAutoCorrection(mSuggest.getUnigramDictionaries(),typedWord,preferCapitalization());
  if (mCorrectionMode == Suggest.CORRECTION_FULL || mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    autoCorrectionAvailable|=typedWordValid;
  }
  autoCorrectionAvailable&=!wordComposer.isMostlyCaps();
  autoCorrectionAvailable&=!TextEntryState.isRecorrecting();
  if (typedWord != null) {
    if (builder.size() > 1 || typedWord.length() == 1 || typedWordValid || mSuggestionsView.isShowingAddToDictionaryHint()) {
      builder.setTypedWordValid(typedWordValid).setHasMinimalSuggestion(autoCorrectionAvailable);
    }
 else {
      SuggestedWords previousSuggestions=mSuggestionsView.getSuggestions();
      if (previousSuggestions == mSettingsValues.mSuggestPuncList) {
        if (builder.size() == 0) {
          return;
        }
        previousSuggestions=SuggestedWords.EMPTY;
      }
      builder.addTypedWordAndPreviousSuggestions(typedWord,previousSuggestions);
    }
  }
  showSuggestions(builder.build(),typedWord);
}","public void updateSuggestions(){
  if ((mSuggest == null || !isSuggestionsRequested()) && !mVoiceProxy.isVoiceInputHighlighted()) {
    return;
  }
  mHandler.cancelUpdateSuggestions();
  mHandler.cancelUpdateBigramPredictions();
  if (!mHasUncommittedTypedChars) {
    setPunctuationSuggestions();
    return;
  }
  final WordComposer wordComposer=mWordComposer;
  final InputConnection ic=getCurrentInputConnection();
  final CharSequence prevWord;
  if (null == ic) {
    prevWord=null;
  }
 else {
    prevWord=EditingUtils.getPreviousWord(ic,mSettingsValues.mWordSeparators);
  }
  final SuggestedWords.Builder builder=mSuggest.getSuggestedWordBuilder(wordComposer,prevWord,mKeyboardSwitcher.getLatinKeyboard().getProximityInfo());
  boolean autoCorrectionAvailable=!mInputTypeNoAutoCorrect && mSuggest.hasAutoCorrection();
  final CharSequence typedWord=wordComposer.getTypedWord();
  final boolean allowsToBeAutoCorrected=AutoCorrection.allowsToBeAutoCorrected(mSuggest.getUnigramDictionaries(),typedWord,preferCapitalization());
  if (mCorrectionMode == Suggest.CORRECTION_FULL || mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    autoCorrectionAvailable|=(!allowsToBeAutoCorrected);
  }
  autoCorrectionAvailable&=!wordComposer.isMostlyCaps();
  autoCorrectionAvailable&=!TextEntryState.isRecorrecting();
  if (typedWord != null) {
    if (builder.size() > 1 || typedWord.length() == 1 || (!allowsToBeAutoCorrected) || mSuggestionsView.isShowingAddToDictionaryHint()) {
      builder.setTypedWordValid(!allowsToBeAutoCorrected).setHasMinimalSuggestion(autoCorrectionAvailable);
    }
 else {
      SuggestedWords previousSuggestions=mSuggestionsView.getSuggestions();
      if (previousSuggestions == mSettingsValues.mSuggestPuncList) {
        if (builder.size() == 0) {
          return;
        }
        previousSuggestions=SuggestedWords.EMPTY;
      }
      builder.addTypedWordAndPreviousSuggestions(typedWord,previousSuggestions);
    }
  }
  showSuggestions(builder.build(),typedWord);
}",0.95333667837431
88147,"public boolean isValidWord(CharSequence typed){
  return AutoCorrection.isValidWordForAutoCorrection(mSuggest.getUnigramDictionaries(),typed,false);
}","public boolean isValidWord(CharSequence typed){
  return AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),typed,false);
}",0.939929328621908
88148,"private boolean hasAutoCorrectionForTypedWord(Map<String,Dictionary> dictionaries,WordComposer wordComposer,ArrayList<CharSequence> suggestions,CharSequence typedWord,int correctionMode){
  if (TextUtils.isEmpty(typedWord))   return false;
  boolean isValidWord=isValidWordForAutoCorrection(dictionaries,typedWord,false);
  return wordComposer.size() > 1 && suggestions.size() > 0 && isValidWord && (correctionMode == Suggest.CORRECTION_FULL || correctionMode == Suggest.CORRECTION_FULL_BIGRAM);
}","private boolean hasAutoCorrectionForTypedWord(Map<String,Dictionary> dictionaries,WordComposer wordComposer,ArrayList<CharSequence> suggestions,CharSequence typedWord,int correctionMode){
  if (TextUtils.isEmpty(typedWord))   return false;
  boolean allowsAutoCorrect=allowsToBeAutoCorrected(dictionaries,typedWord,false);
  return wordComposer.size() > 1 && suggestions.size() > 0 && !allowsAutoCorrect && (correctionMode == Suggest.CORRECTION_FULL || correctionMode == Suggest.CORRECTION_FULL_BIGRAM);
}",0.9141716566866268
88149,"public void updateSuggestions(){
  if ((mSuggest == null || !isSuggestionsRequested()) && !mVoiceProxy.isVoiceInputHighlighted()) {
    return;
  }
  mHandler.cancelUpdateSuggestions();
  mHandler.cancelUpdateBigramPredictions();
  if (!mHasUncommittedTypedChars) {
    setPunctuationSuggestions();
    return;
  }
  final WordComposer wordComposer=mWordComposer;
  final InputConnection ic=getCurrentInputConnection();
  final CharSequence prevWord;
  if (null == ic) {
    prevWord=null;
  }
 else {
    prevWord=EditingUtils.getPreviousWord(ic,mSettingsValues.mWordSeparators);
  }
  final SuggestedWords.Builder builder=mSuggest.getSuggestedWordBuilder(wordComposer,prevWord,mKeyboardSwitcher.getLatinKeyboard().getProximityInfo());
  boolean autoCorrectionAvailable=!mInputTypeNoAutoCorrect && mSuggest.hasAutoCorrection();
  final CharSequence typedWord=wordComposer.getTypedWord();
  final boolean typedWordValid=AutoCorrection.isValidWordForAutoCorrection(mSuggest.getUnigramDictionaries(),typedWord,preferCapitalization());
  if (mCorrectionMode == Suggest.CORRECTION_FULL || mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    autoCorrectionAvailable|=typedWordValid;
  }
  autoCorrectionAvailable&=!wordComposer.isMostlyCaps();
  autoCorrectionAvailable&=!TextEntryState.isRecorrecting();
  if (typedWord != null) {
    if (builder.size() > 1 || typedWord.length() == 1 || typedWordValid || mSuggestionsView.isShowingAddToDictionaryHint()) {
      builder.setTypedWordValid(typedWordValid).setHasMinimalSuggestion(autoCorrectionAvailable);
    }
 else {
      SuggestedWords previousSuggestions=mSuggestionsView.getSuggestions();
      if (previousSuggestions == mSettingsValues.mSuggestPuncList) {
        if (builder.size() == 0) {
          return;
        }
        previousSuggestions=SuggestedWords.EMPTY;
      }
      builder.addTypedWordAndPreviousSuggestions(typedWord,previousSuggestions);
    }
  }
  showSuggestions(builder.build(),typedWord);
}","public void updateSuggestions(){
  if ((mSuggest == null || !isSuggestionsRequested()) && !mVoiceProxy.isVoiceInputHighlighted()) {
    return;
  }
  mHandler.cancelUpdateSuggestions();
  mHandler.cancelUpdateBigramPredictions();
  if (!mHasUncommittedTypedChars) {
    setPunctuationSuggestions();
    return;
  }
  final WordComposer wordComposer=mWordComposer;
  final InputConnection ic=getCurrentInputConnection();
  final CharSequence prevWord;
  if (null == ic) {
    prevWord=null;
  }
 else {
    prevWord=EditingUtils.getPreviousWord(ic,mSettingsValues.mWordSeparators);
  }
  final SuggestedWords.Builder builder=mSuggest.getSuggestedWordBuilder(wordComposer,prevWord,mKeyboardSwitcher.getLatinKeyboard().getProximityInfo());
  boolean autoCorrectionAvailable=!mInputTypeNoAutoCorrect && mSuggest.hasAutoCorrection();
  final CharSequence typedWord=wordComposer.getTypedWord();
  final boolean allowsToBeAutoCorrected=AutoCorrection.allowsToBeAutoCorrected(mSuggest.getUnigramDictionaries(),typedWord,preferCapitalization());
  if (mCorrectionMode == Suggest.CORRECTION_FULL || mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    autoCorrectionAvailable|=(!allowsToBeAutoCorrected);
  }
  autoCorrectionAvailable&=!wordComposer.isMostlyCaps();
  autoCorrectionAvailable&=!TextEntryState.isRecorrecting();
  if (typedWord != null) {
    if (builder.size() > 1 || typedWord.length() == 1 || (!allowsToBeAutoCorrected) || mSuggestionsView.isShowingAddToDictionaryHint()) {
      builder.setTypedWordValid(!allowsToBeAutoCorrected).setHasMinimalSuggestion(autoCorrectionAvailable);
    }
 else {
      SuggestedWords previousSuggestions=mSuggestionsView.getSuggestions();
      if (previousSuggestions == mSettingsValues.mSuggestPuncList) {
        if (builder.size() == 0) {
          return;
        }
        previousSuggestions=SuggestedWords.EMPTY;
      }
      builder.addTypedWordAndPreviousSuggestions(typedWord,previousSuggestions);
    }
  }
  showSuggestions(builder.build(),typedWord);
}",0.95333667837431
88150,"public boolean isValidWord(CharSequence typed){
  return AutoCorrection.isValidWordForAutoCorrection(mSuggest.getUnigramDictionaries(),typed,false);
}","public boolean isValidWord(CharSequence typed){
  return AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),typed,false);
}",0.939929328621908
88151,"/** 
 * Gets a list of suggestions for a specific string. This returns a list of possible corrections for the text passed as an argument. It may split or group words, and even perform grammatical analysis.
 */
@Override public SuggestionsInfo onGetSuggestions(final TextInfo textInfo,final int suggestionsLimit){
  try {
    final String text=textInfo.getText();
    if (shouldFilterOut(text)) {
      DictAndProximity dictInfo=null;
      try {
        dictInfo=mDictionaryPool.takeOrGetNull();
        if (null == dictInfo)         return NOT_IN_DICT_EMPTY_SUGGESTIONS;
        return dictInfo.mDictionary.isValidWord(text) ? IN_DICT_EMPTY_SUGGESTIONS : NOT_IN_DICT_EMPTY_SUGGESTIONS;
      }
  finally {
        if (null != dictInfo) {
          if (!mDictionaryPool.offer(dictInfo)) {
            Log.e(TAG,""String_Node_Str"");
          }
        }
      }
    }
    final SuggestionsGatherer suggestionsGatherer=new SuggestionsGatherer(text,mService.mSuggestionThreshold,mService.mLikelyThreshold,suggestionsLimit);
    final WordComposer composer=new WordComposer();
    final int length=text.length();
    for (int i=0; i < length; ++i) {
      final int character=text.codePointAt(i);
      final int proximityIndex=SpellCheckerProximityInfo.getIndexOf(character);
      final int[] proximities;
      if (-1 == proximityIndex) {
        proximities=new int[]{character};
      }
 else {
        proximities=Arrays.copyOfRange(SpellCheckerProximityInfo.PROXIMITY,proximityIndex,proximityIndex + SpellCheckerProximityInfo.ROW_SIZE);
      }
      composer.add(character,proximities,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
    }
    final int capitalizeType=getCapitalizationType(text);
    boolean isInDict=true;
    DictAndProximity dictInfo=null;
    try {
      dictInfo=mDictionaryPool.takeOrGetNull();
      if (null == dictInfo)       return NOT_IN_DICT_EMPTY_SUGGESTIONS;
      dictInfo.mDictionary.getWords(composer,suggestionsGatherer,dictInfo.mProximityInfo);
      isInDict=dictInfo.mDictionary.isValidWord(text);
      if (!isInDict && CAPITALIZE_NONE != capitalizeType) {
        isInDict=dictInfo.mDictionary.isValidWord(text.toLowerCase(mLocale));
      }
    }
  finally {
      if (null != dictInfo) {
        if (!mDictionaryPool.offer(dictInfo)) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    final SuggestionsGatherer.Result result=suggestionsGatherer.getResults(capitalizeType,mLocale);
    if (DBG) {
      Log.i(TAG,""String_Node_Str"" + text + ""String_Node_Str""+ suggestionsLimit);
      Log.i(TAG,""String_Node_Str"" + isInDict);
      Log.i(TAG,""String_Node_Str"" + (!isInDict));
      Log.i(TAG,""String_Node_Str"" + result.mHasLikelySuggestions);
      for (      String suggestion : result.mSuggestions) {
        Log.i(TAG,suggestion);
      }
    }
    final int flags=(isInDict ? SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY : SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO);
    return new SuggestionsInfo(flags,result.mSuggestions);
  }
 catch (  RuntimeException e) {
    if (DBG) {
      throw e;
    }
 else {
      Log.e(TAG,""String_Node_Str"" + e);
      return NOT_IN_DICT_EMPTY_SUGGESTIONS;
    }
  }
}","/** 
 * Gets a list of suggestions for a specific string. This returns a list of possible corrections for the text passed as an argument. It may split or group words, and even perform grammatical analysis.
 */
@Override public SuggestionsInfo onGetSuggestions(final TextInfo textInfo,final int suggestionsLimit){
  try {
    final String text=textInfo.getText();
    if (shouldFilterOut(text)) {
      DictAndProximity dictInfo=null;
      try {
        dictInfo=mDictionaryPool.takeOrGetNull();
        if (null == dictInfo)         return NOT_IN_DICT_EMPTY_SUGGESTIONS;
        return dictInfo.mDictionary.isValidWord(text) ? IN_DICT_EMPTY_SUGGESTIONS : NOT_IN_DICT_EMPTY_SUGGESTIONS;
      }
  finally {
        if (null != dictInfo) {
          if (!mDictionaryPool.offer(dictInfo)) {
            Log.e(TAG,""String_Node_Str"");
          }
        }
      }
    }
    final SuggestionsGatherer suggestionsGatherer=new SuggestionsGatherer(text,mService.mSuggestionThreshold,mService.mLikelyThreshold,suggestionsLimit);
    final WordComposer composer=new WordComposer();
    final int length=text.length();
    for (int i=0; i < length; ++i) {
      final int character=text.codePointAt(i);
      final int proximityIndex=SpellCheckerProximityInfo.getIndexOf(character);
      final int[] proximities;
      if (-1 == proximityIndex) {
        proximities=new int[]{character};
      }
 else {
        proximities=Arrays.copyOfRange(SpellCheckerProximityInfo.PROXIMITY,proximityIndex,proximityIndex + SpellCheckerProximityInfo.ROW_SIZE);
      }
      composer.add(character,proximities,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
    }
    final int capitalizeType=getCapitalizationType(text);
    boolean isInDict=true;
    DictAndProximity dictInfo=null;
    try {
      dictInfo=mDictionaryPool.takeOrGetNull();
      if (null == dictInfo)       return NOT_IN_DICT_EMPTY_SUGGESTIONS;
      dictInfo.mDictionary.getWords(composer,suggestionsGatherer,dictInfo.mProximityInfo);
      isInDict=dictInfo.mDictionary.isValidWord(text);
      if (!isInDict && CAPITALIZE_NONE != capitalizeType) {
        isInDict=dictInfo.mDictionary.isValidWord(text.toLowerCase(mLocale));
      }
    }
  finally {
      if (null != dictInfo) {
        if (!mDictionaryPool.offer(dictInfo)) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    final SuggestionsGatherer.Result result=suggestionsGatherer.getResults(capitalizeType,mLocale);
    if (DBG) {
      Log.i(TAG,""String_Node_Str"" + text + ""String_Node_Str""+ suggestionsLimit);
      Log.i(TAG,""String_Node_Str"" + isInDict);
      Log.i(TAG,""String_Node_Str"" + (!isInDict));
      Log.i(TAG,""String_Node_Str"" + result.mHasLikelySuggestions);
      if (null != result.mSuggestions) {
        for (        String suggestion : result.mSuggestions) {
          Log.i(TAG,suggestion);
        }
      }
    }
    final int flags=(isInDict ? SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY : SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO);
    return new SuggestionsInfo(flags,result.mSuggestions);
  }
 catch (  RuntimeException e) {
    if (DBG) {
      throw e;
    }
 else {
      Log.e(TAG,""String_Node_Str"" + e);
      return NOT_IN_DICT_EMPTY_SUGGESTIONS;
    }
  }
}",0.9895752295005446
88152,"/** 
 * Gets a list of suggestions for a specific string. This returns a list of possible corrections for the text passed as an argument. It may split or group words, and even perform grammatical analysis.
 */
@Override public SuggestionsInfo onGetSuggestions(final TextInfo textInfo,final int suggestionsLimit){
  try {
    final String text=textInfo.getText();
    if (shouldFilterOut(text)) {
      DictAndProximity dictInfo=null;
      try {
        dictInfo=mDictionaryPool.takeOrGetNull();
        if (null == dictInfo)         return NOT_IN_DICT_EMPTY_SUGGESTIONS;
        return dictInfo.mDictionary.isValidWord(text) ? IN_DICT_EMPTY_SUGGESTIONS : NOT_IN_DICT_EMPTY_SUGGESTIONS;
      }
  finally {
        if (null != dictInfo) {
          if (!mDictionaryPool.offer(dictInfo)) {
            Log.e(TAG,""String_Node_Str"");
          }
        }
      }
    }
    final SuggestionsGatherer suggestionsGatherer=new SuggestionsGatherer(text,mService.mSuggestionThreshold,mService.mLikelyThreshold,suggestionsLimit);
    final WordComposer composer=new WordComposer();
    final int length=text.length();
    for (int i=0; i < length; ++i) {
      final int character=text.codePointAt(i);
      final int proximityIndex=SpellCheckerProximityInfo.getIndexOf(character);
      final int[] proximities;
      if (-1 == proximityIndex) {
        proximities=new int[]{character};
      }
 else {
        proximities=Arrays.copyOfRange(SpellCheckerProximityInfo.PROXIMITY,proximityIndex,proximityIndex + SpellCheckerProximityInfo.ROW_SIZE);
      }
      composer.add(character,proximities,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
    }
    final int capitalizeType=getCapitalizationType(text);
    boolean isInDict=true;
    DictAndProximity dictInfo=null;
    try {
      dictInfo=mDictionaryPool.takeOrGetNull();
      if (null == dictInfo)       return NOT_IN_DICT_EMPTY_SUGGESTIONS;
      dictInfo.mDictionary.getWords(composer,suggestionsGatherer,dictInfo.mProximityInfo);
      isInDict=dictInfo.mDictionary.isValidWord(text);
      if (!isInDict && CAPITALIZE_NONE != capitalizeType) {
        isInDict=dictInfo.mDictionary.isValidWord(text.toLowerCase(mLocale));
      }
    }
  finally {
      if (null != dictInfo) {
        if (!mDictionaryPool.offer(dictInfo)) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    final SuggestionsGatherer.Result result=suggestionsGatherer.getResults(capitalizeType,mLocale);
    if (DBG) {
      Log.i(TAG,""String_Node_Str"" + text + ""String_Node_Str""+ suggestionsLimit);
      Log.i(TAG,""String_Node_Str"" + isInDict);
      Log.i(TAG,""String_Node_Str"" + (!isInDict));
      Log.i(TAG,""String_Node_Str"" + result.mHasLikelySuggestions);
      for (      String suggestion : result.mSuggestions) {
        Log.i(TAG,suggestion);
      }
    }
    final int flags=(isInDict ? SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY : SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO);
    return new SuggestionsInfo(flags,result.mSuggestions);
  }
 catch (  RuntimeException e) {
    if (DBG) {
      throw e;
    }
 else {
      Log.e(TAG,""String_Node_Str"" + e);
      return NOT_IN_DICT_EMPTY_SUGGESTIONS;
    }
  }
}","/** 
 * Gets a list of suggestions for a specific string. This returns a list of possible corrections for the text passed as an argument. It may split or group words, and even perform grammatical analysis.
 */
@Override public SuggestionsInfo onGetSuggestions(final TextInfo textInfo,final int suggestionsLimit){
  try {
    final String text=textInfo.getText();
    if (shouldFilterOut(text)) {
      DictAndProximity dictInfo=null;
      try {
        dictInfo=mDictionaryPool.takeOrGetNull();
        if (null == dictInfo)         return NOT_IN_DICT_EMPTY_SUGGESTIONS;
        return dictInfo.mDictionary.isValidWord(text) ? IN_DICT_EMPTY_SUGGESTIONS : NOT_IN_DICT_EMPTY_SUGGESTIONS;
      }
  finally {
        if (null != dictInfo) {
          if (!mDictionaryPool.offer(dictInfo)) {
            Log.e(TAG,""String_Node_Str"");
          }
        }
      }
    }
    final SuggestionsGatherer suggestionsGatherer=new SuggestionsGatherer(text,mService.mSuggestionThreshold,mService.mLikelyThreshold,suggestionsLimit);
    final WordComposer composer=new WordComposer();
    final int length=text.length();
    for (int i=0; i < length; ++i) {
      final int character=text.codePointAt(i);
      final int proximityIndex=SpellCheckerProximityInfo.getIndexOf(character);
      final int[] proximities;
      if (-1 == proximityIndex) {
        proximities=new int[]{character};
      }
 else {
        proximities=Arrays.copyOfRange(SpellCheckerProximityInfo.PROXIMITY,proximityIndex,proximityIndex + SpellCheckerProximityInfo.ROW_SIZE);
      }
      composer.add(character,proximities,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
    }
    final int capitalizeType=getCapitalizationType(text);
    boolean isInDict=true;
    DictAndProximity dictInfo=null;
    try {
      dictInfo=mDictionaryPool.takeOrGetNull();
      if (null == dictInfo)       return NOT_IN_DICT_EMPTY_SUGGESTIONS;
      dictInfo.mDictionary.getWords(composer,suggestionsGatherer,dictInfo.mProximityInfo);
      isInDict=dictInfo.mDictionary.isValidWord(text);
      if (!isInDict && CAPITALIZE_NONE != capitalizeType) {
        isInDict=dictInfo.mDictionary.isValidWord(text.toLowerCase(mLocale));
      }
    }
  finally {
      if (null != dictInfo) {
        if (!mDictionaryPool.offer(dictInfo)) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    final SuggestionsGatherer.Result result=suggestionsGatherer.getResults(capitalizeType,mLocale);
    if (DBG) {
      Log.i(TAG,""String_Node_Str"" + text + ""String_Node_Str""+ suggestionsLimit);
      Log.i(TAG,""String_Node_Str"" + isInDict);
      Log.i(TAG,""String_Node_Str"" + (!isInDict));
      Log.i(TAG,""String_Node_Str"" + result.mHasLikelySuggestions);
      if (null != result.mSuggestions) {
        for (        String suggestion : result.mSuggestions) {
          Log.i(TAG,suggestion);
        }
      }
    }
    final int flags=(isInDict ? SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY : SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO);
    return new SuggestionsInfo(flags,result.mSuggestions);
  }
 catch (  RuntimeException e) {
    if (DBG) {
      throw e;
    }
 else {
      Log.e(TAG,""String_Node_Str"" + e);
      return NOT_IN_DICT_EMPTY_SUGGESTIONS;
    }
  }
}",0.9895752295005446
88153,"private boolean hasAutoCorrectionForTypedWord(Map<String,Dictionary> dictionaries,WordComposer wordComposer,ArrayList<CharSequence> suggestions,CharSequence typedWord,int correctionMode){
  if (TextUtils.isEmpty(typedWord))   return false;
  boolean isValidWord=isValidWordForAutoCorrection(dictionaries,typedWord,false);
  return wordComposer.size() > 1 && suggestions.size() > 0 && isValidWord && (correctionMode == Suggest.CORRECTION_FULL || correctionMode == Suggest.CORRECTION_FULL_BIGRAM);
}","private boolean hasAutoCorrectionForTypedWord(Map<String,Dictionary> dictionaries,WordComposer wordComposer,ArrayList<CharSequence> suggestions,CharSequence typedWord,int correctionMode){
  if (TextUtils.isEmpty(typedWord))   return false;
  boolean allowsAutoCorrect=allowsToBeAutoCorrected(dictionaries,typedWord,false);
  return wordComposer.size() > 1 && suggestions.size() > 0 && !allowsAutoCorrect && (correctionMode == Suggest.CORRECTION_FULL || correctionMode == Suggest.CORRECTION_FULL_BIGRAM);
}",0.9141716566866268
88154,"public void updateSuggestions(){
  if ((mSuggest == null || !isSuggestionsRequested()) && !mVoiceProxy.isVoiceInputHighlighted()) {
    return;
  }
  mHandler.cancelUpdateSuggestions();
  mHandler.cancelUpdateBigramPredictions();
  if (!mHasUncommittedTypedChars) {
    setPunctuationSuggestions();
    return;
  }
  final WordComposer wordComposer=mWordComposer;
  final InputConnection ic=getCurrentInputConnection();
  final CharSequence prevWord;
  if (null == ic) {
    prevWord=null;
  }
 else {
    prevWord=EditingUtils.getPreviousWord(ic,mSettingsValues.mWordSeparators);
  }
  final SuggestedWords.Builder builder=mSuggest.getSuggestedWordBuilder(wordComposer,prevWord,mKeyboardSwitcher.getLatinKeyboard().getProximityInfo());
  boolean autoCorrectionAvailable=!mInputTypeNoAutoCorrect && mSuggest.hasAutoCorrection();
  final CharSequence typedWord=wordComposer.getTypedWord();
  final boolean typedWordValid=AutoCorrection.isValidWordForAutoCorrection(mSuggest.getUnigramDictionaries(),typedWord,preferCapitalization());
  if (mCorrectionMode == Suggest.CORRECTION_FULL || mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    autoCorrectionAvailable|=typedWordValid;
  }
  autoCorrectionAvailable&=!wordComposer.isMostlyCaps();
  autoCorrectionAvailable&=!TextEntryState.isRecorrecting();
  if (typedWord != null) {
    if (builder.size() > 1 || typedWord.length() == 1 || typedWordValid || mSuggestionsView.isShowingAddToDictionaryHint()) {
      builder.setTypedWordValid(typedWordValid).setHasMinimalSuggestion(autoCorrectionAvailable);
    }
 else {
      SuggestedWords previousSuggestions=mSuggestionsView.getSuggestions();
      if (previousSuggestions == mSettingsValues.mSuggestPuncList) {
        if (builder.size() == 0) {
          return;
        }
        previousSuggestions=SuggestedWords.EMPTY;
      }
      builder.addTypedWordAndPreviousSuggestions(typedWord,previousSuggestions);
    }
  }
  showSuggestions(builder.build(),typedWord);
}","public void updateSuggestions(){
  if ((mSuggest == null || !isSuggestionsRequested()) && !mVoiceProxy.isVoiceInputHighlighted()) {
    return;
  }
  mHandler.cancelUpdateSuggestions();
  mHandler.cancelUpdateBigramPredictions();
  if (!mHasUncommittedTypedChars) {
    setPunctuationSuggestions();
    return;
  }
  final WordComposer wordComposer=mWordComposer;
  final InputConnection ic=getCurrentInputConnection();
  final CharSequence prevWord;
  if (null == ic) {
    prevWord=null;
  }
 else {
    prevWord=EditingUtils.getPreviousWord(ic,mSettingsValues.mWordSeparators);
  }
  final SuggestedWords.Builder builder=mSuggest.getSuggestedWordBuilder(wordComposer,prevWord,mKeyboardSwitcher.getLatinKeyboard().getProximityInfo());
  boolean autoCorrectionAvailable=!mInputTypeNoAutoCorrect && mSuggest.hasAutoCorrection();
  final CharSequence typedWord=wordComposer.getTypedWord();
  final boolean allowsToBeAutoCorrected=AutoCorrection.allowsToBeAutoCorrected(mSuggest.getUnigramDictionaries(),typedWord,preferCapitalization());
  if (mCorrectionMode == Suggest.CORRECTION_FULL || mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    autoCorrectionAvailable|=(!allowsToBeAutoCorrected);
  }
  autoCorrectionAvailable&=!wordComposer.isMostlyCaps();
  autoCorrectionAvailable&=!TextEntryState.isRecorrecting();
  if (typedWord != null) {
    if (builder.size() > 1 || typedWord.length() == 1 || (!allowsToBeAutoCorrected) || mSuggestionsView.isShowingAddToDictionaryHint()) {
      builder.setTypedWordValid(!allowsToBeAutoCorrected).setHasMinimalSuggestion(autoCorrectionAvailable);
    }
 else {
      SuggestedWords previousSuggestions=mSuggestionsView.getSuggestions();
      if (previousSuggestions == mSettingsValues.mSuggestPuncList) {
        if (builder.size() == 0) {
          return;
        }
        previousSuggestions=SuggestedWords.EMPTY;
      }
      builder.addTypedWordAndPreviousSuggestions(typedWord,previousSuggestions);
    }
  }
  showSuggestions(builder.build(),typedWord);
}",0.95333667837431
88155,"public boolean isValidWord(CharSequence typed){
  return AutoCorrection.isValidWordForAutoCorrection(mSuggest.getUnigramDictionaries(),typed,false);
}","public boolean isValidWord(CharSequence typed){
  return AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),typed,false);
}",0.939929328621908
88156,"/** 
 * Gets a list of suggestions for a specific string. This returns a list of possible corrections for the text passed as an argument. It may split or group words, and even perform grammatical analysis.
 */
@Override public SuggestionsInfo onGetSuggestions(final TextInfo textInfo,final int suggestionsLimit){
  try {
    final String text=textInfo.getText();
    if (shouldFilterOut(text)) {
      DictAndProximity dictInfo=null;
      try {
        dictInfo=mDictionaryPool.takeOrGetNull();
        if (null == dictInfo)         return NOT_IN_DICT_EMPTY_SUGGESTIONS;
        return dictInfo.mDictionary.isValidWord(text) ? IN_DICT_EMPTY_SUGGESTIONS : NOT_IN_DICT_EMPTY_SUGGESTIONS;
      }
  finally {
        if (null != dictInfo) {
          if (!mDictionaryPool.offer(dictInfo)) {
            Log.e(TAG,""String_Node_Str"");
          }
        }
      }
    }
    final SuggestionsGatherer suggestionsGatherer=new SuggestionsGatherer(text,mService.mSuggestionThreshold,mService.mLikelyThreshold,suggestionsLimit);
    final WordComposer composer=new WordComposer();
    final int length=text.length();
    for (int i=0; i < length; ++i) {
      final int character=text.codePointAt(i);
      final int proximityIndex=SpellCheckerProximityInfo.getIndexOf(character);
      final int[] proximities;
      if (-1 == proximityIndex) {
        proximities=new int[]{character};
      }
 else {
        proximities=Arrays.copyOfRange(SpellCheckerProximityInfo.PROXIMITY,proximityIndex,proximityIndex + SpellCheckerProximityInfo.ROW_SIZE);
      }
      composer.add(character,proximities,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
    }
    final int capitalizeType=getCapitalizationType(text);
    boolean isInDict=true;
    DictAndProximity dictInfo=null;
    try {
      dictInfo=mDictionaryPool.takeOrGetNull();
      if (null == dictInfo)       return NOT_IN_DICT_EMPTY_SUGGESTIONS;
      dictInfo.mDictionary.getWords(composer,suggestionsGatherer,dictInfo.mProximityInfo);
      isInDict=dictInfo.mDictionary.isValidWord(text);
      if (!isInDict && CAPITALIZE_NONE != capitalizeType) {
        isInDict=dictInfo.mDictionary.isValidWord(text.toLowerCase(mLocale));
      }
    }
  finally {
      if (null != dictInfo) {
        if (!mDictionaryPool.offer(dictInfo)) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    final SuggestionsGatherer.Result result=suggestionsGatherer.getResults(capitalizeType,mLocale);
    if (DBG) {
      Log.i(TAG,""String_Node_Str"" + text + ""String_Node_Str""+ suggestionsLimit);
      Log.i(TAG,""String_Node_Str"" + isInDict);
      Log.i(TAG,""String_Node_Str"" + (!isInDict));
      Log.i(TAG,""String_Node_Str"" + result.mHasLikelySuggestions);
      for (      String suggestion : result.mSuggestions) {
        Log.i(TAG,suggestion);
      }
    }
    final int flags=(isInDict ? SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY : SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO);
    return new SuggestionsInfo(flags,result.mSuggestions);
  }
 catch (  RuntimeException e) {
    if (DBG) {
      throw e;
    }
 else {
      Log.e(TAG,""String_Node_Str"" + e);
      return NOT_IN_DICT_EMPTY_SUGGESTIONS;
    }
  }
}","/** 
 * Gets a list of suggestions for a specific string. This returns a list of possible corrections for the text passed as an argument. It may split or group words, and even perform grammatical analysis.
 */
@Override public SuggestionsInfo onGetSuggestions(final TextInfo textInfo,final int suggestionsLimit){
  try {
    final String text=textInfo.getText();
    if (shouldFilterOut(text)) {
      DictAndProximity dictInfo=null;
      try {
        dictInfo=mDictionaryPool.takeOrGetNull();
        if (null == dictInfo)         return NOT_IN_DICT_EMPTY_SUGGESTIONS;
        return dictInfo.mDictionary.isValidWord(text) ? IN_DICT_EMPTY_SUGGESTIONS : NOT_IN_DICT_EMPTY_SUGGESTIONS;
      }
  finally {
        if (null != dictInfo) {
          if (!mDictionaryPool.offer(dictInfo)) {
            Log.e(TAG,""String_Node_Str"");
          }
        }
      }
    }
    final SuggestionsGatherer suggestionsGatherer=new SuggestionsGatherer(text,mService.mSuggestionThreshold,mService.mLikelyThreshold,suggestionsLimit);
    final WordComposer composer=new WordComposer();
    final int length=text.length();
    for (int i=0; i < length; ++i) {
      final int character=text.codePointAt(i);
      final int proximityIndex=SpellCheckerProximityInfo.getIndexOf(character);
      final int[] proximities;
      if (-1 == proximityIndex) {
        proximities=new int[]{character};
      }
 else {
        proximities=Arrays.copyOfRange(SpellCheckerProximityInfo.PROXIMITY,proximityIndex,proximityIndex + SpellCheckerProximityInfo.ROW_SIZE);
      }
      composer.add(character,proximities,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
    }
    final int capitalizeType=getCapitalizationType(text);
    boolean isInDict=true;
    DictAndProximity dictInfo=null;
    try {
      dictInfo=mDictionaryPool.takeOrGetNull();
      if (null == dictInfo)       return NOT_IN_DICT_EMPTY_SUGGESTIONS;
      dictInfo.mDictionary.getWords(composer,suggestionsGatherer,dictInfo.mProximityInfo);
      isInDict=dictInfo.mDictionary.isValidWord(text);
      if (!isInDict && CAPITALIZE_NONE != capitalizeType) {
        isInDict=dictInfo.mDictionary.isValidWord(text.toLowerCase(mLocale));
      }
    }
  finally {
      if (null != dictInfo) {
        if (!mDictionaryPool.offer(dictInfo)) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    final SuggestionsGatherer.Result result=suggestionsGatherer.getResults(capitalizeType,mLocale);
    if (DBG) {
      Log.i(TAG,""String_Node_Str"" + text + ""String_Node_Str""+ suggestionsLimit);
      Log.i(TAG,""String_Node_Str"" + isInDict);
      Log.i(TAG,""String_Node_Str"" + (!isInDict));
      Log.i(TAG,""String_Node_Str"" + result.mHasLikelySuggestions);
      if (null != result.mSuggestions) {
        for (        String suggestion : result.mSuggestions) {
          Log.i(TAG,suggestion);
        }
      }
    }
    final int flags=(isInDict ? SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY : SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO);
    return new SuggestionsInfo(flags,result.mSuggestions);
  }
 catch (  RuntimeException e) {
    if (DBG) {
      throw e;
    }
 else {
      Log.e(TAG,""String_Node_Str"" + e);
      return NOT_IN_DICT_EMPTY_SUGGESTIONS;
    }
  }
}",0.9895752295005446
88157,"public void updateSuggestions(){
  if ((mSuggest == null || !isSuggestionsRequested()) && !mVoiceProxy.isVoiceInputHighlighted()) {
    return;
  }
  if (!mHasUncommittedTypedChars) {
    setPunctuationSuggestions();
    return;
  }
  final WordComposer wordComposer=mWordComposer;
  final InputConnection ic=getCurrentInputConnection();
  final CharSequence prevWord;
  if (null == ic) {
    prevWord=null;
  }
 else {
    prevWord=EditingUtils.getPreviousWord(ic,mSettingsValues.mWordSeparators);
  }
  final SuggestedWords.Builder builder=mSuggest.getSuggestedWordBuilder(wordComposer,prevWord,mKeyboardSwitcher.getLatinKeyboard().getProximityInfo());
  boolean autoCorrectionAvailable=!mInputTypeNoAutoCorrect && mSuggest.hasAutoCorrection();
  final CharSequence typedWord=wordComposer.getTypedWord();
  final boolean typedWordValid=AutoCorrection.isValidWordForAutoCorrection(mSuggest.getUnigramDictionaries(),typedWord,preferCapitalization());
  if (mCorrectionMode == Suggest.CORRECTION_FULL || mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    autoCorrectionAvailable|=typedWordValid;
  }
  autoCorrectionAvailable&=!wordComposer.isMostlyCaps();
  autoCorrectionAvailable&=!TextEntryState.isRecorrecting();
  if (typedWord != null) {
    if (builder.size() > 1 || typedWord.length() == 1 || typedWordValid || mSuggestionsView.isShowingAddToDictionaryHint()) {
      builder.setTypedWordValid(typedWordValid).setHasMinimalSuggestion(autoCorrectionAvailable);
    }
 else {
      SuggestedWords previousSuggestions=mSuggestionsView.getSuggestions();
      if (previousSuggestions == mSettingsValues.mSuggestPuncList) {
        if (builder.size() == 0) {
          return;
        }
        previousSuggestions=SuggestedWords.EMPTY;
      }
      builder.addTypedWordAndPreviousSuggestions(typedWord,previousSuggestions);
    }
  }
  showSuggestions(builder.build(),typedWord);
}","public void updateSuggestions(){
  if ((mSuggest == null || !isSuggestionsRequested()) && !mVoiceProxy.isVoiceInputHighlighted()) {
    return;
  }
  mHandler.cancelUpdateSuggestions();
  mHandler.cancelUpdateOldSuggestions();
  mHandler.cancelUpdateBigramPredictions();
  if (!mHasUncommittedTypedChars) {
    setPunctuationSuggestions();
    return;
  }
  final WordComposer wordComposer=mWordComposer;
  final InputConnection ic=getCurrentInputConnection();
  final CharSequence prevWord;
  if (null == ic) {
    prevWord=null;
  }
 else {
    prevWord=EditingUtils.getPreviousWord(ic,mSettingsValues.mWordSeparators);
  }
  final SuggestedWords.Builder builder=mSuggest.getSuggestedWordBuilder(wordComposer,prevWord,mKeyboardSwitcher.getLatinKeyboard().getProximityInfo());
  boolean autoCorrectionAvailable=!mInputTypeNoAutoCorrect && mSuggest.hasAutoCorrection();
  final CharSequence typedWord=wordComposer.getTypedWord();
  final boolean typedWordValid=AutoCorrection.isValidWordForAutoCorrection(mSuggest.getUnigramDictionaries(),typedWord,preferCapitalization());
  if (mCorrectionMode == Suggest.CORRECTION_FULL || mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    autoCorrectionAvailable|=typedWordValid;
  }
  autoCorrectionAvailable&=!wordComposer.isMostlyCaps();
  autoCorrectionAvailable&=!TextEntryState.isRecorrecting();
  if (typedWord != null) {
    if (builder.size() > 1 || typedWord.length() == 1 || typedWordValid || mSuggestionsView.isShowingAddToDictionaryHint()) {
      builder.setTypedWordValid(typedWordValid).setHasMinimalSuggestion(autoCorrectionAvailable);
    }
 else {
      SuggestedWords previousSuggestions=mSuggestionsView.getSuggestions();
      if (previousSuggestions == mSettingsValues.mSuggestPuncList) {
        if (builder.size() == 0) {
          return;
        }
        previousSuggestions=SuggestedWords.EMPTY;
      }
      builder.addTypedWordAndPreviousSuggestions(typedWord,previousSuggestions);
    }
  }
  showSuggestions(builder.build(),typedWord);
}",0.9685180445354492
88158,"@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (DEBUG) {
    Log.i(TAG,""String_Node_Str"" + oldSelStart + ""String_Node_Str""+ oldSelEnd+ ""String_Node_Str""+ mLastSelectionStart+ ""String_Node_Str""+ mLastSelectionEnd+ ""String_Node_Str""+ newSelStart+ ""String_Node_Str""+ newSelEnd+ ""String_Node_Str""+ candidatesStart+ ""String_Node_Str""+ candidatesEnd);
  }
  mVoiceProxy.setCursorAndSelection(newSelEnd,newSelStart);
  final boolean selectionChanged=(newSelStart != candidatesEnd || newSelEnd != candidatesEnd) && mLastSelectionStart != newSelStart;
  final boolean candidatesCleared=candidatesStart == -1 && candidatesEnd == -1;
  if (!mExpectingUpdateSelection) {
    if (((mComposingStringBuilder.length() > 0 && mHasUncommittedTypedChars) || mVoiceProxy.isVoiceInputHighlighted()) && (selectionChanged || candidatesCleared)) {
      if (candidatesCleared) {
        mRecorrection.saveRecorrectionSuggestion(mWordComposer,mComposingStringBuilder);
      }
      mComposingStringBuilder.setLength(0);
      mHasUncommittedTypedChars=false;
      if (isCursorTouchingWord()) {
        mHandler.cancelUpdateBigramPredictions();
        mHandler.postUpdateSuggestions();
      }
 else {
        setPunctuationSuggestions();
      }
      TextEntryState.reset();
      final InputConnection ic=getCurrentInputConnection();
      if (ic != null) {
        ic.finishComposingText();
      }
      mVoiceProxy.setVoiceInputHighlighted(false);
    }
 else     if (!mHasUncommittedTypedChars && TextEntryState.isAcceptedDefault()) {
      TextEntryState.reset();
    }
    mJustAddedMagicSpace=false;
    mJustReplacedDoubleSpace=false;
  }
  mExpectingUpdateSelection=false;
  mHandler.postUpdateShiftKeyState();
  mLastSelectionStart=newSelStart;
  mLastSelectionEnd=newSelEnd;
  mRecorrection.updateRecorrectionSelection(mKeyboardSwitcher,mSuggestionsView,candidatesStart,candidatesEnd,newSelStart,newSelEnd,oldSelStart,mLastSelectionStart,mLastSelectionEnd,mHasUncommittedTypedChars);
}","@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (DEBUG) {
    Log.i(TAG,""String_Node_Str"" + oldSelStart + ""String_Node_Str""+ oldSelEnd+ ""String_Node_Str""+ mLastSelectionStart+ ""String_Node_Str""+ mLastSelectionEnd+ ""String_Node_Str""+ newSelStart+ ""String_Node_Str""+ newSelEnd+ ""String_Node_Str""+ candidatesStart+ ""String_Node_Str""+ candidatesEnd);
  }
  mVoiceProxy.setCursorAndSelection(newSelEnd,newSelStart);
  final boolean selectionChanged=(newSelStart != candidatesEnd || newSelEnd != candidatesEnd) && mLastSelectionStart != newSelStart;
  final boolean candidatesCleared=candidatesStart == -1 && candidatesEnd == -1;
  if (!mExpectingUpdateSelection) {
    if (((mComposingStringBuilder.length() > 0 && mHasUncommittedTypedChars) || mVoiceProxy.isVoiceInputHighlighted()) && (selectionChanged || candidatesCleared)) {
      if (candidatesCleared) {
        mRecorrection.saveRecorrectionSuggestion(mWordComposer,mComposingStringBuilder);
      }
      mComposingStringBuilder.setLength(0);
      mHasUncommittedTypedChars=false;
      TextEntryState.reset();
      updateSuggestions();
      final InputConnection ic=getCurrentInputConnection();
      if (ic != null) {
        ic.finishComposingText();
      }
      mVoiceProxy.setVoiceInputHighlighted(false);
    }
 else     if (!mHasUncommittedTypedChars) {
      TextEntryState.reset();
      updateSuggestions();
    }
    mJustAddedMagicSpace=false;
    mJustReplacedDoubleSpace=false;
  }
  mExpectingUpdateSelection=false;
  mHandler.postUpdateShiftKeyState();
  mLastSelectionStart=newSelStart;
  mLastSelectionEnd=newSelEnd;
  mRecorrection.updateRecorrectionSelection(mKeyboardSwitcher,mSuggestionsView,candidatesStart,candidatesEnd,newSelStart,newSelEnd,oldSelStart,mLastSelectionStart,mLastSelectionEnd,mHasUncommittedTypedChars);
}",0.9174443646805456
88159,"public void updateSuggestions(){
  if ((mSuggest == null || !isSuggestionsRequested()) && !mVoiceProxy.isVoiceInputHighlighted()) {
    return;
  }
  if (!mHasUncommittedTypedChars) {
    setPunctuationSuggestions();
    return;
  }
  final WordComposer wordComposer=mWordComposer;
  final InputConnection ic=getCurrentInputConnection();
  final CharSequence prevWord;
  if (null == ic) {
    prevWord=null;
  }
 else {
    prevWord=EditingUtils.getPreviousWord(ic,mSettingsValues.mWordSeparators);
  }
  final SuggestedWords.Builder builder=mSuggest.getSuggestedWordBuilder(wordComposer,prevWord,mKeyboardSwitcher.getLatinKeyboard().getProximityInfo());
  boolean autoCorrectionAvailable=!mInputTypeNoAutoCorrect && mSuggest.hasAutoCorrection();
  final CharSequence typedWord=wordComposer.getTypedWord();
  final boolean typedWordValid=AutoCorrection.isValidWordForAutoCorrection(mSuggest.getUnigramDictionaries(),typedWord,preferCapitalization());
  if (mCorrectionMode == Suggest.CORRECTION_FULL || mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    autoCorrectionAvailable|=typedWordValid;
  }
  autoCorrectionAvailable&=!wordComposer.isMostlyCaps();
  autoCorrectionAvailable&=!TextEntryState.isRecorrecting();
  if (typedWord != null) {
    if (builder.size() > 1 || typedWord.length() == 1 || typedWordValid || mSuggestionsView.isShowingAddToDictionaryHint()) {
      builder.setTypedWordValid(typedWordValid).setHasMinimalSuggestion(autoCorrectionAvailable);
    }
 else {
      SuggestedWords previousSuggestions=mSuggestionsView.getSuggestions();
      if (previousSuggestions == mSettingsValues.mSuggestPuncList) {
        if (builder.size() == 0) {
          return;
        }
        previousSuggestions=SuggestedWords.EMPTY;
      }
      builder.addTypedWordAndPreviousSuggestions(typedWord,previousSuggestions);
    }
  }
  showSuggestions(builder.build(),typedWord);
}","public void updateSuggestions(){
  if ((mSuggest == null || !isSuggestionsRequested()) && !mVoiceProxy.isVoiceInputHighlighted()) {
    return;
  }
  mHandler.cancelUpdateSuggestions();
  mHandler.cancelUpdateOldSuggestions();
  mHandler.cancelUpdateBigramPredictions();
  if (!mHasUncommittedTypedChars) {
    setPunctuationSuggestions();
    return;
  }
  final WordComposer wordComposer=mWordComposer;
  final InputConnection ic=getCurrentInputConnection();
  final CharSequence prevWord;
  if (null == ic) {
    prevWord=null;
  }
 else {
    prevWord=EditingUtils.getPreviousWord(ic,mSettingsValues.mWordSeparators);
  }
  final SuggestedWords.Builder builder=mSuggest.getSuggestedWordBuilder(wordComposer,prevWord,mKeyboardSwitcher.getLatinKeyboard().getProximityInfo());
  boolean autoCorrectionAvailable=!mInputTypeNoAutoCorrect && mSuggest.hasAutoCorrection();
  final CharSequence typedWord=wordComposer.getTypedWord();
  final boolean typedWordValid=AutoCorrection.isValidWordForAutoCorrection(mSuggest.getUnigramDictionaries(),typedWord,preferCapitalization());
  if (mCorrectionMode == Suggest.CORRECTION_FULL || mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    autoCorrectionAvailable|=typedWordValid;
  }
  autoCorrectionAvailable&=!wordComposer.isMostlyCaps();
  autoCorrectionAvailable&=!TextEntryState.isRecorrecting();
  if (typedWord != null) {
    if (builder.size() > 1 || typedWord.length() == 1 || typedWordValid || mSuggestionsView.isShowingAddToDictionaryHint()) {
      builder.setTypedWordValid(typedWordValid).setHasMinimalSuggestion(autoCorrectionAvailable);
    }
 else {
      SuggestedWords previousSuggestions=mSuggestionsView.getSuggestions();
      if (previousSuggestions == mSettingsValues.mSuggestPuncList) {
        if (builder.size() == 0) {
          return;
        }
        previousSuggestions=SuggestedWords.EMPTY;
      }
      builder.addTypedWordAndPreviousSuggestions(typedWord,previousSuggestions);
    }
  }
  showSuggestions(builder.build(),typedWord);
}",0.9685180445354492
88160,"@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (DEBUG) {
    Log.i(TAG,""String_Node_Str"" + oldSelStart + ""String_Node_Str""+ oldSelEnd+ ""String_Node_Str""+ mLastSelectionStart+ ""String_Node_Str""+ mLastSelectionEnd+ ""String_Node_Str""+ newSelStart+ ""String_Node_Str""+ newSelEnd+ ""String_Node_Str""+ candidatesStart+ ""String_Node_Str""+ candidatesEnd);
  }
  mVoiceProxy.setCursorAndSelection(newSelEnd,newSelStart);
  final boolean selectionChanged=(newSelStart != candidatesEnd || newSelEnd != candidatesEnd) && mLastSelectionStart != newSelStart;
  final boolean candidatesCleared=candidatesStart == -1 && candidatesEnd == -1;
  if (!mExpectingUpdateSelection) {
    if (((mComposingStringBuilder.length() > 0 && mHasUncommittedTypedChars) || mVoiceProxy.isVoiceInputHighlighted()) && (selectionChanged || candidatesCleared)) {
      if (candidatesCleared) {
        mRecorrection.saveRecorrectionSuggestion(mWordComposer,mComposingStringBuilder);
      }
      mComposingStringBuilder.setLength(0);
      mHasUncommittedTypedChars=false;
      if (isCursorTouchingWord()) {
        mHandler.cancelUpdateBigramPredictions();
        mHandler.postUpdateSuggestions();
      }
 else {
        setPunctuationSuggestions();
      }
      TextEntryState.reset();
      final InputConnection ic=getCurrentInputConnection();
      if (ic != null) {
        ic.finishComposingText();
      }
      mVoiceProxy.setVoiceInputHighlighted(false);
    }
 else     if (!mHasUncommittedTypedChars && TextEntryState.isAcceptedDefault()) {
      TextEntryState.reset();
    }
    mJustAddedMagicSpace=false;
    mJustReplacedDoubleSpace=false;
  }
  mExpectingUpdateSelection=false;
  mHandler.postUpdateShiftKeyState();
  mLastSelectionStart=newSelStart;
  mLastSelectionEnd=newSelEnd;
  mRecorrection.updateRecorrectionSelection(mKeyboardSwitcher,mSuggestionsView,candidatesStart,candidatesEnd,newSelStart,newSelEnd,oldSelStart,mLastSelectionStart,mLastSelectionEnd,mHasUncommittedTypedChars);
}","@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (DEBUG) {
    Log.i(TAG,""String_Node_Str"" + oldSelStart + ""String_Node_Str""+ oldSelEnd+ ""String_Node_Str""+ mLastSelectionStart+ ""String_Node_Str""+ mLastSelectionEnd+ ""String_Node_Str""+ newSelStart+ ""String_Node_Str""+ newSelEnd+ ""String_Node_Str""+ candidatesStart+ ""String_Node_Str""+ candidatesEnd);
  }
  mVoiceProxy.setCursorAndSelection(newSelEnd,newSelStart);
  final boolean selectionChanged=(newSelStart != candidatesEnd || newSelEnd != candidatesEnd) && mLastSelectionStart != newSelStart;
  final boolean candidatesCleared=candidatesStart == -1 && candidatesEnd == -1;
  if (!mExpectingUpdateSelection) {
    if (((mComposingStringBuilder.length() > 0 && mHasUncommittedTypedChars) || mVoiceProxy.isVoiceInputHighlighted()) && (selectionChanged || candidatesCleared)) {
      if (candidatesCleared) {
        mRecorrection.saveRecorrectionSuggestion(mWordComposer,mComposingStringBuilder);
      }
      mComposingStringBuilder.setLength(0);
      mHasUncommittedTypedChars=false;
      TextEntryState.reset();
      updateSuggestions();
      final InputConnection ic=getCurrentInputConnection();
      if (ic != null) {
        ic.finishComposingText();
      }
      mVoiceProxy.setVoiceInputHighlighted(false);
    }
 else     if (!mHasUncommittedTypedChars) {
      TextEntryState.reset();
      updateSuggestions();
    }
    mJustAddedMagicSpace=false;
    mJustReplacedDoubleSpace=false;
  }
  mExpectingUpdateSelection=false;
  mHandler.postUpdateShiftKeyState();
  mLastSelectionStart=newSelStart;
  mLastSelectionEnd=newSelEnd;
  mRecorrection.updateRecorrectionSelection(mKeyboardSwitcher,mSuggestionsView,candidatesStart,candidatesEnd,newSelStart,newSelEnd,oldSelStart,mLastSelectionStart,mLastSelectionEnd,mHasUncommittedTypedChars);
}",0.9174443646805456
88161,"public void updateSuggestions(){
  if ((mSuggest == null || !isSuggestionsRequested()) && !mVoiceProxy.isVoiceInputHighlighted()) {
    return;
  }
  if (!mHasUncommittedTypedChars) {
    setPunctuationSuggestions();
    return;
  }
  final WordComposer wordComposer=mWordComposer;
  final InputConnection ic=getCurrentInputConnection();
  final CharSequence prevWord;
  if (null == ic) {
    prevWord=null;
  }
 else {
    prevWord=EditingUtils.getPreviousWord(ic,mSettingsValues.mWordSeparators);
  }
  final SuggestedWords.Builder builder=mSuggest.getSuggestedWordBuilder(wordComposer,prevWord,mKeyboardSwitcher.getLatinKeyboard().getProximityInfo());
  boolean autoCorrectionAvailable=!mInputTypeNoAutoCorrect && mSuggest.hasAutoCorrection();
  final CharSequence typedWord=wordComposer.getTypedWord();
  final boolean typedWordValid=AutoCorrection.isValidWordForAutoCorrection(mSuggest.getUnigramDictionaries(),typedWord,preferCapitalization());
  if (mCorrectionMode == Suggest.CORRECTION_FULL || mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    autoCorrectionAvailable|=typedWordValid;
  }
  autoCorrectionAvailable&=!wordComposer.isMostlyCaps();
  autoCorrectionAvailable&=!TextEntryState.isRecorrecting();
  if (typedWord != null) {
    if (builder.size() > 1 || typedWord.length() == 1 || typedWordValid || mSuggestionsView.isShowingAddToDictionaryHint()) {
      builder.setTypedWordValid(typedWordValid).setHasMinimalSuggestion(autoCorrectionAvailable);
    }
 else {
      SuggestedWords previousSuggestions=mSuggestionsView.getSuggestions();
      if (previousSuggestions == mSettingsValues.mSuggestPuncList) {
        if (builder.size() == 0) {
          return;
        }
        previousSuggestions=SuggestedWords.EMPTY;
      }
      builder.addTypedWordAndPreviousSuggestions(typedWord,previousSuggestions);
    }
  }
  showSuggestions(builder.build(),typedWord);
}","public void updateSuggestions(){
  if ((mSuggest == null || !isSuggestionsRequested()) && !mVoiceProxy.isVoiceInputHighlighted()) {
    return;
  }
  mHandler.cancelUpdateSuggestions();
  mHandler.cancelUpdateOldSuggestions();
  mHandler.cancelUpdateBigramPredictions();
  if (!mHasUncommittedTypedChars) {
    setPunctuationSuggestions();
    return;
  }
  final WordComposer wordComposer=mWordComposer;
  final InputConnection ic=getCurrentInputConnection();
  final CharSequence prevWord;
  if (null == ic) {
    prevWord=null;
  }
 else {
    prevWord=EditingUtils.getPreviousWord(ic,mSettingsValues.mWordSeparators);
  }
  final SuggestedWords.Builder builder=mSuggest.getSuggestedWordBuilder(wordComposer,prevWord,mKeyboardSwitcher.getLatinKeyboard().getProximityInfo());
  boolean autoCorrectionAvailable=!mInputTypeNoAutoCorrect && mSuggest.hasAutoCorrection();
  final CharSequence typedWord=wordComposer.getTypedWord();
  final boolean typedWordValid=AutoCorrection.isValidWordForAutoCorrection(mSuggest.getUnigramDictionaries(),typedWord,preferCapitalization());
  if (mCorrectionMode == Suggest.CORRECTION_FULL || mCorrectionMode == Suggest.CORRECTION_FULL_BIGRAM) {
    autoCorrectionAvailable|=typedWordValid;
  }
  autoCorrectionAvailable&=!wordComposer.isMostlyCaps();
  autoCorrectionAvailable&=!TextEntryState.isRecorrecting();
  if (typedWord != null) {
    if (builder.size() > 1 || typedWord.length() == 1 || typedWordValid || mSuggestionsView.isShowingAddToDictionaryHint()) {
      builder.setTypedWordValid(typedWordValid).setHasMinimalSuggestion(autoCorrectionAvailable);
    }
 else {
      SuggestedWords previousSuggestions=mSuggestionsView.getSuggestions();
      if (previousSuggestions == mSettingsValues.mSuggestPuncList) {
        if (builder.size() == 0) {
          return;
        }
        previousSuggestions=SuggestedWords.EMPTY;
      }
      builder.addTypedWordAndPreviousSuggestions(typedWord,previousSuggestions);
    }
  }
  showSuggestions(builder.build(),typedWord);
}",0.9685180445354492
88162,"@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (DEBUG) {
    Log.i(TAG,""String_Node_Str"" + oldSelStart + ""String_Node_Str""+ oldSelEnd+ ""String_Node_Str""+ mLastSelectionStart+ ""String_Node_Str""+ mLastSelectionEnd+ ""String_Node_Str""+ newSelStart+ ""String_Node_Str""+ newSelEnd+ ""String_Node_Str""+ candidatesStart+ ""String_Node_Str""+ candidatesEnd);
  }
  mVoiceProxy.setCursorAndSelection(newSelEnd,newSelStart);
  final boolean selectionChanged=(newSelStart != candidatesEnd || newSelEnd != candidatesEnd) && mLastSelectionStart != newSelStart;
  final boolean candidatesCleared=candidatesStart == -1 && candidatesEnd == -1;
  if (!mExpectingUpdateSelection) {
    if (((mComposingStringBuilder.length() > 0 && mHasUncommittedTypedChars) || mVoiceProxy.isVoiceInputHighlighted()) && (selectionChanged || candidatesCleared)) {
      if (candidatesCleared) {
        mRecorrection.saveRecorrectionSuggestion(mWordComposer,mComposingStringBuilder);
      }
      mComposingStringBuilder.setLength(0);
      mHasUncommittedTypedChars=false;
      if (isCursorTouchingWord()) {
        mHandler.cancelUpdateBigramPredictions();
        mHandler.postUpdateSuggestions();
      }
 else {
        setPunctuationSuggestions();
      }
      TextEntryState.reset();
      final InputConnection ic=getCurrentInputConnection();
      if (ic != null) {
        ic.finishComposingText();
      }
      mVoiceProxy.setVoiceInputHighlighted(false);
    }
 else     if (!mHasUncommittedTypedChars && TextEntryState.isAcceptedDefault()) {
      TextEntryState.reset();
    }
    mJustAddedMagicSpace=false;
    mJustReplacedDoubleSpace=false;
  }
  mExpectingUpdateSelection=false;
  mHandler.postUpdateShiftKeyState();
  mLastSelectionStart=newSelStart;
  mLastSelectionEnd=newSelEnd;
  mRecorrection.updateRecorrectionSelection(mKeyboardSwitcher,mSuggestionsView,candidatesStart,candidatesEnd,newSelStart,newSelEnd,oldSelStart,mLastSelectionStart,mLastSelectionEnd,mHasUncommittedTypedChars);
}","@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (DEBUG) {
    Log.i(TAG,""String_Node_Str"" + oldSelStart + ""String_Node_Str""+ oldSelEnd+ ""String_Node_Str""+ mLastSelectionStart+ ""String_Node_Str""+ mLastSelectionEnd+ ""String_Node_Str""+ newSelStart+ ""String_Node_Str""+ newSelEnd+ ""String_Node_Str""+ candidatesStart+ ""String_Node_Str""+ candidatesEnd);
  }
  mVoiceProxy.setCursorAndSelection(newSelEnd,newSelStart);
  final boolean selectionChanged=(newSelStart != candidatesEnd || newSelEnd != candidatesEnd) && mLastSelectionStart != newSelStart;
  final boolean candidatesCleared=candidatesStart == -1 && candidatesEnd == -1;
  if (!mExpectingUpdateSelection) {
    if (((mComposingStringBuilder.length() > 0 && mHasUncommittedTypedChars) || mVoiceProxy.isVoiceInputHighlighted()) && (selectionChanged || candidatesCleared)) {
      if (candidatesCleared) {
        mRecorrection.saveRecorrectionSuggestion(mWordComposer,mComposingStringBuilder);
      }
      mComposingStringBuilder.setLength(0);
      mHasUncommittedTypedChars=false;
      TextEntryState.reset();
      updateSuggestions();
      final InputConnection ic=getCurrentInputConnection();
      if (ic != null) {
        ic.finishComposingText();
      }
      mVoiceProxy.setVoiceInputHighlighted(false);
    }
 else     if (!mHasUncommittedTypedChars) {
      TextEntryState.reset();
      updateSuggestions();
    }
    mJustAddedMagicSpace=false;
    mJustReplacedDoubleSpace=false;
  }
  mExpectingUpdateSelection=false;
  mHandler.postUpdateShiftKeyState();
  mLastSelectionStart=newSelStart;
  mLastSelectionEnd=newSelEnd;
  mRecorrection.updateRecorrectionSelection(mKeyboardSwitcher,mSuggestionsView,candidatesStart,candidatesEnd,newSelStart,newSelEnd,oldSelStart,mLastSelectionStart,mLastSelectionEnd,mHasUncommittedTypedChars);
}",0.9174443646805456
88163,"@Override public void characters(char[] ch,int start,int length){
  if (WORD == mState) {
    final String word=String.copyValueOf(ch,start,length);
    mDictionary.add(word,mFreq,mBigramsMap.get(word));
  }
}","@Override public void characters(char[] ch,int start,int length){
  if (WORD == mState) {
    mWord+=String.copyValueOf(ch,start,length);
  }
}",0.7954545454545454
88164,"@Override public void endElement(String uri,String localName,String qName){
  if (WORD == mState)   mState=START;
}","@Override public void endElement(String uri,String localName,String qName){
  if (WORD == mState) {
    mDictionary.add(mWord,mFreq,mBigramsMap.get(mWord));
    mState=START;
  }
}",0.7796610169491526
88165,"/** 
 * Create the handler.
 * @param dict the dictionary to construct.
 * @param bigrams the bigrams as a map. This may be empty, but may not be null.
 */
public UnigramHandler(FusionDictionary dict,HashMap<String,ArrayList<WeightedString>> bigrams){
  mDictionary=dict;
  mBigramsMap=bigrams;
  mState=START;
  mFreq=0;
}","/** 
 * Create the handler.
 * @param dict the dictionary to construct.
 * @param bigrams the bigrams as a map. This may be empty, but may not be null.
 */
public UnigramHandler(FusionDictionary dict,HashMap<String,ArrayList<WeightedString>> bigrams){
  mDictionary=dict;
  mBigramsMap=bigrams;
  mWord=""String_Node_Str"";
  mState=START;
  mFreq=0;
}",0.9598811292719168
88166,"@Override public void characters(char[] ch,int start,int length){
  if (WORD == mState) {
    final String word=String.copyValueOf(ch,start,length);
    mDictionary.add(word,mFreq,mBigramsMap.get(word));
  }
}","@Override public void characters(char[] ch,int start,int length){
  if (WORD == mState) {
    mWord+=String.copyValueOf(ch,start,length);
  }
}",0.7954545454545454
88167,"@Override public void endElement(String uri,String localName,String qName){
  if (WORD == mState)   mState=START;
}","@Override public void endElement(String uri,String localName,String qName){
  if (WORD == mState) {
    mDictionary.add(mWord,mFreq,mBigramsMap.get(mWord));
    mState=START;
  }
}",0.7796610169491526
88168,"/** 
 * Create the handler.
 * @param dict the dictionary to construct.
 * @param bigrams the bigrams as a map. This may be empty, but may not be null.
 */
public UnigramHandler(FusionDictionary dict,HashMap<String,ArrayList<WeightedString>> bigrams){
  mDictionary=dict;
  mBigramsMap=bigrams;
  mState=START;
  mFreq=0;
}","/** 
 * Create the handler.
 * @param dict the dictionary to construct.
 * @param bigrams the bigrams as a map. This may be empty, but may not be null.
 */
public UnigramHandler(FusionDictionary dict,HashMap<String,ArrayList<WeightedString>> bigrams){
  mDictionary=dict;
  mBigramsMap=bigrams;
  mWord=""String_Node_Str"";
  mState=START;
  mFreq=0;
}",0.9598811292719168
88169,"@Override public void characters(char[] ch,int start,int length){
  if (WORD == mState) {
    final String word=String.copyValueOf(ch,start,length);
    mDictionary.add(word,mFreq,mBigramsMap.get(word));
  }
}","@Override public void characters(char[] ch,int start,int length){
  if (WORD == mState) {
    mWord+=String.copyValueOf(ch,start,length);
  }
}",0.7954545454545454
88170,"@Override public void endElement(String uri,String localName,String qName){
  if (WORD == mState)   mState=START;
}","@Override public void endElement(String uri,String localName,String qName){
  if (WORD == mState) {
    mDictionary.add(mWord,mFreq,mBigramsMap.get(mWord));
    mState=START;
  }
}",0.7796610169491526
88171,"/** 
 * Create the handler.
 * @param dict the dictionary to construct.
 * @param bigrams the bigrams as a map. This may be empty, but may not be null.
 */
public UnigramHandler(FusionDictionary dict,HashMap<String,ArrayList<WeightedString>> bigrams){
  mDictionary=dict;
  mBigramsMap=bigrams;
  mState=START;
  mFreq=0;
}","/** 
 * Create the handler.
 * @param dict the dictionary to construct.
 * @param bigrams the bigrams as a map. This may be empty, but may not be null.
 */
public UnigramHandler(FusionDictionary dict,HashMap<String,ArrayList<WeightedString>> bigrams){
  mDictionary=dict;
  mBigramsMap=bigrams;
  mWord=""String_Node_Str"";
  mState=START;
  mFreq=0;
}",0.9598811292719168
88172,"/** 
 * Add a word to this dictionary. The bigrams, if any, have to be in the dictionary already. If they aren't, an exception is thrown.
 * @param word the word, as an int array.
 * @param frequency the frequency of the word, in the range [0..255].
 * @param bigrams an optional list of bigrams for this word (null if none).
 */
private void add(int[] word,int frequency,ArrayList<WeightedString> bigrams){
  assert(frequency >= 0 && frequency <= 255);
  Node currentNode=mRoot;
  int charIndex=0;
  CharGroup currentGroup=null;
  int differentCharIndex=0;
  int nodeIndex=findIndexOfChar(mRoot,word[charIndex]);
  while (CHARACTER_NOT_FOUND != nodeIndex) {
    currentGroup=currentNode.mData.get(nodeIndex);
    differentCharIndex=compareArrays(currentGroup.mChars,word,charIndex);
    if (ARRAYS_ARE_EQUAL != differentCharIndex && differentCharIndex < currentGroup.mChars.length)     break;
    if (null == currentGroup.mChildren)     break;
    charIndex+=currentGroup.mChars.length;
    if (charIndex >= word.length)     break;
    currentNode=currentGroup.mChildren;
    nodeIndex=findIndexOfChar(currentNode,word[charIndex]);
  }
  if (-1 == nodeIndex) {
    final int insertionIndex=findInsertionIndex(currentNode,word[charIndex]);
    final CharGroup newGroup=new CharGroup(Arrays.copyOfRange(word,charIndex,word.length),bigrams,frequency);
    currentNode.mData.add(insertionIndex,newGroup);
    checkStack(currentNode);
  }
 else {
    if (differentCharIndex == currentGroup.mChars.length) {
      if (charIndex + differentCharIndex >= word.length) {
        if (currentGroup.mFrequency > 0) {
          throw new RuntimeException(""String_Node_Str"" + new String(word,0,word.length));
        }
 else {
          final CharGroup newNode=new CharGroup(currentGroup.mChars,bigrams,frequency,currentGroup.mChildren);
          currentNode.mData.set(nodeIndex,newNode);
          checkStack(currentNode);
        }
      }
 else {
        final CharGroup newNode=new CharGroup(Arrays.copyOfRange(word,charIndex + differentCharIndex,word.length),bigrams,frequency);
        currentGroup.mChildren=new Node();
        currentGroup.mChildren.mData.add(newNode);
      }
    }
 else {
      if (0 == differentCharIndex) {
        if (0 != frequency) {
          if (0 < currentGroup.mFrequency) {
            throw new RuntimeException(""String_Node_Str"" + currentGroup.mFrequency + ""String_Node_Str""+ new String(word,0,word.length));
          }
          final CharGroup newGroup=new CharGroup(word,currentGroup.mBigrams,frequency);
          currentNode.mData.set(nodeIndex,newGroup);
        }
      }
 else {
        Node newChildren=new Node();
        final CharGroup newOldWord=new CharGroup(Arrays.copyOfRange(currentGroup.mChars,differentCharIndex,currentGroup.mChars.length),currentGroup.mBigrams,currentGroup.mFrequency,currentGroup.mChildren);
        newChildren.mData.add(newOldWord);
        final CharGroup newParent;
        if (charIndex + differentCharIndex >= word.length) {
          newParent=new CharGroup(Arrays.copyOfRange(currentGroup.mChars,0,differentCharIndex),bigrams,frequency,newChildren);
        }
 else {
          newParent=new CharGroup(Arrays.copyOfRange(currentGroup.mChars,0,differentCharIndex),null,-1,newChildren);
          final CharGroup newWord=new CharGroup(Arrays.copyOfRange(word,charIndex + differentCharIndex,word.length),bigrams,frequency);
          final int addIndex=word[charIndex + differentCharIndex] > currentGroup.mChars[differentCharIndex] ? 1 : 0;
          newChildren.mData.add(addIndex,newWord);
        }
        currentNode.mData.set(nodeIndex,newParent);
      }
      checkStack(currentNode);
    }
  }
}","/** 
 * Add a word to this dictionary. The bigrams, if any, have to be in the dictionary already. If they aren't, an exception is thrown.
 * @param word the word, as an int array.
 * @param frequency the frequency of the word, in the range [0..255].
 * @param bigrams an optional list of bigrams for this word (null if none).
 */
private void add(int[] word,int frequency,ArrayList<WeightedString> bigrams){
  assert(frequency >= 0 && frequency <= 255);
  Node currentNode=mRoot;
  int charIndex=0;
  CharGroup currentGroup=null;
  int differentCharIndex=0;
  int nodeIndex=findIndexOfChar(mRoot,word[charIndex]);
  while (CHARACTER_NOT_FOUND != nodeIndex) {
    currentGroup=currentNode.mData.get(nodeIndex);
    differentCharIndex=compareArrays(currentGroup.mChars,word,charIndex);
    if (ARRAYS_ARE_EQUAL != differentCharIndex && differentCharIndex < currentGroup.mChars.length)     break;
    if (null == currentGroup.mChildren)     break;
    charIndex+=currentGroup.mChars.length;
    if (charIndex >= word.length)     break;
    currentNode=currentGroup.mChildren;
    nodeIndex=findIndexOfChar(currentNode,word[charIndex]);
  }
  if (-1 == nodeIndex) {
    final int insertionIndex=findInsertionIndex(currentNode,word[charIndex]);
    final CharGroup newGroup=new CharGroup(Arrays.copyOfRange(word,charIndex,word.length),bigrams,frequency);
    currentNode.mData.add(insertionIndex,newGroup);
    checkStack(currentNode);
  }
 else {
    if (differentCharIndex == currentGroup.mChars.length) {
      if (charIndex + differentCharIndex >= word.length) {
        if (currentGroup.mFrequency > 0) {
          throw new RuntimeException(""String_Node_Str"" + new String(word,0,word.length));
        }
 else {
          final CharGroup newNode=new CharGroup(currentGroup.mChars,bigrams,frequency,currentGroup.mChildren);
          currentNode.mData.set(nodeIndex,newNode);
          checkStack(currentNode);
        }
      }
 else {
        final CharGroup newNode=new CharGroup(Arrays.copyOfRange(word,charIndex + differentCharIndex,word.length),bigrams,frequency);
        currentGroup.mChildren=new Node();
        currentGroup.mChildren.mData.add(newNode);
      }
    }
 else {
      if (0 == differentCharIndex) {
        if (0 != frequency) {
          if (0 < currentGroup.mFrequency) {
            throw new RuntimeException(""String_Node_Str"" + currentGroup.mFrequency + ""String_Node_Str""+ new String(word,0,word.length));
          }
          final CharGroup newGroup=new CharGroup(word,currentGroup.mBigrams,frequency,currentGroup.mChildren);
          currentNode.mData.set(nodeIndex,newGroup);
        }
      }
 else {
        Node newChildren=new Node();
        final CharGroup newOldWord=new CharGroup(Arrays.copyOfRange(currentGroup.mChars,differentCharIndex,currentGroup.mChars.length),currentGroup.mBigrams,currentGroup.mFrequency,currentGroup.mChildren);
        newChildren.mData.add(newOldWord);
        final CharGroup newParent;
        if (charIndex + differentCharIndex >= word.length) {
          newParent=new CharGroup(Arrays.copyOfRange(currentGroup.mChars,0,differentCharIndex),bigrams,frequency,newChildren);
        }
 else {
          newParent=new CharGroup(Arrays.copyOfRange(currentGroup.mChars,0,differentCharIndex),null,-1,newChildren);
          final CharGroup newWord=new CharGroup(Arrays.copyOfRange(word,charIndex + differentCharIndex,word.length),bigrams,frequency);
          final int addIndex=word[charIndex + differentCharIndex] > currentGroup.mChars[differentCharIndex] ? 1 : 0;
          newChildren.mData.add(addIndex,newWord);
        }
        currentNode.mData.set(nodeIndex,newParent);
      }
      checkStack(currentNode);
    }
  }
}",0.9968805099688052
88173,"/** 
 * Add a word to this dictionary. The bigrams, if any, have to be in the dictionary already. If they aren't, an exception is thrown.
 * @param word the word, as an int array.
 * @param frequency the frequency of the word, in the range [0..255].
 * @param bigrams an optional list of bigrams for this word (null if none).
 */
private void add(int[] word,int frequency,ArrayList<WeightedString> bigrams){
  assert(frequency >= 0 && frequency <= 255);
  Node currentNode=mRoot;
  int charIndex=0;
  CharGroup currentGroup=null;
  int differentCharIndex=0;
  int nodeIndex=findIndexOfChar(mRoot,word[charIndex]);
  while (CHARACTER_NOT_FOUND != nodeIndex) {
    currentGroup=currentNode.mData.get(nodeIndex);
    differentCharIndex=compareArrays(currentGroup.mChars,word,charIndex);
    if (ARRAYS_ARE_EQUAL != differentCharIndex && differentCharIndex < currentGroup.mChars.length)     break;
    if (null == currentGroup.mChildren)     break;
    charIndex+=currentGroup.mChars.length;
    if (charIndex >= word.length)     break;
    currentNode=currentGroup.mChildren;
    nodeIndex=findIndexOfChar(currentNode,word[charIndex]);
  }
  if (-1 == nodeIndex) {
    final int insertionIndex=findInsertionIndex(currentNode,word[charIndex]);
    final CharGroup newGroup=new CharGroup(Arrays.copyOfRange(word,charIndex,word.length),bigrams,frequency);
    currentNode.mData.add(insertionIndex,newGroup);
    checkStack(currentNode);
  }
 else {
    if (differentCharIndex == currentGroup.mChars.length) {
      if (charIndex + differentCharIndex >= word.length) {
        if (currentGroup.mFrequency > 0) {
          throw new RuntimeException(""String_Node_Str"" + new String(word,0,word.length));
        }
 else {
          final CharGroup newNode=new CharGroup(currentGroup.mChars,bigrams,frequency,currentGroup.mChildren);
          currentNode.mData.set(nodeIndex,newNode);
          checkStack(currentNode);
        }
      }
 else {
        final CharGroup newNode=new CharGroup(Arrays.copyOfRange(word,charIndex + differentCharIndex,word.length),bigrams,frequency);
        currentGroup.mChildren=new Node();
        currentGroup.mChildren.mData.add(newNode);
      }
    }
 else {
      if (0 == differentCharIndex) {
        if (0 != frequency) {
          if (0 < currentGroup.mFrequency) {
            throw new RuntimeException(""String_Node_Str"" + currentGroup.mFrequency + ""String_Node_Str""+ new String(word,0,word.length));
          }
          final CharGroup newGroup=new CharGroup(word,currentGroup.mBigrams,frequency);
          currentNode.mData.set(nodeIndex,newGroup);
        }
      }
 else {
        Node newChildren=new Node();
        final CharGroup newOldWord=new CharGroup(Arrays.copyOfRange(currentGroup.mChars,differentCharIndex,currentGroup.mChars.length),currentGroup.mBigrams,currentGroup.mFrequency,currentGroup.mChildren);
        newChildren.mData.add(newOldWord);
        final CharGroup newParent;
        if (charIndex + differentCharIndex >= word.length) {
          newParent=new CharGroup(Arrays.copyOfRange(currentGroup.mChars,0,differentCharIndex),bigrams,frequency,newChildren);
        }
 else {
          newParent=new CharGroup(Arrays.copyOfRange(currentGroup.mChars,0,differentCharIndex),null,-1,newChildren);
          final CharGroup newWord=new CharGroup(Arrays.copyOfRange(word,charIndex + differentCharIndex,word.length),bigrams,frequency);
          final int addIndex=word[charIndex + differentCharIndex] > currentGroup.mChars[differentCharIndex] ? 1 : 0;
          newChildren.mData.add(addIndex,newWord);
        }
        currentNode.mData.set(nodeIndex,newParent);
      }
      checkStack(currentNode);
    }
  }
}","/** 
 * Add a word to this dictionary. The bigrams, if any, have to be in the dictionary already. If they aren't, an exception is thrown.
 * @param word the word, as an int array.
 * @param frequency the frequency of the word, in the range [0..255].
 * @param bigrams an optional list of bigrams for this word (null if none).
 */
private void add(int[] word,int frequency,ArrayList<WeightedString> bigrams){
  assert(frequency >= 0 && frequency <= 255);
  Node currentNode=mRoot;
  int charIndex=0;
  CharGroup currentGroup=null;
  int differentCharIndex=0;
  int nodeIndex=findIndexOfChar(mRoot,word[charIndex]);
  while (CHARACTER_NOT_FOUND != nodeIndex) {
    currentGroup=currentNode.mData.get(nodeIndex);
    differentCharIndex=compareArrays(currentGroup.mChars,word,charIndex);
    if (ARRAYS_ARE_EQUAL != differentCharIndex && differentCharIndex < currentGroup.mChars.length)     break;
    if (null == currentGroup.mChildren)     break;
    charIndex+=currentGroup.mChars.length;
    if (charIndex >= word.length)     break;
    currentNode=currentGroup.mChildren;
    nodeIndex=findIndexOfChar(currentNode,word[charIndex]);
  }
  if (-1 == nodeIndex) {
    final int insertionIndex=findInsertionIndex(currentNode,word[charIndex]);
    final CharGroup newGroup=new CharGroup(Arrays.copyOfRange(word,charIndex,word.length),bigrams,frequency);
    currentNode.mData.add(insertionIndex,newGroup);
    checkStack(currentNode);
  }
 else {
    if (differentCharIndex == currentGroup.mChars.length) {
      if (charIndex + differentCharIndex >= word.length) {
        if (currentGroup.mFrequency > 0) {
          throw new RuntimeException(""String_Node_Str"" + new String(word,0,word.length));
        }
 else {
          final CharGroup newNode=new CharGroup(currentGroup.mChars,bigrams,frequency,currentGroup.mChildren);
          currentNode.mData.set(nodeIndex,newNode);
          checkStack(currentNode);
        }
      }
 else {
        final CharGroup newNode=new CharGroup(Arrays.copyOfRange(word,charIndex + differentCharIndex,word.length),bigrams,frequency);
        currentGroup.mChildren=new Node();
        currentGroup.mChildren.mData.add(newNode);
      }
    }
 else {
      if (0 == differentCharIndex) {
        if (0 != frequency) {
          if (0 < currentGroup.mFrequency) {
            throw new RuntimeException(""String_Node_Str"" + currentGroup.mFrequency + ""String_Node_Str""+ new String(word,0,word.length));
          }
          final CharGroup newGroup=new CharGroup(word,currentGroup.mBigrams,frequency,currentGroup.mChildren);
          currentNode.mData.set(nodeIndex,newGroup);
        }
      }
 else {
        Node newChildren=new Node();
        final CharGroup newOldWord=new CharGroup(Arrays.copyOfRange(currentGroup.mChars,differentCharIndex,currentGroup.mChars.length),currentGroup.mBigrams,currentGroup.mFrequency,currentGroup.mChildren);
        newChildren.mData.add(newOldWord);
        final CharGroup newParent;
        if (charIndex + differentCharIndex >= word.length) {
          newParent=new CharGroup(Arrays.copyOfRange(currentGroup.mChars,0,differentCharIndex),bigrams,frequency,newChildren);
        }
 else {
          newParent=new CharGroup(Arrays.copyOfRange(currentGroup.mChars,0,differentCharIndex),null,-1,newChildren);
          final CharGroup newWord=new CharGroup(Arrays.copyOfRange(word,charIndex + differentCharIndex,word.length),bigrams,frequency);
          final int addIndex=word[charIndex + differentCharIndex] > currentGroup.mChars[differentCharIndex] ? 1 : 0;
          newChildren.mData.add(addIndex,newWord);
        }
        currentNode.mData.set(nodeIndex,newParent);
      }
      checkStack(currentNode);
    }
  }
}",0.9968805099688052
88174,"/** 
 * Add a word to this dictionary. The bigrams, if any, have to be in the dictionary already. If they aren't, an exception is thrown.
 * @param word the word, as an int array.
 * @param frequency the frequency of the word, in the range [0..255].
 * @param bigrams an optional list of bigrams for this word (null if none).
 */
private void add(int[] word,int frequency,ArrayList<WeightedString> bigrams){
  assert(frequency >= 0 && frequency <= 255);
  Node currentNode=mRoot;
  int charIndex=0;
  CharGroup currentGroup=null;
  int differentCharIndex=0;
  int nodeIndex=findIndexOfChar(mRoot,word[charIndex]);
  while (CHARACTER_NOT_FOUND != nodeIndex) {
    currentGroup=currentNode.mData.get(nodeIndex);
    differentCharIndex=compareArrays(currentGroup.mChars,word,charIndex);
    if (ARRAYS_ARE_EQUAL != differentCharIndex && differentCharIndex < currentGroup.mChars.length)     break;
    if (null == currentGroup.mChildren)     break;
    charIndex+=currentGroup.mChars.length;
    if (charIndex >= word.length)     break;
    currentNode=currentGroup.mChildren;
    nodeIndex=findIndexOfChar(currentNode,word[charIndex]);
  }
  if (-1 == nodeIndex) {
    final int insertionIndex=findInsertionIndex(currentNode,word[charIndex]);
    final CharGroup newGroup=new CharGroup(Arrays.copyOfRange(word,charIndex,word.length),bigrams,frequency);
    currentNode.mData.add(insertionIndex,newGroup);
    checkStack(currentNode);
  }
 else {
    if (differentCharIndex == currentGroup.mChars.length) {
      if (charIndex + differentCharIndex >= word.length) {
        if (currentGroup.mFrequency > 0) {
          throw new RuntimeException(""String_Node_Str"" + new String(word,0,word.length));
        }
 else {
          final CharGroup newNode=new CharGroup(currentGroup.mChars,bigrams,frequency,currentGroup.mChildren);
          currentNode.mData.set(nodeIndex,newNode);
          checkStack(currentNode);
        }
      }
 else {
        final CharGroup newNode=new CharGroup(Arrays.copyOfRange(word,charIndex + differentCharIndex,word.length),bigrams,frequency);
        currentGroup.mChildren=new Node();
        currentGroup.mChildren.mData.add(newNode);
      }
    }
 else {
      if (0 == differentCharIndex) {
        if (0 != frequency) {
          if (0 < currentGroup.mFrequency) {
            throw new RuntimeException(""String_Node_Str"" + currentGroup.mFrequency + ""String_Node_Str""+ new String(word,0,word.length));
          }
          final CharGroup newGroup=new CharGroup(word,currentGroup.mBigrams,frequency);
          currentNode.mData.set(nodeIndex,newGroup);
        }
      }
 else {
        Node newChildren=new Node();
        final CharGroup newOldWord=new CharGroup(Arrays.copyOfRange(currentGroup.mChars,differentCharIndex,currentGroup.mChars.length),currentGroup.mBigrams,currentGroup.mFrequency,currentGroup.mChildren);
        newChildren.mData.add(newOldWord);
        final CharGroup newParent;
        if (charIndex + differentCharIndex >= word.length) {
          newParent=new CharGroup(Arrays.copyOfRange(currentGroup.mChars,0,differentCharIndex),bigrams,frequency,newChildren);
        }
 else {
          newParent=new CharGroup(Arrays.copyOfRange(currentGroup.mChars,0,differentCharIndex),null,-1,newChildren);
          final CharGroup newWord=new CharGroup(Arrays.copyOfRange(word,charIndex + differentCharIndex,word.length),bigrams,frequency);
          final int addIndex=word[charIndex + differentCharIndex] > currentGroup.mChars[differentCharIndex] ? 1 : 0;
          newChildren.mData.add(addIndex,newWord);
        }
        currentNode.mData.set(nodeIndex,newParent);
      }
      checkStack(currentNode);
    }
  }
}","/** 
 * Add a word to this dictionary. The bigrams, if any, have to be in the dictionary already. If they aren't, an exception is thrown.
 * @param word the word, as an int array.
 * @param frequency the frequency of the word, in the range [0..255].
 * @param bigrams an optional list of bigrams for this word (null if none).
 */
private void add(int[] word,int frequency,ArrayList<WeightedString> bigrams){
  assert(frequency >= 0 && frequency <= 255);
  Node currentNode=mRoot;
  int charIndex=0;
  CharGroup currentGroup=null;
  int differentCharIndex=0;
  int nodeIndex=findIndexOfChar(mRoot,word[charIndex]);
  while (CHARACTER_NOT_FOUND != nodeIndex) {
    currentGroup=currentNode.mData.get(nodeIndex);
    differentCharIndex=compareArrays(currentGroup.mChars,word,charIndex);
    if (ARRAYS_ARE_EQUAL != differentCharIndex && differentCharIndex < currentGroup.mChars.length)     break;
    if (null == currentGroup.mChildren)     break;
    charIndex+=currentGroup.mChars.length;
    if (charIndex >= word.length)     break;
    currentNode=currentGroup.mChildren;
    nodeIndex=findIndexOfChar(currentNode,word[charIndex]);
  }
  if (-1 == nodeIndex) {
    final int insertionIndex=findInsertionIndex(currentNode,word[charIndex]);
    final CharGroup newGroup=new CharGroup(Arrays.copyOfRange(word,charIndex,word.length),bigrams,frequency);
    currentNode.mData.add(insertionIndex,newGroup);
    checkStack(currentNode);
  }
 else {
    if (differentCharIndex == currentGroup.mChars.length) {
      if (charIndex + differentCharIndex >= word.length) {
        if (currentGroup.mFrequency > 0) {
          throw new RuntimeException(""String_Node_Str"" + new String(word,0,word.length));
        }
 else {
          final CharGroup newNode=new CharGroup(currentGroup.mChars,bigrams,frequency,currentGroup.mChildren);
          currentNode.mData.set(nodeIndex,newNode);
          checkStack(currentNode);
        }
      }
 else {
        final CharGroup newNode=new CharGroup(Arrays.copyOfRange(word,charIndex + differentCharIndex,word.length),bigrams,frequency);
        currentGroup.mChildren=new Node();
        currentGroup.mChildren.mData.add(newNode);
      }
    }
 else {
      if (0 == differentCharIndex) {
        if (0 != frequency) {
          if (0 < currentGroup.mFrequency) {
            throw new RuntimeException(""String_Node_Str"" + currentGroup.mFrequency + ""String_Node_Str""+ new String(word,0,word.length));
          }
          final CharGroup newGroup=new CharGroup(word,currentGroup.mBigrams,frequency,currentGroup.mChildren);
          currentNode.mData.set(nodeIndex,newGroup);
        }
      }
 else {
        Node newChildren=new Node();
        final CharGroup newOldWord=new CharGroup(Arrays.copyOfRange(currentGroup.mChars,differentCharIndex,currentGroup.mChars.length),currentGroup.mBigrams,currentGroup.mFrequency,currentGroup.mChildren);
        newChildren.mData.add(newOldWord);
        final CharGroup newParent;
        if (charIndex + differentCharIndex >= word.length) {
          newParent=new CharGroup(Arrays.copyOfRange(currentGroup.mChars,0,differentCharIndex),bigrams,frequency,newChildren);
        }
 else {
          newParent=new CharGroup(Arrays.copyOfRange(currentGroup.mChars,0,differentCharIndex),null,-1,newChildren);
          final CharGroup newWord=new CharGroup(Arrays.copyOfRange(word,charIndex + differentCharIndex,word.length),bigrams,frequency);
          final int addIndex=word[charIndex + differentCharIndex] > currentGroup.mChars[differentCharIndex] ? 1 : 0;
          newChildren.mData.add(addIndex,newWord);
        }
        currentNode.mData.set(nodeIndex,newParent);
      }
      checkStack(currentNode);
    }
  }
}",0.9968805099688052
88175,"public UserDictionary(Context context,String locale){
  super(context,Suggest.DIC_USER);
  mLocale=locale;
  ContentResolver cres=context.getContentResolver();
  mObserver=new ContentObserver(null){
    @Override public void onChange(    boolean self){
      setRequiresReload(true);
    }
  }
;
  cres.registerContentObserver(Words.CONTENT_URI,true,mObserver);
  loadDictionary();
}","public UserDictionary(Context context,String locale){
  super(context,Suggest.DIC_USER);
  if (null == locale)   throw new NullPointerException();
  mLocale=locale;
  ContentResolver cres=context.getContentResolver();
  mObserver=new ContentObserver(null){
    @Override public void onChange(    boolean self){
      setRequiresReload(true);
    }
  }
;
  cres.registerContentObserver(Words.CONTENT_URI,true,mObserver);
  loadDictionary();
}",0.9296116504854368
88176,"@Override public void loadDictionaryAsync(){
  Cursor cursor=getContext().getContentResolver().query(Words.CONTENT_URI,PROJECTION_QUERY,""String_Node_Str"",new String[]{mLocale},null);
  addWords(cursor);
}","@Override public void loadDictionaryAsync(){
  final String[] localeElements=TextUtils.isEmpty(mLocale) ? new String[]{} : mLocale.split(""String_Node_Str"",3);
  final StringBuilder request=new StringBuilder(""String_Node_Str"");
  String localeSoFar=""String_Node_Str"";
  for (int i=0; i < localeElements.length; ++i) {
    localeElements[i]=localeSoFar + localeElements[i];
    localeSoFar=localeElements[i] + ""String_Node_Str"";
    request.append(""String_Node_Str"");
  }
  Cursor cursor=getContext().getContentResolver().query(Words.CONTENT_URI,PROJECTION_QUERY,request.toString(),localeElements,null);
  addWords(cursor);
}",0.3337363966142684
88177,"public UserDictionary(Context context,String locale){
  super(context,Suggest.DIC_USER);
  mLocale=locale;
  ContentResolver cres=context.getContentResolver();
  mObserver=new ContentObserver(null){
    @Override public void onChange(    boolean self){
      setRequiresReload(true);
    }
  }
;
  cres.registerContentObserver(Words.CONTENT_URI,true,mObserver);
  loadDictionary();
}","public UserDictionary(Context context,String locale){
  super(context,Suggest.DIC_USER);
  if (null == locale)   throw new NullPointerException();
  mLocale=locale;
  ContentResolver cres=context.getContentResolver();
  mObserver=new ContentObserver(null){
    @Override public void onChange(    boolean self){
      setRequiresReload(true);
    }
  }
;
  cres.registerContentObserver(Words.CONTENT_URI,true,mObserver);
  loadDictionary();
}",0.9296116504854368
88178,"@Override public void loadDictionaryAsync(){
  Cursor cursor=getContext().getContentResolver().query(Words.CONTENT_URI,PROJECTION_QUERY,""String_Node_Str"",new String[]{mLocale},null);
  addWords(cursor);
}","@Override public void loadDictionaryAsync(){
  final String[] localeElements=TextUtils.isEmpty(mLocale) ? new String[]{} : mLocale.split(""String_Node_Str"",3);
  final StringBuilder request=new StringBuilder(""String_Node_Str"");
  String localeSoFar=""String_Node_Str"";
  for (int i=0; i < localeElements.length; ++i) {
    localeElements[i]=localeSoFar + localeElements[i];
    localeSoFar=localeElements[i] + ""String_Node_Str"";
    request.append(""String_Node_Str"");
  }
  Cursor cursor=getContext().getContentResolver().query(Words.CONTENT_URI,PROJECTION_QUERY,request.toString(),localeElements,null);
  addWords(cursor);
}",0.3337363966142684
88179,"/** 
 * Gets a list of suggestions for a specific string. This returns a list of possible corrections for the text passed as an argument. It may split or group words, and even perform grammatical analysis.
 */
@Override public SuggestionsInfo onGetSuggestions(final TextInfo textInfo,final int suggestionsLimit){
  final String text=textInfo.getText();
  if (TextUtils.isEmpty(text))   return EMPTY_SUGGESTIONS_INFO;
  final SuggestionsGatherer suggestionsGatherer=new SuggestionsGatherer(suggestionsLimit);
  final WordComposer composer=new WordComposer();
  final int length=text.length();
  for (int i=0; i < length; ++i) {
    final int character=text.codePointAt(i);
    final int proximityIndex=SpellCheckerProximityInfo.getIndexOf(character);
    final int[] proximities;
    if (-1 == proximityIndex) {
      proximities=new int[]{character};
    }
 else {
      proximities=Arrays.copyOfRange(SpellCheckerProximityInfo.PROXIMITY,proximityIndex,proximityIndex + SpellCheckerProximityInfo.ROW_SIZE);
    }
    composer.add(character,proximities,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  }
  boolean isInDict=true;
  try {
    final DictAndProximity dictInfo=mDictionaryPool.take();
    dictInfo.mDictionary.getWords(composer,suggestionsGatherer,dictInfo.mProximityInfo);
    isInDict=dictInfo.mDictionary.isValidWord(text);
    if (!isInDict && Character.isUpperCase(text.codePointAt(0))) {
      final int len=text.codePointCount(0,text.length());
      int capsCount=1;
      for (int i=1; i < len; ++i) {
        if (1 != capsCount && i != capsCount)         break;
        if (Character.isUpperCase(text.codePointAt(i)))         ++capsCount;
      }
      if (1 == capsCount || len == capsCount) {
        isInDict=dictInfo.mDictionary.isValidWord(text.toLowerCase(mLocale));
      }
    }
    if (!mDictionaryPool.offer(dictInfo)) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    return EMPTY_SUGGESTIONS_INFO;
  }
  final SuggestionsGatherer.Result result=suggestionsGatherer.getResults(text,mService.mTypoThreshold);
  final int flags=(isInDict ? SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY : 0) | (result.mLooksLikeTypo ? SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO : 0);
  return new SuggestionsInfo(flags,result.mSuggestions);
}","/** 
 * Gets a list of suggestions for a specific string. This returns a list of possible corrections for the text passed as an argument. It may split or group words, and even perform grammatical analysis.
 */
@Override public SuggestionsInfo onGetSuggestions(final TextInfo textInfo,final int suggestionsLimit){
  final String text=textInfo.getText();
  if (TextUtils.isEmpty(text))   return EMPTY_SUGGESTIONS_INFO;
  final SuggestionsGatherer suggestionsGatherer=new SuggestionsGatherer(suggestionsLimit);
  final WordComposer composer=new WordComposer();
  final int length=text.length();
  for (int i=0; i < length; ++i) {
    final int character=text.codePointAt(i);
    final int proximityIndex=SpellCheckerProximityInfo.getIndexOf(character);
    final int[] proximities;
    if (-1 == proximityIndex) {
      proximities=new int[]{character};
    }
 else {
      proximities=Arrays.copyOfRange(SpellCheckerProximityInfo.PROXIMITY,proximityIndex,proximityIndex + SpellCheckerProximityInfo.ROW_SIZE);
    }
    composer.add(character,proximities,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  }
  boolean isInDict=true;
  try {
    final DictAndProximity dictInfo=mDictionaryPool.take();
    dictInfo.mDictionary.getWords(composer,suggestionsGatherer,dictInfo.mProximityInfo);
    isInDict=dictInfo.mDictionary.isValidWord(text);
    if (!isInDict && Character.isUpperCase(text.codePointAt(0))) {
      final int len=text.codePointCount(0,text.length());
      int capsCount=1;
      for (int i=1; i < len; ++i) {
        if (1 != capsCount && i != capsCount)         break;
        if (Character.isUpperCase(text.codePointAt(i)))         ++capsCount;
      }
      if (1 == capsCount || len == capsCount) {
        isInDict=dictInfo.mDictionary.isValidWord(text.toLowerCase(mLocale));
      }
    }
    if (!mDictionaryPool.offer(dictInfo)) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    return EMPTY_SUGGESTIONS_INFO;
  }
  final SuggestionsGatherer.Result result=suggestionsGatherer.getResults(text,mService.mTypoThreshold);
  if (DBG) {
    Log.i(TAG,""String_Node_Str"" + text + ""String_Node_Str""+ suggestionsLimit);
    Log.i(TAG,""String_Node_Str"" + result.mLooksLikeTypo);
    Log.i(TAG,""String_Node_Str"" + result.mLooksLikeTypo);
    for (    String suggestion : result.mSuggestions) {
      Log.i(TAG,suggestion);
    }
  }
  final int flags=(isInDict ? SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY : 0) | (result.mLooksLikeTypo ? SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO : 0);
  return new SuggestionsInfo(flags,result.mSuggestions);
}",0.938402114250864
88180,"public Result getResults(final CharSequence originalText,final double threshold){
  final String[] gatheredSuggestions;
  final boolean looksLikeTypo;
  if (0 == mLength) {
    if (null == mBestSuggestion) {
      gatheredSuggestions=null;
      looksLikeTypo=false;
    }
 else {
      gatheredSuggestions=EMPTY_STRING_ARRAY;
      final double normalizedScore=Utils.calcNormalizedScore(originalText,mBestSuggestion,mBestScore);
      looksLikeTypo=(normalizedScore > threshold);
    }
  }
 else {
    if (DBG) {
      if (mLength != mSuggestions.size()) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
    Collections.reverse(mSuggestions);
    Utils.removeDupes(mSuggestions);
    gatheredSuggestions=mSuggestions.toArray(EMPTY_STRING_ARRAY);
    final int bestScore=mScores[0];
    final CharSequence bestSuggestion=mSuggestions.get(0);
    final double normalizedScore=Utils.calcNormalizedScore(originalText,bestSuggestion,bestScore);
    looksLikeTypo=(normalizedScore > threshold);
  }
  return new Result(gatheredSuggestions,looksLikeTypo);
}","public Result getResults(final CharSequence originalText,final double threshold){
  final String[] gatheredSuggestions;
  final boolean looksLikeTypo;
  if (0 == mLength) {
    if (null == mBestSuggestion) {
      gatheredSuggestions=null;
      looksLikeTypo=false;
    }
 else {
      gatheredSuggestions=EMPTY_STRING_ARRAY;
      final double normalizedScore=Utils.calcNormalizedScore(originalText,mBestSuggestion,mBestScore);
      looksLikeTypo=(normalizedScore > threshold);
    }
  }
 else {
    if (DBG) {
      if (mLength != mSuggestions.size()) {
        Log.e(TAG,""String_Node_Str"");
      }
      for (int i=mLength - 1; i >= 0; --i) {
        Log.i(TAG,""String_Node_Str"" + mScores[i] + ""String_Node_Str""+ mSuggestions.get(i));
      }
    }
    Collections.reverse(mSuggestions);
    Utils.removeDupes(mSuggestions);
    gatheredSuggestions=mSuggestions.toArray(EMPTY_STRING_ARRAY);
    final int bestScore=mScores[mLength - 1];
    final CharSequence bestSuggestion=mSuggestions.get(0);
    final double normalizedScore=Utils.calcNormalizedScore(originalText,bestSuggestion,bestScore);
    looksLikeTypo=(normalizedScore > threshold);
    if (DBG) {
      Log.i(TAG,""String_Node_Str"" + bestSuggestion + ""String_Node_Str""+ bestScore);
      Log.i(TAG,""String_Node_Str"" + normalizedScore + ""String_Node_Str""+ threshold+ ""String_Node_Str""+ looksLikeTypo);
    }
  }
  return new Result(gatheredSuggestions,looksLikeTypo);
}",0.81413087113609
88181,"public SuggestedWords.Builder getSuggestedWordBuilder(final View view,final WordComposer wordComposer,CharSequence prevWordForBigram,final ProximityInfo proximityInfo){
  LatinImeLogger.onStartSuggestion(prevWordForBigram);
  mAutoCorrection.init();
  mIsFirstCharCapitalized=wordComposer.isFirstCharCapitalized();
  mIsAllUpperCase=wordComposer.isAllUpperCase();
  collectGarbage(mSuggestions,mPrefMaxSuggestions);
  Arrays.fill(mScores,0);
  CharSequence typedWord=wordComposer.getTypedWord();
  if (typedWord != null) {
    final String typedWordString=typedWord.toString();
    typedWord=typedWordString;
    LatinImeLogger.onAddSuggestedWord(typedWordString,Suggest.DIC_USER_TYPED,Dictionary.DataType.UNIGRAM);
  }
  mTypedWord=typedWord;
  if (wordComposer.size() <= 1 && (mCorrectionMode == CORRECTION_FULL_BIGRAM || mCorrectionMode == CORRECTION_BASIC)) {
    Arrays.fill(mBigramScores,0);
    collectGarbage(mBigramSuggestions,PREF_MAX_BIGRAMS);
    if (!TextUtils.isEmpty(prevWordForBigram)) {
      CharSequence lowerPrevWord=prevWordForBigram.toString().toLowerCase();
      if (mMainDict != null && mMainDict.isValidWord(lowerPrevWord)) {
        prevWordForBigram=lowerPrevWord;
      }
      for (      final Dictionary dictionary : mBigramDictionaries.values()) {
        dictionary.getBigrams(wordComposer,prevWordForBigram,this);
      }
      if (TextUtils.isEmpty(typedWord)) {
        int insertCount=Math.min(mBigramSuggestions.size(),mPrefMaxSuggestions);
        for (int i=0; i < insertCount; ++i) {
          addBigramToSuggestions(mBigramSuggestions.get(i));
        }
      }
 else {
        final char currentChar=typedWord.charAt(0);
        final char currentCharUpper=Character.toUpperCase(currentChar);
        int count=0;
        final int bigramSuggestionSize=mBigramSuggestions.size();
        for (int i=0; i < bigramSuggestionSize; i++) {
          final CharSequence bigramSuggestion=mBigramSuggestions.get(i);
          final char bigramSuggestionFirstChar=bigramSuggestion.charAt(0);
          if (bigramSuggestionFirstChar == currentChar || bigramSuggestionFirstChar == currentCharUpper) {
            addBigramToSuggestions(bigramSuggestion);
            if (++count > mPrefMaxSuggestions)             break;
          }
        }
      }
    }
  }
 else   if (wordComposer.size() > 1) {
    for (    final String key : mUnigramDictionaries.keySet()) {
      if (key.equals(DICT_KEY_USER_UNIGRAM) || key.equals(DICT_KEY_WHITELIST))       continue;
      final Dictionary dictionary=mUnigramDictionaries.get(key);
      dictionary.getWords(wordComposer,this,proximityInfo);
    }
  }
  CharSequence autoText=null;
  final String typedWordString=typedWord == null ? null : typedWord.toString();
  if (typedWord != null) {
    if (mQuickFixesEnabled) {
      final String lowerCaseTypedWord=typedWordString.toLowerCase();
      CharSequence tempAutoText=capitalizeWord(mIsAllUpperCase,mIsFirstCharCapitalized,AutoText.get(lowerCaseTypedWord,0,lowerCaseTypedWord.length(),view));
      boolean canAdd=tempAutoText != null;
      canAdd&=!TextUtils.equals(tempAutoText,typedWord);
      if (canAdd && mSuggestions.size() > 0 && mCorrectionMode != CORRECTION_BASIC) {
        canAdd&=!TextUtils.equals(tempAutoText,mSuggestions.get(0));
      }
      if (canAdd) {
        if (DBG) {
          Log.d(TAG,""String_Node_Str"");
        }
        autoText=tempAutoText;
      }
    }
  }
  CharSequence whitelistedWord=capitalizeWord(mIsAllUpperCase,mIsFirstCharCapitalized,mWhiteListDictionary.getWhiteListedWord(typedWordString));
  mAutoCorrection.updateAutoCorrectionStatus(mUnigramDictionaries,wordComposer,mSuggestions,mScores,typedWord,mAutoCorrectionThreshold,mCorrectionMode,autoText,whitelistedWord);
  if (autoText != null) {
    mSuggestions.add(0,autoText);
  }
  if (whitelistedWord != null) {
    mSuggestions.add(0,whitelistedWord);
  }
  if (typedWord != null) {
    mSuggestions.add(0,typedWordString);
  }
  Utils.removeDupes(mSuggestions);
  if (DBG) {
    double normalizedScore=mAutoCorrection.getNormalizedScore();
    ArrayList<SuggestedWords.SuggestedWordInfo> scoreInfoList=new ArrayList<SuggestedWords.SuggestedWordInfo>();
    scoreInfoList.add(new SuggestedWords.SuggestedWordInfo(""String_Node_Str"",false));
    for (int i=0; i < mScores.length; ++i) {
      if (normalizedScore > 0) {
        final String scoreThreshold=String.format(""String_Node_Str"",mScores[i],normalizedScore);
        scoreInfoList.add(new SuggestedWords.SuggestedWordInfo(scoreThreshold,false));
        normalizedScore=0.0;
      }
 else {
        final String score=Integer.toString(mScores[i]);
        scoreInfoList.add(new SuggestedWords.SuggestedWordInfo(score,false));
      }
    }
    for (int i=mScores.length; i < mSuggestions.size(); ++i) {
      scoreInfoList.add(new SuggestedWords.SuggestedWordInfo(""String_Node_Str"",false));
    }
    return new SuggestedWords.Builder().addWords(mSuggestions,scoreInfoList);
  }
  return new SuggestedWords.Builder().addWords(mSuggestions,null);
}","public SuggestedWords.Builder getSuggestedWordBuilder(final View view,final WordComposer wordComposer,CharSequence prevWordForBigram,final ProximityInfo proximityInfo){
  LatinImeLogger.onStartSuggestion(prevWordForBigram);
  mAutoCorrection.init();
  mIsFirstCharCapitalized=wordComposer.isFirstCharCapitalized();
  mIsAllUpperCase=wordComposer.isAllUpperCase();
  collectGarbage(mSuggestions,mPrefMaxSuggestions);
  Arrays.fill(mScores,0);
  CharSequence typedWord=wordComposer.getTypedWord();
  if (typedWord != null) {
    final String typedWordString=typedWord.toString();
    typedWord=typedWordString;
    LatinImeLogger.onAddSuggestedWord(typedWordString,Suggest.DIC_USER_TYPED,Dictionary.DataType.UNIGRAM);
  }
  mTypedWord=typedWord;
  if (wordComposer.size() <= 1 && (mCorrectionMode == CORRECTION_FULL_BIGRAM || mCorrectionMode == CORRECTION_BASIC)) {
    Arrays.fill(mBigramScores,0);
    collectGarbage(mBigramSuggestions,PREF_MAX_BIGRAMS);
    if (!TextUtils.isEmpty(prevWordForBigram)) {
      CharSequence lowerPrevWord=prevWordForBigram.toString().toLowerCase();
      if (mMainDict != null && mMainDict.isValidWord(lowerPrevWord)) {
        prevWordForBigram=lowerPrevWord;
      }
      for (      final Dictionary dictionary : mBigramDictionaries.values()) {
        dictionary.getBigrams(wordComposer,prevWordForBigram,this);
      }
      if (TextUtils.isEmpty(typedWord)) {
        int insertCount=Math.min(mBigramSuggestions.size(),mPrefMaxSuggestions);
        for (int i=0; i < insertCount; ++i) {
          addBigramToSuggestions(mBigramSuggestions.get(i));
        }
      }
 else {
        final char currentChar=typedWord.charAt(0);
        final char currentCharUpper=Character.toUpperCase(currentChar);
        int count=0;
        final int bigramSuggestionSize=mBigramSuggestions.size();
        for (int i=0; i < bigramSuggestionSize; i++) {
          final CharSequence bigramSuggestion=mBigramSuggestions.get(i);
          final char bigramSuggestionFirstChar=bigramSuggestion.charAt(0);
          if (bigramSuggestionFirstChar == currentChar || bigramSuggestionFirstChar == currentCharUpper) {
            addBigramToSuggestions(bigramSuggestion);
            if (++count > mPrefMaxSuggestions)             break;
          }
        }
      }
    }
  }
 else   if (wordComposer.size() > 1) {
    for (    final String key : mUnigramDictionaries.keySet()) {
      if (key.equals(DICT_KEY_USER_UNIGRAM) || key.equals(DICT_KEY_WHITELIST))       continue;
      final Dictionary dictionary=mUnigramDictionaries.get(key);
      dictionary.getWords(wordComposer,this,proximityInfo);
    }
  }
  CharSequence autoText=null;
  final String typedWordString=typedWord == null ? null : typedWord.toString();
  if (typedWord != null) {
    if (mQuickFixesEnabled) {
      final String lowerCaseTypedWord=typedWordString.toLowerCase();
      autoText=capitalizeWord(mIsAllUpperCase,mIsFirstCharCapitalized,AutoText.get(lowerCaseTypedWord,0,lowerCaseTypedWord.length(),view));
      if (DBG) {
        if (autoText != null) {
          Log.d(TAG,""String_Node_Str"" + typedWord + ""String_Node_Str""+ autoText);
        }
      }
    }
  }
  CharSequence whitelistedWord=capitalizeWord(mIsAllUpperCase,mIsFirstCharCapitalized,mWhiteListDictionary.getWhiteListedWord(typedWordString));
  mAutoCorrection.updateAutoCorrectionStatus(mUnigramDictionaries,wordComposer,mSuggestions,mScores,typedWord,mAutoCorrectionThreshold,mCorrectionMode,autoText,whitelistedWord);
  if (autoText != null) {
    mSuggestions.add(0,autoText);
  }
  if (whitelistedWord != null) {
    mSuggestions.add(0,whitelistedWord);
  }
  if (typedWord != null) {
    mSuggestions.add(0,typedWordString);
  }
  Utils.removeDupes(mSuggestions);
  if (DBG) {
    double normalizedScore=mAutoCorrection.getNormalizedScore();
    ArrayList<SuggestedWords.SuggestedWordInfo> scoreInfoList=new ArrayList<SuggestedWords.SuggestedWordInfo>();
    scoreInfoList.add(new SuggestedWords.SuggestedWordInfo(""String_Node_Str"",false));
    for (int i=0; i < mScores.length; ++i) {
      if (normalizedScore > 0) {
        final String scoreThreshold=String.format(""String_Node_Str"",mScores[i],normalizedScore);
        scoreInfoList.add(new SuggestedWords.SuggestedWordInfo(scoreThreshold,false));
        normalizedScore=0.0;
      }
 else {
        final String score=Integer.toString(mScores[i]);
        scoreInfoList.add(new SuggestedWords.SuggestedWordInfo(score,false));
      }
    }
    for (int i=mScores.length; i < mSuggestions.size(); ++i) {
      scoreInfoList.add(new SuggestedWords.SuggestedWordInfo(""String_Node_Str"",false));
    }
    return new SuggestedWords.Builder().addWords(mSuggestions,scoreInfoList);
  }
  return new SuggestedWords.Builder().addWords(mSuggestions,null);
}",0.9582950953400632
88182,"public SuggestedWords.Builder getSuggestedWordBuilder(final View view,final WordComposer wordComposer,CharSequence prevWordForBigram,final ProximityInfo proximityInfo){
  LatinImeLogger.onStartSuggestion(prevWordForBigram);
  mAutoCorrection.init();
  mIsFirstCharCapitalized=wordComposer.isFirstCharCapitalized();
  mIsAllUpperCase=wordComposer.isAllUpperCase();
  collectGarbage(mSuggestions,mPrefMaxSuggestions);
  Arrays.fill(mScores,0);
  CharSequence typedWord=wordComposer.getTypedWord();
  if (typedWord != null) {
    final String typedWordString=typedWord.toString();
    typedWord=typedWordString;
    LatinImeLogger.onAddSuggestedWord(typedWordString,Suggest.DIC_USER_TYPED,Dictionary.DataType.UNIGRAM);
  }
  mTypedWord=typedWord;
  if (wordComposer.size() <= 1 && (mCorrectionMode == CORRECTION_FULL_BIGRAM || mCorrectionMode == CORRECTION_BASIC)) {
    Arrays.fill(mBigramScores,0);
    collectGarbage(mBigramSuggestions,PREF_MAX_BIGRAMS);
    if (!TextUtils.isEmpty(prevWordForBigram)) {
      CharSequence lowerPrevWord=prevWordForBigram.toString().toLowerCase();
      if (mMainDict != null && mMainDict.isValidWord(lowerPrevWord)) {
        prevWordForBigram=lowerPrevWord;
      }
      for (      final Dictionary dictionary : mBigramDictionaries.values()) {
        dictionary.getBigrams(wordComposer,prevWordForBigram,this);
      }
      if (TextUtils.isEmpty(typedWord)) {
        int insertCount=Math.min(mBigramSuggestions.size(),mPrefMaxSuggestions);
        for (int i=0; i < insertCount; ++i) {
          addBigramToSuggestions(mBigramSuggestions.get(i));
        }
      }
 else {
        final char currentChar=typedWord.charAt(0);
        final char currentCharUpper=Character.toUpperCase(currentChar);
        int count=0;
        final int bigramSuggestionSize=mBigramSuggestions.size();
        for (int i=0; i < bigramSuggestionSize; i++) {
          final CharSequence bigramSuggestion=mBigramSuggestions.get(i);
          final char bigramSuggestionFirstChar=bigramSuggestion.charAt(0);
          if (bigramSuggestionFirstChar == currentChar || bigramSuggestionFirstChar == currentCharUpper) {
            addBigramToSuggestions(bigramSuggestion);
            if (++count > mPrefMaxSuggestions)             break;
          }
        }
      }
    }
  }
 else   if (wordComposer.size() > 1) {
    for (    final String key : mUnigramDictionaries.keySet()) {
      if (key.equals(DICT_KEY_USER_UNIGRAM) || key.equals(DICT_KEY_WHITELIST))       continue;
      final Dictionary dictionary=mUnigramDictionaries.get(key);
      dictionary.getWords(wordComposer,this,proximityInfo);
    }
  }
  CharSequence autoText=null;
  final String typedWordString=typedWord == null ? null : typedWord.toString();
  if (typedWord != null) {
    if (mQuickFixesEnabled) {
      final String lowerCaseTypedWord=typedWordString.toLowerCase();
      CharSequence tempAutoText=capitalizeWord(mIsAllUpperCase,mIsFirstCharCapitalized,AutoText.get(lowerCaseTypedWord,0,lowerCaseTypedWord.length(),view));
      boolean canAdd=tempAutoText != null;
      canAdd&=!TextUtils.equals(tempAutoText,typedWord);
      if (canAdd && mSuggestions.size() > 0 && mCorrectionMode != CORRECTION_BASIC) {
        canAdd&=!TextUtils.equals(tempAutoText,mSuggestions.get(0));
      }
      if (canAdd) {
        if (DBG) {
          Log.d(TAG,""String_Node_Str"");
        }
        autoText=tempAutoText;
      }
    }
  }
  CharSequence whitelistedWord=capitalizeWord(mIsAllUpperCase,mIsFirstCharCapitalized,mWhiteListDictionary.getWhiteListedWord(typedWordString));
  mAutoCorrection.updateAutoCorrectionStatus(mUnigramDictionaries,wordComposer,mSuggestions,mScores,typedWord,mAutoCorrectionThreshold,mCorrectionMode,autoText,whitelistedWord);
  if (autoText != null) {
    mSuggestions.add(0,autoText);
  }
  if (whitelistedWord != null) {
    mSuggestions.add(0,whitelistedWord);
  }
  if (typedWord != null) {
    mSuggestions.add(0,typedWordString);
  }
  Utils.removeDupes(mSuggestions);
  if (DBG) {
    double normalizedScore=mAutoCorrection.getNormalizedScore();
    ArrayList<SuggestedWords.SuggestedWordInfo> scoreInfoList=new ArrayList<SuggestedWords.SuggestedWordInfo>();
    scoreInfoList.add(new SuggestedWords.SuggestedWordInfo(""String_Node_Str"",false));
    for (int i=0; i < mScores.length; ++i) {
      if (normalizedScore > 0) {
        final String scoreThreshold=String.format(""String_Node_Str"",mScores[i],normalizedScore);
        scoreInfoList.add(new SuggestedWords.SuggestedWordInfo(scoreThreshold,false));
        normalizedScore=0.0;
      }
 else {
        final String score=Integer.toString(mScores[i]);
        scoreInfoList.add(new SuggestedWords.SuggestedWordInfo(score,false));
      }
    }
    for (int i=mScores.length; i < mSuggestions.size(); ++i) {
      scoreInfoList.add(new SuggestedWords.SuggestedWordInfo(""String_Node_Str"",false));
    }
    return new SuggestedWords.Builder().addWords(mSuggestions,scoreInfoList);
  }
  return new SuggestedWords.Builder().addWords(mSuggestions,null);
}","public SuggestedWords.Builder getSuggestedWordBuilder(final View view,final WordComposer wordComposer,CharSequence prevWordForBigram,final ProximityInfo proximityInfo){
  LatinImeLogger.onStartSuggestion(prevWordForBigram);
  mAutoCorrection.init();
  mIsFirstCharCapitalized=wordComposer.isFirstCharCapitalized();
  mIsAllUpperCase=wordComposer.isAllUpperCase();
  collectGarbage(mSuggestions,mPrefMaxSuggestions);
  Arrays.fill(mScores,0);
  CharSequence typedWord=wordComposer.getTypedWord();
  if (typedWord != null) {
    final String typedWordString=typedWord.toString();
    typedWord=typedWordString;
    LatinImeLogger.onAddSuggestedWord(typedWordString,Suggest.DIC_USER_TYPED,Dictionary.DataType.UNIGRAM);
  }
  mTypedWord=typedWord;
  if (wordComposer.size() <= 1 && (mCorrectionMode == CORRECTION_FULL_BIGRAM || mCorrectionMode == CORRECTION_BASIC)) {
    Arrays.fill(mBigramScores,0);
    collectGarbage(mBigramSuggestions,PREF_MAX_BIGRAMS);
    if (!TextUtils.isEmpty(prevWordForBigram)) {
      CharSequence lowerPrevWord=prevWordForBigram.toString().toLowerCase();
      if (mMainDict != null && mMainDict.isValidWord(lowerPrevWord)) {
        prevWordForBigram=lowerPrevWord;
      }
      for (      final Dictionary dictionary : mBigramDictionaries.values()) {
        dictionary.getBigrams(wordComposer,prevWordForBigram,this);
      }
      if (TextUtils.isEmpty(typedWord)) {
        int insertCount=Math.min(mBigramSuggestions.size(),mPrefMaxSuggestions);
        for (int i=0; i < insertCount; ++i) {
          addBigramToSuggestions(mBigramSuggestions.get(i));
        }
      }
 else {
        final char currentChar=typedWord.charAt(0);
        final char currentCharUpper=Character.toUpperCase(currentChar);
        int count=0;
        final int bigramSuggestionSize=mBigramSuggestions.size();
        for (int i=0; i < bigramSuggestionSize; i++) {
          final CharSequence bigramSuggestion=mBigramSuggestions.get(i);
          final char bigramSuggestionFirstChar=bigramSuggestion.charAt(0);
          if (bigramSuggestionFirstChar == currentChar || bigramSuggestionFirstChar == currentCharUpper) {
            addBigramToSuggestions(bigramSuggestion);
            if (++count > mPrefMaxSuggestions)             break;
          }
        }
      }
    }
  }
 else   if (wordComposer.size() > 1) {
    for (    final String key : mUnigramDictionaries.keySet()) {
      if (key.equals(DICT_KEY_USER_UNIGRAM) || key.equals(DICT_KEY_WHITELIST))       continue;
      final Dictionary dictionary=mUnigramDictionaries.get(key);
      dictionary.getWords(wordComposer,this,proximityInfo);
    }
  }
  CharSequence autoText=null;
  final String typedWordString=typedWord == null ? null : typedWord.toString();
  if (typedWord != null) {
    if (mQuickFixesEnabled) {
      final String lowerCaseTypedWord=typedWordString.toLowerCase();
      autoText=capitalizeWord(mIsAllUpperCase,mIsFirstCharCapitalized,AutoText.get(lowerCaseTypedWord,0,lowerCaseTypedWord.length(),view));
      if (DBG) {
        if (autoText != null) {
          Log.d(TAG,""String_Node_Str"" + typedWord + ""String_Node_Str""+ autoText);
        }
      }
    }
  }
  CharSequence whitelistedWord=capitalizeWord(mIsAllUpperCase,mIsFirstCharCapitalized,mWhiteListDictionary.getWhiteListedWord(typedWordString));
  mAutoCorrection.updateAutoCorrectionStatus(mUnigramDictionaries,wordComposer,mSuggestions,mScores,typedWord,mAutoCorrectionThreshold,mCorrectionMode,autoText,whitelistedWord);
  if (autoText != null) {
    mSuggestions.add(0,autoText);
  }
  if (whitelistedWord != null) {
    mSuggestions.add(0,whitelistedWord);
  }
  if (typedWord != null) {
    mSuggestions.add(0,typedWordString);
  }
  Utils.removeDupes(mSuggestions);
  if (DBG) {
    double normalizedScore=mAutoCorrection.getNormalizedScore();
    ArrayList<SuggestedWords.SuggestedWordInfo> scoreInfoList=new ArrayList<SuggestedWords.SuggestedWordInfo>();
    scoreInfoList.add(new SuggestedWords.SuggestedWordInfo(""String_Node_Str"",false));
    for (int i=0; i < mScores.length; ++i) {
      if (normalizedScore > 0) {
        final String scoreThreshold=String.format(""String_Node_Str"",mScores[i],normalizedScore);
        scoreInfoList.add(new SuggestedWords.SuggestedWordInfo(scoreThreshold,false));
        normalizedScore=0.0;
      }
 else {
        final String score=Integer.toString(mScores[i]);
        scoreInfoList.add(new SuggestedWords.SuggestedWordInfo(score,false));
      }
    }
    for (int i=mScores.length; i < mSuggestions.size(); ++i) {
      scoreInfoList.add(new SuggestedWords.SuggestedWordInfo(""String_Node_Str"",false));
    }
    return new SuggestedWords.Builder().addWords(mSuggestions,scoreInfoList);
  }
  return new SuggestedWords.Builder().addWords(mSuggestions,null);
}",0.9582950953400632
88183,"/** 
 * Used only for testing purposes This function will wait for loading from database to be done
 */
void waitForDictionaryLoading(){
  while (mUpdatingDictionary) {
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
    }
  }
}","/** 
 * Used for testing purposes and in the spell checker This function will wait for loading from database to be done
 */
void waitForDictionaryLoading(){
  while (mUpdatingDictionary) {
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
    }
  }
}",0.9442379182156134
88184,"@Override public synchronized boolean isValidWord(CharSequence word){
synchronized (mUpdatingLock) {
    if (mRequiresReload)     startDictionaryLoadingTaskLocked();
    if (mUpdatingDictionary)     return false;
  }
  final int freq=getWordFrequency(word);
  return freq > -1;
}","@Override public synchronized boolean isValidWord(CharSequence word){
synchronized (mUpdatingLock) {
    if (mRequiresReload)     startDictionaryLoadingTaskLocked();
    if (mUpdatingDictionary)     return false;
  }
  return getWordFrequency(word) > -1;
}",0.9009345794392524
88185,"@Override public void getWords(final WordComposer codes,final WordCallback callback,final ProximityInfo proximityInfo){
synchronized (mUpdatingLock) {
    if (mRequiresReload)     startDictionaryLoadingTaskLocked();
    if (mUpdatingDictionary)     return;
  }
  mInputLength=codes.size();
  if (mCodes.length < mInputLength)   mCodes=new int[mInputLength][];
  for (int i=0; i < mInputLength; i++) {
    mCodes[i]=codes.getCodesAt(i);
  }
  mMaxDepth=mInputLength * 3;
  getWordsRec(mRoots,codes,mWordBuilder,0,false,1,0,-1,callback);
  for (int i=0; i < mInputLength; i++) {
    getWordsRec(mRoots,codes,mWordBuilder,0,false,1,0,i,callback);
  }
}","@Override public void getWords(final WordComposer codes,final WordCallback callback,final ProximityInfo proximityInfo){
synchronized (mUpdatingLock) {
    if (mRequiresReload)     startDictionaryLoadingTaskLocked();
    if (mUpdatingDictionary)     return;
  }
  getWordsInner(codes,callback,proximityInfo);
}",0.5615866388308977
88186,"public DictAndProximity createDictAndProximity(final Locale locale){
  final ProximityInfo proximityInfo=ProximityInfo.createSpellCheckerProximityInfo();
  final Resources resources=getResources();
  final int fallbackResourceId=Utils.getMainDictionaryResourceId(resources);
  final DictionaryCollection dictionaryCollection=DictionaryFactory.createDictionaryFromManager(this,locale,fallbackResourceId);
  final String localeStr=locale.toString();
  Dictionary userDict=mUserDictionaries.get(localeStr);
  if (null == userDict) {
    userDict=new UserDictionary(this,localeStr);
    mUserDictionaries.put(localeStr,userDict);
  }
  dictionaryCollection.addDictionary(userDict);
  return new DictAndProximity(dictionaryCollection,proximityInfo);
}","public DictAndProximity createDictAndProximity(final Locale locale){
  final ProximityInfo proximityInfo=ProximityInfo.createSpellCheckerProximityInfo();
  final Resources resources=getResources();
  final int fallbackResourceId=Utils.getMainDictionaryResourceId(resources);
  final DictionaryCollection dictionaryCollection=DictionaryFactory.createDictionaryFromManager(this,locale,fallbackResourceId);
  final String localeStr=locale.toString();
  Dictionary userDict=mUserDictionaries.get(localeStr);
  if (null == userDict) {
    userDict=new SynchronouslyLoadedUserDictionary(this,localeStr);
    mUserDictionaries.put(localeStr,userDict);
  }
  dictionaryCollection.addDictionary(userDict);
  return new DictAndProximity(dictionaryCollection,proximityInfo);
}",0.9874255459960292
88187,"/** 
 * Used only for testing purposes This function will wait for loading from database to be done
 */
void waitForDictionaryLoading(){
  while (mUpdatingDictionary) {
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
    }
  }
}","/** 
 * Used for testing purposes and in the spell checker This function will wait for loading from database to be done
 */
void waitForDictionaryLoading(){
  while (mUpdatingDictionary) {
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
    }
  }
}",0.9442379182156134
88188,"@Override public synchronized boolean isValidWord(CharSequence word){
synchronized (mUpdatingLock) {
    if (mRequiresReload)     startDictionaryLoadingTaskLocked();
    if (mUpdatingDictionary)     return false;
  }
  final int freq=getWordFrequency(word);
  return freq > -1;
}","@Override public synchronized boolean isValidWord(CharSequence word){
synchronized (mUpdatingLock) {
    if (mRequiresReload)     startDictionaryLoadingTaskLocked();
    if (mUpdatingDictionary)     return false;
  }
  return getWordFrequency(word) > -1;
}",0.9009345794392524
88189,"@Override public void getWords(final WordComposer codes,final WordCallback callback,final ProximityInfo proximityInfo){
synchronized (mUpdatingLock) {
    if (mRequiresReload)     startDictionaryLoadingTaskLocked();
    if (mUpdatingDictionary)     return;
  }
  mInputLength=codes.size();
  if (mCodes.length < mInputLength)   mCodes=new int[mInputLength][];
  for (int i=0; i < mInputLength; i++) {
    mCodes[i]=codes.getCodesAt(i);
  }
  mMaxDepth=mInputLength * 3;
  getWordsRec(mRoots,codes,mWordBuilder,0,false,1,0,-1,callback);
  for (int i=0; i < mInputLength; i++) {
    getWordsRec(mRoots,codes,mWordBuilder,0,false,1,0,i,callback);
  }
}","@Override public void getWords(final WordComposer codes,final WordCallback callback,final ProximityInfo proximityInfo){
synchronized (mUpdatingLock) {
    if (mRequiresReload)     startDictionaryLoadingTaskLocked();
    if (mUpdatingDictionary)     return;
  }
  getWordsInner(codes,callback,proximityInfo);
}",0.5615866388308977
88190,"public DictAndProximity createDictAndProximity(final Locale locale){
  final ProximityInfo proximityInfo=ProximityInfo.createSpellCheckerProximityInfo();
  final Resources resources=getResources();
  final int fallbackResourceId=Utils.getMainDictionaryResourceId(resources);
  final DictionaryCollection dictionaryCollection=DictionaryFactory.createDictionaryFromManager(this,locale,fallbackResourceId);
  final String localeStr=locale.toString();
  Dictionary userDict=mUserDictionaries.get(localeStr);
  if (null == userDict) {
    userDict=new UserDictionary(this,localeStr);
    mUserDictionaries.put(localeStr,userDict);
  }
  dictionaryCollection.addDictionary(userDict);
  return new DictAndProximity(dictionaryCollection,proximityInfo);
}","public DictAndProximity createDictAndProximity(final Locale locale){
  final ProximityInfo proximityInfo=ProximityInfo.createSpellCheckerProximityInfo();
  final Resources resources=getResources();
  final int fallbackResourceId=Utils.getMainDictionaryResourceId(resources);
  final DictionaryCollection dictionaryCollection=DictionaryFactory.createDictionaryFromManager(this,locale,fallbackResourceId);
  final String localeStr=locale.toString();
  Dictionary userDict=mUserDictionaries.get(localeStr);
  if (null == userDict) {
    userDict=new SynchronouslyLoadedUserDictionary(this,localeStr);
    mUserDictionaries.put(localeStr,userDict);
  }
  dictionaryCollection.addDictionary(userDict);
  return new DictAndProximity(dictionaryCollection,proximityInfo);
}",0.9874255459960292
88191,"public static void recycle(final StringBuilder garbage){
  sInstance.mPool.add(garbage);
}","public static void recycle(final StringBuilder garbage){
  if (DEBUG) {
    final int gid=garbage.hashCode();
    for (    final StringBuilder q : sInstance.mPool) {
      if (gid == q.hashCode())       throw new RuntimeException(""String_Node_Str"" + gid);
    }
  }
  sInstance.mPool.add(garbage);
}",0.4010282776349614
88192,"protected void addBigramToSuggestions(CharSequence bigram){
  mSuggestions.add(bigram);
}","protected void addBigramToSuggestions(CharSequence bigram){
  final StringBuilder sb=StringBuilderPool.getStringBuilder(getApproxMaxWordLength());
  sb.append(bigram);
  mSuggestions.add(sb);
}",0.5957446808510638
88193,"public static void recycle(final StringBuilder garbage){
  sInstance.mPool.add(garbage);
}","public static void recycle(final StringBuilder garbage){
  if (DEBUG) {
    final int gid=garbage.hashCode();
    for (    final StringBuilder q : sInstance.mPool) {
      if (gid == q.hashCode())       throw new RuntimeException(""String_Node_Str"" + gid);
    }
  }
  sInstance.mPool.add(garbage);
}",0.4010282776349614
88194,"protected void addBigramToSuggestions(CharSequence bigram){
  mSuggestions.add(bigram);
}","protected void addBigramToSuggestions(CharSequence bigram){
  final StringBuilder sb=StringBuilderPool.getStringBuilder(getApproxMaxWordLength());
  sb.append(bigram);
  mSuggestions.add(sb);
}",0.5957446808510638
88195,"/** 
 * Initializes a dictionary from a dictionary pack. This searches for a content provider providing a dictionary pack for the specified locale. If none is found, it falls back to using the resource passed as fallBackResId as a dictionary.
 * @param context application context for reading resources
 * @param locale the locale for which to create the dictionary
 * @param fallbackResId the id of the resource to use as a fallback if no pack is found
 * @return an initialized instance of DictionaryCollection
 */
public static DictionaryCollection createDictionaryFromManager(Context context,Locale locale,int fallbackResId){
  if (null == locale) {
    Log.e(TAG,""String_Node_Str"");
    return new DictionaryCollection(createBinaryDictionary(context,fallbackResId,locale));
  }
  final List<Dictionary> dictList=new LinkedList<Dictionary>();
  final List<AssetFileAddress> assetFileList=BinaryDictionaryGetter.getDictionaryFiles(locale,context,fallbackResId);
  if (null != assetFileList) {
    for (    final AssetFileAddress f : assetFileList) {
      final BinaryDictionary binaryDictionary=new BinaryDictionary(context,f.mFilename,f.mOffset,f.mLength,null);
      if (binaryDictionary.isValidDictionary()) {
        dictList.add(binaryDictionary);
      }
    }
  }
  if (null == dictList) {
    return new DictionaryCollection();
  }
 else {
    if (dictList.isEmpty()) {
      return new DictionaryCollection(createBinaryDictionary(context,fallbackResId,locale));
    }
 else {
      return new DictionaryCollection(dictList);
    }
  }
}","/** 
 * Initializes a dictionary from a dictionary pack. This searches for a content provider providing a dictionary pack for the specified locale. If none is found, it falls back to using the resource passed as fallBackResId as a dictionary.
 * @param context application context for reading resources
 * @param locale the locale for which to create the dictionary
 * @param fallbackResId the id of the resource to use as a fallback if no pack is found
 * @return an initialized instance of DictionaryCollection
 */
public static DictionaryCollection createDictionaryFromManager(Context context,Locale locale,int fallbackResId){
  if (null == locale) {
    Log.e(TAG,""String_Node_Str"");
    return new DictionaryCollection(createBinaryDictionary(context,fallbackResId,locale));
  }
  final List<Dictionary> dictList=new LinkedList<Dictionary>();
  final List<AssetFileAddress> assetFileList=BinaryDictionaryGetter.getDictionaryFiles(locale,context,fallbackResId);
  if (null != assetFileList) {
    for (    final AssetFileAddress f : assetFileList) {
      final BinaryDictionary binaryDictionary=new BinaryDictionary(context,f.mFilename,f.mOffset,f.mLength,null);
      if (binaryDictionary.isValidDictionary()) {
        dictList.add(binaryDictionary);
      }
    }
  }
  return new DictionaryCollection(dictList);
}",0.8989547038327527
88196,"/** 
 * Initializes a dictionary from a dictionary pack. This searches for a content provider providing a dictionary pack for the specified locale. If none is found, it falls back to using the resource passed as fallBackResId as a dictionary.
 * @param context application context for reading resources
 * @param locale the locale for which to create the dictionary
 * @param fallbackResId the id of the resource to use as a fallback if no pack is found
 * @return an initialized instance of DictionaryCollection
 */
public static DictionaryCollection createDictionaryFromManager(Context context,Locale locale,int fallbackResId){
  if (null == locale) {
    Log.e(TAG,""String_Node_Str"");
    return new DictionaryCollection(createBinaryDictionary(context,fallbackResId,locale));
  }
  final List<Dictionary> dictList=new LinkedList<Dictionary>();
  final List<AssetFileAddress> assetFileList=BinaryDictionaryGetter.getDictionaryFiles(locale,context,fallbackResId);
  if (null != assetFileList) {
    for (    final AssetFileAddress f : assetFileList) {
      final BinaryDictionary binaryDictionary=new BinaryDictionary(context,f.mFilename,f.mOffset,f.mLength,null);
      if (binaryDictionary.isValidDictionary()) {
        dictList.add(binaryDictionary);
      }
    }
  }
  if (null == dictList) {
    return new DictionaryCollection();
  }
 else {
    if (dictList.isEmpty()) {
      return new DictionaryCollection(createBinaryDictionary(context,fallbackResId,locale));
    }
 else {
      return new DictionaryCollection(dictList);
    }
  }
}","/** 
 * Initializes a dictionary from a dictionary pack. This searches for a content provider providing a dictionary pack for the specified locale. If none is found, it falls back to using the resource passed as fallBackResId as a dictionary.
 * @param context application context for reading resources
 * @param locale the locale for which to create the dictionary
 * @param fallbackResId the id of the resource to use as a fallback if no pack is found
 * @return an initialized instance of DictionaryCollection
 */
public static DictionaryCollection createDictionaryFromManager(Context context,Locale locale,int fallbackResId){
  if (null == locale) {
    Log.e(TAG,""String_Node_Str"");
    return new DictionaryCollection(createBinaryDictionary(context,fallbackResId,locale));
  }
  final List<Dictionary> dictList=new LinkedList<Dictionary>();
  final List<AssetFileAddress> assetFileList=BinaryDictionaryGetter.getDictionaryFiles(locale,context,fallbackResId);
  if (null != assetFileList) {
    for (    final AssetFileAddress f : assetFileList) {
      final BinaryDictionary binaryDictionary=new BinaryDictionary(context,f.mFilename,f.mOffset,f.mLength,null);
      if (binaryDictionary.isValidDictionary()) {
        dictList.add(binaryDictionary);
      }
    }
  }
  return new DictionaryCollection(dictList);
}",0.8989547038327527
88197,"public int layout(SuggestedWords suggestions,ViewGroup stripView,ViewGroup paneView,int stripWidth){
  if (suggestions.isPunctuationSuggestions()) {
    return layoutPunctuationSuggestions(suggestions,stripView);
  }
  final int countInStrip=mCandidateCountInStrip;
  setupTexts(suggestions,countInStrip);
  int x=0;
  for (int index=0; index < countInStrip; index++) {
    final int pos=getWordPosition(index,suggestions);
    if (index != 0) {
      final View divider=mDividers.get(pos);
      stripView.addView(divider);
    }
    final CharSequence styled=mTexts.get(pos);
    final TextView word=mWords.get(pos);
    if (index == mCenterCandidateIndex && suggestions.size() > countInStrip) {
      word.setCompoundDrawablesWithIntrinsicBounds(null,null,null,mMoreCandidateHint);
      mMoreSuggestionsAvailable=true;
    }
 else {
      word.setCompoundDrawables(null,null,null,null);
      mMoreSuggestionsAvailable=false;
    }
    word.setEnabled(!TextUtils.isEmpty(styled));
    word.setTextColor(getCandidateTextColor(index,suggestions,pos));
    final int width=getCandidateWidth(index,stripWidth);
    final CharSequence text=getEllipsizedText(styled,width,word.getPaint());
    final float scaleX=word.getTextScaleX();
    word.setText(text);
    word.setTextScaleX(scaleX);
    stripView.addView(word);
    setLayoutWeight(word,getCandidateWeight(index),mCandidateStripHeight);
    if (DBG) {
      final CharSequence debugInfo=getDebugInfo(suggestions,pos);
      if (debugInfo != null) {
        final TextView info=mInfos.get(pos);
        info.setText(debugInfo);
        paneView.addView(info);
        info.measure(WRAP_CONTENT,WRAP_CONTENT);
        final int infoWidth=info.getMeasuredWidth();
        final int y=info.getMeasuredHeight();
        FrameLayoutCompatUtils.placeViewAt(info,x,0,infoWidth,y);
        x+=infoWidth * 2;
      }
    }
  }
  return countInStrip;
}","public int layout(SuggestedWords suggestions,ViewGroup stripView,ViewGroup paneView,int stripWidth){
  if (suggestions.isPunctuationSuggestions()) {
    return layoutPunctuationSuggestions(suggestions,stripView);
  }
  final int countInStrip=mCandidateCountInStrip;
  setupTexts(suggestions,countInStrip);
  mMoreSuggestionsAvailable=(suggestions.size() > countInStrip);
  int x=0;
  for (int index=0; index < countInStrip; index++) {
    final int pos=getWordPosition(index,suggestions);
    if (index != 0) {
      final View divider=mDividers.get(pos);
      stripView.addView(divider);
    }
    final CharSequence styled=mTexts.get(pos);
    final TextView word=mWords.get(pos);
    if (index == mCenterCandidateIndex && mMoreSuggestionsAvailable) {
      word.setCompoundDrawablesWithIntrinsicBounds(null,null,null,mMoreCandidateHint);
    }
 else {
      word.setCompoundDrawables(null,null,null,null);
    }
    word.setEnabled(!TextUtils.isEmpty(styled));
    word.setTextColor(getCandidateTextColor(index,suggestions,pos));
    final int width=getCandidateWidth(index,stripWidth);
    final CharSequence text=getEllipsizedText(styled,width,word.getPaint());
    final float scaleX=word.getTextScaleX();
    word.setText(text);
    word.setTextScaleX(scaleX);
    stripView.addView(word);
    setLayoutWeight(word,getCandidateWeight(index),mCandidateStripHeight);
    if (DBG) {
      final CharSequence debugInfo=getDebugInfo(suggestions,pos);
      if (debugInfo != null) {
        final TextView info=mInfos.get(pos);
        info.setText(debugInfo);
        paneView.addView(info);
        info.measure(WRAP_CONTENT,WRAP_CONTENT);
        final int infoWidth=info.getMeasuredWidth();
        final int y=info.getMeasuredHeight();
        FrameLayoutCompatUtils.placeViewAt(info,x,0,infoWidth,y);
        x+=infoWidth * 2;
      }
    }
  }
  return countInStrip;
}",0.917329093799682
88198,"@Override public boolean onLongClick(View view){
  if (mStripParams.mMoreSuggestionsAvailable) {
    expandCandidatesPane();
    return true;
  }
  return false;
}","@Override public boolean onLongClick(View view){
  if (mStripParams.mMoreSuggestionsAvailable) {
    toggleCandidatesPane();
    return true;
  }
  return false;
}",0.9693251533742332
88199,"public int layout(SuggestedWords suggestions,ViewGroup stripView,ViewGroup paneView,int stripWidth){
  if (suggestions.isPunctuationSuggestions()) {
    return layoutPunctuationSuggestions(suggestions,stripView);
  }
  final int countInStrip=mCandidateCountInStrip;
  setupTexts(suggestions,countInStrip);
  int x=0;
  for (int index=0; index < countInStrip; index++) {
    final int pos=getWordPosition(index,suggestions);
    if (index != 0) {
      final View divider=mDividers.get(pos);
      stripView.addView(divider);
    }
    final CharSequence styled=mTexts.get(pos);
    final TextView word=mWords.get(pos);
    if (index == mCenterCandidateIndex && suggestions.size() > countInStrip) {
      word.setCompoundDrawablesWithIntrinsicBounds(null,null,null,mMoreCandidateHint);
      mMoreSuggestionsAvailable=true;
    }
 else {
      word.setCompoundDrawables(null,null,null,null);
      mMoreSuggestionsAvailable=false;
    }
    word.setEnabled(!TextUtils.isEmpty(styled));
    word.setTextColor(getCandidateTextColor(index,suggestions,pos));
    final int width=getCandidateWidth(index,stripWidth);
    final CharSequence text=getEllipsizedText(styled,width,word.getPaint());
    final float scaleX=word.getTextScaleX();
    word.setText(text);
    word.setTextScaleX(scaleX);
    stripView.addView(word);
    setLayoutWeight(word,getCandidateWeight(index),mCandidateStripHeight);
    if (DBG) {
      final CharSequence debugInfo=getDebugInfo(suggestions,pos);
      if (debugInfo != null) {
        final TextView info=mInfos.get(pos);
        info.setText(debugInfo);
        paneView.addView(info);
        info.measure(WRAP_CONTENT,WRAP_CONTENT);
        final int infoWidth=info.getMeasuredWidth();
        final int y=info.getMeasuredHeight();
        FrameLayoutCompatUtils.placeViewAt(info,x,0,infoWidth,y);
        x+=infoWidth * 2;
      }
    }
  }
  return countInStrip;
}","public int layout(SuggestedWords suggestions,ViewGroup stripView,ViewGroup paneView,int stripWidth){
  if (suggestions.isPunctuationSuggestions()) {
    return layoutPunctuationSuggestions(suggestions,stripView);
  }
  final int countInStrip=mCandidateCountInStrip;
  setupTexts(suggestions,countInStrip);
  mMoreSuggestionsAvailable=(suggestions.size() > countInStrip);
  int x=0;
  for (int index=0; index < countInStrip; index++) {
    final int pos=getWordPosition(index,suggestions);
    if (index != 0) {
      final View divider=mDividers.get(pos);
      stripView.addView(divider);
    }
    final CharSequence styled=mTexts.get(pos);
    final TextView word=mWords.get(pos);
    if (index == mCenterCandidateIndex && mMoreSuggestionsAvailable) {
      word.setCompoundDrawablesWithIntrinsicBounds(null,null,null,mMoreCandidateHint);
    }
 else {
      word.setCompoundDrawables(null,null,null,null);
    }
    word.setEnabled(!TextUtils.isEmpty(styled));
    word.setTextColor(getCandidateTextColor(index,suggestions,pos));
    final int width=getCandidateWidth(index,stripWidth);
    final CharSequence text=getEllipsizedText(styled,width,word.getPaint());
    final float scaleX=word.getTextScaleX();
    word.setText(text);
    word.setTextScaleX(scaleX);
    stripView.addView(word);
    setLayoutWeight(word,getCandidateWeight(index),mCandidateStripHeight);
    if (DBG) {
      final CharSequence debugInfo=getDebugInfo(suggestions,pos);
      if (debugInfo != null) {
        final TextView info=mInfos.get(pos);
        info.setText(debugInfo);
        paneView.addView(info);
        info.measure(WRAP_CONTENT,WRAP_CONTENT);
        final int infoWidth=info.getMeasuredWidth();
        final int y=info.getMeasuredHeight();
        FrameLayoutCompatUtils.placeViewAt(info,x,0,infoWidth,y);
        x+=infoWidth * 2;
      }
    }
  }
  return countInStrip;
}",0.917329093799682
88200,"@Override public boolean onLongClick(View view){
  if (mStripParams.mMoreSuggestionsAvailable) {
    expandCandidatesPane();
    return true;
  }
  return false;
}","@Override public boolean onLongClick(View view){
  if (mStripParams.mMoreSuggestionsAvailable) {
    toggleCandidatesPane();
    return true;
  }
  return false;
}",0.9693251533742332
88201,"private Builder addWord(CharSequence word,SuggestedWordInfo suggestedWordInfo){
  mWords.add(word);
  mSuggestedWordInfoList.add(suggestedWordInfo);
  return this;
}","private Builder addWord(CharSequence word,SuggestedWordInfo suggestedWordInfo){
  if (!TextUtils.isEmpty(word)) {
    mWords.add(word);
    mSuggestedWordInfoList.add(suggestedWordInfo);
  }
  return this;
}",0.8870967741935484
88202,"public Builder setApplicationSpecifiedCompletions(CompletionInfo[] infos){
  for (  CompletionInfo info : infos)   addWord(info.getText());
  return this;
}","public Builder setApplicationSpecifiedCompletions(CompletionInfo[] infos){
  for (  CompletionInfo info : infos) {
    if (null != info)     addWord(info.getText());
  }
  return this;
}",0.912280701754386
88203,"/** 
 * Returns a list of file addresses for a given locale, trying relevant methods in order. Tries to get binary dictionaries from various sources, in order: - Uses a private method of getting a private dictionaries, as implemented by the PrivateBinaryDictionaryGetter class. If that fails: - Uses a content provider to get a public dictionary set, as per the protocol described in BinaryDictionaryFileDumper. If that fails: - Gets a file name from the fallback resource passed as an argument. If that fails: - Returns null.
 * @return The address of a valid file, or null.
 */
public static List<AssetFileAddress> getDictionaryFiles(Locale locale,Context context,int fallbackResId){
  final List<AssetFileAddress> privateFiles=PrivateBinaryDictionaryGetter.getDictionaryFiles(locale,context);
  if (null != privateFiles) {
    return privateFiles;
  }
 else {
    try {
      return BinaryDictionaryFileDumper.getDictSetFromContentProvider(locale,context);
    }
 catch (    FileNotFoundException e) {
      Log.e(TAG,""String_Node_Str"" + locale.toString() + ""String_Node_Str"");
      return Arrays.asList(loadFallbackResource(context,fallbackResId));
    }
catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"" + locale.toString() + ""String_Node_Str"");
      return Arrays.asList(loadFallbackResource(context,fallbackResId));
    }
  }
}","/** 
 * Returns a list of file addresses for a given locale, trying relevant methods in order. Tries to get binary dictionaries from various sources, in order: - Uses a private method of getting a private dictionaries, as implemented by the PrivateBinaryDictionaryGetter class. If that fails: - Uses a content provider to get a public dictionary set, as per the protocol described in BinaryDictionaryFileDumper. If that fails: - Gets a file name from the fallback resource passed as an argument. If that fails: - Returns null.
 * @return The address of a valid file, or null.
 */
public static List<AssetFileAddress> getDictionaryFiles(Locale locale,Context context,int fallbackResId){
  final List<AssetFileAddress> privateFiles=PrivateBinaryDictionaryGetter.getDictionaryFiles(locale,context);
  if (null != privateFiles) {
    return privateFiles;
  }
 else {
    try {
      List<AssetFileAddress> listFromContentProvider=BinaryDictionaryFileDumper.getDictSetFromContentProvider(locale,context);
      if (null != listFromContentProvider) {
        return listFromContentProvider;
      }
    }
 catch (    FileNotFoundException e) {
      Log.e(TAG,""String_Node_Str"" + locale.toString() + ""String_Node_Str"");
    }
catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"" + locale.toString() + ""String_Node_Str"");
    }
    return Arrays.asList(loadFallbackResource(context,fallbackResId));
  }
}",0.8903413217138707
88204,"public void pickSuggestionManually(int index,CharSequence suggestion){
  SuggestedWords suggestions=mCandidateView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  final boolean recorrecting=TextEntryState.isRecorrecting();
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    CompletionInfo ci=mApplicationSpecifiedCompletions[index];
    if (ic != null) {
      ic.commitCompletion(ci);
    }
    mCommittedLength=suggestion.length();
    if (mCandidateView != null) {
      mCandidateView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && (mSettingsValues.isWordSeparator(suggestion.charAt(0)) || mSettingsValues.isSuggestedPunctuation(suggestion.charAt(0)))) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestions.mWords);
    final char primaryCode=suggestion.charAt(0);
    final int toLeft=(ic == null) ? 0 : ic.getTextBeforeCursor(1,0).charAt(0);
    final boolean oldMagicSpace=mJustAddedMagicSpace;
    if (Keyboard.CODE_SPACE == toLeft)     mJustAddedMagicSpace=true;
    onCodeInput(primaryCode,new int[]{primaryCode},KeyboardActionListener.NOT_A_TOUCH_COORDINATE,KeyboardActionListener.NOT_A_TOUCH_COORDINATE);
    mJustAddedMagicSpace=oldMagicSpace;
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (!mHasUncommittedTypedChars) {
    mWord.reset();
  }
  mJustAccepted=true;
  pickSuggestion(suggestion);
  if (index == 0) {
    addToAutoAndUserBigramDictionaries(suggestion,AutoDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  LatinImeLogger.logOnManualSuggestion(mComposing.toString(),suggestion.toString(),index,suggestions.mWords);
  TextEntryState.acceptedSuggestion(mComposing.toString(),suggestion);
  if (mShouldInsertMagicSpace && !recorrecting) {
    sendMagicSpace();
  }
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mHasDictionary || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  if (!recorrecting) {
    TextEntryState.typedCharacter((char)Keyboard.CODE_SPACE,true,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
    mHandler.postUpdateSuggestions();
  }
 else   if (!showingAddToDictionaryHint) {
    clearSuggestions();
    mHandler.postUpdateOldSuggestions();
  }
  if (showingAddToDictionaryHint) {
    mCandidateView.showAddToDictionaryHint(suggestion);
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}","public void pickSuggestionManually(int index,CharSequence suggestion){
  SuggestedWords suggestions=mCandidateView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  final boolean recorrecting=TextEntryState.isRecorrecting();
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    CompletionInfo ci=mApplicationSpecifiedCompletions[index];
    if (ic != null) {
      ic.commitCompletion(ci);
    }
    mCommittedLength=suggestion.length();
    if (mCandidateView != null) {
      mCandidateView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && (mSettingsValues.isWordSeparator(suggestion.charAt(0)) || mSettingsValues.isSuggestedPunctuation(suggestion.charAt(0)))) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestions.mWords);
    final char primaryCode=suggestion.charAt(0);
    final int toLeft=(ic == null) ? 0 : ic.getTextBeforeCursor(1,0).charAt(0);
    final boolean oldMagicSpace=mJustAddedMagicSpace;
    if (Keyboard.CODE_SPACE == toLeft)     mJustAddedMagicSpace=true;
    onCodeInput(primaryCode,new int[]{primaryCode},KeyboardActionListener.NOT_A_TOUCH_COORDINATE,KeyboardActionListener.NOT_A_TOUCH_COORDINATE);
    mJustAddedMagicSpace=oldMagicSpace;
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (!mHasUncommittedTypedChars) {
    mWord.reset();
  }
  mJustAccepted=true;
  pickSuggestion(suggestion);
  if (index == 0) {
    addToAutoAndUserBigramDictionaries(suggestion,AutoDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  LatinImeLogger.logOnManualSuggestion(mComposing.toString(),suggestion.toString(),index,suggestions.mWords);
  TextEntryState.acceptedSuggestion(mComposing.toString(),suggestion);
  if (mShouldInsertMagicSpace && !recorrecting) {
    sendMagicSpace();
  }
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mHasDictionary || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  if (!recorrecting) {
    TextEntryState.typedCharacter((char)Keyboard.CODE_SPACE,true,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  }
  if (!showingAddToDictionaryHint) {
    clearSuggestions();
    mHandler.postUpdateOldSuggestions();
  }
  if (showingAddToDictionaryHint) {
    mCandidateView.showAddToDictionaryHint(suggestion);
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9921624510153187
88205,"public void pickSuggestionManually(int index,CharSequence suggestion){
  SuggestedWords suggestions=mCandidateView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mWordSeparators);
  final boolean recorrecting=TextEntryState.isRecorrecting();
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    CompletionInfo ci=mApplicationSpecifiedCompletions[index];
    if (ic != null) {
      ic.commitCompletion(ci);
    }
    mCommittedLength=suggestion.length();
    if (mCandidateView != null) {
      mCandidateView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && (isWordSeparator(suggestion.charAt(0)) || isSuggestedPunctuation(suggestion.charAt(0)))) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestions.mWords);
    final char primaryCode=suggestion.charAt(0);
    final int toLeft=(ic == null) ? 0 : ic.getTextBeforeCursor(1,0).charAt(0);
    if (Keyboard.CODE_SPACE == toLeft)     mJustAddedMagicSpace=true;
    onCodeInput(primaryCode,new int[]{primaryCode},KeyboardActionListener.NOT_A_TOUCH_COORDINATE,KeyboardActionListener.NOT_A_TOUCH_COORDINATE);
    mJustAddedMagicSpace=false;
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (!mHasUncommittedTypedChars) {
    mWord.reset();
  }
  mJustAccepted=true;
  pickSuggestion(suggestion);
  if (index == 0) {
    addToAutoAndUserBigramDictionaries(suggestion,AutoDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  LatinImeLogger.logOnManualSuggestion(mComposing.toString(),suggestion.toString(),index,suggestions.mWords);
  TextEntryState.acceptedSuggestion(mComposing.toString(),suggestion);
  if (mShouldInsertMagicSpace && !recorrecting) {
    sendMagicSpace();
  }
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mHasDictionary || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  if (!recorrecting) {
    TextEntryState.typedCharacter((char)Keyboard.CODE_SPACE,true,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  }
 else   if (!showingAddToDictionaryHint) {
    clearSuggestions();
    mHandler.postUpdateOldSuggestions();
  }
  if (showingAddToDictionaryHint) {
    mCandidateView.showAddToDictionaryHint(suggestion);
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}","public void pickSuggestionManually(int index,CharSequence suggestion){
  SuggestedWords suggestions=mCandidateView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mWordSeparators);
  final boolean recorrecting=TextEntryState.isRecorrecting();
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    CompletionInfo ci=mApplicationSpecifiedCompletions[index];
    if (ic != null) {
      ic.commitCompletion(ci);
    }
    mCommittedLength=suggestion.length();
    if (mCandidateView != null) {
      mCandidateView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && (isWordSeparator(suggestion.charAt(0)) || isSuggestedPunctuation(suggestion.charAt(0)))) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestions.mWords);
    final char primaryCode=suggestion.charAt(0);
    final int toLeft=(ic == null) ? 0 : ic.getTextBeforeCursor(1,0).charAt(0);
    final boolean oldMagicSpace=mJustAddedMagicSpace;
    if (Keyboard.CODE_SPACE == toLeft)     mJustAddedMagicSpace=true;
    onCodeInput(primaryCode,new int[]{primaryCode},KeyboardActionListener.NOT_A_TOUCH_COORDINATE,KeyboardActionListener.NOT_A_TOUCH_COORDINATE);
    mJustAddedMagicSpace=oldMagicSpace;
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (!mHasUncommittedTypedChars) {
    mWord.reset();
  }
  mJustAccepted=true;
  pickSuggestion(suggestion);
  if (index == 0) {
    addToAutoAndUserBigramDictionaries(suggestion,AutoDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  LatinImeLogger.logOnManualSuggestion(mComposing.toString(),suggestion.toString(),index,suggestions.mWords);
  TextEntryState.acceptedSuggestion(mComposing.toString(),suggestion);
  if (mShouldInsertMagicSpace && !recorrecting) {
    sendMagicSpace();
  }
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mHasDictionary || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  if (!recorrecting) {
    TextEntryState.typedCharacter((char)Keyboard.CODE_SPACE,true,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  }
 else   if (!showingAddToDictionaryHint) {
    clearSuggestions();
    mHandler.postUpdateOldSuggestions();
  }
  if (showingAddToDictionaryHint) {
    mCandidateView.showAddToDictionaryHint(suggestion);
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.987094395280236
88206,"public Values(final SharedPreferences prefs,final Context context,final String localeStr){
  final Resources res=context.getResources();
  final Locale savedLocale;
  if (null != localeStr) {
    final Locale keyboardLocale=new Locale(localeStr);
    savedLocale=Utils.setSystemLocale(res,keyboardLocale);
  }
 else {
    savedLocale=null;
  }
  mEnableShowSubtypeSettings=res.getBoolean(R.bool.config_enable_show_subtype_settings);
  mSwipeDownDismissKeyboardEnabled=res.getBoolean(R.bool.config_swipe_down_dismiss_keyboard_enabled);
  mDelayBeforeFadeoutLanguageOnSpacebar=res.getInteger(R.integer.config_delay_before_fadeout_language_on_spacebar);
  mDelayUpdateSuggestions=res.getInteger(R.integer.config_delay_update_suggestions);
  mDelayUpdateOldSuggestions=res.getInteger(R.integer.config_delay_update_old_suggestions);
  mDelayUpdateShiftState=res.getInteger(R.integer.config_delay_update_shift_state);
  mDurationOfFadeoutLanguageOnSpacebar=res.getInteger(R.integer.config_duration_of_fadeout_language_on_spacebar);
  mFinalFadeoutFactorOfLanguageOnSpacebar=res.getInteger(R.integer.config_final_fadeout_percentage_of_language_on_spacebar) / 100.0f;
  mDoubleSpacesTurnIntoPeriodTimeout=res.getInteger(R.integer.config_double_spaces_turn_into_period_timeout);
  mMagicSpaceStrippers=res.getString(R.string.magic_space_stripping_symbols);
  mMagicSpaceSwappers=res.getString(R.string.magic_space_swapping_symbols);
  String wordSeparators=mMagicSpaceStrippers + mMagicSpaceSwappers + res.getString(R.string.magic_space_promoting_symbols);
  final String notWordSeparators=res.getString(R.string.non_word_separator_symbols);
  for (int i=notWordSeparators.length() - 1; i >= 0; --i) {
    wordSeparators=wordSeparators.replace(notWordSeparators.substring(i,i + 1),""String_Node_Str"");
  }
  mWordSeparators=wordSeparators;
  mSuggestPuncs=res.getString(R.string.suggested_punctuations);
  mSuggestPuncList=createSuggestPuncList(mSuggestPuncs);
  final boolean hasVibrator=VibratorCompatWrapper.getInstance(context).hasVibrator();
  mVibrateOn=hasVibrator && prefs.getBoolean(Settings.PREF_VIBRATE_ON,false);
  mSoundOn=prefs.getBoolean(Settings.PREF_SOUND_ON,res.getBoolean(R.bool.config_default_sound_enabled));
  mPopupOn=isPopupEnabled(prefs,res);
  mAutoCap=prefs.getBoolean(Settings.PREF_AUTO_CAP,true);
  mQuickFixes=isQuickFixesEnabled(prefs,res);
  mAutoCorrectEnabled=isAutoCorrectEnabled(prefs,res);
  mBigramSuggestionEnabled=mAutoCorrectEnabled && isBigramSuggestionEnabled(prefs,res,mAutoCorrectEnabled);
  mBigramPredictionEnabled=mBigramSuggestionEnabled && isBigramPredictionEnabled(prefs,res);
  mAutoCorrectionThreshold=getAutoCorrectionThreshold(prefs,res);
}","public Values(final SharedPreferences prefs,final Context context,final String localeStr){
  final Resources res=context.getResources();
  final Locale savedLocale;
  if (null != localeStr) {
    final Locale keyboardLocale=new Locale(localeStr);
    savedLocale=Utils.setSystemLocale(res,keyboardLocale);
  }
 else {
    savedLocale=null;
  }
  mEnableShowSubtypeSettings=res.getBoolean(R.bool.config_enable_show_subtype_settings);
  mSwipeDownDismissKeyboardEnabled=res.getBoolean(R.bool.config_swipe_down_dismiss_keyboard_enabled);
  mDelayBeforeFadeoutLanguageOnSpacebar=res.getInteger(R.integer.config_delay_before_fadeout_language_on_spacebar);
  mDelayUpdateSuggestions=res.getInteger(R.integer.config_delay_update_suggestions);
  mDelayUpdateOldSuggestions=res.getInteger(R.integer.config_delay_update_old_suggestions);
  mDelayUpdateShiftState=res.getInteger(R.integer.config_delay_update_shift_state);
  mDurationOfFadeoutLanguageOnSpacebar=res.getInteger(R.integer.config_duration_of_fadeout_language_on_spacebar);
  mFinalFadeoutFactorOfLanguageOnSpacebar=res.getInteger(R.integer.config_final_fadeout_percentage_of_language_on_spacebar) / 100.0f;
  mDoubleSpacesTurnIntoPeriodTimeout=res.getInteger(R.integer.config_double_spaces_turn_into_period_timeout);
  mMagicSpaceStrippers=res.getString(R.string.magic_space_stripping_symbols);
  mMagicSpaceSwappers=res.getString(R.string.magic_space_swapping_symbols);
  String wordSeparators=mMagicSpaceStrippers + mMagicSpaceSwappers + res.getString(R.string.magic_space_promoting_symbols);
  final String notWordSeparators=res.getString(R.string.non_word_separator_symbols);
  for (int i=notWordSeparators.length() - 1; i >= 0; --i) {
    wordSeparators=wordSeparators.replace(notWordSeparators.substring(i,i + 1),""String_Node_Str"");
  }
  mWordSeparators=wordSeparators;
  mSuggestPuncs=res.getString(R.string.suggested_punctuations);
  mSuggestPuncList=createSuggestPuncList(mSuggestPuncs);
  final boolean hasVibrator=VibratorCompatWrapper.getInstance(context).hasVibrator();
  mVibrateOn=hasVibrator && prefs.getBoolean(Settings.PREF_VIBRATE_ON,false);
  mSoundOn=prefs.getBoolean(Settings.PREF_SOUND_ON,res.getBoolean(R.bool.config_default_sound_enabled));
  mPopupOn=isPopupEnabled(prefs,res);
  mAutoCap=prefs.getBoolean(Settings.PREF_AUTO_CAP,true);
  mQuickFixes=isQuickFixesEnabled(prefs,res);
  mAutoCorrectEnabled=isAutoCorrectEnabled(prefs,res);
  mBigramSuggestionEnabled=mAutoCorrectEnabled && isBigramSuggestionEnabled(prefs,res,mAutoCorrectEnabled);
  mBigramPredictionEnabled=mBigramSuggestionEnabled && isBigramPredictionEnabled(prefs,res);
  mAutoCorrectionThreshold=getAutoCorrectionThreshold(prefs,res);
  Utils.setSystemLocale(res,savedLocale);
}",0.992239467849224
88207,"public Values(final SharedPreferences prefs,final Context context,final String localeStr){
  final Resources res=context.getResources();
  final Locale savedLocale;
  if (null != localeStr) {
    final Locale keyboardLocale=new Locale(localeStr);
    savedLocale=Utils.setSystemLocale(res,keyboardLocale);
  }
 else {
    savedLocale=null;
  }
  mEnableShowSubtypeSettings=res.getBoolean(R.bool.config_enable_show_subtype_settings);
  mSwipeDownDismissKeyboardEnabled=res.getBoolean(R.bool.config_swipe_down_dismiss_keyboard_enabled);
  mDelayBeforeFadeoutLanguageOnSpacebar=res.getInteger(R.integer.config_delay_before_fadeout_language_on_spacebar);
  mDelayUpdateSuggestions=res.getInteger(R.integer.config_delay_update_suggestions);
  mDelayUpdateOldSuggestions=res.getInteger(R.integer.config_delay_update_old_suggestions);
  mDelayUpdateShiftState=res.getInteger(R.integer.config_delay_update_shift_state);
  mDurationOfFadeoutLanguageOnSpacebar=res.getInteger(R.integer.config_duration_of_fadeout_language_on_spacebar);
  mFinalFadeoutFactorOfLanguageOnSpacebar=res.getInteger(R.integer.config_final_fadeout_percentage_of_language_on_spacebar) / 100.0f;
  mDoubleSpacesTurnIntoPeriodTimeout=res.getInteger(R.integer.config_double_spaces_turn_into_period_timeout);
  mMagicSpaceStrippers=res.getString(R.string.magic_space_stripping_symbols);
  mMagicSpaceSwappers=res.getString(R.string.magic_space_swapping_symbols);
  String wordSeparators=mMagicSpaceStrippers + mMagicSpaceSwappers + res.getString(R.string.magic_space_promoting_symbols);
  final String notWordSeparators=res.getString(R.string.non_word_separator_symbols);
  for (int i=notWordSeparators.length() - 1; i >= 0; --i) {
    wordSeparators=wordSeparators.replace(notWordSeparators.substring(i,i + 1),""String_Node_Str"");
  }
  mWordSeparators=wordSeparators;
  mSuggestPuncs=res.getString(R.string.suggested_punctuations);
  mSuggestPuncList=createSuggestPuncList(mSuggestPuncs);
  final boolean hasVibrator=VibratorCompatWrapper.getInstance(context).hasVibrator();
  mVibrateOn=hasVibrator && prefs.getBoolean(Settings.PREF_VIBRATE_ON,false);
  mSoundOn=prefs.getBoolean(Settings.PREF_SOUND_ON,res.getBoolean(R.bool.config_default_sound_enabled));
  mPopupOn=isPopupEnabled(prefs,res);
  mAutoCap=prefs.getBoolean(Settings.PREF_AUTO_CAP,true);
  mQuickFixes=isQuickFixesEnabled(prefs,res);
  mAutoCorrectEnabled=isAutoCorrectEnabled(prefs,res);
  mBigramSuggestionEnabled=mAutoCorrectEnabled && isBigramSuggestionEnabled(prefs,res,mAutoCorrectEnabled);
  mBigramPredictionEnabled=mBigramSuggestionEnabled && isBigramPredictionEnabled(prefs,res);
  mAutoCorrectionThreshold=getAutoCorrectionThreshold(prefs,res);
}","public Values(final SharedPreferences prefs,final Context context,final String localeStr){
  final Resources res=context.getResources();
  final Locale savedLocale;
  if (null != localeStr) {
    final Locale keyboardLocale=new Locale(localeStr);
    savedLocale=Utils.setSystemLocale(res,keyboardLocale);
  }
 else {
    savedLocale=null;
  }
  mEnableShowSubtypeSettings=res.getBoolean(R.bool.config_enable_show_subtype_settings);
  mSwipeDownDismissKeyboardEnabled=res.getBoolean(R.bool.config_swipe_down_dismiss_keyboard_enabled);
  mDelayBeforeFadeoutLanguageOnSpacebar=res.getInteger(R.integer.config_delay_before_fadeout_language_on_spacebar);
  mDelayUpdateSuggestions=res.getInteger(R.integer.config_delay_update_suggestions);
  mDelayUpdateOldSuggestions=res.getInteger(R.integer.config_delay_update_old_suggestions);
  mDelayUpdateShiftState=res.getInteger(R.integer.config_delay_update_shift_state);
  mDurationOfFadeoutLanguageOnSpacebar=res.getInteger(R.integer.config_duration_of_fadeout_language_on_spacebar);
  mFinalFadeoutFactorOfLanguageOnSpacebar=res.getInteger(R.integer.config_final_fadeout_percentage_of_language_on_spacebar) / 100.0f;
  mDoubleSpacesTurnIntoPeriodTimeout=res.getInteger(R.integer.config_double_spaces_turn_into_period_timeout);
  mMagicSpaceStrippers=res.getString(R.string.magic_space_stripping_symbols);
  mMagicSpaceSwappers=res.getString(R.string.magic_space_swapping_symbols);
  String wordSeparators=mMagicSpaceStrippers + mMagicSpaceSwappers + res.getString(R.string.magic_space_promoting_symbols);
  final String notWordSeparators=res.getString(R.string.non_word_separator_symbols);
  for (int i=notWordSeparators.length() - 1; i >= 0; --i) {
    wordSeparators=wordSeparators.replace(notWordSeparators.substring(i,i + 1),""String_Node_Str"");
  }
  mWordSeparators=wordSeparators;
  mSuggestPuncs=res.getString(R.string.suggested_punctuations);
  mSuggestPuncList=createSuggestPuncList(mSuggestPuncs);
  final boolean hasVibrator=VibratorCompatWrapper.getInstance(context).hasVibrator();
  mVibrateOn=hasVibrator && prefs.getBoolean(Settings.PREF_VIBRATE_ON,false);
  mSoundOn=prefs.getBoolean(Settings.PREF_SOUND_ON,res.getBoolean(R.bool.config_default_sound_enabled));
  mPopupOn=isPopupEnabled(prefs,res);
  mAutoCap=prefs.getBoolean(Settings.PREF_AUTO_CAP,true);
  mQuickFixes=isQuickFixesEnabled(prefs,res);
  mAutoCorrectEnabled=isAutoCorrectEnabled(prefs,res);
  mBigramSuggestionEnabled=mAutoCorrectEnabled && isBigramSuggestionEnabled(prefs,res,mAutoCorrectEnabled);
  mBigramPredictionEnabled=mBigramSuggestionEnabled && isBigramPredictionEnabled(prefs,res);
  mAutoCorrectionThreshold=getAutoCorrectionThreshold(prefs,res);
  Utils.setSystemLocale(res,savedLocale);
}",0.992239467849224
88208,"public void pickSuggestionManually(int index,CharSequence suggestion){
  SuggestedWords suggestions=mCandidateView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  final boolean recorrecting=TextEntryState.isRecorrecting();
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    CompletionInfo ci=mApplicationSpecifiedCompletions[index];
    if (ic != null) {
      ic.commitCompletion(ci);
    }
    mCommittedLength=suggestion.length();
    if (mCandidateView != null) {
      mCandidateView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && (mSettingsValues.isWordSeparator(suggestion.charAt(0)) || mSettingsValues.isSuggestedPunctuation(suggestion.charAt(0)))) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestions.mWords);
    final char primaryCode=suggestion.charAt(0);
    final int toLeft=(ic == null) ? 0 : ic.getTextBeforeCursor(1,0).charAt(0);
    final boolean oldMagicSpace=mJustAddedMagicSpace;
    if (Keyboard.CODE_SPACE == toLeft)     mJustAddedMagicSpace=true;
    onCodeInput(primaryCode,new int[]{primaryCode},KeyboardActionListener.NOT_A_TOUCH_COORDINATE,KeyboardActionListener.NOT_A_TOUCH_COORDINATE);
    mJustAddedMagicSpace=oldMagicSpace;
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (!mHasUncommittedTypedChars) {
    mWord.reset();
  }
  mJustAccepted=true;
  pickSuggestion(suggestion);
  if (index == 0) {
    addToAutoAndUserBigramDictionaries(suggestion,AutoDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  LatinImeLogger.logOnManualSuggestion(mComposing.toString(),suggestion.toString(),index,suggestions.mWords);
  TextEntryState.acceptedSuggestion(mComposing.toString(),suggestion);
  if (mShouldInsertMagicSpace && !recorrecting) {
    sendMagicSpace();
  }
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mHasDictionary || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  if (!recorrecting) {
    TextEntryState.typedCharacter((char)Keyboard.CODE_SPACE,true,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  }
 else   if (!showingAddToDictionaryHint) {
    clearSuggestions();
    mHandler.postUpdateOldSuggestions();
  }
  if (showingAddToDictionaryHint) {
    mCandidateView.showAddToDictionaryHint(suggestion);
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}","public void pickSuggestionManually(int index,CharSequence suggestion){
  SuggestedWords suggestions=mCandidateView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  final boolean recorrecting=TextEntryState.isRecorrecting();
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    CompletionInfo ci=mApplicationSpecifiedCompletions[index];
    if (ic != null) {
      ic.commitCompletion(ci);
    }
    mCommittedLength=suggestion.length();
    if (mCandidateView != null) {
      mCandidateView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && (mSettingsValues.isWordSeparator(suggestion.charAt(0)) || mSettingsValues.isSuggestedPunctuation(suggestion.charAt(0)))) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestions.mWords);
    final char primaryCode=suggestion.charAt(0);
    final int toLeft=(ic == null) ? 0 : ic.getTextBeforeCursor(1,0).charAt(0);
    final boolean oldMagicSpace=mJustAddedMagicSpace;
    if (Keyboard.CODE_SPACE == toLeft)     mJustAddedMagicSpace=true;
    onCodeInput(primaryCode,new int[]{primaryCode},KeyboardActionListener.NOT_A_TOUCH_COORDINATE,KeyboardActionListener.NOT_A_TOUCH_COORDINATE);
    mJustAddedMagicSpace=oldMagicSpace;
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (!mHasUncommittedTypedChars) {
    mWord.reset();
  }
  mJustAccepted=true;
  pickSuggestion(suggestion);
  if (index == 0) {
    addToAutoAndUserBigramDictionaries(suggestion,AutoDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  LatinImeLogger.logOnManualSuggestion(mComposing.toString(),suggestion.toString(),index,suggestions.mWords);
  TextEntryState.acceptedSuggestion(mComposing.toString(),suggestion);
  if (mShouldInsertMagicSpace && !recorrecting) {
    sendMagicSpace();
  }
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mHasDictionary || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  if (!recorrecting) {
    TextEntryState.typedCharacter((char)Keyboard.CODE_SPACE,true,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
    mHandler.postUpdateSuggestions();
  }
 else   if (!showingAddToDictionaryHint) {
    clearSuggestions();
    mHandler.postUpdateOldSuggestions();
  }
  if (showingAddToDictionaryHint) {
    mCandidateView.showAddToDictionaryHint(suggestion);
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9932384341637012
88209,"public void pickSuggestionManually(int index,CharSequence suggestion){
  SuggestedWords suggestions=mCandidateView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  final boolean recorrecting=TextEntryState.isRecorrecting();
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    CompletionInfo ci=mApplicationSpecifiedCompletions[index];
    if (ic != null) {
      ic.commitCompletion(ci);
    }
    mCommittedLength=suggestion.length();
    if (mCandidateView != null) {
      mCandidateView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && (mSettingsValues.isWordSeparator(suggestion.charAt(0)) || mSettingsValues.isSuggestedPunctuation(suggestion.charAt(0)))) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestions.mWords);
    final char primaryCode=suggestion.charAt(0);
    final int toLeft=(ic == null) ? 0 : ic.getTextBeforeCursor(1,0).charAt(0);
    final boolean oldMagicSpace=mJustAddedMagicSpace;
    if (Keyboard.CODE_SPACE == toLeft)     mJustAddedMagicSpace=true;
    onCodeInput(primaryCode,new int[]{primaryCode},KeyboardActionListener.NOT_A_TOUCH_COORDINATE,KeyboardActionListener.NOT_A_TOUCH_COORDINATE);
    mJustAddedMagicSpace=oldMagicSpace;
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (!mHasUncommittedTypedChars) {
    mWord.reset();
  }
  mJustAccepted=true;
  pickSuggestion(suggestion);
  if (index == 0) {
    addToAutoAndUserBigramDictionaries(suggestion,AutoDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  LatinImeLogger.logOnManualSuggestion(mComposing.toString(),suggestion.toString(),index,suggestions.mWords);
  TextEntryState.acceptedSuggestion(mComposing.toString(),suggestion);
  if (mShouldInsertMagicSpace && !recorrecting) {
    sendMagicSpace();
  }
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mHasDictionary || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  if (!recorrecting) {
    TextEntryState.typedCharacter((char)Keyboard.CODE_SPACE,true,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
    mHandler.postUpdateSuggestions();
  }
 else   if (!showingAddToDictionaryHint) {
    clearSuggestions();
    mHandler.postUpdateOldSuggestions();
  }
  if (showingAddToDictionaryHint) {
    mCandidateView.showAddToDictionaryHint(suggestion);
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}","public void pickSuggestionManually(int index,CharSequence suggestion){
  SuggestedWords suggestions=mCandidateView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  final boolean recorrecting=TextEntryState.isRecorrecting();
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    CompletionInfo ci=mApplicationSpecifiedCompletions[index];
    if (ic != null) {
      ic.commitCompletion(ci);
    }
    mCommittedLength=suggestion.length();
    if (mCandidateView != null) {
      mCandidateView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && (mSettingsValues.isWordSeparator(suggestion.charAt(0)) || mSettingsValues.isSuggestedPunctuation(suggestion.charAt(0)))) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestions.mWords);
    final char primaryCode=suggestion.charAt(0);
    final int toLeft=(ic == null) ? 0 : ic.getTextBeforeCursor(1,0).charAt(0);
    final boolean oldMagicSpace=mJustAddedMagicSpace;
    if (Keyboard.CODE_SPACE == toLeft)     mJustAddedMagicSpace=true;
    onCodeInput(primaryCode,new int[]{primaryCode},KeyboardActionListener.NOT_A_TOUCH_COORDINATE,KeyboardActionListener.NOT_A_TOUCH_COORDINATE);
    mJustAddedMagicSpace=oldMagicSpace;
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (!mHasUncommittedTypedChars) {
    mWord.reset();
  }
  mJustAccepted=true;
  pickSuggestion(suggestion);
  if (index == 0) {
    addToAutoAndUserBigramDictionaries(suggestion,AutoDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  LatinImeLogger.logOnManualSuggestion(mComposing.toString(),suggestion.toString(),index,suggestions.mWords);
  TextEntryState.acceptedSuggestion(mComposing.toString(),suggestion);
  if (mShouldInsertMagicSpace && !recorrecting) {
    sendMagicSpace();
  }
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mHasDictionary || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  if (!recorrecting) {
    TextEntryState.typedCharacter((char)Keyboard.CODE_SPACE,true,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  }
  if (!showingAddToDictionaryHint) {
    clearSuggestions();
    mHandler.postUpdateOldSuggestions();
  }
  if (showingAddToDictionaryHint) {
    mCandidateView.showAddToDictionaryHint(suggestion);
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9921624510153187
88210,"public void pickSuggestionManually(int index,CharSequence suggestion){
  SuggestedWords suggestions=mCandidateView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  final boolean recorrecting=TextEntryState.isRecorrecting();
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    CompletionInfo ci=mApplicationSpecifiedCompletions[index];
    if (ic != null) {
      ic.commitCompletion(ci);
    }
    mCommittedLength=suggestion.length();
    if (mCandidateView != null) {
      mCandidateView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && (mSettingsValues.isWordSeparator(suggestion.charAt(0)) || mSettingsValues.isSuggestedPunctuation(suggestion.charAt(0)))) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestions.mWords);
    final char primaryCode=suggestion.charAt(0);
    final int toLeft=(ic == null) ? 0 : ic.getTextBeforeCursor(1,0).charAt(0);
    final boolean oldMagicSpace=mJustAddedMagicSpace;
    if (Keyboard.CODE_SPACE == toLeft)     mJustAddedMagicSpace=true;
    onCodeInput(primaryCode,new int[]{primaryCode},KeyboardActionListener.NOT_A_TOUCH_COORDINATE,KeyboardActionListener.NOT_A_TOUCH_COORDINATE);
    mJustAddedMagicSpace=oldMagicSpace;
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (!mHasUncommittedTypedChars) {
    mWord.reset();
  }
  mJustAccepted=true;
  pickSuggestion(suggestion);
  if (index == 0) {
    addToAutoAndUserBigramDictionaries(suggestion,AutoDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  LatinImeLogger.logOnManualSuggestion(mComposing.toString(),suggestion.toString(),index,suggestions.mWords);
  TextEntryState.acceptedSuggestion(mComposing.toString(),suggestion);
  if (mShouldInsertMagicSpace && !recorrecting) {
    sendMagicSpace();
  }
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mHasDictionary || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  if (!recorrecting) {
    TextEntryState.typedCharacter((char)Keyboard.CODE_SPACE,true,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
  }
 else   if (!showingAddToDictionaryHint) {
    clearSuggestions();
    mHandler.postUpdateOldSuggestions();
  }
  if (showingAddToDictionaryHint) {
    mCandidateView.showAddToDictionaryHint(suggestion);
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}","public void pickSuggestionManually(int index,CharSequence suggestion){
  SuggestedWords suggestions=mCandidateView.getSuggestions();
  mVoiceProxy.flushAndLogAllTextModificationCounters(index,suggestion,mSettingsValues.mWordSeparators);
  final boolean recorrecting=TextEntryState.isRecorrecting();
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mApplicationSpecifiedCompletionOn && mApplicationSpecifiedCompletions != null && index >= 0 && index < mApplicationSpecifiedCompletions.length) {
    CompletionInfo ci=mApplicationSpecifiedCompletions[index];
    if (ic != null) {
      ic.commitCompletion(ci);
    }
    mCommittedLength=suggestion.length();
    if (mCandidateView != null) {
      mCandidateView.clear();
    }
    mKeyboardSwitcher.updateShiftState();
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && (mSettingsValues.isWordSeparator(suggestion.charAt(0)) || mSettingsValues.isSuggestedPunctuation(suggestion.charAt(0)))) {
    LatinImeLogger.logOnManualSuggestion(""String_Node_Str"",suggestion.toString(),index,suggestions.mWords);
    final char primaryCode=suggestion.charAt(0);
    final int toLeft=(ic == null) ? 0 : ic.getTextBeforeCursor(1,0).charAt(0);
    final boolean oldMagicSpace=mJustAddedMagicSpace;
    if (Keyboard.CODE_SPACE == toLeft)     mJustAddedMagicSpace=true;
    onCodeInput(primaryCode,new int[]{primaryCode},KeyboardActionListener.NOT_A_TOUCH_COORDINATE,KeyboardActionListener.NOT_A_TOUCH_COORDINATE);
    mJustAddedMagicSpace=oldMagicSpace;
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (!mHasUncommittedTypedChars) {
    mWord.reset();
  }
  mJustAccepted=true;
  pickSuggestion(suggestion);
  if (index == 0) {
    addToAutoAndUserBigramDictionaries(suggestion,AutoDictionary.FREQUENCY_FOR_PICKED);
  }
 else {
    addToOnlyBigramDictionary(suggestion,1);
  }
  LatinImeLogger.logOnManualSuggestion(mComposing.toString(),suggestion.toString(),index,suggestions.mWords);
  TextEntryState.acceptedSuggestion(mComposing.toString(),suggestion);
  if (mShouldInsertMagicSpace && !recorrecting) {
    sendMagicSpace();
  }
  final boolean showingAddToDictionaryHint=index == 0 && mSuggest != null && (!mHasDictionary || !AutoCorrection.isValidWord(mSuggest.getUnigramDictionaries(),suggestion,true));
  if (!recorrecting) {
    TextEntryState.typedCharacter((char)Keyboard.CODE_SPACE,true,WordComposer.NOT_A_COORDINATE,WordComposer.NOT_A_COORDINATE);
    mHandler.postUpdateSuggestions();
  }
 else   if (!showingAddToDictionaryHint) {
    clearSuggestions();
    mHandler.postUpdateOldSuggestions();
  }
  if (showingAddToDictionaryHint) {
    mCandidateView.showAddToDictionaryHint(suggestion);
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9932384341637012
88211,"/** 
 * Finds all possible nearby key indices around a touch event point and returns the nearest key index. The algorithm to determine the nearby keys depends on the threshold set by  {@link #setProximityThreshold(int)} and the mode set by{@link #setProximityCorrectionEnabled(boolean)}.
 * @param x The x-coordinate of a touch point
 * @param y The y-coordinate of a touch point
 * @param allCodes All nearby key code except functional key are returned in this array
 * @return The nearest key index
 */
public int getKeyIndexAndNearbyCodes(int x,int y,final int[] allCodes){
  final List<Key> keys=getKeys();
  final int touchX=getTouchX(x);
  final int touchY=getTouchY(y);
  initializeNearbyKeys();
  int primaryIndex=NOT_A_KEY;
  for (  final int index : mKeyboard.getNearestKeys(touchX,touchY)) {
    final Key key=keys.get(index);
    final boolean isInside=mKeyboard.isInside(key,touchX,touchY);
    final int distance=key.squaredDistanceToEdge(touchX,touchY);
    if (isInside || (mProximityCorrectOn && distance < mProximityThresholdSquare)) {
      final int insertedPosition=sortNearbyKeys(index,distance);
      if (insertedPosition == 0 && isInside)       primaryIndex=index;
    }
  }
  if (allCodes != null && allCodes.length > 0) {
    getNearbyKeyCodes(allCodes);
    if (DEBUG) {
      Log.d(TAG,""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ (primaryIndex == NOT_A_KEY ? ""String_Node_Str"" : keys.get(primaryIndex).mCode)+ ""String_Node_Str""+ Arrays.toString(allCodes));
    }
  }
  return primaryIndex;
}","/** 
 * Finds all possible nearby key indices around a touch event point and returns the nearest key index. The algorithm to determine the nearby keys depends on the threshold set by  {@link #setProximityThreshold(int)} and the mode set by{@link #setProximityCorrectionEnabled(boolean)}.
 * @param x The x-coordinate of a touch point
 * @param y The y-coordinate of a touch point
 * @param allCodes All nearby key code except functional key are returned in this array
 * @return The nearest key index
 */
public int getKeyIndexAndNearbyCodes(int x,int y,final int[] allCodes){
  final List<Key> keys=getKeys();
  final int touchX=getTouchX(x);
  final int touchY=getTouchY(y);
  initializeNearbyKeys();
  int primaryIndex=NOT_A_KEY;
  for (  final int index : mKeyboard.getNearestKeys(touchX,touchY)) {
    final Key key=keys.get(index);
    final boolean isInside=mKeyboard.isInside(key,touchX,touchY);
    final int distance=key.squaredDistanceToEdge(touchX,touchY);
    if (isInside || (mProximityCorrectOn && distance < mProximityThresholdSquare)) {
      final int insertedPosition=sortNearbyKeys(index,distance);
      if (insertedPosition == 0)       primaryIndex=index;
    }
  }
  if (allCodes != null && allCodes.length > 0) {
    getNearbyKeyCodes(allCodes);
    if (DEBUG) {
      Log.d(TAG,""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ (primaryIndex == NOT_A_KEY ? ""String_Node_Str"" : keys.get(primaryIndex).mCode)+ ""String_Node_Str""+ Arrays.toString(allCodes));
    }
  }
  return primaryIndex;
}",0.9960912052117264
88212,"public static Method getMethod(Class<?> targetClass,String name,Class<?>... parameterTypes){
  try {
    return targetClass.getMethod(name,parameterTypes);
  }
 catch (  SecurityException e) {
    return null;
  }
catch (  NoSuchMethodException e) {
    return null;
  }
}","public static Method getMethod(Class<?> targetClass,String name,Class<?>... parameterTypes){
  if (targetClass == null || TextUtils.isEmpty(name))   return null;
  try {
    return targetClass.getMethod(name,parameterTypes);
  }
 catch (  SecurityException e) {
    return null;
  }
catch (  NoSuchMethodException e) {
    return null;
  }
}",0.8874388254486134
88213,"public Map<InputMethodInfoCompatWrapper,List<InputMethodSubtypeCompatWrapper>> getShortcutInputMethodsAndSubtypes(){
  Object retval=CompatUtils.invoke(mImm,null,METHOD_getShortcutInputMethodsAndSubtypes);
  if (!(retval instanceof Map))   return null;
  Map<InputMethodInfoCompatWrapper,List<InputMethodSubtypeCompatWrapper>> shortcutMap=new HashMap<InputMethodInfoCompatWrapper,List<InputMethodSubtypeCompatWrapper>>();
  final Map<?,?> retvalMap=(Map<?,?>)retval;
  for (  Object key : retvalMap.keySet()) {
    if (!(key instanceof InputMethodInfo)) {
      Log.e(TAG,""String_Node_Str"");
      return null;
    }
    shortcutMap.put(new InputMethodInfoCompatWrapper((InputMethodInfo)key),CompatUtils.copyInputMethodSubtypeListToWrapper(retvalMap.get(key)));
  }
  return shortcutMap;
}","public Map<InputMethodInfoCompatWrapper,List<InputMethodSubtypeCompatWrapper>> getShortcutInputMethodsAndSubtypes(){
  Object retval=CompatUtils.invoke(mImm,null,METHOD_getShortcutInputMethodsAndSubtypes);
  if (!(retval instanceof Map))   return Collections.emptyMap();
  Map<InputMethodInfoCompatWrapper,List<InputMethodSubtypeCompatWrapper>> shortcutMap=new HashMap<InputMethodInfoCompatWrapper,List<InputMethodSubtypeCompatWrapper>>();
  final Map<?,?> retvalMap=(Map<?,?>)retval;
  for (  Object key : retvalMap.keySet()) {
    if (!(key instanceof InputMethodInfo)) {
      Log.e(TAG,""String_Node_Str"");
      return null;
    }
    shortcutMap.put(new InputMethodInfoCompatWrapper((InputMethodInfo)key),CompatUtils.copyInputMethodSubtypeListToWrapper(retvalMap.get(key)));
  }
  return shortcutMap;
}",0.9837092731829574
88214,"public boolean switchToLastInputMethod(IBinder token){
  if (mImm == null)   return false;
  return mImm.switchToLastInputMethod(token);
}","public boolean switchToLastInputMethod(IBinder token){
  return (Boolean)CompatUtils.invoke(mImm,false,METHOD_switchToLastInputMethod,token);
}",0.7188612099644128
88215,"public InputMethodSubtypeCompatWrapper(Object subtype){
  super(CLASS_InputMethodSubtype.isInstance(subtype) ? subtype : null);
  if (DBG) {
    Log.d(TAG,""String_Node_Str"");
  }
}","public InputMethodSubtypeCompatWrapper(Object subtype){
  super((CLASS_InputMethodSubtype != null && CLASS_InputMethodSubtype.isInstance(subtype)) ? subtype : null);
  if (DBG) {
    Log.d(TAG,""String_Node_Str"");
  }
}",0.9045226130653268
88216,"public String getMode(){
  return (String)CompatUtils.invoke(mObj,null,METHOD_getMode);
}","public String getMode(){
  String s=(String)CompatUtils.invoke(mObj,null,METHOD_getMode);
  if (TextUtils.isEmpty(s))   return DEFAULT_MODE;
  return s;
}",0.6995884773662552
88217,"public boolean containsExtraValueKey(String key){
  return (Boolean)CompatUtils.invoke(mObj,null,METHOD_containsExtraValueKey,key);
}","public boolean containsExtraValueKey(String key){
  return (Boolean)CompatUtils.invoke(mObj,false,METHOD_containsExtraValueKey,key);
}",0.9737827715355806
88218,"public String getLocale(){
  return (String)CompatUtils.invoke(mObj,null,METHOD_getLocale);
}","public String getLocale(){
  final String s=(String)CompatUtils.invoke(mObj,null,METHOD_getLocale);
  if (TextUtils.isEmpty(s))   return DEFAULT_LOCALE;
  return s;
}",0.6872586872586872
88219,"private void setHasLoggingInfo(boolean hasLoggingInfo){
  mHasLoggingInfo=hasLoggingInfo;
  UserHappinessSignals.setHasVoiceLoggingInfo(hasLoggingInfo);
}","private void setHasLoggingInfo(boolean hasLoggingInfo){
  mHasLoggingInfo=hasLoggingInfo;
  VoiceInputLoggerCompatUtils.setHasVoiceLoggingInfoCompat(hasLoggingInfo);
}",0.8722741433021807
88220,"public void textModifiedByChooseSuggestion(int suggestionLength,int replacedPhraseLength,int index,String before,String after){
  setHasLoggingInfo(true);
  Intent i=newLoggingBroadcast(LoggingEvents.VoiceIme.TEXT_MODIFIED);
  i.putExtra(LoggingEvents.VoiceIme.EXTRA_TEXT_MODIFIED_LENGTH,suggestionLength);
  i.putExtra(LoggingEvents.VoiceIme.EXTRA_TEXT_REPLACED_LENGTH,replacedPhraseLength);
  i.putExtra(LoggingEvents.VoiceIme.EXTRA_TEXT_MODIFIED_TYPE,LoggingEvents.VoiceIme.TEXT_MODIFIED_TYPE_CHOOSE_SUGGESTION);
  i.putExtra(LoggingEvents.VoiceIme.EXTRA_N_BEST_CHOOSE_INDEX,index);
  i.putExtra(LoggingEvents.VoiceIme.EXTRA_BEFORE_N_BEST_CHOOSE,before);
  i.putExtra(LoggingEvents.VoiceIme.EXTRA_AFTER_N_BEST_CHOOSE,after);
  mContext.sendBroadcast(i);
}","public void textModifiedByChooseSuggestion(int suggestionLength,int replacedPhraseLength,int index,String before,String after){
  setHasLoggingInfo(true);
  Intent i=newLoggingBroadcast(LoggingEvents.VoiceIme.TEXT_MODIFIED);
  i.putExtra(LoggingEvents.VoiceIme.EXTRA_TEXT_MODIFIED_LENGTH,suggestionLength);
  i.putExtra(VoiceInputLoggerCompatUtils.EXTRA_TEXT_REPLACED_LENGTH,replacedPhraseLength);
  i.putExtra(LoggingEvents.VoiceIme.EXTRA_TEXT_MODIFIED_TYPE,LoggingEvents.VoiceIme.TEXT_MODIFIED_TYPE_CHOOSE_SUGGESTION);
  i.putExtra(LoggingEvents.VoiceIme.EXTRA_N_BEST_CHOOSE_INDEX,index);
  i.putExtra(VoiceInputLoggerCompatUtils.EXTRA_BEFORE_N_BEST_CHOOSE,before);
  i.putExtra(VoiceInputLoggerCompatUtils.EXTRA_AFTER_N_BEST_CHOOSE,after);
  mContext.sendBroadcast(i);
}",0.9274983670803396
88221,"public void updateSubtype(InputMethodSubtypeCompatWrapper newSubtype){
  final String newLocale;
  final String newMode;
  final String oldMode=getCurrentSubtypeMode();
  if (newSubtype == null) {
    Log.w(TAG,""String_Node_Str"");
    newLocale=""String_Node_Str"";
    newMode=KEYBOARD_MODE;
  }
 else {
    newLocale=newSubtype.getLocale();
    newMode=newSubtype.getMode();
  }
  if (DBG) {
    Log.w(TAG,""String_Node_Str"" + newLocale + ""String_Node_Str""+ newMode+ ""String_Node_Str""+ mInputLocaleStr+ ""String_Node_Str""+ oldMode);
  }
  boolean languageChanged=false;
  if (!newLocale.equals(mInputLocaleStr)) {
    if (mInputLocaleStr != null) {
      languageChanged=true;
    }
    updateInputLocale(newLocale);
  }
  boolean modeChanged=false;
  if (!newMode.equals(oldMode)) {
    if (oldMode != null) {
      modeChanged=true;
    }
  }
  mCurrentSubtype=newSubtype;
  if (isKeyboardMode()) {
    if (modeChanged) {
      if (VOICE_MODE.equals(oldMode) && mVoiceInputWrapper != null) {
        mVoiceInputWrapper.cancel();
      }
    }
    if (modeChanged || languageChanged) {
      updateShortcutIME();
      mService.onRefreshKeyboard();
    }
  }
 else   if (isVoiceMode() && mVoiceInputWrapper != null) {
    if (VOICE_MODE.equals(oldMode)) {
      mVoiceInputWrapper.reset();
    }
    if (languageChanged || modeChanged || VoiceProxy.getInstance().needsToShowWarningDialog()) {
      triggerVoiceIME();
    }
  }
 else {
    Log.w(TAG,""String_Node_Str"" + newMode);
    if (VOICE_MODE.equals(oldMode) && mVoiceInputWrapper != null) {
      mVoiceInputWrapper.reset();
    }
  }
}","public void updateSubtype(InputMethodSubtypeCompatWrapper newSubtype){
  final String newLocale;
  final String newMode;
  final String oldMode=getCurrentSubtypeMode();
  if (newSubtype == null || !newSubtype.hasOriginalObject()) {
    Log.w(TAG,""String_Node_Str"");
    newLocale=""String_Node_Str"";
    newMode=KEYBOARD_MODE;
  }
 else {
    newLocale=newSubtype.getLocale();
    newMode=newSubtype.getMode();
  }
  if (DBG) {
    Log.w(TAG,""String_Node_Str"" + newLocale + ""String_Node_Str""+ newMode+ ""String_Node_Str""+ mInputLocaleStr+ ""String_Node_Str""+ oldMode);
  }
  boolean languageChanged=false;
  if (!newLocale.equals(mInputLocaleStr)) {
    if (mInputLocaleStr != null) {
      languageChanged=true;
    }
    updateInputLocale(newLocale);
  }
  boolean modeChanged=false;
  if (!newMode.equals(oldMode)) {
    if (oldMode != null) {
      modeChanged=true;
    }
  }
  mCurrentSubtype=newSubtype;
  if (isKeyboardMode()) {
    if (modeChanged) {
      if (VOICE_MODE.equals(oldMode) && mVoiceInputWrapper != null) {
        mVoiceInputWrapper.cancel();
      }
    }
    if (modeChanged || languageChanged) {
      updateShortcutIME();
      mService.onRefreshKeyboard();
    }
  }
 else   if (isVoiceMode() && mVoiceInputWrapper != null) {
    if (VOICE_MODE.equals(oldMode)) {
      mVoiceInputWrapper.reset();
    }
    if (languageChanged || modeChanged || VoiceProxy.getInstance().needsToShowWarningDialog()) {
      triggerVoiceIME();
    }
  }
 else {
    Log.w(TAG,""String_Node_Str"" + newMode);
    if (VOICE_MODE.equals(oldMode) && mVoiceInputWrapper != null) {
      mVoiceInputWrapper.reset();
    }
  }
}",0.9891270580925752
88222,"public void setVoiceInput(VoiceInput voiceInput,SubtypeSwitcher switcher){
  if (mVoiceInput == null && voiceInput != null) {
    mVoiceInput=voiceInput;
    switcher.setVoiceInputConnector(this);
  }
}","public void setVoiceInput(VoiceInput voiceInput,SubtypeSwitcher switcher){
  if (mVoiceInput == null && voiceInput != null) {
    mVoiceInput=voiceInput;
  }
  switcher.setVoiceInputConnector(this);
}",0.9850746268656716
88223,"private void showOptionsMenuInternal(CharSequence title,CharSequence[] items,DialogInterface.OnClickListener listener){
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setCancelable(true);
  builder.setIcon(R.drawable.ic_dialog_keyboard);
  builder.setNegativeButton(android.R.string.cancel,null);
  builder.setItems(items,listener);
  builder.setTitle(title);
  mOptionsDialog=builder.create();
  mOptionsDialog.setCanceledOnTouchOutside(true);
  Window window=mOptionsDialog.getWindow();
  WindowManager.LayoutParams lp=window.getAttributes();
  lp.token=mKeyboardSwitcher.getInputView().getWindowToken();
  lp.type=WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;
  window.setAttributes(lp);
  window.addFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);
  mOptionsDialog.show();
}","private void showOptionsMenuInternal(CharSequence title,CharSequence[] items,DialogInterface.OnClickListener listener){
  final IBinder windowToken=mKeyboardSwitcher.getInputView().getWindowToken();
  if (windowToken == null)   return;
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setCancelable(true);
  builder.setIcon(R.drawable.ic_dialog_keyboard);
  builder.setNegativeButton(android.R.string.cancel,null);
  builder.setItems(items,listener);
  builder.setTitle(title);
  mOptionsDialog=builder.create();
  mOptionsDialog.setCanceledOnTouchOutside(true);
  Window window=mOptionsDialog.getWindow();
  WindowManager.LayoutParams lp=window.getAttributes();
  lp.token=windowToken;
  lp.type=WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;
  window.setAttributes(lp);
  window.addFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);
  mOptionsDialog.show();
}",0.9097222222222222
88224,"private void showOptionsMenuInternal(CharSequence title,CharSequence[] items,DialogInterface.OnClickListener listener){
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setCancelable(true);
  builder.setIcon(R.drawable.ic_dialog_keyboard);
  builder.setNegativeButton(android.R.string.cancel,null);
  builder.setItems(items,listener);
  builder.setTitle(title);
  mOptionsDialog=builder.create();
  mOptionsDialog.setCanceledOnTouchOutside(true);
  Window window=mOptionsDialog.getWindow();
  WindowManager.LayoutParams lp=window.getAttributes();
  lp.token=mKeyboardSwitcher.getInputView().getWindowToken();
  lp.type=WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;
  window.setAttributes(lp);
  window.addFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);
  mOptionsDialog.show();
}","private void showOptionsMenuInternal(CharSequence title,CharSequence[] items,DialogInterface.OnClickListener listener){
  final IBinder windowToken=mKeyboardSwitcher.getInputView().getWindowToken();
  if (windowToken == null)   return;
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setCancelable(true);
  builder.setIcon(R.drawable.ic_dialog_keyboard);
  builder.setNegativeButton(android.R.string.cancel,null);
  builder.setItems(items,listener);
  builder.setTitle(title);
  mOptionsDialog=builder.create();
  mOptionsDialog.setCanceledOnTouchOutside(true);
  Window window=mOptionsDialog.getWindow();
  WindowManager.LayoutParams lp=window.getAttributes();
  lp.token=windowToken;
  lp.type=WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;
  window.setAttributes(lp);
  window.addFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);
  mOptionsDialog.show();
}",0.9097222222222222
88225,"private void loadSettings(EditorInfo attribute){
  final SharedPreferences prefs=mPrefs;
  Vibrator vibrator=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
  mVibrateOn=vibrator != null && vibrator.hasVibrator() && prefs.getBoolean(Settings.PREF_VIBRATE_ON,false);
  mSoundOn=prefs.getBoolean(Settings.PREF_SOUND_ON,false);
  mPopupOn=isPopupEnabled(prefs);
  mAutoCap=prefs.getBoolean(Settings.PREF_AUTO_CAP,true);
  mQuickFixes=isQuickFixesEnabled(prefs);
  mAutoCorrectEnabled=isAutoCorrectEnabled(prefs);
  mBigramSuggestionEnabled=mAutoCorrectEnabled && isBigramSuggestionEnabled(prefs);
  loadAndSetAutoCorrectionThreshold(prefs);
  mVoiceConnector.loadSettings(attribute,prefs);
  updateCorrectionMode();
  updateAutoTextEnabled();
  updateSuggestionVisibility(prefs);
  SubtypeSwitcher.getInstance().loadSettings();
}","private void loadSettings(EditorInfo attribute){
  final SharedPreferences prefs=mPrefs;
  Vibrator vibrator=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
  mVibrateOn=vibrator != null && vibrator.hasVibrator() && prefs.getBoolean(Settings.PREF_VIBRATE_ON,false);
  mSoundOn=prefs.getBoolean(Settings.PREF_SOUND_ON,true);
  mPopupOn=isPopupEnabled(prefs);
  mAutoCap=prefs.getBoolean(Settings.PREF_AUTO_CAP,true);
  mQuickFixes=isQuickFixesEnabled(prefs);
  mAutoCorrectEnabled=isAutoCorrectEnabled(prefs);
  mBigramSuggestionEnabled=mAutoCorrectEnabled && isBigramSuggestionEnabled(prefs);
  loadAndSetAutoCorrectionThreshold(prefs);
  mVoiceConnector.loadSettings(attribute,prefs);
  updateCorrectionMode();
  updateAutoTextEnabled();
  updateSuggestionVisibility(prefs);
  SubtypeSwitcher.getInstance().loadSettings();
}",0.9957907396271798
88226,"private void loadSettings(EditorInfo attribute){
  final SharedPreferences prefs=mPrefs;
  Vibrator vibrator=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
  mVibrateOn=vibrator != null && vibrator.hasVibrator() && prefs.getBoolean(Settings.PREF_VIBRATE_ON,false);
  mSoundOn=prefs.getBoolean(Settings.PREF_SOUND_ON,false);
  mPopupOn=isPopupEnabled(prefs);
  mAutoCap=prefs.getBoolean(Settings.PREF_AUTO_CAP,true);
  mQuickFixes=isQuickFixesEnabled(prefs);
  mAutoCorrectEnabled=isAutoCorrectEnabled(prefs);
  mBigramSuggestionEnabled=mAutoCorrectEnabled && isBigramSuggestionEnabled(prefs);
  loadAndSetAutoCorrectionThreshold(prefs);
  mVoiceConnector.loadSettings(attribute,prefs);
  updateCorrectionMode();
  updateAutoTextEnabled();
  updateSuggestionVisibility(prefs);
  SubtypeSwitcher.getInstance().loadSettings();
}","private void loadSettings(EditorInfo attribute){
  final SharedPreferences prefs=mPrefs;
  Vibrator vibrator=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
  mVibrateOn=vibrator != null && vibrator.hasVibrator() && prefs.getBoolean(Settings.PREF_VIBRATE_ON,false);
  mSoundOn=prefs.getBoolean(Settings.PREF_SOUND_ON,true);
  mPopupOn=isPopupEnabled(prefs);
  mAutoCap=prefs.getBoolean(Settings.PREF_AUTO_CAP,true);
  mQuickFixes=isQuickFixesEnabled(prefs);
  mAutoCorrectEnabled=isAutoCorrectEnabled(prefs);
  mBigramSuggestionEnabled=mAutoCorrectEnabled && isBigramSuggestionEnabled(prefs);
  loadAndSetAutoCorrectionThreshold(prefs);
  mVoiceConnector.loadSettings(attribute,prefs);
  updateCorrectionMode();
  updateAutoTextEnabled();
  updateSuggestionVisibility(prefs);
  SubtypeSwitcher.getInstance().loadSettings();
}",0.9957907396271798
88227,"private void loadSettings(EditorInfo attribute){
  final SharedPreferences prefs=mPrefs;
  Vibrator vibrator=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
  mVibrateOn=vibrator != null && vibrator.hasVibrator() && prefs.getBoolean(Settings.PREF_VIBRATE_ON,false);
  mSoundOn=prefs.getBoolean(Settings.PREF_SOUND_ON,false);
  mPopupOn=isPopupEnabled(prefs);
  mAutoCap=prefs.getBoolean(Settings.PREF_AUTO_CAP,true);
  mQuickFixes=isQuickFixesEnabled(prefs);
  mAutoCorrectEnabled=isAutoCorrectEnabled(prefs);
  mBigramSuggestionEnabled=mAutoCorrectEnabled && isBigramSuggestionEnabled(prefs);
  loadAndSetAutoCorrectionThreshold(prefs);
  mVoiceConnector.loadSettings(attribute,prefs);
  updateCorrectionMode();
  updateAutoTextEnabled();
  updateSuggestionVisibility(prefs);
  SubtypeSwitcher.getInstance().loadSettings();
}","private void loadSettings(EditorInfo attribute){
  final SharedPreferences prefs=mPrefs;
  Vibrator vibrator=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
  mVibrateOn=vibrator != null && vibrator.hasVibrator() && prefs.getBoolean(Settings.PREF_VIBRATE_ON,false);
  mSoundOn=prefs.getBoolean(Settings.PREF_SOUND_ON,true);
  mPopupOn=isPopupEnabled(prefs);
  mAutoCap=prefs.getBoolean(Settings.PREF_AUTO_CAP,true);
  mQuickFixes=isQuickFixesEnabled(prefs);
  mAutoCorrectEnabled=isAutoCorrectEnabled(prefs);
  mBigramSuggestionEnabled=mAutoCorrectEnabled && isBigramSuggestionEnabled(prefs);
  loadAndSetAutoCorrectionThreshold(prefs);
  mVoiceConnector.loadSettings(attribute,prefs);
  updateCorrectionMode();
  updateAutoTextEnabled();
  updateSuggestionVisibility(prefs);
  SubtypeSwitcher.getInstance().loadSettings();
}",0.9957907396271798
88228,"public void onMoveEvent(int x,int y,long eventTime,PointerTrackerQueue queue){
  if (ENABLE_ASSERTION)   checkAssertion(queue);
  if (DEBUG_MOVE_EVENT)   printTouchEvent(""String_Node_Str"",x,y,eventTime);
  if (mKeyAlreadyProcessed)   return;
  final PointerTrackerKeyState keyState=mKeyState;
  final int keyIndex=keyState.onMoveKey(x,y);
  final Key oldKey=getKey(keyState.getKeyIndex());
  if (isValidKeyIndex(keyIndex)) {
    if (oldKey == null) {
      callListenerOnPress(getKey(keyIndex).mCode);
      keyState.onMoveToNewKey(keyIndex,x,y);
      startLongPressTimer(keyIndex);
    }
 else     if (!isMinorMoveBounce(x,y,keyIndex)) {
      mIsInSlidingKeyInput=true;
      callListenerOnRelease(oldKey.mCode);
      mHandler.cancelLongPressTimers();
      if (mIsAllowedSlidingKeyInput) {
        callListenerOnPress(getKey(keyIndex).mCode);
        keyState.onMoveToNewKey(keyIndex,x,y);
        startLongPressTimer(keyIndex);
      }
 else {
        setAlreadyProcessed();
        showKeyPreviewAndUpdateKeyGraphics(NOT_A_KEY);
        return;
      }
    }
  }
 else {
    if (oldKey != null && !isMinorMoveBounce(x,y,keyIndex)) {
      mIsInSlidingKeyInput=true;
      callListenerOnRelease(oldKey.mCode);
      mHandler.cancelLongPressTimers();
      if (mIsAllowedSlidingKeyInput) {
        keyState.onMoveToNewKey(keyIndex,x,y);
      }
 else {
        setAlreadyProcessed();
        showKeyPreviewAndUpdateKeyGraphics(NOT_A_KEY);
        return;
      }
    }
  }
  showKeyPreviewAndUpdateKeyGraphics(mKeyState.getKeyIndex());
}","public void onMoveEvent(int x,int y,long eventTime,PointerTrackerQueue queue){
  if (ENABLE_ASSERTION)   checkAssertion(queue);
  if (DEBUG_MOVE_EVENT)   printTouchEvent(""String_Node_Str"",x,y,eventTime);
  if (mKeyAlreadyProcessed)   return;
  final PointerTrackerKeyState keyState=mKeyState;
  int keyIndex=keyState.onMoveKey(x,y);
  final Key oldKey=getKey(keyState.getKeyIndex());
  if (isValidKeyIndex(keyIndex)) {
    if (oldKey == null) {
      if (callListenerOnPressAndCheckKeyboardLayoutChange(getKey(keyIndex).mCode))       keyIndex=keyState.onMoveKey(x,y);
      keyState.onMoveToNewKey(keyIndex,x,y);
      startLongPressTimer(keyIndex);
    }
 else     if (!isMinorMoveBounce(x,y,keyIndex)) {
      mIsInSlidingKeyInput=true;
      callListenerOnRelease(oldKey.mCode);
      mHandler.cancelLongPressTimers();
      if (mIsAllowedSlidingKeyInput) {
        if (callListenerOnPressAndCheckKeyboardLayoutChange(getKey(keyIndex).mCode))         keyIndex=keyState.onMoveKey(x,y);
        keyState.onMoveToNewKey(keyIndex,x,y);
        startLongPressTimer(keyIndex);
      }
 else {
        setAlreadyProcessed();
        showKeyPreviewAndUpdateKeyGraphics(NOT_A_KEY);
        return;
      }
    }
  }
 else {
    if (oldKey != null && !isMinorMoveBounce(x,y,keyIndex)) {
      mIsInSlidingKeyInput=true;
      callListenerOnRelease(oldKey.mCode);
      mHandler.cancelLongPressTimers();
      if (mIsAllowedSlidingKeyInput) {
        keyState.onMoveToNewKey(keyIndex,x,y);
      }
 else {
        setAlreadyProcessed();
        showKeyPreviewAndUpdateKeyGraphics(NOT_A_KEY);
        return;
      }
    }
  }
  showKeyPreviewAndUpdateKeyGraphics(mKeyState.getKeyIndex());
}",0.9516129032258064
88229,"private void onDownEventInternal(int x,int y,long eventTime){
  int keyIndex=mKeyState.onDownKey(x,y,eventTime);
  mIsAllowedSlidingKeyInput=mConfigSlidingKeyInputEnabled || isModifierInternal(keyIndex) || mKeyDetector instanceof MiniKeyboardKeyDetector;
  mKeyAlreadyProcessed=false;
  mIsRepeatableKey=false;
  mIsInSlidingKeyInput=false;
  if (isValidKeyIndex(keyIndex)) {
    callListenerOnPress(mKeys[keyIndex].mCode);
    keyIndex=mKeyState.getKeyIndex();
  }
  if (isValidKeyIndex(keyIndex)) {
    if (mKeys[keyIndex].mRepeatable) {
      repeatKey(keyIndex);
      mHandler.startKeyRepeatTimer(mDelayBeforeKeyRepeatStart,keyIndex,this);
      mIsRepeatableKey=true;
    }
    startLongPressTimer(keyIndex);
  }
  showKeyPreviewAndUpdateKeyGraphics(keyIndex);
}","private void onDownEventInternal(int x,int y,long eventTime){
  int keyIndex=mKeyState.onDownKey(x,y,eventTime);
  mIsAllowedSlidingKeyInput=mConfigSlidingKeyInputEnabled || isModifierInternal(keyIndex) || mKeyDetector instanceof MiniKeyboardKeyDetector;
  mKeyboardLayoutHasBeenChanged=false;
  mKeyAlreadyProcessed=false;
  mIsRepeatableKey=false;
  mIsInSlidingKeyInput=false;
  if (isValidKeyIndex(keyIndex)) {
    if (callListenerOnPressAndCheckKeyboardLayoutChange(mKeys[keyIndex].mCode))     keyIndex=mKeyState.onDownKey(x,y,eventTime);
  }
  if (isValidKeyIndex(keyIndex)) {
    if (mKeys[keyIndex].mRepeatable) {
      repeatKey(keyIndex);
      mHandler.startKeyRepeatTimer(mDelayBeforeKeyRepeatStart,keyIndex,this);
      mIsRepeatableKey=true;
    }
    startLongPressTimer(keyIndex);
  }
  showKeyPreviewAndUpdateKeyGraphics(keyIndex);
}",0.9320148331273176
88230,"public void setKeyboard(Keyboard keyboard,Key[] keys,float keyHysteresisDistance){
  if (keyboard == null || keys == null || keyHysteresisDistance < 0)   throw new IllegalArgumentException();
  mKeyboard=keyboard;
  mKeys=keys;
  mKeyHysteresisDistanceSquared=(int)(keyHysteresisDistance * keyHysteresisDistance);
  mKeyState.onSetKeyboard();
}","public void setKeyboard(Keyboard keyboard,Key[] keys,float keyHysteresisDistance){
  if (keyboard == null || keys == null || keyHysteresisDistance < 0)   throw new IllegalArgumentException();
  mKeyboard=keyboard;
  mKeys=keys;
  mKeyHysteresisDistanceSquared=(int)(keyHysteresisDistance * keyHysteresisDistance);
  mKeyboardLayoutHasBeenChanged=true;
}",0.926829268292683
88231,"private void checkReCorrectionOnStart(){
  if (mReCorrectionEnabled && isSuggestionShown() && isPredictionOn()) {
    InputConnection ic=getCurrentInputConnection();
    if (ic == null)     return;
    ExtractedTextRequest etr=new ExtractedTextRequest();
    etr.token=0;
    ExtractedText et=ic.getExtractedText(etr,0);
    if (et == null)     return;
    mLastSelectionStart=et.startOffset + et.selectionStart;
    mLastSelectionEnd=et.startOffset + et.selectionEnd;
    if (!TextUtils.isEmpty(et.text) && isCursorTouchingWord()) {
      mHandler.postUpdateOldSuggestions();
    }
  }
}","private void checkReCorrectionOnStart(){
  if (!mReCorrectionEnabled)   return;
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.finishComposingText();
  if (isSuggestionShown() && isPredictionOn()) {
    ExtractedTextRequest etr=new ExtractedTextRequest();
    etr.token=0;
    ExtractedText et=ic.getExtractedText(etr,0);
    if (et == null)     return;
    mLastSelectionStart=et.startOffset + et.selectionStart;
    mLastSelectionEnd=et.startOffset + et.selectionEnd;
    if (!TextUtils.isEmpty(et.text) && isCursorTouchingWord()) {
      mHandler.postUpdateOldSuggestions();
    }
  }
}",0.2608695652173913
88232,"private void checkReCorrectionOnStart(){
  if (mReCorrectionEnabled && isSuggestionShown() && isPredictionOn()) {
    InputConnection ic=getCurrentInputConnection();
    if (ic == null)     return;
    ExtractedTextRequest etr=new ExtractedTextRequest();
    etr.token=0;
    ExtractedText et=ic.getExtractedText(etr,0);
    if (et == null)     return;
    mLastSelectionStart=et.startOffset + et.selectionStart;
    mLastSelectionEnd=et.startOffset + et.selectionEnd;
    if (!TextUtils.isEmpty(et.text) && isCursorTouchingWord()) {
      mHandler.postUpdateOldSuggestions();
    }
  }
}","private void checkReCorrectionOnStart(){
  if (!mReCorrectionEnabled)   return;
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.finishComposingText();
  if (isSuggestionShown() && isPredictionOn()) {
    ExtractedTextRequest etr=new ExtractedTextRequest();
    etr.token=0;
    ExtractedText et=ic.getExtractedText(etr,0);
    if (et == null)     return;
    mLastSelectionStart=et.startOffset + et.selectionStart;
    mLastSelectionEnd=et.startOffset + et.selectionEnd;
    if (!TextUtils.isEmpty(et.text) && isCursorTouchingWord()) {
      mHandler.postUpdateOldSuggestions();
    }
  }
}",0.2608695652173913
88233,"@Override public void onStartInputView(EditorInfo attribute,boolean restarting){
  final KeyboardSwitcher switcher=mKeyboardSwitcher;
  LatinKeyboardView inputView=switcher.getInputView();
  if (inputView == null) {
    return;
  }
  SubtypeSwitcher.getInstance().updateParametersOnStartInputView();
  if (mRefreshKeyboardRequired) {
    mRefreshKeyboardRequired=false;
    onKeyboardLanguageChanged();
  }
  TextEntryState.newSession(this);
  int variation=attribute.inputType & EditorInfo.TYPE_MASK_VARIATION;
  mVoiceConnector.resetVoiceStates(isPasswordVariation(variation));
  mInputTypeNoAutoCorrect=false;
  mPredictionOn=false;
  mCompletionOn=false;
  mCompletions=null;
  mEnteredText=null;
  final int mode;
switch (attribute.inputType & EditorInfo.TYPE_MASK_CLASS) {
case EditorInfo.TYPE_CLASS_NUMBER:
case EditorInfo.TYPE_CLASS_DATETIME:
    mode=KeyboardSwitcher.MODE_NUMBER;
  break;
case EditorInfo.TYPE_CLASS_PHONE:
mode=KeyboardSwitcher.MODE_PHONE;
break;
case EditorInfo.TYPE_CLASS_TEXT:
mPredictionOn=true;
if (isPasswordVariation(variation)) {
mPredictionOn=false;
}
if (isEmailVariation(variation) || variation == EditorInfo.TYPE_TEXT_VARIATION_PERSON_NAME) {
mAutoSpace=false;
}
 else {
mAutoSpace=true;
}
if (isEmailVariation(variation)) {
mPredictionOn=false;
mode=KeyboardSwitcher.MODE_EMAIL;
}
 else if (variation == EditorInfo.TYPE_TEXT_VARIATION_URI) {
mPredictionOn=false;
mode=KeyboardSwitcher.MODE_URL;
}
 else if (variation == EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE) {
mode=KeyboardSwitcher.MODE_IM;
}
 else if (variation == EditorInfo.TYPE_TEXT_VARIATION_FILTER) {
mPredictionOn=false;
mode=KeyboardSwitcher.MODE_TEXT;
}
 else if (variation == EditorInfo.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT) {
mode=KeyboardSwitcher.MODE_WEB;
if ((attribute.inputType & EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT) == 0) {
mInputTypeNoAutoCorrect=true;
}
}
 else {
mode=KeyboardSwitcher.MODE_TEXT;
}
if ((attribute.inputType & EditorInfo.TYPE_TEXT_FLAG_NO_SUGGESTIONS) != 0) {
mPredictionOn=false;
mInputTypeNoAutoCorrect=true;
}
if ((attribute.inputType & EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT) == 0 && (attribute.inputType & EditorInfo.TYPE_TEXT_FLAG_MULTI_LINE) == 0) {
mInputTypeNoAutoCorrect=true;
}
if ((attribute.inputType & EditorInfo.TYPE_TEXT_FLAG_AUTO_COMPLETE) != 0) {
mPredictionOn=false;
mCompletionOn=isFullscreenMode();
}
break;
default :
mode=KeyboardSwitcher.MODE_TEXT;
break;
}
inputView.closing();
mComposing.setLength(0);
mPredicting=false;
mDeleteCount=0;
mJustAddedAutoSpace=false;
loadSettings(attribute);
switcher.loadKeyboard(mode,attribute.imeOptions,mVoiceConnector.isVoiceButtonEnabled(),mVoiceConnector.isVoiceButtonOnPrimary());
switcher.updateShiftState();
setCandidatesViewShownInternal(isCandidateStripVisible(),false);
updateSuggestions();
mHasDictionary=mSuggest.hasMainDictionary();
updateCorrectionMode();
inputView.setPreviewEnabled(mPopupOn);
inputView.setProximityCorrectionEnabled(true);
mPredictionOn=mPredictionOn && (mCorrectionMode > 0 || isSuggestionShown());
checkReCorrectionOnStart();
checkTutorial(attribute.privateImeOptions);
inputView.setForeground(true);
mVoiceConnector.onStartInputView();
if (TRACE) Debug.startMethodTracing(""String_Node_Str"");
}","@Override public void onStartInputView(EditorInfo attribute,boolean restarting){
  final KeyboardSwitcher switcher=mKeyboardSwitcher;
  LatinKeyboardView inputView=switcher.getInputView();
  if (inputView == null) {
    return;
  }
  SubtypeSwitcher.getInstance().updateParametersOnStartInputView();
  if (mRefreshKeyboardRequired) {
    mRefreshKeyboardRequired=false;
    onKeyboardLanguageChanged();
  }
  TextEntryState.newSession(this);
  int variation=attribute.inputType & EditorInfo.TYPE_MASK_VARIATION;
  mVoiceConnector.resetVoiceStates(isPasswordVariation(variation));
  mInputTypeNoAutoCorrect=false;
  mPredictionOn=false;
  mCompletionOn=false;
  mCompletions=null;
  mEnteredText=null;
  final int mode;
switch (attribute.inputType & EditorInfo.TYPE_MASK_CLASS) {
case EditorInfo.TYPE_CLASS_NUMBER:
case EditorInfo.TYPE_CLASS_DATETIME:
    mode=KeyboardSwitcher.MODE_NUMBER;
  break;
case EditorInfo.TYPE_CLASS_PHONE:
mode=KeyboardSwitcher.MODE_PHONE;
break;
case EditorInfo.TYPE_CLASS_TEXT:
mPredictionOn=true;
if (isPasswordVariation(variation)) {
mPredictionOn=false;
}
if (isEmailVariation(variation) || variation == EditorInfo.TYPE_TEXT_VARIATION_PERSON_NAME) {
mAutoSpace=false;
}
 else {
mAutoSpace=true;
}
if (isEmailVariation(variation)) {
mPredictionOn=false;
mode=KeyboardSwitcher.MODE_EMAIL;
}
 else if (variation == EditorInfo.TYPE_TEXT_VARIATION_URI) {
mPredictionOn=false;
mode=KeyboardSwitcher.MODE_URL;
}
 else if (variation == EditorInfo.TYPE_TEXT_VARIATION_SHORT_MESSAGE) {
mode=KeyboardSwitcher.MODE_IM;
}
 else if (variation == EditorInfo.TYPE_TEXT_VARIATION_FILTER) {
mPredictionOn=false;
mode=KeyboardSwitcher.MODE_TEXT;
}
 else if (variation == EditorInfo.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT) {
mode=KeyboardSwitcher.MODE_WEB;
if ((attribute.inputType & EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT) == 0) {
mInputTypeNoAutoCorrect=true;
}
}
 else {
mode=KeyboardSwitcher.MODE_TEXT;
}
if ((attribute.inputType & EditorInfo.TYPE_TEXT_FLAG_NO_SUGGESTIONS) != 0) {
mPredictionOn=false;
mInputTypeNoAutoCorrect=true;
}
if ((attribute.inputType & EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT) == 0 && (attribute.inputType & EditorInfo.TYPE_TEXT_FLAG_MULTI_LINE) == 0) {
mInputTypeNoAutoCorrect=true;
}
if ((attribute.inputType & EditorInfo.TYPE_TEXT_FLAG_AUTO_COMPLETE) != 0) {
mPredictionOn=false;
mCompletionOn=isFullscreenMode();
}
break;
default :
mode=KeyboardSwitcher.MODE_TEXT;
break;
}
inputView.closing();
mComposing.setLength(0);
mPredicting=false;
mDeleteCount=0;
mJustAddedAutoSpace=false;
loadSettings(attribute);
switcher.loadKeyboard(mode,attribute.imeOptions,mVoiceConnector.isVoiceButtonEnabled(),mVoiceConnector.isVoiceButtonOnPrimary());
switcher.updateShiftState();
setCandidatesViewShownInternal(isCandidateStripVisible(),false);
updateSuggestions();
mHasDictionary=mSuggest.hasMainDictionary();
updateCorrectionMode();
inputView.setPreviewEnabled(mPopupOn);
inputView.setProximityCorrectionEnabled(true);
mPredictionOn=mPredictionOn && (mCorrectionMode > 0 || isSuggestionShown());
checkReCorrectionOnStart();
checkTutorial(attribute.privateImeOptions);
inputView.setForeground(true);
mVoiceConnector.onStartInputView(mKeyboardSwitcher.getInputView().getWindowToken());
if (TRACE) Debug.startMethodTracing(""String_Node_Str"");
}",0.9924487594390508
88234,"public boolean setVoiceInput(VoiceInput vi){
  if (mVoiceInput == null) {
    mService.onKeyboardLanguageChanged();
    mVoiceInput=vi;
    if (isVoiceMode() && mVoiceInput != null) {
      if (DBG) {
        Log.d(TAG,""String_Node_Str"");
      }
      mService.onKey(LatinKeyboardView.KEYCODE_VOICE,null,0,0);
      return true;
    }
  }
  return false;
}","public boolean setVoiceInput(VoiceInput vi){
  if (mVoiceInput == null && vi != null) {
    mService.onKeyboardLanguageChanged();
    mVoiceInput=vi;
    if (isVoiceMode()) {
      if (DBG) {
        Log.d(TAG,""String_Node_Str"");
      }
      mService.onKey(LatinKeyboardView.KEYCODE_VOICE,null,0,0);
      return true;
    }
  }
  return false;
}",0.947517730496454
88235,"public void updateSubtype(InputMethodSubtype newSubtype){
  final String newLocale;
  final String newMode;
  if (newSubtype == null) {
    Log.e(TAG,""String_Node_Str"");
    newLocale=""String_Node_Str"";
    newMode=KEYBOARD_MODE;
  }
 else {
    newLocale=newSubtype.getLocale();
    newMode=newSubtype.getMode();
  }
  if (DBG) {
    Log.w(TAG,""String_Node_Str"" + newLocale + ""String_Node_Str""+ newMode+ ""String_Node_Str""+ mInputLocaleStr+ ""String_Node_Str""+ mMode);
  }
  boolean languageChanged=false;
  if (!newLocale.equals(mInputLocaleStr)) {
    if (mInputLocaleStr != null) {
      languageChanged=true;
    }
    updateInputLocale(newLocale);
  }
  boolean modeChanged=false;
  String oldMode=mMode;
  if (!newMode.equals(mMode)) {
    if (mMode != null) {
      modeChanged=true;
    }
    mMode=newMode;
  }
  if (isKeyboardMode()) {
    if (modeChanged) {
      if (VOICE_MODE.equals(oldMode) && mVoiceInput != null) {
        mVoiceInput.cancel();
      }
    }
    if (languageChanged) {
      mService.onKeyboardLanguageChanged();
    }
  }
 else   if (isVoiceMode()) {
    if (languageChanged || modeChanged) {
      if (mVoiceInput != null) {
        mService.onKey(LatinKeyboardView.KEYCODE_VOICE,null,0,0);
      }
    }
  }
 else {
    Log.w(TAG,""String_Node_Str"" + mMode);
  }
}","public void updateSubtype(InputMethodSubtype newSubtype){
  final String newLocale;
  final String newMode;
  if (newSubtype == null) {
    Log.e(TAG,""String_Node_Str"");
    newLocale=""String_Node_Str"";
    newMode=KEYBOARD_MODE;
  }
 else {
    newLocale=newSubtype.getLocale();
    newMode=newSubtype.getMode();
  }
  if (DBG) {
    Log.w(TAG,""String_Node_Str"" + newLocale + ""String_Node_Str""+ newMode+ ""String_Node_Str""+ mInputLocaleStr+ ""String_Node_Str""+ mMode);
  }
  boolean languageChanged=false;
  if (!newLocale.equals(mInputLocaleStr)) {
    if (mInputLocaleStr != null) {
      languageChanged=true;
    }
    updateInputLocale(newLocale);
  }
  boolean modeChanged=false;
  String oldMode=mMode;
  if (!newMode.equals(mMode)) {
    if (mMode != null) {
      modeChanged=true;
    }
    mMode=newMode;
  }
  if (isKeyboardMode()) {
    if (modeChanged) {
      if (VOICE_MODE.equals(oldMode) && mVoiceInput != null) {
        mVoiceInput.cancel();
      }
    }
    if (languageChanged) {
      mService.onKeyboardLanguageChanged();
    }
  }
 else   if (isVoiceMode()) {
    if (languageChanged || modeChanged || VoiceIMEConnector.getInstance().needsToShowWarningDialog()) {
      if (mVoiceInput != null) {
        mService.onKey(LatinKeyboardView.KEYCODE_VOICE,null,0,0);
      }
    }
  }
 else {
    Log.w(TAG,""String_Node_Str"" + mMode);
  }
}",0.9766917293233084
88236,"public void onClick(DialogInterface dialog,int whichButton){
  mVoiceInput.logKeyboardWarningDialogCancel();
}","@Override public void onClick(DialogInterface dialog,int whichButton){
  mVoiceInput.logKeyboardWarningDialogCancel();
  switchToLastInputMethod();
}",0.8494208494208494
88237,"public void startListening(final boolean swipe,IBinder token,final boolean configurationChanging){
  if (VOICE_INSTALLED) {
    if (!mHasUsedVoiceInput || (!mLocaleSupportedForVoiceInput && !mHasUsedVoiceInputUnsupportedLocale)) {
      showVoiceWarningDialog(swipe,token,configurationChanging);
    }
 else {
      reallyStartListening(swipe,configurationChanging);
    }
  }
}","public void startListening(final boolean swipe,IBinder token,final boolean configurationChanging){
  if (VOICE_INSTALLED) {
    if (needsToShowWarningDialog()) {
      showVoiceWarningDialog(swipe,token,configurationChanging);
    }
 else {
      reallyStartListening(swipe,configurationChanging);
    }
  }
}",0.8355167394468704
88238,"private void showVoiceWarningDialog(final boolean swipe,IBinder token,final boolean configurationChanging){
  AlertDialog.Builder builder=new AlertDialog.Builder(mContext);
  builder.setCancelable(true);
  builder.setIcon(R.drawable.ic_mic_dialog);
  builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      mVoiceInput.logKeyboardWarningDialogOk();
      reallyStartListening(swipe,configurationChanging);
    }
  }
);
  builder.setNegativeButton(android.R.string.cancel,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      mVoiceInput.logKeyboardWarningDialogCancel();
    }
  }
);
  if (mLocaleSupportedForVoiceInput) {
    String message=mContext.getString(R.string.voice_warning_may_not_understand) + ""String_Node_Str"" + mContext.getString(R.string.voice_warning_how_to_turn_off);
    builder.setMessage(message);
  }
 else {
    String message=mContext.getString(R.string.voice_warning_locale_not_supported) + ""String_Node_Str"" + mContext.getString(R.string.voice_warning_may_not_understand)+ ""String_Node_Str""+ mContext.getString(R.string.voice_warning_how_to_turn_off);
    builder.setMessage(message);
  }
  builder.setTitle(R.string.voice_warning_title);
  mVoiceWarningDialog=builder.create();
  Window window=mVoiceWarningDialog.getWindow();
  WindowManager.LayoutParams lp=window.getAttributes();
  lp.token=token;
  lp.type=WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;
  window.setAttributes(lp);
  window.addFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);
  mVoiceInput.logKeyboardWarningDialogShown();
  mVoiceWarningDialog.show();
}","private void showVoiceWarningDialog(final boolean swipe,IBinder token,final boolean configurationChanging){
  if (mVoiceWarningDialog != null && mVoiceWarningDialog.isShowing()) {
    return;
  }
  AlertDialog.Builder builder=new AlertDialog.Builder(mContext);
  builder.setCancelable(true);
  builder.setIcon(R.drawable.ic_mic_dialog);
  builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int whichButton){
      mVoiceInput.logKeyboardWarningDialogOk();
      reallyStartListening(swipe,configurationChanging);
    }
  }
);
  builder.setNegativeButton(android.R.string.cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int whichButton){
      mVoiceInput.logKeyboardWarningDialogCancel();
      switchToLastInputMethod();
    }
  }
);
  builder.setOnCancelListener(new DialogInterface.OnCancelListener(){
    @Override public void onCancel(    DialogInterface arg0){
      mVoiceInput.logKeyboardWarningDialogCancel();
      switchToLastInputMethod();
    }
  }
);
  if (mLocaleSupportedForVoiceInput) {
    String message=mContext.getString(R.string.voice_warning_may_not_understand) + ""String_Node_Str"" + mContext.getString(R.string.voice_warning_how_to_turn_off);
    builder.setMessage(message);
  }
 else {
    String message=mContext.getString(R.string.voice_warning_locale_not_supported) + ""String_Node_Str"" + mContext.getString(R.string.voice_warning_may_not_understand)+ ""String_Node_Str""+ mContext.getString(R.string.voice_warning_how_to_turn_off);
    builder.setMessage(message);
  }
  builder.setTitle(R.string.voice_warning_title);
  mVoiceWarningDialog=builder.create();
  Window window=mVoiceWarningDialog.getWindow();
  WindowManager.LayoutParams lp=window.getAttributes();
  lp.token=token;
  lp.type=WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;
  window.setAttributes(lp);
  window.addFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);
  mVoiceInput.logKeyboardWarningDialogShown();
  mVoiceWarningDialog.show();
}",0.9039606523427388
88239,"@Override public void onCancelVoice(){
  if (mRecognizing) {
    if (mSubtypeSwitcher.isVoiceMode()) {
      IBinder token=mContext.getWindow().getWindow().getAttributes().token;
      mImm.switchToLastInputMethod(token);
    }
 else     if (mSubtypeSwitcher.isKeyboardMode()) {
      mRecognizing=false;
      mContext.switchToKeyboardView();
    }
  }
}","@Override public void onCancelVoice(){
  if (mRecognizing) {
    if (mSubtypeSwitcher.isVoiceMode()) {
      switchToLastInputMethod();
    }
 else     if (mSubtypeSwitcher.isKeyboardMode()) {
      mRecognizing=false;
      mContext.switchToKeyboardView();
    }
  }
}",0.4038461538461538
88240,"public void onStartInputView(){
  mSubtypeSwitcher.setVoiceInput(mVoiceInput);
}","public void onStartInputView(IBinder token){
  if (mSubtypeSwitcher.isVoiceMode() && needsToShowWarningDialog() && token != null) {
    showVoiceWarningDialog(false,token,false);
  }
}",0.5303030303030303
88241,"private void reallyStartListening(boolean swipe,final boolean configurationChanging){
  if (!mHasUsedVoiceInput) {
    SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(mContext).edit();
    editor.putBoolean(PREF_HAS_USED_VOICE_INPUT,true);
    SharedPreferencesCompat.apply(editor);
    mHasUsedVoiceInput=true;
  }
  if (!mLocaleSupportedForVoiceInput && !mHasUsedVoiceInputUnsupportedLocale) {
    SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(mContext).edit();
    editor.putBoolean(PREF_HAS_USED_VOICE_INPUT_UNSUPPORTED_LOCALE,true);
    SharedPreferencesCompat.apply(editor);
    mHasUsedVoiceInputUnsupportedLocale=true;
  }
  mContext.clearSuggestions();
  FieldContext context=makeFieldContext();
  mVoiceInput.startListening(context,swipe);
  switchToRecognitionStatusView(configurationChanging);
}","private void reallyStartListening(boolean swipe,final boolean configurationChanging){
  if (!VOICE_INSTALLED) {
    return;
  }
  if (!mHasUsedVoiceInput) {
    SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(mContext).edit();
    editor.putBoolean(PREF_HAS_USED_VOICE_INPUT,true);
    SharedPreferencesCompat.apply(editor);
    mHasUsedVoiceInput=true;
  }
  if (!mLocaleSupportedForVoiceInput && !mHasUsedVoiceInputUnsupportedLocale) {
    SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(mContext).edit();
    editor.putBoolean(PREF_HAS_USED_VOICE_INPUT_UNSUPPORTED_LOCALE,true);
    SharedPreferencesCompat.apply(editor);
    mHasUsedVoiceInputUnsupportedLocale=true;
  }
  mContext.clearSuggestions();
  FieldContext context=makeFieldContext();
  mVoiceInput.startListening(context,swipe);
  switchToRecognitionStatusView(configurationChanging);
}",0.9764044943820224
88242,"public void onDownEvent(int x,int y,long eventTime){
  if (DEBUG)   debugLog(""String_Node_Str"",x,y);
  int keyIndex=mKeyState.onDownKey(x,y,eventTime);
  mKeyAlreadyProcessed=false;
  mIsRepeatableKey=false;
  checkMultiTap(eventTime,keyIndex);
  if (mListener != null) {
    int primaryCode=isValidKeyIndex(keyIndex) ? mKeys[keyIndex].codes[0] : 0;
    mListener.onPress(primaryCode);
    keyIndex=mKeyState.getKeyIndex();
  }
  if (isValidKeyIndex(keyIndex)) {
    if (mKeys[keyIndex].repeatable) {
      repeatKey(keyIndex);
      mHandler.startKeyRepeatTimer(mDelayBeforeKeyRepeatStart,keyIndex,this);
      mIsRepeatableKey=true;
    }
    mHandler.startLongPressTimer(mLongPressKeyTimeout,keyIndex,this);
  }
  showKeyPreviewAndUpdateKey(keyIndex);
}","public void onDownEvent(int x,int y,long eventTime){
  if (DEBUG)   debugLog(""String_Node_Str"",x,y);
  int keyIndex=mKeyState.onDownKey(x,y,eventTime);
  mKeyAlreadyProcessed=false;
  mIsRepeatableKey=false;
  checkMultiTap(eventTime,keyIndex);
  if (mListener != null) {
    if (isValidKeyIndex(keyIndex)) {
      mListener.onPress(mKeys[keyIndex].codes[0]);
      keyIndex=mKeyState.getKeyIndex();
    }
  }
  if (isValidKeyIndex(keyIndex)) {
    if (mKeys[keyIndex].repeatable) {
      repeatKey(keyIndex);
      mHandler.startKeyRepeatTimer(mDelayBeforeKeyRepeatStart,keyIndex,this);
      mIsRepeatableKey=true;
    }
    mHandler.startLongPressTimer(mLongPressKeyTimeout,keyIndex,this);
  }
  showKeyPreviewAndUpdateKey(keyIndex);
}",0.931726907630522
88243,"public void onDownEvent(int x,int y,long eventTime){
  if (DEBUG)   debugLog(""String_Node_Str"",x,y);
  int keyIndex=mKeyState.onDownKey(x,y,eventTime);
  mKeyAlreadyProcessed=false;
  mIsRepeatableKey=false;
  checkMultiTap(eventTime,keyIndex);
  if (mListener != null) {
    int primaryCode=isValidKeyIndex(keyIndex) ? mKeys[keyIndex].codes[0] : 0;
    mListener.onPress(primaryCode);
    keyIndex=mKeyState.getKeyIndex();
  }
  if (isValidKeyIndex(keyIndex)) {
    if (mKeys[keyIndex].repeatable) {
      repeatKey(keyIndex);
      mHandler.startKeyRepeatTimer(mDelayBeforeKeyRepeatStart,keyIndex,this);
      mIsRepeatableKey=true;
    }
    startLongPressTimer(keyIndex);
  }
  showKeyPreviewAndUpdateKeyGraphics(keyIndex);
}","public void onDownEvent(int x,int y,long eventTime){
  if (DEBUG)   debugLog(""String_Node_Str"",x,y);
  int keyIndex=mKeyState.onDownKey(x,y,eventTime);
  mKeyAlreadyProcessed=false;
  mIsRepeatableKey=false;
  checkMultiTap(eventTime,keyIndex);
  if (mListener != null) {
    if (isValidKeyIndex(keyIndex)) {
      mListener.onPress(mKeys[keyIndex].codes[0]);
      keyIndex=mKeyState.getKeyIndex();
    }
  }
  if (isValidKeyIndex(keyIndex)) {
    if (mKeys[keyIndex].repeatable) {
      repeatKey(keyIndex);
      mHandler.startKeyRepeatTimer(mDelayBeforeKeyRepeatStart,keyIndex,this);
      mIsRepeatableKey=true;
    }
    startLongPressTimer(keyIndex);
  }
  showKeyPreviewAndUpdateKeyGraphics(keyIndex);
}",0.9291666666666668
88244,"public void onDownEvent(int x,int y,long eventTime){
  if (DEBUG)   debugLog(""String_Node_Str"",x,y);
  int keyIndex=mKeyState.onDownKey(x,y,eventTime);
  mKeyAlreadyProcessed=false;
  mIsRepeatableKey=false;
  checkMultiTap(eventTime,keyIndex);
  if (mListener != null) {
    int primaryCode=isValidKeyIndex(keyIndex) ? mKeys[keyIndex].codes[0] : 0;
    mListener.onPress(primaryCode);
    keyIndex=mKeyState.getKeyIndex();
  }
  if (isValidKeyIndex(keyIndex)) {
    if (mKeys[keyIndex].repeatable) {
      repeatKey(keyIndex);
      mHandler.startKeyRepeatTimer(mDelayBeforeKeyRepeatStart,keyIndex,this);
      mIsRepeatableKey=true;
    }
    mHandler.startLongPressTimer(mLongPressKeyTimeout,keyIndex,this);
  }
  showKeyPreviewAndUpdateKey(keyIndex);
}","public void onDownEvent(int x,int y,long eventTime){
  if (DEBUG)   debugLog(""String_Node_Str"",x,y);
  int keyIndex=mKeyState.onDownKey(x,y,eventTime);
  mKeyAlreadyProcessed=false;
  mIsRepeatableKey=false;
  checkMultiTap(eventTime,keyIndex);
  if (mListener != null) {
    if (isValidKeyIndex(keyIndex)) {
      mListener.onPress(mKeys[keyIndex].codes[0]);
      keyIndex=mKeyState.getKeyIndex();
    }
  }
  if (isValidKeyIndex(keyIndex)) {
    if (mKeys[keyIndex].repeatable) {
      repeatKey(keyIndex);
      mHandler.startKeyRepeatTimer(mDelayBeforeKeyRepeatStart,keyIndex,this);
      mIsRepeatableKey=true;
    }
    mHandler.startLongPressTimer(mLongPressKeyTimeout,keyIndex,this);
  }
  showKeyPreviewAndUpdateKey(keyIndex);
}",0.931726907630522
88245,"private boolean openPopupIfRequired(int keyIndex,PointerTracker tracker){
  if (mPopupLayout == 0) {
    return false;
  }
  Key popupKey=tracker.getKey(keyIndex);
  if (popupKey == null)   return false;
  boolean result=onLongPress(popupKey);
  if (result) {
    dismissKeyPreview();
    tracker.setAlreadyProcessed();
    mMiniKeyboardTrackerId=tracker.mPointerId;
  }
  return result;
}","private boolean openPopupIfRequired(int keyIndex,PointerTracker tracker){
  if (mPopupLayout == 0) {
    return false;
  }
  Key popupKey=tracker.getKey(keyIndex);
  if (popupKey == null)   return false;
  boolean result=onLongPress(popupKey);
  if (result) {
    dismissKeyPreview();
    mMiniKeyboardTrackerId=tracker.mPointerId;
    tracker.setAlreadyProcessed();
    mPointerQueue.remove(tracker);
  }
  return result;
}",0.8610086100861009
88246,"private boolean openPopupIfRequired(int keyIndex,PointerTracker tracker){
  if (mPopupLayout == 0) {
    return false;
  }
  Key popupKey=tracker.getKey(keyIndex);
  if (popupKey == null)   return false;
  boolean result=onLongPress(popupKey);
  if (result) {
    dismissKeyPreview();
    tracker.setAlreadyProcessed();
    mMiniKeyboardTrackerId=tracker.mPointerId;
  }
  return result;
}","private boolean openPopupIfRequired(int keyIndex,PointerTracker tracker){
  if (mPopupLayout == 0) {
    return false;
  }
  Key popupKey=tracker.getKey(keyIndex);
  if (popupKey == null)   return false;
  boolean result=onLongPress(popupKey);
  if (result) {
    dismissKeyPreview();
    mMiniKeyboardTrackerId=tracker.mPointerId;
    tracker.setAlreadyProcessed();
    mPointerQueue.remove(tracker);
  }
  return result;
}",0.8610086100861009
88247,"private boolean openPopupIfRequired(int keyIndex,PointerTracker tracker){
  if (mPopupLayout == 0) {
    return false;
  }
  Key popupKey=tracker.getKey(keyIndex);
  if (popupKey == null)   return false;
  boolean result=onLongPress(popupKey);
  if (result) {
    dismissKeyPreview();
    tracker.setAlreadyProcessed();
    mMiniKeyboardTrackerId=tracker.mPointerId;
  }
  return result;
}","private boolean openPopupIfRequired(int keyIndex,PointerTracker tracker){
  if (mPopupLayout == 0) {
    return false;
  }
  Key popupKey=tracker.getKey(keyIndex);
  if (popupKey == null)   return false;
  boolean result=onLongPress(popupKey);
  if (result) {
    dismissKeyPreview();
    mMiniKeyboardTrackerId=tracker.mPointerId;
    tracker.setAlreadyProcessed();
    mPointerQueue.remove(tracker);
  }
  return result;
}",0.8610086100861009
88248,"void setKeyboardMode(int mode,int imeOptions,boolean enableVoice,boolean isSymbols){
  if (mInputView == null)   return;
  mMode=mode;
  mImeOptions=imeOptions;
  if (enableVoice != mHasVoice) {
    setVoiceMode(mHasVoice,mVoiceOnPrimary);
  }
  mIsSymbols=isSymbols;
  mInputView.setPreviewEnabled(mInputMethodService.getPopupOn());
  KeyboardId id=getKeyboardId(mode,imeOptions,isSymbols);
  LatinKeyboard keyboard=null;
  keyboard=getKeyboard(id);
  if (mode == MODE_PHONE) {
    mInputView.setPhoneKeyboard(keyboard);
    mInputView.setPreviewEnabled(false);
  }
  mCurrentId=id;
  mInputView.setKeyboard(keyboard);
  keyboard.setShifted(false);
  keyboard.setShiftLocked(keyboard.isShiftLocked());
  keyboard.setImeOptions(mInputMethodService.getResources(),mMode,imeOptions);
  keyboard.setColorOfSymbolIcons(mIsAutoCompletionActive,isBlackSym());
  updateSettingsKeyState(PreferenceManager.getDefaultSharedPreferences(mInputMethodService));
}","private void setKeyboardMode(int mode,int imeOptions,boolean enableVoice,boolean isSymbols){
  if (mInputView == null)   return;
  mMode=mode;
  mImeOptions=imeOptions;
  if (enableVoice != mHasVoice) {
    setVoiceMode(mHasVoice,mVoiceOnPrimary);
  }
  mIsSymbols=isSymbols;
  mInputView.setPreviewEnabled(mInputMethodService.getPopupOn());
  KeyboardId id=getKeyboardId(mode,imeOptions,isSymbols);
  LatinKeyboard keyboard=null;
  keyboard=getKeyboard(id);
  if (mode == MODE_PHONE) {
    mInputView.setPhoneKeyboard(keyboard);
  }
  mCurrentId=id;
  mInputView.setKeyboard(keyboard);
  keyboard.setShifted(false);
  keyboard.setShiftLocked(keyboard.isShiftLocked());
  keyboard.setImeOptions(mInputMethodService.getResources(),mMode,imeOptions);
  keyboard.setColorOfSymbolIcons(mIsAutoCompletionActive,isBlackSym());
  updateSettingsKeyState(PreferenceManager.getDefaultSharedPreferences(mInputMethodService));
}",0.5855227882037534
88249,"int getKeyboardMode(){
  return mMode;
}","public int getKeyboardMode(){
  return mMode;
}",0.9195402298850576
88250,"void setShifted(boolean shifted){
  if (mInputView != null) {
    mInputView.setShifted(shifted);
  }
}","public void setShifted(boolean shifted){
  if (mInputView != null) {
    mInputView.setShifted(shifted);
  }
}",0.9671361502347418
88251,"void setShiftLocked(boolean shiftLocked){
  if (mInputView != null) {
    mInputView.setShiftLocked(shiftLocked);
  }
}","public void setShiftLocked(boolean shiftLocked){
  if (mInputView != null) {
    mInputView.setShiftLocked(shiftLocked);
  }
}",0.9714285714285714
88252,"/** 
 * Updates state machine to figure out when to automatically switch back to alpha mode. Returns true if the keyboard needs to switch back 
 */
boolean onKey(int key){
switch (mSymbolsModeState) {
case SYMBOLS_MODE_STATE_BEGIN:
    if (key != LatinIME.KEYCODE_SPACE && key != LatinIME.KEYCODE_ENTER && key > 0) {
      mSymbolsModeState=SYMBOLS_MODE_STATE_SYMBOL;
    }
  break;
case SYMBOLS_MODE_STATE_SYMBOL:
if (key == LatinIME.KEYCODE_ENTER || key == LatinIME.KEYCODE_SPACE) return true;
break;
}
return false;
}","/** 
 * Updates state machine to figure out when to automatically switch back to alpha mode. Returns true if the keyboard needs to switch back 
 */
public boolean onKey(int key){
switch (mSymbolsModeState) {
case SYMBOLS_MODE_STATE_BEGIN:
    if (key != LatinIME.KEYCODE_SPACE && key != LatinIME.KEYCODE_ENTER && key > 0) {
      mSymbolsModeState=SYMBOLS_MODE_STATE_SYMBOL;
    }
  break;
case SYMBOLS_MODE_STATE_SYMBOL:
if (key == LatinIME.KEYCODE_ENTER || key == LatinIME.KEYCODE_SPACE) return true;
break;
}
return false;
}",0.9933142311365808
88253,"void toggleShift(){
  if (mCurrentId.equals(mSymbolsId)) {
    LatinKeyboard symbolsShiftedKeyboard=getKeyboard(mSymbolsShiftedId);
    mCurrentId=mSymbolsShiftedId;
    mInputView.setKeyboard(symbolsShiftedKeyboard);
    symbolsShiftedKeyboard.enableShiftLock();
    symbolsShiftedKeyboard.setShiftLocked(true);
    symbolsShiftedKeyboard.setImeOptions(mInputMethodService.getResources(),mMode,mImeOptions);
  }
 else   if (mCurrentId.equals(mSymbolsShiftedId)) {
    LatinKeyboard symbolsKeyboard=getKeyboard(mSymbolsId);
    mCurrentId=mSymbolsId;
    mInputView.setKeyboard(symbolsKeyboard);
    symbolsKeyboard.enableShiftLock();
    symbolsKeyboard.setShifted(false);
    symbolsKeyboard.setImeOptions(mInputMethodService.getResources(),mMode,mImeOptions);
  }
}","public void toggleShift(){
  if (mCurrentId.equals(mSymbolsId)) {
    LatinKeyboard symbolsShiftedKeyboard=getKeyboard(mSymbolsShiftedId);
    mCurrentId=mSymbolsShiftedId;
    mInputView.setKeyboard(symbolsShiftedKeyboard);
    symbolsShiftedKeyboard.enableShiftLock();
    symbolsShiftedKeyboard.setShiftLocked(true);
    symbolsShiftedKeyboard.setImeOptions(mInputMethodService.getResources(),mMode,mImeOptions);
  }
 else   if (mCurrentId.equals(mSymbolsShiftedId)) {
    LatinKeyboard symbolsKeyboard=getKeyboard(mSymbolsId);
    mCurrentId=mSymbolsId;
    mInputView.setKeyboard(symbolsKeyboard);
    symbolsKeyboard.enableShiftLock();
    symbolsKeyboard.setShifted(false);
    symbolsKeyboard.setImeOptions(mInputMethodService.getResources(),mMode,mImeOptions);
  }
}",0.9954633830200909
88254,"void toggleSymbols(){
  setKeyboardMode(mMode,mImeOptions,mHasVoice,!mIsSymbols);
  if (mIsSymbols && !mPreferSymbols) {
    mSymbolsModeState=SYMBOLS_MODE_STATE_BEGIN;
  }
 else {
    mSymbolsModeState=SYMBOLS_MODE_STATE_NONE;
  }
}","public void toggleSymbols(){
  setKeyboardMode(mMode,mImeOptions,mHasVoice,!mIsSymbols);
  if (mIsSymbols && !mPreferSymbols) {
    mSymbolsModeState=SYMBOLS_MODE_STATE_BEGIN;
  }
 else {
    mSymbolsModeState=SYMBOLS_MODE_STATE_NONE;
  }
}",0.985200845665962
88255,"KeyboardSwitcher(LatinIME ims){
  mInputMethodService=ims;
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(ims);
  mLayoutId=Integer.valueOf(prefs.getString(PREF_KEYBOARD_LAYOUT,DEFAULT_LAYOUT_ID));
  updateSettingsKeyState(prefs);
  prefs.registerOnSharedPreferenceChangeListener(this);
  mKeyboards=new HashMap<KeyboardId,SoftReference<LatinKeyboard>>();
  mSymbolsId=makeSymbolsId(false);
  mSymbolsShiftedId=makeSymbolsShiftedId(false);
}","public KeyboardSwitcher(LatinIME ims){
  mInputMethodService=ims;
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(ims);
  mLayoutId=Integer.valueOf(prefs.getString(PREF_KEYBOARD_LAYOUT,DEFAULT_LAYOUT_ID));
  updateSettingsKeyState(prefs);
  prefs.registerOnSharedPreferenceChangeListener(this);
  mKeyboards=new HashMap<KeyboardId,SoftReference<LatinKeyboard>>();
  mSymbolsId=makeSymbolsId(false);
  mSymbolsShiftedId=makeSymbolsShiftedId(false);
}",0.9926393270241852
88256,"boolean isAlphabetMode(){
  if (mCurrentId == null) {
    return false;
  }
  int currentMode=mCurrentId.mKeyboardMode;
  for (  Integer mode : ALPHABET_MODES) {
    if (currentMode == mode) {
      return true;
    }
  }
  return false;
}","public boolean isAlphabetMode(){
  if (mCurrentId == null) {
    return false;
  }
  int currentMode=mCurrentId.mKeyboardMode;
  for (  Integer mode : ALPHABET_MODES) {
    if (currentMode == mode) {
      return true;
    }
  }
  return false;
}",0.9855670103092784
88257,"boolean hasVoiceButton(boolean isSymbols){
  return mHasVoice && (isSymbols != mVoiceOnPrimary);
}","private boolean hasVoiceButton(boolean isSymbols){
  return mHasVoice && (isSymbols != mVoiceOnPrimary);
}",0.9607843137254902
88258,"void setVoiceMode(boolean enableVoice,boolean voiceOnPrimary){
  if (enableVoice != mHasVoice || voiceOnPrimary != mVoiceOnPrimary) {
    mKeyboards.clear();
  }
  mHasVoice=enableVoice;
  mVoiceOnPrimary=voiceOnPrimary;
  setKeyboardMode(mMode,mImeOptions,mHasVoice,mIsSymbols);
}","public void setVoiceMode(boolean enableVoice,boolean voiceOnPrimary){
  if (enableVoice != mHasVoice || voiceOnPrimary != mVoiceOnPrimary) {
    mKeyboards.clear();
  }
  mHasVoice=enableVoice;
  mVoiceOnPrimary=voiceOnPrimary;
  setKeyboardMode(mMode,mImeOptions,mHasVoice,mIsSymbols);
}",0.9876977152899824
88259,"/** 
 * Sets the input locale, when there are multiple locales for input. If no locale switching is required, then the locale should be set to null.
 * @param locale the current input locale, or null for default locale with no locale button.
 */
void setLanguageSwitcher(LanguageSwitcher languageSwitcher){
  mLanguageSwitcher=languageSwitcher;
  mInputLocale=mLanguageSwitcher.getInputLocale();
}","/** 
 * Sets the input locale, when there are multiple locales for input. If no locale switching is required, then the locale should be set to null.
 * @param locale the current input locale, or null for default locale with no locale button.
 */
public void setLanguageSwitcher(LanguageSwitcher languageSwitcher){
  mLanguageSwitcher=languageSwitcher;
  mInputLocale=mLanguageSwitcher.getInputLocale();
}",0.9912609238451936
88260,"void makeKeyboards(boolean forceCreate){
  mSymbolsId=makeSymbolsId(mHasVoice && !mVoiceOnPrimary);
  mSymbolsShiftedId=makeSymbolsShiftedId(mHasVoice && !mVoiceOnPrimary);
  if (forceCreate)   mKeyboards.clear();
  int displayWidth=mInputMethodService.getMaxWidth();
  if (displayWidth == mLastDisplayWidth)   return;
  mLastDisplayWidth=displayWidth;
  if (!forceCreate)   mKeyboards.clear();
}","public void makeKeyboards(boolean forceCreate){
  mSymbolsId=makeSymbolsId(mHasVoice && !mVoiceOnPrimary);
  mSymbolsShiftedId=makeSymbolsShiftedId(mHasVoice && !mVoiceOnPrimary);
  if (forceCreate)   mKeyboards.clear();
  int displayWidth=mInputMethodService.getMaxWidth();
  if (displayWidth == mLastDisplayWidth)   return;
  mLastDisplayWidth=displayWidth;
  if (!forceCreate)   mKeyboards.clear();
}",0.9912390488110138
88261,"public LatinKeyboard(Context context,int xmlLayoutResId,int mode){
  super(context,xmlLayoutResId,mode);
  final Resources res=context.getResources();
  mContext=context;
  mRes=res;
  mShiftLockIcon=res.getDrawable(R.drawable.sym_keyboard_shift_locked);
  mShiftLockPreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_shift_locked);
  mShiftLockPreviewIcon.setBounds(0,0,mShiftLockPreviewIcon.getIntrinsicWidth(),mShiftLockPreviewIcon.getIntrinsicHeight());
  mSpaceIcon=res.getDrawable(R.drawable.sym_keyboard_space);
  mSpaceAutoCompletionIndicator=res.getDrawable(R.drawable.sym_keyboard_space_led);
  mSpacePreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_space);
  mMicIcon=res.getDrawable(R.drawable.sym_keyboard_mic);
  mMicPreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_mic);
  setDefaultBounds(mMicPreviewIcon);
  mButtonArrowLeftIcon=res.getDrawable(R.drawable.sym_keyboard_language_arrows_left);
  mButtonArrowRightIcon=res.getDrawable(R.drawable.sym_keyboard_language_arrows_right);
  m123MicIcon=res.getDrawable(R.drawable.sym_keyboard_123_mic);
  m123MicPreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_123_mic);
  setDefaultBounds(m123MicPreviewIcon);
  sSpacebarVerticalCorrection=res.getDimensionPixelOffset(R.dimen.spacebar_vertical_correction);
  mIsAlphaKeyboard=xmlLayoutResId == R.xml.kbd_qwerty || xmlLayoutResId == R.xml.kbd_qwerty_black;
  mSpaceKeyIndex=indexOf(' ');
  initializeNumberHintResources(context);
}","public LatinKeyboard(Context context,int xmlLayoutResId,int mode){
  super(context,xmlLayoutResId,mode);
  final Resources res=context.getResources();
  mContext=context;
  mRes=res;
  mShiftLockIcon=res.getDrawable(R.drawable.sym_keyboard_shift_locked);
  mShiftLockPreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_shift_locked);
  mShiftLockPreviewIcon.setBounds(0,0,mShiftLockPreviewIcon.getIntrinsicWidth(),mShiftLockPreviewIcon.getIntrinsicHeight());
  mSpaceIcon=res.getDrawable(R.drawable.sym_keyboard_space);
  mSpaceAutoCompletionIndicator=res.getDrawable(R.drawable.sym_keyboard_space_led);
  mSpacePreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_space);
  mMicIcon=res.getDrawable(R.drawable.sym_keyboard_mic);
  mMicPreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_mic);
  setDefaultBounds(mMicPreviewIcon);
  mButtonArrowLeftIcon=res.getDrawable(R.drawable.sym_keyboard_language_arrows_left);
  mButtonArrowRightIcon=res.getDrawable(R.drawable.sym_keyboard_language_arrows_right);
  m123MicIcon=res.getDrawable(R.drawable.sym_keyboard_123_mic);
  m123MicPreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_123_mic);
  setDefaultBounds(m123MicPreviewIcon);
  sSpacebarVerticalCorrection=res.getDimensionPixelOffset(R.dimen.spacebar_vertical_correction);
  mIsAlphaKeyboard=xmlLayoutResId == R.xml.kbd_qwerty || xmlLayoutResId == R.xml.kbd_qwerty_black;
  mSpaceKeyIndex=indexOf(LatinIME.KEYCODE_SPACE);
  initializeNumberHintResources(context);
}",0.9916359986617598
88262,"public void showPreview(int keyIndex,PointerTracker tracker){
  int oldKeyIndex=mOldPreviewKeyIndex;
  mOldPreviewKeyIndex=keyIndex;
  if (oldKeyIndex != keyIndex && mShowPreview) {
    if (keyIndex == NOT_A_KEY) {
      mHandler.cancelPopupPreview();
      mHandler.dismissPreview(DELAY_AFTER_PREVIEW);
    }
 else     if (tracker != null) {
      mHandler.popupPreview(DELAY_BEFORE_PREVIEW,keyIndex,tracker);
    }
  }
}","public void showPreview(int keyIndex,PointerTracker tracker){
  int oldKeyIndex=mOldPreviewKeyIndex;
  mOldPreviewKeyIndex=keyIndex;
  final boolean isLanguageSwitchEnabled=(mKeyboard instanceof LatinKeyboard) && ((LatinKeyboard)mKeyboard).isLanguageSwitchEnabled();
  final boolean hidePreviewOrShowSpaceKeyPreview=(tracker == null) || tracker.isSpaceKey(keyIndex) || tracker.isSpaceKey(oldKeyIndex);
  if (oldKeyIndex != keyIndex && (mShowPreview || (hidePreviewOrShowSpaceKeyPreview && isLanguageSwitchEnabled))) {
    if (keyIndex == NOT_A_KEY) {
      mHandler.cancelPopupPreview();
      mHandler.dismissPreview(DELAY_AFTER_PREVIEW);
    }
 else     if (tracker != null) {
      mHandler.popupPreview(DELAY_BEFORE_PREVIEW,keyIndex,tracker);
    }
  }
}",0.6508474576271186
88263,"void setKeyboardMode(int mode,int imeOptions,boolean enableVoice,boolean isSymbols){
  if (mInputView == null)   return;
  mMode=mode;
  mImeOptions=imeOptions;
  if (enableVoice != mHasVoice) {
    setVoiceMode(mHasVoice,mVoiceOnPrimary);
  }
  mIsSymbols=isSymbols;
  mInputView.setPreviewEnabled(mInputMethodService.getPopupOn());
  KeyboardId id=getKeyboardId(mode,imeOptions,isSymbols);
  LatinKeyboard keyboard=null;
  keyboard=getKeyboard(id);
  if (mode == MODE_PHONE) {
    mInputView.setPhoneKeyboard(keyboard);
    mInputView.setPreviewEnabled(false);
  }
  mCurrentId=id;
  mInputView.setKeyboard(keyboard);
  keyboard.setShifted(false);
  keyboard.setShiftLocked(keyboard.isShiftLocked());
  keyboard.setImeOptions(mInputMethodService.getResources(),mMode,imeOptions);
  keyboard.setColorOfSymbolIcons(mIsAutoCompletionActive,isBlackSym());
  updateSettingsKeyState(PreferenceManager.getDefaultSharedPreferences(mInputMethodService));
}","private void setKeyboardMode(int mode,int imeOptions,boolean enableVoice,boolean isSymbols){
  if (mInputView == null)   return;
  mMode=mode;
  mImeOptions=imeOptions;
  if (enableVoice != mHasVoice) {
    setVoiceMode(mHasVoice,mVoiceOnPrimary);
  }
  mIsSymbols=isSymbols;
  mInputView.setPreviewEnabled(mInputMethodService.getPopupOn());
  KeyboardId id=getKeyboardId(mode,imeOptions,isSymbols);
  LatinKeyboard keyboard=null;
  keyboard=getKeyboard(id);
  if (mode == MODE_PHONE) {
    mInputView.setPhoneKeyboard(keyboard);
  }
  mCurrentId=id;
  mInputView.setKeyboard(keyboard);
  keyboard.setShifted(false);
  keyboard.setShiftLocked(keyboard.isShiftLocked());
  keyboard.setImeOptions(mInputMethodService.getResources(),mMode,imeOptions);
  keyboard.setColorOfSymbolIcons(mIsAutoCompletionActive,isBlackSym());
  updateSettingsKeyState(PreferenceManager.getDefaultSharedPreferences(mInputMethodService));
}",0.5855227882037534
88264,"int getKeyboardMode(){
  return mMode;
}","public int getKeyboardMode(){
  return mMode;
}",0.9195402298850576
88265,"void setShifted(boolean shifted){
  if (mInputView != null) {
    mInputView.setShifted(shifted);
  }
}","public void setShifted(boolean shifted){
  if (mInputView != null) {
    mInputView.setShifted(shifted);
  }
}",0.9671361502347418
88266,"void setShiftLocked(boolean shiftLocked){
  if (mInputView != null) {
    mInputView.setShiftLocked(shiftLocked);
  }
}","public void setShiftLocked(boolean shiftLocked){
  if (mInputView != null) {
    mInputView.setShiftLocked(shiftLocked);
  }
}",0.9714285714285714
88267,"/** 
 * Updates state machine to figure out when to automatically switch back to alpha mode. Returns true if the keyboard needs to switch back 
 */
boolean onKey(int key){
switch (mSymbolsModeState) {
case SYMBOLS_MODE_STATE_BEGIN:
    if (key != LatinIME.KEYCODE_SPACE && key != LatinIME.KEYCODE_ENTER && key > 0) {
      mSymbolsModeState=SYMBOLS_MODE_STATE_SYMBOL;
    }
  break;
case SYMBOLS_MODE_STATE_SYMBOL:
if (key == LatinIME.KEYCODE_ENTER || key == LatinIME.KEYCODE_SPACE) return true;
break;
}
return false;
}","/** 
 * Updates state machine to figure out when to automatically switch back to alpha mode. Returns true if the keyboard needs to switch back 
 */
public boolean onKey(int key){
switch (mSymbolsModeState) {
case SYMBOLS_MODE_STATE_BEGIN:
    if (key != LatinIME.KEYCODE_SPACE && key != LatinIME.KEYCODE_ENTER && key > 0) {
      mSymbolsModeState=SYMBOLS_MODE_STATE_SYMBOL;
    }
  break;
case SYMBOLS_MODE_STATE_SYMBOL:
if (key == LatinIME.KEYCODE_ENTER || key == LatinIME.KEYCODE_SPACE) return true;
break;
}
return false;
}",0.9933142311365808
88268,"void toggleShift(){
  if (mCurrentId.equals(mSymbolsId)) {
    LatinKeyboard symbolsShiftedKeyboard=getKeyboard(mSymbolsShiftedId);
    mCurrentId=mSymbolsShiftedId;
    mInputView.setKeyboard(symbolsShiftedKeyboard);
    symbolsShiftedKeyboard.enableShiftLock();
    symbolsShiftedKeyboard.setShiftLocked(true);
    symbolsShiftedKeyboard.setImeOptions(mInputMethodService.getResources(),mMode,mImeOptions);
  }
 else   if (mCurrentId.equals(mSymbolsShiftedId)) {
    LatinKeyboard symbolsKeyboard=getKeyboard(mSymbolsId);
    mCurrentId=mSymbolsId;
    mInputView.setKeyboard(symbolsKeyboard);
    symbolsKeyboard.enableShiftLock();
    symbolsKeyboard.setShifted(false);
    symbolsKeyboard.setImeOptions(mInputMethodService.getResources(),mMode,mImeOptions);
  }
}","public void toggleShift(){
  if (mCurrentId.equals(mSymbolsId)) {
    LatinKeyboard symbolsShiftedKeyboard=getKeyboard(mSymbolsShiftedId);
    mCurrentId=mSymbolsShiftedId;
    mInputView.setKeyboard(symbolsShiftedKeyboard);
    symbolsShiftedKeyboard.enableShiftLock();
    symbolsShiftedKeyboard.setShiftLocked(true);
    symbolsShiftedKeyboard.setImeOptions(mInputMethodService.getResources(),mMode,mImeOptions);
  }
 else   if (mCurrentId.equals(mSymbolsShiftedId)) {
    LatinKeyboard symbolsKeyboard=getKeyboard(mSymbolsId);
    mCurrentId=mSymbolsId;
    mInputView.setKeyboard(symbolsKeyboard);
    symbolsKeyboard.enableShiftLock();
    symbolsKeyboard.setShifted(false);
    symbolsKeyboard.setImeOptions(mInputMethodService.getResources(),mMode,mImeOptions);
  }
}",0.9954633830200909
88269,"void toggleSymbols(){
  setKeyboardMode(mMode,mImeOptions,mHasVoice,!mIsSymbols);
  if (mIsSymbols && !mPreferSymbols) {
    mSymbolsModeState=SYMBOLS_MODE_STATE_BEGIN;
  }
 else {
    mSymbolsModeState=SYMBOLS_MODE_STATE_NONE;
  }
}","public void toggleSymbols(){
  setKeyboardMode(mMode,mImeOptions,mHasVoice,!mIsSymbols);
  if (mIsSymbols && !mPreferSymbols) {
    mSymbolsModeState=SYMBOLS_MODE_STATE_BEGIN;
  }
 else {
    mSymbolsModeState=SYMBOLS_MODE_STATE_NONE;
  }
}",0.985200845665962
88270,"KeyboardSwitcher(LatinIME ims){
  mInputMethodService=ims;
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(ims);
  mLayoutId=Integer.valueOf(prefs.getString(PREF_KEYBOARD_LAYOUT,DEFAULT_LAYOUT_ID));
  updateSettingsKeyState(prefs);
  prefs.registerOnSharedPreferenceChangeListener(this);
  mKeyboards=new HashMap<KeyboardId,SoftReference<LatinKeyboard>>();
  mSymbolsId=makeSymbolsId(false);
  mSymbolsShiftedId=makeSymbolsShiftedId(false);
}","public KeyboardSwitcher(LatinIME ims){
  mInputMethodService=ims;
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(ims);
  mLayoutId=Integer.valueOf(prefs.getString(PREF_KEYBOARD_LAYOUT,DEFAULT_LAYOUT_ID));
  updateSettingsKeyState(prefs);
  prefs.registerOnSharedPreferenceChangeListener(this);
  mKeyboards=new HashMap<KeyboardId,SoftReference<LatinKeyboard>>();
  mSymbolsId=makeSymbolsId(false);
  mSymbolsShiftedId=makeSymbolsShiftedId(false);
}",0.9926393270241852
88271,"boolean isAlphabetMode(){
  if (mCurrentId == null) {
    return false;
  }
  int currentMode=mCurrentId.mKeyboardMode;
  for (  Integer mode : ALPHABET_MODES) {
    if (currentMode == mode) {
      return true;
    }
  }
  return false;
}","public boolean isAlphabetMode(){
  if (mCurrentId == null) {
    return false;
  }
  int currentMode=mCurrentId.mKeyboardMode;
  for (  Integer mode : ALPHABET_MODES) {
    if (currentMode == mode) {
      return true;
    }
  }
  return false;
}",0.9855670103092784
88272,"boolean hasVoiceButton(boolean isSymbols){
  return mHasVoice && (isSymbols != mVoiceOnPrimary);
}","private boolean hasVoiceButton(boolean isSymbols){
  return mHasVoice && (isSymbols != mVoiceOnPrimary);
}",0.9607843137254902
88273,"void setVoiceMode(boolean enableVoice,boolean voiceOnPrimary){
  if (enableVoice != mHasVoice || voiceOnPrimary != mVoiceOnPrimary) {
    mKeyboards.clear();
  }
  mHasVoice=enableVoice;
  mVoiceOnPrimary=voiceOnPrimary;
  setKeyboardMode(mMode,mImeOptions,mHasVoice,mIsSymbols);
}","public void setVoiceMode(boolean enableVoice,boolean voiceOnPrimary){
  if (enableVoice != mHasVoice || voiceOnPrimary != mVoiceOnPrimary) {
    mKeyboards.clear();
  }
  mHasVoice=enableVoice;
  mVoiceOnPrimary=voiceOnPrimary;
  setKeyboardMode(mMode,mImeOptions,mHasVoice,mIsSymbols);
}",0.9876977152899824
88274,"/** 
 * Sets the input locale, when there are multiple locales for input. If no locale switching is required, then the locale should be set to null.
 * @param locale the current input locale, or null for default locale with no locale button.
 */
void setLanguageSwitcher(LanguageSwitcher languageSwitcher){
  mLanguageSwitcher=languageSwitcher;
  mInputLocale=mLanguageSwitcher.getInputLocale();
}","/** 
 * Sets the input locale, when there are multiple locales for input. If no locale switching is required, then the locale should be set to null.
 * @param locale the current input locale, or null for default locale with no locale button.
 */
public void setLanguageSwitcher(LanguageSwitcher languageSwitcher){
  mLanguageSwitcher=languageSwitcher;
  mInputLocale=mLanguageSwitcher.getInputLocale();
}",0.9912609238451936
88275,"void makeKeyboards(boolean forceCreate){
  mSymbolsId=makeSymbolsId(mHasVoice && !mVoiceOnPrimary);
  mSymbolsShiftedId=makeSymbolsShiftedId(mHasVoice && !mVoiceOnPrimary);
  if (forceCreate)   mKeyboards.clear();
  int displayWidth=mInputMethodService.getMaxWidth();
  if (displayWidth == mLastDisplayWidth)   return;
  mLastDisplayWidth=displayWidth;
  if (!forceCreate)   mKeyboards.clear();
}","public void makeKeyboards(boolean forceCreate){
  mSymbolsId=makeSymbolsId(mHasVoice && !mVoiceOnPrimary);
  mSymbolsShiftedId=makeSymbolsShiftedId(mHasVoice && !mVoiceOnPrimary);
  if (forceCreate)   mKeyboards.clear();
  int displayWidth=mInputMethodService.getMaxWidth();
  if (displayWidth == mLastDisplayWidth)   return;
  mLastDisplayWidth=displayWidth;
  if (!forceCreate)   mKeyboards.clear();
}",0.9912390488110138
88276,"public LatinKeyboard(Context context,int xmlLayoutResId,int mode){
  super(context,xmlLayoutResId,mode);
  final Resources res=context.getResources();
  mContext=context;
  mRes=res;
  mShiftLockIcon=res.getDrawable(R.drawable.sym_keyboard_shift_locked);
  mShiftLockPreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_shift_locked);
  mShiftLockPreviewIcon.setBounds(0,0,mShiftLockPreviewIcon.getIntrinsicWidth(),mShiftLockPreviewIcon.getIntrinsicHeight());
  mSpaceIcon=res.getDrawable(R.drawable.sym_keyboard_space);
  mSpaceAutoCompletionIndicator=res.getDrawable(R.drawable.sym_keyboard_space_led);
  mSpacePreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_space);
  mMicIcon=res.getDrawable(R.drawable.sym_keyboard_mic);
  mMicPreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_mic);
  setDefaultBounds(mMicPreviewIcon);
  mButtonArrowLeftIcon=res.getDrawable(R.drawable.sym_keyboard_language_arrows_left);
  mButtonArrowRightIcon=res.getDrawable(R.drawable.sym_keyboard_language_arrows_right);
  m123MicIcon=res.getDrawable(R.drawable.sym_keyboard_123_mic);
  m123MicPreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_123_mic);
  setDefaultBounds(m123MicPreviewIcon);
  sSpacebarVerticalCorrection=res.getDimensionPixelOffset(R.dimen.spacebar_vertical_correction);
  mIsAlphaKeyboard=xmlLayoutResId == R.xml.kbd_qwerty || xmlLayoutResId == R.xml.kbd_qwerty_black;
  mSpaceKeyIndex=indexOf(' ');
  initializeNumberHintResources(context);
}","public LatinKeyboard(Context context,int xmlLayoutResId,int mode){
  super(context,xmlLayoutResId,mode);
  final Resources res=context.getResources();
  mContext=context;
  mRes=res;
  mShiftLockIcon=res.getDrawable(R.drawable.sym_keyboard_shift_locked);
  mShiftLockPreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_shift_locked);
  mShiftLockPreviewIcon.setBounds(0,0,mShiftLockPreviewIcon.getIntrinsicWidth(),mShiftLockPreviewIcon.getIntrinsicHeight());
  mSpaceIcon=res.getDrawable(R.drawable.sym_keyboard_space);
  mSpaceAutoCompletionIndicator=res.getDrawable(R.drawable.sym_keyboard_space_led);
  mSpacePreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_space);
  mMicIcon=res.getDrawable(R.drawable.sym_keyboard_mic);
  mMicPreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_mic);
  setDefaultBounds(mMicPreviewIcon);
  mButtonArrowLeftIcon=res.getDrawable(R.drawable.sym_keyboard_language_arrows_left);
  mButtonArrowRightIcon=res.getDrawable(R.drawable.sym_keyboard_language_arrows_right);
  m123MicIcon=res.getDrawable(R.drawable.sym_keyboard_123_mic);
  m123MicPreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_123_mic);
  setDefaultBounds(m123MicPreviewIcon);
  sSpacebarVerticalCorrection=res.getDimensionPixelOffset(R.dimen.spacebar_vertical_correction);
  mIsAlphaKeyboard=xmlLayoutResId == R.xml.kbd_qwerty || xmlLayoutResId == R.xml.kbd_qwerty_black;
  mSpaceKeyIndex=indexOf(LatinIME.KEYCODE_SPACE);
  initializeNumberHintResources(context);
}",0.9916359986617598
88277,"public void showPreview(int keyIndex,PointerTracker tracker){
  int oldKeyIndex=mOldPreviewKeyIndex;
  mOldPreviewKeyIndex=keyIndex;
  if (oldKeyIndex != keyIndex && mShowPreview) {
    if (keyIndex == NOT_A_KEY) {
      mHandler.cancelPopupPreview();
      mHandler.dismissPreview(DELAY_AFTER_PREVIEW);
    }
 else     if (tracker != null) {
      mHandler.popupPreview(DELAY_BEFORE_PREVIEW,keyIndex,tracker);
    }
  }
}","public void showPreview(int keyIndex,PointerTracker tracker){
  int oldKeyIndex=mOldPreviewKeyIndex;
  mOldPreviewKeyIndex=keyIndex;
  final boolean isLanguageSwitchEnabled=(mKeyboard instanceof LatinKeyboard) && ((LatinKeyboard)mKeyboard).isLanguageSwitchEnabled();
  final boolean hidePreviewOrShowSpaceKeyPreview=(tracker == null) || tracker.isSpaceKey(keyIndex) || tracker.isSpaceKey(oldKeyIndex);
  if (oldKeyIndex != keyIndex && (mShowPreview || (hidePreviewOrShowSpaceKeyPreview && isLanguageSwitchEnabled))) {
    if (keyIndex == NOT_A_KEY) {
      mHandler.cancelPopupPreview();
      mHandler.dismissPreview(DELAY_AFTER_PREVIEW);
    }
 else     if (tracker != null) {
      mHandler.popupPreview(DELAY_BEFORE_PREVIEW,keyIndex,tracker);
    }
  }
}",0.6508474576271186
88278,"void setKeyboardMode(int mode,int imeOptions,boolean enableVoice,boolean isSymbols){
  if (mInputView == null)   return;
  mMode=mode;
  mImeOptions=imeOptions;
  if (enableVoice != mHasVoice) {
    setVoiceMode(mHasVoice,mVoiceOnPrimary);
  }
  mIsSymbols=isSymbols;
  mInputView.setPreviewEnabled(mInputMethodService.getPopupOn());
  KeyboardId id=getKeyboardId(mode,imeOptions,isSymbols);
  LatinKeyboard keyboard=null;
  keyboard=getKeyboard(id);
  if (mode == MODE_PHONE) {
    mInputView.setPhoneKeyboard(keyboard);
    mInputView.setPreviewEnabled(false);
  }
  mCurrentId=id;
  mInputView.setKeyboard(keyboard);
  keyboard.setShifted(false);
  keyboard.setShiftLocked(keyboard.isShiftLocked());
  keyboard.setImeOptions(mInputMethodService.getResources(),mMode,imeOptions);
  keyboard.setColorOfSymbolIcons(mIsAutoCompletionActive,isBlackSym());
  updateSettingsKeyState(PreferenceManager.getDefaultSharedPreferences(mInputMethodService));
}","private void setKeyboardMode(int mode,int imeOptions,boolean enableVoice,boolean isSymbols){
  if (mInputView == null)   return;
  mMode=mode;
  mImeOptions=imeOptions;
  if (enableVoice != mHasVoice) {
    setVoiceMode(mHasVoice,mVoiceOnPrimary);
  }
  mIsSymbols=isSymbols;
  mInputView.setPreviewEnabled(mInputMethodService.getPopupOn());
  KeyboardId id=getKeyboardId(mode,imeOptions,isSymbols);
  LatinKeyboard keyboard=null;
  keyboard=getKeyboard(id);
  if (mode == MODE_PHONE) {
    mInputView.setPhoneKeyboard(keyboard);
  }
  mCurrentId=id;
  mInputView.setKeyboard(keyboard);
  keyboard.setShifted(false);
  keyboard.setShiftLocked(keyboard.isShiftLocked());
  keyboard.setImeOptions(mInputMethodService.getResources(),mMode,imeOptions);
  keyboard.setColorOfSymbolIcons(mIsAutoCompletionActive,isBlackSym());
  updateSettingsKeyState(PreferenceManager.getDefaultSharedPreferences(mInputMethodService));
}",0.5855227882037534
88279,"int getKeyboardMode(){
  return mMode;
}","public int getKeyboardMode(){
  return mMode;
}",0.9195402298850576
88280,"void setShifted(boolean shifted){
  if (mInputView != null) {
    mInputView.setShifted(shifted);
  }
}","public void setShifted(boolean shifted){
  if (mInputView != null) {
    mInputView.setShifted(shifted);
  }
}",0.9671361502347418
88281,"void setShiftLocked(boolean shiftLocked){
  if (mInputView != null) {
    mInputView.setShiftLocked(shiftLocked);
  }
}","public void setShiftLocked(boolean shiftLocked){
  if (mInputView != null) {
    mInputView.setShiftLocked(shiftLocked);
  }
}",0.9714285714285714
88282,"/** 
 * Updates state machine to figure out when to automatically switch back to alpha mode. Returns true if the keyboard needs to switch back 
 */
boolean onKey(int key){
switch (mSymbolsModeState) {
case SYMBOLS_MODE_STATE_BEGIN:
    if (key != LatinIME.KEYCODE_SPACE && key != LatinIME.KEYCODE_ENTER && key > 0) {
      mSymbolsModeState=SYMBOLS_MODE_STATE_SYMBOL;
    }
  break;
case SYMBOLS_MODE_STATE_SYMBOL:
if (key == LatinIME.KEYCODE_ENTER || key == LatinIME.KEYCODE_SPACE) return true;
break;
}
return false;
}","/** 
 * Updates state machine to figure out when to automatically switch back to alpha mode. Returns true if the keyboard needs to switch back 
 */
public boolean onKey(int key){
switch (mSymbolsModeState) {
case SYMBOLS_MODE_STATE_BEGIN:
    if (key != LatinIME.KEYCODE_SPACE && key != LatinIME.KEYCODE_ENTER && key > 0) {
      mSymbolsModeState=SYMBOLS_MODE_STATE_SYMBOL;
    }
  break;
case SYMBOLS_MODE_STATE_SYMBOL:
if (key == LatinIME.KEYCODE_ENTER || key == LatinIME.KEYCODE_SPACE) return true;
break;
}
return false;
}",0.9933142311365808
88283,"void toggleShift(){
  if (mCurrentId.equals(mSymbolsId)) {
    LatinKeyboard symbolsShiftedKeyboard=getKeyboard(mSymbolsShiftedId);
    mCurrentId=mSymbolsShiftedId;
    mInputView.setKeyboard(symbolsShiftedKeyboard);
    symbolsShiftedKeyboard.enableShiftLock();
    symbolsShiftedKeyboard.setShiftLocked(true);
    symbolsShiftedKeyboard.setImeOptions(mInputMethodService.getResources(),mMode,mImeOptions);
  }
 else   if (mCurrentId.equals(mSymbolsShiftedId)) {
    LatinKeyboard symbolsKeyboard=getKeyboard(mSymbolsId);
    mCurrentId=mSymbolsId;
    mInputView.setKeyboard(symbolsKeyboard);
    symbolsKeyboard.enableShiftLock();
    symbolsKeyboard.setShifted(false);
    symbolsKeyboard.setImeOptions(mInputMethodService.getResources(),mMode,mImeOptions);
  }
}","public void toggleShift(){
  if (mCurrentId.equals(mSymbolsId)) {
    LatinKeyboard symbolsShiftedKeyboard=getKeyboard(mSymbolsShiftedId);
    mCurrentId=mSymbolsShiftedId;
    mInputView.setKeyboard(symbolsShiftedKeyboard);
    symbolsShiftedKeyboard.enableShiftLock();
    symbolsShiftedKeyboard.setShiftLocked(true);
    symbolsShiftedKeyboard.setImeOptions(mInputMethodService.getResources(),mMode,mImeOptions);
  }
 else   if (mCurrentId.equals(mSymbolsShiftedId)) {
    LatinKeyboard symbolsKeyboard=getKeyboard(mSymbolsId);
    mCurrentId=mSymbolsId;
    mInputView.setKeyboard(symbolsKeyboard);
    symbolsKeyboard.enableShiftLock();
    symbolsKeyboard.setShifted(false);
    symbolsKeyboard.setImeOptions(mInputMethodService.getResources(),mMode,mImeOptions);
  }
}",0.9954633830200909
88284,"void toggleSymbols(){
  setKeyboardMode(mMode,mImeOptions,mHasVoice,!mIsSymbols);
  if (mIsSymbols && !mPreferSymbols) {
    mSymbolsModeState=SYMBOLS_MODE_STATE_BEGIN;
  }
 else {
    mSymbolsModeState=SYMBOLS_MODE_STATE_NONE;
  }
}","public void toggleSymbols(){
  setKeyboardMode(mMode,mImeOptions,mHasVoice,!mIsSymbols);
  if (mIsSymbols && !mPreferSymbols) {
    mSymbolsModeState=SYMBOLS_MODE_STATE_BEGIN;
  }
 else {
    mSymbolsModeState=SYMBOLS_MODE_STATE_NONE;
  }
}",0.985200845665962
88285,"KeyboardSwitcher(LatinIME ims){
  mInputMethodService=ims;
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(ims);
  mLayoutId=Integer.valueOf(prefs.getString(PREF_KEYBOARD_LAYOUT,DEFAULT_LAYOUT_ID));
  updateSettingsKeyState(prefs);
  prefs.registerOnSharedPreferenceChangeListener(this);
  mKeyboards=new HashMap<KeyboardId,SoftReference<LatinKeyboard>>();
  mSymbolsId=makeSymbolsId(false);
  mSymbolsShiftedId=makeSymbolsShiftedId(false);
}","public KeyboardSwitcher(LatinIME ims){
  mInputMethodService=ims;
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(ims);
  mLayoutId=Integer.valueOf(prefs.getString(PREF_KEYBOARD_LAYOUT,DEFAULT_LAYOUT_ID));
  updateSettingsKeyState(prefs);
  prefs.registerOnSharedPreferenceChangeListener(this);
  mKeyboards=new HashMap<KeyboardId,SoftReference<LatinKeyboard>>();
  mSymbolsId=makeSymbolsId(false);
  mSymbolsShiftedId=makeSymbolsShiftedId(false);
}",0.9926393270241852
88286,"boolean isAlphabetMode(){
  if (mCurrentId == null) {
    return false;
  }
  int currentMode=mCurrentId.mKeyboardMode;
  for (  Integer mode : ALPHABET_MODES) {
    if (currentMode == mode) {
      return true;
    }
  }
  return false;
}","public boolean isAlphabetMode(){
  if (mCurrentId == null) {
    return false;
  }
  int currentMode=mCurrentId.mKeyboardMode;
  for (  Integer mode : ALPHABET_MODES) {
    if (currentMode == mode) {
      return true;
    }
  }
  return false;
}",0.9855670103092784
88287,"boolean hasVoiceButton(boolean isSymbols){
  return mHasVoice && (isSymbols != mVoiceOnPrimary);
}","private boolean hasVoiceButton(boolean isSymbols){
  return mHasVoice && (isSymbols != mVoiceOnPrimary);
}",0.9607843137254902
88288,"void setVoiceMode(boolean enableVoice,boolean voiceOnPrimary){
  if (enableVoice != mHasVoice || voiceOnPrimary != mVoiceOnPrimary) {
    mKeyboards.clear();
  }
  mHasVoice=enableVoice;
  mVoiceOnPrimary=voiceOnPrimary;
  setKeyboardMode(mMode,mImeOptions,mHasVoice,mIsSymbols);
}","public void setVoiceMode(boolean enableVoice,boolean voiceOnPrimary){
  if (enableVoice != mHasVoice || voiceOnPrimary != mVoiceOnPrimary) {
    mKeyboards.clear();
  }
  mHasVoice=enableVoice;
  mVoiceOnPrimary=voiceOnPrimary;
  setKeyboardMode(mMode,mImeOptions,mHasVoice,mIsSymbols);
}",0.9876977152899824
88289,"/** 
 * Sets the input locale, when there are multiple locales for input. If no locale switching is required, then the locale should be set to null.
 * @param locale the current input locale, or null for default locale with no locale button.
 */
void setLanguageSwitcher(LanguageSwitcher languageSwitcher){
  mLanguageSwitcher=languageSwitcher;
  mInputLocale=mLanguageSwitcher.getInputLocale();
}","/** 
 * Sets the input locale, when there are multiple locales for input. If no locale switching is required, then the locale should be set to null.
 * @param locale the current input locale, or null for default locale with no locale button.
 */
public void setLanguageSwitcher(LanguageSwitcher languageSwitcher){
  mLanguageSwitcher=languageSwitcher;
  mInputLocale=mLanguageSwitcher.getInputLocale();
}",0.9912609238451936
88290,"void makeKeyboards(boolean forceCreate){
  mSymbolsId=makeSymbolsId(mHasVoice && !mVoiceOnPrimary);
  mSymbolsShiftedId=makeSymbolsShiftedId(mHasVoice && !mVoiceOnPrimary);
  if (forceCreate)   mKeyboards.clear();
  int displayWidth=mInputMethodService.getMaxWidth();
  if (displayWidth == mLastDisplayWidth)   return;
  mLastDisplayWidth=displayWidth;
  if (!forceCreate)   mKeyboards.clear();
}","public void makeKeyboards(boolean forceCreate){
  mSymbolsId=makeSymbolsId(mHasVoice && !mVoiceOnPrimary);
  mSymbolsShiftedId=makeSymbolsShiftedId(mHasVoice && !mVoiceOnPrimary);
  if (forceCreate)   mKeyboards.clear();
  int displayWidth=mInputMethodService.getMaxWidth();
  if (displayWidth == mLastDisplayWidth)   return;
  mLastDisplayWidth=displayWidth;
  if (!forceCreate)   mKeyboards.clear();
}",0.9912390488110138
88291,"public LatinKeyboard(Context context,int xmlLayoutResId,int mode){
  super(context,xmlLayoutResId,mode);
  final Resources res=context.getResources();
  mContext=context;
  mRes=res;
  mShiftLockIcon=res.getDrawable(R.drawable.sym_keyboard_shift_locked);
  mShiftLockPreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_shift_locked);
  mShiftLockPreviewIcon.setBounds(0,0,mShiftLockPreviewIcon.getIntrinsicWidth(),mShiftLockPreviewIcon.getIntrinsicHeight());
  mSpaceIcon=res.getDrawable(R.drawable.sym_keyboard_space);
  mSpaceAutoCompletionIndicator=res.getDrawable(R.drawable.sym_keyboard_space_led);
  mSpacePreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_space);
  mMicIcon=res.getDrawable(R.drawable.sym_keyboard_mic);
  mMicPreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_mic);
  setDefaultBounds(mMicPreviewIcon);
  mButtonArrowLeftIcon=res.getDrawable(R.drawable.sym_keyboard_language_arrows_left);
  mButtonArrowRightIcon=res.getDrawable(R.drawable.sym_keyboard_language_arrows_right);
  m123MicIcon=res.getDrawable(R.drawable.sym_keyboard_123_mic);
  m123MicPreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_123_mic);
  setDefaultBounds(m123MicPreviewIcon);
  sSpacebarVerticalCorrection=res.getDimensionPixelOffset(R.dimen.spacebar_vertical_correction);
  mIsAlphaKeyboard=xmlLayoutResId == R.xml.kbd_qwerty || xmlLayoutResId == R.xml.kbd_qwerty_black;
  mSpaceKeyIndex=indexOf(' ');
  initializeNumberHintResources(context);
}","public LatinKeyboard(Context context,int xmlLayoutResId,int mode){
  super(context,xmlLayoutResId,mode);
  final Resources res=context.getResources();
  mContext=context;
  mRes=res;
  mShiftLockIcon=res.getDrawable(R.drawable.sym_keyboard_shift_locked);
  mShiftLockPreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_shift_locked);
  mShiftLockPreviewIcon.setBounds(0,0,mShiftLockPreviewIcon.getIntrinsicWidth(),mShiftLockPreviewIcon.getIntrinsicHeight());
  mSpaceIcon=res.getDrawable(R.drawable.sym_keyboard_space);
  mSpaceAutoCompletionIndicator=res.getDrawable(R.drawable.sym_keyboard_space_led);
  mSpacePreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_space);
  mMicIcon=res.getDrawable(R.drawable.sym_keyboard_mic);
  mMicPreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_mic);
  setDefaultBounds(mMicPreviewIcon);
  mButtonArrowLeftIcon=res.getDrawable(R.drawable.sym_keyboard_language_arrows_left);
  mButtonArrowRightIcon=res.getDrawable(R.drawable.sym_keyboard_language_arrows_right);
  m123MicIcon=res.getDrawable(R.drawable.sym_keyboard_123_mic);
  m123MicPreviewIcon=res.getDrawable(R.drawable.sym_keyboard_feedback_123_mic);
  setDefaultBounds(m123MicPreviewIcon);
  sSpacebarVerticalCorrection=res.getDimensionPixelOffset(R.dimen.spacebar_vertical_correction);
  mIsAlphaKeyboard=xmlLayoutResId == R.xml.kbd_qwerty || xmlLayoutResId == R.xml.kbd_qwerty_black;
  mSpaceKeyIndex=indexOf(LatinIME.KEYCODE_SPACE);
  initializeNumberHintResources(context);
}",0.9916359986617598
88292,"public void showPreview(int keyIndex,PointerTracker tracker){
  int oldKeyIndex=mOldPreviewKeyIndex;
  mOldPreviewKeyIndex=keyIndex;
  if (oldKeyIndex != keyIndex && mShowPreview) {
    if (keyIndex == NOT_A_KEY) {
      mHandler.cancelPopupPreview();
      mHandler.dismissPreview(DELAY_AFTER_PREVIEW);
    }
 else     if (tracker != null) {
      mHandler.popupPreview(DELAY_BEFORE_PREVIEW,keyIndex,tracker);
    }
  }
}","public void showPreview(int keyIndex,PointerTracker tracker){
  int oldKeyIndex=mOldPreviewKeyIndex;
  mOldPreviewKeyIndex=keyIndex;
  final boolean isLanguageSwitchEnabled=(mKeyboard instanceof LatinKeyboard) && ((LatinKeyboard)mKeyboard).isLanguageSwitchEnabled();
  final boolean hidePreviewOrShowSpaceKeyPreview=(tracker == null) || tracker.isSpaceKey(keyIndex) || tracker.isSpaceKey(oldKeyIndex);
  if (oldKeyIndex != keyIndex && (mShowPreview || (hidePreviewOrShowSpaceKeyPreview && isLanguageSwitchEnabled))) {
    if (keyIndex == NOT_A_KEY) {
      mHandler.cancelPopupPreview();
      mHandler.dismissPreview(DELAY_AFTER_PREVIEW);
    }
 else     if (tracker != null) {
      mHandler.popupPreview(DELAY_BEFORE_PREVIEW,keyIndex,tracker);
    }
  }
}",0.6508474576271186
88293,"@Override public int getKeyIndexAndNearbyCodes(int x,int y,int[] allKeys){
  final Key[] keys=getKeys();
  final int touchX=getTouchX(x);
  final int touchY=getTouchY(y);
  int closestKey=LatinKeyboardBaseView.NOT_A_KEY;
  int closestKeyDist=(y < 0) ? mSlideAllowanceSquareTop : mSlideAllowanceSquare;
  final int keyCount=keys.length;
  for (int i=0; i < keyCount; i++) {
    final Key key=keys[i];
    int dist=key.squaredDistanceFrom(touchX,touchY);
    if (dist < closestKeyDist) {
      closestKey=i;
      closestKeyDist=dist;
    }
  }
  if (allKeys != null && closestKey != LatinKeyboardBaseView.NOT_A_KEY)   allKeys[0]=closestKey;
  return closestKey;
}","@Override public int getKeyIndexAndNearbyCodes(int x,int y,int[] allKeys){
  final Key[] keys=getKeys();
  final int touchX=getTouchX(x);
  final int touchY=getTouchY(y);
  int closestKeyIndex=LatinKeyboardBaseView.NOT_A_KEY;
  int closestKeyDist=(y < 0) ? mSlideAllowanceSquareTop : mSlideAllowanceSquare;
  final int keyCount=keys.length;
  for (int i=0; i < keyCount; i++) {
    final Key key=keys[i];
    int dist=key.squaredDistanceFrom(touchX,touchY);
    if (dist < closestKeyDist) {
      closestKeyIndex=i;
      closestKeyDist=dist;
    }
  }
  if (allKeys != null && closestKeyIndex != LatinKeyboardBaseView.NOT_A_KEY)   allKeys[0]=keys[closestKeyIndex].codes[0];
  return closestKeyIndex;
}",0.9252199413489736
88294,"@Override public int getKeyIndexAndNearbyCodes(int x,int y,int[] allKeys){
  final Key[] keys=getKeys();
  final int touchX=getTouchX(x);
  final int touchY=getTouchY(y);
  int closestKey=LatinKeyboardBaseView.NOT_A_KEY;
  int closestKeyDist=(y < 0) ? mSlideAllowanceSquareTop : mSlideAllowanceSquare;
  final int keyCount=keys.length;
  for (int i=0; i < keyCount; i++) {
    final Key key=keys[i];
    int dist=key.squaredDistanceFrom(touchX,touchY);
    if (dist < closestKeyDist) {
      closestKey=i;
      closestKeyDist=dist;
    }
  }
  if (allKeys != null && closestKey != LatinKeyboardBaseView.NOT_A_KEY)   allKeys[0]=closestKey;
  return closestKey;
}","@Override public int getKeyIndexAndNearbyCodes(int x,int y,int[] allKeys){
  final Key[] keys=getKeys();
  final int touchX=getTouchX(x);
  final int touchY=getTouchY(y);
  int closestKeyIndex=LatinKeyboardBaseView.NOT_A_KEY;
  int closestKeyDist=(y < 0) ? mSlideAllowanceSquareTop : mSlideAllowanceSquare;
  final int keyCount=keys.length;
  for (int i=0; i < keyCount; i++) {
    final Key key=keys[i];
    int dist=key.squaredDistanceFrom(touchX,touchY);
    if (dist < closestKeyDist) {
      closestKeyIndex=i;
      closestKeyDist=dist;
    }
  }
  if (allKeys != null && closestKeyIndex != LatinKeyboardBaseView.NOT_A_KEY)   allKeys[0]=keys[closestKeyIndex].codes[0];
  return closestKeyIndex;
}",0.9252199413489736
88295,"@Override public int getKeyIndexAndNearbyCodes(int x,int y,int[] allKeys){
  final Key[] keys=getKeys();
  final int touchX=getTouchX(x);
  final int touchY=getTouchY(y);
  int closestKey=LatinKeyboardBaseView.NOT_A_KEY;
  int closestKeyDist=(y < 0) ? mSlideAllowanceSquareTop : mSlideAllowanceSquare;
  final int keyCount=keys.length;
  for (int i=0; i < keyCount; i++) {
    final Key key=keys[i];
    int dist=key.squaredDistanceFrom(touchX,touchY);
    if (dist < closestKeyDist) {
      closestKey=i;
      closestKeyDist=dist;
    }
  }
  if (allKeys != null && closestKey != LatinKeyboardBaseView.NOT_A_KEY)   allKeys[0]=closestKey;
  return closestKey;
}","@Override public int getKeyIndexAndNearbyCodes(int x,int y,int[] allKeys){
  final Key[] keys=getKeys();
  final int touchX=getTouchX(x);
  final int touchY=getTouchY(y);
  int closestKeyIndex=LatinKeyboardBaseView.NOT_A_KEY;
  int closestKeyDist=(y < 0) ? mSlideAllowanceSquareTop : mSlideAllowanceSquare;
  final int keyCount=keys.length;
  for (int i=0; i < keyCount; i++) {
    final Key key=keys[i];
    int dist=key.squaredDistanceFrom(touchX,touchY);
    if (dist < closestKeyDist) {
      closestKeyIndex=i;
      closestKeyDist=dist;
    }
  }
  if (allKeys != null && closestKeyIndex != LatinKeyboardBaseView.NOT_A_KEY)   allKeys[0]=keys[closestKeyIndex].codes[0];
  return closestKeyIndex;
}",0.9252199413489736
88296,"private boolean onModifiedTouchEvent(MotionEvent me){
  int touchX=(int)me.getX() - getPaddingLeft();
  int touchY=(int)me.getY() + mVerticalCorrection - getPaddingTop();
  final int action=me.getAction();
  final long eventTime=me.getEventTime();
  int keyIndex=getKeyIndexAndNearbyCodes(touchX,touchY,null);
switch (action) {
case MotionEvent.ACTION_DOWN:
    mAbortKey=false;
  mCurrentKey=keyIndex;
mDownKey=keyIndex;
mStartX=touchX;
mStartY=touchY;
mDebouncer.startMoveDebouncing(touchX,touchY);
mDebouncer.startTimeDebouncing(eventTime);
checkMultiTap(eventTime,keyIndex);
mKeyboardActionListener.onPress(keyIndex != NOT_A_KEY ? mKeys[keyIndex].codes[0] : 0);
if (keyIndex >= 0 && mKeys[keyIndex].repeatable) {
repeatKey(keyIndex);
mHandler.startKeyRepeatTimer(REPEAT_START_DELAY,keyIndex);
if (mAbortKey) {
mHandler.cancelKeyRepeatTimer();
break;
}
}
if (keyIndex != NOT_A_KEY) {
mHandler.startLongPressTimer(keyIndex,LONGPRESS_TIMEOUT);
}
showPreview(keyIndex);
break;
case MotionEvent.ACTION_MOVE:
if (keyIndex != NOT_A_KEY) {
if (mCurrentKey == NOT_A_KEY) {
mDebouncer.updateTimeDebouncing(eventTime);
mCurrentKey=keyIndex;
mHandler.startLongPressTimer(keyIndex,LONGPRESS_TIMEOUT);
}
 else if (mDebouncer.isMinorMoveBounce(touchX,touchY,keyIndex,mCurrentKey)) {
mDebouncer.updateTimeDebouncing(eventTime);
}
 else {
resetMultiTap();
mDebouncer.resetTimeDebouncing(eventTime,mCurrentKey);
mDebouncer.resetMoveDebouncing();
mCurrentKey=keyIndex;
mHandler.startLongPressTimer(keyIndex,LONGPRESS_TIMEOUT);
}
}
 else {
mHandler.cancelLongPressTimer();
}
showPreview(mDebouncer.isMinorTimeBounce() ? mDebouncer.getLastKey() : mCurrentKey);
break;
case MotionEvent.ACTION_UP:
mHandler.cancelKeyTimers();
mHandler.cancelPopupPreview();
if (mDebouncer.isMinorMoveBounce(touchX,touchY,keyIndex,mCurrentKey)) {
mDebouncer.updateTimeDebouncing(eventTime);
}
 else {
resetMultiTap();
mDebouncer.resetTimeDebouncing(eventTime,mCurrentKey);
mCurrentKey=keyIndex;
}
if (mDebouncer.isMinorTimeBounce()) {
mCurrentKey=mDebouncer.getLastKey();
touchX=mDebouncer.getLastCodeX();
touchY=mDebouncer.getLastCodeY();
}
showPreview(NOT_A_KEY);
if (!mMiniKeyboardOnScreen && !mAbortKey) {
detectAndSendKey(mCurrentKey,touchX,touchY,eventTime);
}
invalidateKey(keyIndex);
break;
case MotionEvent.ACTION_CANCEL:
mHandler.cancelKeyTimers();
mHandler.cancelPopupPreview();
dismissPopupKeyboard();
mAbortKey=true;
showPreview(NOT_A_KEY);
invalidateKey(mCurrentKey);
break;
}
mDebouncer.updateMoveDebouncing(touchX,touchY);
return true;
}","private boolean onModifiedTouchEvent(MotionEvent me){
  int touchX=(int)me.getX() - getPaddingLeft();
  int touchY=(int)me.getY() + mVerticalCorrection - getPaddingTop();
  final int action=me.getAction();
  final long eventTime=me.getEventTime();
  int keyIndex=getKeyIndexAndNearbyCodes(touchX,touchY,null);
switch (action) {
case MotionEvent.ACTION_DOWN:
    mAbortKey=false;
  mCurrentKey=keyIndex;
mDownKey=keyIndex;
mStartX=touchX;
mStartY=touchY;
mDebouncer.startMoveDebouncing(touchX,touchY);
mDebouncer.startTimeDebouncing(eventTime);
checkMultiTap(eventTime,keyIndex);
mKeyboardActionListener.onPress(keyIndex != NOT_A_KEY ? mKeys[keyIndex].codes[0] : 0);
if (keyIndex >= 0 && mKeys[keyIndex].repeatable) {
repeatKey(keyIndex);
mHandler.startKeyRepeatTimer(REPEAT_START_DELAY,keyIndex);
if (mAbortKey) {
mHandler.cancelKeyRepeatTimer();
break;
}
}
if (keyIndex != NOT_A_KEY) {
mHandler.startLongPressTimer(keyIndex,LONGPRESS_TIMEOUT);
}
showPreview(keyIndex);
break;
case MotionEvent.ACTION_MOVE:
if (keyIndex != NOT_A_KEY) {
if (mCurrentKey == NOT_A_KEY) {
mDebouncer.updateTimeDebouncing(eventTime);
mCurrentKey=keyIndex;
mHandler.startLongPressTimer(keyIndex,LONGPRESS_TIMEOUT);
}
 else if (mDebouncer.isMinorMoveBounce(touchX,touchY,keyIndex,mCurrentKey)) {
mDebouncer.updateTimeDebouncing(eventTime);
}
 else {
resetMultiTap();
mDebouncer.resetTimeDebouncing(eventTime,mCurrentKey);
mDebouncer.resetMoveDebouncing();
mCurrentKey=keyIndex;
mHandler.startLongPressTimer(keyIndex,LONGPRESS_TIMEOUT);
}
}
 else {
mHandler.cancelLongPressTimer();
}
showPreview(mDebouncer.isMinorTimeBounce() ? mDebouncer.getLastKey() : mCurrentKey);
break;
case MotionEvent.ACTION_UP:
boolean wasInKeyRepeat=mHandler.isInKeyRepeat();
mHandler.cancelKeyTimers();
mHandler.cancelPopupPreview();
if (mDebouncer.isMinorMoveBounce(touchX,touchY,keyIndex,mCurrentKey)) {
mDebouncer.updateTimeDebouncing(eventTime);
}
 else {
resetMultiTap();
mDebouncer.resetTimeDebouncing(eventTime,mCurrentKey);
mCurrentKey=keyIndex;
}
if (mDebouncer.isMinorTimeBounce()) {
mCurrentKey=mDebouncer.getLastKey();
touchX=mDebouncer.getLastCodeX();
touchY=mDebouncer.getLastCodeY();
}
showPreview(NOT_A_KEY);
if (!wasInKeyRepeat && !mMiniKeyboardOnScreen && !mAbortKey) {
detectAndSendKey(mCurrentKey,touchX,touchY,eventTime);
}
invalidateKey(keyIndex);
break;
case MotionEvent.ACTION_CANCEL:
mHandler.cancelKeyTimers();
mHandler.cancelPopupPreview();
dismissPopupKeyboard();
mAbortKey=true;
showPreview(NOT_A_KEY);
invalidateKey(mCurrentKey);
break;
}
mDebouncer.updateMoveDebouncing(touchX,touchY);
return true;
}",0.9866666666666668
88297,"@Override public boolean onTouchEvent(MotionEvent me){
  final int pointerCount=me.getPointerCount();
  final int action=me.getAction();
  boolean result=false;
  final long now=me.getEventTime();
  if (pointerCount > 1 && mOldPointerCount > 1) {
    return true;
  }
  if (action == MotionEvent.ACTION_DOWN)   mSwipeTracker.clear();
  mSwipeTracker.addMovement(me);
  if (mAbortKey && action != MotionEvent.ACTION_DOWN && action != MotionEvent.ACTION_CANCEL) {
    return true;
  }
  mCancelGestureDetector=(pointerCount > 1);
  if (mGestureDetector.onTouchEvent(me)) {
    showPreview(NOT_A_KEY);
    mHandler.cancelKeyTimers();
    return true;
  }
  if (mMiniKeyboardOnScreen && action != MotionEvent.ACTION_CANCEL) {
    return true;
  }
  if (mHandler.isInKeyRepeat()) {
    if (pointerCount == 1 && action == MotionEvent.ACTION_MOVE) {
      return true;
    }
 else {
      mHandler.cancelKeyRepeatTimer();
    }
  }
  if (pointerCount != mOldPointerCount) {
    if (pointerCount == 1) {
      MotionEvent down=MotionEvent.obtain(now,now,MotionEvent.ACTION_DOWN,me.getX(),me.getY(),me.getMetaState());
      result=onModifiedTouchEvent(down);
      down.recycle();
      if (action == MotionEvent.ACTION_UP) {
        result=onModifiedTouchEvent(me);
      }
    }
 else {
      MotionEvent up=MotionEvent.obtain(now,now,MotionEvent.ACTION_UP,mOldPointerX,mOldPointerY,me.getMetaState());
      result=onModifiedTouchEvent(up);
      up.recycle();
    }
    mOldPointerCount=pointerCount;
  }
 else {
    if (pointerCount == 1) {
      result=onModifiedTouchEvent(me);
      mOldPointerX=me.getX();
      mOldPointerY=me.getY();
    }
  }
  return result;
}","@Override public boolean onTouchEvent(MotionEvent me){
  final int pointerCount=me.getPointerCount();
  final int action=me.getAction();
  boolean result=false;
  final long now=me.getEventTime();
  if (pointerCount > 1 && mOldPointerCount > 1) {
    return true;
  }
  if (action == MotionEvent.ACTION_DOWN)   mSwipeTracker.clear();
  mSwipeTracker.addMovement(me);
  if (mAbortKey && action != MotionEvent.ACTION_DOWN && action != MotionEvent.ACTION_CANCEL) {
    return true;
  }
  mCancelGestureDetector=(pointerCount > 1);
  if (mGestureDetector.onTouchEvent(me)) {
    showPreview(NOT_A_KEY);
    mHandler.cancelKeyTimers();
    return true;
  }
  if (mMiniKeyboardOnScreen && action != MotionEvent.ACTION_CANCEL) {
    return true;
  }
  if (mHandler.isInKeyRepeat()) {
    if (pointerCount > 1) {
      mHandler.cancelKeyRepeatTimer();
    }
 else     if (action == MotionEvent.ACTION_MOVE) {
      return true;
    }
  }
  if (pointerCount != mOldPointerCount) {
    if (pointerCount == 1) {
      MotionEvent down=MotionEvent.obtain(now,now,MotionEvent.ACTION_DOWN,me.getX(),me.getY(),me.getMetaState());
      result=onModifiedTouchEvent(down);
      down.recycle();
      if (action == MotionEvent.ACTION_UP) {
        result=onModifiedTouchEvent(me);
      }
    }
 else {
      MotionEvent up=MotionEvent.obtain(now,now,MotionEvent.ACTION_UP,mOldPointerX,mOldPointerY,me.getMetaState());
      result=onModifiedTouchEvent(up);
      up.recycle();
    }
    mOldPointerCount=pointerCount;
  }
 else {
    if (pointerCount == 1) {
      result=onModifiedTouchEvent(me);
      mOldPointerX=me.getX();
      mOldPointerY=me.getY();
    }
  }
  return result;
}",0.9631184407796102
88298,"private boolean onModifiedTouchEvent(MotionEvent me){
  int touchX=(int)me.getX() - getPaddingLeft();
  int touchY=(int)me.getY() + mVerticalCorrection - getPaddingTop();
  final int action=me.getAction();
  final long eventTime=me.getEventTime();
  int keyIndex=getKeyIndexAndNearbyCodes(touchX,touchY,null);
switch (action) {
case MotionEvent.ACTION_DOWN:
    mAbortKey=false;
  mCurrentKey=keyIndex;
mDownKey=keyIndex;
mStartX=touchX;
mStartY=touchY;
mDebouncer.startMoveDebouncing(touchX,touchY);
mDebouncer.startTimeDebouncing(eventTime);
checkMultiTap(eventTime,keyIndex);
mKeyboardActionListener.onPress(keyIndex != NOT_A_KEY ? mKeys[keyIndex].codes[0] : 0);
if (keyIndex >= 0 && mKeys[keyIndex].repeatable) {
repeatKey(keyIndex);
mHandler.startKeyRepeatTimer(REPEAT_START_DELAY,keyIndex);
if (mAbortKey) {
mHandler.cancelKeyRepeatTimer();
break;
}
}
if (keyIndex != NOT_A_KEY) {
mHandler.startLongPressTimer(keyIndex,LONGPRESS_TIMEOUT);
}
showPreview(keyIndex);
break;
case MotionEvent.ACTION_MOVE:
if (keyIndex != NOT_A_KEY) {
if (mCurrentKey == NOT_A_KEY) {
mDebouncer.updateTimeDebouncing(eventTime);
mCurrentKey=keyIndex;
mHandler.startLongPressTimer(keyIndex,LONGPRESS_TIMEOUT);
}
 else if (mDebouncer.isMinorMoveBounce(touchX,touchY,keyIndex,mCurrentKey)) {
mDebouncer.updateTimeDebouncing(eventTime);
}
 else {
resetMultiTap();
mDebouncer.resetTimeDebouncing(eventTime,mCurrentKey);
mDebouncer.resetMoveDebouncing();
mCurrentKey=keyIndex;
mHandler.startLongPressTimer(keyIndex,LONGPRESS_TIMEOUT);
}
}
 else {
mHandler.cancelLongPressTimer();
}
showPreview(mDebouncer.isMinorTimeBounce() ? mDebouncer.getLastKey() : mCurrentKey);
break;
case MotionEvent.ACTION_UP:
mHandler.cancelKeyTimers();
mHandler.cancelPopupPreview();
if (mDebouncer.isMinorMoveBounce(touchX,touchY,keyIndex,mCurrentKey)) {
mDebouncer.updateTimeDebouncing(eventTime);
}
 else {
resetMultiTap();
mDebouncer.resetTimeDebouncing(eventTime,mCurrentKey);
mCurrentKey=keyIndex;
}
if (mDebouncer.isMinorTimeBounce()) {
mCurrentKey=mDebouncer.getLastKey();
touchX=mDebouncer.getLastCodeX();
touchY=mDebouncer.getLastCodeY();
}
showPreview(NOT_A_KEY);
if (!mMiniKeyboardOnScreen && !mAbortKey) {
detectAndSendKey(mCurrentKey,touchX,touchY,eventTime);
}
invalidateKey(keyIndex);
break;
case MotionEvent.ACTION_CANCEL:
mHandler.cancelKeyTimers();
mHandler.cancelPopupPreview();
dismissPopupKeyboard();
mAbortKey=true;
showPreview(NOT_A_KEY);
invalidateKey(mCurrentKey);
break;
}
mDebouncer.updateMoveDebouncing(touchX,touchY);
return true;
}","private boolean onModifiedTouchEvent(MotionEvent me){
  int touchX=(int)me.getX() - getPaddingLeft();
  int touchY=(int)me.getY() + mVerticalCorrection - getPaddingTop();
  final int action=me.getAction();
  final long eventTime=me.getEventTime();
  int keyIndex=getKeyIndexAndNearbyCodes(touchX,touchY,null);
switch (action) {
case MotionEvent.ACTION_DOWN:
    mAbortKey=false;
  mCurrentKey=keyIndex;
mDownKey=keyIndex;
mStartX=touchX;
mStartY=touchY;
mDebouncer.startMoveDebouncing(touchX,touchY);
mDebouncer.startTimeDebouncing(eventTime);
checkMultiTap(eventTime,keyIndex);
mKeyboardActionListener.onPress(keyIndex != NOT_A_KEY ? mKeys[keyIndex].codes[0] : 0);
if (keyIndex >= 0 && mKeys[keyIndex].repeatable) {
repeatKey(keyIndex);
mHandler.startKeyRepeatTimer(REPEAT_START_DELAY,keyIndex);
if (mAbortKey) {
mHandler.cancelKeyRepeatTimer();
break;
}
}
if (keyIndex != NOT_A_KEY) {
mHandler.startLongPressTimer(keyIndex,LONGPRESS_TIMEOUT);
}
showPreview(keyIndex);
break;
case MotionEvent.ACTION_MOVE:
if (keyIndex != NOT_A_KEY) {
if (mCurrentKey == NOT_A_KEY) {
mDebouncer.updateTimeDebouncing(eventTime);
mCurrentKey=keyIndex;
mHandler.startLongPressTimer(keyIndex,LONGPRESS_TIMEOUT);
}
 else if (mDebouncer.isMinorMoveBounce(touchX,touchY,keyIndex,mCurrentKey)) {
mDebouncer.updateTimeDebouncing(eventTime);
}
 else {
resetMultiTap();
mDebouncer.resetTimeDebouncing(eventTime,mCurrentKey);
mDebouncer.resetMoveDebouncing();
mCurrentKey=keyIndex;
mHandler.startLongPressTimer(keyIndex,LONGPRESS_TIMEOUT);
}
}
 else {
mHandler.cancelLongPressTimer();
}
showPreview(mDebouncer.isMinorTimeBounce() ? mDebouncer.getLastKey() : mCurrentKey);
break;
case MotionEvent.ACTION_UP:
boolean wasInKeyRepeat=mHandler.isInKeyRepeat();
mHandler.cancelKeyTimers();
mHandler.cancelPopupPreview();
if (mDebouncer.isMinorMoveBounce(touchX,touchY,keyIndex,mCurrentKey)) {
mDebouncer.updateTimeDebouncing(eventTime);
}
 else {
resetMultiTap();
mDebouncer.resetTimeDebouncing(eventTime,mCurrentKey);
mCurrentKey=keyIndex;
}
if (mDebouncer.isMinorTimeBounce()) {
mCurrentKey=mDebouncer.getLastKey();
touchX=mDebouncer.getLastCodeX();
touchY=mDebouncer.getLastCodeY();
}
showPreview(NOT_A_KEY);
if (!wasInKeyRepeat && !mMiniKeyboardOnScreen && !mAbortKey) {
detectAndSendKey(mCurrentKey,touchX,touchY,eventTime);
}
invalidateKey(keyIndex);
break;
case MotionEvent.ACTION_CANCEL:
mHandler.cancelKeyTimers();
mHandler.cancelPopupPreview();
dismissPopupKeyboard();
mAbortKey=true;
showPreview(NOT_A_KEY);
invalidateKey(mCurrentKey);
break;
}
mDebouncer.updateMoveDebouncing(touchX,touchY);
return true;
}",0.9866666666666668
88299,"@Override public boolean onTouchEvent(MotionEvent me){
  final int pointerCount=me.getPointerCount();
  final int action=me.getAction();
  boolean result=false;
  final long now=me.getEventTime();
  if (pointerCount > 1 && mOldPointerCount > 1) {
    return true;
  }
  if (action == MotionEvent.ACTION_DOWN)   mSwipeTracker.clear();
  mSwipeTracker.addMovement(me);
  if (mAbortKey && action != MotionEvent.ACTION_DOWN && action != MotionEvent.ACTION_CANCEL) {
    return true;
  }
  mCancelGestureDetector=(pointerCount > 1);
  if (mGestureDetector.onTouchEvent(me)) {
    showPreview(NOT_A_KEY);
    mHandler.cancelKeyTimers();
    return true;
  }
  if (mMiniKeyboardOnScreen && action != MotionEvent.ACTION_CANCEL) {
    return true;
  }
  if (mHandler.isInKeyRepeat()) {
    if (pointerCount == 1 && action == MotionEvent.ACTION_MOVE) {
      return true;
    }
 else {
      mHandler.cancelKeyRepeatTimer();
    }
  }
  if (pointerCount != mOldPointerCount) {
    if (pointerCount == 1) {
      MotionEvent down=MotionEvent.obtain(now,now,MotionEvent.ACTION_DOWN,me.getX(),me.getY(),me.getMetaState());
      result=onModifiedTouchEvent(down);
      down.recycle();
      if (action == MotionEvent.ACTION_UP) {
        result=onModifiedTouchEvent(me);
      }
    }
 else {
      MotionEvent up=MotionEvent.obtain(now,now,MotionEvent.ACTION_UP,mOldPointerX,mOldPointerY,me.getMetaState());
      result=onModifiedTouchEvent(up);
      up.recycle();
    }
    mOldPointerCount=pointerCount;
  }
 else {
    if (pointerCount == 1) {
      result=onModifiedTouchEvent(me);
      mOldPointerX=me.getX();
      mOldPointerY=me.getY();
    }
  }
  return result;
}","@Override public boolean onTouchEvent(MotionEvent me){
  final int pointerCount=me.getPointerCount();
  final int action=me.getAction();
  boolean result=false;
  final long now=me.getEventTime();
  if (pointerCount > 1 && mOldPointerCount > 1) {
    return true;
  }
  if (action == MotionEvent.ACTION_DOWN)   mSwipeTracker.clear();
  mSwipeTracker.addMovement(me);
  if (mAbortKey && action != MotionEvent.ACTION_DOWN && action != MotionEvent.ACTION_CANCEL) {
    return true;
  }
  mCancelGestureDetector=(pointerCount > 1);
  if (mGestureDetector.onTouchEvent(me)) {
    showPreview(NOT_A_KEY);
    mHandler.cancelKeyTimers();
    return true;
  }
  if (mMiniKeyboardOnScreen && action != MotionEvent.ACTION_CANCEL) {
    return true;
  }
  if (mHandler.isInKeyRepeat()) {
    if (pointerCount > 1) {
      mHandler.cancelKeyRepeatTimer();
    }
 else     if (action == MotionEvent.ACTION_MOVE) {
      return true;
    }
  }
  if (pointerCount != mOldPointerCount) {
    if (pointerCount == 1) {
      MotionEvent down=MotionEvent.obtain(now,now,MotionEvent.ACTION_DOWN,me.getX(),me.getY(),me.getMetaState());
      result=onModifiedTouchEvent(down);
      down.recycle();
      if (action == MotionEvent.ACTION_UP) {
        result=onModifiedTouchEvent(me);
      }
    }
 else {
      MotionEvent up=MotionEvent.obtain(now,now,MotionEvent.ACTION_UP,mOldPointerX,mOldPointerY,me.getMetaState());
      result=onModifiedTouchEvent(up);
      up.recycle();
    }
    mOldPointerCount=pointerCount;
  }
 else {
    if (pointerCount == 1) {
      result=onModifiedTouchEvent(me);
      mOldPointerX=me.getX();
      mOldPointerY=me.getY();
    }
  }
  return result;
}",0.9631184407796102
88300,"private boolean onModifiedTouchEvent(MotionEvent me){
  int touchX=(int)me.getX() - getPaddingLeft();
  int touchY=(int)me.getY() + mVerticalCorrection - getPaddingTop();
  final int action=me.getAction();
  final long eventTime=me.getEventTime();
  int keyIndex=getKeyIndexAndNearbyCodes(touchX,touchY,null);
switch (action) {
case MotionEvent.ACTION_DOWN:
    mAbortKey=false;
  mCurrentKey=keyIndex;
mDownKey=keyIndex;
mStartX=touchX;
mStartY=touchY;
mDebouncer.startMoveDebouncing(touchX,touchY);
mDebouncer.startTimeDebouncing(eventTime);
checkMultiTap(eventTime,keyIndex);
mKeyboardActionListener.onPress(keyIndex != NOT_A_KEY ? mKeys[keyIndex].codes[0] : 0);
if (keyIndex >= 0 && mKeys[keyIndex].repeatable) {
repeatKey(keyIndex);
mHandler.startKeyRepeatTimer(REPEAT_START_DELAY,keyIndex);
if (mAbortKey) {
mHandler.cancelKeyRepeatTimer();
break;
}
}
if (keyIndex != NOT_A_KEY) {
mHandler.startLongPressTimer(keyIndex,LONGPRESS_TIMEOUT);
}
showPreview(keyIndex);
break;
case MotionEvent.ACTION_MOVE:
if (keyIndex != NOT_A_KEY) {
if (mCurrentKey == NOT_A_KEY) {
mDebouncer.updateTimeDebouncing(eventTime);
mCurrentKey=keyIndex;
mHandler.startLongPressTimer(keyIndex,LONGPRESS_TIMEOUT);
}
 else if (mDebouncer.isMinorMoveBounce(touchX,touchY,keyIndex,mCurrentKey)) {
mDebouncer.updateTimeDebouncing(eventTime);
}
 else {
resetMultiTap();
mDebouncer.resetTimeDebouncing(eventTime,mCurrentKey);
mDebouncer.resetMoveDebouncing();
mCurrentKey=keyIndex;
mHandler.startLongPressTimer(keyIndex,LONGPRESS_TIMEOUT);
}
}
 else {
mHandler.cancelLongPressTimer();
}
showPreview(mDebouncer.isMinorTimeBounce() ? mDebouncer.getLastKey() : mCurrentKey);
break;
case MotionEvent.ACTION_UP:
mHandler.cancelKeyTimers();
mHandler.cancelPopupPreview();
if (mDebouncer.isMinorMoveBounce(touchX,touchY,keyIndex,mCurrentKey)) {
mDebouncer.updateTimeDebouncing(eventTime);
}
 else {
resetMultiTap();
mDebouncer.resetTimeDebouncing(eventTime,mCurrentKey);
mCurrentKey=keyIndex;
}
if (mDebouncer.isMinorTimeBounce()) {
mCurrentKey=mDebouncer.getLastKey();
touchX=mDebouncer.getLastCodeX();
touchY=mDebouncer.getLastCodeY();
}
showPreview(NOT_A_KEY);
if (!mMiniKeyboardOnScreen && !mAbortKey) {
detectAndSendKey(mCurrentKey,touchX,touchY,eventTime);
}
invalidateKey(keyIndex);
break;
case MotionEvent.ACTION_CANCEL:
mHandler.cancelKeyTimers();
mHandler.cancelPopupPreview();
dismissPopupKeyboard();
mAbortKey=true;
showPreview(NOT_A_KEY);
invalidateKey(mCurrentKey);
break;
}
mDebouncer.updateMoveDebouncing(touchX,touchY);
return true;
}","private boolean onModifiedTouchEvent(MotionEvent me){
  int touchX=(int)me.getX() - getPaddingLeft();
  int touchY=(int)me.getY() + mVerticalCorrection - getPaddingTop();
  final int action=me.getAction();
  final long eventTime=me.getEventTime();
  int keyIndex=getKeyIndexAndNearbyCodes(touchX,touchY,null);
switch (action) {
case MotionEvent.ACTION_DOWN:
    mAbortKey=false;
  mCurrentKey=keyIndex;
mDownKey=keyIndex;
mStartX=touchX;
mStartY=touchY;
mDebouncer.startMoveDebouncing(touchX,touchY);
mDebouncer.startTimeDebouncing(eventTime);
checkMultiTap(eventTime,keyIndex);
mKeyboardActionListener.onPress(keyIndex != NOT_A_KEY ? mKeys[keyIndex].codes[0] : 0);
if (keyIndex >= 0 && mKeys[keyIndex].repeatable) {
repeatKey(keyIndex);
mHandler.startKeyRepeatTimer(REPEAT_START_DELAY,keyIndex);
if (mAbortKey) {
mHandler.cancelKeyRepeatTimer();
break;
}
}
if (keyIndex != NOT_A_KEY) {
mHandler.startLongPressTimer(keyIndex,LONGPRESS_TIMEOUT);
}
showPreview(keyIndex);
break;
case MotionEvent.ACTION_MOVE:
if (keyIndex != NOT_A_KEY) {
if (mCurrentKey == NOT_A_KEY) {
mDebouncer.updateTimeDebouncing(eventTime);
mCurrentKey=keyIndex;
mHandler.startLongPressTimer(keyIndex,LONGPRESS_TIMEOUT);
}
 else if (mDebouncer.isMinorMoveBounce(touchX,touchY,keyIndex,mCurrentKey)) {
mDebouncer.updateTimeDebouncing(eventTime);
}
 else {
resetMultiTap();
mDebouncer.resetTimeDebouncing(eventTime,mCurrentKey);
mDebouncer.resetMoveDebouncing();
mCurrentKey=keyIndex;
mHandler.startLongPressTimer(keyIndex,LONGPRESS_TIMEOUT);
}
}
 else {
mHandler.cancelLongPressTimer();
}
showPreview(mDebouncer.isMinorTimeBounce() ? mDebouncer.getLastKey() : mCurrentKey);
break;
case MotionEvent.ACTION_UP:
boolean wasInKeyRepeat=mHandler.isInKeyRepeat();
mHandler.cancelKeyTimers();
mHandler.cancelPopupPreview();
if (mDebouncer.isMinorMoveBounce(touchX,touchY,keyIndex,mCurrentKey)) {
mDebouncer.updateTimeDebouncing(eventTime);
}
 else {
resetMultiTap();
mDebouncer.resetTimeDebouncing(eventTime,mCurrentKey);
mCurrentKey=keyIndex;
}
if (mDebouncer.isMinorTimeBounce()) {
mCurrentKey=mDebouncer.getLastKey();
touchX=mDebouncer.getLastCodeX();
touchY=mDebouncer.getLastCodeY();
}
showPreview(NOT_A_KEY);
if (!wasInKeyRepeat && !mMiniKeyboardOnScreen && !mAbortKey) {
detectAndSendKey(mCurrentKey,touchX,touchY,eventTime);
}
invalidateKey(keyIndex);
break;
case MotionEvent.ACTION_CANCEL:
mHandler.cancelKeyTimers();
mHandler.cancelPopupPreview();
dismissPopupKeyboard();
mAbortKey=true;
showPreview(NOT_A_KEY);
invalidateKey(mCurrentKey);
break;
}
mDebouncer.updateMoveDebouncing(touchX,touchY);
return true;
}",0.9866666666666668
88301,"@Override public boolean onTouchEvent(MotionEvent me){
  final int pointerCount=me.getPointerCount();
  final int action=me.getAction();
  boolean result=false;
  final long now=me.getEventTime();
  if (pointerCount > 1 && mOldPointerCount > 1) {
    return true;
  }
  if (action == MotionEvent.ACTION_DOWN)   mSwipeTracker.clear();
  mSwipeTracker.addMovement(me);
  if (mAbortKey && action != MotionEvent.ACTION_DOWN && action != MotionEvent.ACTION_CANCEL) {
    return true;
  }
  mCancelGestureDetector=(pointerCount > 1);
  if (mGestureDetector.onTouchEvent(me)) {
    showPreview(NOT_A_KEY);
    mHandler.cancelKeyTimers();
    return true;
  }
  if (mMiniKeyboardOnScreen && action != MotionEvent.ACTION_CANCEL) {
    return true;
  }
  if (mHandler.isInKeyRepeat()) {
    if (pointerCount == 1 && action == MotionEvent.ACTION_MOVE) {
      return true;
    }
 else {
      mHandler.cancelKeyRepeatTimer();
    }
  }
  if (pointerCount != mOldPointerCount) {
    if (pointerCount == 1) {
      MotionEvent down=MotionEvent.obtain(now,now,MotionEvent.ACTION_DOWN,me.getX(),me.getY(),me.getMetaState());
      result=onModifiedTouchEvent(down);
      down.recycle();
      if (action == MotionEvent.ACTION_UP) {
        result=onModifiedTouchEvent(me);
      }
    }
 else {
      MotionEvent up=MotionEvent.obtain(now,now,MotionEvent.ACTION_UP,mOldPointerX,mOldPointerY,me.getMetaState());
      result=onModifiedTouchEvent(up);
      up.recycle();
    }
    mOldPointerCount=pointerCount;
  }
 else {
    if (pointerCount == 1) {
      result=onModifiedTouchEvent(me);
      mOldPointerX=me.getX();
      mOldPointerY=me.getY();
    }
  }
  return result;
}","@Override public boolean onTouchEvent(MotionEvent me){
  final int pointerCount=me.getPointerCount();
  final int action=me.getAction();
  boolean result=false;
  final long now=me.getEventTime();
  if (pointerCount > 1 && mOldPointerCount > 1) {
    return true;
  }
  if (action == MotionEvent.ACTION_DOWN)   mSwipeTracker.clear();
  mSwipeTracker.addMovement(me);
  if (mAbortKey && action != MotionEvent.ACTION_DOWN && action != MotionEvent.ACTION_CANCEL) {
    return true;
  }
  mCancelGestureDetector=(pointerCount > 1);
  if (mGestureDetector.onTouchEvent(me)) {
    showPreview(NOT_A_KEY);
    mHandler.cancelKeyTimers();
    return true;
  }
  if (mMiniKeyboardOnScreen && action != MotionEvent.ACTION_CANCEL) {
    return true;
  }
  if (mHandler.isInKeyRepeat()) {
    if (pointerCount > 1) {
      mHandler.cancelKeyRepeatTimer();
    }
 else     if (action == MotionEvent.ACTION_MOVE) {
      return true;
    }
  }
  if (pointerCount != mOldPointerCount) {
    if (pointerCount == 1) {
      MotionEvent down=MotionEvent.obtain(now,now,MotionEvent.ACTION_DOWN,me.getX(),me.getY(),me.getMetaState());
      result=onModifiedTouchEvent(down);
      down.recycle();
      if (action == MotionEvent.ACTION_UP) {
        result=onModifiedTouchEvent(me);
      }
    }
 else {
      MotionEvent up=MotionEvent.obtain(now,now,MotionEvent.ACTION_UP,mOldPointerX,mOldPointerY,me.getMetaState());
      result=onModifiedTouchEvent(up);
      up.recycle();
    }
    mOldPointerCount=pointerCount;
  }
 else {
    if (pointerCount == 1) {
      result=onModifiedTouchEvent(me);
      mOldPointerX=me.getX();
      mOldPointerY=me.getY();
    }
  }
  return result;
}",0.9631184407796102
88302,"public boolean addWordToDictionary(String word){
  mUserDictionary.addWord(word,128);
  return true;
}","public boolean addWordToDictionary(String word){
  mUserDictionary.addWord(word,128);
  postUpdateSuggestions();
  return true;
}",0.8831168831168831
88303,"private void handleBackspace(){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    mVoiceInput.incrementTextModificationDeleteCount(mVoiceResults.candidates.get(0).toString().length());
    revertVoiceInput();
    return;
  }
  boolean deleteChar=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  if (mAfterVoiceInput) {
    if (mVoiceInput.getCursorPos() > 0) {
      int deleteLen=mVoiceInput.getSelectionSpan() > 0 ? mVoiceInput.getSelectionSpan() : 1;
      mVoiceInput.incrementTextModificationDeleteCount(deleteLen);
    }
  }
  if (mPredicting) {
    final int length=mComposing.length();
    if (length > 0) {
      mComposing.delete(length - 1,length);
      mWord.deleteLast();
      ic.setComposingText(mComposing,1);
      if (mComposing.length() == 0) {
        mPredicting=false;
      }
      postUpdateSuggestions();
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    deleteChar=true;
  }
  postUpdateShiftKeyState();
  TextEntryState.backspace();
  if (TextEntryState.getState() == TextEntryState.STATE_UNDO_COMMIT) {
    revertLastWord(deleteChar);
    return;
  }
 else   if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
  }
 else   if (deleteChar) {
    sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
    if (mDeleteCount > DELETE_ACCELERATE_AT) {
      sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
    }
  }
  mJustRevertedSeparator=null;
}","private void handleBackspace(){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    mVoiceInput.incrementTextModificationDeleteCount(mVoiceResults.candidates.get(0).toString().length());
    revertVoiceInput();
    return;
  }
  boolean deleteChar=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  if (mAfterVoiceInput) {
    if (mVoiceInput.getCursorPos() > 0) {
      int deleteLen=mVoiceInput.getSelectionSpan() > 0 ? mVoiceInput.getSelectionSpan() : 1;
      mVoiceInput.incrementTextModificationDeleteCount(deleteLen);
    }
  }
  if (mPredicting) {
    final int length=mComposing.length();
    if (length > 0) {
      mComposing.delete(length - 1,length);
      mWord.deleteLast();
      ic.setComposingText(mComposing,1);
      if (mComposing.length() == 0) {
        mPredicting=false;
      }
      postUpdateSuggestions();
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    deleteChar=true;
  }
  postUpdateShiftKeyState();
  TextEntryState.backspace();
  if (TextEntryState.getState() == TextEntryState.STATE_UNDO_COMMIT) {
    revertLastWord(deleteChar);
    return;
  }
 else   if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
  }
 else   if (deleteChar) {
    if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
      revertLastWord(deleteChar);
    }
 else {
      sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
      }
    }
  }
  mJustRevertedSeparator=null;
}",0.9543568464730292
88304,"private void handleSeparator(int primaryCode){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    commitVoiceInput();
  }
  if (mAfterVoiceInput) {
    mVoiceInput.incrementTextModificationInsertPunctuationCount(1);
  }
  boolean pickedDefault=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mPredicting) {
    if (mAutoCorrectOn && primaryCode != '\'' && (mJustRevertedSeparator == null || mJustRevertedSeparator.length() == 0 || mJustRevertedSeparator.charAt(0) != primaryCode)) {
      pickDefaultSuggestion();
      pickedDefault=true;
      if (primaryCode == KEYCODE_SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
    }
  }
  if (mJustAddedAutoSpace && primaryCode == KEYCODE_ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  sendKeyChar((char)primaryCode);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode == KEYCODE_PERIOD) {
    reswapPeriodAndSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode != KEYCODE_ENTER) {
    swapPunctuationAndSpace();
  }
 else   if (isPredictionOn() && primaryCode == KEYCODE_SPACE) {
    doubleSpace();
  }
  if (pickedDefault && mBestWord != null) {
    TextEntryState.acceptedDefault(mWord.getTypedWord(),mBestWord);
  }
  updateShiftKeyState(getCurrentInputEditorInfo());
  if (ic != null) {
    ic.endBatchEdit();
  }
}","private void handleSeparator(int primaryCode){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    commitVoiceInput();
  }
  if (mAfterVoiceInput) {
    mVoiceInput.incrementTextModificationInsertPunctuationCount(1);
  }
  if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
    postUpdateSuggestions();
  }
  boolean pickedDefault=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mPredicting) {
    if (mAutoCorrectOn && primaryCode != '\'' && (mJustRevertedSeparator == null || mJustRevertedSeparator.length() == 0 || mJustRevertedSeparator.charAt(0) != primaryCode)) {
      pickDefaultSuggestion();
      pickedDefault=true;
      if (primaryCode == KEYCODE_SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
    }
  }
  if (mJustAddedAutoSpace && primaryCode == KEYCODE_ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  sendKeyChar((char)primaryCode);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode == KEYCODE_PERIOD) {
    reswapPeriodAndSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode != KEYCODE_ENTER) {
    swapPunctuationAndSpace();
  }
 else   if (isPredictionOn() && primaryCode == KEYCODE_SPACE) {
    doubleSpace();
  }
  if (pickedDefault && mBestWord != null) {
    TextEntryState.acceptedDefault(mWord.getTypedWord(),mBestWord);
  }
  updateShiftKeyState(getCurrentInputEditorInfo());
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9653465346534652
88305,"@Override public void onCreate(){
  LatinImeLogger.init(this);
  super.onCreate();
  mResources=getResources();
  final Configuration conf=mResources.getConfiguration();
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mLanguageSwitcher=new LanguageSwitcher(this);
  mLanguageSwitcher.loadLocales(prefs);
  mKeyboardSwitcher=new KeyboardSwitcher(this,this);
  mKeyboardSwitcher.setLanguageSwitcher(mLanguageSwitcher);
  mSystemLocale=conf.locale.toString();
  mLanguageSwitcher.setSystemLocale(conf.locale);
  String inputLanguage=mLanguageSwitcher.getInputLanguage();
  if (inputLanguage == null) {
    inputLanguage=conf.locale.toString();
  }
  LatinIMEUtil.GCUtils.getInstance().reset();
  boolean tryGC=true;
  for (int i=0; i < LatinIMEUtil.GCUtils.GC_TRY_LOOP_MAX && tryGC; ++i) {
    try {
      initSuggest(inputLanguage);
      tryGC=false;
    }
 catch (    OutOfMemoryError e) {
      tryGC=LatinIMEUtil.GCUtils.getInstance().tryGCOrWait(inputLanguage,e);
    }
  }
  mOrientation=conf.orientation;
  initSuggestPuncList();
  IntentFilter filter=new IntentFilter(AudioManager.RINGER_MODE_CHANGED_ACTION);
  registerReceiver(mReceiver,filter);
  if (VOICE_INSTALLED) {
    mVoiceInput=new VoiceInput(this,this);
    mHints=new Hints(this,new Hints.Display(){
      public void showHint(      int viewResource){
        LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View view=inflater.inflate(viewResource,null);
        setCandidatesView(view);
        setCandidatesViewShown(true);
        mIsShowingHint=true;
      }
    }
);
  }
  prefs.registerOnSharedPreferenceChangeListener(this);
}","@Override public void onCreate(){
  LatinImeLogger.init(this);
  super.onCreate();
  mResources=getResources();
  final Configuration conf=mResources.getConfiguration();
  PreferenceManager.setDefaultValues(this,R.xml.prefs,false);
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mLanguageSwitcher=new LanguageSwitcher(this);
  mLanguageSwitcher.loadLocales(prefs);
  mKeyboardSwitcher=new KeyboardSwitcher(this,this);
  mKeyboardSwitcher.setLanguageSwitcher(mLanguageSwitcher);
  mSystemLocale=conf.locale.toString();
  mLanguageSwitcher.setSystemLocale(conf.locale);
  String inputLanguage=mLanguageSwitcher.getInputLanguage();
  if (inputLanguage == null) {
    inputLanguage=conf.locale.toString();
  }
  LatinIMEUtil.GCUtils.getInstance().reset();
  boolean tryGC=true;
  for (int i=0; i < LatinIMEUtil.GCUtils.GC_TRY_LOOP_MAX && tryGC; ++i) {
    try {
      initSuggest(inputLanguage);
      tryGC=false;
    }
 catch (    OutOfMemoryError e) {
      tryGC=LatinIMEUtil.GCUtils.getInstance().tryGCOrWait(inputLanguage,e);
    }
  }
  mOrientation=conf.orientation;
  initSuggestPuncList();
  IntentFilter filter=new IntentFilter(AudioManager.RINGER_MODE_CHANGED_ACTION);
  registerReceiver(mReceiver,filter);
  if (VOICE_INSTALLED) {
    mVoiceInput=new VoiceInput(this,this);
    mHints=new Hints(this,new Hints.Display(){
      public void showHint(      int viewResource){
        LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View view=inflater.inflate(viewResource,null);
        setCandidatesView(view);
        setCandidatesViewShown(true);
        mIsShowingHint=true;
      }
    }
);
  }
  prefs.registerOnSharedPreferenceChangeListener(this);
}",0.9820081253627394
88306,"void setKeyboardMode(int mode,int imeOptions,boolean enableVoice,boolean isSymbols){
  if (mInputView == null)   return;
  mMode=mode;
  mImeOptions=imeOptions;
  if (enableVoice != mHasVoice) {
    setVoiceMode(mHasVoice,mVoiceOnPrimary);
  }
  mIsSymbols=isSymbols;
  mInputView.setPreviewEnabled(true);
  KeyboardId id=getKeyboardId(mode,imeOptions,isSymbols);
  LatinKeyboard keyboard=null;
  keyboard=getKeyboard(id);
  if (mode == MODE_PHONE) {
    mInputView.setPhoneKeyboard(keyboard);
    mInputView.setPreviewEnabled(false);
  }
  mCurrentId=id;
  mInputView.setKeyboard(keyboard);
  keyboard.setShifted(false);
  keyboard.setShiftLocked(keyboard.isShiftLocked());
  keyboard.setImeOptions(mContext.getResources(),mMode,imeOptions);
  keyboard.setBlackFlag(isBlackSym());
}","void setKeyboardMode(int mode,int imeOptions,boolean enableVoice,boolean isSymbols){
  if (mInputView == null)   return;
  mMode=mode;
  mImeOptions=imeOptions;
  if (enableVoice != mHasVoice) {
    setVoiceMode(mHasVoice,mVoiceOnPrimary);
  }
  mIsSymbols=isSymbols;
  mInputView.setPreviewEnabled(mInputMethodService.getPopupOn());
  KeyboardId id=getKeyboardId(mode,imeOptions,isSymbols);
  LatinKeyboard keyboard=null;
  keyboard=getKeyboard(id);
  if (mode == MODE_PHONE) {
    mInputView.setPhoneKeyboard(keyboard);
    mInputView.setPreviewEnabled(false);
  }
  mCurrentId=id;
  mInputView.setKeyboard(keyboard);
  keyboard.setShifted(false);
  keyboard.setShiftLocked(keyboard.isShiftLocked());
  keyboard.setImeOptions(mContext.getResources(),mMode,imeOptions);
  keyboard.setBlackFlag(isBlackSym());
}",0.9774153074027604
88307,"private void loadSettings(){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  mVibrateOn=sp.getBoolean(PREF_VIBRATE_ON,false);
  mSoundOn=sp.getBoolean(PREF_SOUND_ON,false);
  mPopupOn=sp.getBoolean(PREF_POPUP_ON,true);
  mAutoCap=sp.getBoolean(PREF_AUTO_CAP,true);
  mQuickFixes=sp.getBoolean(PREF_QUICK_FIXES,true);
  mHasUsedVoiceInput=sp.getBoolean(PREF_HAS_USED_VOICE_INPUT,false);
  mHasUsedVoiceInputUnsupportedLocale=sp.getBoolean(PREF_HAS_USED_VOICE_INPUT_UNSUPPORTED_LOCALE,false);
  String supportedLocalesString=SettingsUtil.getSettingsString(getContentResolver(),SettingsUtil.LATIN_IME_VOICE_INPUT_SUPPORTED_LOCALES,DEFAULT_VOICE_INPUT_SUPPORTED_LOCALES);
  ArrayList<String> voiceInputSupportedLocales=newArrayList(supportedLocalesString.split(""String_Node_Str""));
  mLocaleSupportedForVoiceInput=voiceInputSupportedLocales.contains(mInputLocale);
  mShowSuggestions=sp.getBoolean(PREF_SHOW_SUGGESTIONS,true);
  if (VOICE_INSTALLED) {
    final String voiceMode=sp.getString(PREF_VOICE_MODE,getString(R.string.voice_mode_main));
    boolean enableVoice=!voiceMode.equals(getString(R.string.voice_mode_off)) && mEnableVoiceButton;
    boolean voiceOnPrimary=voiceMode.equals(getString(R.string.voice_mode_main));
    if (mKeyboardSwitcher != null && (enableVoice != mEnableVoice || voiceOnPrimary != mVoiceOnPrimary)) {
      mKeyboardSwitcher.setVoiceMode(enableVoice,voiceOnPrimary);
    }
    mEnableVoice=enableVoice;
    mVoiceOnPrimary=voiceOnPrimary;
  }
  mAutoCorrectEnabled=sp.getBoolean(PREF_AUTO_COMPLETE,mResources.getBoolean(R.bool.enable_autocorrect)) & mShowSuggestions;
  mBigramSuggestionEnabled=sp.getBoolean(PREF_BIGRAM_SUGGESTIONS,true) & mShowSuggestions;
  updateCorrectionMode();
  updateAutoTextEnabled(mResources.getConfiguration().locale);
  mLanguageSwitcher.loadLocales(sp);
}","private void loadSettings(){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  mVibrateOn=sp.getBoolean(PREF_VIBRATE_ON,false);
  mSoundOn=sp.getBoolean(PREF_SOUND_ON,false);
  mPopupOn=sp.getBoolean(PREF_POPUP_ON,mResources.getBoolean(R.bool.default_popup_preview));
  mAutoCap=sp.getBoolean(PREF_AUTO_CAP,true);
  mQuickFixes=sp.getBoolean(PREF_QUICK_FIXES,true);
  mHasUsedVoiceInput=sp.getBoolean(PREF_HAS_USED_VOICE_INPUT,false);
  mHasUsedVoiceInputUnsupportedLocale=sp.getBoolean(PREF_HAS_USED_VOICE_INPUT_UNSUPPORTED_LOCALE,false);
  String supportedLocalesString=SettingsUtil.getSettingsString(getContentResolver(),SettingsUtil.LATIN_IME_VOICE_INPUT_SUPPORTED_LOCALES,DEFAULT_VOICE_INPUT_SUPPORTED_LOCALES);
  ArrayList<String> voiceInputSupportedLocales=newArrayList(supportedLocalesString.split(""String_Node_Str""));
  mLocaleSupportedForVoiceInput=voiceInputSupportedLocales.contains(mInputLocale);
  mShowSuggestions=sp.getBoolean(PREF_SHOW_SUGGESTIONS,true);
  if (VOICE_INSTALLED) {
    final String voiceMode=sp.getString(PREF_VOICE_MODE,getString(R.string.voice_mode_main));
    boolean enableVoice=!voiceMode.equals(getString(R.string.voice_mode_off)) && mEnableVoiceButton;
    boolean voiceOnPrimary=voiceMode.equals(getString(R.string.voice_mode_main));
    if (mKeyboardSwitcher != null && (enableVoice != mEnableVoice || voiceOnPrimary != mVoiceOnPrimary)) {
      mKeyboardSwitcher.setVoiceMode(enableVoice,voiceOnPrimary);
    }
    mEnableVoice=enableVoice;
    mVoiceOnPrimary=voiceOnPrimary;
  }
  mAutoCorrectEnabled=sp.getBoolean(PREF_AUTO_COMPLETE,mResources.getBoolean(R.bool.enable_autocorrect)) & mShowSuggestions;
  mBigramSuggestionEnabled=sp.getBoolean(PREF_BIGRAM_SUGGESTIONS,true) & mShowSuggestions;
  updateCorrectionMode();
  updateAutoTextEnabled(mResources.getConfiguration().locale);
  mLanguageSwitcher.loadLocales(sp);
}",0.9852980486500936
88308,"@Override public void onCreate(){
  LatinImeLogger.init(this);
  super.onCreate();
  mResources=getResources();
  final Configuration conf=mResources.getConfiguration();
  PreferenceManager.setDefaultValues(this,R.xml.prefs,false);
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mLanguageSwitcher=new LanguageSwitcher(this);
  mLanguageSwitcher.loadLocales(prefs);
  mKeyboardSwitcher=new KeyboardSwitcher(this,this);
  mKeyboardSwitcher.setLanguageSwitcher(mLanguageSwitcher);
  mSystemLocale=conf.locale.toString();
  mLanguageSwitcher.setSystemLocale(conf.locale);
  String inputLanguage=mLanguageSwitcher.getInputLanguage();
  if (inputLanguage == null) {
    inputLanguage=conf.locale.toString();
  }
  LatinIMEUtil.GCUtils.getInstance().reset();
  boolean tryGC=true;
  for (int i=0; i < LatinIMEUtil.GCUtils.GC_TRY_LOOP_MAX && tryGC; ++i) {
    try {
      initSuggest(inputLanguage);
      tryGC=false;
    }
 catch (    OutOfMemoryError e) {
      tryGC=LatinIMEUtil.GCUtils.getInstance().tryGCOrWait(inputLanguage,e);
    }
  }
  mOrientation=conf.orientation;
  initSuggestPuncList();
  IntentFilter filter=new IntentFilter(AudioManager.RINGER_MODE_CHANGED_ACTION);
  registerReceiver(mReceiver,filter);
  if (VOICE_INSTALLED) {
    mVoiceInput=new VoiceInput(this,this);
    mHints=new Hints(this,new Hints.Display(){
      public void showHint(      int viewResource){
        LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View view=inflater.inflate(viewResource,null);
        setCandidatesView(view);
        setCandidatesViewShown(true);
        mIsShowingHint=true;
      }
    }
);
  }
  prefs.registerOnSharedPreferenceChangeListener(this);
}","@Override public void onCreate(){
  LatinImeLogger.init(this);
  super.onCreate();
  mResources=getResources();
  final Configuration conf=mResources.getConfiguration();
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mLanguageSwitcher=new LanguageSwitcher(this);
  mLanguageSwitcher.loadLocales(prefs);
  mKeyboardSwitcher=new KeyboardSwitcher(this,this);
  mKeyboardSwitcher.setLanguageSwitcher(mLanguageSwitcher);
  mSystemLocale=conf.locale.toString();
  mLanguageSwitcher.setSystemLocale(conf.locale);
  String inputLanguage=mLanguageSwitcher.getInputLanguage();
  if (inputLanguage == null) {
    inputLanguage=conf.locale.toString();
  }
  LatinIMEUtil.GCUtils.getInstance().reset();
  boolean tryGC=true;
  for (int i=0; i < LatinIMEUtil.GCUtils.GC_TRY_LOOP_MAX && tryGC; ++i) {
    try {
      initSuggest(inputLanguage);
      tryGC=false;
    }
 catch (    OutOfMemoryError e) {
      tryGC=LatinIMEUtil.GCUtils.getInstance().tryGCOrWait(inputLanguage,e);
    }
  }
  mOrientation=conf.orientation;
  initSuggestPuncList();
  IntentFilter filter=new IntentFilter(AudioManager.RINGER_MODE_CHANGED_ACTION);
  registerReceiver(mReceiver,filter);
  if (VOICE_INSTALLED) {
    mVoiceInput=new VoiceInput(this,this);
    mHints=new Hints(this,new Hints.Display(){
      public void showHint(      int viewResource){
        LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View view=inflater.inflate(viewResource,null);
        setCandidatesView(view);
        setCandidatesViewShown(true);
        mIsShowingHint=true;
      }
    }
);
  }
  prefs.registerOnSharedPreferenceChangeListener(this);
}",0.9820081253627394
88309,"public boolean addWordToDictionary(String word){
  mUserDictionary.addWord(word,128);
  return true;
}","public boolean addWordToDictionary(String word){
  mUserDictionary.addWord(word,128);
  postUpdateSuggestions();
  return true;
}",0.8831168831168831
88310,"private void handleBackspace(){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    mVoiceInput.incrementTextModificationDeleteCount(mVoiceResults.candidates.get(0).toString().length());
    revertVoiceInput();
    return;
  }
  boolean deleteChar=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  if (mAfterVoiceInput) {
    if (mVoiceInput.getCursorPos() > 0) {
      int deleteLen=mVoiceInput.getSelectionSpan() > 0 ? mVoiceInput.getSelectionSpan() : 1;
      mVoiceInput.incrementTextModificationDeleteCount(deleteLen);
    }
  }
  if (mPredicting) {
    final int length=mComposing.length();
    if (length > 0) {
      mComposing.delete(length - 1,length);
      mWord.deleteLast();
      ic.setComposingText(mComposing,1);
      if (mComposing.length() == 0) {
        mPredicting=false;
      }
      postUpdateSuggestions();
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    deleteChar=true;
  }
  postUpdateShiftKeyState();
  TextEntryState.backspace();
  if (TextEntryState.getState() == TextEntryState.STATE_UNDO_COMMIT) {
    revertLastWord(deleteChar);
    return;
  }
 else   if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
  }
 else   if (deleteChar) {
    sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
    if (mDeleteCount > DELETE_ACCELERATE_AT) {
      sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
    }
  }
  mJustRevertedSeparator=null;
}","private void handleBackspace(){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    mVoiceInput.incrementTextModificationDeleteCount(mVoiceResults.candidates.get(0).toString().length());
    revertVoiceInput();
    return;
  }
  boolean deleteChar=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  if (mAfterVoiceInput) {
    if (mVoiceInput.getCursorPos() > 0) {
      int deleteLen=mVoiceInput.getSelectionSpan() > 0 ? mVoiceInput.getSelectionSpan() : 1;
      mVoiceInput.incrementTextModificationDeleteCount(deleteLen);
    }
  }
  if (mPredicting) {
    final int length=mComposing.length();
    if (length > 0) {
      mComposing.delete(length - 1,length);
      mWord.deleteLast();
      ic.setComposingText(mComposing,1);
      if (mComposing.length() == 0) {
        mPredicting=false;
      }
      postUpdateSuggestions();
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    deleteChar=true;
  }
  postUpdateShiftKeyState();
  TextEntryState.backspace();
  if (TextEntryState.getState() == TextEntryState.STATE_UNDO_COMMIT) {
    revertLastWord(deleteChar);
    return;
  }
 else   if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
  }
 else   if (deleteChar) {
    if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
      revertLastWord(deleteChar);
    }
 else {
      sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
      }
    }
  }
  mJustRevertedSeparator=null;
}",0.9543568464730292
88311,"private void handleSeparator(int primaryCode){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    commitVoiceInput();
  }
  if (mAfterVoiceInput) {
    mVoiceInput.incrementTextModificationInsertPunctuationCount(1);
  }
  boolean pickedDefault=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mPredicting) {
    if (mAutoCorrectOn && primaryCode != '\'' && (mJustRevertedSeparator == null || mJustRevertedSeparator.length() == 0 || mJustRevertedSeparator.charAt(0) != primaryCode)) {
      pickDefaultSuggestion();
      pickedDefault=true;
      if (primaryCode == KEYCODE_SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
    }
  }
  if (mJustAddedAutoSpace && primaryCode == KEYCODE_ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  sendKeyChar((char)primaryCode);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode == KEYCODE_PERIOD) {
    reswapPeriodAndSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode != KEYCODE_ENTER) {
    swapPunctuationAndSpace();
  }
 else   if (isPredictionOn() && primaryCode == KEYCODE_SPACE) {
    doubleSpace();
  }
  if (pickedDefault && mBestWord != null) {
    TextEntryState.acceptedDefault(mWord.getTypedWord(),mBestWord);
  }
  updateShiftKeyState(getCurrentInputEditorInfo());
  if (ic != null) {
    ic.endBatchEdit();
  }
}","private void handleSeparator(int primaryCode){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    commitVoiceInput();
  }
  if (mAfterVoiceInput) {
    mVoiceInput.incrementTextModificationInsertPunctuationCount(1);
  }
  if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
    postUpdateSuggestions();
  }
  boolean pickedDefault=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mPredicting) {
    if (mAutoCorrectOn && primaryCode != '\'' && (mJustRevertedSeparator == null || mJustRevertedSeparator.length() == 0 || mJustRevertedSeparator.charAt(0) != primaryCode)) {
      pickDefaultSuggestion();
      pickedDefault=true;
      if (primaryCode == KEYCODE_SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
    }
  }
  if (mJustAddedAutoSpace && primaryCode == KEYCODE_ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  sendKeyChar((char)primaryCode);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode == KEYCODE_PERIOD) {
    reswapPeriodAndSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode != KEYCODE_ENTER) {
    swapPunctuationAndSpace();
  }
 else   if (isPredictionOn() && primaryCode == KEYCODE_SPACE) {
    doubleSpace();
  }
  if (pickedDefault && mBestWord != null) {
    TextEntryState.acceptedDefault(mWord.getTypedWord(),mBestWord);
  }
  updateShiftKeyState(getCurrentInputEditorInfo());
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9653465346534652
88312,"public boolean addWordToDictionary(String word){
  mUserDictionary.addWord(word,128);
  return true;
}","public boolean addWordToDictionary(String word){
  mUserDictionary.addWord(word,128);
  postUpdateSuggestions();
  return true;
}",0.8831168831168831
88313,"private void handleBackspace(){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    mVoiceInput.incrementTextModificationDeleteCount(mVoiceResults.candidates.get(0).toString().length());
    revertVoiceInput();
    return;
  }
  boolean deleteChar=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  if (mAfterVoiceInput) {
    if (mVoiceInput.getCursorPos() > 0) {
      int deleteLen=mVoiceInput.getSelectionSpan() > 0 ? mVoiceInput.getSelectionSpan() : 1;
      mVoiceInput.incrementTextModificationDeleteCount(deleteLen);
    }
  }
  if (mPredicting) {
    final int length=mComposing.length();
    if (length > 0) {
      mComposing.delete(length - 1,length);
      mWord.deleteLast();
      ic.setComposingText(mComposing,1);
      if (mComposing.length() == 0) {
        mPredicting=false;
      }
      postUpdateSuggestions();
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    deleteChar=true;
  }
  postUpdateShiftKeyState();
  TextEntryState.backspace();
  if (TextEntryState.getState() == TextEntryState.STATE_UNDO_COMMIT) {
    revertLastWord(deleteChar);
    ic.endBatchEdit();
    return;
  }
 else   if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
  }
 else   if (deleteChar) {
    sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
    if (mDeleteCount > DELETE_ACCELERATE_AT) {
      sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
    }
  }
  mJustRevertedSeparator=null;
  ic.endBatchEdit();
}","private void handleBackspace(){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    mVoiceInput.incrementTextModificationDeleteCount(mVoiceResults.candidates.get(0).toString().length());
    revertVoiceInput();
    return;
  }
  boolean deleteChar=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  if (mAfterVoiceInput) {
    if (mVoiceInput.getCursorPos() > 0) {
      int deleteLen=mVoiceInput.getSelectionSpan() > 0 ? mVoiceInput.getSelectionSpan() : 1;
      mVoiceInput.incrementTextModificationDeleteCount(deleteLen);
    }
  }
  if (mPredicting) {
    final int length=mComposing.length();
    if (length > 0) {
      mComposing.delete(length - 1,length);
      mWord.deleteLast();
      ic.setComposingText(mComposing,1);
      if (mComposing.length() == 0) {
        mPredicting=false;
      }
      postUpdateSuggestions();
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    deleteChar=true;
  }
  postUpdateShiftKeyState();
  TextEntryState.backspace();
  if (TextEntryState.getState() == TextEntryState.STATE_UNDO_COMMIT) {
    revertLastWord(deleteChar);
    ic.endBatchEdit();
    return;
  }
 else   if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
  }
 else   if (deleteChar) {
    if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
      revertLastWord(deleteChar);
    }
 else {
      sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
      }
    }
  }
  mJustRevertedSeparator=null;
  ic.endBatchEdit();
}",0.9562289562289562
88314,"private void handleSeparator(int primaryCode){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    commitVoiceInput();
  }
  if (mAfterVoiceInput) {
    mVoiceInput.incrementTextModificationInsertPunctuationCount(1);
  }
  boolean pickedDefault=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
    abortCorrection(false);
  }
  if (mPredicting) {
    if (mAutoCorrectOn && primaryCode != '\'' && (mJustRevertedSeparator == null || mJustRevertedSeparator.length() == 0 || mJustRevertedSeparator.charAt(0) != primaryCode)) {
      pickedDefault=pickDefaultSuggestion();
      if (primaryCode == KEYCODE_SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
    }
  }
  if (mJustAddedAutoSpace && primaryCode == KEYCODE_ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  sendKeyChar((char)primaryCode);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode == KEYCODE_PERIOD) {
    reswapPeriodAndSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode != KEYCODE_ENTER) {
    swapPunctuationAndSpace();
  }
 else   if (isPredictionOn() && primaryCode == KEYCODE_SPACE) {
    doubleSpace();
  }
  if (pickedDefault) {
    TextEntryState.backToAcceptedDefault(mWord.getTypedWord());
  }
  updateShiftKeyState(getCurrentInputEditorInfo());
  if (ic != null) {
    ic.endBatchEdit();
  }
}","private void handleSeparator(int primaryCode){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    commitVoiceInput();
  }
  if (mAfterVoiceInput) {
    mVoiceInput.incrementTextModificationInsertPunctuationCount(1);
  }
  if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
    postUpdateSuggestions();
  }
  boolean pickedDefault=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
    abortCorrection(false);
  }
  if (mPredicting) {
    if (mAutoCorrectOn && primaryCode != '\'' && (mJustRevertedSeparator == null || mJustRevertedSeparator.length() == 0 || mJustRevertedSeparator.charAt(0) != primaryCode)) {
      pickedDefault=pickDefaultSuggestion();
      if (primaryCode == KEYCODE_SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
    }
  }
  if (mJustAddedAutoSpace && primaryCode == KEYCODE_ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  sendKeyChar((char)primaryCode);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode == KEYCODE_PERIOD) {
    reswapPeriodAndSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode != KEYCODE_ENTER) {
    swapPunctuationAndSpace();
  }
 else   if (isPredictionOn() && primaryCode == KEYCODE_SPACE) {
    doubleSpace();
  }
  if (pickedDefault) {
    TextEntryState.backToAcceptedDefault(mWord.getTypedWord());
  }
  updateShiftKeyState(getCurrentInputEditorInfo());
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9651524579962664
88315,"public boolean addWordToDictionary(String word){
  mUserDictionary.addWord(word,128);
  return true;
}","public boolean addWordToDictionary(String word){
  mUserDictionary.addWord(word,128);
  postUpdateSuggestions();
  return true;
}",0.8831168831168831
88316,"private void handleBackspace(){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    mVoiceInput.incrementTextModificationDeleteCount(mVoiceResults.candidates.get(0).toString().length());
    revertVoiceInput();
    return;
  }
  boolean deleteChar=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  if (mAfterVoiceInput) {
    if (mVoiceInput.getCursorPos() > 0) {
      int deleteLen=mVoiceInput.getSelectionSpan() > 0 ? mVoiceInput.getSelectionSpan() : 1;
      mVoiceInput.incrementTextModificationDeleteCount(deleteLen);
    }
  }
  if (mPredicting) {
    final int length=mComposing.length();
    if (length > 0) {
      mComposing.delete(length - 1,length);
      mWord.deleteLast();
      ic.setComposingText(mComposing,1);
      if (mComposing.length() == 0) {
        mPredicting=false;
      }
      postUpdateSuggestions();
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    deleteChar=true;
  }
  postUpdateShiftKeyState();
  TextEntryState.backspace();
  if (TextEntryState.getState() == TextEntryState.STATE_UNDO_COMMIT) {
    revertLastWord(deleteChar);
    return;
  }
 else   if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
  }
 else   if (deleteChar) {
    sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
    if (mDeleteCount > DELETE_ACCELERATE_AT) {
      sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
    }
  }
  mJustRevertedSeparator=null;
}","private void handleBackspace(){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    mVoiceInput.incrementTextModificationDeleteCount(mVoiceResults.candidates.get(0).toString().length());
    revertVoiceInput();
    return;
  }
  boolean deleteChar=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  if (mAfterVoiceInput) {
    if (mVoiceInput.getCursorPos() > 0) {
      int deleteLen=mVoiceInput.getSelectionSpan() > 0 ? mVoiceInput.getSelectionSpan() : 1;
      mVoiceInput.incrementTextModificationDeleteCount(deleteLen);
    }
  }
  if (mPredicting) {
    final int length=mComposing.length();
    if (length > 0) {
      mComposing.delete(length - 1,length);
      mWord.deleteLast();
      ic.setComposingText(mComposing,1);
      if (mComposing.length() == 0) {
        mPredicting=false;
      }
      postUpdateSuggestions();
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    deleteChar=true;
  }
  postUpdateShiftKeyState();
  TextEntryState.backspace();
  if (TextEntryState.getState() == TextEntryState.STATE_UNDO_COMMIT) {
    revertLastWord(deleteChar);
    return;
  }
 else   if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
  }
 else   if (deleteChar) {
    if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
      revertLastWord(deleteChar);
    }
 else {
      sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
      }
    }
  }
  mJustRevertedSeparator=null;
}",0.9543568464730292
88317,"private void handleSeparator(int primaryCode){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    commitVoiceInput();
  }
  if (mAfterVoiceInput) {
    mVoiceInput.incrementTextModificationInsertPunctuationCount(1);
  }
  boolean pickedDefault=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mPredicting) {
    if (mAutoCorrectOn && primaryCode != '\'' && (mJustRevertedSeparator == null || mJustRevertedSeparator.length() == 0 || mJustRevertedSeparator.charAt(0) != primaryCode)) {
      pickDefaultSuggestion();
      pickedDefault=true;
      if (primaryCode == KEYCODE_SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
    }
  }
  if (mJustAddedAutoSpace && primaryCode == KEYCODE_ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  sendKeyChar((char)primaryCode);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode == KEYCODE_PERIOD) {
    reswapPeriodAndSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode != KEYCODE_ENTER) {
    swapPunctuationAndSpace();
  }
 else   if (isPredictionOn() && primaryCode == KEYCODE_SPACE) {
    doubleSpace();
  }
  if (pickedDefault && mBestWord != null) {
    TextEntryState.acceptedDefault(mWord.getTypedWord(),mBestWord);
  }
  updateShiftKeyState(getCurrentInputEditorInfo());
  if (ic != null) {
    ic.endBatchEdit();
  }
}","private void handleSeparator(int primaryCode){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    commitVoiceInput();
  }
  if (mAfterVoiceInput) {
    mVoiceInput.incrementTextModificationInsertPunctuationCount(1);
  }
  if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
    postUpdateSuggestions();
  }
  boolean pickedDefault=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mPredicting) {
    if (mAutoCorrectOn && primaryCode != '\'' && (mJustRevertedSeparator == null || mJustRevertedSeparator.length() == 0 || mJustRevertedSeparator.charAt(0) != primaryCode)) {
      pickDefaultSuggestion();
      pickedDefault=true;
      if (primaryCode == KEYCODE_SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
    }
  }
  if (mJustAddedAutoSpace && primaryCode == KEYCODE_ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  sendKeyChar((char)primaryCode);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode == KEYCODE_PERIOD) {
    reswapPeriodAndSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode != KEYCODE_ENTER) {
    swapPunctuationAndSpace();
  }
 else   if (isPredictionOn() && primaryCode == KEYCODE_SPACE) {
    doubleSpace();
  }
  if (pickedDefault && mBestWord != null) {
    TextEntryState.acceptedDefault(mWord.getTypedWord(),mBestWord);
  }
  updateShiftKeyState(getCurrentInputEditorInfo());
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9653465346534652
88318,"public boolean addWordToDictionary(String word){
  mUserDictionary.addWord(word,128);
  return true;
}","public boolean addWordToDictionary(String word){
  mUserDictionary.addWord(word,128);
  postUpdateSuggestions();
  return true;
}",0.8831168831168831
88319,"private void handleBackspace(){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    mVoiceInput.incrementTextModificationDeleteCount(mVoiceResults.candidates.get(0).toString().length());
    revertVoiceInput();
    return;
  }
  boolean deleteChar=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  if (mAfterVoiceInput) {
    if (mVoiceInput.getCursorPos() > 0) {
      int deleteLen=mVoiceInput.getSelectionSpan() > 0 ? mVoiceInput.getSelectionSpan() : 1;
      mVoiceInput.incrementTextModificationDeleteCount(deleteLen);
    }
  }
  if (mPredicting) {
    final int length=mComposing.length();
    if (length > 0) {
      mComposing.delete(length - 1,length);
      mWord.deleteLast();
      ic.setComposingText(mComposing,1);
      if (mComposing.length() == 0) {
        mPredicting=false;
      }
      postUpdateSuggestions();
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    deleteChar=true;
  }
  postUpdateShiftKeyState();
  TextEntryState.backspace();
  if (TextEntryState.getState() == TextEntryState.STATE_UNDO_COMMIT) {
    revertLastWord(deleteChar);
    return;
  }
 else   if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
  }
 else   if (deleteChar) {
    sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
    if (mDeleteCount > DELETE_ACCELERATE_AT) {
      sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
    }
  }
  mJustRevertedSeparator=null;
}","private void handleBackspace(){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    mVoiceInput.incrementTextModificationDeleteCount(mVoiceResults.candidates.get(0).toString().length());
    revertVoiceInput();
    return;
  }
  boolean deleteChar=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  if (mAfterVoiceInput) {
    if (mVoiceInput.getCursorPos() > 0) {
      int deleteLen=mVoiceInput.getSelectionSpan() > 0 ? mVoiceInput.getSelectionSpan() : 1;
      mVoiceInput.incrementTextModificationDeleteCount(deleteLen);
    }
  }
  if (mPredicting) {
    final int length=mComposing.length();
    if (length > 0) {
      mComposing.delete(length - 1,length);
      mWord.deleteLast();
      ic.setComposingText(mComposing,1);
      if (mComposing.length() == 0) {
        mPredicting=false;
      }
      postUpdateSuggestions();
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    deleteChar=true;
  }
  postUpdateShiftKeyState();
  TextEntryState.backspace();
  if (TextEntryState.getState() == TextEntryState.STATE_UNDO_COMMIT) {
    revertLastWord(deleteChar);
    return;
  }
 else   if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
  }
 else   if (deleteChar) {
    if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
      revertLastWord(deleteChar);
    }
 else {
      sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
      if (mDeleteCount > DELETE_ACCELERATE_AT) {
        sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
      }
    }
  }
  mJustRevertedSeparator=null;
}",0.9543568464730292
88320,"private void handleSeparator(int primaryCode){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    commitVoiceInput();
  }
  if (mAfterVoiceInput) {
    mVoiceInput.incrementTextModificationInsertPunctuationCount(1);
  }
  boolean pickedDefault=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mPredicting) {
    if (mAutoCorrectOn && primaryCode != '\'' && (mJustRevertedSeparator == null || mJustRevertedSeparator.length() == 0 || mJustRevertedSeparator.charAt(0) != primaryCode)) {
      pickDefaultSuggestion();
      pickedDefault=true;
      if (primaryCode == KEYCODE_SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
    }
  }
  if (mJustAddedAutoSpace && primaryCode == KEYCODE_ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  sendKeyChar((char)primaryCode);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode == KEYCODE_PERIOD) {
    reswapPeriodAndSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode != KEYCODE_ENTER) {
    swapPunctuationAndSpace();
  }
 else   if (isPredictionOn() && primaryCode == KEYCODE_SPACE) {
    doubleSpace();
  }
  if (pickedDefault && mBestWord != null) {
    TextEntryState.acceptedDefault(mWord.getTypedWord(),mBestWord);
  }
  updateShiftKeyState(getCurrentInputEditorInfo());
  if (ic != null) {
    ic.endBatchEdit();
  }
}","private void handleSeparator(int primaryCode){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    commitVoiceInput();
  }
  if (mAfterVoiceInput) {
    mVoiceInput.incrementTextModificationInsertPunctuationCount(1);
  }
  if (mCandidateView != null && mCandidateView.dismissAddToDictionaryHint()) {
    postUpdateSuggestions();
  }
  boolean pickedDefault=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mPredicting) {
    if (mAutoCorrectOn && primaryCode != '\'' && (mJustRevertedSeparator == null || mJustRevertedSeparator.length() == 0 || mJustRevertedSeparator.charAt(0) != primaryCode)) {
      pickDefaultSuggestion();
      pickedDefault=true;
      if (primaryCode == KEYCODE_SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
    }
  }
  if (mJustAddedAutoSpace && primaryCode == KEYCODE_ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  sendKeyChar((char)primaryCode);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode == KEYCODE_PERIOD) {
    reswapPeriodAndSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode != KEYCODE_ENTER) {
    swapPunctuationAndSpace();
  }
 else   if (isPredictionOn() && primaryCode == KEYCODE_SPACE) {
    doubleSpace();
  }
  if (pickedDefault && mBestWord != null) {
    TextEntryState.acceptedDefault(mWord.getTypedWord(),mBestWord);
  }
  updateShiftKeyState(getCurrentInputEditorInfo());
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9653465346534652
88321,"private void underlineWord(CharSequence word,int left,int right){
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.deleteSurroundingText(left,right);
  ic.setComposingText(word,1);
  ic.setSelection(mLastSelectionStart,mLastSelectionStart);
}","private void underlineWord(CharSequence word,int left,int right){
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.finishComposingText();
  ic.deleteSurroundingText(left,right);
  ic.setComposingText(word,1);
  ic.setSelection(mLastSelectionStart,mLastSelectionStart);
}",0.9517241379310344
88322,"private void pickSuggestion(CharSequence suggestion){
  if (mCapsLock) {
    suggestion=suggestion.toString().toUpperCase();
  }
 else   if (preferCapitalization() || (mKeyboardSwitcher.isAlphabetMode() && mInputView.isShifted())) {
    suggestion=suggestion.toString().toUpperCase().charAt(0) + suggestion.subSequence(1,suggestion.length()).toString();
  }
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    rememberReplacedWord(suggestion);
    if (mSuggestionShouldReplaceCurrentWord) {
      EditingUtil.deleteWordAtCursor(ic,getWordSeparators());
    }
    if (!VoiceInput.DELETE_SYMBOL.equals(suggestion)) {
      ic.commitText(suggestion,1);
    }
  }
  saveWordInHistory(suggestion);
  mPredicting=false;
  mCommittedLength=suggestion.length();
  ((LatinKeyboard)mInputView.getKeyboard()).setPreferredLetters(null);
  setNextSuggestions();
  updateShiftKeyState(getCurrentInputEditorInfo());
}","private void pickSuggestion(CharSequence suggestion){
  if (mCapsLock) {
    suggestion=suggestion.toString().toUpperCase();
  }
 else   if (preferCapitalization() || (mKeyboardSwitcher.isAlphabetMode() && mInputView.isShifted())) {
    suggestion=suggestion.toString().toUpperCase().charAt(0) + suggestion.subSequence(1,suggestion.length()).toString();
  }
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    rememberReplacedWord(suggestion);
    if (!VoiceInput.DELETE_SYMBOL.equals(suggestion)) {
      ic.commitText(suggestion,1);
    }
  }
  saveWordInHistory(suggestion);
  mPredicting=false;
  mCommittedLength=suggestion.length();
  ((LatinKeyboard)mInputView.getKeyboard()).setPreferredLetters(null);
  setNextSuggestions();
  updateShiftKeyState(getCurrentInputEditorInfo());
}",0.9336410848240048
88323,"private void saveWordInHistory(CharSequence result){
  if (mWord.size() <= 1) {
    mWord.reset();
    return;
  }
  TypedWordAlternatives entry=new TypedWordAlternatives(result,mWord);
  mWord=new WordComposer(mWord);
  mWordHistory.add(entry);
}","private void saveWordInHistory(CharSequence result){
  if (mWord.size() <= 1) {
    mWord.reset();
    return;
  }
  final String resultCopy=result.toString();
  TypedWordAlternatives entry=new TypedWordAlternatives(resultCopy,new WordComposer(mWord));
  mWordHistory.add(entry);
}",0.875
88324,"private void handleBackspace(){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    mVoiceInput.incrementTextModificationDeleteCount(mVoiceResults.candidates.get(0).toString().length());
    revertVoiceInput();
    return;
  }
  boolean deleteChar=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  if (mAfterVoiceInput) {
    if (mVoiceInput.getCursorPos() > 0) {
      int deleteLen=mVoiceInput.getSelectionSpan() > 0 ? mVoiceInput.getSelectionSpan() : 1;
      mVoiceInput.incrementTextModificationDeleteCount(deleteLen);
    }
  }
  if (mPredicting) {
    final int length=mComposing.length();
    if (length > 0) {
      mComposing.delete(length - 1,length);
      mWord.deleteLast();
      ic.setComposingText(mComposing,1);
      if (mComposing.length() == 0) {
        mPredicting=false;
      }
      postUpdateSuggestions();
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    deleteChar=true;
  }
  postUpdateShiftKeyState();
  TextEntryState.backspace();
  if (TextEntryState.getState() == TextEntryState.STATE_UNDO_COMMIT) {
    revertLastWord(deleteChar);
    return;
  }
 else   if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
  }
 else   if (deleteChar) {
    sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
    if (mDeleteCount > DELETE_ACCELERATE_AT) {
      sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
    }
  }
  mJustRevertedSeparator=null;
}","private void handleBackspace(){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    mVoiceInput.incrementTextModificationDeleteCount(mVoiceResults.candidates.get(0).toString().length());
    revertVoiceInput();
    return;
  }
  boolean deleteChar=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  if (mAfterVoiceInput) {
    if (mVoiceInput.getCursorPos() > 0) {
      int deleteLen=mVoiceInput.getSelectionSpan() > 0 ? mVoiceInput.getSelectionSpan() : 1;
      mVoiceInput.incrementTextModificationDeleteCount(deleteLen);
    }
  }
  if (mPredicting) {
    final int length=mComposing.length();
    if (length > 0) {
      mComposing.delete(length - 1,length);
      mWord.deleteLast();
      ic.setComposingText(mComposing,1);
      if (mComposing.length() == 0) {
        mPredicting=false;
      }
      postUpdateSuggestions();
    }
 else {
      ic.deleteSurroundingText(1,0);
    }
  }
 else {
    deleteChar=true;
  }
  postUpdateShiftKeyState();
  TextEntryState.backspace();
  if (TextEntryState.getState() == TextEntryState.STATE_UNDO_COMMIT) {
    revertLastWord(deleteChar);
    ic.endBatchEdit();
    return;
  }
 else   if (mEnteredText != null && sameAsTextBeforeCursor(ic,mEnteredText)) {
    ic.deleteSurroundingText(mEnteredText.length(),0);
  }
 else   if (deleteChar) {
    sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
    if (mDeleteCount > DELETE_ACCELERATE_AT) {
      sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
    }
  }
  mJustRevertedSeparator=null;
  ic.endBatchEdit();
}",0.978083087994766
88325,"private void rememberReplacedWord(CharSequence suggestion){
  if (mShowingVoiceSuggestions) {
    InputConnection ic=getCurrentInputConnection();
    EditingUtil.Range range=new EditingUtil.Range();
    String wordToBeReplaced=EditingUtil.getWordAtCursor(getCurrentInputConnection(),mWordSeparators,range).trim();
    if (!mWordToSuggestions.containsKey(wordToBeReplaced)) {
      wordToBeReplaced=wordToBeReplaced.toLowerCase();
    }
    if (mWordToSuggestions.containsKey(wordToBeReplaced)) {
      List<CharSequence> suggestions=mWordToSuggestions.get(wordToBeReplaced);
      if (suggestions.contains(suggestion)) {
        suggestions.remove(suggestion);
      }
      suggestions.add(wordToBeReplaced);
      mWordToSuggestions.remove(wordToBeReplaced);
      mWordToSuggestions.put(suggestion.toString(),suggestions);
    }
  }
}","private void rememberReplacedWord(CharSequence suggestion){
  if (mShowingVoiceSuggestions) {
    InputConnection ic=getCurrentInputConnection();
    EditingUtil.Range range=new EditingUtil.Range();
    String wordToBeReplaced=EditingUtil.getWordAtCursor(getCurrentInputConnection(),mWordSeparators,range);
    if (!mWordToSuggestions.containsKey(wordToBeReplaced)) {
      wordToBeReplaced=wordToBeReplaced.toLowerCase();
    }
    if (mWordToSuggestions.containsKey(wordToBeReplaced)) {
      List<CharSequence> suggestions=mWordToSuggestions.get(wordToBeReplaced);
      if (suggestions.contains(suggestion)) {
        suggestions.remove(suggestion);
      }
      suggestions.add(wordToBeReplaced);
      mWordToSuggestions.remove(wordToBeReplaced);
      mWordToSuggestions.put(suggestion.toString(),suggestions);
    }
  }
}",0.9958008398320336
88326,"@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (DEBUG) {
    Log.i(TAG,""String_Node_Str"" + oldSelStart + ""String_Node_Str""+ oldSelEnd+ ""String_Node_Str""+ newSelStart+ ""String_Node_Str""+ newSelEnd+ ""String_Node_Str""+ candidatesStart+ ""String_Node_Str""+ candidatesEnd);
  }
  if (mAfterVoiceInput) {
    mVoiceInput.setCursorPos(newSelEnd);
    mVoiceInput.setSelectionSpan(newSelEnd - newSelStart);
  }
  mSuggestionShouldReplaceCurrentWord=false;
  if ((((mComposing.length() > 0 && mPredicting) || mVoiceInputHighlighted) && (newSelStart != candidatesEnd || newSelEnd != candidatesEnd) && mLastSelectionStart != newSelStart)) {
    mComposing.setLength(0);
    mPredicting=false;
    postUpdateSuggestions();
    TextEntryState.reset();
    InputConnection ic=getCurrentInputConnection();
    if (ic != null) {
      ic.finishComposingText();
    }
    mVoiceInputHighlighted=false;
  }
 else   if (!mPredicting && !mJustAccepted) {
switch (TextEntryState.getState()) {
case TextEntryState.STATE_ACCEPTED_DEFAULT:
      TextEntryState.reset();
case TextEntryState.STATE_SPACE_AFTER_PICKED:
    mJustAddedAutoSpace=false;
  break;
}
}
mJustAccepted=false;
postUpdateShiftKeyState();
mLastSelectionStart=newSelStart;
mLastSelectionEnd=newSelEnd;
if ((candidatesStart == candidatesEnd || newSelStart != oldSelStart) && (newSelStart < newSelEnd - 1 || (!mPredicting)) && !mVoiceInputHighlighted) {
abortCorrection(false);
if (isCursorTouchingWord() || mLastSelectionStart < mLastSelectionEnd) {
postUpdateOldSuggestions();
}
}
}","@Override public void onUpdateSelection(int oldSelStart,int oldSelEnd,int newSelStart,int newSelEnd,int candidatesStart,int candidatesEnd){
  super.onUpdateSelection(oldSelStart,oldSelEnd,newSelStart,newSelEnd,candidatesStart,candidatesEnd);
  if (DEBUG) {
    Log.i(TAG,""String_Node_Str"" + oldSelStart + ""String_Node_Str""+ oldSelEnd+ ""String_Node_Str""+ newSelStart+ ""String_Node_Str""+ newSelEnd+ ""String_Node_Str""+ candidatesStart+ ""String_Node_Str""+ candidatesEnd);
  }
  if (mAfterVoiceInput) {
    mVoiceInput.setCursorPos(newSelEnd);
    mVoiceInput.setSelectionSpan(newSelEnd - newSelStart);
  }
  mSuggestionShouldReplaceCurrentWord=false;
  if ((((mComposing.length() > 0 && mPredicting) || mVoiceInputHighlighted) && (newSelStart != candidatesEnd || newSelEnd != candidatesEnd) && mLastSelectionStart != newSelStart)) {
    mComposing.setLength(0);
    mPredicting=false;
    postUpdateSuggestions();
    TextEntryState.reset();
    InputConnection ic=getCurrentInputConnection();
    if (ic != null) {
      ic.finishComposingText();
    }
    mVoiceInputHighlighted=false;
  }
 else   if (!mPredicting && !mJustAccepted) {
switch (TextEntryState.getState()) {
case TextEntryState.STATE_ACCEPTED_DEFAULT:
      TextEntryState.reset();
case TextEntryState.STATE_SPACE_AFTER_PICKED:
    mJustAddedAutoSpace=false;
  break;
}
}
mJustAccepted=false;
postUpdateShiftKeyState();
mLastSelectionStart=newSelStart;
mLastSelectionEnd=newSelEnd;
if (isPredictionOn() && mJustRevertedSeparator == null && (candidatesStart == candidatesEnd || newSelStart != oldSelStart) && (newSelStart < newSelEnd - 1 || (!mPredicting)) && !mVoiceInputHighlighted) {
if (isCursorTouchingWord() || mLastSelectionStart < mLastSelectionEnd) {
postUpdateOldSuggestions();
}
 else {
abortCorrection(false);
}
}
}",0.9590210586226524
88327,"private void setOldSuggestions(){
  mShowingVoiceSuggestions=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  if (mLastSelectionStart < mLastSelectionEnd) {
    ic.setSelection(mLastSelectionStart,mLastSelectionStart);
  }
  if (!mPredicting && isCursorTouchingWord()) {
    EditingUtil.Range range=new EditingUtil.Range();
    CharSequence touching=EditingUtil.getWordAtCursor(getCurrentInputConnection(),mWordSeparators,range);
    if (touching != null && touching.length() > 1) {
      if (mWordSeparators.indexOf(touching.charAt(touching.length() - 1)) > 0) {
        touching=touching.toString().substring(0,touching.length() - 1);
      }
      String selectedWord=touching.toString().trim();
      if (!mWordToSuggestions.containsKey(selectedWord)) {
        selectedWord=selectedWord.toLowerCase();
      }
      if (mWordToSuggestions.containsKey(selectedWord)) {
        mShowingVoiceSuggestions=true;
        mSuggestionShouldReplaceCurrentWord=true;
        underlineWord(touching,range.charsBefore,range.charsAfter);
        List<CharSequence> suggestions=mWordToSuggestions.get(selectedWord);
        if (Character.isUpperCase((char)touching.charAt(0))) {
          for (int i=0; i < suggestions.size(); i++) {
            String origSugg=(String)suggestions.get(i);
            String capsSugg=origSugg.toUpperCase().charAt(0) + origSugg.subSequence(1,origSugg.length()).toString();
            suggestions.set(i,capsSugg);
          }
        }
        setSuggestions(suggestions,false,true,true);
        setCandidatesViewShown(true);
        TextEntryState.selectedForCorrection();
        ic.endBatchEdit();
        return;
      }
      WordComposer foundWord=null;
      WordAlternatives alternatives=null;
      for (      WordAlternatives entry : mWordHistory) {
        if (TextUtils.equals(entry.getChosenWord(),touching)) {
          if (entry instanceof TypedWordAlternatives) {
            foundWord=((TypedWordAlternatives)entry).word;
          }
          alternatives=entry;
          break;
        }
      }
      if (foundWord == null && mSuggest.isValidWord(touching)) {
        foundWord=new WordComposer();
        for (int i=0; i < touching.length(); i++) {
          foundWord.add(touching.charAt(i),new int[]{touching.charAt(i)});
        }
      }
      if (foundWord != null || alternatives != null) {
        mSuggestionShouldReplaceCurrentWord=true;
        underlineWord(touching,range.charsBefore,range.charsAfter);
        TextEntryState.selectedForCorrection();
        if (alternatives == null)         alternatives=new TypedWordAlternatives(touching,foundWord);
        showCorrections(alternatives);
        if (foundWord != null) {
          mWord=foundWord;
        }
 else {
          mWord.reset();
        }
        if (mLastSelectionStart < mLastSelectionEnd) {
          ic.setSelection(mLastSelectionStart,mLastSelectionEnd);
        }
        ic.endBatchEdit();
        return;
      }
      abortCorrection(true);
    }
 else {
      abortCorrection(true);
      setNextSuggestions();
    }
  }
 else {
    abortCorrection(true);
  }
  if (mLastSelectionStart < mLastSelectionEnd) {
    ic.setSelection(mLastSelectionStart,mLastSelectionEnd);
  }
  ic.endBatchEdit();
}","private void setOldSuggestions(){
  mShowingVoiceSuggestions=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  if (mLastSelectionStart < mLastSelectionEnd) {
    ic.setSelection(mLastSelectionStart,mLastSelectionStart);
  }
  if (!mPredicting && isCursorTouchingWord()) {
    EditingUtil.Range range=new EditingUtil.Range();
    CharSequence touching=EditingUtil.getWordAtCursor(getCurrentInputConnection(),mWordSeparators,range);
    if (touching != null && touching.length() > 1) {
      if (mWordSeparators.indexOf(touching.charAt(touching.length() - 1)) > 0) {
        touching=touching.toString().substring(0,touching.length() - 1);
      }
      String selectedWord=touching.toString().trim();
      if (!mWordToSuggestions.containsKey(selectedWord)) {
        selectedWord=selectedWord.toLowerCase();
      }
      if (mWordToSuggestions.containsKey(selectedWord)) {
        mShowingVoiceSuggestions=true;
        mSuggestionShouldReplaceCurrentWord=true;
        underlineWord(touching,range.charsBefore,range.charsAfter);
        List<CharSequence> suggestions=mWordToSuggestions.get(selectedWord);
        if (Character.isUpperCase((char)touching.charAt(0))) {
          for (int i=0; i < suggestions.size(); i++) {
            String origSugg=(String)suggestions.get(i);
            String capsSugg=origSugg.toUpperCase().charAt(0) + origSugg.subSequence(1,origSugg.length()).toString();
            suggestions.set(i,capsSugg);
          }
        }
        setSuggestions(suggestions,false,true,true);
        setCandidatesViewShown(true);
        TextEntryState.selectedForCorrection();
        ic.endBatchEdit();
        return;
      }
      WordComposer foundWord=null;
      WordAlternatives alternatives=null;
      for (      WordAlternatives entry : mWordHistory) {
        if (TextUtils.equals(entry.getChosenWord(),touching)) {
          if (entry instanceof TypedWordAlternatives) {
            foundWord=((TypedWordAlternatives)entry).word;
          }
          alternatives=entry;
          break;
        }
      }
      if (foundWord == null && mSuggest.isValidWord(touching)) {
        foundWord=new WordComposer();
        for (int i=0; i < touching.length(); i++) {
          foundWord.add(touching.charAt(i),new int[]{touching.charAt(i)});
        }
      }
      if (foundWord != null || alternatives != null) {
        mSuggestionShouldReplaceCurrentWord=true;
        underlineWord(touching,range.charsBefore,range.charsAfter);
        TextEntryState.selectedForCorrection();
        if (alternatives == null)         alternatives=new TypedWordAlternatives(touching,foundWord);
        showCorrections(alternatives);
        if (foundWord != null) {
          mWord=new WordComposer(foundWord);
        }
 else {
          mWord.reset();
        }
        if (mLastSelectionStart < mLastSelectionEnd) {
          ic.setSelection(mLastSelectionStart,mLastSelectionEnd);
        }
        ic.endBatchEdit();
        return;
      }
      abortCorrection(true);
    }
 else {
      abortCorrection(true);
      setNextSuggestions();
    }
  }
 else {
    abortCorrection(true);
  }
  if (mLastSelectionStart < mLastSelectionEnd) {
    ic.setSelection(mLastSelectionStart,mLastSelectionEnd);
  }
  ic.endBatchEdit();
}",0.9945471069372918
88328,"public void pickSuggestionManually(int index,CharSequence suggestion){
  if (mAfterVoiceInput && mShowingVoiceSuggestions)   mVoiceInput.logNBestChoose(index);
  if (mAfterVoiceInput && !mShowingVoiceSuggestions) {
    mVoiceInput.flushAllTextModificationCounters();
    mVoiceInput.logTextModifiedByChooseSuggestion(suggestion.length());
  }
  final boolean correcting=TextEntryState.isCorrecting();
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mCompletionOn && mCompletions != null && index >= 0 && index < mCompletions.length) {
    CompletionInfo ci=mCompletions[index];
    if (ic != null) {
      ic.commitCompletion(ci);
    }
    mCommittedLength=suggestion.length();
    if (mCandidateView != null) {
      mCandidateView.clear();
    }
    updateShiftKeyState(getCurrentInputEditorInfo());
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && isWordSeparator(suggestion.charAt(0))) {
    onKey(suggestion.charAt(0),null);
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  mJustAccepted=true;
  pickSuggestion(suggestion);
  if (index == 0) {
    checkAddToDictionary(suggestion,AutoDictionary.FREQUENCY_FOR_PICKED);
  }
  TextEntryState.acceptedSuggestion(mComposing.toString(),suggestion);
  if (mAutoSpace && !correcting) {
    sendSpace();
    mJustAddedAutoSpace=true;
  }
  TextEntryState.typedCharacter((char)KEYCODE_SPACE,true);
  if (index == 0 && mCorrectionMode > 0 && !mSuggest.isValidWord(suggestion)) {
    mCandidateView.showAddToDictionaryHint(suggestion);
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}","public void pickSuggestionManually(int index,CharSequence suggestion){
  if (mAfterVoiceInput && mShowingVoiceSuggestions)   mVoiceInput.logNBestChoose(index);
  if (mAfterVoiceInput && !mShowingVoiceSuggestions) {
    mVoiceInput.flushAllTextModificationCounters();
    mVoiceInput.logTextModifiedByChooseSuggestion(suggestion.length());
  }
  final boolean correcting=TextEntryState.isCorrecting();
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mCompletionOn && mCompletions != null && index >= 0 && index < mCompletions.length) {
    CompletionInfo ci=mCompletions[index];
    if (ic != null) {
      ic.commitCompletion(ci);
    }
    mCommittedLength=suggestion.length();
    if (mCandidateView != null) {
      mCandidateView.clear();
    }
    updateShiftKeyState(getCurrentInputEditorInfo());
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  if (suggestion.length() == 1 && isWordSeparator(suggestion.charAt(0))) {
    onKey(suggestion.charAt(0),null);
    if (ic != null) {
      ic.endBatchEdit();
    }
    return;
  }
  mJustAccepted=true;
  pickSuggestion(suggestion);
  if (index == 0) {
    checkAddToDictionary(suggestion,AutoDictionary.FREQUENCY_FOR_PICKED);
  }
  TextEntryState.acceptedSuggestion(mComposing.toString(),suggestion);
  if (mAutoSpace && !correcting) {
    sendSpace();
    mJustAddedAutoSpace=true;
  }
  TextEntryState.typedCharacter((char)KEYCODE_SPACE,true);
  if (index == 0 && mCorrectionMode > 0 && !mSuggest.isValidWord(suggestion) && !mSuggest.isValidWord(suggestion.toString().toLowerCase())) {
    mCandidateView.showAddToDictionaryHint(suggestion);
  }
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.9817216981132076
88329,"public void revertLastWord(boolean deleteChar){
  final int length=mComposing.length();
  if (!mPredicting && length > 0) {
    final InputConnection ic=getCurrentInputConnection();
    mPredicting=true;
    ic.beginBatchEdit();
    mJustRevertedSeparator=ic.getTextBeforeCursor(1,0);
    if (deleteChar)     ic.deleteSurroundingText(1,0);
    int toDelete=mCommittedLength;
    CharSequence toTheLeft=ic.getTextBeforeCursor(mCommittedLength,0);
    if (toTheLeft != null && toTheLeft.length() > 0 && isWordSeparator(toTheLeft.charAt(0))) {
      toDelete--;
    }
    ic.deleteSurroundingText(toDelete,0);
    ic.setComposingText(mComposing,1);
    TextEntryState.backspace();
    ic.endBatchEdit();
    postUpdateSuggestions();
  }
 else {
    sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
    mJustRevertedSeparator=null;
  }
}","public void revertLastWord(boolean deleteChar){
  final int length=mComposing.length();
  if (!mPredicting && length > 0) {
    final InputConnection ic=getCurrentInputConnection();
    mPredicting=true;
    mJustRevertedSeparator=ic.getTextBeforeCursor(1,0);
    if (deleteChar)     ic.deleteSurroundingText(1,0);
    int toDelete=mCommittedLength;
    CharSequence toTheLeft=ic.getTextBeforeCursor(mCommittedLength,0);
    if (toTheLeft != null && toTheLeft.length() > 0 && isWordSeparator(toTheLeft.charAt(0))) {
      toDelete--;
    }
    ic.deleteSurroundingText(toDelete,0);
    ic.setComposingText(mComposing,1);
    TextEntryState.backspace();
    postUpdateSuggestions();
  }
 else {
    sendDownUpKeyEvents(KeyEvent.KEYCODE_DEL);
    mJustRevertedSeparator=null;
  }
}",0.9701120797011208
88330,"WordComposer(WordComposer copy){
  mCodes=(ArrayList<int[]>)copy.mCodes.clone();
  mPreferredWord=copy.mPreferredWord;
  mTypedWord=new StringBuilder(copy.mTypedWord);
  mCapsCount=copy.mCapsCount;
  mAutoCapitalized=copy.mAutoCapitalized;
}","WordComposer(WordComposer copy){
  mCodes=(ArrayList<int[]>)copy.mCodes.clone();
  mPreferredWord=copy.mPreferredWord;
  mTypedWord=new StringBuilder(copy.mTypedWord);
  mCapsCount=copy.mCapsCount;
  mAutoCapitalized=copy.mAutoCapitalized;
  mIsCapitalized=copy.mIsCapitalized;
}",0.926923076923077
88331,"public static void logOnAutoSuggestion(String before,String after){
  if (sLogEnabled) {
    if (!sSuggestDicMap.containsKey(after)) {
      if (sDBG) {
        Log.e(TAG,""String_Node_Str"");
      }
      return;
    }
    int dicId=sSuggestDicMap.get(after);
    sLatinImeLogger.mAutoSuggestCountPerDic[dicId]++;
    sSuggestDicMap.clear();
    if (dicId != Suggest.DIC_MAIN) {
      if (sDBG) {
        Log.d(TAG,""String_Node_Str"");
      }
      return;
    }
    if (before.equals(after)) {
      before=""String_Node_Str"";
      after=""String_Node_Str"";
    }
    sLastAutoSuggestSeparator=String.valueOf(sLatinImeLogger.mRingCharBuffer.getLastChar());
    String[] strings=new String[]{before,after,sLastAutoSuggestSeparator};
synchronized (LatinImeLogger.class) {
      sLastAutoSuggestBefore=before;
      sLastAutoSuggestAfter=after;
    }
    sLatinImeLogger.sendLogToDropBox(ID_AUTOSUGGESTION,strings);
  }
}","public static void logOnAutoSuggestion(String before,String after){
  if (sLogEnabled) {
    if (!sSuggestDicMap.containsKey(after)) {
      if (sDBG) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
 else {
      String separator=String.valueOf(sLatinImeLogger.mRingCharBuffer.getLastChar());
      sLastAutoSuggestDicTypeId=sSuggestDicMap.get(after);
      sLatinImeLogger.mAutoSuggestCountPerDic[sLastAutoSuggestDicTypeId]++;
      if (sLastAutoSuggestDicTypeId != Suggest.DIC_MAIN) {
        if (sDBG) {
          Log.d(TAG,""String_Node_Str"");
        }
        before=""String_Node_Str"";
        after=""String_Node_Str"";
      }
{
        if (before.equals(after)) {
          before=""String_Node_Str"";
          after=""String_Node_Str"";
        }
        String[] strings=new String[]{before,after,separator};
        sLatinImeLogger.sendLogToDropBox(ID_AUTOSUGGESTION,strings);
      }
synchronized (LatinImeLogger.class) {
        sLastAutoSuggestBefore=before;
        sLastAutoSuggestAfter=after;
        sLastAutoSuggestSeparator=separator;
      }
    }
    sSuggestDicMap.clear();
  }
}",0.5432953983176645
88332,"public static void logOnAutoSuggestionCanceled(){
  if (sLogEnabled) {
    sLatinImeLogger.mAutoCancelledCount++;
    if (sLastAutoSuggestBefore != null && sLastAutoSuggestAfter != null) {
      String[] strings=new String[]{sLastAutoSuggestBefore,sLastAutoSuggestAfter,sLastAutoSuggestSeparator};
      sLatinImeLogger.sendLogToDropBox(ID_AUTOSUGGESTIONCANCELLED,strings);
    }
synchronized (LatinImeLogger.class) {
      sLastAutoSuggestBefore=""String_Node_Str"";
      sLastAutoSuggestAfter=""String_Node_Str"";
      sLastAutoSuggestSeparator=""String_Node_Str"";
    }
  }
}","public static void logOnAutoSuggestionCanceled(){
  if (sLogEnabled) {
    sLatinImeLogger.mAutoCancelledCountPerDic[sLastAutoSuggestDicTypeId]++;
    if (sLastAutoSuggestBefore != null && sLastAutoSuggestAfter != null) {
      String[] strings=new String[]{sLastAutoSuggestBefore,sLastAutoSuggestAfter,sLastAutoSuggestSeparator};
      sLatinImeLogger.sendLogToDropBox(ID_AUTOSUGGESTIONCANCELLED,strings);
    }
synchronized (LatinImeLogger.class) {
      sLastAutoSuggestBefore=""String_Node_Str"";
      sLastAutoSuggestAfter=""String_Node_Str"";
      sLastAutoSuggestSeparator=""String_Node_Str"";
    }
  }
}",0.9721048182586643
88333,"private void initInternal(Context context){
  mContext=context;
  mDropBox=(DropBoxManager)mContext.getSystemService(Context.DROPBOX_SERVICE);
  mLastTimeSend=System.currentTimeMillis();
  mLastTimeActive=mLastTimeSend;
  mLastTimeCountEntry=mLastTimeSend;
  mDeleteCount=0;
  mInputCount=0;
  mWordCount=0;
  mActualCharCount=0;
  Arrays.fill(mAutoSuggestCountPerDic,0);
  Arrays.fill(mManualSuggestCountPerDic,0);
  mAutoCancelledCount=0;
  mLogBuffer=new ArrayList<LogEntry>();
  mPrivacyLogBuffer=new ArrayList<LogEntry>();
  mRingCharBuffer=new RingCharBuffer(context);
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  sLogEnabled=prefs.getBoolean(PREF_ENABLE_LOG,DEFAULT_LOG_ENABLED);
  mThemeId=prefs.getString(KeyboardSwitcher.PREF_KEYBOARD_LAYOUT,KeyboardSwitcher.DEFAULT_LAYOUT_ID);
  sLOGPRINT=prefs.getBoolean(PREF_DEBUG_MODE,sLOGPRINT);
  sDBG=sLOGPRINT;
  prefs.registerOnSharedPreferenceChangeListener(this);
}","private void initInternal(Context context){
  mContext=context;
  mDropBox=(DropBoxManager)mContext.getSystemService(Context.DROPBOX_SERVICE);
  mLastTimeSend=System.currentTimeMillis();
  mLastTimeActive=mLastTimeSend;
  mLastTimeCountEntry=mLastTimeSend;
  mDeleteCount=0;
  mInputCount=0;
  mWordCount=0;
  mActualCharCount=0;
  Arrays.fill(mAutoSuggestCountPerDic,0);
  Arrays.fill(mManualSuggestCountPerDic,0);
  Arrays.fill(mAutoCancelledCountPerDic,0);
  mLogBuffer=new ArrayList<LogEntry>();
  mPrivacyLogBuffer=new ArrayList<LogEntry>();
  mRingCharBuffer=new RingCharBuffer(context);
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  sLogEnabled=prefs.getBoolean(PREF_ENABLE_LOG,DEFAULT_LOG_ENABLED);
  mThemeId=prefs.getString(KeyboardSwitcher.PREF_KEYBOARD_LAYOUT,KeyboardSwitcher.DEFAULT_LAYOUT_ID);
  sLOGPRINT=prefs.getBoolean(PREF_DEBUG_MODE,sLOGPRINT);
  sDBG=sLOGPRINT;
  prefs.registerOnSharedPreferenceChangeListener(this);
}",0.9697590978985136
88334,"private void addSuggestionCountEntry(long time){
  if (sLOGPRINT) {
    Log.d(TAG,""String_Node_Str"");
  }
  String[] s=new String[mAutoSuggestCountPerDic.length];
  for (int i=0; i < s.length; ++i) {
    s[i]=String.valueOf(mAutoSuggestCountPerDic[i]);
  }
  mLogBuffer.add(new LogEntry(time,ID_AUTOSUGGESTIONCOUNT,s));
  mLogBuffer.add(new LogEntry(time,ID_AUTOSUGGESTIONCANCELLEDCOUNT,new String[]{String.valueOf(mAutoCancelledCount)}));
  s=new String[mManualSuggestCountPerDic.length];
  for (int i=0; i < s.length; ++i) {
    s[i]=String.valueOf(mManualSuggestCountPerDic[i]);
  }
  mLogBuffer.add(new LogEntry(time,ID_MANUALSUGGESTIONCOUNT,s));
  Arrays.fill(mAutoSuggestCountPerDic,0);
  Arrays.fill(mManualSuggestCountPerDic,0);
  mAutoCancelledCount=0;
}","private void addSuggestionCountEntry(long time){
  if (sLOGPRINT) {
    Log.d(TAG,""String_Node_Str"");
  }
  String[] s=new String[mAutoSuggestCountPerDic.length];
  for (int i=0; i < s.length; ++i) {
    s[i]=String.valueOf(mAutoSuggestCountPerDic[i]);
  }
  mLogBuffer.add(new LogEntry(time,ID_AUTOSUGGESTIONCOUNT,s));
  s=new String[mAutoCancelledCountPerDic.length];
  for (int i=0; i < s.length; ++i) {
    s[i]=String.valueOf(mAutoCancelledCountPerDic[i]);
  }
  mLogBuffer.add(new LogEntry(time,ID_AUTOSUGGESTIONCANCELLEDCOUNT,s));
  s=new String[mManualSuggestCountPerDic.length];
  for (int i=0; i < s.length; ++i) {
    s[i]=String.valueOf(mManualSuggestCountPerDic[i]);
  }
  mLogBuffer.add(new LogEntry(time,ID_MANUALSUGGESTIONCOUNT,s));
  Arrays.fill(mAutoSuggestCountPerDic,0);
  Arrays.fill(mManualSuggestCountPerDic,0);
  Arrays.fill(mAutoCancelledCountPerDic,0);
}",0.844796104686549
88335,"public static void logOnManualSuggestion(String before,String after,int position,List<CharSequence> suggestions){
  if (sLogEnabled) {
    if (before.length() == 0 && after.length() == 1) {
      sLatinImeLogger.sendLogToDropBox(ID_MANUALSUGGESTION,new String[]{before,after,String.valueOf(position),""String_Node_Str""});
    }
 else     if (!sSuggestDicMap.containsKey(after)) {
      if (sDBG) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
 else {
      int dicTypeId=sSuggestDicMap.get(after);
      sLatinImeLogger.mManualSuggestCountPerDic[dicTypeId]++;
      if (dicTypeId != Suggest.DIC_MAIN) {
        if (sDBG) {
          Log.d(TAG,""String_Node_Str"");
        }
      }
 else {
        if (before.equals(after)) {
          before=""String_Node_Str"";
          after=""String_Node_Str"";
        }
        String[] strings=new String[3 + suggestions.size()];
        strings[0]=before;
        strings[1]=after;
        strings[2]=String.valueOf(position);
        for (int i=0; i < suggestions.size(); ++i) {
          String s=suggestions.get(i).toString();
          strings[i + 3]=sSuggestDicMap.containsKey(s) ? s : ""String_Node_Str"";
        }
        sLatinImeLogger.sendLogToDropBox(ID_MANUALSUGGESTION,strings);
      }
    }
    sSuggestDicMap.clear();
  }
}","public static void logOnManualSuggestion(String before,String after,int position,List<CharSequence> suggestions){
  if (sLogEnabled) {
    if (before.length() == 0 && after.length() == 1) {
      sLatinImeLogger.sendLogToDropBox(ID_MANUALSUGGESTION,new String[]{before,after,String.valueOf(position),""String_Node_Str""});
    }
 else     if (!sSuggestDicMap.containsKey(after)) {
      if (sDBG) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
 else {
      int dicTypeId=sSuggestDicMap.get(after);
      sLatinImeLogger.mManualSuggestCountPerDic[dicTypeId]++;
      if (dicTypeId != Suggest.DIC_MAIN) {
        if (sDBG) {
          Log.d(TAG,""String_Node_Str"");
        }
        before=""String_Node_Str"";
        after=""String_Node_Str"";
      }
{
        if (before.equals(after)) {
          before=""String_Node_Str"";
          after=""String_Node_Str"";
        }
        String[] strings=new String[3 + suggestions.size()];
        strings[0]=before;
        strings[1]=after;
        strings[2]=String.valueOf(position);
        for (int i=0; i < suggestions.size(); ++i) {
          String s=suggestions.get(i).toString();
          strings[i + 3]=sSuggestDicMap.containsKey(s) ? s : ""String_Node_Str"";
        }
        sLatinImeLogger.sendLogToDropBox(ID_MANUALSUGGESTION,strings);
      }
    }
    sSuggestDicMap.clear();
  }
}",0.9721904761904762
88336,"public static void logOnAutoSuggestion(String before,String after){
  if (sLogEnabled) {
    if (!sSuggestDicMap.containsKey(after)) {
      if (sDBG) {
        Log.e(TAG,""String_Node_Str"");
      }
      return;
    }
    int dicId=sSuggestDicMap.get(after);
    sLatinImeLogger.mAutoSuggestCountPerDic[dicId]++;
    sSuggestDicMap.clear();
    if (dicId != Suggest.DIC_MAIN) {
      if (sDBG) {
        Log.d(TAG,""String_Node_Str"");
      }
      return;
    }
    if (before.equals(after)) {
      before=""String_Node_Str"";
      after=""String_Node_Str"";
    }
    sLastAutoSuggestSeparator=String.valueOf(sLatinImeLogger.mRingCharBuffer.getLastChar());
    String[] strings=new String[]{before,after,sLastAutoSuggestSeparator};
synchronized (LatinImeLogger.class) {
      sLastAutoSuggestBefore=before;
      sLastAutoSuggestAfter=after;
    }
    sLatinImeLogger.sendLogToDropBox(ID_AUTOSUGGESTION,strings);
  }
}","public static void logOnAutoSuggestion(String before,String after){
  if (sLogEnabled) {
    if (!sSuggestDicMap.containsKey(after)) {
      if (sDBG) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
 else {
      String separator=String.valueOf(sLatinImeLogger.mRingCharBuffer.getLastChar());
      sLastAutoSuggestDicTypeId=sSuggestDicMap.get(after);
      sLatinImeLogger.mAutoSuggestCountPerDic[sLastAutoSuggestDicTypeId]++;
      if (sLastAutoSuggestDicTypeId != Suggest.DIC_MAIN) {
        if (sDBG) {
          Log.d(TAG,""String_Node_Str"");
        }
        before=""String_Node_Str"";
        after=""String_Node_Str"";
      }
{
        if (before.equals(after)) {
          before=""String_Node_Str"";
          after=""String_Node_Str"";
        }
        String[] strings=new String[]{before,after,separator};
        sLatinImeLogger.sendLogToDropBox(ID_AUTOSUGGESTION,strings);
      }
synchronized (LatinImeLogger.class) {
        sLastAutoSuggestBefore=before;
        sLastAutoSuggestAfter=after;
        sLastAutoSuggestSeparator=separator;
      }
    }
    sSuggestDicMap.clear();
  }
}",0.5432953983176645
88337,"public static void logOnAutoSuggestionCanceled(){
  if (sLogEnabled) {
    sLatinImeLogger.mAutoCancelledCount++;
    if (sLastAutoSuggestBefore != null && sLastAutoSuggestAfter != null) {
      String[] strings=new String[]{sLastAutoSuggestBefore,sLastAutoSuggestAfter,sLastAutoSuggestSeparator};
      sLatinImeLogger.sendLogToDropBox(ID_AUTOSUGGESTIONCANCELLED,strings);
    }
synchronized (LatinImeLogger.class) {
      sLastAutoSuggestBefore=""String_Node_Str"";
      sLastAutoSuggestAfter=""String_Node_Str"";
      sLastAutoSuggestSeparator=""String_Node_Str"";
    }
  }
}","public static void logOnAutoSuggestionCanceled(){
  if (sLogEnabled) {
    sLatinImeLogger.mAutoCancelledCountPerDic[sLastAutoSuggestDicTypeId]++;
    if (sLastAutoSuggestBefore != null && sLastAutoSuggestAfter != null) {
      String[] strings=new String[]{sLastAutoSuggestBefore,sLastAutoSuggestAfter,sLastAutoSuggestSeparator};
      sLatinImeLogger.sendLogToDropBox(ID_AUTOSUGGESTIONCANCELLED,strings);
    }
synchronized (LatinImeLogger.class) {
      sLastAutoSuggestBefore=""String_Node_Str"";
      sLastAutoSuggestAfter=""String_Node_Str"";
      sLastAutoSuggestSeparator=""String_Node_Str"";
    }
  }
}",0.9721048182586643
88338,"private void initInternal(Context context){
  mContext=context;
  mDropBox=(DropBoxManager)mContext.getSystemService(Context.DROPBOX_SERVICE);
  mLastTimeSend=System.currentTimeMillis();
  mLastTimeActive=mLastTimeSend;
  mLastTimeCountEntry=mLastTimeSend;
  mDeleteCount=0;
  mInputCount=0;
  mWordCount=0;
  mActualCharCount=0;
  Arrays.fill(mAutoSuggestCountPerDic,0);
  Arrays.fill(mManualSuggestCountPerDic,0);
  mAutoCancelledCount=0;
  mLogBuffer=new ArrayList<LogEntry>();
  mPrivacyLogBuffer=new ArrayList<LogEntry>();
  mRingCharBuffer=new RingCharBuffer(context);
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  sLogEnabled=prefs.getBoolean(PREF_ENABLE_LOG,DEFAULT_LOG_ENABLED);
  mThemeId=prefs.getString(KeyboardSwitcher.PREF_KEYBOARD_LAYOUT,KeyboardSwitcher.DEFAULT_LAYOUT_ID);
  sLOGPRINT=prefs.getBoolean(PREF_DEBUG_MODE,sLOGPRINT);
  sDBG=sLOGPRINT;
  prefs.registerOnSharedPreferenceChangeListener(this);
}","private void initInternal(Context context){
  mContext=context;
  mDropBox=(DropBoxManager)mContext.getSystemService(Context.DROPBOX_SERVICE);
  mLastTimeSend=System.currentTimeMillis();
  mLastTimeActive=mLastTimeSend;
  mLastTimeCountEntry=mLastTimeSend;
  mDeleteCount=0;
  mInputCount=0;
  mWordCount=0;
  mActualCharCount=0;
  Arrays.fill(mAutoSuggestCountPerDic,0);
  Arrays.fill(mManualSuggestCountPerDic,0);
  Arrays.fill(mAutoCancelledCountPerDic,0);
  mLogBuffer=new ArrayList<LogEntry>();
  mPrivacyLogBuffer=new ArrayList<LogEntry>();
  mRingCharBuffer=new RingCharBuffer(context);
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  sLogEnabled=prefs.getBoolean(PREF_ENABLE_LOG,DEFAULT_LOG_ENABLED);
  mThemeId=prefs.getString(KeyboardSwitcher.PREF_KEYBOARD_LAYOUT,KeyboardSwitcher.DEFAULT_LAYOUT_ID);
  sLOGPRINT=prefs.getBoolean(PREF_DEBUG_MODE,sLOGPRINT);
  sDBG=sLOGPRINT;
  prefs.registerOnSharedPreferenceChangeListener(this);
}",0.9697590978985136
88339,"private void addSuggestionCountEntry(long time){
  if (sLOGPRINT) {
    Log.d(TAG,""String_Node_Str"");
  }
  String[] s=new String[mAutoSuggestCountPerDic.length];
  for (int i=0; i < s.length; ++i) {
    s[i]=String.valueOf(mAutoSuggestCountPerDic[i]);
  }
  mLogBuffer.add(new LogEntry(time,ID_AUTOSUGGESTIONCOUNT,s));
  mLogBuffer.add(new LogEntry(time,ID_AUTOSUGGESTIONCANCELLEDCOUNT,new String[]{String.valueOf(mAutoCancelledCount)}));
  s=new String[mManualSuggestCountPerDic.length];
  for (int i=0; i < s.length; ++i) {
    s[i]=String.valueOf(mManualSuggestCountPerDic[i]);
  }
  mLogBuffer.add(new LogEntry(time,ID_MANUALSUGGESTIONCOUNT,s));
  Arrays.fill(mAutoSuggestCountPerDic,0);
  Arrays.fill(mManualSuggestCountPerDic,0);
  mAutoCancelledCount=0;
}","private void addSuggestionCountEntry(long time){
  if (sLOGPRINT) {
    Log.d(TAG,""String_Node_Str"");
  }
  String[] s=new String[mAutoSuggestCountPerDic.length];
  for (int i=0; i < s.length; ++i) {
    s[i]=String.valueOf(mAutoSuggestCountPerDic[i]);
  }
  mLogBuffer.add(new LogEntry(time,ID_AUTOSUGGESTIONCOUNT,s));
  s=new String[mAutoCancelledCountPerDic.length];
  for (int i=0; i < s.length; ++i) {
    s[i]=String.valueOf(mAutoCancelledCountPerDic[i]);
  }
  mLogBuffer.add(new LogEntry(time,ID_AUTOSUGGESTIONCANCELLEDCOUNT,s));
  s=new String[mManualSuggestCountPerDic.length];
  for (int i=0; i < s.length; ++i) {
    s[i]=String.valueOf(mManualSuggestCountPerDic[i]);
  }
  mLogBuffer.add(new LogEntry(time,ID_MANUALSUGGESTIONCOUNT,s));
  Arrays.fill(mAutoSuggestCountPerDic,0);
  Arrays.fill(mManualSuggestCountPerDic,0);
  Arrays.fill(mAutoCancelledCountPerDic,0);
}",0.844796104686549
88340,"public static void logOnManualSuggestion(String before,String after,int position,List<CharSequence> suggestions){
  if (sLogEnabled) {
    if (before.length() == 0 && after.length() == 1) {
      sLatinImeLogger.sendLogToDropBox(ID_MANUALSUGGESTION,new String[]{before,after,String.valueOf(position),""String_Node_Str""});
    }
 else     if (!sSuggestDicMap.containsKey(after)) {
      if (sDBG) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
 else {
      int dicTypeId=sSuggestDicMap.get(after);
      sLatinImeLogger.mManualSuggestCountPerDic[dicTypeId]++;
      if (dicTypeId != Suggest.DIC_MAIN) {
        if (sDBG) {
          Log.d(TAG,""String_Node_Str"");
        }
      }
 else {
        if (before.equals(after)) {
          before=""String_Node_Str"";
          after=""String_Node_Str"";
        }
        String[] strings=new String[3 + suggestions.size()];
        strings[0]=before;
        strings[1]=after;
        strings[2]=String.valueOf(position);
        for (int i=0; i < suggestions.size(); ++i) {
          String s=suggestions.get(i).toString();
          strings[i + 3]=sSuggestDicMap.containsKey(s) ? s : ""String_Node_Str"";
        }
        sLatinImeLogger.sendLogToDropBox(ID_MANUALSUGGESTION,strings);
      }
    }
    sSuggestDicMap.clear();
  }
}","public static void logOnManualSuggestion(String before,String after,int position,List<CharSequence> suggestions){
  if (sLogEnabled) {
    if (before.length() == 0 && after.length() == 1) {
      sLatinImeLogger.sendLogToDropBox(ID_MANUALSUGGESTION,new String[]{before,after,String.valueOf(position),""String_Node_Str""});
    }
 else     if (!sSuggestDicMap.containsKey(after)) {
      if (sDBG) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
 else {
      int dicTypeId=sSuggestDicMap.get(after);
      sLatinImeLogger.mManualSuggestCountPerDic[dicTypeId]++;
      if (dicTypeId != Suggest.DIC_MAIN) {
        if (sDBG) {
          Log.d(TAG,""String_Node_Str"");
        }
        before=""String_Node_Str"";
        after=""String_Node_Str"";
      }
{
        if (before.equals(after)) {
          before=""String_Node_Str"";
          after=""String_Node_Str"";
        }
        String[] strings=new String[3 + suggestions.size()];
        strings[0]=before;
        strings[1]=after;
        strings[2]=String.valueOf(position);
        for (int i=0; i < suggestions.size(); ++i) {
          String s=suggestions.get(i).toString();
          strings[i + 3]=sSuggestDicMap.containsKey(s) ? s : ""String_Node_Str"";
        }
        sLatinImeLogger.sendLogToDropBox(ID_MANUALSUGGESTION,strings);
      }
    }
    sSuggestDicMap.clear();
  }
}",0.9721904761904762
88341,"void setKeyboardMode(int mode,int imeOptions,boolean enableVoice,boolean isSymbols){
  if (mInputView == null)   return;
  mMode=mode;
  mImeOptions=imeOptions;
  if (enableVoice != mHasVoice) {
    setVoiceMode(mHasVoice,mVoiceOnPrimary);
  }
  mIsSymbols=isSymbols;
  mInputView.setPreviewEnabled(true);
  KeyboardId id=getKeyboardId(mode,imeOptions,isSymbols);
  LatinKeyboard keyboard=null;
  try {
    keyboard=getKeyboard(id);
  }
 catch (  RuntimeException e) {
    LatinImeLogger.logOnException(mode + ""String_Node_Str"" + imeOptions+ ""String_Node_Str""+ isSymbols,e);
  }
  if (mode == MODE_PHONE) {
    mInputView.setPhoneKeyboard(keyboard);
    mInputView.setPreviewEnabled(false);
  }
  mCurrentId=id;
  mInputView.setKeyboard(keyboard);
  keyboard.setShifted(false);
  keyboard.setShiftLocked(keyboard.isShiftLocked());
  keyboard.setImeOptions(mContext.getResources(),mMode,imeOptions);
  keyboard.setBlackFlag(isBlackSym());
}","void setKeyboardMode(int mode,int imeOptions,boolean enableVoice,boolean isSymbols){
  if (mInputView == null)   return;
  mMode=mode;
  mImeOptions=imeOptions;
  if (enableVoice != mHasVoice) {
    setVoiceMode(mHasVoice,mVoiceOnPrimary);
  }
  mIsSymbols=isSymbols;
  mInputView.setPreviewEnabled(true);
  KeyboardId id=getKeyboardId(mode,imeOptions,isSymbols);
  LatinKeyboard keyboard=null;
  keyboard=getKeyboard(id);
  if (mode == MODE_PHONE) {
    mInputView.setPhoneKeyboard(keyboard);
    mInputView.setPreviewEnabled(false);
  }
  mCurrentId=id;
  mInputView.setKeyboard(keyboard);
  keyboard.setShifted(false);
  keyboard.setShiftLocked(keyboard.isShiftLocked());
  keyboard.setImeOptions(mContext.getResources(),mMode,imeOptions);
  keyboard.setBlackFlag(isBlackSym());
}",0.9094076655052264
88342,"@Override public void onCreate(){
  super.onCreate();
  mResources=getResources();
  final Configuration conf=mResources.getConfiguration();
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mLanguageSwitcher=new LanguageSwitcher(this);
  mLanguageSwitcher.loadLocales(prefs);
  mKeyboardSwitcher=new KeyboardSwitcher(this,this);
  mKeyboardSwitcher.setLanguageSwitcher(mLanguageSwitcher);
  mSystemLocale=conf.locale.toString();
  mLanguageSwitcher.setSystemLocale(conf.locale);
  String inputLanguage=mLanguageSwitcher.getInputLanguage();
  if (inputLanguage == null) {
    inputLanguage=conf.locale.toString();
  }
  initSuggest(inputLanguage);
  mOrientation=conf.orientation;
  initSuggestPuncList();
  IntentFilter filter=new IntentFilter(AudioManager.RINGER_MODE_CHANGED_ACTION);
  registerReceiver(mReceiver,filter);
  if (VOICE_INSTALLED) {
    mVoiceInput=new VoiceInput(this,this);
    mHints=new Hints(this,new Hints.Display(){
      public void showHint(      int viewResource){
        LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View view=inflater.inflate(viewResource,null);
        setCandidatesView(view);
        setCandidatesViewShown(true);
        mIsShowingHint=true;
      }
    }
);
  }
  prefs.registerOnSharedPreferenceChangeListener(this);
  LatinImeLogger.init(this);
}","@Override public void onCreate(){
  LatinImeLogger.init(this);
  super.onCreate();
  mResources=getResources();
  final Configuration conf=mResources.getConfiguration();
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mLanguageSwitcher=new LanguageSwitcher(this);
  mLanguageSwitcher.loadLocales(prefs);
  mKeyboardSwitcher=new KeyboardSwitcher(this,this);
  mKeyboardSwitcher.setLanguageSwitcher(mLanguageSwitcher);
  mSystemLocale=conf.locale.toString();
  mLanguageSwitcher.setSystemLocale(conf.locale);
  String inputLanguage=mLanguageSwitcher.getInputLanguage();
  if (inputLanguage == null) {
    inputLanguage=conf.locale.toString();
  }
  initSuggest(inputLanguage);
  mOrientation=conf.orientation;
  initSuggestPuncList();
  IntentFilter filter=new IntentFilter(AudioManager.RINGER_MODE_CHANGED_ACTION);
  registerReceiver(mReceiver,filter);
  if (VOICE_INSTALLED) {
    mVoiceInput=new VoiceInput(this,this);
    mHints=new Hints(this,new Hints.Display(){
      public void showHint(      int viewResource){
        LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View view=inflater.inflate(viewResource,null);
        setCandidatesView(view);
        setCandidatesViewShown(true);
        mIsShowingHint=true;
      }
    }
);
  }
  prefs.registerOnSharedPreferenceChangeListener(this);
}",0.979136690647482
88343,"public static void logOnException(String metaData,RuntimeException e){
  if (sLogEnabled) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PrintStream ps=new PrintStream(baos);
    e.printStackTrace(ps);
    String exceptionString=new String(baos.toByteArray());
    sLatinImeLogger.sendLogToDropBox(ID_EXCEPTION,new String[]{metaData,exceptionString});
    Log.e(TAG,""String_Node_Str"" + exceptionString);
    if (SUPPRESS_EXCEPTION) {
      sLatinImeLogger.commitInternalAndStopSelf();
    }
 else {
      sLatinImeLogger.commitInternal();
      throw e;
    }
  }
}","public static void logOnException(String metaData,RuntimeException e){
  if (sLogEnabled) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PrintStream ps=new PrintStream(baos);
    e.printStackTrace(ps);
    String exceptionString=new String(baos.toByteArray(),0,Math.min(EXCEPTION_MAX_LENGTH,baos.size()));
    sLatinImeLogger.sendLogToDropBox(ID_EXCEPTION,new String[]{metaData,exceptionString});
    if (DBG) {
      Log.e(TAG,""String_Node_Str"" + new String(baos.toByteArray()));
    }
    if (SUPPRESS_EXCEPTION) {
      sLatinImeLogger.commitInternalAndStopSelf();
    }
 else {
      sLatinImeLogger.commitInternal();
      throw e;
    }
  }
}",0.9064748201438848
88344,"private void commitInternalAndStopSelf(){
  Log.e(TAG,""String_Node_Str"");
  commitInternal();
  LatinIME ime=((LatinIME)mContext);
  ime.hideWindow();
  ime.stopSelf();
}","private void commitInternalAndStopSelf(){
  if (DBG) {
    Log.e(TAG,""String_Node_Str"");
  }
  commitInternal();
  LatinIME ime=((LatinIME)mContext);
  ime.hideWindow();
  ime.stopSelf();
}",0.947075208913649
88345,"public void scrollNext(){
  int i=0;
  int scrollX=getScrollX();
  int targetX=scrollX;
  final int count=mSuggestions.size();
  int rightEdge=scrollX + getWidth();
  while (i < count) {
    if (mWordX[i] <= rightEdge && mWordX[i] + mWordWidth[i] >= rightEdge) {
      targetX=Math.min(mWordX[i],mTotalWidth - getWidth());
      break;
    }
    i++;
  }
  updateScrollPosition(targetX);
}","public void scrollNext(){
  int i=0;
  int scrollX=getScrollX();
  int targetX=scrollX;
  final int count=Math.min(mSuggestions.size(),MAX_SUGGESTIONS);
  int rightEdge=scrollX + getWidth();
  while (i < count) {
    if (mWordX[i] <= rightEdge && mWordX[i] + mWordWidth[i] >= rightEdge) {
      targetX=Math.min(mWordX[i],mTotalWidth - getWidth());
      break;
    }
    i++;
  }
  updateScrollPosition(targetX);
}",0.9676616915422884
88346,"public void scrollPrev(){
  int i=0;
  final int count=mSuggestions.size();
  int firstItem=0;
  while (i < count) {
    if (mWordX[i] < getScrollX() && mWordX[i] + mWordWidth[i] >= getScrollX() - 1) {
      firstItem=i;
      break;
    }
    i++;
  }
  int leftEdge=mWordX[firstItem] + mWordWidth[firstItem] - getWidth();
  if (leftEdge < 0)   leftEdge=0;
  updateScrollPosition(leftEdge);
}","public void scrollPrev(){
  int i=0;
  final int count=Math.min(mSuggestions.size(),MAX_SUGGESTIONS);
  int firstItem=0;
  while (i < count) {
    if (mWordX[i] < getScrollX() && mWordX[i] + mWordWidth[i] >= getScrollX() - 1) {
      firstItem=i;
      break;
    }
    i++;
  }
  int leftEdge=mWordX[firstItem] + mWordWidth[firstItem] - getWidth();
  if (leftEdge < 0)   leftEdge=0;
  updateScrollPosition(leftEdge);
}",0.9679802955665024
88347,"/** 
 * If the canvas is null, then only touch calculations are performed to pick the target candidate.
 */
@Override protected void onDraw(Canvas canvas){
  if (canvas != null) {
    super.onDraw(canvas);
  }
  mTotalWidth=0;
  if (mSuggestions == null)   return;
  final int height=getHeight();
  if (mBgPadding == null) {
    mBgPadding=new Rect(0,0,0,0);
    if (getBackground() != null) {
      getBackground().getPadding(mBgPadding);
    }
    mDivider.setBounds(0,0,mDivider.getIntrinsicWidth(),mDivider.getIntrinsicHeight());
  }
  int x=0;
  final int count=mSuggestions.size();
  final int width=getWidth();
  final Rect bgPadding=mBgPadding;
  final Paint paint=mPaint;
  final int touchX=mTouchX;
  final int scrollX=getScrollX();
  final boolean scrolled=mScrolled;
  final boolean typedWordValid=mTypedWordValid;
  final int y=(int)(height + mPaint.getTextSize() - mDescent) / 2;
  for (int i=0; i < count; i++) {
    CharSequence suggestion=mSuggestions.get(i);
    if (suggestion == null)     continue;
    paint.setColor(mColorNormal);
    if (mHaveMinimalSuggestion && ((i == 1 && !typedWordValid) || (i == 0 && typedWordValid))) {
      paint.setTypeface(Typeface.DEFAULT_BOLD);
      paint.setColor(mColorRecommended);
    }
 else     if (i != 0) {
      paint.setColor(mColorOther);
    }
    final int wordWidth;
    if (mWordWidth[i] != 0) {
      wordWidth=mWordWidth[i];
    }
 else {
      float textWidth=paint.measureText(suggestion,0,suggestion.length());
      wordWidth=Math.max(mMinTouchableWidth,(int)textWidth + X_GAP * 2);
      mWordWidth[i]=wordWidth;
    }
    mWordX[i]=x;
    if (touchX + scrollX >= x && touchX + scrollX < x + wordWidth && !scrolled && touchX != OUT_OF_BOUNDS) {
      if (canvas != null && !mShowingAddToDictionary) {
        canvas.translate(x,0);
        mSelectionHighlight.setBounds(0,bgPadding.top,wordWidth,height);
        mSelectionHighlight.draw(canvas);
        canvas.translate(-x,0);
        showPreview(i,null);
      }
      mSelectedString=suggestion;
      mSelectedIndex=i;
    }
    if (canvas != null) {
      canvas.drawText(suggestion,0,suggestion.length(),x + wordWidth / 2,y,paint);
      paint.setColor(mColorOther);
      canvas.translate(x + wordWidth,0);
      if (!(mShowingAddToDictionary && i == 1)) {
        mDivider.draw(canvas);
      }
      canvas.translate(-x - wordWidth,0);
    }
    paint.setTypeface(Typeface.DEFAULT);
    x+=wordWidth;
  }
  mTotalWidth=x;
  if (mTargetScrollX != scrollX) {
    scrollToTarget();
  }
}","/** 
 * If the canvas is null, then only touch calculations are performed to pick the target candidate.
 */
@Override protected void onDraw(Canvas canvas){
  if (canvas != null) {
    super.onDraw(canvas);
  }
  mTotalWidth=0;
  if (mSuggestions == null)   return;
  final int height=getHeight();
  if (mBgPadding == null) {
    mBgPadding=new Rect(0,0,0,0);
    if (getBackground() != null) {
      getBackground().getPadding(mBgPadding);
    }
    mDivider.setBounds(0,0,mDivider.getIntrinsicWidth(),mDivider.getIntrinsicHeight());
  }
  int x=0;
  final int count=Math.min(mSuggestions.size(),MAX_SUGGESTIONS);
  final int width=getWidth();
  final Rect bgPadding=mBgPadding;
  final Paint paint=mPaint;
  final int touchX=mTouchX;
  final int scrollX=getScrollX();
  final boolean scrolled=mScrolled;
  final boolean typedWordValid=mTypedWordValid;
  final int y=(int)(height + mPaint.getTextSize() - mDescent) / 2;
  for (int i=0; i < count; i++) {
    CharSequence suggestion=mSuggestions.get(i);
    if (suggestion == null)     continue;
    paint.setColor(mColorNormal);
    if (mHaveMinimalSuggestion && ((i == 1 && !typedWordValid) || (i == 0 && typedWordValid))) {
      paint.setTypeface(Typeface.DEFAULT_BOLD);
      paint.setColor(mColorRecommended);
    }
 else     if (i != 0) {
      paint.setColor(mColorOther);
    }
    final int wordWidth;
    if (mWordWidth[i] != 0) {
      wordWidth=mWordWidth[i];
    }
 else {
      float textWidth=paint.measureText(suggestion,0,suggestion.length());
      wordWidth=Math.max(mMinTouchableWidth,(int)textWidth + X_GAP * 2);
      mWordWidth[i]=wordWidth;
    }
    mWordX[i]=x;
    if (touchX + scrollX >= x && touchX + scrollX < x + wordWidth && !scrolled && touchX != OUT_OF_BOUNDS) {
      if (canvas != null && !mShowingAddToDictionary) {
        canvas.translate(x,0);
        mSelectionHighlight.setBounds(0,bgPadding.top,wordWidth,height);
        mSelectionHighlight.draw(canvas);
        canvas.translate(-x,0);
        showPreview(i,null);
      }
      mSelectedString=suggestion;
      mSelectedIndex=i;
    }
    if (canvas != null) {
      canvas.drawText(suggestion,0,suggestion.length(),x + wordWidth / 2,y,paint);
      paint.setColor(mColorOther);
      canvas.translate(x + wordWidth,0);
      if (!(mShowingAddToDictionary && i == 1)) {
        mDivider.draw(canvas);
      }
      canvas.translate(-x - wordWidth,0);
    }
    paint.setTypeface(Typeface.DEFAULT);
    x+=wordWidth;
  }
  mTotalWidth=x;
  if (mTargetScrollX != scrollX) {
    scrollToTarget();
  }
}",0.9948677457560204
88348,"public void scrollNext(){
  int i=0;
  int scrollX=getScrollX();
  int targetX=scrollX;
  final int count=mSuggestions.size();
  int rightEdge=scrollX + getWidth();
  while (i < count) {
    if (mWordX[i] <= rightEdge && mWordX[i] + mWordWidth[i] >= rightEdge) {
      targetX=Math.min(mWordX[i],mTotalWidth - getWidth());
      break;
    }
    i++;
  }
  updateScrollPosition(targetX);
}","public void scrollNext(){
  int i=0;
  int scrollX=getScrollX();
  int targetX=scrollX;
  final int count=Math.min(mSuggestions.size(),MAX_SUGGESTIONS);
  int rightEdge=scrollX + getWidth();
  while (i < count) {
    if (mWordX[i] <= rightEdge && mWordX[i] + mWordWidth[i] >= rightEdge) {
      targetX=Math.min(mWordX[i],mTotalWidth - getWidth());
      break;
    }
    i++;
  }
  updateScrollPosition(targetX);
}",0.9676616915422884
88349,"public void scrollPrev(){
  int i=0;
  final int count=mSuggestions.size();
  int firstItem=0;
  while (i < count) {
    if (mWordX[i] < getScrollX() && mWordX[i] + mWordWidth[i] >= getScrollX() - 1) {
      firstItem=i;
      break;
    }
    i++;
  }
  int leftEdge=mWordX[firstItem] + mWordWidth[firstItem] - getWidth();
  if (leftEdge < 0)   leftEdge=0;
  updateScrollPosition(leftEdge);
}","public void scrollPrev(){
  int i=0;
  final int count=Math.min(mSuggestions.size(),MAX_SUGGESTIONS);
  int firstItem=0;
  while (i < count) {
    if (mWordX[i] < getScrollX() && mWordX[i] + mWordWidth[i] >= getScrollX() - 1) {
      firstItem=i;
      break;
    }
    i++;
  }
  int leftEdge=mWordX[firstItem] + mWordWidth[firstItem] - getWidth();
  if (leftEdge < 0)   leftEdge=0;
  updateScrollPosition(leftEdge);
}",0.9679802955665024
88350,"/** 
 * If the canvas is null, then only touch calculations are performed to pick the target candidate.
 */
@Override protected void onDraw(Canvas canvas){
  if (canvas != null) {
    super.onDraw(canvas);
  }
  mTotalWidth=0;
  if (mSuggestions == null)   return;
  final int height=getHeight();
  if (mBgPadding == null) {
    mBgPadding=new Rect(0,0,0,0);
    if (getBackground() != null) {
      getBackground().getPadding(mBgPadding);
    }
    mDivider.setBounds(0,0,mDivider.getIntrinsicWidth(),mDivider.getIntrinsicHeight());
  }
  int x=0;
  final int count=mSuggestions.size();
  final int width=getWidth();
  final Rect bgPadding=mBgPadding;
  final Paint paint=mPaint;
  final int touchX=mTouchX;
  final int scrollX=getScrollX();
  final boolean scrolled=mScrolled;
  final boolean typedWordValid=mTypedWordValid;
  final int y=(int)(height + mPaint.getTextSize() - mDescent) / 2;
  for (int i=0; i < count; i++) {
    CharSequence suggestion=mSuggestions.get(i);
    if (suggestion == null)     continue;
    paint.setColor(mColorNormal);
    if (mHaveMinimalSuggestion && ((i == 1 && !typedWordValid) || (i == 0 && typedWordValid))) {
      paint.setTypeface(Typeface.DEFAULT_BOLD);
      paint.setColor(mColorRecommended);
    }
 else     if (i != 0) {
      paint.setColor(mColorOther);
    }
    final int wordWidth;
    if (mWordWidth[i] != 0) {
      wordWidth=mWordWidth[i];
    }
 else {
      float textWidth=paint.measureText(suggestion,0,suggestion.length());
      wordWidth=Math.max(mMinTouchableWidth,(int)textWidth + X_GAP * 2);
      mWordWidth[i]=wordWidth;
    }
    mWordX[i]=x;
    if (touchX + scrollX >= x && touchX + scrollX < x + wordWidth && !scrolled && touchX != OUT_OF_BOUNDS) {
      if (canvas != null && !mShowingAddToDictionary) {
        canvas.translate(x,0);
        mSelectionHighlight.setBounds(0,bgPadding.top,wordWidth,height);
        mSelectionHighlight.draw(canvas);
        canvas.translate(-x,0);
        showPreview(i,null);
      }
      mSelectedString=suggestion;
      mSelectedIndex=i;
    }
    if (canvas != null) {
      canvas.drawText(suggestion,0,suggestion.length(),x + wordWidth / 2,y,paint);
      paint.setColor(mColorOther);
      canvas.translate(x + wordWidth,0);
      if (!(mShowingAddToDictionary && i == 1)) {
        mDivider.draw(canvas);
      }
      canvas.translate(-x - wordWidth,0);
    }
    paint.setTypeface(Typeface.DEFAULT);
    x+=wordWidth;
  }
  mTotalWidth=x;
  if (mTargetScrollX != scrollX) {
    scrollToTarget();
  }
}","/** 
 * If the canvas is null, then only touch calculations are performed to pick the target candidate.
 */
@Override protected void onDraw(Canvas canvas){
  if (canvas != null) {
    super.onDraw(canvas);
  }
  mTotalWidth=0;
  if (mSuggestions == null)   return;
  final int height=getHeight();
  if (mBgPadding == null) {
    mBgPadding=new Rect(0,0,0,0);
    if (getBackground() != null) {
      getBackground().getPadding(mBgPadding);
    }
    mDivider.setBounds(0,0,mDivider.getIntrinsicWidth(),mDivider.getIntrinsicHeight());
  }
  int x=0;
  final int count=Math.min(mSuggestions.size(),MAX_SUGGESTIONS);
  final int width=getWidth();
  final Rect bgPadding=mBgPadding;
  final Paint paint=mPaint;
  final int touchX=mTouchX;
  final int scrollX=getScrollX();
  final boolean scrolled=mScrolled;
  final boolean typedWordValid=mTypedWordValid;
  final int y=(int)(height + mPaint.getTextSize() - mDescent) / 2;
  for (int i=0; i < count; i++) {
    CharSequence suggestion=mSuggestions.get(i);
    if (suggestion == null)     continue;
    paint.setColor(mColorNormal);
    if (mHaveMinimalSuggestion && ((i == 1 && !typedWordValid) || (i == 0 && typedWordValid))) {
      paint.setTypeface(Typeface.DEFAULT_BOLD);
      paint.setColor(mColorRecommended);
    }
 else     if (i != 0) {
      paint.setColor(mColorOther);
    }
    final int wordWidth;
    if (mWordWidth[i] != 0) {
      wordWidth=mWordWidth[i];
    }
 else {
      float textWidth=paint.measureText(suggestion,0,suggestion.length());
      wordWidth=Math.max(mMinTouchableWidth,(int)textWidth + X_GAP * 2);
      mWordWidth[i]=wordWidth;
    }
    mWordX[i]=x;
    if (touchX + scrollX >= x && touchX + scrollX < x + wordWidth && !scrolled && touchX != OUT_OF_BOUNDS) {
      if (canvas != null && !mShowingAddToDictionary) {
        canvas.translate(x,0);
        mSelectionHighlight.setBounds(0,bgPadding.top,wordWidth,height);
        mSelectionHighlight.draw(canvas);
        canvas.translate(-x,0);
        showPreview(i,null);
      }
      mSelectedString=suggestion;
      mSelectedIndex=i;
    }
    if (canvas != null) {
      canvas.drawText(suggestion,0,suggestion.length(),x + wordWidth / 2,y,paint);
      paint.setColor(mColorOther);
      canvas.translate(x + wordWidth,0);
      if (!(mShowingAddToDictionary && i == 1)) {
        mDivider.draw(canvas);
      }
      canvas.translate(-x - wordWidth,0);
    }
    paint.setTypeface(Typeface.DEFAULT);
    x+=wordWidth;
  }
  mTotalWidth=x;
  if (mTargetScrollX != scrollX) {
    scrollToTarget();
  }
}",0.9948677457560204
88351,"@Override public boolean onTouchEvent(MotionEvent me){
  LatinKeyboard keyboard=(LatinKeyboard)getKeyboard();
  if (DEBUG_LINE) {
    mLastX=(int)me.getX();
    mLastY=(int)me.getY();
    invalidate();
  }
  if (!mExtensionVisible && !mIsExtensionType && handleSuddenJump(me))   return true;
  if (me.getAction() == MotionEvent.ACTION_DOWN) {
    keyboard.keyReleased();
  }
  if (me.getAction() == MotionEvent.ACTION_UP) {
    int languageDirection=keyboard.getLanguageChangeDirection();
    if (languageDirection != 0) {
      getOnKeyboardActionListener().onKey(languageDirection == 1 ? KEYCODE_NEXT_LANGUAGE : KEYCODE_PREV_LANGUAGE,null);
      me.setAction(MotionEvent.ACTION_CANCEL);
      keyboard.keyReleased();
      return super.onTouchEvent(me);
    }
  }
  if (keyboard.getExtension() == 0) {
    return super.onTouchEvent(me);
  }
  if (me.getY() < 0) {
    if (mExtensionVisible) {
      int action=me.getAction();
      if (mFirstEvent)       action=MotionEvent.ACTION_DOWN;
      mFirstEvent=false;
      MotionEvent translated=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),action,me.getX(),me.getY() + mExtension.getHeight(),me.getMetaState());
      boolean result=mExtension.onTouchEvent(translated);
      translated.recycle();
      if (me.getAction() == MotionEvent.ACTION_UP || me.getAction() == MotionEvent.ACTION_CANCEL) {
        closeExtension();
      }
      return result;
    }
 else {
      if (openExtension()) {
        MotionEvent cancel=MotionEvent.obtain(me.getDownTime(),me.getEventTime(),MotionEvent.ACTION_CANCEL,me.getX() - 100,me.getY() - 100,0);
        super.onTouchEvent(cancel);
        cancel.recycle();
        if (mExtension.getHeight() > 0) {
          MotionEvent translated=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),MotionEvent.ACTION_DOWN,me.getX(),me.getY() + mExtension.getHeight(),me.getMetaState());
          mExtension.onTouchEvent(translated);
          translated.recycle();
        }
 else {
          mFirstEvent=true;
        }
        mDisableDisambiguation=true;
      }
      return true;
    }
  }
 else   if (mExtensionVisible) {
    closeExtension();
    MotionEvent down=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),MotionEvent.ACTION_DOWN,me.getX(),me.getY(),me.getMetaState());
    super.onTouchEvent(down);
    down.recycle();
    return super.onTouchEvent(me);
  }
 else {
    return super.onTouchEvent(me);
  }
}","@Override public boolean onTouchEvent(MotionEvent me){
  LatinKeyboard keyboard=(LatinKeyboard)getKeyboard();
  if (DEBUG_LINE) {
    mLastX=(int)me.getX();
    mLastY=(int)me.getY();
    invalidate();
  }
  if (!mExtensionVisible && !mIsExtensionType && handleSuddenJump(me))   return true;
  if (me.getAction() == MotionEvent.ACTION_DOWN) {
    keyboard.keyReleased();
  }
  if (me.getAction() == MotionEvent.ACTION_UP) {
    int languageDirection=keyboard.getLanguageChangeDirection();
    if (languageDirection != 0) {
      getOnKeyboardActionListener().onKey(languageDirection == 1 ? KEYCODE_NEXT_LANGUAGE : KEYCODE_PREV_LANGUAGE,null);
      me.setAction(MotionEvent.ACTION_CANCEL);
      keyboard.keyReleased();
      return super.onTouchEvent(me);
    }
  }
  if (keyboard.getExtension() == 0) {
    return super.onTouchEvent(me);
  }
  if (me.getY() < 0 && (mExtensionVisible || me.getAction() != MotionEvent.ACTION_UP)) {
    if (mExtensionVisible) {
      int action=me.getAction();
      if (mFirstEvent)       action=MotionEvent.ACTION_DOWN;
      mFirstEvent=false;
      MotionEvent translated=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),action,me.getX(),me.getY() + mExtension.getHeight(),me.getMetaState());
      boolean result=mExtension.onTouchEvent(translated);
      translated.recycle();
      if (me.getAction() == MotionEvent.ACTION_UP || me.getAction() == MotionEvent.ACTION_CANCEL) {
        closeExtension();
      }
      return result;
    }
 else {
      if (openExtension()) {
        MotionEvent cancel=MotionEvent.obtain(me.getDownTime(),me.getEventTime(),MotionEvent.ACTION_CANCEL,me.getX() - 100,me.getY() - 100,0);
        super.onTouchEvent(cancel);
        cancel.recycle();
        if (mExtension.getHeight() > 0) {
          MotionEvent translated=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),MotionEvent.ACTION_DOWN,me.getX(),me.getY() + mExtension.getHeight(),me.getMetaState());
          mExtension.onTouchEvent(translated);
          translated.recycle();
        }
 else {
          mFirstEvent=true;
        }
        mDisableDisambiguation=true;
      }
      return true;
    }
  }
 else   if (mExtensionVisible) {
    closeExtension();
    MotionEvent down=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),MotionEvent.ACTION_DOWN,me.getX(),me.getY(),me.getMetaState());
    super.onTouchEvent(down);
    down.recycle();
    return super.onTouchEvent(me);
  }
 else {
    return super.onTouchEvent(me);
  }
}",0.9865470852017936
88352,"@Override public boolean onTouchEvent(MotionEvent me){
  LatinKeyboard keyboard=(LatinKeyboard)getKeyboard();
  if (DEBUG_LINE) {
    mLastX=(int)me.getX();
    mLastY=(int)me.getY();
    invalidate();
  }
  if (!mExtensionVisible && !mIsExtensionType && handleSuddenJump(me))   return true;
  if (me.getAction() == MotionEvent.ACTION_DOWN) {
    keyboard.keyReleased();
  }
  if (me.getAction() == MotionEvent.ACTION_UP) {
    int languageDirection=keyboard.getLanguageChangeDirection();
    if (languageDirection != 0) {
      getOnKeyboardActionListener().onKey(languageDirection == 1 ? KEYCODE_NEXT_LANGUAGE : KEYCODE_PREV_LANGUAGE,null);
      me.setAction(MotionEvent.ACTION_CANCEL);
      keyboard.keyReleased();
      return super.onTouchEvent(me);
    }
  }
  if (keyboard.getExtension() == 0) {
    return super.onTouchEvent(me);
  }
  if (me.getY() < 0) {
    if (mExtensionVisible) {
      int action=me.getAction();
      if (mFirstEvent)       action=MotionEvent.ACTION_DOWN;
      mFirstEvent=false;
      MotionEvent translated=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),action,me.getX(),me.getY() + mExtension.getHeight(),me.getMetaState());
      boolean result=mExtension.onTouchEvent(translated);
      translated.recycle();
      if (me.getAction() == MotionEvent.ACTION_UP || me.getAction() == MotionEvent.ACTION_CANCEL) {
        closeExtension();
      }
      return result;
    }
 else {
      if (openExtension()) {
        MotionEvent cancel=MotionEvent.obtain(me.getDownTime(),me.getEventTime(),MotionEvent.ACTION_CANCEL,me.getX() - 100,me.getY() - 100,0);
        super.onTouchEvent(cancel);
        cancel.recycle();
        if (mExtension.getHeight() > 0) {
          MotionEvent translated=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),MotionEvent.ACTION_DOWN,me.getX(),me.getY() + mExtension.getHeight(),me.getMetaState());
          mExtension.onTouchEvent(translated);
          translated.recycle();
        }
 else {
          mFirstEvent=true;
        }
        mDisableDisambiguation=true;
      }
      return true;
    }
  }
 else   if (mExtensionVisible) {
    closeExtension();
    MotionEvent down=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),MotionEvent.ACTION_DOWN,me.getX(),me.getY(),me.getMetaState());
    super.onTouchEvent(down);
    down.recycle();
    return super.onTouchEvent(me);
  }
 else {
    return super.onTouchEvent(me);
  }
}","@Override public boolean onTouchEvent(MotionEvent me){
  LatinKeyboard keyboard=(LatinKeyboard)getKeyboard();
  if (DEBUG_LINE) {
    mLastX=(int)me.getX();
    mLastY=(int)me.getY();
    invalidate();
  }
  if (!mExtensionVisible && !mIsExtensionType && handleSuddenJump(me))   return true;
  if (me.getAction() == MotionEvent.ACTION_DOWN) {
    keyboard.keyReleased();
  }
  if (me.getAction() == MotionEvent.ACTION_UP) {
    int languageDirection=keyboard.getLanguageChangeDirection();
    if (languageDirection != 0) {
      getOnKeyboardActionListener().onKey(languageDirection == 1 ? KEYCODE_NEXT_LANGUAGE : KEYCODE_PREV_LANGUAGE,null);
      me.setAction(MotionEvent.ACTION_CANCEL);
      keyboard.keyReleased();
      return super.onTouchEvent(me);
    }
  }
  if (keyboard.getExtension() == 0) {
    return super.onTouchEvent(me);
  }
  if (me.getY() < 0 && (mExtensionVisible || me.getAction() != MotionEvent.ACTION_UP)) {
    if (mExtensionVisible) {
      int action=me.getAction();
      if (mFirstEvent)       action=MotionEvent.ACTION_DOWN;
      mFirstEvent=false;
      MotionEvent translated=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),action,me.getX(),me.getY() + mExtension.getHeight(),me.getMetaState());
      boolean result=mExtension.onTouchEvent(translated);
      translated.recycle();
      if (me.getAction() == MotionEvent.ACTION_UP || me.getAction() == MotionEvent.ACTION_CANCEL) {
        closeExtension();
      }
      return result;
    }
 else {
      if (openExtension()) {
        MotionEvent cancel=MotionEvent.obtain(me.getDownTime(),me.getEventTime(),MotionEvent.ACTION_CANCEL,me.getX() - 100,me.getY() - 100,0);
        super.onTouchEvent(cancel);
        cancel.recycle();
        if (mExtension.getHeight() > 0) {
          MotionEvent translated=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),MotionEvent.ACTION_DOWN,me.getX(),me.getY() + mExtension.getHeight(),me.getMetaState());
          mExtension.onTouchEvent(translated);
          translated.recycle();
        }
 else {
          mFirstEvent=true;
        }
        mDisableDisambiguation=true;
      }
      return true;
    }
  }
 else   if (mExtensionVisible) {
    closeExtension();
    MotionEvent down=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),MotionEvent.ACTION_DOWN,me.getX(),me.getY(),me.getMetaState());
    super.onTouchEvent(down);
    down.recycle();
    return super.onTouchEvent(me);
  }
 else {
    return super.onTouchEvent(me);
  }
}",0.9865470852017936
88353,"@Override public boolean onTouchEvent(MotionEvent me){
  LatinKeyboard keyboard=(LatinKeyboard)getKeyboard();
  if (DEBUG_LINE) {
    mLastX=(int)me.getX();
    mLastY=(int)me.getY();
    invalidate();
  }
  if (!mExtensionVisible && !mIsExtensionType && handleSuddenJump(me))   return true;
  if (me.getAction() == MotionEvent.ACTION_DOWN) {
    keyboard.keyReleased();
  }
  if (me.getAction() == MotionEvent.ACTION_UP) {
    int languageDirection=keyboard.getLanguageChangeDirection();
    if (languageDirection != 0) {
      getOnKeyboardActionListener().onKey(languageDirection == 1 ? KEYCODE_NEXT_LANGUAGE : KEYCODE_PREV_LANGUAGE,null);
      me.setAction(MotionEvent.ACTION_CANCEL);
      keyboard.keyReleased();
      return super.onTouchEvent(me);
    }
  }
  if (keyboard.getExtension() == 0) {
    return super.onTouchEvent(me);
  }
  if (me.getY() < 0) {
    if (mExtensionVisible) {
      int action=me.getAction();
      if (mFirstEvent)       action=MotionEvent.ACTION_DOWN;
      mFirstEvent=false;
      MotionEvent translated=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),action,me.getX(),me.getY() + mExtension.getHeight(),me.getMetaState());
      boolean result=mExtension.onTouchEvent(translated);
      translated.recycle();
      if (me.getAction() == MotionEvent.ACTION_UP || me.getAction() == MotionEvent.ACTION_CANCEL) {
        closeExtension();
      }
      return result;
    }
 else {
      if (openExtension()) {
        MotionEvent cancel=MotionEvent.obtain(me.getDownTime(),me.getEventTime(),MotionEvent.ACTION_CANCEL,me.getX() - 100,me.getY() - 100,0);
        super.onTouchEvent(cancel);
        cancel.recycle();
        if (mExtension.getHeight() > 0) {
          MotionEvent translated=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),MotionEvent.ACTION_DOWN,me.getX(),me.getY() + mExtension.getHeight(),me.getMetaState());
          mExtension.onTouchEvent(translated);
          translated.recycle();
        }
 else {
          mFirstEvent=true;
        }
        mDisableDisambiguation=true;
      }
      return true;
    }
  }
 else   if (mExtensionVisible) {
    closeExtension();
    MotionEvent down=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),MotionEvent.ACTION_DOWN,me.getX(),me.getY(),me.getMetaState());
    super.onTouchEvent(down);
    down.recycle();
    return super.onTouchEvent(me);
  }
 else {
    return super.onTouchEvent(me);
  }
}","@Override public boolean onTouchEvent(MotionEvent me){
  LatinKeyboard keyboard=(LatinKeyboard)getKeyboard();
  if (DEBUG_LINE) {
    mLastX=(int)me.getX();
    mLastY=(int)me.getY();
    invalidate();
  }
  if (!mExtensionVisible && !mIsExtensionType && handleSuddenJump(me))   return true;
  if (me.getAction() == MotionEvent.ACTION_DOWN) {
    keyboard.keyReleased();
  }
  if (me.getAction() == MotionEvent.ACTION_UP) {
    int languageDirection=keyboard.getLanguageChangeDirection();
    if (languageDirection != 0) {
      getOnKeyboardActionListener().onKey(languageDirection == 1 ? KEYCODE_NEXT_LANGUAGE : KEYCODE_PREV_LANGUAGE,null);
      me.setAction(MotionEvent.ACTION_CANCEL);
      keyboard.keyReleased();
      return super.onTouchEvent(me);
    }
  }
  if (keyboard.getExtension() == 0) {
    return super.onTouchEvent(me);
  }
  if (me.getY() < 0 && (mExtensionVisible || me.getAction() != MotionEvent.ACTION_UP)) {
    if (mExtensionVisible) {
      int action=me.getAction();
      if (mFirstEvent)       action=MotionEvent.ACTION_DOWN;
      mFirstEvent=false;
      MotionEvent translated=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),action,me.getX(),me.getY() + mExtension.getHeight(),me.getMetaState());
      boolean result=mExtension.onTouchEvent(translated);
      translated.recycle();
      if (me.getAction() == MotionEvent.ACTION_UP || me.getAction() == MotionEvent.ACTION_CANCEL) {
        closeExtension();
      }
      return result;
    }
 else {
      if (openExtension()) {
        MotionEvent cancel=MotionEvent.obtain(me.getDownTime(),me.getEventTime(),MotionEvent.ACTION_CANCEL,me.getX() - 100,me.getY() - 100,0);
        super.onTouchEvent(cancel);
        cancel.recycle();
        if (mExtension.getHeight() > 0) {
          MotionEvent translated=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),MotionEvent.ACTION_DOWN,me.getX(),me.getY() + mExtension.getHeight(),me.getMetaState());
          mExtension.onTouchEvent(translated);
          translated.recycle();
        }
 else {
          mFirstEvent=true;
        }
        mDisableDisambiguation=true;
      }
      return true;
    }
  }
 else   if (mExtensionVisible) {
    closeExtension();
    MotionEvent down=MotionEvent.obtain(me.getEventTime(),me.getEventTime(),MotionEvent.ACTION_DOWN,me.getX(),me.getY(),me.getMetaState());
    super.onTouchEvent(down);
    down.recycle();
    return super.onTouchEvent(me);
  }
 else {
    return super.onTouchEvent(me);
  }
}",0.9865470852017936
88354,"private boolean openExtension(){
  if (((LatinKeyboard)getKeyboard()).getExtension() == 0)   return false;
  makePopupWindow();
  mExtensionVisible=true;
  return true;
}","private boolean openExtension(){
  if (!isShown()) {
    return false;
  }
  if (((LatinKeyboard)getKeyboard()).getExtension() == 0)   return false;
  makePopupWindow();
  mExtensionVisible=true;
  return true;
}",0.8900523560209425
88355,"private void loadSettings(){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  mVibrateOn=sp.getBoolean(PREF_VIBRATE_ON,false);
  mSoundOn=sp.getBoolean(PREF_SOUND_ON,false);
  mAutoCap=sp.getBoolean(PREF_AUTO_CAP,true);
  mQuickFixes=sp.getBoolean(PREF_QUICK_FIXES,true);
  mHasUsedVoiceInput=sp.getBoolean(PREF_HAS_USED_VOICE_INPUT,false);
  mHasUsedVoiceInputUnsupportedLocale=sp.getBoolean(PREF_HAS_USED_VOICE_INPUT_UNSUPPORTED_LOCALE,false);
  String supportedLocalesString=SettingsUtil.getSettingsString(getContentResolver(),SettingsUtil.LATIN_IME_VOICE_INPUT_SUPPORTED_LOCALES,DEFAULT_VOICE_INPUT_SUPPORTED_LOCALES);
  ArrayList<String> voiceInputSupportedLocales=newArrayList(supportedLocalesString.split(""String_Node_Str""));
  mLocaleSupportedForVoiceInput=voiceInputSupportedLocales.contains(mLocale);
  mShowSuggestions=sp.getBoolean(PREF_SHOW_SUGGESTIONS,true);
  if (VOICE_INSTALLED) {
    final String voiceMode=sp.getString(PREF_VOICE_MODE,getString(R.string.voice_mode_main));
    boolean enableVoice=!voiceMode.equals(getString(R.string.voice_mode_off)) && mEnableVoiceButton;
    boolean voiceOnPrimary=voiceMode.equals(getString(R.string.voice_mode_main));
    if (mKeyboardSwitcher != null && (enableVoice != mEnableVoice || voiceOnPrimary != mVoiceOnPrimary)) {
      mKeyboardSwitcher.setVoiceMode(enableVoice,voiceOnPrimary);
    }
    mEnableVoice=enableVoice;
    mVoiceOnPrimary=voiceOnPrimary;
  }
  mAutoCorrectEnabled=sp.getBoolean(PREF_AUTO_COMPLETE,mResources.getBoolean(R.bool.enable_autocorrect)) & mShowSuggestions;
  updateCorrectionMode();
  updateAutoTextEnabled(mResources.getConfiguration().locale);
  mLanguageSwitcher.loadLocales(sp);
}","private void loadSettings(){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  mVibrateOn=sp.getBoolean(PREF_VIBRATE_ON,false);
  mSoundOn=sp.getBoolean(PREF_SOUND_ON,false);
  mAutoCap=sp.getBoolean(PREF_AUTO_CAP,true);
  mQuickFixes=sp.getBoolean(PREF_QUICK_FIXES,true);
  mHasUsedVoiceInput=sp.getBoolean(PREF_HAS_USED_VOICE_INPUT,false);
  mHasUsedVoiceInputUnsupportedLocale=sp.getBoolean(PREF_HAS_USED_VOICE_INPUT_UNSUPPORTED_LOCALE,false);
  String supportedLocalesString=SettingsUtil.getSettingsString(getContentResolver(),SettingsUtil.LATIN_IME_VOICE_INPUT_SUPPORTED_LOCALES,DEFAULT_VOICE_INPUT_SUPPORTED_LOCALES);
  ArrayList<String> voiceInputSupportedLocales=newArrayList(supportedLocalesString.split(""String_Node_Str""));
  mLocaleSupportedForVoiceInput=voiceInputSupportedLocales.contains(mInputLocale);
  mShowSuggestions=sp.getBoolean(PREF_SHOW_SUGGESTIONS,true);
  if (VOICE_INSTALLED) {
    final String voiceMode=sp.getString(PREF_VOICE_MODE,getString(R.string.voice_mode_main));
    boolean enableVoice=!voiceMode.equals(getString(R.string.voice_mode_off)) && mEnableVoiceButton;
    boolean voiceOnPrimary=voiceMode.equals(getString(R.string.voice_mode_main));
    if (mKeyboardSwitcher != null && (enableVoice != mEnableVoice || voiceOnPrimary != mVoiceOnPrimary)) {
      mKeyboardSwitcher.setVoiceMode(enableVoice,voiceOnPrimary);
    }
    mEnableVoice=enableVoice;
    mVoiceOnPrimary=voiceOnPrimary;
  }
  mAutoCorrectEnabled=sp.getBoolean(PREF_AUTO_COMPLETE,mResources.getBoolean(R.bool.enable_autocorrect)) & mShowSuggestions;
  updateCorrectionMode();
  updateAutoTextEnabled(mResources.getConfiguration().locale);
  mLanguageSwitcher.loadLocales(sp);
}",0.9985358711566618
88356,"@Override public void onConfigurationChanged(Configuration conf){
  if (!TextUtils.equals(conf.locale.toString(),mLocale)) {
    if (mLanguageSwitcher != null) {
      mLanguageSwitcher.loadLocales(PreferenceManager.getDefaultSharedPreferences(this));
      toggleLanguage(true,true);
    }
 else {
      reloadKeyboards();
    }
  }
  if (conf.orientation != mOrientation) {
    InputConnection ic=getCurrentInputConnection();
    commitTyped(ic);
    if (ic != null)     ic.finishComposingText();
    mOrientation=conf.orientation;
    reloadKeyboards();
  }
  mConfigurationChanging=true;
  super.onConfigurationChanged(conf);
  if (mRecognizing) {
    switchToRecognitionStatusView();
  }
  mConfigurationChanging=false;
}","@Override public void onConfigurationChanged(Configuration conf){
  final String systemLocale=conf.locale.toString();
  if (!TextUtils.equals(systemLocale,mSystemLocale)) {
    mSystemLocale=systemLocale;
    if (mLanguageSwitcher != null) {
      mLanguageSwitcher.loadLocales(PreferenceManager.getDefaultSharedPreferences(this));
      toggleLanguage(true,true);
    }
 else {
      reloadKeyboards();
    }
  }
  if (conf.orientation != mOrientation) {
    InputConnection ic=getCurrentInputConnection();
    commitTyped(ic);
    if (ic != null)     ic.finishComposingText();
    mOrientation=conf.orientation;
    reloadKeyboards();
  }
  mConfigurationChanging=true;
  super.onConfigurationChanged(conf);
  if (mRecognizing) {
    switchToRecognitionStatusView();
  }
  mConfigurationChanging=false;
}",0.9190600522193212
88357,"private void initSuggest(String locale){
  mLocale=locale;
  Resources orig=getResources();
  Configuration conf=orig.getConfiguration();
  Locale saveLocale=conf.locale;
  conf.locale=new Locale(locale);
  orig.updateConfiguration(conf,orig.getDisplayMetrics());
  if (mSuggest != null) {
    mSuggest.close();
  }
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  mQuickFixes=sp.getBoolean(PREF_QUICK_FIXES,true);
  mSuggest=new Suggest(this,R.raw.main);
  updateAutoTextEnabled(saveLocale);
  if (mUserDictionary != null)   mUserDictionary.close();
  mUserDictionary=new UserDictionary(this,mLocale);
  if (mContactsDictionary == null) {
    mContactsDictionary=new ContactsDictionary(this);
  }
  if (mAutoDictionary != null) {
    mAutoDictionary.close();
  }
  mAutoDictionary=new AutoDictionary(this,this,mLocale);
  mSuggest.setUserDictionary(mUserDictionary);
  mSuggest.setContactsDictionary(mContactsDictionary);
  mSuggest.setAutoDictionary(mAutoDictionary);
  updateCorrectionMode();
  mWordSeparators=mResources.getString(R.string.word_separators);
  mSentenceSeparators=mResources.getString(R.string.sentence_separators);
  conf.locale=saveLocale;
  orig.updateConfiguration(conf,orig.getDisplayMetrics());
}","private void initSuggest(String locale){
  mInputLocale=locale;
  Resources orig=getResources();
  Configuration conf=orig.getConfiguration();
  Locale saveLocale=conf.locale;
  conf.locale=new Locale(locale);
  orig.updateConfiguration(conf,orig.getDisplayMetrics());
  if (mSuggest != null) {
    mSuggest.close();
  }
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  mQuickFixes=sp.getBoolean(PREF_QUICK_FIXES,true);
  mSuggest=new Suggest(this,R.raw.main);
  updateAutoTextEnabled(saveLocale);
  if (mUserDictionary != null)   mUserDictionary.close();
  mUserDictionary=new UserDictionary(this,mInputLocale);
  if (mContactsDictionary == null) {
    mContactsDictionary=new ContactsDictionary(this);
  }
  if (mAutoDictionary != null) {
    mAutoDictionary.close();
  }
  mAutoDictionary=new AutoDictionary(this,this,mInputLocale);
  mSuggest.setUserDictionary(mUserDictionary);
  mSuggest.setContactsDictionary(mContactsDictionary);
  mSuggest.setAutoDictionary(mAutoDictionary);
  updateCorrectionMode();
  mWordSeparators=mResources.getString(R.string.word_separators);
  mSentenceSeparators=mResources.getString(R.string.sentence_separators);
  conf.locale=saveLocale;
  orig.updateConfiguration(conf,orig.getDisplayMetrics());
}",0.9940405244338498
88358,"@Override public void onCreate(){
  super.onCreate();
  mResources=getResources();
  final Configuration conf=mResources.getConfiguration();
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mLanguageSwitcher=new LanguageSwitcher(this);
  mLanguageSwitcher.loadLocales(prefs);
  mKeyboardSwitcher=new KeyboardSwitcher(this,this);
  mKeyboardSwitcher.setLanguageSwitcher(mLanguageSwitcher);
  boolean enableMultipleLanguages=mLanguageSwitcher.getLocaleCount() > 0;
  String inputLanguage=mLanguageSwitcher.getInputLanguage();
  if (inputLanguage == null) {
    inputLanguage=conf.locale.toString();
  }
  initSuggest(inputLanguage);
  mOrientation=conf.orientation;
  initSuggestPuncList();
  IntentFilter filter=new IntentFilter(AudioManager.RINGER_MODE_CHANGED_ACTION);
  registerReceiver(mReceiver,filter);
  if (VOICE_INSTALLED) {
    mVoiceInput=new VoiceInput(this,this);
    mHints=new Hints(this,new Hints.Display(){
      public void showHint(      int viewResource){
        LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View view=inflater.inflate(viewResource,null);
        setCandidatesView(view);
        setCandidatesViewShown(true);
        mIsShowingHint=true;
      }
    }
);
  }
  prefs.registerOnSharedPreferenceChangeListener(this);
}","@Override public void onCreate(){
  super.onCreate();
  mResources=getResources();
  final Configuration conf=mResources.getConfiguration();
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mLanguageSwitcher=new LanguageSwitcher(this);
  mLanguageSwitcher.loadLocales(prefs);
  mKeyboardSwitcher=new KeyboardSwitcher(this,this);
  mKeyboardSwitcher.setLanguageSwitcher(mLanguageSwitcher);
  mSystemLocale=conf.locale.toString();
  String inputLanguage=mLanguageSwitcher.getInputLanguage();
  if (inputLanguage == null) {
    inputLanguage=conf.locale.toString();
  }
  initSuggest(inputLanguage);
  mOrientation=conf.orientation;
  initSuggestPuncList();
  IntentFilter filter=new IntentFilter(AudioManager.RINGER_MODE_CHANGED_ACTION);
  registerReceiver(mReceiver,filter);
  if (VOICE_INSTALLED) {
    mVoiceInput=new VoiceInput(this,this);
    mHints=new Hints(this,new Hints.Display(){
      public void showHint(      int viewResource){
        LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View view=inflater.inflate(viewResource,null);
        setCandidatesView(view);
        setCandidatesViewShown(true);
        mIsShowingHint=true;
      }
    }
);
  }
  prefs.registerOnSharedPreferenceChangeListener(this);
}",0.9600903614457832
88359,"private void updateAutoTextEnabled(Locale systemLocale){
  if (mSuggest == null)   return;
  boolean different=!systemLocale.getLanguage().equalsIgnoreCase(mLocale.substring(0,2));
  mSuggest.setAutoTextEnabled(!different && mQuickFixes);
}","private void updateAutoTextEnabled(Locale systemLocale){
  if (mSuggest == null)   return;
  boolean different=!systemLocale.getLanguage().equalsIgnoreCase(mInputLocale.substring(0,2));
  mSuggest.setAutoTextEnabled(!different && mQuickFixes);
}",0.9896907216494846
88360,"private boolean openExtension(){
  if (((LatinKeyboard)getKeyboard()).getExtension() == 0)   return false;
  makePopupWindow();
  mExtensionVisible=true;
  return true;
}","private boolean openExtension(){
  if (!isShown()) {
    return false;
  }
  if (((LatinKeyboard)getKeyboard()).getExtension() == 0)   return false;
  makePopupWindow();
  mExtensionVisible=true;
  return true;
}",0.8900523560209425
88361,"/** 
 * Add a new keystroke, with codes[0] containing the pressed key's unicode and the rest of the array containing unicode for adjacent keys, sorted by reducing probability/proximity.
 * @param codes the array of unicode values
 */
public void add(int primaryCode,int[] codes){
  mTypedWord.append((char)primaryCode);
  mCodes.add(codes);
  if (Character.isUpperCase((char)primaryCode))   mCapsCount++;
}","/** 
 * Add a new keystroke, with codes[0] containing the pressed key's unicode and the rest of the array containing unicode for adjacent keys, sorted by reducing probability/proximity.
 * @param codes the array of unicode values
 */
public void add(int primaryCode,int[] codes){
  mTypedWord.append((char)primaryCode);
  correctPrimaryJuxtapos(primaryCode,codes);
  mCodes.add(codes);
  if (Character.isUpperCase((char)primaryCode))   mCapsCount++;
}",0.9474912485414236
88362,"private boolean shouldShowVoiceButton(FieldContext fieldContext,EditorInfo attribute){
  return ENABLE_VOICE_BUTTON && fieldCanDoVoice(fieldContext) && !(attribute != null && attribute.privateImeOptions != null && attribute.privateImeOptions.equals(IME_OPTION_NO_MICROPHONE))&& RecognitionManager.isRecognitionAvailable(this);
}","private boolean shouldShowVoiceButton(FieldContext fieldContext,EditorInfo attribute){
  return ENABLE_VOICE_BUTTON && fieldCanDoVoice(fieldContext) && !(attribute != null && attribute.privateImeOptions != null && attribute.privateImeOptions.equals(IME_OPTION_NO_MICROPHONE))&& SpeechRecognizer.isRecognitionAvailable(this);
}",0.9755351681957186
88363,"@Override protected void onResume(){
  super.onResume();
  int autoTextSize=AutoText.getSize(getListView());
  if (autoTextSize < 1) {
    ((PreferenceGroup)findPreference(PREDICTION_SETTINGS_KEY)).removePreference(mQuickFixes);
  }
  if (!LatinIME.VOICE_INSTALLED || !RecognitionManager.isRecognitionAvailable(this)) {
    getPreferenceScreen().removePreference(mVoicePreference);
  }
 else {
    updateVoiceModeSummary();
  }
}","@Override protected void onResume(){
  super.onResume();
  int autoTextSize=AutoText.getSize(getListView());
  if (autoTextSize < 1) {
    ((PreferenceGroup)findPreference(PREDICTION_SETTINGS_KEY)).removePreference(mQuickFixes);
  }
  if (!LatinIME.VOICE_INSTALLED || !SpeechRecognizer.isRecognitionAvailable(this)) {
    getPreferenceScreen().removePreference(mVoicePreference);
  }
 else {
    updateVoiceModeSummary();
  }
}",0.9813084112149532
88364,"/** 
 * Cancel in-progress speech recognition.
 */
public void cancel(){
switch (mState) {
case LISTENING:
    mLogger.cancelDuringListening();
  break;
case WORKING:
mLogger.cancelDuringWorking();
break;
case ERROR:
mLogger.cancelDuringError();
break;
}
mState=DEFAULT;
mHandler.removeMessages(MSG_CLOSE_ERROR_DIALOG);
mRecognitionManager.cancel();
mUiListener.onCancelVoice();
mRecognitionView.finish();
}","/** 
 * Cancel in-progress speech recognition.
 */
public void cancel(){
switch (mState) {
case LISTENING:
    mLogger.cancelDuringListening();
  break;
case WORKING:
mLogger.cancelDuringWorking();
break;
case ERROR:
mLogger.cancelDuringError();
break;
}
mState=DEFAULT;
mHandler.removeMessages(MSG_CLOSE_ERROR_DIALOG);
mSpeechRecognizer.cancel();
mUiListener.onCancelVoice();
mRecognitionView.finish();
}",0.9630541871921182
88365,"public void onResults(Bundle resultsBundle){
  List<String> results=resultsBundle.getStringArrayList(RecognitionManager.RESULTS_RECOGNITION);
  mState=DEFAULT;
  final Map<String,List<CharSequence>> alternatives=new HashMap<String,List<CharSequence>>();
  if (results.size() >= 2 && ENABLE_WORD_CORRECTIONS) {
    final String[][] words=new String[results.size()][];
    for (int i=0; i < words.length; i++) {
      words[i]=results.get(i).split(""String_Node_Str"");
    }
    for (int key=0; key < words[0].length; key++) {
      alternatives.put(words[0][key],new ArrayList<CharSequence>());
      for (int alt=1; alt < words.length; alt++) {
        int keyBegin=key * words[alt].length / words[0].length;
        int keyEnd=(key + 1) * words[alt].length / words[0].length;
        for (int i=keyBegin; i < Math.min(words[alt].length,keyEnd); i++) {
          List<CharSequence> altList=alternatives.get(words[0][key]);
          if (!altList.contains(words[alt][i]) && altList.size() < 6) {
            altList.add(words[alt][i]);
          }
        }
      }
    }
  }
  if (results.size() > 5) {
    results=results.subList(0,5);
  }
  mUiListener.onVoiceResults(results,alternatives);
  mRecognitionView.finish();
}","public void onResults(Bundle resultsBundle){
  List<String> results=resultsBundle.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION);
  mState=DEFAULT;
  final Map<String,List<CharSequence>> alternatives=new HashMap<String,List<CharSequence>>();
  if (results.size() >= 2 && ENABLE_WORD_CORRECTIONS) {
    final String[][] words=new String[results.size()][];
    for (int i=0; i < words.length; i++) {
      words[i]=results.get(i).split(""String_Node_Str"");
    }
    for (int key=0; key < words[0].length; key++) {
      alternatives.put(words[0][key],new ArrayList<CharSequence>());
      for (int alt=1; alt < words.length; alt++) {
        int keyBegin=key * words[alt].length / words[0].length;
        int keyEnd=(key + 1) * words[alt].length / words[0].length;
        for (int i=keyBegin; i < Math.min(words[alt].length,keyEnd); i++) {
          List<CharSequence> altList=alternatives.get(words[0][key]);
          if (!altList.contains(words[alt][i]) && altList.size() < 6) {
            altList.add(words[alt][i]);
          }
        }
      }
    }
  }
  if (results.size() > 5) {
    results=results.subList(0,5);
  }
  mUiListener.onVoiceResults(results,alternatives);
  mRecognitionView.finish();
}",0.9934479934479934
88366,"private int getErrorStringId(int errorType,boolean endpointed){
switch (errorType) {
case RecognitionManager.ERROR_CLIENT:
    return R.string.voice_not_installed;
case RecognitionManager.ERROR_NETWORK:
  return R.string.voice_network_error;
case RecognitionManager.ERROR_NETWORK_TIMEOUT:
return endpointed ? R.string.voice_network_error : R.string.voice_too_much_speech;
case RecognitionManager.ERROR_AUDIO:
return R.string.voice_audio_error;
case RecognitionManager.ERROR_SERVER:
return R.string.voice_server_error;
case RecognitionManager.ERROR_SPEECH_TIMEOUT:
return R.string.voice_speech_timeout;
case RecognitionManager.ERROR_NO_MATCH:
return R.string.voice_no_match;
default :
return R.string.voice_error;
}
}","private int getErrorStringId(int errorType,boolean endpointed){
switch (errorType) {
case SpeechRecognizer.ERROR_CLIENT:
    return R.string.voice_not_installed;
case SpeechRecognizer.ERROR_NETWORK:
  return R.string.voice_network_error;
case SpeechRecognizer.ERROR_NETWORK_TIMEOUT:
return endpointed ? R.string.voice_network_error : R.string.voice_too_much_speech;
case SpeechRecognizer.ERROR_AUDIO:
return R.string.voice_audio_error;
case SpeechRecognizer.ERROR_SERVER:
return R.string.voice_server_error;
case SpeechRecognizer.ERROR_SPEECH_TIMEOUT:
return R.string.voice_speech_timeout;
case SpeechRecognizer.ERROR_NO_MATCH:
return R.string.voice_no_match;
default :
return R.string.voice_error;
}
}",0.8519040902679831
88367,"/** 
 * @param context the service or activity in which we're running.
 * @param uiHandler object to receive events from VoiceInput.
 */
public VoiceInput(Context context,UiListener uiHandler){
  mLogger=VoiceInputLogger.getLogger(context);
  mRecognitionListener=new ImeRecognitionListener();
  mRecognitionManager=RecognitionManager.createRecognitionManager(context);
  mRecognitionManager.setRecognitionListener(mRecognitionListener);
  mUiListener=uiHandler;
  mContext=context;
  newView();
  String recommendedPackages=SettingsUtil.getSettingsString(context.getContentResolver(),SettingsUtil.LATIN_IME_VOICE_INPUT_RECOMMENDED_PACKAGES,DEFAULT_RECOMMENDED_PACKAGES);
  mRecommendedList=new Whitelist();
  for (  String recommendedPackage : recommendedPackages.split(""String_Node_Str"")) {
    mRecommendedList.addApp(recommendedPackage);
  }
  mBlacklist=new Whitelist();
  mBlacklist.addApp(""String_Node_Str"");
}","/** 
 * @param context the service or activity in which we're running.
 * @param uiHandler object to receive events from VoiceInput.
 */
public VoiceInput(Context context,UiListener uiHandler){
  mLogger=VoiceInputLogger.getLogger(context);
  mRecognitionListener=new ImeRecognitionListener();
  mSpeechRecognizer=SpeechRecognizer.createSpeechRecognizer(context);
  mSpeechRecognizer.setRecognitionListener(mRecognitionListener);
  mUiListener=uiHandler;
  mContext=context;
  newView();
  String recommendedPackages=SettingsUtil.getSettingsString(context.getContentResolver(),SettingsUtil.LATIN_IME_VOICE_INPUT_RECOMMENDED_PACKAGES,DEFAULT_RECOMMENDED_PACKAGES);
  mRecommendedList=new Whitelist();
  for (  String recommendedPackage : recommendedPackages.split(""String_Node_Str"")) {
    mRecommendedList.addApp(recommendedPackage);
  }
  mBlacklist=new Whitelist();
  mBlacklist.addApp(""String_Node_Str"");
}",0.9244249726177436
88368,"public void destroy(){
  mRecognitionManager.destroy();
}","public void destroy(){
  mSpeechRecognizer.destroy();
}",0.8571428571428571
88369,"/** 
 * Called only when the recognition manager's initialization completed
 * @param context context with which {@link #startListening(FieldContext,boolean)} was executed
 */
private void startListeningAfterInitialization(FieldContext context){
  Intent intent=makeIntent();
  intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,""String_Node_Str"");
  intent.putExtra(EXTRA_RECOGNITION_CONTEXT,context.getBundle());
  intent.putExtra(EXTRA_CALLING_PACKAGE,""String_Node_Str"");
  intent.putExtra(RecognizerIntent.EXTRA_MAX_RESULTS,SettingsUtil.getSettingsInt(mContext.getContentResolver(),SettingsUtil.LATIN_IME_MAX_VOICE_RESULTS,1));
  final ContentResolver cr=mContext.getContentResolver();
  putEndpointerExtra(cr,intent,SettingsUtil.LATIN_IME_SPEECH_MINIMUM_LENGTH_MILLIS,EXTRA_SPEECH_MINIMUM_LENGTH_MILLIS,null);
  putEndpointerExtra(cr,intent,SettingsUtil.LATIN_IME_SPEECH_INPUT_COMPLETE_SILENCE_LENGTH_MILLIS,EXTRA_SPEECH_INPUT_COMPLETE_SILENCE_LENGTH_MILLIS,INPUT_COMPLETE_SILENCE_LENGTH_DEFAULT_VALUE_MILLIS);
  putEndpointerExtra(cr,intent,SettingsUtil.LATIN_IME_SPEECH_INPUT_POSSIBLY_COMPLETE_SILENCE_LENGTH_MILLIS,EXTRA_SPEECH_INPUT_POSSIBLY_COMPLETE_SILENCE_LENGTH_MILLIS,null);
  mRecognitionManager.startListening(intent);
}","/** 
 * Called only when the recognition manager's initialization completed
 * @param context context with which {@link #startListening(FieldContext,boolean)} was executed
 */
private void startListeningAfterInitialization(FieldContext context){
  Intent intent=makeIntent();
  intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,""String_Node_Str"");
  intent.putExtra(EXTRA_RECOGNITION_CONTEXT,context.getBundle());
  intent.putExtra(EXTRA_CALLING_PACKAGE,""String_Node_Str"");
  intent.putExtra(RecognizerIntent.EXTRA_MAX_RESULTS,SettingsUtil.getSettingsInt(mContext.getContentResolver(),SettingsUtil.LATIN_IME_MAX_VOICE_RESULTS,1));
  final ContentResolver cr=mContext.getContentResolver();
  putEndpointerExtra(cr,intent,SettingsUtil.LATIN_IME_SPEECH_MINIMUM_LENGTH_MILLIS,EXTRA_SPEECH_MINIMUM_LENGTH_MILLIS,null);
  putEndpointerExtra(cr,intent,SettingsUtil.LATIN_IME_SPEECH_INPUT_COMPLETE_SILENCE_LENGTH_MILLIS,EXTRA_SPEECH_INPUT_COMPLETE_SILENCE_LENGTH_MILLIS,INPUT_COMPLETE_SILENCE_LENGTH_DEFAULT_VALUE_MILLIS);
  putEndpointerExtra(cr,intent,SettingsUtil.LATIN_IME_SPEECH_INPUT_POSSIBLY_COMPLETE_SILENCE_LENGTH_MILLIS,EXTRA_SPEECH_INPUT_POSSIBLY_COMPLETE_SILENCE_LENGTH_MILLIS,null);
  mSpeechRecognizer.startListening(intent);
}",0.9878836833602584
88370,"/** 
 * Add a new keystroke, with codes[0] containing the pressed key's unicode and the rest of the array containing unicode for adjacent keys, sorted by reducing probability/proximity.
 * @param codes the array of unicode values
 */
public void add(int primaryCode,int[] codes){
  mTypedWord.append((char)primaryCode);
  mCodes.add(codes);
  if (Character.isUpperCase((char)primaryCode))   mCapsCount++;
}","/** 
 * Add a new keystroke, with codes[0] containing the pressed key's unicode and the rest of the array containing unicode for adjacent keys, sorted by reducing probability/proximity.
 * @param codes the array of unicode values
 */
public void add(int primaryCode,int[] codes){
  mTypedWord.append((char)primaryCode);
  correctPrimaryJuxtapos(primaryCode,codes);
  mCodes.add(codes);
  if (Character.isUpperCase((char)primaryCode))   mCapsCount++;
}",0.9474912485414236
88371,"private void pickDefaultSuggestion(){
  if (mHandler.hasMessages(MSG_UPDATE_SUGGESTIONS)) {
    mHandler.removeMessages(MSG_UPDATE_SUGGESTIONS);
    updateSuggestions();
  }
  if (mBestWord != null) {
    TextEntryState.acceptedDefault(mWord.getTypedWord(),mBestWord);
    mJustAccepted=true;
    pickSuggestion(mBestWord);
    checkAddToDictionary(mBestWord,AutoDictionary.FREQUENCY_FOR_TYPED);
  }
}","private void pickDefaultSuggestion(){
  if (mHandler.hasMessages(MSG_UPDATE_SUGGESTIONS)) {
    mHandler.removeMessages(MSG_UPDATE_SUGGESTIONS);
    updateSuggestions();
  }
  if (mBestWord != null && mBestWord.length() > 0) {
    TextEntryState.acceptedDefault(mWord.getTypedWord(),mBestWord);
    mJustAccepted=true;
    pickSuggestion(mBestWord);
    checkAddToDictionary(mBestWord,AutoDictionary.FREQUENCY_FOR_TYPED);
  }
}",0.9685990338164252
88372,"private void maybeRemovePreviousPeriod(CharSequence text){
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  CharSequence lastOne=ic.getTextBeforeCursor(1,0);
  if (lastOne != null && lastOne.length() == 1 && lastOne.charAt(0) == '.' && text.charAt(0) == '.') {
    ic.deleteSurroundingText(1,0);
  }
}","private void maybeRemovePreviousPeriod(CharSequence text){
  final InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  CharSequence lastOne=ic.getTextBeforeCursor(1,0);
  if (lastOne != null && lastOne.length() == 1 && lastOne.charAt(0) == KEYCODE_PERIOD && text.charAt(0) == KEYCODE_PERIOD) {
    ic.deleteSurroundingText(1,0);
  }
}",0.9512893982808024
88373,"private void handleSeparator(int primaryCode){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    commitVoiceInput();
  }
  boolean pickedDefault=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mPredicting) {
    if (mAutoCorrectOn && primaryCode != '\'' && (mJustRevertedSeparator == null || mJustRevertedSeparator.length() == 0 || mJustRevertedSeparator.charAt(0) != primaryCode)) {
      pickDefaultSuggestion();
      pickedDefault=true;
      if (primaryCode == KEYCODE_SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
    }
  }
  if (mJustAddedAutoSpace && primaryCode == KEYCODE_ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  sendKeyChar((char)primaryCode);
  TextEntryState.typedCharacter((char)primaryCode,true);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode != KEYCODE_ENTER) {
    swapPunctuationAndSpace();
  }
 else   if (isPredictionOn() && primaryCode == KEYCODE_SPACE) {
    doubleSpace();
  }
  if (pickedDefault && mBestWord != null) {
    TextEntryState.acceptedDefault(mWord.getTypedWord(),mBestWord);
  }
  updateShiftKeyState(getCurrentInputEditorInfo());
  if (ic != null) {
    ic.endBatchEdit();
  }
}","private void handleSeparator(int primaryCode){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    commitVoiceInput();
  }
  boolean pickedDefault=false;
  InputConnection ic=getCurrentInputConnection();
  if (ic != null) {
    ic.beginBatchEdit();
  }
  if (mPredicting) {
    if (mAutoCorrectOn && primaryCode != '\'' && (mJustRevertedSeparator == null || mJustRevertedSeparator.length() == 0 || mJustRevertedSeparator.charAt(0) != primaryCode)) {
      pickDefaultSuggestion();
      pickedDefault=true;
      if (primaryCode == KEYCODE_SPACE) {
        mJustAddedAutoSpace=true;
      }
    }
 else {
      commitTyped(ic);
    }
  }
  if (mJustAddedAutoSpace && primaryCode == KEYCODE_ENTER) {
    removeTrailingSpace();
    mJustAddedAutoSpace=false;
  }
  sendKeyChar((char)primaryCode);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode == KEYCODE_PERIOD) {
    reswapPeriodAndSpace();
  }
  TextEntryState.typedCharacter((char)primaryCode,true);
  if (TextEntryState.getState() == TextEntryState.STATE_PUNCTUATION_AFTER_ACCEPTED && primaryCode != KEYCODE_ENTER) {
    swapPunctuationAndSpace();
  }
 else   if (isPredictionOn() && primaryCode == KEYCODE_SPACE) {
    doubleSpace();
  }
  if (pickedDefault && mBestWord != null) {
    TextEntryState.acceptedDefault(mWord.getTypedWord(),mBestWord);
  }
  updateShiftKeyState(getCurrentInputEditorInfo());
  if (ic != null) {
    ic.endBatchEdit();
  }
}",0.7702848900108186
88374,"public void onText(CharSequence text){
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  if (mPredicting) {
    commitTyped(ic);
  }
  maybeRemovePreviousPeriod(text);
  ic.commitText(text,1);
  ic.endBatchEdit();
  updateShiftKeyState(getCurrentInputEditorInfo());
  mJustRevertedSeparator=null;
  mJustAddedAutoSpace=false;
}","public void onText(CharSequence text){
  if (VOICE_INSTALLED && mVoiceInputHighlighted) {
    commitVoiceInput();
  }
  InputConnection ic=getCurrentInputConnection();
  if (ic == null)   return;
  ic.beginBatchEdit();
  if (mPredicting) {
    commitTyped(ic);
  }
  maybeRemovePreviousPeriod(text);
  ic.commitText(text,1);
  ic.endBatchEdit();
  updateShiftKeyState(getCurrentInputEditorInfo());
  mJustRevertedSeparator=null;
  mJustAddedAutoSpace=false;
}",0.9058402860548272
88375,"private void reloadKeyboards(){
  if (mKeyboardSwitcher == null) {
    mKeyboardSwitcher=new KeyboardSwitcher(this,this);
  }
  mKeyboardSwitcher.setInputLocale(new Locale(mInputLanguage),getSelectedInputLanguages() != null);
  mKeyboardSwitcher.setVoiceMode(mEnableVoice,mVoiceOnPrimary);
  mKeyboardSwitcher.makeKeyboards(true);
}","private void reloadKeyboards(){
  if (mKeyboardSwitcher == null) {
    mKeyboardSwitcher=new KeyboardSwitcher(this,this);
  }
  mKeyboardSwitcher.setInputLocale(new Locale(mInputLanguage),getSelectedInputLanguages() != null);
  if (mInputView != null) {
    mKeyboardSwitcher.setVoiceMode(mEnableVoice,mVoiceOnPrimary);
  }
  mKeyboardSwitcher.makeKeyboards(true);
}",0.9512893982808024
88376,"public void showInitializing(){
  mUiHandler.post(new Runnable(){
    public void run(){
      mProgress.setVisibility(View.GONE);
      mText.setText(R.string.voice_initializing);
      mImage.setImageDrawable(mInitializing);
      mButtonText.setText(mContext.getText(R.string.cancel));
    }
  }
);
}","public void showInitializing(){
  mUiHandler.post(new Runnable(){
    public void run(){
      prepareDialog(false,mContext.getText(R.string.voice_initializing),mInitializing,mContext.getText(R.string.cancel));
    }
  }
);
}",0.4015151515151515
88377,"public void run(){
  exitWorking();
}","public void run(){
  mState=State.READY;
  exitWorking();
}",0.7708333333333334
88378,"public void showError(final String message){
  mState=State.READY;
  mUiHandler.post(new Runnable(){
    public void run(){
      exitWorking();
      mText.setText(message);
      mImage.setImageDrawable(mError);
      mButtonText.setText(mContext.getText(R.string.ok));
    }
  }
);
}","public void showError(final String message){
  mUiHandler.post(new Runnable(){
    public void run(){
      mState=State.READY;
      prepareDialog(false,message,mError,mContext.getText(R.string.ok));
    }
  }
);
}",0.3273453093812375
88379,"public void finish(){
  mState=State.READY;
  mUiHandler.post(new Runnable(){
    public void run(){
      exitWorking();
    }
  }
);
  showStartState();
}","public void finish(){
  mUiHandler.post(new Runnable(){
    public void run(){
      mState=State.READY;
      exitWorking();
    }
  }
);
}",0.7702702702702703
88380,"public void showListening(){
  mState=State.LISTENING;
  mUiHandler.post(new Runnable(){
    public void run(){
      mText.setText(R.string.voice_listening);
      mImage.setImageDrawable(mSpeakNow.get(0));
      mButtonText.setText(mContext.getText(R.string.cancel));
    }
  }
);
  mUiHandler.postDelayed(mUpdateVolumeRunnable,50);
}","public void showListening(){
  mUiHandler.post(new Runnable(){
    public void run(){
      mState=State.LISTENING;
      prepareDialog(false,mContext.getText(R.string.voice_listening),mSpeakNow.get(0),mContext.getText(R.string.cancel));
    }
  }
);
  mUiHandler.postDelayed(mUpdateVolumeRunnable,50);
}",0.6
88381,"public void showWorking(final ByteArrayOutputStream waveBuffer,final int speechStartPosition,final int speechEndPosition){
  mState=State.WORKING;
  mUiHandler.post(new Runnable(){
    public void run(){
      mText.setText(R.string.voice_working);
      mImage.setVisibility(View.GONE);
      mProgress.setVisibility(View.VISIBLE);
      final ShortBuffer buf=ByteBuffer.wrap(waveBuffer.toByteArray()).order(ByteOrder.nativeOrder()).asShortBuffer();
      buf.position(0);
      waveBuffer.reset();
      showWave(buf,speechStartPosition / 2,speechEndPosition / 2);
    }
  }
);
}","public void showWorking(final ByteArrayOutputStream waveBuffer,final int speechStartPosition,final int speechEndPosition){
  mUiHandler.post(new Runnable(){
    public void run(){
      mState=State.WORKING;
      prepareDialog(true,mContext.getText(R.string.voice_working),null,mContext.getText(R.string.cancel));
      final ShortBuffer buf=ByteBuffer.wrap(waveBuffer.toByteArray()).order(ByteOrder.nativeOrder()).asShortBuffer();
      buf.position(0);
      waveBuffer.reset();
      showWave(buf,speechStartPosition / 2,speechEndPosition / 2);
    }
  }
);
}",0.3216783216783216
88382,"public void showInitializing(){
  mUiHandler.post(new Runnable(){
    public void run(){
      mText.setText(R.string.voice_initializing);
      mImage.setImageDrawable(mInitializing);
      mButtonText.setText(mContext.getText(R.string.cancel));
    }
  }
);
}","public void showInitializing(){
  mUiHandler.post(new Runnable(){
    public void run(){
      mProgress.setVisibility(View.GONE);
      mText.setText(R.string.voice_initializing);
      mImage.setImageDrawable(mInitializing);
      mButtonText.setText(mContext.getText(R.string.cancel));
    }
  }
);
}",0.925531914893617
88383,"@Override public boolean isValidWord(CharSequence word){
  final int frequency=getWordFrequency(word);
  return frequency > VALIDITY_THRESHOLD;
}","@Override public boolean isValidWord(CharSequence word){
  final int frequency=getWordFrequency(word);
  return frequency >= VALIDITY_THRESHOLD;
}",0.9965635738831616
88384,"@Override public void addWord(String word,int addFrequency){
  final int length=word.length();
  if (length < 2 || length > getMaxWordLength())   return;
  super.addWord(word,addFrequency);
  final int freq=getWordFrequency(word);
  if (freq > PROMOTION_THRESHOLD) {
    LatinIME.this.promoteToUserDictionary(word,FREQUENCY_FOR_AUTO_ADD);
  }
}","@Override public void addWord(String word,int addFrequency){
  final int length=word.length();
  if (length < 2 || length > getMaxWordLength())   return;
  int freq=getWordFrequency(word);
  freq=freq < 0 ? addFrequency : freq + addFrequency;
  super.addWord(word,freq);
  if (freq >= PROMOTION_THRESHOLD) {
    LatinIME.this.promoteToUserDictionary(word,FREQUENCY_FOR_AUTO_ADD);
  }
}",0.7599451303155007
88385,"@Override protected boolean onLongPress(Key key){
  if (key.codes[0] == Keyboard.KEYCODE_MODE_CHANGE) {
    getOnKeyboardActionListener().onKey(KEYCODE_OPTIONS,null);
    return true;
  }
 else   if (key.codes[0] == Keyboard.KEYCODE_SHIFT) {
    getOnKeyboardActionListener().onKey(KEYCODE_SHIFT_LONGPRESS,null);
    invalidate();
    return true;
  }
 else   if (key.codes[0] == '0' && getKeyboard() == mPhoneKeyboard) {
    getOnKeyboardActionListener().onKey('+',null);
    return true;
  }
 else {
    return super.onLongPress(key);
  }
}","@Override protected boolean onLongPress(Key key){
  if (key.codes[0] == Keyboard.KEYCODE_MODE_CHANGE) {
    getOnKeyboardActionListener().onKey(KEYCODE_OPTIONS,null);
    return true;
  }
 else   if (key.codes[0] == Keyboard.KEYCODE_SHIFT) {
    getOnKeyboardActionListener().onKey(KEYCODE_SHIFT_LONGPRESS,null);
    invalidateAllKeys();
    return true;
  }
 else   if (key.codes[0] == '0' && getKeyboard() == mPhoneKeyboard) {
    getOnKeyboardActionListener().onKey('+',null);
    return true;
  }
 else {
    return super.onLongPress(key);
  }
}",0.9935838680109992
88386,"public void testBogusDomain() throws Exception {
  OEmbedSource source=new BaseOEmbedSource(getContext(),""String_Node_Str"",Uri.parse(""String_Node_Str"")){
  }
;
  source.getThumbnail();
}","public void testBogusDomain() throws Exception {
  OEmbedSource source=new BaseOEmbedSource(getContext(),""String_Node_Str"",Uri.parse(""String_Node_Str"")){
  }
;
  try {
    source.getThumbnail();
  }
 catch (  HttpException e) {
    if (e.getErrorCode() != HttpException.ERROR_NETWORK)     throw e;
  }
}",0.7607361963190185
88387,"public void testBogusData() throws Exception {
  OEmbedSource source=new BaseOEmbedSource(getContext(),""String_Node_Str"",Uri.parse(""String_Node_Str"")){
  }
;
  source.getThumbnail();
}","public void testBogusData() throws Exception {
  OEmbedSource source=new BaseOEmbedSource(getContext(),""String_Node_Str"",Uri.parse(""String_Node_Str"")){
  }
;
  try {
    source.getThumbnail();
  }
 catch (  HttpException e) {
    if (e.getErrorCode() != HttpException.ERROR_PARSER)     throw e;
  }
}",0.7603305785123967
88388,"public void testBogusUrl() throws Exception {
  OEmbedSource source=new BaseOEmbedSource(getContext(),""String_Node_Str"",Uri.parse(""String_Node_Str"")){
  }
;
  source.getThumbnail();
}","public void testBogusUrl() throws Exception {
  OEmbedSource source=new BaseOEmbedSource(getContext(),""String_Node_Str"",Uri.parse(""String_Node_Str"")){
  }
;
  try {
    source.getThumbnail();
  }
 catch (  HttpException e) {
    if (e.getHttpStatusCode() != HttpException.ERROR_HTTP_NOT_FOUND)     throw e;
  }
}",0.7393939393939394
88389,"@Override public void onItemClick(AdapterView<?> adapterView,View view,int i,long l){
  Node nd=(Node)adapterView.getItemAtPosition(i);
  setTitle(service.getForumName() + ""String_Node_Str"" + nd.getName());
  drawerList.setItemChecked(i,true);
  drawerLayout.closeDrawer(drawerList);
  current_node_id=nd.getId();
  progress=new ProgressDialog(view.getContext());
  progress.setTitle(""String_Node_Str"");
  progress.setMessage(""String_Node_Str"");
  progress.show();
  service.getNodeTopics(nd.getId(),this);
}","@Override public void onItemClick(AdapterView<?> adapterView,View view,int i,long l){
  Node nd=(Node)adapterView.getItemAtPosition(i);
  setTitle(service.getForumName() + ""String_Node_Str"" + nd.getName());
  drawerList.setItemChecked(i,true);
  drawerLayout.closeDrawer(drawerList);
  current_node_id=nd.getId();
  progress=new ProgressDialog(drawerLayout.getContext());
  progress.setTitle(""String_Node_Str"");
  progress.setMessage(""String_Node_Str"");
  progress.show();
  service.getNodeTopics(nd.getId(),this);
}",0.984375
88390,"@Override public void onCreate(){
  super.onCreate();
  mInstance=this;
}","@Override public void onCreate(){
  if (mInstance == null) {
    mInstance=this;
  }
  super.onCreate();
}",0.6145251396648045
88391,"@Override public void initialize(){
  Object o=GeneratorUtils.getStereotypePropertyFirst(dgElement,DocGenProfile.tomSawyerDiagramStereotype,""String_Node_Str"",DocGenProfile.PROFILE_NAME,null);
  if (o instanceof String) {
    setDiagramType(DiagramType.valueOf(o.toString()));
  }
  if (o instanceof EnumerationLiteral) {
    Arrays.stream(DiagramType.values()).filter(dt -> dt.getName().equals(((EnumerationLiteral)o).getName())).findAny().ifPresent(this::setDiagramType);
  }
  if (diagramType == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToHumanNameConverter().apply(dgElement) + ""String_Node_Str"");
    return;
  }
  o=GeneratorUtils.getStereotypePropertyFirst(dgElement,DocGenProfile.tomSawyerDiagramStereotype,""String_Node_Str"",DocGenProfile.PROFILE_NAME,false);
  if (o instanceof Boolean) {
    collectRelatedElements=(Boolean)o;
  }
}","@Override public void initialize(){
  Object o=GeneratorUtils.getStereotypePropertyFirst(dgElement,DocGenProfile.tomSawyerDiagramStereotype,""String_Node_Str"",DocGenProfile.PROFILE_NAME,null);
  if (o instanceof String) {
    setDiagramType(DiagramType.valueOf(o.toString()));
  }
  if (o instanceof EnumerationLiteral) {
    Arrays.stream(DiagramType.values()).filter(dt -> dt.getName().equals(((EnumerationLiteral)o).getName())).findAny().ifPresent(this::setDiagramType);
  }
  if (diagramType == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToHumanNameConverter().apply(dgElement) + ""String_Node_Str"");
    return;
  }
  Object o2=GeneratorUtils.getStereotypePropertyFirst(dgElement,DocGenProfile.tomSawyerDiagramStereotype,""String_Node_Str"",DocGenProfile.PROFILE_NAME,false);
  if (o2 instanceof Boolean) {
    collectRelatedElements=(Boolean)o2;
  }
}",0.9933333333333332
88392,"public static String fixString(Object s,boolean convertHtml){
  String rv;
  if (s instanceof String) {
    if (((String)s).contains(""String_Node_Str"")) {
      if (convertHtml) {
        return gov.nasa.jpl.mbee.mdk.util.HtmlManipulator.replaceHtmlEntities(html2docbook((String)s));
      }
 else {
        return gov.nasa.jpl.mbee.mdk.util.Utils.stripHtmlWrapper((String)s);
      }
    }
 else {
      return gov.nasa.jpl.mbee.mdk.util.HtmlManipulator.replaceHtmlEntities(((String)s).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
 else   if (s instanceof Integer) {
    return Integer.toString((Integer)s);
  }
 else   if (s instanceof InstanceValue) {
    InstanceSpecification is=((InstanceValue)s).getInstance();
    if (is != null) {
      return fixString(is.getName());
    }
  }
 else   if (s instanceof ElementValue) {
    Element e=((ElementValue)s).getElement();
    return fixString(e);
  }
 else   if (s instanceof LiteralBoolean) {
    return Boolean.toString(((LiteralBoolean)s).isValue());
  }
 else   if (s instanceof LiteralString) {
    return fixString(((LiteralString)s).getValue());
  }
 else   if (s instanceof LiteralInteger) {
    return Integer.toString(((LiteralInteger)s).getValue());
  }
 else   if (s instanceof LiteralUnlimitedNatural) {
    return Integer.toString(((LiteralUnlimitedNatural)s).getValue());
  }
 else   if (s instanceof LiteralReal) {
    return Double.toString(((LiteralReal)s).getValue());
  }
 else   if ((rv=getRestrictedValue(s)) != null) {
    return rv;
  }
 else   if (s instanceof NamedElement) {
    return fixString(((NamedElement)s).getName());
  }
 else   if (s instanceof Comment) {
    return fixString(((Comment)s).getBody());
  }
 else   if (s instanceof StringProperty) {
    return fixString(((StringProperty)s).getString());
  }
 else   if (s instanceof NumberProperty) {
    return ((NumberProperty)s).getValue().toString();
  }
 else   if (s instanceof BooleanProperty) {
    return ((BooleanProperty)s).getBooleanObject().toString();
  }
 else   if (s instanceof ElementProperty) {
    return fixString(((ElementProperty)s).getElement());
  }
 else   if (s instanceof Slot) {
    return slot2String((Slot)s);
  }
 else   if (s != null) {
    return fixString(s.toString());
  }
  return ""String_Node_Str"";
}","public static String fixString(Object s,boolean convertHtml){
  String rv;
  if (s instanceof String) {
    if (((String)s).contains(""String_Node_Str"")) {
      if (convertHtml) {
        return StringEscapeUtils.escapeHtml4((String)s);
      }
 else {
        return gov.nasa.jpl.mbee.mdk.util.Utils.stripHtmlWrapper((String)s);
      }
    }
 else {
      return StringEscapeUtils.escapeHtml4(((String)s).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
 else   if (s instanceof Integer) {
    return Integer.toString((Integer)s);
  }
 else   if (s instanceof InstanceValue) {
    InstanceSpecification is=((InstanceValue)s).getInstance();
    if (is != null) {
      return fixString(is.getName());
    }
  }
 else   if (s instanceof ElementValue) {
    Element e=((ElementValue)s).getElement();
    return fixString(e);
  }
 else   if (s instanceof LiteralBoolean) {
    return Boolean.toString(((LiteralBoolean)s).isValue());
  }
 else   if (s instanceof LiteralString) {
    return fixString(((LiteralString)s).getValue());
  }
 else   if (s instanceof LiteralInteger) {
    return Integer.toString(((LiteralInteger)s).getValue());
  }
 else   if (s instanceof LiteralUnlimitedNatural) {
    return Integer.toString(((LiteralUnlimitedNatural)s).getValue());
  }
 else   if (s instanceof LiteralReal) {
    return Double.toString(((LiteralReal)s).getValue());
  }
 else   if ((rv=getRestrictedValue(s)) != null) {
    return rv;
  }
 else   if (s instanceof NamedElement) {
    return fixString(((NamedElement)s).getName());
  }
 else   if (s instanceof Comment) {
    return fixString(((Comment)s).getBody());
  }
 else   if (s instanceof StringProperty) {
    return fixString(((StringProperty)s).getString());
  }
 else   if (s instanceof NumberProperty) {
    return ((NumberProperty)s).getValue().toString();
  }
 else   if (s instanceof BooleanProperty) {
    return ((BooleanProperty)s).getBooleanObject().toString();
  }
 else   if (s instanceof ElementProperty) {
    return fixString(((ElementProperty)s).getElement());
  }
 else   if (s instanceof Slot) {
    return slot2String((Slot)s);
  }
 else   if (s != null) {
    return fixString(s.toString());
  }
  return ""String_Node_Str"";
}",0.9428690575479566
88393,"@Override public String toString(){
  return getSourceVertex().toString() + ""String_Node_Str"" + getTargetVertex().toString();
}","@Override public synchronized String toString(){
  return getSourceVertex().toString() + ""String_Node_Str"" + getTargetVertex().toString();
}",0.951310861423221
88394,"@Override public String toString(){
  String string=""String_Node_Str"";
  boolean isFirst=true;
  for (  VertexType v : getSourceVertices()) {
    if (isFirst) {
      isFirst=false;
    }
 else {
      string=string.concat(""String_Node_Str"");
    }
    string=string.concat(v.toString());
  }
  string=string.concat(""String_Node_Str"");
  isFirst=true;
  for (  VertexType v : getTargetVertices()) {
    if (isFirst) {
      isFirst=false;
    }
 else {
      string=string.concat(""String_Node_Str"");
    }
    string=string.concat(v.toString());
  }
  string=string.concat(""String_Node_Str"");
  return string;
}","@Override public synchronized String toString(){
  String string=""String_Node_Str"";
  boolean isFirst=true;
  for (  VertexType v : getSourceVertices()) {
    if (isFirst) {
      isFirst=false;
    }
 else {
      string=string.concat(""String_Node_Str"");
    }
    string=string.concat(v.toString());
  }
  string=string.concat(""String_Node_Str"");
  isFirst=true;
  for (  VertexType v : getTargetVertices()) {
    if (isFirst) {
      isFirst=false;
    }
 else {
      string=string.concat(""String_Node_Str"");
    }
    string=string.concat(v.toString());
  }
  string=string.concat(""String_Node_Str"");
  return string;
}",0.9894736842105264
88395,"@Override public String toString(){
  return get(0).toString() + ""String_Node_Str"" + get(1).toString();
}","@Override public synchronized String toString(){
  return get(0).toString() + ""String_Node_Str"" + get(1).toString();
}",0.9417040358744396
88396,"@Override public String toString(){
  String string=""String_Node_Str"";
  boolean isFirst=true;
  for (  VertexType v : getVertices()) {
    if (isFirst) {
      isFirst=false;
    }
 else {
      string=string.concat(""String_Node_Str"");
    }
    string=string.concat(v.toString());
  }
  string=string.concat(""String_Node_Str"");
  return string;
}","@Override public synchronized String toString(){
  String string=""String_Node_Str"";
  boolean isFirst=true;
  for (  VertexType v : getVertices()) {
    if (isFirst) {
      isFirst=false;
    }
 else {
      string=string.concat(""String_Node_Str"");
    }
    string=string.concat(v.toString());
  }
  string=string.concat(""String_Node_Str"");
  return string;
}",0.9816643159379408
88397,"@Override public int compare(Object o1,Object o2){
  if (value.get(o1) < value.get(o2)) {
    return -1;
  }
 else   if (value.get(o1) == value.get(o2)) {
    return 0;
  }
 else {
    return 1;
  }
}","@Override public int compare(Object o1,Object o2){
  if (value.get(o1) < value.get(o2)) {
    return -1;
  }
 else   if (Objects.equals(value.get(o1),value.get(o2))) {
    return 0;
  }
 else {
    return 1;
  }
}",0.8861985472154964
88398,"public ActionsCategory handleMultipleNodes(ActionsCategory category,ActionsManager manager,List<Element> elements){
  final List<InstanceSpecification> instances=new ArrayList<InstanceSpecification>();
  final List<Element> validatableElements=new ArrayList<Element>();
  boolean hasUneditable=false;
  for (  Element element : elements) {
    if (element != null) {
      if (element instanceof Classifier) {
        validatableElements.add(element);
      }
 else       if (element instanceof InstanceSpecification) {
        instances.add((InstanceSpecification)element);
        validatableElements.add(element);
      }
      if (!hasUneditable && !element.isEditable()) {
        hasUneditable=true;
      }
    }
  }
  if (validatableElements.isEmpty()) {
    return null;
  }
  validateAction=new ValidateAction(validatableElements);
  category.addAction(validateAction);
  return category;
}","public ActionsCategory handleMultipleNodes(ActionsCategory category,ActionsManager manager,List<Element> elements){
  final List<Element> validatableElements=new ArrayList<Element>();
  boolean hasUneditable=false;
  for (  Element element : elements) {
    if (element != null) {
      if (element instanceof Classifier) {
        validatableElements.add(element);
      }
 else       if (element instanceof InstanceSpecification) {
        validatableElements.add(element);
      }
      if (!hasUneditable && !element.isEditable()) {
        hasUneditable=true;
      }
    }
  }
  if (validatableElements.isEmpty()) {
    return null;
  }
  validateAction=new ValidateAction(validatableElements);
  category.addAction(validateAction);
  return category;
}",0.5774562989752863
88399,"public String getContext(){
  return context.getID();
}","public String getContext(){
  return Converters.getElementToIdConverter().apply(context);
}",0.6575342465753424
88400,"/** 
 * Returns a URIBuilder object with a path = ""/alfresco/service/projects/{$PROJECT_ID}/refs/{REF_ID}/elements"" if element is not null
 * @param project The project to gather the mms url and site name information from
 * @return URIBuilder
 */
public static URIBuilder getServiceProjectsRefsElementsUri(Project project){
  URIBuilder elementUri=getServiceProjectsRefsUri(project);
  if (elementUri == null) {
    return null;
  }
  elementUri.setPath(elementUri.getPath() + ""String_Node_Str"" + MDUtils.getWorkspace(project)+ ""String_Node_Str"");
  return elementUri;
}","/** 
 * Returns a URIBuilder object with a path = ""/alfresco/service/projects/{$PROJECT_ID}/refs/{REF_ID}/elements"" if element is not null
 * @param project The project to gather the mms url and site name information from
 * @return URIBuilder
 */
public static URIBuilder getServiceProjectsRefsElementsUri(Project project){
  URIBuilder elementUri=getServiceProjectsRefsUri(project);
  if (elementUri == null) {
    return null;
  }
  String refId=""String_Node_Str"";
  if (project.isRemote() && !EsiUtils.getCurrentBranch(project.getPrimaryProject()).getName().equals(""String_Node_Str"")) {
    refId=EsiUtils.getCurrentBranch(project.getPrimaryProject()).getID().toString();
  }
  elementUri.setPath(elementUri.getPath() + ""String_Node_Str"" + refId+ ""String_Node_Str"");
  return elementUri;
}",0.7947214076246334
88401,"/** 
 * Loads the Teamwork project. Complains if it fails.
 * @throws FileNotFoundException        can't find teamwork project or branch
 * @throws UnsupportedEncodingException logMessage failures
 * @throws InterruptedException         cancel triggered and caught by cancel handler
 * @throws IllegalAccessException       access failure with loaded credentials
 * @throws RemoteException              error getting the projectDescriptor back from the twUtil
 */
private void loadTeamworkProject() throws FileNotFoundException, UnsupportedEncodingException, RemoteException, IllegalAccessException, InterruptedException, URISyntaxException {
  String message;
  if (!(parser.hasOption(""String_Node_Str"") && parser.hasOption(""String_Node_Str"") && parser.hasOption(""String_Node_Str"")&& parser.hasOption(""String_Node_Str""))) {
    illegalStateFailure(""String_Node_Str"");
  }
  message=""String_Node_Str"";
  logMessage(message);
  MDKHelper.setMMSLoginCredentials(parser.getOptionValue(""String_Node_Str""),parser.getOptionValue(""String_Node_Str""));
  if (!(parser.hasOption(""String_Node_Str"") && parser.hasOption(""String_Node_Str"") && parser.hasOption(""String_Node_Str""))) {
    illegalStateFailure(""String_Node_Str"");
  }
  message=""String_Node_Str"";
  logMessage(message);
  String projectTwcId=""String_Node_Str"", branchTwcId=""String_Node_Str"", ticketStore;
  ObjectNode projectsNode=JacksonUtils.getObjectMapper().createObjectNode(), refsNode=JacksonUtils.getObjectMapper().createObjectNode();
  try {
    ticketStore=MMSUtils.getCredentialsTicket(parser.getOptionValue(""String_Node_Str""),parser.getOptionValue(""String_Node_Str""),parser.getOptionValue(""String_Node_Str""),null);
    URIBuilder mmsProjectUri=MMSUtils.getServiceProjectsUri(parser.getOptionValue(""String_Node_Str""));
    mmsProjectUri.setParameter(""String_Node_Str"",ticketStore).setPath(mmsProjectUri.getPath() + ""String_Node_Str"" + parser.getOptionValue(""String_Node_Str""));
    MMSUtils.sendMMSRequest(null,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,mmsProjectUri),null,projectsNode);
    if (!parser.getOptionValue(""String_Node_Str"").equals(""String_Node_Str"")) {
      URIBuilder mmsRefUri=MMSUtils.getServiceProjectsRefsUri(parser.getOptionValue(""String_Node_Str""),parser.getOptionValue(""String_Node_Str""));
      mmsRefUri.setParameter(""String_Node_Str"",ticketStore).setPath(mmsRefUri.getPath() + ""String_Node_Str"" + parser.getOptionValue(""String_Node_Str""));
      MMSUtils.sendMMSRequest(null,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,mmsRefUri),null,refsNode);
    }
  }
 catch (  IOException|ServerException e) {
    illegalStateFailure(""String_Node_Str"");
    e.printStackTrace();
  }
  JsonNode arrayNode, idNode;
  if ((arrayNode=projectsNode.get(""String_Node_Str"")) != null && arrayNode.isArray()) {
    for (    JsonNode projectNode : arrayNode) {
      if (projectNode.isObject() && (idNode=projectNode.get(MDKConstants.ID_KEY)) != null && idNode.isTextual() && idNode.asText().equals((parser.getOptionValue((""String_Node_Str"")))) && (idNode=projectNode.get(MDKConstants.TWC_ID_KEY)) != null && idNode.isTextual()) {
        projectTwcId=idNode.asText();
      }
    }
  }
  if ((arrayNode=refsNode.get(""String_Node_Str"")) != null && arrayNode.isArray()) {
    for (    JsonNode refNode : arrayNode) {
      if (refNode.isObject() && (idNode=refNode.get(MDKConstants.ID_KEY)) != null && idNode.isTextual() && idNode.asText().equals((parser.getOptionValue((""String_Node_Str"")))) && (idNode=refNode.get(MDKConstants.TWC_ID_KEY)) != null && idNode.isTextual()) {
        branchTwcId=idNode.asText();
      }
    }
  }
  if (projectTwcId.isEmpty()) {
    illegalStateFailure(""String_Node_Str"");
  }
  ProjectDescriptor projectDescriptor=null;
  try {
    Collection<ProjectDescriptor> descriptors=EsiUtils.getRemoteProjectDescriptors();
    for (    ProjectDescriptor descriptor : descriptors) {
      if (descriptor.getURI().getPath().startsWith(""String_Node_Str"" + projectTwcId)) {
        projectDescriptor=descriptor;
        break;
      }
    }
  }
 catch (  Exception e1) {
    illegalStateFailure(""String_Node_Str"");
  }
  if (!branchTwcId.isEmpty()) {
    projectDescriptor=EsiUtils.getDescriptorByBranchID(projectDescriptor,java.util.UUID.fromString(branchTwcId));
  }
 else   if (!parser.getOptionValue(""String_Node_Str"").equals(""String_Node_Str"")) {
    projectDescriptor=EsiUtils.getDescriptorByBranchID(projectDescriptor,java.util.UUID.fromString(parser.getOptionValue(""String_Node_Str"")));
  }
 else {
    illegalStateFailure(""String_Node_Str"");
  }
  message=""String_Node_Str"";
  logMessage(message);
  Application.getInstance().getProjectsManager().loadProject(projectDescriptor,true);
  if (Application.getInstance().getProject() == null) {
    illegalStateFailure(""String_Node_Str"" + parser.getOptionValue(""String_Node_Str"") + ""String_Node_Str""+ projectDescriptor.getRepresentationString()+ ""String_Node_Str"");
  }
  twLoaded=true;
  project=Application.getInstance().getProject();
  while (!messageLog.isEmpty()) {
    Application.getInstance().getGUILog().log(messageLog.remove(0));
  }
  message=""String_Node_Str"";
  logMessage(message);
  checkCancel();
}","/** 
 * Loads the Teamwork project. Complains if it fails.
 * @throws FileNotFoundException        can't find teamwork project or branch
 * @throws UnsupportedEncodingException logMessage failures
 * @throws InterruptedException         cancel triggered and caught by cancel handler
 * @throws IllegalAccessException       access failure with loaded credentials
 * @throws RemoteException              error getting the projectDescriptor back from the twUtil
 */
private void loadTeamworkProject() throws FileNotFoundException, UnsupportedEncodingException, RemoteException, IllegalAccessException, InterruptedException, URISyntaxException {
  String message;
  if (!(parser.hasOption(""String_Node_Str"") && parser.hasOption(""String_Node_Str"") && parser.hasOption(""String_Node_Str"")&& parser.hasOption(""String_Node_Str""))) {
    illegalStateFailure(""String_Node_Str"");
  }
  message=""String_Node_Str"";
  logMessage(message);
  MDKHelper.setMMSLoginCredentials(parser.getOptionValue(""String_Node_Str""),parser.getOptionValue(""String_Node_Str""));
  if (!(parser.hasOption(""String_Node_Str"") && parser.hasOption(""String_Node_Str"") && parser.hasOption(""String_Node_Str""))) {
    illegalStateFailure(""String_Node_Str"");
  }
  message=""String_Node_Str"";
  logMessage(message);
  String projectTwcId=""String_Node_Str"", branchTwcId=""String_Node_Str"", ticketStore;
  ObjectNode projectsNode=JacksonUtils.getObjectMapper().createObjectNode(), refsNode=JacksonUtils.getObjectMapper().createObjectNode();
  try {
    ticketStore=MMSUtils.getCredentialsTicket(parser.getOptionValue(""String_Node_Str""),parser.getOptionValue(""String_Node_Str""),parser.getOptionValue(""String_Node_Str""),null);
    URIBuilder mmsProjectUri=MMSUtils.getServiceProjectsUri(parser.getOptionValue(""String_Node_Str""));
    mmsProjectUri.setParameter(""String_Node_Str"",ticketStore).setPath(mmsProjectUri.getPath() + ""String_Node_Str"" + parser.getOptionValue(""String_Node_Str""));
    MMSUtils.sendMMSRequest(null,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,mmsProjectUri),null,projectsNode);
    if (!parser.getOptionValue(""String_Node_Str"").equals(""String_Node_Str"")) {
      URIBuilder mmsRefUri=MMSUtils.getServiceProjectsRefsUri(parser.getOptionValue(""String_Node_Str""),parser.getOptionValue(""String_Node_Str""));
      mmsRefUri.setParameter(""String_Node_Str"",ticketStore).setPath(mmsRefUri.getPath() + ""String_Node_Str"" + parser.getOptionValue(""String_Node_Str""));
      MMSUtils.sendMMSRequest(null,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,mmsRefUri),null,refsNode);
    }
  }
 catch (  IOException|ServerException e) {
    illegalStateFailure(""String_Node_Str"");
    e.printStackTrace();
  }
  JsonNode arrayNode, idNode;
  if ((arrayNode=projectsNode.get(""String_Node_Str"")) != null && arrayNode.isArray()) {
    for (    JsonNode projectNode : arrayNode) {
      if (projectNode.isObject() && (idNode=projectNode.get(MDKConstants.ID_KEY)) != null && idNode.isTextual() && idNode.asText().equals((parser.getOptionValue((""String_Node_Str"")))) && (idNode=projectNode.get(MDKConstants.TWC_ID_KEY)) != null && idNode.isTextual()) {
        projectTwcId=idNode.asText();
      }
    }
  }
  if ((arrayNode=refsNode.get(""String_Node_Str"")) != null && arrayNode.isArray()) {
    for (    JsonNode refNode : arrayNode) {
      if (refNode.isObject() && (idNode=refNode.get(MDKConstants.ID_KEY)) != null && idNode.isTextual() && idNode.asText().equals((parser.getOptionValue((""String_Node_Str"")))) && (idNode=refNode.get(MDKConstants.TWC_ID_KEY)) != null && idNode.isTextual()) {
        branchTwcId=idNode.asText();
      }
    }
  }
  if (projectTwcId.isEmpty()) {
    illegalStateFailure(""String_Node_Str"");
  }
  ProjectDescriptor projectDescriptor=null;
  try {
    Collection<ProjectDescriptor> descriptors=EsiUtils.getRemoteProjectDescriptors();
    for (    ProjectDescriptor descriptor : descriptors) {
      if (descriptor.getURI().getPath().startsWith(""String_Node_Str"" + projectTwcId)) {
        projectDescriptor=descriptor;
        break;
      }
    }
  }
 catch (  Exception e1) {
    illegalStateFailure(""String_Node_Str"");
  }
  if (!branchTwcId.isEmpty()) {
    projectDescriptor=EsiUtils.getDescriptorByBranchID(projectDescriptor,java.util.UUID.fromString(branchTwcId));
  }
 else   if (!parser.getOptionValue(""String_Node_Str"").equals(""String_Node_Str"")) {
    projectDescriptor=EsiUtils.getDescriptorByBranchID(projectDescriptor,java.util.UUID.fromString(parser.getOptionValue(""String_Node_Str"")));
  }
  message=""String_Node_Str"";
  logMessage(message);
  Application.getInstance().getProjectsManager().loadProject(projectDescriptor,true);
  if (Application.getInstance().getProject() == null) {
    illegalStateFailure(""String_Node_Str"" + parser.getOptionValue(""String_Node_Str"") + ""String_Node_Str""+ projectDescriptor.getRepresentationString()+ ""String_Node_Str"");
  }
  twLoaded=true;
  project=Application.getInstance().getProject();
  while (!messageLog.isEmpty()) {
    Application.getInstance().getGUILog().log(messageLog.remove(0));
  }
  message=""String_Node_Str"";
  logMessage(message);
  checkCancel();
}",0.9945514691574237
88402,"public static final boolean createSpecializedType(final StructuralFeature redefinedAttribute,final Classifier parent,final List<RedefinableElement> traveled,List<Classifier> visited,boolean isIndividual,boolean isRecursive){
  if (!parent.isEditable()) {
    Application.getInstance().getGUILog().log(parent.getQualifiedName() + ""String_Node_Str"");
    return true;
  }
  if (redefinedAttribute.getType() instanceof Classifier && !(redefinedAttribute.getType() instanceof Property)) {
    boolean hasTraveled=false;
    if (traveled.contains(redefinedAttribute)) {
      hasTraveled=true;
    }
 else {
      for (      final RedefinableElement redefinedProperty : redefinedAttribute.getRedefinedElement()) {
        if (traveled.contains(redefinedProperty)) {
          hasTraveled=true;
          break;
        }
      }
    }
    if (hasTraveled) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + redefinedAttribute.getQualifiedName() + ""String_Node_Str"");
      return false;
    }
    traveled.add(redefinedAttribute);
    for (    final RedefinableElement re : redefinedAttribute.getRedefinedElement()) {
      if (re instanceof RedefinableElement) {
        traveled.add(re);
      }
    }
    final Classifier general=(Classifier)redefinedAttribute.getType();
    Type special=null;
    if (isIndividual || (isRecursive && getExistingSpecial(redefinedAttribute) == null)) {
      SpecializeStructureAction speca=new SpecializeStructureAction(general,false,""String_Node_Str"",isRecursive,isIndividual);
      special=speca.createSpecialClassifier(parent,traveled,visited);
    }
 else     if (getExistingSpecial(redefinedAttribute) != null) {
      special=getExistingSpecial(redefinedAttribute);
    }
 else     if (visited.contains(general)) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + general.getQualifiedName() + ""String_Node_Str""+ redefinedAttribute.getQualifiedName()+ ""String_Node_Str"");
      return false;
    }
    if (special == null) {
      return true;
    }
    redefinedAttribute.setType(special);
  }
  return true;
}","public static final boolean createSpecializedType(final StructuralFeature redefinedAttribute,final Classifier parent,final List<RedefinableElement> traveled,List<Classifier> visited,boolean isIndividual,boolean isRecursive){
  if (!parent.isEditable()) {
    Application.getInstance().getGUILog().log(parent.getQualifiedName() + ""String_Node_Str"");
    return true;
  }
  if (redefinedAttribute.getType() instanceof Classifier && !(redefinedAttribute.getType() instanceof Property)) {
    boolean hasTraveled=false;
    if (traveled.contains(redefinedAttribute)) {
      hasTraveled=true;
    }
 else {
      for (      final RedefinableElement redefinedProperty : redefinedAttribute.getRedefinedElement()) {
        if (traveled.contains(redefinedProperty)) {
          hasTraveled=true;
          break;
        }
      }
    }
    if (hasTraveled) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + redefinedAttribute.getQualifiedName() + ""String_Node_Str"");
      return false;
    }
    traveled.add(redefinedAttribute);
    for (    final RedefinableElement re : redefinedAttribute.getRedefinedElement()) {
      if (re instanceof RedefinableElement) {
        traveled.add(re);
      }
    }
    final Classifier general=(Classifier)redefinedAttribute.getType();
    Type special=null;
    if (isIndividual || (isRecursive && getExistingSpecial(redefinedAttribute) == null)) {
      SpecializeStructureAction speca=new SpecializeStructureAction(general,false,""String_Node_Str"",isRecursive,isIndividual);
      special=speca.createSpecialClassifier(parent,new ArrayList<>(traveled),visited);
    }
 else     if (getExistingSpecial(redefinedAttribute) != null) {
      special=getExistingSpecial(redefinedAttribute);
    }
 else     if (visited.contains(general)) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + general.getQualifiedName() + ""String_Node_Str""+ redefinedAttribute.getQualifiedName()+ ""String_Node_Str"");
      return false;
    }
    if (special == null) {
      return true;
    }
    redefinedAttribute.setType(special);
  }
  return true;
}",0.9959436888570748
88403,"/** 
 * Returns a URIBuilder object with a path = ""/alfresco/service/projects/{$PROJECT_ID}/refs/{$WORKSPACE_ID}/elements/${ELEMENT_ID}"" if element is not null
 * @param project The project to gather the mms url and site name information from
 * @return URIBuilder
 */
public static URIBuilder getServiceProjectsRefsElementsUri(Project project){
  URIBuilder elementUri=getServiceProjectsRefsUri(project);
  if (elementUri == null) {
    return null;
  }
  elementUri.setPath(elementUri.getPath() + ""String_Node_Str"" + MDUtils.getWorkspace(project)+ ""String_Node_Str"");
  return elementUri;
}","/** 
 * Returns a URIBuilder object with a path = ""/alfresco/service/projects/{$PROJECT_ID}/refs/{$WORKSPACE_ID}/elements/${ELEMENT_ID}"" if element is not null
 * @param project The project to gather the mms url and site name information from
 * @return URIBuilder
 */
public static URIBuilder getServiceProjectsRefsElementsUri(Project project){
  URIBuilder elementUri=getServiceProjectsRefsUri(project);
  if (elementUri == null) {
    return null;
  }
  elementUri.setPath(elementUri.getPath() + ""String_Node_Str"" + MDUtils.getBranchId(project)+ ""String_Node_Str"");
  return elementUri;
}",0.985629754860524
88404,"@Override @SuppressWarnings(""String_Node_Str"") public void projectSaved(Project project,boolean savedInServer){
  CoordinatedSyncProjectMapping coordinatedSyncProjectMapping=getProjectMapping(project);
  if (coordinatedSyncProjectMapping.isDisabled() || deltaSyncRunner == null || deltaSyncRunner.isFailure()) {
    return;
  }
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(project);
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  Message lastMessage;
  if (jmsMessageListener != null && (lastMessage=jmsMessageListener.getLastMessage()) != null) {
    try {
      lastMessage.acknowledge();
    }
 catch (    JMSException|IllegalStateException e) {
      e.printStackTrace();
    }
  }
  if (!deltaSyncRunner.getSuccessfulJmsChangelog().isEmpty()) {
    ObjectNode teamworkCommittedMessage=JacksonUtils.getObjectMapper().createObjectNode();
    teamworkCommittedMessage.put(""String_Node_Str"",""String_Node_Str"");
    teamworkCommittedMessage.put(""String_Node_Str"",TicketUtils.getUsername(project));
    teamworkCommittedMessage.set(""String_Node_Str"",SyncElements.buildJson(deltaSyncRunner.getSuccessfulJmsChangelog()));
    try {
      TextMessage successfulTextMessage=jmsSyncProjectMapping.getSession().createTextMessage(JacksonUtils.getObjectMapper().writeValueAsString(teamworkCommittedMessage));
      successfulTextMessage.setStringProperty(JMSUtils.MSG_SELECTOR_PROJECT_ID,Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()));
      successfulTextMessage.setStringProperty(JMSUtils.MSG_SELECTOR_REF_ID,MDUtils.getWorkspace(project) + ""String_Node_Str"");
      jmsSyncProjectMapping.getMessageProducer().send(successfulTextMessage);
      int syncCount=deltaSyncRunner.getSuccessfulJmsChangelog().flattenedSize();
      Application.getInstance().getGUILog().log(""String_Node_Str"" + syncCount + ""String_Node_Str""+ (syncCount != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
 catch (    JMSException|JsonProcessingException e) {
      e.printStackTrace();
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public void projectSaved(Project project,boolean savedInServer){
  CoordinatedSyncProjectMapping coordinatedSyncProjectMapping=getProjectMapping(project);
  if (coordinatedSyncProjectMapping.isDisabled() || deltaSyncRunner == null || deltaSyncRunner.isFailure()) {
    return;
  }
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(project);
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  Message lastMessage;
  if (jmsMessageListener != null && (lastMessage=jmsMessageListener.getLastMessage()) != null) {
    try {
      lastMessage.acknowledge();
    }
 catch (    JMSException|IllegalStateException e) {
      e.printStackTrace();
    }
  }
  if (!deltaSyncRunner.getSuccessfulJmsChangelog().isEmpty()) {
    ObjectNode teamworkCommittedMessage=JacksonUtils.getObjectMapper().createObjectNode();
    teamworkCommittedMessage.put(""String_Node_Str"",""String_Node_Str"");
    teamworkCommittedMessage.put(""String_Node_Str"",TicketUtils.getUsername(project));
    teamworkCommittedMessage.set(""String_Node_Str"",SyncElements.buildJson(deltaSyncRunner.getSuccessfulJmsChangelog()));
    try {
      TextMessage successfulTextMessage=jmsSyncProjectMapping.getSession().createTextMessage(JacksonUtils.getObjectMapper().writeValueAsString(teamworkCommittedMessage));
      successfulTextMessage.setStringProperty(JMSUtils.MSG_SELECTOR_PROJECT_ID,Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()));
      successfulTextMessage.setStringProperty(JMSUtils.MSG_SELECTOR_REF_ID,MDUtils.getBranchId(project) + ""String_Node_Str"");
      jmsSyncProjectMapping.getMessageProducer().send(successfulTextMessage);
      int syncCount=deltaSyncRunner.getSuccessfulJmsChangelog().flattenedSize();
      Application.getInstance().getGUILog().log(""String_Node_Str"" + syncCount + ""String_Node_Str""+ (syncCount != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
 catch (    JMSException|JsonProcessingException e) {
      e.printStackTrace();
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
  }
}",0.9961599277162864
88405,"private static boolean initDurable(Project project){
  String projectID=Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
  String workspaceID=MDUtils.getWorkspace(project);
  if (!TicketUtils.isTicketSet(project)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
    return false;
  }
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject())) {
    if (!com.nomagic.magicdraw.teamwork2.esi.EsiSessionUtil.isLoggedIn()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
      return false;
    }
  }
  JMSUtils.JMSInfo jmsInfo;
  try {
    jmsInfo=JMSUtils.getJMSInfo(project);
  }
 catch (  ServerException|IllegalArgumentException|IllegalStateException e) {
    e.printStackTrace();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str""+ e.getMessage());
    return false;
  }
  String url=(jmsInfo != null ? jmsInfo.getUrl() : null);
  if (url == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
    return false;
  }
  if (workspaceID == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
    return false;
  }
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject())) {
    String user=EsiUtils.getLoggedUserName();
    if (user == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return false;
    }
  }
  JMSSyncProjectMapping jmsSyncProjectMapping=getProjectMapping(project);
  try {
    ConnectionFactory connectionFactory=JMSUtils.createConnectionFactory(jmsInfo);
    if (connectionFactory == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
      return false;
    }
    String subscriberId=projectID + ""String_Node_Str"" + workspaceID+ ""String_Node_Str""+ TicketUtils.getUsername(project);
    JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
    Connection connection=connectionFactory.createConnection();
    connection.setExceptionListener(jmsMessageListener);
    connection.setClientID(subscriberId);
    Session session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);
    Topic topic=null;
    try {
      if (JMSUtils.getInitialContext() != null) {
        topic=(Topic)JMSUtils.getInitialContext().lookup(JMSUtils.JMS_TOPIC);
      }
    }
 catch (    NameNotFoundException ignored) {
    }
    if (topic == null) {
      topic=session.createTopic(JMSUtils.JMS_TOPIC);
    }
    String messageSelector=JMSUtils.constructSelectorString(projectID,workspaceID);
    MessageConsumer consumer=session.createDurableSubscriber(topic,subscriberId,messageSelector,true);
    consumer.setMessageListener(jmsMessageListener);
    MessageProducer producer=session.createProducer(topic);
    connection.start();
    jmsSyncProjectMapping.setConnection(connection);
    jmsSyncProjectMapping.setSession(session);
    jmsSyncProjectMapping.setMessageConsumer(consumer);
    jmsSyncProjectMapping.setMessageProducer(producer);
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    jmsSyncProjectMapping.getJmsMessageListener().setDisabled(true);
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str""+ e.getMessage());
    return false;
  }
}","private static boolean initDurable(Project project){
  String projectID=Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
  String workspaceID=MDUtils.getBranchId(project);
  if (!TicketUtils.isTicketSet(project)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
    return false;
  }
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject())) {
    if (!com.nomagic.magicdraw.teamwork2.esi.EsiSessionUtil.isLoggedIn()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
      return false;
    }
  }
  JMSUtils.JMSInfo jmsInfo;
  try {
    jmsInfo=JMSUtils.getJMSInfo(project);
  }
 catch (  ServerException|IllegalArgumentException|IllegalStateException e) {
    e.printStackTrace();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str""+ e.getMessage());
    return false;
  }
  String url=(jmsInfo != null ? jmsInfo.getUrl() : null);
  if (url == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
    return false;
  }
  if (workspaceID == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
    return false;
  }
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject())) {
    String user=EsiUtils.getLoggedUserName();
    if (user == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return false;
    }
  }
  JMSSyncProjectMapping jmsSyncProjectMapping=getProjectMapping(project);
  try {
    ConnectionFactory connectionFactory=JMSUtils.createConnectionFactory(jmsInfo);
    if (connectionFactory == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
      return false;
    }
    String subscriberId=projectID + ""String_Node_Str"" + workspaceID+ ""String_Node_Str""+ TicketUtils.getUsername(project);
    JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
    Connection connection=connectionFactory.createConnection();
    connection.setExceptionListener(jmsMessageListener);
    connection.setClientID(subscriberId);
    Session session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);
    Topic topic=null;
    try {
      if (JMSUtils.getInitialContext() != null) {
        topic=(Topic)JMSUtils.getInitialContext().lookup(JMSUtils.JMS_TOPIC);
      }
    }
 catch (    NameNotFoundException ignored) {
    }
    if (topic == null) {
      topic=session.createTopic(JMSUtils.JMS_TOPIC);
    }
    String messageSelector=JMSUtils.constructSelectorString(projectID,workspaceID);
    MessageConsumer consumer=session.createDurableSubscriber(topic,subscriberId,messageSelector,true);
    consumer.setMessageListener(jmsMessageListener);
    MessageProducer producer=session.createProducer(topic);
    connection.start();
    jmsSyncProjectMapping.setConnection(connection);
    jmsSyncProjectMapping.setSession(session);
    jmsSyncProjectMapping.setMessageConsumer(consumer);
    jmsSyncProjectMapping.setMessageProducer(producer);
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    jmsSyncProjectMapping.getJmsMessageListener().setDisabled(true);
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str""+ e.getMessage());
    return false;
  }
}",0.9977878985035784
88406,"@Override public void run(ProgressStatus progressStatus){
  BranchInfoImpl branchInfoImpl=toBranchInfoImpl(branchInfo);
  if (branchInfoImpl == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  ProjectDescriptor projectDescriptor=ProjectDescriptorsFactory.createAnyRemoteProjectDescriptor(project);
  ProjectDescriptor branchDescriptor=EsiUtils.getDescriptorByBranchID(projectDescriptor,branchInfoImpl.getID());
  List<CommitInfoImpl> branchCommits=toCommitInfoImpls(EsiUtils.getVersions(branchDescriptor));
  long startRevisionCommitId=branchInfoImpl.getStartRevision();
  CommitInfoImpl startRevisionCommitInfo=branchCommits.stream().filter(version -> startRevisionCommitId == version.getID()).findAny().orElse(null);
  if (startRevisionCommitInfo == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  UUID parentBranchUuid=startRevisionCommitInfo.getBranchID();
  EsiUtils.EsiBranchInfo parentBranchInfo=EsiUtils.getBranches(projectDescriptor).stream().filter(branch -> branch.getID().equals(parentBranchUuid)).findAny().orElse(null);
  if (parentBranchInfo == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  String parentBranchId=parentBranchUuid.toString();
  String parentBranchName=parentBranchInfo.getName();
  if (parentBranchInfo.getName().equals(""String_Node_Str"")) {
    parentBranchId=""String_Node_Str"";
    parentBranchName=""String_Node_Str"";
  }
  int parentCommitsBehind=0;
  long latestRevisionCommitId=branchInfoImpl.getLatestRevision();
  CommitInfoImpl latestRevisionCommitInfo=branchCommits.stream().filter(version -> latestRevisionCommitId == version.getID()).findAny().orElse(null);
  if (latestRevisionCommitInfo == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  CommitInfoImpl commit=latestRevisionCommitInfo;
  while (commit != null && commit.getID() != startRevisionCommitId) {
    parentCommitsBehind++;
    long directParent=commit.getDirectParent();
    commit=branchCommits.stream().filter(version -> directParent == version.getID()).findAny().orElse(null);
  }
  parentCommitsBehind--;
  int parentCommitsAhead=0;
  ProjectDescriptor parentBranchDescriptor=EsiUtils.getDescriptorByBranchID(projectDescriptor,parentBranchUuid);
  List<CommitInfoImpl> parentBranchCommits=toCommitInfoImpls(EsiUtils.getVersions(parentBranchDescriptor));
  BranchInfoImpl parentBranchInfoImpl=toBranchInfoImpl(parentBranchInfo);
  if (parentBranchInfoImpl == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
  }
  long parentLatestRevisionCommitId=parentBranchInfoImpl.getLatestRevision();
  CommitInfoImpl parentLatestRevisionCommitInfo=parentBranchCommits.stream().filter(version -> parentLatestRevisionCommitId == version.getID()).findAny().orElse(null);
  if (parentLatestRevisionCommitInfo == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  commit=parentLatestRevisionCommitInfo;
  while (commit != null && commit.getID() != startRevisionCommitId) {
    parentCommitsAhead++;
    long directParent=commit.getDirectParent();
    commit=parentBranchCommits.stream().filter(version -> directParent == version.getID()).findAny().orElse(null);
  }
  JsonNode parentBranchJsonNode=null;
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsUri(project);
  if (requestUri == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + parentBranchId);
  try {
    HttpRequestBase request=MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri);
    File responseFile=MMSUtils.sendMMSRequest(project,request);
    ObjectNode response;
    try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
      response=JacksonUtils.parseJsonObject(jsonParser);
    }
     JsonNode refsArray, value;
    if ((refsArray=response.get(""String_Node_Str"")) != null && refsArray.isArray()) {
      for (      JsonNode refJson : refsArray) {
        if (refJson.isObject()) {
          ObjectNode refObjectNode=(ObjectNode)refJson;
          refObjectNode.remove(MDKConstants.PARENT_REF_ID_KEY);
          String entryKey;
          if ((value=refObjectNode.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
            entryKey=refObjectNode.get(MDKConstants.ID_KEY).asText();
            if (entryKey.equals(parentBranchId)) {
              parentBranchJsonNode=refObjectNode;
            }
          }
        }
      }
    }
  }
 catch (  IOException|URISyntaxException|ServerException e) {
    e.printStackTrace();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    return;
  }
  if (parentBranchJsonNode == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + parentBranchName + ""String_Node_Str"");
    return;
  }
  requestUri=MMSUtils.getServiceProjectsRefsUri(project);
  if (requestUri == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  Collection<ObjectNode> refsNodes=new LinkedList<>();
  ObjectNode branchNode=BranchValidator.getRefObjectNode(project,branchInfo,parentBranchId);
  refsNodes.add(branchNode);
  if (parentCommitsBehind > 0 || parentCommitsAhead > 0) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + parentBranchName + ""String_Node_Str""+ (parentCommitsBehind > 0 ? NumberFormat.getInstance().format(parentCommitsBehind) + ""String_Node_Str"" + (parentCommitsBehind != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"" : ""String_Node_Str"")+ (parentCommitsBehind > 0 && parentCommitsAhead > 0 ? ""String_Node_Str"" : ""String_Node_Str"")+ (parentCommitsAhead > 0 ? NumberFormat.getInstance().format(parentCommitsAhead) + ""String_Node_Str"" + (parentCommitsAhead != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ branchInfo.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  try {
    File sendFile=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,refsNodes,MMSUtils.JsonBlobType.REF);
    HttpRequestBase request=MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendFile,ContentType.APPLICATION_JSON);
    MMSUtils.sendMMSRequest(project,request);
  }
 catch (  IOException|URISyntaxException|ServerException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return;
  }
  Application.getInstance().getGUILog().log(""String_Node_Str"" + branchInfo.getName() + ""String_Node_Str"");
  if (validateModel) {
    RunnableWithProgress temp=new ManualSyncRunner(Collections.singletonList(project.getPrimaryModel()),project,-1);
    ProgressStatusRunner.runWithProgressStatus(temp,""String_Node_Str"",true,0);
  }
}","@Override public void run(ProgressStatus progressStatus){
  BranchInfoImpl branchInfoImpl=toBranchInfoImpl(branchInfo);
  if (branchInfoImpl == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  ProjectDescriptor projectDescriptor=ProjectDescriptorsFactory.createAnyRemoteProjectDescriptor(project);
  ProjectDescriptor branchDescriptor=EsiUtils.getDescriptorByBranchID(projectDescriptor,branchInfoImpl.getID());
  List<CommitInfoImpl> branchCommits=toCommitInfoImpls(EsiUtils.getVersions(branchDescriptor));
  long startRevisionCommitId=branchInfoImpl.getStartRevision();
  CommitInfoImpl startRevisionCommitInfo=branchCommits.stream().filter(version -> startRevisionCommitId == version.getID()).findAny().orElse(null);
  if (startRevisionCommitInfo == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  UUID parentBranchUuid=startRevisionCommitInfo.getBranchID();
  EsiUtils.EsiBranchInfo parentBranchInfo=EsiUtils.getBranches(projectDescriptor).stream().filter(branch -> branch.getID().equals(parentBranchUuid)).findAny().orElse(null);
  if (parentBranchInfo == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  String parentBranchId=parentBranchUuid.toString();
  String parentBranchName=parentBranchInfo.getName();
  if (parentBranchInfo.getName().equals(""String_Node_Str"")) {
    parentBranchId=""String_Node_Str"";
    parentBranchName=""String_Node_Str"";
  }
  int parentCommitsBehind=0;
  long latestRevisionCommitId=branchInfoImpl.getLatestRevision();
  CommitInfoImpl latestRevisionCommitInfo=branchCommits.stream().filter(version -> latestRevisionCommitId == version.getID()).findAny().orElse(null);
  if (latestRevisionCommitInfo == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  CommitInfoImpl commit=latestRevisionCommitInfo;
  while (commit != null && commit.getID() != startRevisionCommitId) {
    parentCommitsBehind++;
    long directParent=commit.getDirectParent();
    commit=branchCommits.stream().filter(version -> directParent == version.getID()).findAny().orElse(null);
  }
  parentCommitsBehind--;
  int parentCommitsAhead=0;
  ProjectDescriptor parentBranchDescriptor=EsiUtils.getDescriptorByBranchID(projectDescriptor,parentBranchUuid);
  List<CommitInfoImpl> parentBranchCommits=toCommitInfoImpls(EsiUtils.getVersions(parentBranchDescriptor));
  BranchInfoImpl parentBranchInfoImpl=toBranchInfoImpl(parentBranchInfo);
  if (parentBranchInfoImpl == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
  }
  long parentLatestRevisionCommitId=parentBranchInfoImpl.getLatestRevision();
  CommitInfoImpl parentLatestRevisionCommitInfo=parentBranchCommits.stream().filter(version -> parentLatestRevisionCommitId == version.getID()).findAny().orElse(null);
  if (parentLatestRevisionCommitInfo == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  commit=parentLatestRevisionCommitInfo;
  while (commit != null && commit.getID() != startRevisionCommitId) {
    parentCommitsAhead++;
    long directParent=commit.getDirectParent();
    commit=parentBranchCommits.stream().filter(version -> directParent == version.getID()).findAny().orElse(null);
  }
  JsonNode parentBranchJsonNode=null;
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsUri(project);
  if (requestUri == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + parentBranchId);
  try {
    HttpRequestBase request=MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri);
    File responseFile=MMSUtils.sendMMSRequest(project,request);
    ObjectNode response;
    try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
      response=JacksonUtils.parseJsonObject(jsonParser);
    }
     JsonNode refsArray, value;
    if ((refsArray=response.get(""String_Node_Str"")) != null && refsArray.isArray()) {
      for (      JsonNode refJson : refsArray) {
        if (refJson.isObject()) {
          ObjectNode refObjectNode=(ObjectNode)refJson;
          refObjectNode.remove(MDKConstants.PARENT_REF_ID_KEY);
          String entryKey;
          if ((value=refObjectNode.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
            entryKey=refObjectNode.get(MDKConstants.ID_KEY).asText();
            if (entryKey.equals(parentBranchId)) {
              parentBranchJsonNode=refObjectNode;
            }
          }
        }
      }
    }
  }
 catch (  IOException|URISyntaxException|ServerException e) {
    e.printStackTrace();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    return;
  }
  if (parentBranchJsonNode == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + parentBranchName + ""String_Node_Str"");
    return;
  }
  requestUri=MMSUtils.getServiceProjectsRefsUri(project);
  if (requestUri == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  Collection<ObjectNode> refsNodes=new LinkedList<>();
  ObjectNode branchNode=BranchValidator.generateRefObjectNode(project,branchInfo,parentBranchId);
  refsNodes.add(branchNode);
  if (parentCommitsBehind > 0 || parentCommitsAhead > 0) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + parentBranchName + ""String_Node_Str""+ (parentCommitsBehind > 0 ? NumberFormat.getInstance().format(parentCommitsBehind) + ""String_Node_Str"" + (parentCommitsBehind != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"" : ""String_Node_Str"")+ (parentCommitsBehind > 0 && parentCommitsAhead > 0 ? ""String_Node_Str"" : ""String_Node_Str"")+ (parentCommitsAhead > 0 ? NumberFormat.getInstance().format(parentCommitsAhead) + ""String_Node_Str"" + (parentCommitsAhead != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ branchInfo.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  try {
    File sendFile=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,refsNodes,MMSUtils.JsonBlobType.REF);
    HttpRequestBase request=MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendFile,ContentType.APPLICATION_JSON);
    MMSUtils.sendMMSRequest(project,request);
  }
 catch (  IOException|URISyntaxException|ServerException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return;
  }
  Application.getInstance().getGUILog().log(""String_Node_Str"" + branchInfo.getName() + ""String_Node_Str"");
  if (validateModel) {
    RunnableWithProgress temp=new ManualSyncRunner(Collections.singletonList(project.getPrimaryModel()),project,-1);
    ProgressStatusRunner.runWithProgressStatus(temp,""String_Node_Str"",true,0);
  }
}",0.9994922753318344
88407,"public String commitAction(){
  String orgId=null;
  URIBuilder requestUri=MMSUtils.getServiceOrgsUri(project);
  if (requestUri == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  try {
    orgId=MMSUtils.getMmsOrg(project);
  }
 catch (  IOException|URISyntaxException|ServerException e1) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
    e1.printStackTrace();
    return null;
  }
  ObjectNode response;
  if (orgId == null || orgId.isEmpty()) {
    try {
      File responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri));
      try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
        response=JacksonUtils.parseJsonObject(jsonParser);
      }
     }
 catch (    IOException|URISyntaxException|ServerException e1) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
      e1.printStackTrace();
      return null;
    }
    HashMap<String,String> mmsOrgsMap=new HashMap<>();
    mmsOrgsMap.put(""String_Node_Str"",""String_Node_Str"");
    if (response != null) {
      JsonNode arrayNode;
      if ((arrayNode=response.get(""String_Node_Str"")) != null && arrayNode.isArray()) {
        for (        JsonNode orgNode : arrayNode) {
          JsonNode name, id;
          if ((name=orgNode.get(MDKConstants.NAME_KEY)) != null && name.isTextual() && !name.asText().isEmpty() && (id=orgNode.get(MDKConstants.ID_KEY)) != null && id.isTextual() && !id.asText().isEmpty()) {
            mmsOrgsMap.put(name.asText(),id.asText());
          }
        }
      }
    }
    String[] mmsOrgs=mmsOrgsMap.keySet().toArray(new String[mmsOrgsMap.keySet().size()]);
    Arrays.sort(mmsOrgs);
    JFrame selectionDialog=new JFrame();
    String selection=(String)JOptionPane.showInputDialog(selectionDialog,""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE,null,mmsOrgs,mmsOrgs[0]);
    if (selection != null) {
      orgId=mmsOrgsMap.get(selection);
      if (orgId.equals(""String_Node_Str"")) {
        orgId=new CommitOrgAction(project).commitAction();
      }
    }
  }
  if (orgId == null || orgId.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + orgId+ ""String_Node_Str"");
  Collection<ObjectNode> projects=new LinkedList<>();
  projects.add(MMSUtils.getProjectObjectNode(project));
  try {
    File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,projects,MMSUtils.JsonBlobType.PROJECT);
    File responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON));
    try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
      response=JacksonUtils.parseJsonObject(jsonParser);
    }
     if (response != null) {
      Thread.sleep(5000);
    }
  }
 catch (  IOException|URISyntaxException|ServerException|InterruptedException e1) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
    e1.printStackTrace();
    return null;
  }
  if (shouldCommitModel) {
    RunnableWithProgress temp=new ManualSyncActionRunner<>(CommitClientElementAction.class,Collections.singletonList(project.getPrimaryModel()),project,-1);
    ProgressStatusRunner.runWithProgressStatus(temp,""String_Node_Str"",true,0);
  }
  return Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
}","public String commitAction(){
  String orgId=null;
  URIBuilder requestUri=MMSUtils.getServiceOrgsUri(project);
  if (requestUri == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  try {
    orgId=MMSUtils.getMmsOrg(project);
  }
 catch (  IOException|URISyntaxException|ServerException e1) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
    e1.printStackTrace();
    return null;
  }
  ObjectNode response;
  if (orgId == null || orgId.isEmpty()) {
    try {
      File responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri));
      try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
        response=JacksonUtils.parseJsonObject(jsonParser);
      }
     }
 catch (    IOException|URISyntaxException|ServerException e1) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
      e1.printStackTrace();
      return null;
    }
    HashMap<String,String> mmsOrgsMap=new HashMap<>();
    mmsOrgsMap.put(""String_Node_Str"",""String_Node_Str"");
    if (response != null) {
      JsonNode arrayNode;
      if ((arrayNode=response.get(""String_Node_Str"")) != null && arrayNode.isArray()) {
        for (        JsonNode orgNode : arrayNode) {
          JsonNode name, id;
          if ((name=orgNode.get(MDKConstants.NAME_KEY)) != null && name.isTextual() && !name.asText().isEmpty() && (id=orgNode.get(MDKConstants.ID_KEY)) != null && id.isTextual() && !id.asText().isEmpty()) {
            mmsOrgsMap.put(name.asText(),id.asText());
          }
        }
      }
    }
    String[] mmsOrgs=mmsOrgsMap.keySet().toArray(new String[mmsOrgsMap.keySet().size()]);
    Arrays.sort(mmsOrgs);
    JFrame selectionDialog=new JFrame();
    String selection=(String)JOptionPane.showInputDialog(selectionDialog,""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE,null,mmsOrgs,mmsOrgs[0]);
    if (selection != null) {
      orgId=mmsOrgsMap.get(selection);
      if (orgId.equals(""String_Node_Str"")) {
        orgId=new CommitOrgAction(project).commitAction();
      }
    }
  }
  if (orgId == null || orgId.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + orgId+ ""String_Node_Str"");
  Collection<ObjectNode> projects=new LinkedList<>();
  projects.add(ProjectValidator.generateProjectObjectNode(project));
  try {
    File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,projects,MMSUtils.JsonBlobType.PROJECT);
    File responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON));
    try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
      response=JacksonUtils.parseJsonObject(jsonParser);
    }
     if (response != null) {
      Thread.sleep(5000);
    }
  }
 catch (  IOException|URISyntaxException|ServerException|InterruptedException e1) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
    e1.printStackTrace();
    return null;
  }
  if (shouldCommitModel) {
    RunnableWithProgress temp=new ManualSyncActionRunner<>(CommitClientElementAction.class,Collections.singletonList(project.getPrimaryModel()),project,-1);
    ProgressStatusRunner.runWithProgressStatus(temp,""String_Node_Str"",true,0);
  }
  return Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
}",0.9948618247465628
88408,"@Override public void run(ProgressStatus progressStatus){
  validationSuite.getValidationRules().forEach(validationRule -> validationRule.getViolations().clear());
  LocalSyncTransactionCommitListener localSyncTransactionCommitListener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  elementsToUpdate=(elementsToUpdate == null ? Collections.emptyList() : elementsToUpdate);
  elementsToDelete=(elementsToDelete == null ? Collections.emptyList() : elementsToDelete);
  if (elementsToUpdate.isEmpty() && elementsToDelete.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  Collection<ObjectNode> elementsToNotUpdate=new ArrayList<>();
  for (  ObjectNode currentObjectNode : elementsToUpdate) {
    Element currentElement=null;
    JsonNode idValue;
    String currentId=null;
    if ((idValue=currentObjectNode.get(MDKConstants.ID_KEY)) != null && idValue.isTextual() && !(currentId=idValue.asText()).isEmpty()) {
      currentElement=Converters.getIdToElementConverter().apply(currentId,project);
    }
    if (currentElement == null && currentId == null) {
      elementsToNotUpdate.add(currentObjectNode);
      continue;
    }
    ValidationRuleViolation validationRuleViolation=getEditableValidationRuleViolation(currentElement,currentObjectNode,currentId);
    if (validationRuleViolation != null) {
      if (element != null && !element.isEditable()) {
        validationRuleViolation.addAction(new LockAction(element,false));
        validationRuleViolation.addAction(new LockAction(element,true));
      }
      addUpdateElementActions(validationRuleViolation,currentElement,currentId,currentObjectNode);
      editableValidationRule.addViolation(validationRuleViolation);
      failedChangelog.addChange(currentId,currentObjectNode,(currentElement != null && !project.isDisposed(currentElement) ? Changelog.ChangeType.UPDATED : Changelog.ChangeType.CREATED));
      elementsToNotUpdate.add(currentObjectNode);
    }
  }
  elementsToUpdate.removeAll(elementsToNotUpdate);
  boolean initialAutoNumbering=Application.getInstance().getProject().getOptions().isAutoNumbering();
  Application.getInstance().getProject().getOptions().setAutoNumbering(false);
  if (localSyncTransactionCommitListener != null) {
    localSyncTransactionCommitListener.setDisabled(true);
  }
  try {
    if (!elementsToUpdate.isEmpty()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(elementsToUpdate.size()) + ""String_Node_Str""+ (elementsToUpdate.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
    EMFBulkImporter emfBulkImporter=new EMFBulkImporter(NAME){
      @Override public void onSuccess(){
        if (!elementsToDelete.isEmpty()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(elementsToDelete.size()) + ""String_Node_Str""+ (elementsToDelete.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
        }
        if (!SessionManager.getInstance().isSessionCreated(project)) {
          SessionManager.getInstance().createSession(project,UpdateClientElementAction.class.getName() + ""String_Node_Str"");
        }
        for (        String id : elementsToDelete) {
          Exception exception=null;
          Element element=Converters.getIdToElementConverter().apply(id,project);
          if (element == null) {
            continue;
          }
          ValidationRuleViolation validationRuleViolation=getEditableValidationRuleViolation(element,null,id);
          if (validationRuleViolation != null) {
            addUpdateElementActions(validationRuleViolation,element,id,null);
            editableValidationRule.addViolation(validationRuleViolation);
            failedChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
            continue;
          }
          try {
            Command command=RemoveCommandCreator.getCommand(element);
            command.execute();
            MacroCommand macroCommand=CommandHistory.getCommandForAppend(element);
            macroCommand.add(command);
          }
 catch (          RuntimeException e) {
            exception=e;
          }
          if (exception == null) {
            successfulChangeValidationRule.addViolation(project.getPrimaryModel(),""String_Node_Str"" + Changelog.ChangeType.DELETED.name() + ""String_Node_Str""+ element.getHumanName());
          }
 else {
            validationRuleViolation=new ValidationRuleViolation(element,""String_Node_Str"" + exception.getMessage());
            addUpdateElementActions(validationRuleViolation,element,id,null);
            failedChangeValidationRule.addViolation(validationRuleViolation);
            failedChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
          }
        }
        if (SessionManager.getInstance().isSessionCreated(project)) {
          SessionManager.getInstance().closeSession(project);
        }
      }
      @Override public void onFailure(){
        onSuccess();
      }
    }
;
    Changelog<String,Pair<Element,ObjectNode>> changelog=emfBulkImporter.apply(elementsToUpdate,project,progressStatus);
    for (    Map.Entry<Pair<Element,ObjectNode>,Exception> entry : emfBulkImporter.getFailedElementMap().entrySet()) {
      Element element=entry.getKey().getKey();
      ObjectNode objectNode=entry.getKey().getValue();
      Exception exception=entry.getValue();
      JsonNode sysmlIdJsonNode=objectNode.get(MDKConstants.ID_KEY);
      if (sysmlIdJsonNode == null || !sysmlIdJsonNode.isTextual()) {
        continue;
      }
      String sysmlId=sysmlIdJsonNode.asText();
      String name=null;
      if (element == null || Project.isElementDisposed(element)) {
        JsonNode nameJsonNode=objectNode.get(MDKConstants.NAME_KEY);
        if (nameJsonNode != null && nameJsonNode.isTextual()) {
          name=nameJsonNode.asText(""String_Node_Str"");
        }
        if (name == null || name.isEmpty()) {
          name=""String_Node_Str"";
        }
      }
      ValidationRuleViolation validationRuleViolation=new ValidationRuleViolation(element != null && !Project.isElementDisposed(element) ? element : project.getPrimaryModel(),""String_Node_Str"" + (element != null && !Project.isElementDisposed(element) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ (element == null || Project.isElementDisposed(element) ? ""String_Node_Str"" + objectNode.get(MDKConstants.TYPE_KEY).asText(""String_Node_Str"") + ""String_Node_Str""+ name+ ""String_Node_Str""+ sysmlId : ""String_Node_Str"")+ ((element == null || Project.isElementDisposed(element)) && exception != null ? ""String_Node_Str"" : ""String_Node_Str"")+ (exception != null ? ""String_Node_Str"" + (exception instanceof ReadOnlyElementException ? ""String_Node_Str"" : exception.getMessage()) : ""String_Node_Str""));
      ActionsCategory copyActionsCategory=new ActionsCategory(""String_Node_Str"",""String_Node_Str"");
      addUpdateElementActions(validationRuleViolation,element,sysmlId,objectNode);
      (exception instanceof ReadOnlyElementException ? editableValidationRule : failedChangeValidationRule).addViolation(validationRuleViolation);
      failedChangelog.addChange(sysmlId,objectNode,element != null && !Project.isElementDisposed(element) ? Changelog.ChangeType.UPDATED : Changelog.ChangeType.CREATED);
    }
    for (    Map.Entry<Element,ObjectNode> entry : emfBulkImporter.getNonEquivalentElements().entrySet()) {
      Element element=entry.getKey();
      String sysmlId=element.getLocalID();
      ObjectNode clientElementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
      ObjectNode serverElementObjectNode=entry.getValue();
      JsonNode diff=JsonPatchFunction.getInstance().apply(clientElementObjectNode,serverElementObjectNode);
      ValidationRuleViolation validationRuleViolation=new ValidationRuleViolation(entry.getKey(),""String_Node_Str"");
      ActionsCategory copyActionsCategory=new ActionsCategory(""String_Node_Str"",""String_Node_Str"");
      copyActionsCategory.setNested(true);
      validationRuleViolation.addAction(copyActionsCategory);
      copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",sysmlId));
      copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",""String_Node_Str"" + element.getLocalID()));
      try {
        copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(clientElementObjectNode)));
      }
 catch (      JsonProcessingException ignored) {
      }
      try {
        copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(serverElementObjectNode)));
      }
 catch (      JsonProcessingException ignored) {
      }
      try {
        copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(diff)));
      }
 catch (      JsonProcessingException ignored) {
      }
      equivalentElementValidationRule.addViolation(validationRuleViolation);
    }
    for (    Changelog.ChangeType changeType : Changelog.ChangeType.values()) {
      for (      Map.Entry<String,Pair<Element,ObjectNode>> entry : changelog.get(changeType).entrySet()) {
        Element successElement=entry.getValue().getKey();
        successfulChangeValidationRule.addViolation(new ValidationRuleViolation(successElement,""String_Node_Str"" + SyncElement.Type.MMS.name() + ""String_Node_Str""+ changeType.name()+ ""String_Node_Str""+ SyncElement.Type.LOCAL.name()+ ""String_Node_Str""));
        successfulChangelog.addChange(successElement.getLocalID(),null,changeType);
      }
    }
  }
  finally {
    Application.getInstance().getProject().getOptions().setAutoNumbering(initialAutoNumbering);
    if (localSyncTransactionCommitListener != null) {
      localSyncTransactionCommitListener.setDisabled(false);
    }
  }
  if (validationSuite.hasErrors()) {
    Utils.displayValidationWindow(project,validationSuite,validationSuite.getName());
  }
}","@Override public void run(ProgressStatus progressStatus){
  validationSuite.getValidationRules().forEach(validationRule -> validationRule.getViolations().clear());
  LocalSyncTransactionCommitListener localSyncTransactionCommitListener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  elementsToUpdate=(elementsToUpdate == null ? Collections.emptyList() : elementsToUpdate);
  elementsToDelete=(elementsToDelete == null ? Collections.emptyList() : elementsToDelete);
  if (elementsToUpdate.isEmpty() && elementsToDelete.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  Collection<ObjectNode> elementsToNotUpdate=new ArrayList<>();
  for (  ObjectNode currentObjectNode : elementsToUpdate) {
    Element currentElement=null;
    JsonNode idValue;
    String currentId=null;
    if ((idValue=currentObjectNode.get(MDKConstants.ID_KEY)) != null && idValue.isTextual() && !(currentId=idValue.asText()).isEmpty()) {
      currentElement=Converters.getIdToElementConverter().apply(currentId,project);
    }
    if (currentElement == null && currentId == null) {
      elementsToNotUpdate.add(currentObjectNode);
      continue;
    }
    ValidationRuleViolation validationRuleViolation=getEditableValidationRuleViolation(currentElement,currentObjectNode,currentId);
    if (validationRuleViolation != null) {
      if (element != null && !element.isEditable()) {
        validationRuleViolation.addAction(new LockAction(element,false));
        validationRuleViolation.addAction(new LockAction(element,true));
      }
      addUpdateElementActions(validationRuleViolation,currentElement,currentId,currentObjectNode);
      editableValidationRule.addViolation(validationRuleViolation);
      failedChangelog.addChange(currentId,currentObjectNode,(currentElement != null && !project.isDisposed(currentElement) ? Changelog.ChangeType.UPDATED : Changelog.ChangeType.CREATED));
      elementsToNotUpdate.add(currentObjectNode);
    }
  }
  elementsToUpdate.removeAll(elementsToNotUpdate);
  boolean initialAutoNumbering=Application.getInstance().getProject().getOptions().isAutoNumbering();
  Application.getInstance().getProject().getOptions().setAutoNumbering(false);
  if (localSyncTransactionCommitListener != null) {
    localSyncTransactionCommitListener.setDisabled(true);
  }
  try {
    if (!elementsToUpdate.isEmpty()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(elementsToUpdate.size()) + ""String_Node_Str""+ (elementsToUpdate.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
    EMFBulkImporter emfBulkImporter=new EMFBulkImporter(NAME){
      @Override public void onSuccess(){
        if (!elementsToDelete.isEmpty()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(elementsToDelete.size()) + ""String_Node_Str""+ (elementsToDelete.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
        }
        if (!SessionManager.getInstance().isSessionCreated(project)) {
          SessionManager.getInstance().createSession(project,UpdateClientElementAction.class.getName() + ""String_Node_Str"");
        }
        for (        String id : elementsToDelete) {
          Exception exception=null;
          Element element=Converters.getIdToElementConverter().apply(id,project);
          if (element == null) {
            continue;
          }
          ValidationRuleViolation validationRuleViolation=getEditableValidationRuleViolation(element,null,id);
          if (validationRuleViolation != null) {
            addUpdateElementActions(validationRuleViolation,element,id,null);
            editableValidationRule.addViolation(validationRuleViolation);
            failedChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
            continue;
          }
          try {
            Command command=RemoveCommandCreator.getCommand(element);
            command.execute();
            MacroCommand macroCommand=CommandHistory.getCommandForAppend(element);
            macroCommand.add(command);
          }
 catch (          RuntimeException e) {
            exception=e;
          }
          if (exception == null) {
            successfulChangeValidationRule.addViolation(project.getPrimaryModel(),""String_Node_Str"" + Changelog.ChangeType.DELETED.name() + ""String_Node_Str""+ element.getHumanName());
          }
 else {
            validationRuleViolation=new ValidationRuleViolation(element,""String_Node_Str"" + exception.getMessage());
            addUpdateElementActions(validationRuleViolation,element,id,null);
            failedChangeValidationRule.addViolation(validationRuleViolation);
            failedChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
          }
        }
        if (SessionManager.getInstance().isSessionCreated(project)) {
          SessionManager.getInstance().closeSession(project);
        }
      }
      @Override public void onFailure(){
        onSuccess();
      }
    }
;
    Changelog<String,Pair<Element,ObjectNode>> changelog=emfBulkImporter.apply(elementsToUpdate,project,progressStatus);
    for (    Map.Entry<Pair<Element,ObjectNode>,Exception> entry : emfBulkImporter.getFailedElementMap().entrySet()) {
      Element entryElement=entry.getKey().getKey();
      ObjectNode entryObjectNode=entry.getKey().getValue();
      Exception entryException=entry.getValue();
      JsonNode sysmlIdJsonNode=entryObjectNode.get(MDKConstants.ID_KEY);
      if (sysmlIdJsonNode == null || !sysmlIdJsonNode.isTextual()) {
        continue;
      }
      String entryId=sysmlIdJsonNode.asText();
      String name=null;
      if (entryElement == null || Project.isElementDisposed(entryElement)) {
        JsonNode nameJsonNode=entryObjectNode.get(MDKConstants.NAME_KEY);
        if (nameJsonNode != null && nameJsonNode.isTextual()) {
          name=nameJsonNode.asText(""String_Node_Str"");
        }
        if (name == null || name.isEmpty()) {
          name=""String_Node_Str"";
        }
      }
      ValidationRuleViolation validationRuleViolation=new ValidationRuleViolation(entryElement != null && !Project.isElementDisposed(entryElement) ? entryElement : project.getPrimaryModel(),""String_Node_Str"" + (entryElement != null && !Project.isElementDisposed(entryElement) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ (entryElement == null || Project.isElementDisposed(entryElement) ? ""String_Node_Str"" + entryObjectNode.get(MDKConstants.TYPE_KEY).asText(""String_Node_Str"") + ""String_Node_Str""+ name+ ""String_Node_Str""+ entryId : ""String_Node_Str"")+ ((entryElement == null || Project.isElementDisposed(entryElement)) && entryException != null ? ""String_Node_Str"" : ""String_Node_Str"")+ (entryException != null ? ""String_Node_Str"" + (entryException instanceof ReadOnlyElementException ? ""String_Node_Str"" : entryException.getMessage()) : ""String_Node_Str""));
      addUpdateElementActions(validationRuleViolation,entryElement,entryId,entryObjectNode);
      (entryException instanceof ReadOnlyElementException ? editableValidationRule : failedChangeValidationRule).addViolation(validationRuleViolation);
      failedChangelog.addChange(entryId,entryObjectNode,entryElement != null && !Project.isElementDisposed(entryElement) ? Changelog.ChangeType.UPDATED : Changelog.ChangeType.CREATED);
    }
    for (    Map.Entry<Element,ObjectNode> entry : emfBulkImporter.getNonEquivalentElements().entrySet()) {
      Element entryElement=entry.getKey();
      String entryId=entryElement.getLocalID();
      ObjectNode entryClientElementObjectNode=Converters.getElementToJsonConverter().apply(entryElement,project);
      ObjectNode entryServerElementObjectNode=entry.getValue();
      JsonNode diff=JsonPatchFunction.getInstance().apply(entryClientElementObjectNode,entryServerElementObjectNode);
      ValidationRuleViolation validationRuleViolation=new ValidationRuleViolation(entry.getKey(),""String_Node_Str"");
      ActionsCategory copyActionsCategory=new ActionsCategory(""String_Node_Str"",""String_Node_Str"");
      copyActionsCategory.setNested(true);
      validationRuleViolation.addAction(copyActionsCategory);
      copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",entryId));
      copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",""String_Node_Str"" + entryElement.getLocalID()));
      try {
        copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(entryClientElementObjectNode)));
      }
 catch (      JsonProcessingException ignored) {
      }
      try {
        copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(entryServerElementObjectNode)));
      }
 catch (      JsonProcessingException ignored) {
      }
      try {
        copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(diff)));
      }
 catch (      JsonProcessingException ignored) {
      }
      equivalentElementValidationRule.addViolation(validationRuleViolation);
    }
    for (    Changelog.ChangeType changeType : Changelog.ChangeType.values()) {
      for (      Map.Entry<String,Pair<Element,ObjectNode>> entry : changelog.get(changeType).entrySet()) {
        Element successElement=entry.getValue().getKey();
        successfulChangeValidationRule.addViolation(new ValidationRuleViolation(successElement,""String_Node_Str"" + SyncElement.Type.MMS.name() + ""String_Node_Str""+ changeType.name()+ ""String_Node_Str""+ SyncElement.Type.LOCAL.name()+ ""String_Node_Str""));
        successfulChangelog.addChange(successElement.getLocalID(),null,changeType);
      }
    }
  }
  finally {
    Application.getInstance().getProject().getOptions().setAutoNumbering(initialAutoNumbering);
    if (localSyncTransactionCommitListener != null) {
      localSyncTransactionCommitListener.setDisabled(false);
    }
  }
  if (validationSuite.hasErrors()) {
    Utils.displayValidationWindow(project,validationSuite,validationSuite.getName());
  }
}",0.9773159666325186
88409,"public static final boolean createSpecializedType(final StructuralFeature redefinedAttribute,final Classifier parent,final List<RedefinableElement> traveled,List<Classifier> visited,boolean isIndividual,boolean isRecursive){
  if (!parent.isEditable()) {
    Application.getInstance().getGUILog().log(parent.getQualifiedName() + ""String_Node_Str"");
    return true;
  }
  if (redefinedAttribute.getType() instanceof Classifier && !(redefinedAttribute.getType() instanceof Property)) {
    boolean hasTraveled=false;
    if (traveled.contains(redefinedAttribute)) {
      hasTraveled=true;
    }
 else {
      for (      final RedefinableElement redefinedProperty : redefinedAttribute.getRedefinedElement()) {
        if (traveled.contains(redefinedProperty)) {
          hasTraveled=true;
          break;
        }
      }
    }
    if (hasTraveled) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + redefinedAttribute.getQualifiedName() + ""String_Node_Str"");
      return false;
    }
    traveled.add(redefinedAttribute);
    for (    final RedefinableElement re : redefinedAttribute.getRedefinedElement()) {
      if (re instanceof RedefinableElement) {
        traveled.add(re);
      }
    }
    final Classifier general=(Classifier)redefinedAttribute.getType();
    Type special=null;
    if (isIndividual || (isRecursive && getExistingSpecial(redefinedAttribute) == null)) {
      SpecializeStructureAction speca=new SpecializeStructureAction(general,false,""String_Node_Str"",isRecursive,isIndividual);
      special=speca.createSpecialClassifier(parent,traveled,visited);
    }
 else     if (getExistingSpecial(redefinedAttribute) != null) {
      special=getExistingSpecial(redefinedAttribute);
    }
 else     if (visited.contains(general)) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + general.getQualifiedName() + ""String_Node_Str""+ redefinedAttribute.getQualifiedName()+ ""String_Node_Str"");
      return false;
    }
    if (special == null) {
      return true;
    }
    redefinedAttribute.setType(special);
  }
  return true;
}","public static final boolean createSpecializedType(final StructuralFeature redefinedAttribute,final Classifier parent,final List<RedefinableElement> traveled,List<Classifier> visited,boolean isIndividual,boolean isRecursive){
  if (!parent.isEditable()) {
    Application.getInstance().getGUILog().log(parent.getQualifiedName() + ""String_Node_Str"");
    return true;
  }
  if (redefinedAttribute.getType() instanceof Classifier && !(redefinedAttribute.getType() instanceof Property)) {
    boolean hasTraveled=false;
    if (traveled.contains(redefinedAttribute)) {
      hasTraveled=true;
    }
 else {
      for (      final RedefinableElement redefinedProperty : redefinedAttribute.getRedefinedElement()) {
        if (traveled.contains(redefinedProperty)) {
          hasTraveled=true;
          break;
        }
      }
    }
    if (hasTraveled) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + redefinedAttribute.getQualifiedName() + ""String_Node_Str"");
      return false;
    }
    traveled.add(redefinedAttribute);
    for (    final RedefinableElement re : redefinedAttribute.getRedefinedElement()) {
      if (re instanceof RedefinableElement) {
        traveled.add(re);
      }
    }
    final Classifier general=(Classifier)redefinedAttribute.getType();
    Type special=null;
    if (isIndividual || (isRecursive && getExistingSpecial(redefinedAttribute) == null)) {
      SpecializeStructureAction speca=new SpecializeStructureAction(general,false,""String_Node_Str"",isRecursive,isIndividual);
      special=speca.createSpecialClassifier(parent,new ArrayList<>(traveled),visited);
    }
 else     if (getExistingSpecial(redefinedAttribute) != null) {
      special=getExistingSpecial(redefinedAttribute);
    }
 else     if (visited.contains(general)) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + general.getQualifiedName() + ""String_Node_Str""+ redefinedAttribute.getQualifiedName()+ ""String_Node_Str"");
      return false;
    }
    if (special == null) {
      return true;
    }
    redefinedAttribute.setType(special);
  }
  return true;
}",0.9959436888570748
88410,"@Override public void actionPerformed(ActionEvent e){
  Stereotype documentStereotype=Utils.getDocumentStereotype(project);
  Stereotype viewStereotype=Utils.getViewStereotype(project);
  for (  Element element : targetElements) {
    if (!StereotypesHelper.hasStereotypeOrDerived(element,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(element,documentStereotype)) {
      continue;
    }
    URIBuilder uriBase=MMSUtils.getServiceUri(project);
    if (uriBase == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    uriBase.setHost(uriBase.getHost() + ""String_Node_Str"");
    String uriPath=""String_Node_Str"" + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    String branchName=EsiUtils.getCurrentBranch(project.getPrimaryProject()).getName();
    uriPath+=""String_Node_Str"" + (branchName.equals(""String_Node_Str"") ? ""String_Node_Str"" : branchName);
    Set<Element> documents=new HashSet<>();
    ArrayList<Element> viewChain=new ArrayList<>();
    viewChain.add(element);
    for (int i=0; i < viewChain.size(); i++) {
      if (StereotypesHelper.hasStereotype(viewChain.get(i),documentStereotype)) {
        documents.add(viewChain.get(i));
      }
      Set<Element> childViews=new HashSet<>();
      for (      Property prop : ((Class)viewChain.get(i)).getOwnedAttribute()) {
        if (!(prop.getType() instanceof Class)) {
          continue;
        }
        Class type=(Class)prop.getType();
        if (type == null || !(StereotypesHelper.hasStereotypeOrDerived(type,viewStereotype) || StereotypesHelper.hasStereotypeOrDerived(type,documentStereotype))) {
          continue;
        }
        childViews.add(type);
      }
      for (      Relationship relation : viewChain.get(i).get_relationshipOfRelatedElement()) {
        if (!(relation instanceof Association)) {
          continue;
        }
        Element assocEnd=((Association)relation).getMemberEnd().get(0).getOwner();
        if (!StereotypesHelper.hasStereotypeOrDerived(assocEnd,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(assocEnd,documentStereotype)) {
          continue;
        }
        if (!childViews.contains(assocEnd) && !viewChain.contains(assocEnd)) {
          viewChain.add(assocEnd);
        }
      }
    }
    if (documents.size() > 1) {
      String label=""String_Node_Str"";
      List<JButton> linkButtons=new ArrayList<>();
      try {
        if (!documents.isEmpty()) {
          label=""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"";
          for (          Element doc : documents) {
            if (doc.equals(element)) {
              uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(element);
            }
 else {
              uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(doc) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
            }
            JButton button=new ViewButton(doc.getHumanName(),uriBase.setPath(uriPath).build());
            linkButtons.add(button);
          }
        }
      }
 catch (      URISyntaxException se) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
        return;
      }
      ViewEditorLinkForm viewLinkForm=new ViewEditorLinkForm(label,linkButtons);
      viewLinkForm.setVisible(true);
    }
 else {
      uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(element) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
      if (Desktop.isDesktopSupported()) {
        try {
          if (documents.size() == 0) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
          }
          Desktop.getDesktop().browse(uriBase.setPath(uriPath).build());
        }
 catch (        URISyntaxException|IOException e1) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + uriBase.toString());
          e1.printStackTrace();
        }
      }
 else {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + uriBase.toString());
      }
    }
  }
}","@Override public void actionPerformed(ActionEvent e){
  Stereotype documentStereotype=Utils.getDocumentStereotype(project);
  Stereotype viewStereotype=Utils.getViewStereotype(project);
  for (  Element element : targetElements) {
    if (!StereotypesHelper.hasStereotypeOrDerived(element,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(element,documentStereotype)) {
      continue;
    }
    URIBuilder uriBase=MMSUtils.getServiceUri(project);
    if (uriBase == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    uriBase.setHost(uriBase.getHost() + ""String_Node_Str"");
    uriBase.setPath(""String_Node_Str"");
    String uriPath=""String_Node_Str"" + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    String branchName=EsiUtils.getCurrentBranch(project.getPrimaryProject()).getName();
    uriPath+=""String_Node_Str"" + (branchName.equals(""String_Node_Str"") ? ""String_Node_Str"" : branchName);
    Set<Element> documents=new HashSet<>();
    ArrayList<Element> viewChain=new ArrayList<>();
    viewChain.add(element);
    for (int i=0; i < viewChain.size(); i++) {
      Element currentView=viewChain.get(i);
      if (StereotypesHelper.hasStereotype(currentView,documentStereotype)) {
        documents.add(currentView);
      }
      Set<Element> childViews=new HashSet<>();
      for (      Property prop : ((Class)currentView).getOwnedAttribute()) {
        if (!(prop.getType() instanceof Class)) {
          continue;
        }
        Class type=(Class)prop.getType();
        if (type == null || !(StereotypesHelper.hasStereotypeOrDerived(type,viewStereotype) || StereotypesHelper.hasStereotypeOrDerived(type,documentStereotype))) {
          continue;
        }
        childViews.add(type);
      }
      for (      Relationship relation : currentView.get_relationshipOfRelatedElement()) {
        if (!(relation instanceof Association)) {
          continue;
        }
        Element assocEnd=((Association)relation).getMemberEnd().get(0).getOwner();
        if (!StereotypesHelper.hasStereotypeOrDerived(assocEnd,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(assocEnd,documentStereotype)) {
          continue;
        }
        if (!childViews.contains(assocEnd) && !viewChain.contains(assocEnd)) {
          viewChain.add(assocEnd);
        }
      }
    }
    if (documents.size() > 1) {
      String label=""String_Node_Str"";
      List<JButton> linkButtons=new ArrayList<>();
      try {
        if (!documents.isEmpty()) {
          label=""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"";
          for (          Element doc : documents) {
            if (doc.equals(element)) {
              uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(element);
            }
 else {
              uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(doc) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
            }
            JButton button=new ViewButton(doc.getHumanName(),uriBase.setPath(uriPath).build());
            linkButtons.add(button);
          }
        }
      }
 catch (      URISyntaxException se) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
        return;
      }
      ViewEditorLinkForm viewLinkForm=new ViewEditorLinkForm(label,linkButtons);
      viewLinkForm.setVisible(true);
    }
 else {
      if (documents.isEmpty()) {
        uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(element) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
      }
 else {
        uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(documents.iterator().next()) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
      }
      if (Desktop.isDesktopSupported()) {
        try {
          if (documents.size() == 0) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
          }
          Desktop.getDesktop().browse(uriBase.setPath(uriPath).build());
        }
 catch (        URISyntaxException|IOException e1) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + uriBase.toString());
          e1.printStackTrace();
        }
      }
 else {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + uriBase.toString());
      }
    }
  }
}",0.9476704154234564
88411,"public static String getEID(EObject eObject){
  if (eObject == null) {
    return null;
  }
  if (!(eObject instanceof Element)) {
    return EcoreUtil.getID(eObject);
  }
  Element element=(Element)eObject;
  Project project=Project.getProject(element);
  if (element instanceof Model && project.getPrimaryModel() == element) {
    return Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()) + MDKConstants.PRIMARY_MODEL_ID_SUFFIX;
  }
  if (element instanceof InstanceSpecification && ((InstanceSpecification)element).getStereotypedElement() != null) {
    return getEID(((InstanceSpecification)element).getStereotypedElement()) + MDKConstants.APPLIED_STEREOTYPE_INSTANCE_ID_SUFFIX;
  }
  if (element instanceof ValueSpecification && ((ValueSpecification)element).getOwningSlot() != null) {
    ValueSpecification slotValue=(ValueSpecification)element;
    return getEID(slotValue.getOwningSlot()) + MDKConstants.SLOT_VALUE_ID_SEPARATOR + slotValue.getOwningSlot().getValue().indexOf(slotValue)+ ""String_Node_Str""+ slotValue.eClass().getName().toLowerCase();
  }
  if (element instanceof Slot) {
    Slot slot=(Slot)element;
    if (slot.getOwningInstance() != null && ((Slot)element).getDefiningFeature() != null) {
      return getEID(slot.getOwner()) + MDKConstants.SLOT_ID_SEPARATOR + getEID(slot.getDefiningFeature());
    }
  }
  return element.getLocalID();
}","public static String getEID(EObject eObject){
  if (eObject == null) {
    return null;
  }
  if (!(eObject instanceof Element)) {
    return EcoreUtil.getID(eObject);
  }
  Element element=(Element)eObject;
  Project project=Project.getProject(element);
  if (element instanceof Model && project.getPrimaryModel() == element) {
    return Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()) + MDKConstants.PRIMARY_MODEL_ID_SUFFIX;
  }
  if (element instanceof InstanceSpecification && ((InstanceSpecification)element).getStereotypedElement() != null) {
    return getEID(((InstanceSpecification)element).getStereotypedElement()) + MDKConstants.APPLIED_STEREOTYPE_INSTANCE_ID_SUFFIX;
  }
  if (element instanceof ValueSpecification && ((ValueSpecification)element).getOwningSlot() != null) {
    ValueSpecification slotValue=(ValueSpecification)element;
    return getEID(slotValue.getOwningSlot()) + MDKConstants.SLOT_VALUE_ID_SEPARATOR + slotValue.getOwningSlot().getValue().indexOf(slotValue)+ ""String_Node_Str""+ slotValue.eClass().getName().toLowerCase();
  }
  if (element instanceof Slot) {
    Slot slot=(Slot)element;
    if (slot.getOwningInstance() != null && ((Slot)element).getDefiningFeature() != null) {
      return getEID(slot.getOwningInstance()) + MDKConstants.SLOT_ID_SEPARATOR + getEID(slot.getDefiningFeature());
    }
  }
  return element.getLocalID();
}",0.9953321364452424
88412,"public static Changelog<String,Void> buildChangelog(ObjectNode objectNode){
  Changelog<String,Void> changelog=new Changelog<>();
  for (  Changelog.ChangeType changeType : Changelog.ChangeType.values()) {
    JsonNode jsonNode=objectNode.get(changeType.name().toLowerCase());
    if (jsonNode == null || !jsonNode.isArray()) {
      continue;
    }
    for (    JsonNode jsonNode1 : jsonNode) {
      if (jsonNode1 == null || !jsonNode1.isTextual()) {
        continue;
      }
      changelog.addChange(jsonNode1.asText(),null,changeType);
    }
  }
  return changelog;
}","public static Changelog<String,Void> buildChangelog(Changelog changelog,ObjectNode objectNode){
  for (  Changelog.ChangeType changeType : Changelog.ChangeType.values()) {
    JsonNode jsonNode=objectNode.get(changeType.name().toLowerCase());
    if (jsonNode == null || !jsonNode.isArray()) {
      continue;
    }
    for (    JsonNode jsonNode1 : jsonNode) {
      if (jsonNode1 == null || !jsonNode1.isTextual()) {
        continue;
      }
      changelog.addChange(jsonNode1.asText(),null,changeType);
    }
  }
  return changelog;
}",0.933453237410072
88413,"@Override public void run(){
  try {
    CountDownLatch doneSignal=new CountDownLatch(events.size());
    new Thread(() -> {
      try {
        doneSignal.await();
      }
 catch (      InterruptedException ignored) {
      }
      SyncStatusConfigurator.getSyncStatusAction().update();
    }
,""String_Node_Str"").start();
    for (    PropertyChangeEvent event : events) {
      EXECUTOR_SERVICE.execute(() -> {
        Object source=event.getSource();
        if (!(source instanceof Element) || ProjectUtilities.isElementInAttachedProject((Element)source)) {
          doneSignal.countDown();
          return;
        }
        Element sourceElement=(Element)source;
        String changedPropertyName=event.getPropertyName();
        if (changedPropertyName == null || changedPropertyName.startsWith(""String_Node_Str"") || IGNORED_PROPERTY_CHANGE_EVENT_NAMES.contains(changedPropertyName)) {
          doneSignal.countDown();
          return;
        }
        if ((event.getNewValue() == null && event.getOldValue() == null) || (event.getNewValue() != null && event.getNewValue().equals(event.getOldValue()))) {
          doneSignal.countDown();
          return;
        }
        if (!changedPropertyName.equals(UML2MetamodelConstants.INSTANCE_DELETED)) {
          Element root=sourceElement;
          while (root.getOwner() != null) {
            root=root.getOwner();
          }
          if (!root.equals(project.getPrimaryModel())) {
            doneSignal.countDown();
            return;
          }
        }
        Comment comment;
        if (changedPropertyName.equals(PropertyNames.BODY) && sourceElement instanceof Comment && (comment=(Comment)sourceElement).getAnnotatedElement().size() == 1 && comment.getAnnotatedElement().iterator().next() == comment.getOwner()) {
          sourceElement=sourceElement.getOwner();
        }
 else         if (changedPropertyName.equals(PropertyNames.VALUE) && sourceElement instanceof ValueSpecification || changedPropertyName.equals(PropertyNames.BODY) && sourceElement instanceof OpaqueExpression || changedPropertyName.equals(PropertyNames.OPERAND) && sourceElement instanceof Expression) {
          do {
            sourceElement=sourceElement.getOwner();
          }
 while (sourceElement instanceof ValueSpecification);
        }
        if (Converters.getElementToJsonConverter().apply(sourceElement,project) == null) {
          doneSignal.countDown();
          return;
        }
        String sysmlId=Converters.getElementToIdConverter().apply(sourceElement);
        if (sysmlId == null) {
          doneSignal.countDown();
          return;
        }
        Changelog.ChangeType changeType=Changelog.ChangeType.UPDATED;
switch (changedPropertyName) {
case UML2MetamodelConstants.INSTANCE_DELETED:
          changeType=Changelog.ChangeType.DELETED;
        break;
case UML2MetamodelConstants.INSTANCE_CREATED:
      changeType=Changelog.ChangeType.CREATED;
    break;
}
inMemoryLocalChangelog.addChange(sysmlId,sourceElement,changeType);
doneSignal.countDown();
}
);
}
}
 catch (Exception e) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
e.printStackTrace();
throw e;
}
}","@Override public void run(){
  try {
    CountDownLatch doneSignal=new CountDownLatch(events.size());
    new Thread(() -> {
      try {
        doneSignal.await();
      }
 catch (      InterruptedException ignored) {
      }
      SyncStatusConfigurator.getSyncStatusAction().update();
    }
,""String_Node_Str"").start();
    HashMap<String,String> spoofedIdMapping=new HashMap<>();
    for (    PropertyChangeEvent event : events) {
      EXECUTOR_SERVICE.execute(() -> {
        Object source=event.getSource();
        if (!(source instanceof Element) || ProjectUtilities.isElementInAttachedProject((Element)source)) {
          doneSignal.countDown();
          return;
        }
        Element sourceElement=(Element)source;
        String changedPropertyName=event.getPropertyName();
        if (changedPropertyName == null || changedPropertyName.startsWith(""String_Node_Str"") || IGNORED_PROPERTY_CHANGE_EVENT_NAMES.contains(changedPropertyName)) {
          doneSignal.countDown();
          return;
        }
        if ((event.getNewValue() == null && event.getOldValue() == null) || (event.getNewValue() != null && event.getNewValue().equals(event.getOldValue()))) {
          doneSignal.countDown();
          return;
        }
        if (sourceElement instanceof InstanceSpecification) {
          if (changedPropertyName.equals(UMLPackage.Literals.INSTANCE_SPECIFICATION__STEREOTYPED_ELEMENT.getName()) && event.getNewValue() == null && event.getOldValue() instanceof Element) {
            Element origin=(Element)event.getOldValue();
            String spoofedId=Converters.getElementToIdConverter().apply(origin) + MDKConstants.APPLIED_STEREOTYPE_INSTANCE_ID_SUFFIX;
            if (!spoofedId.equals(sourceElement.getLocalID())) {
              spoofedIdMapping.put(sourceElement.getLocalID(),spoofedId);
            }
          }
        }
 else         if (sourceElement instanceof Slot) {
          if (changedPropertyName.equals(UMLPackage.Literals.SLOT__OWNING_INSTANCE.getName()) && event.getNewValue() == null && event.getOldValue() instanceof Element) {
            if (!spoofedIdMapping.containsKey(sourceElement.getLocalID()) && sourceElement.getLocalID().equals(Converters.getElementToIdConverter().apply(sourceElement))) {
              spoofedIdMapping.put(sourceElement.getLocalID(),MDKConstants.SLOT_ID_SEPARATOR);
            }
            if (spoofedIdMapping.containsKey(sourceElement.getLocalID())) {
              String spoofedId=spoofedIdMapping.get(sourceElement.getLocalID());
              Element owningInstance=(Element)event.getOldValue();
              if (spoofedId.startsWith(MDKConstants.SLOT_ID_SEPARATOR)) {
                String owningInstanceId=spoofedIdMapping.containsKey(owningInstance.getLocalID()) ? spoofedIdMapping.get(owningInstance.getLocalID()) : Converters.getElementToIdConverter().apply(owningInstance);
                spoofedId=owningInstanceId + spoofedId;
                spoofedIdMapping.put(sourceElement.getLocalID(),spoofedId);
              }
 else               if (!spoofedId.startsWith(Converters.getElementToIdConverter().apply(owningInstance))) {
                System.out.println(""String_Node_Str"");
              }
            }
          }
 else           if (changedPropertyName.equals(UMLPackage.Literals.SLOT__DEFINING_FEATURE.getName()) && event.getNewValue() == null && event.getOldValue() instanceof Element) {
            if (!spoofedIdMapping.containsKey(sourceElement.getLocalID()) && sourceElement.getLocalID().equals(Converters.getElementToIdConverter().apply(sourceElement))) {
              spoofedIdMapping.put(sourceElement.getLocalID(),MDKConstants.SLOT_VALUE_ID_SEPARATOR);
            }
            if (spoofedIdMapping.containsKey(sourceElement.getLocalID())) {
              String spoofedId=spoofedIdMapping.get(sourceElement.getLocalID());
              Element definingFeature=(Element)event.getOldValue();
              if (spoofedId.endsWith(MDKConstants.SLOT_ID_SEPARATOR)) {
                spoofedId=spoofedId + Converters.getElementToIdConverter().apply(definingFeature);
                spoofedIdMapping.put(sourceElement.getLocalID(),spoofedId);
              }
 else               if (!spoofedId.endsWith(Converters.getElementToIdConverter().apply(definingFeature))) {
                System.out.println(""String_Node_Str"");
              }
            }
          }
        }
        if (changedPropertyName.equals(PropertyNames.OWNED_COMMENT) && event.getNewValue() == null && event.getOldValue() != null && event.getOldValue() instanceof Element) {
          spoofedIdMapping.put(((Element)event.getOldValue()).getLocalID(),""String_Node_Str"");
        }
        if (changedPropertyName.equals(PropertyNames.OWNING_PACKAGE) && event.getNewValue() == null && event.getOldValue() != null && event.getOldValue() instanceof Element) {
          if (((Element)event.getOldValue()).getLocalID().endsWith(MDKConstants.SYNC_SYSML_ID_SUFFIX)) {
            spoofedIdMapping.put(sourceElement.getLocalID(),""String_Node_Str"");
          }
        }
        if (!changedPropertyName.equals(UML2MetamodelConstants.INSTANCE_DELETED)) {
          Element root=sourceElement;
          while (root.getOwner() != null) {
            root=root.getOwner();
          }
          if (!root.equals(project.getPrimaryModel())) {
            doneSignal.countDown();
            return;
          }
        }
        Comment comment;
        if (changedPropertyName.equals(PropertyNames.BODY) && sourceElement instanceof Comment && (comment=(Comment)sourceElement).getAnnotatedElement().size() == 1 && comment.getAnnotatedElement().iterator().next() == comment.getOwner()) {
          sourceElement=sourceElement.getOwner();
        }
 else         if (changedPropertyName.equals(PropertyNames.VALUE) && sourceElement instanceof ValueSpecification || changedPropertyName.equals(PropertyNames.BODY) && sourceElement instanceof OpaqueExpression || changedPropertyName.equals(PropertyNames.OPERAND) && sourceElement instanceof Expression) {
          do {
            sourceElement=sourceElement.getOwner();
          }
 while (sourceElement instanceof ValueSpecification);
        }
        if (Converters.getElementToJsonConverter().apply(sourceElement,project) == null) {
          doneSignal.countDown();
          return;
        }
        String sysmlId=Converters.getElementToIdConverter().apply(sourceElement);
        if (sysmlId == null) {
          doneSignal.countDown();
          return;
        }
        if (spoofedIdMapping.containsKey(sysmlId)) {
          String spoofedId=spoofedIdMapping.get(sysmlId);
          if (!(sourceElement instanceof Slot) || !(spoofedId.startsWith(MDKConstants.SLOT_VALUE_ID_SEPARATOR) || spoofedId.endsWith(MDKConstants.SLOT_VALUE_ID_SEPARATOR))) {
            sysmlId=spoofedId;
          }
          if (sysmlId.isEmpty()) {
            doneSignal.countDown();
            return;
          }
        }
        Changelog.ChangeType changeType=Changelog.ChangeType.UPDATED;
switch (changedPropertyName) {
case UML2MetamodelConstants.INSTANCE_DELETED:
          changeType=Changelog.ChangeType.DELETED;
        break;
case UML2MetamodelConstants.INSTANCE_CREATED:
      changeType=Changelog.ChangeType.CREATED;
    break;
}
inMemoryLocalChangelog.addChange(sysmlId,sourceElement,changeType);
doneSignal.countDown();
}
);
}
}
 catch (Exception e) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
e.printStackTrace();
throw e;
}
}",0.3107159569489939
88414,"public void update(){
  final int[] inMemoryLocalCreatedCount=new int[]{0}, inMemoryLocalUpdatedCount=new int[]{0}, inMemoryLocalDeletedCount=new int[]{0}, persistedLocalCreatedCount=new int[]{0}, persistedLocalUpdatedCount=new int[]{0}, persistedLocalDeletedCount=new int[]{0}, totalLocalCreatedCount=new int[]{0}, totalLocalUpdatedCount=new int[]{0}, totalLocalDeletedCount=new int[]{0}, totalInMemoryLocalChangedCount=new int[]{0}, totalPersistedLocalChangedCount=new int[]{0}, totalLocalChangedCount=new int[]{0}, inMemoryJmsCreatedCount=new int[]{0}, inMemoryJmsUpdatedCount=new int[]{0}, inMemoryJmsDeletedCount=new int[]{0}, persistedJmsCreatedCount=new int[]{0}, persistedJmsUpdatedCount=new int[]{0}, persistedJmsDeletedCount=new int[]{0}, totalJmsCreatedCount=new int[]{0}, totalJmsUpdatedCount=new int[]{0}, totalJmsDeletedCount=new int[]{0}, totalInMemoryJmsChangedCount=new int[]{0}, totalPersistedJmsChangedCount=new int[]{0}, totalJmsChangedCount=new int[]{0}, totalChangedCount=new int[]{0};
  final NumberFormat numberFormat=NumberFormat.getIntegerInstance();
  Project project=Application.getInstance().getProject();
  if (project != null) {
    LocalSyncTransactionCommitListener localSyncTransactionCommitListener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
    if (localSyncTransactionCommitListener != null) {
      inMemoryLocalCreatedCount[0]=localSyncTransactionCommitListener.getInMemoryLocalChangelog().get(Changelog.ChangeType.CREATED).size();
      inMemoryLocalUpdatedCount[0]=localSyncTransactionCommitListener.getInMemoryLocalChangelog().get(Changelog.ChangeType.UPDATED).size();
      inMemoryLocalDeletedCount[0]=localSyncTransactionCommitListener.getInMemoryLocalChangelog().get(Changelog.ChangeType.DELETED).size();
    }
    totalInMemoryLocalChangedCount[0]=inMemoryLocalCreatedCount[0] + inMemoryLocalUpdatedCount[0] + inMemoryLocalDeletedCount[0];
    for (    SyncElement syncElement : SyncElements.getAllOfType(project,SyncElement.Type.LOCAL)) {
      Changelog<String,Void> changelog=SyncElements.buildChangelog(syncElement);
      persistedLocalCreatedCount[0]+=changelog.get(Changelog.ChangeType.CREATED).size();
      persistedLocalUpdatedCount[0]+=changelog.get(Changelog.ChangeType.UPDATED).size();
      persistedLocalDeletedCount[0]+=changelog.get(Changelog.ChangeType.DELETED).size();
    }
    totalPersistedLocalChangedCount[0]=persistedLocalCreatedCount[0] + persistedLocalUpdatedCount[0] + persistedLocalDeletedCount[0];
    totalLocalChangedCount[0]=totalInMemoryLocalChangedCount[0] + totalPersistedLocalChangedCount[0];
    JMSMessageListener jmsMessageListener=JMSSyncProjectEventListenerAdapter.getProjectMapping(project).getJmsMessageListener();
    if (jmsMessageListener != null) {
      inMemoryJmsCreatedCount[0]=jmsMessageListener.getInMemoryJMSChangelog().get(Changelog.ChangeType.CREATED).size();
      inMemoryJmsUpdatedCount[0]=jmsMessageListener.getInMemoryJMSChangelog().get(Changelog.ChangeType.UPDATED).size();
      inMemoryJmsDeletedCount[0]=jmsMessageListener.getInMemoryJMSChangelog().get(Changelog.ChangeType.DELETED).size();
    }
    totalInMemoryJmsChangedCount[0]=inMemoryJmsCreatedCount[0] + inMemoryJmsUpdatedCount[0] + inMemoryJmsDeletedCount[0];
    for (    SyncElement syncElement : SyncElements.getAllOfType(project,SyncElement.Type.MMS)) {
      Changelog<String,Void> changelog=SyncElements.buildChangelog(syncElement);
      persistedJmsCreatedCount[0]+=changelog.get(Changelog.ChangeType.CREATED).size();
      persistedJmsUpdatedCount[0]+=changelog.get(Changelog.ChangeType.UPDATED).size();
      persistedJmsDeletedCount[0]+=changelog.get(Changelog.ChangeType.DELETED).size();
    }
    totalPersistedJmsChangedCount[0]=persistedJmsCreatedCount[0] + persistedJmsUpdatedCount[0] + persistedJmsDeletedCount[0];
    totalJmsChangedCount[0]=totalInMemoryJmsChangedCount[0] + totalPersistedJmsChangedCount[0];
  }
  totalChangedCount[0]=totalLocalChangedCount[0] + totalJmsChangedCount[0];
  SwingUtilities.invokeLater(() -> {
    setName(NAME + ""String_Node_Str"" + numberFormat.format(totalChangedCount[0]));
    MDKPlugin.updateMainToolbarCategory();
  }
);
  if (getSyncStatusFrame().isVisible()) {
    totalLocalCreatedCount[0]=inMemoryLocalCreatedCount[0] + persistedLocalCreatedCount[0];
    totalLocalUpdatedCount[0]=inMemoryLocalUpdatedCount[0] + persistedLocalUpdatedCount[0];
    totalLocalDeletedCount[0]=inMemoryLocalDeletedCount[0] + persistedLocalDeletedCount[0];
    totalJmsCreatedCount[0]=inMemoryJmsCreatedCount[0] + persistedJmsCreatedCount[0];
    totalJmsUpdatedCount[0]=inMemoryJmsUpdatedCount[0] + persistedJmsUpdatedCount[0];
    totalJmsDeletedCount[0]=inMemoryJmsDeletedCount[0] + persistedJmsDeletedCount[0];
    SwingUtilities.invokeLater(() -> {
      getSyncStatusFrame().getInMemoryLocalCreatedLabel().setText(numberFormat.format(inMemoryLocalCreatedCount[0]));
      getSyncStatusFrame().getInMemoryLocalUpdatedLabel().setText(numberFormat.format(inMemoryLocalUpdatedCount[0]));
      getSyncStatusFrame().getInMemoryLocalDeletedLabel().setText(numberFormat.format(inMemoryLocalDeletedCount[0]));
      getSyncStatusFrame().getPersistedLocalCreatedLabel().setText(numberFormat.format(persistedLocalCreatedCount[0]));
      getSyncStatusFrame().getPersistedLocalUpdatedLabel().setText(numberFormat.format(persistedLocalUpdatedCount[0]));
      getSyncStatusFrame().getPersistedLocalDeletedLabel().setText(numberFormat.format(persistedLocalDeletedCount[0]));
      getSyncStatusFrame().getTotalLocalCreatedLabel().setText(numberFormat.format(totalLocalCreatedCount[0]));
      getSyncStatusFrame().getTotalLocalUpdatedLabel().setText(numberFormat.format(totalLocalUpdatedCount[0]));
      getSyncStatusFrame().getTotalLocalDeletedLabel().setText(numberFormat.format(totalLocalDeletedCount[0]));
      getSyncStatusFrame().getTotalInMemoryLocalChangedLabel().setText(numberFormat.format(totalInMemoryLocalChangedCount[0]));
      getSyncStatusFrame().getTotalPersistedLocalChangedLabel().setText(numberFormat.format(totalPersistedLocalChangedCount[0]));
      getSyncStatusFrame().getTotalLocalChangedLabel().setText(numberFormat.format(totalLocalChangedCount[0]));
      getSyncStatusFrame().getInMemoryJmsCreatedLabel().setText(numberFormat.format(inMemoryJmsCreatedCount[0]));
      getSyncStatusFrame().getInMemoryJmsUpdatedLabel().setText(numberFormat.format(inMemoryJmsUpdatedCount[0]));
      getSyncStatusFrame().getInMemoryJmsDeletedLabel().setText(numberFormat.format(inMemoryJmsDeletedCount[0]));
      getSyncStatusFrame().getPersistedJmsCreatedLabel().setText(numberFormat.format(persistedJmsCreatedCount[0]));
      getSyncStatusFrame().getPersistedJmsUpdatedLabel().setText(numberFormat.format(persistedJmsUpdatedCount[0]));
      getSyncStatusFrame().getPersistedJmsDeletedLabel().setText(numberFormat.format(persistedJmsDeletedCount[0]));
      getSyncStatusFrame().getTotalJmsCreatedLabel().setText(numberFormat.format(totalJmsCreatedCount[0]));
      getSyncStatusFrame().getTotalJmsUpdatedLabel().setText(numberFormat.format(totalJmsUpdatedCount[0]));
      getSyncStatusFrame().getTotalJmsDeletedLabel().setText(numberFormat.format(totalJmsDeletedCount[0]));
      getSyncStatusFrame().getTotalInMemoryJmsChangedLabel().setText(numberFormat.format(totalInMemoryJmsChangedCount[0]));
      getSyncStatusFrame().getTotalPersistedJmsChangedLabel().setText(numberFormat.format(totalPersistedJmsChangedCount[0]));
      getSyncStatusFrame().getTotalJmsChangedLabel().setText(numberFormat.format(totalJmsChangedCount[0]));
    }
);
  }
}","public void update(){
  final Changelog<String,Void> localPersistedChangelog=new Changelog<>(), mmsPersistedChangelog=new Changelog<>();
  final int[] inMemoryLocalCreatedCount=new int[]{0}, inMemoryLocalUpdatedCount=new int[]{0}, inMemoryLocalDeletedCount=new int[]{0}, persistedLocalCreatedCount=new int[]{0}, persistedLocalUpdatedCount=new int[]{0}, persistedLocalDeletedCount=new int[]{0}, totalLocalCreatedCount=new int[]{0}, totalLocalUpdatedCount=new int[]{0}, totalLocalDeletedCount=new int[]{0}, totalInMemoryLocalChangedCount=new int[]{0}, totalPersistedLocalChangedCount=new int[]{0}, totalLocalChangedCount=new int[]{0}, inMemoryJmsCreatedCount=new int[]{0}, inMemoryJmsUpdatedCount=new int[]{0}, inMemoryJmsDeletedCount=new int[]{0}, persistedJmsCreatedCount=new int[]{0}, persistedJmsUpdatedCount=new int[]{0}, persistedJmsDeletedCount=new int[]{0}, totalJmsCreatedCount=new int[]{0}, totalJmsUpdatedCount=new int[]{0}, totalJmsDeletedCount=new int[]{0}, totalInMemoryJmsChangedCount=new int[]{0}, totalPersistedJmsChangedCount=new int[]{0}, totalJmsChangedCount=new int[]{0}, totalChangedCount=new int[]{0};
  final NumberFormat numberFormat=NumberFormat.getIntegerInstance();
  Project project=Application.getInstance().getProject();
  if (project != null) {
    LocalSyncTransactionCommitListener localSyncTransactionCommitListener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
    if (localSyncTransactionCommitListener != null) {
      inMemoryLocalCreatedCount[0]=localSyncTransactionCommitListener.getInMemoryLocalChangelog().get(Changelog.ChangeType.CREATED).size();
      inMemoryLocalUpdatedCount[0]=localSyncTransactionCommitListener.getInMemoryLocalChangelog().get(Changelog.ChangeType.UPDATED).size();
      inMemoryLocalDeletedCount[0]=localSyncTransactionCommitListener.getInMemoryLocalChangelog().get(Changelog.ChangeType.DELETED).size();
    }
    totalInMemoryLocalChangedCount[0]=inMemoryLocalCreatedCount[0] + inMemoryLocalUpdatedCount[0] + inMemoryLocalDeletedCount[0];
    for (    SyncElement localSyncElement : SyncElements.getAllOfType(project,SyncElement.Type.LOCAL)) {
      SyncElements.buildChangelog(localPersistedChangelog,localSyncElement);
    }
    persistedLocalCreatedCount[0]+=localPersistedChangelog.get(Changelog.ChangeType.CREATED).size();
    persistedLocalUpdatedCount[0]+=localPersistedChangelog.get(Changelog.ChangeType.UPDATED).size();
    persistedLocalDeletedCount[0]+=localPersistedChangelog.get(Changelog.ChangeType.DELETED).size();
    totalPersistedLocalChangedCount[0]=persistedLocalCreatedCount[0] + persistedLocalUpdatedCount[0] + persistedLocalDeletedCount[0];
    totalLocalChangedCount[0]=totalInMemoryLocalChangedCount[0] + totalPersistedLocalChangedCount[0];
    JMSMessageListener jmsMessageListener=JMSSyncProjectEventListenerAdapter.getProjectMapping(project).getJmsMessageListener();
    if (jmsMessageListener != null) {
      inMemoryJmsCreatedCount[0]=jmsMessageListener.getInMemoryJMSChangelog().get(Changelog.ChangeType.CREATED).size();
      inMemoryJmsUpdatedCount[0]=jmsMessageListener.getInMemoryJMSChangelog().get(Changelog.ChangeType.UPDATED).size();
      inMemoryJmsDeletedCount[0]=jmsMessageListener.getInMemoryJMSChangelog().get(Changelog.ChangeType.DELETED).size();
    }
    totalInMemoryJmsChangedCount[0]=inMemoryJmsCreatedCount[0] + inMemoryJmsUpdatedCount[0] + inMemoryJmsDeletedCount[0];
    for (    SyncElement mmsSyncElement : SyncElements.getAllOfType(project,SyncElement.Type.MMS)) {
      SyncElements.buildChangelog(mmsPersistedChangelog,mmsSyncElement);
    }
    persistedJmsCreatedCount[0]+=mmsPersistedChangelog.get(Changelog.ChangeType.CREATED).size();
    persistedJmsUpdatedCount[0]+=mmsPersistedChangelog.get(Changelog.ChangeType.UPDATED).size();
    persistedJmsDeletedCount[0]+=mmsPersistedChangelog.get(Changelog.ChangeType.DELETED).size();
    totalPersistedJmsChangedCount[0]=persistedJmsCreatedCount[0] + persistedJmsUpdatedCount[0] + persistedJmsDeletedCount[0];
    totalJmsChangedCount[0]=totalInMemoryJmsChangedCount[0] + totalPersistedJmsChangedCount[0];
  }
  totalChangedCount[0]=totalLocalChangedCount[0] + totalJmsChangedCount[0];
  SwingUtilities.invokeLater(() -> {
    setName(NAME + ""String_Node_Str"" + numberFormat.format(totalChangedCount[0]));
    MDKPlugin.updateMainToolbarCategory();
  }
);
  if (getSyncStatusFrame().isVisible()) {
    totalLocalCreatedCount[0]=inMemoryLocalCreatedCount[0] + persistedLocalCreatedCount[0];
    totalLocalUpdatedCount[0]=inMemoryLocalUpdatedCount[0] + persistedLocalUpdatedCount[0];
    totalLocalDeletedCount[0]=inMemoryLocalDeletedCount[0] + persistedLocalDeletedCount[0];
    totalJmsCreatedCount[0]=inMemoryJmsCreatedCount[0] + persistedJmsCreatedCount[0];
    totalJmsUpdatedCount[0]=inMemoryJmsUpdatedCount[0] + persistedJmsUpdatedCount[0];
    totalJmsDeletedCount[0]=inMemoryJmsDeletedCount[0] + persistedJmsDeletedCount[0];
    SwingUtilities.invokeLater(() -> {
      getSyncStatusFrame().getInMemoryLocalCreatedLabel().setText(numberFormat.format(inMemoryLocalCreatedCount[0]));
      getSyncStatusFrame().getInMemoryLocalUpdatedLabel().setText(numberFormat.format(inMemoryLocalUpdatedCount[0]));
      getSyncStatusFrame().getInMemoryLocalDeletedLabel().setText(numberFormat.format(inMemoryLocalDeletedCount[0]));
      getSyncStatusFrame().getPersistedLocalCreatedLabel().setText(numberFormat.format(persistedLocalCreatedCount[0]));
      getSyncStatusFrame().getPersistedLocalUpdatedLabel().setText(numberFormat.format(persistedLocalUpdatedCount[0]));
      getSyncStatusFrame().getPersistedLocalDeletedLabel().setText(numberFormat.format(persistedLocalDeletedCount[0]));
      getSyncStatusFrame().getTotalLocalCreatedLabel().setText(numberFormat.format(totalLocalCreatedCount[0]));
      getSyncStatusFrame().getTotalLocalUpdatedLabel().setText(numberFormat.format(totalLocalUpdatedCount[0]));
      getSyncStatusFrame().getTotalLocalDeletedLabel().setText(numberFormat.format(totalLocalDeletedCount[0]));
      getSyncStatusFrame().getTotalInMemoryLocalChangedLabel().setText(numberFormat.format(totalInMemoryLocalChangedCount[0]));
      getSyncStatusFrame().getTotalPersistedLocalChangedLabel().setText(numberFormat.format(totalPersistedLocalChangedCount[0]));
      getSyncStatusFrame().getTotalLocalChangedLabel().setText(numberFormat.format(totalLocalChangedCount[0]));
      getSyncStatusFrame().getInMemoryJmsCreatedLabel().setText(numberFormat.format(inMemoryJmsCreatedCount[0]));
      getSyncStatusFrame().getInMemoryJmsUpdatedLabel().setText(numberFormat.format(inMemoryJmsUpdatedCount[0]));
      getSyncStatusFrame().getInMemoryJmsDeletedLabel().setText(numberFormat.format(inMemoryJmsDeletedCount[0]));
      getSyncStatusFrame().getPersistedJmsCreatedLabel().setText(numberFormat.format(persistedJmsCreatedCount[0]));
      getSyncStatusFrame().getPersistedJmsUpdatedLabel().setText(numberFormat.format(persistedJmsUpdatedCount[0]));
      getSyncStatusFrame().getPersistedJmsDeletedLabel().setText(numberFormat.format(persistedJmsDeletedCount[0]));
      getSyncStatusFrame().getTotalJmsCreatedLabel().setText(numberFormat.format(totalJmsCreatedCount[0]));
      getSyncStatusFrame().getTotalJmsUpdatedLabel().setText(numberFormat.format(totalJmsUpdatedCount[0]));
      getSyncStatusFrame().getTotalJmsDeletedLabel().setText(numberFormat.format(totalJmsDeletedCount[0]));
      getSyncStatusFrame().getTotalInMemoryJmsChangedLabel().setText(numberFormat.format(totalInMemoryJmsChangedCount[0]));
      getSyncStatusFrame().getTotalPersistedJmsChangedLabel().setText(numberFormat.format(totalPersistedJmsChangedCount[0]));
      getSyncStatusFrame().getTotalJmsChangedLabel().setText(numberFormat.format(totalJmsChangedCount[0]));
    }
);
  }
}",0.9717023894321052
88415,"@Override public void actionPerformed(ActionEvent e){
  Stereotype documentStereotype=Utils.getDocumentStereotype(project);
  Stereotype viewStereotype=Utils.getViewStereotype(project);
  for (  Element element : targetElements) {
    if (!StereotypesHelper.hasStereotypeOrDerived(element,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(element,documentStereotype)) {
      continue;
    }
    Project project=Project.getProject(element);
    URIBuilder uriBase=MMSUtils.getServiceUri(project);
    if (uriBase == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    uriBase.setHost(uriBase.getHost() + ""String_Node_Str"");
    String uriPath=""String_Node_Str"" + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    String branchName=EsiUtils.getCurrentBranch(project.getPrimaryProject()).getName();
    uriPath+=""String_Node_Str"" + (branchName.equals(""String_Node_Str"") ? ""String_Node_Str"" : branchName);
    Set<Element> documents=new HashSet<>();
    ArrayList<Element> viewChain=new ArrayList<>();
    viewChain.add(element);
    for (int i=0; i < viewChain.size(); i++) {
      if (StereotypesHelper.hasStereotype(viewChain.get(i),documentStereotype)) {
        documents.add(viewChain.get(i));
      }
      Set<Element> childViews=new HashSet<>();
      for (      Property prop : ((Class)viewChain.get(i)).getOwnedAttribute()) {
        if (!(prop.getType() instanceof Class)) {
          continue;
        }
        Class type=(Class)prop.getType();
        if (type == null || !(StereotypesHelper.hasStereotypeOrDerived(type,viewStereotype) || StereotypesHelper.hasStereotypeOrDerived(type,documentStereotype))) {
          continue;
        }
        childViews.add(type);
      }
      for (      Relationship relation : viewChain.get(i).get_relationshipOfRelatedElement()) {
        if (!(relation instanceof Association)) {
          continue;
        }
        Element assocEnd=((Association)relation).getMemberEnd().get(0).getOwner();
        if (!StereotypesHelper.hasStereotypeOrDerived(assocEnd,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(assocEnd,documentStereotype)) {
          continue;
        }
        if (!childViews.contains(assocEnd) && !viewChain.contains(assocEnd)) {
          viewChain.add(assocEnd);
        }
      }
    }
    if (documents.size() > 1) {
      String label=""String_Node_Str"";
      List<JButton> linkButtons=new ArrayList<>();
      try {
        if (!documents.isEmpty()) {
          label=""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"";
          for (          Element doc : documents) {
            if (doc.equals(element)) {
              uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(element);
            }
 else {
              uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(doc) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
            }
            JButton button=new ViewButton(doc.getHumanName(),uriBase.setPath(uriPath).build());
            linkButtons.add(button);
          }
        }
      }
 catch (      URISyntaxException se) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
        return;
      }
      ViewEditorLinkForm viewLinkForm=new ViewEditorLinkForm(label,linkButtons);
      viewLinkForm.setVisible(true);
    }
 else {
      uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(element) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
      if (Desktop.isDesktopSupported()) {
        try {
          if (documents.size() == 0) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
          }
          Desktop.getDesktop().browse(uriBase.setPath(uriPath).build());
        }
 catch (        URISyntaxException|IOException e1) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + uriBase.toString());
          e1.printStackTrace();
        }
      }
 else {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + uriBase.toString());
      }
    }
  }
}","@Override public void actionPerformed(ActionEvent e){
  Stereotype documentStereotype=Utils.getDocumentStereotype(project);
  Stereotype viewStereotype=Utils.getViewStereotype(project);
  for (  Element element : targetElements) {
    if (!StereotypesHelper.hasStereotypeOrDerived(element,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(element,documentStereotype)) {
      continue;
    }
    URIBuilder uriBase=MMSUtils.getServiceUri(project);
    if (uriBase == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    uriBase.setHost(uriBase.getHost() + ""String_Node_Str"");
    String uriPath=""String_Node_Str"" + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    String branchName=EsiUtils.getCurrentBranch(project.getPrimaryProject()).getName();
    uriPath+=""String_Node_Str"" + (branchName.equals(""String_Node_Str"") ? ""String_Node_Str"" : branchName);
    Set<Element> documents=new HashSet<>();
    ArrayList<Element> viewChain=new ArrayList<>();
    viewChain.add(element);
    for (int i=0; i < viewChain.size(); i++) {
      if (StereotypesHelper.hasStereotype(viewChain.get(i),documentStereotype)) {
        documents.add(viewChain.get(i));
      }
      Set<Element> childViews=new HashSet<>();
      for (      Property prop : ((Class)viewChain.get(i)).getOwnedAttribute()) {
        if (!(prop.getType() instanceof Class)) {
          continue;
        }
        Class type=(Class)prop.getType();
        if (type == null || !(StereotypesHelper.hasStereotypeOrDerived(type,viewStereotype) || StereotypesHelper.hasStereotypeOrDerived(type,documentStereotype))) {
          continue;
        }
        childViews.add(type);
      }
      for (      Relationship relation : viewChain.get(i).get_relationshipOfRelatedElement()) {
        if (!(relation instanceof Association)) {
          continue;
        }
        Element assocEnd=((Association)relation).getMemberEnd().get(0).getOwner();
        if (!StereotypesHelper.hasStereotypeOrDerived(assocEnd,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(assocEnd,documentStereotype)) {
          continue;
        }
        if (!childViews.contains(assocEnd) && !viewChain.contains(assocEnd)) {
          viewChain.add(assocEnd);
        }
      }
    }
    if (documents.size() > 1) {
      String label=""String_Node_Str"";
      List<JButton> linkButtons=new ArrayList<>();
      try {
        if (!documents.isEmpty()) {
          label=""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"";
          for (          Element doc : documents) {
            if (doc.equals(element)) {
              uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(element);
            }
 else {
              uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(doc) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
            }
            JButton button=new ViewButton(doc.getHumanName(),uriBase.setPath(uriPath).build());
            linkButtons.add(button);
          }
        }
      }
 catch (      URISyntaxException se) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
        return;
      }
      ViewEditorLinkForm viewLinkForm=new ViewEditorLinkForm(label,linkButtons);
      viewLinkForm.setVisible(true);
    }
 else {
      uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(element) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
      if (Desktop.isDesktopSupported()) {
        try {
          if (documents.size() == 0) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
          }
          Desktop.getDesktop().browse(uriBase.setPath(uriPath).build());
        }
 catch (        URISyntaxException|IOException e1) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + uriBase.toString());
          e1.printStackTrace();
        }
      }
 else {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + uriBase.toString());
      }
    }
  }
}",0.994205983209176
88416,"@Override public void run(ProgressStatus progressStatus){
  progressStatus.init(""String_Node_Str"",6);
  if (SessionManager.getInstance().isSessionCreated(project)) {
    SessionManager.getInstance().closeSession(project);
  }
  Map<String,Pair<ObjectNode,InstanceSpecification>> instanceSpecificationMap=new LinkedHashMap<>();
  Map<String,Pair<ObjectNode,Slot>> slotMap=new LinkedHashMap<>();
  Map<String,ViewMapping> viewMap=new LinkedHashMap<>();
  for (  Element rootView : rootViews) {
    if (MDUtils.isDeveloperMode()) {
    }
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(1);
    DocumentValidator dv=new DocumentValidator(rootView);
    dv.validateDocument();
    if (dv.isFatal()) {
      dv.printErrors(false);
      return;
    }
    DocumentGenerator dg=new DocumentGenerator(rootView,dv,null,false);
    Document dge=dg.parseDocument(true,recurse,false);
    new PostProcessor().process(dge);
    DocBookOutputVisitor docBookOutputVisitor=new DocBookOutputVisitor(true);
    dge.accept(docBookOutputVisitor);
    DBBook book=docBookOutputVisitor.getBook();
    if (book == null) {
      return;
    }
    ViewHierarchyVisitor viewHierarchyVisitor=new ViewHierarchyVisitor();
    dge.accept(viewHierarchyVisitor);
    for (    Element view : viewHierarchyVisitor.getView2ViewElements().keySet()) {
      if (processedElements.contains(view)) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
        continue;
      }
      ViewMapping viewMapping=viewMap.containsKey(Converters.getElementToIdConverter().apply(view)) ? viewMap.get(Converters.getElementToIdConverter().apply(view)) : new ViewMapping();
      viewMapping.setElement(view);
      viewMapping.setDbBook(book);
      viewMap.put(Converters.getElementToIdConverter().apply(view),viewMapping);
    }
  }
  Map<Element,Constraint> viewConstraintHashMap=new HashMap<>(0);
  for (  ViewMapping viewMapping : viewMap.values()) {
    Element view=viewMapping.getElement();
    if (view == null) {
      continue;
    }
    Constraint constraint=Utils.getViewConstraint(view);
    if (constraint == null) {
      Element element=Converters.getIdToElementConverter().apply(Converters.getElementToIdConverter().apply(view) + MDKConstants.VIEW_CONSTRAINT_SYSML_ID_SUFFIX,project);
      if (element instanceof Constraint) {
        constraint=(Constraint)element;
      }
    }
    if (constraint != null) {
      viewConstraintHashMap.put(view,constraint);
    }
  }
  if (!viewConstraintHashMap.isEmpty()) {
    try {
      SessionManager.getInstance().createSession(project,""String_Node_Str"");
      if (!SessionManager.getInstance().isSessionCreated(project)) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        failure=true;
        return;
      }
      for (      Map.Entry<Element,Constraint> entry : viewConstraintHashMap.entrySet()) {
        Constraint constraint=entry.getValue();
        if (!constraint.isEditable()) {
          updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str"" + constraint.getLocalID() + ""String_Node_Str""));
          failure=true;
          continue;
        }
        Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(constraint));
        try {
          ModelElementsManager.getInstance().removeElement(constraint);
        }
 catch (        ReadOnlyElementException e) {
          updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str"" + constraint.getLocalID() + ""String_Node_Str""));
          failure=true;
        }
      }
    }
  finally {
      if (SessionManager.getInstance().isSessionCreated(project)) {
        SessionManager.getInstance().closeSession(project);
      }
    }
  }
  if (failure) {
    Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    return;
  }
  if (handleCancel(progressStatus)) {
    return;
  }
  LocalSyncTransactionCommitListener localSyncTransactionCommitListener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  Set<Element> elementsToDelete=new HashSet<>();
  if (SessionManager.getInstance().isSessionCreated(project)) {
    SessionManager.getInstance().closeSession(project);
  }
  SessionManager.getInstance().createSession(project,""String_Node_Str"");
  if (!SessionManager.getInstance().isSessionCreated(project)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    failure=true;
    return;
  }
  if (localSyncTransactionCommitListener != null) {
    localSyncTransactionCommitListener.setDisabled(true);
  }
  List<String> viewIDs=new ArrayList<>();
  if (!viewMap.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(2);
    ObjectNode viewResponse;
    try {
      File responseFile=MMSUtils.getElements(project,viewMap.keySet(),progressStatus);
      try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
        viewResponse=JacksonUtils.parseJsonObject(jsonParser);
      }
     }
 catch (    ServerException|IOException|URISyntaxException e) {
      failure=true;
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
    JsonNode viewElementsJsonArray;
    if (viewResponse != null && (viewElementsJsonArray=viewResponse.get(""String_Node_Str"")) != null && viewElementsJsonArray.isArray()) {
      Queue<String> instanceIDs=new LinkedList<>();
      Queue<String> slotIDs=new LinkedList<>();
      Property generatedFromViewProperty=Utils.getGeneratedFromViewProperty(project), generatedFromElementProperty=Utils.getGeneratedFromElementProperty(project);
      for (      JsonNode elementJsonNode : viewElementsJsonArray) {
        if (!elementJsonNode.isObject()) {
          continue;
        }
        ObjectNode elementObjectNode=(ObjectNode)elementJsonNode;
        JsonNode viewOperandJsonNode=JacksonUtils.getAtPath(elementObjectNode,""String_Node_Str"" + MDKConstants.CONTENTS_KEY + ""String_Node_Str""), sysmlIdJson=elementObjectNode.get(MDKConstants.ID_KEY);
        String sysmlId;
        if (sysmlIdJson != null && sysmlIdJson.isTextual() && !(sysmlId=sysmlIdJson.asText()).isEmpty()) {
          viewIDs.add(sysmlId);
          if (viewOperandJsonNode != null && viewOperandJsonNode.isArray()) {
            List<String> viewInstanceIDs=new ArrayList<>(viewOperandJsonNode.size());
            for (            JsonNode viewOperandJson : viewOperandJsonNode) {
              JsonNode instanceIdJsonNode=viewOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
              String instanceId;
              if (instanceIdJsonNode != null && instanceIdJsonNode.isTextual() && !(instanceId=instanceIdJsonNode.asText()).isEmpty()) {
                if (generatedFromViewProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                }
                if (generatedFromElementProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                }
                instanceIDs.add(instanceId);
                viewInstanceIDs.add(instanceId);
              }
            }
            ViewMapping viewMapping=viewMap.containsKey(sysmlId) ? viewMap.get(sysmlId) : new ViewMapping();
            viewMapping.setObjectNode(elementObjectNode);
            viewMapping.setInstanceIDs(viewInstanceIDs);
            viewMap.put(sysmlId,viewMapping);
          }
        }
      }
      List<ObjectNode> instanceObjectNodes=new ArrayList<>();
      List<ObjectNode> slotObjectNodes=new ArrayList<>();
      while (!instanceIDs.isEmpty() && !slotIDs.isEmpty()) {
        if (handleCancel(progressStatus)) {
          return;
        }
        List<String> elementIDs=new ArrayList<>(instanceIDs);
        elementIDs.addAll(slotIDs);
        ObjectNode instanceAndSlotResponse;
        try {
          File responseFile=MMSUtils.getElements(project,elementIDs,progressStatus);
          try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
            instanceAndSlotResponse=JacksonUtils.parseJsonObject(jsonParser);
          }
         }
 catch (        ServerException|IOException|URISyntaxException e) {
          failure=true;
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          e.printStackTrace();
          SessionManager.getInstance().cancelSession(project);
          return;
        }
        instanceIDs.clear();
        slotIDs.clear();
        JsonNode instanceAndSlotElementsJsonArray;
        if (instanceAndSlotResponse != null && (instanceAndSlotElementsJsonArray=instanceAndSlotResponse.get(""String_Node_Str"")) != null && instanceAndSlotElementsJsonArray.isArray()) {
          for (          JsonNode elementJson : instanceAndSlotElementsJsonArray) {
            JsonNode instanceOperandJsonArray=JacksonUtils.getAtPath(elementJson,""String_Node_Str"");
            if (instanceOperandJsonArray != null && instanceOperandJsonArray.isArray()) {
              for (              JsonNode instanceOperandJson : instanceOperandJsonArray) {
                JsonNode instanceIdJson=instanceOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
                String instanceId;
                if (instanceIdJson != null && instanceIdJson.isTextual() && !(instanceId=instanceIdJson.asText()).isEmpty()) {
                  if (generatedFromViewProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                  }
                  if (generatedFromElementProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                  }
                  instanceIDs.add(instanceId);
                }
              }
            }
            JsonNode typeJson=elementJson.get(MDKConstants.TYPE_KEY);
            if (typeJson.isTextual() && elementJson.isObject()) {
              (typeJson.asText().equalsIgnoreCase(""String_Node_Str"") ? slotObjectNodes : instanceObjectNodes).add((ObjectNode)elementJson);
            }
          }
        }
      }
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(3);
      EMFImporter emfImporter=new EMFImporter(){
        @Override public List<PreProcessor> getPreProcessors(){
          if (preProcessors == null) {
            preProcessors=new ArrayList<>(super.getPreProcessors());
            preProcessors.remove(PreProcessor.SYSML_ID_VALIDATION);
          }
          return preProcessors;
        }
        @Override public List<EStructuralFeatureOverride> getEStructuralFeatureOverrides(){
          if (eStructuralFeatureOverrides == null) {
            eStructuralFeatureOverrides=new ArrayList<>(super.getEStructuralFeatureOverrides());
            eStructuralFeatureOverrides.remove(EStructuralFeatureOverride.OWNER);
            eStructuralFeatureOverrides.add(new EStructuralFeatureOverride(EStructuralFeatureOverride.OWNER.getPredicate(),(objectNode,eStructuralFeature,project,strict,element) -> {
              if (element instanceof InstanceSpecification) {
                element.setOwner(project.getPrimaryModel());
                return element;
              }
              return EStructuralFeatureOverride.OWNER.getFunction().apply(objectNode,eStructuralFeature,project,strict,element);
            }
));
          }
          return eStructuralFeatureOverrides;
        }
      }
;
      for (      Boolean strict : Arrays.asList(false,true)) {
        ListIterator<ObjectNode> instanceObjectNodesIterator=instanceObjectNodes.listIterator(instanceObjectNodes.size());
        while (instanceObjectNodesIterator.hasPrevious()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode instanceObjectNode=instanceObjectNodesIterator.previous();
          try {
            Changelog.Change<Element> change=emfImporter.apply(instanceObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof InstanceSpecification) {
              instanceSpecificationMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(instanceObjectNode,(InstanceSpecification)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + instanceObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            instanceObjectNodesIterator.remove();
          }
        }
        ListIterator<ObjectNode> slotObjectNodesIterator=slotObjectNodes.listIterator();
        while (slotObjectNodesIterator.hasNext()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode slotObjectNode=slotObjectNodesIterator.next();
          try {
            Changelog.Change<Element> change=emfImporter.apply(slotObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof Slot) {
              slotMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(slotObjectNode,(Slot)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + slotObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            slotObjectNodesIterator.remove();
          }
        }
      }
      for (      ViewMapping viewMapping : viewMap.values()) {
        Element view=viewMapping.getElement();
        ObjectNode viewObjectNode=viewMapping.getObjectNode();
        if (viewObjectNode == null) {
          continue;
        }
        JsonNode viewContentsJsonNode=viewObjectNode.get(MDKConstants.CONTENTS_KEY);
        if (viewContentsJsonNode == null || !viewContentsJsonNode.isObject()) {
          continue;
        }
        try {
          Changelog.Change<Element> change=Converters.getJsonToElementConverter().apply((ObjectNode)viewContentsJsonNode,project,false);
          if (change.getChanged() != null && change.getChanged() instanceof Expression) {
            Expression expression=(Expression)change.getChanged();
            expression.getOperand().stream().filter(vs -> !(vs instanceof InstanceValue) || ((InstanceValue)vs).getInstance() == null).collect(Collectors.toList()).forEach(vs -> {
              elementsToDelete.add(vs);
              expression.getOperand().remove(vs);
            }
);
            presentationElementUtils.getOrCreateViewConstraint(view).setSpecification(expression);
          }
        }
 catch (        ImportException|ReadOnlyElementException e) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
        }
      }
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(4);
  Set<Element> views=new LinkedHashSet<>();
  Map<Element,List<PresentationElementInstance>> view2pe=new LinkedHashMap<>();
  Map<Element,List<PresentationElementInstance>> view2unused=new LinkedHashMap<>();
  Map<Element,JSONArray> view2elements=new LinkedHashMap<>();
  Map<String,ObjectNode> images=new LinkedHashMap<>();
  Set<Element> skippedViews=new HashSet<>();
  for (  Element rootView : rootViews) {
    DBAlfrescoVisitor dbAlfrescoVisitor=new DBAlfrescoVisitor(recurse,true);
    try {
      viewMap.get(Converters.getElementToIdConverter().apply(rootView)).getDbBook().accept(dbAlfrescoVisitor);
    }
 catch (    Exception e) {
      Utils.printException(e);
      e.printStackTrace();
    }
    views.addAll(presentationElementUtils.getViewProcessOrder(rootView,dbAlfrescoVisitor.getHierarchyElements()));
    view2pe.putAll(dbAlfrescoVisitor.getView2Pe());
    view2unused.putAll(dbAlfrescoVisitor.getView2Unused());
    view2elements.putAll(dbAlfrescoVisitor.getView2Elements());
    images.putAll(dbAlfrescoVisitor.getImages());
    views.removeAll(processedElements);
  }
  for (  Element view : views) {
    if (ProjectUtilities.isElementInAttachedProject(view)) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewInProject.addViolation(violation);
      skippedViews.add(view);
    }
    if (!viewIDs.contains(Converters.getElementToIdConverter().apply(view))) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewDoesNotExist.addViolation(violation);
      skippedViews.add(view);
    }
  }
  if (failure) {
    Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    SessionManager.getInstance().cancelSession(project);
    return;
  }
  try {
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      handlePes(view2pe.get(view),null);
      presentationElementUtils.updateOrCreateConstraintFromPresentationElements(view,view2pe.get(view));
    }
    LinkedList<ObjectNode> elementsToCommit=new LinkedList<>();
    Queue<Pair<InstanceSpecification,Element>> instanceToView=new LinkedList<>();
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      ObjectNode clientViewJson=Converters.getElementToJsonConverter().apply(view,project);
      if (clientViewJson == null) {
        skippedViews.add(view);
        continue;
      }
      if (view2elements.get(view) != null) {
        ArrayNode displayedElements=clientViewJson.putArray(MDKConstants.DISPLAYED_ELEMENT_IDS_KEY);
        for (        Object id : view2elements.get(view)) {
          displayedElements.add((String)id);
        }
      }
      Object o;
      ObjectNode serverViewJson=(o=viewMap.get(Converters.getElementToIdConverter().apply(view))) != null ? ((ViewMapping)o).getObjectNode() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientViewJson,serverViewJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str""+ JsonPatchFunction.getInstance().apply(clientViewJson,serverViewJson).toString());
        }
        elementsToCommit.add(clientViewJson);
      }
      for (      PresentationElementInstance presentationElementInstance : view2pe.get(view)) {
        if (presentationElementInstance.getInstance() != null) {
          instanceToView.add(new Pair<>(presentationElementInstance.getInstance(),view));
        }
      }
    }
    String viewInstanceBinId=MDKConstants.VIEW_INSTANCES_BIN_PREFIX + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    while (!instanceToView.isEmpty()) {
      Pair<InstanceSpecification,Element> pair=instanceToView.remove();
      InstanceSpecification instance=pair.getKey();
      List<InstanceSpecification> subInstances=presentationElementUtils.getCurrentInstances(instance,pair.getValue()).getAll();
      for (      InstanceSpecification subInstance : subInstances) {
        instanceToView.add(new Pair<>(subInstance,pair.getValue()));
      }
      ObjectNode clientInstanceSpecificationJson=Converters.getElementToJsonConverter().apply(instance,project);
      if (clientInstanceSpecificationJson == null) {
        continue;
      }
      clientInstanceSpecificationJson.put(MDKConstants.OWNER_ID_KEY,viewInstanceBinId);
      ObjectNode serverInstanceSpecificationJson=instanceSpecificationMap.containsKey(Converters.getElementToIdConverter().apply(instance)) ? instanceSpecificationMap.get(Converters.getElementToIdConverter().apply(instance)).getKey() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientInstanceSpecificationJson,serverInstanceSpecificationJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(instance) + ""String_Node_Str""+ JsonPatchFunction.getInstance().apply(clientInstanceSpecificationJson,serverInstanceSpecificationJson).toString());
        }
        elementsToCommit.add(clientInstanceSpecificationJson);
      }
      for (      Slot slot : instance.getSlot()) {
        ObjectNode clientSlotJson=Converters.getElementToJsonConverter().apply(slot,project);
        if (clientSlotJson == null) {
          continue;
        }
        JsonNode serverSlotJson=slotMap.containsKey(Converters.getElementToIdConverter().apply(slot)) ? slotMap.get(Converters.getElementToIdConverter().apply(slot)).getKey() : null;
        if (!JsonEquivalencePredicate.getInstance().test(clientSlotJson,serverSlotJson)) {
          elementsToCommit.add(clientSlotJson);
          if (MDUtils.isDeveloperMode()) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(slot) + ""String_Node_Str""+ JsonPatchFunction.getInstance().apply(clientSlotJson,serverSlotJson).toString());
          }
        }
      }
    }
    boolean changed=false;
    if (elementsToCommit.size() > 0) {
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(5);
      Application.getInstance().getGUILog().log(""String_Node_Str"" + elementsToCommit.size() + ""String_Node_Str""+ (elementsToCommit.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,elementsToCommit,MMSUtils.JsonBlobType.ELEMENT_JSON);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    Set<String> mmsElementsToDelete=new HashSet<>();
    for (    List<PresentationElementInstance> presentationElementInstances : view2unused.values()) {
      for (      PresentationElementInstance presentationElementInstance : presentationElementInstances) {
        if (presentationElementInstance.getInstance() == null) {
          continue;
        }
        String id=Converters.getElementToIdConverter().apply(presentationElementInstance.getInstance());
        if (id == null) {
          continue;
        }
        mmsElementsToDelete.add(id);
      }
    }
    if (elementsToCommit.size() > 0) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + mmsElementsToDelete.size() + ""String_Node_Str""+ (mmsElementsToDelete.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,mmsElementsToDelete,MMSUtils.JsonBlobType.ELEMENT_ID);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    if (!changed) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(6);
    for (    Pair<ObjectNode,Slot> pair : slotMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Pair<ObjectNode,InstanceSpecification> pair : instanceSpecificationMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Element element : views) {
      Constraint constraint=Utils.getViewConstraint(element);
      if (constraint == null) {
        continue;
      }
      elementsToDelete.add(constraint);
      ValueSpecification valueSpecification=constraint.getSpecification();
      if (valueSpecification == null) {
        continue;
      }
      elementsToDelete.add(valueSpecification);
      List<ValueSpecification> operands;
      if (!(valueSpecification instanceof Expression) || (operands=((Expression)valueSpecification).getOperand()) == null) {
        continue;
      }
      for (      ValueSpecification operand : operands) {
        elementsToDelete.add(operand);
        InstanceSpecification instanceSpecification;
        if (!(operand instanceof InstanceValue) || (instanceSpecification=((InstanceValue)operand).getInstance()) == null) {
          continue;
        }
        elementsToDelete.add(instanceSpecification);
        for (        Slot slot : instanceSpecification.getSlot()) {
          elementsToDelete.add(slot);
          elementsToDelete.addAll(slot.getValue());
        }
      }
    }
    for (    Element element : elementsToDelete) {
      try {
        ModelElementsManager.getInstance().removeElement(element);
      }
 catch (      ReadOnlyElementException ignored) {
        System.out.println(""String_Node_Str"" + element.getLocalID());
      }
    }
    processedElements.addAll(views);
  }
 catch (  Exception e) {
    failure=true;
    Utils.printException(e);
  }
 finally {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().cancelSession(project);
    }
    if (localSyncTransactionCommitListener != null) {
      localSyncTransactionCommitListener.setDisabled(false);
    }
  }
  ImageValidator iv=new ImageValidator(images,images);
  iv.validate(project);
  for (  ValidationRule validationRule : iv.getSuite().getValidationRules()) {
    for (    ValidationRuleViolation validationRuleViolation : validationRule.getViolations()) {
      if (!validationRuleViolation.getActions().isEmpty()) {
        validationRuleViolation.getActions().get(0).actionPerformed(null);
      }
    }
  }
  if (suite.hasErrors()) {
    Utils.displayValidationWindow(project,vss,""String_Node_Str"");
  }
}","@Override public void run(ProgressStatus progressStatus){
  progressStatus.init(""String_Node_Str"",6);
  if (SessionManager.getInstance().isSessionCreated(project)) {
    SessionManager.getInstance().closeSession(project);
  }
  Map<String,Pair<ObjectNode,InstanceSpecification>> instanceSpecificationMap=new LinkedHashMap<>();
  Map<String,Pair<ObjectNode,Slot>> slotMap=new LinkedHashMap<>();
  Map<String,ViewMapping> viewMap=new LinkedHashMap<>();
  for (  Element rootView : rootViews) {
    if (MDUtils.isDeveloperMode()) {
    }
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(1);
    DocumentValidator dv=new DocumentValidator(rootView);
    dv.validateDocument();
    if (dv.isFatal()) {
      dv.printErrors(false);
      return;
    }
    DocumentGenerator dg=new DocumentGenerator(rootView,dv,null,false);
    Document dge=dg.parseDocument(true,recurse,false);
    new PostProcessor().process(dge);
    DocBookOutputVisitor docBookOutputVisitor=new DocBookOutputVisitor(true);
    dge.accept(docBookOutputVisitor);
    DBBook book=docBookOutputVisitor.getBook();
    if (book == null) {
      return;
    }
    ViewHierarchyVisitor viewHierarchyVisitor=new ViewHierarchyVisitor();
    dge.accept(viewHierarchyVisitor);
    for (    Element view : viewHierarchyVisitor.getView2ViewElements().keySet()) {
      if (processedElements.contains(view)) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
        continue;
      }
      ViewMapping viewMapping=viewMap.containsKey(Converters.getElementToIdConverter().apply(view)) ? viewMap.get(Converters.getElementToIdConverter().apply(view)) : new ViewMapping();
      viewMapping.setElement(view);
      viewMapping.setDbBook(book);
      viewMap.put(Converters.getElementToIdConverter().apply(view),viewMapping);
    }
  }
  Map<Element,Constraint> viewConstraintHashMap=new HashMap<>(0);
  for (  ViewMapping viewMapping : viewMap.values()) {
    Element view=viewMapping.getElement();
    if (view == null) {
      continue;
    }
    Constraint constraint=Utils.getViewConstraint(view);
    if (constraint == null) {
      Element element=Converters.getIdToElementConverter().apply(Converters.getElementToIdConverter().apply(view) + MDKConstants.VIEW_CONSTRAINT_SYSML_ID_SUFFIX,project);
      if (element instanceof Constraint) {
        constraint=(Constraint)element;
      }
    }
    if (constraint != null) {
      viewConstraintHashMap.put(view,constraint);
    }
  }
  if (!viewConstraintHashMap.isEmpty()) {
    try {
      SessionManager.getInstance().createSession(project,""String_Node_Str"");
      if (!SessionManager.getInstance().isSessionCreated(project)) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        failure=true;
        return;
      }
      for (      Map.Entry<Element,Constraint> entry : viewConstraintHashMap.entrySet()) {
        Constraint constraint=entry.getValue();
        if (!constraint.isEditable()) {
          updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str"" + constraint.getLocalID() + ""String_Node_Str""));
          failure=true;
          continue;
        }
        Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(constraint));
        try {
          ModelElementsManager.getInstance().removeElement(constraint);
        }
 catch (        ReadOnlyElementException e) {
          updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str"" + constraint.getLocalID() + ""String_Node_Str""));
          failure=true;
        }
      }
    }
  finally {
      if (SessionManager.getInstance().isSessionCreated(project)) {
        SessionManager.getInstance().closeSession(project);
      }
    }
  }
  if (failure) {
    Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    return;
  }
  if (handleCancel(progressStatus)) {
    return;
  }
  LocalSyncTransactionCommitListener localSyncTransactionCommitListener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  Set<Element> elementsToDelete=new HashSet<>();
  if (SessionManager.getInstance().isSessionCreated(project)) {
    SessionManager.getInstance().closeSession(project);
  }
  SessionManager.getInstance().createSession(project,""String_Node_Str"");
  if (!SessionManager.getInstance().isSessionCreated(project)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    failure=true;
    return;
  }
  if (localSyncTransactionCommitListener != null) {
    localSyncTransactionCommitListener.setDisabled(true);
  }
  List<String> viewIDs=new ArrayList<>();
  if (!viewMap.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(2);
    ObjectNode viewResponse;
    try {
      File responseFile=MMSUtils.getElements(project,viewMap.keySet(),progressStatus);
      try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
        viewResponse=JacksonUtils.parseJsonObject(jsonParser);
      }
     }
 catch (    ServerException|IOException|URISyntaxException e) {
      failure=true;
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
    JsonNode viewElementsJsonArray;
    if (viewResponse != null && (viewElementsJsonArray=viewResponse.get(""String_Node_Str"")) != null && viewElementsJsonArray.isArray()) {
      Queue<String> instanceIDs=new LinkedList<>();
      Queue<String> slotIDs=new LinkedList<>();
      Property generatedFromViewProperty=Utils.getGeneratedFromViewProperty(project), generatedFromElementProperty=Utils.getGeneratedFromElementProperty(project);
      for (      JsonNode elementJsonNode : viewElementsJsonArray) {
        if (!elementJsonNode.isObject()) {
          continue;
        }
        ObjectNode elementObjectNode=(ObjectNode)elementJsonNode;
        JsonNode viewOperandJsonNode=JacksonUtils.getAtPath(elementObjectNode,""String_Node_Str"" + MDKConstants.CONTENTS_KEY + ""String_Node_Str""), sysmlIdJson=elementObjectNode.get(MDKConstants.ID_KEY);
        String sysmlId;
        if (sysmlIdJson != null && sysmlIdJson.isTextual() && !(sysmlId=sysmlIdJson.asText()).isEmpty()) {
          viewIDs.add(sysmlId);
          if (viewOperandJsonNode != null && viewOperandJsonNode.isArray()) {
            List<String> viewInstanceIDs=new ArrayList<>(viewOperandJsonNode.size());
            for (            JsonNode viewOperandJson : viewOperandJsonNode) {
              JsonNode instanceIdJsonNode=viewOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
              String instanceId;
              if (instanceIdJsonNode != null && instanceIdJsonNode.isTextual() && !(instanceId=instanceIdJsonNode.asText()).isEmpty()) {
                if (generatedFromViewProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                }
                if (generatedFromElementProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                }
                instanceIDs.add(instanceId);
                viewInstanceIDs.add(instanceId);
              }
            }
            ViewMapping viewMapping=viewMap.containsKey(sysmlId) ? viewMap.get(sysmlId) : new ViewMapping();
            viewMapping.setObjectNode(elementObjectNode);
            viewMapping.setInstanceIDs(viewInstanceIDs);
            viewMap.put(sysmlId,viewMapping);
          }
        }
      }
      List<ObjectNode> instanceObjectNodes=new ArrayList<>();
      List<ObjectNode> slotObjectNodes=new ArrayList<>();
      while (!instanceIDs.isEmpty() && !slotIDs.isEmpty()) {
        if (handleCancel(progressStatus)) {
          return;
        }
        List<String> elementIDs=new ArrayList<>(instanceIDs);
        elementIDs.addAll(slotIDs);
        ObjectNode instanceAndSlotResponse;
        try {
          File responseFile=MMSUtils.getElements(project,elementIDs,progressStatus);
          try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
            instanceAndSlotResponse=JacksonUtils.parseJsonObject(jsonParser);
          }
         }
 catch (        ServerException|IOException|URISyntaxException e) {
          failure=true;
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          e.printStackTrace();
          SessionManager.getInstance().cancelSession(project);
          return;
        }
        instanceIDs.clear();
        slotIDs.clear();
        JsonNode instanceAndSlotElementsJsonArray;
        if (instanceAndSlotResponse != null && (instanceAndSlotElementsJsonArray=instanceAndSlotResponse.get(""String_Node_Str"")) != null && instanceAndSlotElementsJsonArray.isArray()) {
          for (          JsonNode elementJson : instanceAndSlotElementsJsonArray) {
            JsonNode instanceOperandJsonArray=JacksonUtils.getAtPath(elementJson,""String_Node_Str"");
            if (instanceOperandJsonArray != null && instanceOperandJsonArray.isArray()) {
              for (              JsonNode instanceOperandJson : instanceOperandJsonArray) {
                JsonNode instanceIdJson=instanceOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
                String instanceId;
                if (instanceIdJson != null && instanceIdJson.isTextual() && !(instanceId=instanceIdJson.asText()).isEmpty()) {
                  if (generatedFromViewProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                  }
                  if (generatedFromElementProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                  }
                  instanceIDs.add(instanceId);
                }
              }
            }
            JsonNode typeJson=elementJson.get(MDKConstants.TYPE_KEY);
            if (typeJson.isTextual() && elementJson.isObject()) {
              (typeJson.asText().equalsIgnoreCase(""String_Node_Str"") ? slotObjectNodes : instanceObjectNodes).add((ObjectNode)elementJson);
            }
          }
        }
      }
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(3);
      EMFImporter emfImporter=new EMFImporter(){
        @Override public List<PreProcessor> getPreProcessors(){
          if (preProcessors == null) {
            preProcessors=new ArrayList<>(super.getPreProcessors());
            preProcessors.remove(PreProcessor.SYSML_ID_VALIDATION);
          }
          return preProcessors;
        }
        @Override public List<EStructuralFeatureOverride> getEStructuralFeatureOverrides(){
          if (eStructuralFeatureOverrides == null) {
            eStructuralFeatureOverrides=new ArrayList<>(super.getEStructuralFeatureOverrides());
            eStructuralFeatureOverrides.remove(EStructuralFeatureOverride.OWNER);
            eStructuralFeatureOverrides.add(new EStructuralFeatureOverride(EStructuralFeatureOverride.OWNER.getPredicate(),(objectNode,eStructuralFeature,project,strict,element) -> {
              if (element instanceof InstanceSpecification) {
                element.setOwner(project.getPrimaryModel());
                return element;
              }
              return EStructuralFeatureOverride.OWNER.getFunction().apply(objectNode,eStructuralFeature,project,strict,element);
            }
));
          }
          return eStructuralFeatureOverrides;
        }
      }
;
      for (      Boolean strict : Arrays.asList(false,true)) {
        ListIterator<ObjectNode> instanceObjectNodesIterator=instanceObjectNodes.listIterator(instanceObjectNodes.size());
        while (instanceObjectNodesIterator.hasPrevious()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode instanceObjectNode=instanceObjectNodesIterator.previous();
          try {
            Changelog.Change<Element> change=emfImporter.apply(instanceObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof InstanceSpecification) {
              instanceSpecificationMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(instanceObjectNode,(InstanceSpecification)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + instanceObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            instanceObjectNodesIterator.remove();
          }
        }
        ListIterator<ObjectNode> slotObjectNodesIterator=slotObjectNodes.listIterator();
        while (slotObjectNodesIterator.hasNext()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode slotObjectNode=slotObjectNodesIterator.next();
          try {
            Changelog.Change<Element> change=emfImporter.apply(slotObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof Slot) {
              slotMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(slotObjectNode,(Slot)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + slotObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            slotObjectNodesIterator.remove();
          }
        }
      }
      for (      ViewMapping viewMapping : viewMap.values()) {
        Element view=viewMapping.getElement();
        ObjectNode viewObjectNode=viewMapping.getObjectNode();
        if (viewObjectNode == null) {
          continue;
        }
        JsonNode viewContentsJsonNode=viewObjectNode.get(MDKConstants.CONTENTS_KEY);
        if (viewContentsJsonNode == null || !viewContentsJsonNode.isObject()) {
          continue;
        }
        try {
          Changelog.Change<Element> change=Converters.getJsonToElementConverter().apply((ObjectNode)viewContentsJsonNode,project,false);
          if (change.getChanged() != null && change.getChanged() instanceof Expression) {
            Expression expression=(Expression)change.getChanged();
            expression.getOperand().stream().filter(vs -> !(vs instanceof InstanceValue) || ((InstanceValue)vs).getInstance() == null).collect(Collectors.toList()).forEach(vs -> {
              elementsToDelete.add(vs);
              expression.getOperand().remove(vs);
            }
);
            presentationElementUtils.getOrCreateViewConstraint(view).setSpecification(expression);
          }
        }
 catch (        ImportException|ReadOnlyElementException e) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
        }
      }
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(4);
  Set<Element> views=new LinkedHashSet<>();
  Map<Element,List<PresentationElementInstance>> view2pe=new LinkedHashMap<>();
  Map<Element,List<PresentationElementInstance>> view2unused=new LinkedHashMap<>();
  Map<Element,JSONArray> view2elements=new LinkedHashMap<>();
  Map<String,ObjectNode> images=new LinkedHashMap<>();
  Set<Element> skippedViews=new HashSet<>();
  for (  Element rootView : rootViews) {
    DBAlfrescoVisitor dbAlfrescoVisitor=new DBAlfrescoVisitor(recurse,true);
    try {
      viewMap.get(Converters.getElementToIdConverter().apply(rootView)).getDbBook().accept(dbAlfrescoVisitor);
    }
 catch (    Exception e) {
      Utils.printException(e);
      e.printStackTrace();
    }
    views.addAll(presentationElementUtils.getViewProcessOrder(rootView,dbAlfrescoVisitor.getHierarchyElements()));
    view2pe.putAll(dbAlfrescoVisitor.getView2Pe());
    view2unused.putAll(dbAlfrescoVisitor.getView2Unused());
    view2elements.putAll(dbAlfrescoVisitor.getView2Elements());
    images.putAll(dbAlfrescoVisitor.getImages());
    views.removeAll(processedElements);
  }
  for (  Element view : views) {
    if (ProjectUtilities.isElementInAttachedProject(view)) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewInProject.addViolation(violation);
      skippedViews.add(view);
    }
    if (!viewIDs.contains(Converters.getElementToIdConverter().apply(view))) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewDoesNotExist.addViolation(violation);
      skippedViews.add(view);
    }
  }
  if (failure) {
    Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    SessionManager.getInstance().cancelSession(project);
    return;
  }
  try {
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      handlePes(view2pe.get(view),null);
      presentationElementUtils.updateOrCreateConstraintFromPresentationElements(view,view2pe.get(view));
    }
    LinkedList<ObjectNode> elementsToCommit=new LinkedList<>();
    Queue<Pair<InstanceSpecification,Element>> instanceToView=new LinkedList<>();
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      ObjectNode clientViewJson=Converters.getElementToJsonConverter().apply(view,project);
      if (clientViewJson == null) {
        skippedViews.add(view);
        continue;
      }
      if (view2elements.get(view) != null) {
        ArrayNode displayedElements=clientViewJson.putArray(MDKConstants.DISPLAYED_ELEMENT_IDS_KEY);
        for (        Object id : view2elements.get(view)) {
          displayedElements.add((String)id);
        }
      }
      Object o;
      ObjectNode serverViewJson=(o=viewMap.get(Converters.getElementToIdConverter().apply(view))) != null ? ((ViewMapping)o).getObjectNode() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientViewJson,serverViewJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str""+ JsonPatchFunction.getInstance().apply(clientViewJson,serverViewJson).toString());
        }
        elementsToCommit.add(clientViewJson);
      }
      for (      PresentationElementInstance presentationElementInstance : view2pe.get(view)) {
        if (presentationElementInstance.getInstance() != null) {
          instanceToView.add(new Pair<>(presentationElementInstance.getInstance(),view));
        }
      }
    }
    String viewInstanceBinId=MDKConstants.VIEW_INSTANCES_BIN_PREFIX + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    while (!instanceToView.isEmpty()) {
      Pair<InstanceSpecification,Element> pair=instanceToView.remove();
      InstanceSpecification instance=pair.getKey();
      List<InstanceSpecification> subInstances=presentationElementUtils.getCurrentInstances(instance,pair.getValue()).getAll();
      for (      InstanceSpecification subInstance : subInstances) {
        instanceToView.add(new Pair<>(subInstance,pair.getValue()));
      }
      ObjectNode clientInstanceSpecificationJson=Converters.getElementToJsonConverter().apply(instance,project);
      if (clientInstanceSpecificationJson == null) {
        continue;
      }
      clientInstanceSpecificationJson.put(MDKConstants.OWNER_ID_KEY,viewInstanceBinId);
      ObjectNode serverInstanceSpecificationJson=instanceSpecificationMap.containsKey(Converters.getElementToIdConverter().apply(instance)) ? instanceSpecificationMap.get(Converters.getElementToIdConverter().apply(instance)).getKey() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientInstanceSpecificationJson,serverInstanceSpecificationJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(instance) + ""String_Node_Str""+ JsonPatchFunction.getInstance().apply(clientInstanceSpecificationJson,serverInstanceSpecificationJson).toString());
        }
        elementsToCommit.add(clientInstanceSpecificationJson);
      }
      for (      Slot slot : instance.getSlot()) {
        ObjectNode clientSlotJson=Converters.getElementToJsonConverter().apply(slot,project);
        if (clientSlotJson == null) {
          continue;
        }
        JsonNode serverSlotJson=slotMap.containsKey(Converters.getElementToIdConverter().apply(slot)) ? slotMap.get(Converters.getElementToIdConverter().apply(slot)).getKey() : null;
        if (!JsonEquivalencePredicate.getInstance().test(clientSlotJson,serverSlotJson)) {
          elementsToCommit.add(clientSlotJson);
          if (MDUtils.isDeveloperMode()) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(slot) + ""String_Node_Str""+ JsonPatchFunction.getInstance().apply(clientSlotJson,serverSlotJson).toString());
          }
        }
      }
    }
    boolean changed=false;
    if (elementsToCommit.size() > 0) {
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(5);
      Application.getInstance().getGUILog().log(""String_Node_Str"" + elementsToCommit.size() + ""String_Node_Str""+ (elementsToCommit.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,elementsToCommit,MMSUtils.JsonBlobType.ELEMENT_JSON);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    Set<String> mmsElementsToDelete=new HashSet<>();
    for (    List<PresentationElementInstance> presentationElementInstances : view2unused.values()) {
      for (      PresentationElementInstance presentationElementInstance : presentationElementInstances) {
        if (presentationElementInstance.getInstance() == null) {
          continue;
        }
        String id=Converters.getElementToIdConverter().apply(presentationElementInstance.getInstance());
        if (id == null) {
          continue;
        }
        mmsElementsToDelete.add(id);
      }
    }
    if (mmsElementsToDelete.size() > 0) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + mmsElementsToDelete.size() + ""String_Node_Str""+ (mmsElementsToDelete.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,mmsElementsToDelete,MMSUtils.JsonBlobType.ELEMENT_ID);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,mmsElementsToDelete.size(),""String_Node_Str""));
      changed=true;
    }
    if (!changed) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(6);
    for (    Pair<ObjectNode,Slot> pair : slotMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Pair<ObjectNode,InstanceSpecification> pair : instanceSpecificationMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Element element : views) {
      Constraint constraint=Utils.getViewConstraint(element);
      if (constraint == null) {
        continue;
      }
      elementsToDelete.add(constraint);
      ValueSpecification valueSpecification=constraint.getSpecification();
      if (valueSpecification == null) {
        continue;
      }
      elementsToDelete.add(valueSpecification);
      List<ValueSpecification> operands;
      if (!(valueSpecification instanceof Expression) || (operands=((Expression)valueSpecification).getOperand()) == null) {
        continue;
      }
      for (      ValueSpecification operand : operands) {
        elementsToDelete.add(operand);
        InstanceSpecification instanceSpecification;
        if (!(operand instanceof InstanceValue) || (instanceSpecification=((InstanceValue)operand).getInstance()) == null) {
          continue;
        }
        elementsToDelete.add(instanceSpecification);
        for (        Slot slot : instanceSpecification.getSlot()) {
          elementsToDelete.add(slot);
          elementsToDelete.addAll(slot.getValue());
        }
      }
    }
    for (    Element element : elementsToDelete) {
      try {
        ModelElementsManager.getInstance().removeElement(element);
      }
 catch (      ReadOnlyElementException ignored) {
        System.out.println(""String_Node_Str"" + element.getLocalID());
      }
    }
    processedElements.addAll(views);
  }
 catch (  Exception e) {
    failure=true;
    Utils.printException(e);
  }
 finally {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().cancelSession(project);
    }
    if (localSyncTransactionCommitListener != null) {
      localSyncTransactionCommitListener.setDisabled(false);
    }
  }
  ImageValidator iv=new ImageValidator(images,images);
  iv.validate(project);
  for (  ValidationRule validationRule : iv.getSuite().getValidationRules()) {
    for (    ValidationRuleViolation validationRuleViolation : validationRule.getViolations()) {
      if (!validationRuleViolation.getActions().isEmpty()) {
        validationRuleViolation.getActions().get(0).actionPerformed(null);
      }
    }
  }
  if (suite.hasErrors()) {
    Utils.displayValidationWindow(project,vss,""String_Node_Str"");
  }
}",0.9993550834597876
88417,"@Override public void onMessage(Message message){
  if (isDisabled()) {
    return;
  }
  lastMessage=message;
  if (!(message instanceof TextMessage)) {
    return;
  }
  final String text;
  try {
    text=((TextMessage)message).getText();
  }
 catch (  JMSException e) {
    e.printStackTrace();
    return;
  }
  if (MDKOptionsGroup.getMDKOptions().isLogJson()) {
    System.out.println(""String_Node_Str"" + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()) + ""String_Node_Str""+ System.lineSeparator()+ text);
  }
  JsonNode messageJsonNode;
  try {
    messageJsonNode=JacksonUtils.getObjectMapper().readTree(text);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return;
  }
  if (!messageJsonNode.isObject()) {
    return;
  }
  JsonNode refsJsonNode=messageJsonNode.get(""String_Node_Str"");
  JsonNode syncedJsonNode=messageJsonNode.get(""String_Node_Str"");
  if (refsJsonNode != null && refsJsonNode.isObject()) {
    for (    Map.Entry<String,Changelog.ChangeType> entry : CHANGE_MAPPING.entrySet()) {
      JsonNode changeJsonNode=refsJsonNode.get(entry.getKey());
      if (changeJsonNode == null || !changeJsonNode.isArray()) {
        continue;
      }
      for (      JsonNode sysmlIdJsonNode : changeJsonNode) {
        if (!sysmlIdJsonNode.isTextual() || sysmlIdJsonNode.asText().isEmpty()) {
          continue;
        }
        String id=sysmlIdJsonNode.asText();
        try {
          ObjectNode elementJsonNode=JacksonUtils.getObjectMapper().createObjectNode();
          elementJsonNode.put(MDKConstants.ID_KEY,id);
          if (EMFImporter.PreProcessor.SYSML_ID_VALIDATION.getFunction().apply(elementJsonNode,project,false,project.getPrimaryModel()) == null) {
            continue;
          }
        }
 catch (        ImportException|ReadOnlyElementException ignored) {
          continue;
        }
        inMemoryJMSChangelog.addChange(id,null,entry.getValue());
      }
      SyncStatusConfigurator.getSyncStatusAction().update();
    }
  }
 else   if (syncedJsonNode != null && syncedJsonNode.isObject()) {
    JsonNode senderJsonNode, sourceJsonNode;
    if ((senderJsonNode=syncedJsonNode.get(""String_Node_Str"")) != null && senderJsonNode.isTextual() && senderJsonNode.asText().equals(TicketUtils.getUsername(project))) {
      return;
    }
    Changelog<String,Void> syncedChangelog=SyncElements.buildChangelog((ObjectNode)syncedJsonNode);
    if (syncedChangelog.isEmpty()) {
      return;
    }
    for (    Changelog.ChangeType changeType : Changelog.ChangeType.values()) {
      Map<String,ObjectNode> inMemoryJMSChanges=inMemoryJMSChangelog.get(changeType);
      syncedChangelog.get(changeType).keySet().forEach(inMemoryJMSChanges::remove);
    }
    int size=syncedChangelog.flattenedSize();
    if (MDUtils.isDeveloperMode()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ size+ ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
    SyncStatusConfigurator.getSyncStatusAction().update();
  }
}","@Override public void onMessage(Message message){
  if (isDisabled()) {
    return;
  }
  lastMessage=message;
  if (!(message instanceof TextMessage)) {
    return;
  }
  final String text;
  try {
    text=((TextMessage)message).getText();
  }
 catch (  JMSException e) {
    e.printStackTrace();
    return;
  }
  if (MDKOptionsGroup.getMDKOptions().isLogJson()) {
    System.out.println(""String_Node_Str"" + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()) + ""String_Node_Str""+ System.lineSeparator()+ text);
  }
  JsonNode messageJsonNode;
  try {
    messageJsonNode=JacksonUtils.getObjectMapper().readTree(text);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return;
  }
  if (!messageJsonNode.isObject()) {
    return;
  }
  JsonNode refsJsonNode=messageJsonNode.get(""String_Node_Str""), syncedJsonNode=messageJsonNode.get(""String_Node_Str""), sourceJsonNode=messageJsonNode.get(""String_Node_Str""), senderJsonNode=messageJsonNode.get(""String_Node_Str"");
  if (refsJsonNode != null && refsJsonNode.isObject()) {
    if (sourceJsonNode != null && sourceJsonNode.isTextual() && sourceJsonNode.asText().startsWith(""String_Node_Str"")) {
      return;
    }
    for (    Map.Entry<String,Changelog.ChangeType> entry : CHANGE_MAPPING.entrySet()) {
      JsonNode changeJsonNode=refsJsonNode.get(entry.getKey());
      if (changeJsonNode == null || !changeJsonNode.isArray()) {
        continue;
      }
      for (      JsonNode sysmlIdJsonNode : changeJsonNode) {
        if (!sysmlIdJsonNode.isTextual() || sysmlIdJsonNode.asText().isEmpty()) {
          continue;
        }
        String id=sysmlIdJsonNode.asText();
        try {
          ObjectNode elementJsonNode=JacksonUtils.getObjectMapper().createObjectNode();
          elementJsonNode.put(MDKConstants.ID_KEY,id);
          if (EMFImporter.PreProcessor.SYSML_ID_VALIDATION.getFunction().apply(elementJsonNode,project,false,project.getPrimaryModel()) == null) {
            continue;
          }
        }
 catch (        ImportException|ReadOnlyElementException ignored) {
          continue;
        }
        inMemoryJMSChangelog.addChange(id,null,entry.getValue());
      }
      SyncStatusConfigurator.getSyncStatusAction().update();
    }
  }
 else   if (syncedJsonNode != null && syncedJsonNode.isObject()) {
    if (senderJsonNode != null && senderJsonNode.isTextual() && senderJsonNode.asText().equals(TicketUtils.getUsername(project))) {
      return;
    }
    Changelog<String,Void> syncedChangelog=SyncElements.buildChangelog((ObjectNode)syncedJsonNode);
    if (syncedChangelog.isEmpty()) {
      return;
    }
    for (    Changelog.ChangeType changeType : Changelog.ChangeType.values()) {
      Map<String,ObjectNode> inMemoryJMSChanges=inMemoryJMSChangelog.get(changeType);
      syncedChangelog.get(changeType).keySet().forEach(inMemoryJMSChanges::remove);
    }
    int size=syncedChangelog.flattenedSize();
    if (MDUtils.isDeveloperMode()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ size+ ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
    SyncStatusConfigurator.getSyncStatusAction().update();
  }
}",0.9381426989400412
88418,"public CreateSpecializedTypeAction(final Property property,final Classifier parent,final boolean redefineAttributes,final String name,boolean isIndividual){
  super(name);
  this.property=property;
  this.parent=parent;
  this.redefineAttributes=redefineAttributes;
  this.name=name;
  this.isIndividual=isIndividual;
}","public CreateSpecializedTypeAction(final Property property,final Classifier parent,final String name,boolean isIndividual,boolean isRecursive){
  super(name);
  this.property=property;
  this.parent=parent;
  this.name=name;
  this.isIndividual=isIndividual;
  this.isRecursive=isRecursive;
}",0.7103109656301145
88419,"public static final boolean createSpecializedType(final StructuralFeature redefinedAttribute,final Classifier parent,final boolean redefineAttributes,final List<RedefinableElement> traveled,List<Classifier> visited,boolean isIndividual){
  if (!parent.isEditable()) {
    Application.getInstance().getGUILog().log(parent.getQualifiedName() + ""String_Node_Str"");
    return true;
  }
  if (redefinedAttribute.getType() instanceof Classifier && !(redefinedAttribute.getType() instanceof Property)) {
    boolean hasTraveled=false;
    if (traveled.contains(redefinedAttribute)) {
      hasTraveled=true;
    }
 else {
      for (      final RedefinableElement redefinedProperty : redefinedAttribute.getRedefinedElement()) {
        if (traveled.contains(redefinedProperty)) {
          hasTraveled=true;
          break;
        }
      }
    }
    if (hasTraveled) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + redefinedAttribute.getQualifiedName() + ""String_Node_Str"");
      return false;
    }
    traveled.add(redefinedAttribute);
    for (    final RedefinableElement re : redefinedAttribute.getRedefinedElement()) {
      if (re instanceof RedefinableElement) {
        traveled.add(re);
      }
    }
    final Classifier general=(Classifier)redefinedAttribute.getType();
    if (visited.contains(general)) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + general.getQualifiedName() + ""String_Node_Str""+ redefinedAttribute.getQualifiedName()+ ""String_Node_Str"");
      return false;
    }
    Type special=null;
    if (!isIndividual && getExistingSpecial(redefinedAttribute) != null) {
      special=getExistingSpecial(redefinedAttribute);
    }
 else {
      SpecializeStructureAction speca=new SpecializeStructureAction(general,false,""String_Node_Str"",redefineAttributes,isIndividual);
      special=speca.createSpecialClassifier(parent,traveled,visited);
    }
    if (special == null) {
      return true;
    }
    redefinedAttribute.setType(special);
    if (redefineAttributes) {
      if (special instanceof Classifier) {
        for (        final NamedElement ne : ((Classifier)special).getInheritedMember()) {
          if (ne instanceof RedefinableElement && !((RedefinableElement)ne).isLeaf()) {
            SetOrCreateRedefinableElementAction.redefineRedefinableElement((Classifier)special,(RedefinableElement)ne,true,traveled,visited,isIndividual);
          }
        }
      }
    }
  }
  return true;
}","public static final boolean createSpecializedType(final StructuralFeature redefinedAttribute,final Classifier parent,final List<RedefinableElement> traveled,List<Classifier> visited,boolean isIndividual,boolean isRecursive){
  if (!parent.isEditable()) {
    Application.getInstance().getGUILog().log(parent.getQualifiedName() + ""String_Node_Str"");
    return true;
  }
  if (redefinedAttribute.getType() instanceof Classifier && !(redefinedAttribute.getType() instanceof Property)) {
    boolean hasTraveled=false;
    if (traveled.contains(redefinedAttribute)) {
      hasTraveled=true;
    }
 else {
      for (      final RedefinableElement redefinedProperty : redefinedAttribute.getRedefinedElement()) {
        if (traveled.contains(redefinedProperty)) {
          hasTraveled=true;
          break;
        }
      }
    }
    if (hasTraveled) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + redefinedAttribute.getQualifiedName() + ""String_Node_Str"");
      return false;
    }
    traveled.add(redefinedAttribute);
    for (    final RedefinableElement re : redefinedAttribute.getRedefinedElement()) {
      if (re instanceof RedefinableElement) {
        traveled.add(re);
      }
    }
    final Classifier general=(Classifier)redefinedAttribute.getType();
    Type special=null;
    if (isIndividual || (isRecursive && getExistingSpecial(redefinedAttribute) == null)) {
      SpecializeStructureAction speca=new SpecializeStructureAction(general,false,""String_Node_Str"",isRecursive,isIndividual);
      special=speca.createSpecialClassifier(parent,traveled,visited);
    }
 else     if (getExistingSpecial(redefinedAttribute) != null) {
      special=getExistingSpecial(redefinedAttribute);
    }
 else     if (visited.contains(general)) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + general.getQualifiedName() + ""String_Node_Str""+ redefinedAttribute.getQualifiedName()+ ""String_Node_Str"");
      return false;
    }
    if (special == null) {
      return true;
    }
    redefinedAttribute.setType(special);
    if (isRecursive) {
      if (special instanceof Classifier) {
        for (        final NamedElement ne : ((Classifier)special).getInheritedMember()) {
          if (ne instanceof RedefinableElement && !((RedefinableElement)ne).isLeaf()) {
            SetOrCreateRedefinableElementAction.redefineRedefinableElement((Classifier)special,(RedefinableElement)ne,traveled,visited,isIndividual,isRecursive);
          }
        }
      }
    }
  }
  return true;
}",0.6333466613354658
88420,"@Override public void run(){
  CreateSpecializedTypeAction.createSpecializedType(property,parent,redefineAttributes,isIndividual);
}","@Override public void run(){
  CreateSpecializedTypeAction.createSpecializedType(property,parent,isIndividual,isRecursive);
}",0.8793774319066148
88421,"public static Classifier instance2BST(final InstanceSpecification instance,final InstanceSpecification lastInstance,final Element owner,final Map<InstanceSpecification,Classifier> traveled){
  if (traveled.containsKey(instance)) {
    return traveled.get(instance);
  }
  final Classifier classifier=instance.getClassifier().get(0);
  final Classifier specific=(Classifier)CopyPasting.copyPasteElement(classifier,instance.getOwner(),true);
  for (  final Generalization generalization : specific.getGeneralization()) {
    generalization.dispose();
  }
  for (  final NamedElement ne : specific.getOwnedMember()) {
    ne.dispose();
  }
  for (  final Classifier c : instance.getClassifier()) {
    SpecializeClassifierAction.specialize(specific,c);
  }
  if (owner != null && owner.canAdd(specific)) {
    specific.setOwner(owner);
  }
  traveled.put(instance,specific);
  specific.setName(lastInstance != null && instance.getName().startsWith(lastInstance.getName() + ""String_Node_Str"") ? instance.getName().replaceFirst(lastInstance.getName() + ""String_Node_Str"",""String_Node_Str"") : instance.getName());
  specific.setName(specific.getName().substring(0,1).toUpperCase() + specific.getName().substring(1,specific.getName().length()));
  for (  final Slot slot : instance.getSlot()) {
    if (slot.getDefiningFeature() instanceof Property) {
      final Property property=(Property)slot.getDefiningFeature();
      final Property redefinedAttribute=(Property)SetOrCreateRedefinableElementAction.redefineRedefinableElement(specific,property,false,true);
      if (!slot.hasValue()) {
        continue;
      }
      if (slot.getValue().size() == 1) {
        final ValueSpecification value=slot.getValue().get(0);
        processAttribute(redefinedAttribute,value,instance,specific,traveled);
      }
 else {
        for (        final ValueSpecification value : slot.getValue()) {
          final Property subsettingProperty=Application.getInstance().getProject().getElementsFactory().createPropertyInstance();
          subsettingProperty.setOwner(specific);
          processAttribute(subsettingProperty,value,instance,specific,traveled);
          if (subsettingProperty.getType() != null && subsettingProperty.getType() instanceof Classifier) {
            final String name=subsettingProperty.getType().getName();
            subsettingProperty.setName((name.substring(0,1).toLowerCase() + name.substring(1,name.length())).replaceAll(""String_Node_Str"",""String_Node_Str""));
          }
          subsettingProperty.getSubsettedProperty().add(redefinedAttribute);
        }
      }
    }
  }
  return specific;
}","public static Classifier instance2BST(final InstanceSpecification instance,final InstanceSpecification lastInstance,final Element owner,final Map<InstanceSpecification,Classifier> traveled){
  if (traveled.containsKey(instance)) {
    return traveled.get(instance);
  }
  final Classifier classifier=instance.getClassifier().get(0);
  final Classifier specific=(Classifier)CopyPasting.copyPasteElement(classifier,instance.getOwner(),true);
  for (  final Generalization generalization : specific.getGeneralization()) {
    generalization.dispose();
  }
  for (  final NamedElement ne : specific.getOwnedMember()) {
    ne.dispose();
  }
  for (  final Classifier c : instance.getClassifier()) {
    SpecializeClassifierAction.specialize(specific,c);
  }
  if (owner != null && owner.canAdd(specific)) {
    specific.setOwner(owner);
  }
  traveled.put(instance,specific);
  specific.setName(lastInstance != null && instance.getName().startsWith(lastInstance.getName() + ""String_Node_Str"") ? instance.getName().replaceFirst(lastInstance.getName() + ""String_Node_Str"",""String_Node_Str"") : instance.getName());
  specific.setName(specific.getName().substring(0,1).toUpperCase() + specific.getName().substring(1,specific.getName().length()));
  for (  final Slot slot : instance.getSlot()) {
    if (slot.getDefiningFeature() instanceof Property) {
      final Property property=(Property)slot.getDefiningFeature();
      final Property redefinedAttribute=(Property)SetOrCreateRedefinableElementAction.redefineRedefinableElement(specific,property,true,false);
      if (!slot.hasValue()) {
        continue;
      }
      if (slot.getValue().size() == 1) {
        final ValueSpecification value=slot.getValue().get(0);
        processAttribute(redefinedAttribute,value,instance,specific,traveled);
      }
 else {
        for (        final ValueSpecification value : slot.getValue()) {
          final Property subsettingProperty=Application.getInstance().getProject().getElementsFactory().createPropertyInstance();
          subsettingProperty.setOwner(specific);
          processAttribute(subsettingProperty,value,instance,specific,traveled);
          if (subsettingProperty.getType() != null && subsettingProperty.getType() instanceof Classifier) {
            final String name=subsettingProperty.getType().getName();
            subsettingProperty.setName((name.substring(0,1).toLowerCase() + name.substring(1,name.length())).replaceAll(""String_Node_Str"",""String_Node_Str""));
          }
          subsettingProperty.getSubsettedProperty().add(redefinedAttribute);
        }
      }
    }
  }
  return specific;
}",0.997326203208556
88422,"public static RedefinableElement redefineAttribute(final Classifier clazz,final RedefinableElement re,final boolean createSpecializedType,final List<RedefinableElement> traveled){
  if (re.isLeaf()) {
    Application.getInstance().getGUILog().log(re.getQualifiedName() + ""String_Node_Str"");
  }
  if (!clazz.isEditable()) {
    Application.getInstance().getGUILog().log(clazz.getQualifiedName() + ""String_Node_Str"");
    return null;
  }
  if (clazz instanceof Activity) {
    Activity act=(Activity)clazz;
    RedefinableElement redefinedElement=null;
    for (    final Behavior p : act.getOwnedBehavior()) {
      if (p instanceof RedefinableElement && p.getRedefinedElement().contains(re)) {
        redefinedElement=p;
        break;
      }
    }
    if (redefinedElement == null) {
      redefinedElement=(RedefinableElement)CopyPasting.copyPasteElement(re,act,false);
      if (redefinedElement instanceof Namespace) {
        Collection<?> emptyCollection=new ArrayList<String>();
        ((Namespace)redefinedElement).getOwnedMember().retainAll(emptyCollection);
      }
      redefinedElement.getRedefinedElement().add(re);
      if (createSpecializedType && redefinedElement instanceof Property && redefinedElement instanceof TypedElement&& ((TypedElement)redefinedElement).getType() != null) {
        CreateSpecializedTypeAction.createSpecializedType((Property)redefinedElement,clazz,true,traveled,null,false);
      }
      return redefinedElement;
    }
 else {
      Application.getInstance().getGUILog().log(re.getQualifiedName() + ""String_Node_Str"" + clazz.getQualifiedName()+ ""String_Node_Str"");
      return null;
    }
  }
 else {
    Application.getInstance().getGUILog().log(clazz.getQualifiedName() + ""String_Node_Str"");
    return null;
  }
}","public static RedefinableElement redefineAttribute(final Classifier clazz,final RedefinableElement re,final boolean createSpecializedType,final List<RedefinableElement> traveled){
  if (re.isLeaf()) {
    Application.getInstance().getGUILog().log(re.getQualifiedName() + ""String_Node_Str"");
  }
  if (!clazz.isEditable()) {
    Application.getInstance().getGUILog().log(clazz.getQualifiedName() + ""String_Node_Str"");
    return null;
  }
  if (clazz instanceof Activity) {
    Activity act=(Activity)clazz;
    RedefinableElement redefinedElement=null;
    for (    final Behavior p : act.getOwnedBehavior()) {
      if (p instanceof RedefinableElement && p.getRedefinedElement().contains(re)) {
        redefinedElement=p;
        break;
      }
    }
    if (redefinedElement == null) {
      redefinedElement=(RedefinableElement)CopyPasting.copyPasteElement(re,act,false);
      if (redefinedElement instanceof Namespace) {
        Collection<?> emptyCollection=new ArrayList<String>();
        ((Namespace)redefinedElement).getOwnedMember().retainAll(emptyCollection);
      }
      redefinedElement.getRedefinedElement().add(re);
      if (createSpecializedType && redefinedElement instanceof Property && redefinedElement instanceof TypedElement&& ((TypedElement)redefinedElement).getType() != null) {
        CreateSpecializedTypeAction.createSpecializedType((Property)redefinedElement,clazz,traveled,null,false,true);
      }
      return redefinedElement;
    }
 else {
      Application.getInstance().getGUILog().log(re.getQualifiedName() + ""String_Node_Str"" + clazz.getQualifiedName()+ ""String_Node_Str"");
      return null;
    }
  }
 else {
    Application.getInstance().getGUILog().log(clazz.getQualifiedName() + ""String_Node_Str"");
    return null;
  }
}",0.9898190045248868
88423,"public static RedefinableElement redefineRedefinableElement(final Classifier subClassifier,final RedefinableElement elementToBeRedefined,final boolean createSpecializedType,final List<RedefinableElement> traveled,List<Classifier> visited,boolean isIndividual){
  if (elementToBeRedefined.isLeaf()) {
    Application.getInstance().getGUILog().log(elementToBeRedefined.getQualifiedName() + ""String_Node_Str"");
  }
  if (!subClassifier.isEditable()) {
    Application.getInstance().getGUILog().log(subClassifier.getQualifiedName() + ""String_Node_Str"");
    return null;
  }
  RedefinableElement redefinedElement=null;
  for (  NamedElement p : subClassifier.getOwnedMember()) {
    if (p instanceof RedefinableElement && ((RedefinableElement)p).getRedefinedElement().contains(elementToBeRedefined)) {
      redefinedElement=(RedefinableElement)p;
      break;
    }
 else     if (p instanceof RedefinableElement && ((RedefinableElement)p).getRedefinedElement().isEmpty()) {
      if (isMatchingStructuralFeature(p,elementToBeRedefined)) {
        redefinedElement=(RedefinableElement)p;
        redefinedElement.getRedefinedElement().add(elementToBeRedefined);
        break;
      }
 else       if (p instanceof Connector && elementToBeRedefined instanceof Connector) {
        if (((Connector)p).getEnd() != null && ((Connector)elementToBeRedefined).getEnd() != null) {
          if (((Connector)p).getEnd().get(0).getRole() != null && ((Connector)elementToBeRedefined).getEnd().get(0).getRole() != null) {
            if (isMatchingStructuralFeature(((Connector)p).getEnd().get(0).getRole(),(((Connector)elementToBeRedefined).getEnd().get(0).getRole()))) {
              if (((Connector)p).getEnd().size() > 1) {
                if (isMatchingStructuralFeature(((Connector)p).getEnd().get(1).getRole(),(((Connector)elementToBeRedefined).getEnd().get(1).getRole()))) {
                  redefinedElement=(RedefinableElement)p;
                  redefinedElement.getRedefinedElement().add(elementToBeRedefined);
                  break;
                }
              }
            }
          }
        }
 else {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
        }
      }
    }
  }
  if (redefinedElement == null) {
    redefinedElement=(RedefinableElement)CopyPasting.copyPasteElement(elementToBeRedefined,subClassifier,false);
    redefinedElement.getRedefinedElement().removeAll(elementToBeRedefined.getRedefinedElement());
    redefinedElement.getRedefinedElement().add(elementToBeRedefined);
  }
  if (elementToBeRedefined instanceof Property) {
    if (((Property)elementToBeRedefined).getAssociation() != null) {
      createInheritingAssociation((Property)elementToBeRedefined,subClassifier,(Property)redefinedElement);
    }
  }
  if (createSpecializedType && redefinedElement instanceof Property && ((TypedElement)redefinedElement).getType() != null) {
    CreateSpecializedTypeAction.createSpecializedType((Property)redefinedElement,subClassifier,true,traveled,visited,isIndividual);
  }
  return redefinedElement;
}","public static RedefinableElement redefineRedefinableElement(final Classifier subClassifier,final RedefinableElement elementToBeRedefined,final List<RedefinableElement> traveled,List<Classifier> visited,boolean isIndividual,boolean isRecursive){
  if (elementToBeRedefined.isLeaf()) {
    Application.getInstance().getGUILog().log(elementToBeRedefined.getQualifiedName() + ""String_Node_Str"");
  }
  if (!subClassifier.isEditable()) {
    Application.getInstance().getGUILog().log(subClassifier.getQualifiedName() + ""String_Node_Str"");
    return null;
  }
  RedefinableElement redefinedElement=null;
  for (  NamedElement p : subClassifier.getOwnedMember()) {
    if (p instanceof RedefinableElement && SRValidationSuite.doesEventuallyRedefine((RedefinableElement)p,elementToBeRedefined)) {
      redefinedElement=(RedefinableElement)p;
      break;
    }
 else     if (p instanceof RedefinableElement) {
      if (isMatchingTypedElement(p,elementToBeRedefined)) {
        redefinedElement=(RedefinableElement)p;
        redefinedElement.getRedefinedElement().add(elementToBeRedefined);
        break;
      }
 else       if (p instanceof Connector && elementToBeRedefined instanceof Connector) {
        if (((Connector)p).getEnd() != null && ((Connector)elementToBeRedefined).getEnd() != null) {
          if (((Connector)p).getEnd().get(0).getRole() != null && ((Connector)elementToBeRedefined).getEnd().get(0).getRole() != null) {
            if (isMatchingTypedElement(((Connector)p).getEnd().get(0).getRole(),(((Connector)elementToBeRedefined).getEnd().get(0).getRole()))) {
              if (((Connector)p).getEnd().size() > 1) {
                if (isMatchingTypedElement(((Connector)p).getEnd().get(1).getRole(),(((Connector)elementToBeRedefined).getEnd().get(1).getRole()))) {
                  redefinedElement=(RedefinableElement)p;
                  redefinedElement.getRedefinedElement().add(elementToBeRedefined);
                  break;
                }
              }
            }
          }
        }
 else {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
        }
      }
    }
  }
  if (redefinedElement == null) {
    redefinedElement=(RedefinableElement)CopyPasting.copyPasteElement(elementToBeRedefined,subClassifier,false);
    redefinedElement.getRedefinedElement().removeAll(elementToBeRedefined.getRedefinedElement());
    redefinedElement.getRedefinedElement().add(elementToBeRedefined);
  }
  if (elementToBeRedefined instanceof Property) {
    if (((Property)elementToBeRedefined).getAssociation() != null) {
      createInheritingAssociation((Property)elementToBeRedefined,subClassifier,(Property)redefinedElement);
    }
  }
  if (isRecursive && redefinedElement instanceof Property && ((TypedElement)redefinedElement).getType() != null) {
    CreateSpecializedTypeAction.createSpecializedType((Property)redefinedElement,subClassifier,traveled,visited,isIndividual,isRecursive);
  }
  return redefinedElement;
}",0.7852760736196319
88424,"@Override public void run(){
  redefineRedefinableElement(subClassifier,re,recursion,isIndividual);
}","@Override public void run(){
  redefineRedefinableElement(subClassifier,re,isIndividual,isRecursive);
}",0.8921568627450981
88425,"public static void createInheritingAssociation(Property generalProperty,Classifier classifierOfnewProperty,Property newProperty){
  Association generalAssociation=generalProperty.getAssociation();
  Association newAssociation=UMLFactory.eINSTANCE.createAssociation();
  newAssociation.setName(generalAssociation.getName());
  Property ownedEnd=UMLFactory.eINSTANCE.createProperty();
  ownedEnd.setOwner(newAssociation);
  ownedEnd.setType(classifierOfnewProperty);
  Utils.createGeneralization(generalAssociation,newAssociation);
  newAssociation.setOwner(classifierOfnewProperty.getOwner());
  newAssociation.getMemberEnd().add(newProperty);
  newAssociation.getOwnedEnd().add(ownedEnd);
}","public static void createInheritingAssociation(Property generalProperty,Classifier classifierOfnewProperty,Property newProperty){
  Association generalAssociation=generalProperty.getAssociation();
  Association newAssociation=UMLFactory.eINSTANCE.createAssociation();
  newAssociation.setName(generalAssociation.getName());
  Property ownedEnd=UMLFactory.eINSTANCE.createProperty();
  ownedEnd.setOwner(newAssociation);
  ownedEnd.setType(classifierOfnewProperty);
  Utils.createGeneralization(generalAssociation,newAssociation);
  if (classifierOfnewProperty.getOwner() != null) {
    newAssociation.setOwner(classifierOfnewProperty.getOwner());
  }
 else {
    throw new NullPointerException(""String_Node_Str"");
  }
  newAssociation.getMemberEnd().add(newProperty);
  newAssociation.getOwnedEnd().add(ownedEnd);
}",0.8504983388704319
88426,"/** 
 * @param targetForRedefEl
 * @param elementToBeRedefined
 * @param recursion
 * @param name
 * @param isIndividual
 */
public SetOrCreateRedefinableElementAction(final Classifier targetForRedefEl,final RedefinableElement elementToBeRedefined,final boolean recursion,final String name,boolean isIndividual){
  super(name);
  this.subClassifier=targetForRedefEl;
  this.re=elementToBeRedefined;
  this.recursion=recursion;
  this.name=name;
  this.isIndividual=isIndividual;
}","/** 
 * @param targetForRedefEl
 * @param elementToBeRedefined
 * @param recursion
 * @param name
 * @param isIndividual
 */
public SetOrCreateRedefinableElementAction(final Classifier targetForRedefEl,final RedefinableElement elementToBeRedefined,final boolean recursion,final String name,boolean isIndividual){
  super(name);
  this.subClassifier=targetForRedefEl;
  this.re=elementToBeRedefined;
  this.isRecursive=recursion;
  this.name=name;
  this.isIndividual=isIndividual;
}",0.9792099792099792
88427,"public Classifier createSpecialClassifier(Namespace container,List<RedefinableElement> traveled,List<Classifier> visited){
  for (  final Class<? extends Classifier> c : UNSPECIALIZABLE_CLASSIFIERS) {
    if (c.isAssignableFrom(classifier.getClass())) {
      return null;
    }
  }
  Classifier specific=(Classifier)CopyPasting.copyPasteElement(classifier,container);
  visited.add(specific);
  visited.add(classifier);
  specific.getGeneralization().clear();
  ArrayList<RedefinableElement> redefinedElements=new ArrayList<RedefinableElement>();
  for (  NamedElement namedElement : specific.getOwnedMember()) {
    if (namedElement instanceof RedefinableElement && !((RedefinableElement)namedElement).isLeaf() && !(namedElement instanceof Classifier)) {
      redefinedElements.add((RedefinableElement)namedElement);
    }
  }
  Utils.createGeneralization(classifier,specific);
  for (  final NamedElement ne : specific.getInheritedMember()) {
    if (ne instanceof RedefinableElement && !((RedefinableElement)ne).isLeaf() && !(ne instanceof Classifier)) {
      final RedefinableElement elementToBeRedefined=(RedefinableElement)ne;
      SetOrCreateRedefinableElementAction.redefineRedefinableElement(specific,elementToBeRedefined,recursionMode,traveled,visited,individualMode);
    }
  }
  for (  RedefinableElement redefinedElement : redefinedElements) {
    redefinedElement.dispose();
  }
  return specific;
}","public Classifier createSpecialClassifier(Namespace container,List<RedefinableElement> traveled,List<Classifier> visited){
  for (  final Class<? extends Classifier> c : UNSPECIALIZABLE_CLASSIFIERS) {
    if (c.isAssignableFrom(classifier.getClass())) {
      return null;
    }
  }
  Classifier specific=(Classifier)CopyPasting.copyPasteElement(classifier,container);
  visited.add(specific);
  visited.add(classifier);
  specific.getGeneralization().clear();
  ArrayList<RedefinableElement> redefinedElements=new ArrayList<RedefinableElement>();
  for (  NamedElement namedElement : specific.getOwnedMember()) {
    if (namedElement instanceof RedefinableElement && !((RedefinableElement)namedElement).isLeaf() && !(namedElement instanceof Classifier)) {
      redefinedElements.add((RedefinableElement)namedElement);
      ((RedefinableElement)namedElement).getRedefinedElement().clear();
    }
  }
  Utils.createGeneralization(classifier,specific);
  for (  final NamedElement ne : specific.getInheritedMember()) {
    if (ne instanceof RedefinableElement && !((RedefinableElement)ne).isLeaf() && !(ne instanceof Classifier)) {
      final RedefinableElement elementToBeRedefined=(RedefinableElement)ne;
      SetOrCreateRedefinableElementAction.redefineRedefinableElement(specific,elementToBeRedefined,traveled,visited,individualMode,isRecursive);
    }
  }
  return specific;
}",0.9185714285714286
88428,"public SpecializeStructureAction(final Classifier classifier,boolean isValidationMode,String id,boolean isRecursive,boolean isIndividual){
  super(id,classifier);
  this.classifier=classifier;
  recursionList=new ArrayList<>();
  this.isValidationMode=isValidationMode;
  this.recursionMode=isRecursive;
  this.individualMode=isIndividual;
}","public SpecializeStructureAction(final Classifier classifier,boolean isValidationMode,String id,boolean isRecursive,boolean isIndividual){
  super(id,classifier);
  this.classifier=classifier;
  recursionList=new ArrayList<>();
  this.isValidationMode=isValidationMode;
  this.isRecursive=isRecursive;
  this.individualMode=isIndividual;
}",0.8735294117647059
88429,"@Override public void actionPerformed(ActionEvent e){
  Stereotype documentStereotype=Utils.getDocumentStereotype(project);
  Stereotype viewStereotype=Utils.getViewStereotype(project);
  for (  Element element : targetElements) {
    if (!StereotypesHelper.hasStereotypeOrDerived(element,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(element,documentStereotype)) {
      continue;
    }
    URIBuilder uriBase=MMSUtils.getServiceUri(project);
    if (uriBase == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    uriBase.setHost(uriBase.getHost() + ""String_Node_Str"");
    String uriPath=""String_Node_Str"" + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    String branchName=EsiUtils.getCurrentBranch(project.getPrimaryProject()).getName();
    uriPath+=""String_Node_Str"" + (branchName.equals(""String_Node_Str"") ? ""String_Node_Str"" : branchName);
    Set<Element> documents=new HashSet<>();
    ArrayList<Element> viewChain=new ArrayList<>();
    viewChain.add(element);
    for (int i=0; i < viewChain.size(); i++) {
      if (StereotypesHelper.hasStereotype(viewChain.get(i),documentStereotype)) {
        documents.add(viewChain.get(i));
      }
      Set<Element> childViews=new HashSet<>();
      for (      Property prop : ((Class)viewChain.get(i)).getOwnedAttribute()) {
        if (!(prop.getType() instanceof Class)) {
          continue;
        }
        Class type=(Class)prop.getType();
        if (type == null || !(StereotypesHelper.hasStereotypeOrDerived(type,viewStereotype) || StereotypesHelper.hasStereotypeOrDerived(type,documentStereotype))) {
          continue;
        }
        childViews.add(type);
      }
      for (      Relationship relation : viewChain.get(i).get_relationshipOfRelatedElement()) {
        if (!(relation instanceof Association)) {
          continue;
        }
        Element assocEnd=((Association)relation).getMemberEnd().get(0).getOwner();
        if (!StereotypesHelper.hasStereotypeOrDerived(assocEnd,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(assocEnd,documentStereotype)) {
          continue;
        }
        if (!childViews.contains(assocEnd) && !viewChain.contains(assocEnd)) {
          viewChain.add(assocEnd);
        }
      }
    }
    if (documents.size() > 1) {
      String label=""String_Node_Str"";
      List<JButton> linkButtons=new ArrayList<>();
      try {
        if (!documents.isEmpty()) {
          label=""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"";
          for (          Element doc : documents) {
            if (doc.equals(element)) {
              uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(element);
            }
 else {
              uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(doc) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
            }
            JButton button=new ViewButton(doc.getHumanName(),uriBase.setPath(uriPath).build());
            linkButtons.add(button);
          }
        }
      }
 catch (      URISyntaxException se) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
        return;
      }
      ViewEditorLinkForm viewLinkForm=new ViewEditorLinkForm(label,linkButtons);
      viewLinkForm.setVisible(true);
    }
 else {
      uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(element) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
      if (Desktop.isDesktopSupported()) {
        try {
          if (documents.size() == 0) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
          }
          Desktop.getDesktop().browse(uriBase.setPath(uriPath).build());
        }
 catch (        URISyntaxException|IOException e1) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + uriBase.toString());
          e1.printStackTrace();
        }
      }
 else {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + uriBase.toString());
      }
    }
  }
}","@Override public void actionPerformed(ActionEvent e){
  Stereotype documentStereotype=Utils.getDocumentStereotype(project);
  Stereotype viewStereotype=Utils.getViewStereotype(project);
  for (  Element element : targetElements) {
    if (!StereotypesHelper.hasStereotypeOrDerived(element,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(element,documentStereotype)) {
      continue;
    }
    URIBuilder uriBase=MMSUtils.getServiceUri(project);
    if (uriBase == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    uriBase.setHost(uriBase.getHost() + ""String_Node_Str"");
    uriBase.setPath(""String_Node_Str"");
    String uriPath=""String_Node_Str"" + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    String branchName=EsiUtils.getCurrentBranch(project.getPrimaryProject()).getName();
    uriPath+=""String_Node_Str"" + (branchName.equals(""String_Node_Str"") ? ""String_Node_Str"" : branchName);
    Set<Element> documents=new HashSet<>();
    ArrayList<Element> viewChain=new ArrayList<>();
    viewChain.add(element);
    for (int i=0; i < viewChain.size(); i++) {
      Element currentView=viewChain.get(i);
      if (StereotypesHelper.hasStereotype(currentView,documentStereotype)) {
        documents.add(currentView);
      }
      Set<Element> childViews=new HashSet<>();
      for (      Property prop : ((Class)currentView).getOwnedAttribute()) {
        if (!(prop.getType() instanceof Class)) {
          continue;
        }
        Class type=(Class)prop.getType();
        if (type == null || !(StereotypesHelper.hasStereotypeOrDerived(type,viewStereotype) || StereotypesHelper.hasStereotypeOrDerived(type,documentStereotype))) {
          continue;
        }
        childViews.add(type);
      }
      for (      Relationship relation : currentView.get_relationshipOfRelatedElement()) {
        if (!(relation instanceof Association)) {
          continue;
        }
        Element assocEnd=((Association)relation).getMemberEnd().get(0).getOwner();
        if (!StereotypesHelper.hasStereotypeOrDerived(assocEnd,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(assocEnd,documentStereotype)) {
          continue;
        }
        if (!childViews.contains(assocEnd) && !viewChain.contains(assocEnd)) {
          viewChain.add(assocEnd);
        }
      }
    }
    if (documents.size() > 1) {
      String label=""String_Node_Str"";
      List<JButton> linkButtons=new ArrayList<>();
      try {
        if (!documents.isEmpty()) {
          label=""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"";
          for (          Element doc : documents) {
            if (doc.equals(element)) {
              uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(element);
            }
 else {
              uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(doc) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
            }
            JButton button=new ViewButton(doc.getHumanName(),uriBase.setPath(uriPath).build());
            linkButtons.add(button);
          }
        }
      }
 catch (      URISyntaxException se) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
        return;
      }
      ViewEditorLinkForm viewLinkForm=new ViewEditorLinkForm(label,linkButtons);
      viewLinkForm.setVisible(true);
    }
 else {
      if (documents.isEmpty()) {
        uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(element) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
      }
 else {
        uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(documents.iterator().next()) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
      }
      if (Desktop.isDesktopSupported()) {
        try {
          if (documents.size() == 0) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
          }
          Desktop.getDesktop().browse(uriBase.setPath(uriPath).build());
        }
 catch (        URISyntaxException|IOException e1) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + uriBase.toString());
          e1.printStackTrace();
        }
      }
 else {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + uriBase.toString());
      }
    }
  }
}",0.9476704154234564
88430,"@Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setIndeterminate(true);
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (pv.getValidationSuite().hasErrors()) {
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  if (project.isRemote()) {
    BranchValidator bv=new BranchValidator(project);
    bv.validate(null,false);
    if (bv.hasErrors()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    if (bv.getValidationSuite().hasErrors()) {
      Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
      return;
    }
  }
  progressStatus.setDescription(""String_Node_Str"" + rootElements.size() + ""String_Node_Str""+ ((depth != 0) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (rootElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  progressStatus.setIndeterminate(false);
  progressStatus.setMax(rootElements.size());
  progressStatus.setCurrent(0);
  List<Pair<Element,ObjectNode>> clientElements=new ArrayList<>(rootElements.size());
  Collection<File> responseFiles=new ArrayList<>(3);
  for (  Element element : rootElements) {
    collectClientElementsRecursively(project,element,depth,clientElements);
    try {
      File responseFile=collectServerElementsRecursively(project,element,depth,progressStatus);
      if (responseFile != null) {
        responseFiles.add(responseFile);
      }
      if (element == project.getPrimaryModel() && depth != 0) {
        if (progressStatus.isCancel()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          return;
        }
        responseFile=collectServerHoldingBinElementsRecursively(project,depth - 1,progressStatus);
        if (responseFile != null) {
          responseFiles.add(responseFile);
        }
        if (progressStatus.isCancel()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          return;
        }
        responseFile=collectServerModuleElementsRecursively(project,0,progressStatus);
        if (responseFile != null) {
          responseFiles.add(responseFile);
        }
      }
    }
 catch (    ServerException|URISyntaxException|IOException e) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      validationSuite=null;
      return;
    }
    if (responseFiles.isEmpty()) {
      if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
      }
      validationSuite=null;
      return;
    }
    progressStatus.increase();
  }
  if (progressStatus.isCancel()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  elementValidator=new ElementValidator(""String_Node_Str"",clientElements,null,project,responseFiles);
  elementValidator.run(progressStatus);
}","@Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setIndeterminate(true);
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (pv.getValidationSuite().hasErrors()) {
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  if (project.isRemote()) {
    BranchValidator bv=new BranchValidator(project);
    bv.validate(null,false);
    if (bv.hasErrors()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    if (bv.getValidationSuite().hasErrors()) {
      Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
      return;
    }
  }
  progressStatus.setDescription(""String_Node_Str"" + rootElements.size() + ""String_Node_Str""+ ((depth != 0) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (rootElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  progressStatus.setIndeterminate(false);
  progressStatus.setMax(rootElements.size());
  progressStatus.setCurrent(0);
  List<Pair<Element,ObjectNode>> clientElements=new ArrayList<>(rootElements.size());
  Collection<File> responseFiles=new ArrayList<>(3);
  for (  Element element : rootElements) {
    collectClientElementsRecursively(project,element,depth,clientElements);
    Set<String> clientElementIds=clientElements.stream().map(pair -> pair.getKey().getLocalID()).collect(Collectors.toCollection(LinkedHashSet::new));
    try {
      File recursiveResponseFile, traversedResponseFile, responseFile;
      recursiveResponseFile=collectServerElementsRecursively(project,element,depth,progressStatus);
      if (recursiveResponseFile != null) {
        responseFiles.add(recursiveResponseFile);
      }
      if (clientElementIds.size() > 1) {
        traversedResponseFile=MMSUtils.getElements(project,clientElementIds,progressStatus);
        if (traversedResponseFile != null) {
          responseFiles.add(traversedResponseFile);
        }
      }
      if (element == project.getPrimaryModel() && depth != 0) {
        if (progressStatus.isCancel()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          return;
        }
        responseFile=collectServerHoldingBinElementsRecursively(project,depth - 1,progressStatus);
        if (responseFile != null) {
          responseFiles.add(responseFile);
        }
        if (progressStatus.isCancel()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          return;
        }
        responseFile=collectServerModuleElementsRecursively(project,0,progressStatus);
        if (responseFile != null) {
          responseFiles.add(responseFile);
        }
      }
    }
 catch (    ServerException|URISyntaxException|IOException e) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      validationSuite=null;
      return;
    }
    if (responseFiles.isEmpty()) {
      if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
      }
      validationSuite=null;
      return;
    }
    progressStatus.increase();
  }
  if (progressStatus.isCancel()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  elementValidator=new ElementValidator(""String_Node_Str"",clientElements,null,project,responseFiles);
  elementValidator.run(progressStatus);
}",0.9254760833708202
88431,"private static ObjectNode convert(Element element,Project project,boolean nestedValueSpecification){
  if (element == null) {
    return null;
  }
  ObjectNode objectNode=JacksonUtils.getObjectMapper().createObjectNode();
  for (  PreProcessor preProcessor : PreProcessor.values()) {
    if (nestedValueSpecification && preProcessor == PreProcessor.VALUE_SPECIFICATION) {
      continue;
    }
    try {
      objectNode=preProcessor.getFunction().apply(element,project,objectNode);
    }
 catch (    RuntimeException e) {
      e.printStackTrace();
      System.out.println(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str""+ element.getID()+ ""String_Node_Str""+ project.getName());
    }
    if (objectNode == null) {
      return null;
    }
  }
  for (  EStructuralFeature eStructuralFeature : element.eClass().getEAllStructuralFeatures()) {
    ExportFunction function=Arrays.stream(EStructuralFeatureOverride.values()).filter(override -> override.getPredicate().test(element,eStructuralFeature)).map(EStructuralFeatureOverride::getFunction).findAny().orElse(DEFAULT_E_STRUCTURAL_FEATURE_FUNCTION);
    try {
      objectNode=function.apply(element,project,eStructuralFeature,objectNode);
    }
 catch (    RuntimeException e) {
      e.printStackTrace();
      System.err.println(element);
    }
    if (objectNode == null) {
      return null;
    }
  }
  return objectNode;
}","private static ObjectNode convert(Element element,Project project,boolean nestedValueSpecification){
  if (element == null) {
    return null;
  }
  ObjectNode objectNode=JacksonUtils.getObjectMapper().createObjectNode();
  for (  PreProcessor preProcessor : PreProcessor.values()) {
    if (nestedValueSpecification && preProcessor == PreProcessor.VALUE_SPECIFICATION) {
      continue;
    }
    try {
      objectNode=preProcessor.getFunction().apply(element,project,objectNode);
    }
 catch (    RuntimeException e) {
      e.printStackTrace();
      System.out.println(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str""+ element.getLocalID()+ ""String_Node_Str""+ project.getName());
    }
    if (objectNode == null) {
      return null;
    }
  }
  for (  EStructuralFeature eStructuralFeature : element.eClass().getEAllStructuralFeatures()) {
    ExportFunction function=Arrays.stream(EStructuralFeatureOverride.values()).filter(override -> override.getPredicate().test(element,eStructuralFeature)).map(EStructuralFeatureOverride::getFunction).findAny().orElse(DEFAULT_E_STRUCTURAL_FEATURE_FUNCTION);
    try {
      objectNode=function.apply(element,project,eStructuralFeature,objectNode);
    }
 catch (    RuntimeException e) {
      e.printStackTrace();
      System.err.println(element);
    }
    if (objectNode == null) {
      return null;
    }
  }
  return objectNode;
}",0.9982098102398854
88432,"@Override public void run(ProgressStatus progressStatus){
  validationSuite.getValidationRules().forEach(validationRule -> validationRule.getViolations().clear());
  LocalSyncTransactionCommitListener localSyncTransactionCommitListener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  if ((elementsToUpdate == null || elementsToUpdate.isEmpty()) && (elementsToDelete == null || elementsToDelete.isEmpty())) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (elementsToUpdate != null && !elementsToUpdate.isEmpty()) {
    boolean initialAutoNumbering=Application.getInstance().getProject().getOptions().isAutoNumbering();
    try {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(elementsToUpdate.size()) + ""String_Node_Str""+ (elementsToUpdate.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      if (localSyncTransactionCommitListener != null) {
        localSyncTransactionCommitListener.setDisabled(true);
      }
      Application.getInstance().getProject().getOptions().isAutoNumbering();
      EMFBulkImporter emfBulkImporter=new EMFBulkImporter(NAME){
        @Override public void onSuccess(){
          if (elementsToDelete != null && !elementsToDelete.isEmpty()) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(elementsToDelete.size()) + ""String_Node_Str""+ (elementsToDelete.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
            if (localSyncTransactionCommitListener != null) {
              localSyncTransactionCommitListener.setDisabled(true);
            }
            if (!SessionManager.getInstance().isSessionCreated()) {
              SessionManager.getInstance().createSession(UpdateClientElementAction.class.getName() + ""String_Node_Str"");
            }
            for (            String id : elementsToDelete) {
              Exception exception=null;
              Element element=Converters.getIdToElementConverter().apply(id,project);
              if (element == null) {
                continue;
              }
              try {
                ModelElementsManager.getInstance().removeElement(element);
              }
 catch (              ReadOnlyElementException|RuntimeException e) {
                exception=e;
              }
              if (exception == null) {
                successfulChangeValidationRule.addViolation(project.getPrimaryModel(),""String_Node_Str"" + Changelog.ChangeType.DELETED.name() + ""String_Node_Str""+ element.getHumanName());
              }
 else {
                (exception instanceof ReadOnlyElementException ? editableValidationRule : failedChangeValidationRule).addViolation(element,""String_Node_Str"" + exception.getMessage());
                failedChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
              }
            }
            if (localSyncTransactionCommitListener != null) {
              localSyncTransactionCommitListener.setDisabled(false);
            }
            if (SessionManager.getInstance().isSessionCreated()) {
              SessionManager.getInstance().closeSession();
            }
          }
        }
        @Override public void onFailure(){
          onSuccess();
        }
      }
;
      Changelog<String,Pair<Element,ObjectNode>> changelog=emfBulkImporter.apply(elementsToUpdate,project,progressStatus);
      for (      Map.Entry<Pair<Element,ObjectNode>,Exception> entry : emfBulkImporter.getFailedElementMap().entrySet()) {
        Element element=entry.getKey().getKey();
        ObjectNode objectNode=entry.getKey().getValue();
        Exception exception=entry.getValue();
        JsonNode sysmlIdJsonNode=objectNode.get(MDKConstants.ID_KEY);
        if (sysmlIdJsonNode == null || !sysmlIdJsonNode.isTextual()) {
          continue;
        }
        String sysmlId=sysmlIdJsonNode.asText();
        String name=null;
        if (element == null || Project.isElementDisposed(element)) {
          JsonNode nameJsonNode=objectNode.get(MDKConstants.NAME_KEY);
          if (nameJsonNode != null && nameJsonNode.isTextual()) {
            name=nameJsonNode.asText(""String_Node_Str"");
          }
          if (name == null || name.isEmpty()) {
            name=""String_Node_Str"";
          }
        }
        ValidationRuleViolation validationRuleViolation=new ValidationRuleViolation(element != null && !Project.isElementDisposed(element) ? element : project.getPrimaryModel(),""String_Node_Str"" + (element != null && !Project.isElementDisposed(element) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ (element == null || Project.isElementDisposed(element) ? ""String_Node_Str"" + objectNode.get(MDKConstants.TYPE_KEY).asText(""String_Node_Str"") + ""String_Node_Str""+ name+ ""String_Node_Str""+ sysmlId : ""String_Node_Str"")+ ((element == null || Project.isElementDisposed(element)) && exception != null ? ""String_Node_Str"" : ""String_Node_Str"")+ (exception != null ? ""String_Node_Str"" + (exception instanceof ReadOnlyElementException ? ""String_Node_Str"" : exception.getMessage()) : ""String_Node_Str""));
        ActionsCategory copyActionsCategory=new ActionsCategory(""String_Node_Str"",""String_Node_Str"");
        copyActionsCategory.setNested(true);
        validationRuleViolation.addAction(copyActionsCategory);
        copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",sysmlId));
        JsonNode diff=null;
        if (element != null) {
          copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",""String_Node_Str"" + element.getID()));
          ObjectNode elementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
          if (elementObjectNode != null) {
            try {
              copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(elementObjectNode)));
            }
 catch (            JsonProcessingException ignored) {
            }
            diff=JsonPatchFunction.getInstance().apply(elementObjectNode,objectNode);
          }
        }
        try {
          copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(objectNode)));
        }
 catch (        JsonProcessingException ignored) {
        }
        if (diff != null) {
          try {
            copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(diff)));
          }
 catch (          JsonProcessingException ignored) {
          }
        }
        (exception instanceof ReadOnlyElementException ? editableValidationRule : failedChangeValidationRule).addViolation(validationRuleViolation);
        failedChangelog.addChange(sysmlId,objectNode,element != null && !Project.isElementDisposed(element) ? Changelog.ChangeType.UPDATED : Changelog.ChangeType.CREATED);
      }
      for (      Map.Entry<Element,ObjectNode> entry : emfBulkImporter.getNonEquivalentElements().entrySet()) {
        Element element=entry.getKey();
        String sysmlId=element.getLocalID();
        ObjectNode clientElementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
        ObjectNode serverElementObjectNode=entry.getValue();
        JsonNode diff=JsonPatchFunction.getInstance().apply(clientElementObjectNode,serverElementObjectNode);
        ValidationRuleViolation validationRuleViolation=new ValidationRuleViolation(entry.getKey(),""String_Node_Str"");
        ActionsCategory copyActionsCategory=new ActionsCategory(""String_Node_Str"",""String_Node_Str"");
        copyActionsCategory.setNested(true);
        validationRuleViolation.addAction(copyActionsCategory);
        copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",sysmlId));
        copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",""String_Node_Str"" + element.getID()));
        try {
          copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(clientElementObjectNode)));
        }
 catch (        JsonProcessingException ignored) {
        }
        try {
          copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(serverElementObjectNode)));
        }
 catch (        JsonProcessingException ignored) {
        }
        try {
          copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(diff)));
        }
 catch (        JsonProcessingException ignored) {
        }
        equivalentElementValidationRule.addViolation(validationRuleViolation);
      }
      for (      Changelog.ChangeType changeType : Changelog.ChangeType.values()) {
        for (        Map.Entry<String,Pair<Element,ObjectNode>> entry : changelog.get(changeType).entrySet()) {
          successfulChangeValidationRule.addViolation(new ValidationRuleViolation(entry.getValue().getKey(),""String_Node_Str"" + SyncElement.Type.MMS.name() + ""String_Node_Str""+ changeType.name()+ ""String_Node_Str""+ SyncElement.Type.LOCAL.name()+ ""String_Node_Str""));
        }
      }
    }
  finally {
      Application.getInstance().getProject().getOptions().setAutoNumbering(initialAutoNumbering);
      if (localSyncTransactionCommitListener != null) {
        localSyncTransactionCommitListener.setDisabled(false);
      }
    }
  }
  if (validationSuite.hasErrors()) {
    Utils.displayValidationWindow(project,validationSuite,validationSuite.getName());
  }
}","@Override public void run(ProgressStatus progressStatus){
  validationSuite.getValidationRules().forEach(validationRule -> validationRule.getViolations().clear());
  LocalSyncTransactionCommitListener localSyncTransactionCommitListener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  if ((elementsToUpdate == null || elementsToUpdate.isEmpty()) && (elementsToDelete == null || elementsToDelete.isEmpty())) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (elementsToUpdate != null && !elementsToUpdate.isEmpty()) {
    boolean initialAutoNumbering=Application.getInstance().getProject().getOptions().isAutoNumbering();
    try {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(elementsToUpdate.size()) + ""String_Node_Str""+ (elementsToUpdate.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      if (localSyncTransactionCommitListener != null) {
        localSyncTransactionCommitListener.setDisabled(true);
      }
      Application.getInstance().getProject().getOptions().isAutoNumbering();
      EMFBulkImporter emfBulkImporter=new EMFBulkImporter(NAME){
        @Override public void onSuccess(){
          if (elementsToDelete != null && !elementsToDelete.isEmpty()) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(elementsToDelete.size()) + ""String_Node_Str""+ (elementsToDelete.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
            if (localSyncTransactionCommitListener != null) {
              localSyncTransactionCommitListener.setDisabled(true);
            }
            if (!SessionManager.getInstance().isSessionCreated()) {
              SessionManager.getInstance().createSession(UpdateClientElementAction.class.getName() + ""String_Node_Str"");
            }
            for (            String id : elementsToDelete) {
              Exception exception=null;
              Element element=Converters.getIdToElementConverter().apply(id,project);
              if (element == null) {
                continue;
              }
              try {
                ModelElementsManager.getInstance().removeElement(element);
              }
 catch (              ReadOnlyElementException|RuntimeException e) {
                exception=e;
              }
              if (exception == null) {
                successfulChangeValidationRule.addViolation(project.getPrimaryModel(),""String_Node_Str"" + Changelog.ChangeType.DELETED.name() + ""String_Node_Str""+ element.getHumanName());
              }
 else {
                (exception instanceof ReadOnlyElementException ? editableValidationRule : failedChangeValidationRule).addViolation(element,""String_Node_Str"" + exception.getMessage());
                failedChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
              }
            }
            if (localSyncTransactionCommitListener != null) {
              localSyncTransactionCommitListener.setDisabled(false);
            }
            if (SessionManager.getInstance().isSessionCreated()) {
              SessionManager.getInstance().closeSession();
            }
          }
        }
        @Override public void onFailure(){
          onSuccess();
        }
      }
;
      Changelog<String,Pair<Element,ObjectNode>> changelog=emfBulkImporter.apply(elementsToUpdate,project,progressStatus);
      for (      Map.Entry<Pair<Element,ObjectNode>,Exception> entry : emfBulkImporter.getFailedElementMap().entrySet()) {
        Element element=entry.getKey().getKey();
        ObjectNode objectNode=entry.getKey().getValue();
        Exception exception=entry.getValue();
        JsonNode sysmlIdJsonNode=objectNode.get(MDKConstants.ID_KEY);
        if (sysmlIdJsonNode == null || !sysmlIdJsonNode.isTextual()) {
          continue;
        }
        String sysmlId=sysmlIdJsonNode.asText();
        String name=null;
        if (element == null || Project.isElementDisposed(element)) {
          JsonNode nameJsonNode=objectNode.get(MDKConstants.NAME_KEY);
          if (nameJsonNode != null && nameJsonNode.isTextual()) {
            name=nameJsonNode.asText(""String_Node_Str"");
          }
          if (name == null || name.isEmpty()) {
            name=""String_Node_Str"";
          }
        }
        ValidationRuleViolation validationRuleViolation=new ValidationRuleViolation(element != null && !Project.isElementDisposed(element) ? element : project.getPrimaryModel(),""String_Node_Str"" + (element != null && !Project.isElementDisposed(element) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ (element == null || Project.isElementDisposed(element) ? ""String_Node_Str"" + objectNode.get(MDKConstants.TYPE_KEY).asText(""String_Node_Str"") + ""String_Node_Str""+ name+ ""String_Node_Str""+ sysmlId : ""String_Node_Str"")+ ((element == null || Project.isElementDisposed(element)) && exception != null ? ""String_Node_Str"" : ""String_Node_Str"")+ (exception != null ? ""String_Node_Str"" + (exception instanceof ReadOnlyElementException ? ""String_Node_Str"" : exception.getMessage()) : ""String_Node_Str""));
        ActionsCategory copyActionsCategory=new ActionsCategory(""String_Node_Str"",""String_Node_Str"");
        copyActionsCategory.setNested(true);
        validationRuleViolation.addAction(copyActionsCategory);
        copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",sysmlId));
        JsonNode diff=null;
        if (element != null) {
          copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",""String_Node_Str"" + element.getLocalID()));
          ObjectNode elementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
          if (elementObjectNode != null) {
            try {
              copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(elementObjectNode)));
            }
 catch (            JsonProcessingException ignored) {
            }
            diff=JsonPatchFunction.getInstance().apply(elementObjectNode,objectNode);
          }
        }
        try {
          copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(objectNode)));
        }
 catch (        JsonProcessingException ignored) {
        }
        if (diff != null) {
          try {
            copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(diff)));
          }
 catch (          JsonProcessingException ignored) {
          }
        }
        (exception instanceof ReadOnlyElementException ? editableValidationRule : failedChangeValidationRule).addViolation(validationRuleViolation);
        failedChangelog.addChange(sysmlId,objectNode,element != null && !Project.isElementDisposed(element) ? Changelog.ChangeType.UPDATED : Changelog.ChangeType.CREATED);
      }
      for (      Map.Entry<Element,ObjectNode> entry : emfBulkImporter.getNonEquivalentElements().entrySet()) {
        Element element=entry.getKey();
        String sysmlId=element.getLocalID();
        ObjectNode clientElementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
        ObjectNode serverElementObjectNode=entry.getValue();
        JsonNode diff=JsonPatchFunction.getInstance().apply(clientElementObjectNode,serverElementObjectNode);
        ValidationRuleViolation validationRuleViolation=new ValidationRuleViolation(entry.getKey(),""String_Node_Str"");
        ActionsCategory copyActionsCategory=new ActionsCategory(""String_Node_Str"",""String_Node_Str"");
        copyActionsCategory.setNested(true);
        validationRuleViolation.addAction(copyActionsCategory);
        copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",sysmlId));
        copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",""String_Node_Str"" + element.getLocalID()));
        try {
          copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(clientElementObjectNode)));
        }
 catch (        JsonProcessingException ignored) {
        }
        try {
          copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(serverElementObjectNode)));
        }
 catch (        JsonProcessingException ignored) {
        }
        try {
          copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(diff)));
        }
 catch (        JsonProcessingException ignored) {
        }
        equivalentElementValidationRule.addViolation(validationRuleViolation);
      }
      for (      Changelog.ChangeType changeType : Changelog.ChangeType.values()) {
        for (        Map.Entry<String,Pair<Element,ObjectNode>> entry : changelog.get(changeType).entrySet()) {
          Element successElement=entry.getValue().getKey();
          successfulChangeValidationRule.addViolation(new ValidationRuleViolation(successElement,""String_Node_Str"" + SyncElement.Type.MMS.name() + ""String_Node_Str""+ changeType.name()+ ""String_Node_Str""+ SyncElement.Type.LOCAL.name()+ ""String_Node_Str""));
          successfulChangelog.addChange(successElement.getLocalID(),null,changeType);
        }
      }
    }
  finally {
      Application.getInstance().getProject().getOptions().setAutoNumbering(initialAutoNumbering);
      if (localSyncTransactionCommitListener != null) {
        localSyncTransactionCommitListener.setDisabled(false);
      }
    }
  }
  if (validationSuite.hasErrors()) {
    Utils.displayValidationWindow(project,validationSuite,validationSuite.getName());
  }
}",0.9901985423473234
88433,"@Override @SuppressWarnings(""String_Node_Str"") public void projectSaved(Project project,boolean savedInServer){
  CoordinatedSyncProjectMapping coordinatedSyncProjectMapping=getProjectMapping(project);
  if (coordinatedSyncProjectMapping.isDisabled() || deltaSyncRunner == null || deltaSyncRunner.isFailure()) {
    return;
  }
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(project);
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  Message lastMessage;
  if (jmsMessageListener != null && (lastMessage=jmsMessageListener.getLastMessage()) != null) {
    try {
      lastMessage.acknowledge();
    }
 catch (    JMSException|IllegalStateException e) {
      e.printStackTrace();
    }
  }
  if (!deltaSyncRunner.getSuccessfulJmsChangelog().isEmpty()) {
    ObjectNode teamworkCommittedMessage=JacksonUtils.getObjectMapper().createObjectNode();
    teamworkCommittedMessage.put(""String_Node_Str"",""String_Node_Str"");
    teamworkCommittedMessage.put(""String_Node_Str"",TicketUtils.getUsername());
    teamworkCommittedMessage.set(""String_Node_Str"",SyncElements.buildJson(deltaSyncRunner.getSuccessfulJmsChangelog()));
    try {
      TextMessage successfulTextMessage=jmsSyncProjectMapping.getSession().createTextMessage(JacksonUtils.getObjectMapper().writeValueAsString(teamworkCommittedMessage));
      successfulTextMessage.setStringProperty(JMSUtils.MSG_SELECTOR_PROJECT_ID,Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()));
      successfulTextMessage.setStringProperty(JMSUtils.MSG_SELECTOR_REF_ID,MDUtils.getWorkspace(project) + ""String_Node_Str"");
      jmsSyncProjectMapping.getMessageProducer().send(successfulTextMessage);
      int syncCount=deltaSyncRunner.getSuccessfulJmsChangelog().flattenedSize();
      Application.getInstance().getGUILog().log(""String_Node_Str"" + syncCount + ""String_Node_Str""+ (syncCount != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
 catch (    JMSException|JsonProcessingException e) {
      e.printStackTrace();
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public void projectSaved(Project project,boolean savedInServer){
  CoordinatedSyncProjectMapping coordinatedSyncProjectMapping=getProjectMapping(project);
  if (coordinatedSyncProjectMapping.isDisabled() || deltaSyncRunner == null || deltaSyncRunner.isFailure()) {
    return;
  }
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(project);
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  Message lastMessage;
  if (jmsMessageListener != null && (lastMessage=jmsMessageListener.getLastMessage()) != null) {
    try {
      lastMessage.acknowledge();
    }
 catch (    JMSException|IllegalStateException e) {
      e.printStackTrace();
    }
  }
  if (!deltaSyncRunner.getSuccessfulJmsChangelog().isEmpty()) {
    ObjectNode teamworkCommittedMessage=JacksonUtils.getObjectMapper().createObjectNode();
    teamworkCommittedMessage.put(""String_Node_Str"",""String_Node_Str"");
    teamworkCommittedMessage.put(""String_Node_Str"",TicketUtils.getUsername(project));
    teamworkCommittedMessage.set(""String_Node_Str"",SyncElements.buildJson(deltaSyncRunner.getSuccessfulJmsChangelog()));
    try {
      TextMessage successfulTextMessage=jmsSyncProjectMapping.getSession().createTextMessage(JacksonUtils.getObjectMapper().writeValueAsString(teamworkCommittedMessage));
      successfulTextMessage.setStringProperty(JMSUtils.MSG_SELECTOR_PROJECT_ID,Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()));
      successfulTextMessage.setStringProperty(JMSUtils.MSG_SELECTOR_REF_ID,MDUtils.getWorkspace(project) + ""String_Node_Str"");
      jmsSyncProjectMapping.getMessageProducer().send(successfulTextMessage);
      int syncCount=deltaSyncRunner.getSuccessfulJmsChangelog().flattenedSize();
      Application.getInstance().getGUILog().log(""String_Node_Str"" + syncCount + ""String_Node_Str""+ (syncCount != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
 catch (    JMSException|JsonProcessingException e) {
      e.printStackTrace();
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
  }
}",0.998416647817236
88434,"@SuppressWarnings(""String_Node_Str"") @Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject()) && EsiUtils.getLoggedUserName() == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  try {
    if (!TicketUtils.isTicketValid(project,progressStatus)) {
      Utils.guilog(""String_Node_Str"");
      new Thread(() -> MMSLoginAction.loginAction(project)).start();
      return;
    }
  }
 catch (  ServerException|IOException|URISyntaxException e) {
    Utils.guilog(""String_Node_Str"");
    new Thread(() -> MMSLoginAction.loginAction(project)).start();
    return;
  }
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (pv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  BranchValidator bv=new BranchValidator(project);
  bv.validate(null,false);
  if (bv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (bv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  LocalSyncTransactionCommitListener listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  listener.setDisabled(true);
  SyncElements.lockSyncFolder(project);
  listener.setDisabled(false);
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(Application.getInstance().getProject());
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  if (jmsMessageListener == null) {
    if (MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    return;
  }
  Changelog<String,Element> persistedLocalChangelog=new Changelog<>();
  Collection<SyncElement> persistedLocalSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.LOCAL);
  for (  SyncElement syncElement : persistedLocalSyncElements) {
    persistedLocalChangelog=persistedLocalChangelog.and(SyncElements.buildChangelog(syncElement),(key,value) -> Converters.getIdToElementConverter().apply(key,project));
  }
  Changelog<String,Element> localChangelog=persistedLocalChangelog.and(listener.getInMemoryLocalChangelog());
  Map<String,Element> localCreated=localChangelog.get(Changelog.ChangeType.CREATED), localUpdated=localChangelog.get(Changelog.ChangeType.UPDATED), localDeleted=localChangelog.get(Changelog.ChangeType.DELETED);
  Changelog<String,Void> persistedJmsChangelog=new Changelog<>();
  Collection<SyncElement> persistedJmsSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.MMS);
  for (  SyncElement syncElement : persistedJmsSyncElements) {
    persistedJmsChangelog=persistedJmsChangelog.and(SyncElements.buildChangelog(syncElement));
  }
  Changelog<String,Void> jmsChangelog=persistedJmsChangelog.and(jmsMessageListener.getInMemoryJMSChangelog(),(key,objectNode) -> null);
  Map<String,Void> jmsCreated=jmsChangelog.get(Changelog.ChangeType.CREATED), jmsUpdated=jmsChangelog.get(Changelog.ChangeType.UPDATED), jmsDeleted=jmsChangelog.get(Changelog.ChangeType.DELETED);
  Set<String> elementIdsToGet=new HashSet<>(jmsUpdated.keySet());
  elementIdsToGet.addAll(jmsCreated.keySet());
  if (shouldUpdate && !jmsChangelog.isEmpty()) {
    int size=jmsChangelog.flattenedSize();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + size + ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  Map<String,ObjectNode> jmsJsons=new HashMap<>(elementIdsToGet.size());
  if (!elementIdsToGet.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"" + elementIdsToGet.size() + ""String_Node_Str""+ (elementIdsToGet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    File responseFile;
    ObjectNode response;
    try {
      responseFile=MMSUtils.getElements(project,elementIdsToGet,progressStatus);
      try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
        response=JacksonUtils.parseJsonObject(jsonParser);
      }
     }
 catch (    ServerException|IOException|URISyntaxException e) {
      if (progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        return;
      }
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
    if (progressStatus.isCancel()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    if (response == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    JsonNode elementsArrayNode=response.get(""String_Node_Str"");
    if (elementsArrayNode == null || !elementsArrayNode.isArray()) {
      elementsArrayNode=JacksonUtils.getObjectMapper().createArrayNode();
    }
    for (    JsonNode jsonNode : elementsArrayNode) {
      if (!jsonNode.isObject()) {
        continue;
      }
      String webId=jsonNode.get(MDKConstants.ID_KEY).asText();
      jmsJsons.put(webId,(ObjectNode)jsonNode);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  Map<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedChanges=new LinkedHashMap<>(), unconflictedChanges=new LinkedHashMap<>();
  localChangelog.findConflicts(jmsChangelog,(change,change2) -> change != null && change2 != null,conflictedChanges,unconflictedChanges);
  Map<String,Element> localElementsToPost=new LinkedHashMap<>(localCreated.size() + localUpdated.size());
  Set<String> deleteElements=new HashSet<>(localDeleted.size());
  Map<String,ObjectNode> jmsElementsToCreateLocally=new LinkedHashMap<>(jmsCreated.size());
  Map<String,Pair<ObjectNode,Element>> jmsElementsToUpdateLocally=new LinkedHashMap<>(jmsUpdated.size());
  Map<String,Element> jmsElementsToDeleteLocally=new LinkedHashMap<>(jmsDeleted.size());
  for (  Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> unconflictedEntry : unconflictedChanges.entrySet()) {
    String id=unconflictedEntry.getKey();
    Changelog.Change<Element> localChange=unconflictedEntry.getValue().getKey();
    Changelog.Change<ObjectNode> jmsChange=unconflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),unconflictedEntry.getValue().getValue().getType()) : null;
    if (shouldCommit && localChange != null) {
      Element element=localChange.getChanged();
switch (localChange.getType()) {
case CREATED:
case UPDATED:
        if (element == null) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
          continue;
        }
      localElementsToPost.put(id,element);
    break;
case DELETED:
  if (element != null && !project.isDisposed(element)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
    continue;
  }
deleteElements.add(id);
break;
}
}
 else if (shouldUpdate && jmsChange != null) {
ObjectNode objectNode=jmsChange.getChanged();
Element element=Converters.getIdToElementConverter().apply(id,project);
switch (jmsChange.getType()) {
case CREATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element != null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
jmsElementsToCreateLocally.put(id,objectNode);
break;
case UPDATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.UPDATED);
continue;
}
jmsElementsToUpdateLocally.put(id,new Pair<>(objectNode,element));
break;
case DELETED:
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
continue;
}
jmsElementsToDeleteLocally.put(id,element);
break;
}
}
}
if (progressStatus.isCancel()) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
return;
}
boolean shouldLogNoLocalChanges=shouldCommit;
if (shouldCommit && !localElementsToPost.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
LinkedList<ObjectNode> postElements=new LinkedList<>();
for (Element element : localElementsToPost.values()) {
ObjectNode elementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
if (elementObjectNode != null) {
postElements.add(elementObjectNode);
}
}
if (postElements.size() > 0) {
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,postElements,MMSUtils.JsonBlobType.ELEMENT_JSON);
Request request=new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,postElements.size(),""String_Node_Str"");
MMSUtils.sendMMSRequest(request.getProject(),request.getRequest(),progressStatus);
}
 catch (IOException|URISyntaxException|ServerException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
return;
}
shouldLogNoLocalChanges=false;
}
}
if (shouldCommit && shouldCommitDeletes && !deleteElements.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,deleteElements,MMSUtils.JsonBlobType.ELEMENT_ID);
Request request=new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,deleteElements.size(),""String_Node_Str"");
MMSUtils.sendMMSRequest(request.getProject(),request.getRequest(),progressStatus);
}
 catch (IOException|URISyntaxException|ServerException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
return;
}
shouldLogNoLocalChanges=false;
}
if (shouldLogNoLocalChanges) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
}
if (shouldUpdate) {
listener.setDisabled(true);
List<ObjectNode> jmsElementsToCreateOrUpdateLocally=new ArrayList<>(jmsElementsToCreateLocally.size() + jmsElementsToUpdateLocally.size());
jmsElementsToCreateOrUpdateLocally.addAll(jmsElementsToCreateLocally.values());
jmsElementsToUpdateLocally.values().forEach(pair -> jmsElementsToCreateOrUpdateLocally.add(pair.getKey()));
UpdateClientElementAction updateClientElementAction=new UpdateClientElementAction(project);
updateClientElementAction.setElementsToUpdate(jmsElementsToCreateOrUpdateLocally);
updateClientElementAction.setElementsToDelete(jmsElementsToDeleteLocally.values().stream().map(Converters.getElementToIdConverter()).filter(id -> id != null).filter(id -> !id.isEmpty()).collect(Collectors.toList()));
updateClientElementAction.run(progressStatus);
failedJmsChangelog=failedJmsChangelog.and(updateClientElementAction.getFailedChangelog(),(id,objectNode) -> null);
listener.setDisabled(false);
}
progressStatus.setDescription(""String_Node_Str"");
Set<Element> localConflictedElements=new HashSet<>();
Set<ObjectNode> jmsConflictedElements=new HashSet<>();
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null && !project.isDisposed(localChange.getChanged())) {
localConflictedElements.add(localChange.getChanged());
}
if (jmsChange != null && jmsChange.getChanged() != null) {
jmsConflictedElements.add(jmsChange.getChanged());
}
}
ElementValidator elementValidator=new ElementValidator(""String_Node_Str"",ElementValidator.buildElementPairs(localConflictedElements,project),jmsConflictedElements,project);
elementValidator.run(progressStatus);
if (!elementValidator.getInvalidElements().isEmpty()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + elementValidator.getInvalidElements().size() + ""String_Node_Str""+ (elementValidator.getInvalidElements().size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
vss.add(elementValidator.getValidationSuite());
Utils.displayValidationWindow(project,elementValidator.getValidationSuite(),""String_Node_Str"");
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
if (!elementValidator.getInvalidElements().containsKey(id)) {
continue;
}
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && (localChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(localChange.getType()))) {
failedLocalChangelog.addChange(conflictedEntry.getKey(),localChange.getChanged(),localChange.getType());
}
if (jmsChange != null && (jmsChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(jmsChange.getType()))) {
failedJmsChangelog.addChange(conflictedEntry.getKey(),null,jmsChange.getType());
}
}
}
listener.getInMemoryLocalChangelog().clear();
jmsMessageListener.getInMemoryJMSChangelog().clear();
listener.setDisabled(true);
if (!SessionManager.getInstance().isSessionCreated()) {
SessionManager.getInstance().createSession(""String_Node_Str"");
}
Changelog<String,Void> unprocessedLocalChangelog=new Changelog<>();
if (!shouldCommit) {
unprocessedLocalChangelog=unprocessedLocalChangelog.and(localChangelog,(s,element) -> null);
}
if (shouldCommit && !shouldCommitDeletes) {
Map<String,Void> unprocessedLocalDeletedChanges=unprocessedLocalChangelog.get(Changelog.ChangeType.DELETED);
for (String key : localChangelog.get(Changelog.ChangeType.DELETED).keySet()) {
unprocessedLocalDeletedChanges.put(key,null);
}
}
unprocessedLocalChangelog=unprocessedLocalChangelog.and(failedLocalChangelog,(s,element) -> null);
try {
SyncElements.setByType(project,SyncElement.Type.LOCAL,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedLocalChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
Changelog<String,Void> unprocessedJmsChangelog=new Changelog<>();
if (!shouldUpdate) {
unprocessedJmsChangelog=unprocessedJmsChangelog.and(jmsChangelog);
}
unprocessedJmsChangelog=unprocessedJmsChangelog.and(failedJmsChangelog);
try {
SyncElements.setByType(project,SyncElement.Type.MMS,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedJmsChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
SessionManager.getInstance().closeSession();
listener.setDisabled(false);
failure=false;
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject()) && EsiUtils.getLoggedUserName() == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  try {
    if (!TicketUtils.isTicketValid(project,progressStatus)) {
      Utils.guilog(""String_Node_Str"");
      new Thread(() -> MMSLoginAction.loginAction(project)).start();
      return;
    }
  }
 catch (  ServerException|IOException|URISyntaxException e) {
    Utils.guilog(""String_Node_Str"");
    new Thread(() -> MMSLoginAction.loginAction(project)).start();
    return;
  }
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (pv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  BranchValidator bv=new BranchValidator(project);
  bv.validate(null,false);
  if (bv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (bv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  LocalSyncTransactionCommitListener listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  listener.setDisabled(true);
  SyncElements.lockSyncFolder(project);
  listener.setDisabled(false);
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(Application.getInstance().getProject());
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  if (jmsMessageListener == null) {
    if (MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    return;
  }
  Changelog<String,Element> persistedLocalChangelog=new Changelog<>();
  Collection<SyncElement> persistedLocalSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.LOCAL);
  for (  SyncElement syncElement : persistedLocalSyncElements) {
    persistedLocalChangelog=persistedLocalChangelog.and(SyncElements.buildChangelog(syncElement),(key,value) -> Converters.getIdToElementConverter().apply(key,project));
  }
  Changelog<String,Element> localChangelog=persistedLocalChangelog.and(listener.getInMemoryLocalChangelog());
  Map<String,Element> localCreated=localChangelog.get(Changelog.ChangeType.CREATED), localUpdated=localChangelog.get(Changelog.ChangeType.UPDATED), localDeleted=localChangelog.get(Changelog.ChangeType.DELETED);
  Changelog<String,Void> persistedJmsChangelog=new Changelog<>();
  Collection<SyncElement> persistedJmsSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.MMS);
  for (  SyncElement syncElement : persistedJmsSyncElements) {
    persistedJmsChangelog=persistedJmsChangelog.and(SyncElements.buildChangelog(syncElement));
  }
  Changelog<String,Void> jmsChangelog=persistedJmsChangelog.and(jmsMessageListener.getInMemoryJMSChangelog(),(key,objectNode) -> null);
  Map<String,Void> jmsCreated=jmsChangelog.get(Changelog.ChangeType.CREATED), jmsUpdated=jmsChangelog.get(Changelog.ChangeType.UPDATED), jmsDeleted=jmsChangelog.get(Changelog.ChangeType.DELETED);
  Set<String> elementIdsToGet=new HashSet<>(jmsUpdated.keySet());
  elementIdsToGet.addAll(jmsCreated.keySet());
  if (shouldUpdate && !jmsChangelog.isEmpty()) {
    int size=jmsChangelog.flattenedSize();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + size + ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  Map<String,ObjectNode> jmsJsons=new HashMap<>(elementIdsToGet.size());
  if (!elementIdsToGet.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"" + elementIdsToGet.size() + ""String_Node_Str""+ (elementIdsToGet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    File responseFile;
    ObjectNode response;
    try {
      responseFile=MMSUtils.getElements(project,elementIdsToGet,progressStatus);
      try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
        response=JacksonUtils.parseJsonObject(jsonParser);
      }
     }
 catch (    ServerException|IOException|URISyntaxException e) {
      if (progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        return;
      }
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
    if (progressStatus.isCancel()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    if (response == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    JsonNode elementsArrayNode=response.get(""String_Node_Str"");
    if (elementsArrayNode == null || !elementsArrayNode.isArray()) {
      elementsArrayNode=JacksonUtils.getObjectMapper().createArrayNode();
    }
    for (    JsonNode jsonNode : elementsArrayNode) {
      if (!jsonNode.isObject()) {
        continue;
      }
      String webId=jsonNode.get(MDKConstants.ID_KEY).asText();
      jmsJsons.put(webId,(ObjectNode)jsonNode);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  Map<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedChanges=new LinkedHashMap<>(), unconflictedChanges=new LinkedHashMap<>();
  localChangelog.findConflicts(jmsChangelog,(change,change2) -> change != null && change2 != null,conflictedChanges,unconflictedChanges);
  Map<String,Element> localElementsToPost=new LinkedHashMap<>(localCreated.size() + localUpdated.size());
  Set<String> deleteElements=new HashSet<>(localDeleted.size());
  Map<String,ObjectNode> jmsElementsToCreateLocally=new LinkedHashMap<>(jmsCreated.size());
  Map<String,Pair<ObjectNode,Element>> jmsElementsToUpdateLocally=new LinkedHashMap<>(jmsUpdated.size());
  Map<String,Element> jmsElementsToDeleteLocally=new LinkedHashMap<>(jmsDeleted.size());
  for (  Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> unconflictedEntry : unconflictedChanges.entrySet()) {
    String id=unconflictedEntry.getKey();
    Changelog.Change<Element> localChange=unconflictedEntry.getValue().getKey();
    Changelog.Change<ObjectNode> jmsChange=unconflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),unconflictedEntry.getValue().getValue().getType()) : null;
    if (shouldCommit && localChange != null) {
      Element element=localChange.getChanged();
switch (localChange.getType()) {
case CREATED:
case UPDATED:
        if (element == null) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
          continue;
        }
      localElementsToPost.put(id,element);
    break;
case DELETED:
  if (element != null && !project.isDisposed(element)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
    continue;
  }
deleteElements.add(id);
break;
}
}
 else if (shouldUpdate && jmsChange != null) {
ObjectNode objectNode=jmsChange.getChanged();
Element element=Converters.getIdToElementConverter().apply(id,project);
switch (jmsChange.getType()) {
case CREATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element != null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
jmsElementsToCreateLocally.put(id,objectNode);
break;
case UPDATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.UPDATED);
continue;
}
jmsElementsToUpdateLocally.put(id,new Pair<>(objectNode,element));
break;
case DELETED:
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
continue;
}
jmsElementsToDeleteLocally.put(id,element);
break;
}
}
}
if (progressStatus.isCancel()) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
return;
}
boolean shouldLogNoLocalChanges=shouldCommit;
if (shouldCommit && !localElementsToPost.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
LinkedList<ObjectNode> postElements=new LinkedList<>();
for (Element element : localElementsToPost.values()) {
ObjectNode elementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
if (elementObjectNode != null) {
postElements.add(elementObjectNode);
}
}
if (postElements.size() > 0) {
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,postElements,MMSUtils.JsonBlobType.ELEMENT_JSON);
Request request=new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,postElements.size(),""String_Node_Str"");
MMSUtils.sendMMSRequest(request.getProject(),request.getRequest(),progressStatus);
}
 catch (IOException|URISyntaxException|ServerException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
return;
}
shouldLogNoLocalChanges=false;
}
}
if (shouldCommit && shouldCommitDeletes && !deleteElements.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,deleteElements,MMSUtils.JsonBlobType.ELEMENT_ID);
Request request=new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,deleteElements.size(),""String_Node_Str"");
MMSUtils.sendMMSRequest(request.getProject(),request.getRequest(),progressStatus);
}
 catch (IOException|URISyntaxException|ServerException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
return;
}
shouldLogNoLocalChanges=false;
}
if (shouldLogNoLocalChanges) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
}
if (shouldUpdate) {
listener.setDisabled(true);
List<ObjectNode> jmsElementsToCreateOrUpdateLocally=new ArrayList<>(jmsElementsToCreateLocally.size() + jmsElementsToUpdateLocally.size());
jmsElementsToCreateOrUpdateLocally.addAll(jmsElementsToCreateLocally.values());
jmsElementsToUpdateLocally.values().forEach(pair -> jmsElementsToCreateOrUpdateLocally.add(pair.getKey()));
UpdateClientElementAction updateClientElementAction=new UpdateClientElementAction(project);
updateClientElementAction.setElementsToUpdate(jmsElementsToCreateOrUpdateLocally);
updateClientElementAction.setElementsToDelete(jmsElementsToDeleteLocally.values().stream().map(Converters.getElementToIdConverter()).filter(id -> id != null).filter(id -> !id.isEmpty()).collect(Collectors.toList()));
updateClientElementAction.run(progressStatus);
failedJmsChangelog=failedJmsChangelog.and(updateClientElementAction.getFailedChangelog(),(id,objectNode) -> null);
successfulJmsChangelog=updateClientElementAction.getSuccessfulChangelog();
listener.setDisabled(false);
}
progressStatus.setDescription(""String_Node_Str"");
Set<Element> localConflictedElements=new HashSet<>();
Set<ObjectNode> jmsConflictedElements=new HashSet<>();
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null && !project.isDisposed(localChange.getChanged())) {
localConflictedElements.add(localChange.getChanged());
}
if (jmsChange != null && jmsChange.getChanged() != null) {
jmsConflictedElements.add(jmsChange.getChanged());
}
}
ElementValidator elementValidator=new ElementValidator(""String_Node_Str"",ElementValidator.buildElementPairs(localConflictedElements,project),jmsConflictedElements,project);
elementValidator.run(progressStatus);
if (!elementValidator.getInvalidElements().isEmpty()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + elementValidator.getInvalidElements().size() + ""String_Node_Str""+ (elementValidator.getInvalidElements().size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
vss.add(elementValidator.getValidationSuite());
Utils.displayValidationWindow(project,elementValidator.getValidationSuite(),""String_Node_Str"");
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
if (!elementValidator.getInvalidElements().containsKey(id)) {
continue;
}
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && (localChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(localChange.getType()))) {
failedLocalChangelog.addChange(conflictedEntry.getKey(),localChange.getChanged(),localChange.getType());
}
if (jmsChange != null && (jmsChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(jmsChange.getType()))) {
failedJmsChangelog.addChange(conflictedEntry.getKey(),null,jmsChange.getType());
}
}
}
listener.getInMemoryLocalChangelog().clear();
jmsMessageListener.getInMemoryJMSChangelog().clear();
listener.setDisabled(true);
if (!SessionManager.getInstance().isSessionCreated()) {
SessionManager.getInstance().createSession(""String_Node_Str"");
}
Changelog<String,Void> unprocessedLocalChangelog=new Changelog<>();
if (!shouldCommit) {
unprocessedLocalChangelog=unprocessedLocalChangelog.and(localChangelog,(s,element) -> null);
}
if (shouldCommit && !shouldCommitDeletes) {
Map<String,Void> unprocessedLocalDeletedChanges=unprocessedLocalChangelog.get(Changelog.ChangeType.DELETED);
for (String key : localChangelog.get(Changelog.ChangeType.DELETED).keySet()) {
unprocessedLocalDeletedChanges.put(key,null);
}
}
unprocessedLocalChangelog=unprocessedLocalChangelog.and(failedLocalChangelog,(s,element) -> null);
try {
SyncElements.setByType(project,SyncElement.Type.LOCAL,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedLocalChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
Changelog<String,Void> unprocessedJmsChangelog=new Changelog<>();
if (!shouldUpdate) {
unprocessedJmsChangelog=unprocessedJmsChangelog.and(jmsChangelog);
}
unprocessedJmsChangelog=unprocessedJmsChangelog.and(failedJmsChangelog);
try {
SyncElements.setByType(project,SyncElement.Type.MMS,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedJmsChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
SessionManager.getInstance().closeSession();
listener.setDisabled(false);
failure=false;
}",0.997658956831164
88435,"@Override public void onMessage(Message message){
  if (isDisabled()) {
    return;
  }
  lastMessage=message;
  if (!(message instanceof TextMessage)) {
    return;
  }
  final String text;
  try {
    text=((TextMessage)message).getText();
  }
 catch (  JMSException e) {
    e.printStackTrace();
    return;
  }
  if (MDKOptionsGroup.getMDKOptions().isLogJson()) {
    System.out.println(""String_Node_Str"" + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()) + ""String_Node_Str""+ System.lineSeparator()+ text);
  }
  JsonNode messageJsonNode;
  try {
    messageJsonNode=JacksonUtils.getObjectMapper().readTree(text);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return;
  }
  JsonNode sourceJsonNode;
  if (!messageJsonNode.isObject() || ((sourceJsonNode=messageJsonNode.get(""String_Node_Str"")) != null && sourceJsonNode.isTextual() && sourceJsonNode.asText().startsWith(""String_Node_Str""))) {
    return;
  }
  JsonNode refsJsonNode=messageJsonNode.get(""String_Node_Str"");
  JsonNode syncedJsonNode=messageJsonNode.get(""String_Node_Str"");
  if (refsJsonNode != null && refsJsonNode.isObject()) {
    for (    Map.Entry<String,Changelog.ChangeType> entry : CHANGE_MAPPING.entrySet()) {
      JsonNode changeJsonNode=refsJsonNode.get(entry.getKey());
      if (changeJsonNode == null || !changeJsonNode.isArray()) {
        continue;
      }
      for (      JsonNode sysmlIdJsonNode : changeJsonNode) {
        if (!sysmlIdJsonNode.isTextual() || sysmlIdJsonNode.asText().isEmpty()) {
          continue;
        }
        String id=sysmlIdJsonNode.asText();
        try {
          ObjectNode elementJsonNode=JacksonUtils.getObjectMapper().createObjectNode();
          elementJsonNode.put(MDKConstants.ID_KEY,id);
          if (EMFImporter.PreProcessor.SYSML_ID_VALIDATION.getFunction().apply(elementJsonNode,project,false,project.getPrimaryModel()) == null) {
            continue;
          }
        }
 catch (        ImportException|ReadOnlyElementException ignored) {
          continue;
        }
        inMemoryJMSChangelog.addChange(id,null,entry.getValue());
      }
      SyncStatusConfigurator.getSyncStatusAction().update();
    }
  }
 else   if (syncedJsonNode != null && syncedJsonNode.isObject()) {
    JsonNode senderJsonNode=messageJsonNode.get(""String_Node_Str"");
    if (senderJsonNode != null && senderJsonNode.isTextual() && senderJsonNode.asText().equals(TicketUtils.getUsername())) {
      return;
    }
    Changelog<String,Void> syncedChangelog=SyncElements.buildChangelog((ObjectNode)syncedJsonNode);
    if (syncedChangelog.isEmpty()) {
      return;
    }
    for (    Changelog.ChangeType changeType : Changelog.ChangeType.values()) {
      Map<String,ObjectNode> inMemoryJMSChanges=inMemoryJMSChangelog.get(changeType);
      syncedChangelog.get(changeType).keySet().forEach(inMemoryJMSChanges::remove);
    }
    int size=syncedChangelog.flattenedSize();
    if (MDUtils.isDeveloperMode()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ size+ ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
    SyncStatusConfigurator.getSyncStatusAction().update();
  }
}","@Override public void onMessage(Message message){
  if (isDisabled()) {
    return;
  }
  lastMessage=message;
  if (!(message instanceof TextMessage)) {
    return;
  }
  final String text;
  try {
    text=((TextMessage)message).getText();
  }
 catch (  JMSException e) {
    e.printStackTrace();
    return;
  }
  if (MDKOptionsGroup.getMDKOptions().isLogJson()) {
    System.out.println(""String_Node_Str"" + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()) + ""String_Node_Str""+ System.lineSeparator()+ text);
  }
  JsonNode messageJsonNode;
  try {
    messageJsonNode=JacksonUtils.getObjectMapper().readTree(text);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return;
  }
  if (!messageJsonNode.isObject()) {
    return;
  }
  JsonNode refsJsonNode=messageJsonNode.get(""String_Node_Str"");
  JsonNode syncedJsonNode=messageJsonNode.get(""String_Node_Str"");
  if (refsJsonNode != null && refsJsonNode.isObject()) {
    for (    Map.Entry<String,Changelog.ChangeType> entry : CHANGE_MAPPING.entrySet()) {
      JsonNode changeJsonNode=refsJsonNode.get(entry.getKey());
      if (changeJsonNode == null || !changeJsonNode.isArray()) {
        continue;
      }
      for (      JsonNode sysmlIdJsonNode : changeJsonNode) {
        if (!sysmlIdJsonNode.isTextual() || sysmlIdJsonNode.asText().isEmpty()) {
          continue;
        }
        String id=sysmlIdJsonNode.asText();
        try {
          ObjectNode elementJsonNode=JacksonUtils.getObjectMapper().createObjectNode();
          elementJsonNode.put(MDKConstants.ID_KEY,id);
          if (EMFImporter.PreProcessor.SYSML_ID_VALIDATION.getFunction().apply(elementJsonNode,project,false,project.getPrimaryModel()) == null) {
            continue;
          }
        }
 catch (        ImportException|ReadOnlyElementException ignored) {
          continue;
        }
        inMemoryJMSChangelog.addChange(id,null,entry.getValue());
      }
      SyncStatusConfigurator.getSyncStatusAction().update();
    }
  }
 else   if (syncedJsonNode != null && syncedJsonNode.isObject()) {
    JsonNode senderJsonNode, sourceJsonNode;
    if ((senderJsonNode=syncedJsonNode.get(""String_Node_Str"")) != null && senderJsonNode.isTextual() && senderJsonNode.asText().equals(TicketUtils.getUsername(project))) {
      return;
    }
    Changelog<String,Void> syncedChangelog=SyncElements.buildChangelog((ObjectNode)syncedJsonNode);
    if (syncedChangelog.isEmpty()) {
      return;
    }
    for (    Changelog.ChangeType changeType : Changelog.ChangeType.values()) {
      Map<String,ObjectNode> inMemoryJMSChanges=inMemoryJMSChangelog.get(changeType);
      syncedChangelog.get(changeType).keySet().forEach(inMemoryJMSChanges::remove);
    }
    int size=syncedChangelog.flattenedSize();
    if (MDUtils.isDeveloperMode()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ size+ ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
    SyncStatusConfigurator.getSyncStatusAction().update();
  }
}",0.9574703557312252
88436,"private static boolean initDurable(Project project){
  String projectID=Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
  String workspaceID=MDUtils.getWorkspace(project);
  if (!TicketUtils.isTicketSet(project)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
    return false;
  }
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject())) {
    if (!com.nomagic.magicdraw.teamwork2.esi.EsiSessionUtil.isLoggedIn()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
      return false;
    }
  }
  JMSUtils.JMSInfo jmsInfo;
  try {
    jmsInfo=JMSUtils.getJMSInfo(project);
  }
 catch (  ServerException|IllegalArgumentException|IllegalStateException e) {
    e.printStackTrace();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str""+ e.getMessage());
    return false;
  }
  String url=(jmsInfo != null ? jmsInfo.getUrl() : null);
  if (url == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
    return false;
  }
  if (workspaceID == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
    return false;
  }
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject())) {
    String user=EsiUtils.getLoggedUserName();
    if (user == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return false;
    }
  }
  JMSSyncProjectMapping jmsSyncProjectMapping=getProjectMapping(project);
  try {
    ConnectionFactory connectionFactory=JMSUtils.createConnectionFactory(jmsInfo);
    if (connectionFactory == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
      return false;
    }
    String subscriberId=projectID + ""String_Node_Str"" + workspaceID+ ""String_Node_Str""+ TicketUtils.getUsername();
    JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
    Connection connection=connectionFactory.createConnection();
    connection.setExceptionListener(jmsMessageListener);
    connection.setClientID(subscriberId);
    Session session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);
    Topic topic=null;
    try {
      if (JMSUtils.getInitialContext() != null) {
        topic=(Topic)JMSUtils.getInitialContext().lookup(JMSUtils.JMS_TOPIC);
      }
    }
 catch (    NameNotFoundException ignored) {
    }
    if (topic == null) {
      topic=session.createTopic(JMSUtils.JMS_TOPIC);
    }
    String messageSelector=JMSUtils.constructSelectorString(projectID,workspaceID);
    MessageConsumer consumer=session.createDurableSubscriber(topic,subscriberId,messageSelector,true);
    consumer.setMessageListener(jmsMessageListener);
    MessageProducer producer=session.createProducer(topic);
    connection.start();
    jmsSyncProjectMapping.setConnection(connection);
    jmsSyncProjectMapping.setSession(session);
    jmsSyncProjectMapping.setMessageConsumer(consumer);
    jmsSyncProjectMapping.setMessageProducer(producer);
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    jmsSyncProjectMapping.getJmsMessageListener().setDisabled(true);
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str""+ e.getMessage());
    return false;
  }
}","private static boolean initDurable(Project project){
  String projectID=Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
  String workspaceID=MDUtils.getWorkspace(project);
  if (!TicketUtils.isTicketSet(project)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
    return false;
  }
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject())) {
    if (!com.nomagic.magicdraw.teamwork2.esi.EsiSessionUtil.isLoggedIn()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
      return false;
    }
  }
  JMSUtils.JMSInfo jmsInfo;
  try {
    jmsInfo=JMSUtils.getJMSInfo(project);
  }
 catch (  ServerException|IllegalArgumentException|IllegalStateException e) {
    e.printStackTrace();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str""+ e.getMessage());
    return false;
  }
  String url=(jmsInfo != null ? jmsInfo.getUrl() : null);
  if (url == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
    return false;
  }
  if (workspaceID == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
    return false;
  }
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject())) {
    String user=EsiUtils.getLoggedUserName();
    if (user == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return false;
    }
  }
  JMSSyncProjectMapping jmsSyncProjectMapping=getProjectMapping(project);
  try {
    ConnectionFactory connectionFactory=JMSUtils.createConnectionFactory(jmsInfo);
    if (connectionFactory == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str"");
      return false;
    }
    String subscriberId=projectID + ""String_Node_Str"" + workspaceID+ ""String_Node_Str""+ TicketUtils.getUsername(project);
    JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
    Connection connection=connectionFactory.createConnection();
    connection.setExceptionListener(jmsMessageListener);
    connection.setClientID(subscriberId);
    Session session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);
    Topic topic=null;
    try {
      if (JMSUtils.getInitialContext() != null) {
        topic=(Topic)JMSUtils.getInitialContext().lookup(JMSUtils.JMS_TOPIC);
      }
    }
 catch (    NameNotFoundException ignored) {
    }
    if (topic == null) {
      topic=session.createTopic(JMSUtils.JMS_TOPIC);
    }
    String messageSelector=JMSUtils.constructSelectorString(projectID,workspaceID);
    MessageConsumer consumer=session.createDurableSubscriber(topic,subscriberId,messageSelector,true);
    consumer.setMessageListener(jmsMessageListener);
    MessageProducer producer=session.createProducer(topic);
    connection.start();
    jmsSyncProjectMapping.setConnection(connection);
    jmsSyncProjectMapping.setSession(session);
    jmsSyncProjectMapping.setMessageConsumer(consumer);
    jmsSyncProjectMapping.setMessageProducer(producer);
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    jmsSyncProjectMapping.getJmsMessageListener().setDisabled(true);
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ERROR_STRING+ ""String_Node_Str""+ e.getMessage());
    return false;
  }
}",0.9990884229717412
88437,"public void addElementEquivalenceViolation(Pair<Element,ObjectNode> clientElement,ObjectNode serverElement){
  JsonNode diff=JsonPatchFunction.getInstance().apply(clientElement.getValue(),serverElement);
  if (diff != null && diff.size() != 0) {
    notEquivalentCount++;
    String name=""String_Node_Str"";
    if (clientElement.getKey() instanceof NamedElement && ((NamedElement)clientElement.getKey()).getName() != null && !((NamedElement)clientElement.getKey()).getName().isEmpty()) {
      name=((NamedElement)clientElement.getKey()).getName();
    }
    finishViolation(new ValidationRuleViolation(clientElement.getKey(),""String_Node_Str"" + clientElement.getKey().getHumanType() + ""String_Node_Str""+ name),clientElement.getKey().getID(),clientElement,serverElement,diff);
  }
}","public void addElementEquivalenceViolation(Pair<Element,ObjectNode> clientElement,ObjectNode serverElement){
  JsonNode diff=JsonPatchFunction.getInstance().apply(clientElement.getValue(),serverElement);
  if (diff != null && diff.size() != 0) {
    notEquivalentCount++;
    String name=""String_Node_Str"";
    if (clientElement.getKey() instanceof NamedElement && ((NamedElement)clientElement.getKey()).getName() != null && !((NamedElement)clientElement.getKey()).getName().isEmpty()) {
      name=((NamedElement)clientElement.getKey()).getName();
    }
    finishViolation(new ValidationRuleViolation(clientElement.getKey(),""String_Node_Str"" + clientElement.getKey().getHumanType() + ""String_Node_Str""+ name),clientElement.getKey().getLocalID(),clientElement,serverElement,diff);
  }
}",0.9968132568514978
88438,"public void finishViolation(ValidationRuleViolation validationRuleViolation,String id,Pair<Element,ObjectNode> clientElement,ObjectNode serverElement,JsonNode diff){
  validationRuleViolation.addAction(new CommitClientElementAction(id,clientElement != null ? clientElement.getKey() : null,clientElement != null ? clientElement.getValue() : null,project));
  validationRuleViolation.addAction(new UpdateClientElementAction(id,clientElement != null ? clientElement.getKey() : null,serverElement,project));
  ActionsCategory copyActionsCategory=new ActionsCategory(""String_Node_Str"",""String_Node_Str"");
  copyActionsCategory.setNested(true);
  validationRuleViolation.addAction(copyActionsCategory);
  copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",id));
  if (clientElement != null) {
    copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",""String_Node_Str"" + clientElement.getKey().getID()));
    try {
      copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(clientElement.getValue())));
    }
 catch (    JsonProcessingException ignored) {
    }
  }
  if (serverElement != null) {
    try {
      copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(serverElement)));
    }
 catch (    JsonProcessingException ignored) {
    }
  }
  if (diff != null) {
    try {
      copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(diff)));
    }
 catch (    JsonProcessingException ignored) {
    }
  }
  elementEquivalenceValidationRule.addViolation(validationRuleViolation);
  invalidElements.put(id,new Pair<>(clientElement,serverElement));
}","public void finishViolation(ValidationRuleViolation validationRuleViolation,String id,Pair<Element,ObjectNode> clientElement,ObjectNode serverElement,JsonNode diff){
  validationRuleViolation.addAction(new CommitClientElementAction(id,clientElement != null ? clientElement.getKey() : null,clientElement != null ? clientElement.getValue() : null,project));
  validationRuleViolation.addAction(new UpdateClientElementAction(id,clientElement != null ? clientElement.getKey() : null,serverElement,project));
  ActionsCategory copyActionsCategory=new ActionsCategory(""String_Node_Str"",""String_Node_Str"");
  copyActionsCategory.setNested(true);
  validationRuleViolation.addAction(copyActionsCategory);
  copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",id));
  if (clientElement != null) {
    copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",""String_Node_Str"" + clientElement.getKey().getLocalID()));
    try {
      copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(clientElement.getValue())));
    }
 catch (    JsonProcessingException ignored) {
    }
  }
  if (serverElement != null) {
    try {
      copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(serverElement)));
    }
 catch (    JsonProcessingException ignored) {
    }
  }
  if (diff != null) {
    try {
      copyActionsCategory.addAction(new ClipboardAction(""String_Node_Str"",JacksonUtils.getObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(diff)));
    }
 catch (    JsonProcessingException ignored) {
    }
  }
  elementEquivalenceValidationRule.addViolation(validationRuleViolation);
  invalidElements.put(id,new Pair<>(clientElement,serverElement));
}",0.9986655991459834
88439,"private void addMissingOnMmsViolation(Pair<Element,ObjectNode> clientElement){
  missingOnMmsCount++;
  String name=""String_Node_Str"";
  if (clientElement.getKey() instanceof NamedElement && ((NamedElement)clientElement.getKey()).getName() != null && !((NamedElement)clientElement.getKey()).getName().isEmpty()) {
    name=((NamedElement)clientElement.getKey()).getName();
  }
  finishViolation(new ValidationRuleViolation(clientElement.getKey(),""String_Node_Str"" + clientElement.getKey().getHumanType() + ""String_Node_Str""+ name),clientElement.getKey().getID(),clientElement,null,null);
}","private void addMissingOnMmsViolation(Pair<Element,ObjectNode> clientElement){
  missingOnMmsCount++;
  String name=""String_Node_Str"";
  if (clientElement.getKey() instanceof NamedElement && ((NamedElement)clientElement.getKey()).getName() != null && !((NamedElement)clientElement.getKey()).getName().isEmpty()) {
    name=((NamedElement)clientElement.getKey()).getName();
  }
  finishViolation(new ValidationRuleViolation(clientElement.getKey(),""String_Node_Str"" + clientElement.getKey().getHumanType() + ""String_Node_Str""+ name),clientElement.getKey().getLocalID(),clientElement,null,null);
}",0.9957734573119188
88440,"TicketMapping(final Project project,String ticket){
  this.ticket=ticket;
  this.ticketRenewer=Executors.newScheduledThreadPool(1);
  final Runnable renewTicket=() -> {
    try {
      try {
        boolean isValid=isTicketValid(project,null);
        if (!isValid) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          MMSLogoutAction.logoutAction(project);
        }
      }
 catch (      ServerException|IOException|URISyntaxException e) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
        e.printStackTrace();
      }
    }
 catch (    Exception ignored) {
    }
  }
;
  this.ticketRenewer.scheduleAtFixedRate(renewTicket,TICKET_RENEWAL_INTERVAL,TICKET_RENEWAL_INTERVAL,TimeUnit.SECONDS);
}","TicketMapping(Project project,String username,String ticket){
  this.ticket=ticket;
  this.username=username;
  this.ticketRenewer=Executors.newScheduledThreadPool(1);
  final Runnable renewTicket=() -> {
    try {
      try {
        boolean isValid=isTicketValid(project,null);
        if (!isValid) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          MMSLogoutAction.logoutAction(project);
        }
      }
 catch (      ServerException|IOException|URISyntaxException e) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
        e.printStackTrace();
      }
    }
 catch (    Exception ignored) {
    }
  }
;
  this.ticketRenewer.scheduleAtFixedRate(renewTicket,TICKET_RENEWAL_INTERVAL,TICKET_RENEWAL_INTERVAL,TimeUnit.SECONDS);
}",0.9695044472681068
88441,"@Override public void run(ProgressStatus progressStatus){
  String ticket;
  try {
    ticket=MMSUtils.sendCredentials(project,username,pass,progressStatus);
  }
 catch (  ServerException|IOException|URISyntaxException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return;
  }
  if (ticket != null) {
    ticketMappings.put(project,new TicketMapping(project,ticket));
  }
}","@Override public void run(ProgressStatus progressStatus){
  String ticket;
  try {
    ticket=MMSUtils.sendCredentials(project,username,pass,progressStatus);
  }
 catch (  ServerException|IOException|URISyntaxException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return;
  }
  if (ticket != null) {
    ticketMappings.put(project,new TicketMapping(project,username,ticket));
  }
}",0.9899665551839464
88442,"/** 
 * Accessor for stored username.
 * @return username
 */
public static String getUsername(){
  return username;
}","public String getUsername(){
  return this.username;
}",0.5697674418604651
88443,"/** 
 * Uses the stored username and passed password to query MMS for a ticket. Will clear any stored password on attempt. <p> Will first check to see if there is an existing ticket, and if so if it is valid. If valid, will not resend for new ticket. If invalid or not present, will send for new ticket. <p> Since it can only be called by logInToMMS(), assumes that the username and password were recently acquired from the login dialogue or pre-specified if that's disabled.
 */
private static boolean acquireTicket(Project project,String pass){
  if (username == null || username.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return false;
  }
  if (pass == null) {
    return false;
  }
  if (isTicketSet(project)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    MMSLogoutAction.logoutAction(project);
  }
  ticketMappings.remove(project);
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return false;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"");
  requestUri.clearParameters();
  ObjectNode credentials=JacksonUtils.getObjectMapper().createObjectNode();
  credentials.put(""String_Node_Str"",username);
  credentials.put(""String_Node_Str"",pass);
  ProgressStatusRunner.runWithProgressStatus(new RunnableWithProgress(){
    @Override public void run(    ProgressStatus progressStatus){
      String ticket;
      try {
        ticket=MMSUtils.sendCredentials(project,username,pass,progressStatus);
      }
 catch (      ServerException|IOException|URISyntaxException e) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
        e.printStackTrace();
        return;
      }
      if (ticket != null) {
        ticketMappings.put(project,new TicketMapping(project,ticket));
      }
    }
  }
,""String_Node_Str"",true,0);
  password=""String_Node_Str"";
  if (ticketMappings.get(project) != null && !ticketMappings.get(project).getTicket().isEmpty()) {
    return true;
  }
  Application.getInstance().getGUILog().log(""String_Node_Str"");
  return false;
}","/** 
 * Uses the stored username and passed password to query MMS for a ticket. Will clear any stored password on attempt. <p> Will first check to see if there is an existing ticket, and if so if it is valid. If valid, will not resend for new ticket. If invalid or not present, will send for new ticket. <p> Since it can only be called by logInToMMS(), assumes that the username and password were recently acquired from the login dialogue or pre-specified if that's disabled.
 */
private static boolean acquireTicket(Project project,String pass){
  if (username == null || username.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return false;
  }
  if (pass == null) {
    return false;
  }
  if (isTicketSet(project)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    MMSLogoutAction.logoutAction(project);
  }
  ticketMappings.remove(project);
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return false;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"");
  requestUri.clearParameters();
  ObjectNode credentials=JacksonUtils.getObjectMapper().createObjectNode();
  credentials.put(""String_Node_Str"",username);
  credentials.put(""String_Node_Str"",pass);
  ProgressStatusRunner.runWithProgressStatus(new RunnableWithProgress(){
    @Override public void run(    ProgressStatus progressStatus){
      String ticket;
      try {
        ticket=MMSUtils.sendCredentials(project,username,pass,progressStatus);
      }
 catch (      ServerException|IOException|URISyntaxException e) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
        e.printStackTrace();
        return;
      }
      if (ticket != null) {
        ticketMappings.put(project,new TicketMapping(project,username,ticket));
      }
    }
  }
,""String_Node_Str"",true,0);
  password=""String_Node_Str"";
  if (ticketMappings.get(project) != null && !ticketMappings.get(project).getTicket().isEmpty()) {
    return true;
  }
  Application.getInstance().getGUILog().log(""String_Node_Str"");
  return false;
}",0.997875855558178
88444,"public void configure(ActionsManager manager,PresentationElement... elements){
  ActionsCategory category=(ActionsCategory)manager.getActionFor(MDKPlugin.MAIN_TOOLBAR_CATEGORY_NAME);
  if (category == null) {
    category=new MDActionsCategory(MDKPlugin.MAIN_TOOLBAR_CATEGORY_NAME,MDKPlugin.MAIN_TOOLBAR_CATEGORY_NAME,null,ActionsGroups.APPLICATION_RELATED);
    category.setNested(true);
  }
  manager.addCategory(category);
  category.addAction(new OclQueryAction());
  category.addAction(new ValidateConstraintsAction());
}","public void configure(ActionsManager manager,PresentationElement... elements){
  ActionsCategory category=manager.getCategory(MDKPlugin.MAIN_TOOLBAR_CATEGORY_NAME);
  if (category == null) {
    category=new MDActionsCategory(MDKPlugin.MAIN_TOOLBAR_CATEGORY_NAME,MDKPlugin.MAIN_TOOLBAR_CATEGORY_NAME,null,ActionsGroups.APPLICATION_RELATED);
    category.setNested(true);
  }
  manager.removeCategory(category);
  manager.addCategory(category);
  category.addAction(new OclQueryAction());
  category.addAction(new ValidateConstraintsAction());
}",0.914018691588785
88445,"@Override public void actionPerformed(ActionEvent e){
  Stereotype documentStereotype=Utils.getDocumentStereotype(project);
  Stereotype viewStereotype=Utils.getViewStereotype(project);
  for (  Element element : targetElements) {
    if (!StereotypesHelper.hasStereotypeOrDerived(element,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(element,documentStereotype)) {
      continue;
    }
    Project project=Project.getProject(element);
    URIBuilder uriBase=MMSUtils.getServiceUri(project);
    if (uriBase == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    uriBase.setHost(uriBase.getHost() + ""String_Node_Str"");
    String uriPath=""String_Node_Str"" + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    String branchName=EsiUtils.getCurrentBranch(project.getPrimaryProject()).getName();
    uriPath+=""String_Node_Str"" + (branchName.equals(""String_Node_Str"") ? ""String_Node_Str"" : branchName);
    Set<Element> documents=new HashSet<>();
    ArrayList<Element> viewChain=new ArrayList<>();
    viewChain.add(element);
    for (int i=0; i < viewChain.size(); i++) {
      if (StereotypesHelper.hasStereotype(viewChain.get(i),documentStereotype)) {
        documents.add(viewChain.get(i));
      }
      Set<Element> childViews=new HashSet<>();
      for (      Property prop : ((Class)viewChain.get(i)).getOwnedAttribute()) {
        if (!(prop.getType() instanceof Class)) {
          continue;
        }
        Class type=(Class)prop.getType();
        if (type == null || !(StereotypesHelper.hasStereotypeOrDerived(type,viewStereotype) || StereotypesHelper.hasStereotypeOrDerived(type,documentStereotype))) {
          continue;
        }
        childViews.add(type);
      }
      for (      Relationship relation : viewChain.get(i).get_relationshipOfRelatedElement()) {
        if (!(relation instanceof Association)) {
          continue;
        }
        Element assocEnd=((Association)relation).getMemberEnd().get(0).getOwner();
        if (!StereotypesHelper.hasStereotypeOrDerived(assocEnd,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(assocEnd,documentStereotype)) {
          continue;
        }
        if (!childViews.contains(assocEnd) && !viewChain.contains(assocEnd)) {
          viewChain.add(assocEnd);
        }
      }
    }
    if (documents.size() > 1) {
      String label=""String_Node_Str"";
      List<JButton> linkButtons=new ArrayList<>();
      try {
        if (!documents.isEmpty()) {
          label=""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"";
          for (          Element doc : documents) {
            if (doc.equals(element)) {
              uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(element);
            }
 else {
              uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(doc) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
            }
            JButton button=new ViewButton(doc.getHumanName(),uriBase.setPath(uriPath).build());
            linkButtons.add(button);
          }
        }
      }
 catch (      URISyntaxException se) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
        return;
      }
      ViewEditorLinkForm viewLinkForm=new ViewEditorLinkForm(label,linkButtons);
      viewLinkForm.setVisible(true);
    }
 else {
      uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(element) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
      if (Desktop.isDesktopSupported()) {
        try {
          if (documents.size() == 0) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
          }
          Desktop.getDesktop().browse(uriBase.setPath(uriPath).build());
        }
 catch (        URISyntaxException|IOException e1) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + uriBase.toString());
          e1.printStackTrace();
        }
      }
 else {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + uriBase.toString());
      }
    }
  }
}","@Override public void actionPerformed(ActionEvent e){
  Stereotype documentStereotype=Utils.getDocumentStereotype(project);
  Stereotype viewStereotype=Utils.getViewStereotype(project);
  for (  Element element : targetElements) {
    if (!StereotypesHelper.hasStereotypeOrDerived(element,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(element,documentStereotype)) {
      continue;
    }
    URIBuilder uriBase=MMSUtils.getServiceUri(project);
    if (uriBase == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    uriBase.setHost(uriBase.getHost() + ""String_Node_Str"");
    String uriPath=""String_Node_Str"" + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    String branchName=EsiUtils.getCurrentBranch(project.getPrimaryProject()).getName();
    uriPath+=""String_Node_Str"" + (branchName.equals(""String_Node_Str"") ? ""String_Node_Str"" : branchName);
    Set<Element> documents=new HashSet<>();
    ArrayList<Element> viewChain=new ArrayList<>();
    viewChain.add(element);
    for (int i=0; i < viewChain.size(); i++) {
      if (StereotypesHelper.hasStereotype(viewChain.get(i),documentStereotype)) {
        documents.add(viewChain.get(i));
      }
      Set<Element> childViews=new HashSet<>();
      for (      Property prop : ((Class)viewChain.get(i)).getOwnedAttribute()) {
        if (!(prop.getType() instanceof Class)) {
          continue;
        }
        Class type=(Class)prop.getType();
        if (type == null || !(StereotypesHelper.hasStereotypeOrDerived(type,viewStereotype) || StereotypesHelper.hasStereotypeOrDerived(type,documentStereotype))) {
          continue;
        }
        childViews.add(type);
      }
      for (      Relationship relation : viewChain.get(i).get_relationshipOfRelatedElement()) {
        if (!(relation instanceof Association)) {
          continue;
        }
        Element assocEnd=((Association)relation).getMemberEnd().get(0).getOwner();
        if (!StereotypesHelper.hasStereotypeOrDerived(assocEnd,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(assocEnd,documentStereotype)) {
          continue;
        }
        if (!childViews.contains(assocEnd) && !viewChain.contains(assocEnd)) {
          viewChain.add(assocEnd);
        }
      }
    }
    if (documents.size() > 1) {
      String label=""String_Node_Str"";
      List<JButton> linkButtons=new ArrayList<>();
      try {
        if (!documents.isEmpty()) {
          label=""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"";
          for (          Element doc : documents) {
            if (doc.equals(element)) {
              uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(element);
            }
 else {
              uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(doc) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
            }
            JButton button=new ViewButton(doc.getHumanName(),uriBase.setPath(uriPath).build());
            linkButtons.add(button);
          }
        }
      }
 catch (      URISyntaxException se) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
        return;
      }
      ViewEditorLinkForm viewLinkForm=new ViewEditorLinkForm(label,linkButtons);
      viewLinkForm.setVisible(true);
    }
 else {
      uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(element) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
      if (Desktop.isDesktopSupported()) {
        try {
          if (documents.size() == 0) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
          }
          Desktop.getDesktop().browse(uriBase.setPath(uriPath).build());
        }
 catch (        URISyntaxException|IOException e1) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + uriBase.toString());
          e1.printStackTrace();
        }
      }
 else {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + uriBase.toString());
      }
    }
  }
}",0.994205983209176
88446,"@Override public void run(ProgressStatus progressStatus){
  progressStatus.init(""String_Node_Str"",6);
  if (SessionManager.getInstance().isSessionCreated(project)) {
    SessionManager.getInstance().closeSession(project);
  }
  Map<String,Pair<ObjectNode,InstanceSpecification>> instanceSpecificationMap=new LinkedHashMap<>();
  Map<String,Pair<ObjectNode,Slot>> slotMap=new LinkedHashMap<>();
  Map<String,ViewMapping> viewMap=new LinkedHashMap<>();
  for (  Element rootView : rootViews) {
    if (MDUtils.isDeveloperMode()) {
    }
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(1);
    DocumentValidator dv=new DocumentValidator(rootView);
    dv.validateDocument();
    if (dv.isFatal()) {
      dv.printErrors(false);
      return;
    }
    DocumentGenerator dg=new DocumentGenerator(rootView,dv,null,false);
    Document dge=dg.parseDocument(true,recurse,false);
    new PostProcessor().process(dge);
    DocBookOutputVisitor docBookOutputVisitor=new DocBookOutputVisitor(true);
    dge.accept(docBookOutputVisitor);
    DBBook book=docBookOutputVisitor.getBook();
    if (book == null) {
      return;
    }
    ViewHierarchyVisitor viewHierarchyVisitor=new ViewHierarchyVisitor();
    dge.accept(viewHierarchyVisitor);
    for (    Element view : viewHierarchyVisitor.getView2ViewElements().keySet()) {
      if (processedElements.contains(view)) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
        continue;
      }
      ViewMapping viewMapping=viewMap.containsKey(Converters.getElementToIdConverter().apply(view)) ? viewMap.get(Converters.getElementToIdConverter().apply(view)) : new ViewMapping();
      viewMapping.setElement(view);
      viewMapping.setDbBook(book);
      viewMap.put(Converters.getElementToIdConverter().apply(view),viewMapping);
    }
  }
  Map<Element,Constraint> viewConstraintHashMap=new HashMap<>(0);
  for (  ViewMapping viewMapping : viewMap.values()) {
    Element view=viewMapping.getElement();
    if (view == null) {
      continue;
    }
    Constraint constraint=Utils.getViewConstraint(view);
    if (constraint == null) {
      Element element=Converters.getIdToElementConverter().apply(Converters.getElementToIdConverter().apply(view) + MDKConstants.VIEW_CONSTRAINT_SYSML_ID_SUFFIX,project);
      if (element instanceof Constraint) {
        constraint=(Constraint)element;
      }
    }
    if (constraint != null) {
      viewConstraintHashMap.put(view,constraint);
    }
  }
  if (!viewConstraintHashMap.isEmpty()) {
    try {
      SessionManager.getInstance().createSession(project,""String_Node_Str"");
      if (!SessionManager.getInstance().isSessionCreated(project)) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        failure=true;
        return;
      }
      for (      Map.Entry<Element,Constraint> entry : viewConstraintHashMap.entrySet()) {
        Constraint constraint=entry.getValue();
        Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(constraint));
        try {
          Command command=RemoveCommandCreator.getCommand(constraint);
          command.execute();
          MacroCommand macroCommand=CommandHistory.getCommandForAppend(constraint);
          macroCommand.add(command);
        }
 catch (        RuntimeException e) {
          updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str"" + constraint.getLocalID() + ""String_Node_Str""));
          failure=true;
        }
      }
    }
  finally {
      if (SessionManager.getInstance().isSessionCreated(project)) {
        SessionManager.getInstance().closeSession(project);
      }
    }
  }
  if (failure) {
    Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    return;
  }
  if (handleCancel(progressStatus)) {
    return;
  }
  LocalSyncTransactionCommitListener localSyncTransactionCommitListener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  Set<Element> elementsToDelete=new HashSet<>();
  if (SessionManager.getInstance().isSessionCreated(project)) {
    SessionManager.getInstance().closeSession(project);
  }
  SessionManager.getInstance().createSession(project,""String_Node_Str"");
  if (!SessionManager.getInstance().isSessionCreated(project)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    failure=true;
    return;
  }
  if (localSyncTransactionCommitListener != null) {
    localSyncTransactionCommitListener.setDisabled(true);
  }
  List<String> viewIDs=new ArrayList<>();
  if (!viewMap.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(2);
    ObjectNode viewResponse;
    try {
      File responseFile=MMSUtils.getElements(project,viewMap.keySet(),progressStatus);
      try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
        viewResponse=JacksonUtils.parseJsonObject(jsonParser);
      }
     }
 catch (    ServerException|IOException|URISyntaxException e) {
      failure=true;
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
    JsonNode viewElementsJsonArray;
    if (viewResponse != null && (viewElementsJsonArray=viewResponse.get(""String_Node_Str"")) != null && viewElementsJsonArray.isArray()) {
      Queue<String> instanceIDs=new LinkedList<>();
      Queue<String> slotIDs=new LinkedList<>();
      Property generatedFromViewProperty=Utils.getGeneratedFromViewProperty(project), generatedFromElementProperty=Utils.getGeneratedFromElementProperty(project);
      for (      JsonNode elementJsonNode : viewElementsJsonArray) {
        if (!elementJsonNode.isObject()) {
          continue;
        }
        ObjectNode elementObjectNode=(ObjectNode)elementJsonNode;
        JsonNode viewOperandJsonNode=JacksonUtils.getAtPath(elementObjectNode,""String_Node_Str"" + MDKConstants.CONTENTS_KEY + ""String_Node_Str""), sysmlIdJson=elementObjectNode.get(MDKConstants.ID_KEY);
        String sysmlId;
        if (sysmlIdJson != null && sysmlIdJson.isTextual() && !(sysmlId=sysmlIdJson.asText()).isEmpty()) {
          viewIDs.add(sysmlId);
          if (viewOperandJsonNode != null && viewOperandJsonNode.isArray()) {
            List<String> viewInstanceIDs=new ArrayList<>(viewOperandJsonNode.size());
            for (            JsonNode viewOperandJson : viewOperandJsonNode) {
              JsonNode instanceIdJsonNode=viewOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
              String instanceId;
              if (instanceIdJsonNode != null && instanceIdJsonNode.isTextual() && !(instanceId=instanceIdJsonNode.asText()).isEmpty()) {
                if (generatedFromViewProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                }
                if (generatedFromElementProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                }
                instanceIDs.add(instanceId);
                viewInstanceIDs.add(instanceId);
              }
            }
            ViewMapping viewMapping=viewMap.containsKey(sysmlId) ? viewMap.get(sysmlId) : new ViewMapping();
            viewMapping.setObjectNode(elementObjectNode);
            viewMapping.setInstanceIDs(viewInstanceIDs);
            viewMap.put(sysmlId,viewMapping);
          }
        }
      }
      List<ObjectNode> instanceObjectNodes=new ArrayList<>();
      List<ObjectNode> slotObjectNodes=new ArrayList<>();
      while (!instanceIDs.isEmpty() && !slotIDs.isEmpty()) {
        if (handleCancel(progressStatus)) {
          return;
        }
        List<String> elementIDs=new ArrayList<>(instanceIDs);
        elementIDs.addAll(slotIDs);
        ObjectNode instanceAndSlotResponse;
        try {
          File responseFile=MMSUtils.getElements(project,elementIDs,progressStatus);
          try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
            instanceAndSlotResponse=JacksonUtils.parseJsonObject(jsonParser);
          }
         }
 catch (        ServerException|IOException|URISyntaxException e) {
          failure=true;
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          e.printStackTrace();
          SessionManager.getInstance().cancelSession(project);
          return;
        }
        instanceIDs.clear();
        slotIDs.clear();
        JsonNode instanceAndSlotElementsJsonArray;
        if (instanceAndSlotResponse != null && (instanceAndSlotElementsJsonArray=instanceAndSlotResponse.get(""String_Node_Str"")) != null && instanceAndSlotElementsJsonArray.isArray()) {
          for (          JsonNode elementJson : instanceAndSlotElementsJsonArray) {
            JsonNode instanceOperandJsonArray=JacksonUtils.getAtPath(elementJson,""String_Node_Str"");
            if (instanceOperandJsonArray != null && instanceOperandJsonArray.isArray()) {
              for (              JsonNode instanceOperandJson : instanceOperandJsonArray) {
                JsonNode instanceIdJson=instanceOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
                String instanceId;
                if (instanceIdJson != null && instanceIdJson.isTextual() && !(instanceId=instanceIdJson.asText()).isEmpty()) {
                  if (generatedFromViewProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                  }
                  if (generatedFromElementProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                  }
                  instanceIDs.add(instanceId);
                }
              }
            }
            JsonNode typeJson=elementJson.get(MDKConstants.TYPE_KEY);
            if (typeJson.isTextual() && elementJson.isObject()) {
              (typeJson.asText().equalsIgnoreCase(""String_Node_Str"") ? slotObjectNodes : instanceObjectNodes).add((ObjectNode)elementJson);
            }
          }
        }
      }
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(3);
      EMFImporter emfImporter=new EMFImporter(){
        @Override public List<PreProcessor> getPreProcessors(){
          if (preProcessors == null) {
            preProcessors=new ArrayList<>(super.getPreProcessors());
            preProcessors.remove(PreProcessor.SYSML_ID_VALIDATION);
          }
          return preProcessors;
        }
        @Override public List<EStructuralFeatureOverride> getEStructuralFeatureOverrides(){
          if (eStructuralFeatureOverrides == null) {
            eStructuralFeatureOverrides=new ArrayList<>(super.getEStructuralFeatureOverrides());
            eStructuralFeatureOverrides.remove(EStructuralFeatureOverride.OWNER);
            eStructuralFeatureOverrides.add(new EStructuralFeatureOverride(EStructuralFeatureOverride.OWNER.getPredicate(),(objectNode,eStructuralFeature,project,strict,element) -> {
              if (element instanceof InstanceSpecification) {
                element.setOwner(project.getPrimaryModel());
                return element;
              }
              return EStructuralFeatureOverride.OWNER.getFunction().apply(objectNode,eStructuralFeature,project,strict,element);
            }
));
          }
          return eStructuralFeatureOverrides;
        }
      }
;
      for (      Boolean strict : Arrays.asList(false,true)) {
        ListIterator<ObjectNode> instanceObjectNodesIterator=instanceObjectNodes.listIterator(instanceObjectNodes.size());
        while (instanceObjectNodesIterator.hasPrevious()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode instanceObjectNode=instanceObjectNodesIterator.previous();
          try {
            Changelog.Change<Element> change=emfImporter.apply(instanceObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof InstanceSpecification) {
              instanceSpecificationMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(instanceObjectNode,(InstanceSpecification)element));
            }
          }
 catch (          ImportException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + instanceObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            instanceObjectNodesIterator.remove();
          }
        }
        ListIterator<ObjectNode> slotObjectNodesIterator=slotObjectNodes.listIterator();
        while (slotObjectNodesIterator.hasNext()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode slotObjectNode=slotObjectNodesIterator.next();
          try {
            Changelog.Change<Element> change=emfImporter.apply(slotObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof Slot) {
              slotMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(slotObjectNode,(Slot)element));
            }
          }
 catch (          ImportException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + slotObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            slotObjectNodesIterator.remove();
          }
        }
      }
      for (      ViewMapping viewMapping : viewMap.values()) {
        Element view=viewMapping.getElement();
        ObjectNode viewObjectNode=viewMapping.getObjectNode();
        if (viewObjectNode == null) {
          continue;
        }
        JsonNode viewContentsJsonNode=viewObjectNode.get(MDKConstants.CONTENTS_KEY);
        if (viewContentsJsonNode == null || !viewContentsJsonNode.isObject()) {
          continue;
        }
        try {
          Changelog.Change<Element> change=Converters.getJsonToElementConverter().apply((ObjectNode)viewContentsJsonNode,project,false);
          if (change.getChanged() != null && change.getChanged() instanceof Expression) {
            Expression expression=(Expression)change.getChanged();
            expression.getOperand().stream().filter(vs -> !(vs instanceof InstanceValue) || ((InstanceValue)vs).getInstance() == null).collect(Collectors.toList()).forEach(vs -> {
              elementsToDelete.add(vs);
              expression.getOperand().remove(vs);
            }
);
            presentationElementUtils.getOrCreateViewConstraint(view).setSpecification(expression);
          }
        }
 catch (        ImportException|ReadOnlyElementException e) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
        }
      }
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(4);
  Set<Element> views=new LinkedHashSet<>();
  Map<Element,List<PresentationElementInstance>> view2pe=new LinkedHashMap<>();
  Map<Element,List<PresentationElementInstance>> view2unused=new LinkedHashMap<>();
  Map<Element,JSONArray> view2elements=new LinkedHashMap<>();
  Map<String,ObjectNode> images=new LinkedHashMap<>();
  Set<Element> skippedViews=new HashSet<>();
  for (  Element rootView : rootViews) {
    DBAlfrescoVisitor dbAlfrescoVisitor=new DBAlfrescoVisitor(recurse,true);
    try {
      viewMap.get(Converters.getElementToIdConverter().apply(rootView)).getDbBook().accept(dbAlfrescoVisitor);
    }
 catch (    Exception e) {
      Utils.printException(e);
      e.printStackTrace();
    }
    views.addAll(presentationElementUtils.getViewProcessOrder(rootView,dbAlfrescoVisitor.getHierarchyElements()));
    view2pe.putAll(dbAlfrescoVisitor.getView2Pe());
    view2unused.putAll(dbAlfrescoVisitor.getView2Unused());
    view2elements.putAll(dbAlfrescoVisitor.getView2Elements());
    images.putAll(dbAlfrescoVisitor.getImages());
    views.removeAll(processedElements);
  }
  for (  Element view : views) {
    if (ProjectUtilities.isElementInAttachedProject(view)) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewInProject.addViolation(violation);
      skippedViews.add(view);
    }
    if (!viewIDs.contains(Converters.getElementToIdConverter().apply(view))) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewDoesNotExist.addViolation(violation);
      skippedViews.add(view);
    }
  }
  if (failure) {
    Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    SessionManager.getInstance().cancelSession(project);
    return;
  }
  try {
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      handlePes(view2pe.get(view),null);
      presentationElementUtils.updateOrCreateConstraintFromPresentationElements(view,view2pe.get(view));
    }
    LinkedList<ObjectNode> elementsToCommit=new LinkedList<>();
    Queue<Pair<InstanceSpecification,Element>> instanceToView=new LinkedList<>();
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      ObjectNode clientViewJson=Converters.getElementToJsonConverter().apply(view,project);
      if (clientViewJson == null) {
        skippedViews.add(view);
        continue;
      }
      if (view2elements.get(view) != null) {
        ArrayNode displayedElements=clientViewJson.putArray(MDKConstants.DISPLAYED_ELEMENT_IDS_KEY);
        for (        Object id : view2elements.get(view)) {
          displayedElements.add((String)id);
        }
      }
      Object o;
      ObjectNode serverViewJson=(o=viewMap.get(Converters.getElementToIdConverter().apply(view))) != null ? ((ViewMapping)o).getObjectNode() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientViewJson,serverViewJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str""+ JsonPatchFunction.getInstance().apply(clientViewJson,serverViewJson).toString());
        }
        elementsToCommit.add(clientViewJson);
      }
      for (      PresentationElementInstance presentationElementInstance : view2pe.get(view)) {
        if (presentationElementInstance.getInstance() != null) {
          instanceToView.add(new Pair<>(presentationElementInstance.getInstance(),view));
        }
      }
    }
    String viewInstanceBinId=MDKConstants.VIEW_INSTANCES_BIN_PREFIX + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    while (!instanceToView.isEmpty()) {
      Pair<InstanceSpecification,Element> pair=instanceToView.remove();
      InstanceSpecification instance=pair.getKey();
      List<InstanceSpecification> subInstances=presentationElementUtils.getCurrentInstances(instance,pair.getValue()).getAll();
      for (      InstanceSpecification subInstance : subInstances) {
        instanceToView.add(new Pair<>(subInstance,pair.getValue()));
      }
      ObjectNode clientInstanceSpecificationJson=Converters.getElementToJsonConverter().apply(instance,project);
      if (clientInstanceSpecificationJson == null) {
        continue;
      }
      clientInstanceSpecificationJson.put(MDKConstants.OWNER_ID_KEY,viewInstanceBinId);
      ObjectNode serverInstanceSpecificationJson=instanceSpecificationMap.containsKey(Converters.getElementToIdConverter().apply(instance)) ? instanceSpecificationMap.get(Converters.getElementToIdConverter().apply(instance)).getKey() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientInstanceSpecificationJson,serverInstanceSpecificationJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(instance) + ""String_Node_Str""+ JsonPatchFunction.getInstance().apply(clientInstanceSpecificationJson,serverInstanceSpecificationJson).toString());
        }
        elementsToCommit.add(clientInstanceSpecificationJson);
      }
      for (      Slot slot : instance.getSlot()) {
        ObjectNode clientSlotJson=Converters.getElementToJsonConverter().apply(slot,project);
        if (clientSlotJson == null) {
          continue;
        }
        JsonNode serverSlotJson=slotMap.containsKey(Converters.getElementToIdConverter().apply(slot)) ? slotMap.get(Converters.getElementToIdConverter().apply(slot)).getKey() : null;
        if (!JsonEquivalencePredicate.getInstance().test(clientSlotJson,serverSlotJson)) {
          elementsToCommit.add(clientSlotJson);
          if (MDUtils.isDeveloperMode()) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(slot) + ""String_Node_Str""+ JsonPatchFunction.getInstance().apply(clientSlotJson,serverSlotJson).toString());
          }
        }
      }
    }
    boolean changed=false;
    if (elementsToCommit.size() > 0) {
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(5);
      Application.getInstance().getGUILog().log(""String_Node_Str"" + elementsToCommit.size() + ""String_Node_Str""+ (elementsToCommit.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,elementsToCommit,MMSUtils.JsonBlobType.ELEMENT_JSON);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    Set<String> mmsElementsToDelete=new HashSet<>();
    for (    List<PresentationElementInstance> presentationElementInstances : view2unused.values()) {
      for (      PresentationElementInstance presentationElementInstance : presentationElementInstances) {
        if (presentationElementInstance.getInstance() == null) {
          continue;
        }
        String id=Converters.getElementToIdConverter().apply(presentationElementInstance.getInstance());
        if (id == null) {
          continue;
        }
        mmsElementsToDelete.add(id);
      }
    }
    if (elementsToCommit.size() > 0) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + mmsElementsToDelete.size() + ""String_Node_Str""+ (mmsElementsToDelete.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,mmsElementsToDelete,MMSUtils.JsonBlobType.ELEMENT_ID);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    if (!changed) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(6);
    for (    Pair<ObjectNode,Slot> pair : slotMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Pair<ObjectNode,InstanceSpecification> pair : instanceSpecificationMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Element element : views) {
      Constraint constraint=Utils.getViewConstraint(element);
      if (constraint == null) {
        continue;
      }
      elementsToDelete.add(constraint);
      ValueSpecification valueSpecification=constraint.getSpecification();
      if (valueSpecification == null) {
        continue;
      }
      elementsToDelete.add(valueSpecification);
      List<ValueSpecification> operands;
      if (!(valueSpecification instanceof Expression) || (operands=((Expression)valueSpecification).getOperand()) == null) {
        continue;
      }
      for (      ValueSpecification operand : operands) {
        elementsToDelete.add(operand);
        InstanceSpecification instanceSpecification;
        if (!(operand instanceof InstanceValue) || (instanceSpecification=((InstanceValue)operand).getInstance()) == null) {
          continue;
        }
        elementsToDelete.add(instanceSpecification);
        for (        Slot slot : instanceSpecification.getSlot()) {
          elementsToDelete.add(slot);
          elementsToDelete.addAll(slot.getValue());
        }
      }
    }
    for (    Element element : elementsToDelete) {
      try {
        Command command=RemoveCommandCreator.getCommand(element);
        command.execute();
        MacroCommand macroCommand=CommandHistory.getCommandForAppend(element);
        macroCommand.add(command);
      }
 catch (      RuntimeException ignored) {
        System.out.println(""String_Node_Str"" + element.getLocalID());
      }
    }
    processedElements.addAll(views);
  }
 catch (  Exception e) {
    failure=true;
    Utils.printException(e);
  }
 finally {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().cancelSession(project);
    }
    if (localSyncTransactionCommitListener != null) {
      localSyncTransactionCommitListener.setDisabled(false);
    }
  }
  ImageValidator iv=new ImageValidator(images,images);
  iv.validate(project);
  for (  ValidationRule validationRule : iv.getSuite().getValidationRules()) {
    for (    ValidationRuleViolation validationRuleViolation : validationRule.getViolations()) {
      if (!validationRuleViolation.getActions().isEmpty()) {
        validationRuleViolation.getActions().get(0).actionPerformed(null);
      }
    }
  }
  if (suite.hasErrors()) {
    Utils.displayValidationWindow(project,vss,""String_Node_Str"");
  }
}","@Override public void run(ProgressStatus progressStatus){
  progressStatus.init(""String_Node_Str"",6);
  if (SessionManager.getInstance().isSessionCreated(project)) {
    SessionManager.getInstance().closeSession(project);
  }
  Map<String,Pair<ObjectNode,InstanceSpecification>> instanceSpecificationMap=new LinkedHashMap<>();
  Map<String,Pair<ObjectNode,Slot>> slotMap=new LinkedHashMap<>();
  Map<String,ViewMapping> viewMap=new LinkedHashMap<>();
  for (  Element rootView : rootViews) {
    if (MDUtils.isDeveloperMode()) {
    }
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(1);
    DocumentValidator dv=new DocumentValidator(rootView);
    dv.validateDocument();
    if (dv.isFatal()) {
      dv.printErrors(false);
      return;
    }
    DocumentGenerator dg=new DocumentGenerator(rootView,dv,null,false);
    Document dge=dg.parseDocument(true,recurse,false);
    new PostProcessor().process(dge);
    DocBookOutputVisitor docBookOutputVisitor=new DocBookOutputVisitor(true);
    dge.accept(docBookOutputVisitor);
    DBBook book=docBookOutputVisitor.getBook();
    if (book == null) {
      return;
    }
    ViewHierarchyVisitor viewHierarchyVisitor=new ViewHierarchyVisitor();
    dge.accept(viewHierarchyVisitor);
    for (    Element view : viewHierarchyVisitor.getView2ViewElements().keySet()) {
      if (processedElements.contains(view)) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
        continue;
      }
      ViewMapping viewMapping=viewMap.containsKey(Converters.getElementToIdConverter().apply(view)) ? viewMap.get(Converters.getElementToIdConverter().apply(view)) : new ViewMapping();
      viewMapping.setElement(view);
      viewMapping.setDbBook(book);
      viewMap.put(Converters.getElementToIdConverter().apply(view),viewMapping);
    }
  }
  Map<Element,Constraint> viewConstraintHashMap=new HashMap<>(0);
  for (  ViewMapping viewMapping : viewMap.values()) {
    Element view=viewMapping.getElement();
    if (view == null) {
      continue;
    }
    Constraint constraint=Utils.getViewConstraint(view);
    if (constraint == null) {
      Element element=Converters.getIdToElementConverter().apply(Converters.getElementToIdConverter().apply(view) + MDKConstants.VIEW_CONSTRAINT_SYSML_ID_SUFFIX,project);
      if (element instanceof Constraint) {
        constraint=(Constraint)element;
      }
    }
    if (constraint != null) {
      viewConstraintHashMap.put(view,constraint);
    }
  }
  if (!viewConstraintHashMap.isEmpty()) {
    try {
      SessionManager.getInstance().createSession(project,""String_Node_Str"");
      if (!SessionManager.getInstance().isSessionCreated(project)) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        failure=true;
        return;
      }
      for (      Map.Entry<Element,Constraint> entry : viewConstraintHashMap.entrySet()) {
        Constraint constraint=entry.getValue();
        Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(constraint));
        try {
          Command command=RemoveCommandCreator.getCommand(constraint);
          command.execute();
          MacroCommand macroCommand=CommandHistory.getCommandForAppend(constraint);
          macroCommand.add(command);
        }
 catch (        RuntimeException e) {
          updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str"" + constraint.getLocalID() + ""String_Node_Str""));
          failure=true;
        }
      }
    }
  finally {
      if (SessionManager.getInstance().isSessionCreated(project)) {
        SessionManager.getInstance().closeSession(project);
      }
    }
  }
  if (failure) {
    Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    return;
  }
  if (handleCancel(progressStatus)) {
    return;
  }
  LocalSyncTransactionCommitListener localSyncTransactionCommitListener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  Set<Element> elementsToDelete=new HashSet<>();
  if (SessionManager.getInstance().isSessionCreated(project)) {
    SessionManager.getInstance().closeSession(project);
  }
  SessionManager.getInstance().createSession(project,""String_Node_Str"");
  if (!SessionManager.getInstance().isSessionCreated(project)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    failure=true;
    return;
  }
  if (localSyncTransactionCommitListener != null) {
    localSyncTransactionCommitListener.setDisabled(true);
  }
  List<String> viewIDs=new ArrayList<>();
  if (!viewMap.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(2);
    ObjectNode viewResponse;
    try {
      File responseFile=MMSUtils.getElements(project,viewMap.keySet(),progressStatus);
      try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
        viewResponse=JacksonUtils.parseJsonObject(jsonParser);
      }
     }
 catch (    ServerException|IOException|URISyntaxException e) {
      failure=true;
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
    JsonNode viewElementsJsonArray;
    if (viewResponse != null && (viewElementsJsonArray=viewResponse.get(""String_Node_Str"")) != null && viewElementsJsonArray.isArray()) {
      Queue<String> instanceIDs=new LinkedList<>();
      Queue<String> slotIDs=new LinkedList<>();
      Property generatedFromViewProperty=Utils.getGeneratedFromViewProperty(project), generatedFromElementProperty=Utils.getGeneratedFromElementProperty(project);
      for (      JsonNode elementJsonNode : viewElementsJsonArray) {
        if (!elementJsonNode.isObject()) {
          continue;
        }
        ObjectNode elementObjectNode=(ObjectNode)elementJsonNode;
        JsonNode viewOperandJsonNode=JacksonUtils.getAtPath(elementObjectNode,""String_Node_Str"" + MDKConstants.CONTENTS_KEY + ""String_Node_Str""), sysmlIdJson=elementObjectNode.get(MDKConstants.ID_KEY);
        String sysmlId;
        if (sysmlIdJson != null && sysmlIdJson.isTextual() && !(sysmlId=sysmlIdJson.asText()).isEmpty()) {
          viewIDs.add(sysmlId);
          if (viewOperandJsonNode != null && viewOperandJsonNode.isArray()) {
            List<String> viewInstanceIDs=new ArrayList<>(viewOperandJsonNode.size());
            for (            JsonNode viewOperandJson : viewOperandJsonNode) {
              JsonNode instanceIdJsonNode=viewOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
              String instanceId;
              if (instanceIdJsonNode != null && instanceIdJsonNode.isTextual() && !(instanceId=instanceIdJsonNode.asText()).isEmpty()) {
                if (generatedFromViewProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                }
                if (generatedFromElementProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                }
                instanceIDs.add(instanceId);
                viewInstanceIDs.add(instanceId);
              }
            }
            ViewMapping viewMapping=viewMap.containsKey(sysmlId) ? viewMap.get(sysmlId) : new ViewMapping();
            viewMapping.setObjectNode(elementObjectNode);
            viewMapping.setInstanceIDs(viewInstanceIDs);
            viewMap.put(sysmlId,viewMapping);
          }
        }
      }
      List<ObjectNode> instanceObjectNodes=new ArrayList<>();
      List<ObjectNode> slotObjectNodes=new ArrayList<>();
      while (!instanceIDs.isEmpty() && !slotIDs.isEmpty()) {
        if (handleCancel(progressStatus)) {
          return;
        }
        List<String> elementIDs=new ArrayList<>(instanceIDs);
        elementIDs.addAll(slotIDs);
        ObjectNode instanceAndSlotResponse;
        try {
          File responseFile=MMSUtils.getElements(project,elementIDs,progressStatus);
          try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
            instanceAndSlotResponse=JacksonUtils.parseJsonObject(jsonParser);
          }
         }
 catch (        ServerException|IOException|URISyntaxException e) {
          failure=true;
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          e.printStackTrace();
          SessionManager.getInstance().cancelSession(project);
          return;
        }
        instanceIDs.clear();
        slotIDs.clear();
        JsonNode instanceAndSlotElementsJsonArray;
        if (instanceAndSlotResponse != null && (instanceAndSlotElementsJsonArray=instanceAndSlotResponse.get(""String_Node_Str"")) != null && instanceAndSlotElementsJsonArray.isArray()) {
          for (          JsonNode elementJson : instanceAndSlotElementsJsonArray) {
            JsonNode instanceOperandJsonArray=JacksonUtils.getAtPath(elementJson,""String_Node_Str"");
            if (instanceOperandJsonArray != null && instanceOperandJsonArray.isArray()) {
              for (              JsonNode instanceOperandJson : instanceOperandJsonArray) {
                JsonNode instanceIdJson=instanceOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
                String instanceId;
                if (instanceIdJson != null && instanceIdJson.isTextual() && !(instanceId=instanceIdJson.asText()).isEmpty()) {
                  if (generatedFromViewProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                  }
                  if (generatedFromElementProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                  }
                  instanceIDs.add(instanceId);
                }
              }
            }
            JsonNode typeJson=elementJson.get(MDKConstants.TYPE_KEY);
            if (typeJson.isTextual() && elementJson.isObject()) {
              (typeJson.asText().equalsIgnoreCase(""String_Node_Str"") ? slotObjectNodes : instanceObjectNodes).add((ObjectNode)elementJson);
            }
          }
        }
      }
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(3);
      EMFImporter emfImporter=new EMFImporter(){
        @Override public List<PreProcessor> getPreProcessors(){
          if (preProcessors == null) {
            preProcessors=new ArrayList<>(super.getPreProcessors());
            preProcessors.remove(PreProcessor.SYSML_ID_VALIDATION);
          }
          return preProcessors;
        }
        @Override public List<EStructuralFeatureOverride> getEStructuralFeatureOverrides(){
          if (eStructuralFeatureOverrides == null) {
            eStructuralFeatureOverrides=new ArrayList<>(super.getEStructuralFeatureOverrides());
            eStructuralFeatureOverrides.remove(EStructuralFeatureOverride.OWNER);
            eStructuralFeatureOverrides.add(new EStructuralFeatureOverride(EStructuralFeatureOverride.OWNER.getPredicate(),(objectNode,eStructuralFeature,project,strict,element) -> {
              if (element instanceof InstanceSpecification) {
                element.setOwner(project.getPrimaryModel());
                return element;
              }
              return EStructuralFeatureOverride.OWNER.getFunction().apply(objectNode,eStructuralFeature,project,strict,element);
            }
));
          }
          return eStructuralFeatureOverrides;
        }
      }
;
      for (      Boolean strict : Arrays.asList(false,true)) {
        ListIterator<ObjectNode> instanceObjectNodesIterator=instanceObjectNodes.listIterator(instanceObjectNodes.size());
        while (instanceObjectNodesIterator.hasPrevious()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode instanceObjectNode=instanceObjectNodesIterator.previous();
          try {
            Changelog.Change<Element> change=emfImporter.apply(instanceObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof InstanceSpecification) {
              instanceSpecificationMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(instanceObjectNode,(InstanceSpecification)element));
            }
          }
 catch (          ImportException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + instanceObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            instanceObjectNodesIterator.remove();
          }
        }
        ListIterator<ObjectNode> slotObjectNodesIterator=slotObjectNodes.listIterator();
        while (slotObjectNodesIterator.hasNext()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode slotObjectNode=slotObjectNodesIterator.next();
          try {
            Changelog.Change<Element> change=emfImporter.apply(slotObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof Slot) {
              slotMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(slotObjectNode,(Slot)element));
            }
          }
 catch (          ImportException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + slotObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            slotObjectNodesIterator.remove();
          }
        }
      }
      for (      ViewMapping viewMapping : viewMap.values()) {
        Element view=viewMapping.getElement();
        ObjectNode viewObjectNode=viewMapping.getObjectNode();
        if (viewObjectNode == null) {
          continue;
        }
        JsonNode viewContentsJsonNode=viewObjectNode.get(MDKConstants.CONTENTS_KEY);
        if (viewContentsJsonNode == null || !viewContentsJsonNode.isObject()) {
          continue;
        }
        try {
          Changelog.Change<Element> change=Converters.getJsonToElementConverter().apply((ObjectNode)viewContentsJsonNode,project,false);
          if (change.getChanged() != null && change.getChanged() instanceof Expression) {
            Expression expression=(Expression)change.getChanged();
            expression.getOperand().stream().filter(vs -> !(vs instanceof InstanceValue) || ((InstanceValue)vs).getInstance() == null).collect(Collectors.toList()).forEach(vs -> {
              elementsToDelete.add(vs);
              expression.getOperand().remove(vs);
            }
);
            presentationElementUtils.getOrCreateViewConstraint(view).setSpecification(expression);
          }
        }
 catch (        ImportException|ReadOnlyElementException e) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
        }
      }
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(4);
  Set<Element> views=new LinkedHashSet<>();
  Map<Element,List<PresentationElementInstance>> view2pe=new LinkedHashMap<>();
  Map<Element,List<PresentationElementInstance>> view2unused=new LinkedHashMap<>();
  Map<Element,JSONArray> view2elements=new LinkedHashMap<>();
  Map<String,ObjectNode> images=new LinkedHashMap<>();
  Set<Element> skippedViews=new HashSet<>();
  for (  Element rootView : rootViews) {
    DBAlfrescoVisitor dbAlfrescoVisitor=new DBAlfrescoVisitor(recurse,true);
    try {
      viewMap.get(Converters.getElementToIdConverter().apply(rootView)).getDbBook().accept(dbAlfrescoVisitor);
    }
 catch (    Exception e) {
      Utils.printException(e);
      e.printStackTrace();
    }
    views.addAll(presentationElementUtils.getViewProcessOrder(rootView,dbAlfrescoVisitor.getHierarchyElements()));
    view2pe.putAll(dbAlfrescoVisitor.getView2Pe());
    view2unused.putAll(dbAlfrescoVisitor.getView2Unused());
    view2elements.putAll(dbAlfrescoVisitor.getView2Elements());
    images.putAll(dbAlfrescoVisitor.getImages());
    views.removeAll(processedElements);
  }
  for (  Element view : views) {
    if (ProjectUtilities.isElementInAttachedProject(view)) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewInProject.addViolation(violation);
      skippedViews.add(view);
    }
    if (!viewIDs.contains(Converters.getElementToIdConverter().apply(view))) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewDoesNotExist.addViolation(violation);
      skippedViews.add(view);
    }
  }
  if (failure) {
    Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    SessionManager.getInstance().cancelSession(project);
    return;
  }
  try {
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      handlePes(view2pe.get(view),null);
      presentationElementUtils.updateOrCreateConstraintFromPresentationElements(view,view2pe.get(view));
    }
    LinkedList<ObjectNode> elementsToCommit=new LinkedList<>();
    Queue<Pair<InstanceSpecification,Element>> instanceToView=new LinkedList<>();
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      ObjectNode clientViewJson=Converters.getElementToJsonConverter().apply(view,project);
      if (clientViewJson == null) {
        skippedViews.add(view);
        continue;
      }
      if (view2elements.get(view) != null) {
        ArrayNode displayedElements=clientViewJson.putArray(MDKConstants.DISPLAYED_ELEMENT_IDS_KEY);
        for (        Object id : view2elements.get(view)) {
          displayedElements.add((String)id);
        }
      }
      Object o;
      ObjectNode serverViewJson=(o=viewMap.get(Converters.getElementToIdConverter().apply(view))) != null ? ((ViewMapping)o).getObjectNode() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientViewJson,serverViewJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str""+ JsonPatchFunction.getInstance().apply(clientViewJson,serverViewJson).toString());
        }
        elementsToCommit.add(clientViewJson);
      }
      for (      PresentationElementInstance presentationElementInstance : view2pe.get(view)) {
        if (presentationElementInstance.getInstance() != null) {
          instanceToView.add(new Pair<>(presentationElementInstance.getInstance(),view));
        }
      }
    }
    String viewInstanceBinId=MDKConstants.VIEW_INSTANCES_BIN_PREFIX + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    while (!instanceToView.isEmpty()) {
      Pair<InstanceSpecification,Element> pair=instanceToView.remove();
      InstanceSpecification instance=pair.getKey();
      List<InstanceSpecification> subInstances=presentationElementUtils.getCurrentInstances(instance,pair.getValue()).getAll();
      for (      InstanceSpecification subInstance : subInstances) {
        instanceToView.add(new Pair<>(subInstance,pair.getValue()));
      }
      ObjectNode clientInstanceSpecificationJson=Converters.getElementToJsonConverter().apply(instance,project);
      if (clientInstanceSpecificationJson == null) {
        continue;
      }
      clientInstanceSpecificationJson.put(MDKConstants.OWNER_ID_KEY,viewInstanceBinId);
      ObjectNode serverInstanceSpecificationJson=instanceSpecificationMap.containsKey(Converters.getElementToIdConverter().apply(instance)) ? instanceSpecificationMap.get(Converters.getElementToIdConverter().apply(instance)).getKey() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientInstanceSpecificationJson,serverInstanceSpecificationJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(instance) + ""String_Node_Str""+ JsonPatchFunction.getInstance().apply(clientInstanceSpecificationJson,serverInstanceSpecificationJson).toString());
        }
        elementsToCommit.add(clientInstanceSpecificationJson);
      }
      for (      Slot slot : instance.getSlot()) {
        ObjectNode clientSlotJson=Converters.getElementToJsonConverter().apply(slot,project);
        if (clientSlotJson == null) {
          continue;
        }
        JsonNode serverSlotJson=slotMap.containsKey(Converters.getElementToIdConverter().apply(slot)) ? slotMap.get(Converters.getElementToIdConverter().apply(slot)).getKey() : null;
        if (!JsonEquivalencePredicate.getInstance().test(clientSlotJson,serverSlotJson)) {
          elementsToCommit.add(clientSlotJson);
          if (MDUtils.isDeveloperMode()) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(slot) + ""String_Node_Str""+ JsonPatchFunction.getInstance().apply(clientSlotJson,serverSlotJson).toString());
          }
        }
      }
    }
    boolean changed=false;
    if (elementsToCommit.size() > 0) {
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(5);
      Application.getInstance().getGUILog().log(""String_Node_Str"" + elementsToCommit.size() + ""String_Node_Str""+ (elementsToCommit.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,elementsToCommit,MMSUtils.JsonBlobType.ELEMENT_JSON);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    Set<String> mmsElementsToDelete=new HashSet<>();
    for (    List<PresentationElementInstance> presentationElementInstances : view2unused.values()) {
      for (      PresentationElementInstance presentationElementInstance : presentationElementInstances) {
        if (presentationElementInstance.getInstance() == null) {
          continue;
        }
        String id=Converters.getElementToIdConverter().apply(presentationElementInstance.getInstance());
        if (id == null) {
          continue;
        }
        mmsElementsToDelete.add(id);
      }
    }
    if (mmsElementsToDelete.size() > 0) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + mmsElementsToDelete.size() + ""String_Node_Str""+ (mmsElementsToDelete.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,mmsElementsToDelete,MMSUtils.JsonBlobType.ELEMENT_ID);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,mmsElementsToDelete.size(),""String_Node_Str""));
      changed=true;
    }
    if (!changed) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(6);
    for (    Pair<ObjectNode,Slot> pair : slotMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Pair<ObjectNode,InstanceSpecification> pair : instanceSpecificationMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Element element : views) {
      Constraint constraint=Utils.getViewConstraint(element);
      if (constraint == null) {
        continue;
      }
      elementsToDelete.add(constraint);
      ValueSpecification valueSpecification=constraint.getSpecification();
      if (valueSpecification == null) {
        continue;
      }
      elementsToDelete.add(valueSpecification);
      List<ValueSpecification> operands;
      if (!(valueSpecification instanceof Expression) || (operands=((Expression)valueSpecification).getOperand()) == null) {
        continue;
      }
      for (      ValueSpecification operand : operands) {
        elementsToDelete.add(operand);
        InstanceSpecification instanceSpecification;
        if (!(operand instanceof InstanceValue) || (instanceSpecification=((InstanceValue)operand).getInstance()) == null) {
          continue;
        }
        elementsToDelete.add(instanceSpecification);
        for (        Slot slot : instanceSpecification.getSlot()) {
          elementsToDelete.add(slot);
          elementsToDelete.addAll(slot.getValue());
        }
      }
    }
    for (    Element element : elementsToDelete) {
      try {
        Command command=RemoveCommandCreator.getCommand(element);
        command.execute();
        MacroCommand macroCommand=CommandHistory.getCommandForAppend(element);
        macroCommand.add(command);
      }
 catch (      RuntimeException ignored) {
        System.out.println(""String_Node_Str"" + element.getLocalID());
      }
    }
    processedElements.addAll(views);
  }
 catch (  Exception e) {
    failure=true;
    Utils.printException(e);
  }
 finally {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().cancelSession(project);
    }
    if (localSyncTransactionCommitListener != null) {
      localSyncTransactionCommitListener.setDisabled(false);
    }
  }
  ImageValidator iv=new ImageValidator(images,images);
  iv.validate(project);
  for (  ValidationRule validationRule : iv.getSuite().getValidationRules()) {
    for (    ValidationRuleViolation validationRuleViolation : validationRule.getViolations()) {
      if (!validationRuleViolation.getActions().isEmpty()) {
        validationRuleViolation.getActions().get(0).actionPerformed(null);
      }
    }
  }
  if (suite.hasErrors()) {
    Utils.displayValidationWindow(project,vss,""String_Node_Str"");
  }
}",0.9993547652484154
88447,"@Override public void onMessage(Message message){
  if (isDisabled()) {
    return;
  }
  lastMessage=message;
  if (!(message instanceof TextMessage)) {
    return;
  }
  final String text;
  try {
    text=((TextMessage)message).getText();
  }
 catch (  JMSException e) {
    e.printStackTrace();
    return;
  }
  if (MDKOptionsGroup.getMDKOptions().isLogJson()) {
    System.out.println(""String_Node_Str"" + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()) + ""String_Node_Str""+ System.lineSeparator()+ text);
  }
  JsonNode messageJsonNode;
  try {
    messageJsonNode=JacksonUtils.getObjectMapper().readTree(text);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return;
  }
  if (!messageJsonNode.isObject()) {
    return;
  }
  JsonNode refsJsonNode=messageJsonNode.get(""String_Node_Str"");
  JsonNode syncedJsonNode=messageJsonNode.get(""String_Node_Str"");
  if (refsJsonNode != null && refsJsonNode.isObject()) {
    for (    Map.Entry<String,Changelog.ChangeType> entry : CHANGE_MAPPING.entrySet()) {
      JsonNode changeJsonNode=refsJsonNode.get(entry.getKey());
      if (changeJsonNode == null || !changeJsonNode.isArray()) {
        continue;
      }
      for (      JsonNode sysmlIdJsonNode : changeJsonNode) {
        if (!sysmlIdJsonNode.isTextual() || sysmlIdJsonNode.asText().isEmpty()) {
          continue;
        }
        String id=sysmlIdJsonNode.asText();
        try {
          ObjectNode elementJsonNode=JacksonUtils.getObjectMapper().createObjectNode();
          elementJsonNode.put(MDKConstants.ID_KEY,id);
          if (EMFImporter.PreProcessor.SYSML_ID_VALIDATION.getFunction().apply(elementJsonNode,project,false,project.getPrimaryModel()) == null) {
            continue;
          }
        }
 catch (        ImportException ignored) {
          continue;
        }
        inMemoryJMSChangelog.addChange(id,null,entry.getValue());
      }
      SyncStatusConfigurator.getSyncStatusAction().update();
    }
  }
 else   if (syncedJsonNode != null && syncedJsonNode.isObject()) {
    JsonNode senderJsonNode;
    if ((senderJsonNode=syncedJsonNode.get(""String_Node_Str"")) != null && senderJsonNode.isTextual() && senderJsonNode.asText().equals(TicketUtils.getUsername(project))) {
      return;
    }
    Changelog<String,Void> syncedChangelog=SyncElements.buildChangelog((ObjectNode)syncedJsonNode);
    if (syncedChangelog.isEmpty()) {
      return;
    }
    Collection<String> ignoredIds;
    if (project.isRemote()) {
      ignoredIds=new HashSet<>();
      Collection<Element> locks=EsiUtils.getLockService(project).getLockedByMe();
      for (      Element lock : locks) {
        ignoredIds.add(lock.getLocalID());
      }
    }
 else {
      ignoredIds=Collections.emptyList();
    }
    for (    Changelog.ChangeType changeType : Changelog.ChangeType.values()) {
      Map<String,ObjectNode> inMemoryJMSChanges=inMemoryJMSChangelog.get(changeType);
      Set<String> keys=syncedChangelog.get(changeType).keySet();
      keys.removeAll(ignoredIds);
      keys.forEach(inMemoryJMSChanges::remove);
    }
    int size=syncedChangelog.flattenedSize();
    if (MDUtils.isDeveloperMode()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ size+ ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
    SyncStatusConfigurator.getSyncStatusAction().update();
  }
}","@Override public void onMessage(Message message){
  if (isDisabled()) {
    return;
  }
  lastMessage=message;
  if (!(message instanceof TextMessage)) {
    return;
  }
  final String text;
  try {
    text=((TextMessage)message).getText();
  }
 catch (  JMSException e) {
    e.printStackTrace();
    return;
  }
  if (MDKOptionsGroup.getMDKOptions().isLogJson()) {
    System.out.println(""String_Node_Str"" + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()) + ""String_Node_Str""+ System.lineSeparator()+ text);
  }
  JsonNode messageJsonNode;
  try {
    messageJsonNode=JacksonUtils.getObjectMapper().readTree(text);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return;
  }
  if (!messageJsonNode.isObject()) {
    return;
  }
  JsonNode refsJsonNode=messageJsonNode.get(""String_Node_Str""), syncedJsonNode=messageJsonNode.get(""String_Node_Str""), sourceJsonNode=messageJsonNode.get(""String_Node_Str""), senderJsonNode=messageJsonNode.get(""String_Node_Str"");
  if (refsJsonNode != null && refsJsonNode.isObject()) {
    if (sourceJsonNode != null && sourceJsonNode.isTextual() && sourceJsonNode.asText().startsWith(""String_Node_Str"")) {
      return;
    }
    for (    Map.Entry<String,Changelog.ChangeType> entry : CHANGE_MAPPING.entrySet()) {
      JsonNode changeJsonNode=refsJsonNode.get(entry.getKey());
      if (changeJsonNode == null || !changeJsonNode.isArray()) {
        continue;
      }
      for (      JsonNode sysmlIdJsonNode : changeJsonNode) {
        if (!sysmlIdJsonNode.isTextual() || sysmlIdJsonNode.asText().isEmpty()) {
          continue;
        }
        String id=sysmlIdJsonNode.asText();
        try {
          ObjectNode elementJsonNode=JacksonUtils.getObjectMapper().createObjectNode();
          elementJsonNode.put(MDKConstants.ID_KEY,id);
          if (EMFImporter.PreProcessor.SYSML_ID_VALIDATION.getFunction().apply(elementJsonNode,project,false,project.getPrimaryModel()) == null) {
            continue;
          }
        }
 catch (        ImportException ignored) {
          continue;
        }
        inMemoryJMSChangelog.addChange(id,null,entry.getValue());
      }
      SyncStatusConfigurator.getSyncStatusAction().update();
    }
  }
 else   if (syncedJsonNode != null && syncedJsonNode.isObject()) {
    if (senderJsonNode != null && senderJsonNode.isTextual() && senderJsonNode.asText().equals(TicketUtils.getUsername(project))) {
      return;
    }
    Changelog<String,Void> syncedChangelog=SyncElements.buildChangelog((ObjectNode)syncedJsonNode);
    if (syncedChangelog.isEmpty()) {
      return;
    }
    Collection<String> ignoredIds;
    if (project.isRemote()) {
      ignoredIds=new HashSet<>();
      Collection<Element> locks=EsiUtils.getLockService(project).getLockedByMe();
      for (      Element lock : locks) {
        ignoredIds.add(lock.getLocalID());
      }
    }
 else {
      ignoredIds=Collections.emptyList();
    }
    for (    Changelog.ChangeType changeType : Changelog.ChangeType.values()) {
      Map<String,ObjectNode> inMemoryJMSChanges=inMemoryJMSChangelog.get(changeType);
      Set<String> keys=syncedChangelog.get(changeType).keySet();
      keys.removeAll(ignoredIds);
      keys.forEach(inMemoryJMSChanges::remove);
    }
    int size=syncedChangelog.flattenedSize();
    if (MDUtils.isDeveloperMode()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ size+ ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
    SyncStatusConfigurator.getSyncStatusAction().update();
  }
}",0.9468160544603602
88448,"@Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setIndeterminate(true);
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (pv.getValidationSuite().hasErrors()) {
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  if (project.isRemote()) {
    BranchValidator bv=new BranchValidator(project);
    bv.validate(null,false);
    if (bv.hasErrors()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    if (bv.getValidationSuite().hasErrors()) {
      Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
      return;
    }
  }
  progressStatus.setDescription(""String_Node_Str"" + rootElements.size() + ""String_Node_Str""+ ((depth != 0) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (rootElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  progressStatus.setIndeterminate(false);
  progressStatus.setMax(rootElements.size());
  progressStatus.setCurrent(0);
  List<Pair<Element,ObjectNode>> clientElements=new ArrayList<>(rootElements.size());
  Collection<File> responseFiles=new ArrayList<>(3);
  for (  Element element : rootElements) {
    collectClientElementsRecursively(project,element,depth,clientElements);
    try {
      File responseFile=collectServerElementsRecursively(project,element,depth,progressStatus);
      if (responseFile != null) {
        responseFiles.add(responseFile);
      }
      if (element == project.getPrimaryModel() && depth != 0) {
        if (progressStatus.isCancel()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          return;
        }
        responseFile=collectServerHoldingBinElementsRecursively(project,depth - 1,progressStatus);
        if (responseFile != null) {
          responseFiles.add(responseFile);
        }
        if (progressStatus.isCancel()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          return;
        }
        responseFile=collectServerModuleElementsRecursively(project,0,progressStatus);
        if (responseFile != null) {
          responseFiles.add(responseFile);
        }
      }
    }
 catch (    ServerException|URISyntaxException|IOException e) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      validationSuite=null;
      return;
    }
    if (responseFiles.isEmpty()) {
      if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
      }
      validationSuite=null;
      return;
    }
    progressStatus.increase();
  }
  if (progressStatus.isCancel()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  elementValidator=new ElementValidator(""String_Node_Str"",clientElements,null,project,responseFiles);
  elementValidator.run(progressStatus);
}","@Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setIndeterminate(true);
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (pv.getValidationSuite().hasErrors()) {
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  if (project.isRemote()) {
    BranchValidator bv=new BranchValidator(project);
    bv.validate(null,false);
    if (bv.hasErrors()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    if (bv.getValidationSuite().hasErrors()) {
      Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
      return;
    }
  }
  progressStatus.setDescription(""String_Node_Str"" + rootElements.size() + ""String_Node_Str""+ ((depth != 0) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (rootElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  progressStatus.setIndeterminate(false);
  progressStatus.setMax(rootElements.size());
  progressStatus.setCurrent(0);
  List<Pair<Element,ObjectNode>> clientElements=new ArrayList<>(rootElements.size());
  Collection<File> responseFiles=new ArrayList<>(3);
  for (  Element element : rootElements) {
    collectClientElementsRecursively(project,element,depth,clientElements);
    Set<String> clientElementIds=clientElements.stream().map(pair -> pair.getKey().getLocalID()).collect(Collectors.toCollection(LinkedHashSet::new));
    try {
      File recursiveResponseFile, traversedResponseFile, responseFile;
      recursiveResponseFile=collectServerElementsRecursively(project,element,depth,progressStatus);
      if (recursiveResponseFile != null) {
        responseFiles.add(recursiveResponseFile);
      }
      if (clientElementIds.size() > 1) {
        traversedResponseFile=MMSUtils.getElements(project,clientElementIds,progressStatus);
        if (traversedResponseFile != null) {
          responseFiles.add(traversedResponseFile);
        }
      }
      if (element == project.getPrimaryModel() && depth != 0) {
        if (progressStatus.isCancel()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          return;
        }
        responseFile=collectServerHoldingBinElementsRecursively(project,depth - 1,progressStatus);
        if (responseFile != null) {
          responseFiles.add(responseFile);
        }
        if (progressStatus.isCancel()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          return;
        }
        responseFile=collectServerModuleElementsRecursively(project,0,progressStatus);
        if (responseFile != null) {
          responseFiles.add(responseFile);
        }
      }
    }
 catch (    ServerException|URISyntaxException|IOException e) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      validationSuite=null;
      return;
    }
    if (responseFiles.isEmpty()) {
      if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
      }
      validationSuite=null;
      return;
    }
    progressStatus.increase();
  }
  if (progressStatus.isCancel()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  elementValidator=new ElementValidator(""String_Node_Str"",clientElements,null,project,responseFiles);
  elementValidator.run(progressStatus);
}",0.9254760833708202
88449,"@SuppressWarnings(""String_Node_Str"") @Override public void visit(DBTable table){
  DBAlfrescoTableVisitor v=new DBAlfrescoTableVisitor(this.recurse);
  table.accept(v);
  viewElements.peek().addAll(v.getTableElements());
  elementSet.addAll(v.getElementSet());
  if (!main) {
    return;
  }
  InstanceSpecification i=null;
  if (!currentTableInstances.peek().isEmpty()) {
    i=currentTableInstances.peek().remove(0);
    currentInstanceList.peek().remove(0);
  }
  PresentationElementInstance parentSec=currentSection.isEmpty() ? null : currentSection.peek();
  PresentationElementInstance ipe=new PresentationElementInstance(i,v.getObject(),PresentationElementEnum.TABLE,currentView.peek(),table.getTitle() != null ? table.getTitle() : ""String_Node_Str"",parentSec,null);
  newpe.peek().add(ipe);
}","@SuppressWarnings(""String_Node_Str"") @Override public void visit(DBTable table){
  DBAlfrescoTableVisitor v=new DBAlfrescoTableVisitor(this.recurse);
  table.accept(v);
  viewElements.peek().addAll(v.getTableElements());
  elementSet.addAll(v.getElementSet());
  images.putAll(v.getImages());
  if (!main) {
    return;
  }
  InstanceSpecification i=null;
  if (!currentTableInstances.peek().isEmpty()) {
    i=currentTableInstances.peek().remove(0);
    currentInstanceList.peek().remove(i);
  }
  PresentationElementInstance parentSec=currentSection.isEmpty() ? null : currentSection.peek();
  PresentationElementInstance ipe=new PresentationElementInstance(i,v.getObject(),PresentationElementEnum.TABLE,currentView.peek(),table.getTitle() != null ? table.getTitle() : ""String_Node_Str"",parentSec,null);
  newpe.peek().add(ipe);
}",0.9791666666666666
88450,"@Override public void onMessage(Message message){
  if (isDisabled()) {
    return;
  }
  lastMessage=message;
  if (!(message instanceof TextMessage)) {
    return;
  }
  final String text;
  try {
    text=((TextMessage)message).getText();
  }
 catch (  JMSException e) {
    e.printStackTrace();
    return;
  }
  if (MDKOptionsGroup.getMDKOptions().isLogJson()) {
    System.out.println(""String_Node_Str"" + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()) + ""String_Node_Str""+ System.lineSeparator()+ text);
  }
  JsonNode messageJsonNode;
  try {
    messageJsonNode=JacksonUtils.getObjectMapper().readTree(text);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return;
  }
  if (!messageJsonNode.isObject()) {
    return;
  }
  JsonNode refsJsonNode=messageJsonNode.get(""String_Node_Str"");
  JsonNode syncedJsonNode=messageJsonNode.get(""String_Node_Str"");
  if (refsJsonNode != null && refsJsonNode.isObject()) {
    for (    Map.Entry<String,Changelog.ChangeType> entry : CHANGE_MAPPING.entrySet()) {
      JsonNode changeJsonNode=refsJsonNode.get(entry.getKey());
      if (changeJsonNode == null || !changeJsonNode.isArray()) {
        continue;
      }
      for (      JsonNode sysmlIdJsonNode : changeJsonNode) {
        if (!sysmlIdJsonNode.isTextual() || sysmlIdJsonNode.asText().isEmpty()) {
          continue;
        }
        String id=sysmlIdJsonNode.asText();
        try {
          ObjectNode elementJsonNode=JacksonUtils.getObjectMapper().createObjectNode();
          elementJsonNode.put(MDKConstants.ID_KEY,id);
          if (EMFImporter.PreProcessor.SYSML_ID_VALIDATION.getFunction().apply(elementJsonNode,project,false,project.getPrimaryModel()) == null) {
            continue;
          }
        }
 catch (        ImportException ignored) {
          continue;
        }
        inMemoryJMSChangelog.addChange(id,null,entry.getValue());
      }
      SyncStatusConfigurator.getSyncStatusAction().update();
    }
  }
 else   if (syncedJsonNode != null && syncedJsonNode.isObject()) {
    JsonNode sourceJsonNode;
    if ((sourceJsonNode=messageJsonNode.get(""String_Node_Str"")) != null && sourceJsonNode.isTextual() && sourceJsonNode.asText().startsWith(""String_Node_Str"")) {
      return;
    }
    Changelog<String,Void> syncedChangelog=SyncElements.buildChangelog((ObjectNode)syncedJsonNode);
    if (syncedChangelog.isEmpty()) {
      return;
    }
    Collection<String> ignoredIds;
    if (project.isRemote()) {
      ignoredIds=new HashSet<>();
      Collection<Element> locks=EsiUtils.getLockService(project).getLockedByMe();
      for (      Element lock : locks) {
        ignoredIds.add(lock.getLocalID());
      }
    }
 else {
      ignoredIds=Collections.emptyList();
    }
    for (    Changelog.ChangeType changeType : Changelog.ChangeType.values()) {
      Map<String,ObjectNode> inMemoryJMSChanges=inMemoryJMSChangelog.get(changeType);
      Set<String> keys=syncedChangelog.get(changeType).keySet();
      keys.removeAll(ignoredIds);
      keys.forEach(inMemoryJMSChanges::remove);
    }
    int size=syncedChangelog.flattenedSize();
    if (MDUtils.isDeveloperMode()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ size+ ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
    SyncStatusConfigurator.getSyncStatusAction().update();
  }
}","@Override public void onMessage(Message message){
  if (isDisabled()) {
    return;
  }
  lastMessage=message;
  if (!(message instanceof TextMessage)) {
    return;
  }
  final String text;
  try {
    text=((TextMessage)message).getText();
  }
 catch (  JMSException e) {
    e.printStackTrace();
    return;
  }
  if (MDKOptionsGroup.getMDKOptions().isLogJson()) {
    System.out.println(""String_Node_Str"" + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()) + ""String_Node_Str""+ System.lineSeparator()+ text);
  }
  JsonNode messageJsonNode;
  try {
    messageJsonNode=JacksonUtils.getObjectMapper().readTree(text);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return;
  }
  if (!messageJsonNode.isObject()) {
    return;
  }
  JsonNode refsJsonNode=messageJsonNode.get(""String_Node_Str"");
  JsonNode syncedJsonNode=messageJsonNode.get(""String_Node_Str"");
  if (refsJsonNode != null && refsJsonNode.isObject()) {
    for (    Map.Entry<String,Changelog.ChangeType> entry : CHANGE_MAPPING.entrySet()) {
      JsonNode changeJsonNode=refsJsonNode.get(entry.getKey());
      if (changeJsonNode == null || !changeJsonNode.isArray()) {
        continue;
      }
      for (      JsonNode sysmlIdJsonNode : changeJsonNode) {
        if (!sysmlIdJsonNode.isTextual() || sysmlIdJsonNode.asText().isEmpty()) {
          continue;
        }
        String id=sysmlIdJsonNode.asText();
        try {
          ObjectNode elementJsonNode=JacksonUtils.getObjectMapper().createObjectNode();
          elementJsonNode.put(MDKConstants.ID_KEY,id);
          if (EMFImporter.PreProcessor.SYSML_ID_VALIDATION.getFunction().apply(elementJsonNode,project,false,project.getPrimaryModel()) == null) {
            continue;
          }
        }
 catch (        ImportException ignored) {
          continue;
        }
        inMemoryJMSChangelog.addChange(id,null,entry.getValue());
      }
      SyncStatusConfigurator.getSyncStatusAction().update();
    }
  }
 else   if (syncedJsonNode != null && syncedJsonNode.isObject()) {
    JsonNode senderJsonNode;
    if ((senderJsonNode=syncedJsonNode.get(""String_Node_Str"")) != null && senderJsonNode.isTextual() && senderJsonNode.asText().equals(TicketUtils.getUsername(project))) {
      return;
    }
    Changelog<String,Void> syncedChangelog=SyncElements.buildChangelog((ObjectNode)syncedJsonNode);
    if (syncedChangelog.isEmpty()) {
      return;
    }
    Collection<String> ignoredIds;
    if (project.isRemote()) {
      ignoredIds=new HashSet<>();
      Collection<Element> locks=EsiUtils.getLockService(project).getLockedByMe();
      for (      Element lock : locks) {
        ignoredIds.add(lock.getLocalID());
      }
    }
 else {
      ignoredIds=Collections.emptyList();
    }
    for (    Changelog.ChangeType changeType : Changelog.ChangeType.values()) {
      Map<String,ObjectNode> inMemoryJMSChanges=inMemoryJMSChangelog.get(changeType);
      Set<String> keys=syncedChangelog.get(changeType).keySet();
      keys.removeAll(ignoredIds);
      keys.forEach(inMemoryJMSChanges::remove);
    }
    int size=syncedChangelog.flattenedSize();
    if (MDUtils.isDeveloperMode()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ size+ ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
    SyncStatusConfigurator.getSyncStatusAction().update();
  }
}",0.982532751091703
88451,"public DeltaSyncRunner(boolean shouldCommmit,boolean shouldCommitDeletes,boolean shouldUpdate){
  this.shouldCommit=shouldCommmit;
  this.shouldCommitDeletes=shouldCommitDeletes;
  this.shouldUpdate=shouldUpdate;
}","public DeltaSyncRunner(boolean shouldCommit,boolean shouldCommitDeletes,boolean shouldUpdate){
  this.shouldCommit=shouldCommit;
  this.shouldCommitDeletes=shouldCommitDeletes;
  this.shouldUpdate=shouldUpdate;
}",0.9953051643192488
88452,"@SuppressWarnings(""String_Node_Str"") @Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject()) && EsiUtils.getLoggedUserName() == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  try {
    if (!TicketUtils.isTicketValid(project,progressStatus)) {
      Utils.guilog(""String_Node_Str"");
      new Thread(() -> MMSLoginAction.loginAction(project)).start();
      return;
    }
  }
 catch (  ServerException|IOException|URISyntaxException e) {
    Utils.guilog(""String_Node_Str"");
    new Thread(() -> MMSLoginAction.loginAction(project)).start();
    return;
  }
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (pv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  BranchValidator bv=new BranchValidator(project);
  bv.validate(null,false);
  if (bv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (bv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  LocalSyncTransactionCommitListener listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  listener.setDisabled(true);
  SyncElements.lockSyncFolder(project);
  listener.setDisabled(false);
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(Application.getInstance().getProject());
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  if (jmsMessageListener == null) {
    if (MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    return;
  }
  Changelog<String,Element> persistedLocalChangelog=new Changelog<>();
  Collection<SyncElement> persistedLocalSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.LOCAL);
  for (  SyncElement syncElement : persistedLocalSyncElements) {
    persistedLocalChangelog=persistedLocalChangelog.and(SyncElements.buildChangelog(syncElement),(key,value) -> Converters.getIdToElementConverter().apply(key,project));
  }
  Changelog<String,Element> localChangelog=persistedLocalChangelog.and(listener.getInMemoryLocalChangelog());
  Map<String,Element> localCreated=localChangelog.get(Changelog.ChangeType.CREATED), localUpdated=localChangelog.get(Changelog.ChangeType.UPDATED), localDeleted=localChangelog.get(Changelog.ChangeType.DELETED);
  Changelog<String,Void> persistedJmsChangelog=new Changelog<>();
  Collection<SyncElement> persistedJmsSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.MMS);
  for (  SyncElement syncElement : persistedJmsSyncElements) {
    persistedJmsChangelog=persistedJmsChangelog.and(SyncElements.buildChangelog(syncElement));
  }
  Changelog<String,Void> jmsChangelog=persistedJmsChangelog.and(jmsMessageListener.getInMemoryJMSChangelog(),(key,objectNode) -> null);
  Map<String,Void> jmsCreated=jmsChangelog.get(Changelog.ChangeType.CREATED), jmsUpdated=jmsChangelog.get(Changelog.ChangeType.UPDATED), jmsDeleted=jmsChangelog.get(Changelog.ChangeType.DELETED);
  Set<String> elementIdsToGet=new HashSet<>(jmsUpdated.keySet());
  elementIdsToGet.addAll(jmsCreated.keySet());
  if (shouldUpdate && !jmsChangelog.isEmpty()) {
    int size=jmsChangelog.flattenedSize();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + size + ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  Map<String,ObjectNode> jmsJsons=new HashMap<>(elementIdsToGet.size());
  if (!elementIdsToGet.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"" + elementIdsToGet.size() + ""String_Node_Str""+ (elementIdsToGet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    File responseFile;
    ObjectNode response;
    try {
      responseFile=MMSUtils.getElements(project,elementIdsToGet,progressStatus);
      try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
        response=JacksonUtils.parseJsonObject(jsonParser);
      }
     }
 catch (    ServerException|IOException|URISyntaxException e) {
      if (progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        return;
      }
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
    if (progressStatus.isCancel()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    if (response == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    JsonNode elementsArrayNode=response.get(""String_Node_Str"");
    if (elementsArrayNode == null || !elementsArrayNode.isArray()) {
      elementsArrayNode=JacksonUtils.getObjectMapper().createArrayNode();
    }
    for (    JsonNode jsonNode : elementsArrayNode) {
      if (!jsonNode.isObject()) {
        continue;
      }
      String webId=jsonNode.get(MDKConstants.ID_KEY).asText();
      jmsJsons.put(webId,(ObjectNode)jsonNode);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  Map<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedChanges=new LinkedHashMap<>(), unconflictedChanges=new LinkedHashMap<>();
  localChangelog.findConflicts(jmsChangelog,(change,change2) -> change != null && change2 != null,conflictedChanges,unconflictedChanges);
  Map<String,Element> localElementsToPost=new LinkedHashMap<>(localCreated.size() + localUpdated.size());
  Set<String> deleteElements=new HashSet<>(localDeleted.size());
  Map<String,ObjectNode> jmsElementsToCreateLocally=new LinkedHashMap<>(jmsCreated.size());
  Map<String,Pair<ObjectNode,Element>> jmsElementsToUpdateLocally=new LinkedHashMap<>(jmsUpdated.size());
  Map<String,Element> jmsElementsToDeleteLocally=new LinkedHashMap<>(jmsDeleted.size());
  for (  Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> unconflictedEntry : unconflictedChanges.entrySet()) {
    String id=unconflictedEntry.getKey();
    Changelog.Change<Element> localChange=unconflictedEntry.getValue().getKey();
    Changelog.Change<ObjectNode> jmsChange=unconflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),unconflictedEntry.getValue().getValue().getType()) : null;
    if (shouldCommit && localChange != null) {
      Element element=localChange.getChanged();
switch (localChange.getType()) {
case CREATED:
case UPDATED:
        if (element == null) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
          continue;
        }
      localElementsToPost.put(id,element);
    break;
case DELETED:
  if (element != null && !project.isDisposed(element)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
    continue;
  }
deleteElements.add(id);
break;
}
}
 else if (shouldUpdate && jmsChange != null) {
ObjectNode objectNode=jmsChange.getChanged();
Element element=Converters.getIdToElementConverter().apply(id,project);
switch (jmsChange.getType()) {
case CREATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element != null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
jmsElementsToCreateLocally.put(id,objectNode);
break;
case UPDATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.UPDATED);
continue;
}
jmsElementsToUpdateLocally.put(id,new Pair<>(objectNode,element));
break;
case DELETED:
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
continue;
}
jmsElementsToDeleteLocally.put(id,element);
break;
}
}
}
if (progressStatus.isCancel()) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
return;
}
boolean shouldLogNoLocalChanges=shouldCommit;
if (shouldCommit && !localElementsToPost.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
LinkedList<ObjectNode> postElements=new LinkedList<>();
for (Element element : localElementsToPost.values()) {
ObjectNode elementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
if (elementObjectNode != null) {
postElements.add(elementObjectNode);
}
}
if (postElements.size() > 0) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(postElements.size()) + ""String_Node_Str""+ (postElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,postElements,MMSUtils.JsonBlobType.ELEMENT_JSON);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,postElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
}
if (shouldCommit && shouldCommitDeletes && !deleteElements.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(deleteElements.size()) + ""String_Node_Str""+ (deleteElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,deleteElements,MMSUtils.JsonBlobType.ELEMENT_ID);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,deleteElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
if (shouldLogNoLocalChanges) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
}
if (shouldUpdate) {
listener.setDisabled(true);
List<ObjectNode> jmsElementsToCreateOrUpdateLocally=new ArrayList<>(jmsElementsToCreateLocally.size() + jmsElementsToUpdateLocally.size());
jmsElementsToCreateOrUpdateLocally.addAll(jmsElementsToCreateLocally.values());
jmsElementsToUpdateLocally.values().forEach(pair -> jmsElementsToCreateOrUpdateLocally.add(pair.getKey()));
UpdateClientElementAction updateClientElementAction=new UpdateClientElementAction(project);
updateClientElementAction.setElementsToUpdate(jmsElementsToCreateOrUpdateLocally);
updateClientElementAction.setElementsToDelete(jmsElementsToDeleteLocally.values().stream().map(Converters.getElementToIdConverter()).filter(id -> id != null).filter(id -> !id.isEmpty()).collect(Collectors.toList()));
updateClientElementAction.run(progressStatus);
failedJmsChangelog=failedJmsChangelog.and(updateClientElementAction.getFailedChangelog(),(id,objectNode) -> null);
listener.setDisabled(false);
}
progressStatus.setDescription(""String_Node_Str"");
Set<Element> localConflictedElements=new HashSet<>();
Set<ObjectNode> jmsConflictedElements=new HashSet<>();
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null && !project.isDisposed(localChange.getChanged())) {
localConflictedElements.add(localChange.getChanged());
}
if (jmsChange != null && jmsChange.getChanged() != null) {
jmsConflictedElements.add(jmsChange.getChanged());
}
}
ElementValidator elementValidator=new ElementValidator(""String_Node_Str"",ElementValidator.buildElementPairs(localConflictedElements,project),jmsConflictedElements,project);
elementValidator.run(progressStatus);
if (!elementValidator.getInvalidElements().isEmpty()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + elementValidator.getInvalidElements().size() + ""String_Node_Str""+ (elementValidator.getInvalidElements().size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
vss.add(elementValidator.getValidationSuite());
Utils.displayValidationWindow(project,elementValidator.getValidationSuite(),""String_Node_Str"");
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
if (!elementValidator.getInvalidElements().containsKey(id)) {
continue;
}
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && (localChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(localChange.getType()))) {
failedLocalChangelog.addChange(conflictedEntry.getKey(),localChange.getChanged(),localChange.getType());
}
if (jmsChange != null && (jmsChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(jmsChange.getType()))) {
failedJmsChangelog.addChange(conflictedEntry.getKey(),null,jmsChange.getType());
}
}
}
listener.getInMemoryLocalChangelog().clear();
jmsMessageListener.getInMemoryJMSChangelog().clear();
listener.setDisabled(true);
if (!SessionManager.getInstance().isSessionCreated()) {
SessionManager.getInstance().createSession(""String_Node_Str"");
}
Changelog<String,Void> unprocessedLocalChangelog=new Changelog<>();
if (!shouldCommit) {
unprocessedLocalChangelog=unprocessedLocalChangelog.and(localChangelog,(s,element) -> null);
}
if (shouldCommit && !shouldCommitDeletes) {
Map<String,Void> unprocessedLocalDeletedChanges=unprocessedLocalChangelog.get(Changelog.ChangeType.DELETED);
for (String key : localChangelog.get(Changelog.ChangeType.DELETED).keySet()) {
unprocessedLocalDeletedChanges.put(key,null);
}
}
unprocessedLocalChangelog=unprocessedLocalChangelog.and(failedLocalChangelog,(s,element) -> null);
try {
SyncElements.setByType(project,SyncElement.Type.LOCAL,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedLocalChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
Changelog<String,Void> unprocessedJmsChangelog=new Changelog<>();
if (!shouldUpdate) {
unprocessedJmsChangelog=unprocessedJmsChangelog.and(jmsChangelog);
}
unprocessedJmsChangelog=unprocessedJmsChangelog.and(failedJmsChangelog);
try {
SyncElements.setByType(project,SyncElement.Type.MMS,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedJmsChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
SessionManager.getInstance().closeSession();
listener.setDisabled(false);
failure=false;
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject()) && EsiUtils.getLoggedUserName() == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  try {
    if (!TicketUtils.isTicketValid(project,progressStatus)) {
      Utils.guilog(""String_Node_Str"");
      new Thread(() -> MMSLoginAction.loginAction(project)).start();
      return;
    }
  }
 catch (  ServerException|IOException|URISyntaxException e) {
    Utils.guilog(""String_Node_Str"");
    new Thread(() -> MMSLoginAction.loginAction(project)).start();
    return;
  }
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (pv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  BranchValidator bv=new BranchValidator(project);
  bv.validate(null,false);
  if (bv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (bv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  LocalSyncTransactionCommitListener listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  listener.setDisabled(true);
  SyncElements.lockSyncFolder(project);
  listener.setDisabled(false);
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(Application.getInstance().getProject());
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  if (jmsMessageListener == null) {
    if (MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    return;
  }
  Changelog<String,Element> persistedLocalChangelog=new Changelog<>();
  Collection<SyncElement> persistedLocalSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.LOCAL);
  for (  SyncElement syncElement : persistedLocalSyncElements) {
    persistedLocalChangelog=persistedLocalChangelog.and(SyncElements.buildChangelog(syncElement),(key,value) -> Converters.getIdToElementConverter().apply(key,project));
  }
  Changelog<String,Element> localChangelog=persistedLocalChangelog.and(listener.getInMemoryLocalChangelog());
  Map<String,Element> localCreated=localChangelog.get(Changelog.ChangeType.CREATED), localUpdated=localChangelog.get(Changelog.ChangeType.UPDATED), localDeleted=localChangelog.get(Changelog.ChangeType.DELETED);
  Changelog<String,Void> persistedJmsChangelog=new Changelog<>();
  Collection<SyncElement> persistedJmsSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.MMS);
  for (  SyncElement syncElement : persistedJmsSyncElements) {
    persistedJmsChangelog=persistedJmsChangelog.and(SyncElements.buildChangelog(syncElement));
  }
  Changelog<String,Void> jmsChangelog=persistedJmsChangelog.and(jmsMessageListener.getInMemoryJMSChangelog(),(key,objectNode) -> null);
  Map<String,Void> jmsCreated=jmsChangelog.get(Changelog.ChangeType.CREATED), jmsUpdated=jmsChangelog.get(Changelog.ChangeType.UPDATED), jmsDeleted=jmsChangelog.get(Changelog.ChangeType.DELETED);
  Set<String> elementIdsToGet=new HashSet<>(jmsUpdated.keySet());
  elementIdsToGet.addAll(jmsCreated.keySet());
  if (shouldUpdate && !jmsChangelog.isEmpty()) {
    int size=jmsChangelog.flattenedSize();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + size + ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  Map<String,ObjectNode> jmsJsons=new HashMap<>(elementIdsToGet.size());
  if (!elementIdsToGet.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"" + elementIdsToGet.size() + ""String_Node_Str""+ (elementIdsToGet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    File responseFile;
    ObjectNode response;
    try {
      responseFile=MMSUtils.getElements(project,elementIdsToGet,progressStatus);
      try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
        response=JacksonUtils.parseJsonObject(jsonParser);
      }
     }
 catch (    ServerException|IOException|URISyntaxException e) {
      if (progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        return;
      }
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
    if (progressStatus.isCancel()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    if (response == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    JsonNode elementsArrayNode=response.get(""String_Node_Str"");
    if (elementsArrayNode == null || !elementsArrayNode.isArray()) {
      elementsArrayNode=JacksonUtils.getObjectMapper().createArrayNode();
    }
    for (    JsonNode jsonNode : elementsArrayNode) {
      if (!jsonNode.isObject()) {
        continue;
      }
      String webId=jsonNode.get(MDKConstants.ID_KEY).asText();
      jmsJsons.put(webId,(ObjectNode)jsonNode);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  Map<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedChanges=new LinkedHashMap<>(), unconflictedChanges=new LinkedHashMap<>();
  localChangelog.findConflicts(jmsChangelog,(change,change2) -> change != null && change2 != null,conflictedChanges,unconflictedChanges);
  Map<String,Element> localElementsToPost=new LinkedHashMap<>(localCreated.size() + localUpdated.size());
  Set<String> deleteElements=new HashSet<>(localDeleted.size());
  Map<String,ObjectNode> jmsElementsToCreateLocally=new LinkedHashMap<>(jmsCreated.size());
  Map<String,Pair<ObjectNode,Element>> jmsElementsToUpdateLocally=new LinkedHashMap<>(jmsUpdated.size());
  Map<String,Element> jmsElementsToDeleteLocally=new LinkedHashMap<>(jmsDeleted.size());
  for (  Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> unconflictedEntry : unconflictedChanges.entrySet()) {
    String id=unconflictedEntry.getKey();
    Changelog.Change<Element> localChange=unconflictedEntry.getValue().getKey();
    Changelog.Change<ObjectNode> jmsChange=unconflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),unconflictedEntry.getValue().getValue().getType()) : null;
    if (shouldCommit && localChange != null) {
      Element element=localChange.getChanged();
switch (localChange.getType()) {
case CREATED:
case UPDATED:
        if (element == null) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
          continue;
        }
      localElementsToPost.put(id,element);
    break;
case DELETED:
  if (element != null && !project.isDisposed(element)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
    continue;
  }
deleteElements.add(id);
break;
}
}
 else if (shouldUpdate && jmsChange != null) {
ObjectNode objectNode=jmsChange.getChanged();
Element element=Converters.getIdToElementConverter().apply(id,project);
switch (jmsChange.getType()) {
case CREATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element != null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
jmsElementsToCreateLocally.put(id,objectNode);
break;
case UPDATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.UPDATED);
continue;
}
jmsElementsToUpdateLocally.put(id,new Pair<>(objectNode,element));
break;
case DELETED:
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
continue;
}
jmsElementsToDeleteLocally.put(id,element);
break;
}
}
}
if (progressStatus.isCancel()) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
return;
}
boolean shouldLogNoLocalChanges=shouldCommit;
if (shouldCommit && !localElementsToPost.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
LinkedList<ObjectNode> postElements=new LinkedList<>();
for (Element element : localElementsToPost.values()) {
ObjectNode elementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
if (elementObjectNode != null) {
postElements.add(elementObjectNode);
}
}
if (postElements.size() > 0) {
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,postElements,MMSUtils.JsonBlobType.ELEMENT_JSON);
Request request=new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,postElements.size(),""String_Node_Str"");
MMSUtils.sendMMSRequest(request.getProject(),request.getRequest(),progressStatus);
}
 catch (IOException|URISyntaxException|ServerException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
return;
}
shouldLogNoLocalChanges=false;
}
}
if (shouldCommit && shouldCommitDeletes && !deleteElements.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,deleteElements,MMSUtils.JsonBlobType.ELEMENT_ID);
Request request=new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,deleteElements.size(),""String_Node_Str"");
MMSUtils.sendMMSRequest(request.getProject(),request.getRequest(),progressStatus);
}
 catch (IOException|URISyntaxException|ServerException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
return;
}
shouldLogNoLocalChanges=false;
}
if (shouldLogNoLocalChanges) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
}
if (shouldUpdate) {
listener.setDisabled(true);
List<ObjectNode> jmsElementsToCreateOrUpdateLocally=new ArrayList<>(jmsElementsToCreateLocally.size() + jmsElementsToUpdateLocally.size());
jmsElementsToCreateOrUpdateLocally.addAll(jmsElementsToCreateLocally.values());
jmsElementsToUpdateLocally.values().forEach(pair -> jmsElementsToCreateOrUpdateLocally.add(pair.getKey()));
UpdateClientElementAction updateClientElementAction=new UpdateClientElementAction(project);
updateClientElementAction.setElementsToUpdate(jmsElementsToCreateOrUpdateLocally);
updateClientElementAction.setElementsToDelete(jmsElementsToDeleteLocally.values().stream().map(Converters.getElementToIdConverter()).filter(id -> id != null).filter(id -> !id.isEmpty()).collect(Collectors.toList()));
updateClientElementAction.run(progressStatus);
failedJmsChangelog=failedJmsChangelog.and(updateClientElementAction.getFailedChangelog(),(id,objectNode) -> null);
listener.setDisabled(false);
}
progressStatus.setDescription(""String_Node_Str"");
Set<Element> localConflictedElements=new HashSet<>();
Set<ObjectNode> jmsConflictedElements=new HashSet<>();
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null && !project.isDisposed(localChange.getChanged())) {
localConflictedElements.add(localChange.getChanged());
}
if (jmsChange != null && jmsChange.getChanged() != null) {
jmsConflictedElements.add(jmsChange.getChanged());
}
}
ElementValidator elementValidator=new ElementValidator(""String_Node_Str"",ElementValidator.buildElementPairs(localConflictedElements,project),jmsConflictedElements,project);
elementValidator.run(progressStatus);
if (!elementValidator.getInvalidElements().isEmpty()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + elementValidator.getInvalidElements().size() + ""String_Node_Str""+ (elementValidator.getInvalidElements().size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
vss.add(elementValidator.getValidationSuite());
Utils.displayValidationWindow(project,elementValidator.getValidationSuite(),""String_Node_Str"");
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
if (!elementValidator.getInvalidElements().containsKey(id)) {
continue;
}
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && (localChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(localChange.getType()))) {
failedLocalChangelog.addChange(conflictedEntry.getKey(),localChange.getChanged(),localChange.getType());
}
if (jmsChange != null && (jmsChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(jmsChange.getType()))) {
failedJmsChangelog.addChange(conflictedEntry.getKey(),null,jmsChange.getType());
}
}
}
listener.getInMemoryLocalChangelog().clear();
jmsMessageListener.getInMemoryJMSChangelog().clear();
listener.setDisabled(true);
if (!SessionManager.getInstance().isSessionCreated()) {
SessionManager.getInstance().createSession(""String_Node_Str"");
}
Changelog<String,Void> unprocessedLocalChangelog=new Changelog<>();
if (!shouldCommit) {
unprocessedLocalChangelog=unprocessedLocalChangelog.and(localChangelog,(s,element) -> null);
}
if (shouldCommit && !shouldCommitDeletes) {
Map<String,Void> unprocessedLocalDeletedChanges=unprocessedLocalChangelog.get(Changelog.ChangeType.DELETED);
for (String key : localChangelog.get(Changelog.ChangeType.DELETED).keySet()) {
unprocessedLocalDeletedChanges.put(key,null);
}
}
unprocessedLocalChangelog=unprocessedLocalChangelog.and(failedLocalChangelog,(s,element) -> null);
try {
SyncElements.setByType(project,SyncElement.Type.LOCAL,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedLocalChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
Changelog<String,Void> unprocessedJmsChangelog=new Changelog<>();
if (!shouldUpdate) {
unprocessedJmsChangelog=unprocessedJmsChangelog.and(jmsChangelog);
}
unprocessedJmsChangelog=unprocessedJmsChangelog.and(failedJmsChangelog);
try {
SyncElements.setByType(project,SyncElement.Type.MMS,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedJmsChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
SessionManager.getInstance().closeSession();
listener.setDisabled(false);
failure=false;
}",0.7963739516526886
88453,"protected void startSection(DBSection section){
  JSONObject newSection=new JSONObject();
  newSection.put(""String_Node_Str"",""String_Node_Str"");
  newSection.put(""String_Node_Str"",section.getTitle());
  JSONArray secArray=new JSONArray();
  newSection.put(""String_Node_Str"",secArray);
  this.curContains.peek().add(newSection);
  this.curContains.push(secArray);
  InstanceSpecification sec=null;
  Element loopElement=null;
  if (section.getDgElement() instanceof Section) {
    if (((Section)section.getDgElement()).getLoopElement() != null) {
      loopElement=((Section)section.getDgElement()).getLoopElement();
      sec=findInstanceForSection(loopElement);
    }
 else {
      sec=findInstanceForSection(null);
    }
  }
  if (sec != null) {
    currentInstanceList.peek().remove(sec);
    currentSectionInstances.peek().remove(sec);
  }
  PresentationElementInstance parentSec=currentSection.isEmpty() ? null : currentSection.peek();
  List<PresentationElementInstance> secChildren=new ArrayList<PresentationElementInstance>();
  PresentationElementInstance pe=new PresentationElementInstance(sec,newSection,PresentationElementEnum.SECTION,currentView.peek(),section.getTitle() != null ? section.getTitle() : ""String_Node_Str"",parentSec,secChildren);
  pe.setLoopElement(loopElement);
  newpe.peek().add(pe);
  currentSection.push(pe);
  newpe.push(secChildren);
  processCurrentInstances(sec,currentView.peek());
  addManualInstances(false);
}","protected void startSection(DBSection section){
  JSONObject newSection=new JSONObject();
  newSection.put(""String_Node_Str"",""String_Node_Str"");
  newSection.put(""String_Node_Str"",section.getTitle());
  InstanceSpecification sec=null;
  Element loopElement=null;
  if (section.getDgElement() instanceof Section) {
    if (((Section)section.getDgElement()).getLoopElement() != null) {
      loopElement=((Section)section.getDgElement()).getLoopElement();
      sec=findInstanceForSection(loopElement);
    }
 else {
      sec=findInstanceForSection(null);
    }
  }
  if (sec != null) {
    currentInstanceList.peek().remove(sec);
    currentSectionInstances.peek().remove(sec);
  }
  PresentationElementInstance parentSec=currentSection.isEmpty() ? null : currentSection.peek();
  List<PresentationElementInstance> secChildren=new ArrayList<PresentationElementInstance>();
  PresentationElementInstance pe=new PresentationElementInstance(sec,newSection,PresentationElementEnum.SECTION,currentView.peek(),section.getTitle() != null ? section.getTitle() : ""String_Node_Str"",parentSec,secChildren);
  pe.setLoopElement(loopElement);
  newpe.peek().add(pe);
  currentSection.push(pe);
  newpe.push(secChildren);
  processCurrentInstances(sec,currentView.peek());
  addManualInstances(false);
}",0.9408759124087592
88454,"@SuppressWarnings(""String_Node_Str"") public void startView(Element e){
  JSONObject view=new JSONObject();
  Project project=Project.getProject(e);
  if (StereotypesHelper.hasStereotypeOrDerived(e,Utils.getProductStereotype(project))) {
    view.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    view.put(""String_Node_Str"",""String_Node_Str"");
  }
  String id=Converters.getElementToIdConverter().apply(e);
  view.put(MDKConstants.ID_KEY,id);
  views.put(id,view);
  Set<String> viewE=new HashSet<String>();
  viewElements.push(viewE);
  JSONArray contains=new JSONArray();
  view.put(""String_Node_Str"",contains);
  this.curContains.push(contains);
  sibviews.peek().add(Converters.getElementToIdConverter().apply(e));
  sibviewsElements.peek().add(e);
  JSONArray childViews=new JSONArray();
  sibviews.push(childViews);
  sibviewsElements.push(new ArrayList<Element>());
  currentView.push(e);
  List<PresentationElementInstance> viewChildren=new ArrayList<PresentationElementInstance>();
  newpe.push(viewChildren);
  view2pe.put(e,viewChildren);
  view2peOld.put(e,new ArrayList<PresentationElementInstance>());
  processCurrentInstances(e,e);
  if (currentInstanceList.peek().isEmpty()) {
    PresentationElementInstance hack=new PresentationElementInstance(null,null,null,e,null,null,null);
    hack.setManual(true);
    hack.setViewDocHack(true);
    newpe.peek().add(hack);
  }
  addManualInstances(false);
}","@SuppressWarnings(""String_Node_Str"") public void startView(Element e){
  Set<String> viewE=new HashSet<>();
  viewElements.push(viewE);
  sibviewsElements.peek().add(e);
  sibviewsElements.push(new ArrayList<>());
  currentView.push(e);
  List<PresentationElementInstance> viewChildren=new ArrayList<>();
  newpe.push(viewChildren);
  view2pe.put(e,viewChildren);
  view2peOld.put(e,new ArrayList<>());
  processCurrentInstances(e,e);
  if (currentInstanceList.peek().isEmpty()) {
    PresentationElementInstance hack=new PresentationElementInstance(null,null,null,e,null,null,null);
    hack.setManual(true);
    hack.setViewDocHack(true);
    newpe.peek().add(hack);
  }
  addManualInstances(false);
}",0.6528692380056444
88455,"@SuppressWarnings(""String_Node_Str"") public void endView(Element e){
  JSONArray viewEs=new JSONArray();
  viewEs.addAll(viewElements.pop());
  JSONObject view=(JSONObject)views.get(Converters.getElementToIdConverter().apply(e));
  view.put(""String_Node_Str"",viewEs);
  view.put(""String_Node_Str"",viewEs);
  if (recurse && !doc) {
    view.put(""String_Node_Str"",sibviews.peek());
  }
  view2view.put(Converters.getElementToIdConverter().apply(e),sibviews.pop());
  view2viewElements.put(e,sibviewsElements.pop());
  this.curContains.pop();
  view2elements.put(e,viewEs);
  addManualInstances(true);
  processUnusedInstances(e);
  List<PresentationElementInstance> pes=newpe.pop();
  if (pes.isEmpty()) {
    PresentationElementInstance hack=new PresentationElementInstance(null,null,null,e,null,null,null);
    hack.setManual(true);
    hack.setViewDocHack(true);
    pes.add(hack);
  }
  currentView.pop();
  currentManualInstances.pop();
  currentImageInstances.pop();
  currentSectionInstances.pop();
  currentParaInstances.pop();
  currentListInstances.pop();
  currentTableInstances.pop();
  currentInstanceList.pop();
  currentUnusedInstances.pop();
}","@SuppressWarnings(""String_Node_Str"") public void endView(Element e){
  JSONArray viewEs=new JSONArray();
  viewEs.addAll(viewElements.pop());
  view2viewElements.put(e,sibviewsElements.pop());
  view2elements.put(e,viewEs);
  addManualInstances(true);
  processUnusedInstances(e);
  List<PresentationElementInstance> pes=newpe.pop();
  if (pes.isEmpty()) {
    PresentationElementInstance hack=new PresentationElementInstance(null,null,null,e,null,null,null);
    hack.setManual(true);
    hack.setViewDocHack(true);
    pes.add(hack);
  }
  currentView.pop();
  currentManualInstances.pop();
  currentImageInstances.pop();
  currentSectionInstances.pop();
  currentParaInstances.pop();
  currentListInstances.pop();
  currentTableInstances.pop();
  currentInstanceList.pop();
  currentUnusedInstances.pop();
}",0.7615658362989324
88456,"protected void endSection(DBSection section){
  this.curContains.pop();
  addManualInstances(true);
  processUnusedInstances(currentView.peek());
  newpe.pop();
  currentSection.pop();
  currentManualInstances.pop();
  currentImageInstances.pop();
  currentSectionInstances.pop();
  currentParaInstances.pop();
  currentListInstances.pop();
  currentTableInstances.pop();
  currentInstanceList.pop();
  currentUnusedInstances.pop();
}","protected void endSection(DBSection section){
  addManualInstances(true);
  processUnusedInstances(currentView.peek());
  newpe.pop();
  currentSection.pop();
  currentManualInstances.pop();
  currentImageInstances.pop();
  currentSectionInstances.pop();
  currentParaInstances.pop();
  currentListInstances.pop();
  currentTableInstances.pop();
  currentInstanceList.pop();
  currentUnusedInstances.pop();
}",0.9691211401425178
88457,"@SuppressWarnings(""String_Node_Str"") @Override public void visit(DBTable table){
  DBAlfrescoTableVisitor v=new DBAlfrescoTableVisitor(this.recurse);
  table.accept(v);
  curContains.peek().add(v.getObject());
  viewElements.peek().addAll(v.getTableElements());
  elementSet.addAll(v.getElementSet());
  if (!main) {
    return;
  }
  InstanceSpecification i=null;
  if (!currentTableInstances.peek().isEmpty()) {
    i=currentTableInstances.peek().remove(0);
    currentInstanceList.peek().remove(0);
  }
  PresentationElementInstance parentSec=currentSection.isEmpty() ? null : currentSection.peek();
  PresentationElementInstance ipe=new PresentationElementInstance(i,v.getObject(),PresentationElementEnum.TABLE,currentView.peek(),table.getTitle() != null ? table.getTitle() : ""String_Node_Str"",parentSec,null);
  newpe.peek().add(ipe);
}","@SuppressWarnings(""String_Node_Str"") @Override public void visit(DBTable table){
  DBAlfrescoTableVisitor v=new DBAlfrescoTableVisitor(this.recurse);
  table.accept(v);
  viewElements.peek().addAll(v.getTableElements());
  elementSet.addAll(v.getElementSet());
  if (!main) {
    return;
  }
  InstanceSpecification i=null;
  if (!currentTableInstances.peek().isEmpty()) {
    i=currentTableInstances.peek().remove(0);
    currentInstanceList.peek().remove(0);
  }
  PresentationElementInstance parentSec=currentSection.isEmpty() ? null : currentSection.peek();
  PresentationElementInstance ipe=new PresentationElementInstance(i,v.getObject(),PresentationElementEnum.TABLE,currentView.peek(),table.getTitle() != null ? table.getTitle() : ""String_Node_Str"",parentSec,null);
  newpe.peek().add(ipe);
}",0.9750152346130408
88458,"private void addElementActions(ActionsManager manager,Element e,List<Element> es){
  Project project=Project.getProject(e);
  if (project == null && !es.isEmpty()) {
    project=Project.getProject(es.iterator().next());
  }
  if (project == null) {
    return;
  }
  Stereotype sysmlview=Utils.getViewStereotype(project);
  Stereotype sysmlviewpoint=Utils.getViewpointStereotype(project);
  Stereotype documentView=Utils.getProductStereotype(project);
  Stereotype classview=Utils.getViewClassStereotype(project);
  Stereotype elementGroupStereotype=Utils.getElementGroupStereotype(project);
  ActionsCategory refactorWithIDActionCat=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
  if (e instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Class & !(e instanceof com.nomagic.uml2.ext.magicdraw.components.mdbasiccomponents.Component)) {
    if (manager.getActionFor(ClassToComponentRefactorWithIDAction.DEFAULT_ID) == null) {
      refactorWithIDActionCat.addAction(new ClassToComponentRefactorWithIDAction(es));
    }
  }
  if (e instanceof com.nomagic.uml2.ext.magicdraw.components.mdbasiccomponents.Component) {
    if (manager.getActionFor(ComponentToClassRefactorWithIDAction.DEFAULT_ID) == null) {
      refactorWithIDActionCat.addAction(new ComponentToClassRefactorWithIDAction(es));
    }
  }
  ActionsCategory modelLoad=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
  if (!TicketUtils.isTicketSet(project)) {
    ActionsCategory login=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad);
    if (manager.getActionFor(MMSLoginAction.DEFAULT_ID) == null) {
      login.addAction(new MMSLoginAction());
    }
  }
  ActionsCategory models=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad);
  if (MDUtils.isDeveloperMode()) {
    if (e instanceof Model && manager.getActionFor(CommitProjectAction.DEFAULT_ID) == null) {
      models.addAction(new CommitProjectAction(project,false,true));
      models.addAction(new CommitProjectAction(project,true,true));
    }
  }
  if (manager.getActionFor(ValidateElementRecursivelyAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateElementRecursivelyAction(es,""String_Node_Str""));
  }
  if (manager.getActionFor(ValidateElementDepthAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateElementDepthAction(es,""String_Node_Str""));
  }
  if (manager.getActionFor(ValidateElementAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateElementAction(es,""String_Node_Str""));
  }
  ActionsStateUpdater.updateActionsState();
  if (StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.validationScriptStereotype)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    UserScript us=new UserScript();
    us.setDgElement(e);
    List<Element> targets=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.queriesStereotype,1,false,1);
    targets.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.oldQueriesStereotype,1,false,1));
    us.setTargets(Utils2.asList(targets,Object.class));
    if (manager.getActionFor(RunUserValidationScriptAction.DEFAULT_ID) == null) {
      c.addAction(new RunUserValidationScriptAction(us,true));
    }
  }
 else   if (StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.userScriptStereotype)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    UserScript us=new UserScript();
    us.setDgElement(e);
    List<Element> targets=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.queriesStereotype,1,false,1);
    targets.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.oldQueriesStereotype,1,false,1));
    us.setTargets(Utils2.asList(targets,Object.class));
    if (manager.getActionFor(RunUserScriptAction.DEFAULT_ID) == null) {
      c.addAction(new RunUserScriptAction(us,true));
    }
  }
  boolean canShowGeneration=true;
  for (  Element element : es) {
    if (!StereotypesHelper.hasStereotypeOrDerived(element,sysmlview) && !StereotypesHelper.hasStereotypeOrDerived(element,elementGroupStereotype)) {
      canShowGeneration=false;
      break;
    }
  }
  if (canShowGeneration) {
    if (classview != null && es.size() == 1 && StereotypesHelper.hasStereotypeOrDerived(e,sysmlview)) {
      Boolean collectActions=(Boolean)StereotypesHelper.getStereotypePropertyFirst(e,classview,""String_Node_Str"");
      if (collectActions != null && collectActions) {
        ActionsCategory category=(ActionsCategory)manager.getActionFor(""String_Node_Str"");
        if (category == null) {
          category=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
          category.setNested(true);
          boolean added=addViewQueryActions(manager,category,(NamedElement)e);
          if (added) {
            manager.addCategory(0,category);
          }
        }
      }
    }
    ActionsCategory modelLoad2=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    ActionsCategory viewInstances=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad2);
    NMAction action=manager.getActionFor(GenerateViewPresentationAction.DEFAULT_ID);
    if (action == null) {
      viewInstances.addAction(new GenerateViewPresentationAction(new LinkedHashSet<>(es),false));
    }
    action=manager.getActionFor(GenerateViewPresentationAction.RECURSE_DEFAULT_ID);
    if (action == null) {
      viewInstances.addAction(new GenerateViewPresentationAction(new LinkedHashSet<>(es),true));
    }
    String url;
    if (StereotypesHelper.hasStereotype(project.getPrimaryModel(),""String_Node_Str"") && (url=(String)StereotypesHelper.getStereotypePropertyFirst(project.getPrimaryModel(),""String_Node_Str"",""String_Node_Str"")) != null && !url.isEmpty()) {
      ActionsCategory tracingCategory=manager.getCategory(""String_Node_Str"");
      if (tracingCategory != null) {
        action=manager.getActionFor(MMSViewLinkAction.DEFAULT_ID);
        if (action == null) {
          tracingCategory.addAction(new MMSViewLinkAction(es));
        }
      }
    }
    ActionsStateUpdater.updateActionsState();
  }
  if ((e instanceof Activity && StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.documentStereotype)) || StereotypesHelper.hasStereotypeOrDerived(e,sysmlview)) {
    NMAction act=null;
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    act=manager.getActionFor(ValidateDocument3Action.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ValidateDocument3Action(e));
    }
    act=manager.getActionFor(ValidateViewStructureAction.DEFAULT_ID);
    if (act == null && e instanceof Classifier) {
      c.addAction(new ValidateViewStructureAction(e));
    }
    act=manager.getActionFor(ViewDocument3Action.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ViewDocument3Action(e));
    }
    act=manager.getActionFor(GenerateDocumentAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new GenerateDocumentAction(e));
    }
    if (StereotypesHelper.hasStereotypeOrDerived(e,documentView)) {
      if (e instanceof Package) {
        act=manager.getActionFor(NumberDependencyAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new NumberDependencyAction(e));
        }
        act=manager.getActionFor(MigrateToClassViewAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new MigrateToClassViewAction(e));
        }
      }
      if (e instanceof Class) {
        act=manager.getActionFor(NumberAssociationAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new NumberAssociationAction((Class)e));
        }
      }
    }
  }
  if (StereotypesHelper.hasStereotypeOrDerived(e,sysmlviewpoint)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    NMAction act=manager.getActionFor(InstanceViewpointAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new InstanceViewpointAction(e));
    }
  }
  ArrayList<Property> selectedProperties=new ArrayList<Property>();
  for (  Element el : es) {
    if (el instanceof Property) {
      selectedProperties.add((Property)el);
    }
  }
  if (!(selectedProperties.isEmpty())) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    NMAction act=manager.getActionFor(CreateRestrictedValueAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new CreateRestrictedValueAction(selectedProperties));
    }
  }
}","private void addElementActions(ActionsManager manager,Element e,List<Element> es){
  Project project=Project.getProject(e);
  if (project == null && !es.isEmpty()) {
    project=Project.getProject(es.iterator().next());
  }
  if (project == null) {
    return;
  }
  Stereotype sysmlview=Utils.getViewStereotype(project);
  Stereotype sysmlviewpoint=Utils.getViewpointStereotype(project);
  Stereotype documentView=Utils.getProductStereotype(project);
  Stereotype classview=Utils.getViewClassStereotype(project);
  Stereotype elementGroupStereotype=Utils.getElementGroupStereotype(project);
  ActionsCategory refactorWithIDActionCat=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
  if (e instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Class & !(e instanceof com.nomagic.uml2.ext.magicdraw.components.mdbasiccomponents.Component)) {
    if (manager.getActionFor(ClassToComponentRefactorWithIDAction.DEFAULT_ID) == null) {
      refactorWithIDActionCat.addAction(new ClassToComponentRefactorWithIDAction(es));
    }
  }
  if (e instanceof com.nomagic.uml2.ext.magicdraw.components.mdbasiccomponents.Component) {
    if (manager.getActionFor(ComponentToClassRefactorWithIDAction.DEFAULT_ID) == null) {
      refactorWithIDActionCat.addAction(new ComponentToClassRefactorWithIDAction(es));
    }
  }
  ActionsCategory modelLoad=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
  if (!TicketUtils.isTicketSet(project)) {
    ActionsCategory login=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad);
    if (manager.getActionFor(MMSLoginAction.DEFAULT_ID) == null) {
      login.addAction(new MMSLoginAction());
    }
  }
  ActionsCategory models=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad);
  if (MDUtils.isDeveloperMode()) {
    if (e instanceof Model) {
      if (manager.getActionFor(CommitOrgAction.DEFAULT_ID) == null) {
        models.addAction(new CommitOrgAction(project,true));
      }
      if (manager.getActionFor(CommitProjectAction.DEFAULT_ID) == null) {
        models.addAction(new CommitProjectAction(project,false,true));
        models.addAction(new CommitProjectAction(project,true,true));
      }
    }
  }
  if (manager.getActionFor(ValidateElementRecursivelyAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateElementRecursivelyAction(es,""String_Node_Str""));
  }
  if (manager.getActionFor(ValidateElementDepthAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateElementDepthAction(es,""String_Node_Str""));
  }
  if (manager.getActionFor(ValidateElementAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateElementAction(es,""String_Node_Str""));
  }
  ActionsStateUpdater.updateActionsState();
  if (StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.validationScriptStereotype)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    UserScript us=new UserScript();
    us.setDgElement(e);
    List<Element> targets=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.queriesStereotype,1,false,1);
    targets.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.oldQueriesStereotype,1,false,1));
    us.setTargets(Utils2.asList(targets,Object.class));
    if (manager.getActionFor(RunUserValidationScriptAction.DEFAULT_ID) == null) {
      c.addAction(new RunUserValidationScriptAction(us,true));
    }
  }
 else   if (StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.userScriptStereotype)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    UserScript us=new UserScript();
    us.setDgElement(e);
    List<Element> targets=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.queriesStereotype,1,false,1);
    targets.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.oldQueriesStereotype,1,false,1));
    us.setTargets(Utils2.asList(targets,Object.class));
    if (manager.getActionFor(RunUserScriptAction.DEFAULT_ID) == null) {
      c.addAction(new RunUserScriptAction(us,true));
    }
  }
  boolean canShowGeneration=true;
  for (  Element element : es) {
    if (!StereotypesHelper.hasStereotypeOrDerived(element,sysmlview) && !StereotypesHelper.hasStereotypeOrDerived(element,elementGroupStereotype)) {
      canShowGeneration=false;
      break;
    }
  }
  if (canShowGeneration) {
    if (classview != null && es.size() == 1 && StereotypesHelper.hasStereotypeOrDerived(e,sysmlview)) {
      Boolean collectActions=(Boolean)StereotypesHelper.getStereotypePropertyFirst(e,classview,""String_Node_Str"");
      if (collectActions != null && collectActions) {
        ActionsCategory category=(ActionsCategory)manager.getActionFor(""String_Node_Str"");
        if (category == null) {
          category=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
          category.setNested(true);
          boolean added=addViewQueryActions(manager,category,(NamedElement)e);
          if (added) {
            manager.addCategory(0,category);
          }
        }
      }
    }
    ActionsCategory modelLoad2=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    ActionsCategory viewInstances=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad2);
    NMAction action=manager.getActionFor(GenerateViewPresentationAction.DEFAULT_ID);
    if (action == null) {
      viewInstances.addAction(new GenerateViewPresentationAction(new LinkedHashSet<>(es),false));
    }
    action=manager.getActionFor(GenerateViewPresentationAction.RECURSE_DEFAULT_ID);
    if (action == null) {
      viewInstances.addAction(new GenerateViewPresentationAction(new LinkedHashSet<>(es),true));
    }
    String url;
    if (StereotypesHelper.hasStereotype(project.getPrimaryModel(),""String_Node_Str"") && (url=(String)StereotypesHelper.getStereotypePropertyFirst(project.getPrimaryModel(),""String_Node_Str"",""String_Node_Str"")) != null && !url.isEmpty()) {
      ActionsCategory tracingCategory=manager.getCategory(""String_Node_Str"");
      if (tracingCategory != null) {
        action=manager.getActionFor(MMSViewLinkAction.DEFAULT_ID);
        if (action == null) {
          tracingCategory.addAction(new MMSViewLinkAction(es));
        }
      }
    }
    ActionsStateUpdater.updateActionsState();
  }
  if ((e instanceof Activity && StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.documentStereotype)) || StereotypesHelper.hasStereotypeOrDerived(e,sysmlview)) {
    NMAction act=null;
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    act=manager.getActionFor(ValidateDocument3Action.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ValidateDocument3Action(e));
    }
    act=manager.getActionFor(ValidateViewStructureAction.DEFAULT_ID);
    if (act == null && e instanceof Classifier) {
      c.addAction(new ValidateViewStructureAction(e));
    }
    act=manager.getActionFor(ViewDocument3Action.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ViewDocument3Action(e));
    }
    act=manager.getActionFor(GenerateDocumentAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new GenerateDocumentAction(e));
    }
    if (StereotypesHelper.hasStereotypeOrDerived(e,documentView)) {
      if (e instanceof Package) {
        act=manager.getActionFor(NumberDependencyAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new NumberDependencyAction(e));
        }
        act=manager.getActionFor(MigrateToClassViewAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new MigrateToClassViewAction(e));
        }
      }
      if (e instanceof Class) {
        act=manager.getActionFor(NumberAssociationAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new NumberAssociationAction((Class)e));
        }
      }
    }
  }
  if (StereotypesHelper.hasStereotypeOrDerived(e,sysmlviewpoint)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    NMAction act=manager.getActionFor(InstanceViewpointAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new InstanceViewpointAction(e));
    }
  }
  ArrayList<Property> selectedProperties=new ArrayList<Property>();
  for (  Element el : es) {
    if (el instanceof Property) {
      selectedProperties.add((Property)el);
    }
  }
  if (!(selectedProperties.isEmpty())) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    NMAction act=manager.getActionFor(CreateRestrictedValueAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new CreateRestrictedValueAction(selectedProperties));
    }
  }
}",0.989349938893092
88459,"public static String getMmsOrg(Project project) throws IOException, URISyntaxException, ServerException {
  URIBuilder uriBuilder=getServiceProjectsUri(project);
  File responseFile=sendMMSRequest(project,buildRequest(HttpRequestType.GET,uriBuilder));
  try (JsonParser responseParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
    ObjectNode response=JacksonUtils.parseJsonObject(responseParser);
    JsonNode arrayNode;
    if (((arrayNode=response.get(""String_Node_Str"")) != null) && arrayNode.isArray()) {
      JsonNode value;
      for (      JsonNode projectNode : arrayNode) {
        if (((value=projectNode.get(MDKConstants.ID_KEY)) != null) && value.isTextual() && value.asText().equals(Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()))&& ((value=projectNode.get(MDKConstants.ORG_ID_KEY)) != null)&& value.isTextual()&& !value.asText().isEmpty()) {
          return value.asText();
        }
      }
    }
  }
   return null;
}","public static String getMmsOrg(Project project) throws IOException, URISyntaxException, ServerException {
  URIBuilder uriBuilder=getServiceProjectsUri(project);
  File responseFile=sendMMSRequest(project,buildRequest(HttpRequestType.GET,uriBuilder));
  try (JsonParser responseParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
    ObjectNode response=JacksonUtils.parseJsonObject(responseParser);
    JsonNode arrayNode;
    if (((arrayNode=response.get(""String_Node_Str"")) != null) && arrayNode.isArray()) {
      JsonNode projectId, orgId;
      for (      JsonNode projectNode : arrayNode) {
        if (((projectId=projectNode.get(MDKConstants.ID_KEY)) != null) && projectId.isTextual() && projectId.asText().equals(Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()))&& ((orgId=projectNode.get(MDKConstants.ORG_ID_KEY)) != null)&& orgId.isTextual()&& !orgId.asText().isEmpty()) {
          return orgId.asText();
        }
      }
    }
  }
   return null;
}",0.8428499242041435
88460,"public String commitAction(){
  URIBuilder requestUri=MMSUtils.getServiceOrgsUri(project);
  if (requestUri == null) {
    return null;
  }
  JFrame selectionDialog=new JFrame();
  String org=JOptionPane.showInputDialog(selectionDialog,""String_Node_Str"");
  if (org == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  if (org.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  File responseFile;
  try {
    responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri));
    try (JsonParser responseParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
      ObjectNode response=JacksonUtils.parseJsonObject(responseParser);
      JsonNode arrayNode;
      if (response != null && (arrayNode=response.get(""String_Node_Str"")) != null && arrayNode.isArray()) {
        for (        JsonNode orgNode : arrayNode) {
          JsonNode value;
          if ((value=orgNode.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
            if (value.asText().equals(org)) {
              Application.getInstance().getGUILog().log(""String_Node_Str"");
              return org;
            }
          }
        }
      }
    }
   }
 catch (  IOException|URISyntaxException|ServerException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return null;
  }
  LinkedList<ObjectNode> orgs=new LinkedList<>();
  ObjectNode orgNode=JacksonUtils.getObjectMapper().createObjectNode();
  orgNode.put(MDKConstants.ID_KEY,org);
  orgNode.put(MDKConstants.NAME_KEY,org);
  orgs.add(orgNode);
  try {
    File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,orgs,MMSUtils.JsonBlobType.ORG);
    responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON));
  }
 catch (  IOException|ServerException|URISyntaxException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return null;
  }
  return org;
}","public String commitAction(){
  URIBuilder requestUri=MMSUtils.getServiceOrgsUri(project);
  if (requestUri == null) {
    return null;
  }
  JFrame selectionDialog=new JFrame();
  String org=JOptionPane.showInputDialog(selectionDialog,""String_Node_Str"");
  if (org == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  if (org.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  String orgId=org.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (orgId.isEmpty() || orgId.matches(""String_Node_Str"")) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + org + ""String_Node_Str"");
    return null;
  }
  File responseFile;
  try {
    responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri));
    try (JsonParser responseParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
      ObjectNode response=JacksonUtils.parseJsonObject(responseParser);
      JsonNode arrayNode;
      if (response != null && (arrayNode=response.get(""String_Node_Str"")) != null && arrayNode.isArray()) {
        for (        JsonNode orgNode : arrayNode) {
          JsonNode name, id;
          if ((name=orgNode.get(MDKConstants.NAME_KEY)) != null && name.isTextual() && (id=orgNode.get(MDKConstants.ID_KEY)) != null && id.isTextual()) {
            if (name.asText().equals(org)) {
              Application.getInstance().getGUILog().log(""String_Node_Str"" + org + ""String_Node_Str"");
              return id.asText();
            }
            if (id.asText().equals(orgId)) {
              Application.getInstance().getGUILog().log(""String_Node_Str"" + orgId + ""String_Node_Str"");
              return id.asText();
            }
          }
        }
      }
    }
   }
 catch (  IOException|URISyntaxException|ServerException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return null;
  }
  LinkedList<ObjectNode> orgs=new LinkedList<>();
  ObjectNode orgNode=JacksonUtils.getObjectMapper().createObjectNode();
  orgNode.put(MDKConstants.ID_KEY,orgId);
  orgNode.put(MDKConstants.NAME_KEY,org);
  orgs.add(orgNode);
  try {
    File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,orgs,MMSUtils.JsonBlobType.ORG);
    responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON));
  }
 catch (  IOException|ServerException|URISyntaxException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return null;
  }
  return orgId;
}",0.8599439775910365
88461,"public CommitProjectAction(Project project,boolean shouldCommitModel,boolean isDeveloperAction){
  super(shouldCommitModel ? COMMIT_MODEL_DEFAULT_ID : DEFAULT_ID,""String_Node_Str"" + (shouldCommitModel ? ""String_Node_Str"" : ""String_Node_Str"") + (isDeveloperAction ? ""String_Node_Str"" : ""String_Node_Str""),null,null);
  this.project=project;
  this.shouldCommitModel=shouldCommitModel;
}","public CommitProjectAction(Project project,boolean shouldCommitModel,boolean isDeveloperAction){
  super(shouldCommitModel ? COMMIT_MODEL_DEFAULT_ID : DEFAULT_ID,(isDeveloperAction ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (shouldCommitModel ? ""String_Node_Str"" : ""String_Node_Str""),null,null);
  this.project=project;
  this.shouldCommitModel=shouldCommitModel;
}",0.7948051948051948
88462,"public String commitAction(){
  String org=null;
  URIBuilder requestUri=MMSUtils.getServiceOrgsUri(project);
  if (requestUri == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  try {
    org=MMSUtils.getMmsOrg(project);
  }
 catch (  IOException|URISyntaxException|ServerException e1) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
    e1.printStackTrace();
    return null;
  }
  ObjectNode response;
  if (org == null || org.isEmpty()) {
    try {
      File responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri));
      try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
        response=JacksonUtils.parseJsonObject(jsonParser);
      }
     }
 catch (    IOException|URISyntaxException|ServerException e1) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
      e1.printStackTrace();
      return null;
    }
    ArrayList<String> mmsOrgsList=new ArrayList<>();
    if (response != null) {
      JsonNode arrayNode;
      if ((arrayNode=response.get(""String_Node_Str"")) != null && arrayNode.isArray()) {
        for (        JsonNode orgNode : arrayNode) {
          JsonNode value;
          if ((value=orgNode.get(MDKConstants.NAME_KEY)) != null && value.isTextual()) {
            mmsOrgsList.add(value.asText());
          }
        }
      }
    }
    String[] mmsOrgs=mmsOrgsList.toArray(new String[mmsOrgsList.size()]);
    if (mmsOrgs.length > 0) {
      JFrame selectionDialog=new JFrame();
      org=(String)JOptionPane.showInputDialog(selectionDialog,""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE,null,mmsOrgs,mmsOrgs[0]);
    }
 else {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    if ((org == null || org.isEmpty()) && MDUtils.isDeveloperMode()) {
      org=new CommitOrgAction(project).commitAction();
    }
  }
  if (org == null || org.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + org+ ""String_Node_Str"");
  Collection<ObjectNode> projects=new LinkedList<>();
  projects.add(MMSUtils.getProjectObjectNode(project));
  try {
    File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,projects,MMSUtils.JsonBlobType.PROJECT);
    File responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON));
    try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
      response=JacksonUtils.parseJsonObject(jsonParser);
    }
     if (response != null) {
      Thread.sleep(5000);
    }
  }
 catch (  IOException|URISyntaxException|ServerException|InterruptedException e1) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
    e1.printStackTrace();
    return null;
  }
  if (shouldCommitModel) {
    RunnableWithProgress temp=new ManualSyncActionRunner<>(CommitClientElementAction.class,Collections.singletonList(project.getPrimaryModel()),project,-1);
    ProgressStatusRunner.runWithProgressStatus(temp,""String_Node_Str"",true,0);
  }
  return Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
}","public String commitAction(){
  String orgId=null;
  URIBuilder requestUri=MMSUtils.getServiceOrgsUri(project);
  if (requestUri == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  try {
    orgId=MMSUtils.getMmsOrg(project);
  }
 catch (  IOException|URISyntaxException|ServerException e1) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
    e1.printStackTrace();
    return null;
  }
  ObjectNode response;
  if (orgId == null || orgId.isEmpty()) {
    try {
      File responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri));
      try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
        response=JacksonUtils.parseJsonObject(jsonParser);
      }
     }
 catch (    IOException|URISyntaxException|ServerException e1) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
      e1.printStackTrace();
      return null;
    }
    HashMap<String,String> mmsOrgsMap=new HashMap<>();
    mmsOrgsMap.put(""String_Node_Str"",""String_Node_Str"");
    if (response != null) {
      JsonNode arrayNode;
      if ((arrayNode=response.get(""String_Node_Str"")) != null && arrayNode.isArray()) {
        for (        JsonNode orgNode : arrayNode) {
          JsonNode name, id;
          if ((name=orgNode.get(MDKConstants.NAME_KEY)) != null && name.isTextual() && !name.asText().isEmpty() && (id=orgNode.get(MDKConstants.ID_KEY)) != null && id.isTextual() && !id.asText().isEmpty()) {
            mmsOrgsMap.put(name.asText(),id.asText());
          }
        }
      }
    }
    String[] mmsOrgs=mmsOrgsMap.keySet().toArray(new String[mmsOrgsMap.keySet().size()]);
    Arrays.sort(mmsOrgs);
    JFrame selectionDialog=new JFrame();
    String selection=(String)JOptionPane.showInputDialog(selectionDialog,""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE,null,mmsOrgs,mmsOrgs[0]);
    if (selection != null) {
      orgId=mmsOrgsMap.get(selection);
      if (orgId.equals(""String_Node_Str"")) {
        orgId=new CommitOrgAction(project).commitAction();
      }
    }
  }
  if (orgId == null || orgId.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + orgId+ ""String_Node_Str"");
  Collection<ObjectNode> projects=new LinkedList<>();
  projects.add(MMSUtils.getProjectObjectNode(project));
  try {
    File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,projects,MMSUtils.JsonBlobType.PROJECT);
    File responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON));
    try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
      response=JacksonUtils.parseJsonObject(jsonParser);
    }
     if (response != null) {
      Thread.sleep(5000);
    }
  }
 catch (  IOException|URISyntaxException|ServerException|InterruptedException e1) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
    e1.printStackTrace();
    return null;
  }
  if (shouldCommitModel) {
    RunnableWithProgress temp=new ManualSyncActionRunner<>(CommitClientElementAction.class,Collections.singletonList(project.getPrimaryModel()),project,-1);
    ProgressStatusRunner.runWithProgressStatus(temp,""String_Node_Str"",true,0);
  }
  return Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
}",0.8604917095483133
88463,"@Override public void run(ProgressStatus progressStatus){
  if (progressStatus == null) {
    progressStatus=EmptyProgressStatus.getDefault();
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setIndeterminate(true);
  if (clientElements == null) {
    clientElements=new LinkedList<>();
  }
  Map<String,Pair<Element,ObjectNode>> clientElementMap=clientElements.stream().collect(Collectors.toMap(pair -> Converters.getElementToIdConverter().apply(pair.getKey()),Function.identity()));
  Set<String> processedElementIds=new HashSet<>();
  JsonToken current=null;
  for (  File responseFile : serverElementFiles) {
    try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
      current=(jsonParser.getCurrentToken() == null ? jsonParser.nextToken() : jsonParser.getCurrentToken());
      if (current != JsonToken.START_OBJECT) {
        throw new IOException(""String_Node_Str"");
      }
      while (current != JsonToken.END_OBJECT) {
        current=jsonParser.nextToken();
        String keyName;
        if (current != null && (keyName=jsonParser.getCurrentName()) != null && keyName.equals(""String_Node_Str"") && (current=jsonParser.nextToken()) == JsonToken.START_ARRAY) {
          current=jsonParser.nextToken();
          JsonNode value;
          while (current != JsonToken.END_ARRAY) {
            if (current == JsonToken.START_OBJECT) {
              String id;
              ObjectNode currentServerElement=JacksonUtils.parseJsonObject(jsonParser);
              if ((value=currentServerElement.get(MDKConstants.ID_KEY)) != null && value.isTextual() && !processedElementIds.contains(id=value.asText())) {
                processedElementIds.add(id);
                Pair<Element,ObjectNode> currentClientElement=clientElementMap.remove(id);
                if (currentClientElement == null) {
                  addMissingInClientViolation(currentServerElement);
                }
 else {
                  addElementEquivalenceViolation(currentClientElement,currentServerElement);
                }
              }
            }
          }
        }
      }
    }
 catch (    IOException e) {
    }
  }
  if (serverElements == null) {
    serverElements=new LinkedList<>();
  }
  Map<String,ObjectNode> serverElementMap=serverElements.stream().filter(json -> json.has(MDKConstants.ID_KEY) && json.get(MDKConstants.ID_KEY).isTextual()).filter(json -> !processedElementIds.contains(json.get(MDKConstants.ID_KEY).asText())).collect(Collectors.toMap(json -> json.get(MDKConstants.ID_KEY).asText(),Function.identity()));
  LinkedHashSet<String> elementKeySet=new LinkedHashSet<>();
  elementKeySet.addAll(clientElementMap.keySet());
  elementKeySet.addAll(serverElementMap.keySet());
  progressStatus.setDescription(""String_Node_Str"" + elementKeySet.size() + ""String_Node_Str""+ (elementKeySet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  progressStatus.setIndeterminate(false);
  progressStatus.setMax(elementKeySet.size());
  progressStatus.setCurrent(0);
  for (  String id : elementKeySet) {
    Pair<Element,ObjectNode> clientElement=clientElementMap.get(id);
    ObjectNode serverElement=serverElementMap.get(id);
    if ((clientElement == null || clientElement.getKey() == null) && serverElement == null) {
      continue;
    }
 else     if (clientElement == null) {
      addMissingInClientViolation(serverElement);
    }
 else     if (serverElement == null) {
      addMissingOnMmsViolation(clientElement);
    }
 else {
      addElementEquivalenceViolation(clientElement,serverElement);
    }
    progressStatus.increase();
  }
  Application.getInstance().getGUILog().log(""String_Node_Str"" + validationSuite.getName() + ""String_Node_Str"");
  Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(missingInClientCount) + ""String_Node_Str""+ (missingInClientCount != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(missingOnMmsCount) + ""String_Node_Str""+ (missingOnMmsCount != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(notEquivalentCount) + ""String_Node_Str""+ (notEquivalentCount != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  Application.getInstance().getGUILog().log(""String_Node_Str"" + validationSuite.getName() + ""String_Node_Str"");
}","@Override public void run(ProgressStatus progressStatus){
  if (progressStatus == null) {
    progressStatus=EmptyProgressStatus.getDefault();
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setIndeterminate(true);
  if (clientElements == null) {
    clientElements=new LinkedList<>();
  }
  Map<String,Pair<Element,ObjectNode>> clientElementMap=clientElements.stream().collect(Collectors.toMap(pair -> Converters.getElementToIdConverter().apply(pair.getKey()),Function.identity(),(s,a) -> a));
  Set<String> processedElementIds=new HashSet<>();
  JsonToken current=null;
  for (  File responseFile : serverElementFiles) {
    try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
      current=(jsonParser.getCurrentToken() == null ? jsonParser.nextToken() : jsonParser.getCurrentToken());
      if (current != JsonToken.START_OBJECT) {
        throw new IOException(""String_Node_Str"");
      }
      while (current != JsonToken.END_OBJECT) {
        current=jsonParser.nextToken();
        String keyName;
        if (current != null && (keyName=jsonParser.getCurrentName()) != null && keyName.equals(""String_Node_Str"") && (current=jsonParser.nextToken()) == JsonToken.START_ARRAY) {
          current=jsonParser.nextToken();
          JsonNode value;
          while (current != JsonToken.END_ARRAY) {
            if (current == JsonToken.START_OBJECT) {
              String id;
              ObjectNode currentServerElement=JacksonUtils.parseJsonObject(jsonParser);
              if ((value=currentServerElement.get(MDKConstants.ID_KEY)) != null && value.isTextual() && !processedElementIds.contains(id=value.asText())) {
                processedElementIds.add(id);
                Pair<Element,ObjectNode> currentClientElement=clientElementMap.remove(id);
                if (currentClientElement == null) {
                  addMissingInClientViolation(currentServerElement);
                }
 else {
                  addElementEquivalenceViolation(currentClientElement,currentServerElement);
                }
              }
            }
          }
        }
      }
    }
 catch (    IOException e) {
    }
  }
  if (serverElements == null) {
    serverElements=new LinkedList<>();
  }
  Map<String,ObjectNode> serverElementMap=serverElements.stream().filter(json -> json.has(MDKConstants.ID_KEY) && json.get(MDKConstants.ID_KEY).isTextual()).filter(json -> !processedElementIds.contains(json.get(MDKConstants.ID_KEY).asText())).collect(Collectors.toMap(json -> json.get(MDKConstants.ID_KEY).asText(),Function.identity()));
  LinkedHashSet<String> elementKeySet=new LinkedHashSet<>();
  elementKeySet.addAll(clientElementMap.keySet());
  elementKeySet.addAll(serverElementMap.keySet());
  progressStatus.setDescription(""String_Node_Str"" + elementKeySet.size() + ""String_Node_Str""+ (elementKeySet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  progressStatus.setIndeterminate(false);
  progressStatus.setMax(elementKeySet.size());
  progressStatus.setCurrent(0);
  for (  String id : elementKeySet) {
    Pair<Element,ObjectNode> clientElement=clientElementMap.get(id);
    ObjectNode serverElement=serverElementMap.get(id);
    if ((clientElement == null || clientElement.getKey() == null) && serverElement == null) {
      continue;
    }
 else     if (clientElement == null) {
      addMissingInClientViolation(serverElement);
    }
 else     if (serverElement == null) {
      addMissingOnMmsViolation(clientElement);
    }
 else {
      addElementEquivalenceViolation(clientElement,serverElement);
    }
    progressStatus.increase();
  }
  Application.getInstance().getGUILog().log(""String_Node_Str"" + validationSuite.getName() + ""String_Node_Str"");
  Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(missingInClientCount) + ""String_Node_Str""+ (missingInClientCount != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(missingOnMmsCount) + ""String_Node_Str""+ (missingOnMmsCount != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(notEquivalentCount) + ""String_Node_Str""+ (notEquivalentCount != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  Application.getInstance().getGUILog().log(""String_Node_Str"" + validationSuite.getName() + ""String_Node_Str"");
}",0.9987843960658636
88464,"public static Collection<Element> getElementsById(Collection<String> elementIds,Project project,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  if (elementIds == null || elementIds.isEmpty()) {
    return null;
  }
  final ObjectNode requests=JacksonUtils.getObjectMapper().createObjectNode();
  File sendData=MMSUtils.createEntityFile(MDKHelper.class,ContentType.APPLICATION_JSON,elementIds,MMSUtils.JsonBlobType.ELEMENT_ID);
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  Utils.guilog(""String_Node_Str"" + elementIds.size() + ""String_Node_Str"");
  File responseFile;
  if (progressStatus != null) {
    responseFile=MMSUtils.sendCancellableMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri,sendData,ContentType.APPLICATION_JSON),progressStatus);
  }
 else {
    responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri,sendData,ContentType.APPLICATION_JSON));
  }
  LinkedList<Element> elementsList=new LinkedList<>();
  try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
    for (    ObjectNode elementJson : JacksonUtils.parseJsonResponseToObjectList(jsonParser,null)) {
      JsonNode value;
      if ((value=elementJson.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
        elementsList.add(Converters.getIdToElementConverter().apply(value.asText(),project));
      }
    }
  }
   return elementsList;
}","public static Collection<Element> getElementsById(Collection<String> elementIds,Project project,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  if (elementIds == null || elementIds.isEmpty()) {
    return null;
  }
  final ObjectNode requests=JacksonUtils.getObjectMapper().createObjectNode();
  File sendData=MMSUtils.createEntityFile(MDKHelper.class,ContentType.APPLICATION_JSON,elementIds,MMSUtils.JsonBlobType.ELEMENT_ID);
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  Utils.guilog(""String_Node_Str"" + elementIds.size() + ""String_Node_Str"");
  File responseFile;
  if (progressStatus != null) {
    responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri,sendData,ContentType.APPLICATION_JSON),progressStatus);
  }
 else {
    responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri,sendData,ContentType.APPLICATION_JSON));
  }
  LinkedList<Element> elementsList=new LinkedList<>();
  try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
    for (    ObjectNode elementJson : JacksonUtils.parseJsonResponseToObjectList(jsonParser,null)) {
      JsonNode value;
      if ((value=elementJson.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
        elementsList.add(Converters.getIdToElementConverter().apply(value.asText(),project));
      }
    }
  }
   return elementsList;
}",0.9964618848504342
88465,"public static String validateCredentials(Project project,String ticket) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return ""String_Node_Str"";
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + ticket);
  requestUri.clearParameters();
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpGet(requestDest);
  System.out.println(""String_Node_Str"" + requestUri.toString());
  String responseBody;
  int responseCode;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent()){
    responseCode=response.getStatusLine().getStatusCode();
    System.out.println(""String_Node_Str"" + requestUri.toString() + ""String_Node_Str""+ responseCode);
    responseBody=((inputStream != null) ? IOUtils.toString(inputStream) : ""String_Node_Str"");
  }
   try (ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(responseBody.getBytes())){
    if (!processResponse(responseCode,byteArrayInputStream,project)) {
      throw new ServerException(""String_Node_Str"",responseCode);
    }
  }
   ObjectNode responseJson=JacksonUtils.getObjectMapper().readValue(responseBody,ObjectNode.class);
  JsonNode value;
  if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
    return value.asText();
  }
  return ""String_Node_Str"";
}","public static String validateCredentials(Project project,String ticket,ProgressStatus progressStatus) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return ""String_Node_Str"";
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + ticket);
  requestUri.clearParameters();
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpGet(requestDest);
  ObjectNode responseJson=JacksonUtils.getObjectMapper().createObjectNode();
  sendMMSRequest(project,request,progressStatus,responseJson);
  JsonNode value;
  if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
    return value.asText();
  }
  return ""String_Node_Str"";
}",0.6101552664708351
88466,"/** 
 * @param elementIds     collection of elements to get mms data for
 * @param depth          depth to recurse through child elements. takes priority over recurse field
 * @param project        project to check
 * @param progressStatus progress status object, can be null
 * @return object node response
 * @throws ServerException
 * @throws IOException
 * @throws URISyntaxException
 */
public static File getElementsRecursively(Project project,Collection<String> elementIds,int depth,ProgressStatus progressStatus) throws ServerException, IOException, URISyntaxException {
  if (elementIds == null || elementIds.isEmpty()) {
    return null;
  }
  URIBuilder requestUri=getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  if (depth == -1 || depth > 0) {
    requestUri.setParameter(""String_Node_Str"",java.lang.Integer.toString(depth));
  }
  File sendData=createEntityFile(MMSUtils.class,ContentType.APPLICATION_JSON,elementIds,JsonBlobType.ELEMENT_ID);
  Utils.guilog(""String_Node_Str"" + elementIds.size() + ""String_Node_Str"");
  if (progressStatus != null) {
    return sendCancellableMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.PUT,requestUri,sendData,ContentType.APPLICATION_JSON),progressStatus);
  }
  return sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.PUT,requestUri,sendData,ContentType.APPLICATION_JSON));
}","/** 
 * @param elementIds     collection of elements to get mms data for
 * @param depth          depth to recurse through child elements. takes priority over recurse field
 * @param project        project to check
 * @param progressStatus progress status object, can be null
 * @return object node response
 * @throws ServerException
 * @throws IOException
 * @throws URISyntaxException
 */
public static File getElementsRecursively(Project project,Collection<String> elementIds,int depth,ProgressStatus progressStatus) throws ServerException, IOException, URISyntaxException {
  if (elementIds == null || elementIds.isEmpty()) {
    return null;
  }
  URIBuilder requestUri=getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  if (depth == -1 || depth > 0) {
    requestUri.setParameter(""String_Node_Str"",java.lang.Integer.toString(depth));
  }
  File sendData=createEntityFile(MMSUtils.class,ContentType.APPLICATION_JSON,elementIds,JsonBlobType.ELEMENT_ID);
  Utils.guilog(""String_Node_Str"" + elementIds.size() + ""String_Node_Str"");
  if (progressStatus != null) {
    return sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.PUT,requestUri,sendData,ContentType.APPLICATION_JSON),progressStatus);
  }
  return sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.PUT,requestUri,sendData,ContentType.APPLICATION_JSON));
}",0.9960923623445824
88467,"public static String sendCredentials(Project project,String username,String password) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return null;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"");
  requestUri.clearParameters();
  ObjectNode credentials=JacksonUtils.getObjectMapper().createObjectNode();
  credentials.put(""String_Node_Str"",username);
  credentials.put(""String_Node_Str"",password);
  ContentType contentType=ContentType.APPLICATION_JSON;
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpPost(requestDest);
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  request.addHeader(""String_Node_Str"",(Consts.UTF_8).displayName());
  String data=JacksonUtils.getObjectMapper().writeValueAsString(credentials);
  ((HttpEntityEnclosingRequest)request).setEntity(new StringEntity(data,ContentType.APPLICATION_JSON));
  System.out.println(""String_Node_Str"" + requestUri.toString());
  String responseBody;
  int responseCode;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent()){
    responseCode=response.getStatusLine().getStatusCode();
    System.out.println(""String_Node_Str"" + requestUri.toString() + ""String_Node_Str""+ responseCode);
    responseBody=((inputStream != null) ? IOUtils.toString(inputStream) : ""String_Node_Str"");
  }
   try (ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(responseBody.getBytes())){
    if (!processResponse(responseCode,byteArrayInputStream,project)) {
      throw new ServerException(""String_Node_Str"",responseCode);
    }
  }
   ObjectNode responseJson=JacksonUtils.getObjectMapper().readValue(responseBody,ObjectNode.class);
  JsonNode value;
  if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && (value=value.get(""String_Node_Str"")) != null && value.isTextual()) {
    return value.asText();
  }
  return null;
}","public static String sendCredentials(Project project,String username,String password,ProgressStatus progressStatus) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return null;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"");
  requestUri.clearParameters();
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpPost(requestDest);
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  request.addHeader(""String_Node_Str"",(Consts.UTF_8).displayName());
  ObjectNode credentials=JacksonUtils.getObjectMapper().createObjectNode();
  credentials.put(""String_Node_Str"",username);
  credentials.put(""String_Node_Str"",password);
  String data=JacksonUtils.getObjectMapper().writeValueAsString(credentials);
  ((HttpEntityEnclosingRequest)request).setEntity(new StringEntity(data,ContentType.APPLICATION_JSON));
  ObjectNode responseJson=JacksonUtils.getObjectMapper().createObjectNode();
  sendMMSRequest(project,request,progressStatus,responseJson);
  JsonNode value;
  if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && (value=value.get(""String_Node_Str"")) != null && value.isTextual()) {
    return value.asText();
  }
  return null;
}",0.4665684830633284
88468,"/** 
 * General purpose method for sending a constructed http request via http client.
 * @param request
 * @return
 * @throws IOException
 * @throws ServerException
 */
public static File sendMMSRequest(Project project,HttpRequestBase request) throws IOException, ServerException, URISyntaxException {
  File targetFile=File.createTempFile(""String_Node_Str"",null);
  targetFile.deleteOnExit();
  HttpEntityEnclosingRequest httpEntityEnclosingRequest=null;
  boolean logBody=MDKOptionsGroup.getMDKOptions().isLogJson();
  logBody=logBody && request instanceof HttpEntityEnclosingRequest;
  logBody=logBody && ((httpEntityEnclosingRequest=(HttpEntityEnclosingRequest)request).getEntity() != null);
  logBody=logBody && httpEntityEnclosingRequest.getEntity().isRepeatable();
  System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString());
  int responseCode;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent();OutputStream outputStream=new FileOutputStream(targetFile)){
    responseCode=response.getStatusLine().getStatusCode();
    System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString()+ ""String_Node_Str""+ responseCode);
    System.out.println(""String_Node_Str"" + targetFile.getPath());
    if (inputStream != null) {
      byte[] buffer=new byte[8 * 1024];
      int bytesRead;
      while ((bytesRead=inputStream.read(buffer)) != -1) {
        outputStream.write(buffer,0,bytesRead);
      }
    }
  }
   try (FileInputStream fileInputStream=new FileInputStream(targetFile)){
    if (!processResponse(responseCode,fileInputStream,project)) {
      throw new ServerException(targetFile.getAbsolutePath(),responseCode);
    }
  }
   return targetFile;
}","public static File sendMMSRequest(Project project,HttpRequestBase request,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  return sendMMSRequest(project,request,progressStatus,null);
}",0.0681495504022716
88469,"public static File createEntityFile(Class<?> clazz,ContentType contentType,Collection nodes,JsonBlobType jsonBlobType) throws IOException {
  File file=File.createTempFile(clazz.getSimpleName() + ""String_Node_Str"" + contentType.getMimeType().replace('/','-')+ ""String_Node_Str"",null);
  file.deleteOnExit();
  String arrayName=""String_Node_Str"";
  if (jsonBlobType == JsonBlobType.ORG) {
    arrayName=""String_Node_Str"";
  }
 else   if (jsonBlobType == JsonBlobType.PROJECT) {
    arrayName=""String_Node_Str"";
  }
 else   if (jsonBlobType == JsonBlobType.REF) {
    arrayName=""String_Node_Str"";
  }
  try (FileOutputStream outputStream=new FileOutputStream(file);JsonGenerator jsonGenerator=JacksonUtils.getJsonFactory().createGenerator(outputStream)){
    jsonGenerator.writeStartObject();
    jsonGenerator.writeArrayFieldStart(arrayName);
    for (    Object node : nodes) {
      if (node instanceof ObjectNode && jsonBlobType == JsonBlobType.ELEMENT_JSON || jsonBlobType == JsonBlobType.ORG || jsonBlobType == JsonBlobType.PROJECT || jsonBlobType == JsonBlobType.REF) {
        jsonGenerator.writeObject(node);
      }
 else       if (node instanceof String && jsonBlobType == JsonBlobType.ELEMENT_ID) {
        jsonGenerator.writeStartObject();
        jsonGenerator.writeStringField(MDKConstants.ID_KEY,(String)node);
        jsonGenerator.writeEndObject();
      }
 else {
        throw new IOException(""String_Node_Str"");
      }
    }
    jsonGenerator.writeEndArray();
    jsonGenerator.writeStringField(""String_Node_Str"",""String_Node_Str"");
    jsonGenerator.writeStringField(""String_Node_Str"",MDKPlugin.getVersion());
    jsonGenerator.writeEndObject();
  }
   System.out.println(""String_Node_Str"" + file.getPath());
  return file;
}","public static File createEntityFile(Class<?> clazz,ContentType contentType,Collection nodes,JsonBlobType jsonBlobType) throws IOException {
  File requestFile=File.createTempFile(clazz.getSimpleName() + ""String_Node_Str"" + contentType.getMimeType().replace('/','-')+ ""String_Node_Str"",null);
  System.out.println(""String_Node_Str"" + requestFile.getPath());
  if (MDKOptionsGroup.getMDKOptions().isLogJson()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + requestFile.getPath());
  }
 else {
    requestFile.deleteOnExit();
  }
  String arrayName=""String_Node_Str"";
  if (jsonBlobType == JsonBlobType.ORG) {
    arrayName=""String_Node_Str"";
  }
 else   if (jsonBlobType == JsonBlobType.PROJECT) {
    arrayName=""String_Node_Str"";
  }
 else   if (jsonBlobType == JsonBlobType.REF) {
    arrayName=""String_Node_Str"";
  }
  try (FileOutputStream outputStream=new FileOutputStream(requestFile);JsonGenerator jsonGenerator=JacksonUtils.getJsonFactory().createGenerator(outputStream)){
    jsonGenerator.writeStartObject();
    jsonGenerator.writeArrayFieldStart(arrayName);
    for (    Object node : nodes) {
      if (node instanceof ObjectNode && jsonBlobType == JsonBlobType.ELEMENT_JSON || jsonBlobType == JsonBlobType.ORG || jsonBlobType == JsonBlobType.PROJECT || jsonBlobType == JsonBlobType.REF) {
        jsonGenerator.writeObject(node);
      }
 else       if (node instanceof String && jsonBlobType == JsonBlobType.ELEMENT_ID) {
        jsonGenerator.writeStartObject();
        jsonGenerator.writeStringField(MDKConstants.ID_KEY,(String)node);
        jsonGenerator.writeEndObject();
      }
 else {
        throw new IOException(""String_Node_Str"");
      }
    }
    jsonGenerator.writeEndArray();
    jsonGenerator.writeStringField(""String_Node_Str"",""String_Node_Str"");
    jsonGenerator.writeStringField(""String_Node_Str"",MDKPlugin.getVersion());
    jsonGenerator.writeEndObject();
  }
   return requestFile;
}",0.911062906724512
88470,"@Override public void actionPerformed(ActionEvent e){
  Collection<Element> selectedElements=MDUtils.getSelection(e);
  if (selectedElements.isEmpty()) {
    return;
  }
  Project project=Project.getProject(selectedElements.iterator().next());
  OclEvaluator.resetEnvironment();
  constraintRule.constraintType=Type.STATIC;
  constraintRule.init(project,null);
  constraintRule.run(project,null,selectedElements);
  Utils.displayValidationWindow(project,validationOutput,""String_Node_Str"");
}","@Override public void actionPerformed(ActionEvent e){
  Collection<Element> selectedElements=MDUtils.getSelection(e);
  if (selectedElements.isEmpty()) {
    return;
  }
  Project project=Project.getProject(selectedElements.iterator().next());
  constraintRule.constraintType=Type.STATIC;
  constraintRule.init(project,null);
  constraintRule.run(project,null,selectedElements);
  Utils.displayValidationWindow(project,validationOutput,""String_Node_Str"");
}",0.9631190727081138
88471,"@Override public void init(Project paramProject,Constraint paramConstraint){
  Debug.outln(""String_Node_Str"" + paramProject + ""String_Node_Str""+ paramConstraint+ ""String_Node_Str"");
  if (constraintElement == null) {
    constraintElement=paramConstraint;
  }
  OclEvaluator.resetEnvironment();
}","@Override public void init(Project paramProject,Constraint paramConstraint){
  Debug.outln(""String_Node_Str"" + paramProject + ""String_Node_Str""+ paramConstraint+ ""String_Node_Str"");
  if (constraintElement == null) {
    constraintElement=paramConstraint;
  }
}",0.9371633752244164
88472,"@Override public Set<Annotation> run(Project paramProject,Constraint paramConstraint,Collection<? extends Element> paramCollection){
  Set<Annotation> result=new HashSet<Annotation>();
  System.out.println(""String_Node_Str"" + constraintType + ""String_Node_Str"");
  OclEvaluator.resetEnvironment();
  initConstraintMaps(paramProject,paramCollection);
  OclEvaluator.resetEnvironment();
  @SuppressWarnings(""String_Node_Str"") Collection<gov.nasa.jpl.mbee.mdk.constraint.Constraint> constraints=(Collection<gov.nasa.jpl.mbee.mdk.constraint.Constraint>)(Utils2.isNullOrEmpty(elementsWithConstraints) ? (constraintToElementMap == null ? Utils2.newList() : constraintToElementMap.keySet()) : getAffectedConstraints(elementsWithConstraints));
  for (  gov.nasa.jpl.mbee.mdk.constraint.Constraint constraint : constraints) {
    try {
      Boolean satisfied=DocumentValidator.evaluateConstraint(constraint,this,isLanguageOcl(constraint));
      if (loggingResults) {
        logResults(satisfied,constraint);
      }
    }
 catch (    Throwable e) {
      Debug.error(true,false,""String_Node_Str"" + e.getLocalizedMessage());
      e.printStackTrace();
    }
  }
  Constraint cons=Utils.getWarningConstraint(paramProject);
  result=Utils.getAnnotations(this,paramProject,cons);
  annotations=result;
  System.out.println(""String_Node_Str"" + constraintType + ""String_Node_Str"");
  return result;
}","@Override public Set<Annotation> run(Project paramProject,Constraint paramConstraint,Collection<? extends Element> paramCollection){
  Set<Annotation> result=new HashSet<Annotation>();
  System.out.println(""String_Node_Str"" + constraintType + ""String_Node_Str"");
  initConstraintMaps(paramProject,paramCollection);
  @SuppressWarnings(""String_Node_Str"") Collection<gov.nasa.jpl.mbee.mdk.constraint.Constraint> constraints=(Collection<gov.nasa.jpl.mbee.mdk.constraint.Constraint>)(Utils2.isNullOrEmpty(elementsWithConstraints) ? (constraintToElementMap == null ? Utils2.newList() : constraintToElementMap.keySet()) : getAffectedConstraints(elementsWithConstraints));
  for (  gov.nasa.jpl.mbee.mdk.constraint.Constraint constraint : constraints) {
    try {
      Boolean satisfied=DocumentValidator.evaluateConstraint(constraint,this,isLanguageOcl(constraint));
      if (loggingResults) {
        logResults(satisfied,constraint);
      }
    }
 catch (    Throwable e) {
      Debug.error(true,false,""String_Node_Str"" + e.getLocalizedMessage());
      e.printStackTrace();
    }
  }
  Constraint cons=Utils.getWarningConstraint(paramProject);
  result=Utils.getAnnotations(this,paramProject,cons);
  annotations=result;
  System.out.println(""String_Node_Str"" + constraintType + ""String_Node_Str"");
  return result;
}",0.9741315594974131
88473,"public DocumentValidator(Element e){
  start=e;
  project=Project.getProject(e);
  sysmlview=Utils.getViewStereotype(project);
  conforms=Utils.getConformsStereotype(project);
  conforms14=Utils.getSysML14ConformsStereotype(project);
  md18expose=Utils.get18ExposeStereotype(project);
  ourExpose=Utils.getExposeStereotype(project);
  log=Application.getInstance().getGUILog();
  cycles=new ArrayList<>();
  fatal=false;
  done=new HashSet<>();
  aef=new ActivityEdgeFactory();
  dg=new DefaultDirectedGraph<>(Element.class);
  OclEvaluator.resetEnvironment();
  validationui.addValidationRule(multipleFirstErrors);
  validationui.addValidationRule(multipleNextErrors);
  validationui.addValidationRule(multipleContentErrors);
  validationui.addValidationRule(multipleViewpoints);
  validationui.addValidationRule(multipleOutgoingFlows);
  validationui.addValidationRule(mismatchStereotypeErrors);
  validationui.addValidationRule(missingViewpointErrors);
  validationui.addValidationRule(missingImportErrors);
  validationui.addValidationRule(multipleInitialNode);
  validationui.addValidationRule(multipleIncomingFlows);
  validationui.addValidationRule(missingInitialNode);
  validationui.addValidationRule(missingViewpointBehavior);
  validationui.addValidationRule(missingStereotype);
  validationui.addValidationRule(missingOutgoingFlow);
  validationui.addValidationRule(multipleStereotypes);
  validationui.addValidationRule(nonView2View);
  validationui.addValidationRule(shouldBeSection);
  validationui.addValidationRule(shouldNotBeSection);
  validationui.addValidationRule(cycleError);
  validationui.addValidationRule(activityNodeCycleError);
  validationui.addValidationRule(missingTagValue);
  dynamicExpressionValidation.addValidationRule(viewpointConstraintRule);
  validationOutput.add(validationui);
  validationOutput.add(dynamicExpressionValidation);
}","public DocumentValidator(Element e){
  start=e;
  project=Project.getProject(e);
  sysmlview=Utils.getViewStereotype(project);
  conforms=Utils.getConformsStereotype(project);
  conforms14=Utils.getSysML14ConformsStereotype(project);
  md18expose=Utils.get18ExposeStereotype(project);
  ourExpose=Utils.getExposeStereotype(project);
  log=Application.getInstance().getGUILog();
  cycles=new ArrayList<>();
  fatal=false;
  done=new HashSet<>();
  aef=new ActivityEdgeFactory();
  dg=new DefaultDirectedGraph<>(Element.class);
  validationui.addValidationRule(multipleFirstErrors);
  validationui.addValidationRule(multipleNextErrors);
  validationui.addValidationRule(multipleContentErrors);
  validationui.addValidationRule(multipleViewpoints);
  validationui.addValidationRule(multipleOutgoingFlows);
  validationui.addValidationRule(mismatchStereotypeErrors);
  validationui.addValidationRule(missingViewpointErrors);
  validationui.addValidationRule(missingImportErrors);
  validationui.addValidationRule(multipleInitialNode);
  validationui.addValidationRule(multipleIncomingFlows);
  validationui.addValidationRule(missingInitialNode);
  validationui.addValidationRule(missingViewpointBehavior);
  validationui.addValidationRule(missingStereotype);
  validationui.addValidationRule(missingOutgoingFlow);
  validationui.addValidationRule(multipleStereotypes);
  validationui.addValidationRule(nonView2View);
  validationui.addValidationRule(shouldBeSection);
  validationui.addValidationRule(shouldNotBeSection);
  validationui.addValidationRule(cycleError);
  validationui.addValidationRule(activityNodeCycleError);
  validationui.addValidationRule(missingTagValue);
  dynamicExpressionValidation.addValidationRule(viewpointConstraintRule);
  validationOutput.add(validationui);
  validationOutput.add(dynamicExpressionValidation);
}",0.990573660113116
88474,"/** 
 * Evaluates the specified query given a particular context
 * @param context     EObject of the context that the query should be run against(e.g., self)
 * @param queryString Valid OCL string that to be evaluated in the context
 * @param verbose     Turns on OCL debugging if true, off if false
 * @return Object of the result whose type should be known by the caller
 * @throws ParserException
 */
public static Object evaluateQuery(Object context,String queryString,boolean verbose) throws ParserException {
  OclEvaluator ev=new OclEvaluator();
  instance=ev;
  resetEnvironment(false);
  ev.setupEnvironment();
  if (queryString == null) {
    return null;
  }
  ev.setOclTracingEnabled(verbose);
  ev.queryStatus=QueryStatus.VALID_OCL;
  if (context == null) {
    ev.getHelper().setContext(OCLStandardLibraryImpl.INSTANCE.getOclVoid());
  }
 else   if (context instanceof EObject) {
    ev.getHelper().setContext(((EObject)context).eClass());
  }
 else   if (context instanceof Collection) {
    ev.getHelper().setContext(OCLStandardLibraryImpl.INSTANCE.getSequence());
  }
  Object result=null;
  ev.basicDiagnostic=null;
  ev.problemHandler=null;
  result=ev.evaluateQueryNoSetup(context,queryString,verbose);
  Debug.outln(""String_Node_Str"" + DocGenUtils.fixString(context) + ""String_Node_Str""+ queryString+ ""String_Node_Str""+ verbose+ ""String_Node_Str""+ DocGenUtils.fixString(result));
  return result;
}","/** 
 * Evaluates the specified query given a particular context
 * @param context     EObject of the context that the query should be run against(e.g., self)
 * @param queryString Valid OCL string that to be evaluated in the context
 * @param verbose     Turns on OCL debugging if true, off if false
 * @return Object of the result whose type should be known by the caller
 * @throws ParserException
 */
public static Object evaluateQuery(Object context,String queryString,boolean verbose) throws ParserException {
  OclEvaluator ev=new OclEvaluator();
  instance=ev;
  ev.setupEnvironment();
  if (queryString == null) {
    return null;
  }
  ev.setOclTracingEnabled(verbose);
  ev.queryStatus=QueryStatus.VALID_OCL;
  if (context == null) {
    ev.getHelper().setContext(OCLStandardLibraryImpl.INSTANCE.getOclVoid());
  }
 else   if (context instanceof EObject) {
    ev.getHelper().setContext(((EObject)context).eClass());
  }
 else   if (context instanceof Collection) {
    ev.getHelper().setContext(OCLStandardLibraryImpl.INSTANCE.getSequence());
  }
  Object result=null;
  ev.basicDiagnostic=null;
  ev.problemHandler=null;
  result=ev.evaluateQueryNoSetup(context,queryString,verbose);
  Debug.outln(""String_Node_Str"" + DocGenUtils.fixString(context) + ""String_Node_Str""+ queryString+ ""String_Node_Str""+ verbose+ ""String_Node_Str""+ DocGenUtils.fixString(result));
  return result;
}",0.9904017063633132
88475,"protected DocGenEnvironmentFactory setupEnvironment(){
  resetEnvironment(false);
  addRegexMatchOperation(getEnvironmentFactory());
  addEvalOperation(getEnvironmentFactory(),""String_Node_Str"");
  addEvalOperation(getEnvironmentFactory(),""String_Node_Str"");
  addEvalOperation(getEnvironmentFactory(),""String_Node_Str"");
  addRunOperation(getEnvironmentFactory(),OCLStandardLibraryImpl.INSTANCE.getOclAny());
  addRunOperation(getEnvironmentFactory(),OCLStandardLibraryImpl.INSTANCE.getSequence());
  addRunOperation(getEnvironmentFactory(),null);
  addGetOperation(getEnvironmentFactory());
  addLogOperation(getEnvironmentFactory(),true,false);
  addLogOperation(getEnvironmentFactory(),true,true);
  addLogOperation(getEnvironmentFactory(),false,false);
  addROperation(getEnvironmentFactory());
  addMOperation(getEnvironmentFactory());
  addTOperation(getEnvironmentFactory());
  addSOperation(getEnvironmentFactory());
  addNOperation(getEnvironmentFactory());
  addOOperation(getEnvironmentFactory());
  addVOperation(getEnvironmentFactory());
  addDefaultOperation(getEnvironmentFactory());
  addExpressionOperations(getEnvironmentFactory());
  return getEnvironmentFactory();
}","protected DocGenEnvironmentFactory setupEnvironment(){
  addRegexMatchOperation(getEnvironmentFactory());
  addEvalOperation(getEnvironmentFactory(),""String_Node_Str"");
  addEvalOperation(getEnvironmentFactory(),""String_Node_Str"");
  addEvalOperation(getEnvironmentFactory(),""String_Node_Str"");
  addRunOperation(getEnvironmentFactory(),OCLStandardLibraryImpl.INSTANCE.getOclAny());
  addRunOperation(getEnvironmentFactory(),OCLStandardLibraryImpl.INSTANCE.getSequence());
  addRunOperation(getEnvironmentFactory(),null);
  addGetOperation(getEnvironmentFactory());
  addLogOperation(getEnvironmentFactory(),true,false);
  addLogOperation(getEnvironmentFactory(),true,true);
  addLogOperation(getEnvironmentFactory(),false,false);
  addROperation(getEnvironmentFactory());
  addMOperation(getEnvironmentFactory());
  addTOperation(getEnvironmentFactory());
  addSOperation(getEnvironmentFactory());
  addNOperation(getEnvironmentFactory());
  addOOperation(getEnvironmentFactory());
  addVOperation(getEnvironmentFactory());
  addDefaultOperation(getEnvironmentFactory());
  addExpressionOperations(getEnvironmentFactory());
  return getEnvironmentFactory();
}",0.9884959522795056
88476,"/** 
 * Find Expressions in ExpressionLibraries and add them as blackbox shortcuts.
 * @param envFactory
 */
protected static void addExpressionOperations(DocGenEnvironmentFactory envFactory){
  ArrayList<Element> exprs=new ArrayList<Element>(getExpressions());
  for (  Element expr : exprs) {
    String name=Utils.getName(expr);
    name=name.replaceAll(""String_Node_Str"",""String_Node_Str"");
    String exprString=queryElementToStringExpression(expr);
    String errorMsg=null;
    if (!Utils2.isNullOrEmpty(name) && errorMsg == null) {
      try {
        addExpressionOperation(name,exprString,envFactory);
      }
 catch (      Throwable e) {
        errorMsg=e.getLocalizedMessage();
      }
    }
    if (errorMsg != null) {
      Debug.error(true,false,""String_Node_Str"" + name + ""String_Node_Str""+ exprString+ ""String_Node_Str""+ errorMsg);
    }
  }
}","/** 
 * Find Expressions in model and add them as blackbox shortcuts. ExpressionLibraries are retained
 * @param envFactory
 */
protected static void addExpressionOperations(DocGenEnvironmentFactory envFactory){
  List<Element> expressions=StereotypesHelper.getExtendedElements(Utils.getExpressionStereotype(Application.getInstance().getProject()));
  for (  Element expression : expressions) {
    String name=Utils.getName(expression);
    name=name.replaceAll(""String_Node_Str"",""String_Node_Str"");
    String exprString=queryElementToStringExpression(expression);
    if (!Utils2.isNullOrEmpty(name)) {
      try {
        addExpressionOperation(name,exprString,envFactory);
      }
 catch (      Throwable e) {
        Debug.error(true,false,""String_Node_Str"" + name + ""String_Node_Str""+ exprString+ ""String_Node_Str""+ e.getLocalizedMessage());
      }
    }
  }
}",0.746096009253904
88477,"@Override public void actionPerformed(ActionEvent e){
  OclEvaluator.resetEnvironment();
  Window owner=null;
  try {
    owner=Application.getInstance().getMainFrame();
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  try {
    if (dialog == null) {
      dialog=new OclQueryDialog(owner,""String_Node_Str"");
    }
    dialog.diagramCB.setSelected(true);
    dialog.browserCB.setSelected(true);
    dialog.getEditableListPanel().setResult(""String_Node_Str"");
    dialog.setVisible(true);
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}","@Override public void actionPerformed(ActionEvent e){
  Window owner=null;
  try {
    owner=Application.getInstance().getMainFrame();
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  try {
    if (dialog == null) {
      dialog=new OclQueryDialog(owner,""String_Node_Str"");
    }
    dialog.diagramCB.setSelected(true);
    dialog.browserCB.setSelected(true);
    dialog.getEditableListPanel().setResult(""String_Node_Str"");
    dialog.setVisible(true);
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}",0.967622571692877
88478,"protected void runQuery(){
  Collection<Element> selectedElements=CollectionUtil.createNewSequence();
  if (diagramCB.isSelected()) {
    selectedElements.addAll(MDUtils.getSelectionInDiagram());
  }
  if (browserCB.isSelected()) {
    selectedElements.addAll(MDUtils.getSelectionInContainmentBrowser());
  }
  query=editableListPanel.getQuery();
  if (query != null) {
    Object result=null;
    if (objectRadioButton.isSelected()) {
      Object context=selectedElements;
      if (selectedElements.isEmpty()) {
        context=null;
      }
 else       if (selectedElements.size() == 1) {
        context=selectedElements.iterator().next();
      }
      processor=new OclQueryAction.ProcessOclQuery(context);
      result=processor.process(query);
      String processedResult=processResults(result);
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          editableListPanel.setResult(processedResult);
          editableListPanel.setCompletions(processor.getCompletionChoices(),ProcessOclQuery.toString(processor.getSourceOfCompletion()) + ""String_Node_Str"" + ProcessOclQuery.getTypeName(processor.getSourceOfCompletion()));
        }
      }
);
    }
 else {
      final List<Object> resultList=new ArrayList<Object>();
      final List<String> completionList=new ArrayList<String>();
      final List<Class<?>> classList=new ArrayList<Class<?>>();
      for (      final Object context : selectedElements) {
        processor=new OclQueryAction.ProcessOclQuery(context);
        result=processor.process(query);
        String processedResult=processResults(result);
        resultList.add(processedResult);
        if (result != null && !classList.contains(result.getClass())) {
          completionList.add(editableListPanel.getCompletionHeader(processor.getSourceOfCompletion()));
          completionList.addAll(processor.getCompletionChoices());
          classList.add(result.getClass());
        }
      }
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          editableListPanel.setResult(MoreToString.Helper.toString(resultList,false,true,null,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false));
          editableListPanel.setCompletions(completionList,ProcessOclQuery.toString(processor.getSourceOfCompletion()) + ""String_Node_Str"" + ProcessOclQuery.getTypeName(processor.getSourceOfCompletion()));
        }
      }
);
    }
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        choices.push(query);
        while (choices.size() > maxChoices) {
          choices.pollLast();
        }
        editableListPanel.setItems(choices.toArray());
      }
    }
);
  }
}","protected void runQuery(){
  Collection<Element> selectedElements=CollectionUtil.createNewSequence();
  if (diagramCB.isSelected()) {
    selectedElements.addAll(MDUtils.getSelectionInDiagram());
  }
  if (browserCB.isSelected()) {
    selectedElements.addAll(MDUtils.getSelectionInContainmentBrowser());
  }
  query=editableListPanel.getQuery();
  if (query != null) {
    Object result=null;
    if (objectRadioButton.isSelected()) {
      Object context=selectedElements;
      if (selectedElements.isEmpty()) {
        context=null;
      }
 else       if (selectedElements.size() == 1) {
        context=selectedElements.iterator().next();
      }
      processor=new OclQueryAction.ProcessOclQuery(context);
      result=processor.process(query);
      String processedResult=processResults(result);
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          editableListPanel.setResult(processedResult);
          editableListPanel.setCompletions(processor.getCompletionChoices(),ProcessOclQuery.toString(processor.getSourceOfCompletion()) + ""String_Node_Str"" + ProcessOclQuery.getTypeName(processor.getSourceOfCompletion()));
        }
      }
);
    }
 else {
      final List<Object> resultList=new ArrayList<Object>();
      final List<String> completionList=new ArrayList<String>();
      final List<Class<?>> classList=new ArrayList<Class<?>>();
      for (      final Object context : selectedElements) {
        processor=new OclQueryAction.ProcessOclQuery(context);
        result=processor.process(query);
        String processedResult=processResults(result);
        resultList.add(processedResult);
        if (result != null && !classList.contains(result.getClass())) {
          completionList.addAll(processor.getCompletionChoices());
          classList.add(result.getClass());
        }
      }
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          editableListPanel.setResult(MoreToString.Helper.toString(resultList,false,true,null,null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false));
          editableListPanel.setCompletions(completionList,ProcessOclQuery.toString(processor.getSourceOfCompletion()) + ""String_Node_Str"" + ProcessOclQuery.getTypeName(processor.getSourceOfCompletion()));
        }
      }
);
    }
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        choices.push(query);
        while (choices.size() > maxChoices) {
          choices.pollLast();
        }
        editableListPanel.setItems(choices.toArray());
      }
    }
);
  }
}",0.7731881336838152
88479,"/** 
 * Executes ""Validate Model"" on model root
 */
public static void manualValidateModel(){
  manualValidateElement(ElementFinder.getModelRoot());
}","/** 
 * Executes ""Validate Model"" on model root
 */
public static void manualValidateModel(){
  manualValidateModel(ElementFinder.getModelRoot());
}",0.9664429530201344
88480,"/** 
 * Executes ""Validate Model"" on specified element
 * @param validateTarget element that the validation is to be performed upon
 */
public static void manualValidateElement(Element validateTarget){
  Collection<Element> sync=new ArrayList<>();
  sync.add(validateTarget);
  ManualSyncRunner manualSyncRunner=new ManualSyncRunner(sync,Application.getInstance().getProject(),-1);
  ProgressStatusRunner.runWithProgressStatus(manualSyncRunner,""String_Node_Str"",true,0);
  Application.getInstance().getGUILog().log(""String_Node_Str"");
  validationWindow=new MDKValidationWindow(manualSyncRunner.getValidationSuite());
}","/** 
 * Executes ""Validate Element"" on specified element
 * @param validateTarget element that the validation is to be performed upon
 */
public static void manualValidateElement(Element validateTarget){
  Collection<Element> sync=new ArrayList<>();
  sync.add(validateTarget);
  ManualSyncRunner manualSyncRunner=new ManualSyncRunner(sync,Application.getInstance().getProject(),0);
  ProgressStatusRunner.runWithProgressStatus(manualSyncRunner,""String_Node_Str"",true,0);
  Application.getInstance().getGUILog().log(""String_Node_Str"");
  validationWindow=new MDKValidationWindow(manualSyncRunner.getValidationSuite());
}",0.9878934624697336
88481,"public static String validateCredentials(Project project,String ticket) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return ""String_Node_Str"";
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + ticket);
  requestUri.clearParameters();
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpGet(requestDest);
  System.out.println(""String_Node_Str"" + requestUri.toString());
  ObjectNode responseJson;
  JsonNode value;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent()){
    int responseCode=response.getStatusLine().getStatusCode();
    String responseBody=((inputStream != null) ? IOUtils.toString(inputStream) : ""String_Node_Str"");
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + requestUri.toString() + ""String_Node_Str""+ responseCode);
    if (responseCode == 200) {
      if (!responseBody.isEmpty() && responseType.equals(""String_Node_Str"")) {
        responseJson=JacksonUtils.getObjectMapper().readValue(responseBody,ObjectNode.class);
        if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + value.asText());
        }
        if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
          return value.asText();
        }
      }
      return ""String_Node_Str"";
    }
 else {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + responseCode);
      Utils.showPopupMessage(""String_Node_Str"");
      throw new ServerException(responseBody,responseCode);
    }
  }
 }","public static String validateCredentials(Project project,String ticket) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return ""String_Node_Str"";
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + ticket);
  requestUri.clearParameters();
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpGet(requestDest);
  System.out.println(""String_Node_Str"" + requestUri.toString());
  String responseBody;
  int responseCode;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent()){
    responseCode=response.getStatusLine().getStatusCode();
    System.out.println(""String_Node_Str"" + requestUri.toString() + ""String_Node_Str""+ responseCode);
    responseBody=((inputStream != null) ? IOUtils.toString(inputStream) : ""String_Node_Str"");
  }
   try (ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(responseBody.getBytes())){
    if (!processResponse(responseCode,byteArrayInputStream,project)) {
      throw new ServerException(""String_Node_Str"",responseCode);
    }
  }
   ObjectNode responseJson=JacksonUtils.getObjectMapper().readValue(responseBody,ObjectNode.class);
  JsonNode value;
  if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
    return value.asText();
  }
  return ""String_Node_Str"";
}",0.4270601336302895
88482,"public static String sendCredentials(Project project,String username,String password) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return null;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"");
  requestUri.clearParameters();
  ObjectNode credentials=JacksonUtils.getObjectMapper().createObjectNode();
  credentials.put(""String_Node_Str"",username);
  credentials.put(""String_Node_Str"",password);
  ContentType contentType=ContentType.APPLICATION_JSON;
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpPost(requestDest);
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  request.addHeader(""String_Node_Str"",(Consts.UTF_8).displayName());
  String data=JacksonUtils.getObjectMapper().writeValueAsString(credentials);
  ((HttpEntityEnclosingRequest)request).setEntity(new StringEntity(data,ContentType.APPLICATION_JSON));
  System.out.println(""String_Node_Str"" + requestUri.toString());
  ObjectNode responseJson=null;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent()){
    int responseCode=response.getStatusLine().getStatusCode();
    String responseBody=((inputStream != null) ? IOUtils.toString(inputStream) : ""String_Node_Str"");
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + requestUri.toString() + ""String_Node_Str""+ responseCode);
    boolean throwServerException=false;
    if (responseCode != HttpURLConnection.HTTP_OK) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + responseCode);
      throwServerException=true;
    }
    if (!responseBody.isEmpty() && responseType.equals(""String_Node_Str"")) {
      responseJson=JacksonUtils.getObjectMapper().readValue(responseBody,ObjectNode.class);
      JsonNode value;
      if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + value.asText());
      }
      if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isArray()) {
        ArrayNode msgs=(ArrayNode)value;
        for (        JsonNode msg : msgs) {
          if (msg != null && (value=msg.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + value.asText());
          }
        }
      }
    }
    if (throwServerException) {
      Utils.showPopupMessage(""String_Node_Str"");
      throw new ServerException(responseBody,responseCode);
    }
  }
   JsonNode value;
  if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && (value=value.get(""String_Node_Str"")) != null && value.isTextual()) {
    return value.asText();
  }
  return null;
}","public static String sendCredentials(Project project,String username,String password) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return null;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"");
  requestUri.clearParameters();
  ObjectNode credentials=JacksonUtils.getObjectMapper().createObjectNode();
  credentials.put(""String_Node_Str"",username);
  credentials.put(""String_Node_Str"",password);
  ContentType contentType=ContentType.APPLICATION_JSON;
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpPost(requestDest);
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  request.addHeader(""String_Node_Str"",(Consts.UTF_8).displayName());
  String data=JacksonUtils.getObjectMapper().writeValueAsString(credentials);
  ((HttpEntityEnclosingRequest)request).setEntity(new StringEntity(data,ContentType.APPLICATION_JSON));
  System.out.println(""String_Node_Str"" + requestUri.toString());
  String responseBody;
  int responseCode;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent()){
    responseCode=response.getStatusLine().getStatusCode();
    System.out.println(""String_Node_Str"" + requestUri.toString() + ""String_Node_Str""+ responseCode);
    responseBody=((inputStream != null) ? IOUtils.toString(inputStream) : ""String_Node_Str"");
  }
   try (ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(responseBody.getBytes())){
    if (!processResponse(responseCode,byteArrayInputStream,project)) {
      throw new ServerException(""String_Node_Str"",responseCode);
    }
  }
   ObjectNode responseJson=JacksonUtils.getObjectMapper().readValue(responseBody,ObjectNode.class);
  JsonNode value;
  if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && (value=value.get(""String_Node_Str"")) != null && value.isTextual()) {
    return value.asText();
  }
  return null;
}",0.4954903089618115
88483,"/** 
 * General purpose method for sending a constructed http request via http client.
 * @param request
 * @return
 * @throws IOException
 * @throws ServerException
 */
public static File sendMMSRequest(Project project,HttpRequestBase request) throws IOException, ServerException, URISyntaxException {
  File targetFile=File.createTempFile(""String_Node_Str"",null);
  targetFile.deleteOnExit();
  HttpEntityEnclosingRequest httpEntityEnclosingRequest=null;
  boolean logBody=MDKOptionsGroup.getMDKOptions().isLogJson();
  logBody=logBody && request instanceof HttpEntityEnclosingRequest;
  logBody=logBody && ((httpEntityEnclosingRequest=(HttpEntityEnclosingRequest)request).getEntity() != null);
  logBody=logBody && httpEntityEnclosingRequest.getEntity().isRepeatable();
  System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString());
  boolean throwServerException=false;
  int responseCode;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent();OutputStream outputStream=new FileOutputStream(targetFile)){
    responseCode=response.getStatusLine().getStatusCode();
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString()+ ""String_Node_Str""+ responseCode);
    System.out.println(""String_Node_Str"" + targetFile.getPath());
    if (responseCode == HttpURLConnection.HTTP_OK || (request.getMethod().equals(""String_Node_Str"") && responseCode == HttpURLConnection.HTTP_NOT_FOUND && responseType.equals(""String_Node_Str""))) {
    }
 else     if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {
      Utils.guilog(""String_Node_Str"" + responseCode);
      MMSLogoutAction.logoutAction(project);
      throwServerException=true;
    }
 else {
      Utils.guilog(""String_Node_Str"" + responseCode);
      throwServerException=true;
    }
    if (inputStream != null && responseType.equals(""String_Node_Str"")) {
      byte[] buffer=new byte[8 * 1024];
      int bytesRead;
      while ((bytesRead=inputStream.read(buffer)) != -1) {
        outputStream.write(buffer,0,bytesRead);
      }
    }
  }
   JsonFactory jsonFactory=JacksonUtils.getJsonFactory();
  try (JsonParser jsonParser=jsonFactory.createParser(targetFile)){
    while (jsonParser.nextFieldName() != null && !jsonParser.nextFieldName().equals(""String_Node_Str"")) {
    }
    if (jsonParser.getCurrentToken() == JsonToken.FIELD_NAME) {
      jsonParser.nextToken();
      Application.getInstance().getGUILog().log(""String_Node_Str"" + jsonParser.getText());
    }
  }
   if (throwServerException) {
    Utils.showPopupMessage(""String_Node_Str"");
    throw new ServerException(targetFile.getAbsolutePath(),responseCode);
  }
  return targetFile;
}","/** 
 * General purpose method for sending a constructed http request via http client.
 * @param request
 * @return
 * @throws IOException
 * @throws ServerException
 */
public static File sendMMSRequest(Project project,HttpRequestBase request) throws IOException, ServerException, URISyntaxException {
  File targetFile=File.createTempFile(""String_Node_Str"",null);
  targetFile.deleteOnExit();
  HttpEntityEnclosingRequest httpEntityEnclosingRequest=null;
  boolean logBody=MDKOptionsGroup.getMDKOptions().isLogJson();
  logBody=logBody && request instanceof HttpEntityEnclosingRequest;
  logBody=logBody && ((httpEntityEnclosingRequest=(HttpEntityEnclosingRequest)request).getEntity() != null);
  logBody=logBody && httpEntityEnclosingRequest.getEntity().isRepeatable();
  System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString());
  int responseCode;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent();OutputStream outputStream=new FileOutputStream(targetFile)){
    responseCode=response.getStatusLine().getStatusCode();
    System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString()+ ""String_Node_Str""+ responseCode);
    System.out.println(""String_Node_Str"" + targetFile.getPath());
    if (inputStream != null) {
      byte[] buffer=new byte[8 * 1024];
      int bytesRead;
      while ((bytesRead=inputStream.read(buffer)) != -1) {
        outputStream.write(buffer,0,bytesRead);
      }
    }
  }
   try (FileInputStream fileInputStream=new FileInputStream(targetFile)){
    if (!processResponse(responseCode,fileInputStream,project)) {
      throw new ServerException(targetFile.getAbsolutePath(),responseCode);
    }
  }
   return targetFile;
}",0.7168649979482971
88484,"public void update(){
  data.clear();
  final Iterator<Request> it=OutputQueue.getInstance().iterator();
  Request current=OutputQueue.getInstance().getCurrent();
  int counter=1;
  if (current != null) {
    final Vector<Object> row=new Vector<Object>();
    row.addElement(0);
    row.addElement(current.getRequest().getMethod());
    row.addElement(NumberFormat.getInstance().format(current.getCount()));
    row.addElement(current.getName());
    row.addElement(current.getRequest().getURI().toString());
    row.addElement(""String_Node_Str"");
    data.addElement(row);
  }
  while (it.hasNext()) {
    final Request r=it.next();
    if (r == null) {
      break;
    }
    final Vector<Object> row=new Vector<Object>();
    row.addElement(counter);
    row.addElement(r.getRequest().getMethod());
    row.addElement(NumberFormat.getInstance().format(r.getCount()));
    row.addElement(r.getName());
    row.addElement(r.getRequest().getURI().toString());
    row.addElement(""String_Node_Str"");
    data.addElement(row);
    counter++;
  }
  table.repaint();
  this.setAlwaysOnTop(true);
}","public void update(){
  data.clear();
  final Iterator<Request> it=OutputQueue.getInstance().iterator();
  Request current=OutputQueue.getInstance().getCurrent();
  int counter=1;
  if (current != null) {
    final Vector<Object> row=new Vector<Object>();
    row.addElement(0);
    row.addElement(current.getRequest().getMethod());
    row.addElement(NumberFormat.getInstance().format(current.getCount()));
    row.addElement(current.getName());
    row.addElement(current.getRequest().getURI().toString());
    row.addElement(""String_Node_Str"");
    data.addElement(row);
  }
  while (it.hasNext()) {
    final Request r=it.next();
    if (r == null) {
      break;
    }
    final Vector<Object> row=new Vector<Object>();
    row.addElement(counter);
    row.addElement(r.getRequest().getMethod());
    row.addElement(NumberFormat.getInstance().format(r.getCount()));
    row.addElement(r.getName());
    row.addElement(r.getRequest().getURI().toString());
    row.addElement(""String_Node_Str"");
    data.addElement(row);
    counter++;
  }
  table.repaint();
}",0.9865554010199352
88485,"@Override public void actionPerformed(@CheckForNull ActionEvent actionEvent){
  getSyncStatusFrame().setVisible(!getSyncStatusFrame().isVisible());
  if (getSyncStatusFrame().isVisible()) {
    update();
  }
}","@Override public void actionPerformed(@CheckForNull ActionEvent actionEvent){
  if (!getSyncStatusFrame().isVisible()) {
    getSyncStatusFrame().setVisible(true);
  }
 else {
    update();
    getSyncStatusFrame().toFront();
  }
}",0.6772727272727272
88486,"public SyncStatusFrame(){
  super(""String_Node_Str"");
  setContentPane(rootPanel);
  setLocationRelativeTo(Application.getInstance().getMainFrame());
  pack();
  setMinimumSize(getSize());
  setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
  setAlwaysOnTop(true);
  detailsButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      new DetailedSyncStatusAction().actionPerformed(null);
    }
  }
);
}","public SyncStatusFrame(){
  super(""String_Node_Str"");
  setContentPane(rootPanel);
  setLocationRelativeTo(Application.getInstance().getMainFrame());
  pack();
  setMinimumSize(getSize());
  setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
  detailsButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      new DetailedSyncStatusAction().actionPerformed(null);
    }
  }
);
}",0.9729119638826184
88487,"public ViewEditorLinkForm(String label,List<JButton> buttons){
  super(label);
  buttonPanel.setLayout(new GridLayout(0,1,0,2));
  for (  JButton button : buttons) {
    buttonPanel.add(button);
  }
  buttonPanel.setPreferredSize(new Dimension(320,buttons.size() * 25));
  scrollPane.setPreferredSize(new Dimension(340,Math.min(DISPLAYED_LINKS,buttons.size()) * 25 + 4));
  rootPanel.setPreferredSize(new Dimension(360,scrollPane.getPreferredSize().height + 12));
  setContentPane(rootPanel);
  setLocationRelativeTo(Application.getInstance().getMainFrame());
  pack();
  setMinimumSize(getSize());
  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  setResizable(false);
  setAlwaysOnTop(true);
}","public ViewEditorLinkForm(String label,List<JButton> buttons){
  super(label);
  buttonPanel.setLayout(new GridLayout(0,1,0,2));
  for (  JButton button : buttons) {
    buttonPanel.add(button);
  }
  buttonPanel.setPreferredSize(new Dimension(320,buttons.size() * 25));
  scrollPane.setPreferredSize(new Dimension(340,Math.min(DISPLAYED_LINKS,buttons.size()) * 25 + 4));
  rootPanel.setPreferredSize(new Dimension(360,scrollPane.getPreferredSize().height + 12));
  setContentPane(rootPanel);
  setLocationRelativeTo(Application.getInstance().getMainFrame());
  pack();
  setMinimumSize(getSize());
  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  setResizable(false);
}",0.9825581395348836
88488,"public static boolean isTicketValid(Project project) throws ServerException, IOException, URISyntaxException {
  if (!isTicketSet(project)) {
    return false;
  }
  return MMSUtils.validateCredentials(project,ticketMappings.get(project).getTicket()).equals(username);
}","public static boolean isTicketValid(Project project) throws ServerException, IOException, URISyntaxException {
  if (!isTicketSet(project)) {
    return false;
  }
  String ticket=ticketMappings.get(project).getTicket();
  return MMSUtils.validateCredentials(project,ticket).equals(username);
}",0.8404255319148937
88489,"protected static EStructuralFeatureOverride getOwnerEStructuralFeatureOverride(BiFunction<String,Project,Element> idToElementConverter){
  return new EStructuralFeatureOverride((objectNode,eStructuralFeature,project,strict,element) -> UMLPackage.Literals.ELEMENT__OWNER == eStructuralFeature,(objectNode,eStructuralFeature,project,strict,element) -> {
    if (element instanceof Model || element instanceof ValueSpecification) {
      return element;
    }
    JsonNode jsonNode=objectNode.get(MDKConstants.OWNER_ID_KEY);
    if (jsonNode == null || !jsonNode.isTextual()) {
      if (strict) {
        throw new ImportException(element,objectNode,""String_Node_Str"");
      }
      return null;
    }
    if (element instanceof Package && (jsonNode=objectNode.get(MDKConstants.ID_KEY)) != null && jsonNode.isTextual() && jsonNode.asText().startsWith(MDKConstants.HOLDING_BIN_ID_PREFIX) && (jsonNode=objectNode.get(MDKConstants.OWNER_ID_KEY)) != null && jsonNode.isTextual() && jsonNode.asText().equals(Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()))) {
      ((Package)element).setOwningPackage(project.getPrimaryModel());
      return element;
    }
    Element owningElement=idToElementConverter.apply(jsonNode.asText(),project);
    if (owningElement == null) {
      if (strict) {
        JsonNode sysmlIdNode=objectNode.get(MDKConstants.ID_KEY);
        throw new ImportException(element,objectNode,""String_Node_Str"" + (sysmlIdNode != null && sysmlIdNode.isTextual() ? sysmlIdNode.asText(""String_Node_Str"") : ""String_Node_Str"") + ""String_Node_Str""+ jsonNode+ ""String_Node_Str"");
      }
    }
    try {
      if (element instanceof PackageableElement && owningElement instanceof Package) {
        ((PackageableElement)element).setOwningPackage((Package)owningElement);
      }
 else       if (element instanceof ParameterableElement && owningElement instanceof TemplateParameter) {
        ((ParameterableElement)element).setOwningTemplateParameter((TemplateParameter)owningElement);
      }
 else       if (element instanceof Slot && owningElement instanceof InstanceSpecification) {
        ((Slot)element).setOwningInstance((InstanceSpecification)owningElement);
      }
 else       if (element instanceof InstanceSpecification && ((jsonNode=objectNode.get(KEY_FUNCTION.apply(UMLPackage.Literals.INSTANCE_SPECIFICATION__STEREOTYPED_ELEMENT))) != null && jsonNode.isTextual() || (jsonNode=objectNode.get(MDKConstants.ID_KEY)) != null && jsonNode.isTextual() && jsonNode.asText().endsWith(MDKConstants.APPLIED_STEREOTYPE_INSTANCE_ID_SUFFIX))) {
        ((InstanceSpecification)element).setStereotypedElement(owningElement);
      }
 else {
        element.setOwner(owningElement);
      }
    }
 catch (    IllegalArgumentException e) {
      System.out.println(""String_Node_Str"" + element + (element != null ? ""String_Node_Str"" + Converters.getElementToIdConverter().apply(element) : ""String_Node_Str""));
      System.out.println(""String_Node_Str"" + owningElement + (owningElement != null ? ""String_Node_Str"" + Converters.getElementToIdConverter().apply(owningElement) : ""String_Node_Str""));
      throw new ImportException(element,objectNode,""String_Node_Str"",e);
    }
    return element;
  }
);
}","protected static EStructuralFeatureOverride getOwnerEStructuralFeatureOverride(BiFunction<String,Project,Element> idToElementConverter){
  return new EStructuralFeatureOverride((objectNode,eStructuralFeature,project,strict,element) -> UMLPackage.Literals.ELEMENT__OWNER == eStructuralFeature,(objectNode,eStructuralFeature,project,strict,element) -> {
    if (element instanceof Model || element instanceof ValueSpecification) {
      return element;
    }
    JsonNode jsonNode=objectNode.get(MDKConstants.OWNER_ID_KEY);
    if (jsonNode == null || !jsonNode.isTextual()) {
      if (strict) {
        throw new ImportException(element,objectNode,""String_Node_Str"");
      }
      return null;
    }
    String owningElementId=jsonNode.asText();
    Element owningElement=idToElementConverter.apply(owningElementId,project);
    if (element instanceof Package && (jsonNode=objectNode.get(MDKConstants.ID_KEY)) != null && jsonNode.isTextual() && jsonNode.asText().startsWith(MDKConstants.HOLDING_BIN_ID_PREFIX) && owningElementId.equals(Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()))) {
      ((Package)element).setOwningPackage(project.getPrimaryModel());
      return element;
    }
    if (owningElement == null) {
      if (strict) {
        JsonNode sysmlIdNode=objectNode.get(MDKConstants.ID_KEY);
        throw new ImportException(element,objectNode,""String_Node_Str"" + (sysmlIdNode != null && sysmlIdNode.isTextual() ? sysmlIdNode.asText(""String_Node_Str"") : ""String_Node_Str"") + ""String_Node_Str""+ jsonNode+ ""String_Node_Str"");
      }
    }
    try {
      if (element instanceof PackageableElement && owningElement instanceof Package) {
        ((PackageableElement)element).setOwningPackage((Package)owningElement);
      }
 else       if (element instanceof ParameterableElement && owningElement instanceof TemplateParameter) {
        ((ParameterableElement)element).setOwningTemplateParameter((TemplateParameter)owningElement);
      }
 else       if (element instanceof Slot && owningElement instanceof InstanceSpecification) {
        ((Slot)element).setOwningInstance((InstanceSpecification)owningElement);
      }
 else       if (element instanceof InstanceSpecification && ((jsonNode=objectNode.get(KEY_FUNCTION.apply(UMLPackage.Literals.INSTANCE_SPECIFICATION__STEREOTYPED_ELEMENT))) != null && jsonNode.isTextual() || (jsonNode=objectNode.get(MDKConstants.ID_KEY)) != null && jsonNode.isTextual() && jsonNode.asText().endsWith(MDKConstants.APPLIED_STEREOTYPE_INSTANCE_ID_SUFFIX))) {
        ((InstanceSpecification)element).setStereotypedElement(owningElement);
      }
 else {
        element.setOwner(owningElement);
      }
    }
 catch (    IllegalArgumentException e) {
      System.out.println(""String_Node_Str"" + element + (element != null ? ""String_Node_Str"" + Converters.getElementToIdConverter().apply(element) : ""String_Node_Str""));
      System.out.println(""String_Node_Str"" + owningElement + (owningElement != null ? ""String_Node_Str"" + Converters.getElementToIdConverter().apply(owningElement) : ""String_Node_Str""));
      throw new ImportException(element,objectNode,""String_Node_Str"",e);
    }
    return element;
  }
);
}",0.5498442367601246
88490,"public static String validateCredentials(Project project,String ticket) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return ""String_Node_Str"";
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + ticket);
  requestUri.clearParameters();
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpGet(requestDest);
  System.out.println(""String_Node_Str"" + requestUri.toString());
  String responseBody;
  int responseCode;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent()){
    responseCode=response.getStatusLine().getStatusCode();
    System.out.println(""String_Node_Str"" + requestUri.toString() + ""String_Node_Str""+ responseCode);
    responseBody=((inputStream != null) ? IOUtils.toString(inputStream) : ""String_Node_Str"");
  }
   if (!processResponse(responseCode,new ByteArrayInputStream(responseBody.getBytes()),project)) {
    throw new ServerException(""String_Node_Str"",responseCode);
  }
  ObjectNode responseJson=JacksonUtils.getObjectMapper().readValue(responseBody,ObjectNode.class);
  JsonNode value;
  if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
    return value.asText();
  }
  return ""String_Node_Str"";
}","public static String validateCredentials(Project project,String ticket) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return ""String_Node_Str"";
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + ticket);
  requestUri.clearParameters();
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpGet(requestDest);
  System.out.println(""String_Node_Str"" + requestUri.toString());
  String responseBody;
  int responseCode;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent()){
    responseCode=response.getStatusLine().getStatusCode();
    System.out.println(""String_Node_Str"" + requestUri.toString() + ""String_Node_Str""+ responseCode);
    responseBody=((inputStream != null) ? IOUtils.toString(inputStream) : ""String_Node_Str"");
  }
   try (ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(responseBody.getBytes())){
    if (!processResponse(responseCode,byteArrayInputStream,project)) {
      throw new ServerException(""String_Node_Str"",responseCode);
    }
  }
   ObjectNode responseJson=JacksonUtils.getObjectMapper().readValue(responseBody,ObjectNode.class);
  JsonNode value;
  if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
    return value.asText();
  }
  return ""String_Node_Str"";
}",0.9527896995708156
88491,"public static String sendCredentials(Project project,String username,String password) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return null;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"");
  requestUri.clearParameters();
  ObjectNode credentials=JacksonUtils.getObjectMapper().createObjectNode();
  credentials.put(""String_Node_Str"",username);
  credentials.put(""String_Node_Str"",password);
  ContentType contentType=ContentType.APPLICATION_JSON;
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpPost(requestDest);
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  request.addHeader(""String_Node_Str"",(Consts.UTF_8).displayName());
  String data=JacksonUtils.getObjectMapper().writeValueAsString(credentials);
  ((HttpEntityEnclosingRequest)request).setEntity(new StringEntity(data,ContentType.APPLICATION_JSON));
  System.out.println(""String_Node_Str"" + requestUri.toString());
  String responseBody;
  int responseCode;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent()){
    responseCode=response.getStatusLine().getStatusCode();
    System.out.println(""String_Node_Str"" + requestUri.toString() + ""String_Node_Str""+ responseCode);
    responseBody=((inputStream != null) ? IOUtils.toString(inputStream) : ""String_Node_Str"");
  }
   if (!processResponse(responseCode,new ByteArrayInputStream(responseBody.getBytes()),project)) {
    throw new ServerException(""String_Node_Str"",responseCode);
  }
  ObjectNode responseJson=JacksonUtils.getObjectMapper().readValue(responseBody,ObjectNode.class);
  JsonNode value;
  if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && (value=value.get(""String_Node_Str"")) != null && value.isTextual()) {
    return value.asText();
  }
  return null;
}","public static String sendCredentials(Project project,String username,String password) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return null;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"");
  requestUri.clearParameters();
  ObjectNode credentials=JacksonUtils.getObjectMapper().createObjectNode();
  credentials.put(""String_Node_Str"",username);
  credentials.put(""String_Node_Str"",password);
  ContentType contentType=ContentType.APPLICATION_JSON;
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpPost(requestDest);
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  request.addHeader(""String_Node_Str"",(Consts.UTF_8).displayName());
  String data=JacksonUtils.getObjectMapper().writeValueAsString(credentials);
  ((HttpEntityEnclosingRequest)request).setEntity(new StringEntity(data,ContentType.APPLICATION_JSON));
  System.out.println(""String_Node_Str"" + requestUri.toString());
  String responseBody;
  int responseCode;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent()){
    responseCode=response.getStatusLine().getStatusCode();
    System.out.println(""String_Node_Str"" + requestUri.toString() + ""String_Node_Str""+ responseCode);
    responseBody=((inputStream != null) ? IOUtils.toString(inputStream) : ""String_Node_Str"");
  }
   try (ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(responseBody.getBytes())){
    if (!processResponse(responseCode,byteArrayInputStream,project)) {
      throw new ServerException(""String_Node_Str"",responseCode);
    }
  }
   ObjectNode responseJson=JacksonUtils.getObjectMapper().readValue(responseBody,ObjectNode.class);
  JsonNode value;
  if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && (value=value.get(""String_Node_Str"")) != null && value.isTextual()) {
    return value.asText();
  }
  return null;
}",0.9650964120087868
88492,"private static boolean processResponse(int responseCode,InputStream responseStream,Project project){
  boolean throwServerException=false;
  JsonFactory jsonFactory=JacksonUtils.getJsonFactory();
  try (JsonParser jsonParser=jsonFactory.createParser(responseStream)){
    while (jsonParser.nextFieldName() != null && !jsonParser.nextFieldName().equals(""String_Node_Str"")) {
    }
    if (jsonParser.getCurrentToken() == JsonToken.FIELD_NAME) {
      jsonParser.nextToken();
      Application.getInstance().getGUILog().log(""String_Node_Str"" + jsonParser.getText());
    }
  }
 catch (  IOException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    throwServerException=true;
  }
  if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    MMSLogoutAction.logoutAction(project);
    throwServerException=true;
  }
 else   if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_NOT_FOUND) {
    throwServerException=true;
  }
  if (throwServerException) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + responseCode + ""String_Node_Str""+ ""String_Node_Str"");
  }
  return throwServerException;
}","private static boolean processResponse(int responseCode,InputStream responseStream,Project project){
  boolean throwServerException=false;
  JsonFactory jsonFactory=JacksonUtils.getJsonFactory();
  try (JsonParser jsonParser=jsonFactory.createParser(responseStream)){
    while (jsonParser.nextFieldName() != null && !jsonParser.nextFieldName().equals(""String_Node_Str"")) {
    }
    if (jsonParser.getCurrentToken() == JsonToken.FIELD_NAME) {
      jsonParser.nextToken();
      Application.getInstance().getGUILog().log(""String_Node_Str"" + jsonParser.getText());
    }
  }
 catch (  IOException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    throwServerException=true;
  }
  if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    MMSLogoutAction.logoutAction(project);
    throwServerException=true;
  }
 else   if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_NOT_FOUND) {
    throwServerException=true;
  }
  if (throwServerException) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + responseCode + ""String_Node_Str""+ ""String_Node_Str"");
  }
  return !throwServerException;
}",0.9995962858296328
88493,"public static boolean isTicketValid(Project project) throws ServerException, IOException, URISyntaxException {
  if (!isTicketSet(project)) {
    return false;
  }
  return MMSUtils.validateCredentials(project,ticketMappings.get(project).getTicket()).equals(username);
}","public static boolean isTicketValid(Project project) throws ServerException, IOException, URISyntaxException {
  if (!isTicketSet(project)) {
    return false;
  }
  String ticket=ticketMappings.get(project).getTicket();
  return MMSUtils.validateCredentials(project,ticket).equals(username);
}",0.8404255319148937
88494,"@Override public void actionPerformed(ActionEvent e){
  Stereotype documentStereotype=Utils.getDocumentStereotype(project);
  Stereotype viewStereotype=Utils.getViewStereotype(project);
  for (  Element element : targetElements) {
    if (!StereotypesHelper.hasStereotypeOrDerived(element,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(element,documentStereotype)) {
      continue;
    }
    Project project=Project.getProject(element);
    URIBuilder uriBase=MMSUtils.getServiceUri(project);
    if (uriBase == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    String uriBasePath=uriBase.setPath(""String_Node_Str"").clearParameters().toString() + ""String_Node_Str"" + MDUtils.getWorkspace(project)+ ""String_Node_Str""+ project.getName();
    Set<Element> documents=new HashSet<>();
    ArrayList<Element> viewChain=new ArrayList<>();
    viewChain.add(element);
    for (int i=0; i < viewChain.size(); i++) {
      if (StereotypesHelper.hasStereotype(viewChain.get(i),documentStereotype)) {
        documents.add(viewChain.get(i));
      }
      Set<Element> childViews=new HashSet<>();
      for (      Property prop : ((Class)viewChain.get(i)).getOwnedAttribute()) {
        if (!(prop.getType() instanceof Class)) {
          continue;
        }
        Class type=(Class)prop.getType();
        if (type == null || !(StereotypesHelper.hasStereotypeOrDerived(type,viewStereotype) || StereotypesHelper.hasStereotypeOrDerived(type,documentStereotype))) {
          continue;
        }
        childViews.add(type);
      }
      for (      Relationship relation : viewChain.get(i).get_relationshipOfRelatedElement()) {
        if (!(relation instanceof Association)) {
          continue;
        }
        Element assocEnd=((Association)relation).getMemberEnd().get(0).getOwner();
        if (!StereotypesHelper.hasStereotypeOrDerived(assocEnd,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(assocEnd,documentStereotype)) {
          continue;
        }
        if (!childViews.contains(assocEnd) && !viewChain.contains(assocEnd)) {
          viewChain.add(assocEnd);
        }
      }
    }
    URI link;
    if (documents.size() > 1) {
      String label=""String_Node_Str"";
      List<JButton> linkButtons=new ArrayList<>();
      try {
        if (!documents.isEmpty()) {
          label=""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"";
          for (          Element doc : documents) {
            if (doc.equals(element)) {
              link=new URI(uriBasePath + ""String_Node_Str"" + Converters.getElementToIdConverter().apply(element));
            }
 else {
              link=new URI(uriBasePath + ""String_Node_Str"" + Converters.getElementToIdConverter().apply(doc)+ ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element));
            }
            JButton button=new ViewButton(doc.getHumanName(),link);
            linkButtons.add(button);
          }
        }
      }
 catch (      URISyntaxException se) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
        return;
      }
      ViewEditorLinkForm viewLinkForm=new ViewEditorLinkForm(label,linkButtons);
      viewLinkForm.setVisible(true);
    }
 else {
      try {
        link=new URI(uriBasePath + ""String_Node_Str"" + Converters.getElementToIdConverter().apply(element)+ ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element));
      }
 catch (      URISyntaxException se) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
        return;
      }
      if (Desktop.isDesktopSupported()) {
        try {
          if (documents.size() == 0) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
          }
          Desktop.getDesktop().browse(link);
        }
 catch (        IOException e1) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + link.toString());
          e1.printStackTrace();
        }
      }
 else {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + link.toString());
      }
    }
  }
}","@Override public void actionPerformed(ActionEvent e){
  Stereotype documentStereotype=Utils.getDocumentStereotype(project);
  Stereotype viewStereotype=Utils.getViewStereotype(project);
  for (  Element element : targetElements) {
    if (!StereotypesHelper.hasStereotypeOrDerived(element,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(element,documentStereotype)) {
      continue;
    }
    Project project=Project.getProject(element);
    URIBuilder uriBase=MMSUtils.getServiceUri(project);
    if (uriBase == null) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    uriBase.setHost(uriBase.getHost() + ""String_Node_Str"");
    String uriPath=""String_Node_Str"" + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    String branchName=EsiUtils.getCurrentBranch(project.getPrimaryProject()).getName();
    uriPath+=""String_Node_Str"" + (branchName.equals(""String_Node_Str"") ? ""String_Node_Str"" : branchName);
    Set<Element> documents=new HashSet<>();
    ArrayList<Element> viewChain=new ArrayList<>();
    viewChain.add(element);
    for (int i=0; i < viewChain.size(); i++) {
      if (StereotypesHelper.hasStereotype(viewChain.get(i),documentStereotype)) {
        documents.add(viewChain.get(i));
      }
      Set<Element> childViews=new HashSet<>();
      for (      Property prop : ((Class)viewChain.get(i)).getOwnedAttribute()) {
        if (!(prop.getType() instanceof Class)) {
          continue;
        }
        Class type=(Class)prop.getType();
        if (type == null || !(StereotypesHelper.hasStereotypeOrDerived(type,viewStereotype) || StereotypesHelper.hasStereotypeOrDerived(type,documentStereotype))) {
          continue;
        }
        childViews.add(type);
      }
      for (      Relationship relation : viewChain.get(i).get_relationshipOfRelatedElement()) {
        if (!(relation instanceof Association)) {
          continue;
        }
        Element assocEnd=((Association)relation).getMemberEnd().get(0).getOwner();
        if (!StereotypesHelper.hasStereotypeOrDerived(assocEnd,viewStereotype) && !StereotypesHelper.hasStereotypeOrDerived(assocEnd,documentStereotype)) {
          continue;
        }
        if (!childViews.contains(assocEnd) && !viewChain.contains(assocEnd)) {
          viewChain.add(assocEnd);
        }
      }
    }
    if (documents.size() > 1) {
      String label=""String_Node_Str"";
      List<JButton> linkButtons=new ArrayList<>();
      try {
        if (!documents.isEmpty()) {
          label=""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"";
          for (          Element doc : documents) {
            if (doc.equals(element)) {
              uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(element);
            }
 else {
              uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(doc) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
            }
            JButton button=new ViewButton(doc.getHumanName(),uriBase.setPath(uriPath).build());
            linkButtons.add(button);
          }
        }
      }
 catch (      URISyntaxException se) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
        return;
      }
      ViewEditorLinkForm viewLinkForm=new ViewEditorLinkForm(label,linkButtons);
      viewLinkForm.setVisible(true);
    }
 else {
      uriPath+=""String_Node_Str"" + Converters.getElementToIdConverter().apply(element) + ""String_Node_Str""+ Converters.getElementToIdConverter().apply(element);
      if (Desktop.isDesktopSupported()) {
        try {
          if (documents.size() == 0) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
          }
          Desktop.getDesktop().browse(uriBase.setPath(uriPath).build());
        }
 catch (        URISyntaxException|IOException e1) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + uriBase.toString());
          e1.printStackTrace();
        }
      }
 else {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + uriBase.toString());
      }
    }
  }
}",0.8538506760728983
88495,"public void setup(URI u){
  uri=u;
  setToolTipText(uri.toString());
  addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      open(uri);
    }
  }
);
}","void setup(URI u){
  uri=u;
  setToolTipText(uri.toString());
  addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      open(uri);
    }
  }
);
}",0.9809264305177112
88496,"private static void collectRecursiveAssociatedElements(Classifier e,List<Element> all,int depth,int current,AggregationKind kind){
  if (depth != 0 && current > depth) {
    return;
  }
  Collection<Property> owned=e.getAttribute();
  for (  Property o : owned) {
    if (o.getAggregation() != kind) {
      continue;
    }
    if (o.getType() == null) {
      continue;
    }
    all.add(o.getType());
    if (o.getType() instanceof Classifier) {
      collectRecursiveAssociatedElements((Classifier)o.getType(),all,depth,current + 1,kind);
    }
  }
}","private static void collectRecursiveAssociatedElements(Classifier e,List<Element> all,int depth,int current,AggregationKind kind){
  if (depth != 0 && current > depth) {
    return;
  }
  Collection<Property> owned=e.getAttribute();
  for (  Property o : owned) {
    if (all.contains(o)) {
      continue;
    }
    if (o.getAggregation() != kind) {
      continue;
    }
    Type type=o.getType();
    if (type == null) {
      continue;
    }
    if (all.contains(type)) {
      continue;
    }
    all.add(type);
    if (type instanceof Classifier) {
      collectRecursiveAssociatedElements((Classifier)type,all,depth,current + 1,kind);
    }
  }
}",0.8325041459369817
88497,"public static BiFunction<String,Project,Element> getIdToElementConverter(){
  if (ID_TO_ELEMENT_CONVERTER == null) {
    ID_TO_ELEMENT_CONVERTER=(id,project) -> {
      if (id == null) {
        return null;
      }
      if (id.equals(project.getID()) || id.equals(project.getPrimaryProject().getProjectID())) {
        return null;
      }
      BaseElement baseElement=project.getElementByID(id);
      if (baseElement == null) {
        return null;
      }
      if (id.endsWith(MDKConstants.PRIMARY_MODEL_ID_SUFFIX)) {
        String projectId=id.substring(0,id.length() - MDKConstants.PRIMARY_MODEL_ID_SUFFIX.length());
        if (projectId.equals(Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()))) {
          return project.getPrimaryModel();
        }
      }
      if (id.endsWith(MDKConstants.APPLIED_STEREOTYPE_INSTANCE_ID_SUFFIX)) {
        String stereotypedElementId=id.substring(0,id.length() - MDKConstants.APPLIED_STEREOTYPE_INSTANCE_ID_SUFFIX.length());
        Element stereotypedElement=ID_TO_ELEMENT_CONVERTER.apply(stereotypedElementId,project);
        if (stereotypedElement != null) {
          return stereotypedElement.getAppliedStereotypeInstance();
        }
      }
      if (id.contains(MDKConstants.SLOT_VALUE_ID_SEPARATOR)) {
        String[] sections=id.split(MDKConstants.SLOT_VALUE_ID_SEPARATOR);
        Element element=Converters.getIdToElementConverter().apply(sections[0],project);
        if (element == null || !(element instanceof Slot)) {
          return null;
        }
        Slot owningSlot=(Slot)element;
        String[] subSections=sections[1].split(""String_Node_Str"");
        if (subSections.length != 2) {
          return null;
        }
        if (!NumberUtils.isDigits(subSections[0])) {
          return null;
        }
        int index;
        try {
          index=Integer.parseInt(subSections[0]);
        }
 catch (        NumberFormatException ignored) {
          return null;
        }
        if (index < 0 || index >= owningSlot.getValue().size()) {
          return null;
        }
        ValueSpecification value=owningSlot.getValue().get(index);
        if (!value.eClass().getName().toLowerCase().equals(subSections[1])) {
          return null;
        }
        return value;
      }
      if (id.contains(MDKConstants.SLOT_ID_SEPARATOR) && !id.contains(MDKConstants.SLOT_VALUE_ID_SEPARATOR)) {
        String[] sections=id.split(MDKConstants.SLOT_ID_SEPARATOR);
        Element owningInstance=Converters.getIdToElementConverter().apply(sections[0],project);
        Element definingFeature=Converters.getIdToElementConverter().apply(sections[1],project);
        if (!(owningInstance instanceof InstanceSpecification) || !(definingFeature instanceof StructuralFeature)) {
          return null;
        }
        return ((InstanceSpecification)owningInstance).getSlot().stream().filter(slot -> definingFeature.equals(slot.getDefiningFeature())).findAny().orElse(null);
      }
      return baseElement instanceof Element ? (Element)baseElement : null;
    }
;
  }
  return ID_TO_ELEMENT_CONVERTER;
}","public static BiFunction<String,Project,Element> getIdToElementConverter(){
  if (ID_TO_ELEMENT_CONVERTER == null) {
    ID_TO_ELEMENT_CONVERTER=(id,project) -> {
      if (id == null) {
        return null;
      }
      if (id.equals(project.getID()) || id.equals(project.getPrimaryProject().getProjectID())) {
        return null;
      }
      BaseElement baseElement=project.getElementByID(id);
      if (baseElement instanceof Element) {
        return (Element)baseElement;
      }
      if (id.endsWith(MDKConstants.PRIMARY_MODEL_ID_SUFFIX)) {
        String projectId=id.substring(0,id.length() - MDKConstants.PRIMARY_MODEL_ID_SUFFIX.length());
        if (projectId.equals(Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()))) {
          return project.getPrimaryModel();
        }
      }
      if (id.endsWith(MDKConstants.APPLIED_STEREOTYPE_INSTANCE_ID_SUFFIX)) {
        String stereotypedElementId=id.substring(0,id.length() - MDKConstants.APPLIED_STEREOTYPE_INSTANCE_ID_SUFFIX.length());
        Element stereotypedElement=ID_TO_ELEMENT_CONVERTER.apply(stereotypedElementId,project);
        if (stereotypedElement != null) {
          return stereotypedElement.getAppliedStereotypeInstance();
        }
      }
      if (id.contains(MDKConstants.SLOT_VALUE_ID_SEPARATOR)) {
        String[] sections=id.split(MDKConstants.SLOT_VALUE_ID_SEPARATOR);
        Element element=Converters.getIdToElementConverter().apply(sections[0],project);
        if (element == null || !(element instanceof Slot)) {
          return null;
        }
        Slot owningSlot=(Slot)element;
        String[] subSections=sections[1].split(""String_Node_Str"");
        if (subSections.length != 2) {
          return null;
        }
        if (!NumberUtils.isDigits(subSections[0])) {
          return null;
        }
        int index;
        try {
          index=Integer.parseInt(subSections[0]);
        }
 catch (        NumberFormatException ignored) {
          return null;
        }
        if (index < 0 || index >= owningSlot.getValue().size()) {
          return null;
        }
        ValueSpecification value=owningSlot.getValue().get(index);
        if (!value.eClass().getName().toLowerCase().equals(subSections[1])) {
          return null;
        }
        return value;
      }
      if (id.contains(MDKConstants.SLOT_ID_SEPARATOR) && !id.contains(MDKConstants.SLOT_VALUE_ID_SEPARATOR)) {
        String[] sections=id.split(MDKConstants.SLOT_ID_SEPARATOR);
        Element owningInstance=Converters.getIdToElementConverter().apply(sections[0],project);
        Element definingFeature=Converters.getIdToElementConverter().apply(sections[1],project);
        if (!(owningInstance instanceof InstanceSpecification) || !(definingFeature instanceof StructuralFeature)) {
          return null;
        }
        return ((InstanceSpecification)owningInstance).getSlot().stream().filter(slot -> definingFeature.equals(slot.getDefiningFeature())).findAny().orElse(null);
      }
      return null;
    }
;
  }
  return ID_TO_ELEMENT_CONVERTER;
}",0.983012457531144
88498,"@Override public void configure(ActionsManager manager){
  NMAction category=manager.getActionFor(""String_Node_Str"");
  if (category == null) {
    category=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
  }
  ((ActionsCategory)category).setNested(true);
  manager.addCategory((ActionsCategory)category);
  MMSLoginAction mmsLoginAction=new MMSLoginAction();
  category.addAction(mmsLoginAction);
  MMSLogoutAction mmsLogoutAction=new MMSLogoutAction();
  category.addAction(mmsLogoutAction);
  GenerateAllDocumentsAction generateAllDocumentsAction=new GenerateAllDocumentsAction();
  category.addAction(generateAllDocumentsAction);
  if (MDKOptionsGroup.getMDKOptions() != null && MDKOptionsGroup.getMDKOptions().isMDKAdvancedOptions()) {
    MDActionsCategory validateCategory=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
    validateCategory.setNested(true);
    category.addAction(validateCategory);
    ValidateBranchesAction validateBranchesAction=new ValidateBranchesAction();
    validateCategory.addAction(validateBranchesAction);
  }
}","@Override public void configure(ActionsManager manager){
  NMAction category=manager.getActionFor(""String_Node_Str"");
  if (category == null) {
    category=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
  }
  ((ActionsCategory)category).setNested(true);
  manager.addCategory((ActionsCategory)category);
  MMSLoginAction mmsLoginAction=new MMSLoginAction();
  category.addAction(mmsLoginAction);
  MMSLogoutAction mmsLogoutAction=new MMSLogoutAction();
  category.addAction(mmsLogoutAction);
  GenerateAllViewsAction generateAllViewsAction=new GenerateAllViewsAction();
  category.addAction(generateAllViewsAction);
  if (MDKOptionsGroup.getMDKOptions() != null && MDKOptionsGroup.getMDKOptions().isMDKAdvancedOptions()) {
    MDActionsCategory validateCategory=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
    validateCategory.setNested(true);
    category.addAction(validateCategory);
    ValidateBranchesAction validateBranchesAction=new ValidateBranchesAction();
    validateCategory.addAction(validateBranchesAction);
  }
}",0.9192488262910798
88499,"public static void generateAllDocuments(Project project){
  GenerateAllDocumentsAction uad=new GenerateAllDocumentsAction();
  validationWindow=new MDKValidationWindow(uad.updateAction(project));
}","public static void generateAllDocuments(Project project){
  GenerateAllViewsAction uad=new GenerateAllViewsAction();
  validationWindow=new MDKValidationWindow(uad.updateAction(project));
}",0.9481865284974094
88500,"/** 
 * Sends a POST request to MMS with the element JSON, creating or updating the element as appropriate.
 * @param elementsToPost Collection of elements you want to directly post on the MMS
 * @throws IllegalStateException
 */
public static ObjectNode postMmsElements(Collection<Element> elementsToPost,Project project) throws IOException, URISyntaxException, ServerException {
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  LinkedList<ObjectNode> elementJson=new LinkedList<>();
  for (  Element target : elementsToPost) {
    ObjectNode elemJson=Converters.getElementToJsonConverter().apply(target,project);
    elementJson.add(elemJson);
  }
  File sendData=MMSUtils.createEntityFile(MDKHelper.class,ContentType.APPLICATION_JSON,elementJson,MMSUtils.JsonBlobType.ELEMENT_JSON);
  return JacksonUtils.parseJsonObject(MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON)));
}","/** 
 * Sends a POST request to MMS with the element JSON, creating or updating the element as appropriate.
 * @param elementsToPost Collection of elements you want to directly post on the MMS
 * @throws IllegalStateException
 */
public static ObjectNode postMmsElements(Collection<Element> elementsToPost,Project project) throws IOException, URISyntaxException, ServerException {
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  LinkedList<ObjectNode> elementJson=new LinkedList<>();
  for (  Element target : elementsToPost) {
    ObjectNode elemJson=Converters.getElementToJsonConverter().apply(target,project);
    elementJson.add(elemJson);
  }
  File sendData=MMSUtils.createEntityFile(MDKHelper.class,ContentType.APPLICATION_JSON,elementJson,MMSUtils.JsonBlobType.ELEMENT_JSON);
  File responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON));
  try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
    return JacksonUtils.parseJsonObject(jsonParser);
  }
 }",0.9090086011770032
88501,"/** 
 * Sends a DELETE request to MMS for the indicated elements.
 * @param elementsToDelete Collection of elements you want to directly delete on the MMS
 * @throws IllegalStateException
 * @throws ServerException
 */
public static ObjectNode deleteMmsElements(Collection<Element> elementsToDelete,Project project) throws IOException, URISyntaxException, ServerException {
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  File sendData=MMSUtils.createEntityFile(MDKHelper.class,ContentType.APPLICATION_JSON,elementsToDelete,MMSUtils.JsonBlobType.ELEMENT_ID);
  return JacksonUtils.parseJsonObject(MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON)));
}","/** 
 * Sends a DELETE request to MMS for the indicated elements.
 * @param elementsToDelete Collection of elements you want to directly delete on the MMS
 * @throws IllegalStateException
 * @throws ServerException
 */
public static ObjectNode deleteMmsElements(Collection<Element> elementsToDelete,Project project) throws IOException, URISyntaxException, ServerException {
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  File sendData=MMSUtils.createEntityFile(MDKHelper.class,ContentType.APPLICATION_JSON,elementsToDelete,MMSUtils.JsonBlobType.ELEMENT_ID);
  File responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON));
  try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
    return JacksonUtils.parseJsonObject(jsonParser);
  }
 }",0.8869960249858035
88502,"public static Collection<Element> getElementsById(Collection<String> elementIds,Project project,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  if (elementIds == null || elementIds.isEmpty()) {
    return null;
  }
  final ObjectNode requests=JacksonUtils.getObjectMapper().createObjectNode();
  File sendData=MMSUtils.createEntityFile(MDKHelper.class,ContentType.APPLICATION_JSON,elementIds,MMSUtils.JsonBlobType.ELEMENT_ID);
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  Utils.guilog(""String_Node_Str"" + elementIds.size() + ""String_Node_Str"");
  JsonParser jsonParser;
  if (progressStatus != null) {
    jsonParser=MMSUtils.sendCancellableMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri,sendData,ContentType.APPLICATION_JSON),progressStatus);
  }
 else {
    jsonParser=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri,sendData,ContentType.APPLICATION_JSON));
  }
  LinkedList<Element> elementsList=new LinkedList<>();
  for (  ObjectNode elementJson : JacksonUtils.parseJsonResponseToObjectList(jsonParser,null)) {
    JsonNode value;
    if ((value=elementJson.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
      elementsList.add(Converters.getIdToElementConverter().apply(value.asText(),project));
    }
  }
  return elementsList;
}","public static Collection<Element> getElementsById(Collection<String> elementIds,Project project,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  if (elementIds == null || elementIds.isEmpty()) {
    return null;
  }
  final ObjectNode requests=JacksonUtils.getObjectMapper().createObjectNode();
  File sendData=MMSUtils.createEntityFile(MDKHelper.class,ContentType.APPLICATION_JSON,elementIds,MMSUtils.JsonBlobType.ELEMENT_ID);
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  Utils.guilog(""String_Node_Str"" + elementIds.size() + ""String_Node_Str"");
  File responseFile;
  if (progressStatus != null) {
    responseFile=MMSUtils.sendCancellableMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri,sendData,ContentType.APPLICATION_JSON),progressStatus);
  }
 else {
    responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri,sendData,ContentType.APPLICATION_JSON));
  }
  LinkedList<Element> elementsList=new LinkedList<>();
  try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
    for (    ObjectNode elementJson : JacksonUtils.parseJsonResponseToObjectList(jsonParser,null)) {
      JsonNode value;
      if ((value=elementJson.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
        elementsList.add(Converters.getIdToElementConverter().apply(value.asText(),project));
      }
    }
  }
   return elementsList;
}",0.9372718221042152
88503,"@Override public void run(ProgressStatus progressStatus){
  progressStatus.init(""String_Node_Str"",6);
  if (manageSesssions) {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().closeSession(project);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(1);
  DocumentValidator dv=new DocumentValidator(start);
  dv.validateDocument();
  if (dv.isFatal()) {
    dv.printErrors(false);
    return;
  }
  DocumentGenerator dg=new DocumentGenerator(start,dv,null,false);
  Document dge=dg.parseDocument(true,recurse,false);
  new PostProcessor().process(dge);
  DocBookOutputVisitor docBookOutputVisitor=new DocBookOutputVisitor(true);
  dge.accept(docBookOutputVisitor);
  DBBook book=docBookOutputVisitor.getBook();
  if (book == null) {
    return;
  }
  ViewHierarchyVisitor viewHierarchyVisitor=new ViewHierarchyVisitor();
  dge.accept(viewHierarchyVisitor);
  Map<String,Pair<ObjectNode,InstanceSpecification>> instanceSpecificationMap=new LinkedHashMap<>();
  Map<String,Pair<ObjectNode,Slot>> slotMap=new LinkedHashMap<>();
  Map<String,ViewMapping> viewMap=new LinkedHashMap<>(viewHierarchyVisitor.getView2ViewElements().size());
  for (  Element view : viewHierarchyVisitor.getView2ViewElements().keySet()) {
    if (processedElements.contains(view)) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
      continue;
    }
    ViewMapping viewMapping=viewMap.containsKey(Converters.getElementToIdConverter().apply(view)) ? viewMap.get(Converters.getElementToIdConverter().apply(view)) : new ViewMapping();
    viewMapping.setElement(view);
    viewMap.put(Converters.getElementToIdConverter().apply(view),viewMapping);
  }
  List<Constraint> constraintsToBeDeleted=new ArrayList<>(viewMap.size());
  for (  ViewMapping viewMapping : viewMap.values()) {
    Element view=viewMapping.getElement();
    if (view == null) {
      continue;
    }
    Constraint constraint=Utils.getViewConstraint(view);
    if (constraint != null) {
      constraintsToBeDeleted.add(constraint);
    }
  }
  if (!constraintsToBeDeleted.isEmpty()) {
    if (manageSesssions) {
      SessionManager.getInstance().createSession(project,""String_Node_Str"");
    }
    for (    Constraint constraint : constraintsToBeDeleted) {
      if (constraint.isEditable()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(constraint));
        try {
          ModelElementsManager.getInstance().removeElement(constraint);
        }
 catch (        ReadOnlyElementException e) {
          updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str""));
          failure=true;
        }
      }
 else {
        updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str""));
        failure=true;
      }
    }
    if (manageSesssions) {
      SessionManager.getInstance().closeSession(project);
    }
  }
  if (failure) {
    if (showValidation) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
    return;
  }
  if (handleCancel(progressStatus)) {
    return;
  }
  LocalSyncTransactionCommitListener localSyncTransactionCommitListener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  if (manageSesssions) {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().closeSession(project);
    }
    SessionManager.getInstance().createSession(project,""String_Node_Str"");
  }
  if (localSyncTransactionCommitListener != null) {
    localSyncTransactionCommitListener.setDisabled(true);
  }
  List<String> viewIDs=new ArrayList<>();
  if (!viewMap.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(2);
    ObjectNode viewResponse;
    try {
      viewResponse=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,viewMap.keySet(),progressStatus));
    }
 catch (    ServerException|IOException|URISyntaxException e) {
      failure=true;
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
    JsonNode viewElementsJsonArray;
    if (viewResponse != null && (viewElementsJsonArray=viewResponse.get(""String_Node_Str"")) != null && viewElementsJsonArray.isArray()) {
      Queue<String> instanceIDs=new LinkedList<>();
      Queue<String> slotIDs=new LinkedList<>();
      Property generatedFromViewProperty=Utils.getGeneratedFromViewProperty(project), generatedFromElementProperty=Utils.getGeneratedFromElementProperty(project);
      for (      JsonNode elementJsonNode : viewElementsJsonArray) {
        if (!elementJsonNode.isObject()) {
          continue;
        }
        ObjectNode elementObjectNode=(ObjectNode)elementJsonNode;
        JsonNode viewOperandJsonNode=JacksonUtils.getAtPath(elementObjectNode,""String_Node_Str"" + MDKConstants.CONTENTS_KEY + ""String_Node_Str""), sysmlIdJson=elementObjectNode.get(MDKConstants.ID_KEY);
        String sysmlId;
        if (sysmlIdJson != null && sysmlIdJson.isTextual() && !(sysmlId=sysmlIdJson.asText()).isEmpty()) {
          viewIDs.add(sysmlId);
          if (viewOperandJsonNode != null && viewOperandJsonNode.isArray()) {
            List<String> viewInstanceIDs=new ArrayList<>(viewOperandJsonNode.size());
            for (            JsonNode viewOperandJson : viewOperandJsonNode) {
              JsonNode instanceIdJsonNode=viewOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
              String instanceId;
              if (instanceIdJsonNode != null && instanceIdJsonNode.isTextual() && !(instanceId=instanceIdJsonNode.asText()).isEmpty()) {
                if (generatedFromViewProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                }
                if (generatedFromElementProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                }
                instanceIDs.add(instanceId);
                viewInstanceIDs.add(instanceId);
              }
            }
            ViewMapping viewMapping=viewMap.containsKey(sysmlId) ? viewMap.get(sysmlId) : new ViewMapping();
            viewMapping.setObjectNode(elementObjectNode);
            viewMapping.setInstanceIDs(viewInstanceIDs);
            viewMap.put(sysmlId,viewMapping);
          }
        }
      }
      List<ObjectNode> instanceObjectNodes=new ArrayList<>();
      List<ObjectNode> slotObjectNodes=new ArrayList<>();
      while (!instanceIDs.isEmpty() && !slotIDs.isEmpty()) {
        if (handleCancel(progressStatus)) {
          return;
        }
        List<String> elementIDs=new ArrayList<>(instanceIDs);
        elementIDs.addAll(slotIDs);
        ObjectNode instanceAndSlotResponse;
        try {
          instanceAndSlotResponse=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,elementIDs,progressStatus));
        }
 catch (        ServerException|IOException|URISyntaxException e) {
          failure=true;
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          e.printStackTrace();
          if (manageSesssions) {
            SessionManager.getInstance().cancelSession(project);
          }
          return;
        }
        instanceIDs.clear();
        slotIDs.clear();
        JsonNode instanceAndSlotElementsJsonArray;
        if (instanceAndSlotResponse != null && (instanceAndSlotElementsJsonArray=instanceAndSlotResponse.get(""String_Node_Str"")) != null && instanceAndSlotElementsJsonArray.isArray()) {
          for (          JsonNode elementJson : instanceAndSlotElementsJsonArray) {
            JsonNode instanceOperandJsonArray=JacksonUtils.getAtPath(elementJson,""String_Node_Str"");
            if (instanceOperandJsonArray != null && instanceOperandJsonArray.isArray()) {
              for (              JsonNode instanceOperandJson : instanceOperandJsonArray) {
                JsonNode instanceIdJson=instanceOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
                String instanceId;
                if (instanceIdJson != null && instanceIdJson.isTextual() && !(instanceId=instanceIdJson.asText()).isEmpty()) {
                  if (generatedFromViewProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                  }
                  if (generatedFromElementProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                  }
                  instanceIDs.add(instanceId);
                }
              }
            }
            JsonNode typeJson=elementJson.get(MDKConstants.TYPE_KEY);
            if (typeJson.isTextual() && elementJson.isObject()) {
              (typeJson.asText().equalsIgnoreCase(""String_Node_Str"") ? slotObjectNodes : instanceObjectNodes).add((ObjectNode)elementJson);
            }
          }
        }
      }
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(3);
      EMFImporter emfImporter=new EMFImporter(){
        @Override public List<PreProcessor> getPreProcessors(){
          if (preProcessors == null) {
            preProcessors=new ArrayList<>(super.getPreProcessors());
            preProcessors.remove(PreProcessor.SYSML_ID_VALIDATION);
          }
          return preProcessors;
        }
        @Override public List<EStructuralFeatureOverride> getEStructuralFeatureOverrides(){
          if (eStructuralFeatureOverrides == null) {
            eStructuralFeatureOverrides=new ArrayList<>(super.getEStructuralFeatureOverrides());
            eStructuralFeatureOverrides.remove(EStructuralFeatureOverride.OWNER);
            eStructuralFeatureOverrides.add(new EStructuralFeatureOverride(EStructuralFeatureOverride.OWNER.getPredicate(),(objectNode,eStructuralFeature,project,strict,element) -> {
              if (element instanceof InstanceSpecification) {
                element.setOwner(project.getPrimaryModel());
                return element;
              }
              return EStructuralFeatureOverride.OWNER.getFunction().apply(objectNode,eStructuralFeature,project,strict,element);
            }
));
          }
          return eStructuralFeatureOverrides;
        }
      }
;
      for (      Boolean strict : Arrays.asList(false,true)) {
        ListIterator<ObjectNode> instanceObjectNodesIterator=instanceObjectNodes.listIterator(instanceObjectNodes.size());
        while (instanceObjectNodesIterator.hasPrevious()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode instanceObjectNode=instanceObjectNodesIterator.previous();
          try {
            Changelog.Change<Element> change=emfImporter.apply(instanceObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof InstanceSpecification) {
              instanceSpecificationMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(instanceObjectNode,(InstanceSpecification)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + instanceObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            instanceObjectNodesIterator.remove();
          }
        }
        ListIterator<ObjectNode> slotObjectNodesIterator=slotObjectNodes.listIterator();
        while (slotObjectNodesIterator.hasNext()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode slotObjectNode=slotObjectNodesIterator.next();
          try {
            Changelog.Change<Element> change=emfImporter.apply(slotObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof Slot) {
              slotMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(slotObjectNode,(Slot)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + slotObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            slotObjectNodesIterator.remove();
          }
        }
      }
      for (      ViewMapping viewMapping : viewMap.values()) {
        Element view=viewMapping.getElement();
        if (handleCancel(progressStatus)) {
          return;
        }
        ObjectNode viewObjectNode=viewMapping.getObjectNode();
        if (viewObjectNode == null) {
          continue;
        }
        JsonNode viewContentsJsonNode=viewObjectNode.get(MDKConstants.CONTENTS_KEY);
        if (viewContentsJsonNode == null || !viewContentsJsonNode.isObject()) {
          continue;
        }
        try {
          Changelog.Change<Element> change=Converters.getJsonToElementConverter().apply((ObjectNode)viewContentsJsonNode,project,false);
          if (change.getChanged() != null && change.getChanged() instanceof Expression) {
            instanceUtils.getOrCreateViewConstraint(view).setSpecification((Expression)change.getChanged());
          }
        }
 catch (        ImportException|ReadOnlyElementException e) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
          continue;
        }
      }
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(4);
  DBAlfrescoVisitor dbAlfrescoVisitor=new DBAlfrescoVisitor(recurse,true);
  try {
    book.accept(dbAlfrescoVisitor);
  }
 catch (  Exception e) {
    Utils.printException(e);
    e.printStackTrace();
  }
  Map<Element,List<PresentationElementInstance>> view2pe=dbAlfrescoVisitor.getView2Pe();
  Map<Element,List<PresentationElementInstance>> view2unused=dbAlfrescoVisitor.getView2Unused();
  List<Element> views=instanceUtils.getViewProcessOrder(start,dbAlfrescoVisitor.getHierarchyElements());
  views.removeAll(processedElements);
  Set<Element> skippedViews=new HashSet<>();
  for (  Element view : views) {
    if (ProjectUtilities.isElementInAttachedProject(view)) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewInProject.addViolation(violation);
      skippedViews.add(view);
    }
    if (!viewIDs.contains(Converters.getElementToIdConverter().apply(view))) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewDoesNotExist.addViolation(violation);
      skippedViews.add(view);
    }
  }
  if (failure) {
    if (showValidation) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
    if (manageSesssions) {
      SessionManager.getInstance().cancelSession(project);
    }
    return;
  }
  try {
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      handlePes(view2pe.get(view),null);
      instanceUtils.updateOrCreateConstraintFromPresentationElements(view,view2pe.get(view));
    }
    if (handleCancel(progressStatus)) {
      return;
    }
    LinkedList<ObjectNode> elementsToCommit=new LinkedList<>();
    Queue<Pair<InstanceSpecification,Element>> instanceToView=new LinkedList<>();
    Map<Element,JSONArray> view2elements=dbAlfrescoVisitor.getView2Elements();
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      ObjectNode clientViewJson=Converters.getElementToJsonConverter().apply(view,project);
      if (clientViewJson == null) {
        skippedViews.add(view);
        continue;
      }
      if (view2elements.get(view) != null) {
        ArrayNode displayedElements=clientViewJson.putArray(MDKConstants.DISPLAYED_ELEMENT_IDS_KEY);
        for (        Object id : view2elements.get(view)) {
          displayedElements.add((String)id);
        }
      }
      Object o;
      ObjectNode serverViewJson=(o=viewMap.get(Converters.getElementToIdConverter().apply(view))) != null ? ((ViewMapping)o).getObjectNode() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientViewJson,serverViewJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientViewJson,serverViewJson).toString());
        }
        elementsToCommit.add(clientViewJson);
      }
      for (      PresentationElementInstance presentationElementInstance : view2pe.get(view)) {
        if (presentationElementInstance.getInstance() != null) {
          instanceToView.add(new Pair<>(presentationElementInstance.getInstance(),view));
        }
      }
    }
    String viewInstanceBinId=MDKConstants.VIEW_INSTANCES_BIN_PREFIX + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    while (!instanceToView.isEmpty()) {
      Pair<InstanceSpecification,Element> pair=instanceToView.remove();
      InstanceSpecification instance=pair.getKey();
      List<InstanceSpecification> subInstances=instanceUtils.getCurrentInstances(instance,pair.getValue()).getAll();
      for (      InstanceSpecification subInstance : subInstances) {
        instanceToView.add(new Pair<>(subInstance,pair.getValue()));
      }
      ObjectNode clientInstanceSpecificationJson=Converters.getElementToJsonConverter().apply(instance,project);
      if (clientInstanceSpecificationJson == null) {
        continue;
      }
      clientInstanceSpecificationJson.put(MDKConstants.OWNER_ID_KEY,viewInstanceBinId);
      ObjectNode serverInstanceSpecificationJson=instanceSpecificationMap.containsKey(Converters.getElementToIdConverter().apply(instance)) ? instanceSpecificationMap.get(Converters.getElementToIdConverter().apply(instance)).getKey() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientInstanceSpecificationJson,serverInstanceSpecificationJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(instance) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientInstanceSpecificationJson,serverInstanceSpecificationJson).toString());
        }
        elementsToCommit.add(clientInstanceSpecificationJson);
      }
      for (      Slot slot : instance.getSlot()) {
        ObjectNode clientSlotJson=Converters.getElementToJsonConverter().apply(slot,project);
        if (clientSlotJson == null) {
          continue;
        }
        JsonNode serverSlotJson=slotMap.containsKey(Converters.getElementToIdConverter().apply(slot)) ? slotMap.get(Converters.getElementToIdConverter().apply(slot)).getKey() : null;
        if (!JsonEquivalencePredicate.getInstance().test(clientSlotJson,serverSlotJson)) {
          elementsToCommit.add(clientSlotJson);
          if (MDUtils.isDeveloperMode()) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(slot) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientSlotJson,serverSlotJson).toString());
          }
        }
      }
    }
    if (handleCancel(progressStatus)) {
      return;
    }
    boolean changed=false;
    if (elementsToCommit.size() > 0) {
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(5);
      Application.getInstance().getGUILog().log(""String_Node_Str"" + elementsToCommit.size() + ""String_Node_Str""+ (elementsToCommit.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,elementsToCommit,MMSUtils.JsonBlobType.ELEMENT_JSON);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    Set<String> mmsElementsToDelete=new HashSet<>();
    for (    List<PresentationElementInstance> presentationElementInstances : view2unused.values()) {
      for (      PresentationElementInstance presentationElementInstance : presentationElementInstances) {
        if (presentationElementInstance.getInstance() == null) {
          continue;
        }
        String id=Converters.getElementToIdConverter().apply(presentationElementInstance.getInstance());
        if (id == null) {
          continue;
        }
        mmsElementsToDelete.add(id);
      }
    }
    if (elementsToCommit.size() > 0) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + mmsElementsToDelete.size() + ""String_Node_Str""+ (mmsElementsToDelete.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,mmsElementsToDelete,MMSUtils.JsonBlobType.ELEMENT_ID);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    if (!changed) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(6);
    Set<Element> elementsToDelete=new HashSet<>();
    for (    Pair<ObjectNode,Slot> pair : slotMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Pair<ObjectNode,InstanceSpecification> pair : instanceSpecificationMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Element element : views) {
      Constraint constraint=Utils.getViewConstraint(element);
      if (constraint == null) {
        continue;
      }
      elementsToDelete.add(constraint);
      ValueSpecification valueSpecification=constraint.getSpecification();
      if (valueSpecification == null) {
        continue;
      }
      elementsToDelete.add(valueSpecification);
      List<ValueSpecification> operands;
      if (!(valueSpecification instanceof Expression) || (operands=((Expression)valueSpecification).getOperand()) == null) {
        continue;
      }
      for (      ValueSpecification operand : operands) {
        elementsToDelete.add(operand);
        InstanceSpecification instanceSpecification;
        if (!(operand instanceof InstanceValue) || (instanceSpecification=((InstanceValue)operand).getInstance()) == null) {
          continue;
        }
        elementsToDelete.add(instanceSpecification);
        for (        Slot slot : instanceSpecification.getSlot()) {
          elementsToDelete.add(slot);
          elementsToDelete.addAll(slot.getValue());
        }
      }
    }
    for (    Element element : elementsToDelete) {
      try {
        ModelElementsManager.getInstance().removeElement(element);
      }
 catch (      ReadOnlyElementException ignored) {
        System.out.println(""String_Node_Str"" + element.getLocalID());
      }
    }
    processedElements.addAll(views);
  }
 catch (  Exception e) {
    failure=true;
    Utils.printException(e);
  }
 finally {
    if (manageSesssions) {
      if (SessionManager.getInstance().isSessionCreated(project)) {
        SessionManager.getInstance().cancelSession(project);
      }
    }
    if (localSyncTransactionCommitListener != null) {
      localSyncTransactionCommitListener.setDisabled(false);
    }
  }
  ImageValidator iv=new ImageValidator(dbAlfrescoVisitor.getImages(),images);
  iv.validate(project);
  for (  ValidationRule validationRule : iv.getSuite().getValidationRules()) {
    for (    ValidationRuleViolation validationRuleViolation : validationRule.getViolations()) {
      if (!validationRuleViolation.getActions().isEmpty()) {
        validationRuleViolation.getActions().get(0).actionPerformed(null);
      }
    }
  }
  if (showValidation) {
    if (suite.hasErrors()) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
  }
}","@Override public void run(ProgressStatus progressStatus){
  progressStatus.init(""String_Node_Str"",6);
  if (manageSesssions) {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().closeSession(project);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(1);
  DocumentValidator dv=new DocumentValidator(start);
  dv.validateDocument();
  if (dv.isFatal()) {
    dv.printErrors(false);
    return;
  }
  DocumentGenerator dg=new DocumentGenerator(start,dv,null,false);
  Document dge=dg.parseDocument(true,recurse,false);
  new PostProcessor().process(dge);
  DocBookOutputVisitor docBookOutputVisitor=new DocBookOutputVisitor(true);
  dge.accept(docBookOutputVisitor);
  DBBook book=docBookOutputVisitor.getBook();
  if (book == null) {
    return;
  }
  ViewHierarchyVisitor viewHierarchyVisitor=new ViewHierarchyVisitor();
  dge.accept(viewHierarchyVisitor);
  Map<String,Pair<ObjectNode,InstanceSpecification>> instanceSpecificationMap=new LinkedHashMap<>();
  Map<String,Pair<ObjectNode,Slot>> slotMap=new LinkedHashMap<>();
  Map<String,ViewMapping> viewMap=new LinkedHashMap<>(viewHierarchyVisitor.getView2ViewElements().size());
  for (  Element view : viewHierarchyVisitor.getView2ViewElements().keySet()) {
    if (processedElements.contains(view)) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
      continue;
    }
    ViewMapping viewMapping=viewMap.containsKey(Converters.getElementToIdConverter().apply(view)) ? viewMap.get(Converters.getElementToIdConverter().apply(view)) : new ViewMapping();
    viewMapping.setElement(view);
    viewMap.put(Converters.getElementToIdConverter().apply(view),viewMapping);
  }
  List<Constraint> constraintsToBeDeleted=new ArrayList<>(viewMap.size());
  for (  ViewMapping viewMapping : viewMap.values()) {
    Element view=viewMapping.getElement();
    if (view == null) {
      continue;
    }
    Constraint constraint=Utils.getViewConstraint(view);
    if (constraint != null) {
      constraintsToBeDeleted.add(constraint);
    }
  }
  if (!constraintsToBeDeleted.isEmpty()) {
    if (manageSesssions) {
      SessionManager.getInstance().createSession(project,""String_Node_Str"");
    }
    for (    Constraint constraint : constraintsToBeDeleted) {
      if (constraint.isEditable()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(constraint));
        try {
          ModelElementsManager.getInstance().removeElement(constraint);
        }
 catch (        ReadOnlyElementException e) {
          updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str""));
          failure=true;
        }
      }
 else {
        updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str""));
        failure=true;
      }
    }
    if (manageSesssions) {
      SessionManager.getInstance().closeSession(project);
    }
  }
  if (failure) {
    if (showValidation) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
    return;
  }
  if (handleCancel(progressStatus)) {
    return;
  }
  LocalSyncTransactionCommitListener localSyncTransactionCommitListener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  if (manageSesssions) {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().closeSession(project);
    }
    SessionManager.getInstance().createSession(project,""String_Node_Str"");
  }
  if (localSyncTransactionCommitListener != null) {
    localSyncTransactionCommitListener.setDisabled(true);
  }
  List<String> viewIDs=new ArrayList<>();
  if (!viewMap.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(2);
    ObjectNode viewResponse;
    try {
      File responseFile=MMSUtils.getElements(project,viewMap.keySet(),progressStatus);
      try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
        viewResponse=JacksonUtils.parseJsonObject(jsonParser);
      }
     }
 catch (    ServerException|IOException|URISyntaxException e) {
      failure=true;
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
    JsonNode viewElementsJsonArray;
    if (viewResponse != null && (viewElementsJsonArray=viewResponse.get(""String_Node_Str"")) != null && viewElementsJsonArray.isArray()) {
      Queue<String> instanceIDs=new LinkedList<>();
      Queue<String> slotIDs=new LinkedList<>();
      Property generatedFromViewProperty=Utils.getGeneratedFromViewProperty(project), generatedFromElementProperty=Utils.getGeneratedFromElementProperty(project);
      for (      JsonNode elementJsonNode : viewElementsJsonArray) {
        if (!elementJsonNode.isObject()) {
          continue;
        }
        ObjectNode elementObjectNode=(ObjectNode)elementJsonNode;
        JsonNode viewOperandJsonNode=JacksonUtils.getAtPath(elementObjectNode,""String_Node_Str"" + MDKConstants.CONTENTS_KEY + ""String_Node_Str""), sysmlIdJson=elementObjectNode.get(MDKConstants.ID_KEY);
        String sysmlId;
        if (sysmlIdJson != null && sysmlIdJson.isTextual() && !(sysmlId=sysmlIdJson.asText()).isEmpty()) {
          viewIDs.add(sysmlId);
          if (viewOperandJsonNode != null && viewOperandJsonNode.isArray()) {
            List<String> viewInstanceIDs=new ArrayList<>(viewOperandJsonNode.size());
            for (            JsonNode viewOperandJson : viewOperandJsonNode) {
              JsonNode instanceIdJsonNode=viewOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
              String instanceId;
              if (instanceIdJsonNode != null && instanceIdJsonNode.isTextual() && !(instanceId=instanceIdJsonNode.asText()).isEmpty()) {
                if (generatedFromViewProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                }
                if (generatedFromElementProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                }
                instanceIDs.add(instanceId);
                viewInstanceIDs.add(instanceId);
              }
            }
            ViewMapping viewMapping=viewMap.containsKey(sysmlId) ? viewMap.get(sysmlId) : new ViewMapping();
            viewMapping.setObjectNode(elementObjectNode);
            viewMapping.setInstanceIDs(viewInstanceIDs);
            viewMap.put(sysmlId,viewMapping);
          }
        }
      }
      List<ObjectNode> instanceObjectNodes=new ArrayList<>();
      List<ObjectNode> slotObjectNodes=new ArrayList<>();
      while (!instanceIDs.isEmpty() && !slotIDs.isEmpty()) {
        if (handleCancel(progressStatus)) {
          return;
        }
        List<String> elementIDs=new ArrayList<>(instanceIDs);
        elementIDs.addAll(slotIDs);
        ObjectNode instanceAndSlotResponse;
        try {
          File responseFile=MMSUtils.getElements(project,elementIDs,progressStatus);
          try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
            instanceAndSlotResponse=JacksonUtils.parseJsonObject(jsonParser);
          }
         }
 catch (        ServerException|IOException|URISyntaxException e) {
          failure=true;
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          e.printStackTrace();
          if (manageSesssions) {
            SessionManager.getInstance().cancelSession(project);
          }
          return;
        }
        instanceIDs.clear();
        slotIDs.clear();
        JsonNode instanceAndSlotElementsJsonArray;
        if (instanceAndSlotResponse != null && (instanceAndSlotElementsJsonArray=instanceAndSlotResponse.get(""String_Node_Str"")) != null && instanceAndSlotElementsJsonArray.isArray()) {
          for (          JsonNode elementJson : instanceAndSlotElementsJsonArray) {
            JsonNode instanceOperandJsonArray=JacksonUtils.getAtPath(elementJson,""String_Node_Str"");
            if (instanceOperandJsonArray != null && instanceOperandJsonArray.isArray()) {
              for (              JsonNode instanceOperandJson : instanceOperandJsonArray) {
                JsonNode instanceIdJson=instanceOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
                String instanceId;
                if (instanceIdJson != null && instanceIdJson.isTextual() && !(instanceId=instanceIdJson.asText()).isEmpty()) {
                  if (generatedFromViewProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                  }
                  if (generatedFromElementProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                  }
                  instanceIDs.add(instanceId);
                }
              }
            }
            JsonNode typeJson=elementJson.get(MDKConstants.TYPE_KEY);
            if (typeJson.isTextual() && elementJson.isObject()) {
              (typeJson.asText().equalsIgnoreCase(""String_Node_Str"") ? slotObjectNodes : instanceObjectNodes).add((ObjectNode)elementJson);
            }
          }
        }
      }
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(3);
      EMFImporter emfImporter=new EMFImporter(){
        @Override public List<PreProcessor> getPreProcessors(){
          if (preProcessors == null) {
            preProcessors=new ArrayList<>(super.getPreProcessors());
            preProcessors.remove(PreProcessor.SYSML_ID_VALIDATION);
          }
          return preProcessors;
        }
        @Override public List<EStructuralFeatureOverride> getEStructuralFeatureOverrides(){
          if (eStructuralFeatureOverrides == null) {
            eStructuralFeatureOverrides=new ArrayList<>(super.getEStructuralFeatureOverrides());
            eStructuralFeatureOverrides.remove(EStructuralFeatureOverride.OWNER);
            eStructuralFeatureOverrides.add(new EStructuralFeatureOverride(EStructuralFeatureOverride.OWNER.getPredicate(),(objectNode,eStructuralFeature,project,strict,element) -> {
              if (element instanceof InstanceSpecification) {
                element.setOwner(project.getPrimaryModel());
                return element;
              }
              return EStructuralFeatureOverride.OWNER.getFunction().apply(objectNode,eStructuralFeature,project,strict,element);
            }
));
          }
          return eStructuralFeatureOverrides;
        }
      }
;
      for (      Boolean strict : Arrays.asList(false,true)) {
        ListIterator<ObjectNode> instanceObjectNodesIterator=instanceObjectNodes.listIterator(instanceObjectNodes.size());
        while (instanceObjectNodesIterator.hasPrevious()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode instanceObjectNode=instanceObjectNodesIterator.previous();
          try {
            Changelog.Change<Element> change=emfImporter.apply(instanceObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof InstanceSpecification) {
              instanceSpecificationMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(instanceObjectNode,(InstanceSpecification)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + instanceObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            instanceObjectNodesIterator.remove();
          }
        }
        ListIterator<ObjectNode> slotObjectNodesIterator=slotObjectNodes.listIterator();
        while (slotObjectNodesIterator.hasNext()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode slotObjectNode=slotObjectNodesIterator.next();
          try {
            Changelog.Change<Element> change=emfImporter.apply(slotObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof Slot) {
              slotMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(slotObjectNode,(Slot)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + slotObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            slotObjectNodesIterator.remove();
          }
        }
      }
      for (      ViewMapping viewMapping : viewMap.values()) {
        Element view=viewMapping.getElement();
        if (handleCancel(progressStatus)) {
          return;
        }
        ObjectNode viewObjectNode=viewMapping.getObjectNode();
        if (viewObjectNode == null) {
          continue;
        }
        JsonNode viewContentsJsonNode=viewObjectNode.get(MDKConstants.CONTENTS_KEY);
        if (viewContentsJsonNode == null || !viewContentsJsonNode.isObject()) {
          continue;
        }
        try {
          Changelog.Change<Element> change=Converters.getJsonToElementConverter().apply((ObjectNode)viewContentsJsonNode,project,false);
          if (change.getChanged() != null && change.getChanged() instanceof Expression) {
            instanceUtils.getOrCreateViewConstraint(view).setSpecification((Expression)change.getChanged());
          }
        }
 catch (        ImportException|ReadOnlyElementException e) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
          continue;
        }
      }
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(4);
  DBAlfrescoVisitor dbAlfrescoVisitor=new DBAlfrescoVisitor(recurse,true);
  try {
    book.accept(dbAlfrescoVisitor);
  }
 catch (  Exception e) {
    Utils.printException(e);
    e.printStackTrace();
  }
  Map<Element,List<PresentationElementInstance>> view2pe=dbAlfrescoVisitor.getView2Pe();
  Map<Element,List<PresentationElementInstance>> view2unused=dbAlfrescoVisitor.getView2Unused();
  List<Element> views=instanceUtils.getViewProcessOrder(start,dbAlfrescoVisitor.getHierarchyElements());
  views.removeAll(processedElements);
  Set<Element> skippedViews=new HashSet<>();
  for (  Element view : views) {
    if (ProjectUtilities.isElementInAttachedProject(view)) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewInProject.addViolation(violation);
      skippedViews.add(view);
    }
    if (!viewIDs.contains(Converters.getElementToIdConverter().apply(view))) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewDoesNotExist.addViolation(violation);
      skippedViews.add(view);
    }
  }
  if (failure) {
    if (showValidation) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
    if (manageSesssions) {
      SessionManager.getInstance().cancelSession(project);
    }
    return;
  }
  try {
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      handlePes(view2pe.get(view),null);
      instanceUtils.updateOrCreateConstraintFromPresentationElements(view,view2pe.get(view));
    }
    if (handleCancel(progressStatus)) {
      return;
    }
    LinkedList<ObjectNode> elementsToCommit=new LinkedList<>();
    Queue<Pair<InstanceSpecification,Element>> instanceToView=new LinkedList<>();
    Map<Element,JSONArray> view2elements=dbAlfrescoVisitor.getView2Elements();
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      ObjectNode clientViewJson=Converters.getElementToJsonConverter().apply(view,project);
      if (clientViewJson == null) {
        skippedViews.add(view);
        continue;
      }
      if (view2elements.get(view) != null) {
        ArrayNode displayedElements=clientViewJson.putArray(MDKConstants.DISPLAYED_ELEMENT_IDS_KEY);
        for (        Object id : view2elements.get(view)) {
          displayedElements.add((String)id);
        }
      }
      Object o;
      ObjectNode serverViewJson=(o=viewMap.get(Converters.getElementToIdConverter().apply(view))) != null ? ((ViewMapping)o).getObjectNode() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientViewJson,serverViewJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientViewJson,serverViewJson).toString());
        }
        elementsToCommit.add(clientViewJson);
      }
      for (      PresentationElementInstance presentationElementInstance : view2pe.get(view)) {
        if (presentationElementInstance.getInstance() != null) {
          instanceToView.add(new Pair<>(presentationElementInstance.getInstance(),view));
        }
      }
    }
    String viewInstanceBinId=MDKConstants.VIEW_INSTANCES_BIN_PREFIX + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    while (!instanceToView.isEmpty()) {
      Pair<InstanceSpecification,Element> pair=instanceToView.remove();
      InstanceSpecification instance=pair.getKey();
      List<InstanceSpecification> subInstances=instanceUtils.getCurrentInstances(instance,pair.getValue()).getAll();
      for (      InstanceSpecification subInstance : subInstances) {
        instanceToView.add(new Pair<>(subInstance,pair.getValue()));
      }
      ObjectNode clientInstanceSpecificationJson=Converters.getElementToJsonConverter().apply(instance,project);
      if (clientInstanceSpecificationJson == null) {
        continue;
      }
      clientInstanceSpecificationJson.put(MDKConstants.OWNER_ID_KEY,viewInstanceBinId);
      ObjectNode serverInstanceSpecificationJson=instanceSpecificationMap.containsKey(Converters.getElementToIdConverter().apply(instance)) ? instanceSpecificationMap.get(Converters.getElementToIdConverter().apply(instance)).getKey() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientInstanceSpecificationJson,serverInstanceSpecificationJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(instance) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientInstanceSpecificationJson,serverInstanceSpecificationJson).toString());
        }
        elementsToCommit.add(clientInstanceSpecificationJson);
      }
      for (      Slot slot : instance.getSlot()) {
        ObjectNode clientSlotJson=Converters.getElementToJsonConverter().apply(slot,project);
        if (clientSlotJson == null) {
          continue;
        }
        JsonNode serverSlotJson=slotMap.containsKey(Converters.getElementToIdConverter().apply(slot)) ? slotMap.get(Converters.getElementToIdConverter().apply(slot)).getKey() : null;
        if (!JsonEquivalencePredicate.getInstance().test(clientSlotJson,serverSlotJson)) {
          elementsToCommit.add(clientSlotJson);
          if (MDUtils.isDeveloperMode()) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(slot) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientSlotJson,serverSlotJson).toString());
          }
        }
      }
    }
    if (handleCancel(progressStatus)) {
      return;
    }
    boolean changed=false;
    if (elementsToCommit.size() > 0) {
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(5);
      Application.getInstance().getGUILog().log(""String_Node_Str"" + elementsToCommit.size() + ""String_Node_Str""+ (elementsToCommit.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,elementsToCommit,MMSUtils.JsonBlobType.ELEMENT_JSON);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    Set<String> mmsElementsToDelete=new HashSet<>();
    for (    List<PresentationElementInstance> presentationElementInstances : view2unused.values()) {
      for (      PresentationElementInstance presentationElementInstance : presentationElementInstances) {
        if (presentationElementInstance.getInstance() == null) {
          continue;
        }
        String id=Converters.getElementToIdConverter().apply(presentationElementInstance.getInstance());
        if (id == null) {
          continue;
        }
        mmsElementsToDelete.add(id);
      }
    }
    if (elementsToCommit.size() > 0) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + mmsElementsToDelete.size() + ""String_Node_Str""+ (mmsElementsToDelete.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,mmsElementsToDelete,MMSUtils.JsonBlobType.ELEMENT_ID);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    if (!changed) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(6);
    Set<Element> elementsToDelete=new HashSet<>();
    for (    Pair<ObjectNode,Slot> pair : slotMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Pair<ObjectNode,InstanceSpecification> pair : instanceSpecificationMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Element element : views) {
      Constraint constraint=Utils.getViewConstraint(element);
      if (constraint == null) {
        continue;
      }
      elementsToDelete.add(constraint);
      ValueSpecification valueSpecification=constraint.getSpecification();
      if (valueSpecification == null) {
        continue;
      }
      elementsToDelete.add(valueSpecification);
      List<ValueSpecification> operands;
      if (!(valueSpecification instanceof Expression) || (operands=((Expression)valueSpecification).getOperand()) == null) {
        continue;
      }
      for (      ValueSpecification operand : operands) {
        elementsToDelete.add(operand);
        InstanceSpecification instanceSpecification;
        if (!(operand instanceof InstanceValue) || (instanceSpecification=((InstanceValue)operand).getInstance()) == null) {
          continue;
        }
        elementsToDelete.add(instanceSpecification);
        for (        Slot slot : instanceSpecification.getSlot()) {
          elementsToDelete.add(slot);
          elementsToDelete.addAll(slot.getValue());
        }
      }
    }
    for (    Element element : elementsToDelete) {
      try {
        ModelElementsManager.getInstance().removeElement(element);
      }
 catch (      ReadOnlyElementException ignored) {
        System.out.println(""String_Node_Str"" + element.getLocalID());
      }
    }
    processedElements.addAll(views);
  }
 catch (  Exception e) {
    failure=true;
    Utils.printException(e);
  }
 finally {
    if (manageSesssions) {
      if (SessionManager.getInstance().isSessionCreated(project)) {
        SessionManager.getInstance().cancelSession(project);
      }
    }
    if (localSyncTransactionCommitListener != null) {
      localSyncTransactionCommitListener.setDisabled(false);
    }
  }
  ImageValidator iv=new ImageValidator(dbAlfrescoVisitor.getImages(),images);
  iv.validate(project);
  for (  ValidationRule validationRule : iv.getSuite().getValidationRules()) {
    for (    ValidationRuleViolation validationRuleViolation : validationRule.getViolations()) {
      if (!validationRuleViolation.getActions().isEmpty()) {
        validationRuleViolation.getActions().get(0).actionPerformed(null);
      }
    }
  }
  if (showValidation) {
    if (suite.hasErrors()) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
  }
}",0.989612993783838
88504,"/** 
 * @param elementIds     collection of elements to get mms data for
 * @param depth          depth to recurse through child elements. takes priority over recurse field
 * @param project        project to check
 * @param progressStatus progress status object, can be null
 * @return object node response
 * @throws ServerException
 * @throws IOException
 * @throws URISyntaxException
 */
public static JsonParser getElementsRecursively(Project project,Collection<String> elementIds,int depth,ProgressStatus progressStatus) throws ServerException, IOException, URISyntaxException {
  if (elementIds == null || elementIds.isEmpty()) {
    return null;
  }
  URIBuilder requestUri=getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  if (depth == -1 || depth > 0) {
    requestUri.setParameter(""String_Node_Str"",java.lang.Integer.toString(depth));
  }
  File sendData=createEntityFile(MMSUtils.class,ContentType.APPLICATION_JSON,elementIds,JsonBlobType.ELEMENT_ID);
  Utils.guilog(""String_Node_Str"" + elementIds.size() + ""String_Node_Str"");
  if (progressStatus != null) {
    return sendCancellableMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.PUT,requestUri,sendData,ContentType.APPLICATION_JSON),progressStatus);
  }
  return sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.PUT,requestUri,sendData,ContentType.APPLICATION_JSON));
}","/** 
 * @param elementIds     collection of elements to get mms data for
 * @param depth          depth to recurse through child elements. takes priority over recurse field
 * @param project        project to check
 * @param progressStatus progress status object, can be null
 * @return object node response
 * @throws ServerException
 * @throws IOException
 * @throws URISyntaxException
 */
public static File getElementsRecursively(Project project,Collection<String> elementIds,int depth,ProgressStatus progressStatus) throws ServerException, IOException, URISyntaxException {
  if (elementIds == null || elementIds.isEmpty()) {
    return null;
  }
  URIBuilder requestUri=getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  if (depth == -1 || depth > 0) {
    requestUri.setParameter(""String_Node_Str"",java.lang.Integer.toString(depth));
  }
  File sendData=createEntityFile(MMSUtils.class,ContentType.APPLICATION_JSON,elementIds,JsonBlobType.ELEMENT_ID);
  Utils.guilog(""String_Node_Str"" + elementIds.size() + ""String_Node_Str"");
  if (progressStatus != null) {
    return sendCancellableMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.PUT,requestUri,sendData,ContentType.APPLICATION_JSON),progressStatus);
  }
  return sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.PUT,requestUri,sendData,ContentType.APPLICATION_JSON));
}",0.9950564971751412
88505,"/** 
 * General purpose method for running a cancellable request. Builds a new thread to run the request, and passes any relevant exception information back out via atomic references and generates new exceptions in calling thread
 * @param request
 * @param progressStatus
 * @return
 * @throws IOException
 * @throws URISyntaxException
 * @throws ServerException    contains both response code and response body
 */
public static JsonParser sendCancellableMMSRequest(final Project project,HttpRequestBase request,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  final AtomicReference<JsonParser> responseJsonParser=new AtomicReference<>();
  final AtomicReference<Integer> ecode=new AtomicReference<>();
  final AtomicReference<ThreadRequestExceptionType> etype=new AtomicReference<>();
  final AtomicReference<String> emsg=new AtomicReference<>();
  Thread t=new Thread(() -> {
    JsonParser response=null;
    try {
      response=sendMMSRequest(project,request);
      etype.set(null);
      ecode.set(200);
      emsg.set(""String_Node_Str"");
    }
 catch (    ServerException ex) {
      etype.set(ThreadRequestExceptionType.SERVER_EXCEPTION);
      ecode.set(ex.getCode());
      emsg.set(ex.getMessage());
      ex.printStackTrace();
    }
catch (    IOException e) {
      etype.set(ThreadRequestExceptionType.IO_EXCEPTION);
      emsg.set(e.getMessage());
      e.printStackTrace();
    }
catch (    URISyntaxException e) {
      etype.set(ThreadRequestExceptionType.URI_SYNTAX_EXCEPTION);
      emsg.set(e.getMessage());
      e.printStackTrace();
    }
    responseJsonParser.set(response);
  }
);
  t.start();
  try {
    t.join(CHECK_CANCEL_DELAY);
    while (t.isAlive()) {
      if (progressStatus != null && progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        return null;
      }
      t.join(CHECK_CANCEL_DELAY);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (etype.get() == ThreadRequestExceptionType.SERVER_EXCEPTION) {
    throw new ServerException(emsg.get(),ecode.get());
  }
 else   if (etype.get() == ThreadRequestExceptionType.IO_EXCEPTION) {
    throw new IOException(emsg.get());
  }
 else   if (etype.get() == ThreadRequestExceptionType.URI_SYNTAX_EXCEPTION) {
    throw new URISyntaxException(request.getURI().toString(),emsg.get());
  }
  return responseJsonParser.get();
}","/** 
 * General purpose method for running a cancellable request. Builds a new thread to run the request, and passes any relevant exception information back out via atomic references and generates new exceptions in calling thread
 * @param request
 * @param progressStatus
 * @return
 * @throws IOException
 * @throws URISyntaxException
 * @throws ServerException    contains both response code and response body
 */
public static File sendCancellableMMSRequest(final Project project,HttpRequestBase request,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  final AtomicReference<File> responseFile=new AtomicReference<>();
  final AtomicReference<Integer> ecode=new AtomicReference<>();
  final AtomicReference<ThreadRequestExceptionType> etype=new AtomicReference<>();
  final AtomicReference<String> emsg=new AtomicReference<>();
  Thread t=new Thread(() -> {
    File response=null;
    try {
      response=sendMMSRequest(project,request);
      etype.set(null);
      ecode.set(200);
      emsg.set(""String_Node_Str"");
    }
 catch (    ServerException ex) {
      etype.set(ThreadRequestExceptionType.SERVER_EXCEPTION);
      ecode.set(ex.getCode());
      emsg.set(ex.getMessage());
      ex.printStackTrace();
    }
catch (    IOException e) {
      etype.set(ThreadRequestExceptionType.IO_EXCEPTION);
      emsg.set(e.getMessage());
      e.printStackTrace();
    }
catch (    URISyntaxException e) {
      etype.set(ThreadRequestExceptionType.URI_SYNTAX_EXCEPTION);
      emsg.set(e.getMessage());
      e.printStackTrace();
    }
    responseFile.set(response);
  }
);
  t.start();
  try {
    t.join(CHECK_CANCEL_DELAY);
    while (t.isAlive()) {
      if (progressStatus != null && progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        return null;
      }
      t.join(CHECK_CANCEL_DELAY);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (etype.get() == ThreadRequestExceptionType.SERVER_EXCEPTION) {
    throw new ServerException(emsg.get(),ecode.get());
  }
 else   if (etype.get() == ThreadRequestExceptionType.IO_EXCEPTION) {
    throw new IOException(emsg.get());
  }
 else   if (etype.get() == ThreadRequestExceptionType.URI_SYNTAX_EXCEPTION) {
    throw new URISyntaxException(request.getURI().toString(),emsg.get());
  }
  return responseFile.get();
}",0.9825508932280848
88506,"public static String getMmsOrg(Project project) throws IOException, URISyntaxException, ServerException {
  URIBuilder uriBuilder=getServiceProjectsUri(project);
  JsonParser responseParser=sendMMSRequest(project,buildRequest(HttpRequestType.GET,uriBuilder));
  ObjectNode response=JacksonUtils.parseJsonObject(responseParser);
  JsonNode arrayNode;
  if (((arrayNode=response.get(""String_Node_Str"")) != null) && arrayNode.isArray()) {
    JsonNode value;
    for (    JsonNode projectNode : arrayNode) {
      if (((value=projectNode.get(MDKConstants.ID_KEY)) != null) && value.isTextual() && value.asText().equals(Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()))&& ((value=projectNode.get(MDKConstants.ORG_ID_KEY)) != null)&& value.isTextual()&& !value.asText().isEmpty()) {
        return value.asText();
      }
    }
  }
  return null;
}","public static String getMmsOrg(Project project) throws IOException, URISyntaxException, ServerException {
  URIBuilder uriBuilder=getServiceProjectsUri(project);
  File responseFile=sendMMSRequest(project,buildRequest(HttpRequestType.GET,uriBuilder));
  try (JsonParser responseParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
    ObjectNode response=JacksonUtils.parseJsonObject(responseParser);
    JsonNode arrayNode;
    if (((arrayNode=response.get(""String_Node_Str"")) != null) && arrayNode.isArray()) {
      JsonNode value;
      for (      JsonNode projectNode : arrayNode) {
        if (((value=projectNode.get(MDKConstants.ID_KEY)) != null) && value.isTextual() && value.asText().equals(Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()))&& ((value=projectNode.get(MDKConstants.ORG_ID_KEY)) != null)&& value.isTextual()&& !value.asText().isEmpty()) {
          return value.asText();
        }
      }
    }
  }
   return null;
}",0.9127371273712735
88507,"public static JsonParser getElementRecursively(Project project,String elementId,int depth,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  Collection<String> elementIds=new ArrayList<>(1);
  elementIds.add(elementId);
  return getElementsRecursively(project,elementIds,depth,progressStatus);
}","public static File getElementRecursively(Project project,String elementId,int depth,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  Collection<String> elementIds=new ArrayList<>(1);
  elementIds.add(elementId);
  return getElementsRecursively(project,elementIds,depth,progressStatus);
}",0.9789156626506024
88508,"public static ObjectNode getElement(Project project,String elementId,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  Collection<String> elementIds=new ArrayList<>(1);
  elementIds.add(elementId);
  JsonParser responseParser=getElementsRecursively(project,elementIds,0,progressStatus);
  ObjectNode response=JacksonUtils.parseJsonObject(responseParser);
  JsonNode value;
  if (((value=response.get(""String_Node_Str"")) != null) && value.isArray() && (value=((ArrayNode)value).remove(1)) != null && (value instanceof ObjectNode)) {
    return (ObjectNode)value;
  }
  return response;
}","public static ObjectNode getElement(Project project,String elementId,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  Collection<String> elementIds=new ArrayList<>(1);
  elementIds.add(elementId);
  File responseFile=getElementsRecursively(project,elementIds,0,progressStatus);
  try (JsonParser responseParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
    ObjectNode response=JacksonUtils.parseJsonObject(responseParser);
    JsonNode value;
    if (((value=response.get(""String_Node_Str"")) != null) && value.isArray() && (value=((ArrayNode)value).remove(1)) != null && (value instanceof ObjectNode)) {
      return (ObjectNode)value;
    }
  }
   return null;
}",0.8702742772424018
88509,"/** 
 * @param elementIds     collection of elements to get mms data for
 * @param project        project to check
 * @param progressStatus progress status object, can be null
 * @return object node response
 * @throws ServerException
 * @throws IOException
 * @throws URISyntaxException
 */
public static JsonParser getElements(Project project,Collection<String> elementIds,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  return getElementsRecursively(project,elementIds,0,progressStatus);
}","/** 
 * @param elementIds     collection of elements to get mms data for
 * @param project        project to check
 * @param progressStatus progress status object, can be null
 * @return object node response
 * @throws ServerException
 * @throws IOException
 * @throws URISyntaxException
 */
public static File getElements(Project project,Collection<String> elementIds,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  return getElementsRecursively(project,elementIds,0,progressStatus);
}",0.986842105263158
88510,"/** 
 * General purpose method for sending a constructed http request via http client.
 * @param request
 * @return
 * @throws IOException
 * @throws ServerException
 */
public static JsonParser sendMMSRequest(Project project,HttpRequestBase request) throws IOException, ServerException, URISyntaxException {
  File targetFile=File.createTempFile(""String_Node_Str"",null);
  targetFile.deleteOnExit();
  HttpEntityEnclosingRequest httpEntityEnclosingRequest=null;
  boolean logBody=MDKOptionsGroup.getMDKOptions().isLogJson();
  logBody=logBody && request instanceof HttpEntityEnclosingRequest;
  logBody=logBody && ((httpEntityEnclosingRequest=(HttpEntityEnclosingRequest)request).getEntity() != null);
  logBody=logBody && httpEntityEnclosingRequest.getEntity().isRepeatable();
  System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString());
  boolean throwServerException=false;
  int responseCode;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent();OutputStream outputStream=new FileOutputStream(targetFile)){
    responseCode=response.getStatusLine().getStatusCode();
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString()+ ""String_Node_Str""+ responseCode);
    System.out.println(""String_Node_Str"" + targetFile.getPath());
    if (responseCode == HttpURLConnection.HTTP_OK || (request.getMethod().equals(""String_Node_Str"") && responseCode == HttpURLConnection.HTTP_NOT_FOUND && responseType.equals(""String_Node_Str""))) {
    }
 else     if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {
      Utils.guilog(""String_Node_Str"" + responseCode);
      MMSLogoutAction.logoutAction(project);
      throwServerException=true;
    }
 else {
      Utils.guilog(""String_Node_Str"" + responseCode);
      throwServerException=true;
    }
    if (inputStream != null && responseType.equals(""String_Node_Str"")) {
      byte[] buffer=new byte[8 * 1024];
      int bytesRead;
      while ((bytesRead=inputStream.read(buffer)) != -1) {
        outputStream.write(buffer,0,bytesRead);
      }
    }
  }
   JsonFactory jsonFactory=JacksonUtils.getJsonFactory();
  try (JsonParser jsonParser=jsonFactory.createParser(targetFile)){
    while (jsonParser.nextFieldName() != null && !jsonParser.nextFieldName().equals(""String_Node_Str"")) {
    }
    if (jsonParser.getCurrentToken() == JsonToken.FIELD_NAME) {
      jsonParser.nextToken();
      Application.getInstance().getGUILog().log(""String_Node_Str"" + jsonParser.getText());
    }
  }
   if (throwServerException) {
    Utils.showPopupMessage(""String_Node_Str"");
    throw new ServerException(targetFile.getAbsolutePath(),responseCode);
  }
  return JacksonUtils.getJsonFactory().createParser(targetFile);
}","/** 
 * General purpose method for sending a constructed http request via http client.
 * @param request
 * @return
 * @throws IOException
 * @throws ServerException
 */
public static File sendMMSRequest(Project project,HttpRequestBase request) throws IOException, ServerException, URISyntaxException {
  File targetFile=File.createTempFile(""String_Node_Str"",null);
  targetFile.deleteOnExit();
  HttpEntityEnclosingRequest httpEntityEnclosingRequest=null;
  boolean logBody=MDKOptionsGroup.getMDKOptions().isLogJson();
  logBody=logBody && request instanceof HttpEntityEnclosingRequest;
  logBody=logBody && ((httpEntityEnclosingRequest=(HttpEntityEnclosingRequest)request).getEntity() != null);
  logBody=logBody && httpEntityEnclosingRequest.getEntity().isRepeatable();
  System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString());
  boolean throwServerException=false;
  int responseCode;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent();OutputStream outputStream=new FileOutputStream(targetFile)){
    responseCode=response.getStatusLine().getStatusCode();
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString()+ ""String_Node_Str""+ responseCode);
    System.out.println(""String_Node_Str"" + targetFile.getPath());
    if (responseCode == HttpURLConnection.HTTP_OK || (request.getMethod().equals(""String_Node_Str"") && responseCode == HttpURLConnection.HTTP_NOT_FOUND && responseType.equals(""String_Node_Str""))) {
    }
 else     if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {
      Utils.guilog(""String_Node_Str"" + responseCode);
      MMSLogoutAction.logoutAction(project);
      throwServerException=true;
    }
 else {
      Utils.guilog(""String_Node_Str"" + responseCode);
      throwServerException=true;
    }
    if (inputStream != null && responseType.equals(""String_Node_Str"")) {
      byte[] buffer=new byte[8 * 1024];
      int bytesRead;
      while ((bytesRead=inputStream.read(buffer)) != -1) {
        outputStream.write(buffer,0,bytesRead);
      }
    }
  }
   JsonFactory jsonFactory=JacksonUtils.getJsonFactory();
  try (JsonParser jsonParser=jsonFactory.createParser(targetFile)){
    while (jsonParser.nextFieldName() != null && !jsonParser.nextFieldName().equals(""String_Node_Str"")) {
    }
    if (jsonParser.getCurrentToken() == JsonToken.FIELD_NAME) {
      jsonParser.nextToken();
      Application.getInstance().getGUILog().log(""String_Node_Str"" + jsonParser.getText());
    }
  }
   if (throwServerException) {
    Utils.showPopupMessage(""String_Node_Str"");
    throw new ServerException(targetFile.getAbsolutePath(),responseCode);
  }
  return targetFile;
}",0.9873837981407704
88511,"public static String getUri(Project project) throws IOException, URISyntaxException, ServerException {
  URIBuilder uriBuilder=getServiceProjectsUri(project);
  ObjectNode response=JacksonUtils.parseJsonObject(sendMMSRequest(project,buildRequest(HttpRequestType.GET,uriBuilder)));
  JsonNode arrayNode;
  if (((arrayNode=response.get(""String_Node_Str"")) != null) && arrayNode.isArray()) {
    JsonNode value;
    for (    JsonNode projectNode : arrayNode) {
      if (((value=projectNode.get(MDKConstants.ID_KEY)) != null) && value.isTextual() && value.asText().equals(Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()))&& ((value=projectNode.get(MDKConstants.TWC_URI_KEY)) != null)&& value.isTextual()&& !value.asText().isEmpty()) {
        return value.asText();
      }
    }
  }
  return null;
}","public static String getUri(Project project) throws IOException, URISyntaxException, ServerException {
  URIBuilder uriBuilder=getServiceProjectsUri(project);
  File responseFile=sendMMSRequest(project,buildRequest(HttpRequestType.GET,uriBuilder));
  try (JsonParser responseParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
    ObjectNode response=JacksonUtils.parseJsonObject(responseParser);
    JsonNode arrayNode;
    if (((arrayNode=response.get(""String_Node_Str"")) != null) && arrayNode.isArray()) {
      JsonNode value;
      for (      JsonNode projectNode : arrayNode) {
        if (((value=projectNode.get(MDKConstants.ID_KEY)) != null) && value.isTextual() && value.asText().equals(Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()))&& ((value=projectNode.get(MDKConstants.TWC_URI_KEY)) != null)&& value.isTextual()&& !value.asText().isEmpty()) {
          return value.asText();
        }
      }
    }
  }
   return null;
}",0.8447412353923205
88512,"public void commitAction(){
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsUri(project);
  if (requestUri == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  Collection<ObjectNode> refsNodes=new LinkedList<>();
  ObjectNode branchNode=BranchValidator.getRefObjectNode(project,branchInfo,updateBranch);
  refsNodes.add(branchNode);
  JsonParser response;
  try {
    File sendFile=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,refsNodes,MMSUtils.JsonBlobType.REF);
    HttpRequestBase request=MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendFile,ContentType.APPLICATION_JSON);
    response=MMSUtils.sendMMSRequest(project,request);
  }
 catch (  IOException|URISyntaxException|ServerException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return;
  }
  if (shouldCommitModel) {
    RunnableWithProgress temp=new ManualSyncActionRunner<>(CommitClientElementAction.class,Collections.singletonList(project.getPrimaryModel()),project,-1);
    ProgressStatusRunner.runWithProgressStatus(temp,""String_Node_Str"",true,0);
  }
}","public void commitAction(){
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsUri(project);
  if (requestUri == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  Collection<ObjectNode> refsNodes=new LinkedList<>();
  ObjectNode branchNode=BranchValidator.getRefObjectNode(project,branchInfo,updateBranch);
  refsNodes.add(branchNode);
  File responseFile;
  try {
    File sendFile=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,refsNodes,MMSUtils.JsonBlobType.REF);
    HttpRequestBase request=MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendFile,ContentType.APPLICATION_JSON);
    responseFile=MMSUtils.sendMMSRequest(project,request);
  }
 catch (  IOException|URISyntaxException|ServerException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return;
  }
  if (shouldCommitModel) {
    RunnableWithProgress temp=new ManualSyncActionRunner<>(CommitClientElementAction.class,Collections.singletonList(project.getPrimaryModel()),project,-1);
    ProgressStatusRunner.runWithProgressStatus(temp,""String_Node_Str"",true,0);
  }
}",0.9839662447257383
88513,"/** 
 * Sends a POST request to MMS with the element JSON, creating or updating the element as appropriate.
 * @param elementsToPost Collection of elements you want to directly post on the MMS
 * @throws IllegalStateException
 */
public static ObjectNode postMmsElements(Collection<Element> elementsToPost,Project project) throws IOException, URISyntaxException, ServerException {
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  LinkedList<ObjectNode> elementJson=new LinkedList<>();
  for (  Element target : elementsToPost) {
    ObjectNode elemJson=Converters.getElementToJsonConverter().apply(target,project);
    elementJson.add(elemJson);
  }
  File sendData=MMSUtils.createEntityFile(MDKHelper.class,ContentType.APPLICATION_JSON,elementJson,MMSUtils.JsonBlobType.ELEMENT_JSON);
  return JacksonUtils.parseJsonObject(MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON)));
}","/** 
 * Sends a POST request to MMS with the element JSON, creating or updating the element as appropriate.
 * @param elementsToPost Collection of elements you want to directly post on the MMS
 * @throws IllegalStateException
 */
public static ObjectNode postMmsElements(Collection<Element> elementsToPost,Project project) throws IOException, URISyntaxException, ServerException {
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  LinkedList<ObjectNode> elementJson=new LinkedList<>();
  for (  Element target : elementsToPost) {
    ObjectNode elemJson=Converters.getElementToJsonConverter().apply(target,project);
    elementJson.add(elemJson);
  }
  File sendData=MMSUtils.createEntityFile(MDKHelper.class,ContentType.APPLICATION_JSON,elementJson,MMSUtils.JsonBlobType.ELEMENT_JSON);
  File responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON));
  try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
    return JacksonUtils.parseJsonObject(jsonParser);
  }
 }",0.9090086011770032
88514,"/** 
 * Sends a DELETE request to MMS for the indicated elements.
 * @param elementsToDelete Collection of elements you want to directly delete on the MMS
 * @throws IllegalStateException
 * @throws ServerException
 */
public static ObjectNode deleteMmsElements(Collection<Element> elementsToDelete,Project project) throws IOException, URISyntaxException, ServerException {
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  File sendData=MMSUtils.createEntityFile(MDKHelper.class,ContentType.APPLICATION_JSON,elementsToDelete,MMSUtils.JsonBlobType.ELEMENT_ID);
  return JacksonUtils.parseJsonObject(MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON)));
}","/** 
 * Sends a DELETE request to MMS for the indicated elements.
 * @param elementsToDelete Collection of elements you want to directly delete on the MMS
 * @throws IllegalStateException
 * @throws ServerException
 */
public static ObjectNode deleteMmsElements(Collection<Element> elementsToDelete,Project project) throws IOException, URISyntaxException, ServerException {
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  File sendData=MMSUtils.createEntityFile(MDKHelper.class,ContentType.APPLICATION_JSON,elementsToDelete,MMSUtils.JsonBlobType.ELEMENT_ID);
  File responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON));
  try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
    return JacksonUtils.parseJsonObject(jsonParser);
  }
 }",0.8869960249858035
88515,"public static Collection<Element> getElementsById(Collection<String> elementIds,Project project,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  if (elementIds == null || elementIds.isEmpty()) {
    return null;
  }
  final ObjectNode requests=JacksonUtils.getObjectMapper().createObjectNode();
  File sendData=MMSUtils.createEntityFile(MDKHelper.class,ContentType.APPLICATION_JSON,elementIds,MMSUtils.JsonBlobType.ELEMENT_ID);
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  Utils.guilog(""String_Node_Str"" + elementIds.size() + ""String_Node_Str"");
  JsonParser jsonParser;
  if (progressStatus != null) {
    jsonParser=MMSUtils.sendCancellableMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri,sendData,ContentType.APPLICATION_JSON),progressStatus);
  }
 else {
    jsonParser=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri,sendData,ContentType.APPLICATION_JSON));
  }
  LinkedList<Element> elementsList=new LinkedList<>();
  for (  ObjectNode elementJson : JacksonUtils.parseJsonResponseToObjectList(jsonParser,null)) {
    JsonNode value;
    if ((value=elementJson.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
      elementsList.add(Converters.getIdToElementConverter().apply(value.asText(),project));
    }
  }
  return elementsList;
}","public static Collection<Element> getElementsById(Collection<String> elementIds,Project project,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  if (elementIds == null || elementIds.isEmpty()) {
    return null;
  }
  final ObjectNode requests=JacksonUtils.getObjectMapper().createObjectNode();
  File sendData=MMSUtils.createEntityFile(MDKHelper.class,ContentType.APPLICATION_JSON,elementIds,MMSUtils.JsonBlobType.ELEMENT_ID);
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  Utils.guilog(""String_Node_Str"" + elementIds.size() + ""String_Node_Str"");
  File responseFile;
  if (progressStatus != null) {
    responseFile=MMSUtils.sendCancellableMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri,sendData,ContentType.APPLICATION_JSON),progressStatus);
  }
 else {
    responseFile=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri,sendData,ContentType.APPLICATION_JSON));
  }
  LinkedList<Element> elementsList=new LinkedList<>();
  try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
    for (    ObjectNode elementJson : JacksonUtils.parseJsonResponseToObjectList(jsonParser,null)) {
      JsonNode value;
      if ((value=elementJson.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
        elementsList.add(Converters.getIdToElementConverter().apply(value.asText(),project));
      }
    }
  }
   return elementsList;
}",0.9372718221042152
88516,"@Override public void run(ProgressStatus progressStatus){
  progressStatus.init(""String_Node_Str"",6);
  if (manageSesssions) {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().closeSession(project);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(1);
  DocumentValidator dv=new DocumentValidator(start);
  dv.validateDocument();
  if (dv.isFatal()) {
    dv.printErrors(false);
    return;
  }
  DocumentGenerator dg=new DocumentGenerator(start,dv,null,false);
  Document dge=dg.parseDocument(true,recurse,false);
  new PostProcessor().process(dge);
  DocBookOutputVisitor docBookOutputVisitor=new DocBookOutputVisitor(true);
  dge.accept(docBookOutputVisitor);
  DBBook book=docBookOutputVisitor.getBook();
  if (book == null) {
    return;
  }
  ViewHierarchyVisitor viewHierarchyVisitor=new ViewHierarchyVisitor();
  dge.accept(viewHierarchyVisitor);
  Map<String,Pair<ObjectNode,InstanceSpecification>> instanceSpecificationMap=new LinkedHashMap<>();
  Map<String,Pair<ObjectNode,Slot>> slotMap=new LinkedHashMap<>();
  Map<String,ViewMapping> viewMap=new LinkedHashMap<>(viewHierarchyVisitor.getView2ViewElements().size());
  for (  Element view : viewHierarchyVisitor.getView2ViewElements().keySet()) {
    if (processedElements.contains(view)) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
      continue;
    }
    ViewMapping viewMapping=viewMap.containsKey(Converters.getElementToIdConverter().apply(view)) ? viewMap.get(Converters.getElementToIdConverter().apply(view)) : new ViewMapping();
    viewMapping.setElement(view);
    viewMap.put(Converters.getElementToIdConverter().apply(view),viewMapping);
  }
  List<Constraint> constraintsToBeDeleted=new ArrayList<>(viewMap.size());
  for (  ViewMapping viewMapping : viewMap.values()) {
    Element view=viewMapping.getElement();
    if (view == null) {
      continue;
    }
    Constraint constraint=Utils.getViewConstraint(view);
    if (constraint != null) {
      constraintsToBeDeleted.add(constraint);
    }
  }
  if (!constraintsToBeDeleted.isEmpty()) {
    if (manageSesssions) {
      SessionManager.getInstance().createSession(project,""String_Node_Str"");
    }
    for (    Constraint constraint : constraintsToBeDeleted) {
      if (constraint.isEditable()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(constraint));
        try {
          ModelElementsManager.getInstance().removeElement(constraint);
        }
 catch (        ReadOnlyElementException e) {
          updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str""));
          failure=true;
        }
      }
 else {
        updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str""));
        failure=true;
      }
    }
    if (manageSesssions) {
      SessionManager.getInstance().closeSession(project);
    }
  }
  if (failure) {
    if (showValidation) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
    return;
  }
  if (handleCancel(progressStatus)) {
    return;
  }
  LocalSyncTransactionCommitListener localSyncTransactionCommitListener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  if (manageSesssions) {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().closeSession(project);
    }
    SessionManager.getInstance().createSession(project,""String_Node_Str"");
  }
  if (localSyncTransactionCommitListener != null) {
    localSyncTransactionCommitListener.setDisabled(true);
  }
  List<String> viewIDs=new ArrayList<>();
  if (!viewMap.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(2);
    ObjectNode viewResponse;
    try {
      viewResponse=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,viewMap.keySet(),progressStatus));
    }
 catch (    ServerException|IOException|URISyntaxException e) {
      failure=true;
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
    JsonNode viewElementsJsonArray;
    if (viewResponse != null && (viewElementsJsonArray=viewResponse.get(""String_Node_Str"")) != null && viewElementsJsonArray.isArray()) {
      Queue<String> instanceIDs=new LinkedList<>();
      Queue<String> slotIDs=new LinkedList<>();
      Property generatedFromViewProperty=Utils.getGeneratedFromViewProperty(project), generatedFromElementProperty=Utils.getGeneratedFromElementProperty(project);
      for (      JsonNode elementJsonNode : viewElementsJsonArray) {
        if (!elementJsonNode.isObject()) {
          continue;
        }
        ObjectNode elementObjectNode=(ObjectNode)elementJsonNode;
        JsonNode viewOperandJsonNode=JacksonUtils.getAtPath(elementObjectNode,""String_Node_Str"" + MDKConstants.CONTENTS_KEY + ""String_Node_Str""), sysmlIdJson=elementObjectNode.get(MDKConstants.ID_KEY);
        String sysmlId;
        if (sysmlIdJson != null && sysmlIdJson.isTextual() && !(sysmlId=sysmlIdJson.asText()).isEmpty()) {
          viewIDs.add(sysmlId);
          if (viewOperandJsonNode != null && viewOperandJsonNode.isArray()) {
            List<String> viewInstanceIDs=new ArrayList<>(viewOperandJsonNode.size());
            for (            JsonNode viewOperandJson : viewOperandJsonNode) {
              JsonNode instanceIdJsonNode=viewOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
              String instanceId;
              if (instanceIdJsonNode != null && instanceIdJsonNode.isTextual() && !(instanceId=instanceIdJsonNode.asText()).isEmpty()) {
                if (generatedFromViewProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                }
                if (generatedFromElementProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                }
                instanceIDs.add(instanceId);
                viewInstanceIDs.add(instanceId);
              }
            }
            ViewMapping viewMapping=viewMap.containsKey(sysmlId) ? viewMap.get(sysmlId) : new ViewMapping();
            viewMapping.setObjectNode(elementObjectNode);
            viewMapping.setInstanceIDs(viewInstanceIDs);
            viewMap.put(sysmlId,viewMapping);
          }
        }
      }
      List<ObjectNode> instanceObjectNodes=new ArrayList<>();
      List<ObjectNode> slotObjectNodes=new ArrayList<>();
      while (!instanceIDs.isEmpty() && !slotIDs.isEmpty()) {
        if (handleCancel(progressStatus)) {
          return;
        }
        List<String> elementIDs=new ArrayList<>(instanceIDs);
        elementIDs.addAll(slotIDs);
        ObjectNode instanceAndSlotResponse;
        try {
          instanceAndSlotResponse=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,elementIDs,progressStatus));
        }
 catch (        ServerException|IOException|URISyntaxException e) {
          failure=true;
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          e.printStackTrace();
          if (manageSesssions) {
            SessionManager.getInstance().cancelSession(project);
          }
          return;
        }
        instanceIDs.clear();
        slotIDs.clear();
        JsonNode instanceAndSlotElementsJsonArray;
        if (instanceAndSlotResponse != null && (instanceAndSlotElementsJsonArray=instanceAndSlotResponse.get(""String_Node_Str"")) != null && instanceAndSlotElementsJsonArray.isArray()) {
          for (          JsonNode elementJson : instanceAndSlotElementsJsonArray) {
            JsonNode instanceOperandJsonArray=JacksonUtils.getAtPath(elementJson,""String_Node_Str"");
            if (instanceOperandJsonArray != null && instanceOperandJsonArray.isArray()) {
              for (              JsonNode instanceOperandJson : instanceOperandJsonArray) {
                JsonNode instanceIdJson=instanceOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
                String instanceId;
                if (instanceIdJson != null && instanceIdJson.isTextual() && !(instanceId=instanceIdJson.asText()).isEmpty()) {
                  if (generatedFromViewProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                  }
                  if (generatedFromElementProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                  }
                  instanceIDs.add(instanceId);
                }
              }
            }
            JsonNode typeJson=elementJson.get(MDKConstants.TYPE_KEY);
            if (typeJson.isTextual() && elementJson.isObject()) {
              (typeJson.asText().equalsIgnoreCase(""String_Node_Str"") ? slotObjectNodes : instanceObjectNodes).add((ObjectNode)elementJson);
            }
          }
        }
      }
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(3);
      EMFImporter emfImporter=new EMFImporter(){
        @Override public List<PreProcessor> getPreProcessors(){
          if (preProcessors == null) {
            preProcessors=new ArrayList<>(super.getPreProcessors());
            preProcessors.remove(PreProcessor.SYSML_ID_VALIDATION);
          }
          return preProcessors;
        }
        @Override public List<EStructuralFeatureOverride> getEStructuralFeatureOverrides(){
          if (eStructuralFeatureOverrides == null) {
            eStructuralFeatureOverrides=new ArrayList<>(super.getEStructuralFeatureOverrides());
            eStructuralFeatureOverrides.remove(EStructuralFeatureOverride.OWNER);
            eStructuralFeatureOverrides.add(new EStructuralFeatureOverride(EStructuralFeatureOverride.OWNER.getPredicate(),(objectNode,eStructuralFeature,project,strict,element) -> {
              if (element instanceof InstanceSpecification) {
                element.setOwner(project.getPrimaryModel());
                return element;
              }
              return EStructuralFeatureOverride.OWNER.getFunction().apply(objectNode,eStructuralFeature,project,strict,element);
            }
));
          }
          return eStructuralFeatureOverrides;
        }
      }
;
      for (      Boolean strict : Arrays.asList(false,true)) {
        ListIterator<ObjectNode> instanceObjectNodesIterator=instanceObjectNodes.listIterator(instanceObjectNodes.size());
        while (instanceObjectNodesIterator.hasPrevious()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode instanceObjectNode=instanceObjectNodesIterator.previous();
          try {
            Changelog.Change<Element> change=emfImporter.apply(instanceObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof InstanceSpecification) {
              instanceSpecificationMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(instanceObjectNode,(InstanceSpecification)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + instanceObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            instanceObjectNodesIterator.remove();
          }
        }
        ListIterator<ObjectNode> slotObjectNodesIterator=slotObjectNodes.listIterator();
        while (slotObjectNodesIterator.hasNext()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode slotObjectNode=slotObjectNodesIterator.next();
          try {
            Changelog.Change<Element> change=emfImporter.apply(slotObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof Slot) {
              slotMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(slotObjectNode,(Slot)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + slotObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            slotObjectNodesIterator.remove();
          }
        }
      }
      for (      ViewMapping viewMapping : viewMap.values()) {
        Element view=viewMapping.getElement();
        if (handleCancel(progressStatus)) {
          return;
        }
        ObjectNode viewObjectNode=viewMapping.getObjectNode();
        if (viewObjectNode == null) {
          continue;
        }
        JsonNode viewContentsJsonNode=viewObjectNode.get(MDKConstants.CONTENTS_KEY);
        if (viewContentsJsonNode == null || !viewContentsJsonNode.isObject()) {
          continue;
        }
        try {
          Changelog.Change<Element> change=Converters.getJsonToElementConverter().apply((ObjectNode)viewContentsJsonNode,project,false);
          if (change.getChanged() != null && change.getChanged() instanceof Expression) {
            instanceUtils.getOrCreateViewConstraint(view).setSpecification((Expression)change.getChanged());
          }
        }
 catch (        ImportException|ReadOnlyElementException e) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
          continue;
        }
      }
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(4);
  DBAlfrescoVisitor dbAlfrescoVisitor=new DBAlfrescoVisitor(recurse,true);
  try {
    book.accept(dbAlfrescoVisitor);
  }
 catch (  Exception e) {
    Utils.printException(e);
    e.printStackTrace();
  }
  Map<Element,List<PresentationElementInstance>> view2pe=dbAlfrescoVisitor.getView2Pe();
  Map<Element,List<PresentationElementInstance>> view2unused=dbAlfrescoVisitor.getView2Unused();
  List<Element> views=instanceUtils.getViewProcessOrder(start,dbAlfrescoVisitor.getHierarchyElements());
  views.removeAll(processedElements);
  Set<Element> skippedViews=new HashSet<>();
  for (  Element view : views) {
    if (ProjectUtilities.isElementInAttachedProject(view)) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewInProject.addViolation(violation);
      skippedViews.add(view);
    }
    if (!viewIDs.contains(Converters.getElementToIdConverter().apply(view))) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewDoesNotExist.addViolation(violation);
      skippedViews.add(view);
    }
  }
  if (failure) {
    if (showValidation) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
    if (manageSesssions) {
      SessionManager.getInstance().cancelSession(project);
    }
    return;
  }
  try {
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      handlePes(view2pe.get(view),null);
      instanceUtils.updateOrCreateConstraintFromPresentationElements(view,view2pe.get(view));
    }
    if (handleCancel(progressStatus)) {
      return;
    }
    LinkedList<ObjectNode> elementsToCommit=new LinkedList<>();
    Queue<Pair<InstanceSpecification,Element>> instanceToView=new LinkedList<>();
    Map<Element,JSONArray> view2elements=dbAlfrescoVisitor.getView2Elements();
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      ObjectNode clientViewJson=Converters.getElementToJsonConverter().apply(view,project);
      if (clientViewJson == null) {
        skippedViews.add(view);
        continue;
      }
      if (view2elements.get(view) != null) {
        ArrayNode displayedElements=clientViewJson.putArray(MDKConstants.DISPLAYED_ELEMENT_IDS_KEY);
        for (        Object id : view2elements.get(view)) {
          displayedElements.add((String)id);
        }
      }
      Object o;
      ObjectNode serverViewJson=(o=viewMap.get(Converters.getElementToIdConverter().apply(view))) != null ? ((ViewMapping)o).getObjectNode() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientViewJson,serverViewJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientViewJson,serverViewJson).toString());
        }
        elementsToCommit.add(clientViewJson);
      }
      for (      PresentationElementInstance presentationElementInstance : view2pe.get(view)) {
        if (presentationElementInstance.getInstance() != null) {
          instanceToView.add(new Pair<>(presentationElementInstance.getInstance(),view));
        }
      }
    }
    String viewInstanceBinId=MDKConstants.VIEW_INSTANCES_BIN_PREFIX + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    while (!instanceToView.isEmpty()) {
      Pair<InstanceSpecification,Element> pair=instanceToView.remove();
      InstanceSpecification instance=pair.getKey();
      List<InstanceSpecification> subInstances=instanceUtils.getCurrentInstances(instance,pair.getValue()).getAll();
      for (      InstanceSpecification subInstance : subInstances) {
        instanceToView.add(new Pair<>(subInstance,pair.getValue()));
      }
      ObjectNode clientInstanceSpecificationJson=Converters.getElementToJsonConverter().apply(instance,project);
      if (clientInstanceSpecificationJson == null) {
        continue;
      }
      clientInstanceSpecificationJson.put(MDKConstants.OWNER_ID_KEY,viewInstanceBinId);
      ObjectNode serverInstanceSpecificationJson=instanceSpecificationMap.containsKey(Converters.getElementToIdConverter().apply(instance)) ? instanceSpecificationMap.get(Converters.getElementToIdConverter().apply(instance)).getKey() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientInstanceSpecificationJson,serverInstanceSpecificationJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(instance) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientInstanceSpecificationJson,serverInstanceSpecificationJson).toString());
        }
        elementsToCommit.add(clientInstanceSpecificationJson);
      }
      for (      Slot slot : instance.getSlot()) {
        ObjectNode clientSlotJson=Converters.getElementToJsonConverter().apply(slot,project);
        if (clientSlotJson == null) {
          continue;
        }
        JsonNode serverSlotJson=slotMap.containsKey(Converters.getElementToIdConverter().apply(slot)) ? slotMap.get(Converters.getElementToIdConverter().apply(slot)).getKey() : null;
        if (!JsonEquivalencePredicate.getInstance().test(clientSlotJson,serverSlotJson)) {
          elementsToCommit.add(clientSlotJson);
          if (MDUtils.isDeveloperMode()) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(slot) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientSlotJson,serverSlotJson).toString());
          }
        }
      }
    }
    if (handleCancel(progressStatus)) {
      return;
    }
    boolean changed=false;
    if (elementsToCommit.size() > 0) {
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(5);
      Application.getInstance().getGUILog().log(""String_Node_Str"" + elementsToCommit.size() + ""String_Node_Str""+ (elementsToCommit.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,elementsToCommit,MMSUtils.JsonBlobType.ELEMENT_JSON);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    Set<String> mmsElementsToDelete=new HashSet<>();
    for (    List<PresentationElementInstance> presentationElementInstances : view2unused.values()) {
      for (      PresentationElementInstance presentationElementInstance : presentationElementInstances) {
        if (presentationElementInstance.getInstance() == null) {
          continue;
        }
        String id=Converters.getElementToIdConverter().apply(presentationElementInstance.getInstance());
        if (id == null) {
          continue;
        }
        mmsElementsToDelete.add(id);
      }
    }
    if (elementsToCommit.size() > 0) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + mmsElementsToDelete.size() + ""String_Node_Str""+ (mmsElementsToDelete.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,mmsElementsToDelete,MMSUtils.JsonBlobType.ELEMENT_ID);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    if (!changed) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(6);
    Set<Element> elementsToDelete=new HashSet<>();
    for (    Pair<ObjectNode,Slot> pair : slotMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Pair<ObjectNode,InstanceSpecification> pair : instanceSpecificationMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Element element : views) {
      Constraint constraint=Utils.getViewConstraint(element);
      if (constraint == null) {
        continue;
      }
      elementsToDelete.add(constraint);
      ValueSpecification valueSpecification=constraint.getSpecification();
      if (valueSpecification == null) {
        continue;
      }
      elementsToDelete.add(valueSpecification);
      List<ValueSpecification> operands;
      if (!(valueSpecification instanceof Expression) || (operands=((Expression)valueSpecification).getOperand()) == null) {
        continue;
      }
      for (      ValueSpecification operand : operands) {
        elementsToDelete.add(operand);
        InstanceSpecification instanceSpecification;
        if (!(operand instanceof InstanceValue) || (instanceSpecification=((InstanceValue)operand).getInstance()) == null) {
          continue;
        }
        elementsToDelete.add(instanceSpecification);
        for (        Slot slot : instanceSpecification.getSlot()) {
          elementsToDelete.add(slot);
          elementsToDelete.addAll(slot.getValue());
        }
      }
    }
    for (    Element element : elementsToDelete) {
      try {
        ModelElementsManager.getInstance().removeElement(element);
      }
 catch (      ReadOnlyElementException ignored) {
        System.out.println(""String_Node_Str"" + element.getLocalID());
      }
    }
    processedElements.addAll(views);
  }
 catch (  Exception e) {
    failure=true;
    Utils.printException(e);
  }
 finally {
    if (manageSesssions) {
      if (SessionManager.getInstance().isSessionCreated(project)) {
        SessionManager.getInstance().cancelSession(project);
      }
    }
    if (localSyncTransactionCommitListener != null) {
      localSyncTransactionCommitListener.setDisabled(false);
    }
  }
  ImageValidator iv=new ImageValidator(dbAlfrescoVisitor.getImages(),images);
  iv.validate(project);
  for (  ValidationRule validationRule : iv.getSuite().getValidationRules()) {
    for (    ValidationRuleViolation validationRuleViolation : validationRule.getViolations()) {
      if (!validationRuleViolation.getActions().isEmpty()) {
        validationRuleViolation.getActions().get(0).actionPerformed(null);
      }
    }
  }
  if (showValidation) {
    if (suite.hasErrors()) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
  }
}","@Override public void run(ProgressStatus progressStatus){
  progressStatus.init(""String_Node_Str"",6);
  if (manageSesssions) {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().closeSession(project);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(1);
  DocumentValidator dv=new DocumentValidator(start);
  dv.validateDocument();
  if (dv.isFatal()) {
    dv.printErrors(false);
    return;
  }
  DocumentGenerator dg=new DocumentGenerator(start,dv,null,false);
  Document dge=dg.parseDocument(true,recurse,false);
  new PostProcessor().process(dge);
  DocBookOutputVisitor docBookOutputVisitor=new DocBookOutputVisitor(true);
  dge.accept(docBookOutputVisitor);
  DBBook book=docBookOutputVisitor.getBook();
  if (book == null) {
    return;
  }
  ViewHierarchyVisitor viewHierarchyVisitor=new ViewHierarchyVisitor();
  dge.accept(viewHierarchyVisitor);
  Map<String,Pair<ObjectNode,InstanceSpecification>> instanceSpecificationMap=new LinkedHashMap<>();
  Map<String,Pair<ObjectNode,Slot>> slotMap=new LinkedHashMap<>();
  Map<String,ViewMapping> viewMap=new LinkedHashMap<>(viewHierarchyVisitor.getView2ViewElements().size());
  for (  Element view : viewHierarchyVisitor.getView2ViewElements().keySet()) {
    if (processedElements.contains(view)) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
      continue;
    }
    ViewMapping viewMapping=viewMap.containsKey(Converters.getElementToIdConverter().apply(view)) ? viewMap.get(Converters.getElementToIdConverter().apply(view)) : new ViewMapping();
    viewMapping.setElement(view);
    viewMap.put(Converters.getElementToIdConverter().apply(view),viewMapping);
  }
  List<Constraint> constraintsToBeDeleted=new ArrayList<>(viewMap.size());
  for (  ViewMapping viewMapping : viewMap.values()) {
    Element view=viewMapping.getElement();
    if (view == null) {
      continue;
    }
    Constraint constraint=Utils.getViewConstraint(view);
    if (constraint != null) {
      constraintsToBeDeleted.add(constraint);
    }
  }
  if (!constraintsToBeDeleted.isEmpty()) {
    if (manageSesssions) {
      SessionManager.getInstance().createSession(project,""String_Node_Str"");
    }
    for (    Constraint constraint : constraintsToBeDeleted) {
      if (constraint.isEditable()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(constraint));
        try {
          ModelElementsManager.getInstance().removeElement(constraint);
        }
 catch (        ReadOnlyElementException e) {
          updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str""));
          failure=true;
        }
      }
 else {
        updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str""));
        failure=true;
      }
    }
    if (manageSesssions) {
      SessionManager.getInstance().closeSession(project);
    }
  }
  if (failure) {
    if (showValidation) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
    return;
  }
  if (handleCancel(progressStatus)) {
    return;
  }
  LocalSyncTransactionCommitListener localSyncTransactionCommitListener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  if (manageSesssions) {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().closeSession(project);
    }
    SessionManager.getInstance().createSession(project,""String_Node_Str"");
  }
  if (localSyncTransactionCommitListener != null) {
    localSyncTransactionCommitListener.setDisabled(true);
  }
  List<String> viewIDs=new ArrayList<>();
  if (!viewMap.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(2);
    ObjectNode viewResponse;
    try {
      File responseFile=MMSUtils.getElements(project,viewMap.keySet(),progressStatus);
      try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
        viewResponse=JacksonUtils.parseJsonObject(jsonParser);
      }
     }
 catch (    ServerException|IOException|URISyntaxException e) {
      failure=true;
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
    JsonNode viewElementsJsonArray;
    if (viewResponse != null && (viewElementsJsonArray=viewResponse.get(""String_Node_Str"")) != null && viewElementsJsonArray.isArray()) {
      Queue<String> instanceIDs=new LinkedList<>();
      Queue<String> slotIDs=new LinkedList<>();
      Property generatedFromViewProperty=Utils.getGeneratedFromViewProperty(project), generatedFromElementProperty=Utils.getGeneratedFromElementProperty(project);
      for (      JsonNode elementJsonNode : viewElementsJsonArray) {
        if (!elementJsonNode.isObject()) {
          continue;
        }
        ObjectNode elementObjectNode=(ObjectNode)elementJsonNode;
        JsonNode viewOperandJsonNode=JacksonUtils.getAtPath(elementObjectNode,""String_Node_Str"" + MDKConstants.CONTENTS_KEY + ""String_Node_Str""), sysmlIdJson=elementObjectNode.get(MDKConstants.ID_KEY);
        String sysmlId;
        if (sysmlIdJson != null && sysmlIdJson.isTextual() && !(sysmlId=sysmlIdJson.asText()).isEmpty()) {
          viewIDs.add(sysmlId);
          if (viewOperandJsonNode != null && viewOperandJsonNode.isArray()) {
            List<String> viewInstanceIDs=new ArrayList<>(viewOperandJsonNode.size());
            for (            JsonNode viewOperandJson : viewOperandJsonNode) {
              JsonNode instanceIdJsonNode=viewOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
              String instanceId;
              if (instanceIdJsonNode != null && instanceIdJsonNode.isTextual() && !(instanceId=instanceIdJsonNode.asText()).isEmpty()) {
                if (generatedFromViewProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                }
                if (generatedFromElementProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                }
                instanceIDs.add(instanceId);
                viewInstanceIDs.add(instanceId);
              }
            }
            ViewMapping viewMapping=viewMap.containsKey(sysmlId) ? viewMap.get(sysmlId) : new ViewMapping();
            viewMapping.setObjectNode(elementObjectNode);
            viewMapping.setInstanceIDs(viewInstanceIDs);
            viewMap.put(sysmlId,viewMapping);
          }
        }
      }
      List<ObjectNode> instanceObjectNodes=new ArrayList<>();
      List<ObjectNode> slotObjectNodes=new ArrayList<>();
      while (!instanceIDs.isEmpty() && !slotIDs.isEmpty()) {
        if (handleCancel(progressStatus)) {
          return;
        }
        List<String> elementIDs=new ArrayList<>(instanceIDs);
        elementIDs.addAll(slotIDs);
        ObjectNode instanceAndSlotResponse;
        try {
          File responseFile=MMSUtils.getElements(project,elementIDs,progressStatus);
          try (JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
            instanceAndSlotResponse=JacksonUtils.parseJsonObject(jsonParser);
          }
         }
 catch (        ServerException|IOException|URISyntaxException e) {
          failure=true;
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          e.printStackTrace();
          if (manageSesssions) {
            SessionManager.getInstance().cancelSession(project);
          }
          return;
        }
        instanceIDs.clear();
        slotIDs.clear();
        JsonNode instanceAndSlotElementsJsonArray;
        if (instanceAndSlotResponse != null && (instanceAndSlotElementsJsonArray=instanceAndSlotResponse.get(""String_Node_Str"")) != null && instanceAndSlotElementsJsonArray.isArray()) {
          for (          JsonNode elementJson : instanceAndSlotElementsJsonArray) {
            JsonNode instanceOperandJsonArray=JacksonUtils.getAtPath(elementJson,""String_Node_Str"");
            if (instanceOperandJsonArray != null && instanceOperandJsonArray.isArray()) {
              for (              JsonNode instanceOperandJson : instanceOperandJsonArray) {
                JsonNode instanceIdJson=instanceOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
                String instanceId;
                if (instanceIdJson != null && instanceIdJson.isTextual() && !(instanceId=instanceIdJson.asText()).isEmpty()) {
                  if (generatedFromViewProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                  }
                  if (generatedFromElementProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                  }
                  instanceIDs.add(instanceId);
                }
              }
            }
            JsonNode typeJson=elementJson.get(MDKConstants.TYPE_KEY);
            if (typeJson.isTextual() && elementJson.isObject()) {
              (typeJson.asText().equalsIgnoreCase(""String_Node_Str"") ? slotObjectNodes : instanceObjectNodes).add((ObjectNode)elementJson);
            }
          }
        }
      }
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(3);
      EMFImporter emfImporter=new EMFImporter(){
        @Override public List<PreProcessor> getPreProcessors(){
          if (preProcessors == null) {
            preProcessors=new ArrayList<>(super.getPreProcessors());
            preProcessors.remove(PreProcessor.SYSML_ID_VALIDATION);
          }
          return preProcessors;
        }
        @Override public List<EStructuralFeatureOverride> getEStructuralFeatureOverrides(){
          if (eStructuralFeatureOverrides == null) {
            eStructuralFeatureOverrides=new ArrayList<>(super.getEStructuralFeatureOverrides());
            eStructuralFeatureOverrides.remove(EStructuralFeatureOverride.OWNER);
            eStructuralFeatureOverrides.add(new EStructuralFeatureOverride(EStructuralFeatureOverride.OWNER.getPredicate(),(objectNode,eStructuralFeature,project,strict,element) -> {
              if (element instanceof InstanceSpecification) {
                element.setOwner(project.getPrimaryModel());
                return element;
              }
              return EStructuralFeatureOverride.OWNER.getFunction().apply(objectNode,eStructuralFeature,project,strict,element);
            }
));
          }
          return eStructuralFeatureOverrides;
        }
      }
;
      for (      Boolean strict : Arrays.asList(false,true)) {
        ListIterator<ObjectNode> instanceObjectNodesIterator=instanceObjectNodes.listIterator(instanceObjectNodes.size());
        while (instanceObjectNodesIterator.hasPrevious()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode instanceObjectNode=instanceObjectNodesIterator.previous();
          try {
            Changelog.Change<Element> change=emfImporter.apply(instanceObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof InstanceSpecification) {
              instanceSpecificationMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(instanceObjectNode,(InstanceSpecification)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + instanceObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            instanceObjectNodesIterator.remove();
          }
        }
        ListIterator<ObjectNode> slotObjectNodesIterator=slotObjectNodes.listIterator();
        while (slotObjectNodesIterator.hasNext()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode slotObjectNode=slotObjectNodesIterator.next();
          try {
            Changelog.Change<Element> change=emfImporter.apply(slotObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof Slot) {
              slotMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(slotObjectNode,(Slot)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + slotObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            slotObjectNodesIterator.remove();
          }
        }
      }
      for (      ViewMapping viewMapping : viewMap.values()) {
        Element view=viewMapping.getElement();
        if (handleCancel(progressStatus)) {
          return;
        }
        ObjectNode viewObjectNode=viewMapping.getObjectNode();
        if (viewObjectNode == null) {
          continue;
        }
        JsonNode viewContentsJsonNode=viewObjectNode.get(MDKConstants.CONTENTS_KEY);
        if (viewContentsJsonNode == null || !viewContentsJsonNode.isObject()) {
          continue;
        }
        try {
          Changelog.Change<Element> change=Converters.getJsonToElementConverter().apply((ObjectNode)viewContentsJsonNode,project,false);
          if (change.getChanged() != null && change.getChanged() instanceof Expression) {
            instanceUtils.getOrCreateViewConstraint(view).setSpecification((Expression)change.getChanged());
          }
        }
 catch (        ImportException|ReadOnlyElementException e) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
          continue;
        }
      }
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(4);
  DBAlfrescoVisitor dbAlfrescoVisitor=new DBAlfrescoVisitor(recurse,true);
  try {
    book.accept(dbAlfrescoVisitor);
  }
 catch (  Exception e) {
    Utils.printException(e);
    e.printStackTrace();
  }
  Map<Element,List<PresentationElementInstance>> view2pe=dbAlfrescoVisitor.getView2Pe();
  Map<Element,List<PresentationElementInstance>> view2unused=dbAlfrescoVisitor.getView2Unused();
  List<Element> views=instanceUtils.getViewProcessOrder(start,dbAlfrescoVisitor.getHierarchyElements());
  views.removeAll(processedElements);
  Set<Element> skippedViews=new HashSet<>();
  for (  Element view : views) {
    if (ProjectUtilities.isElementInAttachedProject(view)) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewInProject.addViolation(violation);
      skippedViews.add(view);
    }
    if (!viewIDs.contains(Converters.getElementToIdConverter().apply(view))) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewDoesNotExist.addViolation(violation);
      skippedViews.add(view);
    }
  }
  if (failure) {
    if (showValidation) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
    if (manageSesssions) {
      SessionManager.getInstance().cancelSession(project);
    }
    return;
  }
  try {
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      handlePes(view2pe.get(view),null);
      instanceUtils.updateOrCreateConstraintFromPresentationElements(view,view2pe.get(view));
    }
    if (handleCancel(progressStatus)) {
      return;
    }
    LinkedList<ObjectNode> elementsToCommit=new LinkedList<>();
    Queue<Pair<InstanceSpecification,Element>> instanceToView=new LinkedList<>();
    Map<Element,JSONArray> view2elements=dbAlfrescoVisitor.getView2Elements();
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      ObjectNode clientViewJson=Converters.getElementToJsonConverter().apply(view,project);
      if (clientViewJson == null) {
        skippedViews.add(view);
        continue;
      }
      if (view2elements.get(view) != null) {
        ArrayNode displayedElements=clientViewJson.putArray(MDKConstants.DISPLAYED_ELEMENT_IDS_KEY);
        for (        Object id : view2elements.get(view)) {
          displayedElements.add((String)id);
        }
      }
      Object o;
      ObjectNode serverViewJson=(o=viewMap.get(Converters.getElementToIdConverter().apply(view))) != null ? ((ViewMapping)o).getObjectNode() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientViewJson,serverViewJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientViewJson,serverViewJson).toString());
        }
        elementsToCommit.add(clientViewJson);
      }
      for (      PresentationElementInstance presentationElementInstance : view2pe.get(view)) {
        if (presentationElementInstance.getInstance() != null) {
          instanceToView.add(new Pair<>(presentationElementInstance.getInstance(),view));
        }
      }
    }
    String viewInstanceBinId=MDKConstants.VIEW_INSTANCES_BIN_PREFIX + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    while (!instanceToView.isEmpty()) {
      Pair<InstanceSpecification,Element> pair=instanceToView.remove();
      InstanceSpecification instance=pair.getKey();
      List<InstanceSpecification> subInstances=instanceUtils.getCurrentInstances(instance,pair.getValue()).getAll();
      for (      InstanceSpecification subInstance : subInstances) {
        instanceToView.add(new Pair<>(subInstance,pair.getValue()));
      }
      ObjectNode clientInstanceSpecificationJson=Converters.getElementToJsonConverter().apply(instance,project);
      if (clientInstanceSpecificationJson == null) {
        continue;
      }
      clientInstanceSpecificationJson.put(MDKConstants.OWNER_ID_KEY,viewInstanceBinId);
      ObjectNode serverInstanceSpecificationJson=instanceSpecificationMap.containsKey(Converters.getElementToIdConverter().apply(instance)) ? instanceSpecificationMap.get(Converters.getElementToIdConverter().apply(instance)).getKey() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientInstanceSpecificationJson,serverInstanceSpecificationJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(instance) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientInstanceSpecificationJson,serverInstanceSpecificationJson).toString());
        }
        elementsToCommit.add(clientInstanceSpecificationJson);
      }
      for (      Slot slot : instance.getSlot()) {
        ObjectNode clientSlotJson=Converters.getElementToJsonConverter().apply(slot,project);
        if (clientSlotJson == null) {
          continue;
        }
        JsonNode serverSlotJson=slotMap.containsKey(Converters.getElementToIdConverter().apply(slot)) ? slotMap.get(Converters.getElementToIdConverter().apply(slot)).getKey() : null;
        if (!JsonEquivalencePredicate.getInstance().test(clientSlotJson,serverSlotJson)) {
          elementsToCommit.add(clientSlotJson);
          if (MDUtils.isDeveloperMode()) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(slot) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientSlotJson,serverSlotJson).toString());
          }
        }
      }
    }
    if (handleCancel(progressStatus)) {
      return;
    }
    boolean changed=false;
    if (elementsToCommit.size() > 0) {
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(5);
      Application.getInstance().getGUILog().log(""String_Node_Str"" + elementsToCommit.size() + ""String_Node_Str""+ (elementsToCommit.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,elementsToCommit,MMSUtils.JsonBlobType.ELEMENT_JSON);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    Set<String> mmsElementsToDelete=new HashSet<>();
    for (    List<PresentationElementInstance> presentationElementInstances : view2unused.values()) {
      for (      PresentationElementInstance presentationElementInstance : presentationElementInstances) {
        if (presentationElementInstance.getInstance() == null) {
          continue;
        }
        String id=Converters.getElementToIdConverter().apply(presentationElementInstance.getInstance());
        if (id == null) {
          continue;
        }
        mmsElementsToDelete.add(id);
      }
    }
    if (elementsToCommit.size() > 0) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + mmsElementsToDelete.size() + ""String_Node_Str""+ (mmsElementsToDelete.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,mmsElementsToDelete,MMSUtils.JsonBlobType.ELEMENT_ID);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    if (!changed) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(6);
    Set<Element> elementsToDelete=new HashSet<>();
    for (    Pair<ObjectNode,Slot> pair : slotMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Pair<ObjectNode,InstanceSpecification> pair : instanceSpecificationMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Element element : views) {
      Constraint constraint=Utils.getViewConstraint(element);
      if (constraint == null) {
        continue;
      }
      elementsToDelete.add(constraint);
      ValueSpecification valueSpecification=constraint.getSpecification();
      if (valueSpecification == null) {
        continue;
      }
      elementsToDelete.add(valueSpecification);
      List<ValueSpecification> operands;
      if (!(valueSpecification instanceof Expression) || (operands=((Expression)valueSpecification).getOperand()) == null) {
        continue;
      }
      for (      ValueSpecification operand : operands) {
        elementsToDelete.add(operand);
        InstanceSpecification instanceSpecification;
        if (!(operand instanceof InstanceValue) || (instanceSpecification=((InstanceValue)operand).getInstance()) == null) {
          continue;
        }
        elementsToDelete.add(instanceSpecification);
        for (        Slot slot : instanceSpecification.getSlot()) {
          elementsToDelete.add(slot);
          elementsToDelete.addAll(slot.getValue());
        }
      }
    }
    for (    Element element : elementsToDelete) {
      try {
        ModelElementsManager.getInstance().removeElement(element);
      }
 catch (      ReadOnlyElementException ignored) {
        System.out.println(""String_Node_Str"" + element.getLocalID());
      }
    }
    processedElements.addAll(views);
  }
 catch (  Exception e) {
    failure=true;
    Utils.printException(e);
  }
 finally {
    if (manageSesssions) {
      if (SessionManager.getInstance().isSessionCreated(project)) {
        SessionManager.getInstance().cancelSession(project);
      }
    }
    if (localSyncTransactionCommitListener != null) {
      localSyncTransactionCommitListener.setDisabled(false);
    }
  }
  ImageValidator iv=new ImageValidator(dbAlfrescoVisitor.getImages(),images);
  iv.validate(project);
  for (  ValidationRule validationRule : iv.getSuite().getValidationRules()) {
    for (    ValidationRuleViolation validationRuleViolation : validationRule.getViolations()) {
      if (!validationRuleViolation.getActions().isEmpty()) {
        validationRuleViolation.getActions().get(0).actionPerformed(null);
      }
    }
  }
  if (showValidation) {
    if (suite.hasErrors()) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
  }
}",0.989612993783838
88517,"/** 
 * @param elementIds     collection of elements to get mms data for
 * @param depth          depth to recurse through child elements. takes priority over recurse field
 * @param project        project to check
 * @param progressStatus progress status object, can be null
 * @return object node response
 * @throws ServerException
 * @throws IOException
 * @throws URISyntaxException
 */
public static JsonParser getElementsRecursively(Project project,Collection<String> elementIds,int depth,ProgressStatus progressStatus) throws ServerException, IOException, URISyntaxException {
  if (elementIds == null || elementIds.isEmpty()) {
    return null;
  }
  URIBuilder requestUri=getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  if (depth == -1 || depth > 0) {
    requestUri.setParameter(""String_Node_Str"",java.lang.Integer.toString(depth));
  }
  File sendData=createEntityFile(MMSUtils.class,ContentType.APPLICATION_JSON,elementIds,JsonBlobType.ELEMENT_ID);
  Utils.guilog(""String_Node_Str"" + elementIds.size() + ""String_Node_Str"");
  if (progressStatus != null) {
    return sendCancellableMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.PUT,requestUri,sendData,ContentType.APPLICATION_JSON),progressStatus);
  }
  return sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.PUT,requestUri,sendData,ContentType.APPLICATION_JSON));
}","/** 
 * @param elementIds     collection of elements to get mms data for
 * @param depth          depth to recurse through child elements. takes priority over recurse field
 * @param project        project to check
 * @param progressStatus progress status object, can be null
 * @return object node response
 * @throws ServerException
 * @throws IOException
 * @throws URISyntaxException
 */
public static File getElementsRecursively(Project project,Collection<String> elementIds,int depth,ProgressStatus progressStatus) throws ServerException, IOException, URISyntaxException {
  if (elementIds == null || elementIds.isEmpty()) {
    return null;
  }
  URIBuilder requestUri=getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return null;
  }
  if (depth == -1 || depth > 0) {
    requestUri.setParameter(""String_Node_Str"",java.lang.Integer.toString(depth));
  }
  File sendData=createEntityFile(MMSUtils.class,ContentType.APPLICATION_JSON,elementIds,JsonBlobType.ELEMENT_ID);
  Utils.guilog(""String_Node_Str"" + elementIds.size() + ""String_Node_Str"");
  if (progressStatus != null) {
    return sendCancellableMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.PUT,requestUri,sendData,ContentType.APPLICATION_JSON),progressStatus);
  }
  return sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.PUT,requestUri,sendData,ContentType.APPLICATION_JSON));
}",0.9950564971751412
88518,"/** 
 * General purpose method for running a cancellable request. Builds a new thread to run the request, and passes any relevant exception information back out via atomic references and generates new exceptions in calling thread
 * @param request
 * @param progressStatus
 * @return
 * @throws IOException
 * @throws URISyntaxException
 * @throws ServerException    contains both response code and response body
 */
public static JsonParser sendCancellableMMSRequest(final Project project,HttpRequestBase request,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  final AtomicReference<JsonParser> responseJsonParser=new AtomicReference<>();
  final AtomicReference<Integer> ecode=new AtomicReference<>();
  final AtomicReference<ThreadRequestExceptionType> etype=new AtomicReference<>();
  final AtomicReference<String> emsg=new AtomicReference<>();
  Thread t=new Thread(() -> {
    JsonParser response=null;
    try {
      response=sendMMSRequest(project,request);
      etype.set(null);
      ecode.set(200);
      emsg.set(""String_Node_Str"");
    }
 catch (    ServerException ex) {
      etype.set(ThreadRequestExceptionType.SERVER_EXCEPTION);
      ecode.set(ex.getCode());
      emsg.set(ex.getMessage());
      ex.printStackTrace();
    }
catch (    IOException e) {
      etype.set(ThreadRequestExceptionType.IO_EXCEPTION);
      emsg.set(e.getMessage());
      e.printStackTrace();
    }
catch (    URISyntaxException e) {
      etype.set(ThreadRequestExceptionType.URI_SYNTAX_EXCEPTION);
      emsg.set(e.getMessage());
      e.printStackTrace();
    }
    responseJsonParser.set(response);
  }
);
  t.start();
  try {
    t.join(CHECK_CANCEL_DELAY);
    while (t.isAlive()) {
      if (progressStatus != null && progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        return null;
      }
      t.join(CHECK_CANCEL_DELAY);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (etype.get() == ThreadRequestExceptionType.SERVER_EXCEPTION) {
    throw new ServerException(emsg.get(),ecode.get());
  }
 else   if (etype.get() == ThreadRequestExceptionType.IO_EXCEPTION) {
    throw new IOException(emsg.get());
  }
 else   if (etype.get() == ThreadRequestExceptionType.URI_SYNTAX_EXCEPTION) {
    throw new URISyntaxException(request.getURI().toString(),emsg.get());
  }
  return responseJsonParser.get();
}","/** 
 * General purpose method for running a cancellable request. Builds a new thread to run the request, and passes any relevant exception information back out via atomic references and generates new exceptions in calling thread
 * @param request
 * @param progressStatus
 * @return
 * @throws IOException
 * @throws URISyntaxException
 * @throws ServerException    contains both response code and response body
 */
public static File sendCancellableMMSRequest(final Project project,HttpRequestBase request,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  final AtomicReference<File> responseFile=new AtomicReference<>();
  final AtomicReference<Integer> ecode=new AtomicReference<>();
  final AtomicReference<ThreadRequestExceptionType> etype=new AtomicReference<>();
  final AtomicReference<String> emsg=new AtomicReference<>();
  Thread t=new Thread(() -> {
    File response=null;
    try {
      response=sendMMSRequest(project,request);
      etype.set(null);
      ecode.set(200);
      emsg.set(""String_Node_Str"");
    }
 catch (    ServerException ex) {
      etype.set(ThreadRequestExceptionType.SERVER_EXCEPTION);
      ecode.set(ex.getCode());
      emsg.set(ex.getMessage());
      ex.printStackTrace();
    }
catch (    IOException e) {
      etype.set(ThreadRequestExceptionType.IO_EXCEPTION);
      emsg.set(e.getMessage());
      e.printStackTrace();
    }
catch (    URISyntaxException e) {
      etype.set(ThreadRequestExceptionType.URI_SYNTAX_EXCEPTION);
      emsg.set(e.getMessage());
      e.printStackTrace();
    }
    responseFile.set(response);
  }
);
  t.start();
  try {
    t.join(CHECK_CANCEL_DELAY);
    while (t.isAlive()) {
      if (progressStatus != null && progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        return null;
      }
      t.join(CHECK_CANCEL_DELAY);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (etype.get() == ThreadRequestExceptionType.SERVER_EXCEPTION) {
    throw new ServerException(emsg.get(),ecode.get());
  }
 else   if (etype.get() == ThreadRequestExceptionType.IO_EXCEPTION) {
    throw new IOException(emsg.get());
  }
 else   if (etype.get() == ThreadRequestExceptionType.URI_SYNTAX_EXCEPTION) {
    throw new URISyntaxException(request.getURI().toString(),emsg.get());
  }
  return responseFile.get();
}",0.9825508932280848
88519,"public static String getMmsOrg(Project project) throws IOException, URISyntaxException, ServerException {
  URIBuilder uriBuilder=getServiceProjectsUri(project);
  JsonParser responseParser=sendMMSRequest(project,buildRequest(HttpRequestType.GET,uriBuilder));
  ObjectNode response=JacksonUtils.parseJsonObject(responseParser);
  JsonNode arrayNode;
  if (((arrayNode=response.get(""String_Node_Str"")) != null) && arrayNode.isArray()) {
    JsonNode value;
    for (    JsonNode projectNode : arrayNode) {
      if (((value=projectNode.get(MDKConstants.ID_KEY)) != null) && value.isTextual() && value.asText().equals(Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()))&& ((value=projectNode.get(MDKConstants.ORG_ID_KEY)) != null)&& value.isTextual()&& !value.asText().isEmpty()) {
        return value.asText();
      }
    }
  }
  return null;
}","public static String getMmsOrg(Project project) throws IOException, URISyntaxException, ServerException {
  URIBuilder uriBuilder=getServiceProjectsUri(project);
  File responseFile=sendMMSRequest(project,buildRequest(HttpRequestType.GET,uriBuilder));
  try (JsonParser responseParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
    ObjectNode response=JacksonUtils.parseJsonObject(responseParser);
    JsonNode arrayNode;
    if (((arrayNode=response.get(""String_Node_Str"")) != null) && arrayNode.isArray()) {
      JsonNode value;
      for (      JsonNode projectNode : arrayNode) {
        if (((value=projectNode.get(MDKConstants.ID_KEY)) != null) && value.isTextual() && value.asText().equals(Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()))&& ((value=projectNode.get(MDKConstants.ORG_ID_KEY)) != null)&& value.isTextual()&& !value.asText().isEmpty()) {
          return value.asText();
        }
      }
    }
  }
   return null;
}",0.9127371273712735
88520,"public static JsonParser getElementRecursively(Project project,String elementId,int depth,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  Collection<String> elementIds=new ArrayList<>(1);
  elementIds.add(elementId);
  return getElementsRecursively(project,elementIds,depth,progressStatus);
}","public static File getElementRecursively(Project project,String elementId,int depth,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  Collection<String> elementIds=new ArrayList<>(1);
  elementIds.add(elementId);
  return getElementsRecursively(project,elementIds,depth,progressStatus);
}",0.9789156626506024
88521,"public static ObjectNode getElement(Project project,String elementId,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  Collection<String> elementIds=new ArrayList<>(1);
  elementIds.add(elementId);
  JsonParser responseParser=getElementsRecursively(project,elementIds,0,progressStatus);
  ObjectNode response=JacksonUtils.parseJsonObject(responseParser);
  JsonNode value;
  if (((value=response.get(""String_Node_Str"")) != null) && value.isArray() && (value=((ArrayNode)value).remove(1)) != null && (value instanceof ObjectNode)) {
    return (ObjectNode)value;
  }
  return response;
}","public static ObjectNode getElement(Project project,String elementId,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  Collection<String> elementIds=new ArrayList<>(1);
  elementIds.add(elementId);
  File responseFile=getElementsRecursively(project,elementIds,0,progressStatus);
  try (JsonParser responseParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
    ObjectNode response=JacksonUtils.parseJsonObject(responseParser);
    JsonNode value;
    if (((value=response.get(""String_Node_Str"")) != null) && value.isArray() && (value=((ArrayNode)value).remove(1)) != null && (value instanceof ObjectNode)) {
      return (ObjectNode)value;
    }
  }
   return null;
}",0.8702742772424018
88522,"/** 
 * @param elementIds     collection of elements to get mms data for
 * @param project        project to check
 * @param progressStatus progress status object, can be null
 * @return object node response
 * @throws ServerException
 * @throws IOException
 * @throws URISyntaxException
 */
public static JsonParser getElements(Project project,Collection<String> elementIds,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  return getElementsRecursively(project,elementIds,0,progressStatus);
}","/** 
 * @param elementIds     collection of elements to get mms data for
 * @param project        project to check
 * @param progressStatus progress status object, can be null
 * @return object node response
 * @throws ServerException
 * @throws IOException
 * @throws URISyntaxException
 */
public static File getElements(Project project,Collection<String> elementIds,ProgressStatus progressStatus) throws IOException, ServerException, URISyntaxException {
  return getElementsRecursively(project,elementIds,0,progressStatus);
}",0.986842105263158
88523,"/** 
 * General purpose method for sending a constructed http request via http client.
 * @param request
 * @return
 * @throws IOException
 * @throws ServerException
 */
public static JsonParser sendMMSRequest(Project project,HttpRequestBase request) throws IOException, ServerException, URISyntaxException {
  File targetFile=File.createTempFile(""String_Node_Str"",null);
  targetFile.deleteOnExit();
  HttpEntityEnclosingRequest httpEntityEnclosingRequest=null;
  boolean logBody=MDKOptionsGroup.getMDKOptions().isLogJson();
  logBody=logBody && request instanceof HttpEntityEnclosingRequest;
  logBody=logBody && ((httpEntityEnclosingRequest=(HttpEntityEnclosingRequest)request).getEntity() != null);
  logBody=logBody && httpEntityEnclosingRequest.getEntity().isRepeatable();
  System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString());
  boolean throwServerException=false;
  int responseCode;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent();OutputStream outputStream=new FileOutputStream(targetFile)){
    responseCode=response.getStatusLine().getStatusCode();
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString()+ ""String_Node_Str""+ responseCode);
    System.out.println(""String_Node_Str"" + targetFile.getPath());
    if (responseCode == HttpURLConnection.HTTP_OK || (request.getMethod().equals(""String_Node_Str"") && responseCode == HttpURLConnection.HTTP_NOT_FOUND && responseType.equals(""String_Node_Str""))) {
    }
 else     if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {
      Utils.guilog(""String_Node_Str"" + responseCode);
      MMSLogoutAction.logoutAction(project);
      throwServerException=true;
    }
 else {
      Utils.guilog(""String_Node_Str"" + responseCode);
      throwServerException=true;
    }
    if (inputStream != null && responseType.equals(""String_Node_Str"")) {
      byte[] buffer=new byte[8 * 1024];
      int bytesRead;
      while ((bytesRead=inputStream.read(buffer)) != -1) {
        outputStream.write(buffer,0,bytesRead);
      }
    }
  }
   JsonFactory jsonFactory=JacksonUtils.getJsonFactory();
  try (JsonParser jsonParser=jsonFactory.createParser(targetFile)){
    while (jsonParser.nextFieldName() != null && !jsonParser.nextFieldName().equals(""String_Node_Str"")) {
    }
    if (jsonParser.getCurrentToken() == JsonToken.FIELD_NAME) {
      jsonParser.nextToken();
      Application.getInstance().getGUILog().log(""String_Node_Str"" + jsonParser.getText());
    }
  }
   if (throwServerException) {
    Utils.showPopupMessage(""String_Node_Str"");
    throw new ServerException(targetFile.getAbsolutePath(),responseCode);
  }
  return JacksonUtils.getJsonFactory().createParser(targetFile);
}","/** 
 * General purpose method for sending a constructed http request via http client.
 * @param request
 * @return
 * @throws IOException
 * @throws ServerException
 */
public static File sendMMSRequest(Project project,HttpRequestBase request) throws IOException, ServerException, URISyntaxException {
  File targetFile=File.createTempFile(""String_Node_Str"",null);
  targetFile.deleteOnExit();
  HttpEntityEnclosingRequest httpEntityEnclosingRequest=null;
  boolean logBody=MDKOptionsGroup.getMDKOptions().isLogJson();
  logBody=logBody && request instanceof HttpEntityEnclosingRequest;
  logBody=logBody && ((httpEntityEnclosingRequest=(HttpEntityEnclosingRequest)request).getEntity() != null);
  logBody=logBody && httpEntityEnclosingRequest.getEntity().isRepeatable();
  System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString());
  boolean throwServerException=false;
  int responseCode;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent();OutputStream outputStream=new FileOutputStream(targetFile)){
    responseCode=response.getStatusLine().getStatusCode();
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString()+ ""String_Node_Str""+ responseCode);
    System.out.println(""String_Node_Str"" + targetFile.getPath());
    if (responseCode == HttpURLConnection.HTTP_OK || (request.getMethod().equals(""String_Node_Str"") && responseCode == HttpURLConnection.HTTP_NOT_FOUND && responseType.equals(""String_Node_Str""))) {
    }
 else     if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {
      Utils.guilog(""String_Node_Str"" + responseCode);
      MMSLogoutAction.logoutAction(project);
      throwServerException=true;
    }
 else {
      Utils.guilog(""String_Node_Str"" + responseCode);
      throwServerException=true;
    }
    if (inputStream != null && responseType.equals(""String_Node_Str"")) {
      byte[] buffer=new byte[8 * 1024];
      int bytesRead;
      while ((bytesRead=inputStream.read(buffer)) != -1) {
        outputStream.write(buffer,0,bytesRead);
      }
    }
  }
   JsonFactory jsonFactory=JacksonUtils.getJsonFactory();
  try (JsonParser jsonParser=jsonFactory.createParser(targetFile)){
    while (jsonParser.nextFieldName() != null && !jsonParser.nextFieldName().equals(""String_Node_Str"")) {
    }
    if (jsonParser.getCurrentToken() == JsonToken.FIELD_NAME) {
      jsonParser.nextToken();
      Application.getInstance().getGUILog().log(""String_Node_Str"" + jsonParser.getText());
    }
  }
   if (throwServerException) {
    Utils.showPopupMessage(""String_Node_Str"");
    throw new ServerException(targetFile.getAbsolutePath(),responseCode);
  }
  return targetFile;
}",0.9873837981407704
88524,"public static String getUri(Project project) throws IOException, URISyntaxException, ServerException {
  URIBuilder uriBuilder=getServiceProjectsUri(project);
  ObjectNode response=JacksonUtils.parseJsonObject(sendMMSRequest(project,buildRequest(HttpRequestType.GET,uriBuilder)));
  JsonNode arrayNode;
  if (((arrayNode=response.get(""String_Node_Str"")) != null) && arrayNode.isArray()) {
    JsonNode value;
    for (    JsonNode projectNode : arrayNode) {
      if (((value=projectNode.get(MDKConstants.ID_KEY)) != null) && value.isTextual() && value.asText().equals(Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()))&& ((value=projectNode.get(MDKConstants.TWC_URI_KEY)) != null)&& value.isTextual()&& !value.asText().isEmpty()) {
        return value.asText();
      }
    }
  }
  return null;
}","public static String getUri(Project project) throws IOException, URISyntaxException, ServerException {
  URIBuilder uriBuilder=getServiceProjectsUri(project);
  File responseFile=sendMMSRequest(project,buildRequest(HttpRequestType.GET,uriBuilder));
  try (JsonParser responseParser=JacksonUtils.getJsonFactory().createParser(responseFile)){
    ObjectNode response=JacksonUtils.parseJsonObject(responseParser);
    JsonNode arrayNode;
    if (((arrayNode=response.get(""String_Node_Str"")) != null) && arrayNode.isArray()) {
      JsonNode value;
      for (      JsonNode projectNode : arrayNode) {
        if (((value=projectNode.get(MDKConstants.ID_KEY)) != null) && value.isTextual() && value.asText().equals(Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()))&& ((value=projectNode.get(MDKConstants.TWC_URI_KEY)) != null)&& value.isTextual()&& !value.asText().isEmpty()) {
          return value.asText();
        }
      }
    }
  }
   return null;
}",0.8447412353923205
88525,"public void commitAction(){
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsUri(project);
  if (requestUri == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  Collection<ObjectNode> refsNodes=new LinkedList<>();
  ObjectNode branchNode=BranchValidator.getRefObjectNode(project,branchInfo,updateBranch);
  refsNodes.add(branchNode);
  JsonParser response;
  try {
    File sendFile=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,refsNodes,MMSUtils.JsonBlobType.REF);
    HttpRequestBase request=MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendFile,ContentType.APPLICATION_JSON);
    response=MMSUtils.sendMMSRequest(project,request);
  }
 catch (  IOException|URISyntaxException|ServerException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return;
  }
  if (shouldCommitModel) {
    RunnableWithProgress temp=new ManualSyncActionRunner<>(CommitClientElementAction.class,Collections.singletonList(project.getPrimaryModel()),project,-1);
    ProgressStatusRunner.runWithProgressStatus(temp,""String_Node_Str"",true,0);
  }
}","public void commitAction(){
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsUri(project);
  if (requestUri == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  Collection<ObjectNode> refsNodes=new LinkedList<>();
  ObjectNode branchNode=BranchValidator.getRefObjectNode(project,branchInfo,updateBranch);
  refsNodes.add(branchNode);
  File responseFile;
  try {
    File sendFile=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,refsNodes,MMSUtils.JsonBlobType.REF);
    HttpRequestBase request=MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendFile,ContentType.APPLICATION_JSON);
    responseFile=MMSUtils.sendMMSRequest(project,request);
  }
 catch (  IOException|URISyntaxException|ServerException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return;
  }
  if (shouldCommitModel) {
    RunnableWithProgress temp=new ManualSyncActionRunner<>(CommitClientElementAction.class,Collections.singletonList(project.getPrimaryModel()),project,-1);
    ProgressStatusRunner.runWithProgressStatus(temp,""String_Node_Str"",true,0);
  }
}",0.9839662447257383
88526,"private void addElementActions(ActionsManager manager,Element e,List<Element> es){
  Project project=Project.getProject(e);
  if (project == null && !es.isEmpty()) {
    project=Project.getProject(es.iterator().next());
  }
  if (project == null) {
    return;
  }
  Stereotype sysmlview=Utils.getViewStereotype(project);
  Stereotype sysmlviewpoint=Utils.getViewpointStereotype(project);
  Stereotype documentView=Utils.getProductStereotype(project);
  Stereotype classview=Utils.getViewClassStereotype(project);
  Stereotype elementGroupStereotype=Utils.getElementGroupStereotype(project);
  ActionsCategory refactorWithIDActionCat=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
  if (e instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Class & !(e instanceof com.nomagic.uml2.ext.magicdraw.components.mdbasiccomponents.Component)) {
    if (manager.getActionFor(ClassToComponentRefactorWithIDAction.DEFAULT_ID) == null) {
      refactorWithIDActionCat.addAction(new ClassToComponentRefactorWithIDAction(es));
    }
  }
  if (e instanceof com.nomagic.uml2.ext.magicdraw.components.mdbasiccomponents.Component) {
    if (manager.getActionFor(ComponentToClassRefactorWithIDAction.DEFAULT_ID) == null) {
      refactorWithIDActionCat.addAction(new ComponentToClassRefactorWithIDAction(es));
    }
  }
  ActionsCategory modelLoad=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
  if (!TicketUtils.isTicketSet(project)) {
    ActionsCategory login=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad);
    if (manager.getActionFor(MMSLoginAction.DEFAULT_ID) == null) {
      login.addAction(new MMSLoginAction());
    }
  }
  ActionsCategory models=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad);
  if (MDUtils.isDeveloperMode()) {
    if (e instanceof Model && manager.getActionFor(CommitProjectAction.DEFAULT_ID) == null) {
      models.addAction(new CommitProjectAction(project,false,true));
      models.addAction(new CommitProjectAction(project,true,true));
    }
  }
  if (manager.getActionFor(ValidateModelAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateModelAction(es,""String_Node_Str""));
  }
  if (manager.getActionFor(ValidateElementDepthAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateElementDepthAction(es,""String_Node_Str""));
  }
  if (manager.getActionFor(ValidateElementAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateElementAction(es,""String_Node_Str""));
  }
  ActionsStateUpdater.updateActionsState();
  if (StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.validationScriptStereotype)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    UserScript us=new UserScript();
    us.setDgElement(e);
    List<Element> targets=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.queriesStereotype,1,false,1);
    targets.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.oldQueriesStereotype,1,false,1));
    us.setTargets(Utils2.asList(targets,Object.class));
    if (manager.getActionFor(RunUserValidationScriptAction.DEFAULT_ID) == null) {
      c.addAction(new RunUserValidationScriptAction(us,true));
    }
  }
 else   if (StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.userScriptStereotype)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    UserScript us=new UserScript();
    us.setDgElement(e);
    List<Element> targets=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.queriesStereotype,1,false,1);
    targets.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.oldQueriesStereotype,1,false,1));
    us.setTargets(Utils2.asList(targets,Object.class));
    if (manager.getActionFor(RunUserScriptAction.DEFAULT_ID) == null) {
      c.addAction(new RunUserScriptAction(us,true));
    }
  }
  boolean canShowGeneration=true;
  for (  Element element : es) {
    if (!StereotypesHelper.hasStereotypeOrDerived(element,sysmlview) && !StereotypesHelper.hasStereotypeOrDerived(element,elementGroupStereotype)) {
      canShowGeneration=false;
      break;
    }
  }
  if (canShowGeneration) {
    if (classview != null && es.size() == 1 && StereotypesHelper.hasStereotypeOrDerived(e,sysmlview)) {
      Boolean collectActions=(Boolean)StereotypesHelper.getStereotypePropertyFirst(e,classview,""String_Node_Str"");
      if (collectActions != null && collectActions) {
        ActionsCategory category=(ActionsCategory)manager.getActionFor(""String_Node_Str"");
        if (category == null) {
          category=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
          category.setNested(true);
          boolean added=addViewQueryActions(manager,category,(NamedElement)e);
          if (added) {
            manager.addCategory(0,category);
          }
        }
      }
    }
    ActionsCategory modelLoad2=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    ActionsCategory viewInstances=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad2);
    NMAction action=manager.getActionFor(GenerateViewPresentationAction.DEFAULT_ID);
    if (action == null) {
      viewInstances.addAction(new GenerateViewPresentationAction(new LinkedHashSet<>(es),false));
    }
    action=manager.getActionFor(GenerateViewPresentationAction.RECURSE_DEFAULT_ID);
    if (action == null) {
      viewInstances.addAction(new GenerateViewPresentationAction(new LinkedHashSet<>(es),true));
    }
    String url;
    if (StereotypesHelper.hasStereotype(project.getPrimaryModel(),""String_Node_Str"") && (url=(String)StereotypesHelper.getStereotypePropertyFirst(project.getPrimaryModel(),""String_Node_Str"",""String_Node_Str"")) != null && !url.isEmpty()) {
      ActionsCategory tracingCategory=manager.getCategory(""String_Node_Str"");
      if (tracingCategory != null) {
        action=manager.getActionFor(MMSViewLinkAction.DEFAULT_ID);
        if (action == null) {
          tracingCategory.addAction(new MMSViewLinkAction(es));
        }
      }
    }
    ActionsStateUpdater.updateActionsState();
  }
  if (e == project.getPrimaryModel()) {
    NMAction act=null;
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    act=manager.getActionFor(ValidateOldDocgen.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ValidateOldDocgen());
    }
  }
  if ((e instanceof Activity && StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.documentStereotype)) || StereotypesHelper.hasStereotypeOrDerived(e,sysmlview)) {
    NMAction act=null;
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    act=manager.getActionFor(ValidateDocument3Action.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ValidateDocument3Action(e));
    }
    act=manager.getActionFor(ValidateViewStructureAction.DEFAULT_ID);
    if (act == null && e instanceof Classifier) {
      c.addAction(new ValidateViewStructureAction(e));
    }
    act=manager.getActionFor(ViewDocument3Action.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ViewDocument3Action(e));
    }
    act=manager.getActionFor(GenerateDocumentAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new GenerateDocumentAction(e));
    }
    if (StereotypesHelper.hasStereotypeOrDerived(e,documentView)) {
      if (e instanceof Package) {
        act=manager.getActionFor(NumberDependencyAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new NumberDependencyAction(e));
        }
        act=manager.getActionFor(MigrateToClassViewAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new MigrateToClassViewAction(e));
        }
      }
      if (e instanceof Class) {
        act=manager.getActionFor(NumberAssociationAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new NumberAssociationAction((Class)e));
        }
      }
    }
  }
  if (StereotypesHelper.hasStereotypeOrDerived(e,sysmlviewpoint)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    NMAction act=manager.getActionFor(InstanceViewpointAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new InstanceViewpointAction(e));
    }
  }
  ArrayList<Property> selectedProperties=new ArrayList<Property>();
  for (  Element el : es) {
    if (el instanceof Property) {
      selectedProperties.add((Property)el);
    }
  }
  if (!(selectedProperties.isEmpty())) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    NMAction act=manager.getActionFor(CreateRestrictedValueAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new CreateRestrictedValueAction(selectedProperties));
    }
  }
}","private void addElementActions(ActionsManager manager,Element e,List<Element> es){
  Project project=Project.getProject(e);
  if (project == null && !es.isEmpty()) {
    project=Project.getProject(es.iterator().next());
  }
  if (project == null) {
    return;
  }
  Stereotype sysmlview=Utils.getViewStereotype(project);
  Stereotype sysmlviewpoint=Utils.getViewpointStereotype(project);
  Stereotype documentView=Utils.getProductStereotype(project);
  Stereotype classview=Utils.getViewClassStereotype(project);
  Stereotype elementGroupStereotype=Utils.getElementGroupStereotype(project);
  ActionsCategory refactorWithIDActionCat=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
  if (e instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Class & !(e instanceof com.nomagic.uml2.ext.magicdraw.components.mdbasiccomponents.Component)) {
    if (manager.getActionFor(ClassToComponentRefactorWithIDAction.DEFAULT_ID) == null) {
      refactorWithIDActionCat.addAction(new ClassToComponentRefactorWithIDAction(es));
    }
  }
  if (e instanceof com.nomagic.uml2.ext.magicdraw.components.mdbasiccomponents.Component) {
    if (manager.getActionFor(ComponentToClassRefactorWithIDAction.DEFAULT_ID) == null) {
      refactorWithIDActionCat.addAction(new ComponentToClassRefactorWithIDAction(es));
    }
  }
  ActionsCategory modelLoad=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
  if (!TicketUtils.isTicketSet(project)) {
    ActionsCategory login=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad);
    if (manager.getActionFor(MMSLoginAction.DEFAULT_ID) == null) {
      login.addAction(new MMSLoginAction());
    }
  }
  ActionsCategory models=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad);
  if (MDUtils.isDeveloperMode()) {
    if (e instanceof Model && manager.getActionFor(CommitProjectAction.DEFAULT_ID) == null) {
      models.addAction(new CommitProjectAction(project,false,true));
      models.addAction(new CommitProjectAction(project,true,true));
    }
  }
  if (manager.getActionFor(ValidateModelAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateModelAction(es,""String_Node_Str""));
  }
  if (manager.getActionFor(ValidateElementDepthAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateElementDepthAction(es,""String_Node_Str""));
  }
  if (manager.getActionFor(ValidateElementAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateElementAction(es,""String_Node_Str""));
  }
  ActionsStateUpdater.updateActionsState();
  if (StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.validationScriptStereotype)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    UserScript us=new UserScript();
    us.setDgElement(e);
    List<Element> targets=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.queriesStereotype,1,false,1);
    targets.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.oldQueriesStereotype,1,false,1));
    us.setTargets(Utils2.asList(targets,Object.class));
    if (manager.getActionFor(RunUserValidationScriptAction.DEFAULT_ID) == null) {
      c.addAction(new RunUserValidationScriptAction(us,true));
    }
  }
 else   if (StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.userScriptStereotype)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    UserScript us=new UserScript();
    us.setDgElement(e);
    List<Element> targets=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.queriesStereotype,1,false,1);
    targets.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.oldQueriesStereotype,1,false,1));
    us.setTargets(Utils2.asList(targets,Object.class));
    if (manager.getActionFor(RunUserScriptAction.DEFAULT_ID) == null) {
      c.addAction(new RunUserScriptAction(us,true));
    }
  }
  boolean canShowGeneration=true;
  for (  Element element : es) {
    if (!StereotypesHelper.hasStereotypeOrDerived(element,sysmlview) && !StereotypesHelper.hasStereotypeOrDerived(element,elementGroupStereotype)) {
      canShowGeneration=false;
      break;
    }
  }
  if (canShowGeneration) {
    if (classview != null && es.size() == 1 && StereotypesHelper.hasStereotypeOrDerived(e,sysmlview)) {
      Boolean collectActions=(Boolean)StereotypesHelper.getStereotypePropertyFirst(e,classview,""String_Node_Str"");
      if (collectActions != null && collectActions) {
        ActionsCategory category=(ActionsCategory)manager.getActionFor(""String_Node_Str"");
        if (category == null) {
          category=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
          category.setNested(true);
          boolean added=addViewQueryActions(manager,category,(NamedElement)e);
          if (added) {
            manager.addCategory(0,category);
          }
        }
      }
    }
    ActionsCategory modelLoad2=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    ActionsCategory viewInstances=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad2);
    NMAction action=manager.getActionFor(GenerateViewPresentationAction.DEFAULT_ID);
    if (action == null) {
      viewInstances.addAction(new GenerateViewPresentationAction(new LinkedHashSet<>(es),false));
    }
    action=manager.getActionFor(GenerateViewPresentationAction.RECURSE_DEFAULT_ID);
    if (action == null) {
      viewInstances.addAction(new GenerateViewPresentationAction(new LinkedHashSet<>(es),true));
    }
    String url;
    if (StereotypesHelper.hasStereotype(project.getPrimaryModel(),""String_Node_Str"") && (url=(String)StereotypesHelper.getStereotypePropertyFirst(project.getPrimaryModel(),""String_Node_Str"",""String_Node_Str"")) != null && !url.isEmpty()) {
      ActionsCategory tracingCategory=manager.getCategory(""String_Node_Str"");
      if (tracingCategory != null) {
        action=manager.getActionFor(MMSViewLinkAction.DEFAULT_ID);
        if (action == null) {
          tracingCategory.addAction(new MMSViewLinkAction(es));
        }
      }
    }
    ActionsStateUpdater.updateActionsState();
  }
  if ((e instanceof Activity && StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.documentStereotype)) || StereotypesHelper.hasStereotypeOrDerived(e,sysmlview)) {
    NMAction act=null;
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    act=manager.getActionFor(ValidateDocument3Action.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ValidateDocument3Action(e));
    }
    act=manager.getActionFor(ValidateViewStructureAction.DEFAULT_ID);
    if (act == null && e instanceof Classifier) {
      c.addAction(new ValidateViewStructureAction(e));
    }
    act=manager.getActionFor(ViewDocument3Action.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ViewDocument3Action(e));
    }
    act=manager.getActionFor(GenerateDocumentAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new GenerateDocumentAction(e));
    }
    if (StereotypesHelper.hasStereotypeOrDerived(e,documentView)) {
      if (e instanceof Package) {
        act=manager.getActionFor(NumberDependencyAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new NumberDependencyAction(e));
        }
        act=manager.getActionFor(MigrateToClassViewAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new MigrateToClassViewAction(e));
        }
      }
      if (e instanceof Class) {
        act=manager.getActionFor(NumberAssociationAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new NumberAssociationAction((Class)e));
        }
      }
    }
  }
  if (StereotypesHelper.hasStereotypeOrDerived(e,sysmlviewpoint)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    NMAction act=manager.getActionFor(InstanceViewpointAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new InstanceViewpointAction(e));
    }
  }
  ArrayList<Property> selectedProperties=new ArrayList<Property>();
  for (  Element el : es) {
    if (el instanceof Property) {
      selectedProperties.add((Property)el);
    }
  }
  if (!(selectedProperties.isEmpty())) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    NMAction act=manager.getActionFor(CreateRestrictedValueAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new CreateRestrictedValueAction(selectedProperties));
    }
  }
}",0.7872920169285176
88527,"/** 
 * Ingests JSON data generated from MMS server and populates JNDI members
 * @return URL string of connector
 */
protected static String ingestJson(ObjectNode jsonInput){
  if (jsonInput == null) {
    return null;
  }
  ArrayNode conns=null;
  JsonNode valueNode;
  if ((valueNode=jsonInput.get(""String_Node_Str"")) != null && valueNode.isArray()) {
    conns=(ArrayNode)valueNode;
  }
  ObjectNode json=null;
  if (conns != null) {
    for (int ii=0; ii < conns.size(); ii++) {
      json=(ObjectNode)conns.get(ii);
      if (json.get(""String_Node_Str"").equals(""String_Node_Str"")) {
        break;
      }
    }
  }
 else {
    json=jsonInput;
  }
  String result=null;
  if (json != null) {
    if ((valueNode=json.get(""String_Node_Str"")) != null && valueNode.isTextual()) {
      result=valueNode.asText();
    }
    if ((valueNode=json.get(""String_Node_Str"")) != null && valueNode.isTextual()) {
      JMS_CONN_FACTORY=valueNode.asText();
    }
    if ((valueNode=json.get(""String_Node_Str"")) != null && valueNode.isTextual()) {
      JMS_CTX_FACTORY=valueNode.asText();
    }
    if ((valueNode=json.get(""String_Node_Str"")) != null && valueNode.isTextual()) {
      JMS_PASSWORD=valueNode.asText();
    }
    if ((valueNode=json.get(""String_Node_Str"")) != null && valueNode.isTextual()) {
      JMS_USERNAME=valueNode.asText();
    }
    if ((valueNode=json.get(""String_Node_Str"")) != null && valueNode.isTextual()) {
      JMS_TOPIC=valueNode.asText();
    }
  }
  return result;
}","/** 
 * Ingests JSON data generated from MMS server and populates JNDI members
 * @return URL string of connector
 */
protected static String ingestJson(ObjectNode jsonInput){
  if (jsonInput == null) {
    return null;
  }
  ArrayNode conns=null;
  JsonNode valueNode;
  if ((valueNode=jsonInput.get(""String_Node_Str"")) != null && valueNode.isArray()) {
    conns=(ArrayNode)valueNode;
  }
  ObjectNode json=null;
  if (conns != null) {
    for (int ii=0; ii < conns.size(); ii++) {
      json=(ObjectNode)conns.get(ii);
      JsonNode value;
      if ((value=json.get(""String_Node_Str"")) != null && value.isTextual() && value.asText().equals(""String_Node_Str"")) {
        break;
      }
    }
  }
 else {
    json=jsonInput;
  }
  String result=null;
  if (json != null) {
    if ((valueNode=json.get(""String_Node_Str"")) != null && valueNode.isTextual()) {
      result=valueNode.asText();
    }
    if ((valueNode=json.get(""String_Node_Str"")) != null && valueNode.isTextual()) {
      JMS_CONN_FACTORY=valueNode.asText();
    }
    if ((valueNode=json.get(""String_Node_Str"")) != null && valueNode.isTextual()) {
      JMS_CTX_FACTORY=valueNode.asText();
    }
    if ((valueNode=json.get(""String_Node_Str"")) != null && valueNode.isTextual()) {
      JMS_PASSWORD=valueNode.asText();
    }
    if ((valueNode=json.get(""String_Node_Str"")) != null && valueNode.isTextual()) {
      JMS_USERNAME=valueNode.asText();
    }
    if ((valueNode=json.get(""String_Node_Str"")) != null && valueNode.isTextual()) {
      JMS_TOPIC=valueNode.asText();
    }
  }
  return result;
}",0.9578569095066972
88528,"public ElementValidator(Collection<Pair<Element,ObjectNode>> clientElements,Collection<ObjectNode> serverElements,Project project){
  this.clientElements=clientElements;
  this.serverElements=serverElements;
  this.serverElementFiles=new LinkedList<>();
  this.project=project;
}","public ElementValidator(Collection<Pair<Element,ObjectNode>> clientElements,Collection<ObjectNode> serverElements,Project project){
  this.clientElements=clientElements;
  this.serverElements=serverElements;
  this.serverElementFiles=Collections.emptyList();
  this.project=project;
}",0.9413854351687388
88529,"private void addElementActions(ActionsManager manager,Element e,List<Element> es){
  Project project=Project.getProject(e);
  if (project == null && !es.isEmpty()) {
    project=Project.getProject(es.iterator().next());
  }
  if (project == null) {
    return;
  }
  Stereotype sysmlview=Utils.getViewStereotype(project);
  Stereotype sysmlviewpoint=Utils.getViewpointStereotype(project);
  Stereotype documentView=Utils.getProductStereotype(project);
  Stereotype classview=Utils.getViewClassStereotype(project);
  Stereotype elementGroupStereotype=Utils.getElementGroupStereotype(project);
  ActionsCategory refactorWithIDActionCat=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
  if (e instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Class & !(e instanceof com.nomagic.uml2.ext.magicdraw.components.mdbasiccomponents.Component)) {
    if (manager.getActionFor(ClassToComponentRefactorWithIDAction.DEFAULT_ID) == null) {
      refactorWithIDActionCat.addAction(new ClassToComponentRefactorWithIDAction(es));
    }
  }
  if (e instanceof com.nomagic.uml2.ext.magicdraw.components.mdbasiccomponents.Component) {
    if (manager.getActionFor(ComponentToClassRefactorWithIDAction.DEFAULT_ID) == null) {
      refactorWithIDActionCat.addAction(new ComponentToClassRefactorWithIDAction(es));
    }
  }
  ActionsCategory modelLoad=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
  if (!TicketUtils.isTicketSet(project)) {
    ActionsCategory login=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad);
    if (manager.getActionFor(MMSLoginAction.DEFAULT_ID) == null) {
      login.addAction(new MMSLoginAction());
    }
  }
  ActionsCategory models=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad);
  if (MDUtils.isDeveloperMode()) {
    if (e instanceof Model && manager.getActionFor(CommitProjectAction.DEFAULT_ID) == null) {
      models.addAction(new CommitProjectAction(project,false,true));
      models.addAction(new CommitProjectAction(project,true,true));
    }
  }
  if (manager.getActionFor(ValidateModelAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateModelAction(es,""String_Node_Str""));
  }
  if (manager.getActionFor(ValidateElementDepthAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateElementDepthAction(es,""String_Node_Str""));
  }
  if (manager.getActionFor(ValidateElementAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateElementAction(es,""String_Node_Str""));
  }
  ActionsStateUpdater.updateActionsState();
  if (StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.validationScriptStereotype)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    UserScript us=new UserScript();
    us.setDgElement(e);
    List<Element> targets=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.queriesStereotype,1,false,1);
    targets.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.oldQueriesStereotype,1,false,1));
    us.setTargets(Utils2.asList(targets,Object.class));
    if (manager.getActionFor(RunUserValidationScriptAction.DEFAULT_ID) == null) {
      c.addAction(new RunUserValidationScriptAction(us,true));
    }
  }
 else   if (StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.userScriptStereotype)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    UserScript us=new UserScript();
    us.setDgElement(e);
    List<Element> targets=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.queriesStereotype,1,false,1);
    targets.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.oldQueriesStereotype,1,false,1));
    us.setTargets(Utils2.asList(targets,Object.class));
    if (manager.getActionFor(RunUserScriptAction.DEFAULT_ID) == null) {
      c.addAction(new RunUserScriptAction(us,true));
    }
  }
  boolean canShowGeneration=true;
  for (  Element element : es) {
    if (!StereotypesHelper.hasStereotypeOrDerived(element,sysmlview) && !StereotypesHelper.hasStereotypeOrDerived(element,elementGroupStereotype)) {
      canShowGeneration=false;
      break;
    }
  }
  if (canShowGeneration) {
    if (classview != null && es.size() == 1 && StereotypesHelper.hasStereotypeOrDerived(e,sysmlview)) {
      Boolean collectActions=(Boolean)StereotypesHelper.getStereotypePropertyFirst(e,classview,""String_Node_Str"");
      if (collectActions != null && collectActions) {
        ActionsCategory category=(ActionsCategory)manager.getActionFor(""String_Node_Str"");
        if (category == null) {
          category=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
          category.setNested(true);
          boolean added=addViewQueryActions(manager,category,(NamedElement)e);
          if (added) {
            manager.addCategory(0,category);
          }
        }
      }
    }
    ActionsCategory modelLoad2=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    ActionsCategory viewInstances=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad2);
    NMAction action=manager.getActionFor(GenerateViewPresentationAction.DEFAULT_ID);
    if (action == null) {
      viewInstances.addAction(new GenerateViewPresentationAction(es,false));
    }
    action=manager.getActionFor(GenerateViewPresentationAction.RECURSE_DEFAULT_ID);
    if (action == null) {
      viewInstances.addAction(new GenerateViewPresentationAction(es,true));
    }
    String url;
    if (StereotypesHelper.hasStereotype(project.getPrimaryModel(),""String_Node_Str"") && (url=(String)StereotypesHelper.getStereotypePropertyFirst(project.getPrimaryModel(),""String_Node_Str"",""String_Node_Str"")) != null && !url.isEmpty()) {
      ActionsCategory tracingCategory=manager.getCategory(""String_Node_Str"");
      if (tracingCategory != null) {
        action=manager.getActionFor(MMSViewLinkAction.DEFAULT_ID);
        if (action == null) {
          tracingCategory.addAction(new MMSViewLinkAction(es));
        }
      }
    }
    ActionsStateUpdater.updateActionsState();
  }
  if (e == project.getPrimaryModel()) {
    NMAction act=null;
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    act=manager.getActionFor(ValidateOldDocgen.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ValidateOldDocgen());
    }
  }
  if ((e instanceof Activity && StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.documentStereotype)) || StereotypesHelper.hasStereotypeOrDerived(e,sysmlview)) {
    NMAction act=null;
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    act=manager.getActionFor(ValidateDocument3Action.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ValidateDocument3Action(e));
    }
    act=manager.getActionFor(ValidateViewStructureAction.DEFAULT_ID);
    if (act == null && e instanceof Classifier) {
      c.addAction(new ValidateViewStructureAction(e));
    }
    act=manager.getActionFor(ViewDocument3Action.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ViewDocument3Action(e));
    }
    act=manager.getActionFor(GenerateDocumentAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new GenerateDocumentAction(e));
    }
    if (StereotypesHelper.hasStereotypeOrDerived(e,documentView)) {
      if (e instanceof Package) {
        act=manager.getActionFor(NumberDependencyAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new NumberDependencyAction(e));
        }
        act=manager.getActionFor(MigrateToClassViewAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new MigrateToClassViewAction(e));
        }
      }
      if (e instanceof Class) {
        act=manager.getActionFor(NumberAssociationAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new NumberAssociationAction((Class)e));
        }
      }
    }
  }
  if (StereotypesHelper.hasStereotypeOrDerived(e,sysmlviewpoint)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    NMAction act=manager.getActionFor(InstanceViewpointAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new InstanceViewpointAction(e));
    }
  }
  ArrayList<Property> selectedProperties=new ArrayList<Property>();
  for (  Element el : es) {
    if (el instanceof Property) {
      selectedProperties.add((Property)el);
    }
  }
  if (!(selectedProperties.isEmpty())) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    NMAction act=manager.getActionFor(CreateRestrictedValueAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new CreateRestrictedValueAction(selectedProperties));
    }
  }
}","private void addElementActions(ActionsManager manager,Element e,List<Element> es){
  Project project=Project.getProject(e);
  if (project == null && !es.isEmpty()) {
    project=Project.getProject(es.iterator().next());
  }
  if (project == null) {
    return;
  }
  Stereotype sysmlview=Utils.getViewStereotype(project);
  Stereotype sysmlviewpoint=Utils.getViewpointStereotype(project);
  Stereotype documentView=Utils.getProductStereotype(project);
  Stereotype classview=Utils.getViewClassStereotype(project);
  Stereotype elementGroupStereotype=Utils.getElementGroupStereotype(project);
  ActionsCategory refactorWithIDActionCat=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
  if (e instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Class & !(e instanceof com.nomagic.uml2.ext.magicdraw.components.mdbasiccomponents.Component)) {
    if (manager.getActionFor(ClassToComponentRefactorWithIDAction.DEFAULT_ID) == null) {
      refactorWithIDActionCat.addAction(new ClassToComponentRefactorWithIDAction(es));
    }
  }
  if (e instanceof com.nomagic.uml2.ext.magicdraw.components.mdbasiccomponents.Component) {
    if (manager.getActionFor(ComponentToClassRefactorWithIDAction.DEFAULT_ID) == null) {
      refactorWithIDActionCat.addAction(new ComponentToClassRefactorWithIDAction(es));
    }
  }
  ActionsCategory modelLoad=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
  if (!TicketUtils.isTicketSet(project)) {
    ActionsCategory login=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad);
    if (manager.getActionFor(MMSLoginAction.DEFAULT_ID) == null) {
      login.addAction(new MMSLoginAction());
    }
  }
  ActionsCategory models=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad);
  if (MDUtils.isDeveloperMode()) {
    if (e instanceof Model && manager.getActionFor(CommitProjectAction.DEFAULT_ID) == null) {
      models.addAction(new CommitProjectAction(project,false,true));
      models.addAction(new CommitProjectAction(project,true,true));
    }
  }
  if (manager.getActionFor(ValidateModelAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateModelAction(es,""String_Node_Str""));
  }
  if (manager.getActionFor(ValidateElementDepthAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateElementDepthAction(es,""String_Node_Str""));
  }
  if (manager.getActionFor(ValidateElementAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateElementAction(es,""String_Node_Str""));
  }
  ActionsStateUpdater.updateActionsState();
  if (StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.validationScriptStereotype)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    UserScript us=new UserScript();
    us.setDgElement(e);
    List<Element> targets=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.queriesStereotype,1,false,1);
    targets.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.oldQueriesStereotype,1,false,1));
    us.setTargets(Utils2.asList(targets,Object.class));
    if (manager.getActionFor(RunUserValidationScriptAction.DEFAULT_ID) == null) {
      c.addAction(new RunUserValidationScriptAction(us,true));
    }
  }
 else   if (StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.userScriptStereotype)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    UserScript us=new UserScript();
    us.setDgElement(e);
    List<Element> targets=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.queriesStereotype,1,false,1);
    targets.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.oldQueriesStereotype,1,false,1));
    us.setTargets(Utils2.asList(targets,Object.class));
    if (manager.getActionFor(RunUserScriptAction.DEFAULT_ID) == null) {
      c.addAction(new RunUserScriptAction(us,true));
    }
  }
  boolean canShowGeneration=true;
  for (  Element element : es) {
    if (!StereotypesHelper.hasStereotypeOrDerived(element,sysmlview) && !StereotypesHelper.hasStereotypeOrDerived(element,elementGroupStereotype)) {
      canShowGeneration=false;
      break;
    }
  }
  if (canShowGeneration) {
    if (classview != null && es.size() == 1 && StereotypesHelper.hasStereotypeOrDerived(e,sysmlview)) {
      Boolean collectActions=(Boolean)StereotypesHelper.getStereotypePropertyFirst(e,classview,""String_Node_Str"");
      if (collectActions != null && collectActions) {
        ActionsCategory category=(ActionsCategory)manager.getActionFor(""String_Node_Str"");
        if (category == null) {
          category=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
          category.setNested(true);
          boolean added=addViewQueryActions(manager,category,(NamedElement)e);
          if (added) {
            manager.addCategory(0,category);
          }
        }
      }
    }
    ActionsCategory modelLoad2=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    ActionsCategory viewInstances=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad2);
    NMAction action=manager.getActionFor(GenerateViewPresentationAction.DEFAULT_ID);
    if (action == null) {
      viewInstances.addAction(new GenerateViewPresentationAction(new LinkedHashSet<>(es),false));
    }
    action=manager.getActionFor(GenerateViewPresentationAction.RECURSE_DEFAULT_ID);
    if (action == null) {
      viewInstances.addAction(new GenerateViewPresentationAction(new LinkedHashSet<>(es),true));
    }
    String url;
    if (StereotypesHelper.hasStereotype(project.getPrimaryModel(),""String_Node_Str"") && (url=(String)StereotypesHelper.getStereotypePropertyFirst(project.getPrimaryModel(),""String_Node_Str"",""String_Node_Str"")) != null && !url.isEmpty()) {
      ActionsCategory tracingCategory=manager.getCategory(""String_Node_Str"");
      if (tracingCategory != null) {
        action=manager.getActionFor(MMSViewLinkAction.DEFAULT_ID);
        if (action == null) {
          tracingCategory.addAction(new MMSViewLinkAction(es));
        }
      }
    }
    ActionsStateUpdater.updateActionsState();
  }
  if (e == project.getPrimaryModel()) {
    NMAction act=null;
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    act=manager.getActionFor(ValidateOldDocgen.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ValidateOldDocgen());
    }
  }
  if ((e instanceof Activity && StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.documentStereotype)) || StereotypesHelper.hasStereotypeOrDerived(e,sysmlview)) {
    NMAction act=null;
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    act=manager.getActionFor(ValidateDocument3Action.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ValidateDocument3Action(e));
    }
    act=manager.getActionFor(ValidateViewStructureAction.DEFAULT_ID);
    if (act == null && e instanceof Classifier) {
      c.addAction(new ValidateViewStructureAction(e));
    }
    act=manager.getActionFor(ViewDocument3Action.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ViewDocument3Action(e));
    }
    act=manager.getActionFor(GenerateDocumentAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new GenerateDocumentAction(e));
    }
    if (StereotypesHelper.hasStereotypeOrDerived(e,documentView)) {
      if (e instanceof Package) {
        act=manager.getActionFor(NumberDependencyAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new NumberDependencyAction(e));
        }
        act=manager.getActionFor(MigrateToClassViewAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new MigrateToClassViewAction(e));
        }
      }
      if (e instanceof Class) {
        act=manager.getActionFor(NumberAssociationAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new NumberAssociationAction((Class)e));
        }
      }
    }
  }
  if (StereotypesHelper.hasStereotypeOrDerived(e,sysmlviewpoint)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    NMAction act=manager.getActionFor(InstanceViewpointAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new InstanceViewpointAction(e));
    }
  }
  ArrayList<Property> selectedProperties=new ArrayList<Property>();
  for (  Element el : es) {
    if (el instanceof Property) {
      selectedProperties.add((Property)el);
    }
  }
  if (!(selectedProperties.isEmpty())) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    NMAction act=manager.getActionFor(CreateRestrictedValueAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new CreateRestrictedValueAction(selectedProperties));
    }
  }
}",0.997140569598536
88530,"/** 
 * Executes ""Generate View(s)"" MDK element action on the selected element
 * @param doc     Document element
 * @param recurse Select true to generate all views under this element, false togenerate only the view for the selected element
 */
public static void generateViews(Element doc,Boolean recurse){
  List<Element> documents=new ArrayList<>(1);
  documents.add(doc);
  GenerateViewPresentationAction gvpa=new GenerateViewPresentationAction(documents,recurse);
  validationWindow=new MDKValidationWindow(gvpa.updateAction());
}","/** 
 * Executes ""Generate View(s)"" MDK element action on the selected element
 * @param doc     Document element
 * @param recurse Select true to generate all views under this element, false togenerate only the view for the selected element
 */
public static void generateViews(Element doc,Boolean recurse){
  GenerateViewPresentationAction gvpa=new GenerateViewPresentationAction(Collections.singleton(doc),recurse);
  validationWindow=new MDKValidationWindow(gvpa.updateAction());
}",0.7757100881488737
88531,"static PreProcessor getCreatePreProcessor(BiFunction<String,Project,Element> idToElementConverter){
  return new PreProcessor((objectNode,project,strict,element) -> {
    if (element != null) {
      return element;
    }
    JsonNode jsonNode=objectNode.get(MDKConstants.TYPE_KEY);
    if (jsonNode == null || !jsonNode.isTextual()) {
      return null;
    }
    String type=jsonNode.asText();
    if (type.equals(UMLPackage.Literals.DIAGRAM.getName())) {
      JsonNode diagramTypeJsonNode=objectNode.get(MDKConstants.DIAGRAM_TYPE_KEY);
      if (diagramTypeJsonNode == null || !diagramTypeJsonNode.isTextual()) {
        return null;
      }
      JsonNode ownerJsonNode=objectNode.get(MDKConstants.OWNER_ID_KEY);
      if (ownerJsonNode == null || !ownerJsonNode.isTextual()) {
        return null;
      }
      Element owner=idToElementConverter.apply(ownerJsonNode.asText(),project);
      if (owner == null || !(owner instanceof Namespace)) {
        return null;
      }
      try {
        return ModelElementsManager.getInstance().createDiagram(diagramTypeJsonNode.asText(),(Namespace)owner);
      }
 catch (      ReadOnlyElementException e) {
        throw new ImportException(element,objectNode,e.getMessage(),e);
      }
    }
    EClassifier eClassifier=UMLPackage.eINSTANCE.getEClassifier(type);
    if (!(eClassifier instanceof EClass)) {
      return null;
    }
    EObject eObject=UMLFactory.eINSTANCE.create((EClass)eClassifier);
    if (!(eObject instanceof Element)) {
      return null;
    }
    return (Element)eObject;
  }
);
}","static PreProcessor getCreatePreProcessor(BiFunction<String,Project,Element> idToElementConverter){
  return new PreProcessor((objectNode,project,strict,element) -> {
    if (element != null) {
      return element;
    }
    JsonNode jsonNode=objectNode.get(MDKConstants.TYPE_KEY);
    if (jsonNode == null || !jsonNode.isTextual()) {
      return null;
    }
    String type=jsonNode.asText();
    if (type.equals(UMLPackage.Literals.DIAGRAM.getName())) {
      JsonNode diagramTypeJsonNode=objectNode.get(MDKConstants.DIAGRAM_TYPE_KEY);
      if (diagramTypeJsonNode == null || !diagramTypeJsonNode.isTextual()) {
        return null;
      }
      JsonNode ownerJsonNode=objectNode.get(MDKConstants.OWNER_ID_KEY);
      if (ownerJsonNode == null || !ownerJsonNode.isTextual()) {
        return null;
      }
      Element owner=idToElementConverter.apply(ownerJsonNode.asText(),project);
      if (owner == null || !(owner instanceof Namespace)) {
        return null;
      }
      try {
        return ModelElementsManager.getInstance().createDiagram(diagramTypeJsonNode.asText(),(Namespace)owner);
      }
 catch (      ReadOnlyElementException e) {
        throw new ImportException(element,objectNode,e.getMessage(),e);
      }
    }
    EClassifier eClassifier=UMLPackage.eINSTANCE.getEClassifier(type);
    if (!(eClassifier instanceof EClass)) {
      return null;
    }
    AbstractRepository initialRepository=(UMLFactory.eINSTANCE instanceof UMLFactoryImpl) ? ((UMLFactoryImpl)UMLFactory.eINSTANCE).getRepository() : null;
    UMLFactory.eINSTANCE.setRepository(project.getRepository());
    EObject eObject=UMLFactory.eINSTANCE.create((EClass)eClassifier);
    UMLFactory.eINSTANCE.setRepository(initialRepository);
    if (!(eObject instanceof Element)) {
      return null;
    }
    return (Element)eObject;
  }
);
}",0.917723385432026
88532,"private synchronized Changelog.Change<Element> convert(ObjectNode objectNode,Project project,Boolean strict) throws ImportException, ReadOnlyElementException {
  UMLFactory.eINSTANCE.setRepository(project.getRepository());
  project.getCounter().setCanResetIDForObject(true);
  JsonNode jsonNode=objectNode.get(MDKConstants.ID_KEY);
  Element element=jsonNode != null && jsonNode.isTextual() ? getIdToElementConverter().apply(jsonNode.asText(),project) : null;
  Changelog.ChangeType changeType=element != null && !project.isDisposed(element) ? Changelog.ChangeType.UPDATED : Changelog.ChangeType.CREATED;
  try {
    for (    PreProcessor preProcessor : getPreProcessors()) {
      element=preProcessor.getFunction().apply(objectNode,project,strict,element);
      if (element == null) {
        return null;
      }
    }
    for (    EStructuralFeature eStructuralFeature : element.eClass().getEAllStructuralFeatures()) {
      final Element finalElement=element;
      ImportFunction function=getEStructuralFeatureOverrides().stream().filter(override -> override.getPredicate().test(objectNode,eStructuralFeature,project,strict,finalElement)).map(EStructuralFeatureOverride::getFunction).findAny().orElse(DEFAULT_E_STRUCTURAL_FEATURE_FUNCTION);
      element=function.apply(objectNode,eStructuralFeature,project,strict,element);
      if (element == null) {
        return null;
      }
    }
  }
 catch (  RuntimeException e) {
    throw new ImportException(element,jsonNode,e.getMessage(),e);
  }
  return new Changelog.Change<>(element,changeType);
}","private synchronized Changelog.Change<Element> convert(ObjectNode objectNode,Project project,Boolean strict) throws ImportException, ReadOnlyElementException {
  JsonNode jsonNode=objectNode.get(MDKConstants.ID_KEY);
  Element element=jsonNode != null && jsonNode.isTextual() ? getIdToElementConverter().apply(jsonNode.asText(),project) : null;
  Changelog.ChangeType changeType=element != null && !project.isDisposed(element) ? Changelog.ChangeType.UPDATED : Changelog.ChangeType.CREATED;
  try {
    for (    PreProcessor preProcessor : getPreProcessors()) {
      element=preProcessor.getFunction().apply(objectNode,project,strict,element);
      if (element == null) {
        return null;
      }
    }
    if (element.eClass() == null) {
      return null;
    }
    for (    EStructuralFeature eStructuralFeature : element.eClass().getEAllStructuralFeatures()) {
      final Element finalElement=element;
      ImportFunction function=getEStructuralFeatureOverrides().stream().filter(override -> override.getPredicate().test(objectNode,eStructuralFeature,project,strict,finalElement)).map(EStructuralFeatureOverride::getFunction).findAny().orElse(DEFAULT_E_STRUCTURAL_FEATURE_FUNCTION);
      element=function.apply(objectNode,eStructuralFeature,project,strict,element);
      if (element == null) {
        return null;
      }
    }
  }
 catch (  RuntimeException e) {
    throw new ImportException(element,jsonNode,e.getMessage(),e);
  }
  return new Changelog.Change<>(element,changeType);
}",0.9421379535796012
88533,"@Override public void run(ProgressStatus progressStatus){
  progressStatus.init(""String_Node_Str"",6);
  if (manageSesssions) {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().closeSession(project);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(1);
  DocumentValidator dv=new DocumentValidator(start);
  dv.validateDocument();
  if (dv.isFatal()) {
    dv.printErrors(false);
    return;
  }
  DocumentGenerator dg=new DocumentGenerator(start,dv,null,false);
  Document dge=dg.parseDocument(true,recurse,false);
  new PostProcessor().process(dge);
  DocBookOutputVisitor docBookOutputVisitor=new DocBookOutputVisitor(true);
  dge.accept(docBookOutputVisitor);
  DBBook book=docBookOutputVisitor.getBook();
  if (book == null) {
    return;
  }
  ViewHierarchyVisitor viewHierarchyVisitor=new ViewHierarchyVisitor();
  dge.accept(viewHierarchyVisitor);
  Map<String,Pair<ObjectNode,InstanceSpecification>> instanceSpecificationMap=new LinkedHashMap<>();
  Map<String,Pair<ObjectNode,Slot>> slotMap=new LinkedHashMap<>();
  Map<String,ViewMapping> viewMap=new LinkedHashMap<>(viewHierarchyVisitor.getView2ViewElements().size());
  for (  Element view : viewHierarchyVisitor.getView2ViewElements().keySet()) {
    if (processedElements.contains(view)) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
      continue;
    }
    ViewMapping viewMapping=viewMap.containsKey(Converters.getElementToIdConverter().apply(view)) ? viewMap.get(Converters.getElementToIdConverter().apply(view)) : new ViewMapping();
    viewMapping.setElement(view);
    viewMap.put(Converters.getElementToIdConverter().apply(view),viewMapping);
  }
  List<Constraint> constraintsToBeDeleted=new ArrayList<>(viewMap.size());
  for (  ViewMapping viewMapping : viewMap.values()) {
    Element view=viewMapping.getElement();
    if (view == null) {
      continue;
    }
    Constraint constraint=Utils.getViewConstraint(view);
    if (constraint != null) {
      constraintsToBeDeleted.add(constraint);
    }
  }
  if (!constraintsToBeDeleted.isEmpty()) {
    if (manageSesssions) {
      SessionManager.getInstance().createSession(project,""String_Node_Str"");
    }
    for (    Constraint constraint : constraintsToBeDeleted) {
      if (constraint.isEditable()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(constraint));
        try {
          ModelElementsManager.getInstance().removeElement(constraint);
        }
 catch (        ReadOnlyElementException e) {
          updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str""));
          failure=true;
        }
      }
 else {
        updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str""));
        failure=true;
      }
    }
    if (manageSesssions) {
      SessionManager.getInstance().closeSession(project);
    }
  }
  if (failure) {
    if (showValidation) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
    return;
  }
  if (handleCancel(progressStatus)) {
    return;
  }
  LocalSyncTransactionCommitListener localSyncTransactionCommitListener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  if (manageSesssions) {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().closeSession(project);
    }
    SessionManager.getInstance().createSession(project,""String_Node_Str"");
  }
  if (localSyncTransactionCommitListener != null) {
    localSyncTransactionCommitListener.setDisabled(true);
  }
  List<String> viewIDs=new ArrayList<>();
  if (!viewMap.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(2);
    ObjectNode viewResponse;
    try {
      viewResponse=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,viewMap.keySet(),progressStatus));
    }
 catch (    ServerException|IOException|URISyntaxException e) {
      failure=true;
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
    JsonNode viewElementsJsonArray;
    if (viewResponse != null && (viewElementsJsonArray=viewResponse.get(""String_Node_Str"")) != null && viewElementsJsonArray.isArray()) {
      Queue<String> instanceIDs=new LinkedList<>();
      Queue<String> slotIDs=new LinkedList<>();
      Property generatedFromViewProperty=Utils.getGeneratedFromViewProperty(project), generatedFromElementProperty=Utils.getGeneratedFromElementProperty(project);
      for (      JsonNode elementJsonNode : viewElementsJsonArray) {
        if (!elementJsonNode.isObject()) {
          continue;
        }
        ObjectNode elementObjectNode=(ObjectNode)elementJsonNode;
        JsonNode viewOperandJsonNode=JacksonUtils.getAtPath(elementObjectNode,""String_Node_Str"" + MDKConstants.CONTENTS_KEY + ""String_Node_Str""), sysmlIdJson=elementObjectNode.get(MDKConstants.ID_KEY);
        String sysmlId;
        if (sysmlIdJson != null && sysmlIdJson.isTextual() && !(sysmlId=sysmlIdJson.asText()).isEmpty()) {
          viewIDs.add(sysmlId);
          if (viewOperandJsonNode != null && viewOperandJsonNode.isArray()) {
            List<String> viewInstanceIDs=new ArrayList<>(viewOperandJsonNode.size());
            for (            JsonNode viewOperandJson : viewOperandJsonNode) {
              JsonNode instanceIdJsonNode=viewOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
              String instanceId;
              if (instanceIdJsonNode != null && instanceIdJsonNode.isTextual() && !(instanceId=instanceIdJsonNode.asText()).isEmpty()) {
                if (generatedFromViewProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                }
                if (generatedFromElementProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                }
                instanceIDs.add(instanceId);
                viewInstanceIDs.add(instanceId);
              }
            }
            ViewMapping viewMapping=viewMap.containsKey(sysmlId) ? viewMap.get(sysmlId) : new ViewMapping();
            viewMapping.setObjectNode(elementObjectNode);
            viewMapping.setInstanceIDs(viewInstanceIDs);
            viewMap.put(sysmlId,viewMapping);
          }
        }
      }
      List<ObjectNode> instanceObjectNodes=new ArrayList<>();
      List<ObjectNode> slotObjectNodes=new ArrayList<>();
      while (!instanceIDs.isEmpty() && !slotIDs.isEmpty()) {
        if (handleCancel(progressStatus)) {
          return;
        }
        List<String> elementIDs=new ArrayList<>(instanceIDs);
        elementIDs.addAll(slotIDs);
        ObjectNode instanceAndSlotResponse;
        try {
          instanceAndSlotResponse=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,elementIDs,progressStatus));
        }
 catch (        ServerException|IOException|URISyntaxException e) {
          failure=true;
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          e.printStackTrace();
          if (manageSesssions) {
            SessionManager.getInstance().cancelSession(project);
          }
          return;
        }
        instanceIDs.clear();
        slotIDs.clear();
        JsonNode instanceAndSlotElementsJsonArray;
        if (instanceAndSlotResponse != null && (instanceAndSlotElementsJsonArray=instanceAndSlotResponse.get(""String_Node_Str"")) != null && instanceAndSlotElementsJsonArray.isArray()) {
          for (          JsonNode elementJson : instanceAndSlotElementsJsonArray) {
            JsonNode instanceOperandJsonArray=JacksonUtils.getAtPath(elementJson,""String_Node_Str"");
            if (instanceOperandJsonArray != null && instanceOperandJsonArray.isArray()) {
              for (              JsonNode instanceOperandJson : instanceOperandJsonArray) {
                JsonNode instanceIdJson=instanceOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
                String instanceId;
                if (instanceIdJson != null && instanceIdJson.isTextual() && !(instanceId=instanceIdJson.asText()).isEmpty()) {
                  if (generatedFromViewProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                  }
                  if (generatedFromElementProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                  }
                  instanceIDs.add(instanceId);
                }
              }
            }
            JsonNode typeJson=elementJson.get(MDKConstants.TYPE_KEY);
            if (typeJson.isTextual() && elementJson.isObject()) {
              (typeJson.asText().equalsIgnoreCase(""String_Node_Str"") ? slotObjectNodes : instanceObjectNodes).add((ObjectNode)elementJson);
            }
          }
        }
      }
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(3);
      EMFImporter emfImporter=new EMFImporter(){
        @Override public List<PreProcessor> getPreProcessors(){
          if (preProcessors == null) {
            preProcessors=new ArrayList<>(super.getPreProcessors());
            preProcessors.remove(PreProcessor.SYSML_ID_VALIDATION);
          }
          return preProcessors;
        }
        @Override public List<EStructuralFeatureOverride> getEStructuralFeatureOverrides(){
          if (eStructuralFeatureOverrides == null) {
            eStructuralFeatureOverrides=new ArrayList<>(super.getEStructuralFeatureOverrides());
            eStructuralFeatureOverrides.remove(EStructuralFeatureOverride.OWNER);
            eStructuralFeatureOverrides.add(new EStructuralFeatureOverride(EStructuralFeatureOverride.OWNER.getPredicate(),(objectNode,eStructuralFeature,project,strict,element) -> {
              if (element instanceof InstanceSpecification) {
                element.setOwner(project.getPrimaryModel());
                return element;
              }
              return EStructuralFeatureOverride.OWNER.getFunction().apply(objectNode,eStructuralFeature,project,strict,element);
            }
));
          }
          return eStructuralFeatureOverrides;
        }
      }
;
      for (      Boolean strict : Arrays.asList(false,true)) {
        ListIterator<ObjectNode> instanceObjectNodesIterator=instanceObjectNodes.listIterator(instanceObjectNodes.size());
        while (instanceObjectNodesIterator.hasPrevious()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode instanceObjectNode=instanceObjectNodesIterator.previous();
          try {
            Changelog.Change<Element> change=emfImporter.apply(instanceObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof InstanceSpecification) {
              instanceSpecificationMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(instanceObjectNode,(InstanceSpecification)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + instanceObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            instanceObjectNodesIterator.remove();
          }
        }
        ListIterator<ObjectNode> slotObjectNodesIterator=slotObjectNodes.listIterator();
        while (slotObjectNodesIterator.hasNext()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode slotObjectNode=slotObjectNodesIterator.next();
          try {
            Changelog.Change<Element> change=emfImporter.apply(slotObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof Slot) {
              slotMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(slotObjectNode,(Slot)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + slotObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            slotObjectNodesIterator.remove();
          }
        }
      }
      for (      ViewMapping viewMapping : viewMap.values()) {
        Element view=viewMapping.getElement();
        if (handleCancel(progressStatus)) {
          return;
        }
        ObjectNode viewObjectNode=viewMapping.getObjectNode();
        if (viewObjectNode == null) {
          continue;
        }
        JsonNode viewContentsJsonNode=viewObjectNode.get(MDKConstants.CONTENTS_KEY);
        if (viewContentsJsonNode == null || !viewContentsJsonNode.isObject()) {
          continue;
        }
        try {
          Changelog.Change<Element> change=Converters.getJsonToElementConverter().apply((ObjectNode)viewContentsJsonNode,project,false);
          if (change.getChanged() != null && change.getChanged() instanceof Expression) {
            instanceUtils.getOrCreateViewConstraint(view).setSpecification((Expression)change.getChanged());
          }
        }
 catch (        ImportException|ReadOnlyElementException e) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
          continue;
        }
      }
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(4);
  DBAlfrescoVisitor dbAlfrescoVisitor=new DBAlfrescoVisitor(recurse,true);
  try {
    book.accept(dbAlfrescoVisitor);
  }
 catch (  Exception e) {
    Utils.printException(e);
    e.printStackTrace();
  }
  Map<Element,List<PresentationElementInstance>> view2pe=dbAlfrescoVisitor.getView2Pe();
  Map<Element,List<PresentationElementInstance>> view2unused=dbAlfrescoVisitor.getView2Unused();
  List<Element> views=instanceUtils.getViewProcessOrder(start,dbAlfrescoVisitor.getHierarchyElements());
  views.removeAll(processedElements);
  Set<Element> skippedViews=new HashSet<>();
  for (  Element view : views) {
    if (ProjectUtilities.isElementInAttachedProject(view)) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewInProject.addViolation(violation);
      skippedViews.add(view);
    }
    if (!viewIDs.contains(Converters.getElementToIdConverter().apply(view))) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewDoesNotExist.addViolation(violation);
      skippedViews.add(view);
    }
  }
  if (failure) {
    if (showValidation) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
    if (manageSesssions) {
      SessionManager.getInstance().cancelSession(project);
    }
    return;
  }
  try {
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      handlePes(view2pe.get(view),null);
      instanceUtils.updateOrCreateConstraintFromPresentationElements(view,view2pe.get(view));
    }
    if (handleCancel(progressStatus)) {
      return;
    }
    LinkedList<ObjectNode> elementsToCommit=new LinkedList<>();
    Queue<Pair<InstanceSpecification,Element>> instanceToView=new LinkedList<>();
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      ObjectNode clientViewJson=Converters.getElementToJsonConverter().apply(view,project);
      if (clientViewJson == null) {
        skippedViews.add(view);
        continue;
      }
      Object o;
      ObjectNode serverViewJson=(o=viewMap.get(Converters.getElementToIdConverter().apply(view))) != null ? ((ViewMapping)o).getObjectNode() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientViewJson,serverViewJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientViewJson,serverViewJson).toString());
        }
        elementsToCommit.add(clientViewJson);
      }
      for (      PresentationElementInstance presentationElementInstance : view2pe.get(view)) {
        if (presentationElementInstance.getInstance() != null) {
          instanceToView.add(new Pair<>(presentationElementInstance.getInstance(),view));
        }
      }
    }
    String viewInstanceBinId=MDKConstants.VIEW_INSTANCES_BIN_PREFIX + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    while (!instanceToView.isEmpty()) {
      Pair<InstanceSpecification,Element> pair=instanceToView.remove();
      InstanceSpecification instance=pair.getKey();
      List<InstanceSpecification> subInstances=instanceUtils.getCurrentInstances(instance,pair.getValue()).getAll();
      for (      InstanceSpecification subInstance : subInstances) {
        instanceToView.add(new Pair<>(subInstance,pair.getValue()));
      }
      ObjectNode clientInstanceSpecificationJson=Converters.getElementToJsonConverter().apply(instance,project);
      if (clientInstanceSpecificationJson == null) {
        continue;
      }
      clientInstanceSpecificationJson.put(MDKConstants.OWNER_ID_KEY,viewInstanceBinId);
      ObjectNode serverInstanceSpecificationJson=instanceSpecificationMap.containsKey(Converters.getElementToIdConverter().apply(instance)) ? instanceSpecificationMap.get(Converters.getElementToIdConverter().apply(instance)).getKey() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientInstanceSpecificationJson,serverInstanceSpecificationJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(instance) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientInstanceSpecificationJson,serverInstanceSpecificationJson).toString());
        }
        elementsToCommit.add(clientInstanceSpecificationJson);
      }
      for (      Slot slot : instance.getSlot()) {
        ObjectNode clientSlotJson=Converters.getElementToJsonConverter().apply(slot,project);
        if (clientSlotJson == null) {
          continue;
        }
        JsonNode serverSlotJson=slotMap.containsKey(Converters.getElementToIdConverter().apply(slot)) ? slotMap.get(Converters.getElementToIdConverter().apply(slot)).getKey() : null;
        if (!JsonEquivalencePredicate.getInstance().test(clientSlotJson,serverSlotJson)) {
          elementsToCommit.add(clientSlotJson);
          if (MDUtils.isDeveloperMode()) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(slot) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientSlotJson,serverSlotJson).toString());
          }
        }
      }
    }
    if (handleCancel(progressStatus)) {
      return;
    }
    boolean changed=false;
    if (elementsToCommit.size() > 0) {
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(5);
      Application.getInstance().getGUILog().log(""String_Node_Str"" + elementsToCommit.size() + ""String_Node_Str""+ (elementsToCommit.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,elementsToCommit,MMSUtils.JsonBlobType.ELEMENT_JSON);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,true,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    Set<String> mmsElementsToDelete=new HashSet<>();
    for (    List<PresentationElementInstance> presentationElementInstances : view2unused.values()) {
      for (      PresentationElementInstance presentationElementInstance : presentationElementInstances) {
        if (presentationElementInstance.getInstance() == null) {
          continue;
        }
        String id=Converters.getElementToIdConverter().apply(presentationElementInstance.getInstance());
        if (id == null) {
          continue;
        }
        mmsElementsToDelete.add(id);
      }
    }
    if (elementsToCommit.size() > 0) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + mmsElementsToDelete.size() + ""String_Node_Str""+ (mmsElementsToDelete.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,mmsElementsToDelete,MMSUtils.JsonBlobType.ELEMENT_ID);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,true,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    if (!changed) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(6);
    Set<Element> elementsToDelete=new HashSet<>();
    for (    Pair<ObjectNode,Slot> pair : slotMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Pair<ObjectNode,InstanceSpecification> pair : instanceSpecificationMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Element element : views) {
      Constraint constraint=Utils.getViewConstraint(element);
      if (constraint == null) {
        continue;
      }
      elementsToDelete.add(constraint);
      ValueSpecification valueSpecification=constraint.getSpecification();
      if (valueSpecification == null) {
        continue;
      }
      elementsToDelete.add(valueSpecification);
      List<ValueSpecification> operands;
      if (!(valueSpecification instanceof Expression) || (operands=((Expression)valueSpecification).getOperand()) == null) {
        continue;
      }
      for (      ValueSpecification operand : operands) {
        elementsToDelete.add(operand);
        InstanceSpecification instanceSpecification;
        if (!(operand instanceof InstanceValue) || (instanceSpecification=((InstanceValue)operand).getInstance()) == null) {
          continue;
        }
        elementsToDelete.add(instanceSpecification);
        for (        Slot slot : instanceSpecification.getSlot()) {
          elementsToDelete.add(slot);
          elementsToDelete.addAll(slot.getValue());
        }
      }
    }
    for (    Element element : elementsToDelete) {
      try {
        ModelElementsManager.getInstance().removeElement(element);
      }
 catch (      ReadOnlyElementException ignored) {
        System.out.println(""String_Node_Str"" + element.getLocalID());
      }
    }
    processedElements.addAll(views);
  }
 catch (  Exception e) {
    failure=true;
    Utils.printException(e);
  }
 finally {
    if (manageSesssions) {
      if (SessionManager.getInstance().isSessionCreated(project)) {
        SessionManager.getInstance().cancelSession(project);
      }
    }
    if (localSyncTransactionCommitListener != null) {
      localSyncTransactionCommitListener.setDisabled(false);
    }
  }
  ImageValidator iv=new ImageValidator(dbAlfrescoVisitor.getImages(),images);
  iv.validate(project);
  for (  ValidationRule validationRule : iv.getSuite().getValidationRules()) {
    for (    ValidationRuleViolation validationRuleViolation : validationRule.getViolations()) {
      if (!validationRuleViolation.getActions().isEmpty()) {
        validationRuleViolation.getActions().get(0).actionPerformed(null);
      }
    }
  }
  if (showValidation) {
    if (suite.hasErrors()) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
  }
}","@Override public void run(ProgressStatus progressStatus){
  progressStatus.init(""String_Node_Str"",6);
  if (manageSesssions) {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().closeSession(project);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(1);
  DocumentValidator dv=new DocumentValidator(start);
  dv.validateDocument();
  if (dv.isFatal()) {
    dv.printErrors(false);
    return;
  }
  DocumentGenerator dg=new DocumentGenerator(start,dv,null,false);
  Document dge=dg.parseDocument(true,recurse,false);
  new PostProcessor().process(dge);
  DocBookOutputVisitor docBookOutputVisitor=new DocBookOutputVisitor(true);
  dge.accept(docBookOutputVisitor);
  DBBook book=docBookOutputVisitor.getBook();
  if (book == null) {
    return;
  }
  ViewHierarchyVisitor viewHierarchyVisitor=new ViewHierarchyVisitor();
  dge.accept(viewHierarchyVisitor);
  Map<String,Pair<ObjectNode,InstanceSpecification>> instanceSpecificationMap=new LinkedHashMap<>();
  Map<String,Pair<ObjectNode,Slot>> slotMap=new LinkedHashMap<>();
  Map<String,ViewMapping> viewMap=new LinkedHashMap<>(viewHierarchyVisitor.getView2ViewElements().size());
  for (  Element view : viewHierarchyVisitor.getView2ViewElements().keySet()) {
    if (processedElements.contains(view)) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
      continue;
    }
    ViewMapping viewMapping=viewMap.containsKey(Converters.getElementToIdConverter().apply(view)) ? viewMap.get(Converters.getElementToIdConverter().apply(view)) : new ViewMapping();
    viewMapping.setElement(view);
    viewMap.put(Converters.getElementToIdConverter().apply(view),viewMapping);
  }
  List<Constraint> constraintsToBeDeleted=new ArrayList<>(viewMap.size());
  for (  ViewMapping viewMapping : viewMap.values()) {
    Element view=viewMapping.getElement();
    if (view == null) {
      continue;
    }
    Constraint constraint=Utils.getViewConstraint(view);
    if (constraint != null) {
      constraintsToBeDeleted.add(constraint);
    }
  }
  if (!constraintsToBeDeleted.isEmpty()) {
    if (manageSesssions) {
      SessionManager.getInstance().createSession(project,""String_Node_Str"");
    }
    for (    Constraint constraint : constraintsToBeDeleted) {
      if (constraint.isEditable()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(constraint));
        try {
          ModelElementsManager.getInstance().removeElement(constraint);
        }
 catch (        ReadOnlyElementException e) {
          updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str""));
          failure=true;
        }
      }
 else {
        updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str""));
        failure=true;
      }
    }
    if (manageSesssions) {
      SessionManager.getInstance().closeSession(project);
    }
  }
  if (failure) {
    if (showValidation) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
    return;
  }
  if (handleCancel(progressStatus)) {
    return;
  }
  LocalSyncTransactionCommitListener localSyncTransactionCommitListener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  if (manageSesssions) {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().closeSession(project);
    }
    SessionManager.getInstance().createSession(project,""String_Node_Str"");
  }
  if (localSyncTransactionCommitListener != null) {
    localSyncTransactionCommitListener.setDisabled(true);
  }
  List<String> viewIDs=new ArrayList<>();
  if (!viewMap.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(2);
    ObjectNode viewResponse;
    try {
      viewResponse=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,viewMap.keySet(),progressStatus));
    }
 catch (    ServerException|IOException|URISyntaxException e) {
      failure=true;
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
    JsonNode viewElementsJsonArray;
    if (viewResponse != null && (viewElementsJsonArray=viewResponse.get(""String_Node_Str"")) != null && viewElementsJsonArray.isArray()) {
      Queue<String> instanceIDs=new LinkedList<>();
      Queue<String> slotIDs=new LinkedList<>();
      Property generatedFromViewProperty=Utils.getGeneratedFromViewProperty(project), generatedFromElementProperty=Utils.getGeneratedFromElementProperty(project);
      for (      JsonNode elementJsonNode : viewElementsJsonArray) {
        if (!elementJsonNode.isObject()) {
          continue;
        }
        ObjectNode elementObjectNode=(ObjectNode)elementJsonNode;
        JsonNode viewOperandJsonNode=JacksonUtils.getAtPath(elementObjectNode,""String_Node_Str"" + MDKConstants.CONTENTS_KEY + ""String_Node_Str""), sysmlIdJson=elementObjectNode.get(MDKConstants.ID_KEY);
        String sysmlId;
        if (sysmlIdJson != null && sysmlIdJson.isTextual() && !(sysmlId=sysmlIdJson.asText()).isEmpty()) {
          viewIDs.add(sysmlId);
          if (viewOperandJsonNode != null && viewOperandJsonNode.isArray()) {
            List<String> viewInstanceIDs=new ArrayList<>(viewOperandJsonNode.size());
            for (            JsonNode viewOperandJson : viewOperandJsonNode) {
              JsonNode instanceIdJsonNode=viewOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
              String instanceId;
              if (instanceIdJsonNode != null && instanceIdJsonNode.isTextual() && !(instanceId=instanceIdJsonNode.asText()).isEmpty()) {
                if (generatedFromViewProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                }
                if (generatedFromElementProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                }
                instanceIDs.add(instanceId);
                viewInstanceIDs.add(instanceId);
              }
            }
            ViewMapping viewMapping=viewMap.containsKey(sysmlId) ? viewMap.get(sysmlId) : new ViewMapping();
            viewMapping.setObjectNode(elementObjectNode);
            viewMapping.setInstanceIDs(viewInstanceIDs);
            viewMap.put(sysmlId,viewMapping);
          }
        }
      }
      List<ObjectNode> instanceObjectNodes=new ArrayList<>();
      List<ObjectNode> slotObjectNodes=new ArrayList<>();
      while (!instanceIDs.isEmpty() && !slotIDs.isEmpty()) {
        if (handleCancel(progressStatus)) {
          return;
        }
        List<String> elementIDs=new ArrayList<>(instanceIDs);
        elementIDs.addAll(slotIDs);
        ObjectNode instanceAndSlotResponse;
        try {
          instanceAndSlotResponse=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,elementIDs,progressStatus));
        }
 catch (        ServerException|IOException|URISyntaxException e) {
          failure=true;
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          e.printStackTrace();
          if (manageSesssions) {
            SessionManager.getInstance().cancelSession(project);
          }
          return;
        }
        instanceIDs.clear();
        slotIDs.clear();
        JsonNode instanceAndSlotElementsJsonArray;
        if (instanceAndSlotResponse != null && (instanceAndSlotElementsJsonArray=instanceAndSlotResponse.get(""String_Node_Str"")) != null && instanceAndSlotElementsJsonArray.isArray()) {
          for (          JsonNode elementJson : instanceAndSlotElementsJsonArray) {
            JsonNode instanceOperandJsonArray=JacksonUtils.getAtPath(elementJson,""String_Node_Str"");
            if (instanceOperandJsonArray != null && instanceOperandJsonArray.isArray()) {
              for (              JsonNode instanceOperandJson : instanceOperandJsonArray) {
                JsonNode instanceIdJson=instanceOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
                String instanceId;
                if (instanceIdJson != null && instanceIdJson.isTextual() && !(instanceId=instanceIdJson.asText()).isEmpty()) {
                  if (generatedFromViewProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                  }
                  if (generatedFromElementProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                  }
                  instanceIDs.add(instanceId);
                }
              }
            }
            JsonNode typeJson=elementJson.get(MDKConstants.TYPE_KEY);
            if (typeJson.isTextual() && elementJson.isObject()) {
              (typeJson.asText().equalsIgnoreCase(""String_Node_Str"") ? slotObjectNodes : instanceObjectNodes).add((ObjectNode)elementJson);
            }
          }
        }
      }
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(3);
      EMFImporter emfImporter=new EMFImporter(){
        @Override public List<PreProcessor> getPreProcessors(){
          if (preProcessors == null) {
            preProcessors=new ArrayList<>(super.getPreProcessors());
            preProcessors.remove(PreProcessor.SYSML_ID_VALIDATION);
          }
          return preProcessors;
        }
        @Override public List<EStructuralFeatureOverride> getEStructuralFeatureOverrides(){
          if (eStructuralFeatureOverrides == null) {
            eStructuralFeatureOverrides=new ArrayList<>(super.getEStructuralFeatureOverrides());
            eStructuralFeatureOverrides.remove(EStructuralFeatureOverride.OWNER);
            eStructuralFeatureOverrides.add(new EStructuralFeatureOverride(EStructuralFeatureOverride.OWNER.getPredicate(),(objectNode,eStructuralFeature,project,strict,element) -> {
              if (element instanceof InstanceSpecification) {
                element.setOwner(project.getPrimaryModel());
                return element;
              }
              return EStructuralFeatureOverride.OWNER.getFunction().apply(objectNode,eStructuralFeature,project,strict,element);
            }
));
          }
          return eStructuralFeatureOverrides;
        }
      }
;
      for (      Boolean strict : Arrays.asList(false,true)) {
        ListIterator<ObjectNode> instanceObjectNodesIterator=instanceObjectNodes.listIterator(instanceObjectNodes.size());
        while (instanceObjectNodesIterator.hasPrevious()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode instanceObjectNode=instanceObjectNodesIterator.previous();
          try {
            Changelog.Change<Element> change=emfImporter.apply(instanceObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof InstanceSpecification) {
              instanceSpecificationMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(instanceObjectNode,(InstanceSpecification)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + instanceObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            instanceObjectNodesIterator.remove();
          }
        }
        ListIterator<ObjectNode> slotObjectNodesIterator=slotObjectNodes.listIterator();
        while (slotObjectNodesIterator.hasNext()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode slotObjectNode=slotObjectNodesIterator.next();
          try {
            Changelog.Change<Element> change=emfImporter.apply(slotObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof Slot) {
              slotMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(slotObjectNode,(Slot)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + slotObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            slotObjectNodesIterator.remove();
          }
        }
      }
      for (      ViewMapping viewMapping : viewMap.values()) {
        Element view=viewMapping.getElement();
        if (handleCancel(progressStatus)) {
          return;
        }
        ObjectNode viewObjectNode=viewMapping.getObjectNode();
        if (viewObjectNode == null) {
          continue;
        }
        JsonNode viewContentsJsonNode=viewObjectNode.get(MDKConstants.CONTENTS_KEY);
        if (viewContentsJsonNode == null || !viewContentsJsonNode.isObject()) {
          continue;
        }
        try {
          Changelog.Change<Element> change=Converters.getJsonToElementConverter().apply((ObjectNode)viewContentsJsonNode,project,false);
          if (change.getChanged() != null && change.getChanged() instanceof Expression) {
            instanceUtils.getOrCreateViewConstraint(view).setSpecification((Expression)change.getChanged());
          }
        }
 catch (        ImportException|ReadOnlyElementException e) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
          continue;
        }
      }
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(4);
  DBAlfrescoVisitor dbAlfrescoVisitor=new DBAlfrescoVisitor(recurse,true);
  try {
    book.accept(dbAlfrescoVisitor);
  }
 catch (  Exception e) {
    Utils.printException(e);
    e.printStackTrace();
  }
  Map<Element,List<PresentationElementInstance>> view2pe=dbAlfrescoVisitor.getView2Pe();
  Map<Element,List<PresentationElementInstance>> view2unused=dbAlfrescoVisitor.getView2Unused();
  List<Element> views=instanceUtils.getViewProcessOrder(start,dbAlfrescoVisitor.getHierarchyElements());
  views.removeAll(processedElements);
  Set<Element> skippedViews=new HashSet<>();
  for (  Element view : views) {
    if (ProjectUtilities.isElementInAttachedProject(view)) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewInProject.addViolation(violation);
      skippedViews.add(view);
    }
    if (!viewIDs.contains(Converters.getElementToIdConverter().apply(view))) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewDoesNotExist.addViolation(violation);
      skippedViews.add(view);
    }
  }
  if (failure) {
    if (showValidation) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
    if (manageSesssions) {
      SessionManager.getInstance().cancelSession(project);
    }
    return;
  }
  try {
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      handlePes(view2pe.get(view),null);
      instanceUtils.updateOrCreateConstraintFromPresentationElements(view,view2pe.get(view));
    }
    if (handleCancel(progressStatus)) {
      return;
    }
    LinkedList<ObjectNode> elementsToCommit=new LinkedList<>();
    Queue<Pair<InstanceSpecification,Element>> instanceToView=new LinkedList<>();
    Map<Element,JSONArray> view2elements=dbAlfrescoVisitor.getView2Elements();
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      ObjectNode clientViewJson=Converters.getElementToJsonConverter().apply(view,project);
      if (clientViewJson == null) {
        skippedViews.add(view);
        continue;
      }
      if (view2elements.get(view) != null) {
        ArrayNode displayedElements=clientViewJson.putArray(MDKConstants.DISPLAYED_ELEMENT_IDS_KEY);
        for (        Object id : view2elements.get(view)) {
          displayedElements.add((String)id);
        }
      }
      Object o;
      ObjectNode serverViewJson=(o=viewMap.get(Converters.getElementToIdConverter().apply(view))) != null ? ((ViewMapping)o).getObjectNode() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientViewJson,serverViewJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientViewJson,serverViewJson).toString());
        }
        elementsToCommit.add(clientViewJson);
      }
      for (      PresentationElementInstance presentationElementInstance : view2pe.get(view)) {
        if (presentationElementInstance.getInstance() != null) {
          instanceToView.add(new Pair<>(presentationElementInstance.getInstance(),view));
        }
      }
    }
    String viewInstanceBinId=MDKConstants.VIEW_INSTANCES_BIN_PREFIX + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    while (!instanceToView.isEmpty()) {
      Pair<InstanceSpecification,Element> pair=instanceToView.remove();
      InstanceSpecification instance=pair.getKey();
      List<InstanceSpecification> subInstances=instanceUtils.getCurrentInstances(instance,pair.getValue()).getAll();
      for (      InstanceSpecification subInstance : subInstances) {
        instanceToView.add(new Pair<>(subInstance,pair.getValue()));
      }
      ObjectNode clientInstanceSpecificationJson=Converters.getElementToJsonConverter().apply(instance,project);
      if (clientInstanceSpecificationJson == null) {
        continue;
      }
      clientInstanceSpecificationJson.put(MDKConstants.OWNER_ID_KEY,viewInstanceBinId);
      ObjectNode serverInstanceSpecificationJson=instanceSpecificationMap.containsKey(Converters.getElementToIdConverter().apply(instance)) ? instanceSpecificationMap.get(Converters.getElementToIdConverter().apply(instance)).getKey() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientInstanceSpecificationJson,serverInstanceSpecificationJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(instance) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientInstanceSpecificationJson,serverInstanceSpecificationJson).toString());
        }
        elementsToCommit.add(clientInstanceSpecificationJson);
      }
      for (      Slot slot : instance.getSlot()) {
        ObjectNode clientSlotJson=Converters.getElementToJsonConverter().apply(slot,project);
        if (clientSlotJson == null) {
          continue;
        }
        JsonNode serverSlotJson=slotMap.containsKey(Converters.getElementToIdConverter().apply(slot)) ? slotMap.get(Converters.getElementToIdConverter().apply(slot)).getKey() : null;
        if (!JsonEquivalencePredicate.getInstance().test(clientSlotJson,serverSlotJson)) {
          elementsToCommit.add(clientSlotJson);
          if (MDUtils.isDeveloperMode()) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(slot) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientSlotJson,serverSlotJson).toString());
          }
        }
      }
    }
    if (handleCancel(progressStatus)) {
      return;
    }
    boolean changed=false;
    if (elementsToCommit.size() > 0) {
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(5);
      Application.getInstance().getGUILog().log(""String_Node_Str"" + elementsToCommit.size() + ""String_Node_Str""+ (elementsToCommit.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,elementsToCommit,MMSUtils.JsonBlobType.ELEMENT_JSON);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,true,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    Set<String> mmsElementsToDelete=new HashSet<>();
    for (    List<PresentationElementInstance> presentationElementInstances : view2unused.values()) {
      for (      PresentationElementInstance presentationElementInstance : presentationElementInstances) {
        if (presentationElementInstance.getInstance() == null) {
          continue;
        }
        String id=Converters.getElementToIdConverter().apply(presentationElementInstance.getInstance());
        if (id == null) {
          continue;
        }
        mmsElementsToDelete.add(id);
      }
    }
    if (elementsToCommit.size() > 0) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + mmsElementsToDelete.size() + ""String_Node_Str""+ (mmsElementsToDelete.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,mmsElementsToDelete,MMSUtils.JsonBlobType.ELEMENT_ID);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,true,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    if (!changed) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(6);
    Set<Element> elementsToDelete=new HashSet<>();
    for (    Pair<ObjectNode,Slot> pair : slotMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Pair<ObjectNode,InstanceSpecification> pair : instanceSpecificationMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Element element : views) {
      Constraint constraint=Utils.getViewConstraint(element);
      if (constraint == null) {
        continue;
      }
      elementsToDelete.add(constraint);
      ValueSpecification valueSpecification=constraint.getSpecification();
      if (valueSpecification == null) {
        continue;
      }
      elementsToDelete.add(valueSpecification);
      List<ValueSpecification> operands;
      if (!(valueSpecification instanceof Expression) || (operands=((Expression)valueSpecification).getOperand()) == null) {
        continue;
      }
      for (      ValueSpecification operand : operands) {
        elementsToDelete.add(operand);
        InstanceSpecification instanceSpecification;
        if (!(operand instanceof InstanceValue) || (instanceSpecification=((InstanceValue)operand).getInstance()) == null) {
          continue;
        }
        elementsToDelete.add(instanceSpecification);
        for (        Slot slot : instanceSpecification.getSlot()) {
          elementsToDelete.add(slot);
          elementsToDelete.addAll(slot.getValue());
        }
      }
    }
    for (    Element element : elementsToDelete) {
      try {
        ModelElementsManager.getInstance().removeElement(element);
      }
 catch (      ReadOnlyElementException ignored) {
        System.out.println(""String_Node_Str"" + element.getLocalID());
      }
    }
    processedElements.addAll(views);
  }
 catch (  Exception e) {
    failure=true;
    Utils.printException(e);
  }
 finally {
    if (manageSesssions) {
      if (SessionManager.getInstance().isSessionCreated(project)) {
        SessionManager.getInstance().cancelSession(project);
      }
    }
    if (localSyncTransactionCommitListener != null) {
      localSyncTransactionCommitListener.setDisabled(false);
    }
  }
  ImageValidator iv=new ImageValidator(dbAlfrescoVisitor.getImages(),images);
  iv.validate(project);
  for (  ValidationRule validationRule : iv.getSuite().getValidationRules()) {
    for (    ValidationRuleViolation validationRuleViolation : validationRule.getViolations()) {
      if (!validationRuleViolation.getActions().isEmpty()) {
        validationRuleViolation.getActions().get(0).actionPerformed(null);
      }
    }
  }
  if (showValidation) {
    if (suite.hasErrors()) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
  }
}",0.9929342970843824
88534,"protected static EStructuralFeatureOverride getOwnerEStructuralFeatureOverride(BiFunction<String,Project,Element> idToElementConverter){
  return new EStructuralFeatureOverride((objectNode,eStructuralFeature,project,strict,element) -> UMLPackage.Literals.ELEMENT__OWNER == eStructuralFeature,(objectNode,eStructuralFeature,project,strict,element) -> {
    if (element instanceof Model || element instanceof ValueSpecification) {
      return element;
    }
    JsonNode jsonNode=objectNode.get(MDKConstants.OWNER_ID_KEY);
    if (jsonNode == null || !jsonNode.isTextual()) {
      if (strict) {
        throw new ImportException(element,objectNode,""String_Node_Str"");
      }
      return null;
    }
    if (element instanceof Package && (jsonNode=objectNode.get(MDKConstants.ID_KEY)) != null && jsonNode.isTextual() && jsonNode.asText().startsWith(""String_Node_Str"") && (jsonNode=objectNode.get(MDKConstants.OWNER_ID_KEY)) != null && jsonNode.isTextual() && jsonNode.asText().equals(Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()))) {
      ((Package)element).setOwningPackage(project.getPrimaryModel());
      return element;
    }
    Element owningElement=idToElementConverter.apply(jsonNode.asText(),project);
    if (owningElement == null) {
      if (strict) {
        JsonNode sysmlIdNode=objectNode.get(MDKConstants.ID_KEY);
        throw new ImportException(element,objectNode,""String_Node_Str"" + (sysmlIdNode != null && sysmlIdNode.isTextual() ? sysmlIdNode.asText(""String_Node_Str"") : ""String_Node_Str"") + ""String_Node_Str""+ jsonNode+ ""String_Node_Str"");
      }
    }
    try {
      if (element instanceof PackageableElement && owningElement instanceof Package) {
        ((PackageableElement)element).setOwningPackage((Package)owningElement);
      }
 else       if (element instanceof ParameterableElement && owningElement instanceof TemplateParameter) {
        ((ParameterableElement)element).setOwningTemplateParameter((TemplateParameter)owningElement);
      }
 else       if (element instanceof Slot && owningElement instanceof InstanceSpecification) {
        ((Slot)element).setOwningInstance((InstanceSpecification)owningElement);
      }
 else       if (element instanceof InstanceSpecification && ((jsonNode=objectNode.get(KEY_FUNCTION.apply(UMLPackage.Literals.INSTANCE_SPECIFICATION__STEREOTYPED_ELEMENT))) != null && jsonNode.isTextual() || (jsonNode=objectNode.get(MDKConstants.ID_KEY)) != null && jsonNode.isTextual() && jsonNode.asText().endsWith(MDKConstants.APPLIED_STEREOTYPE_INSTANCE_ID_SUFFIX))) {
        ((InstanceSpecification)element).setStereotypedElement(owningElement);
      }
 else {
        element.setOwner(owningElement);
      }
    }
 catch (    IllegalArgumentException e) {
      System.out.println(""String_Node_Str"" + element + (element != null ? ""String_Node_Str"" + Converters.getElementToIdConverter().apply(element) : ""String_Node_Str""));
      System.out.println(""String_Node_Str"" + owningElement + (owningElement != null ? ""String_Node_Str"" + Converters.getElementToIdConverter().apply(owningElement) : ""String_Node_Str""));
      throw new ImportException(element,objectNode,""String_Node_Str"",e);
    }
    return element;
  }
);
}","protected static EStructuralFeatureOverride getOwnerEStructuralFeatureOverride(BiFunction<String,Project,Element> idToElementConverter){
  return new EStructuralFeatureOverride((objectNode,eStructuralFeature,project,strict,element) -> UMLPackage.Literals.ELEMENT__OWNER == eStructuralFeature,(objectNode,eStructuralFeature,project,strict,element) -> {
    if (element instanceof Model || element instanceof ValueSpecification) {
      return element;
    }
    JsonNode jsonNode=objectNode.get(MDKConstants.OWNER_ID_KEY);
    if (jsonNode == null || !jsonNode.isTextual()) {
      if (strict) {
        throw new ImportException(element,objectNode,""String_Node_Str"");
      }
      return null;
    }
    if (element instanceof Package && (jsonNode=objectNode.get(MDKConstants.ID_KEY)) != null && jsonNode.isTextual() && jsonNode.asText().startsWith(MDKConstants.HOLDING_BIN_ID_PREFIX) && (jsonNode=objectNode.get(MDKConstants.OWNER_ID_KEY)) != null && jsonNode.isTextual() && jsonNode.asText().equals(Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()))) {
      ((Package)element).setOwningPackage(project.getPrimaryModel());
      return element;
    }
    Element owningElement=idToElementConverter.apply(jsonNode.asText(),project);
    if (owningElement == null) {
      if (strict) {
        JsonNode sysmlIdNode=objectNode.get(MDKConstants.ID_KEY);
        throw new ImportException(element,objectNode,""String_Node_Str"" + (sysmlIdNode != null && sysmlIdNode.isTextual() ? sysmlIdNode.asText(""String_Node_Str"") : ""String_Node_Str"") + ""String_Node_Str""+ jsonNode+ ""String_Node_Str"");
      }
    }
    try {
      if (element instanceof PackageableElement && owningElement instanceof Package) {
        ((PackageableElement)element).setOwningPackage((Package)owningElement);
      }
 else       if (element instanceof ParameterableElement && owningElement instanceof TemplateParameter) {
        ((ParameterableElement)element).setOwningTemplateParameter((TemplateParameter)owningElement);
      }
 else       if (element instanceof Slot && owningElement instanceof InstanceSpecification) {
        ((Slot)element).setOwningInstance((InstanceSpecification)owningElement);
      }
 else       if (element instanceof InstanceSpecification && ((jsonNode=objectNode.get(KEY_FUNCTION.apply(UMLPackage.Literals.INSTANCE_SPECIFICATION__STEREOTYPED_ELEMENT))) != null && jsonNode.isTextual() || (jsonNode=objectNode.get(MDKConstants.ID_KEY)) != null && jsonNode.isTextual() && jsonNode.asText().endsWith(MDKConstants.APPLIED_STEREOTYPE_INSTANCE_ID_SUFFIX))) {
        ((InstanceSpecification)element).setStereotypedElement(owningElement);
      }
 else {
        element.setOwner(owningElement);
      }
    }
 catch (    IllegalArgumentException e) {
      System.out.println(""String_Node_Str"" + element + (element != null ? ""String_Node_Str"" + Converters.getElementToIdConverter().apply(element) : ""String_Node_Str""));
      System.out.println(""String_Node_Str"" + owningElement + (owningElement != null ? ""String_Node_Str"" + Converters.getElementToIdConverter().apply(owningElement) : ""String_Node_Str""));
      throw new ImportException(element,objectNode,""String_Node_Str"",e);
    }
    return element;
  }
);
}",0.8581175376027291
88535,"private static void request(List<ObjectNode> elementsToUpdate,List<String> elementsToDelete,Project project) throws JsonProcessingException {
  if (elementsToUpdate != null && !elementsToUpdate.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + elementsToUpdate.size() + ""String_Node_Str""+ (elementsToUpdate.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    try {
      File file=MMSUtils.createEntityFile(CommitClientElementAction.class,ContentType.APPLICATION_JSON,elementsToUpdate,MMSUtils.JsonBlobType.ELEMENT_JSON);
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      OutputQueue.getInstance().offer((new Request(project,MMSUtils.HttpRequestType.POST,requestUri,file,ContentType.APPLICATION_JSON,true,elementsToUpdate.size(),""String_Node_Str"")));
    }
 catch (    IOException|URISyntaxException e) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
      e.printStackTrace();
      return;
    }
  }
  if (elementsToDelete != null && !elementsToDelete.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + elementsToDelete.size() + ""String_Node_Str""+ (elementsToDelete.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    try {
      File file=MMSUtils.createEntityFile(CommitClientElementAction.class,ContentType.APPLICATION_JSON,elementsToUpdate,MMSUtils.JsonBlobType.ELEMENT_JSON);
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      OutputQueue.getInstance().offer((new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,file,ContentType.APPLICATION_JSON,true,elementsToDelete.size(),""String_Node_Str"")));
    }
 catch (    IOException|URISyntaxException e) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
      e.printStackTrace();
      return;
    }
  }
}","private static void request(List<ObjectNode> elementsToUpdate,List<String> elementsToDelete,Project project) throws JsonProcessingException {
  if (elementsToUpdate != null && !elementsToUpdate.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + elementsToUpdate.size() + ""String_Node_Str""+ (elementsToUpdate.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    int requestCapacity=elementsToUpdate.size() > COMMIT_ELEMENT_COUNT_THRESHOLD ? (elementsToUpdate.size() / COMMIT_ELEMENT_COUNT_THRESHOLD + (elementsToUpdate.size() % COMMIT_ELEMENT_COUNT_THRESHOLD != 0 ? 1 : 0)) * 2 : 1;
    List<Request> requests=new ArrayList<>(requestCapacity);
    List<ObjectNode> elementsToPost=new ArrayList<>(Math.min(elementsToUpdate.size(),COMMIT_ELEMENT_COUNT_THRESHOLD));
    for (int i=0; i < elementsToUpdate.size(); i++) {
      elementsToPost.add(elementsToUpdate.get(i));
      if (elementsToPost.size() == COMMIT_ELEMENT_COUNT_THRESHOLD || i + 1 == elementsToUpdate.size()) {
        try {
          File file=MMSUtils.createEntityFile(CommitClientElementAction.class,ContentType.APPLICATION_JSON,elementsToPost,MMSUtils.JsonBlobType.ELEMENT_JSON);
          if (elementsToUpdate.size() > COMMIT_ELEMENT_COUNT_THRESHOLD) {
            int requestIndex=(i + 1) / COMMIT_ELEMENT_COUNT_THRESHOLD + ((i + 1) % COMMIT_ELEMENT_COUNT_THRESHOLD != 0 ? 1 : 0) - 1;
            URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
            if (requestUri == null) {
              throw new IOException();
            }
            requestUri.addParameter(""String_Node_Str"",Boolean.toString(true));
            requests.add(requestIndex,new Request(project,MMSUtils.HttpRequestType.POST,requestUri,file,ContentType.APPLICATION_JSON,true,elementsToPost.size(),""String_Node_Str"" + NumberFormat.getInstance().format(requestIndex + 1) + ""String_Node_Str""+ (requestCapacity / 2)));
            requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
            if (requestUri == null) {
              throw new IOException();
            }
            requestUri.addParameter(""String_Node_Str"",Boolean.toString(true));
            requests.add(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,file,ContentType.APPLICATION_JSON,true,elementsToPost.size(),""String_Node_Str"" + NumberFormat.getInstance().format(requestIndex + 1) + ""String_Node_Str""+ (requestCapacity / 2)));
          }
 else {
            URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
            requests.add(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,file,ContentType.APPLICATION_JSON,true,elementsToPost.size(),""String_Node_Str""));
          }
        }
 catch (        IOException|URISyntaxException e) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
          e.printStackTrace();
          return;
        }
        if (i + 1 != elementsToUpdate.size()) {
          elementsToPost=new ArrayList<>(Math.min(elementsToUpdate.size() - (i + 1),COMMIT_ELEMENT_COUNT_THRESHOLD));
        }
      }
    }
    requests.forEach(request -> OutputQueue.getInstance().offer(request));
  }
  if (elementsToDelete != null && !elementsToDelete.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + elementsToDelete.size() + ""String_Node_Str""+ (elementsToDelete.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    try {
      File file=MMSUtils.createEntityFile(CommitClientElementAction.class,ContentType.APPLICATION_JSON,elementsToDelete,MMSUtils.JsonBlobType.ELEMENT_ID);
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      OutputQueue.getInstance().offer((new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,file,ContentType.APPLICATION_JSON,true,elementsToDelete.size(),""String_Node_Str"")));
    }
 catch (    IOException|URISyntaxException e) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
      e.printStackTrace();
      return;
    }
  }
}",0.3873426110006627
88536,"@Override public void execute(Collection<Annotation> annotations){
  List<ObjectNode> elementsToUpdate=new LinkedList<>();
  List<String> elementsToDelete=new LinkedList<>();
  for (  Annotation annotation : annotations) {
    for (    NMAction action : annotation.getActions()) {
      if (action instanceof CommitClientElementAction) {
        ObjectNode elementObjectNode=((CommitClientElementAction)action).getElementObjectNode();
        if (elementObjectNode != null) {
          elementsToUpdate.add(elementObjectNode);
        }
 else {
          elementsToDelete.add(((CommitClientElementAction)action).getElementID());
        }
        break;
      }
    }
  }
  try {
    CommitClientElementAction.request(elementsToUpdate,elementsToDelete,project);
  }
 catch (  JsonProcessingException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    e.printStackTrace();
  }
}","@Override public void execute(Collection<Annotation> annotations){
  List<ObjectNode> elementsToUpdate=new LinkedList<>();
  List<String> elementsToDelete=new LinkedList<>();
  for (  Annotation annotation : annotations) {
    for (    NMAction action : annotation.getActions()) {
      if (action instanceof CommitClientElementAction) {
        ObjectNode elementObjectNode=((CommitClientElementAction)action).getElementObjectNode();
        if (elementObjectNode != null) {
          elementsToUpdate.add(elementObjectNode);
        }
 else         if (elementID.startsWith(MDKConstants.HOLDING_BIN_ID_PREFIX)) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
        }
 else {
          elementsToDelete.add(((CommitClientElementAction)action).getElementID());
        }
        break;
      }
    }
  }
  try {
    CommitClientElementAction.request(elementsToUpdate,elementsToDelete,project);
  }
 catch (  JsonProcessingException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    e.printStackTrace();
  }
}",0.6666666666666666
88537,"public String commitAction(){
  String org=null;
  URIBuilder requestUri=MMSUtils.getServiceOrgsUri(project);
  if (requestUri == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  try {
    org=MMSUtils.getMmsOrg(project);
  }
 catch (  IOException|URISyntaxException|ServerException e1) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
    e1.printStackTrace();
    return null;
  }
  ObjectNode response;
  if (org == null || org.isEmpty()) {
    try {
      response=JacksonUtils.parseJsonObject(MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri)));
    }
 catch (    IOException|URISyntaxException|ServerException e1) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
      e1.printStackTrace();
      return null;
    }
    ArrayList<String> mmsOrgsList=new ArrayList<>();
    if (response != null) {
      JsonNode arrayNode;
      if ((arrayNode=response.get(""String_Node_Str"")) != null && arrayNode.isArray()) {
        for (        JsonNode orgNode : arrayNode) {
          JsonNode value;
          if ((value=orgNode.get(MDKConstants.NAME_KEY)) != null && value.isTextual()) {
            mmsOrgsList.add(value.asText());
          }
        }
      }
    }
    String[] mmsOrgs=mmsOrgsList.toArray(new String[mmsOrgsList.size()]);
    if (mmsOrgs.length > 0) {
      JFrame selectionDialog=new JFrame();
      org=(String)JOptionPane.showInputDialog(selectionDialog,""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE,null,mmsOrgs,mmsOrgs[0]);
    }
 else {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    if ((org == null || org.isEmpty()) && MDUtils.isDeveloperMode()) {
      org=new CommitOrgAction(project).commitAction();
    }
  }
  if (org == null || org.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + org+ ""String_Node_Str"");
  Collection<ObjectNode> projects=new LinkedList<>();
  projects.add(MMSUtils.getProjectObjectNode(project));
  try {
    File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,projects,MMSUtils.JsonBlobType.PROJECT);
    response=JacksonUtils.parseJsonObject(MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON)));
  }
 catch (  IOException|URISyntaxException|ServerException e1) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
    e1.printStackTrace();
    return null;
  }
  if (shouldCommitModel) {
    RunnableWithProgress temp=new ManualSyncActionRunner<>(CommitClientElementAction.class,Collections.singletonList(project.getPrimaryModel()),project,-1);
    ProgressStatusRunner.runWithProgressStatus(temp,""String_Node_Str"",true,0);
  }
  return Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
}","public String commitAction(){
  String org=null;
  URIBuilder requestUri=MMSUtils.getServiceOrgsUri(project);
  if (requestUri == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  try {
    org=MMSUtils.getMmsOrg(project);
  }
 catch (  IOException|URISyntaxException|ServerException e1) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
    e1.printStackTrace();
    return null;
  }
  ObjectNode response;
  if (org == null || org.isEmpty()) {
    try {
      response=JacksonUtils.parseJsonObject(MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri)));
    }
 catch (    IOException|URISyntaxException|ServerException e1) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
      e1.printStackTrace();
      return null;
    }
    ArrayList<String> mmsOrgsList=new ArrayList<>();
    if (response != null) {
      JsonNode arrayNode;
      if ((arrayNode=response.get(""String_Node_Str"")) != null && arrayNode.isArray()) {
        for (        JsonNode orgNode : arrayNode) {
          JsonNode value;
          if ((value=orgNode.get(MDKConstants.NAME_KEY)) != null && value.isTextual()) {
            mmsOrgsList.add(value.asText());
          }
        }
      }
    }
    String[] mmsOrgs=mmsOrgsList.toArray(new String[mmsOrgsList.size()]);
    if (mmsOrgs.length > 0) {
      JFrame selectionDialog=new JFrame();
      org=(String)JOptionPane.showInputDialog(selectionDialog,""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE,null,mmsOrgs,mmsOrgs[0]);
    }
 else {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    if ((org == null || org.isEmpty()) && MDUtils.isDeveloperMode()) {
      org=new CommitOrgAction(project).commitAction();
    }
  }
  if (org == null || org.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + org+ ""String_Node_Str"");
  Collection<ObjectNode> projects=new LinkedList<>();
  projects.add(MMSUtils.getProjectObjectNode(project));
  try {
    File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,projects,MMSUtils.JsonBlobType.PROJECT);
    response=JacksonUtils.parseJsonObject(MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON)));
    if (response != null) {
      Thread.sleep(5000);
    }
  }
 catch (  IOException|URISyntaxException|ServerException|InterruptedException e1) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
    e1.printStackTrace();
    return null;
  }
  if (shouldCommitModel) {
    RunnableWithProgress temp=new ManualSyncActionRunner<>(CommitClientElementAction.class,Collections.singletonList(project.getPrimaryModel()),project,-1);
    ProgressStatusRunner.runWithProgressStatus(temp,""String_Node_Str"",true,0);
  }
  return Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
}",0.986891082699466
88538,"private static JsonParser collectServerHoldingBinElementsRecursively(Project project,int depth,ProgressStatus progressStatus) throws ServerException, IOException, URISyntaxException {
  String holdingBinId=""String_Node_Str"" + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
  return MMSUtils.getElementRecursively(project,holdingBinId,depth,progressStatus);
}","private static JsonParser collectServerHoldingBinElementsRecursively(Project project,int depth,ProgressStatus progressStatus) throws ServerException, IOException, URISyntaxException {
  String holdingBinId=MDKConstants.HOLDING_BIN_ID_PREFIX + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
  return MMSUtils.getElementRecursively(project,holdingBinId,depth,progressStatus);
}",0.9428208386277002
88539,"@Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setIndeterminate(true);
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (pv.getValidationSuite().hasErrors()) {
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  if (project.isRemote()) {
    BranchValidator bv=new BranchValidator(project);
    bv.validate(null,false);
    if (bv.hasErrors()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    if (bv.getValidationSuite().hasErrors()) {
      Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
      return;
    }
  }
  progressStatus.setDescription(""String_Node_Str"" + rootElements.size() + ""String_Node_Str""+ ((depth != 0) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (rootElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  progressStatus.setIndeterminate(false);
  progressStatus.setMax(rootElements.size());
  progressStatus.setCurrent(0);
  List<Pair<Element,ObjectNode>> clientElements=new ArrayList<>(rootElements.size());
  Collection<JsonParser> jsonParsers=new ArrayList<>(3);
  for (  Element element : rootElements) {
    collectClientElementsRecursively(project,element,depth,clientElements);
    try {
      jsonParsers.add(collectServerElementsRecursively(project,element,depth,progressStatus));
      if (element == project.getPrimaryModel() && depth != 0) {
        if (progressStatus.isCancel()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          return;
        }
        jsonParsers.add(collectServerHoldingBinElementsRecursively(project,depth - 1,progressStatus));
        if (progressStatus.isCancel()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          return;
        }
        jsonParsers.add(collectServerModuleElementsRecursively(project,0,progressStatus));
      }
    }
 catch (    ServerException|URISyntaxException|IOException e) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      validationSuite=null;
      return;
    }
    if (jsonParsers.isEmpty()) {
      if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
      }
      validationSuite=null;
      return;
    }
    progressStatus.increase();
  }
  if (progressStatus.isCancel()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  elementValidator=new ElementValidator(clientElements,null,jsonParsers,project);
  elementValidator.run(progressStatus);
}","@Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setIndeterminate(true);
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (pv.getValidationSuite().hasErrors()) {
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  if (project.isRemote()) {
    BranchValidator bv=new BranchValidator(project);
    bv.validate(null,false);
    if (bv.hasErrors()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    if (bv.getValidationSuite().hasErrors()) {
      Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
      return;
    }
  }
  progressStatus.setDescription(""String_Node_Str"" + rootElements.size() + ""String_Node_Str""+ ((depth != 0) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (rootElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  progressStatus.setIndeterminate(false);
  progressStatus.setMax(rootElements.size());
  progressStatus.setCurrent(0);
  List<Pair<Element,ObjectNode>> clientElements=new ArrayList<>(rootElements.size());
  Collection<JsonParser> jsonParsers=new ArrayList<>(3);
  for (  Element element : rootElements) {
    collectClientElementsRecursively(project,element,depth,clientElements);
    try {
      JsonParser jsonParser=collectServerElementsRecursively(project,element,depth,progressStatus);
      if (jsonParser != null) {
        jsonParsers.add(jsonParser);
      }
      if (element == project.getPrimaryModel() && depth != 0) {
        if (progressStatus.isCancel()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          return;
        }
        jsonParser=collectServerHoldingBinElementsRecursively(project,depth - 1,progressStatus);
        if (jsonParser != null) {
          jsonParsers.add(jsonParser);
        }
        if (progressStatus.isCancel()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          return;
        }
        jsonParser=collectServerModuleElementsRecursively(project,0,progressStatus);
        if (jsonParser != null) {
          jsonParsers.add(jsonParser);
        }
      }
    }
 catch (    ServerException|URISyntaxException|IOException e) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      validationSuite=null;
      return;
    }
    if (jsonParsers.isEmpty()) {
      if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
      }
      validationSuite=null;
      return;
    }
    progressStatus.increase();
  }
  if (progressStatus.isCancel()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  elementValidator=new ElementValidator(clientElements,null,jsonParsers,project);
  elementValidator.run(progressStatus);
}",0.9516019086571234
88540,"public List<Element> getViewProcessOrder(Element start,Map<Element,List<Element>> view2view){
  List<Element> res=new ArrayList<Element>();
  Queue<Element> toProcess=new LinkedList<Element>();
  toProcess.add(start);
  while (!toProcess.isEmpty()) {
    Element next=toProcess.remove();
    res.add(next);
    if (view2view.containsKey(next)) {
      toProcess.addAll(view2view.get(next));
    }
  }
  return res;
}","public List<Element> getViewProcessOrder(Element start,Map<Element,List<Element>> view2view){
  List<Element> res=new ArrayList<>();
  Queue<Element> toProcess=new LinkedList<>();
  HashSet<Element> processed=new HashSet<>();
  toProcess.add(start);
  while (!toProcess.isEmpty()) {
    Element next=toProcess.remove();
    res.add(next);
    processed.add(next);
    if (view2view.containsKey(next)) {
      for (      Element element : view2view.get(next)) {
        if (!processed.contains(element)) {
          toProcess.add(element);
        }
 else {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
        }
      }
    }
  }
  return res;
}",0.676081200353045
88541,"public String commitAction(){
  URIBuilder requestUri=MMSUtils.getServiceOrgsUri(project);
  if (requestUri == null) {
    return null;
  }
  JFrame selectionDialog=new JFrame();
  String org=JOptionPane.showInputDialog(selectionDialog,""String_Node_Str"");
  if (org == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  if (org.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  JsonParser responseParser;
  try {
    responseParser=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri));
    ObjectNode response=JacksonUtils.parseJsonObject(responseParser);
    JsonNode arrayNode;
    if (response != null && (arrayNode=response.get(""String_Node_Str"")) != null && arrayNode.isArray()) {
      for (      JsonNode orgNode : arrayNode) {
        JsonNode value;
        if ((value=orgNode.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
          if (value.asText().equals(org)) {
            Application.getInstance().getGUILog().log(""String_Node_Str"");
            return org;
          }
        }
      }
    }
  }
 catch (  IOException|URISyntaxException|ServerException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return null;
  }
  LinkedList<ObjectNode> orgs=new LinkedList<>();
  orgs.add(JacksonUtils.getObjectMapper().createObjectNode());
  try {
    File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,orgs,MMSUtils.JsonBlobType.ORG);
    responseParser=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON));
  }
 catch (  IOException|ServerException|URISyntaxException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return null;
  }
  return org;
}","public String commitAction(){
  URIBuilder requestUri=MMSUtils.getServiceOrgsUri(project);
  if (requestUri == null) {
    return null;
  }
  JFrame selectionDialog=new JFrame();
  String org=JOptionPane.showInputDialog(selectionDialog,""String_Node_Str"");
  if (org == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  if (org.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  JsonParser responseParser;
  try {
    responseParser=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri));
    ObjectNode response=JacksonUtils.parseJsonObject(responseParser);
    JsonNode arrayNode;
    if (response != null && (arrayNode=response.get(""String_Node_Str"")) != null && arrayNode.isArray()) {
      for (      JsonNode orgNode : arrayNode) {
        JsonNode value;
        if ((value=orgNode.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
          if (value.asText().equals(org)) {
            Application.getInstance().getGUILog().log(""String_Node_Str"");
            return org;
          }
        }
      }
    }
  }
 catch (  IOException|URISyntaxException|ServerException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return null;
  }
  LinkedList<ObjectNode> orgs=new LinkedList<>();
  ObjectNode orgNode=JacksonUtils.getObjectMapper().createObjectNode();
  orgNode.put(MDKConstants.ID_KEY,org);
  orgNode.put(MDKConstants.NAME_KEY,org);
  orgs.add(orgNode);
  try {
    File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,orgs,MMSUtils.JsonBlobType.ORG);
    responseParser=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON));
  }
 catch (  IOException|ServerException|URISyntaxException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return null;
  }
  return org;
}",0.9495548961424332
88542,"public static boolean validateCredentials(Project project,String ticket) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return false;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + ticket);
  requestUri.clearParameters();
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpGet(requestDest);
  System.out.println(""String_Node_Str"" + requestUri.toString());
  String message=""String_Node_Str"";
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent()){
    int responseCode=response.getStatusLine().getStatusCode();
    String responseBody=((inputStream != null) ? IOUtils.toString(inputStream) : ""String_Node_Str"");
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + requestUri.toString() + ""String_Node_Str""+ responseCode);
    boolean throwServerException=false;
    if (responseCode != 200) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + responseCode);
      throwServerException=true;
    }
    if (!responseBody.isEmpty() && responseType.equals(""String_Node_Str"")) {
      ObjectNode responseJson=JacksonUtils.getObjectMapper().readValue(responseBody,ObjectNode.class);
      JsonNode value;
      if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
        message=value.asText();
        Application.getInstance().getGUILog().log(""String_Node_Str"" + value.asText());
      }
    }
    if (throwServerException) {
      Utils.showPopupMessage(""String_Node_Str"");
      throw new ServerException(responseBody,responseCode);
    }
  }
   return message.equals(""String_Node_Str"");
}","public static String validateCredentials(Project project,String ticket) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return ""String_Node_Str"";
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + ticket);
  requestUri.clearParameters();
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpGet(requestDest);
  System.out.println(""String_Node_Str"" + requestUri.toString());
  ObjectNode responseJson;
  JsonNode value;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent()){
    int responseCode=response.getStatusLine().getStatusCode();
    String responseBody=((inputStream != null) ? IOUtils.toString(inputStream) : ""String_Node_Str"");
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + requestUri.toString() + ""String_Node_Str""+ responseCode);
    if (responseCode == 200) {
      if (!responseBody.isEmpty() && responseType.equals(""String_Node_Str"")) {
        responseJson=JacksonUtils.getObjectMapper().readValue(responseBody,ObjectNode.class);
        if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + value.asText());
        }
        if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
          return value.asText();
        }
      }
      return ""String_Node_Str"";
    }
 else {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + responseCode);
      Utils.showPopupMessage(""String_Node_Str"");
      throw new ServerException(responseBody,responseCode);
    }
  }
 }",0.7930521091811414
88543,"@Override public void projectPreSaved(Project project,boolean savedInServer){
  deltaSyncRunner=null;
  if ((project.isRemote() && !savedInServer) || !StereotypesHelper.hasStereotype(project.getModel(),""String_Node_Str"") || CoordinatedSyncProjectEventListenerAdapter.getProjectMapping(project).isDisabled()|| JMSSyncProjectEventListenerAdapter.getProjectMapping(project).getJmsMessageListener().isDisabled()) {
    return;
  }
  if (!TicketUtils.isTicketValid(project)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    new Thread(){
      public void run(){
        MMSLoginAction.loginAction(project);
      }
    }
.start();
    return;
  }
  deltaSyncRunner=new DeltaSyncRunner(true,true,true);
  ProgressStatusRunner.runWithProgressStatus(deltaSyncRunner,""String_Node_Str"",true,0);
}","@Override public void projectPreSaved(Project project,boolean savedInServer){
  deltaSyncRunner=null;
  if ((project.isRemote() && !savedInServer) || !StereotypesHelper.hasStereotype(project.getModel(),""String_Node_Str"") || CoordinatedSyncProjectEventListenerAdapter.getProjectMapping(project).isDisabled()|| JMSSyncProjectEventListenerAdapter.getProjectMapping(project).getJmsMessageListener().isDisabled()) {
    return;
  }
  deltaSyncRunner=new DeltaSyncRunner(true,true,true);
  ProgressStatusRunner.runWithProgressStatus(deltaSyncRunner,""String_Node_Str"",true,0);
}",0.6517016654598118
88544,"@SuppressWarnings(""String_Node_Str"") @Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject()) && EsiUtils.getLoggedUserName() == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  if (!TicketUtils.isTicketValid(project)) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  BranchValidator bv=new BranchValidator(project);
  bv.validate(null,false);
  if (bv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
  }
  LocalSyncTransactionCommitListener listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  listener.setDisabled(true);
  SyncElements.lockSyncFolder(project);
  listener.setDisabled(false);
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(Application.getInstance().getProject());
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  if (jmsMessageListener == null) {
    if (MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    return;
  }
  Changelog<String,Element> persistedLocalChangelog=new Changelog<>();
  Collection<SyncElement> persistedLocalSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.LOCAL);
  for (  SyncElement syncElement : persistedLocalSyncElements) {
    persistedLocalChangelog=persistedLocalChangelog.and(SyncElements.buildChangelog(syncElement),(key,value) -> Converters.getIdToElementConverter().apply(key,project));
  }
  Changelog<String,Element> localChangelog=persistedLocalChangelog.and(listener.getInMemoryLocalChangelog());
  Map<String,Element> localCreated=localChangelog.get(Changelog.ChangeType.CREATED), localUpdated=localChangelog.get(Changelog.ChangeType.UPDATED), localDeleted=localChangelog.get(Changelog.ChangeType.DELETED);
  Changelog<String,Void> persistedJmsChangelog=new Changelog<>();
  Collection<SyncElement> persistedJmsSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.MMS);
  for (  SyncElement syncElement : persistedJmsSyncElements) {
    persistedJmsChangelog=persistedJmsChangelog.and(SyncElements.buildChangelog(syncElement));
  }
  Changelog<String,Void> jmsChangelog=persistedJmsChangelog.and(jmsMessageListener.getInMemoryJMSChangelog(),(key,objectNode) -> null);
  Map<String,Void> jmsCreated=jmsChangelog.get(Changelog.ChangeType.CREATED), jmsUpdated=jmsChangelog.get(Changelog.ChangeType.UPDATED), jmsDeleted=jmsChangelog.get(Changelog.ChangeType.DELETED);
  Set<String> elementIdsToGet=new HashSet<>(jmsUpdated.keySet());
  elementIdsToGet.addAll(jmsCreated.keySet());
  if (shouldUpdate && !jmsChangelog.isEmpty()) {
    int size=jmsChangelog.flattenedSize();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + size + ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  Map<String,ObjectNode> jmsJsons=new HashMap<>(elementIdsToGet.size());
  if (!elementIdsToGet.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"" + elementIdsToGet.size() + ""String_Node_Str""+ (elementIdsToGet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    ObjectNode response=null;
    try {
      response=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,elementIdsToGet,progressStatus));
    }
 catch (    ServerException|IOException|URISyntaxException e) {
      if (e instanceof ServerException && ((ServerException)e).getCode() == 404) {
        (response=JacksonUtils.getObjectMapper().createObjectNode()).putArray(""String_Node_Str"");
      }
 else       if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        e.printStackTrace();
        return;
      }
    }
    if (progressStatus.isCancel()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    JsonNode elementsArrayNode;
    if (response == null || (elementsArrayNode=response.get(""String_Node_Str"")) == null || !elementsArrayNode.isArray()) {
      Utils.guilog(""String_Node_Str"");
      return;
    }
    for (    JsonNode jsonNode : elementsArrayNode) {
      if (!jsonNode.isObject()) {
        continue;
      }
      String webId=jsonNode.get(MDKConstants.ID_KEY).asText();
      jmsJsons.put(webId,(ObjectNode)jsonNode);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  Map<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedChanges=new LinkedHashMap<>(), unconflictedChanges=new LinkedHashMap<>();
  localChangelog.findConflicts(jmsChangelog,(change,change2) -> change != null && change2 != null,conflictedChanges,unconflictedChanges);
  Map<String,Element> localElementsToPost=new LinkedHashMap<>(localCreated.size() + localUpdated.size());
  Set<String> deleteElements=new HashSet<>(localDeleted.size());
  Map<String,ObjectNode> jmsElementsToCreateLocally=new LinkedHashMap<>(jmsCreated.size());
  Map<String,Pair<ObjectNode,Element>> jmsElementsToUpdateLocally=new LinkedHashMap<>(jmsUpdated.size());
  Map<String,Element> jmsElementsToDeleteLocally=new LinkedHashMap<>(jmsDeleted.size());
  for (  Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> unconflictedEntry : unconflictedChanges.entrySet()) {
    String id=unconflictedEntry.getKey();
    Changelog.Change<Element> localChange=unconflictedEntry.getValue().getKey();
    Changelog.Change<ObjectNode> jmsChange=unconflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),unconflictedEntry.getValue().getValue().getType()) : null;
    if (shouldCommit && localChange != null) {
      Element element=localChange.getChanged();
switch (localChange.getType()) {
case CREATED:
case UPDATED:
        if (element == null) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
          continue;
        }
      localElementsToPost.put(id,element);
    break;
case DELETED:
  if (element != null && !project.isDisposed(element)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
    continue;
  }
deleteElements.add(id);
break;
}
}
 else if (shouldUpdate && jmsChange != null) {
ObjectNode objectNode=jmsChange.getChanged();
Element element=Converters.getIdToElementConverter().apply(id,project);
switch (jmsChange.getType()) {
case CREATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element != null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
jmsElementsToCreateLocally.put(id,objectNode);
break;
case UPDATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.UPDATED);
continue;
}
jmsElementsToUpdateLocally.put(id,new Pair<>(objectNode,element));
break;
case DELETED:
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
continue;
}
jmsElementsToDeleteLocally.put(id,element);
break;
}
}
}
if (progressStatus.isCancel()) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
return;
}
boolean shouldLogNoLocalChanges=shouldCommit;
if (shouldCommit && !localElementsToPost.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
LinkedList<ObjectNode> postElements=new LinkedList<>();
for (Element element : localElementsToPost.values()) {
ObjectNode elementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
if (elementObjectNode != null) {
postElements.add(elementObjectNode);
}
}
if (postElements.size() > 0) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(postElements.size()) + ""String_Node_Str""+ (postElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,postElements,MMSUtils.JsonBlobType.ELEMENT_JSON);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,true,postElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
}
if (shouldCommit && shouldCommitDeletes && !deleteElements.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(deleteElements.size()) + ""String_Node_Str""+ (deleteElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,deleteElements,MMSUtils.JsonBlobType.ELEMENT_ID);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,true,deleteElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
if (shouldLogNoLocalChanges) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
}
if (shouldUpdate) {
listener.setDisabled(true);
List<ObjectNode> jmsElementsToCreateOrUpdateLocally=new ArrayList<>(jmsElementsToCreateLocally.size() + jmsElementsToUpdateLocally.size());
jmsElementsToCreateOrUpdateLocally.addAll(jmsElementsToCreateLocally.values());
jmsElementsToUpdateLocally.values().forEach(pair -> jmsElementsToCreateOrUpdateLocally.add(pair.getKey()));
UpdateClientElementAction updateClientElementAction=new UpdateClientElementAction(project);
updateClientElementAction.setElementsToUpdate(jmsElementsToCreateOrUpdateLocally);
updateClientElementAction.setElementsToDelete(jmsElementsToDeleteLocally.values().stream().map(Converters.getElementToIdConverter()).filter(id -> id != null).filter(id -> !id.isEmpty()).collect(Collectors.toList()));
updateClientElementAction.run(progressStatus);
failedJmsChangelog=failedJmsChangelog.and(updateClientElementAction.getFailedChangelog(),(id,objectNode) -> null);
listener.setDisabled(false);
}
progressStatus.setDescription(""String_Node_Str"");
Set<Element> localConflictedElements=new HashSet<>();
Set<ObjectNode> jmsConflictedElements=new HashSet<>();
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null && !project.isDisposed(localChange.getChanged())) {
localConflictedElements.add(localChange.getChanged());
}
if (jmsChange != null && jmsChange.getChanged() != null) {
jmsConflictedElements.add(jmsChange.getChanged());
}
}
ElementValidator elementValidator=new ElementValidator(ElementValidator.buildElementPairs(localConflictedElements,project),jmsConflictedElements,project);
elementValidator.run(progressStatus);
if (!elementValidator.getInvalidElements().isEmpty()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + elementValidator.getInvalidElements().size() + ""String_Node_Str""+ (elementValidator.getInvalidElements().size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
vss.add(elementValidator.getValidationSuite());
Utils.displayValidationWindow(project,elementValidator.getValidationSuite(),""String_Node_Str"");
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
if (!elementValidator.getInvalidElements().containsKey(id)) {
continue;
}
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(localChange.getType())) {
failedLocalChangelog.addChange(conflictedEntry.getKey(),localChange.getChanged(),localChange.getType());
}
if (jmsChange != null && jmsChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(jmsChange.getType())) {
failedJmsChangelog.addChange(conflictedEntry.getKey(),null,jmsChange.getType());
}
}
}
listener.getInMemoryLocalChangelog().clear();
jmsMessageListener.getInMemoryJMSChangelog().clear();
listener.setDisabled(true);
if (!SessionManager.getInstance().isSessionCreated()) {
SessionManager.getInstance().createSession(""String_Node_Str"");
}
Changelog<String,Void> unprocessedLocalChangelog=new Changelog<>();
if (!shouldCommit) {
unprocessedLocalChangelog=unprocessedLocalChangelog.and(localChangelog,(s,element) -> null);
}
if (shouldCommit && !shouldCommitDeletes) {
Map<String,Void> unprocessedLocalDeletedChanges=unprocessedLocalChangelog.get(Changelog.ChangeType.DELETED);
for (String key : localChangelog.get(Changelog.ChangeType.DELETED).keySet()) {
unprocessedLocalDeletedChanges.put(key,null);
}
}
unprocessedLocalChangelog=unprocessedLocalChangelog.and(failedLocalChangelog,(s,element) -> null);
try {
SyncElements.setByType(project,SyncElement.Type.LOCAL,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedLocalChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
Changelog<String,Void> unprocessedJmsChangelog=new Changelog<>();
if (!shouldUpdate) {
unprocessedJmsChangelog=unprocessedJmsChangelog.and(jmsChangelog);
}
unprocessedJmsChangelog=unprocessedJmsChangelog.and(failedJmsChangelog);
try {
SyncElements.setByType(project,SyncElement.Type.MMS,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedJmsChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
SessionManager.getInstance().closeSession();
listener.setDisabled(false);
failure=false;
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject()) && EsiUtils.getLoggedUserName() == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  if (!TicketUtils.isTicketSet(project)) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  BranchValidator bv=new BranchValidator(project);
  bv.validate(null,false);
  if (bv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
  }
  LocalSyncTransactionCommitListener listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  listener.setDisabled(true);
  SyncElements.lockSyncFolder(project);
  listener.setDisabled(false);
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(Application.getInstance().getProject());
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  if (jmsMessageListener == null) {
    if (MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    return;
  }
  Changelog<String,Element> persistedLocalChangelog=new Changelog<>();
  Collection<SyncElement> persistedLocalSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.LOCAL);
  for (  SyncElement syncElement : persistedLocalSyncElements) {
    persistedLocalChangelog=persistedLocalChangelog.and(SyncElements.buildChangelog(syncElement),(key,value) -> Converters.getIdToElementConverter().apply(key,project));
  }
  Changelog<String,Element> localChangelog=persistedLocalChangelog.and(listener.getInMemoryLocalChangelog());
  Map<String,Element> localCreated=localChangelog.get(Changelog.ChangeType.CREATED), localUpdated=localChangelog.get(Changelog.ChangeType.UPDATED), localDeleted=localChangelog.get(Changelog.ChangeType.DELETED);
  Changelog<String,Void> persistedJmsChangelog=new Changelog<>();
  Collection<SyncElement> persistedJmsSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.MMS);
  for (  SyncElement syncElement : persistedJmsSyncElements) {
    persistedJmsChangelog=persistedJmsChangelog.and(SyncElements.buildChangelog(syncElement));
  }
  Changelog<String,Void> jmsChangelog=persistedJmsChangelog.and(jmsMessageListener.getInMemoryJMSChangelog(),(key,objectNode) -> null);
  Map<String,Void> jmsCreated=jmsChangelog.get(Changelog.ChangeType.CREATED), jmsUpdated=jmsChangelog.get(Changelog.ChangeType.UPDATED), jmsDeleted=jmsChangelog.get(Changelog.ChangeType.DELETED);
  Set<String> elementIdsToGet=new HashSet<>(jmsUpdated.keySet());
  elementIdsToGet.addAll(jmsCreated.keySet());
  if (shouldUpdate && !jmsChangelog.isEmpty()) {
    int size=jmsChangelog.flattenedSize();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + size + ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  Map<String,ObjectNode> jmsJsons=new HashMap<>(elementIdsToGet.size());
  if (!elementIdsToGet.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"" + elementIdsToGet.size() + ""String_Node_Str""+ (elementIdsToGet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    ObjectNode response=null;
    try {
      response=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,elementIdsToGet,progressStatus));
    }
 catch (    ServerException|IOException|URISyntaxException e) {
      if (e instanceof ServerException && ((ServerException)e).getCode() == 404) {
        (response=JacksonUtils.getObjectMapper().createObjectNode()).putArray(""String_Node_Str"");
      }
 else       if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        e.printStackTrace();
        return;
      }
    }
    if (progressStatus.isCancel()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    JsonNode elementsArrayNode;
    if (response == null || (elementsArrayNode=response.get(""String_Node_Str"")) == null || !elementsArrayNode.isArray()) {
      Utils.guilog(""String_Node_Str"");
      return;
    }
    for (    JsonNode jsonNode : elementsArrayNode) {
      if (!jsonNode.isObject()) {
        continue;
      }
      String webId=jsonNode.get(MDKConstants.ID_KEY).asText();
      jmsJsons.put(webId,(ObjectNode)jsonNode);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  Map<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedChanges=new LinkedHashMap<>(), unconflictedChanges=new LinkedHashMap<>();
  localChangelog.findConflicts(jmsChangelog,(change,change2) -> change != null && change2 != null,conflictedChanges,unconflictedChanges);
  Map<String,Element> localElementsToPost=new LinkedHashMap<>(localCreated.size() + localUpdated.size());
  Set<String> deleteElements=new HashSet<>(localDeleted.size());
  Map<String,ObjectNode> jmsElementsToCreateLocally=new LinkedHashMap<>(jmsCreated.size());
  Map<String,Pair<ObjectNode,Element>> jmsElementsToUpdateLocally=new LinkedHashMap<>(jmsUpdated.size());
  Map<String,Element> jmsElementsToDeleteLocally=new LinkedHashMap<>(jmsDeleted.size());
  for (  Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> unconflictedEntry : unconflictedChanges.entrySet()) {
    String id=unconflictedEntry.getKey();
    Changelog.Change<Element> localChange=unconflictedEntry.getValue().getKey();
    Changelog.Change<ObjectNode> jmsChange=unconflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),unconflictedEntry.getValue().getValue().getType()) : null;
    if (shouldCommit && localChange != null) {
      Element element=localChange.getChanged();
switch (localChange.getType()) {
case CREATED:
case UPDATED:
        if (element == null) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
          continue;
        }
      localElementsToPost.put(id,element);
    break;
case DELETED:
  if (element != null && !project.isDisposed(element)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
    continue;
  }
deleteElements.add(id);
break;
}
}
 else if (shouldUpdate && jmsChange != null) {
ObjectNode objectNode=jmsChange.getChanged();
Element element=Converters.getIdToElementConverter().apply(id,project);
switch (jmsChange.getType()) {
case CREATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element != null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
jmsElementsToCreateLocally.put(id,objectNode);
break;
case UPDATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.UPDATED);
continue;
}
jmsElementsToUpdateLocally.put(id,new Pair<>(objectNode,element));
break;
case DELETED:
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
continue;
}
jmsElementsToDeleteLocally.put(id,element);
break;
}
}
}
if (progressStatus.isCancel()) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
return;
}
boolean shouldLogNoLocalChanges=shouldCommit;
if (shouldCommit && !localElementsToPost.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
LinkedList<ObjectNode> postElements=new LinkedList<>();
for (Element element : localElementsToPost.values()) {
ObjectNode elementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
if (elementObjectNode != null) {
postElements.add(elementObjectNode);
}
}
if (postElements.size() > 0) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(postElements.size()) + ""String_Node_Str""+ (postElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,postElements,MMSUtils.JsonBlobType.ELEMENT_JSON);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,true,postElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
}
if (shouldCommit && shouldCommitDeletes && !deleteElements.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(deleteElements.size()) + ""String_Node_Str""+ (deleteElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,deleteElements,MMSUtils.JsonBlobType.ELEMENT_ID);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,true,deleteElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
if (shouldLogNoLocalChanges) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
}
if (shouldUpdate) {
listener.setDisabled(true);
List<ObjectNode> jmsElementsToCreateOrUpdateLocally=new ArrayList<>(jmsElementsToCreateLocally.size() + jmsElementsToUpdateLocally.size());
jmsElementsToCreateOrUpdateLocally.addAll(jmsElementsToCreateLocally.values());
jmsElementsToUpdateLocally.values().forEach(pair -> jmsElementsToCreateOrUpdateLocally.add(pair.getKey()));
UpdateClientElementAction updateClientElementAction=new UpdateClientElementAction(project);
updateClientElementAction.setElementsToUpdate(jmsElementsToCreateOrUpdateLocally);
updateClientElementAction.setElementsToDelete(jmsElementsToDeleteLocally.values().stream().map(Converters.getElementToIdConverter()).filter(id -> id != null).filter(id -> !id.isEmpty()).collect(Collectors.toList()));
updateClientElementAction.run(progressStatus);
failedJmsChangelog=failedJmsChangelog.and(updateClientElementAction.getFailedChangelog(),(id,objectNode) -> null);
listener.setDisabled(false);
}
progressStatus.setDescription(""String_Node_Str"");
Set<Element> localConflictedElements=new HashSet<>();
Set<ObjectNode> jmsConflictedElements=new HashSet<>();
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null && !project.isDisposed(localChange.getChanged())) {
localConflictedElements.add(localChange.getChanged());
}
if (jmsChange != null && jmsChange.getChanged() != null) {
jmsConflictedElements.add(jmsChange.getChanged());
}
}
ElementValidator elementValidator=new ElementValidator(ElementValidator.buildElementPairs(localConflictedElements,project),jmsConflictedElements,project);
elementValidator.run(progressStatus);
if (!elementValidator.getInvalidElements().isEmpty()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + elementValidator.getInvalidElements().size() + ""String_Node_Str""+ (elementValidator.getInvalidElements().size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
vss.add(elementValidator.getValidationSuite());
Utils.displayValidationWindow(project,elementValidator.getValidationSuite(),""String_Node_Str"");
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
if (!elementValidator.getInvalidElements().containsKey(id)) {
continue;
}
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(localChange.getType())) {
failedLocalChangelog.addChange(conflictedEntry.getKey(),localChange.getChanged(),localChange.getType());
}
if (jmsChange != null && jmsChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(jmsChange.getType())) {
failedJmsChangelog.addChange(conflictedEntry.getKey(),null,jmsChange.getType());
}
}
}
listener.getInMemoryLocalChangelog().clear();
jmsMessageListener.getInMemoryJMSChangelog().clear();
listener.setDisabled(true);
if (!SessionManager.getInstance().isSessionCreated()) {
SessionManager.getInstance().createSession(""String_Node_Str"");
}
Changelog<String,Void> unprocessedLocalChangelog=new Changelog<>();
if (!shouldCommit) {
unprocessedLocalChangelog=unprocessedLocalChangelog.and(localChangelog,(s,element) -> null);
}
if (shouldCommit && !shouldCommitDeletes) {
Map<String,Void> unprocessedLocalDeletedChanges=unprocessedLocalChangelog.get(Changelog.ChangeType.DELETED);
for (String key : localChangelog.get(Changelog.ChangeType.DELETED).keySet()) {
unprocessedLocalDeletedChanges.put(key,null);
}
}
unprocessedLocalChangelog=unprocessedLocalChangelog.and(failedLocalChangelog,(s,element) -> null);
try {
SyncElements.setByType(project,SyncElement.Type.LOCAL,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedLocalChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
Changelog<String,Void> unprocessedJmsChangelog=new Changelog<>();
if (!shouldUpdate) {
unprocessedJmsChangelog=unprocessedJmsChangelog.and(jmsChangelog);
}
unprocessedJmsChangelog=unprocessedJmsChangelog.and(failedJmsChangelog);
try {
SyncElements.setByType(project,SyncElement.Type.MMS,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedJmsChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
SessionManager.getInstance().closeSession();
listener.setDisabled(false);
failure=false;
}",0.999746466375103
88545,"public void run(){
  if (TicketUtils.isTicketValid(project)) {
    initializeJMS(project);
  }
 else {
    MMSLoginAction.loginAction(project);
  }
}","public void run(){
  if (TicketUtils.isTicketSet(project)) {
    initializeJMS(project);
  }
 else {
    MMSLoginAction.loginAction(project);
  }
}",0.972972972972973
88546,"@Override public void projectOpened(final Project project){
  closeJMS(project);
  if (shouldEnableJMS(project)) {
    new Thread(){
      public void run(){
        if (TicketUtils.isTicketValid(project)) {
          initializeJMS(project);
        }
 else {
          MMSLoginAction.loginAction(project);
        }
      }
    }
.start();
  }
}","@Override public void projectOpened(final Project project){
  closeJMS(project);
  if (shouldEnableJMS(project)) {
    new Thread(){
      public void run(){
        if (TicketUtils.isTicketSet(project)) {
          initializeJMS(project);
        }
 else {
          MMSLoginAction.loginAction(project);
        }
      }
    }
.start();
  }
}",0.9884057971014492
88547,"public void validate(Project project){
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return;
  }
  for (  String key : images.keySet()) {
    Element e=Converters.getIdToElementConverter().apply(key,project);
    String id=key.replace(""String_Node_Str"",""String_Node_Str"");
    requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + id);
    JsonNode value;
    String cs=""String_Node_Str"";
    if ((value=images.get(key).get(""String_Node_Str"")) != null && value.isTextual()) {
      cs=value.asText();
    }
    requestUri.setParameter(""String_Node_Str"",cs);
    String extension=""String_Node_Str"";
    if ((value=images.get(key).get(""String_Node_Str"")) != null && value.isTextual()) {
      extension=value.asText();
    }
    requestUri.setParameter(""String_Node_Str"",extension);
    ObjectNode response;
    try {
      HttpRequestBase request=MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri);
      request.setHeader(""String_Node_Str"",""String_Node_Str"" + extension);
      response=JacksonUtils.parseJsonObject(MMSUtils.sendMMSRequest(project,request));
    }
 catch (    ServerException|IOException|URISyntaxException e1) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
      e1.printStackTrace();
      return;
    }
    if ((value=response.get(""String_Node_Str"")) != null && value.isTextual() && value.asText().contains(""String_Node_Str"")) {
      ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"");
      v.addAction(new ExportImage(e,allImages));
      rule.addViolation(v);
    }
  }
}","public void validate(Project project){
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
  if (requestUri == null) {
    return;
  }
  for (  String key : images.keySet()) {
    Element e=Converters.getIdToElementConverter().apply(key,project);
    String id=key.replace(""String_Node_Str"",""String_Node_Str"");
    requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + id);
    JsonNode value;
    String cs=""String_Node_Str"";
    if ((value=images.get(key).get(""String_Node_Str"")) != null && value.isTextual()) {
      cs=value.asText();
    }
    requestUri.setParameter(""String_Node_Str"",cs);
    String extension=""String_Node_Str"";
    if ((value=images.get(key).get(""String_Node_Str"")) != null && value.isTextual()) {
      extension=value.asText();
    }
    requestUri.setParameter(""String_Node_Str"",extension);
    ObjectNode response;
    try {
      HttpRequestBase request=MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri);
      request.setHeader(""String_Node_Str"",""String_Node_Str"" + extension);
      response=JacksonUtils.parseJsonObject(MMSUtils.sendMMSRequest(project,request));
    }
 catch (    ServerException|IOException|URISyntaxException e1) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + e1.getMessage());
      e1.printStackTrace();
      return;
    }
    if (((value=response.get(""String_Node_Str"")) == null || !value.isTextual() || value.asText().contains(""String_Node_Str"")) || ((value=response.get(""String_Node_Str"")) == null || !value.isTextual() || !value.asText().equals(cs))) {
      ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"");
      v.addAction(new ExportImage(e,allImages));
      rule.addViolation(v);
    }
  }
}",0.9611078373600472
88548,"TicketMapping(final Project project,String ticket){
  this.ticket=ticket;
  this.ticketRenewer=Executors.newScheduledThreadPool(1);
  final Runnable renewTicket=() -> {
    try {
      TicketUtils.isTicketValid(project);
    }
 catch (    Exception ignored) {
    }
  }
;
  this.ticketRenewer.scheduleAtFixedRate(renewTicket,TICKET_RENEWAL_INTERVAL,TICKET_RENEWAL_INTERVAL,TimeUnit.SECONDS);
}","TicketMapping(final Project project,String ticket){
  this.ticket=ticket;
  this.ticketRenewer=Executors.newScheduledThreadPool(1);
  final Runnable renewTicket=() -> {
    try {
      try {
        boolean isValid=MMSUtils.validateCredentials(project,ticketMappings.get(project).getTicket()).equals(username);
        if (!isValid) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          MMSLogoutAction.logoutAction(project);
        }
      }
 catch (      ServerException|IOException|URISyntaxException e) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
        e.printStackTrace();
      }
    }
 catch (    Exception ignored) {
    }
  }
;
  this.ticketRenewer.scheduleAtFixedRate(renewTicket,TICKET_RENEWAL_INTERVAL,TICKET_RENEWAL_INTERVAL,TimeUnit.SECONDS);
}",0.6167615947925142
88549,"public static boolean validateCredentials(Project project,String ticket) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return false;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + ticket);
  requestUri.clearParameters();
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpGet(requestDest);
  System.out.println(""String_Node_Str"" + requestUri.toString());
  String message=""String_Node_Str"";
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent()){
    int responseCode=response.getStatusLine().getStatusCode();
    String responseBody=((inputStream != null) ? IOUtils.toString(inputStream) : ""String_Node_Str"");
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + requestUri.toString() + ""String_Node_Str""+ responseCode);
    boolean throwServerException=false;
    if (responseCode != 200) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + responseCode);
      throwServerException=true;
    }
    if (!responseBody.isEmpty() && responseType.equals(""String_Node_Str"")) {
      ObjectNode responseJson=JacksonUtils.getObjectMapper().readValue(responseBody,ObjectNode.class);
      JsonNode value;
      if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
        message=value.asText();
        Application.getInstance().getGUILog().log(""String_Node_Str"" + value.asText());
      }
    }
    if (throwServerException) {
      Utils.showPopupMessage(""String_Node_Str"");
      throw new ServerException(responseBody,responseCode);
    }
  }
   return message.equals(""String_Node_Str"");
}","public static boolean validateCredentials(Project project,String ticket) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return false;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + ticket);
  requestUri.clearParameters();
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpGet(requestDest);
  System.out.println(""String_Node_Str"" + requestUri.toString());
  String message=""String_Node_Str"";
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent()){
    int responseCode=response.getStatusLine().getStatusCode();
    String responseBody=((inputStream != null) ? IOUtils.toString(inputStream) : ""String_Node_Str"");
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + requestUri.toString() + ""String_Node_Str""+ responseCode);
    boolean throwServerException=false;
    if (responseCode != HttpURLConnection.HTTP_OK || (responseCode == HttpURLConnection.HTTP_NOT_FOUND && !responseType.equals(""String_Node_Str""))) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + responseCode);
      throwServerException=true;
    }
    if (!responseBody.isEmpty() && responseType.equals(""String_Node_Str"")) {
      ObjectNode responseJson=JacksonUtils.getObjectMapper().readValue(responseBody,ObjectNode.class);
      JsonNode value;
      if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
        message=value.asText();
        Application.getInstance().getGUILog().log(""String_Node_Str"" + value.asText());
      }
    }
    if (throwServerException) {
      Utils.showPopupMessage(""String_Node_Str"");
      throw new ServerException(responseBody,responseCode);
    }
  }
   return message.equals(""String_Node_Str"");
}",0.969564158753348
88550,"public static String sendCredentials(Project project,String username,String password) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return null;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"");
  requestUri.clearParameters();
  ObjectNode credentials=JacksonUtils.getObjectMapper().createObjectNode();
  credentials.put(""String_Node_Str"",username);
  credentials.put(""String_Node_Str"",password);
  ContentType contentType=ContentType.APPLICATION_JSON;
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpPost(requestDest);
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  request.addHeader(""String_Node_Str"",(Consts.UTF_8).displayName());
  String data=JacksonUtils.getObjectMapper().writeValueAsString(credentials);
  ((HttpEntityEnclosingRequest)request).setEntity(new StringEntity(data,ContentType.APPLICATION_JSON));
  System.out.println(""String_Node_Str"" + requestUri.toString());
  ObjectNode responseJson=null;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent()){
    int responseCode=response.getStatusLine().getStatusCode();
    String responseBody=((inputStream != null) ? IOUtils.toString(inputStream) : ""String_Node_Str"");
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + requestUri.toString() + ""String_Node_Str""+ responseCode);
    boolean throwServerException=false;
    if (responseCode != 200) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + responseCode);
      throwServerException=true;
    }
    if (!responseBody.isEmpty() && responseType.equals(""String_Node_Str"")) {
      responseJson=JacksonUtils.getObjectMapper().readValue(responseBody,ObjectNode.class);
      JsonNode value;
      if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + value.asText());
      }
      if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isArray()) {
        ArrayNode msgs=(ArrayNode)value;
        for (        JsonNode msg : msgs) {
          if (msg != null && (value=msg.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + value.asText());
          }
        }
      }
    }
    if (throwServerException) {
      Utils.showPopupMessage(""String_Node_Str"");
      throw new ServerException(responseBody,responseCode);
    }
  }
   JsonNode value;
  if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && (value=value.get(""String_Node_Str"")) != null && value.isTextual()) {
    return value.asText();
  }
  return null;
}","public static String sendCredentials(Project project,String username,String password) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return null;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"");
  requestUri.clearParameters();
  ObjectNode credentials=JacksonUtils.getObjectMapper().createObjectNode();
  credentials.put(""String_Node_Str"",username);
  credentials.put(""String_Node_Str"",password);
  ContentType contentType=ContentType.APPLICATION_JSON;
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpPost(requestDest);
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  request.addHeader(""String_Node_Str"",(Consts.UTF_8).displayName());
  String data=JacksonUtils.getObjectMapper().writeValueAsString(credentials);
  ((HttpEntityEnclosingRequest)request).setEntity(new StringEntity(data,ContentType.APPLICATION_JSON));
  System.out.println(""String_Node_Str"" + requestUri.toString());
  ObjectNode responseJson=null;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent()){
    int responseCode=response.getStatusLine().getStatusCode();
    String responseBody=((inputStream != null) ? IOUtils.toString(inputStream) : ""String_Node_Str"");
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + requestUri.toString() + ""String_Node_Str""+ responseCode);
    boolean throwServerException=false;
    if (responseCode != HttpURLConnection.HTTP_OK) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + responseCode);
      throwServerException=true;
    }
    if (!responseBody.isEmpty() && responseType.equals(""String_Node_Str"")) {
      responseJson=JacksonUtils.getObjectMapper().readValue(responseBody,ObjectNode.class);
      JsonNode value;
      if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + value.asText());
      }
      if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isArray()) {
        ArrayNode msgs=(ArrayNode)value;
        for (        JsonNode msg : msgs) {
          if (msg != null && (value=msg.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + value.asText());
          }
        }
      }
    }
    if (throwServerException) {
      Utils.showPopupMessage(""String_Node_Str"");
      throw new ServerException(responseBody,responseCode);
    }
  }
   JsonNode value;
  if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && (value=value.get(""String_Node_Str"")) != null && value.isTextual()) {
    return value.asText();
  }
  return null;
}",0.9954983922829582
88551,"/** 
 * General purpose method for sending a constructed http request via http client.
 * @param request
 * @return
 * @throws IOException
 * @throws ServerException
 */
public static JsonParser sendMMSRequest(Project project,HttpRequestBase request) throws IOException, ServerException, URISyntaxException {
  File targetFile=File.createTempFile(""String_Node_Str"",null);
  System.out.println(targetFile.getPath());
  targetFile.deleteOnExit();
  HttpEntityEnclosingRequest httpEntityEnclosingRequest=null;
  boolean logBody=MDKOptionsGroup.getMDKOptions().isLogJson();
  logBody=logBody && request instanceof HttpEntityEnclosingRequest;
  logBody=logBody && ((httpEntityEnclosingRequest=(HttpEntityEnclosingRequest)request).getEntity() != null);
  logBody=logBody && httpEntityEnclosingRequest.getEntity().isRepeatable();
  System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString());
  ObjectNode responseJson=JacksonUtils.getObjectMapper().createObjectNode();
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent();OutputStream outputStream=new FileOutputStream(targetFile)){
    int responseCode=response.getStatusLine().getStatusCode();
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString()+ ""String_Node_Str""+ responseCode);
    boolean throwServerException=false;
    if (responseCode == HttpURLConnection.HTTP_OK || (responseCode == HttpURLConnection.HTTP_NOT_FOUND && responseType.equals(""String_Node_Str""))) {
    }
 else     if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {
      Utils.guilog(""String_Node_Str"" + responseCode);
      MMSLogoutAction.logoutAction(project);
      throwServerException=true;
    }
 else {
      Utils.guilog(""String_Node_Str"" + responseCode);
      throwServerException=true;
    }
    if (inputStream != null && responseType.equals(""String_Node_Str"")) {
      byte[] buffer=new byte[8 * 1024];
      int bytesRead;
      while ((bytesRead=inputStream.read(buffer)) != -1) {
        outputStream.write(buffer,0,bytesRead);
      }
      JsonFactory jasonFactory=JacksonUtils.getJsonFactory();
      JsonParser jsonParser=jasonFactory.createParser(targetFile);
      while (jsonParser.nextFieldName() != null && !jsonParser.nextFieldName().equals(""String_Node_Str"")) {
      }
      if (jsonParser.getCurrentToken() == JsonToken.FIELD_NAME) {
        jsonParser.nextToken();
        Application.getInstance().getGUILog().log(""String_Node_Str"" + jsonParser.getText());
      }
    }
    if (throwServerException) {
      Utils.showPopupMessage(""String_Node_Str"");
      throw new ServerException((inputStream != null ? inputStream.toString() : ""String_Node_Str""),responseCode);
    }
  }
   JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(targetFile);
  jsonParser.nextToken();
  return jsonParser;
}","/** 
 * General purpose method for sending a constructed http request via http client.
 * @param request
 * @return
 * @throws IOException
 * @throws ServerException
 */
public static JsonParser sendMMSRequest(Project project,HttpRequestBase request) throws IOException, ServerException, URISyntaxException {
  File targetFile=File.createTempFile(""String_Node_Str"",null);
  targetFile.deleteOnExit();
  HttpEntityEnclosingRequest httpEntityEnclosingRequest=null;
  boolean logBody=MDKOptionsGroup.getMDKOptions().isLogJson();
  logBody=logBody && request instanceof HttpEntityEnclosingRequest;
  logBody=logBody && ((httpEntityEnclosingRequest=(HttpEntityEnclosingRequest)request).getEntity() != null);
  logBody=logBody && httpEntityEnclosingRequest.getEntity().isRepeatable();
  System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString());
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent();OutputStream outputStream=new FileOutputStream(targetFile)){
    int responseCode=response.getStatusLine().getStatusCode();
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString()+ ""String_Node_Str""+ responseCode);
    System.out.println(""String_Node_Str"" + targetFile.getPath());
    boolean throwServerException=false;
    if (responseCode == HttpURLConnection.HTTP_OK || (request.getMethod().equals(""String_Node_Str"") && responseCode == HttpURLConnection.HTTP_NOT_FOUND && responseType.equals(""String_Node_Str""))) {
    }
 else     if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {
      Utils.guilog(""String_Node_Str"" + responseCode);
      MMSLogoutAction.logoutAction(project);
      throwServerException=true;
    }
 else {
      Utils.guilog(""String_Node_Str"" + responseCode);
      throwServerException=true;
    }
    if (inputStream != null && responseType.equals(""String_Node_Str"")) {
      byte[] buffer=new byte[8 * 1024];
      int bytesRead;
      while ((bytesRead=inputStream.read(buffer)) != -1) {
        outputStream.write(buffer,0,bytesRead);
      }
      JsonFactory jasonFactory=JacksonUtils.getJsonFactory();
      JsonParser jsonParser=jasonFactory.createParser(targetFile);
      while (jsonParser.nextFieldName() != null && !jsonParser.nextFieldName().equals(""String_Node_Str"")) {
      }
      if (jsonParser.getCurrentToken() == JsonToken.FIELD_NAME) {
        jsonParser.nextToken();
        Application.getInstance().getGUILog().log(""String_Node_Str"" + jsonParser.getText());
      }
    }
    if (throwServerException) {
      Utils.showPopupMessage(""String_Node_Str"");
      throw new ServerException((inputStream != null ? inputStream.toString() : ""String_Node_Str""),responseCode);
    }
  }
   JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(targetFile);
  jsonParser.nextToken();
  return jsonParser;
}",0.9624801271860096
88552,"public static File createEntityFile(Class<?> clazz,ContentType contentType,Collection nodes,JsonBlobType jsonBlobType) throws IOException {
  File file=File.createTempFile(clazz.getSimpleName() + ""String_Node_Str"" + contentType.getMimeType().replace('/','-')+ ""String_Node_Str"",null);
  file.deleteOnExit();
  String arrayName=""String_Node_Str"";
  if (jsonBlobType == JsonBlobType.PROJECT) {
    arrayName=""String_Node_Str"";
  }
 else   if (jsonBlobType == JsonBlobType.REF) {
    arrayName=""String_Node_Str"";
  }
  try (FileOutputStream outputStream=new FileOutputStream(file);JsonGenerator jsonGenerator=JacksonUtils.getJsonFactory().createGenerator(outputStream)){
    jsonGenerator.writeStartObject();
    jsonGenerator.writeArrayFieldStart(arrayName);
    for (    Object node : nodes) {
      if (node instanceof ObjectNode && jsonBlobType == JsonBlobType.ELEMENT_JSON || jsonBlobType == JsonBlobType.ORG || jsonBlobType == JsonBlobType.PROJECT || jsonBlobType == JsonBlobType.REF) {
        jsonGenerator.writeObject(node);
      }
 else       if (node instanceof String && jsonBlobType == JsonBlobType.ELEMENT_ID) {
        jsonGenerator.writeStartObject();
        jsonGenerator.writeStringField(MDKConstants.ID_KEY,(String)node);
        jsonGenerator.writeEndObject();
      }
 else {
        throw new IOException(""String_Node_Str"");
      }
    }
    jsonGenerator.writeEndArray();
    jsonGenerator.writeStringField(""String_Node_Str"",""String_Node_Str"");
    jsonGenerator.writeStringField(""String_Node_Str"",MDKPlugin.VERSION);
    jsonGenerator.writeEndObject();
  }
   System.out.println(file.getPath());
  return file;
}","public static File createEntityFile(Class<?> clazz,ContentType contentType,Collection nodes,JsonBlobType jsonBlobType) throws IOException {
  File file=File.createTempFile(clazz.getSimpleName() + ""String_Node_Str"" + contentType.getMimeType().replace('/','-')+ ""String_Node_Str"",null);
  file.deleteOnExit();
  String arrayName=""String_Node_Str"";
  if (jsonBlobType == JsonBlobType.PROJECT) {
    arrayName=""String_Node_Str"";
  }
 else   if (jsonBlobType == JsonBlobType.REF) {
    arrayName=""String_Node_Str"";
  }
  try (FileOutputStream outputStream=new FileOutputStream(file);JsonGenerator jsonGenerator=JacksonUtils.getJsonFactory().createGenerator(outputStream)){
    jsonGenerator.writeStartObject();
    jsonGenerator.writeArrayFieldStart(arrayName);
    for (    Object node : nodes) {
      if (node instanceof ObjectNode && jsonBlobType == JsonBlobType.ELEMENT_JSON || jsonBlobType == JsonBlobType.ORG || jsonBlobType == JsonBlobType.PROJECT || jsonBlobType == JsonBlobType.REF) {
        jsonGenerator.writeObject(node);
      }
 else       if (node instanceof String && jsonBlobType == JsonBlobType.ELEMENT_ID) {
        jsonGenerator.writeStartObject();
        jsonGenerator.writeStringField(MDKConstants.ID_KEY,(String)node);
        jsonGenerator.writeEndObject();
      }
 else {
        throw new IOException(""String_Node_Str"");
      }
    }
    jsonGenerator.writeEndArray();
    jsonGenerator.writeStringField(""String_Node_Str"",""String_Node_Str"");
    jsonGenerator.writeStringField(""String_Node_Str"",MDKPlugin.VERSION);
    jsonGenerator.writeEndObject();
  }
   System.out.println(""String_Node_Str"" + file.getPath());
  return file;
}",0.993924665856622
88553,"@Override public void run(ProgressStatus arg0){
  BranchValidator v=new BranchValidator(Application.getInstance().getProject());
  v.validate(arg0,false);
  v.showWindow();
}","@Override public void run(ProgressStatus arg0){
  BranchValidator branchValidator=new BranchValidator(Application.getInstance().getProject());
  branchValidator.validate(arg0,true);
  if (branchValidator.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  branchValidator.showWindow();
}",0.6377952755905512
88554,"@SuppressWarnings(""String_Node_Str"") @Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject()) && EsiUtils.getLoggedUserName() == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  if (!TicketUtils.isTicketValid(project)) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  BranchValidator bv=new BranchValidator(project);
  bv.validate(null,false);
  if (bv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
  }
  LocalSyncTransactionCommitListener listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  listener.setDisabled(true);
  SyncElements.lockSyncFolder(project);
  listener.setDisabled(false);
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(Application.getInstance().getProject());
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  if (jmsMessageListener == null) {
    if (MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    return;
  }
  Changelog<String,Element> persistedLocalChangelog=new Changelog<>();
  Collection<SyncElement> persistedLocalSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.LOCAL);
  for (  SyncElement syncElement : persistedLocalSyncElements) {
    persistedLocalChangelog=persistedLocalChangelog.and(SyncElements.buildChangelog(syncElement),(key,value) -> Converters.getIdToElementConverter().apply(key,project));
  }
  Changelog<String,Element> localChangelog=persistedLocalChangelog.and(listener.getInMemoryLocalChangelog());
  Map<String,Element> localCreated=localChangelog.get(Changelog.ChangeType.CREATED), localUpdated=localChangelog.get(Changelog.ChangeType.UPDATED), localDeleted=localChangelog.get(Changelog.ChangeType.DELETED);
  Changelog<String,Void> persistedJmsChangelog=new Changelog<>();
  Collection<SyncElement> persistedJmsSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.MMS);
  for (  SyncElement syncElement : persistedJmsSyncElements) {
    persistedJmsChangelog=persistedJmsChangelog.and(SyncElements.buildChangelog(syncElement));
  }
  Changelog<String,Void> jmsChangelog=persistedJmsChangelog.and(jmsMessageListener.getInMemoryJMSChangelog(),(key,objectNode) -> null);
  Map<String,Void> jmsCreated=jmsChangelog.get(Changelog.ChangeType.CREATED), jmsUpdated=jmsChangelog.get(Changelog.ChangeType.UPDATED), jmsDeleted=jmsChangelog.get(Changelog.ChangeType.DELETED);
  Set<String> elementIdsToGet=new HashSet<>(jmsUpdated.keySet());
  elementIdsToGet.addAll(jmsCreated.keySet());
  if (shouldUpdate && !jmsChangelog.isEmpty()) {
    int size=jmsChangelog.flattenedSize();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + size + ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  Map<String,ObjectNode> jmsJsons=new HashMap<>(elementIdsToGet.size());
  if (!elementIdsToGet.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"" + elementIdsToGet.size() + ""String_Node_Str""+ (elementIdsToGet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    ObjectNode response=null;
    try {
      response=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,elementIdsToGet,progressStatus));
    }
 catch (    ServerException|IOException|URISyntaxException e) {
      if (e instanceof ServerException && ((ServerException)e).getCode() == 404) {
        (response=JacksonUtils.getObjectMapper().createObjectNode()).putArray(""String_Node_Str"");
      }
 else       if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        e.printStackTrace();
        return;
      }
    }
    if (progressStatus.isCancel()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    JsonNode elementsArrayNode;
    if (response == null || (elementsArrayNode=response.get(""String_Node_Str"")) == null || !elementsArrayNode.isArray()) {
      Utils.guilog(""String_Node_Str"");
      return;
    }
    for (    JsonNode jsonNode : elementsArrayNode) {
      if (!jsonNode.isObject()) {
        continue;
      }
      String webId=jsonNode.get(MDKConstants.ID_KEY).asText();
      jmsJsons.put(webId,(ObjectNode)jsonNode);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  Map<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedChanges=new LinkedHashMap<>(), unconflictedChanges=new LinkedHashMap<>();
  localChangelog.findConflicts(jmsChangelog,(change,change2) -> change != null && change2 != null,conflictedChanges,unconflictedChanges);
  Map<String,Element> localElementsToPost=new LinkedHashMap<>(localCreated.size() + localUpdated.size());
  Set<String> deleteElements=new HashSet<>(localDeleted.size());
  Map<String,ObjectNode> jmsElementsToCreateLocally=new LinkedHashMap<>(jmsCreated.size());
  Map<String,Pair<ObjectNode,Element>> jmsElementsToUpdateLocally=new LinkedHashMap<>(jmsUpdated.size());
  Map<String,Element> jmsElementsToDeleteLocally=new LinkedHashMap<>(jmsDeleted.size());
  for (  Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> unconflictedEntry : unconflictedChanges.entrySet()) {
    String id=unconflictedEntry.getKey();
    Changelog.Change<Element> localChange=unconflictedEntry.getValue().getKey();
    Changelog.Change<ObjectNode> jmsChange=unconflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),unconflictedEntry.getValue().getValue().getType()) : null;
    if (shouldCommit && localChange != null) {
      Element element=localChange.getChanged();
switch (localChange.getType()) {
case CREATED:
case UPDATED:
        if (element == null) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
          continue;
        }
      localElementsToPost.put(id,element);
    break;
case DELETED:
  if (element != null && !project.isDisposed(element)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
    continue;
  }
deleteElements.add(id);
break;
}
}
 else if (shouldUpdate && jmsChange != null) {
ObjectNode objectNode=jmsChange.getChanged();
Element element=Converters.getIdToElementConverter().apply(id,project);
switch (jmsChange.getType()) {
case CREATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element != null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
jmsElementsToCreateLocally.put(id,objectNode);
break;
case UPDATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.UPDATED);
continue;
}
jmsElementsToUpdateLocally.put(id,new Pair<>(objectNode,element));
break;
case DELETED:
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
continue;
}
jmsElementsToDeleteLocally.put(id,element);
break;
}
}
}
if (progressStatus.isCancel()) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
return;
}
boolean shouldLogNoLocalChanges=shouldCommit;
if (shouldCommit && !localElementsToPost.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
LinkedList<ObjectNode> postElements=new LinkedList<>();
for (Element element : localElementsToPost.values()) {
ObjectNode elementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
if (elementObjectNode != null) {
postElements.add(elementObjectNode);
}
}
if (postElements.size() > 0) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(postElements.size()) + ""String_Node_Str""+ (postElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,postElements,MMSUtils.JsonBlobType.ELEMENT_JSON);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,true,postElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
}
if (shouldCommit && shouldCommitDeletes && !deleteElements.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(deleteElements.size()) + ""String_Node_Str""+ (deleteElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,deleteElements,MMSUtils.JsonBlobType.ELEMENT_ID);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,true,deleteElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
if (shouldLogNoLocalChanges) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
}
if (shouldUpdate) {
listener.setDisabled(true);
List<ObjectNode> jmsElementsToCreateOrUpdateLocally=new ArrayList<>(jmsElementsToCreateLocally.size() + jmsElementsToUpdateLocally.size());
jmsElementsToCreateOrUpdateLocally.addAll(jmsElementsToCreateLocally.values());
jmsElementsToUpdateLocally.values().forEach(pair -> jmsElementsToCreateOrUpdateLocally.add(pair.getKey()));
UpdateClientElementAction updateClientElementAction=new UpdateClientElementAction(project);
updateClientElementAction.setElementsToUpdate(jmsElementsToCreateOrUpdateLocally);
updateClientElementAction.setElementsToDelete(jmsElementsToDeleteLocally.values().stream().map(Converters.getElementToIdConverter()).filter(id -> id != null).filter(id -> !id.isEmpty()).collect(Collectors.toList()));
updateClientElementAction.run(progressStatus);
failedJmsChangelog=failedJmsChangelog.and(updateClientElementAction.getFailedChangelog(),(id,objectNode) -> null);
listener.setDisabled(false);
}
progressStatus.setDescription(""String_Node_Str"");
Set<Element> localConflictedElements=new HashSet<>();
Set<ObjectNode> jmsConflictedElements=new HashSet<>();
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null && !project.isDisposed(localChange.getChanged())) {
localConflictedElements.add(localChange.getChanged());
}
if (jmsChange != null && jmsChange.getChanged() != null) {
jmsConflictedElements.add(jmsChange.getChanged());
}
}
ElementValidator elementValidator=new ElementValidator(ElementValidator.buildElementPairs(localConflictedElements,project),jmsConflictedElements,project);
elementValidator.run(progressStatus);
if (!elementValidator.getInvalidElements().isEmpty()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + elementValidator.getInvalidElements().size() + ""String_Node_Str""+ (elementValidator.getInvalidElements().size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
vss.add(elementValidator.getValidationSuite());
Utils.displayValidationWindow(project,elementValidator.getValidationSuite(),""String_Node_Str"");
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
if (!elementValidator.getInvalidElements().containsKey(id)) {
continue;
}
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(localChange.getType())) {
failedLocalChangelog.addChange(conflictedEntry.getKey(),localChange.getChanged(),localChange.getType());
}
if (jmsChange != null && jmsChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(jmsChange.getType())) {
failedJmsChangelog.addChange(conflictedEntry.getKey(),null,jmsChange.getType());
}
}
}
listener.getInMemoryLocalChangelog().clear();
jmsMessageListener.getInMemoryJMSChangelog().clear();
listener.setDisabled(true);
if (!SessionManager.getInstance().isSessionCreated()) {
SessionManager.getInstance().createSession(""String_Node_Str"");
}
Changelog<String,Void> unprocessedLocalChangelog=new Changelog<>();
if (!shouldCommit) {
unprocessedLocalChangelog=unprocessedLocalChangelog.and(localChangelog,(s,element) -> null);
}
if (shouldCommit && !shouldCommitDeletes) {
Map<String,Void> unprocessedLocalDeletedChanges=unprocessedLocalChangelog.get(Changelog.ChangeType.DELETED);
for (String key : localChangelog.get(Changelog.ChangeType.DELETED).keySet()) {
unprocessedLocalDeletedChanges.put(key,null);
}
}
unprocessedLocalChangelog=unprocessedLocalChangelog.and(failedLocalChangelog,(s,element) -> null);
try {
SyncElements.setByType(project,SyncElement.Type.LOCAL,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedLocalChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
Changelog<String,Void> unprocessedJmsChangelog=new Changelog<>();
if (!shouldUpdate) {
unprocessedJmsChangelog=unprocessedJmsChangelog.and(jmsChangelog);
}
unprocessedJmsChangelog=unprocessedJmsChangelog.and(failedJmsChangelog);
try {
SyncElements.setByType(project,SyncElement.Type.MMS,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedJmsChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
SessionManager.getInstance().closeSession();
listener.setDisabled(false);
failure=false;
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject()) && EsiUtils.getLoggedUserName() == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  if (!TicketUtils.isTicketValid(project)) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (pv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  BranchValidator bv=new BranchValidator(project);
  bv.validate(null,false);
  if (bv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (bv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  LocalSyncTransactionCommitListener listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  listener.setDisabled(true);
  SyncElements.lockSyncFolder(project);
  listener.setDisabled(false);
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(Application.getInstance().getProject());
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  if (jmsMessageListener == null) {
    if (MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    return;
  }
  Changelog<String,Element> persistedLocalChangelog=new Changelog<>();
  Collection<SyncElement> persistedLocalSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.LOCAL);
  for (  SyncElement syncElement : persistedLocalSyncElements) {
    persistedLocalChangelog=persistedLocalChangelog.and(SyncElements.buildChangelog(syncElement),(key,value) -> Converters.getIdToElementConverter().apply(key,project));
  }
  Changelog<String,Element> localChangelog=persistedLocalChangelog.and(listener.getInMemoryLocalChangelog());
  Map<String,Element> localCreated=localChangelog.get(Changelog.ChangeType.CREATED), localUpdated=localChangelog.get(Changelog.ChangeType.UPDATED), localDeleted=localChangelog.get(Changelog.ChangeType.DELETED);
  Changelog<String,Void> persistedJmsChangelog=new Changelog<>();
  Collection<SyncElement> persistedJmsSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.MMS);
  for (  SyncElement syncElement : persistedJmsSyncElements) {
    persistedJmsChangelog=persistedJmsChangelog.and(SyncElements.buildChangelog(syncElement));
  }
  Changelog<String,Void> jmsChangelog=persistedJmsChangelog.and(jmsMessageListener.getInMemoryJMSChangelog(),(key,objectNode) -> null);
  Map<String,Void> jmsCreated=jmsChangelog.get(Changelog.ChangeType.CREATED), jmsUpdated=jmsChangelog.get(Changelog.ChangeType.UPDATED), jmsDeleted=jmsChangelog.get(Changelog.ChangeType.DELETED);
  Set<String> elementIdsToGet=new HashSet<>(jmsUpdated.keySet());
  elementIdsToGet.addAll(jmsCreated.keySet());
  if (shouldUpdate && !jmsChangelog.isEmpty()) {
    int size=jmsChangelog.flattenedSize();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + size + ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  Map<String,ObjectNode> jmsJsons=new HashMap<>(elementIdsToGet.size());
  if (!elementIdsToGet.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"" + elementIdsToGet.size() + ""String_Node_Str""+ (elementIdsToGet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    ObjectNode response=null;
    try {
      response=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,elementIdsToGet,progressStatus));
    }
 catch (    ServerException|IOException|URISyntaxException e) {
      if (e instanceof ServerException && ((ServerException)e).getCode() == 404) {
        (response=JacksonUtils.getObjectMapper().createObjectNode()).putArray(""String_Node_Str"");
      }
 else       if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        e.printStackTrace();
        return;
      }
    }
    if (progressStatus.isCancel()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    JsonNode elementsArrayNode;
    if (response == null || (elementsArrayNode=response.get(""String_Node_Str"")) == null || !elementsArrayNode.isArray()) {
      Utils.guilog(""String_Node_Str"");
      return;
    }
    for (    JsonNode jsonNode : elementsArrayNode) {
      if (!jsonNode.isObject()) {
        continue;
      }
      String webId=jsonNode.get(MDKConstants.ID_KEY).asText();
      jmsJsons.put(webId,(ObjectNode)jsonNode);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  Map<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedChanges=new LinkedHashMap<>(), unconflictedChanges=new LinkedHashMap<>();
  localChangelog.findConflicts(jmsChangelog,(change,change2) -> change != null && change2 != null,conflictedChanges,unconflictedChanges);
  Map<String,Element> localElementsToPost=new LinkedHashMap<>(localCreated.size() + localUpdated.size());
  Set<String> deleteElements=new HashSet<>(localDeleted.size());
  Map<String,ObjectNode> jmsElementsToCreateLocally=new LinkedHashMap<>(jmsCreated.size());
  Map<String,Pair<ObjectNode,Element>> jmsElementsToUpdateLocally=new LinkedHashMap<>(jmsUpdated.size());
  Map<String,Element> jmsElementsToDeleteLocally=new LinkedHashMap<>(jmsDeleted.size());
  for (  Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> unconflictedEntry : unconflictedChanges.entrySet()) {
    String id=unconflictedEntry.getKey();
    Changelog.Change<Element> localChange=unconflictedEntry.getValue().getKey();
    Changelog.Change<ObjectNode> jmsChange=unconflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),unconflictedEntry.getValue().getValue().getType()) : null;
    if (shouldCommit && localChange != null) {
      Element element=localChange.getChanged();
switch (localChange.getType()) {
case CREATED:
case UPDATED:
        if (element == null) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
          continue;
        }
      localElementsToPost.put(id,element);
    break;
case DELETED:
  if (element != null && !project.isDisposed(element)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
    continue;
  }
deleteElements.add(id);
break;
}
}
 else if (shouldUpdate && jmsChange != null) {
ObjectNode objectNode=jmsChange.getChanged();
Element element=Converters.getIdToElementConverter().apply(id,project);
switch (jmsChange.getType()) {
case CREATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element != null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
jmsElementsToCreateLocally.put(id,objectNode);
break;
case UPDATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.UPDATED);
continue;
}
jmsElementsToUpdateLocally.put(id,new Pair<>(objectNode,element));
break;
case DELETED:
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
continue;
}
jmsElementsToDeleteLocally.put(id,element);
break;
}
}
}
if (progressStatus.isCancel()) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
return;
}
boolean shouldLogNoLocalChanges=shouldCommit;
if (shouldCommit && !localElementsToPost.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
LinkedList<ObjectNode> postElements=new LinkedList<>();
for (Element element : localElementsToPost.values()) {
ObjectNode elementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
if (elementObjectNode != null) {
postElements.add(elementObjectNode);
}
}
if (postElements.size() > 0) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(postElements.size()) + ""String_Node_Str""+ (postElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,postElements,MMSUtils.JsonBlobType.ELEMENT_JSON);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,true,postElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
}
if (shouldCommit && shouldCommitDeletes && !deleteElements.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(deleteElements.size()) + ""String_Node_Str""+ (deleteElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,deleteElements,MMSUtils.JsonBlobType.ELEMENT_ID);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,true,deleteElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
if (shouldLogNoLocalChanges) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
}
if (shouldUpdate) {
listener.setDisabled(true);
List<ObjectNode> jmsElementsToCreateOrUpdateLocally=new ArrayList<>(jmsElementsToCreateLocally.size() + jmsElementsToUpdateLocally.size());
jmsElementsToCreateOrUpdateLocally.addAll(jmsElementsToCreateLocally.values());
jmsElementsToUpdateLocally.values().forEach(pair -> jmsElementsToCreateOrUpdateLocally.add(pair.getKey()));
UpdateClientElementAction updateClientElementAction=new UpdateClientElementAction(project);
updateClientElementAction.setElementsToUpdate(jmsElementsToCreateOrUpdateLocally);
updateClientElementAction.setElementsToDelete(jmsElementsToDeleteLocally.values().stream().map(Converters.getElementToIdConverter()).filter(id -> id != null).filter(id -> !id.isEmpty()).collect(Collectors.toList()));
updateClientElementAction.run(progressStatus);
failedJmsChangelog=failedJmsChangelog.and(updateClientElementAction.getFailedChangelog(),(id,objectNode) -> null);
listener.setDisabled(false);
}
progressStatus.setDescription(""String_Node_Str"");
Set<Element> localConflictedElements=new HashSet<>();
Set<ObjectNode> jmsConflictedElements=new HashSet<>();
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null && !project.isDisposed(localChange.getChanged())) {
localConflictedElements.add(localChange.getChanged());
}
if (jmsChange != null && jmsChange.getChanged() != null) {
jmsConflictedElements.add(jmsChange.getChanged());
}
}
ElementValidator elementValidator=new ElementValidator(ElementValidator.buildElementPairs(localConflictedElements,project),jmsConflictedElements,project);
elementValidator.run(progressStatus);
if (!elementValidator.getInvalidElements().isEmpty()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + elementValidator.getInvalidElements().size() + ""String_Node_Str""+ (elementValidator.getInvalidElements().size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
vss.add(elementValidator.getValidationSuite());
Utils.displayValidationWindow(project,elementValidator.getValidationSuite(),""String_Node_Str"");
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
if (!elementValidator.getInvalidElements().containsKey(id)) {
continue;
}
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(localChange.getType())) {
failedLocalChangelog.addChange(conflictedEntry.getKey(),localChange.getChanged(),localChange.getType());
}
if (jmsChange != null && jmsChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(jmsChange.getType())) {
failedJmsChangelog.addChange(conflictedEntry.getKey(),null,jmsChange.getType());
}
}
}
listener.getInMemoryLocalChangelog().clear();
jmsMessageListener.getInMemoryJMSChangelog().clear();
listener.setDisabled(true);
if (!SessionManager.getInstance().isSessionCreated()) {
SessionManager.getInstance().createSession(""String_Node_Str"");
}
Changelog<String,Void> unprocessedLocalChangelog=new Changelog<>();
if (!shouldCommit) {
unprocessedLocalChangelog=unprocessedLocalChangelog.and(localChangelog,(s,element) -> null);
}
if (shouldCommit && !shouldCommitDeletes) {
Map<String,Void> unprocessedLocalDeletedChanges=unprocessedLocalChangelog.get(Changelog.ChangeType.DELETED);
for (String key : localChangelog.get(Changelog.ChangeType.DELETED).keySet()) {
unprocessedLocalDeletedChanges.put(key,null);
}
}
unprocessedLocalChangelog=unprocessedLocalChangelog.and(failedLocalChangelog,(s,element) -> null);
try {
SyncElements.setByType(project,SyncElement.Type.LOCAL,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedLocalChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
Changelog<String,Void> unprocessedJmsChangelog=new Changelog<>();
if (!shouldUpdate) {
unprocessedJmsChangelog=unprocessedJmsChangelog.and(jmsChangelog);
}
unprocessedJmsChangelog=unprocessedJmsChangelog.and(failedJmsChangelog);
try {
SyncElements.setByType(project,SyncElement.Type.MMS,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedJmsChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
SessionManager.getInstance().closeSession();
listener.setDisabled(false);
failure=false;
}",0.981057268722467
88555,"@Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setIndeterminate(true);
  try {
    if (!checkProject()) {
      if (validationSuite.hasErrors()) {
        validationSuite.setName(""String_Node_Str"");
      }
 else {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
      }
      return;
    }
  }
 catch (  IOException|URISyntaxException|ServerException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    validationSuite=null;
    return;
  }
  progressStatus.setDescription(""String_Node_Str"" + rootElements.size() + ""String_Node_Str""+ ((depth != 0) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (rootElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  progressStatus.setIndeterminate(false);
  progressStatus.setMax(rootElements.size());
  progressStatus.setCurrent(0);
  List<Pair<Element,ObjectNode>> clientElements=new ArrayList<>(rootElements.size());
  Collection<JsonParser> jsonParsers=new ArrayList<>(3);
  for (  Element element : rootElements) {
    collectClientElementsRecursively(project,element,depth,clientElements);
    try {
      jsonParsers.add(collectServerElementsRecursively(project,element,depth,progressStatus));
      if (element == project.getPrimaryModel() && depth != 0) {
        if (progressStatus.isCancel()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          return;
        }
        jsonParsers.add(collectServerHoldingBinElementsRecursively(project,depth - 1,progressStatus));
        if (progressStatus.isCancel()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          return;
        }
        jsonParsers.add(collectServerModuleElementsRecursively(project,0,progressStatus));
      }
    }
 catch (    ServerException|URISyntaxException|IOException e) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      validationSuite=null;
      return;
    }
    if (jsonParsers.isEmpty()) {
      if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
      }
      validationSuite=null;
      return;
    }
    progressStatus.increase();
  }
  if (progressStatus.isCancel()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  elementValidator=new ElementValidator(clientElements,null,jsonParsers,project);
  elementValidator.run(progressStatus);
}","@Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setIndeterminate(true);
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (pv.getValidationSuite().hasErrors()) {
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  if (project.isRemote()) {
    BranchValidator bv=new BranchValidator(project);
    bv.validate(null,false);
    if (bv.hasErrors()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    if (bv.getValidationSuite().hasErrors()) {
      Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
      return;
    }
  }
  progressStatus.setDescription(""String_Node_Str"" + rootElements.size() + ""String_Node_Str""+ ((depth != 0) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (rootElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  progressStatus.setIndeterminate(false);
  progressStatus.setMax(rootElements.size());
  progressStatus.setCurrent(0);
  List<Pair<Element,ObjectNode>> clientElements=new ArrayList<>(rootElements.size());
  Collection<JsonParser> jsonParsers=new ArrayList<>(3);
  for (  Element element : rootElements) {
    collectClientElementsRecursively(project,element,depth,clientElements);
    try {
      jsonParsers.add(collectServerElementsRecursively(project,element,depth,progressStatus));
      if (element == project.getPrimaryModel() && depth != 0) {
        if (progressStatus.isCancel()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          return;
        }
        jsonParsers.add(collectServerHoldingBinElementsRecursively(project,depth - 1,progressStatus));
        if (progressStatus.isCancel()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          return;
        }
        jsonParsers.add(collectServerModuleElementsRecursively(project,0,progressStatus));
      }
    }
 catch (    ServerException|URISyntaxException|IOException e) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      validationSuite=null;
      return;
    }
    if (jsonParsers.isEmpty()) {
      if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
      }
      validationSuite=null;
      return;
    }
    progressStatus.increase();
  }
  if (progressStatus.isCancel()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  elementValidator=new ElementValidator(clientElements,null,jsonParsers,project);
  elementValidator.run(progressStatus);
}",0.8443536404160475
88556,"public void validate(ProgressStatus progressStatus,boolean allBranches){
  Project project=Application.getInstance().getProject();
  IPrimaryProject primaryProject=project.getPrimaryProject();
  if (!ProjectUtilities.isRemote(primaryProject)) {
    return;
  }
  if (EsiUtils.getLoggedUserName() == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  String currentBranch=EsiUtils.getCurrentBranch(primaryProject).getName();
  if (currentBranch.equals(""String_Node_Str"")) {
    currentBranch=""String_Node_Str"";
  }
  Map<String,Pair<EsiUtils.EsiBranchInfo,ObjectNode>> clientBranches=new HashMap<>();
  Map<String,ObjectNode> serverBranches=new HashMap<>();
  if (progressStatus != null) {
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setIndeterminate(true);
  }
  Collection<EsiUtils.EsiBranchInfo> targetBranches=null;
  if (allBranches) {
    try {
      ProjectDescriptor projectDescriptor=ProjectDescriptorsFactory.createAnyRemoteProjectDescriptor(project);
      targetBranches=EsiUtils.getBranches(projectDescriptor);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (targetBranches == null || targetBranches.isEmpty()) {
      return;
    }
  }
 else {
    targetBranches=new ArrayList<>(1);
    targetBranches.add(EsiUtils.getCurrentBranch(primaryProject));
  }
  for (  EsiUtils.EsiBranchInfo branch : targetBranches) {
    ObjectNode branchJson=getRefObjectNode(project,branch,true);
    JsonNode value;
    String entryKey;
    if ((value=branchJson.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
      entryKey=branchJson.get(MDKConstants.ID_KEY).asText();
      if (allBranches || entryKey.equals(currentBranch)) {
        clientBranches.put(entryKey,new Pair<>(branch,branchJson));
      }
    }
  }
  if (progressStatus != null) {
    progressStatus.setDescription(""String_Node_Str"");
  }
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsUri(project);
  if (requestUri == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (!allBranches) {
    requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + currentBranch);
  }
  try {
    HttpRequestBase request=MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri);
    ObjectNode response=JacksonUtils.parseJsonObject(MMSUtils.sendMMSRequest(project,request));
    JsonNode refsArray, value;
    if ((refsArray=response.get(""String_Node_Str"")) != null && refsArray.isArray()) {
      for (      JsonNode refJson : refsArray) {
        if (refJson.isObject()) {
          String entryKey;
          if ((value=refJson.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
            entryKey=refJson.get(MDKConstants.ID_KEY).asText();
            if (allBranches || entryKey.equals(currentBranch)) {
              serverBranches.put(entryKey,(ObjectNode)refJson);
            }
          }
        }
      }
    }
  }
 catch (  IOException|URISyntaxException|ServerException e) {
    e.printStackTrace();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    return;
  }
  Set<String> keySet=new HashSet<>();
  keySet.addAll(clientBranches.keySet());
  keySet.addAll(serverBranches.keySet());
  if (progressStatus != null) {
    progressStatus.setDescription(""String_Node_Str"" + keySet.size() + ""String_Node_Str""+ (keySet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str""));
    progressStatus.setIndeterminate(false);
    progressStatus.setMax(keySet.size());
    progressStatus.setCurrent(0);
  }
  for (  String key : keySet) {
    if (key.equals(""String_Node_Str"")) {
      continue;
    }
    Pair<EsiUtils.EsiBranchInfo,ObjectNode> clientBranch=clientBranches.get(key);
    ObjectNode serverBranch=serverBranches.get(key);
    if (clientBranch == null) {
    }
 else     if (serverBranch == null) {
      ValidationRuleViolation v=new ValidationRuleViolation(project.getPrimaryModel(),""String_Node_Str"" + key + ""String_Node_Str"");
      v.addAction(new CommitBranchAction(key,project,clientBranch.getKey(),false,false));
      v.addAction(new CommitBranchAction(key,project,clientBranch.getKey(),true,false));
      mmsMissingBranchValidationRule.addViolation(v);
    }
 else {
      JsonNode diff=JsonDiffFunction.getInstance().apply(clientBranch.getValue(),serverBranch);
      if (JsonPatchUtils.isEqual(diff)) {
        continue;
      }
      ValidationRuleViolation v=new ValidationRuleViolation(project.getPrimaryModel(),""String_Node_Str"" + key + ""String_Node_Str"");
      v.addAction(new CommitBranchAction(key,project,clientBranch.getKey(),false,true));
      v.addAction(new CommitBranchAction(key,project,clientBranch.getKey(),true,true));
      branchEquivalenceValidationRule.addViolation(v);
    }
    if (progressStatus != null) {
      progressStatus.increase();
    }
  }
}","public void validate(ProgressStatus progressStatus,boolean allBranches){
  IPrimaryProject primaryProject=project.getPrimaryProject();
  if (!ProjectUtilities.isRemote(primaryProject)) {
    return;
  }
  if (EsiUtils.getLoggedUserName() == null) {
    errors=true;
    Utils.guilog(""String_Node_Str"");
    return;
  }
  String currentBranch=EsiUtils.getCurrentBranch(primaryProject).getName();
  if (currentBranch.equals(""String_Node_Str"")) {
    currentBranch=""String_Node_Str"";
  }
  Map<String,Pair<EsiUtils.EsiBranchInfo,ObjectNode>> clientBranches=new HashMap<>();
  Map<String,ObjectNode> serverBranches=new HashMap<>();
  if (progressStatus != null) {
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setIndeterminate(true);
  }
  Collection<EsiUtils.EsiBranchInfo> targetBranches=null;
  if (allBranches) {
    try {
      ProjectDescriptor projectDescriptor=ProjectDescriptorsFactory.createAnyRemoteProjectDescriptor(project);
      targetBranches=EsiUtils.getBranches(projectDescriptor);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (targetBranches == null || targetBranches.isEmpty()) {
      return;
    }
  }
 else {
    targetBranches=new ArrayList<>(1);
    targetBranches.add(EsiUtils.getCurrentBranch(primaryProject));
  }
  for (  EsiUtils.EsiBranchInfo branch : targetBranches) {
    ObjectNode branchJson=getRefObjectNode(project,branch,true);
    JsonNode value;
    String entryKey;
    if ((value=branchJson.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
      entryKey=branchJson.get(MDKConstants.ID_KEY).asText();
      if (allBranches || entryKey.equals(currentBranch)) {
        clientBranches.put(entryKey,new Pair<>(branch,branchJson));
      }
    }
  }
  if (progressStatus != null) {
    progressStatus.setDescription(""String_Node_Str"");
  }
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsUri(project);
  if (requestUri == null) {
    errors=true;
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (!allBranches) {
    requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + currentBranch);
  }
  try {
    HttpRequestBase request=MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri);
    ObjectNode response=JacksonUtils.parseJsonObject(MMSUtils.sendMMSRequest(project,request));
    JsonNode refsArray, value;
    if ((refsArray=response.get(""String_Node_Str"")) != null && refsArray.isArray()) {
      for (      JsonNode refJson : refsArray) {
        if (refJson.isObject()) {
          String entryKey;
          if ((value=refJson.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
            entryKey=refJson.get(MDKConstants.ID_KEY).asText();
            if (allBranches || entryKey.equals(currentBranch)) {
              serverBranches.put(entryKey,(ObjectNode)refJson);
            }
          }
        }
      }
    }
  }
 catch (  IOException|URISyntaxException|ServerException e) {
    errors=true;
    e.printStackTrace();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    return;
  }
  Set<String> keySet=new HashSet<>();
  keySet.addAll(clientBranches.keySet());
  keySet.addAll(serverBranches.keySet());
  if (progressStatus != null) {
    progressStatus.setDescription(""String_Node_Str"" + keySet.size() + ""String_Node_Str""+ (keySet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str""));
    progressStatus.setIndeterminate(false);
    progressStatus.setMax(keySet.size());
    progressStatus.setCurrent(0);
  }
  for (  String key : keySet) {
    if (key.equals(""String_Node_Str"")) {
      continue;
    }
    Pair<EsiUtils.EsiBranchInfo,ObjectNode> clientBranch=clientBranches.get(key);
    ObjectNode serverBranch=serverBranches.get(key);
    if (clientBranch == null) {
    }
 else     if (serverBranch == null) {
      ValidationRuleViolation v=new ValidationRuleViolation(project.getPrimaryModel(),""String_Node_Str"" + key + ""String_Node_Str"");
      v.addAction(new CommitBranchAction(key,project,clientBranch.getKey(),false,false));
      v.addAction(new CommitBranchAction(key,project,clientBranch.getKey(),true,false));
      mmsMissingBranchValidationRule.addViolation(v);
    }
 else {
      JsonNode diff=JsonDiffFunction.getInstance().apply(clientBranch.getValue(),serverBranch);
      if (JsonPatchUtils.isEqual(diff)) {
        continue;
      }
      ValidationRuleViolation v=new ValidationRuleViolation(project.getPrimaryModel(),""String_Node_Str"" + key + ""String_Node_Str"");
      v.addAction(new CommitBranchAction(key,project,clientBranch.getKey(),false,true));
      v.addAction(new CommitBranchAction(key,project,clientBranch.getKey(),true,true));
      branchEquivalenceValidationRule.addViolation(v);
    }
    if (progressStatus != null) {
      progressStatus.increase();
    }
  }
}",0.9887221934816348
88557,"public void validate(){
  Project project=Application.getInstance().getProject();
  URIBuilder requestUri=MMSUtils.getServiceProjectsUri(project);
  if (requestUri == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + Converters.getProjectToIdConverter().apply(project));
  ObjectNode response;
  try {
    response=JacksonUtils.parseJsonObject(MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri)));
  }
 catch (  IOException|ServerException|URISyntaxException e) {
    e.printStackTrace();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    return;
  }
  JsonNode projectsJson;
  if ((projectsJson=response.get(""String_Node_Str"")) != null && projectsJson.isArray()) {
    JsonNode value;
    for (    JsonNode projectJson : projectsJson) {
      if ((value=projectJson.get(MDKConstants.ID_KEY)) != null && value.isTextual() && value.asText().equals(Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()))) {
        return;
      }
    }
  }
  ValidationRuleViolation v;
  if (!project.isRemote() || EsiUtils.getCurrentBranch(project.getPrimaryProject()).getName().equals(""String_Node_Str"")) {
    v=new ValidationRuleViolation(project.getPrimaryModel(),""String_Node_Str"");
    v.addAction(new CommitProjectAction(project,true));
  }
 else {
    v=new ValidationRuleViolation(project.getPrimaryModel(),""String_Node_Str"");
  }
  projectExistenceValidationRule.addViolation(v);
}","public void validate(){
  URIBuilder requestUri=MMSUtils.getServiceProjectsUri(project);
  if (requestUri == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    errors=true;
    return;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + Converters.getProjectToIdConverter().apply(project));
  ObjectNode response;
  try {
    response=JacksonUtils.parseJsonObject(MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri)));
  }
 catch (  IOException|ServerException|URISyntaxException e) {
    errors=true;
    e.printStackTrace();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    return;
  }
  JsonNode projectsJson;
  if ((projectsJson=response.get(""String_Node_Str"")) != null && projectsJson.isArray()) {
    JsonNode value;
    for (    JsonNode projectJson : projectsJson) {
      if ((value=projectJson.get(MDKConstants.ID_KEY)) != null && value.isTextual() && value.asText().equals(Converters.getIProjectToIdConverter().apply(project.getPrimaryProject()))) {
        return;
      }
    }
  }
  ValidationRuleViolation v;
  if (!project.isRemote() || EsiUtils.getCurrentBranch(project.getPrimaryProject()).getName().equals(""String_Node_Str"")) {
    v=new ValidationRuleViolation(project.getPrimaryModel(),""String_Node_Str"");
    v.addAction(new CommitProjectAction(project,true));
  }
 else {
    v=new ValidationRuleViolation(project.getPrimaryModel(),""String_Node_Str"");
  }
  projectExistenceValidationRule.addViolation(v);
}",0.9706257982120052
88558,"@Override public void init(){
  getVersion();
  ActionsConfiguratorsManager acm=ActionsConfiguratorsManager.getInstance();
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  MDKConfigurator mdkConfigurator=new MDKConfigurator();
  acm.addContainmentBrowserContextConfigurator(mdkConfigurator);
  acm.addSearchBrowserContextConfigurator(mdkConfigurator);
  acm.addBaseDiagramContextConfigurator(DiagramTypeConstants.UML_ANY_DIAGRAM,mdkConfigurator);
  acm.addMainMenuConfigurator(new MMSConfigurator());
  EvaluationConfigurator.getInstance().registerBinaryImplementers(MDKPlugin.class.getClassLoader());
  SRConfigurator srconfig=new SRConfigurator();
  acm.addSearchBrowserContextConfigurator(srconfig);
  acm.addContainmentBrowserContextConfigurator(srconfig);
  acm.addBaseDiagramContextConfigurator(DiagramTypeConstants.UML_ANY_DIAGRAM,srconfig);
  acm.addMainToolbarConfigurator(new OutputQueueStatusConfigurator());
  acm.addMainToolbarConfigurator(new SyncStatusConfigurator());
  getOclPlugin().init();
  getVcPlugin().init();
  MMSSyncPlugin.getInstance().init();
  (new Thread(new OutputSyncRunner())).start();
  loadExtensionJars();
  configureEnvironmentOptions();
}","@Override public void init(){
  getVersion();
  ActionsConfiguratorsManager acm=ActionsConfiguratorsManager.getInstance();
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (MDUtils.isDeveloperMode()) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  MDKConfigurator mdkConfigurator=new MDKConfigurator();
  acm.addContainmentBrowserContextConfigurator(mdkConfigurator);
  acm.addSearchBrowserContextConfigurator(mdkConfigurator);
  acm.addBaseDiagramContextConfigurator(DiagramTypeConstants.UML_ANY_DIAGRAM,mdkConfigurator);
  acm.addMainMenuConfigurator(new MMSConfigurator());
  EvaluationConfigurator.getInstance().registerBinaryImplementers(MDKPlugin.class.getClassLoader());
  SRConfigurator srconfig=new SRConfigurator();
  acm.addSearchBrowserContextConfigurator(srconfig);
  acm.addContainmentBrowserContextConfigurator(srconfig);
  acm.addBaseDiagramContextConfigurator(DiagramTypeConstants.UML_ANY_DIAGRAM,srconfig);
  acm.addMainToolbarConfigurator(new OutputQueueStatusConfigurator());
  acm.addMainToolbarConfigurator(new SyncStatusConfigurator());
  getOclPlugin().init();
  getVcPlugin().init();
  MMSSyncPlugin.getInstance().init();
  (new Thread(new OutputSyncRunner())).start();
  loadExtensionJars();
  configureEnvironmentOptions();
}",0.9145496535796768
88559,"/** 
 * General purpose method for sending a constructed http request via http client.
 * @param request
 * @return
 * @throws IOException
 * @throws ServerException
 */
public static JsonParser sendMMSRequest(Project project,HttpRequestBase request) throws IOException, ServerException, URISyntaxException {
  File targetFile=File.createTempFile(""String_Node_Str"",null);
  targetFile.deleteOnExit();
  HttpEntityEnclosingRequest httpEntityEnclosingRequest=null;
  boolean logBody=MDKOptionsGroup.getMDKOptions().isLogJson();
  logBody=logBody && request instanceof HttpEntityEnclosingRequest;
  logBody=logBody && ((httpEntityEnclosingRequest=(HttpEntityEnclosingRequest)request).getEntity() != null);
  logBody=logBody && httpEntityEnclosingRequest.getEntity().isRepeatable();
  System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString());
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent();OutputStream outputStream=new FileOutputStream(targetFile)){
    int responseCode=response.getStatusLine().getStatusCode();
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString()+ ""String_Node_Str""+ responseCode);
    boolean throwServerException=false;
    if (responseCode == HttpURLConnection.HTTP_OK || (request.getMethod().equals(""String_Node_Str"") && responseCode == HttpURLConnection.HTTP_NOT_FOUND && responseType.equals(""String_Node_Str""))) {
    }
 else     if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {
      Utils.guilog(""String_Node_Str"" + responseCode);
      MMSLogoutAction.logoutAction(project);
      if (MMSLoginAction.loginAction(project)) {
        URIBuilder newRequestUri=new URIBuilder(request.getURI());
        newRequestUri.setParameter(""String_Node_Str"",TicketUtils.getTicket(project));
        request.setURI(newRequestUri.build());
        return sendMMSRequest(project,request);
      }
 else {
        throwServerException=true;
      }
    }
 else {
      Utils.guilog(""String_Node_Str"" + responseCode);
      throwServerException=true;
    }
    if (inputStream != null && responseType.equals(""String_Node_Str"")) {
      byte[] buffer=new byte[8 * 1024];
      int bytesRead;
      while ((bytesRead=inputStream.read(buffer)) != -1) {
        outputStream.write(buffer,0,bytesRead);
      }
      JsonFactory jasonFactory=JacksonUtils.getJsonFactory();
      JsonParser jsonParser=jasonFactory.createParser(targetFile);
      while (jsonParser.nextFieldName() != null && !jsonParser.nextFieldName().equals(""String_Node_Str"")) {
      }
      if (jsonParser.getCurrentToken() == JsonToken.FIELD_NAME) {
        jsonParser.nextToken();
        Application.getInstance().getGUILog().log(""String_Node_Str"" + jsonParser.getText());
      }
    }
    if (throwServerException) {
      Utils.showPopupMessage(""String_Node_Str"");
      throw new ServerException((inputStream != null ? inputStream.toString() : ""String_Node_Str""),responseCode);
    }
  }
   JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(targetFile);
  jsonParser.nextToken();
  return jsonParser;
}","/** 
 * General purpose method for sending a constructed http request via http client.
 * @param request
 * @return
 * @throws IOException
 * @throws ServerException
 */
public static JsonParser sendMMSRequest(Project project,HttpRequestBase request) throws IOException, ServerException, URISyntaxException {
  File targetFile=File.createTempFile(""String_Node_Str"",null);
  targetFile.deleteOnExit();
  HttpEntityEnclosingRequest httpEntityEnclosingRequest=null;
  boolean logBody=MDKOptionsGroup.getMDKOptions().isLogJson();
  logBody=logBody && request instanceof HttpEntityEnclosingRequest;
  logBody=logBody && ((httpEntityEnclosingRequest=(HttpEntityEnclosingRequest)request).getEntity() != null);
  logBody=logBody && httpEntityEnclosingRequest.getEntity().isRepeatable();
  System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString());
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent();OutputStream outputStream=new FileOutputStream(targetFile)){
    int responseCode=response.getStatusLine().getStatusCode();
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + request.getMethod() + ""String_Node_Str""+ request.getURI().toString()+ ""String_Node_Str""+ responseCode);
    boolean throwServerException=false;
    if (responseCode == HttpURLConnection.HTTP_OK || (request.getMethod().equals(""String_Node_Str"") && responseCode == HttpURLConnection.HTTP_NOT_FOUND && responseType.equals(""String_Node_Str""))) {
    }
 else     if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {
      Utils.guilog(""String_Node_Str"" + responseCode);
      MMSLogoutAction.logoutAction(project);
      throwServerException=true;
    }
 else {
      Utils.guilog(""String_Node_Str"" + responseCode);
      throwServerException=true;
    }
    if (inputStream != null && responseType.equals(""String_Node_Str"")) {
      byte[] buffer=new byte[8 * 1024];
      int bytesRead;
      while ((bytesRead=inputStream.read(buffer)) != -1) {
        outputStream.write(buffer,0,bytesRead);
      }
      JsonFactory jasonFactory=JacksonUtils.getJsonFactory();
      JsonParser jsonParser=jasonFactory.createParser(targetFile);
      while (jsonParser.nextFieldName() != null && !jsonParser.nextFieldName().equals(""String_Node_Str"")) {
      }
      if (jsonParser.getCurrentToken() == JsonToken.FIELD_NAME) {
        jsonParser.nextToken();
        Application.getInstance().getGUILog().log(""String_Node_Str"" + jsonParser.getText());
      }
    }
    if (throwServerException) {
      Utils.showPopupMessage(""String_Node_Str"");
      throw new ServerException((inputStream != null ? inputStream.toString() : ""String_Node_Str""),responseCode);
    }
  }
   JsonParser jsonParser=JacksonUtils.getJsonFactory().createParser(targetFile);
  jsonParser.nextToken();
  return jsonParser;
}",0.95011583011583
88560,"public static File createEntityFile(Class<?> clazz,ContentType contentType,Collection nodes,JsonBlobType jsonBlobType) throws IOException {
  File file=File.createTempFile(clazz.getSimpleName() + ""String_Node_Str"" + contentType.getMimeType().replace('/','.'),null);
  file.deleteOnExit();
  String arrayName=""String_Node_Str"";
  if (jsonBlobType == JsonBlobType.PROJECT) {
    arrayName=""String_Node_Str"";
  }
 else   if (jsonBlobType == JsonBlobType.REF) {
    arrayName=""String_Node_Str"";
  }
  FileOutputStream outputStream=new FileOutputStream(file);
  JsonGenerator jsonGenerator=JacksonUtils.getJsonFactory().createGenerator(outputStream);
  jsonGenerator.writeStartObject();
  jsonGenerator.writeArrayFieldStart(arrayName);
  for (  Object node : nodes) {
    if (node instanceof ObjectNode && jsonBlobType == JsonBlobType.ELEMENT_JSON || jsonBlobType == JsonBlobType.ORG || jsonBlobType == JsonBlobType.PROJECT || jsonBlobType == JsonBlobType.REF) {
      jsonGenerator.writeObject(node);
    }
 else     if (node instanceof String && jsonBlobType == JsonBlobType.ELEMENT_ID) {
      jsonGenerator.writeStartObject();
      jsonGenerator.writeStringField(MDKConstants.ID_KEY,(String)node);
      jsonGenerator.writeEndObject();
    }
 else {
      throw new IOException(""String_Node_Str"");
    }
  }
  jsonGenerator.writeEndArray();
  jsonGenerator.writeStringField(""String_Node_Str"",""String_Node_Str"");
  jsonGenerator.writeStringField(""String_Node_Str"",MDKPlugin.VERSION);
  jsonGenerator.writeEndObject();
  jsonGenerator.close();
  return file;
}","public static File createEntityFile(Class<?> clazz,ContentType contentType,Collection nodes,JsonBlobType jsonBlobType) throws IOException {
  File file=File.createTempFile(clazz.getSimpleName() + ""String_Node_Str"" + contentType.getMimeType().replace('/','-')+ ""String_Node_Str"",null);
  file.deleteOnExit();
  String arrayName=""String_Node_Str"";
  if (jsonBlobType == JsonBlobType.PROJECT) {
    arrayName=""String_Node_Str"";
  }
 else   if (jsonBlobType == JsonBlobType.REF) {
    arrayName=""String_Node_Str"";
  }
  try (FileOutputStream outputStream=new FileOutputStream(file);JsonGenerator jsonGenerator=JacksonUtils.getJsonFactory().createGenerator(outputStream)){
    jsonGenerator.writeStartObject();
    jsonGenerator.writeArrayFieldStart(arrayName);
    for (    Object node : nodes) {
      if (node instanceof ObjectNode && jsonBlobType == JsonBlobType.ELEMENT_JSON || jsonBlobType == JsonBlobType.ORG || jsonBlobType == JsonBlobType.PROJECT || jsonBlobType == JsonBlobType.REF) {
        jsonGenerator.writeObject(node);
      }
 else       if (node instanceof String && jsonBlobType == JsonBlobType.ELEMENT_ID) {
        jsonGenerator.writeStartObject();
        jsonGenerator.writeStringField(MDKConstants.ID_KEY,(String)node);
        jsonGenerator.writeEndObject();
      }
 else {
        throw new IOException(""String_Node_Str"");
      }
    }
    jsonGenerator.writeEndArray();
    jsonGenerator.writeStringField(""String_Node_Str"",""String_Node_Str"");
    jsonGenerator.writeStringField(""String_Node_Str"",MDKPlugin.VERSION);
    jsonGenerator.writeEndObject();
  }
   System.out.println(file.getPath());
  return file;
}",0.952410770194114
88561,"private static void collectClientElementsRecursively(Project project,Element element,int depth,List<Pair<Element,ObjectNode>> elements){
  ObjectNode jsonObject=Converters.getElementToJsonConverter().apply(element,project);
  if (jsonObject == null) {
    return;
  }
  elements.add(new Pair<>(element,jsonObject));
  if (depth != 0) {
    for (    Element elementChild : element.getOwnedElement()) {
      collectClientElementsRecursively(project,elementChild,--depth,elements);
    }
  }
  if (element.equals(project.getPrimaryModel())) {
    List<Package> attachedModels=project.getModels();
    attachedModels.remove(project.getPrimaryModel());
    attachedModels.forEach(attachedModel -> collectClientElementsRecursively(project,attachedModel,0,elements));
  }
}","private static void collectClientElementsRecursively(Project project,Element element,int depth,List<Pair<Element,ObjectNode>> elements){
  ObjectNode jsonObject=Converters.getElementToJsonConverter().apply(element,project);
  if (jsonObject == null) {
    return;
  }
  elements.add(new Pair<>(element,jsonObject));
  if (depth-- != 0) {
    for (    Element elementChild : element.getOwnedElement()) {
      collectClientElementsRecursively(project,elementChild,depth,elements);
    }
  }
  if (element.equals(project.getPrimaryModel())) {
    List<Package> attachedModels=project.getModels();
    attachedModels.remove(project.getPrimaryModel());
    attachedModels.forEach(attachedModel -> collectClientElementsRecursively(project,attachedModel,0,elements));
  }
}",0.997392438070404
88562,"private void addElementActions(ActionsManager manager,Element e,List<Element> es){
  Project project=Project.getProject(e);
  if (project == null && !es.isEmpty()) {
    project=Project.getProject(es.iterator().next());
  }
  if (project == null) {
    return;
  }
  Stereotype sysmlview=Utils.getViewStereotype(project);
  Stereotype sysmlviewpoint=Utils.getViewpointStereotype(project);
  Stereotype documentView=Utils.getProductStereotype(project);
  Stereotype classview=Utils.getViewClassStereotype(project);
  Stereotype elementGroupStereotype=Utils.getElementGroupStereotype(project);
  ActionsCategory refactorWithIDActionCat=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
  if (e instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Class & !(e instanceof com.nomagic.uml2.ext.magicdraw.components.mdbasiccomponents.Component)) {
    if (manager.getActionFor(ClassToComponentRefactorWithIDAction.DEFAULT_ID) == null) {
      refactorWithIDActionCat.addAction(new ClassToComponentRefactorWithIDAction(es));
    }
  }
  if (e instanceof com.nomagic.uml2.ext.magicdraw.components.mdbasiccomponents.Component) {
    if (manager.getActionFor(ComponentToClassRefactorWithIDAction.DEFAULT_ID) == null) {
      refactorWithIDActionCat.addAction(new ComponentToClassRefactorWithIDAction(es));
    }
  }
  ActionsCategory modelLoad=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
  if (TicketUtils.isTicketSet(project) && !MMSAction.isDisabled()) {
    ActionsCategory models=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad);
    if (MDUtils.isDeveloperMode()) {
      if (e instanceof Model && manager.getActionFor(CommitProjectAction.DEFAULT_ID) == null) {
        models.addAction(new CommitProjectAction(project,false,true));
        models.addAction(new CommitProjectAction(project,true,true));
      }
    }
    if (manager.getActionFor(ValidateModelAction.DEFAULT_ID) == null) {
      models.addAction(new ValidateModelAction(es,(project.getPrimaryModel() == e) ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    if (manager.getActionFor(ValidateElementAction.DEFAULT_ID) == null) {
      models.addAction(new ValidateElementAction(es,(project.getPrimaryModel() == e) ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    if (manager.getActionFor(ValidateElementDepthAction.DEFAULT_ID) == null) {
      models.addAction(new ValidateElementDepthAction(es,(project.getPrimaryModel() == e) ? ""String_Node_Str"" : ""String_Node_Str""));
    }
  }
 else {
    ActionsCategory login=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad);
    if (manager.getActionFor(MMSLoginAction.DEFAULT_ID) == null) {
      login.addAction(new MMSLoginAction());
    }
  }
  ActionsStateUpdater.updateActionsState();
  if (StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.validationScriptStereotype)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    UserScript us=new UserScript();
    us.setDgElement(e);
    List<Element> targets=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.queriesStereotype,1,false,1);
    targets.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.oldQueriesStereotype,1,false,1));
    us.setTargets(Utils2.asList(targets,Object.class));
    if (manager.getActionFor(RunUserValidationScriptAction.DEFAULT_ID) == null) {
      c.addAction(new RunUserValidationScriptAction(us,true));
    }
  }
 else   if (StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.userScriptStereotype)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    UserScript us=new UserScript();
    us.setDgElement(e);
    List<Element> targets=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.queriesStereotype,1,false,1);
    targets.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.oldQueriesStereotype,1,false,1));
    us.setTargets(Utils2.asList(targets,Object.class));
    if (manager.getActionFor(RunUserScriptAction.DEFAULT_ID) == null) {
      c.addAction(new RunUserScriptAction(us,true));
    }
  }
  boolean canShowGeneration=true;
  for (  Element element : es) {
    if (!StereotypesHelper.hasStereotypeOrDerived(element,sysmlview) && !StereotypesHelper.hasStereotypeOrDerived(element,elementGroupStereotype)) {
      canShowGeneration=false;
      break;
    }
  }
  if (canShowGeneration) {
    if (classview != null && es.size() == 1 && StereotypesHelper.hasStereotypeOrDerived(e,sysmlview)) {
      Boolean collectActions=(Boolean)StereotypesHelper.getStereotypePropertyFirst(e,classview,""String_Node_Str"");
      if (collectActions != null && collectActions) {
        ActionsCategory category=(ActionsCategory)manager.getActionFor(""String_Node_Str"");
        if (category == null) {
          category=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
          category.setNested(true);
          boolean added=addViewQueryActions(manager,category,(NamedElement)e);
          if (added) {
            manager.addCategory(0,category);
          }
        }
      }
    }
    ActionsCategory modelLoad2=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    if (TicketUtils.isTicketSet(project) && !MMSAction.isDisabled()) {
      ActionsCategory viewInstances=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad2);
      NMAction action=manager.getActionFor(GenerateViewPresentationAction.DEFAULT_ID);
      if (action == null) {
        viewInstances.addAction(new GenerateViewPresentationAction(es,false));
      }
      action=manager.getActionFor(GenerateViewPresentationAction.RECURSE_DEFAULT_ID);
      if (action == null) {
        viewInstances.addAction(new GenerateViewPresentationAction(es,true));
      }
    }
 else {
      ActionsCategory login=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad);
      if (manager.getActionFor(MMSLoginAction.DEFAULT_ID) == null) {
        login.addAction(new MMSLoginAction());
      }
    }
    if (StereotypesHelper.hasStereotype(Project.getProject(e).getPrimaryModel(),""String_Node_Str"")) {
      ActionsCategory tracingCategory=manager.getCategory(""String_Node_Str"");
      if (tracingCategory != null) {
        NMAction action=manager.getActionFor(MMSViewLinkAction.DEFAULT_ID);
        if (action == null) {
          tracingCategory.addAction(new MMSViewLinkAction(es));
        }
      }
    }
    ActionsStateUpdater.updateActionsState();
  }
  if (e == project.getPrimaryModel()) {
    NMAction act=null;
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    act=manager.getActionFor(ValidateOldDocgen.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ValidateOldDocgen());
    }
  }
  if ((e instanceof Activity && StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.documentStereotype)) || StereotypesHelper.hasStereotypeOrDerived(e,sysmlview)) {
    NMAction act=null;
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    act=manager.getActionFor(ValidateDocument3Action.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ValidateDocument3Action(e));
    }
    act=manager.getActionFor(ValidateViewStructureAction.DEFAULT_ID);
    if (act == null && e instanceof Classifier) {
      c.addAction(new ValidateViewStructureAction(e));
    }
    act=manager.getActionFor(ViewDocument3Action.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ViewDocument3Action(e));
    }
    act=manager.getActionFor(GenerateDocumentAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new GenerateDocumentAction(e));
    }
    if (StereotypesHelper.hasStereotypeOrDerived(e,documentView)) {
      if (e instanceof Package) {
        act=manager.getActionFor(NumberDependencyAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new NumberDependencyAction(e));
        }
        act=manager.getActionFor(MigrateToClassViewAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new MigrateToClassViewAction(e));
        }
      }
      if (e instanceof Class) {
        act=manager.getActionFor(NumberAssociationAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new NumberAssociationAction((Class)e));
        }
      }
    }
  }
  if (StereotypesHelper.hasStereotypeOrDerived(e,sysmlviewpoint)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    NMAction act=manager.getActionFor(InstanceViewpointAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new InstanceViewpointAction(e));
    }
  }
  ArrayList<Property> selectedProperties=new ArrayList<Property>();
  for (  Element el : es) {
    if (el instanceof Property) {
      selectedProperties.add((Property)el);
    }
  }
  if (!(selectedProperties.isEmpty())) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    NMAction act=manager.getActionFor(CreateRestrictedValueAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new CreateRestrictedValueAction(selectedProperties));
    }
  }
}","private void addElementActions(ActionsManager manager,Element e,List<Element> es){
  Project project=Project.getProject(e);
  if (project == null && !es.isEmpty()) {
    project=Project.getProject(es.iterator().next());
  }
  if (project == null) {
    return;
  }
  Stereotype sysmlview=Utils.getViewStereotype(project);
  Stereotype sysmlviewpoint=Utils.getViewpointStereotype(project);
  Stereotype documentView=Utils.getProductStereotype(project);
  Stereotype classview=Utils.getViewClassStereotype(project);
  Stereotype elementGroupStereotype=Utils.getElementGroupStereotype(project);
  ActionsCategory refactorWithIDActionCat=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
  if (e instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Class & !(e instanceof com.nomagic.uml2.ext.magicdraw.components.mdbasiccomponents.Component)) {
    if (manager.getActionFor(ClassToComponentRefactorWithIDAction.DEFAULT_ID) == null) {
      refactorWithIDActionCat.addAction(new ClassToComponentRefactorWithIDAction(es));
    }
  }
  if (e instanceof com.nomagic.uml2.ext.magicdraw.components.mdbasiccomponents.Component) {
    if (manager.getActionFor(ComponentToClassRefactorWithIDAction.DEFAULT_ID) == null) {
      refactorWithIDActionCat.addAction(new ComponentToClassRefactorWithIDAction(es));
    }
  }
  ActionsCategory modelLoad=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
  if (!TicketUtils.isTicketSet(project)) {
    ActionsCategory login=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad);
    if (manager.getActionFor(MMSLoginAction.DEFAULT_ID) == null) {
      login.addAction(new MMSLoginAction());
    }
  }
  ActionsCategory models=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad);
  if (MDUtils.isDeveloperMode()) {
    if (e instanceof Model && manager.getActionFor(CommitProjectAction.DEFAULT_ID) == null) {
      models.addAction(new CommitProjectAction(project,false,true));
      models.addAction(new CommitProjectAction(project,true,true));
    }
  }
  if (manager.getActionFor(ValidateModelAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateModelAction(es,""String_Node_Str""));
  }
  if (manager.getActionFor(ValidateElementDepthAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateElementDepthAction(es,""String_Node_Str""));
  }
  if (manager.getActionFor(ValidateElementAction.DEFAULT_ID) == null) {
    models.addAction(new ValidateElementAction(es,""String_Node_Str""));
  }
  ActionsStateUpdater.updateActionsState();
  if (StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.validationScriptStereotype)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    UserScript us=new UserScript();
    us.setDgElement(e);
    List<Element> targets=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.queriesStereotype,1,false,1);
    targets.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.oldQueriesStereotype,1,false,1));
    us.setTargets(Utils2.asList(targets,Object.class));
    if (manager.getActionFor(RunUserValidationScriptAction.DEFAULT_ID) == null) {
      c.addAction(new RunUserValidationScriptAction(us,true));
    }
  }
 else   if (StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.userScriptStereotype)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    UserScript us=new UserScript();
    us.setDgElement(e);
    List<Element> targets=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.queriesStereotype,1,false,1);
    targets.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(e,DocGenProfile.oldQueriesStereotype,1,false,1));
    us.setTargets(Utils2.asList(targets,Object.class));
    if (manager.getActionFor(RunUserScriptAction.DEFAULT_ID) == null) {
      c.addAction(new RunUserScriptAction(us,true));
    }
  }
  boolean canShowGeneration=true;
  for (  Element element : es) {
    if (!StereotypesHelper.hasStereotypeOrDerived(element,sysmlview) && !StereotypesHelper.hasStereotypeOrDerived(element,elementGroupStereotype)) {
      canShowGeneration=false;
      break;
    }
  }
  if (canShowGeneration) {
    if (classview != null && es.size() == 1 && StereotypesHelper.hasStereotypeOrDerived(e,sysmlview)) {
      Boolean collectActions=(Boolean)StereotypesHelper.getStereotypePropertyFirst(e,classview,""String_Node_Str"");
      if (collectActions != null && collectActions) {
        ActionsCategory category=(ActionsCategory)manager.getActionFor(""String_Node_Str"");
        if (category == null) {
          category=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
          category.setNested(true);
          boolean added=addViewQueryActions(manager,category,(NamedElement)e);
          if (added) {
            manager.addCategory(0,category);
          }
        }
      }
    }
    ActionsCategory modelLoad2=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    ActionsCategory viewInstances=getCategory(manager,""String_Node_Str"",""String_Node_Str"",modelLoad2);
    NMAction action=manager.getActionFor(GenerateViewPresentationAction.DEFAULT_ID);
    if (action == null) {
      viewInstances.addAction(new GenerateViewPresentationAction(es,false));
    }
    action=manager.getActionFor(GenerateViewPresentationAction.RECURSE_DEFAULT_ID);
    if (action == null) {
      viewInstances.addAction(new GenerateViewPresentationAction(es,true));
    }
    String url;
    if (StereotypesHelper.hasStereotype(project.getPrimaryModel(),""String_Node_Str"") && (url=(String)StereotypesHelper.getStereotypePropertyFirst(project.getPrimaryModel(),""String_Node_Str"",""String_Node_Str"")) != null && !url.isEmpty()) {
      ActionsCategory tracingCategory=manager.getCategory(""String_Node_Str"");
      if (tracingCategory != null) {
        action=manager.getActionFor(MMSViewLinkAction.DEFAULT_ID);
        if (action == null) {
          tracingCategory.addAction(new MMSViewLinkAction(es));
        }
      }
    }
    ActionsStateUpdater.updateActionsState();
  }
  if (e == project.getPrimaryModel()) {
    NMAction act=null;
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    act=manager.getActionFor(ValidateOldDocgen.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ValidateOldDocgen());
    }
  }
  if ((e instanceof Activity && StereotypesHelper.hasStereotypeOrDerived(e,DocGenProfile.documentStereotype)) || StereotypesHelper.hasStereotypeOrDerived(e,sysmlview)) {
    NMAction act=null;
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    act=manager.getActionFor(ValidateDocument3Action.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ValidateDocument3Action(e));
    }
    act=manager.getActionFor(ValidateViewStructureAction.DEFAULT_ID);
    if (act == null && e instanceof Classifier) {
      c.addAction(new ValidateViewStructureAction(e));
    }
    act=manager.getActionFor(ViewDocument3Action.DEFAULT_ID);
    if (act == null) {
      c.addAction(new ViewDocument3Action(e));
    }
    act=manager.getActionFor(GenerateDocumentAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new GenerateDocumentAction(e));
    }
    if (StereotypesHelper.hasStereotypeOrDerived(e,documentView)) {
      if (e instanceof Package) {
        act=manager.getActionFor(NumberDependencyAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new NumberDependencyAction(e));
        }
        act=manager.getActionFor(MigrateToClassViewAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new MigrateToClassViewAction(e));
        }
      }
      if (e instanceof Class) {
        act=manager.getActionFor(NumberAssociationAction.DEFAULT_ID);
        if (act == null) {
          c.addAction(new NumberAssociationAction((Class)e));
        }
      }
    }
  }
  if (StereotypesHelper.hasStereotypeOrDerived(e,sysmlviewpoint)) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    NMAction act=manager.getActionFor(InstanceViewpointAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new InstanceViewpointAction(e));
    }
  }
  ArrayList<Property> selectedProperties=new ArrayList<Property>();
  for (  Element el : es) {
    if (el instanceof Property) {
      selectedProperties.add((Property)el);
    }
  }
  if (!(selectedProperties.isEmpty())) {
    ActionsCategory c=myCategory(manager,""String_Node_Str"",""String_Node_Str"");
    NMAction act=manager.getActionFor(CreateRestrictedValueAction.DEFAULT_ID);
    if (act == null) {
      c.addAction(new CreateRestrictedValueAction(selectedProperties));
    }
  }
}",0.6940214957456337
88563,"@Override public void configure(ActionsManager manager){
  NMAction category=manager.getActionFor(""String_Node_Str"");
  if (category == null) {
    category=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
  }
  ((ActionsCategory)category).setNested(true);
  manager.addCategory((ActionsCategory)category);
  MMSLoginAction login=new MMSLoginAction();
  category.addAction(login);
  MMSLogoutAction logout=new MMSLogoutAction();
  category.addAction(logout);
  GenerateAllDocumentsAction uada=new GenerateAllDocumentsAction();
  category.addAction(uada);
  if (MDKOptionsGroup.getMDKOptions().isMDKAdvancedOptions()) {
    MDActionsCategory validateCategory=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
    validateCategory.setNested(true);
    category.addAction(validateCategory);
    validateCategory.addAction(new ValidateBranchesAction());
  }
}","@Override public void configure(ActionsManager manager){
  NMAction category=manager.getActionFor(""String_Node_Str"");
  if (category == null) {
    category=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
  }
  ((ActionsCategory)category).setNested(true);
  manager.addCategory((ActionsCategory)category);
  MMSLoginAction mmsLoginAction=new MMSLoginAction();
  category.addAction(mmsLoginAction);
  MMSLogoutAction mmsLogoutAction=new MMSLogoutAction();
  category.addAction(mmsLogoutAction);
  GenerateAllDocumentsAction generateAllDocumentsAction=new GenerateAllDocumentsAction();
  category.addAction(generateAllDocumentsAction);
  if (MDKOptionsGroup.getMDKOptions().isMDKAdvancedOptions()) {
    MDActionsCategory validateCategory=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
    validateCategory.setNested(true);
    category.addAction(validateCategory);
    ValidateBranchesAction validateBranchesAction=new ValidateBranchesAction();
    validateCategory.addAction(validateBranchesAction);
  }
}",0.8625393494228751
88564,"public static File createEntityFile(Class<?> clazz,ContentType contentType,Collection nodes,JsonBlobType jsonBlobType) throws IOException {
  File file=File.createTempFile(clazz.getSimpleName() + ""String_Node_Str"" + contentType.getMimeType().replace('/','-')+ ""String_Node_Str"",null);
  file.deleteOnExit();
  String arrayName=""String_Node_Str"";
  if (jsonBlobType == JsonBlobType.PROJECT) {
    arrayName=""String_Node_Str"";
  }
 else   if (jsonBlobType == JsonBlobType.REF) {
    arrayName=""String_Node_Str"";
  }
  try (FileOutputStream outputStream=new FileOutputStream(file);JsonGenerator jsonGenerator=JacksonUtils.getJsonFactory().createGenerator(outputStream)){
    jsonGenerator.writeStartObject();
    jsonGenerator.writeArrayFieldStart(arrayName);
    for (    Object node : nodes) {
      if (node instanceof ObjectNode && jsonBlobType == JsonBlobType.ELEMENT_JSON || jsonBlobType == JsonBlobType.ORG || jsonBlobType == JsonBlobType.PROJECT || jsonBlobType == JsonBlobType.REF) {
        jsonGenerator.writeObject(node);
      }
 else       if (node instanceof String && jsonBlobType == JsonBlobType.ELEMENT_ID) {
        jsonGenerator.writeStartObject();
        jsonGenerator.writeStringField(MDKConstants.ID_KEY,(String)node);
        jsonGenerator.writeEndObject();
      }
 else {
        throw new IOException(""String_Node_Str"");
      }
    }
    jsonGenerator.writeEndArray();
    jsonGenerator.writeStringField(""String_Node_Str"",""String_Node_Str"");
    jsonGenerator.writeStringField(""String_Node_Str"",MDKPlugin.VERSION);
    jsonGenerator.writeEndObject();
  }
   System.out.println(""String_Node_Str"" + file.getPath());
  return file;
}","public static File createEntityFile(Class<?> clazz,ContentType contentType,Collection nodes,JsonBlobType jsonBlobType) throws IOException {
  File file=File.createTempFile(clazz.getSimpleName() + ""String_Node_Str"" + contentType.getMimeType().replace('/','-')+ ""String_Node_Str"",null);
  file.deleteOnExit();
  String arrayName=""String_Node_Str"";
  if (jsonBlobType == JsonBlobType.ORG) {
    arrayName=""String_Node_Str"";
  }
 else   if (jsonBlobType == JsonBlobType.PROJECT) {
    arrayName=""String_Node_Str"";
  }
 else   if (jsonBlobType == JsonBlobType.REF) {
    arrayName=""String_Node_Str"";
  }
  try (FileOutputStream outputStream=new FileOutputStream(file);JsonGenerator jsonGenerator=JacksonUtils.getJsonFactory().createGenerator(outputStream)){
    jsonGenerator.writeStartObject();
    jsonGenerator.writeArrayFieldStart(arrayName);
    for (    Object node : nodes) {
      if (node instanceof ObjectNode && jsonBlobType == JsonBlobType.ELEMENT_JSON || jsonBlobType == JsonBlobType.ORG || jsonBlobType == JsonBlobType.PROJECT || jsonBlobType == JsonBlobType.REF) {
        jsonGenerator.writeObject(node);
      }
 else       if (node instanceof String && jsonBlobType == JsonBlobType.ELEMENT_ID) {
        jsonGenerator.writeStartObject();
        jsonGenerator.writeStringField(MDKConstants.ID_KEY,(String)node);
        jsonGenerator.writeEndObject();
      }
 else {
        throw new IOException(""String_Node_Str"");
      }
    }
    jsonGenerator.writeEndArray();
    jsonGenerator.writeStringField(""String_Node_Str"",""String_Node_Str"");
    jsonGenerator.writeStringField(""String_Node_Str"",MDKPlugin.VERSION);
    jsonGenerator.writeEndObject();
  }
   System.out.println(""String_Node_Str"" + file.getPath());
  return file;
}",0.9749779216956138
88565,"public String commitAction(){
  URIBuilder requestUri=MMSUtils.getServiceOrgsUri(project);
  if (requestUri == null) {
    return null;
  }
  JFrame selectionDialog=new JFrame();
  String org=JOptionPane.showInputDialog(selectionDialog,""String_Node_Str"");
  if (org == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  if (org.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  JsonParser responseParser;
  try {
    responseParser=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri));
    ObjectNode response=JacksonUtils.parseJsonObject(responseParser);
    JsonNode arrayNode;
    if (response != null && (arrayNode=response.get(""String_Node_Str"")) != null && arrayNode.isArray()) {
      for (      JsonNode orgNode : arrayNode) {
        JsonNode value;
        if ((value=orgNode.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
          if (value.asText().equals(""String_Node_Str"")) {
            Application.getInstance().getGUILog().log(""String_Node_Str"");
            return org;
          }
        }
      }
    }
  }
 catch (  IOException|URISyntaxException|ServerException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return null;
  }
  LinkedList<ObjectNode> orgs=new LinkedList<>();
  orgs.add(JacksonUtils.getObjectMapper().createObjectNode());
  try {
    File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,orgs,MMSUtils.JsonBlobType.ORG);
    responseParser=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON));
  }
 catch (  IOException|ServerException|URISyntaxException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return null;
  }
  return org;
}","public String commitAction(){
  URIBuilder requestUri=MMSUtils.getServiceOrgsUri(project);
  if (requestUri == null) {
    return null;
  }
  JFrame selectionDialog=new JFrame();
  String org=JOptionPane.showInputDialog(selectionDialog,""String_Node_Str"");
  if (org == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  if (org.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  JsonParser responseParser;
  try {
    responseParser=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri));
    ObjectNode response=JacksonUtils.parseJsonObject(responseParser);
    JsonNode arrayNode;
    if (response != null && (arrayNode=response.get(""String_Node_Str"")) != null && arrayNode.isArray()) {
      for (      JsonNode orgNode : arrayNode) {
        JsonNode value;
        if ((value=orgNode.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
          if (value.asText().equals(org)) {
            Application.getInstance().getGUILog().log(""String_Node_Str"");
            return org;
          }
        }
      }
    }
  }
 catch (  IOException|URISyntaxException|ServerException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return null;
  }
  LinkedList<ObjectNode> orgs=new LinkedList<>();
  orgs.add(JacksonUtils.getObjectMapper().createObjectNode());
  try {
    File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,orgs,MMSUtils.JsonBlobType.ORG);
    responseParser=MMSUtils.sendMMSRequest(project,MMSUtils.buildRequest(MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON));
  }
 catch (  IOException|ServerException|URISyntaxException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return null;
  }
  return org;
}",0.994931576279777
88566,"@Override public void updateState(){
  setEnabled(MDKOptionsGroup.getMDKOptions().isMDKAdvancedOptions());
}","@Override public void updateState(){
  setEnabled(TicketUtils.isTicketSet(Application.getInstance().getProject()) && !super.isDisabled() && MDKOptionsGroup.getMDKOptions().isMDKAdvancedOptions());
}",0.7058823529411765
88567,"@SuppressWarnings(""String_Node_Str"") @Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject()) && EsiUtils.getLoggedUserName() == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  if (!TicketUtils.isTicketSet(project)) {
    Utils.guilog(""String_Node_Str"");
    MMSLoginAction.loginAction(project);
    return;
  }
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (pv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  BranchValidator bv=new BranchValidator(project);
  bv.validate(null,false);
  if (bv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (bv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  LocalSyncTransactionCommitListener listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  listener.setDisabled(true);
  SyncElements.lockSyncFolder(project);
  listener.setDisabled(false);
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(Application.getInstance().getProject());
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  if (jmsMessageListener == null) {
    if (MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    return;
  }
  Changelog<String,Element> persistedLocalChangelog=new Changelog<>();
  Collection<SyncElement> persistedLocalSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.LOCAL);
  for (  SyncElement syncElement : persistedLocalSyncElements) {
    persistedLocalChangelog=persistedLocalChangelog.and(SyncElements.buildChangelog(syncElement),(key,value) -> Converters.getIdToElementConverter().apply(key,project));
  }
  Changelog<String,Element> localChangelog=persistedLocalChangelog.and(listener.getInMemoryLocalChangelog());
  Map<String,Element> localCreated=localChangelog.get(Changelog.ChangeType.CREATED), localUpdated=localChangelog.get(Changelog.ChangeType.UPDATED), localDeleted=localChangelog.get(Changelog.ChangeType.DELETED);
  Changelog<String,Void> persistedJmsChangelog=new Changelog<>();
  Collection<SyncElement> persistedJmsSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.MMS);
  for (  SyncElement syncElement : persistedJmsSyncElements) {
    persistedJmsChangelog=persistedJmsChangelog.and(SyncElements.buildChangelog(syncElement));
  }
  Changelog<String,Void> jmsChangelog=persistedJmsChangelog.and(jmsMessageListener.getInMemoryJMSChangelog(),(key,objectNode) -> null);
  Map<String,Void> jmsCreated=jmsChangelog.get(Changelog.ChangeType.CREATED), jmsUpdated=jmsChangelog.get(Changelog.ChangeType.UPDATED), jmsDeleted=jmsChangelog.get(Changelog.ChangeType.DELETED);
  Set<String> elementIdsToGet=new HashSet<>(jmsUpdated.keySet());
  elementIdsToGet.addAll(jmsCreated.keySet());
  if (shouldUpdate && !jmsChangelog.isEmpty()) {
    int size=jmsChangelog.flattenedSize();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + size + ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  Map<String,ObjectNode> jmsJsons=new HashMap<>(elementIdsToGet.size());
  if (!elementIdsToGet.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"" + elementIdsToGet.size() + ""String_Node_Str""+ (elementIdsToGet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    ObjectNode response=null;
    try {
      response=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,elementIdsToGet,progressStatus));
    }
 catch (    ServerException|IOException|URISyntaxException e) {
      if (e instanceof ServerException && ((ServerException)e).getCode() == 404) {
        (response=JacksonUtils.getObjectMapper().createObjectNode()).putArray(""String_Node_Str"");
      }
 else       if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        e.printStackTrace();
        return;
      }
    }
    if (progressStatus.isCancel()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    JsonNode elementsArrayNode;
    if (response == null || (elementsArrayNode=response.get(""String_Node_Str"")) == null || !elementsArrayNode.isArray()) {
      Utils.guilog(""String_Node_Str"");
      return;
    }
    for (    JsonNode jsonNode : elementsArrayNode) {
      if (!jsonNode.isObject()) {
        continue;
      }
      String webId=jsonNode.get(MDKConstants.ID_KEY).asText();
      jmsJsons.put(webId,(ObjectNode)jsonNode);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  Map<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedChanges=new LinkedHashMap<>(), unconflictedChanges=new LinkedHashMap<>();
  localChangelog.findConflicts(jmsChangelog,(change,change2) -> change != null && change2 != null,conflictedChanges,unconflictedChanges);
  Map<String,Element> localElementsToPost=new LinkedHashMap<>(localCreated.size() + localUpdated.size());
  Set<String> deleteElements=new HashSet<>(localDeleted.size());
  Map<String,ObjectNode> jmsElementsToCreateLocally=new LinkedHashMap<>(jmsCreated.size());
  Map<String,Pair<ObjectNode,Element>> jmsElementsToUpdateLocally=new LinkedHashMap<>(jmsUpdated.size());
  Map<String,Element> jmsElementsToDeleteLocally=new LinkedHashMap<>(jmsDeleted.size());
  for (  Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> unconflictedEntry : unconflictedChanges.entrySet()) {
    String id=unconflictedEntry.getKey();
    Changelog.Change<Element> localChange=unconflictedEntry.getValue().getKey();
    Changelog.Change<ObjectNode> jmsChange=unconflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),unconflictedEntry.getValue().getValue().getType()) : null;
    if (shouldCommit && localChange != null) {
      Element element=localChange.getChanged();
switch (localChange.getType()) {
case CREATED:
case UPDATED:
        if (element == null) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
          continue;
        }
      localElementsToPost.put(id,element);
    break;
case DELETED:
  if (element != null && !project.isDisposed(element)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
    continue;
  }
deleteElements.add(id);
break;
}
}
 else if (shouldUpdate && jmsChange != null) {
ObjectNode objectNode=jmsChange.getChanged();
Element element=Converters.getIdToElementConverter().apply(id,project);
switch (jmsChange.getType()) {
case CREATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element != null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
jmsElementsToCreateLocally.put(id,objectNode);
break;
case UPDATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.UPDATED);
continue;
}
jmsElementsToUpdateLocally.put(id,new Pair<>(objectNode,element));
break;
case DELETED:
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
continue;
}
jmsElementsToDeleteLocally.put(id,element);
break;
}
}
}
if (progressStatus.isCancel()) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
return;
}
boolean shouldLogNoLocalChanges=shouldCommit;
if (shouldCommit && !localElementsToPost.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
LinkedList<ObjectNode> postElements=new LinkedList<>();
for (Element element : localElementsToPost.values()) {
ObjectNode elementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
if (elementObjectNode != null) {
postElements.add(elementObjectNode);
}
}
if (postElements.size() > 0) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(postElements.size()) + ""String_Node_Str""+ (postElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,postElements,MMSUtils.JsonBlobType.ELEMENT_JSON);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,true,postElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
}
if (shouldCommit && shouldCommitDeletes && !deleteElements.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(deleteElements.size()) + ""String_Node_Str""+ (deleteElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,deleteElements,MMSUtils.JsonBlobType.ELEMENT_ID);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,true,deleteElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
if (shouldLogNoLocalChanges) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
}
if (shouldUpdate) {
listener.setDisabled(true);
List<ObjectNode> jmsElementsToCreateOrUpdateLocally=new ArrayList<>(jmsElementsToCreateLocally.size() + jmsElementsToUpdateLocally.size());
jmsElementsToCreateOrUpdateLocally.addAll(jmsElementsToCreateLocally.values());
jmsElementsToUpdateLocally.values().forEach(pair -> jmsElementsToCreateOrUpdateLocally.add(pair.getKey()));
UpdateClientElementAction updateClientElementAction=new UpdateClientElementAction(project);
updateClientElementAction.setElementsToUpdate(jmsElementsToCreateOrUpdateLocally);
updateClientElementAction.setElementsToDelete(jmsElementsToDeleteLocally.values().stream().map(Converters.getElementToIdConverter()).filter(id -> id != null).filter(id -> !id.isEmpty()).collect(Collectors.toList()));
updateClientElementAction.run(progressStatus);
failedJmsChangelog=failedJmsChangelog.and(updateClientElementAction.getFailedChangelog(),(id,objectNode) -> null);
listener.setDisabled(false);
}
progressStatus.setDescription(""String_Node_Str"");
Set<Element> localConflictedElements=new HashSet<>();
Set<ObjectNode> jmsConflictedElements=new HashSet<>();
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null && !project.isDisposed(localChange.getChanged())) {
localConflictedElements.add(localChange.getChanged());
}
if (jmsChange != null && jmsChange.getChanged() != null) {
jmsConflictedElements.add(jmsChange.getChanged());
}
}
ElementValidator elementValidator=new ElementValidator(ElementValidator.buildElementPairs(localConflictedElements,project),jmsConflictedElements,project);
elementValidator.run(progressStatus);
if (!elementValidator.getInvalidElements().isEmpty()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + elementValidator.getInvalidElements().size() + ""String_Node_Str""+ (elementValidator.getInvalidElements().size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
vss.add(elementValidator.getValidationSuite());
Utils.displayValidationWindow(project,elementValidator.getValidationSuite(),""String_Node_Str"");
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
if (!elementValidator.getInvalidElements().containsKey(id)) {
continue;
}
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(localChange.getType())) {
failedLocalChangelog.addChange(conflictedEntry.getKey(),localChange.getChanged(),localChange.getType());
}
if (jmsChange != null && jmsChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(jmsChange.getType())) {
failedJmsChangelog.addChange(conflictedEntry.getKey(),null,jmsChange.getType());
}
}
}
listener.getInMemoryLocalChangelog().clear();
jmsMessageListener.getInMemoryJMSChangelog().clear();
listener.setDisabled(true);
if (!SessionManager.getInstance().isSessionCreated()) {
SessionManager.getInstance().createSession(""String_Node_Str"");
}
Changelog<String,Void> unprocessedLocalChangelog=new Changelog<>();
if (!shouldCommit) {
unprocessedLocalChangelog=unprocessedLocalChangelog.and(localChangelog,(s,element) -> null);
}
if (shouldCommit && !shouldCommitDeletes) {
Map<String,Void> unprocessedLocalDeletedChanges=unprocessedLocalChangelog.get(Changelog.ChangeType.DELETED);
for (String key : localChangelog.get(Changelog.ChangeType.DELETED).keySet()) {
unprocessedLocalDeletedChanges.put(key,null);
}
}
unprocessedLocalChangelog=unprocessedLocalChangelog.and(failedLocalChangelog,(s,element) -> null);
try {
SyncElements.setByType(project,SyncElement.Type.LOCAL,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedLocalChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
Changelog<String,Void> unprocessedJmsChangelog=new Changelog<>();
if (!shouldUpdate) {
unprocessedJmsChangelog=unprocessedJmsChangelog.and(jmsChangelog);
}
unprocessedJmsChangelog=unprocessedJmsChangelog.and(failedJmsChangelog);
try {
SyncElements.setByType(project,SyncElement.Type.MMS,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedJmsChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
SessionManager.getInstance().closeSession();
listener.setDisabled(false);
failure=false;
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject()) && EsiUtils.getLoggedUserName() == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  try {
    if (!TicketUtils.isTicketValid(project)) {
      Utils.guilog(""String_Node_Str"");
      MMSLoginAction.loginAction(project);
      return;
    }
  }
 catch (  ServerException|IOException|URISyntaxException e) {
    Utils.guilog(""String_Node_Str"");
    MMSLoginAction.loginAction(project);
    return;
  }
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (pv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  BranchValidator bv=new BranchValidator(project);
  bv.validate(null,false);
  if (bv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (bv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  LocalSyncTransactionCommitListener listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  listener.setDisabled(true);
  SyncElements.lockSyncFolder(project);
  listener.setDisabled(false);
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(Application.getInstance().getProject());
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  if (jmsMessageListener == null) {
    if (MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    return;
  }
  Changelog<String,Element> persistedLocalChangelog=new Changelog<>();
  Collection<SyncElement> persistedLocalSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.LOCAL);
  for (  SyncElement syncElement : persistedLocalSyncElements) {
    persistedLocalChangelog=persistedLocalChangelog.and(SyncElements.buildChangelog(syncElement),(key,value) -> Converters.getIdToElementConverter().apply(key,project));
  }
  Changelog<String,Element> localChangelog=persistedLocalChangelog.and(listener.getInMemoryLocalChangelog());
  Map<String,Element> localCreated=localChangelog.get(Changelog.ChangeType.CREATED), localUpdated=localChangelog.get(Changelog.ChangeType.UPDATED), localDeleted=localChangelog.get(Changelog.ChangeType.DELETED);
  Changelog<String,Void> persistedJmsChangelog=new Changelog<>();
  Collection<SyncElement> persistedJmsSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.MMS);
  for (  SyncElement syncElement : persistedJmsSyncElements) {
    persistedJmsChangelog=persistedJmsChangelog.and(SyncElements.buildChangelog(syncElement));
  }
  Changelog<String,Void> jmsChangelog=persistedJmsChangelog.and(jmsMessageListener.getInMemoryJMSChangelog(),(key,objectNode) -> null);
  Map<String,Void> jmsCreated=jmsChangelog.get(Changelog.ChangeType.CREATED), jmsUpdated=jmsChangelog.get(Changelog.ChangeType.UPDATED), jmsDeleted=jmsChangelog.get(Changelog.ChangeType.DELETED);
  Set<String> elementIdsToGet=new HashSet<>(jmsUpdated.keySet());
  elementIdsToGet.addAll(jmsCreated.keySet());
  if (shouldUpdate && !jmsChangelog.isEmpty()) {
    int size=jmsChangelog.flattenedSize();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + size + ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  Map<String,ObjectNode> jmsJsons=new HashMap<>(elementIdsToGet.size());
  if (!elementIdsToGet.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"" + elementIdsToGet.size() + ""String_Node_Str""+ (elementIdsToGet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    ObjectNode response=null;
    try {
      response=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,elementIdsToGet,progressStatus));
    }
 catch (    ServerException|IOException|URISyntaxException e) {
      if (e instanceof ServerException && ((ServerException)e).getCode() == 404) {
        (response=JacksonUtils.getObjectMapper().createObjectNode()).putArray(""String_Node_Str"");
      }
 else       if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        e.printStackTrace();
        return;
      }
    }
    if (progressStatus.isCancel()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    JsonNode elementsArrayNode;
    if (response == null || (elementsArrayNode=response.get(""String_Node_Str"")) == null || !elementsArrayNode.isArray()) {
      Utils.guilog(""String_Node_Str"");
      return;
    }
    for (    JsonNode jsonNode : elementsArrayNode) {
      if (!jsonNode.isObject()) {
        continue;
      }
      String webId=jsonNode.get(MDKConstants.ID_KEY).asText();
      jmsJsons.put(webId,(ObjectNode)jsonNode);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  Map<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedChanges=new LinkedHashMap<>(), unconflictedChanges=new LinkedHashMap<>();
  localChangelog.findConflicts(jmsChangelog,(change,change2) -> change != null && change2 != null,conflictedChanges,unconflictedChanges);
  Map<String,Element> localElementsToPost=new LinkedHashMap<>(localCreated.size() + localUpdated.size());
  Set<String> deleteElements=new HashSet<>(localDeleted.size());
  Map<String,ObjectNode> jmsElementsToCreateLocally=new LinkedHashMap<>(jmsCreated.size());
  Map<String,Pair<ObjectNode,Element>> jmsElementsToUpdateLocally=new LinkedHashMap<>(jmsUpdated.size());
  Map<String,Element> jmsElementsToDeleteLocally=new LinkedHashMap<>(jmsDeleted.size());
  for (  Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> unconflictedEntry : unconflictedChanges.entrySet()) {
    String id=unconflictedEntry.getKey();
    Changelog.Change<Element> localChange=unconflictedEntry.getValue().getKey();
    Changelog.Change<ObjectNode> jmsChange=unconflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),unconflictedEntry.getValue().getValue().getType()) : null;
    if (shouldCommit && localChange != null) {
      Element element=localChange.getChanged();
switch (localChange.getType()) {
case CREATED:
case UPDATED:
        if (element == null) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
          continue;
        }
      localElementsToPost.put(id,element);
    break;
case DELETED:
  if (element != null && !project.isDisposed(element)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
    continue;
  }
deleteElements.add(id);
break;
}
}
 else if (shouldUpdate && jmsChange != null) {
ObjectNode objectNode=jmsChange.getChanged();
Element element=Converters.getIdToElementConverter().apply(id,project);
switch (jmsChange.getType()) {
case CREATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element != null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
jmsElementsToCreateLocally.put(id,objectNode);
break;
case UPDATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.UPDATED);
continue;
}
jmsElementsToUpdateLocally.put(id,new Pair<>(objectNode,element));
break;
case DELETED:
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
continue;
}
jmsElementsToDeleteLocally.put(id,element);
break;
}
}
}
if (progressStatus.isCancel()) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
return;
}
boolean shouldLogNoLocalChanges=shouldCommit;
if (shouldCommit && !localElementsToPost.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
LinkedList<ObjectNode> postElements=new LinkedList<>();
for (Element element : localElementsToPost.values()) {
ObjectNode elementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
if (elementObjectNode != null) {
postElements.add(elementObjectNode);
}
}
if (postElements.size() > 0) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(postElements.size()) + ""String_Node_Str""+ (postElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,postElements,MMSUtils.JsonBlobType.ELEMENT_JSON);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,true,postElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
}
if (shouldCommit && shouldCommitDeletes && !deleteElements.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(deleteElements.size()) + ""String_Node_Str""+ (deleteElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,deleteElements,MMSUtils.JsonBlobType.ELEMENT_ID);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,true,deleteElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
if (shouldLogNoLocalChanges) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
}
if (shouldUpdate) {
listener.setDisabled(true);
List<ObjectNode> jmsElementsToCreateOrUpdateLocally=new ArrayList<>(jmsElementsToCreateLocally.size() + jmsElementsToUpdateLocally.size());
jmsElementsToCreateOrUpdateLocally.addAll(jmsElementsToCreateLocally.values());
jmsElementsToUpdateLocally.values().forEach(pair -> jmsElementsToCreateOrUpdateLocally.add(pair.getKey()));
UpdateClientElementAction updateClientElementAction=new UpdateClientElementAction(project);
updateClientElementAction.setElementsToUpdate(jmsElementsToCreateOrUpdateLocally);
updateClientElementAction.setElementsToDelete(jmsElementsToDeleteLocally.values().stream().map(Converters.getElementToIdConverter()).filter(id -> id != null).filter(id -> !id.isEmpty()).collect(Collectors.toList()));
updateClientElementAction.run(progressStatus);
failedJmsChangelog=failedJmsChangelog.and(updateClientElementAction.getFailedChangelog(),(id,objectNode) -> null);
listener.setDisabled(false);
}
progressStatus.setDescription(""String_Node_Str"");
Set<Element> localConflictedElements=new HashSet<>();
Set<ObjectNode> jmsConflictedElements=new HashSet<>();
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null && !project.isDisposed(localChange.getChanged())) {
localConflictedElements.add(localChange.getChanged());
}
if (jmsChange != null && jmsChange.getChanged() != null) {
jmsConflictedElements.add(jmsChange.getChanged());
}
}
ElementValidator elementValidator=new ElementValidator(ElementValidator.buildElementPairs(localConflictedElements,project),jmsConflictedElements,project);
elementValidator.run(progressStatus);
if (!elementValidator.getInvalidElements().isEmpty()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + elementValidator.getInvalidElements().size() + ""String_Node_Str""+ (elementValidator.getInvalidElements().size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
vss.add(elementValidator.getValidationSuite());
Utils.displayValidationWindow(project,elementValidator.getValidationSuite(),""String_Node_Str"");
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
if (!elementValidator.getInvalidElements().containsKey(id)) {
continue;
}
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(localChange.getType())) {
failedLocalChangelog.addChange(conflictedEntry.getKey(),localChange.getChanged(),localChange.getType());
}
if (jmsChange != null && jmsChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(jmsChange.getType())) {
failedJmsChangelog.addChange(conflictedEntry.getKey(),null,jmsChange.getType());
}
}
}
listener.getInMemoryLocalChangelog().clear();
jmsMessageListener.getInMemoryJMSChangelog().clear();
listener.setDisabled(true);
if (!SessionManager.getInstance().isSessionCreated()) {
SessionManager.getInstance().createSession(""String_Node_Str"");
}
Changelog<String,Void> unprocessedLocalChangelog=new Changelog<>();
if (!shouldCommit) {
unprocessedLocalChangelog=unprocessedLocalChangelog.and(localChangelog,(s,element) -> null);
}
if (shouldCommit && !shouldCommitDeletes) {
Map<String,Void> unprocessedLocalDeletedChanges=unprocessedLocalChangelog.get(Changelog.ChangeType.DELETED);
for (String key : localChangelog.get(Changelog.ChangeType.DELETED).keySet()) {
unprocessedLocalDeletedChanges.put(key,null);
}
}
unprocessedLocalChangelog=unprocessedLocalChangelog.and(failedLocalChangelog,(s,element) -> null);
try {
SyncElements.setByType(project,SyncElement.Type.LOCAL,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedLocalChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
Changelog<String,Void> unprocessedJmsChangelog=new Changelog<>();
if (!shouldUpdate) {
unprocessedJmsChangelog=unprocessedJmsChangelog.and(jmsChangelog);
}
unprocessedJmsChangelog=unprocessedJmsChangelog.and(failedJmsChangelog);
try {
SyncElements.setByType(project,SyncElement.Type.MMS,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedJmsChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
SessionManager.getInstance().closeSession();
listener.setDisabled(false);
failure=false;
}",0.9942347033661894
88568,"@Override public void onException(JMSException exception){
  if (exceptionHandlerRunning.get()) {
    return;
  }
  exceptionHandlerRunning.set(true);
  MMSAction.setDisabled(exceptionHandlerRunning.get());
  Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
  JMSSyncProjectEventListenerAdapter.getProjectMapping(project).getJmsMessageListener().setDisabled(true);
  while (shouldAttemptToReconnect()) {
    int delay=Math.min(600,(int)Math.pow(2,reconnectionAttempts++));
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ delay+ ""String_Node_Str""+ (delay != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    try {
      Thread.sleep(delay * 1000);
    }
 catch (    InterruptedException ignored) {
    }
    if (!exceptionHandlerRunning.get()) {
      return;
    }
    if (shouldAttemptToReconnect()) {
      MMSSyncPlugin.getInstance().getJmsSyncProjectEventListenerAdapter().closeJMS(project);
      MMSSyncPlugin.getInstance().getJmsSyncProjectEventListenerAdapter().initializeJMS(project);
    }
  }
  if (!JMSSyncProjectEventListenerAdapter.getProjectMapping(project).getJmsMessageListener().isDisabled()) {
    reconnectionAttempts=0;
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
  }
 else {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
    MMSLogoutAction.logoutAction(project);
  }
  reconnectionAttempts=0;
  exceptionHandlerRunning.set(false);
  MMSAction.setDisabled(exceptionHandlerRunning.get());
}","@Override public void onException(JMSException exception){
  if (exceptionHandlerRunning.get()) {
    return;
  }
  exceptionHandlerRunning.set(true);
  Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
  JMSSyncProjectEventListenerAdapter.getProjectMapping(project).getJmsMessageListener().setDisabled(true);
  while (shouldAttemptToReconnect()) {
    int delay=Math.min(600,(int)Math.pow(2,reconnectionAttempts++));
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ delay+ ""String_Node_Str""+ (delay != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    try {
      Thread.sleep(delay * 1000);
    }
 catch (    InterruptedException ignored) {
    }
    if (!exceptionHandlerRunning.get()) {
      return;
    }
    if (shouldAttemptToReconnect()) {
      MMSSyncPlugin.getInstance().getJmsSyncProjectEventListenerAdapter().closeJMS(project);
      MMSSyncPlugin.getInstance().getJmsSyncProjectEventListenerAdapter().initializeJMS(project);
    }
  }
  if (!JMSSyncProjectEventListenerAdapter.getProjectMapping(project).getJmsMessageListener().isDisabled()) {
    reconnectionAttempts=0;
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
  }
 else {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
    MMSLogoutAction.logoutAction(project);
  }
  reconnectionAttempts=0;
  exceptionHandlerRunning.set(false);
}",0.9651090342679128
88569,"public void validate(ProgressStatus progressStatus,boolean allBranches){
  IPrimaryProject primaryProject=project.getPrimaryProject();
  if (!ProjectUtilities.isRemote(primaryProject)) {
    return;
  }
  if (EsiUtils.getLoggedUserName() == null) {
    errors=true;
    Utils.guilog(""String_Node_Str"");
    return;
  }
  String currentBranch=EsiUtils.getCurrentBranch(primaryProject).getName();
  if (currentBranch.equals(""String_Node_Str"")) {
    currentBranch=""String_Node_Str"";
  }
  Map<String,Pair<EsiUtils.EsiBranchInfo,ObjectNode>> clientBranches=new HashMap<>();
  Map<String,ObjectNode> serverBranches=new HashMap<>();
  if (progressStatus != null) {
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setIndeterminate(true);
  }
  Collection<EsiUtils.EsiBranchInfo> targetBranches=null;
  if (allBranches) {
    try {
      ProjectDescriptor projectDescriptor=ProjectDescriptorsFactory.createAnyRemoteProjectDescriptor(project);
      targetBranches=EsiUtils.getBranches(projectDescriptor);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (targetBranches == null || targetBranches.isEmpty()) {
      return;
    }
  }
 else {
    targetBranches=new ArrayList<>(1);
    targetBranches.add(EsiUtils.getCurrentBranch(primaryProject));
  }
  for (  EsiUtils.EsiBranchInfo branch : targetBranches) {
    ObjectNode branchJson=getRefObjectNode(project,branch,true);
    JsonNode value;
    String entryKey;
    if ((value=branchJson.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
      entryKey=branchJson.get(MDKConstants.ID_KEY).asText();
      if (allBranches || entryKey.equals(currentBranch)) {
        clientBranches.put(entryKey,new Pair<>(branch,branchJson));
      }
    }
  }
  if (progressStatus != null) {
    progressStatus.setDescription(""String_Node_Str"");
  }
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsUri(project);
  if (requestUri == null) {
    errors=true;
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (!allBranches) {
    requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + currentBranch);
  }
  try {
    HttpRequestBase request=MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri);
    ObjectNode response=JacksonUtils.parseJsonObject(MMSUtils.sendMMSRequest(project,request));
    JsonNode refsArray, value;
    if ((refsArray=response.get(""String_Node_Str"")) != null && refsArray.isArray()) {
      for (      JsonNode refJson : refsArray) {
        if (refJson.isObject()) {
          String entryKey;
          if ((value=refJson.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
            entryKey=refJson.get(MDKConstants.ID_KEY).asText();
            if (allBranches || entryKey.equals(currentBranch)) {
              serverBranches.put(entryKey,(ObjectNode)refJson);
            }
          }
        }
      }
    }
  }
 catch (  IOException|URISyntaxException|ServerException e) {
    errors=true;
    e.printStackTrace();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    return;
  }
  Set<String> keySet=new HashSet<>();
  keySet.addAll(clientBranches.keySet());
  keySet.addAll(serverBranches.keySet());
  if (progressStatus != null) {
    progressStatus.setDescription(""String_Node_Str"" + keySet.size() + ""String_Node_Str""+ (keySet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str""));
    progressStatus.setIndeterminate(false);
    progressStatus.setMax(keySet.size());
    progressStatus.setCurrent(0);
  }
  for (  String key : keySet) {
    if (key.equals(""String_Node_Str"")) {
      continue;
    }
    Pair<EsiUtils.EsiBranchInfo,ObjectNode> clientBranch=clientBranches.get(key);
    ObjectNode serverBranch=serverBranches.get(key);
    if (clientBranch == null) {
    }
 else     if (serverBranch == null) {
      ValidationRuleViolation v=new ValidationRuleViolation(project.getPrimaryModel(),""String_Node_Str"" + key + ""String_Node_Str"");
      v.addAction(new CommitBranchAction(key,project,clientBranch.getKey(),false,false));
      v.addAction(new CommitBranchAction(key,project,clientBranch.getKey(),true,false));
      mmsMissingBranchValidationRule.addViolation(v);
    }
 else {
      JsonNode diff=JsonDiffFunction.getInstance().apply(clientBranch.getValue(),serverBranch);
      if (JsonPatchUtils.isEqual(diff)) {
        continue;
      }
      ValidationRuleViolation v=new ValidationRuleViolation(project.getPrimaryModel(),""String_Node_Str"" + key + ""String_Node_Str"");
      v.addAction(new CommitBranchAction(key,project,clientBranch.getKey(),false,true));
      v.addAction(new CommitBranchAction(key,project,clientBranch.getKey(),true,true));
      branchEquivalenceValidationRule.addViolation(v);
    }
    if (progressStatus != null) {
      progressStatus.increase();
    }
  }
}","public void validate(ProgressStatus progressStatus,boolean allBranches){
  if (project == null) {
    return;
  }
  IPrimaryProject primaryProject=project.getPrimaryProject();
  if (!ProjectUtilities.isRemote(primaryProject)) {
    return;
  }
  if (EsiUtils.getLoggedUserName() == null) {
    errors=true;
    Utils.guilog(""String_Node_Str"");
    return;
  }
  String currentBranch=EsiUtils.getCurrentBranch(primaryProject).getName();
  if (currentBranch.equals(""String_Node_Str"")) {
    currentBranch=""String_Node_Str"";
  }
  Map<String,Pair<EsiUtils.EsiBranchInfo,ObjectNode>> clientBranches=new HashMap<>();
  Map<String,ObjectNode> serverBranches=new HashMap<>();
  if (progressStatus != null) {
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setIndeterminate(true);
  }
  Collection<EsiUtils.EsiBranchInfo> targetBranches=null;
  if (allBranches) {
    try {
      ProjectDescriptor projectDescriptor=ProjectDescriptorsFactory.createAnyRemoteProjectDescriptor(project);
      targetBranches=EsiUtils.getBranches(projectDescriptor);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (targetBranches == null || targetBranches.isEmpty()) {
      return;
    }
  }
 else {
    targetBranches=new ArrayList<>(1);
    targetBranches.add(EsiUtils.getCurrentBranch(primaryProject));
  }
  for (  EsiUtils.EsiBranchInfo branch : targetBranches) {
    ObjectNode branchJson=getRefObjectNode(project,branch,true);
    JsonNode value;
    String entryKey;
    if ((value=branchJson.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
      entryKey=branchJson.get(MDKConstants.ID_KEY).asText();
      if (allBranches || entryKey.equals(currentBranch)) {
        clientBranches.put(entryKey,new Pair<>(branch,branchJson));
      }
    }
  }
  if (progressStatus != null) {
    progressStatus.setDescription(""String_Node_Str"");
  }
  URIBuilder requestUri=MMSUtils.getServiceProjectsRefsUri(project);
  if (requestUri == null) {
    errors=true;
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (!allBranches) {
    requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + currentBranch);
  }
  try {
    HttpRequestBase request=MMSUtils.buildRequest(MMSUtils.HttpRequestType.GET,requestUri);
    ObjectNode response=JacksonUtils.parseJsonObject(MMSUtils.sendMMSRequest(project,request));
    JsonNode refsArray, value;
    if ((refsArray=response.get(""String_Node_Str"")) != null && refsArray.isArray()) {
      for (      JsonNode refJson : refsArray) {
        if (refJson.isObject()) {
          String entryKey;
          if ((value=refJson.get(MDKConstants.ID_KEY)) != null && value.isTextual()) {
            entryKey=refJson.get(MDKConstants.ID_KEY).asText();
            if (allBranches || entryKey.equals(currentBranch)) {
              serverBranches.put(entryKey,(ObjectNode)refJson);
            }
          }
        }
      }
    }
  }
 catch (  IOException|URISyntaxException|ServerException e) {
    errors=true;
    e.printStackTrace();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    return;
  }
  Set<String> keySet=new HashSet<>();
  keySet.addAll(clientBranches.keySet());
  keySet.addAll(serverBranches.keySet());
  if (progressStatus != null) {
    progressStatus.setDescription(""String_Node_Str"" + keySet.size() + ""String_Node_Str""+ (keySet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str""));
    progressStatus.setIndeterminate(false);
    progressStatus.setMax(keySet.size());
    progressStatus.setCurrent(0);
  }
  for (  String key : keySet) {
    if (key.equals(""String_Node_Str"")) {
      continue;
    }
    Pair<EsiUtils.EsiBranchInfo,ObjectNode> clientBranch=clientBranches.get(key);
    ObjectNode serverBranch=serverBranches.get(key);
    if (clientBranch == null) {
    }
 else     if (serverBranch == null) {
      ValidationRuleViolation v=new ValidationRuleViolation(project.getPrimaryModel(),""String_Node_Str"" + key + ""String_Node_Str"");
      v.addAction(new CommitBranchAction(key,project,clientBranch.getKey(),false,false));
      v.addAction(new CommitBranchAction(key,project,clientBranch.getKey(),true,false));
      mmsMissingBranchValidationRule.addViolation(v);
    }
 else {
      JsonNode diff=JsonDiffFunction.getInstance().apply(clientBranch.getValue(),serverBranch);
      if (JsonPatchUtils.isEqual(diff)) {
        continue;
      }
      ValidationRuleViolation v=new ValidationRuleViolation(project.getPrimaryModel(),""String_Node_Str"" + key + ""String_Node_Str"");
      v.addAction(new CommitBranchAction(key,project,clientBranch.getKey(),false,true));
      v.addAction(new CommitBranchAction(key,project,clientBranch.getKey(),true,true));
      branchEquivalenceValidationRule.addViolation(v);
    }
    if (progressStatus != null) {
      progressStatus.increase();
    }
  }
}",0.9957727600783586
88570,"TicketMapping(final Project project,String ticket){
  this.ticket=ticket;
  this.ticketRenewer=Executors.newScheduledThreadPool(1);
  final Runnable renewTicket=() -> {
    try {
      try {
        boolean isValid=MMSUtils.validateCredentials(project,ticketMappings.get(project).getTicket()).equals(username);
        if (!isValid) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          MMSLogoutAction.logoutAction(project);
        }
      }
 catch (      ServerException|IOException|URISyntaxException e) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
        e.printStackTrace();
      }
    }
 catch (    Exception ignored) {
    }
  }
;
  this.ticketRenewer.scheduleAtFixedRate(renewTicket,TICKET_RENEWAL_INTERVAL,TICKET_RENEWAL_INTERVAL,TimeUnit.SECONDS);
}","TicketMapping(final Project project,String ticket){
  this.ticket=ticket;
  this.ticketRenewer=Executors.newScheduledThreadPool(1);
  final Runnable renewTicket=() -> {
    try {
      try {
        boolean isValid=isTicketValid(project);
        if (!isValid) {
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          MMSLogoutAction.logoutAction(project);
        }
      }
 catch (      ServerException|IOException|URISyntaxException e) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
        e.printStackTrace();
      }
    }
 catch (    Exception ignored) {
    }
  }
;
  this.ticketRenewer.scheduleAtFixedRate(renewTicket,TICKET_RENEWAL_INTERVAL,TICKET_RENEWAL_INTERVAL,TimeUnit.SECONDS);
}",0.93875
88571,"/** 
 * Uses the stored username and passed password to query MMS for a ticket. Will clear any stored password on attempt. <p> Will first check to see if there is an existing ticket, and if so if it is valid. If valid, will not resend for new ticket. If invalid or not present, will send for new ticket. <p> Since it can only be called by logInToMMS(), assumes that the username and password were recently acquired from the login dialogue or pre-specified if that's disabled.
 */
private static boolean acquireTicket(Project project,String pass){
  if (username == null || username.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return false;
  }
  if (pass == null) {
    return false;
  }
  ticketMappings.remove(project);
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return false;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"");
  requestUri.clearParameters();
  ObjectNode credentials=JacksonUtils.getObjectMapper().createObjectNode();
  credentials.put(""String_Node_Str"",username);
  credentials.put(""String_Node_Str"",pass);
  String ticket;
  try {
    ticket=MMSUtils.sendCredentials(project,username,pass);
  }
 catch (  ServerException|IOException|URISyntaxException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return false;
  }
  if (ticket != null) {
    password=""String_Node_Str"";
    ticketMappings.put(project,new TicketMapping(project,ticket));
    return true;
  }
  Application.getInstance().getGUILog().log(""String_Node_Str"");
  password=""String_Node_Str"";
  return false;
}","/** 
 * Uses the stored username and passed password to query MMS for a ticket. Will clear any stored password on attempt. <p> Will first check to see if there is an existing ticket, and if so if it is valid. If valid, will not resend for new ticket. If invalid or not present, will send for new ticket. <p> Since it can only be called by logInToMMS(), assumes that the username and password were recently acquired from the login dialogue or pre-specified if that's disabled.
 */
private static boolean acquireTicket(Project project,String pass){
  if (username == null || username.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return false;
  }
  if (pass == null) {
    return false;
  }
  if (isTicketSet(project)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    MMSLogoutAction.logoutAction(project);
  }
  ticketMappings.remove(project);
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return false;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"");
  requestUri.clearParameters();
  ObjectNode credentials=JacksonUtils.getObjectMapper().createObjectNode();
  credentials.put(""String_Node_Str"",username);
  credentials.put(""String_Node_Str"",pass);
  String ticket;
  try {
    ticket=MMSUtils.sendCredentials(project,username,pass);
  }
 catch (  ServerException|IOException|URISyntaxException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return false;
  }
  if (ticket != null) {
    password=""String_Node_Str"";
    ticketMappings.put(project,new TicketMapping(project,ticket));
    return true;
  }
  Application.getInstance().getGUILog().log(""String_Node_Str"");
  password=""String_Node_Str"";
  return false;
}",0.9588489208633092
88572,"@SuppressWarnings(""String_Node_Str"") @Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject()) && EsiUtils.getLoggedUserName() == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  if (!TicketUtils.isTicketSet(project)) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (pv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  BranchValidator bv=new BranchValidator(project);
  bv.validate(null,false);
  if (bv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (bv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  LocalSyncTransactionCommitListener listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  listener.setDisabled(true);
  SyncElements.lockSyncFolder(project);
  listener.setDisabled(false);
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(Application.getInstance().getProject());
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  if (jmsMessageListener == null) {
    if (MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    return;
  }
  Changelog<String,Element> persistedLocalChangelog=new Changelog<>();
  Collection<SyncElement> persistedLocalSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.LOCAL);
  for (  SyncElement syncElement : persistedLocalSyncElements) {
    persistedLocalChangelog=persistedLocalChangelog.and(SyncElements.buildChangelog(syncElement),(key,value) -> Converters.getIdToElementConverter().apply(key,project));
  }
  Changelog<String,Element> localChangelog=persistedLocalChangelog.and(listener.getInMemoryLocalChangelog());
  Map<String,Element> localCreated=localChangelog.get(Changelog.ChangeType.CREATED), localUpdated=localChangelog.get(Changelog.ChangeType.UPDATED), localDeleted=localChangelog.get(Changelog.ChangeType.DELETED);
  Changelog<String,Void> persistedJmsChangelog=new Changelog<>();
  Collection<SyncElement> persistedJmsSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.MMS);
  for (  SyncElement syncElement : persistedJmsSyncElements) {
    persistedJmsChangelog=persistedJmsChangelog.and(SyncElements.buildChangelog(syncElement));
  }
  Changelog<String,Void> jmsChangelog=persistedJmsChangelog.and(jmsMessageListener.getInMemoryJMSChangelog(),(key,objectNode) -> null);
  Map<String,Void> jmsCreated=jmsChangelog.get(Changelog.ChangeType.CREATED), jmsUpdated=jmsChangelog.get(Changelog.ChangeType.UPDATED), jmsDeleted=jmsChangelog.get(Changelog.ChangeType.DELETED);
  Set<String> elementIdsToGet=new HashSet<>(jmsUpdated.keySet());
  elementIdsToGet.addAll(jmsCreated.keySet());
  if (shouldUpdate && !jmsChangelog.isEmpty()) {
    int size=jmsChangelog.flattenedSize();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + size + ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  Map<String,ObjectNode> jmsJsons=new HashMap<>(elementIdsToGet.size());
  if (!elementIdsToGet.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"" + elementIdsToGet.size() + ""String_Node_Str""+ (elementIdsToGet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    ObjectNode response=null;
    try {
      response=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,elementIdsToGet,progressStatus));
    }
 catch (    ServerException|IOException|URISyntaxException e) {
      if (e instanceof ServerException && ((ServerException)e).getCode() == 404) {
        (response=JacksonUtils.getObjectMapper().createObjectNode()).putArray(""String_Node_Str"");
      }
 else       if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        e.printStackTrace();
        return;
      }
    }
    if (progressStatus.isCancel()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    JsonNode elementsArrayNode;
    if (response == null || (elementsArrayNode=response.get(""String_Node_Str"")) == null || !elementsArrayNode.isArray()) {
      Utils.guilog(""String_Node_Str"");
      return;
    }
    for (    JsonNode jsonNode : elementsArrayNode) {
      if (!jsonNode.isObject()) {
        continue;
      }
      String webId=jsonNode.get(MDKConstants.ID_KEY).asText();
      jmsJsons.put(webId,(ObjectNode)jsonNode);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  Map<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedChanges=new LinkedHashMap<>(), unconflictedChanges=new LinkedHashMap<>();
  localChangelog.findConflicts(jmsChangelog,(change,change2) -> change != null && change2 != null,conflictedChanges,unconflictedChanges);
  Map<String,Element> localElementsToPost=new LinkedHashMap<>(localCreated.size() + localUpdated.size());
  Set<String> deleteElements=new HashSet<>(localDeleted.size());
  Map<String,ObjectNode> jmsElementsToCreateLocally=new LinkedHashMap<>(jmsCreated.size());
  Map<String,Pair<ObjectNode,Element>> jmsElementsToUpdateLocally=new LinkedHashMap<>(jmsUpdated.size());
  Map<String,Element> jmsElementsToDeleteLocally=new LinkedHashMap<>(jmsDeleted.size());
  for (  Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> unconflictedEntry : unconflictedChanges.entrySet()) {
    String id=unconflictedEntry.getKey();
    Changelog.Change<Element> localChange=unconflictedEntry.getValue().getKey();
    Changelog.Change<ObjectNode> jmsChange=unconflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),unconflictedEntry.getValue().getValue().getType()) : null;
    if (shouldCommit && localChange != null) {
      Element element=localChange.getChanged();
switch (localChange.getType()) {
case CREATED:
case UPDATED:
        if (element == null) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
          continue;
        }
      localElementsToPost.put(id,element);
    break;
case DELETED:
  if (element != null && !project.isDisposed(element)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
    continue;
  }
deleteElements.add(id);
break;
}
}
 else if (shouldUpdate && jmsChange != null) {
ObjectNode objectNode=jmsChange.getChanged();
Element element=Converters.getIdToElementConverter().apply(id,project);
switch (jmsChange.getType()) {
case CREATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element != null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
jmsElementsToCreateLocally.put(id,objectNode);
break;
case UPDATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.UPDATED);
continue;
}
jmsElementsToUpdateLocally.put(id,new Pair<>(objectNode,element));
break;
case DELETED:
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
continue;
}
jmsElementsToDeleteLocally.put(id,element);
break;
}
}
}
if (progressStatus.isCancel()) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
return;
}
boolean shouldLogNoLocalChanges=shouldCommit;
if (shouldCommit && !localElementsToPost.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
LinkedList<ObjectNode> postElements=new LinkedList<>();
for (Element element : localElementsToPost.values()) {
ObjectNode elementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
if (elementObjectNode != null) {
postElements.add(elementObjectNode);
}
}
if (postElements.size() > 0) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(postElements.size()) + ""String_Node_Str""+ (postElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,postElements,MMSUtils.JsonBlobType.ELEMENT_JSON);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,true,postElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
}
if (shouldCommit && shouldCommitDeletes && !deleteElements.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(deleteElements.size()) + ""String_Node_Str""+ (deleteElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,deleteElements,MMSUtils.JsonBlobType.ELEMENT_ID);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,true,deleteElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
if (shouldLogNoLocalChanges) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
}
if (shouldUpdate) {
listener.setDisabled(true);
List<ObjectNode> jmsElementsToCreateOrUpdateLocally=new ArrayList<>(jmsElementsToCreateLocally.size() + jmsElementsToUpdateLocally.size());
jmsElementsToCreateOrUpdateLocally.addAll(jmsElementsToCreateLocally.values());
jmsElementsToUpdateLocally.values().forEach(pair -> jmsElementsToCreateOrUpdateLocally.add(pair.getKey()));
UpdateClientElementAction updateClientElementAction=new UpdateClientElementAction(project);
updateClientElementAction.setElementsToUpdate(jmsElementsToCreateOrUpdateLocally);
updateClientElementAction.setElementsToDelete(jmsElementsToDeleteLocally.values().stream().map(Converters.getElementToIdConverter()).filter(id -> id != null).filter(id -> !id.isEmpty()).collect(Collectors.toList()));
updateClientElementAction.run(progressStatus);
failedJmsChangelog=failedJmsChangelog.and(updateClientElementAction.getFailedChangelog(),(id,objectNode) -> null);
listener.setDisabled(false);
}
progressStatus.setDescription(""String_Node_Str"");
Set<Element> localConflictedElements=new HashSet<>();
Set<ObjectNode> jmsConflictedElements=new HashSet<>();
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null && !project.isDisposed(localChange.getChanged())) {
localConflictedElements.add(localChange.getChanged());
}
if (jmsChange != null && jmsChange.getChanged() != null) {
jmsConflictedElements.add(jmsChange.getChanged());
}
}
ElementValidator elementValidator=new ElementValidator(ElementValidator.buildElementPairs(localConflictedElements,project),jmsConflictedElements,project);
elementValidator.run(progressStatus);
if (!elementValidator.getInvalidElements().isEmpty()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + elementValidator.getInvalidElements().size() + ""String_Node_Str""+ (elementValidator.getInvalidElements().size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
vss.add(elementValidator.getValidationSuite());
Utils.displayValidationWindow(project,elementValidator.getValidationSuite(),""String_Node_Str"");
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
if (!elementValidator.getInvalidElements().containsKey(id)) {
continue;
}
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(localChange.getType())) {
failedLocalChangelog.addChange(conflictedEntry.getKey(),localChange.getChanged(),localChange.getType());
}
if (jmsChange != null && jmsChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(jmsChange.getType())) {
failedJmsChangelog.addChange(conflictedEntry.getKey(),null,jmsChange.getType());
}
}
}
listener.getInMemoryLocalChangelog().clear();
jmsMessageListener.getInMemoryJMSChangelog().clear();
listener.setDisabled(true);
if (!SessionManager.getInstance().isSessionCreated()) {
SessionManager.getInstance().createSession(""String_Node_Str"");
}
Changelog<String,Void> unprocessedLocalChangelog=new Changelog<>();
if (!shouldCommit) {
unprocessedLocalChangelog=unprocessedLocalChangelog.and(localChangelog,(s,element) -> null);
}
if (shouldCommit && !shouldCommitDeletes) {
Map<String,Void> unprocessedLocalDeletedChanges=unprocessedLocalChangelog.get(Changelog.ChangeType.DELETED);
for (String key : localChangelog.get(Changelog.ChangeType.DELETED).keySet()) {
unprocessedLocalDeletedChanges.put(key,null);
}
}
unprocessedLocalChangelog=unprocessedLocalChangelog.and(failedLocalChangelog,(s,element) -> null);
try {
SyncElements.setByType(project,SyncElement.Type.LOCAL,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedLocalChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
Changelog<String,Void> unprocessedJmsChangelog=new Changelog<>();
if (!shouldUpdate) {
unprocessedJmsChangelog=unprocessedJmsChangelog.and(jmsChangelog);
}
unprocessedJmsChangelog=unprocessedJmsChangelog.and(failedJmsChangelog);
try {
SyncElements.setByType(project,SyncElement.Type.MMS,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedJmsChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
SessionManager.getInstance().closeSession();
listener.setDisabled(false);
failure=false;
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject()) && EsiUtils.getLoggedUserName() == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  if (!TicketUtils.isTicketSet(project)) {
    Utils.guilog(""String_Node_Str"");
    MMSLoginAction.loginAction(project);
    return;
  }
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (pv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  BranchValidator bv=new BranchValidator(project);
  bv.validate(null,false);
  if (bv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (bv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  LocalSyncTransactionCommitListener listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  listener.setDisabled(true);
  SyncElements.lockSyncFolder(project);
  listener.setDisabled(false);
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(Application.getInstance().getProject());
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  if (jmsMessageListener == null) {
    if (MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    return;
  }
  Changelog<String,Element> persistedLocalChangelog=new Changelog<>();
  Collection<SyncElement> persistedLocalSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.LOCAL);
  for (  SyncElement syncElement : persistedLocalSyncElements) {
    persistedLocalChangelog=persistedLocalChangelog.and(SyncElements.buildChangelog(syncElement),(key,value) -> Converters.getIdToElementConverter().apply(key,project));
  }
  Changelog<String,Element> localChangelog=persistedLocalChangelog.and(listener.getInMemoryLocalChangelog());
  Map<String,Element> localCreated=localChangelog.get(Changelog.ChangeType.CREATED), localUpdated=localChangelog.get(Changelog.ChangeType.UPDATED), localDeleted=localChangelog.get(Changelog.ChangeType.DELETED);
  Changelog<String,Void> persistedJmsChangelog=new Changelog<>();
  Collection<SyncElement> persistedJmsSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.MMS);
  for (  SyncElement syncElement : persistedJmsSyncElements) {
    persistedJmsChangelog=persistedJmsChangelog.and(SyncElements.buildChangelog(syncElement));
  }
  Changelog<String,Void> jmsChangelog=persistedJmsChangelog.and(jmsMessageListener.getInMemoryJMSChangelog(),(key,objectNode) -> null);
  Map<String,Void> jmsCreated=jmsChangelog.get(Changelog.ChangeType.CREATED), jmsUpdated=jmsChangelog.get(Changelog.ChangeType.UPDATED), jmsDeleted=jmsChangelog.get(Changelog.ChangeType.DELETED);
  Set<String> elementIdsToGet=new HashSet<>(jmsUpdated.keySet());
  elementIdsToGet.addAll(jmsCreated.keySet());
  if (shouldUpdate && !jmsChangelog.isEmpty()) {
    int size=jmsChangelog.flattenedSize();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + size + ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  Map<String,ObjectNode> jmsJsons=new HashMap<>(elementIdsToGet.size());
  if (!elementIdsToGet.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"" + elementIdsToGet.size() + ""String_Node_Str""+ (elementIdsToGet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    ObjectNode response=null;
    try {
      response=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,elementIdsToGet,progressStatus));
    }
 catch (    ServerException|IOException|URISyntaxException e) {
      if (e instanceof ServerException && ((ServerException)e).getCode() == 404) {
        (response=JacksonUtils.getObjectMapper().createObjectNode()).putArray(""String_Node_Str"");
      }
 else       if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        e.printStackTrace();
        return;
      }
    }
    if (progressStatus.isCancel()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    JsonNode elementsArrayNode;
    if (response == null || (elementsArrayNode=response.get(""String_Node_Str"")) == null || !elementsArrayNode.isArray()) {
      Utils.guilog(""String_Node_Str"");
      return;
    }
    for (    JsonNode jsonNode : elementsArrayNode) {
      if (!jsonNode.isObject()) {
        continue;
      }
      String webId=jsonNode.get(MDKConstants.ID_KEY).asText();
      jmsJsons.put(webId,(ObjectNode)jsonNode);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  Map<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedChanges=new LinkedHashMap<>(), unconflictedChanges=new LinkedHashMap<>();
  localChangelog.findConflicts(jmsChangelog,(change,change2) -> change != null && change2 != null,conflictedChanges,unconflictedChanges);
  Map<String,Element> localElementsToPost=new LinkedHashMap<>(localCreated.size() + localUpdated.size());
  Set<String> deleteElements=new HashSet<>(localDeleted.size());
  Map<String,ObjectNode> jmsElementsToCreateLocally=new LinkedHashMap<>(jmsCreated.size());
  Map<String,Pair<ObjectNode,Element>> jmsElementsToUpdateLocally=new LinkedHashMap<>(jmsUpdated.size());
  Map<String,Element> jmsElementsToDeleteLocally=new LinkedHashMap<>(jmsDeleted.size());
  for (  Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> unconflictedEntry : unconflictedChanges.entrySet()) {
    String id=unconflictedEntry.getKey();
    Changelog.Change<Element> localChange=unconflictedEntry.getValue().getKey();
    Changelog.Change<ObjectNode> jmsChange=unconflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),unconflictedEntry.getValue().getValue().getType()) : null;
    if (shouldCommit && localChange != null) {
      Element element=localChange.getChanged();
switch (localChange.getType()) {
case CREATED:
case UPDATED:
        if (element == null) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
          continue;
        }
      localElementsToPost.put(id,element);
    break;
case DELETED:
  if (element != null && !project.isDisposed(element)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
    continue;
  }
deleteElements.add(id);
break;
}
}
 else if (shouldUpdate && jmsChange != null) {
ObjectNode objectNode=jmsChange.getChanged();
Element element=Converters.getIdToElementConverter().apply(id,project);
switch (jmsChange.getType()) {
case CREATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element != null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
jmsElementsToCreateLocally.put(id,objectNode);
break;
case UPDATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.UPDATED);
continue;
}
jmsElementsToUpdateLocally.put(id,new Pair<>(objectNode,element));
break;
case DELETED:
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
continue;
}
jmsElementsToDeleteLocally.put(id,element);
break;
}
}
}
if (progressStatus.isCancel()) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
return;
}
boolean shouldLogNoLocalChanges=shouldCommit;
if (shouldCommit && !localElementsToPost.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
LinkedList<ObjectNode> postElements=new LinkedList<>();
for (Element element : localElementsToPost.values()) {
ObjectNode elementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
if (elementObjectNode != null) {
postElements.add(elementObjectNode);
}
}
if (postElements.size() > 0) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(postElements.size()) + ""String_Node_Str""+ (postElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,postElements,MMSUtils.JsonBlobType.ELEMENT_JSON);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,true,postElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
}
if (shouldCommit && shouldCommitDeletes && !deleteElements.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(deleteElements.size()) + ""String_Node_Str""+ (deleteElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,deleteElements,MMSUtils.JsonBlobType.ELEMENT_ID);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,true,deleteElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
if (shouldLogNoLocalChanges) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
}
if (shouldUpdate) {
listener.setDisabled(true);
List<ObjectNode> jmsElementsToCreateOrUpdateLocally=new ArrayList<>(jmsElementsToCreateLocally.size() + jmsElementsToUpdateLocally.size());
jmsElementsToCreateOrUpdateLocally.addAll(jmsElementsToCreateLocally.values());
jmsElementsToUpdateLocally.values().forEach(pair -> jmsElementsToCreateOrUpdateLocally.add(pair.getKey()));
UpdateClientElementAction updateClientElementAction=new UpdateClientElementAction(project);
updateClientElementAction.setElementsToUpdate(jmsElementsToCreateOrUpdateLocally);
updateClientElementAction.setElementsToDelete(jmsElementsToDeleteLocally.values().stream().map(Converters.getElementToIdConverter()).filter(id -> id != null).filter(id -> !id.isEmpty()).collect(Collectors.toList()));
updateClientElementAction.run(progressStatus);
failedJmsChangelog=failedJmsChangelog.and(updateClientElementAction.getFailedChangelog(),(id,objectNode) -> null);
listener.setDisabled(false);
}
progressStatus.setDescription(""String_Node_Str"");
Set<Element> localConflictedElements=new HashSet<>();
Set<ObjectNode> jmsConflictedElements=new HashSet<>();
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null && !project.isDisposed(localChange.getChanged())) {
localConflictedElements.add(localChange.getChanged());
}
if (jmsChange != null && jmsChange.getChanged() != null) {
jmsConflictedElements.add(jmsChange.getChanged());
}
}
ElementValidator elementValidator=new ElementValidator(ElementValidator.buildElementPairs(localConflictedElements,project),jmsConflictedElements,project);
elementValidator.run(progressStatus);
if (!elementValidator.getInvalidElements().isEmpty()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + elementValidator.getInvalidElements().size() + ""String_Node_Str""+ (elementValidator.getInvalidElements().size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
vss.add(elementValidator.getValidationSuite());
Utils.displayValidationWindow(project,elementValidator.getValidationSuite(),""String_Node_Str"");
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
if (!elementValidator.getInvalidElements().containsKey(id)) {
continue;
}
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(localChange.getType())) {
failedLocalChangelog.addChange(conflictedEntry.getKey(),localChange.getChanged(),localChange.getType());
}
if (jmsChange != null && jmsChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(jmsChange.getType())) {
failedJmsChangelog.addChange(conflictedEntry.getKey(),null,jmsChange.getType());
}
}
}
listener.getInMemoryLocalChangelog().clear();
jmsMessageListener.getInMemoryJMSChangelog().clear();
listener.setDisabled(true);
if (!SessionManager.getInstance().isSessionCreated()) {
SessionManager.getInstance().createSession(""String_Node_Str"");
}
Changelog<String,Void> unprocessedLocalChangelog=new Changelog<>();
if (!shouldCommit) {
unprocessedLocalChangelog=unprocessedLocalChangelog.and(localChangelog,(s,element) -> null);
}
if (shouldCommit && !shouldCommitDeletes) {
Map<String,Void> unprocessedLocalDeletedChanges=unprocessedLocalChangelog.get(Changelog.ChangeType.DELETED);
for (String key : localChangelog.get(Changelog.ChangeType.DELETED).keySet()) {
unprocessedLocalDeletedChanges.put(key,null);
}
}
unprocessedLocalChangelog=unprocessedLocalChangelog.and(failedLocalChangelog,(s,element) -> null);
try {
SyncElements.setByType(project,SyncElement.Type.LOCAL,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedLocalChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
Changelog<String,Void> unprocessedJmsChangelog=new Changelog<>();
if (!shouldUpdate) {
unprocessedJmsChangelog=unprocessedJmsChangelog.and(jmsChangelog);
}
unprocessedJmsChangelog=unprocessedJmsChangelog.and(failedJmsChangelog);
try {
SyncElements.setByType(project,SyncElement.Type.MMS,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedJmsChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
SessionManager.getInstance().closeSession();
listener.setDisabled(false);
failure=false;
}",0.998720389500952
88573,"public static boolean shouldEnableJMS(Project project){
  return ((project.getPrimaryModel() != null) && project.isRemote() && MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()&& StereotypesHelper.hasStereotype(project.getPrimaryModel(),""String_Node_Str""));
}","public static boolean shouldEnableJMS(Project project){
  String url;
  return ((project.getPrimaryModel() != null) && project.isRemote() && MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()&& StereotypesHelper.hasStereotype(project.getPrimaryModel(),""String_Node_Str"")) && (url=((String)StereotypesHelper.getStereotypePropertyFirst(project.getPrimaryModel(),""String_Node_Str"",""String_Node_Str""))) != null && !url.isEmpty();
}",0.7617689015691869
88574,"/** 
 * Logs in to MMS, using pre-specified credentials or prompting the user for new credentials. <p> If username and password have been pre-specified, will not display the dialog even if popups are enabled. Else will display the login dialog and use the returned value.
 * @return TRUE if successfully logged in to MMS, FALSE otherwise.Will always return FALSE if popups are disabled and username/password are not pre-specified
 */
public static boolean acquireMmsTicket(Project project){
  if (!username.isEmpty() && !password.isEmpty()) {
    return acquireTicket(project,password);
  }
 else   if (!Utils.isPopupsDisabled()) {
    return acquireTicket(project,getUserCredentialsDialog());
  }
 else {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return false;
  }
}","/** 
 * Logs in to MMS, using pre-specified credentials or prompting the user for new credentials. <p> If username and password have been pre-specified, will not display the dialog even if popups are enabled. Else will display the login dialog and use the returned value.
 * @return TRUE if successfully logged in to MMS, FALSE otherwise.Will always return FALSE if popups are disabled and username/password are not pre-specified
 */
public static boolean acquireMmsTicket(Project project){
  if (!username.isEmpty() && !password.isEmpty()) {
    return acquireTicket(project,password);
  }
 else   if (!Utils.isPopupsDisabled()) {
    String password=getUserCredentialsDialog();
    if (password == null) {
      return false;
    }
    return acquireTicket(project,password);
  }
 else {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return false;
  }
}",0.918757467144564
88575,"@Override public void configure(ActionsManager manager){
  NMAction category=manager.getActionFor(""String_Node_Str"");
  if (category == null) {
    category=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
  }
  ((ActionsCategory)category).setNested(true);
  manager.addCategory((ActionsCategory)category);
  MMSLoginAction login=new MMSLoginAction();
  category.addAction(login);
  MMSLogoutAction logout=new MMSLogoutAction();
  category.addAction(logout);
  UpdateAllDocumentsAction uada=new UpdateAllDocumentsAction();
  category.addAction(uada);
  if (MDKOptionsGroup.getMDKOptions().isMDKAdvancedOptions()) {
    MDActionsCategory validateCategory=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
    validateCategory.setNested(true);
    category.addAction(validateCategory);
    validateCategory.addAction(new ValidateBranchesAction());
  }
}","@Override public void configure(ActionsManager manager){
  NMAction category=manager.getActionFor(""String_Node_Str"");
  if (category == null) {
    category=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
  }
  ((ActionsCategory)category).setNested(true);
  manager.addCategory((ActionsCategory)category);
  MMSLoginAction login=new MMSLoginAction();
  category.addAction(login);
  MMSLogoutAction logout=new MMSLogoutAction();
  category.addAction(logout);
  GenerateAllDocumentsAction uada=new GenerateAllDocumentsAction();
  category.addAction(uada);
  if (MDKOptionsGroup.getMDKOptions().isMDKAdvancedOptions()) {
    MDActionsCategory validateCategory=new MDActionsCategory(""String_Node_Str"",""String_Node_Str"");
    validateCategory.setNested(true);
    category.addAction(validateCategory);
    validateCategory.addAction(new ValidateBranchesAction());
  }
}",0.9908466819221968
88576,"public static void generateAllDocuments(Project project){
  UpdateAllDocumentsAction uad=new UpdateAllDocumentsAction();
  validationWindow=new MDKValidationWindow(uad.updateAction(project));
}","public static void generateAllDocuments(Project project){
  GenerateAllDocumentsAction uad=new GenerateAllDocumentsAction();
  validationWindow=new MDKValidationWindow(uad.updateAction(project));
}",0.958974358974359
88577,"@Override public void run(ProgressStatus progressStatus){
  progressStatus.init(""String_Node_Str"",6);
  if (SessionManager.getInstance().isSessionCreated(project)) {
    SessionManager.getInstance().closeSession(project);
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(1);
  DocumentValidator dv=new DocumentValidator(start);
  dv.validateDocument();
  if (dv.isFatal()) {
    dv.printErrors(false);
    return;
  }
  DocumentGenerator dg=new DocumentGenerator(start,dv,null,false);
  Document dge=dg.parseDocument(true,recurse,false);
  new PostProcessor().process(dge);
  DocBookOutputVisitor docBookOutputVisitor=new DocBookOutputVisitor(true);
  dge.accept(docBookOutputVisitor);
  DBBook book=docBookOutputVisitor.getBook();
  if (book == null) {
    return;
  }
  ViewHierarchyVisitor viewHierarchyVisitor=new ViewHierarchyVisitor();
  dge.accept(viewHierarchyVisitor);
  Map<String,Pair<ObjectNode,InstanceSpecification>> instanceSpecificationMap=new LinkedHashMap<>();
  Map<String,Pair<ObjectNode,Slot>> slotMap=new LinkedHashMap<>();
  Map<String,ViewMapping> viewMap=new LinkedHashMap<>(viewHierarchyVisitor.getView2ViewElements().size());
  for (  Element view : viewHierarchyVisitor.getView2ViewElements().keySet()) {
    if (processedElements.contains(view)) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
      continue;
    }
    ViewMapping viewMapping=viewMap.containsKey(Converters.getElementToIdConverter().apply(view)) ? viewMap.get(Converters.getElementToIdConverter().apply(view)) : new ViewMapping();
    viewMapping.setElement(view);
    viewMap.put(Converters.getElementToIdConverter().apply(view),viewMapping);
  }
  List<Constraint> constraintsToBeDeleted=new ArrayList<>(viewMap.size());
  for (  ViewMapping viewMapping : viewMap.values()) {
    Element view=viewMapping.getElement();
    if (view == null) {
      continue;
    }
    Constraint constraint=Utils.getViewConstraint(view);
    if (constraint != null) {
      constraintsToBeDeleted.add(constraint);
    }
  }
  if (!constraintsToBeDeleted.isEmpty()) {
    SessionManager.getInstance().createSession(project,""String_Node_Str"");
    for (    Constraint constraint : constraintsToBeDeleted) {
      if (constraint.isEditable()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(constraint));
        try {
          ModelElementsManager.getInstance().removeElement(constraint);
        }
 catch (        ReadOnlyElementException e) {
          updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str""));
          failure=true;
        }
      }
 else {
        updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str""));
        failure=true;
      }
    }
    SessionManager.getInstance().closeSession(project);
  }
  if (failure) {
    if (showValidation) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
    return;
  }
  if (handleCancel(progressStatus)) {
    return;
  }
  LocalSyncTransactionCommitListener localSyncTransactionCommitListener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  if (SessionManager.getInstance().isSessionCreated(project)) {
    SessionManager.getInstance().closeSession(project);
  }
  SessionManager.getInstance().createSession(project,""String_Node_Str"");
  if (localSyncTransactionCommitListener != null) {
    localSyncTransactionCommitListener.setDisabled(true);
  }
  List<String> viewIDs=new ArrayList<>();
  if (!viewMap.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(2);
    ObjectNode viewResponse;
    try {
      viewResponse=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,viewMap.keySet(),progressStatus));
    }
 catch (    ServerException|IOException|URISyntaxException e) {
      failure=true;
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
    JsonNode viewElementsJsonArray;
    if (viewResponse != null && (viewElementsJsonArray=viewResponse.get(""String_Node_Str"")) != null && viewElementsJsonArray.isArray()) {
      Queue<String> instanceIDs=new LinkedList<>();
      Queue<String> slotIDs=new LinkedList<>();
      Property generatedFromViewProperty=Utils.getGeneratedFromViewProperty(project), generatedFromElementProperty=Utils.getGeneratedFromElementProperty(project);
      for (      JsonNode elementJsonNode : viewElementsJsonArray) {
        if (!elementJsonNode.isObject()) {
          continue;
        }
        ObjectNode elementObjectNode=(ObjectNode)elementJsonNode;
        JsonNode viewOperandJsonNode=JacksonUtils.getAtPath(elementObjectNode,""String_Node_Str"" + MDKConstants.CONTENTS_KEY + ""String_Node_Str""), sysmlIdJson=elementObjectNode.get(MDKConstants.ID_KEY);
        String sysmlId;
        if (sysmlIdJson != null && sysmlIdJson.isTextual() && !(sysmlId=sysmlIdJson.asText()).isEmpty()) {
          viewIDs.add(sysmlId);
          if (viewOperandJsonNode != null && viewOperandJsonNode.isArray()) {
            List<String> viewInstanceIDs=new ArrayList<>(viewOperandJsonNode.size());
            for (            JsonNode viewOperandJson : viewOperandJsonNode) {
              JsonNode instanceIdJsonNode=viewOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
              String instanceId;
              if (instanceIdJsonNode != null && instanceIdJsonNode.isTextual() && !(instanceId=instanceIdJsonNode.asText()).isEmpty()) {
                if (generatedFromViewProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                }
                if (generatedFromElementProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                }
                instanceIDs.add(instanceId);
                viewInstanceIDs.add(instanceId);
              }
            }
            ViewMapping viewMapping=viewMap.containsKey(sysmlId) ? viewMap.get(sysmlId) : new ViewMapping();
            viewMapping.setObjectNode(elementObjectNode);
            viewMapping.setInstanceIDs(viewInstanceIDs);
            viewMap.put(sysmlId,viewMapping);
          }
        }
      }
      List<ObjectNode> instanceObjectNodes=new ArrayList<>();
      List<ObjectNode> slotObjectNodes=new ArrayList<>();
      while (!instanceIDs.isEmpty() && !slotIDs.isEmpty()) {
        if (handleCancel(progressStatus)) {
          return;
        }
        List<String> elementIDs=new ArrayList<>(instanceIDs);
        elementIDs.addAll(slotIDs);
        ObjectNode instanceAndSlotResponse;
        try {
          instanceAndSlotResponse=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,elementIDs,progressStatus));
        }
 catch (        ServerException|IOException|URISyntaxException e) {
          failure=true;
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          e.printStackTrace();
          SessionManager.getInstance().cancelSession(project);
          return;
        }
        instanceIDs.clear();
        slotIDs.clear();
        JsonNode instanceAndSlotElementsJsonArray;
        if (instanceAndSlotResponse != null && (instanceAndSlotElementsJsonArray=instanceAndSlotResponse.get(""String_Node_Str"")) != null && instanceAndSlotElementsJsonArray.isArray()) {
          for (          JsonNode elementJson : instanceAndSlotElementsJsonArray) {
            JsonNode instanceOperandJsonArray=JacksonUtils.getAtPath(elementJson,""String_Node_Str"");
            if (instanceOperandJsonArray != null && instanceOperandJsonArray.isArray()) {
              for (              JsonNode instanceOperandJson : instanceOperandJsonArray) {
                JsonNode instanceIdJson=instanceOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
                String instanceId;
                if (instanceIdJson != null && instanceIdJson.isTextual() && !(instanceId=instanceIdJson.asText()).isEmpty()) {
                  if (generatedFromViewProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                  }
                  if (generatedFromElementProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                  }
                  instanceIDs.add(instanceId);
                }
              }
            }
            JsonNode typeJson=elementJson.get(MDKConstants.TYPE_KEY);
            if (typeJson.isTextual() && elementJson.isObject()) {
              (typeJson.asText().equalsIgnoreCase(""String_Node_Str"") ? slotObjectNodes : instanceObjectNodes).add((ObjectNode)elementJson);
            }
          }
        }
      }
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(3);
      EMFImporter emfImporter=new EMFImporter(){
        @Override public List<PreProcessor> getPreProcessors(){
          if (preProcessors == null) {
            preProcessors=new ArrayList<>(super.getPreProcessors());
            preProcessors.remove(PreProcessor.SYSML_ID_VALIDATION);
          }
          return preProcessors;
        }
        @Override public List<EStructuralFeatureOverride> getEStructuralFeatureOverrides(){
          if (eStructuralFeatureOverrides == null) {
            eStructuralFeatureOverrides=new ArrayList<>(super.getEStructuralFeatureOverrides());
            eStructuralFeatureOverrides.remove(EStructuralFeatureOverride.OWNER);
            eStructuralFeatureOverrides.add(new EStructuralFeatureOverride(EStructuralFeatureOverride.OWNER.getPredicate(),(objectNode,eStructuralFeature,project,strict,element) -> {
              if (element instanceof InstanceSpecification) {
                element.setOwner(project.getPrimaryModel());
                return element;
              }
              return EStructuralFeatureOverride.OWNER.getFunction().apply(objectNode,eStructuralFeature,project,strict,element);
            }
));
          }
          return eStructuralFeatureOverrides;
        }
      }
;
      for (      Boolean strict : Arrays.asList(false,true)) {
        ListIterator<ObjectNode> instanceObjectNodesIterator=instanceObjectNodes.listIterator(instanceObjectNodes.size());
        while (instanceObjectNodesIterator.hasPrevious()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode instanceObjectNode=instanceObjectNodesIterator.previous();
          try {
            Changelog.Change<Element> change=emfImporter.apply(instanceObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof InstanceSpecification) {
              instanceSpecificationMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(instanceObjectNode,(InstanceSpecification)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + instanceObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            instanceObjectNodesIterator.remove();
          }
        }
        ListIterator<ObjectNode> slotObjectNodesIterator=slotObjectNodes.listIterator();
        while (slotObjectNodesIterator.hasNext()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode slotObjectNode=slotObjectNodesIterator.next();
          try {
            Changelog.Change<Element> change=emfImporter.apply(slotObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof Slot) {
              slotMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(slotObjectNode,(Slot)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + slotObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            slotObjectNodesIterator.remove();
          }
        }
      }
      for (      ViewMapping viewMapping : viewMap.values()) {
        Element view=viewMapping.getElement();
        if (handleCancel(progressStatus)) {
          return;
        }
        ObjectNode viewObjectNode=viewMapping.getObjectNode();
        if (viewObjectNode == null) {
          continue;
        }
        JsonNode viewContentsJsonNode=viewObjectNode.get(MDKConstants.CONTENTS_KEY);
        if (viewContentsJsonNode == null || !viewContentsJsonNode.isObject()) {
          continue;
        }
        try {
          Changelog.Change<Element> change=Converters.getJsonToElementConverter().apply((ObjectNode)viewContentsJsonNode,project,false);
          if (change.getChanged() != null && change.getChanged() instanceof Expression) {
            instanceUtils.getOrCreateViewConstraint(view).setSpecification((Expression)change.getChanged());
          }
        }
 catch (        ImportException|ReadOnlyElementException e) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
          continue;
        }
      }
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(4);
  DBAlfrescoVisitor dbAlfrescoVisitor=new DBAlfrescoVisitor(recurse,true);
  try {
    book.accept(dbAlfrescoVisitor);
  }
 catch (  Exception e) {
    Utils.printException(e);
    e.printStackTrace();
  }
  Map<Element,List<PresentationElementInstance>> view2pe=dbAlfrescoVisitor.getView2Pe();
  Map<Element,List<PresentationElementInstance>> view2unused=dbAlfrescoVisitor.getView2Unused();
  List<Element> views=instanceUtils.getViewProcessOrder(start,dbAlfrescoVisitor.getHierarchyElements());
  views.removeAll(processedElements);
  Set<Element> skippedViews=new HashSet<>();
  for (  Element view : views) {
    if (ProjectUtilities.isElementInAttachedProject(view)) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewInProject.addViolation(violation);
      skippedViews.add(view);
    }
    if (!viewIDs.contains(Converters.getElementToIdConverter().apply(view))) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewDoesNotExist.addViolation(violation);
      skippedViews.add(view);
    }
  }
  if (failure) {
    if (showValidation) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
    SessionManager.getInstance().cancelSession(project);
    return;
  }
  try {
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      handlePes(view2pe.get(view),null);
      instanceUtils.updateOrCreateConstraintFromPresentationElements(view,view2pe.get(view));
    }
    if (handleCancel(progressStatus)) {
      return;
    }
    LinkedList<ObjectNode> elementsToCommit=new LinkedList<>();
    Queue<Pair<InstanceSpecification,Element>> instanceToView=new LinkedList<>();
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      ObjectNode clientViewJson=Converters.getElementToJsonConverter().apply(view,project);
      if (clientViewJson == null) {
        skippedViews.add(view);
        continue;
      }
      Object o;
      ObjectNode serverViewJson=(o=viewMap.get(Converters.getElementToIdConverter().apply(view))) != null ? ((ViewMapping)o).getObjectNode() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientViewJson,serverViewJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientViewJson,serverViewJson).toString());
        }
        elementsToCommit.add(clientViewJson);
      }
      for (      PresentationElementInstance presentationElementInstance : view2pe.get(view)) {
        if (presentationElementInstance.getInstance() != null) {
          instanceToView.add(new Pair<>(presentationElementInstance.getInstance(),view));
        }
      }
    }
    String viewInstanceBinId=MDKConstants.VIEW_INSTANCES_BIN_PREFIX + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    while (!instanceToView.isEmpty()) {
      Pair<InstanceSpecification,Element> pair=instanceToView.remove();
      InstanceSpecification instance=pair.getKey();
      List<InstanceSpecification> subInstances=instanceUtils.getCurrentInstances(instance,pair.getValue()).getAll();
      for (      InstanceSpecification subInstance : subInstances) {
        instanceToView.add(new Pair<>(subInstance,pair.getValue()));
      }
      ObjectNode clientInstanceSpecificationJson=Converters.getElementToJsonConverter().apply(instance,project);
      if (clientInstanceSpecificationJson == null) {
        continue;
      }
      clientInstanceSpecificationJson.put(MDKConstants.OWNER_ID_KEY,viewInstanceBinId);
      ObjectNode serverInstanceSpecificationJson=instanceSpecificationMap.containsKey(Converters.getElementToIdConverter().apply(instance)) ? instanceSpecificationMap.get(Converters.getElementToIdConverter().apply(instance)).getKey() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientInstanceSpecificationJson,serverInstanceSpecificationJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(instance) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientInstanceSpecificationJson,serverInstanceSpecificationJson).toString());
        }
        elementsToCommit.add(clientInstanceSpecificationJson);
      }
      for (      Slot slot : instance.getSlot()) {
        ObjectNode clientSlotJson=Converters.getElementToJsonConverter().apply(slot,project);
        if (clientSlotJson == null) {
          continue;
        }
        JsonNode serverSlotJson=slotMap.containsKey(Converters.getElementToIdConverter().apply(slot)) ? slotMap.get(Converters.getElementToIdConverter().apply(slot)).getKey() : null;
        if (!JsonEquivalencePredicate.getInstance().test(clientSlotJson,serverSlotJson)) {
          elementsToCommit.add(clientSlotJson);
          if (MDUtils.isDeveloperMode()) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(slot) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientSlotJson,serverSlotJson).toString());
          }
        }
      }
    }
    if (handleCancel(progressStatus)) {
      return;
    }
    boolean changed=false;
    if (elementsToCommit.size() > 0) {
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(5);
      Application.getInstance().getGUILog().log(""String_Node_Str"" + elementsToCommit.size() + ""String_Node_Str""+ (elementsToCommit.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,elementsToCommit,MMSUtils.JsonBlobType.ELEMENT_JSON);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,true,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    Set<String> mmsElementsToDelete=new HashSet<>();
    for (    List<PresentationElementInstance> presentationElementInstances : view2unused.values()) {
      for (      PresentationElementInstance presentationElementInstance : presentationElementInstances) {
        if (presentationElementInstance.getInstance() == null) {
          continue;
        }
        String id=Converters.getElementToIdConverter().apply(presentationElementInstance.getInstance());
        if (id == null) {
          continue;
        }
        mmsElementsToDelete.add(id);
      }
    }
    if (elementsToCommit.size() > 0) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + mmsElementsToDelete.size() + ""String_Node_Str""+ (mmsElementsToDelete.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,mmsElementsToDelete,MMSUtils.JsonBlobType.ELEMENT_ID);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,true,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    if (!changed) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(6);
    Set<Element> elementsToDelete=new HashSet<>();
    for (    Pair<ObjectNode,Slot> pair : slotMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Pair<ObjectNode,InstanceSpecification> pair : instanceSpecificationMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Element element : views) {
      Constraint constraint=Utils.getViewConstraint(element);
      if (constraint == null) {
        continue;
      }
      elementsToDelete.add(constraint);
      ValueSpecification valueSpecification=constraint.getSpecification();
      if (valueSpecification == null) {
        continue;
      }
      elementsToDelete.add(valueSpecification);
      List<ValueSpecification> operands;
      if (!(valueSpecification instanceof Expression) || (operands=((Expression)valueSpecification).getOperand()) == null) {
        continue;
      }
      for (      ValueSpecification operand : operands) {
        elementsToDelete.add(operand);
        InstanceSpecification instanceSpecification;
        if (!(operand instanceof InstanceValue) || (instanceSpecification=((InstanceValue)operand).getInstance()) == null) {
          continue;
        }
        elementsToDelete.add(instanceSpecification);
        for (        Slot slot : instanceSpecification.getSlot()) {
          elementsToDelete.add(slot);
          elementsToDelete.addAll(slot.getValue());
        }
      }
    }
    for (    Element element : elementsToDelete) {
      try {
        ModelElementsManager.getInstance().removeElement(element);
      }
 catch (      ReadOnlyElementException ignored) {
        System.out.println(""String_Node_Str"" + element.getLocalID());
      }
    }
    processedElements.addAll(views);
  }
 catch (  Exception e) {
    failure=true;
    Utils.printException(e);
  }
 finally {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().cancelSession(project);
    }
    if (localSyncTransactionCommitListener != null) {
      localSyncTransactionCommitListener.setDisabled(false);
    }
  }
  ImageValidator iv=new ImageValidator(dbAlfrescoVisitor.getImages(),images);
  iv.validate(project);
  for (  ValidationRule validationRule : iv.getSuite().getValidationRules()) {
    for (    ValidationRuleViolation validationRuleViolation : validationRule.getViolations()) {
      if (!validationRuleViolation.getActions().isEmpty()) {
        validationRuleViolation.getActions().get(0).actionPerformed(null);
      }
    }
  }
  if (showValidation) {
    if (suite.hasErrors()) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
  }
}","@Override public void run(ProgressStatus progressStatus){
  progressStatus.init(""String_Node_Str"",6);
  if (manageSesssions) {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().closeSession(project);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(1);
  DocumentValidator dv=new DocumentValidator(start);
  dv.validateDocument();
  if (dv.isFatal()) {
    dv.printErrors(false);
    return;
  }
  DocumentGenerator dg=new DocumentGenerator(start,dv,null,false);
  Document dge=dg.parseDocument(true,recurse,false);
  new PostProcessor().process(dge);
  DocBookOutputVisitor docBookOutputVisitor=new DocBookOutputVisitor(true);
  dge.accept(docBookOutputVisitor);
  DBBook book=docBookOutputVisitor.getBook();
  if (book == null) {
    return;
  }
  ViewHierarchyVisitor viewHierarchyVisitor=new ViewHierarchyVisitor();
  dge.accept(viewHierarchyVisitor);
  Map<String,Pair<ObjectNode,InstanceSpecification>> instanceSpecificationMap=new LinkedHashMap<>();
  Map<String,Pair<ObjectNode,Slot>> slotMap=new LinkedHashMap<>();
  Map<String,ViewMapping> viewMap=new LinkedHashMap<>(viewHierarchyVisitor.getView2ViewElements().size());
  for (  Element view : viewHierarchyVisitor.getView2ViewElements().keySet()) {
    if (processedElements.contains(view)) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
      continue;
    }
    ViewMapping viewMapping=viewMap.containsKey(Converters.getElementToIdConverter().apply(view)) ? viewMap.get(Converters.getElementToIdConverter().apply(view)) : new ViewMapping();
    viewMapping.setElement(view);
    viewMap.put(Converters.getElementToIdConverter().apply(view),viewMapping);
  }
  List<Constraint> constraintsToBeDeleted=new ArrayList<>(viewMap.size());
  for (  ViewMapping viewMapping : viewMap.values()) {
    Element view=viewMapping.getElement();
    if (view == null) {
      continue;
    }
    Constraint constraint=Utils.getViewConstraint(view);
    if (constraint != null) {
      constraintsToBeDeleted.add(constraint);
    }
  }
  if (!constraintsToBeDeleted.isEmpty()) {
    if (manageSesssions) {
      SessionManager.getInstance().createSession(project,""String_Node_Str"");
    }
    for (    Constraint constraint : constraintsToBeDeleted) {
      if (constraint.isEditable()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(constraint));
        try {
          ModelElementsManager.getInstance().removeElement(constraint);
        }
 catch (        ReadOnlyElementException e) {
          updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str""));
          failure=true;
        }
      }
 else {
        updateFailed.addViolation(new ValidationRuleViolation(constraint,""String_Node_Str""));
        failure=true;
      }
    }
    if (manageSesssions) {
      SessionManager.getInstance().closeSession(project);
    }
  }
  if (failure) {
    if (showValidation) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
    return;
  }
  if (handleCancel(progressStatus)) {
    return;
  }
  LocalSyncTransactionCommitListener localSyncTransactionCommitListener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  if (manageSesssions) {
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().closeSession(project);
    }
    SessionManager.getInstance().createSession(project,""String_Node_Str"");
  }
  if (localSyncTransactionCommitListener != null) {
    localSyncTransactionCommitListener.setDisabled(true);
  }
  List<String> viewIDs=new ArrayList<>();
  if (!viewMap.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(2);
    ObjectNode viewResponse;
    try {
      viewResponse=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,viewMap.keySet(),progressStatus));
    }
 catch (    ServerException|IOException|URISyntaxException e) {
      failure=true;
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      e.printStackTrace();
      return;
    }
    JsonNode viewElementsJsonArray;
    if (viewResponse != null && (viewElementsJsonArray=viewResponse.get(""String_Node_Str"")) != null && viewElementsJsonArray.isArray()) {
      Queue<String> instanceIDs=new LinkedList<>();
      Queue<String> slotIDs=new LinkedList<>();
      Property generatedFromViewProperty=Utils.getGeneratedFromViewProperty(project), generatedFromElementProperty=Utils.getGeneratedFromElementProperty(project);
      for (      JsonNode elementJsonNode : viewElementsJsonArray) {
        if (!elementJsonNode.isObject()) {
          continue;
        }
        ObjectNode elementObjectNode=(ObjectNode)elementJsonNode;
        JsonNode viewOperandJsonNode=JacksonUtils.getAtPath(elementObjectNode,""String_Node_Str"" + MDKConstants.CONTENTS_KEY + ""String_Node_Str""), sysmlIdJson=elementObjectNode.get(MDKConstants.ID_KEY);
        String sysmlId;
        if (sysmlIdJson != null && sysmlIdJson.isTextual() && !(sysmlId=sysmlIdJson.asText()).isEmpty()) {
          viewIDs.add(sysmlId);
          if (viewOperandJsonNode != null && viewOperandJsonNode.isArray()) {
            List<String> viewInstanceIDs=new ArrayList<>(viewOperandJsonNode.size());
            for (            JsonNode viewOperandJson : viewOperandJsonNode) {
              JsonNode instanceIdJsonNode=viewOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
              String instanceId;
              if (instanceIdJsonNode != null && instanceIdJsonNode.isTextual() && !(instanceId=instanceIdJsonNode.asText()).isEmpty()) {
                if (generatedFromViewProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                }
                if (generatedFromElementProperty != null) {
                  slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                }
                instanceIDs.add(instanceId);
                viewInstanceIDs.add(instanceId);
              }
            }
            ViewMapping viewMapping=viewMap.containsKey(sysmlId) ? viewMap.get(sysmlId) : new ViewMapping();
            viewMapping.setObjectNode(elementObjectNode);
            viewMapping.setInstanceIDs(viewInstanceIDs);
            viewMap.put(sysmlId,viewMapping);
          }
        }
      }
      List<ObjectNode> instanceObjectNodes=new ArrayList<>();
      List<ObjectNode> slotObjectNodes=new ArrayList<>();
      while (!instanceIDs.isEmpty() && !slotIDs.isEmpty()) {
        if (handleCancel(progressStatus)) {
          return;
        }
        List<String> elementIDs=new ArrayList<>(instanceIDs);
        elementIDs.addAll(slotIDs);
        ObjectNode instanceAndSlotResponse;
        try {
          instanceAndSlotResponse=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,elementIDs,progressStatus));
        }
 catch (        ServerException|IOException|URISyntaxException e) {
          failure=true;
          Application.getInstance().getGUILog().log(""String_Node_Str"");
          e.printStackTrace();
          if (manageSesssions) {
            SessionManager.getInstance().cancelSession(project);
          }
          return;
        }
        instanceIDs.clear();
        slotIDs.clear();
        JsonNode instanceAndSlotElementsJsonArray;
        if (instanceAndSlotResponse != null && (instanceAndSlotElementsJsonArray=instanceAndSlotResponse.get(""String_Node_Str"")) != null && instanceAndSlotElementsJsonArray.isArray()) {
          for (          JsonNode elementJson : instanceAndSlotElementsJsonArray) {
            JsonNode instanceOperandJsonArray=JacksonUtils.getAtPath(elementJson,""String_Node_Str"");
            if (instanceOperandJsonArray != null && instanceOperandJsonArray.isArray()) {
              for (              JsonNode instanceOperandJson : instanceOperandJsonArray) {
                JsonNode instanceIdJson=instanceOperandJson.get(MDKConstants.INSTANCE_ID_KEY);
                String instanceId;
                if (instanceIdJson != null && instanceIdJson.isTextual() && !(instanceId=instanceIdJson.asText()).isEmpty()) {
                  if (generatedFromViewProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromViewProperty));
                  }
                  if (generatedFromElementProperty != null) {
                    slotIDs.add(instanceId + MDKConstants.SLOT_ID_SEPARATOR + Converters.getElementToIdConverter().apply(generatedFromElementProperty));
                  }
                  instanceIDs.add(instanceId);
                }
              }
            }
            JsonNode typeJson=elementJson.get(MDKConstants.TYPE_KEY);
            if (typeJson.isTextual() && elementJson.isObject()) {
              (typeJson.asText().equalsIgnoreCase(""String_Node_Str"") ? slotObjectNodes : instanceObjectNodes).add((ObjectNode)elementJson);
            }
          }
        }
      }
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(3);
      EMFImporter emfImporter=new EMFImporter(){
        @Override public List<PreProcessor> getPreProcessors(){
          if (preProcessors == null) {
            preProcessors=new ArrayList<>(super.getPreProcessors());
            preProcessors.remove(PreProcessor.SYSML_ID_VALIDATION);
          }
          return preProcessors;
        }
        @Override public List<EStructuralFeatureOverride> getEStructuralFeatureOverrides(){
          if (eStructuralFeatureOverrides == null) {
            eStructuralFeatureOverrides=new ArrayList<>(super.getEStructuralFeatureOverrides());
            eStructuralFeatureOverrides.remove(EStructuralFeatureOverride.OWNER);
            eStructuralFeatureOverrides.add(new EStructuralFeatureOverride(EStructuralFeatureOverride.OWNER.getPredicate(),(objectNode,eStructuralFeature,project,strict,element) -> {
              if (element instanceof InstanceSpecification) {
                element.setOwner(project.getPrimaryModel());
                return element;
              }
              return EStructuralFeatureOverride.OWNER.getFunction().apply(objectNode,eStructuralFeature,project,strict,element);
            }
));
          }
          return eStructuralFeatureOverrides;
        }
      }
;
      for (      Boolean strict : Arrays.asList(false,true)) {
        ListIterator<ObjectNode> instanceObjectNodesIterator=instanceObjectNodes.listIterator(instanceObjectNodes.size());
        while (instanceObjectNodesIterator.hasPrevious()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode instanceObjectNode=instanceObjectNodesIterator.previous();
          try {
            Changelog.Change<Element> change=emfImporter.apply(instanceObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof InstanceSpecification) {
              instanceSpecificationMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(instanceObjectNode,(InstanceSpecification)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + instanceObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            instanceObjectNodesIterator.remove();
          }
        }
        ListIterator<ObjectNode> slotObjectNodesIterator=slotObjectNodes.listIterator();
        while (slotObjectNodesIterator.hasNext()) {
          if (handleCancel(progressStatus)) {
            return;
          }
          ObjectNode slotObjectNode=slotObjectNodesIterator.next();
          try {
            Changelog.Change<Element> change=emfImporter.apply(slotObjectNode,project,strict);
            Element element=change != null ? change.getChanged() : null;
            if (element instanceof Slot) {
              slotMap.put(Converters.getElementToIdConverter().apply(element),new Pair<>(slotObjectNode,(Slot)element));
            }
          }
 catch (          ImportException|ReadOnlyElementException e) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + slotObjectNode.get(MDKConstants.ID_KEY) + ""String_Node_Str""+ e.getMessage());
            slotObjectNodesIterator.remove();
          }
        }
      }
      for (      ViewMapping viewMapping : viewMap.values()) {
        Element view=viewMapping.getElement();
        if (handleCancel(progressStatus)) {
          return;
        }
        ObjectNode viewObjectNode=viewMapping.getObjectNode();
        if (viewObjectNode == null) {
          continue;
        }
        JsonNode viewContentsJsonNode=viewObjectNode.get(MDKConstants.CONTENTS_KEY);
        if (viewContentsJsonNode == null || !viewContentsJsonNode.isObject()) {
          continue;
        }
        try {
          Changelog.Change<Element> change=Converters.getJsonToElementConverter().apply((ObjectNode)viewContentsJsonNode,project,false);
          if (change.getChanged() != null && change.getChanged() instanceof Expression) {
            instanceUtils.getOrCreateViewConstraint(view).setSpecification((Expression)change.getChanged());
          }
        }
 catch (        ImportException|ReadOnlyElementException e) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str"");
          continue;
        }
      }
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  progressStatus.setCurrent(4);
  DBAlfrescoVisitor dbAlfrescoVisitor=new DBAlfrescoVisitor(recurse,true);
  try {
    book.accept(dbAlfrescoVisitor);
  }
 catch (  Exception e) {
    Utils.printException(e);
    e.printStackTrace();
  }
  Map<Element,List<PresentationElementInstance>> view2pe=dbAlfrescoVisitor.getView2Pe();
  Map<Element,List<PresentationElementInstance>> view2unused=dbAlfrescoVisitor.getView2Unused();
  List<Element> views=instanceUtils.getViewProcessOrder(start,dbAlfrescoVisitor.getHierarchyElements());
  views.removeAll(processedElements);
  Set<Element> skippedViews=new HashSet<>();
  for (  Element view : views) {
    if (ProjectUtilities.isElementInAttachedProject(view)) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewInProject.addViolation(violation);
      skippedViews.add(view);
    }
    if (!viewIDs.contains(Converters.getElementToIdConverter().apply(view))) {
      ValidationRuleViolation violation=new ValidationRuleViolation(view,""String_Node_Str"");
      viewDoesNotExist.addViolation(violation);
      skippedViews.add(view);
    }
  }
  if (failure) {
    if (showValidation) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
    if (manageSesssions) {
      SessionManager.getInstance().cancelSession(project);
    }
    return;
  }
  try {
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      handlePes(view2pe.get(view),null);
      instanceUtils.updateOrCreateConstraintFromPresentationElements(view,view2pe.get(view));
    }
    if (handleCancel(progressStatus)) {
      return;
    }
    LinkedList<ObjectNode> elementsToCommit=new LinkedList<>();
    Queue<Pair<InstanceSpecification,Element>> instanceToView=new LinkedList<>();
    for (    Element view : views) {
      if (skippedViews.contains(view)) {
        continue;
      }
      ObjectNode clientViewJson=Converters.getElementToJsonConverter().apply(view,project);
      if (clientViewJson == null) {
        skippedViews.add(view);
        continue;
      }
      Object o;
      ObjectNode serverViewJson=(o=viewMap.get(Converters.getElementToIdConverter().apply(view))) != null ? ((ViewMapping)o).getObjectNode() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientViewJson,serverViewJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(view) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientViewJson,serverViewJson).toString());
        }
        elementsToCommit.add(clientViewJson);
      }
      for (      PresentationElementInstance presentationElementInstance : view2pe.get(view)) {
        if (presentationElementInstance.getInstance() != null) {
          instanceToView.add(new Pair<>(presentationElementInstance.getInstance(),view));
        }
      }
    }
    String viewInstanceBinId=MDKConstants.VIEW_INSTANCES_BIN_PREFIX + Converters.getIProjectToIdConverter().apply(project.getPrimaryProject());
    while (!instanceToView.isEmpty()) {
      Pair<InstanceSpecification,Element> pair=instanceToView.remove();
      InstanceSpecification instance=pair.getKey();
      List<InstanceSpecification> subInstances=instanceUtils.getCurrentInstances(instance,pair.getValue()).getAll();
      for (      InstanceSpecification subInstance : subInstances) {
        instanceToView.add(new Pair<>(subInstance,pair.getValue()));
      }
      ObjectNode clientInstanceSpecificationJson=Converters.getElementToJsonConverter().apply(instance,project);
      if (clientInstanceSpecificationJson == null) {
        continue;
      }
      clientInstanceSpecificationJson.put(MDKConstants.OWNER_ID_KEY,viewInstanceBinId);
      ObjectNode serverInstanceSpecificationJson=instanceSpecificationMap.containsKey(Converters.getElementToIdConverter().apply(instance)) ? instanceSpecificationMap.get(Converters.getElementToIdConverter().apply(instance)).getKey() : null;
      if (!JsonEquivalencePredicate.getInstance().test(clientInstanceSpecificationJson,serverInstanceSpecificationJson)) {
        if (MDUtils.isDeveloperMode()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(instance) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientInstanceSpecificationJson,serverInstanceSpecificationJson).toString());
        }
        elementsToCommit.add(clientInstanceSpecificationJson);
      }
      for (      Slot slot : instance.getSlot()) {
        ObjectNode clientSlotJson=Converters.getElementToJsonConverter().apply(slot,project);
        if (clientSlotJson == null) {
          continue;
        }
        JsonNode serverSlotJson=slotMap.containsKey(Converters.getElementToIdConverter().apply(slot)) ? slotMap.get(Converters.getElementToIdConverter().apply(slot)).getKey() : null;
        if (!JsonEquivalencePredicate.getInstance().test(clientSlotJson,serverSlotJson)) {
          elementsToCommit.add(clientSlotJson);
          if (MDUtils.isDeveloperMode()) {
            Application.getInstance().getGUILog().log(""String_Node_Str"" + Converters.getElementToIdConverter().apply(slot) + ""String_Node_Str""+ JsonDiffFunction.getInstance().apply(clientSlotJson,serverSlotJson).toString());
          }
        }
      }
    }
    if (handleCancel(progressStatus)) {
      return;
    }
    boolean changed=false;
    if (elementsToCommit.size() > 0) {
      progressStatus.setDescription(""String_Node_Str"");
      progressStatus.setCurrent(5);
      Application.getInstance().getGUILog().log(""String_Node_Str"" + elementsToCommit.size() + ""String_Node_Str""+ (elementsToCommit.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,elementsToCommit,MMSUtils.JsonBlobType.ELEMENT_JSON);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,true,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    Set<String> mmsElementsToDelete=new HashSet<>();
    for (    List<PresentationElementInstance> presentationElementInstances : view2unused.values()) {
      for (      PresentationElementInstance presentationElementInstance : presentationElementInstances) {
        if (presentationElementInstance.getInstance() == null) {
          continue;
        }
        String id=Converters.getElementToIdConverter().apply(presentationElementInstance.getInstance());
        if (id == null) {
          continue;
        }
        mmsElementsToDelete.add(id);
      }
    }
    if (elementsToCommit.size() > 0) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + mmsElementsToDelete.size() + ""String_Node_Str""+ (mmsElementsToDelete.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
      URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
      File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,mmsElementsToDelete,MMSUtils.JsonBlobType.ELEMENT_ID);
      OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,true,elementsToCommit.size(),""String_Node_Str""));
      changed=true;
    }
    if (!changed) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    progressStatus.setDescription(""String_Node_Str"");
    progressStatus.setCurrent(6);
    Set<Element> elementsToDelete=new HashSet<>();
    for (    Pair<ObjectNode,Slot> pair : slotMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Pair<ObjectNode,InstanceSpecification> pair : instanceSpecificationMap.values()) {
      if (pair.getValue() != null) {
        elementsToDelete.add(pair.getValue());
      }
    }
    for (    Element element : views) {
      Constraint constraint=Utils.getViewConstraint(element);
      if (constraint == null) {
        continue;
      }
      elementsToDelete.add(constraint);
      ValueSpecification valueSpecification=constraint.getSpecification();
      if (valueSpecification == null) {
        continue;
      }
      elementsToDelete.add(valueSpecification);
      List<ValueSpecification> operands;
      if (!(valueSpecification instanceof Expression) || (operands=((Expression)valueSpecification).getOperand()) == null) {
        continue;
      }
      for (      ValueSpecification operand : operands) {
        elementsToDelete.add(operand);
        InstanceSpecification instanceSpecification;
        if (!(operand instanceof InstanceValue) || (instanceSpecification=((InstanceValue)operand).getInstance()) == null) {
          continue;
        }
        elementsToDelete.add(instanceSpecification);
        for (        Slot slot : instanceSpecification.getSlot()) {
          elementsToDelete.add(slot);
          elementsToDelete.addAll(slot.getValue());
        }
      }
    }
    for (    Element element : elementsToDelete) {
      try {
        ModelElementsManager.getInstance().removeElement(element);
      }
 catch (      ReadOnlyElementException ignored) {
        System.out.println(""String_Node_Str"" + element.getLocalID());
      }
    }
    processedElements.addAll(views);
  }
 catch (  Exception e) {
    failure=true;
    Utils.printException(e);
  }
 finally {
    if (manageSesssions) {
      if (SessionManager.getInstance().isSessionCreated(project)) {
        SessionManager.getInstance().cancelSession(project);
      }
    }
    if (localSyncTransactionCommitListener != null) {
      localSyncTransactionCommitListener.setDisabled(false);
    }
  }
  ImageValidator iv=new ImageValidator(dbAlfrescoVisitor.getImages(),images);
  iv.validate(project);
  for (  ValidationRule validationRule : iv.getSuite().getValidationRules()) {
    for (    ValidationRuleViolation validationRuleViolation : validationRule.getViolations()) {
      if (!validationRuleViolation.getActions().isEmpty()) {
        validationRuleViolation.getActions().get(0).actionPerformed(null);
      }
    }
  }
  if (showValidation) {
    if (suite.hasErrors()) {
      Utils.displayValidationWindow(project,vss,""String_Node_Str"");
    }
  }
}",0.9945930387944328
88578,"private boolean handleCancel(ProgressStatus progressStatus){
  if (progressStatus.isCancel()) {
    failure=true;
    if (SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().cancelSession(project);
    }
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return true;
  }
  return false;
}","private boolean handleCancel(ProgressStatus progressStatus){
  if (progressStatus.isCancel()) {
    failure=true;
    if (manageSesssions) {
      if (SessionManager.getInstance().isSessionCreated(project)) {
        SessionManager.getInstance().cancelSession(project);
      }
    }
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return true;
  }
  return false;
}",0.9470827679782904
88579,"public ViewPresentationGenerator(Element start,boolean recurse,boolean showValidation,PresentationElementUtils viu,Map<String,ObjectNode> images,Set<Element> processedElements){
  this.start=start;
  this.project=Project.getProject(start);
  this.images=images != null ? images : new HashMap<>();
  this.processedElements=processedElements != null ? processedElements : new HashSet<>();
  this.recurse=recurse;
  this.showValidation=showValidation;
  this.instanceUtils=viu;
  if (this.instanceUtils == null) {
    this.instanceUtils=new PresentationElementUtils();
  }
  suite.addValidationRule(uneditableContent);
  suite.addValidationRule(viewInProject);
  suite.addValidationRule(updateFailed);
  suite.addValidationRule(uneditableElements);
  suite.addValidationRule(viewDoesNotExist);
  vss.add(suite);
}","public ViewPresentationGenerator(Element start,boolean recurse,boolean showValidation,PresentationElementUtils viu,Map<String,ObjectNode> images,Set<Element> processedElements){
  this(start,recurse,showValidation,viu,images,processedElements,true);
}",0.3996229971724788
88580,"public static boolean validateCredentials(Project project,String ticket) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return false;
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + ticket);
  requestUri.clearParameters();
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpGet(requestDest);
  System.out.println(""String_Node_Str"" + requestUri.toString());
  String message=""String_Node_Str"";
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent()){
    int responseCode=response.getStatusLine().getStatusCode();
    String responseBody=((inputStream != null) ? IOUtils.toString(inputStream) : ""String_Node_Str"");
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + requestUri.toString() + ""String_Node_Str""+ responseCode);
    boolean throwServerException=false;
    if (responseCode != HttpURLConnection.HTTP_OK || (responseCode == HttpURLConnection.HTTP_NOT_FOUND && !responseType.equals(""String_Node_Str""))) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + responseCode);
      throwServerException=true;
    }
    if (!responseBody.isEmpty() && responseType.equals(""String_Node_Str"")) {
      ObjectNode responseJson=JacksonUtils.getObjectMapper().readValue(responseBody,ObjectNode.class);
      JsonNode value;
      if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
        message=value.asText();
        Application.getInstance().getGUILog().log(""String_Node_Str"" + value.asText());
      }
    }
    if (throwServerException) {
      Utils.showPopupMessage(""String_Node_Str"");
      throw new ServerException(responseBody,responseCode);
    }
  }
   return message.equals(""String_Node_Str"");
}","public static String validateCredentials(Project project,String ticket) throws ServerException, IOException, URISyntaxException {
  URIBuilder requestUri=MMSUtils.getServiceUri(project);
  if (requestUri == null) {
    return ""String_Node_Str"";
  }
  requestUri.setPath(requestUri.getPath() + ""String_Node_Str"" + ticket);
  requestUri.clearParameters();
  URI requestDest=requestUri.build();
  HttpRequestBase request=new HttpGet(requestDest);
  System.out.println(""String_Node_Str"" + requestUri.toString());
  ObjectNode responseJson;
  JsonNode value;
  try (CloseableHttpClient httpclient=HttpClients.createDefault();CloseableHttpResponse response=httpclient.execute(request);InputStream inputStream=response.getEntity().getContent()){
    int responseCode=response.getStatusLine().getStatusCode();
    String responseBody=((inputStream != null) ? IOUtils.toString(inputStream) : ""String_Node_Str"");
    String responseType=((response.getEntity().getContentType() != null) ? response.getEntity().getContentType().getValue() : ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + requestUri.toString() + ""String_Node_Str""+ responseCode);
    if (responseCode == 200) {
      if (!responseBody.isEmpty() && responseType.equals(""String_Node_Str"")) {
        responseJson=JacksonUtils.getObjectMapper().readValue(responseBody,ObjectNode.class);
        if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + value.asText());
        }
        if (responseJson != null && (value=responseJson.get(""String_Node_Str"")) != null && value.isTextual() && !value.asText().isEmpty()) {
          return value.asText();
        }
      }
      return ""String_Node_Str"";
    }
 else {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + responseCode);
      Utils.showPopupMessage(""String_Node_Str"");
      throw new ServerException(responseBody,responseCode);
    }
  }
 }",0.7428295974933719
88581,"@Override public void projectPreSaved(Project project,boolean savedInServer){
  deltaSyncRunner=null;
  if ((project.isRemote() && !savedInServer) || !StereotypesHelper.hasStereotype(project.getModel(),""String_Node_Str"") || CoordinatedSyncProjectEventListenerAdapter.getProjectMapping(project).isDisabled()|| JMSSyncProjectEventListenerAdapter.getProjectMapping(project).getJmsMessageListener().isDisabled()) {
    return;
  }
  if (!TicketUtils.isTicketValid(project)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    new Thread(){
      public void run(){
        MMSLoginAction.loginAction(project);
      }
    }
.start();
    return;
  }
  deltaSyncRunner=new DeltaSyncRunner(true,true,true);
  ProgressStatusRunner.runWithProgressStatus(deltaSyncRunner,""String_Node_Str"",true,0);
}","@Override public void projectPreSaved(Project project,boolean savedInServer){
  deltaSyncRunner=null;
  if ((project.isRemote() && !savedInServer) || !StereotypesHelper.hasStereotype(project.getModel(),""String_Node_Str"") || CoordinatedSyncProjectEventListenerAdapter.getProjectMapping(project).isDisabled()|| JMSSyncProjectEventListenerAdapter.getProjectMapping(project).getJmsMessageListener().isDisabled()) {
    return;
  }
  deltaSyncRunner=new DeltaSyncRunner(true,true,true);
  ProgressStatusRunner.runWithProgressStatus(deltaSyncRunner,""String_Node_Str"",true,0);
}",0.6517016654598118
88582,"@SuppressWarnings(""String_Node_Str"") @Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject()) && EsiUtils.getLoggedUserName() == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  if (!TicketUtils.isTicketValid(project)) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (pv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  BranchValidator bv=new BranchValidator(project);
  bv.validate(null,false);
  if (bv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (bv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  LocalSyncTransactionCommitListener listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  listener.setDisabled(true);
  SyncElements.lockSyncFolder(project);
  listener.setDisabled(false);
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(Application.getInstance().getProject());
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  if (jmsMessageListener == null) {
    if (MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    return;
  }
  Changelog<String,Element> persistedLocalChangelog=new Changelog<>();
  Collection<SyncElement> persistedLocalSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.LOCAL);
  for (  SyncElement syncElement : persistedLocalSyncElements) {
    persistedLocalChangelog=persistedLocalChangelog.and(SyncElements.buildChangelog(syncElement),(key,value) -> Converters.getIdToElementConverter().apply(key,project));
  }
  Changelog<String,Element> localChangelog=persistedLocalChangelog.and(listener.getInMemoryLocalChangelog());
  Map<String,Element> localCreated=localChangelog.get(Changelog.ChangeType.CREATED), localUpdated=localChangelog.get(Changelog.ChangeType.UPDATED), localDeleted=localChangelog.get(Changelog.ChangeType.DELETED);
  Changelog<String,Void> persistedJmsChangelog=new Changelog<>();
  Collection<SyncElement> persistedJmsSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.MMS);
  for (  SyncElement syncElement : persistedJmsSyncElements) {
    persistedJmsChangelog=persistedJmsChangelog.and(SyncElements.buildChangelog(syncElement));
  }
  Changelog<String,Void> jmsChangelog=persistedJmsChangelog.and(jmsMessageListener.getInMemoryJMSChangelog(),(key,objectNode) -> null);
  Map<String,Void> jmsCreated=jmsChangelog.get(Changelog.ChangeType.CREATED), jmsUpdated=jmsChangelog.get(Changelog.ChangeType.UPDATED), jmsDeleted=jmsChangelog.get(Changelog.ChangeType.DELETED);
  Set<String> elementIdsToGet=new HashSet<>(jmsUpdated.keySet());
  elementIdsToGet.addAll(jmsCreated.keySet());
  if (shouldUpdate && !jmsChangelog.isEmpty()) {
    int size=jmsChangelog.flattenedSize();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + size + ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  Map<String,ObjectNode> jmsJsons=new HashMap<>(elementIdsToGet.size());
  if (!elementIdsToGet.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"" + elementIdsToGet.size() + ""String_Node_Str""+ (elementIdsToGet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    ObjectNode response=null;
    try {
      response=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,elementIdsToGet,progressStatus));
    }
 catch (    ServerException|IOException|URISyntaxException e) {
      if (e instanceof ServerException && ((ServerException)e).getCode() == 404) {
        (response=JacksonUtils.getObjectMapper().createObjectNode()).putArray(""String_Node_Str"");
      }
 else       if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        e.printStackTrace();
        return;
      }
    }
    if (progressStatus.isCancel()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    JsonNode elementsArrayNode;
    if (response == null || (elementsArrayNode=response.get(""String_Node_Str"")) == null || !elementsArrayNode.isArray()) {
      Utils.guilog(""String_Node_Str"");
      return;
    }
    for (    JsonNode jsonNode : elementsArrayNode) {
      if (!jsonNode.isObject()) {
        continue;
      }
      String webId=jsonNode.get(MDKConstants.ID_KEY).asText();
      jmsJsons.put(webId,(ObjectNode)jsonNode);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  Map<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedChanges=new LinkedHashMap<>(), unconflictedChanges=new LinkedHashMap<>();
  localChangelog.findConflicts(jmsChangelog,(change,change2) -> change != null && change2 != null,conflictedChanges,unconflictedChanges);
  Map<String,Element> localElementsToPost=new LinkedHashMap<>(localCreated.size() + localUpdated.size());
  Set<String> deleteElements=new HashSet<>(localDeleted.size());
  Map<String,ObjectNode> jmsElementsToCreateLocally=new LinkedHashMap<>(jmsCreated.size());
  Map<String,Pair<ObjectNode,Element>> jmsElementsToUpdateLocally=new LinkedHashMap<>(jmsUpdated.size());
  Map<String,Element> jmsElementsToDeleteLocally=new LinkedHashMap<>(jmsDeleted.size());
  for (  Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> unconflictedEntry : unconflictedChanges.entrySet()) {
    String id=unconflictedEntry.getKey();
    Changelog.Change<Element> localChange=unconflictedEntry.getValue().getKey();
    Changelog.Change<ObjectNode> jmsChange=unconflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),unconflictedEntry.getValue().getValue().getType()) : null;
    if (shouldCommit && localChange != null) {
      Element element=localChange.getChanged();
switch (localChange.getType()) {
case CREATED:
case UPDATED:
        if (element == null) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
          continue;
        }
      localElementsToPost.put(id,element);
    break;
case DELETED:
  if (element != null && !project.isDisposed(element)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
    continue;
  }
deleteElements.add(id);
break;
}
}
 else if (shouldUpdate && jmsChange != null) {
ObjectNode objectNode=jmsChange.getChanged();
Element element=Converters.getIdToElementConverter().apply(id,project);
switch (jmsChange.getType()) {
case CREATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element != null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
jmsElementsToCreateLocally.put(id,objectNode);
break;
case UPDATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.UPDATED);
continue;
}
jmsElementsToUpdateLocally.put(id,new Pair<>(objectNode,element));
break;
case DELETED:
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
continue;
}
jmsElementsToDeleteLocally.put(id,element);
break;
}
}
}
if (progressStatus.isCancel()) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
return;
}
boolean shouldLogNoLocalChanges=shouldCommit;
if (shouldCommit && !localElementsToPost.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
LinkedList<ObjectNode> postElements=new LinkedList<>();
for (Element element : localElementsToPost.values()) {
ObjectNode elementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
if (elementObjectNode != null) {
postElements.add(elementObjectNode);
}
}
if (postElements.size() > 0) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(postElements.size()) + ""String_Node_Str""+ (postElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,postElements,MMSUtils.JsonBlobType.ELEMENT_JSON);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,true,postElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
}
if (shouldCommit && shouldCommitDeletes && !deleteElements.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(deleteElements.size()) + ""String_Node_Str""+ (deleteElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,deleteElements,MMSUtils.JsonBlobType.ELEMENT_ID);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,true,deleteElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
if (shouldLogNoLocalChanges) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
}
if (shouldUpdate) {
listener.setDisabled(true);
List<ObjectNode> jmsElementsToCreateOrUpdateLocally=new ArrayList<>(jmsElementsToCreateLocally.size() + jmsElementsToUpdateLocally.size());
jmsElementsToCreateOrUpdateLocally.addAll(jmsElementsToCreateLocally.values());
jmsElementsToUpdateLocally.values().forEach(pair -> jmsElementsToCreateOrUpdateLocally.add(pair.getKey()));
UpdateClientElementAction updateClientElementAction=new UpdateClientElementAction(project);
updateClientElementAction.setElementsToUpdate(jmsElementsToCreateOrUpdateLocally);
updateClientElementAction.setElementsToDelete(jmsElementsToDeleteLocally.values().stream().map(Converters.getElementToIdConverter()).filter(id -> id != null).filter(id -> !id.isEmpty()).collect(Collectors.toList()));
updateClientElementAction.run(progressStatus);
failedJmsChangelog=failedJmsChangelog.and(updateClientElementAction.getFailedChangelog(),(id,objectNode) -> null);
listener.setDisabled(false);
}
progressStatus.setDescription(""String_Node_Str"");
Set<Element> localConflictedElements=new HashSet<>();
Set<ObjectNode> jmsConflictedElements=new HashSet<>();
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null && !project.isDisposed(localChange.getChanged())) {
localConflictedElements.add(localChange.getChanged());
}
if (jmsChange != null && jmsChange.getChanged() != null) {
jmsConflictedElements.add(jmsChange.getChanged());
}
}
ElementValidator elementValidator=new ElementValidator(ElementValidator.buildElementPairs(localConflictedElements,project),jmsConflictedElements,project);
elementValidator.run(progressStatus);
if (!elementValidator.getInvalidElements().isEmpty()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + elementValidator.getInvalidElements().size() + ""String_Node_Str""+ (elementValidator.getInvalidElements().size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
vss.add(elementValidator.getValidationSuite());
Utils.displayValidationWindow(project,elementValidator.getValidationSuite(),""String_Node_Str"");
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
if (!elementValidator.getInvalidElements().containsKey(id)) {
continue;
}
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(localChange.getType())) {
failedLocalChangelog.addChange(conflictedEntry.getKey(),localChange.getChanged(),localChange.getType());
}
if (jmsChange != null && jmsChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(jmsChange.getType())) {
failedJmsChangelog.addChange(conflictedEntry.getKey(),null,jmsChange.getType());
}
}
}
listener.getInMemoryLocalChangelog().clear();
jmsMessageListener.getInMemoryJMSChangelog().clear();
listener.setDisabled(true);
if (!SessionManager.getInstance().isSessionCreated()) {
SessionManager.getInstance().createSession(""String_Node_Str"");
}
Changelog<String,Void> unprocessedLocalChangelog=new Changelog<>();
if (!shouldCommit) {
unprocessedLocalChangelog=unprocessedLocalChangelog.and(localChangelog,(s,element) -> null);
}
if (shouldCommit && !shouldCommitDeletes) {
Map<String,Void> unprocessedLocalDeletedChanges=unprocessedLocalChangelog.get(Changelog.ChangeType.DELETED);
for (String key : localChangelog.get(Changelog.ChangeType.DELETED).keySet()) {
unprocessedLocalDeletedChanges.put(key,null);
}
}
unprocessedLocalChangelog=unprocessedLocalChangelog.and(failedLocalChangelog,(s,element) -> null);
try {
SyncElements.setByType(project,SyncElement.Type.LOCAL,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedLocalChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
Changelog<String,Void> unprocessedJmsChangelog=new Changelog<>();
if (!shouldUpdate) {
unprocessedJmsChangelog=unprocessedJmsChangelog.and(jmsChangelog);
}
unprocessedJmsChangelog=unprocessedJmsChangelog.and(failedJmsChangelog);
try {
SyncElements.setByType(project,SyncElement.Type.MMS,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedJmsChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
SessionManager.getInstance().closeSession();
listener.setDisabled(false);
failure=false;
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  if (ProjectUtilities.isFromEsiServer(project.getPrimaryProject()) && EsiUtils.getLoggedUserName() == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  if (!TicketUtils.isTicketSet(project)) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  ProjectValidator pv=new ProjectValidator(project);
  pv.validate();
  if (pv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (pv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,pv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  BranchValidator bv=new BranchValidator(project);
  bv.validate(null,false);
  if (bv.hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (bv.getValidationSuite().hasErrors()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    Utils.displayValidationWindow(project,bv.getValidationSuite(),""String_Node_Str"");
    return;
  }
  LocalSyncTransactionCommitListener listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  listener.setDisabled(true);
  SyncElements.lockSyncFolder(project);
  listener.setDisabled(false);
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(Application.getInstance().getProject());
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  if (jmsMessageListener == null) {
    if (MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    return;
  }
  Changelog<String,Element> persistedLocalChangelog=new Changelog<>();
  Collection<SyncElement> persistedLocalSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.LOCAL);
  for (  SyncElement syncElement : persistedLocalSyncElements) {
    persistedLocalChangelog=persistedLocalChangelog.and(SyncElements.buildChangelog(syncElement),(key,value) -> Converters.getIdToElementConverter().apply(key,project));
  }
  Changelog<String,Element> localChangelog=persistedLocalChangelog.and(listener.getInMemoryLocalChangelog());
  Map<String,Element> localCreated=localChangelog.get(Changelog.ChangeType.CREATED), localUpdated=localChangelog.get(Changelog.ChangeType.UPDATED), localDeleted=localChangelog.get(Changelog.ChangeType.DELETED);
  Changelog<String,Void> persistedJmsChangelog=new Changelog<>();
  Collection<SyncElement> persistedJmsSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.MMS);
  for (  SyncElement syncElement : persistedJmsSyncElements) {
    persistedJmsChangelog=persistedJmsChangelog.and(SyncElements.buildChangelog(syncElement));
  }
  Changelog<String,Void> jmsChangelog=persistedJmsChangelog.and(jmsMessageListener.getInMemoryJMSChangelog(),(key,objectNode) -> null);
  Map<String,Void> jmsCreated=jmsChangelog.get(Changelog.ChangeType.CREATED), jmsUpdated=jmsChangelog.get(Changelog.ChangeType.UPDATED), jmsDeleted=jmsChangelog.get(Changelog.ChangeType.DELETED);
  Set<String> elementIdsToGet=new HashSet<>(jmsUpdated.keySet());
  elementIdsToGet.addAll(jmsCreated.keySet());
  if (shouldUpdate && !jmsChangelog.isEmpty()) {
    int size=jmsChangelog.flattenedSize();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + size + ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  Map<String,ObjectNode> jmsJsons=new HashMap<>(elementIdsToGet.size());
  if (!elementIdsToGet.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"" + elementIdsToGet.size() + ""String_Node_Str""+ (elementIdsToGet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    ObjectNode response=null;
    try {
      response=JacksonUtils.parseJsonObject(MMSUtils.getElements(project,elementIdsToGet,progressStatus));
    }
 catch (    ServerException|IOException|URISyntaxException e) {
      if (e instanceof ServerException && ((ServerException)e).getCode() == 404) {
        (response=JacksonUtils.getObjectMapper().createObjectNode()).putArray(""String_Node_Str"");
      }
 else       if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        e.printStackTrace();
        return;
      }
    }
    if (progressStatus.isCancel()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    JsonNode elementsArrayNode;
    if (response == null || (elementsArrayNode=response.get(""String_Node_Str"")) == null || !elementsArrayNode.isArray()) {
      Utils.guilog(""String_Node_Str"");
      return;
    }
    for (    JsonNode jsonNode : elementsArrayNode) {
      if (!jsonNode.isObject()) {
        continue;
      }
      String webId=jsonNode.get(MDKConstants.ID_KEY).asText();
      jmsJsons.put(webId,(ObjectNode)jsonNode);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  Map<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedChanges=new LinkedHashMap<>(), unconflictedChanges=new LinkedHashMap<>();
  localChangelog.findConflicts(jmsChangelog,(change,change2) -> change != null && change2 != null,conflictedChanges,unconflictedChanges);
  Map<String,Element> localElementsToPost=new LinkedHashMap<>(localCreated.size() + localUpdated.size());
  Set<String> deleteElements=new HashSet<>(localDeleted.size());
  Map<String,ObjectNode> jmsElementsToCreateLocally=new LinkedHashMap<>(jmsCreated.size());
  Map<String,Pair<ObjectNode,Element>> jmsElementsToUpdateLocally=new LinkedHashMap<>(jmsUpdated.size());
  Map<String,Element> jmsElementsToDeleteLocally=new LinkedHashMap<>(jmsDeleted.size());
  for (  Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> unconflictedEntry : unconflictedChanges.entrySet()) {
    String id=unconflictedEntry.getKey();
    Changelog.Change<Element> localChange=unconflictedEntry.getValue().getKey();
    Changelog.Change<ObjectNode> jmsChange=unconflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),unconflictedEntry.getValue().getValue().getType()) : null;
    if (shouldCommit && localChange != null) {
      Element element=localChange.getChanged();
switch (localChange.getType()) {
case CREATED:
case UPDATED:
        if (element == null) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
          continue;
        }
      localElementsToPost.put(id,element);
    break;
case DELETED:
  if (element != null && !project.isDisposed(element)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
    continue;
  }
deleteElements.add(id);
break;
}
}
 else if (shouldUpdate && jmsChange != null) {
ObjectNode objectNode=jmsChange.getChanged();
Element element=Converters.getIdToElementConverter().apply(id,project);
switch (jmsChange.getType()) {
case CREATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element != null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
jmsElementsToCreateLocally.put(id,objectNode);
break;
case UPDATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.UPDATED);
continue;
}
jmsElementsToUpdateLocally.put(id,new Pair<>(objectNode,element));
break;
case DELETED:
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
continue;
}
jmsElementsToDeleteLocally.put(id,element);
break;
}
}
}
if (progressStatus.isCancel()) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
return;
}
boolean shouldLogNoLocalChanges=shouldCommit;
if (shouldCommit && !localElementsToPost.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
LinkedList<ObjectNode> postElements=new LinkedList<>();
for (Element element : localElementsToPost.values()) {
ObjectNode elementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
if (elementObjectNode != null) {
postElements.add(elementObjectNode);
}
}
if (postElements.size() > 0) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(postElements.size()) + ""String_Node_Str""+ (postElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,postElements,MMSUtils.JsonBlobType.ELEMENT_JSON);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.POST,requestUri,sendData,ContentType.APPLICATION_JSON,true,postElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
}
if (shouldCommit && shouldCommitDeletes && !deleteElements.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(deleteElements.size()) + ""String_Node_Str""+ (deleteElements.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder requestUri=MMSUtils.getServiceProjectsRefsElementsUri(project);
try {
File sendData=MMSUtils.createEntityFile(this.getClass(),ContentType.APPLICATION_JSON,deleteElements,MMSUtils.JsonBlobType.ELEMENT_ID);
OutputQueue.getInstance().offer(new Request(project,MMSUtils.HttpRequestType.DELETE,requestUri,sendData,ContentType.APPLICATION_JSON,true,deleteElements.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
if (shouldLogNoLocalChanges) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
}
if (shouldUpdate) {
listener.setDisabled(true);
List<ObjectNode> jmsElementsToCreateOrUpdateLocally=new ArrayList<>(jmsElementsToCreateLocally.size() + jmsElementsToUpdateLocally.size());
jmsElementsToCreateOrUpdateLocally.addAll(jmsElementsToCreateLocally.values());
jmsElementsToUpdateLocally.values().forEach(pair -> jmsElementsToCreateOrUpdateLocally.add(pair.getKey()));
UpdateClientElementAction updateClientElementAction=new UpdateClientElementAction(project);
updateClientElementAction.setElementsToUpdate(jmsElementsToCreateOrUpdateLocally);
updateClientElementAction.setElementsToDelete(jmsElementsToDeleteLocally.values().stream().map(Converters.getElementToIdConverter()).filter(id -> id != null).filter(id -> !id.isEmpty()).collect(Collectors.toList()));
updateClientElementAction.run(progressStatus);
failedJmsChangelog=failedJmsChangelog.and(updateClientElementAction.getFailedChangelog(),(id,objectNode) -> null);
listener.setDisabled(false);
}
progressStatus.setDescription(""String_Node_Str"");
Set<Element> localConflictedElements=new HashSet<>();
Set<ObjectNode> jmsConflictedElements=new HashSet<>();
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null && !project.isDisposed(localChange.getChanged())) {
localConflictedElements.add(localChange.getChanged());
}
if (jmsChange != null && jmsChange.getChanged() != null) {
jmsConflictedElements.add(jmsChange.getChanged());
}
}
ElementValidator elementValidator=new ElementValidator(ElementValidator.buildElementPairs(localConflictedElements,project),jmsConflictedElements,project);
elementValidator.run(progressStatus);
if (!elementValidator.getInvalidElements().isEmpty()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + elementValidator.getInvalidElements().size() + ""String_Node_Str""+ (elementValidator.getInvalidElements().size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
vss.add(elementValidator.getValidationSuite());
Utils.displayValidationWindow(project,elementValidator.getValidationSuite(),""String_Node_Str"");
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
if (!elementValidator.getInvalidElements().containsKey(id)) {
continue;
}
Changelog.Change<Element> localChange=conflictedEntry.getValue().getKey();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getValue() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getValue().getType()) : null;
if (localChange != null && localChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(localChange.getType())) {
failedLocalChangelog.addChange(conflictedEntry.getKey(),localChange.getChanged(),localChange.getType());
}
if (jmsChange != null && jmsChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(jmsChange.getType())) {
failedJmsChangelog.addChange(conflictedEntry.getKey(),null,jmsChange.getType());
}
}
}
listener.getInMemoryLocalChangelog().clear();
jmsMessageListener.getInMemoryJMSChangelog().clear();
listener.setDisabled(true);
if (!SessionManager.getInstance().isSessionCreated()) {
SessionManager.getInstance().createSession(""String_Node_Str"");
}
Changelog<String,Void> unprocessedLocalChangelog=new Changelog<>();
if (!shouldCommit) {
unprocessedLocalChangelog=unprocessedLocalChangelog.and(localChangelog,(s,element) -> null);
}
if (shouldCommit && !shouldCommitDeletes) {
Map<String,Void> unprocessedLocalDeletedChanges=unprocessedLocalChangelog.get(Changelog.ChangeType.DELETED);
for (String key : localChangelog.get(Changelog.ChangeType.DELETED).keySet()) {
unprocessedLocalDeletedChanges.put(key,null);
}
}
unprocessedLocalChangelog=unprocessedLocalChangelog.and(failedLocalChangelog,(s,element) -> null);
try {
SyncElements.setByType(project,SyncElement.Type.LOCAL,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedLocalChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
Changelog<String,Void> unprocessedJmsChangelog=new Changelog<>();
if (!shouldUpdate) {
unprocessedJmsChangelog=unprocessedJmsChangelog.and(jmsChangelog);
}
unprocessedJmsChangelog=unprocessedJmsChangelog.and(failedJmsChangelog);
try {
SyncElements.setByType(project,SyncElement.Type.MMS,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedJmsChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
SessionManager.getInstance().closeSession();
listener.setDisabled(false);
failure=false;
}",0.9997500156240235
88583,"public void run(){
  if (TicketUtils.isTicketValid(project)) {
    initializeJMS(project);
  }
 else {
    MMSLoginAction.loginAction(project);
  }
}","public void run(){
  if (TicketUtils.isTicketSet(project)) {
    initializeJMS(project);
  }
 else {
    MMSLoginAction.loginAction(project);
  }
}",0.972972972972973
88584,"@Override public void projectOpened(final Project project){
  closeJMS(project);
  if (shouldEnableJMS(project)) {
    new Thread(){
      public void run(){
        if (TicketUtils.isTicketValid(project)) {
          initializeJMS(project);
        }
 else {
          MMSLoginAction.loginAction(project);
        }
      }
    }
.start();
  }
}","@Override public void projectOpened(final Project project){
  closeJMS(project);
  if (shouldEnableJMS(project)) {
    new Thread(){
      public void run(){
        if (TicketUtils.isTicketSet(project)) {
          initializeJMS(project);
        }
 else {
          MMSLoginAction.loginAction(project);
        }
      }
    }
.start();
  }
}",0.9884057971014492
88585,"/** 
 * Logs in to teamwork using the initially loaded teamwork account. If that account is already in use, will load/generate and attempt to log in with additional sets of credentials, up to the limit specified in applicationAccounts.
 * @throws FileNotFoundException missing credentialsLocation
 * @throws UnsupportedEncodingException logMessage failures
 * @throws InterruptedException cancel triggered and caught by cancel handler
 * @throws IllegalAccessException access failure with loaded credentials
 */
private void loginTeamwork() throws FileNotFoundException, UnsupportedEncodingException, InterruptedException, IllegalAccessException {
  MDKHelper.setPopupsDisabled(true);
  String message=""String_Node_Str"";
  logMessage(message);
  ITeamworkService twcService=EsiUtils.getTeamworkService();
  for (int i=1; i <= applicationAccounts; i++) {
    try {
      String appendage=(i == 1 ? ""String_Node_Str"" : Integer.toString(i));
      loadCredentials(appendage);
    }
 catch (    IOException e) {
      error=100;
      message=""String_Node_Str"" + Paths.get(credentialsLocation).toAbsolutePath().toString();
      logMessage(message);
      throw new IllegalStateException(message,e);
    }
    if (i == 1) {
      try {
        reportStatus(""String_Node_Str"",debug);
      }
 catch (      IOException e) {
        throw new IllegalAccessException(""String_Node_Str"" + teamworkUsername + ""String_Node_Str"");
      }
    }
    twcService.login(new ServerLoginInfo(teamworkServer + ""String_Node_Str"" + Integer.parseInt(teamworkPort),teamworkUsername,teamworkPassword,true),true);
    if (twcService.isConnected()) {
      MDKHelper.setMMSLoginCredentials(teamworkUsername,teamworkPassword);
      message=""String_Node_Str"" + teamworkUsername + ""String_Node_Str""+ teamworkServer+ ""String_Node_Str""+ teamworkPort;
      logMessage(message);
      break;
    }
    message=""String_Node_Str"" + teamworkUsername + ""String_Node_Str""+ teamworkServer+ ""String_Node_Str""+ teamworkPort;
    logMessage(message);
  }
  if (!twcService.isConnected()) {
    error=101;
    message=""String_Node_Str"";
    logMessage(message);
    throw new IllegalStateException(message);
  }
  twLogin=true;
  checkCancel();
}","/** 
 * Logs in to teamwork using the initially loaded teamwork account. If that account is already in use, will load/generate and attempt to log in with additional sets of credentials, up to the limit specified in applicationAccounts.
 * @throws FileNotFoundException missing credentialsLocation
 * @throws UnsupportedEncodingException logMessage failures
 * @throws InterruptedException cancel triggered and caught by cancel handler
 * @throws IllegalAccessException access failure with loaded credentials
 */
private void loginTeamwork() throws FileNotFoundException, UnsupportedEncodingException, InterruptedException, IllegalAccessException {
  MDKHelper.setPopupsDisabled(true);
  String message=""String_Node_Str"";
  logMessage(message);
  ITeamworkService twcService=EsiUtils.getTeamworkService();
  boolean reported=false;
  for (int i=1; i <= applicationAccounts; i++) {
    try {
      String appendage=(i == 1 ? ""String_Node_Str"" : Integer.toString(i));
      loadCredentials(appendage);
    }
 catch (    IOException e) {
      error=100;
      message=""String_Node_Str"" + Paths.get(credentialsLocation).toAbsolutePath().toString();
      logMessage(message);
      throw new IllegalStateException(message,e);
    }
    if (!reported) {
      try {
        reportStatus(""String_Node_Str"",debug);
        reported=true;
      }
 catch (      IOException ignored) {
      }
    }
    twcService.login(new ServerLoginInfo(teamworkServer + ""String_Node_Str"" + Integer.parseInt(teamworkPort),teamworkUsername,teamworkPassword,true),true);
    if (twcService.isConnected()) {
      MDKHelper.setMMSLoginCredentials(teamworkUsername,teamworkPassword);
      message=""String_Node_Str"" + teamworkUsername + ""String_Node_Str""+ teamworkServer+ ""String_Node_Str""+ teamworkPort;
      logMessage(message);
      break;
    }
    message=""String_Node_Str"" + teamworkUsername + ""String_Node_Str""+ teamworkServer+ ""String_Node_Str""+ teamworkPort;
    logMessage(message);
  }
  if (!twcService.isConnected()) {
    error=101;
    message=""String_Node_Str"";
    logMessage(message);
    throw new IllegalStateException(message);
  }
  twLogin=true;
  checkCancel();
}",0.9331195602382044
88586,"public static boolean loginAction(Project project,boolean initJms){
  if (project == null) {
    Utils.showPopupMessage(""String_Node_Str"");
    return false;
  }
  if (project.isRemote() && (TeamworkUtils.getLoggedUserName() == null && EsiUtils.getTeamworkService().getConnectedUser() == null)) {
    Utils.showPopupMessage(""String_Node_Str"" + (ProjectUtilities.isFromEsiServer(project.getPrimaryProject()) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    return false;
  }
  if (!TicketUtils.loginToMMS()) {
    return false;
  }
  Application.getInstance().getGUILog().log(""String_Node_Str"");
  if (initJms) {
    for (    Project p : Application.getInstance().getProjectsManager().getProjects()) {
      MMSSyncPlugin.getInstance().getJmsSyncProjectEventListenerAdapter().closeJMS(p);
      MMSSyncPlugin.getInstance().getJmsSyncProjectEventListenerAdapter().initializeJMS(p);
    }
  }
  return true;
}","public static boolean loginAction(Project project){
  if (project == null) {
    Utils.showPopupMessage(""String_Node_Str"");
    return false;
  }
  if (project.isRemote() && (TeamworkUtils.getLoggedUserName() == null && EsiUtils.getTeamworkService().getConnectedUser() == null)) {
    Utils.showPopupMessage(""String_Node_Str"" + (ProjectUtilities.isFromEsiServer(project.getPrimaryProject()) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    return false;
  }
  if (!TicketUtils.isTicketValid(project)) {
    if (!TicketUtils.loginToMMS(project)) {
      return false;
    }
 else {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
  }
  MMSSyncPlugin.getInstance().getJmsSyncProjectEventListenerAdapter().closeJMS(project);
  MMSSyncPlugin.getInstance().getJmsSyncProjectEventListenerAdapter().initializeJMS(project);
  return true;
}",0.1433333333333333
88587,"public synchronized boolean isDisabled(){
  return disabled;
}","public synchronized boolean isDisabled(){
  return (disabled || !MDKOptionsGroup.getMDKOptions().isCoordinatedSyncEnabled());
}",0.656084656084656
88588,"@Override public void projectPreSaved(Project project,boolean savedInServer){
  deltaSyncRunner=null;
  boolean enabled=MDKOptionsGroup.getMDKOptions().isCoordinatedSyncEnabled();
  if (!enabled) {
    return;
  }
  CoordinatedSyncProjectMapping coordinatedSyncProjectMapping=getProjectMapping(project);
  if (coordinatedSyncProjectMapping.isDisabled()) {
    return;
  }
  if (!StereotypesHelper.hasStereotype(project.getPrimaryModel(),""String_Node_Str"")) {
    return;
  }
  if (!TicketUtils.isTicketSet()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    EMSLoginAction.loginAction(project);
    return;
  }
  if (project.isRemote() && !savedInServer) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + (ProjectUtilities.isFromEsiServer(project.getPrimaryProject()) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    return;
  }
  deltaSyncRunner=new DeltaSyncRunner(true,true,true);
  ProgressStatusRunner.runWithProgressStatus(deltaSyncRunner,""String_Node_Str"",true,0);
}","@Override public void projectPreSaved(Project project,boolean savedInServer){
  deltaSyncRunner=null;
  if (!StereotypesHelper.hasStereotype(project.getModel(),""String_Node_Str"") || CoordinatedSyncProjectEventListenerAdapter.getProjectMapping(project).isDisabled() || JMSSyncProjectEventListenerAdapter.getProjectMapping(project).isDisabled()|| (project.isRemote() && !savedInServer)) {
    return;
  }
  if (!TicketUtils.isTicketSet()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    EMSLoginAction.loginAction(project);
    return;
  }
  deltaSyncRunner=new DeltaSyncRunner(true,true,true);
  ProgressStatusRunner.runWithProgressStatus(deltaSyncRunner,""String_Node_Str"",true,0);
}",0.3935558112773302
88589,"private static void persistChanges(Project project){
  LocalSyncTransactionCommitListener listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  if (listener != null) {
    listener.setDisabled(true);
  }
  for (  Map.Entry<SyncElement.Type,Function<Project,Changelog<String,?>>> entry : CHANGELOG_FUNCTIONS.entrySet()) {
    Changelog<String,?> changelog=entry.getValue().apply(project);
    if (!SessionManager.getInstance().isSessionCreated(project)) {
      SessionManager.getInstance().createSession(project,""String_Node_Str"");
    }
    try {
      SyncElements.setByType(project,entry.getKey(),JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(changelog)));
    }
 catch (    JsonProcessingException e) {
      e.printStackTrace();
    }
  }
  if (SessionManager.getInstance().isSessionCreated(project)) {
    SessionManager.getInstance().closeSession();
  }
  if (listener != null) {
    listener.setDisabled(false);
  }
}","private static void persistChanges(Project project){
  LocalSyncTransactionCommitListener listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  if (listener != null) {
    listener.setDisabled(true);
  }
  if (!SessionManager.getInstance().isSessionCreated(project)) {
    SessionManager.getInstance().createSession(project,""String_Node_Str"");
  }
  for (  Map.Entry<SyncElement.Type,Function<Project,Changelog<String,?>>> entry : CHANGELOG_FUNCTIONS.entrySet()) {
    Changelog<String,?> changelog=entry.getValue().apply(project);
    try {
      SyncElements.setByType(project,entry.getKey(),JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(changelog)));
    }
 catch (    JsonProcessingException e) {
      e.printStackTrace();
    }
  }
  if (SessionManager.getInstance().isSessionCreated(project)) {
    SessionManager.getInstance().closeSession();
  }
  if (listener != null) {
    listener.setDisabled(false);
  }
}",0.8545994065281899
88590,"public boolean isExceptionHandlerRunning(){
  return exceptionHandlerRunning;
}","public boolean isExceptionHandlerRunning(){
synchronized (this.exceptionHandlerRunning) {
    return exceptionHandlerRunning.get();
  }
}",0.7314814814814815
88591,"@Override public void onMessage(Message message){
  if (!MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()) {
    return;
  }
  lastMessage=message;
  if (!(message instanceof TextMessage)) {
    return;
  }
  final String text;
  try {
    text=((TextMessage)message).getText();
  }
 catch (  JMSException e) {
    e.printStackTrace();
    return;
  }
  if (MDKOptionsGroup.getMDKOptions().isLogJson()) {
    System.out.println(""String_Node_Str"" + project.getPrimaryProject().getProjectID() + ""String_Node_Str""+ System.lineSeparator()+ text);
  }
  JsonNode messageJsonNode;
  try {
    messageJsonNode=JacksonUtils.getObjectMapper().readTree(text);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return;
  }
  if (!messageJsonNode.isObject()) {
    return;
  }
  JsonNode workspaceJsonNode=messageJsonNode.get(""String_Node_Str"");
  JsonNode syncedJsonNode;
  if (workspaceJsonNode != null && workspaceJsonNode.isObject()) {
    JsonNode sourceJsonNode=messageJsonNode.get(""String_Node_Str"");
    if (sourceJsonNode != null && sourceJsonNode.isTextual() && sourceJsonNode.asText().equalsIgnoreCase(""String_Node_Str"")) {
      return;
    }
    for (    Map.Entry<String,Changelog.ChangeType> entry : CHANGE_MAPPING.entrySet()) {
      JsonNode changeJsonNode=workspaceJsonNode.get(entry.getKey());
      if (changeJsonNode == null || !changeJsonNode.isArray()) {
        continue;
      }
      for (      JsonNode elementJsonNode : changeJsonNode) {
        if (elementJsonNode == null || !elementJsonNode.isObject()) {
          continue;
        }
        JsonNode sysmlIdJsonNode=elementJsonNode.get(MDKConstants.SYSML_ID_KEY);
        if (sysmlIdJsonNode == null || !sysmlIdJsonNode.isTextual()) {
          continue;
        }
        try {
          if (EMFImporter.PreProcessor.SYSML_ID_VALIDATION.getFunction().apply((ObjectNode)elementJsonNode,project,false,project.getModel()) == null) {
            continue;
          }
        }
 catch (        ImportException|ReadOnlyElementException ignored) {
          continue;
        }
        inMemoryJMSChangelog.addChange(sysmlIdJsonNode.asText(),(ObjectNode)elementJsonNode,entry.getValue());
      }
    }
    SyncStatusConfigurator.getSyncStatusAction().update();
  }
 else   if ((syncedJsonNode=messageJsonNode.get(""String_Node_Str"")) != null && syncedJsonNode.isObject()) {
    JsonNode sourceJsonNode=messageJsonNode.get(""String_Node_Str"");
    if (sourceJsonNode == null || !sourceJsonNode.isTextual() || !sourceJsonNode.asText().equals(""String_Node_Str"")) {
      return;
    }
    JsonNode senderJsonNode=messageJsonNode.get(""String_Node_Str"");
    if (senderJsonNode != null && senderJsonNode.isTextual() && senderJsonNode.asText().equals(TicketUtils.getUsername())) {
      return;
    }
    Changelog<String,Void> syncedChangelog=SyncElements.buildChangelog((ObjectNode)syncedJsonNode);
    if (syncedChangelog.isEmpty()) {
      return;
    }
    for (    Changelog.ChangeType changeType : Changelog.ChangeType.values()) {
      Map<String,ObjectNode> inMemoryJMSChanges=inMemoryJMSChangelog.get(changeType);
      syncedChangelog.get(changeType).keySet().forEach(inMemoryJMSChanges::remove);
    }
    int size=syncedChangelog.flattenedSize();
    if (MDUtils.isDeveloperMode()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ size+ ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
    SyncStatusConfigurator.getSyncStatusAction().update();
  }
}","@Override public void onMessage(Message message){
  if (isDisabled()) {
    return;
  }
  lastMessage=message;
  if (!(message instanceof TextMessage)) {
    return;
  }
  final String text;
  try {
    text=((TextMessage)message).getText();
  }
 catch (  JMSException e) {
    e.printStackTrace();
    return;
  }
  if (MDKOptionsGroup.getMDKOptions().isLogJson()) {
    System.out.println(""String_Node_Str"" + project.getPrimaryProject().getProjectID() + ""String_Node_Str""+ System.lineSeparator()+ text);
  }
  JsonNode messageJsonNode;
  try {
    messageJsonNode=JacksonUtils.getObjectMapper().readTree(text);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return;
  }
  if (!messageJsonNode.isObject()) {
    return;
  }
  JsonNode workspaceJsonNode=messageJsonNode.get(""String_Node_Str"");
  JsonNode syncedJsonNode;
  if (workspaceJsonNode != null && workspaceJsonNode.isObject()) {
    JsonNode sourceJsonNode=messageJsonNode.get(""String_Node_Str"");
    if (sourceJsonNode != null && sourceJsonNode.isTextual() && sourceJsonNode.asText().equalsIgnoreCase(""String_Node_Str"")) {
      return;
    }
    for (    Map.Entry<String,Changelog.ChangeType> entry : CHANGE_MAPPING.entrySet()) {
      JsonNode changeJsonNode=workspaceJsonNode.get(entry.getKey());
      if (changeJsonNode == null || !changeJsonNode.isArray()) {
        continue;
      }
      for (      JsonNode elementJsonNode : changeJsonNode) {
        if (elementJsonNode == null || !elementJsonNode.isObject()) {
          continue;
        }
        JsonNode sysmlIdJsonNode=elementJsonNode.get(MDKConstants.SYSML_ID_KEY);
        if (sysmlIdJsonNode == null || !sysmlIdJsonNode.isTextual()) {
          continue;
        }
        try {
          if (EMFImporter.PreProcessor.SYSML_ID_VALIDATION.getFunction().apply((ObjectNode)elementJsonNode,project,false,project.getModel()) == null) {
            continue;
          }
        }
 catch (        ImportException|ReadOnlyElementException ignored) {
          continue;
        }
        inMemoryJMSChangelog.addChange(sysmlIdJsonNode.asText(),(ObjectNode)elementJsonNode,entry.getValue());
      }
    }
    SyncStatusConfigurator.getSyncStatusAction().update();
  }
 else   if ((syncedJsonNode=messageJsonNode.get(""String_Node_Str"")) != null && syncedJsonNode.isObject()) {
    JsonNode sourceJsonNode=messageJsonNode.get(""String_Node_Str"");
    if (sourceJsonNode == null || !sourceJsonNode.isTextual() || !sourceJsonNode.asText().equals(""String_Node_Str"")) {
      return;
    }
    JsonNode senderJsonNode=messageJsonNode.get(""String_Node_Str"");
    if (senderJsonNode != null && senderJsonNode.isTextual() && senderJsonNode.asText().equals(TicketUtils.getUsername())) {
      return;
    }
    Changelog<String,Void> syncedChangelog=SyncElements.buildChangelog((ObjectNode)syncedJsonNode);
    if (syncedChangelog.isEmpty()) {
      return;
    }
    for (    Changelog.ChangeType changeType : Changelog.ChangeType.values()) {
      Map<String,ObjectNode> inMemoryJMSChanges=inMemoryJMSChangelog.get(changeType);
      syncedChangelog.get(changeType).keySet().forEach(inMemoryJMSChanges::remove);
    }
    int size=syncedChangelog.flattenedSize();
    if (MDUtils.isDeveloperMode()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ size+ ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
    SyncStatusConfigurator.getSyncStatusAction().update();
  }
}",0.9923447689254324
88592,"@Override public void onException(JMSException exception){
  if (exceptionHandlerRunning) {
    return;
  }
  exceptionHandlerRunning=true;
  MMSAction.setDisabled(exceptionHandlerRunning);
  Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
  JMSSyncProjectEventListenerAdapter.getProjectMapping(project).setDisabled(true);
  while (shouldAttemptToReconnect()) {
    int delay=Math.min(600,(int)Math.pow(2,reconnectionAttempts++));
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ delay+ ""String_Node_Str""+ (delay != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    try {
      Thread.sleep(delay * 1000);
    }
 catch (    InterruptedException ignored) {
    }
    if (!exceptionHandlerRunning) {
      return;
    }
    if (shouldAttemptToReconnect()) {
      MMSSyncPlugin.getInstance().getJmsSyncProjectEventListenerAdapter().closeJMS(project);
      MMSSyncPlugin.getInstance().getJmsSyncProjectEventListenerAdapter().initializeJMS(project);
    }
  }
  if (!JMSSyncProjectEventListenerAdapter.getProjectMapping(project).isDisabled()) {
    reconnectionAttempts=0;
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
  }
 else {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
    EMSLogoutAction.logoutAction();
  }
  reconnectionAttempts=0;
  exceptionHandlerRunning=false;
  MMSAction.setDisabled(exceptionHandlerRunning);
}","@Override public void onException(JMSException exception){
  if (exceptionHandlerRunning.get()) {
    return;
  }
  exceptionHandlerRunning.set(true);
  MMSAction.setDisabled(exceptionHandlerRunning.get());
  Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
  JMSSyncProjectEventListenerAdapter.getProjectMapping(project).setDisabled(true);
  while (shouldAttemptToReconnect()) {
    int delay=Math.min(600,(int)Math.pow(2,reconnectionAttempts++));
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ delay+ ""String_Node_Str""+ (delay != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    try {
      Thread.sleep(delay * 1000);
    }
 catch (    InterruptedException ignored) {
    }
    if (!exceptionHandlerRunning.get()) {
      return;
    }
    if (shouldAttemptToReconnect()) {
      MMSSyncPlugin.getInstance().getJmsSyncProjectEventListenerAdapter().closeJMS(project);
      MMSSyncPlugin.getInstance().getJmsSyncProjectEventListenerAdapter().initializeJMS(project);
    }
  }
  if (!JMSSyncProjectEventListenerAdapter.getProjectMapping(project).isDisabled()) {
    reconnectionAttempts=0;
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
  }
 else {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
    EMSLogoutAction.logoutAction();
  }
  reconnectionAttempts=0;
  exceptionHandlerRunning.set(false);
  MMSAction.setDisabled(exceptionHandlerRunning.get());
}",0.9855254877281308
88593,"@Override public void projectSaved(Project project,boolean savedInServer){
  JMSSyncProjectMapping jmsSyncProjectMapping=getProjectMapping(project);
  JMSMessageListener JMSMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  if (JMSMessageListener != null) {
    JMSMessageListener.getInMemoryJMSChangelog().clear();
  }
}","@Override public void projectSaved(Project project,boolean savedInServer){
  JMSSyncProjectMapping jmsSyncProjectMapping=getProjectMapping(project);
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  if (jmsMessageListener != null) {
    jmsMessageListener.getInMemoryJMSChangelog().clear();
  }
}",0.8507462686567164
88594,"public void setDisabled(boolean disabled){
  this.disabled=disabled;
}","public void setDisabled(boolean disabled){
  this.jmsMessageListener.setDisabled(disabled);
}",0.7484662576687117
88595,"public void run(){
  if (TicketUtils.isTicketValid()) {
    initializeJMS(project);
  }
 else {
    EMSLoginAction.loginAction(project,true);
  }
}","public void run(){
  if (TicketUtils.isTicketValid(project)) {
    initializeJMS(project);
  }
 else {
    EMSLoginAction.loginAction(project);
  }
}",0.9594594594594594
88596,"@Override public void projectOpened(final Project project){
  closeJMS(project);
  if (shouldEnableJMS(project)) {
    new Thread(){
      public void run(){
        if (TicketUtils.isTicketValid()) {
          initializeJMS(project);
        }
 else {
          EMSLoginAction.loginAction(project,true);
        }
      }
    }
.start();
  }
}","@Override public void projectOpened(final Project project){
  closeJMS(project);
  if (shouldEnableJMS(project)) {
    new Thread(){
      public void run(){
        if (TicketUtils.isTicketValid(project)) {
          initializeJMS(project);
        }
 else {
          EMSLoginAction.loginAction(project);
        }
      }
    }
.start();
  }
}",0.982608695652174
88597,"public boolean isDisabled(){
  if (jmsMessageListener == null) {
    disabled=true;
  }
  return disabled;
}","public boolean isDisabled(){
  if (jmsMessageListener == null) {
    return true;
  }
  return this.jmsMessageListener.isDisabled();
}",0.8181818181818182
88598,"public void initializeJMS(Project project){
  JMSSyncProjectMapping jmsSyncProjectMapping=getProjectMapping(project);
  boolean initialized=initDurable(project);
  jmsSyncProjectMapping.setDisabled(!shouldEnableJMS(project) || !initialized);
}","public void initializeJMS(Project project){
  JMSSyncProjectMapping jmsSyncProjectMapping=getProjectMapping(project);
  if (!shouldEnableJMS(project)) {
    jmsSyncProjectMapping.setDisabled(true);
    return;
  }
  boolean initialized=initDurable(project);
  jmsSyncProjectMapping.setDisabled(!initialized);
}",0.7739602169981917
88599,"@Override public void projectSaved(Project project,boolean savedInServer){
  LocalSyncProjectMapping localSyncProjectMapping=LocalSyncProjectEventListenerAdapter.getProjectMapping(project);
  gov.nasa.jpl.mbee.mdk.ems.sync.local.LocalSyncTransactionCommitListener listener=localSyncProjectMapping.getLocalSyncTransactionCommitListener();
  if (listener == null) {
    projectOpened(project);
    listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  }
  listener.getInMemoryLocalChangelog().clear();
}","@Override public void projectSaved(Project project,boolean savedInServer){
  LocalSyncProjectMapping localSyncProjectMapping=LocalSyncProjectEventListenerAdapter.getProjectMapping(project);
  LocalSyncTransactionCommitListener listener=localSyncProjectMapping.getLocalSyncTransactionCommitListener();
  if (listener == null) {
    projectOpened(project);
    listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  }
  listener.getInMemoryLocalChangelog().clear();
}",0.9660238751147842
88600,"@Override public void projectOpened(Project project){
  projectClosed(project);
  LocalSyncProjectMapping localSyncProjectMapping=getProjectMapping(project);
  gov.nasa.jpl.mbee.mdk.ems.sync.local.LocalSyncTransactionCommitListener listener=localSyncProjectMapping.getLocalSyncTransactionCommitListener() != null ? localSyncProjectMapping.getLocalSyncTransactionCommitListener() : new gov.nasa.jpl.mbee.mdk.ems.sync.local.LocalSyncTransactionCommitListener(project);
  if (project.isRemote()) {
    ((MDTransactionManager)project.getRepository().getTransactionManager()).addTransactionCommitListenerIncludingUndoAndRedo(listener);
  }
  localSyncProjectMapping.setLocalSyncTransactionCommitListener(listener);
}","@Override public void projectOpened(Project project){
  closeLocalCommitListener(project);
  LocalSyncProjectMapping localSyncProjectMapping=getProjectMapping(project);
  LocalSyncTransactionCommitListener listener=(localSyncProjectMapping.getLocalSyncTransactionCommitListener() != null ? localSyncProjectMapping.getLocalSyncTransactionCommitListener() : new LocalSyncTransactionCommitListener(project));
  if (project.isRemote()) {
    ((MDTransactionManager)project.getRepository().getTransactionManager()).addTransactionCommitListenerIncludingUndoAndRedo(listener);
  }
  localSyncProjectMapping.setLocalSyncTransactionCommitListener(listener);
}",0.5584129316678913
88601,"@Override public void projectClosed(Project project){
  LocalSyncProjectMapping localSyncProjectMapping=getProjectMapping(project);
  if (localSyncProjectMapping.getLocalSyncTransactionCommitListener() != null) {
    project.getRepository().getTransactionManager().removeTransactionCommitListener(localSyncProjectMapping.getLocalSyncTransactionCommitListener());
  }
}","@Override public void projectClosed(Project project){
  closeLocalCommitListener(project);
}",0.3782608695652174
88602,"public boolean isDisabled(){
synchronized (this.disabled) {
    return disabled.get();
  }
}","public boolean isDisabled(){
synchronized (this.disabled) {
    return (disabled.get() || !MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled());
  }
}",0.7419354838709677
88603,"@Override public Runnable transactionCommited(Collection<PropertyChangeEvent> events){
  if (isDisabled() || !MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()) {
    return null;
  }
  return new TransactionCommitHandler(events,project);
}","@Override public Runnable transactionCommited(Collection<PropertyChangeEvent> events){
  if (isDisabled()) {
    return null;
  }
  return new TransactionCommitHandler(events,project);
}",0.8571428571428571
88604,"@Override public void projectSaved(Project project,boolean savedInServer){
  projectOpened(project);
}","@Override public void projectSaved(Project project,boolean savedInServer){
  updateSyncStatus();
}",0.86
88605,"@Override public void projectOpened(Project project){
  SyncStatusConfigurator.getSyncStatusAction().update();
}","@Override public void projectOpened(Project project){
  updateSyncStatus();
}",0.7513227513227513
88606,"@Override public void projectClosed(Project project){
  projectOpened(project);
}","@Override public void projectClosed(Project project){
  updateSyncStatus();
}",0.8227848101265823
88607,"@SuppressWarnings(""String_Node_Str"") @Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  if (ProjectUtilities.isFromTeamworkServer(project.getPrimaryProject()) && TeamworkUtils.getLoggedUserName() == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  LocalSyncTransactionCommitListener listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  if (listener == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  String url;
  try {
    url=MMSUtils.getServerUrl(project);
  }
 catch (  IllegalStateException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (url == null || url.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  String site=MMSUtils.getSiteName(project);
  if (site == null || site.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  try {
    if (!MMSUtils.isSiteEditable(project,site)) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
  }
 catch (  ServerException e) {
    e.printStackTrace();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    return;
  }
catch (  URISyntaxException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  listener.setDisabled(true);
  SyncElements.lockSyncFolder(project);
  listener.setDisabled(false);
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(Application.getInstance().getProject());
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  if (jmsMessageListener == null) {
    if (MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    return;
  }
  Changelog<String,Element> persistedLocalChangelog=new Changelog<>();
  Collection<SyncElement> persistedLocalSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.LOCAL);
  for (  SyncElement syncElement : persistedLocalSyncElements) {
    persistedLocalChangelog=persistedLocalChangelog.and(SyncElements.buildChangelog(syncElement),(key,value) -> Converters.getIdToElementConverter().apply(key,project));
  }
  Changelog<String,Element> localChangelog=persistedLocalChangelog.and(listener.getInMemoryLocalChangelog());
  Map<String,Element> localCreated=localChangelog.get(Changelog.ChangeType.CREATED), localUpdated=localChangelog.get(Changelog.ChangeType.UPDATED), localDeleted=localChangelog.get(Changelog.ChangeType.DELETED);
  Changelog<String,Void> persistedJmsChangelog=new Changelog<>();
  Collection<SyncElement> persistedJmsSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.MMS);
  for (  SyncElement syncElement : persistedJmsSyncElements) {
    persistedJmsChangelog=persistedJmsChangelog.and(SyncElements.buildChangelog(syncElement));
  }
  Changelog<String,Void> jmsChangelog=persistedJmsChangelog.and(jmsMessageListener.getInMemoryJMSChangelog(),(key,objectNode) -> null);
  Map<String,Void> jmsCreated=jmsChangelog.get(Changelog.ChangeType.CREATED), jmsUpdated=jmsChangelog.get(Changelog.ChangeType.UPDATED), jmsDeleted=jmsChangelog.get(Changelog.ChangeType.DELETED);
  Set<String> elementIdsToGet=new HashSet<>(jmsUpdated.keySet());
  elementIdsToGet.addAll(jmsCreated.keySet());
  if (shouldUpdate && !jmsChangelog.isEmpty()) {
    int size=jmsChangelog.flattenedSize();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + size + ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  Map<String,ObjectNode> jmsJsons=new HashMap<>(elementIdsToGet.size());
  if (!elementIdsToGet.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"" + elementIdsToGet.size() + ""String_Node_Str""+ (elementIdsToGet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    ObjectNode response=null;
    try {
      response=MMSUtils.getElementsById(elementIdsToGet,project,progressStatus);
    }
 catch (    ServerException|IOException|URISyntaxException e) {
      if (e instanceof ServerException && ((ServerException)e).getCode() == 404) {
        (response=JacksonUtils.getObjectMapper().createObjectNode()).putArray(""String_Node_Str"");
      }
 else       if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        e.printStackTrace();
        return;
      }
    }
    if (progressStatus.isCancel()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    JsonNode elementsArrayNode;
    if (response == null || (elementsArrayNode=response.get(""String_Node_Str"")) == null || !elementsArrayNode.isArray()) {
      Utils.guilog(""String_Node_Str"");
      return;
    }
    for (    JsonNode jsonNode : elementsArrayNode) {
      if (!jsonNode.isObject()) {
        continue;
      }
      String webId=jsonNode.get(MDKConstants.SYSML_ID_KEY).asText();
      jmsJsons.put(webId,(ObjectNode)jsonNode);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  Map<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedChanges=new LinkedHashMap<>(), unconflictedChanges=new LinkedHashMap<>();
  localChangelog.findConflicts(jmsChangelog,(change,change2) -> change != null && change2 != null,conflictedChanges,unconflictedChanges);
  Map<String,Element> localElementsToPost=new LinkedHashMap<>(localCreated.size() + localUpdated.size());
  Set<String> localElementsToDelete=new HashSet<>(localDeleted.size());
  Map<String,ObjectNode> jmsElementsToCreateLocally=new LinkedHashMap<>(jmsCreated.size());
  Map<String,Pair<ObjectNode,Element>> jmsElementsToUpdateLocally=new LinkedHashMap<>(jmsUpdated.size());
  Map<String,Element> jmsElementsToDeleteLocally=new LinkedHashMap<>(jmsDeleted.size());
  for (  Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> unconflictedEntry : unconflictedChanges.entrySet()) {
    String id=unconflictedEntry.getKey();
    Changelog.Change<Element> localChange=unconflictedEntry.getValue().getFirst();
    Changelog.Change<ObjectNode> jmsChange=unconflictedEntry.getValue().getSecond() != null ? new Changelog.Change<>(jmsJsons.get(id),unconflictedEntry.getValue().getSecond().getType()) : null;
    if (shouldCommit && localChange != null) {
      Element element=localChange.getChanged();
switch (localChange.getType()) {
case CREATED:
case UPDATED:
        if (element == null) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
          continue;
        }
      localElementsToPost.put(id,element);
    break;
case DELETED:
  if (element != null && !project.isDisposed(element)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
    continue;
  }
localElementsToDelete.add(id);
break;
}
}
 else if (shouldUpdate && jmsChange != null) {
ObjectNode objectNode=jmsChange.getChanged();
Element element=Converters.getIdToElementConverter().apply(id,project);
switch (jmsChange.getType()) {
case CREATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element != null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
jmsElementsToCreateLocally.put(id,objectNode);
break;
case UPDATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.UPDATED);
continue;
}
jmsElementsToUpdateLocally.put(id,new Pair<>(objectNode,element));
break;
case DELETED:
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
continue;
}
jmsElementsToDeleteLocally.put(id,element);
break;
}
}
}
if (progressStatus.isCancel()) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
return;
}
boolean shouldLogNoLocalChanges=shouldCommit;
if (shouldCommit && !localElementsToPost.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
ArrayNode elementsArrayNode=JacksonUtils.getObjectMapper().createArrayNode();
for (Element element : localElementsToPost.values()) {
ObjectNode elementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
if (elementObjectNode != null) {
elementsArrayNode.add(elementObjectNode);
}
}
if (elementsArrayNode.size() > 0) {
ObjectNode body=JacksonUtils.getObjectMapper().createObjectNode();
body.set(""String_Node_Str"",elementsArrayNode);
body.put(""String_Node_Str"",""String_Node_Str"");
body.put(""String_Node_Str"",MDKPlugin.VERSION);
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(elementsArrayNode.size()) + ""String_Node_Str""+ (elementsArrayNode.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
try {
OutputQueue.getInstance().offer(new Request(MMSUtils.HttpRequestType.POST,MMSUtils.getServiceWorkspacesSitesElementsUri(project),body,true,elementsArrayNode.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
}
if (shouldCommit && shouldCommitDeletes && !localElementsToDelete.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
ArrayNode elementsArrayNode=JacksonUtils.getObjectMapper().createArrayNode();
for (String id : localElementsToDelete) {
ObjectNode elementObjectNode=JacksonUtils.getObjectMapper().createObjectNode();
elementObjectNode.put(MDKConstants.SYSML_ID_KEY,id);
elementsArrayNode.add(elementObjectNode);
}
ObjectNode body=JacksonUtils.getObjectMapper().createObjectNode();
body.set(""String_Node_Str"",elementsArrayNode);
body.put(""String_Node_Str"",""String_Node_Str"");
body.put(""String_Node_Str"",MDKPlugin.VERSION);
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(elementsArrayNode.size()) + ""String_Node_Str""+ (elementsArrayNode.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder uri=MMSUtils.getServiceWorkspacesSitesElementsUri(project);
try {
OutputQueue.getInstance().offer(new Request(MMSUtils.HttpRequestType.POST,uri,body,true,elementsArrayNode.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
if (shouldLogNoLocalChanges) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
}
if (shouldUpdate) {
listener.setDisabled(true);
List<ObjectNode> jmsElementsToCreateOrUpdateLocally=new ArrayList<>(jmsElementsToCreateLocally.size() + jmsElementsToUpdateLocally.size());
jmsElementsToCreateOrUpdateLocally.addAll(jmsElementsToCreateLocally.values());
jmsElementsToUpdateLocally.values().forEach(pair -> jmsElementsToCreateOrUpdateLocally.add(pair.getFirst()));
UpdateClientElementAction updateClientElementAction=new UpdateClientElementAction(project);
updateClientElementAction.setElementsToUpdate(jmsElementsToCreateOrUpdateLocally);
updateClientElementAction.setElementsToDelete(jmsElementsToDeleteLocally.values().stream().map(Converters.getElementToIdConverter()).filter(id -> id != null).collect(Collectors.toList()));
updateClientElementAction.run(progressStatus);
failedJmsChangelog=failedJmsChangelog.and(updateClientElementAction.getFailedChangelog(),(id,objectNode) -> null);
listener.setDisabled(false);
}
progressStatus.setDescription(""String_Node_Str"");
Set<Element> localConflictedElements=new HashSet<>();
Set<ObjectNode> jmsConflictedElements=new HashSet<>();
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
Changelog.Change<Element> localChange=conflictedEntry.getValue().getFirst();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getSecond() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getSecond().getType()) : null;
if (localChange != null && localChange.getChanged() != null && !project.isDisposed(localChange.getChanged())) {
localConflictedElements.add(localChange.getChanged());
}
if (jmsChange != null && jmsChange.getChanged() != null) {
jmsConflictedElements.add(jmsChange.getChanged());
}
}
ElementValidator elementValidator=new ElementValidator(ElementValidator.buildElementPairs(localConflictedElements,project),jmsConflictedElements,project);
elementValidator.run(progressStatus);
if (!elementValidator.getInvalidElements().isEmpty()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + elementValidator.getInvalidElements().size() + ""String_Node_Str""+ (elementValidator.getInvalidElements().size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
vss.add(elementValidator.getValidationSuite());
Utils.displayValidationWindow(elementValidator.getValidationSuite(),""String_Node_Str"");
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
if (!elementValidator.getInvalidElements().containsKey(id)) {
continue;
}
Changelog.Change<Element> localChange=conflictedEntry.getValue().getFirst();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getSecond() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getSecond().getType()) : null;
if (localChange != null && localChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(localChange.getType())) {
failedLocalChangelog.addChange(conflictedEntry.getKey(),localChange.getChanged(),localChange.getType());
}
if (jmsChange != null && jmsChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(jmsChange.getType())) {
failedJmsChangelog.addChange(conflictedEntry.getKey(),null,jmsChange.getType());
}
}
}
listener.getInMemoryLocalChangelog().clear();
jmsMessageListener.getInMemoryJMSChangelog().clear();
listener.setDisabled(true);
if (!SessionManager.getInstance().isSessionCreated()) {
SessionManager.getInstance().createSession(""String_Node_Str"");
}
Changelog<String,Void> unprocessedLocalChangelog=new Changelog<>();
if (!shouldCommit) {
unprocessedLocalChangelog=unprocessedLocalChangelog.and(localChangelog,(s,element) -> null);
}
if (shouldCommit && !shouldCommitDeletes) {
Map<String,Void> unprocessedLocalDeletedChanges=unprocessedLocalChangelog.get(Changelog.ChangeType.DELETED);
for (String key : localChangelog.get(Changelog.ChangeType.DELETED).keySet()) {
unprocessedLocalDeletedChanges.put(key,null);
}
}
unprocessedLocalChangelog=unprocessedLocalChangelog.and(failedLocalChangelog,(s,element) -> null);
try {
SyncElements.setByType(project,SyncElement.Type.LOCAL,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedLocalChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
Changelog<String,Void> unprocessedJmsChangelog=new Changelog<>();
if (!shouldUpdate) {
unprocessedJmsChangelog=unprocessedJmsChangelog.and(jmsChangelog);
}
unprocessedJmsChangelog=unprocessedJmsChangelog.and(failedJmsChangelog);
try {
SyncElements.setByType(project,SyncElement.Type.MMS,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedJmsChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
SessionManager.getInstance().closeSession();
listener.setDisabled(false);
failure=false;
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(ProgressStatus progressStatus){
  progressStatus.setDescription(""String_Node_Str"");
  if (ProjectUtilities.isFromTeamworkServer(project.getPrimaryProject()) && TeamworkUtils.getLoggedUserName() == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  LocalSyncTransactionCommitListener listener=LocalSyncProjectEventListenerAdapter.getProjectMapping(project).getLocalSyncTransactionCommitListener();
  if (listener == null) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  String url;
  try {
    url=MMSUtils.getServerUrl(project);
  }
 catch (  IllegalStateException e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  if (url == null || url.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  String site=MMSUtils.getSiteName(project);
  if (site == null || site.isEmpty()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  try {
    if (!MMSUtils.isSiteEditable(project,site)) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
  }
 catch (  ServerException e) {
    e.printStackTrace();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    return;
  }
catch (  URISyntaxException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  listener.setDisabled(true);
  SyncElements.lockSyncFolder(project);
  listener.setDisabled(false);
  JMSSyncProjectEventListenerAdapter.JMSSyncProjectMapping jmsSyncProjectMapping=JMSSyncProjectEventListenerAdapter.getProjectMapping(Application.getInstance().getProject());
  JMSMessageListener jmsMessageListener=jmsSyncProjectMapping.getJmsMessageListener();
  if (jmsMessageListener == null) {
    if (MDKOptionsGroup.getMDKOptions().isChangeListenerEnabled()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
    }
    return;
  }
  Changelog<String,Element> persistedLocalChangelog=new Changelog<>();
  Collection<SyncElement> persistedLocalSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.LOCAL);
  for (  SyncElement syncElement : persistedLocalSyncElements) {
    persistedLocalChangelog=persistedLocalChangelog.and(SyncElements.buildChangelog(syncElement),(key,value) -> Converters.getIdToElementConverter().apply(key,project));
  }
  Changelog<String,Element> localChangelog=persistedLocalChangelog.and(listener.getInMemoryLocalChangelog());
  Map<String,Element> localCreated=localChangelog.get(Changelog.ChangeType.CREATED), localUpdated=localChangelog.get(Changelog.ChangeType.UPDATED), localDeleted=localChangelog.get(Changelog.ChangeType.DELETED);
  Changelog<String,Void> persistedJmsChangelog=new Changelog<>();
  Collection<SyncElement> persistedJmsSyncElements=SyncElements.getAllOfType(project,SyncElement.Type.MMS);
  for (  SyncElement syncElement : persistedJmsSyncElements) {
    persistedJmsChangelog=persistedJmsChangelog.and(SyncElements.buildChangelog(syncElement));
  }
  Changelog<String,Void> jmsChangelog=persistedJmsChangelog.and(jmsMessageListener.getInMemoryJMSChangelog(),(key,objectNode) -> null);
  Map<String,Void> jmsCreated=jmsChangelog.get(Changelog.ChangeType.CREATED), jmsUpdated=jmsChangelog.get(Changelog.ChangeType.UPDATED), jmsDeleted=jmsChangelog.get(Changelog.ChangeType.DELETED);
  Set<String> elementIdsToGet=new HashSet<>(jmsUpdated.keySet());
  elementIdsToGet.addAll(jmsCreated.keySet());
  if (shouldUpdate && !jmsChangelog.isEmpty()) {
    int size=jmsChangelog.flattenedSize();
    Application.getInstance().getGUILog().log(""String_Node_Str"" + size + ""String_Node_Str""+ (size != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  Map<String,ObjectNode> jmsJsons=new HashMap<>(elementIdsToGet.size());
  if (!elementIdsToGet.isEmpty()) {
    progressStatus.setDescription(""String_Node_Str"" + elementIdsToGet.size() + ""String_Node_Str""+ (elementIdsToGet.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    ObjectNode response=null;
    try {
      response=MMSUtils.getElementsById(elementIdsToGet,project,progressStatus);
    }
 catch (    ServerException|IOException|URISyntaxException e) {
      if (e instanceof ServerException && ((ServerException)e).getCode() == 404) {
        (response=JacksonUtils.getObjectMapper().createObjectNode()).putArray(""String_Node_Str"");
      }
 else       if (!progressStatus.isCancel()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        e.printStackTrace();
        return;
      }
    }
    if (progressStatus.isCancel()) {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      return;
    }
    JsonNode elementsArrayNode;
    if (response == null || (elementsArrayNode=response.get(""String_Node_Str"")) == null || !elementsArrayNode.isArray()) {
      Utils.guilog(""String_Node_Str"");
      return;
    }
    for (    JsonNode jsonNode : elementsArrayNode) {
      if (!jsonNode.isObject()) {
        continue;
      }
      String webId=jsonNode.get(MDKConstants.SYSML_ID_KEY).asText();
      jmsJsons.put(webId,(ObjectNode)jsonNode);
    }
  }
  progressStatus.setDescription(""String_Node_Str"");
  Map<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedChanges=new LinkedHashMap<>(), unconflictedChanges=new LinkedHashMap<>();
  localChangelog.findConflicts(jmsChangelog,(change,change2) -> change != null && change2 != null,conflictedChanges,unconflictedChanges);
  Map<String,Element> localElementsToPost=new LinkedHashMap<>(localCreated.size() + localUpdated.size());
  Set<String> localElementsToDelete=new HashSet<>(localDeleted.size());
  Map<String,ObjectNode> jmsElementsToCreateLocally=new LinkedHashMap<>(jmsCreated.size());
  Map<String,Pair<ObjectNode,Element>> jmsElementsToUpdateLocally=new LinkedHashMap<>(jmsUpdated.size());
  Map<String,Element> jmsElementsToDeleteLocally=new LinkedHashMap<>(jmsDeleted.size());
  for (  Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> unconflictedEntry : unconflictedChanges.entrySet()) {
    String id=unconflictedEntry.getKey();
    Changelog.Change<Element> localChange=unconflictedEntry.getValue().getFirst();
    Changelog.Change<ObjectNode> jmsChange=unconflictedEntry.getValue().getSecond() != null ? new Changelog.Change<>(jmsJsons.get(id),unconflictedEntry.getValue().getSecond().getType()) : null;
    if (shouldCommit && localChange != null) {
      Element element=localChange.getChanged();
switch (localChange.getType()) {
case CREATED:
case UPDATED:
        if (element == null) {
          Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
          continue;
        }
      localElementsToPost.put(id,element);
    break;
case DELETED:
  if (element != null && !project.isDisposed(element)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
    continue;
  }
localElementsToDelete.add(id);
break;
}
}
 else if (shouldUpdate && jmsChange != null) {
ObjectNode objectNode=jmsChange.getChanged();
Element element=Converters.getIdToElementConverter().apply(id,project);
switch (jmsChange.getType()) {
case CREATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element != null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
jmsElementsToCreateLocally.put(id,objectNode);
break;
case UPDATED:
if (objectNode == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.UPDATED);
continue;
}
jmsElementsToUpdateLocally.put(id,new Pair<>(objectNode,element));
break;
case DELETED:
if (element == null) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
continue;
}
if (!element.isEditable()) {
if (MDUtils.isDeveloperMode()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + id + ""String_Node_Str"");
}
failedJmsChangelog.addChange(id,null,Changelog.ChangeType.DELETED);
continue;
}
jmsElementsToDeleteLocally.put(id,element);
break;
}
}
}
if (progressStatus.isCancel()) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
return;
}
boolean shouldLogNoLocalChanges=shouldCommit;
if (shouldCommit && !localElementsToPost.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
ArrayNode elementsArrayNode=JacksonUtils.getObjectMapper().createArrayNode();
for (Element element : localElementsToPost.values()) {
ObjectNode elementObjectNode=Converters.getElementToJsonConverter().apply(element,project);
if (elementObjectNode != null) {
elementsArrayNode.add(elementObjectNode);
}
}
if (elementsArrayNode.size() > 0) {
ObjectNode body=JacksonUtils.getObjectMapper().createObjectNode();
body.set(""String_Node_Str"",elementsArrayNode);
body.put(""String_Node_Str"",""String_Node_Str"");
body.put(""String_Node_Str"",MDKPlugin.VERSION);
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(elementsArrayNode.size()) + ""String_Node_Str""+ (elementsArrayNode.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
try {
OutputQueue.getInstance().offer(new Request(MMSUtils.HttpRequestType.POST,MMSUtils.getServiceWorkspacesSitesElementsUri(project),body,true,elementsArrayNode.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
}
if (shouldCommit && shouldCommitDeletes && !localElementsToDelete.isEmpty()) {
progressStatus.setDescription(""String_Node_Str"");
ArrayNode elementsArrayNode=JacksonUtils.getObjectMapper().createArrayNode();
for (String id : localElementsToDelete) {
ObjectNode elementObjectNode=JacksonUtils.getObjectMapper().createObjectNode();
elementObjectNode.put(MDKConstants.SYSML_ID_KEY,id);
elementsArrayNode.add(elementObjectNode);
}
ObjectNode body=JacksonUtils.getObjectMapper().createObjectNode();
body.set(""String_Node_Str"",elementsArrayNode);
body.put(""String_Node_Str"",""String_Node_Str"");
body.put(""String_Node_Str"",MDKPlugin.VERSION);
Application.getInstance().getGUILog().log(""String_Node_Str"" + NumberFormat.getInstance().format(elementsArrayNode.size()) + ""String_Node_Str""+ (elementsArrayNode.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
URIBuilder uri=MMSUtils.getServiceWorkspacesSitesElementsUri(project);
try {
OutputQueue.getInstance().offer(new Request(MMSUtils.HttpRequestType.DELETE,uri,body,true,elementsArrayNode.size(),""String_Node_Str""));
}
 catch (IOException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
catch (URISyntaxException e) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
e.printStackTrace();
}
shouldLogNoLocalChanges=false;
}
if (shouldLogNoLocalChanges) {
Application.getInstance().getGUILog().log(""String_Node_Str"");
}
if (shouldUpdate) {
listener.setDisabled(true);
List<ObjectNode> jmsElementsToCreateOrUpdateLocally=new ArrayList<>(jmsElementsToCreateLocally.size() + jmsElementsToUpdateLocally.size());
jmsElementsToCreateOrUpdateLocally.addAll(jmsElementsToCreateLocally.values());
jmsElementsToUpdateLocally.values().forEach(pair -> jmsElementsToCreateOrUpdateLocally.add(pair.getFirst()));
UpdateClientElementAction updateClientElementAction=new UpdateClientElementAction(project);
updateClientElementAction.setElementsToUpdate(jmsElementsToCreateOrUpdateLocally);
updateClientElementAction.setElementsToDelete(jmsElementsToDeleteLocally.values().stream().map(Converters.getElementToIdConverter()).filter(id -> id != null).collect(Collectors.toList()));
updateClientElementAction.run(progressStatus);
failedJmsChangelog=failedJmsChangelog.and(updateClientElementAction.getFailedChangelog(),(id,objectNode) -> null);
listener.setDisabled(false);
}
progressStatus.setDescription(""String_Node_Str"");
Set<Element> localConflictedElements=new HashSet<>();
Set<ObjectNode> jmsConflictedElements=new HashSet<>();
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
Changelog.Change<Element> localChange=conflictedEntry.getValue().getFirst();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getSecond() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getSecond().getType()) : null;
if (localChange != null && localChange.getChanged() != null && !project.isDisposed(localChange.getChanged())) {
localConflictedElements.add(localChange.getChanged());
}
if (jmsChange != null && jmsChange.getChanged() != null) {
jmsConflictedElements.add(jmsChange.getChanged());
}
}
ElementValidator elementValidator=new ElementValidator(ElementValidator.buildElementPairs(localConflictedElements,project),jmsConflictedElements,project);
elementValidator.run(progressStatus);
if (!elementValidator.getInvalidElements().isEmpty()) {
Application.getInstance().getGUILog().log(""String_Node_Str"" + elementValidator.getInvalidElements().size() + ""String_Node_Str""+ (elementValidator.getInvalidElements().size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
vss.add(elementValidator.getValidationSuite());
Utils.displayValidationWindow(elementValidator.getValidationSuite(),""String_Node_Str"");
for (Map.Entry<String,Pair<Changelog.Change<Element>,Changelog.Change<Void>>> conflictedEntry : conflictedChanges.entrySet()) {
String id=conflictedEntry.getKey();
if (!elementValidator.getInvalidElements().containsKey(id)) {
continue;
}
Changelog.Change<Element> localChange=conflictedEntry.getValue().getFirst();
Changelog.Change<ObjectNode> jmsChange=conflictedEntry.getValue().getSecond() != null ? new Changelog.Change<>(jmsJsons.get(id),conflictedEntry.getValue().getSecond().getType()) : null;
if (localChange != null && localChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(localChange.getType())) {
failedLocalChangelog.addChange(conflictedEntry.getKey(),localChange.getChanged(),localChange.getType());
}
if (jmsChange != null && jmsChange.getChanged() != null || Changelog.ChangeType.DELETED.equals(jmsChange.getType())) {
failedJmsChangelog.addChange(conflictedEntry.getKey(),null,jmsChange.getType());
}
}
}
listener.getInMemoryLocalChangelog().clear();
jmsMessageListener.getInMemoryJMSChangelog().clear();
listener.setDisabled(true);
if (!SessionManager.getInstance().isSessionCreated()) {
SessionManager.getInstance().createSession(""String_Node_Str"");
}
Changelog<String,Void> unprocessedLocalChangelog=new Changelog<>();
if (!shouldCommit) {
unprocessedLocalChangelog=unprocessedLocalChangelog.and(localChangelog,(s,element) -> null);
}
if (shouldCommit && !shouldCommitDeletes) {
Map<String,Void> unprocessedLocalDeletedChanges=unprocessedLocalChangelog.get(Changelog.ChangeType.DELETED);
for (String key : localChangelog.get(Changelog.ChangeType.DELETED).keySet()) {
unprocessedLocalDeletedChanges.put(key,null);
}
}
unprocessedLocalChangelog=unprocessedLocalChangelog.and(failedLocalChangelog,(s,element) -> null);
try {
SyncElements.setByType(project,SyncElement.Type.LOCAL,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedLocalChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
Changelog<String,Void> unprocessedJmsChangelog=new Changelog<>();
if (!shouldUpdate) {
unprocessedJmsChangelog=unprocessedJmsChangelog.and(jmsChangelog);
}
unprocessedJmsChangelog=unprocessedJmsChangelog.and(failedJmsChangelog);
try {
SyncElements.setByType(project,SyncElement.Type.MMS,JacksonUtils.getObjectMapper().writeValueAsString(SyncElements.buildJson(unprocessedJmsChangelog)));
}
 catch (JsonProcessingException e) {
e.printStackTrace();
}
SessionManager.getInstance().closeSession();
listener.setDisabled(false);
failure=false;
}",0.9997568980187188
88608,"public static Class createBlock(String name,Element owner){
  Class newBlock=createClass(name,owner);
  Element stereo=ElementFinder.getElementByID(""String_Node_Str"");
  if (!(stereo instanceof Stereotype)) {
    return null;
  }
  Stereotype block=(Stereotype)stereo;
  StereotypesHelper.addStereotype(newBlock,block);
  return newBlock;
}","public static Class createBlock(String name,Element owner){
  Class newBlock=createClass(name,owner);
  Element stereo=ElementFinder.getElementByID(""String_Node_Str"",Project.getProject(owner));
  if (!(stereo instanceof Stereotype)) {
    return null;
  }
  Stereotype block=(Stereotype)stereo;
  StereotypesHelper.addStereotype(newBlock,block);
  return newBlock;
}",0.963172804532578
88609,"public static Property createPartProperty(String name,Element owner){
  Property newProp=createProperty(name,owner,null,null,null,null,null);
  Element stereo=ElementFinder.getElementByID(""String_Node_Str"");
  if (!(stereo instanceof Stereotype)) {
    return null;
  }
  Stereotype partProp=(Stereotype)stereo;
  StereotypesHelper.addStereotype(newProp,partProp);
  return newProp;
}","public static Property createPartProperty(String name,Element owner){
  Property newProp=createProperty(name,owner,null,null,null,null,null);
  Element stereo=ElementFinder.getElementByID(""String_Node_Str"",Project.getProject(owner));
  if (!(stereo instanceof Stereotype)) {
    return null;
  }
  Stereotype partProp=(Stereotype)stereo;
  StereotypesHelper.addStereotype(newProp,partProp);
  return newProp;
}",0.9672544080604534
88610,"@BeforeClass public static void setupProject() throws IOException, ServerException, URISyntaxException {
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  System.out.println(""String_Node_Str"");
  Assert.fail(""String_Node_Str"");
  MDKTestHelper.setMmsCredentials(""String_Node_Str"",""String_Node_Str"");
  MagicDrawHelper.openProject(filename);
  if (!MDKHelper.isSiteEditable()) {
    throw new IOException(""String_Node_Str"");
  }
  MagicDrawHelper.createSession();
  try {
    MagicDrawHelper.clearModel();
  }
 catch (  ReadOnlyElementException roee) {
    System.out.println(roee.getMessage() + ""String_Node_Str"" + roee.getElement().getHumanName());
  }
  MagicDrawHelper.closeSession();
  MagicDrawHelper.createSession();
  targetPackage=MagicDrawHelper.createPackage(""String_Node_Str"",ElementFinder.getModelRoot());
  targetElement=MagicDrawHelper.createDocument(""String_Node_Str"",targetPackage);
  MagicDrawHelper.setElementDocumentation(targetElement,""String_Node_Str"");
  MagicDrawHelper.closeSession();
  MagicDrawHelper.saveProject(filename);
  MDKHelper.loadCoordinatedSyncValidations();
  MDKHelper.getValidationWindow().listPooledViolations();
  MDKHelper.getValidationWindow().commitAllMDChangesToMMS();
}","@BeforeClass public static void setupProject() throws IOException, ServerException, URISyntaxException {
  MDKTestHelper.setMmsCredentials(""String_Node_Str"",""String_Node_Str"");
  MagicDrawHelper.openProject(filename);
  if (!MDKHelper.isSiteEditable()) {
    throw new IOException(""String_Node_Str"");
  }
  MagicDrawHelper.createSession();
  try {
    MagicDrawHelper.clearModel();
  }
 catch (  ReadOnlyElementException roee) {
    System.out.println(roee.getMessage() + ""String_Node_Str"" + roee.getElement().getHumanName());
  }
  MagicDrawHelper.closeSession();
  MagicDrawHelper.createSession();
  targetPackage=MagicDrawHelper.createPackage(""String_Node_Str"",ElementFinder.getModelRoot());
  targetElement=MagicDrawHelper.createDocument(""String_Node_Str"",targetPackage);
  MagicDrawHelper.setElementDocumentation(targetElement,""String_Node_Str"");
  MagicDrawHelper.closeSession();
  MagicDrawHelper.saveProject(filename);
  MDKHelper.loadCoordinatedSyncValidations();
  MDKHelper.getValidationWindow().listPooledViolations();
  MDKHelper.getValidationWindow().commitAllMDChangesToMMS();
}",0.917331095258078
88611,"@BeforeClass public static void setupProject() throws IOException, ServerException, URISyntaxException {
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  System.out.println(""String_Node_Str"");
  Assert.fail(""String_Node_Str"");
  MDKTestHelper.setMmsCredentials(""String_Node_Str"",""String_Node_Str"");
  MagicDrawHelper.openProject(filename);
  if (!MDKHelper.isSiteEditable()) {
    throw new IOException(""String_Node_Str"");
  }
  MagicDrawHelper.createSession();
  try {
    MagicDrawHelper.clearModel();
  }
 catch (  ReadOnlyElementException roee) {
    System.out.println(roee.getMessage() + ""String_Node_Str"" + roee.getElement().getHumanName());
  }
  MagicDrawHelper.closeSession();
  MagicDrawHelper.createSession();
  targetPackage=MagicDrawHelper.createPackage(""String_Node_Str"",ElementFinder.getModelRoot());
  targetElement=MagicDrawHelper.createDocument(""String_Node_Str"",targetPackage);
  MagicDrawHelper.setElementDocumentation(targetElement,""String_Node_Str"");
  MagicDrawHelper.closeSession();
  MagicDrawHelper.saveProject(filename);
  MDKHelper.loadCoordinatedSyncValidations();
  MDKHelper.getValidationWindow().listPooledViolations();
  MDKHelper.getValidationWindow().commitAllMDChangesToMMS();
}","@BeforeClass public static void setupProject() throws IOException, ServerException, URISyntaxException {
  MDKTestHelper.setMmsCredentials(""String_Node_Str"",""String_Node_Str"");
  MagicDrawHelper.openProject(filename);
  if (!MDKHelper.isSiteEditable()) {
    throw new IOException(""String_Node_Str"");
  }
  MagicDrawHelper.createSession();
  try {
    MagicDrawHelper.clearModel();
  }
 catch (  ReadOnlyElementException roee) {
    System.out.println(roee.getMessage() + ""String_Node_Str"" + roee.getElement().getHumanName());
  }
  MagicDrawHelper.closeSession();
  MagicDrawHelper.createSession();
  targetPackage=MagicDrawHelper.createPackage(""String_Node_Str"",ElementFinder.getModelRoot());
  targetElement=MagicDrawHelper.createDocument(""String_Node_Str"",targetPackage);
  MagicDrawHelper.setElementDocumentation(targetElement,""String_Node_Str"");
  MagicDrawHelper.closeSession();
  MagicDrawHelper.saveProject(filename);
  MDKHelper.loadCoordinatedSyncValidations();
  MDKHelper.getValidationWindow().listPooledViolations();
  MDKHelper.getValidationWindow().commitAllMDChangesToMMS();
}",0.917331095258078
88612,"/** 
 * Accepts the MMS version into MD for the specified violation type
 * @param violationType the type of violation to be accepted
 * @param commit will commit to MMS if true, will accept from MMS is false
 * @param targets limits processing of violations to only those elements that are contained in the collection. if null, does not limit processing. ** COLLECTION IS MODIFIED DURING FUNCTION EXECUTION  exception will be thrown if specified with targetIDs.
 * @param targetIDs limits processing of violations to only those elements whose IDs are contained in the collection. if null, does not limit processing. ** COLLECTION IS MODIFIED DURING FUNCTION EXECUTION  exception will be thrown if specified with targets.
 * @throws ClassNotFoundException , NoSuchMethodException, InvocationTargetException, IllegalAccessException
 */
private void processValidationResults(String violationType,Collection<Element> targets,Collection<String> targetIDs,boolean commit) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
  if (targets != null && targetIDs != null) {
    throw new IllegalAccessException(""String_Node_Str"");
  }
  violationType=standardize(violationType);
  MagicDrawHelper.generalMessage((commit ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (targets != null ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ violationType+ ""String_Node_Str"");
  int ruleIndex=lookupListIndex(violationType);
  String className=VALIDATION_OPTIONS[ruleIndex][(commit ? COMMIT_ACTION : ACCEPT_ACTION)];
  if (pooledViolations.get(ruleIndex).isEmpty()) {
    MagicDrawHelper.generalMessage(""String_Node_Str"" + violationType + ""String_Node_Str""+ (commit ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    return;
  }
 else   if (className.equals(""String_Node_Str"")) {
    MagicDrawHelper.generalMessage(""String_Node_Str"" + (commit ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ violationType+ ""String_Node_Str"");
    return;
  }
  List<ValidationRuleViolation> violationList=pooledViolations.get(ruleIndex);
  if (violationType.equals(""String_Node_Str"")) {
    if (!commit || !violationList.get(0).getComment().equals(""String_Node_Str"")) {
      return;
    }
  }
  int actionIndex=0;
  while (actionIndex < violationList.get(0).getActions().size() && !(violationList.get(0).getActions().get(actionIndex).getClass().getSimpleName().equals(className)))   actionIndex++;
  if (actionIndex >= violationList.get(0).getActions().size() || !(violationList.get(0).getActions().get(actionIndex).getClass().getSimpleName().equals(className)))   throw new ClassNotFoundException(""String_Node_Str"" + className + ""String_Node_Str""+ violationType);
  if (violationType.equals(""String_Node_Str"")) {
    for (    ValidationRuleViolation vrv : violationList) {
      Utils.forceDialogReturnFalse();
      ((InitializeProjectModel)vrv.getActions().get(actionIndex)).actionPerformed(new ActionEvent(new JButton(),5,""String_Node_Str""));
    }
  }
 else   if (violationType.equals(""String_Node_Str"")) {
    for (    ValidationRuleViolation vrv : violationList) {
      if ((targets == null || targets.remove(vrv.getElement())) && (targetIDs == null) || targetIDs.remove(getIdFromVRVComment(vrv))) {
        if (commit) {
          vrv.getActions().get(actionIndex).actionPerformed(new ActionEvent(new JButton(),5,""String_Node_Str""));
        }
 else {
          vrv.getActions().get(actionIndex).actionPerformed(new ActionEvent(new JButton(),5,""String_Node_Str""));
        }
      }
    }
  }
 else {
    java.lang.reflect.Method getAnnotation=violationList.get(0).getActions().get(actionIndex).getClass().getMethod(""String_Node_Str"");
    java.lang.reflect.Method execute=violationList.get(0).getActions().get(actionIndex).getClass().getMethod(""String_Node_Str"",new java.lang.Class[]{Collection.class});
    Collection<Annotation> annos=new LinkedList<Annotation>();
    for (    ValidationRuleViolation vrv : violationList) {
      if ((targets == null || targets.remove(vrv.getElement())) && (targetIDs == null) || targetIDs.remove(getIdFromVRVComment(vrv))) {
        Annotation anno=(Annotation)getAnnotation.invoke(vrv.getActions().get(actionIndex));
        annos.add(anno);
        System.out.println(""String_Node_Str"" + (commit ? ""String_Node_Str"" : ""String_Node_Str"") + (vrv.getElement() != null ? vrv.getElement().getHumanName() : ""String_Node_Str"")+ ""String_Node_Str""+ vrv.getComment());
      }
    }
    Utils.forceDialogReturnFalse();
    execute.invoke(violationList.get(0).getActions().get(actionIndex),annos);
  }
}","/** 
 * Accepts the MMS version into MD for the specified violation type
 * @param violationType the type of violation to be accepted
 * @param commit will commit to MMS if true, will accept from MMS is false
 * @param targets limits processing of violations to only those elements that are contained in the collection. if null, does not limit processing. ** COLLECTION IS MODIFIED DURING FUNCTION EXECUTION  exception will be thrown if specified with targetIDs.
 * @param targetIDs limits processing of violations to only those elements whose IDs are contained in the collection. if null, does not limit processing. ** COLLECTION IS MODIFIED DURING FUNCTION EXECUTION  exception will be thrown if specified with targets.
 * @throws ClassNotFoundException , NoSuchMethodException, InvocationTargetException, IllegalAccessException
 */
private void processValidationResults(String violationType,Collection<Element> targets,Collection<String> targetIDs,boolean commit) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
  if (targets != null && targetIDs != null) {
    throw new IllegalAccessException(""String_Node_Str"");
  }
  violationType=standardize(violationType);
  MagicDrawHelper.generalMessage((commit ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (targets != null ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ violationType+ ""String_Node_Str"");
  int ruleIndex=lookupListIndex(violationType);
  String className=VALIDATION_OPTIONS[ruleIndex][(commit ? COMMIT_ACTION : ACCEPT_ACTION)];
  if (pooledViolations.get(ruleIndex).isEmpty()) {
    MagicDrawHelper.generalMessage(""String_Node_Str"" + violationType + ""String_Node_Str""+ (commit ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    return;
  }
 else   if (className.equals(""String_Node_Str"")) {
    MagicDrawHelper.generalMessage(""String_Node_Str"" + (commit ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ violationType+ ""String_Node_Str"");
    return;
  }
  List<ValidationRuleViolation> violationList=pooledViolations.get(ruleIndex);
  if (violationType.equals(""String_Node_Str"")) {
    if (!commit || !violationList.get(0).getComment().equals(""String_Node_Str"")) {
      return;
    }
  }
  int actionIndex=0;
  while (actionIndex < violationList.get(0).getActions().size() && !(violationList.get(0).getActions().get(actionIndex).getClass().getSimpleName().equals(className)))   actionIndex++;
  if (actionIndex >= violationList.get(0).getActions().size() || !(violationList.get(0).getActions().get(actionIndex).getClass().getSimpleName().equals(className)))   throw new ClassNotFoundException(""String_Node_Str"" + className + ""String_Node_Str""+ violationType);
  if (violationType.equals(""String_Node_Str"")) {
    for (    ValidationRuleViolation vrv : violationList) {
      Utils.forceDialogReturnFalse();
      ((InitializeProjectModel)vrv.getActions().get(actionIndex)).actionPerformed(new ActionEvent(new JButton(),5,""String_Node_Str""));
    }
  }
 else   if (violationType.equals(""String_Node_Str"")) {
    for (    ValidationRuleViolation vrv : violationList) {
      if ((targets == null || targets.remove(vrv.getElement())) && (targetIDs == null || targetIDs.remove(getIdFromVRVComment(vrv)))) {
        if (commit) {
          vrv.getActions().get(actionIndex).actionPerformed(new ActionEvent(new JButton(),5,""String_Node_Str""));
        }
 else {
          vrv.getActions().get(actionIndex).actionPerformed(new ActionEvent(new JButton(),5,""String_Node_Str""));
        }
      }
    }
  }
 else {
    java.lang.reflect.Method getAnnotation=violationList.get(0).getActions().get(actionIndex).getClass().getMethod(""String_Node_Str"");
    java.lang.reflect.Method execute=violationList.get(0).getActions().get(actionIndex).getClass().getMethod(""String_Node_Str"",new java.lang.Class[]{Collection.class});
    Collection<Annotation> annos=new LinkedList<Annotation>();
    for (    ValidationRuleViolation vrv : violationList) {
      if ((targets == null || targets.remove(vrv.getElement())) && (targetIDs == null || targetIDs.remove(getIdFromVRVComment(vrv)))) {
        Annotation anno=(Annotation)getAnnotation.invoke(vrv.getActions().get(actionIndex));
        annos.add(anno);
        System.out.println(""String_Node_Str"" + (commit ? ""String_Node_Str"" : ""String_Node_Str"") + (vrv.getElement() != null ? vrv.getElement().getHumanName() : ""String_Node_Str"")+ ""String_Node_Str""+ vrv.getComment());
      }
    }
    Utils.forceDialogReturnFalse();
    execute.invoke(violationList.get(0).getActions().get(actionIndex),annos);
  }
}",0.9995670058454212
88613,"private void checkElement(Element e,JSONObject elementInfo){
  String elementID=ExportUtility.getElementID(e);
  String elementDoc=ModelHelper.getComment(e);
  String elementDocClean=ExportUtility.cleanHtml(elementDoc);
  String elementName=null;
  Boolean editable=(Boolean)elementInfo.get(""String_Node_Str"");
  String webDoc=(String)elementInfo.get(""String_Node_Str"");
  DetailDiff ddiff=new DetailDiff(e,elementInfo);
  if (webDoc != null) {
    webDoc=ExportUtility.cleanHtml(webDoc);
    elementInfo.put(""String_Node_Str"",webDoc);
  }
  if (e instanceof NamedElement) {
    elementName=((NamedElement)e).getName();
  }
  String webName=ExportUtility.unescapeHtml((String)elementInfo.get(""String_Node_Str""));
  if (elementName != null && !elementName.equals(webName)) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + elementName + ""String_Node_Str""+ webName);
    differentElements.add(elementID);
    if (editable)     v.addAction(new ExportName((NamedElement)e));
    v.addAction(ddiff);
    v.addAction(new ImportName((NamedElement)e,webName,result));
    nameDiff.addViolation(v);
  }
  if (elementDoc != null && !(webDoc == null && elementDoc.equals(""String_Node_Str"")) && !elementDocClean.equals(webDoc)) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + truncate(elementDocClean) + ""String_Node_Str""+ truncate((String)elementInfo.get(""String_Node_Str"")));
    differentElements.add(elementID);
    if (editable)     v.addAction(new ExportDoc(e));
    v.addAction(new CompareText(e,webDoc,elementDocClean,result));
    v.addAction(ddiff);
    v.addAction(new ImportDoc(e,webDoc,result));
    docDiff.addViolation(v);
  }
  if (e instanceof Property) {
    ValidationRuleViolation v=valueDiff((Property)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      valueDiff.addViolation(v);
      differentElements.add(elementID);
    }
    ValidationRuleViolation v2=propertyDiff((Property)e,elementInfo);
    if (v2 != null) {
      v2.getActions().add(v2.getActions().size() > 1 ? 1 : 0,ddiff);
      propertyTypeDiff.addViolation(v2);
      differentElements.add(elementID);
    }
  }
 else   if (e instanceof Slot) {
    ValidationRuleViolation v=valueDiff((Slot)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      valueDiff.addViolation(v);
      differentElements.add(elementID);
    }
    ValidationRuleViolation v2=slotTypeDiff((Slot)e,elementInfo);
    if (v2 != null) {
      v2.getActions().add(v2.getActions().size() > 1 ? 1 : 0,ddiff);
      propertyTypeDiff.addViolation(v2);
      differentElements.add(elementID);
    }
  }
 else   if (e instanceof Comment) {
  }
 else   if (e instanceof DirectedRelationship) {
    ValidationRuleViolation v=relationshipDiff((DirectedRelationship)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      relDiff.addViolation(v);
      differentElements.add(elementID);
    }
  }
 else   if (e instanceof Connector) {
    ValidationRuleViolation v=connectorDiff((Connector)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      connectorDiff.addViolation(v);
      differentElements.add(elementID);
    }
  }
 else   if (e instanceof Constraint) {
    ValidationRuleViolation v=constraintDiff((Constraint)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      constraintDiff.addViolation(v);
      differentElements.add(elementID);
    }
  }
 else   if (e instanceof Operation) {
    ValidationRuleViolation v=operationDiff((Operation)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      operationDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Parameter) {
    ValidationRuleViolation v=parameterDiff((Parameter)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      parameterDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Association) {
    ValidationRuleViolation v=associationDiff((Association)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      associationDiff.addViolation(v);
      differentElements.add(elementID);
    }
  }
 else   if (e instanceof Package) {
    ValidationRuleViolation v=siteDiff((Package)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      siteDiff.addViolation(v);
    }
  }
 else   if (e instanceof InstanceSpecification) {
    ValidationRuleViolation v=instanceSpecificationDiff((InstanceSpecification)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      instanceSpec.addViolation(v);
      differentElements.add(elementID);
    }
  }
  if (e instanceof Class) {
    ValidationRuleViolation v=ownedAttributeDiff((Class)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      ownedAttribute.addViolation(v);
      differentElements.add(elementID);
    }
  }
  ValidationRuleViolation v=ownerDiff(e,elementInfo);
  if (v != null) {
    v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
    ownership.addViolation(v);
    differentElements.add(elementID);
  }
  v=metatypeDiff(e,elementInfo);
  if (v != null) {
    v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
    metatypes.addViolation(v);
    differentElements.add(elementID);
  }
  docDiff(e,elementInfo);
}","private void checkElement(Element e,JSONObject elementInfo){
  String elementID=ExportUtility.getElementID(e);
  String elementDoc=ModelHelper.getComment(e);
  String elementDocClean=ExportUtility.cleanHtml(elementDoc);
  String elementName=null;
  Boolean editable=(Boolean)elementInfo.get(""String_Node_Str"");
  String webDoc=(String)elementInfo.get(""String_Node_Str"");
  DetailDiff ddiff=new DetailDiff(e,elementInfo);
  if (webDoc != null) {
    webDoc=ExportUtility.cleanHtml(webDoc);
    elementInfo.put(""String_Node_Str"",webDoc);
  }
  if (e instanceof NamedElement) {
    elementName=((NamedElement)e).getName();
  }
  String webName=ExportUtility.unescapeHtml((String)elementInfo.get(""String_Node_Str""));
  if (elementName != null && !elementName.equals(webName)) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + elementName + ""String_Node_Str""+ webName);
    differentElements.add(elementID);
    if (editable)     v.addAction(new ExportName((NamedElement)e));
    v.addAction(ddiff);
    v.addAction(new ImportName((NamedElement)e,webName,result));
    nameDiff.addViolation(v);
  }
  if (elementDoc != null && !(webDoc == null && elementDoc.equals(""String_Node_Str"")) && !elementDocClean.equals(webDoc)) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + truncate(elementDocClean) + ""String_Node_Str""+ truncate((String)elementInfo.get(""String_Node_Str"")));
    differentElements.add(elementID);
    if (editable)     v.addAction(new ExportDoc(e));
    v.addAction(new CompareText(e,webDoc,elementDocClean,result));
    v.addAction(ddiff);
    v.addAction(new ImportDoc(e,webDoc,result));
    docDiff.addViolation(v);
  }
  if (e instanceof Property) {
    ValidationRuleViolation v=valueDiff((Property)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      valueDiff.addViolation(v);
      differentElements.add(elementID);
    }
    ValidationRuleViolation v2=propertyDiff((Property)e,elementInfo);
    if (v2 != null) {
      v2.getActions().add(v2.getActions().size() > 1 ? 1 : 0,ddiff);
      propertyTypeDiff.addViolation(v2);
      differentElements.add(elementID);
    }
  }
 else   if (e instanceof Slot) {
    ValidationRuleViolation v=valueDiff((Slot)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      valueDiff.addViolation(v);
      differentElements.add(elementID);
    }
    ValidationRuleViolation v2=slotTypeDiff((Slot)e,elementInfo);
    if (v2 != null) {
      v2.getActions().add(v2.getActions().size() > 1 ? 1 : 0,ddiff);
      propertyTypeDiff.addViolation(v2);
      differentElements.add(elementID);
    }
  }
 else   if (e instanceof Comment) {
  }
 else   if (e instanceof DirectedRelationship) {
    ValidationRuleViolation v=relationshipDiff((DirectedRelationship)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      relDiff.addViolation(v);
      differentElements.add(elementID);
    }
  }
 else   if (e instanceof Connector) {
    ValidationRuleViolation v=connectorDiff((Connector)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      connectorDiff.addViolation(v);
      differentElements.add(elementID);
    }
  }
 else   if (e instanceof Constraint) {
    ValidationRuleViolation v=constraintDiff((Constraint)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      constraintDiff.addViolation(v);
      differentElements.add(elementID);
    }
  }
 else   if (e instanceof Operation) {
    ValidationRuleViolation v=operationDiff((Operation)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      operationDiff.addViolation(v);
      differentElements.add(elementID);
    }
  }
 else   if (e instanceof Parameter) {
    ValidationRuleViolation v=parameterDiff((Parameter)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      parameterDiff.addViolation(v);
      differentElements.add(elementID);
    }
  }
 else   if (e instanceof Association) {
    ValidationRuleViolation v=associationDiff((Association)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      associationDiff.addViolation(v);
      differentElements.add(elementID);
    }
  }
 else   if (e instanceof Package) {
    ValidationRuleViolation v=siteDiff((Package)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      siteDiff.addViolation(v);
    }
  }
 else   if (e instanceof InstanceSpecification) {
    ValidationRuleViolation v=instanceSpecificationDiff((InstanceSpecification)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      instanceSpec.addViolation(v);
      differentElements.add(elementID);
    }
  }
  if (e instanceof Class) {
    ValidationRuleViolation v=ownedAttributeDiff((Class)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      ownedAttribute.addViolation(v);
      differentElements.add(elementID);
    }
  }
  ValidationRuleViolation v=ownerDiff(e,elementInfo);
  if (v != null) {
    v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
    ownership.addViolation(v);
    differentElements.add(elementID);
  }
  v=metatypeDiff(e,elementInfo);
  if (v != null) {
    v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
    metatypes.addViolation(v);
    differentElements.add(elementID);
  }
  docDiff(e,elementInfo);
}",0.9986067572274469
88614,"public static void setProperty(Property p,JSONObject spec){
  String ptype=(String)spec.get(""String_Node_Str"");
  if (ptype != null) {
    Type t=(Type)ExportUtility.getElementFromID(ptype);
    if (t != null)     p.setType(t);
 else     log.info(""String_Node_Str"");
  }
  AggregationKind aggr=AggregationKindEnum.getByName(((String)spec.get(""String_Node_Str"")).toLowerCase());
  if (aggr != null) {
    p.setAggregation(aggr);
  }
}","public static void setProperty(Property p,JSONObject spec){
  String ptype=(String)spec.get(""String_Node_Str"");
  if (ptype != null) {
    Type t=(Type)ExportUtility.getElementFromID(ptype);
    if (t != null)     p.setType(t);
 else     log.info(""String_Node_Str"");
  }
  AggregationKind aggr=null;
  if (spec.get(""String_Node_Str"") != null)   aggr=AggregationKindEnum.getByName(((String)spec.get(""String_Node_Str"")).toLowerCase());
  if (aggr != null) {
    p.setAggregation(aggr);
  }
}",0.9392624728850324
88615,"@SuppressWarnings(""String_Node_Str"") @Override public void actionPerformed(ActionEvent ae){
  ManualSyncRunner msr=new ManualSyncRunner(false);
  ProgressStatusRunner.runWithProgressStatus(msr,""String_Node_Str"",true,0);
  if (msr.getFailure()) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  ViewPresentationGenerator vg=new ViewPresentationGenerator(doc,true,msr.getCannotChange());
  ProgressStatusRunner.runWithProgressStatus(vg,""String_Node_Str"",true,0);
  if (vg.getFailure()) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  Stereotype documentView=Utils.getProductStereotype();
  if (StereotypesHelper.hasStereotypeOrDerived(doc,documentView))   ProgressStatusRunner.runWithProgressStatus(new ValidateViewRunner(doc,false,true),""String_Node_Str"",true,0);
  ManualSyncRunner msr2=new ManualSyncRunner(true,true);
  ProgressStatusRunner.runWithProgressStatus(msr2,""String_Node_Str"",true,0);
}","@SuppressWarnings(""String_Node_Str"") @Override public void actionPerformed(ActionEvent ae){
  ManualSyncRunner msr=new ManualSyncRunner(false,false);
  ProgressStatusRunner.runWithProgressStatus(msr,""String_Node_Str"",true,0);
  if (msr.getFailure()) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  ViewPresentationGenerator vg=new ViewPresentationGenerator(doc,true,msr.getCannotChange());
  ProgressStatusRunner.runWithProgressStatus(vg,""String_Node_Str"",true,0);
  if (vg.getFailure()) {
    Utils.guilog(""String_Node_Str"");
    return;
  }
  Stereotype documentView=Utils.getProductStereotype();
  if (StereotypesHelper.hasStereotypeOrDerived(doc,documentView))   ProgressStatusRunner.runWithProgressStatus(new ValidateViewRunner(doc,false,true),""String_Node_Str"",true,0);
  ManualSyncRunner msr2=new ManualSyncRunner(true,false);
  ProgressStatusRunner.runWithProgressStatus(msr2,""String_Node_Str"",true,0);
}",0.99291553133515
88616,"private void checkElement(Element e,JSONObject elementInfo){
  String elementDoc=ModelHelper.getComment(e);
  String elementDocClean=ExportUtility.cleanHtml(elementDoc);
  String elementName=null;
  Boolean editable=(Boolean)elementInfo.get(""String_Node_Str"");
  String webDoc=(String)elementInfo.get(""String_Node_Str"");
  DetailDiff ddiff=new DetailDiff(e,elementInfo);
  if (webDoc != null) {
    webDoc=ExportUtility.cleanHtml(webDoc);
    elementInfo.put(""String_Node_Str"",webDoc);
  }
  if (e instanceof NamedElement) {
    elementName=((NamedElement)e).getName();
  }
  String webName=ExportUtility.unescapeHtml((String)elementInfo.get(""String_Node_Str""));
  if (elementName != null && !elementName.equals(webName)) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + elementName + ""String_Node_Str""+ webName);
    differentElements.add(e);
    if (editable)     v.addAction(new ExportName((NamedElement)e));
    v.addAction(ddiff);
    v.addAction(new ImportName((NamedElement)e,webName,result));
    nameDiff.addViolation(v);
  }
  if (elementDoc != null && !(webDoc == null && elementDoc.equals(""String_Node_Str"")) && !elementDocClean.equals(webDoc)) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + truncate(elementDocClean) + ""String_Node_Str""+ truncate((String)elementInfo.get(""String_Node_Str"")));
    differentElements.add(e);
    if (editable)     v.addAction(new ExportDoc(e));
    v.addAction(new CompareText(e,webDoc,elementDocClean,result));
    v.addAction(ddiff);
    v.addAction(new ImportDoc(e,webDoc,result));
    docDiff.addViolation(v);
  }
  if (e instanceof Property) {
    ValidationRuleViolation v=valueDiff((Property)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      valueDiff.addViolation(v);
      differentElements.add(e);
    }
    ValidationRuleViolation v2=propertyDiff((Property)e,elementInfo);
    if (v2 != null) {
      v2.getActions().add(v2.getActions().size() > 1 ? 1 : 0,ddiff);
      propertyTypeDiff.addViolation(v2);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Slot) {
    ValidationRuleViolation v=valueDiff((Slot)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      valueDiff.addViolation(v);
      differentElements.add(e);
    }
    ValidationRuleViolation v2=slotTypeDiff((Slot)e,elementInfo);
    if (v2 != null) {
      v2.getActions().add(v2.getActions().size() > 1 ? 1 : 0,ddiff);
      propertyTypeDiff.addViolation(v2);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Comment) {
  }
 else   if (e instanceof DirectedRelationship) {
    ValidationRuleViolation v=relationshipDiff((DirectedRelationship)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      relDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Connector) {
    ValidationRuleViolation v=connectorDiff((Connector)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      connectorDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Constraint) {
    ValidationRuleViolation v=constraintDiff((Constraint)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      constraintDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Association) {
    ValidationRuleViolation v=associationDiff((Association)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      associationDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Package) {
    ValidationRuleViolation v=siteDiff((Package)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      siteDiff.addViolation(v);
    }
  }
 else   if (e instanceof InstanceSpecification) {
    ValidationRuleViolation v=instanceSpecificationDiff((InstanceSpecification)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      instanceSpec.addViolation(v);
      differentElements.add(e);
    }
  }
  Stereotype view=Utils.getViewStereotype();
  if (StereotypesHelper.hasStereotypeOrDerived(e,view)) {
    ValidationRuleViolation v=viewContentDiff(e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      viewConstraint.addViolation(v);
      differentElements.add(e);
    }
  }
  if (e instanceof Class) {
    ValidationRuleViolation v=ownedAttributeDiff((Class)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,vdiff);
      ownedAttribute.addViolation(v);
      differentElements.add(e);
    }
  }
  ValidationRuleViolation v=ownerDiff(e,elementInfo);
  if (v != null) {
    v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
    ownership.addViolation(v);
    differentElements.add(e);
  }
  v=metatypeDiff(e,elementInfo);
  if (v != null) {
    v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
    metatypes.addViolation(v);
    differentElements.add(e);
  }
  docDiff(e,elementInfo);
}","private void checkElement(Element e,JSONObject elementInfo){
  String elementDoc=ModelHelper.getComment(e);
  String elementDocClean=ExportUtility.cleanHtml(elementDoc);
  String elementName=null;
  Boolean editable=(Boolean)elementInfo.get(""String_Node_Str"");
  String webDoc=(String)elementInfo.get(""String_Node_Str"");
  DetailDiff ddiff=new DetailDiff(e,elementInfo);
  if (webDoc != null) {
    webDoc=ExportUtility.cleanHtml(webDoc);
    elementInfo.put(""String_Node_Str"",webDoc);
  }
  if (e instanceof NamedElement) {
    elementName=((NamedElement)e).getName();
  }
  String webName=ExportUtility.unescapeHtml((String)elementInfo.get(""String_Node_Str""));
  if (elementName != null && !elementName.equals(webName)) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + elementName + ""String_Node_Str""+ webName);
    differentElements.add(e);
    if (editable)     v.addAction(new ExportName((NamedElement)e));
    v.addAction(ddiff);
    v.addAction(new ImportName((NamedElement)e,webName,result));
    nameDiff.addViolation(v);
  }
  if (elementDoc != null && !(webDoc == null && elementDoc.equals(""String_Node_Str"")) && !elementDocClean.equals(webDoc)) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + truncate(elementDocClean) + ""String_Node_Str""+ truncate((String)elementInfo.get(""String_Node_Str"")));
    differentElements.add(e);
    if (editable)     v.addAction(new ExportDoc(e));
    v.addAction(new CompareText(e,webDoc,elementDocClean,result));
    v.addAction(ddiff);
    v.addAction(new ImportDoc(e,webDoc,result));
    docDiff.addViolation(v);
  }
  if (e instanceof Property) {
    ValidationRuleViolation v=valueDiff((Property)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      valueDiff.addViolation(v);
      differentElements.add(e);
    }
    ValidationRuleViolation v2=propertyDiff((Property)e,elementInfo);
    if (v2 != null) {
      v2.getActions().add(v2.getActions().size() > 1 ? 1 : 0,ddiff);
      propertyTypeDiff.addViolation(v2);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Slot) {
    ValidationRuleViolation v=valueDiff((Slot)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      valueDiff.addViolation(v);
      differentElements.add(e);
    }
    ValidationRuleViolation v2=slotTypeDiff((Slot)e,elementInfo);
    if (v2 != null) {
      v2.getActions().add(v2.getActions().size() > 1 ? 1 : 0,ddiff);
      propertyTypeDiff.addViolation(v2);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Comment) {
  }
 else   if (e instanceof DirectedRelationship) {
    ValidationRuleViolation v=relationshipDiff((DirectedRelationship)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      relDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Connector) {
    ValidationRuleViolation v=connectorDiff((Connector)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      connectorDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Constraint) {
    ValidationRuleViolation v=constraintDiff((Constraint)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      constraintDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Association) {
    ValidationRuleViolation v=associationDiff((Association)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      associationDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Package) {
    ValidationRuleViolation v=siteDiff((Package)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      siteDiff.addViolation(v);
    }
  }
 else   if (e instanceof InstanceSpecification) {
    ValidationRuleViolation v=instanceSpecificationDiff((InstanceSpecification)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      instanceSpec.addViolation(v);
      differentElements.add(e);
    }
  }
  Stereotype view=Utils.getViewStereotype();
  if (StereotypesHelper.hasStereotypeOrDerived(e,view)) {
    ValidationRuleViolation v=viewContentDiff(e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      viewConstraint.addViolation(v);
      differentElements.add(e);
    }
  }
  if (e instanceof Class) {
    ValidationRuleViolation v=ownedAttributeDiff((Class)e,elementInfo);
    if (v != null) {
      v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
      ownedAttribute.addViolation(v);
      differentElements.add(e);
    }
  }
  ValidationRuleViolation v=ownerDiff(e,elementInfo);
  if (v != null) {
    v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
    ownership.addViolation(v);
    differentElements.add(e);
  }
  v=metatypeDiff(e,elementInfo);
  if (v != null) {
    v.getActions().add(v.getActions().size() > 1 ? 1 : 0,ddiff);
    metatypes.addViolation(v);
    differentElements.add(e);
  }
  docDiff(e,elementInfo);
}",0.9998131888660564
88617,"public MigrationAction(MigrationKind mk){
  super(actionid,mk.title,null,null);
  this.mk=mk;
}","public MigrationAction(MigrationKind mk){
  super(actionid + mk.actionid,mk.title,null,null);
  this.mk=mk;
}",0.931372549019608
88618,"@Override public void run(){
  for (  final ValidationRule vr : this.getValidationRules()) {
    vr.getViolations().clear();
  }
  final ListIterator<Element> iterator=elements.listIterator();
  while (iterator.hasNext()) {
    final Element element=iterator.next();
    if (element instanceof Classifier) {
      final Classifier classifier=(Classifier)element;
      for (      final Generalization generalization : classifier.get_generalizationOfGeneral()) {
        if (!elements.contains(generalization.getSpecific())) {
          iterator.add(generalization.getSpecific());
          iterator.previous();
        }
      }
      for (      final InstanceSpecification instance : classifier.get_instanceSpecificationOfClassifier()) {
        if (!elements.contains(instance)) {
          iterator.add(instance);
          iterator.previous();
        }
      }
      for (      final Classifier general : classifier.getGeneral()) {
        if (!classifier.getName().equals(general.getName())) {
          final ValidationRuleViolation v=new ValidationRuleViolation(classifier,generalSpecificNameRule.getDescription() + ""String_Node_Str"" + general.getName()+ ""String_Node_Str""+ classifier.getName());
          v.addAction(new RenameElementAction(general,classifier,""String_Node_Str""));
          v.addAction(new RenameElementAction(classifier,general,""String_Node_Str""));
          generalSpecificNameRule.addViolation(v);
        }
      }
      for (      final NamedElement ne : classifier.getInheritedMember()) {
        if (ne instanceof Property && ne instanceof RedefinableElement && !((RedefinableElement)ne).isLeaf()) {
          final RedefinableElement redefinableElement=(RedefinableElement)ne;
          RedefinableElement redefiningElement=null;
          for (          final Property p : classifier.getAttribute()) {
            if (p instanceof RedefinableElement && ((RedefinableElement)p).getRedefinedElement().contains(redefinableElement)) {
              redefiningElement=(RedefinableElement)p;
              break;
            }
          }
          if (redefiningElement == null) {
            final ValidationRuleViolation v=new ValidationRuleViolation(classifier,(redefinableElement instanceof TypedElement && ((TypedElement)redefinableElement).getType() != null ? ""String_Node_Str"" : ""String_Node_Str"") + attributeMissingRule.getDescription() + ""String_Node_Str""+ redefinableElement.getQualifiedName());
            for (            final Property p : classifier.getAttribute()) {
              if (p.getName().equals(redefinableElement.getName()) && !p.hasRedefinedElement()) {
                v.addAction(new SetRedefinitionAction(p,redefinableElement,""String_Node_Str""));
              }
            }
            v.addAction(new RedefineAttributeAction(classifier,redefinableElement));
            if (redefinableElement instanceof TypedElement && ((TypedElement)redefinableElement).getType() != null) {
              v.addAction(new RedefineAttributeAction(classifier,redefinableElement,true,""String_Node_Str""));
            }
            attributeMissingRule.addViolation(v);
          }
 else {
            if ((redefiningElement.getName() == null && redefinableElement.getName() != null) || (redefiningElement.getName() != null && !redefiningElement.getName().equals(redefinableElement.getName()))) {
              final ValidationRuleViolation v=new ValidationRuleViolation(redefiningElement,nameRule.getDescription() + ""String_Node_Str"" + redefinableElement.getName()+ ""String_Node_Str""+ redefiningElement.getName());
              v.addAction(new RenameElementAction(redefinableElement,redefiningElement,""String_Node_Str""));
              v.addAction(new RenameElementAction(redefiningElement,redefinableElement,""String_Node_Str""));
              nameRule.addViolation(v);
            }
            if (redefiningElement instanceof TypedElement && redefinableElement instanceof TypedElement) {
              final TypedElement redefiningTypedElement=(TypedElement)redefiningElement;
              final TypedElement redefinableTypedElement=(TypedElement)redefinableElement;
              if ((redefiningTypedElement.getType() == null && redefinableTypedElement.getType() != null) || (redefiningTypedElement.getType() != null && !redefiningTypedElement.getType().equals(redefinableTypedElement.getType()))) {
                if (redefiningTypedElement.getType() instanceof Classifier && redefinableTypedElement.getType() instanceof Classifier && ((Classifier)redefiningTypedElement.getType()).getGeneral().contains(redefinableTypedElement.getType())) {
                  iterator.add(((Classifier)redefiningTypedElement.getType()));
                  iterator.previous();
                }
 else {
                  final ValidationRuleViolation v=new ValidationRuleViolation(redefiningTypedElement,attributeTypeRule.getDescription() + ""String_Node_Str"" + (redefinableTypedElement.getType() != null ? redefinableTypedElement.getType().getQualifiedName() : ""String_Node_Str"")+ ""String_Node_Str""+ (redefiningTypedElement.getType() != null ? redefiningTypedElement.getType().getQualifiedName() : ""String_Node_Str""));
                  v.addAction(new RetypeElementAction(redefinableTypedElement,redefiningTypedElement,""String_Node_Str""));
                  v.addAction(new RetypeElementAction(redefiningTypedElement,redefinableTypedElement,""String_Node_Str""));
                  attributeTypeRule.addViolation(v);
                }
              }
            }
          }
        }
      }
    }
 else     if (element instanceof InstanceSpecification) {
      final InstanceSpecification instance=(InstanceSpecification)element;
      for (      final Slot slot : instance.getSlot()) {
        for (        final ValueSpecification vs : slot.getValue()) {
          final InstanceSpecification i;
          if (vs instanceof InstanceValue && (i=((InstanceValue)vs).getInstance()) != null && !elements.contains(i)) {
            iterator.add(i);
            iterator.previous();
          }
        }
      }
      if (!instance.hasClassifier()) {
        final ValidationRuleViolation v=new ValidationRuleViolation(instance,instanceClassifierExistenceRule.getDescription() + ""String_Node_Str"" + instance.getQualifiedName());
        v.addAction(new OpenSpecificationAction(instance));
        v.addAction(new SelectInContainmentTreeAction(instance));
        instanceClassifierExistenceRule.addViolation(v);
        continue;
      }
      final List<Property> missingProperties=new ArrayList<Property>();
      for (      final Classifier classifier : instance.getClassifier()) {
        for (        final Property property : CreateSlotsAction.collectSlottableProperties(classifier)) {
          boolean isDefined=false;
          for (          final Slot slot : instance.getSlot()) {
            if (slot.getDefiningFeature().equals(property)) {
              isDefined=true;
              break;
            }
          }
          if (!isDefined) {
            missingProperties.add(property);
          }
        }
      }
      if (!missingProperties.isEmpty()) {
        String suffix=""String_Node_Str"";
        if (instance.hasSlot()) {
          suffix+=""String_Node_Str"";
          for (int i=0; i < missingProperties.size(); i++) {
            final Property property=missingProperties.get(i);
            suffix+=property.getName() != null && !property.getName().isEmpty() ? property.getName() : ""String_Node_Str"";
            if (i != missingProperties.size() - 1) {
              suffix+=""String_Node_Str"";
            }
          }
        }
        final ValidationRuleViolation v=new ValidationRuleViolation(instance,(!instance.hasSlot() ? missingSlotsRule.getDescription().replaceFirst(""String_Node_Str"",""String_Node_Str"") : missingSlotsRule.getDescription()) + suffix);
        v.addAction(IndeterminateProgressMonitorProxy.doubleWrap(new CreateSlotsAction(instance,false,false,false,""String_Node_Str""),""String_Node_Str""));
        v.addAction(IndeterminateProgressMonitorProxy.doubleWrap(new CreateSlotsAction(instance,false,false,true,""String_Node_Str""),""String_Node_Str""));
        v.addAction(IndeterminateProgressMonitorProxy.doubleWrap(new CreateSlotsAction(instance,false,true,true,""String_Node_Str""),""String_Node_Str""));
        v.addAction(IndeterminateProgressMonitorProxy.doubleWrap(new CreateSlotsAction(instance,true,false,false,""String_Node_Str""),""String_Node_Str""));
        v.addAction(IndeterminateProgressMonitorProxy.doubleWrap(new CreateSlotsAction(instance,true,false,true,""String_Node_Str""),""String_Node_Str""));
        v.addAction(IndeterminateProgressMonitorProxy.doubleWrap(new CreateSlotsAction(instance,true,true,true,""String_Node_Str""),""String_Node_Str""));
        missingSlotsRule.addViolation(v);
      }
    }
  }
}","@Override public void run(){
  for (  final ValidationRule vr : this.getValidationRules()) {
    vr.getViolations().clear();
  }
  final ListIterator<Element> iterator=elements.listIterator();
  while (iterator.hasNext()) {
    final Element element=iterator.next();
    if (element instanceof Classifier) {
      final Classifier classifier=(Classifier)element;
      for (      final Generalization generalization : classifier.get_generalizationOfGeneral()) {
        if (!elements.contains(generalization.getSpecific())) {
          iterator.add(generalization.getSpecific());
          iterator.previous();
        }
      }
      for (      final InstanceSpecification instance : classifier.get_instanceSpecificationOfClassifier()) {
        if (!elements.contains(instance)) {
          iterator.add(instance);
          iterator.previous();
        }
      }
      for (      final Classifier general : classifier.getGeneral()) {
        if (!classifier.getName().equals(general.getName())) {
          final ValidationRuleViolation v=new ValidationRuleViolation(classifier,generalSpecificNameRule.getDescription() + ""String_Node_Str"" + general.getName()+ ""String_Node_Str""+ classifier.getName());
          v.addAction(new RenameElementAction(general,classifier,""String_Node_Str""));
          v.addAction(new RenameElementAction(classifier,general,""String_Node_Str""));
          generalSpecificNameRule.addViolation(v);
        }
      }
      for (      final NamedElement ne : classifier.getInheritedMember()) {
        if (ne instanceof Property && ne instanceof RedefinableElement && !((RedefinableElement)ne).isLeaf()) {
          final RedefinableElement redefinableElement=(RedefinableElement)ne;
          RedefinableElement redefiningElement=null;
          for (          final Property p : classifier.getAttribute()) {
            if (redefinableElement instanceof Property && doesEventuallyRedefine(p,(Property)redefinableElement)) {
              redefiningElement=(RedefinableElement)p;
              break;
            }
          }
          if (redefiningElement == null) {
            final ValidationRuleViolation v=new ValidationRuleViolation(classifier,(redefinableElement instanceof TypedElement && ((TypedElement)redefinableElement).getType() != null ? ""String_Node_Str"" : ""String_Node_Str"") + attributeMissingRule.getDescription() + ""String_Node_Str""+ redefinableElement.getQualifiedName());
            for (            final Property p : classifier.getAttribute()) {
              if (p.getName().equals(redefinableElement.getName()) && !p.hasRedefinedElement()) {
                v.addAction(new SetRedefinitionAction(p,redefinableElement,""String_Node_Str""));
              }
            }
            v.addAction(new RedefineAttributeAction(classifier,redefinableElement));
            if (redefinableElement instanceof TypedElement && ((TypedElement)redefinableElement).getType() != null) {
              v.addAction(new RedefineAttributeAction(classifier,redefinableElement,true,""String_Node_Str""));
            }
            attributeMissingRule.addViolation(v);
          }
 else {
            if ((redefiningElement.getName() == null && redefinableElement.getName() != null) || (redefiningElement.getName() != null && !redefiningElement.getName().equals(redefinableElement.getName()))) {
              final ValidationRuleViolation v=new ValidationRuleViolation(redefiningElement,nameRule.getDescription() + ""String_Node_Str"" + redefinableElement.getName()+ ""String_Node_Str""+ redefiningElement.getName());
              v.addAction(new RenameElementAction(redefinableElement,redefiningElement,""String_Node_Str""));
              v.addAction(new RenameElementAction(redefiningElement,redefinableElement,""String_Node_Str""));
              nameRule.addViolation(v);
            }
            if (redefiningElement instanceof TypedElement && redefinableElement instanceof TypedElement) {
              final TypedElement redefiningTypedElement=(TypedElement)redefiningElement;
              final TypedElement redefinableTypedElement=(TypedElement)redefinableElement;
              if ((redefiningTypedElement.getType() == null && redefinableTypedElement.getType() != null) || (redefiningTypedElement.getType() != null && redefiningTypedElement.getType() instanceof Classifier && redefinableTypedElement.getType() instanceof Classifier && !doesEventuallyGeneralizeTo((Classifier)redefiningTypedElement.getType(),(Classifier)redefinableTypedElement.getType()))) {
                if (redefiningTypedElement.getType() instanceof Classifier && redefinableTypedElement.getType() instanceof Classifier && ((Classifier)redefiningTypedElement.getType()).getGeneral().contains(redefinableTypedElement.getType())) {
                  iterator.add(((Classifier)redefiningTypedElement.getType()));
                  iterator.previous();
                }
 else {
                  final ValidationRuleViolation v=new ValidationRuleViolation(redefiningTypedElement,attributeTypeRule.getDescription() + ""String_Node_Str"" + (redefinableTypedElement.getType() != null ? redefinableTypedElement.getType().getQualifiedName() : ""String_Node_Str"")+ ""String_Node_Str""+ (redefiningTypedElement.getType() != null ? redefiningTypedElement.getType().getQualifiedName() : ""String_Node_Str""));
                  v.addAction(new RetypeElementAction(redefinableTypedElement,redefiningTypedElement,""String_Node_Str""));
                  v.addAction(new RetypeElementAction(redefiningTypedElement,redefinableTypedElement,""String_Node_Str""));
                  attributeTypeRule.addViolation(v);
                }
              }
            }
          }
        }
      }
    }
 else     if (element instanceof InstanceSpecification) {
      final InstanceSpecification instance=(InstanceSpecification)element;
      for (      final Slot slot : instance.getSlot()) {
        for (        final ValueSpecification vs : slot.getValue()) {
          final InstanceSpecification i;
          if (vs instanceof InstanceValue && (i=((InstanceValue)vs).getInstance()) != null && !elements.contains(i)) {
            iterator.add(i);
            iterator.previous();
          }
        }
      }
      if (!instance.hasClassifier()) {
        final ValidationRuleViolation v=new ValidationRuleViolation(instance,instanceClassifierExistenceRule.getDescription() + ""String_Node_Str"" + instance.getQualifiedName());
        v.addAction(new OpenSpecificationAction(instance));
        v.addAction(new SelectInContainmentTreeAction(instance));
        instanceClassifierExistenceRule.addViolation(v);
        continue;
      }
      final List<Property> missingProperties=new ArrayList<Property>();
      for (      final Classifier classifier : instance.getClassifier()) {
        for (        final Property property : CreateSlotsAction.collectSlottableProperties(classifier)) {
          boolean isDefined=false;
          for (          final Slot slot : instance.getSlot()) {
            if (slot.getDefiningFeature().equals(property)) {
              isDefined=true;
              break;
            }
          }
          if (!isDefined) {
            missingProperties.add(property);
          }
        }
      }
      if (!missingProperties.isEmpty()) {
        String suffix=""String_Node_Str"";
        if (instance.hasSlot()) {
          suffix+=""String_Node_Str"";
          for (int i=0; i < missingProperties.size(); i++) {
            final Property property=missingProperties.get(i);
            suffix+=property.getName() != null && !property.getName().isEmpty() ? property.getName() : ""String_Node_Str"";
            if (i != missingProperties.size() - 1) {
              suffix+=""String_Node_Str"";
            }
          }
        }
        final ValidationRuleViolation v=new ValidationRuleViolation(instance,(!instance.hasSlot() ? missingSlotsRule.getDescription().replaceFirst(""String_Node_Str"",""String_Node_Str"") : missingSlotsRule.getDescription()) + suffix);
        v.addAction(IndeterminateProgressMonitorProxy.doubleWrap(new CreateSlotsAction(instance,false,false,false,""String_Node_Str""),""String_Node_Str""));
        v.addAction(IndeterminateProgressMonitorProxy.doubleWrap(new CreateSlotsAction(instance,false,false,true,""String_Node_Str""),""String_Node_Str""));
        v.addAction(IndeterminateProgressMonitorProxy.doubleWrap(new CreateSlotsAction(instance,false,true,true,""String_Node_Str""),""String_Node_Str""));
        v.addAction(IndeterminateProgressMonitorProxy.doubleWrap(new CreateSlotsAction(instance,true,false,false,""String_Node_Str""),""String_Node_Str""));
        v.addAction(IndeterminateProgressMonitorProxy.doubleWrap(new CreateSlotsAction(instance,true,false,true,""String_Node_Str""),""String_Node_Str""));
        v.addAction(IndeterminateProgressMonitorProxy.doubleWrap(new CreateSlotsAction(instance,true,true,true,""String_Node_Str""),""String_Node_Str""));
        missingSlotsRule.addViolation(v);
      }
    }
  }
}",0.9836766858043454
88619,"@SuppressWarnings(""String_Node_Str"") public static Map<String,Set<String>> getJMSChanges(Project project){
  Map<String,Set<String>> changes=new HashMap<String,Set<String>>();
  Set<String> changedIds=new HashSet<String>();
  Set<String> deletedIds=new HashSet<String>();
  Set<String> addedIds=new HashSet<String>();
  changes.put(""String_Node_Str"",changedIds);
  changes.put(""String_Node_Str"",deletedIds);
  changes.put(""String_Node_Str"",addedIds);
  Map<String,Object> projectInstances=ProjectListenerMapping.getInstance().get(project);
  if (projectInstances.containsKey(CONNECTION) || projectInstances.containsKey(SESSION) || projectInstances.containsKey(CONSUMER)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  String projectID=ExportUtility.getProjectId(project);
  String wsID=ExportUtility.getWorkspace();
  Map<String,String> urlInfo=new HashMap<String,String>();
  getJMSUrl(urlInfo);
  String url=urlInfo.get(""String_Node_Str"");
  if (url == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  if (wsID == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  Connection connection=null;
  Session session=null;
  MessageConsumer consumer=null;
  JSONObject previousFailed=getUpdatesOrFailed(project,""String_Node_Str"");
  if (previousFailed != null) {
    addedIds.addAll((List<String>)previousFailed.get(""String_Node_Str""));
    deletedIds.addAll((List<String>)previousFailed.get(""String_Node_Str""));
    changedIds.addAll((List<String>)previousFailed.get(""String_Node_Str""));
  }
  JSONObject previousConflicts=getConflicts(project);
  if (previousConflicts != null) {
    changedIds.addAll((List<String>)previousConflicts.get(""String_Node_Str""));
  }
  try {
    ConnectionFactory connectionFactory=createConnectionFactory(urlInfo);
    String subscriberId=projectID + ""String_Node_Str"" + wsID;
    connection=connectionFactory.createConnection();
    connection.setClientID(subscriberId);
    session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);
    Topic topic;
    try {
      topic=(Topic)ctx.lookup(JMS_TOPIC);
    }
 catch (    NameNotFoundException nnfe) {
      topic=session.createTopic(JMS_TOPIC);
    }
    String messageSelector=constructSelectorString(projectID,wsID);
    consumer=session.createDurableSubscriber(topic,subscriberId,messageSelector,true);
    connection.start();
    Message m=consumer.receive(1000);
    while (m != null) {
      TextMessage message=(TextMessage)m;
      log.info(""String_Node_Str"" + message.getText());
      JSONObject ob=(JSONObject)JSONValue.parse(message.getText());
      boolean magicdraw=false;
      if (ob.get(""String_Node_Str"") != null && ob.get(""String_Node_Str"").equals(""String_Node_Str"")) {
        magicdraw=true;
      }
      JSONObject ws2=(JSONObject)ob.get(""String_Node_Str"");
      final JSONArray updated=(JSONArray)ws2.get(""String_Node_Str"");
      final JSONArray added=(JSONArray)ws2.get(""String_Node_Str"");
      final JSONArray deleted=(JSONArray)ws2.get(""String_Node_Str"");
      final JSONArray moved=(JSONArray)ws2.get(""String_Node_Str"");
      for (      Object e : updated) {
        String id=(String)((JSONObject)e).get(""String_Node_Str"");
        if (!magicdraw)         changedIds.add(id);
        deletedIds.remove(id);
      }
      for (      Object e : added) {
        String id=(String)((JSONObject)e).get(""String_Node_Str"");
        if (!magicdraw)         addedIds.add(id);
        deletedIds.remove(id);
      }
      for (      Object e : moved) {
        String id=(String)((JSONObject)e).get(""String_Node_Str"");
        if (!magicdraw)         changedIds.add(id);
        deletedIds.remove(id);
      }
      for (      Object e : deleted) {
        String id=(String)((JSONObject)e).get(""String_Node_Str"");
        if (!magicdraw)         deletedIds.add(id);
        addedIds.remove(id);
        changedIds.remove(id);
      }
      m.acknowledge();
      m=consumer.receive(1000);
    }
    SessionManager sm=SessionManager.getInstance();
    sm.createSession(""String_Node_Str"");
    try {
      setConflicts(project,null);
      sm.closeSession();
    }
 catch (    Exception e) {
      sm.cancelSession();
    }
    return changes;
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    return null;
  }
 finally {
    try {
      if (consumer != null)       consumer.close();
      if (session != null)       session.close();
      if (connection != null)       connection.close();
    }
 catch (    JMSException e) {
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public static Map<String,Set<String>> getJMSChanges(Project project){
  Map<String,Set<String>> changes=new HashMap<String,Set<String>>();
  Set<String> changedIds=new HashSet<String>();
  Set<String> deletedIds=new HashSet<String>();
  Set<String> addedIds=new HashSet<String>();
  changes.put(""String_Node_Str"",changedIds);
  changes.put(""String_Node_Str"",deletedIds);
  changes.put(""String_Node_Str"",addedIds);
  Map<String,Object> projectInstances=ProjectListenerMapping.getInstance().get(project);
  if (projectInstances.containsKey(CONNECTION) || projectInstances.containsKey(SESSION) || projectInstances.containsKey(CONSUMER)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  String projectID=ExportUtility.getProjectId(project);
  String wsID=ExportUtility.getWorkspace();
  Map<String,String> urlInfo=new HashMap<String,String>();
  getJMSUrl(urlInfo);
  String url=urlInfo.get(""String_Node_Str"");
  if (url == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  if (wsID == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  Connection connection=null;
  Session session=null;
  MessageConsumer consumer=null;
  JSONObject previousFailed=getUpdatesOrFailed(project,""String_Node_Str"");
  if (previousFailed != null) {
    addedIds.addAll((List<String>)previousFailed.get(""String_Node_Str""));
    deletedIds.addAll((List<String>)previousFailed.get(""String_Node_Str""));
    changedIds.addAll((List<String>)previousFailed.get(""String_Node_Str""));
  }
  JSONObject previousConflicts=getConflicts(project);
  if (previousConflicts != null) {
    changedIds.addAll((List<String>)previousConflicts.get(""String_Node_Str""));
  }
  try {
    ConnectionFactory connectionFactory=createConnectionFactory(urlInfo);
    String subscriberId=projectID + ""String_Node_Str"" + wsID;
    connection=connectionFactory.createConnection();
    connection.setClientID(subscriberId);
    session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);
    Topic topic=null;
    try {
      if (ctx != null) {
        topic=(Topic)ctx.lookup(JMS_TOPIC);
      }
    }
 catch (    NameNotFoundException nnfe) {
    }
 finally {
      if (topic == null) {
        topic=session.createTopic(JMS_TOPIC);
      }
    }
    String messageSelector=constructSelectorString(projectID,wsID);
    consumer=session.createDurableSubscriber(topic,subscriberId,messageSelector,true);
    connection.start();
    Message m=consumer.receive(1000);
    while (m != null) {
      TextMessage message=(TextMessage)m;
      log.info(""String_Node_Str"" + message.getText());
      JSONObject ob=(JSONObject)JSONValue.parse(message.getText());
      boolean magicdraw=false;
      if (ob.get(""String_Node_Str"") != null && ob.get(""String_Node_Str"").equals(""String_Node_Str"")) {
        magicdraw=true;
      }
      JSONObject ws2=(JSONObject)ob.get(""String_Node_Str"");
      final JSONArray updated=(JSONArray)ws2.get(""String_Node_Str"");
      final JSONArray added=(JSONArray)ws2.get(""String_Node_Str"");
      final JSONArray deleted=(JSONArray)ws2.get(""String_Node_Str"");
      final JSONArray moved=(JSONArray)ws2.get(""String_Node_Str"");
      for (      Object e : updated) {
        String id=(String)((JSONObject)e).get(""String_Node_Str"");
        if (!magicdraw)         changedIds.add(id);
        deletedIds.remove(id);
      }
      for (      Object e : added) {
        String id=(String)((JSONObject)e).get(""String_Node_Str"");
        if (!magicdraw)         addedIds.add(id);
        deletedIds.remove(id);
      }
      for (      Object e : moved) {
        String id=(String)((JSONObject)e).get(""String_Node_Str"");
        if (!magicdraw)         changedIds.add(id);
        deletedIds.remove(id);
      }
      for (      Object e : deleted) {
        String id=(String)((JSONObject)e).get(""String_Node_Str"");
        if (!magicdraw)         deletedIds.add(id);
        addedIds.remove(id);
        changedIds.remove(id);
      }
      m.acknowledge();
      m=consumer.receive(1000);
    }
    SessionManager sm=SessionManager.getInstance();
    sm.createSession(""String_Node_Str"");
    try {
      setConflicts(project,null);
      sm.closeSession();
    }
 catch (    Exception e) {
      sm.cancelSession();
    }
    return changes;
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    return null;
  }
 finally {
    try {
      if (consumer != null)       consumer.close();
      if (session != null)       session.close();
      if (connection != null)       connection.close();
    }
 catch (    JMSException e) {
    }
  }
}",0.9900781085074942
88620,"@SuppressWarnings(""String_Node_Str"") public static JSONObject fillElement(Element e,JSONObject eInfo){
  JSONObject elementInfo=eInfo;
  if (elementInfo == null)   elementInfo=new JSONObject();
  JSONObject specialization=new JSONObject();
  elementInfo.put(""String_Node_Str"",specialization);
  Stereotype commentS=Utils.getCommentStereotype();
  if (e instanceof Package) {
    fillPackage((Package)e,specialization);
  }
 else   if (e instanceof Property || e instanceof Slot) {
    fillPropertySpecialization(e,specialization,true,true);
  }
 else   if (e instanceof DirectedRelationship) {
    fillDirectedRelationshipSpecialization((DirectedRelationship)e,specialization);
  }
 else   if (e instanceof Connector) {
    fillConnectorSpecialization((Connector)e,specialization);
  }
 else   if (e instanceof Operation) {
    fillOperationSpecialization((Operation)e,specialization);
  }
 else   if (e instanceof Constraint) {
    fillConstraintSpecialization((Constraint)e,specialization);
  }
 else   if (e instanceof InstanceSpecification) {
    specialization.put(""String_Node_Str"",""String_Node_Str"");
    fillInstanceSpecificationSpecialization((InstanceSpecification)e,specialization);
  }
 else   if (e instanceof Parameter) {
    fillParameterSpecialization((Parameter)e,specialization);
  }
 else   if (e instanceof Comment || StereotypesHelper.hasStereotypeOrDerived(e,commentS)) {
    specialization.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (e instanceof Association) {
    fillAssociationSpecialization((Association)e,specialization);
  }
 else   if (e.getClass().getSimpleName().equals(""String_Node_Str"")) {
    Stereotype viewpoint=Utils.getViewpointStereotype();
    Stereotype view=Utils.getViewStereotype();
    Stereotype doc=Utils.getProductStereotype();
    if (viewpoint != null && StereotypesHelper.hasStereotypeOrDerived(e,viewpoint))     specialization.put(""String_Node_Str"",""String_Node_Str"");
 else     if (view != null && StereotypesHelper.hasStereotypeOrDerived(e,view)) {
      if (StereotypesHelper.hasStereotypeOrDerived(e,doc))       specialization.put(""String_Node_Str"",""String_Node_Str"");
 else       specialization.put(""String_Node_Str"",""String_Node_Str"");
      fillViewContent(e,specialization);
    }
 else     specialization.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    specialization.put(""String_Node_Str"",""String_Node_Str"");
  }
  fillName(e,elementInfo);
  fillDoc(e,elementInfo);
  fillOwner(e,elementInfo);
  elementInfo.put(""String_Node_Str"",getElementID(e));
  return elementInfo;
}","@SuppressWarnings(""String_Node_Str"") public static JSONObject fillElement(Element e,JSONObject eInfo){
  JSONObject elementInfo=eInfo;
  if (elementInfo == null)   elementInfo=new JSONObject();
  JSONObject specialization=new JSONObject();
  elementInfo.put(""String_Node_Str"",specialization);
  Stereotype commentS=Utils.getCommentStereotype();
  if (e instanceof Package) {
    fillPackage((Package)e,specialization);
  }
 else   if (e instanceof Property || e instanceof Slot) {
    fillPropertySpecialization(e,specialization,true,true);
  }
 else   if (e instanceof DirectedRelationship) {
    fillDirectedRelationshipSpecialization((DirectedRelationship)e,specialization);
  }
 else   if (e instanceof Connector) {
    fillConnectorSpecialization((Connector)e,specialization);
  }
 else   if (e instanceof Operation) {
    fillOperationSpecialization((Operation)e,specialization);
  }
 else   if (e instanceof Constraint) {
    fillConstraintSpecialization((Constraint)e,specialization);
  }
 else   if (e instanceof InstanceSpecification) {
    specialization.put(""String_Node_Str"",""String_Node_Str"");
    fillInstanceSpecificationSpecialization((InstanceSpecification)e,specialization);
  }
 else   if (e instanceof Parameter) {
    fillParameterSpecialization((Parameter)e,specialization);
  }
 else   if (e instanceof Comment || StereotypesHelper.hasStereotypeOrDerived(e,commentS)) {
    specialization.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (e instanceof Association) {
    fillAssociationSpecialization((Association)e,specialization);
  }
 else   if (e.getClass().getSimpleName().equals(""String_Node_Str"")) {
    Stereotype viewpoint=Utils.getViewpointStereotype();
    Stereotype view=Utils.getViewStereotype();
    Stereotype doc=Utils.getProductStereotype();
    if (viewpoint != null && StereotypesHelper.hasStereotypeOrDerived(e,viewpoint))     specialization.put(""String_Node_Str"",""String_Node_Str"");
 else     if (view != null && StereotypesHelper.hasStereotypeOrDerived(e,view)) {
      if (StereotypesHelper.hasStereotypeOrDerived(e,doc))       specialization.put(""String_Node_Str"",""String_Node_Str"");
 else       specialization.put(""String_Node_Str"",""String_Node_Str"");
      fillViewContent(e,specialization);
    }
 else     specialization.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    specialization.put(""String_Node_Str"",""String_Node_Str"");
  }
  fillName(e,elementInfo);
  fillDoc(e,elementInfo);
  fillOwner(e,elementInfo);
  fillMetatype(e,elementInfo);
  elementInfo.put(""String_Node_Str"",getElementID(e));
  return elementInfo;
}",0.9939794134783452
88621,"private void checkElement(Element e,JSONObject elementInfo){
  String elementDoc=ModelHelper.getComment(e);
  String elementDocClean=ExportUtility.cleanHtml(elementDoc);
  String elementName=null;
  Boolean editable=(Boolean)elementInfo.get(""String_Node_Str"");
  String webDoc=(String)elementInfo.get(""String_Node_Str"");
  ValidateDiff vdiff=new ValidateDiff(e,webDoc,elementDocClean,elementInfo,editable);
  if (webDoc != null) {
    webDoc=ExportUtility.cleanHtml(webDoc);
    elementInfo.put(""String_Node_Str"",webDoc);
  }
  if (e instanceof NamedElement) {
    elementName=((NamedElement)e).getName();
  }
  String webName=ExportUtility.unescapeHtml((String)elementInfo.get(""String_Node_Str""));
  if (elementName != null && !elementName.equals(webName)) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + elementName + ""String_Node_Str""+ webName);
    differentElements.add(e);
    if (editable)     v.addAction(new ExportName((NamedElement)e));
    v.addAction(new ImportName((NamedElement)e,webName,result));
    v.addAction(vdiff);
    nameDiff.addViolation(v);
  }
  if (elementDoc != null && !(webDoc == null && elementDoc.equals(""String_Node_Str"")) && !elementDocClean.equals(webDoc)) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + truncate(elementDocClean) + ""String_Node_Str""+ truncate((String)elementInfo.get(""String_Node_Str"")));
    v.addAction(new CompareText(e,webDoc,elementDocClean,result));
    v.addAction(vdiff);
    differentElements.add(e);
    if (editable)     v.addAction(new ExportDoc(e));
    v.addAction(new ImportDoc(e,webDoc,result));
    docDiff.addViolation(v);
  }
  if (e instanceof Property) {
    ValidationRuleViolation v=valueDiff((Property)e,elementInfo);
    if (v != null) {
      v.addAction(vdiff);
      valueDiff.addViolation(v);
      differentElements.add(e);
    }
    ValidationRuleViolation v2=propertyTypeDiff((Property)e,elementInfo);
    if (v2 != null) {
      v.addAction(vdiff);
      propertyTypeDiff.addViolation(v2);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Slot) {
    ValidationRuleViolation v=valueDiff((Slot)e,elementInfo);
    if (v != null) {
      v.addAction(vdiff);
      valueDiff.addViolation(v);
      differentElements.add(e);
    }
    ValidationRuleViolation v2=slotTypeDiff((Slot)e,elementInfo);
    if (v2 != null) {
      propertyTypeDiff.addViolation(v2);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Comment) {
  }
 else   if (e instanceof DirectedRelationship) {
    ValidationRuleViolation v=relationshipDiff((DirectedRelationship)e,elementInfo);
    if (v != null) {
      v.addAction(vdiff);
      relDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Connector) {
    ValidationRuleViolation v=connectorDiff((Connector)e,elementInfo);
    if (v != null) {
      v.addAction(vdiff);
      connectorDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Constraint) {
    ValidationRuleViolation v=constraintDiff((Constraint)e,elementInfo);
    if (v != null) {
      v.addAction(vdiff);
      constraintDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Association) {
    ValidationRuleViolation v=associationDiff((Association)e,elementInfo);
    if (v != null) {
      v.addAction(vdiff);
      associationDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Package) {
    ValidationRuleViolation v=siteDiff((Package)e,elementInfo);
    if (v != null) {
      v.addAction(vdiff);
      siteDiff.addViolation(v);
    }
  }
 else   if (e instanceof InstanceSpecification) {
    ValidationRuleViolation v=instanceSpecificationDiff((InstanceSpecification)e,elementInfo);
    if (v != null) {
      v.addAction(vdiff);
      instanceSpec.addViolation(v);
      differentElements.add(e);
    }
  }
  Stereotype view=Utils.getViewStereotype();
  if (StereotypesHelper.hasStereotypeOrDerived(e,view)) {
    ValidationRuleViolation v=viewContentDiff(e,elementInfo);
    if (v != null) {
      v.addAction(vdiff);
      viewConstraint.addViolation(v);
      differentElements.add(e);
    }
  }
  ValidationRuleViolation v=ownerDiff(e,elementInfo);
  if (v != null) {
    v.addAction(vdiff);
    ownership.addViolation(v);
    differentElements.add(e);
  }
  v=metatypeDiff(e,elementInfo);
  if (v != null) {
    v.addAction(vdiff);
    metatypes.addViolation(v);
    differentElements.add(e);
  }
  docDiff(e,elementInfo);
}","private void checkElement(Element e,JSONObject elementInfo){
  String elementDoc=ModelHelper.getComment(e);
  String elementDocClean=ExportUtility.cleanHtml(elementDoc);
  String elementName=null;
  Boolean editable=(Boolean)elementInfo.get(""String_Node_Str"");
  String webDoc=(String)elementInfo.get(""String_Node_Str"");
  ValidateDiff vdiff=new ValidateDiff(e,webDoc,elementDocClean,elementInfo,editable);
  if (webDoc != null) {
    webDoc=ExportUtility.cleanHtml(webDoc);
    elementInfo.put(""String_Node_Str"",webDoc);
  }
  if (e instanceof NamedElement) {
    elementName=((NamedElement)e).getName();
  }
  String webName=ExportUtility.unescapeHtml((String)elementInfo.get(""String_Node_Str""));
  if (elementName != null && !elementName.equals(webName)) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + elementName + ""String_Node_Str""+ webName);
    differentElements.add(e);
    if (editable)     v.addAction(new ExportName((NamedElement)e));
    v.addAction(new ImportName((NamedElement)e,webName,result));
    v.addAction(vdiff);
    nameDiff.addViolation(v);
  }
  if (elementDoc != null && !(webDoc == null && elementDoc.equals(""String_Node_Str"")) && !elementDocClean.equals(webDoc)) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + truncate(elementDocClean) + ""String_Node_Str""+ truncate((String)elementInfo.get(""String_Node_Str"")));
    v.addAction(new CompareText(e,webDoc,elementDocClean,result));
    v.addAction(vdiff);
    differentElements.add(e);
    if (editable)     v.addAction(new ExportDoc(e));
    v.addAction(new ImportDoc(e,webDoc,result));
    docDiff.addViolation(v);
  }
  if (e instanceof Property) {
    ValidationRuleViolation v=valueDiff((Property)e,elementInfo);
    if (v != null) {
      v.addAction(vdiff);
      valueDiff.addViolation(v);
      differentElements.add(e);
    }
    ValidationRuleViolation v2=propertyTypeDiff((Property)e,elementInfo);
    if (v2 != null) {
      v2.addAction(vdiff);
      propertyTypeDiff.addViolation(v2);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Slot) {
    ValidationRuleViolation v=valueDiff((Slot)e,elementInfo);
    if (v != null) {
      v.addAction(vdiff);
      valueDiff.addViolation(v);
      differentElements.add(e);
    }
    ValidationRuleViolation v2=slotTypeDiff((Slot)e,elementInfo);
    if (v2 != null) {
      v2.addAction(vdiff);
      propertyTypeDiff.addViolation(v2);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Comment) {
  }
 else   if (e instanceof DirectedRelationship) {
    ValidationRuleViolation v=relationshipDiff((DirectedRelationship)e,elementInfo);
    if (v != null) {
      v.addAction(vdiff);
      relDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Connector) {
    ValidationRuleViolation v=connectorDiff((Connector)e,elementInfo);
    if (v != null) {
      v.addAction(vdiff);
      connectorDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Constraint) {
    ValidationRuleViolation v=constraintDiff((Constraint)e,elementInfo);
    if (v != null) {
      v.addAction(vdiff);
      constraintDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Association) {
    ValidationRuleViolation v=associationDiff((Association)e,elementInfo);
    if (v != null) {
      v.addAction(vdiff);
      associationDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Package) {
    ValidationRuleViolation v=siteDiff((Package)e,elementInfo);
    if (v != null) {
      v.addAction(vdiff);
      siteDiff.addViolation(v);
    }
  }
 else   if (e instanceof InstanceSpecification) {
    ValidationRuleViolation v=instanceSpecificationDiff((InstanceSpecification)e,elementInfo);
    if (v != null) {
      v.addAction(vdiff);
      instanceSpec.addViolation(v);
      differentElements.add(e);
    }
  }
  Stereotype view=Utils.getViewStereotype();
  if (StereotypesHelper.hasStereotypeOrDerived(e,view)) {
    ValidationRuleViolation v=viewContentDiff(e,elementInfo);
    if (v != null) {
      v.addAction(vdiff);
      viewConstraint.addViolation(v);
      differentElements.add(e);
    }
  }
  ValidationRuleViolation v=ownerDiff(e,elementInfo);
  if (v != null) {
    v.addAction(vdiff);
    ownership.addViolation(v);
    differentElements.add(e);
  }
  v=metatypeDiff(e,elementInfo);
  if (v != null) {
    v.addAction(vdiff);
    metatypes.addViolation(v);
    differentElements.add(e);
  }
  docDiff(e,elementInfo);
}",0.9969405594405596
88622,"/** 
 * Create DocBook paragraph(s) for this Paragraph.
 * @param forViewEditor
 * @param outputDir
 * @return Return one or more DBParagraphs for docgen or the view editorbased on properties of the Paragraph UML stereotype. <p> <code> O=tryOcl && T=gotText && R=gotTargets && S=gotStereotypeProperties && D=don't care <br><br> 1 &nbsp;D && !T && !R &&  D: return nothing <br> 2     !O && !T &&  R && !S: return a paragraph of documentation for each target <br> 3     !O && !T &&  R &&  S: return a paragraph for each target-property pair  <br> 4     !O &&  T &&  D &&  D: return a paragraph of the text, tied to the ""body"" slot of dgElement <br>  <br> 5 &nbsp;O && !T &&  R && !S: return a paragraph of the evaluation of the documentation of each target as OCL on dgElement <br> 6 &nbsp;O && !T &&  R &&  S: return a paragraph of the evaluation of each target-property as OCL on dgElement <br> 7 &nbsp;O &&  T && !R &&  D: return a paragraph of the evaluation of the text as OCL on dgElement <br> 8 &nbsp;O &&  T &&  R && !S: return a paragraph of the evaluation of the text as OCL on each target <br> 9 &nbsp;O &&  T &&  R &&  S: return a paragraph of the evaluation of the text as OCL on each target-property pair <br> </code> <p>
 * @see gov.nasa.jpl.mbee.model.Query#visit(boolean,java.lang.String)
 */
@Override public List<DocumentElement> visit(boolean forViewEditor,String outputDir){
  Debug.outln(""String_Node_Str"" + forViewEditor + ""String_Node_Str""+ outputDir+ ""String_Node_Str"");
  List<DocumentElement> res=new ArrayList<DocumentElement>();
  List<Reference> refs=new ArrayList<Reference>();
  if (getIgnore())   return res;
  boolean gotText=getText() != null;
  boolean gotTargets=getTargets() != null && !getTargets().isEmpty();
  boolean gotStereotypeProperties=!Utils2.isNullOrEmpty(getStereotypeProperties());
  boolean allTargetsAreProperties=false;
  Debug.outln(""String_Node_Str"" + gotText + ""String_Node_Str""+ getText());
  Debug.outln(""String_Node_Str"" + gotTargets + ""String_Node_Str""+ MoreToString.Helper.toLongString(getTargets()));
  Debug.outln(""String_Node_Str"" + gotStereotypeProperties + ""String_Node_Str""+ getStereotypeProperties());
  Debug.outln(""String_Node_Str"" + attribute);
  if (gotText && !tryOcl) {
    Debug.outln(""String_Node_Str"");
    if (forViewEditor || !getText().trim().equals(""String_Node_Str"")) {
      Stereotype paragraphStereotype=Utils.getStereotype(DocGen3Profile.paragraphStereotype);
      Slot s=Utils.getSlot(getDgElement(),Utils.getStereotypePropertyByName(paragraphStereotype,""String_Node_Str""));
      if (s != null) {
        res.add(new DBParagraph(getText(),s,From.DVALUE));
      }
 else {
        if (getDgElement() != null && getFrom() != null) {
          res.add(new DBParagraph(getText(),getDgElement(),getFrom()));
        }
 else         if (getDgElement() != null) {
          res.add(new DBParagraph(getText(),getDgElement(),From.DOCUMENTATION));
        }
 else {
          res.add(new DBParagraph(getText()));
        }
      }
    }
  }
 else   if (gotText && !gotTargets) {
    Debug.outln(""String_Node_Str"");
    addOclParagraph(res,getText(),dgElement);
  }
 else   if (gotTargets) {
    allTargetsAreProperties=true;
    for (    Object o : targets) {
      if (o != null && !(o instanceof Property)) {
        if (!(o instanceof Slot)) {
          allTargetsAreProperties=false;
          break;
        }
      }
    }
    for (    Object o : targets) {
      Element e=null;
      if (o instanceof Element) {
        e=(Element)o;
      }
 else       if (!tryOcl)       continue;
      Reference ref=null;
      if (gotStereotypeProperties) {
        Debug.outln(""String_Node_Str"" + o);
        for (        Property p : getStereotypeProperties()) {
          ref=Reference.getPropertyReference(e,p);
          refs.add(ref);
        }
      }
 else {
        if (tryOcl && gotText) {
          Debug.outln(""String_Node_Str"" + Utils.getName(o));
          ref=new Reference(o);
        }
 else {
          Debug.outln(""String_Node_Str"");
          if (allTargetsAreProperties && tryOcl) {
            Object v=Utils.getElementAttribute(e,AvailableAttribute.Value);
            ref=new Reference(e,From.DVALUE,v);
          }
 else {
            ref=new Reference(e,From.DOCUMENTATION,ModelHelper.getComment(e));
          }
        }
        refs.add(ref);
      }
    }
    if (tryOcl && !iterate && gotText) {
      Debug.outln(""String_Node_Str"");
      ArrayList<Object> results=new ArrayList<Object>();
      for (      Reference r : refs) {
        results.add(r.getResult());
      }
      addOclParagraph(res,getText(),results);
    }
 else {
      if (!iterate) {
        Debug.error(false,""String_Node_Str"" + dgElement);
      }
      for (      Reference r : refs) {
        if (!tryOcl) {
          Debug.outln(""String_Node_Str"" + r);
          res.addAll(Common.getReferenceAsDocumentElements(r));
        }
 else {
          if (gotText) {
            Debug.outln(""String_Node_Str"" + r);
            addOclParagraph(res,getText(),r.getResult());
          }
 else {
            Debug.outln(""String_Node_Str"" + r);
            addOclParagraph(res,r.getResult(),dgElement);
          }
        }
      }
    }
  }
  Debug.outln(""String_Node_Str"" + forViewEditor + ""String_Node_Str""+ outputDir+ ""String_Node_Str""+ res);
  return res;
}","/** 
 * Create DocBook paragraph(s) for this Paragraph.
 * @param forViewEditor
 * @param outputDir
 * @return Return one or more DBParagraphs for docgen or the view editorbased on properties of the Paragraph UML stereotype. <p> <code> O=tryOcl && T=gotText && R=gotTargets && S=gotStereotypeProperties && D=don't care <br><br> 1 &nbsp;D && !T && !R &&  D: return nothing <br> 2     !O && !T &&  R && !S: return a paragraph of documentation for each target <br> 3     !O && !T &&  R &&  S: return a paragraph for each target-property pair  <br> 4     !O &&  T &&  D &&  D: return a paragraph of the text, tied to the ""body"" slot of dgElement <br>  <br> 5 &nbsp;O && !T &&  R && !S: return a paragraph of the evaluation of the documentation of each target as OCL on dgElement <br> 6 &nbsp;O && !T &&  R &&  S: return a paragraph of the evaluation of each target-property as OCL on dgElement <br> 7 &nbsp;O &&  T && !R &&  D: return a paragraph of the evaluation of the text as OCL on dgElement <br> 8 &nbsp;O &&  T &&  R && !S: return a paragraph of the evaluation of the text as OCL on each target <br> 9 &nbsp;O &&  T &&  R &&  S: return a paragraph of the evaluation of the text as OCL on each target-property pair <br> </code> <p>
 * @see gov.nasa.jpl.mbee.model.Query#visit(boolean,java.lang.String)
 */
@Override public List<DocumentElement> visit(boolean forViewEditor,String outputDir){
  Debug.outln(""String_Node_Str"" + forViewEditor + ""String_Node_Str""+ outputDir+ ""String_Node_Str"");
  List<DocumentElement> res=new ArrayList<DocumentElement>();
  List<Reference> refs=new ArrayList<Reference>();
  if (getIgnore())   return res;
  boolean gotText=getText() != null;
  boolean gotTargets=getTargets() != null && !getTargets().isEmpty();
  boolean gotStereotypeProperties=!Utils2.isNullOrEmpty(getStereotypeProperties());
  boolean allTargetsAreProperties=false;
  Debug.outln(""String_Node_Str"" + gotText + ""String_Node_Str""+ getText());
  Debug.outln(""String_Node_Str"" + gotTargets + ""String_Node_Str""+ MoreToString.Helper.toLongString(getTargets()));
  Debug.outln(""String_Node_Str"" + gotStereotypeProperties + ""String_Node_Str""+ getStereotypeProperties());
  Debug.outln(""String_Node_Str"" + attribute);
  if (gotText && !tryOcl) {
    Debug.outln(""String_Node_Str"");
    if (forViewEditor || !getText().trim().equals(""String_Node_Str"")) {
      Stereotype paragraphStereotype=Utils.getStereotype(DocGen3Profile.paragraphStereotype);
      Slot s=Utils.getSlot(getDgElement(),Utils.getStereotypePropertyByName(paragraphStereotype,""String_Node_Str""));
      if (s != null) {
        res.add(new DBParagraph(getText(),s,From.DVALUE));
      }
 else {
        if (getDgElement() != null && getFrom() != null) {
          res.add(new DBParagraph(getText(),getDgElement(),getFrom()));
        }
 else         if (getDgElement() != null) {
          res.add(new DBParagraph(getText(),getDgElement(),From.DOCUMENTATION));
        }
 else {
          res.add(new DBParagraph(getText()));
        }
      }
    }
  }
 else   if (gotText && !gotTargets) {
    Debug.outln(""String_Node_Str"");
    addOclParagraph(res,getText(),new ArrayList<Object>());
  }
 else   if (gotTargets) {
    allTargetsAreProperties=true;
    for (    Object o : targets) {
      if (o != null && !(o instanceof Property)) {
        if (!(o instanceof Slot)) {
          allTargetsAreProperties=false;
          break;
        }
      }
    }
    for (    Object o : targets) {
      Element e=null;
      if (o instanceof Element) {
        e=(Element)o;
      }
 else       if (!tryOcl)       continue;
      Reference ref=null;
      if (gotStereotypeProperties) {
        Debug.outln(""String_Node_Str"" + o);
        for (        Property p : getStereotypeProperties()) {
          ref=Reference.getPropertyReference(e,p);
          refs.add(ref);
        }
      }
 else {
        if (tryOcl && gotText) {
          Debug.outln(""String_Node_Str"" + Utils.getName(o));
          ref=new Reference(o);
        }
 else {
          Debug.outln(""String_Node_Str"");
          if (allTargetsAreProperties && tryOcl) {
            Object v=Utils.getElementAttribute(e,AvailableAttribute.Value);
            ref=new Reference(e,From.DVALUE,v);
          }
 else {
            ref=new Reference(e,From.DOCUMENTATION,ModelHelper.getComment(e));
          }
        }
        refs.add(ref);
      }
    }
    if (tryOcl && !iterate && gotText) {
      Debug.outln(""String_Node_Str"");
      ArrayList<Object> results=new ArrayList<Object>();
      for (      Reference r : refs) {
        results.add(r.getResult());
      }
      addOclParagraph(res,getText(),results);
    }
 else {
      if (!iterate) {
        Debug.error(false,""String_Node_Str"" + dgElement);
      }
      for (      Reference r : refs) {
        if (!tryOcl) {
          Debug.outln(""String_Node_Str"" + r);
          res.addAll(Common.getReferenceAsDocumentElements(r));
        }
 else {
          if (gotText) {
            Debug.outln(""String_Node_Str"" + r);
            addOclParagraph(res,getText(),r.getResult());
          }
 else {
            Debug.outln(""String_Node_Str"" + r);
            addOclParagraph(res,r.getResult(),new ArrayList<Object>());
          }
        }
      }
    }
  }
  Debug.outln(""String_Node_Str"" + forViewEditor + ""String_Node_Str""+ outputDir+ ""String_Node_Str""+ res);
  return res;
}",0.994016454749439
88623,"private void checkElement(Element e,JSONObject elementInfo){
  String elementDoc=ModelHelper.getComment(e);
  String elementDocClean=ExportUtility.cleanHtml(elementDoc);
  String elementName=null;
  Boolean editable=(Boolean)elementInfo.get(""String_Node_Str"");
  String webDoc=(String)elementInfo.get(""String_Node_Str"");
  if (webDoc != null) {
    webDoc=ExportUtility.cleanHtml(webDoc);
    elementInfo.put(""String_Node_Str"",webDoc);
  }
  if (e instanceof NamedElement) {
    elementName=((NamedElement)e).getName();
  }
  String webName=ExportUtility.unescapeHtml((String)elementInfo.get(""String_Node_Str""));
  if (elementName != null && !elementName.equals(webName)) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + elementName + ""String_Node_Str""+ webName);
    differentElements.add(e);
    if (editable)     v.addAction(new ExportName((NamedElement)e));
    v.addAction(new ImportName((NamedElement)e,webName,result));
    nameDiff.addViolation(v);
  }
  if (elementDoc != null && !(webDoc == null && elementDoc.equals(""String_Node_Str"")) && !elementDocClean.equals(webDoc)) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + truncate(elementDocClean) + ""String_Node_Str""+ truncate((String)elementInfo.get(""String_Node_Str"")));
    v.addAction(new CompareText(e,webDoc,elementDocClean,result));
    differentElements.add(e);
    if (editable)     v.addAction(new ExportDoc(e));
    v.addAction(new ImportDoc(e,webDoc,result));
    docDiff.addViolation(v);
  }
  if (e instanceof Property) {
    ValidationRuleViolation v=valueDiff((Property)e,elementInfo);
    if (v != null) {
      valueDiff.addViolation(v);
      differentElements.add(e);
    }
    ValidationRuleViolation v2=propertyTypeDiff((Property)e,elementInfo);
    if (v2 != null) {
      propertyTypeDiff.addViolation(v2);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Slot) {
    ValidationRuleViolation v=valueDiff((Slot)e,elementInfo);
    if (v != null) {
      valueDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Comment) {
  }
 else   if (e instanceof DirectedRelationship) {
    ValidationRuleViolation v=relationshipDiff((DirectedRelationship)e,elementInfo);
    if (v != null) {
      relDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Connector) {
    ValidationRuleViolation v=connectorDiff((Connector)e,elementInfo);
    if (v != null) {
      connectorDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Constraint) {
    ValidationRuleViolation v=constraintDiff((Constraint)e,elementInfo);
    if (v != null) {
      constraintDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Association) {
    ValidationRuleViolation v=associationDiff((Association)e,elementInfo);
    if (v != null) {
      associationDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Package) {
    ValidationRuleViolation v=siteDiff((Package)e,elementInfo);
    if (v != null)     siteDiff.addViolation(v);
  }
 else   if (e instanceof InstanceSpecification) {
    ValidationRuleViolation v=instanceSpecificationDiff((InstanceSpecification)e,elementInfo);
    if (v != null)     instanceSpec.addViolation(v);
  }
  Stereotype view=Utils.getViewStereotype();
  if (StereotypesHelper.hasStereotypeOrDerived(e,view)) {
    ValidationRuleViolation v=viewContentDiff(e,elementInfo);
    if (v != null)     viewConstraint.addViolation(v);
  }
  ValidationRuleViolation v=ownerDiff(e,elementInfo);
  if (v != null) {
    ownership.addViolation(v);
    differentElements.add(e);
  }
  docDiff(e,elementInfo);
}","private void checkElement(Element e,JSONObject elementInfo){
  String elementDoc=ModelHelper.getComment(e);
  String elementDocClean=ExportUtility.cleanHtml(elementDoc);
  String elementName=null;
  Boolean editable=(Boolean)elementInfo.get(""String_Node_Str"");
  String webDoc=(String)elementInfo.get(""String_Node_Str"");
  if (webDoc != null) {
    webDoc=ExportUtility.cleanHtml(webDoc);
    elementInfo.put(""String_Node_Str"",webDoc);
  }
  if (e instanceof NamedElement) {
    elementName=((NamedElement)e).getName();
  }
  String webName=ExportUtility.unescapeHtml((String)elementInfo.get(""String_Node_Str""));
  if (elementName != null && !elementName.equals(webName)) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + elementName + ""String_Node_Str""+ webName);
    differentElements.add(e);
    if (editable)     v.addAction(new ExportName((NamedElement)e));
    v.addAction(new ImportName((NamedElement)e,webName,result));
    nameDiff.addViolation(v);
  }
  if (elementDoc != null && !(webDoc == null && elementDoc.equals(""String_Node_Str"")) && !elementDocClean.equals(webDoc)) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + truncate(elementDocClean) + ""String_Node_Str""+ truncate((String)elementInfo.get(""String_Node_Str"")));
    v.addAction(new CompareText(e,webDoc,elementDocClean,result));
    differentElements.add(e);
    if (editable)     v.addAction(new ExportDoc(e));
    v.addAction(new ImportDoc(e,webDoc,result));
    docDiff.addViolation(v);
  }
  if (e instanceof Property) {
    ValidationRuleViolation v=valueDiff((Property)e,elementInfo);
    if (v != null) {
      valueDiff.addViolation(v);
      differentElements.add(e);
    }
    ValidationRuleViolation v2=propertyTypeDiff((Property)e,elementInfo);
    if (v2 != null) {
      propertyTypeDiff.addViolation(v2);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Slot) {
    ValidationRuleViolation v=valueDiff((Slot)e,elementInfo);
    if (v != null) {
      valueDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Comment) {
  }
 else   if (e instanceof DirectedRelationship) {
    ValidationRuleViolation v=relationshipDiff((DirectedRelationship)e,elementInfo);
    if (v != null) {
      relDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Connector) {
    ValidationRuleViolation v=connectorDiff((Connector)e,elementInfo);
    if (v != null) {
      connectorDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Constraint) {
    ValidationRuleViolation v=constraintDiff((Constraint)e,elementInfo);
    if (v != null) {
      constraintDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Association) {
    ValidationRuleViolation v=associationDiff((Association)e,elementInfo);
    if (v != null) {
      associationDiff.addViolation(v);
      differentElements.add(e);
    }
  }
 else   if (e instanceof Package) {
    ValidationRuleViolation v=siteDiff((Package)e,elementInfo);
    if (v != null)     siteDiff.addViolation(v);
  }
 else   if (e instanceof InstanceSpecification) {
    ValidationRuleViolation v=instanceSpecificationDiff((InstanceSpecification)e,elementInfo);
    if (v != null) {
      instanceSpec.addViolation(v);
      differentElements.add(e);
    }
  }
  Stereotype view=Utils.getViewStereotype();
  if (StereotypesHelper.hasStereotypeOrDerived(e,view)) {
    ValidationRuleViolation v=viewContentDiff(e,elementInfo);
    if (v != null) {
      viewConstraint.addViolation(v);
      differentElements.add(e);
    }
  }
  ValidationRuleViolation v=ownerDiff(e,elementInfo);
  if (v != null) {
    ownership.addViolation(v);
    differentElements.add(e);
  }
  v=metatypeDiff(e,elementInfo);
  if (v != null) {
    metatypes.addViolation(v);
    differentElements.add(e);
  }
  docDiff(e,elementInfo);
}",0.9730644111906313
88624,"public ModelValidator(Collection<Element> starts,JSONObject result,boolean checkExist,Set<Element> elementSet,boolean crippled){
  this.starts=starts;
  suite.addValidationRule(nameDiff);
  suite.addValidationRule(docDiff);
  suite.addValidationRule(valueDiff);
  suite.addValidationRule(ownership);
  suite.addValidationRule(exist);
  suite.addValidationRule(relDiff);
  suite.addValidationRule(commentDiff);
  suite.addValidationRule(projectExist);
  suite.addValidationRule(baselineTag);
  suite.addValidationRule(metaclassDiff);
  suite.addValidationRule(propertyTypeDiff);
  suite.addValidationRule(connectorDiff);
  suite.addValidationRule(constraintDiff);
  suite.addValidationRule(associationDiff);
  suite.addValidationRule(siteDiff);
  suite.addValidationRule(productView);
  suite.addValidationRule(instanceSpec);
  suite.addValidationRule(viewConstraint);
  this.checkExist=checkExist;
  this.result=result;
  prj=Application.getInstance().getProject();
  this.elementSet=elementSet;
  this.crippled=crippled;
}","public ModelValidator(Collection<Element> starts,JSONObject result,boolean checkExist,Set<Element> elementSet,boolean crippled){
  this.starts=starts;
  suite.addValidationRule(nameDiff);
  suite.addValidationRule(docDiff);
  suite.addValidationRule(valueDiff);
  suite.addValidationRule(ownership);
  suite.addValidationRule(exist);
  suite.addValidationRule(relDiff);
  suite.addValidationRule(commentDiff);
  suite.addValidationRule(projectExist);
  suite.addValidationRule(baselineTag);
  suite.addValidationRule(metaclassDiff);
  suite.addValidationRule(propertyTypeDiff);
  suite.addValidationRule(connectorDiff);
  suite.addValidationRule(constraintDiff);
  suite.addValidationRule(associationDiff);
  suite.addValidationRule(siteDiff);
  suite.addValidationRule(productView);
  suite.addValidationRule(instanceSpec);
  suite.addValidationRule(viewConstraint);
  suite.addValidationRule(metatypes);
  this.checkExist=checkExist;
  this.result=result;
  prj=Application.getInstance().getProject();
  this.elementSet=elementSet;
  this.crippled=crippled;
}",0.9817658349328215
88625,"protected void startSection(DBSection section){
  JSONObject newSection=new JSONObject();
  newSection.put(""String_Node_Str"",""String_Node_Str"");
  newSection.put(""String_Node_Str"",section.getTitle());
  JSONArray secArray=new JSONArray();
  newSection.put(""String_Node_Str"",secArray);
  this.curContains.peek().add(newSection);
  this.curContains.push(secArray);
  InstanceSpecification sec=null;
  Element loopElement=null;
  if (section.getDgElement() instanceof Section) {
    if (((Section)section.getDgElement()).getLoopElement() != null) {
      loopElement=((Section)section.getDgElement()).getLoopElement();
      sec=findInstanceForSection(loopElement);
    }
 else     sec=findInstanceForSection(null);
  }
  if (sec != null) {
    currentInstanceList.remove(sec);
    currentSectionInstances.remove(sec);
  }
  if (sec != null && !sec.isEditable())   notEditable.add(sec);
  PresentationElement parentSec=currentSection.isEmpty() ? null : currentSection.peek();
  List<PresentationElement> secChildren=new ArrayList<PresentationElement>();
  PresentationElement pe=new PresentationElement(sec,newSection,PEType.SECTION,currentView.peek(),section.getTitle(),parentSec,secChildren);
  pe.setLoopElement(loopElement);
  newpe.peek().add(pe);
  currentSection.push(pe);
  newpe.push(secChildren);
  Expression e=null;
  if (sec != null && sec.getSpecification() instanceof Expression)   e=(Expression)sec.getSpecification();
  processCurrentInstances(e,currentView.peek());
  addManualInstances(false);
}","protected void startSection(DBSection section){
  JSONObject newSection=new JSONObject();
  newSection.put(""String_Node_Str"",""String_Node_Str"");
  newSection.put(""String_Node_Str"",section.getTitle());
  JSONArray secArray=new JSONArray();
  newSection.put(""String_Node_Str"",secArray);
  this.curContains.peek().add(newSection);
  this.curContains.push(secArray);
  InstanceSpecification sec=null;
  Element loopElement=null;
  if (section.getDgElement() instanceof Section) {
    if (((Section)section.getDgElement()).getLoopElement() != null) {
      loopElement=((Section)section.getDgElement()).getLoopElement();
      sec=findInstanceForSection(loopElement);
    }
 else     sec=findInstanceForSection(null);
  }
  if (sec != null) {
    currentInstanceList.peek().remove(sec);
    currentSectionInstances.peek().remove(sec);
  }
  if (sec != null && !sec.isEditable())   notEditable.add(sec);
  PresentationElement parentSec=currentSection.isEmpty() ? null : currentSection.peek();
  List<PresentationElement> secChildren=new ArrayList<PresentationElement>();
  PresentationElement pe=new PresentationElement(sec,newSection,PEType.SECTION,currentView.peek(),section.getTitle(),parentSec,secChildren);
  pe.setLoopElement(loopElement);
  newpe.peek().add(pe);
  currentSection.push(pe);
  newpe.push(secChildren);
  Expression e=null;
  if (sec != null && sec.getSpecification() instanceof Expression)   e=(Expression)sec.getSpecification();
  processCurrentInstances(e,currentView.peek());
  addManualInstances(false);
}",0.9953886693017128
88626,"@SuppressWarnings(""String_Node_Str"") @Override public void actionPerformed(ActionEvent e){
  if (!ExportUtility.okToExport(element))   return;
  JSONObject info=new JSONObject();
  JSONArray elements=new JSONArray();
  JSONObject send=new JSONObject();
  info.put(""String_Node_Str"",ExportUtility.fillDirectedRelationshipSpecialization((DirectedRelationship)element,null));
  info.put(""String_Node_Str"",e.getID());
  elements.add(info);
  send.put(""String_Node_Str"",elements);
  send.put(""String_Node_Str"",""String_Node_Str"");
  String url=ExportUtility.getPostElementsUrl();
  if (url == null) {
    return;
  }
  Application.getInstance().getGUILog().log(""String_Node_Str"");
  OutputQueue.getInstance().offer(new Request(url,send.toJSONString()));
}","@SuppressWarnings(""String_Node_Str"") @Override public void actionPerformed(ActionEvent e){
  if (!ExportUtility.okToExport(element))   return;
  JSONObject info=new JSONObject();
  JSONArray elements=new JSONArray();
  JSONObject send=new JSONObject();
  info.put(""String_Node_Str"",ExportUtility.fillDirectedRelationshipSpecialization((DirectedRelationship)element,null));
  info.put(""String_Node_Str"",element.getID());
  elements.add(info);
  send.put(""String_Node_Str"",elements);
  send.put(""String_Node_Str"",""String_Node_Str"");
  String url=ExportUtility.getPostElementsUrl();
  if (url == null) {
    return;
  }
  Application.getInstance().getGUILog().log(""String_Node_Str"");
  OutputQueue.getInstance().offer(new Request(url,send.toJSONString()));
}",0.9960106382978724
88627,"@SuppressWarnings(""String_Node_Str"") private void handleChangedProperty(Element sourceElement,String propertyName,Object newValue,Object oldValue){
  JSONObject elementOb=null;
  String elementID=null;
  ArrayList<String> moveKeywords=new ArrayList<String>();
  moveKeywords.add(PropertyNames.OWNING_ASSOCIATION);
  moveKeywords.add(PropertyNames.OWNING_CONSTRAINT);
  moveKeywords.add(PropertyNames.OWNING_ELEMENT);
  moveKeywords.add(PropertyNames.OWNING_EXPRESSION);
  moveKeywords.add(PropertyNames.OWNING_INSTANCE);
  moveKeywords.add(PropertyNames.OWNING_INSTANCE_SPEC);
  moveKeywords.add(PropertyNames.OWNING_LOWER);
  moveKeywords.add(PropertyNames.OWNING_PACKAGE);
  moveKeywords.add(PropertyNames.OWNING_PARAMETER);
  moveKeywords.add(PropertyNames.OWNING_PROPERTY);
  moveKeywords.add(PropertyNames.OWNING_SIGNAL);
  moveKeywords.add(PropertyNames.OWNING_SLOT);
  moveKeywords.add(PropertyNames.OWNING_STATE);
  moveKeywords.add(PropertyNames.OWNING_TEMPLATE_PARAMETER);
  moveKeywords.add(PropertyNames.OWNING_TRANSITION);
  moveKeywords.add(PropertyNames.OWNING_UPPER);
  moveKeywords.add(PropertyNames._U_M_L_CLASS);
  moveKeywords.add(PropertyNames.OWNER);
  if (propertyName.equals(PropertyNames.NAME)) {
    if (!ExportUtility.shouldAdd(sourceElement))     return;
    elementOb=getElementObject(sourceElement);
    ExportUtility.fillName(sourceElement,elementOb);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if (sourceElement instanceof Comment && ExportUtility.isElementDocumentation((Comment)sourceElement) && propertyName.equals(PropertyNames.BODY)) {
    Element actual=sourceElement.getOwner();
    if (!ExportUtility.shouldAdd(actual))     return;
    elementOb=getElementObject(actual);
    ExportUtility.fillDoc(actual,elementOb);
    ExportUtility.fillOwner(actual,elementOb);
  }
 else   if ((sourceElement instanceof ValueSpecification) && (propertyName.equals(PropertyNames.VALUE)) || (sourceElement instanceof OpaqueExpression) && (propertyName.equals(PropertyNames.BODY)) || (sourceElement instanceof Expression) && (propertyName.equals(PropertyNames.OPERAND))) {
    Element actual=sourceElement.getOwner();
    while (actual instanceof ValueSpecification)     actual=actual.getOwner();
    if (!ExportUtility.shouldAdd(actual))     return;
    elementOb=getElementObject(actual);
    if (actual instanceof Slot || actual instanceof Property) {
      JSONObject specialization=ExportUtility.fillPropertySpecialization(actual,null,true);
      elementOb.put(""String_Node_Str"",specialization);
    }
    if (actual instanceof Constraint) {
      JSONObject specialization=ExportUtility.fillConstraintSpecialization((Constraint)actual,null);
      elementOb.put(""String_Node_Str"",specialization);
    }
    ExportUtility.fillOwner(actual,elementOb);
  }
 else   if ((sourceElement instanceof Property) && (propertyName.equals(PropertyNames.DEFAULT_VALUE) || propertyName.equals(PropertyNames.TYPE))) {
    JSONObject specialization=ExportUtility.fillPropertySpecialization(sourceElement,null,true);
    elementOb=getElementObject(sourceElement);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if ((sourceElement instanceof Slot) && propertyName.equals(PropertyNames.VALUE) && ExportUtility.shouldAdd(sourceElement)) {
    elementOb=getElementObject(sourceElement);
    JSONObject specialization=ExportUtility.fillPropertySpecialization(sourceElement,null,false);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if ((sourceElement instanceof Constraint) && propertyName.equals(PropertyNames.SPECIFICATION)) {
    elementOb=getElementObject(sourceElement);
    JSONObject specialization=ExportUtility.fillConstraintSpecialization((Constraint)sourceElement,null);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if (propertyName.equals(UML2MetamodelConstants.INSTANCE_CREATED) && ExportUtility.shouldAdd(sourceElement)) {
    if (isDiagramCreated(sourceElement)) {
      String id=ExportUtility.getElementID(sourceElement);
      toRemove.add(id);
      diagramElements.add(id);
      diagramElements.add(sourceElement.getID());
    }
 else {
      elementOb=getElementObject(sourceElement,true);
      ExportUtility.fillElement(sourceElement,elementOb);
    }
  }
 else   if (propertyName.equals(UML2MetamodelConstants.INSTANCE_DELETED) && ExportUtility.shouldAdd(sourceElement)) {
    elementID=ExportUtility.getElementID(sourceElement);
    elements.remove(elementID);
    if (diagramElements.contains(elementID) || diagramElements.contains(sourceElement.getID()))     return;
    deletes.add(elementID);
    changedElements.remove(elementID);
    addedElements.remove(elementID);
    if (!auto)     deletedElements.put(elementID,sourceElement);
  }
 else   if (sourceElement instanceof DirectedRelationship && (propertyName.equals(PropertyNames.SUPPLIER) || propertyName.equals(PropertyNames.CLIENT))) {
    if ((newValue != null) && (oldValue == null)) {
      JSONObject specialization=ExportUtility.fillDirectedRelationshipSpecialization((DirectedRelationship)sourceElement,null);
      elementOb=getElementObject(sourceElement);
      elementOb.put(""String_Node_Str"",specialization);
      ExportUtility.fillOwner(sourceElement,elementOb);
    }
  }
 else   if ((sourceElement instanceof Generalization) && ((propertyName.equals(PropertyNames.SPECIFIC)) || (propertyName.equals(PropertyNames.GENERAL)))) {
    if ((newValue != null) && (oldValue == null)) {
      JSONObject specialization=ExportUtility.fillDirectedRelationshipSpecialization((DirectedRelationship)sourceElement,null);
      elementOb=getElementObject(sourceElement);
      elementOb.put(""String_Node_Str"",specialization);
      ExportUtility.fillOwner(sourceElement,elementOb);
    }
  }
 else   if ((moveKeywords.contains(propertyName)) && ExportUtility.shouldAdd(sourceElement)) {
    elementOb=getElementObject(sourceElement);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if (sourceElement instanceof ConnectorEnd && propertyName.equals(PropertyNames.ROLE)) {
    Connector conn=((ConnectorEnd)sourceElement).get_connectorOfEnd();
    elementOb=getElementObject(conn);
    JSONObject specialization=ExportUtility.fillConnectorSpecialization(conn,null);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(conn,elementOb);
  }
 else   if (sourceElement instanceof Association && propertyName.equals(PropertyNames.OWNED_END)) {
    elementOb=getElementObject(sourceElement);
    JSONObject specialization=ExportUtility.fillAssociationSpecialization((Association)sourceElement,null);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if (sourceElement instanceof Property && propertyName.equals(PropertyNames.AGGREGATION)) {
    Association a=((Property)sourceElement).getAssociation();
    if (a != null) {
      elementOb=getElementObject(a);
      JSONObject specialization=ExportUtility.fillAssociationSpecialization(a,null);
      elementOb.put(""String_Node_Str"",specialization);
      ExportUtility.fillOwner(a,elementOb);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void handleChangedProperty(Element sourceElement,String propertyName,Object newValue,Object oldValue){
  JSONObject elementOb=null;
  String elementID=null;
  ArrayList<String> moveKeywords=new ArrayList<String>();
  moveKeywords.add(PropertyNames.OWNING_ASSOCIATION);
  moveKeywords.add(PropertyNames.OWNING_CONSTRAINT);
  moveKeywords.add(PropertyNames.OWNING_ELEMENT);
  moveKeywords.add(PropertyNames.OWNING_EXPRESSION);
  moveKeywords.add(PropertyNames.OWNING_INSTANCE);
  moveKeywords.add(PropertyNames.OWNING_INSTANCE_SPEC);
  moveKeywords.add(PropertyNames.OWNING_LOWER);
  moveKeywords.add(PropertyNames.OWNING_PACKAGE);
  moveKeywords.add(PropertyNames.OWNING_PARAMETER);
  moveKeywords.add(PropertyNames.OWNING_PROPERTY);
  moveKeywords.add(PropertyNames.OWNING_SIGNAL);
  moveKeywords.add(PropertyNames.OWNING_SLOT);
  moveKeywords.add(PropertyNames.OWNING_STATE);
  moveKeywords.add(PropertyNames.OWNING_TEMPLATE_PARAMETER);
  moveKeywords.add(PropertyNames.OWNING_TRANSITION);
  moveKeywords.add(PropertyNames.OWNING_UPPER);
  moveKeywords.add(PropertyNames._U_M_L_CLASS);
  moveKeywords.add(PropertyNames.OWNER);
  if (propertyName.equals(PropertyNames.NAME)) {
    if (!ExportUtility.shouldAdd(sourceElement))     return;
    elementOb=getElementObject(sourceElement);
    ExportUtility.fillName(sourceElement,elementOb);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if (sourceElement instanceof Comment && ExportUtility.isElementDocumentation((Comment)sourceElement) && propertyName.equals(PropertyNames.BODY)) {
    Element actual=sourceElement.getOwner();
    if (!ExportUtility.shouldAdd(actual))     return;
    elementOb=getElementObject(actual);
    ExportUtility.fillDoc(actual,elementOb);
    ExportUtility.fillOwner(actual,elementOb);
  }
 else   if ((sourceElement instanceof ValueSpecification) && (propertyName.equals(PropertyNames.VALUE)) || (sourceElement instanceof OpaqueExpression) && (propertyName.equals(PropertyNames.BODY)) || (sourceElement instanceof Expression) && (propertyName.equals(PropertyNames.OPERAND))) {
    Element actual=sourceElement.getOwner();
    while (actual instanceof ValueSpecification)     actual=actual.getOwner();
    if (!ExportUtility.shouldAdd(actual))     return;
    elementOb=getElementObject(actual);
    if (actual instanceof Slot || actual instanceof Property) {
      JSONObject specialization=ExportUtility.fillPropertySpecialization(actual,null,true);
      elementOb.put(""String_Node_Str"",specialization);
    }
    if (actual instanceof Constraint) {
      JSONObject specialization=ExportUtility.fillConstraintSpecialization((Constraint)actual,null);
      elementOb.put(""String_Node_Str"",specialization);
    }
    ExportUtility.fillOwner(actual,elementOb);
  }
 else   if ((sourceElement instanceof Property) && (propertyName.equals(PropertyNames.DEFAULT_VALUE) || propertyName.equals(PropertyNames.TYPE))) {
    JSONObject specialization=ExportUtility.fillPropertySpecialization(sourceElement,null,true);
    elementOb=getElementObject(sourceElement);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if ((sourceElement instanceof Slot) && propertyName.equals(PropertyNames.VALUE) && ExportUtility.shouldAdd(sourceElement)) {
    elementOb=getElementObject(sourceElement);
    JSONObject specialization=ExportUtility.fillPropertySpecialization(sourceElement,null,false);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if ((sourceElement instanceof Constraint) && propertyName.equals(PropertyNames.SPECIFICATION)) {
    elementOb=getElementObject(sourceElement);
    JSONObject specialization=ExportUtility.fillConstraintSpecialization((Constraint)sourceElement,null);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if (propertyName.equals(UML2MetamodelConstants.INSTANCE_CREATED) && ExportUtility.shouldAdd(sourceElement)) {
    if (isDiagramCreated(sourceElement)) {
      String id=ExportUtility.getElementID(sourceElement);
      toRemove.add(id);
      diagramElements.add(id);
      diagramElements.add(sourceElement.getID());
    }
 else {
      elementOb=getElementObject(sourceElement,true);
      ExportUtility.fillElement(sourceElement,elementOb);
    }
  }
 else   if (propertyName.equals(UML2MetamodelConstants.INSTANCE_DELETED) && ExportUtility.shouldAdd(sourceElement)) {
    elementID=ExportUtility.getElementID(sourceElement);
    if (elementID == null)     return;
    elements.remove(elementID);
    if (diagramElements.contains(elementID) || diagramElements.contains(sourceElement.getID()))     return;
    deletes.add(elementID);
    changedElements.remove(elementID);
    addedElements.remove(elementID);
    if (!auto)     deletedElements.put(elementID,sourceElement);
  }
 else   if (sourceElement instanceof DirectedRelationship && (propertyName.equals(PropertyNames.SUPPLIER) || propertyName.equals(PropertyNames.CLIENT))) {
    if ((newValue != null) && (oldValue == null)) {
      JSONObject specialization=ExportUtility.fillDirectedRelationshipSpecialization((DirectedRelationship)sourceElement,null);
      elementOb=getElementObject(sourceElement);
      elementOb.put(""String_Node_Str"",specialization);
      ExportUtility.fillOwner(sourceElement,elementOb);
    }
  }
 else   if ((sourceElement instanceof Generalization) && ((propertyName.equals(PropertyNames.SPECIFIC)) || (propertyName.equals(PropertyNames.GENERAL)))) {
    if ((newValue != null) && (oldValue == null)) {
      JSONObject specialization=ExportUtility.fillDirectedRelationshipSpecialization((DirectedRelationship)sourceElement,null);
      elementOb=getElementObject(sourceElement);
      elementOb.put(""String_Node_Str"",specialization);
      ExportUtility.fillOwner(sourceElement,elementOb);
    }
  }
 else   if ((moveKeywords.contains(propertyName)) && ExportUtility.shouldAdd(sourceElement)) {
    elementOb=getElementObject(sourceElement);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if (sourceElement instanceof ConnectorEnd && propertyName.equals(PropertyNames.ROLE)) {
    Connector conn=((ConnectorEnd)sourceElement).get_connectorOfEnd();
    elementOb=getElementObject(conn);
    JSONObject specialization=ExportUtility.fillConnectorSpecialization(conn,null);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(conn,elementOb);
  }
 else   if (sourceElement instanceof Association && propertyName.equals(PropertyNames.OWNED_END)) {
    elementOb=getElementObject(sourceElement);
    JSONObject specialization=ExportUtility.fillAssociationSpecialization((Association)sourceElement,null);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if (sourceElement instanceof Property && propertyName.equals(PropertyNames.AGGREGATION)) {
    Association a=((Property)sourceElement).getAssociation();
    if (a != null) {
      elementOb=getElementObject(a);
      JSONObject specialization=ExportUtility.fillAssociationSpecialization(a,null);
      elementOb.put(""String_Node_Str"",specialization);
      ExportUtility.fillOwner(a,elementOb);
    }
  }
}",0.9973355195736832
88628,"@SuppressWarnings(""String_Node_Str"") private void validateModel(Map<String,JSONObject> elementsKeyed,Set<Element> all,ProgressStatus ps){
  Set<String> checked=new HashSet<String>();
  updateElementsKeyed(result,elementsKeyed);
  Set<Element> missing=new HashSet<Element>();
  for (  Element e : all) {
    if (ps != null && ps.isCancel())     break;
    if (!elementsKeyed.containsKey(e.getID())) {
      if (checkExist && ExportUtility.shouldAdd(e)) {
        missing.add(e);
      }
 else       continue;
    }
  }
  JSONObject missingResult=getManyAlfrescoElements(missing);
  updateElementsKeyed(missingResult,elementsKeyed);
  for (  Element e : all) {
    if (ps != null && ps.isCancel())     break;
    if (!elementsKeyed.containsKey(e.getID())) {
      ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"");
      if (!crippled) {
        v.addAction(new ExportElement(e));
        v.addAction(new DeleteMagicDrawElement(e));
      }
      exist.addViolation(v);
      continue;
    }
    JSONObject elementInfo=(JSONObject)elementsKeyed.get(e.getID());
    checkElement(e,elementInfo);
    checked.add(e.getID());
  }
  Set<String> elementsKeyedIds=new HashSet<String>(elementsKeyed.keySet());
  elementsKeyedIds.removeAll(checked);
  for (  String elementsKeyedId : elementsKeyedIds) {
    Element e=ExportUtility.getElementFromID(elementsKeyedId);
    if (e == null || e == prj.getModel()) {
      if (elementsKeyedId.startsWith(""String_Node_Str""))       continue;
      JSONObject jSONobject=(JSONObject)elementsKeyed.get(elementsKeyedId);
      String type=null;
      if (jSONobject.containsKey(""String_Node_Str"")) {
        type=(String)((JSONObject)jSONobject.get(""String_Node_Str"")).get(""String_Node_Str"");
      }
      if (type != null && type.equals(""String_Node_Str""))       continue;
      if (type == null)       type=""String_Node_Str"";
      if (ImportUtility.VALUESPECS.contains(type))       continue;
      ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + (type.equals(""String_Node_Str"") ? ""String_Node_Str"" : type) + ""String_Node_Str""+ elementsKeyedId+ ""String_Node_Str"");
      v.addAction(new ElementDetail(jSONobject));
      if (!crippled) {
        v.addAction(new DeleteAlfrescoElement(elementsKeyedId,elementsKeyed));
        v.addAction(new CreateMagicDrawElement(jSONobject,elementsKeyed));
      }
      exist.addViolation(v);
    }
 else {
      checkElement(e,elementsKeyed.get(elementsKeyedId));
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void validateModel(Map<String,JSONObject> elementsKeyed,Set<Element> all,ProgressStatus ps){
  Set<String> checked=new HashSet<String>();
  updateElementsKeyed(result,elementsKeyed);
  Set<Element> missing=new HashSet<Element>();
  for (  Element e : all) {
    if (ps != null && ps.isCancel())     break;
    if (!elementsKeyed.containsKey(e.getID())) {
      if (checkExist && ExportUtility.shouldAdd(e)) {
        missing.add(e);
      }
 else       continue;
    }
  }
  JSONObject missingResult=getManyAlfrescoElements(missing);
  updateElementsKeyed(missingResult,elementsKeyed);
  JSONObject failed=AutoSyncProjectListener.getUpdatesOrFailed(Application.getInstance().getProject(),""String_Node_Str"");
  JSONArray deletedOnMMS=null;
  if (failed == null)   deletedOnMMS=new JSONArray();
 else   deletedOnMMS=(JSONArray)failed.get(""String_Node_Str"");
  for (  Element e : all) {
    if (ps != null && ps.isCancel())     break;
    if (!elementsKeyed.containsKey(e.getID())) {
      ValidationRuleViolation v=null;
      if (deletedOnMMS.contains(ExportUtility.getElementID(e)))       v=new ValidationRuleViolation(e,""String_Node_Str"");
 else       v=new ValidationRuleViolation(e,""String_Node_Str"");
      if (!crippled) {
        v.addAction(new ExportElement(e));
        v.addAction(new DeleteMagicDrawElement(e));
      }
      exist.addViolation(v);
      continue;
    }
    JSONObject elementInfo=(JSONObject)elementsKeyed.get(e.getID());
    checkElement(e,elementInfo);
    checked.add(e.getID());
  }
  Set<String> elementsKeyedIds=new HashSet<String>(elementsKeyed.keySet());
  elementsKeyedIds.removeAll(checked);
  AutoSyncCommitListener listener=AutoSyncProjectListener.getCommitListener(Application.getInstance().getProject());
  for (  String elementsKeyedId : elementsKeyedIds) {
    Element e=ExportUtility.getElementFromID(elementsKeyedId);
    if (e == null || e == prj.getModel()) {
      if (elementsKeyedId.startsWith(""String_Node_Str""))       continue;
      JSONObject jSONobject=(JSONObject)elementsKeyed.get(elementsKeyedId);
      String type=null;
      if (jSONobject.containsKey(""String_Node_Str"")) {
        type=(String)((JSONObject)jSONobject.get(""String_Node_Str"")).get(""String_Node_Str"");
      }
      if (type != null && type.equals(""String_Node_Str""))       continue;
      if (type == null)       type=""String_Node_Str"";
      if (ImportUtility.VALUESPECS.contains(type))       continue;
      ValidationRuleViolation v=null;
      if (listener == null || !listener.getDeletedElements().containsKey(elementsKeyedId))       v=new ValidationRuleViolation(e,""String_Node_Str"" + (type.equals(""String_Node_Str"") ? ""String_Node_Str"" : type) + ""String_Node_Str""+ elementsKeyedId+ ""String_Node_Str"");
 else       v=new ValidationRuleViolation(e,""String_Node_Str"" + (type.equals(""String_Node_Str"") ? ""String_Node_Str"" : type) + ""String_Node_Str""+ elementsKeyedId+ ""String_Node_Str"");
      v.addAction(new ElementDetail(jSONobject));
      if (!crippled) {
        v.addAction(new DeleteAlfrescoElement(elementsKeyedId,elementsKeyed));
        v.addAction(new CreateMagicDrawElement(jSONobject,elementsKeyed));
      }
      exist.addViolation(v);
    }
 else {
      checkElement(e,elementsKeyed.get(elementsKeyedId));
    }
  }
}",0.7238292011019284
88629,"@Override public void actionPerformed(ActionEvent e){
  if (exportHierarchy(view)) {
    this.removeViolationAndUpdateWindow();
  }
}","@Override public void actionPerformed(ActionEvent e){
  if (exportHierarchy(view)) {
  }
}",0.8071748878923767
88630,"@SuppressWarnings(""String_Node_Str"") private boolean exportHierarchy(Element view){
  DocumentGenerator dg=new DocumentGenerator(view,null,null);
  Document dge=dg.parseDocument(true,true,true);
  ViewHierarchyVisitor vhv=new ViewHierarchyVisitor();
  dge.accept(vhv);
  String url=ExportUtility.getUrlWithWorkspace();
  if (url == null)   return false;
  boolean document=false;
  Stereotype documentView=StereotypesHelper.getStereotype(Application.getInstance().getProject(),DocGen3Profile.documentViewStereotype,""String_Node_Str"");
  if (StereotypesHelper.hasStereotypeOrDerived(view,documentView))   document=true;
  JSONObject view2view=vhv.getView2View();
  if (document) {
    String docurl=url + ""String_Node_Str"";
    JSONObject send=new JSONObject();
    JSONArray documents=new JSONArray();
    JSONObject doc=new JSONObject();
    JSONObject specialization=new JSONObject();
    doc.put(""String_Node_Str"",specialization);
    specialization.put(""String_Node_Str"",ExportUtility.formatView2View(view2view));
    specialization.put(""String_Node_Str"",vhv.getNosections());
    doc.put(""String_Node_Str"",view.getID());
    documents.add(doc);
    send.put(""String_Node_Str"",documents);
    send.put(""String_Node_Str"",""String_Node_Str"");
    if (ExportUtility.send(docurl,send.toJSONString()) == null)     return false;
  }
 else {
    JSONArray views=new JSONArray();
    for (    Object viewid : view2view.keySet()) {
      JSONObject viewinfo=new JSONObject();
      JSONObject specialization=new JSONObject();
      viewinfo.put(""String_Node_Str"",viewid);
      specialization.put(""String_Node_Str"",view2view.get(viewid));
      viewinfo.put(""String_Node_Str"",specialization);
      views.add(viewinfo);
    }
    JSONObject send=new JSONObject();
    send.put(""String_Node_Str"",views);
    send.put(""String_Node_Str"",""String_Node_Str"");
    if (ExportUtility.send(url + ""String_Node_Str"",send.toJSONString()) == null)     return false;
  }
  return true;
}","@SuppressWarnings(""String_Node_Str"") private boolean exportHierarchy(Element view){
  DocumentGenerator dg=new DocumentGenerator(view,null,null);
  Document dge=dg.parseDocument(true,true,true);
  ViewHierarchyVisitor vhv=new ViewHierarchyVisitor();
  dge.accept(vhv);
  String url=ExportUtility.getUrlWithWorkspace();
  if (url == null)   return false;
  boolean document=false;
  Stereotype documentView=StereotypesHelper.getStereotype(Application.getInstance().getProject(),DocGen3Profile.documentViewStereotype,""String_Node_Str"");
  if (StereotypesHelper.hasStereotypeOrDerived(view,documentView))   document=true;
  JSONObject view2view=vhv.getView2View();
  if (document) {
    String docurl=url + ""String_Node_Str"";
    JSONObject send=new JSONObject();
    JSONArray documents=new JSONArray();
    JSONObject doc=new JSONObject();
    JSONObject specialization=new JSONObject();
    specialization.put(""String_Node_Str"",""String_Node_Str"");
    doc.put(""String_Node_Str"",specialization);
    specialization.put(""String_Node_Str"",ExportUtility.formatView2View(view2view));
    specialization.put(""String_Node_Str"",vhv.getNosections());
    doc.put(""String_Node_Str"",view.getID());
    documents.add(doc);
    send.put(""String_Node_Str"",documents);
    send.put(""String_Node_Str"",""String_Node_Str"");
    OutputQueue.getInstance().offer(new Request(docurl,send.toJSONString()));
  }
 else {
    JSONArray views=new JSONArray();
    for (    Object viewid : view2view.keySet()) {
      JSONObject viewinfo=new JSONObject();
      JSONObject specialization=new JSONObject();
      viewinfo.put(""String_Node_Str"",viewid);
      specialization.put(""String_Node_Str"",view2view.get(viewid));
      viewinfo.put(""String_Node_Str"",specialization);
      views.add(viewinfo);
    }
    JSONObject send=new JSONObject();
    send.put(""String_Node_Str"",views);
    send.put(""String_Node_Str"",""String_Node_Str"");
    OutputQueue.getInstance().offer(new Request(url + ""String_Node_Str"",send.toJSONString()));
  }
  return true;
}",0.9395535490343616
88631,"@Override public void execute(Collection<Annotation> annos){
  Collection<Annotation> toremove=new ArrayList<Annotation>();
  for (  Annotation anno : annos) {
    Element e=(Element)anno.getTarget();
    if (exportHierarchy(e)) {
      toremove.add(anno);
    }
  }
  if (!toremove.isEmpty()) {
    this.removeViolationsAndUpdateWindow(toremove);
  }
}","@Override public void execute(Collection<Annotation> annos){
  Collection<Annotation> toremove=new ArrayList<Annotation>();
  for (  Annotation anno : annos) {
    Element e=(Element)anno.getTarget();
    if (exportHierarchy(e)) {
      toremove.add(anno);
    }
  }
}",0.8631239935587761
88632,"public static Map<String,Object> importHierarchy(Element document,JSONObject md,JSONObject keyed) throws ReadOnlyElementException {
  Project project=Application.getInstance().getProject();
  Map<String,Object> retval=new HashMap<String,Object>();
  retval.put(""String_Node_Str"",true);
  ElementsFactory ef=Application.getInstance().getProject().getElementsFactory();
  Stereotype viewS=Utils.getViewClassStereotype();
  Map<String,List<Property>> viewId2props=new HashMap<String,List<Property>>();
  Set<String> processedViews=new HashSet<String>();
  List<JSONObject> newviews=new ArrayList<JSONObject>();
  for (  Object vid : md.keySet()) {
    String viewid=(String)vid;
    Element view=ExportUtility.getElementFromID(viewid);
    if (view != null && view instanceof Class) {
      if (!view.isEditable() && !ProjectUtilities.isElementInAttachedProject(view))       TeamworkUtils.lockElement(project,view,false);
      for (      Property p : ((Class)view).getOwnedAttribute()) {
        Type t=p.getType();
        if (t != null && StereotypesHelper.hasStereotypeOrDerived(t,viewS)) {
          List<Property> viewprops=viewId2props.get(t.getID());
          if (viewprops == null) {
            viewprops=new ArrayList<Property>();
            viewId2props.put(t.getID(),viewprops);
          }
          viewprops.add(p);
        }
      }
      processedViews.add(view.getID());
    }
  }
  for (  Object vid : keyed.keySet()) {
    String viewid=(String)vid;
    if (processedViews.contains(viewid))     continue;
    Element view=ExportUtility.getElementFromID(viewid);
    if (view != null && view instanceof Class) {
      if (!view.isEditable() && !ProjectUtilities.isElementInAttachedProject(view))       TeamworkUtils.lockElement(project,view,false);
      for (      Property p : ((Class)view).getOwnedAttribute()) {
        Type t=p.getType();
        if (t != null && StereotypesHelper.hasStereotypeOrDerived(t,viewS)) {
          List<Property> viewprops=viewId2props.get(t.getID());
          if (viewprops == null) {
            viewprops=new ArrayList<Property>();
            viewId2props.put(t.getID(),viewprops);
          }
          viewprops.add(p);
        }
      }
    }
 else {
      String url=ExportUtility.getUrlWithWorkspace();
      url+=""String_Node_Str"" + viewid;
      String result=ExportUtility.get(url,false);
      if (result != null) {
        JSONObject ob=(JSONObject)JSONValue.parse(result);
        if (ob != null) {
          JSONArray elements=(JSONArray)ob.get(""String_Node_Str"");
          if (elements != null && !elements.isEmpty()) {
            JSONObject viewob=(JSONObject)elements.get(0);
            newviews.add(viewob);
          }
        }
      }
    }
  }
  List<JSONObject> sortedNewviews=ImportUtility.getCreationOrder(newviews);
  if (sortedNewviews == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    retval.put(""String_Node_Str"",false);
    return retval;
  }
  for (  JSONObject ob : sortedNewviews) {
    Element newview=ImportUtility.createElement(ob,true);
    if (newview != null) {
      List<Property> viewprops=new ArrayList<Property>();
      viewId2props.put(newview.getID(),viewprops);
    }
 else {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      retval.put(""String_Node_Str"",false);
      return retval;
    }
  }
  Set<Property> moved=new HashSet<Property>();
  Set<Element> added=new HashSet<Element>();
  Set<Element> deleted=new HashSet<Element>();
  Set<Property> ptyped=new HashSet<Property>();
  for (  Object vid : keyed.keySet()) {
    String viewid=(String)vid;
    JSONArray children=(JSONArray)keyed.get(vid);
    List<Property> cprops=new ArrayList<Property>();
    Element view=ExportUtility.getElementFromID(viewid);
    if (view != null && view instanceof Class) {
      for (      Object cid : children) {
        String childId=(String)cid;
        List<Property> availableProps=viewId2props.get(childId);
        if (availableProps == null || availableProps.isEmpty()) {
          Element cview=ExportUtility.getElementFromID(childId);
          if (cview instanceof Type) {
            Association association=ef.createAssociationInstance();
            Property propType1=ModelHelper.getFirstMemberEnd(association);
            propType1.setName(((NamedElement)cview).getName().toLowerCase());
            propType1.setAggregation(AggregationKindEnum.COMPOSITE);
            propType1.setType((Type)cview);
            ModelHelper.setNavigable(propType1,true);
            Stereotype partPropertyST=Utils.getStereotype(""String_Node_Str"");
            StereotypesHelper.addStereotype(propType1,partPropertyST);
            Property propType2=ModelHelper.getSecondMemberEnd(association);
            propType2.setType((Type)view);
            propType2.setOwner(association);
            association.setOwner(document.getOwner());
            cprops.add(propType1);
            added.add(propType1);
            added.add(propType2);
            added.add(association);
          }
        }
 else {
          Property p=availableProps.remove(0);
          if (p.getOwner() != view) {
            moved.add(p);
            Property opposite=getOpposite(p);
            if (opposite != null) {
              opposite.setType((Type)view);
              JSONObject ptype=new JSONObject();
              ptype.put(""String_Node_Str"",opposite.getID());
              JSONObject spec=new JSONObject();
              spec.put(""String_Node_Str"",""String_Node_Str"");
              spec.put(""String_Node_Str"",view.getID());
              ptype.put(""String_Node_Str"",spec);
              ptyped.add(opposite);
            }
          }
          cprops.add(p);
        }
      }
      for (      Property p : ((Class)view).getOwnedAttribute()) {
        if (p.getType() == null || !StereotypesHelper.hasStereotypeOrDerived(p.getType(),viewS)) {
          cprops.add(p);
        }
      }
      ((Class)view).getOwnedAttribute().clear();
      ((Class)view).getOwnedAttribute().addAll(cprops);
    }
  }
  for (  List<Property> props : viewId2props.values()) {
    for (    Property p : props) {
      deleted.add(p);
      Association asso=p.get_associationOfNavigableOwnedEnd();
      if (asso != null) {
        deleted.addAll(asso.getOwnedEnd());
        deleted.add(asso);
      }
      ModelElementsManager.getInstance().removeElement(p);
    }
  }
  Set<String> deletedIds=new HashSet<String>();
  for (  Element deletedE : deleted) {
    deletedIds.add(deletedE.getID());
  }
  retval.put(""String_Node_Str"",deleted);
  retval.put(""String_Node_Str"",deletedIds);
  retval.put(""String_Node_Str"",added);
  retval.put(""String_Node_Str"",moved);
  retval.put(""String_Node_Str"",ptyped);
  return retval;
}","public static Map<String,Object> importHierarchy(Element document,JSONObject md,JSONObject keyed) throws ReadOnlyElementException {
  Project project=Application.getInstance().getProject();
  Map<String,Object> retval=new HashMap<String,Object>();
  retval.put(""String_Node_Str"",true);
  ElementsFactory ef=Application.getInstance().getProject().getElementsFactory();
  Stereotype viewS=Utils.getViewClassStereotype();
  Map<String,List<Property>> viewId2props=new HashMap<String,List<Property>>();
  Set<String> processedViews=new HashSet<String>();
  List<JSONObject> newviews=new ArrayList<JSONObject>();
  for (  Object vid : md.keySet()) {
    String viewid=(String)vid;
    Element view=ExportUtility.getElementFromID(viewid);
    if (view != null && view instanceof Class) {
      if (!view.isEditable() && !ProjectUtilities.isElementInAttachedProject(view))       TeamworkUtils.lockElement(project,view,false);
      for (      Property p : ((Class)view).getOwnedAttribute()) {
        Type t=p.getType();
        if (t != null && StereotypesHelper.hasStereotypeOrDerived(t,viewS)) {
          List<Property> viewprops=viewId2props.get(t.getID());
          if (viewprops == null) {
            viewprops=new ArrayList<Property>();
            viewId2props.put(t.getID(),viewprops);
          }
          viewprops.add(p);
        }
      }
      processedViews.add(view.getID());
    }
  }
  for (  Object vid : keyed.keySet()) {
    String viewid=(String)vid;
    if (processedViews.contains(viewid))     continue;
    Element view=ExportUtility.getElementFromID(viewid);
    if (view != null && view instanceof Class) {
      if (!view.isEditable() && !ProjectUtilities.isElementInAttachedProject(view))       TeamworkUtils.lockElement(project,view,false);
      for (      Property p : ((Class)view).getOwnedAttribute()) {
        Type t=p.getType();
        if (t != null && StereotypesHelper.hasStereotypeOrDerived(t,viewS)) {
          List<Property> viewprops=viewId2props.get(t.getID());
          if (viewprops == null) {
            viewprops=new ArrayList<Property>();
            viewId2props.put(t.getID(),viewprops);
          }
          viewprops.add(p);
        }
      }
    }
 else {
      String url=ExportUtility.getUrlWithWorkspace();
      url+=""String_Node_Str"" + viewid;
      String result=ExportUtility.get(url,false);
      if (result != null) {
        JSONObject ob=(JSONObject)JSONValue.parse(result);
        if (ob != null) {
          JSONArray elements=(JSONArray)ob.get(""String_Node_Str"");
          if (elements != null && !elements.isEmpty()) {
            JSONObject viewob=(JSONObject)elements.get(0);
            newviews.add(viewob);
          }
        }
      }
    }
  }
  List<JSONObject> sortedNewviews=ImportUtility.getCreationOrder(newviews);
  if (sortedNewviews == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    retval.put(""String_Node_Str"",false);
    return retval;
  }
  for (  JSONObject ob : sortedNewviews) {
    Element newview=ImportUtility.createElement(ob,true);
    if (newview != null) {
      List<Property> viewprops=new ArrayList<Property>();
      viewId2props.put(newview.getID(),viewprops);
    }
 else {
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      retval.put(""String_Node_Str"",false);
      return retval;
    }
  }
  Set<Property> moved=new HashSet<Property>();
  Set<Element> added=new HashSet<Element>();
  Set<Element> deleted=new HashSet<Element>();
  Set<Property> ptyped=new HashSet<Property>();
  for (  Object vid : keyed.keySet()) {
    String viewid=(String)vid;
    JSONArray children=(JSONArray)keyed.get(vid);
    List<Property> cprops=new ArrayList<Property>();
    Element view=ExportUtility.getElementFromID(viewid);
    if (view != null && view instanceof Class) {
      for (      Object cid : children) {
        String childId=(String)cid;
        List<Property> availableProps=viewId2props.get(childId);
        if (availableProps == null || availableProps.isEmpty()) {
          Element cview=ExportUtility.getElementFromID(childId);
          if (cview instanceof Type) {
            Association association=ef.createAssociationInstance();
            Property propType1=ModelHelper.getFirstMemberEnd(association);
            propType1.setName(((NamedElement)cview).getName().toLowerCase());
            propType1.setAggregation(AggregationKindEnum.COMPOSITE);
            propType1.setType((Type)cview);
            ModelHelper.setNavigable(propType1,true);
            Stereotype partPropertyST=Utils.getStereotype(""String_Node_Str"");
            StereotypesHelper.addStereotype(propType1,partPropertyST);
            Property propType2=ModelHelper.getSecondMemberEnd(association);
            propType2.setType((Type)view);
            propType2.setOwner(association);
            association.setOwner(document.getOwner());
            cprops.add(propType1);
            added.add(propType1);
            added.add(propType2);
            added.add(association);
          }
        }
 else {
          Property p=availableProps.remove(0);
          if (p.getOwner() != view) {
            moved.add(p);
            Property opposite=getOpposite(p);
            if (opposite != null) {
              opposite.setType((Type)view);
              JSONObject ptype=new JSONObject();
              ptype.put(""String_Node_Str"",opposite.getID());
              JSONObject spec=new JSONObject();
              spec.put(""String_Node_Str"",""String_Node_Str"");
              spec.put(""String_Node_Str"",view.getID());
              ptype.put(""String_Node_Str"",spec);
              ptyped.add(opposite);
            }
          }
          cprops.add(p);
        }
      }
      for (      Property p : ((Class)view).getOwnedAttribute()) {
        if (p.getType() == null || !StereotypesHelper.hasStereotypeOrDerived(p.getType(),viewS)) {
          cprops.add(p);
        }
      }
      ((Class)view).getOwnedAttribute().clear();
      ((Class)view).getOwnedAttribute().addAll(cprops);
    }
  }
  for (  List<Property> props : viewId2props.values()) {
    for (    Property p : props) {
      deleted.add(p);
      Association asso=p.getAssociation();
      if (asso != null) {
        deleted.addAll(asso.getOwnedEnd());
        deleted.add(asso);
      }
      ModelElementsManager.getInstance().removeElement(p);
    }
  }
  Set<String> deletedIds=new HashSet<String>();
  for (  Element deletedE : deleted) {
    deletedIds.add(deletedE.getID());
  }
  retval.put(""String_Node_Str"",deleted);
  retval.put(""String_Node_Str"",deletedIds);
  retval.put(""String_Node_Str"",added);
  retval.put(""String_Node_Str"",moved);
  retval.put(""String_Node_Str"",ptyped);
  return retval;
}",0.9968851972708396
88633,"@SuppressWarnings(""String_Node_Str"") public static List<Request> sendChanges(Map<String,Object> results){
  Set<Element> added=(Set<Element>)results.get(""String_Node_Str"");
  Set<Property> moved=(Set<Property>)results.get(""String_Node_Str"");
  Set<Element> deleted=(Set<Element>)results.get(""String_Node_Str"");
  Set<Property> ptyped=(Set<Property>)results.get(""String_Node_Str"");
  Set<String> deletedIds=(Set<String>)results.get(""String_Node_Str"");
  List<Request> returns=new ArrayList<Request>();
  JSONArray changes=new JSONArray();
  for (  Element e : added) {
    changes.add(ExportUtility.fillElement(e,null));
  }
  for (  Property p : moved) {
    changes.add(ExportUtility.fillOwner(p,null));
  }
  for (  Property p : ptyped) {
    changes.add(ExportUtility.fillElement(p,null));
  }
  JSONObject tosend=new JSONObject();
  tosend.put(""String_Node_Str"",changes);
  String url=ExportUtility.getPostElementsUrl();
  Request r=new Request();
  r.setUrl(url);
  r.setJson(tosend.toJSONString());
  OutputQueue.getInstance().offer(r);
  url=ExportUtility.getUrlWithWorkspace();
  for (  String e : deletedIds) {
    String durl=url + ""String_Node_Str"" + e;
    Request rr=new Request();
    r.setUrl(durl);
    r.setMethod(""String_Node_Str"");
    OutputQueue.getInstance().offer(rr);
  }
  return returns;
}","@SuppressWarnings(""String_Node_Str"") public static List<Request> sendChanges(Map<String,Object> results){
  Set<Element> added=(Set<Element>)results.get(""String_Node_Str"");
  Set<Property> moved=(Set<Property>)results.get(""String_Node_Str"");
  Set<Element> deleted=(Set<Element>)results.get(""String_Node_Str"");
  Set<Property> ptyped=(Set<Property>)results.get(""String_Node_Str"");
  Set<String> deletedIds=(Set<String>)results.get(""String_Node_Str"");
  List<Request> returns=new ArrayList<Request>();
  JSONArray changes=new JSONArray();
  for (  Element e : added) {
    changes.add(ExportUtility.fillElement(e,null));
  }
  for (  Property p : moved) {
    changes.add(ExportUtility.fillOwner(p,null));
  }
  for (  Property p : ptyped) {
    changes.add(ExportUtility.fillElement(p,null));
  }
  JSONObject tosend=new JSONObject();
  tosend.put(""String_Node_Str"",changes);
  String url=ExportUtility.getPostElementsUrl();
  Request r=new Request();
  r.setUrl(url);
  r.setJson(tosend.toJSONString());
  OutputQueue.getInstance().offer(r);
  url=ExportUtility.getUrlWithWorkspace();
  for (  String e : deletedIds) {
    String durl=url + ""String_Node_Str"" + e;
    Request rr=new Request();
    rr.setUrl(durl);
    rr.setMethod(""String_Node_Str"");
    OutputQueue.getInstance().offer(rr);
  }
  return returns;
}",0.9992401215805472
88634,"@SuppressWarnings(""String_Node_Str"") @Override public void actionPerformed(ActionEvent ae){
  Project project=Application.getInstance().getProject();
  Map<String,Set<String>> jms=AutoSyncProjectListener.getJMSChanges(Application.getInstance().getProject());
  AutoSyncCommitListener listener=AutoSyncProjectListener.getCommitListener(Application.getInstance().getProject());
  if (jms == null || listener == null)   return;
  Map<String,Element> localAdded=listener.getAddedElements();
  Map<String,Element> localDeleted=listener.getDeletedElements();
  Map<String,Element> localChanged=listener.getChangedElements();
  Set<String> webChanged=jms.get(""String_Node_Str"");
  Set<String> webAdded=jms.get(""String_Node_Str"");
  Set<String> webDeleted=jms.get(""String_Node_Str"");
  Set<String> toGet=new HashSet<String>(webChanged);
  toGet.addAll(webAdded);
  if (!toGet.isEmpty()) {
    JSONObject getJson=new JSONObject();
    JSONArray getElements=new JSONArray();
    getJson.put(""String_Node_Str"",getElements);
    for (    String e : toGet) {
      JSONObject el=new JSONObject();
      el.put(""String_Node_Str"",e);
      getElements.add(el);
    }
    String url=ExportUtility.getUrlWithWorkspace();
    url+=""String_Node_Str"";
    String response=ExportUtility.getWithBody(url,getJson.toJSONString());
    if (response == null)     return;
    Map<String,JSONObject> webElements=new HashMap<String,JSONObject>();
    JSONObject webObject=(JSONObject)JSONValue.parse(response);
    JSONArray webArray=(JSONArray)webObject.get(""String_Node_Str"");
    for (    Object o : webArray) {
      String webId=(String)((JSONObject)o).get(""String_Node_Str"");
      webElements.put(webId,(JSONObject)o);
    }
    SessionManager sm=SessionManager.getInstance();
    sm.createSession(""String_Node_Str"");
    try {
      List<JSONObject> webAddedObjects=new ArrayList<JSONObject>();
      for (      String webAdd : webAdded) {
        webAddedObjects.add(webElements.get(webAdd));
      }
      List<JSONObject> webAddedSorted=ImportUtility.getCreationOrder(webAddedObjects);
      if (webAddedSorted != null) {
        for (        Object element : webAddedSorted) {
          ImportUtility.createElement((JSONObject)element,false);
        }
        for (        Object element : webAddedSorted) {
          ImportUtility.createElement((JSONObject)element,true);
        }
      }
 else {
      }
      Set<String> localChangedIds=new HashSet<String>(localChanged.keySet());
      localChangedIds.retainAll(webChanged);
      List<JSONObject> webConflictedObjects=new ArrayList<JSONObject>();
      if (!localChangedIds.isEmpty()) {
        for (        String conflictId : localChangedIds) {
          webConflictedObjects.add(webElements.get(conflictId));
        }
      }
      List<JSONObject> webChangedObjects=new ArrayList<JSONObject>();
      for (      String webUpdate : webChanged) {
        if (localChangedIds.contains(webUpdate))         continue;
        webChangedObjects.add(webElements.get(webUpdate));
      }
      for (      JSONObject webUpdated : webChangedObjects) {
        Element e=ExportUtility.getElementFromID((String)webUpdated.get(""String_Node_Str""));
        ImportUtility.updateElement(e,webUpdated);
      }
      for (      String e : webDeleted) {
        Element toBeDeleted=ExportUtility.getElementFromID(e);
        if (toBeDeleted == null)         continue;
        if (!toBeDeleted.isEditable())         TeamworkUtils.lockElement(project,toBeDeleted,false);
        try {
          ModelElementsManager.getInstance().removeElement(toBeDeleted);
        }
 catch (        ReadOnlyElementException ex) {
        }
      }
      sm.closeSession();
    }
 catch (    Exception e) {
      sm.cancelSession();
    }
  }
  if (commit) {
    JSONArray toSendElements=new JSONArray();
    for (    Element e : localAdded.values()) {
      toSendElements.add(ExportUtility.fillElement(e,null));
    }
    for (    Element e : localChanged.values()) {
      toSendElements.add(ExportUtility.fillElement(e,null));
    }
    JSONObject toSendUpdates=new JSONObject();
    toSendUpdates.put(""String_Node_Str"",toSendElements);
    toSendUpdates.put(""String_Node_Str"",""String_Node_Str"");
    OutputQueue.getInstance().offer(new Request(ExportUtility.getPostElementsUrl(),toSendUpdates.toJSONString(),""String_Node_Str"",true));
    JSONArray toDeleteElements=new JSONArray();
    for (    String e : localDeleted.keySet()) {
      JSONObject toDelete=new JSONObject();
      toDelete.put(""String_Node_Str"",e);
      toDeleteElements.add(toDelete);
    }
    toSendUpdates.put(""String_Node_Str"",toDeleteElements);
    OutputQueue.getInstance().offer(new Request(ExportUtility.getUrlWithWorkspace() + ""String_Node_Str"",toSendUpdates.toJSONString(),""String_Node_Str"",true));
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void actionPerformed(ActionEvent ae){
  Application.getInstance().getGUILog().log(""String_Node_Str"");
  Project project=Application.getInstance().getProject();
  Map<String,Set<String>> jms=AutoSyncProjectListener.getJMSChanges(Application.getInstance().getProject());
  AutoSyncCommitListener listener=AutoSyncProjectListener.getCommitListener(Application.getInstance().getProject());
  if (jms == null || listener == null)   return;
  Map<String,Element> localAdded=listener.getAddedElements();
  Map<String,Element> localDeleted=listener.getDeletedElements();
  Map<String,Element> localChanged=listener.getChangedElements();
  Set<String> webChanged=jms.get(""String_Node_Str"");
  Set<String> webAdded=jms.get(""String_Node_Str"");
  Set<String> webDeleted=jms.get(""String_Node_Str"");
  Set<String> toGet=new HashSet<String>(webChanged);
  toGet.addAll(webAdded);
  Map<String,JSONObject> cannotAdd=new HashMap<String,JSONObject>();
  Map<String,JSONObject> cannotChange=new HashMap<String,JSONObject>();
  Set<String> cannotDelete=new HashSet<String>();
  if (!toGet.isEmpty()) {
    TeamworkUtils.lockElement(project,project.getModel(),true);
    JSONObject getJson=new JSONObject();
    JSONArray getElements=new JSONArray();
    getJson.put(""String_Node_Str"",getElements);
    for (    String e : toGet) {
      JSONObject el=new JSONObject();
      el.put(""String_Node_Str"",e);
      getElements.add(el);
    }
    String url=ExportUtility.getUrlWithWorkspace();
    url+=""String_Node_Str"";
    String response=ExportUtility.getWithBody(url,getJson.toJSONString());
    if (response == null)     return;
    Map<String,JSONObject> webElements=new HashMap<String,JSONObject>();
    JSONObject webObject=(JSONObject)JSONValue.parse(response);
    JSONArray webArray=(JSONArray)webObject.get(""String_Node_Str"");
    for (    Object o : webArray) {
      String webId=(String)((JSONObject)o).get(""String_Node_Str"");
      webElements.put(webId,(JSONObject)o);
    }
    List<JSONObject> webAddedObjects=new ArrayList<JSONObject>();
    for (    String webAdd : webAdded) {
      if (webElements.containsKey(webAdd))       webAddedObjects.add(webElements.get(webAdd));
    }
    List<JSONObject> webAddedSorted=ImportUtility.getCreationOrder(webAddedObjects);
    Set<String> localChangedIds=new HashSet<String>(localChanged.keySet());
    localChangedIds.retainAll(webChanged);
    JSONArray webConflictedObjects=new JSONArray();
    Set<Element> localConflictedElements=new HashSet<Element>();
    if (!localChangedIds.isEmpty()) {
      for (      String conflictId : localChangedIds) {
        if (webElements.containsKey(conflictId)) {
          webConflictedObjects.add(webElements.get(conflictId));
          localConflictedElements.add(localChanged.get(conflictId));
        }
      }
    }
    List<JSONObject> webChangedObjects=new ArrayList<JSONObject>();
    for (    String webUpdate : webChanged) {
      if (localChangedIds.contains(webUpdate))       continue;
      if (webElements.containsKey(webUpdate))       webChangedObjects.add(webElements.get(webUpdate));
    }
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    SessionManager sm=SessionManager.getInstance();
    sm.createSession(""String_Node_Str"");
    try {
      if (webAddedSorted != null) {
        for (        Object element : webAddedSorted) {
          ImportUtility.createElement((JSONObject)element,false);
        }
        for (        Object element : webAddedSorted) {
          try {
            ImportUtility.createElement((JSONObject)element,true);
          }
 catch (          Exception ex) {
            cannotAdd.put((String)((JSONObject)element).get(""String_Node_Str""),(JSONObject)element);
          }
        }
      }
 else {
        for (        Object element : webAddedObjects) {
          cannotAdd.put((String)((JSONObject)element).get(""String_Node_Str""),(JSONObject)element);
        }
      }
      for (      JSONObject webUpdated : webChangedObjects) {
        Element e=ExportUtility.getElementFromID((String)webUpdated.get(""String_Node_Str""));
        if (e == null) {
          continue;
        }
        try {
          ImportUtility.updateElement(e,webUpdated);
          ImportUtility.setOwner(e,webUpdated);
        }
 catch (        Exception ex) {
          cannotChange.put(ExportUtility.getElementID(e),webUpdated);
        }
      }
      for (      String e : webDeleted) {
        Element toBeDeleted=ExportUtility.getElementFromID(e);
        if (toBeDeleted == null)         continue;
        try {
          ModelElementsManager.getInstance().removeElement(toBeDeleted);
        }
 catch (        Exception ex) {
          cannotDelete.add(e);
        }
      }
      Application.getInstance().getGUILog().log(""String_Node_Str"");
      listener.disable();
      sm.closeSession();
      listener.enable();
      JSONObject mvResult=new JSONObject();
      mvResult.put(""String_Node_Str"",webConflictedObjects);
      ModelValidator mv=new ModelValidator(null,mvResult,false,localConflictedElements,false);
      mv.validate(false,null);
      Set<Element> conflictedElements=mv.getDifferentElements();
      if (!conflictedElements.isEmpty()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"");
        mv.showWindow();
        return;
      }
    }
 catch (    Exception e) {
      sm.cancelSession();
    }
  }
 else {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
  }
  if (commit) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    JSONArray toSendElements=new JSONArray();
    for (    Element e : localAdded.values()) {
      toSendElements.add(ExportUtility.fillElement(e,null));
    }
    for (    Element e : localChanged.values()) {
      toSendElements.add(ExportUtility.fillElement(e,null));
    }
    JSONObject toSendUpdates=new JSONObject();
    toSendUpdates.put(""String_Node_Str"",toSendElements);
    toSendUpdates.put(""String_Node_Str"",""String_Node_Str"");
    if (toSendElements.size() > 100) {
    }
    if (!toSendUpdates.isEmpty())     OutputQueue.getInstance().offer(new Request(ExportUtility.getPostElementsUrl(),toSendUpdates.toJSONString(),""String_Node_Str"",true));
    localAdded.clear();
    localChanged.clear();
    JSONArray toDeleteElements=new JSONArray();
    for (    String e : localDeleted.keySet()) {
      JSONObject toDelete=new JSONObject();
      toDelete.put(""String_Node_Str"",e);
      toDeleteElements.add(toDelete);
    }
    toSendUpdates.put(""String_Node_Str"",toDeleteElements);
    if (!toDeleteElements.isEmpty())     OutputQueue.getInstance().offer(new Request(ExportUtility.getUrlWithWorkspace() + ""String_Node_Str"",toSendUpdates.toJSONString(),""String_Node_Str"",true));
    localDeleted.clear();
    if (toDeleteElements.isEmpty() && toSendElements.isEmpty())     Application.getInstance().getGUILog().log(""String_Node_Str"");
 else     Application.getInstance().getGUILog().log(""String_Node_Str"");
  }
}",0.6125455007195463
88635,"@SuppressWarnings(""String_Node_Str"") public static JSONObject fillElement(Element e,JSONObject eInfo){
  JSONObject elementInfo=eInfo;
  if (elementInfo == null)   elementInfo=new JSONObject();
  JSONObject specialization=new JSONObject();
  elementInfo.put(""String_Node_Str"",specialization);
  Stereotype commentS=Utils.getCommentStereotype();
  if (e instanceof Package) {
    fillPackage((Package)e,specialization);
  }
 else   if (e instanceof Property || e instanceof Slot) {
    fillPropertySpecialization(e,specialization,true);
  }
 else   if (e instanceof DirectedRelationship) {
    fillDirectedRelationshipSpecialization((DirectedRelationship)e,specialization);
  }
 else   if (e instanceof Connector) {
    fillConnectorSpecialization((Connector)e,specialization);
  }
 else   if (e instanceof Operation) {
    fillOperationSpecialization((Operation)e,specialization);
  }
 else   if (e instanceof Constraint) {
    fillConstraintSpecialization((Constraint)e,specialization);
  }
 else   if (e instanceof InstanceSpecification) {
    specialization.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (e instanceof Parameter) {
    fillParameterSpecialization((Parameter)e,specialization);
  }
 else   if (e instanceof Comment || StereotypesHelper.hasStereotypeOrDerived(e,commentS)) {
    specialization.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (e instanceof Association) {
    fillAssociationSpecialization((Association)e,specialization);
  }
 else   if (e.getClass().getSimpleName().equals(""String_Node_Str"")) {
    Stereotype viewpoint=Utils.getViewpointStereotype();
    if (viewpoint != null && StereotypesHelper.hasStereotypeOrDerived(e,viewpoint))     specialization.put(""String_Node_Str"",""String_Node_Str"");
 else     specialization.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    specialization.put(""String_Node_Str"",""String_Node_Str"");
  }
  fillName(e,elementInfo);
  fillDoc(e,elementInfo);
  fillOwner(e,elementInfo);
  elementInfo.put(""String_Node_Str"",getElementID(e));
  return elementInfo;
}","@SuppressWarnings(""String_Node_Str"") public static JSONObject fillElement(Element e,JSONObject eInfo){
  JSONObject elementInfo=eInfo;
  if (elementInfo == null)   elementInfo=new JSONObject();
  JSONObject specialization=new JSONObject();
  elementInfo.put(""String_Node_Str"",specialization);
  Stereotype commentS=Utils.getCommentStereotype();
  if (e instanceof Package) {
    fillPackage((Package)e,specialization);
  }
 else   if (e instanceof Property || e instanceof Slot) {
    fillPropertySpecialization(e,specialization,true);
  }
 else   if (e instanceof DirectedRelationship) {
    fillDirectedRelationshipSpecialization((DirectedRelationship)e,specialization);
  }
 else   if (e instanceof Connector) {
    fillConnectorSpecialization((Connector)e,specialization);
  }
 else   if (e instanceof Operation) {
    fillOperationSpecialization((Operation)e,specialization);
  }
 else   if (e instanceof Constraint) {
    fillConstraintSpecialization((Constraint)e,specialization);
  }
 else   if (e instanceof InstanceSpecification) {
    specialization.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (e instanceof Parameter) {
    fillParameterSpecialization((Parameter)e,specialization);
  }
 else   if (e instanceof Comment || StereotypesHelper.hasStereotypeOrDerived(e,commentS)) {
    specialization.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (e instanceof Association) {
    fillAssociationSpecialization((Association)e,specialization);
  }
 else   if (e.getClass().getSimpleName().equals(""String_Node_Str"")) {
    Stereotype viewpoint=Utils.getViewpointStereotype();
    Stereotype view=Utils.getViewStereotype();
    if (viewpoint != null && StereotypesHelper.hasStereotypeOrDerived(e,viewpoint))     specialization.put(""String_Node_Str"",""String_Node_Str"");
 else     if (view != null && StereotypesHelper.hasStereotypeOrDerived(e,view))     specialization.put(""String_Node_Str"",""String_Node_Str"");
 else     specialization.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    specialization.put(""String_Node_Str"",""String_Node_Str"");
  }
  fillName(e,elementInfo);
  fillDoc(e,elementInfo);
  fillOwner(e,elementInfo);
  elementInfo.put(""String_Node_Str"",getElementID(e));
  return elementInfo;
}",0.956197576887232
88636,"@SuppressWarnings(""String_Node_Str"") private void handleChangedProperty(Element sourceElement,String propertyName,Object newValue,Object oldValue){
  JSONObject elementOb=null;
  String elementID=null;
  ArrayList<String> moveKeywords=new ArrayList<String>();
  moveKeywords.add(PropertyNames.OWNING_ASSOCIATION);
  moveKeywords.add(PropertyNames.OWNING_CONSTRAINT);
  moveKeywords.add(PropertyNames.OWNING_ELEMENT);
  moveKeywords.add(PropertyNames.OWNING_EXPRESSION);
  moveKeywords.add(PropertyNames.OWNING_INSTANCE);
  moveKeywords.add(PropertyNames.OWNING_INSTANCE_SPEC);
  moveKeywords.add(PropertyNames.OWNING_LOWER);
  moveKeywords.add(PropertyNames.OWNING_PACKAGE);
  moveKeywords.add(PropertyNames.OWNING_PARAMETER);
  moveKeywords.add(PropertyNames.OWNING_PROPERTY);
  moveKeywords.add(PropertyNames.OWNING_SIGNAL);
  moveKeywords.add(PropertyNames.OWNING_SLOT);
  moveKeywords.add(PropertyNames.OWNING_STATE);
  moveKeywords.add(PropertyNames.OWNING_TEMPLATE_PARAMETER);
  moveKeywords.add(PropertyNames.OWNING_TRANSITION);
  moveKeywords.add(PropertyNames.OWNING_UPPER);
  moveKeywords.add(PropertyNames._U_M_L_CLASS);
  moveKeywords.add(PropertyNames.OWNER);
  if (propertyName.equals(PropertyNames.NAME)) {
    elementOb=getElementObject(sourceElement);
    ExportUtility.fillName(sourceElement,elementOb);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if (sourceElement instanceof Comment && ExportUtility.isElementDocumentation((Comment)sourceElement) && propertyName.equals(PropertyNames.BODY)) {
    Element actual=sourceElement.getOwner();
    elementOb=getElementObject(actual);
    ExportUtility.fillDoc(actual,elementOb);
    ExportUtility.fillOwner(actual,elementOb);
  }
 else   if ((sourceElement instanceof ValueSpecification) && (propertyName.equals(PropertyNames.VALUE)) || (sourceElement instanceof OpaqueExpression) && (propertyName.equals(PropertyNames.BODY)) || (sourceElement instanceof Expression) && (propertyName.equals(PropertyNames.OPERAND))) {
    Element actual=sourceElement.getOwner();
    while (actual instanceof ValueSpecification)     actual=actual.getOwner();
    if (!ExportUtility.shouldAdd(actual))     return;
    elementOb=getElementObject(actual);
    if (actual instanceof Slot || actual instanceof Property) {
      JSONObject specialization=ExportUtility.fillPropertySpecialization(actual,null,true);
      elementOb.put(""String_Node_Str"",specialization);
    }
    if (actual instanceof Constraint) {
      JSONObject specialization=ExportUtility.fillConstraintSpecialization((Constraint)actual,null);
      elementOb.put(""String_Node_Str"",specialization);
    }
    ExportUtility.fillOwner(actual,elementOb);
  }
 else   if ((sourceElement instanceof Property) && (propertyName.equals(PropertyNames.DEFAULT_VALUE) || propertyName.equals(PropertyNames.TYPE))) {
    JSONObject specialization=ExportUtility.fillPropertySpecialization(sourceElement,null,true);
    elementOb=getElementObject(sourceElement);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if ((sourceElement instanceof Slot) && propertyName.equals(PropertyNames.VALUE) && ExportUtility.shouldAdd(sourceElement)) {
    elementOb=getElementObject(sourceElement);
    JSONObject specialization=ExportUtility.fillPropertySpecialization(sourceElement,null,false);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if ((sourceElement instanceof Constraint) && propertyName.equals(PropertyNames.SPECIFICATION)) {
    elementOb=getElementObject(sourceElement);
    JSONObject specialization=ExportUtility.fillConstraintSpecialization((Constraint)sourceElement,null);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if (propertyName.equals(UML2MetamodelConstants.INSTANCE_CREATED) && ExportUtility.shouldAdd(sourceElement)) {
    if (isDiagramCreated(sourceElement))     toRemove.add(ExportUtility.getElementID(sourceElement));
 else {
      elementOb=getElementObject(sourceElement,true);
      ExportUtility.fillElement(sourceElement,elementOb);
    }
  }
 else   if (propertyName.equals(UML2MetamodelConstants.INSTANCE_DELETED) && ExportUtility.shouldAdd(sourceElement)) {
    elementID=ExportUtility.getElementID(sourceElement);
    elements.remove(elementID);
    changedElements.remove(elementID);
    addedElements.remove(elementID);
    deletes.add(elementID);
    deletedElements.put(elementID,sourceElement);
  }
 else   if (sourceElement instanceof DirectedRelationship && (propertyName.equals(PropertyNames.SUPPLIER) || propertyName.equals(PropertyNames.CLIENT))) {
    if ((newValue != null) && (oldValue == null)) {
      JSONObject specialization=ExportUtility.fillDirectedRelationshipSpecialization((DirectedRelationship)sourceElement,null);
      elementOb=getElementObject(sourceElement);
      elementOb.put(""String_Node_Str"",specialization);
      ExportUtility.fillOwner(sourceElement,elementOb);
    }
  }
 else   if ((sourceElement instanceof Generalization) && ((propertyName.equals(PropertyNames.SPECIFIC)) || (propertyName.equals(PropertyNames.GENERAL)))) {
    if ((newValue != null) && (oldValue == null)) {
      JSONObject specialization=ExportUtility.fillDirectedRelationshipSpecialization((DirectedRelationship)sourceElement,null);
      elementOb=getElementObject(sourceElement);
      elementOb.put(""String_Node_Str"",specialization);
      ExportUtility.fillOwner(sourceElement,elementOb);
    }
  }
 else   if ((moveKeywords.contains(propertyName)) && ExportUtility.shouldAdd(sourceElement)) {
    elementOb=getElementObject(sourceElement);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if (sourceElement instanceof ConnectorEnd && propertyName.equals(PropertyNames.ROLE)) {
    Connector conn=((ConnectorEnd)sourceElement).get_connectorOfEnd();
    elementOb=getElementObject(conn);
    JSONObject specialization=ExportUtility.fillConnectorSpecialization(conn,null);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(conn,elementOb);
  }
 else   if (sourceElement instanceof Association && propertyName.equals(PropertyNames.OWNED_END)) {
    elementOb=getElementObject(sourceElement);
    JSONObject specialization=ExportUtility.fillAssociationSpecialization((Association)sourceElement,null);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if (sourceElement instanceof Property && propertyName.equals(PropertyNames.AGGREGATION)) {
    Association a=((Property)sourceElement).getAssociation();
    if (a != null) {
      elementOb=getElementObject(a);
      JSONObject specialization=ExportUtility.fillAssociationSpecialization(a,null);
      elementOb.put(""String_Node_Str"",specialization);
      ExportUtility.fillOwner(a,elementOb);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void handleChangedProperty(Element sourceElement,String propertyName,Object newValue,Object oldValue){
  JSONObject elementOb=null;
  String elementID=null;
  ArrayList<String> moveKeywords=new ArrayList<String>();
  moveKeywords.add(PropertyNames.OWNING_ASSOCIATION);
  moveKeywords.add(PropertyNames.OWNING_CONSTRAINT);
  moveKeywords.add(PropertyNames.OWNING_ELEMENT);
  moveKeywords.add(PropertyNames.OWNING_EXPRESSION);
  moveKeywords.add(PropertyNames.OWNING_INSTANCE);
  moveKeywords.add(PropertyNames.OWNING_INSTANCE_SPEC);
  moveKeywords.add(PropertyNames.OWNING_LOWER);
  moveKeywords.add(PropertyNames.OWNING_PACKAGE);
  moveKeywords.add(PropertyNames.OWNING_PARAMETER);
  moveKeywords.add(PropertyNames.OWNING_PROPERTY);
  moveKeywords.add(PropertyNames.OWNING_SIGNAL);
  moveKeywords.add(PropertyNames.OWNING_SLOT);
  moveKeywords.add(PropertyNames.OWNING_STATE);
  moveKeywords.add(PropertyNames.OWNING_TEMPLATE_PARAMETER);
  moveKeywords.add(PropertyNames.OWNING_TRANSITION);
  moveKeywords.add(PropertyNames.OWNING_UPPER);
  moveKeywords.add(PropertyNames._U_M_L_CLASS);
  moveKeywords.add(PropertyNames.OWNER);
  if (propertyName.equals(PropertyNames.NAME)) {
    elementOb=getElementObject(sourceElement);
    ExportUtility.fillName(sourceElement,elementOb);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if (sourceElement instanceof Comment && ExportUtility.isElementDocumentation((Comment)sourceElement) && propertyName.equals(PropertyNames.BODY)) {
    Element actual=sourceElement.getOwner();
    elementOb=getElementObject(actual);
    ExportUtility.fillDoc(actual,elementOb);
    ExportUtility.fillOwner(actual,elementOb);
  }
 else   if ((sourceElement instanceof ValueSpecification) && (propertyName.equals(PropertyNames.VALUE)) || (sourceElement instanceof OpaqueExpression) && (propertyName.equals(PropertyNames.BODY)) || (sourceElement instanceof Expression) && (propertyName.equals(PropertyNames.OPERAND))) {
    Element actual=sourceElement.getOwner();
    while (actual instanceof ValueSpecification)     actual=actual.getOwner();
    if (!ExportUtility.shouldAdd(actual))     return;
    elementOb=getElementObject(actual);
    if (actual instanceof Slot || actual instanceof Property) {
      JSONObject specialization=ExportUtility.fillPropertySpecialization(actual,null,true);
      elementOb.put(""String_Node_Str"",specialization);
    }
    if (actual instanceof Constraint) {
      JSONObject specialization=ExportUtility.fillConstraintSpecialization((Constraint)actual,null);
      elementOb.put(""String_Node_Str"",specialization);
    }
    ExportUtility.fillOwner(actual,elementOb);
  }
 else   if ((sourceElement instanceof Property) && (propertyName.equals(PropertyNames.DEFAULT_VALUE) || propertyName.equals(PropertyNames.TYPE))) {
    JSONObject specialization=ExportUtility.fillPropertySpecialization(sourceElement,null,true);
    elementOb=getElementObject(sourceElement);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if ((sourceElement instanceof Slot) && propertyName.equals(PropertyNames.VALUE) && ExportUtility.shouldAdd(sourceElement)) {
    elementOb=getElementObject(sourceElement);
    JSONObject specialization=ExportUtility.fillPropertySpecialization(sourceElement,null,false);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if ((sourceElement instanceof Constraint) && propertyName.equals(PropertyNames.SPECIFICATION)) {
    elementOb=getElementObject(sourceElement);
    JSONObject specialization=ExportUtility.fillConstraintSpecialization((Constraint)sourceElement,null);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if (propertyName.equals(UML2MetamodelConstants.INSTANCE_CREATED) && ExportUtility.shouldAdd(sourceElement)) {
    if (isDiagramCreated(sourceElement))     toRemove.add(ExportUtility.getElementID(sourceElement));
 else {
      elementOb=getElementObject(sourceElement,true);
      ExportUtility.fillElement(sourceElement,elementOb);
    }
  }
 else   if (propertyName.equals(UML2MetamodelConstants.INSTANCE_DELETED) && ExportUtility.shouldAdd(sourceElement)) {
    elementID=ExportUtility.getElementID(sourceElement);
    elements.remove(elementID);
    deletes.add(elementID);
    changedElements.remove(elementID);
    addedElements.remove(elementID);
    if (!auto)     deletedElements.put(elementID,sourceElement);
  }
 else   if (sourceElement instanceof DirectedRelationship && (propertyName.equals(PropertyNames.SUPPLIER) || propertyName.equals(PropertyNames.CLIENT))) {
    if ((newValue != null) && (oldValue == null)) {
      JSONObject specialization=ExportUtility.fillDirectedRelationshipSpecialization((DirectedRelationship)sourceElement,null);
      elementOb=getElementObject(sourceElement);
      elementOb.put(""String_Node_Str"",specialization);
      ExportUtility.fillOwner(sourceElement,elementOb);
    }
  }
 else   if ((sourceElement instanceof Generalization) && ((propertyName.equals(PropertyNames.SPECIFIC)) || (propertyName.equals(PropertyNames.GENERAL)))) {
    if ((newValue != null) && (oldValue == null)) {
      JSONObject specialization=ExportUtility.fillDirectedRelationshipSpecialization((DirectedRelationship)sourceElement,null);
      elementOb=getElementObject(sourceElement);
      elementOb.put(""String_Node_Str"",specialization);
      ExportUtility.fillOwner(sourceElement,elementOb);
    }
  }
 else   if ((moveKeywords.contains(propertyName)) && ExportUtility.shouldAdd(sourceElement)) {
    elementOb=getElementObject(sourceElement);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if (sourceElement instanceof ConnectorEnd && propertyName.equals(PropertyNames.ROLE)) {
    Connector conn=((ConnectorEnd)sourceElement).get_connectorOfEnd();
    elementOb=getElementObject(conn);
    JSONObject specialization=ExportUtility.fillConnectorSpecialization(conn,null);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(conn,elementOb);
  }
 else   if (sourceElement instanceof Association && propertyName.equals(PropertyNames.OWNED_END)) {
    elementOb=getElementObject(sourceElement);
    JSONObject specialization=ExportUtility.fillAssociationSpecialization((Association)sourceElement,null);
    elementOb.put(""String_Node_Str"",specialization);
    ExportUtility.fillOwner(sourceElement,elementOb);
  }
 else   if (sourceElement instanceof Property && propertyName.equals(PropertyNames.AGGREGATION)) {
    Association a=((Property)sourceElement).getAssociation();
    if (a != null) {
      elementOb=getElementObject(a);
      JSONObject specialization=ExportUtility.fillAssociationSpecialization(a,null);
      elementOb.put(""String_Node_Str"",specialization);
      ExportUtility.fillOwner(a,elementOb);
    }
  }
}",0.9937477542220624
88637,"@Override public void run(){
  if (disabled && auto)   return;
  for (  PropertyChangeEvent event : events) {
    String strTmp=""String_Node_Str"";
    if (event != null) {
      strTmp=event.toString();
    }
    Object source=event.getSource();
    if (source instanceof Element) {
      String changedPropertyName=event.getPropertyName();
      if (changedPropertyName == null) {
        continue;
      }
 else {
        if (event.getNewValue() == null && event.getOldValue() == null)         continue;
        if ((event.getNewValue() == null && event.getOldValue() != null) || (event.getNewValue() != null && event.getOldValue() == null) || (!event.getNewValue().equals(event.getOldValue())))         handleChangedProperty((Element)source,changedPropertyName,event.getNewValue(),event.getOldValue());
      }
    }
  }
  for (  String id : toRemove) {
    elements.remove(id);
  }
  if ((!elements.isEmpty() || !deletes.isEmpty()) && auto)   sendChanges();
}","@Override public void run(){
  if (disabled)   return;
  for (  PropertyChangeEvent event : events) {
    String strTmp=""String_Node_Str"";
    if (event != null) {
      strTmp=event.toString();
    }
    Object source=event.getSource();
    if (source instanceof Element) {
      String changedPropertyName=event.getPropertyName();
      if (changedPropertyName == null) {
        continue;
      }
 else {
        if (event.getNewValue() == null && event.getOldValue() == null)         continue;
        if ((event.getNewValue() == null && event.getOldValue() != null) || (event.getNewValue() != null && event.getOldValue() == null) || (!event.getNewValue().equals(event.getOldValue())))         handleChangedProperty((Element)source,changedPropertyName,event.getNewValue(),event.getOldValue());
      }
    }
  }
  for (  String id : toRemove) {
    elements.remove(id);
  }
  if ((!elements.isEmpty() || !deletes.isEmpty()) && auto)   sendChanges();
}",0.9958289885297184
88638,"@SuppressWarnings(""String_Node_Str"") private JSONObject getElementObject(Element e,boolean added){
  JSONObject elementOb=null;
  String elementID=ExportUtility.getElementID(e);
  if (elements.containsKey(elementID)) {
    elementOb=elements.get(elementID);
  }
 else {
    elementOb=new JSONObject();
    elementOb.put(""String_Node_Str"",elementID);
    elements.put(elementID,elementOb);
  }
  if (deletedElements.containsKey(elementID))   deletedElements.remove(elementID);
  if (added)   addedElements.put(elementID,e);
  changedElements.put(elementID,e);
  return elementOb;
}","@SuppressWarnings(""String_Node_Str"") private JSONObject getElementObject(Element e,boolean added){
  JSONObject elementOb=null;
  String elementID=ExportUtility.getElementID(e);
  if (elements.containsKey(elementID)) {
    elementOb=elements.get(elementID);
  }
 else {
    elementOb=new JSONObject();
    elementOb.put(""String_Node_Str"",elementID);
    elements.put(elementID,elementOb);
  }
  if (deletedElements.containsKey(elementID) && !auto)   deletedElements.remove(elementID);
  if (added && !auto)   addedElements.put(elementID,e);
  if (!auto)   changedElements.put(elementID,e);
  return elementOb;
}",0.9739714525608733
88639,"public static Map<String,Set<String>> getJMSChanges(Project project){
  Map<String,Set<String>> changes=new HashMap<String,Set<String>>();
  Set<String> changedIds=new HashSet<String>();
  Set<String> deletedIds=new HashSet<String>();
  Set<String> addedIds=new HashSet<String>();
  changes.put(""String_Node_Str"",changedIds);
  changes.put(""String_Node_Str"",deletedIds);
  changes.put(""String_Node_Str"",addedIds);
  Map<String,Object> projectInstances=ProjectListenerMapping.getInstance().get(project);
  if (projectInstances.containsKey(CONNECTION) || projectInstances.containsKey(SESSION) || projectInstances.containsKey(CONSUMER)) {
    return null;
  }
  String projectID=ExportUtility.getProjectId(project);
  String wsID=ExportUtility.getWorkspace();
  String url=getJMSUrl();
  if (url == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  if (wsID == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  Connection connection=null;
  Session session=null;
  MessageConsumer consumer=null;
  try {
    ConnectionFactory connectionFactory=new ActiveMQConnectionFactory(url);
    String subscriberId=projectID + ""String_Node_Str"" + wsID;
    connection=connectionFactory.createConnection();
    connection.setClientID(subscriberId);
    session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);
    Topic topic=session.createTopic(""String_Node_Str"");
    String messageSelector=constructSelectorString(projectID,wsID);
    consumer=session.createDurableSubscriber(topic,subscriberId,messageSelector,true);
    connection.start();
    Message m=consumer.receiveNoWait();
    while (m != null) {
      TextMessage message=(TextMessage)m;
      log.info(""String_Node_Str"" + message.getText());
      JSONObject ob=(JSONObject)JSONValue.parse(message.getText());
      if (ob.get(""String_Node_Str"") != null && ob.get(""String_Node_Str"").equals(""String_Node_Str"")) {
        m=consumer.receiveNoWait();
        continue;
      }
      JSONObject ws2=(JSONObject)ob.get(""String_Node_Str"");
      final JSONArray updated=(JSONArray)ws2.get(""String_Node_Str"");
      final JSONArray added=(JSONArray)ws2.get(""String_Node_Str"");
      final JSONArray deleted=(JSONArray)ws2.get(""String_Node_Str"");
      final JSONArray moved=(JSONArray)ws2.get(""String_Node_Str"");
      for (      Object e : updated) {
        String id=(String)((JSONObject)e).get(""String_Node_Str"");
        changedIds.add(id);
        deletedIds.remove(id);
      }
      for (      Object e : added) {
        String id=(String)((JSONObject)e).get(""String_Node_Str"");
        addedIds.add(id);
        deletedIds.remove(id);
      }
      for (      Object e : moved) {
        String id=(String)((JSONObject)e).get(""String_Node_Str"");
        changedIds.add(id);
        deletedIds.remove(id);
      }
      for (      Object e : deleted) {
        String id=(String)((JSONObject)e).get(""String_Node_Str"");
        deletedIds.add(id);
        addedIds.remove(id);
        changedIds.remove(id);
      }
      m.acknowledge();
      m=consumer.receiveNoWait();
    }
    return changes;
  }
 catch (  Exception e) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    return null;
  }
 finally {
    try {
      if (consumer != null)       consumer.close();
      if (session != null)       session.close();
      if (connection != null)       connection.close();
    }
 catch (    JMSException e) {
    }
  }
}","public static Map<String,Set<String>> getJMSChanges(Project project){
  Map<String,Set<String>> changes=new HashMap<String,Set<String>>();
  Set<String> changedIds=new HashSet<String>();
  Set<String> deletedIds=new HashSet<String>();
  Set<String> addedIds=new HashSet<String>();
  changes.put(""String_Node_Str"",changedIds);
  changes.put(""String_Node_Str"",deletedIds);
  changes.put(""String_Node_Str"",addedIds);
  Map<String,Object> projectInstances=ProjectListenerMapping.getInstance().get(project);
  if (projectInstances.containsKey(CONNECTION) || projectInstances.containsKey(SESSION) || projectInstances.containsKey(CONSUMER)) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  String projectID=ExportUtility.getProjectId(project);
  String wsID=ExportUtility.getWorkspace();
  String url=getJMSUrl();
  if (url == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  if (wsID == null) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return null;
  }
  Connection connection=null;
  Session session=null;
  MessageConsumer consumer=null;
  try {
    ConnectionFactory connectionFactory=new ActiveMQConnectionFactory(url);
    String subscriberId=projectID + ""String_Node_Str"" + wsID;
    connection=connectionFactory.createConnection();
    connection.setClientID(subscriberId);
    session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);
    Topic topic=session.createTopic(""String_Node_Str"");
    String messageSelector=constructSelectorString(projectID,wsID);
    consumer=session.createDurableSubscriber(topic,subscriberId,messageSelector,true);
    connection.start();
    Message m=consumer.receive(1000);
    while (m != null) {
      TextMessage message=(TextMessage)m;
      log.info(""String_Node_Str"" + message.getText());
      JSONObject ob=(JSONObject)JSONValue.parse(message.getText());
      if (ob.get(""String_Node_Str"") != null && ob.get(""String_Node_Str"").equals(""String_Node_Str"")) {
        m=consumer.receiveNoWait();
        continue;
      }
      JSONObject ws2=(JSONObject)ob.get(""String_Node_Str"");
      final JSONArray updated=(JSONArray)ws2.get(""String_Node_Str"");
      final JSONArray added=(JSONArray)ws2.get(""String_Node_Str"");
      final JSONArray deleted=(JSONArray)ws2.get(""String_Node_Str"");
      final JSONArray moved=(JSONArray)ws2.get(""String_Node_Str"");
      for (      Object e : updated) {
        String id=(String)((JSONObject)e).get(""String_Node_Str"");
        changedIds.add(id);
        deletedIds.remove(id);
      }
      for (      Object e : added) {
        String id=(String)((JSONObject)e).get(""String_Node_Str"");
        addedIds.add(id);
        deletedIds.remove(id);
      }
      for (      Object e : moved) {
        String id=(String)((JSONObject)e).get(""String_Node_Str"");
        changedIds.add(id);
        deletedIds.remove(id);
      }
      for (      Object e : deleted) {
        String id=(String)((JSONObject)e).get(""String_Node_Str"");
        deletedIds.add(id);
        addedIds.remove(id);
        changedIds.remove(id);
      }
      m.acknowledge();
      m=consumer.receive(1000);
    }
    return changes;
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    Application.getInstance().getGUILog().log(""String_Node_Str"" + e.getMessage());
    return null;
  }
 finally {
    try {
      if (consumer != null)       consumer.close();
      if (session != null)       session.close();
      if (connection != null)       connection.close();
    }
 catch (    JMSException e) {
    }
  }
}",0.9823133071308254
88640,"public static void close(Project project,boolean keepDelayedSync){
  Map<String,Object> projectInstances=ProjectListenerMapping.getInstance().get(project);
  if (projectInstances == null)   return;
  AutoSyncCommitListener listener=(AutoSyncCommitListener)projectInstances.remove(LISTENER);
  if (listener != null) {
    if (keepDelayedSync)     listener.setAuto(false);
 else     project.getRepository().getTransactionManager().removeTransactionCommitListener(listener);
  }
  Connection connection=(Connection)projectInstances.remove(CONNECTION);
  Session session=(Session)projectInstances.remove(SESSION);
  MessageConsumer consumer=(MessageConsumer)projectInstances.remove(CONSUMER);
  try {
    if (consumer != null)     consumer.close();
    if (session != null)     session.close();
    if (connection != null)     connection.close();
  }
 catch (  Exception e) {
  }
  Application.getInstance().getGUILog().log(""String_Node_Str"");
}","public static void close(Project project,boolean keepDelayedSync){
  Map<String,Object> projectInstances=ProjectListenerMapping.getInstance().get(project);
  if (projectInstances == null)   return;
  AutoSyncCommitListener listener=(AutoSyncCommitListener)projectInstances.get(LISTENER);
  if (listener != null) {
    if (keepDelayedSync)     listener.setAuto(false);
 else     project.getRepository().getTransactionManager().removeTransactionCommitListener(listener);
  }
  Connection connection=(Connection)projectInstances.remove(CONNECTION);
  Session session=(Session)projectInstances.remove(SESSION);
  MessageConsumer consumer=(MessageConsumer)projectInstances.remove(CONSUMER);
  try {
    if (consumer != null)     consumer.close();
    if (session != null)     session.close();
    if (connection != null)     connection.close();
  }
 catch (  Exception e) {
  }
  Application.getInstance().getGUILog().log(""String_Node_Str"");
}",0.9952102182011708
88641,"@SuppressWarnings(""String_Node_Str"") public static JSONObject fillOwner(Element e,JSONObject einfo){
  JSONObject info=einfo;
  if (info == null) {
    info=new JSONObject();
    info.put(""String_Node_Str"",getElementID(e));
  }
  if (e.getOwner() == null)   info.put(""String_Node_Str"",""String_Node_Str"");
 else   info.put(""String_Node_Str"",""String_Node_Str"" + getElementID(e.getOwner()));
  return info;
}","@SuppressWarnings(""String_Node_Str"") public static JSONObject fillOwner(Element e,JSONObject einfo){
  JSONObject info=einfo;
  if (info == null) {
    info=new JSONObject();
    info.put(""String_Node_Str"",getElementID(e));
  }
  if (e.getOwner() == null)   info.put(""String_Node_Str"",null);
 else   info.put(""String_Node_Str"",""String_Node_Str"" + getElementID(e.getOwner()));
  return info;
}",0.973651191969887
88642,"private ValidationRuleViolation connectorDiff(Connector e,JSONObject info){
  JSONObject webspec=(JSONObject)info.get(""String_Node_Str"");
  Boolean editable=(Boolean)info.get(""String_Node_Str"");
  JSONArray webSourcePropPath=(JSONArray)webspec.get(""String_Node_Str"");
  JSONArray webTargetPropPath=(JSONArray)webspec.get(""String_Node_Str"");
  String webtype=(String)webspec.get(""String_Node_Str"");
  JSONObject modelspec=ExportUtility.fillConnectorSpecialization(e,null);
  JSONArray modelSourcePropPath=(JSONArray)modelspec.get(""String_Node_Str"");
  JSONArray modelTargetPropPath=(JSONArray)modelspec.get(""String_Node_Str"");
  String modeltype=(String)modelspec.get(""String_Node_Str"");
  if (!webSourcePropPath.equals(modelSourcePropPath) || !webTargetPropPath.equals(modelTargetPropPath) || (modeltype != null && !modeltype.equals(webtype) || webtype != null && !webtype.equals(modeltype))) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"");
    if (editable)     v.addAction(new ExportConnector(e));
    v.addAction(new ImportConnector(e,webspec,result));
    return v;
  }
  return null;
}","private ValidationRuleViolation connectorDiff(Connector e,JSONObject info){
  JSONObject webspec=(JSONObject)info.get(""String_Node_Str"");
  Boolean editable=(Boolean)info.get(""String_Node_Str"");
  JSONArray webSourcePropPath=(JSONArray)webspec.get(""String_Node_Str"");
  JSONArray webTargetPropPath=(JSONArray)webspec.get(""String_Node_Str"");
  String webtype=(String)webspec.get(""String_Node_Str"");
  JSONObject modelspec=ExportUtility.fillConnectorSpecialization(e,null);
  JSONArray modelSourcePropPath=(JSONArray)modelspec.get(""String_Node_Str"");
  JSONArray modelTargetPropPath=(JSONArray)modelspec.get(""String_Node_Str"");
  String modeltype=(String)modelspec.get(""String_Node_Str"");
  if (!modelSourcePropPath.equals(webSourcePropPath) || !modelTargetPropPath.equals(webTargetPropPath) || (modeltype != null && !modeltype.equals(webtype) || webtype != null && !webtype.equals(modeltype))) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"");
    if (editable)     v.addAction(new ExportConnector(e));
    v.addAction(new ImportConnector(e,webspec,result));
    return v;
  }
  return null;
}",0.9857651245551602
88643,"private JSONObject getManyAlfrescoElements(Set<Element> es){
  if (es.isEmpty())   return null;
  JSONArray elements=new JSONArray();
  for (  Element e : es) {
    JSONObject ob=new JSONObject();
    ob.put(""String_Node_Str"",ExportUtility.getElementID(e));
    elements.add(ob);
  }
  JSONObject tosend=new JSONObject();
  tosend.put(""String_Node_Str"",elements);
  String url=ExportUtility.getUrlWithWorkspace();
  url+=""String_Node_Str"";
  String response=ExportUtility.getWithBody(url,tosend.toJSONString());
  return (JSONObject)JSONValue.parse(response);
}","private JSONObject getManyAlfrescoElements(Set<Element> es){
  if (es.isEmpty())   return null;
  JSONArray elements=new JSONArray();
  for (  Element e : es) {
    JSONObject ob=new JSONObject();
    ob.put(""String_Node_Str"",ExportUtility.getElementID(e));
    elements.add(ob);
  }
  JSONObject tosend=new JSONObject();
  tosend.put(""String_Node_Str"",elements);
  String url=ExportUtility.getUrlWithWorkspace();
  url+=""String_Node_Str"";
  String response=ExportUtility.getWithBody(url,tosend.toJSONString());
  if (response == null) {
    JSONObject res=new JSONObject();
    res.put(""String_Node_Str"",new JSONArray());
    return res;
  }
  return (JSONObject)JSONValue.parse(response);
}",0.8954509177972865
88644,"private Map<String,Object> valueSpecDiff(ValueSpecification vs,JSONObject firstObject){
  Map<String,Object> result=new HashMap<String,Object>();
  PropertyValueType valueType=PropertyValueType.valueOf((String)firstObject.get(""String_Node_Str""));
  String message=""String_Node_Str"";
  String typeMismatchMessage=""String_Node_Str"";
  String modelString=null;
  String webString=null;
  boolean stringMatch=false;
  if (valueType == PropertyValueType.LiteralString) {
    if (vs instanceof LiteralString) {
      modelString=ExportUtility.cleanHtml(((LiteralString)vs).getValue());
      webString=ExportUtility.cleanHtml((String)firstObject.get(""String_Node_Str""));
      firstObject.put(""String_Node_Str"",webString);
      if (!modelString.equals(webString)) {
        stringMatch=true;
        message=""String_Node_Str"" + truncate(modelString) + ""String_Node_Str""+ truncate(webString);
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.LiteralBoolean) {
    if (vs instanceof LiteralBoolean) {
      if ((Boolean)firstObject.get(""String_Node_Str"") != ((LiteralBoolean)vs).isValue()) {
        message=""String_Node_Str"" + ((LiteralBoolean)vs).isValue() + ""String_Node_Str""+ firstObject.get(""String_Node_Str"");
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.LiteralInteger) {
    if (vs instanceof LiteralInteger) {
      if (((LiteralInteger)vs).getValue() != (Long)firstObject.get(""String_Node_Str"")) {
        message=""String_Node_Str"" + ((LiteralInteger)vs).getValue() + ""String_Node_Str""+ firstObject.get(""String_Node_Str"");
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.LiteralUnlimitedNatural) {
    if (vs instanceof LiteralUnlimitedNatural) {
      if (((LiteralUnlimitedNatural)vs).getValue() != (Long)firstObject.get(""String_Node_Str"")) {
        message=""String_Node_Str"" + ((LiteralUnlimitedNatural)vs).getValue() + ""String_Node_Str""+ firstObject.get(""String_Node_Str"");
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.LiteralReal) {
    if (vs instanceof LiteralReal) {
      Double webValue=null;
      if (firstObject.get(""String_Node_Str"") instanceof Long)       webValue=Double.parseDouble(((Long)firstObject.get(""String_Node_Str"")).toString());
 else       webValue=(Double)firstObject.get(""String_Node_Str"");
      if (((LiteralReal)vs).getValue() != webValue) {
        message=""String_Node_Str"" + ((LiteralReal)vs).getValue() + ""String_Node_Str""+ firstObject.get(""String_Node_Str"");
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.ElementValue) {
    if (vs instanceof ElementValue) {
      if (((ElementValue)vs).getElement() == null || !ExportUtility.getElementID(((ElementValue)vs).getElement()).equals(firstObject.get(""String_Node_Str""))) {
        message=""String_Node_Str"" + ((ElementValue)vs).getElement() + ""String_Node_Str""+ firstObject.get(""String_Node_Str"");
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.InstanceValue) {
    if (vs instanceof InstanceValue) {
      if (((InstanceValue)vs).getInstance() == null || !ExportUtility.getElementID(((InstanceValue)vs).getInstance()).equals(firstObject.get(""String_Node_Str""))) {
        message=""String_Node_Str"" + ((InstanceValue)vs).getInstance() + ""String_Node_Str""+ firstObject.get(""String_Node_Str"");
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.Expression) {
    if (vs instanceof Expression) {
      JSONObject model=ExportUtility.fillValueSpecification(vs,null);
      if (!model.equals(firstObject))       message=""String_Node_Str"";
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else {
  }
  result.put(""String_Node_Str"",message);
  result.put(""String_Node_Str"",webString);
  result.put(""String_Node_Str"",modelString);
  result.put(""String_Node_Str"",stringMatch);
  return result;
}","private Map<String,Object> valueSpecDiff(ValueSpecification vs,JSONObject firstObject){
  Map<String,Object> result=new HashMap<String,Object>();
  PropertyValueType valueType=PropertyValueType.valueOf((String)firstObject.get(""String_Node_Str""));
  String message=""String_Node_Str"";
  String typeMismatchMessage=""String_Node_Str"";
  String modelString=null;
  String webString=null;
  boolean stringMatch=false;
  if (valueType == PropertyValueType.LiteralString) {
    if (vs instanceof LiteralString) {
      modelString=ExportUtility.cleanHtml(((LiteralString)vs).getValue());
      webString=ExportUtility.cleanHtml((String)firstObject.get(""String_Node_Str""));
      firstObject.put(""String_Node_Str"",webString);
      if (!modelString.equals(webString)) {
        stringMatch=true;
        message=""String_Node_Str"" + truncate(modelString) + ""String_Node_Str""+ truncate(webString);
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.LiteralBoolean) {
    if (vs instanceof LiteralBoolean) {
      if ((Boolean)firstObject.get(""String_Node_Str"") != ((LiteralBoolean)vs).isValue()) {
        message=""String_Node_Str"" + ((LiteralBoolean)vs).isValue() + ""String_Node_Str""+ firstObject.get(""String_Node_Str"");
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.LiteralInteger) {
    if (vs instanceof LiteralInteger) {
      if (((LiteralInteger)vs).getValue() != (Long)firstObject.get(""String_Node_Str"")) {
        message=""String_Node_Str"" + ((LiteralInteger)vs).getValue() + ""String_Node_Str""+ firstObject.get(""String_Node_Str"");
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.LiteralUnlimitedNatural) {
    if (vs instanceof LiteralUnlimitedNatural) {
      if (((LiteralUnlimitedNatural)vs).getValue() != (Long)firstObject.get(""String_Node_Str"")) {
        message=""String_Node_Str"" + ((LiteralUnlimitedNatural)vs).getValue() + ""String_Node_Str""+ firstObject.get(""String_Node_Str"");
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.LiteralReal) {
    if (vs instanceof LiteralReal) {
      Double webValue=null;
      if (firstObject.get(""String_Node_Str"") instanceof Long)       webValue=Double.parseDouble(((Long)firstObject.get(""String_Node_Str"")).toString());
 else       webValue=(Double)firstObject.get(""String_Node_Str"");
      if (((LiteralReal)vs).getValue() != webValue) {
        message=""String_Node_Str"" + ((LiteralReal)vs).getValue() + ""String_Node_Str""+ firstObject.get(""String_Node_Str"");
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.ElementValue) {
    if (vs instanceof ElementValue) {
      if (((ElementValue)vs).getElement() == null || !ExportUtility.getElementID(((ElementValue)vs).getElement()).equals(firstObject.get(""String_Node_Str""))) {
        message=""String_Node_Str"" + ((ElementValue)vs).getElement().getHumanName() + ""String_Node_Str""+ firstObject.get(""String_Node_Str"");
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.InstanceValue) {
    if (vs instanceof InstanceValue) {
      if (((InstanceValue)vs).getInstance() == null || !ExportUtility.getElementID(((InstanceValue)vs).getInstance()).equals(firstObject.get(""String_Node_Str""))) {
        message=""String_Node_Str"" + ((InstanceValue)vs).getInstance().getHumanName() + ""String_Node_Str""+ firstObject.get(""String_Node_Str"");
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.Expression) {
    if (vs instanceof Expression) {
      JSONObject model=ExportUtility.fillValueSpecification(vs,null);
      if (!model.equals(firstObject))       message=""String_Node_Str"";
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else {
  }
  result.put(""String_Node_Str"",message);
  result.put(""String_Node_Str"",webString);
  result.put(""String_Node_Str"",modelString);
  result.put(""String_Node_Str"",stringMatch);
  return result;
}",0.9963750604156596
88645,"private ValidationRuleViolation siteDiff(Package e,JSONObject elementInfo){
  JSONObject model=ExportUtility.fillPackage(e,null);
  Boolean serversite=(Boolean)((JSONObject)elementInfo.get(""String_Node_Str"")).get(""String_Node_Str"");
  Boolean modelsite=(Boolean)model.get(""String_Node_Str"");
  if (!serversite && modelsite || serversite && !modelsite) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + modelsite + ""String_Node_Str""+ serversite);
    v.addAction(new ExportSite(e));
    return v;
  }
  return null;
}","private ValidationRuleViolation siteDiff(Package e,JSONObject elementInfo){
  JSONObject model=ExportUtility.fillPackage(e,null);
  Boolean serverSite=(Boolean)((JSONObject)elementInfo.get(""String_Node_Str"")).get(""String_Node_Str"");
  boolean serversite=false;
  if (serverSite != null && serverSite)   serversite=true;
  boolean modelsite=(Boolean)model.get(""String_Node_Str"");
  if (!serversite && modelsite || serversite && !modelsite) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + modelsite + ""String_Node_Str""+ serversite);
    v.addAction(new ExportSite(e));
    return v;
  }
  return null;
}",0.9230769230769232
88646,"@SuppressWarnings(""String_Node_Str"") private void handleChangedProperty(Element sourceElement,String propertyName,Object newValue,Object oldValue){
  JSONObject elementOb=null;
  String elementID=null;
  ArrayList<String> moveKeywords=new ArrayList<String>();
  moveKeywords.add(PropertyNames.OWNING_ASSOCIATION);
  moveKeywords.add(PropertyNames.OWNING_CONSTRAINT);
  moveKeywords.add(PropertyNames.OWNING_ELEMENT);
  moveKeywords.add(PropertyNames.OWNING_EXPRESSION);
  moveKeywords.add(PropertyNames.OWNING_INSTANCE);
  moveKeywords.add(PropertyNames.OWNING_INSTANCE_SPEC);
  moveKeywords.add(PropertyNames.OWNING_LOWER);
  moveKeywords.add(PropertyNames.OWNING_PACKAGE);
  moveKeywords.add(PropertyNames.OWNING_PARAMETER);
  moveKeywords.add(PropertyNames.OWNING_PROPERTY);
  moveKeywords.add(PropertyNames.OWNING_SIGNAL);
  moveKeywords.add(PropertyNames.OWNING_SLOT);
  moveKeywords.add(PropertyNames.OWNING_STATE);
  moveKeywords.add(PropertyNames.OWNING_TEMPLATE_PARAMETER);
  moveKeywords.add(PropertyNames.OWNING_TRANSITION);
  moveKeywords.add(PropertyNames.OWNING_UPPER);
  moveKeywords.add(PropertyNames._U_M_L_CLASS);
  moveKeywords.add(PropertyNames.OWNER);
  if (propertyName.equals(PropertyNames.NAME)) {
    elementID=ExportUtility.getElementID(sourceElement);
    if (elements.containsKey(elementID)) {
      elementOb=elements.get(elementID);
    }
 else {
      elementOb=new JSONObject();
      elementOb.put(""String_Node_Str"",elementID);
      elements.put(elementID,elementOb);
    }
    elementOb.put(""String_Node_Str"",newValue);
  }
 else   if (sourceElement instanceof Comment && ExportUtility.isElementDocumentation((Comment)sourceElement) && propertyName.equals(PropertyNames.BODY)) {
    Element actual=sourceElement.getOwner();
    if (elements.containsKey(ExportUtility.getElementID(actual))) {
      elementOb=elements.get(ExportUtility.getElementID(sourceElement));
    }
 else {
      elementOb=new JSONObject();
      elementOb.put(""String_Node_Str"",ExportUtility.getElementID(actual));
      elements.put(ExportUtility.getElementID(actual),elementOb);
    }
    elementOb.put(""String_Node_Str"",Utils.stripHtmlWrapper(ModelHelper.getComment(actual)));
  }
 else   if ((sourceElement instanceof ValueSpecification) && (propertyName.equals(PropertyNames.VALUE))) {
    Element actual=sourceElement.getOwner();
    while (actual instanceof ValueSpecification)     actual=actual.getOwner();
    if (actual != null)     elementID=ExportUtility.getElementID(actual);
 else     elementID=ExportUtility.getElementID(sourceElement);
    JSONObject specialization=new JSONObject();
    if (actual instanceof Property) {
      specialization.put(""String_Node_Str"",""String_Node_Str"");
      specialization.put(""String_Node_Str"",((Property)actual).isDerived());
      specialization.put(""String_Node_Str"",false);
      ValueSpecification vs=((Property)actual).getDefaultValue();
      JSONArray singleElementSpecVsArray=new JSONArray();
      if (vs != null) {
        JSONObject newElement=new JSONObject();
        ExportUtility.fillValueSpecification(vs,newElement,null,null);
        singleElementSpecVsArray.add(newElement);
      }
      specialization.put(""String_Node_Str"",singleElementSpecVsArray);
    }
 else     if (actual instanceof Slot) {
      specialization.put(""String_Node_Str"",""String_Node_Str"");
      if (((Slot)actual).getDefiningFeature().getID().equals(""String_Node_Str""))       specialization.put(""String_Node_Str"",true);
      List<ValueSpecification> vsl=((Slot)actual).getValue();
      JSONArray specVsArray=new JSONArray();
      if (vsl != null && vsl.size() > 0) {
        for (        ValueSpecification vs : vsl) {
          JSONObject newElement=new JSONObject();
          ExportUtility.fillValueSpecification(vs,newElement,null,null);
          specVsArray.add(newElement);
        }
      }
      specialization.put(""String_Node_Str"",specVsArray);
    }
 else     return;
    if (elements.containsKey(elementID)) {
      elementOb=elements.get(elementID);
      elementOb.put(""String_Node_Str"",specialization);
    }
 else {
      elementOb=new JSONObject();
      elementOb.put(""String_Node_Str"",ExportUtility.getElementID(actual));
      elementOb.put(""String_Node_Str"",specialization);
      elements.put(ExportUtility.getElementID(actual),elementOb);
    }
  }
 else   if ((sourceElement instanceof Property) && propertyName.equals(PropertyNames.DEFAULT_VALUE)) {
    elementID=ExportUtility.getElementID(sourceElement);
    ValueSpecification vs=((Property)sourceElement).getDefaultValue();
    if (vs != null) {
      JSONObject jsonObj=new JSONObject();
      JSONArray value=new JSONArray();
      JSONObject specialization=new JSONObject();
      elementOb=new JSONObject();
      specialization.put(""String_Node_Str"",value);
      specialization.put(""String_Node_Str"",""String_Node_Str"");
      ExportUtility.fillValueSpecification(vs,jsonObj,null,null);
      value.add(jsonObj);
      elementOb.put(""String_Node_Str"",specialization);
      elementOb.put(""String_Node_Str"",elementID);
      elements.put(elementID,elementOb);
    }
  }
 else   if ((sourceElement instanceof Slot) && propertyName.equals(PropertyNames.VALUE)) {
    JSONObject specialization=new JSONObject();
    JSONArray value=new JSONArray();
    List<ValueSpecification> vsl=((Slot)sourceElement).getValue();
    elementOb=new JSONObject();
    elementID=ExportUtility.getElementID(sourceElement);
    if (vsl != null && vsl.size() > 0) {
      specialization.put(""String_Node_Str"",value);
      specialization.put(""String_Node_Str"",""String_Node_Str"");
      for (      ValueSpecification vs : vsl) {
        JSONObject jsonObj=new JSONObject();
        ExportUtility.fillValueSpecification(vs,jsonObj,null,null);
        value.add(jsonObj);
      }
      elementOb.put(""String_Node_Str"",specialization);
      elementOb.put(""String_Node_Str"",elementID);
      elements.put(elementID,elementOb);
    }
  }
 else   if (propertyName.equals(UML2MetamodelConstants.INSTANCE_CREATED) && ExportUtility.shouldAdd(sourceElement)) {
    elementID=ExportUtility.getElementID(sourceElement);
    if (elements.containsKey(elementID)) {
      elementOb=elements.get(elementID);
    }
 else {
      elementOb=new JSONObject();
      elementOb.put(""String_Node_Str"",elementID);
      elements.put(elementID,elementOb);
    }
    ExportUtility.fillElement(sourceElement,elementOb,null,null);
  }
 else   if (propertyName.equals(UML2MetamodelConstants.INSTANCE_DELETED)) {
    elementID=ExportUtility.getElementID(sourceElement);
    if (elements.containsKey(elementID))     elements.remove(elementID);
  }
 else   if (propertyName.equals(PropertyNames.SUPPLIER)) {
    if ((newValue != null) && (oldValue == null)) {
      JSONObject specialization=new JSONObject();
      elementID=ExportUtility.getElementID(sourceElement);
      if (elements.containsKey(elementID)) {
        elementOb=elements.get(elementID);
      }
 else {
        elementOb=new JSONObject();
        elementOb.put(""String_Node_Str"",elementID);
        elements.put(elementID,elementOb);
      }
      Element client=ModelHelper.getClientElement(sourceElement);
      Element supplier=ModelHelper.getSupplierElement(sourceElement);
      specialization.put(""String_Node_Str"",client.getID());
      specialization.put(""String_Node_Str"",supplier.getID());
      elementOb.put(""String_Node_Str"",specialization);
      elementOb.put(""String_Node_Str"",elementID);
      elements.put(elementID,elementOb);
    }
  }
 else   if (propertyName.equals(PropertyNames.CLIENT)) {
    if ((newValue != null) && (oldValue == null)) {
      JSONObject specialization=new JSONObject();
      elementID=ExportUtility.getElementID(sourceElement);
      if (elements.containsKey(elementID)) {
        elementOb=elements.get(elementID);
      }
 else {
        elementOb=new JSONObject();
        elementOb.put(""String_Node_Str"",elementID);
        elements.put(elementID,elementOb);
      }
      Element client=ModelHelper.getClientElement(sourceElement);
      Element supplier=ModelHelper.getSupplierElement(sourceElement);
      specialization.put(""String_Node_Str"",client.getID());
      specialization.put(""String_Node_Str"",supplier.getID());
      elementOb.put(""String_Node_Str"",specialization);
      elementOb.put(""String_Node_Str"",elementID);
      elements.put(elementID,elementOb);
    }
  }
 else   if ((sourceElement instanceof Generalization) && ((propertyName.equals(PropertyNames.SPECIFIC)) || (propertyName.equals(PropertyNames.GENERAL)))) {
    if ((newValue != null) && (oldValue == null)) {
      JSONObject specialization=new JSONObject();
      elementID=ExportUtility.getElementID(sourceElement);
      if (elements.containsKey(elementID)) {
        elementOb=elements.get(elementID);
      }
 else {
        elementOb=new JSONObject();
        elementOb.put(""String_Node_Str"",elementID);
        elements.put(elementID,elementOb);
      }
      boolean isConform=StereotypesHelper.hasStereotypeOrDerived(sourceElement,DocGen3Profile.conformStereotype);
      if (isConform)       specialization.put(""String_Node_Str"",""String_Node_Str"");
 else       if (StereotypesHelper.hasStereotypeOrDerived(sourceElement,DocGen3Profile.queriesStereotype))       specialization.put(""String_Node_Str"",""String_Node_Str"");
 else       specialization.put(""String_Node_Str"",""String_Node_Str"");
      Element client=ModelHelper.getClientElement(sourceElement);
      Element supplier=ModelHelper.getSupplierElement(sourceElement);
      specialization.put(""String_Node_Str"",client.getID());
      specialization.put(""String_Node_Str"",supplier.getID());
      elementOb.put(""String_Node_Str"",specialization);
      elementOb.put(""String_Node_Str"",elementID);
      elements.put(elementID,elementOb);
    }
  }
 else   if ((moveKeywords.contains(propertyName)) && ExportUtility.shouldAdd(sourceElement)) {
    if (elements.containsKey(elementID)) {
      elementOb=elements.get(elementID);
    }
 else {
      elementOb=new JSONObject();
      elementOb.put(""String_Node_Str"",elementID);
      elements.put(elementID,elementOb);
    }
    elementID=ExportUtility.getElementID(sourceElement);
    elementOb.put(""String_Node_Str"",elementID);
    if (sourceElement.getOwner() == null)     elementOb.put(""String_Node_Str"",""String_Node_Str"");
 else     if (sourceElement.getOwner() == Application.getInstance().getProject().getModel())     elementOb.put(""String_Node_Str"",Application.getInstance().getProject().getPrimaryProject().getProjectID());
 else     elementOb.put(""String_Node_Str"",""String_Node_Str"" + sourceElement.getOwner().getID());
  }
}","@SuppressWarnings(""String_Node_Str"") private void handleChangedProperty(Element sourceElement,String propertyName,Object newValue,Object oldValue){
  JSONObject elementOb=null;
  String elementID=null;
  ArrayList<String> moveKeywords=new ArrayList<String>();
  moveKeywords.add(PropertyNames.OWNING_ASSOCIATION);
  moveKeywords.add(PropertyNames.OWNING_CONSTRAINT);
  moveKeywords.add(PropertyNames.OWNING_ELEMENT);
  moveKeywords.add(PropertyNames.OWNING_EXPRESSION);
  moveKeywords.add(PropertyNames.OWNING_INSTANCE);
  moveKeywords.add(PropertyNames.OWNING_INSTANCE_SPEC);
  moveKeywords.add(PropertyNames.OWNING_LOWER);
  moveKeywords.add(PropertyNames.OWNING_PACKAGE);
  moveKeywords.add(PropertyNames.OWNING_PARAMETER);
  moveKeywords.add(PropertyNames.OWNING_PROPERTY);
  moveKeywords.add(PropertyNames.OWNING_SIGNAL);
  moveKeywords.add(PropertyNames.OWNING_SLOT);
  moveKeywords.add(PropertyNames.OWNING_STATE);
  moveKeywords.add(PropertyNames.OWNING_TEMPLATE_PARAMETER);
  moveKeywords.add(PropertyNames.OWNING_TRANSITION);
  moveKeywords.add(PropertyNames.OWNING_UPPER);
  moveKeywords.add(PropertyNames._U_M_L_CLASS);
  moveKeywords.add(PropertyNames.OWNER);
  if (propertyName.equals(PropertyNames.NAME)) {
    elementID=ExportUtility.getElementID(sourceElement);
    if (elements.containsKey(elementID)) {
      elementOb=elements.get(elementID);
    }
 else {
      elementOb=new JSONObject();
      elementOb.put(""String_Node_Str"",elementID);
      elements.put(elementID,elementOb);
    }
    elementOb.put(""String_Node_Str"",newValue);
  }
 else   if (sourceElement instanceof Comment && ExportUtility.isElementDocumentation((Comment)sourceElement) && propertyName.equals(PropertyNames.BODY)) {
    Element actual=sourceElement.getOwner();
    if (elements.containsKey(ExportUtility.getElementID(actual))) {
      elementOb=elements.get(ExportUtility.getElementID(actual));
    }
 else {
      elementOb=new JSONObject();
      elementOb.put(""String_Node_Str"",ExportUtility.getElementID(actual));
      elements.put(ExportUtility.getElementID(actual),elementOb);
    }
    elementOb.put(""String_Node_Str"",Utils.stripHtmlWrapper(ModelHelper.getComment(actual)));
  }
 else   if ((sourceElement instanceof ValueSpecification) && (propertyName.equals(PropertyNames.VALUE))) {
    Element actual=sourceElement.getOwner();
    while (actual instanceof ValueSpecification)     actual=actual.getOwner();
    if (actual != null)     elementID=ExportUtility.getElementID(actual);
 else     elementID=ExportUtility.getElementID(sourceElement);
    JSONObject specialization=new JSONObject();
    if (actual instanceof Property) {
      specialization.put(""String_Node_Str"",""String_Node_Str"");
      specialization.put(""String_Node_Str"",((Property)actual).isDerived());
      specialization.put(""String_Node_Str"",false);
      ValueSpecification vs=((Property)actual).getDefaultValue();
      JSONArray singleElementSpecVsArray=new JSONArray();
      if (vs != null) {
        JSONObject newElement=new JSONObject();
        ExportUtility.fillValueSpecification(vs,newElement,null,null);
        singleElementSpecVsArray.add(newElement);
      }
      specialization.put(""String_Node_Str"",singleElementSpecVsArray);
    }
 else     if (actual instanceof Slot) {
      specialization.put(""String_Node_Str"",""String_Node_Str"");
      if (((Slot)actual).getDefiningFeature().getID().equals(""String_Node_Str""))       specialization.put(""String_Node_Str"",true);
      List<ValueSpecification> vsl=((Slot)actual).getValue();
      JSONArray specVsArray=new JSONArray();
      if (vsl != null && vsl.size() > 0) {
        for (        ValueSpecification vs : vsl) {
          JSONObject newElement=new JSONObject();
          ExportUtility.fillValueSpecification(vs,newElement,null,null);
          specVsArray.add(newElement);
        }
      }
      specialization.put(""String_Node_Str"",specVsArray);
    }
 else     return;
    if (elements.containsKey(elementID)) {
      elementOb=elements.get(elementID);
      elementOb.put(""String_Node_Str"",specialization);
    }
 else {
      elementOb=new JSONObject();
      elementOb.put(""String_Node_Str"",ExportUtility.getElementID(actual));
      elementOb.put(""String_Node_Str"",specialization);
      elements.put(ExportUtility.getElementID(actual),elementOb);
    }
  }
 else   if ((sourceElement instanceof Property) && propertyName.equals(PropertyNames.DEFAULT_VALUE)) {
    elementID=ExportUtility.getElementID(sourceElement);
    ValueSpecification vs=((Property)sourceElement).getDefaultValue();
    if (vs != null) {
      JSONObject jsonObj=new JSONObject();
      JSONArray value=new JSONArray();
      JSONObject specialization=new JSONObject();
      elementOb=new JSONObject();
      specialization.put(""String_Node_Str"",value);
      specialization.put(""String_Node_Str"",""String_Node_Str"");
      ExportUtility.fillValueSpecification(vs,jsonObj,null,null);
      value.add(jsonObj);
      elementOb.put(""String_Node_Str"",specialization);
      elementOb.put(""String_Node_Str"",elementID);
      elements.put(elementID,elementOb);
    }
  }
 else   if ((sourceElement instanceof Slot) && propertyName.equals(PropertyNames.VALUE)) {
    JSONObject specialization=new JSONObject();
    JSONArray value=new JSONArray();
    List<ValueSpecification> vsl=((Slot)sourceElement).getValue();
    elementOb=new JSONObject();
    elementID=ExportUtility.getElementID(sourceElement);
    if (vsl != null && vsl.size() > 0) {
      specialization.put(""String_Node_Str"",value);
      specialization.put(""String_Node_Str"",""String_Node_Str"");
      for (      ValueSpecification vs : vsl) {
        JSONObject jsonObj=new JSONObject();
        ExportUtility.fillValueSpecification(vs,jsonObj,null,null);
        value.add(jsonObj);
      }
      elementOb.put(""String_Node_Str"",specialization);
      elementOb.put(""String_Node_Str"",elementID);
      elements.put(elementID,elementOb);
    }
  }
 else   if (propertyName.equals(UML2MetamodelConstants.INSTANCE_CREATED) && ExportUtility.shouldAdd(sourceElement)) {
    elementID=ExportUtility.getElementID(sourceElement);
    if (elements.containsKey(elementID)) {
      elementOb=elements.get(elementID);
    }
 else {
      elementOb=new JSONObject();
      elementOb.put(""String_Node_Str"",elementID);
      elements.put(elementID,elementOb);
    }
    ExportUtility.fillElement(sourceElement,elementOb,null,null);
  }
 else   if (propertyName.equals(UML2MetamodelConstants.INSTANCE_DELETED)) {
    elementID=ExportUtility.getElementID(sourceElement);
    if (elements.containsKey(elementID))     elements.remove(elementID);
  }
 else   if (propertyName.equals(PropertyNames.SUPPLIER)) {
    if ((newValue != null) && (oldValue == null)) {
      JSONObject specialization=new JSONObject();
      elementID=ExportUtility.getElementID(sourceElement);
      if (elements.containsKey(elementID)) {
        elementOb=elements.get(elementID);
      }
 else {
        elementOb=new JSONObject();
        elementOb.put(""String_Node_Str"",elementID);
        elements.put(elementID,elementOb);
      }
      Element client=ModelHelper.getClientElement(sourceElement);
      Element supplier=ModelHelper.getSupplierElement(sourceElement);
      specialization.put(""String_Node_Str"",client.getID());
      specialization.put(""String_Node_Str"",supplier.getID());
      elementOb.put(""String_Node_Str"",specialization);
      elementOb.put(""String_Node_Str"",elementID);
      elements.put(elementID,elementOb);
    }
  }
 else   if (propertyName.equals(PropertyNames.CLIENT)) {
    if ((newValue != null) && (oldValue == null)) {
      JSONObject specialization=new JSONObject();
      elementID=ExportUtility.getElementID(sourceElement);
      if (elements.containsKey(elementID)) {
        elementOb=elements.get(elementID);
      }
 else {
        elementOb=new JSONObject();
        elementOb.put(""String_Node_Str"",elementID);
        elements.put(elementID,elementOb);
      }
      Element client=ModelHelper.getClientElement(sourceElement);
      Element supplier=ModelHelper.getSupplierElement(sourceElement);
      specialization.put(""String_Node_Str"",client.getID());
      specialization.put(""String_Node_Str"",supplier.getID());
      elementOb.put(""String_Node_Str"",specialization);
      elementOb.put(""String_Node_Str"",elementID);
      elements.put(elementID,elementOb);
    }
  }
 else   if ((sourceElement instanceof Generalization) && ((propertyName.equals(PropertyNames.SPECIFIC)) || (propertyName.equals(PropertyNames.GENERAL)))) {
    if ((newValue != null) && (oldValue == null)) {
      JSONObject specialization=new JSONObject();
      elementID=ExportUtility.getElementID(sourceElement);
      if (elements.containsKey(elementID)) {
        elementOb=elements.get(elementID);
      }
 else {
        elementOb=new JSONObject();
        elementOb.put(""String_Node_Str"",elementID);
        elements.put(elementID,elementOb);
      }
      boolean isConform=StereotypesHelper.hasStereotypeOrDerived(sourceElement,DocGen3Profile.conformStereotype);
      if (isConform)       specialization.put(""String_Node_Str"",""String_Node_Str"");
 else       if (StereotypesHelper.hasStereotypeOrDerived(sourceElement,DocGen3Profile.queriesStereotype))       specialization.put(""String_Node_Str"",""String_Node_Str"");
 else       specialization.put(""String_Node_Str"",""String_Node_Str"");
      Element client=ModelHelper.getClientElement(sourceElement);
      Element supplier=ModelHelper.getSupplierElement(sourceElement);
      specialization.put(""String_Node_Str"",client.getID());
      specialization.put(""String_Node_Str"",supplier.getID());
      elementOb.put(""String_Node_Str"",specialization);
      elementOb.put(""String_Node_Str"",elementID);
      elements.put(elementID,elementOb);
    }
  }
 else   if ((moveKeywords.contains(propertyName)) && ExportUtility.shouldAdd(sourceElement)) {
    if (elements.containsKey(elementID)) {
      elementOb=elements.get(elementID);
    }
 else {
      elementOb=new JSONObject();
      elementOb.put(""String_Node_Str"",elementID);
      elements.put(elementID,elementOb);
    }
    elementID=ExportUtility.getElementID(sourceElement);
    elementOb.put(""String_Node_Str"",elementID);
    if (sourceElement.getOwner() == null)     elementOb.put(""String_Node_Str"",""String_Node_Str"");
 else     if (sourceElement.getOwner() == Application.getInstance().getProject().getModel())     elementOb.put(""String_Node_Str"",Application.getInstance().getProject().getPrimaryProject().getProjectID());
 else     elementOb.put(""String_Node_Str"",""String_Node_Str"" + sourceElement.getOwner().getID());
  }
}",0.9991058402748364
88647,"public Section parseView(Element view){
  Element viewpoint=GeneratorUtils.findStereotypedRelationship(view,conforms);
  if (viewpoint == null)   viewpoint=GeneratorUtils.findStereotypedRelationship(view,sysml14conforms);
  Section viewSection=new Section();
  viewSection.setView(true);
  if (StereotypesHelper.hasStereotype(view,DocGen3Profile.appendixViewStereotype))   viewSection.isAppendix(true);
  if (viewpoint != null && viewpoint instanceof Class) {
    if (!(view instanceof Diagram)) {
      String viewDoc=ModelHelper.getComment(view);
      if (viewDoc != null) {
        Paragraph para=new Paragraph(viewDoc);
        para.setDgElement(view);
        para.setFrom(From.DOCUMENTATION);
        viewSection.addElement(para);
      }
    }
    Collection<Behavior> viewpointBehavior=((Class)viewpoint).getOwnedBehavior();
    Behavior b=null;
    if (viewpointBehavior.size() > 0)     b=viewpointBehavior.iterator().next();
 else {
      Class now=(Class)viewpoint;
      while (now != null) {
        if (!now.getSuperClass().isEmpty()) {
          now=now.getSuperClass().iterator().next();
          if (now.getOwnedBehavior().size() > 0) {
            b=now.getOwnedBehavior().iterator().next();
            break;
          }
        }
 else {
          now=null;
        }
      }
    }
    if (b != null) {
      Boolean addVPElements=(Boolean)GeneratorUtils.getObjectProperty(b,DocGen3Profile.methodStereotype,""String_Node_Str"",false);
      ;
      List<Element> elementImports=Utils.collectDirectedRelatedElementsByRelationshipJavaClass(view,ElementImport.class,1,1);
      List<Element> packageImports=Utils.collectDirectedRelatedElementsByRelationshipJavaClass(view,PackageImport.class,1,1);
      List<Element> expose=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(view,DocGen3Profile.queriesStereotype,1,false,1);
      List<Element> queries=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(view,DocGen3Profile.oldQueriesStereotype,1,false,1);
      if (elementImports == null)       elementImports=new ArrayList<Element>();
      if (packageImports != null)       elementImports.addAll(packageImports);
      if (expose != null)       elementImports.addAll(expose);
      if (queries != null)       elementImports.addAll(queries);
      if (view instanceof Class) {
        for (        TypedElement te : ((Class)view).get_typedElementOfType()) {
          if (te instanceof Property && ((Property)te).getAggregation() == AggregationKindEnum.COMPOSITE) {
            elementImports.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(te,DocGen3Profile.queriesStereotype,1,false,1));
          }
        }
      }
      if (elementImports.isEmpty())       elementImports.add(view);
      if (addVPElements) {
        elementImports.add(viewpoint);
        elementImports.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(viewpoint,""String_Node_Str"",1,false,1));
        elementImports.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(viewpoint,""String_Node_Str"",1,false,1));
        elementImports.add(b);
        elementImports.add(view);
      }
      context.pushTargets(Utils2.asList(Utils.removeDuplicates(elementImports),Object.class));
      if (b instanceof Activity) {
        parseActivityOrStructuredNode(b,viewSection);
      }
      context.popTargets();
    }
  }
 else {
    List<Element> expose=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(view,DocGen3Profile.queriesStereotype,1,false,1);
    if (view instanceof Class) {
      for (      TypedElement te : ((Class)view).get_typedElementOfType()) {
        if (te instanceof Property && ((Property)te).getAggregation() == AggregationKindEnum.COMPOSITE) {
          expose.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(te,DocGen3Profile.queriesStereotype,1,false,1));
        }
      }
    }
    if (view instanceof Class && expose.size() == 1 && StereotypesHelper.hasStereotypeOrDerived(expose.get(0),sysmlview)) {
      return parseView(expose.get(0));
    }
    if (view instanceof Diagram) {
      Image image=new Image();
      List<Object> images=new ArrayList<Object>();
      images.add(view);
      image.setTargets(images);
      String caption=(String)StereotypesHelper.getStereotypePropertyFirst(view,DocGen3Profile.dgviewStereotype,""String_Node_Str"");
      if (caption == null)       caption=(String)StereotypesHelper.getStereotypePropertyFirst(view,DocGen3Profile.oldDgviewStereotype,""String_Node_Str"");
      List<String> captions=new ArrayList<String>();
      captions.add(caption);
      image.setCaptions(captions);
      image.setShowCaptions(true);
      viewSection.addElement(image);
    }
 else {
      String viewDoc=ModelHelper.getComment(view);
      if (viewDoc != null) {
        Paragraph para=new Paragraph(viewDoc);
        if ((Boolean)GeneratorUtils.getObjectProperty(view,DocGen3Profile.editableChoosable,""String_Node_Str"",true)) {
          para.setDgElement(view);
          para.setFrom(From.DOCUMENTATION);
        }
        viewSection.addElement(para);
      }
    }
  }
  viewSection.setDgElement(view);
  viewSection.setId(view.getID());
  viewSection.setTitle(((NamedElement)view).getName());
  return viewSection;
}","public Section parseView(Element view){
  Element viewpoint=GeneratorUtils.findStereotypedRelationship(view,conforms);
  if (viewpoint == null)   viewpoint=GeneratorUtils.findStereotypedRelationship(view,sysml14conforms);
  Section viewSection=new Section();
  viewSection.setView(true);
  if (StereotypesHelper.hasStereotype(view,DocGen3Profile.appendixViewStereotype))   viewSection.isAppendix(true);
  if (viewpoint != null && viewpoint instanceof Class) {
    if (!(view instanceof Diagram)) {
      String viewDoc=ModelHelper.getComment(view);
      if (viewDoc != null) {
        Paragraph para=new Paragraph(viewDoc);
        para.setDgElement(view);
        para.setFrom(From.DOCUMENTATION);
        viewSection.addElement(para);
      }
    }
    Collection<Behavior> viewpointBehavior=((Class)viewpoint).getOwnedBehavior();
    Behavior b=null;
    if (viewpointBehavior.size() > 0)     b=viewpointBehavior.iterator().next();
 else {
      Class now=(Class)viewpoint;
      while (now != null) {
        if (!now.getSuperClass().isEmpty()) {
          now=now.getSuperClass().iterator().next();
          if (now.getOwnedBehavior().size() > 0) {
            b=now.getOwnedBehavior().iterator().next();
            break;
          }
        }
 else {
          now=null;
        }
      }
    }
    if (b != null) {
      Boolean addVPElements=(Boolean)GeneratorUtils.getObjectProperty(b,DocGen3Profile.methodStereotype,""String_Node_Str"",false);
      ;
      List<Element> elementImports=Utils.collectDirectedRelatedElementsByRelationshipJavaClass(view,ElementImport.class,1,1);
      List<Element> packageImports=Utils.collectDirectedRelatedElementsByRelationshipJavaClass(view,PackageImport.class,1,1);
      List<Element> expose=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(view,DocGen3Profile.queriesStereotype,1,false,1);
      List<Element> queries=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(view,DocGen3Profile.oldQueriesStereotype,1,false,1);
      if (elementImports == null)       elementImports=new ArrayList<Element>();
      if (packageImports != null)       elementImports.addAll(packageImports);
      if (expose != null)       elementImports.addAll(expose);
      if (queries != null)       elementImports.addAll(queries);
      if (view instanceof Class) {
        for (        TypedElement te : ((Class)view).get_typedElementOfType()) {
          if (te instanceof Property && ((Property)te).getAggregation() == AggregationKindEnum.COMPOSITE) {
            elementImports.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(te,DocGen3Profile.queriesStereotype,1,false,1));
          }
        }
      }
      if (elementImports.isEmpty())       elementImports.add(view);
      if (addVPElements) {
        elementImports.add(viewpoint);
        elementImports.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(viewpoint,""String_Node_Str"",1,false,1));
        elementImports.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(viewpoint,""String_Node_Str"",1,false,1));
        elementImports.add(b);
        elementImports.add(view);
      }
      context.pushTargets(Utils2.asList(Utils.removeDuplicates(elementImports),Object.class));
      if (b instanceof Activity) {
        parseActivityOrStructuredNode(b,viewSection);
      }
      context.popTargets();
    }
  }
 else {
    List<Element> expose=Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(view,DocGen3Profile.queriesStereotype,1,false,1);
    if (view instanceof Class) {
      for (      TypedElement te : ((Class)view).get_typedElementOfType()) {
        if (te instanceof Property && ((Property)te).getAggregation() == AggregationKindEnum.COMPOSITE) {
          expose.addAll(Utils.collectDirectedRelatedElementsByRelationshipStereotypeString(te,DocGen3Profile.queriesStereotype,1,false,1));
        }
      }
    }
    if (view instanceof Class && expose.size() == 1 && StereotypesHelper.hasStereotypeOrDerived(expose.get(0),sysmlview)) {
      return parseView(expose.get(0));
    }
    if (view instanceof Diagram) {
      Image image=new Image();
      List<Object> images=new ArrayList<Object>();
      images.add(view);
      image.setTargets(images);
      String caption=(String)StereotypesHelper.getStereotypePropertyFirst(view,DocGen3Profile.dgviewStereotype,""String_Node_Str"");
      if (caption == null)       caption=(String)StereotypesHelper.getStereotypePropertyFirst(view,DocGen3Profile.oldDgviewStereotype,""String_Node_Str"");
      List<String> captions=new ArrayList<String>();
      captions.add(caption);
      image.setCaptions(captions);
      image.setShowCaptions(true);
      viewSection.addElement(image);
    }
 else {
      String viewDoc=ModelHelper.getComment(view);
      if (viewDoc != null) {
        Paragraph para=new Paragraph(viewDoc);
        para.setDgElement(view);
        para.setFrom(From.DOCUMENTATION);
        viewSection.addElement(para);
      }
    }
  }
  viewSection.setDgElement(view);
  viewSection.setId(view.getID());
  viewSection.setTitle(((NamedElement)view).getName());
  return viewSection;
}",0.9857973501096178
88648,"/** 
 * Get the element's matching Slot.
 * @param elem the source Element
 * @param prop the Stereotype tag that the Slot instantiates
 * @return a Slot with zero or more values or null if no such Slot exists
 */
public static Slot getSlot(Element elem,Property prop){
  if (prop == null)   return null;
  Element myOwner=prop.getOwner();
  if (myOwner instanceof Stereotype && StereotypesHelper.hasStereotypeOrDerived(elem,(Stereotype)myOwner)) {
    Slot slot=StereotypesHelper.getSlot(elem,prop,false);
    if (slot != null) {
      return slot;
    }
  }
  return null;
}","/** 
 * Get the element's matching Slot.
 * @param elem the source Element
 * @param prop the Stereotype tag that the Slot instantiates
 * @return a Slot with zero or more values or null if no such Slot exists
 */
public static Slot getSlot(Element elem,Property prop){
  if (prop == null || elem == null)   return null;
  Element myOwner=prop.getOwner();
  if (myOwner instanceof Stereotype && StereotypesHelper.hasStereotypeOrDerived(elem,(Stereotype)myOwner)) {
    Slot slot=StereotypesHelper.getSlot(elem,prop,false);
    if (slot != null) {
      return slot;
    }
  }
  return null;
}",0.9863013698630136
88649,"public static Map<String,JSONObject> getReferencedElements(Element e){
  Stereotype view=Utils.getViewStereotype();
  Stereotype viewpoint=Utils.getViewpointStereotype();
  Map<String,JSONObject> result=new HashMap<String,JSONObject>();
  HashSet<Element> values=new HashSet<Element>();
  getNestedValueElements(values);
  for (  Element value : values) {
    if (value != null) {
      JSONObject j=new JSONObject();
      fillElement(value,j,view,viewpoint);
      result.put(value.getID(),j);
    }
  }
  return result;
}","public static Map<String,JSONObject> getReferencedElements(Element e){
  Stereotype view=Utils.getViewStereotype();
  Stereotype viewpoint=Utils.getViewpointStereotype();
  Map<String,JSONObject> result=new HashMap<String,JSONObject>();
  HashSet<Element> values=new HashSet<Element>();
  values.add(e);
  getNestedValueElements(values);
  for (  Element value : values) {
    if (value != null) {
      JSONObject j=new JSONObject();
      fillElement(value,j,view,viewpoint);
      result.put(value.getID(),j);
    }
  }
  values.remove(e);
  return result;
}",0.9658986175115208
88650,"public static String getUrl(){
  String url=null;
  Element model=Application.getInstance().getProject().getModel();
  if (StereotypesHelper.hasStereotype(model,""String_Node_Str"")) {
    url=(String)StereotypesHelper.getStereotypePropertyFirst(model,""String_Node_Str"",""String_Node_Str"");
    if (url == null || url.equals(""String_Node_Str"")) {
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
      url=null;
    }
  }
 else {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    url=null;
  }
  if (url == null && MDUtils.isDeveloperMode()) {
    url=JOptionPane.showInputDialog(""String_Node_Str"",developerUrl);
  }
  if (url == null || url.equals(""String_Node_Str""))   return null;
  developerUrl=url;
  url+=""String_Node_Str"";
  return url;
}","public static String getUrl(){
  if (false) {
    return ""String_Node_Str"";
  }
  String url=null;
  Element model=Application.getInstance().getProject().getModel();
  if (StereotypesHelper.hasStereotype(model,""String_Node_Str"")) {
    url=(String)StereotypesHelper.getStereotypePropertyFirst(model,""String_Node_Str"",""String_Node_Str"");
    if (url == null || url.equals(""String_Node_Str"")) {
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
      url=null;
    }
  }
 else {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    url=null;
  }
  if (url == null && MDUtils.isDeveloperMode()) {
    url=JOptionPane.showInputDialog(""String_Node_Str"",developerUrl);
  }
  if (url == null || url.equals(""String_Node_Str""))   return null;
  developerUrl=url;
  url+=""String_Node_Str"";
  return url;
}",0.969046114971573
88651,"@SuppressWarnings(""String_Node_Str"") public static void fillElement(Element e,JSONObject elementInfo,Stereotype view,Stereotype viewpoint){
  if (e instanceof Package) {
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (e instanceof Property) {
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
    elementInfo.put(""String_Node_Str"",((Property)e).isDerived());
    elementInfo.put(""String_Node_Str"",false);
    ValueSpecification vs=((Property)e).getDefaultValue();
    if (vs != null) {
      elementInfo.put(""String_Node_Str"",makeJsonArrayOfIDs(Collections.singletonList(vs)));
    }
    Type type=((Property)e).getType();
    if (type != null) {
      elementInfo.put(""String_Node_Str"",""String_Node_Str"" + type.getID());
    }
 else     elementInfo.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (e instanceof Slot) {
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
    elementInfo.put(""String_Node_Str"",false);
    elementInfo.put(""String_Node_Str"",true);
    if (((Slot)e).getDefiningFeature().getID().equals(""String_Node_Str""))     elementInfo.put(""String_Node_Str"",true);
    List<ValueSpecification> vsl=((Slot)e).getValue();
    if (vsl != null && vsl.size() > 0) {
      elementInfo.put(""String_Node_Str"",makeJsonArrayOfIDs(vsl));
    }
    Element type=((Slot)e).getDefiningFeature();
    if (type != null) {
      elementInfo.put(""String_Node_Str"",""String_Node_Str"" + type.getID());
    }
  }
 else   if (e instanceof Dependency) {
    if (StereotypesHelper.hasStereotypeOrDerived(e,Utils.getConformsStereotype()))     elementInfo.put(""String_Node_Str"",""String_Node_Str"");
 else     if (StereotypesHelper.hasStereotypeOrDerived(e,DocGen3Profile.queriesStereotype))     elementInfo.put(""String_Node_Str"",""String_Node_Str"");
 else     elementInfo.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (e instanceof Generalization) {
    if (StereotypesHelper.hasStereotypeOrDerived(e,Utils.getConformsStereotype()))     elementInfo.put(""String_Node_Str"",""String_Node_Str"");
 else     if (StereotypesHelper.hasStereotypeOrDerived(e,DocGen3Profile.queriesStereotype))     elementInfo.put(""String_Node_Str"",""String_Node_Str"");
 else     elementInfo.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (e instanceof DirectedRelationship) {
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (e instanceof Comment) {
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
    elementInfo.put(""String_Node_Str"",Utils.stripHtmlWrapper(((Comment)e).getBody()));
    elementInfo.put(""String_Node_Str"",makeJsonArrayOfIDs(((Comment)e).getAnnotatedElement()));
  }
 else   if (e instanceof Operation) {
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
    List<Parameter> vsl=((Operation)e).getOwnedParameter();
    if (vsl != null && vsl.size() > 0) {
      elementInfo.put(""String_Node_Str"",makeJsonArrayOfIDs(vsl));
    }
  }
 else   if (e instanceof ValueSpecification) {
    fillValueSpecification((ValueSpecification)e,elementInfo,view,viewpoint);
  }
 else   if (e instanceof Constraint) {
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
    ValueSpecification spec=((Constraint)e).getSpecification();
    if (spec != null)     elementInfo.put(""String_Node_Str"",spec.getID());
  }
 else   if (e instanceof InstanceSpecification) {
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
    ValueSpecification spec=((InstanceSpecification)e).getSpecification();
    if (spec != null)     elementInfo.put(""String_Node_Str"",spec.getID());
  }
 else   if (e instanceof Parameter) {
    Parameter p=(Parameter)e;
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
    if (p.getDirection() != null)     elementInfo.put(""String_Node_Str"",p.getDirection());
    if (p.getType() != null)     elementInfo.put(""String_Node_Str"",p.getType().getID());
    ValueSpecification defaultValue=p.getDefaultValue();
    if (defaultValue != null) {
      elementInfo.put(""String_Node_Str"",defaultValue.getID());
    }
  }
 else {
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
  }
  if (e instanceof DirectedRelationship) {
    Element client=ModelHelper.getClientElement(e);
    Element supplier=ModelHelper.getSupplierElement(e);
    elementInfo.put(""String_Node_Str"",client.getID());
    elementInfo.put(""String_Node_Str"",supplier.getID());
  }
  if (viewpoint != null && StereotypesHelper.hasStereotypeOrDerived(e,viewpoint))   elementInfo.put(""String_Node_Str"",""String_Node_Str"");
  if (e instanceof NamedElement) {
    elementInfo.put(""String_Node_Str"",((NamedElement)e).getName());
  }
 else   elementInfo.put(""String_Node_Str"",""String_Node_Str"");
  elementInfo.put(""String_Node_Str"",Utils.stripHtmlWrapper(ModelHelper.getComment(e)));
  if (e.getOwner() == null || e.getOwner() == Application.getInstance().getProject().getModel())   elementInfo.put(""String_Node_Str"",""String_Node_Str"");
 else   elementInfo.put(""String_Node_Str"",""String_Node_Str"" + e.getOwner().getID());
  elementInfo.put(""String_Node_Str"",getElementID(e));
}","@SuppressWarnings(""String_Node_Str"") public static void fillElement(Element e,JSONObject elementInfo,Stereotype view,Stereotype viewpoint){
  if (e instanceof Package) {
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (e instanceof Property) {
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
    elementInfo.put(""String_Node_Str"",((Property)e).isDerived());
    elementInfo.put(""String_Node_Str"",false);
    ValueSpecification vs=((Property)e).getDefaultValue();
    if (vs != null) {
      elementInfo.put(""String_Node_Str"",makeJsonArrayOfIDs(Collections.singletonList(vs)));
    }
    Type type=((Property)e).getType();
    if (type != null) {
      elementInfo.put(""String_Node_Str"",""String_Node_Str"" + type.getID());
    }
 else     elementInfo.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (e instanceof Slot) {
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
    elementInfo.put(""String_Node_Str"",false);
    elementInfo.put(""String_Node_Str"",true);
    if (((Slot)e).getDefiningFeature().getID().equals(""String_Node_Str""))     elementInfo.put(""String_Node_Str"",true);
    List<ValueSpecification> vsl=((Slot)e).getValue();
    if (vsl != null && vsl.size() > 0) {
      elementInfo.put(""String_Node_Str"",makeJsonArrayOfIDs(vsl));
    }
    Element type=((Slot)e).getDefiningFeature();
    if (type != null) {
      elementInfo.put(""String_Node_Str"",""String_Node_Str"" + type.getID());
    }
  }
 else   if (e instanceof Dependency) {
    if (StereotypesHelper.hasStereotypeOrDerived(e,DocGen3Profile.conformStereotype))     elementInfo.put(""String_Node_Str"",""String_Node_Str"");
 else     if (StereotypesHelper.hasStereotypeOrDerived(e,DocGen3Profile.queriesStereotype))     elementInfo.put(""String_Node_Str"",""String_Node_Str"");
 else     elementInfo.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (e instanceof Generalization) {
    boolean isConform=StereotypesHelper.hasStereotypeOrDerived(e,DocGen3Profile.conformStereotype);
    if (isConform)     elementInfo.put(""String_Node_Str"",""String_Node_Str"");
 else     if (StereotypesHelper.hasStereotypeOrDerived(e,DocGen3Profile.queriesStereotype))     elementInfo.put(""String_Node_Str"",""String_Node_Str"");
 else     elementInfo.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (e instanceof DirectedRelationship) {
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (e instanceof Comment) {
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
    elementInfo.put(""String_Node_Str"",Utils.stripHtmlWrapper(((Comment)e).getBody()));
    elementInfo.put(""String_Node_Str"",makeJsonArrayOfIDs(((Comment)e).getAnnotatedElement()));
  }
 else   if (e instanceof Operation) {
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
    List<Parameter> vsl=((Operation)e).getOwnedParameter();
    if (vsl != null && vsl.size() > 0) {
      elementInfo.put(""String_Node_Str"",makeJsonArrayOfIDs(vsl));
    }
  }
 else   if (e instanceof ValueSpecification) {
    fillValueSpecification((ValueSpecification)e,elementInfo,view,viewpoint);
  }
 else   if (e instanceof Constraint) {
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
    ValueSpecification spec=((Constraint)e).getSpecification();
    if (spec != null)     elementInfo.put(""String_Node_Str"",spec.getID());
  }
 else   if (e instanceof InstanceSpecification) {
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
    ValueSpecification spec=((InstanceSpecification)e).getSpecification();
    if (spec != null)     elementInfo.put(""String_Node_Str"",spec.getID());
  }
 else   if (e instanceof Parameter) {
    Parameter p=(Parameter)e;
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
    if (p.getDirection() != null)     elementInfo.put(""String_Node_Str"",p.getDirection());
    if (p.getType() != null)     elementInfo.put(""String_Node_Str"",p.getType().getID());
    ValueSpecification defaultValue=p.getDefaultValue();
    if (defaultValue != null) {
      elementInfo.put(""String_Node_Str"",defaultValue.getID());
    }
  }
 else {
    elementInfo.put(""String_Node_Str"",""String_Node_Str"");
  }
  if (e instanceof DirectedRelationship) {
    Element client=ModelHelper.getClientElement(e);
    Element supplier=ModelHelper.getSupplierElement(e);
    elementInfo.put(""String_Node_Str"",client.getID());
    elementInfo.put(""String_Node_Str"",supplier.getID());
  }
  if (viewpoint != null && StereotypesHelper.hasStereotypeOrDerived(e,viewpoint))   elementInfo.put(""String_Node_Str"",""String_Node_Str"");
  if (e instanceof NamedElement) {
    elementInfo.put(""String_Node_Str"",((NamedElement)e).getName());
  }
 else   elementInfo.put(""String_Node_Str"",""String_Node_Str"");
  elementInfo.put(""String_Node_Str"",Utils.stripHtmlWrapper(ModelHelper.getComment(e)));
  if (e.getOwner() == null || e.getOwner() == Application.getInstance().getProject().getModel())   elementInfo.put(""String_Node_Str"",""String_Node_Str"");
 else   elementInfo.put(""String_Node_Str"",""String_Node_Str"" + e.getOwner().getID());
  elementInfo.put(""String_Node_Str"",getElementID(e));
}",0.9159838088656334
88652,"public static Map<String,JSONObject> getReferencedElements(Element e){
  Stereotype view=Utils.getViewStereotype();
  Stereotype viewpoint=Utils.getViewpointStereotype();
  Map<String,JSONObject> result=new HashMap<String,JSONObject>();
  if (e instanceof Property) {
    Element value=null;
    if (((Property)e).getDefaultValue() instanceof ElementValue) {
      value=((ElementValue)((Property)e).getDefaultValue()).getElement();
    }
 else     if (((Property)e).getDefaultValue() instanceof InstanceValue) {
      value=((InstanceValue)((Property)e).getDefaultValue()).getInstance();
    }
    if (value != null) {
      JSONObject j=new JSONObject();
      fillElement(value,j,view,viewpoint);
      result.put(value.getID(),j);
    }
  }
 else   if (e instanceof Slot) {
    for (    ValueSpecification vs : ((Slot)e).getValue()) {
      Element value=null;
      if (vs instanceof ElementValue) {
        value=((ElementValue)vs).getElement();
      }
 else       if (vs instanceof InstanceValue) {
        value=((InstanceValue)vs).getInstance();
      }
      if (value != null) {
        JSONObject j=new JSONObject();
        fillElement(value,j,view,viewpoint);
        result.put(value.getID(),j);
      }
    }
  }
  return result;
}","public static Map<String,JSONObject> getReferencedElements(Element e){
  Stereotype view=Utils.getViewStereotype();
  Stereotype viewpoint=Utils.getViewpointStereotype();
  Map<String,JSONObject> result=new HashMap<String,JSONObject>();
  HashSet<Element> values=new HashSet<Element>();
  getNestedValueElements(values);
  for (  Element value : values) {
    if (value != null) {
      JSONObject j=new JSONObject();
      fillElement(value,j,view,viewpoint);
      result.put(value.getID(),j);
    }
  }
  return result;
}",0.4469525959367946
88653,"@SuppressWarnings(""String_Node_Str"") public boolean validate(){
  DocumentGenerator dg=new DocumentGenerator(view,dv,null);
  Document dge=dg.parseDocument(true,true);
  (new PostProcessor()).process(dge);
  DocBookOutputVisitor visitor=new DocBookOutputVisitor(true);
  dge.accept(visitor);
  DBBook book=visitor.getBook();
  if (book == null)   return false;
  ViewHierarchyVisitor vhv=new ViewHierarchyVisitor();
  dge.accept(vhv);
  DBAlfrescoVisitor visitor2=new DBAlfrescoVisitor(recurse);
  book.accept(visitor2);
  JSONObject results=new JSONObject();
  JSONArray resultElements=new JSONArray();
  results.put(""String_Node_Str"",resultElements);
  String url=ExportUtility.getUrl();
  if (url == null)   return false;
  Element startView=getStartView();
  Map<String,JSONObject> cachedResultElements=new HashMap<String,JSONObject>();
  for (  Object viewid : visitor2.getViews().keySet()) {
    if (!recurse && !viewid.equals(startView.getID()))     continue;
    Element currentView=(Element)Application.getInstance().getProject().getElementByID((String)viewid);
    String existurl=url + ""String_Node_Str"" + viewid;
    String response=ExportUtility.get(existurl,false);
    if (!ViewEditUtils.isPasswordSet())     return false;
    if (response == null || !response.contains(""String_Node_Str"")) {
      ValidationRuleViolation v=new ValidationRuleViolation(currentView,""String_Node_Str"");
      v.addAction(new ExportView(currentView,false));
      v.addAction(new ExportView(currentView,true));
      exists.addViolation(v);
    }
 else {
      String viewElementsUrl=existurl + ""String_Node_Str"";
      JSONArray localElements=(JSONArray)((JSONObject)visitor2.getViews().get(viewid)).get(""String_Node_Str"");
      JSONArray localContains=(JSONArray)((JSONObject)visitor2.getViews().get(viewid)).get(""String_Node_Str"");
      JSONObject webView=(JSONObject)((JSONArray)((JSONObject)JSONValue.parse(response)).get(""String_Node_Str"")).get(0);
      JSONArray webContains=(JSONArray)webView.get(""String_Node_Str"");
      String viewelements=ExportUtility.get(viewElementsUrl,false);
      if (viewelements == null)       continue;
      JSONObject viewresults=(JSONObject)JSONValue.parse(viewelements);
      boolean matches=viewElementsMatch(localElements,viewresults) && viewContentsMatch(localContains,webContains);
      boolean hierarchyMatches=viewHierarchyMatch(currentView,dge,vhv,response);
      if (!matches) {
        ValidationRuleViolation v=new ValidationRuleViolation(currentView,""String_Node_Str"");
        v.addAction(new ExportView(currentView,false));
        v.addAction(new ExportView(currentView,true));
        match.addViolation(v);
      }
      if (!hierarchyMatches) {
        ValidationRuleViolation v=new ValidationRuleViolation(currentView,""String_Node_Str"");
        v.addAction(new ExportHierarchy(currentView));
        hierarchy.addViolation(v);
      }
      for (      Object reselement : (JSONArray)viewresults.get(""String_Node_Str"")) {
        if (cachedResultElements.containsKey(((JSONObject)reselement).get(""String_Node_Str"")))         continue;
        cachedResultElements.put((String)((JSONObject)reselement).get(""String_Node_Str""),(JSONObject)reselement);
      }
      String viewCommentsUrl=url + ""String_Node_Str"" + viewid+ ""String_Node_Str"";
      String viewcomments=ExportUtility.get(viewCommentsUrl,false);
      if (viewcomments == null)       continue;
      JSONObject commentresults=(JSONObject)JSONValue.parse(viewcomments);
      resultElements.addAll((JSONArray)commentresults.get(""String_Node_Str""));
      boolean commentMatches=viewCommentsMatch(currentView,commentresults);
      if (!commentMatches) {
        ValidationRuleViolation v=new ValidationRuleViolation(currentView,""String_Node_Str"");
        v.addAction(new ExportElementComments(currentView));
        v.addAction(new ImportElementComments(currentView,commentresults));
        comments.addViolation(v);
      }
    }
  }
  resultElements.addAll(cachedResultElements.values());
  ResultHolder.lastResults=results;
  ModelValidator mv=new ModelValidator(view,results,false,visitor2.getElementSet());
  mv.validate();
  modelSuite=mv.getSuite();
  ImageValidator iv=new ImageValidator(visitor2.getImages());
  iv.validate();
  imageSuite=iv.getSuite();
  if (!exists.getViolations().isEmpty()) {
    Utils.showPopupMessage(""String_Node_Str"");
  }
  return true;
}","@SuppressWarnings(""String_Node_Str"") public boolean validate(){
  DocumentGenerator dg=new DocumentGenerator(view,dv,null);
  Document dge=dg.parseDocument(true,true);
  (new PostProcessor()).process(dge);
  DocBookOutputVisitor visitor=new DocBookOutputVisitor(true);
  dge.accept(visitor);
  DBBook book=visitor.getBook();
  if (book == null)   return false;
  ViewHierarchyVisitor vhv=new ViewHierarchyVisitor();
  dge.accept(vhv);
  DBAlfrescoVisitor visitor2=new DBAlfrescoVisitor(recurse);
  book.accept(visitor2);
  JSONObject results=new JSONObject();
  JSONArray resultElements=new JSONArray();
  results.put(""String_Node_Str"",resultElements);
  String url=ExportUtility.getUrl();
  if (url == null)   return false;
  Element startView=getStartView();
  Map<String,JSONObject> cachedResultElements=new HashMap<String,JSONObject>();
  for (  Object viewid : visitor2.getViews().keySet()) {
    if (!recurse && !viewid.equals(startView.getID()))     continue;
    Element currentView=(Element)Application.getInstance().getProject().getElementByID((String)viewid);
    String existurl=url + ""String_Node_Str"" + viewid;
    String response=ExportUtility.get(existurl,false);
    if (!ViewEditUtils.isPasswordSet())     return false;
    if (response == null || !response.contains(""String_Node_Str"")) {
      ValidationRuleViolation v=new ValidationRuleViolation(currentView,""String_Node_Str"");
      v.addAction(new ExportView(currentView,false));
      v.addAction(new ExportView(currentView,true));
      exists.addViolation(v);
    }
 else {
      String viewElementsUrl=existurl + ""String_Node_Str"";
      JSONArray localElements=(JSONArray)((JSONObject)visitor2.getViews().get(viewid)).get(""String_Node_Str"");
      JSONArray localContains=(JSONArray)((JSONObject)visitor2.getViews().get(viewid)).get(""String_Node_Str"");
      JSONObject webView=(JSONObject)((JSONArray)((JSONObject)JSONValue.parse(response)).get(""String_Node_Str"")).get(0);
      Object containsObj=webView.get(""String_Node_Str"");
      JSONArray webContains=null;
      if (containsObj instanceof JSONArray) {
        webContains=(JSONArray)containsObj;
      }
 else {
        webContains=new JSONArray();
        webContains.add(containsObj);
      }
      String viewelements=ExportUtility.get(viewElementsUrl,false);
      if (viewelements == null)       continue;
      JSONObject viewresults=(JSONObject)JSONValue.parse(viewelements);
      boolean matches=viewElementsMatch(localElements,viewresults) && viewContentsMatch(localContains,webContains);
      boolean hierarchyMatches=viewHierarchyMatch(currentView,dge,vhv,response);
      if (!matches) {
        ValidationRuleViolation v=new ValidationRuleViolation(currentView,""String_Node_Str"");
        v.addAction(new ExportView(currentView,false));
        v.addAction(new ExportView(currentView,true));
        match.addViolation(v);
      }
      if (!hierarchyMatches) {
        ValidationRuleViolation v=new ValidationRuleViolation(currentView,""String_Node_Str"");
        v.addAction(new ExportHierarchy(currentView));
        hierarchy.addViolation(v);
      }
      for (      Object reselement : (JSONArray)viewresults.get(""String_Node_Str"")) {
        if (cachedResultElements.containsKey(((JSONObject)reselement).get(""String_Node_Str"")))         continue;
        cachedResultElements.put((String)((JSONObject)reselement).get(""String_Node_Str""),(JSONObject)reselement);
      }
      String viewCommentsUrl=url + ""String_Node_Str"" + viewid+ ""String_Node_Str"";
      String viewcomments=ExportUtility.get(viewCommentsUrl,false);
      if (viewcomments == null)       continue;
      JSONObject commentresults=(JSONObject)JSONValue.parse(viewcomments);
      resultElements.addAll((JSONArray)commentresults.get(""String_Node_Str""));
      boolean commentMatches=viewCommentsMatch(currentView,commentresults);
      if (!commentMatches) {
        ValidationRuleViolation v=new ValidationRuleViolation(currentView,""String_Node_Str"");
        v.addAction(new ExportElementComments(currentView));
        v.addAction(new ImportElementComments(currentView,commentresults));
        comments.addViolation(v);
      }
    }
  }
  resultElements.addAll(cachedResultElements.values());
  ResultHolder.lastResults=results;
  ModelValidator mv=new ModelValidator(view,results,false,visitor2.getElementSet());
  mv.validate();
  modelSuite=mv.getSuite();
  ImageValidator iv=new ImageValidator(visitor2.getImages());
  iv.validate();
  imageSuite=iv.getSuite();
  if (!exists.getViolations().isEmpty()) {
    Utils.showPopupMessage(""String_Node_Str"");
  }
  return true;
}",0.9703432189270244
88654,"/** 
 * Create DocBook paragraph(s) for this Paragraph.
 * @param forViewEditor
 * @param outputDir
 * @return Return one or more DBParagraphs for docgen or the view editorbased on properties of the Paragraph UML stereotype. <p> <code> O=tryOcl && T=gotText && R=gotTargets && S=gotStereotypeProperties && D=don't care <br><br> 1 &nbsp;D && !T && !R &&  D: return nothing <br> 2     !O && !T &&  R && !S: return a paragraph of documentation for each target <br> 3     !O && !T &&  R &&  S: return a paragraph for each target-property pair  <br> 4     !O &&  T &&  D &&  D: return a paragraph of the text, tied to an attribute (the Documentation attribute as set from parseView) of dgElement <br>  <br> 5 &nbsp;O && !T &&  R && !S: return a paragraph of the evaluation of the documentation of each target as OCL on dgElement <br> 6 &nbsp;O && !T &&  R &&  S: return a paragraph of the evaluation of each target-property as OCL on dgElement <br> 7 &nbsp;O &&  T && !R &&  D: return a paragraph of the evaluation of the text as OCL on dgElement <br> 8 &nbsp;O &&  T &&  R && !S: return a paragraph of the evaluation of the text as OCL on each target <br> 9 &nbsp;O &&  T &&  R &&  S: return a paragraph of the evaluation of the text as OCL on each target-property pair <br> </code> <p>
 * @see gov.nasa.jpl.mbee.model.Query#visit(boolean,java.lang.String)
 */
@Override public List<DocumentElement> visit(boolean forViewEditor,String outputDir){
  System.out.println(""String_Node_Str"" + forViewEditor + ""String_Node_Str""+ outputDir+ ""String_Node_Str"");
  List<DocumentElement> res=new ArrayList<DocumentElement>();
  List<Reference> refs=new ArrayList<Reference>();
  if (getIgnore())   return res;
  boolean gotText=getText() != null;
  boolean gotTargets=getTargets() != null;
  boolean gotStereotypeProperties=!Utils2.isNullOrEmpty(getStereotypeProperties());
  System.out.println(""String_Node_Str"" + gotText + ""String_Node_Str""+ getText());
  System.out.println(""String_Node_Str"" + gotTargets + ""String_Node_Str""+ MoreToString.Helper.toLongString(getTargets()));
  System.out.println(""String_Node_Str"" + gotStereotypeProperties + ""String_Node_Str""+ getStereotypeProperties());
  System.out.println(""String_Node_Str"" + attribute);
  if (gotText && !tryOcl) {
    System.out.println(""String_Node_Str"");
    if (forViewEditor || !getText().trim().equals(""String_Node_Str""))     res.add(new DBParagraph(getText(),getDgElement(),getFrom()));
  }
 else   if (gotText && !gotTargets) {
    System.out.println(""String_Node_Str"");
    addOclParagraph(res,getText(),dgElement);
  }
 else   if (gotTargets) {
    for (    Object o : targets) {
      Element e=null;
      if (o instanceof Element) {
        e=(Element)o;
      }
 else       if (!tryOcl)       continue;
      Reference ref=null;
      if (gotStereotypeProperties) {
        System.out.println(""String_Node_Str"" + o);
        for (        Property p : getStereotypeProperties()) {
          ref=Reference.getPropertyReference(e,p);
          refs.add(ref);
        }
      }
 else {
        if (tryOcl && gotText) {
          System.out.println(""String_Node_Str"" + Utils.getName(o));
          ref=new Reference(o);
        }
 else {
          System.out.println(""String_Node_Str"");
          ref=new Reference(e,From.DOCUMENTATION,ModelHelper.getComment(e));
        }
        refs.add(ref);
      }
    }
    if (tryOcl && !iterate && gotText) {
      System.out.println(""String_Node_Str"");
      ArrayList<Object> results=new ArrayList<Object>();
      for (      Reference r : refs) {
        results.add(r.getResult());
      }
      addOclParagraph(res,getText(),results);
    }
 else {
      if (!iterate) {
        Debug.error(false,""String_Node_Str"" + dgElement);
      }
      for (      Reference r : refs) {
        if (!tryOcl) {
          System.out.println(""String_Node_Str"" + r);
          res.add(new DBParagraph(r.getResult(),r.getElement(),r.getFrom()));
        }
 else {
          if (gotText) {
            System.out.println(""String_Node_Str"" + r);
            addOclParagraph(res,getText(),r.getResult());
          }
 else {
            System.out.println(""String_Node_Str"" + r);
            addOclParagraph(res,r.getResult(),dgElement);
          }
        }
      }
    }
  }
  System.out.println(""String_Node_Str"" + forViewEditor + ""String_Node_Str""+ outputDir+ ""String_Node_Str""+ res);
  return res;
}","/** 
 * Create DocBook paragraph(s) for this Paragraph.
 * @param forViewEditor
 * @param outputDir
 * @return Return one or more DBParagraphs for docgen or the view editorbased on properties of the Paragraph UML stereotype. <p> <code> O=tryOcl && T=gotText && R=gotTargets && S=gotStereotypeProperties && D=don't care <br><br> 1 &nbsp;D && !T && !R &&  D: return nothing <br> 2     !O && !T &&  R && !S: return a paragraph of documentation for each target <br> 3     !O && !T &&  R &&  S: return a paragraph for each target-property pair  <br> 4     !O &&  T &&  D &&  D: return a paragraph of the text, tied to the ""body"" slot of dgElement <br>  <br> 5 &nbsp;O && !T &&  R && !S: return a paragraph of the evaluation of the documentation of each target as OCL on dgElement <br> 6 &nbsp;O && !T &&  R &&  S: return a paragraph of the evaluation of each target-property as OCL on dgElement <br> 7 &nbsp;O &&  T && !R &&  D: return a paragraph of the evaluation of the text as OCL on dgElement <br> 8 &nbsp;O &&  T &&  R && !S: return a paragraph of the evaluation of the text as OCL on each target <br> 9 &nbsp;O &&  T &&  R &&  S: return a paragraph of the evaluation of the text as OCL on each target-property pair <br> </code> <p>
 * @see gov.nasa.jpl.mbee.model.Query#visit(boolean,java.lang.String)
 */
@Override public List<DocumentElement> visit(boolean forViewEditor,String outputDir){
  System.out.println(""String_Node_Str"" + forViewEditor + ""String_Node_Str""+ outputDir+ ""String_Node_Str"");
  List<DocumentElement> res=new ArrayList<DocumentElement>();
  List<Reference> refs=new ArrayList<Reference>();
  if (getIgnore())   return res;
  boolean gotText=getText() != null;
  boolean gotTargets=getTargets() != null;
  boolean gotStereotypeProperties=!Utils2.isNullOrEmpty(getStereotypeProperties());
  System.out.println(""String_Node_Str"" + gotText + ""String_Node_Str""+ getText());
  System.out.println(""String_Node_Str"" + gotTargets + ""String_Node_Str""+ MoreToString.Helper.toLongString(getTargets()));
  System.out.println(""String_Node_Str"" + gotStereotypeProperties + ""String_Node_Str""+ getStereotypeProperties());
  System.out.println(""String_Node_Str"" + attribute);
  if (gotText && !tryOcl) {
    System.out.println(""String_Node_Str"");
    if (forViewEditor || !getText().trim().equals(""String_Node_Str"")) {
      Stereotype paragraphStereotype=Utils.getStereotype(DocGen3Profile.paragraphStereotype);
      Slot s=Utils.getSlot(getDgElement(),Utils.getStereotypePropertyByName(paragraphStereotype,""String_Node_Str""));
      res.add(new DBParagraph(getText(),s,From.DVALUE));
    }
 else {
      res.add(new DBParagraph(getText()));
    }
  }
 else   if (gotText && !gotTargets) {
    System.out.println(""String_Node_Str"");
    addOclParagraph(res,getText(),dgElement);
  }
 else   if (gotTargets) {
    for (    Object o : targets) {
      Element e=null;
      if (o instanceof Element) {
        e=(Element)o;
      }
 else       if (!tryOcl)       continue;
      Reference ref=null;
      if (gotStereotypeProperties) {
        System.out.println(""String_Node_Str"" + o);
        for (        Property p : getStereotypeProperties()) {
          ref=Reference.getPropertyReference(e,p);
          refs.add(ref);
        }
      }
 else {
        if (tryOcl && gotText) {
          System.out.println(""String_Node_Str"" + Utils.getName(o));
          ref=new Reference(o);
        }
 else {
          System.out.println(""String_Node_Str"");
          ref=new Reference(e,From.DOCUMENTATION,ModelHelper.getComment(e));
        }
        refs.add(ref);
      }
    }
    if (tryOcl && !iterate && gotText) {
      System.out.println(""String_Node_Str"");
      ArrayList<Object> results=new ArrayList<Object>();
      for (      Reference r : refs) {
        results.add(r.getResult());
      }
      addOclParagraph(res,getText(),results);
    }
 else {
      if (!iterate) {
        Debug.error(false,""String_Node_Str"" + dgElement);
      }
      for (      Reference r : refs) {
        if (!tryOcl) {
          System.out.println(""String_Node_Str"" + r);
          res.addAll(Common.getReferenceAsDocumentElements(r));
        }
 else {
          if (gotText) {
            System.out.println(""String_Node_Str"" + r);
            addOclParagraph(res,getText(),r.getResult());
          }
 else {
            System.out.println(""String_Node_Str"" + r);
            addOclParagraph(res,r.getResult(),dgElement);
          }
        }
      }
    }
  }
  System.out.println(""String_Node_Str"" + forViewEditor + ""String_Node_Str""+ outputDir+ ""String_Node_Str""+ res);
  return res;
}",0.9469815103586544
88655,"public static void logWithColor(String msg,Color color){
  JDialog log=gl.getLog();
  StyledDocument doc=getComponentOfType(log,StyledDocument.class);
  if (doc == null) {
    JEditorPane jep=getComponentOfType(log,JEditorPane.class);
    if (jep != null) {
      doc=(StyledDocument)jep.getDocument();
    }
 else {
      System.out.println(""String_Node_Str"");
      System.err.println(""String_Node_Str"");
      return;
    }
  }
  SimpleAttributeSet set=new SimpleAttributeSet();
  StyleConstants.setForeground(set,color);
  int i=doc.getLength();
  try {
    doc.insertString(i,msg,set);
  }
 catch (  BadLocationException e) {
    e.printStackTrace();
  }
}","public static void logWithColor(String msg,Color color){
  if (color == null)   color=Color.black;
  if (gl == null)   gl=getGuiLog();
  JDialog log=gl.getLog();
  StyledDocument doc=getComponentOfType(log,StyledDocument.class);
  if (doc == null) {
    JEditorPane jep=getComponentOfType(log,JEditorPane.class);
    if (jep != null) {
      doc=(StyledDocument)jep.getDocument();
    }
 else {
      System.out.println(""String_Node_Str"");
      System.err.println(""String_Node_Str"");
      return;
    }
  }
  SimpleAttributeSet set=new SimpleAttributeSet();
  StyleConstants.setForeground(set,color);
  int i=doc.getLength();
  try {
    doc.insertString(i,msg,set);
  }
 catch (  BadLocationException e) {
    e.printStackTrace();
  }
}",0.9442857142857144
88656,"/** 
 */
public static void log(Object o){
  GUILog log=Application.getInstance().getGUILog();
  log.log(o.toString());
}","public static void log(Object o,Object color){
  if (color == null || color instanceof Color) {
    log(o,(Color)color);
  }
 else {
    log(o,color.toString());
  }
}",0.5486111111111112
88657,"@Override protected Method getJavaMethodFor(EOperation operation,Object receiver){
  Method result=null;
  try {
    result=super.getJavaMethodFor(operation,receiver);
  }
 catch (  Throwable e) {
    if (operation != null && operation.getEContainingClass() != null) {
      EClass container=operation.getEContainingClass();
      Class<?> containerClass=container.getInstanceClass();
      if (containerClass == null) {
        if (container.getName().startsWith(""String_Node_Str"")) {
          container.setInstanceClass(String.class);
        }
        return getJavaMethodFor(operation,receiver);
      }
    }
    Debug.error(true,true,""String_Node_Str"" + operation);
  }
  return result;
}","protected Method getJavaMethodFor(EOperation operation,Object receiver,boolean recursing){
  Method result=null;
  try {
    result=super.getJavaMethodFor(operation,receiver);
  }
 catch (  Throwable e) {
    if (!recursing && operation != null && operation.getEContainingClass() != null) {
      EClass container=operation.getEContainingClass();
      Class<?> containerClass=container.getInstanceClass();
      if (containerClass == null) {
        if (container.getName().startsWith(""String_Node_Str"")) {
          container.setInstanceClass(String.class);
        }
        return getJavaMethodFor(operation,receiver,true);
      }
    }
    Debug.error(true,true,""String_Node_Str"" + operation);
  }
  return result;
}",0.9668313338038108
88658,"public static DgOperationInstance addOperation(String name,String annotationName,DgEnvironmentFactory envFactory,EClassifier callerType,EClassifier returnType,CallOperation operation,EParameter... parameters){
  return new DgOperationInstance(name,annotationName,envFactory,callerType,returnType,operation,parameters);
}","public static DgOperationInstance addOperation(String name,String annotationName,DgEnvironmentFactory envFactory,EClassifier callerType,EClassifier returnType,CallOperation operation,EParameter... parameters){
  System.out.println(""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str""+ callerType.getName()+ ""String_Node_Str""+ returnType.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ MoreToString.Helper.toString(parameters)+ ""String_Node_Str"");
  return new DgOperationInstance(name,annotationName,envFactory,callerType,returnType,operation,parameters);
}",0.7199100112485939
88659,"public static List<GetCallOperation> addOperation(String[] names,EClassifier callerType,EClassifier returnType,EClassifier parmType,String parmName,boolean zeroArgToo,boolean singularNameReturnsOnlyOne,CallReturnType opType,DgEnvironmentFactory envFactory){
  ArrayList<GetCallOperation> ops=new ArrayList<GetCallOperation>();
  EParameter parm=EcoreFactory.eINSTANCE.createEParameter();
  parm.setName(parmName);
  parm.setEType(parmType);
  GetCallOperation op=null;
  boolean someEndWithS=false;
  boolean notAllEndWithS=false;
  if (singularNameReturnsOnlyOne) {
    for (    String name : names) {
      if (!Utils2.isNullOrEmpty(name)) {
        if (name.trim().substring(name.length() - 1).toLowerCase().equals(""String_Node_Str"")) {
          someEndWithS=true;
        }
 else {
          notAllEndWithS=true;
        }
      }
    }
  }
  for (  String name : names) {
    op=new GetCallOperation();
    op.resultType=opType;
    boolean endsWithS=false;
    boolean oneChar=false;
    if (someEndWithS && notAllEndWithS) {
      oneChar=name.trim().length() == 1;
      endsWithS=name.trim().substring(name.length() - 1).toLowerCase().equals(""String_Node_Str"");
      if (endsWithS || oneChar) {
        op.onlyOneForAll=false;
        op.onlyOnePer=false;
      }
 else {
        op.onlyOneForAll=false;
        op.onlyOnePer=true;
      }
    }
    DgOperationInstance.addOperation(name,""String_Node_Str"",envFactory,callerType,returnType,op,parm);
    ops.add(op);
    if (zeroArgToo) {
      op=new GetCallOperation();
      op.resultType=opType;
      if (singularNameReturnsOnlyOne && someEndWithS && notAllEndWithS) {
        if (endsWithS || oneChar) {
          op.onlyOneForAll=false;
          op.onlyOnePer=false;
        }
 else {
          op.onlyOneForAll=false;
          op.onlyOnePer=true;
        }
      }
      DgOperationInstance.addOperation(name,""String_Node_Str"",envFactory,callerType,returnType,op);
      ops.add(op);
    }
  }
  return ops;
}","public static List<GetCallOperation> addOperation(String[] names,EClassifier callerType,EClassifier returnType,EClassifier parmType,String parmName,boolean zeroArgToo,boolean singularNameReturnsOnlyOne,CallReturnType opType,DgEnvironmentFactory envFactory){
  ArrayList<GetCallOperation> ops=new ArrayList<GetCallOperation>();
  GetCallOperation op=null;
  boolean someEndWithS=false;
  boolean notAllEndWithS=false;
  if (singularNameReturnsOnlyOne) {
    for (    String name : names) {
      if (!Utils2.isNullOrEmpty(name)) {
        if (name.trim().substring(name.length() - 1).toLowerCase().equals(""String_Node_Str"")) {
          someEndWithS=true;
        }
 else {
          notAllEndWithS=true;
        }
      }
    }
  }
  for (  String name : names) {
    op=new GetCallOperation();
    op.resultType=opType;
    boolean endsWithS=false;
    boolean oneChar=false;
    EParameter parm=EcoreFactory.eINSTANCE.createEParameter();
    parm.setName(parmName);
    parm.setEType(parmType);
    if (someEndWithS && notAllEndWithS) {
      oneChar=name.trim().length() == 1;
      endsWithS=name.trim().substring(name.length() - 1).toLowerCase().equals(""String_Node_Str"");
      if (endsWithS || oneChar) {
        op.onlyOneForAll=false;
        op.onlyOnePer=false;
      }
 else {
        op.onlyOneForAll=false;
        op.onlyOnePer=true;
      }
    }
    DgOperationInstance.addOperation(name,""String_Node_Str"",envFactory,callerType,returnType,op,parm);
    ops.add(op);
    if (zeroArgToo) {
      op=new GetCallOperation();
      op.resultType=opType;
      if (singularNameReturnsOnlyOne && someEndWithS && notAllEndWithS) {
        if (endsWithS || oneChar) {
          op.onlyOneForAll=false;
          op.onlyOnePer=false;
        }
 else {
          op.onlyOneForAll=false;
          op.onlyOnePer=true;
        }
      }
      DgOperationInstance.addOperation(name,""String_Node_Str"",envFactory,callerType,returnType,op);
      ops.add(op);
    }
  }
  return ops;
}",0.3249243188698285
88660,"protected DgEnvironmentFactory setupEnvironment(){
  resetEnvironment(false);
  addRegexMatchOperation(getEnvironmentFactory());
  addEvalOperation(getEnvironmentFactory(),""String_Node_Str"");
  addEvalOperation(getEnvironmentFactory(),""String_Node_Str"");
  addEvalOperation(getEnvironmentFactory(),""String_Node_Str"");
  addRunOperation(getEnvironmentFactory(),OCLStandardLibraryImpl.INSTANCE.getOclAny());
  addRunOperation(getEnvironmentFactory(),OCLStandardLibraryImpl.INSTANCE.getSequence());
  addRunOperation(getEnvironmentFactory(),null);
  addGetOperation(getEnvironmentFactory());
  addLogOperation(getEnvironmentFactory(),true);
  addLogOperation(getEnvironmentFactory(),false);
  addROperation(getEnvironmentFactory());
  addMOperation(getEnvironmentFactory());
  addTOperation(getEnvironmentFactory());
  addSOperation(getEnvironmentFactory());
  addNOperation(getEnvironmentFactory());
  addOOperation(getEnvironmentFactory());
  addVOperation(getEnvironmentFactory());
  addExpressionOperations(getEnvironmentFactory());
  return getEnvironmentFactory();
}","protected DgEnvironmentFactory setupEnvironment(){
  resetEnvironment(false);
  addRegexMatchOperation(getEnvironmentFactory());
  addEvalOperation(getEnvironmentFactory(),""String_Node_Str"");
  addEvalOperation(getEnvironmentFactory(),""String_Node_Str"");
  addEvalOperation(getEnvironmentFactory(),""String_Node_Str"");
  addRunOperation(getEnvironmentFactory(),OCLStandardLibraryImpl.INSTANCE.getOclAny());
  addRunOperation(getEnvironmentFactory(),OCLStandardLibraryImpl.INSTANCE.getSequence());
  addRunOperation(getEnvironmentFactory(),null);
  addGetOperation(getEnvironmentFactory());
  addLogOperation(getEnvironmentFactory(),true,false);
  addLogOperation(getEnvironmentFactory(),true,true);
  addLogOperation(getEnvironmentFactory(),false,false);
  addROperation(getEnvironmentFactory());
  addMOperation(getEnvironmentFactory());
  addTOperation(getEnvironmentFactory());
  addSOperation(getEnvironmentFactory());
  addNOperation(getEnvironmentFactory());
  addOOperation(getEnvironmentFactory());
  addVOperation(getEnvironmentFactory());
  addExpressionOperations(getEnvironmentFactory());
  return getEnvironmentFactory();
}",0.9301270417422868
88661,"protected static void addLogOperation(DgEnvironmentFactory envFactory,boolean addArg){
  DgOperationInstance doi=new DgOperationInstance();
  doi.setName(""String_Node_Str"");
  doi.setAnnotationName(""String_Node_Str"");
  if (addArg) {
    EParameter parm=EcoreFactory.eINSTANCE.createEParameter();
    parm.setName(""String_Node_Str"");
    doi.addParameter(parm,OCLStandardLibraryImpl.INSTANCE.getOclAny());
  }
  doi.setCallerType(OCLStandardLibraryImpl.INSTANCE.getOclAny());
  doi.setReturnType(OCLStandardLibraryImpl.INSTANCE.getOclAny());
  doi.setOperation(new CallOperation(){
    @Override public Object callOperation(    Object source,    Object[] args){
      if (args != null && args.length > 0) {
        if (args.length == 1) {
          Utils.log(MoreToString.Helper.toString(args[0]));
        }
 else {
          Utils.log(MoreToString.Helper.toString(args));
        }
      }
 else       if (source != null) {
        Utils.log(source);
      }
      return source;
    }
  }
);
  envFactory.getDgEnvironment().addDgOperation(doi);
  envFactory.getDgEvaluationEnvironment().addDgOperation(doi);
}","protected static void addLogOperation(DgEnvironmentFactory envFactory,boolean addArg,boolean addColorArg,boolean asSequence,boolean fromSequence){
  DgOperationInstance doi=new DgOperationInstance();
  doi.setName(""String_Node_Str"");
  doi.setAnnotationName(""String_Node_Str"");
  if (addArg) {
    EParameter parm=EcoreFactory.eINSTANCE.createEParameter();
    parm.setName(""String_Node_Str"");
    if (asSequence) {
      doi.addParameter(parm,OCLStandardLibraryImpl.INSTANCE.getSequence());
    }
 else {
      doi.addParameter(parm,OCLStandardLibraryImpl.INSTANCE.getOclAny());
    }
    if (addColorArg) {
      parm=EcoreFactory.eINSTANCE.createEParameter();
      parm.setName(""String_Node_Str"");
      doi.addParameter(parm,OCLStandardLibraryImpl.INSTANCE.getOclAny());
    }
  }
  if (fromSequence)   doi.setCallerType(OCLStandardLibraryImpl.INSTANCE.getOclAny());
 else   doi.setCallerType(OCLStandardLibraryImpl.INSTANCE.getSequence());
  doi.setReturnType(OCLStandardLibraryImpl.INSTANCE.getOclAny());
  doi.setOperation(new CallOperation(){
    @Override public Object callOperation(    Object source,    Object[] args){
      if (args != null && args.length > 0) {
        Object o=args[0];
        Object colorObj=null;
        if (args.length >= 2) {
          colorObj=args[1];
        }
 else         if (source != null && Utils.isColor(o)) {
          colorObj=args[0];
          o=source;
        }
        Utils.log(o,colorObj);
      }
 else       if (source != null) {
        Utils.log(source);
      }
      return source;
    }
  }
);
  envFactory.getDgEnvironment().addDgOperation(doi);
  envFactory.getDgEvaluationEnvironment().addDgOperation(doi);
}",0.6348637015781923
88662,"private void getHierarchyConsolidated(Class e,int curdepth,Map<Class,Integer> typeUnits,Map<Class,Map<Class,Integer>> consolidated,List<List<DocumentElement>> body,List<String> colspecs){
  List<DocumentElement> row=new ArrayList<DocumentElement>();
  body.add(row);
  String name=DocGenUtils.getIndented(e.getName(),curdepth);
  if (curdepth == 1)   name+=""String_Node_Str"" + name + ""String_Node_Str"";
  row.add(new DBText(name));
  Integer numunit=typeUnits.get(e);
  if (numunit == null)   numunit=1;
  getDocAndProps(e,numunit,row,colspecs);
  getStereotypeProps(e,row);
  body.add(row);
  for (  Element ee : Utils.sortByName(new HashSet<Element>(consolidated.get(e).keySet()))) {
    getHierarchyConsolidated((Class)ee,curdepth + 1,consolidated.get(e),consolidated,body,colspecs);
  }
}","private void getHierarchyConsolidated(Class e,int curdepth,Map<Class,Integer> typeUnits,Map<Class,Map<Class,Integer>> consolidated,List<List<DocumentElement>> body,List<String> colspecs){
  List<DocumentElement> row=new ArrayList<DocumentElement>();
  body.add(row);
  String name=DocGenUtils.getIndented(e.getName(),curdepth);
  if (curdepth == 1)   name+=""String_Node_Str"" + name + ""String_Node_Str"";
  row.add(new DBText(name));
  Integer numunit=typeUnits.get(e);
  if (numunit == null)   numunit=1;
  getDocAndProps(e,numunit,row,colspecs);
  getStereotypeProps(e,row);
  body.add(row);
  Set<Class> set=consolidated.get(e).keySet();
  List<Element> list=Utils.sortByName(Utils2.asList(set,Element.class));
  for (  Element ee : list) {
    getHierarchyConsolidated((Class)ee,curdepth + 1,consolidated.get(e),consolidated,body,colspecs);
  }
}",0.824390243902439
88663,"private void getHierarchy(NamedElement e,int curdepth,Map<Class,Map<Property,Class>> childMap,List<List<DocumentElement>> body,List<String> colspecs){
  List<DocumentElement> row=new ArrayList<DocumentElement>();
  Class type=null;
  if (e instanceof Property)   type=(Class)((Property)e).getType();
 else   type=(Class)e;
  String name=DocGenUtils.getIndented(e.getName(),curdepth);
  if (this.showType && e instanceof Property && ((Property)e).getType() != null)   name+=""String_Node_Str"" + ((Property)e).getType().getName() + ""String_Node_Str"";
  if (curdepth == 1)   name=""String_Node_Str"" + name + ""String_Node_Str"";
  row.add(new DBText(name));
  Integer numunit=1;
  if (e instanceof Property)   numunit=Utils.getMultiplicity((Property)e);
  getDocAndProps(type,numunit,row,colspecs);
  getStereotypeProps(type,row);
  body.add(row);
  for (  Element ee : Utils.sortByName(new HashSet<Element>(childMap.get(type).keySet()))) {
    getHierarchy((NamedElement)ee,curdepth + 1,childMap,body,colspecs);
  }
}","private void getHierarchy(NamedElement e,int curdepth,Map<Class,Map<Property,Class>> childMap,List<List<DocumentElement>> body,List<String> colspecs){
  List<DocumentElement> row=new ArrayList<DocumentElement>();
  Class type=null;
  if (e instanceof Property)   type=(Class)((Property)e).getType();
 else   type=(Class)e;
  String name=DocGenUtils.getIndented(e.getName(),curdepth);
  if (this.showType && e instanceof Property && ((Property)e).getType() != null)   name+=""String_Node_Str"" + ((Property)e).getType().getName() + ""String_Node_Str"";
  if (curdepth == 1)   name=""String_Node_Str"" + name + ""String_Node_Str"";
  row.add(new DBText(name));
  Integer numunit=1;
  if (e instanceof Property)   numunit=Utils.getMultiplicity((Property)e);
  getDocAndProps(type,numunit,row,colspecs);
  getStereotypeProps(type,row);
  body.add(row);
  Set<Property> set=childMap.get(type).keySet();
  List<Element> list=Utils.sortByName(Utils2.asList(set,Element.class));
  for (  Element ee : list) {
    getHierarchy((NamedElement)ee,curdepth + 1,childMap,body,colspecs);
  }
}",0.8495915425276309
88664,"@SuppressWarnings(""String_Node_Str"") private static void addValues(Element e,JSONArray value,JSONObject elementInfo,ValueSpecification vs){
  if (vs instanceof LiteralBoolean) {
    elementInfo.put(""String_Node_Str"",PropertyValueType.LiteralBoolean.toString());
    value.add(((LiteralBoolean)vs).isValue());
  }
 else   if (vs instanceof LiteralString) {
    elementInfo.put(""String_Node_Str"",PropertyValueType.LiteralString.toString());
    value.add(((LiteralString)vs).getValue());
  }
 else   if (vs instanceof LiteralInteger || vs instanceof LiteralUnlimitedNatural) {
    elementInfo.put(""String_Node_Str"",PropertyValueType.LiteralInteger.toString());
    if (vs instanceof LiteralInteger) {
      value.add(((LiteralInteger)vs).getValue());
    }
 else     value.add(((LiteralUnlimitedNatural)vs).getValue());
  }
 else   if (vs instanceof LiteralReal) {
    elementInfo.put(""String_Node_Str"",PropertyValueType.LiteralReal.toString());
    value.add(((LiteralReal)vs).getValue());
  }
 else   if (vs instanceof Expression) {
    elementInfo.put(""String_Node_Str"",PropertyValueType.Expression.toString());
    value.add(RepresentationTextCreator.getRepresentedText(vs));
  }
 else   if (vs instanceof ElementValue) {
    elementInfo.put(""String_Node_Str"",PropertyValueType.ElementValue.toString());
    Element ev=((ElementValue)vs).getElement();
    if (ev != null) {
      value.add(ev.getID());
    }
  }
  elementInfo.put(""String_Node_Str"",value);
}","@SuppressWarnings(""String_Node_Str"") public static void addValues(Element e,JSONArray value,JSONObject elementInfo,ValueSpecification vs){
  if (vs instanceof LiteralBoolean) {
    elementInfo.put(""String_Node_Str"",PropertyValueType.LiteralBoolean.toString());
    value.add(((LiteralBoolean)vs).isValue());
  }
 else   if (vs instanceof LiteralString) {
    elementInfo.put(""String_Node_Str"",PropertyValueType.LiteralString.toString());
    value.add(((LiteralString)vs).getValue());
  }
 else   if (vs instanceof LiteralInteger || vs instanceof LiteralUnlimitedNatural) {
    elementInfo.put(""String_Node_Str"",PropertyValueType.LiteralInteger.toString());
    if (vs instanceof LiteralInteger) {
      value.add(((LiteralInteger)vs).getValue());
    }
 else     value.add(((LiteralUnlimitedNatural)vs).getValue());
  }
 else   if (vs instanceof LiteralReal) {
    elementInfo.put(""String_Node_Str"",PropertyValueType.LiteralReal.toString());
    value.add(((LiteralReal)vs).getValue());
  }
 else   if (vs instanceof Expression) {
    elementInfo.put(""String_Node_Str"",PropertyValueType.Expression.toString());
    value.add(RepresentationTextCreator.getRepresentedText(vs));
  }
 else   if (vs instanceof ElementValue) {
    elementInfo.put(""String_Node_Str"",PropertyValueType.ElementValue.toString());
    Element ev=((ElementValue)vs).getElement();
    if (ev != null) {
      value.add(ev.getID());
    }
  }
 else   if (vs instanceof InstanceValue) {
    elementInfo.put(""String_Node_Str"",PropertyValueType.ElementValue.toString());
    Element ev=((InstanceValue)vs).getInstance();
    if (ev != null) {
      value.add(ExportUtility.getElementID(ev));
    }
  }
  elementInfo.put(""String_Node_Str"",value);
}",0.9127559055118112
88665,"private ValidationRuleViolation valueDiff(Slot e,JSONObject info){
  Debug.outln(""String_Node_Str"" + Utils.slotValueToString(e) + ""String_Node_Str""+ info);
  List<ValueSpecification> vs=e.getValue();
  String valueTypes=(String)info.get(""String_Node_Str"");
  JSONArray value=(JSONArray)info.get(""String_Node_Str"");
  Debug.outln(""String_Node_Str"" + value);
  boolean nullElementValues=areNullElementValues(vs);
  if ((vs == null || vs.isEmpty() || nullElementValues) && (valueTypes == null || value == null || value.size() == 0)) {
    Debug.outln(""String_Node_Str"" + vs + ""String_Node_Str""+ valueTypes+ ""String_Node_Str""+ value);
    return null;
  }
  if (vs != null && vs.size() > 0 && !nullElementValues && (valueTypes == null || value == null || value.size() == 0)) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"");
    v.addAction(new ImportValue(e,null,null,result));
    v.addAction(new ExportValue(e));
    Debug.outln(""String_Node_Str"" + v);
    return v;
  }
  if ((vs == null || vs.isEmpty() || nullElementValues) && value != null && value.size() > 0 && valueTypes != null) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + truncate(value.toString()));
    v.addAction(new ImportValue(e,value,PropertyValueType.valueOf(valueTypes),result));
    v.addAction(new ExportValue(e));
    Debug.outln(""String_Node_Str"" + v);
    return v;
  }
  if ((vs.size() != value.size())) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"");
    v.addAction(new ImportValue(e,value,PropertyValueType.valueOf(valueTypes),result));
    v.addAction(new ExportValue(e));
    Debug.outln(""String_Node_Str"" + v);
    return v;
  }
  PropertyValueType valueType=PropertyValueType.valueOf(valueTypes);
  String message=""String_Node_Str"";
  String typeMismatchMessage=""String_Node_Str"";
  String badMessage=""String_Node_Str"" + truncate(RepresentationTextCreator.getRepresentedText(e)) + ""String_Node_Str""+ truncate(value.toString());
  if (valueType == PropertyValueType.LiteralString) {
    if (vs.get(0) instanceof LiteralString) {
      for (int i=0; i < vs.size(); i++) {
        String modelString=Utils.stripHtmlWrapper(((LiteralString)vs.get(i)).getValue()).replace(""String_Node_Str"",""String_Node_Str"");
        String webString=((String)value.get(i)).replace(""String_Node_Str"",""String_Node_Str"");
        value.set(i,webString);
        if (!modelString.equals(webString)) {
          message=badMessage;
          break;
        }
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.LiteralBoolean) {
    if (vs.get(0) instanceof LiteralBoolean) {
      for (int i=0; i < vs.size(); i++) {
        if (((Boolean)value.get(i)) != (((LiteralBoolean)vs.get(i)).isValue())) {
          message=badMessage;
          break;
        }
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.LiteralInteger) {
    if (vs.get(0) instanceof LiteralInteger) {
      for (int i=0; i < vs.size(); i++) {
        if (((LiteralInteger)vs.get(i)).getValue() != ((Long)value.get(i)).intValue()) {
          message=badMessage;
          break;
        }
      }
    }
 else     if (vs.get(0) instanceof LiteralUnlimitedNatural) {
      for (int i=0; i < vs.size(); i++) {
        if (((LiteralUnlimitedNatural)vs.get(i)).getValue() != ((Long)value.get(i)).intValue()) {
          message=badMessage;
          valueType=PropertyValueType.LiteralUnlimitedNatural;
          break;
        }
      }
    }
 else {
      message=""String_Node_Str"";
    }
  }
 else   if (valueType == PropertyValueType.LiteralReal) {
    if (vs.get(0) instanceof LiteralReal) {
      for (int i=0; i < vs.size(); i++) {
        Double webValue=null;
        if (value.get(i) instanceof Long)         webValue=Double.parseDouble(((Long)value.get(i)).toString());
 else         webValue=(Double)value.get(i);
        if (((LiteralReal)vs.get(i)).getValue() != webValue) {
          message=badMessage;
          break;
        }
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.ElementValue) {
    if (vs.get(0) instanceof ElementValue) {
      for (int i=0; i < vs.size(); i++) {
        if (((ElementValue)vs.get(i)).getElement() == null || !((ElementValue)vs.get(i)).getElement().getID().equals(value.get(i))) {
          message=badMessage;
          break;
        }
      }
    }
 else     message=typeMismatchMessage;
  }
 else   if (valueType == PropertyValueType.Expression) {
  }
 else {
  }
  if (!message.equals(""String_Node_Str"")) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,message);
    v.addAction(new ImportValue(e,value,valueType,result));
    v.addAction(new ExportValue(e));
    Debug.outln(""String_Node_Str"" + v);
    return v;
  }
  Debug.outln(""String_Node_Str"");
  return null;
}","private ValidationRuleViolation valueDiff(Slot e,JSONObject info){
  Debug.outln(""String_Node_Str"" + Utils.slotValueToString(e) + ""String_Node_Str""+ info);
  List<ValueSpecification> vs=e.getValue();
  String valueTypes=(String)info.get(""String_Node_Str"");
  JSONArray value=(JSONArray)info.get(""String_Node_Str"");
  Debug.outln(""String_Node_Str"" + value);
  boolean nullElementValues=areNullElementValues(vs);
  if ((vs == null || vs.isEmpty() || nullElementValues) && (valueTypes == null || value == null || value.size() == 0)) {
    Debug.outln(""String_Node_Str"" + vs + ""String_Node_Str""+ valueTypes+ ""String_Node_Str""+ value);
    return null;
  }
  if (vs != null && vs.size() > 0 && !nullElementValues && (valueTypes == null || value == null || value.size() == 0)) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"");
    v.addAction(new ImportValue(e,null,null,result));
    v.addAction(new ExportValue(e));
    Debug.outln(""String_Node_Str"" + v);
    return v;
  }
  if ((vs == null || vs.isEmpty() || nullElementValues) && value != null && value.size() > 0 && valueTypes != null) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"" + truncate(value.toString()));
    v.addAction(new ImportValue(e,value,PropertyValueType.valueOf(valueTypes),result));
    v.addAction(new ExportValue(e));
    Debug.outln(""String_Node_Str"" + v);
    return v;
  }
  if ((vs.size() != value.size())) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,""String_Node_Str"");
    v.addAction(new ImportValue(e,value,PropertyValueType.valueOf(valueTypes),result));
    v.addAction(new ExportValue(e));
    Debug.outln(""String_Node_Str"" + v);
    return v;
  }
  PropertyValueType valueType=PropertyValueType.valueOf(valueTypes);
  String message=""String_Node_Str"";
  String typeMismatchMessage=""String_Node_Str"";
  String badMessage=""String_Node_Str"" + truncate(RepresentationTextCreator.getRepresentedText(e)) + ""String_Node_Str""+ truncate(value.toString());
  if (valueType == PropertyValueType.LiteralString) {
    if (vs.get(0) instanceof LiteralString) {
      for (int i=0; i < vs.size(); i++) {
        String modelString=Utils.stripHtmlWrapper(((LiteralString)vs.get(i)).getValue()).replace(""String_Node_Str"",""String_Node_Str"");
        String webString=((String)value.get(i)).replace(""String_Node_Str"",""String_Node_Str"");
        value.set(i,webString);
        if (!modelString.equals(webString)) {
          message=badMessage;
          break;
        }
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.LiteralBoolean) {
    if (vs.get(0) instanceof LiteralBoolean) {
      for (int i=0; i < vs.size(); i++) {
        if (((Boolean)value.get(i)) != (((LiteralBoolean)vs.get(i)).isValue())) {
          message=badMessage;
          break;
        }
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.LiteralInteger) {
    if (vs.get(0) instanceof LiteralInteger) {
      for (int i=0; i < vs.size(); i++) {
        if (((LiteralInteger)vs.get(i)).getValue() != ((Long)value.get(i)).intValue()) {
          message=badMessage;
          break;
        }
      }
    }
 else     if (vs.get(0) instanceof LiteralUnlimitedNatural) {
      for (int i=0; i < vs.size(); i++) {
        if (((LiteralUnlimitedNatural)vs.get(i)).getValue() != ((Long)value.get(i)).intValue()) {
          message=badMessage;
          valueType=PropertyValueType.LiteralUnlimitedNatural;
          break;
        }
      }
    }
 else {
      message=""String_Node_Str"";
    }
  }
 else   if (valueType == PropertyValueType.LiteralReal) {
    if (vs.get(0) instanceof LiteralReal) {
      for (int i=0; i < vs.size(); i++) {
        Double webValue=null;
        if (value.get(i) instanceof Long)         webValue=Double.parseDouble(((Long)value.get(i)).toString());
 else         webValue=(Double)value.get(i);
        if (((LiteralReal)vs.get(i)).getValue() != webValue) {
          message=badMessage;
          break;
        }
      }
    }
 else {
      message=typeMismatchMessage;
    }
  }
 else   if (valueType == PropertyValueType.ElementValue) {
    if (vs.get(0) instanceof ElementValue) {
      for (int i=0; i < vs.size(); i++) {
        if (((ElementValue)vs.get(i)).getElement() == null || !ExportUtility.getElementID(((ElementValue)vs.get(i)).getElement()).equals(value.get(i))) {
          message=badMessage;
          break;
        }
      }
    }
 else     if (vs.get(0) instanceof InstanceValue) {
      for (int i=0; i < vs.size(); i++) {
        if (((InstanceValue)vs.get(i)).getInstance() == null || !ExportUtility.getElementID(((InstanceValue)vs.get(i)).getInstance()).equals(value.get(i))) {
          message=badMessage;
          break;
        }
      }
    }
 else     message=typeMismatchMessage;
  }
 else   if (valueType == PropertyValueType.Expression) {
  }
 else {
  }
  if (!message.equals(""String_Node_Str"")) {
    ValidationRuleViolation v=new ValidationRuleViolation(e,message);
    v.addAction(new ImportValue(e,value,valueType,result));
    v.addAction(new ExportValue(e));
    Debug.outln(""String_Node_Str"" + v);
    return v;
  }
  Debug.outln(""String_Node_Str"");
  return null;
}",0.9596167008898016
88666,"@SuppressWarnings(""String_Node_Str"") private JSONObject getInfo(Element e){
  JSONObject elementInfo=new JSONObject();
  JSONArray value=new JSONArray();
  if (e instanceof Property) {
    ValueSpecification vs=((Property)e).getDefaultValue();
    if (vs != null) {
      addValues(e,value,elementInfo,vs);
    }
  }
 else   if (e instanceof Slot) {
    List<ValueSpecification> vsl=((Slot)e).getValue();
    if (vsl != null && vsl.size() > 0) {
      for (      ValueSpecification vs : vsl) {
        addValues(e,value,elementInfo,vs);
      }
    }
  }
  elementInfo.put(""String_Node_Str"",ExportUtility.getElementID(e));
  return elementInfo;
}","@SuppressWarnings(""String_Node_Str"") private JSONObject getInfo(Element e){
  JSONObject elementInfo=new JSONObject();
  JSONArray value=new JSONArray();
  if (e instanceof Property) {
    ValueSpecification vs=((Property)e).getDefaultValue();
    if (vs != null) {
      ExportUtility.addValues(e,value,elementInfo,vs);
    }
  }
 else   if (e instanceof Slot) {
    List<ValueSpecification> vsl=((Slot)e).getValue();
    if (vsl != null && vsl.size() > 0) {
      for (      ValueSpecification vs : vsl) {
        ExportUtility.addValues(e,value,elementInfo,vs);
      }
    }
  }
  elementInfo.put(""String_Node_Str"",ExportUtility.getElementID(e));
  return elementInfo;
}",0.9787878787878788
88667,"@Override public void execute(Collection<Annotation> annos){
  SessionManager.getInstance().createSession(""String_Node_Str"");
  Project prj=Application.getInstance().getProject();
  Collection<Annotation> toremove=new HashSet<Annotation>();
  try {
    for (    Annotation anno : annos) {
      Element e=(Element)anno.getTarget();
      if (!e.isEditable()) {
        continue;
      }
      String ownerID=(String)((JSONObject)((JSONObject)result.get(""String_Node_Str"")).get(e.getID())).get(""String_Node_Str"");
      if (ownerID == null)       continue;
      Element own=(Element)prj.getElementByID(ownerID);
      if (own != null)       e.setOwner(own);
      toremove.add(anno);
    }
    SessionManager.getInstance().closeSession();
    saySuccess();
    this.removeViolationsAndUpdateWindow(toremove);
  }
 catch (  Exception ex) {
    SessionManager.getInstance().cancelSession();
    Utils.printException(ex);
  }
}","@Override public void execute(Collection<Annotation> annos){
  SessionManager.getInstance().createSession(""String_Node_Str"");
  Project prj=Application.getInstance().getProject();
  Collection<Annotation> toremove=new HashSet<Annotation>();
  try {
    for (    Annotation anno : annos) {
      Element e=(Element)anno.getTarget();
      if (!e.isEditable()) {
        continue;
      }
      String ownerID=(String)((Map<String,JSONObject>)result.get(""String_Node_Str"")).get(e.getID()).get(""String_Node_Str"");
      if (ownerID == null)       continue;
      Element own=(Element)prj.getElementByID(ownerID);
      if (own != null)       e.setOwner(own);
      toremove.add(anno);
    }
    SessionManager.getInstance().closeSession();
    saySuccess();
    this.removeViolationsAndUpdateWindow(toremove);
  }
 catch (  Exception ex) {
    SessionManager.getInstance().cancelSession();
    Utils.printException(ex);
  }
}",0.9859154929577464
88668,"@SuppressWarnings(""String_Node_Str"") @Override public void actionPerformed(ActionEvent e){
  if (!element.isEditable()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  SessionManager.getInstance().createSession(""String_Node_Str"");
  try {
    element.setBody(Utils.addHtmlWrapper(doc));
    element.getAnnotatedElement().clear();
    JSONArray annotatedElements=(JSONArray)((JSONObject)((JSONObject)result.get(""String_Node_Str"")).get(element.getID())).get(""String_Node_Str"");
    if (annotatedElements != null) {
      for (      String eid : (List<String>)annotatedElements) {
        Element aelement=(Element)Application.getInstance().getProject().getElementByID(eid);
        if (aelement != null)         element.getAnnotatedElement().add(aelement);
      }
    }
    SessionManager.getInstance().closeSession();
    saySuccess();
    this.removeViolationAndUpdateWindow();
  }
 catch (  Exception ex) {
    SessionManager.getInstance().cancelSession();
    Utils.printException(ex);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void actionPerformed(ActionEvent e){
  if (!element.isEditable()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"");
    return;
  }
  SessionManager.getInstance().createSession(""String_Node_Str"");
  try {
    element.setBody(Utils.addHtmlWrapper(doc));
    element.getAnnotatedElement().clear();
    JSONArray annotatedElements=(JSONArray)((Map<String,JSONObject>)result.get(""String_Node_Str"")).get(element.getID()).get(""String_Node_Str"");
    if (annotatedElements != null) {
      for (      String eid : (List<String>)annotatedElements) {
        Element aelement=(Element)Application.getInstance().getProject().getElementByID(eid);
        if (aelement != null)         element.getAnnotatedElement().add(aelement);
      }
    }
    SessionManager.getInstance().closeSession();
    saySuccess();
    this.removeViolationAndUpdateWindow();
  }
 catch (  Exception ex) {
    SessionManager.getInstance().cancelSession();
    Utils.printException(ex);
  }
}",0.9873908826382152
88669,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(Collection<Annotation> annos){
  SessionManager.getInstance().createSession(""String_Node_Str"");
  Collection<Annotation> toremove=new HashSet<Annotation>();
  try {
    for (    Annotation anno : annos) {
      Element e=(Element)anno.getTarget();
      if (!e.isEditable()) {
        continue;
      }
      String resultDoc=(String)((JSONObject)((JSONObject)result.get(""String_Node_Str"")).get(e.getID())).get(""String_Node_Str"");
      if (resultDoc == null)       continue;
      ((Comment)e).setBody(Utils.addHtmlWrapper(resultDoc));
      ((Comment)e).getAnnotatedElement().clear();
      JSONArray annotatedElements=(JSONArray)((JSONObject)((JSONObject)result.get(""String_Node_Str"")).get(e.getID())).get(""String_Node_Str"");
      if (annotatedElements != null) {
        for (        String eid : (List<String>)annotatedElements) {
          Element aelement=(Element)Application.getInstance().getProject().getElementByID(eid);
          if (aelement != null)           ((Comment)e).getAnnotatedElement().add(aelement);
        }
      }
      toremove.add(anno);
    }
    SessionManager.getInstance().closeSession();
    saySuccess();
    this.removeViolationsAndUpdateWindow(toremove);
  }
 catch (  Exception ex) {
    SessionManager.getInstance().cancelSession();
    Utils.printException(ex);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(Collection<Annotation> annos){
  SessionManager.getInstance().createSession(""String_Node_Str"");
  Collection<Annotation> toremove=new HashSet<Annotation>();
  try {
    for (    Annotation anno : annos) {
      Element e=(Element)anno.getTarget();
      if (!e.isEditable()) {
        continue;
      }
      String resultDoc=(String)((Map<String,JSONObject>)result.get(""String_Node_Str"")).get(e.getID()).get(""String_Node_Str"");
      if (resultDoc == null)       continue;
      ((Comment)e).setBody(Utils.addHtmlWrapper(resultDoc));
      ((Comment)e).getAnnotatedElement().clear();
      JSONArray annotatedElements=(JSONArray)((JSONObject)((JSONObject)result.get(""String_Node_Str"")).get(e.getID())).get(""String_Node_Str"");
      if (annotatedElements != null) {
        for (        String eid : (List<String>)annotatedElements) {
          Element aelement=(Element)Application.getInstance().getProject().getElementByID(eid);
          if (aelement != null)           ((Comment)e).getAnnotatedElement().add(aelement);
        }
      }
      toremove.add(anno);
    }
    SessionManager.getInstance().closeSession();
    saySuccess();
    this.removeViolationsAndUpdateWindow(toremove);
  }
 catch (  Exception ex) {
    SessionManager.getInstance().cancelSession();
    Utils.printException(ex);
  }
}",0.7934545454545454
88670,"@Override public void execute(Collection<Annotation> annos){
  SessionManager.getInstance().createSession(""String_Node_Str"");
  Collection<Annotation> toremove=new HashSet<Annotation>();
  try {
    for (    Annotation anno : annos) {
      Element e=(Element)anno.getTarget();
      if (!e.isEditable()) {
        continue;
      }
      String resultDoc=(String)((JSONObject)((JSONObject)result.get(""String_Node_Str"")).get(e.getID())).get(""String_Node_Str"");
      if (resultDoc == null)       continue;
      ModelHelper.setComment(e,Utils.addHtmlWrapper(resultDoc));
      toremove.add(anno);
    }
    SessionManager.getInstance().closeSession();
    saySuccess();
    this.removeViolationsAndUpdateWindow(toremove);
  }
 catch (  Exception ex) {
    SessionManager.getInstance().cancelSession();
    Utils.printException(ex);
  }
}","@Override public void execute(Collection<Annotation> annos){
  SessionManager.getInstance().createSession(""String_Node_Str"");
  Collection<Annotation> toremove=new HashSet<Annotation>();
  try {
    for (    Annotation anno : annos) {
      Element e=(Element)anno.getTarget();
      if (!e.isEditable()) {
        continue;
      }
      String resultDoc=(String)((Map<String,JSONObject>)result.get(""String_Node_Str"")).get(e.getID()).get(""String_Node_Str"");
      if (resultDoc == null)       continue;
      ModelHelper.setComment(e,Utils.addHtmlWrapper(resultDoc));
      toremove.add(anno);
    }
    SessionManager.getInstance().closeSession();
    saySuccess();
    this.removeViolationsAndUpdateWindow(toremove);
  }
 catch (  Exception ex) {
    SessionManager.getInstance().cancelSession();
    Utils.printException(ex);
  }
}",0.9844497607655502
88671,"@Override public void execute(Collection<Annotation> annos){
  SessionManager.getInstance().createSession(""String_Node_Str"");
  Collection<Annotation> toremove=new HashSet<Annotation>();
  try {
    for (    Annotation anno : annos) {
      Element e=(Element)anno.getTarget();
      if (!e.isEditable()) {
        continue;
      }
      String resultName=ExportUtility.unescapeHtml((String)((JSONObject)((JSONObject)result.get(""String_Node_Str"")).get(e.getID())).get(""String_Node_Str""));
      if (resultName == null)       continue;
      ((NamedElement)e).setName(resultName);
      toremove.add(anno);
    }
    SessionManager.getInstance().closeSession();
    saySuccess();
    this.removeViolationsAndUpdateWindow(toremove);
  }
 catch (  Exception ex) {
    SessionManager.getInstance().cancelSession();
  }
}","@Override public void execute(Collection<Annotation> annos){
  SessionManager.getInstance().createSession(""String_Node_Str"");
  Collection<Annotation> toremove=new HashSet<Annotation>();
  try {
    for (    Annotation anno : annos) {
      Element e=(Element)anno.getTarget();
      if (!e.isEditable()) {
        continue;
      }
      String resultName=ExportUtility.unescapeHtml((String)((Map<String,JSONObject>)result.get(""String_Node_Str"")).get(e.getID()).get(""String_Node_Str""));
      if (resultName == null)       continue;
      ((NamedElement)e).setName(resultName);
      toremove.add(anno);
    }
    SessionManager.getInstance().closeSession();
    saySuccess();
    this.removeViolationsAndUpdateWindow(toremove);
  }
 catch (  Exception ex) {
    SessionManager.getInstance().cancelSession();
  }
}",0.9840686274509804
88672,"@Override public void actionPerformed(ActionEvent e){
  if (!element.isEditable()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
    return;
  }
  SessionManager.getInstance().createSession(""String_Node_Str"");
  try {
    String sourceId=(String)((JSONObject)((JSONObject)result.get(""String_Node_Str"")).get(element.getID())).get(""String_Node_Str"");
    String targetId=(String)((JSONObject)((JSONObject)result.get(""String_Node_Str"")).get(element.getID())).get(""String_Node_Str"");
    Element source=(Element)Application.getInstance().getProject().getElementByID(sourceId);
    Element target=(Element)Application.getInstance().getProject().getElementByID(targetId);
    ModelHelper.setClientElement(element,source);
    ModelHelper.setSupplierElement(element,target);
    SessionManager.getInstance().closeSession();
    saySuccess();
    this.removeViolationAndUpdateWindow();
  }
 catch (  Exception ex) {
    SessionManager.getInstance().cancelSession();
    Utils.printException(ex);
  }
}","@Override public void actionPerformed(ActionEvent e){
  if (!element.isEditable()) {
    Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
    return;
  }
  SessionManager.getInstance().createSession(""String_Node_Str"");
  try {
    String sourceId=(String)((Map<String,JSONObject>)result.get(""String_Node_Str"")).get(element.getID()).get(""String_Node_Str"");
    String targetId=(String)((Map<String,JSONObject>)result.get(""String_Node_Str"")).get(element.getID()).get(""String_Node_Str"");
    Element source=(Element)Application.getInstance().getProject().getElementByID(sourceId);
    Element target=(Element)Application.getInstance().getProject().getElementByID(targetId);
    ModelHelper.setClientElement(element,source);
    ModelHelper.setSupplierElement(element,target);
    SessionManager.getInstance().closeSession();
    saySuccess();
    this.removeViolationAndUpdateWindow();
  }
 catch (  Exception ex) {
    SessionManager.getInstance().cancelSession();
    Utils.printException(ex);
  }
}",0.8742911153119093
88673,"@Override public void execute(Collection<Annotation> annos){
  SessionManager.getInstance().createSession(""String_Node_Str"");
  Collection<Annotation> toremove=new HashSet<Annotation>();
  try {
    for (    Annotation anno : annos) {
      Element e=(Element)anno.getTarget();
      if (!e.isEditable()) {
        continue;
      }
      String sourceId=(String)((JSONObject)((JSONObject)result.get(""String_Node_Str"")).get(e.getID())).get(""String_Node_Str"");
      String targetId=(String)((JSONObject)((JSONObject)result.get(""String_Node_Str"")).get(e.getID())).get(""String_Node_Str"");
      Element source=(Element)Application.getInstance().getProject().getElementByID(sourceId);
      Element target=(Element)Application.getInstance().getProject().getElementByID(targetId);
      ModelHelper.setClientElement(e,source);
      ModelHelper.setSupplierElement(e,target);
      toremove.add(anno);
    }
    SessionManager.getInstance().closeSession();
    saySuccess();
    this.removeViolationsAndUpdateWindow(toremove);
  }
 catch (  Exception ex) {
    SessionManager.getInstance().cancelSession();
  }
}","@Override public void execute(Collection<Annotation> annos){
  SessionManager.getInstance().createSession(""String_Node_Str"");
  Collection<Annotation> toremove=new HashSet<Annotation>();
  try {
    for (    Annotation anno : annos) {
      Element e=(Element)anno.getTarget();
      if (!e.isEditable()) {
        continue;
      }
      String sourceId=(String)((Map<String,JSONObject>)result.get(""String_Node_Str"")).get(e.getID()).get(""String_Node_Str"");
      String targetId=(String)((Map<String,JSONObject>)result.get(""String_Node_Str"")).get(e.getID()).get(""String_Node_Str"");
      Element source=(Element)Application.getInstance().getProject().getElementByID(sourceId);
      Element target=(Element)Application.getInstance().getProject().getElementByID(targetId);
      ModelHelper.setClientElement(e,source);
      ModelHelper.setSupplierElement(e,target);
      toremove.add(anno);
    }
    SessionManager.getInstance().closeSession();
    saySuccess();
    this.removeViolationsAndUpdateWindow(toremove);
  }
 catch (  Exception ex) {
    SessionManager.getInstance().cancelSession();
  }
}",0.8832579185520362
88674,"@Override public void execute(Collection<Annotation> annos){
  SessionManager.getInstance().createSession(""String_Node_Str"");
  Collection<Annotation> toremove=new HashSet<Annotation>();
  try {
    for (    Annotation anno : annos) {
      Element e=(Element)anno.getTarget();
      if (!e.isEditable()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
        continue;
      }
      PropertyValueType valueType=PropertyValueType.valueOf((String)((JSONObject)((JSONObject)result.get(""String_Node_Str"")).get(e.getID())).get(""String_Node_Str""));
      JSONArray vals=(JSONArray)((JSONObject)((JSONObject)result.get(""String_Node_Str"")).get(e.getID())).get(""String_Node_Str"");
      if (e instanceof Property) {
        if (vals == null || vals.isEmpty()) {
          ((Property)e).setDefaultValue(null);
        }
 else {
          update((Property)e,valueType,vals.get(0));
        }
      }
 else       if (e instanceof Slot) {
        if (values == null || values.isEmpty()) {
          ((Slot)element).getValue().clear();
        }
 else {
          update((Slot)e,type,values);
        }
      }
      toremove.add(anno);
    }
    SessionManager.getInstance().closeSession();
    saySuccess();
    this.removeViolationsAndUpdateWindow(toremove);
  }
 catch (  Exception ex) {
    SessionManager.getInstance().cancelSession();
    Utils.printException(ex);
  }
}","@Override public void execute(Collection<Annotation> annos){
  SessionManager.getInstance().createSession(""String_Node_Str"");
  Collection<Annotation> toremove=new HashSet<Annotation>();
  try {
    for (    Annotation anno : annos) {
      Element e=(Element)anno.getTarget();
      if (!e.isEditable()) {
        Application.getInstance().getGUILog().log(""String_Node_Str"" + element.getHumanName() + ""String_Node_Str"");
        continue;
      }
      PropertyValueType valueType=PropertyValueType.valueOf((String)((Map<String,JSONObject>)result.get(""String_Node_Str"")).get(e.getID()).get(""String_Node_Str""));
      JSONArray vals=(JSONArray)((Map<String,JSONObject>)result.get(""String_Node_Str"")).get(e.getID()).get(""String_Node_Str"");
      if (e instanceof Property) {
        if (vals == null || vals.isEmpty()) {
          ((Property)e).setDefaultValue(null);
        }
 else {
          update((Property)e,valueType,vals.get(0));
        }
      }
 else       if (e instanceof Slot) {
        if (values == null || values.isEmpty()) {
          ((Slot)element).getValue().clear();
        }
 else {
          update((Slot)e,type,values);
        }
      }
      toremove.add(anno);
    }
    SessionManager.getInstance().closeSession();
    saySuccess();
    this.removeViolationsAndUpdateWindow(toremove);
  }
 catch (  Exception ex) {
    SessionManager.getInstance().cancelSession();
    Utils.printException(ex);
  }
}",0.9078212290502792
88675,"@Override public List<DocumentElement> visit(boolean forViewEditor,String outputDir){
  List<DocumentElement> res=new ArrayList<DocumentElement>();
  if (!init())   return res;
  DBTable table=new DBTable();
  Node<String,MissionComponent> root=getRoot();
  List<Element> chars=Utils.sortByName(getLibraryCharacterizations());
  List<List<DocumentElement>> grid=new ArrayList<List<DocumentElement>>();
  List<List<DocumentElement>> headers=new ArrayList<List<DocumentElement>>();
  addMissionRows(root,chars,grid,1);
  table.setBody(grid);
  List<DocumentElement> headerrow=new ArrayList<DocumentElement>();
  headerrow.add(new DBText(""String_Node_Str""));
  headerrow.add(new DBText(""String_Node_Str""));
  for (  Element charr : chars) {
    headerrow.add(new DBText(((NamedElement)charr).getName()));
  }
  headers.add(headerrow);
  table.setHeaders(headers);
  table.setCols(headerrow.size());
  table.setTitle(""String_Node_Str"");
  res.add(table);
  return res;
}","@Override public List<DocumentElement> visit(boolean forViewEditor,String outputDir){
  List<DocumentElement> res=new ArrayList<DocumentElement>();
  if (!init())   return res;
  DBTable table=new DBTable();
  Node<String,MissionComponent> root=getRoot();
  List<Element> chars=Utils.sortByName(Utils2.asList(getLibraryCharacterizations(),Element.class));
  List<List<DocumentElement>> grid=new ArrayList<List<DocumentElement>>();
  List<List<DocumentElement>> headers=new ArrayList<List<DocumentElement>>();
  addMissionRows(root,chars,grid,1);
  table.setBody(grid);
  List<DocumentElement> headerrow=new ArrayList<DocumentElement>();
  headerrow.add(new DBText(""String_Node_Str""));
  headerrow.add(new DBText(""String_Node_Str""));
  for (  Element charr : chars) {
    headerrow.add(new DBText(((NamedElement)charr).getName()));
  }
  headers.add(headerrow);
  table.setHeaders(headers);
  table.setCols(headerrow.size());
  table.setTitle(""String_Node_Str"");
  res.add(table);
  return res;
}",0.9852116267210608
88676,"public EditableListPanel(String msg,Object[] items){
  super(new SpringLayout());
  SpringLayout layout=(SpringLayout)getLayout();
  setItems(items);
  JLabel label=new JLabel(msg);
  resultPane=createEditorPane(""String_Node_Str"");
  resultScrollPane=new JScrollPane(resultPane,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  add(label);
  add(jcb);
  add(resultScrollPane);
  layout.putConstraint(SpringLayout.WEST,label,5,SpringLayout.WEST,this);
  layout.putConstraint(SpringLayout.NORTH,jcb,5,SpringLayout.SOUTH,label);
  layout.putConstraint(SpringLayout.WEST,jcb,5,SpringLayout.WEST,this);
  layout.putConstraint(SpringLayout.EAST,jcb,5,SpringLayout.EAST,this);
  layout.putConstraint(SpringLayout.NORTH,resultScrollPane,5,SpringLayout.SOUTH,jcb);
  layout.putConstraint(SpringLayout.WEST,resultScrollPane,5,SpringLayout.WEST,this);
  layout.putConstraint(SpringLayout.EAST,resultScrollPane,5,SpringLayout.EAST,this);
  layout.putConstraint(SpringLayout.SOUTH,resultScrollPane,5,SpringLayout.SOUTH,this);
  addAncestorListener(new RequestFocusListener());
}","public EditableListPanel(String msg,Object[] items){
  super(new SpringLayout());
  SpringLayout layout=(SpringLayout)getLayout();
  setItems(items);
  JLabel label=new JLabel(msg);
  resultPane=createEditorPane(""String_Node_Str"");
  resultScrollPane=new JScrollPane(resultPane,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  add(label);
  add(jcb);
  add(resultScrollPane);
  layout.putConstraint(SpringLayout.NORTH,label,5,SpringLayout.NORTH,this);
  layout.putConstraint(SpringLayout.WEST,label,5,SpringLayout.WEST,this);
  layout.putConstraint(SpringLayout.NORTH,jcb,5,SpringLayout.SOUTH,label);
  layout.putConstraint(SpringLayout.WEST,jcb,5,SpringLayout.WEST,this);
  layout.putConstraint(SpringLayout.EAST,jcb,-5,SpringLayout.EAST,this);
  layout.putConstraint(SpringLayout.NORTH,resultScrollPane,5,SpringLayout.SOUTH,jcb);
  layout.putConstraint(SpringLayout.WEST,resultScrollPane,5,SpringLayout.WEST,this);
  layout.putConstraint(SpringLayout.EAST,resultScrollPane,-5,SpringLayout.EAST,this);
  layout.putConstraint(SpringLayout.SOUTH,resultScrollPane,-5,SpringLayout.SOUTH,this);
  addAncestorListener(new RequestFocusListener());
}",0.9659041864479933
88677,"public static List<Element> getConstraintElements(Object constrainedObject){
  List<Element> constraintElements=new ArrayList<Element>();
  if (constrainedObject instanceof Element) {
    Element constrainedElement=((Element)constrainedObject);
    if (StereotypesHelper.hasStereotypeOrDerived(constrainedElement,DocGen3Profile.constraintStereotype)) {
      constraintElements.add(constrainedElement);
    }
    if (constrainedElement instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Constraint) {
      constraintElements.add(constrainedElement);
    }
    Collection<com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Constraint> constrs=constrainedElement.get_constraintOfConstrainedElement();
    if (constrs != null)     constraintElements.addAll(constrs);
    constraintElements.addAll(Utils.collectRelatedElementsByStereotypeString(constrainedElement,DocGen3Profile.constraintStereotype,0,true,1));
    for (    Element comment : BasicConstraint.getComments(constrainedElement)) {
      if (StereotypesHelper.hasStereotypeOrDerived(comment,DocGen3Profile.constraintStereotype)) {
        constraintElements.add(comment);
      }
    }
  }
  if (constrainedObject instanceof Collection) {
    for (    Object o : (Collection<?>)constrainedObject) {
      constraintElements.addAll(getConstraintElements(o));
    }
  }
  return constraintElements;
}","/** 
 * Return the constraints on this element. Below, C is a constraint (UML or <<Constraint>>), and X is an element. <ol> <li>Not dealing with connectors for parameterizing constraints (such as in parametric diagrams), so these may be processed incorrectly. <li>If C has an association A with X, and A’s member end, M, is C, or M.type is C, then C constrains X. <li>If C is a comment or owned by a comment, and X is an annotated element of the comment, then C constrains X. <li>Otherwise, C does not constrain X. <li>C is evaluated on collection X both as a whole and on each element. <ol> <li>C is evaluated against the collection of constrained elements first. <li>If C is not satisfied, it is evaluated against each element and returns false if any return false, true if all return true, and null (invalid) otherwise. </ol> <li>If X is a DocGen action/activity, C is evaluated against the output of X (as a single list or as individuals as stated above). <ul> <li>There is no means, yet, of distinguishing whether C is intended for X or its DocGen output, so it is evaluated for both contexts. <li>Since these contexts (DocGen and “static”) are evaluated separately, it is likely to fail in the unintended context. </ul> </ol>
 * @param constrainedObject
 * @return a list of constraint elements that constrain theconstrainedObject
 */
public static List<Element> getConstraintElements(Object constrainedObject){
  LinkedHashSet<Element> constraintElements=new LinkedHashSet<Element>();
  if (constrainedObject instanceof Element) {
    Element constrainedElement=((Element)constrainedObject);
    if (StereotypesHelper.hasStereotypeOrDerived(constrainedElement,DocGen3Profile.constraintStereotype) || constrainedElement instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Constraint) {
      if (!(constrainedElement instanceof Comment) || Utils2.isNullOrEmpty(((Comment)constrainedElement).getAnnotatedElement())) {
        constraintElements.add(constrainedElement);
      }
    }
    Collection<com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Constraint> constrs=constrainedElement.get_constraintOfConstrainedElement();
    if (constrs != null)     constraintElements.addAll(constrs);
    for (    Element comment : BasicConstraint.getComments(constrainedElement)) {
      if (StereotypesHelper.hasStereotypeOrDerived(comment,DocGen3Profile.constraintStereotype)) {
        constraintElements.add(comment);
      }
    }
  }
  if (constrainedObject instanceof Collection) {
    for (    Object o : (Collection<?>)constrainedObject) {
      constraintElements.addAll(getConstraintElements(o));
    }
  }
  return Utils2.toList(constraintElements);
}",0.137605563835072
88678,"/** 
 * Return the constraints on this element. Below, C is a constraint (UML or <<Constraint>>), and X is an element. <ol> <li>Not dealing with connectors for parameterizing constraints (such as in parametric diagrams), so these may be processed incorrectly. <li>If C has an association A with X, and A’s member end, M, is C, or M.type is C, then C constrains X. <li>If C is a comment or owned by a comment, and X is an annotated element of the comment, then C constrains X. <li>Otherwise, C does not constrain X. <li>C is evaluated on collection X both as a whole and on each element. <ol> <li>C is evaluated against the collection of constrained elements first. <li>If C is not satisfied, it is evaluated against each element and returns false if any return false, true if all return true, and null (invalid) otherwise. </ol> <li>If X is a DocGen action/activity, C is evaluated against the output of X (as a single list or as individuals as stated above). <ul> <li>There is no means, yet, of distinguishing whether C is intended for X or its DocGen output, so it is evaluated for both contexts. <li>Since these contexts (DocGen and “static”) are evaluated separately, it is likely to fail in the unintended context. </ul> </ol>
 * @param constrainedObject
 * @return a list of constraint elements that constrain theconstrainedObject
 */
public static List<Element> getConstraintElements(Object constrainedObject){
  LinkedHashSet<Element> constraintElements=new LinkedHashSet<Element>();
  if (constrainedObject instanceof Element) {
    Element constrainedElement=((Element)constrainedObject);
    if (StereotypesHelper.hasStereotypeOrDerived(constrainedElement,DocGen3Profile.constraintStereotype) || constrainedElement instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Constraint) {
      if (!(constrainedElement instanceof Comment) || Utils2.isNullOrEmpty(((Comment)constrainedElement).getAnnotatedElement())) {
        constraintElements.add(constrainedElement);
      }
    }
    Collection<com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Constraint> constrs=constrainedElement.get_constraintOfConstrainedElement();
    if (constrs != null)     constraintElements.addAll(constrs);
    for (    Element comment : BasicConstraint.getComments(constrainedElement)) {
      if (StereotypesHelper.hasStereotypeOrDerived(comment,DocGen3Profile.constraintStereotype)) {
        constraintElements.add(comment);
      }
    }
  }
  if (constrainedObject instanceof Collection) {
    for (    Object o : (Collection<?>)constrainedObject) {
      constraintElements.addAll(getConstraintElements(o));
    }
  }
  return Utils2.toList(constraintElements);
}","public static List<Element> getConstraintElements(Object constrainedObject,Type type){
  LinkedHashSet<Element> constraintElements=new LinkedHashSet<Element>();
  if (constrainedObject instanceof Element) {
    Element constrainedElement=((Element)constrainedObject);
    if (elementIsConstraintOnItself(constrainedElement)) {
      if (constraintIsType(constrainedElement,type)) {
        constraintElements.add(constrainedElement);
      }
    }
    Collection<com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Constraint> constrs=constrainedElement.get_constraintOfConstrainedElement();
    if (constrs != null) {
      for (      Element c : constrs) {
        if (constraintIsType(c,type)) {
          constraintElements.add(c);
        }
      }
    }
    for (    Element comment : BasicConstraint.getComments(constrainedElement)) {
      if (elementIsDocGenConstraint(comment)) {
        if (constraintIsType(comment,type)) {
          constraintElements.add(comment);
        }
      }
    }
  }
  if (constrainedObject instanceof Collection) {
    for (    Object o : (Collection<?>)constrainedObject) {
      constraintElements.addAll(getConstraintElements(o,type));
    }
  }
  return Utils2.toList(constraintElements);
}",0.1170731707317073
88679,"/** 
 * Create a BasicConstraint on one of two Elements or Collections.
 * @param constraintElement the model element representing the constraint
 * @param constrained1 the first candidate to be constrained
 * @param constrained2 the second candidate to be constrained
 * @return a BasicConstraint on the first candidate if the evaluation worksor the evaluation does not work with the second candidate; otherwise return a BasicConstraint on the second candidate.
 */
public static BasicConstraint makeConstraint(Object constraintElement,Object... candidateContexts){
  BasicConstraint c=null;
  if (!Utils2.isNullOrEmpty(candidateContexts)) {
    BasicConstraint firstNull=null;
    Boolean result=null;
    for (    Object constrained : candidateContexts) {
      c=new BasicConstraint(constraintElement,constrained);
      result=c.evaluate(false);
      if (result != null) {
        break;
      }
 else       if (firstNull == null || (Utils2.isNullOrEmpty(firstNull.getConstrainedObjects()) && !Utils2.isNullOrEmpty(c.getConstrainedObjects()))) {
        firstNull=c;
      }
    }
    if (result == null)     c=firstNull;
  }
  if (c == null) {
    Object constrained=Utils2.isNullOrEmpty(candidateContexts) ? null : candidateContexts[0];
    c=new BasicConstraint(constraintElement,constrained);
  }
  return c;
}","public static BasicConstraint makeConstraint(Element constraintElement){
  if (!elementIsConstraint(constraintElement))   return null;
  List<Object> constrained=getConstrainedObjectsFromConstraintElement(constraintElement);
  BasicConstraint c=new BasicConstraint(constraintElement,constrained);
  return c;
}",0.0969325153374233
88680,"@Override public Set<Element> getConstrainingElements(){
  if (constrainingElements == null) {
    constrainingElements=new LinkedHashSet<Element>();
  }
  return constrainingElements;
}","public Set<Element> getConstrainingElements(Type type){
  if (constrainingElements == null) {
    constrainingElements=new LinkedHashSet<Element>();
  }
  if (type == Type.ANY)   return constrainingElements;
  Set<Element> filtered=new LinkedHashSet<Element>();
  for (  Element c : constrainingElements) {
    if (constraintIsType(c,type)) {
      filtered.add(c);
    }
  }
  return filtered;
}",0.6048109965635738
88681,"public static List<Constraint> getConstraints(Object constrainedObject){
  List<Constraint> constraints=new ArrayList<Constraint>();
  List<Element> constraintElements=getConstraintElements(constrainedObject);
  for (  Element constraint : constraintElements) {
    Constraint c=BasicConstraint.makeConstraint(constraint,constrainedObject);
    constraints.add(c);
  }
  return constraints;
}","public static List<Constraint> getConstraints(Object constrainedObject,Type type){
  List<Constraint> constraints=new ArrayList<Constraint>();
  List<Element> constraintElements=getConstraintElements(constrainedObject,type);
  for (  Element constraint : constraintElements) {
    Constraint c=BasicConstraint.makeConstraint(constraint);
    if (c != null)     constraints.add(c);
  }
  return constraints;
}",0.935
88682,"public static String getExpression(Object constraint){
  if (constraint instanceof Constraint)   return ((Constraint)constraint).getExpression();
  String expr=null;
  if (constraint instanceof Element) {
    Element e=(Element)constraint;
    if (e instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Constraint) {
      com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Constraint c=(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Constraint)e;
      expr=DocGenUtils.fixString(c.getSpecification());
    }
 else     if (GeneratorUtils.hasStereotypeByString(e,DocGen3Profile.constraintStereotype,true)) {
      Object v=GeneratorUtils.getObjectProperty(e,DocGen3Profile.constraintStereotype,""String_Node_Str"",null);
      expr=v.toString();
    }
  }
  if (Utils2.isNullOrEmpty(expr)) {
    expr=OclEvaluator.queryObjectToStringExpression(constraint);
  }
  return expr;
}","public static String getExpression(Object constraint){
  if (constraint instanceof Constraint)   return ((Constraint)constraint).getExpression();
  String expr=null;
  if (constraint instanceof Element) {
    Element e=(Element)constraint;
    if (elementIsUmlConstraint(e)) {
      expr=DocGenUtils.fixString(asUmlConstraint(e).getSpecification());
    }
 else     if (GeneratorUtils.hasStereotypeByString(e,DocGen3Profile.constraintStereotype,true)) {
      Object v=GeneratorUtils.getObjectProperty(e,DocGen3Profile.constraintStereotype,""String_Node_Str"",null);
      expr=v.toString();
    }
  }
  if (Utils2.isNullOrEmpty(expr)) {
    expr=OclEvaluator.queryObjectToStringExpression(constraint);
  }
  return expr;
}",0.863210493441599
88683,"public String toShortString(){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"" + this.getExpression() + ""String_Node_Str""+ EmfUtils.toString(this.constrainedObjects));
  return sb.toString();
}","public String toShortString(){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"" + this.getExpression() + ""String_Node_Str""+ Utils.toStringNameAndType(this.constrainedObjects,false,true));
  return sb.toString();
}",0.7865168539325843
88684,"/** 
 * @param constrainingElement
 * @param constrainedElement
 */
public BasicConstraint(Object constraint,Object constrained){
  addConstrainingObject(constraint);
  addConstrainedObject(constrained);
}","/** 
 * @param constrainingElement
 * @param constrainedElement
 */
public BasicConstraint(Object constraint,Collection<Object> constrained){
  addConstrainingObject(constraint);
  addConstrainedObjects((Collection<Object>)constrained);
}",0.8939051918735892
88685,"protected Boolean evaluate(Object constrainedObject,boolean complainIfFails){
  boolean gotNull=false;
  isConsistent=true;
  errorMessage=null;
  for (  Element constraint : getConstrainingElements()) {
    Object res=null;
    try {
      res=OclEvaluator.evaluateQuery(constrainedObject,constraint);
      OclEvaluator evaluator=OclEvaluator.instance;
      if (isConsistent)       isConsistent=evaluator.isValid();
    }
 catch (    Exception e) {
      this.errorMessage=e.getLocalizedMessage() + ""String_Node_Str"" + getExpression(constraint)+ ""String_Node_Str""+ EmfUtils.toString(constrainedObject);
      try {
        Debug.error(complainIfFails,false,this.errorMessage);
      }
 catch (      Exception ex) {
        System.err.println(this.errorMessage);
      }
      isConsistent=false;
    }
    if (res == null) {
      gotNull=true;
    }
 else     if (!Utils.isTrue(res,false)) {
      violatedConstraintElement=constraint;
      if (constrainedObject instanceof Element) {
        violatedConstrainedElement=(Element)constrainedObject;
      }
      return false;
    }
  }
  return gotNull ? null : true;
}","protected Boolean evaluate(Object constrainedObject,boolean complainIfFails){
  boolean gotNull=false;
  isConsistent=true;
  errorMessage=null;
  for (  Element constraint : getConstrainingElements()) {
    Object res=null;
    try {
      res=OclEvaluator.evaluateQuery(constrainedObject,constraint);
      OclEvaluator evaluator=OclEvaluator.instance;
      if (isConsistent)       isConsistent=evaluator.isValid();
    }
 catch (    Exception e) {
      this.errorMessage=e.getLocalizedMessage() + ""String_Node_Str"" + getExpression(constraint)+ ""String_Node_Str""+ Utils.toStringNameAndType(constrainedObject,true,true);
      try {
        Debug.error(complainIfFails,false,this.errorMessage);
      }
 catch (      Exception ex) {
        System.err.println(this.errorMessage);
      }
      isConsistent=false;
    }
    if (res == null) {
      gotNull=true;
    }
 else     if (!Utils.isTrue(res,false)) {
      violatedConstraintElement=constraint;
      if (constrainedObject instanceof Element) {
        violatedConstrainedElement=(Element)constrainedObject;
      }
      return false;
    }
  }
  return gotNull ? null : true;
}",0.9779346866725508
88686,"public static Boolean evaluateAgainst(Object constraint,Object constrained,List<Object> targets){
  BasicConstraint c=makeConstraint(constraint,targets,constrained);
  Boolean result=c.evaluate();
  return result;
}","public static Boolean evaluateAgainst(Object constraint,Object constrained,List<Object> targets){
  BasicConstraint c=makeConstraintFromAlternativeContexts(constraint,targets,constrained);
  Boolean result=c.evaluate();
  return result;
}",0.9492273730684326
88687,"public static String toString(Object o){
  if (o instanceof Collection) {
    Collection<?> c=(Collection<?>)o;
    int count=0;
    while (c.size() == 1 && c != c.iterator().next() && count++ < 5) {
      o=c.iterator().next();
      if (o instanceof Collection) {
        c=(Collection<?>)o;
      }
    }
    if (c == o && c.size() != 1) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      boolean first=true;
      for (      Object oo : c) {
        if (first)         first=false;
 else         sb.append(""String_Node_Str"");
        sb.append(toString(oo));
      }
      sb.append(""String_Node_Str"");
      return sb.toString();
    }
  }
  String result=null;
  String name=getName(o);
  if (Utils2.isNullOrEmpty(name))   name=""String_Node_Str"";
 else   name=name + ""String_Node_Str"";
  if (o instanceof Element) {
    Element e=(Element)o;
    String repText=e.get_representationText();
    if (Utils2.isNullOrEmpty(repText))     repText=""String_Node_Str"";
 else     repText=""String_Node_Str"" + repText;
    result=name + (Debug.isOn() ? e.getID() : ""String_Node_Str"") + repText;
    if (Debug.isOn()) {
      Debug.out(""String_Node_Str"");
    }
    return result.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  if (Utils2.isNullOrEmpty(name)) {
    result=o.toString();
  }
 else {
    result=name + getTypeNames(o);
  }
  return result;
}","public static String toString(Object o){
  if (o == null)   return ""String_Node_Str"";
  if (o instanceof Collection) {
    Collection<?> c=(Collection<?>)o;
    int count=0;
    while (c.size() == 1 && c != c.iterator().next() && count++ < 5) {
      o=c.iterator().next();
      if (o instanceof Collection) {
        c=(Collection<?>)o;
      }
    }
    if (c == o && c.size() != 1) {
      StringBuffer sb=new StringBuffer();
      sb.append(""String_Node_Str"");
      boolean first=true;
      for (      Object oo : c) {
        if (first)         first=false;
 else         sb.append(""String_Node_Str"");
        sb.append(toString(oo));
      }
      sb.append(""String_Node_Str"");
      return sb.toString();
    }
  }
 else   if (o.getClass().isArray()) {
    Object[] arr=(Object[])o;
    if (arr.length == 1)     return toString(arr[0]);
    return toString(Arrays.asList(arr));
  }
  String result=null;
  String name=getName(o);
  if (Utils2.isNullOrEmpty(name))   name=""String_Node_Str"";
 else   name=name + ""String_Node_Str"";
  if (o instanceof Element) {
    Element e=(Element)o;
    String repText=e.get_representationText();
    if (Utils2.isNullOrEmpty(repText))     repText=""String_Node_Str"";
 else     repText=""String_Node_Str"" + repText;
    result=name + (Debug.isOn() ? e.getID() : ""String_Node_Str"") + repText;
    result=result.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    result=result.trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
    result=result.trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
    return result;
  }
  if (Utils2.isNullOrEmpty(name)) {
    result=o.toString();
  }
 else {
    result=name + getTypeNames(o);
  }
  result=result.trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
  result=result.trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
  return result;
}",0.8139463128663993
88688,"public static void log(final String s,final boolean addNewLine,final boolean isErr,final Color color){
  if (!Debug.on)   return;
  if (isGuiThread()) {
    logUnsafe(s,addNewLine,isErr,color);
    return;
  }
  try {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        logUnsafe(s,addNewLine,isErr,color);
      }
    }
);
  }
 catch (  Exception e) {
    System.err.println(e.getLocalizedMessage());
  }
}","public static void log(final String s,final boolean addNewLine,final boolean isErr,final Color color){
  if (!Debug.on)   return;
  logForce(s,addNewLine,isErr,color);
}",0.5374592833876222
88689,"public static void logUnsafe(final String s,final boolean addNewLine,final boolean isErr,final Color color){
  if (!Debug.isOn())   return;
  String ss=s;
  Color newColor=color;
  StringBuffer sb=(isErr ? glErrBuf : glBuf);
  if (addNewLine) {
    ss=sb.toString() + ss + ""String_Node_Str"";
  }
  if (isErr && addNewLine) {
    if (newColor == null) {
      newColor=Color.RED;
    }
    ss=""String_Node_Str"" + ss;
  }
 else {
    if (newColor == null) {
      newColor=Color.BLACK;
    }
  }
  if (!addNewLine) {
    sb.append(ss);
  }
 else   if (gl != null) {
    if (newColor != Color.BLACK) {
      logWithColor(ss,newColor);
    }
 else {
      gl.log(ss);
    }
    if (isErr)     glErrBuf=new StringBuffer();
 else     glBuf=new StringBuffer();
  }
  PrintStream stream=(isErr ? System.err : System.out);
  stream.print(ss);
  stream.flush();
}","public static void logUnsafe(final String s,final boolean addNewLine,final boolean isErr,final Color color){
  if (!Debug.isOn())   return;
}",0.2837022132796781
88690,"@Override public void run(){
  logUnsafe(s,addNewLine,isErr,color);
}","@Override public void run(){
  logUnsafeForce(s,addNewLine,isErr,color);
}",0.965034965034965
88691,"/** 
 * @param obj
 * @return a name associated with this object whether a NameElement, anElement with a humanName, an EObject with a name property, or a Java Object with a name member.
 */
public static String getName(Object obj){
  if (obj instanceof NamedElement) {
    return ((NamedElement)obj).getName();
  }
  if (obj instanceof Element) {
    String humanName=((Element)obj).getHumanName();
    String[] arr=humanName.trim().split(""String_Node_Str"");
    if (arr != null) {
      if (arr.length == 2) {
        if (!Utils2.isNullOrEmpty(arr[0]) && !Utils2.isNullOrEmpty(arr[1])) {
          return arr[1];
        }
      }
    }
  }
  return EmfUtils.getName(obj);
}","/** 
 * @param obj
 * @return a name associated with this object whether a NameElement, anElement with a humanName, an EObject with a name property, or a Java Object with a name member.
 */
public static String getName(Object obj){
  if (obj instanceof NamedElement) {
    return ((NamedElement)obj).getName();
  }
  if (obj instanceof BaseElement) {
    String humanName=((BaseElement)obj).getHumanName();
    String[] arr=humanName.trim().split(""String_Node_Str"");
    if (arr != null) {
      if (arr.length == 2) {
        if (!Utils2.isNullOrEmpty(arr[0]) && !Utils2.isNullOrEmpty(arr[1])) {
          return arr[1];
        }
      }
    }
  }
  return EmfUtils.getName(obj);
}",0.9941089837997056
88692,"public static String toStringNoHash(Object o){
  return o.toString().replace(Integer.toHexString(o.hashCode()),""String_Node_Str"");
}","public static String toStringNoHash(Object o){
  if (o == null)   return ""String_Node_Str"";
  return o.toString().replace(Integer.toHexString(o.hashCode()),""String_Node_Str"");
}",0.8543689320388349
88693,"@Override public void actionPerformed(ActionEvent e){
  MdDebug.log(""String_Node_Str"");
  Collection<Element> selectedElements=MDUtils.getSelection(e,Configurator.lastContextIsDiagram);
  setContext(selectedElements);
  OclEvaluator.resetEnvironment();
  constraintRule.init(Utils.getProject(),null);
  Set<Annotation> annotations=constraintRule.run(Utils.getProject(),null,selectedElements);
  Utils.displayValidationWindow(validationOutput,""String_Node_Str"");
  MdDebug.log(""String_Node_Str"");
}","@Override public void actionPerformed(ActionEvent e){
  Collection<Element> selectedElements=MDUtils.getSelection(e,Configurator.lastContextIsDiagram);
  setContext(selectedElements);
  OclEvaluator.resetEnvironment();
  constraintRule.constraintType=Type.STATIC;
  constraintRule.init(Utils.getProject(),null);
  constraintRule.run(Utils.getProject(),null,selectedElements);
  Utils.displayValidationWindow(validationOutput,""String_Node_Str"");
}",0.8504772004241782
88694,"public static InitialNode findInitialNode(Element a){
  for (  Element e : a.getOwnedElement())   if (e instanceof InitialNode)   return (InitialNode)e;
  return null;
}","public static InitialNode findInitialNode(Element a){
  if (a == null)   return null;
  for (  Element e : a.getOwnedElement())   if (e instanceof InitialNode)   return (InitialNode)e;
  return null;
}",0.9135135135135136
88695,"public void actionPerformed(ActionEvent e){
  Collection<Element> selectedElements=MDUtils.getSelection(e);
  setContext(selectedElements);
  OclEvaluator.opsCache=null;
  boolean wasOn=Debug.isOn();
  Debug.turnOn();
  try {
    RepeatInputComboBoxDialog.showRepeatInputComboBoxDialog(""String_Node_Str"",""String_Node_Str"",new ProcessOclQuery(selectedElements));
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  if (!wasOn)   Debug.turnOff();
}","public void actionPerformed(ActionEvent e){
  Collection<Element> selectedElements=MDUtils.getSelection(e);
  setContext(selectedElements);
  OclEvaluator.resetEnvironment();
  boolean wasOn=Debug.isOn();
  Debug.turnOn();
  try {
    RepeatInputComboBoxDialog.showRepeatInputComboBoxDialog(""String_Node_Str"",""String_Node_Str"",new ProcessOclQuery(selectedElements));
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  if (!wasOn)   Debug.turnOff();
}",0.9660460021905805
88696,"@Override public Object process(Object input){
  String oclString=input == null ? null : input.toString();
  ArrayList<Object> outputList=new ArrayList<Object>();
  OclEvaluator.opsCache=null;
  if (Utils2.isNullOrEmpty(getContext())) {
    outputList=process(null,oclString);
  }
 else   for (  Element elem : getContext()) {
    ArrayList<Object> results=process(elem,oclString);
    if (results != null)     outputList.addAll(results);
  }
  if (outputList != null && outputList.size() == 1)   return outputList.get(0);
  return outputList;
}","@Override public Object process(Object input){
  String oclString=input == null ? null : input.toString();
  ArrayList<Object> outputList=new ArrayList<Object>();
  OclEvaluator.resetEnvironment();
  if (Utils2.isNullOrEmpty(getContext())) {
    outputList=process(null,oclString);
  }
 else   for (  Element elem : getContext()) {
    ArrayList<Object> results=process(elem,oclString);
    if (results != null)     outputList.addAll(results);
  }
  if (outputList != null && outputList.size() == 1)   return outputList.get(0);
  return outputList;
}",0.971689497716895
88697,"@Override public void actionPerformed(ActionEvent e){
  Collection<Element> selectedElements=MDUtils.getSelection(e);
  setContext(selectedElements);
  OclEvaluator.opsCache=null;
  constraintRule.init(Utils.getProject(),null);
  Set<Annotation> annotations=constraintRule.run(Utils.getProject(),null,selectedElements);
  Utils.displayValidationWindow(validationOutput,""String_Node_Str"");
}","@Override public void actionPerformed(ActionEvent e){
  Collection<Element> selectedElements=MDUtils.getSelection(e);
  setContext(selectedElements);
  OclEvaluator.resetEnvironment();
  constraintRule.init(Utils.getProject(),null);
  Set<Annotation> annotations=constraintRule.run(Utils.getProject(),null,selectedElements);
  Utils.displayValidationWindow(validationOutput,""String_Node_Str"");
}",0.9605095541401274
88698,"public DocumentValidator(Element e){
  start=e;
  log=Application.getInstance().getGUILog();
  cycles=new ArrayList<Set<ActivityNode>>();
  fatal=false;
  done=new HashSet<Behavior>();
  aef=new ActivityEdgeFactory();
  dg=new DefaultDirectedGraph<NamedElement,DirectedRelationship>(new ViewDependencyEdgeFactory());
  sysmlview=Utils.getViewStereotype();
  conforms=Utils.getConformsStereotype();
  OclEvaluator.opsCache=null;
  Validationui.addValidationRule(multipleFirstErrors);
  Validationui.addValidationRule(multipleNextErrors);
  Validationui.addValidationRule(multipleContentErrors);
  Validationui.addValidationRule(multipleViewpoints);
  Validationui.addValidationRule(multipleOutgoingFlows);
  Validationui.addValidationRule(mismatchStereotypeErrors);
  Validationui.addValidationRule(missingViewpointErrors);
  Validationui.addValidationRule(missingImportErrors);
  Validationui.addValidationRule(multipleInitialNode);
  Validationui.addValidationRule(multipleIncomingFlows);
  Validationui.addValidationRule(missingInitialNode);
  Validationui.addValidationRule(missingViewpointBehavior);
  Validationui.addValidationRule(missingStereotype);
  Validationui.addValidationRule(missingOutgoingFlow);
  Validationui.addValidationRule(multipleStereotypes);
  Validationui.addValidationRule(nonView2View);
  Validationui.addValidationRule(shouldBeSection);
  Validationui.addValidationRule(shouldNotBeSection);
  Validationui.addValidationRule(cycleError);
  Validationui.addValidationRule(activityNodeCycleError);
  Validationui.addValidationRule(constraintRule);
  ValidationOutput.add(Validationui);
}","public DocumentValidator(Element e){
  start=e;
  log=Application.getInstance().getGUILog();
  cycles=new ArrayList<Set<ActivityNode>>();
  fatal=false;
  done=new HashSet<Behavior>();
  aef=new ActivityEdgeFactory();
  dg=new DefaultDirectedGraph<NamedElement,DirectedRelationship>(new ViewDependencyEdgeFactory());
  sysmlview=Utils.getViewStereotype();
  conforms=Utils.getConformsStereotype();
  OclEvaluator.resetEnvironment();
  Validationui.addValidationRule(multipleFirstErrors);
  Validationui.addValidationRule(multipleNextErrors);
  Validationui.addValidationRule(multipleContentErrors);
  Validationui.addValidationRule(multipleViewpoints);
  Validationui.addValidationRule(multipleOutgoingFlows);
  Validationui.addValidationRule(mismatchStereotypeErrors);
  Validationui.addValidationRule(missingViewpointErrors);
  Validationui.addValidationRule(missingImportErrors);
  Validationui.addValidationRule(multipleInitialNode);
  Validationui.addValidationRule(multipleIncomingFlows);
  Validationui.addValidationRule(missingInitialNode);
  Validationui.addValidationRule(missingViewpointBehavior);
  Validationui.addValidationRule(missingStereotype);
  Validationui.addValidationRule(missingOutgoingFlow);
  Validationui.addValidationRule(multipleStereotypes);
  Validationui.addValidationRule(nonView2View);
  Validationui.addValidationRule(shouldBeSection);
  Validationui.addValidationRule(shouldNotBeSection);
  Validationui.addValidationRule(cycleError);
  Validationui.addValidationRule(activityNodeCycleError);
  Validationui.addValidationRule(constraintRule);
  ValidationOutput.add(Validationui);
}",0.9904054472299596
88699,"@Override public void init(Project paramProject,Constraint paramConstraint){
  Debug.outln(""String_Node_Str"" + paramProject + ""String_Node_Str""+ paramConstraint+ ""String_Node_Str"");
  if (constraintElement == null)   constraintElement=paramConstraint;
  OclEvaluator.opsCache=null;
  OclEvaluator.useCachedOps=true;
}","@Override public void init(Project paramProject,Constraint paramConstraint){
  Debug.outln(""String_Node_Str"" + paramProject + ""String_Node_Str""+ paramConstraint+ ""String_Node_Str"");
  if (constraintElement == null)   constraintElement=paramConstraint;
  OclEvaluator.resetEnvironment();
}",0.8925619834710744
88700,"@Override public Set<Annotation> run(Project paramProject,Constraint paramConstraint,Collection<? extends Element> paramCollection){
  Set<Annotation> result=new HashSet<Annotation>();
  System.out.println(""String_Node_Str"" + paramConstraint + ""String_Node_Str""+ paramCollection+ ""String_Node_Str"");
  OclEvaluator.opsCache=null;
  OclEvaluator.useCachedOps=true;
  initConstraintMaps(paramProject,paramCollection);
  Collection<gov.nasa.jpl.mbee.constraint.Constraint> constraints=(Collection<gov.nasa.jpl.mbee.constraint.Constraint>)(Utils2.isNullOrEmpty(elementsWithConstraints) ? (constraintToElementMap == null ? Utils2.newList() : constraintToElementMap.keySet()) : getAffectedConstraints(elementsWithConstraints));
  for (  gov.nasa.jpl.mbee.constraint.Constraint constraint : constraints) {
    try {
      Boolean satisfied=DocumentValidator.evaluateConstraint(constraint,this,false);
    }
 catch (    Throwable e) {
      Debug.error(true,false,""String_Node_Str"" + e.getLocalizedMessage());
    }
  }
  Project project=Utils.getProject();
  Constraint cons=(Constraint)project.getElementByID(""String_Node_Str"");
  result=Utils.getAnnotations(this,project,cons);
  annotations=result;
  return result;
}","@Override public Set<Annotation> run(Project paramProject,Constraint paramConstraint,Collection<? extends Element> paramCollection){
  Set<Annotation> result=new HashSet<Annotation>();
  System.out.println(""String_Node_Str"" + paramConstraint + ""String_Node_Str""+ paramCollection+ ""String_Node_Str"");
  OclEvaluator.resetEnvironment();
  initConstraintMaps(paramProject,paramCollection);
  Collection<gov.nasa.jpl.mbee.constraint.Constraint> constraints=(Collection<gov.nasa.jpl.mbee.constraint.Constraint>)(Utils2.isNullOrEmpty(elementsWithConstraints) ? (constraintToElementMap == null ? Utils2.newList() : constraintToElementMap.keySet()) : getAffectedConstraints(elementsWithConstraints));
  for (  gov.nasa.jpl.mbee.constraint.Constraint constraint : constraints) {
    try {
      Boolean satisfied=DocumentValidator.evaluateConstraint(constraint,this,false);
    }
 catch (    Throwable e) {
      Debug.error(true,false,""String_Node_Str"" + e.getLocalizedMessage());
    }
  }
  Project project=Utils.getProject();
  Constraint cons=(Constraint)project.getElementByID(""String_Node_Str"");
  result=Utils.getAnnotations(this,project,cons);
  annotations=result;
  return result;
}",0.9745515227367544
88701,"/** 
 * Evaluates the specified query given a particular context
 * @param context		EObject of the context that the query should be run against (e.g., self)
 * @param queryString	Valid OCL string that to be evaluated in the context
 * @param verbose		Turns on OCL debugging if true, off if false 
 * @return				Object of the result whose type should be known by the caller
 * @throws ParserException 
 */
public static Object evaluateQuery(Object context,String queryString,boolean verbose) throws ParserException {
  setupEnvironment();
  if (queryString == null)   return null;
  OclEvaluator.createOclInstance(envFactory);
  setOclTracingEnabled(verbose);
  queryStatus=QueryStatus.VALID_OCL;
  if (context instanceof EObject) {
    getHelper().setContext(context == null ? null : ((EObject)context).eClass());
  }
 else   if (context instanceof Collection) {
    getHelper().setContext(context == null ? null : OCLStandardLibraryImpl.INSTANCE.getCollection());
  }
  Object result=null;
  basicDiagnostic=null;
  problemHandler=null;
  result=evaluateQueryNoSetup(context,queryString,verbose);
  Debug.outln(""String_Node_Str"" + DocGenUtils.fixString(context) + ""String_Node_Str""+ queryString+ ""String_Node_Str""+ verbose+ ""String_Node_Str""+ DocGenUtils.fixString(result));
  return result;
}","/** 
 * Evaluates the specified query given a particular context
 * @param context		EObject of the context that the query should be run against (e.g., self)
 * @param queryString	Valid OCL string that to be evaluated in the context
 * @param verbose		Turns on OCL debugging if true, off if false 
 * @return				Object of the result whose type should be known by the caller
 * @throws ParserException 
 */
public static Object evaluateQuery(Object context,String queryString,boolean verbose) throws ParserException {
  if (needEnvironmentSetup()) {
    resetEnvironment();
    setupEnvironment();
  }
  if (queryString == null)   return null;
  setOclTracingEnabled(verbose);
  queryStatus=QueryStatus.VALID_OCL;
  if (context instanceof EObject) {
    getHelper().setContext(context == null ? null : ((EObject)context).eClass());
  }
 else   if (context instanceof Collection) {
    getHelper().setContext(context == null ? null : OCLStandardLibraryImpl.INSTANCE.getCollection());
  }
  Object result=null;
  basicDiagnostic=null;
  problemHandler=null;
  result=evaluateQueryNoSetup(context,queryString,verbose);
  Debug.outln(""String_Node_Str"" + DocGenUtils.fixString(context) + ""String_Node_Str""+ queryString+ ""String_Node_Str""+ verbose+ ""String_Node_Str""+ DocGenUtils.fixString(result));
  return result;
}",0.9546850998463902
88702,"protected static DgEnvironmentFactory setupEnvironment(){
  DgEnvironmentFactory.reset();
  envFactory=new DgEnvironmentFactory();
  if (useCachedOps && !Utils2.isNullOrEmpty(opsCache)) {
    envFactory.getDgEnvironment().operations.addAll(opsCache);
  }
 else {
    addRegexMatchOperation(envFactory);
    addROperation(envFactory);
    addMOperation(envFactory);
    addTOperation(envFactory);
    addSOperation(envFactory);
    addNOperation(envFactory);
    addExpressionOperations(envFactory);
    opsCache=envFactory.getDgEnvironment().operations;
  }
  return envFactory;
}","protected static DgEnvironmentFactory setupEnvironment(){
  addRegexMatchOperation(getEnvironmentFactory());
  addROperation(getEnvironmentFactory());
  addMOperation(getEnvironmentFactory());
  addTOperation(getEnvironmentFactory());
  addSOperation(getEnvironmentFactory());
  addNOperation(getEnvironmentFactory());
  addExpressionOperations(getEnvironmentFactory());
  return getEnvironmentFactory();
}",0.385395537525355
88703,"public static OCL<?,EClassifier,?,?,?,?,?,?,?,Constraint,EClass,EObject> getOcl(){
  if (ocl == null) {
    setOcl(OCL.newInstance(envFactory));
  }
  return ocl;
}","public static OCL<?,EClassifier,?,?,?,?,?,?,?,Constraint,EClass,EObject> getOcl(){
  if (ocl == null) {
    createOclInstance(getEnvironmentFactory());
  }
  return ocl;
}",0.9194029850746268
88704,"/** 
 * Evaluates the specified invariant (constraint given a particular context) Note that the evaluateQuery is more generic and can handle invariants as well
 * @param context			EObject of the context that the constraint should be checked against
 * @param constraintString	Valid OCL constraint string to be checked
 * @param verbose			Turns on OCL debugging if true, off if false 
 * @return					true if constraint is satisfied, false otherwise
 */
public static boolean checkConstraint(EObject context,String constraintString,boolean verbose){
  setOclTracingEnabled(verbose);
  queryStatus=QueryStatus.VALID_OCL;
  OCLHelper<EClassifier,?,?,Constraint> helper=ocl.createOCLHelper();
  helper.setContext(context.eClass());
  boolean ok=false;
  Constraint constraint=null;
  try {
    constraint=helper.createInvariant(constraintString);
  }
 catch (  ParserException e) {
    queryStatus=QueryStatus.PARSE_EXCEPTION;
    e.printStackTrace();
    return ok;
  }
  if (constraint != null) {
    Query<EClassifier,EClass,EObject> eval=ocl.createQuery(constraint);
    ok=eval.check(context);
  }
  return ok;
}","/** 
 * Evaluates the specified invariant (constraint given a particular context) Note that the evaluateQuery is more generic and can handle invariants as well
 * @param context			EObject of the context that the constraint should be checked against
 * @param constraintString	Valid OCL constraint string to be checked
 * @param verbose			Turns on OCL debugging if true, off if false 
 * @return					true if constraint is satisfied, false otherwise
 */
public static boolean checkConstraint(EObject context,String constraintString,boolean verbose){
  setOclTracingEnabled(verbose);
  queryStatus=QueryStatus.VALID_OCL;
  OCLHelper<EClassifier,?,?,Constraint> helper=getOcl().createOCLHelper();
  helper.setContext(context.eClass());
  boolean ok=false;
  Constraint constraint=null;
  try {
    constraint=helper.createInvariant(constraintString);
  }
 catch (  ParserException e) {
    queryStatus=QueryStatus.PARSE_EXCEPTION;
    e.printStackTrace();
    return ok;
  }
  if (constraint != null) {
    Query<EClassifier,EClass,EObject> eval=getOcl().createQuery(constraint);
    ok=eval.check(context);
  }
  return ok;
}",0.990152193375112
88705,"public static <T>T getBestArgTypes(Map<T,Pair<Class<?>[],Boolean>> candidates,Class<?>... argTypes){
  ArgTypeCompare<T> atc=new ArgTypeCompare<T>(argTypes);
  for (  Entry<T,Pair<Class<?>[],Boolean>> e : candidates.entrySet()) {
    atc.compare(e.getKey(),e.getValue().first,e.getValue().second);
  }
  if (atc.best != null && !atc.allArgsMatched) {
    System.err.println(""String_Node_Str"" + atc.best + ""String_Node_Str""+ atc.mostMatchingArgs+ ""String_Node_Str""+ Utils2.toString(argTypes,false));
  }
 else   if (atc.best == null) {
    System.err.println(""String_Node_Str"" + candidates);
  }
  return atc.best;
}","public static <T>T getBestArgTypes(Map<T,Pair<Class<?>[],Boolean>> candidates,Class<?>... argTypes){
  ArgTypeCompare<T> atc=new ArgTypeCompare<T>(argTypes);
  for (  Entry<T,Pair<Class<?>[],Boolean>> e : candidates.entrySet()) {
    atc.compare(e.getKey(),e.getValue().first,e.getValue().second);
  }
  if (atc.best != null && !atc.allNonNullArgsMatched) {
    System.err.println(""String_Node_Str"" + atc.best + ""String_Node_Str""+ atc.mostMatchingArgs+ ""String_Node_Str""+ Utils2.toString(argTypes,false));
  }
 else   if (atc.best == null) {
    System.err.println(""String_Node_Str"" + candidates);
  }
  return atc.best;
}",0.994341147938561
88706,"public void compare(T o,Class<?>[] candidateArgTypes,boolean isVarArgs){
  numMatching=0;
  numNull=0;
  numDeps=0;
  boolean debugWasOn=Debug.isOn();
  if (debugWasOn)   Debug.turnOff();
  int candidateArgsLength=candidateArgTypes == null ? 0 : candidateArgTypes.length;
  int referenceArgsLength=referenceArgTypes == null ? 0 : referenceArgTypes.length;
  okNumArgs=(candidateArgsLength == referenceArgsLength) || (isVarArgs && (candidateArgsLength < referenceArgsLength || candidateArgsLength == 1));
  if (Debug.isOn())   Debug.outln(""String_Node_Str"" + okNumArgs);
  for (int i=0; i < Math.min(candidateArgsLength,referenceArgsLength); ++i) {
    if (referenceArgTypes[i] == null) {
      if (Debug.isOn())       Debug.outln(""String_Node_Str"" + i + ""String_Node_Str"");
      continue;
    }
    if (candidateArgTypes[i] == null) {
      if (Debug.isOn())       Debug.outln(""String_Node_Str"" + i + ""String_Node_Str""+ referenceArgTypes[i]);
      ++numNull;
      ++numDeps;
    }
 else     if (candidateArgTypes[i].isAssignableFrom(referenceArgTypes[i])) {
      if (Debug.isOn())       Debug.outln(""String_Node_Str"" + i + ""String_Node_Str""+ candidateArgTypes[i]+ ""String_Node_Str""+ i+ ""String_Node_Str""+ referenceArgTypes[i]);
      ++numMatching;
    }
 else     if (candidateArgTypes[i].isPrimitive() && classForPrimitive(candidateArgTypes[i]).isAssignableFrom(referenceArgTypes[i])) {
      if (Debug.isOn())       Debug.outln(""String_Node_Str"" + i + ""String_Node_Str""+ candidateArgTypes[i]+ ""String_Node_Str""+ i+ ""String_Node_Str""+ referenceArgTypes[i]);
      ++numMatching;
    }
 else {
      if (Debug.isOn())       Debug.outln(""String_Node_Str"" + i + ""String_Node_Str""+ candidateArgTypes[i]+ ""String_Node_Str""+ i+ ""String_Node_Str""+ referenceArgTypes[i]);
    }
  }
  if ((best == null) || (!gotOkNumArgs && okNumArgs) || ((gotOkNumArgs == okNumArgs) && ((numMatching > mostMatchingArgs) || ((numMatching == mostMatchingArgs) && (numDeps > mostDeps))))) {
    best=o;
    gotOkNumArgs=okNumArgs;
    mostMatchingArgs=numMatching;
    mostDeps=numDeps;
    allArgsMatched=(numMatching >= candidateArgsLength);
    allNonNullArgsMatched=(numMatching + numNull >= candidateArgsLength);
    if (Debug.isOn())     Debug.outln(""String_Node_Str"" + o + ""String_Node_Str""+ mostMatchingArgs+ ""String_Node_Str""+ allArgsMatched+ ""String_Node_Str""+ numMatching+ ""String_Node_Str""+ candidateArgsLength+ ""String_Node_Str""+ numDeps);
  }
  if (debugWasOn)   Debug.turnOn();
}","public void compare(T o,Class<?>[] candidateArgTypes,boolean isVarArgs){
  numMatching=0;
  numNull=0;
  numDeps=0;
  boolean debugWasOn=Debug.isOn();
  if (debugWasOn)   Debug.turnOff();
  int candidateArgsLength=candidateArgTypes == null ? 0 : candidateArgTypes.length;
  int referenceArgsLength=referenceArgTypes == null ? 0 : referenceArgTypes.length;
  okNumArgs=(candidateArgsLength == referenceArgsLength) || (isVarArgs && (candidateArgsLength < referenceArgsLength || candidateArgsLength == 1));
  if (Debug.isOn())   Debug.outln(""String_Node_Str"" + okNumArgs);
  for (int i=0; i < Math.min(candidateArgsLength,referenceArgsLength); ++i) {
    if (referenceArgTypes[i] == null) {
      if (Debug.isOn())       Debug.outln(""String_Node_Str"" + i + ""String_Node_Str"");
      ++numNull;
      ++numDeps;
      continue;
    }
    if (candidateArgTypes[i] == null) {
      if (Debug.isOn())       Debug.outln(""String_Node_Str"" + i + ""String_Node_Str""+ referenceArgTypes[i]);
      Debug.error(false,true,""String_Node_Str"" + i + ""String_Node_Str""+ referenceArgTypes[i]);
      continue;
    }
 else     if (candidateArgTypes[i].isAssignableFrom(referenceArgTypes[i])) {
      if (Debug.isOn())       Debug.outln(""String_Node_Str"" + i + ""String_Node_Str""+ candidateArgTypes[i]+ ""String_Node_Str""+ i+ ""String_Node_Str""+ referenceArgTypes[i]);
      ++numMatching;
    }
 else     if (candidateArgTypes[i].isPrimitive() && classForPrimitive(candidateArgTypes[i]).isAssignableFrom(referenceArgTypes[i])) {
      if (Debug.isOn())       Debug.outln(""String_Node_Str"" + i + ""String_Node_Str""+ candidateArgTypes[i]+ ""String_Node_Str""+ i+ ""String_Node_Str""+ referenceArgTypes[i]);
      ++numMatching;
    }
 else {
      if (Debug.isOn())       Debug.outln(""String_Node_Str"" + i + ""String_Node_Str""+ candidateArgTypes[i]+ ""String_Node_Str""+ i+ ""String_Node_Str""+ referenceArgTypes[i]);
    }
  }
  if ((best == null) || (!gotOkNumArgs && okNumArgs) || ((gotOkNumArgs == okNumArgs) && ((numMatching > mostMatchingArgs) || ((numMatching == mostMatchingArgs) && (numDeps > mostDeps))))) {
    best=o;
    gotOkNumArgs=okNumArgs;
    mostMatchingArgs=numMatching;
    mostDeps=numDeps;
    allArgsMatched=(numMatching >= candidateArgsLength);
    allNonNullArgsMatched=(numMatching + numNull >= candidateArgsLength);
    if (Debug.isOn())     Debug.outln(""String_Node_Str"" + o + ""String_Node_Str""+ mostMatchingArgs+ ""String_Node_Str""+ allArgsMatched+ ""String_Node_Str""+ numMatching+ ""String_Node_Str""+ candidateArgsLength+ ""String_Node_Str""+ numDeps);
  }
  if (debugWasOn)   Debug.turnOn();
}",0.8681036187462923
88707,"/** 
 * @param elem
 * @return all slots for the element's applied stereotype instance
 */
public static List<Slot> getSlots(Element elem){
  List<Slot> slots=new ArrayList<Slot>();
  InstanceSpecification localInstanceSpecification=elem.getAppliedStereotypeInstance();
  slots.addAll(localInstanceSpecification.getSlot());
  return slots;
}","/** 
 * @param elem
 * @return all slots for the element's applied stereotype instance
 */
public static List<Slot> getSlots(Element elem){
  List<Slot> slots=new ArrayList<Slot>();
  InstanceSpecification localInstanceSpecification=elem.getAppliedStereotypeInstance();
  if (localInstanceSpecification != null) {
    slots.addAll(localInstanceSpecification.getSlot());
  }
  return slots;
}",0.9316939890710384
88708,"@Override public Object process(Object input){
  String oclString=input == null ? null : input.toString();
  ArrayList<Object> outputList=new ArrayList<Object>();
  if (Utils2.isNullOrEmpty(getContext())) {
    outputList=process(null,oclString);
  }
 else   for (  Element elem : getContext()) {
    ArrayList<Object> results=process(elem,oclString);
    if (results != null)     outputList.addAll(results);
  }
  if (outputList != null && outputList.size() == 1)   return outputList.get(0);
  return outputList;
}","@Override public Object process(Object input){
  String oclString=input == null ? null : input.toString();
  ArrayList<Object> outputList=new ArrayList<Object>();
  OclEvaluator.opsCache=null;
  if (Utils2.isNullOrEmpty(getContext())) {
    outputList=process(null,oclString);
  }
 else   for (  Element elem : getContext()) {
    ArrayList<Object> results=process(elem,oclString);
    if (results != null)     outputList.addAll(results);
  }
  if (outputList != null && outputList.size() == 1)   return outputList.get(0);
  return outputList;
}",0.9716981132075472
88709,"protected static DgEnvironmentFactory setupEnvironment(){
  DgEnvironmentFactory.reset();
  envFactory=new DgEnvironmentFactory();
  if (useCachedOps && !Utils2.isNullOrEmpty(opsCache)) {
    envFactory.getDgEnvironment().operations=opsCache;
  }
 else {
    addRegexMatchOperation(envFactory);
    addROperation(envFactory);
    addMOperation(envFactory);
    addTOperation(envFactory);
    addSOperation(envFactory);
    addNOperation(envFactory);
    addExpressionOperations(envFactory);
    opsCache=envFactory.getDgEnvironment().operations;
  }
  return envFactory;
}","protected static DgEnvironmentFactory setupEnvironment(){
  DgEnvironmentFactory.reset();
  envFactory=new DgEnvironmentFactory();
  if (useCachedOps && !Utils2.isNullOrEmpty(opsCache)) {
    envFactory.getDgEnvironment().operations.addAll(opsCache);
  }
 else {
    addRegexMatchOperation(envFactory);
    addROperation(envFactory);
    addMOperation(envFactory);
    addTOperation(envFactory);
    addSOperation(envFactory);
    addNOperation(envFactory);
    addExpressionOperations(envFactory);
    opsCache=envFactory.getDgEnvironment().operations;
  }
  return envFactory;
}",0.9913194444444444
88710,"/** 
 * Collect all objects of type Element in each of the results of evaluating the query expression on each of the elements.
 * @param elements contexts for evaluating the expression
 * @param cba the collect action containing the expression
 * @return a List of Elements
 */
public static List<Element> collectByExpression(List<Element> elements,String query,boolean iterate){
  List<Element> res=new ArrayList<Element>();
  if (iterate)   res.addAll(collectByExpression(elements,query));
 else {
    for (    Element e : elements) {
      res.addAll(collectByExpression(e,query));
    }
  }
  return res;
}","/** 
 * Collect all objects of type Element in each of the results of evaluating the query expression on each of the elements.
 * @param elements contexts for evaluating the expression
 * @param cba the collect action containing the expression
 * @return a List of Elements
 */
public static List<Element> collectByExpression(List<Element> elements,String query,boolean iterate){
  List<Element> res=new ArrayList<Element>();
  if (!iterate)   res.addAll(collectByExpression(elements,query));
 else {
    for (    Element e : elements) {
      res.addAll(collectByExpression(e,query));
    }
  }
  return res;
}",0.9991809991809992
88711,"/** 
 * Utility for adding custom OCL operations (defined by a DgOperation)
 * @param dgOperation
 */
public void addDgOperation(DgOperation dgOperation){
  if (!operations.contains(dgOperation)) {
    EOperation eoperation=EcoreFactory.eINSTANCE.createEOperation();
    eoperation.setName(dgOperation.getName());
    EClassifier type=dgOperation.getReturnType();
    if (type == null)     type=OCLStandardLibraryImpl.INSTANCE.getOclAny();
    eoperation.setEType(type);
    for (    EParameter parm : dgOperation.getParameters()) {
      eoperation.getEParameters().add(parm);
    }
    EAnnotation annotation=EcoreFactory.eINSTANCE.createEAnnotation();
    annotation.setSource(dgOperation.getAnnotationName());
    eoperation.getEAnnotations().add(annotation);
    type=dgOperation.getCallerType();
    if (type == null)     type=OCLStandardLibraryImpl.INSTANCE.getOclAny();
    try {
      addHelperOperation(dgOperation.getCallerType(),eoperation);
      operationNames.add(dgOperation.getName());
      operations.add(dgOperation);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","/** 
 * Utility for adding custom OCL operations (defined by a DgOperation)
 * @param dgOperation
 */
public void addDgOperation(DgOperation dgOperation){
  if (!operations.contains(dgOperation)) {
    EOperation eoperation=EcoreFactory.eINSTANCE.createEOperation();
    eoperation.setName(dgOperation.getName());
    EClassifier type=dgOperation.getReturnType();
    if (type == null)     type=OCLStandardLibraryImpl.INSTANCE.getOclAny();
    eoperation.setEType(type);
    for (    EParameter parm : dgOperation.getParameters()) {
      eoperation.getEParameters().add(parm);
    }
    EAnnotation annotation=EcoreFactory.eINSTANCE.createEAnnotation();
    annotation.setSource(dgOperation.getAnnotationName());
    eoperation.getEAnnotations().add(annotation);
    type=dgOperation.getCallerType();
    if (type == null)     type=OCLStandardLibraryImpl.INSTANCE.getOclAny();
    try {
      if (dgOperation.getCallerType() == null) {
        Debug.error(false,""String_Node_Str"" + dgOperation + ""String_Node_Str"");
        dgOperation.setCallerType(OCLStandardLibraryImpl.INSTANCE.getOclAny());
      }
      addHelperOperation(dgOperation.getCallerType(),eoperation);
      operationNames.add(dgOperation.getName());
      operations.add(dgOperation);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.91088295687885
88712,"public void addStringParameter(EParameter parameter){
  addParameter(parameter,OCLStandardLibraryImpl.INSTANCE.getString());
  this.parameters.add(parameter);
}","public void addStringParameter(EParameter parameter){
  addParameter(parameter,OCLStandardLibraryImpl.INSTANCE.getString());
}",0.8811188811188811
88713,"public void setCallerType(EClassifier callerType){
  this.callerType=callerType;
}","@Override public void setCallerType(EClassifier callerType){
  this.callerType=callerType;
}",0.942528735632184
88714,"public void setReturnType(EClassifier returnType){
  this.returnType=returnType;
}","@Override public void setReturnType(EClassifier returnType){
  this.returnType=returnType;
}",0.942528735632184
88715,"protected static void addRegexMatchOperation(DgEnvironmentFactory envFactory){
  DgOperationInstance doi=new DgOperationInstance();
  doi.setName(""String_Node_Str"");
  doi.setAnnotationName(""String_Node_Str"");
  EParameter parm=EcoreFactory.eINSTANCE.createEParameter();
  parm.setName(""String_Node_Str"");
  doi.addParameter(parm);
  doi.setOperation(new CallOperation(){
    @Override public Object callOperation(    Object source,    Object[] args){
      Pattern pattern=Pattern.compile((String)args[0]);
      Matcher matcher=pattern.matcher((String)source);
      return matcher.matches() ? matcher.group() : null;
    }
  }
);
  envFactory.getDgEnvironment().addDgOperation(doi);
  envFactory.getDgEvaluationEnvironment().addDgOperation(doi);
}","protected static void addRegexMatchOperation(DgEnvironmentFactory envFactory){
  DgOperationInstance doi=new DgOperationInstance();
  doi.setName(""String_Node_Str"");
  doi.setAnnotationName(""String_Node_Str"");
  EParameter parm=EcoreFactory.eINSTANCE.createEParameter();
  parm.setName(""String_Node_Str"");
  parm.setEType(OCLStandardLibraryImpl.INSTANCE.getString());
  doi.addStringParameter(parm);
  doi.setCallerType(OCLStandardLibraryImpl.INSTANCE.getString());
  doi.setReturnType(OCLStandardLibraryImpl.INSTANCE.getString());
  doi.setOperation(new CallOperation(){
    @Override public Object callOperation(    Object source,    Object[] args){
      Pattern pattern=Pattern.compile((String)args[0]);
      Matcher matcher=pattern.matcher((String)source);
      return matcher.matches() ? matcher.group() : null;
    }
  }
);
  envFactory.getDgEnvironment().addDgOperation(doi);
  envFactory.getDgEvaluationEnvironment().addDgOperation(doi);
}",0.8741176470588236
88716,"protected static DgEnvironmentFactory setupEnvironment(){
  DgEnvironmentFactory.reset();
  envFactory=new DgEnvironmentFactory();
  addROperation(envFactory);
  addMOperation(envFactory);
  addTOperation(envFactory);
  addSOperation(envFactory);
  addNOperation(envFactory);
  return envFactory;
}","protected static DgEnvironmentFactory setupEnvironment(){
  DgEnvironmentFactory.reset();
  envFactory=new DgEnvironmentFactory();
  addRegexMatchOperation(envFactory);
  addROperation(envFactory);
  addMOperation(envFactory);
  addTOperation(envFactory);
  addSOperation(envFactory);
  addNOperation(envFactory);
  return envFactory;
}",0.8517350157728707
88717,"public static List<Package> getPackagesOfType(Package root,String typeName,Set<Element> seen){
  if (root == null)   return null;
  Pair<Boolean,Set<Element>> p=Utils2.seen(root,true,seen);
  if (p.first)   return Utils2.getEmptyList();
  seen=p.second;
  List<Package> pkgs=new ArrayList<Package>();
  if (isTypeOf(root,typeName)) {
    pkgs.add(root);
  }
  if (root.getNestedPackage() != null) {
    for (    Package pkg : root.getNestedPackage()) {
      pkgs.addAll(getPackagesOfType(pkg,typeName,seen));
    }
  }
  return pkgs;
}","/** 
 * @param root top-level Package
 * @param typeName the name or regular expression pattern of the type name on which to filter collected packages; this type name could be a stereotype, EClass, or Java class name
 * @param seen a set of already visited Elements to avoid revisiting them in infinite cycles
 * @return all Packages, including root, top-level Packages within root, andtheir nested packages, that also have a type matching typeName (exactly or as a pattern)
 */
public static List<Package> getPackagesOfType(Package root,String typeName,Set<Element> seen){
  if (root == null)   return null;
  Pair<Boolean,Set<Element>> p=Utils2.seen(root,true,seen);
  if (p.first)   return Utils2.getEmptyList();
  seen=p.second;
  List<Package> pkgs=new ArrayList<Package>();
  if (isTypeOf(root,typeName)) {
    pkgs.add(root);
  }
  if (root.getNestedPackage() != null) {
    for (    Package pkg : root.getNestedPackage()) {
      pkgs.addAll(getPackagesOfType(pkg,typeName,seen));
    }
  }
  return pkgs;
}",0.6911669890393295
88718,"public static boolean isTypeOf(Object o,String typeName){
  GetCallOperation op=new GetCallOperation(CallReturnType.TYPE,true,true);
  Object result=op.callOperation(o,new Object[]{typeName});
  return EmfUtils.matches(result,typeName);
}","/** 
 * @param object the object to test for a match
 * @param typeName regular expression String according to Pattern
 * @return whether the name of the object's Stereotype, EClass, or Javaclass matches the typeName regular expression pattern
 */
public static boolean isTypeOf(Object object,String typeName){
  GetCallOperation op=new GetCallOperation(CallReturnType.TYPE,true,true);
  Object result=op.callOperation(object,new Object[]{typeName});
  if (result instanceof Collection && ((Collection<?>)result).size() == 1) {
    if (matches(((Collection<?>)result).iterator().next(),typeName))     return true;
  }
  return matches(result,typeName);
}",0.4708520179372197
88719,"@Override public Object callOperation(Object source,Object[] args){
  Object result=null;
  try {
    result=evaluateQueryNoSetup(source,expression,isVerboseDefault());
  }
 catch (  Throwable e) {
  }
  return result;
}","@Override public Object callOperation(Object source,Object[] args){
  Object result=null;
  try {
    result=evaluateQuery(source,expression,isVerboseDefault());
  }
 catch (  Throwable e) {
    Debug.error(true,false,e.getLocalizedMessage());
  }
  return result;
}",0.8765432098765432
88720,"protected static void addExpressionOperation(final String opName,final String expression,DgEnvironmentFactory envFactory){
  DgOperationInstance doi=new DgOperationInstance();
  doi.setName(opName);
  doi.setAnnotationName(""String_Node_Str"");
  doi.setCallerType(OCLStandardLibraryImpl.INSTANCE.getOclAny());
  doi.setReturnType(OCLStandardLibraryImpl.INSTANCE.getOclAny());
  doi.setOperation(new CallOperation(){
    @Override public Object callOperation(    Object source,    Object[] args){
      Object result=null;
      try {
        result=evaluateQueryNoSetup(source,expression,isVerboseDefault());
      }
 catch (      Throwable e) {
      }
      return result;
    }
  }
);
  envFactory.getDgEnvironment().addDgOperation(doi);
  envFactory.getDgEvaluationEnvironment().addDgOperation(doi);
}","protected static void addExpressionOperation(final String opName,final String expression,DgEnvironmentFactory envFactory){
  DgOperationInstance doi=new DgOperationInstance();
  doi.setName(opName);
  doi.setAnnotationName(""String_Node_Str"");
  doi.setCallerType(OCLStandardLibraryImpl.INSTANCE.getOclAny());
  doi.setReturnType(OCLStandardLibraryImpl.INSTANCE.getOclAny());
  doi.setOperation(new CallOperation(){
    @Override public Object callOperation(    Object source,    Object[] args){
      Object result=null;
      try {
        result=evaluateQuery(source,expression,isVerboseDefault());
      }
 catch (      Throwable e) {
        Debug.error(true,false,e.getLocalizedMessage());
      }
      return result;
    }
  }
);
  envFactory.getDgEnvironment().addDgOperation(doi);
  envFactory.getDgEvaluationEnvironment().addDgOperation(doi);
}",0.9613992762364294
88721,"/** 
 * Find Expressions in ExpressionLibraries and add them as blackbox shortcuts.
 * @param envFactory
 */
protected static void addExpressionOperations(DgEnvironmentFactory envFactory){
  ArrayList<Element> expressions=new ArrayList<Element>();
  List<Package> pkgs=Utils.getPackagesOfType(DocGen3Profile.expressionLibrary);
  Stereotype exprStereotype=Utils.getStereotype(DocGen3Profile.expressionChoosable);
  for (  Package pkg : pkgs) {
    List<Element> owned=Utils.collectOwnedElements(pkg,0);
    List<Element> moreExprs=Utils.filterElementsByStereotype(owned,exprStereotype,true,true);
    expressions.addAll(moreExprs);
  }
  for (  Element expr : expressions) {
    String name=Utils.getName(expr);
    String exprString=queryElementToStringExpression(expr);
    String errorMsg=checkParsable(exprString);
    if (!Utils2.isNullOrEmpty(name) && errorMsg == null)     try {
      addExpressionOperation(name,exprString,envFactory);
    }
 catch (    Throwable e) {
      errorMsg=e.getLocalizedMessage();
    }
    if (errorMsg != null) {
      Debug.error(true,false,""String_Node_Str"" + name + ""String_Node_Str""+ exprString+ ""String_Node_Str""+ errorMsg);
    }
  }
}","/** 
 * Find Expressions in ExpressionLibraries and add them as blackbox shortcuts.
 * @param envFactory
 */
protected static void addExpressionOperations(DgEnvironmentFactory envFactory){
  ArrayList<Element> expressions=new ArrayList<Element>();
  List<Package> pkgs=Utils.getPackagesOfType(DocGen3Profile.expressionLibrary);
  Stereotype exprStereotype=Utils.getStereotype(DocGen3Profile.expressionChoosable);
  for (  Package pkg : pkgs) {
    List<Element> owned=Utils.collectOwnedElements(pkg,0);
    List<Element> moreExprs=Utils.filterElementsByStereotype(owned,exprStereotype,true,true);
    expressions.addAll(moreExprs);
  }
  for (  Element expr : expressions) {
    String name=Utils.getName(expr);
    String exprString=queryElementToStringExpression(expr);
    String errorMsg=null;
    if (!Utils2.isNullOrEmpty(name) && errorMsg == null)     try {
      addExpressionOperation(name,exprString,envFactory);
    }
 catch (    Throwable e) {
      errorMsg=e.getLocalizedMessage();
    }
    if (errorMsg != null) {
      Debug.error(true,false,""String_Node_Str"" + name + ""String_Node_Str""+ exprString+ ""String_Node_Str""+ errorMsg);
    }
  }
}",0.9875909285408644
88722,"public static void outln(String s){
  log(s,true,false);
}","public static void outln(String s){
  MdDebug.log(s,true,false);
}",0.935483870967742
88723,"public static void errln(String s){
  log(s,true,true,Color.RED);
}","public static void errln(String s){
  MdDebug.log(s,true,true,Color.RED);
}",0.943661971830986
88724,"public static synchronized void turnOn(){
  on=true;
  gl=getGuiLog();
}","public static synchronized void turnOn(){
  on=true;
  MdDebug.gl=MdDebug.getGuiLog();
}",0.9
88725,"public static void err(String s){
  log(s,false,true);
}","public static void err(String s){
  MdDebug.log(s,false,true);
}",0.9333333333333332
88726,"public static void out(String s){
  log(s,false,false);
}","public static void out(String s){
  MdDebug.log(s,false,false);
}",0.9344262295081968
88727,"public static <T1 extends Comparable<T1>,T2 extends Comparable<T2>,T3 extends Comparable<T3>,T4>T4 put(Map<T1,Map<T2,Map<T3,T4>>> map,T1 t1,T2 t2,T3 t3,T4 t4){
  if (Debug.errorOnNull(""String_Node_Str"",map,t1,t2,t3,t4)) {
    return null;
  }
  Map<T2,Map<T3,T4>> innerMap=map.get(t1);
  if (innerMap == null) {
    innerMap=new TreeMap<T2,Map<T3,T4>>();
    map.put(t1,innerMap);
  }
  return put(innerMap,t2,t3,t4);
}","public static <T1,T2,T3,T4>T4 put(Map<T1,Map<T2,Map<T3,T4>>> map,T1 t1,T2 t2,T3 t3,T4 t4){
  if (Debug.errorOnNull(""String_Node_Str"",map,t1,t2,t3,t4)) {
    return null;
  }
  Map<T2,Map<T3,T4>> innerMap=map.get(t1);
  if (innerMap == null) {
    innerMap=new TreeMap<T2,Map<T3,T4>>(CompareUtils.GenericComparator.instance());
    map.put(t1,innerMap);
  }
  return put(innerMap,t2,t3,t4);
}",0.8493827160493828
88728,"public static <T1 extends Comparable<T1>,T2 extends Comparable<T2>,T3 extends Comparable<T3>,T4>T4 get(Map<T1,Map<T2,Map<T3,T4>>> map,T1 t1,T2 t2,T3 t3){
  if (Debug.errorOnNull(""String_Node_Str"",map,t1,t2,t3)) {
    return null;
  }
  Map<T2,Map<T3,T4>> innerMap=map.get(t1);
  if (innerMap != null) {
    return get(innerMap,t2,t3);
  }
  return null;
}","public static <T1,T2,T3,T4>T4 get(Map<T1,Map<T2,Map<T3,T4>>> map,T1 t1,T2 t2,T3 t3){
  if (Debug.errorOnNull(""String_Node_Str"",map,t1,t2,t3)) {
    return null;
  }
  Map<T2,Map<T3,T4>> innerMap=map.get(t1);
  if (innerMap != null) {
    return get(innerMap,t2,t3);
  }
  return null;
}",0.8736349453978159
88729,"public void actionPerformed(ActionEvent e){
  GUILog gl=Application.getInstance().getGUILog();
  GetMethod gm=null;
  try {
    String response=null;
    Boolean recurse=Utils.getUserYesNoAnswer(""String_Node_Str"");
    if (recurse == null)     return;
    String url=ViewEditUtils.getUrl();
    if (url == null)     return;
    gl.log(""String_Node_Str"");
    DocumentValidator dv=new DocumentValidator(doc);
    dv.validateDocument();
    if (dv.isFatal()) {
      dv.printErrors();
      return;
    }
    DocumentGenerator dg=new DocumentGenerator(doc,dv,null);
    Document dge=dg.parseDocument(true,recurse);
    dv.printErrors();
    (new PostProcessor()).process(dge);
    ProgressStatusRunner.runWithProgressStatus(new ViewExporter(dge,doc,recurse,true,url),""String_Node_Str"",true,0);
  }
 catch (  Exception ex) {
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw);
    ex.printStackTrace(pw);
    gl.log(sw.toString());
    ex.printStackTrace();
  }
 finally {
    if (gm != null)     gm.releaseConnection();
  }
}","public void actionPerformed(ActionEvent e){
  GUILog gl=Application.getInstance().getGUILog();
  GetMethod gm=null;
  DocumentValidator dv=null;
  try {
    String response=null;
    Boolean recurse=Utils.getUserYesNoAnswer(""String_Node_Str"");
    if (recurse == null)     return;
    String url=ViewEditUtils.getUrl();
    if (url == null)     return;
    gl.log(""String_Node_Str"");
    dv=new DocumentValidator(doc);
    dv.validateDocument();
    if (dv.isFatal()) {
      dv.printErrors();
      return;
    }
    DocumentGenerator dg=new DocumentGenerator(doc,dv,null);
    Document dge=dg.parseDocument(true,recurse);
    (new PostProcessor()).process(dge);
    ProgressStatusRunner.runWithProgressStatus(new ViewExporter(dge,doc,recurse,true,url),""String_Node_Str"",true,0);
  }
 catch (  Exception ex) {
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw);
    ex.printStackTrace(pw);
    gl.log(sw.toString());
    ex.printStackTrace();
  }
 finally {
    if (gm != null)     gm.releaseConnection();
    if (dv != null)     dv.printErrors();
  }
}",0.9479606188466948
88730,"public void actionPerformed(ActionEvent e){
  GUILog gl=Application.getInstance().getGUILog();
  try {
    String response=null;
    Boolean recurse=Utils.getUserYesNoAnswer(""String_Node_Str"");
    if (recurse == null)     return;
    DocumentValidator dv=new DocumentValidator(doc);
    dv.validateDocument();
    if (dv.isFatal()) {
      dv.printErrors();
      return;
    }
    DocumentGenerator dg=new DocumentGenerator(doc,dv,null);
    Document dge=dg.parseDocument(true,recurse);
    dv.printErrors();
    ViewCommentVisitor vcv=new ViewCommentVisitor();
    dge.accept(vcv);
    String json=vcv.getJSON();
    String url=ViewEditUtils.getUrl();
    if (url == null)     return;
    url+=""String_Node_Str"" + doc.getID() + ""String_Node_Str"";
    if (recurse) {
      url+=""String_Node_Str"";
    }
    gl.log(""String_Node_Str"");
    PostMethod pm=new PostMethod(url);
    try {
      gl.log(""String_Node_Str"");
      pm.setRequestHeader(""String_Node_Str"",""String_Node_Str"");
      pm.setRequestEntity(JsonRequestEntity.create(json));
      HttpClient client=new HttpClient();
      ViewEditUtils.setCredentials(client);
      client.executeMethod(pm);
      response=pm.getResponseBodyAsString();
      if (response.equals(""String_Node_Str""))       gl.log(""String_Node_Str"");
 else       if (response.equals(""String_Node_Str""))       gl.log(""String_Node_Str"");
 else       gl.log(response);
    }
  finally {
      pm.releaseConnection();
    }
  }
 catch (  Exception ex) {
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw);
    ex.printStackTrace(pw);
    gl.log(sw.toString());
    ex.printStackTrace();
  }
}","public void actionPerformed(ActionEvent e){
  GUILog gl=Application.getInstance().getGUILog();
  DocumentValidator dv=null;
  try {
    String response=null;
    Boolean recurse=Utils.getUserYesNoAnswer(""String_Node_Str"");
    if (recurse == null)     return;
    dv=new DocumentValidator(doc);
    dv.validateDocument();
    if (dv.isFatal()) {
      dv.printErrors();
      return;
    }
    DocumentGenerator dg=new DocumentGenerator(doc,dv,null);
    Document dge=dg.parseDocument(true,recurse);
    ViewCommentVisitor vcv=new ViewCommentVisitor();
    dge.accept(vcv);
    String json=vcv.getJSON();
    String url=ViewEditUtils.getUrl();
    if (url == null) {
      dv.printErrors();
      return;
    }
    url+=""String_Node_Str"" + doc.getID() + ""String_Node_Str"";
    if (recurse) {
      url+=""String_Node_Str"";
    }
    gl.log(""String_Node_Str"");
    PostMethod pm=new PostMethod(url);
    try {
      gl.log(""String_Node_Str"");
      pm.setRequestHeader(""String_Node_Str"",""String_Node_Str"");
      pm.setRequestEntity(JsonRequestEntity.create(json));
      HttpClient client=new HttpClient();
      ViewEditUtils.setCredentials(client);
      client.executeMethod(pm);
      response=pm.getResponseBodyAsString();
      if (response.equals(""String_Node_Str""))       gl.log(""String_Node_Str"");
 else       if (response.equals(""String_Node_Str""))       gl.log(""String_Node_Str"");
 else       gl.log(response);
    }
  finally {
      pm.releaseConnection();
    }
  }
 catch (  Exception ex) {
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw);
    ex.printStackTrace(pw);
    gl.log(sw.toString());
    ex.printStackTrace();
  }
  if (dv != null)   dv.printErrors();
}",0.9514447423294607
88731,"public void actionPerformed(ActionEvent e){
  GUILog gl=Application.getInstance().getGUILog();
  PostMethod pm=null;
  try {
    DocumentValidator dv=new DocumentValidator(doc);
    dv.validateDocument();
    if (dv.isFatal()) {
      dv.printErrors();
      return;
    }
    DocumentGenerator dg=new DocumentGenerator(doc,dv,null);
    Document dge=dg.parseDocument(true,true);
    dv.printErrors();
    ViewHierarchyVisitor vhv=new ViewHierarchyVisitor();
    dge.accept(vhv);
    String post=vhv.getResult().toJSONString();
    String url=ViewEditUtils.getUrl();
    if (url == null)     return;
    gl.log(""String_Node_Str"");
    String posturl=url + ""String_Node_Str"" + doc.getID()+ ""String_Node_Str"";
    pm=new PostMethod(posturl);
    pm.setRequestHeader(""String_Node_Str"",""String_Node_Str"");
    pm.setRequestEntity(JsonRequestEntity.create(post));
    HttpClient client=new HttpClient();
    ViewEditUtils.setCredentials(client);
    gl.log(""String_Node_Str"");
    client.executeMethod(pm);
    String response=pm.getResponseBodyAsString();
    if (response.equals(""String_Node_Str""))     gl.log(""String_Node_Str"");
 else     gl.log(response);
  }
 catch (  Exception ex) {
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw);
    ex.printStackTrace(pw);
    gl.log(sw.toString());
    ex.printStackTrace();
  }
 finally {
    if (pm != null)     pm.releaseConnection();
  }
}","public void actionPerformed(ActionEvent e){
  GUILog gl=Application.getInstance().getGUILog();
  PostMethod pm=null;
  DocumentValidator dv=null;
  try {
    dv=new DocumentValidator(doc);
    dv.validateDocument();
    if (dv.isFatal()) {
      dv.printErrors();
      return;
    }
    DocumentGenerator dg=new DocumentGenerator(doc,dv,null);
    Document dge=dg.parseDocument(true,true);
    dv.printErrors();
    ViewHierarchyVisitor vhv=new ViewHierarchyVisitor();
    dge.accept(vhv);
    String post=vhv.getResult().toJSONString();
    String url=ViewEditUtils.getUrl();
    if (url == null) {
      dv.printErrors();
      return;
    }
    gl.log(""String_Node_Str"");
    String posturl=url + ""String_Node_Str"" + doc.getID()+ ""String_Node_Str"";
    pm=new PostMethod(posturl);
    pm.setRequestHeader(""String_Node_Str"",""String_Node_Str"");
    pm.setRequestEntity(JsonRequestEntity.create(post));
    HttpClient client=new HttpClient();
    ViewEditUtils.setCredentials(client);
    gl.log(""String_Node_Str"");
    client.executeMethod(pm);
    String response=pm.getResponseBodyAsString();
    if (response.equals(""String_Node_Str""))     gl.log(""String_Node_Str"");
 else     gl.log(response);
  }
 catch (  Exception ex) {
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw);
    ex.printStackTrace(pw);
    gl.log(sw.toString());
    ex.printStackTrace();
  }
 finally {
    if (pm != null)     pm.releaseConnection();
  }
  if (dv != null)   dv.printErrors();
}",0.9515630367571282
88732,"public void actionPerformed(ActionEvent e){
  GUILog gl=Application.getInstance().getGUILog();
  try {
    DocumentValidator dv=new DocumentValidator(doc);
    dv.validateDocument();
    if (dv.isFatal()) {
      dv.printErrors();
      return;
    }
    DocumentGenerator dg=new DocumentGenerator(doc,dv,null);
    Document dge=dg.parseDocument();
    dv.printErrors();
    boolean genNewImage=dge.getGenNewImage();
    (new PostProcessor()).process(dge);
    JFileChooser choose=new JFileChooser();
    choose.setDialogTitle(""String_Node_Str"");
    int retval=choose.showSaveDialog(null);
    if (retval == JFileChooser.APPROVE_OPTION) {
      if (choose.getSelectedFile() != null) {
        File savefile=choose.getSelectedFile();
        String userName=savefile.getName();
        String filename=userName;
        if (userName.length() < 4 || !userName.endsWith(""String_Node_Str""))         filename=userName + ""String_Node_Str"";
        File dir=savefile.getParentFile();
        File realfile=new File(dir,filename);
        ProgressStatusRunner.runWithProgressStatus(new DocumentWriter(dge,realfile,genNewImage,dir),""String_Node_Str"",true,0);
      }
    }
  }
 catch (  Exception ex) {
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw);
    ex.printStackTrace(pw);
    gl.log(sw.toString());
    ex.printStackTrace();
  }
}","public void actionPerformed(ActionEvent e){
  GUILog gl=Application.getInstance().getGUILog();
  DocumentValidator dv=new DocumentValidator(doc);
  try {
    dv.validateDocument();
    if (dv.isFatal()) {
      dv.printErrors();
      return;
    }
    DocumentGenerator dg=new DocumentGenerator(doc,dv,null);
    Document dge=dg.parseDocument();
    boolean genNewImage=dge.getGenNewImage();
    (new PostProcessor()).process(dge);
    JFileChooser choose=new JFileChooser();
    choose.setDialogTitle(""String_Node_Str"");
    int retval=choose.showSaveDialog(null);
    if (retval == JFileChooser.APPROVE_OPTION) {
      if (choose.getSelectedFile() != null) {
        File savefile=choose.getSelectedFile();
        String userName=savefile.getName();
        String filename=userName;
        if (userName.length() < 4 || !userName.endsWith(""String_Node_Str""))         filename=userName + ""String_Node_Str"";
        File dir=savefile.getParentFile();
        File realfile=new File(dir,filename);
        ProgressStatusRunner.runWithProgressStatus(new DocumentWriter(dge,realfile,genNewImage,dir),""String_Node_Str"",true,0);
      }
    }
  }
 catch (  Exception ex) {
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw);
    ex.printStackTrace(pw);
    gl.log(sw.toString());
    ex.printStackTrace();
  }
  dv.printErrors();
}",0.8359087564385578
88733,"@Override public void windowOpened(WindowEvent e){
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
  if (e.getComponent() instanceof Dialog) {
    if (!((Dialog)e.getComponent()).isResizable()) {
      ((Dialog)e.getComponent()).setResizable(true);
    }
  }
}","@Override public void windowOpened(WindowEvent e){
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
  Dialog d=getDialog(e);
  if (d != null) {
    if (!d.isResizable()) {
      d.setResizable(true);
    }
  }
}",0.6434108527131783
88734,"public void show(){
  try {
    SwingUtilities.invokeLater(this);
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}","public void show(){
  try {
    SwingUtilities.invokeLater(this);
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  Window w=RequestFocusListener.getWindow(editableListPanel);
  if (RequestFocusListener.locationOnClose != null)   w.setLocation(RequestFocusListener.locationOnClose);
 else   w.setLocation(1000,1000);
  if (RequestFocusListener.sizeOnClose != null)   w.setSize(RequestFocusListener.sizeOnClose);
 else   w.setLocation(1000,1000);
  if (w instanceof Dialog)   ((Dialog)w).setResizable(true);
  Debug.outln(""String_Node_Str"" + w);
}",0.3671071953010279
88735,"@Override public void componentResized(ComponentEvent e){
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
  size=e.getComponent().getSize();
  location=e.getComponent().getLocation();
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
}","@Override public void componentResized(ComponentEvent e){
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
  Window w=RequestFocusListener.getWindow(e.getComponent());
  size=w.getSize();
  location=w.getLocation();
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
  Debug.outln(""String_Node_Str"" + w);
  Debug.outln(""String_Node_Str"" + w);
}",0.7789473684210526
88736,"@Override public void windowClosing(WindowEvent e){
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
  size=e.getComponent().getSize();
  location=e.getComponent().getLocation();
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
}","@Override public void windowClosing(WindowEvent e){
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
  Window w=RequestFocusListener.getWindow(e.getComponent());
  size=w.getSize();
  location=w.getLocation();
  locationOnClose=location;
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
  Debug.outln(""String_Node_Str"" + w);
  Debug.outln(""String_Node_Str"" + w);
}",0.6490455212922174
88737,"@Override public void componentMoved(ComponentEvent e){
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
  size=e.getComponent().getSize();
  location=e.getComponent().getLocation();
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
  if (e.getComponent() instanceof Dialog) {
    if (!((Dialog)e.getComponent()).isResizable()) {
      ((Dialog)e.getComponent()).setResizable(true);
    }
  }
}","@Override public void componentMoved(ComponentEvent e){
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
  Window w=RequestFocusListener.getWindow(e.getComponent());
  size=w.getSize();
  location=w.getLocation();
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
  Dialog d=getDialog(e);
  if (d != null) {
    if (!d.isResizable()) {
      d.setResizable(true);
    }
  }
  Debug.outln(""String_Node_Str"" + w);
  Debug.outln(""String_Node_Str"" + w);
}",0.5972073039742213
88738,"@Override public void componentHidden(ComponentEvent e){
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
  if (e.getComponent() instanceof Dialog) {
    if (!((Dialog)e.getComponent()).isResizable()) {
      ((Dialog)e.getComponent()).setResizable(true);
    }
  }
}","@Override public void componentHidden(ComponentEvent e){
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
  Window w=getTopComponentOfType(e.getComponent(),Window.class);
  Dialog d=getDialog(e);
  if (d != null) {
    if (!d.isResizable()) {
      d.setResizable(true);
    }
  }
}",0.7419898819561551
88739,"@Override public void ancestorAdded(AncestorEvent e){
  Debug.outln(""String_Node_Str"" + e + ""String_Node_Str"");
  JComponent component=e.getComponent();
  component.requestFocusInWindow();
  if (component instanceof JTextField) {
    ((JTextField)component).selectAll();
  }
  JWindow top=getTopComponentOfType(component,JWindow.class);
  JDialog dialog=getTopComponentOfType(component,JDialog.class);
  Window win=(dialog == null ? top : dialog);
  try {
    if (win != null) {
      GraphicsDevice gd=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
      Dimension screenSize=new Dimension(gd.getDisplayMode().getWidth(),gd.getDisplayMode().getHeight());
      if (!win.getMaximumSize().equals(screenSize)) {
        win.setMaximumSize(screenSize);
      }
      if (!win.getPreferredSize().equals(size)) {
        win.setPreferredSize(size);
      }
      if (location != null && !win.getLocation().equals(location)) {
        win.setLocation(location);
      }
      win.setMinimumSize(new Dimension(200,100));
      boolean found=false;
      for (      WindowListener wl : win.getWindowListeners()) {
        if (wl.getClass().equals(WinListener.class)) {
          found=true;
          break;
        }
      }
      if (!found)       win.addWindowListener(new WinListener());
      for (      ComponentListener wl : win.getComponentListeners()) {
        if (wl.getClass().equals(SizeListener.class)) {
          found=true;
          break;
        }
      }
      if (!found)       win.addComponentListener(new SizeListener());
      found=false;
      if (dialog != null) {
        dialog.setResizable(true);
        Debug.outln(""String_Node_Str"" + dialog.toString());
      }
 else       if (top != null) {
        Debug.outln(""String_Node_Str"" + component.getRootPane().toString());
        System.out.println(""String_Node_Str"" + top.toString());
      }
    }
  }
 catch (  NullPointerException npe) {
    Debug.errln(npe.getMessage());
  }
  if (removeListener)   component.removeAncestorListener(this);
}","@Override public void ancestorAdded(AncestorEvent e){
  Debug.outln(""String_Node_Str"" + e + ""String_Node_Str"");
  JComponent component=e.getComponent();
  component.requestFocusInWindow();
  if (component instanceof JTextField) {
    ((JTextField)component).selectAll();
  }
  JWindow top=getTopComponentOfType(component,JWindow.class);
  JDialog dialog=getTopComponentOfType(component,JDialog.class);
  Window win=(dialog == null ? top : dialog);
  Window w=win;
  Debug.outln(""String_Node_Str"" + w);
  if (win != w) {
    Debug.error(false,""String_Node_Str"");
    if (w != null) {
      win=w;
      if (w instanceof JDialog)       dialog=(JDialog)w;
    }
  }
  try {
    if (win != null) {
      GraphicsDevice gd=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
      Dimension screenSize=new Dimension(gd.getDisplayMode().getWidth(),gd.getDisplayMode().getHeight());
      if (!win.getMaximumSize().equals(screenSize)) {
        win.setMaximumSize(screenSize);
      }
      if (!win.getPreferredSize().equals(size)) {
        win.setPreferredSize(size);
      }
      if (locationOnClose != null) {
        win.setLocation(locationOnClose);
      }
 else       if (location != null && !win.getLocation().equals(location)) {
        win.setLocation(location);
      }
      if (sizeOnClose != null) {
        win.setSize(sizeOnClose);
      }
      win.setMinimumSize(new Dimension(200,100));
      boolean found=false;
      for (      WindowListener wl : win.getWindowListeners()) {
        if (wl.getClass().equals(WinListener.class)) {
          found=true;
          break;
        }
      }
      if (!found)       win.addWindowListener(new WinListener());
      for (      ComponentListener wl : win.getComponentListeners()) {
        if (wl.getClass().equals(SizeListener.class)) {
          found=true;
          break;
        }
      }
      if (!found)       win.addComponentListener(new SizeListener());
      found=false;
      if (dialog != null) {
        dialog.setResizable(true);
        Debug.outln(""String_Node_Str"" + dialog.toString());
      }
 else       if (top != null) {
        Debug.outln(""String_Node_Str"" + component.getRootPane().toString());
        System.out.println(""String_Node_Str"" + top.toString());
      }
    }
  }
 catch (  NullPointerException npe) {
    Debug.errln(npe.getMessage());
  }
  if (removeListener)   component.removeAncestorListener(this);
}",0.9109573755858068
88740,"@Override public void componentShown(ComponentEvent e){
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
  if (e.getComponent() instanceof Dialog) {
    if (!((Dialog)e.getComponent()).isResizable()) {
      ((Dialog)e.getComponent()).setResizable(true);
    }
  }
}","@Override public void componentShown(ComponentEvent e){
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
  Window w=getTopComponentOfType(e.getComponent(),Window.class);
  if (locationOnClose != null) {
    w.setLocation(locationOnClose);
  }
  if (sizeOnClose != null) {
    w.setSize(sizeOnClose);
  }
  Dialog d=getDialog(e);
  if (d != null) {
    if (!d.isResizable()) {
      d.setResizable(true);
    }
  }
}",0.6179310344827587
88741,"@Override public void windowClosed(WindowEvent e){
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
}","@Override public void windowClosed(WindowEvent e){
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
  Window w=RequestFocusListener.getWindow(e.getComponent());
  size=w.getSize();
  location=w.getLocation();
  locationOnClose=location;
  Debug.outln(""String_Node_Str"" + size + ""String_Node_Str""+ location);
  Debug.outln(""String_Node_Str"" + w);
  Debug.outln(""String_Node_Str"" + w);
}",0.4641509433962264
88742,"public void setResultPanel(Object result){
  System.out.println(""String_Node_Str"" + result + ""String_Node_Str"");
  if (resultPane instanceof JEditorPane) {
    if (result == null)     result=""String_Node_Str"";
    ((JEditorPane)resultPane).setText(result.toString());
  }
 else {
    JComponent newResultPane=null;
    if (result instanceof JComponent) {
      newResultPane=(JComponent)result;
    }
 else     if (result instanceof Icon) {
      newResultPane=new JLabel((Icon)result);
    }
 else {
      newResultPane=createEditorPane(result == null ? ""String_Node_Str"" : result.toString());
    }
    if (newResultPane != null) {
      resultScrollPane.remove(resultPane);
      resultPane=newResultPane;
      System.out.println(""String_Node_Str"");
      resultScrollPane.add(resultPane);
    }
  }
  if (this.isVisible()) {
    System.out.println(""String_Node_Str"");
    setVisible(false);
    setVisible(true);
  }
 else {
    System.out.println(""String_Node_Str"");
  }
}","public void setResultPanel(Object result){
  System.out.println(""String_Node_Str"" + result + ""String_Node_Str"");
  if (resultPane instanceof JEditorPane) {
    if (result == null)     result=""String_Node_Str"";
    ((JEditorPane)resultPane).setText(result.toString());
  }
 else {
    JComponent newResultPane=null;
    if (result instanceof JComponent) {
      newResultPane=(JComponent)result;
    }
 else     if (result instanceof Icon) {
      newResultPane=new JLabel((Icon)result);
    }
 else {
      newResultPane=createEditorPane(result == null ? ""String_Node_Str"" : result.toString());
    }
    if (newResultPane != null) {
      resultScrollPane.remove(resultPane);
      resultPane=newResultPane;
      resultScrollPane.add(resultPane);
    }
  }
  if (this.isVisible()) {
    Debug.outln(""String_Node_Str"");
    setVisible(false);
    setVisible(true);
  }
 else {
    Debug.outln(""String_Node_Str"");
  }
}",0.7812335266209804
88743,"/** 
 * singleView: whether to only parse the passed in view recurse: only if singleView is true, whether to process all children views these options are to accommodate normal docgen to docbook xml and view editor export options
 */
public Document parseDocument(boolean singleView,boolean recurse){
  if (StereotypesHelper.hasStereotypeOrDerived(start,sysmlview)) {
    if (start instanceof Package || StereotypesHelper.hasStereotype(start,DocGen3Profile.documentViewStereotype) || GeneratorUtils.findStereotypedRelationship(start,DocGen3Profile.firstStereotype) != null || GeneratorUtils.findStereotypedRelationship(start,DocGen3Profile.nextStereotype) != null || GeneratorUtils.findStereotypedRelationship(start,DocGen3Profile.nosectionStereotype) != null) {
      ViewParser vp=new ViewParser(this,singleView,recurse,doc,start);
      vp.parse();
    }
 else {
      ProductViewParser vp=new ProductViewParser(this,singleView,recurse,doc,start);
      vp.parse();
    }
  }
 else   if (StereotypesHelper.hasStereotypeOrDerived(start,DocGen3Profile.documentStereotype) && start instanceof Activity)   parseActivityOrStructuredNode(start,doc);
 else {
  }
  docMetadata();
  for (  DocGenElement e : doc.getChildren()) {
    if (e instanceof Section)     ((Section)e).isChapter(true);
  }
  return doc;
}","/** 
 * singleView: whether to only parse the passed in view recurse: only if singleView is true, whether to process all children views these options are to accommodate normal docgen to docbook xml and view editor export options
 */
public Document parseDocument(boolean singleView,boolean recurse){
  if (StereotypesHelper.hasStereotypeOrDerived(start,sysmlview)) {
    if (start instanceof Package || start instanceof Diagram || StereotypesHelper.hasStereotype(start,DocGen3Profile.documentViewStereotype)|| GeneratorUtils.findStereotypedRelationship(start,DocGen3Profile.firstStereotype) != null || GeneratorUtils.findStereotypedRelationship(start,DocGen3Profile.nextStereotype) != null || GeneratorUtils.findStereotypedRelationship(start,DocGen3Profile.nosectionStereotype) != null) {
      ViewParser vp=new ViewParser(this,singleView,recurse,doc,start);
      vp.parse();
    }
 else {
      ProductViewParser vp=new ProductViewParser(this,singleView,recurse,doc,start);
      vp.parse();
    }
  }
 else   if (StereotypesHelper.hasStereotypeOrDerived(start,DocGen3Profile.documentStereotype) && start instanceof Activity)   parseActivityOrStructuredNode(start,doc);
 else {
  }
  docMetadata();
  for (  DocGenElement e : doc.getChildren()) {
    if (e instanceof Section)     ((Section)e).isChapter(true);
  }
  return doc;
}",0.989010989010989
88744,"/** 
 * parses activity/structured node - these usually indicate a new context of target elements
 * @param a
 * @param parent
 * @return the output of parsing the activity
 */
@SuppressWarnings(""String_Node_Str"") public Object parseActivityOrStructuredNode(Element a,Container parent){
  Debug.outln(""String_Node_Str"" + a.getHumanName() + ""String_Node_Str""+ a.getID()+ ""String_Node_Str""+ parent.getStringIfEmpty()+ ""String_Node_Str"");
  InitialNode in=GeneratorUtils.findInitialNode(a);
  if (in == null)   return null;
  Collection<ActivityEdge> outs=in.getOutgoing();
  int pushed=0;
  ActivityNode next2=in;
  Object lastResults=null;
  Object parseResults=null;
  while (outs != null && outs.size() == 1) {
    parseResults=null;
    ActivityNode next=outs.iterator().next().getTarget();
    Debug.outln(""String_Node_Str"" + next.getHumanName() + ""String_Node_Str""+ next.getID());
    next2=null;
    if (next instanceof CallBehaviorAction || next instanceof StructuredActivityNode && StereotypesHelper.hasStereotypeOrDerived(next,DocGen3Profile.tableStructureStereotype)) {
      Behavior b=(next instanceof CallBehaviorAction) ? ((CallBehaviorAction)next).getBehavior() : null;
      if (StereotypesHelper.hasStereotypeOrDerived(next,DocGen3Profile.sectionStereotype) || b != null && StereotypesHelper.hasStereotypeOrDerived(b,DocGen3Profile.sectionStereotype)) {
        parseResults=parseSection((CallBehaviorAction)next,parent);
        next2=next;
      }
 else       if (StereotypesHelper.hasStereotypeOrDerived(next,DocGen3Profile.templateStereotype) || b != null && StereotypesHelper.hasStereotypeOrDerived(b,DocGen3Profile.templateStereotype)) {
        parseResults=parseQuery(next,parent);
        next2=next;
      }
 else       if (StereotypesHelper.hasStereotypeOrDerived(next,DocGen3Profile.collectFilterStereotype) || b != null && StereotypesHelper.hasStereotypeOrDerived(b,DocGen3Profile.collectFilterStereotype)) {
        CollectFilterParser.setContext(context);
        List<Element> results=CollectFilterParser.startCollectAndFilterSequence(next,null);
        parseResults=results;
        this.context.pushTargets(results);
        pushed++;
        next2=context.getCurrentNode();
      }
    }
 else     if (next instanceof StructuredActivityNode) {
      Boolean loop=(Boolean)GeneratorUtils.getObjectProperty(next,DocGen3Profile.templateStereotype,""String_Node_Str"",false);
      Boolean ignore=(Boolean)GeneratorUtils.getObjectProperty(next,DocGen3Profile.templateStereotype,""String_Node_Str"",false);
      Boolean createSections=(Boolean)GeneratorUtils.getObjectProperty(next,DocGen3Profile.structuredQueryStereotype,""String_Node_Str"",false);
      Boolean useContextNameAsTitle=(Boolean)GeneratorUtils.getObjectProperty(next,DocGen3Profile.templateStereotype,""String_Node_Str"",false);
      String titlePrefix=(String)StereotypesHelper.getStereotypePropertyFirst(a,DocGen3Profile.templateStereotype,""String_Node_Str"");
      String titleSuffix=(String)StereotypesHelper.getStereotypePropertyFirst(a,DocGen3Profile.templateStereotype,""String_Node_Str"");
      List<String> titles=(List<String>)StereotypesHelper.getStereotypePropertyValue(next,DocGen3Profile.templateStereotype,""String_Node_Str"");
      if (titles == null)       titles=new ArrayList<String>();
      List<Element> targets=getTargets(next,this.context);
      if (!ignore) {
        if (loop) {
          int count=0;
          for (          Element e : targets) {
            List<Element> target=new ArrayList<Element>();
            target.add(e);
            this.context.pushTargets(target);
            Container con=parent;
            if (createSections) {
              Section sec=new Section();
              if (titles != null && titles.size() > count)               sec.setTitle(titles.get(count));
 else               if (e instanceof NamedElement)               sec.setTitle(((NamedElement)e).getName());
              sec.setTitlePrefix(titlePrefix);
              sec.setTitleSuffix(titleSuffix);
              sec.setDgElement(next);
              parent.addElement(sec);
              con=sec;
            }
            parseResults=parseActivityOrStructuredNode(next,con);
            this.context.popTargets();
            count++;
          }
        }
 else {
          this.context.pushTargets(targets);
          Container con=parent;
          if (createSections) {
            Section sec=new Section();
            if (titles != null && titles.size() > 0)             sec.setTitle(titles.get(0));
 else             if (!next.getName().equals(""String_Node_Str""))             sec.setTitle(next.getName());
            sec.setUseContextNameAsTitle(useContextNameAsTitle);
            sec.setDgElement(next);
            sec.setTitlePrefix(titlePrefix);
            sec.setTitleSuffix(titleSuffix);
            parent.addElement(sec);
            con=sec;
          }
          parseResults=parseActivityOrStructuredNode(next,con);
          this.context.popTargets();
        }
      }
      next2=next;
    }
 else     if (next instanceof ForkNode && StereotypesHelper.hasStereotype(next,DocGen3Profile.parallel)) {
      CollectFilterParser.setContext(context);
      List<Element> results=CollectFilterParser.startCollectAndFilterSequence(next,null);
      parseResults=results;
      this.context.pushTargets(results);
      pushed++;
      next2=context.getCurrentNode();
    }
    if (next2 == null) {
      next2=next;
    }
    if (parseResults == null)     parseResults=this.context.peekTargets();
    if (parseResults != null)     lastResults=parseResults;
    DocumentValidator.evaluateConstraints(next,parseResults,context);
    outs=next2.getOutgoing();
    Debug.outln(""String_Node_Str"" + MoreToString.Helper.toLongString(outs) + ""String_Node_Str""+ next2.getHumanName()+ ""String_Node_Str""+ next2.getID());
  }
  while (pushed > 0) {
    this.context.popTargets();
    pushed--;
  }
  return lastResults;
}","/** 
 * parses activity/structured node - these usually indicate a new context of target elements
 * @param a
 * @param parent
 * @return the output of parsing the activity
 */
@SuppressWarnings(""String_Node_Str"") public Object parseActivityOrStructuredNode(Element a,Container parent){
  Debug.outln(""String_Node_Str"" + a.getHumanName() + ""String_Node_Str""+ a.getID()+ ""String_Node_Str""+ parent.getStringIfEmpty()+ ""String_Node_Str"");
  InitialNode in=GeneratorUtils.findInitialNode(a);
  if (in == null)   return null;
  Collection<ActivityEdge> outs=in.getOutgoing();
  int pushed=0;
  ActivityNode next2=in;
  Object lastResults=null;
  Object parseResults=null;
  while (outs != null && outs.size() == 1) {
    parseResults=null;
    ActivityNode next=outs.iterator().next().getTarget();
    Debug.outln(""String_Node_Str"" + next.getHumanName() + ""String_Node_Str""+ next.getID());
    next2=null;
    boolean evaluatedConstraintsForNext=false;
    if (next instanceof CallBehaviorAction || next instanceof StructuredActivityNode && StereotypesHelper.hasStereotypeOrDerived(next,DocGen3Profile.tableStructureStereotype)) {
      Behavior b=(next instanceof CallBehaviorAction) ? ((CallBehaviorAction)next).getBehavior() : null;
      if (StereotypesHelper.hasStereotypeOrDerived(next,DocGen3Profile.sectionStereotype) || b != null && StereotypesHelper.hasStereotypeOrDerived(b,DocGen3Profile.sectionStereotype)) {
        parseResults=parseSection((CallBehaviorAction)next,parent);
        next2=next;
      }
 else       if (StereotypesHelper.hasStereotypeOrDerived(next,DocGen3Profile.templateStereotype) || b != null && StereotypesHelper.hasStereotypeOrDerived(b,DocGen3Profile.templateStereotype)) {
        parseResults=parseQuery(next,parent);
        next2=next;
      }
 else       if (StereotypesHelper.hasStereotypeOrDerived(next,DocGen3Profile.collectFilterStereotype) || b != null && StereotypesHelper.hasStereotypeOrDerived(b,DocGen3Profile.collectFilterStereotype)) {
        CollectFilterParser.setContext(context);
        List<Element> results=CollectFilterParser.startCollectAndFilterSequence(next,null);
        parseResults=results;
        this.context.pushTargets(results);
        pushed++;
        next2=context.getCurrentNode();
        evaluatedConstraintsForNext=true;
      }
    }
 else     if (next instanceof StructuredActivityNode) {
      Boolean loop=(Boolean)GeneratorUtils.getObjectProperty(next,DocGen3Profile.templateStereotype,""String_Node_Str"",false);
      Boolean ignore=(Boolean)GeneratorUtils.getObjectProperty(next,DocGen3Profile.templateStereotype,""String_Node_Str"",false);
      Boolean createSections=(Boolean)GeneratorUtils.getObjectProperty(next,DocGen3Profile.structuredQueryStereotype,""String_Node_Str"",false);
      Boolean useContextNameAsTitle=(Boolean)GeneratorUtils.getObjectProperty(next,DocGen3Profile.templateStereotype,""String_Node_Str"",false);
      String titlePrefix=(String)StereotypesHelper.getStereotypePropertyFirst(a,DocGen3Profile.templateStereotype,""String_Node_Str"");
      String titleSuffix=(String)StereotypesHelper.getStereotypePropertyFirst(a,DocGen3Profile.templateStereotype,""String_Node_Str"");
      List<String> titles=(List<String>)StereotypesHelper.getStereotypePropertyValue(next,DocGen3Profile.templateStereotype,""String_Node_Str"");
      if (titles == null)       titles=new ArrayList<String>();
      List<Element> targets=getTargets(next,this.context);
      if (!ignore) {
        if (loop) {
          int count=0;
          for (          Element e : targets) {
            List<Element> target=new ArrayList<Element>();
            target.add(e);
            this.context.pushTargets(target);
            Container con=parent;
            if (createSections) {
              Section sec=new Section();
              if (titles != null && titles.size() > count)               sec.setTitle(titles.get(count));
 else               if (e instanceof NamedElement)               sec.setTitle(((NamedElement)e).getName());
              sec.setTitlePrefix(titlePrefix);
              sec.setTitleSuffix(titleSuffix);
              sec.setDgElement(next);
              parent.addElement(sec);
              con=sec;
            }
            parseResults=parseActivityOrStructuredNode(next,con);
            this.context.popTargets();
            count++;
          }
        }
 else {
          this.context.pushTargets(targets);
          Container con=parent;
          if (createSections) {
            Section sec=new Section();
            if (titles != null && titles.size() > 0)             sec.setTitle(titles.get(0));
 else             if (!next.getName().equals(""String_Node_Str""))             sec.setTitle(next.getName());
            sec.setUseContextNameAsTitle(useContextNameAsTitle);
            sec.setDgElement(next);
            sec.setTitlePrefix(titlePrefix);
            sec.setTitleSuffix(titleSuffix);
            parent.addElement(sec);
            con=sec;
          }
          parseResults=parseActivityOrStructuredNode(next,con);
          this.context.popTargets();
        }
      }
      next2=next;
    }
 else     if (next instanceof ForkNode && StereotypesHelper.hasStereotype(next,DocGen3Profile.parallel)) {
      CollectFilterParser.setContext(context);
      List<Element> results=CollectFilterParser.startCollectAndFilterSequence(next,null);
      parseResults=results;
      this.context.pushTargets(results);
      pushed++;
      next2=context.getCurrentNode();
    }
    if (next2 == null) {
      next2=next;
    }
    if (parseResults == null)     parseResults=this.context.peekTargets();
    if (parseResults != null)     lastResults=parseResults;
    if (!evaluatedConstraintsForNext) {
      DocumentValidator.evaluateConstraints(next,parseResults,context);
    }
    outs=next2.getOutgoing();
    Debug.outln(""String_Node_Str"" + MoreToString.Helper.toLongString(outs) + ""String_Node_Str""+ next2.getHumanName()+ ""String_Node_Str""+ next2.getID());
  }
  while (pushed > 0) {
    this.context.popTargets();
    pushed--;
  }
  return lastResults;
}",0.9886108570953528
88745,"/** 
 * Evaluates the specified query given a particular context
 * @param context		EObject of the context that the query should be run against (e.g., self)
 * @param queryString	Valid OCL string that to be evaluated in the context
 * @param verbose		Turns on OCL debugging if true, off if false 
 * @return				Object of the result whose type should be known by the caller
 */
public static Object evaluateQuery(Object context,String queryString,boolean verbose){
  setupEnvironment();
  OclEvaluator.createOclInstance(envFactory);
  boolean wasOn=Debug.isOn();
  Debug.turnOn();
  verbose=true;
  setOclTracingEnabled(verbose);
  queryStatus=QueryStatus.VALID_OCL;
  if (context instanceof EObject) {
    getHelper().setContext(context == null ? null : ((EObject)context).eClass());
  }
 else   if (context instanceof Collection) {
    getHelper().setContext(context == null ? null : OCLStandardLibraryImpl.INSTANCE.getCollection());
  }
  Object result=null;
  OCLExpression<EClassifier> query=null;
  basicDiagnostic=null;
  problemHandler=null;
  try {
    query=getHelper().createQuery(queryString);
  }
 catch (  ParserException e) {
    queryStatus=QueryStatus.PARSE_EXCEPTION;
    if (verbose) {
      e.printStackTrace();
      Debug.outln(""String_Node_Str"" + getBasicDiagnostic());
      Object analyzer=getBasicDiagnostic().getData().get(0);
      Debug.outln(""String_Node_Str"" + analyzer);
      Debug.outln(""String_Node_Str"" + getProblemHandler());
      if (getProblemHandler() != null) {
        int offset=getProblemHandler().getErrorReportLineOffset();
        Debug.outln(""String_Node_Str"" + offset);
        Debug.outln(""String_Node_Str"" + Utils2.toString(ProblemHandler.ERROR_MESSAGES));
        AbstractParser parser=getProblemHandler().getParser();
        Debug.outln(""String_Node_Str"" + parser);
        if (parser != null) {
          ParseTable pt=parser.getParseTable();
          Debug.outln(""String_Node_Str"" + pt);
          AbstractLexer lexer=parser.getLexer();
          Debug.outln(""String_Node_Str"" + lexer);
          if (lexer != null) {
            pt=lexer.getParseTable();
            Debug.outln(""String_Node_Str"" + pt);
          }
        }
      }
    }
  }
  if (query != null) {
    result=getOcl().evaluate(context,query);
    if (getOcl().isInvalid(result)) {
      queryStatus=QueryStatus.INVALID_OCL;
    }
  }
  Debug.outln(""String_Node_Str"" + DocGenUtils.fixString(context) + ""String_Node_Str""+ queryString+ ""String_Node_Str""+ verbose+ ""String_Node_Str""+ DocGenUtils.fixString(result));
  if (!wasOn)   Debug.turnOff();
  return result;
}","/** 
 * Evaluates the specified query given a particular context
 * @param context		EObject of the context that the query should be run against (e.g., self)
 * @param queryString	Valid OCL string that to be evaluated in the context
 * @param verbose		Turns on OCL debugging if true, off if false 
 * @return				Object of the result whose type should be known by the caller
 */
public static Object evaluateQuery(Object context,String queryString,boolean verbose){
  setupEnvironment();
  OclEvaluator.createOclInstance(envFactory);
  setOclTracingEnabled(verbose);
  queryStatus=QueryStatus.VALID_OCL;
  if (context instanceof EObject) {
    getHelper().setContext(context == null ? null : ((EObject)context).eClass());
  }
 else   if (context instanceof Collection) {
    getHelper().setContext(context == null ? null : OCLStandardLibraryImpl.INSTANCE.getCollection());
  }
  Object result=null;
  OCLExpression<EClassifier> query=null;
  basicDiagnostic=null;
  problemHandler=null;
  try {
    query=getHelper().createQuery(queryString);
  }
 catch (  ParserException e) {
    queryStatus=QueryStatus.PARSE_EXCEPTION;
    if (verbose) {
      e.printStackTrace();
      Debug.outln(""String_Node_Str"" + getBasicDiagnostic());
      Object analyzer=getBasicDiagnostic().getData().get(0);
      Debug.outln(""String_Node_Str"" + analyzer);
      Debug.outln(""String_Node_Str"" + getProblemHandler());
      if (getProblemHandler() != null) {
        int offset=getProblemHandler().getErrorReportLineOffset();
        Debug.outln(""String_Node_Str"" + offset);
        Debug.outln(""String_Node_Str"" + Utils2.toString(ProblemHandler.ERROR_MESSAGES));
        AbstractParser parser=getProblemHandler().getParser();
        Debug.outln(""String_Node_Str"" + parser);
        if (parser != null) {
          ParseTable pt=parser.getParseTable();
          Debug.outln(""String_Node_Str"" + pt);
          AbstractLexer lexer=parser.getLexer();
          Debug.outln(""String_Node_Str"" + lexer);
          if (lexer != null) {
            pt=lexer.getParseTable();
            Debug.outln(""String_Node_Str"" + pt);
          }
        }
      }
    }
  }
  if (query != null) {
    result=getOcl().evaluate(context,query);
    if (getOcl().isInvalid(result)) {
      queryStatus=QueryStatus.INVALID_OCL;
    }
  }
  Debug.outln(""String_Node_Str"" + DocGenUtils.fixString(context) + ""String_Node_Str""+ queryString+ ""String_Node_Str""+ verbose+ ""String_Node_Str""+ DocGenUtils.fixString(result));
  return result;
}",0.9809167814282904
88746,"private void applyInternal() throws Exception {
  for (  Node<String,MissionComponent> mc : tree.getAllNodes()) {
    NamedElement e=mc.getData().getElement();
    if (e == null) {
      e=ef.createClassInstance();
      if (IMCEPresent) {
        StereotypesHelper.addStereotypeByString(e,IMCECOMPONENT);
      }
 else {
        StereotypesHelper.addStereotypeByString(e,COMPONENT);
      }
      e.setOwner(mc.getParent().getData().getElement());
    }
    if (!e.getName().equals(mc.getData().getName()))     e.setName(mc.getData().getName());
    if (mc.getData().isPackage())     continue;
    for (    LibraryComponent lc : mc.getData().getAddedLib()) {
      addSpecialization((Classifier)e,(Classifier)lc.getElement());
    }
    for (    LibraryComponent lc : mc.getData().getRemovedLib()) {
      removeSpecialization((Classifier)e,(Classifier)lc.getElement());
    }
    for (    MissionCharacterization mmc : mc.getData().getAddedChar()) {
      Classifier c=(Classifier)mmc.getElement();
      if (existsProperty(e,c))       continue;
      if (c == null) {
        c=ef.createClassInstance();
        c.setName(mmc.getName());
        c.setOwner(e);
        if (IMCEPresent) {
          StereotypesHelper.addStereotypeByString(c,IMCECHAR);
        }
 else {
          StereotypesHelper.addStereotypeByString(c,CHAR);
        }
        Generalization g=ef.createGeneralizationInstance();
        g.setOwner(c);
        g.setSpecific(c);
        g.setGeneral((Classifier)mmc.getLibraryCharacterization());
        Utils.copyStereotypes((Classifier)mmc.getLibraryCharacterization(),c);
        bst((Class)c);
      }
      Association a=ef.createAssociationInstance();
      a.setOwner(e.getOwner());
      Property p1=a.getMemberEnd().get(0);
      Property p2=a.getMemberEnd().get(1);
      p1.setName(mmc.getName());
      p1.setType(c);
      p1.setOwner(e);
      p1.setAggregation(AggregationKindEnum.COMPOSITE);
      StereotypesHelper.addStereotypeByString(p1,""String_Node_Str"");
      p2.setType((Type)e);
    }
    for (    MissionCharacterization mmc : mc.getData().getRemovedChar()) {
      for (      Property p : new HashSet<Property>(((Classifier)e).getAttribute())) {
        if (p.getType() == mmc.getElement()) {
          ModelElementsManager.getInstance().removeElement(p.getType());
          ModelElementsManager.getInstance().removeElement(p);
        }
      }
    }
  }
}","private void applyInternal() throws Exception {
  for (  Node<String,MissionComponent> mc : tree.getAllNodes()) {
    NamedElement e=mc.getData().getElement();
    if (e == null) {
      e=ef.createClassInstance();
      if (IMCEPresent) {
        StereotypesHelper.addStereotypeByString(e,IMCECOMPONENT);
      }
 else {
        StereotypesHelper.addStereotypeByString(e,COMPONENT);
      }
      e.setOwner(mc.getParent().getData().getElement());
    }
    if (!e.getName().equals(mc.getData().getName()))     e.setName(mc.getData().getName());
    if (mc.getData().isPackage())     continue;
    for (    LibraryComponent lc : mc.getData().getAddedLib()) {
      addSpecialization((Classifier)e,(Classifier)lc.getElement());
    }
    for (    LibraryComponent lc : mc.getData().getRemovedLib()) {
      removeSpecialization((Classifier)e,(Classifier)lc.getElement());
    }
    for (    MissionCharacterization mmc : mc.getData().getAddedChar()) {
      Classifier c=(Classifier)mmc.getElement();
      if (existsProperty(e,c))       continue;
      if (c == null) {
        if (IMCEPresent) {
          c=ef.createComponentInstance();
          c.setName(mmc.getName());
          c.setOwner(e);
          StereotypesHelper.addStereotypeByString(c,IMCECHAR);
        }
 else {
          c=ef.createClassInstance();
          c.setName(mmc.getName());
          c.setOwner(e);
          StereotypesHelper.addStereotypeByString(c,CHAR);
        }
        Generalization g=ef.createGeneralizationInstance();
        g.setOwner(c);
        g.setSpecific(c);
        g.setGeneral((Classifier)mmc.getLibraryCharacterization());
        Utils.copyStereotypes((Classifier)mmc.getLibraryCharacterization(),c);
        bst((Class)c);
      }
      Association a=ef.createAssociationInstance();
      a.setOwner(e.getOwner());
      Property p1=a.getMemberEnd().get(0);
      Property p2=a.getMemberEnd().get(1);
      p1.setName(mmc.getName());
      p1.setType(c);
      p1.setOwner(e);
      p1.setAggregation(AggregationKindEnum.COMPOSITE);
      StereotypesHelper.addStereotypeByString(p1,""String_Node_Str"");
      p2.setType((Type)e);
    }
    for (    MissionCharacterization mmc : mc.getData().getRemovedChar()) {
      for (      Property p : new HashSet<Property>(((Classifier)e).getAttribute())) {
        if (p.getType() == mmc.getElement()) {
          ModelElementsManager.getInstance().removeElement(p.getType());
          ModelElementsManager.getInstance().removeElement(p);
        }
      }
    }
  }
}",0.9652650822669104
88747,"/** 
 * Executes the rule.
 * @param project    project of the constraint.
 * @param constraint constraint that defines validation rules.
 * @param elements   collection of elements to validate.
 * @return			 a set of <code>Annotation</code> objects which specify invalid objects.
 */
@Override public Set<Annotation> run(Project project,Constraint constraint,Collection<? extends Element> elements){
  Set<Annotation> result=new HashSet<Annotation>();
  Collection<DiagramPresentationElement> projectDiagrams=project.getDiagrams();
  for (  DiagramPresentationElement currDiagram : projectDiagrams) {
    PresentationElement requester=locateTarget(currDiagram,project);
    if (requester == null) {
      continue;
    }
    Collection<DiagramPresentationElement> patternDiags=PatternLoaderUtils.getPatternDiagrams(requester);
    PatternSaver ps=new PatternSaver();
    ps.savePattern(project,patternDiags.iterator().next());
    JSONObject pattern=ps.getPattern();
    Diagram requesterDiagramElem=(Diagram)project.getElementByID(requester.getElement().getID());
    DiagramPresentationElement requesterDiag=project.getDiagram(requesterDiagramElem);
    String style=ViewSaver.save(project,requesterDiag,true);
    JSONParser parser=new JSONParser();
    Object parsedStyle=null;
    try {
      parsedStyle=parser.parse(style);
    }
 catch (    ParseException e) {
      e.printStackTrace();
      return null;
    }
    JSONObject styleObj=(JSONObject)parsedStyle;
    HashSet<String> badElemTypes=new HashSet<String>();
    for (    PresentationElement elem : requesterDiag.getPresentationElements()) {
      String unparsedElemStyle=(String)styleObj.get(elem.getID());
      String elemStyle=PatternLoaderUtils.removeUnnecessaryProperties(unparsedElemStyle);
      String elemType=elem.getHumanType();
      String patternStyle=(String)pattern.get(elemType);
      boolean styleMatch=elemStyle.equals(patternStyle);
      if (!styleMatch) {
        badElemTypes.add(elemType);
      }
    }
    if (!badElemTypes.isEmpty()) {
      NMAction patternMismatchSelect=new FixPatternMismatchSelect(requesterDiag,pattern,badElemTypes);
      NMAction patternMismatchAll=new FixPatternMismatchAll(requesterDiag,pattern);
      List<NMAction> actionList=new ArrayList<NMAction>();
      actionList.add(patternMismatchAll);
      actionList.add(patternMismatchSelect);
      Annotation annotation=new Annotation(requesterDiag,constraint,actionList);
      result.add(annotation);
    }
  }
  Application.getInstance().getGUILog().log(""String_Node_Str"");
  return result;
}","/** 
 * Executes the rule.
 * @param project    project of the constraint.
 * @param constraint constraint that defines validation rules.
 * @param elements   collection of elements to validate.
 * @return			 a set of <code>Annotation</code> objects which specify invalid objects.
 */
@Override public Set<Annotation> run(Project project,Constraint constraint,Collection<? extends Element> elements){
  Set<Annotation> result=new HashSet<Annotation>();
  Collection<DiagramPresentationElement> projectDiagrams=project.getDiagrams();
  for (  DiagramPresentationElement currDiagram : projectDiagrams) {
    PresentationElement requester=locateTarget(currDiagram,project);
    if (requester == null) {
      continue;
    }
    Collection<DiagramPresentationElement> patternDiags=PatternLoaderUtils.getPatternDiagrams(requester);
    PatternSaver ps=new PatternSaver();
    ps.savePattern(project,patternDiags.iterator().next());
    JSONObject pattern=ps.getPattern();
    Diagram requesterDiagramElem=(Diagram)project.getElementByID(requester.getElement().getID());
    DiagramPresentationElement requesterDiag=project.getDiagram(requesterDiagramElem);
    String style=ViewSaver.save(project,requesterDiag,true);
    JSONParser parser=new JSONParser();
    Object parsedStyle=null;
    try {
      parsedStyle=parser.parse(style);
    }
 catch (    ParseException e) {
      e.printStackTrace();
      return null;
    }
    JSONObject styleObj=(JSONObject)parsedStyle;
    HashSet<String> badElemTypes=new HashSet<String>();
    for (    PresentationElement elem : requesterDiag.getPresentationElements()) {
      String unparsedElemStyle=(String)styleObj.get(elem.getID());
      String elemStyle=PatternLoaderUtils.removeUnnecessaryProperties(unparsedElemStyle);
      String elemType=elem.getHumanType();
      String patternStyle=(String)pattern.get(elemType);
      boolean styleMatch=elemStyle.equals(patternStyle);
      if (!styleMatch) {
        badElemTypes.add(elemType);
      }
    }
    if (!badElemTypes.isEmpty()) {
      NMAction patternMismatchSelect=new FixPatternMismatchSelect(project,requesterDiag,pattern,badElemTypes);
      NMAction patternMismatchAll=new FixPatternMismatchAll(requesterDiag,pattern);
      List<NMAction> actionList=new ArrayList<NMAction>();
      actionList.add(patternMismatchAll);
      actionList.add(patternMismatchSelect);
      Annotation annotation=new Annotation(requesterDiag,constraint,actionList);
      result.add(annotation);
    }
  }
  Application.getInstance().getGUILog().log(""String_Node_Str"");
  return result;
}",0.9984459984459984
88748,"/** 
 * Initializes this instance and adds a description to the fix.
 * @param diag		the diagram to fix.
 * @param pattern	the pattern to load.
 */
public FixPatternMismatchSelect(DiagramPresentationElement diag,JSONObject pattern,HashSet<String> typesToRepair){
  super(""String_Node_Str"",""String_Node_Str"",0);
  this.diagToFix=diag;
  this.pattern=pattern;
  this.typesToRepair=typesToRepair;
}","/** 
 * Initializes this instance and adds a description to the fix.
 * @param diag		the diagram to fix.
 * @param pattern	the pattern to load.
 */
public FixPatternMismatchSelect(Project project,DiagramPresentationElement diag,JSONObject pattern,HashSet<String> typesToRepair){
  super(""String_Node_Str"",""String_Node_Str"",0);
  this.project=project;
  this.diagToFix=diag;
  this.pattern=pattern;
  this.typesToRepair=typesToRepair;
}",0.9518072289156626
88749,"@SuppressWarnings(""String_Node_Str"") public void addSumRow(){
  List<Object> sumRow=new ArrayList<Object>();
  double f;
  boolean foundSumable=false;
  for (  List<Object> c : table) {
    f=0;
    for (    Object l : c) {
      if (l instanceof List<?>) {
        for (        Object item : (List<Object>)l) {
          if (item instanceof Float || item instanceof Double || item instanceof Integer) {
            foundSumable=true;
            f+=(Double)item;
          }
 else           if (item instanceof LiteralInteger) {
            foundSumable=true;
            f+=new Double(ModelHelper.getValueString((ValueSpecification)item));
          }
        }
      }
    }
    List<Object> bucket=new ArrayList<Object>();
    if (foundSumable) {
      bucket.add(f);
    }
 else {
      bucket.add(irrelevantEntry);
    }
    sumRow.add(bucket);
    foundSumable=false;
  }
  addRow(sumRow);
}","@SuppressWarnings(""String_Node_Str"") public void addSumRow(){
  List<Object> sumRow=new ArrayList<Object>();
  double f;
  boolean foundSumable=false;
  for (  List<Object> c : table) {
    f=0;
    for (    Object l : c) {
      if (l instanceof List<?>) {
        for (        Object item : (List<Object>)l) {
          if (item instanceof Float || item instanceof Double || item instanceof Integer) {
            foundSumable=true;
            f+=(Double)item;
          }
 else           if (item instanceof LiteralInteger || item instanceof LiteralReal) {
            foundSumable=true;
            f+=new Double(ModelHelper.getValueString((ValueSpecification)item));
          }
        }
      }
    }
    List<Object> bucket=new ArrayList<Object>();
    if (foundSumable) {
      bucket.add(f);
    }
 else {
      bucket.add(irrelevantEntry);
    }
    sumRow.add(bucket);
    foundSumable=false;
  }
  addRow(sumRow);
}",0.983032293377121
88750,"private List<Object> handlePropertyCell(Property dProp,Element cell){
  Element myOwner=dProp.getOwner();
  List<Object> rSlots=new ArrayList<Object>();
  if (myOwner instanceof Stereotype) {
    ValueSpecification pDefault=null;
    if (dProp != null) {
      rSlots.addAll(StereotypesHelper.getStereotypePropertyValue(cell,(Stereotype)myOwner,(Property)dProp));
      pDefault=dProp.getDefaultValue();
    }
    if (rSlots.size() < 1 && pDefault != null) {
      rSlots.add(pDefault);
    }
    return rSlots;
  }
  Collection<Element> rOwned=cell.getOwnedElement();
  for (  Object o : rOwned) {
    if (((Element)o) instanceof Property && ((Property)o).getName().equals(dProp.getName())) {
      rSlots.add((Object)((Property)o).getDefaultValue());
    }
  }
  return rSlots;
}","private List<Object> handlePropertyCell(Property dProp,Element cell){
  Element myOwner=dProp.getOwner();
  List<Object> rSlots=new ArrayList<Object>();
  if (myOwner instanceof Stereotype && StereotypesHelper.hasStereotype(cell,(Stereotype)myOwner)) {
    ValueSpecification pDefault=null;
    if (dProp != null) {
      rSlots.addAll(StereotypesHelper.getStereotypePropertyValue(cell,(Stereotype)myOwner,(Property)dProp));
      pDefault=dProp.getDefaultValue();
    }
    if (rSlots.size() < 1 && pDefault != null) {
      rSlots.add(pDefault);
    }
    return rSlots;
  }
  Collection<Element> rOwned=cell.getOwnedElement();
  for (  Object o : rOwned) {
    if (((Element)o) instanceof Property && ((Property)o).getName().equals(dProp.getName())) {
      rSlots.add((Object)((Property)o).getDefaultValue());
    }
  }
  return rSlots;
}",0.96241528034504
88751,"public List<Object> handleAttributeCell(Object dAttr,Element cell){
  List<Object> rSlots=new ArrayList<Object>();
  if (dAttr != null && ((EnumerationLiteral)dAttr).getName().equals(""String_Node_Str"")) {
    if (cell instanceof NamedElement) {
      rSlots.add(((NamedElement)cell).getName());
    }
 else {
      rSlots.add(cell.getHumanName());
    }
  }
  if (dAttr != null && ((EnumerationLiteral)dAttr).getName().equals(""String_Node_Str"")) {
    rSlots.add(ModelHelper.getComment(cell));
  }
  if (dAttr != null && ((EnumerationLiteral)dAttr).getName().equals(""String_Node_Str"")) {
    if (cell instanceof Property) {
      rSlots.add(((Property)cell).getDefaultValue());
    }
 else     if (cell instanceof Slot) {
      rSlots.add(((Slot)cell).getValue());
    }
  }
  return rSlots;
}","public List<Object> handleAttributeCell(Object dAttr,Element cell){
  List<Object> rSlots=new ArrayList<Object>();
  if (dAttr != null && ((EnumerationLiteral)dAttr).getName().equals(""String_Node_Str"")) {
    if (cell instanceof NamedElement) {
      rSlots.add(((NamedElement)cell).getName());
    }
 else {
      rSlots.add(cell.getHumanName());
    }
  }
  if (dAttr != null && ((EnumerationLiteral)dAttr).getName().equals(""String_Node_Str"")) {
    rSlots.add(ModelHelper.getComment(cell));
  }
  if (dAttr != null && ((EnumerationLiteral)dAttr).getName().equals(""String_Node_Str"")) {
    if (cell instanceof Property) {
      rSlots.add(((Property)cell).getDefaultValue());
    }
 else     if (cell instanceof Slot) {
      rSlots.addAll(((Slot)cell).getValue());
    }
  }
  return rSlots;
}",0.998112020138452
88752,"public static DBTableEntry getStereotypePropertyEntry(Element e,Property p,boolean forViewEditor){
  List<Object> results=Utils.getStereotypePropertyValues(e,p);
  return getEntryFromList(results,false,forViewEditor);
}","public static DBTableEntry getStereotypePropertyEntry(Element e,Property p,boolean forViewEditor){
  List<Object> results=Utils.getStereotypePropertyValues(e,p);
  return getTableEntryFromList(results,false,forViewEditor);
}",0.9887133182844244
88753,"public List<List<DocumentElement>> getBody(Diagram d,List<Element> rowElements,List<String> columnIds,DiagramTableTool dtt,boolean forViewEditor){
  List<List<DocumentElement>> res=new ArrayList<List<DocumentElement>>();
  for (  Element e : rowElements) {
    if (skipIfNoDoc && ModelHelper.getComment(e).trim().equals(""String_Node_Str""))     continue;
    List<DocumentElement> row=new ArrayList<DocumentElement>();
    int count=0;
    for (    String cid : columnIds) {
      if (count == 0) {
        count++;
        continue;
      }
      row.add(Common.getEntryFromList(getTableValues(dtt.getCellValue(d,e,cid)),false,forViewEditor));
    }
    res.add(row);
  }
  return res;
}","public List<List<DocumentElement>> getBody(Diagram d,List<Element> rowElements,List<String> columnIds,DiagramTableTool dtt,boolean forViewEditor){
  List<List<DocumentElement>> res=new ArrayList<List<DocumentElement>>();
  for (  Element e : rowElements) {
    if (skipIfNoDoc && ModelHelper.getComment(e).trim().equals(""String_Node_Str""))     continue;
    List<DocumentElement> row=new ArrayList<DocumentElement>();
    int count=0;
    for (    String cid : columnIds) {
      if (count == 0) {
        count++;
        continue;
      }
      row.add(Common.getTableEntryFromList(getTableValues(dtt.getCellValue(d,e,cid)),false,forViewEditor));
    }
    res.add(row);
  }
  return res;
}",0.9963741841914432
88754,"/** 
 * Import database
 */
public void importDatabase(String filename) throws IOException {
  String internalDbPath=getDatabasePath(this.context);
  String internalSpPath=""String_Node_Str"";
  close();
  Log.w(""String_Node_Str"",Constants.BACKUPPATH + ""String_Node_Str"" + filename);
  try {
    File newDb=new File(Constants.BACKUPPATH + ""String_Node_Str"" + filename);
    File oldDb=new File(internalDbPath);
    File newSp=new File(Constants.BACKUPPATH + ""String_Node_Str"" + filename+ ""String_Node_Str"");
    File oldSp=new File(internalSpPath);
    copyFile(newDb,oldDb);
    copyFile(newSp,oldSp);
  }
 catch (  IOException e) {
    Log.e(TAG,e.getMessage());
  }
}","/** 
 * Import database
 */
public void importDatabase(String filename) throws IOException {
  String internalDbPath=getDatabasePath(this.context);
  String internalSpPath=""String_Node_Str"";
  close();
  Log.w(""String_Node_Str"",Constants.BACKUPPATH + ""String_Node_Str"" + filename);
  File newDb=new File(Constants.BACKUPPATH + ""String_Node_Str"" + filename);
  File oldDb=new File(internalDbPath);
  File newSp=new File(Constants.BACKUPPATH + ""String_Node_Str"" + filename+ ""String_Node_Str"");
  File oldSp=new File(internalSpPath);
  try {
    copyFile(newDb,oldDb);
    copyFile(newSp,oldSp);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9531013615733736
88755,"/** 
 * Export database
 */
public void exportDatabase(String filename) throws IOException {
  String internalDbPath=getDatabasePath(this.context);
  String internalSpPath=""String_Node_Str"";
  close();
  try {
    File newDb=new File(Constants.BACKUPPATH + ""String_Node_Str"" + filename+ ""String_Node_Str"");
    File oldDb=new File(internalDbPath);
    File newSp=new File(Constants.BACKUPPATH + ""String_Node_Str"" + filename+ ""String_Node_Str"");
    File oldSp=new File(internalSpPath);
    copyFile(oldDb,newDb);
    copyFile(oldSp,newSp);
  }
 catch (  IOException e) {
    Log.e(TAG,e.getMessage());
  }
}","/** 
 * Export database
 */
public void exportDatabase(String filename) throws IOException {
  String internalDbPath=getDatabasePath(this.context);
  String internalSpPath=""String_Node_Str"";
  close();
  try {
    File newDb=new File(Constants.BACKUPPATH + ""String_Node_Str"" + filename);
    File oldDb=new File(internalDbPath);
    File newSp=new File(Constants.BACKUPPATH + ""String_Node_Str"" + filename+ ""String_Node_Str"");
    File oldSp=new File(internalSpPath);
    copyFile(oldDb,newDb);
    copyFile(oldSp,newSp);
  }
 catch (  IOException e) {
    Log.e(TAG,e.getMessage());
  }
}",0.9841004184100418
88756,"private void loadScreen(){
  if (getActionBar() != null) {
    getActionBar().setHomeButtonEnabled(true);
    getActionBar().setDisplayHomeAsUpEnabled(true);
  }
  FrameLayout mFrame=new FrameLayout(this);
  mFrame.addView(LayoutInflater.from(getBaseContext()).inflate(R.layout.config,null));
  setContentView(mFrame);
  advancedDialog=new Dialog(this,android.R.style.Theme_Holo_Light_Dialog);
  advancedDialog.setTitle(getString(R.string.advanced));
  advancedDialog.setContentView(R.layout.advanced);
  android.view.WindowManager.LayoutParams params=advancedDialog.getWindow().getAttributes();
  params.width=LayoutParams.MATCH_PARENT;
  advancedDialog.getWindow().setAttributes(params);
  advancedDialog.setCancelable(true);
  advancedDialog.setCanceledOnTouchOutside(true);
  CheckBox tips=(CheckBox)advancedDialog.findViewById(R.id.tips);
  CheckBox cycle=(CheckBox)advancedDialog.findViewById(R.id.cycle);
  CheckBox ignoreEntries=(CheckBox)advancedDialog.findViewById(R.id.ignoreExisting);
  CheckBox useDay=(CheckBox)advancedDialog.findViewById(R.id.useDay);
  CheckBox rangeSound=(CheckBox)advancedDialog.findViewById(R.id.rangeSound);
  CheckBox jumpToPlot=(CheckBox)advancedDialog.findViewById(R.id.jumpToPlot);
  CheckBox barcodeScan=(CheckBox)advancedDialog.findViewById(R.id.barcodeScan);
  CheckBox nextEmptyPlot=(CheckBox)advancedDialog.findViewById(R.id.nextEmptyPlot);
  CheckBox quickGoTo=(CheckBox)advancedDialog.findViewById(R.id.quickGoTo);
  CheckBox disableShare=(CheckBox)advancedDialog.findViewById(R.id.disableShare);
  CheckBox disableEntryNavLeft=(CheckBox)advancedDialog.findViewById(R.id.disableEntryNavLeft);
  CheckBox disableEntryNavRight=(CheckBox)advancedDialog.findViewById(R.id.disableEntryNavRight);
  CheckBox dataGrid=(CheckBox)advancedDialog.findViewById(R.id.dataGrid);
  Button advCloseBtn=(Button)advancedDialog.findViewById(R.id.closeBtn);
  advCloseBtn.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      advancedDialog.dismiss();
    }
  }
);
  tips.setChecked(ep.getBoolean(""String_Node_Str"",false));
  cycle.setChecked(ep.getBoolean(""String_Node_Str"",false));
  ignoreEntries.setChecked(ep.getBoolean(""String_Node_Str"",false));
  useDay.setChecked(ep.getBoolean(""String_Node_Str"",false));
  rangeSound.setChecked(ep.getBoolean(""String_Node_Str"",false));
  jumpToPlot.setChecked(ep.getBoolean(""String_Node_Str"",false));
  barcodeScan.setChecked(ep.getBoolean(""String_Node_Str"",false));
  nextEmptyPlot.setChecked(ep.getBoolean(""String_Node_Str"",false));
  quickGoTo.setChecked(ep.getBoolean(""String_Node_Str"",false));
  disableShare.setChecked(ep.getBoolean(""String_Node_Str"",false));
  disableEntryNavLeft.setChecked(ep.getBoolean(""String_Node_Str"",false));
  disableEntryNavRight.setChecked(ep.getBoolean(""String_Node_Str"",false));
  dataGrid.setChecked(ep.getBoolean(""String_Node_Str"",false));
  tips.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      invalidateOptionsMenu();
      MainActivity.reloadData=true;
    }
  }
);
  cycle.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  ignoreEntries.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  useDay.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  rangeSound.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  jumpToPlot.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  nextEmptyPlot.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  quickGoTo.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  disableShare.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  disableEntryNavLeft.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  disableEntryNavRight.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  barcodeScan.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  dataGrid.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  saveDialog=new Dialog(this,android.R.style.Theme_Holo_Light_Dialog);
  saveDialog.setTitle(getString(R.string.export));
  saveDialog.setContentView(R.layout.savefile);
  android.view.WindowManager.LayoutParams params2=saveDialog.getWindow().getAttributes();
  params2.width=LayoutParams.MATCH_PARENT;
  saveDialog.getWindow().setAttributes(params2);
  saveDialog.setCancelable(true);
  saveDialog.setCanceledOnTouchOutside(true);
  Button closeBtn=(Button)saveDialog.findViewById(R.id.closeBtn);
  closeBtn.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      saveDialog.dismiss();
    }
  }
);
  exportFile=(EditText)saveDialog.findViewById(R.id.fileName);
  checkDB=(CheckBox)saveDialog.findViewById(R.id.formatDB);
  checkExcel=(CheckBox)saveDialog.findViewById(R.id.formatExcel);
  allColumns=(RadioButton)saveDialog.findViewById(R.id.allColumns);
  onlyUnique=(RadioButton)saveDialog.findViewById(R.id.onlyUnique);
  allTraits=(RadioButton)saveDialog.findViewById(R.id.allTraits);
  activeTraits=(RadioButton)saveDialog.findViewById(R.id.activeTraits);
  Button exportButton=(Button)saveDialog.findViewById(R.id.saveBtn);
  exportButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View arg0){
      if (!checkDB.isChecked() & !checkExcel.isChecked()) {
        Toast.makeText(ConfigActivity.this,getString(R.string.noexportcheck),Toast.LENGTH_LONG).show();
        return;
      }
      if (!onlyUnique.isChecked() & !allColumns.isChecked()) {
        Toast.makeText(ConfigActivity.this,getString(R.string.nofieldcheck),Toast.LENGTH_LONG).show();
        return;
      }
      if (!activeTraits.isChecked() & !allTraits.isChecked()) {
        Toast.makeText(ConfigActivity.this,getString(R.string.notraitcheck),Toast.LENGTH_LONG).show();
        return;
      }
      newRange=new ArrayList<String>();
      if (onlyUnique.isChecked()) {
        newRange.add(ep.getString(""String_Node_Str"",""String_Node_Str""));
      }
      if (allColumns.isChecked()) {
        String[] columns=MainActivity.dt.getRangeColumns();
        Collections.addAll(newRange,columns);
      }
      exportTrait=new ArrayList<String>();
      if (activeTraits.isChecked()) {
        String[] traits=MainActivity.dt.getVisibleTrait();
        Collections.addAll(exportTrait,traits);
      }
      if (allTraits.isChecked()) {
        String[] traits=MainActivity.dt.getAllTraits();
        Collections.addAll(exportTrait,traits);
      }
      saveDialog.dismiss();
      mHandler.post(exportData);
    }
  }
);
  setupDialog=new Dialog(this,android.R.style.Theme_Holo_Light_Dialog);
  setupDialog.setTitle(getString(R.string.setup));
  setupDialog.setContentView(R.layout.config);
  params=setupDialog.getWindow().getAttributes();
  params.width=LayoutParams.MATCH_PARENT;
  params.height=LayoutParams.WRAP_CONTENT;
  setupDialog.getWindow().setAttributes(params);
  setupDialog.setCancelable(true);
  setupDialog.setCanceledOnTouchOutside(true);
  setupList=(ListView)setupDialog.findViewById(R.id.myList);
  Button setupCloseBtn=(Button)setupDialog.findViewById(R.id.closeBtn);
  setupCloseBtn.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      setupDialog.dismiss();
    }
  }
);
  personDialog=new Dialog(this,android.R.style.Theme_Holo_Light_Dialog);
  personDialog.setTitle(getString(R.string.personsetup));
  personDialog.setContentView(R.layout.person);
  personDialog.setCancelable(true);
  personDialog.setCanceledOnTouchOutside(true);
  final EditText firstName=(EditText)personDialog.findViewById(R.id.firstName);
  final EditText lastName=(EditText)personDialog.findViewById(R.id.lastName);
  Button yesButton=(Button)personDialog.findViewById(R.id.saveBtn);
  yesButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View arg0){
      Editor e=ep.edit();
      e.putString(""String_Node_Str"",firstName.getText().toString());
      e.putString(""String_Node_Str"",lastName.getText().toString());
      e.apply();
      updateSetupList();
      personDialog.dismiss();
    }
  }
);
  fieldDialog2=new Dialog(this,android.R.style.Theme_Holo_Light_Dialog);
  fieldDialog2.setTitle(getString(R.string.fields));
  fieldDialog2.setContentView(R.layout.config);
  fieldDialog2.setCancelable(true);
  fieldDialog2.setCanceledOnTouchOutside(true);
  Button fdCloseBtn2=(Button)fieldDialog2.findViewById(R.id.closeBtn);
  fdCloseBtn2.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      fieldDialog2.dismiss();
    }
  }
);
  ListView settingsList=(ListView)findViewById(R.id.myList);
  Button mainCloseBtn=(Button)findViewById(R.id.closeBtn);
  mainCloseBtn.setVisibility(View.GONE);
  String[] items2=new String[]{getString(R.string.fields),getString(R.string.traits),getString(R.string.setup),getString(R.string.export),getString(R.string.advanced),getString(R.string.language)};
  settingsList.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> av,    View arg1,    int position,    long arg3){
      Intent intent=new Intent();
switch (position) {
case 0:
        intent.setClassName(ConfigActivity.this,FileExploreActivity.class.getName());
      intent.putExtra(""String_Node_Str"",Constants.FIELDIMPORTPATH);
    startActivityForResult(intent,1);
  break;
case 1:
if (!ep.getBoolean(""String_Node_Str"",false)) {
  makeToast(getString(R.string.importtraitwarning));
  return;
}
intent.setClassName(ConfigActivity.this,TraitEditorActivity.class.getName());
startActivity(intent);
break;
case 2:
if (!ep.getBoolean(""String_Node_Str"",false)) {
makeToast(getString(R.string.nofieldloaded));
return;
}
showSetupDialog();
break;
case 3:
if (!ep.getBoolean(""String_Node_Str"",false)) {
makeToast(getString(R.string.nofieldloaded));
return;
}
 else if (MainActivity.dt.getTraitColumnsAsString() == null) {
makeToast(getString(R.string.notraitloaded));
return;
}
showSaveDialog();
break;
case 4:
advancedDialog.show();
break;
case 5:
showLanguageDialog();
break;
}
}
}
);
ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,R.layout.listitem,items2);
settingsList.setAdapter(adapter);
SharedPreferences.Editor ed=ep.edit();
if (ep.getInt(""String_Node_Str"",-1) < getVersion()) {
ed.putInt(""String_Node_Str"",getVersion());
ed.apply();
Intent intent=new Intent();
intent.setClass(ConfigActivity.this,ChangelogActivity.class);
startActivity(intent);
}
if (!ep.getBoolean(""String_Node_Str"",false)) {
ed.putBoolean(""String_Node_Str"",true);
ed.apply();
showTipsDialog();
}
}","private void loadScreen(){
  if (getActionBar() != null) {
    getActionBar().setHomeButtonEnabled(true);
    getActionBar().setDisplayHomeAsUpEnabled(true);
  }
  FrameLayout mFrame=new FrameLayout(this);
  mFrame.addView(LayoutInflater.from(getBaseContext()).inflate(R.layout.config,null));
  setContentView(mFrame);
  advancedDialog=new Dialog(this,android.R.style.Theme_Holo_Light_Dialog);
  advancedDialog.setTitle(getString(R.string.advanced));
  advancedDialog.setContentView(R.layout.advanced);
  android.view.WindowManager.LayoutParams params=advancedDialog.getWindow().getAttributes();
  params.width=LayoutParams.MATCH_PARENT;
  advancedDialog.getWindow().setAttributes(params);
  advancedDialog.setCancelable(true);
  advancedDialog.setCanceledOnTouchOutside(true);
  CheckBox tips=(CheckBox)advancedDialog.findViewById(R.id.tips);
  CheckBox cycle=(CheckBox)advancedDialog.findViewById(R.id.cycle);
  CheckBox ignoreEntries=(CheckBox)advancedDialog.findViewById(R.id.ignoreExisting);
  CheckBox useDay=(CheckBox)advancedDialog.findViewById(R.id.useDay);
  CheckBox rangeSound=(CheckBox)advancedDialog.findViewById(R.id.rangeSound);
  CheckBox jumpToPlot=(CheckBox)advancedDialog.findViewById(R.id.jumpToPlot);
  CheckBox barcodeScan=(CheckBox)advancedDialog.findViewById(R.id.barcodeScan);
  CheckBox nextEmptyPlot=(CheckBox)advancedDialog.findViewById(R.id.nextEmptyPlot);
  CheckBox quickGoTo=(CheckBox)advancedDialog.findViewById(R.id.quickGoTo);
  CheckBox disableShare=(CheckBox)advancedDialog.findViewById(R.id.disableShare);
  CheckBox disableEntryNavLeft=(CheckBox)advancedDialog.findViewById(R.id.disableEntryNavLeft);
  CheckBox disableEntryNavRight=(CheckBox)advancedDialog.findViewById(R.id.disableEntryNavRight);
  CheckBox dataGrid=(CheckBox)advancedDialog.findViewById(R.id.dataGrid);
  Button advCloseBtn=(Button)advancedDialog.findViewById(R.id.closeBtn);
  advCloseBtn.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      advancedDialog.dismiss();
    }
  }
);
  tips.setChecked(ep.getBoolean(""String_Node_Str"",false));
  cycle.setChecked(ep.getBoolean(""String_Node_Str"",false));
  ignoreEntries.setChecked(ep.getBoolean(""String_Node_Str"",false));
  useDay.setChecked(ep.getBoolean(""String_Node_Str"",false));
  rangeSound.setChecked(ep.getBoolean(""String_Node_Str"",false));
  jumpToPlot.setChecked(ep.getBoolean(""String_Node_Str"",false));
  barcodeScan.setChecked(ep.getBoolean(""String_Node_Str"",false));
  nextEmptyPlot.setChecked(ep.getBoolean(""String_Node_Str"",false));
  quickGoTo.setChecked(ep.getBoolean(""String_Node_Str"",false));
  disableShare.setChecked(ep.getBoolean(""String_Node_Str"",false));
  disableEntryNavLeft.setChecked(ep.getBoolean(""String_Node_Str"",false));
  disableEntryNavRight.setChecked(ep.getBoolean(""String_Node_Str"",false));
  dataGrid.setChecked(ep.getBoolean(""String_Node_Str"",false));
  tips.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      invalidateOptionsMenu();
      MainActivity.reloadData=true;
    }
  }
);
  cycle.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  ignoreEntries.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  useDay.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  rangeSound.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  jumpToPlot.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  nextEmptyPlot.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  quickGoTo.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  disableShare.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  disableEntryNavLeft.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  disableEntryNavRight.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  barcodeScan.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  dataGrid.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    public void onCheckedChanged(    CompoundButton arg0,    boolean checked){
      Editor e=ep.edit();
      e.putBoolean(""String_Node_Str"",checked);
      e.apply();
      MainActivity.reloadData=true;
    }
  }
);
  saveDialog=new Dialog(this,android.R.style.Theme_Holo_Light_Dialog);
  saveDialog.setTitle(getString(R.string.export));
  saveDialog.setContentView(R.layout.savefile);
  android.view.WindowManager.LayoutParams params2=saveDialog.getWindow().getAttributes();
  params2.width=LayoutParams.MATCH_PARENT;
  saveDialog.getWindow().setAttributes(params2);
  saveDialog.setCancelable(true);
  saveDialog.setCanceledOnTouchOutside(true);
  Button closeBtn=(Button)saveDialog.findViewById(R.id.closeBtn);
  closeBtn.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      saveDialog.dismiss();
    }
  }
);
  exportFile=(EditText)saveDialog.findViewById(R.id.fileName);
  checkDB=(CheckBox)saveDialog.findViewById(R.id.formatDB);
  checkExcel=(CheckBox)saveDialog.findViewById(R.id.formatExcel);
  allColumns=(RadioButton)saveDialog.findViewById(R.id.allColumns);
  onlyUnique=(RadioButton)saveDialog.findViewById(R.id.onlyUnique);
  allTraits=(RadioButton)saveDialog.findViewById(R.id.allTraits);
  activeTraits=(RadioButton)saveDialog.findViewById(R.id.activeTraits);
  Button exportButton=(Button)saveDialog.findViewById(R.id.saveBtn);
  exportButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View arg0){
      if (!checkDB.isChecked() & !checkExcel.isChecked()) {
        Toast.makeText(ConfigActivity.this,getString(R.string.noexportcheck),Toast.LENGTH_LONG).show();
        return;
      }
      if (!onlyUnique.isChecked() & !allColumns.isChecked()) {
        Toast.makeText(ConfigActivity.this,getString(R.string.nofieldcheck),Toast.LENGTH_LONG).show();
        return;
      }
      if (!activeTraits.isChecked() & !allTraits.isChecked()) {
        Toast.makeText(ConfigActivity.this,getString(R.string.notraitcheck),Toast.LENGTH_LONG).show();
        return;
      }
      newRange=new ArrayList<>();
      if (onlyUnique.isChecked()) {
        newRange.add(ep.getString(""String_Node_Str"",""String_Node_Str""));
      }
      if (allColumns.isChecked()) {
        String[] columns=MainActivity.dt.getRangeColumns();
        Collections.addAll(newRange,columns);
      }
      exportTrait=new ArrayList<>();
      if (activeTraits.isChecked()) {
        String[] traits=MainActivity.dt.getVisibleTrait();
        Collections.addAll(exportTrait,traits);
      }
      if (allTraits.isChecked()) {
        String[] traits=MainActivity.dt.getAllTraits();
        Collections.addAll(exportTrait,traits);
      }
      checkDbBool=checkDB.isChecked();
      checkExcelBool=checkExcel.isChecked();
      exportFileString=exportFile.getText().toString();
      saveDialog.dismiss();
      mHandler.post(exportData);
    }
  }
);
  setupDialog=new Dialog(this,android.R.style.Theme_Holo_Light_Dialog);
  setupDialog.setTitle(getString(R.string.setup));
  setupDialog.setContentView(R.layout.config);
  params=setupDialog.getWindow().getAttributes();
  params.width=LayoutParams.MATCH_PARENT;
  params.height=LayoutParams.WRAP_CONTENT;
  setupDialog.getWindow().setAttributes(params);
  setupDialog.setCancelable(true);
  setupDialog.setCanceledOnTouchOutside(true);
  setupList=(ListView)setupDialog.findViewById(R.id.myList);
  Button setupCloseBtn=(Button)setupDialog.findViewById(R.id.closeBtn);
  setupCloseBtn.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      setupDialog.dismiss();
    }
  }
);
  personDialog=new Dialog(this,android.R.style.Theme_Holo_Light_Dialog);
  personDialog.setTitle(getString(R.string.personsetup));
  personDialog.setContentView(R.layout.person);
  personDialog.setCancelable(true);
  personDialog.setCanceledOnTouchOutside(true);
  final EditText firstName=(EditText)personDialog.findViewById(R.id.firstName);
  final EditText lastName=(EditText)personDialog.findViewById(R.id.lastName);
  Button yesButton=(Button)personDialog.findViewById(R.id.saveBtn);
  yesButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View arg0){
      Editor e=ep.edit();
      e.putString(""String_Node_Str"",firstName.getText().toString());
      e.putString(""String_Node_Str"",lastName.getText().toString());
      e.apply();
      updateSetupList();
      personDialog.dismiss();
    }
  }
);
  fieldDialog2=new Dialog(this,android.R.style.Theme_Holo_Light_Dialog);
  fieldDialog2.setTitle(getString(R.string.fields));
  fieldDialog2.setContentView(R.layout.config);
  fieldDialog2.setCancelable(true);
  fieldDialog2.setCanceledOnTouchOutside(true);
  Button fdCloseBtn2=(Button)fieldDialog2.findViewById(R.id.closeBtn);
  fdCloseBtn2.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      fieldDialog2.dismiss();
    }
  }
);
  ListView settingsList=(ListView)findViewById(R.id.myList);
  Button mainCloseBtn=(Button)findViewById(R.id.closeBtn);
  mainCloseBtn.setVisibility(View.GONE);
  String[] items2=new String[]{getString(R.string.fields),getString(R.string.traits),getString(R.string.setup),getString(R.string.export),getString(R.string.advanced),getString(R.string.language)};
  settingsList.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> av,    View arg1,    int position,    long arg3){
      Intent intent=new Intent();
switch (position) {
case 0:
        intent.setClassName(ConfigActivity.this,FileExploreActivity.class.getName());
      intent.putExtra(""String_Node_Str"",Constants.FIELDIMPORTPATH);
    startActivityForResult(intent,1);
  break;
case 1:
if (!ep.getBoolean(""String_Node_Str"",false)) {
  makeToast(getString(R.string.importtraitwarning));
  return;
}
intent.setClassName(ConfigActivity.this,TraitEditorActivity.class.getName());
startActivity(intent);
break;
case 2:
if (!ep.getBoolean(""String_Node_Str"",false)) {
makeToast(getString(R.string.nofieldloaded));
return;
}
showSetupDialog();
break;
case 3:
if (!ep.getBoolean(""String_Node_Str"",false)) {
makeToast(getString(R.string.nofieldloaded));
return;
}
 else if (MainActivity.dt.getTraitColumnsAsString() == null) {
makeToast(getString(R.string.notraitloaded));
return;
}
showSaveDialog();
break;
case 4:
advancedDialog.show();
break;
case 5:
showLanguageDialog();
break;
}
}
}
);
ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,R.layout.listitem,items2);
settingsList.setAdapter(adapter);
SharedPreferences.Editor ed=ep.edit();
if (ep.getInt(""String_Node_Str"",-1) < getVersion()) {
ed.putInt(""String_Node_Str"",getVersion());
ed.apply();
Intent intent=new Intent();
intent.setClass(ConfigActivity.this,ChangelogActivity.class);
startActivity(intent);
}
if (!ep.getBoolean(""String_Node_Str"",false)) {
ed.putBoolean(""String_Node_Str"",true);
ed.apply();
showTipsDialog();
}
}",0.9942788316772057
88757,"private void showDatabaseExportDialog(){
  dbSaveDialog=new Dialog(ConfigActivity.this,android.R.style.Theme_Holo_Light_Dialog);
  dbSaveDialog.setTitle(getString(R.string.dbbackup));
  dbSaveDialog.setContentView(R.layout.savedb);
  android.view.WindowManager.LayoutParams params2=dbSaveDialog.getWindow().getAttributes();
  params2.width=LayoutParams.MATCH_PARENT;
  dbSaveDialog.getWindow().setAttributes(params2);
  dbSaveDialog.setCancelable(true);
  dbSaveDialog.setCanceledOnTouchOutside(true);
  exportFile=(EditText)dbSaveDialog.findViewById(R.id.fileName);
  Button closeBtn=(Button)dbSaveDialog.findViewById(R.id.closeBtn);
  closeBtn.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      dbSaveDialog.dismiss();
    }
  }
);
  Button exportButton=(Button)dbSaveDialog.findViewById(R.id.saveBtn);
  exportButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View arg0){
      dbSaveDialog.dismiss();
      mHandler.post(exportDB);
    }
  }
);
  SimpleDateFormat timeStamp=new SimpleDateFormat(""String_Node_Str"",Locale.getDefault());
  exportFile.setText(timeStamp.format(Calendar.getInstance().getTime()) + ""String_Node_Str"" + ""String_Node_Str""+ DataHelper.DATABASE_VERSION+ ""String_Node_Str"");
  dbSaveDialog.show();
}","private void showDatabaseExportDialog(){
  dbSaveDialog=new Dialog(ConfigActivity.this,android.R.style.Theme_Holo_Light_Dialog);
  dbSaveDialog.setTitle(getString(R.string.dbbackup));
  dbSaveDialog.setContentView(R.layout.savedb);
  android.view.WindowManager.LayoutParams params2=dbSaveDialog.getWindow().getAttributes();
  params2.width=LayoutParams.MATCH_PARENT;
  dbSaveDialog.getWindow().setAttributes(params2);
  dbSaveDialog.setCancelable(true);
  dbSaveDialog.setCanceledOnTouchOutside(true);
  exportFile=(EditText)dbSaveDialog.findViewById(R.id.fileName);
  Button closeBtn=(Button)dbSaveDialog.findViewById(R.id.closeBtn);
  closeBtn.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      dbSaveDialog.dismiss();
    }
  }
);
  Button exportButton=(Button)dbSaveDialog.findViewById(R.id.saveBtn);
  exportButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View arg0){
      dbSaveDialog.dismiss();
      exportFileString=exportFile.getText().toString();
      mHandler.post(exportDB);
    }
  }
);
  SimpleDateFormat timeStamp=new SimpleDateFormat(""String_Node_Str"",Locale.getDefault());
  exportFile.setText(timeStamp.format(Calendar.getInstance().getTime()) + ""String_Node_Str"" + ""String_Node_Str""+ DataHelper.DATABASE_VERSION+ ""String_Node_Str"");
  dbSaveDialog.show();
}",0.9786910197869102
88758,"@Override public void onCheckedChanged(CompoundButton arg0,boolean position){
  if (holder.visible.isChecked()) {
    MainActivity.dt.updateTraitVisibility(holder.name.getText().toString(),true);
  }
 else {
    MainActivity.dt.updateTraitVisibility(holder.name.getText().toString(),false);
  }
  TraitEditorActivity.loadData();
  MainActivity.reloadData=true;
}","@Override public void onCheckedChanged(CompoundButton arg0,boolean position){
  if (holder.visible.isChecked()) {
    MainActivity.dt.updateTraitVisibility(holder.name.getText().toString(),true);
  }
 else {
    MainActivity.dt.updateTraitVisibility(holder.name.getText().toString(),false);
  }
}",0.8996960486322189
88759,"@Override public boolean onTouch(View v,MotionEvent event){
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    DragSortListView drag=(DragSortListView)parent;
    drag.startDrag(position,DragSortListView.DRAG_POS_Y | DragSortListView.DRAG_NEG_Y,0,0);
    Log.w(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
 else   if (event.getAction() == MotionEvent.ACTION_UP) {
    DragSortListView drag=(DragSortListView)parent;
    drag.stopDrag(false);
    Log.w(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
 else   return false;
}","@Override public boolean onTouch(View v,MotionEvent event){
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    DragSortListView drag=(DragSortListView)parent;
    drag.startDrag(position,DragSortListView.DRAG_POS_Y | DragSortListView.DRAG_NEG_Y,0,0);
    Log.w(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
 else   if (event.getAction() == MotionEvent.ACTION_UP) {
    DragSortListView drag=(DragSortListView)parent;
    drag.stopDrag(false);
    TraitEditorActivity.loadData();
    MainActivity.reloadData=true;
    Log.w(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
 else   return false;
}",0.940677966101695
88760,"public View getView(final int position,View convertView,final ViewGroup parent){
  final ViewHolder holder;
  if (convertView == null) {
    holder=new ViewHolder();
    convertView=mLayoutInflater.inflate(R.layout.traitline,null);
    holder.name=(TextView)convertView.findViewById(R.id.text1);
    holder.format=(TextView)convertView.findViewById(R.id.text2);
    holder.visible=(CheckBox)convertView.findViewById(R.id.visible);
    holder.dragSort=(ImageView)convertView.findViewById(R.id.dragSort);
    holder.menuPopup=(ImageView)convertView.findViewById(R.id.popupMenu);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  convertView.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
    }
  }
);
  holder.id=getItem(position).id;
  holder.realPosition=getItem(position).realPosition;
  holder.name.setText(getItem(position).trait);
  holder.format.setText(getItem(position).format);
  if (visibility != null) {
    if (visibility.get(holder.name.getText().toString()) != null) {
      if (visibility.get(holder.name.getText().toString()).equals(""String_Node_Str"")) {
        holder.visible.setChecked(true);
      }
 else       holder.visible.setChecked(false);
    }
  }
  holder.visible.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton arg0,    boolean position){
      if (holder.visible.isChecked()) {
        MainActivity.dt.updateTraitVisibility(holder.name.getText().toString(),true);
      }
 else {
        MainActivity.dt.updateTraitVisibility(holder.name.getText().toString(),false);
      }
      TraitEditorActivity.loadData();
      MainActivity.reloadData=true;
    }
  }
);
  holder.dragSort.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        DragSortListView drag=(DragSortListView)parent;
        drag.startDrag(position,DragSortListView.DRAG_POS_Y | DragSortListView.DRAG_NEG_Y,0,0);
        Log.w(""String_Node_Str"",""String_Node_Str"");
        return true;
      }
 else       if (event.getAction() == MotionEvent.ACTION_UP) {
        DragSortListView drag=(DragSortListView)parent;
        drag.stopDrag(false);
        Log.w(""String_Node_Str"",""String_Node_Str"");
        return true;
      }
 else       return false;
    }
  }
);
  holder.menuPopup.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    final View v){
      PopupMenu popup=new PopupMenu(TraitEditorActivity.thisActivity,v);
      popup.getMenuInflater().inflate(R.menu.traititemmenu,popup.getMenu());
      popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
        public boolean onMenuItemClick(        MenuItem item){
          if (item.getTitle().equals(TraitEditorActivity.thisActivity.getString(R.string.copy))) {
            int pos=MainActivity.dt.getMaxPositionFromTraits() + 1;
            String traitName=getItem(position).trait;
            if (traitName.contains(""String_Node_Str"")) {
              traitName=traitName.substring(0,traitName.indexOf(""String_Node_Str""));
            }
            String newTraitName=""String_Node_Str"";
            String[] allTraits=MainActivity.dt.getAllTraits();
            for (int i=0; i < allTraits.length; i++) {
              newTraitName=traitName + ""String_Node_Str"" + ""String_Node_Str""+ Integer.toString(i)+ ""String_Node_Str"";
              if (!Arrays.asList(allTraits).contains(newTraitName)) {
                break;
              }
            }
            MainActivity.dt.insertTraits(newTraitName,getItem(position).format,getItem(position).defaultValue,getItem(position).minimum,getItem(position).maximum,getItem(position).details,getItem(position).categories,""String_Node_Str"",String.valueOf(pos));
            TraitEditorActivity.loadData();
            MainActivity.reloadData=true;
          }
 else           if (item.getTitle().equals(TraitEditorActivity.thisActivity.getString(R.string.delete))) {
            AlertDialog.Builder builder=new AlertDialog.Builder(context);
            builder.setTitle(context.getString(R.string.deletetrait));
            builder.setMessage(context.getString(R.string.areyousure));
            builder.setPositiveButton(context.getString(R.string.yes),new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int which){
                dialog.dismiss();
                MainActivity.dt.deleteTrait(holder.id);
                TraitEditorActivity.loadData();
                MainActivity.reloadData=true;
              }
            }
);
            builder.setNegativeButton(context.getString(R.string.no),new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int which){
                dialog.dismiss();
              }
            }
);
            AlertDialog alert=builder.create();
            alert.show();
          }
 else           if (item.getTitle().equals(TraitEditorActivity.thisActivity.getString(R.string.edit))) {
            listener.onItemClick((AdapterView)parent,v,position,v.getId());
          }
          return false;
        }
      }
);
      popup.show();
    }
  }
);
  return convertView;
}","public View getView(final int position,View convertView,final ViewGroup parent){
  final ViewHolder holder;
  if (convertView == null) {
    holder=new ViewHolder();
    convertView=mLayoutInflater.inflate(R.layout.traitline,null);
    holder.name=(TextView)convertView.findViewById(R.id.text1);
    holder.format=(TextView)convertView.findViewById(R.id.text2);
    holder.visible=(CheckBox)convertView.findViewById(R.id.visible);
    holder.dragSort=(ImageView)convertView.findViewById(R.id.dragSort);
    holder.menuPopup=(ImageView)convertView.findViewById(R.id.popupMenu);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  convertView.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
    }
  }
);
  holder.id=getItem(position).id;
  holder.realPosition=getItem(position).realPosition;
  holder.name.setText(getItem(position).trait);
  holder.format.setText(getItem(position).format);
  if (visibility != null) {
    if (visibility.get(holder.name.getText().toString()) != null) {
      if (visibility.get(holder.name.getText().toString()).equals(""String_Node_Str"")) {
        holder.visible.setChecked(true);
      }
 else       holder.visible.setChecked(false);
    }
  }
  holder.visible.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton arg0,    boolean position){
      if (holder.visible.isChecked()) {
        MainActivity.dt.updateTraitVisibility(holder.name.getText().toString(),true);
      }
 else {
        MainActivity.dt.updateTraitVisibility(holder.name.getText().toString(),false);
      }
    }
  }
);
  holder.dragSort.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        DragSortListView drag=(DragSortListView)parent;
        drag.startDrag(position,DragSortListView.DRAG_POS_Y | DragSortListView.DRAG_NEG_Y,0,0);
        Log.w(""String_Node_Str"",""String_Node_Str"");
        return true;
      }
 else       if (event.getAction() == MotionEvent.ACTION_UP) {
        DragSortListView drag=(DragSortListView)parent;
        drag.stopDrag(false);
        TraitEditorActivity.loadData();
        MainActivity.reloadData=true;
        Log.w(""String_Node_Str"",""String_Node_Str"");
        return true;
      }
 else       return false;
    }
  }
);
  holder.menuPopup.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    final View v){
      PopupMenu popup=new PopupMenu(TraitEditorActivity.thisActivity,v);
      popup.getMenuInflater().inflate(R.menu.traititemmenu,popup.getMenu());
      popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
        public boolean onMenuItemClick(        MenuItem item){
          if (item.getTitle().equals(TraitEditorActivity.thisActivity.getString(R.string.copy))) {
            int pos=MainActivity.dt.getMaxPositionFromTraits() + 1;
            String traitName=getItem(position).trait;
            if (traitName.contains(""String_Node_Str"")) {
              traitName=traitName.substring(0,traitName.indexOf(""String_Node_Str""));
            }
            String newTraitName=""String_Node_Str"";
            String[] allTraits=MainActivity.dt.getAllTraits();
            for (int i=0; i < allTraits.length; i++) {
              newTraitName=traitName + ""String_Node_Str"" + ""String_Node_Str""+ Integer.toString(i)+ ""String_Node_Str"";
              if (!Arrays.asList(allTraits).contains(newTraitName)) {
                break;
              }
            }
            MainActivity.dt.insertTraits(newTraitName,getItem(position).format,getItem(position).defaultValue,getItem(position).minimum,getItem(position).maximum,getItem(position).details,getItem(position).categories,""String_Node_Str"",String.valueOf(pos));
            TraitEditorActivity.loadData();
            MainActivity.reloadData=true;
          }
 else           if (item.getTitle().equals(TraitEditorActivity.thisActivity.getString(R.string.delete))) {
            AlertDialog.Builder builder=new AlertDialog.Builder(context);
            builder.setTitle(context.getString(R.string.deletetrait));
            builder.setMessage(context.getString(R.string.areyousure));
            builder.setPositiveButton(context.getString(R.string.yes),new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int which){
                dialog.dismiss();
                MainActivity.dt.deleteTrait(holder.id);
                TraitEditorActivity.loadData();
                MainActivity.reloadData=true;
              }
            }
);
            builder.setNegativeButton(context.getString(R.string.no),new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int which){
                dialog.dismiss();
              }
            }
);
            AlertDialog alert=builder.create();
            alert.show();
          }
 else           if (item.getTitle().equals(TraitEditorActivity.thisActivity.getString(R.string.edit))) {
            listener.onItemClick((AdapterView)parent,v,position,v.getId());
          }
          return false;
        }
      }
);
      popup.show();
    }
  }
);
  return convertView;
}",0.985931136616068
88761,"@Override public void drop(int from,int to){
  if (to > from) {
    Log.w(""String_Node_Str"",""String_Node_Str"");
    try {
      String prevID=mAdapter.getItem(from).id;
      String prevPosition=mAdapter.getItem(from).realPosition;
      String currentID=mAdapter.getItem(to).id;
      String currentPosition=mAdapter.getItem(to).realPosition;
      MainActivity.dt.updateTraitPosition(currentID,currentPosition);
      MainActivity.dt.updateTraitPosition(prevID,String.valueOf(Integer.parseInt(currentPosition) + 1));
      int newCount=2;
      for (int i=to + 1; i < mAdapter.getCount(); i++) {
        MainActivity.dt.updateTraitPosition(mAdapter.getItem(i).id,String.valueOf(Integer.parseInt(currentPosition) + newCount));
        newCount++;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    Log.w(""String_Node_Str"",""String_Node_Str"");
    try {
      String prevID=mAdapter.getItem(from).id;
      String prevPosition=mAdapter.getItem(from).realPosition;
      String currentID=mAdapter.getItem(to).id;
      String currentPosition=mAdapter.getItem(to).realPosition;
      if (Integer.parseInt(currentPosition) - to >= 0) {
        Log.w(""String_Node_Str"",""String_Node_Str"");
        int newCount=Integer.parseInt(currentPosition) - to;
        for (int i=0; i < to; i++) {
          MainActivity.dt.updateTraitPosition(mAdapter.getItem(i).id,String.valueOf(newCount));
          Log.w(mAdapter.getItem(i).trait,String.valueOf(newCount));
          newCount++;
        }
        Log.w(""String_Node_Str"",""String_Node_Str"");
        MainActivity.dt.updateTraitPosition(prevID,currentPosition);
        Log.w(mAdapter.getItem(from).trait,currentPosition);
      }
 else {
        Log.w(""String_Node_Str"",""String_Node_Str"");
        for (int i=0; i < to; i++) {
          MainActivity.dt.updateTraitPosition(mAdapter.getItem(i).id,String.valueOf(i));
          Log.w(mAdapter.getItem(i).trait,String.valueOf(i));
        }
        Log.w(""String_Node_Str"",""String_Node_Str"");
        MainActivity.dt.updateTraitPosition(prevID,String.valueOf(to));
        Log.w(mAdapter.getItem(from).trait,String.valueOf(to));
        currentPosition=String.valueOf(to);
      }
      Log.w(""String_Node_Str"",""String_Node_Str"");
      int newCount=1;
      for (int i=to; i < mAdapter.getCount(); i++) {
        if (i != from) {
          MainActivity.dt.updateTraitPosition(mAdapter.getItem(i).id,String.valueOf(Integer.parseInt(currentPosition) + newCount));
          Log.w(mAdapter.getItem(i).trait,String.valueOf(Integer.parseInt(currentPosition) + newCount));
          newCount++;
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  loadData();
}","@Override public void drop(int from,int to){
  if (to > from) {
    Log.w(""String_Node_Str"",""String_Node_Str"");
    try {
      String prevID=mAdapter.getItem(from).id;
      String prevPosition=mAdapter.getItem(from).realPosition;
      String currentID=mAdapter.getItem(to).id;
      String currentPosition=mAdapter.getItem(to).realPosition;
      MainActivity.dt.updateTraitPosition(currentID,currentPosition);
      MainActivity.dt.updateTraitPosition(prevID,String.valueOf(Integer.parseInt(currentPosition) + 1));
      int newCount=2;
      for (int i=to + 1; i < mAdapter.getCount(); i++) {
        MainActivity.dt.updateTraitPosition(mAdapter.getItem(i).id,String.valueOf(Integer.parseInt(currentPosition) + newCount));
        newCount++;
      }
      MainActivity.reloadData=true;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    Log.w(""String_Node_Str"",""String_Node_Str"");
    try {
      String prevID=mAdapter.getItem(from).id;
      String prevPosition=mAdapter.getItem(from).realPosition;
      String currentID=mAdapter.getItem(to).id;
      String currentPosition=mAdapter.getItem(to).realPosition;
      if (Integer.parseInt(currentPosition) - to >= 0) {
        Log.w(""String_Node_Str"",""String_Node_Str"");
        int newCount=Integer.parseInt(currentPosition) - to;
        for (int i=0; i < to; i++) {
          MainActivity.dt.updateTraitPosition(mAdapter.getItem(i).id,String.valueOf(newCount));
          Log.w(mAdapter.getItem(i).trait,String.valueOf(newCount));
          newCount++;
        }
        Log.w(""String_Node_Str"",""String_Node_Str"");
        MainActivity.dt.updateTraitPosition(prevID,currentPosition);
        Log.w(mAdapter.getItem(from).trait,currentPosition);
      }
 else {
        Log.w(""String_Node_Str"",""String_Node_Str"");
        for (int i=0; i < to; i++) {
          MainActivity.dt.updateTraitPosition(mAdapter.getItem(i).id,String.valueOf(i));
          Log.w(mAdapter.getItem(i).trait,String.valueOf(i));
        }
        Log.w(""String_Node_Str"",""String_Node_Str"");
        MainActivity.dt.updateTraitPosition(prevID,String.valueOf(to));
        Log.w(mAdapter.getItem(from).trait,String.valueOf(to));
        currentPosition=String.valueOf(to);
      }
      Log.w(""String_Node_Str"",""String_Node_Str"");
      int newCount=1;
      for (int i=to; i < mAdapter.getCount(); i++) {
        if (i != from) {
          MainActivity.dt.updateTraitPosition(mAdapter.getItem(i).id,String.valueOf(Integer.parseInt(currentPosition) + newCount));
          Log.w(mAdapter.getItem(i).trait,String.valueOf(Integer.parseInt(currentPosition) + newCount));
          newCount++;
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  MainActivity.reloadData=true;
  loadData();
}",0.9876453488372092
88762,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ep=getSharedPreferences(""String_Node_Str"",0);
  String local=ep.getString(""String_Node_Str"",""String_Node_Str"");
  String region=ep.getString(""String_Node_Str"",""String_Node_Str"");
  Locale locale2=new Locale(local,region);
  Locale.setDefault(locale2);
  Configuration config2=new Configuration();
  config2.locale=locale2;
  getBaseContext().getResources().updateConfiguration(config2,getBaseContext().getResources().getDisplayMetrics());
  setContentView(R.layout.draglist);
  if (getActionBar() != null) {
    getActionBar().setHomeButtonEnabled(true);
    getActionBar().setDisplayHomeAsUpEnabled(true);
  }
  thisActivity=this;
  final String[] data=new String[10];
  final String[] enData=new String[10];
  data[0]=getString(R.string.numeric);
  data[1]=getString(R.string.qualitative);
  data[2]=getString(R.string.date);
  data[3]=getString(R.string.percent);
  data[4]=getString(R.string.bool);
  data[5]=getString(R.string.text);
  data[6]=getString(R.string.photo);
  data[7]=getString(R.string.audio);
  data[8]=getString(R.string.counter);
  data[9]=getString(R.string.rustrating);
  enData[0]=""String_Node_Str"";
  enData[1]=""String_Node_Str"";
  enData[2]=""String_Node_Str"";
  enData[3]=""String_Node_Str"";
  enData[4]=""String_Node_Str"";
  enData[5]=""String_Node_Str"";
  enData[6]=""String_Node_Str"";
  enData[7]=""String_Node_Str"";
  enData[8]=""String_Node_Str"";
  enData[9]=""String_Node_Str"";
  traitList=(DragSortListView)findViewById(R.id.myList);
  traitList.setDropListener(new DropListener(){
    @Override public void drop(    int from,    int to){
      if (to > from) {
        Log.w(""String_Node_Str"",""String_Node_Str"");
        try {
          String prevID=mAdapter.getItem(from).id;
          String prevPosition=mAdapter.getItem(from).realPosition;
          String currentID=mAdapter.getItem(to).id;
          String currentPosition=mAdapter.getItem(to).realPosition;
          MainActivity.dt.updateTraitPosition(currentID,currentPosition);
          MainActivity.dt.updateTraitPosition(prevID,String.valueOf(Integer.parseInt(currentPosition) + 1));
          int newCount=2;
          for (int i=to + 1; i < mAdapter.getCount(); i++) {
            MainActivity.dt.updateTraitPosition(mAdapter.getItem(i).id,String.valueOf(Integer.parseInt(currentPosition) + newCount));
            newCount++;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        Log.w(""String_Node_Str"",""String_Node_Str"");
        try {
          String prevID=mAdapter.getItem(from).id;
          String prevPosition=mAdapter.getItem(from).realPosition;
          String currentID=mAdapter.getItem(to).id;
          String currentPosition=mAdapter.getItem(to).realPosition;
          if (Integer.parseInt(currentPosition) - to >= 0) {
            Log.w(""String_Node_Str"",""String_Node_Str"");
            int newCount=Integer.parseInt(currentPosition) - to;
            for (int i=0; i < to; i++) {
              MainActivity.dt.updateTraitPosition(mAdapter.getItem(i).id,String.valueOf(newCount));
              Log.w(mAdapter.getItem(i).trait,String.valueOf(newCount));
              newCount++;
            }
            Log.w(""String_Node_Str"",""String_Node_Str"");
            MainActivity.dt.updateTraitPosition(prevID,currentPosition);
            Log.w(mAdapter.getItem(from).trait,currentPosition);
          }
 else {
            Log.w(""String_Node_Str"",""String_Node_Str"");
            for (int i=0; i < to; i++) {
              MainActivity.dt.updateTraitPosition(mAdapter.getItem(i).id,String.valueOf(i));
              Log.w(mAdapter.getItem(i).trait,String.valueOf(i));
            }
            Log.w(""String_Node_Str"",""String_Node_Str"");
            MainActivity.dt.updateTraitPosition(prevID,String.valueOf(to));
            Log.w(mAdapter.getItem(from).trait,String.valueOf(to));
            currentPosition=String.valueOf(to);
          }
          Log.w(""String_Node_Str"",""String_Node_Str"");
          int newCount=1;
          for (int i=to; i < mAdapter.getCount(); i++) {
            if (i != from) {
              MainActivity.dt.updateTraitPosition(mAdapter.getItem(i).id,String.valueOf(Integer.parseInt(currentPosition) + newCount));
              Log.w(mAdapter.getItem(i).trait,String.valueOf(Integer.parseInt(currentPosition) + newCount));
              newCount++;
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      loadData();
    }
  }
);
  createDialog=new Dialog(this,android.R.style.Theme_Holo_Light_Dialog);
  createDialog.setContentView(R.layout.trait);
  createDialog.setTitle(getString(R.string.addtrait));
  createDialog.setCancelable(true);
  createDialog.setCanceledOnTouchOutside(true);
  android.view.WindowManager.LayoutParams params=createDialog.getWindow().getAttributes();
  params.width=LayoutParams.MATCH_PARENT;
  createDialog.getWindow().setAttributes(params);
  createDialog.setOnCancelListener(new OnCancelListener(){
    public void onCancel(    DialogInterface arg0){
      createVisible=false;
    }
  }
);
  createDialog.setOnDismissListener(new OnDismissListener(){
    public void onDismiss(    DialogInterface arg0){
      createVisible=false;
    }
  }
);
  trait=(EditText)createDialog.findViewById(R.id.trait);
  format=(Spinner)createDialog.findViewById(R.id.format);
  def=(EditText)createDialog.findViewById(R.id.def);
  minimum=(EditText)createDialog.findViewById(R.id.minimum);
  maximum=(EditText)createDialog.findViewById(R.id.maximum);
  details=(EditText)createDialog.findViewById(R.id.details);
  categories=(EditText)createDialog.findViewById(R.id.categories);
  defBox=(LinearLayout)createDialog.findViewById(R.id.defbox);
  minBox=(LinearLayout)createDialog.findViewById(R.id.minbox);
  maxBox=(LinearLayout)createDialog.findViewById(R.id.maxbox);
  categoryBox=(LinearLayout)createDialog.findViewById(R.id.categorybox);
  bool=(ToggleButton)createDialog.findViewById(R.id.boolBtn);
  defTv=(TextView)createDialog.findViewById(R.id.defTv);
  Button saveBtn=(Button)createDialog.findViewById(R.id.saveBtn);
  Button closeBtn=(Button)createDialog.findViewById(R.id.closeBtn);
  trait.isFocused();
  traitListener=new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      o=mAdapter.getItem(position);
      currentId=o.id;
      trait.setText(o.trait);
      oldTrait=o.trait;
      for (int i=0; i < data.length; i++) {
        if (data[i].toLowerCase().equals(o.format.toLowerCase())) {
          currentPosition=i;
          format.setSelection(i,true);
          prepareFields(i);
          break;
        }
      }
      def.setText(o.defaultValue);
      if (o.defaultValue.equals(""String_Node_Str""))       bool.setChecked(true);
 else       bool.setChecked(false);
      minimum.setText(o.minimum);
      maximum.setText(o.maximum);
      details.setText(o.details);
      categories.setText(o.categories);
      edit=true;
      createVisible=true;
      loadData();
      createDialog.show();
    }
  }
;
  format.setOnItemSelectedListener(new OnItemSelectedListener(){
    public void onItemSelected(    AdapterView<?> av,    View arg1,    int position,    long arg3){
      if (position != currentPosition) {
        def.setText(""String_Node_Str"");
        minimum.setText(""String_Node_Str"");
        maximum.setText(""String_Node_Str"");
        details.setText(""String_Node_Str"");
        categories.setText(""String_Node_Str"");
        bool.setChecked(false);
        currentPosition=position;
        format.setSelection(currentPosition);
        prepareFields(currentPosition);
      }
    }
    public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
  ArrayAdapter<String> itemsAdapter=new ArrayAdapter<String>(this,R.layout.spinnerlayout,data);
  format.setAdapter(itemsAdapter);
  closeBtn.setOnClickListener(new OnClickListener(){
    public void onClick(    View arg0){
      if (dataChanged()) {
        AlertDialog.Builder builder=new AlertDialog.Builder(TraitEditorActivity.this);
        builder.setTitle(getString(R.string.close));
        builder.setMessage(getString(R.string.areyousure));
        builder.setPositiveButton(getString(R.string.yes),new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int which){
            dialog.dismiss();
            createDialog.dismiss();
          }
        }
);
        builder.setNegativeButton(getString(R.string.no),new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int which){
            dialog.dismiss();
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
 else {
        createDialog.dismiss();
      }
    }
  }
);
  saveBtn.setOnClickListener(new OnClickListener(){
    public void onClick(    View arg0){
      if (trait.getText().toString().length() == 0) {
        Toast.makeText(TraitEditorActivity.this,getString(R.string.mandatorytrait),Toast.LENGTH_LONG).show();
        return;
      }
      boolean exists=MainActivity.dt.hasTrait(trait.getText().toString().trim());
      if (!edit) {
        if (exists) {
          Toast.makeText(TraitEditorActivity.this,getString(R.string.traitexists),Toast.LENGTH_LONG).show();
          return;
        }
      }
 else {
        if (exists & !oldTrait.toLowerCase().equals(trait.getText().toString().trim().toLowerCase())) {
          Toast.makeText(TraitEditorActivity.this,getString(R.string.traitexists),Toast.LENGTH_LONG).show();
          return;
        }
      }
      if (format.getSelectedItemPosition() == 0) {
        if (def.getText().toString().length() > 0 & !isNumeric(def.getText().toString(),false)) {
          Toast.makeText(TraitEditorActivity.this,getString(R.string.notanumber),Toast.LENGTH_LONG).show();
          return;
        }
        if (minimum.getText().toString().length() > 0 & !isNumeric(minimum.getText().toString(),false)) {
          Toast.makeText(TraitEditorActivity.this,getString(R.string.notanumber),Toast.LENGTH_LONG).show();
          return;
        }
        if (maximum.getText().toString().length() > 0 & !isNumeric(maximum.getText().toString(),false)) {
          Toast.makeText(TraitEditorActivity.this,getString(R.string.notanumber),Toast.LENGTH_LONG).show();
          return;
        }
      }
      if (format.getSelectedItemPosition() == 1) {
        if (categories.getText().toString().length() == 0) {
          Toast.makeText(TraitEditorActivity.this,getString(R.string.notemptycategory),Toast.LENGTH_LONG).show();
          return;
        }
      }
      if (format.getSelectedItemPosition() == 3) {
        if (def.getText().toString().length() == 0 | !isNumeric(def.getText().toString(),true)) {
          Toast.makeText(TraitEditorActivity.this,getString(R.string.notanumber),Toast.LENGTH_LONG).show();
          return;
        }
        if (minimum.getText().toString().length() == 0 | !isNumeric(minimum.getText().toString(),true)) {
          Toast.makeText(TraitEditorActivity.this,getString(R.string.notanumber),Toast.LENGTH_LONG).show();
          return;
        }
        if (maximum.getText().toString().length() == 0 | !isNumeric(maximum.getText().toString(),true)) {
          Toast.makeText(TraitEditorActivity.this,getString(R.string.notanumber),Toast.LENGTH_LONG).show();
          return;
        }
      }
      int pos=MainActivity.dt.getMaxPositionFromTraits() + 1;
      if (format.getSelectedItemPosition() == 4) {
        if (bool.isChecked())         def.setText(""String_Node_Str"");
 else         def.setText(""String_Node_Str"");
      }
      if (!edit)       MainActivity.dt.insertTraits(trait.getText().toString().trim(),enData[format.getSelectedItemPosition()].toLowerCase(),def.getText().toString(),minimum.getText().toString(),maximum.getText().toString(),details.getText().toString(),categories.getText().toString(),""String_Node_Str"",String.valueOf(pos));
 else       MainActivity.dt.editTraits(currentId,trait.getText().toString().trim(),format.getSelectedItem().toString().toLowerCase(),def.getText().toString(),minimum.getText().toString(),maximum.getText().toString(),details.getText().toString(),categories.getText().toString());
      Editor ed=ep.edit();
      ed.putBoolean(""String_Node_Str"",true);
      ed.apply();
      loadData();
      MainActivity.reloadData=true;
      createDialog.dismiss();
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ep=getSharedPreferences(""String_Node_Str"",0);
  String local=ep.getString(""String_Node_Str"",""String_Node_Str"");
  String region=ep.getString(""String_Node_Str"",""String_Node_Str"");
  Locale locale2=new Locale(local,region);
  Locale.setDefault(locale2);
  Configuration config2=new Configuration();
  config2.locale=locale2;
  getBaseContext().getResources().updateConfiguration(config2,getBaseContext().getResources().getDisplayMetrics());
  setContentView(R.layout.draglist);
  if (getActionBar() != null) {
    getActionBar().setHomeButtonEnabled(true);
    getActionBar().setDisplayHomeAsUpEnabled(true);
  }
  thisActivity=this;
  final String[] data=new String[10];
  final String[] enData=new String[10];
  data[0]=getString(R.string.numeric);
  data[1]=getString(R.string.qualitative);
  data[2]=getString(R.string.date);
  data[3]=getString(R.string.percent);
  data[4]=getString(R.string.bool);
  data[5]=getString(R.string.text);
  data[6]=getString(R.string.photo);
  data[7]=getString(R.string.audio);
  data[8]=getString(R.string.counter);
  data[9]=getString(R.string.rustrating);
  enData[0]=""String_Node_Str"";
  enData[1]=""String_Node_Str"";
  enData[2]=""String_Node_Str"";
  enData[3]=""String_Node_Str"";
  enData[4]=""String_Node_Str"";
  enData[5]=""String_Node_Str"";
  enData[6]=""String_Node_Str"";
  enData[7]=""String_Node_Str"";
  enData[8]=""String_Node_Str"";
  enData[9]=""String_Node_Str"";
  traitList=(DragSortListView)findViewById(R.id.myList);
  traitList.setDropListener(new DropListener(){
    @Override public void drop(    int from,    int to){
      if (to > from) {
        Log.w(""String_Node_Str"",""String_Node_Str"");
        try {
          String prevID=mAdapter.getItem(from).id;
          String prevPosition=mAdapter.getItem(from).realPosition;
          String currentID=mAdapter.getItem(to).id;
          String currentPosition=mAdapter.getItem(to).realPosition;
          MainActivity.dt.updateTraitPosition(currentID,currentPosition);
          MainActivity.dt.updateTraitPosition(prevID,String.valueOf(Integer.parseInt(currentPosition) + 1));
          int newCount=2;
          for (int i=to + 1; i < mAdapter.getCount(); i++) {
            MainActivity.dt.updateTraitPosition(mAdapter.getItem(i).id,String.valueOf(Integer.parseInt(currentPosition) + newCount));
            newCount++;
          }
          MainActivity.reloadData=true;
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        Log.w(""String_Node_Str"",""String_Node_Str"");
        try {
          String prevID=mAdapter.getItem(from).id;
          String prevPosition=mAdapter.getItem(from).realPosition;
          String currentID=mAdapter.getItem(to).id;
          String currentPosition=mAdapter.getItem(to).realPosition;
          if (Integer.parseInt(currentPosition) - to >= 0) {
            Log.w(""String_Node_Str"",""String_Node_Str"");
            int newCount=Integer.parseInt(currentPosition) - to;
            for (int i=0; i < to; i++) {
              MainActivity.dt.updateTraitPosition(mAdapter.getItem(i).id,String.valueOf(newCount));
              Log.w(mAdapter.getItem(i).trait,String.valueOf(newCount));
              newCount++;
            }
            Log.w(""String_Node_Str"",""String_Node_Str"");
            MainActivity.dt.updateTraitPosition(prevID,currentPosition);
            Log.w(mAdapter.getItem(from).trait,currentPosition);
          }
 else {
            Log.w(""String_Node_Str"",""String_Node_Str"");
            for (int i=0; i < to; i++) {
              MainActivity.dt.updateTraitPosition(mAdapter.getItem(i).id,String.valueOf(i));
              Log.w(mAdapter.getItem(i).trait,String.valueOf(i));
            }
            Log.w(""String_Node_Str"",""String_Node_Str"");
            MainActivity.dt.updateTraitPosition(prevID,String.valueOf(to));
            Log.w(mAdapter.getItem(from).trait,String.valueOf(to));
            currentPosition=String.valueOf(to);
          }
          Log.w(""String_Node_Str"",""String_Node_Str"");
          int newCount=1;
          for (int i=to; i < mAdapter.getCount(); i++) {
            if (i != from) {
              MainActivity.dt.updateTraitPosition(mAdapter.getItem(i).id,String.valueOf(Integer.parseInt(currentPosition) + newCount));
              Log.w(mAdapter.getItem(i).trait,String.valueOf(Integer.parseInt(currentPosition) + newCount));
              newCount++;
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      MainActivity.reloadData=true;
      loadData();
    }
  }
);
  createDialog=new Dialog(this,android.R.style.Theme_Holo_Light_Dialog);
  createDialog.setContentView(R.layout.trait);
  createDialog.setTitle(getString(R.string.addtrait));
  createDialog.setCancelable(true);
  createDialog.setCanceledOnTouchOutside(true);
  android.view.WindowManager.LayoutParams params=createDialog.getWindow().getAttributes();
  params.width=LayoutParams.MATCH_PARENT;
  createDialog.getWindow().setAttributes(params);
  createDialog.setOnCancelListener(new OnCancelListener(){
    public void onCancel(    DialogInterface arg0){
      createVisible=false;
    }
  }
);
  createDialog.setOnDismissListener(new OnDismissListener(){
    public void onDismiss(    DialogInterface arg0){
      createVisible=false;
    }
  }
);
  trait=(EditText)createDialog.findViewById(R.id.trait);
  format=(Spinner)createDialog.findViewById(R.id.format);
  def=(EditText)createDialog.findViewById(R.id.def);
  minimum=(EditText)createDialog.findViewById(R.id.minimum);
  maximum=(EditText)createDialog.findViewById(R.id.maximum);
  details=(EditText)createDialog.findViewById(R.id.details);
  categories=(EditText)createDialog.findViewById(R.id.categories);
  defBox=(LinearLayout)createDialog.findViewById(R.id.defbox);
  minBox=(LinearLayout)createDialog.findViewById(R.id.minbox);
  maxBox=(LinearLayout)createDialog.findViewById(R.id.maxbox);
  categoryBox=(LinearLayout)createDialog.findViewById(R.id.categorybox);
  bool=(ToggleButton)createDialog.findViewById(R.id.boolBtn);
  defTv=(TextView)createDialog.findViewById(R.id.defTv);
  Button saveBtn=(Button)createDialog.findViewById(R.id.saveBtn);
  Button closeBtn=(Button)createDialog.findViewById(R.id.closeBtn);
  trait.isFocused();
  traitListener=new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      o=mAdapter.getItem(position);
      currentId=o.id;
      trait.setText(o.trait);
      oldTrait=o.trait;
      for (int i=0; i < data.length; i++) {
        if (data[i].toLowerCase().equals(o.format.toLowerCase())) {
          currentPosition=i;
          format.setSelection(i,true);
          prepareFields(i);
          break;
        }
      }
      def.setText(o.defaultValue);
      if (o.defaultValue.equals(""String_Node_Str""))       bool.setChecked(true);
 else       bool.setChecked(false);
      minimum.setText(o.minimum);
      maximum.setText(o.maximum);
      details.setText(o.details);
      categories.setText(o.categories);
      edit=true;
      createVisible=true;
      loadData();
      createDialog.show();
    }
  }
;
  format.setOnItemSelectedListener(new OnItemSelectedListener(){
    public void onItemSelected(    AdapterView<?> av,    View arg1,    int position,    long arg3){
      if (position != currentPosition) {
        def.setText(""String_Node_Str"");
        minimum.setText(""String_Node_Str"");
        maximum.setText(""String_Node_Str"");
        details.setText(""String_Node_Str"");
        categories.setText(""String_Node_Str"");
        bool.setChecked(false);
        currentPosition=position;
        format.setSelection(currentPosition);
        prepareFields(currentPosition);
      }
    }
    public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
  ArrayAdapter<String> itemsAdapter=new ArrayAdapter<String>(this,R.layout.spinnerlayout,data);
  format.setAdapter(itemsAdapter);
  closeBtn.setOnClickListener(new OnClickListener(){
    public void onClick(    View arg0){
      if (dataChanged()) {
        AlertDialog.Builder builder=new AlertDialog.Builder(TraitEditorActivity.this);
        builder.setTitle(getString(R.string.close));
        builder.setMessage(getString(R.string.areyousure));
        builder.setPositiveButton(getString(R.string.yes),new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int which){
            dialog.dismiss();
            createDialog.dismiss();
          }
        }
);
        builder.setNegativeButton(getString(R.string.no),new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int which){
            dialog.dismiss();
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
 else {
        createDialog.dismiss();
      }
    }
  }
);
  saveBtn.setOnClickListener(new OnClickListener(){
    public void onClick(    View arg0){
      if (trait.getText().toString().length() == 0) {
        Toast.makeText(TraitEditorActivity.this,getString(R.string.mandatorytrait),Toast.LENGTH_LONG).show();
        return;
      }
      boolean exists=MainActivity.dt.hasTrait(trait.getText().toString().trim());
      if (!edit) {
        if (exists) {
          Toast.makeText(TraitEditorActivity.this,getString(R.string.traitexists),Toast.LENGTH_LONG).show();
          return;
        }
      }
 else {
        if (exists & !oldTrait.toLowerCase().equals(trait.getText().toString().trim().toLowerCase())) {
          Toast.makeText(TraitEditorActivity.this,getString(R.string.traitexists),Toast.LENGTH_LONG).show();
          return;
        }
      }
      if (format.getSelectedItemPosition() == 0) {
        if (def.getText().toString().length() > 0 & !isNumeric(def.getText().toString(),false)) {
          Toast.makeText(TraitEditorActivity.this,getString(R.string.notanumber),Toast.LENGTH_LONG).show();
          return;
        }
        if (minimum.getText().toString().length() > 0 & !isNumeric(minimum.getText().toString(),false)) {
          Toast.makeText(TraitEditorActivity.this,getString(R.string.notanumber),Toast.LENGTH_LONG).show();
          return;
        }
        if (maximum.getText().toString().length() > 0 & !isNumeric(maximum.getText().toString(),false)) {
          Toast.makeText(TraitEditorActivity.this,getString(R.string.notanumber),Toast.LENGTH_LONG).show();
          return;
        }
      }
      if (format.getSelectedItemPosition() == 1) {
        if (categories.getText().toString().length() == 0) {
          Toast.makeText(TraitEditorActivity.this,getString(R.string.notemptycategory),Toast.LENGTH_LONG).show();
          return;
        }
      }
      if (format.getSelectedItemPosition() == 3) {
        if (def.getText().toString().length() == 0 | !isNumeric(def.getText().toString(),true)) {
          Toast.makeText(TraitEditorActivity.this,getString(R.string.notanumber),Toast.LENGTH_LONG).show();
          return;
        }
        if (minimum.getText().toString().length() == 0 | !isNumeric(minimum.getText().toString(),true)) {
          Toast.makeText(TraitEditorActivity.this,getString(R.string.notanumber),Toast.LENGTH_LONG).show();
          return;
        }
        if (maximum.getText().toString().length() == 0 | !isNumeric(maximum.getText().toString(),true)) {
          Toast.makeText(TraitEditorActivity.this,getString(R.string.notanumber),Toast.LENGTH_LONG).show();
          return;
        }
      }
      int pos=MainActivity.dt.getMaxPositionFromTraits() + 1;
      if (format.getSelectedItemPosition() == 4) {
        if (bool.isChecked())         def.setText(""String_Node_Str"");
 else         def.setText(""String_Node_Str"");
      }
      if (!edit)       MainActivity.dt.insertTraits(trait.getText().toString().trim(),enData[format.getSelectedItemPosition()].toLowerCase(),def.getText().toString(),minimum.getText().toString(),maximum.getText().toString(),details.getText().toString(),categories.getText().toString(),""String_Node_Str"",String.valueOf(pos));
 else       MainActivity.dt.editTraits(currentId,trait.getText().toString().trim(),format.getSelectedItem().toString().toLowerCase(),def.getText().toString(),minimum.getText().toString(),maximum.getText().toString(),details.getText().toString(),categories.getText().toString());
      Editor ed=ep.edit();
      ed.putBoolean(""String_Node_Str"",true);
      ed.apply();
      loadData();
      MainActivity.reloadData=true;
      createDialog.dismiss();
    }
  }
);
}",0.9969958099454502
88763,"private void moveAllFilesInDirectory(Path from,Path to) throws MojoExecutionException {
  try {
    Files.createDirectories(to);
    for (    File file : from.toFile().listFiles()) {
      mojo.getLog().info(""String_Node_Str"" + file + ""String_Node_Str""+ to.resolve(file.toPath().getFileName()));
      Files.move(file.toPath(),to.resolve(file.toPath().getFileName()));
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + quote(from) + ""String_Node_Str""+ quote(to),e);
  }
}","private void moveAllFilesInDirectory(Path from,Path to) throws MojoExecutionException {
  try {
    Files.createDirectories(to);
    for (    File file : from.toFile().listFiles()) {
      mojo.getLog().info(""String_Node_Str"" + file + ""String_Node_Str""+ to.resolve(file.toPath().getFileName()));
      FileUtils.forceDelete(to.resolve(file.toPath().getFileName()).toFile());
      Files.move(file.toPath(),to.resolve(file.toPath().getFileName()));
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + quote(from) + ""String_Node_Str""+ quote(to),e);
  }
}",0.9277218664226898
88764,"void assertDriverIsInstalled(String driverFileName){
  boolean foundDriverFile=false;
  boolean foundDriverVersionFile=false;
  for (  File file : mojo.installationDirectory.listFiles()) {
    if (file.getName().equals(driverFileName)) {
      foundDriverFile=true;
    }
    if (file.getName().equals(driverFileName.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"")) {
      foundDriverVersionFile=true;
    }
  }
  if (!foundDriverFile) {
    fail(""String_Node_Str"" + driverFileName + ""String_Node_Str""+ System.lineSeparator()+ Utils.debugInfo(mojo));
  }
  if (!foundDriverVersionFile) {
    fail(""String_Node_Str"" + driverFileName + ""String_Node_Str""+ System.lineSeparator()+ Utils.debugInfo(mojo));
  }
}","void assertDriverIsInstalled(String driverFileName,String version){
  boolean foundDriverFile=false;
  boolean foundDriverVersionFile=false;
  String versionFilename=driverFileName.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  for (  File file : mojo.installationDirectory.listFiles()) {
    if (file.getName().equals(driverFileName)) {
      foundDriverFile=true;
    }
    if (file.getName().equals(versionFilename)) {
      foundDriverVersionFile=true;
      if (version != null) {
        try {
          String versionFileString=FileUtils.readFileToString(file);
          if (!versionFileString.contains(""String_Node_Str"" + version + ""String_Node_Str"")) {
            fail(""String_Node_Str"" + version + ""String_Node_Str""+ versionFileString);
          }
        }
 catch (        IOException e) {
          fail(""String_Node_Str"" + versionFilename);
        }
      }
    }
  }
  if (!foundDriverFile) {
    fail(""String_Node_Str"" + driverFileName + ""String_Node_Str""+ System.lineSeparator()+ Utils.debugInfo(mojo));
  }
  if (!foundDriverVersionFile) {
    fail(""String_Node_Str"" + versionFilename + ""String_Node_Str""+ System.lineSeparator()+ Utils.debugInfo(mojo));
  }
}",0.6344755970924195
88765,"private void printXmlFileContetIfPresentInDonwloadedFile(Path downloadFilePath){
  try {
    List<String> fileContent=Files.readAllLines(Paths.get(""String_Node_Str""),StandardCharsets.UTF_8);
    if (fileContent.get(0).startsWith(""String_Node_Str"")) {
      mojo.getLog().info(""String_Node_Str"");
      for (      String line : fileContent) {
        mojo.getLog().info(""String_Node_Str"" + line);
      }
    }
  }
 catch (  Exception e) {
  }
}","private void printXmlFileContetIfPresentInDonwloadedFile(Path downloadFilePath){
  try {
    List<String> fileContent=Files.readAllLines(downloadFilePath,StandardCharsets.UTF_8);
    if (fileContent.get(0).startsWith(""String_Node_Str"")) {
      mojo.getLog().info(""String_Node_Str"");
      for (      String line : fileContent) {
        mojo.getLog().info(""String_Node_Str"" + line);
      }
    }
  }
 catch (  Exception e) {
  }
}",0.958904109589041
88766,"Path extractDriver(Driver driver,Path fileToExtract) throws MojoExecutionException {
  String fileExtension=FilenameUtils.getExtension(fileToExtract.toString());
  try {
switch (fileExtension) {
case ""String_Node_Str"":
      mojo.getLog().info(""String_Node_Str"" + quote(fileToExtract) + ""String_Node_Str"");
    String extractedFilename=FilenameUtils.getBaseName(fileToExtract.toString());
  Path extractedFile=Paths.get(mojo.tempDirectory.getPath(),extractedFilename);
try (FileInputStream fin=new FileInputStream(fileToExtract.toFile())){
  try (BufferedInputStream bin=new BufferedInputStream(fin)){
    try (BZip2CompressorInputStream input=new BZip2CompressorInputStream(bin)){
      FileUtils.copyInputStreamToFile(input,extractedFile.toFile());
    }
   }
 }
 decideToDeleteFile(fileToExtract);
return extractDriver(driver,extractedFile);
case ""String_Node_Str"":
mojo.getLog().info(""String_Node_Str"" + quote(fileToExtract) + ""String_Node_Str"");
String extractedFromGzFilename=FilenameUtils.getBaseName(fileToExtract.toString());
Path extractedFromGzFile=Paths.get(mojo.tempDirectory.getPath(),extractedFromGzFilename);
try (FileInputStream fin=new FileInputStream(fileToExtract.toFile())){
try (BufferedInputStream bin=new BufferedInputStream(fin)){
try (GzipCompressorInputStream input=new GzipCompressorInputStream(bin)){
File file=new File(extractedFromGzFile.toFile(),extractedFromGzFilename);
if (!extractedFromGzFile.toFile().mkdirs()) {
throw new RuntimeException(""String_Node_Str"" + quote(extractedFromGzFile) + ""String_Node_Str"");
}
try (FileOutputStream out=new FileOutputStream(file)){
IOUtils.copy(input,out);
}
 }
 }
 }
 decideToDeleteFile(fileToExtract);
return extractedFromGzFile;
case ""String_Node_Str"":
case ""String_Node_Str"":
mojo.getLog().info(""String_Node_Str"" + quote(fileToExtract) + ""String_Node_Str"");
Path extractToDirectory=Paths.get(mojo.tempDirectory.getPath(),FilenameUtils.getBaseName(fileToExtract.toString()));
if (!extractToDirectory.toFile().mkdirs()) {
throw new RuntimeException(""String_Node_Str"" + quote(extractToDirectory) + ""String_Node_Str"");
}
Pattern pattern=null;
if (null != driver.getFileMatchInside()) {
pattern=Pattern.compile(driver.getFileMatchInside());
}
try (FileInputStream fin=new FileInputStream(fileToExtract.toFile())){
try (BufferedInputStream bin=new BufferedInputStream(fin)){
try (ArchiveInputStream aiStream=new ArchiveStreamFactory().createArchiveInputStream(fileExtension,bin)){
ArchiveEntry entry;
while ((entry=aiStream.getNextEntry()) != null) {
String name=entry.getName();
if (pattern != null && entry.isDirectory()) {
}
 else if (entry.isDirectory()) {
File directory=new File(extractToDirectory.toFile(),name);
if (!directory.mkdirs()) {
throw new RuntimeException(""String_Node_Str"" + quote(directory));
}
}
 else {
File file=null;
if (entry instanceof TarArchiveEntry) {
TarArchiveEntry archiveEntry=(TarArchiveEntry)entry;
if (archiveEntry.isFile()) {
file=new File(extractToDirectory.toFile(),name);
}
}
 else if (entry instanceof ZipArchiveEntry) {
ZipArchiveEntry archiveEntry=(ZipArchiveEntry)entry;
if (!archiveEntry.isUnixSymlink()) {
file=new File(extractToDirectory.toFile(),name);
}
}
if (pattern != null) {
if (pattern.matcher(name).matches()) {
file=new File(extractToDirectory.toFile(),FilenameUtils.getName(name));
}
 else {
file=null;
}
}
if (file != null) {
try (OutputStream out=new FileOutputStream(file)){
IOUtils.copy(aiStream,out);
}
 }
}
}
decideToDeleteFile(fileToExtract);
return extractToDirectory;
}
 }
 }
 case ""String_Node_Str"":
case ""String_Node_Str"":
mojo.getLog().info(""String_Node_Str"" + quote(fileToExtract) + ""String_Node_Str"");
Path copyToDirectory=Paths.get(mojo.tempDirectory.getPath(),FilenameUtils.getName(fileToExtract.toString()));
FileUtils.copyFile(fileToExtract.toFile(),copyToDirectory.toFile());
decideToDeleteFile(fileToExtract);
return mojo.tempDirectory.toPath();
default :
throw new UnsupportedOperationException(""String_Node_Str"" + fileExtension);
}
}
 catch (Exception e) {
throw new InstallDriversMojoExecutionException(""String_Node_Str"" + quote(fileToExtract) + ""String_Node_Str""+ e.getMessage(),e,mojo,driver);
}
}","Path extractDriver(Driver driver,Path fileToExtract) throws MojoExecutionException {
  String fileExtension=FilenameUtils.getExtension(fileToExtract.toString());
  try {
switch (fileExtension) {
case ""String_Node_Str"":
      mojo.getLog().info(""String_Node_Str"" + quote(fileToExtract) + ""String_Node_Str"");
    String extractedFilename=FilenameUtils.getBaseName(fileToExtract.toString());
  Path extractedFile=Paths.get(mojo.tempDirectory.getPath(),extractedFilename);
try (FileInputStream fin=new FileInputStream(fileToExtract.toFile())){
  try (BufferedInputStream bin=new BufferedInputStream(fin)){
    try (BZip2CompressorInputStream input=new BZip2CompressorInputStream(bin)){
      FileUtils.copyInputStreamToFile(input,extractedFile.toFile());
    }
   }
 }
 decideToDeleteFile(fileToExtract);
return extractDriver(driver,extractedFile);
case ""String_Node_Str"":
mojo.getLog().info(""String_Node_Str"" + quote(fileToExtract) + ""String_Node_Str"");
String extractedFromGzFilename=FilenameUtils.getBaseName(fileToExtract.toString());
Path extractedFromGzFile=Paths.get(mojo.tempDirectory.getPath(),extractedFromGzFilename);
try (FileInputStream fin=new FileInputStream(fileToExtract.toFile())){
try (BufferedInputStream bin=new BufferedInputStream(fin)){
try (GzipCompressorInputStream input=new GzipCompressorInputStream(bin)){
File file=new File(extractedFromGzFile.toFile(),extractedFromGzFilename);
if (!extractedFromGzFile.toFile().mkdirs()) {
throw new RuntimeException(""String_Node_Str"" + quote(extractedFromGzFile) + ""String_Node_Str"");
}
try (FileOutputStream out=new FileOutputStream(file)){
IOUtils.copy(input,out);
}
 }
 }
 }
 decideToDeleteFile(fileToExtract);
return extractedFromGzFile;
case ""String_Node_Str"":
case ""String_Node_Str"":
mojo.getLog().info(""String_Node_Str"" + quote(fileToExtract) + ""String_Node_Str"");
Path extractToDirectory=Paths.get(mojo.tempDirectory.getPath(),FilenameUtils.getBaseName(fileToExtract.toString()));
if (!extractToDirectory.toFile().mkdirs()) {
throw new RuntimeException(""String_Node_Str"" + quote(extractToDirectory) + ""String_Node_Str"");
}
Pattern pattern=null;
if (null != driver.getFileMatchInside()) {
pattern=Pattern.compile(driver.getFileMatchInside());
}
try (FileInputStream fin=new FileInputStream(fileToExtract.toFile())){
try (BufferedInputStream bin=new BufferedInputStream(fin)){
try (ArchiveInputStream aiStream=new ArchiveStreamFactory().createArchiveInputStream(fileExtension,bin)){
ArchiveEntry entry;
while ((entry=aiStream.getNextEntry()) != null) {
String name=entry.getName();
if (pattern != null && entry.isDirectory()) {
}
 else if (entry.isDirectory()) {
File directory=new File(extractToDirectory.toFile(),name);
if (!directory.mkdirs()) {
throw new RuntimeException(""String_Node_Str"" + quote(directory));
}
}
 else {
File file=null;
if (entry instanceof TarArchiveEntry) {
TarArchiveEntry archiveEntry=(TarArchiveEntry)entry;
if (archiveEntry.isFile()) {
file=new File(extractToDirectory.toFile(),name);
}
}
 else if (entry instanceof ZipArchiveEntry) {
ZipArchiveEntry archiveEntry=(ZipArchiveEntry)entry;
if (!archiveEntry.isUnixSymlink()) {
file=new File(extractToDirectory.toFile(),name);
}
}
if (pattern != null) {
if (pattern.matcher(name).matches()) {
file=new File(extractToDirectory.toFile(),FilenameUtils.getName(name));
}
 else {
file=null;
}
}
if (file != null) {
try (OutputStream out=new FileOutputStream(file)){
IOUtils.copy(aiStream,out);
}
 }
}
}
decideToDeleteFile(fileToExtract);
return extractToDirectory;
}
 }
 }
 case ""String_Node_Str"":
case ""String_Node_Str"":
if (mojo.keepDownloadedWebdrivers) {
mojo.getLog().info(""String_Node_Str"" + quote(fileToExtract) + ""String_Node_Str"");
Path copyToDirectory=Paths.get(mojo.tempDirectory.getPath(),FilenameUtils.getName(fileToExtract.toString()));
FileUtils.copyFile(fileToExtract.toFile(),copyToDirectory.toFile());
decideToDeleteFile(fileToExtract);
return mojo.tempDirectory.toPath();
}
 else {
return fileToExtract;
}
default :
throw new UnsupportedOperationException(""String_Node_Str"" + fileExtension);
}
}
 catch (Exception e) {
throw new InstallDriversMojoExecutionException(""String_Node_Str"" + quote(fileToExtract) + ""String_Node_Str""+ e.getMessage(),e,mojo,driver);
}
}",0.99151428229951
88767,"public void install(Driver driver,Path extractLocation) throws MojoExecutionException {
  if (directoryIsEmpty(extractLocation)) {
    throw new InstallDriversMojoExecutionException(""String_Node_Str"",mojo,driver);
  }
  try {
    if (directoryContainsSingleDirectory(extractLocation)) {
      moveDirectoryInDirectory(extractLocation,Paths.get(mojo.installationDirectory.getPath(),driver.getId()));
    }
 else     if (directoryContainsSingleFile(extractLocation)) {
      moveFileInDirectory(extractLocation,Paths.get(mojo.installationDirectory.getPath(),driver.getFileName()));
      makeExecutable(Paths.get(mojo.installationDirectory.getPath(),driver.getFileName()));
    }
 else {
      moveAllFilesInDirectory(extractLocation,Paths.get(mojo.installationDirectory.getPath(),driver.getId()));
    }
    versionHandler.writeVersionFile(driver);
  }
 catch (  Exception e) {
    throw new InstallDriversMojoExecutionException(""String_Node_Str"" + e.getMessage(),e,mojo,driver);
  }
}","public void install(Driver driver,Path extractLocation) throws MojoExecutionException {
  if (extractLocation.toFile().isDirectory() && directoryIsEmpty(extractLocation)) {
    throw new InstallDriversMojoExecutionException(""String_Node_Str"",mojo,driver);
  }
  try {
    if (isFile(extractLocation)) {
      moveFile(driver,extractLocation);
    }
 else     if (directoryContainsSingleDirectory(extractLocation)) {
      moveDirectoryInDirectory(extractLocation,Paths.get(mojo.installationDirectory.getPath(),driver.getId()));
    }
 else     if (directoryContainsSingleFile(extractLocation)) {
      moveFileInDirectory(extractLocation,Paths.get(mojo.installationDirectory.getPath(),driver.getFileName()));
      makeExecutable(Paths.get(mojo.installationDirectory.getPath(),driver.getFileName()));
    }
 else {
      moveAllFilesInDirectory(extractLocation,Paths.get(mojo.installationDirectory.getPath(),driver.getId()));
    }
    versionHandler.writeVersionFile(driver);
  }
 catch (  Exception e) {
    throw new InstallDriversMojoExecutionException(""String_Node_Str"" + e.getMessage(),e,mojo,driver);
  }
}",0.938483547925608
88768,"public static String directoryToString(File path){
  if (!path.exists()) {
    return path + ""String_Node_Str"" + System.lineSeparator();
  }
  if (!path.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + path);
  }
  Collection<File> files=FileUtils.listFiles(path,new RegexFileFilter(""String_Node_Str""),DirectoryFileFilter.DIRECTORY);
  if (files.size() == 0) {
    return path + ""String_Node_Str"";
  }
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(path);
  stringBuilder.append(System.lineSeparator());
  int padSize=longestPath(files,path);
  for (Iterator iterator=files.iterator(); iterator.hasNext(); ) {
    File file=(File)iterator.next();
    String relativePath=getRelativePath(file,path);
    if (iterator.hasNext()) {
      stringBuilder.append(""String_Node_Str"");
    }
 else {
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.append(StringUtils.rightPad(relativePath,padSize));
    stringBuilder.append(readableFileSize(file));
    stringBuilder.append(System.lineSeparator());
  }
  return stringBuilder.toString();
}","public static String directoryToString(File path){
  if (!path.exists()) {
    return path + ""String_Node_Str"" + System.lineSeparator();
  }
  if (!path.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + path);
  }
  Collection<File> files=FileUtils.listFiles(path,new RegexFileFilter(""String_Node_Str""),DirectoryFileFilter.DIRECTORY);
  if (files.size() == 0) {
    return path + ""String_Node_Str"" + System.lineSeparator();
  }
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(path);
  stringBuilder.append(System.lineSeparator());
  int padSize=longestPath(files,path);
  for (Iterator iterator=files.iterator(); iterator.hasNext(); ) {
    File file=(File)iterator.next();
    String relativePath=getRelativePath(file,path);
    if (iterator.hasNext()) {
      stringBuilder.append(""String_Node_Str"");
    }
 else {
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.append(StringUtils.rightPad(relativePath,padSize));
    stringBuilder.append(readableFileSize(file));
    stringBuilder.append(System.lineSeparator());
  }
  return stringBuilder.toString();
}",0.9888343010272443
88769,"private static String getRelativePath(File file,File relativeToPath){
  return file.getAbsolutePath().replaceFirst(relativeToPath.getAbsolutePath() + File.separator,""String_Node_Str"");
}","private static String getRelativePath(File file,File relativeToPath){
  return StringUtils.replaceOnce(file.getAbsolutePath(),relativeToPath.getAbsolutePath() + File.separator,""String_Node_Str"");
}",0.8981723237597912
88770,"public DriverExtractor(File tempDirectory,boolean keepDownloadedWebdrivers,Log log){
  this.tempDirectory=tempDirectory;
  this.keepDownloadedWebdrivers=keepDownloadedWebdrivers;
  this.log=log;
}","public DriverExtractor(File tempDirectory,Log log){
  this.tempDirectory=tempDirectory;
  this.log=log;
}",0.6976744186046512
88771,"public Path extractDriver(Driver driver,Path fileToExtract) throws MojoExecutionException {
  log.info(""String_Node_Str"" + fileToExtract);
  String fileExtension=FilenameUtils.getExtension(fileToExtract.toString());
  try {
switch (fileExtension) {
case ""String_Node_Str"":
      String extractedFilename=FilenameUtils.getBaseName(fileToExtract.toString());
    Path extractedFile=Paths.get(tempDirectory.getPath(),extractedFilename);
  try (FileInputStream fin=new FileInputStream(fileToExtract.toFile())){
    try (BufferedInputStream bin=new BufferedInputStream(fin)){
      try (BZip2CompressorInputStream input=new BZip2CompressorInputStream(bin)){
        FileUtils.copyInputStreamToFile(input,extractedFile.toFile());
      }
     }
   }
 if (keepDownloadedWebdrivers && !fileToExtract.toString().contains(Paths.get(""String_Node_Str"",""String_Node_Str"").toString())) {
  FileUtils.forceDelete(fileToExtract.toFile());
}
return extractDriver(driver,extractedFile);
case ""String_Node_Str"":
case ""String_Node_Str"":
Path extractToDirectory=Paths.get(tempDirectory.getPath(),FilenameUtils.getBaseName(fileToExtract.toString()));
if (!extractToDirectory.toFile().mkdirs()) {
throw new MojoExecutionException(""String_Node_Str"" + extractToDirectory + ""String_Node_Str"");
}
Pattern pattern=null;
if (null != driver.getFileMatchInside()) {
pattern=Pattern.compile(driver.getFileMatchInside());
}
try (FileInputStream fin=new FileInputStream(fileToExtract.toFile())){
try (BufferedInputStream bin=new BufferedInputStream(fin)){
try (ArchiveInputStream aiStream=new ArchiveStreamFactory().createArchiveInputStream(fileExtension,bin)){
ArchiveEntry entry;
while ((entry=aiStream.getNextEntry()) != null) {
String name=entry.getName();
if (pattern != null && entry.isDirectory()) {
}
 else if (entry.isDirectory()) {
File directory=new File(extractToDirectory.toFile(),name);
if (!directory.mkdirs()) {
throw new MojoExecutionException(""String_Node_Str"" + directory);
}
}
 else {
File file=null;
if (entry instanceof TarArchiveEntry) {
TarArchiveEntry archiveEntry=(TarArchiveEntry)entry;
if (archiveEntry.isFile()) {
  file=new File(extractToDirectory.toFile(),name);
}
}
 else if (entry instanceof ZipArchiveEntry) {
ZipArchiveEntry archiveEntry=(ZipArchiveEntry)entry;
if (!archiveEntry.isUnixSymlink()) {
  file=new File(extractToDirectory.toFile(),name);
}
}
if (pattern != null) {
if (pattern.matcher(name).matches()) {
  file=new File(extractToDirectory.toFile(),FilenameUtils.getName(name));
}
 else {
  file=null;
}
}
if (file != null) {
try (OutputStream out=new FileOutputStream(file)){
  IOUtils.copy(aiStream,out);
}
 }
}
}
if (keepDownloadedWebdrivers && !fileToExtract.toString().contains(Paths.get(""String_Node_Str"",""String_Node_Str"").toString())) {
FileUtils.forceDelete(fileToExtract.toFile());
}
return extractToDirectory;
}
 catch (ArchiveException e) {
throw new MojoExecutionException(e.getMessage(),e);
}
}
 }
 default :
throw new MojoExecutionException(""String_Node_Str"" + fileExtension);
}
}
 catch (MojoExecutionException e) {
log.info(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ driver,e);
throw e;
}
catch (Exception e) {
log.info(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ driver,e);
throw new MojoExecutionException(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ driver,e);
}
}","public Path extractDriver(Driver driver,Path fileToExtract) throws MojoExecutionException {
  log.info(""String_Node_Str"" + fileToExtract);
  String fileExtension=FilenameUtils.getExtension(fileToExtract.toString());
  try {
switch (fileExtension) {
case ""String_Node_Str"":
      String extractedFilename=FilenameUtils.getBaseName(fileToExtract.toString());
    Path extractedFile=Paths.get(tempDirectory.getPath(),extractedFilename);
  try (FileInputStream fin=new FileInputStream(fileToExtract.toFile())){
    try (BufferedInputStream bin=new BufferedInputStream(fin)){
      try (BZip2CompressorInputStream input=new BZip2CompressorInputStream(bin)){
        FileUtils.copyInputStreamToFile(input,extractedFile.toFile());
      }
     }
   }
 if (!fileToExtract.toString().contains(Paths.get(""String_Node_Str"",""String_Node_Str"").toString())) {
  FileUtils.forceDelete(fileToExtract.toFile());
}
return extractDriver(driver,extractedFile);
case ""String_Node_Str"":
case ""String_Node_Str"":
Path extractToDirectory=Paths.get(tempDirectory.getPath(),FilenameUtils.getBaseName(fileToExtract.toString()));
if (!extractToDirectory.toFile().mkdirs()) {
throw new MojoExecutionException(""String_Node_Str"" + extractToDirectory + ""String_Node_Str"");
}
Pattern pattern=null;
if (null != driver.getFileMatchInside()) {
pattern=Pattern.compile(driver.getFileMatchInside());
}
try (FileInputStream fin=new FileInputStream(fileToExtract.toFile())){
try (BufferedInputStream bin=new BufferedInputStream(fin)){
try (ArchiveInputStream aiStream=new ArchiveStreamFactory().createArchiveInputStream(fileExtension,bin)){
ArchiveEntry entry;
while ((entry=aiStream.getNextEntry()) != null) {
String name=entry.getName();
if (pattern != null && entry.isDirectory()) {
}
 else if (entry.isDirectory()) {
File directory=new File(extractToDirectory.toFile(),name);
if (!directory.mkdirs()) {
throw new MojoExecutionException(""String_Node_Str"" + directory);
}
}
 else {
File file=null;
if (entry instanceof TarArchiveEntry) {
TarArchiveEntry archiveEntry=(TarArchiveEntry)entry;
if (archiveEntry.isFile()) {
  file=new File(extractToDirectory.toFile(),name);
}
}
 else if (entry instanceof ZipArchiveEntry) {
ZipArchiveEntry archiveEntry=(ZipArchiveEntry)entry;
if (!archiveEntry.isUnixSymlink()) {
  file=new File(extractToDirectory.toFile(),name);
}
}
if (pattern != null) {
if (pattern.matcher(name).matches()) {
  file=new File(extractToDirectory.toFile(),FilenameUtils.getName(name));
}
 else {
  file=null;
}
}
if (file != null) {
try (OutputStream out=new FileOutputStream(file)){
  IOUtils.copy(aiStream,out);
}
 }
}
}
if (!fileToExtract.toString().contains(Paths.get(""String_Node_Str"",""String_Node_Str"").toString())) {
FileUtils.forceDelete(fileToExtract.toFile());
}
return extractToDirectory;
}
 catch (ArchiveException e) {
throw new MojoExecutionException(e.getMessage(),e);
}
}
 }
 default :
throw new MojoExecutionException(""String_Node_Str"" + fileExtension);
}
}
 catch (MojoExecutionException e) {
log.info(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ driver,e);
throw e;
}
catch (Exception e) {
log.info(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ driver,e);
throw new MojoExecutionException(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ driver,e);
}
}",0.8035714285714286
88772,"public void execute() throws MojoExecutionException {
  if (skip) {
    getLog().info(""String_Node_Str"");
  }
 else {
    Repository repository=Repository.load(repositoryUrl,getProxyFromSettings(settings,proxyId));
    getLog().info(""String_Node_Str"" + Utils.quote(installationDirectory));
    if (drivers.isEmpty()) {
      getLog().info(""String_Node_Str"");
      drivers=repository.getLatestDrivers();
    }
 else {
      getLog().info(""String_Node_Str"");
    }
    DriverDownloader driverDownloader=new DriverDownloader(settings,proxyId,getLog());
    DriverExtractor driverExtractor=new DriverExtractor(tempDirectory,keepDownloadedWebdrivers,getLog());
    DriverInstaller driverInstaller=new DriverInstaller(installationDirectory,getLog());
    cleanupTempDirectory();
    for (    Driver _driver : drivers) {
      Driver driver=repository.enrichDriver(_driver);
      if (driver == null) {
        continue;
      }
      getLog().info(driver.getId() + ""String_Node_Str"" + driver.getVersion());
      if (driverInstaller.needInstallation(driver)) {
        File downloadPath=keepDownloadedWebdrivers ? Paths.get(cacheDirectory.getPath(),driver.getIdWithVersion()).toFile() : tempDirectory;
        Path downloadLocation=driverDownloader.downloadFile(driver,downloadPath);
        Path extractLocation=driverExtractor.extractDriver(driver,downloadLocation);
        driverInstaller.install(driver,extractLocation);
        cleanupTempDirectory();
      }
 else {
        getLog().info(""String_Node_Str"");
      }
    }
  }
}","public void execute() throws MojoExecutionException {
  if (skip) {
    getLog().info(""String_Node_Str"");
  }
 else {
    Repository repository=Repository.load(repositoryUrl,getProxyFromSettings(settings,proxyId));
    getLog().info(""String_Node_Str"" + Utils.quote(installationDirectory));
    if (drivers.isEmpty()) {
      getLog().info(""String_Node_Str"");
      drivers=repository.getLatestDrivers();
    }
 else {
      getLog().info(""String_Node_Str"");
    }
    DriverDownloader driverDownloader=new DriverDownloader(settings,proxyId,getLog());
    DriverExtractor driverExtractor=new DriverExtractor(tempDirectory,getLog());
    DriverInstaller driverInstaller=new DriverInstaller(installationDirectory,getLog());
    cleanupTempDirectory();
    for (    Driver _driver : drivers) {
      Driver driver=repository.enrichDriver(_driver);
      if (driver == null) {
        continue;
      }
      getLog().info(driver.getId() + ""String_Node_Str"" + driver.getVersion());
      if (driverInstaller.needInstallation(driver)) {
        File downloadPath=keepDownloadedWebdrivers ? Paths.get(cacheDirectory.getPath(),driver.getIdWithVersion()).toFile() : tempDirectory;
        Path downloadLocation=driverDownloader.downloadFile(driver,downloadPath);
        Path extractLocation=driverExtractor.extractDriver(driver,downloadLocation);
        driverInstaller.install(driver,extractLocation);
        cleanupTempDirectory();
      }
 else {
        getLog().info(""String_Node_Str"");
      }
    }
  }
}",0.9917627677100496
88773,"public static String debugInfo(InstallDriversMojo mojo,Driver driver){
  return System.lineSeparator() + System.lineSeparator() + ""String_Node_Str""+ driver+ System.lineSeparator()+ System.lineSeparator()+ ""String_Node_Str""+ System.lineSeparator()+ directoryToString(mojo.installationDirectory)+ System.lineSeparator()+ ""String_Node_Str""+ System.lineSeparator()+ directoryToString(mojo.cacheDirectory)+ System.lineSeparator()+ ""String_Node_Str""+ System.lineSeparator()+ directoryToString(mojo.tempDirectory);
}","public static String debugInfo(InstallDriversMojo mojo,Driver driver){
  return System.lineSeparator() + System.lineSeparator() + ""String_Node_Str""+ driver+ System.lineSeparator()+ System.lineSeparator()+ ""String_Node_Str""+ System.lineSeparator()+ directoryToString(mojo.cacheDirectory)+ System.lineSeparator()+ ""String_Node_Str""+ System.lineSeparator()+ directoryToString(mojo.tempDirectory)+ System.lineSeparator()+ ""String_Node_Str""+ System.lineSeparator()+ directoryToString(mojo.installationDirectory);
}",0.9587426326129664
88774,"public static String directoryToString(File path){
  if (!path.exists()) {
    return quote(path) + ""String_Node_Str"" + System.lineSeparator();
  }
  if (!path.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + path);
  }
  Collection<File> files=FileUtils.listFiles(path,new RegexFileFilter(""String_Node_Str""),DirectoryFileFilter.DIRECTORY);
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(path);
  stringBuilder.append(System.lineSeparator());
  int padSize=longestPath(files,path);
  for (Iterator iterator=files.iterator(); iterator.hasNext(); ) {
    File file=(File)iterator.next();
    String relativePath=getRelativePath(file,path);
    if (iterator.hasNext()) {
      stringBuilder.append(""String_Node_Str"");
    }
 else {
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.append(StringUtils.rightPad(relativePath,padSize));
    stringBuilder.append(readableFileSize(file));
    stringBuilder.append(System.lineSeparator());
  }
  return stringBuilder.toString();
}","public static String directoryToString(File path){
  if (!path.exists()) {
    return path + ""String_Node_Str"" + System.lineSeparator();
  }
  if (!path.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + path);
  }
  Collection<File> files=FileUtils.listFiles(path,new RegexFileFilter(""String_Node_Str""),DirectoryFileFilter.DIRECTORY);
  if (files.size() == 0) {
    return path + ""String_Node_Str"";
  }
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(path);
  stringBuilder.append(System.lineSeparator());
  int padSize=longestPath(files,path);
  for (Iterator iterator=files.iterator(); iterator.hasNext(); ) {
    File file=(File)iterator.next();
    String relativePath=getRelativePath(file,path);
    if (iterator.hasNext()) {
      stringBuilder.append(""String_Node_Str"");
    }
 else {
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.append(StringUtils.rightPad(relativePath,padSize));
    stringBuilder.append(readableFileSize(file));
    stringBuilder.append(System.lineSeparator());
  }
  return stringBuilder.toString();
}",0.9614491407338596
88775,"public void install(Driver driver,Path extractLocation) throws MojoExecutionException {
  if (directoryContainsSingleDirectory(extractLocation)) {
    moveDirectoryInDirectory(extractLocation,Paths.get(installationDirectory.getPath(),driver.getId()));
  }
 else   if (directoryContainsSingleFile(extractLocation)) {
    moveFileInDirectory(extractLocation,Paths.get(installationDirectory.getPath(),driver.getFileName()));
    makeExecutable(installationDirectory + ""String_Node_Str"" + driver.getFileName());
  }
 else {
    moveAllFilesInDirectory(extractLocation,Paths.get(installationDirectory.getPath(),driver.getId()));
  }
  versionHandler.writeVersionFile(driver);
}","public void install(Driver driver,Path extractLocation) throws MojoExecutionException {
  if (directoryContainsSingleDirectory(extractLocation)) {
    moveDirectoryInDirectory(extractLocation,Paths.get(installationDirectory.getPath(),driver.getId()));
  }
 else   if (directoryContainsSingleFile(extractLocation)) {
    moveFileInDirectory(extractLocation,Paths.get(installationDirectory.getPath(),driver.getFileName()));
    makeExecutable(Paths.get(installationDirectory.getPath(),driver.getFileName()));
  }
 else {
    moveAllFilesInDirectory(extractLocation,Paths.get(installationDirectory.getPath(),driver.getId()));
  }
  versionHandler.writeVersionFile(driver);
}",0.6895011169024572
88776,"private static void makeExecutable(String path){
  File file=new File(path);
  if (file.exists() && !file.canExecute()) {
    file.setExecutable(true);
  }
}","private static void makeExecutable(Path path){
  File file=path.toFile();
  if (file.exists() && !file.canExecute()) {
    file.setExecutable(true);
  }
}",0.9260450160771704
88777,"private File getVersionFile(Driver driver){
  return new File(installationDirectory + ""String_Node_Str"" + driver.getId()+ ""String_Node_Str"");
}","private File getVersionFile(Driver driver){
  return Paths.get(installationDirectory.getPath(),driver.getId() + ""String_Node_Str"").toFile();
}",0.7228070175438597
88778,"public Path downloadFile(Driver driver,File downloadPath) throws MojoExecutionException {
  String url=driver.getUrl();
  Path downloadLocation=Paths.get(downloadPath.getPath(),driver.getFilenameFromUrl());
  File fileToDownload=downloadLocation.toFile();
  if (fileToDownload.exists()) {
    mojo.getLog().info(""String_Node_Str"" + downloadLocation);
  }
 else {
    mojo.getLog().info(""String_Node_Str"" + url + ""String_Node_Str""+ downloadLocation);
    HttpClientBuilder httpClientBuilder=prepareHttpClientBuilderWithTimeoutsAndProxySettings(proxySettings);
    httpClientBuilder.setRetryHandler(new DefaultHttpRequestRetryHandler(FILE_DOWNLOAD_RETRY_ATTEMPTS,true));
    try (CloseableHttpClient httpClient=httpClientBuilder.build()){
      try (CloseableHttpResponse fileDownloadResponse=httpClient.execute(new HttpGet(url))){
        HttpEntity remoteFileStream=fileDownloadResponse.getEntity();
        copyInputStreamToFile(remoteFileStream.getContent(),fileToDownload);
      }
     }
 catch (    IOException e) {
      mojo.getLog().info(""String_Node_Str"" + e.getCause() + Utils.debugInfo(mojo,driver),e);
      throw new InstallDriversMojoExecutionException(""String_Node_Str"" + e.getCause(),e,mojo,driver);
    }
  }
  return downloadLocation;
}","public Path downloadFile(Driver driver,File downloadPath) throws MojoExecutionException {
  String url=driver.getUrl();
  Path downloadLocation=Paths.get(downloadPath.getPath(),driver.getFilenameFromUrl());
  File fileToDownload=downloadLocation.toFile();
  if (fileToDownload.exists()) {
    mojo.getLog().info(""String_Node_Str"" + downloadLocation);
  }
 else {
    mojo.getLog().info(""String_Node_Str"" + url + ""String_Node_Str""+ downloadLocation);
    HttpClientBuilder httpClientBuilder=prepareHttpClientBuilderWithTimeoutsAndProxySettings(proxySettings);
    httpClientBuilder.setRetryHandler(new DefaultHttpRequestRetryHandler(FILE_DOWNLOAD_RETRY_ATTEMPTS,true));
    try (CloseableHttpClient httpClient=httpClientBuilder.build()){
      try (CloseableHttpResponse fileDownloadResponse=httpClient.execute(new HttpGet(url))){
        HttpEntity remoteFileStream=fileDownloadResponse.getEntity();
        copyInputStreamToFile(remoteFileStream.getContent(),fileToDownload);
      }
     }
 catch (    IOException e) {
      throw new InstallDriversMojoExecutionException(""String_Node_Str"" + e.getCause(),e,mojo,driver);
    }
  }
  return downloadLocation;
}",0.925879917184265
88779,"public Path extractDriver(Driver driver,Path fileToExtract) throws MojoExecutionException {
  mojo.getLog().info(""String_Node_Str"" + fileToExtract + ""String_Node_Str"");
  String fileExtension=FilenameUtils.getExtension(fileToExtract.toString());
  try {
switch (fileExtension) {
case ""String_Node_Str"":
      String extractedFilename=FilenameUtils.getBaseName(fileToExtract.toString());
    Path extractedFile=Paths.get(mojo.tempDirectory.getPath(),extractedFilename);
  try (FileInputStream fin=new FileInputStream(fileToExtract.toFile())){
    try (BufferedInputStream bin=new BufferedInputStream(fin)){
      try (BZip2CompressorInputStream input=new BZip2CompressorInputStream(bin)){
        FileUtils.copyInputStreamToFile(input,extractedFile.toFile());
      }
     }
   }
 if (!fileToExtract.toString().contains(Paths.get(""String_Node_Str"",""String_Node_Str"").toString())) {
  FileUtils.forceDelete(fileToExtract.toFile());
}
return extractDriver(driver,extractedFile);
case ""String_Node_Str"":
case ""String_Node_Str"":
Path extractToDirectory=Paths.get(mojo.tempDirectory.getPath(),FilenameUtils.getBaseName(fileToExtract.toString()));
if (!extractToDirectory.toFile().mkdirs()) {
throw new RuntimeException(""String_Node_Str"" + extractToDirectory + ""String_Node_Str"");
}
Pattern pattern=null;
if (null != driver.getFileMatchInside()) {
pattern=Pattern.compile(driver.getFileMatchInside());
}
try (FileInputStream fin=new FileInputStream(fileToExtract.toFile())){
try (BufferedInputStream bin=new BufferedInputStream(fin)){
try (ArchiveInputStream aiStream=new ArchiveStreamFactory().createArchiveInputStream(fileExtension,bin)){
ArchiveEntry entry;
while ((entry=aiStream.getNextEntry()) != null) {
String name=entry.getName();
if (pattern != null && entry.isDirectory()) {
}
 else if (entry.isDirectory()) {
File directory=new File(extractToDirectory.toFile(),name);
if (!directory.mkdirs()) {
throw new RuntimeException(""String_Node_Str"" + directory);
}
}
 else {
File file=null;
if (entry instanceof TarArchiveEntry) {
TarArchiveEntry archiveEntry=(TarArchiveEntry)entry;
if (archiveEntry.isFile()) {
  file=new File(extractToDirectory.toFile(),name);
}
}
 else if (entry instanceof ZipArchiveEntry) {
ZipArchiveEntry archiveEntry=(ZipArchiveEntry)entry;
if (!archiveEntry.isUnixSymlink()) {
  file=new File(extractToDirectory.toFile(),name);
}
}
if (pattern != null) {
if (pattern.matcher(name).matches()) {
  file=new File(extractToDirectory.toFile(),FilenameUtils.getName(name));
}
 else {
  file=null;
}
}
if (file != null) {
try (OutputStream out=new FileOutputStream(file)){
  IOUtils.copy(aiStream,out);
}
 }
}
}
if (!fileToExtract.toString().contains(Paths.get(""String_Node_Str"",""String_Node_Str"").toString())) {
FileUtils.forceDelete(fileToExtract.toFile());
}
return extractToDirectory;
}
 }
 }
 default :
throw new UnsupportedOperationException(""String_Node_Str"" + fileExtension);
}
}
 catch (Exception e) {
mojo.getLog().info(""String_Node_Str"" + e.getMessage() + Utils.debugInfo(mojo,driver),e);
throw new InstallDriversMojoExecutionException(""String_Node_Str"" + e.getMessage(),e,mojo,driver);
}
}","public Path extractDriver(Driver driver,Path fileToExtract) throws MojoExecutionException {
  mojo.getLog().info(""String_Node_Str"" + fileToExtract + ""String_Node_Str"");
  String fileExtension=FilenameUtils.getExtension(fileToExtract.toString());
  try {
switch (fileExtension) {
case ""String_Node_Str"":
      String extractedFilename=FilenameUtils.getBaseName(fileToExtract.toString());
    Path extractedFile=Paths.get(mojo.tempDirectory.getPath(),extractedFilename);
  try (FileInputStream fin=new FileInputStream(fileToExtract.toFile())){
    try (BufferedInputStream bin=new BufferedInputStream(fin)){
      try (BZip2CompressorInputStream input=new BZip2CompressorInputStream(bin)){
        FileUtils.copyInputStreamToFile(input,extractedFile.toFile());
      }
     }
   }
 if (!fileToExtract.toString().contains(Paths.get(""String_Node_Str"",""String_Node_Str"").toString())) {
  FileUtils.forceDelete(fileToExtract.toFile());
}
return extractDriver(driver,extractedFile);
case ""String_Node_Str"":
case ""String_Node_Str"":
Path extractToDirectory=Paths.get(mojo.tempDirectory.getPath(),FilenameUtils.getBaseName(fileToExtract.toString()));
if (!extractToDirectory.toFile().mkdirs()) {
throw new RuntimeException(""String_Node_Str"" + extractToDirectory + ""String_Node_Str"");
}
Pattern pattern=null;
if (null != driver.getFileMatchInside()) {
pattern=Pattern.compile(driver.getFileMatchInside());
}
try (FileInputStream fin=new FileInputStream(fileToExtract.toFile())){
try (BufferedInputStream bin=new BufferedInputStream(fin)){
try (ArchiveInputStream aiStream=new ArchiveStreamFactory().createArchiveInputStream(fileExtension,bin)){
ArchiveEntry entry;
while ((entry=aiStream.getNextEntry()) != null) {
String name=entry.getName();
if (pattern != null && entry.isDirectory()) {
}
 else if (entry.isDirectory()) {
File directory=new File(extractToDirectory.toFile(),name);
if (!directory.mkdirs()) {
throw new RuntimeException(""String_Node_Str"" + directory);
}
}
 else {
File file=null;
if (entry instanceof TarArchiveEntry) {
TarArchiveEntry archiveEntry=(TarArchiveEntry)entry;
if (archiveEntry.isFile()) {
  file=new File(extractToDirectory.toFile(),name);
}
}
 else if (entry instanceof ZipArchiveEntry) {
ZipArchiveEntry archiveEntry=(ZipArchiveEntry)entry;
if (!archiveEntry.isUnixSymlink()) {
  file=new File(extractToDirectory.toFile(),name);
}
}
if (pattern != null) {
if (pattern.matcher(name).matches()) {
  file=new File(extractToDirectory.toFile(),FilenameUtils.getName(name));
}
 else {
  file=null;
}
}
if (file != null) {
try (OutputStream out=new FileOutputStream(file)){
  IOUtils.copy(aiStream,out);
}
 }
}
}
if (!fileToExtract.toString().contains(Paths.get(""String_Node_Str"",""String_Node_Str"").toString())) {
FileUtils.forceDelete(fileToExtract.toFile());
}
return extractToDirectory;
}
 }
 }
 default :
throw new UnsupportedOperationException(""String_Node_Str"" + fileExtension);
}
}
 catch (Exception e) {
throw new InstallDriversMojoExecutionException(""String_Node_Str"" + e.getMessage(),e,mojo,driver);
}
}",0.9705451586655818
88780,"public static String directoryToString(File path){
  if (!path.exists()) {
    throw new IllegalArgumentException(""String_Node_Str"" + path);
  }
  if (!path.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + path);
  }
  Collection<File> files=FileUtils.listFiles(path,new RegexFileFilter(""String_Node_Str""),DirectoryFileFilter.DIRECTORY);
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(path);
  stringBuilder.append(System.lineSeparator());
  int padSize=longestPath(files,path);
  for (Iterator iterator=files.iterator(); iterator.hasNext(); ) {
    File file=(File)iterator.next();
    String relativePath=getRelativePath(file,path);
    if (iterator.hasNext()) {
      stringBuilder.append(""String_Node_Str"");
    }
 else {
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.append(StringUtils.rightPad(relativePath,padSize));
    stringBuilder.append(readableFileSize(file));
    stringBuilder.append(System.lineSeparator());
  }
  return stringBuilder.toString();
}","public static String directoryToString(File path){
  if (!path.exists()) {
    return ""String_Node_Str"" + quote(path) + ""String_Node_Str"";
  }
  if (!path.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + path);
  }
  Collection<File> files=FileUtils.listFiles(path,new RegexFileFilter(""String_Node_Str""),DirectoryFileFilter.DIRECTORY);
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(path);
  stringBuilder.append(System.lineSeparator());
  int padSize=longestPath(files,path);
  for (Iterator iterator=files.iterator(); iterator.hasNext(); ) {
    File file=(File)iterator.next();
    String relativePath=getRelativePath(file,path);
    if (iterator.hasNext()) {
      stringBuilder.append(""String_Node_Str"");
    }
 else {
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.append(StringUtils.rightPad(relativePath,padSize));
    stringBuilder.append(readableFileSize(file));
    stringBuilder.append(System.lineSeparator());
  }
  return stringBuilder.toString();
}",0.9625719769673704
88781,"public static String debugInfo(InstallDriversMojo mojo,Driver driver){
  return System.lineSeparator() + ""String_Node_Str"" + driver+ System.lineSeparator()+ ""String_Node_Str""+ directoryToString(mojo.installationDirectory)+ ""String_Node_Str""+ directoryToString(mojo.cacheDirectory)+ ""String_Node_Str""+ directoryToString(mojo.tempDirectory);
}","public static String debugInfo(InstallDriversMojo mojo,Driver driver){
  return System.lineSeparator() + System.lineSeparator() + ""String_Node_Str""+ driver+ System.lineSeparator()+ System.lineSeparator()+ ""String_Node_Str""+ System.lineSeparator()+ directoryToString(mojo.installationDirectory)+ System.lineSeparator()+ ""String_Node_Str""+ System.lineSeparator()+ directoryToString(mojo.cacheDirectory)+ System.lineSeparator()+ ""String_Node_Str""+ System.lineSeparator()+ directoryToString(mojo.tempDirectory);
}",0.8
88782,"public static String directoryToString(File path){
  if (!path.exists()) {
    return ""String_Node_Str"" + quote(path) + ""String_Node_Str"";
  }
  if (!path.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + path);
  }
  Collection<File> files=FileUtils.listFiles(path,new RegexFileFilter(""String_Node_Str""),DirectoryFileFilter.DIRECTORY);
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(path);
  stringBuilder.append(System.lineSeparator());
  int padSize=longestPath(files,path);
  for (Iterator iterator=files.iterator(); iterator.hasNext(); ) {
    File file=(File)iterator.next();
    String relativePath=getRelativePath(file,path);
    if (iterator.hasNext()) {
      stringBuilder.append(""String_Node_Str"");
    }
 else {
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.append(StringUtils.rightPad(relativePath,padSize));
    stringBuilder.append(readableFileSize(file));
    stringBuilder.append(System.lineSeparator());
  }
  return stringBuilder.toString();
}","public static String directoryToString(File path){
  if (!path.exists()) {
    return quote(path) + ""String_Node_Str"" + System.lineSeparator();
  }
  if (!path.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + path);
  }
  Collection<File> files=FileUtils.listFiles(path,new RegexFileFilter(""String_Node_Str""),DirectoryFileFilter.DIRECTORY);
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(path);
  stringBuilder.append(System.lineSeparator());
  int padSize=longestPath(files,path);
  for (Iterator iterator=files.iterator(); iterator.hasNext(); ) {
    File file=(File)iterator.next();
    String relativePath=getRelativePath(file,path);
    if (iterator.hasNext()) {
      stringBuilder.append(""String_Node_Str"");
    }
 else {
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.append(StringUtils.rightPad(relativePath,padSize));
    stringBuilder.append(readableFileSize(file));
    stringBuilder.append(System.lineSeparator());
  }
  return stringBuilder.toString();
}",0.967896502156205
88783,"public String filesInInstallationDirectoryAsString(){
  String installedFiles=""String_Node_Str"";
  for (  File file : installationDirectory.listFiles()) {
    installedFiles+=""String_Node_Str"" + file.getName() + System.lineSeparator();
  }
  return ""String_Node_Str"" + installedFiles;
}","public String filesInInstallationDirectoryAsString(){
  String installedFiles=""String_Node_Str"";
  for (  File file : installationDirectory.listFiles()) {
    installedFiles+=""String_Node_Str"" + file.getName() + System.lineSeparator();
  }
  return ""String_Node_Str"" + System.lineSeparator() + installedFiles;
}",0.9581239530988276
88784,"private boolean isInstalled(Driver driver){
  Path path=Paths.get(installationDirectory.getPath(),driver.getId());
  return path.toFile().exists();
}","private boolean isInstalled(Driver driver){
  Path path=Paths.get(installationDirectory.getPath(),driver.getFileName());
  return path.toFile().exists();
}",0.9671052631578948
88785,"public boolean isSameVersion(Driver driver) throws MojoExecutionException {
  try {
    String savedVersion=org.apache.commons.io.FileUtils.readFileToString(getVersionFile(driver));
    String currentVersion=createVersionString(driver);
    return savedVersion.equals(currentVersion);
  }
 catch (  IOException e) {
    throw new MojoExecutionException(e.getMessage(),e);
  }
}","public boolean isSameVersion(Driver driver) throws MojoExecutionException {
  try {
    File versionFile=getVersionFile(driver);
    if (!versionFile.exists()) {
      return false;
    }
    String savedVersion=org.apache.commons.io.FileUtils.readFileToString(versionFile);
    String currentVersion=createVersionString(driver);
    return savedVersion.equals(currentVersion);
  }
 catch (  IOException e) {
    throw new MojoExecutionException(e.getMessage(),e);
  }
}",0.8382526564344747
88786,"public void execute() throws MojoExecutionException {
  tempDirectory=project.getBuild().getDirectory() + ""String_Node_Str"";
  if (skip) {
    getLog().info(""String_Node_Str"");
  }
 else {
    repository=Repository.load(repositoryUrl);
    getLog().info(""String_Node_Str"" + quote(installationDirectory));
    if (drivers.isEmpty()) {
      getLog().info(""String_Node_Str"");
      drivers=repository.getLatestDrivers();
    }
 else {
      getLog().info(""String_Node_Str"");
    }
    for (    Driver driver : drivers) {
      driver=repository.getDriver(driver);
      getLog().info(driver.getId() + ""String_Node_Str"" + driver.getVersion());
      if (driverIsNotInstalled(driver) || driverVersionIsNew(driver)) {
        cleanup();
        downloadDriver(driver);
        if (downloadedDriverIsZipped(driver)) {
          unzipDriver(driver);
        }
        if (StringUtils.isBlank(driver.getChecksum())) {
          printChecksumMissingWarning(driver);
        }
 else {
          verifyChecksum(driver);
          installDriver(driver);
        }
        cleanup();
      }
    }
  }
}","public void execute() throws MojoExecutionException {
  tempDirectory=project.getBuild().getDirectory() + ""String_Node_Str"";
  if (skip) {
    getLog().info(""String_Node_Str"");
  }
 else {
    repository=Repository.load(repositoryUrl);
    getLog().info(""String_Node_Str"" + quote(installationDirectory));
    if (drivers.isEmpty()) {
      getLog().info(""String_Node_Str"");
      drivers=repository.getLatestDrivers();
    }
 else {
      getLog().info(""String_Node_Str"");
    }
    for (    Driver driver : drivers) {
      driver=repository.getDriver(driver);
      if (driver == null) {
        continue;
      }
      getLog().info(driver.getId() + ""String_Node_Str"" + driver.getVersion());
      if (driverIsNotInstalled(driver) || driverVersionIsNew(driver)) {
        cleanup();
        downloadDriver(driver);
        if (downloadedDriverIsZipped(driver)) {
          unzipDriver(driver);
        }
        if (StringUtils.isBlank(driver.getChecksum())) {
          printChecksumMissingWarning(driver);
        }
 else {
          verifyChecksum(driver);
          installDriver(driver);
        }
        cleanup();
      }
 else {
        getLog().info(""String_Node_Str"");
      }
    }
  }
}",0.9511343804537522
88787,"public String getLatestDriverVersion(String driverId){
  List<Driver> allDriverVersions=select(drivers,having(on(Driver.class).getId(),is(driverId)));
  Driver latestDriver=selectMax(allDriverVersions,on(Driver.class).getComparableVersion());
  return latestDriver.getVersion();
}","public String getLatestDriverVersion(String driverId){
  List<Driver> allDriverVersions=select(drivers,having(on(Driver.class).getId(),is(driverId)));
  Driver latestDriver=selectMax(allDriverVersions,on(Driver.class).getComparableVersion());
  if (latestDriver == null) {
    return null;
  }
  return latestDriver.getVersion();
}",0.8117839607201309
88788,"public Driver getDriver(Driver driver) throws MojoExecutionException {
  if (isBlank(driver.getName())) {
    throw new MojoExecutionException(""String_Node_Str"" + driver.toString());
  }
  if (!isBlank(driver.getUrl())) {
    return driver;
  }
  if (isBlank(driver.getPlatform())) {
    String platform;
    if (isMac()) {
      platform=""String_Node_Str"";
    }
 else     if (isLinux()) {
      platform=""String_Node_Str"";
    }
 else {
      platform=""String_Node_Str"";
    }
    driver.setPlatform(platform);
  }
  if (isBlank(driver.getBit())) {
    String bit;
    if (isLinux() && is64Bit()) {
      bit=""String_Node_Str"";
    }
 else {
      bit=""String_Node_Str"";
    }
    driver.setBit(bit);
  }
  if (isBlank(driver.getVersion())) {
    driver.setVersion(getLatestDriverVersion(driver.getId()));
  }
  try {
    return getDrivers(driver.getName(),driver.getPlatform(),driver.getBit(),driver.getVersion()).get(0);
  }
 catch (  IndexOutOfBoundsException ex) {
    throw new MojoExecutionException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ driver.toString());
  }
}","public Driver getDriver(Driver driver) throws MojoExecutionException {
  if (isBlank(driver.getName())) {
    throw new MojoExecutionException(""String_Node_Str"" + driver.toString());
  }
  if (!isBlank(driver.getUrl())) {
    return driver;
  }
  if (isBlank(driver.getPlatform())) {
    String platform;
    if (isMac()) {
      platform=""String_Node_Str"";
    }
 else     if (isLinux()) {
      platform=""String_Node_Str"";
    }
 else {
      platform=""String_Node_Str"";
    }
    driver.setPlatform(platform);
  }
  if (isBlank(driver.getBit())) {
    String bit;
    if (isLinux() && is64Bit()) {
      bit=""String_Node_Str"";
    }
 else {
      bit=""String_Node_Str"";
    }
    driver.setBit(bit);
  }
  if (isBlank(driver.getVersion())) {
    driver.setVersion(getLatestDriverVersion(driver.getId()));
  }
  try {
    return getDrivers(driver.getName(),driver.getPlatform(),driver.getBit(),driver.getVersion()).get(0);
  }
 catch (  IndexOutOfBoundsException ex) {
    return null;
  }
}",0.92680608365019
88789,"/** 
 * Create a new instance of the GridView.
 */
public GridView(){
  this.getChildren().add(gridBackground);
  this.getChildren().add(rootPane);
  guidelinePane.setMouseTransparent(true);
  this.getChildren().add(guidelinePane);
  gridModel.addListener((obs,oldValue,newValue) -> {
    if (newValue != null) {
      initGridModel();
    }
  }
);
  updateCellBorder();
  cellBorderWidth.addListener((obs,oldValue,newValue) -> updateCellBorder());
  cellBorderColor.addListener((obs,oldValue,newValue) -> updateCellBorder());
}","/** 
 * Create a new instance of the GridView.
 */
public GridView(){
  this.setMinWidth(0);
  this.setMinHeight(0);
  this.getChildren().add(gridBackground);
  this.getChildren().add(rootPane);
  guidelinePane.setMouseTransparent(true);
  this.getChildren().add(guidelinePane);
  gridModel.addListener((obs,oldValue,newValue) -> {
    if (newValue != null) {
      initGridModel();
    }
  }
);
  updateCellBorder();
  cellBorderWidth.addListener((obs,oldValue,newValue) -> updateCellBorder());
  cellBorderColor.addListener((obs,oldValue,newValue) -> updateCellBorder());
}",0.957388939256573
88790,"@Override protected void doInit() throws ResourceException {
  super.doInit();
  boolean postMethod=getMethod().equals(Method.POST);
  this.query=getQueryMd(!postMethod);
  this.perPage=getAttr(Integer.class,""String_Node_Str"");
  badRequestIfNot(perPage == null || perPage > 0,""String_Node_Str"");
  badRequestIfNot(perPage <= query.getRowsLimit(),""String_Node_Str"",query.getRowsLimit());
  this.page=getAttr(Integer.class,""String_Node_Str"");
  badRequestIfNot(page == null || page > 0,""String_Node_Str"");
  badRequestIfNot((page == null && perPage == null) || (page != null && perPage != null),""String_Node_Str"");
}","@Override protected void doInit() throws ResourceException {
  super.doInit();
  boolean postMethod=getMethod().equals(Method.POST);
  this.query=getQueryMd(!postMethod);
  this.perPage=getAttr(Integer.class,""String_Node_Str"");
  badRequestIfNot(perPage == null || (perPage > 0 && perPage <= query.getRowsLimit()),""String_Node_Str"",query.getRowsLimit());
  this.page=getAttr(Integer.class,""String_Node_Str"");
  badRequestIfNot(page == null || page > 0,""String_Node_Str"");
}",0.5477941176470589
88791,"public void load(TableFactory tf,TableMaps toload){
  Set<TableId> old=tfs.get(tf);
  if (toload.tfs.get(tf) != null) {
    tfs.put(tf,toload.tfs.get(tf));
  }
 else {
    tfs.remove(tf);
  }
  if (tfs.containsKey(tf)) {
    for (    TableId id : tfs.get(tf)) {
      qf.removeQueries(id);
      if (old != null && old.contains(id)) {
        if (toload.whitelist.containsKey(id)) {
          if (this.whitelist.containsKey(id)) {
            log.info(String.format(""String_Node_Str"",id));
          }
 else {
            log.info(String.format(""String_Node_Str"",id));
            this.blacklist.remove(id);
          }
          this.whitelist.put(id,toload.whitelist.get(id));
        }
 else {
          if (this.blacklist.containsKey(id)) {
            log.info(String.format(""String_Node_Str"",id));
          }
 else {
            log.warn(String.format(""String_Node_Str"",id));
            this.whitelist.remove(id);
          }
          this.blacklist.put(id,toload.blacklist.get(id));
        }
      }
 else {
        if (toload.whitelist.containsKey(id)) {
          this.whitelist.put(id,toload.whitelist.get(id));
          log.info(String.format(""String_Node_Str"",id));
        }
 else {
          this.blacklist.put(id,toload.blacklist.get(id));
          log.warn(String.format(""String_Node_Str"",id));
        }
      }
    }
  }
  if (old != null) {
    for (    TableId id : old) {
      if (!tfs.containsKey(tf) || !tfs.get(tf).contains(id)) {
        qf.removeQueries(id);
        if (this.whitelist.remove(id) != null) {
          log.warn(String.format(""String_Node_Str"",id));
        }
 else {
          this.blacklist.remove(id);
          log.warn(String.format(""String_Node_Str"",id));
        }
      }
    }
  }
}","public void load(TableFactory tf,TableMaps toload){
  Set<TableId> old=tfs.get(tf);
  if (toload.tfs.get(tf) != null) {
    tfs.put(tf,toload.tfs.get(tf));
  }
 else {
    tfs.remove(tf);
  }
  if (tfs.containsKey(tf)) {
    for (    TableId id : tfs.get(tf)) {
      if (old != null) {
        for (        TableId oldid : old) {
          if (oldid.equals(id) && tables.whitelist.containsKey(oldid)) {
            ServerTable oldTable=tables.whitelist.get(oldid);
            ServerTable st=toload.whitelist.get(oldid);
            if (st.isSame(oldTable)) {
              break;
            }
 else {
              qf.removeQueries(id);
            }
          }
        }
      }
 else {
        qf.removeQueries(id);
      }
      if (old != null && old.contains(id)) {
        if (toload.whitelist.containsKey(id)) {
          if (this.whitelist.containsKey(id)) {
            log.info(String.format(""String_Node_Str"",id));
          }
 else {
            log.info(String.format(""String_Node_Str"",id));
            this.blacklist.remove(id);
          }
          this.whitelist.put(id,toload.whitelist.get(id));
        }
 else {
          if (this.blacklist.containsKey(id)) {
            log.info(String.format(""String_Node_Str"",id));
          }
 else {
            log.warn(String.format(""String_Node_Str"",id));
            this.whitelist.remove(id);
          }
          this.blacklist.put(id,toload.blacklist.get(id));
        }
      }
 else {
        if (toload.whitelist.containsKey(id)) {
          this.whitelist.put(id,toload.whitelist.get(id));
          log.info(String.format(""String_Node_Str"",id));
        }
 else {
          this.blacklist.put(id,toload.blacklist.get(id));
          log.warn(String.format(""String_Node_Str"",id));
        }
      }
    }
  }
  if (old != null) {
    for (    TableId id : old) {
      if (!tfs.containsKey(tf) || !tfs.get(tf).contains(id)) {
        qf.removeQueries(id);
        if (this.whitelist.remove(id) != null) {
          log.warn(String.format(""String_Node_Str"",id));
        }
 else {
          this.blacklist.remove(id);
          log.warn(String.format(""String_Node_Str"",id));
        }
      }
    }
  }
}",0.8876978050025524
88792,"@Test public void simpleTest() throws Exception {
  TableFactory tf=new XmlFolderTableFactory(dir.toString());
  copyFile(""String_Node_Str"");
  TestCase.assertTrue(tf.isRefresh());
  TestCase.assertNull(tf.getNext());
  List<MdTable> tables=tf.getTables();
  TestCase.assertEquals(2,tables.size());
  TestCase.assertFalse(tf.isRefresh());
  Thread.sleep(1000);
  copyFile(""String_Node_Str"");
  TestCase.assertTrue(tf.isRefresh());
  tables=tf.getTables();
  TestCase.assertEquals(2,tables.size());
  TestCase.assertFalse(tf.isRefresh());
  Thread.sleep(1000);
  copyFile(""String_Node_Str"");
  TestCase.assertTrue(tf.isRefresh());
  tables=tf.getTables();
  TestCase.assertEquals(3,tables.size());
  TestCase.assertFalse(tf.isRefresh());
  Thread.sleep(1000);
  deleteFile(""String_Node_Str"");
  TestCase.assertTrue(tf.isRefresh());
  tables=tf.getTables();
  TestCase.assertEquals(3,tables.size());
  TestCase.assertFalse(tf.isRefresh());
  Thread.sleep(1000);
  copyFile(""String_Node_Str"");
  TestCase.assertTrue(tf.isRefresh());
  tables=tf.getTables();
  TestCase.assertEquals(3,tables.size());
  TestCase.assertFalse(tf.isRefresh());
  Thread.sleep(1000);
  deleteFile(""String_Node_Str"");
  TestCase.assertTrue(tf.isRefresh());
  tables=tf.getTables();
  TestCase.assertEquals(1,tables.size());
  TestCase.assertFalse(tf.isRefresh());
}","@Test public void simpleTest() throws Exception {
  deleteFile(""String_Node_Str"");
  deleteFile(""String_Node_Str"");
  deleteFile(""String_Node_Str"");
  TableFactory tf=new XmlFolderTableFactory(dir.toString());
  copyFile(""String_Node_Str"");
  TestCase.assertTrue(tf.isRefresh());
  TestCase.assertNull(tf.getNext());
  List<MdTable> tables=tf.getTables();
  TestCase.assertEquals(2,tables.size());
  TestCase.assertFalse(tf.isRefresh());
  Thread.sleep(1000);
  copyFile(""String_Node_Str"");
  TestCase.assertTrue(tf.isRefresh());
  tables=tf.getTables();
  TestCase.assertEquals(2,tables.size());
  TestCase.assertFalse(tf.isRefresh());
  Thread.sleep(1000);
  copyFile(""String_Node_Str"");
  TestCase.assertTrue(tf.isRefresh());
  tables=tf.getTables();
  TestCase.assertEquals(3,tables.size());
  TestCase.assertFalse(tf.isRefresh());
  Thread.sleep(1000);
  deleteFile(""String_Node_Str"");
  TestCase.assertTrue(tf.isRefresh());
  tables=tf.getTables();
  TestCase.assertEquals(3,tables.size());
  TestCase.assertFalse(tf.isRefresh());
  Thread.sleep(1000);
  copyFile(""String_Node_Str"");
  TestCase.assertTrue(tf.isRefresh());
  tables=tf.getTables();
  TestCase.assertEquals(3,tables.size());
  TestCase.assertFalse(tf.isRefresh());
  Thread.sleep(1000);
  deleteFile(""String_Node_Str"");
  TestCase.assertTrue(tf.isRefresh());
  tables=tf.getTables();
  TestCase.assertEquals(1,tables.size());
  TestCase.assertFalse(tf.isRefresh());
  deleteFile(""String_Node_Str"");
}",0.9530249110320284
88793,"public XmlClasspathFactory(String tablesClassPath){
  super(tablesClassPath);
  this.reflections=new Reflections(tablesClassPath,new ResourcesScanner());
}","public XmlClasspathFactory(String tablesClassPath){
  super(tablesClassPath);
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",tablesClassPath));
  }
  this.reflections=new Reflections(tablesClassPath,new ResourcesScanner());
}",0.7579462102689487
88794,"public ServerApp(final ConnectionFactory connectionFactory,final TableFactory tableFactory,final ServerAppConfig cfg) throws Exception {
  setName(""String_Node_Str"");
  setDescription(""String_Node_Str"");
  setAuthor(""String_Node_Str"");
  final SchedulerFactory schedulerFactory=new StdSchedulerFactory();
  final Scheduler scheduler=schedulerFactory.getScheduler();
  this.applicationModules=new AbstractModule[]{new AbstractModule(){
    @Override protected void configure(){
      bind(ConnectionFactory.class).toInstance(connectionFactory);
      bind(TableFactory.class).toInstance(tableFactory);
      bind(CCJSqlParserManager.class).toInstance(new CCJSqlParserManager());
      install(new FactoryModuleBuilder().build(ResourceFactory.class));
      bind(JobFactory.class).to(InjectorJobFactory.class);
      bind(MetadataFactoryIf.class).to(MetadataFactory.class);
      bind(Scheduler.class).toInstance(scheduler);
      bind(ServerAppConfig.class).toInstance(cfg);
    }
  }
};
  getInjector().getInstance(MetadataFactoryIf.class).refresh();
  InjectorJobFactory.startUpdateJob(scheduler,getInjector().getInstance(InjectorJobFactory.class));
  getInjector().getInstance(CacheFactory.class);
  scheduler.start();
}","public ServerApp(final ConnectionFactory connectionFactory,final TableFactory tableFactory,final ServerAppConfig cfg) throws Exception {
  setName(""String_Node_Str"");
  setDescription(""String_Node_Str"");
  setAuthor(""String_Node_Str"");
  final StdSchedulerFactory schedulerFactory=new StdSchedulerFactory();
  try (InputStream in=SchedulerFactory.class.getResourceAsStream(""String_Node_Str"")){
    schedulerFactory.initialize(in);
  }
   final Scheduler scheduler=schedulerFactory.getScheduler();
  this.applicationModules=new AbstractModule[]{new AbstractModule(){
    @Override protected void configure(){
      bind(ConnectionFactory.class).toInstance(connectionFactory);
      bind(TableFactory.class).toInstance(tableFactory);
      bind(CCJSqlParserManager.class).toInstance(new CCJSqlParserManager());
      install(new FactoryModuleBuilder().build(ResourceFactory.class));
      bind(JobFactory.class).to(InjectorJobFactory.class);
      bind(MetadataFactoryIf.class).to(MetadataFactory.class);
      bind(Scheduler.class).toInstance(scheduler);
      bind(ServerAppConfig.class).toInstance(cfg);
    }
  }
};
  getInjector().getInstance(MetadataFactoryIf.class).refresh();
  InjectorJobFactory.startUpdateJob(scheduler,getInjector().getInstance(InjectorJobFactory.class));
  getInjector().getInstance(CacheFactory.class);
  scheduler.start();
}",0.949126213592233
88795,"@Override protected void doInit() throws ResourceException {
  super.doInit();
  Integer row=getAttr(Integer.class,""String_Node_Str"");
  badRequestIfNot(row != null && row >= 0,""String_Node_Str"");
  Integer col=getAttr(Integer.class,""String_Node_Str"");
  badRequestIfNot(col != null && col > 0 && col < query.getColumns().size(),""String_Node_Str"");
  MdColumn column=query.getColumns().get(col);
  badRequestIfNot(column.getType() == MdType.BLOB || column.getType() == MdType.CLOB,""String_Node_Str"",column.getType().name());
  this.handler=rf.createLobHandler(query,getQuery());
  handler.setPerPage(perPage);
  handler.setPage(page);
  handler.setColumn(col);
  handler.setRow(row);
  String mt=getParam(String.class,""String_Node_Str"");
  if (mt != null) {
    this.handler.setMediaType(MediaType.valueOf(mt));
  }
}","@Override protected void doInit() throws ResourceException {
  super.doInit();
  Integer row=getAttr(Integer.class,""String_Node_Str"");
  badRequestIfNot(row != null && row >= 0,""String_Node_Str"");
  Integer col=getAttr(Integer.class,""String_Node_Str"");
  badRequestIfNot(col != null && col >= 0 && col < query.getColumns().size(),""String_Node_Str"");
  MdColumn column=query.getColumns().get(col);
  badRequestIfNot(column.getType() == MdType.BLOB || column.getType() == MdType.CLOB,""String_Node_Str"",column.getType().name());
  this.handler=rf.createLobHandler(query,getQuery());
  handler.setPerPage(perPage);
  handler.setPage(page);
  handler.setColumn(col);
  handler.setRow(row);
  String mt=getParam(String.class,""String_Node_Str"");
  if (mt != null) {
    this.handler.setMediaType(MediaType.valueOf(mt));
  }
}",0.999388379204893
88796,"private static String escapeStr(String s){
  String s1=s.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (SYMBOLS_TO_WRAP.matcher(s1).matches()) {
    s1=""String_Node_Str"".concat(s1).concat(""String_Node_Str"");
  }
  return s1;
}","private static String escapeStr(String s){
  String s1=s.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (SYMBOLS_TO_WRAP.matcher(s1).find()) {
    s1=""String_Node_Str"".concat(s1).concat(""String_Node_Str"");
  }
  return s1;
}",0.9832572298325722
88797,"@Override public void onPageScrolled(final int position,final float positionOffset,int positionOffsetPixels){
  PageLayout current=getRootView(position);
  PageLayout next=getRootView(position + 1);
  current.setScaleBoth(CarouselConfig.BIG_SCALE - CarouselConfig.DIFF_SCALE * positionOffset);
  if (next != null) {
    next.setScaleBoth(CarouselConfig.SMALL_SCALE + CarouselConfig.DIFF_SCALE * positionOffset);
  }
}","@Override public void onPageScrolled(final int position,final float positionOffset,int positionOffsetPixels){
  PageLayout current=getRootView(position);
  PageLayout next=getRootView(position + 1);
  if (current != null) {
    current.setScaleBoth(CarouselConfig.BIG_SCALE - CarouselConfig.DIFF_SCALE * positionOffset);
  }
  if (next != null) {
    next.setScaleBoth(CarouselConfig.SMALL_SCALE + CarouselConfig.DIFF_SCALE * positionOffset);
  }
}",0.9641618497109826
88798,"private CarouselConfig(Parcel in){
  scaleX=in.readFloat();
  scaleY=in.readFloat();
  orientation=in.readInt();
  visiblePages=in.readInt();
  pagerId=in.readInt();
}","private CarouselConfig(Parcel in){
  scaleX=in.readFloat();
  scaleY=in.readFloat();
  orientation=in.readInt();
  pageMargin=in.readInt();
  pageLimit=in.readInt();
  pagerId=in.readInt();
}",0.88268156424581
88799,"@Override public String toString(){
  return ""String_Node_Str"" + scaleX + ""String_Node_Str""+ scaleY+ ""String_Node_Str""+ orientation+ ""String_Node_Str""+ visiblePages+ ""String_Node_Str""+ pagerId;
}","@Override public String toString(){
  return ""String_Node_Str"" + scaleX + ""String_Node_Str""+ scaleY+ ""String_Node_Str""+ orientation+ ""String_Node_Str""+ pageMargin+ ""String_Node_Str""+ pageLimit+ ""String_Node_Str""+ pagerId;
}",0.8755980861244019
88800,"@Override public void writeToParcel(Parcel out,int flags){
  out.writeFloat(scaleX);
  out.writeFloat(scaleY);
  out.writeInt(orientation);
  out.writeInt(visiblePages);
  out.writeInt(pagerId);
}","@Override public void writeToParcel(Parcel out,int flags){
  out.writeFloat(scaleX);
  out.writeFloat(scaleY);
  out.writeInt(orientation);
  out.writeInt(pageMargin);
  out.writeInt(pageLimit);
  out.writeInt(pagerId);
}",0.882494004796163
88801,"private PageLayout getRootView(int position){
  String tag=CarouselViewPager.getConfig().getPageFragmentTag(position);
  Fragment f=mFragmentManager.findFragmentByTag(tag);
  if (f != null && f.getView() != null) {
    return (PageLayout)f.getView().findViewById(R.id.root);
  }
  return null;
}","private PageLayout getRootView(int position){
  String tag=CarouselConfig.getInstance().getPageFragmentTag(position);
  Fragment f=mFragmentManager.findFragmentByTag(tag);
  if (f != null && f.getView() != null) {
    return (PageLayout)f.getView().findViewById(R.id.root);
  }
  return null;
}",0.9575551782682512
88802,"@Override public void onPageSelected(int position){
}","@Override public void onPageSelected(int position){
  int scalingPages=CarouselConfig.getInstance().pageLimit;
  if (scalingPages == 0) {
    return;
  }
 else {
    scalingPages--;
  }
  if (scalingPages > 2) {
    int oneSidePages=(scalingPages - 2) / 2;
    for (int i=0; i < oneSidePages; i++) {
      PageLayout prevSidePage=getRootView(position - 1 - (i + 1));
      if (prevSidePage != null) {
        prevSidePage.setScaleBoth(CarouselConfig.SMALL_SCALE);
      }
      PageLayout nextSidePage=getRootView(position + 1 + (i + 1));
      if (nextSidePage != null) {
        nextSidePage.setScaleBoth(CarouselConfig.SMALL_SCALE);
      }
    }
  }
}",0.1497175141242938
88803,"@Override public Fragment getItem(int position){
  float scale=(position == mFirstPage) ? CarouselConfig.BIG_SCALE : CarouselConfig.SMALL_SCALE;
  position=position % mPages;
  return PageFragment.newInstance(mItems.get(position),scale);
}","@Override public Fragment getItem(int position){
  position=position % mPages;
  return PageFragment.newInstance(mItems.get(position),CarouselConfig.SMALL_SCALE);
}",0.6947890818858561
88804,"@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  if (positionOffset >= 0.0f && positionOffset <= 1.0f) {
    PageLayout current=getRootView(position);
    current.setScaleBoth(CarouselConfig.BIG_SCALE - CarouselConfig.DIFF_SCALE * positionOffset);
    PageLayout next=getRootView(position + 1);
    PageLayout prev=getRootView(position - 1);
    current.setScaleBoth(CarouselConfig.BIG_SCALE - CarouselConfig.DIFF_SCALE * positionOffset);
    if (next != null) {
      next.setScaleBoth(CarouselConfig.SMALL_SCALE + CarouselConfig.DIFF_SCALE * positionOffset);
    }
    if (prev != null) {
      prev.setScaleBoth(CarouselConfig.SMALL_SCALE + CarouselConfig.DIFF_SCALE * positionOffset);
    }
  }
}","@Override public void onPageScrolled(final int position,final float positionOffset,int positionOffsetPixels){
  PageLayout current=getRootView(position);
  PageLayout next=getRootView(position + 1);
  current.setScaleBoth(CarouselConfig.BIG_SCALE - CarouselConfig.DIFF_SCALE * positionOffset);
  if (next != null) {
    next.setScaleBoth(CarouselConfig.SMALL_SCALE + CarouselConfig.DIFF_SCALE * positionOffset);
  }
}",0.4486301369863014
88805,"private void calculatePageLimitAndMargin() throws CarouselConfigException {
  if (sConfig.orientation != CarouselConfig.HORIZONTAL && sConfig.orientation != CarouselConfig.VERTICAL) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int contentSize, viewSize;
  if (sConfig.orientation == CarouselConfig.HORIZONTAL) {
    contentSize=mResources.getDimensionPixelSize(R.dimen.page_content_width);
    viewSize=mViewPagerWidth;
  }
 else {
    contentSize=mResources.getDimensionPixelSize(R.dimen.page_content_height);
    viewSize=mViewPagerHeight;
  }
  int minOffset=(int)(CarouselConfig.DIFF_SCALE * contentSize / 2) + mMinOffset;
  contentSize*=CarouselConfig.SMALL_SCALE;
  if (contentSize + 2 * minOffset > viewSize) {
    throw new CarouselConfigException(""String_Node_Str"");
  }
  final float step=0.1f;
  while (contentSize + 2 * contentSize * (mVisiblePart - step) + 2 * minOffset > viewSize && Math.abs(mVisiblePart - step) > 1e-6) {
    mVisiblePart-=step;
  }
  int fullPages=0;
  final int s=viewSize - (int)(2 * contentSize * mVisiblePart);
  while (minOffset + (fullPages + 1) * (contentSize + minOffset) <= s) {
    fullPages++;
  }
  if (fullPages != 0 && fullPages % 2 == 0) {
    fullPages--;
  }
  int offset=(s - fullPages * contentSize) / (fullPages + 1);
  if (Math.abs(mVisiblePart) > 1e-6) {
    mPageLimit=(fullPages + 2) - 1;
  }
 else {
    mPageLimit=fullPages - 1;
  }
  sConfig.visiblePages=mPageLimit + 1;
  if (sConfig.orientation == CarouselConfig.VERTICAL) {
    mPageMargin=-(int)((viewSize - contentSize - offset) * sConfig.scaleY);
  }
 else {
    mPageMargin=-(viewSize - contentSize - offset);
  }
}","private void calculatePageLimitAndMargin() throws CarouselConfigException {
  if (mConfig.orientation != CarouselConfig.HORIZONTAL && mConfig.orientation != CarouselConfig.VERTICAL) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int contentSize, viewSize;
  if (mConfig.orientation == CarouselConfig.HORIZONTAL) {
    contentSize=mResources.getDimensionPixelSize(R.dimen.page_content_width);
    viewSize=mViewPagerWidth;
  }
 else {
    contentSize=mResources.getDimensionPixelSize(R.dimen.page_content_height);
    viewSize=mViewPagerHeight;
  }
  int minOffset=(int)(CarouselConfig.DIFF_SCALE * contentSize / 2) + mMinOffset;
  contentSize*=CarouselConfig.SMALL_SCALE;
  if (contentSize + 2 * minOffset > viewSize) {
    throw new CarouselConfigException(""String_Node_Str"");
  }
  final float step=0.1f;
  while (contentSize + 2 * contentSize * (mVisiblePart - step) + 2 * minOffset > viewSize && Math.abs(mVisiblePart - step) > 1e-6) {
    mVisiblePart-=step;
  }
  int fullPages=0;
  final int s=viewSize - (int)(2 * contentSize * mVisiblePart);
  while (minOffset + (fullPages + 1) * (contentSize + minOffset) <= s) {
    fullPages++;
  }
  if (fullPages != 0 && fullPages % 2 == 0) {
    fullPages--;
  }
  int offset=(s - fullPages * contentSize) / (fullPages + 1);
  if (Math.abs(mVisiblePart) > 1e-6) {
    mPageLimit=(fullPages + 2) - 1;
  }
 else {
    mPageLimit=fullPages - 1;
  }
  mPageLimit*=2;
  mConfig.pageLimit=mPageLimit;
  if (mConfig.orientation == CarouselConfig.VERTICAL) {
    mPageMargin=-(int)((viewSize - contentSize - offset) * mConfig.scaleY);
  }
 else {
    mPageMargin=-(viewSize - contentSize - offset);
  }
  mConfig.pageMargin=mPageMargin;
}",0.964221824686941
88806,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  mViewPagerWidth=MeasureSpec.getSize(widthMeasureSpec);
  mViewPagerHeight=MeasureSpec.getSize(heightMeasureSpec);
  if (sConfig.orientation == CarouselConfig.VERTICAL) {
    setRotation(90);
    sConfig.scaleX=(float)mViewPagerHeight / mViewPagerWidth;
    sConfig.scaleY=(float)mViewPagerWidth / mViewPagerHeight;
    setScaleX(sConfig.scaleX);
    setScaleY(sConfig.scaleY);
  }
  setMeasuredDimension(mViewPagerWidth,mViewPagerHeight);
  try {
    calculatePageLimitAndMargin();
  }
 catch (  CarouselConfigException e) {
    Log.e(TAG,e.toString());
  }
  setOffscreenPageLimit(mPageLimit);
  setPageMargin(mPageMargin);
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  mViewPagerWidth=MeasureSpec.getSize(widthMeasureSpec);
  mViewPagerHeight=MeasureSpec.getSize(heightMeasureSpec);
  if (mConfig.orientation == CarouselConfig.VERTICAL) {
    setRotation(90);
    mConfig.scaleX=(float)mViewPagerHeight / mViewPagerWidth;
    mConfig.scaleY=(float)mViewPagerWidth / mViewPagerHeight;
    setScaleX(mConfig.scaleX);
    setScaleY(mConfig.scaleY);
  }
  setMeasuredDimension(mViewPagerWidth,mViewPagerHeight);
  try {
    calculatePageLimitAndMargin();
  }
 catch (  CarouselConfigException e) {
    Log.e(TAG,e.toString());
  }
  setOffscreenPageLimit(mPageLimit);
  setPageMargin(mPageMargin);
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  if (DEBUG) {
    Log.d(TAG,mConfig.toString());
  }
}",0.959493670886076
88807,"public CarouselViewPager(Context context,AttributeSet attrs){
  super(context,attrs);
  sConfig.pagerId=getId();
  mResources=context.getResources();
  DisplayMetrics metrics=mResources.getDisplayMetrics();
  mMinOffset*=metrics.density;
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.CarouselViewPager);
  try {
    if (a != null) {
      sConfig.orientation=a.getInt(R.styleable.CarouselViewPager_android_orientation,CarouselConfig.HORIZONTAL);
    }
  }
  finally {
    if (a != null) {
      a.recycle();
    }
  }
}","public CarouselViewPager(Context context,AttributeSet attrs){
  super(context,attrs);
  mConfig=CarouselConfig.getInstance();
  mConfig.pagerId=getId();
  mResources=context.getResources();
  DisplayMetrics metrics=mResources.getDisplayMetrics();
  mMinOffset*=metrics.density;
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.CarouselViewPager);
  try {
    if (a != null) {
      mConfig.orientation=a.getInt(R.styleable.CarouselViewPager_android_orientation,CarouselConfig.HORIZONTAL);
    }
  }
  finally {
    if (a != null) {
      a.recycle();
    }
  }
}",0.9605026929982048
88808,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  final int size=5;
  ArrayList<PageItem> items=new ArrayList<PageItem>(size);
  for (int i=0; i < size; i++) {
    items.add(new PageItem(""String_Node_Str"" + i));
  }
  mViewPager=(CarouselViewPager)findViewById(R.id.carousel_pager);
  mPagerAdapter=new CarouselPagerAdapter(getSupportFragmentManager(),items);
  mViewPager.setAdapter(mPagerAdapter);
  mViewPager.setOnPageChangeListener(mPagerAdapter);
  mViewPager.setCurrentItem(mPagerAdapter.getFirstPage());
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  final int size=100;
  ArrayList<PageItem> items=new ArrayList<PageItem>(size);
  for (int i=0; i < size; i++) {
    items.add(new PageItem(""String_Node_Str"" + i));
  }
  mViewPager=(CarouselViewPager)findViewById(R.id.carousel_pager);
  mPagerAdapter=new CarouselPagerAdapter(getSupportFragmentManager(),items);
  mViewPager.setAdapter(mPagerAdapter);
  mViewPager.setOnPageChangeListener(mPagerAdapter);
  mViewPager.setCurrentItem(mPagerAdapter.getFirstPage());
}",0.996694214876033
88809,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  if (container == null) {
    return null;
  }
  LinearLayout layout=(LinearLayout)inflater.inflate(R.layout.page,container,false);
  PageItem item=getArguments().getParcelable(""String_Node_Str"");
  float scale=getArguments().getFloat(""String_Node_Str"");
  TextView title=(TextView)layout.findViewById(R.id.title);
  title.setText(item.getTitle());
  PageLayout root=(PageLayout)layout.findViewById(R.id.root);
  root.setScaleBoth(scale);
  CarouselConfig config=CarouselViewPager.getConfig();
  if (config.orientation == CarouselConfig.VERTICAL) {
    layout.setScaleX(1.0f / config.scaleY);
    layout.setScaleY(1.0f / config.scaleX);
    layout.setRotation(-90);
  }
  return layout;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  if (container == null) {
    return null;
  }
  LinearLayout layout=(LinearLayout)inflater.inflate(R.layout.page,container,false);
  PageItem item=getArguments().getParcelable(""String_Node_Str"");
  float scale=getArguments().getFloat(""String_Node_Str"");
  TextView title=(TextView)layout.findViewById(R.id.title);
  title.setText(item.getTitle());
  PageLayout root=(PageLayout)layout.findViewById(R.id.root);
  root.setScaleBoth(scale);
  CarouselConfig config=CarouselConfig.getInstance();
  if (config.orientation == CarouselConfig.VERTICAL) {
    layout.setScaleX(1.0f / config.scaleY);
    layout.setScaleY(1.0f / config.scaleX);
    layout.setRotation(-90);
  }
  return layout;
}",0.9842866121935888
88810,"public CarouselPagerAdapter(Context context,FragmentManager fragmentManager,int pagerId,ArrayList<PageItem> items){
  super(fragmentManager);
  mContext=context;
  mFragmentManager=fragmentManager;
  mPagerId=pagerId;
  if (items == null) {
    mItems=new ArrayList<PageItem>(0);
  }
 else {
    mItems=items;
  }
  mPages=mItems.size();
  mFirstPage=mPages * LOOPS / 2;
}","public CarouselPagerAdapter(FragmentManager fragmentManager,ArrayList<PageItem> items){
  super(fragmentManager);
  mFragmentManager=fragmentManager;
  if (items == null) {
    mItems=new ArrayList<PageItem>(0);
  }
 else {
    mItems=items;
  }
  mPages=mItems.size();
  mFirstPage=mPages * CarouselConfig.LOOPS / 2;
}",0.1273516642547033
88811,"private PageLayout getRootView(int position){
  Fragment f=mFragmentManager.findFragmentByTag(getFragmentTag(position));
  if (f != null && f.getView() != null) {
    return (PageLayout)f.getView().findViewById(R.id.root);
  }
  return null;
}","private PageLayout getRootView(int position){
  String tag=CarouselViewPager.getConfig().getPageFragmentTag(position);
  Fragment f=mFragmentManager.findFragmentByTag(tag);
  if (f != null && f.getView() != null) {
    return (PageLayout)f.getView().findViewById(R.id.root);
  }
  return null;
}",0.8141263940520446
88812,"@Override public Fragment getItem(int position){
  float scale=(position == mFirstPage) ? BIG_SCALE : SMALL_SCALE;
  position=position % mPages;
  return PageFragment.newInstance(mContext,mItems.get(position),scale);
}","@Override public Fragment getItem(int position){
  float scale=(position == mFirstPage) ? CarouselConfig.BIG_SCALE : CarouselConfig.SMALL_SCALE;
  position=position % mPages;
  return PageFragment.newInstance(mItems.get(position),scale);
}",0.8315098468271335
88813,"@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  if (positionOffset >= 0.0f && positionOffset <= 1.0f) {
    PageLayout current=getRootView(position);
    PageLayout next=getRootView(position + 1);
    PageLayout prev=getRootView(position - 1);
    current.setScaleBoth(BIG_SCALE - DIFF_SCALE * positionOffset);
    if (next != null) {
      next.setScaleBoth(SMALL_SCALE + DIFF_SCALE * positionOffset);
    }
    if (prev != null) {
      prev.setScaleBoth(SMALL_SCALE + DIFF_SCALE * positionOffset);
    }
  }
}","@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  if (positionOffset >= 0.0f && positionOffset <= 1.0f) {
    PageLayout current=getRootView(position);
    current.setScaleBoth(CarouselConfig.BIG_SCALE - CarouselConfig.DIFF_SCALE * positionOffset);
    PageLayout next=getRootView(position + 1);
    PageLayout prev=getRootView(position - 1);
    current.setScaleBoth(CarouselConfig.BIG_SCALE - CarouselConfig.DIFF_SCALE * positionOffset);
    if (next != null) {
      next.setScaleBoth(CarouselConfig.SMALL_SCALE + CarouselConfig.DIFF_SCALE * positionOffset);
    }
    if (prev != null) {
      prev.setScaleBoth(CarouselConfig.SMALL_SCALE + CarouselConfig.DIFF_SCALE * positionOffset);
    }
  }
}",0.6403041825095057
88814,"@Override public int getCount(){
  return mPages * LOOPS;
}","@Override public int getCount(){
  return mPages * CarouselConfig.LOOPS;
}",0.8872180451127819
88815,"@Override public boolean onSingleTapConfirmed(MotionEvent e){
  if (getCarouselAdapter() != null) {
    getCarouselAdapter().sendSingleTap(mTouchedView,mTouchedItem);
  }
  dispatchTouchEvent(e);
  mTouchedView=null;
  mTouchedItem=null;
  return true;
}","@Override public boolean onSingleTapConfirmed(MotionEvent e){
  if (getCarouselAdapter() != null) {
    getCarouselAdapter().sendSingleTap(mTouchedView,mTouchedItem);
  }
  mTouchedView=null;
  mTouchedItem=null;
  return true;
}",0.94824016563147
88816,"public CarouselViewPager(Context context,AttributeSet attrs){
  super(context,attrs);
  mConfig=CarouselConfig.getInstance();
  mConfig.pagerId=getId();
  mResources=context.getResources();
  DisplayMetrics dm=mResources.getDisplayMetrics();
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.CarouselViewPager);
  try {
    if (a != null) {
      mConfig.orientation=a.getInt(R.styleable.CarouselViewPager_android_orientation,CarouselConfig.HORIZONTAL);
      mConfig.infinite=a.getBoolean(R.styleable.CarouselViewPager_infinite,true);
      mConfig.scrollScalingMode=a.getInt(R.styleable.CarouselViewPager_scrollScalingMode,CarouselConfig.SCROLL_MODE_BIG_CURRENT);
      float bigScale=a.getFloat(R.styleable.CarouselViewPager_bigScale,CarouselConfig.DEFAULT_BIG_SCALE);
      if (bigScale > 1.0f || bigScale < 0.0f) {
        bigScale=CarouselConfig.DEFAULT_BIG_SCALE;
        Log.w(TAG,""String_Node_Str"" + CarouselConfig.DEFAULT_BIG_SCALE + ""String_Node_Str"");
      }
      mConfig.bigScale=bigScale;
      float smallScale=a.getFloat(R.styleable.CarouselViewPager_smallScale,CarouselConfig.DEFAULT_SMALL_SCALE);
      if (smallScale > 1.0f || smallScale < 0.0f) {
        smallScale=CarouselConfig.DEFAULT_SMALL_SCALE;
        Log.w(TAG,""String_Node_Str"" + CarouselConfig.DEFAULT_SMALL_SCALE + ""String_Node_Str"");
      }
 else       if (smallScale > bigScale) {
        smallScale=bigScale;
        Log.w(TAG,""String_Node_Str"" + bigScale + ""String_Node_Str"");
      }
      mConfig.smallScale=smallScale;
      mMinPagesOffset=(int)a.getDimension(R.styleable.CarouselViewPager_minPagesOffset,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,20,dm));
      mSidePagesVisiblePart=a.getFloat(R.styleable.CarouselViewPager_sidePagesVisiblePart,DEFAULT_SIDE_PAGES_VISIBLE_PART);
    }
  }
  finally {
    if (a != null) {
      a.recycle();
    }
  }
  mGestureListener=new SimpleOnGestureListener(){
    @Override public boolean onSingleTapConfirmed(    MotionEvent e){
      if (getCarouselAdapter() != null) {
        getCarouselAdapter().sendSingleTap(mTouchedView,mTouchedItem);
      }
      dispatchTouchEvent(e);
      mTouchedView=null;
      mTouchedItem=null;
      return true;
    }
    @Override public boolean onDoubleTap(    MotionEvent e){
      if (getCarouselAdapter() != null) {
        getCarouselAdapter().sendDoubleTap(mTouchedView,mTouchedItem);
      }
      dispatchTouchEvent(e);
      mTouchedView=null;
      mTouchedItem=null;
      return true;
    }
  }
;
  mGestureDetector=new GestureDetector(context,mGestureListener);
}","public CarouselViewPager(Context context,AttributeSet attrs){
  super(context,attrs);
  mConfig=CarouselConfig.getInstance();
  mConfig.pagerId=getId();
  mResources=context.getResources();
  DisplayMetrics dm=mResources.getDisplayMetrics();
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.CarouselViewPager);
  try {
    if (a != null) {
      mConfig.orientation=a.getInt(R.styleable.CarouselViewPager_android_orientation,CarouselConfig.HORIZONTAL);
      mConfig.infinite=a.getBoolean(R.styleable.CarouselViewPager_infinite,true);
      mConfig.scrollScalingMode=a.getInt(R.styleable.CarouselViewPager_scrollScalingMode,CarouselConfig.SCROLL_MODE_BIG_CURRENT);
      float bigScale=a.getFloat(R.styleable.CarouselViewPager_bigScale,CarouselConfig.DEFAULT_BIG_SCALE);
      if (bigScale > 1.0f || bigScale < 0.0f) {
        bigScale=CarouselConfig.DEFAULT_BIG_SCALE;
        Log.w(TAG,""String_Node_Str"" + CarouselConfig.DEFAULT_BIG_SCALE + ""String_Node_Str"");
      }
      mConfig.bigScale=bigScale;
      float smallScale=a.getFloat(R.styleable.CarouselViewPager_smallScale,CarouselConfig.DEFAULT_SMALL_SCALE);
      if (smallScale > 1.0f || smallScale < 0.0f) {
        smallScale=CarouselConfig.DEFAULT_SMALL_SCALE;
        Log.w(TAG,""String_Node_Str"" + CarouselConfig.DEFAULT_SMALL_SCALE + ""String_Node_Str"");
      }
 else       if (smallScale > bigScale) {
        smallScale=bigScale;
        Log.w(TAG,""String_Node_Str"" + bigScale + ""String_Node_Str"");
      }
      mConfig.smallScale=smallScale;
      mMinPagesOffset=(int)a.getDimension(R.styleable.CarouselViewPager_minPagesOffset,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,20,dm));
      mSidePagesVisiblePart=a.getFloat(R.styleable.CarouselViewPager_sidePagesVisiblePart,DEFAULT_SIDE_PAGES_VISIBLE_PART);
    }
  }
  finally {
    if (a != null) {
      a.recycle();
    }
  }
  mGestureListener=new SimpleOnGestureListener(){
    @Override public boolean onSingleTapConfirmed(    MotionEvent e){
      if (getCarouselAdapter() != null) {
        getCarouselAdapter().sendSingleTap(mTouchedView,mTouchedItem);
      }
      mTouchedView=null;
      mTouchedItem=null;
      return true;
    }
    @Override public boolean onDoubleTap(    MotionEvent e){
      if (getCarouselAdapter() != null) {
        getCarouselAdapter().sendDoubleTap(mTouchedView,mTouchedItem);
      }
      mTouchedView=null;
      mTouchedItem=null;
      return true;
    }
  }
;
  mGestureDetector=new GestureDetector(context,mGestureListener);
}",0.936763550667714
88817,"@Override public boolean onDoubleTap(MotionEvent e){
  if (getCarouselAdapter() != null) {
    getCarouselAdapter().sendDoubleTap(mTouchedView,mTouchedItem);
  }
  dispatchTouchEvent(e);
  mTouchedView=null;
  mTouchedItem=null;
  return true;
}","@Override public boolean onDoubleTap(MotionEvent e){
  if (getCarouselAdapter() != null) {
    getCarouselAdapter().sendDoubleTap(mTouchedView,mTouchedItem);
  }
  mTouchedView=null;
  mTouchedItem=null;
  return true;
}",0.946236559139785
88818,"private boolean calculatePageLimitAndMargin(Context context){
  if (mViewPagerWidth == 0 || mViewPagerHeight == 0) {
    return false;
  }
  int contentSize, viewSize;
  if (mConfig.orientation == CarouselConfig.HORIZONTAL) {
    contentSize=getPageContentWidth(context.getPackageName(),mResources);
    viewSize=mViewPagerWidth;
  }
 else {
    contentSize=getPageContentHeight(context.getPackageName(),mResources);
    viewSize=mViewPagerHeight;
  }
  int minOffset=0;
switch (mConfig.scrollScalingMode) {
case CarouselConfig.SCROLL_MODE_BIG_CURRENT:
{
      minOffset=(int)(mConfig.getDiffScale() * contentSize / 2) + mMinPagesOffset;
      contentSize*=mConfig.smallScale;
      break;
    }
case CarouselConfig.SCROLL_MODE_BIG_ALL:
{
    minOffset=(int)(mConfig.getDiffScale() * contentSize) + mMinPagesOffset;
    contentSize*=mConfig.smallScale;
    break;
  }
case CarouselConfig.SCROLL_MODE_NONE:
{
  minOffset=mMinPagesOffset;
  break;
}
}
if (contentSize + 2 * minOffset > viewSize) {
if (DEBUG) {
Log.d(TAG,""String_Node_Str"");
}
return false;
}
while (true) {
if (mSidePagesVisiblePart < 0.0f) {
mSidePagesVisiblePart=0.0f;
break;
}
if (contentSize + 2 * contentSize * (mSidePagesVisiblePart) + 2 * minOffset <= viewSize) {
break;
}
mSidePagesVisiblePart-=0.1f;
}
int fullPages=1;
final int s=viewSize - (int)(2 * contentSize * mSidePagesVisiblePart);
while (minOffset + (fullPages + 1) * (contentSize + minOffset) <= s) {
fullPages++;
}
if (fullPages != 0 && fullPages % 2 == 0) {
fullPages--;
}
int offset=(s - fullPages * contentSize) / (fullPages + 1);
int pageLimit;
if (Math.abs(mSidePagesVisiblePart) > 1e-6) {
pageLimit=(fullPages + 2) - 1;
}
 else {
pageLimit=fullPages - 1;
}
pageLimit=2 * pageLimit + pageLimit / 2;
mConfig.pageLimit=pageLimit;
mConfig.pageMargin=-(viewSize - contentSize - offset);
return true;
}","/** 
 * @param context Context.
 * @return True, if config was successfully updated.
 */
private boolean calculatePageLimitAndMargin(Context context){
  if (mViewPagerWidth == 0 || mViewPagerHeight == 0) {
    return false;
  }
  int contentSize, viewSize;
  if (mConfig.orientation == CarouselConfig.HORIZONTAL) {
    contentSize=getPageContentWidth(context.getPackageName(),mResources);
    viewSize=mViewPagerWidth;
  }
 else {
    contentSize=getPageContentHeight(context.getPackageName(),mResources);
    viewSize=mViewPagerHeight;
  }
  int minOffset=0;
switch (mConfig.scrollScalingMode) {
case CarouselConfig.SCROLL_MODE_BIG_CURRENT:
{
      minOffset=(int)(mConfig.getDiffScale() * contentSize / 2) + mMinPagesOffset;
      contentSize*=mConfig.smallScale;
      break;
    }
case CarouselConfig.SCROLL_MODE_BIG_ALL:
{
    minOffset=(int)(mConfig.getDiffScale() * contentSize) + mMinPagesOffset;
    contentSize*=mConfig.smallScale;
    break;
  }
case CarouselConfig.SCROLL_MODE_NONE:
{
  minOffset=mMinPagesOffset;
  break;
}
}
if (contentSize + 2 * minOffset > viewSize) {
if (DEBUG) {
Log.d(TAG,""String_Node_Str"");
}
return false;
}
while (true) {
if (mSidePagesVisiblePart < 0.0f) {
mSidePagesVisiblePart=0.0f;
break;
}
if (contentSize + 2 * contentSize * (mSidePagesVisiblePart) + 2 * minOffset <= viewSize) {
break;
}
mSidePagesVisiblePart-=0.1f;
}
int fullPages=1;
final int s=viewSize - (int)(2 * contentSize * mSidePagesVisiblePart);
while (minOffset + (fullPages + 1) * (contentSize + minOffset) <= s) {
fullPages++;
}
if (fullPages != 0 && fullPages % 2 == 0) {
fullPages--;
}
int offset=(s - fullPages * contentSize) / (fullPages + 1);
int pageLimit;
if (Math.abs(mSidePagesVisiblePart) > 1e-6) {
pageLimit=(fullPages + 2) - 1;
}
 else {
pageLimit=fullPages - 1;
}
pageLimit=2 * pageLimit + pageLimit / 2;
mConfig.pageLimit=pageLimit;
mConfig.pageMargin=-(viewSize - contentSize - offset);
return true;
}",0.9763486579856496
88819,"public CarouselPagerAdapter(FragmentManager fragmentManager,CarouselViewPager viewPager,OnPageClickListener callback,ArrayList<PageItem> items){
  super(fragmentManager);
  mConfig=CarouselConfig.getInstance();
  mFragmentManager=fragmentManager;
  mViewPager=viewPager;
  mCallback=callback;
  if (items == null) {
    mItems=new ArrayList<PageItem>(0);
  }
 else {
    mItems=items;
  }
  mPagesCount=mItems.size();
  if (mConfig.infinite) {
    mFirstPosition=mPagesCount * CarouselConfig.LOOPS / 2;
  }
}","public CarouselPagerAdapter(FragmentManager fragmentManager,OnPageClickListener callback,ArrayList<PageItem> items){
  super(fragmentManager);
  mConfig=CarouselConfig.getInstance();
  mFragmentManager=fragmentManager;
  mCallback=callback;
  if (items == null) {
    mItems=new ArrayList<PageItem>(0);
  }
 else {
    mItems=items;
  }
  mPagesCount=mItems.size();
  if (mConfig.infinite) {
    mFirstPosition=mPagesCount * CarouselConfig.LOOPS / 2;
  }
}",0.946058091286307
88820,"@Override public void onPageSelected(int position){
  int scalingPages=CarouselConfig.getInstance().pageLimit;
  if (scalingPages == 0) {
    return;
  }
  if (mConfig.scrollScalingMode == CarouselConfig.SCROLL_MODE_BIG_CURRENT) {
    scaleAdjacentPages(position,scalingPages,mConfig.smallScale);
  }
 else   if (mConfig.scrollScalingMode == CarouselConfig.SCROLL_MODE_NONE) {
    scaleAdjacentPages(position,scalingPages,mConfig.bigScale);
  }
}","@Override public void onPageSelected(int position){
  mCurrentPosition=position;
  int scalingPages=CarouselConfig.getInstance().pageLimit;
  if (scalingPages == 0) {
    return;
  }
  if (mConfig.scrollScalingMode == CarouselConfig.SCROLL_MODE_BIG_CURRENT) {
    scaleAdjacentPages(position,scalingPages,mConfig.smallScale);
  }
 else   if (mConfig.scrollScalingMode == CarouselConfig.SCROLL_MODE_NONE) {
    scaleAdjacentPages(position,scalingPages,mConfig.bigScale);
  }
}",0.968512486427796
88821,"@Override public void onPageScrollStateChanged(int state){
switch (state) {
case CarouselViewPager.SCROLL_STATE_IDLE:
{
      if (mDragging) {
        int scalingPages=CarouselConfig.getInstance().pageLimit;
        if (scalingPages == 0) {
          return;
        }
        if (mConfig.scrollScalingMode == CarouselConfig.SCROLL_MODE_BIG_ALL) {
          scaleAdjacentPages(mViewPager.getCurrentItem(),scalingPages,mConfig.smallScale);
        }
        mDragging=false;
      }
      break;
    }
case CarouselViewPager.SCROLL_STATE_SETTLING:
{
    break;
  }
case CarouselViewPager.SCROLL_STATE_DRAGGING:
{
  mDragging=true;
  if (mConfig.scrollScalingMode == CarouselConfig.SCROLL_MODE_BIG_ALL) {
    int position=mViewPager.getCurrentItem();
    int scalingPages=CarouselConfig.getInstance().pageLimit;
    scaleAdjacentPages(position,scalingPages,mConfig.bigScale);
  }
  break;
}
}
}","@Override public void onPageScrollStateChanged(int state){
  if (state == CarouselViewPager.SCROLL_STATE_IDLE) {
    int scalingPages=CarouselConfig.getInstance().pageLimit;
    if (scalingPages == 0) {
      return;
    }
    if (mConfig.scrollScalingMode == CarouselConfig.SCROLL_MODE_BIG_ALL) {
      scaleAdjacentPages(mCurrentPosition,scalingPages,mConfig.smallScale);
    }
  }
}",0.4166014095536413
88822,"@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
switch (mConfig.scrollScalingMode) {
case CarouselConfig.SCROLL_MODE_BIG_CURRENT:
{
      PageLayout current=getPageView(position);
      PageLayout next=getPageView(position + 1);
      if (current != null) {
        current.setScaleBoth(mConfig.bigScale - mConfig.getDiffScale() * positionOffset);
      }
      if (next != null) {
        next.setScaleBoth(mConfig.smallScale + mConfig.getDiffScale() * positionOffset);
      }
      break;
    }
case CarouselConfig.SCROLL_MODE_BIG_ALL:
{
    PageLayout current=getPageView(position);
    if (current != null) {
      current.setScaleBoth(mConfig.bigScale);
    }
    break;
  }
case CarouselConfig.SCROLL_MODE_NONE:
{
  break;
}
}
}","@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
switch (mConfig.scrollScalingMode) {
case CarouselConfig.SCROLL_MODE_BIG_CURRENT:
{
      PageLayout current=getPageView(position);
      PageLayout next=getPageView(position + 1);
      if (current != null) {
        current.setScaleBoth(mConfig.bigScale - mConfig.getDiffScale() * positionOffset);
      }
      if (next != null) {
        next.setScaleBoth(mConfig.smallScale + mConfig.getDiffScale() * positionOffset);
      }
      break;
    }
case CarouselConfig.SCROLL_MODE_BIG_ALL:
{
    PageLayout current=getPageView(position);
    if (current != null) {
      current.setScaleBoth(mConfig.bigScale);
    }
    if (positionOffset > 0.0f) {
      scaleAdjacentPages(position,mConfig.pageLimit,mConfig.bigScale);
    }
    break;
  }
case CarouselConfig.SCROLL_MODE_NONE:
{
  break;
}
}
}",0.9345238095238096
88823,"@Override public void onRestoreInstanceState(Parcelable state){
  if (!(state instanceof CarouselState)) {
    super.onRestoreInstanceState(state);
    return;
  }
  CarouselState ss=(CarouselState)state;
  super.onRestoreInstanceState(ss.getSuperState());
  if (getAdapter() == null) {
    return;
  }
  if (ss.infinite && !mConfig.infinite) {
    int offset=ss.position - ss.itemsCount / 2;
    if (offset > 0) {
      setCurrentItem(offset);
    }
 else     if (offset < 0) {
      setCurrentItem(ss.itemsCount / CarouselConfig.LOOPS + offset);
    }
  }
 else   if (!ss.infinite && mConfig.infinite) {
    setCurrentItem(ss.itemsCount * CarouselConfig.LOOPS / 2 + ss.position);
  }
 else {
    setCurrentItem(ss.position);
  }
}","@Override public void onRestoreInstanceState(Parcelable state){
  if (!(state instanceof CarouselState)) {
    super.onRestoreInstanceState(state);
    return;
  }
  CarouselState ss=(CarouselState)state;
  super.onRestoreInstanceState(ss.getSuperState());
  if (getAdapter() == null) {
    return;
  }
  if (ss.infinite && !mConfig.infinite) {
    int itemsCount=getAdapter().getCount();
    if (itemsCount == 0) {
      return;
    }
    int offset=(ss.position - ss.itemsCount / 2) % itemsCount;
    if (offset >= 0) {
      setCurrentItem(offset);
    }
 else {
      setCurrentItem(ss.itemsCount / CarouselConfig.LOOPS + offset);
    }
  }
 else   if (!ss.infinite && mConfig.infinite) {
    setCurrentItem(ss.itemsCount * CarouselConfig.LOOPS / 2 + ss.position);
  }
 else {
    setCurrentItem(ss.position);
  }
}",0.9078014184397164
88824,"private void calculatePageLimitAndMargin(){
  int contentSize, viewSize;
  if (mConfig.orientation == CarouselConfig.HORIZONTAL) {
    contentSize=mResources.getDimensionPixelSize(R.dimen.page_content_width);
    viewSize=mViewPagerWidth;
  }
 else {
    contentSize=mResources.getDimensionPixelSize(R.dimen.page_content_height);
    viewSize=mViewPagerHeight;
  }
  int minOffset=0;
switch (mConfig.scrollScalingMode) {
case CarouselConfig.SCROLL_MODE_BIG_CURRENT:
{
      minOffset=(int)(mConfig.getDiffScale() * contentSize / 2) + mMinPagesOffset;
      contentSize*=mConfig.smallScale;
      break;
    }
case CarouselConfig.SCROLL_MODE_BIG_ALL:
{
    minOffset=(int)(mConfig.getDiffScale() * contentSize) + mMinPagesOffset;
    contentSize*=mConfig.smallScale;
    break;
  }
case CarouselConfig.SCROLL_MODE_NONE:
{
  minOffset=mMinPagesOffset;
  break;
}
}
if (contentSize + 2 * minOffset > viewSize) {
Log.w(TAG,""String_Node_Str"");
return;
}
final float step=0.1f;
while (contentSize + 2 * contentSize * (mSidePagesVisiblePart - step) + 2 * minOffset > viewSize && Math.abs(mSidePagesVisiblePart - step) > 1e-6) {
mSidePagesVisiblePart-=step;
}
int fullPages=0;
final int s=viewSize - (int)(2 * contentSize * mSidePagesVisiblePart);
while (minOffset + (fullPages + 1) * (contentSize + minOffset) <= s) {
fullPages++;
}
if (fullPages != 0 && fullPages % 2 == 0) {
fullPages--;
}
int offset=(s - fullPages * contentSize) / (fullPages + 1);
if (Math.abs(mSidePagesVisiblePart) > 1e-6) {
mPageLimit=(fullPages + 2) - 1;
}
 else {
mPageLimit=fullPages - 1;
}
mPageLimit*=3;
mConfig.pageLimit=mPageLimit;
if (mConfig.orientation == CarouselConfig.VERTICAL) {
mPageMargin=-(int)((viewSize - contentSize - offset) * mConfig.scaleY);
}
 else {
mPageMargin=-(viewSize - contentSize - offset);
}
mConfig.pageMargin=mPageMargin;
}","private void calculatePageLimitAndMargin(){
  int contentSize, viewSize;
  if (mConfig.orientation == CarouselConfig.HORIZONTAL) {
    contentSize=mResources.getDimensionPixelSize(R.dimen.page_content_width);
    viewSize=mViewPagerWidth;
  }
 else {
    contentSize=mResources.getDimensionPixelSize(R.dimen.page_content_height);
    viewSize=mViewPagerHeight;
  }
  int minOffset=0;
switch (mConfig.scrollScalingMode) {
case CarouselConfig.SCROLL_MODE_BIG_CURRENT:
{
      minOffset=(int)(mConfig.getDiffScale() * contentSize / 2) + mMinPagesOffset;
      contentSize*=mConfig.smallScale;
      break;
    }
case CarouselConfig.SCROLL_MODE_BIG_ALL:
{
    minOffset=(int)(mConfig.getDiffScale() * contentSize) + mMinPagesOffset;
    contentSize*=mConfig.smallScale;
    break;
  }
case CarouselConfig.SCROLL_MODE_NONE:
{
  minOffset=mMinPagesOffset;
  break;
}
}
if (contentSize + 2 * minOffset > viewSize) {
Log.w(TAG,""String_Node_Str"");
return;
}
final float step=0.1f;
while (contentSize + 2 * contentSize * (mSidePagesVisiblePart - step) + 2 * minOffset > viewSize && Math.abs(mSidePagesVisiblePart - step) > 1e-6) {
mSidePagesVisiblePart-=step;
}
int fullPages=0;
final int s=viewSize - (int)(2 * contentSize * mSidePagesVisiblePart);
while (minOffset + (fullPages + 1) * (contentSize + minOffset) <= s) {
fullPages++;
}
if (fullPages != 0 && fullPages % 2 == 0) {
fullPages--;
}
int offset=(s - fullPages * contentSize) / (fullPages + 1);
if (Math.abs(mSidePagesVisiblePart) > 1e-6) {
mPageLimit=(fullPages + 2) - 1;
}
 else {
mPageLimit=fullPages - 1;
}
mPageLimit=2 * mPageLimit + mPageLimit / 2;
mConfig.pageLimit=mPageLimit;
if (mConfig.orientation == CarouselConfig.VERTICAL) {
mPageMargin=-(int)((viewSize - contentSize - offset) * mConfig.scaleY);
}
 else {
mPageMargin=-(viewSize - contentSize - offset);
}
mConfig.pageMargin=mPageMargin;
}",0.9910301712421854
88825,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  final int size=100;
  ArrayList<PageItem> items=new ArrayList<PageItem>(size);
  for (int i=0; i < size; i++) {
    items.add(new PageItem(""String_Node_Str"" + i));
  }
  mViewPager=(CarouselViewPager)findViewById(R.id.carousel_pager);
  mPagerAdapter=new CarouselPagerAdapter(getSupportFragmentManager(),mViewPager,this,items);
  mViewPager.setAdapter(mPagerAdapter);
  mViewPager.setOnPageChangeListener(mPagerAdapter);
  mViewPager.setCurrentItem(mPagerAdapter.getFirstPosition());
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  final int size=20;
  ArrayList<PageItem> items=new ArrayList<PageItem>(size);
  for (int i=0; i < size; i++) {
    items.add(new PageItem(""String_Node_Str"" + i));
  }
  mViewPager=(CarouselViewPager)findViewById(R.id.carousel_pager);
  mPagerAdapter=new CarouselPagerAdapter(getSupportFragmentManager(),this,items);
  mViewPager.setAdapter(mPagerAdapter);
  mViewPager.setOnPageChangeListener(mPagerAdapter);
  mViewPager.setCurrentItem(mPagerAdapter.getFirstPosition());
}",0.9887096774193548
88826,"protected Map<String,Object> readObject() throws ParseException, IOException {
  Map<String,Object> obj=this.containerFactory.createObjectContainer();
  if (c != '{')   throw new RuntimeException(""String_Node_Str"");
  handler.startObject();
  boolean needData=false;
  boolean acceptData=true;
  for (; ; ) {
    read();
switch (c) {
case ' ':
case '\r':
case '\t':
case '\n':
      continue;
case ':':
case ']':
case '[':
case '{':
    throw new ParseException(pos,ERROR_UNEXPECTED_CHAR,c);
case '}':
  if (needData && !acceptUselessComma)   throw new ParseException(pos,ERROR_UNEXPECTED_CHAR,(char)c);
read();
handler.endObject();
return obj;
case ',':
if (needData && !acceptUselessComma) throw new ParseException(pos,ERROR_UNEXPECTED_CHAR,(char)c);
acceptData=needData=true;
continue;
case '""':
case '\'':
default :
int keyStart=pos;
if (c == '\""' || c == '\'') {
readString();
}
 else {
readNQString(stopKey);
if (!acceptNonQuote) throw new ParseException(pos,ERROR_UNEXPECTED_TOKEN,xs);
}
String key=xs;
if (!acceptData) throw new ParseException(pos,ERROR_UNEXPECTED_TOKEN,key);
handler.startObjectEntry(key);
skipSpace();
if (c != ':') {
if (c == EOI) throw new ParseException(pos - 1,ERROR_UNEXPECTED_EOF,null);
throw new ParseException(pos - 1,ERROR_UNEXPECTED_CHAR,c);
}
readNoEnd();
Object duplicate=obj.put(key,readMain(stopValue));
if (duplicate != null) throw new ParseException(keyStart,ERROR_UNEXPECTED_DUPLICATE_KEY,key);
handler.endObjectEntry();
if (c == '}') {
read();
handler.endObject();
return obj;
}
if (c == EOI) throw new ParseException(pos - 1,ERROR_UNEXPECTED_EOF,null);
if (c == ',') acceptData=needData=true;
 else acceptData=needData=false;
continue;
}
}
}","protected Map<String,Object> readObject() throws ParseException, IOException {
  Map<String,Object> obj=this.containerFactory.createObjectContainer();
  if (c != '{')   throw new RuntimeException(""String_Node_Str"");
  handler.startObject();
  boolean needData=false;
  boolean acceptData=true;
  for (; ; ) {
    read();
switch (c) {
case ' ':
case '\r':
case '\t':
case '\n':
      continue;
case ':':
case ']':
case '[':
case '{':
    throw new ParseException(pos,ERROR_UNEXPECTED_CHAR,c);
case '}':
  if (needData && !acceptUselessComma)   throw new ParseException(pos,ERROR_UNEXPECTED_CHAR,(char)c);
read();
handler.endObject();
return obj;
case ',':
if (needData && !acceptUselessComma) throw new ParseException(pos,ERROR_UNEXPECTED_CHAR,(char)c);
acceptData=needData=true;
continue;
case '""':
case '\'':
default :
int keyStart=pos;
if (c == '\""' || c == '\'') {
readString();
}
 else {
readNQString(stopKey);
if (!acceptNonQuote) throw new ParseException(pos,ERROR_UNEXPECTED_TOKEN,xs);
}
String key=xs;
if (!acceptData) throw new ParseException(pos,ERROR_UNEXPECTED_TOKEN,key);
handler.startObjectEntry(key);
skipSpace();
if (c != ':') {
if (c == EOI) throw new ParseException(pos - 1,ERROR_UNEXPECTED_EOF,null);
throw new ParseException(pos - 1,ERROR_UNEXPECTED_CHAR,c);
}
readNoEnd();
Object duplicate=obj.put(key,readMain(stopValue));
if (duplicate != null) throw new ParseException(keyStart,ERROR_UNEXPECTED_DUPLICATE_KEY,key);
handler.endObjectEntry();
skipSpace();
if (c == '}') {
read();
handler.endObject();
return obj;
}
if (c == EOI) throw new ParseException(pos - 1,ERROR_UNEXPECTED_EOF,null);
if (c == ',') acceptData=needData=true;
 else throw new ParseException(pos - 1,ERROR_UNEXPECTED_TOKEN,c);
}
}
}",0.9689149560117302
88827,"public boolean mustBeProtect(final String s){
  if (s == null)   return false;
  int len=s.length();
  if (len == 0)   return true;
  if (s.trim() != s)   return true;
  char ch=s.charAt(0);
  if (isSpecial(ch) || isUnicode(ch))   return true;
  for (int i=1; i < len; i++) {
    ch=s.charAt(i);
    if (isSpecialClose(ch) || isUnicode(ch))     return true;
  }
  if (isKeyword(s))   return true;
  ch=s.charAt(0);
  if (ch >= '0' && ch <= '9' || ch == '-') {
    int p=1;
    for (; p < len; p++) {
      ch=s.charAt(p);
      if (ch < '0' || ch > '9')       break;
    }
    if (p == len)     return true;
    if (ch == '.') {
      p++;
      for (; p < len; p++) {
        ch=s.charAt(p);
        if (ch < '0' || ch > '9')         break;
      }
    }
    if (p == len)     return true;
    if (ch != 'E' || ch != 'e')     return false;
    p++;
    if (p == len)     return false;
    ch=s.charAt(p);
    if (ch == '+' || ch == '-') {
      ch++;
      if (p == len)       return false;
      ch=s.charAt(p);
    }
    if (ch == '+' || ch == '-') {
      ch++;
      if (p == len)       return false;
    }
    for (; p < len; p++) {
      ch=s.charAt(p);
      if (ch < '0' || ch > '9')       break;
    }
    if (p == len)     return true;
    return false;
  }
  return false;
}","public boolean mustBeProtect(final String s){
  if (s == null)   return false;
  int len=s.length();
  if (len == 0)   return true;
  if (s.trim() != s)   return true;
  char ch=s.charAt(0);
  if (isSpecial(ch) || isUnicode(ch))   return true;
  for (int i=1; i < len; i++) {
    ch=s.charAt(i);
    if (isSpecialClose(ch) || isUnicode(ch))     return true;
  }
  if (isKeyword(s))   return true;
  ch=s.charAt(0);
  if (ch >= '0' && ch <= '9' || ch == '-') {
    int p=1;
    for (; p < len; p++) {
      ch=s.charAt(p);
      if (ch < '0' || ch > '9')       break;
    }
    if (p == len)     return true;
    if (ch == '.') {
      p++;
    }
    for (; p < len; p++) {
      ch=s.charAt(p);
      if (ch < '0' || ch > '9')       break;
    }
    if (p == len)     return true;
    if (ch == 'E' || ch == 'e') {
      p++;
      if (p == len)       return false;
      ch=s.charAt(p);
      if (ch == '+' || ch == '-') {
        p++;
        ch=s.charAt(p);
      }
    }
    if (p == len)     return false;
    for (; p < len; p++) {
      ch=s.charAt(p);
      if (ch < '0' || ch > '9')       break;
    }
    if (p == len)     return true;
    return false;
  }
  return false;
}",0.6467017401861594
88828,"/** 
 * Encode an object into JSON text and write it to out. <p> If this object is a Map or a List, and it's also a JSONStreamAware or a JSONAware, JSONStreamAware or JSONAware will be considered firstly. <p>
 * @see JSONObject#writeJSON(Map,Appendable)
 * @see JSONArray#writeJSONString(List,Appendable)
 */
@SuppressWarnings(""String_Node_Str"") public static void writeJSONString(Object value,Appendable out,JSONStyle compression) throws IOException {
  if (value == null) {
    out.append(""String_Node_Str"");
    return;
  }
  if (value instanceof String) {
    if (!compression.mustProtectValue((String)value))     out.append((String)value);
 else {
      out.append('""');
      escape((String)value,out,compression);
      out.append('""');
    }
    return;
  }
  if (value instanceof Number) {
    if (value instanceof Double) {
      if (((Double)value).isInfinite())       out.append(""String_Node_Str"");
 else       out.append(value.toString());
    }
 else     if (value instanceof Float) {
      if (((Float)value).isInfinite())       out.append(""String_Node_Str"");
 else       out.append(value.toString());
    }
 else {
      out.append(value.toString());
    }
    return;
  }
  if (value instanceof Boolean) {
    out.append(value.toString());
  }
 else   if ((value instanceof JSONStreamAware)) {
    if (value instanceof JSONStreamAwareEx)     ((JSONStreamAwareEx)value).writeJSONString(out,compression);
 else     ((JSONStreamAware)value).writeJSONString(out);
  }
 else   if ((value instanceof JSONAware)) {
    if ((value instanceof JSONAwareEx))     out.append(((JSONAwareEx)value).toJSONString(compression));
 else     out.append(((JSONAware)value).toJSONString());
  }
 else   if (value instanceof Map<?,?>) {
    JSONObject.writeJSON((Map<String,Object>)value,out,compression);
  }
 else   if (value instanceof Iterable<?>) {
    JSONArray.writeJSONString((Iterable<Object>)value,out,compression);
  }
 else   if (value instanceof Date) {
    JSONValue.writeJSONString(value.toString(),out,compression);
  }
 else   if (value instanceof Enum<?>) {
    @SuppressWarnings(""String_Node_Str"") String s=((Enum)value).name();
    if (!compression.mustProtectValue(s))     out.append(s);
 else {
      out.append('""');
      escape(s,out,compression);
      out.append('""');
    }
    return;
  }
 else   if (value.getClass().isArray()) {
    Class<?> arrayClz=value.getClass();
    Class<?> c=arrayClz.getComponentType();
    out.append('[');
    boolean needSep=false;
    if (c.isPrimitive()) {
      if (c == int.class) {
        for (        int b : ((int[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Integer.toString(b));
        }
      }
 else       if (c == short.class) {
        for (        short b : ((short[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Short.toString(b));
        }
      }
 else       if (c == byte.class) {
        for (        byte b : ((byte[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Byte.toString(b));
        }
      }
 else       if (c == long.class) {
        for (        long b : ((long[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Long.toString(b));
        }
      }
 else       if (c == float.class) {
        for (        float b : ((float[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Float.toString((float)b));
        }
      }
 else       if (c == double.class) {
        for (        double b : ((double[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Double.toString((double)b));
        }
      }
 else       if (c == boolean.class) {
        for (        boolean b : ((boolean[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          if (b)           out.append(""String_Node_Str"");
 else           out.append(""String_Node_Str"");
        }
      }
    }
 else {
      for (      Object o : ((Object[])value)) {
        if (needSep)         out.append(',');
 else         needSep=true;
        writeJSONString(o,out,compression);
      }
    }
    out.append(']');
  }
 else {
    try {
      Class<?> cls=value.getClass();
      boolean needSep=false;
      Field[] fields=cls.getDeclaredFields();
      out.append('{');
      for (      Field field : fields) {
        int m=field.getModifiers();
        if ((m & (Modifier.STATIC | Modifier.TRANSIENT | Modifier.FINAL)) > 0)         continue;
        Object v=null;
        if ((m & Modifier.PUBLIC) > 0) {
          v=field.get(value);
        }
 else {
          String g=JSONUtil.getGetterName(field.getName());
          Method mtd=null;
          try {
            mtd=cls.getDeclaredMethod(g);
          }
 catch (          Exception e) {
          }
          if (mtd == null) {
            Class<?> c2=field.getType();
            if (c2 == Boolean.TYPE || c2 == Boolean.class) {
              g=JSONUtil.getIsName(field.getName());
              mtd=cls.getDeclaredMethod(g);
            }
          }
          if (mtd == null)           continue;
          v=mtd.invoke(value);
        }
        if (needSep)         out.append(',');
 else         needSep=true;
        JSONObject.writeJSONKV(field.getName(),v,out,compression);
      }
      out.append('}');
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}","/** 
 * Encode an object into JSON text and write it to out. <p> If this object is a Map or a List, and it's also a JSONStreamAware or a JSONAware, JSONStreamAware or JSONAware will be considered firstly. <p>
 * @see JSONObject#writeJSON(Map,Appendable)
 * @see JSONArray#writeJSONString(List,Appendable)
 */
@SuppressWarnings(""String_Node_Str"") public static void writeJSONString(Object value,Appendable out,JSONStyle compression) throws IOException {
  if (value == null) {
    out.append(""String_Node_Str"");
    return;
  }
  if (value instanceof String) {
    if (!compression.mustProtectValue((String)value))     out.append((String)value);
 else {
      out.append('""');
      escape((String)value,out,compression);
      out.append('""');
    }
    return;
  }
  if (value instanceof Number) {
    if (value instanceof Double) {
      if (((Double)value).isInfinite())       out.append(""String_Node_Str"");
 else       out.append(value.toString());
    }
 else     if (value instanceof Float) {
      if (((Float)value).isInfinite())       out.append(""String_Node_Str"");
 else       out.append(value.toString());
    }
 else {
      out.append(value.toString());
    }
    return;
  }
  if (value instanceof Boolean) {
    out.append(value.toString());
  }
 else   if ((value instanceof JSONStreamAware)) {
    if (value instanceof JSONStreamAwareEx)     ((JSONStreamAwareEx)value).writeJSONString(out,compression);
 else     ((JSONStreamAware)value).writeJSONString(out);
  }
 else   if ((value instanceof JSONAware)) {
    if ((value instanceof JSONAwareEx))     out.append(((JSONAwareEx)value).toJSONString(compression));
 else     out.append(((JSONAware)value).toJSONString());
  }
 else   if (value instanceof Map<?,?>) {
    JSONObject.writeJSON((Map<String,Object>)value,out,compression);
  }
 else   if (value instanceof Iterable<?>) {
    JSONArray.writeJSONString((Iterable<Object>)value,out,compression);
  }
 else   if (value instanceof Date) {
    JSONValue.writeJSONString(value.toString(),out,compression);
  }
 else   if (value instanceof Enum<?>) {
    @SuppressWarnings(""String_Node_Str"") String s=((Enum)value).name();
    if (!compression.mustProtectValue(s))     out.append(s);
 else {
      out.append('""');
      escape(s,out,compression);
      out.append('""');
    }
    return;
  }
 else   if (value.getClass().isArray()) {
    Class<?> arrayClz=value.getClass();
    Class<?> c=arrayClz.getComponentType();
    out.append('[');
    boolean needSep=false;
    if (c.isPrimitive()) {
      if (c == int.class) {
        for (        int b : ((int[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Integer.toString(b));
        }
      }
 else       if (c == short.class) {
        for (        short b : ((short[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Short.toString(b));
        }
      }
 else       if (c == byte.class) {
        for (        byte b : ((byte[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Byte.toString(b));
        }
      }
 else       if (c == long.class) {
        for (        long b : ((long[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Long.toString(b));
        }
      }
 else       if (c == float.class) {
        for (        float b : ((float[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Float.toString((float)b));
        }
      }
 else       if (c == double.class) {
        for (        double b : ((double[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Double.toString((double)b));
        }
      }
 else       if (c == boolean.class) {
        for (        boolean b : ((boolean[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          if (b)           out.append(""String_Node_Str"");
 else           out.append(""String_Node_Str"");
        }
      }
    }
 else {
      for (      Object o : ((Object[])value)) {
        if (needSep)         out.append(',');
 else         needSep=true;
        writeJSONString(o,out,compression);
      }
    }
    out.append(']');
  }
 else {
    try {
      Class<?> nextClass=value.getClass();
      boolean needSep=false;
      out.append('{');
      while (nextClass != Object.class) {
        Field[] fields=nextClass.getDeclaredFields();
        for (        Field field : fields) {
          int m=field.getModifiers();
          if ((m & (Modifier.STATIC | Modifier.TRANSIENT | Modifier.FINAL)) > 0)           continue;
          Object v=null;
          if ((m & Modifier.PUBLIC) > 0) {
            v=field.get(value);
          }
 else {
            String g=JSONUtil.getGetterName(field.getName());
            Method mtd=null;
            try {
              mtd=nextClass.getDeclaredMethod(g);
            }
 catch (            Exception e) {
            }
            if (mtd == null) {
              Class<?> c2=field.getType();
              if (c2 == Boolean.TYPE || c2 == Boolean.class) {
                g=JSONUtil.getIsName(field.getName());
                mtd=nextClass.getDeclaredMethod(g);
              }
            }
            if (mtd == null)             continue;
            v=mtd.invoke(value);
          }
          if (needSep)           out.append(',');
 else           needSep=true;
          JSONObject.writeJSONKV(field.getName(),v,out,compression);
        }
        nextClass=nextClass.getSuperclass();
      }
      out.append('}');
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}",0.9682386910490856
88829,"public static void testInvalidJson(String json,int permissifMode,int execptionType) throws Exception {
  JSONParser p=new JSONParser(execptionType);
  try {
    p.parse(json);
    TestCase.assertFalse(""String_Node_Str"" + json,true);
  }
 catch (  ParseException e) {
    if (execptionType == -1)     execptionType=e.getErrorType();
    TestCase.assertEquals(execptionType,e.getErrorType());
  }
}","public static void testInvalidJson(String json,int permissifMode,int execptionType) throws Exception {
  JSONParser p=new JSONParser(permissifMode);
  try {
    p.parse(json);
    TestCase.assertFalse(""String_Node_Str"" + json,true);
  }
 catch (  ParseException e) {
    if (execptionType == -1)     execptionType=e.getErrorType();
    TestCase.assertEquals(execptionType,e.getErrorType());
  }
}",0.9696969696969696
88830,"/** 
 * Encode an object into JSON text and write it to out. <p> If this object is a Map or a List, and it's also a JSONStreamAware or a JSONAware, JSONStreamAware or JSONAware will be considered firstly. <p>
 * @see JSONObject#writeJSON(Map,Appendable)
 * @see JSONArray#writeJSONString(List,Appendable)
 */
@SuppressWarnings(""String_Node_Str"") public static void writeJSONString(Object value,Appendable out,JSONStyle compression) throws IOException {
  if (value == null) {
    out.append(""String_Node_Str"");
    return;
  }
  if (value instanceof String) {
    if (!compression.mustProtectValue((String)value))     out.append((String)value);
 else {
      out.append('""');
      escape((String)value,out,compression);
      out.append('""');
    }
    return;
  }
  if (value instanceof Number) {
    if (value instanceof Double) {
      if (((Double)value).isInfinite())       out.append(""String_Node_Str"");
 else       out.append(value.toString());
    }
 else     if (value instanceof Float) {
      if (((Float)value).isInfinite())       out.append(""String_Node_Str"");
 else       out.append(value.toString());
    }
 else {
      out.append(value.toString());
    }
    return;
  }
  if (value instanceof Boolean) {
    out.append(value.toString());
  }
 else   if ((value instanceof JSONStreamAware)) {
    if (value instanceof JSONStreamAwareEx)     ((JSONStreamAwareEx)value).writeJSONString(out,compression);
 else     ((JSONStreamAware)value).writeJSONString(out);
  }
 else   if ((value instanceof JSONAware)) {
    if ((value instanceof JSONAwareEx))     out.append(((JSONAwareEx)value).toJSONString(compression));
 else     out.append(((JSONAware)value).toJSONString());
  }
 else   if (value instanceof Map<?,?>) {
    JSONObject.writeJSON((Map<String,Object>)value,out,compression);
  }
 else   if (value instanceof Iterable<?>) {
    JSONArray.writeJSONString((Iterable<Object>)value,out,compression);
  }
 else   if (value instanceof Date) {
    JSONValue.writeJSONString(value.toString(),out,compression);
  }
 else   if (value instanceof Enum<?>) {
    @SuppressWarnings(""String_Node_Str"") String s=((Enum)value).name();
    if (!compression.mustProtectValue(s))     out.append(s);
 else {
      out.append('""');
      escape(s,out,compression);
      out.append('""');
    }
    return;
  }
 else   if (value.getClass().isArray()) {
    Class<?> arrayClz=value.getClass();
    Class<?> c=arrayClz.getComponentType();
    out.append('[');
    boolean needSep=false;
    if (c.isPrimitive()) {
      if (c == int.class) {
        for (        int b : ((int[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          appendInt(b,out);
        }
      }
 else       if (c == short.class) {
        for (        int b : ((short[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          appendInt(b,out);
        }
      }
 else       if (c == byte.class) {
        for (        int b : ((byte[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          appendInt(b,out);
        }
      }
 else       if (c == long.class) {
        for (        long b : ((long[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          if (b < 0) {
            out.append('-');
            b=-b;
          }
          do {
            out.append(DIGITS[(int)(b % 10)]);
            b=b / 10;
          }
 while (b > 0);
        }
      }
 else       if (c == float.class) {
        for (        float b : ((float[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Float.toString((float)b));
        }
      }
 else       if (c == double.class) {
        for (        double b : ((double[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Double.toString((double)b));
        }
      }
 else       if (c == boolean.class) {
        for (        boolean b : ((boolean[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          if (b)           out.append(""String_Node_Str"");
 else           out.append(""String_Node_Str"");
        }
      }
    }
 else {
      for (      Object o : ((Object[])value)) {
        if (needSep)         out.append(',');
 else         needSep=true;
        writeJSONString(o,out,compression);
      }
    }
    out.append(']');
  }
 else {
    try {
      Class<?> cls=value.getClass();
      boolean needSep=false;
      Field[] fields=cls.getDeclaredFields();
      out.append('{');
      for (      Field field : fields) {
        int m=field.getModifiers();
        if ((m & (Modifier.STATIC | Modifier.TRANSIENT | Modifier.FINAL)) > 0)         continue;
        Object v=null;
        if ((m & Modifier.PUBLIC) > 0) {
          v=field.get(value);
        }
 else {
          String g=JSONUtil.getGetterName(field.getName());
          Method mtd=null;
          try {
            mtd=cls.getDeclaredMethod(g);
          }
 catch (          Exception e) {
          }
          if (mtd == null) {
            Class<?> c2=field.getType();
            if (c2 == Boolean.TYPE || c2 == Boolean.class) {
              g=JSONUtil.getIsName(field.getName());
              mtd=cls.getDeclaredMethod(g);
            }
          }
          if (mtd == null)           continue;
          v=mtd.invoke(value);
        }
        if (needSep)         out.append(',');
 else         needSep=true;
        JSONObject.writeJSONKV(field.getName(),v,out,compression);
      }
      out.append('}');
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}","/** 
 * Encode an object into JSON text and write it to out. <p> If this object is a Map or a List, and it's also a JSONStreamAware or a JSONAware, JSONStreamAware or JSONAware will be considered firstly. <p>
 * @see JSONObject#writeJSON(Map,Appendable)
 * @see JSONArray#writeJSONString(List,Appendable)
 */
@SuppressWarnings(""String_Node_Str"") public static void writeJSONString(Object value,Appendable out,JSONStyle compression) throws IOException {
  if (value == null) {
    out.append(""String_Node_Str"");
    return;
  }
  if (value instanceof String) {
    if (!compression.mustProtectValue((String)value))     out.append((String)value);
 else {
      out.append('""');
      escape((String)value,out,compression);
      out.append('""');
    }
    return;
  }
  if (value instanceof Number) {
    if (value instanceof Double) {
      if (((Double)value).isInfinite())       out.append(""String_Node_Str"");
 else       out.append(value.toString());
    }
 else     if (value instanceof Float) {
      if (((Float)value).isInfinite())       out.append(""String_Node_Str"");
 else       out.append(value.toString());
    }
 else {
      out.append(value.toString());
    }
    return;
  }
  if (value instanceof Boolean) {
    out.append(value.toString());
  }
 else   if ((value instanceof JSONStreamAware)) {
    if (value instanceof JSONStreamAwareEx)     ((JSONStreamAwareEx)value).writeJSONString(out,compression);
 else     ((JSONStreamAware)value).writeJSONString(out);
  }
 else   if ((value instanceof JSONAware)) {
    if ((value instanceof JSONAwareEx))     out.append(((JSONAwareEx)value).toJSONString(compression));
 else     out.append(((JSONAware)value).toJSONString());
  }
 else   if (value instanceof Map<?,?>) {
    JSONObject.writeJSON((Map<String,Object>)value,out,compression);
  }
 else   if (value instanceof Iterable<?>) {
    JSONArray.writeJSONString((Iterable<Object>)value,out,compression);
  }
 else   if (value instanceof Date) {
    JSONValue.writeJSONString(value.toString(),out,compression);
  }
 else   if (value instanceof Enum<?>) {
    @SuppressWarnings(""String_Node_Str"") String s=((Enum)value).name();
    if (!compression.mustProtectValue(s))     out.append(s);
 else {
      out.append('""');
      escape(s,out,compression);
      out.append('""');
    }
    return;
  }
 else   if (value.getClass().isArray()) {
    Class<?> arrayClz=value.getClass();
    Class<?> c=arrayClz.getComponentType();
    out.append('[');
    boolean needSep=false;
    if (c.isPrimitive()) {
      if (c == int.class) {
        for (        int b : ((int[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Integer.toString(b));
        }
      }
 else       if (c == short.class) {
        for (        short b : ((short[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Short.toString(b));
        }
      }
 else       if (c == byte.class) {
        for (        byte b : ((byte[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Byte.toString(b));
        }
      }
 else       if (c == long.class) {
        for (        long b : ((long[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Long.toString(b));
        }
      }
 else       if (c == float.class) {
        for (        float b : ((float[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Float.toString((float)b));
        }
      }
 else       if (c == double.class) {
        for (        double b : ((double[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          out.append(Double.toString((double)b));
        }
      }
 else       if (c == boolean.class) {
        for (        boolean b : ((boolean[])value)) {
          if (needSep)           out.append(',');
 else           needSep=true;
          if (b)           out.append(""String_Node_Str"");
 else           out.append(""String_Node_Str"");
        }
      }
    }
 else {
      for (      Object o : ((Object[])value)) {
        if (needSep)         out.append(',');
 else         needSep=true;
        writeJSONString(o,out,compression);
      }
    }
    out.append(']');
  }
 else {
    try {
      Class<?> cls=value.getClass();
      boolean needSep=false;
      Field[] fields=cls.getDeclaredFields();
      out.append('{');
      for (      Field field : fields) {
        int m=field.getModifiers();
        if ((m & (Modifier.STATIC | Modifier.TRANSIENT | Modifier.FINAL)) > 0)         continue;
        Object v=null;
        if ((m & Modifier.PUBLIC) > 0) {
          v=field.get(value);
        }
 else {
          String g=JSONUtil.getGetterName(field.getName());
          Method mtd=null;
          try {
            mtd=cls.getDeclaredMethod(g);
          }
 catch (          Exception e) {
          }
          if (mtd == null) {
            Class<?> c2=field.getType();
            if (c2 == Boolean.TYPE || c2 == Boolean.class) {
              g=JSONUtil.getIsName(field.getName());
              mtd=cls.getDeclaredMethod(g);
            }
          }
          if (mtd == null)           continue;
          v=mtd.invoke(value);
        }
        if (needSep)         out.append(',');
 else         needSep=true;
        JSONObject.writeJSONKV(field.getName(),v,out,compression);
      }
      out.append('}');
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}",0.971025979744606
88831,"protected void extractString(int beginIndex,int endIndex){
  xs=new String(in,beginIndex,endIndex);
}","protected void extractString(int beginIndex,int endIndex){
  xs=new String(in,beginIndex,endIndex - beginIndex);
}",0.9395348837209302
88832,"/** 
 * Escape special chars form String including /
 * @param s - Must not be null.
 * @param sb
 */
public static void escape(String s,Appendable sb){
  try {
    for (int i=0; i < s.length(); i++) {
      char ch=s.charAt(i);
switch (ch) {
case '""':
        sb.append(""String_Node_Str"");
      break;
case '\\':
    sb.append(""String_Node_Str"");
  break;
case '\b':
sb.append(""String_Node_Str"");
break;
case '\f':
sb.append(""String_Node_Str"");
break;
case '\n':
sb.append(""String_Node_Str"");
break;
case '\r':
sb.append(""String_Node_Str"");
break;
case '\t':
sb.append(""String_Node_Str"");
break;
case '/':
sb.append(""String_Node_Str"");
break;
default :
if ((ch >= '\u0000' && ch <= '\u001F') || (ch >= '\u007F' && ch <= '\u009F') || (ch >= '\u2000' && ch <= '\u20FF')) {
sb.append(""String_Node_Str"");
String hex=""String_Node_Str"";
sb.append(hex.charAt(ch >> 12 & 0x0F));
sb.append(hex.charAt(ch >> 8 & 0x0F));
sb.append(hex.charAt(ch >> 4 & 0x0F));
sb.append(hex.charAt(ch >> 0 & 0x0F));
}
 else {
sb.append(ch);
}
}
}
}
 catch (IOException e) {
throw new RuntimeException(""String_Node_Str"");
}
}","/** 
 * Escape special chars form String including /
 * @param s - Must not be null.
 * @param sb
 */
public static void escape(String s,Appendable sb){
  try {
    int len=s.length();
    for (int i=0; i < len; i++) {
      char ch=s.charAt(i);
switch (ch) {
case '""':
        sb.append(""String_Node_Str"");
      break;
case '\\':
    sb.append(""String_Node_Str"");
  break;
case '\b':
sb.append(""String_Node_Str"");
break;
case '\f':
sb.append(""String_Node_Str"");
break;
case '\n':
sb.append(""String_Node_Str"");
break;
case '\r':
sb.append(""String_Node_Str"");
break;
case '\t':
sb.append(""String_Node_Str"");
break;
case '/':
sb.append(""String_Node_Str"");
break;
default :
if ((ch >= '\u0000' && ch <= '\u001F') || (ch >= '\u007F' && ch <= '\u009F') || (ch >= '\u2000' && ch <= '\u20FF')) {
sb.append(""String_Node_Str"");
String hex=""String_Node_Str"";
sb.append(hex.charAt(ch >> 12 & 0x0F));
sb.append(hex.charAt(ch >> 8 & 0x0F));
sb.append(hex.charAt(ch >> 4 & 0x0F));
sb.append(hex.charAt(ch >> 0 & 0x0F));
}
 else {
sb.append(ch);
}
}
}
}
 catch (IOException e) {
throw new RuntimeException(""String_Node_Str"");
}
}",0.9859918662449164
88833,"public boolean mustBeProtect(String s){
  if (s == null)   return false;
  int len=s.length();
  if (len == 0)   return true;
  if (s.trim() != s)   return true;
  char ch=s.charAt(0);
  if (isSpecial(ch) || isUnicode(ch))   return true;
  for (int i=1; i < len; i++) {
    ch=s.charAt(i);
    if (isSpecialClose(ch) || isUnicode(ch))     return true;
  }
  if (isKeyword(s))   return true;
  ch=s.charAt(0);
  if (ch >= '0' && ch <= '9' || ch == '-') {
    int p=1;
    for (; p < s.length(); p++) {
      ch=s.charAt(p);
      if (ch < '0' || ch > '9')       break;
    }
    if (p == s.length())     return true;
    if (ch == '.') {
      p++;
      for (; p < s.length(); p++) {
        ch=s.charAt(p);
        if (ch < '0' || ch > '9')         break;
      }
    }
    if (p == s.length())     return true;
    if (ch != 'E' || ch != 'e')     return false;
    p++;
    if (p == s.length())     return false;
    ch=s.charAt(p);
    if (ch == '+' || ch == '-') {
      ch++;
      if (p == s.length())       return false;
      ch=s.charAt(p);
    }
    if (ch == '+' || ch == '-') {
      ch++;
      if (p == s.length())       return false;
    }
    for (; p < s.length(); p++) {
      ch=s.charAt(p);
      if (ch < '0' || ch > '9')       break;
    }
    if (p == s.length())     return true;
    return false;
  }
  return false;
}","public boolean mustBeProtect(final String s){
  if (s == null)   return false;
  int len=s.length();
  if (len == 0)   return true;
  if (s.trim() != s)   return true;
  char ch=s.charAt(0);
  if (isSpecial(ch) || isUnicode(ch))   return true;
  for (int i=1; i < len; i++) {
    ch=s.charAt(i);
    if (isSpecialClose(ch) || isUnicode(ch))     return true;
  }
  if (isKeyword(s))   return true;
  ch=s.charAt(0);
  if (ch >= '0' && ch <= '9' || ch == '-') {
    int p=1;
    for (; p < len; p++) {
      ch=s.charAt(p);
      if (ch < '0' || ch > '9')       break;
    }
    if (p == len)     return true;
    if (ch == '.') {
      p++;
      for (; p < len; p++) {
        ch=s.charAt(p);
        if (ch < '0' || ch > '9')         break;
      }
    }
    if (p == len)     return true;
    if (ch != 'E' || ch != 'e')     return false;
    p++;
    if (p == len)     return false;
    ch=s.charAt(p);
    if (ch == '+' || ch == '-') {
      ch++;
      if (p == len)       return false;
      ch=s.charAt(p);
    }
    if (ch == '+' || ch == '-') {
      ch++;
      if (p == len)       return false;
    }
    for (; p < len; p++) {
      ch=s.charAt(p);
      if (ch < '0' || ch > '9')       break;
    }
    if (p == len)     return true;
    return false;
  }
  return false;
}",0.5074172689235451
88834,"/** 
 * Escape special chars form String including /
 * @param s - Must not be null.
 * @param sb
 */
public void escape(String s,Appendable sb){
  try {
    for (int i=0; i < s.length(); i++) {
      char ch=s.charAt(i);
switch (ch) {
case '""':
        sb.append(""String_Node_Str"");
      break;
case '\\':
    sb.append(""String_Node_Str"");
  break;
case '\b':
sb.append(""String_Node_Str"");
break;
case '\f':
sb.append(""String_Node_Str"");
break;
case '\n':
sb.append(""String_Node_Str"");
break;
case '\r':
sb.append(""String_Node_Str"");
break;
case '\t':
sb.append(""String_Node_Str"");
break;
case '/':
sb.append(""String_Node_Str"");
break;
default :
if ((ch >= '\u0000' && ch <= '\u001F') || (ch >= '\u007F' && ch <= '\u009F') || (ch >= '\u2000' && ch <= '\u20FF')) {
sb.append(""String_Node_Str"");
String hex=""String_Node_Str"";
sb.append(hex.charAt(ch >> 12 & 0x0F));
sb.append(hex.charAt(ch >> 8 & 0x0F));
sb.append(hex.charAt(ch >> 4 & 0x0F));
sb.append(hex.charAt(ch >> 0 & 0x0F));
}
 else {
sb.append(ch);
}
}
}
}
 catch (IOException e) {
throw new RuntimeException(""String_Node_Str"");
}
}","/** 
 * Escape special chars form String including /
 * @param s - Must not be null.
 * @param sb
 */
public void escape(String s,Appendable sb){
  try {
    int len=s.length();
    for (int i=0; i < len; i++) {
      char ch=s.charAt(i);
switch (ch) {
case '""':
        sb.append(""String_Node_Str"");
      break;
case '\\':
    sb.append(""String_Node_Str"");
  break;
case '\b':
sb.append(""String_Node_Str"");
break;
case '\f':
sb.append(""String_Node_Str"");
break;
case '\n':
sb.append(""String_Node_Str"");
break;
case '\r':
sb.append(""String_Node_Str"");
break;
case '\t':
sb.append(""String_Node_Str"");
break;
case '/':
sb.append(""String_Node_Str"");
break;
default :
if ((ch >= '\u0000' && ch <= '\u001F') || (ch >= '\u007F' && ch <= '\u009F') || (ch >= '\u2000' && ch <= '\u20FF')) {
sb.append(""String_Node_Str"");
String hex=""String_Node_Str"";
sb.append(hex.charAt(ch >> 12 & 0x0F));
sb.append(hex.charAt(ch >> 8 & 0x0F));
sb.append(hex.charAt(ch >> 4 & 0x0F));
sb.append(hex.charAt(ch >> 0 & 0x0F));
}
 else {
sb.append(ch);
}
}
}
}
 catch (IOException e) {
throw new RuntimeException(""String_Node_Str"");
}
}",0.9859026830377444
88835,"/** 
 * Same as read() in memory parssing
 */
protected void readS(){
  if (++pos >= len)   this.c=EOI;
 else   this.c=(char)in[pos];
}","/** 
 * Same as read() in memory parsing
 */
protected void readS(){
  if (++pos >= len)   this.c=EOI;
 else   this.c=(char)in[pos];
}",0.9962825278810408
88836,abstract protected void read() throws IOException ;,"/** 
 * Read one char in this.c
 * @throws IOException
 */
abstract protected void read() throws IOException ;",0.6335403726708074
88837,"protected Map<String,Object> readObject() throws ParseException, IOException {
  Map<String,Object> obj=this.containerFactory.createObjectContainer();
  if (c != '{')   throw new RuntimeException(""String_Node_Str"");
  handler.startObject();
  boolean needData=false;
  boolean acceptData=true;
  for (; ; ) {
    read();
switch (c) {
case ' ':
case '\r':
case '\t':
case '\n':
      continue;
case ':':
case ']':
case '[':
case '{':
    throw new ParseException(pos,ERROR_UNEXPECTED_CHAR,c);
case '}':
  if (needData && !acceptUselessComma)   throw new ParseException(pos,ERROR_UNEXPECTED_CHAR,(char)c);
read();
handler.endObject();
return obj;
case ',':
if (needData && !acceptUselessComma) throw new ParseException(pos,ERROR_UNEXPECTED_CHAR,(char)c);
acceptData=needData=true;
continue;
case '""':
case '\'':
default :
int keyStart=pos;
if (c == '\""' || c == '\'') {
readString();
}
 else {
readNQString(stopKey);
if (!acceptNonQuote) throw new ParseException(pos,ERROR_UNEXPECTED_TOKEN,xs);
}
String key=xs;
if (!acceptData) throw new ParseException(pos,ERROR_UNEXPECTED_TOKEN,key);
handler.startObjectEntry(key);
while (c != ':' && c != EOI) {
read();
}
if (c == EOI) throw new ParseException(pos - 1,ERROR_UNEXPECTED_EOF,null);
readNoEnd();
Object duplicate=obj.put(key,readMain(stopValue));
if (duplicate != null) throw new ParseException(keyStart,ERROR_UNEXPECTED_DUPLICATE_KEY,key);
handler.endObjectEntry();
if (c == '}') {
read();
handler.endObject();
return obj;
}
if (c == EOI) throw new ParseException(pos - 1,ERROR_UNEXPECTED_EOF,null);
if (c == ',') acceptData=needData=true;
 else acceptData=needData=false;
continue;
}
}
}","protected Map<String,Object> readObject() throws ParseException, IOException {
  Map<String,Object> obj=this.containerFactory.createObjectContainer();
  if (c != '{')   throw new RuntimeException(""String_Node_Str"");
  handler.startObject();
  boolean needData=false;
  boolean acceptData=true;
  for (; ; ) {
    read();
switch (c) {
case ' ':
case '\r':
case '\t':
case '\n':
      continue;
case ':':
case ']':
case '[':
case '{':
    throw new ParseException(pos,ERROR_UNEXPECTED_CHAR,c);
case '}':
  if (needData && !acceptUselessComma)   throw new ParseException(pos,ERROR_UNEXPECTED_CHAR,(char)c);
read();
handler.endObject();
return obj;
case ',':
if (needData && !acceptUselessComma) throw new ParseException(pos,ERROR_UNEXPECTED_CHAR,(char)c);
acceptData=needData=true;
continue;
case '""':
case '\'':
default :
int keyStart=pos;
if (c == '\""' || c == '\'') {
readString();
}
 else {
readNQString(stopKey);
if (!acceptNonQuote) throw new ParseException(pos,ERROR_UNEXPECTED_TOKEN,xs);
}
String key=xs;
if (!acceptData) throw new ParseException(pos,ERROR_UNEXPECTED_TOKEN,key);
handler.startObjectEntry(key);
skipSpace();
if (c != ':') {
if (c == EOI) throw new ParseException(pos - 1,ERROR_UNEXPECTED_EOF,null);
throw new ParseException(pos - 1,ERROR_UNEXPECTED_CHAR,c);
}
readNoEnd();
Object duplicate=obj.put(key,readMain(stopValue));
if (duplicate != null) throw new ParseException(keyStart,ERROR_UNEXPECTED_DUPLICATE_KEY,key);
handler.endObjectEntry();
if (c == '}') {
read();
handler.endObject();
return obj;
}
if (c == EOI) throw new ParseException(pos - 1,ERROR_UNEXPECTED_EOF,null);
if (c == ',') acceptData=needData=true;
 else acceptData=needData=false;
continue;
}
}
}",0.9690225563909776
88838,"protected void read(){
  if (++pos >= len)   this.c=EOI;
 else   this.c=in.charAt(pos);
}","/** 
 * Read next char or END OF INPUT
 */
protected void read(){
  if (++pos >= len)   this.c=EOI;
 else   this.c=in.charAt(pos);
}",0.8054298642533937
88839,"/** 
 * Same as read() in memory parssing
 */
protected void readS(){
  if (++pos >= len)   this.c=EOI;
 else   this.c=in.charAt(pos);
}","/** 
 * Same as read() in memory parsing
 */
protected void readS(){
  if (++pos >= len)   this.c=EOI;
 else   this.c=in.charAt(pos);
}",0.996309963099631
88840,"@Override public void open(Map conf,TopologyContext context,SpoutOutputCollector _collector){
  collector=_collector;
  ConsumerConfig config=new ConsumerConfig();
  try {
    consumer=new Consumer(topic,group,config);
  }
 catch (  LionException e) {
    throw new RuntimeException(e);
  }
  stream=consumer.getStream();
  fetchThread=new Thread(new Handler());
  fetchThread.start();
}","@Override public void open(Map conf,TopologyContext context,SpoutOutputCollector _collector){
  collector=_collector;
  ConsumerConfig config=new ConsumerConfig();
  try {
    consumer=new Consumer(topic,group,config);
  }
 catch (  LionException e) {
    throw new RuntimeException(e);
  }
  stream=consumer.getStream();
  fetchThread=new FetchThread();
  fetchThread.start();
}",0.9765013054830288
88841,"private void prepareJsVariables(ResponseEntity<String> httpResponse){
  this.responseCode=new NativeObject();
  if (httpResponse != null) {
    Map<String,String> headers=httpResponse.getHeaders().toSingleValueMap();
    List<Object> headerList=new ArrayList<Object>(headers.size());
    for (    Map.Entry h : headers.entrySet()) {
      NativeObject hobj=new NativeObject();
      hobj.put(""String_Node_Str"",hobj,h.getKey());
      hobj.put(""String_Node_Str"",hobj,h.getValue());
      headerList.add(hobj);
    }
    this.responseHeaders=new NativeArray(headerList.toArray());
    this.responseBody=Context.javaToJS(httpResponse.getBody(),scope);
    this.responseCode.put(""String_Node_Str"",responseCode,httpResponse.getStatusCode().value());
    this.responseCode.put(""String_Node_Str"",responseCode,httpResponse.getStatusCode().name());
    this.responseCode.put(""String_Node_Str"",responseCode,httpResponse.getStatusCode().toString());
  }
 else {
    this.responseHeaders=new NativeArray(new Object[]{});
    this.responseBody=Context.javaToJS(""String_Node_Str"",scope);
    this.responseCode.put(""String_Node_Str"",responseCode,0);
    this.responseCode.put(""String_Node_Str"",responseCode,""String_Node_Str"");
    this.responseCode.put(""String_Node_Str"",responseCode,""String_Node_Str"");
  }
  this.responseTime=Context.javaToJS(0.0,scope);
  this.iteration=Context.javaToJS(0,scope);
  this.postman=Context.javaToJS(this.env,scope);
  this.environment=new NativeObject();
  Set<Map.Entry<String,PostmanEnvValue>> map=this.env.lookup.entrySet();
  for (  Map.Entry<String,PostmanEnvValue> e : map) {
    this.environment.put(e.getKey(),environment,e.getValue());
  }
  this.tests=new NativeObject();
}","private void prepareJsVariables(ResponseEntity<String> httpResponse){
  this.responseCode=new NativeObject();
  if (httpResponse != null) {
    Map<String,String> headers=httpResponse.getHeaders().toSingleValueMap();
    List<Object> headerList=new ArrayList<Object>(headers.size());
    for (    Map.Entry h : headers.entrySet()) {
      NativeObject hobj=new NativeObject();
      hobj.put(""String_Node_Str"",hobj,h.getKey());
      hobj.put(""String_Node_Str"",hobj,h.getValue());
      headerList.add(hobj);
    }
    this.responseHeaders=new NativeArray(headerList.toArray());
    this.responseBody=Context.javaToJS(httpResponse.getBody(),scope);
    this.responseCode.put(""String_Node_Str"",responseCode,httpResponse.getStatusCode().value());
    this.responseCode.put(""String_Node_Str"",responseCode,httpResponse.getStatusCode().name());
    this.responseCode.put(""String_Node_Str"",responseCode,httpResponse.getStatusCode().toString());
  }
 else {
    this.responseHeaders=new NativeArray(new Object[]{});
    this.responseBody=Context.javaToJS(""String_Node_Str"",scope);
    this.responseCode.put(""String_Node_Str"",responseCode,0);
    this.responseCode.put(""String_Node_Str"",responseCode,""String_Node_Str"");
    this.responseCode.put(""String_Node_Str"",responseCode,""String_Node_Str"");
  }
  this.responseTime=Context.javaToJS(0.0,scope);
  this.iteration=Context.javaToJS(0,scope);
  this.postman=Context.javaToJS(this.env,scope);
  this.environment=new NativeObject();
  Set<Map.Entry<String,PostmanEnvValue>> map=this.env.lookup.entrySet();
  for (  Map.Entry<String,PostmanEnvValue> e : map) {
    this.environment.put(e.getKey(),environment,e.getValue().value);
  }
  this.tests=new NativeObject();
}",0.9982404692082112
88842,"public boolean runCollection(String colFilename,String envFilename,String folderName,boolean haltOnError) throws Exception {
  System.out.println(""String_Node_Str"");
  PostmanRunResult runResult=new PostmanRunResult();
  PostmanReader reader=new PostmanReader();
  PostmanCollection c=reader.readCollectionFile(colFilename);
  c.init();
  PostmanEnvironment e=reader.readEnvironmentFile(envFilename);
  e.init();
  PostmanFolder folder=null;
  if (folderName != null && !folderName.isEmpty()) {
    folder=c.folderLookup.get(folderName);
  }
  PostmanVariables var=new PostmanVariables(e);
  PostmanRequestRunner runner=new PostmanRequestRunner(var,haltOnError);
  boolean isSuccessful=true;
  if (folder != null) {
    isSuccessful=runFolder(haltOnError,runner,var,c,folder,runResult);
  }
 else {
    for (    PostmanFolder pf : c.folders) {
      isSuccessful=runFolder(haltOnError,runner,var,c,pf,runResult) && isSuccessful;
      if (haltOnError && !isSuccessful) {
        return isSuccessful;
      }
    }
  }
  System.out.println(""String_Node_Str"");
  System.out.println(runResult);
  return isSuccessful;
}","public PostmanRunResult runCollection(String colFilename,String envFilename,String folderName,boolean haltOnError) throws Exception {
  System.out.println(""String_Node_Str"");
  PostmanRunResult runResult=new PostmanRunResult();
  PostmanReader reader=new PostmanReader();
  PostmanCollection c=reader.readCollectionFile(colFilename);
  c.init();
  PostmanEnvironment e=reader.readEnvironmentFile(envFilename);
  e.init();
  PostmanFolder folder=null;
  if (folderName != null && !folderName.isEmpty()) {
    folder=c.folderLookup.get(folderName);
  }
  PostmanVariables var=new PostmanVariables(e);
  PostmanRequestRunner runner=new PostmanRequestRunner(var,haltOnError);
  boolean isSuccessful=true;
  if (folder != null) {
    isSuccessful=runFolder(haltOnError,runner,var,c,folder,runResult);
  }
 else {
    for (    PostmanFolder pf : c.folders) {
      isSuccessful=runFolder(haltOnError,runner,var,c,pf,runResult) && isSuccessful;
      if (haltOnError && !isSuccessful) {
        return runResult;
      }
    }
  }
  System.out.println(""String_Node_Str"");
  System.out.println(runResult);
  return runResult;
}",0.970917225950783
88843,"@Override public void handleError(ClientHttpResponse response) throws IOException {
  logger.error(""String_Node_Str"");
  if (response != null) {
    logger.error(""String_Node_Str"" + response.getStatusCode().value());
    InputStream responseBody=response.getBody();
    if (responseBody != null) {
      StringWriter writer=new StringWriter();
      IOUtils.copy(responseBody,writer,""String_Node_Str"");
      String body=writer.toString();
      logger.error(""String_Node_Str"" + body);
    }
  }
  if (haltOnError) {
    throw new HaltTestFolderException();
  }
}","@Override public void handleError(ClientHttpResponse response) throws IOException {
  if (response != null) {
    logger.warn(""String_Node_Str"" + response.getStatusCode().value());
    if (response.getStatusCode().series() == Series.SERVER_ERROR) {
      logger.error(""String_Node_Str"");
      InputStream responseBody=response.getBody();
      if (responseBody != null) {
        StringWriter writer=new StringWriter();
        IOUtils.copy(responseBody,writer,""String_Node_Str"");
        String body=writer.toString();
        logger.error(""String_Node_Str"" + body);
      }
    }
  }
  if (haltOnError) {
    throw new HaltTestFolderException();
  }
}",0.8594905505341003
88844,"public HttpHeaders getHeaders(PostmanVariables var){
  String h=var.replace(headers);
  String[] splitHeads=h.split(""String_Node_Str"");
  HttpHeaders result=new HttpHeaders();
  for (  String hp : splitHeads) {
    String[] pair=hp.split(""String_Node_Str"");
    String key=pair[0].trim();
    String val=pair[1].trim();
    result.set(key,val);
  }
  return result;
}","public HttpHeaders getHeaders(PostmanVariables var){
  HttpHeaders result=new HttpHeaders();
  if (this.headers == null || this.headers.isEmpty()) {
    return result;
  }
  String h=var.replace(headers);
  String[] splitHeads=h.split(""String_Node_Str"");
  for (  String hp : splitHeads) {
    String[] pair=hp.split(""String_Node_Str"");
    String key=pair[0].trim();
    String val=pair[1].trim();
    result.set(key,val);
  }
  return result;
}",0.8044280442804428
88845,"/** 
 * Replace all {{dynamic variable}} in orig string with values found in the environment. If variable is not found, replace it with constant string ""UNDEFINED"".
 * @param orig
 * @return
 */
public String replace(String orig){
  List<String> allMatches=new ArrayList<String>();
  Matcher m=Pattern.compile(POSTMAN_EXP).matcher(orig);
  while (m.find()) {
    allMatches.add(m.group());
  }
  String result=orig;
  for (  String var : allMatches) {
    String varVal=getVal(var);
    result=result.replace((CharSequence)var,(CharSequence)varVal);
  }
  return result;
}","/** 
 * Replace all {{dynamic variable}} in orig string with values found in the environment. If variable is not found, replace it with constant string ""UNDEFINED"".
 * @param orig
 * @return
 */
public String replace(String orig){
  if (orig == null || orig.isEmpty()) {
    return orig;
  }
  List<String> allMatches=new ArrayList<String>();
  Matcher m=Pattern.compile(POSTMAN_EXP).matcher(orig);
  while (m.find()) {
    allMatches.add(m.group());
  }
  String result=orig;
  for (  String var : allMatches) {
    String varVal=getVal(var);
    result=result.replace((CharSequence)var,(CharSequence)varVal);
  }
  return result;
}",0.9493775933609958
88846,"private void setUpButtons(){
  final Button xClose=(Button)container.findViewById(R.id.xClose);
  xClose.setTransformationMethod(null);
  LinearLayout ctasContainer=(LinearLayout)container.findViewById(R.id.modal_buttons_container);
  LinearLayout.LayoutParams layout_params=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  layout_params.setMargins(px(),px(),px(),px());
  ctasContainer.setLayoutParams(layout_params);
  LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  params.weight=1.0f;
  params.width=0;
  params.height=Math.round(mViewMessage.getTextSize() * 2.66F);
  params.setMargins(Math.round(mViewMessage.getTextSize() * 0.66F),Math.round(mViewMessage.getTextSize() * 0.66F),Math.round(mViewMessage.getTextSize() * 0.66F),Math.round(mViewMessage.getTextSize() * 0.66F));
  Typeface boldLato=Typeface.createFromAsset(mContext.getAssets(),""String_Node_Str"");
  for (  final LQInAppMessage.Cta cta : mModalModel.getCtas()) {
    final Button ctaBtn=new Button(mContext);
    ctaBtn.setBackgroundResource(R.drawable.buttonshape);
    ctaBtn.setLayoutParams(params);
    ctaBtn.setTypeface(boldLato);
    ctaBtn.setTransformationMethod(null);
    if (cta.getButtonText().length() > 14)     ctaBtn.setText(cta.getButtonText().substring(0,14));
 else     ctaBtn.setText(cta.getButtonText());
    ctaBtn.setTextSize(TypedValue.COMPLEX_UNIT_PX,getButtonTextSize());
    ctaBtn.getBackground().setColorFilter(Color.parseColor(cta.getButtonColor()),PorterDuff.Mode.SRC_IN);
    ctaBtn.setTextColor(Color.parseColor(cta.getButtonTextColor()));
    if (Build.VERSION.SDK_INT > 15) {
      ctaBtn.setOnTouchListener(new View.OnTouchListener(){
        Rect mRect;
        @Override public boolean onTouch(        View v,        MotionEvent event){
          if (event.getAction() == MotionEvent.ACTION_DOWN) {
            mRect=new Rect(ctaBtn.getLeft(),ctaBtn.getTop(),ctaBtn.getRight(),ctaBtn.getBottom());
            ViewHelper.setAlpha(ctaBtn,0.7F);
          }
          if (event.getAction() == MotionEvent.ACTION_UP) {
            ViewHelper.setAlpha(ctaBtn,1);
          }
          if (event.getAction() == MotionEvent.ACTION_MOVE && !mRect.contains(ctaBtn.getLeft() + (int)event.getX(),ctaBtn.getTop() + (int)event.getY())) {
            ViewHelper.setAlpha(ctaBtn,1);
          }
          return false;
        }
      }
);
    }
    ctaBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        Intent mIntent=new Intent(Intent.ACTION_VIEW);
        if (cta.getDeepLink() != null) {
          try {
            mIntent.setData(Uri.parse(cta.getDeepLink()));
            Liquid.getInstance().trackCta(cta);
            mContext.startActivity(mIntent);
          }
 catch (          Exception e) {
            LQLog.infoVerbose(""String_Node_Str"");
          }
        }
        mPopupWindow.dismiss();
      }
    }
);
    ctasContainer.addView(ctaBtn);
  }
  xClose.setTextColor(Color.parseColor(mModalModel.getTitleColor()));
  xClose.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Liquid.getInstance().trackDismiss(mModalModel);
      mPopupWindow.dismiss();
    }
  }
);
}","private void setUpButtons(){
  final Button xClose=(Button)container.findViewById(R.id.xClose);
  xClose.setTransformationMethod(null);
  LinearLayout ctasContainer=(LinearLayout)container.findViewById(R.id.modal_buttons_container);
  LinearLayout.LayoutParams layout_params=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  layout_params.setMargins(px(),px(),px(),px());
  ctasContainer.setLayoutParams(layout_params);
  LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  params.weight=1.0f;
  params.width=0;
  params.height=Math.round(mViewMessage.getTextSize() * 2.66F);
  params.setMargins(Math.round(mViewMessage.getTextSize() * 0.66F),Math.round(mViewMessage.getTextSize() * 0.66F),Math.round(mViewMessage.getTextSize() * 0.66F),Math.round(mViewMessage.getTextSize() * 0.66F));
  Typeface boldLato=Typeface.createFromAsset(mContext.getAssets(),""String_Node_Str"");
  for (  final LQInAppMessage.Cta cta : mModalModel.getCtas()) {
    final Button ctaBtn=new Button(mContext);
    ctaBtn.setBackgroundResource(R.drawable.buttonshape);
    ctaBtn.setLayoutParams(params);
    ctaBtn.setTypeface(boldLato);
    ctaBtn.setTransformationMethod(null);
    if (cta.getButtonText().length() > 14)     ctaBtn.setText(cta.getButtonText().substring(0,14));
 else     ctaBtn.setText(cta.getButtonText());
    ctaBtn.setTextSize(TypedValue.COMPLEX_UNIT_PX,getButtonTextSize());
    ctaBtn.getBackground().setColorFilter(Color.parseColor(cta.getButtonColor()),PorterDuff.Mode.SRC_IN);
    ctaBtn.setTextColor(Color.parseColor(cta.getButtonTextColor()));
    if (Build.VERSION.SDK_INT > 15) {
      ctaBtn.setOnTouchListener(new View.OnTouchListener(){
        Rect mRect;
        @Override public boolean onTouch(        View v,        MotionEvent event){
          if (event.getAction() == MotionEvent.ACTION_DOWN) {
            mRect=new Rect(ctaBtn.getLeft(),ctaBtn.getTop(),ctaBtn.getRight(),ctaBtn.getBottom());
            ViewHelper.setAlpha(ctaBtn,0.7F);
          }
          if (event.getAction() == MotionEvent.ACTION_UP) {
            ViewHelper.setAlpha(ctaBtn,1);
          }
          if (event.getAction() == MotionEvent.ACTION_MOVE && !mRect.contains(ctaBtn.getLeft() + (int)event.getX(),ctaBtn.getTop() + (int)event.getY())) {
            ViewHelper.setAlpha(ctaBtn,1);
          }
          return false;
        }
      }
);
    }
    ctaBtn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        Intent mIntent=new Intent(Intent.ACTION_VIEW);
        if (cta.getDeepLink() != null) {
          try {
            mIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            mIntent.setData(Uri.parse(cta.getDeepLink()));
            Liquid.getInstance().trackCta(cta);
            mContext.startActivity(mIntent);
          }
 catch (          Exception e) {
            LQLog.infoVerbose(""String_Node_Str"");
          }
        }
        mPopupWindow.dismiss();
      }
    }
);
    ctasContainer.addView(ctaBtn);
  }
  xClose.setTextColor(Color.parseColor(mModalModel.getTitleColor()));
  xClose.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Liquid.getInstance().trackDismiss(mModalModel);
      mPopupWindow.dismiss();
    }
  }
);
}",0.9909723249963002
88847,"@Override public void onClick(View v){
  Intent mIntent=new Intent(Intent.ACTION_VIEW);
  if (cta.getDeepLink() != null) {
    try {
      mIntent.setData(Uri.parse(cta.getDeepLink()));
      Liquid.getInstance().trackCta(cta);
      mContext.startActivity(mIntent);
    }
 catch (    Exception e) {
      LQLog.infoVerbose(""String_Node_Str"");
    }
  }
  mPopupWindow.dismiss();
}","@Override public void onClick(View v){
  Intent mIntent=new Intent(Intent.ACTION_VIEW);
  if (cta.getDeepLink() != null) {
    try {
      mIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      mIntent.setData(Uri.parse(cta.getDeepLink()));
      Liquid.getInstance().trackCta(cta);
      mContext.startActivity(mIntent);
    }
 catch (    Exception e) {
      LQLog.infoVerbose(""String_Node_Str"");
    }
  }
  mPopupWindow.dismiss();
}",0.9326805385556916
88848,"public void setUpButton(){
  final ImageView mArrowButton=(ImageView)container.findViewById(R.id.slideUpArrowButton);
  for (  final LQInAppMessage.Cta cta : mSlideModel.getCtas()) {
    Drawable myArrow=ContextCompat.getDrawable(mContext,R.drawable.arrow);
    myArrow.setColorFilter(Color.parseColor(cta.getButtonColor()),PorterDuff.Mode.SRC_IN);
    ((ImageView)container.findViewById(R.id.slideUpArrowButton)).setImageDrawable(myArrow);
    mArrowButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        Intent mIntent=new Intent(Intent.ACTION_VIEW);
        if (cta.getDeepLink() != null) {
          try {
            mIntent.setData(Uri.parse(cta.getDeepLink()));
            Liquid.getInstance().trackCta(cta);
            mContext.startActivity(mIntent);
          }
 catch (          Exception e) {
            LQLog.infoVerbose(""String_Node_Str"");
          }
        }
        mPopupWindow.dismiss();
      }
    }
);
  }
}","public void setUpButton(){
  final ImageView mArrowButton=(ImageView)container.findViewById(R.id.slideUpArrowButton);
  for (  final LQInAppMessage.Cta cta : mSlideModel.getCtas()) {
    Drawable myArrow=ContextCompat.getDrawable(mContext,R.drawable.arrow);
    myArrow.setColorFilter(Color.parseColor(cta.getButtonColor()),PorterDuff.Mode.SRC_IN);
    ((ImageView)container.findViewById(R.id.slideUpArrowButton)).setImageDrawable(myArrow);
    mArrowButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        Intent mIntent=new Intent(Intent.ACTION_VIEW);
        if (cta.getDeepLink() != null) {
          try {
            mIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            mIntent.setData(Uri.parse(cta.getDeepLink()));
            Liquid.getInstance().trackCta(cta);
            mContext.startActivity(mIntent);
          }
 catch (          Exception e) {
            LQLog.infoVerbose(""String_Node_Str"");
          }
        }
        mPopupWindow.dismiss();
      }
    }
);
  }
}",0.9701419481155164
88849,"private void activityResumedCallback(Activity activity){
  mCurrentActivity=activity;
  mInstance.attachActivity(activity);
  mHttpQueuer.startFlushTimer();
}","private void activityResumedCallback(Activity activity){
  mCurrentActivity=activity;
  requestInappMessages();
  showInAppMessages();
  mInstance.attachActivity(activity);
  mHttpQueuer.startFlushTimer();
}",0.8657534246575342
88850,"/** 
 * Generate a random unique id
 * @return
 */
public static String newIdentifier(){
  String uid=UUID.randomUUID().toString().toUpperCase(Locale.ENGLISH);
  long timeSince1970=Calendar.getInstance().getTimeInMillis();
  return uid + ""String_Node_Str"" + String.valueOf(timeSince1970).substring(0,10);
}","/** 
 * Generate a random unique id
 * @return
 */
public static String newIdentifier(){
  String uid=UUID.randomUUID().toString().toUpperCase(Locale.ENGLISH);
  String epoch=LiquidTools.tenCharEpoch(Calendar.getInstance().getTimeInMillis());
  return uid + ""String_Node_Str"" + epoch;
}",0.7263513513513513
88851,"private void reset(final boolean soft){
  mQueue.execute(new Runnable(){
    @Override public void run(){
      mCurrentSession=null;
      mDevice=new LQDevice(mContext,LIQUID_VERSION);
      mEnterBackgroundtime=null;
      mLoadedLiquidPackage=new LQLiquidPackage();
      mAppliedValues=new HashMap<String,LQValue>();
      if (!soft) {
        mHttpQueuer=new LQQueuer(mContext,mApiToken);
      }
      resetUser();
    }
  }
);
}","private void reset(final boolean soft){
  mQueue.execute(new Runnable(){
    @Override public void run(){
      mDevice=new LQDevice(mContext,LIQUID_VERSION);
      mEnterBackgroundtime=null;
      mLoadedLiquidPackage=new LQLiquidPackage();
      mAppliedValues=new HashMap<String,LQValue>();
      if (!soft) {
        mHttpQueuer=new LQQueuer(mContext,mApiToken);
      }
      resetUser();
      newSession(true);
    }
  }
);
}",0.9400921658986175
88852,"@Test public void testSetAttributes() throws NoSuchFieldException, IllegalAccessException, InterruptedException {
  Liquid lqd=Liquid.initialize(Robolectric.application,""String_Node_Str"");
  HashMap<String,Object> attrs=new HashMap<>();
  attrs.put(""String_Node_Str"",1);
  attrs.put(""String_Node_Str"",""String_Node_Str"");
  lqd.setUserAttributes(attrs);
  Field f=Liquid.class.getDeclaredField(""String_Node_Str"");
  f.setAccessible(true);
  LQUser user=((LQUser)f.get(lqd));
  Thread.sleep(2000);
  assertEquals(1,user.attributeForKey(""String_Node_Str""));
  assertEquals(""String_Node_Str"",user.attributeForKey(""String_Node_Str""));
}","@Test public void testSetAttributes() throws NoSuchFieldException, IllegalAccessException, InterruptedException {
  HashMap<String,Object> attrs=new HashMap<>();
  attrs.put(""String_Node_Str"",1);
  attrs.put(""String_Node_Str"",""String_Node_Str"");
  lqd.setUserAttributes(attrs);
  Field f=Liquid.class.getDeclaredField(""String_Node_Str"");
  f.setAccessible(true);
  LQUser user=((LQUser)f.get(lqd));
  Thread.sleep(2000);
  assertEquals(1,user.attributeForKey(""String_Node_Str""));
  assertEquals(""String_Node_Str"",user.attributeForKey(""String_Node_Str""));
}",0.93681550126369
88853,"@Test public void testResetUserAnonymous(){
  Liquid lqd=Liquid.initialize(Robolectric.application,""String_Node_Str"");
  String id=lqd.getUserIdentifier();
  lqd.resetUser();
  assertEquals(id,lqd.getUserIdentifier());
}","@Test public void testResetUserAnonymous(){
  String id=lqd.getUserIdentifier();
  lqd.resetUser();
  assertEquals(id,lqd.getUserIdentifier());
}",0.7945205479452054
88854,"@Test public void testResetUserIdentified(){
  Liquid lqd=Liquid.initialize(Robolectric.application,""String_Node_Str"");
  lqd.identifyUser(""String_Node_Str"");
  assertEquals(""String_Node_Str"",lqd.getUserIdentifier());
  lqd.resetUser();
  assertNotEquals(""String_Node_Str"",lqd.getUserIdentifier());
}","@Test public void testResetUserIdentified(){
  lqd.identifyUser(""String_Node_Str"");
  assertEquals(""String_Node_Str"",lqd.getUserIdentifier());
  lqd.resetUser();
  assertNotEquals(""String_Node_Str"",lqd.getUserIdentifier());
}",0.3009523809523809
88855,"public void testKeepSessionOnIdentify() throws NoSuchFieldException, IllegalAccessException {
  Liquid lqd=Liquid.initialize(Robolectric.application,""String_Node_Str"");
  Field f=Liquid.class.getDeclaredField(""String_Node_Str"");
  f.setAccessible(true);
  String session_id=((LQSession)f.get(lqd)).getIdentifier();
  lqd.identifyUser(""String_Node_Str"");
  assertEquals(session_id,((LQSession)f.get(lqd)).getIdentifier());
}","public void testKeepSessionOnIdentify() throws NoSuchFieldException, IllegalAccessException {
  Field f=Liquid.class.getDeclaredField(""String_Node_Str"");
  f.setAccessible(true);
  String session_id=((LQSession)f.get(lqd)).getIdentifier();
  lqd.identifyUser(""String_Node_Str"");
  assertEquals(session_id,((LQSession)f.get(lqd)).getIdentifier());
}",0.8845654993514915
88856,"private Liquid(Context context,String apiToken,boolean developmentMode){
  LiquidTools.checkForPermission(permission.INTERNET,context);
  if (apiToken == null || apiToken.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + apiToken + ""String_Node_Str"");
  }
  mContext=context;
  if (Build.VERSION.SDK_INT >= 14) {
    attachActivityCallbacks();
  }
  mSessionTimeout=LIQUID_DEFAULT_SESSION_TIMEOUT;
  mApiToken=apiToken;
  mDevice=new LQDevice(context,LIQUID_VERSION);
  mQueue=Executors.newSingleThreadExecutor();
  mLoadedLiquidPackage=LQLiquidPackage.loadFromDisk(mContext);
  mHttpQueuer=new LQQueuer(mContext,mApiToken,LQNetworkRequest.loadQueue(mContext,mApiToken));
  mHttpQueuer.setLiquidInstance(this);
  mHttpQueuer.startFlushTimer();
  isDevelopmentMode=developmentMode;
  if (isDevelopmentMode)   mBundleVariablesSended=new ArrayList<String>();
  mPreviousUser=LQUser.load(mContext,mApiToken);
  identifyUser(mPreviousUser.getIdentifier(),mPreviousUser.getAttributes(),mPreviousUser.isIdentified(),false);
  newSession(true);
  LQLog.info(""String_Node_Str"" + apiToken);
}","private Liquid(Context context,String apiToken,boolean developmentMode){
  LiquidTools.checkForPermission(permission.INTERNET,context);
  if (apiToken == null || apiToken.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + apiToken + ""String_Node_Str"");
  }
  mContext=context;
  if (Build.VERSION.SDK_INT >= 14) {
    attachActivityCallbacks();
  }
  mSessionTimeout=LIQUID_DEFAULT_SESSION_TIMEOUT;
  mApiToken=apiToken;
  mDevice=new LQDevice(context,LIQUID_VERSION);
  mQueue=Executors.newSingleThreadExecutor();
  loadLiquidPackage(true);
  mHttpQueuer=new LQQueuer(mContext,mApiToken,LQNetworkRequest.loadQueue(mContext,mApiToken));
  mHttpQueuer.setLiquidInstance(this);
  mHttpQueuer.startFlushTimer();
  isDevelopmentMode=developmentMode;
  if (isDevelopmentMode)   mBundleVariablesSended=new ArrayList<String>();
  mPreviousUser=LQUser.load(mContext,mApiToken);
  identifyUser(mPreviousUser.getIdentifier(),mPreviousUser.getAttributes(),mPreviousUser.isIdentified(),false);
  newSession(true);
  LQLog.info(""String_Node_Str"" + apiToken);
}",0.9761467889908256
88857,"static void registerDevice(Context context,String senderID){
  if (Build.VERSION.SDK_INT >= 21) {
    registerDeviceAPI21(context,senderID);
  }
 else {
    registerDeviceAPIBelow21(context,senderID);
  }
}","static void registerDevice(final Context context,final String senderID){
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... params){
      final String registrationId;
      try {
        int resultCode=GooglePlayServicesUtil.isGooglePlayServicesAvailable(context);
        if (resultCode != ConnectionResult.SUCCESS) {
          LQLog.error(""String_Node_Str"");
        }
        final GoogleCloudMessaging gcm=GoogleCloudMessaging.getInstance(context);
        registrationId=gcm.register(senderID);
        if (registrationId != null && registrationId.length() > 0) {
          LQLog.infoVerbose(""String_Node_Str"" + registrationId);
          Liquid.getInstance().setGCMregistrationID(registrationId);
        }
      }
 catch (      IOException e) {
        LQLog.error(""String_Node_Str"");
      }
catch (      NoClassDefFoundError e) {
        LQLog.error(""String_Node_Str"");
      }
      return null;
    }
  }
.execute(null,null,null);
}",0.1243697478991596
88858,"public static LQNetworkRequest createDataPointRequest(LQDataPoint datapoint){
  return new LQNetworkRequest(LIQUID_DATAPOINT_URL,""String_Node_Str"",datapoint.toJSON().toString());
}","public static LQNetworkRequest createDataPointRequest(String datapoint){
  return new LQNetworkRequest(LIQUID_DATAPOINT_URL,""String_Node_Str"",datapoint);
}",0.9074626865671642
88859,"private void track(String eventName,HashMap<String,Object> attributes,Date date){
  if ((eventName == null) || (eventName.length() == 0)) {
    eventName=""String_Node_Str"";
  }
  LQLog.infoVerbose(""String_Node_Str"" + eventName);
  final String finalEventName=eventName;
  final HashMap<String,Object> finalAttributes=LQModel.sanitizeAttributes(attributes,isDevelopmentMode);
  final LQUser finalUser=mCurrentUser;
  final LQDevice finalDevice=mDevice;
  final LQSession finalSession=mCurrentSession;
  final Date finalDate=date;
  mQueue.execute(new Runnable(){
    @Override public void run(){
      LQEvent event=new LQEvent(finalEventName,finalAttributes,finalDate);
      LQDataPoint dataPoint=new LQDataPoint(finalUser,finalDevice,finalSession,event,mLoadedLiquidPackage.getValues(),finalDate);
      LQLog.data(dataPoint.toJSON().toString());
      mHttpQueuer.addToHttpQueue(LQRequestFactory.createDataPointRequest(dataPoint));
    }
  }
);
}","private void track(String eventName,HashMap<String,Object> attributes,Date date){
  if ((eventName == null) || (eventName.length() == 0)) {
    eventName=""String_Node_Str"";
  }
  LQLog.infoVerbose(""String_Node_Str"" + eventName);
  LQEvent event=new LQEvent(eventName,LQModel.sanitizeAttributes(attributes,isDevelopmentMode),date);
  final String datapoint=new LQDataPoint(mCurrentUser,mDevice,mCurrentSession,event,mLoadedLiquidPackage.getValues(),date).toJSON().toString();
  LQLog.data(datapoint);
  mQueue.execute(new Runnable(){
    @Override public void run(){
      mHttpQueuer.addToHttpQueue(LQRequestFactory.createDataPointRequest(datapoint));
    }
  }
);
}",0.4173374613003096
88860,"public void startFlushTimer(){
  if (mFlushInterval <= 0 || mTimer != null) {
    return;
  }
  mTimer=new Timer();
  TimerTask task=new TimerTask(){
    Liquid instance=Liquid.getInstance();
    @Override public void run(){
      instance.flush();
    }
  }
;
  mTimer.scheduleAtFixedRate(task,0,LIQUID_DEFAULT_FLUSH_INTERVAL * 1000);
  LQLog.infoVerbose(""String_Node_Str"");
}","public void startFlushTimer(){
  if (mFlushInterval <= 0 || mTimer != null) {
    return;
  }
  mTimer=new Timer();
  TimerTask task=new TimerTask(){
    Liquid instance=Liquid.getInstance();
    @Override public void run(){
      instance.flush();
    }
  }
;
  mTimer.scheduleAtFixedRate(task,0,mFlushInterval * 1000);
  LQLog.infoVerbose(""String_Node_Str"");
}",0.9445196211096076
88861,"public LQQueuer(Context context,String token,ArrayList<LQNetworkRequest> queue){
  mContext=context;
  mHttpQueue=queue;
  mApiToken=token;
}","public LQQueuer(Context context,String token,ArrayList<LQNetworkRequest> queue){
  mContext=context;
  mHttpQueue=queue;
  mApiToken=token;
  mFlushInterval=LIQUID_DEFAULT_FLUSH_INTERVAL;
}",0.8545454545454545
88862,"private void newSession(boolean runInCurrentThread){
  Runnable newSessionRunnable=new Runnable(){
    @Override public void run(){
      if (mCurrentUser == null) {
        identifyUser();
      }
      Date now=new Date();
      mCurrentSession=new LQSession(mSessionTimeout,now);
      track(""String_Node_Str"",null,now);
    }
  }
;
  if (runInCurrentThread) {
    newSessionRunnable.run();
  }
 else {
    mQueue.execute(newSessionRunnable);
  }
}","private void newSession(boolean runInCurrentThread){
  final Date now=UniqueTime.newDate();
  LQLog.infoVerbose(""String_Node_Str"" + now.toString());
  Runnable newSessionRunnable=new Runnable(){
    @Override public void run(){
      if (mCurrentUser == null) {
        identifyUser();
      }
      mCurrentSession=new LQSession(mSessionTimeout,now);
      track(""String_Node_Str"",null,now);
    }
  }
;
  if (runInCurrentThread) {
    newSessionRunnable.run();
  }
 else {
    mQueue.execute(newSessionRunnable);
  }
}",0.8733264675592173
88863,"private void activityStartedCallback(Activity activity){
  if (LiquidOnEventListener.class.isInstance(activity)) {
    mInstance.attachLiquidEventListener((LiquidOnEventListener)activity);
  }
  if (mNeedCallbackCall) {
    mNeedCallbackCall=false;
    notifyListeners(false);
  }
  loadLiquidPackage(true);
  mQueue.execute(new Runnable(){
    @Override public void run(){
      mHttpQueue=unarchiveQueue(mApiToken,mContext);
    }
  }
);
  if (!mOnActivityTransition) {
    String date=LiquidTools.loadFromDisk(mContext,""String_Node_Str"");
    mEnterBackgroundtime=date == null ? new Date() : new Date(Long.parseLong(date));
    checkSessionTimeout();
  }
}","private void activityStartedCallback(Activity activity){
  mInstance.attachActivity(activity);
  if (mNeedCallbackCall) {
    mNeedCallbackCall=false;
    notifyListeners(false);
  }
  loadLiquidPackage(true);
  checkSessionTimeout();
  loadLiquidPackage(true);
}",0.1561822125813449
88864,"private void activityStopedCallback(Activity activity){
  mOnActivityTransition=false;
  if (LiquidOnEventListener.class.isInstance(activity)) {
    mInstance.detachLiquidEventListener((LiquidOnEventListener)activity);
  }
  requestValues();
  mQueue.execute(new Runnable(){
    @Override public void run(){
      LiquidTools.saveToDisk(mContext,""String_Node_Str"",new Date().getTime() + ""String_Node_Str"");
    }
  }
);
}","private void activityStopedCallback(Activity activity){
  if (isApplicationInBackground(activity)) {
    track(""String_Node_Str"",null,UniqueTime.newDate());
    mEnterBackgroundtime=UniqueTime.newDate();
    flush();
  }
 else {
    mEnterBackgroundtime=null;
  }
  requestValues();
}",0.3375886524822695
88865,"/** 
 * Identifies the current user with a custom UUID and additional attributes.
 * @deprecated Use {@link #setCurrentLocation(Location location)} instead.</p>
 * @param identifier The custom UUID.
 * @param attributes Additional user attributes.
 * @param location User Location.
 */
@Deprecated public void identifyUser(String identifier,HashMap<String,Object> attributes,Location location){
  final String finalIdentifier=identifier;
  if (attributes != null && !attributes.containsKey(""String_Node_Str"")) {
    attributes.put(""String_Node_Str"",false);
  }
  final HashMap<String,Object> finalAttributes=sanitizeAttributes(attributes);
  final Location finalLocation=location;
  destroySession();
  mCurrentUser=new LQUser(finalIdentifier,finalAttributes,finalLocation);
  newSession(true);
  requestValues();
  LQLog.info(""String_Node_Str"" + finalIdentifier + ""String_Node_Str"");
}","private void identifyUser(String identifier,HashMap<String,Object> attributes,Location location,boolean autoIdentified,boolean alias){
  final String finalIdentifier=identifier;
  final HashMap<String,Object> finalAttributes=LQModel.sanitizeAttributes(attributes,isDevelopmentMode);
  final Location finalLocation=location;
  if (mCurrentUser != null && mCurrentUser.getIdentifier().equals(identifier)) {
    mCurrentUser.setAttributes(finalAttributes);
    mCurrentUser.save(mContext,mApiToken);
    LQLog.infoVerbose(""String_Node_Str"" + finalIdentifier + ""String_Node_Str"");
    return;
  }
  destroySession(UniqueTime.newDate());
  mPreviousUser=mCurrentUser;
  mCurrentUser=new LQUser(finalIdentifier,finalAttributes,finalLocation,autoIdentified);
  newSession(true);
  requestValues();
  mCurrentUser.save(mContext,mApiToken);
  if (alias) {
    alias();
  }
  LQLog.info(""String_Node_Str"" + finalIdentifier + ""String_Node_Str"");
}",0.256860592755214
88866,"private void activityCreatedCallback(){
}","private void activityCreatedCallback(Activity activity){
}",0.8282828282828283
88867,"private void destroySession(Date closeDate){
  if ((mCurrentUser != null) && (mCurrentSession != null) && mCurrentSession.getEndDate() == null) {
    mCurrentSession.setEndDate(closeDate);
    track(""String_Node_Str"",null,closeDate);
  }
}","private void destroySession(Date closeDate){
  if ((mCurrentUser != null) && (mCurrentSession != null) && mCurrentSession.getEndDate() == null) {
    LQLog.infoVerbose(""String_Node_Str"" + closeDate.toString());
    mCurrentSession.setEndDate(closeDate);
    track(""String_Node_Str"",null,closeDate);
  }
}",0.8802946593001841
88868,"/** 
 * Get a variable value.
 * @param variableKey Variable Key of the Value.
 * @param fallbackValue is the value returned if the value for variableKey doesn't exist in Liquid instance.
 * @return The value in Liquid instance or fallbackValue if the variable don't exist.
 */
public float getFloatVariable(String variableKey,float fallbackValue){
  if (isDevelopmentMode) {
    sendBundleVariable(LQVariable.buildJsonObject(variableKey,fallbackValue,LQVariable.FLOAT_TYPE));
  }
  if (!mAppliedValues.containsKey(variableKey)) {
    return fallbackValue;
  }
  if (mAppliedValues.get(variableKey).getDataType().equals(LQVariable.FLOAT_TYPE)) {
    try {
      return Float.parseFloat(mAppliedValues.get(variableKey).getValue().toString());
    }
 catch (    NumberFormatException e) {
      LQLog.error(""String_Node_Str"" + variableKey + ""String_Node_Str"");
    }
  }
  invalidateVariables(variableKey);
  return fallbackValue;
}","/** 
 * Get a variable value.
 * @param variableKey Variable Key of the Value.
 * @param fallbackValue is the value returned if the value for variableKey doesn't exist in Liquid instance.
 * @return The value in Liquid instance or fallbackValue if the variabledon't exist.
 */
public float getFloatVariable(String variableKey,float fallbackValue){
  if (isDevelopmentMode) {
    sendBundleVariable(LQVariable.buildJsonObject(variableKey,fallbackValue,LQVariable.FLOAT_TYPE));
  }
  if (!mAppliedValues.containsKey(variableKey)) {
    return fallbackValue;
  }
  if (mAppliedValues.get(variableKey).getDataType().equals(LQVariable.FLOAT_TYPE)) {
    try {
      return Float.parseFloat(mAppliedValues.get(variableKey).getValue().toString());
    }
 catch (    NumberFormatException e) {
      LQLog.error(""String_Node_Str"" + variableKey + ""String_Node_Str"");
    }
  }
  invalidateVariables(variableKey);
  return fallbackValue;
}",0.9994620763851532
88869,"private void notifyListeners(final boolean received){
  Handler mainHandler=new Handler(mContext.getMainLooper());
  mainHandler.post(new Runnable(){
    @Override public void run(){
      if (mListeners.size() == 0) {
        mNeedCallbackCall=true;
      }
 else {
        mNeedCallbackCall=false;
      }
      for (      LiquidOnEventListener listener : mListeners.values()) {
        if (received) {
          listener.onValuesReceived();
        }
 else {
          listener.onValuesLoaded();
        }
      }
    }
  }
);
}","private void notifyListeners(final boolean received){
  Handler mainHandler=new Handler(mContext.getMainLooper());
  mainHandler.post(new Runnable(){
    @Override public void run(){
      if (mListeners.size() == 0) {
        mNeedCallbackCall=true;
        return;
      }
 else {
        mNeedCallbackCall=false;
      }
      for (      LiquidOnEventListener listener : mListeners.values()) {
        if (received) {
          listener.onValuesReceived();
        }
 else {
          listener.onValuesLoaded();
        }
      }
    }
  }
);
}",0.9851576994434136
88870,"private void addToHttpQueue(String json,String endPoint,String httpMethod){
  LQQueue queuedEvent=new LQQueue(endPoint,httpMethod,json);
  mHttpQueue.add(queuedEvent);
  if (mHttpQueue.size() > LIQUID_QUEUE_SIZE_LIMIT) {
    mHttpQueue.remove(0);
  }
  Liquid.archiveQueue(mHttpQueue,mApiToken,mContext);
}","private void addToHttpQueue(String json,String endPoint,String httpMethod){
  LQQueue queuedEvent=new LQQueue(endPoint,httpMethod,json);
  mHttpQueue.add(queuedEvent);
  if (mHttpQueue.size() > LIQUID_QUEUE_SIZE_LIMIT) {
    mHttpQueue.remove(0);
  }
  LQQueue.saveQueue(mContext,mHttpQueue,mApiToken);
}",0.918032786885246
88871,"/** 
 * Detach a listener to stop being notified by Liquid Events   {@link LiquidOnEventListener}
 * @see LiquidOnEventListener
 * @param l Listener to be detached.
 */
public void detachLiquidEventListener(LiquidOnEventListener l){
  mListeners.remove(l.getClass().getName());
}","/** 
 * Detach a listener to stop being notified by Liquid Events  {@link LiquidOnEventListener}
 * @see LiquidOnEventListener
 * @param l Listener to be detached.
 */
public void detachLiquidEventListener(LiquidOnEventListener l){
  mListeners.remove(l.getClass().getName());
}",0.9982046678635548
88872,"/** 
 * Reset all collected data that is stored locally. <p>This includes, user, device, token, values</p>
 */
public void reset(){
  mQueue.execute(new Runnable(){
    @Override public void run(){
      mCurrentUser=null;
      mCurrentSession=null;
      mDevice=null;
      mApiToken=null;
      mEnterBackgroundtime=null;
      mTimer=null;
      mAppliedLiquidPackage=null;
      mAppliedValues=null;
      mHttpQueue=new ArrayList<LQQueue>();
    }
  }
);
}","/** 
 * Reset all collected data that is stored locally. <p> This includes, user, device, token, values </p>
 */
public void reset(){
  mQueue.execute(new Runnable(){
    @Override public void run(){
      mCurrentUser=null;
      mCurrentSession=null;
      mDevice=null;
      mApiToken=null;
      mEnterBackgroundtime=null;
      mTimer=null;
      mAppliedLiquidPackage=null;
      mAppliedValues=null;
      mHttpQueue=new ArrayList<LQQueue>();
    }
  }
);
}",0.9978448275862069
88873,"/** 
 * Add or update an additional attribute to the user.
 * @param key Attribute key
 * @param attribute Attribute value
 */
public void setUserAttribute(String key,Object attribute){
  if (mCurrentUser == null) {
    identifyUser();
  }
 else {
    if (LQModel.hasInvalidChars(key)) {
      if (isDevelopmentMode) {
        throw new IllegalArgumentException(""String_Node_Str"" + key + ""String_Node_Str"");
      }
 else {
        LQLog.warning(""String_Node_Str"" + key + ""String_Node_Str"");
      }
    }
 else {
      final String finalKey=key;
      final Object finalAttribute=attribute;
      mQueue.execute(new Runnable(){
        @Override public void run(){
          mCurrentUser.setAttribute(finalAttribute,finalKey);
        }
      }
);
    }
  }
}","/** 
 * Add or update an additional attribute to the user.
 * @param key Attribute key
 * @param attribute Attribute value
 */
public void setUserAttribute(String key,Object attribute){
  if (mCurrentUser == null) {
    identifyUser();
  }
 else {
    if (LQModel.validKey(key,isDevelopmentMode)) {
      final String finalKey=key;
      final Object finalAttribute=attribute;
      mQueue.execute(new Runnable(){
        @Override public void run(){
          mCurrentUser.setAttribute(finalKey,finalAttribute);
          mCurrentUser.save(mContext,mApiToken);
        }
      }
);
    }
  }
}",0.7725258493353028
88874,"/** 
 * Get a variable value.
 * @param variableKey Variable Key of the Value.
 * @param fallbackValue is the value returned if the value for variableKey doesn't exist in Liquid instance.
 * @return The value in Liquid instance or fallbackValue if the variable don't exist.
 */
public int getIntVariable(String variableKey,int fallbackValue){
  if (isDevelopmentMode) {
    sendBundleVariable(LQVariable.buildJsonObject(variableKey,fallbackValue,LQVariable.INT_TYPE));
  }
  if (!mAppliedValues.containsKey(variableKey)) {
    return fallbackValue;
  }
  if (mAppliedValues.get(variableKey).getDataType().equals(LQVariable.INT_TYPE)) {
    try {
      return Integer.parseInt(mAppliedValues.get(variableKey).getValue().toString());
    }
 catch (    NumberFormatException e) {
      LQLog.error(""String_Node_Str"" + variableKey + ""String_Node_Str"");
    }
  }
  invalidateVariables(variableKey);
  return fallbackValue;
}","/** 
 * Get a variable value.
 * @param variableKey Variable Key of the Value.
 * @param fallbackValue is the value returned if the value for variableKey doesn't exist in Liquid instance.
 * @return The value in Liquid instance or fallbackValue if the variabledon't exist.
 */
public int getIntVariable(String variableKey,int fallbackValue){
  if (isDevelopmentMode) {
    sendBundleVariable(LQVariable.buildJsonObject(variableKey,fallbackValue,LQVariable.INT_TYPE));
  }
  if (!mAppliedValues.containsKey(variableKey)) {
    return fallbackValue;
  }
  if (mAppliedValues.get(variableKey).getDataType().equals(LQVariable.INT_TYPE)) {
    try {
      return Integer.parseInt(mAppliedValues.get(variableKey).getValue().toString());
    }
 catch (    NumberFormatException e) {
      LQLog.error(""String_Node_Str"" + variableKey + ""String_Node_Str"");
    }
  }
  invalidateVariables(variableKey);
  return fallbackValue;
}",0.9994562262098968
88875,"/** 
 * Returns whether or not the   {@link LiquidOnEventListener#onValuesLoaded()} will becalled after  {@link LiquidOnEventListener#onValuesReceived()}.
 * @see LiquidOnEventListener
 * @return true if is auto loading variables, otherwise false.
 */
public boolean willAutoloadVariables(){
  return mAutoLoadValues;
}","/** 
 * Returns whether or not the   {@link LiquidOnEventListener#onValuesLoaded()}will be called after   {@link LiquidOnEventListener#onValuesReceived()}.
 * @see LiquidOnEventListener
 * @return true if is auto loading variables, otherwise false.
 */
public boolean willAutoloadVariables(){
  return mAutoLoadValues;
}",0.9953051643192488
88876,"private void activityResumedCallback(Activity activity){
  if (LiquidOnEventListener.class.isInstance(activity)) {
    mInstance.attachLiquidEventListener((LiquidOnEventListener)activity);
  }
  startFlushTimer();
}","private void activityResumedCallback(Activity activity){
  mInstance.attachActivity(activity);
  startFlushTimer();
}",0.6746987951807228
88877,"@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) private void attachActivityCallbacks(){
  final Application app=(Application)mContext.getApplicationContext();
  app.registerActivityLifecycleCallbacks(new ActivityLifecycleCallbacks(){
    @Override public void onActivityStopped(    Activity activity){
      activityStopedCallback(activity);
    }
    @Override public void onActivityStarted(    Activity activity){
      activityStartedCallback(activity);
    }
    @Override public void onActivitySaveInstanceState(    Activity activity,    Bundle bundle){
    }
    @Override public void onActivityResumed(    Activity activity){
      activityResumedCallback(activity);
    }
    @Override public void onActivityPaused(    Activity activity){
      activityPausedCallback(activity);
    }
    @Override public void onActivityDestroyed(    Activity activity){
      activityDestroyedCallback();
    }
    @Override public void onActivityCreated(    Activity activity,    Bundle bundle){
      activityCreatedCallback();
    }
  }
);
}","@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) private void attachActivityCallbacks(){
  final Application app=(Application)mContext.getApplicationContext();
  app.registerActivityLifecycleCallbacks(new ActivityLifecycleCallbacks(){
    @Override public void onActivityStopped(    Activity activity){
      activityStopedCallback(activity);
    }
    @Override public void onActivityStarted(    Activity activity){
      activityStartedCallback(activity);
    }
    @Override public void onActivitySaveInstanceState(    Activity activity,    Bundle bundle){
    }
    @Override public void onActivityResumed(    Activity activity){
      activityResumedCallback(activity);
    }
    @Override public void onActivityPaused(    Activity activity){
      activityPausedCallback(activity);
    }
    @Override public void onActivityDestroyed(    Activity activity){
      activityDestroyedCallback(activity);
    }
    @Override public void onActivityCreated(    Activity activity,    Bundle bundle){
      activityCreatedCallback(activity);
    }
  }
);
}",0.9923664122137404
88878,"/** 
 * Get a variable value.
 * @param variableKey Variable Key of the Value.
 * @param fallbackValue is the value returned if the value for variableKey doesn't exist in Liquid instance.
 * @return The value in Liquid instance or fallbackValue if the variable don't exist.
 */
public String getStringVariable(String variableKey,String fallbackValue){
  if (isDevelopmentMode) {
    sendBundleVariable(LQVariable.buildJsonObject(variableKey,fallbackValue,LQVariable.STRING_TYPE));
  }
  if (!mAppliedValues.containsKey(variableKey)) {
    return fallbackValue;
  }
  if (mAppliedValues.get(variableKey).getDataType().equals(LQVariable.STRING_TYPE)) {
    Object value=mAppliedValues.get(variableKey).getValue();
    return value == null ? null : value.toString();
  }
  invalidateVariables(variableKey);
  return fallbackValue;
}","/** 
 * Get a variable value.
 * @param variableKey Variable Key of the Value.
 * @param fallbackValue is the value returned if the value for variableKey doesn't exist in Liquid instance.
 * @return The value in Liquid instance or fallbackValue if the variabledon't exist.
 */
public String getStringVariable(String variableKey,String fallbackValue){
  if (isDevelopmentMode) {
    sendBundleVariable(LQVariable.buildJsonObject(variableKey,fallbackValue,LQVariable.STRING_TYPE));
  }
  if (!mAppliedValues.containsKey(variableKey)) {
    return fallbackValue;
  }
  if (mAppliedValues.get(variableKey).getDataType().equals(LQVariable.STRING_TYPE)) {
    Object value=mAppliedValues.get(variableKey).getValue();
    return value == null ? null : value.toString();
  }
  invalidateVariables(variableKey);
  return fallbackValue;
}",0.9993964996982498
88879,"/** 
 * Force Liquid to send locally saved data.
 */
public void flush(){
  LQLog.infoVerbose(""String_Node_Str"");
  mQueue.execute(new Runnable(){
    @Override public void run(){
      if (LiquidTools.isNetworkAvailable(mContext)) {
        ArrayList<LQQueue> failedQueue=new ArrayList<LQQueue>();
        while (mHttpQueue.size() > 0) {
          LQQueue queuedHttp=mHttpQueue.get(0);
          LQLog.infoVerbose(""String_Node_Str"" + queuedHttp.getJSON());
          String result=mNetwork.httpConnectionTo(queuedHttp.getJSON(),queuedHttp.getUrl(),queuedHttp.getHttpMethod());
          mHttpQueue.remove(queuedHttp);
          if (result == null) {
            LQLog.http(""String_Node_Str"" + queuedHttp.toString());
            if (queuedHttp.getNumberOfTries() < LIQUID_MAX_NUMBER_OF_TRIES) {
              queuedHttp.incrementNumberOfTries();
              failedQueue.add(queuedHttp);
            }
          }
        }
        mHttpQueue.addAll(failedQueue);
      }
    }
  }
);
}","/** 
 * Force Liquid to send locally saved data.
 */
public void flush(){
  LQLog.infoVerbose(""String_Node_Str"");
  mQueue.execute(new Runnable(){
    @Override public void run(){
      if (LiquidTools.isNetworkAvailable(mContext)) {
        ArrayList<LQQueue> failedQueue=new ArrayList<LQQueue>();
        while (mHttpQueue.size() > 0) {
          LQQueue queuedHttp=mHttpQueue.get(0);
          String result=mNetwork.httpConnectionTo(queuedHttp.getJSON(),queuedHttp.getUrl(),queuedHttp.getHttpMethod());
          mHttpQueue.remove(queuedHttp);
          if (result == null) {
            LQLog.http(""String_Node_Str"" + queuedHttp.toString());
            if (queuedHttp.getNumberOfTries() < LIQUID_MAX_NUMBER_OF_TRIES) {
              queuedHttp.incrementNumberOfTries();
              failedQueue.add(queuedHttp);
            }
          }
        }
        mHttpQueue.addAll(failedQueue);
        LQQueue.saveQueue(mContext,mHttpQueue,mApiToken);
      }
    }
  }
);
}",0.93428425878757
88880,"/** 
 * Add or update the current location.
 * @param location Current location.
 */
public void setCurrentLocation(final Location location){
  mQueue.execute(new Runnable(){
    @Override public void run(){
      mDevice.setLocation(location);
    }
  }
);
}","/** 
 * Add or update the current location.
 * @param location Current location.
 */
public void setCurrentLocation(final Location location){
  mQueue.execute(new Runnable(){
    @Override public void run(){
      mDevice.setLocation(location);
      mCurrentUser.save(mContext,mApiToken);
    }
  }
);
}",0.9200710479573712
88881,"/** 
 * Attach a listener to be notified of Liquid Events   {@link LiquidOnEventListener}
 * @see LiquidOnEventListener
 * @param l Listener to be attached.
 */
public void attachLiquidEventListener(LiquidOnEventListener l){
  mListeners.put(l.getClass().getName(),l);
}","/** 
 * Attach a listener to be notified of Liquid Events  {@link LiquidOnEventListener}
 * @see LiquidOnEventListener
 * @param l Listener to be attached.
 */
public void attachLiquidEventListener(LiquidOnEventListener l){
  mListeners.put(l.getClass().getName(),l);
}",0.9981447124304268
88882,"private void track(String eventName,HashMap<String,Object> attributes,Date date){
  if ((mCurrentUser == null) || (mCurrentSession == null)) {
    identifyUser();
  }
  if ((eventName == null) || (eventName.length() == 0)) {
    eventName=""String_Node_Str"";
  }
  if (!Liquid.assertEventAttributeTypes(attributes)) {
    return;
  }
  final String finalEventName=eventName;
  final HashMap<String,Object> finalAttributes=sanitizeAttributes(attributes);
  final LQUser finalUser=mCurrentUser;
  final LQDevice finalDevice=mDevice;
  final LQSession finalSession=mCurrentSession;
  final Date finalDate=date;
  mQueue.execute(new Runnable(){
    @Override public void run(){
      LQEvent event=new LQEvent(finalEventName,finalAttributes,finalDate);
      LQDataPoint dataPoint=new LQDataPoint(finalUser,finalDevice,finalSession,event,mAppliedLiquidPackage.getValues(),finalDate);
      LQLog.data(dataPoint.toJSON());
      String endPoint=LIQUID_SERVER_URL + ""String_Node_Str"";
      addToHttpQueue(dataPoint.toJSON(),endPoint,""String_Node_Str"");
    }
  }
);
}","private void track(String eventName,HashMap<String,Object> attributes,Date date){
  LQLog.infoVerbose(""String_Node_Str"" + eventName);
  if ((mCurrentUser == null) || (mCurrentSession == null)) {
    identifyUser();
  }
  if ((eventName == null) || (eventName.length() == 0)) {
    eventName=""String_Node_Str"";
  }
  final String finalEventName=eventName;
  final HashMap<String,Object> finalAttributes=LQModel.sanitizeAttributes(attributes,isDevelopmentMode);
  final LQUser finalUser=mCurrentUser;
  final LQDevice finalDevice=mDevice;
  final LQSession finalSession=mCurrentSession;
  final Date finalDate=date;
  mQueue.execute(new Runnable(){
    @Override public void run(){
      LQEvent event=new LQEvent(finalEventName,finalAttributes,finalDate);
      LQDataPoint dataPoint=new LQDataPoint(finalUser,finalDevice,finalSession,event,mAppliedLiquidPackage.getValues(),finalDate);
      LQLog.data(dataPoint.toJSON());
      String endPoint=LIQUID_SERVER_URL + ""String_Node_Str"";
      addToHttpQueue(dataPoint.toJSON(),endPoint,""String_Node_Str"");
    }
  }
);
}",0.9300140911225928
88883,"@Override public void onActivityDestroyed(Activity activity){
  activityDestroyedCallback();
}","@Override public void onActivityDestroyed(Activity activity){
  activityDestroyedCallback(activity);
}",0.9591836734693876
88884,"/** 
 * Get a variable value.
 * @param variableKey Variable Key of the Value.
 * @param fallbackValue is the value returned if the value for variableKey doesn't exist in Liquid instance.
 * @return The value in Liquid instance or fallbackValue if the variable don't exist.
 */
public Date getDateVariable(String variableKey,Date fallbackValue){
  if (isDevelopmentMode) {
    sendBundleVariable(LQVariable.buildJsonObject(variableKey,fallbackValue,LQVariable.DATE_TYPE));
  }
  if (!mAppliedValues.containsKey(variableKey)) {
    return fallbackValue;
  }
  if (mAppliedValues.get(variableKey).getDataType().equals(LQVariable.DATE_TYPE)) {
    try {
      Object value=mAppliedValues.get(variableKey).getValue();
      return value == null ? null : LiquidTools.stringToDate((String)value);
    }
 catch (    IllegalArgumentException e) {
      LQLog.error(""String_Node_Str"" + variableKey + ""String_Node_Str"");
    }
  }
  invalidateVariables(variableKey);
  return fallbackValue;
}","/** 
 * Get a variable value.
 * @param variableKey Variable Key of the Value.
 * @param fallbackValue is the value returned if the value for variableKey doesn't exist in Liquid instance.
 * @return The value in Liquid instance or fallbackValue if the variabledon't exist.
 */
public Date getDateVariable(String variableKey,Date fallbackValue){
  if (isDevelopmentMode) {
    sendBundleVariable(LQVariable.buildJsonObject(variableKey,fallbackValue,LQVariable.DATE_TYPE));
  }
  if (!mAppliedValues.containsKey(variableKey)) {
    return fallbackValue;
  }
  if (mAppliedValues.get(variableKey).getDataType().equals(LQVariable.DATE_TYPE)) {
    try {
      Object value=mAppliedValues.get(variableKey).getValue();
      return value == null ? null : LiquidTools.stringToDate((String)value);
    }
 catch (    IllegalArgumentException e) {
      LQLog.error(""String_Node_Str"" + variableKey + ""String_Node_Str"");
    }
  }
  invalidateVariables(variableKey);
  return fallbackValue;
}",0.999490575649516
88885,"/** 
 * Add or update the user location.
 * @deprecated Use {@link #setCurrentLocation(Location location)} instead.
 * @param location User location.
 */
@Deprecated public void setUserLocation(Location location){
  if (mCurrentUser == null) {
    identifyUser();
  }
 else {
    final Location finalLocation=location;
    mQueue.execute(new Runnable(){
      @Override public void run(){
        mCurrentUser.setLocation(finalLocation);
      }
    }
);
  }
}","/** 
 * Add or update the user location.
 * @deprecated Use {@link #setCurrentLocation(Location location)} instead.
 * @param location User location.
 */
@Deprecated public void setUserLocation(Location location){
  if (mCurrentUser == null) {
    identifyUser();
  }
 else {
    final Location finalLocation=location;
    mQueue.execute(new Runnable(){
      @Override public void run(){
        mCurrentUser.setLocation(finalLocation);
        mCurrentUser.save(mContext,mApiToken);
      }
    }
);
  }
}",0.9513960703205792
88886,"/** 
 * Override this method to the Activity onDestroy() You only need to do this if your android minSDK is < 14
 * @param activity the destroyed activity
 */
public void activityDestroyed(Activity activity){
  if (android.os.Build.VERSION.SDK_INT < 14) {
    activityDestroyedCallback();
  }
}","/** 
 * Override this method to the Activity onDestroy() You only need to do this if your android minSDK is < 14
 * @param activity the destroyed activity
 */
public void activityDestroyed(Activity activity){
  if (android.os.Build.VERSION.SDK_INT < 14) {
    activityDestroyedCallback(activity);
  }
}",0.9865771812080536
88887,"private void activityDestroyedCallback(){
}","private void activityDestroyedCallback(Activity activity){
}",0.8349514563106796
88888,"private void activityPausedCallback(Activity activity){
  mOnActivityTransition=true;
  if (LiquidOnEventListener.class.isInstance(activity)) {
    mInstance.detachLiquidEventListener((LiquidOnEventListener)activity);
  }
  if (mFlushOnBackground) {
    flush();
  }
  stopFlushTimer();
}","private void activityPausedCallback(Activity activity){
  mInstance.detachActivity(activity);
  stopFlushTimer();
}",0.5459057071960298
88889,"public Liquid(Context context,String apiToken,boolean developmentMode){
  LiquidTools.checkForPermission(permission.INTERNET,context);
  if (apiToken == null || apiToken.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + apiToken + ""String_Node_Str"");
  }
  mContext=context;
  if (android.os.Build.VERSION.SDK_INT >= 14) {
    attachActivityCallbacks();
  }
  mHttpQueue=new ArrayList<LQQueue>();
  mApiToken=apiToken;
  mDevice=new LQDevice(context,LIQUID_VERSION);
  mQueue=Executors.newSingleThreadExecutor();
  mFlushInterval=LIQUID_DEFAULT_FLUSH_INTERVAL;
  mAppliedLiquidPackage=new LQLiquidPackage();
  startFlushTimer();
  isDevelopmentMode=developmentMode;
  mNetwork=new LQNetwork(mApiToken,mSessionTimeout);
  LQLog.info(""String_Node_Str"" + apiToken);
}","public Liquid(Context context,String apiToken,boolean developmentMode){
  LiquidTools.checkForPermission(permission.INTERNET,context);
  if (apiToken == null || apiToken.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + apiToken + ""String_Node_Str"");
  }
  mContext=context;
  if (android.os.Build.VERSION.SDK_INT >= 14) {
    attachActivityCallbacks();
  }
  mSessionTimeout=LIQUID_DEFAULT_SESSION_TIMEOUT;
  mHttpQueue=new ArrayList<LQQueue>();
  mApiToken=apiToken;
  mDevice=new LQDevice(context,LIQUID_VERSION);
  mQueue=Executors.newSingleThreadExecutor();
  mFlushInterval=LIQUID_DEFAULT_FLUSH_INTERVAL;
  mAppliedLiquidPackage=new LQLiquidPackage();
  startFlushTimer();
  isDevelopmentMode=developmentMode;
  mNetwork=new LQNetwork(mApiToken,mSessionTimeout);
  mHttpQueue=LQQueue.loadQueue(mContext,mApiToken);
  mPreviousUser=LQUser.load(mContext,mApiToken);
  identifyUser(mPreviousUser.getIdentifier(),mPreviousUser.getAttributes(),null,mPreviousUser.isAutoIdentified(),false);
  LQLog.info(""String_Node_Str"" + apiToken);
}",0.8444924406047516
88890,"private void checkSessionTimeout(){
  if ((mCurrentSession != null) && (mEnterBackgroundtime != null)) {
    Date now=new Date();
    long interval=(now.getTime() - mEnterBackgroundtime.getTime()) / 1000;
    if (interval >= mSessionTimeout) {
      destroySession(mEnterBackgroundtime);
      newSession(false);
    }
 else {
      track(""String_Node_Str"");
      track(""String_Node_Str"",null,mEnterBackgroundtime);
    }
  }
}","private void checkSessionTimeout(){
  if ((mCurrentSession != null) && (mEnterBackgroundtime != null)) {
    Date now=UniqueTime.newDate();
    long interval=(now.getTime() - mEnterBackgroundtime.getTime()) / 1000;
    if (interval >= mSessionTimeout) {
      destroySession(mEnterBackgroundtime);
      newSession(false);
    }
 else {
      track(""String_Node_Str"",null,UniqueTime.newDate());
    }
  }
}",0.8848920863309353
88891,"@Override public void onActivityCreated(Activity activity,Bundle bundle){
  activityCreatedCallback();
}","@Override public void onActivityCreated(Activity activity,Bundle bundle){
  activityCreatedCallback(activity);
}",0.9629629629629628
88892,"/** 
 * Get a variable value.
 * @param variableKey Variable Key of the Value.
 * @param fallbackValue is the value returned if the value for variableKey doesn't exist in Liquid instance.
 * @return The value in Liquid instance or fallbackValue if the variable don't exist.
 */
public int getColorVariable(String variableKey,int fallbackValue){
  if (isDevelopmentMode) {
    sendBundleVariable(LQVariable.buildJsonObject(variableKey,LiquidTools.colorToHex(fallbackValue),LQVariable.COLOR_TYPE));
  }
  if (!mAppliedValues.containsKey(variableKey)) {
    return fallbackValue;
  }
  if (mAppliedValues.get(variableKey).getDataType().equals(LQVariable.COLOR_TYPE)) {
    try {
      return Color.parseColor(mAppliedValues.get(variableKey).getValue().toString());
    }
 catch (    IllegalArgumentException e) {
      LQLog.error(""String_Node_Str"" + variableKey + ""String_Node_Str"");
    }
  }
  invalidateVariables(variableKey);
  return fallbackValue;
}","/** 
 * Get a variable value.
 * @param variableKey Variable Key of the Value.
 * @param fallbackValue is the value returned if the value for variableKey doesn't exist in Liquid instance.
 * @return The value in Liquid instance or fallbackValue if the variabledon't exist.
 */
public int getColorVariable(String variableKey,int fallbackValue){
  if (isDevelopmentMode) {
    sendBundleVariable(LQVariable.buildJsonObject(variableKey,LiquidTools.colorToHex(fallbackValue),LQVariable.COLOR_TYPE));
  }
  if (!mAppliedValues.containsKey(variableKey)) {
    return fallbackValue;
  }
  if (mAppliedValues.get(variableKey).getDataType().equals(LQVariable.COLOR_TYPE)) {
    try {
      return Color.parseColor(mAppliedValues.get(variableKey).getValue().toString());
    }
 catch (    IllegalArgumentException e) {
      LQLog.error(""String_Node_Str"" + variableKey + ""String_Node_Str"");
    }
  }
  invalidateVariables(variableKey);
  return fallbackValue;
}",0.999475065616798
88893,"public void activityCreated(Activity activity){
  if (android.os.Build.VERSION.SDK_INT < 14) {
    activityCreatedCallback();
  }
}","public void activityCreated(Activity activity){
  if (android.os.Build.VERSION.SDK_INT < 14) {
    activityCreatedCallback(activity);
  }
}",0.9703703703703704
88894,"public JSONObject toJSON(){
  JSONObject json=new JSONObject();
  try {
    json.put(""String_Node_Str"",mName);
    json.put(""String_Node_Str"",LiquidTools.dateToString(mDate));
    if (mAttributes != null) {
      for (      String key : mAttributes.keySet()) {
        if (mAttributes.get(key) instanceof Date) {
          json.put(key,LiquidTools.dateToString((Date)mAttributes.get(key)));
        }
 else {
          json.put(key,mAttributes.get(key));
        }
      }
    }
    return json;
  }
 catch (  JSONException e) {
    LQLog.error(""String_Node_Str"" + e.getMessage());
  }
  return null;
}","public JSONObject toJSON(){
  JSONObject json=new JSONObject();
  try {
    if (mAttributes != null) {
      for (      String key : mAttributes.keySet()) {
        if (mAttributes.get(key) instanceof Date) {
          json.put(key,LiquidTools.dateToString((Date)mAttributes.get(key)));
        }
 else {
          json.put(key,mAttributes.get(key));
        }
      }
    }
    json.put(""String_Node_Str"",mName);
    json.put(""String_Node_Str"",LiquidTools.dateToString(mDate));
    return json;
  }
 catch (  JSONException e) {
    LQLog.error(""String_Node_Str"" + e.getMessage());
  }
  return null;
}",0.4966777408637873
88895,"public String getUrl(){
  return _url;
}","public String getUrl(){
  return mUrl;
}",0.95
88896,"public LQQueue(String url,String httpMethod,String json){
  _url=url;
  _httpMethod=httpMethod;
  _json=json;
  _numberOfTries=0;
}","public LQQueue(String url,String httpMethod,String json){
  mUrl=url;
  mHttpMethod=httpMethod;
  mJson=json;
  mNumberOfTries=0;
}",0.9389312977099236
88897,"public int getNumberOfTries(){
  return _numberOfTries;
}","public int getNumberOfTries(){
  return mNumberOfTries;
}",0.9649122807017544
88898,"public void incrementNumberOfTries(){
  _numberOfTries++;
}","public void incrementNumberOfTries(){
  mNumberOfTries++;
}",0.9661016949152542
88899,"public String getHttpMethod(){
  return _httpMethod;
}","public String getHttpMethod(){
  return mHttpMethod;
}",0.9629629629629628
88900,"public String getJSON(){
  return _json;
}","public String getJSON(){
  return mJson;
}",0.9523809523809524
88901,"private void addNestedScenarioArguments(Set<String> found,boolean addInputs,String cellContent){
  String scenarioName=cellContent.substring(0,cellContent.length() - 1);
  SlimTestContext testContext=getTestContext();
  ScenarioTable scenario;
  if (testContext instanceof SlimCoverageTestContextImpl) {
    scenario=((SlimCoverageTestContextImpl)testContext).getScenarioNoCount(scenarioName);
  }
 else {
    scenario=testContext.getScenario(scenarioName);
  }
  if (scenario != null) {
    Set<String> scenarioArgs=addInputs ? scenario.getInputs() : scenario.getOutputs();
    found.addAll(scenarioArgs);
  }
}","private void addNestedScenarioArguments(Set<String> found,boolean addInputs,String cellContent){
  String scenarioName=cellContent.substring(0,cellContent.length() - 1);
  scenarioName=Disgracer.disgraceClassName(scenarioName);
  SlimTestContext testContext=getTestContext();
  ScenarioTable scenario;
  if (testContext instanceof SlimCoverageTestContextImpl) {
    scenario=((SlimCoverageTestContextImpl)testContext).getScenarioNoCount(scenarioName);
  }
 else {
    scenario=testContext.getScenario(scenarioName);
  }
  if (scenario != null) {
    Set<String> scenarioArgs=addInputs ? scenario.getInputs() : scenario.getOutputs();
    found.addAll(scenarioArgs);
  }
}",0.9547581903276132
88902,"@Override public void execute(OperationContext ctx){
  ByteIterator bi=ctx.getByteIterator();
  int startPos=bi.getPos();
  bi.seek(4 - (startPos % 4));
  int defaultOffset=bi.nextInt();
  int npairs=bi.nextInt();
  Map<Integer,Integer> lookupMap=new HashMap<>(npairs);
  for (int i=0; i < npairs; i++) {
    lookupMap.put(bi.nextInt(),bi.nextInt());
  }
  Integer res=lookupMap.get(ctx.getStack().popRaw());
  int offset=res == null ? defaultOffset : res;
  bi.seek(offset - (bi.getPos() - startPos + 1));
}","@Override public void execute(OperationContext ctx){
  ByteIterator bi=ctx.getByteIterator();
  int startPos=bi.getPos();
  int mod=startPos % 4;
  if (mod > 0) {
    bi.seek(4 - mod);
  }
  int defaultOffset=bi.nextInt();
  int npairs=bi.nextInt();
  Map<Integer,Integer> lookupMap=new HashMap<>(npairs);
  for (int i=0; i < npairs; i++) {
    lookupMap.put(bi.nextInt(),bi.nextInt());
  }
  Integer res=lookupMap.get(ctx.getStack().popRaw());
  int offset=res == null ? defaultOffset : res;
  bi.seek(offset - (bi.getPos() - startPos + 1));
}",0.935361216730038
88903,"public Execution(Method method,Variables localVariables,Thread thread){
  this.method=method;
  this.byteIterator=method.getCode() == null ? null : new ByteBufferIterator(method.getCode().getCode());
  this.localVariables=localVariables;
  this.constantPool=method.getClassObject().getConstantPool();
  this.thread=thread;
  if (method.hasModifier(Modifier.SYNCHRONIZED)) {
    Oop target=method.isStatic() ? method.getClassObject().getOop() : localVariables.getOop(0);
    synchronizedMethodLocks=target.getMarkRef().getMonitor();
    synchronizedMethodLocks.lock();
  }
 else {
    synchronizedMethodLocks=null;
  }
}","public Execution(Method method,Variables localVariables,Thread thread){
  this.method=method;
  this.byteIterator=method.getCode() == null ? null : new ByteBufferIterator(method.getCode().getCode());
  this.localVariables=localVariables;
  this.constantPool=method.getClassObject().getConstantPool();
  this.thread=thread;
  if (method.hasModifier(Modifier.SYNCHRONIZED)) {
    Oop target=method.isStatic() ? method.getClassObject().getOop() : localVariables.getOop(0);
    synchronizedMethodLocks=target.getMarkRef().getMonitor();
    if (!synchronizedMethodLocks.tryLock()) {
      Heap.threadSleeping();
      synchronizedMethodLocks.lock();
      Heap.threadWaking();
    }
  }
 else {
    synchronizedMethodLocks=null;
  }
}",0.913946587537092
88904,"@Override public void execute(OperationContext ctx){
  VariableStack stack=ctx.getStack();
  WideVariable top=stack.popWide();
  WideVariable next=stack.popWide();
  stack.pushWide(top);
  stack.pushWide(next);
  stack.pushWide(top);
}","@Override public void execute(OperationContext ctx){
  VariableStack stack=ctx.getStack();
  if (stack.peekType().isDoubleWidth()) {
    WideVariable top=stack.popWide();
    Variable next=popSingleWidth(stack);
    stack.pushWide(top);
    stack.push(next);
    stack.pushWide(top);
  }
 else {
    Variable one=popSingleWidth(stack);
    Variable two=popSingleWidth(stack);
    Variable three=popSingleWidth(stack);
    stack.push(two);
    stack.push(one);
    stack.push(three);
    stack.push(two);
    stack.push(one);
  }
}",0.4026143790849673
88905,"@Override protected final void doInvoke(Method method,OperationContext ctx){
  Variables args=method.newArgArray();
  int argCount=method.getSignature().getLength();
  for (int i=argCount; i >= 1; i--) {
    SimpleType type=method.getSignature().getArgTypes().get(i).asSimpleType();
    args.put(i,type,ctx.getStack().popSingleWidth(type));
  }
  Oop oop=ctx.getStack().popOop();
  args.putOop(0,oop);
  Method implementation=getImplementationMethod(method,oop);
  if (implementation.hasModifier(Modifier.NATIVE)) {
    invokeNativeMethod((NativeMethod)method,args,ctx);
  }
 else {
    int maxLocalVars=implementation.getCode().getMaxLocals();
    if (maxLocalVars > args.length()) {
      Variables tmp=new Variables(maxLocalVars);
      System.arraycopy(args.getRawValues(),0,tmp.getRawValues(),0,args.length());
      System.arraycopy(args.getTypes(),0,tmp.getTypes(),0,args.length());
      args=tmp;
    }
    ctx.getExecutionStack().push(new ExecutionStackElement(implementation,args,implementation.getClassObject().getConstantPool(),ctx.getExecutionStack()));
  }
  afterInvoke(ctx);
}","@Override protected final void doInvoke(Method method,OperationContext ctx){
  Variables args=method.newArgArray();
  int argCount=method.getSignature().getLength();
  for (int i=argCount; i >= 1; i--) {
    SimpleType type=method.getSignature().getArgTypes().get(i - 1).asSimpleType();
    args.put(i,type,ctx.getStack().popSingleWidth(type));
  }
  Oop oop=ctx.getStack().popOop();
  args.putOop(0,oop);
  Method implementation=getImplementationMethod(method,oop);
  if (implementation.hasModifier(Modifier.NATIVE)) {
    invokeNativeMethod((NativeMethod)method,args,ctx);
  }
 else {
    int maxLocalVars=implementation.getCode().getMaxLocals();
    if (maxLocalVars > args.length()) {
      Variables tmp=new Variables(maxLocalVars);
      System.arraycopy(args.getRawValues(),0,tmp.getRawValues(),0,args.length());
      System.arraycopy(args.getTypes(),0,tmp.getTypes(),0,args.length());
      args=tmp;
    }
    ctx.getExecutionStack().push(new ExecutionStackElement(implementation,args,implementation.getClassObject().getConstantPool(),ctx.getExecutionStack()));
  }
  afterInvoke(ctx);
}",0.9981735159817352
88906,"@Override public final void doExecute(Field field,OperationContext ctx){
  VariableStack stack=ctx.getStack();
  SimpleType type=field.getType().asSimpleType();
  if (field.getType().isDoubleWidth()) {
    field.set(getOop(stack),stack.popDoubleWidth(type));
  }
 else {
    field.set(getOop(stack),stack.popSingleWidth(type));
  }
}","@Override public final void doExecute(Field field,OperationContext ctx){
  VariableStack stack=ctx.getStack();
  SimpleType type=field.getType().asSimpleType();
  if (field.getType().isDoubleWidth()) {
    int two=stack.popSingleWidth(type);
    int one=stack.popSingleWidth(type);
    field.set(getOop(stack),one,two);
  }
 else {
    int val=stack.popSingleWidth(type);
    field.set(getOop(stack),val);
  }
}",0.6747311827956989
88907,"private static void simpleThreadingTest(){
  AtomicInteger ai=new AtomicInteger();
  int num=4;
  final Random random=new Random();
  final CountDownLatch latch=new CountDownLatch(4);
  for (int i=0; i < num; i++) {
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          Thread.sleep(100 + random.nextInt(50));
        }
 catch (        InterruptedException e) {
          throw new AssertionError(e);
        }
        ai.getAndIncrement();
        latch.countDown();
      }
    }
).start();
  }
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    throw new AssertionError(e);
  }
  System.out.println(""String_Node_Str"" + num + ""String_Node_Str""+ ai);
}","private static void simpleThreadingTest(){
  AtomicInteger ai=new AtomicInteger();
  int num=40;
  final Random random=new Random();
  final CountDownLatch latch=new CountDownLatch(num);
  for (int i=0; i < num; i++) {
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          Thread.sleep(100 + random.nextInt(50));
        }
 catch (        InterruptedException e) {
          throw new AssertionError(e);
        }
        ai.getAndIncrement();
        latch.countDown();
      }
    }
).start();
  }
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    throw new AssertionError(e);
  }
  System.out.println(""String_Node_Str"" + num + ""String_Node_Str""+ ai);
}",0.996481351161154
88908,"public long popLong(){
  if (head <= 1) {
    throw new NoSuchElementException();
  }
  long val=Utils.toLong(stack[head - 1],stack[head]);
  head-=2;
  return val;
}","public long popLong(){
  if (head <= 1) {
    throw new NoSuchElementException();
  }
  long val=Utils.toLong(stack[head - 2],stack[head - 1]);
  head-=2;
  return val;
}",0.9821428571428572
88909,"public Method translate(CpMethodReference cmr,Object[] constantPool){
  ClassObject co=findClassObject(cmr,constantPool);
  final ClassObject coCopy=co;
  NameAndType nat=(NameAndType)constantPool[cmr.getNameAndTypeIndex()];
  String name=(String)constantPool[nat.getNameIndex()];
  String descriptor=(String)constantPool[nat.getDescriptorIndex()];
  MethodSignature methodSignature=MethodSignature.parse(name,descriptor);
  while (co != null) {
    MethodKey key=new MethodKey(co.getClassName(),methodSignature);
    Method method=methods.get(key);
    if (method != null) {
      return method;
    }
    co=co.getSuperClass();
  }
  throw new IllegalArgumentException(""String_Node_Str"" + new MethodKey(coCopy.getClassName(),methodSignature));
}","public Method translate(CpMethodReference cmr,Object[] constantPool){
  ClassObject co=findClassObject(cmr,constantPool);
  final ClassObject coCopy=co;
  NameAndType nat=(NameAndType)constantPool[cmr.getNameAndTypeIndex()];
  String name=(String)constantPool[nat.getNameIndex()];
  String descriptor=(String)constantPool[nat.getDescriptorIndex()];
  MethodSignature methodSignature=MethodSignature.parse(name,descriptor);
  Method method;
  if (co.hasModifier(Modifier.INTERFACE)) {
    method=translateInterfaceMethod(co,methodSignature);
  }
 else {
    do {
      method=methods.get(new MethodKey(co.getClassName(),methodSignature));
      co=co.getSuperClass();
    }
 while (method == null && co != null);
  }
  if (method == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + new MethodKey(coCopy.getClassName(),methodSignature));
  }
  return method;
}",0.6839186691312384
88910,"public static MethodSignature parse(String name,String description){
  CharIterator it=new CharIterator(description);
  if (it.next() != '(') {
    throw new IllegalArgumentException(""String_Node_Str"" + description);
  }
  List<Type> argTypes=new ArrayList<>(4);
  while (it.peek() != ')') {
    argTypes.add(Types.parseType(it));
  }
  it.next();
  argTypes=argTypes.isEmpty() ? Collections.emptyList() : argTypes;
  Type returnType=Types.parseType(it);
  return new MethodSignature(name,argTypes,returnType);
}","public static MethodSignature parse(String name,String descriptor){
  CharIterator it=new CharIterator(descriptor);
  if (it.next() != '(') {
    throw new IllegalArgumentException(""String_Node_Str"" + descriptor);
  }
  List<Type> argTypes=new ArrayList<>(4);
  while (it.peek() != ')') {
    argTypes.add(Types.parseType(it));
  }
  it.next();
  argTypes=argTypes.isEmpty() ? Collections.emptyList() : argTypes;
  Type returnType=Types.parseType(it);
  return new MethodSignature(name,argTypes,returnType);
}",0.9853085210577864
88911,"public void saveSelectedList(){
  if (!mSave)   return;
  Set<String> selectedSet=new HashSet<String>();
  Adapter adapter=(Adapter)getListAdapter();
  for (int i=0; i < adapter.getCount(); ++i) {
    Entry entry=adapter.getItem(i);
    if (entry.selected) {
      selectedSet.add(entry.packageName);
    }
  }
  PreferenceManager.getDefaultSharedPreferences(getActivity()).edit().putStringSet(mPrefKey,selectedSet).apply();
  mSave=false;
}","public void saveSelectedList(){
  if (!mSave)   return;
  Set<String> selectedSet=new HashSet<String>();
  Adapter adapter=(Adapter)getListAdapter();
  for (int i=0; i < adapter.getCount(); ++i) {
    Entry entry=adapter.getItem(i);
    if (entry.selected) {
      selectedSet.add(entry.packageName);
    }
  }
  FA.getSharedPreferences(getActivity()).edit().putStringSet(mPrefKey,selectedSet).apply();
  mSave=false;
}",0.9627906976744186
88912,"@Override public boolean onTouchEvent(MotionEvent ev){
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      if (getChildCount() == 0) {
        return false;
      }
      mLastMotionX=(int)ev.getX();
      mLastMotionY=(int)ev.getY();
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    if (!mIsBeingDragged && mIgnoreTouchEvent) {
      return false;
    }
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    if (activePointerIndex == -1) {
      Log.e(TAG,""String_Node_Str"" + mActivePointerId + ""String_Node_Str"");
      break;
    }
    boolean isBeingDraggedX=false;
    boolean isBeingDraggedY=false;
    final int x=(int)ev.getX(activePointerIndex);
    int deltaX=mLastMotionX - x;
    if (!mIsBeingDragged && Math.abs(deltaX) > mTouchSlop) {
      isBeingDraggedX=true;
      if (deltaX > 0) {
        deltaX-=mTouchSlop;
      }
 else {
        deltaX+=mTouchSlop;
      }
    }
    final int y=(int)ev.getY(activePointerIndex);
    int deltaY=mLastMotionY - y;
    if (!mIsBeingDragged && Math.abs(deltaY) > mTouchSlop) {
      isBeingDraggedY=true;
      if (deltaY > 0) {
        deltaY-=mTouchSlop;
      }
 else {
        deltaY+=mTouchSlop;
      }
    }
    if (isBeingDraggedX || isBeingDraggedY) {
      final ViewParent parent=getParent();
      if (parent != null) {
        parent.requestDisallowInterceptTouchEvent(true);
      }
      mIsBeingDragged=true;
    }
    if (mIsBeingDragged) {
      onMove(-deltaX,-deltaY);
      mLastMotionX=x;
      mLastMotionY=y;
    }
    break;
  }
case MotionEvent.ACTION_UP:
{
  if (mIsBeingDragged) {
    onMoveFinished();
    mActivePointerId=INVALID_POINTER;
    mIsBeingDragged=false;
  }
 else {
    onUnhandledClick(ev);
  }
  break;
}
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
onMoveFinished();
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
}
 else if (!mIsBeingDragged) {
onUnhandledClick(ev);
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
{
final int index=ev.getActionIndex();
mLastMotionX=(int)ev.getX(index);
mLastMotionY=(int)ev.getY(index);
mActivePointerId=ev.getPointerId(index);
break;
}
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
mLastMotionX=(int)ev.getX(ev.findPointerIndex(mActivePointerId));
mLastMotionY=(int)ev.getY(ev.findPointerIndex(mActivePointerId));
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!mIsBeingDragged && mIgnoreTouchEvent) {
    return false;
  }
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      if (getChildCount() == 0) {
        return false;
      }
      mLastMotionX=(int)ev.getX();
      mLastMotionY=(int)ev.getY();
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    if (activePointerIndex == -1) {
      Log.e(TAG,""String_Node_Str"" + mActivePointerId + ""String_Node_Str"");
      break;
    }
    boolean isBeingDraggedX=false;
    boolean isBeingDraggedY=false;
    final int x=(int)ev.getX(activePointerIndex);
    int deltaX=mLastMotionX - x;
    if (!mIsBeingDragged && Math.abs(deltaX) > mTouchSlop) {
      isBeingDraggedX=true;
      if (deltaX > 0) {
        deltaX-=mTouchSlop;
      }
 else {
        deltaX+=mTouchSlop;
      }
    }
    final int y=(int)ev.getY(activePointerIndex);
    int deltaY=mLastMotionY - y;
    if (!mIsBeingDragged && Math.abs(deltaY) > mTouchSlop) {
      isBeingDraggedY=true;
      if (deltaY > 0) {
        deltaY-=mTouchSlop;
      }
 else {
        deltaY+=mTouchSlop;
      }
    }
    if (isBeingDraggedX || isBeingDraggedY) {
      final ViewParent parent=getParent();
      if (parent != null) {
        parent.requestDisallowInterceptTouchEvent(true);
      }
      mIsBeingDragged=true;
    }
    if (mIsBeingDragged) {
      onMove(-deltaX,-deltaY);
      mLastMotionX=x;
      mLastMotionY=y;
    }
    break;
  }
case MotionEvent.ACTION_UP:
{
  if (mIsBeingDragged) {
    onMoveFinished();
    mActivePointerId=INVALID_POINTER;
    mIsBeingDragged=false;
  }
 else {
    onUnhandledClick(ev);
  }
  break;
}
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
onMoveFinished();
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
}
 else if (!mIsBeingDragged) {
onUnhandledClick(ev);
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
{
final int index=ev.getActionIndex();
mLastMotionX=(int)ev.getX(index);
mLastMotionY=(int)ev.getY(index);
mActivePointerId=ev.getPointerId(index);
break;
}
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
mLastMotionX=(int)ev.getX(ev.findPointerIndex(mActivePointerId));
mLastMotionY=(int)ev.getY(ev.findPointerIndex(mActivePointerId));
break;
}
return true;
}",0.9707792207792209
88913,"@Override public String getInventoryName(){
  return player.getDisplayName();
}","@Override public String getInventoryName(){
  return player.getCommandSenderName();
}",0.8902439024390244
88914,"public boolean checkMinecraft(AsieLauncher l,String version){
  assetsDir=l.baseDir + ""String_Node_Str"";
  gameVersion=version;
  nativesDir=getNativesLocation(l,version);
  File dir=new File(l.baseDir + ""String_Node_Str"");
  if (!dir.exists())   dir.mkdirs();
  if (!loadJSON(l.directory,l.baseDir,l.baseDir + ""String_Node_Str"",version))   return false;
  if (!downloadMinecraft(getJarLocation(l,version),version))   return false;
  return true;
}","public boolean checkMinecraft(AsieLauncher l,String version){
  assetsDir=l.baseDir + ""String_Node_Str"";
  gameVersion=version;
  nativesDir=getNativesLocation(l,version);
  File dir=new File(l.baseDir + ""String_Node_Str"");
  if (!dir.exists())   dir.mkdirs();
  if (!loadJSON(l.directory,l.baseDir,l.directory + ""String_Node_Str"",version))   return false;
  if (!downloadMinecraft(getJarLocation(l,version),version))   return false;
  return true;
}",0.9821826280623608
88915,"public boolean init(){
  file=Utils.readJSONUrlFile(URL + ""String_Node_Str"");
  if (file instanceof JSONObject) {
    Object o=file.get(""String_Node_Str"");
    boolean onlineMode=false;
    if (o instanceof Boolean)     onlineMode=((Boolean)o);
    if (getFileRevision(file) >= 5) {
      mcVersion=(String)file.get(""String_Node_Str"");
    }
 else     mcVersion=""String_Node_Str"";
    if (Utils.versionToInt(this.mcVersion) <= Utils.versionToInt(""String_Node_Str"")) {
      mc=new MinecraftHandler152();
      if (onlineMode)       auth=new AuthenticationMojangLegacy();
    }
 else {
      mc=new MinecraftHandler162();
      if (onlineMode)       auth=new AuthenticationYggdrasil(directory,false);
    }
    return true;
  }
  return false;
}","public boolean init(){
  file=Utils.readJSONUrlFile(URL + ""String_Node_Str"");
  if (!(file instanceof JSONObject)) {
    file=oldFile;
  }
  if (file instanceof JSONObject) {
    Object o=file.get(""String_Node_Str"");
    boolean onlineMode=false;
    if (o instanceof Boolean)     onlineMode=((Boolean)o);
    if (getFileRevision(file) >= 5) {
      mcVersion=(String)file.get(""String_Node_Str"");
    }
 else     mcVersion=""String_Node_Str"";
    if (Utils.versionToInt(this.mcVersion) <= Utils.versionToInt(""String_Node_Str"")) {
      mc=new MinecraftHandler152();
      if (onlineMode)       auth=new AuthenticationMojangLegacy();
    }
 else {
      mc=new MinecraftHandler162();
      if (onlineMode)       auth=new AuthenticationYggdrasil(directory,false);
    }
    return (file != oldFile);
  }
  return false;
}",0.9206145966709348
88916,"public void initGUILogin(){
  quitButton=new JButton(Strings.QUIT);
  quitButton.setBounds(245,189,65,25);
  quitButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      setVisible(false);
      isRunning=false;
    }
  }
);
  optionsButton=new JButton(Strings.OPTIONS);
  optionsButton.setBounds(8,189,76,25);
  optionsButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      options.setVisible(true);
      options.repaint();
    }
  }
);
  this.addKeyListener(new KeyListener(){
    @Override public void keyTyped(    KeyEvent event){
    }
    @Override public void keyPressed(    KeyEvent event){
      if (event.getKeyCode() == KeyEvent.VK_CONTROL)       setControl(true);
    }
    @Override public void keyReleased(    KeyEvent event){
      if (event.getKeyCode() == KeyEvent.VK_CONTROL)       setControl(false);
    }
  }
);
  launchButton=new JButton(Strings.LAUNCH_UPDATE);
  if (!hasInternet)   launchButton.setText(Strings.LAUNCH_ONLY);
  launchButton.setBounds(90,189,149,25);
  launchButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      if (validateLaunch()) {
        quitButton.setEnabled(false);
        launchButton.setEnabled(false);
        loginLabel.setText(Strings.PROGRESS + ""String_Node_Str"");
        loginLabel.setBounds(10,162,70,15);
        panel.remove(loginField);
        String password=""String_Node_Str"";
        if (passwordField != null) {
          password=new String(passwordField.getPassword());
          panel.remove(passwordLabel);
          panel.remove(passwordField);
        }
        Utils.saveStringToFile(launcher.directory + ""String_Node_Str"",loginField.getText());
        if (hasInternet)         options.saveSelectedOptions(options.filename);
        panel.add(progressBar);
        statusLabel.setText(Strings.START_UPDATE);
        repaint();
        LauncherThread thread=new LauncherThread(launcher,options,loginField.getText(),password,hasInternet && !controlDown);
        thread.start();
      }
 else {
        statusLabel.setText(Strings.INVALID_LOGIN);
        repaint();
      }
    }
  }
);
  statusLabel=new JLabel(Strings.READY + ""String_Node_Str"" + Strings.VERSION+ ""String_Node_Str""+ AsieLauncher.VERSION_STRING+ ""String_Node_Str"");
  statusLabel.setBounds(6,219,300,15);
  loginLabel=new JLabel(Strings.LOGIN + ""String_Node_Str"");
  loginField=new JTextField();
  loginField.setText(Utils.loadStringFromFile(launcher.directory + ""String_Node_Str""));
  if (launcher.askForPassword()) {
    passwordLabel=new JLabel(Strings.PASSWORD + ""String_Node_Str"");
    passwordField=new JPasswordField();
    passwordLabel.setBounds(10,160,70,15);
    passwordField.setBounds(80,156,231,24);
    loginLabel.setBounds(10,134,50,15);
    loginField.setBounds(80,130,231,24);
    panel.add(passwordLabel);
    panel.add(passwordField);
  }
 else {
    loginLabel.setBounds(10,160,50,15);
    loginField.setBounds(60,156,251,24);
  }
  progressBar=new JProgressBar();
  progressBar.setBounds(86,160,224,20);
  panel.add(launchButton);
  panel.add(optionsButton);
  panel.add(quitButton);
  panel.add(statusLabel);
  panel.add(loginLabel);
  panel.add(loginField);
  repaint();
}","public void initGUILogin(){
  quitButton=new JButton(Strings.QUIT);
  quitButton.setBounds(245,189,65,25);
  quitButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      setVisible(false);
      isRunning=false;
    }
  }
);
  optionsButton=new JButton(Strings.OPTIONS);
  optionsButton.setBounds(8,189,76,25);
  optionsButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      options.setVisible(true);
      options.repaint();
    }
  }
);
  this.addKeyListener(new KeyListener(){
    @Override public void keyTyped(    KeyEvent event){
    }
    @Override public void keyPressed(    KeyEvent event){
      if (event.getKeyCode() == KeyEvent.VK_CONTROL)       setControl(true);
    }
    @Override public void keyReleased(    KeyEvent event){
      if (event.getKeyCode() == KeyEvent.VK_CONTROL)       setControl(false);
    }
  }
);
  launchButton=new JButton(Strings.LAUNCH_UPDATE);
  if (!hasInternet)   launchButton.setText(Strings.LAUNCH_ONLY);
  launchButton.setBounds(90,189,149,25);
  launchButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      if (validateLaunch()) {
        quitButton.setEnabled(false);
        launchButton.setEnabled(false);
        loginLabel.setText(Strings.PROGRESS + ""String_Node_Str"");
        loginLabel.setBounds(10,162,70,15);
        panel.remove(loginField);
        String password=""String_Node_Str"";
        if (passwordField != null) {
          password=new String(passwordField.getPassword());
          panel.remove(passwordLabel);
          panel.remove(passwordField);
        }
        if (options.loginCheckbox.isSelected())         launcher.setKeepPassword(true);
        Utils.saveStringToFile(launcher.directory + ""String_Node_Str"",loginField.getText());
        if (hasInternet)         options.saveSelectedOptions(options.filename);
        panel.add(progressBar);
        statusLabel.setText(Strings.START_UPDATE);
        repaint();
        LauncherThread thread=new LauncherThread(launcher,options,loginField.getText(),password,hasInternet && !controlDown);
        thread.start();
      }
 else {
        statusLabel.setText(Strings.INVALID_LOGIN);
        repaint();
      }
    }
  }
);
  statusLabel=new JLabel(Strings.READY + ""String_Node_Str"" + Strings.VERSION+ ""String_Node_Str""+ AsieLauncher.VERSION_STRING+ ""String_Node_Str"");
  statusLabel.setBounds(6,219,300,15);
  loginLabel=new JLabel(Strings.LOGIN + ""String_Node_Str"");
  loginField=new JTextField();
  loginField.setText(Utils.loadStringFromFile(launcher.directory + ""String_Node_Str""));
  if (launcher.askForPassword()) {
    passwordLabel=new JLabel(Strings.PASSWORD + ""String_Node_Str"");
    passwordField=new JPasswordField();
    passwordLabel.setBounds(10,160,70,15);
    passwordField.setBounds(80,156,231,24);
    loginLabel.setBounds(10,134,50,15);
    loginField.setBounds(80,130,231,24);
    panel.add(passwordLabel);
    panel.add(passwordField);
  }
 else {
    loginLabel.setBounds(10,160,50,15);
    loginField.setBounds(60,156,251,24);
  }
  progressBar=new JProgressBar();
  progressBar.setBounds(86,160,224,20);
  panel.add(launchButton);
  panel.add(optionsButton);
  panel.add(quitButton);
  panel.add(statusLabel);
  panel.add(loginLabel);
  panel.add(loginField);
  repaint();
}",0.9869436201780416
88917,"@Override public void actionPerformed(ActionEvent event){
  if (validateLaunch()) {
    quitButton.setEnabled(false);
    launchButton.setEnabled(false);
    loginLabel.setText(Strings.PROGRESS + ""String_Node_Str"");
    loginLabel.setBounds(10,162,70,15);
    panel.remove(loginField);
    String password=""String_Node_Str"";
    if (passwordField != null) {
      password=new String(passwordField.getPassword());
      panel.remove(passwordLabel);
      panel.remove(passwordField);
    }
    Utils.saveStringToFile(launcher.directory + ""String_Node_Str"",loginField.getText());
    if (hasInternet)     options.saveSelectedOptions(options.filename);
    panel.add(progressBar);
    statusLabel.setText(Strings.START_UPDATE);
    repaint();
    LauncherThread thread=new LauncherThread(launcher,options,loginField.getText(),password,hasInternet && !controlDown);
    thread.start();
  }
 else {
    statusLabel.setText(Strings.INVALID_LOGIN);
    repaint();
  }
}","@Override public void actionPerformed(ActionEvent event){
  if (validateLaunch()) {
    quitButton.setEnabled(false);
    launchButton.setEnabled(false);
    loginLabel.setText(Strings.PROGRESS + ""String_Node_Str"");
    loginLabel.setBounds(10,162,70,15);
    panel.remove(loginField);
    String password=""String_Node_Str"";
    if (passwordField != null) {
      password=new String(passwordField.getPassword());
      panel.remove(passwordLabel);
      panel.remove(passwordField);
    }
    if (options.loginCheckbox.isSelected())     launcher.setKeepPassword(true);
    Utils.saveStringToFile(launcher.directory + ""String_Node_Str"",loginField.getText());
    if (hasInternet)     options.saveSelectedOptions(options.filename);
    panel.add(progressBar);
    statusLabel.setText(Strings.START_UPDATE);
    repaint();
    LauncherThread thread=new LauncherThread(launcher,options,loginField.getText(),password,hasInternet && !controlDown);
    thread.start();
  }
 else {
    statusLabel.setText(Strings.INVALID_LOGIN);
    repaint();
  }
}",0.9601196410767696
88918,"public void saveSelectedOptions(String filename){
  BufferedWriter writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(filename));
    writer.write((""String_Node_Str"" + OPTIONS_VERSION) + '\n');
    writer.write(ramAmount.getText() + '\n');
    writer.write(otherArgs.getText() + '\n');
    for (    JCheckBox box : optionBoxes.values()) {
      if (box != null && box.isSelected())       writer.write(optionBoxIDs.get(box) + '\n');
    }
    writer.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    if (writer != null)     try {
      writer.close();
    }
 catch (    Exception ee) {
    }
    return;
  }
  return;
}","public void saveSelectedOptions(String filename){
  BufferedWriter writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(filename));
    writer.write((""String_Node_Str"" + OPTIONS_VERSION) + '\n');
    writer.write(ramAmount.getText() + '\n');
    writer.write(otherArgs.getText() + '\n');
    writer.write((loginCheckbox.isSelected() ? ""String_Node_Str"" : ""String_Node_Str"") + '\n');
    for (    JCheckBox box : optionBoxes.values()) {
      if (box != null && box.isSelected())       writer.write(optionBoxIDs.get(box) + '\n');
    }
    writer.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    if (writer != null)     try {
      writer.close();
    }
 catch (    Exception ee) {
    }
    return;
  }
  return;
}",0.931899641577061
88919,"public AsieLauncherOptionsGUI(AsieLauncherGUI parent,Map<String,JSONObject> optionMap,String fn){
  lgui=parent;
  filename=fn;
  setTitle(Strings.OPTIONS);
  setResizable(false);
  setLocationRelativeTo(null);
  setDefaultCloseOperation(HIDE_ON_CLOSE);
  panel=new JPanel();
  getContentPane().add(panel);
  GridBagLayout gbl=new GridBagLayout();
  GridBagConstraints c=new GridBagConstraints();
  panel.setLayout(gbl);
  panel.setBorder(BorderFactory.createEmptyBorder(8,8,8,8));
  optionBoxes=new HashMap<String,JCheckBox>(optionMap.size());
  optionBoxIDs=new HashMap<JCheckBox,String>(optionMap.size());
  c.fill=GridBagConstraints.HORIZONTAL;
  c.anchor=GridBagConstraints.PAGE_START;
  c.gridx=0;
  c.gridy=0;
  for (  String optionID : optionMap.keySet()) {
    JSONObject option=optionMap.get(optionID);
    JCheckBox box=new JCheckBox((String)option.get(""String_Node_Str""),(Boolean)option.get(""String_Node_Str""));
    box.setToolTipText((String)option.get(""String_Node_Str""));
    panel.add(box,c);
    optionBoxes.put(optionID,box);
    optionBoxIDs.put(box,optionID);
    c.gridy++;
  }
  ramAmount=new JTextField(""String_Node_Str"",5);
  otherArgs=new JTextField(20);
  logButton=new JButton(Strings.SHOW_INSTALL_LOG);
  logButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      setOptions();
      AsieLauncherLogGUI logGUI=new AsieLauncherLogGUI();
      logGUI.showLog(lgui.generateLogs());
    }
  }
);
  quitButton=new JButton(Strings.OK);
  quitButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      setOptions();
      setVisible(false);
    }
  }
);
  c.fill=GridBagConstraints.HORIZONTAL;
  c.anchor=GridBagConstraints.LINE_START;
  c.gridy++;
  panel.add(new JLabel(Strings.RAM_AMOUNT_MB),c);
  c.gridy++;
  panel.add(new JLabel(Strings.OTHER_JVM_ARGS),c);
  c.gridy++;
  panel.add(logButton,c);
  c.anchor=GridBagConstraints.LINE_END;
  c.gridx++;
  c.gridy-=2;
  panel.add(ramAmount,c);
  c.gridy++;
  panel.add(otherArgs,c);
  c.gridy++;
  panel.add(quitButton,c);
  loadSelectedOptions(filename);
  oldOptions=getOptions();
  options=getOptions();
  pack();
  validate();
}","public AsieLauncherOptionsGUI(AsieLauncherGUI parent,Map<String,JSONObject> optionMap,String fn){
  lgui=parent;
  filename=fn;
  setTitle(Strings.OPTIONS);
  setResizable(false);
  setLocationRelativeTo(null);
  setDefaultCloseOperation(HIDE_ON_CLOSE);
  panel=new JPanel();
  getContentPane().add(panel);
  GridBagLayout gbl=new GridBagLayout();
  GridBagConstraints c=new GridBagConstraints();
  panel.setLayout(gbl);
  panel.setBorder(BorderFactory.createEmptyBorder(8,8,8,8));
  optionBoxes=new HashMap<String,JCheckBox>(optionMap.size());
  optionBoxIDs=new HashMap<JCheckBox,String>(optionMap.size());
  c.fill=GridBagConstraints.HORIZONTAL;
  c.anchor=GridBagConstraints.PAGE_START;
  c.gridx=0;
  c.gridy=0;
  for (  String optionID : optionMap.keySet()) {
    JSONObject option=optionMap.get(optionID);
    JCheckBox box=new JCheckBox((String)option.get(""String_Node_Str""),(Boolean)option.get(""String_Node_Str""));
    box.setToolTipText((String)option.get(""String_Node_Str""));
    panel.add(box,c);
    optionBoxes.put(optionID,box);
    optionBoxIDs.put(box,optionID);
    c.gridy++;
  }
  ramAmount=new JTextField(""String_Node_Str"",5);
  otherArgs=new JTextField(20);
  logButton=new JButton(Strings.SHOW_INSTALL_LOG);
  logButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      setOptions();
      AsieLauncherLogGUI logGUI=new AsieLauncherLogGUI();
      logGUI.showLog(lgui.generateLogs());
    }
  }
);
  quitButton=new JButton(Strings.OK);
  quitButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      setOptions();
      setVisible(false);
    }
  }
);
  loginCheckbox=new JCheckBox(""String_Node_Str"");
  c.fill=GridBagConstraints.HORIZONTAL;
  c.anchor=GridBagConstraints.LINE_START;
  c.gridy++;
  panel.add(new JLabel(Strings.RAM_AMOUNT_MB),c);
  c.gridy++;
  panel.add(new JLabel(Strings.OTHER_JVM_ARGS),c);
  c.gridy++;
  if (lgui.canKeepPassword()) {
    c.gridy++;
  }
  panel.add(logButton,c);
  c.anchor=GridBagConstraints.LINE_END;
  c.gridx++;
  c.gridy-=2;
  if (lgui.canKeepPassword()) {
    c.gridy--;
  }
  panel.add(ramAmount,c);
  c.gridy++;
  panel.add(otherArgs,c);
  c.gridy++;
  if (lgui.canKeepPassword()) {
    panel.add(loginCheckbox,c);
    c.gridy++;
  }
  panel.add(quitButton,c);
  loadSelectedOptions(filename);
  oldOptions=getOptions();
  options=getOptions();
  pack();
  validate();
}",0.9498827042013224
88920,"public void loadSelectedOptions(String filename){
  String line=""String_Node_Str"";
  File file=new File(filename);
  if (!file.exists())   return;
  for (  JCheckBox box : optionBoxes.values()) {
    box.setSelected(false);
  }
  try {
    BufferedReader reader=new BufferedReader(new FileReader(file));
    line=reader.readLine();
    int currentVersion=new Integer(line);
    if (currentVersion == 0) {
      reader.close();
      return;
    }
    if (currentVersion > 0) {
      ramAmount.setText(reader.readLine());
      otherArgs.setText(reader.readLine());
    }
    line=reader.readLine();
    while (line != null) {
      JCheckBox box=optionBoxes.get(line);
      if (box != null)       box.setSelected(true);
      line=reader.readLine();
    }
    reader.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return;
}","public void loadSelectedOptions(String filename){
  String line=""String_Node_Str"";
  File file=new File(filename);
  if (!file.exists())   return;
  for (  JCheckBox box : optionBoxes.values()) {
    box.setSelected(false);
  }
  try {
    BufferedReader reader=new BufferedReader(new FileReader(file));
    line=reader.readLine();
    int currentVersion=new Integer(line);
    if (currentVersion == 0) {
      reader.close();
      return;
    }
    if (currentVersion > 0) {
      ramAmount.setText(reader.readLine());
      otherArgs.setText(reader.readLine());
    }
    if (currentVersion > 1) {
      loginCheckbox.setEnabled(new Boolean(reader.readLine()));
    }
    line=reader.readLine();
    while (line != null) {
      JCheckBox box=optionBoxes.get(line);
      if (box != null)       box.setSelected(true);
      line=reader.readLine();
    }
    reader.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return;
}",0.9441964285714286
88921,"@SuppressWarnings(""String_Node_Str"") private boolean renewSessionID(){
  triedRenewSessionID=true;
  sessionID=Utils.loadStringFromFile(directory + ""String_Node_Str"");
  if (sessionID == null || sessionID.length() == 0) {
    return false;
  }
  JSONObject payload=new JSONObject();
  payload.put(""String_Node_Str"",getMojangSessionID());
  payload.put(""String_Node_Str"",clientToken);
  JSONObject answer=sendJSONPayload(""String_Node_Str"",payload);
  if (ifErrorThenSet(answer))   return false;
  sessionID=(String)answer.get(""String_Node_Str"");
  if (keepLoggedIn)   saveSessionID();
  return true;
}","@SuppressWarnings(""String_Node_Str"") private boolean renewSessionID(){
  triedRenewSessionID=true;
  sessionID=Utils.loadStringFromFile(directory + ""String_Node_Str"");
  if (sessionID == null || sessionID.length() == 0) {
    return false;
  }
  JSONObject payload=new JSONObject();
  payload.put(""String_Node_Str"",getMojangSessionID());
  payload.put(""String_Node_Str"",clientToken);
  JSONObject answer=sendJSONPayload(""String_Node_Str"",payload);
  if (ifErrorThenSet(answer)) {
    sessionID=null;
    return false;
  }
  sessionID=(String)answer.get(""String_Node_Str"");
  if (keepLoggedIn)   saveSessionID();
  return true;
}",0.977198697068404
88922,"@SuppressWarnings(""String_Node_Str"") @Override public boolean authenticate(String username,String password){
  if (triedRenewSessionID & sessionID != null && sessionID.length() > 0) {
    return true;
  }
  realUsername=username;
  JSONObject payload=new JSONObject();
  payload.put(""String_Node_Str"",username);
  payload.put(""String_Node_Str"",password);
  payload.put(""String_Node_Str"",clientToken);
  JSONObject answer=sendJSONPayload(""String_Node_Str"",payload);
  if (ifErrorThenSet(answer))   return false;
  JSONObject profile=(JSONObject)answer.get(""String_Node_Str"");
  realUsername=(String)profile.get(""String_Node_Str"");
  sessionID=(String)answer.get(""String_Node_Str"");
  if (keepLoggedIn)   saveSessionID();
  return true;
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean authenticate(String username,String password){
  if (triedRenewSessionID && sessionID != null && sessionID.length() > 0) {
    return true;
  }
  realUsername=username;
  JSONObject payload=new JSONObject();
  payload.put(""String_Node_Str"",username);
  payload.put(""String_Node_Str"",password);
  payload.put(""String_Node_Str"",clientToken);
  JSONObject answer=sendJSONPayload(""String_Node_Str"",payload);
  if (ifErrorThenSet(answer))   return false;
  JSONObject profile=(JSONObject)answer.get(""String_Node_Str"");
  realUsername=(String)profile.get(""String_Node_Str"");
  sessionID=(String)answer.get(""String_Node_Str"");
  if (keepLoggedIn)   saveSessionID();
  return true;
}",0.9993211133740664
88923,"@Override public boolean requiresPassword(){
  if (!triedRenewSessionID)   return !renewSessionID();
  return true;
}","@Override public boolean requiresPassword(){
  if (!triedRenewSessionID)   return !renewSessionID();
 else   return true;
}",0.975
88924,"private boolean ifErrorThenSet(JSONObject errorJSON){
  if (!errorJSON.containsKey(""String_Node_Str""))   return false;
  if (errorJSON.containsKey(""String_Node_Str""))   error=(String)errorJSON.get(""String_Node_Str"");
 else   error=(String)errorJSON.get(""String_Node_Str"");
  return true;
}","private boolean ifErrorThenSet(JSONObject errorJSON){
  if (errorJSON == null) {
    error=""String_Node_Str"";
    return true;
  }
  if (!errorJSON.containsKey(""String_Node_Str""))   return false;
  if (errorJSON.containsKey(""String_Node_Str""))   error=(String)errorJSON.get(""String_Node_Str"");
 else   error=(String)errorJSON.get(""String_Node_Str"");
  return true;
}",0.8824427480916031
88925,"public boolean init(){
  file=readJSONNetworkFile(URL + ""String_Node_Str"");
  return (file instanceof JSONObject);
}","public boolean init(){
  file=readJSONUrlFile(URL + ""String_Node_Str"");
  return (file instanceof JSONObject);
}",0.9649122807017544
88926,"public void configureConfig(){
  configFile=readJSONFile(getClass().getResource(""String_Node_Str"").getPath());
  PREFIX=""String_Node_Str"" + (String)configFile.get(""String_Node_Str"") + ""String_Node_Str"";
  URL=(String)configFile.get(""String_Node_Str"");
  WINDOW_NAME=(String)configFile.get(""String_Node_Str"");
  onlineMode=(Boolean)configFile.get(""String_Node_Str"");
}","public void configureConfig(){
  configFile=readJSONUrlFile(getClass().getResource(""String_Node_Str""));
  PREFIX=""String_Node_Str"" + (String)configFile.get(""String_Node_Str"") + ""String_Node_Str"";
  URL=(String)configFile.get(""String_Node_Str"");
  WINDOW_NAME=(String)configFile.get(""String_Node_Str"");
  onlineMode=(Boolean)configFile.get(""String_Node_Str"");
}",0.9821182943603852
88927,"public AsieLauncherOptionsGUI(AsieLauncherGUI parent,Map<String,JSONObject> optionMap,String fn){
  lgui=parent;
  filename=fn;
  setTitle(Strings.OPTIONS);
  setResizable(false);
  setLocationRelativeTo(null);
  setDefaultCloseOperation(HIDE_ON_CLOSE);
  panel=new JPanel();
  getContentPane().add(panel);
  GridBagLayout gbl=new GridBagLayout();
  GridBagConstraints c=new GridBagConstraints();
  panel.setLayout(gbl);
  panel.setBorder(BorderFactory.createEmptyBorder(8,8,8,8));
  optionBoxes=new HashMap<String,JCheckBox>(optionMap.size());
  optionBoxIDs=new HashMap<JCheckBox,String>(optionMap.size());
  c.fill=GridBagConstraints.HORIZONTAL;
  c.anchor=GridBagConstraints.PAGE_START;
  c.gridx=0;
  c.gridy=0;
  for (  String optionID : optionMap.keySet()) {
    JSONObject option=optionMap.get(optionID);
    JCheckBox box=new JCheckBox((String)option.get(""String_Node_Str""),(Boolean)option.get(""String_Node_Str""));
    box.setToolTipText((String)option.get(""String_Node_Str""));
    panel.add(box,c);
    optionBoxes.put(optionID,box);
    optionBoxIDs.put(box,optionID);
    c.gridy++;
  }
  ramAmount=new JTextField(""String_Node_Str"",5);
  otherArgs=new JTextField(20);
  logButton=new JButton(Strings.SHOW_INSTALL_LOG);
  logButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      AsieLauncherLogGUI logGUI=new AsieLauncherLogGUI();
      logGUI.showLog(lgui.generateLogs());
    }
  }
);
  quitButton=new JButton(Strings.OK);
  quitButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      setOptions();
      setVisible(false);
    }
  }
);
  c.fill=GridBagConstraints.HORIZONTAL;
  c.anchor=GridBagConstraints.LINE_START;
  c.gridy++;
  panel.add(new JLabel(Strings.RAM_AMOUNT_MB),c);
  c.gridy++;
  panel.add(new JLabel(Strings.OTHER_JVM_ARGS),c);
  c.gridy++;
  panel.add(logButton,c);
  c.anchor=GridBagConstraints.LINE_END;
  c.gridx++;
  c.gridy-=2;
  panel.add(ramAmount,c);
  c.gridy++;
  panel.add(otherArgs,c);
  c.gridy++;
  panel.add(quitButton,c);
  loadSelectedOptions(filename);
  oldOptions=getOptions();
  options=getOptions();
  pack();
  validate();
}","public AsieLauncherOptionsGUI(AsieLauncherGUI parent,Map<String,JSONObject> optionMap,String fn){
  lgui=parent;
  filename=fn;
  setTitle(Strings.OPTIONS);
  setResizable(false);
  setLocationRelativeTo(null);
  setDefaultCloseOperation(HIDE_ON_CLOSE);
  panel=new JPanel();
  getContentPane().add(panel);
  GridBagLayout gbl=new GridBagLayout();
  GridBagConstraints c=new GridBagConstraints();
  panel.setLayout(gbl);
  panel.setBorder(BorderFactory.createEmptyBorder(8,8,8,8));
  optionBoxes=new HashMap<String,JCheckBox>(optionMap.size());
  optionBoxIDs=new HashMap<JCheckBox,String>(optionMap.size());
  c.fill=GridBagConstraints.HORIZONTAL;
  c.anchor=GridBagConstraints.PAGE_START;
  c.gridx=0;
  c.gridy=0;
  for (  String optionID : optionMap.keySet()) {
    JSONObject option=optionMap.get(optionID);
    JCheckBox box=new JCheckBox((String)option.get(""String_Node_Str""),(Boolean)option.get(""String_Node_Str""));
    box.setToolTipText((String)option.get(""String_Node_Str""));
    panel.add(box,c);
    optionBoxes.put(optionID,box);
    optionBoxIDs.put(box,optionID);
    c.gridy++;
  }
  ramAmount=new JTextField(""String_Node_Str"",5);
  otherArgs=new JTextField(20);
  logButton=new JButton(Strings.SHOW_INSTALL_LOG);
  logButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      setOptions();
      AsieLauncherLogGUI logGUI=new AsieLauncherLogGUI();
      logGUI.showLog(lgui.generateLogs());
    }
  }
);
  quitButton=new JButton(Strings.OK);
  quitButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      setOptions();
      setVisible(false);
    }
  }
);
  c.fill=GridBagConstraints.HORIZONTAL;
  c.anchor=GridBagConstraints.LINE_START;
  c.gridy++;
  panel.add(new JLabel(Strings.RAM_AMOUNT_MB),c);
  c.gridy++;
  panel.add(new JLabel(Strings.OTHER_JVM_ARGS),c);
  c.gridy++;
  panel.add(logButton,c);
  c.anchor=GridBagConstraints.LINE_END;
  c.gridx++;
  c.gridy-=2;
  panel.add(ramAmount,c);
  c.gridy++;
  panel.add(otherArgs,c);
  c.gridy++;
  panel.add(quitButton,c);
  loadSelectedOptions(filename);
  oldOptions=getOptions();
  options=getOptions();
  pack();
  validate();
}",0.995489400090212
88928,"private String getSoundcloudAttributes(String songURL){
  String attributes=null;
  try {
    URL url=new URL(""String_Node_Str"" + songURL);
    InputStream is=url.openStream();
    StringBuilder buffer=new StringBuilder();
    int ptr;
    while ((ptr=is.read()) != -1) {
      buffer.append((char)ptr);
    }
    attributes=buffer.toString().split(""String_Node_Str"")[1].split(""String_Node_Str"")[0].replace(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"" + songURL + ""String_Node_Str"",ex);
  }
  return attributes;
}","@Nullable private String getSoundcloudAttributes(String songURL){
  String attributes=null;
  try {
    String infoUrl=""String_Node_Str"" + songURL;
    GetMethod get;
    HttpClient client=new HttpClient();
    get=new GetMethod(infoUrl);
    int errcode=client.executeMethod(get);
    if (errcode != 200) {
      throw new RuntimeException(""String_Node_Str"" + errcode + ""String_Node_Str"");
    }
    String resp=IOUtils.toString(get.getResponseBodyAsStream(),""String_Node_Str"");
    attributes=resp.split(""String_Node_Str"")[1].split(""String_Node_Str"")[0].replace(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"" + songURL + ""String_Node_Str"",ex);
  }
  return attributes;
}",0.5604311008468053
88929,"public synchronized void irc_soundcloud(String sender,String requestStr){
  if (StringUtils.isBlank(requestStr)) {
    denySong(sender,""String_Node_Str"");
    return;
  }
  int startSeconds=extractStartSecondsFromTimeParam(requestStr);
  String url=requestStr;
  if (!requestStr.startsWith(""String_Node_Str"")) {
    url=""String_Node_Str"" + url;
  }
  doSoundcloudRequest(sender,url,startSeconds);
}","public synchronized void irc_soundcloud(String sender,String requestStr){
  if (StringUtils.isBlank(requestStr)) {
    denySong(sender,""String_Node_Str"");
    return;
  }
  int startSeconds=extractStartSecondsFromTimeParam(requestStr);
  String url=requestStr;
  if (requestStr.trim().charAt(0) == '/')   requestStr=requestStr.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  if (!requestStr.startsWith(""String_Node_Str"")) {
    url=""String_Node_Str"" + url;
  }
  doSoundcloudRequest(sender,url,startSeconds);
}",0.8718510405257394
88930,"public void setChannel(String channel){
  if (channel.startsWith(""String_Node_Str"")) {
    this.channel=channel.substring(1);
  }
 else {
    this.channel=channel;
  }
}","public void setChannel(String channel){
  if (channel.startsWith(""String_Node_Str"")) {
    this.channel=channel.substring(1);
  }
 else {
    this.channel=channel;
  }
  this.channel=this.channel.toLowerCase(Locale.US);
}",0.8666666666666667
88931,"private void doYoutubeRequest(String sender,String youtubeId,int startSeconds){
  updateQueuesForLeavers();
  if (blacklistedYoutubeIds.contains(youtubeId)) {
    denySong(sender,""String_Node_Str"");
    return;
  }
  String infoUrl=""String_Node_Str"" + youtubeId + ""String_Node_Str""+ conf.getUserCountryCode();
  GetMethod get=new GetMethod(infoUrl);
  HttpClient client=new HttpClient();
  try {
    int errcode=client.executeMethod(get);
    if (errcode != 200) {
      logger.info(""String_Node_Str"" + errcode + ""String_Node_Str""+ infoUrl);
      denySong(sender,""String_Node_Str"");
      return;
    }
  }
 catch (  IOException e) {
    logger.warn(""String_Node_Str"",e);
    denySong(sender,""String_Node_Str"");
    return;
  }
  try {
    String resp=IOUtils.toString(get.getResponseBodyAsStream(),""String_Node_Str"");
    if (resp == null) {
      logger.info(""String_Node_Str"" + infoUrl);
      denySong(sender,""String_Node_Str"");
      return;
    }
    JSONObject obj=new JSONObject(resp);
    JSONObject data=obj.getJSONObject(""String_Node_Str"");
    String title=data.getString(""String_Node_Str"");
    int durationSeconds=data.getInt(""String_Node_Str"");
    JSONObject accessControl=data.getJSONObject(""String_Node_Str"");
    String embedAllowed=accessControl.getString(""String_Node_Str"");
    JSONObject status=data.optJSONObject(""String_Node_Str"");
    String restrictionReason=null;
    if (status != null) {
      restrictionReason=status.optString(""String_Node_Str"");
    }
    if (""String_Node_Str"".equals(restrictionReason)) {
      denySong(sender,""String_Node_Str"");
      return;
    }
    if (""String_Node_Str"".equals(restrictionReason)) {
      denySong(sender,""String_Node_Str"");
      return;
    }
    if (!(""String_Node_Str"".equals(embedAllowed))) {
      denySong(sender,""String_Node_Str"");
      return;
    }
    if (!sender.equals(streamer) && durationSeconds / 60.0 > songLengthAllowedMinutes()) {
      denySong(sender,""String_Node_Str"" + songLengthAllowedMinutes() + ""String_Node_Str"");
      return;
    }
    if (!sender.equals(streamer) && conf.getQueueSize() > 0 && songList.size() >= conf.getQueueSize()) {
      denySong(sender,""String_Node_Str"" + conf.getQueueSize());
      return;
    }
    if (currentSong != null && youtubeId.equals(currentSong.getVideoId())) {
      denySong(sender,""String_Node_Str"" + title + ""String_Node_Str"");
      return;
    }
    if (idCountInMainList(youtubeId) > 0) {
      denySong(sender,""String_Node_Str"" + title + ""String_Node_Str"");
      return;
    }
    if (!sender.equals(streamer) && idInRecentHistory(youtubeId)) {
      denySong(sender,""String_Node_Str"" + title + ""String_Node_Str""+ conf.getRecencyDays()+ ""String_Node_Str"");
      return;
    }
    if (!sender.equals(streamer) && conf.getMaxSongsPerUser() > 0 && senderCount(sender) >= conf.getMaxSongsPerUser()) {
      denySong(sender,""String_Node_Str"" + conf.getMaxSongsPerUser() + ""String_Node_Str"");
      return;
    }
    if (!sender.equals(streamer) && moveToPrimaryIfSongInSecondary(youtubeId)) {
      irc.message(sender + ""String_Node_Str"" + title+ ""String_Node_Str"");
      return;
    }
    if (!(currentSong == null && conf.isShowUpNextMessages())) {
      irc.message(sender + ""String_Node_Str"" + title+ ""String_Node_Str""+ nextRequestId);
    }
    SongEntry newSong=new SongEntry(title,youtubeId,nextRequestId,sender,new Date().getTime(),durationSeconds,false,startSeconds);
    addSongToQueue(newSong);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + youtubeId + ""String_Node_Str"",e);
    return;
  }
}","private void doYoutubeRequest(String sender,String youtubeId,int startSeconds){
  updateQueuesForLeavers();
  if (blacklistedYoutubeIds.contains(youtubeId)) {
    denySong(sender,""String_Node_Str"");
    return;
  }
  String infoUrl=""String_Node_Str"" + youtubeId + ""String_Node_Str""+ conf.getUserCountryCode();
  GetMethod get=new GetMethod(infoUrl);
  HttpClient client=new HttpClient();
  try {
    int errcode=client.executeMethod(get);
    if (errcode != 200) {
      logger.info(""String_Node_Str"" + errcode + ""String_Node_Str""+ infoUrl);
      denySong(sender,""String_Node_Str"");
      return;
    }
  }
 catch (  IOException e) {
    logger.warn(""String_Node_Str"",e);
    denySong(sender,""String_Node_Str"");
    return;
  }
  try {
    String resp=IOUtils.toString(get.getResponseBodyAsStream(),""String_Node_Str"");
    if (resp == null) {
      logger.info(""String_Node_Str"" + infoUrl);
      denySong(sender,""String_Node_Str"");
      return;
    }
    JSONObject obj=new JSONObject(resp);
    JSONObject data=obj.getJSONObject(""String_Node_Str"");
    String title=data.getString(""String_Node_Str"");
    int durationSeconds=data.getInt(""String_Node_Str"");
    JSONObject accessControl=data.getJSONObject(""String_Node_Str"");
    String embedAllowed=accessControl.getString(""String_Node_Str"");
    JSONObject status=data.optJSONObject(""String_Node_Str"");
    String restrictionReason=null;
    if (status != null) {
      restrictionReason=status.optString(""String_Node_Str"");
    }
    if (""String_Node_Str"".equals(restrictionReason)) {
      denySong(sender,""String_Node_Str"");
      return;
    }
    if (""String_Node_Str"".equals(restrictionReason)) {
      denySong(sender,""String_Node_Str"");
      return;
    }
    if (!(""String_Node_Str"".equals(embedAllowed))) {
      denySong(sender,""String_Node_Str"");
      return;
    }
    if (!sender.equals(streamer) && durationSeconds / 60.0 > songLengthAllowedMinutes()) {
      denySong(sender,""String_Node_Str"" + songLengthAllowedMinutes() + ""String_Node_Str"");
      return;
    }
    if (!sender.equals(streamer) && conf.getQueueSize() > 0 && songList.size() >= conf.getQueueSize()) {
      denySong(sender,""String_Node_Str"" + conf.getQueueSize());
      return;
    }
    if (currentSong != null && youtubeId.equals(currentSong.getVideoId())) {
      denySong(sender,""String_Node_Str"" + title + ""String_Node_Str"");
      return;
    }
    if (idCountInMainList(youtubeId) > 0) {
      denySong(sender,""String_Node_Str"" + title + ""String_Node_Str"");
      return;
    }
    if (!sender.equals(streamer) && idInRecentHistory(youtubeId)) {
      denySong(sender,""String_Node_Str"" + title + ""String_Node_Str""+ conf.getRecencyDays()+ ""String_Node_Str"");
      return;
    }
    if (!sender.equals(streamer) && conf.getMaxSongsPerUser() > 0 && senderCount(sender) >= conf.getMaxSongsPerUser()) {
      denySong(sender,""String_Node_Str"" + conf.getMaxSongsPerUser() + ""String_Node_Str"");
      return;
    }
    if (!sender.equals(streamer) && moveToPrimaryIfSongInSecondary(youtubeId)) {
      irc.message(sender + ""String_Node_Str"" + title+ ""String_Node_Str"");
      return;
    }
    irc.message(sender + ""String_Node_Str"" + title+ ""String_Node_Str""+ nextRequestId);
    SongEntry newSong=new SongEntry(title,youtubeId,nextRequestId,sender,new Date().getTime(),durationSeconds,false,startSeconds);
    addSongToQueue(newSong);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + youtubeId + ""String_Node_Str"",e);
    return;
  }
}",0.9707254985150616
88932,"private String determineDropboxLink(DjConfiguration conf){
  DbxClient client=getDbxClient();
  try {
    String url=client.createShareableUrl(dboxFilePath);
    return url.replace(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  DbxException e) {
    logger.error(""String_Node_Str"",e);
    return null;
  }
}","private String determineDropboxLink(DjConfiguration conf){
  DbxClient client=getDbxClient();
  try {
    String url=client.createShareableUrl(dboxFilePath);
    if (url == null) {
      return url;
    }
    return url.replace(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  DbxException e) {
    logger.error(""String_Node_Str"",e);
    return null;
  }
}",0.9299552906110284
88933,"private boolean countryIsAllowed(JSONObject contentDetails){
  JSONObject regionRestriction=contentDetails.optJSONObject(""String_Node_Str"");
  if (regionRestriction != null) {
    JSONArray allowed=regionRestriction.optJSONArray(""String_Node_Str"");
    if (allowed != null) {
      boolean weAreAllowed=false;
      for (int i=0; i < allowed.length(); ++i) {
        String country=allowed.getString(i);
        if (country.equalsIgnoreCase(conf.getUserCountryCode())) {
          weAreAllowed=true;
        }
      }
      if (!weAreAllowed) {
        return false;
      }
    }
    JSONArray blocked=contentDetails.optJSONArray(""String_Node_Str"");
    if (blocked != null) {
      for (int i=0; i < blocked.length(); ++i) {
        String country=blocked.getString(i);
        if (country.equalsIgnoreCase(conf.getUserCountryCode())) {
          return false;
        }
      }
    }
  }
  return true;
}","private boolean countryIsAllowed(JSONObject contentDetails){
  JSONObject regionRestriction=contentDetails.optJSONObject(""String_Node_Str"");
  if (regionRestriction != null) {
    JSONArray allowed=regionRestriction.optJSONArray(""String_Node_Str"");
    if (allowed != null) {
      boolean weAreAllowed=false;
      for (int i=0; i < allowed.length(); ++i) {
        String country=allowed.getString(i);
        if (country.equalsIgnoreCase(conf.getUserCountryCode())) {
          weAreAllowed=true;
        }
      }
      if (!weAreAllowed) {
        return false;
      }
    }
    JSONArray blocked=regionRestriction.optJSONArray(""String_Node_Str"");
    if (blocked != null) {
      for (int i=0; i < blocked.length(); ++i) {
        String country=blocked.getString(i);
        if (country.equalsIgnoreCase(conf.getUserCountryCode())) {
          return false;
        }
      }
    }
  }
  return true;
}",0.9829389102916896
88934,"public SongEntry nextSong(){
  updateSongLists();
  boolean playingSecondary=false;
  SongEntry song;
  if (songList.size() == 0) {
    if (secondarySongList.size() == 0) {
      return null;
    }
    song=secondarySongList.remove(0);
    playingSecondary=true;
    System.out.println(""String_Node_Str"" + song.getTitle() + ""String_Node_Str"");
  }
 else {
    song=songList.remove(0);
  }
  String secondaryReport=""String_Node_Str"";
  if (playingSecondary) {
    secondaryReport=""String_Node_Str"";
  }
  sendMessage(channel,""String_Node_Str"" + song.getTitle() + ""String_Node_Str""+ song.getUser()+ secondaryReport);
  return song;
}","public SongEntry nextSong(){
  updateQueuesForLeavers();
  boolean playingSecondary=false;
  SongEntry song;
  if (songList.size() == 0) {
    if (secondarySongList.size() == 0) {
      return null;
    }
    song=secondarySongList.remove(0);
    playingSecondary=true;
    System.out.println(""String_Node_Str"" + song.getTitle() + ""String_Node_Str"");
  }
 else {
    song=songList.remove(0);
  }
  String secondaryReport=""String_Node_Str"";
  if (playingSecondary) {
    secondaryReport=""String_Node_Str"";
  }
  sendMessage(channel,""String_Node_Str"" + song.getTitle() + ""String_Node_Str""+ song.getUser()+ secondaryReport);
  currentSong=song;
  try {
    updatePlayedSongsFile();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return song;
}",0.8816738816738817
88935,"private void doSongRequest(String sender,String id){
  updateSongLists();
  String infoUrl=""String_Node_Str"" + id + ""String_Node_Str"";
  GetMethod get=new GetMethod(infoUrl);
  HttpClient client=new HttpClient();
  try {
    int errcode=client.executeMethod(get);
    if (errcode != 200) {
      System.out.println(""String_Node_Str"" + errcode + ""String_Node_Str""+ infoUrl);
      return;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    return;
  }
  try {
    String resp=get.getResponseBodyAsString();
    if (resp == null) {
      System.out.println(""String_Node_Str"" + infoUrl);
      return;
    }
    JSONObject obj=new JSONObject(resp);
    JSONObject data=obj.getJSONObject(""String_Node_Str"");
    String title=data.getString(""String_Node_Str"");
    int durationSeconds=data.getInt(""String_Node_Str"");
    if (durationSeconds / 60.0 > songLengthAllowedMinutes()) {
      denySong(sender,""String_Node_Str"" + songLengthAllowedMinutes() + ""String_Node_Str"");
      return;
    }
    if (songList.size() >= DjConfiguration.maxSize) {
      denySong(sender,""String_Node_Str"" + DjConfiguration.maxSize);
      return;
    }
    if (currentSong != null && id.equals(currentSong.getVideoId())) {
      denySong(sender,""String_Node_Str"" + title + ""String_Node_Str"");
      return;
    }
    if (idCountInMainList(id) > 0) {
      denySong(sender,""String_Node_Str"" + title + ""String_Node_Str"");
      return;
    }
    if (idInRecentHistory(id)) {
      denySong(sender,""String_Node_Str"" + title + ""String_Node_Str""+ DjConfiguration.recencyDays+ ""String_Node_Str"");
      return;
    }
    if (senderCount(sender) >= 2) {
      denySong(sender,""String_Node_Str"");
      return;
    }
    if (moveToPrimaryIfSongInSecondary(id)) {
      sendMessage(channel,sender + ""String_Node_Str"" + title+ ""String_Node_Str"");
      return;
    }
    ObjectMapper mapper=new ObjectMapper();
    sendMessage(channel,sender + ""String_Node_Str"" + title+ ""String_Node_Str"");
    SongEntry newSong=new SongEntry(title,id,nextRequestId,sender,new Date().getTime());
    ++nextRequestId;
    songList.add(newSong);
    String songJson=mapper.writeValueAsString(newSong);
    FileUtils.writeStringToFile(new File(DjConfiguration.queueHistoryFilePath),songJson + ""String_Node_Str"",""String_Node_Str"",true);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return;
  }
}","private void doSongRequest(String sender,String id){
  updateQueuesForLeavers();
  String infoUrl=""String_Node_Str"" + id + ""String_Node_Str"";
  GetMethod get=new GetMethod(infoUrl);
  HttpClient client=new HttpClient();
  try {
    int errcode=client.executeMethod(get);
    if (errcode != 200) {
      System.out.println(""String_Node_Str"" + errcode + ""String_Node_Str""+ infoUrl);
      return;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    return;
  }
  try {
    String resp=get.getResponseBodyAsString();
    if (resp == null) {
      System.out.println(""String_Node_Str"" + infoUrl);
      return;
    }
    JSONObject obj=new JSONObject(resp);
    JSONObject data=obj.getJSONObject(""String_Node_Str"");
    String title=data.getString(""String_Node_Str"");
    int durationSeconds=data.getInt(""String_Node_Str"");
    if (durationSeconds / 60.0 > songLengthAllowedMinutes()) {
      denySong(sender,""String_Node_Str"" + songLengthAllowedMinutes() + ""String_Node_Str"");
      return;
    }
    if (songList.size() >= DjConfiguration.maxSize) {
      denySong(sender,""String_Node_Str"" + DjConfiguration.maxSize);
      return;
    }
    if (currentSong != null && id.equals(currentSong.getVideoId())) {
      denySong(sender,""String_Node_Str"" + title + ""String_Node_Str"");
      return;
    }
    if (idCountInMainList(id) > 0) {
      denySong(sender,""String_Node_Str"" + title + ""String_Node_Str"");
      return;
    }
    if (idInRecentHistory(id)) {
      denySong(sender,""String_Node_Str"" + title + ""String_Node_Str""+ DjConfiguration.recencyDays+ ""String_Node_Str"");
      return;
    }
    if (senderCount(sender) >= 2) {
      denySong(sender,""String_Node_Str"");
      return;
    }
    if (moveToPrimaryIfSongInSecondary(id)) {
      sendMessage(channel,sender + ""String_Node_Str"" + title+ ""String_Node_Str"");
      return;
    }
    ObjectMapper mapper=new ObjectMapper();
    sendMessage(channel,sender + ""String_Node_Str"" + title+ ""String_Node_Str"");
    SongEntry newSong=new SongEntry(title,id,nextRequestId,sender,new Date().getTime());
    ++nextRequestId;
    songList.add(newSong);
    String songJson=mapper.writeValueAsString(newSong);
    FileUtils.writeStringToFile(new File(DjConfiguration.queueHistoryFilePath),songJson + ""String_Node_Str"",""String_Node_Str"",true);
    updatePlayedSongsFile();
  }
 catch (  IOException e) {
    e.printStackTrace();
    return;
  }
}",0.9895309882747068
88936,"/** 
 * Greets Rocket.  Requires a connected socket, otherwise throws.
 */
private void greetServer() throws Exception {
  logger.finer(""String_Node_Str"");
  out.writeBytes(CLIENT_GREET);
  logger.finer(""String_Node_Str"");
  byte greet[]=new byte[SERVER_GREET.length()];
  try {
    in.readFully(greet,0,SERVER_GREET.length());
  }
 catch (  Exception e) {
    logger.severe(""String_Node_Str"");
    throw new Exception(""String_Node_Str"");
  }
  logger.finer(""String_Node_Str"");
  if (!SERVER_GREET.equals(new String(greet))) {
    logger.severe(""String_Node_Str"");
    throw new Exception(""String_Node_Str"");
  }
}","/** 
 * Greets Rocket.  Requires a connected socket, otherwise throws.
 */
private void greetServer() throws Exception {
  logger.finer(""String_Node_Str"");
  out.writeBytes(CLIENT_GREET);
  logger.finer(""String_Node_Str"");
  byte greet[]=new byte[SERVER_GREET.length()];
  try {
    in.readFully(greet,0,SERVER_GREET.length());
  }
 catch (  Exception e) {
    logger.severe(""String_Node_Str"" + e);
    throw new Exception(""String_Node_Str"",e);
  }
  logger.finer(""String_Node_Str"");
  if (!SERVER_GREET.equals(new String(greet))) {
    logger.severe(""String_Node_Str"");
    throw new Exception(""String_Node_Str"");
  }
}",0.9951377633711508
88937,"public SocketConnector(Logger logger,TrackContainer tracks,Controller controller,String host,int port) throws Exception {
  super(logger,tracks,controller);
  logger.fine(String.format(""String_Node_Str"",host,port));
  try {
    initSocket(host,port);
    greetServer();
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"");
    close();
    throw e;
  }
  logger.info(String.format(""String_Node_Str"",host,port));
}","public SocketConnector(Logger logger,TrackContainer tracks,Controller controller,String host,int port) throws Exception {
  super(logger,tracks,controller);
  logger.fine(String.format(""String_Node_Str"",host,port));
  int triesAmount=10;
  for (int i=0; i < triesAmount; i++) {
    try {
      initSocket(host,port);
      greetServer();
      break;
    }
 catch (    Exception e) {
      if (i < triesAmount - 1) {
        logger.warning(""String_Node_Str"");
        if (socket != null)         socket.close();
      }
 else {
        logger.warning(""String_Node_Str"");
        close();
        throw e;
      }
    }
  }
  logger.info(String.format(""String_Node_Str"",host,port));
}",0.7542754275427542
88938,"public void update(){
  controller.update();
  connector.update();
}","public void update(){
  if (controller != null && connector != null) {
    controller.update();
    connector.update();
  }
}",0.7046632124352331
88939,"/** 
 * Inserts new TrackKey or updates an existing one. If row matches, the old key is replaced.
 */
protected void addOrUpdateKey(TrackKey key){
  int row=key.getRow();
  int index=getKeyIndex(row);
  if (index > 0 && keys.get(index).getRow() == row) {
    keys.set(index,key);
  }
 else {
    this.keys.add(key);
    Collections.sort(keys);
  }
}","/** 
 * Inserts new TrackKey or updates an existing one. If row matches, the old key is replaced.
 */
protected void addOrUpdateKey(TrackKey key){
  int row=key.getRow();
  int index=getKeyIndex(row);
  if (index >= 0 && keys.get(index).getRow() == row) {
    keys.set(index,key);
  }
 else {
    this.keys.add(key);
    Collections.sort(keys);
  }
}",0.9985693848354792
88940,"/** 
 * @param processId the process <strong>Definition</strong> Id - NOT the process Instance Id.
 * @return png image of diagram - nothing highlighted since this is the process definition - not a specific instance.
 */
public byte[] getProcessDefinitionDiagram(String processId) throws IOException {
  ProcessDefinition pd=this.repoSrvc.createProcessDefinitionQuery().processDefinitionKey(processId).latestVersion().singleResult();
  LOG.debug(""String_Node_Str"",pd.getId());
  InputStream in=this.appContext.getResource(""String_Node_Str"").getInputStream();
  byte[] bytes=IOUtils.toByteArray(in);
  IOUtils.closeQuietly(in);
  LOG.debug(""String_Node_Str"",bytes.length);
  return bytes;
}","/** 
 * @param processId the process <strong>Definition</strong> Id - NOT the process Instance Id.
 * @return png image of diagram - nothing highlighted since this is the process definition - not a specific instance.
 */
public byte[] getProcessDefinitionDiagram(String processId) throws IOException {
  ProcessDefinition pd=this.repoSrvc.createProcessDefinitionQuery().processDefinitionKey(processId).latestVersion().singleResult();
  LOG.debug(""String_Node_Str"",pd.getId());
  BpmnModel bpmnModel=repoSrvc.getBpmnModel(pd.getId());
  new BpmnAutoLayout(bpmnModel).execute();
  InputStream in=new DefaultProcessDiagramGenerator().generatePngDiagram(bpmnModel);
  byte[] bytes=IOUtils.toByteArray(in);
  IOUtils.closeQuietly(in);
  LOG.debug(""String_Node_Str"",bytes.length);
  return bytes;
}",0.8399729912221472
88941,"@Transactional public void submitToWorkflow(String docId){
  Document doc=this._getDocument(docId);
  LOG.debug(""String_Node_Str"",doc.getId());
  UserDetails userDetails=this.userService.currentUser();
  if (!StringUtils.equals(userDetails.getUsername(),doc.getAuthor())) {
    throw new InvalidAccessException(""String_Node_Str"");
  }
  try {
    identityService.setAuthenticatedUserId(userDetails.getUsername());
    ProcessInstance current=workflowService.findProcessInstanceByBusinessKey(docId);
    if (current != null) {
      throw new IllegalStateException(""String_Node_Str"" + docId + ""String_Node_Str"");
    }
    DocType docType=doc.getDocType();
    String group=doc.getGroupId();
    ProcessDefinition procDef=this.workflowService.findProcDef(docType,group);
    if (procDef == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + docType.name() + ""String_Node_Str""+ group);
    }
    current=runtimeService.startProcessInstanceByKey(procDef.getKey(),docId);
    Task task=taskService.createTaskQuery().processInstanceId(current.getProcessInstanceId()).singleResult();
    taskService.setAssignee(task.getId(),userDetails.getUsername());
    taskService.setVariableLocal(task.getId(),""String_Node_Str"",""String_Node_Str"");
    Map<String,Object> processVariables=Maps.newHashMap();
    processVariables.put(""String_Node_Str"",doc.getAuthor());
    processVariables.put(""String_Node_Str"",doc.getId());
    processVariables.put(""String_Node_Str"",doc.getAuthor());
    processVariables.put(""String_Node_Str"",doc.getDocType());
    taskService.setVariables(task.getId(),processVariables);
    taskService.complete(task.getId());
  }
  finally {
    identityService.setAuthenticatedUserId(null);
  }
}","@Transactional public void submitToWorkflow(String docId){
  Document doc=this._getDocument(docId);
  LOG.debug(""String_Node_Str"",doc.getId());
  UserDetails userDetails=this.userService.currentUser();
  if (!StringUtils.equals(userDetails.getUsername(),doc.getAuthor())) {
    throw new InvalidAccessException(""String_Node_Str"");
  }
  try {
    identityService.setAuthenticatedUserId(userDetails.getUsername());
    DocType docType=doc.getDocType();
    String group=doc.getGroupId();
    ProcessDefinition procDef=this.workflowService.findProcDef(docType,group);
    if (procDef == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + docType.name() + ""String_Node_Str""+ group);
    }
    ProcessInstance current=workflowService.findProcessInstanceByBusinessKey(docId);
    if (current == null) {
      current=runtimeService.startProcessInstanceByKey(procDef.getKey(),docId);
    }
    Task task=taskService.createTaskQuery().processInstanceId(current.getProcessInstanceId()).singleResult();
    taskService.setAssignee(task.getId(),userDetails.getUsername());
    taskService.setVariableLocal(task.getId(),""String_Node_Str"",""String_Node_Str"");
    Map<String,Object> processVariables=Maps.newHashMap();
    processVariables.put(""String_Node_Str"",doc.getAuthor());
    processVariables.put(""String_Node_Str"",doc.getId());
    processVariables.put(""String_Node_Str"",doc.getAuthor());
    processVariables.put(""String_Node_Str"",doc.getDocType());
    taskService.setVariables(task.getId(),processVariables);
    taskService.complete(task.getId());
  }
  finally {
    identityService.setAuthenticatedUserId(null);
  }
}",0.7986896962477665
88942,"/** 
 * Complete an approval task
 * @param approved
 * @param comment
 * @param taskId
 */
public void approveOrRejectDoc(boolean approved,String comment,String taskId){
  LOG.debug(""String_Node_Str"" + approved);
  UserDetails userDetails=userService.currentUser();
  try {
    identityService.setAuthenticatedUserId(userDetails.getUsername());
    Task task=taskService.createTaskQuery().taskId(taskId).includeProcessVariables().singleResult();
    if (task == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    Map<String,Object> vars=task.getProcessVariables();
    if (StringUtils.equalsIgnoreCase((String)vars.get(""String_Node_Str""),userDetails.getUsername())) {
      throw new RuntimeException(""String_Node_Str"");
    }
    runtimeService.setVariable(task.getExecutionId(),WFConstants.PROCESS_VAR_APPROVED_OR_REJECTED,approved);
    taskService.setAssignee(task.getId(),userDetails.getUsername());
    taskService.addComment(task.getId(),task.getProcessInstanceId(),comment);
    taskService.setVariableLocal(task.getId(),WFConstants.TASK_VAR_APPROVED_OR_REJECTED,Boolean.valueOf(approved));
    taskService.complete(task.getId());
  }
  finally {
    identityService.setAuthenticatedUserId(null);
  }
}","/** 
 * Complete an approval task
 * @param approved
 * @param comment
 * @param taskId
 */
public void approveOrRejectDoc(boolean approved,String comment,String taskId){
  LOG.debug(""String_Node_Str"" + approved);
  UserDetails userDetails=userService.currentUser();
  try {
    identityService.setAuthenticatedUserId(userDetails.getUsername());
    Task task=taskService.createTaskQuery().taskId(taskId).includeProcessVariables().singleResult();
    if (task == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    Map<String,Object> vars=task.getProcessVariables();
    if (StringUtils.equalsIgnoreCase((String)vars.get(""String_Node_Str""),userDetails.getUsername())) {
      throw new RuntimeException(""String_Node_Str"");
    }
    runtimeService.setVariable(task.getExecutionId(),WFConstants.PROCESS_VAR_APPROVED_OR_REJECTED,approved);
    taskService.setAssignee(task.getId(),userDetails.getUsername());
    taskService.addComment(task.getId(),task.getProcessInstanceId(),comment);
    taskService.setVariableLocal(task.getId(),WFConstants.TASK_VAR_OUTCOME,approved ? ""String_Node_Str"" : ""String_Node_Str"");
    taskService.complete(task.getId());
  }
  finally {
    identityService.setAuthenticatedUserId(null);
  }
}",0.8737864077669902
88943,"/** 
 * Complete a collaboration task
 * @param taskId
 * @param comment
 */
public void collaborateTask(String taskId,String comment){
  LOG.debug(""String_Node_Str"");
  UserDetails userDetails=userService.currentUser();
  try {
    identityService.setAuthenticatedUserId(userDetails.getUsername());
    Task task=taskService.createTaskQuery().taskId(taskId).includeProcessVariables().singleResult();
    if (task == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    taskService.setAssignee(task.getId(),userDetails.getUsername());
    taskService.addComment(task.getId(),task.getProcessInstanceId(),comment);
    taskService.complete(task.getId());
  }
  finally {
    identityService.setAuthenticatedUserId(null);
  }
}","/** 
 * Complete a collaboration task
 * @param taskId
 * @param comment
 */
public void collaborateTask(String taskId,String comment){
  LOG.debug(""String_Node_Str"");
  UserDetails userDetails=userService.currentUser();
  try {
    identityService.setAuthenticatedUserId(userDetails.getUsername());
    Task task=taskService.createTaskQuery().taskId(taskId).includeProcessVariables().singleResult();
    if (task == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    taskService.setAssignee(task.getId(),userDetails.getUsername());
    taskService.addComment(task.getId(),task.getProcessInstanceId(),comment);
    taskService.setVariableLocal(task.getId(),WFConstants.TASK_VAR_OUTCOME,""String_Node_Str"");
    taskService.complete(task.getId());
  }
  finally {
    identityService.setAuthenticatedUserId(null);
  }
}",0.9398353388220392
88944,"protected void initDemoUsers(){
  createUser(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  createUser(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),null);
  createUser(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),null);
  createUser(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),null);
  createUser(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),null);
  createUser(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,Arrays.asList(""String_Node_Str"",""String_Node_Str""),null);
}","protected void initDemoUsers(){
  createUser(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  createUser(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),null);
  createUser(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),null);
  createUser(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),null);
  createUser(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,Arrays.asList(""String_Node_Str"",""String_Node_Str""),null);
}",0.925209777453484
88945,"protected void initDemoGroups(){
  String[] assignmentGroups=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String groupId : assignmentGroups) {
    createGroup(groupId,""String_Node_Str"");
  }
  String[] securityGroups=new String[]{""String_Node_Str"",""String_Node_Str""};
  for (  String groupId : securityGroups) {
    createGroup(groupId,""String_Node_Str"");
  }
}","protected void initDemoGroups(){
  String[] assignmentGroups=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String groupId : assignmentGroups) {
    createGroup(groupId,""String_Node_Str"");
  }
  String[] securityGroups=new String[]{""String_Node_Str"",""String_Node_Str""};
  for (  String groupId : securityGroups) {
    createGroup(groupId,""String_Node_Str"");
  }
}",0.978622327790974
88946,"protected static SequenceFlow collaborationTask(SubProcess subProcess,DynamicUserTask from,int currentIdx,int total,SequenceFlow prev){
  org.activiti.bpmn.model.UserTask current=new org.activiti.bpmn.model.UserTask();
  current.setId(String.format(""String_Node_Str"",WFConstants.TASK_ID_DOC_COLLABORATE,currentIdx));
  if (StringUtils.isBlank(from.getName())) {
    current.setName(String.format(""String_Node_Str"",currentIdx,total));
  }
 else {
    current.setName(from.getName());
  }
  ActivitiListener onCreate=new ActivitiListener();
  onCreate.setImplementationType(ImplementationType.IMPLEMENTATION_TYPE_EXPRESSION);
  onCreate.setImplementation(""String_Node_Str"");
  onCreate.setEvent(""String_Node_Str"");
  ActivitiListener onComplete=new ActivitiListener();
  onComplete.setImplementationType(ImplementationType.IMPLEMENTATION_TYPE_EXPRESSION);
  onComplete.setImplementation(""String_Node_Str"");
  onComplete.setEvent(""String_Node_Str"");
  current.setTaskListeners(Lists.newArrayList(onCreate,onComplete));
  subProcess.addFlowElement(current);
  prev.setTargetRef(current.getId());
  SequenceFlow ref=new SequenceFlow();
  ref.setId(String.format(""String_Node_Str"",currentIdx,total));
  ref.setName(String.format(""String_Node_Str"",currentIdx,total));
  ref.setSourceRef(current.getId());
  return ref;
}","protected static SequenceFlow collaborationTask(SubProcess subProcess,DynamicUserTask from,int currentIdx,int total,SequenceFlow prev){
  org.activiti.bpmn.model.UserTask current=new org.activiti.bpmn.model.UserTask();
  current.setId(String.format(""String_Node_Str"",WFConstants.TASK_ID_DOC_COLLABORATE,currentIdx));
  if (StringUtils.isBlank(from.getName())) {
    current.setName(String.format(""String_Node_Str"",currentIdx,total));
  }
 else {
    current.setName(from.getName());
  }
  ActivitiListener onCreate=new ActivitiListener();
  onCreate.setImplementationType(ImplementationType.IMPLEMENTATION_TYPE_EXPRESSION);
  onCreate.setImplementation(""String_Node_Str"");
  onCreate.setEvent(""String_Node_Str"");
  ActivitiListener onComplete=new ActivitiListener();
  onComplete.setImplementationType(ImplementationType.IMPLEMENTATION_TYPE_EXPRESSION);
  onComplete.setImplementation(""String_Node_Str"");
  onComplete.setEvent(""String_Node_Str"");
  current.setTaskListeners(Lists.newArrayList(onCreate,onComplete));
  subProcess.addFlowElement(current);
  prev.setTargetRef(current.getId());
  SequenceFlow ref=new SequenceFlow();
  ref.setId(String.format(""String_Node_Str"",currentIdx,total));
  ref.setName(String.format(""String_Node_Str"",currentIdx,total));
  ref.setSourceRef(current.getId());
  subProcess.addFlowElement(ref);
  return ref;
}",0.987218045112782
88947,"@Test public void testUpdateDynamicTasks() throws IOException {
  List<DynamicUserTask> dynamicUserTasks=Lists.newArrayList();
  DynamicUserTask dynamicUserTask=new DynamicUserTask();
  DocType bookReport=DocType.BOOK_REPORT;
  String group=""String_Node_Str"";
  dynamicUserTask.getCandidateGroups().add(group);
  dynamicUserTask.setIndex(0);
  dynamicUserTask.setDynamicUserTaskType(DynamicUserTaskType.APPROVE_REJECT);
  dynamicUserTasks.add(dynamicUserTask);
  DynamicUserTask dynamicUserTask2=new DynamicUserTask();
  dynamicUserTask2.getCandidateUsers().add(""String_Node_Str"");
  dynamicUserTask2.setDynamicUserTaskType(DynamicUserTaskType.COLLABORATION);
  dynamicUserTask2.setIndex(1);
  dynamicUserTasks.add(dynamicUserTask2);
  ProcessDefinition pd=this.workflowService.findProcDef(bookReport,group);
  assertNotNull(pd);
  List<DynamicUserTask> tasks=this.workflowBldr.getDynamicTasks(pd);
  assertTrue(tasks.size() == 4);
  ProcessDefinition updatedProcDef=this.workflowBldr.updateDynamicTasks(bookReport,group,dynamicUserTasks);
  assertNotNull(updatedProcDef);
  tasks=this.workflowBldr.getDynamicTasks(updatedProcDef);
  assertTrue(tasks.size() == 2);
  BpmnModel bpmnModel=this.repositoryService.getBpmnModel(updatedProcDef.getId());
  InputStream in=new DefaultProcessDiagramGenerator().generatePngDiagram(bpmnModel);
  FileUtils.copyInputStreamToFile(in,new File(""String_Node_Str""));
  IOUtils.closeQuietly(in);
  LOG.debug(""String_Node_Str"");
  byte[] bytes=new BpmnXMLConverter().convertToXML(bpmnModel,""String_Node_Str"");
  FileUtils.writeByteArrayToFile(new File(""String_Node_Str""),bytes);
  LOG.debug(""String_Node_Str"");
}","@Test @DirtiesContext public void testUpdateDynamicTasks() throws IOException {
  List<DynamicUserTask> dynamicUserTasks=Lists.newArrayList();
  DynamicUserTask dynamicUserTask=new DynamicUserTask();
  DocType bookReport=DocType.BOOK_REPORT;
  String group=""String_Node_Str"";
  dynamicUserTask.getCandidateGroups().add(group);
  dynamicUserTask.setIndex(0);
  dynamicUserTask.setDynamicUserTaskType(DynamicUserTaskType.APPROVE_REJECT);
  dynamicUserTasks.add(dynamicUserTask);
  DynamicUserTask dynamicUserTask2=new DynamicUserTask();
  dynamicUserTask2.getCandidateUsers().add(""String_Node_Str"");
  dynamicUserTask2.setDynamicUserTaskType(DynamicUserTaskType.COLLABORATION);
  dynamicUserTask2.setIndex(1);
  dynamicUserTasks.add(dynamicUserTask2);
  ProcessDefinition pd=this.workflowService.findProcDef(bookReport,group);
  assertNotNull(pd);
  List<DynamicUserTask> tasks=this.workflowBldr.getDynamicTasks(pd);
  assertTrue(tasks.size() == 4);
  ProcessDefinition updatedProcDef=this.workflowBldr.updateDynamicTasks(bookReport,group,dynamicUserTasks);
  assertNotNull(updatedProcDef);
  tasks=this.workflowBldr.getDynamicTasks(updatedProcDef);
  assertTrue(tasks.size() == 2);
  BpmnModel bpmnModel=this.repositoryService.getBpmnModel(updatedProcDef.getId());
  InputStream in=new DefaultProcessDiagramGenerator().generatePngDiagram(bpmnModel);
  FileUtils.copyInputStreamToFile(in,new File(""String_Node_Str""));
  IOUtils.closeQuietly(in);
  LOG.debug(""String_Node_Str"");
  byte[] bytes=new BpmnXMLConverter().convertToXML(bpmnModel,""String_Node_Str"");
  FileUtils.writeByteArrayToFile(new File(""String_Node_Str""),bytes);
  LOG.debug(""String_Node_Str"");
}",0.9951544518473652
88948,"@Test public void testGetDynamicTasks(){
  String key=WFConstants.createProcId(DocType.BOOK_REPORT,""String_Node_Str"");
  ProcessDefinition processDefinition=this.repositoryService.createProcessDefinitionQuery().processDefinitionCategory(WFConstants.NAMESPACE_CATEGORY).processDefinitionKey(key).latestVersion().singleResult();
  assertNotNull(processDefinition);
  List<DynamicUserTask> dynamicTasks=this.workflowBldr.getDynamicTasks(processDefinition);
  LOG.debug(dynamicTasks.size());
  assertTrue(dynamicTasks.size() == 4);
  assertTrue(dynamicTasks.get(0).getId().startsWith(WFConstants.TASK_ID_DOC_COLLABORATE));
  assertTrue(dynamicTasks.get(1).getId().startsWith(WFConstants.TASK_ID_DOC_COLLABORATE));
  assertTrue(dynamicTasks.get(2).getId().startsWith(WFConstants.TASK_ID_DOC_APPROVAL));
  assertTrue(dynamicTasks.get(3).getId().startsWith(WFConstants.TASK_ID_DOC_APPROVAL));
}","@Test @DirtiesContext public void testGetDynamicTasks(){
  String key=WFConstants.createProcId(DocType.BOOK_REPORT,""String_Node_Str"");
  ProcessDefinition processDefinition=this.repositoryService.createProcessDefinitionQuery().processDefinitionCategory(WFConstants.NAMESPACE_CATEGORY).processDefinitionKey(key).latestVersion().singleResult();
  assertNotNull(processDefinition);
  List<DynamicUserTask> dynamicTasks=this.workflowBldr.getDynamicTasks(processDefinition);
  LOG.debug(dynamicTasks.size());
  assertTrue(dynamicTasks.size() == 4);
  assertTrue(dynamicTasks.get(0).getId().startsWith(WFConstants.TASK_ID_DOC_COLLABORATE));
  assertTrue(dynamicTasks.get(1).getId().startsWith(WFConstants.TASK_ID_DOC_COLLABORATE));
  assertTrue(dynamicTasks.get(2).getId().startsWith(WFConstants.TASK_ID_DOC_APPROVAL));
  assertTrue(dynamicTasks.get(3).getId().startsWith(WFConstants.TASK_ID_DOC_APPROVAL));
}",0.9910614525139664
88949,"@Test public void testCreateGroupWorkflow() throws IOException {
  ProcessDefinition procDef=this.workflowBldr.createGroupWorkflow(DocType.BOOK_REPORT,""String_Node_Str"");
  LOG.debug(procDef.getKey());
  assertNotNull(procDef);
  BpmnModel model=repositoryService.getBpmnModel(procDef.getId());
  assertNotNull(model);
  InputStream in=new DefaultProcessDiagramGenerator().generatePngDiagram(model);
  FileUtils.copyInputStreamToFile(in,new File(""String_Node_Str""));
  IOUtils.closeQuietly(in);
  LOG.debug(""String_Node_Str"");
}","@Test @DirtiesContext public void testCreateGroupWorkflow() throws IOException {
  ProcessDefinition procDef=this.workflowBldr.createGroupWorkflow(DocType.BOOK_REPORT,""String_Node_Str"");
  LOG.debug(procDef.getKey());
  assertNotNull(procDef);
  BpmnModel model=repositoryService.getBpmnModel(procDef.getId());
  assertNotNull(model);
  InputStream in=new DefaultProcessDiagramGenerator().generatePngDiagram(model);
  FileUtils.copyInputStreamToFile(in,new File(""String_Node_Str""));
  IOUtils.closeQuietly(in);
  LOG.debug(""String_Node_Str"");
}",0.9850746268656716
88950,"@Transactional(readOnly=true) public Document getDocument(String id){
  return null;
}","@Transactional(readOnly=true) public Document getDocument(String id){
  return this._getDocument(id);
}",0.8783068783068783
88951,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) public ResponseEntity<Response> acknowledgeAlert(@PathVariable(""String_Node_Str"") String alertId){
  log.debug(""String_Node_Str"",alertId);
  this.alertService.acknowledgeAlert(alertId,this.currentUserName());
  Response res=new Response(true,""String_Node_Str"");
  return new ResponseEntity<Response>(res,HttpStatus.OK);
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) public ResponseEntity<Response> acknowledgeAlert(@PathVariable(""String_Node_Str"") String alertId){
  LOG.debug(""String_Node_Str"",alertId);
  this.alertService.acknowledgeAlert(alertId,this.currentUserName());
  Response res=new Response(true,""String_Node_Str"");
  return new ResponseEntity<Response>(res,HttpStatus.OK);
}",0.9930555555555556
88952,"/** 
 * @param userId
 * @return a list of alerts, sorted ascending by creation date, for a given user.Only the actual user him/herself can obtain his/her own alerts
 */
public List<Alert> readActiveAlertsByUser(String userId){
  log.debug(""String_Node_Str"",userId);
  UserDetails user=this.userService.currentUser();
  if (!StringUtils.equals(user.getUsername(),userId)) {
    throw new InvalidAccessException(""String_Node_Str"");
  }
  return this.alertDao.readActiveAlertsByUserId(userId);
}","/** 
 * @param userId
 * @return a list of alerts, sorted ascending by creation date, for a given user.Only the actual user him/herself can obtain his/her own alerts
 */
@Transactional(readOnly=true) public List<Alert> readActiveAlertsByUser(String userId){
  LOG.debug(""String_Node_Str"",userId);
  UserDetails user=this.userService.currentUser();
  if (!StringUtils.equals(user.getUsername(),userId)) {
    throw new InvalidAccessException(""String_Node_Str"");
  }
  return this.alertDao.readActiveAlertsByUserId(userId);
}",0.9645669291338582
88953,"/** 
 * Send an alert using the general <em>System User</em> as the sender
 * @param to
 * @param priority
 * @param message
 * @return
 */
public String sendSystemAlert(String to,int priority,String message){
  log.debug(""String_Node_Str"",to,priority);
  Alert alert=new Alert();
  alert.setCreatedBy(UserService.SYSTEM_USER);
  alert.setPriority(priority);
  alert.setCreatedDate(new Date());
  alert.setUserId(to);
  alert.setAcknowledged(Boolean.FALSE);
  alert.setMessage(message);
  return this.alertDao.create(alert);
}","/** 
 * Send an alert using the general <em>System User</em> as the sender
 * @param to
 * @param priority
 * @param message
 * @return id of new alert
 */
@Transactional public String sendSystemAlert(String to,int priority,String message){
  LOG.debug(""String_Node_Str"",to,priority);
  Alert alert=new Alert();
  alert.setCreatedBy(UserService.SYSTEM_USER);
  alert.setPriority(priority);
  alert.setCreatedDate(new Date());
  alert.setUserId(to);
  alert.setAcknowledged(Boolean.FALSE);
  alert.setMessage(message);
  return this.alertDao.create(alert);
}",0.9658356417359188
88954,"public void acknowledgeAlert(String alertId,String userId){
  log.debug(""String_Node_Str"",alertId,userId);
  Alert alert=this.alertDao.read(alertId);
  if (!StringUtils.equals(userId,alert.getUserId())) {
    throw new InvalidAccessException(""String_Node_Str"");
  }
  alert.setAcknowledged(Boolean.TRUE);
  this.alertDao.update(alert);
}","@Transactional public void acknowledgeAlert(String alertId,String userId){
  LOG.debug(""String_Node_Str"",alertId,userId);
  Alert alert=this.alertDao.read(alertId);
  if (!StringUtils.equals(userId,alert.getUserId())) {
    throw new InvalidAccessException(""String_Node_Str"");
  }
  alert.setAcknowledged(Boolean.TRUE);
  this.alertDao.update(alert);
}",0.969521044992743
88955,"/** 
 * Send an alert using the current logged in user as the sender
 * @param to
 * @param priority
 * @param message
 * @return
 */
public String sendAlert(String to,int priority,String message){
  log.debug(""String_Node_Str"",to,priority);
  Alert alert=new Alert();
  UserDetails from=this.userService.currentUser();
  alert.setCreatedBy(from.getUsername());
  alert.setPriority(priority);
  alert.setCreatedDate(new Date());
  alert.setUserId(to);
  alert.setAcknowledged(Boolean.FALSE);
  alert.setMessage(message);
  return this.alertDao.create(alert);
}","/** 
 * Send an alert using the current logged in user as the sender
 * @param to
 * @param priority
 * @param message
 * @return id of new alert
 */
@Transactional public String sendAlert(String to,int priority,String message){
  LOG.debug(""String_Node_Str"",to,priority);
  Alert alert=new Alert();
  UserDetails from=this.userService.currentUser();
  alert.setCreatedBy(from.getUsername());
  alert.setPriority(priority);
  alert.setCreatedDate(new Date());
  alert.setUserId(to);
  alert.setAcknowledged(Boolean.FALSE);
  alert.setMessage(message);
  return this.alertDao.create(alert);
}",0.9678540399652475
88956,"@Override @Transactional(readOnly=true) public Alert read(String alertId){
  String sql=""String_Node_Str"";
  Map<String,String> params=ImmutableMap.of(""String_Node_Str"",alertId);
  Alert alert=this.namedJdbcTemplate.queryForObject(sql,params,new AlertRowMapper());
  return alert;
}","@Override public Alert read(String alertId){
  String sql=""String_Node_Str"";
  Map<String,String> params=ImmutableMap.of(""String_Node_Str"",alertId);
  Alert alert=this.namedJdbcTemplate.queryForObject(sql,params,new AlertRowMapper());
  return alert;
}",0.9438202247191012
88957,"@Override @Transactional(readOnly=true) public List<Alert> readActiveAlertsByUserId(String userId){
  String sql=""String_Node_Str"";
  Map<String,String> params=ImmutableMap.of(""String_Node_Str"",userId);
  List<Alert> alerts=this.namedJdbcTemplate.query(sql,params,new AlertRowMapper());
  log.debug(""String_Node_Str"",alerts.size(),userId);
  return alerts;
}","@Override public List<Alert> readActiveAlertsByUserId(String userId){
  String sql=""String_Node_Str"";
  Map<String,String> params=ImmutableMap.of(""String_Node_Str"",userId);
  List<Alert> alerts=this.namedJdbcTemplate.query(sql,params,new AlertRowMapper());
  LOG.debug(""String_Node_Str"",alerts.size(),userId);
  return alerts;
}",0.9475218658892128
88958,"@Transactional @Override public void acknowledgeAlert(String alertId){
  String sql=""String_Node_Str"";
  Map<String,Boolean> params=ImmutableMap.of(""String_Node_Str"",Boolean.TRUE);
  int results=this.namedJdbcTemplate.update(sql,params);
  log.debug(""String_Node_Str"" + results + ""String_Node_Str"");
}","@Override public void acknowledgeAlert(String alertId){
  String sql=""String_Node_Str"";
  Map<String,Boolean> params=ImmutableMap.of(""String_Node_Str"",Boolean.TRUE);
  int results=this.namedJdbcTemplate.update(sql,params);
  LOG.debug(""String_Node_Str"",results);
}",0.8955752212389381
88959,"@Override @Transactional public String create(Alert alert){
  log.debug(""String_Node_Str"" + alert);
  checkArgument(StringUtils.isBlank(alert.getId()),""String_Node_Str"");
  String id=UUID.randomUUID().toString();
  alert.setId(id);
  String sql=""String_Node_Str"" + ""String_Node_Str"";
  BeanPropertySqlParameterSource source=new BeanPropertySqlParameterSource(alert);
  int results=this.namedJdbcTemplate.update(sql,source);
  log.debug(""String_Node_Str"" + results + ""String_Node_Str"");
  return id;
}","@Override @Transactional public String create(Alert alert){
  LOG.debug(""String_Node_Str"",alert);
  checkArgument(StringUtils.isBlank(alert.getId()),""String_Node_Str"");
  String id=UUID.randomUUID().toString();
  alert.setId(id);
  String sql=""String_Node_Str"" + ""String_Node_Str"";
  BeanPropertySqlParameterSource source=new BeanPropertySqlParameterSource(alert);
  int results=this.namedJdbcTemplate.update(sql,source);
  LOG.debug(""String_Node_Str"",results);
  return id;
}",0.944672131147541
88960,"@Override @Transactional public void update(Alert alert){
  checkArgument(StringUtils.isNotBlank(alert.getId()),""String_Node_Str"");
  String sql=""String_Node_Str"" + ""String_Node_Str"";
  BeanPropertySqlParameterSource source=new BeanPropertySqlParameterSource(alert);
  int results=this.namedJdbcTemplate.update(sql,source);
  log.debug(""String_Node_Str"" + results + ""String_Node_Str"");
}","@Override public void update(Alert alert){
  checkArgument(StringUtils.isNotBlank(alert.getId()),""String_Node_Str"");
  String sql=""String_Node_Str"" + ""String_Node_Str"";
  BeanPropertySqlParameterSource source=new BeanPropertySqlParameterSource(alert);
  int results=this.namedJdbcTemplate.update(sql,source);
  LOG.debug(""String_Node_Str"",results);
}",0.9199457259158752
88961,"@Override @Transactional(readOnly=true) public int getCount(){
  String sql=""String_Node_Str"";
  @SuppressWarnings(""String_Node_Str"") int count=this.namedJdbcTemplate.queryForObject(sql,Collections.EMPTY_MAP,Integer.class);
  log.debug(""String_Node_Str"" + count + ""String_Node_Str"");
  return count;
}","@Override public int getCount(){
  String sql=""String_Node_Str"";
  @SuppressWarnings(""String_Node_Str"") int count=this.namedJdbcTemplate.queryForObject(sql,Collections.EMPTY_MAP,Integer.class);
  LOG.debug(""String_Node_Str"",count);
  return count;
}",0.8727272727272727
88962,"@Override @Transactional public void delete(String alertId){
  String sql=""String_Node_Str"";
  Map<String,String> params=ImmutableMap.of(""String_Node_Str"",alertId);
  int deleted=this.namedJdbcTemplate.update(sql,params);
  log.debug(""String_Node_Str"" + deleted + ""String_Node_Str"");
}","@Override public void delete(String alertId){
  String sql=""String_Node_Str"";
  Map<String,String> params=ImmutableMap.of(""String_Node_Str"",alertId);
  int deleted=this.namedJdbcTemplate.update(sql,params);
  LOG.debug(""String_Node_Str"",deleted);
}",0.8893058161350844
88963,"@Override @Transactional(readOnly=true) public List<Alert> readPage(PagingCriteria criteria){
  log.debug(""String_Node_Str"" + criteria);
  if (criteria == null || criteria.getLimit() == null || criteria.getStart() == null) {
    log.warn(""String_Node_Str"");
    return readAll();
  }
  String sql=""String_Node_Str"";
  BeanPropertySqlParameterSource source=new BeanPropertySqlParameterSource(criteria);
  List<Alert> alerts=this.namedJdbcTemplate.query(sql,source,new AlertRowMapper());
  log.debug(alerts.size() + ""String_Node_Str"" + criteria);
  return alerts;
}","@Override public List<Alert> readPage(PagingCriteria criteria){
  LOG.debug(""String_Node_Str"",criteria);
  if (criteria == null || criteria.getLimit() == null || criteria.getStart() == null) {
    LOG.warn(""String_Node_Str"");
    return readAll();
  }
  String sql=""String_Node_Str"";
  BeanPropertySqlParameterSource source=new BeanPropertySqlParameterSource(criteria);
  List<Alert> alerts=this.namedJdbcTemplate.query(sql,source,new AlertRowMapper());
  LOG.debug(""String_Node_Str"",alerts.size(),criteria);
  return alerts;
}",0.9137614678899084
88964,"@Override @Transactional(readOnly=true) public List<Alert> readAll(){
  String sql=""String_Node_Str"";
  List<Alert> alerts=this.namedJdbcTemplate.query(sql,new AlertRowMapper());
  log.debug(""String_Node_Str"" + alerts.size());
  return alerts;
}","@Override public List<Alert> readAll(){
  String sql=""String_Node_Str"";
  List<Alert> alerts=this.namedJdbcTemplate.query(sql,new AlertRowMapper());
  LOG.debug(""String_Node_Str"",alerts.size());
  return alerts;
}",0.9126637554585152
88965,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String view(ModelMap model,@PathVariable(value=""String_Node_Str"") String id,final RedirectAttributes redirectAttributes,HttpServletRequest request){
  log.debug(""String_Node_Str"",id);
  Document doc=docService.getDocument(id);
  model.addAttribute(""String_Node_Str"",doc);
  List<HistoricTask> hts=this.localTaskSrvc.getDocApprovalHistory(id);
  model.addAttribute(""String_Node_Str"",hts);
  if (doc.getAuthor().equals(currentUserName()) && doc.isEditable()) {
    return ""String_Node_Str"";
  }
 else   if (doc.getAuthor().equals(currentUserName())) {
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  return ""String_Node_Str"";
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String view(ModelMap model,@PathVariable(value=""String_Node_Str"") String id,final RedirectAttributes redirectAttributes,HttpServletRequest request){
  LOG.debug(""String_Node_Str"",id);
  Document doc=docService.getDocument(id);
  model.addAttribute(""String_Node_Str"",doc);
  List<HistoricTask> hts=this.localTaskSrvc.getTaskHistory(id);
  model.addAttribute(""String_Node_Str"",hts);
  if (doc.getAuthor().equals(currentUserName()) && doc.isEditable()) {
    return ""String_Node_Str"";
  }
 else   if (doc.getAuthor().equals(currentUserName())) {
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  return ""String_Node_Str"";
}",0.9866497139224412
88966,"@RequestMapping(method=RequestMethod.POST) public String create(@Valid @ModelAttribute BookReport bookReport,BindingResult result,@RequestParam(required=false,value=""String_Node_Str"") boolean isSubmit,final RedirectAttributes redirectAttributes,HttpServletRequest request){
  log.debug(""String_Node_Str"",bookReport);
  if (result.hasErrors()) {
    return ""String_Node_Str"";
  }
  String docId=this.docService.createDocument(bookReport);
  if (isSubmit) {
    log.debug(""String_Node_Str"",docId);
    this.docService.submitToWorkflow(docId);
  }
  if (isSubmit) {
    redirectAttributes.addFlashAttribute(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    redirectAttributes.addFlashAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  return ""String_Node_Str"";
}","@RequestMapping(method=RequestMethod.POST) public String create(@Valid @ModelAttribute BookReport bookReport,BindingResult result,@RequestParam(required=false,value=""String_Node_Str"") boolean isSubmit,final RedirectAttributes redirectAttributes,HttpServletRequest request){
  LOG.debug(""String_Node_Str"",bookReport);
  if (result.hasErrors()) {
    return ""String_Node_Str"";
  }
  String docId=this.docService.createDocument(bookReport);
  if (isSubmit) {
    LOG.debug(""String_Node_Str"",docId);
    this.docService.submitToWorkflow(docId);
  }
  if (isSubmit) {
    redirectAttributes.addFlashAttribute(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    redirectAttributes.addFlashAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  return ""String_Node_Str"";
}",0.9923664122137404
88967,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String update(@Valid @ModelAttribute BookReport bookReport,BindingResult result,@RequestParam(required=false,value=""String_Node_Str"") boolean isSubmit,final RedirectAttributes redirectAttributes,HttpServletRequest request){
  log.debug(""String_Node_Str"",bookReport);
  if (!bookReport.isEditable()) {
    redirectAttributes.addFlashAttribute(""String_Node_Str"",""String_Node_Str"");
    return ""String_Node_Str"";
  }
  if (result.hasErrors()) {
    return ""String_Node_Str"";
  }
  this.docService.updateDocument(bookReport);
  String docId=bookReport.getId();
  if (isSubmit) {
    log.debug(""String_Node_Str"",docId);
    this.docService.submitToWorkflow(docId);
  }
  if (isSubmit) {
    redirectAttributes.addFlashAttribute(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    redirectAttributes.addFlashAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  return ""String_Node_Str"";
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String update(@Valid @ModelAttribute BookReport bookReport,BindingResult result,@RequestParam(required=false,value=""String_Node_Str"") boolean isSubmit,final RedirectAttributes redirectAttributes,HttpServletRequest request){
  LOG.debug(""String_Node_Str"",bookReport);
  if (!bookReport.isEditable()) {
    redirectAttributes.addFlashAttribute(""String_Node_Str"",""String_Node_Str"");
    return ""String_Node_Str"";
  }
  if (result.hasErrors()) {
    return ""String_Node_Str"";
  }
  this.docService.updateDocument(bookReport);
  String docId=bookReport.getId();
  if (isSubmit) {
    LOG.debug(""String_Node_Str"",docId);
    this.docService.submitToWorkflow(docId);
  }
  if (isSubmit) {
    redirectAttributes.addFlashAttribute(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    redirectAttributes.addFlashAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  return ""String_Node_Str"";
}",0.9938712972420838
88968,"@Override public void validate(Object target,Errors errors){
  BookReport bookReport=(BookReport)target;
  log.debug(""String_Node_Str"",bookReport);
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
}","@Override public void validate(Object target,Errors errors){
  BookReport bookReport=(BookReport)target;
  LOG.debug(""String_Node_Str"",bookReport);
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
  ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"");
}",0.9967355821545156
88969,"public void submitForApproval(String docId){
  Document doc=this.docDao.read(docId);
  log.debug(""String_Node_Str"",doc.getId());
  UserDetails userDetails=this.userService.currentUser();
  if (!StringUtils.equals(userDetails.getUsername(),doc.getAuthor())) {
    throw new InvalidAccessException(""String_Node_Str"");
  }
  doc.setState(Document.STATE_WAITING_FOR_APPROVAL);
  Map<String,Object> processVariables=Maps.newHashMap();
  processVariables.put(""String_Node_Str"",doc.getAuthor());
  processVariables.put(""String_Node_Str"",doc.getId());
  processVariables.put(""String_Node_Str"",doc.getTitle());
  processVariables.put(""String_Node_Str"",doc.getAuthor());
  try {
    identityService.setAuthenticatedUserId(userDetails.getUsername());
    ProcessInstance current=this.getCurrentProcess(docId);
    if (current == null) {
      String key=Workflow.PROCESS_ID_DOC_APPROVAL;
      current=runtimeService.startProcessInstanceByKey(key,doc.getId());
    }
    Task task=taskService.createTaskQuery().processInstanceId(current.getProcessInstanceId()).singleResult();
    taskService.setAssignee(task.getId(),userDetails.getUsername());
    this.docDao.update(doc);
    taskService.setVariableLocal(task.getId(),""String_Node_Str"",""String_Node_Str"");
    taskService.setVariables(task.getId(),processVariables);
    taskService.complete(task.getId());
  }
  finally {
    identityService.setAuthenticatedUserId(null);
  }
}","public void submitForApproval(String docId){
  Document doc=this.docDao.read(docId);
  log.debug(""String_Node_Str"",doc.getId());
  UserDetails userDetails=this.userService.currentUser();
  if (!StringUtils.equals(userDetails.getUsername(),doc.getAuthor())) {
    throw new InvalidAccessException(""String_Node_Str"");
  }
  doc.setState(Document.STATE_WAITING_FOR_APPROVAL);
  Map<String,Object> processVariables=Maps.newHashMap();
  processVariables.put(""String_Node_Str"",doc.getAuthor());
  processVariables.put(""String_Node_Str"",doc.getId());
  processVariables.put(""String_Node_Str"",doc.getTitle());
  processVariables.put(""String_Node_Str"",doc.getAuthor());
  try {
    identityService.setAuthenticatedUserId(userDetails.getUsername());
    ProcessInstance current=this.getCurrentProcess(docId);
    if (current == null) {
      String key=String.format(""String_Node_Str"",Workflow.PROCESS_ID_DOC_APPROVAL,doc.getGroupId());
      current=runtimeService.startProcessInstanceByKey(key,doc.getId());
    }
    Task task=taskService.createTaskQuery().processInstanceId(current.getProcessInstanceId()).singleResult();
    taskService.setAssignee(task.getId(),userDetails.getUsername());
    this.docDao.update(doc);
    taskService.setVariableLocal(task.getId(),""String_Node_Str"",""String_Node_Str"");
    taskService.setVariables(task.getId(),processVariables);
    taskService.complete(task.getId());
  }
  finally {
    identityService.setAuthenticatedUserId(null);
  }
}",0.9826989619377162
88970,"@ModelAttribute public void addModelInfo(ModelMap model,HttpServletRequest request){
  super.addModelInfo(model,request);
  Authentication auth=(Authentication)request.getUserPrincipal();
  Set<String> authorities=AuthorityUtils.authorityListToSet(auth.getAuthorities());
  model.addAttribute(""String_Node_Str"",authorities);
  model.addAttribute(""String_Node_Str"",springContextListener.getAppContexts());
}","@ModelAttribute public void addModelInfo(ModelMap model,HttpServletRequest request){
  super.addModelInfo(model,request);
  Authentication auth=(Authentication)request.getUserPrincipal();
  Set<String> authorities=AuthorityUtils.authorityListToSet(auth.getAuthorities());
  model.addAttribute(""String_Node_Str"",authorities);
  model.addAttribute(""String_Node_Str"",springContextListener.getAppContexts());
  model.addAttribute(""String_Node_Str"",workflowService.getAllProcDefs(false));
}",0.9113355780022446
88971,"/** 
 * <p> This is a convenience method that will try for the most specific workflow (group and docType), but will fall back to just general docType if no group workflow exists.
 * @param docType
 * @return latest process definition for the given group and/or docType or null if neither (i.e. no group and also no docType) exits.
 */
public ProcessDefinition findProcDef(DocType docType,String group){
  log.debug(""String_Node_Str"",docType.name(),group);
  ProcessDefinition pd=this.findProcDefByDocTypeAndGroup(docType,group);
  if (pd == null) {
    log.debug(""String_Node_Str"",docType.name(),group);
    pd=this.findBaseProcDef(docType);
  }
  return pd;
}","/** 
 * <p/> This is a convenience method that will try for the most specific workflow (group and docType), but will fall back to just general docType if no group workflow exists.
 * @param docType
 * @return latest process definition for the given group and/or docType or null if neither (i.e. no group and also no docType) exits.
 */
public ProcessDefinition findProcDef(DocType docType,String group){
  ProcessDefinition pd=this.findProcDefByDocTypeAndGroup(docType,group);
  if (pd == null) {
    log.debug(""String_Node_Str"",docType.name(),group);
    pd=this.findBaseProcDef(docType);
  }
  return pd;
}",0.7460567823343849
88972,"public ProcessDefinition findBaseProcDef(DocType docType){
  log.debug(""String_Node_Str"",docType.name());
  String processIdStr=String.format(""String_Node_Str"",docType.name(),WFConstants.WORKFLOW_GROUP_NONE);
  ProcessDefinition pd=this.repoSrvc.createProcessDefinitionQuery().processDefinitionCategory(WFConstants.NAMESPACE_CATEGORY).processDefinitionKey(processIdStr).latestVersion().singleResult();
  return pd;
}","/** 
 * @param docType
 * @return the base workflow for a given document type (i.e. the process id of the process is {@code DocType_NONE}) or null if no base document exists.
 */
public ProcessDefinition findBaseProcDef(DocType docType){
  log.debug(""String_Node_Str"",docType.name());
  String processIdStr=String.format(""String_Node_Str"",docType.name(),WFConstants.WORKFLOW_GROUP_NONE);
  ProcessDefinition pd=this.repoSrvc.createProcessDefinitionQuery().processDefinitionCategory(WFConstants.NAMESPACE_CATEGORY).processDefinitionKey(processIdStr).latestVersion().singleResult();
  return pd;
}",0.8229475766567754
88973,"public void submitForApproval(String docId){
  Document doc=this.docDao.read(docId);
  log.debug(""String_Node_Str"",doc.getId());
  UserDetails userDetails=this.userService.currentUser();
  if (!StringUtils.equals(userDetails.getUsername(),doc.getAuthor())) {
    throw new InvalidAccessException(""String_Node_Str"");
  }
  doc.setState(Document.STATE_WAITING_FOR_APPROVAL);
  Map<String,Object> processVariables=Maps.newHashMap();
  processVariables.put(""String_Node_Str"",doc.getAuthor());
  processVariables.put(""String_Node_Str"",doc.getId());
  processVariables.put(""String_Node_Str"",doc.getTitle());
  processVariables.put(""String_Node_Str"",doc.getAuthor());
  try {
    identityService.setAuthenticatedUserId(userDetails.getUsername());
    ProcessInstance current=this.getCurrentProcess(docId);
    if (current == null) {
      current=runtimeService.startProcessInstanceByKey(Workflow.PROCESS_ID_DOC_APPROVAL,doc.getId(),processVariables);
    }
    Task task=taskService.createTaskQuery().processInstanceId(current.getProcessInstanceId()).singleResult();
    taskService.setAssignee(task.getId(),userDetails.getUsername());
    this.docDao.update(doc);
    taskService.setVariableLocal(task.getId(),""String_Node_Str"",""String_Node_Str"");
    taskService.complete(task.getId());
  }
  finally {
    identityService.setAuthenticatedUserId(null);
  }
}","public void submitForApproval(String docId){
  Document doc=this.docDao.read(docId);
  log.debug(""String_Node_Str"",doc.getId());
  UserDetails userDetails=this.userService.currentUser();
  if (!StringUtils.equals(userDetails.getUsername(),doc.getAuthor())) {
    throw new InvalidAccessException(""String_Node_Str"");
  }
  doc.setState(Document.STATE_WAITING_FOR_APPROVAL);
  Map<String,Object> processVariables=Maps.newHashMap();
  processVariables.put(""String_Node_Str"",doc.getAuthor());
  processVariables.put(""String_Node_Str"",doc.getId());
  processVariables.put(""String_Node_Str"",doc.getTitle());
  processVariables.put(""String_Node_Str"",doc.getAuthor());
  try {
    identityService.setAuthenticatedUserId(userDetails.getUsername());
    ProcessInstance current=this.getCurrentProcess(docId);
    if (current == null) {
      current=runtimeService.startProcessInstanceByKey(Workflow.PROCESS_ID_DOC_APPROVAL,doc.getId());
    }
    Task task=taskService.createTaskQuery().processInstanceId(current.getProcessInstanceId()).singleResult();
    taskService.setAssignee(task.getId(),userDetails.getUsername());
    this.docDao.update(doc);
    taskService.setVariableLocal(task.getId(),""String_Node_Str"",""String_Node_Str"");
    taskService.setVariables(task.getId(),processVariables);
    taskService.complete(task.getId());
  }
  finally {
    identityService.setAuthenticatedUserId(null);
  }
}",0.971656976744186
88974,"/** 
 * Default authentication action.
 * @return Result
 */
public Result authenticate(){
  Form<Login> form=formFactory.form(Login.class).bindFromRequest();
  String username=form.field(""String_Node_Str"").value();
  String redirect=session().get(""String_Node_Str"");
  LOG.info(""String_Node_Str"" + username);
  if (username.contains(""String_Node_Str"")) {
    return emailAuthenticate(redirect);
  }
 else   if (username.length() == 0) {
    LOG.info(""String_Node_Str"");
    flash(""String_Node_Str"",""String_Node_Str"");
    return badRequest(landingpage.render(form));
  }
 else {
    return ldapAuthenticate(redirect);
  }
}","/** 
 * Default authentication action.
 * @return Result
 */
public Result authenticate(){
  Form<Login> form=formFactory.form(Login.class).bindFromRequest();
  String username=form.field(""String_Node_Str"").value();
  String redirect=session().get(""String_Node_Str"");
  LOG.info(""String_Node_Str"" + username);
  LOG.info(""String_Node_Str"" + redirect);
  if (username.contains(""String_Node_Str"")) {
    return emailAuthenticate(redirect);
  }
 else   if (username.length() == 0) {
    LOG.info(""String_Node_Str"");
    flash(""String_Node_Str"",""String_Node_Str"");
    return badRequest(landingpage.render(form));
  }
 else {
    return ldapAuthenticate(redirect);
  }
}",0.765891472868217
88975,"/** 
 * Upload some media.
 * @param folderId Folder to upload.
 * @return Result
 */
@Transactional @SuppressWarnings(""String_Node_Str"") public Result upload(Long folderId){
  MultipartFormData body=request().body().asMultipartFormData();
  MultipartFormData.FilePart<File> upload=body.getFile(""String_Node_Str"");
  Folder folder=folderManager.findById(folderId);
  if (!Secured.viewFolder(folder)) {
    return forbidden(""String_Node_Str"");
  }
  if (upload != null) {
    if (mediaManager.byteAsMB(upload.getFile().length()) > MAX_FILESIZE) {
      return status(REQUEST_ENTITY_TOO_LARGE,""String_Node_Str"" + MAX_FILESIZE + ""String_Node_Str"");
    }
    if (mediaManager.existsInFolder(upload.getFilename(),folder)) {
      return status(CONFLICT,""String_Node_Str"");
    }
    Media med=new Media();
    med.title=upload.getFilename();
    med.mimetype=upload.getContentType();
    med.fileName=upload.getFilename();
    med.file=upload.getFile();
    med.owner=Component.currentAccount();
    med.folder=folder;
    med.temporarySender=Component.currentAccount();
    try {
      mediaManager.create(med);
      notificationService.createNotification(med,Media.MEDIA_NEW_MEDIA);
    }
 catch (    Exception e) {
      return internalServerError(""String_Node_Str"");
    }
    return created(""String_Node_Str"" + med.id);
  }
 else {
    return internalServerError(""String_Node_Str"");
  }
}","/** 
 * Upload some media.
 * @param folderId Folder to upload.
 * @return Result
 */
@Transactional @SuppressWarnings(""String_Node_Str"") public Result upload(Long folderId){
  MultipartFormData body=request().body().asMultipartFormData();
  MultipartFormData.FilePart<File> upload=body.getFile(""String_Node_Str"");
  Folder folder=folderManager.findById(folderId);
  if (!Secured.viewFolder(folder)) {
    return forbidden(""String_Node_Str"");
  }
  if (upload != null) {
    if (mediaManager.byteAsMB(upload.getFile().length()) > MAX_FILESIZE) {
      return status(REQUEST_ENTITY_TOO_LARGE,""String_Node_Str"" + MAX_FILESIZE + ""String_Node_Str"");
    }
    if (mediaManager.existsInFolder(upload.getFilename(),folder)) {
      return status(CONFLICT,""String_Node_Str"");
    }
    Media med=new Media();
    med.title=upload.getFilename();
    med.mimetype=upload.getContentType();
    med.fileName=upload.getFilename();
    med.file=upload.getFile();
    med.owner=Component.currentAccount();
    med.folder=folder;
    med.temporarySender=Component.currentAccount();
    try {
      mediaManager.create(med);
      notificationService.createNotification(med,Media.MEDIA_NEW_MEDIA);
      LOG.info(""String_Node_Str"" + med.fileName + ""String_Node_Str""+ med.owner.id+ ""String_Node_Str""+ med.folder.id);
    }
 catch (    Exception e) {
      return internalServerError(""String_Node_Str"");
    }
    return created(""String_Node_Str"" + med.id);
  }
 else {
    return internalServerError(""String_Node_Str"");
  }
}",0.9592822636300896
88976,"/** 
 * Marks all notifications as read for an Account.
 * @return Result
 */
@Transactional public Result readAll(){
  notificationManager.markAllAsRead(Component.currentAccount());
  flash(""String_Node_Str"",messagesApi.get(Lang.defaultLang(),""String_Node_Str""));
  return redirect(request().getHeader(""String_Node_Str""));
}","/** 
 * Marks all notifications as read for an Account.
 * @return Result
 */
@Transactional public Result readAll(){
  notificationManager.markAllAsRead(Component.currentAccount());
  flash(""String_Node_Str"",messagesApi.get(Lang.defaultLang(),""String_Node_Str""));
  return Secured.nullRedirect(request());
}",0.9320695102685624
88977,"/** 
 * Adds a post.
 * @param anyId  can be a accountId or groupId
 * @param target define target stream: profile-stream, group-stream
 * @return Result
 */
@Transactional public Result addPost(Long anyId,String target){
  Account account=Component.currentAccount();
  Form<Post> filledForm=postForm.bindFromRequest();
  if (target.equals(Post.GROUP)) {
    Group group=groupManager.findById(anyId);
    if (Secured.isMemberOfGroup(group,account)) {
      if (filledForm.hasErrors()) {
        flash(""String_Node_Str"",messagesApi.get(Lang.defaultLang(),""String_Node_Str""));
      }
 else {
        Post post=filledForm.get();
        post.owner=Component.currentAccount();
        post.group=group;
        postManager.create(post);
        notificationService.createNotification(post,Post.GROUP);
      }
    }
 else {
      flash(""String_Node_Str"",messagesApi.get(Lang.defaultLang(),""String_Node_Str""));
    }
    return redirect(controllers.routes.GroupController.stream(group.id,PAGE,false));
  }
  if (target.equals(Post.PROFILE)) {
    Account profile=accountManager.findById(anyId);
    if (Secured.isNotNull(profile) && (Secured.isFriend(profile) || profile.equals(account) || Secured.isAdmin())) {
      if (filledForm.hasErrors()) {
        flash(""String_Node_Str"",messagesApi.get(Lang.defaultLang(),""String_Node_Str""));
      }
 else {
        Post post=filledForm.get();
        post.account=profile;
        post.owner=account;
        postManager.create(post);
        if (!account.equals(profile)) {
          notificationService.createNotification(post,Post.PROFILE);
        }
      }
      return redirect(controllers.routes.ProfileController.stream(anyId,PAGE,false));
    }
    flash(""String_Node_Str"",messagesApi.get(Lang.defaultLang(),""String_Node_Str""));
    return redirect(controllers.routes.ProfileController.stream(anyId,PAGE,false));
  }
  if (target.equals(Post.STREAM)) {
    Account profile=accountManager.findById(anyId);
    if (Secured.isNotNull(profile) && profile.equals(account)) {
      if (filledForm.hasErrors()) {
        flash(""String_Node_Str"",messagesApi.get(Lang.defaultLang(),""String_Node_Str""));
      }
 else {
        Post post=filledForm.get();
        post.account=profile;
        post.owner=account;
        postManager.create(post);
      }
      return redirect(controllers.routes.Application.stream(STREAM_FILTER,PAGE,false));
    }
    flash(""String_Node_Str"",messagesApi.get(Lang.defaultLang(),""String_Node_Str""));
    return redirect(controllers.routes.Application.stream(STREAM_FILTER,PAGE,false));
  }
  return redirect(controllers.routes.Application.index());
}","/** 
 * Adds a post.
 * @param anyId  can be a accountId or groupId
 * @param target define target stream: profile-stream, group-stream
 * @return Result
 */
@Transactional public Result addPost(Long anyId,String target){
  Account account=Component.currentAccount();
  Form<Post> filledForm=postForm.bindFromRequest();
  if (target.equals(Post.GROUP)) {
    Group group=groupManager.findById(anyId);
    if (Secured.isMemberOfGroup(group,account)) {
      if (filledForm.hasErrors()) {
        flash(""String_Node_Str"",messagesApi.get(Lang.defaultLang(),""String_Node_Str""));
      }
 else {
        Post post=filledForm.get();
        post.owner=Component.currentAccount();
        post.group=group;
        postManager.create(post);
        notificationService.createNotification(post,Post.GROUP);
        LOG.info(""String_Node_Str"" + post.owner.id + ""String_Node_Str""+ group.title);
      }
    }
 else {
      flash(""String_Node_Str"",messagesApi.get(Lang.defaultLang(),""String_Node_Str""));
    }
    return redirect(controllers.routes.GroupController.stream(group.id,PAGE,false));
  }
  if (target.equals(Post.PROFILE)) {
    Account profile=accountManager.findById(anyId);
    if (Secured.isNotNull(profile) && (Secured.isFriend(profile) || profile.equals(account) || Secured.isAdmin())) {
      if (filledForm.hasErrors()) {
        flash(""String_Node_Str"",messagesApi.get(Lang.defaultLang(),""String_Node_Str""));
      }
 else {
        Post post=filledForm.get();
        post.account=profile;
        post.owner=account;
        postManager.create(post);
        if (!account.equals(profile)) {
          notificationService.createNotification(post,Post.PROFILE);
        }
      }
      return redirect(controllers.routes.ProfileController.stream(anyId,PAGE,false));
    }
    flash(""String_Node_Str"",messagesApi.get(Lang.defaultLang(),""String_Node_Str""));
    return redirect(controllers.routes.ProfileController.stream(anyId,PAGE,false));
  }
  if (target.equals(Post.STREAM)) {
    Account profile=accountManager.findById(anyId);
    if (Secured.isNotNull(profile) && profile.equals(account)) {
      if (filledForm.hasErrors()) {
        flash(""String_Node_Str"",messagesApi.get(Lang.defaultLang(),""String_Node_Str""));
      }
 else {
        Post post=filledForm.get();
        post.account=profile;
        post.owner=account;
        postManager.create(post);
      }
      return redirect(controllers.routes.Application.stream(STREAM_FILTER,PAGE,false));
    }
    flash(""String_Node_Str"",messagesApi.get(Lang.defaultLang(),""String_Node_Str""));
    return redirect(controllers.routes.Application.stream(STREAM_FILTER,PAGE,false));
  }
  return redirect(controllers.routes.Application.index());
}",0.9838770153730784
88978,"@Transactional public Result addComment(long postId){
  final Post parent=postManager.findById(postId);
  final Account account=Component.currentAccount();
  if (!Secured.addComment(parent)) {
    return badRequest();
  }
  final Form<Post> filledForm=postForm.bindFromRequest();
  if (filledForm.hasErrors()) {
    return badRequest();
  }
 else {
    final Post post=filledForm.get();
    post.owner=account;
    post.parent=parent;
    postManager.create(post);
    postManager.update(parent);
    if (postManager.belongsToGroup(parent)) {
      notificationService.createNotification(post,Post.COMMENT_GROUP);
    }
    if (postManager.belongsToAccount(parent)) {
      if (!account.equals(parent.owner) && !parent.account.equals(parent.owner)) {
        notificationService.createNotification(post,Post.COMMENT_OWN_PROFILE);
      }
 else       if (!account.equals(parent.account)) {
        notificationService.createNotification(post,Post.COMMENT_PROFILE);
      }
    }
    return ok(views.html.snippets.postComment.render(post));
  }
}","@Transactional public Result addComment(long postId){
  final Post parent=postManager.findById(postId);
  final Account account=Component.currentAccount();
  if (!Secured.addComment(parent)) {
    return badRequest();
  }
  final Form<Post> filledForm=postForm.bindFromRequest();
  if (filledForm.hasErrors()) {
    return badRequest();
  }
 else {
    final Post post=filledForm.get();
    post.owner=account;
    post.parent=parent;
    postManager.create(post);
    postManager.update(parent);
    if (postManager.belongsToGroup(parent)) {
      notificationService.createNotification(post,Post.COMMENT_GROUP);
    }
    if (postManager.belongsToAccount(parent)) {
      if (!account.equals(parent.owner) && !parent.account.equals(parent.owner)) {
        notificationService.createNotification(post,Post.COMMENT_OWN_PROFILE);
      }
 else       if (!account.equals(parent.account)) {
        notificationService.createNotification(post,Post.COMMENT_PROFILE);
      }
    }
    LOG.info(""String_Node_Str"" + post.owner.id + ""String_Node_Str""+ post.parent.id);
    return ok(views.html.snippets.postComment.render(post));
  }
}",0.960883571099862
88979,"public boolean isAccountValid(String email,String password){
  try {
    final Account result=(Account)JPA.em().createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",email).getSingleResult();
    if (result != null && Component.md5(password).equals(result.password)) {
      return true;
    }
  }
 catch (  NoResultException exp) {
    return false;
  }
  return false;
}","public boolean isAccountValid(String email,String password){
  try {
    final Account result=(Account)jpaApi.em().createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",email).getSingleResult();
    if (result != null && Component.md5(password).equals(result.password)) {
      return true;
    }
  }
 catch (  NoResultException exp) {
    return false;
  }
  return false;
}",0.9908256880733946
88980,"public Folder findById(long id){
  return JPA.em().find(Folder.class,id);
}","public Folder findById(long id){
  return jpaApi.em().find(Folder.class,id);
}",0.954248366013072
88981,"@Override public void update(Object model){
  JPA.em().merge(model);
}","@Override public void update(Object model){
  jpaApi.em().merge(model);
}",0.951048951048951
88982,"@Override public void delete(Object model){
  Folder folder=((Folder)model);
  if (!folder.folders.isEmpty()) {
    for (    Folder subFolder : folder.folders) {
      delete(subFolder);
    }
  }
  for (  Media media : folder.files) {
    mediaManager.delete(media);
  }
  JPA.em().remove(folder);
}","@Override public void delete(Object model){
  Folder folder=((Folder)model);
  if (!folder.folders.isEmpty()) {
    for (    Folder subFolder : folder.folders) {
      delete(subFolder);
    }
  }
  for (  Media media : folder.files) {
    mediaManager.delete(media);
  }
  jpaApi.em().remove(folder);
}",0.988391376451078
88983,"/** 
 * Returns a notification by a reference ID and a recipient ID.
 * @param referenceId Reference ID
 * @param recipientId Recipient ID
 * @return Notification instance
 * @throws NoResultException
 */
public static Notification findByReferenceIdAndRecipientId(Long referenceId,Long recipientId) throws NoResultException {
  return JPA.em().createQuery(""String_Node_Str"",Notification.class).setParameter(""String_Node_Str"",referenceId).setParameter(""String_Node_Str"",recipientId).getSingleResult();
}","/** 
 * Returns a notification by a reference ID and a recipient ID.
 * @param referenceId Reference ID
 * @param recipientId Recipient ID
 * @return Notification instance
 * @throws NoResultException
 */
public static Notification findByReferenceIdAndRecipientId(Long referenceId,Long recipientId) throws NoResultException {
  return JPA.withTransaction(() -> {
    return JPA.em().createQuery(""String_Node_Str"",Notification.class).setParameter(""String_Node_Str"",referenceId).setParameter(""String_Node_Str"",recipientId).getSingleResult();
  }
);
}",0.956190476190476
88984,"@Override public List<Account> getRecipients(){
  Folder rootFolder=FolderManager.findRoot(folder);
  List<Account> accounts=new ArrayList<>();
  if (rootFolder.group != null) {
    for (    GroupAccount groupAccount : rootFolder.group.groupAccounts) {
      if (groupAccount.linkType.equals(LinkType.establish)) {
        accounts.add(groupAccount.account);
      }
    }
  }
  return accounts;
}","@Override public List<Account> getRecipients(){
  return GroupAccountManager.findAccountsByGroup2(folder.group,LinkType.establish);
}",0.4150943396226415
88985,"public Result mediaList(Long folderId){
  Folder folder=folderManager.findById(folderId);
  if (!Secured.viewFolder(folder)) {
    return forbidden(""String_Node_Str"");
  }
  Folder rootFolder=FolderManager.findRoot(folder);
  List<Media> mediaSet=folder.files;
  List<Folder> folderList=folder.folders;
  return created(list.render(mediaSet,folderList,rootFolder.group.id));
}","public Result mediaList(Long folderId){
  Folder folder=folderManager.findById(folderId);
  if (!Secured.viewFolder(folder)) {
    return forbidden(""String_Node_Str"");
  }
  Folder rootFolder=FolderManager.findRoot(folder);
  List<Media> mediaSet=folder.files;
  List<Folder> folderList=folder.folders;
  return ok(list.render(mediaSet,folderList,rootFolder.group.id));
}",0.9879518072289156
88986,"/** 
 * Upload some media.
 * @param folderId Folder to upload.
 * @return Result
 */
@Transactional public Result upload(Long folderId){
  MultipartFormData body=request().body().asMultipartFormData();
  Http.MultipartFormData.FilePart upload=body.getFile(""String_Node_Str"");
  Folder folder=folderManager.findById(folderId);
  if (!Secured.viewFolder(folder)) {
    return forbidden(""String_Node_Str"");
  }
  if (upload != null) {
    if (mediaManager.byteAsMB(upload.getFile().length()) > MAX_FILESIZE) {
      return status(REQUEST_ENTITY_TOO_LARGE,""String_Node_Str"" + MAX_FILESIZE + ""String_Node_Str"");
    }
    if (mediaManager.existsInFolder(upload.getFilename(),folder)) {
      return status(CONFLICT,""String_Node_Str"");
    }
    Media med=new Media();
    med.title=upload.getFilename();
    med.mimetype=upload.getContentType();
    med.fileName=upload.getFilename();
    med.file=upload.getFile();
    med.owner=Component.currentAccount();
    med.folder=folder;
    med.temporarySender=Component.currentAccount();
    try {
      mediaManager.create(med);
      NotificationService.getInstance().createNotification(med,Media.MEDIA_NEW_MEDIA);
    }
 catch (    Exception e) {
      return internalServerError(""String_Node_Str"");
    }
    Folder rootFolder=FolderManager.findRoot(folder);
    List<Media> mediaSet=folder.files;
    List<Folder> folderList=folder.folders;
    return created(list.render(mediaSet,folderList,rootFolder.id));
  }
 else {
    return internalServerError(""String_Node_Str"");
  }
}","/** 
 * Upload some media.
 * @param folderId Folder to upload.
 * @return Result
 */
@Transactional public Result upload(Long folderId){
  MultipartFormData body=request().body().asMultipartFormData();
  Http.MultipartFormData.FilePart upload=body.getFile(""String_Node_Str"");
  Folder folder=folderManager.findById(folderId);
  if (!Secured.viewFolder(folder)) {
    return forbidden(""String_Node_Str"");
  }
  if (upload != null) {
    if (mediaManager.byteAsMB(upload.getFile().length()) > MAX_FILESIZE) {
      return status(REQUEST_ENTITY_TOO_LARGE,""String_Node_Str"" + MAX_FILESIZE + ""String_Node_Str"");
    }
    if (mediaManager.existsInFolder(upload.getFilename(),folder)) {
      return status(CONFLICT,""String_Node_Str"");
    }
    Media med=new Media();
    med.title=upload.getFilename();
    med.mimetype=upload.getContentType();
    med.fileName=upload.getFilename();
    med.file=upload.getFile();
    med.owner=Component.currentAccount();
    med.folder=folder;
    med.temporarySender=Component.currentAccount();
    try {
      mediaManager.create(med);
      NotificationService.getInstance().createNotification(med,Media.MEDIA_NEW_MEDIA);
    }
 catch (    Exception e) {
      return internalServerError(""String_Node_Str"");
    }
    return created(""String_Node_Str"");
  }
 else {
    return internalServerError(""String_Node_Str"");
  }
}",0.9201388888888888
88987,"/** 
 * Sends a list of notifications via email.
 * @param notifications List of notifications
 * @param recipient Recipient of the email notification
 */
public void sendNotificationsEmail(final List<Notification> notifications,Account recipient){
  try {
    String subject=notifications.size() > 1 ? Messages.get(""String_Node_Str"",notifications.size()) : Messages.get(""String_Node_Str"",notifications.get(0).rendered.replaceAll(""String_Node_Str"",""String_Node_Str""));
    this.sendEmail(subject,recipient.name + ""String_Node_Str"" + recipient.email+ ""String_Node_Str"",TemplateService.getInstance().getRenderedTemplate(PLAIN_TEXT_TEMPLATE,notifications,recipient),TemplateService.getInstance().getRenderedTemplate(HTML_TEMPLATE,notifications,recipient));
    JPA.withTransaction(new F.Callback0(){
      @Override public void invoke() throws Throwable {
        for (        Notification notification : notifications) {
          notification.isSent=true;
          notificationManager.update(notification);
        }
      }
    }
);
    Logger.info(""String_Node_Str"" + notifications.size() + ""String_Node_Str""+ recipient.id+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    Logger.error(""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * Sends a list of notifications via email.
 * @param notifications List of notifications
 * @param recipient Recipient of the email notification
 */
public void sendNotificationsEmail(final List<Notification> notifications,Account recipient){
  try {
    String subject=notifications.size() > 1 ? Messages.get(""String_Node_Str"",notifications.size()) : Messages.get(""String_Node_Str"",notifications.get(0).rendered.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
    this.sendEmail(subject,recipient.name + ""String_Node_Str"" + recipient.email+ ""String_Node_Str"",TemplateService.getInstance().getRenderedTemplate(PLAIN_TEXT_TEMPLATE,notifications,recipient),TemplateService.getInstance().getRenderedTemplate(HTML_TEMPLATE,notifications,recipient));
    JPA.withTransaction(new F.Callback0(){
      @Override public void invoke() throws Throwable {
        for (        Notification notification : notifications) {
          notification.isSent=true;
          notificationManager.update(notification);
        }
      }
    }
);
    Logger.info(""String_Node_Str"" + notifications.size() + ""String_Node_Str""+ recipient.id+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    Logger.error(""String_Node_Str"" + e.getMessage());
  }
}",0.9809220985691574
88988,"@Override public void delete(Object model){
  JPA.em().remove(model);
}","@Override public void delete(Object model){
  Folder folder=((Folder)model);
  if (!folder.folders.isEmpty()) {
    for (    Folder subFolder : folder.folders) {
      delete(subFolder);
    }
  }
  for (  Media media : folder.files) {
    mediaManager.delete(media);
  }
  JPA.em().remove(folder);
}",0.3557951482479784
88989,"@Override public void delete(Object model){
  Group group=((Group)model);
  List<Post> posts=postManager.getPostsForGroup(group,0,0);
  for (  Post post : posts) {
    postManager.delete(post);
  }
  for (  Media media : group.mediaFolder.files) {
    mediaManager.delete(media);
  }
  notificationManager.deleteReferences(group);
  elasticsearchService.delete(group);
  JPA.em().remove(group);
}","@Override public void delete(Object model){
  Group group=((Group)model);
  List<Post> posts=postManager.getPostsForGroup(group,0,0);
  for (  Post post : posts) {
    postManager.delete(post);
  }
  folderManager.delete(group.mediaFolder);
  notificationManager.deleteReferences(group);
  elasticsearchService.delete(group);
  JPA.em().remove(group);
}",0.8891855807743658
88990,"public Result viewMediaTemp(){
  long bytes=MediaController.sizeTemp();
  String size=(bytes > 0) ? MediaController.bytesToString(bytes,false) : ""String_Node_Str"";
  return ok(mediaTemp.render(size));
}","public Result viewMediaTemp(){
  long bytes=mediaController.sizeTemp();
  String size=(bytes > 0) ? mediaController.bytesToString(bytes,false) : ""String_Node_Str"";
  return ok(mediaTemp.render(size));
}",0.99009900990099
88991,"@Transactional(readOnly=true) public Result media(Long id){
  Form<Media> mediaForm=Form.form(Media.class);
  Group group=Group.findById(id);
  if (group == null) {
    flash(""String_Node_Str"",Messages.get(""String_Node_Str""));
    return redirect(controllers.routes.GroupController.index());
  }
  if (!Secured.viewGroup(group)) {
    return redirect(routes.GroupController.view(id));
  }
  Navigation.set(Level.GROUPS,""String_Node_Str"",group.title,controllers.routes.GroupController.stream(group.id,PAGE,false));
  List<Media> mediaSet=group.media;
  return ok(media.render(group,mediaForm,mediaSet));
}","@Transactional(readOnly=true) public Result media(Long id){
  Form<Media> mediaForm=Form.form(Media.class);
  Group group=Group.findById(id);
  if (group == null) {
    flash(""String_Node_Str"",Messages.get(""String_Node_Str""));
    return redirect(controllers.routes.GroupController.index());
  }
  if (!Secured.viewGroup(group)) {
    return redirect(routes.GroupController.view(id));
  }
  Navigation.set(Level.GROUPS,""String_Node_Str"",group.title,controllers.routes.GroupController.stream(group.id,PAGE,false));
  List<Media> mediaSet=group.media;
  for (  Media media : mediaSet) {
    media.sizeInByte=mediaController.bytesToString(media.size,false);
  }
  return ok(media.render(group,mediaForm,mediaSet));
}",0.9172361427486712
88992,"/** 
 * Cleans the temporary media directoy used for ZIP Downloads
 */
public void cleanUpTemp(){
  Logger.info(""String_Node_Str"");
  String tmpPath=Play.application().configuration().getString(""String_Node_Str"");
  File dir=new File(tmpPath);
  Logger.info(""String_Node_Str"" + dir.toString());
  File[] files=dir.listFiles();
  Logger.info(""String_Node_Str"" + dir.getAbsolutePath());
  if (files != null) {
    long hours=1;
    long eligibleForDeletion=System.currentTimeMillis() - (hours * 60 * 60* 1000L);
    Logger.info(""String_Node_Str"" + files.length + ""String_Node_Str"");
    if (files != null) {
      for (      File file : files) {
        Logger.info(""String_Node_Str"" + file.getName());
        if (file.getName().startsWith(tempPrefix) && file.lastModified() < eligibleForDeletion) {
          Logger.info(""String_Node_Str"" + file.getName());
          file.delete();
        }
      }
    }
  }
 else {
    Logger.info(""String_Node_Str"");
  }
}","/** 
 * Cleans the temporary media directoy used for ZIP Downloads
 */
public void cleanUpTemp(){
  Logger.info(""String_Node_Str"");
  String tmpPath=conf.getString(""String_Node_Str"");
  File dir=new File(tmpPath);
  Logger.info(""String_Node_Str"" + dir.toString());
  File[] files=dir.listFiles();
  Logger.info(""String_Node_Str"" + dir.getAbsolutePath());
  if (files != null) {
    long hours=1;
    long eligibleForDeletion=System.currentTimeMillis() - (hours * 60 * 60* 1000L);
    Logger.info(""String_Node_Str"" + files.length + ""String_Node_Str"");
    if (files != null) {
      for (      File file : files) {
        Logger.info(""String_Node_Str"" + file.getName());
        if (file.getName().startsWith(tempPrefix) && file.lastModified() < eligibleForDeletion) {
          Logger.info(""String_Node_Str"" + file.getName());
          file.delete();
        }
      }
    }
  }
 else {
    Logger.info(""String_Node_Str"");
  }
}",0.9809523809523808
88993,"/** 
 * New file is uploaded.
 * @param target Target of the file (e.g. ""group"")
 * @param id ID of the target (e.g. group ID)
 * @return Result
 */
@Transactional public Result upload(String target,Long id){
  final int maxTotalSize=Play.application().configuration().getInt(""String_Node_Str"");
  final int maxFileSize=Play.application().configuration().getInt(""String_Node_Str"");
  Call ret=controllers.routes.Application.index();
  Group group;
  if (target.equals(Media.GROUP)) {
    group=Group.findById(id);
    if (!Secured.uploadMedia(group)) {
      return redirect(controllers.routes.Application.index());
    }
    ret=controllers.routes.GroupController.media(id);
  }
 else {
    return redirect(ret);
  }
  String[] contentLength=request().headers().get(""String_Node_Str"");
  if (contentLength != null) {
    int size=Integer.parseInt(contentLength[0]);
    if (Media.byteAsMB(size) > maxTotalSize) {
      flash(""String_Node_Str"",""String_Node_Str"" + maxTotalSize + ""String_Node_Str"");
      return redirect(ret);
    }
  }
 else {
    flash(""String_Node_Str"",""String_Node_Str"");
    return redirect(ret);
  }
  MultipartFormData body=request().body().asMultipartFormData();
  List<Http.MultipartFormData.FilePart> uploads=body.getFiles();
  List<Media> mediaList=new ArrayList<Media>();
  if (!uploads.isEmpty()) {
    for (    FilePart upload : uploads) {
      Media med=new Media();
      med.title=upload.getFilename();
      med.mimetype=upload.getContentType();
      med.fileName=upload.getFilename();
      med.file=upload.getFile();
      med.owner=Component.currentAccount();
      if (Media.byteAsMB(med.file.length()) > maxFileSize) {
        flash(""String_Node_Str"",""String_Node_Str"" + med.title + ""String_Node_Str""+ maxFileSize+ ""String_Node_Str"");
        return redirect(ret);
      }
      String error=""String_Node_Str"" + med.title + ""String_Node_Str"";
      if (target.equals(Media.GROUP)) {
        med.temporarySender=Component.currentAccount();
        med.group=group;
        if (med.existsInGroup(group)) {
          flash(""String_Node_Str"",error);
          return redirect(ret);
        }
      }
      mediaList.add(med);
    }
    for (    Media m : mediaList) {
      try {
        m.create();
        if (m.group != null) {
          NotificationService.getInstance().createNotification(m,Media.MEDIA_NEW_MEDIA);
        }
      }
 catch (      Exception e) {
        return internalServerError(e.getMessage());
      }
    }
    flash(""String_Node_Str"",""String_Node_Str"");
    return redirect(ret);
  }
 else {
    flash(""String_Node_Str"",""String_Node_Str"");
    return redirect(ret);
  }
}","/** 
 * New file is uploaded.
 * @param target Target of the file (e.g. ""group"")
 * @param id ID of the target (e.g. group ID)
 * @return Result
 */
@Transactional public Result upload(String target,Long id){
  final int maxTotalSize=conf.getInt(""String_Node_Str"");
  final int maxFileSize=conf.getInt(""String_Node_Str"");
  Call ret=controllers.routes.Application.index();
  Group group;
  if (target.equals(Media.GROUP)) {
    group=Group.findById(id);
    if (!Secured.uploadMedia(group)) {
      return redirect(controllers.routes.Application.index());
    }
    ret=controllers.routes.GroupController.media(id);
  }
 else {
    return redirect(ret);
  }
  String[] contentLength=request().headers().get(""String_Node_Str"");
  if (contentLength != null) {
    int size=Integer.parseInt(contentLength[0]);
    if (Media.byteAsMB(size) > maxTotalSize) {
      flash(""String_Node_Str"",""String_Node_Str"" + maxTotalSize + ""String_Node_Str"");
      return redirect(ret);
    }
  }
 else {
    flash(""String_Node_Str"",""String_Node_Str"");
    return redirect(ret);
  }
  MultipartFormData body=request().body().asMultipartFormData();
  List<Http.MultipartFormData.FilePart> uploads=body.getFiles();
  List<Media> mediaList=new ArrayList<Media>();
  if (!uploads.isEmpty()) {
    for (    FilePart upload : uploads) {
      Media med=new Media();
      med.title=upload.getFilename();
      med.mimetype=upload.getContentType();
      med.fileName=upload.getFilename();
      med.file=upload.getFile();
      med.owner=Component.currentAccount();
      if (Media.byteAsMB(med.file.length()) > maxFileSize) {
        flash(""String_Node_Str"",""String_Node_Str"" + med.title + ""String_Node_Str""+ maxFileSize+ ""String_Node_Str"");
        return redirect(ret);
      }
      String error=""String_Node_Str"" + med.title + ""String_Node_Str"";
      if (target.equals(Media.GROUP)) {
        med.temporarySender=Component.currentAccount();
        med.group=group;
        if (med.existsInGroup(group)) {
          flash(""String_Node_Str"",error);
          return redirect(ret);
        }
      }
      mediaList.add(med);
    }
    for (    Media m : mediaList) {
      try {
        m.create();
        if (m.group != null) {
          NotificationService.getInstance().createNotification(m,Media.MEDIA_NEW_MEDIA);
        }
      }
 catch (      Exception e) {
        return internalServerError(e.getMessage());
      }
    }
    flash(""String_Node_Str"",""String_Node_Str"");
    return redirect(ret);
  }
 else {
    flash(""String_Node_Str"",""String_Node_Str"");
    return redirect(ret);
  }
}",0.985418265541059
88994,"/** 
 * Size of temporary media directoy used for ZIP Downloads
 */
public static long sizeTemp(){
  String tmpPath=Play.application().configuration().getString(""String_Node_Str"");
  File dir=new File(tmpPath);
  return FileUtils.sizeOfDirectory(dir);
}","/** 
 * Size of temporary media directoy used for ZIP Downloads
 */
public long sizeTemp(){
  String tmpPath=conf.getString(""String_Node_Str"");
  File dir=new File(tmpPath);
  return FileUtils.sizeOfDirectory(dir);
}",0.9040511727078892
88995,"private File createZIP(List<Media> media,String fileName) throws IOException {
  String tmpPath=Play.application().configuration().getString(""String_Node_Str"");
  File file=File.createTempFile(tempPrefix,""String_Node_Str"",new File(tmpPath));
  ZipOutputStream zipOut=new ZipOutputStream(new FileOutputStream(file));
  zipOut.setLevel(Deflater.NO_COMPRESSION);
  byte[] buffer=new byte[4092];
  int byteCount=0;
  for (  Media m : media) {
    zipOut.putNextEntry(new ZipEntry(m.fileName));
    FileInputStream fis=new FileInputStream(m.file);
    byteCount=0;
    while ((byteCount=fis.read(buffer)) != -1) {
      zipOut.write(buffer,0,byteCount);
    }
    fis.close();
    zipOut.closeEntry();
  }
  zipOut.flush();
  zipOut.close();
  return file;
}","private File createZIP(List<Media> media,String fileName) throws IOException {
  String tmpPath=conf.getString(""String_Node_Str"");
  File file=File.createTempFile(tempPrefix,""String_Node_Str"",new File(tmpPath));
  ZipOutputStream zipOut=new ZipOutputStream(new FileOutputStream(file));
  zipOut.setLevel(Deflater.NO_COMPRESSION);
  byte[] buffer=new byte[4092];
  int byteCount=0;
  for (  Media m : media) {
    zipOut.putNextEntry(new ZipEntry(m.fileName));
    FileInputStream fis=new FileInputStream(m.file);
    byteCount=0;
    while ((byteCount=fis.read(buffer)) != -1) {
      zipOut.write(buffer,0,byteCount);
    }
    fis.close();
    zipOut.closeEntry();
  }
  zipOut.flush();
  zipOut.close();
  return file;
}",0.975609756097561
88996,"public static String bytesToString(long bytes,boolean si){
  int unit=si ? 1000 : 1024;
  if (bytes < unit)   return bytes + ""String_Node_Str"";
  int exp=(int)(Math.log(bytes) / Math.log(unit));
  String pre=(si ? ""String_Node_Str"" : ""String_Node_Str"").charAt(exp - 1) + (si ? ""String_Node_Str"" : ""String_Node_Str"");
  return String.format(""String_Node_Str"",bytes / Math.pow(unit,exp),pre);
}","public String bytesToString(long bytes,boolean si){
  int unit=si ? 1000 : 1024;
  if (bytes < unit)   return bytes + ""String_Node_Str"";
  int exp=(int)(Math.log(bytes) / Math.log(unit));
  String pre=(si ? ""String_Node_Str"" : ""String_Node_Str"").charAt(exp - 1) + (si ? ""String_Node_Str"" : ""String_Node_Str"");
  return String.format(""String_Node_Str"",bytes / Math.pow(unit,exp),pre);
}",0.990990990990991
88997,"protected F.Promise<Result> onProdServerError(Http.RequestHeader request,UsefulException exception){
  group=group.findByTitle(configuration.getString(""String_Node_Str""));
  if (group != null) {
    post.content=""String_Node_Str"" + request + ""String_Node_Str""+ exception;
    post.owner=Account.findByEmail(configuration.getString(""String_Node_Str""));
    post.group=group;
    post.create();
  }
  return F.Promise.<Result>pure(Results.redirect(controllers.routes.Application.error()));
}","protected F.Promise<Result> onProdServerError(Http.RequestHeader request,UsefulException exception){
  group=group.findByTitle(configuration.getString(""String_Node_Str""));
  if (group != null) {
    post.content=""String_Node_Str"" + request + ""String_Node_Str""+ exception;
    post.owner=account.findByEmail(configuration.getString(""String_Node_Str""));
    post.group=group;
    post.create();
  }
  return F.Promise.<Result>pure(Results.redirect(controllers.routes.Application.error()));
}",0.9979550102249488
88998,"@Override public void initialization(){
  jpaApi.withTransaction(() -> {
    if (adminAccount.findByEmail(adminMail) == null) {
      adminAccount.email=adminMail;
      adminAccount.firstname=""String_Node_Str"";
      adminAccount.lastname=""String_Node_Str"";
      adminAccount.role=AccountRole.ADMIN;
      adminAccount.avatar=""String_Node_Str"";
      adminAccount.password=Component.md5(adminPassword);
      adminAccount.create();
    }
    if (dummyAccount.findByEmail(dummyMail) == null) {
      dummyAccount.email=dummyMail;
      dummyAccount.firstname=""String_Node_Str"";
      dummyAccount.lastname=""String_Node_Str"";
      dummyAccount.role=AccountRole.DUMMY;
      dummyAccount.avatar=""String_Node_Str"";
      dummyAccount.password=Component.md5(dummyPassword);
      dummyAccount.create();
    }
    if (Group.findByTitle(adminGroupTitle) == null) {
      adminGroup.title=adminGroupTitle;
      adminGroup.groupType=GroupType.close;
      adminGroup.description=""String_Node_Str"";
      adminGroup.createWithGroupAccount(adminAccount);
    }
    if (Group.findByTitle(""String_Node_Str"") == null) {
      feedbackGroup.title=""String_Node_Str"";
      feedbackGroup.groupType=GroupType.open;
      feedbackGroup.description=""String_Node_Str"";
      feedbackGroup.createWithGroupAccount(adminAccount);
    }
  }
);
}","@Override public void initialization(){
  jpaApi.withTransaction(() -> {
    if (Account.findByEmail(adminMail) == null) {
      adminAccount.email=adminMail;
      adminAccount.firstname=""String_Node_Str"";
      adminAccount.lastname=""String_Node_Str"";
      adminAccount.role=AccountRole.ADMIN;
      adminAccount.avatar=""String_Node_Str"";
      adminAccount.password=Component.md5(adminPassword);
      adminAccount.create();
    }
    if (Account.findByEmail(dummyMail) == null) {
      dummyAccount.email=dummyMail;
      dummyAccount.firstname=""String_Node_Str"";
      dummyAccount.lastname=""String_Node_Str"";
      dummyAccount.role=AccountRole.DUMMY;
      dummyAccount.avatar=""String_Node_Str"";
      dummyAccount.password=Component.md5(dummyPassword);
      dummyAccount.create();
    }
    if (Group.findByTitle(adminGroupTitle) == null) {
      adminGroup.title=adminGroupTitle;
      adminGroup.groupType=GroupType.close;
      adminGroup.description=""String_Node_Str"";
      adminGroup.createWithGroupAccount(adminAccount);
    }
    if (Group.findByTitle(""String_Node_Str"") == null) {
      feedbackGroup.title=""String_Node_Str"";
      feedbackGroup.groupType=GroupType.open;
      feedbackGroup.description=""String_Node_Str"";
      feedbackGroup.createWithGroupAccount(adminAccount);
    }
  }
);
}",0.9962092494313874
88999,"@Security.Authenticated(Secured.class) public static Result search(int page) throws ExecutionException, InterruptedException {
  Navigation.set(""String_Node_Str"");
  Account currentAccount=Component.currentAccount();
  String keyword=Form.form().bindFromRequest().field(""String_Node_Str"").value();
  String mode=Form.form().bindFromRequest().field(""String_Node_Str"").value();
  if (keyword == null) {
    flash(""String_Node_Str"",""String_Node_Str"");
    return redirect(routes.Application.searchHome());
  }
  if (mode == null)   mode=""String_Node_Str"";
  Pattern pt=Pattern.compile(""String_Node_Str"");
  Matcher match=pt.matcher(keyword);
  while (match.find()) {
    String s=match.group();
    keyword=keyword.replaceAll(""String_Node_Str"" + s,""String_Node_Str"");
    flash(""String_Node_Str"",""String_Node_Str"");
  }
  Logger.info(currentAccount.id + ""String_Node_Str"" + keyword+ ""String_Node_Str""+ mode);
  List<Object> resultList=new ArrayList<>();
  SearchResponse response;
  long userCount=0;
  long groupCount=0;
  long postCount=0;
  try {
    response=ElasticsearchService.doSearch(""String_Node_Str"",keyword.toLowerCase(),mode,page,currentAccount.id.toString(),asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 catch (  NoNodeAvailableException nna) {
    flash(""String_Node_Str"",""String_Node_Str"");
    return ok(search.render());
  }
  for (  SearchHit searchHit : response.getHits().getHits()) {
switch (searchHit.type()) {
case ""String_Node_Str"":
      resultList.add(Account.findById(Long.parseLong(searchHit.getId())));
    break;
case ""String_Node_Str"":
  Post post=Post.findById(Long.parseLong(searchHit.getId()));
String searchContent=post.content;
if (!searchHit.getHighlightFields().isEmpty()) searchContent=searchHit.getHighlightFields().get(""String_Node_Str"").getFragments()[0].string();
post.searchContent=StringEscapeUtils.escapeHtml4(searchContent).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
resultList.add(post);
break;
case ""String_Node_Str"":
resultList.add(Group.findById(Long.parseLong(searchHit.getId())));
break;
default :
Logger.info(""String_Node_Str"" + searchHit.getId());
}
}
Terms terms=response.getAggregations().get(""String_Node_Str"");
Collection<Terms.Bucket> buckets=terms.getBuckets();
for (Terms.Bucket bucket : buckets) {
switch (bucket.getKey()) {
case ""String_Node_Str"":
userCount=bucket.getDocCount();
break;
case ""String_Node_Str"":
groupCount=bucket.getDocCount();
break;
case ""String_Node_Str"":
postCount=bucket.getDocCount();
break;
}
}
Logger.info(""String_Node_Str"" + userCount + ""String_Node_Str""+ groupCount+ ""String_Node_Str""+ postCount+ ""String_Node_Str"");
return ok(views.html.searchresult.render(keyword,mode,page,LIMIT,resultList,response.getTookInMillis(),userCount + groupCount + postCount,userCount,groupCount,postCount));
}","@Security.Authenticated(Secured.class) public static Result search(int page) throws ExecutionException, InterruptedException {
  Navigation.set(Level.SEARCH);
  Account currentAccount=Component.currentAccount();
  String keyword=Form.form().bindFromRequest().field(""String_Node_Str"").value();
  String mode=Form.form().bindFromRequest().field(""String_Node_Str"").value();
  if (keyword == null) {
    flash(""String_Node_Str"",""String_Node_Str"");
    return redirect(routes.Application.searchHome());
  }
  if (mode == null)   mode=""String_Node_Str"";
  Pattern pt=Pattern.compile(""String_Node_Str"");
  Matcher match=pt.matcher(keyword);
  while (match.find()) {
    String s=match.group();
    keyword=keyword.replaceAll(""String_Node_Str"" + s,""String_Node_Str"");
    flash(""String_Node_Str"",""String_Node_Str"");
  }
  Logger.info(currentAccount.id + ""String_Node_Str"" + keyword+ ""String_Node_Str""+ mode);
  List<Object> resultList=new ArrayList<>();
  SearchResponse response;
  long userCount=0;
  long groupCount=0;
  long postCount=0;
  try {
    response=ElasticsearchService.doSearch(""String_Node_Str"",keyword.toLowerCase(),mode,page,currentAccount.id.toString(),asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 catch (  NoNodeAvailableException nna) {
    flash(""String_Node_Str"",""String_Node_Str"");
    return ok(search.render());
  }
  for (  SearchHit searchHit : response.getHits().getHits()) {
switch (searchHit.type()) {
case ""String_Node_Str"":
      resultList.add(Account.findById(Long.parseLong(searchHit.getId())));
    break;
case ""String_Node_Str"":
  Post post=Post.findById(Long.parseLong(searchHit.getId()));
String searchContent=post.content;
if (!searchHit.getHighlightFields().isEmpty()) searchContent=searchHit.getHighlightFields().get(""String_Node_Str"").getFragments()[0].string();
post.searchContent=StringEscapeUtils.escapeHtml4(searchContent).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
resultList.add(post);
break;
case ""String_Node_Str"":
resultList.add(Group.findById(Long.parseLong(searchHit.getId())));
break;
default :
Logger.info(""String_Node_Str"" + searchHit.getId());
}
}
Terms terms=response.getAggregations().get(""String_Node_Str"");
Collection<Terms.Bucket> buckets=terms.getBuckets();
for (Terms.Bucket bucket : buckets) {
switch (bucket.getKey()) {
case ""String_Node_Str"":
userCount=bucket.getDocCount();
break;
case ""String_Node_Str"":
groupCount=bucket.getDocCount();
break;
case ""String_Node_Str"":
postCount=bucket.getDocCount();
break;
}
}
Logger.info(""String_Node_Str"" + userCount + ""String_Node_Str""+ groupCount+ ""String_Node_Str""+ postCount+ ""String_Node_Str"");
return ok(views.html.searchresult.render(keyword,mode,page,LIMIT,resultList,response.getTookInMillis(),userCount + groupCount + postCount,userCount,groupCount,postCount));
}",0.9951054852320677
89000,"@Security.Authenticated(Secured.class) public static Result stream(String filter,int page){
  Navigation.set(Level.STREAM);
  Account currentAccount=Component.currentAccount();
  return ok(stream.render(currentAccount,Post.getFilteredStream(currentAccount,LIMIT,page,filter),postForm,Post.countStream(currentAccount,filter),LIMIT,page,filter));
}","@Security.Authenticated(Secured.class) public static Result stream(String filter,int page){
switch (filter) {
case ""String_Node_Str"":
    Navigation.set(Level.STREAM,""String_Node_Str"");
  break;
case ""String_Node_Str"":
Navigation.set(Level.STREAM,""String_Node_Str"");
break;
case ""String_Node_Str"":
Navigation.set(Level.STREAM,""String_Node_Str"");
break;
case ""String_Node_Str"":
Navigation.set(Level.STREAM,""String_Node_Str"");
break;
default :
Navigation.set(Level.STREAM,""String_Node_Str"");
}
Account currentAccount=Component.currentAccount();
return ok(stream.render(currentAccount,Post.getFilteredStream(currentAccount,LIMIT,page,filter),postForm,Post.countStream(currentAccount,filter),LIMIT,page,filter));
}",0.6420454545454546
