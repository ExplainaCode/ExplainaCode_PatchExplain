record_number,buggy_code,fixed_code,code_similarity
93001,"/** 
 * Constructor for a subtab. Creates the layout and widgets for its content.
 * @param parent composite the widgets will be created in 
 * @param counter the associated OprofileCounter object
 */
public CounterSubTab(Composite parent,OprofileCounter counter){
  _counter=counter;
  parent.setLayout(new GridLayout());
  ScrolledComposite scrolledContainer=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  scrolledContainer.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  GridLayout layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  scrolledContainer.setLayout(layout);
  scrolledContainer.setExpandHorizontal(true);
  scrolledContainer.setExpandVertical(true);
  Composite tabTopContainer=new Composite(scrolledContainer,SWT.NONE);
  scrolledContainer.setContent(tabTopContainer);
  layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  layout.numColumns=2;
  tabTopContainer.setLayout(layout);
  tabTopContainer.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  Composite topCellComp=new Composite(tabTopContainer,SWT.NONE);
  layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  layout.numColumns=2;
  topCellComp.setLayout(layout);
  topCellComp.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,false,2,1));
  createTopCell(topCellComp);
  createVerticalSpacer(tabTopContainer,2);
  Composite eventListComp=new Composite(tabTopContainer,SWT.NONE);
  layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  eventListComp.setLayout(layout);
  createLeftCell(eventListComp);
  Composite eventConfigComp=new Composite(tabTopContainer,SWT.NONE);
  layout=new GridLayout();
  layout.numColumns=2;
  layout.marginHeight=0;
  layout.marginWidth=0;
  eventConfigComp.setLayout(layout);
  eventConfigComp.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  createRightCell(eventConfigComp);
  GridData data=new GridData(SWT.FILL,SWT.FILL,false,true);
  data.heightHint=eventConfigComp.getSize().x;
  eventListComp.setLayoutData(data);
  scrolledContainer.setMinSize(tabTopContainer.computeSize(SWT.DEFAULT,SWT.DEFAULT));
}","/** 
 * Constructor for a subtab. Creates the layout and widgets for its content.
 * @param parent composite the widgets will be created in 
 * @param counter the associated OprofileCounter object
 */
public CounterSubTab(Composite parent,OprofileCounter counter){
  _counter=counter;
  parent.setLayout(new GridLayout());
  ScrolledComposite scrolledContainer=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  scrolledContainer.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  GridLayout layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  scrolledContainer.setLayout(layout);
  scrolledContainer.setExpandHorizontal(true);
  scrolledContainer.setExpandVertical(true);
  Composite tabTopContainer=new Composite(scrolledContainer,SWT.NONE);
  scrolledContainer.setContent(tabTopContainer);
  layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  layout.numColumns=2;
  tabTopContainer.setLayout(layout);
  tabTopContainer.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  Composite topCellComp=new Composite(tabTopContainer,SWT.NONE);
  layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  layout.numColumns=2;
  topCellComp.setLayout(layout);
  topCellComp.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,false,2,1));
  createTopCell(topCellComp);
  createVerticalSpacer(tabTopContainer,2);
  Composite eventListComp=new Composite(tabTopContainer,SWT.NONE);
  layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  eventListComp.setLayout(layout);
  createLeftCell(eventListComp);
  Composite eventConfigComp=new Composite(tabTopContainer,SWT.NONE);
  layout=new GridLayout();
  layout.numColumns=2;
  layout.marginHeight=0;
  layout.marginWidth=0;
  eventConfigComp.setLayout(layout);
  eventConfigComp.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  createRightCell(eventConfigComp);
  GridData data=new GridData(SWT.FILL,SWT.FILL,false,true);
  data.heightHint=eventConfigComp.getSize().x;
  eventListComp.setLayoutData(data);
  _scrolledTop=scrolledContainer;
  _tabTopContainer=tabTopContainer;
}",0.972506989748369
93002,"private ArrayList<ILaunchConfiguration> findCDTLaunchConfigFromProject(final IProject project){
  ArrayList<ILaunchConfiguration> applicableLaunchConfigs=new ArrayList<ILaunchConfiguration>();
  try {
    ILaunchManager mgr=DebugPlugin.getDefault().getLaunchManager();
    final ILaunchConfiguration[] configs=mgr.getLaunchConfigurations();
    for (    ILaunchConfiguration currentConfig : configs) {
      String configProjectName=currentConfig.getAttribute(ICDTLaunchConfigurationConstants.ATTR_PROJECT_NAME,""String_Node_Str"");
      if (configProjectName.length() > 0 && project.getName().equals(configProjectName)) {
        applicableLaunchConfigs.add(currentConfig);
      }
    }
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
  return applicableLaunchConfigs;
}","private ArrayList<ILaunchConfiguration> findCDTLaunchConfigFromProject(final IProject project){
  ArrayList<ILaunchConfiguration> applicableLaunchConfigs=new ArrayList<ILaunchConfiguration>();
  if (project != null) {
    try {
      ILaunchManager mgr=DebugPlugin.getDefault().getLaunchManager();
      final ILaunchConfiguration[] configs=mgr.getLaunchConfigurations();
      for (      ILaunchConfiguration currentConfig : configs) {
        String configProjectName=currentConfig.getAttribute(ICDTLaunchConfigurationConstants.ATTR_PROJECT_NAME,""String_Node_Str"");
        if (configProjectName.length() > 0 && project.getName().equals(configProjectName)) {
          applicableLaunchConfigs.add(currentConfig);
        }
      }
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
  return applicableLaunchConfigs;
}",0.958819913952059
93003,"public void launch(final Object element,String mode){
  final IProject project;
  if (element instanceof IFile) {
    project=((IFile)element).getProject();
  }
 else   if (element instanceof IProject) {
    project=(IProject)element;
  }
 else {
    project=null;
    System.out.println(element);
  }
  if (project == null) {
    MessageDialog.openError(LaunchPlugin.getActiveWorkbenchShell(),OprofileLaunchMessages.getString(""String_Node_Str""),OprofileLaunchMessages.getString(""String_Node_Str""));
  }
  ConfigRunner configRunner=new ConfigRunner(project);
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(LaunchPlugin.getActiveWorkbenchShell());
  try {
    dialog.run(true,false,configRunner);
  }
 catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  ArrayList<ILaunchConfiguration> profilingLaunchConfigs=configRunner.getProfilingConfigs();
  if (profilingLaunchConfigs == null) {
    MessageDialog.openError(null,OprofileLaunchMessages.getString(""String_Node_Str""),OprofileLaunchMessages.getString(""String_Node_Str""));
  }
 else   if (profilingLaunchConfigs.size() == 1) {
    launchProfilingLaunchConfiguration(profilingLaunchConfigs.get(0),mode);
  }
 else   if (profilingLaunchConfigs.size() > 1) {
    openLaunchSelectionDialog(profilingLaunchConfigs,mode);
  }
}","public void launch(final Object element,String mode){
  final IProject project;
  if (element instanceof IFile) {
    project=((IFile)element).getProject();
  }
 else   if (element instanceof IProject) {
    project=(IProject)element;
  }
 else   if (element instanceof IBinary) {
    project=((IBinary)element).getCProject().getProject();
  }
 else {
    project=null;
    System.out.println(element);
  }
  if (project == null) {
    MessageDialog.openError(LaunchPlugin.getActiveWorkbenchShell(),OprofileLaunchMessages.getString(""String_Node_Str""),OprofileLaunchMessages.getString(""String_Node_Str""));
  }
 else {
    ConfigRunner configRunner=new ConfigRunner(project);
    ProgressMonitorDialog dialog=new ProgressMonitorDialog(LaunchPlugin.getActiveWorkbenchShell());
    try {
      dialog.run(true,false,configRunner);
    }
 catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
catch (    InterruptedException e) {
      e.printStackTrace();
    }
    ArrayList<ILaunchConfiguration> profilingLaunchConfigs=configRunner.getProfilingConfigs();
    if (profilingLaunchConfigs == null) {
      MessageDialog.openError(null,OprofileLaunchMessages.getString(""String_Node_Str""),OprofileLaunchMessages.getString(""String_Node_Str""));
    }
 else     if (profilingLaunchConfigs.size() == 1) {
      launchProfilingLaunchConfiguration(profilingLaunchConfigs.get(0),mode);
    }
 else     if (profilingLaunchConfigs.size() > 1) {
      openLaunchSelectionDialog(profilingLaunchConfigs,mode);
    }
  }
}",0.9449255282299964
93004,"public void run(){
  OprofileView view=OprofileUiPlugin.getDefault().getOprofileView();
  if (view != null) {
    view.refreshView();
  }
}","public void run(){
  OprofileView view=OprofileUiPlugin.getDefault().getOprofileView();
  if (view != null) {
    view.refreshView();
  }
 else {
    try {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(OprofileUiPlugin.ID_OPROFILE_VIEW);
    }
 catch (    PartInitException e) {
      e.printStackTrace();
    }
    OprofileUiPlugin.getDefault().getOprofileView().refreshView();
  }
}",0.4955436720142602
93005,"public void launchesTerminated(ILaunch[] launches){
  try {
    for (    ILaunch l : launches) {
      if (l.equals(launch)) {
        OprofileCorePlugin.getDefault().getOpcontrolProvider().dumpSamples();
        OprofileCorePlugin.getDefault().getOpcontrolProvider().shutdownDaemon();
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            OprofileView view=OprofileUiPlugin.getDefault().getOprofileView();
            if (view != null) {
              view.refreshView();
            }
          }
        }
);
      }
    }
  }
 catch (  OpcontrolException ignore) {
  }
}","public void launchesTerminated(ILaunch[] launches){
  try {
    for (    ILaunch l : launches) {
      if (l.equals(launch)) {
        OprofileCorePlugin.getDefault().getOpcontrolProvider().dumpSamples();
        OprofileCorePlugin.getDefault().getOpcontrolProvider().shutdownDaemon();
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            OprofileView view=OprofileUiPlugin.getDefault().getOprofileView();
            if (view != null) {
              view.refreshView();
            }
 else {
              try {
                PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(OprofileUiPlugin.ID_OPROFILE_VIEW);
              }
 catch (              PartInitException e) {
                e.printStackTrace();
              }
              OprofileUiPlugin.getDefault().getOprofileView().refreshView();
            }
          }
        }
);
      }
    }
  }
 catch (  OpcontrolException ignore) {
  }
}",0.6880100439422473
93006,"public void launch(IBinary bin,String mode){
  super.initialize();
  this.bin=bin;
  name=""String_Node_Str"";
  binName=getName(bin);
  partialScriptPath=PluginConstants.getPluginLocation() + ""String_Node_Str"";
  viewID=""String_Node_Str"";
  if (projectName == null || projectName.length() < 1)   projectName=bin.getCProject().getElementName();
  try {
    config=createConfiguration(bin,name);
    binaryPath=bin.getResource().getLocation().toString();
    arguments=binaryPath;
    outputPath=PluginConstants.STAP_GRAPH_DEFAULT_IO_PATH;
    writeFunctionListToScript(resourceToSearchFor);
    if (funcs == null || funcs.length() < 0)     return;
    needToGenerate=true;
    finishLaunch(name,mode);
  }
 catch (  IOException e) {
    SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(""String_Node_Str"",Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    mess.schedule();
    e.printStackTrace();
  }
catch (  CoreException e1) {
    e1.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    resourceToSearchFor=""String_Node_Str"";
    searchForResource=false;
  }
}","public void launch(IBinary bin,String mode){
  super.initialize();
  this.bin=bin;
  name=""String_Node_Str"";
  binName=getName(bin);
  partialScriptPath=PluginConstants.getPluginLocation() + ""String_Node_Str"";
  viewID=""String_Node_Str"";
  if (projectName == null || projectName.length() < 1)   projectName=bin.getCProject().getElementName();
  try {
    config=createConfiguration(bin,name);
    binaryPath=bin.getResource().getLocation().toString();
    arguments=binaryPath;
    outputPath=PluginConstants.STAP_GRAPH_DEFAULT_IO_PATH;
    if (writeFunctionListToScript(resourceToSearchFor) == null)     return;
    if (funcs == null || funcs.length() < 0)     return;
    needToGenerate=true;
    finishLaunch(name,mode);
  }
 catch (  IOException e) {
    SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(""String_Node_Str"",Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    mess.schedule();
    e.printStackTrace();
  }
catch (  CoreException e1) {
    e1.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    resourceToSearchFor=""String_Node_Str"";
    searchForResource=false;
  }
}",0.9895833333333334
93007,"private void finishLaunch(ILaunch launch,ILaunchConfiguration config,String command,IProgressMonitor monitor,boolean retry){
  String errorMessage=""String_Node_Str"";
  try {
    File workDir=getWorkingDirectory(config);
    if (workDir == null) {
      workDir=new File(System.getProperty(""String_Node_Str"",""String_Node_Str""));
    }
    SystemTapCommandGenerator cmdGenerator=new SystemTapCommandGenerator();
    cmd=cmdGenerator.generateCommand(scriptPath,binaryPath,command,needsBinary,needsArguments,arguments,binaryArguments);
    String tmp[]=cmd.split(""String_Node_Str"");
    ArrayList<String> cmdLine=new ArrayList<String>();
    for (    String str : tmp) {
      cmdLine.add(str);
    }
    String[] commandArray=(String[])cmdLine.toArray(new String[cmdLine.size()]);
    if (monitor.isCanceled()) {
      return;
    }
    monitor.worked(1);
    if (launch == null) {
      return;
    }
    setDefaultSourceLocator(launch,config);
    String parserClass=config.getAttribute(LaunchConfigurationConstants.PARSER_CLASS,LaunchConfigurationConstants.DEFAULT_PARSER_CLASS);
    IExtensionRegistry reg=Platform.getExtensionRegistry();
    IConfigurationElement[] extensions=reg.getConfigurationElementsFor(PluginConstants.PARSER_RESOURCE,PluginConstants.PARSER_NAME,parserClass);
    if (extensions == null || extensions.length < 1) {
      SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str"") + parserClass);
      mess.schedule();
      return;
    }
    IConfigurationElement element=extensions[0];
    SystemTapParser parser=(SystemTapParser)element.createExecutableExtension(PluginConstants.ATTR_CLASS);
    parser.setViewID(config.getAttribute(LaunchConfigurationConstants.VIEW_CLASS,LaunchConfigurationConstants.VIEW_CLASS));
    parser.setSourcePath(outputPath);
    parser.setMonitor(SubMonitor.convert(monitor));
    parser.setDone(false);
    parser.setKillButtonEnabled(true);
    if (element.getAttribute(PluginConstants.ATTR_REALTIME).equals(PluginConstants.VAL_TRUE)) {
      parser.setRealTime(true);
      parser.schedule();
    }
    monitor.worked(1);
    Process subProcess=execute(commandArray,getEnvironment(config),workDir,true);
    System.out.println(cmd);
    if (subProcess == null) {
      SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      mess.schedule();
      return;
    }
    IProcess process=createNewProcess(launch,subProcess,commandArray[0]);
    process.setAttribute(IProcess.ATTR_CMDLINE,cmd);
    monitor.worked(1);
    ((TextConsole)Helper.getConsoleByName(config.getName())).activate();
    StreamListener s=new StreamListener();
    process.getStreamsProxy().getErrorStreamMonitor().addListener(s);
    while (!process.isTerminated()) {
      Thread.sleep(100);
      if ((monitor != null && monitor.isCanceled()) || parser.isJobCancelled()) {
        if (!parser.isJobCancelled()) {
          parser.cancelJob();
          Runtime run=Runtime.getRuntime();
          run.exec(""String_Node_Str"");
        }
        process.terminate();
        return;
      }
    }
    Thread.sleep(100);
    s.close();
    parser.setKillButtonEnabled(false);
    if (process.getExitValue() != 0) {
      IDocument doc=Helper.getConsoleDocumentByName(config.getName());
      if (doc.get().length() < 1)       Thread.sleep(300);
      SystemTapErrorHandler errorHandler=new SystemTapErrorHandler();
      errorHandler.handle(monitor,config.getName() + Messages.getString(""String_Node_Str"") + cmd+ PluginConstants.NEW_LINE+ PluginConstants.NEW_LINE);
      errorMessage=errorHandler.handle(monitor,new FileReader(TEMP_ERROR_OUTPUT));
      if ((monitor != null && monitor.isCanceled()) || parser.isJobCancelled()) {
        monitor.setCanceled(true);
        parser.cancelJob();
        return;
      }
      if (errorHandler.hasMismatchedProbePoints() && retry) {
        SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        mess.schedule();
        if (!errorHandler.finishHandling(monitor,s.getNumberOfErrors())) {
          return;
        }
        if ((monitor != null && monitor.isCanceled()) || parser.isJobCancelled()) {
          monitor.setCanceled(true);
          parser.cancelJob();
          return;
        }
        finishLaunch(launch,config,command,monitor,false);
        return;
      }
      errorHandler.finishHandling(monitor,s.getNumberOfErrors());
      return;
    }
    if (!element.getAttribute(PluginConstants.ATTR_REALTIME).equals(PluginConstants.VAL_TRUE)) {
      parser.schedule();
    }
 else {
      if (parser != null)       parser.setDone(true);
    }
    monitor.worked(1);
    errorMessage=generateErrorMessage(config.getName(),command) + errorMessage;
    DocWriter dw=new DocWriter(Messages.getString(""String_Node_Str""),((TextConsole)Helper.getConsoleByName(config.getName())),errorMessage);
    dw.schedule();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  CoreException e) {
    e.printStackTrace();
  }
 finally {
    monitor.done();
  }
}","private void finishLaunch(ILaunch launch,ILaunchConfiguration config,String command,IProgressMonitor monitor,boolean retry){
  String errorMessage=""String_Node_Str"";
  try {
    File workDir=getWorkingDirectory(config);
    if (workDir == null) {
      workDir=new File(System.getProperty(""String_Node_Str"",""String_Node_Str""));
    }
    SystemTapCommandGenerator cmdGenerator=new SystemTapCommandGenerator();
    cmd=cmdGenerator.generateCommand(scriptPath,binaryPath,command,needsBinary,needsArguments,arguments,binaryArguments);
    String tmp[]=cmd.split(""String_Node_Str"");
    ArrayList<String> cmdLine=new ArrayList<String>();
    for (    String str : tmp) {
      cmdLine.add(str);
    }
    String[] commandArray=(String[])cmdLine.toArray(new String[cmdLine.size()]);
    if (monitor.isCanceled()) {
      return;
    }
    monitor.worked(1);
    if (launch == null) {
      return;
    }
    setDefaultSourceLocator(launch,config);
    String parserClass=config.getAttribute(LaunchConfigurationConstants.PARSER_CLASS,LaunchConfigurationConstants.DEFAULT_PARSER_CLASS);
    IExtensionRegistry reg=Platform.getExtensionRegistry();
    IConfigurationElement[] extensions=reg.getConfigurationElementsFor(PluginConstants.PARSER_RESOURCE,PluginConstants.PARSER_NAME,parserClass);
    if (extensions == null || extensions.length < 1) {
      SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str"") + parserClass);
      mess.schedule();
      return;
    }
    IConfigurationElement element=extensions[0];
    SystemTapParser parser=(SystemTapParser)element.createExecutableExtension(PluginConstants.ATTR_CLASS);
    parser.setViewID(config.getAttribute(LaunchConfigurationConstants.VIEW_CLASS,LaunchConfigurationConstants.VIEW_CLASS));
    parser.setSourcePath(outputPath);
    parser.setMonitor(SubMonitor.convert(monitor));
    parser.setDone(false);
    parser.setKillButtonEnabled(true);
    if (element.getAttribute(PluginConstants.ATTR_REALTIME).equals(PluginConstants.VAL_TRUE)) {
      parser.setRealTime(true);
      parser.schedule();
    }
    monitor.worked(1);
    Process subProcess=execute(commandArray,getEnvironment(config),workDir,true);
    System.out.println(cmd);
    if (subProcess == null) {
      SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      mess.schedule();
      return;
    }
    IProcess process=createNewProcess(launch,subProcess,commandArray[0]);
    process.setAttribute(IProcess.ATTR_CMDLINE,cmd);
    monitor.worked(1);
    ((TextConsole)Helper.getConsoleByName(config.getName())).activate();
    StreamListener s=new StreamListener();
    process.getStreamsProxy().getErrorStreamMonitor().addListener(s);
    while (!process.isTerminated()) {
      Thread.sleep(100);
      if ((monitor != null && monitor.isCanceled()) || parser.isJobCancelled()) {
        parser.cancelJob();
        Runtime run=Runtime.getRuntime();
        run.exec(""String_Node_Str"");
        process.terminate();
        return;
      }
    }
    Thread.sleep(100);
    s.close();
    parser.setKillButtonEnabled(false);
    if (process.getExitValue() != 0) {
      parser.cancelJob();
      IDocument doc=Helper.getConsoleDocumentByName(config.getName());
      if (doc.get().length() < 1)       Thread.sleep(300);
      SystemTapErrorHandler errorHandler=new SystemTapErrorHandler();
      errorHandler.handle(monitor,config.getName() + Messages.getString(""String_Node_Str"") + cmd+ PluginConstants.NEW_LINE+ PluginConstants.NEW_LINE);
      errorMessage=errorHandler.handle(monitor,new FileReader(TEMP_ERROR_OUTPUT));
      if ((monitor != null && monitor.isCanceled())) {
        return;
      }
      if (errorHandler.hasMismatchedProbePoints() && retry) {
        SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        mess.schedule();
        if (!errorHandler.finishHandling(monitor,s.getNumberOfErrors())) {
          return;
        }
        if ((monitor != null && monitor.isCanceled()) || parser.isJobCancelled()) {
          monitor.setCanceled(true);
          parser.cancelJob();
          return;
        }
        finishLaunch(launch,config,command,monitor,false);
        return;
      }
      errorHandler.finishHandling(monitor,s.getNumberOfErrors());
      return;
    }
    if (!element.getAttribute(PluginConstants.ATTR_REALTIME).equals(PluginConstants.VAL_TRUE)) {
      parser.schedule();
    }
 else {
      if (parser != null)       parser.setDone(true);
    }
    monitor.worked(1);
    errorMessage=generateErrorMessage(config.getName(),command) + errorMessage;
    DocWriter dw=new DocWriter(Messages.getString(""String_Node_Str""),((TextConsole)Helper.getConsoleByName(config.getName())),errorMessage);
    dw.schedule();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  CoreException e) {
    e.printStackTrace();
  }
 finally {
    monitor.done();
  }
}",0.9807871665734004
93008,"private void parseMarked(String msg){
  if (msg.length() < 1)   return;
  int id=idList.get(idList.size() - 1);
  if (msg.equals(""String_Node_Str"")) {
    msg=msg + Messages.getString(""String_Node_Str"");
  }
  markedMap.put(id,markedMap.get(id) + msg);
}","private void parseMarked(String msg){
  if (msg.length() < 1 || idList.size() < 1)   return;
  int id=idList.get(idList.size() - 1);
  if (msg.equals(""String_Node_Str"")) {
    msg=msg + Messages.getString(""String_Node_Str"");
  }
  markedMap.put(id,(markedMap.get(id) == null ? ""String_Node_Str"" : markedMap.get(id)) + msg);
}",0.8773747841105354
93009,"private IStatus parse(String data){
  String[] callsAndReturns=data.split(""String_Node_Str"");
  try {
    for (    String s : callsAndReturns) {
      if (s.length() < 1)       continue;
switch (s.charAt(0)) {
case '<':
        String[] args=s.substring(1,s.length()).split(DELIM);
      int id=Integer.parseInt(args[1]);
    long time=Long.parseLong(args[2]);
  String name=args[0];
if (!encounteredMain && !isFunctionNameClean(name) && name.contains(""String_Node_Str"")) {
  skippedDirectives=true;
  break;
}
if (startTime < 1) {
startTime=time;
}
endingTimeInNS=time;
name=cleanFunctionName(name);
if (name.equals(""String_Node_Str"")) encounteredMain=true;
if (firstNode == -1) {
firstNode=id;
}
serialMap.put(id,name);
timeMap.put(id,time);
if (aggregateTimeMap.get(name) == null) {
aggregateTimeMap.put(name,(long)0);
}
if (nameList.indexOf(name) == -1) {
long cumulativeTime=aggregateTimeMap.get(name) - time;
aggregateTimeMap.put(name,cumulativeTime);
shouldGetEndingTimeForID.add(id);
}
if (countMap.get(name) == null) {
countMap.put(name,0);
}
countMap.put(name,countMap.get(name) + 1);
nameList.add(name);
idList.add(id);
if (outNeighbours.get(id) == null) {
outNeighbours.put(id,new ArrayList<Integer>());
}
if (idList.size() > 1) {
int parentID=idList.get(idList.size() - 2);
outNeighbours.get(parentID).add(id);
}
callOrderList.add(id);
lastFunctionCalled=id;
break;
case '>':
args=s.substring(1,s.length()).split(DELIM);
name=args[0];
if (!encounteredMain && !isFunctionNameClean(name) && name.contains(""String_Node_Str"")) {
skippedDirectives=true;
break;
}
name=cleanFunctionName(name);
int lastOccurance=nameList.lastIndexOf(name);
if (lastOccurance < 0) {
parsingError(Messages.getString(""String_Node_Str"") + name);
return Status.CANCEL_STATUS;
}
nameList.remove(lastOccurance);
id=idList.remove(lastOccurance);
if (timeMap.get(id) == null) {
parsingError(Messages.getString(""String_Node_Str"") + name);
return Status.CANCEL_STATUS;
}
endingTimeInNS=Long.parseLong(args[1]);
time=endingTimeInNS - timeMap.get(id);
timeMap.put(id,time);
if (id == firstNode) showTime(id,time);
if (shouldGetEndingTimeForID.contains(id)) {
long cumulativeTime=aggregateTimeMap.get(name) + Long.parseLong(args[1]);
aggregateTimeMap.put(name,cumulativeTime);
}
break;
default :
return Status.CANCEL_STATUS;
}
}
}
 catch (NumberFormatException e) {
SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str""));
mess.schedule();
return Status.CANCEL_STATUS;
}
return Status.OK_STATUS;
}","private IStatus parse(String data){
  String[] callsAndReturns=data.split(""String_Node_Str"");
  try {
    for (    String s : callsAndReturns) {
      if (s.length() < 1)       continue;
switch (s.charAt(0)) {
case '<':
        String[] args=s.substring(1,s.length()).split(DELIM);
      int id=Integer.parseInt(args[1]);
    long time=Long.parseLong(args[2]);
  String name=args[0];
if (!encounteredMain && !isFunctionNameClean(name) && name.contains(""String_Node_Str"")) {
  skippedDirectives=true;
  break;
}
if (startTime < 1) {
startTime=time;
}
endingTimeInNS=time;
name=cleanFunctionName(name);
if (name.equals(""String_Node_Str"")) encounteredMain=true;
if (firstNode == -1) {
firstNode=id;
}
serialMap.put(id,name);
timeMap.put(id,time);
if (aggregateTimeMap.get(name) == null) {
aggregateTimeMap.put(name,(long)0);
}
if (nameList.indexOf(name) == -1) {
long cumulativeTime=aggregateTimeMap.get(name) - time;
aggregateTimeMap.put(name,cumulativeTime);
shouldGetEndingTimeForID.add(id);
}
if (countMap.get(name) == null) {
countMap.put(name,0);
}
countMap.put(name,countMap.get(name) + 1);
nameList.add(name);
idList.add(id);
if (outNeighbours.get(id) == null) {
outNeighbours.put(id,new ArrayList<Integer>());
}
if (idList.size() > 1) {
int parentID=idList.get(idList.size() - 2);
outNeighbours.get(parentID).add(id);
}
callOrderList.add(id);
lastFunctionCalled=id;
break;
case '>':
args=s.substring(1,s.length()).split(DELIM);
name=args[0];
if (!encounteredMain && !isFunctionNameClean(name) && name.contains(""String_Node_Str"")) {
skippedDirectives=true;
break;
}
name=cleanFunctionName(name);
int lastOccurance=nameList.lastIndexOf(name);
if (lastOccurance < 0) {
parsingError(Messages.getString(""String_Node_Str"") + name);
return Status.CANCEL_STATUS;
}
System.out.println(""String_Node_Str"" + name);
nameList.remove(lastOccurance);
id=idList.remove(lastOccurance);
if (timeMap.get(id) == null) {
parsingError(Messages.getString(""String_Node_Str"") + name);
return Status.CANCEL_STATUS;
}
endingTimeInNS=Long.parseLong(args[1]);
time=endingTimeInNS - timeMap.get(id);
timeMap.put(id,time);
if (id == firstNode) showTime(id,time);
if (shouldGetEndingTimeForID.contains(id)) {
long cumulativeTime=aggregateTimeMap.get(name) + Long.parseLong(args[1]);
aggregateTimeMap.put(name,cumulativeTime);
}
break;
default :
return Status.CANCEL_STATUS;
}
}
}
 catch (NumberFormatException e) {
SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str""));
mess.schedule();
return Status.CANCEL_STATUS;
}
return Status.OK_STATUS;
}",0.9913338357196684
93010,"private void finishLaunch(ILaunch launch,ILaunchConfiguration config,String command,IProgressMonitor monitor,boolean retry){
  String errorMessage=""String_Node_Str"";
  try {
    File workDir=getWorkingDirectory(config);
    if (workDir == null) {
      workDir=new File(System.getProperty(""String_Node_Str"",""String_Node_Str""));
    }
    SystemTapCommandGenerator cmdGenerator=new SystemTapCommandGenerator();
    cmd=cmdGenerator.generateCommand(scriptPath,binaryPath,command,needsBinary,needsArguments,arguments,binaryArguments);
    String tmp[]=cmd.split(""String_Node_Str"");
    ArrayList<String> cmdLine=new ArrayList<String>();
    for (    String str : tmp) {
      cmdLine.add(str);
    }
    String[] commandArray=(String[])cmdLine.toArray(new String[cmdLine.size()]);
    if (monitor.isCanceled()) {
      return;
    }
    monitor.worked(1);
    if (launch == null) {
      return;
    }
    setDefaultSourceLocator(launch,config);
    String parserClass=config.getAttribute(LaunchConfigurationConstants.PARSER_CLASS,LaunchConfigurationConstants.DEFAULT_PARSER_CLASS);
    IExtensionRegistry reg=Platform.getExtensionRegistry();
    IConfigurationElement[] extensions=reg.getConfigurationElementsFor(PluginConstants.PARSER_RESOURCE,PluginConstants.PARSER_NAME,parserClass);
    if (extensions == null || extensions.length < 1) {
      SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str"") + parserClass);
      mess.schedule();
      return;
    }
    IConfigurationElement element=extensions[0];
    SystemTapParser parser=(SystemTapParser)element.createExecutableExtension(PluginConstants.ATTR_CLASS);
    parser.setViewID(config.getAttribute(LaunchConfigurationConstants.VIEW_CLASS,LaunchConfigurationConstants.VIEW_CLASS));
    parser.setSourcePath(outputPath);
    parser.setMonitor(SubMonitor.convert(monitor));
    parser.setDone(false);
    parser.setKillButtonEnabled(true);
    if (element.getAttribute(PluginConstants.ATTR_REALTIME).equals(PluginConstants.VAL_TRUE)) {
      parser.setRealTime(true);
      parser.schedule();
    }
    monitor.worked(1);
    Process subProcess=execute(commandArray,getEnvironment(config),workDir,true);
    System.out.println(cmd);
    if (subProcess == null) {
      SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      mess.schedule();
      return;
    }
    IProcess process=createNewProcess(launch,subProcess,commandArray[0]);
    process.setAttribute(IProcess.ATTR_CMDLINE,cmd);
    monitor.worked(1);
    ((TextConsole)Helper.getConsoleByName(config.getName())).activate();
    StreamListener s=new StreamListener();
    process.getStreamsProxy().getErrorStreamMonitor().addListener(s);
    while (!process.isTerminated()) {
      Thread.sleep(100);
      if ((monitor != null && monitor.isCanceled()) || parser.isJobCancelled()) {
        parser.cancelJob();
        Runtime run=Runtime.getRuntime();
        run.exec(""String_Node_Str"");
        process.terminate();
        return;
      }
    }
    Thread.sleep(100);
    s.close();
    parser.setKillButtonEnabled(false);
    if (process.getExitValue() != 0) {
      parser.cancelJob();
      IDocument doc=Helper.getConsoleDocumentByName(config.getName());
      if (doc.get().length() < 1)       Thread.sleep(300);
      SystemTapErrorHandler errorHandler=new SystemTapErrorHandler();
      errorHandler.handle(monitor,config.getName() + Messages.getString(""String_Node_Str"") + cmd+ PluginConstants.NEW_LINE+ PluginConstants.NEW_LINE);
      errorMessage=errorHandler.handle(monitor,new FileReader(TEMP_ERROR_OUTPUT));
      if ((monitor != null && monitor.isCanceled())) {
        return;
      }
      if (errorHandler.hasMismatchedProbePoints() && retry) {
        SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        mess.schedule();
        if (!errorHandler.finishHandling(monitor,s.getNumberOfErrors())) {
          return;
        }
        if ((monitor != null && monitor.isCanceled()) || parser.isJobCancelled()) {
          monitor.setCanceled(true);
          parser.cancelJob();
          return;
        }
        finishLaunch(launch,config,command,monitor,false);
        return;
      }
      errorHandler.finishHandling(monitor,s.getNumberOfErrors());
      return;
    }
    if (!element.getAttribute(PluginConstants.ATTR_REALTIME).equals(PluginConstants.VAL_TRUE)) {
      parser.schedule();
    }
 else {
      if (parser != null)       parser.setDone(true);
    }
    monitor.worked(1);
    errorMessage=generateErrorMessage(config.getName(),command) + errorMessage;
    DocWriter dw=new DocWriter(Messages.getString(""String_Node_Str""),((TextConsole)Helper.getConsoleByName(config.getName())),errorMessage);
    dw.schedule();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  CoreException e) {
    e.printStackTrace();
  }
 finally {
    monitor.done();
  }
}","private void finishLaunch(ILaunch launch,ILaunchConfiguration config,String command,IProgressMonitor monitor,boolean retry){
  String errorMessage=""String_Node_Str"";
  try {
    File workDir=getWorkingDirectory(config);
    if (workDir == null) {
      workDir=new File(System.getProperty(""String_Node_Str"",""String_Node_Str""));
    }
    SystemTapCommandGenerator cmdGenerator=new SystemTapCommandGenerator();
    cmd=cmdGenerator.generateCommand(scriptPath,binaryPath,command,needsBinary,needsArguments,arguments,binaryArguments);
    String tmp[]=cmd.split(""String_Node_Str"");
    ArrayList<String> cmdLine=new ArrayList<String>();
    for (    String str : tmp) {
      cmdLine.add(str);
    }
    String[] commandArray=(String[])cmdLine.toArray(new String[cmdLine.size()]);
    if (monitor.isCanceled()) {
      return;
    }
    monitor.worked(1);
    if (launch == null) {
      return;
    }
    setDefaultSourceLocator(launch,config);
    String parserClass=config.getAttribute(LaunchConfigurationConstants.PARSER_CLASS,LaunchConfigurationConstants.DEFAULT_PARSER_CLASS);
    IExtensionRegistry reg=Platform.getExtensionRegistry();
    IConfigurationElement[] extensions=reg.getConfigurationElementsFor(PluginConstants.PARSER_RESOURCE,PluginConstants.PARSER_NAME,parserClass);
    if (extensions == null || extensions.length < 1) {
      SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str"") + parserClass);
      mess.schedule();
      return;
    }
    IConfigurationElement element=extensions[0];
    SystemTapParser parser=(SystemTapParser)element.createExecutableExtension(PluginConstants.ATTR_CLASS);
    parser.setViewID(config.getAttribute(LaunchConfigurationConstants.VIEW_CLASS,LaunchConfigurationConstants.VIEW_CLASS));
    parser.setSourcePath(outputPath);
    parser.setMonitor(SubMonitor.convert(monitor));
    parser.setDone(false);
    parser.setKillButtonEnabled(true);
    if (element.getAttribute(PluginConstants.ATTR_REALTIME).equals(PluginConstants.VAL_TRUE)) {
      parser.setRealTime(true);
      parser.schedule();
    }
    monitor.worked(1);
    Process subProcess=execute(commandArray,getEnvironment(config),workDir,true);
    System.out.println(cmd);
    if (subProcess == null) {
      SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      mess.schedule();
      return;
    }
    IProcess process=createNewProcess(launch,subProcess,commandArray[0]);
    process.setAttribute(IProcess.ATTR_CMDLINE,cmd);
    monitor.worked(1);
    ((TextConsole)Helper.getConsoleByName(config.getName())).activate();
    StreamListener s=new StreamListener();
    process.getStreamsProxy().getErrorStreamMonitor().addListener(s);
    while (!process.isTerminated()) {
      Thread.sleep(100);
      if ((monitor != null && monitor.isCanceled()) || parser.isJobCancelled()) {
        parser.cancelJob();
        process.terminate();
        return;
      }
    }
    Thread.sleep(100);
    s.close();
    parser.setKillButtonEnabled(false);
    if (process.getExitValue() != 0) {
      parser.cancelJob();
      IDocument doc=Helper.getConsoleDocumentByName(config.getName());
      if (doc.get().length() < 1)       Thread.sleep(300);
      SystemTapErrorHandler errorHandler=new SystemTapErrorHandler();
      errorHandler.handle(monitor,config.getName() + Messages.getString(""String_Node_Str"") + cmd+ PluginConstants.NEW_LINE+ PluginConstants.NEW_LINE);
      errorMessage=errorHandler.handle(monitor,new FileReader(TEMP_ERROR_OUTPUT));
      if ((monitor != null && monitor.isCanceled())) {
        return;
      }
      if (errorHandler.hasMismatchedProbePoints() && retry) {
        SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        mess.schedule();
        if (!errorHandler.finishHandling(monitor,s.getNumberOfErrors())) {
          return;
        }
        if ((monitor != null && monitor.isCanceled()) || parser.isJobCancelled()) {
          monitor.setCanceled(true);
          parser.cancelJob();
          return;
        }
        finishLaunch(launch,config,command,monitor,false);
        return;
      }
      errorHandler.finishHandling(monitor,s.getNumberOfErrors());
      return;
    }
    if (!element.getAttribute(PluginConstants.ATTR_REALTIME).equals(PluginConstants.VAL_TRUE)) {
      parser.schedule();
    }
 else {
      if (parser != null)       parser.setDone(true);
    }
    monitor.worked(1);
    errorMessage=generateErrorMessage(config.getName(),command) + errorMessage;
    DocWriter dw=new DocWriter(Messages.getString(""String_Node_Str""),((TextConsole)Helper.getConsoleByName(config.getName())),errorMessage);
    dw.schedule();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  CoreException e) {
    e.printStackTrace();
  }
 finally {
    monitor.done();
  }
}",0.9924926351800816
93011,"/** 
 * Called at the end of a non-realtime run.  Feel free to override this method if using non-realtime functions. The setData method will be called after executeParsing() is run. The getData() method will be used by the SystemTapView to get the data associated with this parser. <br><br> Alternatively, you can cast the parser within SystemTapView to your own parser class and access its data structures that way. 
 */
protected void setData(Object obj){
  data=obj;
}","/** 
 * Called at the end of a non-realtime run.  Feel free to override this method if using non-realtime functions. The setData method will be called after executeParsing() is run. The getData() method will be used by the SystemTapView to get the data associated with this parser. <br><br> Alternatively, you can cast the parser within SystemTapView to your own parser class and access its data structures that way. 
 */
public void setData(Object obj){
  data=obj;
}",0.9861554845580404
93012,"public boolean isPartOfCollapsedNode(){
  return (partOfCollapsedNode == NOT_PART_OF_COLLAPSED_NODE);
}","public boolean isPartOfCollapsedNode(){
  return (partOfCollapsedNode != NOT_PART_OF_COLLAPSED_NODE);
}",0.9902912621359224
93013,"public void setCollapseMode(boolean value){
  if (draw_mode == StapGraph.CONSTANT_DRAWMODE_AGGREGATE)   return;
  if (collapse_mode != value) {
    if (collapse_mode && !value) {
      if (!getRootData().isOnlyChildWithThisName()) {
        rootVisibleNodeNumber=getRootData().uncollapsedPiece;
      }
    }
    if (!collapse_mode && value) {
      if (!getRootData().isOnlyChildWithThisName()) {
        int temp=getRootData().getPartOfCollapsedNode();
        if (temp != StapData.NOT_PART_OF_COLLAPSED_NODE) {
          rootVisibleNodeNumber=temp;
        }
      }
    }
    collapse_mode=value;
    callgraphView.getMode_collapsednodes().setChecked(value);
  }
  nextMarkedNode=-1;
}","public void setCollapseMode(boolean value){
  if (draw_mode == StapGraph.CONSTANT_DRAWMODE_AGGREGATE)   return;
  if (collapse_mode != value) {
    if (draw_mode != StapGraph.CONSTANT_DRAWMODE_LEVEL) {
      if (collapse_mode && !value) {
        if (!getRootData().isOnlyChildWithThisName()) {
          rootVisibleNodeNumber=getRootData().uncollapsedPiece;
        }
      }
      if (!collapse_mode && value) {
        if (!getRootData().isOnlyChildWithThisName()) {
          int temp=getRootData().getPartOfCollapsedNode();
          if (temp != StapData.NOT_PART_OF_COLLAPSED_NODE) {
            rootVisibleNodeNumber=temp;
          }
        }
      }
    }
    collapse_mode=value;
    callgraphView.getMode_collapsednodes().setChecked(value);
  }
  nextMarkedNode=-1;
}",0.9386920980926432
93014,"/** 
 * Recursively collapses all children of node id, and puts them in the collapsedCallees list of id. At the end of this run, each collapsed node will have a list of other collapsed nodes AND a list of non-collapsed nodes. So will node #id. Uncollapsed nodes, however, will not have a list of collapsed nodes attached. 
 * @param ID of node to start from (use getFirstUsefulNode() to collapse everything
 * @return True if successful
 */
public boolean recursivelyCollapseAllChildrenOfNode(int id){
  setCollapseMode(true);
  if (nodeDataMap.get(id).hasCollapsedChildren || nodeDataMap.get(id).children.size() == 0)   return true;
  nodeDataMap.get(id).hasCollapsedChildren=true;
  HashMap<String,Integer> newNodeMap=new HashMap<String,Integer>();
  HashMap<Integer,Integer> collapsedNodesWithOnlyOneNodeInThem=new HashMap<Integer,Integer>();
  int size=nodeDataMap.get(id).children.size();
  for (int i=0; i < size; i++) {
    int childID=nodeDataMap.get(id).children.get(i);
    int childLevel=getLevelOfNode(childID);
    if (collapsedLevelSize.get(childLevel) == null)     collapsedLevelSize.put(childLevel,0);
    String nodeName=nodeDataMap.get(childID).name;
    if (newNodeMap.get(nodeName) != null) {
      int aggregateID=newNodeMap.get(nodeName);
      if (collapsedNodesWithOnlyOneNodeInThem.get(aggregateID) != null) {
        this.loadData(SWT.NONE,aggregateID,nodeName,nodeDataMap.get(childID).time,nodeDataMap.get(childID).timesCalled,id,nodeDataMap.get(childID).isMarked(),""String_Node_Str"");
        if (getNodeData(aggregateID).isMarked()) {
          markedCollapsedNodes.add(aggregateID);
          markedNodes.remove((Integer)aggregateID);
        }
        nodeDataMap.get(id).children.remove((Integer)aggregateID);
        nodeDataMap.get(id).collapsedChildren.add(aggregateID);
        nodeDataMap.get(aggregateID).collapsedParent=id;
        int otherChildID=collapsedNodesWithOnlyOneNodeInThem.get(aggregateID);
        aggregateData(nodeDataMap.get(aggregateID),nodeDataMap.get(otherChildID));
        collapsedNodesWithOnlyOneNodeInThem.remove(aggregateID);
        nodeDataMap.get(aggregateID).children.addAll(nodeDataMap.get(otherChildID).children);
        nodeDataMap.get(otherChildID).setPartOfCollapsedNode(aggregateID);
        nodeDataMap.get(aggregateID).uncollapsedPiece=otherChildID;
      }
 else       aggregateData(nodeDataMap.get(aggregateID),nodeDataMap.get(childID));
      nodeDataMap.get(aggregateID).children.addAll(nodeDataMap.get(childID).children);
      nodeDataMap.get(aggregateID).isCollapsed=true;
      if (nodeMap.get(childID) != null) {
        nodeMap.get(childID).setLocation(nodeMap.get(id).getLocation().x - nodeMap.get(id).getSize().width,nodeMap.get(id).getLocation().y);
      }
      nodeDataMap.get(childID).setPartOfCollapsedNode(aggregateID);
    }
 else {
      idOfLastNode++;
      newNodeMap.put(nodeName,idOfLastNode);
      collapsedNodesWithOnlyOneNodeInThem.put(idOfLastNode,childID);
      if (nodeMap.get(childID) != null) {
        nodeMap.get(childID).setLocation(nodeMap.get(id).getLocation().x,nodeMap.get(id).getLocation().y);
      }
      int tmp=collapsedLevelSize.get(childLevel) + 1;
      collapsedLevelSize.put(childLevel,tmp);
    }
  }
  for (  int i : collapsedNodesWithOnlyOneNodeInThem.keySet()) {
    int childID=collapsedNodesWithOnlyOneNodeInThem.get(i);
    nodeDataMap.get(childID).onlyChildWithThisName=true;
    nodeDataMap.get(id).collapsedChildren.add(childID);
    newNodeMap.remove(nodeDataMap.get(childID).name);
    nodeDataMap.get(childID).collapsedParent=id;
    if (getNodeData(childID).isMarked())     markedCollapsedNodes.add(childID);
  }
  for (  int i : nodeDataMap.get(id).collapsedChildren) {
    recursivelyCollapseAllChildrenOfNode(i);
  }
  nodeDataMap.get(id).sortByTime();
  collapsedNodesWithOnlyOneNodeInThem.clear();
  newNodeMap.clear();
  nodeDataMap.get(id).hasCollapsedChildren=true;
  return true;
}","/** 
 * Recursively collapses all children of node id, and puts them in the collapsedCallees list of id. At the end of this run, each collapsed node will have a list of other collapsed nodes AND a list of non-collapsed nodes. So will node #id. Uncollapsed nodes, however, will not have a list of collapsed nodes attached. 
 * @param ID of node to start from (use getFirstUsefulNode() to collapse everything
 * @return True if successful
 */
public boolean recursivelyCollapseAllChildrenOfNode(int id){
  setCollapseMode(true);
  if (nodeDataMap.get(id).hasCollapsedChildren || nodeDataMap.get(id).children.size() == 0)   return true;
  nodeDataMap.get(id).hasCollapsedChildren=true;
  HashMap<String,Integer> newNodeMap=new HashMap<String,Integer>();
  HashMap<Integer,Integer> collapsedNodesWithOnlyOneNodeInThem=new HashMap<Integer,Integer>();
  int size=nodeDataMap.get(id).children.size();
  for (int i=0; i < size; i++) {
    int childID=nodeDataMap.get(id).children.get(i);
    int childLevel=getLevelOfNode(childID);
    if (collapsedLevelSize.get(childLevel) == null)     collapsedLevelSize.put(childLevel,0);
    String nodeName=nodeDataMap.get(childID).name;
    if (newNodeMap.get(nodeName) != null) {
      int aggregateID=newNodeMap.get(nodeName);
      if (collapsedNodesWithOnlyOneNodeInThem.get(aggregateID) != null) {
        this.loadData(SWT.NONE,aggregateID,nodeName,nodeDataMap.get(childID).time,nodeDataMap.get(childID).timesCalled,id,nodeDataMap.get(childID).isMarked(),""String_Node_Str"");
        if (getNodeData(aggregateID).isMarked()) {
          markedCollapsedNodes.add(aggregateID);
          markedNodes.remove((Integer)aggregateID);
        }
        nodeDataMap.get(id).children.remove((Integer)aggregateID);
        nodeDataMap.get(id).collapsedChildren.add(aggregateID);
        nodeDataMap.get(childID).setPartOfCollapsedNode(aggregateID);
        nodeDataMap.get(aggregateID).collapsedParent=id;
        int otherChildID=collapsedNodesWithOnlyOneNodeInThem.get(aggregateID);
        aggregateData(nodeDataMap.get(aggregateID),nodeDataMap.get(otherChildID));
        collapsedNodesWithOnlyOneNodeInThem.remove(aggregateID);
        nodeDataMap.get(aggregateID).children.addAll(nodeDataMap.get(otherChildID).children);
        nodeDataMap.get(aggregateID).setPartOfCollapsedNode(StapData.NOT_PART_OF_COLLAPSED_NODE);
        nodeDataMap.get(otherChildID).setPartOfCollapsedNode(aggregateID);
        nodeDataMap.get(aggregateID).uncollapsedPiece=otherChildID;
      }
 else       aggregateData(nodeDataMap.get(aggregateID),nodeDataMap.get(childID));
      nodeDataMap.get(aggregateID).children.addAll(nodeDataMap.get(childID).children);
      nodeDataMap.get(aggregateID).isCollapsed=true;
      if (nodeMap.get(childID) != null) {
        nodeMap.get(childID).setLocation(nodeMap.get(id).getLocation().x - nodeMap.get(id).getSize().width,nodeMap.get(id).getLocation().y);
      }
      nodeDataMap.get(childID).setPartOfCollapsedNode(aggregateID);
    }
 else {
      idOfLastNode++;
      newNodeMap.put(nodeName,idOfLastNode);
      collapsedNodesWithOnlyOneNodeInThem.put(idOfLastNode,childID);
      if (nodeMap.get(childID) != null) {
        nodeMap.get(childID).setLocation(nodeMap.get(id).getLocation().x,nodeMap.get(id).getLocation().y);
      }
      int tmp=collapsedLevelSize.get(childLevel) + 1;
      collapsedLevelSize.put(childLevel,tmp);
    }
  }
  for (  int i : collapsedNodesWithOnlyOneNodeInThem.keySet()) {
    int childID=collapsedNodesWithOnlyOneNodeInThem.get(i);
    nodeDataMap.get(childID).onlyChildWithThisName=true;
    nodeDataMap.get(id).collapsedChildren.add(childID);
    newNodeMap.remove(nodeDataMap.get(childID).name);
    nodeDataMap.get(childID).collapsedParent=id;
    nodeDataMap.get(childID).setPartOfCollapsedNode(childID);
    if (getNodeData(childID).isMarked())     markedCollapsedNodes.add(childID);
  }
  for (  int i : nodeDataMap.get(id).collapsedChildren) {
    recursivelyCollapseAllChildrenOfNode(i);
  }
  nodeDataMap.get(id).sortByTime();
  collapsedNodesWithOnlyOneNodeInThem.clear();
  newNodeMap.clear();
  nodeDataMap.get(id).hasCollapsedChildren=true;
  return true;
}",0.797283950617284
93015,"/** 
 * Draws a tree roughly starting from node id
 */
public void drawBox(int id,int x,int y){
  setLevelLimits(id);
  int MaxLevelPixelWidth=1;
  int currPixelWidth=1;
  int count;
  for (int i=topLevelToDraw; i <= bottomLevelToDraw; i++) {
    count=0;
    levels.get(i).add(0,count);
    int size=levels.get(i).size();
    for (int j=1; j < size; j++) {
      int val=levels.get(i).get(j);
      if (collapse_mode && nodeDataMap.get(val).isPartOfCollapsedNode()) {
        continue;
      }
      if (!collapse_mode && nodeDataMap.get(val).isCollapsed)       continue;
      currPixelWidth+=nodeDataMap.get(val).name.length() * 10 + StapGraph.CONSTANT_HORIZONTAL_SPACING_FOR_LEVEL;
      if (MaxLevelPixelWidth < currPixelWidth) {
        MaxLevelPixelWidth=currPixelWidth;
      }
      count++;
      levels.get(i).remove(0);
      levels.get(i).add(0,count);
    }
    currPixelWidth=1;
  }
  MaxLevelPixelWidth=(int)(MaxLevelPixelWidth / scale);
  counter=0;
  if (id == getFirstUsefulNode())   nodeMap.get(id).setLocation(150 + (MaxLevelPixelWidth / 2),y);
  drawFromBottomToTop(bottomLevelToDraw,y + ((bottomLevelToDraw - topLevelToDraw) * 3 * (int)(CONSTANT_VERTICAL_INCREMENT / scale)),MaxLevelPixelWidth);
  if (id == getFirstUsefulNode())   nodeMap.get(id).setLocation(150 + (MaxLevelPixelWidth / 2),y);
}","/** 
 * Draws a tree roughly starting from node id
 */
public void drawBox(int id,int x,int y){
  setLevelLimits(id);
  int MaxLevelPixelWidth=1;
  int currPixelWidth=1;
  int count;
  for (int i=topLevelToDraw; i <= bottomLevelToDraw; i++) {
    count=0;
    levels.get(i).add(0,count);
    int size=levels.get(i).size();
    for (int j=1; j < size; j++) {
      int val=levels.get(i).get(j);
      StapData data=nodeDataMap.get(val);
      if (!data.isOnlyChildWithThisName()) {
        if (collapse_mode && data.isPartOfCollapsedNode()) {
          continue;
        }
        if (!collapse_mode && data.isCollapsed)         continue;
      }
      currPixelWidth+=data.name.length() * 10 + StapGraph.CONSTANT_HORIZONTAL_SPACING_FOR_LEVEL;
      if (MaxLevelPixelWidth < currPixelWidth) {
        MaxLevelPixelWidth=currPixelWidth;
      }
      count++;
      levels.get(i).remove(0);
      levels.get(i).add(0,count);
    }
    currPixelWidth=1;
  }
  MaxLevelPixelWidth=(int)(MaxLevelPixelWidth / scale);
  counter=0;
  if (id == getFirstUsefulNode())   nodeMap.get(id).setLocation(150 + (MaxLevelPixelWidth / 2),y);
  drawFromBottomToTop(bottomLevelToDraw,y + ((bottomLevelToDraw - topLevelToDraw) * 3 * (int)(CONSTANT_VERTICAL_INCREMENT / scale)),MaxLevelPixelWidth);
  if (id == getFirstUsefulNode())   nodeMap.get(id).setLocation(150 + (MaxLevelPixelWidth / 2),y);
}",0.9068645640074212
93016,"public void drawFromBottomToTop(int level,int height,int MaxLevelPixelWidth){
  if (level == 0 || level < topLevelToDraw) {
    return;
  }
  int total=levels.get(level).remove(0);
  int count=1;
  for (int i=0; i < levels.get(level).size(); i++) {
    int id=levels.get(level).get(i);
    if (collapse_mode && nodeDataMap.get(id).isPartOfCollapsedNode()) {
      continue;
    }
    if (!collapse_mode && nodeDataMap.get(id).isCollapsed)     continue;
    if (nodeMap.get(id) == null) {
      nodeMap.put(id,getNodeData(id).makeNode(this));
    }
    StapNode n=nodeMap.get(id);
    n.setVisible(true);
    n.setSize(n.getSize().width / scale,n.getSize().height / scale);
    if (getAnimationMode() == CONSTANT_ANIMATION_SLOW) {
      if (counter <= ANIMATION_TIME)       Animation.markBegin();
      n.setLocation(150 + (nodeMap.get(getRootVisibleNodeNumber()).getLocation().x),nodeMap.get(getRootVisibleNodeNumber()).getLocation().y);
      n.setLocation(150 + (MaxLevelPixelWidth / (total + 1) * count),height);
      if (counter <= ANIMATION_TIME) {
        Animation.run(ANIMATION_TIME / nodeMap.size() / 3);
        counter+=ANIMATION_TIME / nodeMap.size();
      }
    }
 else {
      n.setLocation(150 + (MaxLevelPixelWidth / (total + 1) * count),height);
    }
    if (level == bottomLevelToDraw && nodeDataMap.get(id).children.size() != 0) {
      n.setBackgroundColor(CONSTANT_HAS_CHILDREN);
    }
    if (getNodeData(n.id).isMarked())     n.setBackgroundColor(CONSTANT_MARKED);
    List<Integer> setOfCallees=null;
    if (collapse_mode)     setOfCallees=nodeDataMap.get(id).collapsedChildren;
 else     setOfCallees=nodeDataMap.get(id).children;
    for (    int val : setOfCallees) {
      if (nodeMap.get(val) != null)       nodeMap.get(val).makeConnection(SWT.NONE,n,nodeDataMap.get(val).timesCalled);
    }
    count++;
  }
  drawFromBottomToTop(level - 1,height - (3 * (int)(CONSTANT_VERTICAL_INCREMENT / scale)),MaxLevelPixelWidth);
}","public void drawFromBottomToTop(int level,int height,int MaxLevelPixelWidth){
  if (level == 0 || level < topLevelToDraw) {
    return;
  }
  int total=levels.get(level).remove(0);
  int count=1;
  for (int i=0; i < levels.get(level).size(); i++) {
    int id=levels.get(level).get(i);
    StapData data=nodeDataMap.get(id);
    if (!data.isOnlyChildWithThisName()) {
      if (collapse_mode && data.isPartOfCollapsedNode()) {
        continue;
      }
      if (!collapse_mode && nodeDataMap.get(id).isCollapsed)       continue;
    }
    if (nodeMap.get(id) == null) {
      nodeMap.put(id,getNodeData(id).makeNode(this));
    }
    StapNode n=nodeMap.get(id);
    n.setVisible(true);
    n.setSize(n.getSize().width / scale,n.getSize().height / scale);
    if (getAnimationMode() == CONSTANT_ANIMATION_SLOW) {
      if (counter <= ANIMATION_TIME)       Animation.markBegin();
      n.setLocation(150 + (nodeMap.get(getRootVisibleNodeNumber()).getLocation().x),nodeMap.get(getRootVisibleNodeNumber()).getLocation().y);
      n.setLocation(150 + (MaxLevelPixelWidth / (total + 1) * count),height);
      if (counter <= ANIMATION_TIME) {
        Animation.run(ANIMATION_TIME / nodeMap.size() / 3);
        counter+=ANIMATION_TIME / nodeMap.size();
      }
    }
 else {
      n.setLocation(150 + (MaxLevelPixelWidth / (total + 1) * count),height);
    }
    if (level == bottomLevelToDraw && nodeDataMap.get(id).children.size() != 0) {
      n.setBackgroundColor(CONSTANT_HAS_CHILDREN);
    }
    if (getNodeData(n.id).isMarked())     n.setBackgroundColor(CONSTANT_MARKED);
    List<Integer> setOfCallees=null;
    if (collapse_mode)     setOfCallees=nodeDataMap.get(id).collapsedChildren;
 else     setOfCallees=nodeDataMap.get(id).children;
    for (    int val : setOfCallees) {
      if (nodeMap.get(val) != null)       nodeMap.get(val).makeConnection(SWT.NONE,n,nodeDataMap.get(val).timesCalled);
    }
    count++;
  }
  drawFromBottomToTop(level - 1,height - (3 * (int)(CONSTANT_VERTICAL_INCREMENT / scale)),MaxLevelPixelWidth);
}",0.9696817840140316
93017,"@Override public void updateMethod(){
  loadData(null);
  if (parser.totalTime > 0) {
    finishLoad(new NullProgressMonitor());
  }
  g.draw(StapGraph.CONSTANT_DRAWMODE_RADIAL,StapGraph.CONSTANT_ANIMATION_SLOW,g.getFirstUsefulNode());
}","@Override public void updateMethod(){
  if (parser.isRealTime()) {
    loadData(null);
    if (parser.totalTime > 0) {
      finishLoad(new NullProgressMonitor());
    }
    g.draw(StapGraph.CONSTANT_DRAWMODE_RADIAL,StapGraph.CONSTANT_ANIMATION_SLOW,g.getFirstUsefulNode());
  }
}",0.9168278529980658
93018,"public void cancelJob(){
  if (job != null)   job.cancel();
}","/** 
 * Cancels the RunTimeJob affiliated with this parser.
 */
public void cancelJob(){
  if (job != null)   job.cancel();
}",0.6559139784946236
93019,"/** 
 * For easier JUnit testing only. Allows public access to run method without scheduling an extra job.
 * @param m
 * @return
 */
public IStatus testRun(IProgressMonitor m){
  return run(m);
}","/** 
 * For easier JUnit testing only. Allows public access to run method without scheduling an extra job.
 * @param m
 * @return
 */
public IStatus testRun(IProgressMonitor m){
  GraphUIJob uijob=new GraphUIJob(Messages.getString(""String_Node_Str""),this,viewID);
  uijob.schedule();
  view=uijob.getViewer();
  return Status.OK_STATUS;
}",0.6891385767790262
93020,"public static Test suite(){
  SystemTapUIErrorMessages.setActive(false);
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(SystemTapGraphViewTest.class);
  return suite;
}","public static Test suite(){
  SystemTapUIErrorMessages.setActive(false);
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(StapGraphParserTest.class);
  suite.addTestSuite(SystemTapGraphViewTest.class);
  return suite;
}",0.8878718535469108
93021,"private void finishLaunch(ILaunch launch,ILaunchConfiguration config,String command,IProgressMonitor monitor,boolean retry){
  String errorMessage=""String_Node_Str"";
  try {
    File workDir=getWorkingDirectory(config);
    if (workDir == null) {
      workDir=new File(System.getProperty(""String_Node_Str"",""String_Node_Str""));
    }
    SystemTapCommandGenerator cmdGenerator=new SystemTapCommandGenerator();
    cmd=cmdGenerator.generateCommand(scriptPath,binaryPath,command,needsBinary,needsArguments,arguments,binaryArguments);
    String tmp[]=cmd.split(""String_Node_Str"");
    ArrayList<String> cmdLine=new ArrayList<String>();
    for (    String str : tmp) {
      cmdLine.add(str);
    }
    String[] commandArray=(String[])cmdLine.toArray(new String[cmdLine.size()]);
    if (monitor.isCanceled()) {
      return;
    }
    monitor.worked(1);
    if (launch == null) {
      return;
    }
    setDefaultSourceLocator(launch,config);
    String parserClass=config.getAttribute(LaunchConfigurationConstants.PARSER_CLASS,LaunchConfigurationConstants.DEFAULT_PARSER_CLASS);
    IExtensionRegistry reg=Platform.getExtensionRegistry();
    IConfigurationElement[] extensions=reg.getConfigurationElementsFor(PluginConstants.PARSER_RESOURCE,PluginConstants.PARSER_NAME,parserClass);
    if (extensions == null || extensions.length < 1) {
      SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str"") + parserClass);
      mess.schedule();
      return;
    }
    IConfigurationElement element=extensions[0];
    SystemTapParser parser=(SystemTapParser)element.createExecutableExtension(PluginConstants.ATTR_CLASS);
    parser.setViewID(config.getAttribute(LaunchConfigurationConstants.VIEW_CLASS,LaunchConfigurationConstants.VIEW_CLASS));
    parser.setFilePath(outputPath);
    parser.setMonitor(SubMonitor.convert(monitor));
    parser.setDone(false);
    if (element.getAttribute(PluginConstants.ATTR_REALTIME).equals(PluginConstants.VAL_TRUE)) {
      parser.setRealTime(true);
      parser.schedule();
    }
    monitor.worked(1);
    Process subProcess=execute(commandArray,getEnvironment(config),workDir,true);
    System.out.println(cmd);
    if (subProcess == null) {
      SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      mess.schedule();
      return;
    }
    IProcess process=createNewProcess(launch,subProcess,commandArray[0]);
    process.setAttribute(IProcess.ATTR_CMDLINE,cmd);
    monitor.worked(1);
    ((TextConsole)Helper.getConsoleByName(config.getName())).activate();
    StreamListener s=new StreamListener();
    process.getStreamsProxy().getErrorStreamMonitor().addListener(s);
    while (!process.isTerminated()) {
      Thread.sleep(100);
      if (monitor.isCanceled() || process.isTerminated()) {
        if (parser != null) {
          parser.cancelJob();
        }
        Runtime run=Runtime.getRuntime();
        run.exec(""String_Node_Str"");
        process.terminate();
        return;
      }
    }
    Thread.sleep(100);
    s.close();
    if (process.getExitValue() != 0) {
      IDocument doc=Helper.getConsoleDocumentByName(config.getName());
      if (doc.get().length() < 1)       Thread.sleep(300);
      SystemTapErrorHandler errorHandler=new SystemTapErrorHandler();
      errorHandler.handle(monitor,config.getName() + Messages.getString(""String_Node_Str"") + PluginConstants.NEW_LINE+ cmd+ PluginConstants.NEW_LINE+ PluginConstants.NEW_LINE);
      errorMessage=errorHandler.handle(monitor,new FileReader(TEMP_ERROR_OUTPUT));
      if (monitor != null && monitor.isCanceled()) {
        if (parser != null) {
          parser.cancelJob();
        }
        return;
      }
      if (errorHandler.hasMismatchedProbePoints() && retry) {
        SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str"")+ Messages.getString(""String_Node_Str""));
        mess.schedule();
        errorHandler.finishHandling(monitor,s.getNumberOfErrors());
        if (monitor != null && monitor.isCanceled()) {
          if (parser != null) {
            parser.cancelJob();
          }
          return;
        }
        finishLaunch(launch,config,command,monitor,false);
        return;
      }
      errorHandler.finishHandling(monitor,s.getNumberOfErrors());
      return;
    }
    if (!element.getAttribute(PluginConstants.ATTR_REALTIME).equals(PluginConstants.VAL_TRUE)) {
      parser.schedule();
    }
 else {
      if (parser != null)       parser.setDone(true);
    }
    monitor.worked(1);
    errorMessage=generateErrorMessage(config.getName(),command) + errorMessage;
    DocWriter dw=new DocWriter(Messages.getString(""String_Node_Str""),((TextConsole)Helper.getConsoleByName(config.getName())),errorMessage);
    dw.schedule();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  CoreException e) {
    e.printStackTrace();
  }
 finally {
    monitor.done();
  }
}","private void finishLaunch(ILaunch launch,ILaunchConfiguration config,String command,IProgressMonitor monitor,boolean retry){
  String errorMessage=""String_Node_Str"";
  try {
    File workDir=getWorkingDirectory(config);
    if (workDir == null) {
      workDir=new File(System.getProperty(""String_Node_Str"",""String_Node_Str""));
    }
    SystemTapCommandGenerator cmdGenerator=new SystemTapCommandGenerator();
    cmd=cmdGenerator.generateCommand(scriptPath,binaryPath,command,needsBinary,needsArguments,arguments,binaryArguments);
    String tmp[]=cmd.split(""String_Node_Str"");
    ArrayList<String> cmdLine=new ArrayList<String>();
    for (    String str : tmp) {
      cmdLine.add(str);
    }
    String[] commandArray=(String[])cmdLine.toArray(new String[cmdLine.size()]);
    if (monitor.isCanceled()) {
      return;
    }
    monitor.worked(1);
    if (launch == null) {
      return;
    }
    setDefaultSourceLocator(launch,config);
    String parserClass=config.getAttribute(LaunchConfigurationConstants.PARSER_CLASS,LaunchConfigurationConstants.DEFAULT_PARSER_CLASS);
    IExtensionRegistry reg=Platform.getExtensionRegistry();
    IConfigurationElement[] extensions=reg.getConfigurationElementsFor(PluginConstants.PARSER_RESOURCE,PluginConstants.PARSER_NAME,parserClass);
    if (extensions == null || extensions.length < 1) {
      SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str"") + parserClass);
      mess.schedule();
      return;
    }
    IConfigurationElement element=extensions[0];
    SystemTapParser parser=(SystemTapParser)element.createExecutableExtension(PluginConstants.ATTR_CLASS);
    parser.setViewID(config.getAttribute(LaunchConfigurationConstants.VIEW_CLASS,LaunchConfigurationConstants.VIEW_CLASS));
    parser.setFilePath(outputPath);
    parser.setMonitor(SubMonitor.convert(monitor));
    parser.setDone(false);
    if (element.getAttribute(PluginConstants.ATTR_REALTIME).equals(PluginConstants.VAL_TRUE)) {
      parser.setRealTime(true);
      parser.schedule();
    }
    monitor.worked(1);
    Process subProcess=execute(commandArray,getEnvironment(config),workDir,true);
    System.out.println(cmd);
    if (subProcess == null) {
      SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      mess.schedule();
      return;
    }
    IProcess process=createNewProcess(launch,subProcess,commandArray[0]);
    process.setAttribute(IProcess.ATTR_CMDLINE,cmd);
    monitor.worked(1);
    ((TextConsole)Helper.getConsoleByName(config.getName())).activate();
    StreamListener s=new StreamListener();
    process.getStreamsProxy().getErrorStreamMonitor().addListener(s);
    while (!process.isTerminated()) {
      Thread.sleep(100);
      if (monitor.isCanceled()) {
        if (parser != null) {
          parser.cancelJob();
        }
        Runtime run=Runtime.getRuntime();
        run.exec(""String_Node_Str"");
        process.terminate();
        return;
      }
    }
    Thread.sleep(100);
    s.close();
    if (process.getExitValue() != 0) {
      IDocument doc=Helper.getConsoleDocumentByName(config.getName());
      if (doc.get().length() < 1)       Thread.sleep(300);
      SystemTapErrorHandler errorHandler=new SystemTapErrorHandler();
      errorHandler.handle(monitor,config.getName() + Messages.getString(""String_Node_Str"") + PluginConstants.NEW_LINE+ cmd+ PluginConstants.NEW_LINE+ PluginConstants.NEW_LINE);
      errorMessage=errorHandler.handle(monitor,new FileReader(TEMP_ERROR_OUTPUT));
      if (monitor != null && monitor.isCanceled()) {
        if (parser != null) {
          parser.cancelJob();
        }
        return;
      }
      if (errorHandler.hasMismatchedProbePoints() && retry) {
        SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str"")+ Messages.getString(""String_Node_Str""));
        mess.schedule();
        errorHandler.finishHandling(monitor,s.getNumberOfErrors());
        if (monitor != null && monitor.isCanceled()) {
          if (parser != null) {
            parser.cancelJob();
          }
          return;
        }
        finishLaunch(launch,config,command,monitor,false);
        return;
      }
      errorHandler.finishHandling(monitor,s.getNumberOfErrors());
      return;
    }
    if (!element.getAttribute(PluginConstants.ATTR_REALTIME).equals(PluginConstants.VAL_TRUE)) {
      parser.schedule();
    }
 else {
      if (parser != null)       parser.setDone(true);
    }
    monitor.worked(1);
    errorMessage=generateErrorMessage(config.getName(),command) + errorMessage;
    DocWriter dw=new DocWriter(Messages.getString(""String_Node_Str""),((TextConsole)Helper.getConsoleByName(config.getName())),errorMessage);
    dw.schedule();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  CoreException e) {
    e.printStackTrace();
  }
 finally {
    monitor.done();
  }
}",0.9975741742862474
93022,"public void testGraphLoading() throws InterruptedException {
  StapGraphParser parse=new StapGraphParser();
  parse.setFile(Activator.PLUGIN_LOCATION + ""String_Node_Str"");
  parse.testRun(new NullProgressMonitor());
  CallgraphView.forceDisplay();
  GraphUIJob j=new GraphUIJob(""String_Node_Str"",parse,CallGraphConstants.viewID);
  j.runInUIThread(new NullProgressMonitor());
  if (!manual) {
    ArrayList<String> tasks=new ArrayList<String>();
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    int taskNumber=0;
    for (    String task : tasks) {
      taskNumber++;
      System.out.println(task);
      Action act=null;
switch (taskNumber) {
case 1:
        break;
case 2:
      act=CallgraphView.getView_refresh();
    break;
case 3:
  act=CallgraphView.getView_treeview();
break;
case 4:
act=CallgraphView.getView_aggregateview();
break;
case 5:
act=CallgraphView.getView_boxview();
break;
case 6:
act=CallgraphView.getAnimation_fast();
break;
case 7:
case 8:
act=CallgraphView.getMode_collapsednodes();
break;
case 9:
act=CallgraphView.getView_radialview();
break;
case 10:
act=CallgraphView.getMode_collapsednodes();
break;
case 14:
String tempLocation=Activator.PLUGIN_LOCATION + ""String_Node_Str"";
File temp=new File(tempLocation);
temp.delete();
parse.saveData(tempLocation);
temp.delete();
break;
case 15:
StapGraphParser new_parser=new StapGraphParser();
new_parser.setFile(Activator.PLUGIN_LOCATION + ""String_Node_Str"");
new_parser.testRun(new NullProgressMonitor());
break;
case 16:
CallgraphView.maximizeIfUnmaximized();
break;
default :
break;
}
if (act != null) {
act.run();
}
}
return;
}
SystemTapUIErrorMessages testRadial=new SystemTapUIErrorMessages(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
testRadial.schedule();
testRadial.cancel();
ArrayList<String> tasks=new ArrayList<String>();
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
final Shell sh=new Shell(SWT.SHELL_TRIM);
sh.setSize(450,tasks.size() * 38);
sh.setText(""String_Node_Str"");
sh.setLayout(new GridLayout(1,false));
sh.setAlpha(150);
ScrolledComposite testComp=new ScrolledComposite(sh,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
Composite buttons=new Composite(testComp,SWT.NONE);
testComp.setContent(buttons);
buttons.setLayout(new GridLayout(1,false));
testComp.setExpandHorizontal(true);
testComp.setExpandVertical(true);
int taskNumber=0;
for (String task : tasks) {
taskNumber++;
Button checkBox=new Button(buttons,SWT.CHECK);
list.add(checkBox);
checkBox.setText(task);
Action act=null;
switch (taskNumber) {
case 1:
break;
case 2:
act=CallgraphView.getView_refresh();
break;
case 3:
act=CallgraphView.getView_treeview();
break;
case 4:
act=CallgraphView.getView_aggregateview();
break;
case 5:
act=CallgraphView.getView_boxview();
break;
case 6:
act=CallgraphView.getAnimation_fast();
break;
case 7:
case 8:
act=CallgraphView.getMode_collapsednodes();
break;
case 9:
act=CallgraphView.getView_radialview();
break;
case 10:
act=CallgraphView.getMode_collapsednodes();
break;
case 14:
act=CallgraphView.getSave_callgraph();
break;
case 15:
act=CallgraphView.getOpen_callgraph();
break;
case 16:
act=CallgraphView.getHelp_version();
break;
default :
break;
}
if (act != null) {
ButtonSelectionListener bl=new ButtonSelectionListener(act);
checkBox.addSelectionListener(bl);
}
}
sh.open();
boolean doneTasks=MessageDialog.openConfirm(new Shell(SWT.ON_TOP),""String_Node_Str"",""String_Node_Str"" + tasks.size() + ""String_Node_Str""+ ""String_Node_Str"");
assertEquals(true,doneTasks);
for (Button b : list) {
if (!b.getSelection()) {
fail(""String_Node_Str"" + b.getText());
}
assertEquals(true,b.getSelection());
}
}","public void testGraphLoading() throws InterruptedException {
  StapGraphParser parse=new StapGraphParser();
  parse.setFile(Activator.PLUGIN_LOCATION + ""String_Node_Str"");
  parse.testRun(new NullProgressMonitor());
  GraphUIJob j=new GraphUIJob(""String_Node_Str"",parse,CallGraphConstants.viewID);
  j.runInUIThread(new NullProgressMonitor());
  CallgraphView.forceDisplay();
  if (!manual) {
    ArrayList<String> tasks=new ArrayList<String>();
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    tasks.add(""String_Node_Str"");
    int taskNumber=0;
    for (    String task : tasks) {
      taskNumber++;
      System.out.println(task);
      Action act=null;
switch (taskNumber) {
case 1:
        break;
case 2:
      act=CallgraphView.getView_refresh();
    break;
case 3:
  act=CallgraphView.getView_treeview();
break;
case 4:
act=CallgraphView.getView_aggregateview();
break;
case 5:
act=CallgraphView.getView_boxview();
break;
case 6:
act=CallgraphView.getAnimation_fast();
break;
case 7:
case 8:
act=CallgraphView.getMode_collapsednodes();
break;
case 9:
act=CallgraphView.getView_radialview();
break;
case 10:
act=CallgraphView.getMode_collapsednodes();
break;
case 14:
String tempLocation=Activator.PLUGIN_LOCATION + ""String_Node_Str"";
File temp=new File(tempLocation);
temp.delete();
parse.saveData(tempLocation);
temp.delete();
break;
case 15:
StapGraphParser new_parser=new StapGraphParser();
new_parser.setFile(Activator.PLUGIN_LOCATION + ""String_Node_Str"");
new_parser.testRun(new NullProgressMonitor());
break;
case 16:
CallgraphView.maximizeIfUnmaximized();
break;
default :
break;
}
if (act != null) {
act.run();
}
}
return;
}
SystemTapUIErrorMessages testRadial=new SystemTapUIErrorMessages(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
testRadial.schedule();
testRadial.cancel();
ArrayList<String> tasks=new ArrayList<String>();
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
tasks.add(""String_Node_Str"");
final Shell sh=new Shell(SWT.SHELL_TRIM);
sh.setSize(450,tasks.size() * 38);
sh.setText(""String_Node_Str"");
sh.setLayout(new GridLayout(1,false));
sh.setAlpha(150);
ScrolledComposite testComp=new ScrolledComposite(sh,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
Composite buttons=new Composite(testComp,SWT.NONE);
testComp.setContent(buttons);
buttons.setLayout(new GridLayout(1,false));
testComp.setExpandHorizontal(true);
testComp.setExpandVertical(true);
int taskNumber=0;
for (String task : tasks) {
taskNumber++;
Button checkBox=new Button(buttons,SWT.CHECK);
list.add(checkBox);
checkBox.setText(task);
Action act=null;
switch (taskNumber) {
case 1:
break;
case 2:
act=CallgraphView.getView_refresh();
break;
case 3:
act=CallgraphView.getView_treeview();
break;
case 4:
act=CallgraphView.getView_aggregateview();
break;
case 5:
act=CallgraphView.getView_boxview();
break;
case 6:
act=CallgraphView.getAnimation_fast();
break;
case 7:
case 8:
act=CallgraphView.getMode_collapsednodes();
break;
case 9:
act=CallgraphView.getView_radialview();
break;
case 10:
act=CallgraphView.getMode_collapsednodes();
break;
case 14:
act=CallgraphView.getSave_callgraph();
break;
case 15:
act=CallgraphView.getOpen_callgraph();
break;
case 16:
act=CallgraphView.getHelp_version();
break;
default :
break;
}
if (act != null) {
ButtonSelectionListener bl=new ButtonSelectionListener(act);
checkBox.addSelectionListener(bl);
}
}
sh.open();
boolean doneTasks=MessageDialog.openConfirm(new Shell(SWT.ON_TOP),""String_Node_Str"",""String_Node_Str"" + tasks.size() + ""String_Node_Str""+ ""String_Node_Str"");
assertEquals(true,doneTasks);
for (Button b : list) {
if (!b.getSelection()) {
fail(""String_Node_Str"" + b.getText());
}
assertEquals(true,b.getSelection());
}
}",0.9929546455306032
93023,"public static void setBufferedWriter(String absoluteFilePath){
  try {
    File f=new File(absoluteFilePath);
    f.delete();
    f.createNewFile();
    FileWriter fstream;
    fstream=new FileWriter(absoluteFilePath,true);
    bw=new BufferedWriter(fstream);
  }
 catch (  Exception e) {
    SystemTapUIErrorMessages err=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    err.schedule();
    e.printStackTrace();
  }
}","public void setBufferedWriter(String absoluteFilePath){
  try {
    File f=new File(absoluteFilePath);
    f.delete();
    f.createNewFile();
    FileWriter fstream;
    fstream=new FileWriter(absoluteFilePath,true);
    bw=new BufferedWriter(fstream);
  }
 catch (  Exception e) {
    SystemTapUIErrorMessages err=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    err.schedule();
    e.printStackTrace();
  }
}",0.9931840311587148
93024,"public static void closeBufferedWriter() throws IOException {
  bw.close();
}","public void closeBufferedWriter() throws IOException {
  bw.close();
}",0.9523809523809524
93025,"public static void appendToExistingFile(String content) throws IOException {
  bw.append(content);
}","public void appendToExistingFile(String content) throws IOException {
  bw.append(content);
}",0.9637305699481864
93026,"public void handle(FileReader f) throws IOException {
  BufferedReader br=new BufferedReader(f);
  String line;
  StringBuilder builder=new StringBuilder();
  int counter=0;
  while ((line=br.readLine()) != null) {
    counter++;
    builder.append(line);
    builder.append(""String_Node_Str"");
    if (counter == 300) {
      handle(builder.toString());
      builder=new StringBuilder();
      counter=0;
    }
  }
}","public void handle(FileReader f) throws IOException {
  BufferedReader br=new BufferedReader(f);
  String line;
  StringBuilder builder=new StringBuilder();
  int counter=0;
  while ((line=br.readLine()) != null) {
    counter++;
    builder.append(line);
    builder.append(""String_Node_Str"");
    if (counter == 300) {
      handle(builder.toString());
      builder=new StringBuilder();
      counter=0;
    }
  }
  handle(builder.toString());
}",0.9653579676674364
93027,"/** 
 * Run this method when there are no more error messages to handle.  Creates the error pop-up message and writes to log.
 */
public void finishHandling(){
  if (!isErrorRecognized()) {
    errorMessage+=Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str"");
  }
  writeToLog();
  if (mismatchedProbePoints) {
    StringBuffer resultFileContent=new StringBuffer();
    String fileLocation=PluginConstants.DEFAULT_OUTPUT + ""String_Node_Str"";
    String line;
    boolean skip=false;
    int counter=0;
    File file=new File(fileLocation);
    try {
      BufferedReader buff=new BufferedReader(new FileReader(file));
      while ((line=buff.readLine()) != null) {
        skip=false;
        for (        String func : functions) {
          if (line.contains(""String_Node_Str"" + func + ""String_Node_Str"")) {
            counter++;
            System.out.println(""String_Node_Str"" + counter);
            skip=true;
            break;
          }
        }
        if (!skip && !line.equals(""String_Node_Str"")) {
          resultFileContent.append(line);
          resultFileContent.append(""String_Node_Str"");
        }
      }
      buff.close();
      BufferedWriter wbuff=new BufferedWriter(new FileWriter(file));
      wbuff.write(resultFileContent.toString());
      wbuff.close();
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else {
    SystemTapUIErrorMessages mes=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),errorMessage);
    mes.schedule();
  }
}","/** 
 * Run this method when there are no more error messages to handle.  Creates the error pop-up message and writes to log.
 */
public void finishHandling(){
  if (!isErrorRecognized()) {
    errorMessage+=Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str"");
  }
  writeToLog();
  if (mismatchedProbePoints) {
    StringBuffer resultFileContent=new StringBuffer();
    String fileLocation=PluginConstants.DEFAULT_OUTPUT + ""String_Node_Str"";
    String line;
    boolean skip=false;
    File file=new File(fileLocation);
    try {
      BufferedReader buff=new BufferedReader(new FileReader(file));
      while ((line=buff.readLine()) != null) {
        skip=false;
        for (        String func : functions) {
          if (line.contains(""String_Node_Str"" + func + ""String_Node_Str"")) {
            skip=true;
            break;
          }
        }
        if (!skip && !line.equals(""String_Node_Str"")) {
          resultFileContent.append(line);
          resultFileContent.append(""String_Node_Str"");
        }
      }
      buff.close();
      BufferedWriter wbuff=new BufferedWriter(new FileWriter(file));
      wbuff.write(resultFileContent.toString());
      wbuff.close();
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else {
    SystemTapUIErrorMessages mes=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),errorMessage);
    mes.schedule();
  }
}",0.9676609105180534
93028,"@Override public String generateScript() throws IOException {
  String scriptContents=""String_Node_Str"";
  File scriptFile=new File(scriptPath);
  scriptFile.delete();
  scriptFile.createNewFile();
  scriptContents+=writeGlobalVariables();
  scriptContents+=funcs;
  scriptContents+=writeFromPartialScript(projectName);
  BufferedWriter bw=new BufferedWriter(new FileWriter(scriptFile));
  bw.write(scriptContents);
  bw.close();
  return scriptContents;
}","@Override public String generateScript() throws IOException {
  String scriptContents=""String_Node_Str"";
  File scriptFile=new File(scriptPath);
  scriptFile.delete();
  scriptFile.createNewFile();
  scriptContents+=writeGlobalVariables();
  scriptContents+=funcs;
  scriptContents+=writeFromPartialScript(projectName);
  return scriptContents;
}",0.8553615960099751
93029,"public void launch(IBinary bin,String mode){
  super.Init();
  this.bin=bin;
  name=""String_Node_Str"";
  binName=getName(bin);
  partialScriptPath=PluginConstants.getPluginLocation() + ""String_Node_Str"";
  scriptPath=PluginConstants.DEFAULT_OUTPUT + ""String_Node_Str"";
  if (projectName == null || projectName.length() < 1)   projectName=bin.getCProject().getElementName();
  try {
    config=createConfiguration(bin,name);
    binaryPath=bin.getResource().getLocation().toString();
    arguments=binaryPath;
    outputPath=PluginConstants.STAP_GRAPH_DEFAULT_IO_PATH;
    if (funcs == null || funcs.length() < 1) {
      funcs=writeFunctionListToScript(resourceToSearchFor);
      if (funcs == null || funcs.length() < 0)       return;
    }
    String scriptContents=generateScript();
    if (scriptContents == null || scriptContents.length() < 0)     return;
    ILaunchConfigurationWorkingCopy wc;
    wc=config.getWorkingCopy();
    wc.setAttribute(""String_Node_Str"",funcs);
    wc.setAttribute(""String_Node_Str"",bin.getCProject().getElementName());
    wc.setAttribute(LaunchConfigurationConstants.GRAPHICS_MODE,true);
    wc.setAttribute(LaunchConfigurationConstants.GENERATED_SCRIPT,scriptContents);
    wc.doSave();
    finishLaunch(name,mode);
  }
 catch (  IOException e) {
    SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(""String_Node_Str"",Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    mess.schedule();
    e.printStackTrace();
  }
catch (  CoreException e1) {
    e1.printStackTrace();
  }
 finally {
    resourceToSearchFor=""String_Node_Str"";
    searchForResource=false;
  }
}","public void launch(IBinary bin,String mode){
  super.Init();
  this.bin=bin;
  name=""String_Node_Str"";
  binName=getName(bin);
  partialScriptPath=PluginConstants.getPluginLocation() + ""String_Node_Str"";
  scriptPath=PluginConstants.DEFAULT_OUTPUT + ""String_Node_Str"";
  if (projectName == null || projectName.length() < 1)   projectName=bin.getCProject().getElementName();
  try {
    config=createConfiguration(bin,name);
    binaryPath=bin.getResource().getLocation().toString();
    arguments=binaryPath;
    outputPath=PluginConstants.STAP_GRAPH_DEFAULT_IO_PATH;
    funcs=writeFunctionListToScript(resourceToSearchFor);
    if (funcs == null || funcs.length() < 0)     return;
    String scriptContents=generateScript();
    if (scriptContents == null || scriptContents.length() < 0)     return;
    ILaunchConfigurationWorkingCopy wc;
    needToGenerate=true;
    generatedScript=scriptContents;
    wc=config.getWorkingCopy();
    wc.setAttribute(LaunchConfigurationConstants.GRAPHICS_MODE,true);
    wc.doSave();
    finishLaunch(name,mode);
  }
 catch (  IOException e) {
    SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(""String_Node_Str"",Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    mess.schedule();
    e.printStackTrace();
  }
catch (  CoreException e1) {
    e1.printStackTrace();
  }
 finally {
    resourceToSearchFor=""String_Node_Str"";
    searchForResource=false;
  }
}",0.8057179987004548
93030,"private void finishLaunch(ILaunch launch,ILaunchConfiguration config,String command,IProgressMonitor monitor,boolean retry){
  try {
    File workDir=getWorkingDirectory(config);
    if (workDir == null) {
      workDir=new File(System.getProperty(""String_Node_Str"",""String_Node_Str""));
    }
    SystemTapCommandGenerator cmdGenerator=new SystemTapCommandGenerator();
    cmd=cmdGenerator.generateCommand(scriptPath,binaryPath,command,needsBinary,needsArguments,arguments,binaryArguments);
    String tmp[]=cmd.split(""String_Node_Str"");
    ArrayList<String> cmdLine=new ArrayList<String>();
    for (    String str : tmp) {
      cmdLine.add(str);
    }
    String[] commandArray=(String[])cmdLine.toArray(new String[cmdLine.size()]);
    if (monitor.isCanceled()) {
      return;
    }
    monitor.worked(1);
    if (launch == null) {
      return;
    }
    setDefaultSourceLocator(launch,config);
    boolean graphMode=config.getAttribute(LaunchConfigurationConstants.GRAPHICS_MODE,LaunchConfigurationConstants.DEFAULT_GRAPHICS_MODE);
    SystemTapCommandParser stapCmdPar=null;
    if (!graphMode) {
      stapCmdPar=new SystemTapCommandParser(Messages.getString(""String_Node_Str""),outputPath,new CallgraphView(),useColour,graphMode,config.getName());
      stapCmdPar.schedule();
    }
    monitor.worked(1);
    Process subProcess=execute(commandArray,getEnvironment(config),workDir,true);
    if (subProcess == null) {
      SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str""));
      mess.schedule();
      return;
    }
    IProcess process=createNewProcess(launch,subProcess,commandArray[0]);
    process.setAttribute(IProcess.ATTR_CMDLINE,cmd);
    monitor.worked(1);
    ((TextConsole)Helper.getConsoleByName(config.getName())).activate();
    stringBuff=new StringBuffer();
    process.getStreamsProxy().getErrorStreamMonitor().addListener(new StreamListener());
    while (!process.isTerminated()) {
      Thread.sleep(100);
      if (monitor.isCanceled()) {
        Runtime run=Runtime.getRuntime();
        run.exec(""String_Node_Str"");
        process.terminate();
        return;
      }
    }
    Thread.sleep(100);
    if (stapCmdPar != null)     stapCmdPar.setProcessFinished(true);
    if (process.getExitValue() != 0) {
      IDocument doc=Helper.getConsoleDocumentByName(config.getName());
      if (doc.get().length() < 1)       Thread.sleep(300);
      SystemTapErrorHandler errorHandler=new SystemTapErrorHandler();
      errorHandler.handle(config.getName() + Messages.getString(""String_Node_Str"") + PluginConstants.NEW_LINE+ cmd+ PluginConstants.NEW_LINE+ PluginConstants.NEW_LINE);
      System.out.println(""String_Node_Str"");
      errorHandler.handle(new FileReader(outputPath + ""String_Node_Str""));
      if (errorHandler.hasMismatchedProbePoints() && retry) {
        ArrayList<String> exclusions=errorHandler.getFunctions();
        LaunchStapGraph l=new LaunchStapGraph();
        l.setExclusions(exclusions);
        l.scriptPath=config.getAttribute(LaunchConfigurationConstants.SCRIPT_PATH,LaunchConfigurationConstants.DEFAULT_SCRIPT_PATH);
        l.setFuncs(config.getAttribute(""String_Node_Str"",""String_Node_Str""));
        l.setProjectName(config.getAttribute(""String_Node_Str"",""String_Node_Str""));
        l.setPartialScriptPath(PluginConstants.getPluginLocation() + ""String_Node_Str"");
        l.generateScript();
        finishLaunch(launch,config,command,monitor,false);
        return;
      }
      errorHandler.finishHandling();
      return;
    }
    if (graphMode) {
      stapCmdPar=new SystemTapCommandParser(Messages.getString(""String_Node_Str""),outputPath,new CallgraphView(),useColour,graphMode,config.getName());
      stapCmdPar.schedule();
    }
    monitor.worked(1);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  CoreException e) {
    e.printStackTrace();
  }
 finally {
    DocWriter dw=new DocWriter(Messages.getString(""String_Node_Str""),((TextConsole)Helper.getConsoleByName(config.getName())),config.getName(),binaryArguments);
    dw.schedule();
    monitor.done();
  }
}","private void finishLaunch(ILaunch launch,ILaunchConfiguration config,String command,IProgressMonitor monitor,boolean retry){
  try {
    File workDir=getWorkingDirectory(config);
    if (workDir == null) {
      workDir=new File(System.getProperty(""String_Node_Str"",""String_Node_Str""));
    }
    SystemTapCommandGenerator cmdGenerator=new SystemTapCommandGenerator();
    cmd=cmdGenerator.generateCommand(scriptPath,binaryPath,command,needsBinary,needsArguments,arguments,binaryArguments);
    String tmp[]=cmd.split(""String_Node_Str"");
    ArrayList<String> cmdLine=new ArrayList<String>();
    for (    String str : tmp) {
      cmdLine.add(str);
    }
    String[] commandArray=(String[])cmdLine.toArray(new String[cmdLine.size()]);
    if (monitor.isCanceled()) {
      return;
    }
    monitor.worked(1);
    if (launch == null) {
      return;
    }
    setDefaultSourceLocator(launch,config);
    boolean graphMode=config.getAttribute(LaunchConfigurationConstants.GRAPHICS_MODE,LaunchConfigurationConstants.DEFAULT_GRAPHICS_MODE);
    SystemTapCommandParser stapCmdPar=null;
    if (!graphMode) {
      stapCmdPar=new SystemTapCommandParser(Messages.getString(""String_Node_Str""),outputPath,new CallgraphView(),useColour,graphMode,config.getName());
      stapCmdPar.schedule();
    }
    monitor.worked(1);
    Process subProcess=execute(commandArray,getEnvironment(config),workDir,true);
    if (subProcess == null) {
      SystemTapUIErrorMessages mess=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str""));
      mess.schedule();
      return;
    }
    IProcess process=createNewProcess(launch,subProcess,commandArray[0]);
    process.setAttribute(IProcess.ATTR_CMDLINE,cmd);
    monitor.worked(1);
    ((TextConsole)Helper.getConsoleByName(config.getName())).activate();
    stringBuff=new StringBuffer();
    StreamListener s=new StreamListener();
    process.getStreamsProxy().getErrorStreamMonitor().addListener(s);
    while (!process.isTerminated()) {
      Thread.sleep(100);
      if (monitor.isCanceled()) {
        Runtime run=Runtime.getRuntime();
        run.exec(""String_Node_Str"");
        process.terminate();
        return;
      }
    }
    Thread.sleep(100);
    s.close();
    if (stapCmdPar != null)     stapCmdPar.setProcessFinished(true);
    if (process.getExitValue() != 0) {
      IDocument doc=Helper.getConsoleDocumentByName(config.getName());
      if (doc.get().length() < 1)       Thread.sleep(300);
      SystemTapErrorHandler errorHandler=new SystemTapErrorHandler();
      errorHandler.handle(config.getName() + Messages.getString(""String_Node_Str"") + PluginConstants.NEW_LINE+ cmd+ PluginConstants.NEW_LINE+ PluginConstants.NEW_LINE);
      errorHandler.handle(new FileReader(outputPath + ""String_Node_Str""));
      if (errorHandler.hasMismatchedProbePoints() && retry) {
        errorHandler.finishHandling();
        finishLaunch(launch,config,command,monitor,false);
        return;
      }
      errorHandler.finishHandling();
      return;
    }
    if (graphMode) {
      stapCmdPar=new SystemTapCommandParser(Messages.getString(""String_Node_Str""),outputPath,new CallgraphView(),useColour,graphMode,config.getName());
      stapCmdPar.schedule();
    }
    monitor.worked(1);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  CoreException e) {
    e.printStackTrace();
  }
 finally {
    DocWriter dw=new DocWriter(Messages.getString(""String_Node_Str""),((TextConsole)Helper.getConsoleByName(config.getName())),config.getName(),binaryArguments);
    dw.schedule();
    monitor.done();
  }
}",0.9041640770665008
93031,"@Override public void launch(ILaunchConfiguration config,String mode,ILaunch launch,IProgressMonitor m) throws CoreException {
  if (m == null) {
    m=new NullProgressMonitor();
  }
  SubMonitor monitor=SubMonitor.convert(m,""String_Node_Str"",5);
  if (monitor.isCanceled()) {
    return;
  }
  String command=ConfigurationOptionsSetter.setOptions(config);
  if (config.getAttribute(LaunchConfigurationConstants.USE_COLOUR,LaunchConfigurationConstants.DEFAULT_USE_COLOUR))   useColour=true;
  if (!config.getAttribute(LaunchConfigurationConstants.ARGUMENTS,LaunchConfigurationConstants.DEFAULT_ARGUMENTS).equals(LaunchConfigurationConstants.DEFAULT_ARGUMENTS)) {
    arguments=config.getAttribute(LaunchConfigurationConstants.ARGUMENTS,LaunchConfigurationConstants.DEFAULT_ARGUMENTS);
    needsArguments=true;
  }
  if (!config.getAttribute(LaunchConfigurationConstants.BINARY_PATH,LaunchConfigurationConstants.DEFAULT_BINARY_PATH).equals(LaunchConfigurationConstants.DEFAULT_BINARY_PATH)) {
    binaryPath=config.getAttribute(LaunchConfigurationConstants.BINARY_PATH,LaunchConfigurationConstants.DEFAULT_BINARY_PATH);
    needsBinary=true;
  }
  if (!config.getAttribute(LaunchConfigurationConstants.BINARY_ARGUMENTS,LaunchConfigurationConstants.DEFAULT_BINARY_ARGUMENTS).equals(LaunchConfigurationConstants.DEFAULT_BINARY_ARGUMENTS)) {
    binaryArguments=config.getAttribute(LaunchConfigurationConstants.BINARY_ARGUMENTS,LaunchConfigurationConstants.DEFAULT_BINARY_ARGUMENTS);
  }
  if (!config.getAttribute(LaunchConfigurationConstants.SCRIPT_PATH,LaunchConfigurationConstants.DEFAULT_SCRIPT_PATH).equals(LaunchConfigurationConstants.DEFAULT_SCRIPT_PATH)) {
    scriptPath=config.getAttribute(LaunchConfigurationConstants.SCRIPT_PATH,LaunchConfigurationConstants.DEFAULT_SCRIPT_PATH);
  }
  if (config.getAttribute(LaunchConfigurationConstants.NEED_TO_GENERATE,LaunchConfigurationConstants.DEFAULT_NEED_TO_GENERATE)) {
    temporaryScript=new File(scriptPath);
    temporaryScript.delete();
    try {
      temporaryScript.createNewFile();
      FileWriter fstream=new FileWriter(temporaryScript);
      BufferedWriter out=new BufferedWriter(fstream);
      out.write(config.getAttribute(LaunchConfigurationConstants.GENERATED_SCRIPT,LaunchConfigurationConstants.DEFAULT_GENERATED_SCRIPT));
      out.close();
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
  }
  outputPath=config.getAttribute(LaunchConfigurationConstants.OUTPUT_PATH,PluginConstants.DEFAULT_OUTPUT + System.currentTimeMillis());
  command+=""String_Node_Str"" + outputPath;
  try {
    File tempFile=new File(outputPath);
    tempFile.createNewFile();
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  if (monitor.isCanceled()) {
    return;
  }
  finishLaunch(launch,config,command,m,true);
}","@Override public void launch(ILaunchConfiguration config,String mode,ILaunch launch,IProgressMonitor m) throws CoreException {
  if (m == null) {
    m=new NullProgressMonitor();
  }
  SubMonitor monitor=SubMonitor.convert(m,""String_Node_Str"",5);
  if (monitor.isCanceled()) {
    return;
  }
  String command=ConfigurationOptionsSetter.setOptions(config);
  if (config.getAttribute(LaunchConfigurationConstants.USE_COLOUR,LaunchConfigurationConstants.DEFAULT_USE_COLOUR))   useColour=true;
  if (!config.getAttribute(LaunchConfigurationConstants.ARGUMENTS,LaunchConfigurationConstants.DEFAULT_ARGUMENTS).equals(LaunchConfigurationConstants.DEFAULT_ARGUMENTS)) {
    arguments=config.getAttribute(LaunchConfigurationConstants.ARGUMENTS,LaunchConfigurationConstants.DEFAULT_ARGUMENTS);
    needsArguments=true;
  }
  if (!config.getAttribute(LaunchConfigurationConstants.BINARY_PATH,LaunchConfigurationConstants.DEFAULT_BINARY_PATH).equals(LaunchConfigurationConstants.DEFAULT_BINARY_PATH)) {
    binaryPath=config.getAttribute(LaunchConfigurationConstants.BINARY_PATH,LaunchConfigurationConstants.DEFAULT_BINARY_PATH);
    needsBinary=true;
  }
  if (!config.getAttribute(LaunchConfigurationConstants.BINARY_ARGUMENTS,LaunchConfigurationConstants.DEFAULT_BINARY_ARGUMENTS).equals(LaunchConfigurationConstants.DEFAULT_BINARY_ARGUMENTS)) {
    binaryArguments=config.getAttribute(LaunchConfigurationConstants.BINARY_ARGUMENTS,LaunchConfigurationConstants.DEFAULT_BINARY_ARGUMENTS);
  }
  if (!config.getAttribute(LaunchConfigurationConstants.SCRIPT_PATH,LaunchConfigurationConstants.DEFAULT_SCRIPT_PATH).equals(LaunchConfigurationConstants.DEFAULT_SCRIPT_PATH)) {
    scriptPath=config.getAttribute(LaunchConfigurationConstants.SCRIPT_PATH,LaunchConfigurationConstants.DEFAULT_SCRIPT_PATH);
  }
  if (config.getAttribute(LaunchConfigurationConstants.NEED_TO_GENERATE,LaunchConfigurationConstants.DEFAULT_NEED_TO_GENERATE)) {
    temporaryScript=new File(scriptPath);
    temporaryScript.delete();
    try {
      temporaryScript.createNewFile();
      FileWriter fstream=new FileWriter(temporaryScript);
      BufferedWriter out=new BufferedWriter(fstream);
      out.write(config.getAttribute(LaunchConfigurationConstants.GENERATED_SCRIPT,LaunchConfigurationConstants.DEFAULT_GENERATED_SCRIPT));
      out.close();
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
  }
  outputPath=config.getAttribute(LaunchConfigurationConstants.OUTPUT_PATH,PluginConstants.DEFAULT_OUTPUT);
  command+=""String_Node_Str"" + outputPath;
  try {
    File tempFile=new File(outputPath);
    tempFile.createNewFile();
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  if (monitor.isCanceled()) {
    return;
  }
  finishLaunch(launch,config,command,m,true);
}",0.9947944713695924
93032,"@Override public void streamAppended(String text,IStreamMonitor monitor){
  try {
    Helper.appendToExistingFile(text);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","@Override public void streamAppended(String text,IStreamMonitor monitor){
  try {
    h.appendToExistingFile(text);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.98050139275766
93033,"public StreamListener() throws IOException {
  Helper.setBufferedWriter(outputPath + ""String_Node_Str"");
}","public StreamListener() throws IOException {
  h=new Helper();
  h.setBufferedWriter(outputPath + ""String_Node_Str"");
}",0.9422222222222222
93034,"/** 
 * This is a callback that will allow us to create the viewer and initialize it.
 */
public void createPartControl(Composite parent){
  masterComposite=parent;
  this.display=parent.getDisplay();
  GridLayout layout=new GridLayout(2,false);
  layout.horizontalSpacing=0;
  GridData gd=new GridData(100,100);
  parent.setLayout(layout);
  parent.setLayoutData(gd);
  if (graph == null)   createViewer(parent);
  createActions();
  mgr=getViewSite().getActionBars().getToolBarManager();
  menu=getViewSite().getActionBars().getMenuManager();
  file=new MenuManager(Messages.getString(""String_Node_Str""));
  view=new MenuManager(Messages.getString(""String_Node_Str""));
  errors=new MenuManager(Messages.getString(""String_Node_Str""));
  animation=new MenuManager(Messages.getString(""String_Node_Str""));
  help=new MenuManager(Messages.getString(""String_Node_Str""));
  markers=new MenuManager(Messages.getString(""String_Node_Str""));
  gotoMenu=new MenuManager(Messages.getString(""String_Node_Str""));
  menu.add(file);
  menu.add(view);
  menu.add(gotoMenu);
  menu.add(errors);
  menu.add(help);
  file.add(open_callgraph);
  file.add(open_default);
  file.add(save_callgraph);
  errors.add(error_errorLog);
  errors.add(error_deleteError);
  view.add(view_treeview);
  view.add(view_radialview);
  view.add(view_aggregateview);
  view.add(view_boxview);
  view.add(getView_refresh());
  view.add(mode_collapsednodes);
  view.add(limits);
  gotoMenu.add(goto_previous);
  gotoMenu.add(goto_next);
  gotoMenu.add(goto_last);
  mgr.add(view_radialview);
  mgr.add(view_treeview);
  mgr.add(view_boxview);
  mgr.add(view_aggregateview);
  mgr.add(getView_refresh());
  mgr.add(mode_collapsednodes);
  help.add(help_version);
  markers.add(markers_next);
  markers.add(markers_previous);
  animation.add(animation_slow);
  animation.add(animation_fast);
  setGraphOptions(false);
  previousEnd=0;
  stapview=this;
}","/** 
 * This is a callback that will allow us to create the viewer and initialize it.
 */
public void createPartControl(Composite parent){
  if (masterComposite != null)   masterComposite.dispose();
  masterComposite=parent;
  this.display=parent.getDisplay();
  GridLayout layout=new GridLayout(2,false);
  layout.horizontalSpacing=0;
  GridData gd=new GridData(100,100);
  parent.setLayout(layout);
  parent.setLayoutData(gd);
  if (graph == null)   createViewer(parent);
  createActions();
  mgr=getViewSite().getActionBars().getToolBarManager();
  menu=getViewSite().getActionBars().getMenuManager();
  file=new MenuManager(Messages.getString(""String_Node_Str""));
  view=new MenuManager(Messages.getString(""String_Node_Str""));
  errors=new MenuManager(Messages.getString(""String_Node_Str""));
  animation=new MenuManager(Messages.getString(""String_Node_Str""));
  help=new MenuManager(Messages.getString(""String_Node_Str""));
  markers=new MenuManager(Messages.getString(""String_Node_Str""));
  gotoMenu=new MenuManager(Messages.getString(""String_Node_Str""));
  menu.add(file);
  menu.add(view);
  menu.add(gotoMenu);
  menu.add(errors);
  menu.add(help);
  file.add(open_callgraph);
  file.add(open_default);
  file.add(save_callgraph);
  errors.add(error_errorLog);
  errors.add(error_deleteError);
  view.add(view_treeview);
  view.add(view_radialview);
  view.add(view_aggregateview);
  view.add(view_boxview);
  view.add(getView_refresh());
  view.add(mode_collapsednodes);
  view.add(limits);
  gotoMenu.add(goto_previous);
  gotoMenu.add(goto_next);
  gotoMenu.add(goto_last);
  mgr.add(view_radialview);
  mgr.add(view_treeview);
  mgr.add(view_boxview);
  mgr.add(view_aggregateview);
  mgr.add(getView_refresh());
  mgr.add(mode_collapsednodes);
  help.add(help_version);
  markers.add(markers_next);
  markers.add(markers_previous);
  animation.add(animation_slow);
  animation.add(animation_fast);
  setGraphOptions(false);
  previousEnd=0;
  stapview=this;
}",0.9845440494590416
93035,"/** 
 * Writes the contents of logContents to the error log, along with date and time.
 */
public void writeToLog(){
  File errorLog=new File(PluginConstants.DEFAULT_OUTPUT + ""String_Node_Str"");
  try {
    if (!errorLog.exists() || errorLog.length() > MAX_LOG_SIZE) {
      errorLog.delete();
      errorLog.createNewFile();
    }
    Calendar cal=Calendar.getInstance(TimeZone.getDefault());
    int year=cal.get(Calendar.YEAR);
    int month=cal.get(Calendar.MONTH);
    int day=cal.get(Calendar.DAY_OF_MONTH);
    int hour=cal.get(Calendar.HOUR_OF_DAY);
    int minute=cal.get(Calendar.MINUTE);
    int second=cal.get(Calendar.SECOND);
    Helper.appendToFile(errorLog.getAbsolutePath(),Messages.getString(""String_Node_Str"") + PluginConstants.NEW_LINE + day+ ""String_Node_Str""+ month+ ""String_Node_Str""+ year+ ""String_Node_Str""+ hour+ ""String_Node_Str""+ minute+ ""String_Node_Str""+ second+ PluginConstants.NEW_LINE+ logContents+ PluginConstants.NEW_LINE+ PluginConstants.NEW_LINE);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  logContents=""String_Node_Str"";
}","/** 
 * Writes the contents of logContents to the error log, along with date and time.
 */
public void writeToLog(){
  File errorLog=new File(PluginConstants.DEFAULT_OUTPUT + ""String_Node_Str"");
  try {
    if (!errorLog.exists() || errorLog.length() > MAX_LOG_SIZE) {
      errorLog.delete();
      errorLog.createNewFile();
    }
    Calendar cal=Calendar.getInstance(TimeZone.getDefault());
    int year=cal.get(Calendar.YEAR);
    int month=cal.get(Calendar.MONTH);
    int day=cal.get(Calendar.DAY_OF_MONTH);
    int hour=cal.get(Calendar.HOUR_OF_DAY);
    int minute=cal.get(Calendar.MINUTE);
    int second=cal.get(Calendar.SECOND);
    Helper.appendToFile(errorLog.getAbsolutePath(),Messages.getString(""String_Node_Str"") + PluginConstants.NEW_LINE + day+ ""String_Node_Str""+ month+ ""String_Node_Str""+ year+ ""String_Node_Str""+ hour+ ""String_Node_Str""+ minute+ ""String_Node_Str""+ second+ PluginConstants.NEW_LINE+ logContents+ PluginConstants.NEW_LINE+ PluginConstants.NEW_LINE);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  logContents=new StringBuilder();
}",0.9833333333333332
93036,"/** 
 * Search given string for recognizable error messages. Can append the contents of  the string to the error log if writeToLog() or finishHandling() are called. A call to finishHandling() will also open a popup window with user-friendly messages corresponding to the recognizable errors.
 * @param doc
 */
public void handle(String message){
  mismatchedProbePoints=false;
  if (errorMessage.length() < 1) {
    errorMessage=Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str"");
  }
  File file=new File(PluginConstants.PLUGIN_LOCATION + FILE_PROP);
  try {
    BufferedReader buff=new BufferedReader(new FileReader(file));
    String line;
    int index;
    boolean firstLine=true;
    while ((line=buff.readLine()) != null) {
      index=line.indexOf('=');
      String matchString=line.substring(0,index);
      Pattern pat=Pattern.compile(matchString,Pattern.DOTALL);
      Matcher matcher=pat.matcher(message);
      if (matcher.matches()) {
        if (!isErrorRecognized()) {
          errorMessage+=Messages.getString(""String_Node_Str"");
          setErrorRecognized(true);
        }
        errorMessage+=line.substring(index + 1) + PluginConstants.NEW_LINE + PluginConstants.NEW_LINE;
        if (firstLine) {
          functions.clear();
          findFunctions(message,pat);
          mismatchedProbePoints=true;
        }
      }
      firstLine=false;
    }
    logContents+=message;
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public void handle(FileReader f) throws IOException {
  BufferedReader br=new BufferedReader(f);
  String line;
  StringBuilder builder=new StringBuilder();
  int counter=0;
  while ((line=br.readLine()) != null) {
    counter++;
    builder.append(line);
    builder.append(""String_Node_Str"");
    if (counter == 300) {
      handle(builder.toString());
      builder=new StringBuilder();
      counter=0;
    }
  }
}",0.0253549695740365
93037,"/** 
 * Run this method when there are no more error messages to handle.  Creates the error pop-up message and writes to log.
 */
public void finishHandling(){
  if (!isErrorRecognized()) {
    errorMessage+=Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str"");
  }
  writeToLog();
  if (mismatchedProbePoints) {
    StringBuffer resultFileContent=new StringBuffer();
    String fileLocation=PluginConstants.DEFAULT_OUTPUT + ""String_Node_Str"";
    String line;
    boolean skip=false;
    File file=new File(fileLocation);
    try {
      BufferedReader buff=new BufferedReader(new FileReader(file));
      while ((line=buff.readLine()) != null) {
        skip=false;
        for (        String func : functions) {
          if (line.contains(""String_Node_Str"" + func + ""String_Node_Str"")) {
            skip=true;
            buff.readLine();
            buff.readLine();
            buff.readLine();
            buff.readLine();
            buff.readLine();
            break;
          }
        }
        if (!skip && !line.equals(""String_Node_Str"")) {
          resultFileContent.append(line);
          resultFileContent.append(""String_Node_Str"");
        }
      }
      buff.close();
      BufferedWriter wbuff=new BufferedWriter(new FileWriter(file));
      wbuff.write(resultFileContent.toString());
      wbuff.close();
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else {
    SystemTapUIErrorMessages mes=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),errorMessage);
    mes.schedule();
  }
}","/** 
 * Run this method when there are no more error messages to handle.  Creates the error pop-up message and writes to log.
 */
public void finishHandling(){
  if (!isErrorRecognized()) {
    errorMessage+=Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str"");
  }
  writeToLog();
  if (mismatchedProbePoints) {
    StringBuffer resultFileContent=new StringBuffer();
    String fileLocation=PluginConstants.DEFAULT_OUTPUT + ""String_Node_Str"";
    String line;
    boolean skip=false;
    int counter=0;
    File file=new File(fileLocation);
    try {
      BufferedReader buff=new BufferedReader(new FileReader(file));
      while ((line=buff.readLine()) != null) {
        skip=false;
        for (        String func : functions) {
          if (line.contains(""String_Node_Str"" + func + ""String_Node_Str"")) {
            counter++;
            System.out.println(""String_Node_Str"" + counter);
            skip=true;
            buff.readLine();
            buff.readLine();
            buff.readLine();
            buff.readLine();
            buff.readLine();
            break;
          }
        }
        if (!skip && !line.equals(""String_Node_Str"")) {
          resultFileContent.append(line);
          resultFileContent.append(""String_Node_Str"");
        }
      }
      buff.close();
      BufferedWriter wbuff=new BufferedWriter(new FileWriter(file));
      wbuff.write(resultFileContent.toString());
      wbuff.close();
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else {
    SystemTapUIErrorMessages mes=new SystemTapUIErrorMessages(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),errorMessage);
    mes.schedule();
  }
}",0.9703597122302158
93038,"public SystemTapErrorHandler(){
  errorRecognized=false;
  errorMessage=""String_Node_Str"";
  logContents=""String_Node_Str"";
}","public SystemTapErrorHandler(){
  mismatchedProbePoints=false;
  errorRecognized=false;
  if (errorMessage.length() < 1) {
    errorMessage=Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str"");
  }
  logContents=new StringBuilder();
}",0.4895833333333333
93039,"@Override public IStatus runInUIThread(IProgressMonitor monitor){
  treeSize=200;
  CallgraphView.forceDisplay();
  Composite treeComp=CallgraphView.makeTreeComp(treeSize);
  Composite graphComp=CallgraphView.makeGraphComp();
  Canvas thumbCanvas=new Canvas(graphComp,SWT.BORDER);
  g=new StapGraph(graphComp,SWT.BORDER,treeComp,thumbCanvas);
  g.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  GridData thumbGD=new GridData(SWT.BEGINNING,SWT.BEGINNING,false,false);
  thumbGD.widthHint=150;
  thumbCanvas.setLayoutData(thumbGD);
  LightweightSystem lws=new LightweightSystem(thumbCanvas);
  ScrollableThumbnail thumb=new ScrollableThumbnail(g.getViewport());
  thumb.setSource(g.getContents());
  lws.setContents(thumb);
  g.loadData(SWT.NONE,0,StapGraph.CONSTANT_TOP_NODE_NAME,1,1,-1,false,""String_Node_Str"");
  boolean marked=false;
  String msg=""String_Node_Str"";
  for (  int id_parent : parser.serialMap.keySet()) {
    if (g.getData(id_parent) == null) {
      if (parser.markedMap.get(id_parent) != null) {
        marked=true;
        msg=parser.markedMap.get(id_parent);
      }
      g.loadData(SWT.NONE,id_parent,parser.serialMap.get(id_parent),parser.timeMap.get(id_parent),1,0,marked,msg);
    }
    for (    int id_child : parser.outNeighbours.get(id_parent)) {
      if (monitor.isCanceled()) {
        return Status.CANCEL_STATUS;
      }
      marked=false;
      msg=""String_Node_Str"";
      if (parser.markedMap.get(id_child) != null) {
        marked=true;
        msg=parser.markedMap.get(id_child);
      }
      if (id_child != -1) {
        if (parser.timeMap.get(id_child) == null) {
          g.loadData(SWT.NONE,id_child,parser.serialMap.get(id_child),parser.timeMap.get(0),1,id_parent,marked,msg);
        }
 else {
          g.loadData(SWT.NONE,id_child,parser.serialMap.get(id_child),parser.timeMap.get(id_child),1,id_parent,marked,msg);
        }
      }
    }
  }
  g.aggregateCount=parser.countMap;
  g.aggregateTime=parser.cumulativeTimeMap;
  g.setTotalTime(parser.totalTime);
  g.recursivelyCollapseAllChildrenOfNode(g.getTopNode());
  if (monitor.isCanceled()) {
    return Status.CANCEL_STATUS;
  }
  g.initializeTree();
  g.setLastFunctionCalled(parser.lastFunctionCalled);
  if (monitor.isCanceled()) {
    return Status.CANCEL_STATUS;
  }
  g.setFocus();
  g.setCallOrderList(parser.callOrderList);
  g.setProject(parser.project);
  CallgraphView.setValues(graphComp,treeComp,g,parser);
  CallgraphView.createPartControl();
  g.draw(StapGraph.CONSTANT_DRAWMODE_RADIAL,StapGraph.CONSTANT_ANIMATION_SLOW,g.getFirstUsefulNode());
  return Status.OK_STATUS;
}","@Override public IStatus runInUIThread(IProgressMonitor monitor){
  treeSize=200;
  CallgraphView.forceDisplay();
  Composite treeComp=CallgraphView.makeTreeComp(treeSize);
  Composite graphComp=CallgraphView.makeGraphComp();
  Canvas thumbCanvas=new Canvas(graphComp,SWT.BORDER);
  g=new StapGraph(graphComp,SWT.BORDER,treeComp,thumbCanvas);
  g.setLayoutData(new GridData(this.getDisplay().getPrimaryMonitor().getBounds().width - 200,this.getDisplay().getPrimaryMonitor().getBounds().height - 200));
  GridData thumbGD=new GridData(SWT.BEGINNING,SWT.BEGINNING,false,false);
  thumbGD.widthHint=150;
  thumbCanvas.setLayoutData(thumbGD);
  LightweightSystem lws=new LightweightSystem(thumbCanvas);
  ScrollableThumbnail thumb=new ScrollableThumbnail(g.getViewport());
  thumb.setSource(g.getContents());
  lws.setContents(thumb);
  g.loadData(SWT.NONE,0,StapGraph.CONSTANT_TOP_NODE_NAME,1,1,-1,false,""String_Node_Str"");
  boolean marked=false;
  String msg=""String_Node_Str"";
  for (  int id_parent : parser.serialMap.keySet()) {
    if (g.getData(id_parent) == null) {
      if (parser.markedMap.get(id_parent) != null) {
        marked=true;
        msg=parser.markedMap.get(id_parent);
      }
      g.loadData(SWT.NONE,id_parent,parser.serialMap.get(id_parent),parser.timeMap.get(id_parent),1,0,marked,msg);
    }
    for (    int id_child : parser.outNeighbours.get(id_parent)) {
      if (monitor.isCanceled()) {
        return Status.CANCEL_STATUS;
      }
      marked=false;
      msg=""String_Node_Str"";
      if (parser.markedMap.get(id_child) != null) {
        marked=true;
        msg=parser.markedMap.get(id_child);
      }
      if (id_child != -1) {
        if (parser.timeMap.get(id_child) == null) {
          g.loadData(SWT.NONE,id_child,parser.serialMap.get(id_child),parser.timeMap.get(0),1,id_parent,marked,msg);
        }
 else {
          g.loadData(SWT.NONE,id_child,parser.serialMap.get(id_child),parser.timeMap.get(id_child),1,id_parent,marked,msg);
        }
      }
    }
  }
  g.aggregateCount=parser.countMap;
  g.aggregateTime=parser.cumulativeTimeMap;
  g.setTotalTime(parser.totalTime);
  g.recursivelyCollapseAllChildrenOfNode(g.getTopNode());
  if (monitor.isCanceled()) {
    return Status.CANCEL_STATUS;
  }
  g.initializeTree();
  g.setLastFunctionCalled(parser.lastFunctionCalled);
  if (monitor.isCanceled()) {
    return Status.CANCEL_STATUS;
  }
  g.setFocus();
  g.setCallOrderList(parser.callOrderList);
  g.setProject(parser.project);
  CallgraphView.setValues(graphComp,treeComp,g,parser);
  CallgraphView.createPartControl();
  g.draw(StapGraph.CONSTANT_DRAWMODE_RADIAL,StapGraph.CONSTANT_ANIMATION_SLOW,g.getFirstUsefulNode());
  return Status.OK_STATUS;
}",0.9715898400752588
93040,"/** 
 * Draws with the given modes.
 * @param drawMode
 * @param animationMode
 * @param id
 */
public void draw(int drawMode,int animationMode,int id){
  setDrawMode(drawMode);
  setAnimationMode(animationMode);
  this.clearSelection();
  this.setRedraw(false);
  if (draw_mode == CONSTANT_DRAWMODE_RADIAL) {
    GridData gd=(GridData)thumbCanvas.getLayoutData();
    gd.exclude=true;
    thumbCanvas.setLayoutData(gd);
    thumbCanvas.setVisible(false);
    CallgraphView.layout();
    gd=(GridData)treeComp.getLayoutData();
    gd.exclude=false;
    treeComp.setLayoutData(gd);
    treeComp.setVisible(true);
    treeViewer.collapseToLevel(getData(id),1);
    treeViewer.expandToLevel(getData(id),1);
  }
 else   if (draw_mode == CONSTANT_DRAWMODE_AGGREGATE) {
    GridData gd=(GridData)treeComp.getLayoutData();
    gd.exclude=true;
    treeComp.setLayoutData(gd);
    treeComp.setVisible(false);
    CallgraphView.layout();
    gd=(GridData)thumbCanvas.getLayoutData();
    gd.exclude=true;
    thumbCanvas.setLayoutData(gd);
    thumbCanvas.setVisible(false);
  }
 else {
    GridData gd=(GridData)treeComp.getLayoutData();
    gd.exclude=true;
    treeComp.setLayoutData(gd);
    treeComp.setVisible(false);
    CallgraphView.layout();
    gd=(GridData)thumbCanvas.getLayoutData();
    gd.exclude=true;
    thumbCanvas.setLayoutData(gd);
    thumbCanvas.setVisible(true);
    thumbCanvas.setBackground(this.getBackground());
  }
  this.setRedraw(true);
  if (draw_mode == CONSTANT_DRAWMODE_TREE) {
    if (animation_mode == CONSTANT_ANIMATION_SLOW) {
      if (nodeMap.get(id) == null)       nodeMap.put(id,getData(id).makeNode(this));
      int tempX=nodeMap.get(id).getLocation().x;
      int tempY=nodeMap.get(id).getLocation().y;
      Animation.markBegin();
      moveAllNodesTo(tempX,tempY);
      Animation.run(ANIMATION_TIME);
      deleteAll(id);
      setLevelLimits(id);
      rootVisibleNodeNumber=id;
      drawTree(id,this.getBounds().width / 2,20);
      currentPositionInLevel.clear();
      this.update();
      Animation.markBegin();
      drawTree(id,this.getBounds().width / 2,20);
      Animation.run(ANIMATION_TIME);
      getNode(id).unhighlight();
      currentPositionInLevel.clear();
    }
 else {
      deleteAll(id);
      setLevelLimits(id);
      rootVisibleNodeNumber=id;
      drawTree(id,this.getBounds().width / 2,20);
      getNode(id).unhighlight();
      currentPositionInLevel.clear();
    }
  }
 else   if (draw_mode == CONSTANT_DRAWMODE_RADIAL) {
    if (animation_mode == CONSTANT_ANIMATION_SLOW) {
      rootVisibleNodeNumber=id;
      deleteAll(id);
      preDrawRadial(id);
      this.redraw();
      this.getLightweightSystem().getUpdateManager().performUpdate();
      Animation.markBegin();
      nodeMap.get(id).setLocation(this.getBounds().width / 2,this.getBounds().height / 2);
      drawRadial(id);
      Animation.run(ANIMATION_TIME);
      CallgraphView.maximizeOrRefresh(false);
    }
 else {
      deleteAll(id);
      drawRadial(id);
    }
  }
 else   if (draw_mode == CONSTANT_DRAWMODE_BOX) {
    rootVisibleNodeNumber=id;
    if (animation_mode == CONSTANT_ANIMATION_SLOW) {
      if (nodeMap.get(id) == null)       nodeMap.put(id,getData(id).makeNode(this));
      Animation.markBegin();
      moveAllNodesTo(nodeMap.get(id).getLocation().x,nodeMap.get(id).getLocation().y);
      Animation.run(ANIMATION_TIME);
      deleteAll(id);
      drawBox(id,0,0);
    }
 else {
      if (nodeMap.get(id) == null)       nodeMap.put(id,getData(id).makeNode(this));
      deleteAll(id);
      drawBox(id,0,0);
    }
  }
 else   if (draw_mode == CONSTANT_DRAWMODE_AGGREGATE) {
    rootVisibleNodeNumber=getFirstUsefulNode();
    deleteAll(-1);
    drawAggregateView();
  }
  if (getNode(id) != null)   getNode(id).unhighlight();
  clearSelection();
}","/** 
 * Draws with the given modes.
 * @param drawMode
 * @param animationMode
 * @param id
 */
public void draw(int drawMode,int animationMode,int id){
  setDrawMode(drawMode);
  setAnimationMode(animationMode);
  this.clearSelection();
  this.setRedraw(false);
  if (draw_mode == CONSTANT_DRAWMODE_RADIAL) {
    GridData gd=(GridData)thumbCanvas.getLayoutData();
    gd.exclude=true;
    thumbCanvas.setLayoutData(gd);
    thumbCanvas.setVisible(false);
    CallgraphView.layout();
    gd=(GridData)treeComp.getLayoutData();
    gd.exclude=false;
    treeComp.setLayoutData(gd);
    treeComp.setVisible(true);
    treeViewer.collapseToLevel(getData(id),1);
    treeViewer.expandToLevel(getData(id),1);
  }
 else   if (draw_mode == CONSTANT_DRAWMODE_AGGREGATE) {
    GridData gd=(GridData)treeComp.getLayoutData();
    gd.exclude=true;
    treeComp.setLayoutData(gd);
    treeComp.setVisible(false);
    CallgraphView.layout();
    gd=(GridData)thumbCanvas.getLayoutData();
    gd.exclude=true;
    thumbCanvas.setLayoutData(gd);
    thumbCanvas.setVisible(false);
  }
 else {
    GridData gd=(GridData)treeComp.getLayoutData();
    gd.exclude=true;
    treeComp.setLayoutData(gd);
    treeComp.setVisible(false);
    CallgraphView.layout();
    gd=(GridData)thumbCanvas.getLayoutData();
    gd.exclude=true;
    thumbCanvas.setLayoutData(gd);
    thumbCanvas.setVisible(true);
    thumbCanvas.setBackground(this.getBackground());
  }
  this.setRedraw(true);
  if (draw_mode == CONSTANT_DRAWMODE_TREE) {
    if (animation_mode == CONSTANT_ANIMATION_SLOW) {
      if (nodeMap.get(id) == null)       nodeMap.put(id,getData(id).makeNode(this));
      int tempX=nodeMap.get(id).getLocation().x;
      int tempY=nodeMap.get(id).getLocation().y;
      Animation.markBegin();
      moveAllNodesTo(tempX,tempY);
      Animation.run(ANIMATION_TIME);
      deleteAll(id);
      setLevelLimits(id);
      rootVisibleNodeNumber=id;
      drawTree(id,this.getBounds().width / 2,20);
      currentPositionInLevel.clear();
      this.update();
      Animation.markBegin();
      drawTree(id,this.getBounds().width / 2,20);
      Animation.run(ANIMATION_TIME);
      getNode(id).unhighlight();
      currentPositionInLevel.clear();
    }
 else {
      deleteAll(id);
      setLevelLimits(id);
      rootVisibleNodeNumber=id;
      drawTree(id,this.getBounds().width / 2,20);
      getNode(id).unhighlight();
      currentPositionInLevel.clear();
    }
  }
 else   if (draw_mode == CONSTANT_DRAWMODE_RADIAL) {
    if (animation_mode == CONSTANT_ANIMATION_SLOW) {
      rootVisibleNodeNumber=id;
      deleteAll(id);
      preDrawRadial(id);
      this.redraw();
      this.getLightweightSystem().getUpdateManager().performUpdate();
      Animation.markBegin();
      nodeMap.get(id).setLocation(this.getBounds().width / 2,this.getBounds().height / 2);
      drawRadial(id);
      Animation.run(ANIMATION_TIME);
      CallgraphView.maximizeOrRefresh(false);
    }
 else {
      deleteAll(id);
      drawRadial(id);
    }
  }
 else   if (draw_mode == CONSTANT_DRAWMODE_BOX) {
    rootVisibleNodeNumber=id;
    if (animation_mode == CONSTANT_ANIMATION_SLOW) {
      if (nodeMap.get(id) == null)       nodeMap.put(id,getData(id).makeNode(this));
      Animation.markBegin();
      moveAllNodesTo(nodeMap.get(id).getLocation().x,nodeMap.get(id).getLocation().y);
      Animation.run(ANIMATION_TIME);
      deleteAll(id);
      drawBox(id,0,0);
    }
 else {
      if (nodeMap.get(id) == null)       nodeMap.put(id,getData(id).makeNode(this));
      deleteAll(id);
      drawBox(id,0,0);
    }
  }
 else   if (draw_mode == CONSTANT_DRAWMODE_AGGREGATE) {
    rootVisibleNodeNumber=getFirstUsefulNode();
    deleteAll(-1);
    drawAggregateView();
  }
  if (getNode(id) != null)   getNode(id).unhighlight();
  clearSelection();
  this.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
}",0.9915309446254073
93041,"/** 
 * Draws with the given modes.
 * @param drawMode
 * @param animationMode
 * @param id
 */
public void draw(int drawMode,int animationMode,int id){
  setDrawMode(drawMode);
  setAnimationMode(animationMode);
  this.clearSelection();
  adjustCanvas(id);
  if (draw_mode == CONSTANT_DRAWMODE_TREE) {
    if (animation_mode == CONSTANT_ANIMATION_SLOW) {
      if (nodeMap.get(id) == null)       nodeMap.put(id,getData(id).makeNode(this));
      int tempX=nodeMap.get(id).getLocation().x;
      int tempY=nodeMap.get(id).getLocation().y;
      Animation.markBegin();
      moveAllNodesTo(tempX,tempY);
      Animation.run(ANIMATION_TIME);
      deleteAll(id);
      setLevelLimits(id);
      rootVisibleNodeNumber=id;
      drawTree(id,this.getBounds().width / 2,20);
      currentPositionInLevel.clear();
      this.update();
      Animation.markBegin();
      drawTree(id,this.getBounds().width / 2,20);
      Animation.run(ANIMATION_TIME);
      getNode(id).unhighlight();
      currentPositionInLevel.clear();
    }
 else {
      deleteAll(id);
      setLevelLimits(id);
      rootVisibleNodeNumber=id;
      drawTree(id,this.getBounds().width / 2,20);
      getNode(id).unhighlight();
      currentPositionInLevel.clear();
    }
  }
 else   if (draw_mode == CONSTANT_DRAWMODE_RADIAL) {
    if (animation_mode == CONSTANT_ANIMATION_SLOW) {
      rootVisibleNodeNumber=id;
      deleteAll(id);
      preDrawRadial(id);
      this.redraw();
      this.getLightweightSystem().getUpdateManager().performUpdate();
      Animation.markBegin();
      nodeMap.get(id).setLocation(this.getBounds().width / 2,this.getBounds().height / 2);
      drawRadial(id);
      Animation.run(ANIMATION_TIME);
      SystemTapView.maximizeOrRefresh(false);
    }
 else {
      deleteAll(id);
      drawRadial(id);
    }
  }
 else   if (draw_mode == CONSTANT_DRAWMODE_BOX) {
    rootVisibleNodeNumber=id;
    if (animation_mode == CONSTANT_ANIMATION_SLOW) {
      if (nodeMap.get(id) == null)       nodeMap.put(id,getData(id).makeNode(this));
      Animation.markBegin();
      moveAllNodesTo(nodeMap.get(id).getLocation().x,nodeMap.get(id).getLocation().y);
      Animation.run(ANIMATION_TIME);
      deleteAll(id);
      drawBox(id,0,0);
    }
 else {
      if (nodeMap.get(id) == null)       nodeMap.put(id,getData(id).makeNode(this));
      deleteAll(id);
      drawBox(id,0,0);
    }
  }
 else   if (draw_mode == CONSTANT_DRAWMODE_AGGREGATE) {
    rootVisibleNodeNumber=getFirstUsefulNode();
    deleteAll(-1);
    drawAggregateView();
  }
  if (getNode(id) != null)   getNode(id).unhighlight();
  clearSelection();
}","/** 
 * Draws with the given modes.
 * @param drawMode
 * @param animationMode
 * @param id
 */
public void draw(int drawMode,int animationMode,int id){
  setDrawMode(drawMode);
  setAnimationMode(animationMode);
  this.clearSelection();
  this.setRedraw(false);
  if (draw_mode == CONSTANT_DRAWMODE_RADIAL) {
    GridData gd=(GridData)thumbCanvas.getLayoutData();
    gd.exclude=true;
    thumbCanvas.setLayoutData(gd);
    thumbCanvas.setVisible(false);
    SystemTapView.layout();
    gd=(GridData)treeComp.getLayoutData();
    gd.exclude=false;
    treeComp.setLayoutData(gd);
    treeComp.setVisible(true);
    treeViewer.collapseToLevel(getData(id),1);
    treeViewer.expandToLevel(getData(id),1);
  }
 else   if (draw_mode == CONSTANT_DRAWMODE_AGGREGATE) {
    GridData gd=(GridData)treeComp.getLayoutData();
    gd.exclude=true;
    treeComp.setLayoutData(gd);
    treeComp.setVisible(false);
    SystemTapView.layout();
    gd=(GridData)thumbCanvas.getLayoutData();
    gd.exclude=true;
    thumbCanvas.setLayoutData(gd);
    thumbCanvas.setVisible(false);
  }
 else {
    GridData gd=(GridData)treeComp.getLayoutData();
    gd.exclude=true;
    treeComp.setLayoutData(gd);
    treeComp.setVisible(false);
    SystemTapView.layout();
    gd=(GridData)thumbCanvas.getLayoutData();
    gd.exclude=true;
    thumbCanvas.setLayoutData(gd);
    thumbCanvas.setVisible(true);
    thumbCanvas.setBackground(this.getBackground());
  }
  this.setRedraw(true);
  if (draw_mode == CONSTANT_DRAWMODE_TREE) {
    if (animation_mode == CONSTANT_ANIMATION_SLOW) {
      if (nodeMap.get(id) == null)       nodeMap.put(id,getData(id).makeNode(this));
      int tempX=nodeMap.get(id).getLocation().x;
      int tempY=nodeMap.get(id).getLocation().y;
      Animation.markBegin();
      moveAllNodesTo(tempX,tempY);
      Animation.run(ANIMATION_TIME);
      deleteAll(id);
      setLevelLimits(id);
      rootVisibleNodeNumber=id;
      drawTree(id,this.getBounds().width / 2,20);
      currentPositionInLevel.clear();
      this.update();
      Animation.markBegin();
      drawTree(id,this.getBounds().width / 2,20);
      Animation.run(ANIMATION_TIME);
      getNode(id).unhighlight();
      currentPositionInLevel.clear();
    }
 else {
      deleteAll(id);
      setLevelLimits(id);
      rootVisibleNodeNumber=id;
      drawTree(id,this.getBounds().width / 2,20);
      getNode(id).unhighlight();
      currentPositionInLevel.clear();
    }
  }
 else   if (draw_mode == CONSTANT_DRAWMODE_RADIAL) {
    if (animation_mode == CONSTANT_ANIMATION_SLOW) {
      rootVisibleNodeNumber=id;
      deleteAll(id);
      preDrawRadial(id);
      this.redraw();
      this.getLightweightSystem().getUpdateManager().performUpdate();
      Animation.markBegin();
      nodeMap.get(id).setLocation(this.getBounds().width / 2,this.getBounds().height / 2);
      drawRadial(id);
      Animation.run(ANIMATION_TIME);
      SystemTapView.maximizeOrRefresh(false);
    }
 else {
      deleteAll(id);
      drawRadial(id);
    }
  }
 else   if (draw_mode == CONSTANT_DRAWMODE_BOX) {
    rootVisibleNodeNumber=id;
    if (animation_mode == CONSTANT_ANIMATION_SLOW) {
      if (nodeMap.get(id) == null)       nodeMap.put(id,getData(id).makeNode(this));
      Animation.markBegin();
      moveAllNodesTo(nodeMap.get(id).getLocation().x,nodeMap.get(id).getLocation().y);
      Animation.run(ANIMATION_TIME);
      deleteAll(id);
      drawBox(id,0,0);
    }
 else {
      if (nodeMap.get(id) == null)       nodeMap.put(id,getData(id).makeNode(this));
      deleteAll(id);
      drawBox(id,0,0);
    }
  }
 else   if (draw_mode == CONSTANT_DRAWMODE_AGGREGATE) {
    rootVisibleNodeNumber=getFirstUsefulNode();
    deleteAll(-1);
    drawAggregateView();
  }
  if (getNode(id) != null)   getNode(id).unhighlight();
  clearSelection();
}",0.8096129837702871
93042,"private String getLicense(){
  String license=valueNoFoundMessage;
  URLEntryModel licenseModel=featureModel.getLicenseModel();
  if (licenseModel != null) {
    String urlString=resolveFeatureProperties(licenseModel.getURLString());
    String urlAnotation=resolveFeatureProperties(licenseModel.getAnnotation());
    if (urlString.indexOf(""String_Node_Str"") > -1 || urlAnotation.indexOf(""String_Node_Str"")) {
      license=""String_Node_Str"";
    }
  }
  return license;
}","private String getLicense(){
  String license=valueNoFoundMessage;
  URLEntryModel licenseModel=featureModel.getLicenseModel();
  if (licenseModel != null) {
    String urlString=resolveFeatureProperties(licenseModel.getURLString());
    String urlAnotation=resolveFeatureProperties(licenseModel.getAnnotation());
    if (urlString.indexOf(""String_Node_Str"") > -1 || urlAnotation.indexOf(""String_Node_Str"") > -1) {
      license=""String_Node_Str"";
    }
  }
  return license;
}",0.9947312961011592
93043,"/** 
 * Called when this app is activated by CicadaService.  onDraw() will be triggered at the conlusion of this method.
 * @param mode the mode that the app is being activated in
 */
public abstract void onActivate(AppType mode);","/** 
 * Called when this app is activated by CicadaService.  onDraw() will be triggered at the conclusion of this method.
 * @param mode the mode that the app is being activated in
 */
public abstract void onActivate(AppType mode);",0.9978308026030368
93044,"@Override public void run(){
  try {
    Date since=null;
    if (lookback > 0) {
      Date now=new Date();
      since=new Date(now.getTime() - lookback);
    }
    List<RecordSource> recordSourceList=new ResourceManager().loadRecordSources();
    if (""String_Node_Str"".equalsIgnoreCase(method)) {
      while (true) {
        work(recordSourceList,since);
        Thread.sleep(interval);
      }
    }
 else {
      DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
      while (true) {
        String currentTime=dateFormat.format(new Date());
        if (currentTime.equalsIgnoreCase(timeOfDay)) {
          work(recordSourceList,since);
        }
      }
    }
  }
 catch (  InterruptedException ex) {
    Mediator.getLogger(Daemon.class.getName()).log(Level.SEVERE,null,ex);
    System.exit(1);
  }
catch (  BadRecordSourceException ex) {
    Mediator.getLogger(Daemon.class.getName()).log(Level.SEVERE,null,ex);
    System.exit(1);
  }
catch (  ParserConfigurationException ex) {
    Mediator.getLogger(Daemon.class.getName()).log(Level.SEVERE,null,ex);
    System.exit(1);
  }
catch (  SAXException ex) {
    Mediator.getLogger(Daemon.class.getName()).log(Level.SEVERE,null,ex);
    System.exit(1);
  }
catch (  IOException ex) {
    Mediator.getLogger(Daemon.class.getName()).log(Level.SEVERE,null,ex);
    System.exit(1);
  }
catch (  SQLException ex) {
    Mediator.getLogger(Daemon.class.getName()).log(Level.SEVERE,null,ex);
    System.exit(1);
  }
}","@Override public void run(){
  try {
    Date since=null;
    if (lookback > 0) {
      Date now=new Date();
      since=new Date(now.getTime() - lookback);
    }
    List<RecordSource> recordSourceList=new ResourceManager().loadRecordSources();
    if (""String_Node_Str"".equalsIgnoreCase(method)) {
      while (true) {
        work(recordSourceList,since);
        Thread.sleep(interval);
      }
    }
 else {
      DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
      while (true) {
        String currentTime=dateFormat.format(new Date());
        if (currentTime.equalsIgnoreCase(timeOfDay)) {
          work(recordSourceList,since);
        }
      }
    }
  }
 catch (  InterruptedException ex) {
    Mediator.getLogger(Daemon.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  BadRecordSourceException ex) {
    Mediator.getLogger(Daemon.class.getName()).log(Level.SEVERE,null,ex);
    System.exit(1);
  }
catch (  ParserConfigurationException ex) {
    Mediator.getLogger(Daemon.class.getName()).log(Level.SEVERE,null,ex);
    System.exit(1);
  }
catch (  SAXException ex) {
    Mediator.getLogger(Daemon.class.getName()).log(Level.SEVERE,null,ex);
    System.exit(1);
  }
catch (  IOException ex) {
    Mediator.getLogger(Daemon.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  SQLException ex) {
    Mediator.getLogger(Daemon.class.getName()).log(Level.SEVERE,null,ex);
  }
}",0.9792674498963372
93045,"private static void log(Level level,String msg,boolean quit,int exitCode){
  Logger.getLogger(CpadDataExtract.class.getName()).log(level,msg);
  if (quit) {
    System.exit(exitCode);
  }
}","private static void log(Level level,String msg,boolean quit,int exitCode){
  Mediator.getLogger(CpadDataExtract.class.getName()).log(level,msg);
  if (quit) {
    System.exit(exitCode);
  }
}",0.9736842105263158
93046,"public static void work(){
  OutputStreamWriter out=null;
  Connection con=null;
  Connection shadowCon=null;
  Statement stmt=null;
  Statement shadowStmt=null;
  HeaderData header=new HeaderData();
  VisitData visits[]=new VisitData[MAX_VISIT_CNT];
  for (int i=0; i < MAX_VISIT_CNT; i++) {
    visits[i]=new VisitData();
  }
  try {
    Properties sourceProps=loadProperties(""String_Node_Str"");
    Properties shadowProps=loadProperties(""String_Node_Str"");
    out=new OutputStreamWriter(new FileOutputStream(companionProps.getProperty(""String_Node_Str"")),""String_Node_Str"");
    Class.forName(sourceProps.getProperty(""String_Node_Str""));
    con=DriverManager.getConnection(sourceProps.getProperty(""String_Node_Str""));
    stmt=con.createStatement();
    Class.forName(shadowProps.getProperty(""String_Node_Str""));
    shadowCon=DriverManager.getConnection(shadowProps.getProperty(""String_Node_Str""),shadowProps.getProperty(""String_Node_Str""),shadowProps.getProperty(""String_Node_Str""));
    shadowStmt=shadowCon.createStatement();
    String tableList=""String_Node_Str"" + sourceProps.getProperty(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    if (""String_Node_Str"".equals(tableList) || tableList == null) {
      log(Level.SEVERE,""String_Node_Str"",1);
    }
    java.util.Date now=Calendar.getInstance().getTime();
    String transSince=new SimpleDateFormat(""String_Node_Str"").format(now.getTime() - new Long(companionProps.getProperty(""String_Node_Str"")) * 1000);
    if (""String_Node_Str"".equals(transSince) || transSince == null) {
      log(Level.SEVERE,""String_Node_Str"" + transSince + ""String_Node_Str"",1);
    }
    ResultSet rs=shadowStmt.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableList + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ transSince+ ""String_Node_Str"");
    ArrayList<String> shadowPids=new ArrayList<String>();
    while (rs.next()) {
      shadowPids.add(rs.getString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    }
    rs=stmt.executeQuery(""String_Node_Str"" + ""String_Node_Str"");
    ArrayList<String> cpadPids=new ArrayList<String>();
    while (rs.next()) {
      cpadPids.add(rs.getString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    }
    ArrayList<String> cpadPidsToRemove=new ArrayList<String>();
    for (int i=0; i < cpadPids.size(); i++) {
      if (!shadowPids.contains(cpadPids.get(i))) {
        cpadPidsToRemove.add(cpadPids.get(i));
      }
    }
    cpadPids.removeAll(cpadPidsToRemove);
    int recCnt=cpadPids.size();
    if (recCnt == 0) {
      log(Level.INFO,""String_Node_Str"" + transSince + ""String_Node_Str"",false);
    }
    Logger.getLogger(CpadDataExtract.class.getName()).log(Level.INFO,""String_Node_Str"",new Object[]{recCnt,recCnt == 1 ? ""String_Node_Str"" : ""String_Node_Str""});
    PreparedStatement headerStmts[]=new PreparedStatement[6];
    headerStmts[0]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    headerStmts[1]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    headerStmts[2]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    headerStmts[3]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    headerStmts[4]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    headerStmts[5]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"");
    PreparedStatement visitStmts[]=new PreparedStatement[9];
    visitStmts[0]=con.prepareStatement(""String_Node_Str"");
    visitStmts[1]=con.prepareStatement(""String_Node_Str"" + MAX_VISIT_CNT + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    visitStmts[2]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    visitStmts[3]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    visitStmts[4]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    visitStmts[5]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    visitStmts[6]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    visitStmts[7]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    visitStmts[8]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    int cnt=0;
    for (int a=0; a < cpadPids.size(); a++) {
      int pid=Integer.parseInt(cpadPids.get(a));
      header.reset();
      ExtractHeaderData(headerStmts,pid,header,companionProps);
      for (int i=0; i < MAX_VISIT_CNT; i++) {
        visits[i].reset();
      }
      ExtractVisitData(visitStmts,pid,visits);
      String finalCsv=""String_Node_Str"";
      finalCsv+=header.printHeaderDelim(""String_Node_Str"");
      finalCsv+=""String_Node_Str"";
      for (int i=0; i < FILLER_CNT; i++) {
        finalCsv+=""String_Node_Str"";
      }
      for (int i=0; i < visits.length; i++) {
        finalCsv+=visits[i].printHeaderDelim(""String_Node_Str"");
        if (i < visits.length - 1) {
          finalCsv+=""String_Node_Str"";
        }
      }
      out.write(finalCsv + ""String_Node_Str"");
      if (++cnt % 100 == 0) {
        Logger.getLogger(CpadDataExtract.class.getName()).log(Level.INFO,""String_Node_Str"",cnt);
      }
    }
    if (""String_Node_Str"".equalsIgnoreCase(companionProps.getProperty(""String_Node_Str""))) {
      if (!""String_Node_Str"".equals(companionProps.getProperty(""String_Node_Str"")) && companionProps.getProperty(""String_Node_Str"") != null) {
        if (sendMessage(companionProps.getProperty(""String_Node_Str""),companionProps.getProperty(""String_Node_Str""))) {
          Logger.getLogger(CpadDataExtract.class.getName()).log(Level.INFO,""String_Node_Str"");
        }
 else {
          Logger.getLogger(CpadDataExtract.class.getName()).log(Level.INFO,""String_Node_Str"");
        }
      }
 else {
        Logger.getLogger(CpadDataExtract.class.getName()).log(Level.INFO,""String_Node_Str"");
      }
    }
    Logger.getLogger(CpadDataExtract.class.getName()).log(Level.INFO,""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    System.out.println(e.toString());
  }
catch (  SQLException e) {
    System.out.println(e.toString());
  }
catch (  IOException e) {
    System.out.println(e.toString());
  }
 finally {
    try {
      if (out != null) {
        out.close();
      }
      if (con != null) {
        con.close();
      }
      if (stmt != null) {
        stmt.close();
      }
      if (shadowCon != null) {
        shadowCon.close();
      }
      if (shadowStmt != null) {
        shadowStmt.close();
      }
    }
 catch (    Exception ex) {
      Logger.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex.getMessage());
    }
  }
}","public static void work(){
  OutputStreamWriter out=null;
  Connection con=null;
  Connection shadowCon=null;
  Statement stmt=null;
  Statement shadowStmt=null;
  HeaderData header=new HeaderData();
  VisitData visits[]=new VisitData[MAX_VISIT_CNT];
  for (int i=0; i < MAX_VISIT_CNT; i++) {
    visits[i]=new VisitData();
  }
  try {
    Properties sourceProps=loadProperties(""String_Node_Str"");
    Properties shadowProps=loadProperties(""String_Node_Str"");
    out=new OutputStreamWriter(new FileOutputStream(companionProps.getProperty(""String_Node_Str"")),""String_Node_Str"");
    Class.forName(sourceProps.getProperty(""String_Node_Str""));
    con=DriverManager.getConnection(sourceProps.getProperty(""String_Node_Str""));
    stmt=con.createStatement();
    Class.forName(shadowProps.getProperty(""String_Node_Str""));
    shadowCon=DriverManager.getConnection(shadowProps.getProperty(""String_Node_Str""),shadowProps.getProperty(""String_Node_Str""),shadowProps.getProperty(""String_Node_Str""));
    shadowStmt=shadowCon.createStatement();
    String tableList=""String_Node_Str"" + sourceProps.getProperty(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    if (""String_Node_Str"".equals(tableList) || tableList == null) {
      log(Level.SEVERE,""String_Node_Str"",1);
    }
    java.util.Date now=Calendar.getInstance().getTime();
    String transSince=new SimpleDateFormat(""String_Node_Str"").format(now.getTime() - new Long(companionProps.getProperty(""String_Node_Str"")) * 1000);
    if (""String_Node_Str"".equals(transSince) || transSince == null) {
      log(Level.SEVERE,""String_Node_Str"" + transSince + ""String_Node_Str"",1);
    }
    ResultSet rs=shadowStmt.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableList + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ transSince+ ""String_Node_Str"");
    ArrayList<String> shadowPids=new ArrayList<String>();
    while (rs.next()) {
      shadowPids.add(rs.getString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    }
    rs=stmt.executeQuery(""String_Node_Str"" + ""String_Node_Str"");
    ArrayList<String> cpadPids=new ArrayList<String>();
    while (rs.next()) {
      cpadPids.add(rs.getString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    }
    ArrayList<String> cpadPidsToRemove=new ArrayList<String>();
    for (int i=0; i < cpadPids.size(); i++) {
      if (!shadowPids.contains(cpadPids.get(i))) {
        cpadPidsToRemove.add(cpadPids.get(i));
      }
    }
    cpadPids.removeAll(cpadPidsToRemove);
    int recCnt=cpadPids.size();
    if (recCnt == 0) {
      log(Level.INFO,""String_Node_Str"" + transSince + ""String_Node_Str"",false);
    }
    Mediator.getLogger(CpadDataExtract.class.getName()).log(Level.INFO,""String_Node_Str"",new Object[]{recCnt,recCnt == 1 ? ""String_Node_Str"" : ""String_Node_Str""});
    PreparedStatement headerStmts[]=new PreparedStatement[6];
    headerStmts[0]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    headerStmts[1]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    headerStmts[2]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    headerStmts[3]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    headerStmts[4]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    headerStmts[5]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"");
    PreparedStatement visitStmts[]=new PreparedStatement[9];
    visitStmts[0]=con.prepareStatement(""String_Node_Str"");
    visitStmts[1]=con.prepareStatement(""String_Node_Str"" + MAX_VISIT_CNT + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    visitStmts[2]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    visitStmts[3]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    visitStmts[4]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    visitStmts[5]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    visitStmts[6]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    visitStmts[7]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    visitStmts[8]=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    int cnt=0;
    for (int a=0; a < cpadPids.size(); a++) {
      int pid=Integer.parseInt(cpadPids.get(a));
      header.reset();
      ExtractHeaderData(headerStmts,pid,header,companionProps);
      for (int i=0; i < MAX_VISIT_CNT; i++) {
        visits[i].reset();
      }
      ExtractVisitData(visitStmts,pid,visits);
      String finalCsv=""String_Node_Str"";
      finalCsv+=header.printHeaderDelim(""String_Node_Str"");
      finalCsv+=""String_Node_Str"";
      for (int i=0; i < FILLER_CNT; i++) {
        finalCsv+=""String_Node_Str"";
      }
      for (int i=0; i < visits.length; i++) {
        finalCsv+=visits[i].printHeaderDelim(""String_Node_Str"");
        if (i < visits.length - 1) {
          finalCsv+=""String_Node_Str"";
        }
      }
      out.write(finalCsv + ""String_Node_Str"");
      if (++cnt % 100 == 0) {
        Mediator.getLogger(CpadDataExtract.class.getName()).log(Level.INFO,""String_Node_Str"",cnt);
      }
    }
    if (""String_Node_Str"".equalsIgnoreCase(companionProps.getProperty(""String_Node_Str""))) {
      if (!""String_Node_Str"".equals(companionProps.getProperty(""String_Node_Str"")) && companionProps.getProperty(""String_Node_Str"") != null) {
        if (sendMessage(companionProps.getProperty(""String_Node_Str""),companionProps.getProperty(""String_Node_Str""))) {
          Mediator.getLogger(CpadDataExtract.class.getName()).log(Level.INFO,""String_Node_Str"");
        }
 else {
          Mediator.getLogger(CpadDataExtract.class.getName()).log(Level.INFO,""String_Node_Str"");
        }
      }
 else {
        Mediator.getLogger(CpadDataExtract.class.getName()).log(Level.INFO,""String_Node_Str"");
      }
    }
    Mediator.getLogger(CpadDataExtract.class.getName()).log(Level.INFO,""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    System.out.println(e.toString());
  }
catch (  SQLException e) {
    System.out.println(e.toString());
  }
catch (  IOException e) {
    System.out.println(e.toString());
  }
 finally {
    try {
      if (out != null) {
        out.close();
      }
      if (con != null) {
        con.close();
      }
      if (stmt != null) {
        stmt.close();
      }
      if (shadowCon != null) {
        shadowCon.close();
      }
      if (shadowStmt != null) {
        shadowStmt.close();
      }
    }
 catch (    Exception ex) {
      Mediator.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex.getMessage());
    }
  }
}",0.994614694191563
93047,"private static boolean sendMessage(String url,String filename){
  int returnStatus=HttpStatus.SC_CREATED;
  HttpClient httpclient=new HttpClient();
  HttpConnectionManager connectionManager=httpclient.getHttpConnectionManager();
  connectionManager.getParams().setSoTimeout(120000);
  PostMethod httpPost=new PostMethod(url);
  RequestEntity requestEntity=null;
  try {
    FileInputStream message=new FileInputStream(filename);
    Base64InputStream message64=new Base64InputStream(message,true,-1,null);
    requestEntity=new InputStreamRequestEntity(message64,""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    Logger.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
  }
  httpPost.setRequestEntity(requestEntity);
  try {
    httpclient.executeMethod(httpPost);
    returnStatus=httpPost.getStatusCode();
  }
 catch (  SocketTimeoutException e) {
    returnStatus=HttpStatus.SC_REQUEST_TIMEOUT;
    Logger.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
  }
catch (  HttpException e) {
    returnStatus=HttpStatus.SC_INTERNAL_SERVER_ERROR;
    Logger.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
  }
catch (  ConnectException e) {
    returnStatus=HttpStatus.SC_SERVICE_UNAVAILABLE;
    Logger.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
  }
catch (  UnknownHostException e) {
    returnStatus=HttpStatus.SC_NOT_FOUND;
    Logger.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
  }
catch (  IOException e) {
    returnStatus=HttpStatus.SC_GATEWAY_TIMEOUT;
    Logger.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
  }
 finally {
    httpPost.releaseConnection();
  }
  return returnStatus == HttpStatus.SC_OK;
}","private static boolean sendMessage(String url,String filename){
  int returnStatus=HttpStatus.SC_CREATED;
  HttpClient httpclient=new HttpClient();
  HttpConnectionManager connectionManager=httpclient.getHttpConnectionManager();
  connectionManager.getParams().setSoTimeout(120000);
  PostMethod httpPost=new PostMethod(url);
  RequestEntity requestEntity=null;
  try {
    FileInputStream message=new FileInputStream(filename);
    Base64InputStream message64=new Base64InputStream(message,true,-1,null);
    requestEntity=new InputStreamRequestEntity(message64,""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    Mediator.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
  }
  httpPost.setRequestEntity(requestEntity);
  try {
    httpclient.executeMethod(httpPost);
    returnStatus=httpPost.getStatusCode();
  }
 catch (  SocketTimeoutException e) {
    returnStatus=HttpStatus.SC_REQUEST_TIMEOUT;
    Mediator.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
  }
catch (  HttpException e) {
    returnStatus=HttpStatus.SC_INTERNAL_SERVER_ERROR;
    Mediator.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
  }
catch (  ConnectException e) {
    returnStatus=HttpStatus.SC_SERVICE_UNAVAILABLE;
    Mediator.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
  }
catch (  UnknownHostException e) {
    returnStatus=HttpStatus.SC_NOT_FOUND;
    Mediator.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
  }
catch (  IOException e) {
    returnStatus=HttpStatus.SC_GATEWAY_TIMEOUT;
    Mediator.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
  }
 finally {
    httpPost.releaseConnection();
  }
  return returnStatus == HttpStatus.SC_OK;
}",0.980498374864572
93048,"public static void main(String[] args){
  try {
    companionProps=loadProperties(""String_Node_Str"");
    String method=companionProps.getProperty(""String_Node_Str"");
    int interval=Integer.parseInt(companionProps.getProperty(""String_Node_Str""));
    String timeOfDay=companionProps.getProperty(""String_Node_Str"");
    if (""String_Node_Str"".equalsIgnoreCase(""String_Node_Str"")) {
      while (true) {
        CpadDataExtract.work();
        Thread.sleep(interval);
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(""String_Node_Str"")) {
      DateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
      String currentTime=sdf.format(new java.util.Date());
      while (true) {
        if (currentTime.equalsIgnoreCase(timeOfDay)) {
          CpadDataExtract.work();
        }
      }
    }
 else {
      log(Level.SEVERE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",1);
    }
  }
 catch (  InterruptedException ex) {
    Logger.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  FileNotFoundException ex) {
    Logger.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,null,ex);
  }
}","public static void main(String[] args){
  try {
    new Mediator();
    companionProps=loadProperties(""String_Node_Str"");
    String method=companionProps.getProperty(""String_Node_Str"");
    int interval=Integer.parseInt(companionProps.getProperty(""String_Node_Str""));
    String timeOfDay=companionProps.getProperty(""String_Node_Str"");
    if (""String_Node_Str"".equalsIgnoreCase(method)) {
      while (true) {
        CpadDataExtract.work();
        Thread.sleep(interval);
      }
    }
 else {
      DateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
      String currentTime=sdf.format(new java.util.Date());
      while (true) {
        if (currentTime.equalsIgnoreCase(timeOfDay)) {
          CpadDataExtract.work();
        }
      }
    }
  }
 catch (  InterruptedException ex) {
    Mediator.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  FileNotFoundException ex) {
    Mediator.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,null,ex);
  }
}",0.7006015733456733
93049,"private static Properties loadProperties(String propertiesFile) throws FileNotFoundException {
  try {
    Properties properties=new Properties();
    File propFile=new File(propertiesFile);
    String propFilePath=propFile.getAbsolutePath();
    FileInputStream fis=new FileInputStream(propFilePath);
    properties.load(fis);
    return properties;
  }
 catch (  IOException ex) {
    Logger.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,""String_Node_Str"" + propertiesFile,ex);
    throw new FileNotFoundException(""String_Node_Str"" + propertiesFile);
  }
}","private static Properties loadProperties(String propertiesFile) throws FileNotFoundException {
  try {
    Properties properties=new Properties();
    File propFile=new File(propertiesFile);
    String propFilePath=propFile.getAbsolutePath();
    FileInputStream fis=new FileInputStream(propFilePath);
    properties.load(fis);
    return properties;
  }
 catch (  IOException ex) {
    Mediator.getLogger(CpadDataExtract.class.getName()).log(Level.SEVERE,""String_Node_Str"" + propertiesFile,ex);
    throw new FileNotFoundException(""String_Node_Str"" + propertiesFile);
  }
}",0.9895287958115184
93050,"private void minimizeToTray(){
  if (!SystemTray.isSupported()) {
    System.out.println(""String_Node_Str"");
    return;
  }
  final PopupMenu popup=new PopupMenu();
  final TrayIcon trayIcon=new TrayIcon(Toolkit.getDefaultToolkit().getImage(""String_Node_Str""),""String_Node_Str"",popup);
  final SystemTray tray=SystemTray.getSystemTray();
  MenuItem showItem=new MenuItem(""String_Node_Str"");
  MenuItem hideItem=new MenuItem(""String_Node_Str"");
  MenuItem exitItem=new MenuItem(""String_Node_Str"");
  showItem.addActionListener(showListener);
  hideItem.addActionListener(hideListener);
  exitItem.addActionListener(exitListener);
  popup.add(showItem);
  popup.addSeparator();
  popup.add(hideItem);
  popup.addSeparator();
  popup.add(exitItem);
  trayIcon.setPopupMenu(popup);
  try {
    tray.add(trayIcon);
  }
 catch (  AWTException ex) {
    System.out.println(ex.toString() + ""String_Node_Str"");
  }
}","private void minimizeToTray(){
  if (!SystemTray.isSupported()) {
    Mediator.getLogger(DaemonManager.class.getName()).log(Level.INFO,""String_Node_Str"");
    return;
  }
  final PopupMenu popup=new PopupMenu();
  final TrayIcon trayIcon=new TrayIcon(Toolkit.getDefaultToolkit().getImage(""String_Node_Str""),""String_Node_Str"",popup);
  final SystemTray tray=SystemTray.getSystemTray();
  MenuItem showItem=new MenuItem(""String_Node_Str"");
  MenuItem hideItem=new MenuItem(""String_Node_Str"");
  MenuItem exitItem=new MenuItem(""String_Node_Str"");
  showItem.addActionListener(showListener);
  hideItem.addActionListener(hideListener);
  exitItem.addActionListener(exitListener);
  popup.add(showItem);
  popup.addSeparator();
  popup.add(hideItem);
  popup.addSeparator();
  popup.add(exitItem);
  trayIcon.setPopupMenu(popup);
  try {
    tray.add(trayIcon);
  }
 catch (  AWTException ex) {
    Mediator.getLogger(DaemonManager.class.getName()).log(Level.INFO,null,ex);
  }
}",0.8916046758767269
93051,"public ShadowResultSet mine(Table table) throws InaccessibleConfigurationFileException, SQLException, DriverNotFoundException {
  ShadowResultSet srs=null;
  try {
    String sql=""String_Node_Str"";
    for (    Column c : table.getColumnList()) {
      sql+=c.getId() + ""String_Node_Str"";
    }
    sql=sql.substring(0,sql.length() - 2);
    sql+=""String_Node_Str"";
    ResultSet rs=statement.executeQuery(sql);
    Mediator.getLogger(ShadowDataMiner.class.getName()).log(Level.FINEST,sql);
    srs=new ShadowResultSet(rs);
  }
  finally {
  }
  return srs;
}","public ShadowResultSet mine(Table table) throws InaccessibleConfigurationFileException, SQLException, DriverNotFoundException {
  ShadowResultSet srs=null;
  try {
    String sql=""String_Node_Str"";
    for (    Column c : table.getColumnList()) {
      sql+=c.getId() + ""String_Node_Str"";
    }
    sql=sql.substring(0,sql.length() - 2);
    sql+=""String_Node_Str"";
    Mediator.getLogger(ShadowDataMiner.class.getName()).log(Level.FINEST,sql);
    ResultSet rs=statement.executeQuery(sql);
    srs=new ShadowResultSet(rs);
  }
  finally {
  }
  return srs;
}",0.9177101967799642
93052,"/** 
 * Gets all the rows from a source table, returned as a ResultSet
 * @param table
 * @return
 * @throws SQLException 
 */
public SourceResultSet mine(Table table) throws SQLException {
  SourceResultSet srs=null;
  try {
    String compositePK=getQueryCustomizer().buildCompositePrimaryKey(table);
    String asciiCompositePK=getQueryCustomizer().buildAsciiCompositePrimaryKey(compositePK);
    String sql=""String_Node_Str"" + asciiCompositePK + ""String_Node_Str""+ compositePK+ ""String_Node_Str"";
    String prefix=getQueryCustomizer().getOpenningSafetyPad();
    String suffix=getQueryCustomizer().getClosingSafetyPad();
    for (    Column column : table.getColumnList()) {
      sql+=""String_Node_Str"" + prefix + column.getName()+ suffix+ ""String_Node_Str""+ column.getId();
    }
    sql+=""String_Node_Str"" + prefix + table.getName()+ suffix+ ""String_Node_Str""+ compositePK+ ""String_Node_Str"";
    ResultSet rs=statement.executeQuery(sql);
    Mediator.getLogger(SourceDataMiner.class.getName()).log(Level.FINEST,sql);
    srs=new SourceResultSet(rs);
  }
  finally {
  }
  return srs;
}","/** 
 * Gets all the rows from a source table, returned as a ResultSet
 * @param table
 * @return
 * @throws SQLException
 */
public SourceResultSet mine(Table table) throws SQLException {
  SourceResultSet srs=null;
  try {
    String compositePK=getQueryCustomizer().buildCompositePrimaryKey(table);
    String asciiCompositePK=getQueryCustomizer().buildAsciiCompositePrimaryKey(compositePK);
    String sql=""String_Node_Str"" + asciiCompositePK + ""String_Node_Str""+ compositePK+ ""String_Node_Str"";
    String prefix=getQueryCustomizer().getOpenningSafetyPad();
    String suffix=getQueryCustomizer().getClosingSafetyPad();
    for (    Column column : table.getColumnList()) {
      sql+=""String_Node_Str"" + prefix + column.getName()+ suffix+ ""String_Node_Str""+ column.getId();
    }
    sql+=""String_Node_Str"" + prefix + table.getName()+ suffix+ ""String_Node_Str""+ compositePK+ ""String_Node_Str"";
    Mediator.getLogger(SourceDataMiner.class.getName()).log(Level.FINEST,sql);
    ResultSet rs=statement.executeQuery(sql);
    srs=new SourceResultSet(rs);
  }
  finally {
  }
  return srs;
}",0.9565614997713764
93053,"public void synchronize() throws InaccessibleConfigurationFileException, DriverNotFoundException, SQLException {
  try {
    List<SchemaTransaction> schemaTransactionList=new SchemaSynchronizer().generate();
    connectToShadow();
    connection.setAutoCommit(false);
    Statement statement=connection.createStatement();
    for (    SchemaTransaction schemaTransaction : schemaTransactionList) {
      Mediator.getLogger(SchemaSynchronizer.class.getName()).log(Level.FINEST,TransactionConverter.convertToSQL(schemaTransaction));
      System.out.println(TransactionConverter.convertToSQL(schemaTransaction));
      if (statement.executeUpdate(TransactionConverter.convertToSQL(schemaTransaction),Statement.RETURN_GENERATED_KEYS) == 1) {
        ResultSet rs=statement.getGeneratedKeys();
        if (rs.next()) {
          if (schemaTransaction.getTarget().getClass() == Database.class) {
            ((Database)schemaTransaction.getTarget()).setId(rs.getInt(1));
          }
 else           if (schemaTransaction.getTarget().getClass() == Table.class) {
            ((Table)schemaTransaction.getTarget()).setId(rs.getInt(1));
          }
 else           if (schemaTransaction.getTarget().getClass() == Column.class) {
            ((Column)schemaTransaction.getTarget()).setId(rs.getInt(1));
          }
        }
      }
    }
    connection.commit();
    statement.close();
  }
  finally {
    disconnectFromShadow();
  }
}","public void synchronize() throws InaccessibleConfigurationFileException, DriverNotFoundException, SQLException {
  try {
    List<SchemaTransaction> schemaTransactionList=new SchemaSynchronizer().generate();
    connectToShadow();
    connection.setAutoCommit(false);
    Statement statement=connection.createStatement();
    for (    SchemaTransaction schemaTransaction : schemaTransactionList) {
      Mediator.getLogger(SchemaSynchronizer.class.getName()).log(Level.FINEST,TransactionConverter.convertToSQL(schemaTransaction));
      if (statement.executeUpdate(TransactionConverter.convertToSQL(schemaTransaction),Statement.RETURN_GENERATED_KEYS) == 1) {
        ResultSet rs=statement.getGeneratedKeys();
        if (rs.next()) {
          if (schemaTransaction.getTarget().getClass() == Database.class) {
            ((Database)schemaTransaction.getTarget()).setId(rs.getInt(1));
          }
 else           if (schemaTransaction.getTarget().getClass() == Table.class) {
            ((Table)schemaTransaction.getTarget()).setId(rs.getInt(1));
          }
 else           if (schemaTransaction.getTarget().getClass() == Column.class) {
            ((Column)schemaTransaction.getTarget()).setId(rs.getInt(1));
          }
        }
      }
    }
    connection.commit();
    statement.close();
  }
  finally {
    disconnectFromShadow();
  }
}",0.9711607786589762
93054,"private void populateTableList(Database db,boolean replicable) throws SQLException {
  Statement statement=connection.createStatement();
  String sql=""String_Node_Str"";
  ResultSet rs=statement.executeQuery(sql);
  Mediator.getLogger(ShadowSchemaMiner.class.getName()).log(Level.FINEST,sql);
  while (rs.next()) {
    Table table=new Table(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""));
    table.setDatabase(db);
    if (replicable) {
      populateColumnList(table);
    }
 else {
      populateReplicableColumnList(table);
    }
    db.getTableList().add(table);
  }
  rs.close();
  statement.close();
}","private void populateTableList(Database db,boolean replicable) throws SQLException {
  Statement statement=connection.createStatement();
  String sql=""String_Node_Str"" + db.getId() + ""String_Node_Str"";
  Mediator.getLogger(ShadowSchemaMiner.class.getName()).log(Level.FINEST,sql);
  ResultSet rs=statement.executeQuery(sql);
  while (rs.next()) {
    Table table=new Table(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""));
    table.setDatabase(db);
    if (replicable) {
      populateColumnList(table);
    }
 else {
      populateReplicableColumnList(table);
    }
    db.getTableList().add(table);
  }
  rs.close();
  statement.close();
}",0.9097688292319164
93055,"private Database extractDatabase() throws SQLException {
  Database db=null;
  Statement statement=connection.createStatement();
  String sql=""String_Node_Str"" + database + ""String_Node_Str"";
  ResultSet rs=statement.executeQuery(sql);
  Mediator.getLogger(ShadowSchemaMiner.class.getName()).log(Level.FINEST,sql);
  if (rs.next()) {
    db=new Database(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""));
  }
  rs.close();
  statement.close();
  return db;
}","private Database extractDatabase() throws SQLException {
  Database db=null;
  Statement statement=connection.createStatement();
  String sql=""String_Node_Str"" + database + ""String_Node_Str"";
  Mediator.getLogger(ShadowSchemaMiner.class.getName()).log(Level.FINEST,sql);
  ResultSet rs=statement.executeQuery(sql);
  if (rs.next()) {
    db=new Database(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""));
  }
  rs.close();
  statement.close();
  return db;
}",0.6978723404255319
93056,"private void populateColumnList(Table table) throws SQLException {
  Statement statement=connection.createStatement();
  String sql=""String_Node_Str"";
  ResultSet rs=statement.executeQuery(sql);
  Mediator.getLogger(ShadowSchemaMiner.class.getName()).log(Level.FINEST,sql);
  while (rs.next()) {
    Column column=new Column(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getInt(""String_Node_Str""),rs.getBoolean(""String_Node_Str""));
    column.setTable(table);
    table.getColumnList().add(column);
  }
  rs.close();
  statement.close();
}","private void populateColumnList(Table table) throws SQLException {
  Statement statement=connection.createStatement();
  String sql=""String_Node_Str"" + table.getId() + ""String_Node_Str"";
  Mediator.getLogger(ShadowSchemaMiner.class.getName()).log(Level.FINEST,sql);
  ResultSet rs=statement.executeQuery(sql);
  while (rs.next()) {
    Column column=new Column(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getInt(""String_Node_Str""),rs.getBoolean(""String_Node_Str""));
    column.setTable(table);
    table.getColumnList().add(column);
  }
  rs.close();
  statement.close();
}",0.9025157232704404
93057,"private void populateReplicableColumnList(Table table) throws SQLException {
  Statement statement=connection.createStatement();
  String sql=""String_Node_Str"" + table.getId() + ""String_Node_Str"";
  ResultSet rs=statement.executeQuery(sql);
  Mediator.getLogger(ShadowSchemaMiner.class.getName()).log(Level.FINEST,sql);
  while (rs.next()) {
    Column cs=new Column(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getInt(""String_Node_Str""),rs.getBoolean(""String_Node_Str""));
    cs.setTable(table);
    table.getColumnList().add(cs);
  }
  rs.close();
  statement.close();
}","private void populateReplicableColumnList(Table table) throws SQLException {
  Statement statement=connection.createStatement();
  String sql=""String_Node_Str"" + table.getId() + ""String_Node_Str"";
  Mediator.getLogger(ShadowSchemaMiner.class.getName()).log(Level.FINEST,sql);
  ResultSet rs=statement.executeQuery(sql);
  while (rs.next()) {
    Column cs=new Column(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""),rs.getInt(""String_Node_Str""),rs.getBoolean(""String_Node_Str""));
    cs.setTable(table);
    table.getColumnList().add(cs);
  }
  rs.close();
  statement.close();
}",0.9325153374233128
93058,"/** 
 * Do the person matching requested for this thread. <p> Implements java.lang.Runnable.run().
 */
public void run(){
  long startTime=System.currentTimeMillis();
  personMatchList=new ArrayList<PersonMatch>();
  Connection conn=Sql.connect();
  Calendar cal=Calendar.getInstance();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + Sql.REGULAR_VISIT_TYPE_ID + ""String_Node_Str""+ ""String_Node_Str""+ Sql.ONE_OFF_VISIT_TYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ minPersonId+ ""String_Node_Str""+ maxPersonId+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ResultSet rs=Sql.query(conn,sql);
  int recordCount=0;
  FingerprintList fingerprintList=new FingerprintList();
  fingerprintList.loadStart(minPersonId,maxPersonId);
  PersonIdentifierList personIdentifierList=new PersonIdentifierList();
  personIdentifierList.loadStart(minPersonId,maxPersonId);
  try {
    int colPersonId=0, colPersonGuid=0, colSex=0, colBirthdate=0, colDeathdate=0, colFirstName=0, colMiddleName=0, colLastName=0, colOtherName=0, colClanName=0, colMothersFirstName=0, colMothersMiddleName=0, colMothersLastName=0, colFathersFirstName=0, colFathersMiddleName=0, colFathersLastName=0, colCompoundheadFirstName=0, colCompoundheadMiddleName=0, colCompoundheadLastName=0, colVillageName=0, colMaritalStatusName=0, colConsentSigned=0, colVisitRegDate=0, colVisitOneDate=0, colVisitRegAddress=0, colVisitOneAddress=0;
    boolean colsFound=false;
    while (rs.next()) {
      if (!colsFound) {
        colPersonId=rs.findColumn(""String_Node_Str"");
        colPersonGuid=rs.findColumn(""String_Node_Str"");
        colSex=rs.findColumn(""String_Node_Str"");
        colBirthdate=rs.findColumn(""String_Node_Str"");
        colDeathdate=rs.findColumn(""String_Node_Str"");
        colFirstName=rs.findColumn(""String_Node_Str"");
        colMiddleName=rs.findColumn(""String_Node_Str"");
        colLastName=rs.findColumn(""String_Node_Str"");
        colOtherName=rs.findColumn(""String_Node_Str"");
        colClanName=rs.findColumn(""String_Node_Str"");
        colMothersFirstName=rs.findColumn(""String_Node_Str"");
        colMothersMiddleName=rs.findColumn(""String_Node_Str"");
        colMothersLastName=rs.findColumn(""String_Node_Str"");
        colFathersFirstName=rs.findColumn(""String_Node_Str"");
        colFathersMiddleName=rs.findColumn(""String_Node_Str"");
        colFathersLastName=rs.findColumn(""String_Node_Str"");
        colCompoundheadFirstName=rs.findColumn(""String_Node_Str"");
        colCompoundheadMiddleName=rs.findColumn(""String_Node_Str"");
        colCompoundheadLastName=rs.findColumn(""String_Node_Str"");
        colVillageName=rs.findColumn(""String_Node_Str"");
        colMaritalStatusName=rs.findColumn(""String_Node_Str"");
        colConsentSigned=rs.findColumn(""String_Node_Str"");
        colVisitRegDate=rs.findColumn(""String_Node_Str"");
        colVisitOneDate=rs.findColumn(""String_Node_Str"");
        colVisitRegAddress=rs.findColumn(""String_Node_Str"");
        colVisitOneAddress=rs.findColumn(""String_Node_Str"");
        colsFound=true;
      }
      Person p=new Person();
      int dbPersonId=rs.getInt(colPersonId);
      p.setPersonGuid(getRsString(rs,colPersonGuid));
      p.setSex((Person.Sex)ValueMap.SEX.getVal().get(getRsString(rs,colSex)));
      p.setBirthdate(rs.getDate(colBirthdate,cal));
      p.setDeathdate(rs.getDate(colDeathdate,cal));
      p.setFirstName(getRsString(rs,colFirstName));
      p.setMiddleName(getRsString(rs,colMiddleName));
      p.setLastName(getRsString(rs,colLastName));
      p.setOtherName(getRsString(rs,colOtherName));
      p.setClanName(getRsString(rs,colClanName));
      p.setMothersFirstName(getRsString(rs,colMothersFirstName));
      p.setMothersMiddleName(getRsString(rs,colMothersMiddleName));
      p.setMothersLastName(getRsString(rs,colMothersLastName));
      p.setFathersFirstName(getRsString(rs,colFathersFirstName));
      p.setFathersMiddleName(getRsString(rs,colFathersMiddleName));
      p.setFathersLastName(getRsString(rs,colFathersLastName));
      p.setCompoundHeadFirstName(getRsString(rs,colCompoundheadFirstName));
      p.setCompoundHeadMiddleName(getRsString(rs,colCompoundheadMiddleName));
      p.setCompoundHeadLastName(getRsString(rs,colCompoundheadLastName));
      p.setVillageName(getRsString(rs,colVillageName));
      p.setMaritalStatus((Person.MaritalStatus)ValueMap.MARITAL_STATUS.getVal().get(getRsString(rs,colMaritalStatusName)));
      p.setPersonIdentifierList(personIdentifierList.loadNext(dbPersonId));
      p.setFingerprintList(fingerprintList.loadNext(dbPersonId));
      p.setConsentSigned((Person.ConsentSigned)ValueMap.CONSENT_SIGNED.getVal().get(getRsString(rs,colConsentSigned)));
      p.setLastRegularVisit(Visit.getVisit(rs.getDate(colVisitRegDate),getRsString(rs,colVisitOneDate)));
      p.setLastOneOffVisit(Visit.getVisit(rs.getDate(colVisitRegAddress),getRsString(rs,colVisitOneAddress)));
      PersonMatch per=new PersonMatch(p);
      per.setDbPersonId(dbPersonId);
      personMatchList.add(per);
      if (++recordCount % 1000 == 0) {
        double timeInterval=(System.currentTimeMillis() - startTime);
        Mediator.getLogger(LoadPersonThread.class.getName()).log(Level.FINE,""String_Node_Str"",new Object[]{threadIndex,recordCount,timeInterval});
      }
    }
    Sql.close(rs);
  }
 catch (  SQLException ex) {
    Logger.getLogger(LoadPersonThread.class.getName()).log(Level.SEVERE,null,ex);
    System.exit(1);
  }
  Sql.close(conn);
  Sql.close(conn);
  fingerprintList.loadEnd();
  personIdentifierList.loadEnd();
  finishTime=System.currentTimeMillis();
}","/** 
 * Do the person matching requested for this thread. <p> Implements java.lang.Runnable.run().
 */
public void run(){
  long startTime=System.currentTimeMillis();
  Mediator.getLogger(LoadPersonThread.class.getName()).log(Level.FINE,""String_Node_Str"",threadIndex);
  personMatchList=new ArrayList<PersonMatch>();
  Connection conn=Sql.connect();
  Calendar cal=Calendar.getInstance();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + Sql.REGULAR_VISIT_TYPE_ID + ""String_Node_Str""+ ""String_Node_Str""+ Sql.ONE_OFF_VISIT_TYPE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ minPersonId+ ""String_Node_Str""+ maxPersonId+ ""String_Node_Str""+ threadIndex+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ResultSet rs=Sql.query(conn,sql);
  int recordCount=0;
  FingerprintList fingerprintList=new FingerprintList();
  fingerprintList.loadStart(minPersonId,maxPersonId);
  PersonIdentifierList personIdentifierList=new PersonIdentifierList();
  personIdentifierList.loadStart(minPersonId,maxPersonId);
  try {
    int colPersonId=0, colPersonGuid=0, colSex=0, colBirthdate=0, colDeathdate=0, colFirstName=0, colMiddleName=0, colLastName=0, colOtherName=0, colClanName=0, colMothersFirstName=0, colMothersMiddleName=0, colMothersLastName=0, colFathersFirstName=0, colFathersMiddleName=0, colFathersLastName=0, colCompoundheadFirstName=0, colCompoundheadMiddleName=0, colCompoundheadLastName=0, colVillageName=0, colMaritalStatusName=0, colConsentSigned=0, colVisitRegDate=0, colVisitOneDate=0, colVisitRegAddress=0, colVisitOneAddress=0;
    boolean colsFound=false;
    while (rs.next()) {
      if (!colsFound) {
        colPersonId=rs.findColumn(""String_Node_Str"");
        colPersonGuid=rs.findColumn(""String_Node_Str"");
        colSex=rs.findColumn(""String_Node_Str"");
        colBirthdate=rs.findColumn(""String_Node_Str"");
        colDeathdate=rs.findColumn(""String_Node_Str"");
        colFirstName=rs.findColumn(""String_Node_Str"");
        colMiddleName=rs.findColumn(""String_Node_Str"");
        colLastName=rs.findColumn(""String_Node_Str"");
        colOtherName=rs.findColumn(""String_Node_Str"");
        colClanName=rs.findColumn(""String_Node_Str"");
        colMothersFirstName=rs.findColumn(""String_Node_Str"");
        colMothersMiddleName=rs.findColumn(""String_Node_Str"");
        colMothersLastName=rs.findColumn(""String_Node_Str"");
        colFathersFirstName=rs.findColumn(""String_Node_Str"");
        colFathersMiddleName=rs.findColumn(""String_Node_Str"");
        colFathersLastName=rs.findColumn(""String_Node_Str"");
        colCompoundheadFirstName=rs.findColumn(""String_Node_Str"");
        colCompoundheadMiddleName=rs.findColumn(""String_Node_Str"");
        colCompoundheadLastName=rs.findColumn(""String_Node_Str"");
        colVillageName=rs.findColumn(""String_Node_Str"");
        colMaritalStatusName=rs.findColumn(""String_Node_Str"");
        colConsentSigned=rs.findColumn(""String_Node_Str"");
        colVisitRegDate=rs.findColumn(""String_Node_Str"");
        colVisitOneDate=rs.findColumn(""String_Node_Str"");
        colVisitRegAddress=rs.findColumn(""String_Node_Str"");
        colVisitOneAddress=rs.findColumn(""String_Node_Str"");
        colsFound=true;
      }
      Person p=new Person();
      int dbPersonId=rs.getInt(colPersonId);
      p.setPersonGuid(getRsString(rs,colPersonGuid));
      p.setSex((Person.Sex)ValueMap.SEX.getVal().get(getRsString(rs,colSex)));
      p.setBirthdate(rs.getDate(colBirthdate,cal));
      p.setDeathdate(rs.getDate(colDeathdate,cal));
      p.setFirstName(getRsString(rs,colFirstName));
      p.setMiddleName(getRsString(rs,colMiddleName));
      p.setLastName(getRsString(rs,colLastName));
      p.setOtherName(getRsString(rs,colOtherName));
      p.setClanName(getRsString(rs,colClanName));
      p.setMothersFirstName(getRsString(rs,colMothersFirstName));
      p.setMothersMiddleName(getRsString(rs,colMothersMiddleName));
      p.setMothersLastName(getRsString(rs,colMothersLastName));
      p.setFathersFirstName(getRsString(rs,colFathersFirstName));
      p.setFathersMiddleName(getRsString(rs,colFathersMiddleName));
      p.setFathersLastName(getRsString(rs,colFathersLastName));
      p.setCompoundHeadFirstName(getRsString(rs,colCompoundheadFirstName));
      p.setCompoundHeadMiddleName(getRsString(rs,colCompoundheadMiddleName));
      p.setCompoundHeadLastName(getRsString(rs,colCompoundheadLastName));
      p.setVillageName(getRsString(rs,colVillageName));
      p.setMaritalStatus((Person.MaritalStatus)ValueMap.MARITAL_STATUS.getVal().get(getRsString(rs,colMaritalStatusName)));
      p.setPersonIdentifierList(personIdentifierList.loadNext(dbPersonId));
      p.setFingerprintList(fingerprintList.loadNext(dbPersonId));
      p.setConsentSigned((Person.ConsentSigned)ValueMap.CONSENT_SIGNED.getVal().get(getRsString(rs,colConsentSigned)));
      p.setLastRegularVisit(Visit.getVisit(rs.getDate(colVisitRegDate),getRsString(rs,colVisitOneDate)));
      p.setLastOneOffVisit(Visit.getVisit(rs.getDate(colVisitRegAddress),getRsString(rs,colVisitOneAddress)));
      PersonMatch per=new PersonMatch(p);
      per.setDbPersonId(dbPersonId);
      personMatchList.add(per);
      if (++recordCount % 10000 == 0) {
        double timeInterval=(System.currentTimeMillis() - startTime);
        Mediator.getLogger(LoadPersonThread.class.getName()).log(Level.FINE,""String_Node_Str"",new Object[]{threadIndex,recordCount,timeInterval});
      }
    }
  }
 catch (  SQLException ex) {
    Logger.getLogger(LoadPersonThread.class.getName()).log(Level.SEVERE,null,ex);
    System.exit(1);
  }
  Sql.close(rs);
  Sql.close(conn);
  fingerprintList.loadEnd();
  personIdentifierList.loadEnd();
  double timeInterval=(System.currentTimeMillis() - startTime);
  Mediator.getLogger(LoadPersonThread.class.getName()).log(Level.FINE,""String_Node_Str"",new Object[]{threadIndex,personMatchList.size(),timeInterval});
}",0.9672199516223204
93059,"/** 
 * Executes any SQL statement on a database connection.
 * @param conn Connection to use.
 * @param sql SQL statement.
 * @return true if there was no exception, otherwise false.
 */
public static boolean execute(Connection conn,String sql){
  Mediator.getLogger(Sql.class.getName()).log(Level.FINE,""String_Node_Str"",sql);
  boolean returnValue=true;
  try {
    PreparedStatement stmt=conn.prepareStatement(sql);
    stmt.execute();
    int updateCount=stmt.getUpdateCount();
    Mediator.getLogger(Sql.class.getName()).log(Level.FINE,""String_Node_Str"",updateCount);
  }
 catch (  SQLException ex) {
    Logger.getLogger(Mpi.class.getName()).log(Level.SEVERE,""String_Node_Str"" + sql,ex);
    returnValue=false;
  }
  return returnValue;
}","/** 
 * Executes any SQL statement on a database connection.
 * @param conn Connection to use.
 * @param sql SQL statement.
 * @return true if there was no exception, otherwise false.
 */
public static boolean execute(Connection conn,String sql){
  Mediator.getLogger(Sql.class.getName()).log(Level.FINE,""String_Node_Str"",sql);
  boolean returnValue=true;
  try {
    PreparedStatement stmt=conn.prepareStatement(sql);
    stmt.execute();
    int updateCount=stmt.getUpdateCount();
    Mediator.getLogger(Sql.class.getName()).log(Level.FINE,""String_Node_Str"",updateCount);
    stmt.close();
  }
 catch (  SQLException ex) {
    Logger.getLogger(Mpi.class.getName()).log(Level.SEVERE,""String_Node_Str"" + sql,ex);
    returnValue=false;
  }
  return returnValue;
}",0.9880478087649402
93060,"/** 
 * Creates a connection to the MPI(/LPI) database. For a query that is run while the results are being fetched from another query, a separate connection is needed. <p> Connections are pooled for speed, and to avoid running out of connections.
 * @return the connection.
 */
public static Connection connect(){
  CachedConnection cc=null;
  Connection conn=null;
  try {
synchronized (connectionPool) {
      while ((cc=connectionPool.poll()) != null) {
        if (System.currentTimeMillis() - cc.cachedTime < WAIT_TIMEOUT_SECONDS * 1000) {
          conn=cc.connection;
          break;
        }
 else {
          cc.connection.close();
        }
      }
    }
    if (conn == null) {
      String url=Mediator.getProperty(""String_Node_Str"");
      String username=Mediator.getProperty(""String_Node_Str"");
      String password=Mediator.getProperty(""String_Node_Str"");
      conn=DriverManager.getConnection(url,username,password);
    }
  }
 catch (  Exception ex) {
    Logger.getLogger(Mpi.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
    System.exit(1);
  }
  return conn;
}","/** 
 * Creates a connection to the MPI(/LPI) database. For a query that is run while the results are being fetched from another query, a separate connection is needed. <p> Connections are pooled for speed, and to avoid running out of connections.
 * @return the connection.
 */
public static Connection connect(){
  CachedConnection cc=null;
  Connection conn=null;
  try {
synchronized (connectionPool) {
      while ((cc=connectionPool.poll()) != null) {
        if (System.currentTimeMillis() - cc.cachedTime < WAIT_TIMEOUT_SECONDS * 1000) {
          conn=cc.connection;
          Mediator.getLogger(Sql.class.getName()).log(Level.FINER,""String_Node_Str"");
          break;
        }
 else {
          Mediator.getLogger(Sql.class.getName()).log(Level.FINER,""String_Node_Str"");
          cc.connection.close();
        }
      }
    }
    if (conn == null) {
      String url=Mediator.getProperty(""String_Node_Str"");
      String username=Mediator.getProperty(""String_Node_Str"");
      String password=Mediator.getProperty(""String_Node_Str"");
      conn=DriverManager.getConnection(url,username,password);
      Mediator.getLogger(Sql.class.getName()).log(Level.FINER,""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    Logger.getLogger(Mpi.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
    System.exit(1);
  }
  return conn;
}",0.8962418300653595
93061,"/** 
 * Loads into the PersonList the entire person table from the MPI, along with any joining person relation data. Uses multiple threads to do this, to minimize loading time.
 */
public void load(){
  int personCount=0;
  try {
    Connection conn=Sql.connect();
    String sql=""String_Node_Str"";
    ResultSet rs=Sql.query(conn,sql);
    List<Integer> personIds=new ArrayList<Integer>();
    rs.next();
    personCount=rs.getInt(""String_Node_Str"");
    Sql.close(rs);
    Sql.close(conn);
  }
 catch (  SQLException ex) {
    Logger.getLogger(PersonList.class.getName()).log(Level.SEVERE,null,ex);
  }
  String queryLimitString=Mediator.getProperty(""String_Node_Str"");
  if (queryLimitString != null) {
    int limit=Integer.parseInt(queryLimitString);
    if (limit < personCount) {
      personCount=limit;
    }
  }
  if (personCount > 0) {
    int threadCount=Mpi.getMaxThreadCount();
    if (threadCount > personCount) {
      threadCount=personCount;
    }
    int countPerThread=(personCount + threadCount - 1) / threadCount;
    int[] cutoffs=null;
    try {
      Connection conn=Sql.connect();
      String sql=""String_Node_Str"";
      ResultSet rs=Sql.query(conn,sql);
      cutoffs=new int[threadCount + 1];
      cutoffs[0]=0;
      int row=0;
      int nextCutoff=countPerThread;
      int iCutoff=1;
      while (rs.next() && row++ < personCount) {
        if (row == nextCutoff || row == personCount) {
          cutoffs[iCutoff++]=rs.getInt(""String_Node_Str"");
          nextCutoff+=countPerThread;
        }
      }
      Sql.close(rs);
      Sql.close(conn);
    }
 catch (    SQLException ex) {
      Logger.getLogger(PersonList.class.getName()).log(Level.SEVERE,null,ex);
    }
    long startTime=System.currentTimeMillis();
    Thread[] threadArray=new Thread[threadCount];
    LoadPersonThread[] loadPersonThreadArray=new LoadPersonThread[threadCount];
    for (int i=0; i < threadCount; i++) {
      int minPersonId=cutoffs[i] + 1;
      int maxPersonId=cutoffs[i + 1];
      LoadPersonThread lpt=new LoadPersonThread(i,minPersonId,maxPersonId);
      Thread t=new Thread(lpt);
      loadPersonThreadArray[i]=lpt;
      threadArray[i]=t;
      t.start();
    }
    for (int i=0; i < threadCount; i++) {
      Thread t=threadArray[i];
      try {
        t.join();
      }
 catch (      InterruptedException ex) {
        Logger.getLogger(PersonList.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
      }
      LoadPersonThread lpt=loadPersonThreadArray[i];
      loadPersonThreadArray[i]=null;
      List<PersonMatch> personMatchList=lpt.getPersonMatchList();
      for (      PersonMatch pm : personMatchList) {
        add(pm);
      }
      long finishTime=lpt.getFinishTime();
      double timeInterval=(finishTime - startTime);
      Mediator.getLogger(PersonList.class.getName()).log(Level.FINE,""String_Node_Str"",new Object[]{i,personMatchList.size(),timeInterval});
    }
    double timeInterval=(System.currentTimeMillis() - startTime);
    Mediator.getLogger(PersonList.class.getName()).log(Level.FINE,""String_Node_Str"",new Object[]{personList.size(),timeInterval});
  }
}","/** 
 * Loads into the PersonList the entire person table from the MPI, along with any joining person relation data. Uses multiple threads to do this, to minimize loading time.
 */
public void load(){
  int personCount=0;
  try {
    Connection conn=Sql.connect();
    String sql=""String_Node_Str"";
    ResultSet rs=Sql.query(conn,sql);
    List<Integer> personIds=new ArrayList<Integer>();
    rs.next();
    personCount=rs.getInt(""String_Node_Str"");
    Sql.close(rs);
    Sql.close(conn);
  }
 catch (  SQLException ex) {
    Logger.getLogger(PersonList.class.getName()).log(Level.SEVERE,null,ex);
  }
  String queryLimitString=Mediator.getProperty(""String_Node_Str"");
  if (queryLimitString != null) {
    int limit=Integer.parseInt(queryLimitString);
    if (limit < personCount) {
      personCount=limit;
    }
  }
  if (personCount > 0) {
    int threadCount=Mpi.getMaxThreadCount();
    if (threadCount > personCount) {
      threadCount=personCount;
    }
    int countPerThread=(personCount + threadCount - 1) / threadCount;
    int[] cutoffs=null;
    try {
      Connection conn=Sql.connect();
      String sql=""String_Node_Str"";
      ResultSet rs=Sql.query(conn,sql);
      cutoffs=new int[threadCount + 1];
      cutoffs[0]=0;
      int row=0;
      int nextCutoff=countPerThread;
      int iCutoff=1;
      while (rs.next() && row++ < personCount) {
        if (row == nextCutoff || row == personCount) {
          cutoffs[iCutoff++]=rs.getInt(""String_Node_Str"");
          nextCutoff+=countPerThread;
        }
      }
      Sql.close(rs);
      Sql.close(conn);
    }
 catch (    SQLException ex) {
      Logger.getLogger(PersonList.class.getName()).log(Level.SEVERE,null,ex);
    }
    long startTime=System.currentTimeMillis();
    Thread[] threadArray=new Thread[threadCount];
    LoadPersonThread[] loadPersonThreadArray=new LoadPersonThread[threadCount];
    for (int i=0; i < threadCount; i++) {
      int minPersonId=cutoffs[i] + 1;
      int maxPersonId=cutoffs[i + 1];
      LoadPersonThread lpt=new LoadPersonThread(i,minPersonId,maxPersonId);
      Thread t=new Thread(lpt);
      loadPersonThreadArray[i]=lpt;
      threadArray[i]=t;
      t.start();
      waitAMoment();
    }
    for (int i=0; i < threadCount; i++) {
      Thread t=threadArray[i];
      try {
        t.join();
      }
 catch (      InterruptedException ex) {
        Logger.getLogger(PersonList.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
      }
      LoadPersonThread lpt=loadPersonThreadArray[i];
      loadPersonThreadArray[i]=null;
      List<PersonMatch> personMatchList=lpt.getPersonMatchList();
      for (      PersonMatch pm : personMatchList) {
        add(pm);
      }
    }
    double timeInterval=(System.currentTimeMillis() - startTime);
    Mediator.getLogger(PersonList.class.getName()).log(Level.FINE,""String_Node_Str"",new Object[]{personList.size(),timeInterval});
  }
}",0.9319163068747924
93062,"/** 
 * Executes any SQL statement on a database connection.
 * @param conn Connection to use.
 * @param sql SQL statement.
 * @return true if there was no exception, otherwise false.
 */
public static boolean execute(Connection conn,String sql){
  Mediator.getLogger(Sql.class.getName()).log(Level.FINE,""String_Node_Str"",sql);
  boolean returnValue=true;
  try {
    PreparedStatement stmt=conn.prepareStatement(sql);
    returnValue=stmt.execute();
    int updateCount=stmt.getUpdateCount();
    Mediator.getLogger(Sql.class.getName()).log(Level.FINE,""String_Node_Str"",updateCount);
  }
 catch (  SQLException ex) {
    Logger.getLogger(Mpi.class.getName()).log(Level.SEVERE,""String_Node_Str"" + sql,ex);
    returnValue=false;
  }
  return returnValue;
}","/** 
 * Executes any SQL statement on a database connection.
 * @param conn Connection to use.
 * @param sql SQL statement.
 * @return true if there was no exception, otherwise false.
 */
public static boolean execute(Connection conn,String sql){
  Mediator.getLogger(Sql.class.getName()).log(Level.FINE,""String_Node_Str"",sql);
  boolean returnValue=true;
  try {
    PreparedStatement stmt=conn.prepareStatement(sql);
    stmt.execute();
    int updateCount=stmt.getUpdateCount();
    Mediator.getLogger(Sql.class.getName()).log(Level.FINE,""String_Node_Str"",updateCount);
  }
 catch (  SQLException ex) {
    Logger.getLogger(Mpi.class.getName()).log(Level.SEVERE,""String_Node_Str"" + sql,ex);
    returnValue=false;
  }
  return returnValue;
}",0.992
93063,"@Action public void finish(){
  if (!ensurePreUpdateConfirmation()) {
    return;
  }
  if (!hasSelectedButton(clientTypeButtonGroup)) {
    showWarningMessage(""String_Node_Str"",enrolledRadioButton);
    return;
  }
 else {
    if (enrolledRadioButton.isSelected()) {
      mainViewHelper.getSession().changeSessionClientType(Session.ClientType.ENROLLED);
    }
 else     if (visitorRadioButton.isSelected()) {
      mainViewHelper.getSession().changeSessionClientType(Session.ClientType.VISITOR);
    }
 else     if (newRadioButton.isSelected()) {
      mainViewHelper.getSession().changeSessionClientType(Session.ClientType.NEW);
    }
 else     if (transferInRadioButton.isSelected()) {
      mainViewHelper.getSession().changeSessionClientType(Session.ClientType.TRANSFER_IN);
    }
  }
  PersonWrapper mpiMatchPersonWrapper=mainViewHelper.getSession().getMpiMatchPersonWrapper();
  PersonWrapper lpiMatchPersonWrapper=mainViewHelper.getSession().getLpiMatchPersonWrapper();
  boolean mpiMatched=mpiMatchPersonWrapper != null;
  boolean lpiMatched=lpiMatchPersonWrapper != null;
  PersonWrapper mpiUpdatePersonWrapper=null;
  PersonWrapper lpiUpdatePersonWrapper=null;
  if (mpiMatched) {
    mpiUpdatePersonWrapper=new PersonWrapper(mpiMatchPersonWrapper.unwrap());
  }
 else {
    mpiUpdatePersonWrapper=new PersonWrapper(new Person());
  }
  if (lpiMatched) {
    lpiUpdatePersonWrapper=new PersonWrapper(lpiMatchPersonWrapper.unwrap());
  }
 else {
    lpiUpdatePersonWrapper=new PersonWrapper(new Person());
  }
  List<Fingerprint> updatedFingerprintList=getUpdatedFingerprintList();
  if (updatedFingerprintList != null) {
    if (updatedFingerprintList.isEmpty()) {
      showWarningMessage(""String_Node_Str"" + ""String_Node_Str"",this.getFrame(),takeButton);
      return;
    }
    int numberOfFingerprintsTaken=updatedFingerprintList.size();
    if (numberOfFingerprintsTaken < OECReception.MINIMUM_FINGERPRINTS_FOR_REGISTRATION) {
      showWarningMessage(""String_Node_Str"" + numberOfFingerprintsTaken + ""String_Node_Str""+ ""String_Node_Str""+ OECReception.MINIMUM_FINGERPRINTS_FOR_REGISTRATION+ ""String_Node_Str""+ ""String_Node_Str""+ (OECReception.MINIMUM_FINGERPRINTS_FOR_REGISTRATION - numberOfFingerprintsTaken)+ ""String_Node_Str"",this.getFrame(),takeButton);
      return;
    }
  }
  mpiUpdatePersonWrapper.setFingerprintList(updatedFingerprintList);
  lpiUpdatePersonWrapper.setFingerprintList(updatedFingerprintList);
  try {
    setUpUpdatePersonWrapper(mpiUpdatePersonWrapper);
    setUpUpdatePersonWrapper(lpiUpdatePersonWrapper);
  }
 catch (  MalformedCliniIdException ex) {
    showWarningMessage(ex.getMessage(),finishButton,clinicIdTextField);
    showCard(""String_Node_Str"");
    return;
  }
  if (!mainViewHelper.hasLastResortSearchDone() && (mainViewHelper.noMPIMatchWasFound() || mainViewHelper.noLPIMatchWasFound())) {
    SearchProcessResult searchProcessResult=null;
    if (mainViewHelper.noMPIMatchWasFound() && mainViewHelper.noLPIMatchWasFound()) {
      searchProcessResult=mainViewHelper.findPerson(Server.MPI_LPI,mpiUpdatePersonWrapper,true);
      if (searchProcessResult.getType() == SearchProcessResult.Type.LIST) {
        showSearchResults(new SearchServerResponse(Server.MPI_LPI,(List<Person>)searchProcessResult.getData().getPersonList()),true);
      }
    }
 else     if (mainViewHelper.noMPIMatchWasFound() && !mainViewHelper.noLPIMatchWasFound()) {
      searchProcessResult=mainViewHelper.findPerson(Server.MPI,mpiUpdatePersonWrapper,true);
      if (searchProcessResult.getType() == SearchProcessResult.Type.LIST) {
        showSearchResults((SearchServerResponse)searchProcessResult.getData(),true);
      }
    }
 else     if (!mainViewHelper.noMPIMatchWasFound() && mainViewHelper.noLPIMatchWasFound()) {
      searchProcessResult=mainViewHelper.findPerson(Server.LPI,lpiUpdatePersonWrapper,true);
      if (searchProcessResult.getType() == SearchProcessResult.Type.LIST) {
        showSearchResults(new SearchServerResponse(Server.LPI,searchProcessResult.getData().getPersonList()),true);
      }
    }
    mainViewHelper.setLastResortSearchDone(true);
  }
  if (lpiUpdatePersonWrapper.getKisumuHdssId().isEmpty() || !lpiUpdatePersonWrapper.getKisumuHdssId().equalsIgnoreCase(mpiUpdatePersonWrapper.getKisumuHdssId())) {
    lpiUpdatePersonWrapper.setKisumuHdssId(mpiUpdatePersonWrapper.getKisumuHdssId());
  }
  if (mpiUpdatePersonWrapper.getClinicId().isEmpty() || !mpiUpdatePersonWrapper.getClinicId().equalsIgnoreCase(lpiUpdatePersonWrapper.getClinicId())) {
    try {
      mpiUpdatePersonWrapper.setClinicId(mpiUpdatePersonWrapper.getClinicId());
    }
 catch (    MalformedCliniIdException ex) {
      Logger.getLogger(MainView.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
  if (!mpiMatched && !lpiMatched) {
    mainViewHelper.createPerson(Server.MPI,mpiUpdatePersonWrapper);
    mainViewHelper.createPerson(Server.LPI,lpiUpdatePersonWrapper);
  }
 else {
    if (!mpiMatched && lpiMatched) {
      mainViewHelper.createPerson(Server.MPI,mpiUpdatePersonWrapper);
      mainViewHelper.modifyPerson(Server.LPI,lpiUpdatePersonWrapper);
    }
 else     if (mpiMatched && !lpiMatched) {
      lpiUpdatePersonWrapper.setMPIIdentifier(mpiUpdatePersonWrapper.getPersonGuid());
      mainViewHelper.modifyPerson(Server.MPI,mpiUpdatePersonWrapper);
      mainViewHelper.createPerson(Server.LPI,lpiUpdatePersonWrapper);
    }
 else {
      if (lpiUpdatePersonWrapper.getMPIIdentifier().isEmpty()) {
        lpiUpdatePersonWrapper.setMPIIdentifier(mpiUpdatePersonWrapper.getPersonGuid());
      }
      mainViewHelper.modifyPerson(Server.MPI,mpiUpdatePersonWrapper);
      mainViewHelper.modifyPerson(Server.LPI,lpiUpdatePersonWrapper);
    }
  }
  showCard(""String_Node_Str"",true,false);
}","@Action public void finish(){
  if (!ensurePreUpdateConfirmation()) {
    return;
  }
  if (!hasSelectedButton(clientTypeButtonGroup)) {
    showWarningMessage(""String_Node_Str"",enrolledRadioButton);
    return;
  }
 else {
    if (enrolledRadioButton.isSelected()) {
      mainViewHelper.getSession().changeSessionClientType(Session.ClientType.ENROLLED);
    }
 else     if (visitorRadioButton.isSelected()) {
      mainViewHelper.getSession().changeSessionClientType(Session.ClientType.VISITOR);
    }
 else     if (newRadioButton.isSelected()) {
      mainViewHelper.getSession().changeSessionClientType(Session.ClientType.NEW);
    }
 else     if (transferInRadioButton.isSelected()) {
      mainViewHelper.getSession().changeSessionClientType(Session.ClientType.TRANSFER_IN);
    }
  }
  PersonWrapper mpiMatchPersonWrapper=mainViewHelper.getSession().getMpiMatchPersonWrapper();
  PersonWrapper lpiMatchPersonWrapper=mainViewHelper.getSession().getLpiMatchPersonWrapper();
  boolean mpiMatched=mpiMatchPersonWrapper != null;
  boolean lpiMatched=lpiMatchPersonWrapper != null;
  PersonWrapper mpiUpdatePersonWrapper=null;
  PersonWrapper lpiUpdatePersonWrapper=null;
  if (mpiMatched) {
    mpiUpdatePersonWrapper=new PersonWrapper(mpiMatchPersonWrapper.unwrap());
  }
 else {
    mpiUpdatePersonWrapper=new PersonWrapper(new Person());
  }
  if (lpiMatched) {
    lpiUpdatePersonWrapper=new PersonWrapper(lpiMatchPersonWrapper.unwrap());
  }
 else {
    lpiUpdatePersonWrapper=new PersonWrapper(new Person());
  }
  List<Fingerprint> updatedFingerprintList=getUpdatedFingerprintList();
  if (updatedFingerprintList != null) {
    if (updatedFingerprintList.isEmpty()) {
      showWarningMessage(""String_Node_Str"" + ""String_Node_Str"",this.getFrame(),takeButton);
      return;
    }
    int numberOfFingerprintsTaken=updatedFingerprintList.size();
    if (numberOfFingerprintsTaken < OECReception.MINIMUM_FINGERPRINTS_FOR_REGISTRATION) {
      showWarningMessage(""String_Node_Str"" + numberOfFingerprintsTaken + ""String_Node_Str""+ ""String_Node_Str""+ OECReception.MINIMUM_FINGERPRINTS_FOR_REGISTRATION+ ""String_Node_Str""+ ""String_Node_Str""+ (OECReception.MINIMUM_FINGERPRINTS_FOR_REGISTRATION - numberOfFingerprintsTaken)+ ""String_Node_Str"",this.getFrame(),takeButton);
      return;
    }
  }
  mpiUpdatePersonWrapper.setFingerprintList(updatedFingerprintList);
  lpiUpdatePersonWrapper.setFingerprintList(updatedFingerprintList);
  try {
    setUpUpdatePersonWrapper(mpiUpdatePersonWrapper);
    setUpUpdatePersonWrapper(lpiUpdatePersonWrapper);
  }
 catch (  MalformedCliniIdException ex) {
    showWarningMessage(ex.getMessage(),finishButton,clinicIdTextField);
    showCard(""String_Node_Str"");
    return;
  }
  if (!mainViewHelper.hasLastResortSearchDone() && (mainViewHelper.noMPIMatchWasFound() || mainViewHelper.noLPIMatchWasFound())) {
    SearchProcessResult searchProcessResult=null;
    if (mainViewHelper.noMPIMatchWasFound() && mainViewHelper.noLPIMatchWasFound()) {
      searchProcessResult=mainViewHelper.findPerson(Server.MPI_LPI,mpiUpdatePersonWrapper,true);
      if (searchProcessResult.getType() == SearchProcessResult.Type.LIST) {
        showSearchResults(new SearchServerResponse(Server.MPI_LPI,(List<Person>)searchProcessResult.getData().getPersonList()),true);
        return;
      }
    }
 else     if (mainViewHelper.noMPIMatchWasFound() && !mainViewHelper.noLPIMatchWasFound()) {
      searchProcessResult=mainViewHelper.findPerson(Server.MPI,mpiUpdatePersonWrapper,true);
      if (searchProcessResult.getType() == SearchProcessResult.Type.LIST) {
        showSearchResults((SearchServerResponse)searchProcessResult.getData(),true);
        return;
      }
    }
 else     if (!mainViewHelper.noMPIMatchWasFound() && mainViewHelper.noLPIMatchWasFound()) {
      searchProcessResult=mainViewHelper.findPerson(Server.LPI,lpiUpdatePersonWrapper,true);
      if (searchProcessResult.getType() == SearchProcessResult.Type.LIST) {
        showSearchResults(new SearchServerResponse(Server.LPI,searchProcessResult.getData().getPersonList()),true);
        return;
      }
    }
    mainViewHelper.setLastResortSearchDone(true);
  }
  if (lpiUpdatePersonWrapper.getKisumuHdssId().isEmpty() || !lpiUpdatePersonWrapper.getKisumuHdssId().equalsIgnoreCase(mpiUpdatePersonWrapper.getKisumuHdssId())) {
    if (!mpiUpdatePersonWrapper.getKisumuHdssId().isEmpty()) {
      lpiUpdatePersonWrapper.setKisumuHdssId(mpiUpdatePersonWrapper.getKisumuHdssId());
    }
  }
  if (mpiUpdatePersonWrapper.getClinicId().isEmpty() || !mpiUpdatePersonWrapper.getClinicId().equalsIgnoreCase(lpiUpdatePersonWrapper.getClinicId())) {
    try {
      mpiUpdatePersonWrapper.setClinicId(mpiUpdatePersonWrapper.getClinicId());
    }
 catch (    MalformedCliniIdException ex) {
      Logger.getLogger(MainView.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
  if (!mpiMatched && !lpiMatched) {
    mainViewHelper.createPerson(Server.MPI,mpiUpdatePersonWrapper);
    mainViewHelper.createPerson(Server.LPI,lpiUpdatePersonWrapper);
  }
 else {
    if (!mpiMatched && lpiMatched) {
      mainViewHelper.createPerson(Server.MPI,mpiUpdatePersonWrapper);
      mainViewHelper.modifyPerson(Server.LPI,lpiUpdatePersonWrapper);
    }
 else     if (mpiMatched && !lpiMatched) {
      lpiUpdatePersonWrapper.setMPIIdentifier(mpiUpdatePersonWrapper.getPersonGuid());
      mainViewHelper.modifyPerson(Server.MPI,mpiUpdatePersonWrapper);
      mainViewHelper.createPerson(Server.LPI,lpiUpdatePersonWrapper);
    }
 else {
      if (lpiUpdatePersonWrapper.getMPIIdentifier().isEmpty()) {
        lpiUpdatePersonWrapper.setMPIIdentifier(mpiUpdatePersonWrapper.getPersonGuid());
      }
      mainViewHelper.modifyPerson(Server.MPI,mpiUpdatePersonWrapper);
      mainViewHelper.modifyPerson(Server.LPI,lpiUpdatePersonWrapper);
    }
  }
  showCard(""String_Node_Str"",true,false);
}",0.9890733889701454
93064,"public SearchProcessResult findPerson(int targetServer,PersonWrapper searchPersonWrapper,boolean lastResort){
  if (targetServer == Server.MPI_LPI) {
    session.setMpiResultDisplayed(false);
    session.setLpiResultDisplayed(false);
  }
  if (targetServer == Server.MPI) {
    session.setMpiResultDisplayed(false);
  }
  if (targetServer == Server.LPI) {
    session.setLpiResultDisplayed(false);
  }
  if (!lastResort) {
    session.setRejectedMPICandidateList(null);
    session.setRejectedLPICandidateList(null);
  }
  List<Person> mpiPersonList=null;
  List<Person> lpiPersonList=null;
  session.setSearchPersonWrapper(searchPersonWrapper);
  RequestResult mpiRequestResult=session.getMpiRequestResult();
  RequestResult lpiRequestResult=session.getLpiRequestResult();
  RequestDispatcher.dispatch(createPersonRequest(searchPersonWrapper),mpiRequestResult,lpiRequestResult,RequestDispatcher.DispatchType.FIND,targetServer);
  if (mpiRequestResult.isSuccessful() && lpiRequestResult.isSuccessful()) {
    mpiPersonList=(List<Person>)mpiRequestResult.getData();
    lpiPersonList=(List<Person>)lpiRequestResult.getData();
    if (checkForLinkedCandidates(lpiPersonList)) {
      return new SearchProcessResult(SearchProcessResult.Type.LIST,new SearchServerResponse(Server.LPI,removeRejectedLpiCandidates(lpiPersonList)));
    }
 else {
      if (checkForFingerprintCandidates(mpiPersonList)) {
        return new SearchProcessResult(SearchProcessResult.Type.LIST,new SearchServerResponse(Server.MPI,removeRejectedMpiCandidates(mpiPersonList)));
      }
 else {
        if (!minimumSearchFingerprintsTaken()) {
          return new SearchProcessResult(SearchProcessResult.Type.NEXT_FINGERPRINT,null);
        }
 else {
          if (!session.getAnyUnsentFingerprints().isEmpty()) {
            for (            ImagedFingerprint imagedFingerprint : session.getAnyUnsentFingerprints()) {
              session.setActiveImagedFingerprint(imagedFingerprint);
              searchPersonWrapper.addFingerprint(imagedFingerprint);
              break;
            }
            return findPerson(Server.MPI_LPI,searchPersonWrapper);
          }
 else {
            if (!removeRejectedLpiCandidates(lpiPersonList).isEmpty()) {
              return new SearchProcessResult(SearchProcessResult.Type.LIST,new SearchServerResponse(Server.LPI,lpiPersonList));
            }
 else {
              if (!removeRejectedMpiCandidates(mpiPersonList).isEmpty()) {
                return new SearchProcessResult(SearchProcessResult.Type.LIST,new SearchServerResponse(Server.MPI,mpiPersonList));
              }
 else {
                return new SearchProcessResult(SearchProcessResult.Type.EXIT,null);
              }
            }
          }
        }
      }
    }
  }
 else {
    if (!mpiRequestResult.isSuccessful() && !lpiRequestResult.isSuccessful()) {
      if (mainView.showConfirmMessage(""String_Node_Str"" + ""String_Node_Str"",((MainView)mainView).getFrame())) {
        return findPerson(Server.MPI_LPI,searchPersonWrapper);
      }
    }
 else {
      if (!mpiRequestResult.isSuccessful() && lpiRequestResult.isSuccessful()) {
        lpiPersonList=(List<Person>)lpiRequestResult.getData();
        if (mainView.showConfirmMessage(""String_Node_Str"" + ""String_Node_Str"",((MainView)mainView).getFrame())) {
          return findPerson(Server.MPI,searchPersonWrapper);
        }
        if (!removeRejectedLpiCandidates(lpiPersonList).isEmpty()) {
          return new SearchProcessResult(SearchProcessResult.Type.LIST,new SearchServerResponse(Server.LPI,lpiPersonList));
        }
 else {
          return new SearchProcessResult(SearchProcessResult.Type.EXIT,null);
        }
      }
 else       if (!lpiRequestResult.isSuccessful() && mpiRequestResult.isSuccessful()) {
        mpiPersonList=(List<Person>)mpiRequestResult.getData();
        if (mainView.showConfirmMessage(""String_Node_Str"" + ""String_Node_Str"",((MainView)mainView).getFrame())) {
          return findPerson(Server.LPI,searchPersonWrapper);
        }
        if (!removeRejectedMpiCandidates(mpiPersonList).isEmpty()) {
          return new SearchProcessResult(SearchProcessResult.Type.LIST,new SearchServerResponse(Server.MPI,mpiPersonList));
        }
 else {
          return new SearchProcessResult(SearchProcessResult.Type.EXIT,null);
        }
      }
    }
    return new SearchProcessResult(SearchProcessResult.Type.UNREACHABLE_SERVER,null);
  }
}","public SearchProcessResult findPerson(int targetServer,PersonWrapper searchPersonWrapper,boolean lastResort){
  if (targetServer == Server.MPI_LPI) {
    session.setMpiResultDisplayed(false);
    session.setLpiResultDisplayed(false);
  }
  if (targetServer == Server.MPI) {
    session.setMpiResultDisplayed(false);
  }
  if (targetServer == Server.LPI) {
    session.setLpiResultDisplayed(false);
  }
  if (!lastResort) {
    session.setRejectedMPICandidateList(null);
    session.setRejectedLPICandidateList(null);
  }
  List<Person> mpiPersonList=null;
  List<Person> lpiPersonList=null;
  session.setSearchPersonWrapper(searchPersonWrapper);
  RequestResult mpiRequestResult=session.getMpiRequestResult();
  RequestResult lpiRequestResult=session.getLpiRequestResult();
  RequestDispatcher.dispatch(createPersonRequest(searchPersonWrapper),mpiRequestResult,lpiRequestResult,RequestDispatcher.DispatchType.FIND,targetServer);
  if (mpiRequestResult.isSuccessful() && lpiRequestResult.isSuccessful()) {
    mpiPersonList=(List<Person>)mpiRequestResult.getData();
    lpiPersonList=(List<Person>)lpiRequestResult.getData();
    if (!lastResort || (lastResort && targetServer == Server.MPI_LPI)) {
      if (checkForLinkedCandidates(lpiPersonList)) {
        return new SearchProcessResult(SearchProcessResult.Type.LIST,new SearchServerResponse(Server.LPI,removeRejectedLpiCandidates(lpiPersonList)));
      }
 else {
        if (checkForFingerprintCandidates(mpiPersonList)) {
          return new SearchProcessResult(SearchProcessResult.Type.LIST,new SearchServerResponse(Server.MPI,removeRejectedMpiCandidates(mpiPersonList)));
        }
 else {
          if (!minimumSearchFingerprintsTaken()) {
            return new SearchProcessResult(SearchProcessResult.Type.NEXT_FINGERPRINT,null);
          }
 else {
            if (!session.getAnyUnsentFingerprints().isEmpty()) {
              for (              ImagedFingerprint imagedFingerprint : session.getAnyUnsentFingerprints()) {
                session.setActiveImagedFingerprint(imagedFingerprint);
                searchPersonWrapper.addFingerprint(imagedFingerprint);
                break;
              }
              return findPerson(Server.MPI_LPI,searchPersonWrapper);
            }
 else {
              if (!removeRejectedLpiCandidates(lpiPersonList).isEmpty()) {
                return new SearchProcessResult(SearchProcessResult.Type.LIST,new SearchServerResponse(Server.LPI,lpiPersonList));
              }
 else {
                if (!removeRejectedMpiCandidates(mpiPersonList).isEmpty()) {
                  return new SearchProcessResult(SearchProcessResult.Type.LIST,new SearchServerResponse(Server.MPI,mpiPersonList));
                }
 else {
                  return new SearchProcessResult(SearchProcessResult.Type.EXIT,null);
                }
              }
            }
          }
        }
      }
    }
 else     if (lastResort && targetServer == Server.MPI) {
      if (!removeRejectedMpiCandidates(mpiPersonList).isEmpty()) {
        return new SearchProcessResult(SearchProcessResult.Type.LIST,new SearchServerResponse(Server.MPI,mpiPersonList));
      }
 else {
        return new SearchProcessResult(SearchProcessResult.Type.EXIT,null);
      }
    }
 else     if (lastResort && targetServer == Server.LPI) {
      if (!removeRejectedLpiCandidates(lpiPersonList).isEmpty()) {
        return new SearchProcessResult(SearchProcessResult.Type.LIST,new SearchServerResponse(Server.LPI,lpiPersonList));
      }
 else {
        return new SearchProcessResult(SearchProcessResult.Type.EXIT,null);
      }
    }
 else {
      Mediator.getLogger(MainViewHelper.class.getName()).log(Level.SEVERE,""String_Node_Str"");
      return new SearchProcessResult(SearchProcessResult.Type.EXIT,null);
    }
  }
 else {
    if (!lastResort) {
      if (!mpiRequestResult.isSuccessful() && !lpiRequestResult.isSuccessful()) {
        if (mainView.showConfirmMessage(""String_Node_Str"" + ""String_Node_Str"",((MainView)mainView).getFrame())) {
          return findPerson(Server.MPI_LPI,searchPersonWrapper);
        }
      }
 else {
        if (!mpiRequestResult.isSuccessful() && lpiRequestResult.isSuccessful()) {
          lpiPersonList=(List<Person>)lpiRequestResult.getData();
          if (mainView.showConfirmMessage(""String_Node_Str"" + ""String_Node_Str"",((MainView)mainView).getFrame())) {
            return findPerson(Server.MPI,searchPersonWrapper);
          }
          if (!removeRejectedLpiCandidates(lpiPersonList).isEmpty()) {
            return new SearchProcessResult(SearchProcessResult.Type.LIST,new SearchServerResponse(Server.LPI,lpiPersonList));
          }
 else {
            return new SearchProcessResult(SearchProcessResult.Type.EXIT,null);
          }
        }
 else         if (!lpiRequestResult.isSuccessful() && mpiRequestResult.isSuccessful()) {
          mpiPersonList=(List<Person>)mpiRequestResult.getData();
          if (mainView.showConfirmMessage(""String_Node_Str"" + ""String_Node_Str"",((MainView)mainView).getFrame())) {
            return findPerson(Server.LPI,searchPersonWrapper);
          }
          if (!removeRejectedMpiCandidates(mpiPersonList).isEmpty()) {
            return new SearchProcessResult(SearchProcessResult.Type.LIST,new SearchServerResponse(Server.MPI,mpiPersonList));
          }
 else {
            return new SearchProcessResult(SearchProcessResult.Type.EXIT,null);
          }
        }
      }
      return new SearchProcessResult(SearchProcessResult.Type.UNREACHABLE_SERVER,null);
    }
 else {
      return new SearchProcessResult(SearchProcessResult.Type.EXIT,null);
    }
  }
}",0.6280135485156406
93065,"protected void loadDriver() throws DriverNotFoundException {
  try {
    Class.forName(driver);
  }
 catch (  ClassNotFoundException ex) {
    Logger.getLogger(DatabaseConnector.class.getName()).log(Level.SEVERE,null,ex);
    throw new DriverNotFoundException(ex);
  }
}","private void loadDriver() throws DriverNotFoundException {
  try {
    Class.forName(driver);
  }
 catch (  ClassNotFoundException ex) {
    Logger.getLogger(DatabaseConnector.class.getName()).log(Level.SEVERE,null,ex);
    throw new DriverNotFoundException(ex);
  }
}",0.9776951672862454
93066,"protected void connectToSource() throws SQLException, InaccessibleConfigurationFileException, DriverNotFoundException {
  loadConnectionProperties(""String_Node_Str"");
  loadDriver();
  connection=DriverManager.getConnection(url,username,password);
}","protected void connectToSource() throws SQLException, InaccessibleConfigurationFileException, DriverNotFoundException {
  connectToDatabase(""String_Node_Str"");
}",0.7414634146341463
93067,"protected void loadConnectionProperties(String propertiesFile) throws InaccessibleConfigurationFileException {
  try {
    Properties properties=new Properties();
    properties.load(new FileInputStream(propertiesFile));
    database=properties.getProperty(""String_Node_Str"");
    url=properties.getProperty(""String_Node_Str"");
    driver=properties.getProperty(""String_Node_Str"");
    username=properties.getProperty(""String_Node_Str"");
    password=properties.getProperty(""String_Node_Str"");
    schemaPattern=properties.getProperty(""String_Node_Str"");
    tableTypes=properties.getProperty(""String_Node_Str"");
    if (tableTypes == null) {
      tableTypes=""String_Node_Str"";
    }
  }
 catch (  IOException ex) {
    Logger.getLogger(DatabaseConnector.class.getName()).log(Level.SEVERE,null,ex);
    throw new InaccessibleConfigurationFileException(ex);
  }
}","private void loadConnectionProperties(String propertiesFile) throws InaccessibleConfigurationFileException {
  try {
    Properties properties=new Properties();
    properties.load(new FileInputStream(propertiesFile));
    database=properties.getProperty(""String_Node_Str"");
    url=properties.getProperty(""String_Node_Str"");
    driver=properties.getProperty(""String_Node_Str"");
    username=properties.getProperty(""String_Node_Str"");
    password=properties.getProperty(""String_Node_Str"");
    schemaPattern=properties.getProperty(""String_Node_Str"");
    tableTypes=properties.getProperty(""String_Node_Str"");
    if (tableTypes == null) {
      tableTypes=""String_Node_Str"";
    }
  }
 catch (  IOException ex) {
    Logger.getLogger(DatabaseConnector.class.getName()).log(Level.SEVERE,null,ex);
    throw new InaccessibleConfigurationFileException(ex);
  }
}",0.9930394431554525
93068,"protected void connectToShadow() throws SQLException, InaccessibleConfigurationFileException, DriverNotFoundException {
  loadConnectionProperties(""String_Node_Str"");
  loadDriver();
  connection=DriverManager.getConnection(url,username,password);
}","protected void connectToShadow() throws SQLException, InaccessibleConfigurationFileException, DriverNotFoundException {
  connectToDatabase(""String_Node_Str"");
}",0.7414634146341463
93069,"private void work() throws InaccessibleConfigurationFileException, DriverNotFoundException, SQLException {
  if (!working) {
    working=true;
    new SchemaSynchronizer().synchronize();
    new DataSynchronizer().synchronize();
    working=false;
  }
}","private void work() throws InaccessibleConfigurationFileException, DriverNotFoundException, SQLException {
  new SchemaSynchronizer().synchronize();
  new DataSynchronizer().synchronize();
  try {
    Thread.sleep(15000);
  }
 catch (  InterruptedException ex) {
    Logger.getLogger(Daemon.class.getName()).log(Level.SEVERE,null,ex);
  }
}",0.4249578414839797
93070,"public void start() throws SQLException, InaccessibleConfigurationFileException, DriverNotFoundException {
  connectToSource();
  statement=connection.createStatement();
}","public void start() throws SQLException, InaccessibleConfigurationFileException, DriverNotFoundException {
  connectToSource();
  statement=connection.createStatement();
  statement.setFetchSize(Integer.MIN_VALUE);
}",0.8837209302325582
93071,"/** 
 * Test of main method, of class Main.
 */
@Test public void testNotifyPersonChanged(){
  System.out.println(""String_Node_Str"");
  int requestTypeId=RequestTypeId.NOTIFY_PERSON_CHANGED;
  PersonRequest requestData=new PersonRequest();
  Person p=new Person();
  requestData.setPerson(p);
  List<PersonIdentifier> personIdentifierList=new ArrayList<PersonIdentifier>();
  PersonIdentifier personIdentifier=new PersonIdentifier();
  personIdentifier.setIdentifier(""String_Node_Str"");
  personIdentifier.setIdentifierType(PersonIdentifier.Type.cccLocalId);
  p.setPersonIdentifierList(personIdentifierList);
  p.setFirstName(""String_Node_Str"");
  p.setLastName(""String_Node_Str"");
  p.setMiddleName(""String_Node_Str"");
  p.setSex(Person.Sex.F);
  p.setPregnancyEndDate(parseDate(""String_Node_Str""));
  p.setPregnancyOutcome(Person.PregnancyOutcome.multipleBirths);
  Visit visit=new Visit();
  visit.setAddress(""String_Node_Str"");
  visit.setVisitDate(new Date());
  p.setLastRegularVisit(visit);
  requestData.setDestinationName(""String_Node_Str"");
  requestData.setDestinationAddress(""String_Node_Str"");
  mediator.getData(requestTypeId,requestData);
}","/** 
 * Test of main method, of class Main.
 */
@Test public void testNotifyPersonChanged(){
  System.out.println(""String_Node_Str"");
  int requestTypeId=RequestTypeId.NOTIFY_PERSON_CHANGED;
  PersonRequest requestData=new PersonRequest();
  Person p=new Person();
  requestData.setPerson(p);
  List<PersonIdentifier> personIdentifierList=new ArrayList<PersonIdentifier>();
  PersonIdentifier personIdentifier=new PersonIdentifier();
  personIdentifier.setIdentifier(""String_Node_Str"");
  personIdentifier.setIdentifierType(PersonIdentifier.Type.cccLocalId);
  p.setPersonIdentifierList(personIdentifierList);
  p.setFirstName(""String_Node_Str"");
  p.setLastName(""String_Node_Str"");
  p.setMiddleName(""String_Node_Str"");
  p.setSex(Person.Sex.F);
  p.setVillageName(""String_Node_Str"");
  p.setPreviousVillageName(""String_Node_Str"");
  p.setLastMoveDate(parseDate(""String_Node_Str""));
  Visit visit=new Visit();
  visit.setAddress(""String_Node_Str"");
  visit.setVisitDate(new Date());
  p.setLastRegularVisit(visit);
  requestData.setDestinationName(""String_Node_Str"");
  requestData.setDestinationAddress(""String_Node_Str"");
  mediator.getData(requestTypeId,requestData);
}",0.9025332760841565
93072,"/** 
 * Unpacks a generic HL7 person-related message into a <code>Document</code>. <p> Several of the HL7 person-related messages use the same formatting rules, even though the templates differ. (The templates differ only in the boilerplate parts that do not concern us directly.) These messages are: <p> CREATE PERSON <br> MODIFY PERSON <br> NOTIFY PERSON CHANGED
 * @param m the message contents to fill in
 * @param e root node of the person message <code>Document</code> parsed from XML
 */
private void unpackGenericPersonMessage(Message m,Element e){
  PersonRequest personRequest=new PersonRequest();
  personRequest.setXml(m.getXml());
  m.setData(personRequest);
  Person p=new Person();
  personRequest.setPerson(p);
  unpackHl7Header(m,e);
  Element ePerson=(Element)e.getElementsByTagName(""String_Node_Str"").item(0);
  m.setData(p);
  unpackPerson(p,ePerson);
}","/** 
 * Unpacks a generic HL7 person-related message into a <code>Document</code>. <p> Several of the HL7 person-related messages use the same formatting rules, even though the templates differ. (The templates differ only in the boilerplate parts that do not concern us directly.) These messages are: <p> CREATE PERSON <br> MODIFY PERSON <br> NOTIFY PERSON CHANGED
 * @param m the message contents to fill in
 * @param e root node of the person message <code>Document</code> parsed from XML
 */
private void unpackGenericPersonMessage(Message m,Element e){
  PersonRequest personRequest=new PersonRequest();
  personRequest.setXml(m.getXml());
  m.setData(personRequest);
  Person p=new Person();
  personRequest.setPerson(p);
  unpackHl7Header(m,e);
  Element ePerson=(Element)e.getElementsByTagName(""String_Node_Str"").item(0);
  unpackPerson(p,ePerson);
}",0.9653179190751444
93073,"/** 
 * Waits for a response to this queue entry. The thread will be suspended until either a matching response is received, or the message times out.
 * @param e the queue entry for which to wait.
 * @return the response message if there was one, otherwise null
 */
Message waitForResponse(Entry e){
synchronized (e) {
    if (e.response == null) {
      if (!timeoutThread.isAlive()) {
        timeoutThread.start();
      }
      try {
        e.wait();
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  dequeue(e);
  return e.response;
}","/** 
 * Waits for a response to this queue entry. The thread will be suspended until either a matching response is received, or the message times out.
 * @param e the queue entry for which to wait.
 * @return the response message if there was one, otherwise null
 */
Message waitForResponse(Entry e){
synchronized (timeoutThread) {
    if (!timeoutThread.isAlive()) {
      timeoutThread.start();
    }
  }
synchronized (e) {
    if (e.response == null) {
      try {
        e.wait();
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  dequeue(e);
  return e.response;
}",0.8407310704960835
93074,"/** 
 * Unpacks data from an element value. <pre>  {@code <subtree> .... <(tag)> (value) </(tag)> .... </subtree>} </pre>
 * @param subtree Document subtree in which to look for the element
 * @param tag name of the element from which to unpack the value
 * @return value value of the element. If the element was not found,returns null.
 */
private String unpackTagValue(Element subtree,String tag){
  Element e=(Element)subtree.getElementsByTagName(tag).item(0);
  if (e != null) {
    return e.getNodeValue();
  }
 else {
    return null;
  }
}","/** 
 * Unpacks data from an element value. <pre>  {@code <subtree> .... <(tag)> (value) </(tag)> .... </subtree>} </pre>
 * @param subtree Document subtree in which to look for the element
 * @param tag name of the element from which to unpack the value
 * @return value value of the element. If the element was not found,returns null.
 */
private String unpackTagValue(Element subtree,String tag){
  Element e=(Element)subtree.getElementsByTagName(tag).item(0);
  if (e != null) {
    return e.getTextContent();
  }
 else {
    return null;
  }
}",0.9817184643510056
93075,"/** 
 * Packs a value into a new <code>Element</code>, and links it to a parent <code>Element</code>. If the value is null , the new element is not added
 * @param doc the document we are packing into
 * @param parent parent element for our new element
 * @param elementName name of the new element to create
 * @param value value of the new element to create
 */
private void packNewElement(Document doc,Element parent,String elementName,String value){
  if (value != null) {
    Element element=doc.createElement(elementName);
    element.setNodeValue(value);
    parent.appendChild(element);
  }
}","/** 
 * Packs a value into a new <code>Element</code>, and links it to a parent <code>Element</code>. If the value is null , the new element is not added
 * @param doc the document we are packing into
 * @param parent parent element for our new element
 * @param elementName name of the new element to create
 * @param value value of the new element to create
 */
private void packNewElement(Document doc,Element parent,String elementName,String value){
  if (value != null) {
    Element element=doc.createElement(elementName);
    element.setTextContent(value);
    parent.appendChild(element);
  }
}",0.9833610648918468
93076,"/** 
 * Unpacks a Work message <code>Document</code> into message data. Uses Work message type.
 * @param m the message contents to fill in
 * @param e root of the person message <code>Document</code> parsed from XML
 */
private void unpackWorkMessage(Message m,Element e){
  Work work=new Work();
  m.setData(work);
  work.setSourceAddress(e.getElementsByTagName(""String_Node_Str"").item(0).getNodeValue());
  work.setSourceAddress(e.getElementsByTagName(""String_Node_Str"").item(0).getNodeValue());
  work.setSourceAddress(e.getElementsByTagName(""String_Node_Str"").item(0).getNodeValue());
}","/** 
 * Unpacks a Work message <code>Document</code> into message data. Uses Work message type.
 * @param m the message contents to fill in
 * @param e root of the person message <code>Document</code> parsed from XML
 */
private void unpackWorkMessage(Message m,Element e){
  Work work=new Work();
  m.setData(work);
  work.setSourceAddress(e.getElementsByTagName(""String_Node_Str"").item(0).getTextContent());
  work.setSourceAddress(e.getElementsByTagName(""String_Node_Str"").item(0).getTextContent());
  work.setSourceAddress(e.getElementsByTagName(""String_Node_Str"").item(0).getTextContent());
}",0.9494949494949496
93077,"/** 
 * Unpacks a Log Entry <code>Document</code> into message data. Uses LogEntry message type.
 * @param m the message contents to fill in
 * @param e root of the person message <code>Document</code> parsed from XML
 */
private void unpackLogEntryMessage(Message m,Element e){
  LogEntry logEntry=new LogEntry();
  m.setData(logEntry);
  logEntry.setSeverity(e.getElementsByTagName(""String_Node_Str"").item(0).getNodeValue());
  logEntry.setClassName(e.getElementsByTagName(""String_Node_Str"").item(0).getNodeValue());
  logEntry.setDateTime(unpackDateTime(e.getElementsByTagName(""String_Node_Str"").item(0).getNodeValue()));
  logEntry.setMessage(e.getElementsByTagName(""String_Node_Str"").item(0).getNodeValue());
  logEntry.setInstance(e.getElementsByTagName(""String_Node_Str"").item(0).getNodeValue());
}","/** 
 * Unpacks a Log Entry <code>Document</code> into message data. Uses LogEntry message type.
 * @param m the message contents to fill in
 * @param e root of the person message <code>Document</code> parsed from XML
 */
private void unpackLogEntryMessage(Message m,Element e){
  LogEntry logEntry=new LogEntry();
  m.setData(logEntry);
  logEntry.setSeverity(e.getElementsByTagName(""String_Node_Str"").item(0).getTextContent());
  logEntry.setClassName(e.getElementsByTagName(""String_Node_Str"").item(0).getTextContent());
  logEntry.setDateTime(unpackDateTime(e.getElementsByTagName(""String_Node_Str"").item(0).getTextContent()));
  logEntry.setMessage(e.getElementsByTagName(""String_Node_Str"").item(0).getTextContent());
  logEntry.setInstance(e.getElementsByTagName(""String_Node_Str"").item(0).getTextContent());
}",0.9382716049382716
93078,"/** 
 * Unpacks a person name into a <code>Person</code> object. For findPerson the tagname containing the name elements is ""livingSubjectName"". For other person messages the tagName is ""name"".
 * @param p the person data into which to put the person name.
 * @param e head of the <code>Document</code> subtree in which this person is found
 * @param tagName name of the enclosing element for the person's name
 */
private void unpackPersonName(Person p,Element e,String tagName){
  Element eName=(Element)e.getElementsByTagName(""String_Node_Str"").item(0);
  if (eName != null) {
    NodeList givenList=eName.getElementsByTagName(""String_Node_Str"");
    if (givenList.getLength() > 0) {
      p.setFirstName(givenList.item(0).getNodeValue());
      if (givenList.getLength() > 1) {
        p.setMiddleName(givenList.item(1).getNodeValue());
      }
    }
    p.setLastName(unpackTagValue(eName,""String_Node_Str""));
  }
}","/** 
 * Unpacks a person name into a <code>Person</code> object. For findPerson the tagname containing the name elements is ""livingSubjectName"". For other person messages the tagName is ""name"".
 * @param p the person data into which to put the person name.
 * @param e head of the <code>Document</code> subtree in which this person is found
 * @param tagName name of the enclosing element for the person's name
 */
private void unpackPersonName(Person p,Element e,String tagName){
  Element eName=(Element)e.getElementsByTagName(""String_Node_Str"").item(0);
  if (eName != null) {
    NodeList givenList=eName.getElementsByTagName(""String_Node_Str"");
    if (givenList.getLength() > 0) {
      p.setFirstName(givenList.item(0).getTextContent());
      if (givenList.getLength() > 1) {
        p.setMiddleName(givenList.item(1).getTextContent());
      }
    }
    p.setLastName(unpackTagValue(eName,""String_Node_Str""));
  }
}",0.9783080260303688
93079,"/** 
 * FindPerson test of getData method, of class Mediator.
 */
@Test public void testFindPerson(){
  System.out.println(""String_Node_Str"");
  String instanceName=Mediator.getProperty(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + instanceName + ""String_Node_Str"");
  Mediator mediator=new Mediator();
  PersonRequest requestData=new PersonRequest();
  Person p=new Person();
  requestData.setPerson(p);
  Object result;
  PersonResponse pr;
  List<Person> pList;
  p.setClanName(""String_Node_Str"");
  result=mediator.getData(RequestTypeId.FIND_PERSON_MPI,requestData);
  assertNotNull(result);
  assertSame(PersonResponse.class,result.getClass());
  pr=(PersonResponse)result;
  assertTrue(pr.isSuccessful());
  assertNull(pr.getPersonList());
  p.setClanName(""String_Node_Str"");
  result=mediator.getData(RequestTypeId.FIND_PERSON_MPI,requestData);
  assertNotNull(result);
  assertSame(PersonResponse.class,result.getClass());
  pr=(PersonResponse)result;
  assertTrue(pr.isSuccessful());
  pList=pr.getPersonList();
  assertNotNull(pList);
  int pCount=pList.size();
  assertEquals(pCount,8);
  for (int i=0; i < pList.size(); i++) {
    Person person=pList.get(i);
    String guid=person.getPersonGuid();
    for (int j=0; j < i; j++) {
      assertFalse(pList.get(j).getPersonGuid().equals(guid));
    }
  }
  Person p0=pList.get(0);
  int score=p0.getMatchScore();
  assertEquals(score,100);
}","/** 
 * FindPerson test of getData method, of class Mediator.
 */
@Test public void testFindPerson(){
  System.out.println(""String_Node_Str"");
  String instanceName=Mediator.getProperty(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + instanceName + ""String_Node_Str"");
  Mediator mediator=new Mediator();
  PersonRequest requestData=new PersonRequest();
  Person p=new Person();
  requestData.setPerson(p);
  Object result;
  PersonResponse pr;
  List<Person> pList;
  p.setClanName(""String_Node_Str"");
  result=mediator.getData(RequestTypeId.FIND_PERSON_MPI,requestData);
  assertNotNull(result);
  assertSame(PersonResponse.class,result.getClass());
  pr=(PersonResponse)result;
  assertTrue(pr.isSuccessful());
  assertNull(pr.getPersonList());
  p.setClanName(""String_Node_Str"");
  result=mediator.getData(RequestTypeId.FIND_PERSON_MPI,requestData);
  assertNotNull(result);
  assertSame(PersonResponse.class,result.getClass());
  pr=(PersonResponse)result;
  assertTrue(pr.isSuccessful());
  pList=pr.getPersonList();
  assertNotNull(pList);
  int pCount=pList.size();
  assertEquals(pCount,8);
  for (int i=0; i < pList.size(); i++) {
    Person person=pList.get(i);
    assertNotNull(person.getFirstName());
    assertNotNull(person.getMiddleName());
    assertNotNull(person.getLastName());
    String guid=person.getPersonGuid();
    for (int j=0; j < i; j++) {
      assertFalse(pList.get(j).getPersonGuid().equals(guid));
    }
  }
  Person p0=pList.get(0);
  int score=p0.getMatchScore();
  assertEquals(score,100);
}",0.9574036511156186
93080,"@Override public boolean appliesTo(Event event){
  return super.appliesTo(event) && event.type == SWT.MouseDoubleClick;
}","/** 
 * MouseDoubleClick event does not set event.item, so only event.widget should be checked. Also, single selection is necessary before MouseDoubleClick.
 */
@Override public boolean appliesTo(Event event){
  return event.widget instanceof Tree && event.type == SWT.MouseDoubleClick && ((Tree)event.widget).getSelectionCount() == 1;
}",0.4410480349344978
93081,"/** 
 * Double clicks on this node.
 * @return the current node.
 * @since 1.2
 */
public SWTBotTreeItem doubleClick(){
  waitForEnabled();
  log.debug(MessageFormat.format(""String_Node_Str"",this));
  notifyTree(SWT.MouseEnter,createMouseEvent(0,SWT.NONE,0));
  notifyTree(SWT.Activate,super.createEvent());
  syncExec(new VoidResult(){
    @Override public void run(){
      if (tree.getSelectionCount() != 1 || !tree.getSelection()[0].equals(widget)) {
        tree.setSelection(widget);
      }
      if (!tree.isFocusControl()) {
        tree.setFocus();
      }
    }
  }
);
  notifyTree(SWT.FocusIn,super.createEvent());
  notifyTree(SWT.MouseDown,createMouseEvent(1,SWT.NONE,1));
  notifyTree(SWT.Selection);
  notifyTree(SWT.MouseUp,createMouseEvent(1,SWT.BUTTON1,1));
  notifyTree(SWT.MouseDown,createMouseEvent(1,SWT.NONE,2));
  notifyTree(SWT.Selection);
  notifyTree(SWT.MouseDoubleClick,createMouseEvent(1,SWT.NONE,2));
  notifyTree(SWT.DefaultSelection);
  notifyTree(SWT.MouseUp,createMouseEvent(1,SWT.BUTTON1,2));
  notifyTree(SWT.MouseExit,createMouseEvent(0,SWT.NONE,0));
  notifyTree(SWT.Deactivate,super.createEvent());
  notifyTree(SWT.FocusOut,super.createEvent());
  log.debug(MessageFormat.format(""String_Node_Str"",this));
  return this;
}","/** 
 * Double clicks on this node.
 * @return the current node.
 * @since 1.2
 */
public SWTBotTreeItem doubleClick(){
  waitForEnabled();
  log.debug(MessageFormat.format(""String_Node_Str"",this));
  notifyTree(SWT.MouseEnter,createMouseEvent(0,SWT.NONE,0));
  notifyTree(SWT.Activate,super.createEvent());
  syncExec(new VoidResult(){
    @Override public void run(){
      if (tree.getSelectionCount() != 1 || !tree.getSelection()[0].equals(widget)) {
        tree.setSelection(widget);
      }
      if (!tree.isFocusControl()) {
        tree.setFocus();
      }
    }
  }
);
  notifyTree(SWT.FocusIn,super.createEvent());
  notifyTree(SWT.MouseDown,createMouseEvent(1,SWT.NONE,1));
  notifyTree(SWT.Selection);
  notifyTree(SWT.MouseUp,createMouseEvent(1,SWT.BUTTON1,1));
  notifyTree(SWT.MouseDown,createMouseEvent(1,SWT.NONE,2));
  notifyTree(SWT.MouseDoubleClick,createMouseEvent(1,SWT.NONE,2));
  notifyTree(SWT.DefaultSelection);
  notifyTree(SWT.MouseUp,createMouseEvent(1,SWT.BUTTON1,2));
  notifyTree(SWT.MouseExit,createMouseEvent(0,SWT.NONE,0));
  notifyTree(SWT.Deactivate,super.createEvent());
  notifyTree(SWT.FocusOut,super.createEvent());
  log.debug(MessageFormat.format(""String_Node_Str"",this));
  return this;
}",0.9883860632759311
93082,"@Test public void canRightClickOnANode() throws Exception {
  SWTBotTreeItem node=tree.expandNode(""String_Node_Str"").expandNode(""String_Node_Str"").expandNode(""String_Node_Str"");
  bot.button(""String_Node_Str"").click();
  node.contextMenu(""String_Node_Str"").click();
  assertEventMatches(listeners,""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(0,tree.widget) + ""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"");
}","@Test public void canRightClickOnANode() throws Exception {
  SWTBotTreeItem node=tree.expandNode(""String_Node_Str"").expandNode(""String_Node_Str"").expandNode(""String_Node_Str"");
  bot.button(""String_Node_Str"").click();
  node.contextMenu(""String_Node_Str"").click();
  assertEventMatches(listeners,""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(SWT.BUTTON1,tree.widget) + ""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"");
}",0.9873417721518988
93083,"/** 
 * Selects the given index items. Replaces the current selection. If there is more than one item to select, the table must have the SWT.MULTI style.
 * @param indices the row indices to select in the table.
 */
public void select(final int... indices){
  waitForEnabled();
  if (indices.length > 1) {
    assertMultiSelect();
  }
 else   if (indices.length == 0) {
    unselect();
    return;
  }
  setFocus();
  log.debug(MessageFormat.format(""String_Node_Str"",StringUtils.join(indices,""String_Node_Str""),this));
  for (int i=0; i < indices.length; i++) {
    assertIsLegalRowIndex(indices[i]);
  }
  asyncExec(new VoidResult(){
    public void run(){
      for (int i=0; i < indices.length; i++) {
        lastSelectionItem=widget.getItem(indices[i]);
        if (i == 0) {
          widget.setSelection(indices[0]);
          notifySelect();
        }
 else {
          widget.select(indices[i]);
          notifySelect(true);
        }
      }
    }
  }
);
}","/** 
 * Selects the given index items. Replaces the current selection. If there is more than one item to select, the table must have the SWT.MULTI style.
 * @param indices the row indices to select in the table.
 */
public void select(final int... indices){
  waitForEnabled();
  if (indices.length > 1) {
    assertMultiSelect();
  }
 else   if (indices.length == 0) {
    unselect();
    return;
  }
  setFocus();
  log.debug(MessageFormat.format(""String_Node_Str"",Arrays.toString(indices),this));
  for (int i=0; i < indices.length; i++) {
    assertIsLegalRowIndex(indices[i]);
  }
  final List<TableItem> selection=new ArrayList<TableItem>();
  for (  int index : indices) {
    selection.add(getItem(index));
  }
  for (int i=0; i < selection.size(); i++) {
    boolean add=(i != 0);
    processSelection(selection.get(i),add);
    notifySelect(add);
  }
}",0.7031164570803717
93084,"/** 
 * Unselects the given row.
 * @param row index of the row to unselect
 */
private void unselect(final int row){
  waitForEnabled();
  setFocus();
  asyncExec(new VoidResult(){
    public void run(){
      if (widget.isSelected(row)) {
        log.debug(MessageFormat.format(""String_Node_Str"",row,widget));
        widget.deselect(row);
        lastSelectionItem=widget.getItem(row);
        notifySelect(true);
      }
 else {
        log.debug(MessageFormat.format(""String_Node_Str"",widget));
      }
    }
  }
);
}","/** 
 * Unselects the given table item.
 * @param item table item to unselect
 */
private void unselect(final TableItem item){
  asyncExec(new VoidResult(){
    public void run(){
      widget.deselect(widget.indexOf(item));
      lastSelectionItem=item;
    }
  }
);
}",0.4146649810366624
93085,"/** 
 * Selects the indices provided. Replaces the current selection. If there is more than one item to select, the tree must have the SWT.MULTI style.
 * @param indices the indices to select.
 * @return this same instance.
 */
public SWTBotTree select(final int... indices){
  waitForEnabled();
  setFocus();
  if (indices.length > 1) {
    assertMultiSelect();
  }
 else   if (indices.length == 0) {
    return unselect();
  }
  asyncExec(new VoidResult(){
    public void run(){
      log.debug(MessageFormat.format(""String_Node_Str"",StringUtils.join(indices,""String_Node_Str""),this));
      for (int i=0; i < indices.length; i++) {
        lastSelectionItem=widget.getItem(indices[i]);
        processSelection(i);
      }
    }
  }
);
  return this;
}","/** 
 * Selects the indices provided. Replaces the current selection. If there is more than one item to select, the tree must have the SWT.MULTI style.
 * @param indices the indices to select.
 * @return this same instance.
 */
public SWTBotTree select(final int... indices){
  waitForEnabled();
  setFocus();
  if (indices.length > 1) {
    assertMultiSelect();
  }
 else   if (indices.length == 0) {
    return unselect();
  }
  final List<TreeItem> selection=new ArrayList<TreeItem>();
  for (  int index : indices) {
    selection.add(getItem(index));
  }
  log.debug(MessageFormat.format(""String_Node_Str"",Arrays.toString(indices),this));
  for (int i=0; i < selection.size(); i++) {
    boolean add=(i != 0);
    processSelection(selection.get(i),add);
    notifySelect(add);
  }
  return this;
}",0.7124518613607189
93086,"/** 
 * Unselects the selection in the tree.
 * @return this same instance.
 */
public SWTBotTree unselect(){
  waitForEnabled();
  asyncExec(new VoidResult(){
    public void run(){
      log.debug(MessageFormat.format(""String_Node_Str"",widget));
      TreeItem[] items=widget.getSelection();
      for (      TreeItem item : items) {
        widget.deselect(item);
        lastSelectionItem=item;
        notifySelect(true);
      }
    }
  }
);
  return this;
}","/** 
 * Unselects the given tree item.
 * @param item tree item to unselect
 */
private void unselect(final TreeItem item){
  asyncExec(new VoidResult(){
    public void run(){
      widget.deselect(item);
      lastSelectionItem=item;
    }
  }
);
}",0.3137254901960784
93087,"/** 
 * Selects widget and notifies selection
 * @param i index of item getting selected
 */
private void processSelection(int i){
  if (i == 0) {
    widget.setSelection(lastSelectionItem);
    notifySelect();
  }
 else {
    widget.select(lastSelectionItem);
    notifySelect(true);
  }
}","/** 
 * Selects a tree item
 * @param item the tree item to select
 * @param add true to add to current selection
 */
private void processSelection(final TreeItem item,final boolean add){
  syncExec(new VoidResult(){
    public void run(){
      if (add) {
        widget.select(item);
      }
 else {
        widget.setSelection(item);
      }
      lastSelectionItem=item;
    }
  }
);
}",0.1354933726067746
93088,"@Test public void clicksOnALinkWithHyperlinkTextAndHREF() throws Exception {
  link.click(""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(0,link.widget) + ""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(0,link.widget) + ""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(524288,link.widget) + ""String_Node_Str"");
}","@Test public void clicksOnALinkWithHyperlinkTextAndHREF() throws Exception {
  link.click(""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(0,link.widget) + ""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(0,link.widget) + ""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(0,link.widget) + ""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(SWT.BUTTON1,link.widget) + ""String_Node_Str"");
}",0.7892204042348412
93089,"@Test public void clicksOnALinkWithHyperlinkTextAndNoHREF() throws Exception {
  link.click(""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(0,link.widget) + ""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(0,link.widget) + ""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(524288,link.widget) + ""String_Node_Str"");
}","@Test public void clicksOnALinkWithHyperlinkTextAndNoHREF() throws Exception {
  link.click(""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(0,link.widget) + ""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(0,link.widget) + ""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(0,link.widget) + ""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(SWT.BUTTON1,link.widget) + ""String_Node_Str"");
}",0.7900287631831256
93090,"@Test public void clicksOnALink() throws Exception {
  link.click();
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(0,link.widget) + ""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(524288,link.widget) + ""String_Node_Str"");
}","@Test public void clicksOnALink() throws Exception {
  link.click();
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(0,link.widget) + ""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(0,link.widget) + ""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(0,link.widget) + ""String_Node_Str"");
  assertEventMatches(listeners,""String_Node_Str"" + toStateMask(SWT.BUTTON1,link.widget) + ""String_Node_Str"");
}",0.5927654609101517
93091,"/** 
 * Clicks on the hyperlink with the specified text.
 * @param hyperlinkText the text of the hyperlink in case there are more than one hyperlinks.
 * @return itself.
 */
public AbstractSWTBot<Link> click(String hyperlinkText){
  String text=getText();
  boolean isText=text.contains(""String_Node_Str"" + hyperlinkText + ""String_Node_Str"");
  Assert.isLegal(isText,""String_Node_Str"" + hyperlinkText + ""String_Node_Str""+ text+ ""String_Node_Str"");
  hyperlinkText=extractHyperlinkTextOrHREF(hyperlinkText,text);
  notify(SWT.MouseDown,createMouseEvent(0,0,1,SWT.NONE,1));
  notify(SWT.Selection,createHyperlinkEvent(hyperlinkText));
  notify(SWT.MouseUp,createMouseEvent(0,0,1,SWT.BUTTON1,1));
  return this;
}","/** 
 * Clicks on the hyperlink with the specified text.
 * @param hyperlinkText the text of the hyperlink in case there are more than one hyperlinks.
 * @return itself.
 */
public AbstractSWTBot<Link> click(String hyperlinkText){
  String text=getText();
  boolean isText=text.contains(""String_Node_Str"" + hyperlinkText + ""String_Node_Str"");
  Assert.isLegal(isText,""String_Node_Str"" + hyperlinkText + ""String_Node_Str""+ text+ ""String_Node_Str"");
  hyperlinkText=extractHyperlinkTextOrHREF(hyperlinkText,text);
  notify(SWT.MouseEnter,createMouseEvent(0,0,0,SWT.NONE,0));
  notify(SWT.Activate,createEvent());
  notify(SWT.FocusIn,createEvent());
  notify(SWT.MouseDown,createMouseEvent(0,0,1,SWT.NONE,1));
  notify(SWT.Selection,createHyperlinkEvent(hyperlinkText));
  notify(SWT.MouseUp,createMouseEvent(0,0,1,SWT.BUTTON1,1));
  return this;
}",0.9125964010282775
93092,"/** 
 * Unselects the given table item.
 * @param item table item to unselect
 */
private void unselect(final TableItem item){
  asyncExec(new VoidResult(){
    public void run(){
      widget.deselect(widget.indexOf(item));
      lastSelectionItem=item;
    }
  }
);
}","/** 
 * Unselects the given table item.
 * @param item table item to unselect
 */
private void unselect(final TableItem item){
  syncExec(new VoidResult(){
    public void run(){
      widget.deselect(widget.indexOf(item));
      lastSelectionItem=item;
    }
  }
);
}",0.9981378026070764
93093,"/** 
 * Unselects the given tree item.
 * @param item tree item to unselect
 */
private void unselect(final TreeItem item){
  asyncExec(new VoidResult(){
    public void run(){
      widget.deselect(item);
      lastSelectionItem=item;
    }
  }
);
}","/** 
 * Unselects the given tree item.
 * @param item tree item to unselect
 */
private void unselect(final TreeItem item){
  syncExec(new VoidResult(){
    public void run(){
      widget.deselect(item);
      lastSelectionItem=item;
    }
  }
);
}",0.997995991983968
93094,"@Override public boolean appliesTo(Event event){
  return event.widget instanceof Button && (((Button)event.widget).getStyle() & SWT.RADIO) != 0 && event.type == SWT.Selection;
}","@Override public boolean appliesTo(Event event){
  return event.widget instanceof Button && (((Button)event.widget).getStyle() & SWT.CHECK) != 0 && event.type == SWT.Selection;
}",0.9719101123595506
93095,"/** 
 * @param menu
 * @param matcher
 * @param recursive
 * @return
 */
private List<MenuItem> findMenusInternal(final Menu menu,final Matcher<MenuItem> matcher,final boolean recursive){
  LinkedHashSet<MenuItem> result=new LinkedHashSet<MenuItem>();
  if (menu != null) {
    MenuItem[] items=menu.getItems();
    for (    MenuItem menuItem : items) {
      if (menuItem.isDisposed() || isSeparator(menuItem)) {
        continue;
      }
      boolean matches=matcher.matches(menuItem);
      if (matches) {
        menuItem.notifyListeners(SWT.Arm,createEvent(menuItem));
        Menu subMenu=menuItem.getMenu();
        if (subMenu != null) {
          subMenu.notifyListeners(SWT.Show,createEvent(subMenu));
        }
        result.add(menuItem);
      }
      if (recursive) {
        Menu subMenu=menuItem.getMenu();
        if (subMenu != null) {
          if (!matches) {
            menuItem.notifyListeners(SWT.Arm,createEvent(menuItem));
            menu.notifyListeners(SWT.Show,createEvent(menu));
          }
          List<MenuItem> menuItems=findMenusInternal(menuItem.getMenu(),matcher,recursive);
          if (!menuItems.isEmpty()) {
            result.addAll(menuItems);
          }
 else {
            menu.notifyListeners(SWT.Hide,createEvent(menu));
          }
        }
      }
    }
  }
  return new ArrayList<MenuItem>(result);
}","/** 
 * @param menu
 * @param matcher
 * @param recursive
 * @return
 */
private List<MenuItem> findMenusInternal(final Menu menu,final Matcher<MenuItem> matcher,final boolean recursive){
  LinkedHashSet<MenuItem> result=new LinkedHashSet<MenuItem>();
  if (menu != null) {
    MenuItem[] items=menu.getItems();
    for (    MenuItem menuItem : items) {
      if (menuItem.isDisposed() || isSeparator(menuItem)) {
        continue;
      }
      boolean matches=matcher.matches(menuItem);
      if (matches) {
        menuItem.notifyListeners(SWT.Arm,createEvent(menuItem));
        Menu subMenu=menuItem.getMenu();
        if (subMenu != null) {
          subMenu.notifyListeners(SWT.Show,createEvent(subMenu));
        }
        result.add(menuItem);
      }
      if (recursive) {
        Menu subMenu=menuItem.getMenu();
        if (subMenu != null) {
          if (!matches) {
            menuItem.notifyListeners(SWT.Arm,createEvent(menuItem));
            subMenu.notifyListeners(SWT.Show,createEvent(subMenu));
          }
          List<MenuItem> menuItems=findMenusInternal(subMenu,matcher,recursive);
          if (!menuItems.isEmpty()) {
            result.addAll(menuItems);
          }
 else           if (!matches) {
            subMenu.notifyListeners(SWT.Hide,createEvent(subMenu));
          }
        }
      }
    }
  }
  return new ArrayList<MenuItem>(result);
}",0.9748267055819044
93096,"/** 
 * Gets the menubar for the given shell.
 * @see org.eclipse.swtbot.swt.finder.finders.MenuFinder#menuBar(org.eclipse.swt.widgets.Shell)
 * @param shell The shell to find the menu bar for.
 * @return The menu bar found.
 */
@Override protected Menu menuBar(final Shell shell){
  return UIThreadRunnable.syncExec(display,new WidgetResult<Menu>(){
    public Menu run(){
      return control.getMenu();
    }
  }
);
}","@Override protected Menu menuBar(final Shell shell){
  return UIThreadRunnable.syncExec(display,new WidgetResult<Menu>(){
    public Menu run(){
      return control.getMenu();
    }
  }
);
}",0.6252045826513911
93097,"/** 
 * Runs the process of finding the siblings.
 * @see org.eclipse.swtbot.swt.finder.results.ArrayResult#run()
 * @return The object found.
 */
public Widget[] run(){
  Widget[] siblings=new Widget[]{};
  if (isControl(w))   siblings=children(((Control)w).getParent());
 else   if (isTabItem(w))   siblings=((TabItem)w).getParent().getItems();
 else   if (isToolItem(w))   siblings=((ToolItem)w).getParent().getItems();
  return siblings;
}","/** 
 * Runs the process of finding the siblings.
 * @see org.eclipse.swtbot.swt.finder.results.ArrayResult#run()
 * @return The object found.
 */
public Widget[] run(){
  Widget[] siblings=new Widget[]{};
  if (isControl(w))   siblings=children(((Control)w).getParent());
 else   if (isTabItem(w))   siblings=((TabItem)w).getParent().getItems();
 else   if (isToolItem(w))   siblings=((ToolItem)w).getParent().getItems();
 else   if (isMenuItem(w))   siblings=((MenuItem)w).getParent().getItems();
  return siblings;
}",0.8877338877338877
93098,"/** 
 * Gets the menu matching the given name.
 * @param menuName the name of the menu item that is to be found
 * @return the first menu that matches the menuName
 * @throws WidgetNotFoundException if the widget is not found.
 */
public SWTBotMenu menu(final String menuName) throws WidgetNotFoundException {
  final Matcher<? extends Widget> matcher=withMnemonic(menuName);
  MenuItem menuItem=syncExec(new WidgetResult<MenuItem>(){
    public MenuItem run(){
      Menu bar=widget.getMenu();
      Matcher<MenuItem> withMnemonic=withMnemonic(menuName);
      List<MenuItem> menus=new MenuFinder().findMenus(bar,withMnemonic,true);
      if (!menus.isEmpty())       return menus.get(0);
      return null;
    }
  }
);
  return new SWTBotMenu(menuItem,matcher);
}","/** 
 * Gets the menu item matching the given name.
 * @param menuName the name of the menu item that is to be found
 * @return the first menu that matches the menuName
 * @throws WidgetNotFoundException if the widget is not found.
 */
public SWTBotMenu menu(final String menuName) throws WidgetNotFoundException {
  final Matcher<? extends Widget> matcher=withMnemonic(menuName);
  MenuItem menuItem=syncExec(new WidgetResult<MenuItem>(){
    public MenuItem run(){
      Menu bar=widget.getMenu();
      Matcher<MenuItem> withMnemonic=withMnemonic(menuName);
      List<MenuItem> menus=new MenuFinder().findMenus(bar,withMnemonic,true);
      if (!menus.isEmpty())       return menus.get(0);
      return null;
    }
  }
);
  return new SWTBotMenu(menuItem,matcher);
}",0.996742671009772
93099,"/** 
 * Clicks on the menu item
 */
public SWTBotMenu click(){
  log.debug(MessageFormat.format(""String_Node_Str"",this));
  waitForEnabled();
  toggleSelection();
  notify(SWT.Selection);
  log.debug(MessageFormat.format(""String_Node_Str"",this));
  return this;
}","/** 
 * Clicks on the menu item
 */
public SWTBotMenu click(){
  log.debug(MessageFormat.format(""String_Node_Str"",this));
  waitForEnabled();
  if (SWTUtils.hasStyle(widget,SWT.CHECK)) {
    toggleCheckSelection();
  }
 else   if (SWTUtils.hasStyle(widget,SWT.RADIO)) {
    setRadioSelection();
  }
  notify(SWT.Selection);
  log.debug(MessageFormat.format(""String_Node_Str"",this));
  return this;
}",0.7401812688821753
93100,"/** 
 * @param bar
 * @param matcher
 * @param recursive
 * @return
 */
private List<MenuItem> findMenusInternal(final Menu bar,final Matcher<MenuItem> matcher,final boolean recursive){
  LinkedHashSet<MenuItem> result=new LinkedHashSet<MenuItem>();
  if (bar != null) {
    MenuItem[] items=bar.getItems();
    for (    MenuItem menuItem : items) {
      if (isSeparator(menuItem)) {
        continue;
      }
      if (matcher.matches(menuItem))       result.add(menuItem);
      if (recursive)       result.addAll(findMenusInternal(menuItem.getMenu(),matcher,recursive));
    }
  }
  return new ArrayList<MenuItem>(result);
}","/** 
 * @param bar
 * @param matcher
 * @param recursive
 * @return
 */
private List<MenuItem> findMenusInternal(final Menu bar,final Matcher<MenuItem> matcher,final boolean recursive){
  LinkedHashSet<MenuItem> result=new LinkedHashSet<MenuItem>();
  if (bar != null) {
    bar.notifyListeners(SWT.Show,new Event());
    MenuItem[] items=bar.getItems();
    for (    MenuItem menuItem : items) {
      if (isSeparator(menuItem)) {
        continue;
      }
      if (matcher.matches(menuItem))       result.add(menuItem);
      if (recursive)       result.addAll(findMenusInternal(menuItem.getMenu(),matcher,recursive));
    }
    if (result.isEmpty()) {
      bar.notifyListeners(SWT.Hide,new Event());
    }
  }
  return new ArrayList<MenuItem>(result);
}",0.8787878787878788
93101,"/** 
 * @param bar
 * @param matcher
 * @param recursive
 * @return
 */
private List<MenuItem> findMenusInternal(final Menu bar,final Matcher<MenuItem> matcher,final boolean recursive){
  LinkedHashSet<MenuItem> result=new LinkedHashSet<MenuItem>();
  if (bar != null) {
    bar.notifyListeners(SWT.Show,new Event());
    MenuItem[] items=bar.getItems();
    for (    MenuItem menuItem : items) {
      if (isSeparator(menuItem)) {
        continue;
      }
      if (matcher.matches(menuItem))       result.add(menuItem);
      if (recursive)       result.addAll(findMenusInternal(menuItem.getMenu(),matcher,recursive));
    }
    bar.notifyListeners(SWT.Hide,new Event());
  }
  return new ArrayList<MenuItem>(result);
}","/** 
 * @param bar
 * @param matcher
 * @param recursive
 * @return
 */
private List<MenuItem> findMenusInternal(final Menu bar,final Matcher<MenuItem> matcher,final boolean recursive){
  LinkedHashSet<MenuItem> result=new LinkedHashSet<MenuItem>();
  if (bar != null) {
    bar.notifyListeners(SWT.Show,new Event());
    MenuItem[] items=bar.getItems();
    for (    MenuItem menuItem : items) {
      if (isSeparator(menuItem)) {
        continue;
      }
      if (matcher.matches(menuItem))       result.add(menuItem);
      if (recursive)       result.addAll(findMenusInternal(menuItem.getMenu(),matcher,recursive));
    }
    if (result.isEmpty()) {
      bar.notifyListeners(SWT.Hide,new Event());
    }
  }
  return new ArrayList<MenuItem>(result);
}",0.9756756756756756
93102,"/** 
 * Create contents of the dialog.
 * @param parent
 */
@Override protected Control createDialogArea(Composite parent){
  Composite container=(Composite)super.createDialogArea(parent);
  container.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  container.setLayout(new GridLayout(1,false));
  Composite generatorSelectionContainer=new Composite(container,SWT.NONE);
  generatorSelectionContainer.setLayout(new GridLayout(2,false));
  Label selectorLabel=new Label(generatorSelectionContainer,SWT.NONE);
  selectorLabel.setText(""String_Node_Str"");
  selectorLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false));
  ComboViewer comboViewer=new ComboViewer(generatorSelectionContainer);
  comboViewer.setContentProvider(new ArrayContentProvider());
  comboViewer.setLabelProvider(new LabelProvider(){
    @Override public String getText(    Object o){
      return ((Generator)o).getLabel();
    }
  }
);
  comboViewer.setInput(this.availableGenerators);
  comboViewer.setSelection(new StructuredSelection(this.recorder.getCurrentGenerator()));
  comboViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      Generator newGenerator=(Generator)((IStructuredSelection)event.getSelection()).getFirstElement();
      recorder.setGenerator(newGenerator);
    }
  }
);
  Label label=new Label(container,SWT.NONE);
  label.setText(""String_Node_Str"");
  this.generatedCode=new Text(container,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  this.generatedCode.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  Composite actionsComposite=new Composite(container,SWT.NONE);
  actionsComposite.setLayout(new RowLayout(SWT.HORIZONTAL));
  final Button recordPauseButton=new Button(actionsComposite,SWT.PUSH);
  recordPauseButton.setText(this.recorder.isRecording() ? ""String_Node_Str"" : ""String_Node_Str"");
  final Button copyButton=new Button(actionsComposite,SWT.PUSH);
  copyButton.setToolTipText(""String_Node_Str"");
  copyButton.setText(""String_Node_Str"");
  recordPauseButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      recorder.setRecording(!recorder.isRecording());
      recordPauseButton.setText(recorder.isRecording() ? ""String_Node_Str"" : ""String_Node_Str"");
    }
  }
);
  this.recorder.addListener(new CodeGenerationListener(){
    public void handleCodeGenerated(    GenerationRule code){
      for (      String action : code.getActions())       generatedCode.setText(generatedCode.getText() + action + ""String_Node_Str"");
    }
  }
);
  copyButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      final Clipboard cb=new Clipboard(Display.getCurrent());
      TextTransfer textTransfer=TextTransfer.getInstance();
      cb.setContents(new Object[]{generatedCode.getText()},new Transfer[]{textTransfer});
      cb.dispose();
    }
  }
);
  return container;
}","/** 
 * Create contents of the dialog.
 * @param parent
 */
@Override protected Control createDialogArea(Composite parent){
  Composite container=(Composite)super.createDialogArea(parent);
  container.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  container.setLayout(new GridLayout(1,false));
  Composite generatorSelectionContainer=new Composite(container,SWT.NONE);
  generatorSelectionContainer.setLayout(new GridLayout(2,false));
  Label selectorLabel=new Label(generatorSelectionContainer,SWT.NONE);
  selectorLabel.setText(""String_Node_Str"");
  selectorLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false));
  ComboViewer comboViewer=new ComboViewer(generatorSelectionContainer);
  comboViewer.setContentProvider(new ArrayContentProvider());
  comboViewer.setLabelProvider(new LabelProvider(){
    @Override public String getText(    Object o){
      return ((Generator)o).getLabel();
    }
  }
);
  comboViewer.setInput(this.availableGenerators);
  comboViewer.setSelection(new StructuredSelection(this.recorder.getCurrentGenerator()));
  comboViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      Generator newGenerator=(Generator)((IStructuredSelection)event.getSelection()).getFirstElement();
      recorder.setGenerator(newGenerator);
    }
  }
);
  Label label=new Label(container,SWT.NONE);
  label.setText(""String_Node_Str"");
  this.generatedCode=new Text(container,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  this.generatedCode.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  Composite actionsComposite=new Composite(container,SWT.NONE);
  actionsComposite.setLayout(new RowLayout(SWT.HORIZONTAL));
  final Button recordPauseButton=new Button(actionsComposite,SWT.PUSH);
  recordPauseButton.setText(this.recorder.isRecording() ? ""String_Node_Str"" : ""String_Node_Str"");
  final Button copyButton=new Button(actionsComposite,SWT.PUSH);
  copyButton.setToolTipText(""String_Node_Str"");
  copyButton.setText(""String_Node_Str"");
  recordPauseButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      recorder.setRecording(!recorder.isRecording());
      recordPauseButton.setText(recorder.isRecording() ? ""String_Node_Str"" : ""String_Node_Str"");
    }
  }
);
  this.recorder.addListener(new CodeGenerationListener(){
    public void handleCodeGenerated(    GenerationRule code){
      String lineSeparator=System.getProperty(""String_Node_Str"");
      StringBuilder builder=new StringBuilder(generatedCode.getText());
      for (      String action : code.getActions()) {
        builder.append(action);
        builder.append(""String_Node_Str"");
        builder.append(lineSeparator);
      }
      generatedCode.setText(builder.toString());
    }
  }
);
  copyButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      final Clipboard cb=new Clipboard(Display.getCurrent());
      TextTransfer textTransfer=TextTransfer.getInstance();
      cb.setContents(new Object[]{generatedCode.getText()},new Transfer[]{textTransfer});
      cb.dispose();
    }
  }
);
  return container;
}",0.9289582669640012
93103,"public void handleCodeGenerated(GenerationRule code){
  for (  String action : code.getActions())   generatedCode.setText(generatedCode.getText() + action + ""String_Node_Str"");
}","public void handleCodeGenerated(GenerationRule code){
  String lineSeparator=System.getProperty(""String_Node_Str"");
  StringBuilder builder=new StringBuilder(generatedCode.getText());
  for (  String action : code.getActions()) {
    builder.append(action);
    builder.append(""String_Node_Str"");
    builder.append(lineSeparator);
  }
  generatedCode.setText(builder.toString());
}",0.2785714285714286
93104,"public void waitUntilWidgetAppears(ICondition waitForWidget){
  try {
    waitUntil(waitForWidget);
  }
 catch (  TimeoutException e) {
    throw new WidgetNotFoundException(""String_Node_Str"",e);
  }
}","public void waitUntilWidgetAppears(ICondition waitForWidget){
  try {
    waitUntil(waitForWidget);
  }
 catch (  TimeoutException e) {
    String message=""String_Node_Str"";
    if (waitForWidget.getFailureMessage() != null) {
      message=waitForWidget.getFailureMessage();
    }
    throw new WidgetNotFoundException(message,e);
  }
}",0.6840148698884758
93105,"private ArrayList<SWTBotMenu> toSWTBotMenuItems(Matcher<?> matcher,List<MenuItem> findMenus){
  ArrayList<SWTBotMenu> result=new ArrayList<SWTBotMenu>(findMenus.size());
  for (  MenuItem menuItem : findMenus) {
    result.add(new SWTBotMenu(menuItem,matcher));
  }
  if (result.isEmpty())   throw new WidgetNotFoundException(""String_Node_Str"");
  return result;
}","private ArrayList<SWTBotMenu> toSWTBotMenuItems(Matcher<?> matcher,List<MenuItem> findMenus){
  ArrayList<SWTBotMenu> result=new ArrayList<SWTBotMenu>(findMenus.size());
  for (  MenuItem menuItem : findMenus) {
    result.add(new SWTBotMenu(menuItem,matcher));
  }
  if (result.isEmpty())   throw new WidgetNotFoundException(""String_Node_Str"" + matcher);
  return result;
}",0.986449864498645
93106,"public SWTBotMenu contextMenu(String label) throws WidgetNotFoundException {
  EventContextMenuFinder finder=new EventContextMenuFinder();
  try {
    finder.register();
    notify(SWT.MenuDetect);
    Matcher<MenuItem> withMnemonic=withMnemonic(label);
    List<MenuItem> menus=finder.findMenus(withMnemonic);
    if (menus.isEmpty())     throw new WidgetNotFoundException(""String_Node_Str"");
    return new SWTBotMenu(menus.get(0));
  }
  finally {
    finder.unregister();
  }
}","public SWTBotMenu contextMenu(String label) throws WidgetNotFoundException {
  EventContextMenuFinder finder=new EventContextMenuFinder();
  try {
    finder.register();
    notify(SWT.MenuDetect);
    Matcher<MenuItem> withMnemonic=withMnemonic(label);
    List<MenuItem> menus=finder.findMenus(withMnemonic);
    if (menus.isEmpty())     throw new WidgetNotFoundException(""String_Node_Str"" + label);
    return new SWTBotMenu(menus.get(0));
  }
  finally {
    finder.unregister();
  }
}",0.9917525773195875
93107,"private void createTextWidgets(){
  if (labels == null)   return;
  Composite composite=new Composite(shell,SWT.NONE);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  composite.setLayout(layout);
  if (values == null)   values=new String[labels.length];
  for (int i=0; i < labels.length; i++) {
    Label label=new Label(composite,SWT.RIGHT);
    label.setText(labels[i]);
    Text text=new Text(composite,SWT.BORDER);
    GridData gridData=new GridData();
    gridData.widthHint=400;
    text.setLayoutData(gridData);
    if (values[i] != null)     text.setText(values[i]);
    text.setData(""String_Node_Str"",new Integer(i));
    addTextListener(text);
  }
}","private void createTextWidgets(){
  if (labels == null)   return;
  Composite composite=new Composite(shell,SWT.NONE);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  composite.setLayout(layout);
  if (values == null)   values=new String[labels.length];
  for (int i=0; i < labels.length; i++) {
    Label label=new Label(composite,SWT.RIGHT);
    label.setText(labels[i]);
    Text text=new Text(composite,SWT.BORDER);
    GridData gridData=new GridData();
    gridData.widthHint=400;
    text.setLayoutData(gridData);
    if (values[i] != null)     text.setText(values[i]);
    text.setData(""String_Node_Str"",Integer.valueOf(i));
    addTextListener(text);
  }
}",0.9919354838709676
93108,"void setValue(){
  String methodRoot=nameCombo.getText();
  Class returnType=getReturnType(methodRoot);
  String methodName=setMethodName(methodRoot);
  String value=setText.getText();
  Widget[] widgets=getExampleWidgets();
  for (int i=0; i < widgets.length; i++)   try {
    java.lang.reflect.Method method=widgets[i].getClass().getMethod(methodName,new Class[]{returnType});
    String typeName=returnType.getName();
    Object[] parameter=null;
    if (typeName.equals(""String_Node_Str""))     parameter=new Object[]{new Integer(value)};
 else     if (typeName.equals(""String_Node_Str""))     parameter=new Object[]{new Long(value)};
 else     if (typeName.equals(""String_Node_Str""))     parameter=new Object[]{value.length() == 1 ? new Character(value.charAt(0)) : new Character('\0')};
 else     if (typeName.equals(""String_Node_Str""))     parameter=new Object[]{new Boolean(value)};
 else     if (typeName.equals(""String_Node_Str""))     parameter=new Object[]{value};
 else     if (typeName.equals(""String_Node_Str"")) {
      String xy[]=split(value,',');
      parameter=new Object[]{new Point(new Integer(xy[0]).intValue(),new Integer(xy[1]).intValue())};
    }
 else     if (typeName.equals(""String_Node_Str"")) {
      String strings[]=split(value,',');
      int[] ints=new int[strings.length];
      for (int j=0; j < strings.length; j++)       ints[j]=new Integer(strings[j]).intValue();
      parameter=new Object[]{ints};
    }
 else     if (typeName.equals(""String_Node_Str""))     parameter=new Object[]{split(value,',')};
 else     parameter=parameterForType(typeName,value,widgets[i]);
    method.invoke(widgets[i],parameter);
  }
 catch (  Exception e) {
    getText.setText(e.toString());
  }
}","void setValue(){
  String methodRoot=nameCombo.getText();
  Class returnType=getReturnType(methodRoot);
  String methodName=setMethodName(methodRoot);
  String value=setText.getText();
  Widget[] widgets=getExampleWidgets();
  for (int i=0; i < widgets.length; i++)   try {
    java.lang.reflect.Method method=widgets[i].getClass().getMethod(methodName,new Class[]{returnType});
    String typeName=returnType.getName();
    Object[] parameter=null;
    if (typeName.equals(""String_Node_Str""))     parameter=new Object[]{Integer.valueOf(value)};
 else     if (typeName.equals(""String_Node_Str""))     parameter=new Object[]{new Long(value)};
 else     if (typeName.equals(""String_Node_Str""))     parameter=new Object[]{value.length() == 1 ? new Character(value.charAt(0)) : new Character('\0')};
 else     if (typeName.equals(""String_Node_Str""))     parameter=new Object[]{new Boolean(value)};
 else     if (typeName.equals(""String_Node_Str""))     parameter=new Object[]{value};
 else     if (typeName.equals(""String_Node_Str"")) {
      String xy[]=split(value,',');
      parameter=new Object[]{new Point(Integer.valueOf(xy[0]).intValue(),Integer.valueOf(xy[1]).intValue())};
    }
 else     if (typeName.equals(""String_Node_Str"")) {
      String strings[]=split(value,',');
      int[] ints=new int[strings.length];
      for (int j=0; j < strings.length; j++)       ints[j]=Integer.valueOf(strings[j]).intValue();
      parameter=new Object[]{ints};
    }
 else     if (typeName.equals(""String_Node_Str""))     parameter=new Object[]{split(value,',')};
 else     parameter=parameterForType(typeName,value,widgets[i]);
    method.invoke(widgets[i],parameter);
  }
 catch (  Exception e) {
    getText.setText(e.toString());
  }
}",0.9860546194073212
93109,"/** 
 * Sets the date.
 * @param toSet the date to set into the control.
 */
public void setDate(final Date toSet){
  log.debug(MessageFormat.format(""String_Node_Str"",this,toSet));
  waitForEnabled();
  syncExec(new VoidResult(){
    @SuppressWarnings(""String_Node_Str"") public void run(){
      widget.setYear(toSet.getYear() + 1900);
      widget.setMonth(toSet.getMonth());
      widget.setDay(toSet.getDate());
      widget.setHours(toSet.getHours());
      widget.setMinutes(toSet.getMinutes());
      widget.setSeconds(toSet.getSeconds());
    }
  }
);
  notify(SWT.Selection);
}","/** 
 * Sets the date.
 * @param toSet the date to set into the control.
 */
public void setDate(final Date toSet){
  log.debug(MessageFormat.format(""String_Node_Str"",this,toSet));
  waitForEnabled();
  syncExec(new VoidResult(){
    @SuppressWarnings(""String_Node_Str"") public void run(){
      widget.setDate(toSet.getYear() + 1900,toSet.getMonth(),toSet.getDate());
      widget.setHours(toSet.getHours());
      widget.setMinutes(toSet.getMinutes());
      widget.setSeconds(toSet.getSeconds());
    }
  }
);
  notify(SWT.Selection);
}",0.9341637010676156
93110,"@SuppressWarnings(""String_Node_Str"") public void run(){
  widget.setYear(toSet.getYear() + 1900);
  widget.setMonth(toSet.getMonth());
  widget.setDay(toSet.getDate());
  widget.setHours(toSet.getHours());
  widget.setMinutes(toSet.getMinutes());
  widget.setSeconds(toSet.getSeconds());
}","@SuppressWarnings(""String_Node_Str"") public void run(){
  widget.setDate(toSet.getYear() + 1900,toSet.getMonth(),toSet.getDate());
  widget.setHours(toSet.getHours());
  widget.setMinutes(toSet.getMinutes());
  widget.setSeconds(toSet.getSeconds());
}",0.5851851851851851
93111,"private void productAndApplication(Composite parent){
  Group group=new Group(parent,SWT.NONE);
  GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,false);
  layoutData.horizontalSpan=2;
  group.setLayoutData(layoutData);
  group.setLayout(new GridLayout(2,false));
  group.setText(""String_Node_Str"");
  productIdButton=new Button(group,SWT.RADIO);
  productIdButton.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,false));
  productIdButton.setText(""String_Node_Str"");
  productIdButton.setSelection(true);
  productId=new Combo(group,SWT.DROP_DOWN);
  productId.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
  productId.setItems(TargetPlatform.getProducts());
  productId.setText(TargetPlatform.getDefaultProduct());
  applicationIdButton=new Button(group,SWT.RADIO);
  applicationIdButton.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,false));
  applicationIdButton.setText(""String_Node_Str"");
  applicationId=new Combo(group,SWT.READ_ONLY | SWT.SINGLE);
  applicationId.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
  applicationId.setItems(TargetPlatform.getApplications());
  applicationId.setText(TargetPlatform.getDefaultApplication());
  applicationId.setEnabled(false);
}","private void productAndApplication(Composite parent){
  Group group=new Group(parent,SWT.NONE);
  GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,false);
  layoutData.horizontalSpan=2;
  group.setLayoutData(layoutData);
  group.setLayout(new GridLayout(2,false));
  group.setText(""String_Node_Str"");
  productIdButton=new Button(group,SWT.RADIO);
  productIdButton.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,false));
  productIdButton.setText(""String_Node_Str"");
  productIdButton.setSelection(true);
  productId=new Combo(group,SWT.DROP_DOWN);
  productId.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
  productId.setItems(TargetPlatform.getProducts());
  productId.setText(TargetPlatform.getDefaultProduct() == null ? ""String_Node_Str"" : TargetPlatform.getDefaultProduct());
  applicationIdButton=new Button(group,SWT.RADIO);
  applicationIdButton.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,false));
  applicationIdButton.setText(""String_Node_Str"");
  applicationId=new Combo(group,SWT.READ_ONLY | SWT.SINGLE);
  applicationId.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
  applicationId.setItems(TargetPlatform.getApplications());
  applicationId.setText(TargetPlatform.getDefaultApplication());
  applicationId.setEnabled(false);
}",0.9744396382225716
93112,"@Test public void getsToString() throws Exception {
  assertEquals(""String_Node_Str"",withLabel(""String_Node_Str"",new ControlFinder()).toString());
}","@Test public void getsToString() throws Exception {
  assertEquals(""String_Node_Str"",withLabel(""String_Node_Str"").toString());
}",0.927536231884058
93113,"public void init(final Browser widget){
  UIThreadRunnable.syncExec(new VoidResult(){
    public void run(){
      widget.addAuthenticationListener(this);
    }
  }
);
}","public void init(final Browser widget){
  UIThreadRunnable.syncExec(new VoidResult(){
    public void run(){
      widget.addAuthenticationListener(BrowserAuthenticationListener.this);
    }
  }
);
}",0.9184782608695652
93114,"public void run(){
  widget.addAuthenticationListener(this);
}","public void run(){
  widget.addAuthenticationListener(BrowserAuthenticationListener.this);
}",0.8051948051948052
93115,"/** 
 * Matches a widget that has the specified Label.
 * @param labelText the label.
 * @param finder finder for locating widgets
 */
WithLabel(String labelText,Finder finder){
  mnemonicTextMatcher=new WithMnemonic<Widget>(labelText);
  this.finder=finder;
}","/** 
 * Matches a widget that has the specified Label.
 * @param labelText the label.
 * @param finder finder for locating widgets
 */
WithLabel(String labelText,Finder finder){
  Assert.isNotNull(labelText,""String_Node_Str"");
  Assert.isNotNull(finder,""String_Node_Str"");
  mnemonicTextMatcher=new WithMnemonic<Widget>(labelText);
  this.finder=finder;
}",0.8455284552845529
93116,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if ((obj == null) || (getClass() != obj.getClass()))   return false;
  Position other=(Position)obj;
  return (column == other.column) || (line == other.line);
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if ((obj == null) || (getClass() != obj.getClass()))   return false;
  Position other=(Position)obj;
  return (column == other.column) && (line == other.line);
}",0.9917355371900828
93117,"public void modifyText(ModifyEvent e){
  ProjectSettingValidator validator=new ProjectSettingValidator(pluginId.getText(),pluginVersion.getText(),pluginName.getText(),getProjects(),NewPluginProjectWizardPage.this);
  validator.validate();
}","public void modifyText(ModifyEvent e){
  ProjectSettingValidator validator=new ProjectSettingValidator(pluginId.getText(),pluginName.getText(),pluginVersion.getText(),getProjects(),NewPluginProjectWizardPage.this);
  validator.validate();
}",0.9125
93118,"private void hookListeners(){
  applicationIdButton.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      productId.setEnabled(false);
      applicationId.setEnabled(true);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  productIdButton.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      applicationId.setEnabled(false);
      productId.setEnabled(true);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  ModifyListener listener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      ProjectSettingValidator validator=new ProjectSettingValidator(pluginId.getText(),pluginVersion.getText(),pluginName.getText(),getProjects(),NewPluginProjectWizardPage.this);
      validator.validate();
    }
  }
;
  pluginId.addModifyListener(listener);
  pluginName.addModifyListener(listener);
  pluginVersion.addModifyListener(listener);
  pluginProvider.addModifyListener(listener);
}","private void hookListeners(){
  applicationIdButton.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      productId.setEnabled(false);
      applicationId.setEnabled(true);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  productIdButton.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      applicationId.setEnabled(false);
      productId.setEnabled(true);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  ModifyListener listener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      ProjectSettingValidator validator=new ProjectSettingValidator(pluginId.getText(),pluginName.getText(),pluginVersion.getText(),getProjects(),NewPluginProjectWizardPage.this);
      validator.validate();
    }
  }
;
  pluginId.addModifyListener(listener);
  pluginName.addModifyListener(listener);
  pluginVersion.addModifyListener(listener);
  pluginProvider.addModifyListener(listener);
}",0.9811659192825112
93119,"public void pressKeys(KeyStroke... keys){
  for (  KeyStroke key : keys) {
    assertKey(key);
    pressKey(key);
  }
}","public void pressKeys(KeyStroke... keys){
  assertKeys(keys);
  for (  KeyStroke key : keys) {
    pressKey(key);
  }
}",0.8319327731092437
93120,"public void releaseKeys(KeyStroke... keys){
  for (  KeyStroke key : keys) {
    assertKey(key);
    releaseKey(key);
  }
}","public void releaseKeys(KeyStroke... keys){
  assertKeys(keys);
  for (  KeyStroke key : keys) {
    assertKey(key);
    releaseKey(key);
  }
}",0.924812030075188
93121,"/** 
 * Checks if the widget has the given style.
 * @param w the widget.
 * @param style the style.
 * @return <code>true</code> if the widget has the specified style bit set. Otherwise <code>false</code>.
 */
public static boolean hasStyle(final Widget w,final int style){
  if ((w == null) || w.isDisposed())   return false;
  return UIThreadRunnable.syncExec(w.getDisplay(),new BoolResult(){
    public Boolean run(){
      return (w.getStyle() & style) != 0;
    }
  }
);
}","/** 
 * Checks if the widget has the given style.
 * @param w the widget.
 * @param style the style.
 * @return <code>true</code> if the widget has the specified style bit set. Otherwise <code>false</code>.
 */
public static boolean hasStyle(final Widget w,final int style){
  if ((w == null) || w.isDisposed())   return false;
  if (style == SWT.NONE)   return true;
  return UIThreadRunnable.syncExec(w.getDisplay(),new BoolResult(){
    public Boolean run(){
      return (w.getStyle() & style) != 0;
    }
  }
);
}",0.9598393574297188
93122,"/** 
 * Add the specified listener as the display filter for the specified event type. <p> This is a convinience method to add filters, so that clients do not have to remove them explicitly. </p>
 * @see #unregisterAllListeners()
 * @param eventType the event type
 * @param listener the listener
 */
protected void registerListener(final int eventType,final Listener listener){
  UIThreadRunnable.syncExec(display,new VoidResult(){
    public void run(){
      display.addFilter(eventType,listener);
      registeredListeners.add(new ListenerSet(eventType,listener));
    }
  }
);
}","/** 
 * Add the specified listener as the display filter for the specified event type. <p> This is a convinience method to add filters, so that clients do not have to remove them explicitly. </p>
 * @see #unregisterAllListeners()
 * @param eventType the event type
 * @param listener the listener
 */
protected void registerListener(final int eventType,final Listener listener){
  UIThreadRunnable.syncExec(display,new VoidResult(){
    public void run(){
      display.addFilter(eventType,listener);
    }
  }
);
  registeredListeners.add(new ListenerSet(eventType,listener));
}",0.9810671256454389
93123,"/** 
 * Unregisters all listeners
 * @see #unregister(int,Listener)
 */
protected void unregisterAllListeners(){
  for (  ListenerSet set : registeredListeners) {
    unregister(set.eventType,set.listener);
  }
}","/** 
 * Unregisters all listeners
 * @see #unregister(int,Listener)
 */
protected void unregisterAllListeners(){
  for (  ListenerSet set : new ArrayList<ListenerSet>(registeredListeners)) {
    unregister(set.eventType,set.listener);
  }
}",0.9380530973451328
93124,"public void setUp() throws Exception {
  super.setUp();
  bot=new SWTBot();
  keyboard=new Keyboard(display);
  bot.shell(""String_Node_Str"").activate();
  bot.tabItem(""String_Node_Str"").activate();
  bot.checkBox(""String_Node_Str"").select();
  bot.checkBox(""String_Node_Str"").select();
  bot.checkBox(""String_Node_Str"").deselect();
  bot.checkBox(""String_Node_Str"").select();
  styledText=bot.styledTextInGroup(""String_Node_Str"");
  styledText.setText(""String_Node_Str"");
  bot.button(""String_Node_Str"").click();
  listeners=bot.textInGroup(""String_Node_Str"");
}","public void setUp() throws Exception {
  super.setUp();
  bot=new SWTBot();
  keyboard=new Keyboard();
  bot.shell(""String_Node_Str"").activate();
  bot.tabItem(""String_Node_Str"").activate();
  bot.checkBox(""String_Node_Str"").select();
  bot.checkBox(""String_Node_Str"").select();
  bot.checkBox(""String_Node_Str"").deselect();
  bot.checkBox(""String_Node_Str"").select();
  styledText=bot.styledTextInGroup(""String_Node_Str"");
  styledText.setText(""String_Node_Str"");
  bot.button(""String_Node_Str"").click();
  listeners=bot.textInGroup(""String_Node_Str"");
}",0.9937332139659804
93125,"private List<IEditorReference> findEditorsInternal(final Matcher<?> matcher){
  List<IEditorReference> result=new ArrayList<IEditorReference>();
  IWorkbenchPage[] pages=getWorkbenchPages();
  for (  IWorkbenchPage page : pages) {
    IEditorReference[] editorReferences=page.getEditorReferences();
    for (    IEditorReference editorReference : editorReferences) {
      if (matcher.matches(editorReference))       result.add(editorReference);
    }
  }
  return result;
}","private List<IEditorReference> findEditorsInternal(final Matcher<?> matcher){
  List<IEditorReference> result=new ArrayList<IEditorReference>();
  IWorkbenchPage[] pages=workbenchPages();
  for (  IWorkbenchPage page : pages) {
    IEditorReference[] editorReferences=page.getEditorReferences();
    for (    IEditorReference editorReference : editorReferences) {
      if (matcher.matches(editorReference))       result.add(editorReference);
    }
  }
  return result;
}",0.9947089947089948
93126,"private IPerspectiveDescriptor findActivePerspectiveInternal(){
  try {
    IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    return activePage.getPerspective();
  }
 catch (  RuntimeException e) {
    return null;
  }
}","private IPerspectiveDescriptor findActivePerspectiveInternal(){
  return activePageInternal().getPerspective();
}",0.5378590078328982
93127,"private List<IPerspectiveDescriptor> findPerspectivesInternal(final Matcher<?> matcher){
  IPerspectiveDescriptor[] perspectives=workbenchWindow.getWorkbench().getPerspectiveRegistry().getPerspectives();
  List<IPerspectiveDescriptor> matchingPerspectives=new ArrayList<IPerspectiveDescriptor>();
  for (  IPerspectiveDescriptor perspectiveDescriptor : perspectives)   if (matcher.matches(perspectiveDescriptor))   matchingPerspectives.add(perspectiveDescriptor);
  return matchingPerspectives;
}","private List<IPerspectiveDescriptor> findPerspectivesInternal(final Matcher<?> matcher){
  IPerspectiveDescriptor[] perspectives=activeWorkbenchWindow().getWorkbench().getPerspectiveRegistry().getPerspectives();
  List<IPerspectiveDescriptor> matchingPerspectives=new ArrayList<IPerspectiveDescriptor>();
  for (  IPerspectiveDescriptor perspectiveDescriptor : perspectives)   if (matcher.matches(perspectiveDescriptor))   matchingPerspectives.add(perspectiveDescriptor);
  return matchingPerspectives;
}",0.99
93128,"private IEditorReference findActiveEditorInternal(){
  try {
    IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    IEditorPart activeEditor=activePage.getActiveEditor();
    return (IEditorReference)activePage.getReference(activeEditor);
  }
 catch (  RuntimeException e) {
    return null;
  }
}","private IEditorReference findActiveEditorInternal(){
  IWorkbenchPage page=activePageInternal();
  IEditorPart activeEditor=page.getActiveEditor();
  return (IEditorReference)page.getReference(activeEditor);
}",0.3351351351351351
93129,"private List<IViewReference> findViewsInternal(final Matcher<?> matcher){
  List<IViewReference> result=new ArrayList<IViewReference>();
  IWorkbenchPage[] pages=getWorkbenchPages();
  for (  IWorkbenchPage page : pages) {
    IViewReference[] viewReferences=page.getViewReferences();
    for (    IViewReference viewReference : viewReferences) {
      if (matcher.matches(viewReference))       result.add(viewReference);
    }
  }
  return result;
}","private List<IViewReference> findViewsInternal(final Matcher<?> matcher){
  List<IViewReference> result=new ArrayList<IViewReference>();
  IWorkbenchPage[] pages=workbenchPages();
  for (  IWorkbenchPage page : pages) {
    IViewReference[] viewReferences=page.getViewReferences();
    for (    IViewReference viewReference : viewReferences) {
      if (matcher.matches(viewReference))       result.add(viewReference);
    }
  }
  return result;
}",0.9342251950947604
93130,"private IViewReference findActiveViewInternal(){
  try {
    IWorkbenchPartReference partReference=workbenchWindow.getActivePage().getActivePartReference();
    if (partReference instanceof IViewReference)     return (IViewReference)partReference;
    return null;
  }
 catch (  RuntimeException e) {
    return null;
  }
}","private IViewReference findActiveViewInternal(){
  IWorkbenchPartReference partReference=activePageInternal().getActivePartReference();
  if (partReference instanceof IViewReference)   return (IViewReference)partReference;
  return null;
}",0.7793594306049823
93131,"@Test public void findsView() throws Exception {
  bot.view(""String_Node_Str"");
}","@Test public void findsView() throws Exception {
  bot.menu(""String_Node_Str"").menu(""String_Node_Str"").click();
  bot.view(""String_Node_Str"");
}",0.72
93132,"@Test public void closesAView() throws Exception {
  SWTEclipseBot bot=new SWTEclipseBot();
  SWTBotView view=bot.view(""String_Node_Str"");
  view.close();
  try {
    bot.view(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  WidgetNotFoundException expected) {
  }
}","@Test public void closesAView() throws Exception {
  bot.menu(""String_Node_Str"").menu(""String_Node_Str"").click();
  SWTBotView view=bot.view(""String_Node_Str"");
  view.close();
  try {
    bot.view(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  WidgetNotFoundException expected) {
  }
}",0.852233676975945
93133,"@Test public void getsViewTitle() throws Exception {
  assertEquals(""String_Node_Str"",bot.view(""String_Node_Str"").getTitle());
}","@Test public void getsViewTitle() throws Exception {
  bot.menu(""String_Node_Str"").menu(""String_Node_Str"").click();
  assertEquals(""String_Node_Str"",bot.view(""String_Node_Str"").getTitle());
}",0.8025078369905956
93134,"/** 
 * This activates the popup shell.
 * @return The shell.
 * @throws QuickFixNotFoundException Throw if a quick fix problem occurs.
 */
private SWTBotShell activatePopupShell() throws QuickFixNotFoundException {
  try {
    SWTBotShell shell=bot.shell(""String_Node_Str"",0);
    shell.activate();
    log.debug(""String_Node_Str"");
    return shell;
  }
 catch (  Exception e) {
    throw new QuickFixNotFoundException(""String_Node_Str"",e);
  }
}","/** 
 * This activates the popup shell.
 * @return The shell.
 * @throws QuickFixNotFoundException Throw if a quick fix problem occurs.
 */
private SWTBotShell activatePopupShell() throws QuickFixNotFoundException {
  try {
    SWTBotShell shell=bot.shell(""String_Node_Str"",bot.activeShell().widget);
    shell.activate();
    log.debug(""String_Node_Str"");
    return shell;
  }
 catch (  Exception e) {
    throw new QuickFixNotFoundException(""String_Node_Str"",e);
  }
}",0.972796517954298
93135,"/** 
 * @return a wrapper around a {@link Shell} with the specified index.
 * @param text the text on the shell.
 * @param index the index of the shell, in case there are multiple shells with the same text.
 */
public SWTBotShell shell(String text,int index){
  return new SWTBotShell(shells(text).get(index));
}","/** 
 * @return a wrapper around a {@link Shell} with the specified index.
 * @param text the text on the shell.
 * @param parent the parent under which a shell will be found.
 * @param index the index of the shell, in case there are multiple shells with the same text.
 */
public SWTBotShell shell(String text,Shell parent,int index){
  return new SWTBotShell(shells(text,parent).get(index));
}",0.8826025459688827
93136,"/** 
 * @param matcher the matcher.
 * @return a condition that waits until the matcher evaluates to true.
 * @since 2.0
 */
public static WaitForShell waitForShell(Matcher<?> matcher){
  return new WaitForShell(matcher);
}","/** 
 * @param matcher the matcher.
 * @param parent the parent under which a shell will be found or <code>null</code> to search all shells.
 * @return a condition that waits until the matcher evaluates to true.
 * @since 2.0
 */
public static WaitForShell waitForShell(Matcher<?> matcher,Shell parent){
  return new WaitForShellInParent(parent,matcher);
}",0.770293609671848
93137,"public boolean test() throws Exception {
  Shell[] shells=bot.getFinder().getShells();
  this.matchingShells=new ArrayList<Shell>();
  for (  Shell shell : shells) {
    if (matcher.matches(shell)) {
      matchingShells.add(shell);
    }
  }
  return !matchingShells.isEmpty();
}","public boolean test() throws Exception {
  Shell[] shells=findShells();
  this.matchingShells=new ArrayList<Shell>();
  for (  Shell shell : shells) {
    if (matcher.matches(shell)) {
      matchingShells.add(shell);
    }
  }
  return !matchingShells.isEmpty();
}",0.9688073394495412
93138,"@Override public Result<ProjectCoordinate> trySuggest(DependencyInfo dependencyInfo){
  Optional<ProjectCoordinate> pc=projectCoordinateCache.getIfPresent(dependencyInfo);
  if (pc == null) {
    return Result.absent(REASON_NOT_IN_CACHE);
  }
  return Result.of(pc.get());
}","@Override public Result<ProjectCoordinate> trySuggest(DependencyInfo dependencyInfo){
  Optional<ProjectCoordinate> pc=projectCoordinateCache.getIfPresent(dependencyInfo);
  if (pc == null) {
    return Result.absent(REASON_NOT_IN_CACHE);
  }
 else   if (pc.isPresent()) {
    return Result.of(pc.get());
  }
 else {
    return Result.absent();
  }
}",0.8782051282051282
93139,"@Override public Result<ProjectCoordinate> trySuggest(DependencyInfo dependencyInfo){
  Optional<ProjectCoordinate> pc=projectCoordinateCache.getIfPresent(dependencyInfo);
  if (pc == null) {
    return Result.absent(REASON_NOT_IN_CACHE);
  }
  return Result.of(pc.get());
}","@Override public Result<ProjectCoordinate> trySuggest(DependencyInfo dependencyInfo){
  Optional<ProjectCoordinate> pc=projectCoordinateCache.getIfPresent(dependencyInfo);
  if (pc == null) {
    return Result.absent(REASON_NOT_IN_CACHE);
  }
 else   if (pc.isPresent()) {
    return Result.of(pc.get());
  }
 else {
    return Result.absent();
  }
}",0.8782051282051282
93140,"@Provides @Singleton public JavaElementSelectionService provideJavaSelectionProvider(final EventBus bus){
  final JavaElementSelectionService provider=new JavaElementSelectionService(bus);
  new UIJob(""String_Node_Str""){
{
      schedule();
    }
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      final IWorkbenchWindow ww=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      final ISelectionService service=(ISelectionService)ww.getService(ISelectionService.class);
      service.addPostSelectionListener(provider);
      return Status.OK_STATUS;
    }
  }
;
  return provider;
}","@Provides @Singleton public JavaElementSelectionService provideJavaSelectionProvider(final EventBus bus){
  final JavaElementSelectionService provider=new JavaElementSelectionService(bus);
  new UIJob(Messages.JOB_NAME_SELECTION_LISTENER_REGISTRATION){
{
      schedule();
    }
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      final IWorkbenchWindow ww=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      final ISelectionService service=(ISelectionService)ww.getService(ISelectionService.class);
      service.addPostSelectionListener(provider);
      return Status.OK_STATUS;
    }
  }
;
  return provider;
}",0.9561815336463224
93141,"private void deregisterDependenciesForJavaProject(final IJavaProject javaProject){
  DependencyInfo dependencyInfoForProject=createDependencyInfoForProject(javaProject);
  workspaceDependenciesByProject.removeAll(dependencyInfoForProject);
  jrePackageFragmentRoots.removeAll(dependencyInfoForProject);
}","private void deregisterDependenciesForJavaProject(final IJavaProject javaProject){
  DependencyInfo dependencyInfoForProject=getDependencyInfoForProject(javaProject);
  workspaceDependenciesByProject.removeAll(dependencyInfoForProject);
  jrePackageFragmentRoots.removeAll(dependencyInfoForProject);
synchronized (projectDependencyInfos) {
    projectDependencyInfos.remove(javaProject);
  }
}",0.8550932568149211
93142,"private void registerDependencyForJAR(final JarPackageFragmentRoot root){
  Optional<IJavaProject> optionalJavaProject=getJavaProjectForPackageFragmentRoot(root);
  if (!optionalJavaProject.isPresent()) {
    return;
  }
  IJavaProject javaProject=optionalJavaProject.get();
  DependencyInfo dependencyInfoForProject=createDependencyInfoForProject(javaProject);
  if (!isJREOfProjectIsKnown(dependencyInfoForProject)) {
    workspaceDependenciesByProject.removeAll(dependencyInfoForProject);
    registerDependenciesForJavaProject(javaProject);
  }
  if (!isPartOfTheJRE(root)) {
    DependencyInfo dependencyInfo=createDependencyInfoForJar(root);
    workspaceDependenciesByProject.put(dependencyInfoForProject,dependencyInfo);
  }
}","private void registerDependencyForJAR(final JarPackageFragmentRoot root){
  Optional<IJavaProject> optionalJavaProject=getJavaProjectForPackageFragmentRoot(root);
  if (!optionalJavaProject.isPresent()) {
    return;
  }
  IJavaProject javaProject=optionalJavaProject.get();
  DependencyInfo dependencyInfoForProject=getDependencyInfoForProject(javaProject);
  if (!isJREOfProjectIsKnown(dependencyInfoForProject)) {
    workspaceDependenciesByProject.removeAll(dependencyInfoForProject);
    registerDependenciesForJavaProject(javaProject);
  }
  if (!isPartOfTheJRE(root)) {
    DependencyInfo dependencyInfo=createDependencyInfoForJar(root);
    workspaceDependenciesByProject.put(dependencyInfoForProject,dependencyInfo);
  }
}",0.9938566552901024
93143,"private Set<DependencyInfo> searchForAllDependenciesOfProject(final IJavaProject javaProject){
  Set<DependencyInfo> dependencies=Sets.newHashSet();
  Set<IPackageFragmentRoot> jreRoots=jrePackageFragmentRoots.get(createDependencyInfoForProject(javaProject));
  try {
    for (    final IPackageFragmentRoot packageFragmentRoot : javaProject.getAllPackageFragmentRoots()) {
      if (!jreRoots.contains(packageFragmentRoot) && packageFragmentRoot instanceof JarPackageFragmentRoot) {
        DependencyInfo dependencyInfo=createDependencyInfoForJar((JarPackageFragmentRoot)packageFragmentRoot);
        dependencies.add(dependencyInfo);
      }
 else       if (packageFragmentRoot.getKind() == IPackageFragmentRoot.K_SOURCE && packageFragmentRoot.getJavaProject() != null) {
        DependencyInfo dependencyInfo=Dependencies.createDependencyInfoForProject(packageFragmentRoot.getJavaProject());
        dependencies.add(dependencyInfo);
      }
    }
  }
 catch (  JavaModelException e) {
    LOG.error(""String_Node_Str"",javaProject,e);
  }
  return dependencies;
}","private Set<DependencyInfo> searchForAllDependenciesOfProject(final IJavaProject javaProject){
  Set<DependencyInfo> dependencies=Sets.newHashSet();
  Set<IPackageFragmentRoot> jreRoots=jrePackageFragmentRoots.get(getDependencyInfoForProject(javaProject));
  try {
    for (    final IPackageFragmentRoot packageFragmentRoot : javaProject.getAllPackageFragmentRoots()) {
      if (!jreRoots.contains(packageFragmentRoot) && packageFragmentRoot instanceof JarPackageFragmentRoot) {
        DependencyInfo dependencyInfo=createDependencyInfoForJar(packageFragmentRoot);
        dependencies.add(dependencyInfo);
      }
 else       if (packageFragmentRoot.getKind() == IPackageFragmentRoot.K_SOURCE && packageFragmentRoot.getJavaProject() != null) {
        DependencyInfo dependencyInfo=Dependencies.createDependencyInfoForProject(packageFragmentRoot.getJavaProject());
        dependencies.add(dependencyInfo);
      }
    }
  }
 catch (  JavaModelException e) {
    LOG.error(""String_Node_Str"",javaProject,e);
  }
  return dependencies;
}",0.9843230403800476
93144,"private void deregisterJREDependenciesForProject(final IJavaProject javaProject){
  DependencyInfo projectDependencyInfo=createDependencyInfoForProject(javaProject);
  for (  DependencyInfo dependencyInfo : workspaceDependenciesByProject.get(projectDependencyInfo)) {
    if (dependencyInfo.getType() == DependencyType.JRE) {
      workspaceDependenciesByProject.remove(projectDependencyInfo,dependencyInfo);
      return;
    }
  }
}","private void deregisterJREDependenciesForProject(final IJavaProject javaProject){
  DependencyInfo projectDependencyInfo=getDependencyInfoForProject(javaProject);
  for (  DependencyInfo dependencyInfo : workspaceDependenciesByProject.get(projectDependencyInfo)) {
    if (dependencyInfo.getType() == DependencyType.JRE) {
      workspaceDependenciesByProject.remove(projectDependencyInfo,dependencyInfo);
      return;
    }
  }
}",0.9895953757225432
93145,"private void deregisterDependencyForJAR(final JarPackageFragmentRoot pfr){
  Optional<IJavaProject> optionalJavaProject=getJavaProjectForPackageFragmentRoot(pfr);
  if (!optionalJavaProject.isPresent()) {
    return;
  }
  IJavaProject javaProject=optionalJavaProject.get();
  if (isPartOfTheJRE(pfr)) {
    deregisterJREDependenciesForProject(javaProject);
  }
 else {
    DependencyInfo dependencyInfo=createDependencyInfoForJar(pfr);
    DependencyInfo projectDependencyInfo=createDependencyInfoForProject(javaProject);
    workspaceDependenciesByProject.remove(projectDependencyInfo,dependencyInfo);
    if (!workspaceDependenciesByProject.containsKey(projectDependencyInfo)) {
      jrePackageFragmentRoots.removeAll(projectDependencyInfo);
    }
  }
}","private void deregisterDependencyForJAR(final JarPackageFragmentRoot pfr){
  Optional<IJavaProject> optionalJavaProject=getJavaProjectForPackageFragmentRoot(pfr);
  if (!optionalJavaProject.isPresent()) {
    return;
  }
  IJavaProject javaProject=optionalJavaProject.get();
  if (isPartOfTheJRE(pfr)) {
    deregisterJREDependenciesForProject(javaProject);
  }
 else {
    DependencyInfo dependencyInfo=createDependencyInfoForJar(pfr);
    DependencyInfo projectDependencyInfo=getDependencyInfoForProject(javaProject);
    workspaceDependenciesByProject.remove(projectDependencyInfo,dependencyInfo);
    if (!workspaceDependenciesByProject.containsKey(projectDependencyInfo)) {
      jrePackageFragmentRoots.removeAll(projectDependencyInfo);
    }
  }
}",0.9940436796823297
93146,"private void registerDependenciesForJavaProject(final IJavaProject javaProject){
  DependencyInfo dependencyInfoForProject=createDependencyInfoForProject(javaProject);
  Optional<DependencyInfo> optionalJREDependencyInfo=createDependencyInfoForJre(javaProject);
  if (optionalJREDependencyInfo.isPresent()) {
    workspaceDependenciesByProject.put(dependencyInfoForProject,optionalJREDependencyInfo.get());
    jrePackageFragmentRoots.putAll(dependencyInfoForProject,detectJREPackageFragementRoots(javaProject));
  }
  workspaceDependenciesByProject.putAll(dependencyInfoForProject,searchForAllDependenciesOfProject(javaProject));
}","private void registerDependenciesForJavaProject(final IJavaProject javaProject){
  DependencyInfo dependencyInfoForProject=getDependencyInfoForProject(javaProject);
  Optional<DependencyInfo> optionalJREDependencyInfo=createDependencyInfoForJre(javaProject);
  if (optionalJREDependencyInfo.isPresent()) {
    workspaceDependenciesByProject.put(dependencyInfoForProject,optionalJREDependencyInfo.get());
    jrePackageFragmentRoots.putAll(dependencyInfoForProject,detectJREPackageFragementRoots(javaProject));
  }
  workspaceDependenciesByProject.putAll(dependencyInfoForProject,searchForAllDependenciesOfProject(javaProject));
}",0.992862807295797
93147,"@JavaSelectionSubscriber public void onTypeSelection(final IType type,final JavaElementSelectionEvent selection,final Composite parent) throws JavaModelException {
  render(type,parent);
}","@JavaSelectionSubscriber public void onTypeSelection(final IType type,final JavaElementSelectionEvent selection,final Composite parent) throws CoreException {
  render(type,parent);
}",0.9757412398921832
93148,"@JavaSelectionSubscriber public void onFieldSelection(final IField field,final JavaElementSelectionEvent selection,final Composite parent) throws JavaModelException {
  render(field,parent);
}","@JavaSelectionSubscriber public void onFieldSelection(final IField field,final JavaElementSelectionEvent selection,final Composite parent) throws CoreException {
  render(field,parent);
}",0.9762532981530344
93149,"@JavaSelectionSubscriber public void onMethodSelection(final IMethod method,final JavaElementSelectionEvent selection,final Composite parent) throws JavaModelException {
  render(method,parent);
}","@JavaSelectionSubscriber public void onMethodSelection(final IMethod method,final JavaElementSelectionEvent selection,final Composite parent) throws CoreException {
  render(method,parent);
}",0.9767441860465116
93150,"@JavaSelectionSubscriber public void onTypeSelection(final IType type,final JavaElementSelectionEvent selection,final Composite parent) throws JavaModelException {
  render(type,parent);
}","@JavaSelectionSubscriber public void onTypeSelection(final IType type,final JavaElementSelectionEvent selection,final Composite parent) throws CoreException {
  render(type,parent);
}",0.9757412398921832
93151,"@JavaSelectionSubscriber public void onFieldSelection(final IField field,final JavaElementSelectionEvent selection,final Composite parent) throws JavaModelException {
  render(field,parent);
}","@JavaSelectionSubscriber public void onFieldSelection(final IField field,final JavaElementSelectionEvent selection,final Composite parent) throws CoreException {
  render(field,parent);
}",0.9762532981530344
93152,"@JavaSelectionSubscriber public void onMethodSelection(final IMethod method,final JavaElementSelectionEvent selection,final Composite parent) throws JavaModelException {
  render(method,parent);
}","@JavaSelectionSubscriber public void onMethodSelection(final IMethod method,final JavaElementSelectionEvent selection,final Composite parent) throws CoreException {
  render(method,parent);
}",0.9767441860465116
93153,"@Override public void widgetSelected(SelectionEvent e){
  Browsers.openInExternalBrowser(e.text);
}","@Override public void widgetSelected(SelectionEvent e){
  if (!isEmpty(url)) {
    Browsers.openInExternalBrowser(url);
  }
}",0.8303571428571429
93154,"public ReportNotificationPopup(String link){
  super(getDisplay());
  setFadingEnabled(true);
  setDelayClose(DELAY_CLOSE_MS);
  this.message=link;
}","public ReportNotificationPopup(String link,String url){
  super(getDisplay());
  setFadingEnabled(true);
  setDelayClose(DELAY_CLOSE_MS);
  this.message=link;
  this.url=url;
}",0.916923076923077
93155,"@Override protected void createContentArea(Composite composite){
  super.createContentArea(composite);
  composite.setLayout(new GridLayout(1,true));
  Link link=new Link(composite,SWT.WRAP);
  link.setText(message);
  link.setLayoutData(GridDataFactory.fillDefaults().hint(AbstractNotificationPopup.MAX_WIDTH,SWT.DEFAULT).create());
  link.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Browsers.openInExternalBrowser(e.text);
    }
  }
);
}","@Override protected void createContentArea(Composite composite){
  super.createContentArea(composite);
  composite.setLayout(new GridLayout(1,true));
  Link link=new Link(composite,SWT.WRAP);
  link.setText(message);
  link.setLayoutData(GridDataFactory.fillDefaults().hint(AbstractNotificationPopup.MAX_WIDTH,SWT.DEFAULT).create());
  link.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isEmpty(url)) {
        Browsers.openInExternalBrowser(url);
      }
    }
  }
);
}",0.9449715370018976
93156,"private void openPopup(final String message){
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      Window dialog=new ReportNotificationPopup(message);
      dialog.open();
    }
  }
);
}","private void openPopup(final String message,final String url){
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      Window dialog=new ReportNotificationPopup(message,url);
      dialog.open();
    }
  }
);
}",0.9544468546637744
93157,"@Override public void run(){
  Window dialog=new ReportNotificationPopup(message);
  dialog.open();
}","@Override public void run(){
  Window dialog=new ReportNotificationPopup(message,url);
  dialog.open();
}",0.9805825242718448
93158,"public static void unzip(File zipFile,File destFolder) throws IOException {
  ZipInputStream zis=null;
  try {
    InputSupplier<FileInputStream> fis=Files.newInputStreamSupplier(zipFile);
    zis=new ZipInputStream(fis.getInput());
    ZipEntry entry;
    while ((entry=zis.getNextEntry()) != null) {
      if (!entry.isDirectory()) {
        final File file=new File(destFolder,entry.getName());
        Files.createParentDirs(file);
        Files.write(ByteStreams.toByteArray(zis),file);
      }
    }
  }
  finally {
    Closeables.close(zis,true);
  }
}","public static void unzip(File zipFile,File destFolder) throws IOException {
  ZipInputStream zis=null;
  try {
    InputSupplier<FileInputStream> fis=Files.newInputStreamSupplier(zipFile);
    zis=new ZipInputStream(fis.getInput());
    ZipEntry entry;
    while ((entry=zis.getNextEntry()) != null) {
      if (!entry.isDirectory()) {
        final File file=new File(destFolder,entry.getName());
        Files.createParentDirs(file);
        Files.asByteSink(file,FileWriteMode.APPEND).writeFrom(zis);
      }
    }
  }
  finally {
    Closeables.close(zis,true);
  }
}",0.8176991150442477
93159,"public static void zip(File directory,File out) throws IOException {
  ZipOutputStream zos=null;
  try {
    OutputSupplier<FileOutputStream> s=Files.newOutputStreamSupplier(out);
    zos=new ZipOutputStream(s.getOutput());
    for (    File f : FileUtils.listFiles(directory,FILE,DIRECTORY)) {
      String path=removeStart(f.getPath(),directory.getAbsolutePath() + File.separator);
      path=path.replace(File.separatorChar,'/');
      ZipEntry e=new ZipEntry(path);
      zos.putNextEntry(e);
      byte[] data=Files.toByteArray(f);
      zos.write(data);
      zos.closeEntry();
    }
  }
  finally {
    Closeables.close(zos,false);
  }
}","public static void zip(File directory,File out) throws IOException {
  ZipOutputStream zos=null;
  try {
    OutputSupplier<FileOutputStream> s=Files.newOutputStreamSupplier(out);
    zos=new ZipOutputStream(s.getOutput());
    for (    File f : FileUtils.listFiles(directory,FILE,DIRECTORY)) {
      String path=removeStart(f.getPath(),directory.getAbsolutePath() + File.separator);
      path=path.replace(File.separatorChar,'/');
      ZipEntry e=new ZipEntry(path);
      zos.putNextEntry(e);
      Files.asByteSource(f).copyTo(zos);
      zos.closeEntry();
    }
  }
  finally {
    Closeables.close(zos,false);
  }
}",0.9478672985781992
93160,"@Override public int getRelevance(){
  return (2 ^ 12) - chain.getElements().size();
}","@Override public int getRelevance(){
  return -chain.getElements().size();
}",0.9382716049382716
93161,"private ContentAssistant newContentAssistant(){
  ContentAssistant assistant=new ContentAssistant(){
    @Override public void hide(){
      if (isFocused(searchText) && state != AssistantControlState.ENABLE_HIDE) {
      }
 else {
        super.hide();
        selectedProposal=null;
      }
    }
    private boolean isFocused(    Control control){
      Control focusControl=Display.getCurrent().getFocusControl();
      return control.equals(focusControl);
    }
  }
;
  assistant.addCompletionListener(new ICompletionListener(){
    @Override public void assistSessionEnded(    ContentAssistEvent event){
      selectedProposal=null;
      if (searchShell != null) {
        searchShell.dispose();
      }
    }
    @Override public void selectionChanged(    ICompletionProposal proposal,    boolean smartToggle){
      if (proposal instanceof ICompletionProposal) {
        selectedProposal=proposal;
      }
 else {
        selectedProposal=null;
      }
    }
    @Override public void assistSessionStarted(    ContentAssistEvent event){
    }
  }
);
  assistant.setShowEmptyList(true);
  assistant.enablePrefixCompletion(true);
  assistant.enableColoredLabels(true);
  assistant.setContentAssistProcessor(processor,DEFAULT_CONTENT_TYPE);
  assistant.setInformationControlCreator(new TemplateInformationControlCreator(SWT.LEFT_TO_RIGHT));
  assistant.setEmptyMessage(Messages.COMPLETION_ENGINE_NO_SNIPPETS_FOUND);
  assistant.setRepeatedInvocationMode(true);
  assistant.setStatusLineVisible(true);
  assistant.setSorter(new AbstractProposalSorter(){
    private final ICompletionProposalSorter RELEVANCE_SORTER=new RelevanceSorter();
    @Override public int compare(    ICompletionProposal p1,    ICompletionProposal p2){
      if (p1 instanceof SnippetProposal && p2 instanceof SnippetProposal) {
        SnippetProposal s1=(SnippetProposal)p1;
        SnippetProposal s2=(SnippetProposal)p2;
        return ComparisonChain.start().compare(s1.getRepositoryRelevance(),s2.getRepositoryRelevance()).compare(s2.getRelevance(),s1.getRelevance()).compare(s1.getSnippet().getName(),s2.getSnippet().getName()).result();
      }
 else       if (p1 instanceof RepositoryProposal && p2 instanceof RepositoryProposal) {
        RepositoryProposal s1=(RepositoryProposal)p1;
        RepositoryProposal s2=(RepositoryProposal)p2;
        return ComparisonChain.start().compare(s1.getRepositoryPriority(),s2.getRepositoryPriority()).result();
      }
 else       if (p1 instanceof RepositoryProposal && p2 instanceof SnippetProposal) {
        return compareSnippetWithRepository((SnippetProposal)p2,(RepositoryProposal)p1);
      }
 else       if (p1 instanceof SnippetProposal && p2 instanceof RepositoryProposal) {
        return compareSnippetWithRepository((SnippetProposal)p1,(RepositoryProposal)p2);
      }
 else {
        return RELEVANCE_SORTER.compare(p1,p2);
      }
    }
  }
);
  return assistant;
}","private ContentAssistant newContentAssistant(){
  ContentAssistant assistant=new ContentAssistant(){
    @Override public void hide(){
      if (isFocused(searchText) && state != AssistantControlState.ENABLE_HIDE) {
      }
 else {
        super.hide();
        selectedProposal=null;
      }
    }
    private boolean isFocused(    Control control){
      Control focusControl=Display.getCurrent().getFocusControl();
      return control.equals(focusControl);
    }
  }
;
  assistant.addCompletionListener(new ICompletionListener(){
    @Override public void assistSessionEnded(    ContentAssistEvent event){
      selectedProposal=null;
      if (searchShell != null) {
        searchShell.dispose();
      }
    }
    @Override public void selectionChanged(    ICompletionProposal proposal,    boolean smartToggle){
      if (proposal instanceof ICompletionProposal) {
        selectedProposal=proposal;
      }
 else {
        selectedProposal=null;
      }
    }
    @Override public void assistSessionStarted(    ContentAssistEvent event){
    }
  }
);
  assistant.setShowEmptyList(true);
  assistant.enablePrefixCompletion(true);
  assistant.enableColoredLabels(true);
  assistant.setContentAssistProcessor(processor,DEFAULT_CONTENT_TYPE);
  assistant.setInformationControlCreator(new TemplateInformationControlCreator(SWT.LEFT_TO_RIGHT));
  assistant.setEmptyMessage(Messages.COMPLETION_ENGINE_NO_SNIPPETS_FOUND);
  assistant.setRepeatedInvocationMode(true);
  assistant.setStatusLineVisible(true);
  assistant.setSorter(new AbstractProposalSorter(){
    private final ICompletionProposalSorter RELEVANCE_SORTER=new RelevanceSorter();
    @Override public int compare(    ICompletionProposal p1,    ICompletionProposal p2){
      if (p1 instanceof SnippetProposal && p2 instanceof SnippetProposal) {
        SnippetProposal s1=(SnippetProposal)p1;
        SnippetProposal s2=(SnippetProposal)p2;
        return ComparisonChain.start().compare(s1.getRepositoryRelevance(),s2.getRepositoryRelevance()).compare(s2.getRelevance(),s1.getRelevance()).compare(s1.getSnippet().getName(),s2.getSnippet().getName()).result();
      }
 else       if (p1 instanceof RepositoryProposal && p2 instanceof RepositoryProposal) {
        RepositoryProposal s1=(RepositoryProposal)p1;
        RepositoryProposal s2=(RepositoryProposal)p2;
        return ComparisonChain.start().compare(s1.getRepositoryPriority(),s2.getRepositoryPriority()).result();
      }
 else       if (p1 instanceof RepositoryProposal && p2 instanceof SnippetProposal) {
        int i=compareSnippetWithRepository((SnippetProposal)p2,(RepositoryProposal)p1);
        return i;
      }
 else       if (p1 instanceof SnippetProposal && p2 instanceof RepositoryProposal) {
        int i=-compareSnippetWithRepository((SnippetProposal)p1,(RepositoryProposal)p2);
        return i;
      }
 else {
        return RELEVANCE_SORTER.compare(p1,p2);
      }
    }
  }
);
  return assistant;
}",0.9892399658411614
93162,"@Override public int compare(ICompletionProposal p1,ICompletionProposal p2){
  if (p1 instanceof SnippetProposal && p2 instanceof SnippetProposal) {
    SnippetProposal s1=(SnippetProposal)p1;
    SnippetProposal s2=(SnippetProposal)p2;
    return ComparisonChain.start().compare(s1.getRepositoryRelevance(),s2.getRepositoryRelevance()).compare(s2.getRelevance(),s1.getRelevance()).compare(s1.getSnippet().getName(),s2.getSnippet().getName()).result();
  }
 else   if (p1 instanceof RepositoryProposal && p2 instanceof RepositoryProposal) {
    RepositoryProposal s1=(RepositoryProposal)p1;
    RepositoryProposal s2=(RepositoryProposal)p2;
    return ComparisonChain.start().compare(s1.getRepositoryPriority(),s2.getRepositoryPriority()).result();
  }
 else   if (p1 instanceof RepositoryProposal && p2 instanceof SnippetProposal) {
    return compareSnippetWithRepository((SnippetProposal)p2,(RepositoryProposal)p1);
  }
 else   if (p1 instanceof SnippetProposal && p2 instanceof RepositoryProposal) {
    return compareSnippetWithRepository((SnippetProposal)p1,(RepositoryProposal)p2);
  }
 else {
    return RELEVANCE_SORTER.compare(p1,p2);
  }
}","@Override public int compare(ICompletionProposal p1,ICompletionProposal p2){
  if (p1 instanceof SnippetProposal && p2 instanceof SnippetProposal) {
    SnippetProposal s1=(SnippetProposal)p1;
    SnippetProposal s2=(SnippetProposal)p2;
    return ComparisonChain.start().compare(s1.getRepositoryRelevance(),s2.getRepositoryRelevance()).compare(s2.getRelevance(),s1.getRelevance()).compare(s1.getSnippet().getName(),s2.getSnippet().getName()).result();
  }
 else   if (p1 instanceof RepositoryProposal && p2 instanceof RepositoryProposal) {
    RepositoryProposal s1=(RepositoryProposal)p1;
    RepositoryProposal s2=(RepositoryProposal)p2;
    return ComparisonChain.start().compare(s1.getRepositoryPriority(),s2.getRepositoryPriority()).result();
  }
 else   if (p1 instanceof RepositoryProposal && p2 instanceof SnippetProposal) {
    int i=compareSnippetWithRepository((SnippetProposal)p2,(RepositoryProposal)p1);
    return i;
  }
 else   if (p1 instanceof SnippetProposal && p2 instanceof RepositoryProposal) {
    int i=-compareSnippetWithRepository((SnippetProposal)p1,(RepositoryProposal)p2);
    return i;
  }
 else {
    return RELEVANCE_SORTER.compare(p1,p2);
  }
}",0.8646325741297808
93163,"private int compareSnippetWithRepository(SnippetProposal s,RepositoryProposal r){
  int comparison=ComparisonChain.start().compare(r.getRepositoryPriority(),s.getRepositoryRelevance()).result();
  return comparison != 0 ? comparison : 1;
}","private int compareSnippetWithRepository(SnippetProposal s,RepositoryProposal r){
  int comparison=ComparisonChain.start().compare(r.getRepositoryPriority(),s.getRepositoryRelevance()).result();
  return comparison != 0 ? comparison : -1;
}",0.9979123173277662
93164,"private ContentAssistant newContentAssistant(){
  ContentAssistant assistant=new ContentAssistant(){
    @Override public void hide(){
      if (isFocused(searchText) && state != AssistantControlState.ENABLE_HIDE) {
      }
 else {
        super.hide();
        selectedProposal=null;
      }
    }
    private boolean isFocused(    Control control){
      Control focusControl=Display.getCurrent().getFocusControl();
      return control.equals(focusControl);
    }
  }
;
  assistant.addCompletionListener(new ICompletionListener(){
    @Override public void assistSessionEnded(    ContentAssistEvent event){
      selectedProposal=null;
      if (searchShell != null) {
        searchShell.dispose();
      }
    }
    @Override public void selectionChanged(    ICompletionProposal proposal,    boolean smartToggle){
      if (proposal instanceof ICompletionProposal) {
        selectedProposal=proposal;
      }
 else {
        selectedProposal=null;
      }
    }
    @Override public void assistSessionStarted(    ContentAssistEvent event){
    }
  }
);
  assistant.setShowEmptyList(true);
  assistant.enablePrefixCompletion(true);
  assistant.enableColoredLabels(true);
  assistant.setContentAssistProcessor(processor,DEFAULT_CONTENT_TYPE);
  assistant.setInformationControlCreator(new TemplateInformationControlCreator(SWT.LEFT_TO_RIGHT));
  assistant.setEmptyMessage(Messages.COMPLETION_ENGINE_NO_SNIPPETS_FOUND);
  assistant.setRepeatedInvocationMode(true);
  assistant.setStatusLineVisible(true);
  assistant.setSorter(new AbstractProposalSorter(){
    private final ICompletionProposalSorter RELEVANCE_SORTER=new RelevanceSorter();
    @Override public int compare(    ICompletionProposal p1,    ICompletionProposal p2){
      if (p1 instanceof SnippetProposal && p2 instanceof SnippetProposal) {
        SnippetProposal s1=(SnippetProposal)p1;
        SnippetProposal s2=(SnippetProposal)p2;
        return ComparisonChain.start().compare(s1.getRepositoryRelevance(),s2.getRepositoryRelevance()).compare(s2.getRelevance(),s1.getRelevance()).compare(s1.getSnippet().getName(),s2.getSnippet().getName()).result();
      }
 else       if (p1 instanceof RepositoryProposal && p2 instanceof RepositoryProposal) {
        RepositoryProposal s1=(RepositoryProposal)p1;
        RepositoryProposal s2=(RepositoryProposal)p2;
        return ComparisonChain.start().compare(s1.getRepositoryPriority(),s2.getRepositoryPriority()).result();
      }
 else       if (p1 instanceof RepositoryProposal && p2 instanceof SnippetProposal) {
        int i=compareSnippetWithRepository((SnippetProposal)p2,(RepositoryProposal)p1);
        return i;
      }
 else       if (p1 instanceof SnippetProposal && p2 instanceof RepositoryProposal) {
        int i=-compareSnippetWithRepository((SnippetProposal)p1,(RepositoryProposal)p2);
        return i;
      }
 else {
        return RELEVANCE_SORTER.compare(p1,p2);
      }
    }
  }
);
  return assistant;
}","private ContentAssistant newContentAssistant(){
  ContentAssistant assistant=new ContentAssistant(){
    @Override public void hide(){
      if (isFocused(searchText) && state != AssistantControlState.ENABLE_HIDE) {
      }
 else {
        super.hide();
        selectedProposal=null;
      }
    }
    private boolean isFocused(    Control control){
      Control focusControl=Display.getCurrent().getFocusControl();
      return control.equals(focusControl);
    }
  }
;
  assistant.addCompletionListener(new ICompletionListener(){
    @Override public void assistSessionEnded(    ContentAssistEvent event){
      selectedProposal=null;
      if (searchShell != null) {
        searchShell.dispose();
      }
    }
    @Override public void selectionChanged(    ICompletionProposal proposal,    boolean smartToggle){
      if (proposal instanceof ICompletionProposal) {
        selectedProposal=proposal;
      }
 else {
        selectedProposal=null;
      }
    }
    @Override public void assistSessionStarted(    ContentAssistEvent event){
    }
  }
);
  assistant.setShowEmptyList(true);
  assistant.enablePrefixCompletion(true);
  assistant.enableColoredLabels(true);
  assistant.setRepeatedInvocationMode(true);
  assistant.setStatusLineVisible(false);
  assistant.setContentAssistProcessor(processor,DEFAULT_CONTENT_TYPE);
  assistant.setInformationControlCreator(new TemplateInformationControlCreator(SWT.LEFT_TO_RIGHT));
  assistant.setSorter(new AbstractProposalSorter(){
    private final ICompletionProposalSorter RELEVANCE_SORTER=new RelevanceSorter();
    @Override public int compare(    ICompletionProposal p1,    ICompletionProposal p2){
      if (p1 instanceof SnippetProposal && p2 instanceof SnippetProposal) {
        SnippetProposal s1=(SnippetProposal)p1;
        SnippetProposal s2=(SnippetProposal)p2;
        return ComparisonChain.start().compare(s1.getRepositoryRelevance(),s2.getRepositoryRelevance()).compare(s2.getRelevance(),s1.getRelevance()).compare(s1.getSnippet().getName(),s2.getSnippet().getName()).result();
      }
 else       if (p1 instanceof RepositoryProposal && p2 instanceof RepositoryProposal) {
        RepositoryProposal s1=(RepositoryProposal)p1;
        RepositoryProposal s2=(RepositoryProposal)p2;
        return ComparisonChain.start().compare(s1.getRepositoryPriority(),s2.getRepositoryPriority()).result();
      }
 else       if (p1 instanceof RepositoryProposal && p2 instanceof SnippetProposal) {
        int i=compareSnippetWithRepository((SnippetProposal)p2,(RepositoryProposal)p1);
        return i;
      }
 else       if (p1 instanceof SnippetProposal && p2 instanceof RepositoryProposal) {
        int i=-compareSnippetWithRepository((SnippetProposal)p1,(RepositoryProposal)p2);
        return i;
      }
 else {
        return RELEVANCE_SORTER.compare(p1,p2);
      }
    }
  }
);
  return assistant;
}",0.9577028885832188
93165,"private void createSearchPopup(){
  Shell parentShell=context.getViewer().getTextWidget().getShell();
  searchShell=new Shell(parentShell,SWT.ON_TOP);
  searchShell.setLayout(new FillLayout());
  searchShell.addListener(SWT.Traverse,new Listener(){
    @Override public void handleEvent(    Event e){
      if (e.detail == SWT.TRAVERSE_ESCAPE) {
        state=AssistantControlState.ENABLE_HIDE;
        assistant.uninstall();
      }
    }
  }
);
  searchText=new StyledText(searchShell,SWT.SINGLE);
  searchText.setFont(fontRegistry.get(""String_Node_Str""));
  searchText.setBackground(colorRegistry.get(PREF_SEARCH_BOX_BACKGROUND));
  searchText.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    FocusEvent e){
      if (!assistant.hasProposalPopupFocus()) {
        state=AssistantControlState.ENABLE_HIDE;
        searchShell.dispose();
        assistant.uninstall();
      }
    }
  }
);
  searchText.addVerifyKeyListener(new VerifyKeyListener(){
    @Override public void verifyKey(    VerifyEvent e){
      ICompletionProposal appliedProposal=selectedProposal;
switch (e.character) {
case SWT.CR:
        e.doit=false;
      if (appliedProposal instanceof SnippetProposal) {
        SnippetProposal snippetProposal=(SnippetProposal)appliedProposal;
        state=AssistantControlState.ENABLE_HIDE;
        assistant.uninstall();
        if (snippetProposal.isValidFor(context.getDocument(),context.getInvocationOffset())) {
          snippetApplied(snippetProposal);
        }
        snippetProposal.apply(context.getViewer(),(char)0,SWT.NONE,context.getInvocationOffset());
        Point selection=snippetProposal.getSelection(context.getDocument());
        if (selection != null) {
          context.getViewer().setSelectedRange(selection.x,selection.y);
          context.getViewer().revealRange(selection.x,selection.y);
        }
      }
 else {
        state=AssistantControlState.ENABLE_HIDE;
        assistant.uninstall();
      }
    return;
case SWT.TAB:
  e.doit=false;
return;
}
if (appliedProposal == null) {
return;
}
switch (e.keyCode) {
case SWT.ARROW_UP:
execute(ContentAssistant.SELECT_PREVIOUS_PROPOSAL_COMMAND_ID);
if (selectedProposal instanceof RepositoryProposal) {
execute(ContentAssistant.SELECT_PREVIOUS_PROPOSAL_COMMAND_ID);
}
return;
case SWT.ARROW_DOWN:
execute(ContentAssistant.SELECT_NEXT_PROPOSAL_COMMAND_ID);
if (selectedProposal instanceof RepositoryProposal) {
execute(ContentAssistant.SELECT_NEXT_PROPOSAL_COMMAND_ID);
}
return;
}
}
}
);
searchText.addModifyListener(new ModifyListener(){
@Override public void modifyText(ModifyEvent e){
String query=searchText.getText().trim();
processor.setTerms(query);
assistant.showPossibleCompletions();
assistant.showContextInformation();
if (selectedProposal instanceof RepositoryProposal) {
execute(ContentAssistant.SELECT_NEXT_PROPOSAL_COMMAND_ID);
}
}
}
);
placeShell();
searchShell.open();
searchShell.setFocus();
}","private void createSearchPopup(){
  Shell parentShell=context.getViewer().getTextWidget().getShell();
  searchShell=new Shell(parentShell,SWT.ON_TOP);
  searchShell.setLayout(new FillLayout());
  searchShell.addListener(SWT.Traverse,new Listener(){
    @Override public void handleEvent(    Event e){
      if (e.detail == SWT.TRAVERSE_ESCAPE) {
        state=AssistantControlState.ENABLE_HIDE;
        assistant.uninstall();
      }
    }
  }
);
  searchText=new StyledText(searchShell,SWT.SINGLE);
  searchText.setFont(fontRegistry.get(""String_Node_Str""));
  searchText.setBackground(colorRegistry.get(PREF_SEARCH_BOX_BACKGROUND));
  searchText.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    FocusEvent e){
      if (!assistant.hasProposalPopupFocus()) {
        state=AssistantControlState.ENABLE_HIDE;
        searchShell.dispose();
        assistant.uninstall();
      }
    }
  }
);
  searchText.addVerifyKeyListener(new VerifyKeyListener(){
    @Override public void verifyKey(    VerifyEvent e){
      ICompletionProposal appliedProposal=selectedProposal;
switch (e.character) {
case SWT.CR:
        e.doit=false;
      if (appliedProposal instanceof SnippetProposal) {
        SnippetProposal snippetProposal=(SnippetProposal)appliedProposal;
        state=AssistantControlState.ENABLE_HIDE;
        assistant.uninstall();
        if (snippetProposal.isValidFor(context.getDocument(),context.getInvocationOffset())) {
          snippetApplied(snippetProposal);
        }
        snippetProposal.apply(context.getViewer(),(char)0,SWT.NONE,context.getInvocationOffset());
        Point selection=snippetProposal.getSelection(context.getDocument());
        if (selection != null) {
          context.getViewer().setSelectedRange(selection.x,selection.y);
          context.getViewer().revealRange(selection.x,selection.y);
        }
      }
 else {
        state=AssistantControlState.ENABLE_HIDE;
        assistant.uninstall();
      }
    return;
case SWT.TAB:
  e.doit=false;
return;
}
if (appliedProposal == null) {
return;
}
switch (e.keyCode) {
case SWT.ARROW_UP:
execute(ContentAssistant.SELECT_PREVIOUS_PROPOSAL_COMMAND_ID);
if (selectedProposal instanceof RepositoryProposal) {
execute(ContentAssistant.SELECT_PREVIOUS_PROPOSAL_COMMAND_ID);
}
return;
case SWT.ARROW_DOWN:
execute(ContentAssistant.SELECT_NEXT_PROPOSAL_COMMAND_ID);
if (selectedProposal instanceof RepositoryProposal) {
execute(ContentAssistant.SELECT_NEXT_PROPOSAL_COMMAND_ID);
}
return;
}
}
}
);
searchText.addModifyListener(new ModifyListener(){
@Override public void modifyText(ModifyEvent e){
String query=searchText.getText().trim();
processor.setTerms(query);
assistant.setEmptyMessage(Messages.COMPLETION_ENGINE_NO_SNIPPETS_FOUND);
assistant.showPossibleCompletions();
assistant.showContextInformation();
if (selectedProposal instanceof RepositoryProposal) {
execute(ContentAssistant.SELECT_NEXT_PROPOSAL_COMMAND_ID);
}
}
}
);
placeShell();
searchShell.open();
searchShell.setFocus();
}",0.98770422772444
93166,"@Override public void modifyText(ModifyEvent e){
  String query=searchText.getText().trim();
  processor.setTerms(query);
  assistant.showPossibleCompletions();
  assistant.showContextInformation();
  if (selectedProposal instanceof RepositoryProposal) {
    execute(ContentAssistant.SELECT_NEXT_PROPOSAL_COMMAND_ID);
  }
}","@Override public void modifyText(ModifyEvent e){
  String query=searchText.getText().trim();
  processor.setTerms(query);
  assistant.setEmptyMessage(Messages.COMPLETION_ENGINE_NO_SNIPPETS_FOUND);
  assistant.showPossibleCompletions();
  assistant.showContextInformation();
  if (selectedProposal instanceof RepositoryProposal) {
    execute(ContentAssistant.SELECT_NEXT_PROPOSAL_COMMAND_ID);
  }
}",0.8959778085991679
93167,"@Override protected void createContentArea(Composite composite){
  super.createContentArea(composite);
  composite.setLayout(new GridLayout(1,true));
  Link link=new Link(composite,SWT.NONE);
  link.setText(message);
  link.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Browsers.openInExternalBrowser(e.text);
    }
  }
);
}","@Override protected void createContentArea(Composite composite){
  super.createContentArea(composite);
  composite.setLayout(new GridLayout(1,true));
  Link link=new Link(composite,SWT.WRAP);
  link.setText(message);
  link.setLayoutData(GridDataFactory.fillDefaults().hint(AbstractNotificationPopup.MAX_WIDTH,SWT.DEFAULT).create());
  link.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Browsers.openInExternalBrowser(e.text);
    }
  }
);
}",0.8128460686600222
93168,"/** 
 * Creates the compilation unit with the class name found in the content. If the content has a package declaration the class will be put inside of this package. For this the package must be exist. The project will not be refreshed and built after creation of this file.<br> <br> To create a file that has markers in it, use the method createFileAndParseWithMarkers() or createFileAndPackageAndParseWithMarkers().
 * @see createPackage(String)
 * @see refreshAndBuildProject()
 * @param content the content of the compilation unit. Must be java source code with or without package declaration but with a java class definition
 * @param usePackage if the package as declared in the content will be used to create the file. Means, if a package declaration exists in the content this file will be created inside of this package, otherwise the default package will be used.
 * @return the created compilation compilation unit
 * @throws CoreException
 */
public ICompilationUnit createFile(final String content,boolean usePackage) throws CoreException {
  final IProject project=javaProject.getProject();
  final String fileName=findClassName(content) + ""String_Node_Str"";
  StringBuilder relativeFilePath=new StringBuilder();
  if (usePackage) {
    String packageName=findPackageName(content);
    if (!packageName.equalsIgnoreCase(""String_Node_Str"")) {
      relativeFilePath.append(packageName.replace('.',IPath.SEPARATOR));
      relativeFilePath.append(String.valueOf(IPath.SEPARATOR));
    }
  }
  relativeFilePath.append(fileName);
  final IPath path=new Path(relativeFilePath.toString());
  final IFile file=project.getFile(path);
  if (file.exists()) {
    file.delete(true,NULL_PROGRESS_MONITOR);
  }
  final ByteArrayInputStream is=new ByteArrayInputStream(content.getBytes());
  file.create(is,true,NULL_PROGRESS_MONITOR);
  final ICompilationUnit cu=(ICompilationUnit)javaProject.findElement(path);
  return cu;
}","/** 
 * Creates the compilation unit with the class name found in the content. If the content has a package declaration the class will be put inside of this package. For this the package must be exist. The project will not be refreshed and built after creation of this file.<br> <br> To create a file that has markers in it, use the method createFileAndParseWithMarkers() or createFileAndPackageAndParseWithMarkers().
 * @see createPackage(String)
 * @see refreshAndBuildProject()
 * @param content the content of the compilation unit. Must be java source code with or without package declaration but with a java class definition
 * @param usePackage if the package as declared in the content will be used to create the file. Means, if a package declaration exists in the content this file will be created inside of this package, otherwise the default package will be used.
 * @return the created compilation compilation unit
 * @throws CoreException
 */
public ICompilationUnit createFile(final String content,boolean usePackage) throws CoreException {
  final IProject project=javaProject.getProject();
  final String fileName=findClassName(content) + ""String_Node_Str"";
  StringBuilder relativeFilePath=new StringBuilder();
  if (usePackage) {
    String packageName=findPackageName(content);
    if (!packageName.equalsIgnoreCase(""String_Node_Str"")) {
      relativeFilePath.append(packageName.replace('.',IPath.SEPARATOR));
      relativeFilePath.append(String.valueOf(IPath.SEPARATOR));
    }
  }
  relativeFilePath.append(fileName);
  final IPath path=new Path(relativeFilePath.toString());
  final IFile file=project.getFile(path);
  if (file.exists()) {
    file.delete(true,NULL_PROGRESS_MONITOR);
  }
  final ByteArrayInputStream is=new ByteArrayInputStream(content.getBytes());
  file.create(is,true,NULL_PROGRESS_MONITOR);
  int attempts=0;
  while (!file.exists()) {
    try {
      Thread.sleep(10);
    }
 catch (    InterruptedException e) {
    }
    attempts++;
    if (attempts > 10) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  final ICompilationUnit cu=(ICompilationUnit)javaProject.findElement(path);
  return cu;
}",0.9418377321603127
93169,"protected ProcessableLazyJavaTypeCompletionProposal(final CompletionProposal coreProposal,final JavaContentAssistInvocationContext context){
  super(coreProposal,context);
}","protected ProcessableLazyJavaTypeCompletionProposal(final CompletionProposal coreProposal,final JavaContentAssistInvocationContext context){
  super(coreProposal,context);
  this.coreProposal=coreProposal;
}",0.9105263157894736
93170,"private Optional<Manifest> extractManifestFromProject(DependencyInfo dependencyInfo){
  File projectFolder=dependencyInfo.getFile();
  File metaInfFolder=new File(projectFolder,""String_Node_Str"");
  File manifestFile=new File(metaInfFolder,""String_Node_Str"");
  if (manifestFile.exists()) {
    try {
      FileInputStream fileInputStream=new FileInputStream(manifestFile);
      Manifest manifest=new Manifest(fileInputStream);
      fileInputStream.close();
      return of(manifest);
    }
 catch (    IOException e) {
      return absent();
    }
  }
  return absent();
}","private Optional<Manifest> extractManifestFromProject(DependencyInfo dependencyInfo){
  File projectFolder=dependencyInfo.getFile();
  File metaInfFolder=new File(projectFolder,""String_Node_Str"");
  File manifestFile=new File(metaInfFolder,""String_Node_Str"");
  if (manifestFile.exists()) {
    InputStream in=null;
    try {
      in=new FileInputStream(manifestFile);
      Manifest manifest=new Manifest(in);
      return of(manifest);
    }
 catch (    IOException e) {
      return absent();
    }
 finally {
      IOUtils.closeQuietly(in);
    }
  }
  return absent();
}",0.787141615986099
93171,"@Override public Multimap deserialize(final JsonElement json,final Type typeOfT,final JsonDeserializationContext context) throws JsonParseException {
  final Multimap multimap=HashMultimap.create();
  final Map map=context.deserialize(json,createMapType(typeOfT));
  for (  final Object key : map.keySet()) {
    final Collection values=(Collection)map.get(key);
    multimap.putAll(key,values);
  }
  return multimap;
}","@Override public Multimap deserialize(final JsonElement json,final Type typeOfT,final JsonDeserializationContext context) throws JsonParseException {
  final Multimap multimap=HashMultimap.create();
  final Map<Object,Collection> map=context.deserialize(json,createMapType(typeOfT));
  for (  Entry<Object,Collection> entry : map.entrySet()) {
    multimap.putAll(entry.getKey(),entry.getValue());
  }
  return multimap;
}",0.5938242280285035
93172,"@Override public int compare(Integer o1,Integer o2){
  return -Double.compare(key[o1],key[o2]);
}","@Override public int compare(Integer o1,Integer o2){
  return Double.compare(key[o2],key[o1]);
}",0.9740932642487048
93173,"private int[] sortByKey(final double[] key,int[] array){
  int[] permutation=sort(indexArray(key.length),new Comparator<Integer>(){
    @Override public int compare(    Integer o1,    Integer o2){
      return -Double.compare(key[o1],key[o2]);
    }
  }
);
  return permute(array,permutation);
}","private int[] sortByKey(final double[] key,int[] array){
  int[] permutation=sort(indexArray(key.length),new Comparator<Integer>(){
    @Override public int compare(    Integer o1,    Integer o2){
      return Double.compare(key[o2],key[o1]);
    }
  }
);
  return permute(array,permutation);
}",0.9711375212224108
93174,"@Override public Number next(){
  index++;
  return array[index - 1];
}","@Override public Number next(){
  if (index >= array.length) {
    throw new NoSuchElementException();
  }
  return array[index++];
}",0.6372549019607843
93175,"@Override public Iterator<Number> iterator(){
  return new Iterator<Number>(){
    private int index=0;
    @Override public boolean hasNext(){
      return index < array.length;
    }
    @Override public Number next(){
      index++;
      return array[index - 1];
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}","@Override public Iterator<Number> iterator(){
  return new Iterator<Number>(){
    private int index=0;
    @Override public boolean hasNext(){
      return index < array.length;
    }
    @Override public Number next(){
      if (index >= array.length) {
        throw new NoSuchElementException();
      }
      return array[index++];
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}",0.8399014778325123
93176,"@Override public Number next(){
  index++;
  return array[index - 1];
}","@Override public Number next(){
  if (index >= array.length) {
    throw new NoSuchElementException();
  }
  return array[index++];
}",0.6372549019607843
93177,"@Override public Iterator<Number> iterator(){
  return new Iterator<Number>(){
    private int index=0;
    @Override public boolean hasNext(){
      return index < array.length;
    }
    @Override public Number next(){
      index++;
      return array[index - 1];
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}","@Override public Iterator<Number> iterator(){
  return new Iterator<Number>(){
    private int index=0;
    @Override public boolean hasNext(){
      return index < array.length;
    }
    @Override public Number next(){
      if (index >= array.length) {
        throw new NoSuchElementException();
      }
      return array[index++];
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}",0.8399014778325123
93178,"public static boolean matchesSuffixPattern(String path,String suffixPattern){
  int separators=countMatches(suffixPattern,""String_Node_Str"") + 1;
  int separatorIndex=path.length();
  while (separators > 0) {
    separatorIndex=path.lastIndexOf(""String_Node_Str"",separatorIndex - 1);
    separators--;
  }
  String substring=path.substring(separatorIndex + 1);
  return FilenameUtils.wildcardMatch(substring,suffixPattern);
}","public static boolean matchesSuffixPattern(String path,String suffixPattern){
  int separators=countMatches(suffixPattern,""String_Node_Str"") + 1;
  int separatorIndex=path.length();
  while (separators > 0) {
    separatorIndex=path.lastIndexOf('/',separatorIndex - 1);
    separators--;
  }
  String substring=path.substring(separatorIndex + 1);
  return FilenameUtils.wildcardMatch(substring,suffixPattern);
}",0.9760765550239234
93179,"@Override public int compare(final Viewer viewer,final Object o1,final Object o2){
  if (direction == SWT.NONE) {
    return 0;
  }
  Comparator<Object> comparator=comparators.get(tableColumn);
  if (comparator == null) {
    return 0;
  }
  int result=comparator.compare(o1,o2);
  return (direction == SWT.DOWN) ? -result : result;
}","@Override public int compare(final Viewer viewer,final Object o1,final Object o2){
  if (direction == SWT.NONE) {
    return 0;
  }
  Comparator<Object> comparator=comparators.get(tableColumn);
  if (comparator == null) {
    return 0;
  }
  return direction == SWT.DOWN ? comparator.compare(o2,o1) : comparator.compare(o1,o2);
}",0.8205128205128205
93180,"public int compare(Object arg0,Object arg1){
  return arg0.toString().compareTo(arg1.toString());
}","@Override public int compare(Object arg0,Object arg1){
  return arg0.toString().compareTo(arg1.toString());
}",0.9519230769230768
93181,"public boolean isConsistentItem(Object item){
  return true;
}","@Override public boolean isConsistentItem(Object item){
  return true;
}",0.9253731343283582
93182,"@Override protected void createFormContent(IManagedForm managedForm){
  FormToolkit toolkit=managedForm.getToolkit();
  ScrolledForm form=managedForm.getForm();
  form.setText(Messages.EDITOR_TITLE_METADATA);
  Composite body=form.getBody();
  toolkit.decorateFormHeading(form.getForm());
  toolkit.paintBordersFor(body);
  managedForm.getForm().getBody().setLayout(new GridLayout(3,false));
  contentsPart=new AbstractFormPart(){
    @Override public void initialize(    IManagedForm managedForm){
      super.initialize(managedForm);
      Label lblName=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_NAME,SWT.NONE);
      lblName.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
      int horizontalIndent=decorationImage.getBounds().width + 2;
      txtName=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getName(),SWT.NONE);
      txtName.setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
      final ControlDecoration nameDecoration=new ControlDecoration(txtName,SWT.LEFT);
      nameDecoration.setDescriptionText(Messages.ERROR_SNIPPET_NAME_CANNOT_BE_EMPTY);
      nameDecoration.setImage(decorationImage);
      nameDecoration.setMarginWidth(1);
      txtName.addModifyListener(new ModifyListener(){
        @Override public void modifyText(        ModifyEvent arg0){
          if (isNullOrEmpty(txtName.getText())) {
            nameDecoration.show();
          }
 else {
            nameDecoration.hide();
          }
        }
      }
);
      Label lblDescription=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_DESCRIPTION,SWT.NONE);
      lblDescription.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
      txtDescription=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getDescription(),SWT.NONE);
      txtDescription.setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
      Label lblLocation=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_LOCATION,SWT.NONE);
      lblLocation.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
      comboLocation=new ComboViewer(managedForm.getForm().getBody(),SWT.DROP_DOWN | SWT.READ_ONLY);
      managedForm.getToolkit().adapt(comboLocation.getCombo(),true,true);
      comboLocation.setContentProvider(ArrayContentProvider.getInstance());
      comboLocation.setInput(SNIPMATCH_LOCATIONS);
      comboLocation.setLabelProvider(new LabelProvider(){
        @Override public String getText(        Object element){
          if (element instanceof Location) {
            Location location=(Location)element;
switch (location) {
case FILE:
              return Messages.SNIPMATCH_LOCATION_FILE;
case JAVA:
            return Messages.SNIPMATCH_LOCATION_JAVA;
case JAVA_STATEMENTS:
          return Messages.SNIPMATCH_LOCATION_JAVA_STATEMENTS;
case JAVA_TYPE_MEMBERS:
        return Messages.SNIPMATCH_LOCATION_JAVA_MEMBERS;
case JAVADOC:
      return Messages.SNIPMATCH_LOCATION_JAVADOC;
default :
    break;
}
}
return super.getText(element);
}
}
);
comboLocation.getCombo().setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
final ControlDecoration locationErrorDecoration=new ControlDecoration(comboLocation.getCombo(),SWT.LEFT);
locationErrorDecoration.setDescriptionText(Messages.ERROR_SNIPPET_LOCATION_CANNOT_BE_EMPTY + ""String_Node_Str"" + Messages.EDITOR_DESCRIPTION_LOCATION);
locationErrorDecoration.setImage(decorationImage);
locationErrorDecoration.setMarginWidth(1);
final ControlDecoration locationDescriptionDecoration=new ControlDecoration(comboLocation.getCombo(),SWT.LEFT);
FieldDecoration infoDecoration=FieldDecorationRegistry.getDefault().getFieldDecoration(DEC_INFORMATION);
locationDescriptionDecoration.setImage(infoDecoration.getImage());
locationDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_LOCATION);
locationDescriptionDecoration.setMarginWidth(1);
comboLocation.addSelectionChangedListener(new ISelectionChangedListener(){
@Override public void selectionChanged(SelectionChangedEvent event){
if (event.getSelection().isEmpty()) {
locationErrorDecoration.show();
locationDescriptionDecoration.hide();
}
 else {
locationErrorDecoration.hide();
locationDescriptionDecoration.show();
}
}
}
);
comboLocation.setSelection(new StructuredSelection(snippet.getLocation()));
Label lblExtraSearchTerms=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPETS_EXTRA_SEARCH_TERMS,SWT.NONE);
lblExtraSearchTerms.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerExtraSearchTerms=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstExtraSearchTerm=listViewerExtraSearchTerms.getList();
lstExtraSearchTerm.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).indent(horizontalIndent,0).create());
final ControlDecoration extraSearchTermsDescriptionDecoration=new ControlDecoration(listViewerExtraSearchTerms.getList(),SWT.TOP | SWT.LEFT);
extraSearchTermsDescriptionDecoration.setImage(infoDecoration.getImage());
extraSearchTermsDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_EXTRA_SEARCH_TERMS);
extraSearchTermsDescriptionDecoration.setMarginWidth(1);
btnContainerExtraSearchTerms=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerExtraSearchTerms.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerExtraSearchTerms);
btnContainerExtraSearchTerms.setLayout(new GridLayout(1,false));
btnAddExtraSearchTerm=managedForm.getToolkit().createButton(btnContainerExtraSearchTerms,Messages.EDITOR_BUTTON_ADD_EXTRASEARCH_TERM,SWT.NONE);
btnAddExtraSearchTerm.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
createExtraSearchTermInputDialog(btnContainerExtraSearchTerms.getShell()).open();
}
}
);
btnAddExtraSearchTerm.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveExtraSearchTerm=managedForm.getToolkit().createButton(btnContainerExtraSearchTerms,Messages.EDITOR_BUTTON_REMOVE_EXTRA_SEARCH_TERM,SWT.NONE);
btnRemoveExtraSearchTerm.setEnabled(false);
btnRemoveExtraSearchTerm.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerExtraSearchTerms);
if (o.isPresent()) {
ppExtraSearchTerms.remove(o.get());
}
}
}
);
btnRemoveExtraSearchTerm.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblTag=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPETS_TAG,SWT.NONE);
lblTag.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerTags=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstTags=listViewerTags.getList();
lstTags.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).indent(horizontalIndent,0).create());
final ControlDecoration tagsDescriptionDecoration=new ControlDecoration(listViewerTags.getList(),SWT.TOP | SWT.LEFT);
tagsDescriptionDecoration.setImage(infoDecoration.getImage());
tagsDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_TAGS);
tagsDescriptionDecoration.setMarginWidth(1);
btnContainerTags=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerTags.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerExtraSearchTerms);
btnContainerTags.setLayout(new GridLayout(1,false));
btnAddTag=managedForm.getToolkit().createButton(btnContainerTags,Messages.EDITOR_BUTTON_ADD_TAGS,SWT.NONE);
btnAddTag.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
createTagInputDialog(btnContainerTags.getShell()).open();
}
}
);
btnAddTag.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveTag=managedForm.getToolkit().createButton(btnContainerTags,Messages.EDITOR_BUTTON_REMOVE_TAGS,SWT.NONE);
btnRemoveTag.setEnabled(false);
btnRemoveTag.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerTags);
if (o.isPresent()) {
ppTags.remove(o.get());
}
}
}
);
btnRemoveTag.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblDependencies=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_DEPENENCIES,SWT.NONE);
lblDependencies.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerDependencies=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstDependencies=listViewerDependencies.getList();
lstDependencies.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).indent(horizontalIndent,0).create());
final ControlDecoration dependencyDescriptionDecoration=new ControlDecoration(listViewerDependencies.getList(),SWT.TOP | SWT.LEFT);
dependencyDescriptionDecoration.setImage(infoDecoration.getImage());
dependencyDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_DEPENDENCIES);
dependencyDescriptionDecoration.setMarginWidth(1);
btnContainerDependencies=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerDependencies.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerDependencies);
btnContainerDependencies.setLayout(new GridLayout(1,false));
btnAddDependency=managedForm.getToolkit().createButton(btnContainerDependencies,Messages.EDITOR_BUTTON_ADD_DEPENDENCY,SWT.NONE);
btnAddDependency.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Shell shell=btnContainerDependencies.getShell();
ProjectCoordinateSelectionDialog dialog=new ProjectCoordinateSelectionDialog(shell);
dialog.setInitialPattern(""String_Node_Str"");
dialog.open();
Object[] result=dialog.getResult();
if (result != null) {
for (Object object : result) {
  ppDependencies.add((ProjectCoordinate)object);
}
}
}
}
);
btnAddDependency.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveDependency=managedForm.getToolkit().createButton(btnContainerDependencies,Messages.EDITOR_BUTTON_REMOVE_TAGS,SWT.NONE);
btnRemoveDependency.setEnabled(false);
btnRemoveDependency.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerDependencies);
if (o.isPresent()) {
ppDependencies.remove(o.get());
}
}
}
);
btnRemoveDependency.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblUuid=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_UUID,SWT.NONE);
lblUuid.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
txtUuid=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getUuid().toString(),SWT.READ_ONLY);
txtUuid.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).indent(horizontalIndent,0).create());
}
@Override public void commit(boolean onSave){
if (onSave) {
super.commit(onSave);
}
}
@Override public void refresh(){
context.updateTargets();
super.refresh();
}
}
;
managedForm.addPart(contentsPart);
context=createDataBindingContext();
}","@Override protected void createFormContent(IManagedForm managedForm){
  FormToolkit toolkit=managedForm.getToolkit();
  ScrolledForm form=managedForm.getForm();
  form.setText(Messages.EDITOR_TITLE_METADATA);
  Composite body=form.getBody();
  toolkit.decorateFormHeading(form.getForm());
  toolkit.paintBordersFor(body);
  managedForm.getForm().getBody().setLayout(new GridLayout(3,false));
  contentsPart=new AbstractFormPart(){
    @Override public void initialize(    IManagedForm managedForm){
      super.initialize(managedForm);
      Label lblName=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_NAME,SWT.NONE);
      lblName.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
      int horizontalIndent=decorationImage.getBounds().width + 2;
      txtName=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getName(),SWT.NONE);
      txtName.setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
      final ControlDecoration nameDecoration=new ControlDecoration(txtName,SWT.LEFT);
      nameDecoration.setDescriptionText(Messages.ERROR_SNIPPET_NAME_CANNOT_BE_EMPTY);
      nameDecoration.setImage(decorationImage);
      nameDecoration.setMarginWidth(1);
      txtName.addModifyListener(new ModifyListener(){
        @Override public void modifyText(        ModifyEvent arg0){
          if (isNullOrEmpty(txtName.getText())) {
            nameDecoration.show();
          }
 else {
            nameDecoration.hide();
          }
        }
      }
);
      Label lblDescription=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_DESCRIPTION,SWT.NONE);
      lblDescription.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
      txtDescription=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getDescription(),SWT.NONE);
      txtDescription.setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
      Label lblLocation=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_LOCATION,SWT.NONE);
      lblLocation.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
      comboLocation=new ComboViewer(managedForm.getForm().getBody(),SWT.DROP_DOWN | SWT.READ_ONLY);
      managedForm.getToolkit().adapt(comboLocation.getCombo(),true,true);
      comboLocation.setContentProvider(ArrayContentProvider.getInstance());
      comboLocation.setInput(SNIPMATCH_LOCATIONS);
      comboLocation.setLabelProvider(new LabelProvider(){
        @Override public String getText(        Object element){
          if (element instanceof Location) {
            Location location=(Location)element;
switch (location) {
case FILE:
              return Messages.SNIPMATCH_LOCATION_FILE;
case JAVA:
            return Messages.SNIPMATCH_LOCATION_JAVA;
case JAVA_STATEMENTS:
          return Messages.SNIPMATCH_LOCATION_JAVA_STATEMENTS;
case JAVA_TYPE_MEMBERS:
        return Messages.SNIPMATCH_LOCATION_JAVA_MEMBERS;
case JAVADOC:
      return Messages.SNIPMATCH_LOCATION_JAVADOC;
default :
    break;
}
}
return super.getText(element);
}
}
);
comboLocation.getCombo().setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
final ControlDecoration locationErrorDecoration=new ControlDecoration(comboLocation.getCombo(),SWT.LEFT);
locationErrorDecoration.setDescriptionText(Messages.ERROR_SNIPPET_LOCATION_CANNOT_BE_EMPTY + ""String_Node_Str"" + Messages.EDITOR_DESCRIPTION_LOCATION);
locationErrorDecoration.setImage(decorationImage);
locationErrorDecoration.setMarginWidth(1);
final ControlDecoration locationDescriptionDecoration=new ControlDecoration(comboLocation.getCombo(),SWT.LEFT);
FieldDecoration infoDecoration=FieldDecorationRegistry.getDefault().getFieldDecoration(DEC_INFORMATION);
locationDescriptionDecoration.setImage(infoDecoration.getImage());
locationDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_LOCATION);
locationDescriptionDecoration.setMarginWidth(1);
comboLocation.addSelectionChangedListener(new ISelectionChangedListener(){
@Override public void selectionChanged(SelectionChangedEvent event){
if (event.getSelection().isEmpty()) {
locationErrorDecoration.show();
locationDescriptionDecoration.hide();
}
 else {
locationErrorDecoration.hide();
locationDescriptionDecoration.show();
}
}
}
);
comboLocation.setSelection(new StructuredSelection(snippet.getLocation()));
Label lblExtraSearchTerms=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPETS_EXTRA_SEARCH_TERMS,SWT.NONE);
lblExtraSearchTerms.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerExtraSearchTerms=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstExtraSearchTerm=listViewerExtraSearchTerms.getList();
lstExtraSearchTerm.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).indent(horizontalIndent,0).create());
final ControlDecoration extraSearchTermsDescriptionDecoration=new ControlDecoration(listViewerExtraSearchTerms.getList(),SWT.TOP | SWT.LEFT);
extraSearchTermsDescriptionDecoration.setImage(infoDecoration.getImage());
extraSearchTermsDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_EXTRA_SEARCH_TERMS);
extraSearchTermsDescriptionDecoration.setMarginWidth(1);
btnContainerExtraSearchTerms=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerExtraSearchTerms.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerExtraSearchTerms);
btnContainerExtraSearchTerms.setLayout(new GridLayout(1,false));
btnAddExtraSearchTerm=managedForm.getToolkit().createButton(btnContainerExtraSearchTerms,Messages.EDITOR_BUTTON_ADD_EXTRASEARCH_TERM,SWT.NONE);
btnAddExtraSearchTerm.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
createExtraSearchTermInputDialog(btnContainerExtraSearchTerms.getShell()).open();
}
}
);
btnAddExtraSearchTerm.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveExtraSearchTerm=managedForm.getToolkit().createButton(btnContainerExtraSearchTerms,Messages.EDITOR_BUTTON_REMOVE_EXTRA_SEARCH_TERM,SWT.NONE);
btnRemoveExtraSearchTerm.setEnabled(false);
btnRemoveExtraSearchTerm.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerExtraSearchTerms);
if (o.isPresent()) {
ppExtraSearchTerms.remove(o.get());
}
}
}
);
btnRemoveExtraSearchTerm.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblTag=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPETS_TAG,SWT.NONE);
lblTag.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerTags=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstTags=listViewerTags.getList();
lstTags.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).indent(horizontalIndent,0).create());
final ControlDecoration tagsDescriptionDecoration=new ControlDecoration(listViewerTags.getList(),SWT.TOP | SWT.LEFT);
tagsDescriptionDecoration.setImage(infoDecoration.getImage());
tagsDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_TAGS);
tagsDescriptionDecoration.setMarginWidth(1);
btnContainerTags=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerTags.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerExtraSearchTerms);
btnContainerTags.setLayout(new GridLayout(1,false));
btnAddTag=managedForm.getToolkit().createButton(btnContainerTags,Messages.EDITOR_BUTTON_ADD_TAGS,SWT.NONE);
btnAddTag.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
createTagInputDialog(btnContainerTags.getShell()).open();
}
}
);
btnAddTag.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveTag=managedForm.getToolkit().createButton(btnContainerTags,Messages.EDITOR_BUTTON_REMOVE_TAGS,SWT.NONE);
btnRemoveTag.setEnabled(false);
btnRemoveTag.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerTags);
if (o.isPresent()) {
ppTags.remove(o.get());
}
}
}
);
btnRemoveTag.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblDependencies=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_DEPENENCIES,SWT.NONE);
lblDependencies.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerDependencies=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstDependencies=listViewerDependencies.getList();
lstDependencies.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).indent(horizontalIndent,0).create());
final ControlDecoration dependencyDescriptionDecoration=new ControlDecoration(listViewerDependencies.getList(),SWT.TOP | SWT.LEFT);
dependencyDescriptionDecoration.setImage(infoDecoration.getImage());
dependencyDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_DEPENDENCIES);
dependencyDescriptionDecoration.setMarginWidth(1);
btnContainerDependencies=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerDependencies.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerDependencies);
btnContainerDependencies.setLayout(new GridLayout(1,false));
btnAddDependency=managedForm.getToolkit().createButton(btnContainerDependencies,Messages.EDITOR_BUTTON_ADD_DEPENDENCY,SWT.NONE);
btnAddDependency.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Shell shell=btnContainerDependencies.getShell();
ProjectCoordinateSelectionDialog dialog=new ProjectCoordinateSelectionDialog(shell);
dialog.setInitialPattern(""String_Node_Str"");
dialog.open();
Object[] result=dialog.getResult();
if (result != null) {
for (Object object : result) {
  ppDependencies.add(object);
}
}
}
}
);
btnAddDependency.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveDependency=managedForm.getToolkit().createButton(btnContainerDependencies,Messages.EDITOR_BUTTON_REMOVE_TAGS,SWT.NONE);
btnRemoveDependency.setEnabled(false);
btnRemoveDependency.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerDependencies);
if (o.isPresent()) {
ppDependencies.remove(o.get());
}
}
}
);
btnRemoveDependency.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblUuid=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_UUID,SWT.NONE);
lblUuid.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
txtUuid=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getUuid().toString(),SWT.READ_ONLY);
txtUuid.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).indent(horizontalIndent,0).create());
}
@Override public void commit(boolean onSave){
if (onSave) {
super.commit(onSave);
}
}
@Override public void refresh(){
context.updateTargets();
super.refresh();
}
}
;
managedForm.addPart(contentsPart);
context=createDataBindingContext();
}",0.999195358488968
93183,"@Override protected ItemsFilter createFilter(){
  return new ItemsFilter(){
    public boolean matchItem(    Object item){
      return matches(item.toString());
    }
    @Override public String getPattern(){
      String pattern=super.getPattern();
      if (pattern.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      return pattern;
    }
    public boolean isConsistentItem(    Object item){
      return true;
    }
  }
;
}","@Override protected ItemsFilter createFilter(){
  return new ItemsFilter(){
    @Override public boolean matchItem(    Object item){
      return matches(item.toString());
    }
    @Override public String getPattern(){
      String pattern=super.getPattern();
      if (pattern.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      return pattern;
    }
    @Override public boolean isConsistentItem(    Object item){
      return true;
    }
  }
;
}",0.978448275862069
93184,"@Override protected Comparator getItemsComparator(){
  return new Comparator(){
    public int compare(    Object arg0,    Object arg1){
      return arg0.toString().compareTo(arg1.toString());
    }
  }
;
}","@Override protected Comparator getItemsComparator(){
  return new Comparator(){
    @Override public int compare(    Object arg0,    Object arg1){
      return arg0.toString().compareTo(arg1.toString());
    }
  }
;
}",0.9764150943396226
93185,"public boolean matchItem(Object item){
  return matches(item.toString());
}","@Override public boolean matchItem(Object item){
  return matches(item.toString());
}",0.9375
93186,"@Override public void initialize(IManagedForm managedForm){
  super.initialize(managedForm);
  Label lblName=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_NAME,SWT.NONE);
  lblName.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
  int horizontalIndent=decorationImage.getBounds().width + 2;
  txtName=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getName(),SWT.NONE);
  txtName.setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
  final ControlDecoration nameDecoration=new ControlDecoration(txtName,SWT.LEFT);
  nameDecoration.setDescriptionText(Messages.ERROR_SNIPPET_NAME_CANNOT_BE_EMPTY);
  nameDecoration.setImage(decorationImage);
  nameDecoration.setMarginWidth(1);
  txtName.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent arg0){
      if (isNullOrEmpty(txtName.getText())) {
        nameDecoration.show();
      }
 else {
        nameDecoration.hide();
      }
    }
  }
);
  Label lblDescription=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_DESCRIPTION,SWT.NONE);
  lblDescription.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  txtDescription=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getDescription(),SWT.NONE);
  txtDescription.setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
  Label lblLocation=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_LOCATION,SWT.NONE);
  lblLocation.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  comboLocation=new ComboViewer(managedForm.getForm().getBody(),SWT.DROP_DOWN | SWT.READ_ONLY);
  managedForm.getToolkit().adapt(comboLocation.getCombo(),true,true);
  comboLocation.setContentProvider(ArrayContentProvider.getInstance());
  comboLocation.setInput(SNIPMATCH_LOCATIONS);
  comboLocation.setLabelProvider(new LabelProvider(){
    @Override public String getText(    Object element){
      if (element instanceof Location) {
        Location location=(Location)element;
switch (location) {
case FILE:
          return Messages.SNIPMATCH_LOCATION_FILE;
case JAVA:
        return Messages.SNIPMATCH_LOCATION_JAVA;
case JAVA_STATEMENTS:
      return Messages.SNIPMATCH_LOCATION_JAVA_STATEMENTS;
case JAVA_TYPE_MEMBERS:
    return Messages.SNIPMATCH_LOCATION_JAVA_MEMBERS;
case JAVADOC:
  return Messages.SNIPMATCH_LOCATION_JAVADOC;
default :
break;
}
}
return super.getText(element);
}
}
);
comboLocation.getCombo().setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
final ControlDecoration locationErrorDecoration=new ControlDecoration(comboLocation.getCombo(),SWT.LEFT);
locationErrorDecoration.setDescriptionText(Messages.ERROR_SNIPPET_LOCATION_CANNOT_BE_EMPTY + ""String_Node_Str"" + Messages.EDITOR_DESCRIPTION_LOCATION);
locationErrorDecoration.setImage(decorationImage);
locationErrorDecoration.setMarginWidth(1);
final ControlDecoration locationDescriptionDecoration=new ControlDecoration(comboLocation.getCombo(),SWT.LEFT);
FieldDecoration infoDecoration=FieldDecorationRegistry.getDefault().getFieldDecoration(DEC_INFORMATION);
locationDescriptionDecoration.setImage(infoDecoration.getImage());
locationDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_LOCATION);
locationDescriptionDecoration.setMarginWidth(1);
comboLocation.addSelectionChangedListener(new ISelectionChangedListener(){
@Override public void selectionChanged(SelectionChangedEvent event){
if (event.getSelection().isEmpty()) {
locationErrorDecoration.show();
locationDescriptionDecoration.hide();
}
 else {
locationErrorDecoration.hide();
locationDescriptionDecoration.show();
}
}
}
);
comboLocation.setSelection(new StructuredSelection(snippet.getLocation()));
Label lblExtraSearchTerms=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPETS_EXTRA_SEARCH_TERMS,SWT.NONE);
lblExtraSearchTerms.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerExtraSearchTerms=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstExtraSearchTerm=listViewerExtraSearchTerms.getList();
lstExtraSearchTerm.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).indent(horizontalIndent,0).create());
final ControlDecoration extraSearchTermsDescriptionDecoration=new ControlDecoration(listViewerExtraSearchTerms.getList(),SWT.TOP | SWT.LEFT);
extraSearchTermsDescriptionDecoration.setImage(infoDecoration.getImage());
extraSearchTermsDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_EXTRA_SEARCH_TERMS);
extraSearchTermsDescriptionDecoration.setMarginWidth(1);
btnContainerExtraSearchTerms=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerExtraSearchTerms.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerExtraSearchTerms);
btnContainerExtraSearchTerms.setLayout(new GridLayout(1,false));
btnAddExtraSearchTerm=managedForm.getToolkit().createButton(btnContainerExtraSearchTerms,Messages.EDITOR_BUTTON_ADD_EXTRASEARCH_TERM,SWT.NONE);
btnAddExtraSearchTerm.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
createExtraSearchTermInputDialog(btnContainerExtraSearchTerms.getShell()).open();
}
}
);
btnAddExtraSearchTerm.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveExtraSearchTerm=managedForm.getToolkit().createButton(btnContainerExtraSearchTerms,Messages.EDITOR_BUTTON_REMOVE_EXTRA_SEARCH_TERM,SWT.NONE);
btnRemoveExtraSearchTerm.setEnabled(false);
btnRemoveExtraSearchTerm.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerExtraSearchTerms);
if (o.isPresent()) {
ppExtraSearchTerms.remove(o.get());
}
}
}
);
btnRemoveExtraSearchTerm.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblTag=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPETS_TAG,SWT.NONE);
lblTag.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerTags=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstTags=listViewerTags.getList();
lstTags.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).indent(horizontalIndent,0).create());
final ControlDecoration tagsDescriptionDecoration=new ControlDecoration(listViewerTags.getList(),SWT.TOP | SWT.LEFT);
tagsDescriptionDecoration.setImage(infoDecoration.getImage());
tagsDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_TAGS);
tagsDescriptionDecoration.setMarginWidth(1);
btnContainerTags=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerTags.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerExtraSearchTerms);
btnContainerTags.setLayout(new GridLayout(1,false));
btnAddTag=managedForm.getToolkit().createButton(btnContainerTags,Messages.EDITOR_BUTTON_ADD_TAGS,SWT.NONE);
btnAddTag.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
createTagInputDialog(btnContainerTags.getShell()).open();
}
}
);
btnAddTag.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveTag=managedForm.getToolkit().createButton(btnContainerTags,Messages.EDITOR_BUTTON_REMOVE_TAGS,SWT.NONE);
btnRemoveTag.setEnabled(false);
btnRemoveTag.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerTags);
if (o.isPresent()) {
ppTags.remove(o.get());
}
}
}
);
btnRemoveTag.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblDependencies=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_DEPENENCIES,SWT.NONE);
lblDependencies.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerDependencies=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstDependencies=listViewerDependencies.getList();
lstDependencies.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).indent(horizontalIndent,0).create());
final ControlDecoration dependencyDescriptionDecoration=new ControlDecoration(listViewerDependencies.getList(),SWT.TOP | SWT.LEFT);
dependencyDescriptionDecoration.setImage(infoDecoration.getImage());
dependencyDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_DEPENDENCIES);
dependencyDescriptionDecoration.setMarginWidth(1);
btnContainerDependencies=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerDependencies.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerDependencies);
btnContainerDependencies.setLayout(new GridLayout(1,false));
btnAddDependency=managedForm.getToolkit().createButton(btnContainerDependencies,Messages.EDITOR_BUTTON_ADD_DEPENDENCY,SWT.NONE);
btnAddDependency.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Shell shell=btnContainerDependencies.getShell();
ProjectCoordinateSelectionDialog dialog=new ProjectCoordinateSelectionDialog(shell);
dialog.setInitialPattern(""String_Node_Str"");
dialog.open();
Object[] result=dialog.getResult();
if (result != null) {
for (Object object : result) {
ppDependencies.add((ProjectCoordinate)object);
}
}
}
}
);
btnAddDependency.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveDependency=managedForm.getToolkit().createButton(btnContainerDependencies,Messages.EDITOR_BUTTON_REMOVE_TAGS,SWT.NONE);
btnRemoveDependency.setEnabled(false);
btnRemoveDependency.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerDependencies);
if (o.isPresent()) {
ppDependencies.remove(o.get());
}
}
}
);
btnRemoveDependency.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblUuid=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_UUID,SWT.NONE);
lblUuid.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
txtUuid=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getUuid().toString(),SWT.READ_ONLY);
txtUuid.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).indent(horizontalIndent,0).create());
}","@Override public void initialize(IManagedForm managedForm){
  super.initialize(managedForm);
  Label lblName=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_NAME,SWT.NONE);
  lblName.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
  int horizontalIndent=decorationImage.getBounds().width + 2;
  txtName=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getName(),SWT.NONE);
  txtName.setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
  final ControlDecoration nameDecoration=new ControlDecoration(txtName,SWT.LEFT);
  nameDecoration.setDescriptionText(Messages.ERROR_SNIPPET_NAME_CANNOT_BE_EMPTY);
  nameDecoration.setImage(decorationImage);
  nameDecoration.setMarginWidth(1);
  txtName.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent arg0){
      if (isNullOrEmpty(txtName.getText())) {
        nameDecoration.show();
      }
 else {
        nameDecoration.hide();
      }
    }
  }
);
  Label lblDescription=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_DESCRIPTION,SWT.NONE);
  lblDescription.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  txtDescription=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getDescription(),SWT.NONE);
  txtDescription.setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
  Label lblLocation=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_LOCATION,SWT.NONE);
  lblLocation.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  comboLocation=new ComboViewer(managedForm.getForm().getBody(),SWT.DROP_DOWN | SWT.READ_ONLY);
  managedForm.getToolkit().adapt(comboLocation.getCombo(),true,true);
  comboLocation.setContentProvider(ArrayContentProvider.getInstance());
  comboLocation.setInput(SNIPMATCH_LOCATIONS);
  comboLocation.setLabelProvider(new LabelProvider(){
    @Override public String getText(    Object element){
      if (element instanceof Location) {
        Location location=(Location)element;
switch (location) {
case FILE:
          return Messages.SNIPMATCH_LOCATION_FILE;
case JAVA:
        return Messages.SNIPMATCH_LOCATION_JAVA;
case JAVA_STATEMENTS:
      return Messages.SNIPMATCH_LOCATION_JAVA_STATEMENTS;
case JAVA_TYPE_MEMBERS:
    return Messages.SNIPMATCH_LOCATION_JAVA_MEMBERS;
case JAVADOC:
  return Messages.SNIPMATCH_LOCATION_JAVADOC;
default :
break;
}
}
return super.getText(element);
}
}
);
comboLocation.getCombo().setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
final ControlDecoration locationErrorDecoration=new ControlDecoration(comboLocation.getCombo(),SWT.LEFT);
locationErrorDecoration.setDescriptionText(Messages.ERROR_SNIPPET_LOCATION_CANNOT_BE_EMPTY + ""String_Node_Str"" + Messages.EDITOR_DESCRIPTION_LOCATION);
locationErrorDecoration.setImage(decorationImage);
locationErrorDecoration.setMarginWidth(1);
final ControlDecoration locationDescriptionDecoration=new ControlDecoration(comboLocation.getCombo(),SWT.LEFT);
FieldDecoration infoDecoration=FieldDecorationRegistry.getDefault().getFieldDecoration(DEC_INFORMATION);
locationDescriptionDecoration.setImage(infoDecoration.getImage());
locationDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_LOCATION);
locationDescriptionDecoration.setMarginWidth(1);
comboLocation.addSelectionChangedListener(new ISelectionChangedListener(){
@Override public void selectionChanged(SelectionChangedEvent event){
if (event.getSelection().isEmpty()) {
locationErrorDecoration.show();
locationDescriptionDecoration.hide();
}
 else {
locationErrorDecoration.hide();
locationDescriptionDecoration.show();
}
}
}
);
comboLocation.setSelection(new StructuredSelection(snippet.getLocation()));
Label lblExtraSearchTerms=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPETS_EXTRA_SEARCH_TERMS,SWT.NONE);
lblExtraSearchTerms.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerExtraSearchTerms=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstExtraSearchTerm=listViewerExtraSearchTerms.getList();
lstExtraSearchTerm.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).indent(horizontalIndent,0).create());
final ControlDecoration extraSearchTermsDescriptionDecoration=new ControlDecoration(listViewerExtraSearchTerms.getList(),SWT.TOP | SWT.LEFT);
extraSearchTermsDescriptionDecoration.setImage(infoDecoration.getImage());
extraSearchTermsDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_EXTRA_SEARCH_TERMS);
extraSearchTermsDescriptionDecoration.setMarginWidth(1);
btnContainerExtraSearchTerms=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerExtraSearchTerms.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerExtraSearchTerms);
btnContainerExtraSearchTerms.setLayout(new GridLayout(1,false));
btnAddExtraSearchTerm=managedForm.getToolkit().createButton(btnContainerExtraSearchTerms,Messages.EDITOR_BUTTON_ADD_EXTRASEARCH_TERM,SWT.NONE);
btnAddExtraSearchTerm.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
createExtraSearchTermInputDialog(btnContainerExtraSearchTerms.getShell()).open();
}
}
);
btnAddExtraSearchTerm.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveExtraSearchTerm=managedForm.getToolkit().createButton(btnContainerExtraSearchTerms,Messages.EDITOR_BUTTON_REMOVE_EXTRA_SEARCH_TERM,SWT.NONE);
btnRemoveExtraSearchTerm.setEnabled(false);
btnRemoveExtraSearchTerm.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerExtraSearchTerms);
if (o.isPresent()) {
ppExtraSearchTerms.remove(o.get());
}
}
}
);
btnRemoveExtraSearchTerm.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblTag=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPETS_TAG,SWT.NONE);
lblTag.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerTags=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstTags=listViewerTags.getList();
lstTags.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).indent(horizontalIndent,0).create());
final ControlDecoration tagsDescriptionDecoration=new ControlDecoration(listViewerTags.getList(),SWT.TOP | SWT.LEFT);
tagsDescriptionDecoration.setImage(infoDecoration.getImage());
tagsDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_TAGS);
tagsDescriptionDecoration.setMarginWidth(1);
btnContainerTags=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerTags.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerExtraSearchTerms);
btnContainerTags.setLayout(new GridLayout(1,false));
btnAddTag=managedForm.getToolkit().createButton(btnContainerTags,Messages.EDITOR_BUTTON_ADD_TAGS,SWT.NONE);
btnAddTag.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
createTagInputDialog(btnContainerTags.getShell()).open();
}
}
);
btnAddTag.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveTag=managedForm.getToolkit().createButton(btnContainerTags,Messages.EDITOR_BUTTON_REMOVE_TAGS,SWT.NONE);
btnRemoveTag.setEnabled(false);
btnRemoveTag.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerTags);
if (o.isPresent()) {
ppTags.remove(o.get());
}
}
}
);
btnRemoveTag.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblDependencies=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_DEPENENCIES,SWT.NONE);
lblDependencies.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerDependencies=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstDependencies=listViewerDependencies.getList();
lstDependencies.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).indent(horizontalIndent,0).create());
final ControlDecoration dependencyDescriptionDecoration=new ControlDecoration(listViewerDependencies.getList(),SWT.TOP | SWT.LEFT);
dependencyDescriptionDecoration.setImage(infoDecoration.getImage());
dependencyDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_DEPENDENCIES);
dependencyDescriptionDecoration.setMarginWidth(1);
btnContainerDependencies=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerDependencies.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerDependencies);
btnContainerDependencies.setLayout(new GridLayout(1,false));
btnAddDependency=managedForm.getToolkit().createButton(btnContainerDependencies,Messages.EDITOR_BUTTON_ADD_DEPENDENCY,SWT.NONE);
btnAddDependency.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Shell shell=btnContainerDependencies.getShell();
ProjectCoordinateSelectionDialog dialog=new ProjectCoordinateSelectionDialog(shell);
dialog.setInitialPattern(""String_Node_Str"");
dialog.open();
Object[] result=dialog.getResult();
if (result != null) {
for (Object object : result) {
ppDependencies.add(object);
}
}
}
}
);
btnAddDependency.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveDependency=managedForm.getToolkit().createButton(btnContainerDependencies,Messages.EDITOR_BUTTON_REMOVE_TAGS,SWT.NONE);
btnRemoveDependency.setEnabled(false);
btnRemoveDependency.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerDependencies);
if (o.isPresent()) {
ppDependencies.remove(o.get());
}
}
}
);
btnRemoveDependency.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblUuid=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_UUID,SWT.NONE);
lblUuid.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
txtUuid=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getUuid().toString(),SWT.READ_ONLY);
txtUuid.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).indent(horizontalIndent,0).create());
}",0.999133330292387
93187,"@Override public int compare(Integer o1,Integer o2){
  return -Double.compare(key[o1],key[o2]);
}","@Override public int compare(Integer o1,Integer o2){
  return Double.compare(key[o2],key[o1]);
}",0.9740932642487048
93188,"private int[] sortByKey(final double[] key,int[] array){
  int[] permutation=sort(indexArray(key.length),new Comparator<Integer>(){
    @Override public int compare(    Integer o1,    Integer o2){
      return -Double.compare(key[o1],key[o2]);
    }
  }
);
  return permute(array,permutation);
}","private int[] sortByKey(final double[] key,int[] array){
  int[] permutation=sort(indexArray(key.length),new Comparator<Integer>(){
    @Override public int compare(    Integer o1,    Integer o2){
      return Double.compare(key[o2],key[o1]);
    }
  }
);
  return permute(array,permutation);
}",0.9711375212224108
93189,"@Override public Number next(){
  index++;
  return array[index - 1];
}","@Override public Number next(){
  if (index >= array.length) {
    throw new NoSuchElementException();
  }
  return array[index++];
}",0.6372549019607843
93190,"@Override public Iterator<Number> iterator(){
  return new Iterator<Number>(){
    private int index=0;
    @Override public boolean hasNext(){
      return index < array.length;
    }
    @Override public Number next(){
      index++;
      return array[index - 1];
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}","@Override public Iterator<Number> iterator(){
  return new Iterator<Number>(){
    private int index=0;
    @Override public boolean hasNext(){
      return index < array.length;
    }
    @Override public Number next(){
      if (index >= array.length) {
        throw new NoSuchElementException();
      }
      return array[index++];
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}",0.8399014778325123
93191,"@Override public Number next(){
  index++;
  return array[index - 1];
}","@Override public Number next(){
  if (index >= array.length) {
    throw new NoSuchElementException();
  }
  return array[index++];
}",0.6372549019607843
93192,"@Override public Iterator<Number> iterator(){
  return new Iterator<Number>(){
    private int index=0;
    @Override public boolean hasNext(){
      return index < array.length;
    }
    @Override public Number next(){
      index++;
      return array[index - 1];
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}","@Override public Iterator<Number> iterator(){
  return new Iterator<Number>(){
    private int index=0;
    @Override public boolean hasNext(){
      return index < array.length;
    }
    @Override public Number next(){
      if (index >= array.length) {
        throw new NoSuchElementException();
      }
      return array[index++];
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}",0.8399014778325123
93193,"public static boolean matchesSuffixPattern(String path,String suffixPattern){
  int separators=countMatches(suffixPattern,""String_Node_Str"") + 1;
  int separatorIndex=path.length();
  while (separators > 0) {
    separatorIndex=path.lastIndexOf(""String_Node_Str"",separatorIndex - 1);
    separators--;
  }
  String substring=path.substring(separatorIndex + 1);
  return FilenameUtils.wildcardMatch(substring,suffixPattern);
}","public static boolean matchesSuffixPattern(String path,String suffixPattern){
  int separators=countMatches(suffixPattern,""String_Node_Str"") + 1;
  int separatorIndex=path.length();
  while (separators > 0) {
    separatorIndex=path.lastIndexOf('/',separatorIndex - 1);
    separators--;
  }
  String substring=path.substring(separatorIndex + 1);
  return FilenameUtils.wildcardMatch(substring,suffixPattern);
}",0.9760765550239234
93194,"@Override public int compare(final Viewer viewer,final Object o1,final Object o2){
  if (direction == SWT.NONE) {
    return 0;
  }
  Comparator<Object> comparator=comparators.get(tableColumn);
  if (comparator == null) {
    return 0;
  }
  int result=comparator.compare(o1,o2);
  return (direction == SWT.DOWN) ? -result : result;
}","@Override public int compare(final Viewer viewer,final Object o1,final Object o2){
  if (direction == SWT.NONE) {
    return 0;
  }
  Comparator<Object> comparator=comparators.get(tableColumn);
  if (comparator == null) {
    return 0;
  }
  return direction == SWT.DOWN ? comparator.compare(o2,o1) : comparator.compare(o1,o2);
}",0.8205128205128205
93195,"public int compare(Object arg0,Object arg1){
  return arg0.toString().compareTo(arg1.toString());
}","@Override public int compare(Object arg0,Object arg1){
  return arg0.toString().compareTo(arg1.toString());
}",0.9519230769230768
93196,"public boolean isConsistentItem(Object item){
  return true;
}","@Override public boolean isConsistentItem(Object item){
  return true;
}",0.9253731343283582
93197,"@Override protected void createFormContent(IManagedForm managedForm){
  FormToolkit toolkit=managedForm.getToolkit();
  ScrolledForm form=managedForm.getForm();
  form.setText(Messages.EDITOR_TITLE_METADATA);
  Composite body=form.getBody();
  toolkit.decorateFormHeading(form.getForm());
  toolkit.paintBordersFor(body);
  managedForm.getForm().getBody().setLayout(new GridLayout(3,false));
  contentsPart=new AbstractFormPart(){
    @Override public void initialize(    IManagedForm managedForm){
      super.initialize(managedForm);
      Label lblName=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_NAME,SWT.NONE);
      lblName.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
      int horizontalIndent=decorationImage.getBounds().width + 2;
      txtName=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getName(),SWT.NONE);
      txtName.setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
      final ControlDecoration nameDecoration=new ControlDecoration(txtName,SWT.LEFT);
      nameDecoration.setDescriptionText(Messages.ERROR_SNIPPET_NAME_CANNOT_BE_EMPTY);
      nameDecoration.setImage(decorationImage);
      nameDecoration.setMarginWidth(1);
      txtName.addModifyListener(new ModifyListener(){
        @Override public void modifyText(        ModifyEvent arg0){
          if (isNullOrEmpty(txtName.getText())) {
            nameDecoration.show();
          }
 else {
            nameDecoration.hide();
          }
        }
      }
);
      Label lblDescription=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_DESCRIPTION,SWT.NONE);
      lblDescription.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
      txtDescription=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getDescription(),SWT.NONE);
      txtDescription.setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
      Label lblLocation=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_LOCATION,SWT.NONE);
      lblLocation.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
      comboLocation=new ComboViewer(managedForm.getForm().getBody(),SWT.DROP_DOWN | SWT.READ_ONLY);
      managedForm.getToolkit().adapt(comboLocation.getCombo(),true,true);
      comboLocation.setContentProvider(ArrayContentProvider.getInstance());
      comboLocation.setInput(SNIPMATCH_LOCATIONS);
      comboLocation.setLabelProvider(new LabelProvider(){
        @Override public String getText(        Object element){
          if (element instanceof Location) {
            Location location=(Location)element;
switch (location) {
case FILE:
              return Messages.SNIPMATCH_LOCATION_FILE;
case JAVA:
            return Messages.SNIPMATCH_LOCATION_JAVA;
case JAVA_STATEMENTS:
          return Messages.SNIPMATCH_LOCATION_JAVA_STATEMENTS;
case JAVA_TYPE_MEMBERS:
        return Messages.SNIPMATCH_LOCATION_JAVA_MEMBERS;
case JAVADOC:
      return Messages.SNIPMATCH_LOCATION_JAVADOC;
default :
    break;
}
}
return super.getText(element);
}
}
);
comboLocation.getCombo().setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
final ControlDecoration locationErrorDecoration=new ControlDecoration(comboLocation.getCombo(),SWT.LEFT);
locationErrorDecoration.setDescriptionText(Messages.ERROR_SNIPPET_LOCATION_CANNOT_BE_EMPTY + ""String_Node_Str"" + Messages.EDITOR_DESCRIPTION_LOCATION);
locationErrorDecoration.setImage(decorationImage);
locationErrorDecoration.setMarginWidth(1);
final ControlDecoration locationDescriptionDecoration=new ControlDecoration(comboLocation.getCombo(),SWT.LEFT);
FieldDecoration infoDecoration=FieldDecorationRegistry.getDefault().getFieldDecoration(DEC_INFORMATION);
locationDescriptionDecoration.setImage(infoDecoration.getImage());
locationDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_LOCATION);
locationDescriptionDecoration.setMarginWidth(1);
comboLocation.addSelectionChangedListener(new ISelectionChangedListener(){
@Override public void selectionChanged(SelectionChangedEvent event){
if (event.getSelection().isEmpty()) {
locationErrorDecoration.show();
locationDescriptionDecoration.hide();
}
 else {
locationErrorDecoration.hide();
locationDescriptionDecoration.show();
}
}
}
);
comboLocation.setSelection(new StructuredSelection(snippet.getLocation()));
Label lblExtraSearchTerms=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPETS_EXTRA_SEARCH_TERMS,SWT.NONE);
lblExtraSearchTerms.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerExtraSearchTerms=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstExtraSearchTerm=listViewerExtraSearchTerms.getList();
lstExtraSearchTerm.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).indent(horizontalIndent,0).create());
final ControlDecoration extraSearchTermsDescriptionDecoration=new ControlDecoration(listViewerExtraSearchTerms.getList(),SWT.TOP | SWT.LEFT);
extraSearchTermsDescriptionDecoration.setImage(infoDecoration.getImage());
extraSearchTermsDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_EXTRA_SEARCH_TERMS);
extraSearchTermsDescriptionDecoration.setMarginWidth(1);
btnContainerExtraSearchTerms=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerExtraSearchTerms.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerExtraSearchTerms);
btnContainerExtraSearchTerms.setLayout(new GridLayout(1,false));
btnAddExtraSearchTerm=managedForm.getToolkit().createButton(btnContainerExtraSearchTerms,Messages.EDITOR_BUTTON_ADD_EXTRASEARCH_TERM,SWT.NONE);
btnAddExtraSearchTerm.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
createExtraSearchTermInputDialog(btnContainerExtraSearchTerms.getShell()).open();
}
}
);
btnAddExtraSearchTerm.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveExtraSearchTerm=managedForm.getToolkit().createButton(btnContainerExtraSearchTerms,Messages.EDITOR_BUTTON_REMOVE_EXTRA_SEARCH_TERM,SWT.NONE);
btnRemoveExtraSearchTerm.setEnabled(false);
btnRemoveExtraSearchTerm.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerExtraSearchTerms);
if (o.isPresent()) {
ppExtraSearchTerms.remove(o.get());
}
}
}
);
btnRemoveExtraSearchTerm.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblTag=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPETS_TAG,SWT.NONE);
lblTag.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerTags=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstTags=listViewerTags.getList();
lstTags.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).indent(horizontalIndent,0).create());
final ControlDecoration tagsDescriptionDecoration=new ControlDecoration(listViewerTags.getList(),SWT.TOP | SWT.LEFT);
tagsDescriptionDecoration.setImage(infoDecoration.getImage());
tagsDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_TAGS);
tagsDescriptionDecoration.setMarginWidth(1);
btnContainerTags=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerTags.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerExtraSearchTerms);
btnContainerTags.setLayout(new GridLayout(1,false));
btnAddTag=managedForm.getToolkit().createButton(btnContainerTags,Messages.EDITOR_BUTTON_ADD_TAGS,SWT.NONE);
btnAddTag.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
createTagInputDialog(btnContainerTags.getShell()).open();
}
}
);
btnAddTag.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveTag=managedForm.getToolkit().createButton(btnContainerTags,Messages.EDITOR_BUTTON_REMOVE_TAGS,SWT.NONE);
btnRemoveTag.setEnabled(false);
btnRemoveTag.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerTags);
if (o.isPresent()) {
ppTags.remove(o.get());
}
}
}
);
btnRemoveTag.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblDependencies=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_DEPENENCIES,SWT.NONE);
lblDependencies.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerDependencies=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstDependencies=listViewerDependencies.getList();
lstDependencies.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).indent(horizontalIndent,0).create());
final ControlDecoration dependencyDescriptionDecoration=new ControlDecoration(listViewerDependencies.getList(),SWT.TOP | SWT.LEFT);
dependencyDescriptionDecoration.setImage(infoDecoration.getImage());
dependencyDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_DEPENDENCIES);
dependencyDescriptionDecoration.setMarginWidth(1);
btnContainerDependencies=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerDependencies.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerDependencies);
btnContainerDependencies.setLayout(new GridLayout(1,false));
btnAddDependency=managedForm.getToolkit().createButton(btnContainerDependencies,Messages.EDITOR_BUTTON_ADD_DEPENDENCY,SWT.NONE);
btnAddDependency.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Shell shell=btnContainerDependencies.getShell();
ProjectCoordinateSelectionDialog dialog=new ProjectCoordinateSelectionDialog(shell);
dialog.setInitialPattern(""String_Node_Str"");
dialog.open();
Object[] result=dialog.getResult();
if (result != null) {
for (Object object : result) {
  ppDependencies.add((ProjectCoordinate)object);
}
}
}
}
);
btnAddDependency.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveDependency=managedForm.getToolkit().createButton(btnContainerDependencies,Messages.EDITOR_BUTTON_REMOVE_TAGS,SWT.NONE);
btnRemoveDependency.setEnabled(false);
btnRemoveDependency.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerDependencies);
if (o.isPresent()) {
ppDependencies.remove(o.get());
}
}
}
);
btnRemoveDependency.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblUuid=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_UUID,SWT.NONE);
lblUuid.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
txtUuid=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getUuid().toString(),SWT.READ_ONLY);
txtUuid.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).indent(horizontalIndent,0).create());
}
@Override public void commit(boolean onSave){
if (onSave) {
super.commit(onSave);
}
}
@Override public void refresh(){
context.updateTargets();
super.refresh();
}
}
;
managedForm.addPart(contentsPart);
context=createDataBindingContext();
}","@Override protected void createFormContent(IManagedForm managedForm){
  FormToolkit toolkit=managedForm.getToolkit();
  ScrolledForm form=managedForm.getForm();
  form.setText(Messages.EDITOR_TITLE_METADATA);
  Composite body=form.getBody();
  toolkit.decorateFormHeading(form.getForm());
  toolkit.paintBordersFor(body);
  managedForm.getForm().getBody().setLayout(new GridLayout(3,false));
  contentsPart=new AbstractFormPart(){
    @Override public void initialize(    IManagedForm managedForm){
      super.initialize(managedForm);
      Label lblName=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_NAME,SWT.NONE);
      lblName.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
      int horizontalIndent=decorationImage.getBounds().width + 2;
      txtName=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getName(),SWT.NONE);
      txtName.setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
      final ControlDecoration nameDecoration=new ControlDecoration(txtName,SWT.LEFT);
      nameDecoration.setDescriptionText(Messages.ERROR_SNIPPET_NAME_CANNOT_BE_EMPTY);
      nameDecoration.setImage(decorationImage);
      nameDecoration.setMarginWidth(1);
      txtName.addModifyListener(new ModifyListener(){
        @Override public void modifyText(        ModifyEvent arg0){
          if (isNullOrEmpty(txtName.getText())) {
            nameDecoration.show();
          }
 else {
            nameDecoration.hide();
          }
        }
      }
);
      Label lblDescription=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_DESCRIPTION,SWT.NONE);
      lblDescription.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
      txtDescription=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getDescription(),SWT.NONE);
      txtDescription.setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
      Label lblLocation=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_LOCATION,SWT.NONE);
      lblLocation.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
      comboLocation=new ComboViewer(managedForm.getForm().getBody(),SWT.DROP_DOWN | SWT.READ_ONLY);
      managedForm.getToolkit().adapt(comboLocation.getCombo(),true,true);
      comboLocation.setContentProvider(ArrayContentProvider.getInstance());
      comboLocation.setInput(SNIPMATCH_LOCATIONS);
      comboLocation.setLabelProvider(new LabelProvider(){
        @Override public String getText(        Object element){
          if (element instanceof Location) {
            Location location=(Location)element;
switch (location) {
case FILE:
              return Messages.SNIPMATCH_LOCATION_FILE;
case JAVA:
            return Messages.SNIPMATCH_LOCATION_JAVA;
case JAVA_STATEMENTS:
          return Messages.SNIPMATCH_LOCATION_JAVA_STATEMENTS;
case JAVA_TYPE_MEMBERS:
        return Messages.SNIPMATCH_LOCATION_JAVA_MEMBERS;
case JAVADOC:
      return Messages.SNIPMATCH_LOCATION_JAVADOC;
default :
    break;
}
}
return super.getText(element);
}
}
);
comboLocation.getCombo().setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
final ControlDecoration locationErrorDecoration=new ControlDecoration(comboLocation.getCombo(),SWT.LEFT);
locationErrorDecoration.setDescriptionText(Messages.ERROR_SNIPPET_LOCATION_CANNOT_BE_EMPTY + ""String_Node_Str"" + Messages.EDITOR_DESCRIPTION_LOCATION);
locationErrorDecoration.setImage(decorationImage);
locationErrorDecoration.setMarginWidth(1);
final ControlDecoration locationDescriptionDecoration=new ControlDecoration(comboLocation.getCombo(),SWT.LEFT);
FieldDecoration infoDecoration=FieldDecorationRegistry.getDefault().getFieldDecoration(DEC_INFORMATION);
locationDescriptionDecoration.setImage(infoDecoration.getImage());
locationDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_LOCATION);
locationDescriptionDecoration.setMarginWidth(1);
comboLocation.addSelectionChangedListener(new ISelectionChangedListener(){
@Override public void selectionChanged(SelectionChangedEvent event){
if (event.getSelection().isEmpty()) {
locationErrorDecoration.show();
locationDescriptionDecoration.hide();
}
 else {
locationErrorDecoration.hide();
locationDescriptionDecoration.show();
}
}
}
);
comboLocation.setSelection(new StructuredSelection(snippet.getLocation()));
Label lblExtraSearchTerms=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPETS_EXTRA_SEARCH_TERMS,SWT.NONE);
lblExtraSearchTerms.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerExtraSearchTerms=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstExtraSearchTerm=listViewerExtraSearchTerms.getList();
lstExtraSearchTerm.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).indent(horizontalIndent,0).create());
final ControlDecoration extraSearchTermsDescriptionDecoration=new ControlDecoration(listViewerExtraSearchTerms.getList(),SWT.TOP | SWT.LEFT);
extraSearchTermsDescriptionDecoration.setImage(infoDecoration.getImage());
extraSearchTermsDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_EXTRA_SEARCH_TERMS);
extraSearchTermsDescriptionDecoration.setMarginWidth(1);
btnContainerExtraSearchTerms=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerExtraSearchTerms.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerExtraSearchTerms);
btnContainerExtraSearchTerms.setLayout(new GridLayout(1,false));
btnAddExtraSearchTerm=managedForm.getToolkit().createButton(btnContainerExtraSearchTerms,Messages.EDITOR_BUTTON_ADD_EXTRASEARCH_TERM,SWT.NONE);
btnAddExtraSearchTerm.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
createExtraSearchTermInputDialog(btnContainerExtraSearchTerms.getShell()).open();
}
}
);
btnAddExtraSearchTerm.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveExtraSearchTerm=managedForm.getToolkit().createButton(btnContainerExtraSearchTerms,Messages.EDITOR_BUTTON_REMOVE_EXTRA_SEARCH_TERM,SWT.NONE);
btnRemoveExtraSearchTerm.setEnabled(false);
btnRemoveExtraSearchTerm.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerExtraSearchTerms);
if (o.isPresent()) {
ppExtraSearchTerms.remove(o.get());
}
}
}
);
btnRemoveExtraSearchTerm.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblTag=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPETS_TAG,SWT.NONE);
lblTag.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerTags=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstTags=listViewerTags.getList();
lstTags.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).indent(horizontalIndent,0).create());
final ControlDecoration tagsDescriptionDecoration=new ControlDecoration(listViewerTags.getList(),SWT.TOP | SWT.LEFT);
tagsDescriptionDecoration.setImage(infoDecoration.getImage());
tagsDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_TAGS);
tagsDescriptionDecoration.setMarginWidth(1);
btnContainerTags=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerTags.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerExtraSearchTerms);
btnContainerTags.setLayout(new GridLayout(1,false));
btnAddTag=managedForm.getToolkit().createButton(btnContainerTags,Messages.EDITOR_BUTTON_ADD_TAGS,SWT.NONE);
btnAddTag.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
createTagInputDialog(btnContainerTags.getShell()).open();
}
}
);
btnAddTag.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveTag=managedForm.getToolkit().createButton(btnContainerTags,Messages.EDITOR_BUTTON_REMOVE_TAGS,SWT.NONE);
btnRemoveTag.setEnabled(false);
btnRemoveTag.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerTags);
if (o.isPresent()) {
ppTags.remove(o.get());
}
}
}
);
btnRemoveTag.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblDependencies=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_DEPENENCIES,SWT.NONE);
lblDependencies.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerDependencies=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstDependencies=listViewerDependencies.getList();
lstDependencies.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).indent(horizontalIndent,0).create());
final ControlDecoration dependencyDescriptionDecoration=new ControlDecoration(listViewerDependencies.getList(),SWT.TOP | SWT.LEFT);
dependencyDescriptionDecoration.setImage(infoDecoration.getImage());
dependencyDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_DEPENDENCIES);
dependencyDescriptionDecoration.setMarginWidth(1);
btnContainerDependencies=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerDependencies.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerDependencies);
btnContainerDependencies.setLayout(new GridLayout(1,false));
btnAddDependency=managedForm.getToolkit().createButton(btnContainerDependencies,Messages.EDITOR_BUTTON_ADD_DEPENDENCY,SWT.NONE);
btnAddDependency.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Shell shell=btnContainerDependencies.getShell();
ProjectCoordinateSelectionDialog dialog=new ProjectCoordinateSelectionDialog(shell);
dialog.setInitialPattern(""String_Node_Str"");
dialog.open();
Object[] result=dialog.getResult();
if (result != null) {
for (Object object : result) {
  ppDependencies.add(object);
}
}
}
}
);
btnAddDependency.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveDependency=managedForm.getToolkit().createButton(btnContainerDependencies,Messages.EDITOR_BUTTON_REMOVE_TAGS,SWT.NONE);
btnRemoveDependency.setEnabled(false);
btnRemoveDependency.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerDependencies);
if (o.isPresent()) {
ppDependencies.remove(o.get());
}
}
}
);
btnRemoveDependency.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblUuid=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_UUID,SWT.NONE);
lblUuid.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
txtUuid=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getUuid().toString(),SWT.READ_ONLY);
txtUuid.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).indent(horizontalIndent,0).create());
}
@Override public void commit(boolean onSave){
if (onSave) {
super.commit(onSave);
}
}
@Override public void refresh(){
context.updateTargets();
super.refresh();
}
}
;
managedForm.addPart(contentsPart);
context=createDataBindingContext();
}",0.999195358488968
93198,"@Override protected ItemsFilter createFilter(){
  return new ItemsFilter(){
    public boolean matchItem(    Object item){
      return matches(item.toString());
    }
    @Override public String getPattern(){
      String pattern=super.getPattern();
      if (pattern.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      return pattern;
    }
    public boolean isConsistentItem(    Object item){
      return true;
    }
  }
;
}","@Override protected ItemsFilter createFilter(){
  return new ItemsFilter(){
    @Override public boolean matchItem(    Object item){
      return matches(item.toString());
    }
    @Override public String getPattern(){
      String pattern=super.getPattern();
      if (pattern.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      return pattern;
    }
    @Override public boolean isConsistentItem(    Object item){
      return true;
    }
  }
;
}",0.978448275862069
93199,"@Override protected Comparator getItemsComparator(){
  return new Comparator(){
    public int compare(    Object arg0,    Object arg1){
      return arg0.toString().compareTo(arg1.toString());
    }
  }
;
}","@Override protected Comparator getItemsComparator(){
  return new Comparator(){
    @Override public int compare(    Object arg0,    Object arg1){
      return arg0.toString().compareTo(arg1.toString());
    }
  }
;
}",0.9764150943396226
93200,"public boolean matchItem(Object item){
  return matches(item.toString());
}","@Override public boolean matchItem(Object item){
  return matches(item.toString());
}",0.9375
93201,"@Override public void initialize(IManagedForm managedForm){
  super.initialize(managedForm);
  Label lblName=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_NAME,SWT.NONE);
  lblName.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
  int horizontalIndent=decorationImage.getBounds().width + 2;
  txtName=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getName(),SWT.NONE);
  txtName.setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
  final ControlDecoration nameDecoration=new ControlDecoration(txtName,SWT.LEFT);
  nameDecoration.setDescriptionText(Messages.ERROR_SNIPPET_NAME_CANNOT_BE_EMPTY);
  nameDecoration.setImage(decorationImage);
  nameDecoration.setMarginWidth(1);
  txtName.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent arg0){
      if (isNullOrEmpty(txtName.getText())) {
        nameDecoration.show();
      }
 else {
        nameDecoration.hide();
      }
    }
  }
);
  Label lblDescription=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_DESCRIPTION,SWT.NONE);
  lblDescription.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  txtDescription=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getDescription(),SWT.NONE);
  txtDescription.setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
  Label lblLocation=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_LOCATION,SWT.NONE);
  lblLocation.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  comboLocation=new ComboViewer(managedForm.getForm().getBody(),SWT.DROP_DOWN | SWT.READ_ONLY);
  managedForm.getToolkit().adapt(comboLocation.getCombo(),true,true);
  comboLocation.setContentProvider(ArrayContentProvider.getInstance());
  comboLocation.setInput(SNIPMATCH_LOCATIONS);
  comboLocation.setLabelProvider(new LabelProvider(){
    @Override public String getText(    Object element){
      if (element instanceof Location) {
        Location location=(Location)element;
switch (location) {
case FILE:
          return Messages.SNIPMATCH_LOCATION_FILE;
case JAVA:
        return Messages.SNIPMATCH_LOCATION_JAVA;
case JAVA_STATEMENTS:
      return Messages.SNIPMATCH_LOCATION_JAVA_STATEMENTS;
case JAVA_TYPE_MEMBERS:
    return Messages.SNIPMATCH_LOCATION_JAVA_MEMBERS;
case JAVADOC:
  return Messages.SNIPMATCH_LOCATION_JAVADOC;
default :
break;
}
}
return super.getText(element);
}
}
);
comboLocation.getCombo().setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
final ControlDecoration locationErrorDecoration=new ControlDecoration(comboLocation.getCombo(),SWT.LEFT);
locationErrorDecoration.setDescriptionText(Messages.ERROR_SNIPPET_LOCATION_CANNOT_BE_EMPTY + ""String_Node_Str"" + Messages.EDITOR_DESCRIPTION_LOCATION);
locationErrorDecoration.setImage(decorationImage);
locationErrorDecoration.setMarginWidth(1);
final ControlDecoration locationDescriptionDecoration=new ControlDecoration(comboLocation.getCombo(),SWT.LEFT);
FieldDecoration infoDecoration=FieldDecorationRegistry.getDefault().getFieldDecoration(DEC_INFORMATION);
locationDescriptionDecoration.setImage(infoDecoration.getImage());
locationDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_LOCATION);
locationDescriptionDecoration.setMarginWidth(1);
comboLocation.addSelectionChangedListener(new ISelectionChangedListener(){
@Override public void selectionChanged(SelectionChangedEvent event){
if (event.getSelection().isEmpty()) {
locationErrorDecoration.show();
locationDescriptionDecoration.hide();
}
 else {
locationErrorDecoration.hide();
locationDescriptionDecoration.show();
}
}
}
);
comboLocation.setSelection(new StructuredSelection(snippet.getLocation()));
Label lblExtraSearchTerms=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPETS_EXTRA_SEARCH_TERMS,SWT.NONE);
lblExtraSearchTerms.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerExtraSearchTerms=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstExtraSearchTerm=listViewerExtraSearchTerms.getList();
lstExtraSearchTerm.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).indent(horizontalIndent,0).create());
final ControlDecoration extraSearchTermsDescriptionDecoration=new ControlDecoration(listViewerExtraSearchTerms.getList(),SWT.TOP | SWT.LEFT);
extraSearchTermsDescriptionDecoration.setImage(infoDecoration.getImage());
extraSearchTermsDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_EXTRA_SEARCH_TERMS);
extraSearchTermsDescriptionDecoration.setMarginWidth(1);
btnContainerExtraSearchTerms=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerExtraSearchTerms.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerExtraSearchTerms);
btnContainerExtraSearchTerms.setLayout(new GridLayout(1,false));
btnAddExtraSearchTerm=managedForm.getToolkit().createButton(btnContainerExtraSearchTerms,Messages.EDITOR_BUTTON_ADD_EXTRASEARCH_TERM,SWT.NONE);
btnAddExtraSearchTerm.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
createExtraSearchTermInputDialog(btnContainerExtraSearchTerms.getShell()).open();
}
}
);
btnAddExtraSearchTerm.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveExtraSearchTerm=managedForm.getToolkit().createButton(btnContainerExtraSearchTerms,Messages.EDITOR_BUTTON_REMOVE_EXTRA_SEARCH_TERM,SWT.NONE);
btnRemoveExtraSearchTerm.setEnabled(false);
btnRemoveExtraSearchTerm.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerExtraSearchTerms);
if (o.isPresent()) {
ppExtraSearchTerms.remove(o.get());
}
}
}
);
btnRemoveExtraSearchTerm.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblTag=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPETS_TAG,SWT.NONE);
lblTag.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerTags=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstTags=listViewerTags.getList();
lstTags.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).indent(horizontalIndent,0).create());
final ControlDecoration tagsDescriptionDecoration=new ControlDecoration(listViewerTags.getList(),SWT.TOP | SWT.LEFT);
tagsDescriptionDecoration.setImage(infoDecoration.getImage());
tagsDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_TAGS);
tagsDescriptionDecoration.setMarginWidth(1);
btnContainerTags=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerTags.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerExtraSearchTerms);
btnContainerTags.setLayout(new GridLayout(1,false));
btnAddTag=managedForm.getToolkit().createButton(btnContainerTags,Messages.EDITOR_BUTTON_ADD_TAGS,SWT.NONE);
btnAddTag.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
createTagInputDialog(btnContainerTags.getShell()).open();
}
}
);
btnAddTag.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveTag=managedForm.getToolkit().createButton(btnContainerTags,Messages.EDITOR_BUTTON_REMOVE_TAGS,SWT.NONE);
btnRemoveTag.setEnabled(false);
btnRemoveTag.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerTags);
if (o.isPresent()) {
ppTags.remove(o.get());
}
}
}
);
btnRemoveTag.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblDependencies=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_DEPENENCIES,SWT.NONE);
lblDependencies.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerDependencies=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstDependencies=listViewerDependencies.getList();
lstDependencies.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).indent(horizontalIndent,0).create());
final ControlDecoration dependencyDescriptionDecoration=new ControlDecoration(listViewerDependencies.getList(),SWT.TOP | SWT.LEFT);
dependencyDescriptionDecoration.setImage(infoDecoration.getImage());
dependencyDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_DEPENDENCIES);
dependencyDescriptionDecoration.setMarginWidth(1);
btnContainerDependencies=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerDependencies.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerDependencies);
btnContainerDependencies.setLayout(new GridLayout(1,false));
btnAddDependency=managedForm.getToolkit().createButton(btnContainerDependencies,Messages.EDITOR_BUTTON_ADD_DEPENDENCY,SWT.NONE);
btnAddDependency.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Shell shell=btnContainerDependencies.getShell();
ProjectCoordinateSelectionDialog dialog=new ProjectCoordinateSelectionDialog(shell);
dialog.setInitialPattern(""String_Node_Str"");
dialog.open();
Object[] result=dialog.getResult();
if (result != null) {
for (Object object : result) {
ppDependencies.add((ProjectCoordinate)object);
}
}
}
}
);
btnAddDependency.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveDependency=managedForm.getToolkit().createButton(btnContainerDependencies,Messages.EDITOR_BUTTON_REMOVE_TAGS,SWT.NONE);
btnRemoveDependency.setEnabled(false);
btnRemoveDependency.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerDependencies);
if (o.isPresent()) {
ppDependencies.remove(o.get());
}
}
}
);
btnRemoveDependency.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblUuid=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_UUID,SWT.NONE);
lblUuid.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
txtUuid=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getUuid().toString(),SWT.READ_ONLY);
txtUuid.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).indent(horizontalIndent,0).create());
}","@Override public void initialize(IManagedForm managedForm){
  super.initialize(managedForm);
  Label lblName=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_NAME,SWT.NONE);
  lblName.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
  int horizontalIndent=decorationImage.getBounds().width + 2;
  txtName=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getName(),SWT.NONE);
  txtName.setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
  final ControlDecoration nameDecoration=new ControlDecoration(txtName,SWT.LEFT);
  nameDecoration.setDescriptionText(Messages.ERROR_SNIPPET_NAME_CANNOT_BE_EMPTY);
  nameDecoration.setImage(decorationImage);
  nameDecoration.setMarginWidth(1);
  txtName.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent arg0){
      if (isNullOrEmpty(txtName.getText())) {
        nameDecoration.show();
      }
 else {
        nameDecoration.hide();
      }
    }
  }
);
  Label lblDescription=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_DESCRIPTION,SWT.NONE);
  lblDescription.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  txtDescription=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getDescription(),SWT.NONE);
  txtDescription.setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
  Label lblLocation=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_LOCATION,SWT.NONE);
  lblLocation.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  comboLocation=new ComboViewer(managedForm.getForm().getBody(),SWT.DROP_DOWN | SWT.READ_ONLY);
  managedForm.getToolkit().adapt(comboLocation.getCombo(),true,true);
  comboLocation.setContentProvider(ArrayContentProvider.getInstance());
  comboLocation.setInput(SNIPMATCH_LOCATIONS);
  comboLocation.setLabelProvider(new LabelProvider(){
    @Override public String getText(    Object element){
      if (element instanceof Location) {
        Location location=(Location)element;
switch (location) {
case FILE:
          return Messages.SNIPMATCH_LOCATION_FILE;
case JAVA:
        return Messages.SNIPMATCH_LOCATION_JAVA;
case JAVA_STATEMENTS:
      return Messages.SNIPMATCH_LOCATION_JAVA_STATEMENTS;
case JAVA_TYPE_MEMBERS:
    return Messages.SNIPMATCH_LOCATION_JAVA_MEMBERS;
case JAVADOC:
  return Messages.SNIPMATCH_LOCATION_JAVADOC;
default :
break;
}
}
return super.getText(element);
}
}
);
comboLocation.getCombo().setLayoutData(GridDataFactory.swtDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(2,1).indent(horizontalIndent,0).create());
final ControlDecoration locationErrorDecoration=new ControlDecoration(comboLocation.getCombo(),SWT.LEFT);
locationErrorDecoration.setDescriptionText(Messages.ERROR_SNIPPET_LOCATION_CANNOT_BE_EMPTY + ""String_Node_Str"" + Messages.EDITOR_DESCRIPTION_LOCATION);
locationErrorDecoration.setImage(decorationImage);
locationErrorDecoration.setMarginWidth(1);
final ControlDecoration locationDescriptionDecoration=new ControlDecoration(comboLocation.getCombo(),SWT.LEFT);
FieldDecoration infoDecoration=FieldDecorationRegistry.getDefault().getFieldDecoration(DEC_INFORMATION);
locationDescriptionDecoration.setImage(infoDecoration.getImage());
locationDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_LOCATION);
locationDescriptionDecoration.setMarginWidth(1);
comboLocation.addSelectionChangedListener(new ISelectionChangedListener(){
@Override public void selectionChanged(SelectionChangedEvent event){
if (event.getSelection().isEmpty()) {
locationErrorDecoration.show();
locationDescriptionDecoration.hide();
}
 else {
locationErrorDecoration.hide();
locationDescriptionDecoration.show();
}
}
}
);
comboLocation.setSelection(new StructuredSelection(snippet.getLocation()));
Label lblExtraSearchTerms=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPETS_EXTRA_SEARCH_TERMS,SWT.NONE);
lblExtraSearchTerms.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerExtraSearchTerms=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstExtraSearchTerm=listViewerExtraSearchTerms.getList();
lstExtraSearchTerm.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).indent(horizontalIndent,0).create());
final ControlDecoration extraSearchTermsDescriptionDecoration=new ControlDecoration(listViewerExtraSearchTerms.getList(),SWT.TOP | SWT.LEFT);
extraSearchTermsDescriptionDecoration.setImage(infoDecoration.getImage());
extraSearchTermsDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_EXTRA_SEARCH_TERMS);
extraSearchTermsDescriptionDecoration.setMarginWidth(1);
btnContainerExtraSearchTerms=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerExtraSearchTerms.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerExtraSearchTerms);
btnContainerExtraSearchTerms.setLayout(new GridLayout(1,false));
btnAddExtraSearchTerm=managedForm.getToolkit().createButton(btnContainerExtraSearchTerms,Messages.EDITOR_BUTTON_ADD_EXTRASEARCH_TERM,SWT.NONE);
btnAddExtraSearchTerm.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
createExtraSearchTermInputDialog(btnContainerExtraSearchTerms.getShell()).open();
}
}
);
btnAddExtraSearchTerm.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveExtraSearchTerm=managedForm.getToolkit().createButton(btnContainerExtraSearchTerms,Messages.EDITOR_BUTTON_REMOVE_EXTRA_SEARCH_TERM,SWT.NONE);
btnRemoveExtraSearchTerm.setEnabled(false);
btnRemoveExtraSearchTerm.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerExtraSearchTerms);
if (o.isPresent()) {
ppExtraSearchTerms.remove(o.get());
}
}
}
);
btnRemoveExtraSearchTerm.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblTag=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPETS_TAG,SWT.NONE);
lblTag.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerTags=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstTags=listViewerTags.getList();
lstTags.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).indent(horizontalIndent,0).create());
final ControlDecoration tagsDescriptionDecoration=new ControlDecoration(listViewerTags.getList(),SWT.TOP | SWT.LEFT);
tagsDescriptionDecoration.setImage(infoDecoration.getImage());
tagsDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_TAGS);
tagsDescriptionDecoration.setMarginWidth(1);
btnContainerTags=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerTags.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerExtraSearchTerms);
btnContainerTags.setLayout(new GridLayout(1,false));
btnAddTag=managedForm.getToolkit().createButton(btnContainerTags,Messages.EDITOR_BUTTON_ADD_TAGS,SWT.NONE);
btnAddTag.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
createTagInputDialog(btnContainerTags.getShell()).open();
}
}
);
btnAddTag.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveTag=managedForm.getToolkit().createButton(btnContainerTags,Messages.EDITOR_BUTTON_REMOVE_TAGS,SWT.NONE);
btnRemoveTag.setEnabled(false);
btnRemoveTag.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerTags);
if (o.isPresent()) {
ppTags.remove(o.get());
}
}
}
);
btnRemoveTag.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblDependencies=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_DEPENENCIES,SWT.NONE);
lblDependencies.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
listViewerDependencies=new ListViewer(managedForm.getForm().getBody(),SWT.BORDER | SWT.V_SCROLL);
List lstDependencies=listViewerDependencies.getList();
lstDependencies.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).indent(horizontalIndent,0).create());
final ControlDecoration dependencyDescriptionDecoration=new ControlDecoration(listViewerDependencies.getList(),SWT.TOP | SWT.LEFT);
dependencyDescriptionDecoration.setImage(infoDecoration.getImage());
dependencyDescriptionDecoration.setDescriptionText(Messages.EDITOR_DESCRIPTION_DEPENDENCIES);
dependencyDescriptionDecoration.setMarginWidth(1);
btnContainerDependencies=managedForm.getToolkit().createComposite(managedForm.getForm().getBody(),SWT.NONE);
btnContainerDependencies.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,false,1,1));
managedForm.getToolkit().paintBordersFor(btnContainerDependencies);
btnContainerDependencies.setLayout(new GridLayout(1,false));
btnAddDependency=managedForm.getToolkit().createButton(btnContainerDependencies,Messages.EDITOR_BUTTON_ADD_DEPENDENCY,SWT.NONE);
btnAddDependency.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Shell shell=btnContainerDependencies.getShell();
ProjectCoordinateSelectionDialog dialog=new ProjectCoordinateSelectionDialog(shell);
dialog.setInitialPattern(""String_Node_Str"");
dialog.open();
Object[] result=dialog.getResult();
if (result != null) {
for (Object object : result) {
ppDependencies.add(object);
}
}
}
}
);
btnAddDependency.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
btnRemoveDependency=managedForm.getToolkit().createButton(btnContainerDependencies,Messages.EDITOR_BUTTON_REMOVE_TAGS,SWT.NONE);
btnRemoveDependency.setEnabled(false);
btnRemoveDependency.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
Optional<String> o=Selections.getFirstSelected(listViewerDependencies);
if (o.isPresent()) {
ppDependencies.remove(o.get());
}
}
}
);
btnRemoveDependency.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
Label lblUuid=managedForm.getToolkit().createLabel(managedForm.getForm().getBody(),Messages.EDITOR_LABEL_SNIPPET_UUID,SWT.NONE);
lblUuid.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false,1,1));
txtUuid=managedForm.getToolkit().createText(managedForm.getForm().getBody(),snippet.getUuid().toString(),SWT.READ_ONLY);
txtUuid.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).indent(horizontalIndent,0).create());
}",0.999133330292387
93202,"public ProposalCollectingCompletionRequestor(final JavaContentAssistInvocationContext ctx,boolean ignoreConstructors,boolean ignoreTypes){
  super(false);
  checkNotNull(ctx);
  jdtuiContext=ctx;
  initalizeCollector(ignoreConstructors,ignoreTypes);
}","public ProposalCollectingCompletionRequestor(final JavaContentAssistInvocationContext ctx){
  super(false);
  checkNotNull(ctx);
  jdtuiContext=ctx;
  initalizeCollector();
}",0.8188235294117647
93203,"private void initalizeCollector(boolean ignoreConstructors,boolean ignoreTypes){
  if (shouldFillArgumentNames()) {
    collector=new FillArgumentNamesCompletionProposalCollector(jdtuiContext);
  }
 else {
    collector=new CompletionProposalCollector(jdtuiContext.getCompilationUnit(),false);
  }
  configureInterestedProposalTypes(ignoreConstructors,ignoreTypes);
  adjustProposalReplacementLength();
}","private void initalizeCollector(){
  if (shouldFillArgumentNames()) {
    collector=new FillArgumentNamesCompletionProposalCollector(jdtuiContext);
  }
 else {
    collector=new CompletionProposalCollector(jdtuiContext.getCompilationUnit(),false);
  }
  configureInterestedProposalTypes();
  adjustProposalReplacementLength();
}",0.1174863387978142
93204,"/** 
 * Configures the delegate collector by calling a series of setters. Important: For this to work, this   {@code CompletionRequestor} must then delegate all corresponding getters to{@code collector}.
 */
private void configureInterestedProposalTypes(boolean ignoreConstructors,boolean ignoreTypes){
  collector.setIgnored(ANNOTATION_ATTRIBUTE_REF,false);
  collector.setIgnored(ANONYMOUS_CLASS_DECLARATION,ignoreTypes);
  collector.setIgnored(ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION,ignoreConstructors);
  collector.setIgnored(FIELD_REF,false);
  collector.setIgnored(FIELD_REF_WITH_CASTED_RECEIVER,false);
  collector.setIgnored(KEYWORD,false);
  collector.setIgnored(LABEL_REF,false);
  collector.setIgnored(LOCAL_VARIABLE_REF,false);
  collector.setIgnored(METHOD_DECLARATION,false);
  collector.setIgnored(METHOD_NAME_REFERENCE,false);
  collector.setIgnored(METHOD_REF,false);
  collector.setIgnored(CONSTRUCTOR_INVOCATION,ignoreConstructors);
  collector.setIgnored(METHOD_REF_WITH_CASTED_RECEIVER,false);
  collector.setIgnored(PACKAGE_REF,false);
  collector.setIgnored(POTENTIAL_METHOD_DECLARATION,false);
  collector.setIgnored(VARIABLE_DECLARATION,false);
  collector.setIgnored(TYPE_REF,ignoreTypes);
  collector.setIgnored(JAVADOC_BLOCK_TAG,false);
  collector.setIgnored(JAVADOC_FIELD_REF,false);
  collector.setIgnored(JAVADOC_INLINE_TAG,false);
  collector.setIgnored(JAVADOC_METHOD_REF,false);
  collector.setIgnored(JAVADOC_PARAM_REF,false);
  collector.setIgnored(JAVADOC_TYPE_REF,false);
  collector.setIgnored(JAVADOC_VALUE_REF,false);
  collector.setAllowsRequiredProposals(FIELD_REF,TYPE_REF,true);
  collector.setAllowsRequiredProposals(FIELD_REF,TYPE_IMPORT,true);
  collector.setAllowsRequiredProposals(FIELD_REF,FIELD_IMPORT,true);
  collector.setAllowsRequiredProposals(METHOD_REF,TYPE_REF,true);
  collector.setAllowsRequiredProposals(METHOD_REF,TYPE_IMPORT,true);
  collector.setAllowsRequiredProposals(METHOD_REF,METHOD_IMPORT,true);
  collector.setAllowsRequiredProposals(CONSTRUCTOR_INVOCATION,TYPE_REF,true);
  collector.setAllowsRequiredProposals(ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION,TYPE_REF,true);
  collector.setAllowsRequiredProposals(ANONYMOUS_CLASS_DECLARATION,TYPE_REF,true);
  collector.setAllowsRequiredProposals(TYPE_REF,TYPE_REF,true);
  collector.setFavoriteReferences(getFavoriteStaticMembers());
  collector.setRequireExtendedContext(true);
}","/** 
 * Configures the delegate collector by calling a series of setters. Important: For this to work, this   {@code CompletionRequestor} must then delegate all corresponding getters to{@code collector}.
 */
private void configureInterestedProposalTypes(){
  collector.setIgnored(ANNOTATION_ATTRIBUTE_REF,false);
  collector.setIgnored(ANONYMOUS_CLASS_DECLARATION,false);
  collector.setIgnored(ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION,false);
  collector.setIgnored(FIELD_REF,false);
  collector.setIgnored(FIELD_REF_WITH_CASTED_RECEIVER,false);
  collector.setIgnored(KEYWORD,false);
  collector.setIgnored(LABEL_REF,false);
  collector.setIgnored(LOCAL_VARIABLE_REF,false);
  collector.setIgnored(METHOD_DECLARATION,false);
  collector.setIgnored(METHOD_NAME_REFERENCE,false);
  collector.setIgnored(METHOD_REF,false);
  collector.setIgnored(CONSTRUCTOR_INVOCATION,false);
  collector.setIgnored(METHOD_REF_WITH_CASTED_RECEIVER,false);
  collector.setIgnored(PACKAGE_REF,false);
  collector.setIgnored(POTENTIAL_METHOD_DECLARATION,false);
  collector.setIgnored(VARIABLE_DECLARATION,false);
  collector.setIgnored(TYPE_REF,false);
  collector.setIgnored(JAVADOC_BLOCK_TAG,false);
  collector.setIgnored(JAVADOC_FIELD_REF,false);
  collector.setIgnored(JAVADOC_INLINE_TAG,false);
  collector.setIgnored(JAVADOC_METHOD_REF,false);
  collector.setIgnored(JAVADOC_PARAM_REF,false);
  collector.setIgnored(JAVADOC_TYPE_REF,false);
  collector.setIgnored(JAVADOC_VALUE_REF,false);
  collector.setAllowsRequiredProposals(FIELD_REF,TYPE_REF,true);
  collector.setAllowsRequiredProposals(FIELD_REF,TYPE_IMPORT,true);
  collector.setAllowsRequiredProposals(FIELD_REF,FIELD_IMPORT,true);
  collector.setAllowsRequiredProposals(METHOD_REF,TYPE_REF,true);
  collector.setAllowsRequiredProposals(METHOD_REF,TYPE_IMPORT,true);
  collector.setAllowsRequiredProposals(METHOD_REF,METHOD_IMPORT,true);
  collector.setAllowsRequiredProposals(CONSTRUCTOR_INVOCATION,TYPE_REF,true);
  collector.setAllowsRequiredProposals(ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION,TYPE_REF,true);
  collector.setAllowsRequiredProposals(ANONYMOUS_CLASS_DECLARATION,TYPE_REF,true);
  collector.setAllowsRequiredProposals(TYPE_REF,TYPE_REF,true);
  collector.setFavoriteReferences(getFavoriteStaticMembers());
  collector.setRequireExtendedContext(true);
}",0.973661852166525
93205,"@Override public void init(IWorkbench workbench){
  setPreferenceStore(new ScopedPreferenceStore(InstanceScope.INSTANCE,Constants.BUNDLE_ID));
  setMessage(Messages.PREFPAGE_TITLE_SUBWORDS);
  setDescription(Messages.PREFPAGE_DESCRIPTION_SUBWORDS);
}","@Override public void init(IWorkbench workbench){
  setPreferenceStore(new ScopedPreferenceStore(InstanceScope.INSTANCE,Constants.BUNDLE_ID));
  setMessage(Messages.PREFPAGE_TITLE_SUBWORDS);
  setDescription(Messages.PREFPAGE_DESCRIPTION_SUBWORDS_PREFIX_LENGTH);
}",0.9727626459143968
93206,"@Override protected void createFieldEditors(){
  addField(new BooleanFieldEditor(Constants.PREF_COMPREHENSIVE_SUBWORDS_MATCHING_CONSTRUCTORS,Messages.FIELD_LABEL_COMPREHENSIVE_SUBWORDS_MATCHING_CONSTRUCTORS,getFieldEditorParent()));
  addField(new BooleanFieldEditor(Constants.PREF_COMPREHENSIVE_SUBWORDS_MATCHING_TYPES,Messages.FIELD_LABEL_COMPREHENSIVE_SUBWORDS_MATCHING_TYPES,getFieldEditorParent()));
}","@Override protected void createFieldEditors(){
  IntegerFieldEditor prefixLengthEditor=new IntegerFieldEditor(Constants.PREF_MIN_PREFIX_LENGTH_FOR_TYPES,Messages.PREFPAGE_LABEL_PREFIX_LENGTH,getFieldEditorParent());
  prefixLengthEditor.setValidRange(1,99);
  Text control=prefixLengthEditor.getTextControl(getFieldEditorParent());
  ControlDecoration dec=new ControlDecoration(control,SWT.TOP | SWT.LEFT,getFieldEditorParent());
  FieldDecoration infoDecoration=FieldDecorationRegistry.getDefault().getFieldDecoration(DEC_INFORMATION);
  dec.setImage(infoDecoration.getImage());
  dec.setDescriptionText(Messages.PREFPAGE_TOOLTIP_PREFIX_LENGTH);
  addField(prefixLengthEditor);
}",0.2173112338858195
93207,"@Override public void initializeDefaultPreferences(){
  IEclipsePreferences s=DefaultScope.INSTANCE.getNode(BUNDLE_ID);
  s.putBoolean(PREF_COMPREHENSIVE_SUBWORDS_MATCHING_CONSTRUCTORS,true);
  s.putBoolean(PREF_COMPREHENSIVE_SUBWORDS_MATCHING_TYPES,true);
}","@Override public void initializeDefaultPreferences(){
  IEclipsePreferences s=DefaultScope.INSTANCE.getNode(BUNDLE_ID);
  s.putInt(PREF_MIN_PREFIX_LENGTH_FOR_TYPES,2);
}",0.7447306791569087
93208,"private TreeSet<Integer> computeTriggerLocations(int offset,ASTNode completionNode,ASTNode completionNodeParent,int length){
  TreeSet<Integer> triggerlocations=Sets.newTreeSet();
  int emptyPrefix=offset - length;
  triggerlocations.add(emptyPrefix);
  if (length == 0) {
    triggerlocations.add(emptyPrefix);
    return triggerlocations;
  }
  triggerlocations.add(emptyPrefix);
  triggerlocations.add(emptyPrefix + 1);
  return triggerlocations;
}","private TreeSet<Integer> computeTriggerLocations(int offset,ASTNode completionNode,ASTNode completionNodeParent,int length){
  TreeSet<Integer> triggerlocations=Sets.newTreeSet();
  int emptyPrefix=offset - length;
  triggerlocations.add(emptyPrefix);
  int triggerOffset=Math.min(prefs.minPrefixLengthForTypes,length);
  triggerlocations.add(emptyPrefix + triggerOffset);
  return triggerlocations;
}",0.7676056338028169
93209,"private ProposalCollectingCompletionRequestor computeProposals(ICompilationUnit cu,JavaContentAssistInvocationContext coreContext,int offset){
  ProposalCollectingCompletionRequestor collector=new ProposalCollectingCompletionRequestor(coreContext,!prefs.computeAdditionalConstructorProposals,!prefs.computeAdditionalTypeProposals);
  try {
    cu.codeComplete(offset,collector,new TimeDelimitedProgressMonitor(5000));
  }
 catch (  final Exception e) {
    log(EXCEPTION_DURING_CODE_COMPLETION,e);
  }
  return collector;
}","private ProposalCollectingCompletionRequestor computeProposals(ICompilationUnit cu,JavaContentAssistInvocationContext coreContext,int offset){
  ProposalCollectingCompletionRequestor collector=new ProposalCollectingCompletionRequestor(coreContext);
  try {
    cu.codeComplete(offset,collector,new TimeDelimitedProgressMonitor(5000));
  }
 catch (  final Exception e) {
    log(EXCEPTION_DURING_CODE_COMPLETION,e);
  }
  return collector;
}",0.9138110072689511
93210,"public ProposalCollectingCompletionRequestor(final JavaContentAssistInvocationContext ctx,boolean ignoreConstructors,boolean ignoreTypes){
  super(false);
  checkNotNull(ctx);
  jdtuiContext=ctx;
  initalizeCollector(ignoreConstructors,ignoreTypes);
}","public ProposalCollectingCompletionRequestor(final JavaContentAssistInvocationContext ctx){
  super(false);
  checkNotNull(ctx);
  jdtuiContext=ctx;
  initalizeCollector();
}",0.8188235294117647
93211,"private void initalizeCollector(boolean ignoreConstructors,boolean ignoreTypes){
  if (shouldFillArgumentNames()) {
    collector=new FillArgumentNamesCompletionProposalCollector(jdtuiContext);
  }
 else {
    collector=new CompletionProposalCollector(jdtuiContext.getCompilationUnit(),false);
  }
  configureInterestedProposalTypes(ignoreConstructors,ignoreTypes);
  adjustProposalReplacementLength();
}","private void initalizeCollector(){
  if (shouldFillArgumentNames()) {
    collector=new FillArgumentNamesCompletionProposalCollector(jdtuiContext);
  }
 else {
    collector=new CompletionProposalCollector(jdtuiContext.getCompilationUnit(),false);
  }
  configureInterestedProposalTypes();
  adjustProposalReplacementLength();
}",0.1174863387978142
93212,"/** 
 * Configures the delegate collector by calling a series of setters. Important: For this to work, this   {@code CompletionRequestor} must then delegate all corresponding getters to{@code collector}.
 */
private void configureInterestedProposalTypes(boolean ignoreConstructors,boolean ignoreTypes){
  collector.setIgnored(ANNOTATION_ATTRIBUTE_REF,false);
  collector.setIgnored(ANONYMOUS_CLASS_DECLARATION,ignoreTypes);
  collector.setIgnored(ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION,ignoreConstructors);
  collector.setIgnored(FIELD_REF,false);
  collector.setIgnored(FIELD_REF_WITH_CASTED_RECEIVER,false);
  collector.setIgnored(KEYWORD,false);
  collector.setIgnored(LABEL_REF,false);
  collector.setIgnored(LOCAL_VARIABLE_REF,false);
  collector.setIgnored(METHOD_DECLARATION,false);
  collector.setIgnored(METHOD_NAME_REFERENCE,false);
  collector.setIgnored(METHOD_REF,false);
  collector.setIgnored(CONSTRUCTOR_INVOCATION,ignoreConstructors);
  collector.setIgnored(METHOD_REF_WITH_CASTED_RECEIVER,false);
  collector.setIgnored(PACKAGE_REF,false);
  collector.setIgnored(POTENTIAL_METHOD_DECLARATION,false);
  collector.setIgnored(VARIABLE_DECLARATION,false);
  collector.setIgnored(TYPE_REF,ignoreTypes);
  collector.setIgnored(JAVADOC_BLOCK_TAG,false);
  collector.setIgnored(JAVADOC_FIELD_REF,false);
  collector.setIgnored(JAVADOC_INLINE_TAG,false);
  collector.setIgnored(JAVADOC_METHOD_REF,false);
  collector.setIgnored(JAVADOC_PARAM_REF,false);
  collector.setIgnored(JAVADOC_TYPE_REF,false);
  collector.setIgnored(JAVADOC_VALUE_REF,false);
  collector.setAllowsRequiredProposals(FIELD_REF,TYPE_REF,true);
  collector.setAllowsRequiredProposals(FIELD_REF,TYPE_IMPORT,true);
  collector.setAllowsRequiredProposals(FIELD_REF,FIELD_IMPORT,true);
  collector.setAllowsRequiredProposals(METHOD_REF,TYPE_REF,true);
  collector.setAllowsRequiredProposals(METHOD_REF,TYPE_IMPORT,true);
  collector.setAllowsRequiredProposals(METHOD_REF,METHOD_IMPORT,true);
  collector.setAllowsRequiredProposals(CONSTRUCTOR_INVOCATION,TYPE_REF,true);
  collector.setAllowsRequiredProposals(ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION,TYPE_REF,true);
  collector.setAllowsRequiredProposals(ANONYMOUS_CLASS_DECLARATION,TYPE_REF,true);
  collector.setAllowsRequiredProposals(TYPE_REF,TYPE_REF,true);
  collector.setFavoriteReferences(getFavoriteStaticMembers());
  collector.setRequireExtendedContext(true);
}","/** 
 * Configures the delegate collector by calling a series of setters. Important: For this to work, this   {@code CompletionRequestor} must then delegate all corresponding getters to{@code collector}.
 */
private void configureInterestedProposalTypes(){
  collector.setIgnored(ANNOTATION_ATTRIBUTE_REF,false);
  collector.setIgnored(ANONYMOUS_CLASS_DECLARATION,false);
  collector.setIgnored(ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION,false);
  collector.setIgnored(FIELD_REF,false);
  collector.setIgnored(FIELD_REF_WITH_CASTED_RECEIVER,false);
  collector.setIgnored(KEYWORD,false);
  collector.setIgnored(LABEL_REF,false);
  collector.setIgnored(LOCAL_VARIABLE_REF,false);
  collector.setIgnored(METHOD_DECLARATION,false);
  collector.setIgnored(METHOD_NAME_REFERENCE,false);
  collector.setIgnored(METHOD_REF,false);
  collector.setIgnored(CONSTRUCTOR_INVOCATION,false);
  collector.setIgnored(METHOD_REF_WITH_CASTED_RECEIVER,false);
  collector.setIgnored(PACKAGE_REF,false);
  collector.setIgnored(POTENTIAL_METHOD_DECLARATION,false);
  collector.setIgnored(VARIABLE_DECLARATION,false);
  collector.setIgnored(TYPE_REF,false);
  collector.setIgnored(JAVADOC_BLOCK_TAG,false);
  collector.setIgnored(JAVADOC_FIELD_REF,false);
  collector.setIgnored(JAVADOC_INLINE_TAG,false);
  collector.setIgnored(JAVADOC_METHOD_REF,false);
  collector.setIgnored(JAVADOC_PARAM_REF,false);
  collector.setIgnored(JAVADOC_TYPE_REF,false);
  collector.setIgnored(JAVADOC_VALUE_REF,false);
  collector.setAllowsRequiredProposals(FIELD_REF,TYPE_REF,true);
  collector.setAllowsRequiredProposals(FIELD_REF,TYPE_IMPORT,true);
  collector.setAllowsRequiredProposals(FIELD_REF,FIELD_IMPORT,true);
  collector.setAllowsRequiredProposals(METHOD_REF,TYPE_REF,true);
  collector.setAllowsRequiredProposals(METHOD_REF,TYPE_IMPORT,true);
  collector.setAllowsRequiredProposals(METHOD_REF,METHOD_IMPORT,true);
  collector.setAllowsRequiredProposals(CONSTRUCTOR_INVOCATION,TYPE_REF,true);
  collector.setAllowsRequiredProposals(ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION,TYPE_REF,true);
  collector.setAllowsRequiredProposals(ANONYMOUS_CLASS_DECLARATION,TYPE_REF,true);
  collector.setAllowsRequiredProposals(TYPE_REF,TYPE_REF,true);
  collector.setFavoriteReferences(getFavoriteStaticMembers());
  collector.setRequireExtendedContext(true);
}",0.973661852166525
93213,"@Override public void init(IWorkbench workbench){
  setPreferenceStore(new ScopedPreferenceStore(InstanceScope.INSTANCE,Constants.BUNDLE_ID));
  setMessage(Messages.PREFPAGE_TITLE_SUBWORDS);
  setDescription(Messages.PREFPAGE_DESCRIPTION_SUBWORDS);
}","@Override public void init(IWorkbench workbench){
  setPreferenceStore(new ScopedPreferenceStore(InstanceScope.INSTANCE,Constants.BUNDLE_ID));
  setMessage(Messages.PREFPAGE_TITLE_SUBWORDS);
  setDescription(Messages.PREFPAGE_DESCRIPTION_SUBWORDS_PREFIX_LENGTH);
}",0.9727626459143968
93214,"@Override protected void createFieldEditors(){
  addField(new BooleanFieldEditor(Constants.PREF_COMPREHENSIVE_SUBWORDS_MATCHING_CONSTRUCTORS,Messages.FIELD_LABEL_COMPREHENSIVE_SUBWORDS_MATCHING_CONSTRUCTORS,getFieldEditorParent()));
  addField(new BooleanFieldEditor(Constants.PREF_COMPREHENSIVE_SUBWORDS_MATCHING_TYPES,Messages.FIELD_LABEL_COMPREHENSIVE_SUBWORDS_MATCHING_TYPES,getFieldEditorParent()));
}","@Override protected void createFieldEditors(){
  IntegerFieldEditor prefixLengthEditor=new IntegerFieldEditor(Constants.PREF_MIN_PREFIX_LENGTH_FOR_TYPES,Messages.PREFPAGE_LABEL_PREFIX_LENGTH,getFieldEditorParent());
  prefixLengthEditor.setValidRange(1,99);
  Text control=prefixLengthEditor.getTextControl(getFieldEditorParent());
  ControlDecoration dec=new ControlDecoration(control,SWT.TOP | SWT.LEFT,getFieldEditorParent());
  FieldDecoration infoDecoration=FieldDecorationRegistry.getDefault().getFieldDecoration(DEC_INFORMATION);
  dec.setImage(infoDecoration.getImage());
  dec.setDescriptionText(Messages.PREFPAGE_TOOLTIP_PREFIX_LENGTH);
  addField(prefixLengthEditor);
}",0.2173112338858195
93215,"@Override public void initializeDefaultPreferences(){
  IEclipsePreferences s=DefaultScope.INSTANCE.getNode(BUNDLE_ID);
  s.putBoolean(PREF_COMPREHENSIVE_SUBWORDS_MATCHING_CONSTRUCTORS,true);
  s.putBoolean(PREF_COMPREHENSIVE_SUBWORDS_MATCHING_TYPES,true);
}","@Override public void initializeDefaultPreferences(){
  IEclipsePreferences s=DefaultScope.INSTANCE.getNode(BUNDLE_ID);
  s.putInt(PREF_MIN_PREFIX_LENGTH_FOR_TYPES,2);
}",0.7447306791569087
93216,"private TreeSet<Integer> computeTriggerLocations(int offset,ASTNode completionNode,ASTNode completionNodeParent,int length){
  TreeSet<Integer> triggerlocations=Sets.newTreeSet();
  int emptyPrefix=offset - length;
  triggerlocations.add(emptyPrefix);
  if (length == 0) {
    triggerlocations.add(emptyPrefix);
    return triggerlocations;
  }
  triggerlocations.add(emptyPrefix);
  triggerlocations.add(emptyPrefix + 1);
  return triggerlocations;
}","private TreeSet<Integer> computeTriggerLocations(int offset,ASTNode completionNode,ASTNode completionNodeParent,int length){
  TreeSet<Integer> triggerlocations=Sets.newTreeSet();
  int emptyPrefix=offset - length;
  triggerlocations.add(emptyPrefix);
  int triggerOffset=Math.min(prefs.minPrefixLengthForTypes,length);
  triggerlocations.add(emptyPrefix + triggerOffset);
  return triggerlocations;
}",0.7676056338028169
93217,"private ProposalCollectingCompletionRequestor computeProposals(ICompilationUnit cu,JavaContentAssistInvocationContext coreContext,int offset){
  ProposalCollectingCompletionRequestor collector=new ProposalCollectingCompletionRequestor(coreContext,!prefs.computeAdditionalConstructorProposals,!prefs.computeAdditionalTypeProposals);
  try {
    cu.codeComplete(offset,collector,new TimeDelimitedProgressMonitor(5000));
  }
 catch (  final Exception e) {
    log(EXCEPTION_DURING_CODE_COMPLETION,e);
  }
  return collector;
}","private ProposalCollectingCompletionRequestor computeProposals(ICompilationUnit cu,JavaContentAssistInvocationContext coreContext,int offset){
  ProposalCollectingCompletionRequestor collector=new ProposalCollectingCompletionRequestor(coreContext);
  try {
    cu.codeComplete(offset,collector,new TimeDelimitedProgressMonitor(5000));
  }
 catch (  final Exception e) {
    log(EXCEPTION_DURING_CODE_COMPLETION,e);
  }
  return collector;
}",0.9138110072689511
93218,"@Override public String isValid(String newText){
  if (newText.isEmpty()) {
    return Messages.PREFPAGE_ERROR_INVALID_BRANCH_PREFIX_FORMAT;
  }
  try {
    new URI(newText);
    return null;
  }
 catch (  URISyntaxException e) {
    return e.getMessage();
  }
}","@Override public String isValid(String newText){
  if (newText.isEmpty()) {
    return Messages.PREFPAGE_ERROR_INVALID_REPO_URL;
  }
  try {
    new URI(newText);
    return null;
  }
 catch (  URISyntaxException e) {
    return e.getMessage();
  }
}",0.953125
93219,"private IType findReceiver(IRecommendersCompletionContext context) throws Exception {
  IType receiverType=context.getReceiverType().orNull();
  String receiverName=context.getReceiverName();
  if (isExplicitThis(receiverName) || isImplicitThis(receiverType,receiverName)) {
    final IMethod m=context.getEnclosingMethod().orNull();
    if (m == null || JdtFlags.isStatic(m)) {
      return receiverType;
    }
    final IType type=m.getDeclaringType();
    final ITypeHierarchy hierarchy=SuperTypeHierarchyCache.getTypeHierarchy(type);
    receiverType=hierarchy.getSuperclass(type);
  }
  return receiverType;
}","private IType findReceiver(IRecommendersCompletionContext context) throws Exception {
  IType receiverType=context.getReceiverType().orNull();
  String receiverName=context.getReceiverName();
  if (isExplicitThis(receiverName) || isImplicitThis(receiverType,receiverName)) {
    final IMethod m=context.getEnclosingMethod().orNull();
    if (m == null || JdtFlags.isStatic(m)) {
      return receiverType;
    }
    final IType type=m.getDeclaringType();
    final ITypeHierarchy hierarchy=SuperTypeHierarchyCache.getTypeHierarchy(type);
    receiverType=hierarchy.getSuperclass(type);
    if (receiverType == null) {
      String superclassTypeSignature=type.getSuperclassTypeSignature();
      if (superclassTypeSignature != null) {
        receiverType=JdtUtils.findTypeFromSignature(superclassTypeSignature,type).orNull();
      }
    }
  }
  return receiverType;
}",0.7997302764666218
93220,"public ProposalMatcher(CompletionProposal proposal,Optional<TypeBinding> receiverTypeBinding){
  final String jSignature=getSignature(proposal);
  final String[] parameterTypes=Signature.getParameterTypes(jSignature);
  final String[] methodTypeParameters=Signature.getTypeParameters(jSignature);
  jName=String.valueOf(proposal.getName());
  jParams=new ITypeName[parameterTypes.length];
  final String[] classTypeParameters=extractClassTypeParameters(receiverTypeBinding);
  for (int i=0; i < jParams.length; i++) {
    jParams[i]=asTypeName(parameterTypes[i],methodTypeParameters,classTypeParameters);
  }
}","public ProposalMatcher(CompletionProposal proposal,Optional<TypeBinding> receiverTypeBinding){
  proposedMethod=MatchingUtils.asMethodName(proposal,receiverTypeBinding);
}",0.3585147247119078
93221,"public boolean match(IMethodName rMethod){
  String rName=rMethod.getName();
  ITypeName[] rParams=rMethod.getParameterTypes();
  if (!rName.equals(jName)) {
    return false;
  }
  if (rParams.length != jParams.length) {
    return false;
  }
  for (int i=rParams.length; i-- > 0; ) {
    if (!rParams[i].equals(jParams[i])) {
      return false;
    }
  }
  return true;
}","public boolean match(IMethodName rMethod){
  String rName=rMethod.getName();
  ITypeName[] rParams=rMethod.getParameterTypes();
  if (!rName.equals(proposedMethod.getName())) {
    return false;
  }
  ITypeName[] parameterTypes=proposedMethod.getParameterTypes();
  if (rParams.length != parameterTypes.length) {
    return false;
  }
  for (int i=rParams.length; i-- > 0; ) {
    if (!rParams[i].equals(parameterTypes[i])) {
      return false;
    }
  }
  return true;
}",0.8439716312056738
93222,"@Parameters public static Collection<Object[]> scenarios(){
  LinkedList<Object[]> scenarios=Lists.newLinkedList();
  scenarios.add(mismatch(classbody(""String_Node_Str""),METHOD_VOID));
  scenarios.add(mismatch(classbody(""String_Node_Str""),METHOD_VOID));
  scenarios.add(mismatch(classbody(""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_VOID));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_INTS));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECTS));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_NUMBER));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_NUMBER));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_OBJECTS));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_OBJECTS));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_NUMBER));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_NUMBER));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECTS));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECTS));
  return scenarios;
}","@Parameters public static Collection<Object[]> scenarios(){
  LinkedList<Object[]> scenarios=Lists.newLinkedList();
  scenarios.add(mismatch(classbody(""String_Node_Str""),METHOD_VOID));
  scenarios.add(mismatch(classbody(""String_Node_Str""),METHOD_VOID));
  scenarios.add(mismatch(classbody(""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_VOID));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_INTS));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECTS));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_NUMBER));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_NUMBER));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),SET_INT_STRING));
  String secondClassDefinition=""String_Node_Str"";
  IMethodName secondClassFoo=VmMethodName.get(""String_Node_Str"");
  scenarios.add(match(classbody(classname(),""String_Node_Str"") + secondClassDefinition,secondClassFoo));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_OBJECTS));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_OBJECTS));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_NUMBER));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_NUMBER));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECTS));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECTS));
  return scenarios;
}",0.9285079928952042
93223,"public ProposalMatcher(CompletionProposal proposal,Optional<TypeBinding> receiverTypeBinding){
  final String jSignature=getSignature(proposal);
  final String[] parameterTypes=Signature.getParameterTypes(jSignature);
  final String[] methodTypeParameters=Signature.getTypeParameters(jSignature);
  jName=String.valueOf(proposal.getName());
  jParams=new ITypeName[parameterTypes.length];
  final String[] classTypeParameters=extractClassTypeParameters(receiverTypeBinding);
  for (int i=0; i < jParams.length; i++) {
    jParams[i]=asTypeName(parameterTypes[i],methodTypeParameters,classTypeParameters);
  }
}","public ProposalMatcher(CompletionProposal proposal,Optional<TypeBinding> receiverTypeBinding){
  proposedMethod=MatchingUtils.asMethodName(proposal,receiverTypeBinding);
}",0.3585147247119078
93224,"public boolean match(IMethodName rMethod){
  String rName=rMethod.getName();
  ITypeName[] rParams=rMethod.getParameterTypes();
  if (!rName.equals(jName)) {
    return false;
  }
  if (rParams.length != jParams.length) {
    return false;
  }
  for (int i=rParams.length; i-- > 0; ) {
    if (!rParams[i].equals(jParams[i])) {
      return false;
    }
  }
  return true;
}","public boolean match(IMethodName rMethod){
  String rName=rMethod.getName();
  ITypeName[] rParams=rMethod.getParameterTypes();
  if (!rName.equals(proposedMethod.getName())) {
    return false;
  }
  ITypeName[] parameterTypes=proposedMethod.getParameterTypes();
  if (rParams.length != parameterTypes.length) {
    return false;
  }
  for (int i=rParams.length; i-- > 0; ) {
    if (!rParams[i].equals(parameterTypes[i])) {
      return false;
    }
  }
  return true;
}",0.8439716312056738
93225,"@Parameters public static Collection<Object[]> scenarios(){
  LinkedList<Object[]> scenarios=Lists.newLinkedList();
  scenarios.add(mismatch(classbody(""String_Node_Str""),METHOD_VOID));
  scenarios.add(mismatch(classbody(""String_Node_Str""),METHOD_VOID));
  scenarios.add(mismatch(classbody(""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_VOID));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_INTS));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECTS));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_NUMBER));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_NUMBER));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_OBJECTS));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_OBJECTS));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_NUMBER));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_NUMBER));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECTS));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECTS));
  return scenarios;
}","@Parameters public static Collection<Object[]> scenarios(){
  LinkedList<Object[]> scenarios=Lists.newLinkedList();
  scenarios.add(mismatch(classbody(""String_Node_Str""),METHOD_VOID));
  scenarios.add(mismatch(classbody(""String_Node_Str""),METHOD_VOID));
  scenarios.add(mismatch(classbody(""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_VOID));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_INTS));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECTS));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_NUMBER));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_NUMBER));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),SET_INT_STRING));
  String secondClassDefinition=""String_Node_Str"";
  IMethodName secondClassFoo=VmMethodName.get(""String_Node_Str"");
  scenarios.add(match(classbody(classname(),""String_Node_Str"") + secondClassDefinition,secondClassFoo));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_OBJECTS));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_OBJECTS));
  scenarios.add(match(classbody(classname() + ""String_Node_Str"",""String_Node_Str""),METHOD_COLLECTION));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECT));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_NUMBER));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_NUMBER));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECTS));
  scenarios.add(match(classbody(""String_Node_Str""),METHOD_OBJECTS));
  return scenarios;
}",0.9285079928952042
93226,"private TemplateContextType createContextType(){
  JavaContextType contextType=new JavaContextType();
  contextType.setId(CONTEXT_ID);
  contextType.initializeContextTypeResolvers();
  ImportsResolver importResolver=new ImportsResolver();
  importResolver.setType(""String_Node_Str"");
  contextType.addResolver(importResolver);
  VarResolver varResolver=new VarResolver();
  varResolver.setType(""String_Node_Str"");
  contextType.addResolver(varResolver);
  TypeResolver typeResolver=new TypeResolver();
  typeResolver.setType(""String_Node_Str"");
  contextType.addResolver(typeResolver);
  LinkResolver linkResolver=new LinkResolver();
  linkResolver.setType(""String_Node_Str"");
  contextType.addResolver(linkResolver);
  NameResolver nameResolver=new NameResolver();
  nameResolver.setType(""String_Node_Str"");
  contextType.addResolver(nameResolver);
  ElementTypeResolver elementTypeResolver=new ElementTypeResolver();
  elementTypeResolver.setType(""String_Node_Str"");
  contextType.addResolver(elementTypeResolver);
  return contextType;
}","private TemplateContextType createContextType(){
  JavaContextType contextType=new JavaContextType();
  contextType.setId(CONTEXT_ID);
  contextType.initializeContextTypeResolvers();
  ImportsResolver importResolver=new ImportsResolver();
  importResolver.setType(""String_Node_Str"");
  contextType.addResolver(importResolver);
  StaticImportResolver staticImportResolver=new StaticImportResolver();
  staticImportResolver.setType(""String_Node_Str"");
  contextType.addResolver(staticImportResolver);
  VarResolver varResolver=new VarResolver();
  varResolver.setType(""String_Node_Str"");
  contextType.addResolver(varResolver);
  LocalVarResolver localVarResolver=new LocalVarResolver();
  localVarResolver.setType(""String_Node_Str"");
  contextType.addResolver(localVarResolver);
  FieldResolver fieldResolver=new FieldResolver();
  fieldResolver.setType(""String_Node_Str"");
  contextType.addResolver(fieldResolver);
  TypeResolver typeResolver=new TypeResolver();
  typeResolver.setType(""String_Node_Str"");
  contextType.addResolver(typeResolver);
  LinkResolver linkResolver=new LinkResolver();
  linkResolver.setType(""String_Node_Str"");
  contextType.addResolver(linkResolver);
  NameResolver nameResolver=new NameResolver();
  nameResolver.setType(""String_Node_Str"");
  contextType.addResolver(nameResolver);
  ElementTypeResolver elementTypeResolver=new ElementTypeResolver();
  elementTypeResolver.setType(""String_Node_Str"");
  contextType.addResolver(elementTypeResolver);
  TypeVariableResolver typeVariableResolver=new TypeVariableResolver();
  typeVariableResolver.setType(""String_Node_Str"");
  contextType.addResolver(typeVariableResolver);
  ExceptionVariableNameResolver exceptionVariableNameResolver=new ExceptionVariableNameResolver();
  exceptionVariableNameResolver.setType(""String_Node_Str"");
  contextType.addResolver(exceptionVariableNameResolver);
  return contextType;
}",0.6832764505119454
93227,"public ITypeName toRecType(IType jdtType){
  ensureIsNotNull(jdtType);
  jdtType=JdtUtils.resolveJavaElementProxy(jdtType);
  ITypeName recType=(ITypeName)cache.inverse().get(jdtType);
  if (recType == null) {
    String fullyQualifiedName=jdtType.getFullyQualifiedName();
    fullyQualifiedName=StringUtils.substringBefore(fullyQualifiedName,""String_Node_Str"");
    recType=VmTypeName.get('L' + fullyQualifiedName.replace('.','/'));
    registerRecJdtElementPair(recType,jdtType);
  }
  return recType;
}","public ITypeName toRecType(IType jdtType){
  ensureIsNotNull(jdtType);
  jdtType=JdtUtils.resolveJavaElementProxy(jdtType);
  ITypeName recType=(ITypeName)cache.inverse().get(jdtType);
  if (recType == null) {
    String fullyQualifiedName=jdtType.getFullyQualifiedName();
    recType=VmTypeName.get('L' + fullyQualifiedName.replace('.','/'));
    registerRecJdtElementPair(recType,jdtType);
  }
  return recType;
}",0.7195652173913043
93228,"/** 
 * @see #get(String)
 */
@VisibleForTesting protected VmTypeName(final String vmTypeName){
  ensureIsNotNull(vmTypeName);
  ensureIsFalse(vmTypeName.length() == 0,""String_Node_Str"");
  if (vmTypeName.length() == 1) {
switch (vmTypeName.charAt(0)) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'V':
case 'Z':
      break;
default :
    throwUnreachable(""String_Node_Str"" + vmTypeName);
}
}
 else {
switch (vmTypeName.charAt(0)) {
case '[':
case 'L':
  break;
default :
throwUnreachable(""String_Node_Str"" + vmTypeName);
}
}
int off=0;
while (off < vmTypeName.length()) {
final char c=vmTypeName.charAt(off);
if (c == '[' || c == '/' || c == '-' || c == '<' || c == '>' || Character.isJavaIdentifierPart(c)) {
off++;
continue;
}
throwIllegalArgumentException(""String_Node_Str"",vmTypeName);
break;
}
identifier=vmTypeName;
}","/** 
 * @see #get(String)
 */
@VisibleForTesting protected VmTypeName(final String vmTypeName){
  ensureIsNotNull(vmTypeName);
  ensureIsFalse(vmTypeName.length() == 0,""String_Node_Str"");
  if (vmTypeName.length() == 1) {
switch (vmTypeName.charAt(0)) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'V':
case 'Z':
      break;
default :
    throwUnreachable(""String_Node_Str"" + vmTypeName);
}
}
 else {
switch (vmTypeName.charAt(0)) {
case '[':
case 'L':
  break;
default :
throwUnreachable(""String_Node_Str"" + vmTypeName);
}
}
int off=0;
while (off < vmTypeName.length()) {
final char c=vmTypeName.charAt(off);
if (c == '-' || c == '[' || c == '/' || c == '<' || c == '>' || Character.isJavaIdentifierPart(c)) {
off++;
continue;
}
throwIllegalArgumentException(""String_Node_Str"",vmTypeName);
break;
}
identifier=vmTypeName;
}",0.985981308411215
93229,"private static String removeGenerics(final String typeName){
  return StringUtils.substringBefore(typeName,""String_Node_Str"");
}","private static String removeGenerics(String typeName){
  int oldLength;
  do {
    oldLength=typeName.length();
    Matcher matcher=GENERICS_PATTERN.matcher(typeName);
    typeName=matcher.replaceAll(""String_Node_Str"");
  }
 while (typeName.length() < oldLength);
  return typeName;
}",0.3252427184466019
93230,"public ITypeName toRecType(IType jdtType){
  ensureIsNotNull(jdtType);
  jdtType=JdtUtils.resolveJavaElementProxy(jdtType);
  ITypeName recType=(ITypeName)cache.inverse().get(jdtType);
  if (recType == null) {
    String fullyQualifiedName=jdtType.getFullyQualifiedName();
    fullyQualifiedName=StringUtils.substringBefore(fullyQualifiedName,""String_Node_Str"");
    recType=VmTypeName.get('L' + fullyQualifiedName.replace('.','/'));
    registerRecJdtElementPair(recType,jdtType);
  }
  return recType;
}","public ITypeName toRecType(IType jdtType){
  ensureIsNotNull(jdtType);
  jdtType=JdtUtils.resolveJavaElementProxy(jdtType);
  ITypeName recType=(ITypeName)cache.inverse().get(jdtType);
  if (recType == null) {
    String fullyQualifiedName=jdtType.getFullyQualifiedName();
    recType=VmTypeName.get('L' + fullyQualifiedName.replace('.','/'));
    registerRecJdtElementPair(recType,jdtType);
  }
  return recType;
}",0.7195652173913043
93231,"/** 
 * @see #get(String)
 */
@VisibleForTesting protected VmTypeName(final String vmTypeName){
  ensureIsNotNull(vmTypeName);
  ensureIsFalse(vmTypeName.length() == 0,""String_Node_Str"");
  if (vmTypeName.length() == 1) {
switch (vmTypeName.charAt(0)) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'V':
case 'Z':
      break;
default :
    throwUnreachable(""String_Node_Str"" + vmTypeName);
}
}
 else {
switch (vmTypeName.charAt(0)) {
case '[':
case 'L':
  break;
default :
throwUnreachable(""String_Node_Str"" + vmTypeName);
}
}
int off=0;
while (off < vmTypeName.length()) {
final char c=vmTypeName.charAt(off);
if (c == '[' || c == '/' || c == '-' || c == '<' || c == '>' || Character.isJavaIdentifierPart(c)) {
off++;
continue;
}
throwIllegalArgumentException(""String_Node_Str"",vmTypeName);
break;
}
identifier=vmTypeName;
}","/** 
 * @see #get(String)
 */
@VisibleForTesting protected VmTypeName(final String vmTypeName){
  ensureIsNotNull(vmTypeName);
  ensureIsFalse(vmTypeName.length() == 0,""String_Node_Str"");
  if (vmTypeName.length() == 1) {
switch (vmTypeName.charAt(0)) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'V':
case 'Z':
      break;
default :
    throwUnreachable(""String_Node_Str"" + vmTypeName);
}
}
 else {
switch (vmTypeName.charAt(0)) {
case '[':
case 'L':
  break;
default :
throwUnreachable(""String_Node_Str"" + vmTypeName);
}
}
int off=0;
while (off < vmTypeName.length()) {
final char c=vmTypeName.charAt(off);
if (c == '-' || c == '[' || c == '/' || c == '<' || c == '>' || Character.isJavaIdentifierPart(c)) {
off++;
continue;
}
throwIllegalArgumentException(""String_Node_Str"",vmTypeName);
break;
}
identifier=vmTypeName;
}",0.985981308411215
93232,"private static String removeGenerics(final String typeName){
  return StringUtils.substringBefore(typeName,""String_Node_Str"");
}","private static String removeGenerics(String typeName){
  int oldLength;
  do {
    oldLength=typeName.length();
    Matcher matcher=GENERICS_PATTERN.matcher(typeName);
    typeName=matcher.replaceAll(""String_Node_Str"");
  }
 while (typeName.length() < oldLength);
  return typeName;
}",0.3252427184466019
93233,"public static String mangle(String url){
  return removeEnd(url.replaceAll(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
}","public static String mangle(String url){
  return url.replaceAll(""String_Node_Str"",""String_Node_Str"");
}",0.8776371308016878
93234,"public static String mangle(String url){
  return removeEnd(url.replaceAll(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
}","public static String mangle(String url){
  return url.replaceAll(""String_Node_Str"",""String_Node_Str"");
}",0.8776371308016878
93235,"private String resolveType(final IType jdtDeclaringType,final String unresolvedType){
  final int arrayCount=Signature.getArrayCount(unresolvedType);
  String resolvedType=JdtUtils.resolveUnqualifiedTypeNamesAndStripOffGenericsAndArrayDimension(unresolvedType,jdtDeclaringType).or(Signature.SIG_VOID);
  resolvedType=resolvedType + StringUtils.repeat(""String_Node_Str"",arrayCount);
  return resolvedType;
}","private String resolveType(final IType jdtDeclaringType,final String unresolvedType,final ITypeParameter[] typeParameters) throws JavaModelException {
  final int arrayCount=Signature.getArrayCount(unresolvedType);
  String toResolve=unresolvedType.substring(arrayCount);
  if (typeParameters != null && toResolve.startsWith(""String_Node_Str"")) {
    String typeName=toResolve.substring(1,toResolve.length() - 1);
    for (    ITypeParameter typeParameter : typeParameters) {
      if (!typeParameter.getElementName().equals(typeName)) {
        continue;
      }
      String[] boundsSignatures=typeParameter.getBoundsSignatures();
      if (boundsSignatures.length > 0) {
        toResolve=boundsSignatures[0];
        break;
      }
    }
  }
  String resolvedType=JdtUtils.resolveUnqualifiedTypeNamesAndStripOffGenericsAndArrayDimension(toResolve,jdtDeclaringType).or(Signature.SIG_VOID);
  resolvedType=resolvedType + StringUtils.repeat(""String_Node_Str"",arrayCount);
  return resolvedType;
}",0.5588025659301497
93236,"/** 
 * Returns null if we fail to resolve all types used in the method signature, for instance generic return types etc...
 */
public Optional<IMethodName> toRecMethod(@Nullable IMethod jdtMethod){
  if (jdtMethod == null) {
    return absent();
  }
  if (!jdtMethod.exists()) {
    return absent();
  }
  JdtUtils.resolveJavaElementProxy(jdtMethod);
  IMethodName recMethod=(IMethodName)cache.inverse().get(jdtMethod);
  if (recMethod == null) {
    try {
      final IType jdtDeclaringType=jdtMethod.getDeclaringType();
      final String[] unresolvedParameterTypes=jdtMethod.getParameterTypes();
      final String[] resolvedParameterTypes=new String[unresolvedParameterTypes.length];
      for (int i=resolvedParameterTypes.length; i-- > 0; ) {
        resolvedParameterTypes[i]=resolveType(jdtDeclaringType,unresolvedParameterTypes[i]);
      }
      String resolvedReturnType=resolveType(jdtDeclaringType,jdtMethod.getReturnType());
      final String methodSignature=Names.src2vmMethod(jdtMethod.isConstructor() ? ""String_Node_Str"" : jdtMethod.getElementName(),resolvedParameterTypes,resolvedReturnType);
      final ITypeName recDeclaringType=toRecType(jdtDeclaringType);
      recMethod=VmMethodName.get(recDeclaringType.getIdentifier(),methodSignature);
      registerRecJdtElementPair(recMethod,jdtMethod);
    }
 catch (    final Exception e) {
      LOG.error(""String_Node_Str"",jdtMethod,e.getMessage(),e);
      return absent();
    }
  }
  return fromNullable(recMethod);
}","/** 
 * Returns null if we fail to resolve all types used in the method signature, for instance generic return types etc...
 */
public Optional<IMethodName> toRecMethod(@Nullable IMethod jdtMethod){
  if (jdtMethod == null) {
    return absent();
  }
  if (!jdtMethod.exists()) {
    return absent();
  }
  JdtUtils.resolveJavaElementProxy(jdtMethod);
  IMethodName recMethod=(IMethodName)cache.inverse().get(jdtMethod);
  if (recMethod == null) {
    try {
      final IType jdtDeclaringType=jdtMethod.getDeclaringType();
      ITypeParameter[] typeParameters=jdtMethod.getTypeParameters();
      final String[] unresolvedParameterTypes=jdtMethod.getParameterTypes();
      final String[] resolvedParameterTypes=new String[unresolvedParameterTypes.length];
      for (int i=resolvedParameterTypes.length; i-- > 0; ) {
        resolvedParameterTypes[i]=resolveType(jdtDeclaringType,unresolvedParameterTypes[i],typeParameters);
      }
      String resolvedReturnType=resolveType(jdtDeclaringType,jdtMethod.getReturnType(),typeParameters);
      final String methodSignature=Names.src2vmMethod(jdtMethod.isConstructor() ? ""String_Node_Str"" : jdtMethod.getElementName(),resolvedParameterTypes,resolvedReturnType);
      final ITypeName recDeclaringType=toRecType(jdtDeclaringType);
      recMethod=VmMethodName.get(recDeclaringType.getIdentifier(),methodSignature);
      registerRecJdtElementPair(recMethod,jdtMethod);
    }
 catch (    final Exception e) {
      LOG.error(""String_Node_Str"",jdtMethod,e.getMessage(),e);
      return absent();
    }
  }
  return fromNullable(recMethod);
}",0.948326291842704
93237,"private String resolveType(final IType jdtDeclaringType,final String unresolvedType){
  final int arrayCount=Signature.getArrayCount(unresolvedType);
  String resolvedType=JdtUtils.resolveUnqualifiedTypeNamesAndStripOffGenericsAndArrayDimension(unresolvedType,jdtDeclaringType).or(Signature.SIG_VOID);
  resolvedType=resolvedType + StringUtils.repeat(""String_Node_Str"",arrayCount);
  return resolvedType;
}","private String resolveType(final IType jdtDeclaringType,final String unresolvedType,final ITypeParameter[] typeParameters) throws JavaModelException {
  final int arrayCount=Signature.getArrayCount(unresolvedType);
  String toResolve=unresolvedType.substring(arrayCount);
  if (typeParameters != null && toResolve.startsWith(""String_Node_Str"")) {
    String typeName=toResolve.substring(1,toResolve.length() - 1);
    for (    ITypeParameter typeParameter : typeParameters) {
      if (!typeParameter.getElementName().equals(typeName)) {
        continue;
      }
      String[] boundsSignatures=typeParameter.getBoundsSignatures();
      if (boundsSignatures.length > 0) {
        toResolve=boundsSignatures[0];
        break;
      }
    }
  }
  String resolvedType=JdtUtils.resolveUnqualifiedTypeNamesAndStripOffGenericsAndArrayDimension(toResolve,jdtDeclaringType).or(Signature.SIG_VOID);
  resolvedType=resolvedType + StringUtils.repeat(""String_Node_Str"",arrayCount);
  return resolvedType;
}",0.5588025659301497
93238,"/** 
 * Returns null if we fail to resolve all types used in the method signature, for instance generic return types etc...
 */
public Optional<IMethodName> toRecMethod(@Nullable IMethod jdtMethod){
  if (jdtMethod == null) {
    return absent();
  }
  if (!jdtMethod.exists()) {
    return absent();
  }
  JdtUtils.resolveJavaElementProxy(jdtMethod);
  IMethodName recMethod=(IMethodName)cache.inverse().get(jdtMethod);
  if (recMethod == null) {
    try {
      final IType jdtDeclaringType=jdtMethod.getDeclaringType();
      final String[] unresolvedParameterTypes=jdtMethod.getParameterTypes();
      final String[] resolvedParameterTypes=new String[unresolvedParameterTypes.length];
      for (int i=resolvedParameterTypes.length; i-- > 0; ) {
        resolvedParameterTypes[i]=resolveType(jdtDeclaringType,unresolvedParameterTypes[i]);
      }
      String resolvedReturnType=resolveType(jdtDeclaringType,jdtMethod.getReturnType());
      final String methodSignature=Names.src2vmMethod(jdtMethod.isConstructor() ? ""String_Node_Str"" : jdtMethod.getElementName(),resolvedParameterTypes,resolvedReturnType);
      final ITypeName recDeclaringType=toRecType(jdtDeclaringType);
      recMethod=VmMethodName.get(recDeclaringType.getIdentifier(),methodSignature);
      registerRecJdtElementPair(recMethod,jdtMethod);
    }
 catch (    final Exception e) {
      LOG.error(""String_Node_Str"",jdtMethod,e.getMessage(),e);
      return absent();
    }
  }
  return fromNullable(recMethod);
}","/** 
 * Returns null if we fail to resolve all types used in the method signature, for instance generic return types etc...
 */
public Optional<IMethodName> toRecMethod(@Nullable IMethod jdtMethod){
  if (jdtMethod == null) {
    return absent();
  }
  if (!jdtMethod.exists()) {
    return absent();
  }
  JdtUtils.resolveJavaElementProxy(jdtMethod);
  IMethodName recMethod=(IMethodName)cache.inverse().get(jdtMethod);
  if (recMethod == null) {
    try {
      final IType jdtDeclaringType=jdtMethod.getDeclaringType();
      ITypeParameter[] typeParameters=jdtMethod.getTypeParameters();
      final String[] unresolvedParameterTypes=jdtMethod.getParameterTypes();
      final String[] resolvedParameterTypes=new String[unresolvedParameterTypes.length];
      for (int i=resolvedParameterTypes.length; i-- > 0; ) {
        resolvedParameterTypes[i]=resolveType(jdtDeclaringType,unresolvedParameterTypes[i],typeParameters);
      }
      String resolvedReturnType=resolveType(jdtDeclaringType,jdtMethod.getReturnType(),typeParameters);
      final String methodSignature=Names.src2vmMethod(jdtMethod.isConstructor() ? ""String_Node_Str"" : jdtMethod.getElementName(),resolvedParameterTypes,resolvedReturnType);
      final ITypeName recDeclaringType=toRecType(jdtDeclaringType);
      recMethod=VmMethodName.get(recDeclaringType.getIdentifier(),methodSignature);
      registerRecJdtElementPair(recMethod,jdtMethod);
    }
 catch (    final Exception e) {
      LOG.error(""String_Node_Str"",jdtMethod,e.getMessage(),e);
      return absent();
    }
  }
  return fromNullable(recMethod);
}",0.948326291842704
93239,"/** 
 * Returns null if we fail to resolve all types used in the method signature, for instance generic return types etc...
 */
public Optional<IMethodName> toRecMethod(@Nullable IMethod jdtMethod){
  if (jdtMethod == null) {
    return absent();
  }
  if (!jdtMethod.exists()) {
    return absent();
  }
  JdtUtils.resolveJavaElementProxy(jdtMethod);
  IMethodName recMethod=(IMethodName)cache.inverse().get(jdtMethod);
  if (recMethod == null) {
    try {
      final IType jdtDeclaringType=jdtMethod.getDeclaringType();
      final String[] unresolvedParameterTypes=jdtMethod.getParameterTypes();
      final String[] resolvedParameterTypes=new String[unresolvedParameterTypes.length];
      for (int i=resolvedParameterTypes.length; i-- > 0; ) {
        final String unresolved=unresolvedParameterTypes[i];
        final int arrayCount=Signature.getArrayCount(unresolved);
        String resolved=resolveUnqualifiedTypeNamesAndStripOffGenericsAndArrayDimension(unresolved,jdtDeclaringType).or(Signature.SIG_VOID);
        resolved=resolved + StringUtils.repeat(""String_Node_Str"",arrayCount);
        resolvedParameterTypes[i]=resolved;
      }
      String resolvedReturnType=null;
      final String unresolvedReturnType=jdtMethod.getReturnType();
      try {
        final int returnTypeArrayCount=Signature.getArrayCount(unresolvedReturnType);
        resolvedReturnType=JavaModelUtil.getResolvedTypeName(unresolvedReturnType,jdtDeclaringType) + StringUtils.repeat(""String_Node_Str"",returnTypeArrayCount);
      }
 catch (      final JavaModelException e) {
        LOG.error(""String_Node_Str"",e);
      }
      if (resolvedReturnType == null) {
        LOG.warn(""String_Node_Str"",unresolvedReturnType,jdtDeclaringType.getFullyQualifiedName(),jdtMethod.getElementName(),jdtMethod.getSignature());
        return absent();
      }
      final String methodSignature=Names.src2vmMethod(jdtMethod.isConstructor() ? ""String_Node_Str"" : jdtMethod.getElementName(),resolvedParameterTypes,resolvedReturnType);
      final ITypeName recDeclaringType=toRecType(jdtDeclaringType);
      recMethod=VmMethodName.get(recDeclaringType.getIdentifier(),methodSignature);
      registerRecJdtElementPair(recMethod,jdtMethod);
    }
 catch (    final Exception e) {
      LOG.error(""String_Node_Str"",jdtMethod,e.getMessage(),e);
      return absent();
    }
  }
  return fromNullable(recMethod);
}","/** 
 * Returns null if we fail to resolve all types used in the method signature, for instance generic return types etc...
 */
public Optional<IMethodName> toRecMethod(@Nullable IMethod jdtMethod){
  if (jdtMethod == null) {
    return absent();
  }
  if (!jdtMethod.exists()) {
    return absent();
  }
  JdtUtils.resolveJavaElementProxy(jdtMethod);
  IMethodName recMethod=(IMethodName)cache.inverse().get(jdtMethod);
  if (recMethod == null) {
    try {
      final IType jdtDeclaringType=jdtMethod.getDeclaringType();
      final String[] unresolvedParameterTypes=jdtMethod.getParameterTypes();
      final String[] resolvedParameterTypes=new String[unresolvedParameterTypes.length];
      for (int i=resolvedParameterTypes.length; i-- > 0; ) {
        final String unresolved=unresolvedParameterTypes[i];
        final int arrayCount=Signature.getArrayCount(unresolved);
        String resolved=JdtUtils.resolveUnqualifiedTypeNamesAndStripOffGenericsAndArrayDimension(unresolved,jdtDeclaringType).or(Signature.SIG_VOID);
        resolved=resolved + StringUtils.repeat(""String_Node_Str"",arrayCount);
        resolvedParameterTypes[i]=resolved;
      }
      String resolvedReturnType=null;
      final String unresolvedReturnType=jdtMethod.getReturnType();
      try {
        final int returnTypeArrayCount=Signature.getArrayCount(unresolvedReturnType);
        resolvedReturnType=JavaModelUtil.getResolvedTypeName(unresolvedReturnType,jdtDeclaringType) + StringUtils.repeat(""String_Node_Str"",returnTypeArrayCount);
      }
 catch (      final JavaModelException e) {
        LOG.error(""String_Node_Str"",e);
      }
      if (resolvedReturnType == null) {
        LOG.warn(""String_Node_Str"",unresolvedReturnType,jdtDeclaringType.getFullyQualifiedName(),jdtMethod.getElementName(),jdtMethod.getSignature());
        return absent();
      }
      final String methodSignature=Names.src2vmMethod(jdtMethod.isConstructor() ? ""String_Node_Str"" : jdtMethod.getElementName(),resolvedParameterTypes,resolvedReturnType);
      final ITypeName recDeclaringType=toRecType(jdtDeclaringType);
      recMethod=VmMethodName.get(recDeclaringType.getIdentifier(),methodSignature);
      registerRecJdtElementPair(recMethod,jdtMethod);
    }
 catch (    final Exception e) {
      LOG.error(""String_Node_Str"",jdtMethod,e.getMessage(),e);
      return absent();
    }
  }
  return fromNullable(recMethod);
}",0.9981175486299936
93240,"/** 
 * @param parent must be an  {@link IType} or something that has an {@link IType} as parent.
 */
public static Optional<String> resolveUnqualifiedTypeNamesAndStripOffGenericsAndArrayDimension(String typeSignature,final IJavaElement parent){
  ensureIsNotNull(typeSignature);
  ensureIsNotNull(parent);
  typeSignature=Signature.getTypeErasure(typeSignature);
  if (isPrimitiveTypeSignature(typeSignature)) {
    return of(typeSignature);
  }
  try {
    typeSignature=typeSignature.replace('/','.');
    final IType type=findClosestTypeOrThis(parent);
    if (type == null) {
      throwIllegalArgumentException(""String_Node_Str"",parent);
    }
    final String resolvedTypeSignature=JavaModelUtil.getResolvedTypeName(typeSignature,type);
    if (resolvedTypeSignature == null) {
      return of(""String_Node_Str"");
    }
    return of(resolvedTypeSignature);
  }
 catch (  final Exception e) {
    log(e);
    return absent();
  }
}","/** 
 * @param parent must be an  {@link IType} or something that has an {@link IType} as parent.
 */
public static Optional<String> resolveUnqualifiedTypeNamesAndStripOffGenericsAndArrayDimension(String typeSignature,final IJavaElement parent){
  ensureIsNotNull(typeSignature);
  ensureIsNotNull(parent);
  typeSignature=Signature.getTypeErasure(typeSignature);
  if (isPrimitiveTypeSignature(typeSignature)) {
    return of(Names.vm2srcTypeName(typeSignature));
  }
  try {
    typeSignature=typeSignature.replace('/','.');
    final IType type=findClosestTypeOrThis(parent);
    if (type == null) {
      throwIllegalArgumentException(""String_Node_Str"",parent);
    }
    final String resolvedTypeSignature=JavaModelUtil.getResolvedTypeName(typeSignature,type);
    if (resolvedTypeSignature == null) {
      return of(""String_Node_Str"");
    }
    return of(resolvedTypeSignature);
  }
 catch (  final Exception e) {
    log(e);
    return absent();
  }
}",0.9747102212855636
93241,"private Optional<IType> resolveType(final ITypeName recType){
  ensureIsNotNull(recType);
  if (recType.isArrayType()) {
    LOG.error(""String_Node_Str"");
    return absent();
  }
  if (recType.isNestedType()) {
    final ITypeName declaringType=recType.getDeclaringType();
    final String simpleName=StringUtils.substringAfterLast(recType.getIdentifier(),""String_Node_Str"");
    final IType parent=resolveType(declaringType).orNull();
    if (parent != null) {
      try {
        for (        final IType nested : parent.getTypes()) {
          final String key=nested.getKey();
          if (key.equals(recType.getIdentifier() + ';')) {
            return fromNullable(nested);
          }
        }
        for (        final IMethod m : parent.getMethods()) {
          for (          final IJavaElement children : m.getChildren()) {
            if (children instanceof IType) {
              final IType nested=(IType)children;
              if (nested.getKey().endsWith(simpleName + ';')) {
                return of(nested);
              }
              final String key=nested.getKey();
              if (key.equals(recType.getIdentifier() + ';')) {
                return fromNullable(nested);
              }
            }
          }
        }
      }
 catch (      final Exception x) {
        return absent();
      }
    }
    return absent();
  }
  final IType[] res=new IType[1];
  final IJavaSearchScope scope=SearchEngine.createWorkspaceScope();
  final SearchEngine search=new SearchEngine();
  final String srcTypeName=Names.vm2srcTypeName(recType.getIdentifier());
  final SearchPattern pattern=SearchPattern.createPattern(srcTypeName,IJavaSearchConstants.TYPE,IJavaSearchConstants.DECLARATIONS,SearchPattern.R_FULL_MATCH);
  try {
    search.search(pattern,SearchUtils.getDefaultSearchParticipants(),scope,new SearchRequestor(){
      @Override public void acceptSearchMatch(      final SearchMatch match) throws CoreException {
        IType element=(IType)match.getElement();
        if (toRecType(element).equals(recType)) {
          res[0]=element;
        }
      }
    }
,null);
  }
 catch (  final CoreException e) {
    throwUnhandledException(e);
  }
  return fromNullable(res[0]);
}","private String resolveType(final IType jdtDeclaringType,final String unresolvedType){
  final int arrayCount=Signature.getArrayCount(unresolvedType);
  String resolvedType=JdtUtils.resolveUnqualifiedTypeNamesAndStripOffGenericsAndArrayDimension(unresolvedType,jdtDeclaringType).or(Signature.SIG_VOID);
  resolvedType=resolvedType + StringUtils.repeat(""String_Node_Str"",arrayCount);
  return resolvedType;
}",0.041920731707317
93242,"/** 
 * Returns null if we fail to resolve all types used in the method signature, for instance generic return types etc...
 */
public Optional<IMethodName> toRecMethod(@Nullable IMethod jdtMethod){
  if (jdtMethod == null) {
    return absent();
  }
  if (!jdtMethod.exists()) {
    return absent();
  }
  JdtUtils.resolveJavaElementProxy(jdtMethod);
  IMethodName recMethod=(IMethodName)cache.inverse().get(jdtMethod);
  if (recMethod == null) {
    try {
      final IType jdtDeclaringType=jdtMethod.getDeclaringType();
      final String[] unresolvedParameterTypes=jdtMethod.getParameterTypes();
      final String[] resolvedParameterTypes=new String[unresolvedParameterTypes.length];
      for (int i=resolvedParameterTypes.length; i-- > 0; ) {
        final String unresolved=unresolvedParameterTypes[i];
        final int arrayCount=Signature.getArrayCount(unresolved);
        String resolved=JdtUtils.resolveUnqualifiedTypeNamesAndStripOffGenericsAndArrayDimension(unresolved,jdtDeclaringType).or(Signature.SIG_VOID);
        resolved=resolved + StringUtils.repeat(""String_Node_Str"",arrayCount);
        resolvedParameterTypes[i]=resolved;
      }
      String resolvedReturnType=null;
      final String unresolvedReturnType=jdtMethod.getReturnType();
      try {
        final int returnTypeArrayCount=Signature.getArrayCount(unresolvedReturnType);
        resolvedReturnType=JavaModelUtil.getResolvedTypeName(unresolvedReturnType,jdtDeclaringType) + StringUtils.repeat(""String_Node_Str"",returnTypeArrayCount);
      }
 catch (      final JavaModelException e) {
        LOG.error(""String_Node_Str"",e);
      }
      if (resolvedReturnType == null) {
        LOG.warn(""String_Node_Str"",unresolvedReturnType,jdtDeclaringType.getFullyQualifiedName(),jdtMethod.getElementName(),jdtMethod.getSignature());
        return absent();
      }
      final String methodSignature=Names.src2vmMethod(jdtMethod.isConstructor() ? ""String_Node_Str"" : jdtMethod.getElementName(),resolvedParameterTypes,resolvedReturnType);
      final ITypeName recDeclaringType=toRecType(jdtDeclaringType);
      recMethod=VmMethodName.get(recDeclaringType.getIdentifier(),methodSignature);
      registerRecJdtElementPair(recMethod,jdtMethod);
    }
 catch (    final Exception e) {
      LOG.error(""String_Node_Str"",jdtMethod,e.getMessage(),e);
      return absent();
    }
  }
  return fromNullable(recMethod);
}","/** 
 * Returns null if we fail to resolve all types used in the method signature, for instance generic return types etc...
 */
public Optional<IMethodName> toRecMethod(@Nullable IMethod jdtMethod){
  if (jdtMethod == null) {
    return absent();
  }
  if (!jdtMethod.exists()) {
    return absent();
  }
  JdtUtils.resolveJavaElementProxy(jdtMethod);
  IMethodName recMethod=(IMethodName)cache.inverse().get(jdtMethod);
  if (recMethod == null) {
    try {
      final IType jdtDeclaringType=jdtMethod.getDeclaringType();
      final String[] unresolvedParameterTypes=jdtMethod.getParameterTypes();
      final String[] resolvedParameterTypes=new String[unresolvedParameterTypes.length];
      for (int i=resolvedParameterTypes.length; i-- > 0; ) {
        resolvedParameterTypes[i]=resolveType(jdtDeclaringType,unresolvedParameterTypes[i]);
      }
      String resolvedReturnType=resolveType(jdtDeclaringType,jdtMethod.getReturnType());
      final String methodSignature=Names.src2vmMethod(jdtMethod.isConstructor() ? ""String_Node_Str"" : jdtMethod.getElementName(),resolvedParameterTypes,resolvedReturnType);
      final ITypeName recDeclaringType=toRecType(jdtDeclaringType);
      recMethod=VmMethodName.get(recDeclaringType.getIdentifier(),methodSignature);
      registerRecJdtElementPair(recMethod,jdtMethod);
    }
 catch (    final Exception e) {
      LOG.error(""String_Node_Str"",jdtMethod,e.getMessage(),e);
      return absent();
    }
  }
  return fromNullable(recMethod);
}",0.4603501544799176
93243,"/** 
 * Returns null if we fail to resolve all types used in the method signature, for instance generic return types etc...
 */
public Optional<IMethodName> toRecMethod(@Nullable IMethod jdtMethod){
  if (jdtMethod == null) {
    return absent();
  }
  if (!jdtMethod.exists()) {
    return absent();
  }
  JdtUtils.resolveJavaElementProxy(jdtMethod);
  IMethodName recMethod=(IMethodName)cache.inverse().get(jdtMethod);
  if (recMethod == null) {
    try {
      final IType jdtDeclaringType=jdtMethod.getDeclaringType();
      final String[] unresolvedParameterTypes=jdtMethod.getParameterTypes();
      final String[] resolvedParameterTypes=new String[unresolvedParameterTypes.length];
      for (int i=resolvedParameterTypes.length; i-- > 0; ) {
        final String unresolved=unresolvedParameterTypes[i];
        final int arrayCount=Signature.getArrayCount(unresolved);
        String resolved=resolveUnqualifiedTypeNamesAndStripOffGenericsAndArrayDimension(unresolved,jdtDeclaringType).or(Signature.SIG_VOID);
        resolved=resolved + StringUtils.repeat(""String_Node_Str"",arrayCount);
        resolvedParameterTypes[i]=resolved;
      }
      String resolvedReturnType=null;
      final String unresolvedReturnType=jdtMethod.getReturnType();
      try {
        final int returnTypeArrayCount=Signature.getArrayCount(unresolvedReturnType);
        resolvedReturnType=JavaModelUtil.getResolvedTypeName(unresolvedReturnType,jdtDeclaringType) + StringUtils.repeat(""String_Node_Str"",returnTypeArrayCount);
      }
 catch (      final JavaModelException e) {
        LOG.error(""String_Node_Str"",e);
      }
      if (resolvedReturnType == null) {
        LOG.warn(""String_Node_Str"",unresolvedReturnType,jdtDeclaringType.getFullyQualifiedName(),jdtMethod.getElementName(),jdtMethod.getSignature());
        return absent();
      }
      final String methodSignature=Names.src2vmMethod(jdtMethod.isConstructor() ? ""String_Node_Str"" : jdtMethod.getElementName(),resolvedParameterTypes,resolvedReturnType);
      final ITypeName recDeclaringType=toRecType(jdtDeclaringType);
      recMethod=VmMethodName.get(recDeclaringType.getIdentifier(),methodSignature);
      registerRecJdtElementPair(recMethod,jdtMethod);
    }
 catch (    final Exception e) {
      LOG.error(""String_Node_Str"",jdtMethod,e.getMessage(),e);
      return absent();
    }
  }
  return fromNullable(recMethod);
}","/** 
 * Returns null if we fail to resolve all types used in the method signature, for instance generic return types etc...
 */
public Optional<IMethodName> toRecMethod(@Nullable IMethod jdtMethod){
  if (jdtMethod == null) {
    return absent();
  }
  if (!jdtMethod.exists()) {
    return absent();
  }
  JdtUtils.resolveJavaElementProxy(jdtMethod);
  IMethodName recMethod=(IMethodName)cache.inverse().get(jdtMethod);
  if (recMethod == null) {
    try {
      final IType jdtDeclaringType=jdtMethod.getDeclaringType();
      final String[] unresolvedParameterTypes=jdtMethod.getParameterTypes();
      final String[] resolvedParameterTypes=new String[unresolvedParameterTypes.length];
      for (int i=resolvedParameterTypes.length; i-- > 0; ) {
        final String unresolved=unresolvedParameterTypes[i];
        final int arrayCount=Signature.getArrayCount(unresolved);
        String resolved=JdtUtils.resolveUnqualifiedTypeNamesAndStripOffGenericsAndArrayDimension(unresolved,jdtDeclaringType).or(Signature.SIG_VOID);
        resolved=resolved + StringUtils.repeat(""String_Node_Str"",arrayCount);
        resolvedParameterTypes[i]=resolved;
      }
      String resolvedReturnType=null;
      final String unresolvedReturnType=jdtMethod.getReturnType();
      try {
        final int returnTypeArrayCount=Signature.getArrayCount(unresolvedReturnType);
        resolvedReturnType=JavaModelUtil.getResolvedTypeName(unresolvedReturnType,jdtDeclaringType) + StringUtils.repeat(""String_Node_Str"",returnTypeArrayCount);
      }
 catch (      final JavaModelException e) {
        LOG.error(""String_Node_Str"",e);
      }
      if (resolvedReturnType == null) {
        LOG.warn(""String_Node_Str"",unresolvedReturnType,jdtDeclaringType.getFullyQualifiedName(),jdtMethod.getElementName(),jdtMethod.getSignature());
        return absent();
      }
      final String methodSignature=Names.src2vmMethod(jdtMethod.isConstructor() ? ""String_Node_Str"" : jdtMethod.getElementName(),resolvedParameterTypes,resolvedReturnType);
      final ITypeName recDeclaringType=toRecType(jdtDeclaringType);
      recMethod=VmMethodName.get(recDeclaringType.getIdentifier(),methodSignature);
      registerRecJdtElementPair(recMethod,jdtMethod);
    }
 catch (    final Exception e) {
      LOG.error(""String_Node_Str"",jdtMethod,e.getMessage(),e);
      return absent();
    }
  }
  return fromNullable(recMethod);
}",0.9981175486299936
93244,"/** 
 * @param parent must be an  {@link IType} or something that has an {@link IType} as parent.
 */
public static Optional<String> resolveUnqualifiedTypeNamesAndStripOffGenericsAndArrayDimension(String typeSignature,final IJavaElement parent){
  ensureIsNotNull(typeSignature);
  ensureIsNotNull(parent);
  typeSignature=Signature.getTypeErasure(typeSignature);
  if (isPrimitiveTypeSignature(typeSignature)) {
    return of(typeSignature);
  }
  try {
    typeSignature=typeSignature.replace('/','.');
    final IType type=findClosestTypeOrThis(parent);
    if (type == null) {
      throwIllegalArgumentException(""String_Node_Str"",parent);
    }
    final String resolvedTypeSignature=JavaModelUtil.getResolvedTypeName(typeSignature,type);
    if (resolvedTypeSignature == null) {
      return of(""String_Node_Str"");
    }
    return of(resolvedTypeSignature);
  }
 catch (  final Exception e) {
    log(e);
    return absent();
  }
}","/** 
 * @param parent must be an  {@link IType} or something that has an {@link IType} as parent.
 */
public static Optional<String> resolveUnqualifiedTypeNamesAndStripOffGenericsAndArrayDimension(String typeSignature,final IJavaElement parent){
  ensureIsNotNull(typeSignature);
  ensureIsNotNull(parent);
  typeSignature=Signature.getTypeErasure(typeSignature);
  if (isPrimitiveTypeSignature(typeSignature)) {
    return of(Names.vm2srcTypeName(typeSignature));
  }
  try {
    typeSignature=typeSignature.replace('/','.');
    final IType type=findClosestTypeOrThis(parent);
    if (type == null) {
      throwIllegalArgumentException(""String_Node_Str"",parent);
    }
    final String resolvedTypeSignature=JavaModelUtil.getResolvedTypeName(typeSignature,type);
    if (resolvedTypeSignature == null) {
      return of(""String_Node_Str"");
    }
    return of(resolvedTypeSignature);
  }
 catch (  final Exception e) {
    log(e);
    return absent();
  }
}",0.9747102212855636
93245,"public DiscoverCompletionProposal(SharedImages images,int invocationOffset){
  Image image=images.getImage(Images.OBJ_LIGHTBULB);
  StyledString text=new StyledString(PROPOSAL_LABEL,DECORATIONS_STYLER);
  setStyledDisplayString(text);
  setImage(image);
  setRelevance(RELEVANCE);
  setSortString(text.getString());
  setCursorPosition(invocationOffset);
}","public DiscoverCompletionProposal(SharedImages images,int invocationOffset){
  Image image=images.getImage(Images.OBJ_LIGHTBULB);
  StyledString text=new StyledString(PROPOSAL_LABEL,DECORATIONS_STYLER);
  setStyledDisplayString(text);
  setImage(image);
  setRelevance(RELEVANCE);
  setSortString(text.getString());
  setCursorPosition(invocationOffset);
  setReplacementString(""String_Node_Str"");
}",0.943046357615894
93246,"public EnableCompletionProposal(SharedImages images,int offset){
  Image image=images.getImage(Images.OBJ_LIGHTBULB);
  StyledString text=new StyledString(""String_Node_Str"",DECORATIONS_STYLER);
  setStyledDisplayString(text);
  setImage(image);
  setRelevance(RELEVANCE);
  setCursorPosition(offset);
}","public EnableCompletionProposal(SharedImages images,int offset){
  Image image=images.getImage(Images.OBJ_LIGHTBULB);
  StyledString text=new StyledString(""String_Node_Str"",DECORATIONS_STYLER);
  setStyledDisplayString(text);
  setImage(image);
  setRelevance(RELEVANCE);
  setCursorPosition(offset);
  setReplacementString(""String_Node_Str"");
}",0.9335394126738794
93247,"private Optional<IProjectCoordinateAdvisor> createAdvisor(String advisorName,ManualProjectCoordinateAdvisor manualMappingStrategy,IModelIndex index){
  if (advisorName.equals(ManualProjectCoordinateAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(manualMappingStrategy);
  }
  if (advisorName.equals(MavenPomPropertiesAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new MavenPomPropertiesAdvisor());
  }
  if (advisorName.equals(JREExecutionEnvironmentAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new MavenPomPropertiesAdvisor());
  }
  if (advisorName.equals(JREReleaseFileAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new JREReleaseFileAdvisor());
  }
  if (advisorName.equals(JREDirectoryNameAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new JREDirectoryNameAdvisor());
  }
  if (advisorName.equals(MavenPomXmlAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new MavenPomXmlAdvisor());
  }
  if (advisorName.equals(ModelIndexBundleSymbolicNameAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new ModelIndexBundleSymbolicNameAdvisor(index));
  }
  if (advisorName.equals(ModelIndexFingerprintAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new ModelIndexFingerprintAdvisor(index));
  }
  if (advisorName.equals(OsgiManifestAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new OsgiManifestAdvisor());
  }
  if (advisorName.equals(MavenCentralFingerprintSearchAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new MavenCentralFingerprintSearchAdvisor());
  }
  if (advisorName.equals(NestedJarProjectCoordinateAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new NestedJarProjectCoordinateAdvisor());
  }
  return Optional.<IProjectCoordinateAdvisor>absent();
}","private Optional<IProjectCoordinateAdvisor> createAdvisor(String advisorName,ManualProjectCoordinateAdvisor manualMappingStrategy,IModelIndex index){
  if (advisorName.equals(ManualProjectCoordinateAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(manualMappingStrategy);
  }
  if (advisorName.equals(MavenPomPropertiesAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new MavenPomPropertiesAdvisor());
  }
  if (advisorName.equals(JREExecutionEnvironmentAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new JREExecutionEnvironmentAdvisor());
  }
  if (advisorName.equals(JREReleaseFileAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new JREReleaseFileAdvisor());
  }
  if (advisorName.equals(JREDirectoryNameAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new JREDirectoryNameAdvisor());
  }
  if (advisorName.equals(MavenPomXmlAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new MavenPomXmlAdvisor());
  }
  if (advisorName.equals(ModelIndexBundleSymbolicNameAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new ModelIndexBundleSymbolicNameAdvisor(index));
  }
  if (advisorName.equals(ModelIndexFingerprintAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new ModelIndexFingerprintAdvisor(index));
  }
  if (advisorName.equals(OsgiManifestAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new OsgiManifestAdvisor());
  }
  if (advisorName.equals(MavenCentralFingerprintSearchAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new MavenCentralFingerprintSearchAdvisor());
  }
  if (advisorName.equals(NestedJarProjectCoordinateAdvisor.class.getName())) {
    return Optional.<IProjectCoordinateAdvisor>of(new NestedJarProjectCoordinateAdvisor());
  }
  return Optional.<IProjectCoordinateAdvisor>absent();
}",0.9897165788813644
93248,"@Singleton @Provides public List<IProjectCoordinateAdvisor> provideAdvisors(IModelIndex index,ManualProjectCoordinateAdvisor manualMappingStrategy){
  List<IProjectCoordinateAdvisor> availableAdvisors=Lists.newArrayList();
  availableAdvisors.add(manualMappingStrategy);
  availableAdvisors.add(new MavenPomPropertiesAdvisor());
  availableAdvisors.add(new JREExecutionEnvironmentAdvisor());
  availableAdvisors.add(new JREReleaseFileAdvisor());
  availableAdvisors.add(new JREDirectoryNameAdvisor());
  availableAdvisors.add(new MavenPomXmlAdvisor());
  availableAdvisors.add(new ModelIndexBundleSymbolicNameAdvisor(index));
  availableAdvisors.add(new ModelIndexFingerprintAdvisor(index));
  availableAdvisors.add(new OsgiManifestAdvisor());
  availableAdvisors.add(new MavenCentralFingerprintSearchAdvisor());
  return ImmutableList.copyOf(availableAdvisors);
}","@Singleton @Provides @Named(AVAILABLE_ADVISORS) public List<String> provideAdvisors(){
  List<String> availableAdvisors=Lists.newArrayList();
  ManualProjectCoordinateAdvisor.class.getName();
  availableAdvisors.add(ManualProjectCoordinateAdvisor.class.getName());
  availableAdvisors.add(MavenPomPropertiesAdvisor.class.getName());
  availableAdvisors.add(JREExecutionEnvironmentAdvisor.class.getName());
  availableAdvisors.add(JREReleaseFileAdvisor.class.getName());
  availableAdvisors.add(JREDirectoryNameAdvisor.class.getName());
  availableAdvisors.add(MavenPomXmlAdvisor.class.getName());
  availableAdvisors.add(ModelIndexBundleSymbolicNameAdvisor.class.getName());
  availableAdvisors.add(ModelIndexFingerprintAdvisor.class.getName());
  availableAdvisors.add(OsgiManifestAdvisor.class.getName());
  availableAdvisors.add(MavenCentralFingerprintSearchAdvisor.class.getName());
  return ImmutableList.copyOf(availableAdvisors);
}",0.4128745837957824
93249,"@Singleton @Provides public ProjectCoordinateAdvisorService provideMappingProvider(List<IProjectCoordinateAdvisor> availableAdvisors,ModelsRcpPreferences prefs){
  ProjectCoordinateAdvisorService mappingProvider=new ProjectCoordinateAdvisorService();
  mappingProvider.setAdvisors(Advisors.createAdvisorList(availableAdvisors,prefs.advisors));
  return mappingProvider;
}","@Singleton @Provides public ProjectCoordinateAdvisorService provideMappingProvider(ModelsRcpPreferences prefs,IModelIndex index,ManualProjectCoordinateAdvisor manualMappingStrategy) throws Exception {
  List<IProjectCoordinateAdvisor> availableAdvisors=Lists.newArrayList();
  ProjectCoordinateAdvisorService mappingProvider=new ProjectCoordinateAdvisorService();
  for (  String advisorName : prefs.advisors.split(""String_Node_Str"")) {
    availableAdvisors.add(createAdvisor(advisorName,manualMappingStrategy,index));
  }
  mappingProvider.setAdvisors(Advisors.createAdvisorList(availableAdvisors,prefs.advisors));
  return mappingProvider;
}",0.3073891625615763
93250,"@Inject public PreferenceInitializer(List<IProjectCoordinateAdvisor> availableAdvisors){
  this.availableAdvisors=availableAdvisors;
}","@Inject public PreferenceInitializer(@Named(AVAILABLE_ADVISORS) List<String> availableAdvisors){
  this.availableAdvisors=availableAdvisors;
}",0.8115942028985508
93251,"@Override public void initializeDefaultPreferences(){
  IEclipsePreferences s=DefaultScope.INSTANCE.getNode(BUNDLE_ID);
  s.put(P_REPOSITORY_URL_LIST_ACTIV,SERVER_URL);
  s.put(P_REPOSITORY_URL_LIST,SERVER_URL);
  s.put(P_ADVISOR_LIST_SORTED,Advisors.createPreferenceString(availableAdvisors,Collections.<IProjectCoordinateAdvisor>emptySet()));
  s.putBoolean(P_REPOSITORY_ENABLE_AUTO_DOWNLOAD,true);
}","@Override public void initializeDefaultPreferences(){
  IEclipsePreferences s=DefaultScope.INSTANCE.getNode(BUNDLE_ID);
  s.put(P_REPOSITORY_URL_LIST_ACTIV,SERVER_URL);
  s.put(P_REPOSITORY_URL_LIST,SERVER_URL);
  s.put(P_ADVISOR_LIST_SORTED,getSemicolonSeparatedList(availableAdvisors));
  s.putBoolean(P_REPOSITORY_ENABLE_AUTO_DOWNLOAD,true);
}",0.6764705882352942
93252,"@Singleton @Provides public List<IProjectCoordinateAdvisor> provideAdvisors(IModelIndex index,ManualProjectCoordinateAdvisor manualMappingStrategy){
  List<IProjectCoordinateAdvisor> availableAdvisors=Lists.newArrayList();
  availableAdvisors.add(manualMappingStrategy);
  availableAdvisors.add(new MavenPomPropertiesAdvisor());
  availableAdvisors.add(new JREExecutionEnvironmentAdvisor());
  availableAdvisors.add(new JREReleaseFileAdvisor());
  availableAdvisors.add(new JREDirectoryNameAdvisor());
  availableAdvisors.add(new MavenPomXmlAdvisor());
  availableAdvisors.add(new ModelIndexBundleSymbolicNameAdvisor(index));
  availableAdvisors.add(new ModelIndexFingerprintAdvisor(index));
  availableAdvisors.add(new OsgiManifestAdvisor());
  availableAdvisors.add(new MavenCentralFingerprintSearchAdvisor());
  return ImmutableList.copyOf(availableAdvisors);
}","@Singleton @Provides @Named(AVAILABLE_ADVISORS) public List<String> provideAdvisors(){
  List<String> availableAdvisors=Lists.newArrayList();
  ManualProjectCoordinateAdvisor.class.getName();
  availableAdvisors.add(ManualProjectCoordinateAdvisor.class.getName());
  availableAdvisors.add(MavenPomPropertiesAdvisor.class.getName());
  availableAdvisors.add(JREExecutionEnvironmentAdvisor.class.getName());
  availableAdvisors.add(JREReleaseFileAdvisor.class.getName());
  availableAdvisors.add(JREDirectoryNameAdvisor.class.getName());
  availableAdvisors.add(MavenPomXmlAdvisor.class.getName());
  availableAdvisors.add(ModelIndexBundleSymbolicNameAdvisor.class.getName());
  availableAdvisors.add(ModelIndexFingerprintAdvisor.class.getName());
  availableAdvisors.add(OsgiManifestAdvisor.class.getName());
  availableAdvisors.add(MavenCentralFingerprintSearchAdvisor.class.getName());
  return ImmutableList.copyOf(availableAdvisors);
}",0.4128745837957824
93253,"@Singleton @Provides public ProjectCoordinateAdvisorService provideMappingProvider(List<IProjectCoordinateAdvisor> availableAdvisors,ModelsRcpPreferences prefs){
  ProjectCoordinateAdvisorService mappingProvider=new ProjectCoordinateAdvisorService();
  mappingProvider.setAdvisors(Advisors.createAdvisorList(availableAdvisors,prefs.advisors));
  return mappingProvider;
}","@Singleton @Provides public ProjectCoordinateAdvisorService provideMappingProvider(ModelsRcpPreferences prefs,IModelIndex index,ManualProjectCoordinateAdvisor manualMappingStrategy) throws Exception {
  List<IProjectCoordinateAdvisor> availableAdvisors=Lists.newArrayList();
  ProjectCoordinateAdvisorService mappingProvider=new ProjectCoordinateAdvisorService();
  for (  String advisorName : prefs.advisors.split(""String_Node_Str"")) {
    availableAdvisors.add(createAdvisor(advisorName,manualMappingStrategy,index));
  }
  mappingProvider.setAdvisors(Advisors.createAdvisorList(availableAdvisors,prefs.advisors));
  return mappingProvider;
}",0.3073891625615763
93254,"@Inject public PreferenceInitializer(List<IProjectCoordinateAdvisor> availableAdvisors){
  this.availableAdvisors=availableAdvisors;
}","@Inject public PreferenceInitializer(@Named(AVAILABLE_ADVISORS) List<String> availableAdvisors){
  this.availableAdvisors=availableAdvisors;
}",0.8115942028985508
93255,"@Override public void initializeDefaultPreferences(){
  IEclipsePreferences s=DefaultScope.INSTANCE.getNode(BUNDLE_ID);
  s.put(P_REPOSITORY_URL_LIST_ACTIV,SERVER_URL);
  s.put(P_REPOSITORY_URL_LIST,SERVER_URL);
  s.put(P_ADVISOR_LIST_SORTED,Advisors.createPreferenceString(availableAdvisors,Collections.<IProjectCoordinateAdvisor>emptySet()));
  s.putBoolean(P_REPOSITORY_ENABLE_AUTO_DOWNLOAD,true);
}","@Override public void initializeDefaultPreferences(){
  IEclipsePreferences s=DefaultScope.INSTANCE.getNode(BUNDLE_ID);
  s.put(P_REPOSITORY_URL_LIST_ACTIV,SERVER_URL);
  s.put(P_REPOSITORY_URL_LIST,SERVER_URL);
  s.put(P_ADVISOR_LIST_SORTED,getSemicolonSeparatedList(availableAdvisors));
  s.putBoolean(P_REPOSITORY_ENABLE_AUTO_DOWNLOAD,true);
}",0.6764705882352942
93256,"private void addContextMenu(){
  final MenuManager menuManager=new MenuManager();
  Menu contextMenu=menuManager.createContextMenu(tree);
  menuManager.setRemoveAllWhenShown(true);
  tree.setMenu(contextMenu);
  menuManager.addMenuListener(new IMenuListener(){
    @Override public void menuAboutToShow(    IMenuManager manager){
      Set<KnownCoordinate> selectedValues=Selections.toSet(treeViewer.getSelection());
      Set<ModelCoordinate> selectedModelCoordinates=Sets.newHashSet();
      for (      KnownCoordinate value : selectedValues) {
        Collection<ModelCoordinate> mcs=value.mcs;
        selectedModelCoordinates.addAll(mcs);
      }
      if (!selectedValues.isEmpty()) {
        TriggerModelDownloadForModelCoordinatesAction action=new TriggerModelDownloadForModelCoordinatesAction(""String_Node_Str"",selectedModelCoordinates,repo,bus);
        menuManager.add(action);
      }
    }
  }
);
}","private void addContextMenu(){
  final MenuManager menuManager=new MenuManager();
  Menu contextMenu=menuManager.createContextMenu(tree);
  menuManager.setRemoveAllWhenShown(true);
  tree.setMenu(contextMenu);
  menuManager.addMenuListener(new IMenuListener(){
    @Override public void menuAboutToShow(    IMenuManager manager){
      if (!isValidType(treeViewer.getSelection(),KnownCoordinate.class)) {
        return;
      }
      Set<KnownCoordinate> selectedValues=Selections.toSet(treeViewer.getSelection());
      Set<ModelCoordinate> selectedModelCoordinates=Sets.newHashSet();
      for (      KnownCoordinate value : selectedValues) {
        Collection<ModelCoordinate> mcs=value.mcs;
        selectedModelCoordinates.addAll(mcs);
      }
      if (!selectedValues.isEmpty()) {
        TriggerModelDownloadForModelCoordinatesAction action=new TriggerModelDownloadForModelCoordinatesAction(""String_Node_Str"",selectedModelCoordinates,repo,bus);
        menuManager.add(action);
      }
    }
    private boolean isValidType(    ISelection selection,    Class<KnownCoordinate> expectedType){
      return Selections.safeFirstElement(treeViewer.getSelection(),KnownCoordinate.class).isPresent();
    }
  }
);
}",0.8558008454673556
93257,"@Override public void menuAboutToShow(IMenuManager manager){
  Set<KnownCoordinate> selectedValues=Selections.toSet(treeViewer.getSelection());
  Set<ModelCoordinate> selectedModelCoordinates=Sets.newHashSet();
  for (  KnownCoordinate value : selectedValues) {
    Collection<ModelCoordinate> mcs=value.mcs;
    selectedModelCoordinates.addAll(mcs);
  }
  if (!selectedValues.isEmpty()) {
    TriggerModelDownloadForModelCoordinatesAction action=new TriggerModelDownloadForModelCoordinatesAction(""String_Node_Str"",selectedModelCoordinates,repo,bus);
    menuManager.add(action);
  }
}","@Override public void menuAboutToShow(IMenuManager manager){
  if (!isValidType(treeViewer.getSelection(),KnownCoordinate.class)) {
    return;
  }
  Set<KnownCoordinate> selectedValues=Selections.toSet(treeViewer.getSelection());
  Set<ModelCoordinate> selectedModelCoordinates=Sets.newHashSet();
  for (  KnownCoordinate value : selectedValues) {
    Collection<ModelCoordinate> mcs=value.mcs;
    selectedModelCoordinates.addAll(mcs);
  }
  if (!selectedValues.isEmpty()) {
    TriggerModelDownloadForModelCoordinatesAction action=new TriggerModelDownloadForModelCoordinatesAction(""String_Node_Str"",selectedModelCoordinates,repo,bus);
    menuManager.add(action);
  }
}",0.9307875894988068
93258,"/** 
 * This implementation caches the previous results
 */
@Override public Optional<ModelCoordinate> suggest(final ProjectCoordinate pc,final String modelType){
  Pair<ProjectCoordinate,String> key=Pair.newPair(pc,modelType);
  try {
    return cache.get(key,new Callable<Optional<ModelCoordinate>>(){
      @Override public Optional<ModelCoordinate> call(){
        for (        Entry<String,Pair<File,IModelIndex>> entry : delegates.entrySet()) {
          IModelIndex index=entry.getValue().getSecond();
          Optional<ModelCoordinate> suggest=index.suggest(pc,modelType);
          if (suggest.isPresent()) {
            ModelCoordinate mc=suggest.get();
            mc.setHint(ModelCoordinate.HINT_REPOSITORY_URL,entry.getKey());
            return of(mc);
          }
        }
        return absent();
      }
    }
);
  }
 catch (  ExecutionException e) {
    log.error(""String_Node_Str"",e);
    return absent();
  }
}","/** 
 * This implementation caches the previous results
 */
@Override public Optional<ModelCoordinate> suggest(final ProjectCoordinate pc,final String modelType){
  Pair<ProjectCoordinate,String> key=Pair.newPair(pc,modelType);
  try {
    return cache.get(key,new Callable<Optional<ModelCoordinate>>(){
      @Override public Optional<ModelCoordinate> call(){
        for (        String remote : prefs.remotes) {
          Pair<File,IModelIndex> pair=delegates.get(remote);
          if (pair == null) {
            return absent();
          }
          IModelIndex index=pair.getSecond();
          Optional<ModelCoordinate> suggest=index.suggest(pc,modelType);
          if (suggest.isPresent()) {
            ModelCoordinate mc=suggest.get();
            mc.setHint(ModelCoordinate.HINT_REPOSITORY_URL,remote);
            return of(mc);
          }
        }
        return absent();
      }
    }
);
  }
 catch (  ExecutionException e) {
    log.error(""String_Node_Str"",e);
    return absent();
  }
}",0.9020618556701032
93259,"@Override public Optional<ModelCoordinate> call(){
  for (  Entry<String,Pair<File,IModelIndex>> entry : delegates.entrySet()) {
    IModelIndex index=entry.getValue().getSecond();
    Optional<ModelCoordinate> suggest=index.suggest(pc,modelType);
    if (suggest.isPresent()) {
      ModelCoordinate mc=suggest.get();
      mc.setHint(ModelCoordinate.HINT_REPOSITORY_URL,entry.getKey());
      return of(mc);
    }
  }
  return absent();
}","@Override public Optional<ModelCoordinate> call(){
  for (  String remote : prefs.remotes) {
    Pair<File,IModelIndex> pair=delegates.get(remote);
    if (pair == null) {
      return absent();
    }
    IModelIndex index=pair.getSecond();
    Optional<ModelCoordinate> suggest=index.suggest(pc,modelType);
    if (suggest.isPresent()) {
      ModelCoordinate mc=suggest.get();
      mc.setHint(ModelCoordinate.HINT_REPOSITORY_URL,remote);
      return of(mc);
    }
  }
  return absent();
}",0.8004291845493562
93260,"private void doOpen(String remoteUrl,boolean scheduleIndexUpdate) throws IOException {
  File indexLocation=new File(basedir,Urls.mangle(remoteUrl));
  IModelIndex modelIndex=new ModelIndex(indexLocation);
  delegates.put(remoteUrl,Pair.newPair(indexLocation,modelIndex));
  if (!indexAlreadyDownloaded(indexLocation) || scheduleIndexUpdate) {
    triggerIndexDownload(remoteUrl);
    return;
  }
  modelIndex.open();
  bus.post(new ModelIndexOpenedEvent());
}","private void doOpen(String remoteUrl,boolean scheduleIndexUpdate) throws IOException {
  File indexLocation=new File(basedir,Urls.mangle(remoteUrl));
  IModelIndex modelIndex=createModelIndex(indexLocation);
  delegates.put(remoteUrl,Pair.newPair(indexLocation,modelIndex));
  if (!indexAlreadyDownloaded(indexLocation) || scheduleIndexUpdate) {
    triggerIndexDownload(remoteUrl);
    return;
  }
  modelIndex.open();
  bus.post(new ModelIndexOpenedEvent());
}",0.9891540130151844
93261,"private ModelCoordinate createIndexCoordinateWithRemoteUrlHint(String remoteUrl){
  ModelCoordinate mc=new ModelCoordinate(INDEX.getGroupId(),INDEX.getArtifactId(),INDEX.getClassifier(),INDEX.getExtension(),INDEX.getVersion());
  return addRepositoryUrlHint(mc,remoteUrl);
}","private ModelCoordinate createIndexCoordinateWithRemoteUrlHint(String remoteUrl){
  ModelCoordinate mc=new ModelCoordinate(INDEX.getGroupId(),INDEX.getArtifactId(),INDEX.getClassifier(),INDEX.getExtension(),INDEX.getVersion());
  return createCopyWithRepositoryUrlHint(mc,remoteUrl);
}",0.9695885509838998
93262,"private ModelCoordinate addRepositoryUrlHint(ModelCoordinate modelCoordinate,String url){
  modelCoordinate.setHint(ModelCoordinate.HINT_REPOSITORY_URL,url);
  return modelCoordinate;
}","public Set<ModelCoordinate> addRepositoryUrlHint(Set<ModelCoordinate> modelCoordinates,String url){
  for (  ModelCoordinate modelCoordinate : modelCoordinates) {
    createCopyWithRepositoryUrlHint(modelCoordinate,url);
  }
  return modelCoordinates;
}",0.3926940639269406
93263,"/** 
 * This implementation caches the previous results
 */
@Override public Optional<ModelCoordinate> suggest(final ProjectCoordinate pc,final String modelType){
  Pair<ProjectCoordinate,String> key=Pair.newPair(pc,modelType);
  try {
    return cache.get(key,new Callable<Optional<ModelCoordinate>>(){
      @Override public Optional<ModelCoordinate> call(){
        for (        String remote : prefs.remotes) {
          Pair<File,IModelIndex> pair=delegates.get(remote);
          if (pair == null) {
            return absent();
          }
          IModelIndex index=pair.getSecond();
          Optional<ModelCoordinate> suggest=index.suggest(pc,modelType);
          if (suggest.isPresent()) {
            ModelCoordinate mc=suggest.get();
            mc.setHint(ModelCoordinate.HINT_REPOSITORY_URL,remote);
            return of(mc);
          }
        }
        return absent();
      }
    }
);
  }
 catch (  ExecutionException e) {
    log.error(""String_Node_Str"",e);
    return absent();
  }
}","/** 
 * This implementation caches the previous results
 */
@Override public Optional<ModelCoordinate> suggest(final ProjectCoordinate pc,final String modelType){
  Pair<ProjectCoordinate,String> key=Pair.newPair(pc,modelType);
  try {
    return cache.get(key,new Callable<Optional<ModelCoordinate>>(){
      @Override public Optional<ModelCoordinate> call(){
        for (        String remote : prefs.remotes) {
          Pair<File,IModelIndex> pair=delegates.get(remote);
          if (pair == null) {
            return absent();
          }
          IModelIndex index=pair.getSecond();
          Optional<ModelCoordinate> suggest=index.suggest(pc,modelType);
          if (suggest.isPresent()) {
            return of(createCopyWithRepositoryUrlHint(suggest.get(),remote));
          }
        }
        return absent();
      }
    }
);
  }
 catch (  ExecutionException e) {
    log.error(""String_Node_Str"",e);
    return absent();
  }
}",0.9062980030721968
93264,"@Override public Optional<ModelCoordinate> call(){
  for (  String remote : prefs.remotes) {
    Pair<File,IModelIndex> pair=delegates.get(remote);
    if (pair == null) {
      return absent();
    }
    IModelIndex index=pair.getSecond();
    Optional<ModelCoordinate> suggest=index.suggest(pc,modelType);
    if (suggest.isPresent()) {
      ModelCoordinate mc=suggest.get();
      mc.setHint(ModelCoordinate.HINT_REPOSITORY_URL,remote);
      return of(mc);
    }
  }
  return absent();
}","@Override public Optional<ModelCoordinate> call(){
  for (  String remote : prefs.remotes) {
    Pair<File,IModelIndex> pair=delegates.get(remote);
    if (pair == null) {
      return absent();
    }
    IModelIndex index=pair.getSecond();
    Optional<ModelCoordinate> suggest=index.suggest(pc,modelType);
    if (suggest.isPresent()) {
      return of(createCopyWithRepositoryUrlHint(suggest.get(),remote));
    }
  }
  return absent();
}",0.8167202572347267
93265,"@Subscribe public void onEvent(ModelArchiveDownloadedEvent e) throws IOException {
  if (INDEX.equals(e.model)) {
    File location=repository.getLocation(e.model,false).orNull();
    String remoteUrl=e.model.getHint(HINT_REPOSITORY_URL).orNull();
    if (remoteUrl != null) {
      Pair<File,IModelIndex> delegate=delegates.get(remoteUrl);
      delegate.getSecond().close();
      File file=delegate.getFirst();
      file.mkdir();
      FileUtils.cleanDirectory(file);
      Zips.unzip(location,file);
      doOpen(remoteUrl,false);
    }
  }
}","@Subscribe public void onEvent(ModelArchiveDownloadedEvent e) throws IOException {
  if (isIndex(e.model)) {
    File location=repository.getLocation(e.model,false).orNull();
    String remoteUrl=e.model.getHint(HINT_REPOSITORY_URL).orNull();
    if (remoteUrl != null) {
      Pair<File,IModelIndex> delegate=delegates.get(remoteUrl);
      delegate.getSecond().close();
      File file=delegate.getFirst();
      file.mkdir();
      FileUtils.cleanDirectory(file);
      Zips.unzip(location,file);
      doOpen(remoteUrl,false);
    }
  }
}",0.9843893480257117
93266,"@Override public int hashCode(){
  return HashCodeBuilder.reflectionHashCode(this,""String_Node_Str"");
}","@Override public int hashCode(){
  return HashCodeBuilder.reflectionHashCode(this);
}",0.9042553191489362
93267,"@Override public boolean equals(Object obj){
  return EqualsBuilder.reflectionEquals(this,obj,""String_Node_Str"");
}","@Override public boolean equals(Object obj){
  return EqualsBuilder.reflectionEquals(this,obj);
}",0.9150943396226416
93268,"private void addContextMenu(){
  final MenuManager menuManager=new MenuManager();
  Menu contextMenu=menuManager.createContextMenu(tree);
  menuManager.setRemoveAllWhenShown(true);
  tree.setMenu(contextMenu);
  menuManager.addMenuListener(new IMenuListener(){
    @Override public void menuAboutToShow(    IMenuManager manager){
      Set<KnownCoordinate> selectedValues=Selections.toSet(treeViewer.getSelection());
      Set<ModelCoordinate> selectedModelCoordinates=Sets.newHashSet();
      for (      KnownCoordinate value : selectedValues) {
        Collection<ModelCoordinate> mcs=value.mcs;
        selectedModelCoordinates.addAll(mcs);
      }
      if (!selectedValues.isEmpty()) {
        TriggerModelDownloadForModelCoordinatesAction action=new TriggerModelDownloadForModelCoordinatesAction(""String_Node_Str"",selectedModelCoordinates,repo,bus);
        menuManager.add(action);
      }
    }
  }
);
}","private void addContextMenu(){
  final MenuManager menuManager=new MenuManager();
  Menu contextMenu=menuManager.createContextMenu(tree);
  menuManager.setRemoveAllWhenShown(true);
  tree.setMenu(contextMenu);
  menuManager.addMenuListener(new IMenuListener(){
    @Override public void menuAboutToShow(    IMenuManager manager){
      if (!isValidType(treeViewer.getSelection(),KnownCoordinate.class)) {
        return;
      }
      Set<KnownCoordinate> selectedValues=Selections.toSet(treeViewer.getSelection());
      Set<ModelCoordinate> selectedModelCoordinates=Sets.newHashSet();
      for (      KnownCoordinate value : selectedValues) {
        Collection<ModelCoordinate> mcs=value.mcs;
        selectedModelCoordinates.addAll(mcs);
      }
      if (!selectedValues.isEmpty()) {
        TriggerModelDownloadForModelCoordinatesAction action=new TriggerModelDownloadForModelCoordinatesAction(""String_Node_Str"",selectedModelCoordinates,repo,bus);
        menuManager.add(action);
      }
    }
    private boolean isValidType(    ISelection selection,    Class<KnownCoordinate> expectedType){
      return Selections.safeFirstElement(treeViewer.getSelection(),KnownCoordinate.class).isPresent();
    }
  }
);
}",0.8558008454673556
93269,"@Override public void menuAboutToShow(IMenuManager manager){
  Set<KnownCoordinate> selectedValues=Selections.toSet(treeViewer.getSelection());
  Set<ModelCoordinate> selectedModelCoordinates=Sets.newHashSet();
  for (  KnownCoordinate value : selectedValues) {
    Collection<ModelCoordinate> mcs=value.mcs;
    selectedModelCoordinates.addAll(mcs);
  }
  if (!selectedValues.isEmpty()) {
    TriggerModelDownloadForModelCoordinatesAction action=new TriggerModelDownloadForModelCoordinatesAction(""String_Node_Str"",selectedModelCoordinates,repo,bus);
    menuManager.add(action);
  }
}","@Override public void menuAboutToShow(IMenuManager manager){
  if (!isValidType(treeViewer.getSelection(),KnownCoordinate.class)) {
    return;
  }
  Set<KnownCoordinate> selectedValues=Selections.toSet(treeViewer.getSelection());
  Set<ModelCoordinate> selectedModelCoordinates=Sets.newHashSet();
  for (  KnownCoordinate value : selectedValues) {
    Collection<ModelCoordinate> mcs=value.mcs;
    selectedModelCoordinates.addAll(mcs);
  }
  if (!selectedValues.isEmpty()) {
    TriggerModelDownloadForModelCoordinatesAction action=new TriggerModelDownloadForModelCoordinatesAction(""String_Node_Str"",selectedModelCoordinates,repo,bus);
    menuManager.add(action);
  }
}",0.9307875894988068
93270,"/** 
 * This implementation caches the previous results
 */
@Override public Optional<ModelCoordinate> suggest(final ProjectCoordinate pc,final String modelType){
  Pair<ProjectCoordinate,String> key=Pair.newPair(pc,modelType);
  try {
    return cache.get(key,new Callable<Optional<ModelCoordinate>>(){
      @Override public Optional<ModelCoordinate> call(){
        for (        Entry<String,Pair<File,IModelIndex>> entry : delegates.entrySet()) {
          IModelIndex index=entry.getValue().getSecond();
          Optional<ModelCoordinate> suggest=index.suggest(pc,modelType);
          if (suggest.isPresent()) {
            ModelCoordinate mc=suggest.get();
            mc.setHint(ModelCoordinate.HINT_REPOSITORY_URL,entry.getKey());
            return of(mc);
          }
        }
        return absent();
      }
    }
);
  }
 catch (  ExecutionException e) {
    log.error(""String_Node_Str"",e);
    return absent();
  }
}","/** 
 * This implementation caches the previous results
 */
@Override public Optional<ModelCoordinate> suggest(final ProjectCoordinate pc,final String modelType){
  Pair<ProjectCoordinate,String> key=Pair.newPair(pc,modelType);
  try {
    return cache.get(key,new Callable<Optional<ModelCoordinate>>(){
      @Override public Optional<ModelCoordinate> call(){
        for (        String remote : prefs.remotes) {
          Pair<File,IModelIndex> pair=delegates.get(remote);
          if (pair == null) {
            return absent();
          }
          IModelIndex index=pair.getSecond();
          Optional<ModelCoordinate> suggest=index.suggest(pc,modelType);
          if (suggest.isPresent()) {
            ModelCoordinate mc=suggest.get();
            mc.setHint(ModelCoordinate.HINT_REPOSITORY_URL,remote);
            return of(mc);
          }
        }
        return absent();
      }
    }
);
  }
 catch (  ExecutionException e) {
    log.error(""String_Node_Str"",e);
    return absent();
  }
}",0.9020618556701032
93271,"@Override public Optional<ModelCoordinate> call(){
  for (  Entry<String,Pair<File,IModelIndex>> entry : delegates.entrySet()) {
    IModelIndex index=entry.getValue().getSecond();
    Optional<ModelCoordinate> suggest=index.suggest(pc,modelType);
    if (suggest.isPresent()) {
      ModelCoordinate mc=suggest.get();
      mc.setHint(ModelCoordinate.HINT_REPOSITORY_URL,entry.getKey());
      return of(mc);
    }
  }
  return absent();
}","@Override public Optional<ModelCoordinate> call(){
  for (  String remote : prefs.remotes) {
    Pair<File,IModelIndex> pair=delegates.get(remote);
    if (pair == null) {
      return absent();
    }
    IModelIndex index=pair.getSecond();
    Optional<ModelCoordinate> suggest=index.suggest(pc,modelType);
    if (suggest.isPresent()) {
      ModelCoordinate mc=suggest.get();
      mc.setHint(ModelCoordinate.HINT_REPOSITORY_URL,remote);
      return of(mc);
    }
  }
  return absent();
}",0.8004291845493562
93272,"private void doOpen(String remoteUrl,boolean scheduleIndexUpdate) throws IOException {
  File indexLocation=new File(basedir,Urls.mangle(remoteUrl));
  IModelIndex modelIndex=new ModelIndex(indexLocation);
  delegates.put(remoteUrl,Pair.newPair(indexLocation,modelIndex));
  if (!indexAlreadyDownloaded(indexLocation) || scheduleIndexUpdate) {
    triggerIndexDownload(remoteUrl);
    return;
  }
  modelIndex.open();
  bus.post(new ModelIndexOpenedEvent());
}","private void doOpen(String remoteUrl,boolean scheduleIndexUpdate) throws IOException {
  File indexLocation=new File(basedir,Urls.mangle(remoteUrl));
  IModelIndex modelIndex=createModelIndex(indexLocation);
  delegates.put(remoteUrl,Pair.newPair(indexLocation,modelIndex));
  if (!indexAlreadyDownloaded(indexLocation) || scheduleIndexUpdate) {
    triggerIndexDownload(remoteUrl);
    return;
  }
  modelIndex.open();
  bus.post(new ModelIndexOpenedEvent());
}",0.9891540130151844
93273,"public void storeProviderEnablement(final List<ApidocProvider> providers){
  final String[] disabledProviderNames=getDisabledProviderNames(providers);
  final String toSave=createString(disabledProviderNames);
  pluginPreferences.put(DISABLED_PROVIDERS,toSave);
  flush();
}","public void storeProviderEnablement(final List<ApidocProvider> providers){
  final String[] disabledProviderNames=getDisabledProviderNames(providers);
  final String toSave=Joiner.on(',').join(disabledProviderNames);
  pluginPreferences.put(DISABLED_PROVIDERS,toSave);
  flush();
}",0.9441441441441442
93274,"@Override public void run(){
  final Composite container=createComposite(parent,1);
  if (index.isEmpty()) {
    createLabel(container,Messages.EXTDOC_STATICHOCKS_NO_PUBLIC_STATIC_METHOD_FOUND,true);
  }
  final List<StyleRange> typeRanges=Lists.newLinkedList();
  final StringBuilder sb=new StringBuilder();
  for (  final IType type : index.keySet()) {
    final String typeLabel=type.getFullyQualifiedName();
    final int typeLabelBegin=sb.length();
    sb.append(typeLabel);
    final int typeLabelEnd=sb.length();
    final StyleRange styleRange=new StyleRange();
    styleRange.rise=-12;
    styleRange.start=typeLabelBegin;
    styleRange.length=typeLabelEnd - typeLabelBegin;
    styleRange.fontStyle=SWT.BOLD;
    styleRange.data=type;
    styleRange.font=JFaceResources.getHeaderFont();
    typeRanges.add(styleRange);
    sb.append(IOUtils.LINE_SEPARATOR);
    for (    final IMethod method : index.get(type)) {
      sb.append(""String_Node_Str"");
      final int methodLabelBegin=sb.length();
      final String methodLabel=getElementLabel(method,M_APP_RETURNTYPE | M_PARAMETER_TYPES);
      sb.append(methodLabel);
      final int methodLabelEnd=sb.length();
      final StyleRange methodStyleRange=new StyleRange();
      methodStyleRange.start=methodLabelBegin;
      methodStyleRange.length=methodLabelEnd - methodLabelBegin;
      methodStyleRange.data=method;
      methodStyleRange.underline=true;
      methodStyleRange.font=JFaceResources.getDialogFont();
      methodStyleRange.foreground=Display.getDefault().getSystemColor(SWT.COLOR_BLUE);
      typeRanges.add(methodStyleRange);
      sb.append(IOUtils.LINE_SEPARATOR);
    }
  }
  styledText=new StyledText(container,SWT.NONE);
  styledText.setRedraw(false);
  styledText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  setInfoBackgroundColor(styledText);
  setInfoForegroundColor(styledText);
  styledText.setEditable(false);
  styledText.setText(sb.toString());
  styledText.setStyleRanges(typeRanges.toArray(new StyleRange[0]));
  final Cursor c1=Display.getDefault().getSystemCursor(SWT.CURSOR_ARROW);
  final Cursor c2=Display.getDefault().getSystemCursor(SWT.CURSOR_HAND);
  styledText.addListener(SWT.MouseDown,new Listener(){
    @Override public void handleEvent(    final Event event){
      final Optional<IMethod> opt=getSelectedMethod(event.x,event.y);
      if (opt.isPresent()) {
        final JavaElementSelectionEvent sEvent=new JavaElementSelectionEvent(opt.get(),METHOD_DECLARATION);
        workspaceBus.post(sEvent);
      }
    }
  }
);
  styledText.addMouseMoveListener(new MouseMoveListener(){
    @Override public void mouseMove(    final MouseEvent e){
      final Optional<IMethod> opt=getSelectedMethod(e.x,e.y);
      if (opt.isPresent()) {
        styledText.setCursor(c2);
      }
 else {
        styledText.setCursor(c1);
      }
    }
  }
);
  styledText.addMouseTrackListener(new MouseTrackListener(){
    @Override public void mouseHover(    final MouseEvent e){
    }
    @Override public void mouseExit(    final MouseEvent e){
      System.out.println(e);
    }
    @Override public void mouseEnter(    final MouseEvent e){
      System.out.println(e);
    }
  }
);
  styledText.setRedraw(true);
}","@Override public void run(){
  final Composite container=createComposite(parent,1);
  if (index.isEmpty()) {
    createLabel(container,Messages.EXTDOC_STATICHOCKS_NO_PUBLIC_STATIC_METHOD_FOUND,true);
  }
  final List<StyleRange> typeRanges=Lists.newLinkedList();
  final StringBuilder sb=new StringBuilder();
  for (  final IType type : index.keySet()) {
    final String typeLabel=type.getFullyQualifiedName();
    final int typeLabelBegin=sb.length();
    sb.append(typeLabel);
    final int typeLabelEnd=sb.length();
    final StyleRange styleRange=new StyleRange();
    styleRange.rise=-12;
    styleRange.start=typeLabelBegin;
    styleRange.length=typeLabelEnd - typeLabelBegin;
    styleRange.fontStyle=SWT.BOLD;
    styleRange.data=type;
    styleRange.font=JFaceResources.getHeaderFont();
    typeRanges.add(styleRange);
    sb.append(IOUtils.LINE_SEPARATOR);
    for (    final IMethod method : index.get(type)) {
      sb.append(""String_Node_Str"");
      final int methodLabelBegin=sb.length();
      final String methodLabel=getElementLabel(method,M_APP_RETURNTYPE | M_PARAMETER_TYPES);
      sb.append(methodLabel);
      final int methodLabelEnd=sb.length();
      final StyleRange methodStyleRange=new StyleRange();
      methodStyleRange.start=methodLabelBegin;
      methodStyleRange.length=methodLabelEnd - methodLabelBegin;
      methodStyleRange.data=method;
      methodStyleRange.underline=true;
      methodStyleRange.font=JFaceResources.getDialogFont();
      methodStyleRange.foreground=Display.getDefault().getSystemColor(SWT.COLOR_BLUE);
      typeRanges.add(methodStyleRange);
      sb.append(IOUtils.LINE_SEPARATOR);
    }
  }
  styledText=new StyledText(container,SWT.NONE);
  styledText.setRedraw(false);
  styledText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  setInfoBackgroundColor(styledText);
  setInfoForegroundColor(styledText);
  styledText.setEditable(false);
  styledText.setText(sb.toString());
  styledText.setStyleRanges(typeRanges.toArray(new StyleRange[0]));
  final Cursor c1=Display.getDefault().getSystemCursor(SWT.CURSOR_ARROW);
  final Cursor c2=Display.getDefault().getSystemCursor(SWT.CURSOR_HAND);
  styledText.addListener(SWT.MouseDown,new Listener(){
    @Override public void handleEvent(    final Event event){
      final Optional<IMethod> opt=getSelectedMethod(event.x,event.y);
      if (opt.isPresent()) {
        final JavaElementSelectionEvent sEvent=new JavaElementSelectionEvent(opt.get(),METHOD_DECLARATION);
        workspaceBus.post(sEvent);
      }
    }
  }
);
  styledText.addMouseMoveListener(new MouseMoveListener(){
    @Override public void mouseMove(    final MouseEvent e){
      final Optional<IMethod> opt=getSelectedMethod(e.x,e.y);
      if (opt.isPresent()) {
        styledText.setCursor(c2);
      }
 else {
        styledText.setCursor(c1);
      }
    }
  }
);
  styledText.addMouseTrackListener(new MouseTrackListener(){
    @Override public void mouseHover(    final MouseEvent e){
    }
    @Override public void mouseExit(    final MouseEvent e){
    }
    @Override public void mouseEnter(    final MouseEvent e){
    }
  }
);
  styledText.setRedraw(true);
}",0.9909233176838812
93275,"@Override public void mouseExit(final MouseEvent e){
  System.out.println(e);
}","@Override public void mouseExit(final MouseEvent e){
}",0.8120300751879699
93276,"@Override public void mouseEnter(final MouseEvent e){
  System.out.println(e);
}","@Override public void mouseEnter(final MouseEvent e){
}",0.8148148148148148
93277,"public DefinitionKind getReceiverDefinitionType(){
  if (defKind == null) {
    findCalls();
    if (defKind == DefinitionKind.UNKNOWN) {
      IMethodName def=ctx.getMethodDef().orNull();
      if (def == null) {
        if (isReceiverNameImplicitThis() || isReceiverNameThis() || isReceiverNameSuper()) {
          defKind=THIS;
          setReceiverToSupertype();
        }
 else {
          defKind=FIELD;
        }
      }
 else       if (def != null) {
        defKind=RETURN;
        definedBy=def;
      }
    }
  }
  return defKind;
}","public DefinitionKind getReceiverDefinitionType(){
  if (defKind == null) {
    findCalls();
    if (defKind == DefinitionKind.UNKNOWN) {
      IMethodName def=ctx.getMethodDef().orNull();
      if (def == null) {
        if (isReceiverNameImplicitThis() || isReceiverNameThis() || isReceiverNameSuper()) {
          defKind=THIS;
          setReceiverToSupertype();
        }
 else {
          defKind=FIELD;
        }
      }
 else {
        defKind=RETURN;
        definedBy=def;
      }
    }
  }
  return defKind;
}",0.9783631232361242
93278,"public Set<IType> findTypesBySimpleName(char[] simpleTypeName){
  final Set<IType> result=Sets.newHashSet();
  try {
    final JavaProject project=(JavaProject)rCtx.getProject();
    SearchableEnvironment environment=project.newSearchableNameEnvironment(DefaultWorkingCopyOwner.PRIMARY);
    environment.findExactTypes(simpleTypeName,false,IJavaSearchConstants.TYPE,new ISearchRequestor(){
      @Override public void acceptConstructor(      int modifiers,      char[] simpleTypeName,      int parameterCount,      char[] signature,      char[][] parameterTypes,      char[][] parameterNames,      int typeModifiers,      char[] packageName,      int extraFlags,      String path,      AccessRestriction access){
      }
      @Override public void acceptType(      char[] packageName,      char[] typeName,      char[][] enclosingTypeNames,      int modifiers,      AccessRestriction accessRestriction){
        IType res;
        try {
          res=project.findType(String.valueOf(packageName),String.valueOf(typeName));
          if (res != null) {
            result.add(res);
          }
        }
 catch (        JavaModelException e) {
          e.printStackTrace();
        }
      }
      @Override public void acceptPackage(      char[] packageName){
      }
    }
);
  }
 catch (  JavaModelException e) {
    Throws.throwUnhandledException(e);
  }
  return result;
}","public Set<IType> findTypesBySimpleName(char[] simpleTypeName){
  final Set<IType> result=Sets.newHashSet();
  try {
    final JavaProject project=(JavaProject)rCtx.getProject();
    SearchableEnvironment environment=project.newSearchableNameEnvironment(DefaultWorkingCopyOwner.PRIMARY);
    environment.findExactTypes(simpleTypeName,false,IJavaSearchConstants.TYPE,new ISearchRequestor(){
      @Override public void acceptConstructor(      int modifiers,      char[] simpleTypeName,      int parameterCount,      char[] signature,      char[][] parameterTypes,      char[][] parameterNames,      int typeModifiers,      char[] packageName,      int extraFlags,      String path,      AccessRestriction access){
      }
      @Override public void acceptType(      char[] packageName,      char[] typeName,      char[][] enclosingTypeNames,      int modifiers,      AccessRestriction accessRestriction){
        IType res;
        try {
          res=project.findType(String.valueOf(packageName),String.valueOf(typeName));
          if (res != null) {
            result.add(res);
          }
        }
 catch (        JavaModelException e) {
          log.error(""String_Node_Str"",e);
        }
      }
      @Override public void acceptPackage(      char[] packageName){
      }
    }
);
  }
 catch (  JavaModelException e) {
    Throws.throwUnhandledException(e);
  }
  return result;
}",0.9851825081315504
93279,"@Override public void acceptType(char[] packageName,char[] typeName,char[][] enclosingTypeNames,int modifiers,AccessRestriction accessRestriction){
  IType res;
  try {
    res=project.findType(String.valueOf(packageName),String.valueOf(typeName));
    if (res != null) {
      result.add(res);
    }
  }
 catch (  JavaModelException e) {
    e.printStackTrace();
  }
}","@Override public void acceptType(char[] packageName,char[] typeName,char[][] enclosingTypeNames,int modifiers,AccessRestriction accessRestriction){
  IType res;
  try {
    res=project.findType(String.valueOf(packageName),String.valueOf(typeName));
    if (res != null) {
      result.add(res);
    }
  }
 catch (  JavaModelException e) {
    log.error(""String_Node_Str"",e);
  }
}",0.9425901201602136
93280,"@Override public Optional<ICallModel> acquireModel(UniqueTypeName key){
  try {
    ICallModel net=cache.get(key.getName());
    net.reset();
    return of(net);
  }
 catch (  ExecutionException e) {
    e.printStackTrace();
    return Optional.absent();
  }
}","@Override public Optional<ICallModel> acquireModel(UniqueTypeName key){
  try {
    ICallModel net=cache.get(key.getName());
    net.reset();
    return of(net);
  }
 catch (  ExecutionException e) {
    LOG.error(""String_Node_Str"" + key,e);
    return Optional.absent();
  }
}",0.9124767225325884
93281,"private boolean initializeRequiredContext(final ContentAssistInvocationContext context){
  JavaContentAssistInvocationContext jdtCtx=castOrNull(context);
  if (jdtCtx == null) {
    return false;
  }
  ctx=new RecommendersCompletionContext(jdtCtx,astProvider);
  if (ctx == null) {
    return false;
  }
  final Optional<Scope> optionalScope=ScopeAccessWorkaround.resolveScope(ctx);
  if (!optionalScope.isPresent()) {
    return false;
  }
  scope=optionalScope.get();
  return true;
}","private boolean initializeRequiredContext(final ContentAssistInvocationContext context){
  JavaContentAssistInvocationContext jdtCtx=castOrNull(context);
  if (jdtCtx == null) {
    return false;
  }
  ctx=new RecommendersCompletionContext(jdtCtx,astProvider);
  final Optional<Scope> optionalScope=ScopeAccessWorkaround.resolveScope(ctx);
  if (!optionalScope.isPresent()) {
    return false;
  }
  scope=optionalScope.get();
  return true;
}",0.9537136706135628
93282,"@Parameters public static Collection<Object[]> scenarios(){
  LinkedList<Object[]> scenarios=Lists.newLinkedList();
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  return scenarios;
}","@Parameters public static Collection<Object[]> scenarios(){
  LinkedList<Object[]> scenarios=Lists.newLinkedList();
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  return scenarios;
}",0.7410228509249184
93283,"@Parameters public static Collection<Object[]> scenarios(){
  LinkedList<Object[]> scenarios=Lists.newLinkedList();
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  return scenarios;
}","@Parameters public static Collection<Object[]> scenarios(){
  LinkedList<Object[]> scenarios=Lists.newLinkedList();
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  scenarios.add(new Object[]{""String_Node_Str"",""String_Node_Str""});
  return scenarios;
}",0.7410228509249184
93284,"private static String getExecutionEnvironmentId(final IJavaProject javaProject){
  try {
    for (    IClasspathEntry entry : javaProject.getRawClasspath()) {
      if (entry.getEntryKind() == IClasspathEntry.CPE_CONTAINER) {
        return JavaRuntime.getExecutionEnvironmentId(entry.getPath());
      }
    }
  }
 catch (  JavaModelException e) {
    e.printStackTrace();
  }
  return ""String_Node_Str"";
}","private static Optional<String> getExecutionEnvironmentId(final IJavaProject javaProject){
  try {
    for (    IClasspathEntry entry : javaProject.getRawClasspath()) {
      if (entry.getEntryKind() == IClasspathEntry.CPE_CONTAINER) {
        return fromNullable(JavaRuntime.getExecutionEnvironmentId(entry.getPath()));
      }
    }
    return absent();
  }
 catch (  JavaModelException e) {
    return absent();
  }
}",0.875453446191052
93285,"public static Optional<DependencyInfo> createJREDependencyInfo(final IJavaProject javaProject){
  String executionEnvironmentId=getExecutionEnvironmentId(javaProject);
  try {
    IVMInstall vmInstall=JavaRuntime.getVMInstall(javaProject);
    File javaHome=vmInstall.getInstallLocation();
    Map<String,String> attributes=Maps.newHashMap();
    attributes.put(DependencyInfo.EXECUTION_ENVIRONMENT,executionEnvironmentId);
    return fromNullable(new DependencyInfo(javaHome,DependencyType.JRE,attributes));
  }
 catch (  CoreException e) {
    return absent();
  }
}","public static Optional<DependencyInfo> createJREDependencyInfo(final IJavaProject javaProject){
  Optional<String> executionEnvironmentId=getExecutionEnvironmentId(javaProject);
  try {
    IVMInstall vmInstall=getVMInstall(javaProject);
    if (vmInstall == null) {
      return absent();
    }
    File javaHome=vmInstall.getInstallLocation();
    Map<String,String> hints=Maps.newHashMap();
    if (executionEnvironmentId.isPresent()) {
      hints.put(DependencyInfo.EXECUTION_ENVIRONMENT,executionEnvironmentId.get());
    }
    return of(new DependencyInfo(javaHome,DependencyType.JRE,hints));
  }
 catch (  CoreException e) {
    return absent();
  }
}",0.7302363488182559
93286,"private void registerDependencyForJAR(final JarPackageFragmentRoot root){
  Optional<IJavaProject> optionalJavaProject=getIJavaProjectForPackageFragmentRoot(root);
  if (!optionalJavaProject.isPresent()) {
    return;
  }
  IJavaProject javaProject=optionalJavaProject.get();
  DependencyInfo dependencyInfoForProject=createDependencyInfoForProject(javaProject);
  if (!isJREOfProjectIsKnown(dependencyInfoForProject)) {
    workspaceDependenciesByProject.removeAll(dependencyInfoForProject);
    registerDependenciesForJavaProject(javaProject);
  }
  if (!isPartOfTheJRE(root)) {
    DependencyInfo dependencyInfo=createDependencyInfoForJAR(root);
    workspaceDependenciesByProject.put(dependencyInfoForProject,dependencyInfo);
  }
}","private void registerDependencyForJAR(final JarPackageFragmentRoot root){
  Optional<IJavaProject> optionalJavaProject=getJavaProjectForPackageFragmentRoot(root);
  if (!optionalJavaProject.isPresent()) {
    return;
  }
  IJavaProject javaProject=optionalJavaProject.get();
  DependencyInfo dependencyInfoForProject=createDependencyInfoForProject(javaProject);
  if (!isJREOfProjectIsKnown(dependencyInfoForProject)) {
    workspaceDependenciesByProject.removeAll(dependencyInfoForProject);
    registerDependenciesForJavaProject(javaProject);
  }
  if (!isPartOfTheJRE(root)) {
    DependencyInfo dependencyInfo=createDependencyInfoForJAR(root);
    workspaceDependenciesByProject.put(dependencyInfoForProject,dependencyInfo);
  }
}",0.9993192648059904
93287,"private boolean isPartOfTheJRE(final IPackageFragmentRoot packageFragmentRoot){
  Optional<IJavaProject> optionalJavaProject=getIJavaProjectForPackageFragmentRoot(packageFragmentRoot);
  if (optionalJavaProject.isPresent()) {
    if (jrePackageFragmentRoots.containsEntry(createDependencyInfoForProject(optionalJavaProject.get()),packageFragmentRoot)) {
      return true;
    }
  }
  return false;
}","private boolean isPartOfTheJRE(final IPackageFragmentRoot pfr){
  Optional<IJavaProject> optionalJavaProject=getJavaProjectForPackageFragmentRoot(pfr);
  if (optionalJavaProject.isPresent()) {
    if (jrePackageFragmentRoots.containsEntry(createDependencyInfoForProject(optionalJavaProject.get()),pfr)) {
      return true;
    }
  }
  return false;
}",0.918774966711052
93288,"private void deregisterDependencyForJAR(final JarPackageFragmentRoot root){
  Optional<IJavaProject> optionalJavaProject=getIJavaProjectForPackageFragmentRoot(root);
  if (!optionalJavaProject.isPresent()) {
    return;
  }
  IJavaProject javaProject=optionalJavaProject.get();
  if (isPartOfTheJRE(root)) {
    deregisterJREDependenciesForProject(javaProject);
  }
 else {
    DependencyInfo dependencyInfo=createDependencyInfoForJAR(root);
    DependencyInfo projectDependencyInfo=createDependencyInfoForProject(javaProject);
    workspaceDependenciesByProject.remove(projectDependencyInfo,dependencyInfo);
    if (!workspaceDependenciesByProject.containsKey(projectDependencyInfo)) {
      jrePackageFragmentRoots.removeAll(projectDependencyInfo);
    }
  }
}","private void deregisterDependencyForJAR(final JarPackageFragmentRoot pfr){
  Optional<IJavaProject> optionalJavaProject=getJavaProjectForPackageFragmentRoot(pfr);
  if (!optionalJavaProject.isPresent()) {
    return;
  }
  IJavaProject javaProject=optionalJavaProject.get();
  if (isPartOfTheJRE(pfr)) {
    deregisterJREDependenciesForProject(javaProject);
  }
 else {
    DependencyInfo dependencyInfo=createDependencyInfoForJAR(pfr);
    DependencyInfo projectDependencyInfo=createDependencyInfoForProject(javaProject);
    workspaceDependenciesByProject.remove(projectDependencyInfo,dependencyInfo);
    if (!workspaceDependenciesByProject.containsKey(projectDependencyInfo)) {
      jrePackageFragmentRoots.removeAll(projectDependencyInfo);
    }
  }
}",0.9809084924292296
93289,"private DependencyInfo createDependencyInfoForJAR(final JarPackageFragmentRoot root){
  File file=root.getPath().toFile();
  DependencyInfo dependencyInfo=new DependencyInfo(file,DependencyType.JAR);
  return dependencyInfo;
}","private DependencyInfo createDependencyInfoForJAR(final JarPackageFragmentRoot pfr){
  File file=ensureIsNotNull(getLocation(pfr).orNull(),""String_Node_Str"",pfr);
  DependencyInfo dependencyInfo=new DependencyInfo(file,DependencyType.JAR);
  return dependencyInfo;
}",0.8170731707317073
93290,"public DependencyInfo(File file,DependencyType type,Map<String,String> hint){
  this.file=ensureIsNotNull(file);
  checkArgument(file.isAbsolute());
  this.type=type;
  hints=ensureIsNotNull(hint);
}","public DependencyInfo(File file,DependencyType type,Map<String,String> hint){
  this.file=ensureIsNotNull(file);
  ensureIsTrue(file.isAbsolute());
  this.type=type;
  hints=ensureIsNotNull(hint);
}",0.947103274559194
93291,"/** 
 * @return the given file or raises an exception
 */
public static File ensureExists(final File file){
  ensureIsNotNull(file);
  if (!file.exists()) {
    try {
      file.getCanonicalFile();
    }
 catch (    final IOException e) {
      e.printStackTrace();
    }
    throwIllegalArgumentException(""String_Node_Str"",file.getAbsolutePath());
  }
  return file;
}","/** 
 * @return the given file or raises an exception
 */
public static File ensureExists(final File file){
  ensureIsNotNull(file);
  if (!file.exists()) {
    throwIllegalArgumentException(""String_Node_Str"",file.getAbsolutePath());
  }
  return file;
}",0.8154093097913323
93292,"private void registerDependencyForJAR(final JarPackageFragmentRoot root){
  Optional<IJavaProject> optionalJavaProject=getIJavaProjectForPackageFragmentRoot(root);
  if (!optionalJavaProject.isPresent()) {
    return;
  }
  IJavaProject javaProject=optionalJavaProject.get();
  DependencyInfo dependencyInfoForProject=createDependencyInfoForProject(javaProject);
  if (!isJREOfProjectIsKnown(dependencyInfoForProject)) {
    workspaceDependenciesByProject.removeAll(dependencyInfoForProject);
    registerDependenciesForJavaProject(javaProject);
  }
  if (!isPartOfTheJRE(root)) {
    DependencyInfo dependencyInfo=createDependencyInfoForJAR(root);
    workspaceDependenciesByProject.put(dependencyInfoForProject,dependencyInfo);
  }
}","private void registerDependencyForJAR(final JarPackageFragmentRoot root){
  Optional<IJavaProject> optionalJavaProject=getJavaProjectForPackageFragmentRoot(root);
  if (!optionalJavaProject.isPresent()) {
    return;
  }
  IJavaProject javaProject=optionalJavaProject.get();
  DependencyInfo dependencyInfoForProject=createDependencyInfoForProject(javaProject);
  if (!isJREOfProjectIsKnown(dependencyInfoForProject)) {
    workspaceDependenciesByProject.removeAll(dependencyInfoForProject);
    registerDependenciesForJavaProject(javaProject);
  }
  if (!isPartOfTheJRE(root)) {
    DependencyInfo dependencyInfo=createDependencyInfoForJAR(root);
    workspaceDependenciesByProject.put(dependencyInfoForProject,dependencyInfo);
  }
}",0.9993192648059904
93293,"private boolean isPartOfTheJRE(final IPackageFragmentRoot packageFragmentRoot){
  Optional<IJavaProject> optionalJavaProject=getIJavaProjectForPackageFragmentRoot(packageFragmentRoot);
  if (optionalJavaProject.isPresent()) {
    if (jrePackageFragmentRoots.containsEntry(createDependencyInfoForProject(optionalJavaProject.get()),packageFragmentRoot)) {
      return true;
    }
  }
  return false;
}","private boolean isPartOfTheJRE(final IPackageFragmentRoot pfr){
  Optional<IJavaProject> optionalJavaProject=getJavaProjectForPackageFragmentRoot(pfr);
  if (optionalJavaProject.isPresent()) {
    if (jrePackageFragmentRoots.containsEntry(createDependencyInfoForProject(optionalJavaProject.get()),pfr)) {
      return true;
    }
  }
  return false;
}",0.918774966711052
93294,"private void deregisterDependencyForJAR(final JarPackageFragmentRoot root){
  Optional<IJavaProject> optionalJavaProject=getIJavaProjectForPackageFragmentRoot(root);
  if (!optionalJavaProject.isPresent()) {
    return;
  }
  IJavaProject javaProject=optionalJavaProject.get();
  if (isPartOfTheJRE(root)) {
    deregisterJREDependenciesForProject(javaProject);
  }
 else {
    DependencyInfo dependencyInfo=createDependencyInfoForJAR(root);
    DependencyInfo projectDependencyInfo=createDependencyInfoForProject(javaProject);
    workspaceDependenciesByProject.remove(projectDependencyInfo,dependencyInfo);
    if (!workspaceDependenciesByProject.containsKey(projectDependencyInfo)) {
      jrePackageFragmentRoots.removeAll(projectDependencyInfo);
    }
  }
}","private void deregisterDependencyForJAR(final JarPackageFragmentRoot pfr){
  Optional<IJavaProject> optionalJavaProject=getJavaProjectForPackageFragmentRoot(pfr);
  if (!optionalJavaProject.isPresent()) {
    return;
  }
  IJavaProject javaProject=optionalJavaProject.get();
  if (isPartOfTheJRE(pfr)) {
    deregisterJREDependenciesForProject(javaProject);
  }
 else {
    DependencyInfo dependencyInfo=createDependencyInfoForJAR(pfr);
    DependencyInfo projectDependencyInfo=createDependencyInfoForProject(javaProject);
    workspaceDependenciesByProject.remove(projectDependencyInfo,dependencyInfo);
    if (!workspaceDependenciesByProject.containsKey(projectDependencyInfo)) {
      jrePackageFragmentRoots.removeAll(projectDependencyInfo);
    }
  }
}",0.9809084924292296
93295,"private DependencyInfo createDependencyInfoForJAR(final JarPackageFragmentRoot root){
  File file=root.getPath().toFile();
  DependencyInfo dependencyInfo=new DependencyInfo(file,DependencyType.JAR);
  return dependencyInfo;
}","private DependencyInfo createDependencyInfoForJAR(final JarPackageFragmentRoot pfr){
  File file=ensureIsNotNull(getLocation(pfr).orNull(),""String_Node_Str"",pfr);
  DependencyInfo dependencyInfo=new DependencyInfo(file,DependencyType.JAR);
  return dependencyInfo;
}",0.8170731707317073
93296,"public DependencyInfo(File file,DependencyType type,Map<String,String> hint){
  this.file=ensureIsNotNull(file);
  checkArgument(file.isAbsolute());
  this.type=type;
  hints=ensureIsNotNull(hint);
}","public DependencyInfo(File file,DependencyType type,Map<String,String> hint){
  this.file=ensureIsNotNull(file);
  ensureIsTrue(file.isAbsolute());
  this.type=type;
  hints=ensureIsNotNull(hint);
}",0.947103274559194
93297,"/** 
 * @return the given file or raises an exception
 */
public static File ensureExists(final File file){
  ensureIsNotNull(file);
  if (!file.exists()) {
    try {
      file.getCanonicalFile();
    }
 catch (    final IOException e) {
      e.printStackTrace();
    }
    throwIllegalArgumentException(""String_Node_Str"",file.getAbsolutePath());
  }
  return file;
}","/** 
 * @return the given file or raises an exception
 */
public static File ensureExists(final File file){
  ensureIsNotNull(file);
  if (!file.exists()) {
    throwIllegalArgumentException(""String_Node_Str"",file.getAbsolutePath());
  }
  return file;
}",0.8154093097913323
93298,"public static DependencyInfo createDependencyInfoForProject(final IJavaProject project){
  File file=project.getPath().toFile();
  DependencyInfo dependencyInfo=new DependencyInfo(file,DependencyType.PROJECT);
  return dependencyInfo;
}","public static DependencyInfo createDependencyInfoForProject(final IJavaProject project){
  File file=workspace.findMember(project.getPath()).getLocation().toFile();
  DependencyInfo dependencyInfo=new DependencyInfo(file,DependencyType.PROJECT);
  return dependencyInfo;
}",0.9291338582677166
93299,"@Override protected void configure(){
  bind(IProjectCoordinateProvider.class).to(ProjectCoordinateProvider.class).in(Scopes.SINGLETON);
  bind(IModelRepository.class).to(EclipseModelRepository.class).in(Scopes.SINGLETON);
  bind(ManualMappingStrategy.class).in(Scopes.SINGLETON);
  bindRepository();
  createAndBindNamedFile(""String_Node_Str"",MANUAL_MAPPINGS);
  createAndBindNamedFile(""String_Node_Str"",IDENTIFIED_PACKAGE_FRAGMENT_ROOTS);
}","@Override protected void configure(){
  requestStaticInjection(Dependencies.class);
  bind(IProjectCoordinateProvider.class).to(ProjectCoordinateProvider.class).in(Scopes.SINGLETON);
  bind(IModelRepository.class).to(EclipseModelRepository.class).in(Scopes.SINGLETON);
  bind(ManualMappingStrategy.class).in(Scopes.SINGLETON);
  bindRepository();
  createAndBindNamedFile(""String_Node_Str"",MANUAL_MAPPINGS);
  createAndBindNamedFile(""String_Node_Str"",IDENTIFIED_PACKAGE_FRAGMENT_ROOTS);
}",0.9505376344086022
93300,"@Override public String getColumnText(final Object obj,final int index){
  if (obj instanceof DependencyInfo) {
    DependencyInfo dependencyInfo=(DependencyInfo)obj;
switch (index) {
case COLUMN_LOCATION:
      if (dependencyInfo.getType() == DependencyType.JRE) {
        Optional<String> executionEnvironment=dependencyInfo.getAttribute(DependencyInfo.EXECUTION_ENVIRONMENT);
        if (executionEnvironment.isPresent()) {
          return executionEnvironment.get();
        }
      }
    return dependencyInfo.getFile().getName();
case COLUMN_COORDINATE:
  Optional<ProjectCoordinate> optionalProjectCoordinate=mappingProvider.searchForProjectCoordinate(dependencyInfo);
if (optionalProjectCoordinate.isPresent()) {
  return optionalProjectCoordinate.get().toString();
}
default :
return ""String_Node_Str"";
}
}
return ""String_Node_Str"";
}","@Override public String getColumnText(final Object obj,final int index){
  if (obj instanceof DependencyInfo) {
    DependencyInfo dependencyInfo=(DependencyInfo)obj;
switch (index) {
case COLUMN_LOCATION:
      if (dependencyInfo.getType() == DependencyType.JRE) {
        Optional<String> executionEnvironment=dependencyInfo.getHint(DependencyInfo.EXECUTION_ENVIRONMENT);
        if (executionEnvironment.isPresent()) {
          return executionEnvironment.get();
        }
      }
    return dependencyInfo.getFile().getName();
case COLUMN_COORDINATE:
  Optional<ProjectCoordinate> optionalProjectCoordinate=mappingProvider.searchForProjectCoordinate(dependencyInfo);
if (optionalProjectCoordinate.isPresent()) {
  return optionalProjectCoordinate.get().toString();
}
default :
return ""String_Node_Str"";
}
}
return ""String_Node_Str"";
}",0.9922756981580512
93301,"@Override public int hashCode(){
  return new HashCodeBuilder().append(file).append(type).append(attributes).toHashCode();
}","@Override public int hashCode(){
  return new HashCodeBuilder().append(file).append(type).append(hints).toHashCode();
}",0.9547325102880658
93302,"@Override public boolean equals(Object obj){
  if (obj instanceof DependencyInfo) {
    final DependencyInfo other=(DependencyInfo)obj;
    return new EqualsBuilder().append(file,other.file).append(type,other.type).append(attributes,other.attributes).isEquals();
  }
 else {
    return false;
  }
}","@Override public boolean equals(Object obj){
  if (obj instanceof DependencyInfo) {
    final DependencyInfo other=(DependencyInfo)obj;
    return new EqualsBuilder().append(file,other.file).append(type,other.type).append(hints,other.hints).isEquals();
  }
 else {
    return false;
  }
}",0.955631399317406
93303,"@Override public String toString(){
  return Objects.toStringHelper(""String_Node_Str"").addValue(file).addValue(type).addValue(attributes).toString();
}","@Override public String toString(){
  return Objects.toStringHelper(""String_Node_Str"").addValue(file).addValue(type).addValue(hints).toString();
}",0.9629629629629628
93304,"public DependencyInfo(File file,DependencyType type,Map<String,String> attributes){
  this.file=file;
  this.type=type;
  this.attributes=Checks.ensureIsNotNull(attributes);
}","public DependencyInfo(File file,DependencyType type,Map<String,String> hint){
  this.file=ensureIsNotNull(file);
  checkArgument(file.isAbsolute());
  this.type=type;
  this.hints=ensureIsNotNull(hint);
}",0.5013192612137203
93305,"@Override protected Optional<ProjectCoordinate> extractProjectCoordinateInternal(DependencyInfo dependencyInfo){
  Optional<String> optionalExecutionEnvironment=dependencyInfo.getAttribute(DependencyInfo.EXECUTION_ENVIRONMENT);
  if (optionalExecutionEnvironment.isPresent()) {
    ProjectCoordinate projectCoordinate=lookUpTable.get(optionalExecutionEnvironment.get());
    if (projectCoordinate != null) {
      return fromNullable(projectCoordinate);
    }
  }
  return absent();
}","@Override protected Optional<ProjectCoordinate> extractProjectCoordinateInternal(DependencyInfo dependencyInfo){
  String optionalExecutionEnvironment=dependencyInfo.getHint(DependencyInfo.EXECUTION_ENVIRONMENT).orNull();
  if (optionalExecutionEnvironment != null) {
    ProjectCoordinate projectCoordinate=lookUpTable.get(optionalExecutionEnvironment);
    if (projectCoordinate != null) {
      return fromNullable(projectCoordinate);
    }
  }
  return absent();
}",0.9390756302521008
93306,"@Test public void returnAbsentWhenNoMappingExist() throws IOException {
  ManualMappingStrategy sut=new ManualMappingStrategy(createPersistenceFile());
  Optional<ProjectCoordinate> projectCoordinate=sut.searchForProjectCoordinate(EXAMPLE_DEPENDENCY_INFO);
  assertFalse(projectCoordinate.isPresent());
  sut.close();
}","@Test public void returnAbsentWhenNoMappingExist() throws IOException {
  ManualMappingStrategy sut=new ManualMappingStrategy(persistenceFile);
  Optional<ProjectCoordinate> projectCoordinate=sut.searchForProjectCoordinate(exampleDependencyInfo);
  assertFalse(projectCoordinate.isPresent());
  sut.close();
}",0.7420382165605095
93307,"@Test public void returnManualMappingsCorrectForMoreMappings() throws IOException {
  ManualMappingStrategy sut=new ManualMappingStrategy(createPersistenceFile());
  sut.setManualMapping(EXAMPLE_DEPENDENCY_INFO,EXPECTED_PROJECT_COORDINATE);
  sut.setManualMapping(ANOTHER_EXAMPLE_DEPENDENCY_INFO,ANOTHER_EXPECTED_PROJECT_COORDINATE);
  Optional<ProjectCoordinate> projectCoordinate=sut.searchForProjectCoordinate(EXAMPLE_DEPENDENCY_INFO);
  assertEquals(EXPECTED_PROJECT_COORDINATE,projectCoordinate.get());
  Optional<ProjectCoordinate> anotherProjectCoordinate=sut.searchForProjectCoordinate(ANOTHER_EXAMPLE_DEPENDENCY_INFO);
  assertEquals(ANOTHER_EXPECTED_PROJECT_COORDINATE,anotherProjectCoordinate.get());
  sut.close();
}","@Test public void returnManualMappingsCorrectForMoreMappings() throws IOException {
  ManualMappingStrategy sut=new ManualMappingStrategy(persistenceFile);
  sut.setManualMapping(exampleDependencyInfo,EXPECTED_PROJECT_COORDINATE);
  sut.setManualMapping(anotherExampleDependencyInfo,ANOTHER_EXPECTED_PROJECT_COORDINATE);
  Optional<ProjectCoordinate> projectCoordinate=sut.searchForProjectCoordinate(exampleDependencyInfo);
  assertEquals(EXPECTED_PROJECT_COORDINATE,projectCoordinate.get());
  Optional<ProjectCoordinate> anotherProjectCoordinate=sut.searchForProjectCoordinate(anotherExampleDependencyInfo);
  assertEquals(ANOTHER_EXPECTED_PROJECT_COORDINATE,anotherProjectCoordinate.get());
  sut.close();
}",0.8247566063977747
93308,"@Test public void returnManualMappingCorrect() throws IOException {
  ManualMappingStrategy sut=new ManualMappingStrategy(createPersistenceFile());
  sut.setManualMapping(EXAMPLE_DEPENDENCY_INFO,EXPECTED_PROJECT_COORDINATE);
  Optional<ProjectCoordinate> projectCoordinate=sut.searchForProjectCoordinate(EXAMPLE_DEPENDENCY_INFO);
  assertEquals(EXPECTED_PROJECT_COORDINATE,projectCoordinate.get());
  sut.close();
}","@Test public void returnManualMappingCorrect() throws IOException {
  ManualMappingStrategy sut=new ManualMappingStrategy(persistenceFile);
  sut.setManualMapping(exampleDependencyInfo,EXPECTED_PROJECT_COORDINATE);
  Optional<ProjectCoordinate> projectCoordinate=sut.searchForProjectCoordinate(exampleDependencyInfo);
  assertEquals(EXPECTED_PROJECT_COORDINATE,projectCoordinate.get());
  sut.close();
}",0.8850855745721271
93309,"@Test public void storageOfManualMappingsWorksCorrect() throws IOException {
  File persistenceFile=createPersistenceFile();
  ManualMappingStrategy sut=new ManualMappingStrategy(persistenceFile);
  sut.open();
  sut.setManualMapping(EXAMPLE_DEPENDENCY_INFO,EXPECTED_PROJECT_COORDINATE);
  sut.setManualMapping(ANOTHER_EXAMPLE_DEPENDENCY_INFO,ANOTHER_EXPECTED_PROJECT_COORDINATE);
  sut.close();
  sut=new ManualMappingStrategy(persistenceFile);
  sut.open();
  Optional<ProjectCoordinate> projectCoordinate=sut.searchForProjectCoordinate(EXAMPLE_DEPENDENCY_INFO);
  assertEquals(EXPECTED_PROJECT_COORDINATE,projectCoordinate.get());
  Optional<ProjectCoordinate> anotherProjectCoordinate=sut.searchForProjectCoordinate(ANOTHER_EXAMPLE_DEPENDENCY_INFO);
  assertEquals(ANOTHER_EXPECTED_PROJECT_COORDINATE,anotherProjectCoordinate.get());
  sut.close();
}","@Test public void storageOfManualMappingsWorksCorrect() throws IOException {
  ManualMappingStrategy sut=new ManualMappingStrategy(persistenceFile);
  sut.setManualMapping(exampleDependencyInfo,EXPECTED_PROJECT_COORDINATE);
  sut.setManualMapping(anotherExampleDependencyInfo,ANOTHER_EXPECTED_PROJECT_COORDINATE);
  sut.close();
  sut=new ManualMappingStrategy(persistenceFile);
  sut.open();
  Optional<ProjectCoordinate> projectCoordinate=sut.searchForProjectCoordinate(exampleDependencyInfo);
  assertEquals(EXPECTED_PROJECT_COORDINATE,projectCoordinate.get());
  Optional<ProjectCoordinate> anotherProjectCoordinate=sut.searchForProjectCoordinate(anotherExampleDependencyInfo);
  assertEquals(ANOTHER_EXPECTED_PROJECT_COORDINATE,anotherProjectCoordinate.get());
  sut.close();
}",0.706601466992665
93310,"@Test public void testInvalidDependencyType(){
  FingerprintStrategy sut=new FingerprintStrategy(null);
  sut.searchForProjectCoordinate(new DependencyInfo(null,DependencyType.PROJECT));
}","@Test public void testInvalidDependencyType(){
  FingerprintStrategy sut=new FingerprintStrategy(null);
  sut.searchForProjectCoordinate(new DependencyInfo(exampleFile,DependencyType.PROJECT));
}",0.9712793733681462
93311,"@Test public void testMissingInformation() throws IOException {
  File jar=folder.newFile(""String_Node_Str"");
  SimpleIndexSearcher mockedIndexer=mock(SimpleIndexSearcher.class);
  when(mockedIndexer.searchByFingerprint(Fingerprints.sha1(jar))).thenReturn(fromNullable(""String_Node_Str""));
  FingerprintStrategy sut=new FingerprintStrategy(mockedIndexer);
  Optional<ProjectCoordinate> optionalProjectCoordinate=sut.searchForProjectCoordinate(new DependencyInfo(jar,DependencyType.JAR));
  Assert.assertFalse(optionalProjectCoordinate.isPresent());
}","@Test public void testMissingInformation() throws IOException {
  SimpleIndexSearcher mockedIndexer=mock(SimpleIndexSearcher.class);
  when(mockedIndexer.searchByFingerprint(Fingerprints.sha1(exampleFile))).thenReturn(fromNullable(""String_Node_Str""));
  FingerprintStrategy sut=new FingerprintStrategy(mockedIndexer);
  Optional<ProjectCoordinate> optionalProjectCoordinate=sut.searchForProjectCoordinate(new DependencyInfo(exampleFile,DependencyType.JAR));
  Assert.assertFalse(optionalProjectCoordinate.isPresent());
}",0.5626168224299065
93312,"@Test public void testValidJAR() throws IOException {
  File jar=folder.newFile(""String_Node_Str"");
  SimpleIndexSearcher mockedIndexer=mock(SimpleIndexSearcher.class);
  when(mockedIndexer.searchByFingerprint(Fingerprints.sha1(jar))).thenReturn(Optional.fromNullable(""String_Node_Str""));
  FingerprintStrategy sut=new FingerprintStrategy(mockedIndexer);
  Optional<ProjectCoordinate> optionalProjectCoordinate=sut.searchForProjectCoordinate(new DependencyInfo(jar,DependencyType.JAR));
  Assert.assertEquals(EXPECTED_PROJECT_COORDINATE,optionalProjectCoordinate.get());
}","@Test public void testValidJAR() throws IOException {
  SimpleIndexSearcher mockedIndexer=mock(SimpleIndexSearcher.class);
  when(mockedIndexer.searchByFingerprint(Fingerprints.sha1(exampleFile))).thenReturn(Optional.fromNullable(""String_Node_Str""));
  FingerprintStrategy sut=new FingerprintStrategy(mockedIndexer);
  Optional<ProjectCoordinate> optionalProjectCoordinate=sut.searchForProjectCoordinate(new DependencyInfo(exampleFile,DependencyType.JAR));
  Assert.assertEquals(EXPECTED_PROJECT_COORDINATE,optionalProjectCoordinate.get());
}",0.5637342908438061
93313,"private Collection<IMethodName> getCallsForDefinition(final ICallModel model,final IMethodName definition){
  boolean constructorAdded=false;
  final TreeSet<IMethodName> calls=Sets.newTreeSet();
  final List<Recommendation<IMethodName>> rec=Recommendations.top(model.recommendCalls(),100,0.1d);
  if (rec.isEmpty()) {
    return Collections.emptyList();
  }
  if (requiresConstructor && definition.isInit()) {
    calls.add(definition);
    constructorAdded=true;
  }
  if (requiresConstructor && !constructorAdded) {
    return Collections.emptyList();
  }
  for (  final Recommendation<IMethodName> pair : rec) {
    calls.add(pair.getProposal());
  }
  if (!containsCallWithMethodPrefix(calls)) {
    return Collections.emptyList();
  }
  return calls;
}","private Collection<IMethodName> getCallsForDefinition(final ICallModel model,final IMethodName definition){
  boolean constructorAdded=false;
  final TreeSet<IMethodName> calls=Sets.newTreeSet();
  final List<Recommendation<IMethodName>> rec=Recommendations.top(model.recommendCalls(),100,0.1d);
  if (rec.isEmpty()) {
    return Lists.newLinkedList();
  }
  if (requiresConstructor && definition.isInit()) {
    calls.add(definition);
    constructorAdded=true;
  }
  if (requiresConstructor && !constructorAdded) {
    return Lists.newLinkedList();
  }
  for (  final Recommendation<IMethodName> pair : rec) {
    calls.add(pair.getProposal());
  }
  if (!containsCallWithMethodPrefix(calls)) {
    return Lists.newLinkedList();
  }
  return calls;
}",0.9364238410596026
93314,"public static DependencyInfo createDependencyInfoForProject(final IJavaProject project){
  File file=project.getPath().toFile();
  DependencyInfo dependencyInfo=new DependencyInfo(file,DependencyType.PROJECT);
  return dependencyInfo;
}","public static DependencyInfo createDependencyInfoForProject(final IJavaProject project){
  File file=workspace.findMember(project.getPath()).getLocation().toFile();
  DependencyInfo dependencyInfo=new DependencyInfo(file,DependencyType.PROJECT);
  return dependencyInfo;
}",0.9291338582677166
93315,"@Override protected void configure(){
  bind(IProjectCoordinateProvider.class).to(ProjectCoordinateProvider.class).in(Scopes.SINGLETON);
  bind(IModelRepository.class).to(EclipseModelRepository.class).in(Scopes.SINGLETON);
  bind(ManualMappingStrategy.class).in(Scopes.SINGLETON);
  bindRepository();
  createAndBindNamedFile(""String_Node_Str"",MANUAL_MAPPINGS);
  createAndBindNamedFile(""String_Node_Str"",IDENTIFIED_PACKAGE_FRAGMENT_ROOTS);
}","@Override protected void configure(){
  requestStaticInjection(Dependencies.class);
  bind(IProjectCoordinateProvider.class).to(ProjectCoordinateProvider.class).in(Scopes.SINGLETON);
  bind(IModelRepository.class).to(EclipseModelRepository.class).in(Scopes.SINGLETON);
  bind(ManualMappingStrategy.class).in(Scopes.SINGLETON);
  bindRepository();
  createAndBindNamedFile(""String_Node_Str"",MANUAL_MAPPINGS);
  createAndBindNamedFile(""String_Node_Str"",IDENTIFIED_PACKAGE_FRAGMENT_ROOTS);
}",0.9505376344086022
93316,"@Override public String getColumnText(final Object obj,final int index){
  if (obj instanceof DependencyInfo) {
    DependencyInfo dependencyInfo=(DependencyInfo)obj;
switch (index) {
case COLUMN_LOCATION:
      if (dependencyInfo.getType() == DependencyType.JRE) {
        Optional<String> executionEnvironment=dependencyInfo.getAttribute(DependencyInfo.EXECUTION_ENVIRONMENT);
        if (executionEnvironment.isPresent()) {
          return executionEnvironment.get();
        }
      }
    return dependencyInfo.getFile().getName();
case COLUMN_COORDINATE:
  Optional<ProjectCoordinate> optionalProjectCoordinate=mappingProvider.searchForProjectCoordinate(dependencyInfo);
if (optionalProjectCoordinate.isPresent()) {
  return optionalProjectCoordinate.get().toString();
}
default :
return ""String_Node_Str"";
}
}
return ""String_Node_Str"";
}","@Override public String getColumnText(final Object obj,final int index){
  if (obj instanceof DependencyInfo) {
    DependencyInfo dependencyInfo=(DependencyInfo)obj;
switch (index) {
case COLUMN_LOCATION:
      if (dependencyInfo.getType() == DependencyType.JRE) {
        Optional<String> executionEnvironment=dependencyInfo.getHint(DependencyInfo.EXECUTION_ENVIRONMENT);
        if (executionEnvironment.isPresent()) {
          return executionEnvironment.get();
        }
      }
    return dependencyInfo.getFile().getName();
case COLUMN_COORDINATE:
  Optional<ProjectCoordinate> optionalProjectCoordinate=mappingProvider.searchForProjectCoordinate(dependencyInfo);
if (optionalProjectCoordinate.isPresent()) {
  return optionalProjectCoordinate.get().toString();
}
default :
return ""String_Node_Str"";
}
}
return ""String_Node_Str"";
}",0.9922756981580512
93317,"@Override public int hashCode(){
  return new HashCodeBuilder().append(file).append(type).append(attributes).toHashCode();
}","@Override public int hashCode(){
  return new HashCodeBuilder().append(file).append(type).append(hints).toHashCode();
}",0.9547325102880658
93318,"@Override public boolean equals(Object obj){
  if (obj instanceof DependencyInfo) {
    final DependencyInfo other=(DependencyInfo)obj;
    return new EqualsBuilder().append(file,other.file).append(type,other.type).append(attributes,other.attributes).isEquals();
  }
 else {
    return false;
  }
}","@Override public boolean equals(Object obj){
  if (obj instanceof DependencyInfo) {
    final DependencyInfo other=(DependencyInfo)obj;
    return new EqualsBuilder().append(file,other.file).append(type,other.type).append(hints,other.hints).isEquals();
  }
 else {
    return false;
  }
}",0.955631399317406
93319,"@Override public String toString(){
  return Objects.toStringHelper(""String_Node_Str"").addValue(file).addValue(type).addValue(attributes).toString();
}","@Override public String toString(){
  return Objects.toStringHelper(""String_Node_Str"").addValue(file).addValue(type).addValue(hints).toString();
}",0.9629629629629628
93320,"public DependencyInfo(File file,DependencyType type,Map<String,String> attributes){
  this.file=file;
  this.type=type;
  this.attributes=Checks.ensureIsNotNull(attributes);
}","public DependencyInfo(File file,DependencyType type,Map<String,String> hint){
  this.file=ensureIsNotNull(file);
  checkArgument(file.isAbsolute());
  this.type=type;
  this.hints=ensureIsNotNull(hint);
}",0.5013192612137203
93321,"@Override protected Optional<ProjectCoordinate> extractProjectCoordinateInternal(DependencyInfo dependencyInfo){
  Optional<String> optionalExecutionEnvironment=dependencyInfo.getAttribute(DependencyInfo.EXECUTION_ENVIRONMENT);
  if (optionalExecutionEnvironment.isPresent()) {
    ProjectCoordinate projectCoordinate=lookUpTable.get(optionalExecutionEnvironment.get());
    if (projectCoordinate != null) {
      return fromNullable(projectCoordinate);
    }
  }
  return absent();
}","@Override protected Optional<ProjectCoordinate> extractProjectCoordinateInternal(DependencyInfo dependencyInfo){
  String optionalExecutionEnvironment=dependencyInfo.getHint(DependencyInfo.EXECUTION_ENVIRONMENT).orNull();
  if (optionalExecutionEnvironment != null) {
    ProjectCoordinate projectCoordinate=lookUpTable.get(optionalExecutionEnvironment);
    if (projectCoordinate != null) {
      return fromNullable(projectCoordinate);
    }
  }
  return absent();
}",0.9390756302521008
93322,"@Test public void returnAbsentWhenNoMappingExist() throws IOException {
  ManualMappingStrategy sut=new ManualMappingStrategy(createPersistenceFile());
  Optional<ProjectCoordinate> projectCoordinate=sut.searchForProjectCoordinate(EXAMPLE_DEPENDENCY_INFO);
  assertFalse(projectCoordinate.isPresent());
  sut.close();
}","@Test public void returnAbsentWhenNoMappingExist() throws IOException {
  ManualMappingStrategy sut=new ManualMappingStrategy(persistenceFile);
  Optional<ProjectCoordinate> projectCoordinate=sut.searchForProjectCoordinate(exampleDependencyInfo);
  assertFalse(projectCoordinate.isPresent());
  sut.close();
}",0.7420382165605095
93323,"@Test public void returnManualMappingsCorrectForMoreMappings() throws IOException {
  ManualMappingStrategy sut=new ManualMappingStrategy(createPersistenceFile());
  sut.setManualMapping(EXAMPLE_DEPENDENCY_INFO,EXPECTED_PROJECT_COORDINATE);
  sut.setManualMapping(ANOTHER_EXAMPLE_DEPENDENCY_INFO,ANOTHER_EXPECTED_PROJECT_COORDINATE);
  Optional<ProjectCoordinate> projectCoordinate=sut.searchForProjectCoordinate(EXAMPLE_DEPENDENCY_INFO);
  assertEquals(EXPECTED_PROJECT_COORDINATE,projectCoordinate.get());
  Optional<ProjectCoordinate> anotherProjectCoordinate=sut.searchForProjectCoordinate(ANOTHER_EXAMPLE_DEPENDENCY_INFO);
  assertEquals(ANOTHER_EXPECTED_PROJECT_COORDINATE,anotherProjectCoordinate.get());
  sut.close();
}","@Test public void returnManualMappingsCorrectForMoreMappings() throws IOException {
  ManualMappingStrategy sut=new ManualMappingStrategy(persistenceFile);
  sut.setManualMapping(exampleDependencyInfo,EXPECTED_PROJECT_COORDINATE);
  sut.setManualMapping(anotherExampleDependencyInfo,ANOTHER_EXPECTED_PROJECT_COORDINATE);
  Optional<ProjectCoordinate> projectCoordinate=sut.searchForProjectCoordinate(exampleDependencyInfo);
  assertEquals(EXPECTED_PROJECT_COORDINATE,projectCoordinate.get());
  Optional<ProjectCoordinate> anotherProjectCoordinate=sut.searchForProjectCoordinate(anotherExampleDependencyInfo);
  assertEquals(ANOTHER_EXPECTED_PROJECT_COORDINATE,anotherProjectCoordinate.get());
  sut.close();
}",0.8247566063977747
93324,"@Test public void returnManualMappingCorrect() throws IOException {
  ManualMappingStrategy sut=new ManualMappingStrategy(createPersistenceFile());
  sut.setManualMapping(EXAMPLE_DEPENDENCY_INFO,EXPECTED_PROJECT_COORDINATE);
  Optional<ProjectCoordinate> projectCoordinate=sut.searchForProjectCoordinate(EXAMPLE_DEPENDENCY_INFO);
  assertEquals(EXPECTED_PROJECT_COORDINATE,projectCoordinate.get());
  sut.close();
}","@Test public void returnManualMappingCorrect() throws IOException {
  ManualMappingStrategy sut=new ManualMappingStrategy(persistenceFile);
  sut.setManualMapping(exampleDependencyInfo,EXPECTED_PROJECT_COORDINATE);
  Optional<ProjectCoordinate> projectCoordinate=sut.searchForProjectCoordinate(exampleDependencyInfo);
  assertEquals(EXPECTED_PROJECT_COORDINATE,projectCoordinate.get());
  sut.close();
}",0.8850855745721271
93325,"@Test public void storageOfManualMappingsWorksCorrect() throws IOException {
  File persistenceFile=createPersistenceFile();
  ManualMappingStrategy sut=new ManualMappingStrategy(persistenceFile);
  sut.open();
  sut.setManualMapping(EXAMPLE_DEPENDENCY_INFO,EXPECTED_PROJECT_COORDINATE);
  sut.setManualMapping(ANOTHER_EXAMPLE_DEPENDENCY_INFO,ANOTHER_EXPECTED_PROJECT_COORDINATE);
  sut.close();
  sut=new ManualMappingStrategy(persistenceFile);
  sut.open();
  Optional<ProjectCoordinate> projectCoordinate=sut.searchForProjectCoordinate(EXAMPLE_DEPENDENCY_INFO);
  assertEquals(EXPECTED_PROJECT_COORDINATE,projectCoordinate.get());
  Optional<ProjectCoordinate> anotherProjectCoordinate=sut.searchForProjectCoordinate(ANOTHER_EXAMPLE_DEPENDENCY_INFO);
  assertEquals(ANOTHER_EXPECTED_PROJECT_COORDINATE,anotherProjectCoordinate.get());
  sut.close();
}","@Test public void storageOfManualMappingsWorksCorrect() throws IOException {
  ManualMappingStrategy sut=new ManualMappingStrategy(persistenceFile);
  sut.setManualMapping(exampleDependencyInfo,EXPECTED_PROJECT_COORDINATE);
  sut.setManualMapping(anotherExampleDependencyInfo,ANOTHER_EXPECTED_PROJECT_COORDINATE);
  sut.close();
  sut=new ManualMappingStrategy(persistenceFile);
  sut.open();
  Optional<ProjectCoordinate> projectCoordinate=sut.searchForProjectCoordinate(exampleDependencyInfo);
  assertEquals(EXPECTED_PROJECT_COORDINATE,projectCoordinate.get());
  Optional<ProjectCoordinate> anotherProjectCoordinate=sut.searchForProjectCoordinate(anotherExampleDependencyInfo);
  assertEquals(ANOTHER_EXPECTED_PROJECT_COORDINATE,anotherProjectCoordinate.get());
  sut.close();
}",0.706601466992665
93326,"@Test public void testInvalidDependencyType(){
  FingerprintStrategy sut=new FingerprintStrategy(null);
  sut.searchForProjectCoordinate(new DependencyInfo(null,DependencyType.PROJECT));
}","@Test public void testInvalidDependencyType(){
  FingerprintStrategy sut=new FingerprintStrategy(null);
  sut.searchForProjectCoordinate(new DependencyInfo(exampleFile,DependencyType.PROJECT));
}",0.9712793733681462
93327,"@Test public void testMissingInformation() throws IOException {
  File jar=folder.newFile(""String_Node_Str"");
  SimpleIndexSearcher mockedIndexer=mock(SimpleIndexSearcher.class);
  when(mockedIndexer.searchByFingerprint(Fingerprints.sha1(jar))).thenReturn(fromNullable(""String_Node_Str""));
  FingerprintStrategy sut=new FingerprintStrategy(mockedIndexer);
  Optional<ProjectCoordinate> optionalProjectCoordinate=sut.searchForProjectCoordinate(new DependencyInfo(jar,DependencyType.JAR));
  Assert.assertFalse(optionalProjectCoordinate.isPresent());
}","@Test public void testMissingInformation() throws IOException {
  SimpleIndexSearcher mockedIndexer=mock(SimpleIndexSearcher.class);
  when(mockedIndexer.searchByFingerprint(Fingerprints.sha1(exampleFile))).thenReturn(fromNullable(""String_Node_Str""));
  FingerprintStrategy sut=new FingerprintStrategy(mockedIndexer);
  Optional<ProjectCoordinate> optionalProjectCoordinate=sut.searchForProjectCoordinate(new DependencyInfo(exampleFile,DependencyType.JAR));
  Assert.assertFalse(optionalProjectCoordinate.isPresent());
}",0.5626168224299065
93328,"@Test public void testValidJAR() throws IOException {
  File jar=folder.newFile(""String_Node_Str"");
  SimpleIndexSearcher mockedIndexer=mock(SimpleIndexSearcher.class);
  when(mockedIndexer.searchByFingerprint(Fingerprints.sha1(jar))).thenReturn(Optional.fromNullable(""String_Node_Str""));
  FingerprintStrategy sut=new FingerprintStrategy(mockedIndexer);
  Optional<ProjectCoordinate> optionalProjectCoordinate=sut.searchForProjectCoordinate(new DependencyInfo(jar,DependencyType.JAR));
  Assert.assertEquals(EXPECTED_PROJECT_COORDINATE,optionalProjectCoordinate.get());
}","@Test public void testValidJAR() throws IOException {
  SimpleIndexSearcher mockedIndexer=mock(SimpleIndexSearcher.class);
  when(mockedIndexer.searchByFingerprint(Fingerprints.sha1(exampleFile))).thenReturn(Optional.fromNullable(""String_Node_Str""));
  FingerprintStrategy sut=new FingerprintStrategy(mockedIndexer);
  Optional<ProjectCoordinate> optionalProjectCoordinate=sut.searchForProjectCoordinate(new DependencyInfo(exampleFile,DependencyType.JAR));
  Assert.assertEquals(EXPECTED_PROJECT_COORDINATE,optionalProjectCoordinate.get());
}",0.5637342908438061
93329,"private void appendNumberOfCompletionsByCompletionKind(){
  Bag<ProposalKind> b=TreeBag.newTreeBag();
  for (  final ProposalKind kind : ProposalKind.values()) {
    Collection<CompletionEvent> byKind=Collections2.filter(events,new Predicate<CompletionEvent>(){
      @Override public boolean apply(      CompletionEvent input){
        return kind == input.applied;
      }
    }
);
    if (byKind.size() > 0) {
      b.add(kind,byKind.size());
    }
  }
  styledString.append(""String_Node_Str"");
  for (  ProposalKind kind : b.topElements(20)) {
    styledString.append(""String_Node_Str"").append(kind.toString().toLowerCase().replace('_',' ')).append(""String_Node_Str"").append(b.count(kind) + ""String_Node_Str"",COUNTER_STYLER).append(""String_Node_Str"");
  }
}","private void appendNumberOfCompletionsByCompletionKind(){
  Bag<ProposalKind> b=TreeBag.newTreeBag();
  for (  final ProposalKind kind : ProposalKind.values()) {
    Collection<CompletionEvent> byKind=Collections2.filter(okayEvents,new Predicate<CompletionEvent>(){
      @Override public boolean apply(      CompletionEvent input){
        return kind == input.applied;
      }
    }
);
    if (byKind.size() > 0) {
      b.add(kind,byKind.size());
    }
  }
  styledString.append(""String_Node_Str"");
  for (  ProposalKind kind : b.topElements(20)) {
    styledString.append(""String_Node_Str"").append(kind.toString().toLowerCase().replace('_',' ')).append(""String_Node_Str"").append(b.count(kind) + ""String_Node_Str"",COUNTER_STYLER).append(""String_Node_Str"");
  }
}",0.9960681520314548
93330,"private void appendTimeSpent(){
  ArrayDoubleList spent=new ArrayDoubleList();
  for (  CompletionEvent e : events) {
    long ms=e.sessionEnded - e.sessionStarted;
    if (ms > MAX_TIME_IN_COMPLETION) {
      ms=MAX_TIME_IN_COMPLETION;
    }
    spent.add(ms);
  }
  int total=(int)StatUtils.sum(spent.toArray());
  double mean=StatUtils.mean(spent.toArray());
  styledString.append(""String_Node_Str"").append(format(""String_Node_Str"",MILLISECONDS.toMinutes(total),MILLISECONDS.toSeconds(total) - MINUTES.toSeconds(MILLISECONDS.toMinutes(total))),COUNTER_STYLER).append(""String_Node_Str"");
  styledString.append(""String_Node_Str"").append(format(""String_Node_Str"",mean),COUNTER_STYLER).append(""String_Node_Str"");
}","private void appendTimeSpent(){
  ArrayDoubleList spentApplied=computeTimeSpentInCompletion(appliedEvents);
  long totalApplied=round(sum(spentApplied.toArray()));
  long meanApplied=round(mean(spentApplied.toArray()));
  ArrayDoubleList spentAborted=computeTimeSpentInCompletion(abortedEvents);
  long totalAborted=round(sum(spentAborted.toArray()));
  long meanAborted=round(mean(spentAborted.toArray()));
  styledString.append(""String_Node_Str"").append(""String_Node_Str"").append(toTimeString(totalApplied),COUNTER_STYLER).append(""String_Node_Str"").append(toTimeString(totalAborted),COUNTER_STYLER);
  styledString.append(""String_Node_Str"").append(""String_Node_Str"").append(format(""String_Node_Str"",meanApplied),COUNTER_STYLER).append(""String_Node_Str"").append(format(""String_Node_Str"",meanAborted),COUNTER_STYLER).append(""String_Node_Str"");
}",0.2272143774069319
93331,"private void loadEvents(){
  File log=StatisticsSessionProcessor.getCompletionLogLocation();
  Gson gson=StatisticsSessionProcessor.getCompletionLogSerializer();
  events=Lists.newLinkedList();
  try {
    for (    String json : Files.readLines(log,Charsets.UTF_8)) {
      CompletionEvent event=gson.fromJson(json,CompletionEvent.class);
      events.add(event);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","private void loadEvents(){
  File log=StatisticsSessionProcessor.getCompletionLogLocation();
  Gson gson=StatisticsSessionProcessor.getCompletionLogSerializer();
  LinkedList<CompletionEvent> events=Lists.newLinkedList();
  try {
    for (    String json : Files.readLines(log,Charsets.UTF_8)) {
      CompletionEvent event=gson.fromJson(json,CompletionEvent.class);
      events.add(event);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  buggyEvents=Collections2.filter(events,new BuggyEventsPredicate());
  okayEvents=Collections2.filter(events,not(new BuggyEventsPredicate()));
  appliedEvents=Collections2.filter(okayEvents,new HasAppliedProposalPredicate());
  abortedEvents=Collections2.filter(okayEvents,not(new HasAppliedProposalPredicate()));
}",0.7153526970954357
93332,"private void setDescription(){
  String date=""String_Node_Str"";
  if (events.size() > 0) {
    Date start=new Date(events.get(0).sessionStarted);
    date=format(""String_Node_Str"",start);
  }
  setDescription(""String_Node_Str"" + date + ""String_Node_Str"");
}","private void setDescription(){
  String date=""String_Node_Str"";
  if (okayEvents.size() > 0) {
    Date start=new Date(Iterables.getFirst(okayEvents,null).sessionStarted);
    date=format(""String_Node_Str"",start);
  }
  setDescription(""String_Node_Str"" + date + ""String_Node_Str"");
}",0.9222222222222224
93333,"private void appendNumberOfCompletionsByReceiverType(){
  styledString.append(""String_Node_Str"").append(""String_Node_Str"");
  Bag<ITypeName> b=TreeBag.newTreeBag();
  for (  CompletionEvent e : events) {
    if (e.receiverType == null) {
      continue;
    }
    b.add(e.receiverType);
  }
  for (  ITypeName type : b.topElements(20)) {
    styledString.append(""String_Node_Str"").append(Names.vm2srcQualifiedType(type)).append(""String_Node_Str"").append(b.count(type) + ""String_Node_Str"",COUNTER_STYLER).append(""String_Node_Str"");
  }
}","private void appendNumberOfCompletionsByReceiverType(){
  styledString.append(""String_Node_Str"").append(""String_Node_Str"");
  Bag<ITypeName> b=TreeBag.newTreeBag();
  for (  CompletionEvent e : okayEvents) {
    if (e.receiverType == null) {
      continue;
    }
    b.add(e.receiverType);
  }
  for (  ITypeName type : b.topElements(20)) {
    styledString.append(""String_Node_Str"").append(Names.vm2srcQualifiedType(type)).append(""String_Node_Str"").append(b.count(type) + ""String_Node_Str"",COUNTER_STYLER).append(""String_Node_Str"");
  }
}",0.9944237918215614
93334,"private void appendNumberOfKeystrokesSaved(){
  ArrayDoubleList strokes=new ArrayDoubleList();
  for (  CompletionEvent e : events) {
    if (e.applied == null || e.completion == null) {
      continue;
    }
    int prefix=e.prefix == null ? 0 : e.prefix.length();
    int saved=Math.max(0,e.completion.length() - prefix);
    strokes.add(saved);
  }
  double total=StatUtils.sum(strokes.toArray());
  styledString.append(""String_Node_Str"").append(format(""String_Node_Str"",total),COUNTER_STYLER).append(""String_Node_Str"");
  double mean=StatUtils.mean(strokes.toArray());
  styledString.append(""String_Node_Str"").append(format(""String_Node_Str"",mean),COUNTER_STYLER);
}","private void appendNumberOfKeystrokesSaved(){
  ArrayDoubleList strokes=new ArrayDoubleList();
  for (  CompletionEvent e : appliedEvents) {
    int prefix=e.prefix == null ? 0 : e.prefix.length();
    int completionLength=e.completion == null ? 0 : e.completion.length();
    int saved=Math.max(0,completionLength - prefix);
    strokes.add(saved);
  }
  double total=sum(strokes.toArray());
  styledString.append(""String_Node_Str"").append(format(""String_Node_Str"",total),COUNTER_STYLER).append(""String_Node_Str"");
  double mean=mean(strokes.toArray());
  styledString.append(""String_Node_Str"").append(format(""String_Node_Str"",mean),COUNTER_STYLER);
}",0.8411497730711044
93335,"private void appendNumberOfCompletionEvents(){
  int total=0;
  int selected=0;
  for (  CompletionEvent e : events) {
    total+=e.numberOfProposals;
    selected+=e.applied != null ? 1 : 0;
  }
  styledString.append(""String_Node_Str"").append(format(""String_Node_Str"",events.size()),COUNTER_STYLER).append(""String_Node_Str"");
  int aborted=events.size() - selected;
  styledString.append(""String_Node_Str"").append(total + ""String_Node_Str"",COUNTER_STYLER).append(""String_Node_Str"");
  styledString.append(""String_Node_Str"").append(aborted + ""String_Node_Str"",COUNTER_STYLER).append(""String_Node_Str"");
  styledString.append(""String_Node_Str"").append(selected + ""String_Node_Str"",COUNTER_STYLER).append(""String_Node_Str"");
}","private void appendNumberOfCompletionEvents(){
  int total=0;
  for (  CompletionEvent e : okayEvents) {
    total+=e.numberOfProposals;
  }
  int selected=appliedEvents.size();
  styledString.append(""String_Node_Str"").append(format(""String_Node_Str"",okayEvents.size()),COUNTER_STYLER).append(""String_Node_Str"");
  int aborted=abortedEvents.size();
  styledString.append(""String_Node_Str"").append(total + ""String_Node_Str"",COUNTER_STYLER).append(""String_Node_Str"");
  styledString.append(""String_Node_Str"").append(aborted + ""String_Node_Str"",COUNTER_STYLER).append(""String_Node_Str"");
  styledString.append(""String_Node_Str"").append(selected + ""String_Node_Str"",COUNTER_STYLER).append(""String_Node_Str"");
}",0.9244755244755244
93336,"@Override public void applied(ICompletionProposal proposal){
  event.sessionEnded=System.currentTimeMillis();
  if (proposal instanceof IProcessableProposal) {
    IProcessableProposal p=(IProcessableProposal)proposal;
    CompletionProposal coreProposal=p.getCoreProposal().orNull();
    if (coreProposal != null) {
      event.prefix=p.getPrefix();
      event.applied=toKind(coreProposal.getKind());
      event.completion=new String(coreProposal.getCompletion());
    }
  }
 else   if (proposal instanceof AbstractJavaCompletionProposal) {
    event.applied=ProposalKind.UNKNOWN;
  }
  flushCurrentEvent();
}","@Override public void applied(ICompletionProposal proposal){
  event.sessionEnded=System.currentTimeMillis();
  if (proposal instanceof IProcessableProposal) {
    IProcessableProposal p=(IProcessableProposal)proposal;
    CompletionProposal coreProposal=p.getCoreProposal().orNull();
    if (coreProposal != null) {
      event.prefix=p.getPrefix();
      event.applied=toKind(coreProposal.getKind());
      event.completion=new String(coreProposal.getCompletion());
      if (ProposalKind.UNKNOWN == event.applied && isEmpty(event.completion)) {
        event.error=coreProposal.toString();
      }
    }
  }
 else   if (proposal instanceof AbstractJavaCompletionProposal) {
    event.applied=ProposalKind.UNKNOWN;
  }
  flushCurrentEvent();
}",0.7693441414885778
93337,"@Override public void startSession(IRecommendersCompletionContext ctx){
  flushCurrentEvent();
  event=new CompletionEvent();
  event.sessionStarted=event.sessionEnded=System.currentTimeMillis();
  event.completionKind=ctx.getCompletionNode().or(NULL).getClass().getSimpleName();
  IType receiverType=ctx.getReceiverType().orNull();
  if (receiverType != null) {
    event.receiverType=resolver.toRecType(receiverType);
  }
  event.prefix=ctx.getPrefix();
}","@Override public void startSession(IRecommendersCompletionContext ctx){
  flushCurrentEvent();
  event=new CompletionEvent();
  event.sessionStarted=System.currentTimeMillis();
  event.completionKind=ctx.getCompletionNode().or(NULL).getClass().getSimpleName();
  IType receiverType=ctx.getReceiverType().orNull();
  if (receiverType != null) {
    event.receiverType=resolver.toRecType(receiverType);
  }
  event.prefix=ctx.getPrefix();
}",0.9787709497206704
93338,"public static boolean haveSameParameterTypes(final List<SingleVariableDeclaration> jdtParams,final ITypeName[] crParams){
  for (int i=crParams.length; i-- > 0; ) {
    Type jdtParam=jdtParams.get(i).getType();
    jdtParam=getBaseType(jdtParam);
    final ITypeName crParam=crParams[i];
    if (jdtParam.isArrayType()) {
      if (!crParam.isArrayType()) {
        return false;
      }
      final ArrayType jdtArrayType=(ArrayType)jdtParam;
      final int jdtDimensions=jdtArrayType.getDimensions();
      final int crDimensions=crParam.getArrayDimensions();
      if (jdtDimensions != crDimensions) {
        return false;
      }
      return !sameSimpleName(getBaseType(jdtArrayType),crParam.getArrayBaseType());
    }
    if (jdtParam.isPrimitiveType()) {
      continue;
    }
    if (jdtParam.isSimpleType() && !sameSimpleName(jdtParam,crParam)) {
      return false;
    }
  }
  return true;
}","public static boolean haveSameParameterTypes(final List<SingleVariableDeclaration> jdtParams,final ITypeName[] crParams){
  for (int i=crParams.length; i-- > 0; ) {
    Type jdtParam=jdtParams.get(i).getType();
    jdtParam=getBaseType(jdtParam);
    final ITypeName crParam=crParams[i];
    if (jdtParam.isArrayType()) {
      if (!crParam.isArrayType()) {
        return false;
      }
      final ArrayType jdtArrayType=(ArrayType)jdtParam;
      final int jdtDimensions=jdtArrayType.getDimensions();
      final int crDimensions=crParam.getArrayDimensions();
      if (jdtDimensions != crDimensions) {
        return false;
      }
      return !sameSimpleName(getBaseType(jdtArrayType),crParam.getArrayBaseType());
    }
    if (jdtParam.isPrimitiveType()) {
      continue;
    }
    if (!sameSimpleName(jdtParam,crParam)) {
      return false;
    }
  }
  return true;
}",0.979225154407636
93339,"public static boolean haveSameParameterTypes(final List<SingleVariableDeclaration> jdtParams,final ITypeName[] crParams){
  for (int i=crParams.length; i-- > 0; ) {
    Type jdtParam=jdtParams.get(i).getType();
    jdtParam=getBaseType(jdtParam);
    final ITypeName crParam=crParams[i];
    if (jdtParam.isArrayType()) {
      if (!crParam.isArrayType()) {
        return false;
      }
      final ArrayType jdtArrayType=(ArrayType)jdtParam;
      final int jdtDimensions=jdtArrayType.getDimensions();
      final int crDimensions=crParam.getArrayDimensions();
      if (jdtDimensions != crDimensions) {
        return false;
      }
      return !sameSimpleName(getBaseType(jdtArrayType),crParam.getArrayBaseType());
    }
    if (jdtParam.isPrimitiveType()) {
      continue;
    }
    if (jdtParam.isSimpleType() && !sameSimpleName(jdtParam,crParam)) {
      return false;
    }
  }
  return true;
}","public static boolean haveSameParameterTypes(final List<SingleVariableDeclaration> jdtParams,final ITypeName[] crParams){
  for (int i=crParams.length; i-- > 0; ) {
    Type jdtParam=jdtParams.get(i).getType();
    jdtParam=getBaseType(jdtParam);
    final ITypeName crParam=crParams[i];
    if (jdtParam.isArrayType()) {
      if (!crParam.isArrayType()) {
        return false;
      }
      final ArrayType jdtArrayType=(ArrayType)jdtParam;
      final int jdtDimensions=jdtArrayType.getDimensions();
      final int crDimensions=crParam.getArrayDimensions();
      if (jdtDimensions != crDimensions) {
        return false;
      }
      return !sameSimpleName(getBaseType(jdtArrayType),crParam.getArrayBaseType());
    }
    if (jdtParam.isPrimitiveType()) {
      continue;
    }
    if (!sameSimpleName(jdtParam,crParam)) {
      return false;
    }
  }
  return true;
}",0.979225154407636
93340,"@Override public Optional<IType> getEnclosingType(){
  final IJavaElement enclosing=getEnclosingElement().orNull();
  if (enclosing instanceof IType) {
    return of((IType)enclosing);
  }
 else {
    return absent();
  }
}","@Override public Optional<IType> getEnclosingType(){
  final IJavaElement enclosing=getEnclosingElement().orNull();
  if (enclosing instanceof IType) {
    return of((IType)enclosing);
  }
 else   if (enclosing instanceof IField) {
    return of(((IField)enclosing).getDeclaringType());
  }
 else {
    return absent();
  }
}",0.8138686131386861
93341,"@Override public Optional<IType> getEnclosingType(){
  final IJavaElement enclosing=getEnclosingElement().orNull();
  if (enclosing instanceof IType) {
    return of((IType)enclosing);
  }
 else {
    return absent();
  }
}","@Override public Optional<IType> getEnclosingType(){
  final IJavaElement enclosing=getEnclosingElement().orNull();
  if (enclosing instanceof IType) {
    return of((IType)enclosing);
  }
 else   if (enclosing instanceof IField) {
    return of(((IField)enclosing).getDeclaringType());
  }
 else {
    return absent();
  }
}",0.8138686131386861
93342,"public void open(){
  if (store.exists()) {
    mappings=GsonUtil.deserialize(store,new TypeToken<Map<File,ModelArchiveMetadata<K,V>>>(){
    }
.getType());
  }
  if (mappings == null) {
    mappings=Maps.newHashMap();
  }
}","public void open(){
  if (store.exists()) {
    try {
      mappings=deserializeMapping();
    }
 catch (    final Exception e) {
      log.warn(""String_Node_Str"" + store + ""String_Node_Str"",e);
    }
  }
  if (mappings == null) {
    mappings=Maps.newHashMap();
  }
}",0.524390243902439
93343,"public static IllegalStateException throwUnhandledException(final Exception cause,final String msg,final Object... args){
  final String formattedMessage=format(msg,args);
  throw new IllegalStateException(formattedMessage,cause);
}","public static RuntimeException throwUnhandledException(final Exception cause,final String msg,final Object... args){
  final String formattedMessage=format(msg,args);
  throw new RuntimeException(formattedMessage,cause);
}",0.9251101321585904
93344,"public static void serialize(final Object obj,final File dest){
  ensureIsNotNull(obj,""String_Node_Str"");
  ensureIsNotNull(dest,""String_Node_Str"");
  Writer fw=null;
  try {
    fw=new BufferedWriter(new FileWriter(dest));
    getInstance().toJson(obj,fw);
  }
 catch (  final IOException x) {
    throwUnhandledException(x);
  }
 finally {
    IOUtils.closeQuietly(fw);
  }
}","public static void serialize(final Object obj,final OutputStream out){
  ensureIsNotNull(obj);
  ensureIsNotNull(out);
  Writer writer=null;
  try {
    writer=new OutputStreamWriter(out,""String_Node_Str"");
    getInstance().toJson(obj,writer);
  }
 catch (  final Exception e) {
    throw throwUnhandledException(e);
  }
 finally {
    IOUtils.closeQuietly(writer);
  }
}",0.5901201602136181
93345,"public static <T>List<T> deserializeZip(File zip,Class<T> classOfT) throws IOException {
  List<T> res=Lists.newLinkedList();
  ZipInputStream zis=null;
  try {
    InputSupplier<FileInputStream> fis=Files.newInputStreamSupplier(zip);
    zis=new ZipInputStream(fis.getInput());
    ZipEntry entry;
    while ((entry=zis.getNextEntry()) != null) {
      if (!entry.isDirectory()) {
        final InputStreamReader reader=new InputStreamReader(zis);
        final T data=getInstance().fromJson(reader,classOfT);
        res.add(data);
      }
    }
  }
  finally {
    Closeables.closeQuietly(zis);
  }
  return res;
}","public static <T>List<T> deserializeZip(File zip,Class<T> classOfT) throws IOException {
  List<T> res=Lists.newLinkedList();
  ZipInputStream zis=null;
  try {
    InputSupplier<FileInputStream> fis=Files.newInputStreamSupplier(zip);
    zis=new ZipInputStream(fis.getInput());
    ZipEntry entry;
    while ((entry=zis.getNextEntry()) != null) {
      if (!entry.isDirectory()) {
        res.add(GsonUtil.<T>deserialize(zis,classOfT));
      }
    }
  }
  finally {
    Closeables.closeQuietly(zis);
  }
  return res;
}",0.8629173989455184
93346,"public static <T>T deserialize(final File jsonFile,final Type classOfT){
  ensureIsNotNull(jsonFile);
  ensureIsNotNull(classOfT);
  InputStream fis;
  try {
    fis=new BufferedInputStream(new FileInputStream(jsonFile));
  }
 catch (  final FileNotFoundException e) {
    throw Throws.throwUnhandledException(e,""String_Node_Str"" + jsonFile.getAbsolutePath());
  }
  return deserialize(fis,classOfT);
}","public static <T>T deserialize(final File jsonFile,final Type classOfT){
  ensureIsNotNull(jsonFile);
  ensureIsNotNull(classOfT);
  InputStream in=null;
  try {
    in=new BufferedInputStream(new FileInputStream(jsonFile));
    return deserialize(in,classOfT);
  }
 catch (  final Exception e) {
    throw throwUnhandledException(e);
  }
 finally {
    IOUtils.closeQuietly(in);
  }
}",0.7496823379923762
93347,"public void open(){
  if (store.exists()) {
    mappings=GsonUtil.deserialize(store,new TypeToken<Map<File,ModelArchiveMetadata<K,V>>>(){
    }
.getType());
  }
  if (mappings == null) {
    mappings=Maps.newHashMap();
  }
}","public void open(){
  if (store.exists()) {
    try {
      mappings=deserializeMapping();
    }
 catch (    final Exception e) {
      log.warn(""String_Node_Str"" + store + ""String_Node_Str"",e);
    }
  }
  if (mappings == null) {
    mappings=Maps.newHashMap();
  }
}",0.524390243902439
93348,"public static IllegalStateException throwUnhandledException(final Exception cause,final String msg,final Object... args){
  final String formattedMessage=format(msg,args);
  throw new IllegalStateException(formattedMessage,cause);
}","public static RuntimeException throwUnhandledException(final Exception cause,final String msg,final Object... args){
  final String formattedMessage=format(msg,args);
  throw new RuntimeException(formattedMessage,cause);
}",0.9251101321585904
93349,"public static void serialize(final Object obj,final File dest){
  ensureIsNotNull(obj,""String_Node_Str"");
  ensureIsNotNull(dest,""String_Node_Str"");
  Writer fw=null;
  try {
    fw=new BufferedWriter(new FileWriter(dest));
    getInstance().toJson(obj,fw);
  }
 catch (  final IOException x) {
    throwUnhandledException(x);
  }
 finally {
    IOUtils.closeQuietly(fw);
  }
}","public static void serialize(final Object obj,final OutputStream out){
  ensureIsNotNull(obj);
  ensureIsNotNull(out);
  Writer writer=null;
  try {
    writer=new OutputStreamWriter(out,""String_Node_Str"");
    getInstance().toJson(obj,writer);
  }
 catch (  final Exception e) {
    throw throwUnhandledException(e);
  }
 finally {
    IOUtils.closeQuietly(writer);
  }
}",0.5901201602136181
93350,"public static <T>List<T> deserializeZip(File zip,Class<T> classOfT) throws IOException {
  List<T> res=Lists.newLinkedList();
  ZipInputStream zis=null;
  try {
    InputSupplier<FileInputStream> fis=Files.newInputStreamSupplier(zip);
    zis=new ZipInputStream(fis.getInput());
    ZipEntry entry;
    while ((entry=zis.getNextEntry()) != null) {
      if (!entry.isDirectory()) {
        final InputStreamReader reader=new InputStreamReader(zis);
        final T data=getInstance().fromJson(reader,classOfT);
        res.add(data);
      }
    }
  }
  finally {
    Closeables.closeQuietly(zis);
  }
  return res;
}","public static <T>List<T> deserializeZip(File zip,Class<T> classOfT) throws IOException {
  List<T> res=Lists.newLinkedList();
  ZipInputStream zis=null;
  try {
    InputSupplier<FileInputStream> fis=Files.newInputStreamSupplier(zip);
    zis=new ZipInputStream(fis.getInput());
    ZipEntry entry;
    while ((entry=zis.getNextEntry()) != null) {
      if (!entry.isDirectory()) {
        res.add(GsonUtil.<T>deserialize(zis,classOfT));
      }
    }
  }
  finally {
    Closeables.closeQuietly(zis);
  }
  return res;
}",0.8629173989455184
93351,"public static <T>T deserialize(final File jsonFile,final Type classOfT){
  ensureIsNotNull(jsonFile);
  ensureIsNotNull(classOfT);
  InputStream fis;
  try {
    fis=new BufferedInputStream(new FileInputStream(jsonFile));
  }
 catch (  final FileNotFoundException e) {
    throw Throws.throwUnhandledException(e,""String_Node_Str"" + jsonFile.getAbsolutePath());
  }
  return deserialize(fis,classOfT);
}","public static <T>T deserialize(final File jsonFile,final Type classOfT){
  ensureIsNotNull(jsonFile);
  ensureIsNotNull(classOfT);
  InputStream in=null;
  try {
    in=new BufferedInputStream(new FileInputStream(jsonFile));
    return deserialize(in,classOfT);
  }
 catch (  final Exception e) {
    throw throwUnhandledException(e);
  }
 finally {
    IOUtils.closeQuietly(in);
  }
}",0.7496823379923762
93352,"@Override public List<MatchNode> search(String query){
  List<MatchNode> result=new ArrayList<MatchNode>();
  List<PatternRankResult> rankResult=new ArrayList<PatternRankResult>();
  if (query.trim().equals(""String_Node_Str""))   return result;
  if (sfMapList != null && sfMapList.size() > 0)   for (  SummaryFileMap map : sfMapList) {
    String summary=map.summary;
    rankQuery(summary.toLowerCase(),query.toLowerCase(),map.filePath,rankResult);
  }
  sortRankResult(rankResult);
  for (int k=0; k < Math.min(15,rankResult.size()); k++) {
    File jsonFile=new File(rankResult.get(k).getFilePath());
    if (jsonFile.exists()) {
      Effect parent=GsonUtil.deserialize(jsonFile,Effect.class);
      parent.setId(System.currentTimeMillis() + String.valueOf(Math.random()).substring(5));
      MatchNode[] children=new MatchNode[parent.getParameters().length];
      if (rankResult.get(k).isInOrder()) {
        this.values.clear();
        parseParameterValues(rankResult.get(k).getPattern(),query);
      }
      for (int i=0; i < children.length; i++) {
        EffectParameter param=parent.getParameters()[i];
        String keyName=param.getName().toLowerCase();
        if (values.get(keyName) != null)         param.setValue(values.get(keyName));
        ArgumentMatchNode childNode=new ArgumentMatchNode(param.getName(),param);
        children[i]=childNode;
      }
      result.add(new EffectMatchNode(parent,rankResult.get(k).getPattern(),children));
    }
  }
  return result;
}","@Override public List<MatchNode> search(String query){
  List<MatchNode> result=new ArrayList<MatchNode>();
  List<PatternRankResult> rankResult=new ArrayList<PatternRankResult>();
  if (query.trim().equals(""String_Node_Str""))   return result;
  if (sfMapList != null && sfMapList.size() > 0)   for (  SummaryFileMap map : sfMapList) {
    String summary=map.summary;
    rankQuery(summary.toLowerCase(),query.toLowerCase(),map.filePath,rankResult);
  }
  sortRankResult(rankResult);
  for (int k=0; k < Math.min(15,rankResult.size()); k++) {
    File jsonFile=new File(rankResult.get(k).getFilePath());
    if (jsonFile.exists()) {
      Effect parent=GsonUtil.deserialize(jsonFile,Effect.class);
      parent.setId(System.currentTimeMillis() + String.valueOf(Math.random()).substring(5));
      MatchNode[] children=new MatchNode[parent.getParameters().length];
      this.values.clear();
      if (rankResult.get(k).isInOrder()) {
        parseParameterValues(rankResult.get(k).getPattern(),query);
      }
      for (int i=0; i < children.length; i++) {
        EffectParameter param=parent.getParameters()[i];
        String keyName=param.getName().toLowerCase();
        if (values.get(keyName) != null)         param.setValue(values.get(keyName));
        ArgumentMatchNode childNode=new ArgumentMatchNode(param.getName(),param);
        children[i]=childNode;
      }
      result.add(new EffectMatchNode(parent,rankResult.get(k).getPattern(),children));
    }
  }
  return result;
}",0.9812332439678284
93353,"@Override public List<MatchNode> search(String query){
  List<MatchNode> result=new ArrayList<MatchNode>();
  List<PatternRankResult> rankResult=new ArrayList<PatternRankResult>();
  if (query.trim().equals(""String_Node_Str""))   return result;
  if (sfMapList != null && sfMapList.size() > 0)   for (  SummaryFileMap map : sfMapList) {
    String summary=map.summary;
    rankQuery(summary.toLowerCase(),query.toLowerCase(),map.filePath,rankResult);
  }
  sortRankResult(rankResult);
  for (int k=0; k < Math.min(15,rankResult.size()); k++) {
    File jsonFile=new File(rankResult.get(k).getFilePath());
    if (jsonFile.exists()) {
      Effect parent=GsonUtil.deserialize(jsonFile,Effect.class);
      parent.setId(System.currentTimeMillis() + String.valueOf(Math.random()).substring(5));
      MatchNode[] children=new MatchNode[parent.getParameters().length];
      if (rankResult.get(k).isInOrder()) {
        this.values.clear();
        parseParameterValues(rankResult.get(k).getPattern(),query);
      }
      for (int i=0; i < children.length; i++) {
        EffectParameter param=parent.getParameters()[i];
        String keyName=param.getName().toLowerCase();
        if (values.get(keyName) != null)         param.setValue(values.get(keyName));
        ArgumentMatchNode childNode=new ArgumentMatchNode(param.getName(),param);
        children[i]=childNode;
      }
      result.add(new EffectMatchNode(parent,rankResult.get(k).getPattern(),children));
    }
  }
  return result;
}","@Override public List<MatchNode> search(String query){
  List<MatchNode> result=new ArrayList<MatchNode>();
  List<PatternRankResult> rankResult=new ArrayList<PatternRankResult>();
  if (query.trim().equals(""String_Node_Str""))   return result;
  if (sfMapList != null && sfMapList.size() > 0)   for (  SummaryFileMap map : sfMapList) {
    String summary=map.summary;
    rankQuery(summary.toLowerCase(),query.toLowerCase(),map.filePath,rankResult);
  }
  sortRankResult(rankResult);
  for (int k=0; k < Math.min(15,rankResult.size()); k++) {
    File jsonFile=new File(rankResult.get(k).getFilePath());
    if (jsonFile.exists()) {
      Effect parent=GsonUtil.deserialize(jsonFile,Effect.class);
      parent.setId(System.currentTimeMillis() + String.valueOf(Math.random()).substring(5));
      MatchNode[] children=new MatchNode[parent.getParameters().length];
      this.values.clear();
      if (rankResult.get(k).isInOrder()) {
        parseParameterValues(rankResult.get(k).getPattern(),query);
      }
      for (int i=0; i < children.length; i++) {
        EffectParameter param=parent.getParameters()[i];
        String keyName=param.getName().toLowerCase();
        if (values.get(keyName) != null)         param.setValue(values.get(keyName));
        ArgumentMatchNode childNode=new ArgumentMatchNode(param.getName(),param);
        children[i]=childNode;
      }
      result.add(new EffectMatchNode(parent,rankResult.get(k).getPattern(),children));
    }
  }
  return result;
}",0.9812332439678284
93354,"private void initalizeCollector(){
  if (shouldFillArgumentNames()) {
    collector=new FillArgumentNamesCompletionProposalCollector(jdtuiContext);
  }
 else {
    collector=new CompletionProposalCollector(jdtuiContext.getCompilationUnit(),false);
  }
  collector.setIgnored(ANNOTATION_ATTRIBUTE_REF,false);
  collector.setIgnored(ANONYMOUS_CLASS_DECLARATION,false);
  collector.setIgnored(ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION,false);
  collector.setIgnored(FIELD_REF,false);
  collector.setIgnored(FIELD_REF_WITH_CASTED_RECEIVER,false);
  collector.setIgnored(KEYWORD,false);
  collector.setIgnored(LABEL_REF,false);
  collector.setIgnored(LOCAL_VARIABLE_REF,false);
  collector.setIgnored(METHOD_DECLARATION,false);
  collector.setIgnored(METHOD_NAME_REFERENCE,false);
  collector.setIgnored(METHOD_REF,false);
  collector.setIgnored(CONSTRUCTOR_INVOCATION,false);
  collector.setIgnored(METHOD_REF_WITH_CASTED_RECEIVER,false);
  collector.setIgnored(PACKAGE_REF,false);
  collector.setIgnored(POTENTIAL_METHOD_DECLARATION,false);
  collector.setIgnored(VARIABLE_DECLARATION,false);
  collector.setIgnored(TYPE_REF,false);
  collector.setAllowsRequiredProposals(FIELD_REF,TYPE_REF,true);
  collector.setAllowsRequiredProposals(FIELD_REF,TYPE_IMPORT,true);
  collector.setAllowsRequiredProposals(FIELD_REF,FIELD_IMPORT,true);
  collector.setAllowsRequiredProposals(METHOD_REF,TYPE_REF,true);
  collector.setAllowsRequiredProposals(METHOD_REF,TYPE_IMPORT,true);
  collector.setAllowsRequiredProposals(METHOD_REF,METHOD_IMPORT,true);
  collector.setAllowsRequiredProposals(CONSTRUCTOR_INVOCATION,TYPE_REF,true);
  collector.setAllowsRequiredProposals(ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION,TYPE_REF,true);
  collector.setAllowsRequiredProposals(ANONYMOUS_CLASS_DECLARATION,TYPE_REF,true);
  collector.setAllowsRequiredProposals(TYPE_REF,TYPE_REF,true);
  collector.setFavoriteReferences(getFavoriteStaticMembers());
  collector.setRequireExtendedContext(true);
}","private void initalizeCollector(){
  if (shouldFillArgumentNames()) {
    collector=new FillArgumentNamesCompletionProposalCollector(jdtuiContext);
  }
 else {
    collector=new CompletionProposalCollector(jdtuiContext.getCompilationUnit(),false);
  }
  configureInterestedProposalTypes();
  adjustProposalReplacementLength();
}",0.2295940637276298
93355,"public int calculateRelevance(){
  String commonPrefix=getCommonPrefix(subwordsMatchingRegion.toLowerCase(),prefix.toLowerCase());
  int score=commonPrefix.length() > 0 ? 200 + commonPrefix.length() : 0;
  int relevance=jdtProposal.getRelevance() + score + bestSubsequenceScore;
  return relevance;
}","public int calculateRelevance(){
  String commonPrefix=getCommonPrefix(subwordsMatchingRegion.toLowerCase(),prefix.toLowerCase());
  int score=0;
  if (commonPrefix.length() == prefix.length()) {
    score+=200;
  }
  int relevance=jdtProposal.getRelevance() + score + bestSubsequenceScore;
  return relevance;
}",0.8660130718954249
93356,"public int calculateRelevance(){
  String commonPrefix=getCommonPrefix(subwordsMatchingRegion.toLowerCase(),prefix.toLowerCase());
  int score=commonPrefix.length() > 0 ? 200 + commonPrefix.length() : 0;
  int relevance=jdtProposal.getRelevance() + score + bestSubsequenceScore;
  return relevance;
}","public int calculateRelevance(){
  String commonPrefix=getCommonPrefix(subwordsMatchingRegion.toLowerCase(),prefix.toLowerCase());
  int score=0;
  if (commonPrefix.length() == prefix.length()) {
    score+=200;
  }
  int relevance=jdtProposal.getRelevance() + score + bestSubsequenceScore;
  return relevance;
}",0.8660130718954249
93357,"public static List<int[]> findSequences(String completion,String token){
  List<int[]> active=Lists.newLinkedList();
  int[] start=new int[0];
  active.add(start);
  for (int i=0; i < token.length(); i++) {
    List<int[]> next=Lists.newLinkedList();
    outer:     for (    int[] s : active) {
      int startIndex=s.length == 0 ? 0 : s[s.length - 1] + 1;
      boolean wordBoundaryFound=false;
      for (int j=startIndex; j < completion.length(); j++) {
        char c1=completion.charAt(j);
        wordBoundaryFound|=Character.isUpperCase(c1);
        if (isSameIgnoreCase(c1,token.charAt(i))) {
          if (wordBoundaryFound && !Character.isUpperCase(c1))           continue;
          wordBoundaryFound=false;
          int[] copy=Arrays.copyOf(s,s.length + 1);
          copy[i]=j;
          next.add(copy);
        }
      }
    }
    active=next;
    next=Lists.newLinkedList();
  }
  for (Iterator<int[]> it=active.iterator(); it.hasNext(); ) {
    int[] candidate=it.next();
    if (candidate.length < token.length()) {
      it.remove();
      continue;
    }
  }
  return active;
}","public static List<int[]> findSequences(String completion,String token){
  List<int[]> active=Lists.newLinkedList();
  int[] start=new int[0];
  active.add(start);
  for (int i=0; i < token.length(); i++) {
    List<int[]> next=Lists.newLinkedList();
    outer:     for (    int[] s : active) {
      int startIndex=s.length == 0 ? 0 : s[s.length - 1] + 1;
      boolean wordBoundaryFound=false;
      for (int j=startIndex; j < completion.length(); j++) {
        char c1=completion.charAt(j);
        wordBoundaryFound|=Character.isUpperCase(c1);
        if (isSameIgnoreCase(c1,token.charAt(i))) {
          if (wordBoundaryFound && !Character.isUpperCase(c1))           continue;
          int[] copy=Arrays.copyOf(s,s.length + 1);
          copy[i]=j;
          next.add(copy);
        }
      }
    }
    active=next;
    next=Lists.newLinkedList();
  }
  for (Iterator<int[]> it=active.iterator(); it.hasNext(); ) {
    int[] candidate=it.next();
    if (candidate.length < token.length()) {
      it.remove();
      continue;
    }
  }
  return active;
}",0.983788791106994
93358,"/** 
 * Returns the index of the search parameter with the given name.
 * @param name The name of the search parameter.
 * @return The index of the search parameter.
 */
public int getParameterIndex(String name){
  for (int i=0; i < params.size(); i++) {
    if (params.get(i).getName() == name) {
      return i;
    }
  }
  return -1;
}","/** 
 * Returns the index of the search parameter with the given name.
 * @param name The name of the search parameter.
 * @return The index of the search parameter.
 */
public int getParameterIndex(String name){
  for (int i=0; i < params.size(); i++) {
    if (params.get(i).getName().equals(name)) {
      return i;
    }
  }
  return -1;
}",0.9691629955947136
93359,"/** 
 * Evaluate one match. The evaluated result of the root match node is applied to the code environment.
 * @param node The match node to evaluate.
 * @return The result of the evaluation.
 */
private Object evaluateMatchNode(MatchNode node){
  if (node instanceof EffectMatchNode) {
    EffectMatchNode effectNode=(EffectMatchNode)node;
    Object[] args=new Object[effectNode.getEffect().numParameters()];
    for (int i=0; i < args.length; i++) {
      args[i]=evaluateMatchNode(effectNode.getChild(i));
    }
    return evaluateEffect(effectNode,args);
  }
 else   return ((ArgumentMatchNode)node).getArgument();
}","/** 
 * Evaluate one match. The evaluated result of the root match node is applied to the code environment.
 * @param node The match node to evaluate.
 * @return The result of the evaluation.
 */
protected Object evaluateMatchNode(MatchNode node){
  if (node instanceof EffectMatchNode) {
    EffectMatchNode effectNode=(EffectMatchNode)node;
    Object[] args=new Object[effectNode.getEffect().numParameters()];
    for (int i=0; i < args.length; i++) {
      String value=(String)evaluateMatchNode(effectNode.getChild(i));
      ;
      if (value.isEmpty()) {
        value=((ArgumentMatchNode)effectNode.getChild(i)).getParameter().getName();
      }
      args[i]=value;
    }
    return evaluateEffect(effectNode,args);
  }
 else   return ((ArgumentMatchNode)node).getArgument();
}",0.6709310589907604
93360,"private Optional<IType> resolveType(final ITypeName recType){
  ensureIsNotNull(recType);
  if (recType.isArrayType()) {
    System.err.println(""String_Node_Str"");
    return absent();
  }
  if (recType.isNestedType()) {
    final ITypeName declaringType=recType.getDeclaringType();
    final String simpleName=StringUtils.substringAfterLast(recType.getIdentifier(),""String_Node_Str"");
    final IType parent=resolveType(declaringType).orNull();
    if (parent != null) {
      try {
        for (        final IType nested : parent.getTypes()) {
          final String key=nested.getKey();
          if (key.equals(recType.getIdentifier() + ""String_Node_Str"")) {
            return fromNullable(nested);
          }
        }
        for (        final IMethod m : parent.getMethods()) {
          for (          final IJavaElement children : m.getChildren()) {
            if (children instanceof IType) {
              final IType nested=(IType)children;
              if (nested.getKey().endsWith(simpleName + ""String_Node_Str"")) {
                return of(nested);
              }
              final String key=nested.getKey();
              if (key.equals(recType.getIdentifier() + ""String_Node_Str"")) {
                return fromNullable(nested);
              }
            }
          }
        }
      }
 catch (      final Exception x) {
        return absent();
      }
    }
    return absent();
  }
  final IType[] res=new IType[1];
  final IJavaSearchScope scope=SearchEngine.createWorkspaceScope();
  final SearchEngine search=new SearchEngine();
  final String srcTypeName=Names.vm2srcTypeName(recType.getIdentifier());
  final SearchPattern pattern=SearchPattern.createPattern(srcTypeName,IJavaSearchConstants.TYPE,IJavaSearchConstants.DECLARATIONS,SearchPattern.R_EXACT_MATCH);
  try {
    search.search(pattern,SearchUtils.getDefaultSearchParticipants(),scope,new SearchRequestor(){
      @Override public void acceptSearchMatch(      final SearchMatch match) throws CoreException {
        res[0]=(IType)match.getElement();
      }
    }
,null);
  }
 catch (  final CoreException e) {
    throwUnhandledException(e);
  }
  return fromNullable(res[0]);
}","private Optional<IType> resolveType(final ITypeName recType){
  ensureIsNotNull(recType);
  if (recType.isArrayType()) {
    System.err.println(""String_Node_Str"");
    return absent();
  }
  if (recType.isNestedType()) {
    final ITypeName declaringType=recType.getDeclaringType();
    final String simpleName=StringUtils.substringAfterLast(recType.getIdentifier(),""String_Node_Str"");
    final IType parent=resolveType(declaringType).orNull();
    if (parent != null) {
      try {
        for (        final IType nested : parent.getTypes()) {
          final String key=nested.getKey();
          if (key.equals(recType.getIdentifier() + ""String_Node_Str"")) {
            return fromNullable(nested);
          }
        }
        for (        final IMethod m : parent.getMethods()) {
          for (          final IJavaElement children : m.getChildren()) {
            if (children instanceof IType) {
              final IType nested=(IType)children;
              if (nested.getKey().endsWith(simpleName + ""String_Node_Str"")) {
                return of(nested);
              }
              final String key=nested.getKey();
              if (key.equals(recType.getIdentifier() + ""String_Node_Str"")) {
                return fromNullable(nested);
              }
            }
          }
        }
      }
 catch (      final Exception x) {
        return absent();
      }
    }
    return absent();
  }
  final IType[] res=new IType[1];
  final IJavaSearchScope scope=SearchEngine.createWorkspaceScope();
  final SearchEngine search=new SearchEngine();
  final String srcTypeName=Names.vm2srcTypeName(recType.getIdentifier());
  final SearchPattern pattern=SearchPattern.createPattern(srcTypeName,IJavaSearchConstants.TYPE,IJavaSearchConstants.DECLARATIONS,SearchPattern.R_FULL_MATCH);
  try {
    search.search(pattern,SearchUtils.getDefaultSearchParticipants(),scope,new SearchRequestor(){
      @Override public void acceptSearchMatch(      final SearchMatch match) throws CoreException {
        IType element=(IType)match.getElement();
        if (toRecType(element).equals(recType)) {
          res[0]=element;
        }
      }
    }
,null);
  }
 catch (  final CoreException e) {
    throwUnhandledException(e);
  }
  return fromNullable(res[0]);
}",0.96536212325686
93361,"@Override public void acceptSearchMatch(final SearchMatch match) throws CoreException {
  res[0]=(IType)match.getElement();
}","@Override public void acceptSearchMatch(final SearchMatch match) throws CoreException {
  IType element=(IType)match.getElement();
  if (toRecType(element).equals(recType)) {
    res[0]=element;
  }
}",0.6153846153846154
93362,"private boolean sameSignature(final IMethodName recMethod,final IMethod jdtMethod) throws JavaModelException {
  if (!(bothConstructors(recMethod,jdtMethod) || sameName(recMethod,jdtMethod))) {
    return false;
  }
  final ITypeName[] recTypes=recMethod.getParameterTypes();
  final String[] jdtTypes=jdtMethod.getParameterTypes();
  if (!sameNumberOfParameters(recMethod,jdtMethod)) {
    return false;
  }
  for (int i=0; i < recTypes.length; i++) {
    final Optional<ITypeName> jdtType=JdtUtils.resolveUnqualifiedJDTType(jdtTypes[i],jdtMethod);
    if (!jdtType.isPresent()) {
      return false;
    }
    if (!sameSimpleTypes(recTypes[i],jdtType.get()) || !sameArrayDimensions(recTypes[i],jdtType.get())) {
      return false;
    }
  }
  return true;
}","private boolean sameSignature(final IMethodName recMethod,final IMethod jdtMethod) throws JavaModelException {
  if (!(bothConstructors(recMethod,jdtMethod) || sameName(recMethod,jdtMethod))) {
    return false;
  }
  final ITypeName[] recTypes=recMethod.getParameterTypes();
  final String[] jdtTypes=jdtMethod.getParameterTypes();
  if (!sameNumberOfParameters(recMethod,jdtMethod)) {
    return false;
  }
  for (int i=0; i < recTypes.length; i++) {
    final Optional<ITypeName> jdtType=JdtUtils.resolveUnqualifiedJDTType(jdtTypes[i],jdtMethod);
    if (!jdtType.isPresent()) {
      return false;
    }
    if (!sameSimpleTypes(recTypes[i],jdtType.get()) || !sameArrayDimensions(recTypes[i],jdtTypes[i])) {
      return false;
    }
  }
  return true;
}",0.9934123847167324
93363,"private boolean sameArrayDimensions(final ITypeName t1,final ITypeName t2){
  return t1.getArrayDimensions() == t2.getArrayDimensions();
}","private boolean sameArrayDimensions(final ITypeName t1,final String jdtTypes){
  int dim1=t1.getArrayDimensions();
  int dim2=Signature.getArrayCount(jdtTypes.toCharArray());
  return dim1 == dim2;
}",0.6824925816023739
93364,"/** 
 * Returns the   {@link IJavaElement} at the given offset. If no {@link IJavaElement} is selected, the innermostenclosing  {@link IJavaElement} is returned (e.g., the declaring method or type). If both selection resolutionsfail,  {@link Optional#absent()} is returned.
 */
public static Optional<IJavaElement> resolveJavaElementFromTypeRootInEditor(final ITypeRoot root,final int offset){
  ensureIsNotNull(root);
  try {
    final IJavaElement[] elements=root.codeSelect(offset,0);
    if (elements.length > 0) {
      return of(elements[0]);
    }
 else {
      return absent();
    }
  }
 catch (  final JavaModelException e) {
    log(e,""String_Node_Str"",root.getHandleIdentifier(),offset);
    return absent();
  }
}","/** 
 * Returns the   {@link IJavaElement} at the given offset. If no {@link IJavaElement} is selected, the innermostenclosing  {@link IJavaElement} is returned (e.g., the declaring method or type). If both selection resolutionsfail,  {@link Optional#absent()} is returned.
 */
public static Optional<IJavaElement> resolveJavaElementFromTypeRootInEditor(final ITypeRoot root,final int offset){
  ensureIsNotNull(root);
  ensureIsGreaterOrEqualTo(offset,0,""String_Node_Str"" + offset);
  try {
    final IJavaElement[] elements=root.codeSelect(offset,0);
    if (elements.length > 0) {
      return of(elements[0]);
    }
 else {
      return absent();
    }
  }
 catch (  final JavaModelException e) {
    log(e,""String_Node_Str"",root.getHandleIdentifier(),offset);
    return absent();
  }
}",0.9571522742254448
93365,"/** 
 * Returns the   {@link IJavaElement} at the given offset. If no {@link IJavaElement} is selected, the innermostenclosing  {@link IJavaElement} is returned (e.g., the declaring method or type). If both selection resolutionsfail,  {@link Optional#absent()} is returned.
 */
public static Optional<IJavaElement> resolveJavaElementFromTypeRootInEditor(final ITypeRoot root,final int offset){
  ensureIsNotNull(root);
  ensureIsGreaterOrEqualTo(offset,0,""String_Node_Str"" + offset);
  try {
    final IJavaElement[] elements=root.codeSelect(offset,0);
    if (elements.length > 0) {
      return of(elements[0]);
    }
 else {
      return absent();
    }
  }
 catch (  final JavaModelException e) {
    log(e,""String_Node_Str"",root.getHandleIdentifier(),offset);
    return absent();
  }
}","/** 
 * Returns the   {@link IJavaElement} at the given offset. If no {@link IJavaElement} is selected, the innermostenclosing  {@link IJavaElement} is returned (e.g., the declaring method or type). If both selection resolutionsfail,  {@link Optional#absent()} is returned.
 */
public static Optional<IJavaElement> resolveJavaElementFromTypeRootInEditor(final ITypeRoot root,final int offset){
  ensureIsNotNull(root);
  try {
    if (isInvalidSelection(root,offset)) {
      return absent();
    }
    final IJavaElement[] elements=root.codeSelect(offset,0);
    if (elements.length > 0) {
      return of(elements[0]);
    }
 else {
      return absent();
    }
  }
 catch (  final Exception e) {
    if (!isInvalidSelection(root,offset))     log(e,""String_Node_Str"",root.getHandleIdentifier(),offset);
    return absent();
  }
}",0.6313193588162762
93366,"private static void log(JavaModelException e,String newMessage,Object... args){
  String format=String.format(newMessage,args);
  log.error(format,e);
}","private static void log(Exception e,String newMessage,Object... args){
  String format=String.format(newMessage,args);
  log.error(format,e);
}",0.9694915254237289
93367,"public static List<String> findAnonymousClassNames(final CharSequence source){
  String declaringType=findClassName(source);
  int num=1;
  List<String> names=newArrayList();
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
  Matcher matcher=p.matcher(source);
  while (matcher.find()) {
    final String name=matcher.group(1);
    if (!name.equals(declaringType)) {
      names.add(declaringType + ""String_Node_Str"" + num++);
    }
  }
  return names;
}","public static List<String> findAnonymousClassNames(final CharSequence source){
  String declaringType=findClassName(source);
  int num=1;
  List<String> names=newArrayList();
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
  Matcher matcher=p.matcher(source);
  while (matcher.find()) {
    final String name=matcher.group(1);
    if (!name.equals(declaringType)) {
      System.out.println(""String_Node_Str"" + matcher.group(0));
      names.add(declaringType + ""String_Node_Str"" + num++);
    }
  }
  return names;
}",0.936
93368,"@Test public void extractNamesOfAnonymousClasses(){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  List<String> actuals=JavaProjectFixture.findAnonymousClassNames(sb);
  List<String> expecteds=Lists.newArrayList(""String_Node_Str"",""String_Node_Str"");
  assertEquals(expecteds,actuals);
}","@Test public void extractNamesOfAnonymousClasses(){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  List<String> actuals=findAnonymousClassNames(sb);
  List<String> expecteds=Lists.newArrayList(""String_Node_Str"",""String_Node_Str"");
  assertEquals(expecteds,actuals);
}",0.9855072463768116
93369,"private void addHeader(){
  new Label(container,SWT.None);
  final String message=format(""String_Node_Str"",directive.getPatterns().length,type.getElementName());
  createLabel(container,message,true);
}","private void addHeader(){
  new Label(container,SWT.None);
  final String message=format(""String_Node_Str"");
  createLabel(container,message,true);
}",0.8490028490028491
93370,"public void setSampleCount(int sampleCount){
  this.sampleCount=sampleCount;
}","public void setSampleCount(final int sampleCount){
  this.sampleCount=sampleCount;
}",0.9629629629629628
93371,"@Override public void setNetwork(BayesNet bn){
  super.setNetwork(bn);
  sampler.setBN(bn);
}","@Override public void setNetwork(final BayesNet bn){
  super.setNetwork(bn);
  sampler.setBN(bn);
}",0.96875
93372,"private void normalizeBeliefs(){
  for (int i=0; i < beliefs.length; i++)   beliefs[i]=MathUtils.normalize(beliefs[i]);
}","private void normalizeBeliefs(){
  for (int i=0; i < beliefs.length; i++) {
    beliefs[i]=MathUtils.normalize(beliefs[i]);
  }
}",0.968
93373,"private double computeEvidenceProbability(Map<BayesNode,String> sample){
  double factor=1.0;
  for (  BayesNode n : net.getNodes()) {
    if (evidence.containsKey(n.getId())) {
      factor*=n.marginalize(sample)[n.getOutcomeIndex(evidence.get(n))];
    }
  }
  return factor;
}","private double computeEvidenceProbability(final Map<BayesNode,String> sample){
  double factor=1.0;
  for (  final BayesNode n : net.getNodes()) {
    final int id=n.getId();
    if (evidence.containsKey(id)) {
      factor*=n.marginalize(sample)[n.getOutcomeIndex(evidence.get(n))];
    }
  }
  return factor;
}",0.9137055837563453
93374,"@Override protected void updateBeliefs(){
  sampler.setEvidence(evidence);
  for (int i=0; i < sampleCount; i++) {
    Map<BayesNode,String> sample=sampler.sample();
    double weight=computeEvidenceProbability(sample);
    for (    Entry<Integer,Integer> e : BayesUtils.toIntegerMap(sample).entrySet()) {
      beliefs[e.getKey()][e.getValue()]+=weight;
    }
  }
  normalizeBeliefs();
}","@Override protected void updateBeliefs(){
  sampler.setEvidence(evidence);
  for (int i=0; i < sampleCount; i++) {
    final Map<BayesNode,String> sample=sampler.sample();
    final double weight=computeEvidenceProbability(sample);
    for (    final Entry<Integer,Integer> e : BayesUtils.toIntegerMap(sample).entrySet()) {
      beliefs[e.getKey()][e.getValue()]+=weight;
    }
  }
  normalizeBeliefs();
}",0.9773299748110832
93375,"public static LoggingEventManager getManager(){
  if (manager == null) {
    manager=new LoggingEventManager();
  }
  return manager;
}","public static synchronized LoggingEventManager getManager(){
  if (manager == null) {
    manager=new LoggingEventManager();
  }
  return manager;
}",0.9540636042402828
93376,"@Override public int compareTo(final IFieldName other){
  identifier.compareTo(other.getIdentifier());
  return 0;
}","@Override public int compareTo(final IFieldName other){
  return identifier.compareTo(other.getIdentifier());
}",0.9162995594713657
93377,"@Override public int compareTo(final IVariableName other){
  identifier.compareTo(other.getIdentifier());
  return 0;
}","@Override public int compareTo(final IVariableName other){
  return identifier.compareTo(other.getIdentifier());
}",0.9184549356223176
93378,"public List<?> getEvents(){
  return events;
}","public synchronized List<Object> getEvents(){
  return _events;
}",0.8108108108108109
93379,"private void add(final Object event){
  events.add(event);
}","private void add(final Object event){
  getEvents().add(event);
}",0.96
93380,"public void assertNoMoreEvents(){
  assertTrue(events.isEmpty());
}","public void assertNoMoreEvents(){
  assertTrue(getEvents().isEmpty());
}",0.9640287769784172
93381,"/** 
 * asserts that the expected event was posted
 */
public void assertEvent(final Object expected){
  assertFalse(events.isEmpty());
  assertTrue(""String_Node_Str"",events.remove(expected));
}","/** 
 * asserts that the expected event was posted
 */
public void assertEvent(final Object expected){
  assertFalse(getEvents().isEmpty());
  assertTrue(""String_Node_Str"",getEvents().remove(expected));
}",0.914572864321608
93382,"/** 
 * asserts that the expected event was posted as the next event
 */
public void assertNextEvent(final Object expected){
  assertFalse(events.isEmpty());
  final Object actual=events.remove(0);
  assertEquals(expected,actual);
}","/** 
 * asserts that the expected event was posted as the next event
 */
public void assertNextEvent(final Object expected){
  assertFalse(getEvents().isEmpty());
  final Object actual=getEvents().remove(0);
  assertEquals(expected,actual);
}",0.9282700421940928
93383,"private void waitForFinish(){
  try {
    Thread.sleep(TIME_OF_SLOW_PROVIDERS + 100);
  }
 catch (  final InterruptedException e) {
    Throws.throwUnhandledException(e);
  }
}","private void waitForFinish(){
  try {
    Thread.sleep(TIME_OF_SLOW_PROVIDERS + 200);
  }
 catch (  final InterruptedException e) {
    Throws.throwUnhandledException(e);
  }
}",0.9943181818181818
93384,"@Override public void setFocus(){
}","@Override public void setFocus(){
  contentPart.setFocus();
}",0.7291666666666666
93385,"private boolean findReceiver(){
  receiverName=ctx.getReceiverName();
  receiverType=ctx.getReceiverType().orNull();
  if ((receiverType == null) && receiverName.isEmpty()) {
    setReceiverToSupertype();
  }
  return receiverType != null;
}","private boolean findReceiver(){
  receiverName=ctx.getReceiverName();
  receiverType=ctx.getReceiverType().orNull();
  if (isReceiverNameThis() || isReceiverNameSuper() || isImplicitThis()) {
    setReceiverToSupertype();
  }
  return receiverType != null;
}",0.781563126252505
93386,"private void createProspsals(){
  final String prefix=ctx.getPrefix();
  for (  final CallsRecommendation r : recommendations) {
    if (!r.method.getName().startsWith(prefix)) {
      continue;
    }
    final IMethod method=jdtResolver.toJdtMethod(r.method);
    if (method == null) {
      continue;
    }
    final int start=ctx.getInvocationOffset() - ctx.getPrefix().length();
    final int end=ctx.getInvocationOffset();
    final CompletionProposal proposal=JdtUtils.createProposal(method,CompletionProposal.METHOD_REF,start,end,end);
    final int proposalPercentage=(int)Math.rint(r.probability * 100);
    final int rating=BASIS_RELEVANCE + proposalPercentage;
    proposal.setRelevance(rating);
    final ParameterGuessingProposal javaProposal=ParameterGuessingProposal.createProposal(proposal,ctx.getJavaContext(),true);
    final CompletionProposalDecorator decorator=new CompletionProposalDecorator(javaProposal,r.probability);
    proposals.add(decorator);
  }
}","private void createProspsals(){
  final String prefix=ctx.getPrefix();
  for (  final CallsRecommendation r : recommendations) {
    final String proposalPrefix=StringUtils.substring(r.method.getName(),0,prefix.length());
    if (!proposalPrefix.equalsIgnoreCase(prefix)) {
      continue;
    }
    final IMethod method=jdtResolver.toJdtMethod(r.method);
    if (method == null) {
      continue;
    }
    final int start=ctx.getInvocationOffset() - ctx.getPrefix().length();
    final int end=ctx.getInvocationOffset();
    final CompletionProposal proposal=JdtUtils.createProposal(method,CompletionProposal.METHOD_REF,start,end,end);
    final int proposalPercentage=(int)Math.rint(r.probability * 100);
    final int rating=BASIS_RELEVANCE + proposalPercentage;
    proposal.setRelevance(rating);
    final ParameterGuessingProposal javaProposal=ParameterGuessingProposal.createProposal(proposal,ctx.getJavaContext(),true);
    final CompletionProposalDecorator decorator=new CompletionProposalDecorator(javaProposal,r.probability);
    proposals.add(decorator);
  }
}",0.925402242808386
93387,"public static Optional<IType> createUnresolvedType(final TypeBinding compilerBinding){
  final IType t=(IType)Util.getUnresolvedJavaElement(compilerBinding,null,EMPTY_NODE_MAP);
  return fromNullable(t);
}","public static Optional<IType> createUnresolvedType(final TypeBinding compilerBinding){
  final JavaElement e=Util.getUnresolvedJavaElement(compilerBinding,null,EMPTY_NODE_MAP);
  if (e instanceof IType) {
    return of((IType)e);
  }
 else   if (e instanceof ITypeParameter) {
    final ITypeParameter t=cast(e);
  }
  return absent();
}",0.6642066420664207
93388,"/** 
 * @param parent must be an  {@link IType} or something that has an{@link IType} as parent.
 */
public static Optional<String> resolveUnqualifiedTypeNamesAndStripOffGenericsAndArrayDimension(String typeSignature,final IJavaElement parent){
  ensureIsNotNull(typeSignature);
  ensureIsNotNull(parent);
  try {
    typeSignature=typeSignature.replace('/','.');
    final IType type=(IType)(parent instanceof IType ? parent : parent.getAncestor(IJavaElement.TYPE));
    if (type == null) {
      throwIllegalArgumentException(""String_Node_Str"",parent);
    }
    String resolvedTypeSignature=JavaModelUtil.getResolvedTypeName(typeSignature,type);
    if (resolvedTypeSignature == null) {
      return of(""String_Node_Str"");
    }
    resolvedTypeSignature=StringUtils.substringBeforeLast(resolvedTypeSignature,""String_Node_Str"");
    return fromNullable(resolvedTypeSignature);
  }
 catch (  final Exception e) {
    log(e);
    return absent();
  }
}","/** 
 * @param parent must be an  {@link IType} or something that has an {@link IType} as parent.
 */
public static Optional<String> resolveUnqualifiedTypeNamesAndStripOffGenericsAndArrayDimension(String typeSignature,final IJavaElement parent){
  ensureIsNotNull(typeSignature);
  ensureIsNotNull(parent);
  try {
    typeSignature=typeSignature.replace('/','.');
    final IType type=(IType)(parent instanceof IType ? parent : parent.getAncestor(IJavaElement.TYPE));
    if (type == null) {
      throwIllegalArgumentException(""String_Node_Str"",parent);
    }
    String resolvedTypeSignature=JavaModelUtil.getResolvedTypeName(typeSignature,type);
    if (resolvedTypeSignature == null) {
      return of(""String_Node_Str"");
    }
    resolvedTypeSignature=StringUtils.substringBeforeLast(resolvedTypeSignature,""String_Node_Str"");
    return fromNullable(resolvedTypeSignature);
  }
 catch (  final Exception e) {
    log(e);
    return absent();
  }
}",0.9994756161510224
93389,"private void updateSelectionStatus(final JavaSelectionEvent selection){
  final IJavaElement element=selection.getElement();
  String text=JavaElementLinks.getElementLabel(element,LABEL_FLAGS);
  text=stripHtml(text);
  selectionStatus.setText(text);
  selectionStatus.setImage(labelProvider.getImage(element));
}","private void updateSelectionStatus(final JavaSelectionEvent selection){
  final IJavaElement element=selection.getElement();
  final String text=JavaElementLabels.getElementLabel(element,LABEL_FLAGS);
  selectionStatus.setText(text);
  selectionStatus.setImage(labelProvider.getImage(element));
}",0.8735632183908046
93390,"private void resizeScrolledComposite(){
  final int newWidth=scrolledContent.getSize().x;
  Point newSize=scrolledContent.computeSize(newWidth,SWT.DEFAULT);
  scrollingComposite.setMinHeight(newSize.y);
}","private void resizeScrolledComposite(){
  final int newWidth=scrolledContent.getSize().x;
  final Point newSize=scrolledContent.computeSize(newWidth,SWT.DEFAULT);
  scrollingComposite.setMinHeight(newSize.y);
}",0.9855072463768116
93391,"private void appendTemplateVariable(final String varname,final String varType){
  varNames.add(varname);
  sb.append(""String_Node_Str"").append(varname);
  final int count=varNames.count(varname);
  if (count > 1) {
    sb.append(count);
  }
  final String resolvedTypeName=JdtUtils.resolveUnqualifiedTypeNamesAndStripOffGenericsAndArrayDimension(varType,context.getCompilationUnit());
  sb.append(""String_Node_Str"");
}","private void appendTemplateVariable(final String varname,final String varType){
  varNames.add(varname);
  sb.append(""String_Node_Str"").append(varname);
  final int count=varNames.count(varname);
  if (count > 1) {
    sb.append(count);
  }
  final String resolvedTypeName=JdtUtils.resolveUnqualifiedTypeNamesAndStripOffGenericsAndArrayDimension(varType,context.getCompilationUnit().findPrimaryType());
  sb.append(""String_Node_Str"");
}",0.9789227166276346
93392,"@Test public void testSimpleCase(){
  setupNameCollectors(Names__Field_To_Temp_Local.class);
  verifyLocalNames(""String_Node_Str"",""String_Node_Str"");
}","@Test public void testSimpleCase() throws InvalidClassFileException {
  setupNameCollectors(Names__Field_To_Temp_Local.class);
  verifyLocalNames(""String_Node_Str"",""String_Node_Str"");
}",0.8988095238095238
93393,"private void setupNameCollectors(final Class<?> testCase){
  method=WalaTestUtils.lookupTestMethod(cha,testCase);
  ir=cache.getIR(method);
  sut=new LocalNamesCollectorNaiveEdition(ir);
}","private void setupNameCollectors(final Class<?> testCase) throws InvalidClassFileException {
  method=WalaTestUtils.lookupTestMethod(cha,testCase);
  ir=cache.getIR(method);
  sut=new LocalNamesCollectorNaiveEdition(ir);
}",0.9170731707317074
93394,"private void putDocument(final WebServiceClient c,final File couchdbBasedir,final File contentFile) throws IOException {
  String path=removeStart(contentFile.getAbsolutePath(),couchdbBasedir.getAbsolutePath() + ""String_Node_Str"");
  path=StringUtils.removeEnd(path,""String_Node_Str"");
  try {
    final String content=Files.toString(contentFile,Charsets.UTF_8);
    c.createRequestBuilder(path).type(MediaType.TEXT_PLAIN_TYPE).put(content);
  }
 catch (  final Exception e) {
    System.out.printf(""String_Node_Str"",contentFile,e.getMessage());
  }
}","private void putDocument(final WebServiceClient c,final File couchdbBasedir,final File contentFile) throws IOException {
  String path=removeStart(contentFile.getAbsolutePath(),couchdbBasedir.getAbsolutePath());
  path=path.replace(""String_Node_Str"",""String_Node_Str"");
  path=StringUtils.removeStart(path,""String_Node_Str"");
  path=StringUtils.removeEnd(path,""String_Node_Str"");
  try {
    final String content=Files.toString(contentFile,Charsets.UTF_8);
    c.createRequestBuilder(path).type(MediaType.TEXT_PLAIN_TYPE).put(content);
  }
 catch (  final Exception e) {
    System.out.printf(""String_Node_Str"",contentFile,e.getMessage());
  }
}",0.9163879598662208
93395,"@Override public void createPartControl(final Composite parent){
  final Composite container=new Composite(parent,SWT.NONE);
  container.setLayout(new FillLayout(SWT.VERTICAL));
  createButton(""String_Node_Str"",container,new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      try {
        final WebServiceClient c=new WebServiceClient(ClientConfiguration.create(COUCH_BASEURL));
        final Bundle setupBundle=ensureIsNotNull(Platform.getBundle(""String_Node_Str""));
        final File setupBasedir=FileLocator.getBundleFile(setupBundle);
        ensureIsDirectory(setupBasedir);
        final File couchdbBasedir=new File(setupBasedir.getAbsoluteFile(),""String_Node_Str"");
        ensureIsDirectory(couchdbBasedir);
        for (        final File db : couchdbBasedir.listFiles()) {
          findOrCreateDatabase(db.getName(),c);
          final Iterator<File> it=iterateFiles(db,TrueFileFilter.INSTANCE,TrueFileFilter.INSTANCE);
          while (it.hasNext()) {
            putDocument(c,couchdbBasedir,it.next());
          }
        }
      }
 catch (      final Exception e1) {
        e1.printStackTrace();
      }
    }
    private void putDocument(    final WebServiceClient c,    final File couchdbBasedir,    final File contentFile) throws IOException {
      String path=removeStart(contentFile.getAbsolutePath(),couchdbBasedir.getAbsolutePath() + ""String_Node_Str"");
      path=StringUtils.removeEnd(path,""String_Node_Str"");
      try {
        final String content=Files.toString(contentFile,Charsets.UTF_8);
        c.createRequestBuilder(path).type(MediaType.TEXT_PLAIN_TYPE).put(content);
      }
 catch (      final Exception e) {
        System.out.printf(""String_Node_Str"",contentFile,e.getMessage());
      }
    }
    private void findOrCreateDatabase(    final String databaseName,    final WebServiceClient c){
      try {
        final TransactionResult doGetRequest=c.doGetRequest(databaseName,TransactionResult.class);
        System.out.println(doGetRequest);
      }
 catch (      final NotFoundException nfe) {
        c.doPutRequest(databaseName,""String_Node_Str"",TransactionResult.class);
      }
    }
  }
);
  createButton(""String_Node_Str"",container,new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      new WorkspaceJob(""String_Node_Str""){
        @Override public IStatus runInWorkspace(        final IProgressMonitor monitor) throws CoreException {
          monitor.beginTask(""String_Node_Str"",5);
          try {
{
              final File out=new File(ServerConfiguration.getDataBasedir(),""String_Node_Str"");
              out.mkdirs();
              final AlgorithmParameters arguments=new AlgorithmParameters();
              arguments.setOut(out);
              arguments.setForce(true);
              monitor.subTask(""String_Node_Str"");
              final Injector injector=Guice.createInjector(new CouchGuiceModule(arguments));
              injector.getInstance(ModelSpecsGenerator.class).execute();
              monitor.worked(1);
              monitor.subTask(""String_Node_Str"");
              injector.getInstance(Algorithm.class).run();
              monitor.worked(2);
            }
{
              monitor.subTask(""String_Node_Str"");
              final org.eclipse.recommenders.mining.extdocs.AlgorithmParameters arguments=new org.eclipse.recommenders.mining.extdocs.AlgorithmParameters();
              final Injector injector=Guice.createInjector(new org.eclipse.recommenders.mining.extdocs.couch.CouchGuiceModule(arguments));
              injector.getInstance(org.eclipse.recommenders.mining.extdocs.Algorithm.class).run();
              monitor.worked(2);
            }
          }
 catch (          final Exception x) {
            x.printStackTrace();
            return new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",x);
          }
 finally {
            monitor.done();
          }
          return Status.OK_STATUS;
        }
      }
.schedule();
    }
  }
);
}","@Override public void createPartControl(final Composite parent){
  final Composite container=new Composite(parent,SWT.NONE);
  container.setLayout(new FillLayout(SWT.VERTICAL));
  createButton(""String_Node_Str"",container,new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      try {
        final WebServiceClient c=new WebServiceClient(ClientConfiguration.create(COUCH_BASEURL));
        final Bundle setupBundle=ensureIsNotNull(Platform.getBundle(""String_Node_Str""));
        final File setupBasedir=FileLocator.getBundleFile(setupBundle);
        ensureIsDirectory(setupBasedir);
        final File couchdbBasedir=new File(setupBasedir.getAbsoluteFile(),""String_Node_Str"");
        ensureIsDirectory(couchdbBasedir);
        for (        final File db : couchdbBasedir.listFiles()) {
          findOrCreateDatabase(db.getName(),c);
          final Iterator<File> it=iterateFiles(db,TrueFileFilter.INSTANCE,TrueFileFilter.INSTANCE);
          while (it.hasNext()) {
            putDocument(c,couchdbBasedir,it.next());
          }
        }
      }
 catch (      final Exception e1) {
        e1.printStackTrace();
      }
    }
    private void putDocument(    final WebServiceClient c,    final File couchdbBasedir,    final File contentFile) throws IOException {
      String path=removeStart(contentFile.getAbsolutePath(),couchdbBasedir.getAbsolutePath());
      path=path.replace(""String_Node_Str"",""String_Node_Str"");
      path=StringUtils.removeStart(path,""String_Node_Str"");
      path=StringUtils.removeEnd(path,""String_Node_Str"");
      try {
        final String content=Files.toString(contentFile,Charsets.UTF_8);
        c.createRequestBuilder(path).type(MediaType.TEXT_PLAIN_TYPE).put(content);
      }
 catch (      final Exception e) {
        System.out.printf(""String_Node_Str"",contentFile,e.getMessage());
      }
    }
    private void findOrCreateDatabase(    final String databaseName,    final WebServiceClient c){
      try {
        final TransactionResult doGetRequest=c.doGetRequest(databaseName,TransactionResult.class);
        System.out.println(doGetRequest);
      }
 catch (      final NotFoundException nfe) {
        c.doPutRequest(databaseName,""String_Node_Str"",TransactionResult.class);
      }
    }
  }
);
  createButton(""String_Node_Str"",container,new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      new WorkspaceJob(""String_Node_Str""){
        @Override public IStatus runInWorkspace(        final IProgressMonitor monitor) throws CoreException {
          monitor.beginTask(""String_Node_Str"",5);
          try {
{
              final File out=new File(ServerConfiguration.getDataBasedir(),""String_Node_Str"");
              out.mkdirs();
              final AlgorithmParameters arguments=new AlgorithmParameters();
              arguments.setOut(out);
              arguments.setForce(true);
              monitor.subTask(""String_Node_Str"");
              final Injector injector=Guice.createInjector(new CouchGuiceModule(arguments));
              injector.getInstance(ModelSpecsGenerator.class).execute();
              monitor.worked(1);
              monitor.subTask(""String_Node_Str"");
              injector.getInstance(Algorithm.class).run();
              monitor.worked(2);
            }
{
              monitor.subTask(""String_Node_Str"");
              final org.eclipse.recommenders.mining.extdocs.AlgorithmParameters arguments=new org.eclipse.recommenders.mining.extdocs.AlgorithmParameters();
              final Injector injector=Guice.createInjector(new org.eclipse.recommenders.mining.extdocs.couch.CouchGuiceModule(arguments));
              injector.getInstance(org.eclipse.recommenders.mining.extdocs.Algorithm.class).run();
              monitor.worked(2);
            }
          }
 catch (          final Exception x) {
            x.printStackTrace();
            return new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",x);
          }
 finally {
            monitor.done();
          }
          return Status.OK_STATUS;
        }
      }
.schedule();
    }
  }
);
}",0.986784140969163
93396,"public Option<ClassOverrideDirectives> getClassOverrideDirectives(final ITypeName type){
  final Map<String,String> keyValuePairs=Maps.newHashMap();
  final String url=createViewUrlWithKeyObject(""String_Node_Str"",""String_Node_Str"",keyValuePairs);
  final GenericResultObjectView<ClassOverrideDirectives> resultView=client.doGetRequest(url,new GenericType<GenericResultObjectView<ClassOverrideDirectives>>(){
  }
);
  return wrap(CouchUtils.getFirst(resultView,null));
}","private Option<ClassOverrideDirectives> getClassOverrideDirectives(final ITypeName type){
  final Map<String,String> keyValuePairs=Maps.newHashMap();
  keyValuePairs.put(""String_Node_Str"",ClassOverrideDirectives.class.getSimpleName());
  keyValuePairs.put(""String_Node_Str"",type.getIdentifier());
  final String url=createViewUrlWithKeyObject(""String_Node_Str"",""String_Node_Str"",keyValuePairs);
  final GenericResultObjectView<ClassOverrideDirectives> resultView=client.doGetRequest(url,new GenericType<GenericResultObjectView<ClassOverrideDirectives>>(){
  }
);
  return wrap(CouchUtils.getFirst(resultView,null));
}",0.85451197053407
93397,"@Override public Set<ITypeName> getSuperclasses(){
  return db.getCompilationUnitSuperclases();
}","@Override public Set<ITypeName> getSuperclasses(){
  return db.getSuperclassNames();
}",0.8961748633879781
93398,"public boolean isEmpty(){
  return index.isEmpty();
}","@Override public boolean isEmpty(){
  return index.isEmpty();
}",0.913793103448276
93399,"@Override public Set<T> elements(){
  return new TreeSet<T>(index.keySet());
}","@Override public Set<T> elements(){
  return new HashSet<T>(index.keySet());
}",0.9487179487179488
93400,"public ClassOverrideDirectives generate(final ITypeName superclass,final Iterable<CompilationUnit> cus){
  this.superclass=superclass;
  this.overriddenMethods=newTreeBag();
  for (  final CompilationUnit cu : cus) {
    numberOfSubclasses++;
    visitOverriddenMethods(cu);
  }
  filterInfrequentMethods();
  final ClassOverrideDirectives res=toDirective();
  return res;
}","public ClassOverrideDirectives generate(final ITypeName superclass,final Iterable<CompilationUnit> cus){
  this.superclass=superclass;
  this.overriddenMethods=newTreeBag();
  numberOfSubclasses=0;
  System.out.println(""String_Node_Str"" + superclass);
  System.out.println();
  for (  final CompilationUnit cu : cus) {
    numberOfSubclasses++;
    visitOverriddenMethods(cu);
    System.out.println(""String_Node_Str"" + cu.primaryType.name);
  }
  filterInfrequentMethods();
  final ClassOverrideDirectives res=toDirective();
  return res;
}",0.8174863387978142
93401,"/** 
 * @param javaElement The Java element to identify the location for.
 * @param astNode AST node representing the selected java element.
 * @return The code location of the element represented by the AST node.
 */
protected static JavaElementLocation resolveLocation(final IJavaElement javaElement,final ASTNode astNode){
  if (astNode == null) {
    return null;
  }
  final ASTNode locationNode=getLocationNode(astNode);
  return getLocationForNodeType(locationNode,javaElement);
}","/** 
 * @param javaElement The Java element to identify the location for.
 * @param astNode AST node representing the selected java element.
 * @return The code location of the element represented by the AST node.
 */
protected static JavaElementLocation resolveLocation(final IJavaElement javaElement,final ASTNode astNode){
  if (astNode == null) {
    return null;
  }
  final ASTNode locationNode=getLocationNode(astNode);
  return getLocationForNodeType(javaElement,astNode,locationNode);
}",0.945010183299389
93402,"/** 
 * @param locationNodeType The type of the AST node indicating the element's location.
 * @param javaElement The Java element to identify the location for.
 * @return The {@link JavaElementLocation} for the given Java element andits location node type.
 */
private static JavaElementLocation getLocationForNodeType(final ASTNode locationNode,final IJavaElement javaElement){
switch (locationNode.getNodeType()) {
case ASTNode.BLOCK:
case ASTNode.SUPER_CONSTRUCTOR_INVOCATION:
case ASTNode.CAST_EXPRESSION:
    return JavaElementLocation.METHOD_BODY;
case ASTNode.METHOD_DECLARATION:
  return JavaElementLocation.METHOD_DECLARATION;
case ASTNode.SINGLE_VARIABLE_DECLARATION:
return getLocationForSingleVariable(locationNode);
case ASTNode.FIELD_DECLARATION:
return JavaElementLocation.FIELD_DECLARATION;
case ASTNode.TYPE_DECLARATION:
return getTypeDeclarationLocation(javaElement);
case ASTNode.IMPORT_DECLARATION:
return JavaElementLocation.IMPORT_DECLARATION;
case ASTNode.PACKAGE_DECLARATION:
return JavaElementLocation.PACKAGE_DECLARATION;
default :
return JavaElementLocation.METHOD_BODY;
}
}","/** 
 * @param locationNodeType The type of the AST node indicating the element's location.
 * @param javaElement The Java element to identify the location for.
 * @return The {@link JavaElementLocation} for the given Java element andits location node type.
 */
private static JavaElementLocation getLocationForNodeType(final IJavaElement javaElement,final ASTNode astNode,final ASTNode locationNode){
switch (locationNode.getNodeType()) {
case ASTNode.BLOCK:
case ASTNode.SUPER_CONSTRUCTOR_INVOCATION:
case ASTNode.CAST_EXPRESSION:
    return JavaElementLocation.METHOD_BODY;
case ASTNode.METHOD_DECLARATION:
  return JavaElementLocation.METHOD_DECLARATION;
case ASTNode.SINGLE_VARIABLE_DECLARATION:
return getLocationForSingleVariable(locationNode);
case ASTNode.FIELD_DECLARATION:
return JavaElementLocation.FIELD_DECLARATION;
case ASTNode.TYPE_DECLARATION:
return getTypeDeclarationLocation(javaElement,astNode);
case ASTNode.IMPORT_DECLARATION:
return JavaElementLocation.IMPORT_DECLARATION;
case ASTNode.PACKAGE_DECLARATION:
return JavaElementLocation.PACKAGE_DECLARATION;
default :
return JavaElementLocation.METHOD_BODY;
}
}",0.9471799462846912
93403,"/** 
 * @param javaElement The Java element occurring in the type declaration.
 * @return The {@link JavaElementLocation} - the ""new"" type, part of""extends"" or part of ""implements"" - as identified from the Java element type.
 */
private static JavaElementLocation getTypeDeclarationLocation(final IJavaElement javaElement){
  if (!(javaElement instanceof IType)) {
    return JavaElementLocation.TYPE_DECLARATION;
  }
 else {
    try {
      if (!((IType)javaElement).isInterface()) {
        return JavaElementLocation.EXTENDS_DECLARATION;
      }
    }
 catch (    final JavaModelException e) {
      throw new IllegalStateException(e);
    }
  }
  return JavaElementLocation.IMPLEMENTS_DECLARATION;
}","/** 
 * @param javaElement The Java element occurring in the type declaration.
 * @return The {@link JavaElementLocation} - the ""new"" type, part of""extends"" or part of ""implements"" - as identified from the Java element type.
 */
private static JavaElementLocation getTypeDeclarationLocation(final IJavaElement javaElement,final ASTNode astNode){
  if (!(javaElement instanceof IType)) {
    return JavaElementLocation.TYPE_DECLARATION;
  }
  try {
    if (((IType)javaElement).isInterface()) {
      return JavaElementLocation.IMPLEMENTS_DECLARATION;
    }
  }
 catch (  final JavaModelException e) {
    throw new IllegalStateException(e);
  }
  if (astNode.getNodeType() == ASTNode.TYPE_DECLARATION || astNode.getParent().getNodeType() == ASTNode.TYPE_DECLARATION && !(javaElement instanceof IPackageFragment)) {
    return JavaElementLocation.TYPE_DECLARATION;
  }
  return JavaElementLocation.EXTENDS_DECLARATION;
}",0.5992601726263872
93404,"@Override public ASTNode getAstNode(){
  if (cachedAstNode == null && getCompilationUnit() != null) {
    cachedAstNode=AstNodeResolver.resolveNode(getCompilationUnit(),invocationOffset);
  }
  return cachedAstNode;
}","@Override public ASTNode getAstNode(){
  if (cachedAstNode == null && getCompilationUnit() != null) {
    final ASTParser parser=ASTParser.newParser(AST.JLS3);
    parser.setResolveBindings(true);
    parser.setSource(Preconditions.checkNotNull(compilationUnit));
    final ASTNode astRoot=parser.createAST(null);
    cachedAstNode=NodeFinder.perform(astRoot,invocationOffset,0);
  }
  return cachedAstNode;
}",0.4600638977635782
93405,"private ProviderUiJob displayContentForType(final ITypeName type){
  return displayCodeSnippets(type,server.getTypeCodeExamples(type));
}","private ProviderUiJob displayContentForType(final ITypeName type){
  if (type == null) {
    return null;
  }
  return displayCodeSnippets(type,server.getTypeCodeExamples(type));
}",0.8643533123028391
93406,"private static ITypeName resolveTypeSignature(final IType declaringType,final String typeSignature) throws JavaModelException {
  final String resolvedTypeName=JavaModelUtil.getResolvedTypeName(typeSignature,declaringType);
  if (PrimitiveType.fromSrc(resolvedTypeName) != null) {
    return resolvePrimitive(resolvedTypeName);
  }
  final IJavaProject javaProject=declaringType.getJavaProject();
  return ElementResolver.toRecType(javaProject.findType(resolvedTypeName));
}","private static ITypeName resolveTypeSignature(final IType declaringType,final String typeSignature) throws JavaModelException {
  final String resolvedTypeName=JavaModelUtil.getResolvedTypeName(typeSignature,declaringType);
  if (resolvedTypeName == null) {
    return null;
  }
  if (PrimitiveType.fromSrc(resolvedTypeName) != null) {
    return resolvePrimitive(resolvedTypeName);
  }
  final IJavaProject javaProject=declaringType.getJavaProject();
  return ElementResolver.toRecType(javaProject.findType(resolvedTypeName));
}",0.9451645064805584
93407,"protected ProviderUiJob updateImplementsDeclarationSelection(final IJavaElementSelection selection,final ILocalVariable local){
  return null;
}","protected ProviderUiJob updateImplementsDeclarationSelection(final IJavaElementSelection selection,final IType type){
  return null;
}",0.9136690647482014
93408,"protected ProviderUiJob updateTypeDeclarationSelection(final IJavaElementSelection selection,final ILocalVariable local){
  return null;
}","protected ProviderUiJob updateTypeDeclarationSelection(final IJavaElementSelection selection,final IType type){
  return null;
}",0.9097744360902256
93409,"@Override public void elementChanged(final ElementChangedEvent event){
  final IJavaProject javaProject=event.getDelta().getElement().getJavaProject();
  if (javaProject == null || !RecommendersNature.hasNature(javaProject.getProject())) {
    return;
  }
switch (event.getDelta().getKind()) {
case IJavaElementDelta.F_OPENED:
    fireOpenEvent(event.getDelta().getElement().getJavaProject());
  break;
case IJavaElementDelta.F_CLOSED:
fireCloseEvent(event.getDelta().getElement().getJavaProject());
break;
}
}","@Override public void elementChanged(final ElementChangedEvent event){
  final IJavaElementDelta delta=event.getDelta();
  process(delta);
}",0.3723076923076923
93410,"@Override public File getJarFile(){
  final IPath fullPath=b.getPath();
  final File file=fullPath.toFile();
  return file;
}","@Override public File getJarFile(){
  File res=null;
  final IResource resource=b.getResource();
  if (resource != null) {
    IPath location=resource.getLocation();
    res=location.toFile();
  }
 else {
    final IPath path=b.getPath();
    res=path.toFile();
  }
  return res;
}",0.354679802955665
93411,"private void simulateProjectOpenEvents(){
  for (  final IProject project : getAllOpenProjects()) {
    if (RecommendersNature.hasNature(project)) {
      final IJavaProject javaProject=toJavaProject(project);
      fireOpenEvent(javaProject);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void simulateProjectOpenEvents(){
  for (  final IProject project : getAllOpenProjects()) {
    if (RecommendersNature.hasNature(project) && JavaProject.hasJavaNature(project)) {
      final IJavaProject javaProject=toJavaProject(project);
      fireOpenEvent(javaProject);
    }
  }
}",0.8717948717948718
93412,"private File getLocation(final IPackageFragmentRoot packageRoot){
  final IResource resource=packageRoot.getResource();
  if (resource != null) {
    return resource.getLocation().toFile().getAbsoluteFile();
  }
  if (packageRoot.isExternal()) {
    return packageRoot.getPath().toFile().getAbsoluteFile();
  }
  throw Throws.throwIllegalArgumentException(""String_Node_Str"" + packageRoot);
}","private File getLocation(final IPackageFragmentRoot packageRoot){
  final IResource resource=packageRoot.getResource();
  if (resource != null) {
    if (resource.getLocation() == null) {
      return resource.getRawLocation().toFile().getAbsoluteFile();
    }
 else {
      return resource.getLocation().toFile().getAbsoluteFile();
    }
  }
  if (packageRoot.isExternal()) {
    return packageRoot.getPath().toFile().getAbsoluteFile();
  }
  throw Throws.throwIllegalArgumentException(""String_Node_Str"" + packageRoot);
}",0.8148959474260679
93413,"private void displayProposal(final Tuple<IMethodName,Double> proposal,final TableListing table,final IJavaElement element,final boolean isMethodDeclaration){
  table.startNewRow();
  table.addLabelItem(formatMethodCall(element,proposal.getFirst(),isMethodDeclaration),false,true,SWT.COLOR_BLACK);
  table.addLabelItem(Math.round(proposal.getSecond() * 100) + ""String_Node_Str"",false,false,SWT.COLOR_BLUE);
}","private void displayProposal(final Tuple<IMethodName,Double> proposal,final TableListing table,final IJavaElement element,final boolean isMethodDeclaration){
  table.startNewRow();
  table.addCell(formatMethodCall(element,proposal.getFirst(),isMethodDeclaration),false,true,SWT.COLOR_BLACK);
  table.addCell(Math.round(proposal.getSecond() * 100) + ""String_Node_Str"",false,false,SWT.COLOR_BLUE);
}",0.9676616915422884
93414,"@Override public void run(final Composite composite){
  disposeChildren(composite);
  final TextAndFeaturesLine line=new TextAndFeaturesLine(composite,text,features);
  line.createStyleRange(12 + action.length(),elementName.length(),SWT.NORMAL,false,true);
  displayProposals(element,isMethodDeclaration,proposals,calledMethods,composite);
  if (maxProbabilitiesFromMethods != null) {
    new TextAndFeaturesLine(composite,text2,features);
    final TableListing calls=new TableListing(composite,4);
    for (    final Tuple<IMethodName,Tuple<IMethodName,Double>> proposal : maxProbabilitiesFromMethods) {
      calls.startNewRow();
      calls.addLabelItem(formatMethodCall(element,proposal.getFirst(),isMethodDeclaration),false,true,SWT.COLOR_BLACK);
      final int probability=(int)Math.round(proposal.getSecond().getSecond() * 100);
      final String origin=Names.vm2srcSimpleMethod(proposal.getSecond().getFirst());
      calls.addLabelItem(probability + ""String_Node_Str"",false,false,SWT.COLOR_BLUE);
      final StyledText styled=SwtFactory.createStyledText(calls,""String_Node_Str"" + origin,SWT.COLOR_BLACK,true);
      SwtFactory.createStyleRange(styled,3,origin.length(),SWT.NORMAL,false,true);
    }
  }
}","@Override public void run(final Composite composite){
  disposeChildren(composite);
  final TextAndFeaturesLine line=new TextAndFeaturesLine(composite,text,features);
  line.createStyleRange(12 + action.length(),elementName.length(),SWT.NORMAL,false,true);
  displayProposals(element,isMethodDeclaration,proposals,calledMethods,composite);
  if (maxProbabilitiesFromMethods != null) {
    new TextAndFeaturesLine(composite,text2,features);
    final TableListing calls=new TableListing(composite,4);
    for (    final Tuple<IMethodName,Tuple<IMethodName,Double>> proposal : maxProbabilitiesFromMethods) {
      calls.startNewRow();
      calls.addCell(formatMethodCall(element,proposal.getFirst(),isMethodDeclaration),false,true,SWT.COLOR_BLACK);
      final String origin=Names.vm2srcSimpleMethod(proposal.getSecond().getFirst());
      final int probability=(int)Math.round(proposal.getSecond().getSecond() * 100);
      calls.addCell(probability + ""String_Node_Str"",false,false,SWT.COLOR_BLUE);
      final StyledText styled=SwtFactory.createStyledText(calls,""String_Node_Str"" + origin,SWT.COLOR_BLACK,true);
      SwtFactory.createStyleRange(styled,3,origin.length(),SWT.NORMAL,false,true);
    }
  }
}",0.9117161716171616
93415,"private void displayProposals(final IJavaElement element,final boolean isMethodDeclaration,final SortedSet<Tuple<IMethodName,Double>> proposals,final Set<IMethodName> calledMethods,final Composite composite){
  final TableListing table=new TableListing(composite,3);
  for (  final IMethodName method : calledMethods) {
    table.startNewRow();
    table.addLabelItem(formatMethodCall(element,method,isMethodDeclaration),false,true,SWT.COLOR_DARK_GRAY);
    table.addLabelItem(""String_Node_Str"",false,false,SWT.COLOR_DARK_GRAY);
  }
  for (  final Tuple<IMethodName,Double> proposal : proposals) {
    displayProposal(proposal,table,element,isMethodDeclaration);
  }
}","private void displayProposals(final IJavaElement element,final boolean isMethodDeclaration,final SortedSet<Tuple<IMethodName,Double>> proposals,final Set<IMethodName> calledMethods,final Composite composite){
  final TableListing table=new TableListing(composite,3);
  for (  final IMethodName method : calledMethods) {
    table.startNewRow();
    table.addCell(formatMethodCall(element,method,isMethodDeclaration),false,true,SWT.COLOR_DARK_GRAY);
    table.addCell(""String_Node_Str"",false,false,SWT.COLOR_DARK_GRAY);
  }
  for (  final Tuple<IMethodName,Double> proposal : proposals) {
    displayProposal(proposal,table,element,isMethodDeclaration);
  }
}",0.9803921568627452
93416,"private void displayAddArea(final IJavaElement element,final Composite composite,final Composite addComposite,final List<SocialBookmark> bookmarks){
  disposeChildren(addComposite);
  final Text title=SwtFactory.createText(addComposite,""String_Node_Str"",300);
  final Text url=SwtFactory.createText(addComposite,""String_Node_Str"",200);
  SwtFactory.createButton(addComposite,""String_Node_Str"",new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      addBookmark(title.getText(),url.getText(),element,composite,bookmarks);
    }
  }
);
  SwtFactory.createButton(addComposite,""String_Node_Str"",new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      disposeChildren(addComposite);
      displayAddControl(element,composite,bookmarks);
      layout(composite);
    }
  }
);
  layout(composite);
}","private void displayAddArea(final IJavaElement element,final Composite composite,final Composite addComposite,final List<SocialBookmark> bookmarks){
  final Text title=SwtFactory.createText(addComposite,""String_Node_Str"",300);
  final Text url=SwtFactory.createText(addComposite,""String_Node_Str"",200);
  SwtFactory.createButton(addComposite,""String_Node_Str"",new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      addBookmark(title.getText(),url.getText(),element,composite,bookmarks);
    }
  }
);
  SwtFactory.createButton(addComposite,""String_Node_Str"",new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      disposeChildren(addComposite);
      displayAddControl(element,composite,bookmarks);
      layout(composite);
    }
  }
);
  layout(composite);
}",0.9808917197452228
93417,"private void displayAddControl(final IJavaElement element,final Composite composite,final List<SocialBookmark> bookmarks){
  final Composite addComposite=SwtFactory.createGridComposite(composite,4,6,0,0,0);
  SwtFactory.createLink(addComposite,""String_Node_Str"",null,ExtDocPlugin.getIcon(""String_Node_Str""),false,new MouseAdapter(){
    @Override public void mouseUp(    final MouseEvent e){
      displayAddArea(element,composite,addComposite,bookmarks);
    }
  }
);
}","private void displayAddControl(final IJavaElement element,final Composite composite,final List<SocialBookmark> bookmarks){
  final Composite addComposite=SwtFactory.createGridComposite(composite,4,6,0,0,0);
  SwtFactory.createLink(addComposite,""String_Node_Str"",null,ExtDocPlugin.getIcon(""String_Node_Str""),false,new MouseAdapter(){
    @Override public void mouseUp(    final MouseEvent e){
      disposeChildren(addComposite);
      displayAddArea(element,composite,addComposite,bookmarks);
    }
  }
);
}",0.962128966223132
93418,"@Override public void mouseUp(final MouseEvent e){
  displayAddArea(element,composite,addComposite,bookmarks);
}","@Override public void mouseUp(final MouseEvent e){
  disposeChildren(addComposite);
  displayAddArea(element,composite,addComposite,bookmarks);
}",0.8715953307392996
93419,"private static void displayDirectives(final Map<IMethodName,Integer> directives,final String actionKeyword,final int definitions,final Composite composite){
  final TableListing table=new TableListing(composite,4);
  for (  final Entry<IMethodName,Integer> directive : orderDirectives(directives).entrySet()) {
    final int percent=(int)Math.round(directive.getValue().doubleValue() * 100.0 / definitions);
    table.startNewRow();
    table.addLabelItem(getLabel(percent),true,false,SWT.COLOR_BLACK);
    table.addLabelItem(actionKeyword + ""String_Node_Str"" + Names.vm2srcSimpleMethod(directive.getKey()),false,true,SWT.COLOR_BLACK);
    final StyledText text=SwtFactory.createStyledText(table,""String_Node_Str"" + directive.getValue() + ""String_Node_Str""+ percent+ ""String_Node_Str"",SWT.COLOR_BLACK,true);
    SwtFactory.createStyleRange(text,10 + getLength(directive.getValue()),getLength(percent) + 1,SWT.NORMAL,true,false);
  }
}","private static void displayDirectives(final Map<IMethodName,Integer> directives,final String actionKeyword,final int definitions,final Composite composite){
  final TableListing table=new TableListing(composite,4);
  for (  final Entry<IMethodName,Integer> directive : orderDirectives(directives).entrySet()) {
    final int percent=(int)Math.round(directive.getValue().doubleValue() * 100.0 / definitions);
    table.startNewRow();
    table.addCell(getLabel(percent),true,false,SWT.COLOR_BLACK);
    table.addCell(actionKeyword + ""String_Node_Str"" + Names.vm2srcSimpleMethod(directive.getKey()),false,true,SWT.COLOR_BLACK);
    final StyledText text=SwtFactory.createStyledText(table,""String_Node_Str"" + directive.getValue() + ""String_Node_Str""+ percent+ ""String_Node_Str"",SWT.COLOR_BLACK,true);
    SwtFactory.createStyleRange(text,10 + getLength(directive.getValue()),getLength(percent) + 1,SWT.NORMAL,true,false);
  }
}",0.9860064585575888
93420,"private ProviderUiJob printProposals(final ITypeName type){
  final ClassOverridePatterns directive=server.getClassOverridePatterns(type);
  if (directive == null) {
    return null;
  }
  final MethodPattern[] patterns=getPatternsSortedByFrequency(directive);
  final Integer numberOfSubclasses=computeTotalNumberOfSubclasses(patterns);
  final String text=String.format(""String_Node_Str"",numberOfSubclasses);
  final CommunityFeatures ratings=CommunityFeatures.create(type,null,this,server);
  return new ProviderUiJob(){
    @Override public void run(    final Composite composite){
      disposeChildren(composite);
      SwtFactory.createStyledText(composite,text,SWT.COLOR_BLACK,true);
      final Composite templates=SwtFactory.createGridComposite(composite,1,0,12,0,0);
      for (int i=0; i < Math.min(patterns.length,3); ++i) {
        final MethodPattern pattern=patterns[i];
        final int patternProbability=(int)(pattern.getNumberOfObservations() / numberOfSubclasses.doubleValue() * 100);
        String text2=String.format(""String_Node_Str"",i + 1,patternProbability,pattern.getNumberOfObservations());
        new TextAndFeaturesLine(templates,text2,ratings);
        final TableListing table=new TableListing(composite,4);
        final List<Entry<IMethodName,Double>> entries=getRecommendedMethodOverridesSortedByLikelihood(pattern);
        for (        final Entry<IMethodName,Double> entry : entries) {
          table.startNewRow();
          final IMethodName method=entry.getKey();
          text2=""String_Node_Str"" + method.getDeclaringType().getClassName() + ""String_Node_Str""+ Names.vm2srcSimpleMethod(method);
          table.addLabelItem(text2,false,true,SWT.COLOR_BLACK);
          table.addLabelItem(""String_Node_Str"",false,false,SWT.COLOR_BLACK);
          table.addLabelItem(String.format(""String_Node_Str"",entry.getValue() * 100),false,false,SWT.COLOR_BLUE);
        }
      }
      ratings.loadCommentsComposite(composite);
    }
  }
;
}","private ProviderUiJob printProposals(final ITypeName type){
  final ClassOverridePatterns directive=server.getClassOverridePatterns(type);
  if (directive == null) {
    return null;
  }
  final MethodPattern[] patterns=getPatternsSortedByFrequency(directive);
  final Integer numberOfSubclasses=computeTotalNumberOfSubclasses(patterns);
  final String text=String.format(""String_Node_Str"",numberOfSubclasses);
  final CommunityFeatures ratings=CommunityFeatures.create(type,null,this,server);
  return new ProviderUiJob(){
    @Override public void run(    final Composite composite){
      disposeChildren(composite);
      SwtFactory.createStyledText(composite,text,SWT.COLOR_BLACK,true);
      final Composite templates=SwtFactory.createGridComposite(composite,1,0,12,0,0);
      for (int i=0; i < Math.min(patterns.length,3); ++i) {
        final MethodPattern pattern=patterns[i];
        final int patternProbability=(int)(pattern.getNumberOfObservations() / numberOfSubclasses.doubleValue() * 100);
        String text2=String.format(""String_Node_Str"",i + 1,patternProbability,pattern.getNumberOfObservations());
        new TextAndFeaturesLine(templates,text2,ratings);
        final TableListing table=new TableListing(templates,4);
        final List<Entry<IMethodName,Double>> entries=getRecommendedMethodOverridesSortedByLikelihood(pattern);
        for (        final Entry<IMethodName,Double> entry : entries) {
          table.startNewRow();
          final IMethodName method=entry.getKey();
          text2=""String_Node_Str"" + method.getDeclaringType().getClassName() + ""String_Node_Str""+ Names.vm2srcSimpleMethod(method);
          table.addCell(text2,false,true,SWT.COLOR_BLACK);
          table.addCell(""String_Node_Str"",false,false,SWT.COLOR_BLACK);
          table.addCell(String.format(""String_Node_Str"",entry.getValue() * 100),false,false,SWT.COLOR_BLUE);
        }
      }
      ratings.loadCommentsComposite(composite);
    }
  }
;
}",0.9855146124523508
93421,"@Override public void run(final Composite composite){
  disposeChildren(composite);
  SwtFactory.createStyledText(composite,text,SWT.COLOR_BLACK,true);
  final Composite templates=SwtFactory.createGridComposite(composite,1,0,12,0,0);
  for (int i=0; i < Math.min(patterns.length,3); ++i) {
    final MethodPattern pattern=patterns[i];
    final int patternProbability=(int)(pattern.getNumberOfObservations() / numberOfSubclasses.doubleValue() * 100);
    String text2=String.format(""String_Node_Str"",i + 1,patternProbability,pattern.getNumberOfObservations());
    new TextAndFeaturesLine(templates,text2,ratings);
    final TableListing table=new TableListing(composite,4);
    final List<Entry<IMethodName,Double>> entries=getRecommendedMethodOverridesSortedByLikelihood(pattern);
    for (    final Entry<IMethodName,Double> entry : entries) {
      table.startNewRow();
      final IMethodName method=entry.getKey();
      text2=""String_Node_Str"" + method.getDeclaringType().getClassName() + ""String_Node_Str""+ Names.vm2srcSimpleMethod(method);
      table.addLabelItem(text2,false,true,SWT.COLOR_BLACK);
      table.addLabelItem(""String_Node_Str"",false,false,SWT.COLOR_BLACK);
      table.addLabelItem(String.format(""String_Node_Str"",entry.getValue() * 100),false,false,SWT.COLOR_BLUE);
    }
  }
  ratings.loadCommentsComposite(composite);
}","@Override public void run(final Composite composite){
  disposeChildren(composite);
  SwtFactory.createStyledText(composite,text,SWT.COLOR_BLACK,true);
  final Composite templates=SwtFactory.createGridComposite(composite,1,0,12,0,0);
  for (int i=0; i < Math.min(patterns.length,3); ++i) {
    final MethodPattern pattern=patterns[i];
    final int patternProbability=(int)(pattern.getNumberOfObservations() / numberOfSubclasses.doubleValue() * 100);
    String text2=String.format(""String_Node_Str"",i + 1,patternProbability,pattern.getNumberOfObservations());
    new TextAndFeaturesLine(templates,text2,ratings);
    final TableListing table=new TableListing(templates,4);
    final List<Entry<IMethodName,Double>> entries=getRecommendedMethodOverridesSortedByLikelihood(pattern);
    for (    final Entry<IMethodName,Double> entry : entries) {
      table.startNewRow();
      final IMethodName method=entry.getKey();
      text2=""String_Node_Str"" + method.getDeclaringType().getClassName() + ""String_Node_Str""+ Names.vm2srcSimpleMethod(method);
      table.addCell(text2,false,true,SWT.COLOR_BLACK);
      table.addCell(""String_Node_Str"",false,false,SWT.COLOR_BLACK);
      table.addCell(String.format(""String_Node_Str"",entry.getValue() * 100),false,false,SWT.COLOR_BLUE);
    }
  }
  ratings.loadCommentsComposite(composite);
}",0.9787234042553192
93422,"private void checkProvider(final TableItem tableItem,final Control control){
  final IJavaElementSelection lastSelection=table.getLastSelection();
  final String preferenceId=ProvidersTable.getPreferenceId((IProvider)control.getData(),lastSelection.getElementLocation());
  table.setChecked(preferenceId,tableItem.getChecked());
  if (tableItem.getGrayed()) {
    if (tableItem.getChecked()) {
      new ProviderUpdateJob(table,tableItem,lastSelection).schedule();
    }
  }
 else {
    table.setContentVisible(tableItem,tableItem.getChecked());
  }
}","private void checkProvider(final TableItem tableItem,final Control control){
  final IJavaElementSelection lastSelection=table.getLastSelection();
  final String preferenceId=ProvidersTable.getPreferenceId((IProvider)control.getData(),lastSelection.getElementLocation());
  table.setChecked(preferenceId,tableItem.getChecked());
  if (tableItem.getGrayed()) {
    if (tableItem.getChecked()) {
      new ProviderUpdateJob(table,tableItem,lastSelection).schedule();
    }
  }
 else {
    table.setContentVisible(tableItem,tableItem.getChecked(),true);
  }
}",0.995483288166215
93423,"@Test public void testProvidersTable(){
  table.addProvider(mockProviderControl(),""String_Node_Str"",null,true);
  Assert.assertEquals(1,table.getItems().length);
  table.setContext(ExtDocUtils.getSelection());
  final IJavaElementSelection lastSelection=table.getLastSelection();
  Assert.assertEquals(ExtDocUtils.getSelection(),lastSelection);
  for (  final TableItem item : table.getItems()) {
    table.setContentVisible(item,true);
  }
}","@Test public void testProvidersTable(){
  table.addProvider(mockProviderControl(),""String_Node_Str"",null,true);
  Assert.assertEquals(1,table.getItems().length);
  table.setContext(ExtDocUtils.getSelection());
  final IJavaElementSelection lastSelection=table.getLastSelection();
  Assert.assertEquals(ExtDocUtils.getSelection(),lastSelection);
  for (  final TableItem item : table.getItems()) {
    table.setContentVisible(item,true,true);
  }
}",0.9943757030371204
93424,"@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  if (!composite.isDisposed()) {
    disposeChildren(composite);
    final TextAndFeaturesLine line=new TextAndFeaturesLine(composite,text,ratings);
    line.createStyleRange(15,elementName.length(),SWT.NORMAL,false,true);
    displayProposals(proposals,calledMethods);
    comments.createContents(composite);
    composite.layout(true);
  }
  return Status.OK_STATUS;
}","@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  if (!composite.isDisposed()) {
    disposeChildren(composite);
    final TextAndFeaturesLine line=new TextAndFeaturesLine(composite,text,ratings);
    line.createStyleRange(15,elementName.length(),SWT.NORMAL,false,true);
    displayProposals(proposals,calledMethods);
    composite.layout(true);
  }
  return Status.OK_STATUS;
}",0.95260663507109
93425,"private void displayProposalsForAllMethods(final IJavaElementSelection selection,final IField field){
  try {
    final ITypeName fieldType=context.getVariable().type;
    for (    final IMethod method : field.getDeclaringType().getMethods()) {
      if (false) {
        context=new MockedIntelligentCompletionContext(selection){
          @Override public Variable getVariable(){
            return Variable.create(field.getElementName(),fieldType,ElementResolver.toRecMethod(method));
          }
        }
;
        displayProposalsForMethod(method);
      }
    }
  }
 catch (  final JavaModelException e) {
    throw new IllegalStateException(e);
  }
}","private void displayProposalsForAllMethods(final IJavaElementSelection selection,final IField field){
  try {
    final ITypeName fieldType=context.getVariable().type;
    for (    final IMethod method : field.getDeclaringType().getMethods()) {
      context=new MockedIntelligentCompletionContext(selection){
        @Override public Variable getVariable(){
          return Variable.create(field.getElementName(),fieldType,ElementResolver.toRecMethod(method));
        }
      }
;
      displayProposalsForMethod(method);
    }
  }
 catch (  final JavaModelException e) {
    throw new IllegalStateException(e);
  }
}",0.880187940485513
93426,"private boolean displayContentForMethod(final IMethodName method,final IMethodName firstDeclaration){
  final MethodSelfcallDirectives selfcalls=server.getMethodSelfcallDirectives(firstDeclaration);
  if (selfcalls == null || method == null) {
    return false;
  }
  final int definitions=selfcalls.getNumberOfDefinitions();
  final StarsRatingComposite ratings=new StarsRatingComposite(method,this,server);
  new UIJob(""String_Node_Str""){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      if (!composite.isDisposed()) {
        final String text=String.format(""String_Node_Str"",definitions,method.getName());
        disposeChildren(composite);
        displayMethodOverrideInformation(firstDeclaration.getDeclaringType().getClassName(),92,25);
        final TextAndFeaturesLine line=new TextAndFeaturesLine(composite,text,ratings);
        line.createStyleRange(29 + getLength(definitions),method.getName().length(),SWT.NORMAL,false,true);
        displayDirectives(selfcalls.getCalls(),""String_Node_Str"",definitions);
        composite.layout(true);
      }
      return Status.OK_STATUS;
    }
  }
.schedule();
  return true;
}","private boolean displayContentForMethod(final IMethodName method,final IMethodName firstDeclaration){
  final MethodSelfcallDirectives selfcalls=server.getMethodSelfcallDirectives(firstDeclaration);
  if (selfcalls == null || method == null) {
    return false;
  }
  final int definitions=selfcalls.getNumberOfDefinitions();
  final StarsRatingComposite ratings=new StarsRatingComposite(method,this,server);
  final CommentsComposite comments=CommentsComposite.create(method,this,server);
  new UIJob(""String_Node_Str""){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      if (!composite.isDisposed()) {
        disposeChildren(composite);
        final String text=String.format(""String_Node_Str"",definitions,method.getName());
        final TextAndFeaturesLine line=new TextAndFeaturesLine(composite,text,ratings);
        line.createStyleRange(29 + getLength(definitions),method.getName().length(),SWT.NORMAL,false,true);
        displayDirectives(selfcalls.getCalls(),""String_Node_Str"",definitions);
        comments.createContents(composite);
        composite.layout(true);
      }
      return Status.OK_STATUS;
    }
  }
.schedule();
  return true;
}",0.8742058449809402
93427,"private boolean displayContentForType(final ITypeName type){
  final ClassOverrideDirectives overrides=server.getClassOverrideDirectives(type);
  if (overrides == null) {
    return false;
  }
  final String elementName=type.getClassName();
  final int subclasses=overrides.getNumberOfSubclasses();
  final String text=""String_Node_Str"" + subclasses + ""String_Node_Str""+ elementName+ ""String_Node_Str"";
  final String text2=""String_Node_Str"";
  final ClassSelfcallDirectives calls=server.getClassSelfcallDirectives(type);
  final StarsRatingComposite ratings=new StarsRatingComposite(type,this,server);
  new UIJob(""String_Node_Str""){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      if (!composite.isDisposed()) {
        disposeChildren(composite);
        final TextAndFeaturesLine line=new TextAndFeaturesLine(composite,text,ratings);
        line.createStyleRange(31 + getLength(subclasses),elementName.length(),SWT.NORMAL,false,true);
        displayDirectives(overrides.getOverrides(),""String_Node_Str"",subclasses);
        if (calls != null) {
          new TextAndFeaturesLine(composite,text2,ratings);
          displayDirectives(calls.getCalls(),""String_Node_Str"",calls.getNumberOfSubclasses());
        }
        composite.layout(true);
      }
      return Status.OK_STATUS;
    }
  }
.schedule();
  return true;
}","private boolean displayContentForType(final ITypeName type){
  final ClassOverrideDirectives overrides=server.getClassOverrideDirectives(type);
  if (overrides == null) {
    return false;
  }
  final String elementName=type.getClassName();
  final int subclasses=overrides.getNumberOfSubclasses();
  final String text=""String_Node_Str"" + subclasses + ""String_Node_Str""+ elementName+ ""String_Node_Str"";
  final String text2=""String_Node_Str"";
  final ClassSelfcallDirectives calls=server.getClassSelfcallDirectives(type);
  final StarsRatingComposite ratings=new StarsRatingComposite(type,this,server);
  final CommentsComposite comments=CommentsComposite.create(type,this,server);
  new UIJob(""String_Node_Str""){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      if (!composite.isDisposed()) {
        disposeChildren(composite);
        final TextAndFeaturesLine line=new TextAndFeaturesLine(composite,text,ratings);
        line.createStyleRange(31 + getLength(subclasses),elementName.length(),SWT.NORMAL,false,true);
        displayDirectives(overrides.getOverrides(),""String_Node_Str"",subclasses);
        if (calls != null) {
          new TextAndFeaturesLine(composite,text2,ratings);
          displayDirectives(calls.getCalls(),""String_Node_Str"",calls.getNumberOfSubclasses());
        }
        comments.createContents(composite);
        composite.layout(true);
      }
      return Status.OK_STATUS;
    }
  }
.schedule();
  return true;
}",0.956857243072606
93428,"@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  if (!composite.isDisposed()) {
    final String text=String.format(""String_Node_Str"",definitions,method.getName());
    disposeChildren(composite);
    displayMethodOverrideInformation(firstDeclaration.getDeclaringType().getClassName(),92,25);
    final TextAndFeaturesLine line=new TextAndFeaturesLine(composite,text,ratings);
    line.createStyleRange(29 + getLength(definitions),method.getName().length(),SWT.NORMAL,false,true);
    displayDirectives(selfcalls.getCalls(),""String_Node_Str"",definitions);
    composite.layout(true);
  }
  return Status.OK_STATUS;
}","@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  if (!composite.isDisposed()) {
    disposeChildren(composite);
    final String text=String.format(""String_Node_Str"",definitions,method.getName());
    final TextAndFeaturesLine line=new TextAndFeaturesLine(composite,text,ratings);
    line.createStyleRange(29 + getLength(definitions),method.getName().length(),SWT.NORMAL,false,true);
    displayDirectives(selfcalls.getCalls(),""String_Node_Str"",definitions);
    comments.createContents(composite);
    composite.layout(true);
  }
  return Status.OK_STATUS;
}",0.8368678629690048
93429,"private boolean printProposals(final ITypeName type){
  final ClassOverridePatterns directive=server.getClassOverridePatterns(type);
  if (directive == null) {
    return false;
  }
  final MethodPattern[] patterns=getPatternsSortedByFrequency(directive);
  final Integer numberOfSubclasses=computeTotalNumberOfSubclasses(patterns);
  final String text=String.format(""String_Node_Str"",numberOfSubclasses);
  final StarsRatingComposite ratings=new StarsRatingComposite(type,this,server);
  new UIJob(""String_Node_Str""){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      if (!composite.isDisposed()) {
        disposeChildren(composite);
        SwtFactory.createStyledText(composite,text);
        final Composite templates=SwtFactory.createGridComposite(composite,1,0,12,0,0);
        for (int i=0; i < Math.min(patterns.length,3); ++i) {
          final MethodPattern pattern=patterns[i];
          final double patternProbability=pattern.getNumberOfObservations() / numberOfSubclasses.doubleValue();
          String text2=String.format(""String_Node_Str"",i + 1,patternProbability,pattern.getNumberOfObservations());
          new TextAndFeaturesLine(templates,text2,ratings);
          final Composite template=SwtFactory.createGridComposite(templates,4,12,2,12,0);
          final List<Entry<IMethodName,Double>> entries=getRecommendedMethodOverridesSortedByLikelihood(pattern);
          for (          final Entry<IMethodName,Double> entry : entries) {
            SwtFactory.createSquare(template);
            final IMethodName method=entry.getKey();
            text2=""String_Node_Str"" + method.getDeclaringType().getClassName() + ""String_Node_Str""+ Names.vm2srcSimpleMethod(method);
            SwtFactory.createLabel(template,text2,false,true,SWT.COLOR_BLACK);
            SwtFactory.createLabel(template,""String_Node_Str"");
            SwtFactory.createLabel(template,String.format(""String_Node_Str"",entry.getValue() * 100),false,false,SWT.COLOR_BLUE);
          }
        }
        composite.layout(true);
      }
      return Status.OK_STATUS;
    }
  }
.schedule();
  return true;
}","private boolean printProposals(final ITypeName type){
  final ClassOverridePatterns directive=server.getClassOverridePatterns(type);
  if (directive == null) {
    return false;
  }
  final MethodPattern[] patterns=getPatternsSortedByFrequency(directive);
  final Integer numberOfSubclasses=computeTotalNumberOfSubclasses(patterns);
  final String text=String.format(""String_Node_Str"",numberOfSubclasses);
  final StarsRatingComposite ratings=new StarsRatingComposite(type,this,server);
  final CommentsComposite comments=CommentsComposite.create(type,this,server);
  new UIJob(""String_Node_Str""){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      if (!composite.isDisposed()) {
        disposeChildren(composite);
        SwtFactory.createStyledText(composite,text);
        final Composite templates=SwtFactory.createGridComposite(composite,1,0,12,0,0);
        for (int i=0; i < Math.min(patterns.length,3); ++i) {
          final MethodPattern pattern=patterns[i];
          final int patternProbability=(int)(pattern.getNumberOfObservations() / numberOfSubclasses.doubleValue() * 100);
          String text2=String.format(""String_Node_Str"",i + 1,patternProbability,pattern.getNumberOfObservations());
          new TextAndFeaturesLine(templates,text2,ratings);
          final Composite template=SwtFactory.createGridComposite(templates,4,12,2,12,0);
          final List<Entry<IMethodName,Double>> entries=getRecommendedMethodOverridesSortedByLikelihood(pattern);
          for (          final Entry<IMethodName,Double> entry : entries) {
            SwtFactory.createSquare(template);
            final IMethodName method=entry.getKey();
            text2=""String_Node_Str"" + method.getDeclaringType().getClassName() + ""String_Node_Str""+ Names.vm2srcSimpleMethod(method);
            SwtFactory.createLabel(template,text2,false,true,SWT.COLOR_BLACK);
            SwtFactory.createLabel(template,""String_Node_Str"");
            SwtFactory.createLabel(template,String.format(""String_Node_Str"",entry.getValue() * 100),false,false,SWT.COLOR_BLUE);
          }
        }
        comments.createContents(composite);
        composite.layout(true);
      }
      return Status.OK_STATUS;
    }
  }
.schedule();
  return true;
}",0.9670229702069592
93430,"@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  if (!composite.isDisposed()) {
    disposeChildren(composite);
    SwtFactory.createStyledText(composite,text);
    final Composite templates=SwtFactory.createGridComposite(composite,1,0,12,0,0);
    for (int i=0; i < Math.min(patterns.length,3); ++i) {
      final MethodPattern pattern=patterns[i];
      final double patternProbability=pattern.getNumberOfObservations() / numberOfSubclasses.doubleValue();
      String text2=String.format(""String_Node_Str"",i + 1,patternProbability,pattern.getNumberOfObservations());
      new TextAndFeaturesLine(templates,text2,ratings);
      final Composite template=SwtFactory.createGridComposite(templates,4,12,2,12,0);
      final List<Entry<IMethodName,Double>> entries=getRecommendedMethodOverridesSortedByLikelihood(pattern);
      for (      final Entry<IMethodName,Double> entry : entries) {
        SwtFactory.createSquare(template);
        final IMethodName method=entry.getKey();
        text2=""String_Node_Str"" + method.getDeclaringType().getClassName() + ""String_Node_Str""+ Names.vm2srcSimpleMethod(method);
        SwtFactory.createLabel(template,text2,false,true,SWT.COLOR_BLACK);
        SwtFactory.createLabel(template,""String_Node_Str"");
        SwtFactory.createLabel(template,String.format(""String_Node_Str"",entry.getValue() * 100),false,false,SWT.COLOR_BLUE);
      }
    }
    composite.layout(true);
  }
  return Status.OK_STATUS;
}","@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  if (!composite.isDisposed()) {
    disposeChildren(composite);
    SwtFactory.createStyledText(composite,text);
    final Composite templates=SwtFactory.createGridComposite(composite,1,0,12,0,0);
    for (int i=0; i < Math.min(patterns.length,3); ++i) {
      final MethodPattern pattern=patterns[i];
      final int patternProbability=(int)(pattern.getNumberOfObservations() / numberOfSubclasses.doubleValue() * 100);
      String text2=String.format(""String_Node_Str"",i + 1,patternProbability,pattern.getNumberOfObservations());
      new TextAndFeaturesLine(templates,text2,ratings);
      final Composite template=SwtFactory.createGridComposite(templates,4,12,2,12,0);
      final List<Entry<IMethodName,Double>> entries=getRecommendedMethodOverridesSortedByLikelihood(pattern);
      for (      final Entry<IMethodName,Double> entry : entries) {
        SwtFactory.createSquare(template);
        final IMethodName method=entry.getKey();
        text2=""String_Node_Str"" + method.getDeclaringType().getClassName() + ""String_Node_Str""+ Names.vm2srcSimpleMethod(method);
        SwtFactory.createLabel(template,text2,false,true,SWT.COLOR_BLACK);
        SwtFactory.createLabel(template,""String_Node_Str"");
        SwtFactory.createLabel(template,String.format(""String_Node_Str"",entry.getValue() * 100),false,false,SWT.COLOR_BLUE);
      }
    }
    comments.createContents(composite);
    composite.layout(true);
  }
  return Status.OK_STATUS;
}",0.97927807486631
93431,"@Override public IStatus run(final IProgressMonitor monitor){
  try {
    monitor.beginTask(""String_Node_Str"",1);
    updateProvider();
    return Status.OK_STATUS;
  }
  finally {
    monitor.done();
    active.remove(this);
  }
}","@Override public IStatus run(final IProgressMonitor monitor){
  try {
    monitor.beginTask(""String_Node_Str"",1);
    try {
      updateProvider();
    }
 catch (    final Exception e) {
      e.printStackTrace();
    }
    return Status.OK_STATUS;
  }
  finally {
    monitor.done();
    active.remove(this);
  }
}",0.8461538461538461
93432,"@Override public void setMethodContext(IMethodName newActiveMethodContext){
  if (newActiveMethodContext == null) {
    newActiveMethodContext=NetworkUtils.CTX_NULL;
  }
  junctionTree.addEvidence(contextNode,newActiveMethodContext.getIdentifier());
}","@Override public void setMethodContext(IMethodName newActiveMethodContext){
  if (newActiveMethodContext == null) {
    newActiveMethodContext=NetworkUtils.CTX_NULL;
  }
  final String identifier=newActiveMethodContext.getIdentifier();
  if (contextNode.getOutcomes().contains(identifier)) {
    junctionTree.addEvidence(contextNode,identifier);
  }
}",0.707641196013289
93433,"public void invalidateManifest(final IPackageFragmentRoot packageFragmentRoot){
  resource2manifestId.remove(packageFragmentRoot);
}","public void invalidateManifest(final IPackageFragmentRoot packageFragmentRoot){
  final File file=getLocation(packageFragmentRoot);
  resource2manifestId.remove(file);
}",0.7574750830564784
93434,"public static IPackageFragmentRoot getPackageFragmentRoot(final IPackageFragment packageFragment){
  IJavaElement currentElement=packageFragment;
  while (!(currentElement instanceof IPackageFragmentRoot)) {
    currentElement=currentElement.getParent();
  }
  return (IPackageFragmentRoot)currentElement;
}","public static IPackageFragmentRoot getPackageFragmentRoot(final IPackageFragment packageFragment){
  return (IPackageFragmentRoot)packageFragment.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);
}",0.5765407554671969
93435,"public static AbstractJavaCompletionProposal createFromJDTProposal(final SubwordsProposalContext subwordsContext){
  final IJavaCompletionProposal jdtProposal=subwordsContext.getJdtProposal();
  if (jdtProposal instanceof JavaMethodCompletionProposal) {
    return SubwordsJavaMethodCompletionProposal.create(subwordsContext);
  }
 else   if (jdtProposal instanceof JavaCompletionProposal) {
    return SubwordsJavaCompletionProposal.create(subwordsContext);
  }
 else   if (jdtProposal instanceof LazyJavaTypeCompletionProposal) {
    return SubwordsJavaTypeCompletionProposal.create(subwordsContext);
  }
 else   if (jdtProposal instanceof JavaFieldWithCastedReceiverCompletionProposal) {
    return SubwordsFieldCastedCompletionProposal.create(subwordsContext);
  }
 else   if (jdtProposal instanceof OverrideCompletionProposal) {
    return SubwordsOverrideCompletionProposal.create(subwordsContext);
  }
 else   if (jdtProposal instanceof AnonymousTypeCompletionProposal) {
    try {
      return SubwordsAnonymousCompletionProposal.create(subwordsContext);
    }
 catch (    final CoreException e) {
      throw new RuntimeException(e);
    }
  }
 else {
    return null;
  }
}","public static AbstractJavaCompletionProposal createFromJDTProposal(final SubwordsProposalContext subwordsContext){
  final IJavaCompletionProposal jdtProposal=subwordsContext.getJdtProposal();
  if (jdtProposal instanceof JavaMethodCompletionProposal) {
    return SubwordsJavaMethodCompletionProposal.create(subwordsContext);
  }
 else   if (jdtProposal instanceof JavaFieldWithCastedReceiverCompletionProposal) {
    return SubwordsFieldCastedCompletionProposal.create(subwordsContext);
  }
 else   if (jdtProposal instanceof OverrideCompletionProposal) {
    return SubwordsOverrideCompletionProposal.create(subwordsContext);
  }
 else   if (jdtProposal instanceof AnonymousTypeCompletionProposal) {
    try {
      return SubwordsAnonymousCompletionProposal.create(subwordsContext);
    }
 catch (    final CoreException e) {
      throw new RuntimeException(e);
    }
  }
 else   if (jdtProposal instanceof JavaCompletionProposal) {
    return SubwordsJavaCompletionProposal.create(subwordsContext);
  }
 else   if (jdtProposal instanceof LazyJavaTypeCompletionProposal) {
    return SubwordsJavaTypeCompletionProposal.create(subwordsContext);
  }
 else {
    return null;
  }
}",0.5350803043110736
93436,"@Before public void before(){
  sut=createJavaCompletionProposal();
}","@Before public void before() throws JavaModelException {
  sut=createJavaCompletionProposal();
}",0.8363636363636363
93437,"private SubwordsJavaMethodCompletionProposal createJavaCompletionProposal(){
  final CompletionProposal dummyProposal=mockCompletionProposal(CompletionProposal.METHOD_REF,c1);
  final JavaContentAssistInvocationContext dummyInvocationContext=mockInvocationContext();
  final SubwordsProposalContext subwordsContext=new SubwordsProposalContext(""String_Node_Str"",dummyProposal,mockJdtCompletion(c1),dummyInvocationContext);
  final SubwordsJavaMethodCompletionProposal someSubwordsProposal=SubwordsJavaMethodCompletionProposal.create(subwordsContext);
  return someSubwordsProposal;
}","private SubwordsJavaMethodCompletionProposal createJavaCompletionProposal() throws JavaModelException {
  final CompletionProposal dummyProposal=mockCompletionProposal(CompletionProposal.METHOD_REF,c1);
  final JavaContentAssistInvocationContext dummyInvocationContext=mockInvocationContext();
  final SubwordsProposalContext subwordsContext=new SubwordsProposalContext(""String_Node_Str"",dummyProposal,mockJdtCompletion(c1),dummyInvocationContext);
  final SubwordsJavaMethodCompletionProposal someSubwordsProposal=SubwordsJavaMethodCompletionProposal.create(subwordsContext);
  return someSubwordsProposal;
}",0.9773299748110832
93438,"@Test public void testHappyPath(){
  final CompletionProposal proposal=mockCompletionProposal(METHOD_REF,""String_Node_Str"");
  final SubwordsCompletionRequestor sut=createSut(""String_Node_Str"");
  sut.accept(proposal);
  assertNumberOfAcceptedProposals(1,sut);
}","@Test public void testHappyPath() throws JavaModelException {
  final CompletionProposal proposal=mockCompletionProposal(METHOD_REF,""String_Node_Str"");
  final SubwordsCompletionRequestor sut=createSut(""String_Node_Str"");
  sut.accept(proposal);
  assertNumberOfAcceptedProposals(1,sut);
}",0.9509981851179672
93439,"@Test public void testCompletionMatchButWrongProposalKind(){
  final CompletionProposal proposal=mockCompletionProposal(JAVADOC_BLOCK_TAG,""String_Node_Str"");
  final SubwordsCompletionRequestor sut=createSut(""String_Node_Str"");
  sut.accept(proposal);
  assertNumberOfAcceptedProposals(0,sut);
}","@Test public void testCompletionMatchButWrongProposalKind() throws JavaModelException {
  final CompletionProposal proposal=mockCompletionProposal(JAVADOC_BLOCK_TAG,""String_Node_Str"");
  final SubwordsCompletionRequestor sut=createSut(""String_Node_Str"");
  sut.accept(proposal);
  assertNumberOfAcceptedProposals(0,sut);
}",0.9562398703403564
93440,"private SubwordsCompletionRequestor createSut(final String token){
  return new SubwordsCompletionRequestor(token,mockInvocationContext());
}","private SubwordsCompletionRequestor createSut(final String token) throws JavaModelException {
  return new SubwordsCompletionRequestor(token,mockInvocationContext());
}",0.912621359223301
93441,"@Test public void testRightProposalKindButNoCompletionMatch(){
  final CompletionProposal proposal=mockCompletionProposal(METHOD_REF,""String_Node_Str"");
  final SubwordsCompletionRequestor sut=createSut(""String_Node_Str"");
  sut.accept(proposal);
  assertNumberOfAcceptedProposals(0,sut);
}","@Test public void testRightProposalKindButNoCompletionMatch() throws JavaModelException {
  final CompletionProposal proposal=mockCompletionProposal(METHOD_REF,""String_Node_Str"");
  final SubwordsCompletionRequestor sut=createSut(""String_Node_Str"");
  sut.accept(proposal);
  assertNumberOfAcceptedProposals(0,sut);
}",0.9555189456342668
93442,"public static CompletionProposal mockCompletionProposal(final int proposalKind,final String completion){
  final CompletionProposal mock=mockCompletionProposal();
  when(mock.getKind()).thenReturn(proposalKind);
  when(mock.getCompletion()).thenReturn(completion.toCharArray());
  when(mock.getName()).thenReturn(completion.toCharArray());
  when(mock.getSignature()).thenReturn(""String_Node_Str"".toCharArray());
  return mock;
}","public static CompletionProposal mockCompletionProposal(final int proposalKind,final String completion){
  final CompletionProposal mock=mockCompletionProposal();
  when(mock.getKind()).thenReturn(proposalKind);
  when(mock.getCompletion()).thenReturn(completion.toCharArray());
  when(mock.getName()).thenReturn(completion.toCharArray());
  when(mock.getSignature()).thenReturn(""String_Node_Str"".toCharArray());
  when(mock.getDeclarationKey()).thenReturn(new char[0]);
  when(mock.getDeclarationSignature()).thenReturn(""String_Node_Str"".toCharArray());
  return mock;
}",0.858
93443,"public static JavaContentAssistInvocationContext mockInvocationContext(final String token){
  final JavaContentAssistInvocationContext javaContext=mockInvocationContext();
  final CompletionContext coreContext=javaContext.getCoreContext();
  when(coreContext.getToken()).thenReturn(token.toCharArray());
  return javaContext;
}","public static JavaContentAssistInvocationContext mockInvocationContext(final String token) throws JavaModelException {
  final JavaContentAssistInvocationContext javaContext=mockInvocationContext();
  final CompletionContext coreContext=javaContext.getCoreContext();
  when(coreContext.getToken()).thenReturn(token.toCharArray());
  return javaContext;
}",0.960352422907489
93444,"public static ICompilationUnit mockICompilationUnit(){
  return mock(ICompilationUnit.class);
}","public static ICompilationUnit mockICompilationUnit() throws JavaModelException {
  final ICompilationUnit cu=mock(ICompilationUnit.class);
  final IJavaProject javaProject=mockJavaProject();
  when(cu.getJavaProject()).thenReturn(javaProject);
  return cu;
}",0.4971751412429379
93445,"private int calculateDistance(final String completion){
  return SubwordsNGramsDistance.calculateRelevanceDistance(token,completion,2);
}","private int calculateDistance(final String completion){
  return SubwordsRelevanceCalculator.calculateRelevance(token,completion);
}",0.8698884758364313
93446,"private SubwordsJavaMethodCompletionProposal createJavaCompletionProposal(){
  final CompletionProposal dummyProposal=mockCompletionProposal(CompletionProposal.METHOD_REF,c1);
  final JavaContentAssistInvocationContext dummyInvocationContext=mockInvocationContext();
  final SubwordsProposalContext subwordsContext=new SubwordsProposalContext(""String_Node_Str"",dummyProposal,mockJdtCompletion(),dummyInvocationContext);
  final SubwordsJavaMethodCompletionProposal someSubwordsProposal=SubwordsJavaMethodCompletionProposal.create(subwordsContext);
  return someSubwordsProposal;
}","private SubwordsJavaMethodCompletionProposal createJavaCompletionProposal(){
  final CompletionProposal dummyProposal=mockCompletionProposal(CompletionProposal.METHOD_REF,c1);
  final JavaContentAssistInvocationContext dummyInvocationContext=mockInvocationContext();
  final SubwordsProposalContext subwordsContext=new SubwordsProposalContext(""String_Node_Str"",dummyProposal,mockJdtCompletion(c1),dummyInvocationContext);
  final SubwordsJavaMethodCompletionProposal someSubwordsProposal=SubwordsJavaMethodCompletionProposal.create(subwordsContext);
  return someSubwordsProposal;
}",0.9982788296041308
93447,"@Test public void testHappyPath(){
  final CompletionProposal proposal=mockCompletionProposal(METHOD_REF,""String_Node_Str"");
  final SubwordsCompletionRequestor sut=createSut(""String_Node_Str"");
  sut.accept(proposal);
  assertNumberOfAcceptedProposals(1,sut);
}","@Test @Ignore public void testHappyPath(){
  final CompletionProposal proposal=mockCompletionProposal(METHOD_REF,""String_Node_Str"");
  final SubwordsCompletionRequestor sut=createSut(""String_Node_Str"");
  sut.accept(proposal);
  assertNumberOfAcceptedProposals(1,sut);
}",0.9849624060150376
93448,"public static CompletionProposal mockCompletionProposal(final int proposalKind,final String completion){
  final CompletionProposal mock=mockCompletionProposal();
  when(mock.getKind()).thenReturn(proposalKind);
  when(mock.getCompletion()).thenReturn(completion.toCharArray());
  return mock;
}","public static CompletionProposal mockCompletionProposal(final int proposalKind,final String completion){
  final CompletionProposal mock=mockCompletionProposal();
  when(mock.getKind()).thenReturn(proposalKind);
  when(mock.getCompletion()).thenReturn(completion.toCharArray());
  when(mock.getName()).thenReturn(completion.toCharArray());
  return mock;
}",0.9062980030721968
93449,"public static JavaCompletionProposal mockJdtCompletion(){
  return mock(JavaCompletionProposal.class);
}","public static JavaCompletionProposal mockJdtCompletion(final String proposalDisplayString){
  final JavaCompletionProposal mock=mock(JavaCompletionProposal.class);
  when(mock.getDisplayString()).thenReturn(proposalDisplayString);
  return mock;
}",0.3931623931623931
93450,"@Override public boolean selectionChanged(final IJavaElementSelection context){
  if (context.getJavaElement() != null) {
    javadoc.setInput(context.getJavaElement());
    final Browser browser=(Browser)javadoc.getControl();
    browser.setSize(browser.getSize().x,5);
  }
  return context.getJavaElement() != null;
}","@Override public boolean selectionChanged(final IJavaElementSelection context){
  if (context.getJavaElement() != null) {
    javadoc.setInput(context.getJavaElement());
    setBrowserSizeLayoutDataAndTriggerLayout(20);
  }
  return context.getJavaElement() != null;
}",0.8040885860306644
93451,"@Override public void run(){
  final Browser browser=(Browser)javadoc.getControl();
  final Object result=browser.evaluate(""String_Node_Str"");
  browser.setSize(browser.getSize().x,(int)Math.ceil((Double)result));
  browser.getParent().layout(true);
}","@Override public void run(){
  final Browser browser=(Browser)javadoc.getControl();
  final Object result=browser.evaluate(""String_Node_Str"");
  final int height=(int)Math.ceil((Double)result);
  setBrowserSizeLayoutDataAndTriggerLayout(height);
}",0.6465863453815262
93452,"@Override public void completed(final ProgressEvent event){
  Display.getCurrent().asyncExec(new Runnable(){
    @Override public void run(){
      final Browser browser=(Browser)javadoc.getControl();
      final Object result=browser.evaluate(""String_Node_Str"");
      browser.setSize(browser.getSize().x,(int)Math.ceil((Double)result));
      browser.getParent().layout(true);
    }
  }
);
}","@Override public void completed(final ProgressEvent event){
  Display.getCurrent().asyncExec(new Runnable(){
    @Override public void run(){
      final Browser browser=(Browser)javadoc.getControl();
      final Object result=browser.evaluate(""String_Node_Str"");
      final int height=(int)Math.ceil((Double)result);
      setBrowserSizeLayoutDataAndTriggerLayout(height);
    }
  }
);
}",0.7621483375959079
93453,"@Override public Control createControl(final Composite parent,final IWorkbenchPartSite partSite){
  javadoc=new ExtendedJavadocView(parent,partSite);
  javadoc.getControl().setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  javadoc.getControl().setSize(-1,250);
  final Browser browser=(Browser)javadoc.getControl();
  browser.addProgressListener(this);
  browser.setJavascriptEnabled(true);
  return javadoc.getControl();
}","@Override public Control createControl(final Composite parent,final IWorkbenchPartSite partSite){
  javadoc=new ExtendedJavadocView(parent,partSite);
  setBrowserSizeLayoutDataAndTriggerLayout(20);
  final Browser browser=(Browser)javadoc.getControl();
  browser.addProgressListener(this);
  browser.setJavascriptEnabled(true);
  return javadoc.getControl();
}",0.4775
93454,"/** 
 * @param locationNodeType The type of the AST node indicating the element's location.
 * @param javaElement The Java element to identify the location for.
 * @return The {@link JavaElementLocation} for the given Java element andits location node type.
 */
private static JavaElementLocation getLocationForNodeType(final int locationNodeType,final IJavaElement javaElement){
switch (locationNodeType) {
case ASTNode.BLOCK:
case ASTNode.SUPER_CONSTRUCTOR_INVOCATION:
    return JavaElementLocation.BLOCK;
case ASTNode.METHOD_DECLARATION:
  return JavaElementLocation.METHOD_DECLARATION;
case ASTNode.SINGLE_VARIABLE_DECLARATION:
return JavaElementLocation.METHOD_DECLARATION_PARAMETER;
case ASTNode.FIELD_DECLARATION:
return JavaElementLocation.FIELD_DECLARATION;
case ASTNode.TYPE_DECLARATION:
return getTypeDeclarationLocation(javaElement);
case ASTNode.IMPORT_DECLARATION:
return JavaElementLocation.IMPORT_DECLARATION;
case ASTNode.PACKAGE_DECLARATION:
return JavaElementLocation.PACKAGE_DECLARATION;
default :
throw new IllegalArgumentException(""String_Node_Str"" + locationNodeType);
}
}","/** 
 * @param locationNodeType The type of the AST node indicating the element's location.
 * @param javaElement The Java element to identify the location for.
 * @return The {@link JavaElementLocation} for the given Java element andits location node type.
 */
private static JavaElementLocation getLocationForNodeType(final int locationNodeType,final IJavaElement javaElement){
switch (locationNodeType) {
case ASTNode.BLOCK:
case ASTNode.SUPER_CONSTRUCTOR_INVOCATION:
case ASTNode.CAST_EXPRESSION:
    return JavaElementLocation.BLOCK;
case ASTNode.METHOD_DECLARATION:
  return JavaElementLocation.METHOD_DECLARATION;
case ASTNode.SINGLE_VARIABLE_DECLARATION:
return JavaElementLocation.METHOD_DECLARATION_PARAMETER;
case ASTNode.FIELD_DECLARATION:
return JavaElementLocation.FIELD_DECLARATION;
case ASTNode.TYPE_DECLARATION:
return getTypeDeclarationLocation(javaElement);
case ASTNode.IMPORT_DECLARATION:
return JavaElementLocation.IMPORT_DECLARATION;
case ASTNode.PACKAGE_DECLARATION:
return JavaElementLocation.PACKAGE_DECLARATION;
default :
throw new IllegalArgumentException(""String_Node_Str"" + locationNodeType);
}
}",0.9864986498649864
93455,"private boolean displayContentForMethod(final IMethod element){
  try {
    disposeContainerChildren();
    final IMethod overriddenMethod=SuperTypeHierarchyCache.getMethodOverrideTester(element.getDeclaringType()).findOverriddenMethod(element,true);
    if (overriddenMethod == null) {
      return false;
    }
    final CodeExamples codeExamples=server.getOverridenMethodCodeExamples(overriddenMethod);
    final CodeSnippet[] snippets=codeExamples.getExamples();
    for (int i=0; i < snippets.length; i++) {
      createSnippetVisualization(i,element,snippets[i]);
    }
    container.layout(true);
  }
 catch (  final JavaModelException e) {
    e.printStackTrace();
  }
  return true;
}","private boolean displayContentForMethod(final IMethod element){
  try {
    disposeContainerChildren();
    final IMethod overriddenMethod=SuperTypeHierarchyCache.getMethodOverrideTester(element.getDeclaringType()).findOverriddenMethod(element,true);
    if (overriddenMethod == null) {
      return false;
    }
    final CodeExamples codeExamples=server.getOverridenMethodCodeExamples(overriddenMethod);
    if (codeExamples == null) {
      return false;
    }
    final CodeSnippet[] snippets=codeExamples.getExamples();
    for (int i=0; i < snippets.length; i++) {
      createSnippetVisualization(i,element,snippets[i]);
    }
    container.layout(true);
  }
 catch (  final JavaModelException e) {
    e.printStackTrace();
  }
  return true;
}",0.9598337950138504
93456,"private void displayDirectives(final Map<IMethodName,Integer> directives,final String actionKeyword,final int definitions){
  final Composite directiveComposite=SwtFactory.createGridComposite(composite,4,12,3,15,0);
  final Map<IMethodName,Integer> orderedMap=new TreeMap<IMethodName,Integer>(new Comparator<IMethodName>(){
    @Override public int compare(    final IMethodName o1,    final IMethodName o2){
      return directives.get(o2).compareTo(directives.get(o1));
    }
  }
);
  orderedMap.putAll(directives);
  for (  final Entry<IMethodName,Integer> directive : orderedMap.entrySet()) {
    final int percent=(int)Math.round(directive.getValue() * 100.0 / definitions);
    SwtFactory.createSquare(directiveComposite);
    SwtFactory.createLabel(directiveComposite,getLabel(percent),true,false,false);
    SwtFactory.createLabel(directiveComposite,actionKeyword + ""String_Node_Str"" + Names.vm2srcSimpleMethod(directive.getKey()),false,false,true);
    final StyledText txt=SwtFactory.createStyledText(directiveComposite,""String_Node_Str"" + directive.getValue() + ""String_Node_Str""+ percent+ ""String_Node_Str"");
    SwtFactory.createStyleRange(txt,10 + getLength(directive.getValue()),getLength(percent) + 1,SWT.NORMAL,true,false);
  }
}","private void displayDirectives(final Map<IMethodName,Integer> directives,final String actionKeyword,final int definitions){
  final Composite directiveComposite=SwtFactory.createGridComposite(composite,4,12,2,15,0);
  final Map<IMethodName,Integer> orderedMap=new TreeMap<IMethodName,Integer>(new Comparator<IMethodName>(){
    @Override public int compare(    final IMethodName o1,    final IMethodName o2){
      return directives.get(o2).compareTo(directives.get(o1));
    }
  }
);
  orderedMap.putAll(directives);
  for (  final Entry<IMethodName,Integer> directive : orderedMap.entrySet()) {
    final int percent=(int)Math.round(directive.getValue() * 100.0 / definitions);
    SwtFactory.createSquare(directiveComposite);
    SwtFactory.createLabel(directiveComposite,getLabel(percent),true,false,false);
    SwtFactory.createLabel(directiveComposite,actionKeyword + ""String_Node_Str"" + Names.vm2srcSimpleMethod(directive.getKey()),false,false,true);
    final StyledText txt=SwtFactory.createStyledText(directiveComposite,""String_Node_Str"" + directive.getValue() + ""String_Node_Str""+ percent+ ""String_Node_Str"");
    SwtFactory.createStyleRange(txt,10 + getLength(directive.getValue()),getLength(percent) + 1,SWT.NORMAL,true,false);
  }
}",0.9991974317817014
93457,"private void printProposals(final IJavaElement element){
  final int subclasses=123;
  styledText.setText(""String_Node_Str"" + subclasses + ""String_Node_Str"");
  if (templates != null) {
    templates.dispose();
  }
  templates=SwtFactory.createGridComposite(composite,1,0,12,0,0);
  for (int i=0; i < 2; ++i) {
    final String text=""String_Node_Str"";
    final TextAndFeaturesLine line=new TextAndFeaturesLine(templates,text,element,element.getElementName(),this,server,new TemplateEditDialog(getShell()));
    line.createStyleRange(0,16,SWT.BOLD,false,false);
    line.createStyleRange(40,3,SWT.NORMAL,true,false);
    final Composite template=SwtFactory.createGridComposite(templates,5,12,3,12,0);
    for (int j=0; j < 3; ++j) {
      SwtFactory.createSquare(template);
      SwtFactory.createLabel(template,""String_Node_Str"",true,false,false);
      SwtFactory.createLabel(template,""String_Node_Str"",false,false,true);
      SwtFactory.createLabel(template,""String_Node_Str"",false,false,false);
      SwtFactory.createLabel(template,""String_Node_Str"",false,true,false);
    }
  }
  composite.layout(true);
}","private void printProposals(final IJavaElement element){
  final int subclasses=123;
  styledText.setText(""String_Node_Str"" + subclasses + ""String_Node_Str"");
  if (templates != null) {
    templates.dispose();
  }
  templates=SwtFactory.createGridComposite(composite,1,0,12,0,0);
  for (int i=0; i < 2; ++i) {
    final String text=""String_Node_Str"";
    final TextAndFeaturesLine line=new TextAndFeaturesLine(templates,text,element,element.getElementName(),this,server,new TemplateEditDialog(getShell()));
    line.createStyleRange(0,16,SWT.BOLD,false,false);
    line.createStyleRange(40,3,SWT.NORMAL,true,false);
    final Composite template=SwtFactory.createGridComposite(templates,5,12,2,12,0);
    for (int j=0; j < 3; ++j) {
      SwtFactory.createSquare(template);
      SwtFactory.createLabel(template,""String_Node_Str"",true,false,false);
      SwtFactory.createLabel(template,""String_Node_Str"",false,false,true);
      SwtFactory.createLabel(template,""String_Node_Str"",false,false,false);
      SwtFactory.createLabel(template,""String_Node_Str"",false,true,false);
    }
  }
  composite.layout(true);
}",0.9991007194244604
93458,"@Override protected boolean updateContent(final IJavaElementSelection selection){
  final IJavaElement element=selection.getJavaElement();
  String markup=null;
  if (element != null) {
    markup=server.getText(element);
  }
  if (composite != null) {
    composite.dispose();
  }
  composite=SwtFactory.createGridComposite(parentComposite,1,0,11,0,0);
  if (markup == null) {
    displayNoText(element);
  }
 else {
    displayText(element,markup);
  }
  parentComposite.layout(true);
  return true;
}","@Override protected boolean updateContent(final IJavaElementSelection selection){
  final IJavaElement element=selection.getJavaElement();
  if (element == null || element instanceof ILocalVariable) {
    return false;
  }
  if (composite != null) {
    composite.dispose();
  }
  composite=SwtFactory.createGridComposite(parentComposite,1,0,11,0,0);
  final String markup=server.getText(element);
  if (markup == null) {
    displayNoText(element);
  }
 else {
    displayText(element,markup);
  }
  parentComposite.layout(true);
  return true;
}",0.8228571428571428
93459,"@Override public void stop(final BundleContext context) throws Exception {
  preferences.flush();
  preferences=null;
  plugin=null;
  super.stop(context);
}","@Override public void stop(final BundleContext context) throws Exception {
  preferences=null;
  plugin=null;
  super.stop(context);
}",0.9209621993127148
93460,"@Override public void start(final BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  preferences=new InstanceScope().getNode(getBundle().getSymbolicName());
  preferences.sync();
}","@Override public void start(final BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  preferences=new InstanceScope().getNode(getBundle().getSymbolicName());
}",0.945273631840796
93461,"public void update(final IJavaElementSelection selection){
  if (selection != null && table != null) {
    table.setContext(selection.getElementLocation());
    for (    final TableItem item : table.getItems()) {
      if (item.getChecked()) {
        new UIJob(""String_Node_Str""){
          @Override public IStatus runInUIThread(          final IProgressMonitor monitor){
            final IProvider provider=(IProvider)((Control)item.getData()).getData();
            final boolean hasContent=provider.selectionChanged(selection);
            table.setGrayed(item,!hasContent);
            return Status.OK_STATUS;
          }
        }
.schedule();
      }
    }
    new UIJob(""String_Node_Str""){
      @Override public IStatus runInUIThread(      final IProgressMonitor monitor){
        providersComposite.layout(true);
        scrolled.layout(true);
        scrolled.setMinHeight(providersComposite.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).y);
        return Status.OK_STATUS;
      }
    }
.schedule();
  }
}","public void update(final IJavaElementSelection selection){
  if (selection != null && table != null) {
    table.setContext(selection.getElementLocation());
    for (    final TableItem item : table.getItems()) {
      if (item.getChecked()) {
        new UIJob(""String_Node_Str""){
          @Override public IStatus runInUIThread(          final IProgressMonitor monitor){
            final IProvider provider=(IProvider)((Control)item.getData()).getData();
            final boolean hasContent=provider.selectionChanged(selection);
            table.setGrayed(item,!hasContent);
            return Status.OK_STATUS;
          }
        }
.schedule();
      }
    }
    new UIJob(""String_Node_Str""){
      @Override public IStatus runInUIThread(      final IProgressMonitor monitor){
        providersComposite.layout(true);
        scrolled.layout(true);
        scrolled.setMinHeight(providersComposite.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).y);
        return Status.OK_STATUS;
      }
    }
.schedule(500);
  }
}",0.9985272459499264
93462,"public void setContext(final JavaElementLocation location){
  if (lastLocation != location) {
    preferencePrefix=location.name();
    for (    final TableItem item : table.getItems()) {
      final IProvider provider=(IProvider)((Control)item.getData()).getData();
      boolean selectProvider=false;
      if (preferences.getBoolean(preferencePrefix + provider.getProviderName(),true)) {
        selectProvider=provider.isAvailableForLocation(location);
      }
      setChecked(item,selectProvider);
      setGrayed(item,!selectProvider);
    }
    lastLocation=location;
  }
}","public void setContext(final JavaElementLocation location){
  if (lastLocation != location) {
    preferencePrefix=location == null ? ""String_Node_Str"" : location.name();
    for (    final TableItem item : table.getItems()) {
      final IProvider provider=(IProvider)((Control)item.getData()).getData();
      boolean selectProvider=false;
      if (preferences.getBoolean(preferencePrefix + provider.getProviderName(),true)) {
        selectProvider=provider.isAvailableForLocation(location);
      }
      setChecked(item,selectProvider);
      setGrayed(item,!selectProvider);
    }
    lastLocation=location;
  }
}",0.9675270607826812
93463,"@Override public final Control createControl(final Composite parent,final IWorkbenchPartSite partSite){
  composite=SwtFactory.createGridComposite(parent,1,0,6,8,10);
  final CLabel label=new CLabel(composite,SWT.NONE);
  label.setFont(JFaceResources.getFontRegistry().getBold(JFaceResources.DEFAULT_FONT));
  label.setImage(getIcon());
  label.setText(getProviderFullName());
  SwtFactory.createSeparator(composite);
  createContentControl(composite);
  return composite;
}","@Override public final Control createControl(final Composite parent,final IWorkbenchPartSite partSite){
  composite=SwtFactory.createGridComposite(parent,1,0,4,8,10);
  final CLabel label=new CLabel(composite,SWT.NONE);
  label.setFont(JFaceResources.getFontRegistry().getBold(JFaceResources.DEFAULT_FONT));
  label.setImage(getIcon());
  label.setText(getProviderFullName());
  SwtFactory.createSeparator(composite);
  createContentControl(composite);
  return composite;
}",0.9978902953586498
93464,"@Override public Variable findMatchingVariable(final String variableName){
  AbstractVariableDeclaration match=findMatchingLocalVariable(getReceiverName());
  if (match == null) {
    match=findMatchingFieldDeclaration(variableName);
  }
  if (match == null) {
    return null;
  }
  final String name=String.valueOf(match.name);
  final ITypeName type=CompilerBindings.toTypeName(match.type);
  return Variable.create(name,type,getEnclosingMethod());
}","@Override public Variable findMatchingVariable(final String variableName){
  AbstractVariableDeclaration match=findMatchingLocalVariable(getReceiverName());
  if (match == null) {
    match=findMatchingFieldDeclaration(variableName);
    if (match == null) {
      match=findMatchingLocalVariable(variableName);
    }
  }
  if (match == null) {
    return null;
  }
  final String name=String.valueOf(match.name);
  final ITypeName type=CompilerBindings.toTypeName(match.type);
  return Variable.create(name,type,getEnclosingMethod());
}",0.9151515151515152
93465,"private Set<IMethodName> resolveCalledMethods(){
  for (  final IVariableUsageResolver resolver : usageResolversProvider.get()) {
    if (resolver.canResolve(context)) {
      return resolver.getReceiverMethodInvocations();
    }
  }
  return Sets.newHashSet();
}","private Set<IMethodName> resolveCalledMethods(){
  for (  final IVariableUsageResolver resolver : usageResolversProvider.get()) {
    if (resolver.canResolve(context)) {
      final Set<IMethodName> receiverMethodInvocations=resolver.getReceiverMethodInvocations();
      return receiverMethodInvocations;
    }
  }
  return Sets.newHashSet();
}",0.8421052631578947
93466,"private boolean displayProposalsForMethod(final IMethod method){
  System.err.println(""String_Node_Str"");
  final ITypeName typeName=JavaElementResolver.INSTANCE.toRecMethod(method).getDeclaringType();
  if (modelStore.hasModel(typeName)) {
    final IObjectMethodCallsNet model=getModel(typeName,new HashSet<IMethodName>());
    final boolean success=displayProposals(method,model.getRecommendedMethodCalls(0.01,5));
    modelStore.releaseModel(model);
    return success;
  }
  return false;
}","private boolean displayProposalsForMethod(final IMethod method){
  System.err.println(""String_Node_Str"");
  final ITypeName typeName=JavaElementResolver.INSTANCE.toRecMethod(method).getDeclaringType();
  if (modelStore.hasModel(typeName)) {
    final IObjectMethodCallsNet model=getModel(typeName,new HashSet<IMethodName>());
    final boolean success=displayProposals(method,model.getRecommendedMethodCalls(0.01,5));
    modelStore.releaseModel(model);
    return success;
  }
 else {
    IMethod findOverriddenMethod;
    try {
      findOverriddenMethod=SuperTypeHierarchyCache.getMethodOverrideTester(method.getDeclaringType()).findOverriddenMethod(method,true);
      if (findOverriddenMethod != null) {
        return displayProposalsForMethod(findOverriddenMethod);
      }
    }
 catch (    final JavaModelException e) {
      e.printStackTrace();
    }
  }
  return false;
}",0.6981132075471698
93467,"private boolean displayProposals(final IJavaElement element,final SortedSet<Tuple<IMethodName,Double>> proposals){
  if (proposals.isEmpty()) {
    return false;
  }
  if (calls != null) {
    calls.dispose();
    line.dispose();
    if (templates != null) {
      templates.dispose();
      line2.dispose();
    }
  }
  final String text=""String_Node_Str"" + element.getElementName() + ""String_Node_Str"";
  line=new TextAndFeaturesLine(composite,text,element,element.getElementName(),this,server,new TemplateEditDialog(getShell()));
  line.createStyleRange(15,element.getElementName().length(),SWT.NORMAL,false,true);
  calls=SwtFactory.createGridComposite(composite,3,12,2,12,0);
  for (  final Tuple<IMethodName,Double> proposal : proposals) {
    SwtFactory.createSquare(calls);
    SwtFactory.createLabel(calls,Names.vm2srcSimpleMethod(proposal.getFirst()),false,false,true);
    SwtFactory.createLabel(calls,Math.round(proposal.getSecond() * 100) + ""String_Node_Str"",false,true,false);
  }
  composite.layout(true);
  return true;
}","private boolean displayProposals(final IJavaElement element,final SortedSet<Tuple<IMethodName,Double>> proposals){
  if (proposals.isEmpty()) {
    return false;
  }
  if (calls != null) {
    calls.dispose();
    line.dispose();
    if (templates != null) {
      templates.dispose();
      line2.dispose();
    }
  }
  final String text=""String_Node_Str"" + element.getElementName() + ""String_Node_Str"";
  line=new TextAndFeaturesLine(composite,text,element,element.getElementName(),this,server,new TemplateEditDialog(getShell()));
  line.createStyleRange(15,element.getElementName().length(),SWT.NORMAL,false,true);
  calls=SwtFactory.createGridComposite(composite,3,12,2,12,0);
  for (  final Tuple<IMethodName,Double> proposal : proposals) {
    SwtFactory.createSquare(calls);
    final IMethodName method=proposal.getFirst();
    final String prefix=method.isInit() ? ""String_Node_Str"" : method.getDeclaringType().getClassName() + ""String_Node_Str"";
    SwtFactory.createLabel(calls,prefix + Names.vm2srcSimpleMethod(method),false,false,true);
    SwtFactory.createLabel(calls,Math.round(proposal.getSecond() * 100) + ""String_Node_Str"",false,true,false);
  }
  composite.layout(true);
  return true;
}",0.9073083778966132
93468,"@Override protected boolean updateContent(final IJavaElementSelection selection){
  context=selection.getInvocationContext() == null ? null : contextResolver.resolveContext(selection.getInvocationContext());
  final IJavaElement element=selection.getJavaElement();
  if (context != null && context.getVariable() != null) {
    return displayProposalsForVariable(element,context.getVariable());
  }
 else   if (element instanceof IType) {
    return displayProposalsForType((IType)element);
  }
 else   if (element instanceof IMethod) {
    return displayProposalsForMethod((IMethod)element);
  }
 else   if (element instanceof ILocalVariable || element instanceof SourceField) {
    try {
      return displayProposalsForUnresolvedVariable(element);
    }
 catch (    final JavaModelException e) {
      throw new IllegalStateException(e);
    }
  }
  return false;
}","@Override protected boolean updateContent(final IJavaElementSelection selection){
  if (selection.getInvocationContext() == null) {
    return false;
  }
  context=contextResolver.resolveContext(selection.getInvocationContext());
  final IJavaElement element=selection.getJavaElement();
  if (element instanceof ILocalVariable) {
    createFakeContextForLocalVariableSelection(element);
  }
 else   if (element instanceof IField) {
    createFakeContextForFieldSelection(element);
  }
 else   if (element instanceof IType) {
    context=new DelegatingIntelligentCompletionContext(context){
      @Override public Variable getVariable(){
        return null;
      }
    }
;
  }
  if (context.getVariable() != null) {
    return displayProposalsForVariable(element,context.getVariable());
  }
 else   if (element instanceof IType) {
    return displayProposalsForType((IType)element);
  }
 else   if (element instanceof IMethod) {
    return displayProposalsForMethod((IMethod)element);
  }
 else   if (element instanceof ILocalVariable || element instanceof SourceField) {
    try {
      return displayProposalsForUnresolvedVariable(element);
    }
 catch (    final JavaModelException e) {
      throw new IllegalStateException(e);
    }
  }
  return false;
}",0.3806390977443609
93469,"@Override public Variable getVariable(){
  if (isReceiverImplicitThis()) {
    return Variable.create(""String_Node_Str"",getSuperclassOfEnclosingType(),getEnclosingMethod());
  }
  if (getReceiverName() != null && getReceiverType() != null) {
    return Variable.create(getReceiverName(),getReceiverType(),getEnclosingMethod());
  }
  final LocalDeclaration match=findMatchingLocalVariable(getReceiverName());
  if (match == null) {
    return null;
  }
  final String name=String.valueOf(match.name);
  final ITypeName type=CompilerBindings.toTypeName(match.type);
  return Variable.create(name,type,getEnclosingMethod());
}","@Override public Variable getVariable(){
  if (isReceiverImplicitThis() || isReceiverExplicitThis()) {
    return Variable.create(""String_Node_Str"",getSuperclassOfEnclosingType(),getEnclosingMethod());
  }
  if (getReceiverName() != null && getReceiverType() != null) {
    return Variable.create(getReceiverName(),getReceiverType(),getEnclosingMethod());
  }
  final LocalDeclaration match=findMatchingLocalVariable(getReceiverName());
  if (match == null) {
    return null;
  }
  final String name=String.valueOf(match.name);
  final ITypeName type=CompilerBindings.toTypeName(match.type);
  return Variable.create(name,type,getEnclosingMethod());
}",0.9780564263322884
93470,"@Override public boolean canResolve(final IIntelligentCompletionContext ctx){
  this.ctx=ensureIsNotNull(ctx);
  final ASTNode completionNode=ctx.getCompletionNode();
  return completionNode instanceof CompletionOnMemberAccess;
}","@Override public boolean canResolve(final IIntelligentCompletionContext ctx){
  this.ctx=ensureIsNotNull(ctx);
  final ASTNode completionNode=ctx.getCompletionNode();
  final boolean isThis=""String_Node_Str"".equals(ctx.getReceiverName());
  return !isThis && completionNode instanceof CompletionOnMemberAccess;
}",0.7319778188539742
93471,"@Override protected void configure(){
  configureModelStore();
  configureRecommendationsViewPublisher();
}","@Override protected void configure(){
  configureArchiveModelStore();
  configureRecommendationsViewPublisher();
}",0.9683257918552036
93472,"private void prefetch(){
  final ICallsModelStore s=InjectionService.getInstance().requestInstance(CallsModelStore.class);
  s.hasModel(VmTypeName.BOOLEAN);
}","private void prefetch(){
  final ICallsModelStore s=InjectionService.getInstance().requestInstance(ICallsModelStore.class);
  s.hasModel(VmTypeName.BOOLEAN);
}",0.996845425867508
93473,"private String getFilenameFromType(final ITypeName type){
  return type.getIdentifier() + MODEL_POSTFIX;
}","private String getFilenameFromType(final ITypeName type){
  return type.getIdentifier().replaceAll(""String_Node_Str"",""String_Node_Str"") + MODEL_POSTFIX;
}",0.8153846153846154
93474,"private ITypeName getTypeNameFromFilename(final String filename){
  return VmTypeName.get(filename.substring(filename.length() - MODEL_POSTFIX.length(),filename.length()));
}","private ITypeName getTypeNameFromFilename(final String filename){
  return VmTypeName.get(filename.substring(0,filename.length() - MODEL_POSTFIX.length()).replaceAll(""String_Node_Str"",""String_Node_Str""));
}",0.8263157894736842
93475,"/** 
 * @param returnType The type as returned by the invoked method.
 * @return The template code which generates a new variable name based onthe new variable type (as given by the return type).
 */
private static String getNewVariableNameFromReturnType(final ITypeName returnType){
  final String returnTypeName=Names.vm2srcTypeName(returnType.getIdentifier());
  return String.format(""String_Node_Str"",returnTypeName);
}","/** 
 * @param returnType The type as returned by the invoked method.
 * @return The template code which generates a new variable name based onthe new variable type (as given by the return type).
 */
private static String getNewVariableNameFromReturnType(final ITypeName returnType){
  return String.format(""String_Node_Str"",getTypeIdentifier(returnType));
}",0.793854033290653
93476,"/** 
 * @param methodCall {@link MethodCall} holding information about the method callto format and on which variable it is invoked.
 * @return A variable name from the given method's name (e.g. ""<code>getText</code>"" to ""<code>text</code>"") or its return type (e.g. ""<code>someMethod : String</code>"" to ""<code>string</code> "").
 */
private static String getNewVariableNameFromMethod(final MethodCall methodCall){
  String variableName;
  final IMethodName invokedMethod=methodCall.getInvokedMethod();
  if (invokedMethod.isInit()) {
    final String type=Names.vm2srcTypeName(invokedMethod.getDeclaringType().getIdentifier());
    variableName=String.format(""String_Node_Str"",type);
  }
 else {
    if (invokedMethod.getName().startsWith(""String_Node_Str"")) {
      variableName=StringUtils.uncapitalize(invokedMethod.getName().substring(3));
    }
 else {
      variableName=StringUtils.uncapitalize(invokedMethod.getReturnType().getClassName());
    }
    if (variableName.equals(methodCall.getVariableName())) {
      variableName=getNewVariableNameFromReturnType(invokedMethod.getReturnType());
    }
  }
  return variableName;
}","/** 
 * @param methodCall {@link MethodCall} holding information about the method callto format and on which variable it is invoked.
 * @return A variable name from the given method's name (e.g. ""<code>getText</code>"" to ""<code>text</code>"") or its return type (e.g. ""<code>someMethod : String</code>"" to ""<code>string</code> "").
 */
private static String getNewVariableNameFromMethod(final MethodCall methodCall){
  String variableName;
  final IMethodName invokedMethod=methodCall.getInvokedMethod();
  if (invokedMethod.isInit()) {
    variableName=String.format(""String_Node_Str"",getTypeIdentifier(invokedMethod.getDeclaringType()));
  }
 else {
    if (invokedMethod.getName().startsWith(""String_Node_Str"")) {
      variableName=StringUtils.uncapitalize(invokedMethod.getName().substring(3));
    }
 else {
      variableName=StringUtils.uncapitalize(invokedMethod.getReturnType().getClassName());
    }
    if (variableName.equals(methodCall.getVariableName())) {
      variableName=getNewVariableNameFromReturnType(invokedMethod.getReturnType());
    }
  }
  return variableName;
}",0.9320737741790374
93477,"/** 
 * @param invokedMethod The method which will return or construct the new variable.
 * @return How the type of the new variable is declared, as part of thevariable declaration, e.g. "" <code>Button</code>"".
 */
private static String getNewVariableTypeString(final IMethodName invokedMethod){
  if (invokedMethod.isInit()) {
    return String.format(""String_Node_Str"",Names.vm2srcQualifiedType(invokedMethod.getDeclaringType()));
  }
  return String.format(""String_Node_Str"",Names.vm2srcQualifiedType(invokedMethod.getReturnType()));
}","/** 
 * @param invokedMethod The method which will return or construct the new variable.
 * @return How the type of the new variable is declared, as part of thevariable declaration, e.g. "" <code>Button</code>"".
 */
private static String getNewVariableTypeString(final IMethodName invokedMethod){
  if (invokedMethod.isInit()) {
    return String.format(""String_Node_Str"",getTypeIdentifier(invokedMethod.getDeclaringType()));
  }
  final ITypeName returnType=invokedMethod.getReturnType();
  if (returnType.isPrimitiveType()) {
    return Names.vm2srcSimpleTypeName(returnType);
  }
 else {
    return String.format(""String_Node_Str"",getTypeIdentifier(returnType),returnType.isArrayType() ? StringUtils.repeat(""String_Node_Str"",returnType.getArrayDimensions()) : ""String_Node_Str"");
  }
}",0.5916981132075472
93478,"/** 
 * @param invokedMethod The method which will return or construct the new variable.
 * @return How the type of the new variable is declared, as part of thevariable declaration, e.g. "" <code>Button</code>"".
 */
private static String getNewVariableTypeString(final IMethodName invokedMethod){
  if (invokedMethod.isInit()) {
    return String.format(""String_Node_Str"",Names.vm2srcQualifiedType(invokedMethod.getDeclaringType()));
  }
  return String.format(""String_Node_Str"",Names.vm2srcSimpleTypeName(invokedMethod.getReturnType()));
}","/** 
 * @param invokedMethod The method which will return or construct the new variable.
 * @return How the type of the new variable is declared, as part of thevariable declaration, e.g. "" <code>Button</code>"".
 */
private static String getNewVariableTypeString(final IMethodName invokedMethod){
  if (invokedMethod.isInit()) {
    return String.format(""String_Node_Str"",Names.vm2srcQualifiedType(invokedMethod.getDeclaringType()));
  }
  return String.format(""String_Node_Str"",Names.vm2srcQualifiedType(invokedMethod.getReturnType()));
}",0.9823584029712163
93479,"@Override public void setMethodContext(IMethodName newActiveMethodContext){
  if (newActiveMethodContext == null) {
    newActiveMethodContext=NetworkUtils.CTX_DUMMY;
  }
  contextNode.observeState(newActiveMethodContext.getIdentifier());
}","@Override public void setMethodContext(IMethodName newActiveMethodContext){
  if (newActiveMethodContext == null) {
    newActiveMethodContext=NetworkUtils.CTX_NULL;
  }
  contextNode.observeState(newActiveMethodContext.getIdentifier());
}",0.9853862212943632
93480,"/** 
 * @param invokedMethod The method which will return or construct the new variable.
 * @return How the type of the new variable is declared, as part of thevariable declaration, e.g. "" <code>Button</code>"".
 */
private static String getNewVariableTypeString(final IMethodName invokedMethod){
  if (invokedMethod.isInit()) {
    return String.format(""String_Node_Str"",Names.vm2srcQualifiedType(invokedMethod.getDeclaringType()));
  }
  return String.format(""String_Node_Str"",Names.vm2srcSimpleTypeName(invokedMethod.getReturnType()));
}","/** 
 * @param invokedMethod The method which will return or construct the new variable.
 * @return How the type of the new variable is declared, as part of thevariable declaration, e.g. "" <code>Button</code>"".
 */
private static String getNewVariableTypeString(final IMethodName invokedMethod){
  if (invokedMethod.isInit()) {
    return String.format(""String_Node_Str"",Names.vm2srcQualifiedType(invokedMethod.getDeclaringType()));
  }
  return String.format(""String_Node_Str"",Names.vm2srcQualifiedType(invokedMethod.getReturnType()));
}",0.9823584029712163
93481,"@Test public void testNameWithGenerics(){
  new VmTypeName(""String_Node_Str"");
}","@Test public void testNameWithGenerics(){
  VmTypeName.get(""String_Node_Str"");
}",0.95
93482,"private void checkIsAssignmentForMethodReturn(final VariableDeclarationFragment fragment){
  final SimpleName name=fragment.getName();
  if (name.getIdentifier().equals(localVariable.getNameLiteral())) {
    localVariableKind=Kind.RETURN;
  }
}","private void checkIsAssignmentForMethodReturn(final VariableDeclarationFragment fragment){
  if (isVariableDeclarationOfCurrentVariable(fragment) && !isConstructorCall(fragment.getInitializer())) {
    localVariableKind=Kind.RETURN;
  }
}",0.6348547717842323
93483,"private boolean findUsages(){
  ensureIsNotNull(astEnclosingMethodDeclaration);
  astEnclosingMethodDeclaration.accept(new ASTVisitor(){
    @Override public boolean visit(    final SimpleName node){
      final IVariableBinding var=BindingUtils.getVariableBinding(node);
      if (var == null) {
        return true;
      }
      if (var.getName().equals(localVariable.getNameLiteral())) {
        determineVariableKind(var);
        final ASTNode parent=node.getParent();
        if (parent instanceof MethodInvocation) {
          registerMethodCallOnReceiver((MethodInvocation)parent);
        }
 else         if (parent instanceof Assignment) {
          evaluateAssignment((Assignment)parent);
        }
 else         if (parent instanceof VariableDeclarationFragment) {
          evaluateVariableDeclarationFragment((VariableDeclarationFragment)parent);
        }
      }
      return true;
    }
    private void determineVariableKind(    final IVariableBinding var){
      if (var.isParameter()) {
        localVariableKind=ObjectInstanceKey.Kind.PARAMETER;
      }
 else       if (var.isField()) {
        localVariableKind=Kind.FIELD;
      }
 else {
        localVariableKind=Kind.LOCAL;
      }
    }
    private void evaluateVariableDeclarationFragment(    final VariableDeclarationFragment fragment){
      checkIsAssignmentForMethodReturn(fragment);
      final Expression initializer=fragment.getInitializer();
      if (initializer instanceof ClassInstanceCreation) {
        registerConstructorCallOnVariable((ClassInstanceCreation)initializer);
      }
    }
    private void checkIsAssignmentForMethodReturn(    final VariableDeclarationFragment fragment){
      final SimpleName name=fragment.getName();
      if (name.getIdentifier().equals(localVariable.getNameLiteral())) {
        localVariableKind=Kind.RETURN;
      }
    }
    private void evaluateAssignment(    final Assignment a){
      final Expression rhs=a.getRightHandSide();
      if (rhs instanceof ClassInstanceCreation) {
        registerConstructorCallOnVariable((ClassInstanceCreation)rhs);
        localVariableKind=Kind.LOCAL;
      }
    }
    private void registerConstructorCallOnVariable(    final ClassInstanceCreation invoke){
      final IMethodBinding b=invoke.resolveConstructorBinding();
      final IMethodName method=BindingUtils.toMethodName(b);
      if (method != null) {
        receiverMethodInvocations.add(method);
      }
    }
    private void registerMethodCallOnReceiver(    final MethodInvocation invoke){
      final IMethodBinding b=invoke.resolveMethodBinding();
      final IMethodName method=BindingUtils.toMethodName(b);
      if (method != null) {
        receiverMethodInvocations.add(method);
      }
    }
  }
);
  return true;
}","private boolean findUsages(){
  ensureIsNotNull(astEnclosingMethodDeclaration);
  astEnclosingMethodDeclaration.accept(new ASTVisitor(){
    @Override public boolean visit(    final SimpleName node){
      final IVariableBinding var=BindingUtils.getVariableBinding(node);
      if (var == null) {
        return true;
      }
      if (var.getName().equals(localVariable.getNameLiteral())) {
        determineVariableKind(var);
        final ASTNode parent=node.getParent();
        if (parent instanceof MethodInvocation) {
          registerMethodCallOnReceiver((MethodInvocation)parent);
        }
 else         if (parent instanceof Assignment) {
          evaluateAssignment((Assignment)parent);
        }
 else         if (parent instanceof VariableDeclarationFragment) {
          evaluateVariableDeclarationFragment((VariableDeclarationFragment)parent);
        }
      }
      return true;
    }
    private void determineVariableKind(    final IVariableBinding var){
      if (var.isParameter()) {
        localVariableKind=ObjectInstanceKey.Kind.PARAMETER;
      }
 else       if (var.isField()) {
        localVariableKind=Kind.FIELD;
      }
 else {
        localVariableKind=Kind.LOCAL;
      }
    }
    private void evaluateVariableDeclarationFragment(    final VariableDeclarationFragment fragment){
      checkIsAssignmentForMethodReturn(fragment);
      final Expression initializer=fragment.getInitializer();
      if (initializer instanceof ClassInstanceCreation) {
        registerConstructorCallOnVariable((ClassInstanceCreation)initializer);
      }
    }
    private void checkIsAssignmentForMethodReturn(    final VariableDeclarationFragment fragment){
      if (isVariableDeclarationOfCurrentVariable(fragment) && !isConstructorCall(fragment.getInitializer())) {
        localVariableKind=Kind.RETURN;
      }
    }
    private boolean isConstructorCall(    final Expression initializer){
      return initializer instanceof ClassInstanceCreation;
    }
    private boolean isVariableDeclarationOfCurrentVariable(    final VariableDeclarationFragment fragment){
      final SimpleName astName=fragment.getName();
      final String astNameLiteral=astName.getIdentifier();
      final String recNameLiteral=localVariable.getNameLiteral();
      return astNameLiteral.equals(recNameLiteral);
    }
    private void evaluateAssignment(    final Assignment a){
      final Expression rhs=a.getRightHandSide();
      if (rhs instanceof ClassInstanceCreation) {
        registerConstructorCallOnVariable((ClassInstanceCreation)rhs);
        localVariableKind=Kind.LOCAL;
      }
    }
    private void registerConstructorCallOnVariable(    final ClassInstanceCreation invoke){
      final IMethodBinding b=invoke.resolveConstructorBinding();
      final IMethodName method=BindingUtils.toMethodName(b);
      if (method != null) {
        receiverMethodInvocations.add(method);
      }
    }
    private void registerMethodCallOnReceiver(    final MethodInvocation invoke){
      final IMethodBinding b=invoke.resolveMethodBinding();
      final IMethodName method=BindingUtils.toMethodName(b);
      if (method != null) {
        receiverMethodInvocations.add(method);
      }
    }
  }
);
  return true;
}",0.8897427330437688
93484,"private boolean findExpectedClass(){
  final ITypeName expectedTypeName=ctx.getExpectedType();
  if (expectedTypeName == null) {
    if (ctx.getCompletionNode() instanceof CompletionOnMessageSend) {
      CompletionOnMessageSend completiononMessageSend=(CompletionOnMessageSend)ctx.getCompletionNode();
      computeExpectedMethodTypes(completiononMessageSend);
      return expectedTypeList.size() > 0;
    }
    return false;
  }
  expectedTypeList=new ArrayList<Tuple<IClass,Integer>>();
  int expectedTypeArrayDimension=expectedTypeName.getArrayDimensions();
  IClass expectedType=toWalaClass(expectedTypeName.isArrayType() ? expectedTypeName.getArrayBaseType() : expectedTypeName);
  if (expectedType.getReference().getName().getClassName().toString().equals(""String_Node_Str"")) {
    expectedType=null;
  }
  expectedTypeList.add(Tuple.create(expectedType,expectedTypeArrayDimension));
  return expectedType != null;
}","private boolean findExpectedClass(){
  final ITypeName expectedTypeName=ctx.getExpectedType();
  if (expectedTypeName == null) {
    if (ctx.getCompletionNode() instanceof CompletionOnMessageSend) {
      CompletionOnMessageSend completiononMessageSend=(CompletionOnMessageSend)ctx.getCompletionNode();
      computeExpectedMethodTypes(completiononMessageSend);
      return expectedTypeList.size() > 0;
    }
    return false;
  }
  expectedTypeList=new ArrayList<Tuple<IClass,Integer>>();
  int expectedTypeArrayDimension=expectedTypeName.getArrayDimensions();
  IClass expectedType=toWalaClass(expectedTypeName.isArrayType() ? expectedTypeName.getArrayBaseType() : expectedTypeName);
  if (expectedType != null && expectedType.getReference().getName().getClassName().toString().equals(""String_Node_Str"")) {
    expectedType=null;
  }
  expectedTypeList.add(Tuple.create(expectedType,expectedTypeArrayDimension));
  return expectedType != null;
}",0.9871794871794872
93485,"/** 
 * Clears the selection state of a node (if one). Returns <code>true</code> if previously set and cleared, <code>false</code> otherwise.
 */
public boolean clearEvidence(){
  if (!isEvidence()) {
    return false;
  }
  network.clearEvidence(nodeId);
  return true;
}","/** 
 * Clears the selection state of a node (if one). Returns <code>true</code> if previously set and cleared, <code>false</code> otherwise.
 */
public boolean clearEvidence(){
  try {
    if (!isEvidence()) {
      return false;
    }
    network.clearEvidence(nodeId);
    return true;
  }
 catch (  final SMILEException x) {
    RecommendersPlugin.logError(x,""String_Node_Str"");
    return false;
  }
}",0.8023598820058997
93486,"private boolean isAccessible(final IMember member){
  if (ctx.isReceiverImplicitThis()) {
    if (enclosingMethod != null && enclosingMethod.isStatic() && !member.isStatic()) {
      return false;
    }
  }
  if (ctx.getCompletionNode() instanceof CompletionOnQualifiedNameReference) {
    return member.isStatic();
  }
  if (member.getDeclaringClass() == receiverType) {
    return true;
  }
  if (!member.isPrivate()) {
    return true;
  }
  return false;
}","private boolean isAccessible(final IMember member){
  if (ctx.isReceiverImplicitThis()) {
    if (enclosingMethod != null && enclosingMethod.isStatic() && !member.isStatic()) {
      return false;
    }
  }
  final Variable var=ctx.getVariable();
  if (var == null) {
    return member.isStatic();
  }
  if (member.getDeclaringClass() == receiverType) {
    return true;
  }
  if (!member.isPrivate()) {
    return true;
  }
  return false;
}",0.8736141906873615
93487,"private void computeAccessibleLocals(){
  if (!ctx.getVariable().isThis()) {
    return;
  }
  for (  final LocalDeclaration local : ctx.getLocalDeclarations()) {
    final ITypeName typeName=CompilerBindings.toTypeName(local.type);
    final IClass localType=toWalaClass(typeName);
    if (localType == null) {
      continue;
    }
    final String localName=String.valueOf(local.name);
    if (!localName.startsWith(ctx.getPrefixToken())) {
      continue;
    }
    if (ctx.getCompletionNodeParent() instanceof LocalDeclaration) {
      final LocalDeclaration node=cast(ctx.getCompletionNodeParent());
      final String name=String.valueOf(node.name);
      if (name.equals(localName)) {
        continue;
      }
    }
    final IChainElement element=new LocalChainElement(localName,localType);
    accessibleLocals.add(element);
  }
}","private void computeAccessibleLocals(){
  if (ctx.getVariable() == null) {
    return;
  }
  if (!ctx.getVariable().isThis()) {
    return;
  }
  for (  final LocalDeclaration local : ctx.getLocalDeclarations()) {
    final ITypeName typeName=CompilerBindings.toTypeName(local.type);
    final IClass localType=toWalaClass(typeName);
    if (localType == null) {
      continue;
    }
    final String localName=String.valueOf(local.name);
    if (!localName.startsWith(ctx.getPrefixToken())) {
      continue;
    }
    if (ctx.getCompletionNodeParent() instanceof LocalDeclaration) {
      final LocalDeclaration node=cast(ctx.getCompletionNodeParent());
      final String name=String.valueOf(node.name);
      if (name.equals(localName)) {
        continue;
      }
    }
    final IChainElement element=new LocalChainElement(localName,localType);
    accessibleLocals.add(element);
  }
}",0.9705712637045586
93488,"private void waitForThreadPoolTermination(){
  try {
    executor.awaitTermination(Constants.AlgorithmSettings.EXECUTOR_ALIVE_TIME_IN_MS,TimeUnit.MILLISECONDS);
  }
 catch (  final InterruptedException e) {
    JavaPlugin.log(e);
  }
}","private void waitForThreadPoolTermination(){
  if (executor.getTaskCount() > 0) {
    try {
      executor.awaitTermination(Constants.AlgorithmSettings.EXECUTOR_ALIVE_TIME_IN_MS,TimeUnit.MILLISECONDS);
    }
 catch (    final InterruptedException e) {
      JavaPlugin.log(e);
    }
  }
}",0.887189292543021
93489,"@Override public IClass lookupClass(final TypeReference typeRef){
  final TypeName name=typeRef.getName();
  if (isClassAlreadyDefinedOrCurrentlyLoaded(typeRef)) {
    return ensureIsNotNull(clazzes.get(name));
  }
  if (typeRef.isArrayType()) {
    final ArrayClassLoader arrayClassLoader=scope.getArrayClassLoader();
    final IClass lookupClass=arrayClassLoader.lookupClass(name,appLoader,this);
    if (lookupClass == null) {
      System.err.println(""String_Node_Str"" + name);
    }
    return lookupClass;
  }
  try {
    if (typeRef.getClassLoader().equals(SYNTETIC)) {
      return ensureIsNotNull(loadSynteticType(typeRef));
    }
    final IType type=findEclipseHandle(typeRef);
    if (type instanceof BinaryType) {
      return ensureIsNotNull(loadBinaryClass((BinaryType)type));
    }
 else     if (type instanceof SourceType) {
      return ensureIsNotNull(loadFromProjectOutputLocation((SourceType)type));
    }
  }
 catch (  final JavaModelException e) {
    throwUnhandledException(e);
  }
  return null;
}","@Override public IClass lookupClass(final TypeReference typeRef){
  final TypeName name=typeRef.getName();
  if (isClassAlreadyDefinedOrCurrentlyLoaded(typeRef)) {
    return ensureIsNotNull(clazzes.get(name));
  }
  if (typeRef.isArrayType()) {
    final ArrayClassLoader arrayClassLoader=scope.getArrayClassLoader();
    final IClass lookupClass=arrayClassLoader.lookupClass(name,appLoader,this);
    if (lookupClass == null) {
      System.err.println(""String_Node_Str"" + name);
    }
    return lookupClass;
  }
  try {
    if (typeRef.getClassLoader().equals(SYNTETIC)) {
      return ensureIsNotNull(loadSynteticType(typeRef));
    }
    final IType type=findEclipseHandle(typeRef);
    if (type instanceof BinaryType) {
      return ensureIsNotNull(loadBinaryClass((BinaryType)type));
    }
 else     if (type instanceof SourceType) {
      return loadFromProjectOutputLocation((SourceType)type);
    }
  }
 catch (  final JavaModelException e) {
    throwUnhandledException(e);
  }
  return null;
}",0.9916214884179398
93490,"private IClass loadFromProjectOutputLocation(final SourceType type) throws JavaModelException {
  final IFile eclipseFile=createClassFileHandleForClassName(type);
  if (eclipseFile == null) {
    final String msg=format(""String_Node_Str"",type.getFullyQualifiedName(),type.getJavaProject().getElementName());
    log.error(msg);
    throwUnreachable();
    return null;
  }
  final File file=eclipseFile.getLocation().toFile();
  final ShrikeClassReaderHandle handle=new ShrikeClassReaderHandle(new ClassFileModule(file));
  ShrikeClass res;
  try {
    res=new ShrikeClass(handle,appLoader,this);
  }
 catch (  final InvalidClassFileException e) {
    throw throwUnhandledException(e);
  }
  System.out.println(""String_Node_Str"" + res.getName());
  clazzes.put(res.getName(),res);
  watchlist.put(eclipseFile,res.getName());
  res.getSuperclass();
  return res;
}","private IClass loadFromProjectOutputLocation(final SourceType type) throws JavaModelException {
  final IFile eclipseFile=createClassFileHandleForClassName(type);
  if (eclipseFile == null) {
    final String msg=format(""String_Node_Str"",type.getFullyQualifiedName(),type.getJavaProject().getElementName());
    log.warn(msg);
    return null;
  }
  final File file=eclipseFile.getLocation().toFile();
  final ShrikeClassReaderHandle handle=new ShrikeClassReaderHandle(new ClassFileModule(file));
  ShrikeClass res;
  try {
    res=new ShrikeClass(handle,appLoader,this);
  }
 catch (  final InvalidClassFileException e) {
    throw throwUnhandledException(e);
  }
  System.out.println(""String_Node_Str"" + res.getName());
  clazzes.put(res.getName(),res);
  watchlist.put(eclipseFile,res.getName());
  res.getSuperclass();
  return res;
}",0.6055261610817166
93491,"private void initializeAccessibleElements(){
  if (!findEnclosingClass()) {
    return;
  }
  if (!findEnclosingMethod()) {
  }
  if (!findReceiverClass()) {
    return;
  }
  if (!findExpectedClass()) {
    return;
  }
  computeAccessibleFields();
  computeAccessibleMethods();
  computeAccessibleLocals();
}","private void initializeAccessibleElements(){
  if (!findExpectedClass()) {
    return;
  }
  if (!findEnclosingClass()) {
    return;
  }
  if (!findEnclosingMethod()) {
  }
  if (!findReceiverClass()) {
    return;
  }
  computeAccessibleFields();
  computeAccessibleMethods();
  computeAccessibleLocals();
}",0.8511326860841424
93492,"public void execute(final IIntelligentCompletionContext ictx) throws JavaModelException {
  initializeChainCompletionContext(ictx);
  if (canComputeProposals()) {
    initializeThreadPool();
    processMembers();
    waitForThreadPoolTermination();
  }
}","public void execute(final IIntelligentCompletionContext ictx) throws JavaModelException {
  if (!ictx.expectsReturnValue()) {
    return;
  }
  initializeChainCompletionContext(ictx);
  initializeThreadPool();
  processMembers();
  waitForThreadPoolTermination();
}",0.5703275529865125
93493,"/** 
 * @param receiverName The variable name if it could be extracted from the context.
 * @param receiverType The type of the variable on which completion is requested.
 * @param context The context holding information about the completion request.
 * @param needsConstructor True, if the completion is invoked while a new variable is defined, e.g. <code>Button b<^Space></code>.
 * @return The {@link CompletionTargetVariable} representing the variable onwhich the request was invoked or which shall be constructed in case it was invoked while defining a new variable.
 */
private static CompletionTargetVariable createInvokedVariable(final String receiverName,final ITypeName receiverType,final IIntelligentCompletionContext context,final boolean needsConstructor){
  CompletionTargetVariable completionTargetVariable=null;
  if (receiverType != null) {
    int variableNameLength=0;
    if (!needsConstructor && receiverName.length() > 0) {
      variableNameLength=receiverName.length() + 1;
    }
    final int documentOffset=context.getReplacementRegion().getOffset() - variableNameLength;
    final int replacementLength=context.getReplacementRegion().getLength() + variableNameLength;
    completionTargetVariable=new CompletionTargetVariable(receiverName,receiverType,new Region(documentOffset,replacementLength),needsConstructor);
  }
  return completionTargetVariable;
}","/** 
 * @param receiverName The variable name if it could be extracted from the context.
 * @param receiverType The type of the variable on which completion is requested.
 * @param receiverCalls
 * @param context The context holding information about the completion request.
 * @param needsConstructor True, if the completion is invoked while a new variable is defined, e.g. <code>Button b<^Space></code>.
 * @return The {@link CompletionTargetVariable} representing the variable onwhich the request was invoked or which shall be constructed in case it was invoked while defining a new variable.
 */
private static CompletionTargetVariable createInvokedVariable(final String receiverName,final ITypeName receiverType,final Set<IMethodName> receiverCalls,final IIntelligentCompletionContext context,final boolean needsConstructor){
  CompletionTargetVariable completionTargetVariable=null;
  if (receiverType != null) {
    int variableNameLength=0;
    if (!needsConstructor && receiverName.length() > 0) {
      variableNameLength=receiverName.length() + 1;
    }
    final int documentOffset=context.getReplacementRegion().getOffset() - variableNameLength;
    final int replacementLength=context.getReplacementRegion().getLength() + variableNameLength;
    completionTargetVariable=new CompletionTargetVariable(receiverName,receiverType,receiverCalls,new Region(documentOffset,replacementLength),needsConstructor);
  }
  return completionTargetVariable;
}",0.9736008447729672
93494,"/** 
 * @param context The context from where to resolve variable usage.
 * @return True, if a new variable is to be constructed or an existing'susage could be resolved.
 */
private boolean canFindVariableUsage(final IIntelligentCompletionContext context){
  boolean result=true;
  if (context.getVariable() == null) {
    receiverMethodInvocations=Sets.newHashSet();
  }
 else {
    result=canResolveVariableUsage(context);
  }
  return result;
}","/** 
 * @param targetVariable The variable on which the completion request was invoked.
 * @param context The context from where to resolve variable usage.
 * @return True, if a new variable is to be constructed or an existing'susage could be resolved.
 */
private boolean canFindVariableUsage(final CompletionTargetVariable targetVariable,final IIntelligentCompletionContext context){
  boolean result=true;
  if (context.getVariable() == null) {
    receiverMethodInvocations=targetVariable.getReceiverCalls();
  }
 else {
    result=canResolveVariableUsage(context);
  }
  return result;
}",0.5601539942252165
93495,"/** 
 * @param targetVariable The variable on which the completion request was invoked.
 * @param context The context from where the completion request was invoked.
 * @return The {@link PatternRecommendation}s holding information for the templates to be displayed.
 */
public ImmutableSet<PatternRecommendation> computeRecommendations(final CompletionTargetVariable targetVariable,final IIntelligentCompletionContext context){
  if (canFindVariableUsage(context) && canFindModel(targetVariable.getType())) {
    updateModel(context.getVariable(),context.getEnclosingMethodsFirstDeclaration());
    return computeRecommendationsForModel(targetVariable.isNeedsConstructor());
  }
  return ImmutableSet.of();
}","/** 
 * @param targetVariable The variable on which the completion request was invoked.
 * @param context The context from where the completion request was invoked.
 * @return The {@link PatternRecommendation}s holding information for the templates to be displayed.
 */
public ImmutableSet<PatternRecommendation> computeRecommendations(final CompletionTargetVariable targetVariable,final IIntelligentCompletionContext context){
  if (canFindVariableUsage(targetVariable,context) && canFindModel(targetVariable.getType())) {
    updateModel(context.getVariable(),context.getEnclosingMethodsFirstDeclaration());
    return computeRecommendationsForModel(targetVariable.isNeedsConstructor());
  }
  return ImmutableSet.of();
}",0.989517819706499
93496,"/** 
 * @return True, if a model for the current receiver type could be found.
 */
private boolean canFindModel(final ITypeName receiverType){
  boolean result=false;
  System.err.println(""String_Node_Str"" + receiverType);
  if (callsModelStore.hasModel(receiverType)) {
    model=callsModelStore.getModel(receiverType);
    this.receiverType=receiverType;
    result=true;
  }
  return result;
}","/** 
 * @return True, if a model for the current receiver type could be found.
 */
private boolean canFindModel(final ITypeName receiverType){
  boolean result=false;
  if (callsModelStore.hasModel(receiverType)) {
    model=callsModelStore.getModel(receiverType);
    this.receiverType=receiverType;
    result=true;
  }
  return result;
}",0.9239130434782608
93497,"/** 
 * @param name The name of the variable on which the completion was triggered.
 * @param typeName The type of the variable on which the completion was triggered.
 * @param documentRegion True, if the templates proposals definitely have to contain constructors, e.g. in ""<code>Button b<^Space></code>"".
 * @param needsConstructor The region inside the document which shall be replaced by completion proposals for this variable.
 */
public CompletionTargetVariable(final String name,final ITypeName typeName,final Region documentRegion,final boolean needsConstructor){
  this.name=name;
  this.typeName=Checks.ensureIsNotNull(typeName);
  this.documentRegion=documentRegion;
  this.needsConstructor=needsConstructor;
}","/** 
 * @param name The name of the variable on which the completion was triggered.
 * @param typeName The type of the variable on which the completion was triggered.
 * @param receiverCalls
 * @param documentRegion True, if the templates proposals definitely have to contain constructors, e.g. in ""<code>Button b<^Space></code>"".
 * @param needsConstructor The region inside the document which shall be replaced by completion proposals for this variable.
 */
public CompletionTargetVariable(final String name,final ITypeName typeName,final Set<IMethodName> receiverCalls,final Region documentRegion,final boolean needsConstructor){
  this.name=name;
  this.typeName=Checks.ensureIsNotNull(typeName);
  this.receiverCalls=receiverCalls;
  this.documentRegion=documentRegion;
  this.needsConstructor=needsConstructor;
}",0.9369720597790772
93498,"private IType resolveType(final ITypeName recType){
  ensureIsNotNull(recType);
  if (recType.isNestedType()) {
    final ITypeName declaringType=recType.getDeclaringType();
    final IType parent=resolveType(declaringType);
    if (parent != null) {
      try {
        for (        final IType nested : parent.getTypes()) {
          System.out.println(nested);
        }
        for (        final IMethod m : parent.getMethods()) {
          for (          final IJavaElement children : m.getChildren()) {
            if (children instanceof IType) {
              final IType nested=(IType)children;
              final String key=nested.getKey();
              if (key.equals(recType.getIdentifier() + ""String_Node_Str"")) {
                return nested;
              }
            }
          }
        }
      }
 catch (      final Exception x) {
        System.out.println(parent);
        return null;
      }
    }
    return null;
  }
  final IType[] res=new IType[1];
  final IJavaSearchScope scope=SearchEngine.createWorkspaceScope();
  final SearchEngine search=new SearchEngine();
  final String srcTypeName=Names.vm2srcTypeName(recType.getIdentifier());
  final SearchPattern pattern=SearchPattern.createPattern(srcTypeName,IJavaSearchConstants.TYPE,IJavaSearchConstants.DECLARATIONS,SearchPattern.R_EXACT_MATCH);
  try {
    search.search(pattern,SearchUtils.getDefaultSearchParticipants(),scope,new SearchRequestor(){
      @Override public void acceptSearchMatch(      final SearchMatch match) throws CoreException {
        res[0]=(IType)match.getElement();
      }
    }
,null);
  }
 catch (  final CoreException e) {
    throwUnhandledException(e);
  }
  return res[0];
}","private IType resolveType(final ITypeName recType){
  ensureIsNotNull(recType);
  if (recType.isNestedType()) {
    final ITypeName declaringType=recType.getDeclaringType();
    final IType parent=resolveType(declaringType);
    if (parent != null) {
      try {
        for (        final IType nested : parent.getTypes()) {
          final String key=nested.getKey();
          if (key.equals(recType.getIdentifier() + ""String_Node_Str"")) {
            return nested;
          }
        }
        for (        final IMethod m : parent.getMethods()) {
          for (          final IJavaElement children : m.getChildren()) {
            if (children instanceof IType) {
              final IType nested=(IType)children;
              final String key=nested.getKey();
              if (key.equals(recType.getIdentifier() + ""String_Node_Str"")) {
                return nested;
              }
            }
          }
        }
      }
 catch (      final Exception x) {
        System.out.println(parent);
        return null;
      }
    }
    return null;
  }
  final IType[] res=new IType[1];
  final IJavaSearchScope scope=SearchEngine.createWorkspaceScope();
  final SearchEngine search=new SearchEngine();
  final String srcTypeName=Names.vm2srcTypeName(recType.getIdentifier());
  final SearchPattern pattern=SearchPattern.createPattern(srcTypeName,IJavaSearchConstants.TYPE,IJavaSearchConstants.DECLARATIONS,SearchPattern.R_EXACT_MATCH);
  try {
    search.search(pattern,SearchUtils.getDefaultSearchParticipants(),scope,new SearchRequestor(){
      @Override public void acceptSearchMatch(      final SearchMatch match) throws CoreException {
        res[0]=(IType)match.getElement();
      }
    }
,null);
  }
 catch (  final CoreException e) {
    throwUnhandledException(e);
  }
  return res[0];
}",0.951539338654504
93499,"private List<IJavaCompletionProposal> computeProposals(final ChainingAlgorithm algorithm){
  final ChainProposalTemplateGenerator chainProposalGenerator=new ChainProposalTemplateGenerator();
  return chainProposalGenerator.generateJavaCompletionProposals(algorithm.getProposals(),jCtx,sw.getTime());
}","private List<IJavaCompletionProposal> computeProposals(final ChainingAlgorithm algorithm){
  final ChainTemplateProposalGenerator chainProposalGenerator=new ChainTemplateProposalGenerator();
  return chainProposalGenerator.generateJavaCompletionProposals(algorithm.getProposals(),jCtx,sw.getTime());
}",0.946843853820598
93500,"private void computeAccessibleLocals(){
  if (!ctx.getVariable().isThis()) {
    return;
  }
  for (  final LocalDeclaration local : ctx.getLocalDeclarations()) {
    final ITypeName typeName=CompilerBindings.toTypeName(local.type);
    final IClass localType=toWalaClass(typeName);
    final String localName=String.valueOf(local.name);
    final IChainElement element=new LocalVariableChainElement(localName,localType);
    accessibleLocals.add(element);
  }
}","private void computeAccessibleLocals(){
  if (!ctx.getVariable().isThis()) {
    return;
  }
  for (  final LocalDeclaration local : ctx.getLocalDeclarations()) {
    final ITypeName typeName=CompilerBindings.toTypeName(local.type);
    final IClass localType=toWalaClass(typeName);
    final String localName=String.valueOf(local.name);
    final IChainElement element=new LocalChainElement(localName,localType);
    accessibleLocals.add(element);
  }
}",0.9912663755458516
93501,"private boolean findReceiverClass(){
  if (ctx.isReceiverImplicitThis()) {
    receiverType=enclosingType;
  }
 else {
    final ITypeName receiverTypeName=ctx.getReceiverType();
    receiverType=toWalaClass(receiverTypeName);
  }
  return receiverType != null;
}","private boolean findReceiverClass(){
  if (ctx.isReceiverImplicitThis()) {
    receiverType=enclosingType;
  }
 else {
    final ITypeName receiverTypeName=ctx.getReceiverType();
    if (receiverType != null) {
      receiverType=toWalaClass(receiverTypeName);
    }
  }
  return receiverType != null;
}",0.9293286219081272
93502,"public ChainingAlgorithm(){
  expectedType=null;
  proposals=Collections.synchronizedList(new LinkedList<ChainProposal>());
  walaService=InjectionService.getInstance().requestInstance(IClassHierarchyService.class);
  javaelementResolver=InjectionService.getInstance().requestInstance(JavaElementResolver.class);
  searchMap=Collections.synchronizedMap(new HashMap<IClass,Map<IMember,IClass>>());
}","public ChainingAlgorithm(){
  expectedType=null;
  proposals=Collections.synchronizedList(new LinkedList<ChainTemplateProposal>());
  walaService=InjectionService.getInstance().requestInstance(IClassHierarchyService.class);
  javaelementResolver=InjectionService.getInstance().requestInstance(JavaElementResolver.class);
  searchMap=Collections.synchronizedMap(new HashMap<IClass,Map<IMember,IClass>>());
}",0.9900497512437813
93503,"public List<ChainProposal> getProposals(){
  return proposals;
}","public List<ChainTemplateProposal> getProposals(){
  return proposals;
}",0.9411764705882352
93504,"public void addProposal(final LinkedList<IChainElement> workingChain){
synchronized (proposals) {
    proposals.add(new ChainProposal(workingChain));
  }
}","public void addProposal(final LinkedList<IChainElement> workingChain){
synchronized (proposals) {
    proposals.add(new ChainTemplateProposal(workingChain));
  }
}",0.9748427672955976
93505,"public void addCastedProposal(final LinkedList<IChainElement> workingChain,final IClass expectedType){
synchronized (proposals) {
    proposals.add(new ChainProposal(workingChain,expectedType));
  }
}","public void addCastedProposal(final LinkedList<IChainElement> workingChain,final IClass expectedType){
synchronized (proposals) {
    proposals.add(new ChainTemplateProposal(workingChain,expectedType));
  }
}",0.9803921568627452
93506,"private boolean storeForProposal(final IClass typeToCheck) throws JavaModelException {
  if (typeToCheck == null) {
    return true;
  }
  final int testResult=WalaCache.equalityTest(typeToCheck,expectedType);
  if ((testResult & WalaCache.RESULT_EQUAL) > 0) {
    if (!checkRedundancy()) {
      internalProposalStore.addProposal(workingChain);
      return false;
    }
 else {
      return true;
    }
  }
  if ((testResult & WalaCache.RESULT_PRIMITIVE) > 0) {
    return true;
  }
  if (WalaCache.isSubtype(typeToCheck,expectedType) && !((testResult & WalaCache.RESULT_EQUAL) > 0)) {
    if (!checkRedundancy()) {
      internalProposalStore.addCastedProposal(workingChain,expectedType);
      return false;
    }
 else {
      return true;
    }
  }
  if (WalaCache.isSupertype(typeToCheck,expectedType) && !((testResult & WalaCache.RESULT_EQUAL) > 0)) {
    if (!checkRedundancy()) {
      internalProposalStore.addProposal(workingChain);
      return false;
    }
 else {
      return true;
    }
  }
  return false;
}","private boolean storeForProposal(final IClass typeToCheck) throws JavaModelException {
  if (typeToCheck == null) {
    return true;
  }
  final int testResult=InheritanceHierarchyCache.equalityTest(typeToCheck,expectedType);
  if ((testResult & InheritanceHierarchyCache.RESULT_EQUAL) > 0) {
    if (!checkRedundancy()) {
      internalProposalStore.addProposal(workingChain);
      return false;
    }
 else {
      return true;
    }
  }
  if ((testResult & InheritanceHierarchyCache.RESULT_PRIMITIVE) > 0) {
    return true;
  }
  if (InheritanceHierarchyCache.isSubtype(typeToCheck,expectedType) && !((testResult & InheritanceHierarchyCache.RESULT_EQUAL) > 0)) {
    if (!checkRedundancy()) {
      internalProposalStore.addCastedProposal(workingChain,expectedType);
      return false;
    }
 else {
      return true;
    }
  }
  if (InheritanceHierarchyCache.isSupertype(typeToCheck,expectedType) && !((testResult & InheritanceHierarchyCache.RESULT_EQUAL) > 0)) {
    if (!checkRedundancy()) {
      internalProposalStore.addProposal(workingChain);
      return false;
    }
 else {
      return true;
    }
  }
  return false;
}",0.9222941720629048
93507,"/** 
 * @param receiverName The variable name if it could be extracted from the context.
 * @param receiverType The type of the variable on which completion is requested.
 * @param context The context holding information about the completion request.
 * @param needsConstructor True, if the completion is invoked while a new variable is defined, e.g. <code>Button b<^Space></code>.
 * @return The {@link CompletionTargetVariable} representing the variable onwhich the request was invoked or which shall be constructed in case it was invoked while defining a new variable.
 */
private static CompletionTargetVariable createInvokedVariable(final String receiverName,final ITypeName receiverType,final IIntelligentCompletionContext context,final boolean needsConstructor){
  CompletionTargetVariable completionTargetVariable=null;
  if (receiverType != null) {
    int documentOffset;
    int variableNameLength=0;
    if (!needsConstructor && receiverName.length() > 0) {
      variableNameLength=receiverName.length() + 1;
    }
    if (needsConstructor) {
      documentOffset=context.getReplacementRegion().getOffset();
    }
 else {
      documentOffset=context.getInvocationOffset() - variableNameLength;
    }
    final int replacementLength=context.getReplacementRegion().getLength() + variableNameLength;
    completionTargetVariable=new CompletionTargetVariable(receiverName,receiverType,new Region(documentOffset,replacementLength),needsConstructor);
  }
  return completionTargetVariable;
}","/** 
 * @param receiverName The variable name if it could be extracted from the context.
 * @param receiverType The type of the variable on which completion is requested.
 * @param context The context holding information about the completion request.
 * @param needsConstructor True, if the completion is invoked while a new variable is defined, e.g. <code>Button b<^Space></code>.
 * @return The {@link CompletionTargetVariable} representing the variable onwhich the request was invoked or which shall be constructed in case it was invoked while defining a new variable.
 */
private static CompletionTargetVariable createInvokedVariable(final String receiverName,final ITypeName receiverType,final IIntelligentCompletionContext context,final boolean needsConstructor){
  CompletionTargetVariable completionTargetVariable=null;
  if (receiverType != null) {
    int variableNameLength=0;
    if (!needsConstructor && receiverName.length() > 0) {
      variableNameLength=receiverName.length() + 1;
    }
    final int documentOffset=context.getReplacementRegion().getOffset() - variableNameLength;
    final int replacementLength=context.getReplacementRegion().getLength() + variableNameLength;
    completionTargetVariable=new CompletionTargetVariable(receiverName,receiverType,new Region(documentOffset,replacementLength),needsConstructor);
  }
  return completionTargetVariable;
}",0.9389312977099236
93508,"/** 
 * @param methodCall {@link MethodCall} holding information about the method callto format and on which variable it is invoked.
 * @return The name of the new variable created from the method's returnedtype.
 */
private static String getNewVariableName(final MethodCall methodCall){
  final IMethodName invokedMethod=methodCall.getInvokedMethod();
  String variableName=null;
  if (invokedMethod.isInit()) {
    variableName=methodCall.getCompletionTargetVariable().getName();
  }
  if (variableName == null) {
    variableName=getNewVariableNameFromMethod(invokedMethod);
  }
  return variableName;
}","/** 
 * @param methodCall {@link MethodCall} holding information about the method callto format and on which variable it is invoked.
 * @return The name of the new variable created from the method's returnedtype.
 */
private static String getNewVariableName(final MethodCall methodCall){
  String variableName=null;
  if (methodCall.getInvokedMethod().isInit()) {
    variableName=methodCall.getCompletionTargetVariable().getName();
  }
  if (variableName == null || variableName.isEmpty()) {
    variableName=getNewVariableNameFromMethod(methodCall);
  }
  return variableName;
}",0.8263069139966274
93509,"/** 
 * @param methodName A method which returns a type other than void.
 * @return A variable name from the given method's name (e.g. ""<code>getText</code>"" to ""<code>text</code>"") or its return type (e.g. ""<code>someMethod : String</code>"" to ""<code>string</code> "").
 */
private static String getNewVariableNameFromMethod(final IMethodName methodName){
  String variableName;
  if (methodName.getName().startsWith(""String_Node_Str"")) {
    variableName=methodName.getName().substring(3);
  }
 else {
    variableName=methodName.getReturnType().getClassName();
  }
  return StringUtils.uncapitalize(variableName);
}","/** 
 * @param methodCall {@link MethodCall} holding information about the method callto format and on which variable it is invoked.
 * @return A variable name from the given method's name (e.g. ""<code>getText</code>"" to ""<code>text</code>"") or its return type (e.g. ""<code>someMethod : String</code>"" to ""<code>string</code> "").
 */
private static String getNewVariableNameFromMethod(final MethodCall methodCall){
  String variableName;
  final IMethodName methodName=methodCall.getInvokedMethod();
  if (methodName.isInit()) {
    final String type=Names.vm2srcTypeName(methodCall.getCompletionTargetVariable().getType().getIdentifier());
    variableName=String.format(""String_Node_Str"",type);
  }
 else   if (methodName.getName().startsWith(""String_Node_Str"")) {
    variableName=StringUtils.uncapitalize(methodName.getName().substring(3));
    if (variableName.equals(methodCall.getCompletionTargetVariable().getName())) {
      final String type=Names.vm2srcTypeName(methodName.getReturnType().getIdentifier());
      variableName=String.format(""String_Node_Str"",type);
    }
  }
 else {
    variableName=StringUtils.uncapitalize(methodName.getReturnType().getClassName());
  }
  return variableName;
}",0.3945205479452054
93510,"/** 
 * @param methodCall {@link MethodCall} holding information about the method callto format and on which variable it is invoked.
 * @return A string representation of the whole expression, i.e. thedefinition of a new variable if something is returned and the variable with the invoked method, e.g. "" <code>String text = button.getText()</code>"".
 * @throws JavaModelException When the method could not be resolved by JDT.
 */
String format(final MethodCall methodCall) throws JavaModelException {
  String invocationPrefix;
  final IMethodName invokedMethod=methodCall.getInvokedMethod();
  if (invokedMethod.isInit()) {
    invocationPrefix=""String_Node_Str"";
  }
 else {
    final String variableName=methodCall.getCompletionTargetVariable().getName();
    invocationPrefix=String.format(""String_Node_Str"",variableName == null ? ""String_Node_Str"" : variableName);
  }
  return String.format(""String_Node_Str"",getNewVariableString(methodCall),invocationPrefix,methodFormatter.format(invokedMethod));
}","/** 
 * @param methodCall {@link MethodCall} holding information about the method callto format and on which variable it is invoked.
 * @return A string representation of the whole expression, i.e. thedefinition of a new variable if something is returned and the variable with the invoked method, e.g. "" <code>String text = button.getText()</code>"".
 * @throws JavaModelException When the method could not be resolved by JDT.
 */
String format(final MethodCall methodCall) throws JavaModelException {
  String invocationPrefix;
  final IMethodName invokedMethod=methodCall.getInvokedMethod();
  if (invokedMethod.isInit()) {
    invocationPrefix=""String_Node_Str"";
  }
 else {
    String variableName=methodCall.getCompletionTargetVariable().getName();
    if (variableName == null || variableName.isEmpty()) {
      variableName=""String_Node_Str"";
    }
    invocationPrefix=String.format(""String_Node_Str"",variableName);
  }
  return String.format(""String_Node_Str"",getNewVariableString(methodCall),invocationPrefix,methodFormatter.format(invokedMethod));
}",0.9268765133171912
93511,"/** 
 * @param methodName The method for which to get the parameter names.
 * @return The method's parameters as template code, e.g.<code>${string}, ${selected:link(false, true)}</code>.
 * @throws JavaModelException When the method could not be resolved by JDT.
 */
String getParametersString(final IMethodName methodName) throws JavaModelException {
  final StringBuilder parameters=new StringBuilder(32);
  final IMethod jdtMethod=elementResolver.toJdtMethod(methodName);
  final String[] parameterNames=jdtMethod.getParameterNames();
  final String[] parameterTypes=jdtMethod.getParameterTypes();
  for (int i=0; i < parameterNames.length; ++i) {
    parameters.append(getParameterString(parameterNames[i],parameterTypes[i]));
    parameters.append(""String_Node_Str"");
  }
  return StringUtils.chomp(parameters.toString(),""String_Node_Str"");
}","/** 
 * @param methodName The method for which to get the parameter names.
 * @return The method's parameters as template code, e.g.<code>${string}, ${selected:link(false, true)}</code>.
 * @throws JavaModelException When the method could not be resolved by JDT.
 */
private String getParametersString(final IMethodName methodName) throws JavaModelException {
  final StringBuilder parameters=new StringBuilder(32);
  final IMethod jdtMethod=elementResolver.toJdtMethod(methodName);
  final String[] parameterNames=jdtMethod.getParameterNames();
  final String[] parameterTypes=jdtMethod.getParameterTypes();
  for (int i=0; i < parameterNames.length; ++i) {
    parameters.append(getParameterString(parameterNames[i],parameterTypes[i]));
    parameters.append(""String_Node_Str"");
  }
  return StringUtils.chomp(parameters.toString(),""String_Node_Str"");
}",0.9952996474735604
93512,"@Override public void analyzeMethod(final Entrypoint entrypoint,final MethodDeclaration method){
  this.methodDecl=method;
  setEntrypointMethod(entrypoint);
  buildCallGraph(entrypoint);
  createHeapHelper();
  createInstanceKeyMappings();
  invokeCallgraphAnalyzers();
}","@Override public void analyzeMethod(final Entrypoint entrypoint,final MethodDeclaration method,final IProgressMonitor monitor){
  if (monitor.isCanceled()) {
    return;
  }
  this.methodDecl=method;
  setEntrypointMethod(entrypoint);
  buildCallGraph(entrypoint);
  createHeapHelper();
  createInstanceKeyMappings();
  invokeCallgraphAnalyzers();
}",0.8760064412238325
93513,"void finalizeClass(CompilationUnit compilationUnit,IClass exampleClass);","void finalizeClass(CompilationUnit compilationUnit,IClass exampleClass,IProgressMonitor monitor);",0.8520710059171598
93514,"@Override public void analyzeMethod(final Entrypoint entrypoint,final MethodDeclaration methodDecl){
  final IMethod method=entrypoint.getMethod();
  if (!method.isInit()) {
    return;
  }
  final IClass declaringClass=method.getDeclaringClass();
  final IClass superclass=declaringClass.getSuperclass();
  if (superclass != null) {
    final ITypeName typeName=WalaNameUtils.wala2recTypeName(superclass);
    final IMethodName methodName=VmMethodName.get(typeName.getIdentifier(),""String_Node_Str"");
    methodDecl.firstDeclaration=methodName;
    methodDecl.superDeclaration=methodName;
  }
}","@Override public void analyzeMethod(final Entrypoint entrypoint,final MethodDeclaration methodDecl,final IProgressMonitor monitor){
  final IMethod method=entrypoint.getMethod();
  if (!method.isInit()) {
    return;
  }
  final IClass declaringClass=method.getDeclaringClass();
  final IClass superclass=declaringClass.getSuperclass();
  if (superclass != null) {
    final ITypeName typeName=WalaNameUtils.wala2recTypeName(superclass);
    final IMethodName methodName=VmMethodName.get(typeName.getIdentifier(),""String_Node_Str"");
    methodDecl.firstDeclaration=methodName;
    methodDecl.superDeclaration=methodName;
  }
}",0.9746109746109746
93515,"@Override public void analyzeClass(final IClass exampleClass,final TypeDeclaration type){
  for (  final IField field : exampleClass.getDeclaredInstanceFields()) {
    final TypeReference fieldType=field.getFieldTypeReference();
    final ITypeName typeName=WalaNameUtils.wala2recTypeName(fieldType);
    type.fields.add(typeName);
  }
}","@Override public void analyzeClass(final IClass exampleClass,final TypeDeclaration type,final IProgressMonitor monitor){
  for (  final IField field : exampleClass.getDeclaredInstanceFields()) {
    final TypeReference fieldType=field.getFieldTypeReference();
    final ITypeName typeName=WalaNameUtils.wala2recTypeName(fieldType);
    type.fields.add(typeName);
  }
}",0.9560283687943264
93516,"@Override public void analyzeClass(final IClass exampleClass,final TypeDeclaration type){
  for (  final IClass interface_ : exampleClass.getDirectInterfaces()) {
    final ITypeName name=WalaNameUtils.wala2recTypeName(interface_);
    type.interfaces.add(name);
  }
}","@Override public void analyzeClass(final IClass exampleClass,final TypeDeclaration type,final IProgressMonitor monitor){
  for (  final IClass interface_ : exampleClass.getDirectInterfaces()) {
    final ITypeName name=WalaNameUtils.wala2recTypeName(interface_);
    type.interfaces.add(name);
  }
}",0.945326278659612
93517,"@Override public void analyzeClass(final IClass exampleClass,final TypeDeclaration type){
  final IClass superclass=exampleClass.getSuperclass();
  if (superclass != null) {
    type.superclass=WalaNameUtils.wala2recTypeName(superclass);
  }
}","@Override public void analyzeClass(final IClass exampleClass,final TypeDeclaration type,final IProgressMonitor monitor){
  final IClass superclass=exampleClass.getSuperclass();
  if (superclass != null) {
    type.superclass=WalaNameUtils.wala2recTypeName(superclass);
  }
}",0.9400386847195358
93518,"@Override public void finalizeClass(final CompilationUnit compilationUnit,final IClass exampleClass){
  setCompilationUnitFingerprint(compilationUnit,exampleClass);
  final IClassHierarchy cha=exampleClass.getClassHierarchy();
  for (  final ITypeName recType : findAllUsedTypes(compilationUnit)) {
    final TypeReference walaType=WalaNameUtils.rec2walaType(recType);
    final IClass clazz=ClassUtils.findClass(walaType,cha);
    if (clazz != null) {
      addTypeToUsedTypes(compilationUnit,recType,clazz);
    }
  }
}","@Override public void finalizeClass(final CompilationUnit compilationUnit,final IClass exampleClass,final IProgressMonitor monitor){
  setCompilationUnitFingerprint(compilationUnit,exampleClass);
  final IClassHierarchy cha=exampleClass.getClassHierarchy();
  for (  final ITypeName recType : findAllUsedTypes(compilationUnit)) {
    final TypeReference walaType=WalaNameUtils.rec2walaType(recType);
    final IClass clazz=ClassUtils.findClass(walaType,cha);
    if (clazz != null) {
      addTypeToUsedTypes(compilationUnit,recType,clazz);
    }
  }
}",0.9711090400745572
93519,"private void addTypeToUsedTypes(final CompilationUnit compilationUnit,final ITypeName recType,final IClass clazz){
  String fingerprint=fingerprint(clazz);
  final org.eclipse.recommenders.internal.commons.analysis.codeelements.TypeReference recTypeRef=org.eclipse.recommenders.internal.commons.analysis.codeelements.TypeReference.create(recType,fingerprint);
  compilationUnit.imports.add(recTypeRef);
}","private void addTypeToUsedTypes(final CompilationUnit compilationUnit,final ITypeName recType,final IClass clazz){
  final String fingerprint=fingerprint(clazz);
  final org.eclipse.recommenders.internal.commons.analysis.codeelements.TypeReference recTypeRef=org.eclipse.recommenders.internal.commons.analysis.codeelements.TypeReference.create(recType,fingerprint);
  compilationUnit.imports.add(recTypeRef);
}",0.9926289926289926
93520,"@Override public void analyzeMethod(final Entrypoint entrypoint,final MethodDeclaration methodDecl){
  final IMethod method=entrypoint.getMethod();
  if (!MethodUtils.mayHaveSuperDeclaration(method)) {
    return;
  }
  final IMethod firstDeclaration=MethodUtils.findRootDeclaration(method);
  if (firstDeclaration != null && !sameMethods(method,firstDeclaration)) {
    methodDecl.firstDeclaration=WalaNameUtils.wala2recMethodName(firstDeclaration);
  }
}","@Override public void analyzeMethod(final Entrypoint entrypoint,final MethodDeclaration methodDecl,final IProgressMonitor monitor){
  final IMethod method=entrypoint.getMethod();
  if (!MethodUtils.mayHaveSuperDeclaration(method)) {
    return;
  }
  final IMethod firstDeclaration=MethodUtils.findRootDeclaration(method);
  if (firstDeclaration != null && !sameMethods(method,firstDeclaration)) {
    methodDecl.firstDeclaration=WalaNameUtils.wala2recMethodName(firstDeclaration);
  }
}",0.9671261930010604
93521,"void analyzeClass(IClass exampleClass,TypeDeclaration type);","void analyzeClass(IClass exampleClass,TypeDeclaration type,IProgressMonitor monitor);",0.8275862068965517
93522,"void analyzeMethod(Entrypoint entrypoint,MethodDeclaration method);","void analyzeMethod(Entrypoint entrypoint,MethodDeclaration method,IProgressMonitor monitor);",0.8427672955974843
93523,"@Override public void finalizeClass(final CompilationUnit compilationUnit,final IClass exampleClass){
  recursiveRemoveWalaExceptions(compilationUnit.primaryType);
}","@Override public void finalizeClass(final CompilationUnit compilationUnit,final IClass exampleClass,final IProgressMonitor monitor){
  recursiveRemoveWalaExceptions(compilationUnit.primaryType);
}",0.9141274238227148
93524,"@Override public void analyzeMethod(final Entrypoint entrypoint,final MethodDeclaration methodDecl){
  final IMethod method=entrypoint.getMethod();
  methodDecl.line=method.getLineNumber(0);
}","@Override public void analyzeMethod(final Entrypoint entrypoint,final MethodDeclaration methodDecl,final IProgressMonitor monitor){
  final IMethod method=entrypoint.getMethod();
  methodDecl.line=method.getLineNumber(0);
}",0.9253012048192772
93525,"@Override public void analyzeClass(final IClass exampleClass,final TypeDeclaration type){
  type.modifiers=exampleClass.getModifiers();
}","@Override public void analyzeClass(final IClass exampleClass,final TypeDeclaration type,final IProgressMonitor monitor){
  type.modifiers=exampleClass.getModifiers();
}",0.898360655737705
93526,"@Override public void analyzeMethod(final Entrypoint entrypoint,final MethodDeclaration methodDecl){
  final IMethod method=entrypoint.getMethod();
  int modifiers=0;
  if (method.isPrivate()) {
    modifiers|=Modifier.PRIVATE;
  }
  if (method.isProtected()) {
    modifiers|=Modifier.PROTECTED;
  }
  if (method.isPublic()) {
    modifiers|=Modifier.PUBLIC;
  }
  if (method.isAbstract()) {
    modifiers|=Modifier.ABSTRACT;
  }
  if (method.isFinal()) {
    modifiers|=Modifier.FINAL;
  }
  if (method.isStatic()) {
    modifiers|=Modifier.STATIC;
  }
  if (method.isSynchronized()) {
    modifiers|=Modifier.SYNCHRONIZED;
  }
  if (method.isVolatile()) {
    modifiers|=Modifier.VOLATILE;
  }
  if (method.isNative()) {
    modifiers|=Modifier.NATIVE;
  }
  methodDecl.modifiers=modifiers;
}","@Override public void analyzeMethod(final Entrypoint entrypoint,final MethodDeclaration methodDecl,final IProgressMonitor monitor){
  final IMethod method=entrypoint.getMethod();
  int modifiers=0;
  if (method.isPrivate()) {
    modifiers|=Modifier.PRIVATE;
  }
  if (method.isProtected()) {
    modifiers|=Modifier.PROTECTED;
  }
  if (method.isPublic()) {
    modifiers|=Modifier.PUBLIC;
  }
  if (method.isAbstract()) {
    modifiers|=Modifier.ABSTRACT;
  }
  if (method.isFinal()) {
    modifiers|=Modifier.FINAL;
  }
  if (method.isStatic()) {
    modifiers|=Modifier.STATIC;
  }
  if (method.isSynchronized()) {
    modifiers|=Modifier.SYNCHRONIZED;
  }
  if (method.isVolatile()) {
    modifiers|=Modifier.VOLATILE;
  }
  if (method.isNative()) {
    modifiers|=Modifier.NATIVE;
  }
  methodDecl.modifiers=modifiers;
}",0.9808760024676126
93527,"@Override public void analyzeClass(final IClass exampleClass,final TypeDeclaration type){
  final ITypeName name=WalaNameUtils.wala2recTypeName(exampleClass);
  type.name=name;
}","@Override public void analyzeClass(final IClass exampleClass,final TypeDeclaration type,final IProgressMonitor monitor){
  final ITypeName name=WalaNameUtils.wala2recTypeName(exampleClass);
  type.name=name;
}",0.9198966408268734
93528,"@Override public void analyzeMethod(final Entrypoint entrypoint,final MethodDeclaration methodDecl){
  final IMethod method=entrypoint.getMethod();
  methodDecl.name=WalaNameUtils.wala2recMethodName(method);
}","@Override public void analyzeMethod(final Entrypoint entrypoint,final MethodDeclaration methodDecl,final IProgressMonitor monitor){
  final IMethod method=entrypoint.getMethod();
  methodDecl.name=WalaNameUtils.wala2recMethodName(method);
}",0.930957683741648
93529,"@Override public void analyzeMethod(final Entrypoint entrypoint,final MethodDeclaration methodDecl){
  final IMethod method=entrypoint.getMethod();
  if (method.isInit()) {
    return;
  }
  final IMethod superDeclaration=MethodUtils.findSuperDeclaration(method);
  if (superDeclaration != null) {
    methodDecl.superDeclaration=WalaNameUtils.wala2recMethodName(superDeclaration);
  }
}","@Override public void analyzeMethod(final Entrypoint entrypoint,final MethodDeclaration methodDecl,final IProgressMonitor monitor){
  final IMethod method=entrypoint.getMethod();
  if (method.isInit()) {
    return;
  }
  final IMethod superDeclaration=MethodUtils.findSuperDeclaration(method);
  if (superDeclaration != null) {
    methodDecl.superDeclaration=WalaNameUtils.wala2recMethodName(superDeclaration);
  }
}",0.9614906832298136
93530,"@Override public void finalizeClass(final CompilationUnit compilationUnit,final IClass exampleClass){
  recursiveRemoveWalaExceptions(compilationUnit.primaryType);
}","@Override public void finalizeClass(final CompilationUnit compilationUnit,final IClass exampleClass,final IProgressMonitor monitor){
  recursiveRemoveWalaExceptions(compilationUnit.primaryType);
}",0.9141274238227148
93531,"@Override public void finalizeClass(final CompilationUnit compilationUnit,final IClass exampleClass){
  recursiveRemoveWalaExceptions(compilationUnit.primaryType);
}","@Override public void finalizeClass(final CompilationUnit compilationUnit,final IClass exampleClass,final IProgressMonitor monitor){
  recursiveRemoveWalaExceptions(compilationUnit.primaryType);
}",0.9141274238227148
93532,"@Override @Before public void setUp() throws Exception {
  super.setUp();
  Activator.getDefault().getRepositoryCache().clear();
  final MockSystemReader mockSystemReader=new MockSystemReader();
  SystemReader.setInstance(mockSystemReader);
  mockSystemReader.setProperty(Constants.GIT_CEILING_DIRECTORIES_KEY,ResourcesPlugin.getWorkspace().getRoot().getLocation().toFile().getParentFile().getAbsoluteFile().toString());
  final IWorkspaceRoot workspaceRoot=project.getProject().getWorkspace().getRoot();
  gitDir=new File(workspaceRoot.getRawLocation().toFile(),Constants.DOT_GIT);
  repository=new GitTestRepository(gitDir);
  repository.connect(project.getProject());
  repository.ignore(workspaceRoot.getRawLocation().append(""String_Node_Str"").toFile());
}","@Override @Before public void setUp() throws Exception {
  super.setUp();
  Activator.getDefault().getRepositoryCache().clear();
  final MockSystemReader mockSystemReader=new MockSystemReader();
  SystemReader.setInstance(mockSystemReader);
  mockSystemReader.setProperty(Constants.GIT_CEILING_DIRECTORIES_KEY,ResourcesPlugin.getWorkspace().getRoot().getLocation().toFile().getParentFile().getAbsoluteFile().toString());
  final IWorkspaceRoot workspaceRoot=project.getProject().getWorkspace().getRoot();
  gitDir=new File(workspaceRoot.getRawLocation().toFile(),Constants.DOT_GIT);
  repository=new GitTestRepository(gitDir);
  repository.connect(project.getProject());
  File gitIgnoreFile=workspaceRoot.getRawLocation().append(""String_Node_Str"").toFile();
  Path gitIgnorePath=gitIgnoreFile.toPath();
  Files.write(gitIgnorePath,Collections.singleton(""String_Node_Str""),Charset.forName(""String_Node_Str""),StandardOpenOption.CREATE);
}",0.8744843842074249
93533,"private static void copyDirectoryContents(File rootDirectory,final File workingDirectory) throws IOException {
  for (  String child : rootDirectory.list()) {
    copyDirectory(new File(rootDirectory,child),new File(workingDirectory,child));
  }
}","private static void copyDirectoryContents(File rootDirectory,final File workingDirectory) throws IOException {
  String[] list=rootDirectory.list();
  if (list != null) {
    for (    String child : list) {
      copyDirectory(new File(rootDirectory,child),new File(workingDirectory,child));
    }
  }
}",0.8109090909090909
93534,"private Iterable<File> getAllContainedFiles(File workingDirectory){
  final Builder<File> builder=ImmutableList.builder();
  for (  File containedFile : workingDirectory.listFiles()) {
    if (containedFile.isFile()) {
      builder.add(containedFile);
    }
 else     if (containedFile.isDirectory()) {
      builder.addAll(getAllContainedFiles(containedFile));
    }
  }
  return builder.build();
}","private Iterable<File> getAllContainedFiles(File workingDirectory){
  final Builder<File> builder=ImmutableList.builder();
  File[] listFiles=workingDirectory.listFiles();
  if (listFiles != null) {
    for (    File containedFile : listFiles) {
      if (containedFile.isFile()) {
        builder.add(containedFile);
      }
 else       if (containedFile.isDirectory()) {
        builder.addAll(getAllContainedFiles(containedFile));
      }
    }
  }
  return builder.build();
}",0.7895335608646189
93535,"private static void copyDirectory(File source,File destination) throws IOException {
  if (source.isDirectory()) {
    if (!destination.exists()) {
      destination.mkdir();
    }
    for (    String child : source.list()) {
      copyDirectory(new File(source,child),new File(destination,child));
    }
  }
 else {
    copyFile(source,destination);
  }
}","private static void copyDirectory(File source,File destination) throws IOException {
  if (source != null && source.isDirectory()) {
    if (destination != null && !destination.exists()) {
      destination.mkdir();
    }
    String[] list=source.list();
    if (list != null) {
      for (      String child : list) {
        copyDirectory(new File(source,child),new File(destination,child));
      }
    }
  }
 else {
    copyFile(source,destination);
  }
}",0.8220858895705522
93536,"/** 
 * Import the Eclipse projects contained in the given file.
 * @param file The folder to look inside
 * @throws InvocationTargetException Thrown if an error happen during the import of the project
 * @throws InterruptedException Thrown if the import operation is interrupted
 * @throws CoreException Thrown if the project cannot be created in the workspace
 */
private void importProjects(File file) throws InvocationTargetException, InterruptedException, CoreException {
  for (  File child : file.listFiles()) {
    if (child.isDirectory() && !child.getName().equals(METADATA_FOLDER) && !child.getName().equals(""String_Node_Str"")) {
      importProjects(child);
    }
 else     if (child.getName().equals(""String_Node_Str"")) {
      importProject(child);
    }
  }
}","/** 
 * Import the Eclipse projects contained in the given file.
 * @param file The folder to look inside
 * @throws InvocationTargetException Thrown if an error happen during the import of the project
 * @throws InterruptedException Thrown if the import operation is interrupted
 * @throws CoreException Thrown if the project cannot be created in the workspace
 */
private void importProjects(File file) throws InvocationTargetException, InterruptedException, CoreException {
  File[] listFiles=file.listFiles();
  if (listFiles != null) {
    for (    File child : listFiles) {
      if (child.isDirectory() && !child.getName().equals(METADATA_FOLDER) && !child.getName().equals(""String_Node_Str"")) {
        importProjects(child);
      }
 else       if (child.getName().equals(""String_Node_Str"")) {
        importProject(child);
      }
    }
  }
}",0.934153846153846
93537,"/** 
 * Clean all possibly remaining elements to start the test in a clean state.
 * @throws CoreException Thrown if a project cannot be deleted
 * @throws IOException Thrown if a file cannot be deleted
 */
protected void setup() throws CoreException, IOException {
  final IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
  IProject[] unknownProjects=workspaceRoot.getProjects();
  if (unknownProjects != null && unknownProjects.length > 0) {
    for (    IProject iProject : unknownProjects) {
      iProject.delete(true,new NullProgressMonitor());
    }
  }
  Activator.getDefault().getRepositoryCache().clear();
  File file=new File(workspaceRoot.getLocation().toOSString());
  for (  File child : file.listFiles()) {
    if (!child.getName().equals(METADATA_FOLDER)) {
      FileUtils.delete(child,FileUtils.RECURSIVE | FileUtils.RETRY);
    }
  }
}","/** 
 * Clean all possibly remaining elements to start the test in a clean state.
 * @throws CoreException Thrown if a project cannot be deleted
 * @throws IOException Thrown if a file cannot be deleted
 */
protected void setup() throws CoreException, IOException {
  final IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();
  IProject[] unknownProjects=workspaceRoot.getProjects();
  if (unknownProjects != null && unknownProjects.length > 0) {
    for (    IProject iProject : unknownProjects) {
      iProject.delete(true,new NullProgressMonitor());
    }
  }
  Activator.getDefault().getRepositoryCache().clear();
  File file=new File(workspaceRoot.getLocation().toOSString());
  File[] listFiles=file.listFiles();
  if (listFiles != null) {
    for (    File child : listFiles) {
      if (!child.getName().equals(METADATA_FOLDER)) {
        FileUtils.delete(child,FileUtils.RECURSIVE | FileUtils.RETRY);
      }
    }
  }
}",0.936986301369863
93538,"/** 
 * Find the "".git"" folder in the repository.
 * @param file The path of the root of the unziped files
 * @return The path to the .git folder
 */
private File findGitDir(File file){
  for (  File child : file.listFiles()) {
    if (child.isDirectory() && child.getName().equals(""String_Node_Str"")) {
      return child;
    }
 else     if (child.isDirectory()) {
      File findGitDir=findGitDir(child);
      if (findGitDir != null) {
        return findGitDir;
      }
    }
  }
  return null;
}","/** 
 * Find the "".git"" folder in the repository.
 * @param file The path of the root of the unziped files
 * @return The path to the .git folder
 */
private File findGitDir(File file){
  File[] listFiles=file.listFiles();
  if (listFiles != null) {
    for (    File child : listFiles) {
      if (child.isDirectory() && child.getName().equals(""String_Node_Str"")) {
        return child;
      }
 else       if (child.isDirectory()) {
        File findGitDir=findGitDir(child);
        if (findGitDir != null) {
          return findGitDir;
        }
      }
    }
  }
  return null;
}",0.8831646734130635
93539,"/** 
 * Clear workspace and repository for next tests.
 * @throws CoreException Thrown if a project cannot be deleted
 * @throws IOException Thrown if a file cannot be deleted
 */
protected void tearDown() throws CoreException, IOException {
  if (repository != null) {
    repository.close();
    repository=null;
  }
  if (disposers != null) {
    for (    Runnable disposer : disposers) {
      disposer.run();
    }
    disposers.clear();
  }
  Activator.getDefault().getRepositoryCache().clear();
  if (projects != null) {
    new DisconnectProviderOperation(Arrays.asList(projects)).execute(null);
    for (    IProject iProject : projects) {
      iProject.delete(true,new NullProgressMonitor());
    }
  }
  File file=new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().toOSString());
  for (  File child : file.listFiles()) {
    if (!child.getName().equals(METADATA_FOLDER)) {
      FileUtils.delete(child,FileUtils.RECURSIVE | FileUtils.RETRY);
    }
  }
}","/** 
 * Clear workspace and repository for next tests.
 * @throws CoreException Thrown if a project cannot be deleted
 * @throws IOException Thrown if a file cannot be deleted
 */
protected void tearDown() throws CoreException, IOException {
  if (repository != null) {
    repository.close();
    repository=null;
  }
  if (disposers != null) {
    for (    Runnable disposer : disposers) {
      disposer.run();
    }
    disposers.clear();
  }
  Activator.getDefault().getRepositoryCache().clear();
  if (projects != null) {
    new DisconnectProviderOperation(Arrays.asList(projects)).execute(null);
    for (    IProject iProject : projects) {
      iProject.delete(true,new NullProgressMonitor());
    }
  }
  File file=new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().toOSString());
  File[] listFiles=file.listFiles();
  if (listFiles != null) {
    for (    File child : listFiles) {
      if (!child.getName().equals(METADATA_FOLDER)) {
        FileUtils.delete(child,FileUtils.RECURSIVE | FileUtils.RETRY);
      }
    }
  }
}",0.9433776464795668
93540,"/** 
 * Make sure that and RAC:DELETE is not in conflict with a change on its EObject if this EObject had an eContainer in the ancestor (i.e. when there is a ReferenceChange:DLETE of a containment reference to conflict with)
 */
@Test public void testDanglingRACTest() throws Exception {
  ResourceSet rsAncestor=input.getRACDanglingConflictAncestorModel();
  ResourceSet rsLeft=input.getRACDanglingConflictLeftModel();
  ResourceSet rsRight=input.getRACDanglingConflictRightModel();
  IComparisonScope scope=new DefaultComparisonScope(rsLeft,rsRight,rsAncestor);
  Comparison comparison=EMFCompare.builder().build().compare(scope);
  List<Diff> differences=comparison.getDifferences();
  List<Conflict> conflicts=comparison.getConflicts();
  assertEquals(5,differences.size());
  assertEquals(2,conflicts.size());
  assertEquals(4,Iterables.size(Iterables.filter(differences,hasConflict(REAL))));
  Iterable<Diff> nonConflictingDiffs=Iterables.filter(differences,not(hasConflict(REAL,PSEUDO)));
  assertEquals(1,Iterables.size(nonConflictingDiffs));
  Diff nonConflictingDiff=nonConflictingDiffs.iterator().next();
  assertTrue(nonConflictingDiff instanceof ResourceAttachmentChange);
  assertEquals(DifferenceSource.RIGHT,nonConflictingDiff.getSource());
  assertTrue(((ResourceAttachmentChange)nonConflictingDiff).getResourceURI().endsWith(""String_Node_Str""));
}","/** 
 * Make sure that and RAC:DELETE is not in conflict with a change on its EObject if this EObject had an eContainer in the ancestor (i.e. when there is a ReferenceChange:DLETE of a containment reference to conflict with)
 */
@Test public void testDanglingRACTest() throws Exception {
  ResourceSet rsAncestor=input.getRACDanglingConflictAncestorModel();
  ResourceSet rsLeft=input.getRACDanglingConflictLeftModel();
  ResourceSet rsRight=input.getRACDanglingConflictRightModel();
  IComparisonScope scope=new DefaultComparisonScope(rsLeft,rsRight,rsAncestor);
  Comparison comparison=EMFCompare.builder().build().compare(scope);
  List<Diff> differences=comparison.getDifferences();
  List<Conflict> conflicts=comparison.getConflicts();
  assertEquals(5,differences.size());
  assertEquals(2,conflicts.size());
  assertEquals(4,size(filter(differences,hasConflict(REAL))));
  Iterable<Diff> nonConflictingDiffs=filter(differences,not(hasConflict(REAL,PSEUDO)));
  assertEquals(1,size(nonConflictingDiffs));
  Diff nonConflictingDiff=nonConflictingDiffs.iterator().next();
  assertTrue(nonConflictingDiff instanceof ResourceAttachmentChange);
  assertEquals(DifferenceSource.RIGHT,nonConflictingDiff.getSource());
  assertTrue(((ResourceAttachmentChange)nonConflictingDiff).getResourceURI().endsWith(""String_Node_Str""));
}",0.9851301115241636
93541,"@Test public void testK1UseCase() throws IOException {
  final Resource left=input.getK1Left();
  final Resource origin=input.getK1Origin();
  final Resource right=input.getK1Right();
  final IComparisonScope scope=new DefaultComparisonScope(left,right,origin);
  final Comparison comparison=EMFCompare.builder().build().compare(scope);
  final List<Diff> differences=comparison.getDifferences();
  final List<Conflict> conflicts=comparison.getConflicts();
  assertEquals(6,differences.size());
  assertEquals(2,conflicts.size());
  for (  Conflict conflict : conflicts) {
    assertSame(REAL,conflict.getKind());
  }
}","@Test public void testK1UseCase() throws IOException {
  final Resource left=input.getK1Left();
  final Resource origin=input.getK1Origin();
  final Resource right=input.getK1Right();
  final IComparisonScope scope=new DefaultComparisonScope(left,right,origin);
  final Comparison comparison=EMFCompare.builder().build().compare(scope);
  final List<Diff> differences=comparison.getDifferences();
  final List<Conflict> conflicts=comparison.getConflicts();
  assertEquals(6,differences.size());
  assertEquals(2,conflicts.size());
  Iterable<Conflict> realConflicts=filter(conflicts,containsConflictOfTypes(REAL));
  Iterable<Conflict> pseudoConflicts=filter(conflicts,containsConflictOfTypes(PSEUDO));
  assertEquals(1,size(realConflicts));
  assertEquals(1,size(pseudoConflicts));
}",0.7754811119030649
93542,"@Test public void testK3UseCase() throws IOException {
  final Resource left=input.getK3Left();
  final Resource origin=input.getK3Origin();
  final Resource right=input.getK3Right();
  final IComparisonScope scope=new DefaultComparisonScope(left,right,origin);
  final Comparison comparison=EMFCompare.builder().build().compare(scope);
  final List<Diff> differences=comparison.getDifferences();
  final List<Conflict> conflicts=comparison.getConflicts();
  assertEquals(6,differences.size());
  assertEquals(3,conflicts.size());
  for (  Conflict conflict : conflicts) {
    assertSame(REAL,conflict.getKind());
  }
}","@Test public void testK3UseCase() throws IOException {
  final Resource left=input.getK3Left();
  final Resource origin=input.getK3Origin();
  final Resource right=input.getK3Right();
  final IComparisonScope scope=new DefaultComparisonScope(left,right,origin);
  final Comparison comparison=EMFCompare.builder().build().compare(scope);
  final List<Diff> differences=comparison.getDifferences();
  final List<Conflict> conflicts=comparison.getConflicts();
  assertEquals(6,differences.size());
  assertEquals(3,conflicts.size());
  Iterable<Conflict> realConflicts=filter(conflicts,containsConflictOfTypes(REAL));
  Iterable<Conflict> pseudoConflicts=filter(conflicts,containsConflictOfTypes(PSEUDO));
  assertEquals(1,size(realConflicts));
  assertEquals(2,size(pseudoConflicts));
}",0.7754811119030649
93543,"@Test public void testK2UseCase() throws IOException {
  final Resource left=input.getK2Left();
  final Resource origin=input.getK2Origin();
  final Resource right=input.getK2Right();
  final IComparisonScope scope=new DefaultComparisonScope(left,right,origin);
  final Comparison comparison=EMFCompare.builder().build().compare(scope);
  final List<Diff> differences=comparison.getDifferences();
  final List<Conflict> conflicts=comparison.getConflicts();
  assertEquals(8,differences.size());
  assertEquals(3,conflicts.size());
  for (  Conflict conflict : conflicts) {
    assertSame(REAL,conflict.getKind());
  }
}","@Test public void testK2UseCase() throws IOException {
  final Resource left=input.getK2Left();
  final Resource origin=input.getK2Origin();
  final Resource right=input.getK2Right();
  final IComparisonScope scope=new DefaultComparisonScope(left,right,origin);
  final Comparison comparison=EMFCompare.builder().build().compare(scope);
  final List<Diff> differences=comparison.getDifferences();
  final List<Conflict> conflicts=comparison.getConflicts();
  assertEquals(8,differences.size());
  assertEquals(3,conflicts.size());
  Iterable<Conflict> realConflicts=filter(conflicts,containsConflictOfTypes(REAL));
  Iterable<Conflict> pseudoConflicts=filter(conflicts,containsConflictOfTypes(PSEUDO));
  assertEquals(1,size(realConflicts));
  assertEquals(2,size(pseudoConflicts));
}",0.7754811119030649
93544,"/** 
 * Setup the test checking the implication between conflicts. This setup will assert that the dependencies of all the diffs are correct, then return the exact diff to test in order to validate the point.
 * @return the diff we want to check
 * @throws IOException
 */
private Diff setupImplicationBetweenConflicts() throws IOException {
  final Resource origin=input.getConflictAndPseudoConflictImplicationsAncestor();
  final Resource left=input.getConflictAndPseudoConflictImplicationsLeft();
  final Resource right=input.getConflictAndPseudoConflictImplicationsRight();
  MergeDependenciesChecker checker=null;
  final IComparisonScope scope=new DefaultComparisonScope(left,right,origin);
  Comparison comparison=EMFCompare.builder().build().compare(scope);
  EList<Conflict> conflicts=comparison.getConflicts();
  EList<Diff> differences=comparison.getDifferences();
  assertEquals(9,comparison.getDifferences().size());
  assertEquals(4,conflicts.size());
  Collection<Conflict> pseudoConflicts=Collections2.filter(conflicts,EMFComparePredicates.containsConflictOfTypes(PSEUDO));
  Collection<Conflict> realConflicts=Collections2.filter(conflicts,EMFComparePredicates.containsConflictOfTypes(REAL));
  assertEquals(2,pseudoConflicts.size());
  assertEquals(2,realConflicts.size());
  Conflict pseudo1=null;
  Conflict pseudo2=null;
  for (  Conflict conflict : pseudoConflicts) {
    if (conflict.getLeftDifferences().get(0).getMatch().getOrigin().toString().contains(""String_Node_Str"")) {
      pseudo1=conflict;
    }
 else     if (conflict.getLeftDifferences().get(0).getMatch().getOrigin().toString().contains(""String_Node_Str"")) {
      pseudo2=conflict;
    }
  }
  assertNotNull(pseudo1);
  assertNotNull(pseudo2);
  Conflict real1=null;
  Conflict real2=null;
  for (  Conflict conflict : realConflicts) {
    if (conflict.getLeftDifferences().get(0).getMatch().getDifferences().size() == 1) {
      real2=conflict;
    }
 else     if (conflict.getLeftDifferences().get(0).getMatch().getDifferences().size() == 2) {
      real1=conflict;
    }
  }
  assertNotNull(real1);
  assertNotNull(real2);
  Collection<Diff> conflict1FromLeft=Collections2.filter(real1.getDifferences(),fromSide(LEFT));
  Collection<Diff> conflict1FromRight=Collections2.filter(real1.getDifferences(),fromSide(RIGHT));
  assertEquals(1,conflict1FromLeft.size());
  assertEquals(1,conflict1FromRight.size());
  Collection<Diff> conflict2FromLeft=Collections2.filter(real2.getDifferences(),fromSide(LEFT));
  Collection<Diff> conflict2FromRight=Collections2.filter(real2.getDifferences(),fromSide(RIGHT));
  assertEquals(1,conflict2FromLeft.size());
  assertEquals(1,conflict2FromRight.size());
  Diff deleteClassB=conflict1FromLeft.iterator().next();
  differences.remove(deleteClassB);
  Diff renameClassB=conflict1FromRight.iterator().next();
  differences.remove(renameClassB);
  Diff deletePackageA=conflict2FromLeft.iterator().next();
  differences.remove(deletePackageA);
  Diff renamePackageA=conflict2FromRight.iterator().next();
  differences.remove(renamePackageA);
  for (  Diff diff : pseudo1.getDifferences()) {
    differences.remove(diff);
    checker=getChecker(diff);
    if (diff.getSource() == DifferenceSource.LEFT) {
      checker.rightToLeft().implies(7).rejects(0).check();
      checker.leftToRight().implies(2).rejects(0).check();
    }
 else {
      checker.rightToLeft().implies(2).rejects(0).check();
      checker.leftToRight().implies(7).rejects(0).check();
    }
  }
  for (  Diff diff : pseudo2.getDifferences()) {
    differences.remove(diff);
    checker=getChecker(diff);
    if (diff.getSource() == DifferenceSource.LEFT) {
      checker.rightToLeft().implies(3).rejects(0).check();
      checker.leftToRight().implies(4).rejects(0).check();
    }
 else {
      checker.rightToLeft().implies(4).rejects(0).check();
      checker.leftToRight().implies(3).rejects(0).check();
    }
  }
  checker=getChecker(deleteClassB);
  checker.rightToLeft().implies(2).rejects(0).check();
  checker.leftToRight().implies(3).rejects(1).check();
  checker=getChecker(renameClassB);
  checker.rightToLeft().implies(1).rejects(2).check();
  checker.leftToRight().implies(1).rejects(0).check();
  checker=getChecker(deletePackageA);
  checker.rightToLeft().implies(1).rejects(0).check();
  checker.leftToRight().implies(4).rejects(2).check();
  checker=getChecker(renamePackageA);
  checker.rightToLeft().implies(1).rejects(1).check();
  checker.leftToRight().implies(1).rejects(0).check();
  assertEquals(1,differences.size());
  return differences.get(0);
}","/** 
 * Setup the test checking the implication between conflicts. This setup will assert that the dependencies of all the diffs are correct, then return the exact diff to test in order to validate the point.
 * @return the diff we want to check
 * @throws IOException
 */
private Diff setupImplicationBetweenConflicts() throws IOException {
  final Resource origin=input.getConflictAndPseudoConflictImplicationsAncestor();
  final Resource left=input.getConflictAndPseudoConflictImplicationsLeft();
  final Resource right=input.getConflictAndPseudoConflictImplicationsRight();
  MergeDependenciesChecker checker=null;
  final IComparisonScope scope=new DefaultComparisonScope(left,right,origin);
  Comparison comparison=EMFCompare.builder().build().compare(scope);
  EList<Conflict> conflicts=comparison.getConflicts();
  EList<Diff> differences=comparison.getDifferences();
  assertEquals(9,comparison.getDifferences().size());
  assertEquals(4,conflicts.size());
  Collection<Conflict> pseudoConflicts=Collections2.filter(conflicts,EMFComparePredicates.containsConflictOfTypes(PSEUDO));
  Collection<Conflict> realConflicts=Collections2.filter(conflicts,EMFComparePredicates.containsConflictOfTypes(REAL));
  assertEquals(2,pseudoConflicts.size());
  assertEquals(2,realConflicts.size());
  Conflict pseudo1=null;
  Conflict pseudo2=null;
  for (  Conflict conflict : pseudoConflicts) {
    if (conflict.getLeftDifferences().get(0).getMatch().getOrigin().toString().contains(""String_Node_Str"")) {
      pseudo1=conflict;
    }
 else     if (conflict.getLeftDifferences().get(0).getMatch().getOrigin().toString().contains(""String_Node_Str"")) {
      pseudo2=conflict;
    }
  }
  assertNotNull(pseudo1);
  assertNotNull(pseudo2);
  Conflict real1=null;
  Conflict real2=null;
  for (  Conflict conflict : realConflicts) {
    if (conflict.getLeftDifferences().get(0).getMatch().getDifferences().size() == 1) {
      real2=conflict;
    }
 else     if (conflict.getLeftDifferences().get(0).getMatch().getDifferences().size() == 2) {
      real1=conflict;
    }
  }
  assertNotNull(real1);
  assertNotNull(real2);
  Collection<Diff> conflict1FromLeft=Collections2.filter(real1.getDifferences(),fromSide(LEFT));
  Collection<Diff> conflict1FromRight=Collections2.filter(real1.getDifferences(),fromSide(RIGHT));
  assertEquals(1,conflict1FromLeft.size());
  assertEquals(1,conflict1FromRight.size());
  Collection<Diff> conflict2FromLeft=Collections2.filter(real2.getDifferences(),fromSide(LEFT));
  Collection<Diff> conflict2FromRight=Collections2.filter(real2.getDifferences(),fromSide(RIGHT));
  assertEquals(1,conflict2FromLeft.size());
  assertEquals(1,conflict2FromRight.size());
  Diff deleteClassB=conflict1FromLeft.iterator().next();
  differences.remove(deleteClassB);
  Diff renameClassB=conflict1FromRight.iterator().next();
  differences.remove(renameClassB);
  Diff deletePackageA=conflict2FromLeft.iterator().next();
  differences.remove(deletePackageA);
  Diff renamePackageA=conflict2FromRight.iterator().next();
  differences.remove(renamePackageA);
  for (  Diff diff : pseudo1.getDifferences()) {
    differences.remove(diff);
    checker=getChecker(diff);
    if (diff.getSource() == DifferenceSource.LEFT) {
      checker.rightToLeft().implies(4).rejects(0).check();
      checker.leftToRight().implies(2).rejects(0).check();
    }
 else {
      checker.rightToLeft().implies(2).rejects(0).check();
      checker.leftToRight().implies(2).rejects(0).check();
    }
  }
  for (  Diff diff : pseudo2.getDifferences()) {
    differences.remove(diff);
    checker=getChecker(diff);
    if (diff.getSource() == DifferenceSource.LEFT) {
      checker.rightToLeft().implies(3).rejects(0).check();
      checker.leftToRight().implies(2).rejects(0).check();
    }
 else {
      checker.rightToLeft().implies(2).rejects(0).check();
      checker.leftToRight().implies(2).rejects(0).check();
    }
  }
  checker=getChecker(deleteClassB);
  checker.rightToLeft().implies(2).rejects(0).check();
  checker.leftToRight().implies(1).rejects(1).check();
  checker=getChecker(renameClassB);
  checker.rightToLeft().implies(1).rejects(2).check();
  checker.leftToRight().implies(1).rejects(0).check();
  checker=getChecker(deletePackageA);
  checker.rightToLeft().implies(1).rejects(0).check();
  checker.leftToRight().implies(2).rejects(2).check();
  checker=getChecker(renamePackageA);
  checker.rightToLeft().implies(1).rejects(1).check();
  checker.leftToRight().implies(1).rejects(0).check();
  assertEquals(1,differences.size());
  return differences.get(0);
}",0.998466929478756
93545,"/** 
 * Assert that the rejection of the deletion of PackageY (right to left) will not lead to unwanted dependencies dues to the presence of a pseudo conflicts (with dependencies) on a child element of packageY. <pre> The ancestor model: - PackageA - ClassB - PackageX - PackageY - ClassZ -> ClassB The left model:  - PackageX  The right model:  - PackageA2 - ClassB2 - PackageX - PackageY </pre> The comparison on those models leads to a pseudo-conflict (deletion of ClassZ -> ClassB) and two conflicts (renaming of PackageA and ClassB).
 * @throws IOException
 */
@Test public void testImplicationBetweenConflicts() throws IOException {
  Diff deletePackageY=setupImplicationBetweenConflicts();
  MergeDependenciesChecker checker=getChecker(deletePackageY);
  checker.rightToLeft().implies(1).rejects(0).check();
  checker.leftToRight().implies(5).rejects(0).check();
}","/** 
 * Assert that the rejection of the deletion of PackageY (right to left) will not lead to unwanted dependencies dues to the presence of a pseudo conflicts (with dependencies) on a child element of packageY. <pre> The ancestor model: - PackageA - ClassB - PackageX - PackageY - ClassZ -> ClassB The left model:  - PackageX  The right model:  - PackageA2 - ClassB2 - PackageX - PackageY </pre> The comparison on those models leads to a pseudo-conflict (deletion of ClassZ -> ClassB) and two conflicts (renaming of PackageA and ClassB).
 * @throws IOException
 */
@Test public void testImplicationBetweenConflicts() throws IOException {
  Diff deletePackageY=setupImplicationBetweenConflicts();
  MergeDependenciesChecker checker=getChecker(deletePackageY);
  checker.rightToLeft().implies(1).rejects(0).check();
  checker.leftToRight().implies(1).rejects(0).check();
}",0.9988518943742823
93546,"@SuppressWarnings(""String_Node_Str"") @Test public void testLeftAddRightAdd_LtR_2() throws IOException {
  final Resource left=input.getLeftAddRightAddLeftConflictScope();
  final Resource right=input.getLeftAddRightAddRightConflictScope();
  final Resource origin=input.getLeftAddRightAddOriginConflictScope();
  final IComparisonScope scope=new DefaultComparisonScope(left,right,origin);
  Comparison comparison=EMFCompare.builder().build().compare(scope);
  List<Diff> differences=comparison.getDifferences();
  assertEquals(6,differences.size());
  final String featureName=""String_Node_Str"";
  final Diff diffNodeCLeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeCRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeDLeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeDRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeELeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeFRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  mergerRegistry.getHighestRankingMerger(diffNodeCRight).copyLeftToRight(diffNodeCRight,new BasicMonitor());
  final EObject rightNodeC=getNodeNamed(right,""String_Node_Str"");
  assertNull(rightNodeC);
  final EObject rightNodeA=getNodeNamed(right,""String_Node_Str"");
  assertNotNull(rightNodeA);
  final EObject rightNodeB=getNodeNamed(right,""String_Node_Str"");
  assertNotNull(rightNodeB);
  final EObject rightNodeD=getNodeNamed(right,""String_Node_Str"");
  assertNull(rightNodeD);
  final EObject rightNodeF=getNodeNamed(right,""String_Node_Str"");
  assertNull(rightNodeF);
  final EStructuralFeature feature=rightNodeA.eClass().getEStructuralFeature(featureName);
  assertNotNull(feature);
  final EList<Node> aContainmentRef1s=((Node)rightNodeA).getContainmentRef1();
  assertFalse(aContainmentRef1s.contains(rightNodeC));
  final EList<Node> bContainmentRef1s=((Node)rightNodeB).getContainmentRef1();
  assertFalse(bContainmentRef1s.contains(rightNodeC));
  assertEquals(DifferenceState.UNRESOLVED,diffNodeCLeft.getState());
  assertEquals(DifferenceState.MERGED,diffNodeCRight.getState());
  assertEquals(DifferenceState.UNRESOLVED,diffNodeDLeft.getState());
  assertEquals(DifferenceState.MERGED,diffNodeDRight.getState());
  assertEquals(DifferenceState.UNRESOLVED,diffNodeELeft.getState());
  assertEquals(DifferenceState.MERGED,diffNodeFRight.getState());
}","@SuppressWarnings(""String_Node_Str"") @Test public void testLeftAddRightAdd_LtR_2() throws IOException {
  final Resource left=input.getLeftAddRightAddLeftConflictScope();
  final Resource right=input.getLeftAddRightAddRightConflictScope();
  final Resource origin=input.getLeftAddRightAddOriginConflictScope();
  final IComparisonScope scope=new DefaultComparisonScope(left,right,origin);
  Comparison comparison=EMFCompare.builder().build().compare(scope);
  List<Diff> differences=comparison.getDifferences();
  assertEquals(6,differences.size());
  final String featureName=""String_Node_Str"";
  final Diff diffNodeCLeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeCRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeDLeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeDRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeELeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeFRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  mergerRegistry.getHighestRankingMerger(diffNodeCRight).copyLeftToRight(diffNodeCRight,new BasicMonitor());
  final EObject rightNodeC=getNodeNamed(right,""String_Node_Str"");
  assertNull(rightNodeC);
  final EObject rightNodeA=getNodeNamed(right,""String_Node_Str"");
  assertNotNull(rightNodeA);
  final EObject rightNodeB=getNodeNamed(right,""String_Node_Str"");
  assertNotNull(rightNodeB);
  final EObject rightNodeD=getNodeNamed(right,""String_Node_Str"");
  assertNull(rightNodeD);
  final EObject rightNodeF=getNodeNamed(right,""String_Node_Str"");
  assertNull(rightNodeF);
  final EStructuralFeature feature=rightNodeA.eClass().getEStructuralFeature(featureName);
  assertNotNull(feature);
  final EList<Node> aContainmentRef1s=((Node)rightNodeA).getContainmentRef1();
  assertFalse(aContainmentRef1s.contains(rightNodeC));
  final EList<Node> bContainmentRef1s=((Node)rightNodeB).getContainmentRef1();
  assertFalse(bContainmentRef1s.contains(rightNodeC));
  assertEquals(DifferenceState.UNRESOLVED,diffNodeCLeft.getState());
  assertEquals(DifferenceState.MERGED,diffNodeCRight.getState());
  assertEquals(DifferenceState.MERGED,diffNodeDLeft.getState());
  assertEquals(DifferenceState.MERGED,diffNodeDRight.getState());
  assertEquals(DifferenceState.UNRESOLVED,diffNodeELeft.getState());
  assertEquals(DifferenceState.MERGED,diffNodeFRight.getState());
}",0.9566062176165804
93547,"@SuppressWarnings(""String_Node_Str"") @Test public void testLeftAddRightAdd_LtR_1() throws IOException {
  final Resource left=input.getLeftAddRightAddLeftConflictScope();
  final Resource right=input.getLeftAddRightAddRightConflictScope();
  final Resource origin=input.getLeftAddRightAddOriginConflictScope();
  final IComparisonScope scope=new DefaultComparisonScope(left,right,origin);
  Comparison comparison=EMFCompare.builder().build().compare(scope);
  List<Diff> differences=comparison.getDifferences();
  assertEquals(6,differences.size());
  final String featureName=""String_Node_Str"";
  final Diff diffNodeCLeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeCRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeDLeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeDRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeELeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeFRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  mergerRegistry.getHighestRankingMerger(diffNodeCLeft).copyLeftToRight(diffNodeCLeft,new BasicMonitor());
  final EObject rightNodeC=getNodeNamed(right,""String_Node_Str"");
  assertNotNull(rightNodeC);
  final EObject rightNodeA=getNodeNamed(right,""String_Node_Str"");
  assertNotNull(rightNodeA);
  final EObject rightNodeB=getNodeNamed(right,""String_Node_Str"");
  assertNotNull(rightNodeB);
  final EObject rightNodeD=getNodeNamed(right,""String_Node_Str"");
  assertNull(rightNodeD);
  final EObject rightNodeF=getNodeNamed(right,""String_Node_Str"");
  assertNull(rightNodeF);
  final EStructuralFeature feature=rightNodeA.eClass().getEStructuralFeature(featureName);
  assertNotNull(feature);
  final EList<Node> containmentRef1s=((Node)rightNodeA).getContainmentRef1();
  assertTrue(containmentRef1s.contains(rightNodeC));
  final EList<Node> bContainmentRef1s=((Node)rightNodeB).getContainmentRef1();
  assertFalse(bContainmentRef1s.contains(rightNodeC));
  assertEquals(DifferenceState.MERGED,diffNodeCLeft.getState());
  assertEquals(DifferenceState.MERGED,diffNodeCRight.getState());
  assertEquals(DifferenceState.UNRESOLVED,diffNodeDLeft.getState());
  assertEquals(DifferenceState.MERGED,diffNodeDRight.getState());
  assertEquals(DifferenceState.UNRESOLVED,diffNodeELeft.getState());
  assertEquals(DifferenceState.MERGED,diffNodeFRight.getState());
}","@SuppressWarnings(""String_Node_Str"") @Test public void testLeftAddRightAdd_LtR_1() throws IOException {
  final Resource left=input.getLeftAddRightAddLeftConflictScope();
  final Resource right=input.getLeftAddRightAddRightConflictScope();
  final Resource origin=input.getLeftAddRightAddOriginConflictScope();
  final IComparisonScope scope=new DefaultComparisonScope(left,right,origin);
  Comparison comparison=EMFCompare.builder().build().compare(scope);
  List<Diff> differences=comparison.getDifferences();
  assertEquals(6,differences.size());
  final String featureName=""String_Node_Str"";
  final Diff diffNodeCLeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeCRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeDLeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeDRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeELeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeFRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  mergerRegistry.getHighestRankingMerger(diffNodeCLeft).copyLeftToRight(diffNodeCLeft,new BasicMonitor());
  final EObject rightNodeC=getNodeNamed(right,""String_Node_Str"");
  assertNotNull(rightNodeC);
  final EObject rightNodeA=getNodeNamed(right,""String_Node_Str"");
  assertNotNull(rightNodeA);
  final EObject rightNodeB=getNodeNamed(right,""String_Node_Str"");
  assertNotNull(rightNodeB);
  final EObject rightNodeD=getNodeNamed(right,""String_Node_Str"");
  assertNull(rightNodeD);
  final EObject rightNodeF=getNodeNamed(right,""String_Node_Str"");
  assertNull(rightNodeF);
  final EStructuralFeature feature=rightNodeA.eClass().getEStructuralFeature(featureName);
  assertNotNull(feature);
  final EList<Node> containmentRef1s=((Node)rightNodeA).getContainmentRef1();
  assertTrue(containmentRef1s.contains(rightNodeC));
  final EList<Node> bContainmentRef1s=((Node)rightNodeB).getContainmentRef1();
  assertFalse(bContainmentRef1s.contains(rightNodeC));
  assertEquals(DifferenceState.MERGED,diffNodeCLeft.getState());
  assertEquals(DifferenceState.MERGED,diffNodeCRight.getState());
  assertEquals(DifferenceState.MERGED,diffNodeDLeft.getState());
  assertEquals(DifferenceState.MERGED,diffNodeDRight.getState());
  assertEquals(DifferenceState.UNRESOLVED,diffNodeELeft.getState());
  assertEquals(DifferenceState.MERGED,diffNodeFRight.getState());
}",0.9565217391304348
93548,"@SuppressWarnings(""String_Node_Str"") @Test public void testLeftAddRightAdd_RtL_1() throws IOException {
  final Resource left=input.getLeftAddRightAddLeftConflictScope();
  final Resource right=input.getLeftAddRightAddRightConflictScope();
  final Resource origin=input.getLeftAddRightAddOriginConflictScope();
  final IComparisonScope scope=new DefaultComparisonScope(left,right,origin);
  Comparison comparison=EMFCompare.builder().build().compare(scope);
  List<Diff> differences=comparison.getDifferences();
  assertEquals(6,differences.size());
  final String featureName=""String_Node_Str"";
  final Diff diffNodeCLeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeCRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeDLeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeDRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeELeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeFRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  mergerRegistry.getHighestRankingMerger(diffNodeCLeft).copyRightToLeft(diffNodeCLeft,new BasicMonitor());
  final EObject leftNodeC=getNodeNamed(left,""String_Node_Str"");
  assertNull(leftNodeC);
  final EObject leftNodeA=getNodeNamed(left,""String_Node_Str"");
  assertNotNull(leftNodeA);
  final EObject leftNodeB=getNodeNamed(left,""String_Node_Str"");
  assertNotNull(leftNodeB);
  final EObject leftNodeD=getNodeNamed(left,""String_Node_Str"");
  assertNull(leftNodeD);
  final EObject leftNodeF=getNodeNamed(left,""String_Node_Str"");
  assertNull(leftNodeF);
  final EStructuralFeature feature=leftNodeA.eClass().getEStructuralFeature(featureName);
  assertNotNull(feature);
  final EList<Node> containmentRef1s=((Node)leftNodeA).getContainmentRef1();
  assertFalse(containmentRef1s.contains(leftNodeC));
  final EList<Node> bContainmentRef1s=((Node)leftNodeB).getContainmentRef1();
  assertFalse(bContainmentRef1s.contains(leftNodeC));
  assertEquals(DifferenceState.MERGED,diffNodeCLeft.getState());
  assertEquals(DifferenceState.UNRESOLVED,diffNodeCRight.getState());
  assertEquals(DifferenceState.MERGED,diffNodeDLeft.getState());
  assertEquals(DifferenceState.UNRESOLVED,diffNodeDRight.getState());
  assertEquals(DifferenceState.MERGED,diffNodeELeft.getState());
  assertEquals(DifferenceState.UNRESOLVED,diffNodeFRight.getState());
}","@SuppressWarnings(""String_Node_Str"") @Test public void testLeftAddRightAdd_RtL_1() throws IOException {
  final Resource left=input.getLeftAddRightAddLeftConflictScope();
  final Resource right=input.getLeftAddRightAddRightConflictScope();
  final Resource origin=input.getLeftAddRightAddOriginConflictScope();
  final IComparisonScope scope=new DefaultComparisonScope(left,right,origin);
  Comparison comparison=EMFCompare.builder().build().compare(scope);
  List<Diff> differences=comparison.getDifferences();
  assertEquals(6,differences.size());
  final String featureName=""String_Node_Str"";
  final Diff diffNodeCLeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeCRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeDLeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeDRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeELeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeFRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  mergerRegistry.getHighestRankingMerger(diffNodeCLeft).copyRightToLeft(diffNodeCLeft,new BasicMonitor());
  final EObject leftNodeC=getNodeNamed(left,""String_Node_Str"");
  assertNull(leftNodeC);
  final EObject leftNodeA=getNodeNamed(left,""String_Node_Str"");
  assertNotNull(leftNodeA);
  final EObject leftNodeB=getNodeNamed(left,""String_Node_Str"");
  assertNotNull(leftNodeB);
  final EObject leftNodeD=getNodeNamed(left,""String_Node_Str"");
  assertNull(leftNodeD);
  final EObject leftNodeF=getNodeNamed(left,""String_Node_Str"");
  assertNull(leftNodeF);
  final EStructuralFeature feature=leftNodeA.eClass().getEStructuralFeature(featureName);
  assertNotNull(feature);
  final EList<Node> containmentRef1s=((Node)leftNodeA).getContainmentRef1();
  assertFalse(containmentRef1s.contains(leftNodeC));
  final EList<Node> bContainmentRef1s=((Node)leftNodeB).getContainmentRef1();
  assertFalse(bContainmentRef1s.contains(leftNodeC));
  assertEquals(DifferenceState.MERGED,diffNodeCLeft.getState());
  assertEquals(DifferenceState.UNRESOLVED,diffNodeCRight.getState());
  assertEquals(DifferenceState.MERGED,diffNodeDLeft.getState());
  assertEquals(DifferenceState.MERGED,diffNodeDRight.getState());
  assertEquals(DifferenceState.MERGED,diffNodeELeft.getState());
  assertEquals(DifferenceState.UNRESOLVED,diffNodeFRight.getState());
}",0.956266318537859
93549,"@SuppressWarnings(""String_Node_Str"") @Test public void testLeftAddRightAdd_RtL_2() throws IOException {
  final Resource left=input.getLeftAddRightAddLeftConflictScope();
  final Resource right=input.getLeftAddRightAddRightConflictScope();
  final Resource origin=input.getLeftAddRightAddOriginConflictScope();
  final IComparisonScope scope=new DefaultComparisonScope(left,right,origin);
  Comparison comparison=EMFCompare.builder().build().compare(scope);
  List<Diff> differences=comparison.getDifferences();
  assertEquals(6,differences.size());
  final String featureName=""String_Node_Str"";
  final Diff diffNodeCLeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeCRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeDLeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeDRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeELeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeFRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  mergerRegistry.getHighestRankingMerger(diffNodeCRight).copyRightToLeft(diffNodeCRight,new BasicMonitor());
  final EObject leftNodeC=getNodeNamed(left,""String_Node_Str"");
  assertNotNull(leftNodeC);
  final EObject leftNodeA=getNodeNamed(left,""String_Node_Str"");
  assertNotNull(leftNodeA);
  final EObject leftNodeB=getNodeNamed(left,""String_Node_Str"");
  assertNotNull(leftNodeB);
  final EObject leftNodeD=getNodeNamed(left,""String_Node_Str"");
  assertNull(leftNodeD);
  final EObject leftNodeF=getNodeNamed(left,""String_Node_Str"");
  assertNull(leftNodeF);
  final EStructuralFeature feature=leftNodeA.eClass().getEStructuralFeature(featureName);
  assertNotNull(feature);
  final EList<Node> containmentRef1s=((Node)leftNodeA).getContainmentRef1();
  assertFalse(containmentRef1s.contains(leftNodeC));
  final EList<Node> bContainmentRef1s=((Node)leftNodeB).getContainmentRef1();
  assertTrue(bContainmentRef1s.contains(leftNodeC));
  assertEquals(DifferenceState.MERGED,diffNodeCLeft.getState());
  assertEquals(DifferenceState.MERGED,diffNodeCRight.getState());
  assertEquals(DifferenceState.MERGED,diffNodeDLeft.getState());
  assertEquals(DifferenceState.UNRESOLVED,diffNodeDRight.getState());
  assertEquals(DifferenceState.MERGED,diffNodeELeft.getState());
  assertEquals(DifferenceState.UNRESOLVED,diffNodeFRight.getState());
}","@SuppressWarnings(""String_Node_Str"") @Test public void testLeftAddRightAdd_RtL_2() throws IOException {
  final Resource left=input.getLeftAddRightAddLeftConflictScope();
  final Resource right=input.getLeftAddRightAddRightConflictScope();
  final Resource origin=input.getLeftAddRightAddOriginConflictScope();
  final IComparisonScope scope=new DefaultComparisonScope(left,right,origin);
  Comparison comparison=EMFCompare.builder().build().compare(scope);
  List<Diff> differences=comparison.getDifferences();
  assertEquals(6,differences.size());
  final String featureName=""String_Node_Str"";
  final Diff diffNodeCLeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeCRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeDLeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeDRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeELeft=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.LEFT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  final Diff diffNodeFRight=Iterators.find(differences.iterator(),and(fromSide(DifferenceSource.RIGHT),ofKind(DifferenceKind.ADD),referenceValueMatch(featureName,""String_Node_Str"",true)));
  mergerRegistry.getHighestRankingMerger(diffNodeCRight).copyRightToLeft(diffNodeCRight,new BasicMonitor());
  final EObject leftNodeC=getNodeNamed(left,""String_Node_Str"");
  assertNotNull(leftNodeC);
  final EObject leftNodeA=getNodeNamed(left,""String_Node_Str"");
  assertNotNull(leftNodeA);
  final EObject leftNodeB=getNodeNamed(left,""String_Node_Str"");
  assertNotNull(leftNodeB);
  final EObject leftNodeD=getNodeNamed(left,""String_Node_Str"");
  assertNull(leftNodeD);
  final EObject leftNodeF=getNodeNamed(left,""String_Node_Str"");
  assertNull(leftNodeF);
  final EStructuralFeature feature=leftNodeA.eClass().getEStructuralFeature(featureName);
  assertNotNull(feature);
  final EList<Node> containmentRef1s=((Node)leftNodeA).getContainmentRef1();
  assertFalse(containmentRef1s.contains(leftNodeC));
  final EList<Node> bContainmentRef1s=((Node)leftNodeB).getContainmentRef1();
  assertTrue(bContainmentRef1s.contains(leftNodeC));
  assertEquals(DifferenceState.MERGED,diffNodeCLeft.getState());
  assertEquals(DifferenceState.MERGED,diffNodeCRight.getState());
  assertEquals(DifferenceState.MERGED,diffNodeDLeft.getState());
  assertEquals(DifferenceState.MERGED,diffNodeDRight.getState());
  assertEquals(DifferenceState.MERGED,diffNodeELeft.getState());
  assertEquals(DifferenceState.UNRESOLVED,diffNodeFRight.getState());
}",0.956266318537859
93550,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.conflict.IConflictDetector#detect(org.eclipse.emf.compare.Comparison,org.eclipse.emf.common.util.Monitor)
 */
public void detect(Comparison comparison,Monitor monitor){
  long start=System.currentTimeMillis();
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"");
  }
  final List<Diff> differences=comparison.getDifferences();
  final int diffCount=differences.size();
  for (int i=0; i < diffCount; i++) {
    if (i % 100 == 0) {
      monitor.subTask(EMFCompareMessages.getString(""String_Node_Str"",Integer.valueOf(i + 1),Integer.valueOf(diffCount)));
    }
    if (monitor.isCanceled()) {
      throw new ComparisonCanceledException();
    }
    final Diff diff=differences.get(i);
    checkConflict(comparison,diff,Iterables.filter(differences,possiblyConflictingWith(diff)));
  }
  handlePseudoUnderRealAdd(comparison);
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(String.format(""String_Node_Str"",Long.valueOf(System.currentTimeMillis() - start)));
  }
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.conflict.IConflictDetector#detect(org.eclipse.emf.compare.Comparison,org.eclipse.emf.common.util.Monitor)
 */
public void detect(Comparison comparison,Monitor monitor){
  long start=System.currentTimeMillis();
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"");
  }
  final List<Diff> differences=comparison.getDifferences();
  final int diffCount=differences.size();
  for (int i=0; i < diffCount; i++) {
    if (i % 100 == 0) {
      monitor.subTask(EMFCompareMessages.getString(""String_Node_Str"",Integer.valueOf(i + 1),Integer.valueOf(diffCount)));
    }
    if (monitor.isCanceled()) {
      throw new ComparisonCanceledException();
    }
    final Diff diff=differences.get(i);
    checkConflict(comparison,diff,Iterables.filter(differences,possiblyConflictingWith(diff)));
  }
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(String.format(""String_Node_Str"",Long.valueOf(System.currentTimeMillis() - start)));
  }
}",0.9802371541501976
93551,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.conflict.IConflictDetector#detect(org.eclipse.emf.compare.Comparison,org.eclipse.emf.common.util.Monitor)
 */
public void detect(Comparison comparison,Monitor monitor){
  long start=System.currentTimeMillis();
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"");
  }
  final List<Diff> differences=comparison.getDifferences();
  final int diffCount=differences.size();
  ConflictSearchFactory conflictSearchFactory=new ConflictSearchFactory(comparison,monitor);
  for (int i=0; i < diffCount; i++) {
    if (i % 100 == 0) {
      monitor.subTask(EMFCompareMessages.getString(""String_Node_Str"",Integer.valueOf(i + 1),Integer.valueOf(diffCount)));
    }
    if (monitor.isCanceled()) {
      throw new ComparisonCanceledException();
    }
    final Diff diff=differences.get(i);
    AbstractConflictSearch<? extends Diff> search=conflictSearchFactory.doSwitch(diff);
    search.detectConflicts();
  }
  handlePseudoUnderRealAdd(comparison);
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(String.format(""String_Node_Str"",Long.valueOf(System.currentTimeMillis() - start)));
  }
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.conflict.IConflictDetector#detect(org.eclipse.emf.compare.Comparison,org.eclipse.emf.common.util.Monitor)
 */
public void detect(Comparison comparison,Monitor monitor){
  long start=System.currentTimeMillis();
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"");
  }
  final List<Diff> differences=comparison.getDifferences();
  final int diffCount=differences.size();
  ConflictSearchFactory conflictSearchFactory=new ConflictSearchFactory(comparison,monitor);
  for (int i=0; i < diffCount; i++) {
    if (i % 100 == 0) {
      monitor.subTask(EMFCompareMessages.getString(""String_Node_Str"",Integer.valueOf(i + 1),Integer.valueOf(diffCount)));
    }
    if (monitor.isCanceled()) {
      throw new ComparisonCanceledException();
    }
    final Diff diff=differences.get(i);
    AbstractConflictSearch<? extends Diff> search=conflictSearchFactory.doSwitch(diff);
    search.detectConflicts();
  }
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(String.format(""String_Node_Str"",Long.valueOf(System.currentTimeMillis() - start)));
  }
}",0.9822537710736468
93552,"private void refreshTitle(){
  if (!getControl().isDisposed()) {
    Composite parent=getControl().getParent();
    Comparison comparison=getCompareConfiguration().getComparison();
    if (parent instanceof CompareViewerSwitchingPane && comparison != null) {
      final Predicate<? super TreeNode> unfilteredNode=new Predicate<TreeNode>(){
        public boolean apply(        TreeNode input){
          return input != null && !JFaceUtil.isFiltered(getViewer(),input,null);
        }
      }
;
      final IDifferenceGroupProvider groupProvider=getCompareConfiguration().getStructureMergeViewerGrouper().getProvider();
      final Set<Diff> differences=new LinkedHashSet<Diff>();
      final List<Iterable<TreeNode>> allTreeNodes=new ArrayList<Iterable<TreeNode>>();
      for (      Diff diff : comparison.getDifferences()) {
        differences.add(diff);
        allTreeNodes.add(groupProvider.getTreeNodes(diff));
      }
      final Iterable<TreeNode> treeNodes=Iterables.concat(allTreeNodes);
      final Set<TreeNode> visibleNodes=ImmutableSet.copyOf(Iterables.filter(treeNodes,unfilteredNode));
      final Set<Diff> visibleDiffs=ImmutableSet.copyOf(Iterables.filter(Iterables.transform(visibleNodes,TREE_NODE_AS_DIFF),Diff.class));
      final int filteredDiff=Sets.difference(differences,visibleDiffs).size();
      final int differencesToMerge=size(Iterables.filter(visibleDiffs,hasState(DifferenceState.UNRESOLVED)));
      ((CompareViewerSwitchingPane)parent).setTitleArgument(EMFCompareIDEUIMessages.getString(""String_Node_Str"",differencesToMerge,visibleNodes.size(),filteredDiff));
    }
  }
}","private void refreshTitle(){
  if (getControl().isDisposed() || !(getControl().getParent() instanceof CompareViewerSwitchingPane)) {
    return;
  }
  if (getCompareConfiguration().getComparison() == null) {
    return;
  }
  Set<Diff> allDiffs=getAllDiffs();
  Set<Diff> visibleDiffs=getVisibleDiffs();
  int visibleDiffCount=visibleDiffs.size();
  int filteredDiffCount=Sets.difference(allDiffs,visibleDiffs).size();
  int diffsToMergeCount=Iterables.size(Iterables.filter(visibleDiffs,hasState(DifferenceState.UNRESOLVED)));
  String titleArgument=EMFCompareIDEUIMessages.getString(""String_Node_Str"",diffsToMergeCount,visibleDiffCount,filteredDiffCount);
  ((CompareViewerSwitchingPane)getControl().getParent()).setTitleArgument(titleArgument);
}",0.1975413310724883
93553,"public boolean apply(TreeNode input){
  return input != null && !JFaceUtil.isFiltered(getViewer(),input,null);
}","public boolean apply(TreeNode input){
  return input != null && JFaceUtil.isFiltered(getViewer(),input,input.getParent());
}",0.923728813559322
93554,"/** 
 * {@inheritDoc} 
 */
@Override public synchronized XMLDefaultHandler getDefaultHandler(XMLResource resource,XMLLoad xmlLoad,XMLHelper helper,Map<?,?> options){
  final NotifyingXMLHelper wrapper=new NotifyingXMLHelper(helper,containmentOnly);
  for (  Object listener : proxyListeners.getListeners()) {
    wrapper.addProxyListener((IProxyCreationListener)listener);
  }
  final XMLDefaultHandler handler=createDefaultHandler(resource,xmlLoad,wrapper,options);
  final NamespaceDeclarationNotifyingXMLDefaultHandler handlerWrapper=new NamespaceDeclarationNotifyingXMLDefaultHandler(handler);
  for (  Object listener : namespaceDeclarationListeners.getListeners()) {
    handlerWrapper.addNamespaceDeclarationListener((INamespaceDeclarationListener)listener);
  }
  handlerWrapper.prepare(resource,wrapper,options);
  return handlerWrapper;
}","/** 
 * {@inheritDoc} 
 */
@Override public synchronized XMLDefaultHandler getDefaultHandler(XMLResource resource,XMLLoad xmlLoad,XMLHelper helper,Map<?,?> options){
  final NotifyingXMLHelper wrapper=new NotifyingXMLHelper(helper,containmentOnly);
  for (  Object listener : proxyListeners.getListeners()) {
    wrapper.addProxyListener((IProxyCreationListener)listener);
  }
  final XMLDefaultHandler handler=createDefaultHandler(resource,xmlLoad,wrapper,options);
  final NamespaceDeclarationNotifyingXMLDefaultHandler handlerWrapper=new NamespaceDeclarationNotifyingXMLDefaultHandler(handler);
  for (  Object listener : namespaceDeclarationListeners.getListeners()) {
    handlerWrapper.addNamespaceDeclarationListener((INamespaceDeclarationListener)listener);
  }
  Map<Object,Object> tmpMap=new HashMap<Object,Object>();
  tmpMap.putAll(options);
  ExtendedMetaData extendedMetaData=helper.getExtendedMetaData();
  if (extendedMetaData != null && !options.containsKey(XMLResource.OPTION_EXTENDED_META_DATA)) {
    tmpMap.put(XMLResource.OPTION_EXTENDED_META_DATA,extendedMetaData);
  }
  handlerWrapper.prepare(resource,wrapper,tmpMap);
  return handlerWrapper;
}",0.8334985133795837
93555,"protected void compareBothDirectionsAndCheck(IFile file,String source,String destination,int expectedConflicts,int diffsInSource,int diffsInDestination) throws Exception {
  repository.checkoutBranch(source);
  Comparison compareResult=compare(source,destination,file);
  assertEquals(expectedConflicts,compareResult.getConflicts().size());
  assertDiffCount(compareResult.getDifferences(),diffsInSource,diffsInDestination);
  repository.checkoutBranch(destination);
  compareResult=compare(destination,source,file);
  assertEquals(expectedConflicts,compareResult.getConflicts().size());
  assertDiffCount(compareResult.getDifferences(),diffsInDestination,diffsInSource);
}","protected void compareBothDirectionsAndCheck(IFile file,String source,String destination,int expectedConflicts,int diffsInSource,int diffsInDestination) throws Exception {
  repository.checkoutBranch(source);
  Comparison compareResult=compare(source,destination,file);
  assertEquals(expectedConflicts,compareResult.getConflicts().size());
  assertDiffCount(compareResult.getDifferences(),diffsInSource,diffsInDestination);
  repository.checkoutBranch(destination);
  compareResult=compare(destination,source,file);
  assertEquals(expectedConflicts,compareResult.getConflicts().size());
  assertDiffCount(compareResult.getDifferences(),diffsInDestination,diffsInSource);
  repository.checkoutBranch(source);
}",0.9732465654374548
93556,"/** 
 * See   {@link #setUp007()} for the description of this use case, except that we reverse the changes madeto file1 and file2 so that the ""leaf"" of the logical model is found before its root in the tree, making sure that this case will not fail to merge properly.
 * @see #setUp007()
 * @throws Exception
 */
private void setUp007_reverse() throws Exception {
  final EPackage root1=createPackage(null,""String_Node_Str"");
  EClass class1=createClass(root1,""String_Node_Str"");
  createClass(root1,""String_Node_Str"");
  resource1.getContents().add(root1);
  final EPackage root2=createPackage(null,""String_Node_Str"");
  createClass(root2,""String_Node_Str"");
  createClass(root2,""String_Node_Str"");
  resource2.getContents().add(root2);
  save(resource1,resource2);
  repository.addAllAndCommit(""String_Node_Str"");
  repository.createBranch(MASTER,BRANCH);
  root1.getEClassifiers().remove(class1);
  save(resource1);
  repository.addAndCommit(project,""String_Node_Str"",file1);
  repository.checkoutBranch(BRANCH);
  reload(resource1,resource2);
  final EClass class3=(EClass)findObject(resource2,""String_Node_Str"");
  class1=(EClass)findObject(resource1,""String_Node_Str"");
  class3.getESuperTypes().add(class1);
  save(resource2);
  repository.addAndCommit(project,""String_Node_Str"",file2);
  repository.checkoutBranch(MASTER);
  final Status status=repository.status();
  assertFalse(status.hasUncommittedChanges());
  compareBothDirectionsAndCheck(iFile1,MASTER,BRANCH,0,1,0);
  compareBothDirectionsAndCheck(iFile2,MASTER,BRANCH,1,1,1);
}","/** 
 * See   {@link #setUp007()} for the description of this use case, except that we reverse the changes madeto file1 and file2 so that the ""leaf"" of the logical model is found before its root in the tree, making sure that this case will not fail to merge properly.
 * @see #setUp007()
 * @throws Exception
 */
private void setUp007_reverse() throws Exception {
  final EPackage root1=createPackage(null,""String_Node_Str"");
  EClass class1=createClass(root1,""String_Node_Str"");
  createClass(root1,""String_Node_Str"");
  resource1.getContents().add(root1);
  final EPackage root2=createPackage(null,""String_Node_Str"");
  createClass(root2,""String_Node_Str"");
  createClass(root2,""String_Node_Str"");
  resource2.getContents().add(root2);
  save(resource1,resource2);
  repository.addAllAndCommit(""String_Node_Str"");
  repository.createBranch(MASTER,BRANCH);
  root1.getEClassifiers().remove(class1);
  save(resource1);
  repository.addAndCommit(project,""String_Node_Str"",file1);
  repository.checkoutBranch(BRANCH);
  reload(resource1,resource2);
  final EClass class3=(EClass)findObject(resource2,""String_Node_Str"");
  class1=(EClass)findObject(resource1,""String_Node_Str"");
  class3.getESuperTypes().add(class1);
  save(resource2);
  repository.addAndCommit(project,""String_Node_Str"",file2);
  repository.checkoutBranch(MASTER);
  final Status status=repository.status();
  assertFalse(status.hasUncommittedChanges());
  compareADirectionAndCheck(iFile1,MASTER,BRANCH,0,1,0);
  compareADirectionAndCheck(iFile1,BRANCH,MASTER,1,1,1);
  compareBothDirectionsAndCheck(iFile2,MASTER,BRANCH,1,1,1);
}",0.962113976440624
93557,"/** 
 * Sets up the repository so that there are three commits affecting two interlinked files (part of the same logical model). The files won't be part of the same logical model initially, the link will be created in one of the commits we'll merge. <ul> <li>initial commit : ""file1"" contains package P1 and classes C1 and C2. ""file2"" contains P2 containing C3 and C4.</li> <li>master commit : delete C3</li> <li>branch commit : make C3 a super-class of C1</li> </ul> <p> There is no textual conflict in these changes, so a textual merge will end successfully, corrupting the model by breaking the links between them. However, logical merging will see the conflict and should mark both files as conflicting, without touching either of them. </p> <p> This case also presents the particularity of having a ""single file"" locally (file1 is not linked to file2) whereas the model is comprised of two files in the right. This will allow us to make sure that we are able to resolve the logical model in such cases. </p>
 * @throws Exception
 */
private void setUp007() throws Exception {
  final EPackage root1=createPackage(null,""String_Node_Str"");
  createClass(root1,""String_Node_Str"");
  createClass(root1,""String_Node_Str"");
  resource1.getContents().add(root1);
  final EPackage root2=createPackage(null,""String_Node_Str"");
  EClass class3=createClass(root2,""String_Node_Str"");
  createClass(root2,""String_Node_Str"");
  resource2.getContents().add(root2);
  save(resource1,resource2);
  repository.addAllAndCommit(""String_Node_Str"");
  repository.createBranch(MASTER,BRANCH);
  root2.getEClassifiers().remove(class3);
  save(resource2);
  repository.addAndCommit(project,""String_Node_Str"",file2);
  repository.checkoutBranch(BRANCH);
  reload(resource1,resource2);
  final EClass class1=(EClass)findObject(resource1,""String_Node_Str"");
  class3=(EClass)findObject(resource2,""String_Node_Str"");
  class1.getESuperTypes().add(class3);
  save(resource1);
  repository.addAndCommit(project,""String_Node_Str"",file1);
  repository.checkoutBranch(MASTER);
  final Status status=repository.status();
  assertFalse(status.hasUncommittedChanges());
  compareBothDirectionsAndCheck(iFile1,MASTER,BRANCH,1,1,1);
  compareBothDirectionsAndCheck(iFile2,MASTER,BRANCH,0,1,0);
}","/** 
 * Sets up the repository so that there are three commits affecting two interlinked files (part of the same logical model). The files won't be part of the same logical model initially, the link will be created in one of the commits we'll merge. <ul> <li>initial commit : ""file1"" contains package P1 and classes C1 and C2. ""file2"" contains P2 containing C3 and C4.</li> <li>master commit : delete C3</li> <li>branch commit : make C3 a super-class of C1</li> </ul> <p> There is no textual conflict in these changes, so a textual merge will end successfully, corrupting the model by breaking the links between them. However, logical merging will see the conflict and should mark both files as conflicting, without touching either of them. </p> <p> This case also presents the particularity of having a ""single file"" locally (file1 is not linked to file2) whereas the model is comprised of two files in the right. This will allow us to make sure that we are able to resolve the logical model in such cases. </p>
 * @throws Exception
 */
private void setUp007() throws Exception {
  final EPackage root1=createPackage(null,""String_Node_Str"");
  createClass(root1,""String_Node_Str"");
  createClass(root1,""String_Node_Str"");
  resource1.getContents().add(root1);
  final EPackage root2=createPackage(null,""String_Node_Str"");
  EClass class3=createClass(root2,""String_Node_Str"");
  createClass(root2,""String_Node_Str"");
  resource2.getContents().add(root2);
  save(resource1,resource2);
  repository.addAllAndCommit(""String_Node_Str"");
  repository.createBranch(MASTER,BRANCH);
  root2.getEClassifiers().remove(class3);
  save(resource2);
  repository.addAndCommit(project,""String_Node_Str"",file2);
  repository.checkoutBranch(BRANCH);
  reload(resource1,resource2);
  final EClass class1=(EClass)findObject(resource1,""String_Node_Str"");
  class3=(EClass)findObject(resource2,""String_Node_Str"");
  class1.getESuperTypes().add(class3);
  save(resource1);
  repository.addAndCommit(project,""String_Node_Str"",file1);
  repository.checkoutBranch(MASTER);
  final Status status=repository.status();
  assertFalse(status.hasUncommittedChanges());
  compareBothDirectionsAndCheck(iFile1,MASTER,BRANCH,1,1,1);
  compareADirectionAndCheck(iFile2,MASTER,BRANCH,0,1,0);
  compareADirectionAndCheck(iFile2,BRANCH,MASTER,1,1,1);
  repository.checkoutBranch(MASTER);
}",0.9783174327840416
93558,"/** 
 * Sets up the repository so that there are three commits affecting two interlinked files (part of the same logical model). The files will be linked together as a single logical model in all three sides of the comparison. <ul> <li>initial commit : ""file1"" contains package P1 and classes C1 and C2. ""file2"" contains P2 containing C3 and C4. C3 is a super-type of C1, linking the two files together.</li> <li>master commit : renamed C1 into C10</li> <li>branch commit : replace C3 by C4 as a super-class of C1, rename C4 into C40</li> </ul> <p> There is a textual conflict in the first file, none in the second. We expect the textual merge to corrupt the model with its textual conflict markers. There are no logical conflicts, so logical merging should end successfully. </p>
 * @throws Exception
 */
private void setUp008() throws Exception {
  final EPackage root1=createPackage(null,""String_Node_Str"");
  EClass class1=createClass(root1,""String_Node_Str"");
  createClass(root1,""String_Node_Str"");
  resource1.getContents().add(root1);
  final EPackage root2=createPackage(null,""String_Node_Str"");
  EClass class3=createClass(root2,""String_Node_Str"");
  createClass(root2,""String_Node_Str"");
  resource2.getContents().add(root2);
  class1.getESuperTypes().add(class3);
  save(resource1,resource2);
  repository.addAllAndCommit(""String_Node_Str"");
  repository.createBranch(MASTER,BRANCH);
  class1.setName(""String_Node_Str"");
  save(resource1);
  repository.addAndCommit(project,""String_Node_Str"",file1);
  repository.checkoutBranch(BRANCH);
  reload(resource1,resource2);
  class1=(EClass)findObject(resource1,""String_Node_Str"");
  final EClass class4=(EClass)findObject(resource2,""String_Node_Str"");
  class1.getESuperTypes().clear();
  class1.getESuperTypes().add(class4);
  class4.setName(""String_Node_Str"");
  save(resource1,resource2);
  repository.addAndCommit(project,""String_Node_Str"",file1,file2);
  repository.checkoutBranch(MASTER);
  final Status status=repository.status();
  assertFalse(status.hasUncommittedChanges());
  compareBothDirectionsAndCheck(iFile1,MASTER,BRANCH,0,1,3);
  compareBothDirectionsAndCheck(iFile2,MASTER,BRANCH,0,0,1);
}","/** 
 * Sets up the repository so that there are three commits affecting two interlinked files (part of the same logical model). The files will be linked together as a single logical model in all three sides of the comparison. <ul> <li>initial commit : ""file1"" contains package P1 and classes C1 and C2. ""file2"" contains P2 containing C3 and C4. C3 is a super-type of C1, linking the two files together.</li> <li>master commit : renamed C1 into C10</li> <li>branch commit : replace C3 by C4 as a super-class of C1, rename C4 into C40</li> </ul> <p> There is a textual conflict in the first file, none in the second. We expect the textual merge to corrupt the model with its textual conflict markers. There are no logical conflicts, so logical merging should end successfully. </p>
 * @throws Exception
 */
private void setUp008() throws Exception {
  final EPackage root1=createPackage(null,""String_Node_Str"");
  EClass class1=createClass(root1,""String_Node_Str"");
  createClass(root1,""String_Node_Str"");
  resource1.getContents().add(root1);
  final EPackage root2=createPackage(null,""String_Node_Str"");
  EClass class3=createClass(root2,""String_Node_Str"");
  createClass(root2,""String_Node_Str"");
  resource2.getContents().add(root2);
  class1.getESuperTypes().add(class3);
  save(resource1,resource2);
  repository.addAllAndCommit(""String_Node_Str"");
  repository.createBranch(MASTER,BRANCH);
  class1.setName(""String_Node_Str"");
  save(resource1);
  repository.addAndCommit(project,""String_Node_Str"",file1);
  repository.checkoutBranch(BRANCH);
  reload(resource1,resource2);
  class1=(EClass)findObject(resource1,""String_Node_Str"");
  final EClass class4=(EClass)findObject(resource2,""String_Node_Str"");
  class1.getESuperTypes().clear();
  class1.getESuperTypes().add(class4);
  class4.setName(""String_Node_Str"");
  save(resource1,resource2);
  repository.addAndCommit(project,""String_Node_Str"",file1,file2);
  repository.checkoutBranch(MASTER);
  final Status status=repository.status();
  assertFalse(status.hasUncommittedChanges());
  compareBothDirectionsAndCheck(iFile1,MASTER,BRANCH,0,1,3);
  compareBothDirectionsAndCheck(iFile2,MASTER,BRANCH,0,1,3);
}",0.9986143187066976
93559,"/** 
 * Sets up the repository so that there are three commits affecting two interlinked files (part of the same logical model). <ul> <li>initial commit : ""file1"" contains package P1 and classes C1 and C2. ""file2"" contains P2 containing C3 and C4.</li> <li>master commit : renamed C1 into C10</li> <li>branch commit : renamed C4 into C40</li> </ul> <p> There is no conflict with these changes, neither textual nor logical. </p>
 * @throws Exception
 */
private void setUp009() throws Exception {
  final EPackage root1=createPackage(null,""String_Node_Str"");
  final EClass class1=createClass(root1,""String_Node_Str"");
  createClass(root1,""String_Node_Str"");
  resource1.getContents().add(root1);
  final EPackage root2=createPackage(null,""String_Node_Str"");
  final EClass class3=createClass(root2,""String_Node_Str"");
  createClass(root2,""String_Node_Str"");
  resource2.getContents().add(root2);
  class1.getESuperTypes().add(class3);
  save(resource1,resource2);
  repository.addAllAndCommit(""String_Node_Str"");
  repository.createBranch(MASTER,BRANCH);
  class1.setName(""String_Node_Str"");
  save(resource1);
  repository.addAndCommit(project,""String_Node_Str"",file1);
  repository.checkoutBranch(BRANCH);
  reload(resource1,resource2);
  final EClass class4=(EClass)findObject(resource2,""String_Node_Str"");
  class4.setName(""String_Node_Str"");
  save(resource2);
  repository.addAndCommit(project,""String_Node_Str"",file2);
  repository.checkoutBranch(MASTER);
  final Status status=repository.status();
  assertFalse(status.hasUncommittedChanges());
  compareBothDirectionsAndCheck(iFile1,MASTER,BRANCH,0,1,1);
  compareBothDirectionsAndCheck(iFile2,MASTER,BRANCH,0,0,1);
}","/** 
 * Sets up the repository so that there are three commits affecting two interlinked files (part of the same logical model). <ul> <li>initial commit : ""file1"" contains package P1 and classes C1 and C2. ""file2"" contains P2 containing C3 and C4.</li> <li>master commit : renamed C1 into C10</li> <li>branch commit : renamed C4 into C40</li> </ul> <p> There is no conflict with these changes, neither textual nor logical. </p>
 * @throws Exception
 */
private void setUp009() throws Exception {
  final EPackage root1=createPackage(null,""String_Node_Str"");
  final EClass class1=createClass(root1,""String_Node_Str"");
  createClass(root1,""String_Node_Str"");
  resource1.getContents().add(root1);
  final EPackage root2=createPackage(null,""String_Node_Str"");
  final EClass class3=createClass(root2,""String_Node_Str"");
  createClass(root2,""String_Node_Str"");
  resource2.getContents().add(root2);
  class1.getESuperTypes().add(class3);
  save(resource1,resource2);
  repository.addAllAndCommit(""String_Node_Str"");
  repository.createBranch(MASTER,BRANCH);
  class1.setName(""String_Node_Str"");
  save(resource1);
  repository.addAndCommit(project,""String_Node_Str"",file1);
  repository.checkoutBranch(BRANCH);
  reload(resource1,resource2);
  final EClass class4=(EClass)findObject(resource2,""String_Node_Str"");
  class4.setName(""String_Node_Str"");
  save(resource2);
  repository.addAndCommit(project,""String_Node_Str"",file2);
  repository.checkoutBranch(MASTER);
  final Status status=repository.status();
  assertFalse(status.hasUncommittedChanges());
  compareBothDirectionsAndCheck(iFile1,MASTER,BRANCH,0,1,1);
  compareBothDirectionsAndCheck(iFile2,MASTER,BRANCH,0,1,1);
}",0.9994033412887828
93560,"protected Comparison compare(String sourceRev,String targetRev,IFile file) throws Exception {
  final String fullPath=file.getFullPath().toString();
  final Subscriber subscriber=repository.createSubscriberForComparison(sourceRev,targetRev,file,false);
  final IStorageProviderAccessor accessor=new SubscriberStorageAccessor(subscriber);
  final IStorageProvider sourceProvider=accessor.getStorageProvider(file,IStorageProviderAccessor.DiffSide.SOURCE);
  final IStorageProvider remoteProvider=accessor.getStorageProvider(file,IStorageProviderAccessor.DiffSide.REMOTE);
  final IStorageProvider ancestorProvider=accessor.getStorageProvider(file,IStorageProviderAccessor.DiffSide.ORIGIN);
  assertNotNull(sourceProvider);
  assertNotNull(remoteProvider);
  assertNotNull(ancestorProvider);
  final IProgressMonitor monitor=new NullProgressMonitor();
  final IStorageProviderAccessor storageAccessor=new SubscriberStorageAccessor(subscriber);
  final ITypedElement left=new StorageTypedElement(sourceProvider.getStorage(monitor),fullPath);
  final ITypedElement right=new StorageTypedElement(remoteProvider.getStorage(monitor),fullPath);
  final ITypedElement origin=new StorageTypedElement(ancestorProvider.getStorage(monitor),fullPath);
  final ThreadedModelResolver resolver=new ThreadedModelResolver();
  resolver.setGraph(new Graph<URI>());
  resolver.initialize();
  final ComparisonScopeBuilder scopeBuilder=new ComparisonScopeBuilder(resolver,new IdenticalResourceMinimizer(),storageAccessor);
  final IComparisonScope scope=scopeBuilder.build(left,right,origin,monitor);
  final ResourceSet leftResourceSet=(ResourceSet)scope.getLeft();
  final ResourceSet rightResourceSet=(ResourceSet)scope.getRight();
  final ResourceSet originResourceSet=(ResourceSet)scope.getOrigin();
  assertFalse(leftResourceSet.getResources().isEmpty());
  assertFalse(rightResourceSet.getResources().isEmpty());
  assertFalse(originResourceSet.getResources().isEmpty());
  final Builder comparisonBuilder=EMFCompare.builder();
  EMFCompareBuilderConfigurator.createDefault().configure(comparisonBuilder);
  return comparisonBuilder.build().compare(scope,new BasicMonitor());
}","protected Comparison compare(String sourceRev,String targetRev,IFile file) throws Exception {
  final String fullPath=file.getFullPath().toString();
  final Subscriber subscriber=repository.createSubscriberForComparison(sourceRev,targetRev,file,false);
  final IStorageProviderAccessor accessor=new SubscriberStorageAccessor(subscriber);
  final IStorageProvider sourceProvider=accessor.getStorageProvider(file,IStorageProviderAccessor.DiffSide.SOURCE);
  final IStorageProvider remoteProvider=accessor.getStorageProvider(file,IStorageProviderAccessor.DiffSide.REMOTE);
  final IStorageProvider ancestorProvider=accessor.getStorageProvider(file,IStorageProviderAccessor.DiffSide.ORIGIN);
  assertNotNull(sourceProvider);
  assertNotNull(remoteProvider);
  assertNotNull(ancestorProvider);
  final IProgressMonitor monitor=new NullProgressMonitor();
  final IStorageProviderAccessor storageAccessor=new SubscriberStorageAccessor(subscriber);
  final ITypedElement left=new StorageTypedElement(file,fullPath);
  final ITypedElement right=new StorageTypedElement(remoteProvider.getStorage(monitor),fullPath);
  final ITypedElement origin=new StorageTypedElement(ancestorProvider.getStorage(monitor),fullPath);
  final ThreadedModelResolver resolver=new ThreadedModelResolver();
  resolver.setGraph(new Graph<URI>());
  resolver.initialize();
  final ComparisonScopeBuilder scopeBuilder=new ComparisonScopeBuilder(resolver,new IdenticalResourceMinimizer(),storageAccessor);
  final IComparisonScope scope=scopeBuilder.build(left,right,origin,monitor);
  final ResourceSet leftResourceSet=(ResourceSet)scope.getLeft();
  final ResourceSet rightResourceSet=(ResourceSet)scope.getRight();
  final ResourceSet originResourceSet=(ResourceSet)scope.getOrigin();
  assertFalse(leftResourceSet.getResources().isEmpty());
  assertFalse(rightResourceSet.getResources().isEmpty());
  assertFalse(originResourceSet.getResources().isEmpty());
  final Builder comparisonBuilder=EMFCompare.builder();
  EMFCompareBuilderConfigurator.createDefault().configure(comparisonBuilder);
  return comparisonBuilder.build().compare(scope,new BasicMonitor());
}",0.9911463187325256
93561,"protected Comparison compare(String sourceRev,String targetRev,IFile file) throws Exception {
  final String fullPath=file.getFullPath().toString();
  final Subscriber subscriber=repository.createSubscriberForComparison(sourceRev,targetRev,file,false);
  final IStorageProviderAccessor accessor=new SubscriberStorageAccessor(subscriber);
  final IStorageProvider sourceProvider=accessor.getStorageProvider(file,IStorageProviderAccessor.DiffSide.SOURCE);
  final IStorageProvider remoteProvider=accessor.getStorageProvider(file,IStorageProviderAccessor.DiffSide.REMOTE);
  final IStorageProvider ancestorProvider=accessor.getStorageProvider(file,IStorageProviderAccessor.DiffSide.ORIGIN);
  assertNotNull(sourceProvider);
  assertNotNull(remoteProvider);
  assertNotNull(ancestorProvider);
  final IProgressMonitor monitor=new NullProgressMonitor();
  final IStorageProviderAccessor storageAccessor=new SubscriberStorageAccessor(subscriber);
  final ITypedElement left=new StorageTypedElement(sourceProvider.getStorage(monitor),fullPath);
  final ITypedElement right=new StorageTypedElement(remoteProvider.getStorage(monitor),fullPath);
  final ITypedElement origin=new StorageTypedElement(ancestorProvider.getStorage(monitor),fullPath);
  final ThreadedModelResolver resolver=new ThreadedModelResolver();
  resolver.setGraph(new Graph<URI>());
  resolver.initialize();
  final ComparisonScopeBuilder scopeBuilder=new ComparisonScopeBuilder(resolver,new IdenticalResourceMinimizer(),storageAccessor);
  final IComparisonScope scope=scopeBuilder.build(left,right,origin,monitor);
  final ResourceSet leftResourceSet=(ResourceSet)scope.getLeft();
  final ResourceSet rightResourceSet=(ResourceSet)scope.getRight();
  final ResourceSet originResourceSet=(ResourceSet)scope.getOrigin();
  assertFalse(leftResourceSet.getResources().isEmpty());
  assertFalse(rightResourceSet.getResources().isEmpty());
  assertFalse(originResourceSet.getResources().isEmpty());
  final Builder comparisonBuilder=EMFCompare.builder();
  EMFCompareBuilderConfigurator.createDefault().configure(comparisonBuilder);
  return comparisonBuilder.build().compare(scope,new BasicMonitor());
}","protected Comparison compare(String sourceRev,String targetRev,IFile file) throws Exception {
  final String fullPath=file.getFullPath().toString();
  final Subscriber subscriber=repository.createSubscriberForComparison(sourceRev,targetRev,file,false);
  final IStorageProviderAccessor accessor=new SubscriberStorageAccessor(subscriber);
  final IStorageProvider sourceProvider=accessor.getStorageProvider(file,IStorageProviderAccessor.DiffSide.SOURCE);
  final IStorageProvider remoteProvider=accessor.getStorageProvider(file,IStorageProviderAccessor.DiffSide.REMOTE);
  final IStorageProvider ancestorProvider=accessor.getStorageProvider(file,IStorageProviderAccessor.DiffSide.ORIGIN);
  assertNotNull(sourceProvider);
  assertNotNull(remoteProvider);
  assertNotNull(ancestorProvider);
  final IProgressMonitor monitor=new NullProgressMonitor();
  final IStorageProviderAccessor storageAccessor=new SubscriberStorageAccessor(subscriber);
  final ITypedElement left=new StorageTypedElement(file,fullPath);
  final ITypedElement right=new StorageTypedElement(remoteProvider.getStorage(monitor),fullPath);
  final ITypedElement origin=new StorageTypedElement(ancestorProvider.getStorage(monitor),fullPath);
  final ThreadedModelResolver resolver=new ThreadedModelResolver();
  resolver.setGraph(new Graph<URI>());
  resolver.initialize();
  final ComparisonScopeBuilder scopeBuilder=new ComparisonScopeBuilder(resolver,new IdenticalResourceMinimizer(),storageAccessor);
  final IComparisonScope scope=scopeBuilder.build(left,right,origin,monitor);
  final ResourceSet leftResourceSet=(ResourceSet)scope.getLeft();
  final ResourceSet rightResourceSet=(ResourceSet)scope.getRight();
  final ResourceSet originResourceSet=(ResourceSet)scope.getOrigin();
  assertFalse(leftResourceSet.getResources().isEmpty());
  assertFalse(rightResourceSet.getResources().isEmpty());
  assertFalse(originResourceSet.getResources().isEmpty());
  final Builder comparisonBuilder=EMFCompare.builder();
  EMFCompareBuilderConfigurator.createDefault().configure(comparisonBuilder);
  return comparisonBuilder.build().compare(scope,new BasicMonitor());
}",0.9911463187325256
93562,"protected void compareBothDirectionsAndCheck(IFile file,String source,String destination,int expectedConflicts,int diffsInSource,int diffsInDestination) throws Exception {
  Comparison compareResult=compare(source,destination,file);
  assertEquals(expectedConflicts,compareResult.getConflicts().size());
  assertDiffCount(compareResult.getDifferences(),diffsInSource,diffsInDestination);
  compareResult=compare(destination,source,file);
  assertEquals(expectedConflicts,compareResult.getConflicts().size());
  assertDiffCount(compareResult.getDifferences(),diffsInDestination,diffsInSource);
}","protected void compareBothDirectionsAndCheck(IFile file,String source,String destination,int expectedConflicts,int diffsInSource,int diffsInDestination) throws Exception {
  repository.checkoutBranch(source);
  Comparison compareResult=compare(source,destination,file);
  assertEquals(expectedConflicts,compareResult.getConflicts().size());
  assertDiffCount(compareResult.getDifferences(),diffsInSource,diffsInDestination);
  repository.checkoutBranch(destination);
  compareResult=compare(destination,source,file);
  assertEquals(expectedConflicts,compareResult.getConflicts().size());
  assertDiffCount(compareResult.getDifferences(),diffsInDestination,diffsInSource);
}",0.9376479873717444
93563,"@Override @Before public void setUp() throws Exception {
  super.setUp();
  resource1.getContents().add(createBasicModel(FILE1_SUFFIX));
  resource2.getContents().add(createBasicModel(FILE2_SUFFIX));
  makeCrossReference(resource1,resource2,CLASS1_NAME_PREFIX,CLASS1_NAME_PREFIX);
  makeCrossReference(resource2,resource1,CLASS2_NAME_PREFIX,CLASS2_NAME_PREFIX);
  save(resource1,resource2);
  commits[0]=repository.addAndCommit(project,""String_Node_Str"",file1,file2);
  EPackage packFile2=(EPackage)findObject(resource2,PACKAGE_NAME_PREFIX);
  final EClass newClassFile2=createClass(packFile2,CLASS3_NAME_PREFIX + FILE2_SUFFIX);
  save(resource2);
  commits[1]=repository.addAndCommit(project,""String_Node_Str"",file2);
  newClassFile2.setName(CLASS4_NAME_PREFIX + FILE2_SUFFIX);
  save(resource2);
  commits[2]=repository.addAndCommit(project,""String_Node_Str"",file2);
  repository.createBranch(MASTER,BRANCH);
  packFile2.getEClassifiers().remove(newClassFile2);
  save(resource2);
  commits[3]=repository.addAndCommit(project,""String_Node_Str"",file2);
  final EClass classBFile1=(EClass)findObject(resource1,CLASS2_NAME_PREFIX);
  final EClass classBFile2=(EClass)findObject(resource2,CLASS2_NAME_PREFIX);
  classBFile1.setName(CLASS3_NAME_PREFIX + FILE1_SUFFIX);
  classBFile2.setName(CLASS3_NAME_PREFIX + FILE2_SUFFIX);
  save(resource1,resource2);
  commits[4]=repository.addAndCommit(project,""String_Node_Str"",file1,file2);
  repository.checkoutBranch(BRANCH);
  reload(resource1,resource2);
  final EClass classAFile1=(EClass)findObject(resource1,CLASS1_NAME_PREFIX);
  final EClass classAFile2=(EClass)findObject(resource2,CLASS1_NAME_PREFIX);
  classAFile1.setName(CLASS3_NAME_PREFIX + FILE1_SUFFIX);
  classAFile2.setName(CLASS3_NAME_PREFIX + FILE2_SUFFIX);
  save(resource1,resource2);
  commits[5]=repository.addAndCommit(project,""String_Node_Str"",file1,file2);
  EcoreUtil.remove(findObject(resource2,CLASS4_NAME_PREFIX));
  save(resource2);
  commits[6]=repository.addAndCommit(project,""String_Node_Str"",file2);
  masterTipSynonyms=new String[]{MASTER,commits[4].getName()};
  branchTipSynonyms=new String[]{BRANCH,commits[6].getName(),Constants.HEAD};
}","@Override @Before public void setUp() throws Exception {
  super.setUp();
  resource1.getContents().add(createBasicModel(FILE1_SUFFIX));
  resource2.getContents().add(createBasicModel(FILE2_SUFFIX));
  makeCrossReference(resource1,resource2,CLASS1_NAME_PREFIX,CLASS1_NAME_PREFIX);
  makeCrossReference(resource2,resource1,CLASS2_NAME_PREFIX,CLASS2_NAME_PREFIX);
  save(resource1,resource2);
  commits[0]=repository.addAndCommit(project,""String_Node_Str"",file1,file2);
  EPackage packFile2=(EPackage)findObject(resource2,PACKAGE_NAME_PREFIX);
  final EClass newClassFile2=createClass(packFile2,CLASS3_NAME_PREFIX + FILE2_SUFFIX);
  save(resource2);
  commits[1]=repository.addAndCommit(project,""String_Node_Str"",file2);
  newClassFile2.setName(CLASS4_NAME_PREFIX + FILE2_SUFFIX);
  save(resource2);
  commits[2]=repository.addAndCommit(project,""String_Node_Str"",file2);
  repository.createBranch(MASTER,BRANCH);
  packFile2.getEClassifiers().remove(newClassFile2);
  save(resource2);
  commits[3]=repository.addAndCommit(project,""String_Node_Str"",file2);
  final EClass classBFile1=(EClass)findObject(resource1,CLASS2_NAME_PREFIX);
  final EClass classBFile2=(EClass)findObject(resource2,CLASS2_NAME_PREFIX);
  classBFile1.setName(CLASS3_NAME_PREFIX + FILE1_SUFFIX);
  classBFile2.setName(CLASS3_NAME_PREFIX + FILE2_SUFFIX);
  save(resource1,resource2);
  commits[4]=repository.addAndCommit(project,""String_Node_Str"",file1,file2);
  repository.checkoutBranch(BRANCH);
  reload(resource1,resource2);
  final EClass classAFile1=(EClass)findObject(resource1,CLASS1_NAME_PREFIX);
  final EClass classAFile2=(EClass)findObject(resource2,CLASS1_NAME_PREFIX);
  classAFile1.setName(CLASS3_NAME_PREFIX + FILE1_SUFFIX);
  classAFile2.setName(CLASS3_NAME_PREFIX + FILE2_SUFFIX);
  save(resource1,resource2);
  commits[5]=repository.addAndCommit(project,""String_Node_Str"",file1,file2);
  EcoreUtil.remove(findObject(resource2,CLASS4_NAME_PREFIX));
  save(resource2);
  commits[6]=repository.addAndCommit(project,""String_Node_Str"",file2);
  masterTipSynonyms=new String[]{MASTER,commits[4].getName()};
  branchTipSynonyms=new String[]{BRANCH,commits[6].getName()};
}",0.9965285813469104
93564,"private void updateProblemIndication(Diagnostic diagnostic){
  Assert.isNotNull(diagnostic);
  int lastEditorPage=getPageCount() - 1;
  if (lastEditorPage >= 0 && getItemControl(lastEditorPage) instanceof ProblemIndicationComposite) {
    ((ProblemIndicationComposite)getItemControl(lastEditorPage)).setDiagnostic(diagnostic);
    if (diagnostic.getSeverity() != Diagnostic.OK) {
      setActivePage(lastEditorPage);
      updateLayout(false,true);
    }
  }
 else   if (diagnostic.getSeverity() != Diagnostic.OK) {
    ProblemIndicationComposite problemIndicationComposite=new ProblemIndicationComposite(getControl(),SWT.NONE);
    problemIndicationComposite.setDiagnostic(diagnostic);
    createItem(++lastEditorPage,problemIndicationComposite);
    getControl().getItem(lastEditorPage).setText(CommonUIPlugin.getPlugin().getString(""String_Node_Str""));
    setActivePage(lastEditorPage);
    updateLayout(false,true);
    showTabs();
  }
}","private void updateProblemIndication(Diagnostic diagnostic){
  Assert.isNotNull(diagnostic);
  int lastEditorPage=getPageCount() - 1;
  if (lastEditorPage >= 0 && getItemControl(lastEditorPage) instanceof ProblemIndicationComposite) {
    ((ProblemIndicationComposite)getItemControl(lastEditorPage)).setDiagnostic(diagnostic);
    if (diagnostic.getSeverity() != Diagnostic.OK) {
      setActivePage(lastEditorPage);
      updateLayout(false,true);
    }
  }
 else   if (diagnostic.getSeverity() != Diagnostic.OK && !getControl().isDisposed()) {
    ProblemIndicationComposite problemIndicationComposite=new ProblemIndicationComposite(getControl(),SWT.NONE);
    problemIndicationComposite.setDiagnostic(diagnostic);
    createItem(++lastEditorPage,problemIndicationComposite);
    getControl().getItem(lastEditorPage).setText(CommonUIPlugin.getPlugin().getString(""String_Node_Str""));
    setActivePage(lastEditorPage);
    updateLayout(false,true);
    showTabs();
  }
}",0.9843096234309624
93565,"/** 
 * Checks whether the given   {@link Match}'s sides have changed resources of kind Move. This will only be called for   {@link Match} elements referencing the root(s) of an EMF Resource. We also create resourceattachment of kind Move only for non-local comparison. This is why this check is made in the EMf compare Egit support plugin. The reason is a local comparison between /MyPath/left.model & /MyPath/right.model, will always result in  {@link ResourceAttachmentChange}s of kind Move, and we don't want to have   {@link ResourceAttachmentChange}s in these cases.
 * @param match The match that is to be checked.
 * @param monitor The monitor to report progress or to check for cancellation.
 */
protected void checkResourceAttachment(Match match,Monitor monitor){
  final Comparison comparison=match.getComparison();
  if (comparison.getMatchedResources().isEmpty()) {
    return;
  }
  final EObject left=match.getLeft();
  final EObject right=match.getRight();
  boolean threeWay=comparison.isThreeWay();
  if (threeWay) {
    final EObject origin=match.getOrigin();
    if (!isLocalComparison(left,origin) && !haveSameResourceURI(left,origin)) {
      final String uri=left.eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.MOVE,DifferenceSource.LEFT);
    }
    if (!isLocalComparison(right,origin) && !haveSameResourceURI(right,origin)) {
      final String uri=right.eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.MOVE,DifferenceSource.RIGHT);
    }
  }
 else {
    if (!isLocalComparison(left,right) && !haveSameResourceURI(left,right)) {
      final String uri=right.eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.MOVE,DifferenceSource.LEFT);
    }
  }
}","/** 
 * Checks whether the given   {@link Match}'s sides have changed resources of kind Move. This will only be called for   {@link Match} elements referencing the root(s) of an EMF Resource. We also create resourceattachment of kind Move only for non-local comparison. This is why this check is made in the EMf compare Egit support plugin. The reason is a local comparison between /MyPath/left.model & /MyPath/right.model, will always result in  {@link ResourceAttachmentChange}s of kind Move, and we don't want to have   {@link ResourceAttachmentChange}s in these cases.
 * @param match The match that is to be checked.
 * @param monitor The monitor to report progress or to check for cancellation.
 */
protected void checkResourceAttachment(Match match,Monitor monitor){
  final Comparison comparison=match.getComparison();
  if (comparison.getMatchedResources().isEmpty()) {
    return;
  }
  final EObject left=match.getLeft();
  final EObject right=match.getRight();
  boolean threeWay=comparison.isThreeWay();
  if (threeWay) {
    final EObject origin=match.getOrigin();
    if (!isLocalComparison(left,origin) && areNotRootsOfSameResource(left,origin)) {
      final String uri=left.eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.MOVE,DifferenceSource.LEFT);
    }
    if (!isLocalComparison(right,origin) && areNotRootsOfSameResource(right,origin)) {
      final String uri=right.eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.MOVE,DifferenceSource.RIGHT);
    }
  }
 else {
    if (!isLocalComparison(left,right) && areNotRootsOfSameResource(left,right)) {
      final String uri=right.eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.MOVE,DifferenceSource.LEFT);
    }
  }
}",0.983059962355472
93566,"/** 
 * {@inheritDoc}
 * @see IStoragePathAdapterProvider#createStoragePathAdapter()
 */
public Adapter createStoragePathAdapter(String path,boolean isLocal){
  IFileRevision findFileRevision=findFileRevision((ITypedElement)accessor);
  if (findFileRevision != null) {
    return new StoragePathAdapter(path,isLocal,findFileRevision.getContentIdentifier(),findFileRevision.getAuthor());
  }
 else {
    return new StoragePathAdapter(path,isLocal);
  }
}","/** 
 * {@inheritDoc}
 * @see IStoragePathAdapterProvider#createStoragePathAdapter()
 */
public Adapter createStoragePathAdapter(String path,boolean isLocal){
  IFileRevision findFileRevision=findFileRevision((ITypedElement)accessor);
  IFile file=findFile((ITypedElement)accessor);
  boolean local=file != null;
  if (!isLocal && findFileRevision != null) {
    return new StoragePathAdapter(path,local,findFileRevision.getContentIdentifier(),findFileRevision.getAuthor());
  }
 else {
    return new StoragePathAdapter(path,local);
  }
}",0.8608870967741935
93567,"/** 
 * Compute the label used as title in the ContentMergeViewer.
 * @param adapter The adapter containing file informations
 * @return the label
 */
private String computeLabel(StoragePathAdapter adapter){
  String commitId=adapter.getCommitId();
  String username=adapter.getUsername();
  String computedLabel;
  if (adapter.isLocal()) {
    computedLabel=""String_Node_Str"" + adapter.getStoragePath();
  }
 else {
    computedLabel=adapter.getStoragePath();
  }
  if (commitId != null && !""String_Node_Str"".equals(commitId)) {
    computedLabel+=""String_Node_Str"" + commitId.substring(0,7);
  }
  if (username != null && !""String_Node_Str"".equals(username)) {
    computedLabel+=""String_Node_Str"" + username + ""String_Node_Str"";
  }
  return computedLabel;
}","/** 
 * Compute the label used as title in the ContentMergeViewer.
 * @param adapter The adapter containing file informations
 * @return the label
 */
private String computeLabel(StoragePathAdapter adapter){
  String computedLabel=""String_Node_Str"";
  if (adapter != null) {
    String commitId=adapter.getCommitId();
    String username=adapter.getUsername();
    if (adapter.isLocal()) {
      computedLabel=""String_Node_Str"" + adapter.getStoragePath();
    }
 else {
      computedLabel=adapter.getStoragePath();
    }
    if (commitId != null) {
      if (commitId.length() > 7) {
        commitId=commitId.substring(0,7);
      }
      computedLabel=String.format(""String_Node_Str"",computedLabel,commitId).trim();
    }
    if (username != null && !""String_Node_Str"".equals(username)) {
      computedLabel+=""String_Node_Str"" + username + ""String_Node_Str"";
    }
  }
  return computedLabel;
}",0.6268836648583485
93568,"private IDiffContainer buildDiffContainer(Repository repository,RevCommit headCommit,RevCommit ancestorCommit,List<String> filterPaths,RevWalk rw,IProgressMonitor monitor) throws IOException, InterruptedException {
  monitor.setTaskName(UIText.GitMergeEditorInput_CalculatingDiffTaskName);
  IDiffContainer result=new DiffNode(Differencer.CONFLICTING);
  TreeWalk tw=new TreeWalk(repository);
  try {
    int dirCacheIndex=tw.addTree(new DirCacheIterator(repository.readDirCache()));
    int fileTreeIndex=tw.addTree(new FileTreeIterator(repository));
    int repositoryTreeIndex=tw.addTree(rw.parseTree(repository.resolve(Constants.HEAD)));
    NotIgnoredFilter notIgnoredFilter=new NotIgnoredFilter(fileTreeIndex);
    if (filterPaths.size() > 1) {
      List<TreeFilter> suffixFilters=new ArrayList<TreeFilter>();
      for (      String filterPath : filterPaths) {
        suffixFilters.add(PathFilter.create(filterPath));
      }
      TreeFilter otf=OrTreeFilter.create(suffixFilters);
      tw.setFilter(AndTreeFilter.create(otf,notIgnoredFilter));
    }
 else     if (filterPaths.size() > 0) {
      String path=filterPaths.get(0);
      if (path.length() == 0) {
        tw.setFilter(notIgnoredFilter);
      }
 else {
        tw.setFilter(AndTreeFilter.create(PathFilter.create(path),notIgnoredFilter));
      }
    }
 else {
      tw.setFilter(notIgnoredFilter);
    }
    tw.setRecursive(true);
    while (tw.next()) {
      if (monitor.isCanceled()) {
        throw new InterruptedException();
      }
      String gitPath=tw.getPathString();
      monitor.setTaskName(gitPath);
      FileTreeIterator fit=tw.getTree(fileTreeIndex,FileTreeIterator.class);
      if (fit == null) {
        continue;
      }
      DirCacheIterator dit=tw.getTree(dirCacheIndex,DirCacheIterator.class);
      final DirCacheEntry dirCacheEntry=dit == null ? null : dit.getDirCacheEntry();
      boolean conflicting=dirCacheEntry != null && dirCacheEntry.getStage() > 0;
      AbstractTreeIterator rt=tw.getTree(repositoryTreeIndex,AbstractTreeIterator.class);
      boolean modified=rt != null && !fit.getEntryObjectId().equals(rt.getEntryObjectId());
      if (!conflicting && !modified) {
        continue;
      }
      ITypedElement right;
      if (conflicting) {
        GitFileRevision revision=GitFileRevision.inIndex(repository,gitPath,DirCacheEntry.STAGE_3);
        String encoding=CompareCoreUtils.getResourceEncoding(repository,gitPath);
        right=new FileRevisionTypedElement(revision,encoding);
      }
 else {
        right=CompareUtils.getFileRevisionTypedElement(gitPath,headCommit,repository);
      }
      if (right instanceof EmptyTypedElement) {
        continue;
      }
      IFileRevision rev;
      Path repositoryPath=new Path(repository.getWorkTree().getAbsolutePath());
      IPath location=repositoryPath.append(fit.getEntryPathString());
      IFile file=ModelEGitResourceUtil.getFileForLocation(location);
      if (!conflicting || useWorkspace) {
        if (file != null) {
          rev=new LocalFileRevision(file);
        }
 else {
          rev=new WorkingTreeFileRevision(location.toFile());
        }
      }
 else {
        rev=GitFileRevision.inIndex(repository,gitPath,DirCacheEntry.STAGE_2);
      }
      IRunnableContext runnableContext=getContainer();
      if (runnableContext == null) {
        runnableContext=PlatformUI.getWorkbench().getProgressService();
      }
      EditableRevision leftEditable;
      if (file != null) {
        leftEditable=new ResourceEditableRevision(rev,file,runnableContext);
      }
 else {
        leftEditable=new LocationEditableRevision(rev,location,runnableContext);
      }
      try {
        leftEditable.cacheContents(monitor);
      }
 catch (      CoreException e) {
        throw new IOException(e.getMessage());
      }
      int kind=Differencer.NO_CHANGE;
      if (conflicting) {
        kind=Differencer.CONFLICTING;
      }
 else       if (modified) {
        kind=Differencer.PSEUDO_CONFLICT;
      }
      IDiffContainer fileParent=getFileParent(result,repositoryPath,file,location);
      ITypedElement anc;
      if (ancestorCommit != null) {
        anc=CompareUtils.getFileRevisionTypedElement(gitPath,ancestorCommit,repository);
      }
 else {
        anc=null;
      }
      if (anc instanceof EmptyTypedElement) {
        anc=null;
      }
      new DiffNode(fileParent,kind,anc,leftEditable,right);
    }
    return result;
  }
  finally {
    tw.close();
  }
}","private IDiffContainer buildDiffContainer(Repository repository,RevCommit headCommit,RevCommit ancestorCommit,List<String> filterPaths,RevWalk rw,IProgressMonitor monitor) throws IOException, InterruptedException {
  monitor.setTaskName(UIText.GitMergeEditorInput_CalculatingDiffTaskName);
  IDiffContainer result=new DiffNode(Differencer.CONFLICTING);
  TreeWalk tw=new TreeWalk(repository);
  try {
    int dirCacheIndex=tw.addTree(new DirCacheIterator(repository.readDirCache()));
    int fileTreeIndex=tw.addTree(new FileTreeIterator(repository));
    int repositoryTreeIndex=tw.addTree(rw.parseTree(repository.resolve(Constants.HEAD)));
    NotIgnoredFilter notIgnoredFilter=new NotIgnoredFilter(fileTreeIndex);
    if (filterPaths.size() > 1) {
      List<TreeFilter> suffixFilters=new ArrayList<TreeFilter>();
      for (      String filterPath : filterPaths) {
        suffixFilters.add(PathFilter.create(filterPath));
      }
      TreeFilter otf=OrTreeFilter.create(suffixFilters);
      tw.setFilter(AndTreeFilter.create(otf,notIgnoredFilter));
    }
 else     if (filterPaths.size() > 0) {
      String path=filterPaths.get(0);
      if (path.length() == 0) {
        tw.setFilter(notIgnoredFilter);
      }
 else {
        tw.setFilter(AndTreeFilter.create(PathFilter.create(path),notIgnoredFilter));
      }
    }
 else {
      tw.setFilter(notIgnoredFilter);
    }
    tw.setRecursive(true);
    while (tw.next()) {
      if (monitor.isCanceled()) {
        throw new InterruptedException();
      }
      String gitPath=tw.getPathString();
      monitor.setTaskName(gitPath);
      FileTreeIterator fit=tw.getTree(fileTreeIndex,FileTreeIterator.class);
      if (fit == null) {
        continue;
      }
      DirCacheIterator dit=tw.getTree(dirCacheIndex,DirCacheIterator.class);
      final DirCacheEntry dirCacheEntry=dit == null ? null : dit.getDirCacheEntry();
      boolean conflicting=dirCacheEntry != null && dirCacheEntry.getStage() > 0;
      AbstractTreeIterator rt=tw.getTree(repositoryTreeIndex,AbstractTreeIterator.class);
      boolean modified=rt != null && !fit.getEntryObjectId().equals(rt.getEntryObjectId());
      if (!conflicting && !modified) {
        continue;
      }
      ITypedElement right;
      if (conflicting) {
        GitFileRevision revision=GitFileRevision.inIndex(repository,gitPath,DirCacheEntry.STAGE_3);
        String encoding=CompareCoreUtils.getResourceEncoding(repository,gitPath);
        right=new FileRevisionTypedElement(revision,encoding);
      }
 else {
        right=CompareUtils.getFileRevisionTypedElement(gitPath,headCommit,repository);
      }
      if (right instanceof EmptyTypedElement) {
        continue;
      }
      IFileRevision rev;
      Path repositoryPath=new Path(repository.getWorkTree().getAbsolutePath());
      IPath location=repositoryPath.append(fit.getEntryPathString());
      IFile file=ModelEGitResourceUtil.getFileForLocation(location,false);
      if (!conflicting || useWorkspace) {
        if (file != null) {
          rev=new LocalFileRevision(file);
        }
 else {
          rev=new WorkingTreeFileRevision(location.toFile());
        }
      }
 else {
        rev=GitFileRevision.inIndex(repository,gitPath,DirCacheEntry.STAGE_2);
      }
      IRunnableContext runnableContext=getContainer();
      if (runnableContext == null) {
        runnableContext=PlatformUI.getWorkbench().getProgressService();
      }
      EditableRevision leftEditable;
      if (file != null) {
        leftEditable=new ResourceEditableRevision(rev,file,runnableContext);
      }
 else {
        leftEditable=new LocationEditableRevision(rev,location,runnableContext);
      }
      try {
        leftEditable.cacheContents(monitor);
      }
 catch (      CoreException e) {
        throw new IOException(e.getMessage());
      }
      int kind=Differencer.NO_CHANGE;
      if (conflicting) {
        kind=Differencer.CONFLICTING;
      }
 else       if (modified) {
        kind=Differencer.PSEUDO_CONFLICT;
      }
      IDiffContainer fileParent=getFileParent(result,repositoryPath,file,location);
      ITypedElement anc;
      if (ancestorCommit != null) {
        anc=CompareUtils.getFileRevisionTypedElement(gitPath,ancestorCommit,repository);
      }
 else {
        anc=null;
      }
      if (anc instanceof EmptyTypedElement) {
        anc=null;
      }
      new DiffNode(fileParent,kind,anc,leftEditable,right);
    }
    return result;
  }
  finally {
    tw.close();
  }
}",0.99932915921288
93569,"/** 
 * Even if there is a single file involved in this operation, it may have a custom comparator or merger defined. This will be found through its specific ISynchronizationCompareAdapter. <p> If there are multiple files involved, we need them all to be part of the same logical model. Otherwise, we can't be sure that multiple ISynchronizationCompareAdapter aren't interested in the different files, and thus cannot show a valid 'aggregate' compare editor. </p> <p> Then again, even if the multiple files involved are all part of single-file models (i.e. none of them is a part of a larger logical model, and we have as many models involved as there are files), we cannot show them all within the same compare editor input. Comparing the files and determining conflicts is the job of the ISynchronizationCompareAdapter(s), <u>not</u> ours. If we cannot reliably find the appropriate compare adapter, we should not try and compare the files ourselves. The user will have to manually open the merge tool on each individual logical model. </p> <p> Since we cannot determine the logical model of a file that is not in the workspace, this will fall back to the 'old' merge tool (we compute the diffs ourselves without consideration for the file type) iff there are <u>only</u> such files in the locations set. </p>
 * @param repository Repository within which the compared files are located.
 * @param filterPaths repository-relative paths of the resources we are comparing.
 * @param monitor Monitor on which to report progress to the user.
 * @return The useable compare input.
 * @throws InvocationTargetException
 * @throws InterruptedException
 */
private ICompareInput prepareCompareInput(Repository repository,List<String> filterPaths,IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  try {
    final GitResourceVariantTreeProvider variantTreeProvider=new DirCacheResourceVariantTreeProvider(repository,useWorkspace);
    final Subscriber subscriber=new GitResourceVariantTreeSubscriber(variantTreeProvider);
    checkCanceled(monitor);
    final Set<IProject> projects=new LinkedHashSet<IProject>();
    for (    IResource root : subscriber.roots()) {
      projects.add(root.getProject());
    }
    final Set<IResource> resourcesInOperation=new LinkedHashSet<IResource>();
    boolean outOfWS=false;
    for (    IPath path : locations) {
      boolean foundMatchInWS=false;
      final Iterator<IProject> projectIterator=projects.iterator();
      while (!foundMatchInWS && projectIterator.hasNext()) {
        final IProject project=projectIterator.next();
        final IPath projectLocation=project.getLocation();
        if (projectLocation.equals(path)) {
          resourcesInOperation.addAll(getConflictingFilesFrom(project));
          foundMatchInWS=true;
        }
 else         if (project.getLocation().isPrefixOf(path)) {
          final IResource resource=ModelEGitResourceUtil.getResourceForLocation(path);
          if (resource instanceof IContainer) {
            resourcesInOperation.addAll(getConflictingFilesFrom((IContainer)resource));
          }
 else {
            resourcesInOperation.add(resource);
          }
          foundMatchInWS=true;
        }
      }
      if (!foundMatchInWS) {
        if (!resourcesInOperation.isEmpty()) {
          break;
        }
 else {
          outOfWS=true;
        }
      }
 else       if (outOfWS) {
        break;
      }
    }
    checkCanceled(monitor);
    if (!resourcesInOperation.isEmpty() && outOfWS) {
      throw new InvocationTargetException(new IllegalStateException(EMFCompareEGitUIMessages.getString(""String_Node_Str"")));
    }
 else     if (resourcesInOperation.isEmpty()) {
    }
 else {
      final RemoteResourceMappingContext remoteMappingContext=new SubscriberResourceMappingContext(subscriber,true);
      Set<IResource> model=null;
      for (      IResource comparedResource : resourcesInOperation) {
        model=LogicalModels.discoverModel(comparedResource,remoteMappingContext);
        if (model.isEmpty()) {
        }
 else {
          if (!model.containsAll(resourcesInOperation)) {
            throw new RuntimeException(EMFCompareEGitUIMessages.getString(""String_Node_Str""));
          }
 else {
            break;
          }
        }
      }
      final ISynchronizationCompareAdapter compareAdapter=LogicalModels.findAdapter(model,ISynchronizationCompareAdapter.class);
      if (compareAdapter != null) {
        final Set<ResourceMapping> allMappings=LogicalModels.getResourceMappings(model,remoteMappingContext);
        checkCanceled(monitor);
        final ISynchronizationContext synchronizationContext=prepareSynchronizationContext(repository,subscriber,allMappings,remoteMappingContext);
        final Object modelObject=allMappings.iterator().next().getModelObject();
        if (compareAdapter.hasCompareInput(synchronizationContext,modelObject)) {
          return compareAdapter.asCompareInput(synchronizationContext,modelObject);
        }
 else {
        }
      }
 else {
      }
    }
  }
 catch (  IOException e) {
    throw new InvocationTargetException(e);
  }
catch (  CoreException e) {
    throw new InvocationTargetException(e);
  }
  return null;
}","/** 
 * Even if there is a single file involved in this operation, it may have a custom comparator or merger defined. This will be found through its specific ISynchronizationCompareAdapter. <p> If there are multiple files involved, we need them all to be part of the same logical model. Otherwise, we can't be sure that multiple ISynchronizationCompareAdapter aren't interested in the different files, and thus cannot show a valid 'aggregate' compare editor. </p> <p> Then again, even if the multiple files involved are all part of single-file models (i.e. none of them is a part of a larger logical model, and we have as many models involved as there are files), we cannot show them all within the same compare editor input. Comparing the files and determining conflicts is the job of the ISynchronizationCompareAdapter(s), <u>not</u> ours. If we cannot reliably find the appropriate compare adapter, we should not try and compare the files ourselves. The user will have to manually open the merge tool on each individual logical model. </p> <p> Since we cannot determine the logical model of a file that is not in the workspace, this will fall back to the 'old' merge tool (we compute the diffs ourselves without consideration for the file type) iff there are <u>only</u> such files in the locations set. </p>
 * @param repository Repository within which the compared files are located.
 * @param filterPaths repository-relative paths of the resources we are comparing.
 * @param monitor Monitor on which to report progress to the user.
 * @return The useable compare input.
 * @throws InvocationTargetException
 * @throws InterruptedException
 */
private ICompareInput prepareCompareInput(Repository repository,List<String> filterPaths,IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  try {
    final GitResourceVariantTreeProvider variantTreeProvider=new DirCacheResourceVariantTreeProvider(repository,useWorkspace);
    final Subscriber subscriber=new GitResourceVariantTreeSubscriber(variantTreeProvider);
    checkCanceled(monitor);
    final Set<IProject> projects=new LinkedHashSet<IProject>();
    for (    IResource root : subscriber.roots()) {
      projects.add(root.getProject());
    }
    final Set<IResource> resourcesInOperation=new LinkedHashSet<IResource>();
    boolean outOfWS=false;
    for (    IPath path : locations) {
      boolean foundMatchInWS=false;
      final Iterator<IProject> projectIterator=projects.iterator();
      while (!foundMatchInWS && projectIterator.hasNext()) {
        final IProject project=projectIterator.next();
        final IPath projectLocation=project.getLocation();
        if (projectLocation.equals(path)) {
          resourcesInOperation.addAll(getConflictingFilesFrom(project));
          foundMatchInWS=true;
        }
 else         if (project.getLocation().isPrefixOf(path)) {
          final IResource resource=ModelEGitResourceUtil.getResourceForLocation(path,false);
          if (resource instanceof IContainer) {
            resourcesInOperation.addAll(getConflictingFilesFrom((IContainer)resource));
          }
 else {
            resourcesInOperation.add(resource);
          }
          foundMatchInWS=true;
        }
      }
      if (!foundMatchInWS) {
        if (!resourcesInOperation.isEmpty()) {
          break;
        }
 else {
          outOfWS=true;
        }
      }
 else       if (outOfWS) {
        break;
      }
    }
    checkCanceled(monitor);
    if (!resourcesInOperation.isEmpty() && outOfWS) {
      throw new InvocationTargetException(new IllegalStateException(EMFCompareEGitUIMessages.getString(""String_Node_Str"")));
    }
 else     if (resourcesInOperation.isEmpty()) {
    }
 else {
      final RemoteResourceMappingContext remoteMappingContext=new SubscriberResourceMappingContext(subscriber,true);
      Set<IResource> model=null;
      for (      IResource comparedResource : resourcesInOperation) {
        model=LogicalModels.discoverModel(comparedResource,remoteMappingContext);
        if (model.isEmpty()) {
        }
 else {
          if (!model.containsAll(resourcesInOperation)) {
            throw new RuntimeException(EMFCompareEGitUIMessages.getString(""String_Node_Str""));
          }
 else {
            break;
          }
        }
      }
      final ISynchronizationCompareAdapter compareAdapter=LogicalModels.findAdapter(model,ISynchronizationCompareAdapter.class);
      if (compareAdapter != null) {
        final Set<ResourceMapping> allMappings=LogicalModels.getResourceMappings(model,remoteMappingContext);
        checkCanceled(monitor);
        final ISynchronizationContext synchronizationContext=prepareSynchronizationContext(repository,subscriber,allMappings,remoteMappingContext);
        final Object modelObject=allMappings.iterator().next().getModelObject();
        if (compareAdapter.hasCompareInput(synchronizationContext,modelObject)) {
          return compareAdapter.asCompareInput(synchronizationContext,modelObject);
        }
 else {
        }
      }
 else {
      }
    }
  }
 catch (  IOException e) {
    throw new InvocationTargetException(e);
  }
catch (  CoreException e) {
    throw new InvocationTargetException(e);
  }
  return null;
}",0.9994253974334418
93570,"public static IResource getResourceHandleForLocation(Repository repository,String repoRelativePath,boolean isFolder){
  final String workDir=repository.getWorkTree().getAbsolutePath();
  final IPath path=new Path(workDir + '/' + repoRelativePath);
  final File file=path.toFile();
  if (file.exists()) {
    if (isFolder) {
      return ResourceUtil.getContainerForLocation(path);
    }
    return ResourceUtil.getFileForLocation(path);
  }
  final IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  for (  IProject project : root.getProjects()) {
    if (RepositoryProvider.getProvider(project,GitProvider.ID) != null) {
      final IPath projectLocation=project.getLocation();
      if (projectLocation != null && projectLocation.isPrefixOf(path)) {
        final IPath projectRelativePath=path.makeRelativeTo(projectLocation);
        if (isFolder) {
          return project.getFolder(projectRelativePath);
        }
 else {
          return project.getFile(projectRelativePath);
        }
      }
    }
  }
  return null;
}","public static IResource getResourceHandleForLocation(Repository repository,String repoRelativePath,boolean isFolder){
  final String workDir=repository.getWorkTree().getAbsolutePath();
  final IPath path=new Path(workDir + '/' + repoRelativePath);
  final File file=path.toFile();
  if (file.exists()) {
    if (isFolder) {
      return ResourceUtil.getContainerForLocation(path,false);
    }
    return ResourceUtil.getFileForLocation(path,false);
  }
  final IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  for (  IProject project : root.getProjects()) {
    if (RepositoryProvider.getProvider(project,GitProvider.ID) != null) {
      final IPath projectLocation=project.getLocation();
      if (projectLocation != null && projectLocation.isPrefixOf(path)) {
        final IPath projectRelativePath=path.makeRelativeTo(projectLocation);
        if (isFolder) {
          return project.getFolder(projectRelativePath);
        }
 else {
          return project.getFile(projectRelativePath);
        }
      }
    }
  }
  return null;
}",0.994269340974212
93571,"/** 
 * Returns a resource handle for this path in the workspace. Note that neither the resource nor the result need exist in the workspace : this may return inexistent or otherwise non-accessible IResources.
 * @param repository The repository within which is tracked this file.
 * @param repoRelativePath Repository-relative path of the file we need an handle for.
 * @param isFolder <code>true</code> if the file being sought is a folder.
 * @return The resource handle for the given path in the workspace.
 */
public IResource getResourceHandleForLocation(Repository repository,String repoRelativePath,boolean isFolder){
  IResource resource=null;
  final String workDir=repository.getWorkTree().getAbsolutePath();
  final IPath path=new Path(workDir + '/' + repoRelativePath);
  final File file=path.toFile();
  if (file.exists()) {
    if (isFolder) {
      resource=ResourceUtil.getContainerForLocation(path);
    }
 else {
      resource=ResourceUtil.getFileForLocation(path);
    }
  }
  if (repoRelativePath.endsWith(""String_Node_Str"")) {
    IPath parentPath=path.removeLastSegments(1);
    IProject p=ResourcesPlugin.getWorkspace().getRoot().getProject(parentPath.lastSegment().toString());
    if (map.get(parentPath) == null) {
      map.put(parentPath,p);
    }
  }
  if (resource == null) {
    final List<IPath> list=new ArrayList<IPath>(map.keySet());
    for (int i=list.size() - 1; i >= 0; i--) {
      IPath projectPath=list.get(i);
      if (projectPath.isPrefixOf(path) && !projectPath.equals(path)) {
        final IPath projectRelativePath=path.makeRelativeTo(projectPath);
        if (isFolder) {
          resource=map.get(projectPath).getFolder(projectRelativePath);
        }
 else {
          resource=map.get(projectPath).getFile(projectRelativePath);
        }
        break;
      }
    }
  }
  if (resource == null) {
    final IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
    for (    IProject project : root.getProjects()) {
      if (RepositoryProvider.getProvider(project,GitProvider.ID) != null) {
        final IPath projectLocation=project.getLocation();
        if (projectLocation != null && projectLocation.isPrefixOf(path)) {
          final IPath projectRelativePath=path.makeRelativeTo(projectLocation);
          if (isFolder) {
            resource=project.getFolder(projectRelativePath);
          }
 else {
            resource=project.getFile(projectRelativePath);
          }
          break;
        }
      }
    }
  }
  return resource;
}","/** 
 * Returns a resource handle for this path in the workspace. Note that neither the resource nor the result need exist in the workspace : this may return inexistent or otherwise non-accessible IResources.
 * @param repository The repository within which is tracked this file.
 * @param repoRelativePath Repository-relative path of the file we need an handle for.
 * @param isFolder <code>true</code> if the file being sought is a folder.
 * @return The resource handle for the given path in the workspace.
 */
public IResource getResourceHandleForLocation(Repository repository,String repoRelativePath,boolean isFolder){
  IResource resource=null;
  final String workDir=repository.getWorkTree().getAbsolutePath();
  final IPath path=new Path(workDir + '/' + repoRelativePath);
  final File file=path.toFile();
  if (file.exists()) {
    if (isFolder) {
      resource=ResourceUtil.getContainerForLocation(path,false);
    }
 else {
      resource=ResourceUtil.getFileForLocation(path,false);
    }
  }
  if (repoRelativePath.endsWith(""String_Node_Str"")) {
    IPath parentPath=path.removeLastSegments(1);
    IProject p=ResourcesPlugin.getWorkspace().getRoot().getProject(parentPath.lastSegment().toString());
    if (map.get(parentPath) == null) {
      map.put(parentPath,p);
    }
  }
  if (resource == null) {
    final List<IPath> list=new ArrayList<IPath>(map.keySet());
    for (int i=list.size() - 1; i >= 0; i--) {
      IPath projectPath=list.get(i);
      if (projectPath.isPrefixOf(path) && !projectPath.equals(path)) {
        final IPath projectRelativePath=path.makeRelativeTo(projectPath);
        if (isFolder) {
          resource=map.get(projectPath).getFolder(projectRelativePath);
        }
 else {
          resource=map.get(projectPath).getFile(projectRelativePath);
        }
        break;
      }
    }
  }
  if (resource == null) {
    final IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
    for (    IProject project : root.getProjects()) {
      if (RepositoryProvider.getProvider(project,GitProvider.ID) != null) {
        final IPath projectLocation=project.getLocation();
        if (projectLocation != null && projectLocation.isPrefixOf(path)) {
          final IPath projectRelativePath=path.makeRelativeTo(projectLocation);
          if (isFolder) {
            resource=project.getFolder(projectRelativePath);
          }
 else {
            resource=project.getFile(projectRelativePath);
          }
          break;
        }
      }
    }
  }
  return resource;
}",0.99761620977354
93572,"/** 
 * It creates a new marker from the given difference, view and figure.
 * @param diff The related difference used as index for the main marker.
 * @param referenceView The reference view as base for creation of the marker.
 * @param referenceFigure The reference figure as base for creation of the marker.
 * @param side The side where the marker has to be created.
 * @return The phantom or null if the target layer is not found.
 */
private Marker createMarker(Diff diff,View referenceView,IFigure referenceFigure,MergeViewerSide side){
  IFigure referenceLayer=getLayer(referenceView,side);
  if (referenceLayer != null) {
    Rectangle referenceBounds=referenceFigure.getBounds().getCopy();
    translateCoordinates(referenceFigure,referenceLayer,referenceBounds);
    DecoratorFigure markerFigure=null;
    Marker marker=new Marker(referenceLayer,side,referenceView,referenceFigure,diff);
    if (isNodeList(referenceView)) {
      markerFigure=new NodeListFigure(diff,isThreeWay(),getCompareColor(),referenceFigure,referenceBounds,false);
    }
 else     if (referenceView instanceof Edge) {
      if (referenceFigure instanceof PolylineConnection) {
        markerFigure=new EdgeFigure(diff,isThreeWay(),getCompareColor(),referenceFigure,referenceBounds,false);
      }
    }
    if (markerFigure == null) {
      markerFigure=new NodeFigure(diff,isThreeWay(),getCompareColor(),referenceFigure,referenceBounds,false);
    }
    marker.setDecoratorFigure(markerFigure);
    return marker;
  }
  return null;
}","/** 
 * It creates a new marker from the given difference, view and figure.
 * @param diff The related difference used as index for the main marker.
 * @param referenceView The reference view as base for creation of the marker.
 * @param referenceFigure The reference figure as base for creation of the marker.
 * @param side The side where the marker has to be created.
 * @return The phantom or null if the target layer is not found.
 */
private Marker createMarker(Diff diff,View referenceView,IFigure referenceFigure,MergeViewerSide side){
  IFigure referenceLayer=getLayer(referenceView,side);
  if (referenceLayer != null) {
    Rectangle referenceBounds=referenceFigure.getBounds().getCopy();
    translateCoordinates(referenceFigure,referenceLayer,referenceBounds);
    DecoratorFigure markerFigure=null;
    Marker marker=new Marker(referenceLayer,side,referenceView,referenceFigure,diff);
    if (isNodeList(referenceView)) {
      markerFigure=new NodeListFigure(diff,isThreeWay(),getCompareColor(),referenceFigure,referenceBounds,false);
    }
 else     if (referenceView instanceof Edge && referenceFigure instanceof PolylineConnection) {
      markerFigure=new EdgeFigure(diff,isThreeWay(),getCompareColor(),referenceFigure,referenceBounds,false);
    }
    if (markerFigure == null) {
      markerFigure=new NodeFigure(diff,isThreeWay(),getCompareColor(),referenceFigure,referenceBounds,false);
    }
    marker.setDecoratorFigure(markerFigure);
    return marker;
  }
  return null;
}",0.9258278145695364
93573,"/** 
 * It creates and returns a new edit part from the given edge. This edit part listens to the reference edge but is attached to the controllers of the target (phantom) side.
 * @param referenceEdge The edge as base of the edit part.
 * @param referenceSide The side of this edge.
 * @param targetSide The side where the edit part has to be created to draw the related phantom.
 * @return The new edit part.
 */
private EditPart createEdgeEditPart(Edge referenceEdge,MergeViewerSide referenceSide,MergeViewerSide targetSide){
  EditPart edgeEditPartReference=getViewer(referenceSide).getEditPart(referenceEdge);
  EditPart edgeEditPart=null;
  if (edgeEditPartReference instanceof ConnectionEditPart) {
    edgeEditPart=getOrCreatePhantomEditPart(referenceEdge,referenceSide,targetSide);
    if (edgeEditPart instanceof ConnectionEditPart) {
      View edgeSourceReference=(View)((ConnectionEditPart)edgeEditPartReference).getSource().getModel();
      if (edgeSourceReference == null) {
        edgeSourceReference=referenceEdge.getSource();
      }
      View edgeTargetReference=(View)((ConnectionEditPart)edgeEditPartReference).getTarget().getModel();
      if (edgeTargetReference == null) {
        edgeTargetReference=referenceEdge.getTarget();
      }
      EditPart edgeSourceEp=getOrCreateExtremityPhantomEditPart(((ConnectionEditPart)edgeEditPartReference).getSource(),referenceSide,targetSide);
      ((ConnectionEditPart)edgeEditPart).setSource(edgeSourceEp);
      EditPart edgeTargetEp=getOrCreateExtremityPhantomEditPart(((ConnectionEditPart)edgeEditPartReference).getTarget(),referenceSide,targetSide);
      ((ConnectionEditPart)edgeEditPart).setTarget(edgeTargetEp);
    }
  }
  return edgeEditPart;
}","/** 
 * It creates and returns a new edit part from the given edge. This edit part listens to the reference edge but is attached to the controllers of the target (phantom) side.
 * @param referenceEdge The edge as base of the edit part.
 * @param referenceSide The side of this edge.
 * @param targetSide The side where the edit part has to be created to draw the related phantom.
 * @return The new edit part.
 */
private EditPart createEdgeEditPart(Edge referenceEdge,MergeViewerSide referenceSide,MergeViewerSide targetSide){
  EditPart edgeEditPartReference=getViewer(referenceSide).getEditPart(referenceEdge);
  EditPart edgeEditPart=null;
  if (edgeEditPartReference instanceof ConnectionEditPart) {
    edgeEditPart=getOrCreatePhantomEditPart(referenceEdge,referenceSide,targetSide);
    if (edgeEditPart instanceof ConnectionEditPart) {
      EditPart edgeSourceEp=getOrCreateExtremityPhantomEditPart(((ConnectionEditPart)edgeEditPartReference).getSource(),referenceSide,targetSide);
      ((ConnectionEditPart)edgeEditPart).setSource(edgeSourceEp);
      EditPart edgeTargetEp=getOrCreateExtremityPhantomEditPart(((ConnectionEditPart)edgeEditPartReference).getTarget(),referenceSide,targetSide);
      ((ConnectionEditPart)edgeEditPart).setTarget(edgeTargetEp);
    }
  }
  return edgeEditPart;
}",0.6089828269484808
93574,"/** 
 * It checks that the coordinates of the given view changed between left and right, from the given side.
 * @param referenceView The view to check.
 * @param targetSide The side to focus.
 * @return True if the view changed its location, False otherwise.
 */
private boolean hasChange(View referenceView,MergeViewerSide targetSide){
  DifferenceKind lookup=DifferenceKind.CHANGE;
  View extremity=(View)getMatchView(referenceView,targetSide);
  Collection<Diff> diffs=Collections2.filter(getCompareConfiguration().getComparison().getDifferences(referenceView),CoordinatesChangeFactory.isCoordinatesChangeExtension());
  if (diffs.isEmpty()) {
    diffs=Collections2.filter(getCompareConfiguration().getComparison().getDifferences(extremity),CoordinatesChangeFactory.isCoordinatesChangeExtension());
  }
  return !diffs.isEmpty();
}","/** 
 * It checks that the coordinates of the given view changed between left and right, from the given side.
 * @param referenceView The view to check.
 * @param targetSide The side to focus.
 * @return True if the view changed its location, False otherwise.
 */
private boolean hasChange(View referenceView,MergeViewerSide targetSide){
  View extremity=(View)getMatchView(referenceView,targetSide);
  Collection<Diff> diffs=Collections2.filter(getCompareConfiguration().getComparison().getDifferences(referenceView),CoordinatesChangeFactory.isCoordinatesChangeExtension());
  if (diffs.isEmpty()) {
    diffs=Collections2.filter(getCompareConfiguration().getComparison().getDifferences(extremity),CoordinatesChangeFactory.isCoordinatesChangeExtension());
  }
  return !diffs.isEmpty();
}",0.9710769230769232
93575,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.ide.ui.internal.contentmergeviewer.EMFCompareContentMergeViewer#commandStackChanged(java.util.EventObject)
 */
@Override public void commandStackChanged(EventObject event){
  super.commandStackChanged(event);
  Object source=event.getSource();
  if (source instanceof CommandStack) {
    Command command=((CommandStack)source).getMostRecentCommand();
    if (command instanceof CopyCommand) {
      Iterator<DiagramDiff> diffs=Iterators.filter(command.getAffectedObjects().iterator(),DiagramDiff.class);
      while (diffs.hasNext()) {
        DiagramDiff diagramDiff=diffs.next();
        fDecoratorsManager.hideAll();
        fDecoratorsManager.removeAll();
      }
    }
  }
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.ide.ui.internal.contentmergeviewer.EMFCompareContentMergeViewer#commandStackChanged(java.util.EventObject)
 */
@Override public void commandStackChanged(EventObject event){
  super.commandStackChanged(event);
  Object source=event.getSource();
  if (source instanceof CommandStack) {
    Command command=((CommandStack)source).getMostRecentCommand();
    if (command instanceof CopyCommand) {
      Iterator<DiagramDiff> diffs=Iterators.filter(command.getAffectedObjects().iterator(),DiagramDiff.class);
      if (diffs.hasNext()) {
        fDecoratorsManager.hideAll();
        fDecoratorsManager.removeAll();
      }
    }
  }
}",0.8341566690190544
93576,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.rcp.ui.contentmergeviewer.accessor.ICompareAccessor.#getItems()
 */
public ImmutableList<? extends IMergeViewerItem> getItems(){
  Object thisSideValue=getValue(getSide());
  if (thisSideValue == null && getSide() == MergeViewerSide.ANCESTOR) {
    return ImmutableList.of();
  }
  Object leftValue=getValue(MergeViewerSide.LEFT);
  Object rightValue=getValue(MergeViewerSide.RIGHT);
  Object ancestorValue=getValue(MergeViewerSide.ANCESTOR);
  Diff diff=getInitialDiff();
  final ImmutableList<? extends IMergeViewerItem> ret;
  if (thisSideValue == null) {
    IMergeViewerItem insertionPoint=new MergeViewerItem(getComparison(),diff,leftValue,rightValue,ancestorValue,getSide(),getRootAdapterFactory());
    ret=ImmutableList.of(insertionPoint);
  }
 else {
    IMergeViewerItem matchedObject=new MergeViewerItem(getComparison(),diff,leftValue,rightValue,ancestorValue,getSide(),getRootAdapterFactory());
    ret=ImmutableList.of(matchedObject);
  }
  return ret;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.rcp.ui.contentmergeviewer.accessor.ICompareAccessor.#getItems()
 */
public ImmutableList<? extends IMergeViewerItem> getItems(){
  Object thisSideValue=getValue(getSide());
  if (thisSideValue == null && getSide() == MergeViewerSide.ANCESTOR) {
    return ImmutableList.of();
  }
  Object leftValue=getValue(MergeViewerSide.LEFT);
  Object rightValue=getValue(MergeViewerSide.RIGHT);
  Object ancestorValue=getValue(MergeViewerSide.ANCESTOR);
  Diff diff=getInitialDiff();
  IMergeViewerItem insertionPoint=new MergeViewerItem(getComparison(),diff,leftValue,rightValue,ancestorValue,getSide(),getRootAdapterFactory());
  return ImmutableList.of(insertionPoint);
}",0.6279470960322024
93577,"/** 
 * Set an engine preferences into the preferences (for a collection).
 * @param preferenceKey
 * @param currentSelectedEngine
 * @param defaultConf
 */
private <T>void setEnginePreferences(String preferenceKey,Set<IItemDescriptor<T>> currentSelectedEngine,Collection<IItemDescriptor<T>> defaultConf){
  if (currentSelectedEngine != null && !currentSelectedEngine.contains(defaultConf)) {
    StringBuilder descriptorsKey=new StringBuilder();
    for (Iterator<IItemDescriptor<T>> iterator=currentSelectedEngine.iterator(); iterator.hasNext(); ) {
      IItemDescriptor<T> iItemDescriptor=iterator.next();
      descriptorsKey.append(iItemDescriptor.getID());
      if (iterator.hasNext()) {
        descriptorsKey.append(ItemUtil.PREFERENCE_DELIMITER);
      }
    }
    getPreferenceStore().setValue(preferenceKey,descriptorsKey.toString());
  }
 else {
    getPreferenceStore().setToDefault(preferenceKey);
  }
}","/** 
 * Set an engine preferences into the preferences (for a collection).
 * @param preferenceKey
 * @param currentSelectedEngine
 * @param defaultConf
 */
private <T>void setEnginePreferences(String preferenceKey,Set<IItemDescriptor<T>> currentSelectedEngine,Collection<IItemDescriptor<T>> defaultConf){
  if (currentSelectedEngine != null && !currentSelectedEngine.containsAll(defaultConf)) {
    StringBuilder descriptorsKey=new StringBuilder();
    for (Iterator<IItemDescriptor<T>> iterator=currentSelectedEngine.iterator(); iterator.hasNext(); ) {
      IItemDescriptor<T> iItemDescriptor=iterator.next();
      descriptorsKey.append(iItemDescriptor.getID());
      if (iterator.hasNext()) {
        descriptorsKey.append(ItemUtil.PREFERENCE_DELIMITER);
      }
    }
    getPreferenceStore().setValue(preferenceKey,descriptorsKey.toString());
  }
 else {
    getPreferenceStore().setToDefault(preferenceKey);
  }
}",0.9983704508419338
93578,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.ecore.resource.impl.ResourceSetImpl#getResource(org.eclipse.emf.common.util.URI,boolean)
 */
@Override public Resource getResource(URI uri,boolean loadOnDemand){
  Resource demanded=uriCache.get(uri);
  if (demanded == null) {
    final EPackage ePackage=getPackageRegistry().getEPackage(uri.toString());
    if (ePackage != null) {
      demanded=ePackage.eResource();
      demanded=uriCache.putIfAbsent(uri,demanded);
    }
 else {
    }
  }
  return demanded;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.ecore.resource.impl.ResourceSetImpl#getResource(org.eclipse.emf.common.util.URI,boolean)
 */
@Override public Resource getResource(URI uri,boolean loadOnDemand){
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"" + Integer.toHexString(hashCode()) + ""String_Node_Str""+ uri);
  }
  Resource demanded=uriCache.get(uri);
  if (demanded == null) {
    final EPackage ePackage=getPackageRegistry().getEPackage(uri.toString());
    if (ePackage != null) {
      demanded=ePackage.eResource();
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""String_Node_Str"" + Integer.toHexString(hashCode()) + ""String_Node_Str""+ uri);
      }
      Resource former=uriCache.putIfAbsent(uri,demanded);
      if (former != null) {
        demanded=former;
      }
    }
 else {
    }
  }
 else   if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"" + Integer.toHexString(hashCode()) + ""String_Node_Str""+ uri);
  }
  return demanded;
}",0.6463171864631718
93579,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.ecore.resource.impl.ResourceSetImpl#createResource(org.eclipse.emf.common.util.URI,java.lang.String)
 */
@Override public synchronized Resource createResource(URI uri,String contentType){
  final Resource created=super.createResource(uri,contentType);
  return created;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.ecore.resource.impl.ResourceSetImpl#createResource(org.eclipse.emf.common.util.URI,java.lang.String)
 */
@Override public synchronized Resource createResource(URI uri,String contentType){
  final URI normalizedURI=getURIConverter().normalize(uri);
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"" + Integer.toHexString(hashCode()) + ""String_Node_Str""+ uri);
  }
  if (uriCache.containsKey(normalizedURI)) {
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"" + Integer.toHexString(hashCode()) + ""String_Node_Str""+ uri);
    }
    return uriCache.get(normalizedURI);
  }
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"" + Integer.toHexString(hashCode()) + ""String_Node_Str""+ uri);
  }
  Resource created=super.createResource(uri,contentType);
  Resource former=uriCache.putIfAbsent(normalizedURI,created);
  if (former != null) {
    created=former;
  }
  return created;
}",0.4686774941995359
93580,"/** 
 * Unload the given resource.
 * @param resource Resource to unlod
 * @param monitor Progress monito to use (currently unused)
 */
public void unload(Resource resource,IProgressMonitor monitor){
  final URI uri=resource.getURI();
  uriCache.remove(uri);
  getResources().remove(resource);
  resource.eAdapters().clear();
}","/** 
 * Unload the given resource.
 * @param resource Resource to unlod
 * @param monitor Progress monito to use (currently unused)
 */
public void unload(Resource resource,IProgressMonitor monitor){
  final URI uri=resource.getURI();
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"" + Integer.toHexString(hashCode()) + ""String_Node_Str""+ uri);
  }
  uriCache.remove(uri);
  getResources().remove(resource);
  resource.eAdapters().clear();
}",0.8233799237611181
93581,"/** 
 * This will load the given URI as an EMF Resource. <p> This is the only entry point within this resource set to load an EMF resource, and it will _only_ load the resource pointed at by <code>uri</code>, ignoring all cross-referenced resources (including containment proxies). </p>
 * @param uri The URI to load as a resource.
 * @return The loaded Resource.
 */
public Resource loadResource(URI uri){
  final URIConverter theURIConverter=getURIConverter();
  final URI normalizedURI=theURIConverter.normalize(uri);
  Resource result=null;
  result=uriCache.get(normalizedURI);
  if (result == null) {
    result=delegatedGetResource(uri,true);
    if (result != null) {
      result=uriCache.putIfAbsent(uri,result);
    }
  }
  if (result == null) {
    result=demandCreateResource(uri);
    if (getURIConverter() instanceof RevisionedURIConverter) {
      try {
        if (!((RevisionedURIConverter)getURIConverter()).prefetchStream(uri,getLoadOptions())) {
          return result;
        }
      }
 catch (      IOException e) {
      }
    }
    if (result == null) {
      throw new RuntimeException(""String_Node_Str"" + uri + ""String_Node_Str"");
    }
    demandLoadHelper(result);
  }
  return result;
}","/** 
 * This will load the given URI as an EMF Resource. <p> This is the only entry point within this resource set to load an EMF resource, and it will _only_ load the resource pointed at by <code>uri</code>, ignoring all cross-referenced resources (including containment proxies). </p>
 * @param uri The URI to load as a resource.
 * @return The loaded Resource.
 */
public Resource loadResource(URI uri){
  final URIConverter theURIConverter=getURIConverter();
  final URI normalizedURI=theURIConverter.normalize(uri);
  Resource result=null;
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"" + Integer.toHexString(hashCode()) + ""String_Node_Str""+ normalizedURI);
  }
  result=uriCache.get(normalizedURI);
  if (result == null) {
    result=delegatedGetResource(uri,true);
    if (result != null) {
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""String_Node_Str"" + Integer.toHexString(hashCode()) + ""String_Node_Str""+ normalizedURI);
      }
      Resource former=uriCache.putIfAbsent(normalizedURI,result);
      if (former != null) {
        result=former;
      }
    }
  }
  if (result == null) {
    result=demandCreateResource(uri);
    if (getURIConverter() instanceof RevisionedURIConverter) {
      try {
        if (!((RevisionedURIConverter)getURIConverter()).prefetchStream(uri,getLoadOptions())) {
          return result;
        }
      }
 catch (      IOException e) {
      }
    }
    if (result == null) {
      throw new RuntimeException(""String_Node_Str"" + uri + ""String_Node_Str"");
    }
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"" + Integer.toHexString(hashCode()) + ""String_Node_Str""+ normalizedURI);
    }
    demandLoadHelper(result);
  }
  return result;
}",0.8152651131374535
93582,"protected Item getNextItem(Item previousItem){
  final Item result;
  TreeItem firstChild=getFirstChild(previousItem);
  if (firstChild != null) {
    result=firstChild;
  }
 else {
    TreeItem sibling=getSibling(previousItem);
    if (sibling != null) {
      result=sibling;
    }
 else {
      result=getAncestorSibling(previousItem);
    }
  }
  if (result instanceof TreeItem && result.getData() == null) {
    final TreeItem parentItem=((TreeItem)result).getParentItem();
    if (parentItem != null) {
      viewer.createChildren(parentItem);
    }
 else {
      viewer.createChildren(viewer.getTree());
    }
    return getNextItem(previousItem);
  }
  return result;
}","protected Item getNextItem(Item previousItem){
  final TreeItem result;
  TreeItem firstChild=getFirstChild(previousItem);
  if (firstChild != null) {
    result=firstChild;
  }
 else {
    TreeItem sibling=getSibling(previousItem);
    if (sibling != null) {
      result=sibling;
    }
 else {
      result=getAncestorSibling(previousItem);
    }
  }
  if (result != null && result.getData() == null) {
    final TreeItem parentItem=result.getParentItem();
    if (parentItem != null) {
      viewer.createChildren(parentItem);
    }
 else {
      viewer.createChildren(viewer.getTree());
    }
    return getNextItem(previousItem);
  }
  return result;
}",0.95952023988006
93583,"protected Item getPreviousItem(Item previousItem){
  final Item result;
  TreeItem previousSibling=getPreviousSibling(previousItem);
  if (previousSibling != null) {
    result=getDeepestChild(previousSibling);
  }
 else {
    Object parent=getParent(previousItem);
    if (parent instanceof TreeItem) {
      result=(TreeItem)parent;
    }
 else {
      result=null;
    }
  }
  if (result instanceof TreeItem && result.getData() == null) {
    final TreeItem parentItem=((TreeItem)result).getParentItem();
    if (parentItem != null) {
      viewer.createChildren(parentItem);
    }
 else {
      viewer.createChildren(viewer.getTree());
    }
    return getPreviousItem(previousItem);
  }
  return result;
}","protected Item getPreviousItem(Item previousItem){
  final TreeItem result;
  TreeItem previousSibling=getPreviousSibling(previousItem);
  if (previousSibling != null) {
    result=getDeepestChild(previousSibling);
  }
 else {
    Object parent=getParent(previousItem);
    if (parent instanceof TreeItem) {
      result=(TreeItem)parent;
    }
 else {
      result=null;
    }
  }
  if (result != null && result.getData() == null) {
    final TreeItem parentItem=result.getParentItem();
    if (parentItem != null) {
      viewer.createChildren(parentItem);
    }
 else {
      viewer.createChildren(viewer.getTree());
    }
    return getPreviousItem(previousItem);
  }
  return result;
}",0.9614285714285714
93584,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.rcp.ui.contentmergeviewer.accessor.ICompareAccessor#getItems()
 */
public ImmutableList<? extends IMergeViewerItem> getItems(){
  final ImmutableList.Builder<IMergeViewerItem> ret=ImmutableList.builder();
  final Collection<IMergeViewerItem> items=Lists.newArrayList();
  final Collection<Match> matches=getComparison().getMatches();
  for (  Match match : matches) {
    MergeViewerItem.Container container=null;
    if (ResourceUIUtil.isFragment(match,getSide())) {
      IMergeViewerItem item=createItemForNotLoadedFragmentMatch(match);
      if (item != null) {
        items.add(item);
      }
    }
 else     if (getSide() != MergeViewerSide.ANCESTOR || (getSide() == MergeViewerSide.ANCESTOR && match.getOrigin() != null)) {
      ResourceAttachmentChange diff=getFirst(filter(match.getDifferences(),ResourceAttachmentChange.class),null);
      container=new MergeViewerItem.Container(getComparison(),diff,match.getLeft(),match.getRight(),match.getOrigin(),getSide(),getRootAdapterFactory());
      items.add(container);
    }
  }
  final IMergeViewerItem newContainer=addNewContainerForNotLoadedFragmentMatches(items);
  if (newContainer != null) {
    ret.add(newContainer);
  }
 else {
    ret.addAll(items);
  }
  return ret.build();
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.rcp.ui.contentmergeviewer.accessor.ICompareAccessor#getItems()
 */
public ImmutableList<? extends IMergeViewerItem> getItems(){
  final ImmutableList.Builder<IMergeViewerItem> ret=ImmutableList.builder();
  final Collection<IMergeViewerItem> items=Lists.newArrayList();
  final Collection<Match> matches=getComparison().getMatches();
  for (  Match match : matches) {
    MergeViewerItem.Container container=null;
    if (ResourceUIUtil.isFragment(match,getSide())) {
      IMergeViewerItem item=ResourceUIUtil.createItemForNotLoadedFragmentMatch(match,getSide(),getComparison(),getRootAdapterFactory());
      if (item != null) {
        items.add(item);
      }
    }
 else     if (getSide() != MergeViewerSide.ANCESTOR || (getSide() == MergeViewerSide.ANCESTOR && match.getOrigin() != null)) {
      ResourceAttachmentChange diff=getFirst(filter(match.getDifferences(),ResourceAttachmentChange.class),null);
      container=new MergeViewerItem.Container(getComparison(),diff,match.getLeft(),match.getRight(),match.getOrigin(),getSide(),getRootAdapterFactory());
      items.add(container);
    }
  }
  final IMergeViewerItem newContainer=ResourceUIUtil.addNewContainerForNotLoadedFragmentMatches(items,getSide(),getComparison(),getRootAdapterFactory());
  if (newContainer != null) {
    ret.add(newContainer);
  }
 else {
    ret.addAll(items);
  }
  return ret.build();
}",0.9523809523809524
93585,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.rcp.ui.contentmergeviewer.accessor.ICompareAccessor#getItems()
 */
public ImmutableList<? extends IMergeViewerItem> getItems(){
  final ImmutableList.Builder<IMergeViewerItem> ret=ImmutableList.builder();
  final Collection<IMergeViewerItem> items=Lists.newArrayList();
  final Collection<Match> matches=getComparison().getMatches();
  for (  Match match : matches) {
    MergeViewerItem.Container container=null;
    if (ResourceUIUtil.isFragment(match,getSide())) {
      IMergeViewerItem item=createItemForNotLoadedFragmentMatch(match);
      if (item != null) {
        items.add(item);
      }
    }
 else     if (getSide() != MergeViewerSide.ANCESTOR || (getSide() == MergeViewerSide.ANCESTOR && match.getOrigin() != null)) {
      ResourceAttachmentChange diff=getFirst(filter(match.getDifferences(),ResourceAttachmentChange.class),null);
      container=new MergeViewerItem.Container(getComparison(),diff,match.getLeft(),match.getRight(),match.getOrigin(),getSide(),getRootAdapterFactory());
      items.add(container);
    }
  }
  final IMergeViewerItem newContainer=addNewContainerForNotLoadedFragmentMatches(items);
  if (newContainer != null) {
    ret.add(newContainer);
  }
 else {
    ret.addAll(items);
  }
  return ret.build();
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.rcp.ui.contentmergeviewer.accessor.ICompareAccessor#getItems()
 */
public ImmutableList<? extends IMergeViewerItem> getItems(){
  final ImmutableList.Builder<IMergeViewerItem> ret=ImmutableList.builder();
  final Collection<IMergeViewerItem> items=Lists.newArrayList();
  final Collection<Match> matches=getComparison().getMatches();
  for (  Match match : matches) {
    MergeViewerItem.Container container=null;
    if (ResourceUIUtil.isFragment(match,getSide())) {
      IMergeViewerItem item=ResourceUIUtil.createItemForNotLoadedFragmentMatch(match,getSide(),getComparison(),getRootAdapterFactory());
      if (item != null) {
        items.add(item);
      }
    }
 else     if (getSide() != MergeViewerSide.ANCESTOR || (getSide() == MergeViewerSide.ANCESTOR && match.getOrigin() != null)) {
      ResourceAttachmentChange diff=getFirst(filter(match.getDifferences(),ResourceAttachmentChange.class),null);
      container=new MergeViewerItem.Container(getComparison(),diff,match.getLeft(),match.getRight(),match.getOrigin(),getSide(),getRootAdapterFactory());
      items.add(container);
    }
  }
  final IMergeViewerItem newContainer=ResourceUIUtil.addNewContainerForNotLoadedFragmentMatches(items,getSide(),getComparison(),getRootAdapterFactory());
  if (newContainer != null) {
    ret.add(newContainer);
  }
 else {
    ret.addAll(items);
  }
  return ret.build();
}",0.9523809523809524
93586,"protected void attachListeners(final MergeSourceViewer viewer){
  final StyledText textWidget=viewer.getSourceViewer().getTextWidget();
  textWidget.addFocusListener(new FocusListener(){
    public void focusLost(    FocusEvent e){
      getHandlerService().setGlobalActionHandler(ActionFactory.UNDO.getId(),null);
      getHandlerService().setGlobalActionHandler(ActionFactory.REDO.getId(),null);
    }
    public void focusGained(    FocusEvent e){
      getHandlerService().setGlobalActionHandler(ActionFactory.UNDO.getId(),fUndoAction);
      getHandlerService().setGlobalActionHandler(ActionFactory.REDO.getId(),fRedoAction);
    }
  }
);
  viewer.getSourceViewer().addTextListener(new ITextListener(){
    public void textChanged(    TextEvent event){
      final Object oldInput=getInput();
      if (event.getDocumentEvent() != null && oldInput instanceof CompareInputAdapter) {
        if (oldInput instanceof CompareInputAdapter) {
          final AttributeChange diff=(AttributeChange)((CompareInputAdapter)oldInput).getComparisonObject();
          final EAttribute eAttribute=diff.getAttribute();
          final Match match=diff.getMatch();
          final IEqualityHelper equalityHelper=match.getComparison().getEqualityHelper();
          updateModel(diff,eAttribute,equalityHelper,match.getLeft(),true);
          updateModel(diff,eAttribute,equalityHelper,match.getRight(),false);
        }
      }
    }
  }
);
}","protected void attachListeners(final MergeSourceViewer viewer){
  final StyledText textWidget=viewer.getSourceViewer().getTextWidget();
  textWidget.addFocusListener(new FocusListener(){
    public void focusLost(    FocusEvent e){
      getHandlerService().setGlobalActionHandler(ActionFactory.UNDO.getId(),null);
      getHandlerService().setGlobalActionHandler(ActionFactory.REDO.getId(),null);
    }
    public void focusGained(    FocusEvent e){
      getHandlerService().setGlobalActionHandler(ActionFactory.UNDO.getId(),fUndoAction);
      getHandlerService().setGlobalActionHandler(ActionFactory.REDO.getId(),fRedoAction);
    }
  }
);
  viewer.getSourceViewer().addTextListener(new ITextListener(){
    public void textChanged(    TextEvent event){
      final Object oldInput=getInput();
      if (event.getDocumentEvent() != null && oldInput instanceof CompareInputAdapter) {
        final AttributeChange diff=(AttributeChange)((CompareInputAdapter)oldInput).getComparisonObject();
        final EAttribute eAttribute=diff.getAttribute();
        final Match match=diff.getMatch();
        final IEqualityHelper equalityHelper=match.getComparison().getEqualityHelper();
        updateModel(diff,eAttribute,equalityHelper,match.getLeft(),true);
        updateModel(diff,eAttribute,equalityHelper,match.getRight(),false);
      }
    }
  }
);
}",0.9701974865350088
93587,"public void textChanged(TextEvent event){
  final Object oldInput=getInput();
  if (event.getDocumentEvent() != null && oldInput instanceof CompareInputAdapter) {
    if (oldInput instanceof CompareInputAdapter) {
      final AttributeChange diff=(AttributeChange)((CompareInputAdapter)oldInput).getComparisonObject();
      final EAttribute eAttribute=diff.getAttribute();
      final Match match=diff.getMatch();
      final IEqualityHelper equalityHelper=match.getComparison().getEqualityHelper();
      updateModel(diff,eAttribute,equalityHelper,match.getLeft(),true);
      updateModel(diff,eAttribute,equalityHelper,match.getRight(),false);
    }
  }
}","public void textChanged(TextEvent event){
  final Object oldInput=getInput();
  if (event.getDocumentEvent() != null && oldInput instanceof CompareInputAdapter) {
    final AttributeChange diff=(AttributeChange)((CompareInputAdapter)oldInput).getComparisonObject();
    final EAttribute eAttribute=diff.getAttribute();
    final Match match=diff.getMatch();
    final IEqualityHelper equalityHelper=match.getComparison().getEqualityHelper();
    updateModel(diff,eAttribute,equalityHelper,match.getLeft(),true);
    updateModel(diff,eAttribute,equalityHelper,match.getRight(),false);
  }
}",0.6639935846030474
93588,"protected void attachListeners(final MergeSourceViewer viewer){
  final StyledText textWidget=viewer.getSourceViewer().getTextWidget();
  textWidget.addFocusListener(new FocusListener(){
    public void focusLost(    FocusEvent e){
      getHandlerService().setGlobalActionHandler(ActionFactory.UNDO.getId(),null);
      getHandlerService().setGlobalActionHandler(ActionFactory.REDO.getId(),null);
    }
    public void focusGained(    FocusEvent e){
      getHandlerService().setGlobalActionHandler(ActionFactory.UNDO.getId(),fUndoAction);
      getHandlerService().setGlobalActionHandler(ActionFactory.REDO.getId(),fRedoAction);
    }
  }
);
  viewer.getSourceViewer().addTextListener(new ITextListener(){
    public void textChanged(    TextEvent event){
      final Object oldInput=getInput();
      if (event.getDocumentEvent() != null && oldInput instanceof CompareInputAdapter) {
        if (oldInput instanceof CompareInputAdapter) {
          final AttributeChange diff=(AttributeChange)((CompareInputAdapter)oldInput).getComparisonObject();
          final EAttribute eAttribute=diff.getAttribute();
          final Match match=diff.getMatch();
          final IEqualityHelper equalityHelper=match.getComparison().getEqualityHelper();
          updateModel(diff,eAttribute,equalityHelper,match.getLeft(),true);
          updateModel(diff,eAttribute,equalityHelper,match.getRight(),false);
        }
      }
    }
  }
);
}","protected void attachListeners(final MergeSourceViewer viewer){
  final StyledText textWidget=viewer.getSourceViewer().getTextWidget();
  textWidget.addFocusListener(new FocusListener(){
    public void focusLost(    FocusEvent e){
      getHandlerService().setGlobalActionHandler(ActionFactory.UNDO.getId(),null);
      getHandlerService().setGlobalActionHandler(ActionFactory.REDO.getId(),null);
    }
    public void focusGained(    FocusEvent e){
      getHandlerService().setGlobalActionHandler(ActionFactory.UNDO.getId(),fUndoAction);
      getHandlerService().setGlobalActionHandler(ActionFactory.REDO.getId(),fRedoAction);
    }
  }
);
  viewer.getSourceViewer().addTextListener(new ITextListener(){
    public void textChanged(    TextEvent event){
      final Object oldInput=getInput();
      if (event.getDocumentEvent() != null && oldInput instanceof CompareInputAdapter) {
        final AttributeChange diff=(AttributeChange)((CompareInputAdapter)oldInput).getComparisonObject();
        final EAttribute eAttribute=diff.getAttribute();
        final Match match=diff.getMatch();
        final IEqualityHelper equalityHelper=match.getComparison().getEqualityHelper();
        updateModel(diff,eAttribute,equalityHelper,match.getLeft(),true);
        updateModel(diff,eAttribute,equalityHelper,match.getRight(),false);
      }
    }
  }
);
}",0.9701974865350088
93589,"public void textChanged(TextEvent event){
  final Object oldInput=getInput();
  if (event.getDocumentEvent() != null && oldInput instanceof CompareInputAdapter) {
    if (oldInput instanceof CompareInputAdapter) {
      final AttributeChange diff=(AttributeChange)((CompareInputAdapter)oldInput).getComparisonObject();
      final EAttribute eAttribute=diff.getAttribute();
      final Match match=diff.getMatch();
      final IEqualityHelper equalityHelper=match.getComparison().getEqualityHelper();
      updateModel(diff,eAttribute,equalityHelper,match.getLeft(),true);
      updateModel(diff,eAttribute,equalityHelper,match.getRight(),false);
    }
  }
}","public void textChanged(TextEvent event){
  final Object oldInput=getInput();
  if (event.getDocumentEvent() != null && oldInput instanceof CompareInputAdapter) {
    final AttributeChange diff=(AttributeChange)((CompareInputAdapter)oldInput).getComparisonObject();
    final EAttribute eAttribute=diff.getAttribute();
    final Match match=diff.getMatch();
    final IEqualityHelper equalityHelper=match.getComparison().getEqualityHelper();
    updateModel(diff,eAttribute,equalityHelper,match.getLeft(),true);
    updateModel(diff,eAttribute,equalityHelper,match.getRight(),false);
  }
}",0.6639935846030474
93590,"/** 
 * Compares two values as arrays, checking that their length and content match each other.
 * @param object1 First of the two objects to compare here.
 * @param object2 Second of the two objects to compare here.
 * @return <code>true</code> if these two arrays are to be considered equal, <code>false</code> otherwise.
 */
private boolean matchingArrays(Object object1,Object object2){
  boolean equal=true;
  final int length1=Array.getLength(object1);
  if (length1 != Array.getLength(object2)) {
    equal=true;
  }
 else {
    for (int i=0; i < length1 && equal; i++) {
      final Object element1=Array.get(object1,i);
      final Object element2=Array.get(object2,i);
      equal=matchingValues(element1,element2);
    }
  }
  return equal;
}","/** 
 * Compares two values as arrays, checking that their length and content match each other.
 * @param object1 First of the two objects to compare here.
 * @param object2 Second of the two objects to compare here.
 * @return <code>true</code> if these two arrays are to be considered equal, <code>false</code> otherwise.
 */
private boolean matchingArrays(Object object1,Object object2){
  boolean equal=true;
  final int length1=Array.getLength(object1);
  if (length1 != Array.getLength(object2)) {
    equal=false;
  }
 else {
    for (int i=0; i < length1 && equal; i++) {
      final Object element1=Array.get(object1,i);
      final Object element2=Array.get(object2,i);
      equal=matchingValues(element1,element2);
    }
  }
  return equal;
}",0.99535500995355
93591,"private Set<IStorage> resolveTraversal(IFile file,Set<URI> bounds,IStorageProviderAccessor storageAccessor){
  final Set<IStorage> traversal=new LinkedHashSet<IStorage>();
  final Iterable<URI> dependencies=getDependenciesOf(file,bounds);
  for (  URI uri : dependencies) {
    final IFile dependencyFile=getFileAt(uri);
    try {
      if (!storageAccessor.isInSync(dependencyFile)) {
        traversal.add(dependencyFile);
      }
    }
 catch (    CoreException e) {
    }
  }
  return traversal;
}","private Set<IStorage> resolveTraversal(IFile file,Set<URI> bounds){
  final Set<IStorage> traversal=new LinkedHashSet<IStorage>();
  final Iterable<URI> dependencies=getDependenciesOf(file,bounds);
  for (  URI uri : dependencies) {
    traversal.add(getFileAt(uri));
  }
  return traversal;
}",0.6423173803526449
93592,"/** 
 * The 'left' model we've been fed is a local file. We'll assume that the whole 'left' side of this comparison is local and resolve everything for that side as we would for local comparisons : update the dependency graph according to our resource listener, lookup for cross-references to/from the left resource according to the   {@link #resolutionScope}... Once we've resolved the local traversal, we'll use that as a base to infer the two remote sides, then ""augment"" it with the outgoing references of the remote variants of these resources.
 * @param storageAccessor The accessor that can be used to retrieve synchronization information between our resources.
 * @param left File corresponding to the left side of this comparison.
 * @param right ""starting point"" of the traversal to resolve as the right logical model.
 * @param origin ""starting point"" of the traversal to resolve as the origin logical model (common ancestor of left and right). Can be <code>null</code>.
 * @param monitor Monitor on which to report progress to the user.
 * @return A traversal corresponding to all resources composing the given file's logical model.
 * @throws InterruptedException Thrown if the resolution is cancelled or interrupted one way or another.
 */
private SynchronizationModel resolveModelsWithLocal(IStorageProviderAccessor storageAccessor,IFile left,IStorage right,IStorage origin,ThreadSafeProgressMonitor monitor) throws InterruptedException {
  if (getResolutionScope() != CrossReferenceResolutionScope.SELF) {
    final SynchronizedResourceSet resourceSet=new SynchronizedResourceSet();
    updateDependencies(resourceSet,left,monitor);
    updateChangedResources(resourceSet,monitor);
  }
  final Set<IStorage> leftTraversal=resolveTraversal(left,Collections.<URI>emptySet(),storageAccessor);
  while (!currentlyResolving.isEmpty()) {
    resolutionEnd.await();
  }
  final Set<IStorage> rightTraversal=resolveRemoteTraversal(storageAccessor,right,leftTraversal,DiffSide.REMOTE,monitor);
  final Set<IStorage> originTraversal;
  if (origin != null) {
    originTraversal=resolveRemoteTraversal(storageAccessor,origin,leftTraversal,DiffSide.ORIGIN,monitor);
  }
 else {
    originTraversal=Collections.emptySet();
  }
  final SynchronizationModel synchronizationModel=new SynchronizationModel(new StorageTraversal(leftTraversal),new StorageTraversal(rightTraversal),new StorageTraversal(originTraversal),diagnostic);
  return synchronizationModel;
}","/** 
 * The 'left' model we've been fed is a local file. We'll assume that the whole 'left' side of this comparison is local and resolve everything for that side as we would for local comparisons : update the dependency graph according to our resource listener, lookup for cross-references to/from the left resource according to the   {@link #resolutionScope}... Once we've resolved the local traversal, we'll use that as a base to infer the two remote sides, then ""augment"" it with the outgoing references of the remote variants of these resources.
 * @param storageAccessor The accessor that can be used to retrieve synchronization information between our resources.
 * @param left File corresponding to the left side of this comparison.
 * @param right ""starting point"" of the traversal to resolve as the right logical model.
 * @param origin ""starting point"" of the traversal to resolve as the origin logical model (common ancestor of left and right). Can be <code>null</code>.
 * @param monitor Monitor on which to report progress to the user.
 * @return A traversal corresponding to all resources composing the given file's logical model.
 * @throws InterruptedException Thrown if the resolution is cancelled or interrupted one way or another.
 */
private SynchronizationModel resolveModelsWithLocal(IStorageProviderAccessor storageAccessor,IFile left,IStorage right,IStorage origin,ThreadSafeProgressMonitor monitor) throws InterruptedException {
  if (getResolutionScope() != CrossReferenceResolutionScope.SELF) {
    final SynchronizedResourceSet resourceSet=new SynchronizedResourceSet();
    updateDependencies(resourceSet,left,monitor);
    updateChangedResources(resourceSet,monitor);
  }
  while (!currentlyResolving.isEmpty()) {
    resolutionEnd.await();
  }
  final Set<IStorage> leftTraversal=resolveTraversal(left,Collections.<URI>emptySet());
  final Set<IStorage> rightTraversal=resolveRemoteTraversal(storageAccessor,right,leftTraversal,DiffSide.REMOTE,monitor);
  final Set<IStorage> originTraversal;
  if (origin != null) {
    originTraversal=resolveRemoteTraversal(storageAccessor,origin,leftTraversal,DiffSide.ORIGIN,monitor);
  }
 else {
    originTraversal=Collections.emptySet();
  }
  final SynchronizationModel synchronizationModel=new SynchronizationModel(new StorageTraversal(leftTraversal),new StorageTraversal(rightTraversal),new StorageTraversal(originTraversal),diagnostic);
  return synchronizationModel;
}",0.9669792091316756
93593,"/** 
 * Constructs our uri converter given its delegate.
 * @param delegate The delegate URI Converter.
 */
public StorageURIConverter(URIConverter delegate){
  super(delegate);
  this.loadedRevisions=Sets.newLinkedHashSet();
}","/** 
 * Constructs our uri converter given its delegate.
 * @param delegate The delegate URI Converter.
 */
public StorageURIConverter(URIConverter delegate){
  super(delegate);
  this.loadedRevisions=Sets.newSetFromMap(new ConcurrentHashMap<IStorage,Boolean>());
}",0.8821138211382114
93594,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.ecore.resource.impl.ResourceSetImpl#getResource(org.eclipse.emf.common.util.URI,boolean)
 */
@Override public Resource getResource(URI uri,boolean loadOnDemand){
  Resource demanded=uriCache.get(uri);
  if (demanded == null) {
    final EPackage ePackage=getPackageRegistry().getEPackage(uri.toString());
    if (ePackage != null) {
      demanded=ePackage.eResource();
      uriCache.put(uri,demanded);
    }
 else {
    }
  }
  return demanded;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.ecore.resource.impl.ResourceSetImpl#getResource(org.eclipse.emf.common.util.URI,boolean)
 */
@Override public Resource getResource(URI uri,boolean loadOnDemand){
  Resource demanded=uriCache.get(uri);
  if (demanded == null) {
    final EPackage ePackage=getPackageRegistry().getEPackage(uri.toString());
    if (ePackage != null) {
      demanded=ePackage.eResource();
      demanded=uriCache.putIfAbsent(uri,demanded);
    }
 else {
    }
  }
  return demanded;
}",0.983084577114428
93595,"public Set<URI> discoverCrossReferences(Resource resource,IProgressMonitor monitor){
  resource.eSetDeliver(false);
  final List<EObject> roots=((InternalEList<EObject>)resource.getContents()).basicList();
  final Iterator<EObject> resourceContent=roots.iterator();
  final Set<URI> crossReferencedResources=new LinkedHashSet<URI>();
  while (resourceContent.hasNext()) {
    final EObject eObject=resourceContent.next();
    crossReferencedResources.addAll(resolveCrossReferences(eObject));
    final TreeIterator<EObject> objectChildren=basicEAllContents(eObject);
    while (objectChildren.hasNext()) {
      final EObject child=objectChildren.next();
      if (child.eIsProxy()) {
        final URI proxyURI=((InternalEObject)child).eProxyURI().trimFragment();
        crossReferencedResources.add(proxyURI);
      }
 else {
        crossReferencedResources.addAll(resolveCrossReferences(child));
      }
    }
  }
  return crossReferencedResources;
}","public Set<URI> discoverCrossReferences(Resource resource,IProgressMonitor monitor){
  resource.eSetDeliver(false);
  final List<EObject> roots=((InternalEList<EObject>)resource.getContents()).basicList();
  final Iterator<EObject> resourceContent=roots.iterator();
  final Set<URI> crossReferencedResources=new LinkedHashSet<URI>();
  while (resourceContent.hasNext()) {
    final EObject eObject=resourceContent.next();
    crossReferencedResources.addAll(resolveCrossReferences(eObject));
    final TreeIterator<EObject> objectChildren=basicEAllContents(eObject);
    while (objectChildren.hasNext()) {
      final EObject child=objectChildren.next();
      if (child.eIsProxy()) {
        final URI proxyURI=((InternalEObject)child).eProxyURI().trimFragment();
        crossReferencedResources.add(proxyURI);
      }
 else {
        crossReferencedResources.addAll(resolveCrossReferences(child));
      }
      if (monitor.isCanceled()) {
        return Collections.emptySet();
      }
    }
  }
  return crossReferencedResources;
}",0.9261677548970366
93596,"/** 
 * {@inheritDoc}
 */
public void createMatches(Comparison comparison,Iterator<? extends EObject> leftEObjects,Iterator<? extends EObject> rightEObjects,Iterator<? extends EObject> originEObjects,Monitor monitor){
  Monitor subMonitor=new BasicMonitor();
  subMonitor.beginTask(""String_Node_Str"",1);
  int nbElements=0;
  int lastSegment=0;
  while (leftEObjects.hasNext() || rightEObjects.hasNext() || leftEObjects.hasNext()) {
    if (leftEObjects.hasNext()) {
      EObject next=leftEObjects.next();
      nbElements++;
      index.index(next,Side.LEFT);
      eObjectsToSide.put(next,Side.LEFT);
    }
    if (rightEObjects.hasNext()) {
      EObject next=rightEObjects.next();
      index.index(next,Side.RIGHT);
      eObjectsToSide.put(next,Side.RIGHT);
    }
    if (originEObjects.hasNext()) {
      EObject next=originEObjects.next();
      index.index(next,Side.ORIGIN);
      eObjectsToSide.put(next,Side.ORIGIN);
    }
    if (nbElements / NB_ELEMENTS_BETWEEN_MATCH_AHEAD > lastSegment) {
      matchAheadOfTime(comparison,subMonitor);
      lastSegment++;
    }
  }
  subMonitor.worked(1);
  subMonitor.done();
  subMonitor=new BasicMonitor();
  subMonitor.beginTask(""String_Node_Str"",nbElements);
  matchIndexedObjects(comparison,subMonitor);
  createUnmatchesForRemainingObjects(comparison);
  subMonitor.done();
  restructureMatchModel(comparison);
}","/** 
 * {@inheritDoc}
 */
public void createMatches(Comparison comparison,Iterator<? extends EObject> leftEObjects,Iterator<? extends EObject> rightEObjects,Iterator<? extends EObject> originEObjects,Monitor monitor){
  Monitor subMonitor=new BasicMonitor();
  subMonitor.beginTask(""String_Node_Str"",1);
  int nbElements=0;
  int lastSegment=0;
  while (leftEObjects.hasNext() || rightEObjects.hasNext() || originEObjects.hasNext()) {
    if (leftEObjects.hasNext()) {
      EObject next=leftEObjects.next();
      nbElements++;
      index.index(next,Side.LEFT);
      eObjectsToSide.put(next,Side.LEFT);
    }
    if (rightEObjects.hasNext()) {
      EObject next=rightEObjects.next();
      index.index(next,Side.RIGHT);
      eObjectsToSide.put(next,Side.RIGHT);
    }
    if (originEObjects.hasNext()) {
      EObject next=originEObjects.next();
      index.index(next,Side.ORIGIN);
      eObjectsToSide.put(next,Side.ORIGIN);
    }
    if (nbElements / NB_ELEMENTS_BETWEEN_MATCH_AHEAD > lastSegment) {
      matchAheadOfTime(comparison,subMonitor);
      lastSegment++;
    }
  }
  subMonitor.worked(1);
  subMonitor.done();
  subMonitor=new BasicMonitor();
  subMonitor.beginTask(""String_Node_Str"",nbElements);
  matchIndexedObjects(comparison,subMonitor);
  createUnmatchesForRemainingObjects(comparison);
  subMonitor.done();
  restructureMatchModel(comparison);
}",0.9963556851311952
93597,"/** 
 * {@inheritDoc}
 */
public void createMatches(Comparison comparison,Iterator<? extends EObject> leftEObjects,Iterator<? extends EObject> rightEObjects,Iterator<? extends EObject> originEObjects,Monitor monitor){
  Monitor subMonitor=new BasicMonitor();
  subMonitor.beginTask(""String_Node_Str"",1);
  int nbElements=0;
  int lastSegment=0;
  while (leftEObjects.hasNext() || rightEObjects.hasNext() || leftEObjects.hasNext()) {
    if (leftEObjects.hasNext()) {
      EObject next=leftEObjects.next();
      nbElements++;
      index.index(next,Side.LEFT);
      eObjectsToSide.put(next,Side.LEFT);
    }
    if (rightEObjects.hasNext()) {
      EObject next=rightEObjects.next();
      index.index(next,Side.RIGHT);
      eObjectsToSide.put(next,Side.RIGHT);
    }
    if (originEObjects.hasNext()) {
      EObject next=originEObjects.next();
      index.index(next,Side.ORIGIN);
      eObjectsToSide.put(next,Side.ORIGIN);
    }
    if (nbElements / NB_ELEMENTS_BETWEEN_MATCH_AHEAD > lastSegment) {
      matchAheadOfTime(comparison,subMonitor);
      lastSegment++;
    }
  }
  subMonitor.worked(1);
  subMonitor.done();
  subMonitor=new BasicMonitor();
  subMonitor.beginTask(""String_Node_Str"",nbElements);
  matchIndexedObjects(comparison,subMonitor);
  createUnmatchesForRemainingObjects(comparison);
  subMonitor.done();
  restructureMatchModel(comparison);
}","/** 
 * {@inheritDoc}
 */
public void createMatches(Comparison comparison,Iterator<? extends EObject> leftEObjects,Iterator<? extends EObject> rightEObjects,Iterator<? extends EObject> originEObjects,Monitor monitor){
  Monitor subMonitor=new BasicMonitor();
  subMonitor.beginTask(""String_Node_Str"",1);
  int nbElements=0;
  int lastSegment=0;
  while (leftEObjects.hasNext() || rightEObjects.hasNext() || originEObjects.hasNext()) {
    if (leftEObjects.hasNext()) {
      EObject next=leftEObjects.next();
      nbElements++;
      index.index(next,Side.LEFT);
      eObjectsToSide.put(next,Side.LEFT);
    }
    if (rightEObjects.hasNext()) {
      EObject next=rightEObjects.next();
      index.index(next,Side.RIGHT);
      eObjectsToSide.put(next,Side.RIGHT);
    }
    if (originEObjects.hasNext()) {
      EObject next=originEObjects.next();
      index.index(next,Side.ORIGIN);
      eObjectsToSide.put(next,Side.ORIGIN);
    }
    if (nbElements / NB_ELEMENTS_BETWEEN_MATCH_AHEAD > lastSegment) {
      matchAheadOfTime(comparison,subMonitor);
      lastSegment++;
    }
  }
  subMonitor.worked(1);
  subMonitor.done();
  subMonitor=new BasicMonitor();
  subMonitor.beginTask(""String_Node_Str"",nbElements);
  matchIndexedObjects(comparison,subMonitor);
  createUnmatchesForRemainingObjects(comparison);
  subMonitor.done();
  restructureMatchModel(comparison);
}",0.9963556851311952
93598,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.ide.ui.internal.structuremergeviewer.actions.MergeAction#getDifferencesToMerge()
 */
@Override protected List<Diff> getDifferencesToMerge(){
  Iterable<Diff> differences=filter(comparison.getDifferences(),or(WITHOUT_CONFLICT,hasState(DifferenceState.UNRESOLVED)));
  return newArrayList(differences);
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.ide.ui.internal.structuremergeviewer.actions.MergeAction#getDifferencesToMerge()
 */
@Override protected List<Diff> getDifferencesToMerge(){
  Iterable<Diff> differences=filter(comparison.getDifferences(),and(WITHOUT_CONFLICT,hasState(DifferenceState.UNRESOLVED)));
  return newArrayList(differences);
}",0.9929873772791024
93599,"public boolean apply(EObject input){
  boolean ret=false;
  if (input instanceof Diff && !(input instanceof ResourceAttachmentChange)) {
    final Diff diff=(Diff)input;
    final Conflict conflict=diff.getConflict();
    if (conflict == null || ConflictKind.PSEUDO == conflict.getKind()) {
      final EObject grandParent=diff.getMatch().eContainer();
      if (grandParent instanceof Match) {
        ImmutableSet<EObject> containementDifferenceValues=MatchItemProviderSpec.containmentReferencesValues((Match)grandParent);
        if (MatchItemProviderSpec.matchOfContainmentDiff(containementDifferenceValues).apply(diff.getMatch())) {
          ret=true;
        }
      }
    }
  }
  return ret;
}","public boolean apply(EObject input){
  boolean ret=false;
  if (input instanceof Diff && !(input instanceof ResourceAttachmentChange)) {
    final Diff diff=(Diff)input;
    final Conflict conflict=diff.getConflict();
    if (conflict == null || ConflictKind.PSEUDO == conflict.getKind()) {
      final Match match=diff.getMatch();
      final EObject grandParent=match.eContainer();
      if (grandParent instanceof Match) {
        ImmutableSet<EObject> containementDifferenceValues=MatchItemProviderSpec.containmentReferencesValues((Match)grandParent);
        if (MatchItemProviderSpec.matchOfContainmentDiff(containementDifferenceValues).apply(match)) {
          ret=true;
        }
 else         if (match.getLeft() == null && match.getRight() == null && match.getOrigin() == null) {
          ret=true;
        }
      }
    }
  }
  return ret;
}",0.8630225080385852
93600,"/** 
 * It creates a new phantom from the given difference, view and figure.
 * @param diff The related difference used as index for the main phantom.
 * @param referenceView The reference view as base for creation of the phantom.
 * @param referenceFigure The reference figure as base for creation of the phantom.
 * @param side The side where the phantom has to be created.
 * @return The phantom or null if the target layer is not found.
 */
private Phantom createPhantom(Diff diff,View referenceView,IFigure referenceFigure,MergeViewerSide side){
  IFigure targetLayer=getLayer(referenceView,side);
  if (targetLayer != null) {
    MergeViewerSide referenceSide=getSide(referenceView);
    Rectangle rect=referenceFigure.getBounds().getCopy();
    IFigure referenceLayer=getLayer(referenceView,referenceSide);
    translateCoordinates(referenceFigure,referenceLayer,rect);
    DecoratorFigure ghost=null;
    Phantom phantom=new Phantom(targetLayer,side,referenceView,referenceFigure,diff);
    if (isNodeList(referenceView)) {
      Diff refiningDiff=Iterators.find(diff.getRefinedBy().iterator(),and(valueIs(referenceView),onFeature(NotationPackage.Literals.VIEW__PERSISTED_CHILDREN.getName())));
      int index=DiffUtil.findInsertionIndex(getComparison(),refiningDiff,side == MergeViewerSide.LEFT);
      IFigure referenceParentFigure=referenceFigure.getParent();
      Rectangle referenceParentBounds=referenceParentFigure.getBounds().getCopy();
      translateCoordinates(referenceParentFigure,referenceLayer,referenceParentBounds);
      View parentView=(View)getMatchView(referenceView.eContainer(),side);
      if (parentView != null) {
        int nbElements=getVisibleViews(parentView).size();
        if (index > nbElements) {
          index=nbElements;
        }
      }
      int pos=rect.height * index + referenceParentBounds.y + 1;
      Map<String,Object> parameters=new HashMap<String,Object>();
      parameters.put(NodeListFigure.PARAM_Y_POS,Integer.valueOf(pos));
      ghost=new NodeListFigure(diff,isThreeWay(),getCompareColor(),referenceFigure,rect,true,parameters);
    }
 else     if (referenceView instanceof Edge) {
      if (hasAnExtremityChange((Edge)referenceView,side)) {
        EditPart edgeEditPart=createEdgeEditPart((Edge)referenceView,referenceSide,side);
        if (edgeEditPart instanceof GraphicalEditPart) {
          phantom.setEditPart(edgeEditPart);
          IFigure fig=((GraphicalEditPart)edgeEditPart).getFigure();
          fig.getChildren().clear();
          ghost=new DecoratorFigure(diff,isThreeWay(),getCompareColor(),referenceFigure,fig,true);
        }
      }
 else {
        if (referenceFigure instanceof PolylineConnection) {
          ghost=new EdgeFigure(diff,isThreeWay(),getCompareColor(),referenceFigure,rect,true);
        }
      }
    }
    if (ghost == null) {
      ghost=new NodeFigure(diff,isThreeWay(),getCompareColor(),referenceFigure,rect,true);
    }
    phantom.setDecoratorFigure(ghost);
    translateWhenInsideContainerChange(phantom);
    return phantom;
  }
  return null;
}","/** 
 * It creates a new phantom from the given difference, view and figure.
 * @param diff The related difference used as index for the main phantom.
 * @param referenceView The reference view as base for creation of the phantom.
 * @param referenceFigure The reference figure as base for creation of the phantom.
 * @param side The side where the phantom has to be created.
 * @return The phantom or null if the target layer is not found.
 */
private Phantom createPhantom(Diff diff,View referenceView,IFigure referenceFigure,MergeViewerSide side){
  IFigure targetLayer=getLayer(referenceView,side);
  if (targetLayer != null) {
    MergeViewerSide referenceSide=getSide(referenceView);
    Rectangle rect=referenceFigure.getBounds().getCopy();
    IFigure referenceLayer=getLayer(referenceView,referenceSide);
    translateCoordinates(referenceFigure,referenceLayer,rect);
    DecoratorFigure ghost=null;
    Phantom phantom=new Phantom(targetLayer,side,referenceView,referenceFigure,diff);
    if (isNodeList(referenceView)) {
      int index=getIndex(diff,referenceView,side);
      IFigure referenceParentFigure=referenceFigure.getParent();
      Rectangle referenceParentBounds=referenceParentFigure.getBounds().getCopy();
      translateCoordinates(referenceParentFigure,referenceLayer,referenceParentBounds);
      View parentView=(View)getMatchView(referenceView.eContainer(),side);
      if (parentView != null) {
        int nbElements=getVisibleViews(parentView).size();
        if (index > nbElements) {
          index=nbElements;
        }
      }
      int pos=rect.height * index + referenceParentBounds.y + 1;
      Map<String,Object> parameters=new HashMap<String,Object>();
      parameters.put(NodeListFigure.PARAM_Y_POS,Integer.valueOf(pos));
      ghost=new NodeListFigure(diff,isThreeWay(),getCompareColor(),referenceFigure,rect,true,parameters);
    }
 else     if (referenceView instanceof Edge) {
      if (hasAnExtremityChange((Edge)referenceView,side)) {
        EditPart edgeEditPart=createEdgeEditPart((Edge)referenceView,referenceSide,side);
        if (edgeEditPart instanceof GraphicalEditPart) {
          phantom.setEditPart(edgeEditPart);
          IFigure fig=((GraphicalEditPart)edgeEditPart).getFigure();
          fig.getChildren().clear();
          ghost=new DecoratorFigure(diff,isThreeWay(),getCompareColor(),referenceFigure,fig,true);
        }
      }
 else {
        if (referenceFigure instanceof PolylineConnection) {
          ghost=new EdgeFigure(diff,isThreeWay(),getCompareColor(),referenceFigure,rect,true);
        }
      }
    }
    if (ghost == null) {
      ghost=new NodeFigure(diff,isThreeWay(),getCompareColor(),referenceFigure,rect,true);
    }
    phantom.setDecoratorFigure(ghost);
    translateWhenInsideContainerChange(phantom);
    return phantom;
  }
  return null;
}",0.954930532023043
93601,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.diagram.ide.ui.internal.contentmergeviewer.diagram.DiagramContentMergeViewer.AbstractDecoratorManager#createAndRegisterDecorator(org.eclipse.emf.compare.Diff,org.eclipse.gmf.runtime.notation.View,org.eclipse.draw2d.IFigure,org.eclipse.emf.compare.rcp.ui.internal.mergeviewer.IMergeViewer.MergeViewerSide)
 */
@Override protected Marker createAndRegisterDecorator(Diff diff,View referenceView,IFigure referenceFigure,MergeViewerSide targetSide){
  Marker marker=createMarker(diff,referenceView,referenceFigure,targetSide);
  if (marker != null) {
    List<Marker> markers=fMarkerRegistry.get(diff);
    if (markers == null) {
      markers=Collections.synchronizedList(new ArrayList<Marker>());
      fMarkerRegistry.put(diff,markers);
    }
    markers.add(marker);
  }
  return marker;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.diagram.ide.ui.internal.contentmergeviewer.diagram.DiagramContentMergeViewer.AbstractDecoratorManager#createAndRegisterDecorator(org.eclipse.emf.compare.Diff,org.eclipse.gmf.runtime.notation.View,org.eclipse.draw2d.IFigure,org.eclipse.emf.compare.rcp.ui.internal.mergeviewer.IMergeViewer.MergeViewerSide)
 */
@Override protected Marker createAndRegisterDecorator(Diff diff,View referenceView,IFigure referenceFigure,MergeViewerSide targetSide){
  Marker marker=createMarker(diff,referenceView,referenceFigure,targetSide);
  if (marker != null) {
    fMarkerRegistry.put(diff,marker);
  }
  return marker;
}",0.844207723035952
93602,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.diagram.ide.ui.internal.contentmergeviewer.diagram.DiagramContentMergeViewer.AbstractDecoratorManager#getDecorators(org.eclipse.emf.compare.Diff)
 */
@Override protected List<Marker> getDecorators(Diff difference){
  return fMarkerRegistry.get(difference);
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.diagram.ide.ui.internal.contentmergeviewer.diagram.DiagramContentMergeViewer.AbstractDecoratorManager#getDecorators(org.eclipse.emf.compare.Diff)
 */
@Override protected Collection<Marker> getDecorators(Diff difference){
  return fMarkerRegistry.get(difference);
}",0.9777777777777776
93603,"/** 
 * It manages the display of the given decorators.
 * @param decorators The decorators to handle.
 * @param isAdd True if it has to be revealed, False otherwise.
 * @param areMain It indicates if the given decorators to handle are considered as the main ones (the ones directly linked to the selected difference).
 */
protected void handleDecorators(List<? extends AbstractDecorator> decorators,boolean isAdd,boolean areMain){
  for (  AbstractDecorator decorator : decorators) {
    handleDecorator(decorator,isAdd,areMain);
  }
}","/** 
 * It manages the display of the given decorators.
 * @param decorators The decorators to handle.
 * @param isAdd True if it has to be revealed, False otherwise.
 * @param areMain It indicates if the given decorators to handle are considered as the main ones (the ones directly linked to the selected difference).
 */
protected void handleDecorators(Collection<? extends AbstractDecorator> decorators,boolean isAdd,boolean areMain){
  for (  AbstractDecorator decorator : decorators) {
    handleDecorator(decorator,isAdd,areMain);
  }
}",0.987012987012987
93604,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.diagram.ide.ui.internal.contentmergeviewer.DiagramCompareContentMergeViewer#updateContent(java.lang.Object,java.lang.Object,java.lang.Object)
 */
@Override protected void updateContent(Object ancestor,Object left,Object right){
  super.updateContent(ancestor,left,right);
  getLeftMergeViewer().getGraphicalViewer().flush();
  getRightMergeViewer().getGraphicalViewer().flush();
  getAncestorMergeViewer().getGraphicalViewer().flush();
  if (left instanceof IDiagramDiffAccessor) {
    IDiagramDiffAccessor input=(IDiagramDiffAccessor)left;
    if (fCurrentSelectedDiff != null && fCurrentSelectedDiff.getState() != DifferenceState.MERGED) {
      fDecoratorsManager.hideDecorators(fCurrentSelectedDiff);
    }
    Diff diff=input.getDiff();
    fCurrentSelectedDiff=diff;
    if (diff.getState() != DifferenceState.MERGED) {
      fDecoratorsManager.revealDecorators(diff);
    }
  }
 else   if (left instanceof IDiagramNodeAccessor) {
    if (fCurrentSelectedDiff != null && fCurrentSelectedDiff.getState() != DifferenceState.MERGED) {
      fDecoratorsManager.hideDecorators(fCurrentSelectedDiff);
    }
    fCurrentSelectedDiff=null;
  }
  updateToolItems();
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.diagram.ide.ui.internal.contentmergeviewer.DiagramCompareContentMergeViewer#updateContent(java.lang.Object,java.lang.Object,java.lang.Object)
 */
@Override protected void updateContent(Object ancestor,Object left,Object right){
  fDecoratorsManager.hideAll();
  fDecoratorsManager.removeAll();
  super.updateContent(ancestor,left,right);
  getLeftMergeViewer().getGraphicalViewer().flush();
  getRightMergeViewer().getGraphicalViewer().flush();
  getAncestorMergeViewer().getGraphicalViewer().flush();
  if (left instanceof IDiagramNodeAccessor) {
    if (left instanceof IDiagramDiffAccessor) {
      IDiagramDiffAccessor input=(IDiagramDiffAccessor)left;
      Diff diff=input.getDiff();
      if (diff.getState() != DifferenceState.MERGED && diff != fCurrentSelectedDiff) {
        fDecoratorsManager.revealDecorators(diff);
      }
      fCurrentSelectedDiff=diff;
    }
 else {
      fCurrentSelectedDiff=null;
    }
  }
  updateToolItems();
}",0.6009009009009009
93605,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.rcp.ui.internal.contentmergeviewer.accessor.impl.AbstractStructuralFeatureAccessor.ui.internal.contentmergeviewer.provider.BasicStructuralFeatureAccessorImpl#getItems()
 */
public ImmutableList<? extends IMergeViewerItem> getItems(){
  Object thisSideValue=getValue(getSide());
  if (thisSideValue == null && getSide() == MergeViewerSide.ANCESTOR) {
    return ImmutableList.of();
  }
  Object leftValue=getValue(MergeViewerSide.LEFT);
  Object rightValue=getValue(MergeViewerSide.RIGHT);
  Object ancestorValue=getValue(MergeViewerSide.ANCESTOR);
  Diff diff=getFirst(getDifferences(),null);
  final ImmutableList<? extends IMergeViewerItem> ret;
  if (thisSideValue == null) {
    IMergeViewerItem insertionPoint=new MergeViewerItem(getComparison(),diff,leftValue,rightValue,ancestorValue,getSide(),getAdapterFactory());
    ret=ImmutableList.of(insertionPoint);
  }
 else {
    IMergeViewerItem matchedObject=new MergeViewerItem(getComparison(),diff,leftValue,rightValue,ancestorValue,getSide(),getAdapterFactory());
    ret=ImmutableList.of(matchedObject);
  }
  return ret;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.rcp.ui.internal.contentmergeviewer.accessor.impl.AbstractStructuralFeatureAccessor.ui.internal.contentmergeviewer.provider.BasicStructuralFeatureAccessorImpl#getItems()
 */
public ImmutableList<? extends IMergeViewerItem> getItems(){
  Object thisSideValue=getValue(getSide());
  if (thisSideValue == null && getSide() == MergeViewerSide.ANCESTOR) {
    return ImmutableList.of();
  }
  Object leftValue=getValue(MergeViewerSide.LEFT);
  Object rightValue=getValue(MergeViewerSide.RIGHT);
  Object ancestorValue=getValue(MergeViewerSide.ANCESTOR);
  Diff diff=getInitialDiff();
  final ImmutableList<? extends IMergeViewerItem> ret;
  if (thisSideValue == null) {
    IMergeViewerItem insertionPoint=new MergeViewerItem(getComparison(),diff,leftValue,rightValue,ancestorValue,getSide(),getAdapterFactory());
    ret=ImmutableList.of(insertionPoint);
  }
 else {
    IMergeViewerItem matchedObject=new MergeViewerItem(getComparison(),diff,leftValue,rightValue,ancestorValue,getSide(),getAdapterFactory());
    ret=ImmutableList.of(matchedObject);
  }
  return ret;
}",0.9862405681313804
93606,"/** 
 * It checks that the given view represents an element of a list.
 * @param view The view.
 * @return True it it is an element of a list.
 */
protected boolean isNodeList(View view){
  return view.eContainer() instanceof BasicCompartment;
}","/** 
 * It checks that the given part represents an element of a list.
 * @param part The part.
 * @return True it it represents an element of a list.
 */
private boolean isNodeList(EditPart part){
  return part instanceof ListItemEditPart || isInListContainer(part);
}",0.2412451361867704
93607,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.provider.IItemStyledLabelProvider#getStyledText(java.lang.Object)
 */
public IStyledString.IComposedStyledString getStyledText(Object object){
  final UMLDiff umlDiff=(UMLDiff)object;
  Stereotype stereotype=((StereotypeApplicationChange)umlDiff).getStereotype();
  if (stereotype == null) {
    stereotype=UMLUtil.getStereotype(umlDiff.getDiscriminant());
  }
  final ComposedStyledString stereotypeText=new ComposedStyledString();
  if (stereotype != null) {
    stereotypeText.append(AdapterFactoryUtil.getText(getRootAdapterFactory(),stereotype) + ' ');
  }
 else   if (umlDiff.getDiscriminant() instanceof NamedElement) {
    stereotypeText.append(""String_Node_Str"" + ((NamedElement)umlDiff.getDiscriminant()).getName() + ' ');
  }
 else {
    stereotypeText.append(""String_Node_Str"");
  }
  final Match targetMatch=umlDiff.getMatch();
  final EObject target=findNonNullSide(targetMatch);
  String targetLabel=null;
  final String action;
switch (umlDiff.getKind()) {
case ADD:
    action=""String_Node_Str"";
  break;
case DELETE:
action=""String_Node_Str"";
break;
case CHANGE:
action=""String_Node_Str"";
break;
case MOVE:
action=""String_Node_Str"";
break;
default :
throw new IllegalStateException(""String_Node_Str"" + DifferenceKind.class.getSimpleName() + ""String_Node_Str""+ umlDiff.getKind());
}
if (target != null) {
targetLabel+=AdapterFactoryUtil.getText(getRootAdapterFactory(),target);
}
return stereotypeText.append(""String_Node_Str"" + targetLabel + ""String_Node_Str""+ action+ ""String_Node_Str"",Style.DECORATIONS_STYLER);
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.provider.IItemStyledLabelProvider#getStyledText(java.lang.Object)
 */
public IStyledString.IComposedStyledString getStyledText(Object object){
  final UMLDiff umlDiff=(UMLDiff)object;
  Stereotype stereotype=((StereotypeApplicationChange)umlDiff).getStereotype();
  if (stereotype == null) {
    stereotype=UMLUtil.getStereotype(umlDiff.getDiscriminant());
  }
  final ComposedStyledString stereotypeText=new ComposedStyledString();
  if (stereotype != null) {
    stereotypeText.append(AdapterFactoryUtil.getText(getRootAdapterFactory(),stereotype) + ' ');
  }
 else   if (umlDiff.getDiscriminant() instanceof NamedElement) {
    stereotypeText.append(""String_Node_Str"" + ((NamedElement)umlDiff.getDiscriminant()).getName() + ' ');
  }
 else {
    stereotypeText.append(""String_Node_Str"");
  }
  final Match targetMatch=umlDiff.getMatch();
  final EObject target=findNonNullSide(targetMatch);
  String targetLabel=null;
  final String action;
switch (umlDiff.getKind()) {
case ADD:
    action=""String_Node_Str"";
  break;
case DELETE:
action=""String_Node_Str"";
break;
case CHANGE:
action=""String_Node_Str"";
break;
case MOVE:
action=""String_Node_Str"";
break;
default :
throw new IllegalStateException(""String_Node_Str"" + DifferenceKind.class.getSimpleName() + ""String_Node_Str""+ umlDiff.getKind());
}
if (target != null) {
targetLabel+=AdapterFactoryUtil.getText(getRootAdapterFactory(),target);
}
return stereotypeText.append(""String_Node_Str"" + action + ""String_Node_Str"",Style.DECORATIONS_STYLER);
}",0.9853596435391472
93608,"/** 
 * Returns the current resource on the given side of the given comparison.
 * @param comparison The given comparison.
 * @param side The given side.
 * @return The current resource on the given side of the given comparison.
 */
public static Resource getResource(Comparison comparison,MergeViewerSide side,Diff diff){
  Resource resource=null;
  Collection<MatchResource> matchResources=comparison.getMatchedResources();
  String diffResourceURI=null;
  if (diff != null) {
    diffResourceURI=((ResourceAttachmentChange)diff).getResourceURI();
  }
  for (  MatchResource matchResource : matchResources) {
switch (side) {
case ANCESTOR:
      resource=matchResource.getOrigin();
    break;
case LEFT:
  resource=matchResource.getLeft();
break;
case RIGHT:
resource=matchResource.getRight();
break;
default :
throw new IllegalStateException();
}
if (resource != null && diffResourceURI != null) {
URI resourceURI=resource.getURI();
if (diffResourceURI.equals(resourceURI.toString())) {
return resource;
}
 else if (side == MergeViewerSide.RIGHT && diffResourceURI.equals(matchResource.getLeftURI())) {
return resource;
}
 else if (side == MergeViewerSide.LEFT && diffResourceURI.equals(matchResource.getRightURI())) {
return resource;
}
 else if (side == MergeViewerSide.ANCESTOR && diffResourceURI.equals(matchResource.getOriginURI())) {
return resource;
}
}
}
return resource;
}","/** 
 * Returns the current resource on the given side of the given comparison.
 * @param comparison The given comparison.
 * @param side The given side.
 * @return The current resource on the given side of the given comparison.
 */
public static Resource getResource(Comparison comparison,MergeViewerSide side,Diff diff){
  Resource resource=null;
  Collection<MatchResource> matchResources=comparison.getMatchedResources();
  String diffResourceURI=null;
  if (diff != null) {
    diffResourceURI=((ResourceAttachmentChange)diff).getResourceURI();
  }
  for (  MatchResource matchResource : matchResources) {
switch (side) {
case ANCESTOR:
      resource=matchResource.getOrigin();
    break;
case LEFT:
  resource=matchResource.getLeft();
break;
case RIGHT:
resource=matchResource.getRight();
break;
default :
throw new IllegalStateException();
}
if (resource != null && diffResourceURI != null) {
URI resourceURI=resource.getURI();
if (diffResourceURI.equals(resourceURI.toString())) {
return resource;
}
 else if (side == MergeViewerSide.RIGHT && (diffResourceURI.equals(matchResource.getLeftURI()) || diffResourceURI.equals(matchResource.getOriginURI()))) {
return resource;
}
 else if (side == MergeViewerSide.LEFT && (diffResourceURI.equals(matchResource.getRightURI()) || diffResourceURI.equals(matchResource.getOriginURI()))) {
return resource;
}
 else if (side == MergeViewerSide.ANCESTOR && (diffResourceURI.equals(matchResource.getLeftURI()) || diffResourceURI.equals(matchResource.getRightURI()))) {
return resource;
}
}
}
return resource;
}",0.9350119088125212
93609,"/** 
 * Check if the moving of the node is over the threshold (in pixels) specified in the emf compare preference page.
 * @param diff The difference.
 * @return True if it is over the threshold.
 */
private boolean isOverThreshold(AttributeChange diff){
  final Comparison comparison=diff.getMatch().getComparison();
  final EObject left=MatchUtil.getContainer(comparison,diff);
  final EObject right=MatchUtil.getOriginContainer(comparison,diff);
  if (left instanceof Bounds && right instanceof Bounds) {
    final int leftX=((Bounds)left).getX();
    final int leftY=((Bounds)left).getY();
    final int rightX=((Bounds)right).getX();
    final int rightY=((Bounds)right).getY();
    final int deltaX=Math.abs(leftX - rightX);
    final int deltaY=Math.abs(leftY - rightY);
    final int threshold=configuration.getMoveThreshold();
    return deltaX + deltaY > threshold;
  }
  return false;
}","/** 
 * Check if the moving of the node is over the threshold (in pixels) specified in the emf compare preference page.
 * @param diff The difference.
 * @return True if it is over the threshold.
 */
private boolean isOverThreshold(AttributeChange diff){
  final Comparison comparison=diff.getMatch().getComparison();
  final EObject left=MatchUtil.getContainer(comparison,diff);
  final EObject right=MatchUtil.getOriginContainer(comparison,diff);
  if (left instanceof Bounds && right instanceof Bounds) {
    final int leftX=((Bounds)left).getX();
    final int leftY=((Bounds)left).getY();
    final int rightX=((Bounds)right).getX();
    final int rightY=((Bounds)right).getY();
    final int deltaX=Math.abs(leftX - rightX);
    final int deltaY=Math.abs(leftY - rightY);
    int threshold=0;
    if (configuration != null) {
      threshold=configuration.getMoveThreshold();
    }
    return deltaX + deltaY > threshold;
  }
  return false;
}",0.962080173347779
93610,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.internal.postprocessor.factories.AbstractChangeFactory#setRefiningChanges(org.eclipse.emf.compare.diagram.internal.extensions.DiagramDiff,org.eclipse.emf.compare.DifferenceKind,org.eclipse.emf.compare.Diff)
 */
@Override public void setRefiningChanges(Diff extension,DifferenceKind extensionKind,Diff refiningDiff){
  extension.getRefinedBy().add(refiningDiff);
  if (extensionKind != DifferenceKind.MOVE) {
    extension.getRefinedBy().addAll(getAllContainedDifferences(refiningDiff));
  }
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.internal.postprocessor.factories.AbstractChangeFactory#setRefiningChanges(org.eclipse.emf.compare.diagram.internal.extensions.DiagramDiff,org.eclipse.emf.compare.DifferenceKind,org.eclipse.emf.compare.Diff)
 */
@Override public void setRefiningChanges(Diff extension,DifferenceKind extensionKind,Diff refiningDiff){
  extension.getRefinedBy().add(refiningDiff);
  extension.getRefinedBy().addAll(getAllContainedDifferences(refiningDiff));
}",0.95
93611,"/** 
 * Get all the add and delete changes under the given match.
 * @param comparison The comparison.
 * @param match The match
 * @return The found differences.
 */
private Set<Diff> getAllContainedDifferences(Comparison comparison,Match match){
  final Set<Diff> result=Sets.newLinkedHashSet();
  final Set<Match> prune=Sets.newLinkedHashSet();
  for (  Diff candidate : match.getDifferences()) {
    if (!getExtensionKind().isInstance(candidate)) {
      if (!isAMainRefiningDifference(candidate)) {
        result.add(candidate);
      }
 else       if (candidate instanceof ReferenceChange && ((ReferenceChange)candidate).getReference().isContainment()) {
        prune.add(comparison.getMatch(((ReferenceChange)candidate).getValue()));
      }
    }
  }
  for (  Match submatch : match.getSubmatches()) {
    if (!prune.contains(submatch)) {
      result.addAll(getAllContainedDifferences(comparison,submatch));
    }
  }
  return result;
}","/** 
 * Get all the add and delete changes under the given match.
 * @param comparison The comparison.
 * @param match The match
 * @return The found differences.
 */
private Set<Diff> getAllContainedDifferences(Comparison comparison,Match match){
  final Set<Diff> result=Sets.newLinkedHashSet();
  final Set<Match> prune=Sets.newLinkedHashSet();
  for (  Diff candidate : match.getDifferences()) {
    if (!getExtensionKind().isInstance(candidate)) {
      if (getRelatedExtensionKind(candidate) == null) {
        result.add(candidate);
      }
 else       if (candidate instanceof ReferenceChange && ((ReferenceChange)candidate).getReference().isContainment()) {
        prune.add(comparison.getMatch(((ReferenceChange)candidate).getValue()));
      }
    }
  }
  for (  Match submatch : match.getSubmatches()) {
    if (!prune.contains(submatch)) {
      result.addAll(getAllContainedDifferences(comparison,submatch));
    }
  }
  return result;
}",0.9605055292259084
93612,"@Override public Boolean defaultCase(EObject object){
  return Boolean.FALSE;
}","@Override public EObject defaultCase(EObject object){
  return null;
}",0.8187919463087249
93613,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.provider.ForwardingItemProvider#getChildren(java.lang.Object)
 */
@Override public Collection<?> getChildren(Object object){
  final Collection<Object> ret=new ArrayList<Object>();
  Match match=null;
  if (isCandidateToAddChildren(object)) {
    DiagramDiff diagramDiff=(DiagramDiff)object;
    EObject view=diagramDiff.getView();
    Comparison comparison=diagramDiff.getMatch().getComparison();
    match=comparison.getMatch(view);
    ret.addAll(match.getSubmatches());
    ITreeItemContentProvider contentProvider=(ITreeItemContentProvider)getRootAdapterFactory().adapt(match,ITreeItemContentProvider.class);
    if (contentProvider != null) {
      ret.addAll(contentProvider.getChildren(match));
    }
  }
  return ret;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.provider.ForwardingItemProvider#getChildren(java.lang.Object)
 */
@Override public Collection<?> getChildren(Object object){
  final Collection<Object> ret=new ArrayList<Object>();
  Match match=null;
  if (isCandidateToAddChildren(object)) {
    DiagramDiff diagramDiff=(DiagramDiff)object;
    EObject view=diagramDiff.getView();
    Comparison comparison=diagramDiff.getMatch().getComparison();
    match=comparison.getMatch(view);
    if (match != null) {
      ret.addAll(match.getSubmatches());
      ITreeItemContentProvider contentProvider=(ITreeItemContentProvider)getRootAdapterFactory().adapt(match,ITreeItemContentProvider.class);
      if (contentProvider != null) {
        ret.addAll(contentProvider.getChildren(match));
      }
    }
  }
  return ret;
}",0.974454828660436
93614,"public boolean apply(EObject input){
  boolean ret=false;
  if (input instanceof Diff) {
    final Diff diff=(Diff)input;
    final Conflict conflict=diff.getConflict();
    if (conflict == null) {
      final EObject grandParent=diff.getMatch().eContainer();
      if (grandParent instanceof Match) {
        ImmutableSet<EObject> containementDifferenceValues=MatchItemProviderSpec.containmentReferencesValues((Match)grandParent);
        if (MatchItemProviderSpec.matchOfContainmentDiff(containementDifferenceValues).apply(diff.getMatch())) {
          ret=true;
        }
      }
    }
  }
  return ret;
}","public boolean apply(EObject input){
  boolean ret=false;
  if (input instanceof Diff && !(input instanceof ResourceAttachmentChange)) {
    final Diff diff=(Diff)input;
    final Conflict conflict=diff.getConflict();
    if (conflict == null) {
      final EObject grandParent=diff.getMatch().eContainer();
      if (grandParent instanceof Match) {
        ImmutableSet<EObject> containementDifferenceValues=MatchItemProviderSpec.containmentReferencesValues((Match)grandParent);
        if (MatchItemProviderSpec.matchOfContainmentDiff(containementDifferenceValues).apply(diff.getMatch())) {
          ret=true;
        }
      }
    }
  }
  return ret;
}",0.9620253164556962
93615,"/** 
 * Create all of our filtering actions into the given menu.
 * @param scope The scope on which the filters will be applied.
 * @param comparison The comparison on which the filters will be applied.
 */
public void createActions(IComparisonScope scope,Comparison comparison){
  IDifferenceFilter.Registry registry=EMFCompareRCPUIPlugin.getDefault().getFilterActionRegistry();
  for (  IDifferenceFilter filterProvider : registry.getFilters(scope,comparison)) {
    FilterAction action=new FilterAction(filterProvider.getLabel(),structureMergeViewerFilter,filterProvider);
    if (filterProvider.defaultSelected()) {
      action.setChecked(true);
      action.run();
    }
    menuManager.add(action);
  }
}","/** 
 * Create all of our filtering actions into the given menu.
 * @param scope The scope on which the filters will be applied.
 * @param comparison The comparison on which the filters will be applied.
 */
public void createActions(IComparisonScope scope,Comparison comparison){
  menuManager.removeAll();
  IDifferenceFilter.Registry registry=EMFCompareRCPUIPlugin.getDefault().getFilterActionRegistry();
  for (  IDifferenceFilter filterProvider : registry.getFilters(scope,comparison)) {
    FilterAction action=new FilterAction(filterProvider.getLabel(),structureMergeViewerFilter,filterProvider);
    if (filterProvider.defaultSelected()) {
      action.setChecked(true);
      action.run();
    }
    menuManager.add(action);
  }
}",0.9813664596273292
93616,"/** 
 * Create the grouping action in the given menu.
 * @param scope The scope on which the groups will be applied.
 * @param comparison The comparison which differences are to be split into groups.
 */
public void createActions(IComparisonScope scope,Comparison comparison){
  final IAction defaultAction=new GroupAction(defaultGroupProvider.getLabel(),structureMergeViewerGrouper,defaultGroupProvider);
  defaultAction.setChecked(true);
  menuManager.add(defaultAction);
  IDifferenceGroupProvider.Registry registry=EMFCompareRCPUIPlugin.getDefault().getDifferenceGroupProviderRegistry();
  boolean alreadyChecked=false;
  for (  IDifferenceGroupProvider dgp : registry.getGroupProviders(scope,comparison)) {
    GroupAction action=new GroupAction(dgp.getLabel(),structureMergeViewerGrouper,dgp);
    menuManager.add(action);
    if (dgp.defaultSelected() && !alreadyChecked) {
      defaultAction.setChecked(false);
      action.setChecked(true);
      alreadyChecked=true;
      action.run();
    }
  }
}","/** 
 * Create the grouping action in the given menu.
 * @param scope The scope on which the groups will be applied.
 * @param comparison The comparison which differences are to be split into groups.
 */
public void createActions(IComparisonScope scope,Comparison comparison){
  menuManager.removeAll();
  final IAction defaultAction=new GroupAction(defaultGroupProvider.getLabel(),structureMergeViewerGrouper,defaultGroupProvider);
  defaultAction.setChecked(true);
  menuManager.add(defaultAction);
  IDifferenceGroupProvider.Registry registry=EMFCompareRCPUIPlugin.getDefault().getDifferenceGroupProviderRegistry();
  boolean alreadyChecked=false;
  for (  IDifferenceGroupProvider dgp : registry.getGroupProviders(scope,comparison)) {
    GroupAction action=new GroupAction(dgp.getLabel(),structureMergeViewerGrouper,dgp);
    menuManager.add(action);
    if (dgp.defaultSelected() && !alreadyChecked) {
      defaultAction.setChecked(false);
      action.setChecked(true);
      alreadyChecked=true;
      action.run();
    }
  }
}",0.98679706601467
93617,"protected int findInsertionIndex(Diff diff,boolean rightToLeft){
  final Match valueMatch=diff.getMatch();
  final Comparison comparison=valueMatch.getComparison();
  final EObject expectedValue;
  if (valueMatch.getLeft() != null) {
    expectedValue=valueMatch.getLeft();
  }
 else {
    expectedValue=valueMatch.getRight();
  }
  final Resource initialResource;
  final Resource expectedResource;
  if (rightToLeft) {
    initialResource=getResource(MergeViewerSide.RIGHT);
    expectedResource=getResource(MergeViewerSide.LEFT);
  }
 else {
    initialResource=getResource(MergeViewerSide.LEFT);
    expectedResource=getResource(MergeViewerSide.RIGHT);
  }
  final List<EObject> sourceList=initialResource.getContents();
  final List<EObject> targetList=expectedResource.getContents();
  return DiffUtil.findInsertionIndex(comparison,sourceList,targetList,expectedValue);
}","protected int findInsertionIndex(Diff diff,boolean rightToLeft){
  final Match valueMatch=diff.getMatch();
  final Comparison comparison=valueMatch.getComparison();
  final EObject expectedValue;
  if (valueMatch.getLeft() != null) {
    expectedValue=valueMatch.getLeft();
  }
 else {
    expectedValue=valueMatch.getRight();
  }
  final Resource initialResource;
  final Resource expectedResource;
  if (rightToLeft) {
    initialResource=getResource(MergeViewerSide.RIGHT);
    expectedResource=getResource(MergeViewerSide.LEFT);
  }
 else {
    initialResource=getResource(MergeViewerSide.LEFT);
    expectedResource=getResource(MergeViewerSide.RIGHT);
  }
  if (expectedResource != null) {
    final List<EObject> sourceList=initialResource.getContents();
    final List<EObject> targetList=expectedResource.getContents();
    return DiffUtil.findInsertionIndex(comparison,sourceList,targetList,expectedValue);
  }
 else {
    return 0;
  }
}",0.961622807017544
93618,"/** 
 * Create all of our filtering actions into the given menu.
 * @param scope The scope on which the filters will be applied.
 * @param comparison The comparison on which the filters will be applied.
 */
public void createActions(IComparisonScope scope,Comparison comparison){
  menuManager.removeAll();
  IDifferenceFilter.Registry registry=EMFCompareRCPUIPlugin.getDefault().getFilterActionRegistry();
  for (  IDifferenceFilter filterProvider : registry.getFilters(scope,comparison)) {
    FilterAction action=new FilterAction(filterProvider.getLabel(),structureMergeViewerFilter,filterProvider);
    if (filterProvider.defaultSelected()) {
      action.setChecked(true);
      action.run();
    }
    menuManager.add(action);
  }
}","/** 
 * Create all of our filtering actions into the given menu.
 * @param scope The scope on which the filters will be applied.
 * @param comparison The comparison on which the filters will be applied.
 */
public void createActions(IComparisonScope scope,Comparison comparison){
  if (menuManager.isEmpty()) {
    IDifferenceFilter.Registry registry=EMFCompareRCPUIPlugin.getDefault().getFilterActionRegistry();
    for (    IDifferenceFilter filterProvider : registry.getFilters(scope,comparison)) {
      FilterAction action=new FilterAction(filterProvider.getLabel(),structureMergeViewerFilter,filterProvider);
      if (filterProvider.defaultSelected()) {
        action.setChecked(true);
        action.run();
      }
      menuManager.add(action);
    }
  }
}",0.9574468085106383
93619,"/** 
 * Create the grouping action in the given menu.
 * @param scope The scope on which the groups will be applied.
 * @param comparison The comparison which differences are to be split into groups.
 */
public void createActions(IComparisonScope scope,Comparison comparison){
  menuManager.removeAll();
  final IAction defaultAction=new GroupAction(defaultGroupProvider.getLabel(),structureMergeViewerGrouper,defaultGroupProvider);
  defaultAction.setChecked(true);
  menuManager.add(defaultAction);
  IDifferenceGroupProvider.Registry registry=EMFCompareRCPUIPlugin.getDefault().getDifferenceGroupProviderRegistry();
  boolean alreadyChecked=false;
  for (  IDifferenceGroupProvider dgp : registry.getGroupProviders(scope,comparison)) {
    GroupAction action=new GroupAction(dgp.getLabel(),structureMergeViewerGrouper,dgp);
    menuManager.add(action);
    if (dgp.defaultSelected() && !alreadyChecked) {
      defaultAction.setChecked(false);
      action.setChecked(true);
      alreadyChecked=true;
      action.run();
    }
  }
}","/** 
 * Create the grouping action in the given menu.
 * @param scope The scope on which the groups will be applied.
 * @param comparison The comparison which differences are to be split into groups.
 */
public void createActions(IComparisonScope scope,Comparison comparison){
  if (menuManager.isEmpty()) {
    final IAction defaultAction=new GroupAction(defaultGroupProvider.getLabel(),structureMergeViewerGrouper,defaultGroupProvider);
    defaultAction.setChecked(true);
    menuManager.add(defaultAction);
    IDifferenceGroupProvider.Registry registry=EMFCompareRCPUIPlugin.getDefault().getDifferenceGroupProviderRegistry();
    boolean alreadyChecked=false;
    for (    IDifferenceGroupProvider dgp : registry.getGroupProviders(scope,comparison)) {
      GroupAction action=new GroupAction(dgp.getLabel(),structureMergeViewerGrouper,dgp);
      menuManager.add(action);
      if (dgp.defaultSelected() && !alreadyChecked) {
        defaultAction.setChecked(false);
        action.setChecked(true);
        alreadyChecked=true;
        action.run();
      }
    }
  }
}",0.9640151515151516
93620,"public boolean apply(EObject input){
  boolean ret=false;
  if (input instanceof Diff) {
    final Diff diff=(Diff)input;
    final Conflict conflict=diff.getConflict();
    if (conflict == null) {
      final EObject grandParent=diff.getMatch().eContainer();
      if (grandParent instanceof Match) {
        ImmutableSet<EObject> containementDifferenceValues=MatchItemProviderSpec.containmentReferencesValues((Match)grandParent);
        if (MatchItemProviderSpec.matchOfContainmentDiff(containementDifferenceValues).apply(diff.getMatch())) {
          ret=true;
        }
      }
    }
  }
  return ret;
}","public boolean apply(EObject input){
  boolean ret=false;
  if (input instanceof Diff && !(input instanceof ResourceAttachmentChange)) {
    final Diff diff=(Diff)input;
    final Conflict conflict=diff.getConflict();
    if (conflict == null) {
      final EObject grandParent=diff.getMatch().eContainer();
      if (grandParent instanceof Match) {
        ImmutableSet<EObject> containementDifferenceValues=MatchItemProviderSpec.containmentReferencesValues((Match)grandParent);
        if (MatchItemProviderSpec.matchOfContainmentDiff(containementDifferenceValues).apply(diff.getMatch())) {
          ret=true;
        }
      }
    }
  }
  return ret;
}",0.9620253164556962
93621,"/** 
 * {@inheritDoc}
 * @see org.eclipse.jface.action.Action#run()
 */
@Override public void run(){
  Shell parent=configuration.getContainer().getWorkbenchPart().getSite().getShell();
  FileDialog fileDialog=new FileDialog(parent,SWT.SAVE);
  File file=new File(fileDialog.open());
  if (file.exists()) {
    MessageDialog messageDialog=new MessageDialog(parent,""String_Node_Str"",null,""String_Node_Str"" + file.toString() + ""String_Node_Str"",MessageDialog.WARNING,DIALOG_BUTTON_LABELS.toArray(new String[0]),1);
    int open=messageDialog.open();
    if (open == DIALOG_BUTTON_LABELS.indexOf(""String_Node_Str"")) {
      saveComparison(file);
    }
  }
 else {
    saveComparison(file);
  }
  super.run();
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.jface.action.Action#run()
 */
@Override public void run(){
  Shell parent=configuration.getContainer().getWorkbenchPart().getSite().getShell();
  FileDialog fileDialog=new FileDialog(parent,SWT.SAVE);
  String filePath=fileDialog.open();
  if (filePath != null) {
    File file=new File(filePath);
    if (file.exists()) {
      MessageDialog messageDialog=new MessageDialog(parent,""String_Node_Str"",null,""String_Node_Str"" + file.toString() + ""String_Node_Str"",MessageDialog.WARNING,DIALOG_BUTTON_LABELS.toArray(new String[0]),1);
      int open=messageDialog.open();
      if (open == DIALOG_BUTTON_LABELS.indexOf(""String_Node_Str"")) {
        saveComparison(file);
      }
    }
 else {
      saveComparison(file);
    }
  }
  super.run();
}",0.9262734584450402
93622,"/** 
 * return the closest EObject of the passed one found in the sideToFind storage.
 * @param inProgress the comparison under match.
 * @param eObj the base EObject.
 * @param originalSide the side of the base EObject.
 * @param sideToFind the side to search in.
 * @param shouldDoubleCheck true if we should make sure that the found EObject has the inverse relationship with the base one.
 * @return the closest EObject of the passed one found in the sideToFind storage.
 */
private EObject findTheClosest(Comparison inProgress,final EObject eObj,final Side originalSide,final Side sideToFind,boolean shouldDoubleCheck){
  List<EObject> storageToSearchFor=lefts;
switch (sideToFind) {
case RIGHT:
    storageToSearchFor=rights;
  break;
case LEFT:
storageToSearchFor=lefts;
break;
case ORIGIN:
storageToSearchFor=origins;
break;
default :
break;
}
Candidate best=findIdenticMatch(inProgress,eObj,storageToSearchFor);
if (best.some()) {
return best.eObject;
}
SortedMap<Double,EObject> candidates=Maps.newTreeMap();
Iterator<EObject> it=storageToSearchFor.iterator();
while (best.distance != 0 && it.hasNext()) {
EObject potentialClosest=it.next();
double dist=meter.distance(inProgress,eObj,potentialClosest);
stats.similarityCompare();
if (dist < best.distance) {
if (shouldDoubleCheck) {
candidates.put(Double.valueOf(dist),potentialClosest);
}
 else {
best.distance=dist;
best.eObject=potentialClosest;
}
}
}
if (shouldDoubleCheck) {
for (Entry<Double,EObject> entry : candidates.entrySet()) {
EObject doubleCheck=findTheClosest(inProgress,entry.getValue(),sideToFind,originalSide,false);
stats.doubleCheck();
if (doubleCheck == eObj) {
stats.similaritySuccess();
best.eObject=entry.getValue();
best.distance=Double.valueOf(entry.getKey());
break;
}
 else {
stats.failedDoubleCheck();
}
}
}
if (!best.some()) {
stats.noMatch();
}
return best.eObject;
}","/** 
 * return the closest EObject of the passed one found in the sideToFind storage.
 * @param inProgress the comparison under match.
 * @param eObj the base EObject.
 * @param originalSide the side of the base EObject.
 * @param sideToFind the side to search in.
 * @param shouldDoubleCheck true if we should make sure that the found EObject has the inverse relationship with the base one.
 * @return the closest EObject of the passed one found in the sideToFind storage.
 */
private EObject findTheClosest(Comparison inProgress,final EObject eObj,final Side originalSide,final Side sideToFind,boolean shouldDoubleCheck){
  List<EObject> storageToSearchFor=lefts;
switch (sideToFind) {
case RIGHT:
    storageToSearchFor=rights;
  break;
case LEFT:
storageToSearchFor=lefts;
break;
case ORIGIN:
storageToSearchFor=origins;
break;
default :
break;
}
Candidate best=findIdenticMatch(inProgress,eObj,storageToSearchFor);
if (best.some()) {
return best.eObject;
}
SortedMap<Double,EObject> candidates=Maps.newTreeMap();
Iterator<EObject> it=storageToSearchFor.iterator();
while (best.distance != 0 && it.hasNext()) {
EObject potentialClosest=it.next();
double dist=meter.distance(inProgress,eObj,potentialClosest);
stats.similarityCompare();
if (dist < best.distance) {
if (shouldDoubleCheck) {
candidates.put(Double.valueOf(dist),potentialClosest);
}
 else {
best.distance=dist;
best.eObject=potentialClosest;
}
}
}
if (shouldDoubleCheck) {
for (Entry<Double,EObject> entry : candidates.entrySet()) {
EObject doubleCheck=findTheClosest(inProgress,entry.getValue(),sideToFind,originalSide,false);
stats.doubleCheck();
if (doubleCheck == eObj) {
stats.similaritySuccess();
best.eObject=entry.getValue();
best.distance=entry.getKey().doubleValue();
break;
}
 else {
stats.failedDoubleCheck();
}
}
}
if (!best.some()) {
stats.noMatch();
}
return best.eObject;
}",0.9380721593968768
93623,"/** 
 * Check whether we have all the required information to search for this object matches.
 * @param inProgress the Comparison which is being matched.
 * @param fastCheck the Object we are trying to match.
 * @return true if we have all the required information, false otherwise.
 */
private boolean readyForThisTest(Comparison inProgress,EObject fastCheck){
  if (fastCheck.eContainer() != null) {
    return inProgress.getMatch(fastCheck.eContainer()) != null || scope.isInScope(fastCheck.eContainer());
  }
  return true;
}","/** 
 * Check whether we have all the required information to search for this object matches.
 * @param inProgress the Comparison which is being matched.
 * @param fastCheck the Object we are trying to match.
 * @return true if we have all the required information, false otherwise.
 */
private boolean readyForThisTest(Comparison inProgress,EObject fastCheck){
  if (fastCheck.eContainer() != null && scope.isInScope(fastCheck.eContainer())) {
    return inProgress.getMatch(fastCheck.eContainer()) != null;
  }
  return true;
}",0.9187145557655956
93624,"/** 
 * Look for a perfect match (identic content) in the given list of candidates.
 * @param inProgress the comparison being matched.
 * @param eObj the object
 * @param candidates the list of possible matches.
 * @return a candidate instance wrapping the found match Object (if found)
 */
private Candidate findIdenticMatch(Comparison inProgress,final EObject eObj,List<EObject> candidates){
  Iterator<EObject> it=candidates.iterator();
  Candidate best=new Candidate();
  while (it.hasNext() && !best.some()) {
    EObject fastCheck=it.next();
    if (!readyForThisTest(inProgress,fastCheck)) {
      stats.backtrack();
      best.eObject=BACKTRACK;
    }
 else {
      stats.identicCompare();
      if (meter.areIdentic(inProgress,eObj,fastCheck)) {
        stats.identicSuccess();
        best.eObject=fastCheck;
        best.distance=0;
      }
    }
  }
  return best;
}","/** 
 * Look for a perfect match (identic content) in the given list of candidates.
 * @param inProgress the comparison being matched.
 * @param eObj the object
 * @param candidates the list of possible matches.
 * @return a candidate instance wrapping the found match Object (if found)
 */
private Candidate findIdenticMatch(Comparison inProgress,final EObject eObj,List<EObject> candidates){
  Iterator<EObject> it=candidates.iterator();
  Candidate best=new Candidate();
  while (it.hasNext() && !best.some()) {
    EObject fastCheck=it.next();
    if (!readyForThisTest(inProgress,fastCheck)) {
      stats.backtrack();
    }
 else {
      stats.identicCompare();
      if (meter.areIdentic(inProgress,eObj,fastCheck)) {
        stats.identicSuccess();
        best.eObject=fastCheck;
        best.distance=0;
      }
    }
  }
  return best;
}",0.9826187717265352
93625,"/** 
 * {@inheritDoc}
 * @see org.eclipse.jface.action.Action#run()
 */
@Override public void run(){
  Shell parent=configuration.getContainer().getWorkbenchPart().getSite().getShell();
  FileDialog fileDialog=new FileDialog(parent,SWT.SAVE);
  File file=new File(fileDialog.open());
  if (file.exists()) {
    MessageDialog messageDialog=new MessageDialog(parent,""String_Node_Str"",null,""String_Node_Str"" + file.toString() + ""String_Node_Str"",MessageDialog.WARNING,DIALOG_BUTTON_LABELS.toArray(new String[0]),1);
    int open=messageDialog.open();
    if (open == DIALOG_BUTTON_LABELS.indexOf(""String_Node_Str"")) {
      saveComparison(file);
    }
  }
 else {
    saveComparison(file);
  }
  super.run();
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.jface.action.Action#run()
 */
@Override public void run(){
  Shell parent=configuration.getContainer().getWorkbenchPart().getSite().getShell();
  FileDialog fileDialog=new FileDialog(parent,SWT.SAVE);
  String filePath=fileDialog.open();
  if (filePath != null) {
    File file=new File(filePath);
    if (file.exists()) {
      MessageDialog messageDialog=new MessageDialog(parent,""String_Node_Str"",null,""String_Node_Str"" + file.toString() + ""String_Node_Str"",MessageDialog.WARNING,DIALOG_BUTTON_LABELS.toArray(new String[0]),1);
      int open=messageDialog.open();
      if (open == DIALOG_BUTTON_LABELS.indexOf(""String_Node_Str"")) {
        saveComparison(file);
      }
    }
 else {
      saveComparison(file);
    }
  }
  super.run();
}",0.9262734584450402
93626,"/** 
 * {@inheritDoc}
 */
public void createMatches(Comparison comparison,Iterator<? extends EObject> leftEObjects,Iterator<? extends EObject> rightEObjects,Iterator<? extends EObject> originEObjects,Monitor monitor){
  Delegating subMonitor=new BasicMonitor.Delegating(monitor);
  subMonitor.beginTask(""String_Node_Str"",1);
  int nbElements=0;
  while (leftEObjects.hasNext() || rightEObjects.hasNext() || leftEObjects.hasNext()) {
    if (leftEObjects.hasNext()) {
      EObject next=leftEObjects.next();
      nbElements++;
      index.index(next,Side.LEFT);
      eObjectsToSide.put(next,Side.LEFT);
    }
    if (rightEObjects.hasNext()) {
      EObject next=rightEObjects.next();
      nbElements++;
      index.index(next,Side.RIGHT);
      eObjectsToSide.put(next,Side.RIGHT);
    }
    if (originEObjects.hasNext()) {
      EObject next=originEObjects.next();
      nbElements++;
      index.index(next,Side.ORIGIN);
      eObjectsToSide.put(next,Side.ORIGIN);
    }
  }
  subMonitor.worked(1);
  subMonitor.done();
  subMonitor=new BasicMonitor.Delegating(monitor);
  subMonitor.beginTask(""String_Node_Str"",nbElements);
  Iterator<EObject> todo=index.getValuesStillThere(Side.LEFT).iterator();
  while (todo.hasNext()) {
    Iterator<EObject> remainingResult=matchList(comparison,todo,subMonitor).iterator();
    todo=remainingResult;
  }
  todo=index.getValuesStillThere(Side.RIGHT).iterator();
  while (todo.hasNext()) {
    Iterator<EObject> remainingResult=matchList(comparison,todo,subMonitor).iterator();
    todo=remainingResult;
  }
  for (  EObject notFound : index.getValuesStillThere(Side.RIGHT)) {
    areMatching(comparison,null,notFound,null);
  }
  for (  EObject notFound : index.getValuesStillThere(Side.LEFT)) {
    areMatching(comparison,notFound,null,null);
  }
  for (  EObject notFound : index.getValuesStillThere(Side.ORIGIN)) {
    areMatching(comparison,null,null,notFound);
  }
  subMonitor.done();
  restructureMatchModel(comparison);
}","/** 
 * {@inheritDoc}
 */
public void createMatches(Comparison comparison,Iterator<? extends EObject> leftEObjects,Iterator<? extends EObject> rightEObjects,Iterator<? extends EObject> originEObjects,Monitor monitor){
  Monitor subMonitor=new BasicMonitor();
  subMonitor.beginTask(""String_Node_Str"",1);
  int nbElements=0;
  while (leftEObjects.hasNext() || rightEObjects.hasNext() || leftEObjects.hasNext()) {
    if (leftEObjects.hasNext()) {
      EObject next=leftEObjects.next();
      nbElements++;
      index.index(next,Side.LEFT);
      eObjectsToSide.put(next,Side.LEFT);
    }
    if (rightEObjects.hasNext()) {
      EObject next=rightEObjects.next();
      nbElements++;
      index.index(next,Side.RIGHT);
      eObjectsToSide.put(next,Side.RIGHT);
    }
    if (originEObjects.hasNext()) {
      EObject next=originEObjects.next();
      nbElements++;
      index.index(next,Side.ORIGIN);
      eObjectsToSide.put(next,Side.ORIGIN);
    }
  }
  subMonitor.worked(1);
  subMonitor.done();
  subMonitor=new BasicMonitor();
  subMonitor.beginTask(""String_Node_Str"",nbElements);
  Iterator<EObject> todo=index.getValuesStillThere(Side.LEFT).iterator();
  while (todo.hasNext()) {
    Iterator<EObject> remainingResult=matchList(comparison,todo,subMonitor).iterator();
    todo=remainingResult;
  }
  todo=index.getValuesStillThere(Side.RIGHT).iterator();
  while (todo.hasNext()) {
    Iterator<EObject> remainingResult=matchList(comparison,todo,subMonitor).iterator();
    todo=remainingResult;
  }
  for (  EObject notFound : index.getValuesStillThere(Side.RIGHT)) {
    areMatching(comparison,null,notFound,null);
  }
  for (  EObject notFound : index.getValuesStillThere(Side.LEFT)) {
    areMatching(comparison,notFound,null,null);
  }
  for (  EObject notFound : index.getValuesStillThere(Side.ORIGIN)) {
    areMatching(comparison,null,null,notFound);
  }
  subMonitor.done();
  restructureMatchModel(comparison);
}",0.9833631942667008
93627,"/** 
 * {@inheritDoc}
 * @see org.eclipse.compare.structuremergeviewer.ICompareInput#getAncestor()
 */
public ITypedElement getAncestor(){
  IAccessorFactory accessorFactory=getAccessorFactoryForTarget();
  if (accessorFactory != null) {
    return AccessorAdapter.adapt(accessorFactory.createAncestor(getAdapterFactory(),getTarget()));
  }
  return null;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.compare.structuremergeviewer.ICompareInput#getAncestor()
 */
public ITypedElement getAncestor(){
  final ITypedElement ret;
  IAccessorFactory accessorFactory=getAccessorFactoryForTarget();
  if (accessorFactory != null) {
    org.eclipse.emf.compare.rcp.ui.internal.contentmergeviewer.accessor.legacy.ITypedElement typedElement=accessorFactory.createAncestor(getAdapterFactory(),getTarget());
    if (typedElement != null) {
      ret=AccessorAdapter.adapt(typedElement);
    }
 else {
      ret=null;
    }
  }
 else {
    ret=null;
  }
  return ret;
}",0.5414480587618048
93628,"/** 
 * {@inheritDoc}
 * @see org.eclipse.compare.structuremergeviewer.ICompareInput#getRight()
 */
public ITypedElement getRight(){
  IAccessorFactory accessorFactory=getAccessorFactoryForTarget();
  if (accessorFactory != null) {
    return AccessorAdapter.adapt(accessorFactory.createRight(getAdapterFactory(),getTarget()));
  }
  return null;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.compare.structuremergeviewer.ICompareInput#getRight()
 */
public ITypedElement getRight(){
  final ITypedElement ret;
  IAccessorFactory accessorFactory=getAccessorFactoryForTarget();
  if (accessorFactory != null) {
    org.eclipse.emf.compare.rcp.ui.internal.contentmergeviewer.accessor.legacy.ITypedElement typedElement=accessorFactory.createRight(getAdapterFactory(),getTarget());
    if (typedElement != null) {
      ret=AccessorAdapter.adapt(typedElement);
    }
 else {
      ret=null;
    }
  }
 else {
    ret=null;
  }
  return ret;
}",0.5368983957219251
93629,"/** 
 * {@inheritDoc}
 * @see org.eclipse.compare.structuremergeviewer.ICompareInput#getLeft()
 */
public ITypedElement getLeft(){
  IAccessorFactory accessorFactory=getAccessorFactoryForTarget();
  if (accessorFactory != null) {
    return AccessorAdapter.adapt(accessorFactory.createLeft(getAdapterFactory(),getTarget()));
  }
  return null;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.compare.structuremergeviewer.ICompareInput#getLeft()
 */
public ITypedElement getLeft(){
  final ITypedElement ret;
  IAccessorFactory accessorFactory=getAccessorFactoryForTarget();
  if (accessorFactory != null) {
    org.eclipse.emf.compare.rcp.ui.internal.contentmergeviewer.accessor.legacy.ITypedElement typedElement=accessorFactory.createLeft(getAdapterFactory(),getTarget());
    if (typedElement != null) {
      ret=AccessorAdapter.adapt(typedElement);
    }
 else {
      ret=null;
    }
  }
 else {
    ret=null;
  }
  return ret;
}",0.5360602798708288
93630,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.diagram.ide.ui.internal.contentmergeviewer.diagram.DiagramContentMergeViewer.AbstractDecoratorManager#getReferenceViews(org.eclipse.emf.compare.diagram.DiagramDiff)
 */
@Override protected List<View> getReferenceViews(DiagramDiff difference){
  List<View> result=new ArrayList<View>();
  Match matchValue=getComparison().getMatch(difference.getView());
  if (matchValue.getLeft() != null) {
    result.add((View)matchValue.getLeft());
  }
  if (matchValue.getRight() != null) {
    result.add((View)matchValue.getRight());
  }
  if (getComparison().isThreeWay()) {
switch (difference.getKind()) {
case DELETE:
case CHANGE:
case MOVE:
      result.add((View)matchValue.getOrigin());
    break;
default :
  break;
}
}
return result;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.diagram.ide.ui.internal.contentmergeviewer.diagram.DiagramContentMergeViewer.AbstractDecoratorManager#getReferenceViews(org.eclipse.emf.compare.diagram.DiagramDiff)
 */
@Override protected List<View> getReferenceViews(DiagramDiff difference){
  List<View> result=new ArrayList<View>();
  Match matchValue=getComparison().getMatch(difference.getView());
  if (matchValue != null) {
    if (matchValue.getLeft() != null) {
      result.add((View)matchValue.getLeft());
    }
    if (matchValue.getRight() != null) {
      result.add((View)matchValue.getRight());
    }
    if (getComparison().isThreeWay()) {
switch (difference.getKind()) {
case DELETE:
case CHANGE:
case MOVE:
        result.add((View)matchValue.getOrigin());
      break;
default :
    break;
}
}
}
return result;
}",0.872996300863132
93631,"/** 
 * From the given view, get or create the related phantoms.
 * @param referenceView The given view.
 * @return The list of phantoms.
 */
private List<Phantom> getOrCreateRelatedDecorators(EObject referenceView){
  List<Phantom> result=new ArrayList<Phantom>();
  Collection<Diff> changes=Collections2.filter(getComparison().getDifferences(referenceView),goodCandidate());
  for (  Diff change : changes) {
    Phantom phantom=fPhantomRegistry.get(change);
    if (phantom == null) {
      phantom=createAndRegisterDecorator(change,(View)referenceView,PhantomManager.this.getFigure((View)referenceView),fSide);
    }
    result.add(phantom);
  }
  return result;
}","/** 
 * From the given view, get or create the related phantoms.
 * @param referenceView The given view.
 * @return The list of phantoms.
 */
private List<Phantom> getOrCreateRelatedDecorators(EObject referenceView){
  List<Phantom> result=new ArrayList<Phantom>();
  Collection<Diff> changes=Collections2.filter(getComparison().getDifferences(referenceView),goodCandidate());
  for (  Diff change : changes) {
    Phantom phantom=fPhantomRegistry.get(change);
    if (phantom == null) {
      IFigure referenceFigure=PhantomManager.this.getFigure((View)referenceView);
      if (referenceFigure != null) {
        phantom=createAndRegisterDecorator(change,(View)referenceView,referenceFigure,fSide);
      }
    }
    if (phantom != null) {
      result.add(phantom);
    }
  }
  return result;
}",0.851877133105802
93632,"/** 
 * Get the figure related to the given view.
 * @param view The view.
 * @return the figure.
 */
protected IFigure getFigure(View view){
  MergeViewerSide side=getSide(view);
  GraphicalEditPart originEditPart=(GraphicalEditPart)getViewer(side).getEditPart(view);
  return originEditPart.getFigure();
}","/** 
 * Get the figure related to the given view.
 * @param view The view.
 * @return the figure.
 */
protected IFigure getFigure(View view){
  MergeViewerSide side=getSide(view);
  GraphicalEditPart originEditPart=(GraphicalEditPart)getViewer(side).getEditPart(view);
  if (originEditPart != null) {
    return originEditPart.getFigure();
  }
  return null;
}",0.9205397301349324
93633,"/** 
 * It translates and resizes the figure of the given phantom when this one is nested in a container which is subjected to a coordinates change.
 * @param phantom The phantom.
 */
private void translateWhenInsideContainerChange(Phantom phantom){
  Collection<Diff> changes=Collections2.filter(phantom.getDifference().getMatch().getDifferences(),new Predicate<Diff>(){
    public boolean apply(    Diff difference){
      return difference.getKind() == DifferenceKind.MOVE;
    }
  }
);
  if (changes.size() > 0) {
    View referenceView=phantom.getOriginView();
    View parentReferenceView=(View)referenceView.eContainer();
    if (parentReferenceView != null) {
      View parentView=(View)getMatchView(parentReferenceView,phantom.getSide());
      IFigure parentFigure=getFigure(parentView);
      Rectangle parentRect=parentFigure.getBounds().getCopy();
      translateCoordinates(parentFigure,getLayer(parentReferenceView,getSide(parentView)),parentRect);
      IFigure parentReferenceFigure=getFigure(parentReferenceView);
      Rectangle parentReferenceRect=parentReferenceFigure.getBounds().getCopy();
      translateCoordinates(parentReferenceFigure,getLayer(parentReferenceView,getSide(parentReferenceView)),parentReferenceRect);
      int deltaX=parentRect.x - parentReferenceRect.x;
      int deltaY=parentRect.y - parentReferenceRect.y;
      int deltaWidth=parentRect.width - parentReferenceRect.width;
      int deltaHeight=parentRect.height - parentReferenceRect.height;
      IFigure figure=phantom.getFigure();
      Rectangle rect=figure.getBounds().getCopy();
      rect.x+=deltaX;
      rect.y+=deltaY;
      rect.width+=deltaWidth;
      if (!(figure instanceof Polyline)) {
        rect.height+=deltaHeight;
      }
      figure.setBounds(rect);
      if (figure instanceof Polyline) {
        Point firstPoint=((Polyline)figure).getPoints().getFirstPoint().getCopy();
        Point lastPoint=((Polyline)figure).getPoints().getLastPoint().getCopy();
        firstPoint.x+=deltaX;
        firstPoint.y+=deltaY;
        lastPoint.x+=deltaX + deltaWidth;
        lastPoint.y+=deltaY;
        ((Polyline)figure).setEndpoints(firstPoint,lastPoint);
      }
    }
  }
}","/** 
 * It translates and resizes the figure of the given phantom when this one is nested in a container which is subjected to a coordinates change.
 * @param phantom The phantom.
 */
private void translateWhenInsideContainerChange(Phantom phantom){
  Collection<Diff> changes=Collections2.filter(getDiffAncestors(phantom.getDifference()),new Predicate<Diff>(){
    public boolean apply(    Diff difference){
      return difference.getKind() == DifferenceKind.MOVE;
    }
  }
);
  if (changes.size() > 0) {
    View referenceView=phantom.getOriginView();
    View parentReferenceView=(View)referenceView.eContainer();
    if (parentReferenceView != null) {
      View parentView=(View)getMatchView(parentReferenceView,phantom.getSide());
      IFigure parentFigure=getFigure(parentView);
      if (parentFigure != null) {
        Rectangle parentRect=parentFigure.getBounds().getCopy();
        translateCoordinates(parentFigure,getLayer(parentReferenceView,getSide(parentView)),parentRect);
        IFigure parentReferenceFigure=getFigure(parentReferenceView);
        if (parentReferenceFigure != null) {
          Rectangle parentReferenceRect=parentReferenceFigure.getBounds().getCopy();
          translateCoordinates(parentReferenceFigure,getLayer(parentReferenceView,getSide(parentReferenceView)),parentReferenceRect);
          int deltaX=parentRect.x - parentReferenceRect.x;
          int deltaY=parentRect.y - parentReferenceRect.y;
          int deltaWidth=parentRect.width - parentReferenceRect.width;
          int deltaHeight=parentRect.height - parentReferenceRect.height;
          IFigure figure=phantom.getFigure();
          Rectangle rect=figure.getBounds().getCopy();
          rect.x+=deltaX;
          rect.y+=deltaY;
          rect.width+=deltaWidth;
          if (!(figure instanceof Polyline)) {
            rect.height+=deltaHeight;
          }
          figure.setBounds(rect);
          if (figure instanceof Polyline) {
            Point firstPoint=((Polyline)figure).getPoints().getFirstPoint().getCopy();
            Point lastPoint=((Polyline)figure).getPoints().getLastPoint().getCopy();
            firstPoint.x+=deltaX;
            firstPoint.y+=deltaY;
            lastPoint.x+=deltaX + deltaWidth;
            lastPoint.y+=deltaY;
            ((Polyline)figure).setEndpoints(firstPoint,lastPoint);
          }
        }
      }
    }
  }
}",0.9244911359159552
93634,"/** 
 * @param parent
 * @param configuration
 */
public EMFCompareStructureMergeViewer(Composite parent,CompareConfiguration configuration){
  super(parent,configuration);
  fAdapterFactory=new ComposedAdapterFactory(ComposedAdapterFactory.Descriptor.Registry.INSTANCE);
  fAdapterFactory.addAdapterFactory(new ReflectiveItemProviderAdapterFactory());
  fAdapterFactory.addAdapterFactory(new ResourceItemProviderAdapterFactory());
  setLabelProvider(new DelegatingStyledCellLabelProvider(new EMFCompareStructureMergeViewerLabelProvider(fAdapterFactory,this)));
  setContentProvider(new EMFCompareStructureMergeViewerContentProvider(fAdapterFactory,structureMergeViewerGrouper));
  if (parent instanceof CompareViewerSwitchingPane) {
    fParent=(CompareViewerSwitchingPane)parent;
  }
 else {
    fParent=null;
  }
  fCompareInputChangeListener=new ICompareInputChangeListener(){
    public void compareInputChanged(    ICompareInput input){
      EMFCompareStructureMergeViewer.this.compareInputChanged(input);
    }
  }
;
  setComparer(new DiffNodeComparer(super.getComparer()));
  if (eventBus == null) {
    eventBus=new EventBus();
    eventBus.register(this);
  }
}","/** 
 * @param parent
 * @param configuration
 */
public EMFCompareStructureMergeViewer(Composite parent,CompareConfiguration configuration){
  super(parent,configuration);
  fAdapterFactory=new ComposedAdapterFactory(ComposedAdapterFactory.Descriptor.Registry.INSTANCE);
  fAdapterFactory.addAdapterFactory(new ReflectiveItemProviderAdapterFactory());
  fAdapterFactory.addAdapterFactory(new ResourceItemProviderAdapterFactory());
  structureMergeViewerComparator=new EMFCompareStructureMergeViewerComparator();
  setLabelProvider(new DelegatingStyledCellLabelProvider(new EMFCompareStructureMergeViewerLabelProvider(fAdapterFactory,this)));
  setContentProvider(new EMFCompareStructureMergeViewerContentProvider(fAdapterFactory,structureMergeViewerGrouper));
  if (parent instanceof CompareViewerSwitchingPane) {
    fParent=(CompareViewerSwitchingPane)parent;
  }
 else {
    fParent=null;
  }
  fCompareInputChangeListener=new ICompareInputChangeListener(){
    public void compareInputChanged(    ICompareInput input){
      EMFCompareStructureMergeViewer.this.compareInputChanged(input);
    }
  }
;
  setComparer(new DiffNodeComparer(super.getComparer()));
  if (eventBus == null) {
    eventBus=new EventBus();
    eventBus.register(this);
  }
}",0.9220618556701032
93635,"/** 
 * {@inheritDoc}
 * @see org.eclipse.compare.contentmergeviewer.ContentMergeViewer#copy(boolean)
 */
@Override protected void copy(boolean leftToRight){
  EList<Diff> differences=getComparison().getDifferences();
  final Command copyCommand=getEditingDomain().createCopyAllNonConflictingCommand(differences,leftToRight);
  getEditingDomain().getCommandStack().execute(copyCommand);
  if (leftToRight) {
    setRightDirty(true);
  }
 else {
    setLeftDirty(true);
  }
  refresh();
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.compare.contentmergeviewer.ContentMergeViewer#copy(boolean)
 */
@Override protected void copy(boolean leftToRight){
  EList<Diff> differences=getComparison().getDifferences();
  final Command copyCommand=getEditingDomain().createCopyAllNonConflictingCommand(differences,leftToRight,EMFCompareIDEPlugin.getDefault().getMergerRegistry());
  getEditingDomain().getCommandStack().execute(copyCommand);
  if (leftToRight) {
    setRightDirty(true);
  }
 else {
    setLeftDirty(true);
  }
  refresh();
}",0.9483933787731256
93636,"/** 
 * @param style
 * @param bundle
 * @param cc
 */
protected EMFCompareContentMergeViewer(int style,ResourceBundle bundle,CompareConfiguration cc){
  super(style,bundle,cc);
  fDynamicObject=new DynamicObject(this);
  fComparison=((ComparisonNode)cc.getProperty(EMFCompareConstants.COMPARE_RESULT)).getTarget();
  fEditingDomain=(EMFCompareEditingDomain)getCompareConfiguration().getProperty(EMFCompareConstants.EDITING_DOMAIN);
}","/** 
 * @param style
 * @param bundle
 * @param cc
 */
protected EMFCompareContentMergeViewer(int style,ResourceBundle bundle,CompareConfiguration cc){
  super(style,bundle,cc);
  fDynamicObject=new DynamicObject(this);
  fComparison=(Comparison)cc.getProperty(EMFCompareConstants.COMPARE_RESULT);
  fEditingDomain=(EMFCompareEditingDomain)getCompareConfiguration().getProperty(EMFCompareConstants.EDITING_DOMAIN);
}",0.9552941176470588
93637,"public void widgetDisposed(DisposeEvent e){
  fControl=null;
}","public void widgetDisposed(DisposeEvent e){
  ret.removePaintListener(paintListener);
}",0.7248322147651006
93638,"/** 
 * {@inheritDoc}
 * @see org.eclipse.compare.contentmergeviewer.ContentMergeViewer#createCenterControl(org.eclipse.swt.widgets.Composite)
 */
@Override protected Control createCenterControl(Composite parent){
  final Control ret=super.createCenterControl(parent);
  final PaintListener paintListener=new PaintListener(){
    public void paintControl(    PaintEvent e){
      paintCenter(e.gc);
    }
  }
;
  ret.addPaintListener(paintListener);
  ret.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      ret.removePaintListener(paintListener);
    }
  }
);
  new Resizer(ret);
  return ret;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.compare.contentmergeviewer.ContentMergeViewer#createCenterControl(org.eclipse.swt.widgets.Composite)
 */
@Override protected Control createCenterControl(Composite parent){
  final Control ret=super.createCenterControl(parent);
  final PaintListener paintListener=new PaintListener(){
    public void paintControl(    PaintEvent e){
      paintCenter(e.gc);
    }
  }
;
  ret.addPaintListener(paintListener);
  ret.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      ret.removePaintListener(paintListener);
    }
  }
);
  return ret;
}",0.9684542586750788
93639,"void compareInputChanged(final Comparison comparison){
  fRoot=fAdapterFactory.adapt(comparison,IDiffElement.class);
  getCompareConfiguration().setProperty(EMFCompareConstants.COMPARE_RESULT,fRoot);
  getCompareConfiguration().getContainer().runAsynchronously(new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      String message=null;
      if (comparison.getDifferences().isEmpty()) {
        message=""String_Node_Str"";
      }
      if (Display.getCurrent() != null) {
        refreshAfterDiff(message,fRoot);
      }
 else {
        final String theMessage=message;
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            refreshAfterDiff(theMessage,fRoot);
          }
        }
);
      }
    }
  }
);
}","void compareInputChanged(final Comparison comparison){
  getCompareConfiguration().setProperty(EMFCompareConstants.COMPARE_RESULT,comparison);
  fRoot=fAdapterFactory.adapt(comparison,IDiffElement.class);
  getCompareConfiguration().getContainer().runAsynchronously(new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      String message=null;
      if (comparison.getDifferences().isEmpty()) {
        message=""String_Node_Str"";
      }
      if (Display.getCurrent() != null) {
        refreshAfterDiff(message,fRoot);
      }
 else {
        final String theMessage=message;
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            refreshAfterDiff(theMessage,fRoot);
          }
        }
);
      }
    }
  }
);
}",0.9231685527099464
93640,"/** 
 * Checks the potential equivalence from the given <code>difference</code>.
 * @param comparison The comparison this engine is expected to complete.
 * @param referenceChange The difference that is to be checked
 */
protected void checkForEquivalences(Comparison comparison,ReferenceChange referenceChange){
  Equivalence equivalence=referenceChange.getEquivalence();
  if (equivalence == null) {
    equivalence=CompareFactory.eINSTANCE.createEquivalence();
    comparison.getEquivalences().add(equivalence);
    equivalence.getDifferences().add(referenceChange);
    EObject container=MatchUtil.getContainer(comparison,referenceChange);
    if (container != null) {
      for (      ReferenceChange diff : filter(comparison.getDifferences(container),ReferenceChange.class)) {
        EReference reference=diff.getReference();
        EReference eOpposite=reference.getEOpposite();
        EObject referenceChangeContainer=MatchUtil.getContainer(comparison,diff);
        EObject value=referenceChange.getValue();
        if (eOpposite != null && eOpposite.equals(referenceChange.getReference()) && value.equals(referenceChangeContainer)) {
          equivalence.getDifferences().add(diff);
          break;
        }
      }
    }
  }
}","/** 
 * Checks the potential equivalence from the given <code>difference</code>.
 * @param comparison The comparison this engine is expected to complete.
 * @param referenceChange The difference that is to be checked
 */
protected void checkForEquivalences(Comparison comparison,ReferenceChange referenceChange){
  Equivalence equivalence=referenceChange.getEquivalence();
  if (equivalence == null) {
    equivalence=CompareFactory.eINSTANCE.createEquivalence();
    comparison.getEquivalences().add(equivalence);
    equivalence.getDifferences().add(referenceChange);
    EObject container=MatchUtil.getContainer(comparison,referenceChange);
    if (container != null) {
      for (      ReferenceChange diff : filter(comparison.getDifferences(container),ReferenceChange.class)) {
        EReference reference=diff.getReference();
        EReference eOpposite=reference.getEOpposite();
        EObject referenceChangeContainer=MatchUtil.getContainer(comparison,diff);
        EObject value=referenceChange.getValue();
        if (eOpposite != null && eOpposite.equals(referenceChange.getReference()) && value.equals(referenceChangeContainer)) {
          equivalence.getDifferences().add(diff);
          break;
        }
      }
      addChangesFromOrigin(comparison,referenceChange,equivalence);
    }
  }
}",0.9733750978856696
93641,"/** 
 * Add to the given <code>equivalence</code> potential changes based on the same reference as the given <code>diff</code>.
 * @param comparison The comparison which enable to know from which side come the business model objects owning the differences.
 * @param diff The current difference.
 * @param equivalence The current equivalence attached to the difference.
 */
private void addChangesFromOrigin(Comparison comparison,ReferenceChange diff,Equivalence equivalence){
  if (!diff.getReference().isMany()) {
    final EObject originContainer=MatchUtil.getOriginContainer(comparison,diff);
    if (originContainer != null) {
      for (      Diff referenceChange : comparison.getDifferences(originContainer)) {
        if (referenceChange instanceof ReferenceChange && MatchUtil.getContainer(comparison,referenceChange).equals(ReferenceUtil.safeEGet(originContainer,diff.getReference()))) {
          equivalence.getDifferences().add(referenceChange);
        }
      }
    }
  }
}","/** 
 * Add to the given <code>equivalence</code> potential changes based on the same reference as the given <code>diff</code>.
 * @param comparison The comparison which enable to know from which side come the business model objects owning the differences.
 * @param diff The current difference.
 * @param equivalence The current equivalence attached to the difference.
 */
private void addChangesFromOrigin(Comparison comparison,ReferenceChange diff,Equivalence equivalence){
  if (!diff.getReference().isMany()) {
    final EObject originContainer=MatchUtil.getOriginContainer(comparison,diff);
    if (originContainer != null) {
      for (      Diff referenceChange : comparison.getDifferences(originContainer)) {
        if (referenceChange instanceof ReferenceChange && diff.getReference().equals(((ReferenceChange)referenceChange).getReference().getEOpposite())) {
          equivalence.getDifferences().add(referenceChange);
        }
      }
    }
  }
}",0.913846153846154
93642,"/** 
 * Add to the given <code>equivalence</code> potential changes based on the same reference as the given <code>diff</code>.
 * @param comparison The comparison which enable to know from which side come the business model objects owning the differences.
 * @param diff The current difference.
 * @param equivalence The current equivalence attached to the difference.
 */
private void addChangesFromOrigin(Comparison comparison,ReferenceChange diff,Equivalence equivalence){
  if (!diff.getReference().isMany()) {
    final EObject originContainer=MatchUtil.getOriginContainer(comparison,diff);
    if (originContainer != null) {
      for (      Diff referenceChange : comparison.getDifferences(originContainer)) {
        if (referenceChange instanceof ReferenceChange && MatchUtil.getContainer(comparison,referenceChange).equals(originContainer.eGet(diff.getReference(),false))) {
          equivalence.getDifferences().add(referenceChange);
        }
      }
    }
  }
}","/** 
 * Add to the given <code>equivalence</code> potential changes based on the same reference as the given <code>diff</code>.
 * @param comparison The comparison which enable to know from which side come the business model objects owning the differences.
 * @param diff The current difference.
 * @param equivalence The current equivalence attached to the difference.
 */
private void addChangesFromOrigin(Comparison comparison,ReferenceChange diff,Equivalence equivalence){
  if (!diff.getReference().isMany()) {
    final EObject originContainer=MatchUtil.getOriginContainer(comparison,diff);
    if (originContainer != null) {
      for (      Diff referenceChange : comparison.getDifferences(originContainer)) {
        if (referenceChange instanceof ReferenceChange && MatchUtil.getContainer(comparison,referenceChange).equals(ReferenceUtil.safeEGet(originContainer,diff.getReference()))) {
          equivalence.getDifferences().add(referenceChange);
        }
      }
    }
  }
}",0.970468431771894
93643,"/** 
 * From a <code>sourceDifference</code> (ADD) on a containment mono-valued reference, it retrieves a potential DELETE difference on the origin value.
 * @param comparison The comparison this engine is expected to complete.
 * @param sourceDifference The given difference.
 * @return The found differences.
 */
private Set<ReferenceChange> getDELOriginValueOnContainmentRefSingle(Comparison comparison,ReferenceChange sourceDifference){
  Set<ReferenceChange> result=new HashSet<ReferenceChange>();
  EReference reference=sourceDifference.getReference();
  if (!reference.isMany()) {
    EObject originContainer=MatchUtil.getOriginContainer(comparison,sourceDifference);
    if (originContainer != null) {
      Object originValue=originContainer.eGet(reference,false);
      if (originValue instanceof EObject) {
        result=getDifferenceOnGivenObject(comparison,(EObject)originValue,DifferenceKind.DELETE);
      }
    }
  }
  return result;
}","/** 
 * From a <code>sourceDifference</code> (ADD) on a containment mono-valued reference, it retrieves a potential DELETE difference on the origin value.
 * @param comparison The comparison this engine is expected to complete.
 * @param sourceDifference The given difference.
 * @return The found differences.
 */
private Set<ReferenceChange> getDELOriginValueOnContainmentRefSingle(Comparison comparison,ReferenceChange sourceDifference){
  Set<ReferenceChange> result=new HashSet<ReferenceChange>();
  EReference reference=sourceDifference.getReference();
  if (!reference.isMany()) {
    EObject originContainer=MatchUtil.getOriginContainer(comparison,sourceDifference);
    if (originContainer != null) {
      Object originValue=ReferenceUtil.safeEGet(originContainer,reference);
      if (originValue instanceof EObject) {
        result=getDifferenceOnGivenObject(comparison,(EObject)originValue,DifferenceKind.DELETE);
      }
    }
  }
  return result;
}",0.9739039665970772
93644,"/** 
 * Check if the given <code>difference</code> is a CHANGE to a null value on a mono-valued reference.
 * @param difference The given difference.
 * @return True if it is a CHANGE to a null value.
 */
private static boolean isChangeDelete(ReferenceChange difference){
  boolean result=false;
  EReference reference=difference.getReference();
  if (!reference.isMany() && !reference.isContainment()) {
    Match match=difference.getMatch();
    if (difference.getSource() == DifferenceSource.LEFT) {
      final EObject left=match.getLeft();
      result=left == null || left.eGet(reference,false) == null;
    }
 else {
      final EObject right=match.getRight();
      result=right == null || right.eGet(reference,false) == null;
    }
  }
  return result;
}","/** 
 * Check if the given <code>difference</code> is a CHANGE to a null value on a mono-valued reference.
 * @param difference The given difference.
 * @return True if it is a CHANGE to a null value.
 */
private static boolean isChangeDelete(ReferenceChange difference){
  boolean result=false;
  EReference reference=difference.getReference();
  if (!reference.isMany() && !reference.isContainment()) {
    Match match=difference.getMatch();
    if (difference.getSource() == DifferenceSource.LEFT) {
      final EObject left=match.getLeft();
      result=left == null || ReferenceUtil.safeEGet(left,reference) == null;
    }
 else {
      final EObject right=match.getRight();
      result=right == null || ReferenceUtil.safeEGet(right,reference) == null;
    }
  }
  return result;
}",0.935483870967742
93645,"/** 
 * Check if the given <code>difference</code> is a CHANGE from a null value on a mono-valued reference.
 * @param comparison The comparison this engine is expected to complete.
 * @param difference The given difference.
 * @return True if it is a CHANGE from a null value.
 */
private static boolean isChangeAdd(Comparison comparison,ReferenceChange difference){
  boolean result=false;
  EReference reference=difference.getReference();
  if (!reference.isMany() && !reference.isContainment()) {
    Match match=difference.getMatch();
    if (comparison.isThreeWay()) {
      final EObject origin=match.getOrigin();
      result=origin == null || origin.eGet(reference,false) == null;
    }
 else {
      final EObject right=match.getRight();
      result=right == null || right.eGet(reference,false) == null;
    }
  }
  return result;
}","/** 
 * Check if the given <code>difference</code> is a CHANGE from a null value on a mono-valued reference.
 * @param comparison The comparison this engine is expected to complete.
 * @param difference The given difference.
 * @return True if it is a CHANGE from a null value.
 */
private static boolean isChangeAdd(Comparison comparison,ReferenceChange difference){
  boolean result=false;
  EReference reference=difference.getReference();
  if (!reference.isMany() && !reference.isContainment()) {
    Match match=difference.getMatch();
    if (comparison.isThreeWay()) {
      final EObject origin=match.getOrigin();
      result=origin == null || ReferenceUtil.safeEGet(origin,reference) == null;
    }
 else {
      final EObject right=match.getRight();
      result=right == null || ReferenceUtil.safeEGet(right,reference) == null;
    }
  }
  return result;
}",0.9391812865497076
93646,"/** 
 * This predicate can be used in order to check that a particular Diff describes either a  {@link ReferenceChange} or {@link AttributeChange} for the given {@code expectedValue}. <p> For example, this could be used to check that the given value has indeed been added to a reference or attribute, though such checks are more easily performed through   {@link #addedIn(EObject,EObject)} or{@link #removedFrom(EObject,EObject)}. </p>
 * @param expectedValue The value which we expect to have changed and detected through a Diff.
 * @return The created predicate.
 */
public static Predicate<? super Diff> valueIs(final Object expectedValue){
  return new Predicate<Diff>(){
    public boolean apply(    Diff input){
      final Object value;
      if (input instanceof ReferenceChange) {
        value=((ReferenceChange)input).getValue();
      }
 else       if (input instanceof AttributeChange) {
        value=((AttributeChange)input).getValue();
      }
 else {
        return false;
      }
      return value == expectedValue;
    }
  }
;
}","/** 
 * This predicate can be used in order to check that a particular Diff describes either a  {@link ReferenceChange} or {@link AttributeChange} for the given {@code expectedValue}. <p> For example, this could be used to check that the given value has indeed been added to a reference or attribute, though such checks are more easily performed through   {@link #addedIn(EObject,EObject)} or{@link #removedFrom(EObject,EObject)}. </p>
 * @param expectedValue The value which we expect to have changed and detected through a Diff.
 * @return The created predicate.
 */
public static Predicate<? super Diff> valueIs(final Object expectedValue){
  return new Predicate<Diff>(){
    public boolean apply(    Diff input){
      final Object value;
      if (input instanceof ReferenceChange) {
        value=((ReferenceChange)input).getValue();
      }
 else       if (input instanceof AttributeChange) {
        value=((AttributeChange)input).getValue();
      }
 else {
        return false;
      }
      if (value == null) {
        return expectedValue == null;
      }
 else {
        return value.equals(expectedValue);
      }
    }
  }
;
}",0.9434306569343066
93647,"/** 
 * From a given mono-valued reference change, get the origin value.
 * @param comparison The comparison.
 * @param difference The given reference change.
 * @return The origin value.
 */
public static EObject getOriginValue(Comparison comparison,ReferenceChange difference){
  if (!difference.getReference().isContainment() && !difference.getReference().isMany() && difference.getKind().equals(DifferenceKind.CHANGE)) {
    EObject originContainer=getOriginContainer(comparison,difference);
    if (originContainer != null) {
      Object originValue=originContainer.eGet(difference.getReference());
      if (originValue instanceof EObject) {
        return (EObject)originValue;
      }
    }
  }
  return null;
}","/** 
 * From a given mono-valued reference change, get the origin value.
 * @param comparison The comparison.
 * @param difference The given reference change.
 * @return The origin value.
 */
public static EObject getOriginValue(Comparison comparison,ReferenceChange difference){
  if (!difference.getReference().isContainment() && !difference.getReference().isMany() && difference.getKind().equals(DifferenceKind.CHANGE)) {
    EObject originContainer=getOriginContainer(comparison,difference);
    if (originContainer != null) {
      Object originValue=ReferenceUtil.safeEGet(originContainer,difference.getReference());
      if (originValue instanceof EObject) {
        return (EObject)originValue;
      }
    }
  }
  return null;
}",0.9794238683127572
93648,"/** 
 * This will be called from   {@link #checkConflict(Comparison,Diff,Iterable)} in order to detectconflicts on a Diff that is of type ""DELETE"" and which is <b>not</b> a containment reference change. <p> The only potential conflict for such a diff is a ""MOVE"" of that same value on the opposite side. </p>
 * @param comparison The originating comparison of those diffs.
 * @param diff The diff which we are to check for conflicts.
 * @param candidates The list of candidates for a conflict. This list only contains Diff from the side opposite to  {@code diff}.
 */
protected void checkFeatureDeleteConflict(Comparison comparison,Diff diff,Iterable<Diff> candidates){
  final Object deletedValue;
  final EStructuralFeature feature;
  if (diff instanceof ReferenceChange) {
    deletedValue=((ReferenceChange)diff).getValue();
    feature=((ReferenceChange)diff).getReference();
  }
 else {
    deletedValue=((AttributeChange)diff).getValue();
    feature=((AttributeChange)diff).getAttribute();
  }
  final Iterable<Diff> refinedCandidates=Iterables.filter(candidates,new Predicate<Diff>(){
    public boolean apply(    Diff input){
      boolean apply=false;
      if (input != null && (input.getKind() == DifferenceKind.MOVE || input.getKind() == DifferenceKind.DELETE)) {
        if (input instanceof ReferenceChange) {
          apply=((ReferenceChange)input).getReference() == feature;
        }
 else         if (input instanceof AttributeChange) {
          apply=((AttributeChange)input).getAttribute() == feature;
        }
      }
      return apply;
    }
  }
);
  for (  Diff candidate : refinedCandidates) {
    final Object movedValue;
    if (candidate instanceof ReferenceChange) {
      movedValue=((ReferenceChange)candidate).getValue();
    }
 else {
      movedValue=((AttributeChange)candidate).getValue();
    }
    if (helper.matchingValues(comparison,deletedValue,movedValue)) {
      if (candidate.getKind() == DifferenceKind.MOVE) {
        conflictOn(comparison,diff,candidate,ConflictKind.REAL);
      }
 else {
        conflictOn(comparison,diff,candidate,ConflictKind.PSEUDO);
      }
    }
  }
}","/** 
 * This will be called from   {@link #checkConflict(Comparison,Diff,Iterable)} in order to detectconflicts on a Diff that is of type ""DELETE"" and which is <b>not</b> a containment reference change. <p> The only potential conflict for such a diff is a ""MOVE"" of that same value on the opposite side. </p>
 * @param comparison The originating comparison of those diffs.
 * @param diff The diff which we are to check for conflicts.
 * @param candidates The list of candidates for a conflict. This list only contains Diff from the side opposite to  {@code diff}.
 */
protected void checkFeatureDeleteConflict(Comparison comparison,Diff diff,Iterable<Diff> candidates){
  final Object deletedValue;
  final EStructuralFeature feature;
  if (diff instanceof ReferenceChange) {
    deletedValue=((ReferenceChange)diff).getValue();
    feature=((ReferenceChange)diff).getReference();
  }
 else   if (diff instanceof AttributeChange) {
    deletedValue=((AttributeChange)diff).getValue();
    feature=((AttributeChange)diff).getAttribute();
  }
 else {
    return;
  }
  final Iterable<Diff> refinedCandidates=Iterables.filter(candidates,new Predicate<Diff>(){
    public boolean apply(    Diff input){
      boolean apply=false;
      if (input != null && (input.getKind() == DifferenceKind.MOVE || input.getKind() == DifferenceKind.DELETE)) {
        if (input instanceof ReferenceChange) {
          apply=((ReferenceChange)input).getReference() == feature;
        }
 else         if (input instanceof AttributeChange) {
          apply=((AttributeChange)input).getAttribute() == feature;
        }
      }
      return apply;
    }
  }
);
  for (  Diff candidate : refinedCandidates) {
    final Object movedValue;
    if (candidate instanceof ReferenceChange) {
      movedValue=((ReferenceChange)candidate).getValue();
    }
 else {
      movedValue=((AttributeChange)candidate).getValue();
    }
    if (helper.matchingValues(comparison,deletedValue,movedValue)) {
      if (candidate.getKind() == DifferenceKind.MOVE) {
        conflictOn(comparison,diff,candidate,ConflictKind.REAL);
      }
 else {
        conflictOn(comparison,diff,candidate,ConflictKind.PSEUDO);
      }
    }
  }
}",0.9854200416570238
93649,"/** 
 * This will be called from   {@link #checkConflict(Comparison,Diff,Iterable)} in order to detectconflicts on a Diff that is of type ""CHANGE"" or ""MOVE"". <p> Those can only conflict with other Diffs of the same type on the same reference. </p>
 * @param comparison The originating comparison of those diffs.
 * @param diff The diff which we are to check for conflicts.
 * @param candidates The list of candidates for a conflict. This list only contains Diff from the side opposite to  {@code diff}.
 */
protected void checkFeatureMoveConflict(Comparison comparison,Diff diff,Iterable<Diff> candidates){
  final Object changedValue;
  final EStructuralFeature feature;
  if (diff instanceof ReferenceChange) {
    changedValue=((ReferenceChange)diff).getValue();
    feature=((ReferenceChange)diff).getReference();
  }
 else {
    changedValue=((AttributeChange)diff).getValue();
    feature=((AttributeChange)diff).getAttribute();
  }
  final Iterable<Diff> refinedCandidates=Iterables.filter(candidates,new Predicate<Diff>(){
    public boolean apply(    Diff input){
      boolean apply=false;
      if (input != null && input.getKind() == DifferenceKind.MOVE) {
        if (input instanceof ReferenceChange) {
          apply=((ReferenceChange)input).getReference() == feature;
        }
 else         if (input instanceof AttributeChange) {
          apply=((AttributeChange)input).getAttribute() == feature;
        }
      }
      return apply;
    }
  }
);
  for (  Diff candidate : refinedCandidates) {
    final Object candidateValue;
    if (candidate instanceof ReferenceChange) {
      candidateValue=((ReferenceChange)candidate).getValue();
    }
 else {
      candidateValue=((AttributeChange)candidate).getValue();
    }
    if (diff.getMatch() == candidate.getMatch() && helper.matchingValues(comparison,changedValue,candidateValue)) {
      if (matchingIndices(comparison,diff.getMatch(),feature,changedValue,candidateValue)) {
        conflictOn(comparison,diff,candidate,ConflictKind.PSEUDO);
      }
 else {
        conflictOn(comparison,diff,candidate,ConflictKind.REAL);
      }
    }
  }
}","/** 
 * This will be called from   {@link #checkConflict(Comparison,Diff,Iterable)} in order to detectconflicts on a Diff that is of type ""CHANGE"" or ""MOVE"". <p> Those can only conflict with other Diffs of the same type on the same reference. </p>
 * @param comparison The originating comparison of those diffs.
 * @param diff The diff which we are to check for conflicts.
 * @param candidates The list of candidates for a conflict. This list only contains Diff from the side opposite to  {@code diff}.
 */
protected void checkFeatureMoveConflict(Comparison comparison,Diff diff,Iterable<Diff> candidates){
  final Object changedValue;
  final EStructuralFeature feature;
  if (diff instanceof ReferenceChange) {
    changedValue=((ReferenceChange)diff).getValue();
    feature=((ReferenceChange)diff).getReference();
  }
 else   if (diff instanceof AttributeChange) {
    changedValue=((AttributeChange)diff).getValue();
    feature=((AttributeChange)diff).getAttribute();
  }
 else {
    return;
  }
  final Iterable<Diff> refinedCandidates=Iterables.filter(candidates,new Predicate<Diff>(){
    public boolean apply(    Diff input){
      boolean apply=false;
      if (input != null && input.getKind() == DifferenceKind.MOVE) {
        if (input instanceof ReferenceChange) {
          apply=((ReferenceChange)input).getReference() == feature;
        }
 else         if (input instanceof AttributeChange) {
          apply=((AttributeChange)input).getAttribute() == feature;
        }
      }
      return apply;
    }
  }
);
  for (  Diff candidate : refinedCandidates) {
    final Object candidateValue;
    if (candidate instanceof ReferenceChange) {
      candidateValue=((ReferenceChange)candidate).getValue();
    }
 else {
      candidateValue=((AttributeChange)candidate).getValue();
    }
    if (diff.getMatch() == candidate.getMatch() && helper.matchingValues(comparison,changedValue,candidateValue)) {
      if (matchingIndices(comparison,diff.getMatch(),feature,changedValue,candidateValue)) {
        conflictOn(comparison,diff,candidate,ConflictKind.PSEUDO);
      }
 else {
        conflictOn(comparison,diff,candidate,ConflictKind.REAL);
      }
    }
  }
}",0.9853317811408616
93650,"/** 
 * This will be called from   {@link #checkConflict(Comparison,Diff,Iterable)} in order to detectconflicts on a Diff that is of type ""ADD"" and which is <b>not</b> a containment reference change. <p> These will conflict with Diffs on the other side on the same reference in the same container, of type ADD an on the same value. </p>
 * @param comparison The originating comparison of those diffs.
 * @param diff The diff which we are to check for conflicts.
 * @param candidates The list of candidates for a conflict. This list only contains Diff from the side opposite to  {@code diff}.
 */
protected void checkFeatureAddConflict(final Comparison comparison,final Diff diff,Iterable<Diff> candidates){
  final Object addedValue;
  final EStructuralFeature feature;
  if (diff instanceof ReferenceChange) {
    addedValue=((ReferenceChange)diff).getValue();
    feature=((ReferenceChange)diff).getReference();
  }
 else {
    addedValue=((AttributeChange)diff).getValue();
    feature=((AttributeChange)diff).getAttribute();
  }
  final Iterable<Diff> refinedCandidates=Iterables.filter(candidates,new Predicate<Diff>(){
    public boolean apply(    Diff input){
      boolean apply=false;
      if (input != null && (input.getKind() == DifferenceKind.ADD && diff.getMatch() == input.getMatch())) {
        if (input instanceof ReferenceChange) {
          apply=((ReferenceChange)input).getReference() == feature;
        }
 else         if (input instanceof AttributeChange) {
          apply=((AttributeChange)input).getAttribute() == feature;
        }
      }
      return apply;
    }
  }
);
  for (  Diff candidate : refinedCandidates) {
    final Object candidateValue;
    if (candidate instanceof ReferenceChange) {
      candidateValue=((ReferenceChange)candidate).getValue();
    }
 else {
      candidateValue=((AttributeChange)candidate).getValue();
    }
    if (feature.isUnique() && helper.matchingValues(comparison,addedValue,candidateValue)) {
      if (matchingIndices(comparison,diff.getMatch(),feature,addedValue,candidateValue)) {
        conflictOn(comparison,diff,candidate,ConflictKind.PSEUDO);
      }
 else {
        conflictOn(comparison,diff,candidate,ConflictKind.REAL);
      }
    }
  }
}","/** 
 * This will be called from   {@link #checkConflict(Comparison,Diff,Iterable)} in order to detectconflicts on a Diff that is of type ""ADD"" and which is <b>not</b> a containment reference change. <p> These will conflict with Diffs on the other side on the same reference in the same container, of type ADD an on the same value. </p>
 * @param comparison The originating comparison of those diffs.
 * @param diff The diff which we are to check for conflicts.
 * @param candidates The list of candidates for a conflict. This list only contains Diff from the side opposite to  {@code diff}.
 */
protected void checkFeatureAddConflict(final Comparison comparison,final Diff diff,Iterable<Diff> candidates){
  final Object addedValue;
  final EStructuralFeature feature;
  if (diff instanceof ReferenceChange) {
    addedValue=((ReferenceChange)diff).getValue();
    feature=((ReferenceChange)diff).getReference();
  }
 else   if (diff instanceof AttributeChange) {
    addedValue=((AttributeChange)diff).getValue();
    feature=((AttributeChange)diff).getAttribute();
  }
 else {
    return;
  }
  final Iterable<Diff> refinedCandidates=Iterables.filter(candidates,new Predicate<Diff>(){
    public boolean apply(    Diff input){
      boolean apply=false;
      if (input != null && (input.getKind() == DifferenceKind.ADD && diff.getMatch() == input.getMatch())) {
        if (input instanceof ReferenceChange) {
          apply=((ReferenceChange)input).getReference() == feature;
        }
 else         if (input instanceof AttributeChange) {
          apply=((AttributeChange)input).getAttribute() == feature;
        }
      }
      return apply;
    }
  }
);
  for (  Diff candidate : refinedCandidates) {
    final Object candidateValue;
    if (candidate instanceof ReferenceChange) {
      candidateValue=((ReferenceChange)candidate).getValue();
    }
 else {
      candidateValue=((AttributeChange)candidate).getValue();
    }
    if (feature.isUnique() && helper.matchingValues(comparison,addedValue,candidateValue)) {
      if (matchingIndices(comparison,diff.getMatch(),feature,addedValue,candidateValue)) {
        conflictOn(comparison,diff,candidate,ConflictKind.PSEUDO);
      }
 else {
        conflictOn(comparison,diff,candidate,ConflictKind.REAL);
      }
    }
  }
}",0.9860403279415024
93651,"/** 
 * This will be called from   {@link #checkConflict(Comparison,Diff,Iterable)} in order to detectconflicts on a Diff that is of type ""CHANGE"". <p> Those can only conflict with other CHANGE Diffs on the same reference. </p>
 * @param comparison The originating comparison of those diffs.
 * @param diff The diff which we are to check for conflicts.
 * @param candidates The list of candidates for a conflict. This list only contains Diff from the side opposite to  {@code diff}.
 */
protected void checkFeatureChangeConflict(Comparison comparison,Diff diff,Iterable<Diff> candidates){
  final Object changedValue;
  final EStructuralFeature feature;
  if (diff instanceof ReferenceChange) {
    changedValue=((ReferenceChange)diff).getValue();
    feature=((ReferenceChange)diff).getReference();
  }
 else {
    changedValue=((AttributeChange)diff).getValue();
    feature=((AttributeChange)diff).getAttribute();
  }
  final Iterable<Diff> refinedCandidates=Iterables.filter(candidates,new Predicate<Diff>(){
    public boolean apply(    Diff input){
      boolean apply=false;
      if (input != null && input.getKind() == DifferenceKind.CHANGE) {
        if (input instanceof ReferenceChange) {
          apply=((ReferenceChange)input).getReference() == feature;
        }
 else         if (input instanceof AttributeChange) {
          apply=((AttributeChange)input).getAttribute() == feature;
        }
      }
      return apply;
    }
  }
);
  for (  Diff candidate : refinedCandidates) {
    final Object candidateValue;
    if (candidate instanceof ReferenceChange) {
      candidateValue=((ReferenceChange)candidate).getValue();
    }
 else {
      candidateValue=((AttributeChange)candidate).getValue();
    }
    if (diff.getMatch() == candidate.getMatch()) {
      if (helper.matchingValues(comparison,changedValue,candidateValue)) {
        conflictOn(comparison,diff,candidate,ConflictKind.PSEUDO);
      }
 else {
        conflictOn(comparison,diff,candidate,ConflictKind.REAL);
      }
    }
  }
}","/** 
 * This will be called from   {@link #checkConflict(Comparison,Diff,Iterable)} in order to detectconflicts on a Diff that is of type ""CHANGE"". <p> Those can only conflict with other CHANGE Diffs on the same reference. </p>
 * @param comparison The originating comparison of those diffs.
 * @param diff The diff which we are to check for conflicts.
 * @param candidates The list of candidates for a conflict. This list only contains Diff from the side opposite to  {@code diff}.
 */
protected void checkFeatureChangeConflict(Comparison comparison,Diff diff,Iterable<Diff> candidates){
  final Object changedValue;
  final EStructuralFeature feature;
  if (diff instanceof ReferenceChange) {
    changedValue=((ReferenceChange)diff).getValue();
    feature=((ReferenceChange)diff).getReference();
  }
 else   if (diff instanceof AttributeChange) {
    changedValue=((AttributeChange)diff).getValue();
    feature=((AttributeChange)diff).getAttribute();
  }
 else {
    return;
  }
  final Iterable<Diff> refinedCandidates=Iterables.filter(candidates,new Predicate<Diff>(){
    public boolean apply(    Diff input){
      boolean apply=false;
      if (input != null && input.getKind() == DifferenceKind.CHANGE) {
        if (input instanceof ReferenceChange) {
          apply=((ReferenceChange)input).getReference() == feature;
        }
 else         if (input instanceof AttributeChange) {
          apply=((AttributeChange)input).getAttribute() == feature;
        }
      }
      return apply;
    }
  }
);
  for (  Diff candidate : refinedCandidates) {
    final Object candidateValue;
    if (candidate instanceof ReferenceChange) {
      candidateValue=((ReferenceChange)candidate).getValue();
    }
 else {
      candidateValue=((AttributeChange)candidate).getValue();
    }
    if (diff.getMatch() == candidate.getMatch()) {
      if (helper.matchingValues(comparison,changedValue,candidateValue)) {
        conflictOn(comparison,diff,candidate,ConflictKind.PSEUDO);
      }
 else {
        conflictOn(comparison,diff,candidate,ConflictKind.REAL);
      }
    }
  }
}",0.984622894801074
93652,"/** 
 * Checks whether the given   {@link Match}'s sides have changed resources. This will only be called for  {@link Match} elements referencing the root(s) of an EMF Resource.
 * @param match The match that is to be checked.
 */
protected void checkResourceAttachment(Match match){
  final Comparison comparison=match.getComparison();
  if (comparison.getMatchedResources().isEmpty()) {
    return;
  }
  if (match.getLeft() == null && match.getRight() == null) {
    final String uri=match.getOrigin().eResource().getURI().toString();
    getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.LEFT);
    getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.RIGHT);
  }
 else   if (match.getLeft() == null || match.getRight() == null) {
    if (comparison.isThreeWay() && match.getLeft() == null) {
      final String uri=match.getOrigin().eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.LEFT);
    }
 else     if (comparison.isThreeWay()) {
      final String uri=match.getRight().eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.RIGHT);
    }
 else     if (match.getLeft() == null) {
      final String uri=match.getRight().eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.LEFT);
    }
 else {
      final String uri=match.getLeft().eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.ADD,DifferenceSource.LEFT);
    }
  }
}","/** 
 * Checks whether the given   {@link Match}'s sides have changed resources. This will only be called for  {@link Match} elements referencing the root(s) of an EMF Resource.
 * @param match The match that is to be checked.
 */
protected void checkResourceAttachment(Match match){
  final Comparison comparison=match.getComparison();
  if (comparison.getMatchedResources().isEmpty()) {
    return;
  }
  if (match.getLeft() == null && match.getRight() == null) {
    final String uri=match.getOrigin().eResource().getURI().toString();
    getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.LEFT);
    getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.RIGHT);
  }
 else   if (match.getLeft() == null || match.getRight() == null) {
    if (comparison.isThreeWay() && match.getLeft() == null) {
      final String uri=match.getOrigin().eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.LEFT);
    }
 else     if (comparison.isThreeWay() && match.getRight() != null) {
      final String uri=match.getRight().eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.RIGHT);
    }
 else     if (match.getLeft() == null) {
      final String uri=match.getRight().eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.LEFT);
    }
 else {
      final String uri=match.getLeft().eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.ADD,DifferenceSource.LEFT);
    }
  }
}",0.9918934568616096
93653,"/** 
 * Checks the potential equivalence from the given <code>difference</code>.
 * @param comparison The comparison this engine is expected to complete.
 * @param referenceChange The difference that is to be checked
 */
protected void checkForEquivalences(Comparison comparison,ReferenceChange referenceChange){
  Equivalence equivalence=referenceChange.getEquivalence();
  if (equivalence == null) {
    equivalence=CompareFactory.eINSTANCE.createEquivalence();
    comparison.getEquivalences().add(equivalence);
    equivalence.getDifferences().add(referenceChange);
    EObject container=MatchUtil.getContainer(comparison,referenceChange);
    if (container != null) {
      for (      ReferenceChange diff : filter(comparison.getDifferences(container),ReferenceChange.class)) {
        EReference reference=diff.getReference();
        EReference eOpposite=reference.getEOpposite();
        EObject referenceChangeContainer=MatchUtil.getContainer(comparison,diff);
        EObject value=referenceChange.getValue();
        if (eOpposite != null && eOpposite.equals(referenceChange.getReference()) && value.equals(referenceChangeContainer)) {
          equivalence.getDifferences().add(diff);
          break;
        }
      }
      addChangesFromOrigin(comparison,referenceChange,equivalence);
    }
  }
}","/** 
 * Checks the potential equivalence from the given <code>difference</code>.
 * @param comparison The comparison this engine is expected to complete.
 * @param referenceChange The difference that is to be checked
 */
protected void checkForEquivalences(Comparison comparison,ReferenceChange referenceChange){
  Equivalence equivalence=referenceChange.getEquivalence();
  if (equivalence == null) {
    equivalence=CompareFactory.eINSTANCE.createEquivalence();
    comparison.getEquivalences().add(equivalence);
    equivalence.getDifferences().add(referenceChange);
    EObject container=MatchUtil.getContainer(comparison,referenceChange);
    if (container != null) {
      for (      ReferenceChange diff : filter(comparison.getDifferences(container),ReferenceChange.class)) {
        EReference reference=diff.getReference();
        EReference eOpposite=reference.getEOpposite();
        EObject referenceChangeContainer=MatchUtil.getContainer(comparison,diff);
        EObject value=referenceChange.getValue();
        if (eOpposite != null && eOpposite.equals(referenceChange.getReference()) && value.equals(referenceChangeContainer)) {
          equivalence.getDifferences().add(diff);
          break;
        }
      }
    }
  }
}",0.9733750978856696
93654,"@Override public Match getParentMatch(Diff input){
  if (getRelatedExtensionKind(input) == DifferenceKind.CHANGE) {
    Match match=input.getMatch().getComparison().getMatch(getDiscriminantFromDiff(input));
    if (match.eContainer() instanceof Match) {
      return (Match)match.eContainer();
    }
 else {
      return match;
    }
  }
  return super.getParentMatch(input);
}","@Override public Match getParentMatch(Diff input){
  if (getRelatedExtensionKind(input) == DifferenceKind.CHANGE) {
    final EObject discriminant=getDiscriminantFromDiff(input);
    if (discriminant != null) {
      final Match match=input.getMatch().getComparison().getMatch(discriminant);
      if (match.eContainer() instanceof Match) {
        return (Match)match.eContainer();
      }
 else {
        return match;
      }
    }
 else {
      return input.getMatch();
    }
  }
  return super.getParentMatch(input);
}",0.7466666666666667
93655,"/** 
 * Checks whether the given   {@link Match}'s sides have changed resources. This will only be called for  {@link Match} elements referencing the root(s) of an EMF Resource.
 * @param match The match that is to be checked.
 */
protected void checkResourceAttachment(Match match){
  final Comparison comparison=match.getComparison();
  if (comparison.getMatchedResources().isEmpty()) {
    return;
  }
  if (match.getLeft() == null && match.getRight() == null) {
    final String uri=match.getOrigin().eResource().getURI().toString();
    getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.LEFT);
    getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.RIGHT);
  }
 else   if (match.getLeft() == null || match.getRight() == null) {
    if (comparison.isThreeWay() && match.getLeft() == null) {
      final String uri=match.getOrigin().eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.LEFT);
    }
 else     if (comparison.isThreeWay() && match.getRight() != null) {
      final String uri=match.getRight().eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.RIGHT);
    }
 else     if (match.getLeft() == null) {
      final String uri=match.getRight().eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.LEFT);
    }
 else {
      final String uri=match.getLeft().eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.ADD,DifferenceSource.LEFT);
    }
  }
}","/** 
 * Checks whether the given   {@link Match}'s sides have changed resources. This will only be called for  {@link Match} elements referencing the root(s) of an EMF Resource.
 * @param match The match that is to be checked.
 */
protected void checkResourceAttachment(Match match){
  final Comparison comparison=match.getComparison();
  if (comparison.getMatchedResources().isEmpty()) {
    return;
  }
  if (match.getLeft() == null && match.getRight() == null) {
    final String uri=match.getOrigin().eResource().getURI().toString();
    getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.LEFT);
    getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.RIGHT);
  }
 else   if (match.getLeft() == null || match.getRight() == null) {
    if (comparison.isThreeWay() && match.getLeft() == null) {
      final String uri=match.getOrigin().eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.LEFT);
    }
 else     if (comparison.isThreeWay()) {
      if (match.getOrigin() != null) {
        final String uri=match.getOrigin().eResource().getURI().toString();
        getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.RIGHT);
      }
 else {
        final String uri=match.getLeft().eResource().getURI().toString();
        getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.ADD,DifferenceSource.LEFT);
      }
    }
 else     if (match.getLeft() == null) {
      final String uri=match.getRight().eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.DELETE,DifferenceSource.LEFT);
    }
 else {
      final String uri=match.getLeft().eResource().getURI().toString();
      getDiffProcessor().resourceAttachmentChange(match,uri,DifferenceKind.ADD,DifferenceSource.LEFT);
    }
  }
}",0.8878681437449338
93656,"public void handleEvent(Event event){
  if (event.item == fLastWidget && event.height == fLastHeight) {
    return;
  }
  fLastWidget=event.item;
  fLastHeight=event.height;
  int newHeight=(int)(event.gc.getFontMetrics().getHeight() * 1.33d);
  if (newHeight % 2 == 1) {
    newHeight+=1;
  }
  event.height=newHeight;
}","public void handleEvent(Event event){
  if (event.item == fLastWidget && event.height == fLastHeight) {
    return;
  }
  fLastWidget=event.item;
  fLastHeight=event.height;
  int newHeight=(int)(event.gc.getFontMetrics().getHeight() * 1.33d);
  if ((newHeight & 1) == 1) {
    newHeight+=1;
  }
  event.height=newHeight;
}",0.9782608695652174
93657,"TableMergeViewer(Composite parent,EMFCompareContentMergeViewer contentMergeViewer,MergeViewerSide side){
  super(parent,side);
  fContentMergeViewer=contentMergeViewer;
  getStructuredViewer().getTable().addListener(SWT.EraseItem,new Listener(){
    public void handleEvent(    Event event){
      TableMergeViewer.this.handleEraseItemEvent(event);
    }
  }
);
  getStructuredViewer().getTable().addListener(SWT.MeasureItem,new Listener(){
    private Widget fLastWidget;
    private int fLastHeight;
    public void handleEvent(    Event event){
      if (event.item == fLastWidget && event.height == fLastHeight) {
        return;
      }
      fLastWidget=event.item;
      fLastHeight=event.height;
      int newHeight=(int)(event.gc.getFontMetrics().getHeight() * 1.33d);
      if (newHeight % 2 == 1) {
        newHeight+=1;
      }
      event.height=newHeight;
    }
  }
);
}","TableMergeViewer(Composite parent,EMFCompareContentMergeViewer contentMergeViewer,MergeViewerSide side){
  super(parent,side);
  fContentMergeViewer=contentMergeViewer;
  getStructuredViewer().getTable().addListener(SWT.EraseItem,new Listener(){
    public void handleEvent(    Event event){
      TableMergeViewer.this.handleEraseItemEvent(event);
    }
  }
);
  getStructuredViewer().getTable().addListener(SWT.MeasureItem,new Listener(){
    private Widget fLastWidget;
    private int fLastHeight;
    public void handleEvent(    Event event){
      if (event.item == fLastWidget && event.height == fLastHeight) {
        return;
      }
      fLastWidget=event.item;
      fLastHeight=event.height;
      int newHeight=(int)(event.gc.getFontMetrics().getHeight() * 1.33d);
      if ((newHeight & 1) == 1) {
        newHeight+=1;
      }
      event.height=newHeight;
    }
  }
);
}",0.992090395480226
93658,"/** 
 * Process all the matches and re-attache them to their parent if one is found.
 */
private void restructureMatchModel(){
  Iterator<Match> it=matches.iterator();
  while (it.hasNext()) {
    Match cur=it.next();
    EObject possibleContainer=null;
    if (cur.getLeft() != null) {
      possibleContainer=cur.getLeft().eContainer();
    }
    if (possibleContainer != null && cur.getRight() != null) {
      possibleContainer=cur.getRight().eContainer();
    }
    if (possibleContainer != null && cur.getOrigin() != null) {
      possibleContainer=cur.getOrigin().eContainer();
    }
    Match possibleContainerMatch=eObjectsToMatch.get(possibleContainer);
    if (possibleContainerMatch != null) {
      ((BasicEList)possibleContainerMatch.getSubmatches()).addUnique(cur);
      it.remove();
    }
  }
  Iterator<Match> it2=matches.iterator();
  if (it2.hasNext()) {
    Match root=it2.next();
    while (it2.hasNext()) {
      ((BasicEList)root.getSubmatches()).addUnique(it2.next());
      it2.remove();
    }
  }
}","/** 
 * Process all the matches and re-attache them to their parent if one is found.
 */
private void restructureMatchModel(){
  Iterator<Match> it=matches.iterator();
  while (it.hasNext()) {
    Match cur=it.next();
    EObject possibleContainer=null;
    if (cur.getLeft() != null) {
      possibleContainer=cur.getLeft().eContainer();
    }
    if (possibleContainer != null && cur.getRight() != null) {
      possibleContainer=cur.getRight().eContainer();
    }
    if (possibleContainer != null && cur.getOrigin() != null) {
      possibleContainer=cur.getOrigin().eContainer();
    }
    Match possibleContainerMatch=eObjectsToMatch.get(possibleContainer);
    if (possibleContainerMatch != null) {
      ((BasicEList<Match>)possibleContainerMatch.getSubmatches()).addUnique(cur);
      it.remove();
    }
  }
  Iterator<Match> it2=matches.iterator();
  if (it2.hasNext()) {
    Match root=it2.next();
    while (it2.hasNext()) {
      ((BasicEList<Match>)root.getSubmatches()).addUnique(it2.next());
      it2.remove();
    }
  }
}",0.993217054263566
93659,"private void addInsertionPoints(final List<Object> values){
  ImmutableMap.Builder<Match,DiffInsertionPoint> insertionsPoints=ImmutableMap.builder();
  for (  ReferenceChange diff : filter(fInput.getDiffFromTheOtherSide().reverse(),ReferenceChange.class)) {
    if (diff.getState() == DifferenceState.UNRESOLVED) {
      boolean rightToLeft=(getSide() == MergeViewerSide.LEFT);
      EObject value=diff.getValue();
      if (value != null) {
        Match match=diff.getMatch();
        Match matchOfDiffValue=match.getComparison().getMatch(value);
        if (matchOfDiffValue != null) {
          DiffInsertionPoint insertionPoint=new DiffInsertionPoint(diff);
          final int insertionIndex;
          if (diff.getReference().isMany()) {
            insertionIndex=DiffUtil.findInsertionIndex(match.getComparison(),diff,rightToLeft);
          }
 else {
            insertionIndex=0;
          }
          values.add(insertionIndex,insertionPoint);
          insertionsPoints.put(matchOfDiffValue,insertionPoint);
        }
      }
    }
  }
  fInsertionPoints=insertionsPoints.build();
}","private void addInsertionPoints(final List<Object> values){
  ImmutableMap.Builder<Match,DiffInsertionPoint> insertionsPoints=ImmutableMap.builder();
  for (  ReferenceChange diff : filter(fInput.getDiffFromTheOtherSide().reverse(),ReferenceChange.class)) {
    if (diff.getState() == DifferenceState.UNRESOLVED) {
      boolean rightToLeft=(getSide() == MergeViewerSide.LEFT);
      EObject value=diff.getValue();
      if (value != null) {
        Match match=diff.getMatch();
        Match matchOfDiffValue=match.getComparison().getMatch(value);
        if (matchOfDiffValue != null) {
          DiffInsertionPoint insertionPoint=new DiffInsertionPoint(diff);
          final int insertionIndex;
          if (diff.getReference().isMany()) {
            insertionIndex=DiffUtil.findInsertionIndex(match.getComparison(),diff,rightToLeft);
          }
 else {
            insertionIndex=0;
          }
          int nbInsertionPointBefore=size(filter(values.subList(0,insertionIndex),DiffInsertionPoint.class));
          values.add(insertionIndex + nbInsertionPointBefore,insertionPoint);
          insertionsPoints.put(matchOfDiffValue,insertionPoint);
        }
      }
    }
  }
  fInsertionPoints=insertionsPoints.build();
}",0.9264516129032258
93660,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.ide.ui.internal.contentmergeviewer.AbstractMergeViewer#createStructuredViewer()
 */
@Override protected final TableViewer createStructuredViewer(Composite parent){
  return new TableViewer(parent);
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.ide.ui.internal.contentmergeviewer.AbstractMergeViewer#createStructuredViewer()
 */
@Override protected final TableViewer createStructuredViewer(Composite parent){
  return new TableViewer(parent,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
}",0.8754325259515571
93661,"private static Rectangle getBoundsForInsertionPoint(TableItem tableItem){
  Rectangle fill=getBounds(tableItem);
  fill.y=fill.y + 6;
  fill.height=fill.height - 12;
  return fill;
}","private static Rectangle getBoundsForInsertionPoint(Event event){
  Rectangle fill=getBounds(event);
  fill.y=fill.y + 6;
  fill.height=fill.height - 12;
  return fill;
}",0.9034090909090908
93662,"private static Rectangle getBounds(TableItem tableItem){
  Rectangle tableBounds=tableItem.getParent().getBounds();
  Rectangle itemBounds=tableItem.getBounds();
  Rectangle fill=new Rectangle(0,0,0,0);
  fill.x=2;
  fill.y=itemBounds.y + 2;
  fill.width=tableBounds.width - 6;
  fill.height=itemBounds.height - 3;
  return fill;
}","private static Rectangle getBounds(Event event){
  TableItem tableItem=(TableItem)event.item;
  Table table=tableItem.getParent();
  Rectangle tableBounds=table.getClientArea();
  Rectangle itemBounds=tableItem.getBounds();
  Rectangle fill=new Rectangle(0,0,0,0);
  fill.x=2;
  fill.y=itemBounds.y + 2;
  fill.width=tableBounds.width - 6;
  fill.height=itemBounds.height - 3;
  final GC g=event.gc;
  int columnCount=table.getColumnCount();
  if (event.index == columnCount - 1 || columnCount == 0) {
    int width=tableBounds.x + tableBounds.width - event.x;
    if (width > 0) {
      Region region=new Region();
      g.getClipping(region);
      region.add(event.x,event.y,width,event.height);
      g.setClipping(region);
      region.dispose();
    }
  }
  g.setAdvanced(true);
  return fill;
}",0.5159010600706714
93663,"private void handleEraseItemEvent(Event event){
  TableItem tableItem=(TableItem)event.item;
  Object data=tableItem.getData();
  boolean specialPaint=false;
  if (data instanceof DiffInsertionPoint) {
    DiffInsertionPoint insertionPoint=(DiffInsertionPoint)data;
    paintItemDiffBox(event,insertionPoint.getDiff(),getBoundsForInsertionPoint(tableItem));
    specialPaint=true;
  }
 else   if (fInput != null) {
    for (    Diff diff : fInput.getDiffFromThisSide()) {
      if (fInput.getValue(diff) == data) {
        paintItemDiffBox(event,diff,getBounds(tableItem));
        specialPaint=true;
      }
    }
    if (getSide() == MergeViewerSide.ANCESTOR) {
      for (      Diff diff : fInput.getDiffFromAncestor()) {
        if (fInput.getValue(diff) == data) {
          paintItemDiffBox(event,diff,getBounds(tableItem));
          specialPaint=true;
        }
      }
    }
  }
  if (!specialPaint) {
    paintItem(event,tableItem);
  }
}","private void handleEraseItemEvent(Event event){
  TableItem tableItem=(TableItem)event.item;
  Object data=tableItem.getData();
  boolean specialPaint=false;
  if (data instanceof DiffInsertionPoint) {
    DiffInsertionPoint insertionPoint=(DiffInsertionPoint)data;
    paintItemDiffBox(event,insertionPoint.getDiff(),getBoundsForInsertionPoint(event));
    specialPaint=true;
  }
 else   if (fInput != null) {
    for (    Diff diff : fInput.getDiffFromThisSide()) {
      if (fInput.getValue(diff) == data) {
        paintItemDiffBox(event,diff,getBounds(event));
        specialPaint=true;
      }
    }
    if (getSide() == MergeViewerSide.ANCESTOR) {
      for (      Diff diff : fInput.getDiffFromAncestor()) {
        if (fInput.getValue(diff) == data) {
          paintItemDiffBox(event,diff,getBounds(event));
          specialPaint=true;
        }
      }
    }
  }
  if (!specialPaint) {
    paintItem(event);
  }
}",0.9722518676627536
93664,"/** 
 * @param event
 * @param tableItem
 */
private void paintItem(Event event,TableItem tableItem){
  event.detail&=~SWT.HOT;
  if (isSelected(event)) {
    Rectangle fill=getBounds(tableItem);
    drawSelectionBox(event,fill);
  }
}","/** 
 * @param event
 * @param tableItem
 */
private void paintItem(Event event){
  event.detail&=~SWT.HOT;
  if (isSelected(event)) {
    Rectangle fill=getBounds(event);
    drawSelectionBox(event,fill);
  }
}",0.9237668161434978
93665,"/** 
 * The diff engine expects this to return the set of attributes that need to be checked for differences for the given   {@link Match} element.<p> This default implementation assumes that all three sides of the match are conform to the same metamodel, and simply returns one of the side's  {@link EClass#getEAllAttributes() side.eClass().getEAllAttributes()}, ignoring only the derived. </p>
 * @param match The match for which we are trying to compute differences.
 * @return The set of attributes that are to be checked by the diff engine. May be an empty iterator, inwhich case no difference will be detected on any of this <code>match</code>'s attributes.
 */
public Iterator<EAttribute> getAttributesToCheck(Match match){
  final EClass clazz;
  if (match.getLeft() != null) {
    clazz=match.getLeft().eClass();
  }
 else   if (match.getRight() != null) {
    clazz=match.getRight().eClass();
  }
 else {
    clazz=match.getOrigin().eClass();
  }
  return Iterators.filter(clazz.getEAllAttributes().iterator(),new Predicate<EAttribute>(){
    public boolean apply(    EAttribute input){
      return input != null && !input.isDerived();
    }
  }
);
}","/** 
 * The diff engine expects this to return the set of attributes that need to be checked for differences for the given   {@link Match} element.<p> This default implementation assumes that all three sides of the match are conform to the same metamodel, and simply returns one of the side's  {@link EClass#getEAllAttributes() side.eClass().getEAllAttributes()}, ignoring only the derived. </p>
 * @param match The match for which we are trying to compute differences.
 * @return The set of attributes that are to be checked by the diff engine. May be an empty iterator, inwhich case no difference will be detected on any of this <code>match</code>'s attributes.
 */
public Iterator<EAttribute> getAttributesToCheck(Match match){
  final EClass clazz;
  if (match.getLeft() != null) {
    clazz=match.getLeft().eClass();
  }
 else   if (match.getRight() != null) {
    clazz=match.getRight().eClass();
  }
 else {
    clazz=match.getOrigin().eClass();
  }
  return Iterators.filter(clazz.getEAllAttributes().iterator(),new Predicate<EAttribute>(){
    public boolean apply(    EAttribute input){
      return input != null && !input.isDerived() && !input.isTransient();
    }
  }
);
}",0.989769820971867
93666,"/** 
 * The diff engine expects this to return the set of references that need to be checked for differences for the given   {@link Match} element.<p> This default implementation assumes that all three sides of the match are conform to the same metamodel, and simply returns one of the side's  {@link EClass#getEAllReferences() side.eClass().getEAllReferences()}, ignoring only the derived and container. </p>
 * @param match The match for which we are trying to compute differences.
 * @return The set of references that are to be checked by the diff engine. May be an empty iterator, inwhich case no difference will be detected on any of this <code>match</code>'s references.
 */
public Iterator<EReference> getReferencesToCheck(Match match){
  final EClass clazz;
  if (match.getLeft() != null) {
    clazz=match.getLeft().eClass();
  }
 else   if (match.getRight() != null) {
    clazz=match.getRight().eClass();
  }
 else {
    clazz=match.getOrigin().eClass();
  }
  return Iterators.filter(clazz.getEAllReferences().iterator(),new Predicate<EReference>(){
    public boolean apply(    EReference input){
      return input != null && !input.isDerived() && !input.isContainer() && input.getEType() != EcorePackage.eINSTANCE.getEGenericType();
    }
  }
);
}","/** 
 * The diff engine expects this to return the set of references that need to be checked for differences for the given   {@link Match} element.<p> This default implementation assumes that all three sides of the match are conform to the same metamodel, and simply returns one of the side's  {@link EClass#getEAllReferences() side.eClass().getEAllReferences()}, ignoring only the derived and container. </p>
 * @param match The match for which we are trying to compute differences.
 * @return The set of references that are to be checked by the diff engine. May be an empty iterator, inwhich case no difference will be detected on any of this <code>match</code>'s references.
 */
public Iterator<EReference> getReferencesToCheck(Match match){
  final EClass clazz;
  if (match.getLeft() != null) {
    clazz=match.getLeft().eClass();
  }
 else   if (match.getRight() != null) {
    clazz=match.getRight().eClass();
  }
 else {
    clazz=match.getOrigin().eClass();
  }
  return Iterators.filter(clazz.getEAllReferences().iterator(),new Predicate<EReference>(){
    public boolean apply(    EReference input){
      return input != null && !input.isDerived() && !input.isContainer() && input.getEType() != EcorePackage.eINSTANCE.getEGenericType() && !input.isTransient();
    }
  }
);
}",0.9905882352941175
93667,"public boolean apply(EAttribute input){
  return input != null && !input.isDerived();
}","public boolean apply(EAttribute input){
  return input != null && !input.isDerived() && !input.isTransient();
}",0.8787878787878788
93668,"/** 
 * Checks the potential equivalence from the given <code>difference</code>.
 * @param comparison The comparison this engine is expected to complete.
 * @param difference The difference that is to be checked
 */
protected void checkForEquivalences(Comparison comparison,Diff difference){
  if (difference instanceof ReferenceChange && ((ReferenceChange)difference).getReference().getEOpposite() != null) {
    ReferenceChange diff=(ReferenceChange)difference;
    Equivalence equivalence=diff.getEquivalence();
    if (equivalence == null) {
      equivalence=CompareFactory.eINSTANCE.createEquivalence();
      comparison.getEquivalences().add(equivalence);
      equivalence.getDifferences().add(diff);
      Set<ReferenceChange> equivalentDifferences=ReferenceUtil.getCrossReferences(crossReferencerModelObjectsToDiffs,MatchUtil.getContainer(comparison,diff),ComparePackage.eINSTANCE.getReferenceChange_Value(),ReferenceChange.class);
      for (      ReferenceChange referenceChange : equivalentDifferences) {
        if (referenceChange.getReference().getEOpposite() != null && referenceChange.getReference().getEOpposite().equals(diff.getReference()) && diff.getValue().equals(MatchUtil.getContainer(comparison,referenceChange))) {
          equivalence.getDifferences().add(referenceChange);
          break;
        }
      }
      addChangesFromOrigin(comparison,diff,equivalence);
    }
  }
}","/** 
 * Checks the potential equivalence from the given <code>difference</code>.
 * @param comparison The comparison this engine is expected to complete.
 * @param difference The difference that is to be checked
 */
protected void checkForEquivalences(Comparison comparison,Diff difference){
  if (difference instanceof ReferenceChange && ((ReferenceChange)difference).getReference().getEOpposite() != null && !((ReferenceChange)difference).getReference().getEOpposite().isContainer() && !((ReferenceChange)difference).getReference().getEOpposite().isDerived()) {
    ReferenceChange diff=(ReferenceChange)difference;
    Equivalence equivalence=diff.getEquivalence();
    if (equivalence == null) {
      equivalence=CompareFactory.eINSTANCE.createEquivalence();
      comparison.getEquivalences().add(equivalence);
      equivalence.getDifferences().add(diff);
      Set<ReferenceChange> equivalentDifferences=ReferenceUtil.getCrossReferences(crossReferencerModelObjectsToDiffs,MatchUtil.getContainer(comparison,diff),ComparePackage.eINSTANCE.getReferenceChange_Value(),ReferenceChange.class);
      for (      ReferenceChange referenceChange : equivalentDifferences) {
        if (referenceChange.getReference().getEOpposite() != null && referenceChange.getReference().getEOpposite().equals(diff.getReference()) && diff.getValue().equals(MatchUtil.getContainer(comparison,referenceChange))) {
          equivalence.getDifferences().add(referenceChange);
          break;
        }
      }
      addChangesFromOrigin(comparison,diff,equivalence);
    }
  }
}",0.9480782198246795
93669,"/** 
 * From a <code>sourceDifference</code> (ADD) on a containment mono-valued reference, it retrieves a potential DELETE difference on the origin value.
 * @param comparison The comparison this engine is expected to complete.
 * @param sourceDifference The given difference.
 * @return The found differences.
 */
private Set<ReferenceChange> getDELOriginValueOnContainmentRefSingle(Comparison comparison,ReferenceChange sourceDifference){
  Set<ReferenceChange> result=new HashSet<ReferenceChange>();
  if (!sourceDifference.getReference().isMany()) {
    EObject originContainer=MatchUtil.getOriginContainer(comparison,sourceDifference);
    Object originValue=originContainer.eGet(sourceDifference.getReference());
    if (originValue instanceof EObject) {
      result=getDifferenceOnGivenObject((EObject)originValue,DifferenceKind.DELETE);
    }
  }
  return result;
}","/** 
 * From a <code>sourceDifference</code> (ADD) on a containment mono-valued reference, it retrieves a potential DELETE difference on the origin value.
 * @param comparison The comparison this engine is expected to complete.
 * @param sourceDifference The given difference.
 * @return The found differences.
 */
private Set<ReferenceChange> getDELOriginValueOnContainmentRefSingle(Comparison comparison,ReferenceChange sourceDifference){
  Set<ReferenceChange> result=new HashSet<ReferenceChange>();
  if (!sourceDifference.getReference().isMany()) {
    EObject originContainer=MatchUtil.getOriginContainer(comparison,sourceDifference);
    if (originContainer != null) {
      Object originValue=originContainer.eGet(sourceDifference.getReference());
      if (originValue instanceof EObject) {
        result=getDifferenceOnGivenObject((EObject)originValue,DifferenceKind.DELETE);
      }
    }
  }
  return result;
}",0.9727323316638844
93670,"/** 
 * From a <code>sourceDifference</code> (DELETE) on a containment reference, it retrieves potential DELETE differences on the outgoing references from the value object of the <code>sourceDifference</code>.
 * @param comparison The comparison this engine is expected to complete.
 * @param sourceDifference The given difference.
 * @return The found differences.
 */
private Set<ReferenceChange> getDELOutgoingReferences(Comparison comparison,ReferenceChange sourceDifference){
  Set<ReferenceChange> result=new HashSet<ReferenceChange>();
  EObject value=sourceDifference.getValue();
  List<EObject> outgoingReferences=value.eCrossReferences();
  for (  EObject outgoingRef : outgoingReferences) {
    Set<ReferenceChange> requiredDifferences=ReferenceUtil.getCrossReferences(crossReferencerModelObjectsToDiffs,outgoingRef,ComparePackage.eINSTANCE.getReferenceChange_Value(),ReferenceChange.class);
    for (    ReferenceChange diff : requiredDifferences) {
      if (!diff.getReference().isContainment() && (diff.getKind().equals(DifferenceKind.DELETE) || isChangeDelete(comparison,diff)) && value.eClass().getEAllReferences().contains(diff.getReference())) {
        result.add(diff);
        break;
      }
    }
  }
  return result;
}","/** 
 * From a <code>sourceDifference</code> (DELETE) on a containment reference, it retrieves potential DELETE differences on the outgoing references from the value object of the <code>sourceDifference</code>.
 * @param comparison The comparison this engine is expected to complete.
 * @param sourceDifference The given difference.
 * @return The found differences.
 */
private Set<ReferenceChange> getDELOutgoingReferences(Comparison comparison,ReferenceChange sourceDifference){
  Set<ReferenceChange> result=new HashSet<ReferenceChange>();
  EObject value=sourceDifference.getValue();
  final List<EObject> outgoingReferences=value.eCrossReferences();
  for (  EObject outgoingRef : outgoingReferences) {
    Set<ReferenceChange> requiredDifferences=ReferenceUtil.getCrossReferences(crossReferencerModelObjectsToDiffs,outgoingRef,ComparePackage.eINSTANCE.getReferenceChange_Value(),ReferenceChange.class);
    for (    ReferenceChange diff : requiredDifferences) {
      if (!diff.getReference().isContainment() && (diff.getKind().equals(DifferenceKind.DELETE) || isChangeDelete(comparison,diff)) && value.eClass().getEAllReferences().contains(diff.getReference())&& MatchUtil.getContainer(comparison,diff).equals(value)) {
        result.add(diff);
      }
    }
  }
  return result;
}",0.9482826687722068
93671,"/** 
 * Get the business model object containing the given <code>difference</code>.
 * @param comparison The comparison.
 * @param difference The difference.
 * @return The object.
 */
public static EObject getContainer(Comparison comparison,ReferenceChange difference){
  EObject result=null;
  final EObject obj=difference.getValue();
  Match valueMatch=comparison.getMatch(obj);
  if (valueMatch.getLeft() == obj) {
    result=difference.getMatch().getLeft();
  }
 else   if (valueMatch.getRight() == obj) {
    result=difference.getMatch().getRight();
  }
 else   if (valueMatch.getOrigin() == obj) {
    result=difference.getMatch().getOrigin();
  }
  return result;
}","public static EObject getContainer(Comparison comparison,Diff difference){
  if (difference instanceof AttributeChange) {
    return getContainer(comparison,(AttributeChange)difference);
  }
 else   if (difference instanceof ReferenceChange) {
    return getContainer(comparison,(ReferenceChange)difference);
  }
  return null;
}",0.1656686626746507
93672,"@DiffTest public void testIdentifierDiffTest(IComparisonScope scope,Comparison comparison){
  final List<Diff> differences=comparison.getDifferences();
  assertAdded(differences,""String_Node_Str"",DifferenceSource.LEFT);
  assertAdded(differences,""String_Node_Str"",DifferenceSource.LEFT);
  assertAdded(differences,""String_Node_Str"",DifferenceSource.LEFT);
  assertAdded(differences,""String_Node_Str"",DifferenceSource.LEFT);
  assertRemoved(differences,""String_Node_Str"",DifferenceSource.LEFT);
  assertRemoved(differences,""String_Node_Str"",DifferenceSource.LEFT);
  assertRemoved(differences,""String_Node_Str"",DifferenceSource.LEFT);
  assertRemoved(differences,""String_Node_Str"",DifferenceSource.LEFT);
}","@DiffTest public void testIdentifierDiffTest(IComparisonScope scope,Comparison comparison){
  final List<Diff> differences=comparison.getDifferences();
  assertAdded(differences,""String_Node_Str"",DifferenceSource.LEFT);
  assertAdded(differences,""String_Node_Str"",DifferenceSource.LEFT);
  assertAdded(differences,""String_Node_Str"",DifferenceSource.LEFT);
  assertAdded(differences,""String_Node_Str"",DifferenceSource.LEFT);
  assertRemoved(differences,""String_Node_Str"",DifferenceSource.LEFT);
  assertRemoved(differences,""String_Node_Str"",DifferenceSource.LEFT);
  assertRemoved(differences,""String_Node_Str"",DifferenceSource.LEFT);
  assertChangedAttribute(differences,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",DifferenceSource.LEFT);
  assertChangedAttribute(differences,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",DifferenceSource.LEFT);
  if (comparison.isThreeWay()) {
    assertAdded(differences,""String_Node_Str"",DifferenceSource.RIGHT);
    assertAdded(differences,""String_Node_Str"",DifferenceSource.RIGHT);
    assertAdded(differences,""String_Node_Str"",DifferenceSource.RIGHT);
    assertAdded(differences,""String_Node_Str"",DifferenceSource.RIGHT);
    assertAdded(differences,""String_Node_Str"",DifferenceSource.RIGHT);
    assertRemoved(differences,""String_Node_Str"",DifferenceSource.RIGHT);
    assertRemoved(differences,""String_Node_Str"",DifferenceSource.RIGHT);
    assertChangedReference(differences,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",DifferenceSource.RIGHT);
  }
 else {
    assertRemoved(differences,""String_Node_Str"",DifferenceSource.LEFT);
    assertRemoved(differences,""String_Node_Str"",DifferenceSource.LEFT);
    assertRemoved(differences,""String_Node_Str"",DifferenceSource.LEFT);
    assertRemoved(differences,""String_Node_Str"",DifferenceSource.LEFT);
    assertRemoved(differences,""String_Node_Str"",DifferenceSource.LEFT);
    assertAdded(differences,""String_Node_Str"",DifferenceSource.LEFT);
    assertAdded(differences,""String_Node_Str"",DifferenceSource.LEFT);
  }
}",0.4937027707808564
93673,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.ui.viewer.AbstractOrderingAction#doRun(org.eclipse.emf.compare.ui.viewer.structure.ParameterizedStructureContentProvider)
 */
@Override protected void doRun(ParameterizedStructureContentProvider provider){
  final List<IDifferenceFilter> filters=new ArrayList<IDifferenceFilter>();
  filters.addAll(menu.getSelectedFilters());
  if (isChecked()) {
    filters.add(relatedFilter);
  }
 else {
    filters.remove(relatedFilter);
  }
  mViewer.getCompareConfiguration().setProperty(EMFCompareConstants.PROPERTY_STRUCTURE_FILTERS,filters);
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.ui.viewer.AbstractOrderingAction#doRun(org.eclipse.emf.compare.ui.viewer.structure.ParameterizedStructureContentProvider)
 */
@Override protected void doRun(ParameterizedStructureContentProvider provider){
  final List<IDifferenceFilter> filters=new ArrayList<IDifferenceFilter>();
  if (isChecked()) {
    menu.getSelectedFilters().add(relatedFilter);
  }
 else {
    menu.getSelectedFilters().remove(relatedFilter);
  }
  filters.addAll(menu.getSelectedFilters());
  mViewer.getCompareConfiguration().setProperty(EMFCompareConstants.PROPERTY_STRUCTURE_FILTERS,filters);
}",0.7996715927750411
93674,"/** 
 * Sets the target of the given reference (The generic diff engine finds a target in the model, but stereotype values and features should apply to the ""base"" element of a diff).
 * @param updateReference {@link UpdateReference} from DiffModel.
 * @param ret {@link UpdateReference} which will be modified and return.
 * @see UMLUtil#getBaseElement(EObject)
 */
protected void setTargets(final UpdateReference updateReference,final UpdateReference ret){
  final EStructuralFeature reference=updateReference.getReference();
  final EObject diffRightTarget=updateReference.getRightTarget();
  final EObject rightTargetBase=UMLUtil.getBaseElement(diffRightTarget);
  if (rightTargetBase != null && rightTargetBase.eGet(reference) != null) {
    ret.setRightTarget(rightTargetBase);
  }
  final EObject diffLeftTarget=updateReference.getLeftTarget();
  final EObject leftTargetBase=UMLUtil.getBaseElement(diffLeftTarget);
  if (leftTargetBase != null && leftTargetBase.eGet(reference) != null) {
    ret.setLeftTarget(leftTargetBase);
  }
}","/** 
 * Sets the target of the given reference (The generic diff engine finds a target in the model, but stereotype values and features should apply to the ""base"" element of a diff).
 * @param updateReference {@link UpdateReference} from DiffModel.
 * @param ret {@link UpdateReference} which will be modified and return.
 * @see UMLUtil#getBaseElement(EObject)
 */
protected void setTargets(final UpdateReference updateReference,final UpdateReference ret){
  final EStructuralFeature reference=updateReference.getReference();
  final EObject rightTarget=updateReference.getRightTarget();
  final EObject rightTargetBase=UMLUtil.getBaseElement(rightTarget);
  if (rightTargetBase != null && rightTargetBase.eGet(reference) != null) {
    ret.setRightTarget(rightTargetBase);
  }
 else {
    ret.setRightTarget(rightTarget);
  }
  final EObject leftTarget=updateReference.getLeftTarget();
  final EObject leftTargetBase=UMLUtil.getBaseElement(leftTarget);
  if (leftTargetBase != null && leftTargetBase.eGet(reference) != null) {
    ret.setLeftTarget(leftTargetBase);
  }
 else {
    ret.setLeftTarget(leftTarget);
  }
}",0.9444444444444444
93675,"/** 
 * This will check the given <code>reference</code> for modification between <code>leftElement</code> and <code>rightElement</code> and create the corresponding   {@link DiffElement}s under the given  {@link DiffGroup}.
 * @param root {@link DiffGroup Root} of the {@link DiffElement}s to create.
 * @param reference {@link EReference} to check for modifications.
 * @param leftElement Element corresponding to the final value for the given reference.
 * @param rightElement Element corresponding to the initial value for the given reference.
 * @throws FactoryException Thrown if we cannot fetch <code>reference</code>'s values for either the left or the right element.
 */
private void createNonConflictingReferencesUpdate(DiffGroup root,EReference reference,EObject leftElement,EObject rightElement) throws FactoryException {
  final List<Object> leftElementObjReferences=convertFeatureMapList(EFactory.eGetAsList(leftElement,reference.getName()));
  final List<Object> rightElementObjReferences=convertFeatureMapList(EFactory.eGetAsList(rightElement,reference.getName()));
  final List<EObject> leftElementReferences=new ArrayList<EObject>();
  final List<EObject> rightElementReferences=new ArrayList<EObject>();
  for (  Object left : leftElementObjReferences) {
    leftElementReferences.add((EObject)left);
  }
  for (  Object right : rightElementObjReferences) {
    rightElementReferences.add((EObject)right);
  }
  final List<EObject> deletedReferences=computeDeletedReferences(leftElementReferences,rightElementReferences);
  final List<EObject> addedReferences=computeAddedReferences(leftElementReferences,rightElementReferences);
  if (!reference.isMany()) {
    EObject addedValue=null;
    EObject deletedValue=null;
    if (addedReferences.size() > 0) {
      addedValue=addedReferences.get(0);
    }
    if (deletedReferences.size() > 0) {
      deletedValue=deletedReferences.get(0);
    }
    if (areDistinct(addedValue,deletedValue)) {
      root.getSubDiffElements().add(createUpdatedReferenceOperation(leftElement,rightElement,reference,addedValue,deletedValue));
    }
  }
 else {
    deletedReferences.removeAll(addedReferences);
    addedReferences.removeAll(deletedReferences);
    final List<ReferenceChangeLeftTarget> addedReferencesDiffs=new ArrayList<ReferenceChangeLeftTarget>(addedReferences.size());
    final List<ReferenceChangeRightTarget> removedReferencesDiffs=new ArrayList<ReferenceChangeRightTarget>(deletedReferences.size());
    if (addedReferences.size() > 0) {
      addedReferencesDiffs.addAll(createNewReferencesOperation(root,leftElement,rightElement,reference,addedReferences));
    }
    if (deletedReferences.size() > 0) {
      removedReferencesDiffs.addAll(createRemovedReferencesOperation(root,leftElement,rightElement,reference,deletedReferences));
    }
    if (reference.isOrdered()) {
      checkReferenceOrderChange(root,reference,leftElement,rightElement,addedReferencesDiffs,removedReferencesDiffs);
    }
  }
}","/** 
 * This will check the given <code>reference</code> for modification between <code>leftElement</code> and <code>rightElement</code> and create the corresponding   {@link DiffElement}s under the given  {@link DiffGroup}.
 * @param root {@link DiffGroup Root} of the {@link DiffElement}s to create.
 * @param reference {@link EReference} to check for modifications.
 * @param leftElement Element corresponding to the final value for the given reference.
 * @param rightElement Element corresponding to the initial value for the given reference.
 * @throws FactoryException Thrown if we cannot fetch <code>reference</code>'s values for either the left or the right element.
 */
private void createNonConflictingReferencesUpdate(DiffGroup root,EReference reference,EObject leftElement,EObject rightElement) throws FactoryException {
  final List<Object> leftElementObjReferences=convertFeatureMapList(EFactory.eGetAsList(leftElement,reference.getName()));
  final List<Object> rightElementObjReferences=convertFeatureMapList(EFactory.eGetAsList(rightElement,reference.getName()));
  final List<EObject> leftElementReferences=new ArrayList<EObject>();
  final List<EObject> rightElementReferences=new ArrayList<EObject>();
  for (  Object left : leftElementObjReferences) {
    leftElementReferences.add((EObject)left);
  }
  for (  Object right : rightElementObjReferences) {
    rightElementReferences.add((EObject)right);
  }
  final List<EObject> deletedReferences=computeDeletedReferences(leftElementReferences,rightElementReferences);
  final List<EObject> addedReferences=computeAddedReferences(leftElementReferences,rightElementReferences);
  if (!reference.isMany()) {
    EObject addedValue=null;
    EObject deletedValue=null;
    if (addedReferences.size() > 0) {
      addedValue=addedReferences.get(0);
    }
    if (deletedReferences.size() > 0) {
      deletedValue=deletedReferences.get(0);
    }
    if (getMatchManager().isUnmatched(addedValue) || getMatchManager().isUnmatched(deletedValue) || areDistinct(addedValue,deletedValue)) {
      root.getSubDiffElements().add(createUpdatedReferenceOperation(leftElement,rightElement,reference,addedValue,deletedValue));
    }
  }
 else {
    deletedReferences.removeAll(addedReferences);
    addedReferences.removeAll(deletedReferences);
    final List<ReferenceChangeLeftTarget> addedReferencesDiffs=new ArrayList<ReferenceChangeLeftTarget>(addedReferences.size());
    final List<ReferenceChangeRightTarget> removedReferencesDiffs=new ArrayList<ReferenceChangeRightTarget>(deletedReferences.size());
    if (addedReferences.size() > 0) {
      addedReferencesDiffs.addAll(createNewReferencesOperation(root,leftElement,rightElement,reference,addedReferences));
    }
    if (deletedReferences.size() > 0) {
      removedReferencesDiffs.addAll(createRemovedReferencesOperation(root,leftElement,rightElement,reference,deletedReferences));
    }
    if (reference.isOrdered()) {
      checkReferenceOrderChange(root,reference,leftElement,rightElement,addedReferencesDiffs,removedReferencesDiffs);
    }
  }
}",0.9847883597883598
93676,"/** 
 * Get the all the referenced model objects from the specified difference.
 * @param diff The difference.
 * @return The list of the model objects.
 */
private static Set<EObject> getReferencedEObjects(final DiffElement diff){
  EObject elt=null;
  final Set<EObject> referencedEObjects=new LinkedHashSet<EObject>();
  if (diff instanceof ModelElementChangeLeftTarget) {
    final ModelElementChangeLeftTarget mec=(ModelElementChangeLeftTarget)diff;
    elt=mec.getLeftElement();
    referencedEObjects.addAll(DiffReferenceUtil.getReferencedEObjects(elt,true));
    referencedEObjects.remove(elt);
  }
 else   if (diff instanceof ModelElementChangeRightTarget) {
    final ModelElementChangeRightTarget mec=(ModelElementChangeRightTarget)diff;
    elt=mec.getRightElement();
    referencedEObjects.addAll(DiffReferenceUtil.getReferencedEObjects(elt,true));
    referencedEObjects.remove(elt);
  }
 else   if (diff instanceof ReferenceChangeLeftTarget) {
    final ReferenceChangeLeftTarget rc=(ReferenceChangeLeftTarget)diff;
    final EObject leftTarget=rc.getLeftTarget();
    if (leftTarget != null) {
      referencedEObjects.add(leftTarget);
    }
  }
 else   if (diff instanceof ReferenceChangeRightTarget) {
    final ReferenceChangeRightTarget rc=(ReferenceChangeRightTarget)diff;
    final EObject rightTarget=rc.getRightTarget();
    if (rightTarget != null) {
      referencedEObjects.add(rightTarget);
    }
  }
 else   if (diff instanceof UpdateReference) {
    final UpdateReference ur=(UpdateReference)diff;
    if (ur.getLeftTarget() != null && ur.getLeftTarget() != ur.getLeftElement()) {
      referencedEObjects.add(ur.getLeftTarget());
    }
    if (ur.getRightTarget() != null && ur.getRightTarget() != ur.getRightElement()) {
      referencedEObjects.add(ur.getRightTarget());
    }
  }
  return referencedEObjects;
}","/** 
 * Get the all the referenced model objects from the specified difference.
 * @param diff The difference.
 * @return The list of the model objects.
 */
private static Set<EObject> getReferencedEObjects(final DiffElement diff){
  EObject elt=null;
  final Set<EObject> referencedEObjects=new LinkedHashSet<EObject>();
  if (diff instanceof ModelElementChangeLeftTarget) {
    final ModelElementChangeLeftTarget mec=(ModelElementChangeLeftTarget)diff;
    elt=mec.getLeftElement();
    referencedEObjects.addAll(DiffReferenceUtil.getReferencedEObjects(elt,true));
    referencedEObjects.remove(elt);
  }
 else   if (diff instanceof ModelElementChangeRightTarget) {
    final ModelElementChangeRightTarget mec=(ModelElementChangeRightTarget)diff;
    elt=mec.getRightElement();
    referencedEObjects.addAll(DiffReferenceUtil.getReferencedEObjects(elt,true));
    referencedEObjects.remove(elt);
  }
 else   if (diff instanceof ReferenceChangeLeftTarget) {
    final ReferenceChangeLeftTarget rc=(ReferenceChangeLeftTarget)diff;
    final EObject leftTarget=rc.getLeftTarget();
    if (leftTarget != null) {
      referencedEObjects.add(leftTarget);
    }
  }
 else   if (diff instanceof ReferenceChangeRightTarget) {
    final ReferenceChangeRightTarget rc=(ReferenceChangeRightTarget)diff;
    final EObject rightTarget=rc.getRightTarget();
    if (rightTarget != null) {
      referencedEObjects.add(rightTarget);
    }
  }
 else   if (diff instanceof UpdateReference) {
    final UpdateReference ur=(UpdateReference)diff;
    final EObject leftTarget=ur.getLeftTarget();
    final EObject rightTarget=ur.getRightTarget();
    if (leftTarget != null && leftTarget != ur.getLeftElement()) {
      referencedEObjects.add(leftTarget);
    }
    if (rightTarget != null && rightTarget != ur.getRightElement()) {
      referencedEObjects.add(rightTarget);
    }
  }
  return referencedEObjects;
}",0.9128342245989304
93677,"/** 
 * Checks if the given difference   {@link dest} is a good candidate to be added as required difference thespecified difference  {@link origin}. A good candidate is a   {@link ModelElementChange} which is not an{@link AbstractDiffExtension}.
 * @param origin The difference to fill.
 * @param dest The difference candidate.
 */
private static void linkDifferences(final DiffElement origin,final EObject dest){
  if (dest instanceof ModelElementChange && !(dest instanceof AbstractDiffExtension)) {
    final ModelElementChange mec=(ModelElementChange)dest;
    origin.getRequires().add(mec);
  }
}","/** 
 * Checks if the given difference   {@link dest} is a good candidate to be added as required difference thespecified difference  {@link origin}. A good candidate is a   {@link ModelElementChange} which is not an{@link AbstractDiffExtension}.
 * @param origin The difference to fill.
 * @param dest The difference candidate.
 */
private static void linkDifferences(final DiffElement origin,final EObject dest){
  if (dest instanceof ModelElementChange && !(dest instanceof AbstractDiffExtension)) {
    final ModelElementChange mec=(ModelElementChange)dest;
    origin.getRequires().add(mec);
    if (origin instanceof UpdateReference) {
      final UpdateReference updateDiff=(UpdateReference)origin;
      final EObject changedElement;
      if (mec instanceof ModelElementChangeLeftTarget) {
        changedElement=((ModelElementChangeLeftTarget)mec).getLeftElement();
      }
 else {
        changedElement=((ModelElementChangeRightTarget)mec).getRightElement();
      }
      if (updateDiff.getLeftTarget() == changedElement) {
        updateDiff.setLeftTarget(null);
      }
 else       if (updateDiff.getRightTarget() == changedElement) {
        updateDiff.setRightTarget(null);
      }
    }
  }
}",0.6644591611479028
93678,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.uml2.diff.internal.extension.IDiffExtensionFactory#create(org.eclipse.emf.compare.diff.metamodel.DiffElement,org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer)
 */
public AbstractDiffExtension create(DiffElement input,EcoreUtil.CrossReferencer crossReferencer){
  final UpdateReference updateReference=(UpdateReference)input;
  final EObject leftElement=updateReference.getLeftElement();
  final EObject rightElement=updateReference.getRightElement();
  final EObject leftBase=UMLUtil.getBaseElement(leftElement);
  final EObject rightBase=UMLUtil.getBaseElement(rightElement);
  final UMLStereotypeUpdateReference ret=UML2DiffFactory.eINSTANCE.createUMLStereotypeUpdateReference();
  ret.setStereotype(UMLUtil.getStereotype(rightElement));
  ret.setRemote(input.isRemote());
  ret.setReference(updateReference.getReference());
  ret.setLeftElement(leftBase);
  ret.setRightElement(rightBase);
  ret.setRightTarget(updateReference.getRightTarget());
  ret.setLeftTarget(updateReference.getLeftTarget());
  ret.getHideElements().add(input);
  ret.getRequires().add(input);
  return ret;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.uml2.diff.internal.extension.IDiffExtensionFactory#create(org.eclipse.emf.compare.diff.metamodel.DiffElement,org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer)
 */
public AbstractDiffExtension create(DiffElement input,EcoreUtil.CrossReferencer crossReferencer){
  final UpdateReference updateReference=(UpdateReference)input;
  final EObject leftElement=updateReference.getLeftElement();
  final EObject rightElement=updateReference.getRightElement();
  final EObject leftBase=UMLUtil.getBaseElement(leftElement);
  final EObject rightBase=UMLUtil.getBaseElement(rightElement);
  final UMLStereotypeUpdateReference ret=UML2DiffFactory.eINSTANCE.createUMLStereotypeUpdateReference();
  ret.setStereotype(UMLUtil.getStereotype(rightElement));
  ret.setRemote(input.isRemote());
  ret.setReference(updateReference.getReference());
  ret.setLeftElement(leftBase);
  ret.setRightElement(rightBase);
  setTargets(updateReference,ret);
  ret.getHideElements().add(input);
  ret.getRequires().add(input);
  return ret;
}",0.9453230908269318
93679,"/** 
 * Create a condition for emf query out of an ocl condition having an expression and optionally checking also the type.
 * @param condition An OCL condition containing an expression and information whether to also check the type.
 * @return A condition for EMF query or <code>null</code>, if the condition could not be created e.g. because theexpression was not parseable.
 */
public static EObjectCondition getWhereCondition(OclCondition condition){
  String key=condition.getElementReference().getType().getInstanceClassName() + (condition.isCheckType() ? ""String_Node_Str"" : ""String_Node_Str"") + condition.getExpression();
  EObjectCondition whereCondition=cachedConditions.get(key);
  if (whereCondition == null) {
    OCLHelper<EClassifier,?,?,?> helper=ocl.createOCLHelper();
    helper.setContext(condition.getElementReference().getType());
    Query<EClassifier,EClass,EObject> query;
    try {
      final OCLExpression<EClassifier> oclExpression=helper.createQuery(condition.getExpression());
      query=ocl.createQuery(oclExpression);
    }
 catch (    final ParserException e) {
      Activator.getDefault().logError(""String_Node_Str"" + condition.getExpression(),e);
      return null;
    }
    whereCondition=new BooleanOCLCondition<EClassifier,EClass,EObject>(ocl.getEnvironment(),query,condition.isCheckType() ? condition.getElementReference().getType() : null,PruneHandler.NEVER);
    cachedConditions.put(key,whereCondition);
  }
  return whereCondition;
}","/** 
 * Create a condition for emf query out of an ocl condition having an expression and optionally checking also the type.
 * @param condition An OCL condition containing an expression and information whether to also check the type.
 * @return A condition for EMF query or <code>null</code>, if the condition could not be created e.g. because theexpression was not parseable.
 */
public static EObjectCondition getWhereCondition(OclCondition condition){
  String key=condition.getElementReference().getType().getInstanceClassName() + (condition.isCheckType() ? ""String_Node_Str"" : ""String_Node_Str"") + condition.getExpression();
  EObjectCondition whereCondition=cachedConditions.get(key);
  if (whereCondition == null) {
    OCLHelper<EClassifier,?,?,?> helper=ocl.createOCLHelper();
    helper.setContext(condition.getElementReference().getType());
    Query<EClassifier,EClass,EObject> query;
    try {
      final String expression=condition.getExpression().replace(""String_Node_Str"",""String_Node_Str"");
      final OCLExpression<EClassifier> oclExpression=helper.createQuery(expression);
      query=ocl.createQuery(oclExpression);
    }
 catch (    final ParserException e) {
      Activator.getDefault().logError(""String_Node_Str"" + condition.getExpression(),e);
      return null;
    }
    whereCondition=new BooleanOCLCondition<EClassifier,EClass,EObject>(ocl.getEnvironment(),query,condition.isCheckType() ? condition.getElementReference().getType() : null,PruneHandler.NEVER);
    cachedConditions.put(key,whereCondition);
  }
  return whereCondition;
}",0.9609451919921234
93680,"/** 
 * Check the validity of all ocl expressions by parsing them.
 * @param mpatch MPatch.
 */
public static void checkOclExpressions(MPatchModel mpatch){
  final List<EObject> oclConditions=ExtEcoreUtils.collectTypedElements(mpatch.getChanges(),Collections.singleton(SymrefsPackage.Literals.OCL_CONDITION),true);
  for (  EObject eObject : oclConditions) {
    if (eObject instanceof OclCondition) {
      OclCondition oclCondition=(OclCondition)eObject;
      final EObjectCondition condition=OCLConditionHelper.getWhereCondition(oclCondition);
      if (condition == null)       OCLConditionHelper.getWhereCondition(oclCondition);
      assertNotNull(""String_Node_Str"" + oclCondition.getExpression(),condition);
    }
 else     fail(""String_Node_Str"");
  }
}","/** 
 * Check the validity of all ocl expressions by parsing them.
 * @param mpatch MPatch.
 */
public static void checkOclExpressions(MPatchModel mpatch){
  final List<EObject> oclConditions=ExtEcoreUtils.collectTypedElements(mpatch.getChanges(),Collections.singleton(SymrefsPackage.Literals.OCL_CONDITION),true);
  for (  EObject eObject : oclConditions) {
    if (eObject instanceof OclCondition) {
      OclCondition oclCondition=(OclCondition)eObject;
      final EObjectCondition condition=OCLConditionHelper.getWhereCondition(oclCondition);
      assertNotNull(""String_Node_Str"" + oclCondition.getExpression(),condition);
    }
 else {
      fail(""String_Node_Str"");
    }
  }
}",0.9329647546648238
93681,"/** 
 * main mapping: an emfdiff diffmodel is mapped to an mpatch
 */
protected MPatchModel toMPatchModel(DiffModel diffModel){
  if (diffModel.getLeftRoots().isEmpty() || diffModel.getRightRoots().isEmpty()) {
    log(""String_Node_Str"",diffModel);
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!diffModel.getAncestorRoots().isEmpty()) {
    log(""String_Node_Str"",diffModel);
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final MPatchModel mpatch=MPatchFactory.eINSTANCE.createMPatchModel();
  final List<String> leftUris=new ArrayList<String>();
  final List<String> rightUris=new ArrayList<String>();
  for (  EObject left : diffModel.getLeftRoots())   leftUris.add(lib.toUriString(left.eResource()));
  for (  EObject right : diffModel.getRightRoots())   rightUris.add(lib.toUriString(right.eResource()));
  mpatch.setNewModel(CommonUtils.join(leftUris,""String_Node_Str""));
  mpatch.setOldModel(CommonUtils.join(rightUris,""String_Node_Str""));
  mpatch.setEmfdiff(lib.toUriString(diffModel.eResource()));
  final List<EObject> diffElements=ExtEcoreUtils.collectTypedElements(diffModel.getOwnedElements(),Collections.singleton(DiffPackage.Literals.DIFF_ELEMENT),true);
  for (  EObject diffElement : diffElements) {
    if (!(diffElement instanceof DiffGroup)) {
      mpatch.getChanges().add(toIndepChange((DiffElement)diffElement));
    }
  }
  log(mpatch.getChanges().size() + ""String_Node_Str"",null);
  return mpatch;
}","/** 
 * main mapping: an emfdiff diffmodel is mapped to an mpatch
 */
protected MPatchModel toMPatchModel(DiffModel diffModel){
  if (diffModel.getLeftRoots().isEmpty() || diffModel.getRightRoots().isEmpty()) {
    log(""String_Node_Str"",diffModel);
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!diffModel.getAncestorRoots().isEmpty()) {
    log(""String_Node_Str"",diffModel);
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final MPatchModel mpatch=MPatchFactory.eINSTANCE.createMPatchModel();
  final List<String> leftUris=new ArrayList<String>();
  final List<String> rightUris=new ArrayList<String>();
  for (  EObject left : diffModel.getLeftRoots())   leftUris.add(lib.toUriString(left.eResource()));
  for (  EObject right : diffModel.getRightRoots())   rightUris.add(lib.toUriString(right.eResource()));
  mpatch.setNewModel(CommonUtils.join(leftUris,""String_Node_Str""));
  mpatch.setOldModel(CommonUtils.join(rightUris,""String_Node_Str""));
  mpatch.setEmfdiff(lib.toUriString(diffModel.eResource()));
  final List<EObject> diffElements=ExtEcoreUtils.collectTypedElements(diffModel.getOwnedElements(),Collections.singleton(DiffPackage.Literals.DIFF_ELEMENT),true);
  for (  EObject diffElement : diffElements) {
    if (shallTransform((DiffElement)diffElement)) {
      mpatch.getChanges().add(toIndepChange((DiffElement)diffElement));
    }
  }
  log(mpatch.getChanges().size() + ""String_Node_Str"",null);
  return mpatch;
}",0.9778685733741912
93682,"/** 
 * {@inheritDoc}
 * @see org.eclipse.jface.wizard.Wizard#addPages()
 */
@Override public void addPages(){
  final String fileName=file == null ? ""String_Node_Str"" + MPatchConstants.FILE_EXTENSION_MPATCH : file.getName();
  page=new EmfdiffExportWizardPage(MPatchConstants.MPATCH_LONG_NAME + ""String_Node_Str"",new StructuredSelection(file));
  page.setTitle(MPatchConstants.MPATCH_LONG_NAME);
  page.setDescription(""String_Node_Str"" + MPatchConstants.MPATCH_LONG_NAME + ""String_Node_Str"");
  page.setFileName(fileName);
  addPage(page);
  super.addPages();
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.jface.wizard.Wizard#addPages()
 */
@Override public void addPages(){
  final String fileName=file == null ? ""String_Node_Str"" + MPatchConstants.FILE_EXTENSION_MPATCH : file.getName();
  page=new EmfdiffExportWizardPage(MPatchConstants.MPATCH_LONG_NAME + ""String_Node_Str"",file == null ? StructuredSelection.EMPTY : new StructuredSelection(file));
  page.setTitle(MPatchConstants.MPATCH_LONG_NAME);
  page.setDescription(""String_Node_Str"" + MPatchConstants.MPATCH_LONG_NAME + ""String_Node_Str"");
  page.setFileName(fileName);
  addPage(page);
  super.addPages();
}",0.9631533847472152
93683,"/** 
 * This will initialize the core preferences to their default values.
 */
private void initializeDefaultPreferences(){
  final IEclipsePreferences defaultCorePreferences=new DefaultScope().getNode(PLUGIN_ID);
  defaultCorePreferences.putInt(EMFComparePreferenceConstants.PREFERENCES_KEY_SEARCH_WINDOW,EMFComparePreferenceConstants.PREFERENCES_DEFAULT_SEARCH_WINDOW);
}","/** 
 * This will initialize the core preferences to their default values.
 */
private void initializeDefaultPreferences(){
  final IEclipsePreferences defaultCorePreferences=DefaultScope.INSTANCE.getNode(PLUGIN_ID);
  defaultCorePreferences.putInt(EMFComparePreferenceConstants.PREFERENCES_KEY_SEARCH_WINDOW,EMFComparePreferenceConstants.PREFERENCES_DEFAULT_SEARCH_WINDOW);
}",0.9479305740987984
93684,"/** 
 * Filter only those resolved corresponding elements whose state is valid. In case there are too many elements resolved, i.e. the number of resolved elements is greater than <code>maxElements</code>, then only the first <code>#maxElements</code> are used!!! <b>This is just a heuristic and might remove wanted and return unwanted elements!!! So the user should ALWAYS check the resolution manually!!!</b>
 * @param change The change under investigation.
 * @param mapping The resolution of all changes.
 * @param maxElements The maximum number of resolved corresponding elements allowed.
 * @param reduce If <code>true</code>, then the resolutions might be reduced to the maximum number of allowed elements as defined by <code>maxElements</code>. However, it might remove good matches, too!
 * @param forward The direction of resolution.
 * @return <code>true</code> if the resolution could be fixed for the given conditions, <code>false</code>otherwise.
 */
private static boolean filterValidStates(IndepChange change,ResolvedSymbolicReferences mapping,int maxElements,boolean reduce,boolean forward){
  final Map<IElementReference,List<EObject>> changeMapping=mapping.getResolutionByChange().get(change);
  final List<EObject> resolvedElements=changeMapping.get(change.getCorrespondingElement());
  final List<EObject> allResolvedElements=new ArrayList<EObject>(resolvedElements);
  final List<EObject> validElements=new ArrayList<EObject>(resolvedElements.size());
  for (  EObject element : allResolvedElements) {
    resolvedElements.clear();
    resolvedElements.add(element);
    final ValidationResult state=MPatchValidator.validateElementState(change,mapping,true,forward);
    if (ValidationResult.STATE_BEFORE.equals(state) || ValidationResult.STATE_AFTER.equals(state))     validElements.add(element);
  }
  resolvedElements.clear();
  final int count=reduce ? Math.min(maxElements,validElements.size()) : validElements.size();
  for (int i=0; i < count; i++) {
    resolvedElements.add(validElements.get(i));
  }
  return !resolvedElements.isEmpty();
}","/** 
 * Filter only those resolved corresponding elements whose state is valid. In case there are too many elements resolved, i.e. the number of resolved elements is greater than <code>maxElements</code>, then only the first <code>#maxElements</code> are used!!! <b>This is just a heuristic and might remove wanted and return unwanted elements!!! So the user should ALWAYS check the resolution manually!!!</b>
 * @param change The change under investigation.
 * @param mapping The resolution of all changes.
 * @param maxElements The maximum number of resolved corresponding elements allowed.
 * @param reduce If <code>true</code>, then the resolutions might be reduced to the maximum number of allowed elements as defined by <code>maxElements</code>. However, it might remove good matches, too!
 * @param forward The direction of resolution.
 * @return <code>true</code> if the resolution could be fixed for the given conditions, <code>false</code>otherwise.
 */
private static boolean filterValidStates(IndepChange change,ResolvedSymbolicReferences mapping,int maxElements,boolean reduce,boolean forward){
  final Map<IElementReference,List<EObject>> changeMapping=mapping.getResolutionByChange().get(change);
  final List<EObject> resolvedElements=changeMapping.get(change.getCorrespondingElement());
  final List<EObject> allResolvedElements=new ArrayList<EObject>(resolvedElements);
  final List<EObject> beforeElements=new ArrayList<EObject>(resolvedElements.size());
  final List<EObject> afterElements=new ArrayList<EObject>(resolvedElements.size());
  for (  EObject element : allResolvedElements) {
    resolvedElements.clear();
    resolvedElements.add(element);
    final ValidationResult state=MPatchValidator.validateElementState(change,mapping,true,forward);
    if (ValidationResult.STATE_BEFORE.equals(state))     beforeElements.add(element);
 else     if (ValidationResult.STATE_AFTER.equals(state))     afterElements.add(element);
  }
  resolvedElements.clear();
  final List<EObject> validElements=beforeElements.isEmpty() ? afterElements : beforeElements;
  final int count=reduce ? Math.min(maxElements,validElements.size()) : validElements.size();
  for (int i=0; i < count; i++) {
    resolvedElements.add(validElements.get(i));
  }
  return !resolvedElements.isEmpty();
}",0.9418231791113147
93685,"/** 
 * Check if the element to remove exists in at least one (<code>strict = false</code>) or in all ( <code>strict = true</code>) corresponding elements. Get all elements to delete and check whether they are distributed over all parents. Unlike   {@link MPatchValidator#validateAddElementState(IndepAddRemElementChange,Map,boolean)}, this does not check whether they elements to delete are really described by the model descriptors. This allows the user to delete more elements than only strictly those that are deleted.
 */
protected static ValidationResult validateRemoveElementState(IndepAddRemElementChange change,Map<IElementReference,List<EObject>> map,boolean strict){
  final SymRefCheck toDeleteCheck=new SymRefCheck(change.getSubModelReference(),map,change.getSubModel().getType(),change.getSubModelReference().getUpperBound());
  if (toDeleteCheck.symRef == null || toDeleteCheck.internal)   throw new IllegalStateException(""String_Node_Str"");
  final int elementCountToDelete=toDeleteCheck.elements.size();
  final ResultAccumulator result=new ResultAccumulator();
  if (elementCountToDelete > 0) {
    for (    final EObject parent : map.get(change.getCorrespondingElement())) {
      if (change.getContainment().isMany()) {
        @SuppressWarnings(""String_Node_Str"") final EList<EObject> rawList=(EList<EObject>)parent.eGet(change.getContainment());
        final List<EObject> toDelete=new ArrayList<EObject>(rawList);
        toDelete.retainAll(toDeleteCheck.elements);
        toDeleteCheck.elements.removeAll(toDelete);
        result.before|=!toDelete.isEmpty();
      }
 else {
        final Object toDelete=parent.eGet(change.getContainment());
        result.invalid|=toDelete == null || !toDeleteCheck.elements.contains(toDelete);
        result.before|=toDelete != null && toDeleteCheck.elements.remove(toDelete);
      }
    }
  }
 else {
    result.after=true;
  }
  return result.accumulate(strict);
}","/** 
 * Check if the element to remove exists in at least one (<code>strict = false</code>) or in all ( <code>strict = true</code>) corresponding elements. Get all elements to delete and check whether they are distributed over all parents. Unlike   {@link MPatchValidator#validateAddElementState(IndepAddRemElementChange,Map,boolean)}, this does not check whether they elements to delete are really described by the model descriptors. This allows the user to delete more elements than only strictly those that are deleted.
 */
protected static ValidationResult validateRemoveElementState(IndepAddRemElementChange change,Map<IElementReference,List<EObject>> map,boolean strict){
  final SymRefCheck toDeleteCheck=new SymRefCheck(change.getSubModelReference(),map,change.getSubModel().getType(),change.getSubModelReference().getUpperBound());
  if (toDeleteCheck.symRef == null || toDeleteCheck.internal)   throw new IllegalStateException(""String_Node_Str"");
  final int elementCountToDelete=toDeleteCheck.elements.size();
  final ResultAccumulator result=new ResultAccumulator();
  if (elementCountToDelete > 0) {
    for (    final EObject parent : map.get(change.getCorrespondingElement())) {
      if (change.getContainment().isMany()) {
        @SuppressWarnings(""String_Node_Str"") final EList<EObject> rawList=(EList<EObject>)parent.eGet(change.getContainment());
        final List<EObject> toDelete=new ArrayList<EObject>(rawList);
        toDelete.retainAll(toDeleteCheck.elements);
        toDeleteCheck.elements.removeAll(toDelete);
        result.before|=!toDelete.isEmpty();
        result.after|=toDelete.isEmpty();
      }
 else {
        final Object toDelete=parent.eGet(change.getContainment());
        result.invalid|=toDelete == null || !toDeleteCheck.elements.contains(toDelete);
        result.before|=toDelete != null && toDeleteCheck.elements.remove(toDelete);
      }
    }
  }
 else {
    result.after=true;
  }
  return result.accumulate(strict);
}",0.989247311827957
93686,"/** 
 * Check that all changes are resolved to the correct elements which represent either the state before or after the change. For example for an attribute change, check that the actual attribute exists having the value either before of after the change. The result is stored in   {@link ResolvedSymbolicReferences#getValidation()}. Note that   {@link UnknownChange}s are not allowed at all!
 * @param mapping The resolved mapping
 * @param strict If strict is <code>true</code>, then the property is checked for all resolved corresponding elements. E.g. in case of an attribute change, the value of the state before must exist for all corresponding elements. If <code>strict = false</code>, then just one elements must at least fulfill the precondition.
 */
static void validateElementStates(ResolvedSymbolicReferences mapping,boolean strict){
  final boolean forward=mapping.getDirection() == ResolvedSymbolicReferences.RESOLVE_UNCHANGED;
  final List<IndepChange> orderedChanges=orderChanges(mapping.getResolutionByChange().keySet(),!forward);
  for (  IndepChange change : orderedChanges) {
    final ValidationResult state=validateElementState(change,mapping,strict,forward);
    mapping.getValidation().put(change,state);
  }
}","/** 
 * Check that all changes are resolved to the correct elements which represent either the state before or after the change. For example for an attribute change, check that the actual attribute exists having the value either before of after the change. The result is stored in   {@link ResolvedSymbolicReferences#getValidation()}. Note that   {@link UnknownChange}s are not allowed at all!
 * @param mapping The resolved mapping
 * @param strict If strict is <code>true</code>, then the property is checked for all resolved corresponding elements. E.g. in case of an attribute change, the value of the state before must exist for all corresponding elements. If <code>strict = false</code>, then just one elements must at least fulfill the precondition.
 */
static void validateElementStates(ResolvedSymbolicReferences mapping,boolean strict){
  final boolean forward=mapping.getDirection() == ResolvedSymbolicReferences.RESOLVE_UNCHANGED;
  mapping.getValidation().clear();
  final List<IndepChange> orderedChanges=orderChanges(mapping.getResolutionByChange().keySet(),!forward);
  for (  IndepChange change : orderedChanges) {
    final ValidationResult state=validateElementState(change,mapping,strict,forward);
    mapping.getValidation().put(change,state);
  }
}",0.9860279441117764
93687,"/** 
 * Build the best checker depending on the options.
 */
private void prepareChecker(){
  if (!structuredOptions.shouldMatchDistinctMetamodels()) {
    checker=new DistinctEcoreSimilarityChecker(filter);
  }
 else {
    checker=new StatisticBasedSimilarityChecker(filter);
  }
  if (!structuredOptions.isIgnoringID()) {
    checker=new EcoreIDSimilarityChecker(filter);
  }
 else   if (!structuredOptions.isIgnoringXMIID()) {
    checker=new XMIIDSimilarityChecker(filter);
  }
}","/** 
 * Build the best checker depending on the options.
 */
private void prepareChecker(){
  if (!structuredOptions.shouldMatchDistinctMetamodels()) {
    checker=new DistinctEcoreSimilarityChecker(filter);
  }
 else {
    checker=new StatisticBasedSimilarityChecker(filter);
  }
  if (!structuredOptions.isIgnoringID()) {
    checker=new EcoreIDSimilarityChecker(filter);
  }
  if (!structuredOptions.isIgnoringXMIID()) {
    checker=new XMIIDSimilarityChecker(filter);
  }
}",0.99375
93688,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.diff.metamodel.util.DiffSwitch#caseModelElementChangeRightTarget(org.eclipse.emf.compare.diff.metamodel.ModelElementChangeRightTarget)
 */
@Override public Object caseModelElementChangeRightTarget(ModelElementChangeRightTarget object){
  if (!object.isRemote()) {
    EObject rightElement=object.getRightElement();
    View rightElementNotation=rightSemantic2notationMap.get(rightElement);
    if (rightElementNotation == null) {
      return null;
    }
    if (elementCopier == null) {
      elementCopier=MergeService.getCopier(object);
      elementCopier.putAll(right2leftSemanticMap);
    }
    if (object.eContainer() != null)     MergeService.merge(object,false);
    View newLeftElementNotation=notationElementRightToLeft(rightElementNotation);
    newLeftElementNotation.setElement(elementCopier.get(rightElement));
    annotateNotation(newLeftElementNotation,Constants.STYLE_STATE_VALUE_DELETED);
    annotateNotation(rightElementNotation,Constants.STYLE_STATE_VALUE_DELETED);
    for (TreeIterator<EObject> iter=rightElement.eAllContents(); iter.hasNext(); ) {
      EObject element=iter.next();
      View notationElement=rightSemantic2notationMap.get(element);
      if (notationElement == null) {
        continue;
      }
      View leftNotationElement=notationElementRightToLeft(notationElement);
      annotateNotation(leftNotationElement,Constants.STYLE_STATE_VALUE_DELETED);
      leftNotationElement.setElement(elementCopier.get(element));
      annotateNotation(notationElement,Constants.STYLE_STATE_VALUE_DELETED);
    }
    return object;
  }
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.diff.metamodel.util.DiffSwitch#caseModelElementChangeRightTarget(org.eclipse.emf.compare.diff.metamodel.ModelElementChangeRightTarget)
 */
@Override public Object caseModelElementChangeRightTarget(ModelElementChangeRightTarget object){
  Object result=null;
  if (!object.isRemote()) {
    EObject rightElement=object.getRightElement();
    View rightElementNotation=rightSemantic2notationMap.get(rightElement);
    if (rightElementNotation == null) {
      return null;
    }
    if (elementCopier == null) {
      elementCopier=MergeService.getCopier(object);
      elementCopier.putAll(right2leftSemanticMap);
    }
    if (object.eContainer() != null)     MergeService.merge(object,false);
    View newLeftElementNotation=notationElementRightToLeft(rightElementNotation);
    newLeftElementNotation.setElement(elementCopier.get(rightElement));
    annotateNotation(newLeftElementNotation,Constants.STYLE_STATE_VALUE_DELETED);
    annotateNotation(rightElementNotation,Constants.STYLE_STATE_VALUE_DELETED);
    for (TreeIterator<EObject> iter=rightElement.eAllContents(); iter.hasNext(); ) {
      EObject element=iter.next();
      View notationElement=rightSemantic2notationMap.get(element);
      if (notationElement == null) {
        continue;
      }
      View leftNotationElement=notationElementRightToLeft(notationElement);
      annotateNotation(leftNotationElement,Constants.STYLE_STATE_VALUE_DELETED);
      leftNotationElement.setElement(elementCopier.get(element));
      annotateNotation(notationElement,Constants.STYLE_STATE_VALUE_DELETED);
    }
    result=object;
  }
  return result;
}",0.9856838257691136
93689,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.diff.metamodel.util.DiffSwitch#caseModelElementChangeLeftTarget(org.eclipse.emf.compare.diff.metamodel.ModelElementChangeLeftTarget)
 */
@Override public Object caseModelElementChangeLeftTarget(ModelElementChangeLeftTarget object){
  if (!object.isRemote()) {
    EObject leftElement=object.getLeftElement();
    View leftElementNotation=leftSemantic2notationMap.get(leftElement);
    if (leftElementNotation == null) {
      return null;
    }
    annotateNotation(leftElementNotation,Constants.STYLE_STATE_VALUE_ADDED);
    for (TreeIterator<EObject> iter=leftElement.eAllContents(); iter.hasNext(); ) {
      EObject element=iter.next();
      View notationElement=leftSemantic2notationMap.get(element);
      if (notationElement == null) {
        continue;
      }
      annotateNotation(notationElement,Constants.STYLE_STATE_VALUE_ADDED);
    }
    EObject staticElement=merge2StaticSemanticMap.get(leftElement);
    if (staticElement != null) {
      View staticNotationElement=staticSemantic2notationMap.get(staticElement);
      if (staticNotationElement != null)       annotateNotation(staticNotationElement,Constants.STYLE_STATE_VALUE_ADDED);
      for (TreeIterator<EObject> iter=staticElement.eAllContents(); iter.hasNext(); ) {
        EObject element=iter.next();
        staticNotationElement=staticSemantic2notationMap.get(element);
        if (staticNotationElement != null)         annotateNotation(staticNotationElement,Constants.STYLE_STATE_VALUE_ADDED);
      }
    }
    return object;
  }
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.compare.diff.metamodel.util.DiffSwitch#caseModelElementChangeLeftTarget(org.eclipse.emf.compare.diff.metamodel.ModelElementChangeLeftTarget)
 */
@Override public Object caseModelElementChangeLeftTarget(ModelElementChangeLeftTarget object){
  Object result=null;
  if (!object.isRemote()) {
    EObject leftElement=object.getLeftElement();
    View leftElementNotation=leftSemantic2notationMap.get(leftElement);
    if (leftElementNotation == null) {
      return null;
    }
    annotateNotation(leftElementNotation,Constants.STYLE_STATE_VALUE_ADDED);
    for (TreeIterator<EObject> iter=leftElement.eAllContents(); iter.hasNext(); ) {
      EObject element=iter.next();
      View notationElement=leftSemantic2notationMap.get(element);
      if (notationElement == null) {
        continue;
      }
      annotateNotation(notationElement,Constants.STYLE_STATE_VALUE_ADDED);
    }
    EObject staticElement=merge2StaticSemanticMap.get(leftElement);
    if (staticElement != null) {
      View staticNotationElement=staticSemantic2notationMap.get(staticElement);
      if (staticNotationElement != null)       annotateNotation(staticNotationElement,Constants.STYLE_STATE_VALUE_ADDED);
      for (TreeIterator<EObject> iter=staticElement.eAllContents(); iter.hasNext(); ) {
        EObject element=iter.next();
        staticNotationElement=staticSemantic2notationMap.get(element);
        if (staticNotationElement != null)         annotateNotation(staticNotationElement,Constants.STYLE_STATE_VALUE_ADDED);
      }
    }
    result=object;
  }
  return result;
}",0.9851968503937008
93690,"/** 
 * This will iterate through all the features stored via   {@link #processEObject(EObject)} and populatesthe  {@link #unusedFeatures unused features list}.
 */
private void buildUnusedFeatures(){
  unusedFeatures=new ArrayList<EStructuralFeature>();
  final Iterator<String> it=featuresToInformation.keySet().iterator();
  while (it.hasNext()) {
    final String feat=it.next();
    if (featuresToInformation.get(feat).hasUniqueValue())     unusedFeatures.add(featuresToInformation.get(feat).getFeature());
  }
}","/** 
 * This will iterate through all the features stored via   {@link #processEObject(EObject)} and populatesthe  {@link #unusedFeatures unused features list}.
 */
private void buildUnusedFeatures(){
  unusedFeatures=new ArrayList<EStructuralFeature>();
  final Iterator<EStructuralFeature> it=featuresToInformation.keySet().iterator();
  while (it.hasNext()) {
    final EStructuralFeature feat=it.next();
    if (featuresToInformation.get(feat).hasUniqueValue())     unusedFeatures.add(featuresToInformation.get(feat).getFeature());
  }
}",0.6994328922495274
93691,"/** 
 * Iterates through all the   {@link EStructuralFeature features} of a given {@link EObject} and populatesthe  {@link #featuresToInformation known features list} for later use.
 * @param eObj {@link EObject} we need to parse for feature information.
 */
private void processEObject(EObject eObj){
  final Iterator<EStructuralFeature> featIt=eObj.eClass().getEAllStructuralFeatures().iterator();
  while (featIt.hasNext()) {
    final EStructuralFeature feat=featIt.next();
    final StringBuilder key=new StringBuilder();
    key.append(feat.hashCode());
    key.append(eObj.eClass().getName());
    if (!featuresToInformation.containsKey(key.toString())) {
      featuresToInformation.put(key.toString(),new FeatureInformation(feat));
    }
    try {
      if (EFactory.eGet(eObj,feat.getName()) != null) {
        featuresToInformation.get(key.toString()).processValue(eObj.eGet(feat).toString());
      }
 else {
        featuresToInformation.get(key.toString()).processValue(""String_Node_Str"");
      }
    }
 catch (    FactoryException e) {
      EMFComparePlugin.log(e.getMessage(),false);
    }
  }
}","/** 
 * Iterates through all the   {@link EStructuralFeature features} of a given {@link EObject} and populatesthe  {@link #featuresToInformation known features list} for later use.
 * @param eObj {@link EObject} we need to parse for feature information.
 */
private void processEObject(EObject eObj){
  final Iterator<EStructuralFeature> featIt=eObj.eClass().getEAllStructuralFeatures().iterator();
  while (featIt.hasNext()) {
    final EStructuralFeature feat=featIt.next();
    if (!feat.isDerived()) {
      if (!featuresToInformation.containsKey(feat)) {
        featuresToInformation.put(feat,new FeatureInformation(feat));
      }
      final Object value=eObj.eGet(feat);
      final FeatureInformation featureInformation=featuresToInformation.get(feat);
      if (feat instanceof EReference) {
        if (feat.isMany()) {
          final Collection<EObject> values=(Collection)value;
          if (values.size() == 0) {
            featureInformation.processValue(""String_Node_Str"");
          }
        }
 else {
          if (value == null) {
            featureInformation.processValue(""String_Node_Str"");
          }
        }
      }
 else {
        if (value != null) {
          featureInformation.processValue(value.toString());
        }
 else {
          featureInformation.processValue(""String_Node_Str"");
        }
      }
    }
  }
}",0.4712550607287449
93692,"/** 
 * {@inheritDoc}
 * @see org.eclipse.compare.contentmergeviewer.IMergeViewerContentProvider#getLeftContent(java.lang.Object)
 */
public Object getLeftContent(Object element){
  Object content=null;
  if (element instanceof ModelCompareInput) {
    final Resource res=((ModelCompareInput)element).getLeftResource();
    if (res != null && res.getResourceSet() != null)     content=res.getResourceSet();
 else     content=res;
  }
 else   if (element instanceof ICompareInput)   content=((ICompareInput)element).getLeft();
  return content;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.compare.contentmergeviewer.IMergeViewerContentProvider#getLeftContent(java.lang.Object)
 */
public Object getLeftContent(Object element){
  Object content=null;
  if (element instanceof ModelCompareInput) {
    content=((ModelCompareInput)element).getLeftResource();
  }
 else   if (element instanceof ICompareInput)   content=((ICompareInput)element).getLeft();
  return content;
}",0.6233230134158927
93693,"/** 
 * {@inheritDoc}
 * @see org.eclipse.compare.contentmergeviewer.IMergeViewerContentProvider#getRightContent(java.lang.Object)
 */
public Object getRightContent(Object element){
  Object content=null;
  if (element instanceof ModelCompareInput) {
    final Resource res=((ModelCompareInput)element).getRightResource();
    if (res != null && res.getResourceSet() != null)     content=res.getResourceSet();
 else     content=res;
  }
 else   if (element instanceof ICompareInput)   content=((ICompareInput)element).getRight();
  return content;
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.compare.contentmergeviewer.IMergeViewerContentProvider#getRightContent(java.lang.Object)
 */
public Object getRightContent(Object element){
  Object content=null;
  if (element instanceof ModelCompareInput) {
    content=((ModelCompareInput)element).getRightResource();
  }
 else   if (element instanceof ICompareInput)   content=((ICompareInput)element).getRight();
  return content;
}",0.5527123848515865
93694,"/** 
 * This will check for remote ReferenceChange operations and create the corresponding   {@link DiffElement}s.<br/> <p> A reference is considered &quot;remotely changed&quot; if its values differ between the right (latest from HEAD) and origin (common ancestor) model, but its values haven't changed between the left (working copy) and the origin model. </p>
 * @param root {@link DiffGroup Root} of the {@link DiffElement}s to create.
 * @param reference {@link EReference} to check for ReferenceChanges.
 * @param mapping Contains informations about the left, right and original model elements.
 * @param remotelyAdded {@link List} of reference values that have been added in the left model since the origin.
 * @param remotelyDeleted {@link List} of reference values that have been removed from the left model since theorigin.
 */
private void createRemoteReferencesUpdate(DiffGroup root,EReference reference,Match3Elements mapping,List<EObject> remotelyAdded,List<EObject> remotelyDeleted){
  if (!reference.isMany() && remotelyAdded.size() > 0 && remotelyDeleted.size() > 0) {
    final UpdateReference operation=DiffFactory.eINSTANCE.createUpdateReference();
    operation.setRemote(true);
    operation.setLeftElement(mapping.getLeftElement());
    operation.setRightElement(mapping.getRightElement());
    operation.setReference(reference);
    EObject leftTarget=getMatchedEObject(remotelyAdded.get(0));
    EObject rightTarget=getMatchedEObject(remotelyDeleted.get(0));
    if (leftTarget == null) {
      leftTarget=remotelyAdded.get(0);
    }
    if (rightTarget == null) {
      rightTarget=remotelyDeleted.get(0);
    }
    operation.setLeftTarget(leftTarget);
    operation.setRightTarget(rightTarget);
    root.getSubDiffElements().add(operation);
  }
 else   if (reference.isMany()) {
    final Iterator<EObject> addedReferenceIterator=remotelyAdded.iterator();
    while (addedReferenceIterator.hasNext()) {
      final EObject eobj=addedReferenceIterator.next();
      final ReferenceChangeRightTarget addOperation=DiffFactory.eINSTANCE.createReferenceChangeRightTarget();
      addOperation.setRemote(true);
      addOperation.setRightElement(mapping.getRightElement());
      addOperation.setLeftElement(mapping.getLeftElement());
      addOperation.setReference(reference);
      addOperation.setRightTarget(eobj);
      if (getMatchedEObject(eobj) != null) {
        addOperation.setLeftTarget(getMatchedEObject(eobj));
      }
      root.getSubDiffElements().add(addOperation);
    }
    final Iterator<EObject> deletedReferenceIterator=remotelyDeleted.iterator();
    while (deletedReferenceIterator.hasNext()) {
      final EObject eobj=deletedReferenceIterator.next();
      final ReferenceChangeLeftTarget delOperation=DiffFactory.eINSTANCE.createReferenceChangeLeftTarget();
      delOperation.setRemote(true);
      delOperation.setRightElement(mapping.getRightElement());
      delOperation.setLeftElement(mapping.getLeftElement());
      delOperation.setReference(reference);
      delOperation.setLeftTarget(eobj);
      if (getMatchedEObject(eobj) != null) {
        delOperation.setRightTarget(getMatchedEObject(eobj));
      }
      root.getSubDiffElements().add(delOperation);
    }
  }
}","/** 
 * This will check for remote ReferenceChange operations and create the corresponding   {@link DiffElement}s.<br/> <p> A reference is considered &quot;remotely changed&quot; if its values differ between the right (latest from HEAD) and origin (common ancestor) model, but its values haven't changed between the left (working copy) and the origin model. </p>
 * @param root {@link DiffGroup Root} of the {@link DiffElement}s to create.
 * @param reference {@link EReference} to check for ReferenceChanges.
 * @param mapping Contains informations about the left, right and original model elements.
 * @param remotelyAdded {@link List} of reference values that have been added in the left model since the origin.
 * @param remotelyDeleted {@link List} of reference values that have been removed from the left model since theorigin.
 */
private void createRemoteReferencesUpdate(DiffGroup root,EReference reference,Match3Elements mapping,List<EObject> remotelyAdded,List<EObject> remotelyDeleted){
  if (!reference.isMany() && remotelyAdded.size() > 0 && remotelyDeleted.size() > 0) {
    final UpdateReference operation=DiffFactory.eINSTANCE.createUpdateReference();
    operation.setRemote(true);
    operation.setLeftElement(mapping.getLeftElement());
    operation.setRightElement(mapping.getRightElement());
    operation.setReference(reference);
    EObject rightTarget=getMatchedEObject(remotelyAdded.get(0));
    EObject leftTarget=getMatchedEObject(remotelyDeleted.get(0));
    if (leftTarget == null) {
      leftTarget=remotelyAdded.get(0);
    }
    if (rightTarget == null) {
      rightTarget=remotelyDeleted.get(0);
    }
    operation.setLeftTarget(leftTarget);
    operation.setRightTarget(rightTarget);
    root.getSubDiffElements().add(operation);
  }
 else   if (reference.isMany()) {
    final Iterator<EObject> addedReferenceIterator=remotelyAdded.iterator();
    while (addedReferenceIterator.hasNext()) {
      final EObject eobj=addedReferenceIterator.next();
      final ReferenceChangeRightTarget addOperation=DiffFactory.eINSTANCE.createReferenceChangeRightTarget();
      addOperation.setRemote(true);
      addOperation.setRightElement(mapping.getRightElement());
      addOperation.setLeftElement(mapping.getLeftElement());
      addOperation.setReference(reference);
      addOperation.setRightTarget(eobj);
      if (getMatchedEObject(eobj) != null) {
        addOperation.setLeftTarget(getMatchedEObject(eobj));
      }
      root.getSubDiffElements().add(addOperation);
    }
    final Iterator<EObject> deletedReferenceIterator=remotelyDeleted.iterator();
    while (deletedReferenceIterator.hasNext()) {
      final EObject eobj=deletedReferenceIterator.next();
      final ReferenceChangeLeftTarget delOperation=DiffFactory.eINSTANCE.createReferenceChangeLeftTarget();
      delOperation.setRemote(true);
      delOperation.setRightElement(mapping.getRightElement());
      delOperation.setLeftElement(mapping.getLeftElement());
      delOperation.setReference(reference);
      delOperation.setLeftTarget(eobj);
      if (getMatchedEObject(eobj) != null) {
        delOperation.setRightTarget(getMatchedEObject(eobj));
      }
      root.getSubDiffElements().add(delOperation);
    }
  }
}",0.9978321461752864
93695,"/** 
 * Creates the   {@link DiffElement} corresponding to an unique reference's value update.
 * @param left Left element of the reference change.
 * @param right Right element of the reference change.
 * @param reference {@link EReference} target of the operation.
 * @param addedValue Value which has been added for the reference.
 * @param deletedValue Value that has been deleted from the reference.
 * @return The {@link DiffElement} corresponding to an unique reference's value update
 */
private UpdateReference createUpdatedReferenceOperation(EObject left,EObject right,EReference reference,EObject addedValue,EObject deletedValue){
  final UpdateReference operation=DiffFactory.eINSTANCE.createUpdateReference();
  operation.setLeftElement(left);
  operation.setRightElement(right);
  operation.setReference(reference);
  EObject leftTarget=getMatchedEObject(addedValue);
  EObject rightTarget=getMatchedEObject(deletedValue);
  if (leftTarget == null) {
    leftTarget=addedValue;
  }
  if (rightTarget == null) {
    rightTarget=deletedValue;
  }
  operation.setLeftTarget(leftTarget);
  operation.setRightTarget(rightTarget);
  return operation;
}","/** 
 * Creates the   {@link DiffElement} corresponding to an unique reference's value update.
 * @param left Left element of the reference change.
 * @param right Right element of the reference change.
 * @param reference {@link EReference} target of the operation.
 * @param addedValue Value which has been added for the reference.
 * @param deletedValue Value that has been deleted from the reference.
 * @return The {@link DiffElement} corresponding to an unique reference's value update
 */
private UpdateReference createUpdatedReferenceOperation(EObject left,EObject right,EReference reference,EObject addedValue,EObject deletedValue){
  final UpdateReference operation=DiffFactory.eINSTANCE.createUpdateReference();
  operation.setLeftElement(left);
  operation.setRightElement(right);
  operation.setReference(reference);
  EObject rightTarget=getMatchedEObject(addedValue);
  EObject leftTarget=getMatchedEObject(deletedValue);
  if (leftTarget == null) {
    leftTarget=addedValue;
  }
  if (rightTarget == null) {
    rightTarget=deletedValue;
  }
  operation.setLeftTarget(leftTarget);
  operation.setRightTarget(rightTarget);
  return operation;
}",0.9939655172413792
93696,"/** 
 * Return the specified matched   {@link EObject} from the one given.
 * @param from The original  {@link EObject}.
 * @param side side of the object we seek. Must be one of <ul> <li> {@link #ANCESTOR_OBJECT}</li> <li>  {@link #LEFT_OBJECT}</li> <li>  {@link #RIGHT_OBJECT}</li> </ul> .
 * @return The matched EObject.
 * @throws IllegalArgumentException Thrown if <code>side</code> is invalid.
 */
protected EObject getMatchedEObject(EObject from,int side) throws IllegalArgumentException {
  if (side != LEFT_OBJECT && side != RIGHT_OBJECT && side != ANCESTOR_OBJECT) {
    throw new IllegalArgumentException(EMFCompareDiffMessages.getString(""String_Node_Str""));
  }
  EObject matchedEObject=null;
  if (matchCrossReferencer != null) {
    for (    final org.eclipse.emf.ecore.EStructuralFeature.Setting setting : matchCrossReferencer.get(from)) {
      if (setting.getEObject() instanceof Match2Elements) {
        if (side == LEFT_OBJECT) {
          matchedEObject=((Match2Elements)setting.getEObject()).getLeftElement();
        }
 else         if (side == RIGHT_OBJECT) {
          matchedEObject=((Match2Elements)setting.getEObject()).getRightElement();
        }
 else         if (setting.getEObject() instanceof Match3Elements) {
          matchedEObject=((Match3Elements)setting.getEObject()).getOriginElement();
        }
      }
    }
  }
 else {
    final Match2Elements matchElem=eObjectToMatch.get(from);
    if (matchElem != null) {
      if (side == LEFT_OBJECT) {
        matchedEObject=matchElem.getLeftElement();
      }
 else       if (side == RIGHT_OBJECT) {
        matchedEObject=matchElem.getRightElement();
      }
 else       if (side == ANCESTOR_OBJECT && matchElem instanceof Match3Elements) {
        matchedEObject=((Match3Elements)matchElem).getOriginElement();
      }
    }
  }
  return matchedEObject;
}","/** 
 * Return the specified matched   {@link EObject} from the one given.
 * @param from The original  {@link EObject}.
 * @param side side of the object we seek. Must be one of <ul> <li> {@link #ANCESTOR_OBJECT}</li> <li>  {@link #LEFT_OBJECT}</li> <li>  {@link #RIGHT_OBJECT}</li> </ul> .
 * @return The matched EObject.
 * @throws IllegalArgumentException Thrown if <code>side</code> is invalid.
 */
protected EObject getMatchedEObject(EObject from,int side) throws IllegalArgumentException {
  if (side != LEFT_OBJECT && side != RIGHT_OBJECT && side != ANCESTOR_OBJECT) {
    throw new IllegalArgumentException(EMFCompareDiffMessages.getString(""String_Node_Str""));
  }
  EObject matchedEObject=null;
  if (matchCrossReferencer != null) {
    final Collection<Setting> settings=matchCrossReferencer.get(from);
    if (settings == null)     return null;
    for (    final org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
      if (setting.getEObject() instanceof Match2Elements) {
        if (side == LEFT_OBJECT) {
          matchedEObject=((Match2Elements)setting.getEObject()).getLeftElement();
        }
 else         if (side == RIGHT_OBJECT) {
          matchedEObject=((Match2Elements)setting.getEObject()).getRightElement();
        }
 else         if (setting.getEObject() instanceof Match3Elements) {
          matchedEObject=((Match3Elements)setting.getEObject()).getOriginElement();
        }
      }
    }
  }
 else {
    final Match2Elements matchElem=eObjectToMatch.get(from);
    if (matchElem != null) {
      if (side == LEFT_OBJECT) {
        matchedEObject=matchElem.getLeftElement();
      }
 else       if (side == RIGHT_OBJECT) {
        matchedEObject=matchElem.getRightElement();
      }
 else       if (side == ANCESTOR_OBJECT && matchElem instanceof Match3Elements) {
        matchedEObject=((Match3Elements)matchElem).getOriginElement();
      }
    }
  }
  return matchedEObject;
}",0.9597883597883596
93697,"/** 
 * {@inheritDoc}
 * @see org.eclipse.jface.viewers.AbstractTreeViewer#inputChanged(java.lang.Object,java.lang.Object)
 */
@Override protected void inputChanged(Object input,Object oldInput){
  final TreePath[] expandedTreePaths=getExpandedTreePaths();
  super.inputChanged(input,oldInput);
  expandAll();
  setExpandedTreePaths(expandedTreePaths);
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.jface.viewers.AbstractTreeViewer#inputChanged(java.lang.Object,java.lang.Object)
 */
@Override protected void inputChanged(Object input,Object oldInput){
  if (input != oldInput) {
    final TreePath[] expandedTreePaths=getExpandedTreePaths();
    super.inputChanged(input,oldInput);
    expandAll();
    setExpandedTreePaths(expandedTreePaths);
  }
}",0.9477911646586346
93698,"/** 
 * This will create and populate a   {@link List} with all the references from the<code>rightReferences</code>  {@link List} that cannot be matched in the <code>leftReferences</code>{@link List}.
 * @param leftReferences List of the left element reference values.
 * @param rightReferences List of the right element reference values.
 * @return {@link List} of all the references that have been deleted from the left (local) element sincethe right (distant) element.
 */
private List<EObject> computeDeletedReferences(List<EObject> leftReferences,List<EObject> rightReferences){
  final List<EObject> deletedReferences=new ArrayList<EObject>();
  final List<EObject> addedReferences=new ArrayList<EObject>();
  final double similarReferenceURIThreshold=0.8d;
  if (leftReferences != null) {
    addedReferences.addAll(leftReferences);
  }
  if (rightReferences != null) {
    deletedReferences.addAll(rightReferences);
  }
  final List<EObject> matchedNewReferences=getMatchedReferences(addedReferences);
  deletedReferences.removeAll(matchedNewReferences);
  for (  final EObject deleted : new ArrayList<EObject>(deletedReferences)) {
    for (    final EObject added : addedReferences) {
      final double uriSimilarity=ResourceSimilarity.computeURISimilarity(EcoreUtil.getURI(added),EcoreUtil.getURI(deleted));
      if (uriSimilarity > similarReferenceURIThreshold) {
        deletedReferences.remove(deleted);
      }
    }
  }
  return deletedReferences;
}","/** 
 * This will create and populate a   {@link List} with all the references from the<code>rightReferences</code>  {@link List} that cannot be matched in the <code>leftReferences</code>{@link List}.
 * @param leftReferences List of the left element reference values.
 * @param rightReferences List of the right element reference values.
 * @return {@link List} of all the references that have been deleted from the left (local) element sincethe right (distant) element.
 */
private List<EObject> computeDeletedReferences(List<EObject> leftReferences,List<EObject> rightReferences){
  final List<EObject> deletedReferences=new ArrayList<EObject>();
  final List<EObject> addedReferences=new ArrayList<EObject>();
  final double similarReferenceURIThreshold=0.8d;
  if (leftReferences != null) {
    addedReferences.addAll(leftReferences);
  }
  if (rightReferences != null) {
    deletedReferences.addAll(rightReferences);
  }
  final List<EObject> matchedNewReferences=getMatchedReferences(addedReferences);
  deletedReferences.removeAll(matchedNewReferences);
  for (  final EObject deleted : new ArrayList<EObject>(deletedReferences)) {
    for (    final EObject added : addedReferences) {
      final EObject matched=getMatchedEObject(deleted);
      if (matched != null) {
        if (matched == added) {
          deletedReferences.remove(deleted);
        }
      }
 else {
        final double uriSimilarity=ResourceSimilarity.computeURISimilarity(EcoreUtil.getURI(added),EcoreUtil.getURI(deleted));
        if (uriSimilarity > similarReferenceURIThreshold) {
          deletedReferences.remove(deleted);
        }
      }
    }
  }
  return deletedReferences;
}",0.935031847133758
93699,"/** 
 * Return the specified matched   {@link EObject} from the one given.
 * @param from The original  {@link EObject}.
 * @param side side of the object we seek. Must be one of <ul> <li> {@link #ANCESTOR_OBJECT}</li> <li>  {@link #LEFT_OBJECT}</li> <li>  {@link #RIGHT_OBJECT}</li> </ul> .
 * @return The matched EObject.
 * @throws IllegalArgumentException Thrown if <code>side</code> is invalid.
 */
protected EObject getMatchedEObject(EObject from,int side) throws IllegalArgumentException {
  if (side != LEFT_OBJECT && side != RIGHT_OBJECT && side != ANCESTOR_OBJECT)   throw new IllegalArgumentException(EMFCompareDiffMessages.getString(""String_Node_Str""));
  EObject matchedEObject=null;
  if (matchCrossReferencer != null) {
    for (    final org.eclipse.emf.ecore.EStructuralFeature.Setting setting : matchCrossReferencer.get(from)) {
      if (setting.getEObject() instanceof Match2Elements) {
        if (side == LEFT_OBJECT) {
          matchedEObject=((Match2Elements)setting.getEObject()).getLeftElement();
        }
 else         if (side == RIGHT_OBJECT) {
          matchedEObject=((Match2Elements)setting.getEObject()).getRightElement();
        }
 else         if (setting.getEObject() instanceof Match3Elements) {
          matchedEObject=((Match3Elements)setting.getEObject()).getOriginElement();
        }
      }
    }
  }
 else {
    final Match2Elements matchElem=eObjectToMatch.get(from);
    if (matchElem != null) {
      if (side == LEFT_OBJECT) {
        matchedEObject=matchElem.getLeftElement();
      }
 else       if (side == RIGHT_OBJECT) {
        matchedEObject=matchElem.getRightElement();
      }
 else       if (side == ANCESTOR_OBJECT && matchElem instanceof Match3Elements) {
        matchedEObject=((Match3Elements)matchElem).getOriginElement();
      }
    }
  }
  return matchedEObject;
}","/** 
 * Return the specified matched   {@link EObject} from the one given.
 * @param from The original  {@link EObject}.
 * @param side side of the object we seek. Must be one of <ul> <li> {@link #ANCESTOR_OBJECT}</li> <li>  {@link #LEFT_OBJECT}</li> <li>  {@link #RIGHT_OBJECT}</li> </ul> .
 * @return The matched EObject.
 * @throws IllegalArgumentException Thrown if <code>side</code> is invalid.
 */
protected EObject getMatchedEObject(EObject from,int side) throws IllegalArgumentException {
  if (side != LEFT_OBJECT && side != RIGHT_OBJECT && side != ANCESTOR_OBJECT) {
    throw new IllegalArgumentException(EMFCompareDiffMessages.getString(""String_Node_Str""));
  }
  EObject matchedEObject=null;
  if (matchCrossReferencer != null) {
    for (    final org.eclipse.emf.ecore.EStructuralFeature.Setting setting : matchCrossReferencer.get(from)) {
      if (setting.getEObject() instanceof Match2Elements) {
        if (side == LEFT_OBJECT) {
          matchedEObject=((Match2Elements)setting.getEObject()).getLeftElement();
        }
 else         if (side == RIGHT_OBJECT) {
          matchedEObject=((Match2Elements)setting.getEObject()).getRightElement();
        }
 else         if (setting.getEObject() instanceof Match3Elements) {
          matchedEObject=((Match3Elements)setting.getEObject()).getOriginElement();
        }
      }
    }
  }
 else {
    final Match2Elements matchElem=eObjectToMatch.get(from);
    if (matchElem != null) {
      if (side == LEFT_OBJECT) {
        matchedEObject=matchElem.getLeftElement();
      }
 else       if (side == RIGHT_OBJECT) {
        matchedEObject=matchElem.getRightElement();
      }
 else       if (side == ANCESTOR_OBJECT && matchElem instanceof Match3Elements) {
        matchedEObject=((Match3Elements)matchElem).getOriginElement();
      }
    }
  }
  return matchedEObject;
}",0.9978260869565218
93700,"/** 
 * This will create and populate a   {@link List} with all the references from the<code>leftReferences</code>  {@link List} that cannot be matched in the <code>rightReferences</code>{@link List}.
 * @param leftReferences List of the left element reference values.
 * @param rightReferences List of the right element reference values.
 * @return {@link List} of all the references that have been added in the left (local) element since theright (distant) element.
 */
private List<EObject> computeAddedReferences(List<EObject> leftReferences,List<EObject> rightReferences){
  final List<EObject> deletedReferences=new ArrayList<EObject>();
  final List<EObject> addedReferences=new ArrayList<EObject>();
  final double similarReferenceURIThreshold=0.8d;
  if (leftReferences != null) {
    addedReferences.addAll(leftReferences);
  }
  if (rightReferences != null) {
    deletedReferences.addAll(rightReferences);
  }
  final List<EObject> matchedOldReferences=getMatchedReferences(deletedReferences);
  addedReferences.removeAll(matchedOldReferences);
  for (  final EObject added : new ArrayList<EObject>(addedReferences)) {
    for (    final EObject deleted : deletedReferences) {
      final double uriSimilarity=ResourceSimilarity.computeURISimilarity(EcoreUtil.getURI(added),EcoreUtil.getURI(deleted));
      if (uriSimilarity > similarReferenceURIThreshold) {
        addedReferences.remove(added);
      }
    }
  }
  return addedReferences;
}","/** 
 * This will create and populate a   {@link List} with all the references from the<code>leftReferences</code>  {@link List} that cannot be matched in the <code>rightReferences</code>{@link List}.
 * @param leftReferences List of the left element reference values.
 * @param rightReferences List of the right element reference values.
 * @return {@link List} of all the references that have been added in the left (local) element since theright (distant) element.
 */
private List<EObject> computeAddedReferences(List<EObject> leftReferences,List<EObject> rightReferences){
  final List<EObject> deletedReferences=new ArrayList<EObject>();
  final List<EObject> addedReferences=new ArrayList<EObject>();
  final double similarReferenceURIThreshold=0.8d;
  if (leftReferences != null) {
    addedReferences.addAll(leftReferences);
  }
  if (rightReferences != null) {
    deletedReferences.addAll(rightReferences);
  }
  final List<EObject> matchedOldReferences=getMatchedReferences(deletedReferences);
  addedReferences.removeAll(matchedOldReferences);
  for (  final EObject added : new ArrayList<EObject>(addedReferences)) {
    for (    final EObject deleted : deletedReferences) {
      final EObject matched=getMatchedEObject(added);
      if (matched != null) {
        if (matched == deleted) {
          addedReferences.remove(added);
        }
      }
 else {
        final double uriSimilarity=ResourceSimilarity.computeURISimilarity(EcoreUtil.getURI(added),EcoreUtil.getURI(deleted));
        if (uriSimilarity > similarReferenceURIThreshold) {
          addedReferences.remove(added);
        }
      }
    }
  }
  return addedReferences;
}",0.93573264781491
93701,"/** 
 * Return the specified matched   {@link EObject} from the one given.
 * @param from The original  {@link EObject}.
 * @param side side of the object we seek. Must be one of <ul> <li> {@link #ANCESTOR_OBJECT}</li> <li>  {@link #LEFT_OBJECT}</li> <li>  {@link #RIGHT_OBJECT}</li> </ul> .
 * @return The matched EObject.
 * @throws IllegalArgumentException Thrown if <code>side</code> is invalid.
 */
protected EObject getMatchedEObject(EObject from,int side) throws IllegalArgumentException {
  if (side != LEFT_OBJECT && side != RIGHT_OBJECT && side != ANCESTOR_OBJECT)   throw new IllegalArgumentException(EMFCompareDiffMessages.getString(""String_Node_Str""));
  EObject matchedEObject=null;
  if (matchCrossReferencer != null) {
    for (    final Setting setting : matchCrossReferencer.get(from)) {
      if (setting.getEObject() instanceof Match2Elements) {
        if (side == LEFT_OBJECT) {
          matchedEObject=((Match2Elements)setting.getEObject()).getLeftElement();
        }
 else         if (side == RIGHT_OBJECT) {
          matchedEObject=((Match2Elements)setting.getEObject()).getRightElement();
        }
 else         if (setting.getEObject() instanceof Match3Elements) {
          matchedEObject=((Match3Elements)setting.getEObject()).getOriginElement();
        }
      }
    }
  }
 else {
    final Match2Elements matchElem=eObjectToMatch.get(from);
    if (matchElem != null) {
      if (side == LEFT_OBJECT) {
        matchedEObject=matchElem.getLeftElement();
      }
 else       if (side == RIGHT_OBJECT) {
        matchedEObject=matchElem.getRightElement();
      }
 else       if (side == ANCESTOR_OBJECT && matchElem instanceof Match3Elements) {
        matchedEObject=((Match3Elements)matchElem).getOriginElement();
      }
    }
  }
  return matchedEObject;
}","/** 
 * Return the specified matched   {@link EObject} from the one given.
 * @param from The original  {@link EObject}.
 * @param side side of the object we seek. Must be one of <ul> <li> {@link #ANCESTOR_OBJECT}</li> <li>  {@link #LEFT_OBJECT}</li> <li>  {@link #RIGHT_OBJECT}</li> </ul> .
 * @return The matched EObject.
 * @throws IllegalArgumentException Thrown if <code>side</code> is invalid.
 */
protected EObject getMatchedEObject(EObject from,int side) throws IllegalArgumentException {
  if (side != LEFT_OBJECT && side != RIGHT_OBJECT && side != ANCESTOR_OBJECT) {
    throw new IllegalArgumentException(EMFCompareDiffMessages.getString(""String_Node_Str""));
  }
  EObject matchedEObject=null;
  if (matchCrossReferencer != null) {
    for (    final Setting setting : matchCrossReferencer.get(from)) {
      if (setting.getEObject() instanceof Match2Elements) {
        if (side == LEFT_OBJECT) {
          matchedEObject=((Match2Elements)setting.getEObject()).getLeftElement();
        }
 else         if (side == RIGHT_OBJECT) {
          matchedEObject=((Match2Elements)setting.getEObject()).getRightElement();
        }
 else         if (setting.getEObject() instanceof Match3Elements) {
          matchedEObject=((Match3Elements)setting.getEObject()).getOriginElement();
        }
      }
    }
  }
 else {
    final Match2Elements matchElem=eObjectToMatch.get(from);
    if (matchElem != null) {
      if (side == LEFT_OBJECT) {
        matchedEObject=matchElem.getLeftElement();
      }
 else       if (side == RIGHT_OBJECT) {
        matchedEObject=matchElem.getRightElement();
      }
 else       if (side == ANCESTOR_OBJECT && matchElem instanceof Match3Elements) {
        matchedEObject=((Match3Elements)matchElem).getOriginElement();
      }
    }
  }
  return matchedEObject;
}",0.9977765425236242
93702,"/** 
 * This is the core of the diff computing for three way comparison. This will call for checks on attributes, references and model elements to check for updates/changes.
 * @param root {@link DiffGroup root} of the {@link DiffModel} to create.
 * @param match {@link Match3Elements root} of the {@link MatchModel} to analyze.
 */
private void doDiffDelegate(DiffGroup root,Match3Elements match){
  DiffGroup current=DiffFactory.eINSTANCE.createDiffGroup();
  current.setRightParent(match.getRightElement());
  try {
    checkForDiffs(current,match);
  }
 catch (  final FactoryException e) {
    EMFComparePlugin.log(e,false);
  }
  final List<DiffElement> shouldAddToList=new ArrayList<DiffElement>();
  if (current.getSubDiffElements().size() > 0) {
    final Iterator<DiffElement> it2=current.getSubDiffElements().iterator();
    while (it2.hasNext()) {
      final DiffElement diff=it2.next();
      if (!(diff instanceof DiffGroup)) {
        shouldAddToList.add(diff);
      }
    }
    for (    final DiffElement diff : shouldAddToList) {
      addInContainerPackage(root,diff,current.getRightParent());
    }
  }
 else {
    current=root;
  }
  final Iterator<MatchElement> it=match.getSubMatchElements().iterator();
  while (it.hasNext()) {
    final MatchElement element=it.next();
    if (element instanceof Match3Elements) {
      doDiffDelegate(root,(Match3Elements)element);
    }
 else {
      doDiffDelegate(root,(Match2Elements)element);
    }
  }
}","/** 
 * This is the core of the diff computing for three way comparison. This will call for checks on attributes, references and model elements to check for updates/changes.
 * @param root {@link DiffGroup root} of the {@link DiffModel} to create.
 * @param match {@link Match3Elements root} of the {@link MatchModel} to analyze.
 */
private void doDiffDelegate(DiffGroup root,Match3Elements match){
  final DiffGroup current=DiffFactory.eINSTANCE.createDiffGroup();
  current.setRightParent(match.getRightElement());
  try {
    checkForDiffs(current,match);
  }
 catch (  final FactoryException e) {
    EMFComparePlugin.log(e,false);
  }
  final List<DiffElement> shouldAddToList=new ArrayList<DiffElement>();
  if (current.getSubDiffElements().size() > 0) {
    final Iterator<DiffElement> it2=current.getSubDiffElements().iterator();
    while (it2.hasNext()) {
      final DiffElement diff=it2.next();
      if (!(diff instanceof DiffGroup)) {
        shouldAddToList.add(diff);
      }
    }
    for (    final DiffElement diff : shouldAddToList) {
      addInContainerPackage(root,diff,current.getRightParent());
    }
  }
  final Iterator<MatchElement> it=match.getSubMatchElements().iterator();
  while (it.hasNext()) {
    final MatchElement element=it.next();
    if (element instanceof Match3Elements) {
      doDiffDelegate(root,(Match3Elements)element);
    }
 else {
      doDiffDelegate(root,(Match2Elements)element);
    }
  }
}",0.9876543209876544
93703,"/** 
 * This will process the   {@link #unmatchedElements unmatched elements} list and create the appropriate{@link DiffElement}s. <p> This is called for three-way comparison. Clients can override this to alter the checks or add their own. </p>
 * @param diffRoot {@link DiffGroup} under which to create the {@link DiffElement}s.
 * @param unmatched The MatchModel's  {@link UnmatchElement}s.
 */
protected void processUnmatchedElements(DiffGroup diffRoot,Map<UnmatchElement,Boolean> unmatched){
  for (  final UnmatchElement unmatchElement : unmatched.keySet()) {
    if (unmatched.get(unmatchElement)) {
      processConflictingUnmatchedElement(diffRoot,unmatchElement);
    }
 else {
      final EObject element=unmatchElement.getElement();
      final EObject matchedParent=getMatchedEObject(element.eContainer());
      if (unmatchElement.isRemote()) {
        if (unmatchElement.getSide() == Side.LEFT) {
          final RemoteAddModelElement addOperation=DiffFactory.eINSTANCE.createRemoteAddModelElement();
          addOperation.setRightElement(element);
          addOperation.setLeftParent(matchedParent);
          addInContainerPackage(diffRoot,addOperation,matchedParent);
        }
 else {
          final RemoteRemoveModelElement removeOperation=DiffFactory.eINSTANCE.createRemoteRemoveModelElement();
          removeOperation.setLeftElement(element);
          removeOperation.setRightParent(matchedParent);
          addInContainerPackage(diffRoot,removeOperation,element.eContainer());
        }
      }
 else {
        if (unmatchElement.getSide() == Side.LEFT) {
          final RemoveModelElement removeOperation=DiffFactory.eINSTANCE.createRemoveModelElement();
          removeOperation.setRightElement(element);
          removeOperation.setLeftParent(matchedParent);
          addInContainerPackage(diffRoot,removeOperation,matchedParent);
        }
 else {
          final AddModelElement addOperation=DiffFactory.eINSTANCE.createAddModelElement();
          addOperation.setLeftElement(element);
          addOperation.setRightParent(matchedParent);
          addInContainerPackage(diffRoot,addOperation,element.eContainer());
        }
      }
    }
  }
}","/** 
 * This will process the   {@link #unmatchedElements unmatched elements} list and create the appropriate{@link DiffElement}s. <p> This is called for three-way comparison. Clients can override this to alter the checks or add their own. </p>
 * @param diffRoot {@link DiffGroup} under which to create the {@link DiffElement}s.
 * @param unmatched The MatchModel's  {@link UnmatchElement}s.
 */
protected void processUnmatchedElements(DiffGroup diffRoot,Map<UnmatchElement,Boolean> unmatched){
  for (  final Entry<UnmatchElement,Boolean> entry : unmatched.entrySet()) {
    if (entry.getValue().booleanValue()) {
      processConflictingUnmatchedElement(diffRoot,entry.getKey());
    }
 else {
      final EObject element=entry.getKey().getElement();
      final EObject matchedParent=getMatchedEObject(element.eContainer());
      if (entry.getKey().isRemote()) {
        if (entry.getKey().getSide() == Side.LEFT) {
          final RemoteAddModelElement addOperation=DiffFactory.eINSTANCE.createRemoteAddModelElement();
          addOperation.setRightElement(element);
          addOperation.setLeftParent(matchedParent);
          addInContainerPackage(diffRoot,addOperation,matchedParent);
        }
 else {
          final RemoteRemoveModelElement removeOperation=DiffFactory.eINSTANCE.createRemoteRemoveModelElement();
          removeOperation.setLeftElement(element);
          removeOperation.setRightParent(matchedParent);
          addInContainerPackage(diffRoot,removeOperation,element.eContainer());
        }
      }
 else {
        if (entry.getKey().getSide() == Side.LEFT) {
          final RemoveModelElement removeOperation=DiffFactory.eINSTANCE.createRemoveModelElement();
          removeOperation.setRightElement(element);
          removeOperation.setLeftParent(matchedParent);
          addInContainerPackage(diffRoot,removeOperation,matchedParent);
        }
 else {
          final AddModelElement addOperation=DiffFactory.eINSTANCE.createAddModelElement();
          addOperation.setLeftElement(element);
          addOperation.setRightParent(matchedParent);
          addInContainerPackage(diffRoot,addOperation,element.eContainer());
        }
      }
    }
  }
}",0.943835616438356
93704,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.ecore.util.EcoreUtil$Copier#copyReference(org.eclipse.emf.ecore.EReference,org.eclipse.emf.ecore.EObject,org.eclipse.emf.ecore.EObject)
 */
@SuppressWarnings(""String_Node_Str"") @Override protected void copyReference(EReference eReference,EObject eObject,EObject copyEObject){
  if (!eObject.eIsSet(eReference))   return;
  if (eReference.isMany()) {
    final List<?> referencedObjectsList=(List<?>)eObject.eGet(eReference,resolveProxies);
    if (referencedObjectsList == null)     copyEObject.eSet(getTarget(eReference),null);
 else     if (referencedObjectsList.size() == 0)     copyEObject.eSet(getTarget(eReference),referencedObjectsList);
 else {
      for (      Object referencedEObject : referencedObjectsList) {
        final Object copyReferencedEObject=get(referencedEObject);
        if (copyReferencedEObject != null)         ((List<Object>)copyEObject.eGet(getTarget(eReference))).add(copyReferencedEObject);
 else         if (mergeLinkedDiff((EObject)referencedEObject))         ((List<Object>)copyEObject.eGet(getTarget(eReference))).add(get(referencedEObject));
      }
    }
  }
 else {
    final Object referencedEObject=eObject.eGet(eReference,resolveProxies);
    if (referencedEObject == null)     copyEObject.eSet(getTarget(eReference),null);
 else {
      final Object copyReferencedEObject=get(referencedEObject);
      if (copyReferencedEObject != null)       copyEObject.eSet(getTarget(eReference),copyReferencedEObject);
 else       if (mergeLinkedDiff((EObject)referencedEObject))       copyEObject.eSet(getTarget(eReference),get(referencedEObject));
    }
  }
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.ecore.util.EcoreUtil$Copier#copyReference(org.eclipse.emf.ecore.EReference,org.eclipse.emf.ecore.EObject,org.eclipse.emf.ecore.EObject)
 */
@SuppressWarnings(""String_Node_Str"") @Override protected void copyReference(EReference eReference,EObject eObject,EObject copyEObject){
  if (!eObject.eIsSet(eReference))   return;
  if (eReference.isMany()) {
    final List<?> referencedObjectsList=(List<?>)eObject.eGet(eReference,resolveProxies);
    if (referencedObjectsList == null) {
      copyEObject.eSet(getTarget(eReference),null);
    }
 else     if (referencedObjectsList.size() == 0) {
      copyEObject.eSet(getTarget(eReference),referencedObjectsList);
    }
 else {
      for (      final Object referencedEObject : referencedObjectsList) {
        final Object copyReferencedEObject=get(referencedEObject);
        if (copyReferencedEObject != null) {
          ((List<Object>)copyEObject.eGet(getTarget(eReference))).add(copyReferencedEObject);
        }
 else         if (mergeLinkedDiff((EObject)referencedEObject)) {
          ((List<Object>)copyEObject.eGet(getTarget(eReference))).add(get(referencedEObject));
        }
      }
    }
  }
 else {
    final Object referencedEObject=eObject.eGet(eReference,resolveProxies);
    if (referencedEObject == null) {
      copyEObject.eSet(getTarget(eReference),null);
    }
 else {
      final Object copyReferencedEObject=get(referencedEObject);
      if (copyReferencedEObject != null) {
        copyEObject.eSet(getTarget(eReference),copyReferencedEObject);
      }
 else       if (mergeLinkedDiff((EObject)referencedEObject)) {
        copyEObject.eSet(getTarget(eReference),get(referencedEObject));
      }
    }
  }
}",0.9738406658739596
93705,"/** 
 * This will copy the given <tt>value</tt> to the reference <tt>targetReference</tt> of <tt>target</tt>.
 * @param targetReference The reference to add a value to.
 * @param target The object to copy to.
 * @param value The value that is to be copied.
 * @param matchedValue Matched value of <tt>value</tt> if it is know. Will behave like {@link #copyReferenceValue(EReference,EObject,EObject)} if <code>null</code>.
 */
@SuppressWarnings(""String_Node_Str"") public void copyReferenceValue(EReference targetReference,EObject target,EObject value,EObject matchedValue){
  if (matchedValue != null) {
    put(value,matchedValue);
    ((List<Object>)target.eGet(targetReference)).add(matchedValue);
  }
 else   copyReferenceValue(targetReference,target,value);
}","/** 
 * This will copy the given <tt>value</tt> to the reference <tt>targetReference</tt> of <tt>target</tt>.
 * @param targetReference The reference to add a value to.
 * @param target The object to copy to.
 * @param value The value that is to be copied.
 * @param matchedValue Matched value of <tt>value</tt> if it is know. Will behave like {@link #copyReferenceValue(EReference,EObject,EObject)} if <code>null</code>.
 */
@SuppressWarnings(""String_Node_Str"") public void copyReferenceValue(EReference targetReference,EObject target,EObject value,EObject matchedValue){
  if (matchedValue != null) {
    put(value,matchedValue);
    ((List<Object>)target.eGet(targetReference)).add(matchedValue);
  }
 else {
    copyReferenceValue(targetReference,target,value);
  }
}",0.9947848761408083
93706,"/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.ecore.util.EcoreUtil$Copier#copyReferences()
 */
@Override public void copyReferences(){
  final Set<Map.Entry<EObject,EObject>> entrySetCopy=new HashSet<Map.Entry<EObject,EObject>>(entrySet());
  for (  Map.Entry<EObject,EObject> entry : entrySetCopy) {
    final EObject eObject=entry.getKey();
    final EObject copyEObject=entry.getValue();
    final EClass eClass=eObject.eClass();
    for (int j=0; j < eClass.getFeatureCount(); ++j) {
      final EStructuralFeature eStructuralFeature=eClass.getEStructuralFeature(j);
      if (eStructuralFeature.isChangeable() && !eStructuralFeature.isDerived()) {
        if (eStructuralFeature instanceof EReference) {
          final EReference eReference=(EReference)eStructuralFeature;
          if (!eReference.isContainment() && !eReference.isContainer()) {
            copyReference(eReference,eObject,copyEObject);
          }
        }
 else         if (FeatureMapUtil.isFeatureMap(eStructuralFeature)) {
          copyFeatureMap(eObject,eStructuralFeature);
        }
      }
    }
  }
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.emf.ecore.util.EcoreUtil$Copier#copyReferences()
 */
@Override public void copyReferences(){
  final Set<Map.Entry<EObject,EObject>> entrySetCopy=new HashSet<Map.Entry<EObject,EObject>>(entrySet());
  for (  final Map.Entry<EObject,EObject> entry : entrySetCopy) {
    final EObject eObject=entry.getKey();
    final EObject copyEObject=entry.getValue();
    final EClass eClass=eObject.eClass();
    for (int j=0; j < eClass.getFeatureCount(); ++j) {
      final EStructuralFeature eStructuralFeature=eClass.getEStructuralFeature(j);
      if (eStructuralFeature.isChangeable() && !eStructuralFeature.isDerived()) {
        if (eStructuralFeature instanceof EReference) {
          final EReference eReference=(EReference)eStructuralFeature;
          if (!eReference.isContainment() && !eReference.isContainer()) {
            copyReference(eReference,eObject,copyEObject);
          }
        }
 else         if (FeatureMapUtil.isFeatureMap(eStructuralFeature)) {
          copyFeatureMap(eObject,eStructuralFeature);
        }
      }
    }
  }
}",0.9972451790633609
93707,"/** 
 * Ensures the original and copied objects all share the same XMI ID.
 */
public void copyXMIIDs(){
  for (  Map.Entry<EObject,EObject> entry : entrySet()) {
    final EObject original=entry.getKey();
    final EObject copy=entry.getValue();
    if (original.eResource() instanceof XMIResource && copy.eResource() instanceof XMIResource) {
      final XMIResource originResource=(XMIResource)original.eResource();
      final XMIResource copyResource=(XMIResource)copy.eResource();
      if (originResource.getID(original) != null)       copyResource.setID(copy,originResource.getID(original));
    }
  }
}","/** 
 * Ensures the original and copied objects all share the same XMI ID.
 */
public void copyXMIIDs(){
  for (  final Map.Entry<EObject,EObject> entry : entrySet()) {
    final EObject original=entry.getKey();
    final EObject copy=entry.getValue();
    if (original.eResource() instanceof XMIResource && copy.eResource() instanceof XMIResource) {
      final XMIResource originResource=(XMIResource)original.eResource();
      final XMIResource copyResource=(XMIResource)copy.eResource();
      if (originResource.getID(original) != null) {
        copyResource.setID(copy,originResource.getID(original));
      }
    }
  }
}",0.985483870967742
93708,"/** 
 * Returns the merger class that is best suited for the given   {@link DiffElement}. Merger classes can be managed via   {@link #addMergerType(Class,Class)} and {@link #removeMergerType(Class)}.
 * @param element {@link DiffElement} we want a merger for.
 * @return The merger class that is best suited for the given {@link DiffElement}.
 */
private static Class<? extends IMerger> getBestMerger(DiffElement element){
  Class<? extends IMerger> mergerClass=DefaultMerger.class;
  EObject rightElement=(EObject)ClassUtils.invokeMethod(element,""String_Node_Str"");
  if (rightElement == null) {
    rightElement=(EObject)ClassUtils.invokeMethod(element,""String_Node_Str"");
  }
  String resourceFileExtension=null;
  if (rightElement != null && rightElement.eResource() != null) {
    resourceFileExtension=rightElement.eResource().getURI().fileExtension();
  }
  if (resourceFileExtension == null) {
    resourceFileExtension=ALL_EXTENSIONS;
  }
  final Map<Class<? extends DiffElement>,Class<? extends IMerger>> mergersMap;
  if (EMFPlugin.IS_ECLIPSE_RUNNING) {
    mergersMap=getMergerTypes(resourceFileExtension);
  }
 else {
    mergersMap=MERGER_TYPES;
  }
  if (mergersMap.containsKey(element.getClass())) {
    mergerClass=mergersMap.get(element.getClass());
  }
 else {
    for (    final Class<? extends DiffElement> clazz : mergersMap.keySet()) {
      if (clazz.isInstance(element)) {
        mergerClass=mergersMap.get(clazz);
        break;
      }
    }
  }
  return mergerClass;
}","/** 
 * Returns the merger class that is best suited for the given   {@link DiffElement}. Merger classes can be managed via   {@link #addMergerType(Class,Class)} and {@link #removeMergerType(Class)}.
 * @param element {@link DiffElement} we want a merger for.
 * @return The merger class that is best suited for the given {@link DiffElement}.
 */
private static Class<? extends IMerger> getBestMerger(DiffElement element){
  Class<? extends IMerger> mergerClass=DefaultMerger.class;
  EObject rightElement=(EObject)ClassUtils.invokeMethod(element,""String_Node_Str"");
  if (rightElement == null) {
    rightElement=(EObject)ClassUtils.invokeMethod(element,""String_Node_Str"");
  }
  String resourceFileExtension=null;
  if (rightElement != null && rightElement.eResource() != null) {
    resourceFileExtension=rightElement.eResource().getURI().fileExtension();
  }
  if (resourceFileExtension == null) {
    resourceFileExtension=ALL_EXTENSIONS;
  }
  final Map<Class<? extends DiffElement>,Class<? extends IMerger>> mergersMap;
  if (EMFPlugin.IS_ECLIPSE_RUNNING) {
    mergersMap=getMergerTypes(resourceFileExtension);
  }
 else {
    mergersMap=MERGER_TYPES;
  }
  if (mergersMap.containsKey(element.getClass())) {
    mergerClass=mergersMap.get(element.getClass());
  }
 else {
    for (    final Entry<Class<? extends DiffElement>,Class<? extends IMerger>> entry : mergersMap.entrySet()) {
      if (entry.getKey().isInstance(element)) {
        mergerClass=entry.getValue();
        break;
      }
    }
  }
  return mergerClass;
}",0.9656992084432716
93709,"/** 
 * Returns the value of the attribute <code>name</code> of this descriptor's configuration element. if the attribute hasn't been set, we'll return <code>defaultValue</code> instead.
 * @param name Name of the attribute we seek the value of.
 * @param defaultValue Value to return if the attribute hasn't been set.
 * @return The value of the attribute <code>name</code>, <code>defaultValue</code> if it hasn't beenset.
 */
private String getAttribute(String name,String defaultValue){
  final String value=element.getAttribute(name);
  if (value != null)   return value;
  if (defaultValue != null)   return defaultValue;
  throw new IllegalArgumentException(EMFCompareDiffMessages.getString(""String_Node_Str"",name));
}","/** 
 * Returns the value of the attribute <code>name</code> of this descriptor's configuration element. if the attribute hasn't been set, we'll return <code>defaultValue</code> instead.
 * @param name Name of the attribute we seek the value of.
 * @param defaultValue Value to return if the attribute hasn't been set.
 * @return The value of the attribute <code>name</code>, <code>defaultValue</code> if it hasn't been set.
 */
private String getAttribute(String name,String defaultValue){
  final String value=element.getAttribute(name);
  if (value != null)   return value;
  if (defaultValue != null)   return defaultValue;
  throw new IllegalArgumentException(EMFCompareDiffMessages.getString(""String_Node_Str"",name));
}",0.9993098688750862
93710,"/** 
 * {@inheritDoc}
 * @see java.lang.Object#hashCode()
 */
@Override public int hashCode(){
  final int prime=31;
  int classNameHash=0;
  if (mergerProviderClassName != null)   classNameHash=mergerProviderClassName.hashCode();
  int extensionHash=0;
  if (fileExtension != null)   extensionHash=fileExtension.hashCode();
  int priorityHash=0;
  if (priority != null)   priorityHash=priority.hashCode();
  return (((prime + classNameHash) * prime) + extensionHash) * prime + priorityHash;
}","/** 
 * {@inheritDoc}
 * @see java.lang.Object#hashCode()
 */
@Override public int hashCode(){
  final int prime=31;
  int classNameHash=0;
  if (mergerProviderClassName != null) {
    classNameHash=mergerProviderClassName.hashCode();
  }
  int extensionHash=0;
  if (fileExtension != null) {
    extensionHash=fileExtension.hashCode();
  }
  int priorityHash=0;
  if (priority != null) {
    priorityHash=priority.hashCode();
  }
  return (((prime + classNameHash) * prime) + extensionHash) * prime + priorityHash;
}",0.9762376237623762
93711,"/** 
 * {@inheritDoc}
 * @see java.lang.Object#equals(java.lang.Object)
 */
@Override public boolean equals(Object obj){
  boolean isEqual=true;
  if (this == obj) {
    isEqual=true;
  }
 else   if (obj == null || getClass() != obj.getClass()) {
    isEqual=false;
  }
 else   if (obj instanceof MergerProviderDescriptor) {
    final MergerProviderDescriptor other=(MergerProviderDescriptor)obj;
    if (mergerProviderClassName == null && other.mergerProviderClassName != null) {
      isEqual=false;
    }
 else     if (!mergerProviderClassName.equals(other.mergerProviderClassName)) {
      isEqual=false;
    }
 else     if (fileExtension == null && other.fileExtension != null) {
      isEqual=false;
    }
 else     if (!fileExtension.equals(other.fileExtension)) {
      isEqual=false;
    }
 else     if (priority == null && other.priority != null) {
      isEqual=false;
    }
 else     if (!priority.equals(other.priority)) {
      isEqual=false;
    }
  }
 else {
    isEqual=false;
  }
  return isEqual;
}","/** 
 * {@inheritDoc}
 * @see java.lang.Object#equals(java.lang.Object)
 */
@Override public boolean equals(Object obj){
  boolean isEqual=true;
  if (this == obj) {
    isEqual=true;
  }
 else   if (obj == null || getClass() != obj.getClass()) {
    isEqual=false;
  }
 else   if (obj instanceof MergerProviderDescriptor) {
    final MergerProviderDescriptor other=(MergerProviderDescriptor)obj;
    if (mergerProviderClassName == null && other.mergerProviderClassName != null) {
      isEqual=false;
    }
 else     if (mergerProviderClassName != null && !mergerProviderClassName.equals(other.mergerProviderClassName)) {
      isEqual=false;
    }
 else     if (fileExtension == null && other.fileExtension != null) {
      isEqual=false;
    }
 else     if (fileExtension != null && !fileExtension.equals(other.fileExtension)) {
      isEqual=false;
    }
 else     if (priority == null && other.priority != null) {
      isEqual=false;
    }
 else     if (priority != null && !priority.equals(other.priority)) {
      isEqual=false;
    }
  }
 else {
    isEqual=false;
  }
  return isEqual;
}",0.9621570482497634
93712,"/** 
 * Returns the engine instance.
 * @return The engine instance.
 */
public IMergerProvider getMergerProviderInstance(){
  if (mergerProvider == null) {
    try {
      mergerProvider=(IMergerProvider)element.createExecutableExtension(""String_Node_Str"");
    }
 catch (    CoreException e) {
      EMFComparePlugin.log(e,false);
    }
  }
  return mergerProvider;
}","/** 
 * Returns the engine instance.
 * @return The engine instance.
 */
public IMergerProvider getMergerProviderInstance(){
  if (mergerProvider == null) {
    try {
      mergerProvider=(IMergerProvider)element.createExecutableExtension(""String_Node_Str"");
    }
 catch (    final CoreException e) {
      EMFComparePlugin.log(e,false);
    }
  }
  return mergerProvider;
}",0.9919354838709676
93713,"/** 
 * This will retain the visible differences in the given list.
 * @param leftVisible Items visible on the left part.
 * @param rightVisible Items visible on the right part.
 * @return Filtered list of DiffElements.
 */
protected List<DiffElement> retainVisibleDiffs(List<ModelContentMergeTabItem> leftVisible,List<ModelContentMergeTabItem> rightVisible){
  if (!leftVisible.equals(lastLeftVisible) || !rightVisible.equals(lastRightVisible)) {
    lastVisibleDiffs=new ArrayList<DiffElement>(leftVisible.size() + rightVisible.size());
    for (    ModelContentMergeTabItem left : leftVisible) {
      lastVisibleDiffs.add(left.getDiff());
    }
    for (    ModelContentMergeTabItem right : rightVisible) {
      lastVisibleDiffs.add(right.getDiff());
    }
  }
  return lastVisibleDiffs;
}","/** 
 * This will retain the visible differences in the given list.
 * @param leftVisible Items visible on the left part.
 * @param rightVisible Items visible on the right part.
 * @return Filtered list of DiffElements.
 */
protected List<DiffElement> retainVisibleDiffs(List<ModelContentMergeTabItem> leftVisible,List<ModelContentMergeTabItem> rightVisible){
  final List<DiffElement> visibleDiffs=new ArrayList<DiffElement>(leftVisible.size() + rightVisible.size());
  for (  final ModelContentMergeTabItem left : leftVisible) {
    visibleDiffs.add(left.getDiff());
  }
  for (  final ModelContentMergeTabItem right : rightVisible) {
    visibleDiffs.add(right.getDiff());
  }
  return visibleDiffs;
}",0.8451268357810414
93714,"/** 
 * Paints this component using double-buffering.
 * @param dest Destination  {@link GC graphics}.
 */
void doubleBufferedPaint(GC dest){
  final Point size=getSize();
  if (size.x <= 0 || size.y <= 0)   return;
  if (buffer != null) {
    final Rectangle bufferBounds=buffer.getBounds();
    if (bufferBounds.width != size.x || bufferBounds.height != size.y) {
      buffer.dispose();
      buffer=null;
    }
  }
  if (buffer == null)   buffer=new Image(getDisplay(),size.x,size.y);
  final GC gc=new GC(buffer);
  gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  gc.drawLine(0,0,0,getBounds().height);
  gc.drawLine(getBounds().width - 1,0,getBounds().width - 1,getBounds().height);
  try {
    gc.setBackground(getBackground());
    gc.fillRectangle(0,0,size.x,size.y);
    doPaint(gc);
  }
  finally {
    gc.dispose();
  }
  dest.drawImage(buffer,0,0);
}","/** 
 * Paints this component using double-buffering.
 * @param dest Destination  {@link GC graphics}.
 */
void doubleBufferedPaint(GC dest){
  final Point size=getSize();
  if (size.x <= 0 || size.y <= 0)   return;
  if (buffer != null) {
    final Rectangle bufferBounds=buffer.getBounds();
    if (bufferBounds.width != size.x || bufferBounds.height != size.y) {
      buffer.dispose();
      buffer=null;
    }
  }
  if (buffer == null) {
    buffer=new Image(getDisplay(),size.x,size.y);
  }
  final GC gc=new GC(buffer);
  gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  gc.drawLine(0,0,0,getBounds().height);
  gc.drawLine(getBounds().width - 1,0,getBounds().width - 1,getBounds().height);
  try {
    gc.setBackground(getBackground());
    gc.fillRectangle(0,0,size.x,size.y);
    doPaint(gc);
  }
  finally {
    gc.dispose();
  }
  dest.drawImage(buffer,0,0);
}",0.9955555555555556
93715,"/** 
 * Draws a line connecting the given right and left items.
 * @param gc {@link GC graphics configuration} on which to actually draw.
 * @param leftItem Left of the two items to connect.
 * @param rightItem Right of the items to connect.
 */
protected void drawLine(GC gc,ModelContentMergeTabItem leftItem,ModelContentMergeTabItem rightItem){
  if (leftItem == null || rightItem == null)   return;
  final Rectangle drawingBounds=getBounds();
  RGB color=ModelContentMergeViewer.getColor(leftItem.getCurveColor());
  if (rightItem.getCurveColor() != leftItem.getCurveColor() && rightItem.getCurveColor() != EMFCompareConstants.PREFERENCES_KEY_CHANGED_COLOR)   color=ModelContentMergeViewer.getColor(rightItem.getCurveColor());
  final int treeTabBorder=5;
  final int leftX=0;
  final int rightX=drawingBounds.width;
  final int leftY;
  final int rightY;
  if (System.getProperty(""String_Node_Str"").contains(""String_Node_Str"")) {
    leftY=leftItem.getCurveY() + treeTabBorder;
    rightY=rightItem.getCurveY() + treeTabBorder;
  }
 else {
    leftY=leftItem.getCurveY() + leftItem.getHeaderHeight() + treeTabBorder;
    rightY=rightItem.getCurveY() + rightItem.getHeaderHeight() + treeTabBorder;
  }
  final int lineWidth=leftItem.getCurveSize();
  gc.setForeground(new Color(getDisplay(),color));
  gc.setLineWidth(lineWidth);
  gc.setLineStyle(SWT.LINE_SOLID);
  final int[] points=getCenterCurvePoints(leftX,leftY,rightX,rightY);
  for (int i=1; i < points.length; i++) {
    gc.drawLine(leftX + i - 1,points[i - 1],leftX + i,points[i]);
  }
}","/** 
 * Draws a line connecting the given right and left items.
 * @param gc {@link GC graphics configuration} on which to actually draw.
 * @param leftItem Left of the two items to connect.
 * @param rightItem Right of the items to connect.
 */
protected void drawLine(GC gc,ModelContentMergeTabItem leftItem,ModelContentMergeTabItem rightItem){
  if (leftItem == null || rightItem == null)   return;
  final Rectangle drawingBounds=getBounds();
  RGB color=ModelContentMergeViewer.getColor(leftItem.getCurveColor());
  if (rightItem.getCurveColor() != leftItem.getCurveColor() && rightItem.getCurveColor() != EMFCompareConstants.PREFERENCES_KEY_CHANGED_COLOR) {
    color=ModelContentMergeViewer.getColor(rightItem.getCurveColor());
  }
  final int treeTabBorder=5;
  final int leftX=0;
  final int rightX=drawingBounds.width;
  final int leftY;
  final int rightY;
  if (System.getProperty(""String_Node_Str"").contains(""String_Node_Str"")) {
    leftY=leftItem.getCurveY() + treeTabBorder;
    rightY=rightItem.getCurveY() + treeTabBorder;
  }
 else {
    leftY=leftItem.getCurveY() + leftItem.getHeaderHeight() + treeTabBorder;
    rightY=rightItem.getCurveY() + rightItem.getHeaderHeight() + treeTabBorder;
  }
  final int lineWidth=leftItem.getCurveSize();
  gc.setForeground(new Color(getDisplay(),color));
  gc.setLineWidth(lineWidth);
  gc.setLineStyle(SWT.LINE_SOLID);
  final int[] points=getCenterCurvePoints(leftX,leftY,rightX,rightY);
  for (int i=1; i < points.length; i++) {
    gc.drawLine(leftX + i - 1,points[i - 1],leftX + i,points[i]);
  }
}",0.9974293059125964
93716,"/** 
 * Handles the creation of the tree tab of this viewer part given the parent   {@link Composite} under whichto create it.
 * @param composite Parent  {@link Composite} of the tree to create.
 * @return The tree part displayed by this viewer part's tree tab.
 */
private IModelContentMergeViewerTab createTreePart(Composite composite){
  final IModelContentMergeViewerTab treePart=new ModelContentMergeDiffTab(composite,partSide,this);
  ((Scrollable)treePart.getControl()).getVerticalBar().addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
    public void widgetSelected(    SelectionEvent e){
      fireUpdateCenter();
    }
  }
);
  ((Tree)treePart.getControl()).addTreeListener(new TreeListener(){
    public void treeCollapsed(    TreeEvent e){
      ((TreeItem)e.item).setExpanded(false);
      e.doit=false;
      parentViewer.update();
      expanded=true;
    }
    public void treeExpanded(    TreeEvent e){
      ((TreeItem)e.item).setExpanded(true);
      e.doit=false;
      parentViewer.update();
      expanded=true;
    }
  }
);
  treePart.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      fireSelectionChanged(event);
    }
  }
);
  ((Tree)treePart.getControl()).addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (tree.getSelectedElements().size() > 0) {
        final Item selected=tree.getSelectedElements().get(0);
        for (        final DiffElement diff : ((ModelCompareInput)parentViewer.getInput()).getDiffAsList()) {
          if (!(diff instanceof DiffGroup) && partSide == EMFCompareConstants.LEFT) {
            if (selected.getData().equals(EMFCompareEObjectUtils.getLeftElement(diff))) {
              parentViewer.setSelection(diff);
            }
          }
 else           if (!(diff instanceof DiffGroup) && partSide == EMFCompareConstants.RIGHT) {
            if (selected.getData().equals(EMFCompareEObjectUtils.getRightElement(diff))) {
              parentViewer.setSelection(diff);
            }
          }
        }
        if (!selected.isDisposed() && selected.getData() instanceof EObject) {
          properties.setReflectiveInput(findMatchFromElement((EObject)selected.getData()));
        }
      }
    }
  }
);
  return treePart;
}","/** 
 * Handles the creation of the tree tab of this viewer part given the parent   {@link Composite} under whichto create it.
 * @param composite Parent  {@link Composite} of the tree to create.
 * @return The tree part displayed by this viewer part's tree tab.
 */
private IModelContentMergeViewerTab createTreePart(Composite composite){
  final IModelContentMergeViewerTab treePart=new ModelContentMergeDiffTab(composite,partSide,this);
  ((Scrollable)treePart.getControl()).getVerticalBar().addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
    public void widgetSelected(    SelectionEvent e){
      fireUpdateCenter();
    }
  }
);
  ((Tree)treePart.getControl()).addTreeListener(new TreeListener(){
    public void treeCollapsed(    TreeEvent e){
      ((TreeItem)e.item).setExpanded(false);
      e.doit=false;
      parentViewer.update();
    }
    public void treeExpanded(    TreeEvent e){
      ((TreeItem)e.item).setExpanded(true);
      e.doit=false;
      parentViewer.update();
    }
  }
);
  treePart.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      fireSelectionChanged(event);
    }
  }
);
  ((Tree)treePart.getControl()).addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (tree.getSelectedElements().size() > 0) {
        final Item selected=tree.getSelectedElements().get(0);
        for (        final DiffElement diff : ((ModelCompareInput)parentViewer.getInput()).getDiffAsList()) {
          if (!(diff instanceof DiffGroup) && partSide == EMFCompareConstants.LEFT) {
            if (selected.getData().equals(EMFCompareEObjectUtils.getLeftElement(diff))) {
              parentViewer.setSelection(diff);
            }
          }
 else           if (!(diff instanceof DiffGroup) && partSide == EMFCompareConstants.RIGHT) {
            if (selected.getData().equals(EMFCompareEObjectUtils.getRightElement(diff))) {
              parentViewer.setSelection(diff);
            }
          }
        }
        if (!selected.isDisposed() && selected.getData() instanceof EObject) {
          properties.setReflectiveInput(findMatchFromElement((EObject)selected.getData()));
        }
      }
    }
  }
);
  return treePart;
}",0.9912718204488778
93717,"public void treeExpanded(TreeEvent e){
  ((TreeItem)e.item).setExpanded(true);
  e.doit=false;
  parentViewer.update();
  expanded=true;
}","public void treeExpanded(TreeEvent e){
  ((TreeItem)e.item).setExpanded(true);
  e.doit=false;
  parentViewer.update();
}",0.9343629343629344
93718,"public void treeCollapsed(TreeEvent e){
  ((TreeItem)e.item).setExpanded(false);
  e.doit=false;
  parentViewer.update();
  expanded=true;
}","public void treeCollapsed(TreeEvent e){
  ((TreeItem)e.item).setExpanded(false);
  e.doit=false;
  parentViewer.update();
}",0.935361216730038
93719,"/** 
 * Instantiates a   {@link ModelContentMergeTabFolder} given its parent {@link Composite} and its side.
 * @param viewer Parent viewer of this viewer part.
 * @param composite Parent  {@link Composite} for this part.
 * @param side Comparison side of this part. Must be one of  {@link EMFCompareConstants#LEFT EMFCompareConstants.RIGHT},   {@link EMFCompareConstants#RIGHT EMFCompareConstants.LEFT} or{@link EMFCompareConstants#ANCESTOR EMFCompareConstants.ANCESTOR}.
 */
public ModelContentMergeTabFolder(ModelContentMergeViewer viewer,Composite composite,int side){
  if (side != EMFCompareConstants.RIGHT && side != EMFCompareConstants.LEFT && side != EMFCompareConstants.ANCESTOR)   throw new IllegalArgumentException(EMFCompareUIMessages.getString(""String_Node_Str"",side));
  parentViewer=viewer;
  partSide=side;
  createContents(composite);
}","/** 
 * Instantiates a   {@link ModelContentMergeTabFolder} given its parent {@link Composite} and its side.
 * @param viewer Parent viewer of this viewer part.
 * @param composite Parent  {@link Composite} for this part.
 * @param side Comparison side of this part. Must be one of  {@link EMFCompareConstants#LEFT EMFCompareConstants.RIGHT},   {@link EMFCompareConstants#RIGHT EMFCompareConstants.LEFT} or{@link EMFCompareConstants#ANCESTOR EMFCompareConstants.ANCESTOR}.
 */
public ModelContentMergeTabFolder(ModelContentMergeViewer viewer,Composite composite,int side){
  if (side != EMFCompareConstants.RIGHT && side != EMFCompareConstants.LEFT && side != EMFCompareConstants.ANCESTOR) {
    throw new IllegalArgumentException(EMFCompareUIMessages.getString(""String_Node_Str"",side));
  }
  parentViewer=viewer;
  partSide=side;
  createContents(composite);
}",0.9953379953379954
93720,"/** 
 * Ensures the first item of the given list of   {@link DiffElement}s is visible, and sets the selection of the tree to all those items.
 * @param diffs Items to select.
 */
public void navigateToDiff(List<DiffElement> diffs){
  EObject target=null;
  if (partSide == EMFCompareConstants.LEFT) {
    target=EMFCompareEObjectUtils.getLeftElement(diffs.get(0));
  }
 else   if (partSide == EMFCompareConstants.RIGHT) {
    if (diffs.get(0) instanceof DiffGroup && EMFCompareEObjectUtils.getLeftElement(diffs.get(0)) != null) {
      target=EMFCompareEObjectUtils.getRightElement(findMatchFromElement(EMFCompareEObjectUtils.getLeftElement(diffs.get(0))));
    }
 else     if (!(diffs.get(0) instanceof DiffGroup)) {
      target=EMFCompareEObjectUtils.getRightElement(diffs.get(0));
    }
 else     return;
  }
 else {
    target=EMFCompareEObjectUtils.getAncestorElement(findMatchFromElement(EMFCompareEObjectUtils.getLeftElement(diffs.get(0))));
  }
  tabs.get(tabFolder.getSelectionIndex()).showItems(diffs);
  properties.setReflectiveInput(findMatchFromElement(target));
  parentViewer.getConfiguration().setProperty(EMFCompareConstants.PROPERTY_CONTENT_SELECTION,diffs.get(0));
  parentViewer.updateCenter();
  expanded=true;
}","/** 
 * Ensures the first item of the given list of   {@link DiffElement}s is visible, and sets the selection of the tree to all those items.
 * @param diffs Items to select.
 */
public void navigateToDiff(List<DiffElement> diffs){
  EObject target=null;
  if (partSide == EMFCompareConstants.LEFT) {
    target=EMFCompareEObjectUtils.getLeftElement(diffs.get(0));
  }
 else   if (partSide == EMFCompareConstants.RIGHT) {
    if (diffs.get(0) instanceof DiffGroup && EMFCompareEObjectUtils.getLeftElement(diffs.get(0)) != null) {
      target=EMFCompareEObjectUtils.getRightElement(findMatchFromElement(EMFCompareEObjectUtils.getLeftElement(diffs.get(0))));
    }
 else     if (!(diffs.get(0) instanceof DiffGroup)) {
      target=EMFCompareEObjectUtils.getRightElement(diffs.get(0));
    }
 else     return;
  }
 else {
    target=EMFCompareEObjectUtils.getAncestorElement(findMatchFromElement(EMFCompareEObjectUtils.getLeftElement(diffs.get(0))));
  }
  tabs.get(tabFolder.getSelectionIndex()).showItems(diffs);
  properties.setReflectiveInput(findMatchFromElement(target));
  parentViewer.getConfiguration().setProperty(EMFCompareConstants.PROPERTY_CONTENT_SELECTION,diffs.get(0));
  parentViewer.updateCenter();
}",0.993064055487556
93721,"/** 
 * This will compute the necessary GUI information for the given   {@link ModelContentMergeTabItem} giventhe diff it represents.
 * @param item The item which UI information is to be set.
 */
private void computeUIInfoFor(ModelContentMergeTabItem item){
  final int curveY;
  final DiffElement diff=item.getDiff();
  if (item.getActualItem() == item.getVisibleItem()) {
    if (partSide == EMFCompareConstants.LEFT && diff instanceof ModelElementChangeRightTarget) {
      curveY=((TreeItem)item.getVisibleItem()).getBounds().y + ((TreeItem)item.getVisibleItem()).getBounds().height;
    }
 else     if (partSide == EMFCompareConstants.RIGHT && diff instanceof ModelElementChangeLeftTarget) {
      curveY=((TreeItem)item.getVisibleItem()).getBounds().y + ((TreeItem)item.getVisibleItem()).getBounds().height;
    }
 else {
      curveY=((TreeItem)item.getVisibleItem()).getBounds().y + ((TreeItem)item.getVisibleItem()).getBounds().height / 2;
    }
    item.setCurveY(curveY);
  }
 else {
    if (partSide == EMFCompareConstants.LEFT && diff instanceof ModelElementChangeRightTarget) {
      curveY=((TreeItem)item.getVisibleItem()).getBounds().y + ((TreeItem)item.getVisibleItem()).getBounds().height;
    }
 else     if (partSide == EMFCompareConstants.RIGHT && diff instanceof ModelElementChangeLeftTarget) {
      curveY=((TreeItem)item.getVisibleItem()).getBounds().y + ((TreeItem)item.getVisibleItem()).getBounds().height;
    }
 else {
      curveY=((TreeItem)item.getVisibleItem()).getBounds().y + ((TreeItem)item.getVisibleItem()).getBounds().height;
    }
    item.setCurveY(curveY);
  }
  if (getSelectedElements().contains(item.getActualItem())) {
    item.setCurveSize(2);
  }
 else {
    item.setCurveSize(1);
  }
}","/** 
 * This will compute the necessary GUI information for the given   {@link ModelContentMergeTabItem} giventhe diff it represents.
 * @param item The item which UI information is to be set.
 */
private void computeUIInfoFor(ModelContentMergeTabItem item){
  final int curveY;
  final DiffElement diff=item.getDiff();
  if (item.getActualItem() == item.getVisibleItem()) {
    if (partSide == EMFCompareConstants.LEFT && diff instanceof ModelElementChangeRightTarget) {
      curveY=((TreeItem)item.getVisibleItem()).getBounds().y + ((TreeItem)item.getVisibleItem()).getBounds().height;
    }
 else     if (partSide == EMFCompareConstants.RIGHT && diff instanceof ModelElementChangeLeftTarget) {
      curveY=((TreeItem)item.getVisibleItem()).getBounds().y + ((TreeItem)item.getVisibleItem()).getBounds().height;
    }
 else {
      curveY=((TreeItem)item.getVisibleItem()).getBounds().y + ((TreeItem)item.getVisibleItem()).getBounds().height / 2;
    }
    item.setCurveY(curveY);
  }
 else {
    if (partSide == EMFCompareConstants.LEFT && diff instanceof ModelElementChangeRightTarget) {
      curveY=((TreeItem)item.getVisibleItem()).getBounds().y + ((TreeItem)item.getVisibleItem()).getBounds().height;
    }
 else     if (partSide == EMFCompareConstants.RIGHT && diff instanceof ModelElementChangeLeftTarget) {
      curveY=((TreeItem)item.getVisibleItem()).getBounds().y + ((TreeItem)item.getVisibleItem()).getBounds().height;
    }
 else {
      curveY=((TreeItem)item.getVisibleItem()).getBounds().y + ((TreeItem)item.getVisibleItem()).getBounds().height / 2;
    }
    item.setCurveY(curveY);
  }
  if (getSelectedElements().contains(item.getActualItem())) {
    item.setCurveSize(2);
  }
 else {
    item.setCurveSize(1);
  }
}",0.998849252013809
93722,"/** 
 * {@inheritDoc}
 * @see org.eclipse.jface.viewers.AbstractTreeViewer#inputChanged(java.lang.Object,java.lang.Object)
 */
@Override protected void inputChanged(Object input,Object oldInput){
  final TreePath[] expandedPaths=getExpandedTreePaths();
  super.inputChanged(input,oldInput);
  if (input != null) {
    if (!(input instanceof ComparisonSnapshot) && input != oldInput) {
      final ComparisonSnapshot snapshot=ModelComparator.getComparator(configuration).getComparisonResult();
      final Object match;
      if (snapshot instanceof ComparisonResourceSetSnapshot) {
        match=((ComparisonResourceSetSnapshot)snapshot).getMatchResourceSet();
      }
 else {
        match=((ComparisonResourceSnapshot)snapshot).getMatch();
      }
      if (match != null) {
        setInput(snapshot);
      }
 else {
        setInput(null);
      }
    }
    updateToolItems();
    setExpandedTreePaths(expandedPaths);
  }
 else {
    hideStructurePane();
  }
}","/** 
 * {@inheritDoc}
 * @see org.eclipse.jface.viewers.AbstractTreeViewer#inputChanged(java.lang.Object,java.lang.Object)
 */
@Override protected void inputChanged(Object input,Object oldInput){
  final TreePath[] expandedPaths=getExpandedTreePaths();
  super.inputChanged(input,oldInput);
  if (input != null) {
    if (!(input instanceof ComparisonSnapshot) && input != oldInput) {
      final ComparisonSnapshot snapshot=ModelComparator.getComparator(configuration).getComparisonResult();
      final Object match;
      match=((ComparisonResourceSetSnapshot)snapshot).getMatchResourceSet();
      if (match != null) {
        setInput(snapshot);
      }
 else {
        setInput(null);
      }
    }
    updateToolItems();
    setExpandedTreePaths(expandedPaths);
  }
 else {
    hideStructurePane();
  }
}",0.8806306306306306
93723,"/** 
 * Returns a list containing mappings of the nodes of both given   {@link List}s.
 * @param list1 First of the lists from which we need to map the elements
 * @param list2 Second list to map the elements from.
 * @param window Number of siblings to consider for the matching.
 * @param monitor {@link CompareProgressMonitor Progress monitor} to display while the comparison lasts. Mightbe <code>null</code>, in which case we won't monitor progress.
 * @return A {@link List} containing mappings of the nodes of both given {@link List}s.
 * @throws FactoryException Thrown if the metrics cannot be computed.
 * @throws InterruptedException Thrown if the matching process is interrupted somehow.
 */
private List<Match2Elements> mapLists(List<EObject> list1,List<EObject> list2,int window,CompareProgressMonitor monitor) throws FactoryException, InterruptedException {
  final List<Match2Elements> result=new ArrayList<Match2Elements>();
  int curIndex=0 - window / 2;
  final List<EObject> notFoundList1=new ArrayList<EObject>(list1);
  final List<EObject> notFoundList2=new ArrayList<EObject>(list2);
  final Iterator<EObject> it1=list1.iterator();
  while (it1.hasNext() && notFoundList2.size() > 0) {
    final EObject obj1=it1.next();
    final StringBuilder obj1Key=new StringBuilder();
    obj1Key.append(NameSimilarity.findName(obj1));
    obj1Key.append(obj1.hashCode());
    EObject obj2=matchedByID.get(obj1Key.toString());
    if (obj2 == null) {
      final int end=Math.min(curIndex + window - (list2.size() - notFoundList2.size()),notFoundList2.size());
      final int index=Math.min(Math.max(curIndex - (list2.size() - notFoundList2.size()),0),end);
      obj2=findMostSimilar(obj1,notFoundList2.subList(index,end));
      if (obj2 != null) {
        final EObject obj1Check=findMostSimilar(obj2,notFoundList1);
        if (obj1Check != obj1 && obj1Check != null && isSimilar(obj1Check,obj2)) {
          continue;
        }
      }
    }
    if (notFoundList1.contains(obj1) && notFoundList2.contains(obj2) && isSimilar(obj1,obj2)) {
      final Match2Elements mapping=MatchFactory.eINSTANCE.createMatch2Elements();
      final double metric=absoluteMetric(obj1,obj2);
      mapping.setLeftElement(obj1);
      mapping.setRightElement(obj2);
      mapping.setSimilarity(metric);
      result.add(mapping);
      notFoundList1.remove(obj1);
      notFoundList2.remove(obj2);
    }
    curIndex+=1;
    monitor.worked(1);
    if (monitor.isCanceled())     throw new InterruptedException();
  }
  stillToFindFromModel1.addAll(notFoundList1);
  stillToFindFromModel2.addAll(notFoundList2);
  return result;
}","/** 
 * Returns a list containing mappings of the nodes of both given   {@link List}s.
 * @param list1 First of the lists from which we need to map the elements
 * @param list2 Second list to map the elements from.
 * @param window Number of siblings to consider for the matching.
 * @param monitor {@link CompareProgressMonitor Progress monitor} to display while the comparison lasts. Mightbe <code>null</code>, in which case we won't monitor progress.
 * @return A {@link List} containing mappings of the nodes of both given {@link List}s.
 * @throws FactoryException Thrown if the metrics cannot be computed.
 * @throws InterruptedException Thrown if the matching process is interrupted somehow.
 */
private List<Match2Elements> mapLists(List<EObject> list1,List<EObject> list2,int window,CompareProgressMonitor monitor) throws FactoryException, InterruptedException {
  final List<Match2Elements> result=new ArrayList<Match2Elements>();
  int curIndex=0 - window / 2;
  final List<EObject> notFoundList1=new ArrayList<EObject>(list1);
  final List<EObject> notFoundList2=new ArrayList<EObject>(list2);
  final Iterator<EObject> it1=list1.iterator();
  while (it1.hasNext() && notFoundList2.size() > 0) {
    final EObject obj1=it1.next();
    final StringBuilder obj1Key=new StringBuilder();
    obj1Key.append(NameSimilarity.findName(obj1));
    obj1Key.append(obj1.hashCode());
    EObject obj2=matchedByID.get(obj1Key.toString());
    if (obj2 == null) {
      final int end=Math.min(curIndex + window - (list2.size() - notFoundList2.size()),notFoundList2.size());
      final int index=Math.min(Math.max(curIndex - (list2.size() - notFoundList2.size()),0),end);
      obj2=findMostSimilar(obj1,notFoundList2.subList(index,end));
      if (obj2 != null) {
        final EObject obj1Check=findMostSimilar(obj2,notFoundList1);
        if (obj1Check != obj1 && obj1Check != null && isSimilar(obj1Check,obj2)) {
          continue;
        }
      }
    }
    if (notFoundList1.contains(obj1) && notFoundList2.contains(obj2) && isSimilar(obj1,obj2)) {
      final Match2Elements mapping=MatchFactory.eINSTANCE.createMatch2Elements();
      final double metric=absoluteMetric(obj1,obj2);
      mapping.setLeftElement(obj1);
      mapping.setRightElement(obj2);
      mapping.setSimilarity(metric);
      result.add(mapping);
      notFoundList1.remove(obj1);
      notFoundList2.remove(obj2);
    }
    curIndex+=1;
    monitor.worked(1);
    if (monitor.isCanceled()) {
      throw new InterruptedException();
    }
  }
  stillToFindFromModel1.addAll(notFoundList1);
  stillToFindFromModel2.addAll(notFoundList2);
  return result;
}",0.9980988593155894
93724,"/** 
 * Counts all the   {@link EStructuralFeature features} of the given {@link EObject} that are<code>null</code> or initialized to the empty  {@link String} &quot;&quot;.
 * @param eobj {@link EObject} we need to count the empty features of.
 * @return The number of features not initialized to <code>null</code> or the empty String.
 */
private int nonNullFeaturesCount(EObject eobj){
  Integer nonNullFeatures=nonNullFeatureCounts.get(eobj);
  if (nonNullFeatures == null) {
    int count=0;
    final Iterator<EStructuralFeature> features=eobj.eClass().getEAllStructuralFeatures().iterator();
    while (features.hasNext()) {
      final EStructuralFeature feature=features.next();
      if (eobj.eGet(feature) != null && !""String_Node_Str"".equals(eobj.eGet(feature).toString())) {
        count++;
      }
    }
    nonNullFeatures=new Integer(count);
    nonNullFeatureCounts.put(eobj,nonNullFeatures);
  }
  return nonNullFeatures.intValue();
}","/** 
 * Counts all the   {@link EStructuralFeature features} of the given {@link EObject} that are<code>null</code> or initialized to the empty  {@link String} &quot;&quot;.
 * @param eobj {@link EObject} we need to count the empty features of.
 * @return The number of features not initialized to <code>null</code> or the empty String.
 */
private int nonNullFeaturesCount(EObject eobj){
  Integer nonNullFeatures=nonNullFeatureCounts.get(eobj);
  if (nonNullFeatures == null) {
    int count=0;
    final Iterator<EStructuralFeature> features=eobj.eClass().getEAllStructuralFeatures().iterator();
    while (features.hasNext()) {
      final EStructuralFeature feature=features.next();
      if (eobj.eGet(feature) != null && !""String_Node_Str"".equals(eobj.eGet(feature).toString())) {
        count++;
      }
    }
    nonNullFeatures=Integer.valueOf(count);
    nonNullFeatureCounts.put(eobj,nonNullFeatures);
  }
  return nonNullFeatures.intValue();
}",0.993717277486911
93725,"/** 
 * Creates   {@link UnmatchElement}s and   {@link RemoteUnmatchElement}s wrapped around all the elements of the given   {@link List}.
 * @param root Root of the  {@link MatchModel} under which to insert all these elements.
 * @param unmatchedElements {@link List} containing all the elements we haven't been able to match.
 * @param leftSide If set to <code>true</code>, the unmatched element will be set to be from the left side.
 * @throws FactoryException Thrown if we cannot add elements under the given  {@link MatchModel root}.
 */
private void createThreeWayUnmatchElements(MatchModel root,Map<EObject,Boolean> unmatchedElements,boolean leftSide) throws FactoryException {
  for (  final EObject element : unmatchedElements.keySet()) {
    if (!unmatchedElements.containsKey(element.eContainer())) {
      final UnmatchElement unMap=MatchFactory.eINSTANCE.createUnmatchElement();
      unMap.setElement(element);
      if (unmatchedElements.get(element)) {
        unMap.setRemote(true);
      }
      if (leftSide) {
        unMap.setSide(Side.LEFT);
      }
 else {
        unMap.setSide(Side.RIGHT);
      }
      redirectedAdd(root,UNMATCH_ELEMENT_NAME,unMap);
    }
  }
  unmatchedElements.clear();
}","/** 
 * Creates   {@link UnmatchElement}s and   {@link RemoteUnmatchElement}s wrapped around all the elements of the given   {@link List}.
 * @param root Root of the  {@link MatchModel} under which to insert all these elements.
 * @param unmatchedElements {@link List} containing all the elements we haven't been able to match.
 * @param leftSide If set to <code>true</code>, the unmatched element will be set to be from the left side.
 * @throws FactoryException Thrown if we cannot add elements under the given  {@link MatchModel root}.
 */
private void createThreeWayUnmatchElements(MatchModel root,Map<EObject,Boolean> unmatchedElements,boolean leftSide) throws FactoryException {
  for (  final Entry<EObject,Boolean> entry : unmatchedElements.entrySet()) {
    if (!unmatchedElements.containsKey(entry.getKey().eContainer())) {
      final UnmatchElement unMap=MatchFactory.eINSTANCE.createUnmatchElement();
      unMap.setElement(entry.getKey());
      if (entry.getValue()) {
        unMap.setRemote(true);
      }
      if (leftSide) {
        unMap.setSide(Side.LEFT);
      }
 else {
        unMap.setSide(Side.RIGHT);
      }
      redirectedAdd(root,UNMATCH_ELEMENT_NAME,unMap);
    }
  }
  unmatchedElements.clear();
}",0.9554920375663536
93726,"/** 
 * Returns the engine instance.
 * @return The engine instance.
 */
public IMatchEngine getEngineInstance(){
  if (engine == null) {
    try {
      engine=(IMatchEngine)element.createExecutableExtension(""String_Node_Str"");
    }
 catch (    final CoreException e) {
      EMFComparePlugin.log(e,false);
    }
  }
  engine.reset();
  return engine;
}","/** 
 * Returns the engine instance.
 * @return The engine instance.
 */
public IMatchEngine getEngineInstance(){
  if (engine == null) {
    try {
      engine=(IMatchEngine)element.createExecutableExtension(""String_Node_Str"");
    }
 catch (    final CoreException e) {
      EMFComparePlugin.log(e,false);
    }
  }
  if (engine != null) {
    engine.reset();
  }
  return engine;
}",0.9594594594594594
93727,"/** 
 * {@inheritDoc}
 * @see java.lang.Object#equals(java.lang.Object)
 */
@Override public boolean equals(Object obj){
  boolean isEqual=true;
  if (this == obj) {
    isEqual=true;
  }
 else   if (obj == null || getClass() != obj.getClass()) {
    isEqual=false;
  }
 else {
    final MatchEngineDescriptor other=(MatchEngineDescriptor)obj;
    if (engineClassName == null && other.engineClassName != null) {
      isEqual=false;
    }
 else     if (!engineClassName.equals(other.engineClassName)) {
      isEqual=false;
    }
 else     if (fileExtension == null && other.fileExtension != null) {
      isEqual=false;
    }
 else     if (!fileExtension.equals(other.fileExtension)) {
      isEqual=false;
    }
 else     if (priority == null && other.priority != null) {
      isEqual=false;
    }
 else     if (!priority.equals(other.priority)) {
      isEqual=false;
    }
  }
  return isEqual;
}","/** 
 * {@inheritDoc}
 * @see java.lang.Object#equals(java.lang.Object)
 */
@Override public boolean equals(Object obj){
  boolean isEqual=true;
  if (this == obj) {
    isEqual=true;
  }
 else   if (obj == null || getClass() != obj.getClass()) {
    isEqual=false;
  }
 else {
    final MatchEngineDescriptor other=(MatchEngineDescriptor)obj;
    if (engineClassName == null && other.engineClassName != null) {
      isEqual=false;
    }
 else     if (engineClassName != null && !engineClassName.equals(other.engineClassName)) {
      isEqual=false;
    }
 else     if (fileExtension == null && other.fileExtension != null) {
      isEqual=false;
    }
 else     if (fileExtension != null && !fileExtension.equals(other.fileExtension)) {
      isEqual=false;
    }
 else     if (priority == null && other.priority != null) {
      isEqual=false;
    }
 else     if (priority != null && !priority.equals(other.priority)) {
      isEqual=false;
    }
  }
  return isEqual;
}",0.9615795090715048
93728,"/** 
 * Return a metric result about name similarity. It compares 2 strings and return a double comprised between 0 and 1. The greater this metric, the more equal the strings are.
 * @param str1 First of the two  {@link String}s to compare.
 * @param str2 Second of the two  {@link String}s to compare.
 * @return A metric result about name similarity (0 &lt;= value &lt;= 1).
 */
public static double nameSimilarityMetric(String str1,String str2){
  double result=0d;
  final double almostEquals=0.999999d;
  if (str1 != null && str2 != null) {
    if (str1.equals(str2)) {
      result=1d;
    }
 else     if (str1.length() <= 2 && str2.length() <= 2) {
      int equalChars=0;
      final char[] str1Value=str1.toCharArray();
      final char[] str2Value=str2.toCharArray();
      for (int i=0; i < Math.max(str1Value.length,str2Value.length); i++) {
        if (str1Value[i] == str2Value[i]) {
          equalChars++;
        }
      }
      if (str1Value.length != str2Value.length) {
        result=equalChars / (str1Value.length + str2Value.length);
      }
 else {
        result=equalChars * 2d / (str1Value.length + str2Value.length);
      }
    }
 else     if (str1.length() != 1 && str2.length() != 1) {
      final String string1=str1.toLowerCase();
      final String string2=str2.toLowerCase();
      final List<String> pairs1=pairs(string1);
      final List<String> pairs2=pairs(string2);
      final double union=pairs1.size() + pairs2.size();
      pairs1.retainAll(pairs2);
      final int inter=pairs1.size();
      result=inter * 2d / union;
      if (result > 1) {
        result=1;
      }
      if (result == 1d) {
        result=almostEquals;
      }
    }
  }
  return result;
}","/** 
 * Return a metric result about name similarity. It compares 2 strings and return a double comprised between 0 and 1. The greater this metric, the more equal the strings are.
 * @param str1 First of the two  {@link String}s to compare.
 * @param str2 Second of the two  {@link String}s to compare.
 * @return A metric result about name similarity (0 &lt;= value &lt;= 1).
 */
public static double nameSimilarityMetric(String str1,String str2){
  double result=0d;
  final double almostEquals=0.999999d;
  if (str1 != null && str2 != null) {
    if (str1.equals(str2)) {
      result=1d;
    }
 else     if (str1.length() <= 2 && str2.length() <= 2) {
      int equalChars=0;
      final char[] str1Value=str1.toCharArray();
      final char[] str2Value=str2.toCharArray();
      for (int i=0; i < Math.max(str1Value.length,str2Value.length); i++) {
        if (str1Value[i] == str2Value[i]) {
          equalChars++;
        }
      }
      if (str1Value.length != str2Value.length) {
        result=(double)equalChars / (double)(str1Value.length + str2Value.length);
      }
 else {
        result=equalChars * 2d / (str1Value.length + str2Value.length);
      }
    }
 else     if (str1.length() != 1 && str2.length() != 1) {
      final String string1=str1.toLowerCase();
      final String string2=str2.toLowerCase();
      final List<String> pairs1=pairs(string1);
      final List<String> pairs2=pairs(string2);
      final double union=pairs1.size() + pairs2.size();
      pairs1.retainAll(pairs2);
      final int inter=pairs1.size();
      result=inter * 2d / union;
      if (result > 1) {
        result=1d;
      }
 else       if (result > almostEquals) {
        result=almostEquals;
      }
    }
  }
  return result;
}",0.967479674796748
93729,"/** 
 * Returns the feature which seems to be the name of the given   {@link EObject}.
 * @param current {@link EObject} we seek the name feature of.
 * @return The feature which seems to be the name of the given {@link EObject}.
 */
public static EAttribute findNameFeature(EObject current){
  final EClass eclass=current.eClass();
  EAttribute bestFeature=NAME_FEATURE_CACHE.get(eclass.getName() + eclass.hashCode());
  if (bestFeature == null) {
    List<EAttribute> eClassAttributes=new ArrayList<EAttribute>();
    eClassAttributes=eclass.getEAllAttributes();
    if (eClassAttributes.size() > 0) {
      bestFeature=eClassAttributes.get(0);
    }
    if (eClassAttributes.size() > 0) {
      double max=0d;
      for (      final EAttribute attribute : eClassAttributes) {
        final String attributeName=attribute.getName();
        if (nameSimilarityMetric(attributeName,EOBJECT_NAME_FEATURE) > max) {
          max=nameSimilarityMetric(attributeName,EOBJECT_NAME_FEATURE);
          bestFeature=attribute;
        }
      }
      NAME_FEATURE_CACHE.put(eclass.getName() + eclass.hashCode(),bestFeature);
    }
  }
  return bestFeature;
}","/** 
 * Returns the feature which seems to be the name of the given   {@link EObject}.
 * @param current {@link EObject} we seek the name feature of.
 * @return The feature which seems to be the name of the given {@link EObject}.
 */
public static EAttribute findNameFeature(EObject current){
  final EClass eclass=current.eClass();
  EAttribute bestFeature=NAME_FEATURE_CACHE.get(eclass.getName() + eclass.hashCode());
  if (bestFeature == null) {
    final List<EAttribute> eClassAttributes=eclass.getEAllAttributes();
    if (eClassAttributes.size() > 0) {
      bestFeature=eClassAttributes.get(0);
    }
    if (eClassAttributes.size() > 0) {
      double max=0d;
      for (      final EAttribute attribute : eClassAttributes) {
        final String attributeName=attribute.getName();
        if (nameSimilarityMetric(attributeName,EOBJECT_NAME_FEATURE) > max) {
          max=nameSimilarityMetric(attributeName,EOBJECT_NAME_FEATURE);
          bestFeature=attribute;
        }
      }
      NAME_FEATURE_CACHE.put(eclass.getName() + eclass.hashCode(),bestFeature);
    }
  }
  return bestFeature;
}",0.9751552795031057
93730,"/** 
 * This will iterate through the list of the parsed providers from the lowest to the highest priority and associate each known   {@link DiffElement} to a merger in order of their provider's priority.
 * @param fileExtension File extension on which the provider can apply its mergers.
 * @return The map of the merger associated to given {@link DiffElement}s.
 */
private static Map<Class<? extends DiffElement>,Class<? extends IMerger>> getMergerTypes(String fileExtension){
  if (!fileExtension.equals(lastExtension)) {
    lastExtension=fileExtension;
    MERGER_TYPES.clear();
    final int[] priorities={EngineConstants.PRIORITY_LOWEST,EngineConstants.PRIORITY_LOW,EngineConstants.PRIORITY_NORMAL,EngineConstants.PRIORITY_HIGH,EngineConstants.PRIORITY_HIGHEST};
    for (    int priority : priorities) {
      final Map<Class<? extends DiffElement>,Class<? extends IMerger>> mergers=new EMFCompareMap<Class<? extends DiffElement>,Class<? extends IMerger>>();
      if (PARSED_PROVIDERS.containsKey(ALL_EXTENSIONS)) {
        final List<MergerProviderDescriptor> list=PARSED_PROVIDERS.get(ALL_EXTENSIONS);
        Collections.sort(list);
        for (        MergerProviderDescriptor descriptor : list) {
          if (descriptor.getPriorityValue(descriptor.priority) == priority) {
            mergers.putAll(descriptor.getMergerProviderInstance().getMergers());
          }
        }
      }
      if (PARSED_PROVIDERS.containsKey(fileExtension)) {
        final List<MergerProviderDescriptor> list=PARSED_PROVIDERS.get(fileExtension);
        Collections.sort(list);
        for (        MergerProviderDescriptor descriptor : list) {
          if (descriptor.getPriorityValue(descriptor.priority) == priority) {
            mergers.putAll(descriptor.getMergerProviderInstance().getMergers());
          }
        }
      }
      MERGER_TYPES.putAll(mergers);
    }
  }
  return MERGER_TYPES;
}","/** 
 * This will iterate through the list of the parsed providers from the lowest to the highest priority and associate each known   {@link DiffElement} to a merger in order of their provider's priority.
 * @param fileExtension File extension on which the provider can apply its mergers.
 * @return The map of the merger associated to given {@link DiffElement}s.
 */
private static Map<Class<? extends DiffElement>,Class<? extends IMerger>> getMergerTypes(String fileExtension){
  if (!fileExtension.equals(lastExtension)) {
    lastExtension=fileExtension;
    MERGER_TYPES.clear();
    for (    final int priority : MERGER_PRIORITIES) {
      final Map<Class<? extends DiffElement>,Class<? extends IMerger>> mergers=new EMFCompareMap<Class<? extends DiffElement>,Class<? extends IMerger>>();
      if (PARSED_PROVIDERS.containsKey(ALL_EXTENSIONS)) {
        final List<MergerProviderDescriptor> list=PARSED_PROVIDERS.get(ALL_EXTENSIONS);
        Collections.sort(list);
        for (        final MergerProviderDescriptor descriptor : list) {
          if (descriptor.getPriorityValue(descriptor.priority) == priority) {
            mergers.putAll(descriptor.getMergerProviderInstance().getMergers());
          }
        }
      }
      if (PARSED_PROVIDERS.containsKey(fileExtension)) {
        final List<MergerProviderDescriptor> list=PARSED_PROVIDERS.get(fileExtension);
        Collections.sort(list);
        for (        final MergerProviderDescriptor descriptor : list) {
          if (descriptor.getPriorityValue(descriptor.priority) == priority) {
            mergers.putAll(descriptor.getMergerProviderInstance().getMergers());
          }
        }
      }
      MERGER_TYPES.putAll(mergers);
    }
  }
  return MERGER_TYPES;
}",0.9289827255278312
93731,"/** 
 * Stores the given descriptor in the list of known   {@link MergerProviderDescriptor}s.
 * @param desc Descriptor to be added to the list of all know descriptors.
 */
private static void storeProviderDescriptor(MergerProviderDescriptor desc){
  if (desc.getFileExtension() == null)   return;
  final String[] extensions=desc.getFileExtension().split(""String_Node_Str"");
  for (  String mergerExtension : extensions) {
    if (!PARSED_PROVIDERS.containsKey(mergerExtension)) {
      PARSED_PROVIDERS.put(mergerExtension,new ArrayList<MergerProviderDescriptor>());
    }
    final List<MergerProviderDescriptor> set=PARSED_PROVIDERS.get(mergerExtension);
    set.add(desc);
  }
}","/** 
 * Stores the given descriptor in the list of known   {@link MergerProviderDescriptor}s.
 * @param desc Descriptor to be added to the list of all know descriptors.
 */
private static void storeProviderDescriptor(MergerProviderDescriptor desc){
  if (desc.getFileExtension() == null)   return;
  final String[] extensions=desc.getFileExtension().split(""String_Node_Str"");
  for (  final String mergerExtension : extensions) {
    if (!PARSED_PROVIDERS.containsKey(mergerExtension)) {
      PARSED_PROVIDERS.put(mergerExtension,new ArrayList<MergerProviderDescriptor>());
    }
    final List<MergerProviderDescriptor> set=PARSED_PROVIDERS.get(mergerExtension);
    set.add(desc);
  }
}",0.9956268221574344
93732,"/** 
 * Returns the merger class that is best suited for the given   {@link DiffElement}. Merger classes can be managed via   {@link #addMergerType(Class,Class)} and {@link #removeMergerType(Class)}.
 * @param element {@link DiffElement} we want a merger for.
 * @return The merger class that is best suited for the given {@link DiffElement}.
 */
private static Class<? extends IMerger> getBestMerger(DiffElement element){
  Class<? extends IMerger> mergerClass=DefaultMerger.class;
  EObject leftElement=(EObject)ClassUtils.invokeMethod(element,""String_Node_Str"");
  if (leftElement == null)   leftElement=(EObject)ClassUtils.invokeMethod(element,""String_Node_Str"");
  String resourceFileExtension=null;
  if (leftElement != null)   resourceFileExtension=leftElement.eResource().getURI().fileExtension();
  if (resourceFileExtension == null)   resourceFileExtension=ALL_EXTENSIONS;
  final Map<Class<? extends DiffElement>,Class<? extends IMerger>> mergersMap;
  if (EMFPlugin.IS_ECLIPSE_RUNNING)   mergersMap=getMergerTypes(resourceFileExtension);
 else   mergersMap=MERGER_TYPES;
  if (mergersMap.containsKey(element.getClass())) {
    mergerClass=mergersMap.get(element.getClass());
  }
 else {
    for (    Class<? extends DiffElement> clazz : mergersMap.keySet()) {
      if (clazz.isInstance(element)) {
        mergerClass=mergersMap.get(clazz);
        break;
      }
    }
  }
  return mergerClass;
}","/** 
 * Returns the merger class that is best suited for the given   {@link DiffElement}. Merger classes can be managed via   {@link #addMergerType(Class,Class)} and {@link #removeMergerType(Class)}.
 * @param element {@link DiffElement} we want a merger for.
 * @return The merger class that is best suited for the given {@link DiffElement}.
 */
private static Class<? extends IMerger> getBestMerger(DiffElement element){
  Class<? extends IMerger> mergerClass=DefaultMerger.class;
  EObject rightElement=(EObject)ClassUtils.invokeMethod(element,""String_Node_Str"");
  if (rightElement == null) {
    rightElement=(EObject)ClassUtils.invokeMethod(element,""String_Node_Str"");
  }
  String resourceFileExtension=null;
  if (rightElement != null) {
    resourceFileExtension=rightElement.eResource().getURI().fileExtension();
  }
  if (resourceFileExtension == null) {
    resourceFileExtension=ALL_EXTENSIONS;
  }
  final Map<Class<? extends DiffElement>,Class<? extends IMerger>> mergersMap;
  if (EMFPlugin.IS_ECLIPSE_RUNNING) {
    mergersMap=getMergerTypes(resourceFileExtension);
  }
 else {
    mergersMap=MERGER_TYPES;
  }
  if (mergersMap.containsKey(element.getClass())) {
    mergerClass=mergersMap.get(element.getClass());
  }
 else {
    for (    final Class<? extends DiffElement> clazz : mergersMap.keySet()) {
      if (clazz.isInstance(element)) {
        mergerClass=mergersMap.get(clazz);
        break;
      }
    }
  }
  return mergerClass;
}",0.96760710553814
93733,"/** 
 * Handles the creation of the merger for a given   {@link DiffElement}.
 * @param element {@link DiffElement} for which we need a merger.
 * @return The merger adapted to <code>element</code>, <code>null</code> if it cannot beinstantiated.
 */
public static IMerger createMerger(DiffElement element){
  final Class<? extends IMerger> mergerClass=getBestMerger(element);
  IMerger elementMerger=null;
  try {
    elementMerger=mergerClass.newInstance();
    elementMerger.setDiffElement(element);
  }
 catch (  InstantiationException e) {
    EMFComparePlugin.log(e.getMessage(),false);
  }
catch (  IllegalAccessException e) {
    EMFComparePlugin.log(e.getMessage(),false);
  }
  return elementMerger;
}","/** 
 * Handles the creation of the merger for a given   {@link DiffElement}.
 * @param element {@link DiffElement} for which we need a merger.
 * @return The merger adapted to <code>element</code>, <code>null</code> if it cannot be instantiated.
 */
public static IMerger createMerger(DiffElement element){
  final Class<? extends IMerger> mergerClass=getBestMerger(element);
  IMerger elementMerger=null;
  try {
    elementMerger=mergerClass.newInstance();
    elementMerger.setDiffElement(element);
  }
 catch (  final InstantiationException e) {
    EMFComparePlugin.log(e.getMessage(),false);
  }
catch (  final IllegalAccessException e) {
    EMFComparePlugin.log(e.getMessage(),false);
  }
  return elementMerger;
}",0.9909281228192603
93734,"/** 
 * Creates a new model content merge viewer and intializes it.
 * @param parent Parent composite for this viewer.
 * @param config The configuration object.
 */
public ModelContentMergeViewer(Composite parent,CompareConfiguration config){
  super(SWT.NONE,ResourceBundle.getBundle(BUNDLE_NAME),config);
  configuration=config;
  buildControl(parent);
  getCenterPart().addPaintListener(new CenterPaintListener());
  configuration.addPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(EMFCompareConstants.PROPERTY_STRUCTURE_SELECTION)) {
        Object selected=null;
        if (event.getNewValue() instanceof IStructuredSelection) {
          selected=((IStructuredSelection)event.getNewValue()).getFirstElement();
        }
        if (selected instanceof DiffElement) {
          currentDiff=(DiffElement)selected;
          leftPart.navigateToDiff(currentDiff);
          rightPart.navigateToDiff(currentDiff);
        }
      }
    }
  }
);
}","/** 
 * Creates a new model content merge viewer and intializes it.
 * @param parent Parent composite for this viewer.
 * @param config The configuration object.
 */
public ModelContentMergeViewer(Composite parent,CompareConfiguration config){
  super(SWT.NONE,ResourceBundle.getBundle(BUNDLE_NAME),config);
  configuration=config;
  buildControl(parent);
  updateColors();
  configuration.addPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(EMFCompareConstants.PROPERTY_STRUCTURE_SELECTION)) {
        Object selected=null;
        if (event.getNewValue() instanceof IStructuredSelection) {
          selected=((IStructuredSelection)event.getNewValue()).getFirstElement();
        }
        if (selected instanceof DiffElement) {
          currentDiff=(DiffElement)selected;
          leftPart.navigateToDiff(currentDiff);
          rightPart.navigateToDiff(currentDiff);
        }
      }
    }
  }
);
  EMFCompareUIPlugin.getDefault().getPreferenceStore().addPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().endsWith(""String_Node_Str"")) {
        updateColors();
      }
    }
  }
);
}",0.8499573742540495
93735,"public void propertyChange(PropertyChangeEvent event){
  if (event.getProperty().equals(EMFCompareConstants.PROPERTY_STRUCTURE_SELECTION)) {
    Object selected=null;
    if (event.getNewValue() instanceof IStructuredSelection) {
      selected=((IStructuredSelection)event.getNewValue()).getFirstElement();
    }
    if (selected instanceof DiffElement) {
      currentDiff=(DiffElement)selected;
      leftPart.navigateToDiff(currentDiff);
      rightPart.navigateToDiff(currentDiff);
    }
  }
}","public void propertyChange(PropertyChangeEvent event){
  if (event.getProperty().endsWith(""String_Node_Str"")) {
    updateColors();
  }
}",0.352755905511811
93736,"protected void drawLine(GC buffer,Item leftItem,Item rightItem,DiffElement diff){
  if (leftItem == null || rightItem == null)   return;
  final Rectangle centerbounds=getCenterPart().getBounds();
  Rectangle leftBounds=null;
  Rectangle rightBounds=null;
  if (selectedTab == TREE_TAB) {
    leftBounds=((TreeItem)leftItem).getBounds();
    rightBounds=((TreeItem)rightItem).getBounds();
  }
 else   if (selectedTab == PROPERTIES_TAB) {
    leftBounds=((TableItem)leftItem).getBounds();
    rightBounds=((TableItem)rightItem).getBounds();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final IPreferenceStore comparePreferences=EMFCompareUIPlugin.getDefault().getPreferenceStore();
  RGB color=PreferenceConverter.getColor(comparePreferences,EMFCompareConstants.PREFERENCES_KEY_CHANGED_COLOR);
  if (diff instanceof AddModelElement) {
    color=PreferenceConverter.getColor(comparePreferences,EMFCompareConstants.PREFERENCES_KEY_ADDED_COLOR);
  }
 else   if (diff instanceof RemoveModelElement) {
    color=PreferenceConverter.getColor(comparePreferences,EMFCompareConstants.PREFERENCES_KEY_REMOVED_COLOR);
  }
  final int treeTabBorder=5;
  final int leftX=0;
  final int rightX=centerbounds.width;
  final int leftRectangleHeight=leftBounds.height - 1;
  final int rightRectangleHeight=rightBounds.height - 1;
  int leftY=leftBounds.y + leftRectangleHeight / 2 + treeTabBorder;
  int rightY=rightBounds.y + rightRectangleHeight / 2 + treeTabBorder;
  if (selectedTab == TREE_TAB && (!leftItem.getData().equals(EMFCompareEObjectUtils.getLeftElement(diff)) || diff instanceof AddModelElement)) {
    leftY=leftBounds.y + leftRectangleHeight + treeTabBorder;
  }
  if (selectedTab == TREE_TAB && (!rightItem.getData().equals(EMFCompareEObjectUtils.getRightElement(diff)) || diff instanceof RemoveModelElement)) {
    rightY=rightBounds.y + rightRectangleHeight + treeTabBorder;
  }
  int lineWidth=1;
  if (selectedTab == PROPERTIES_TAB || leftPart.getSelectedElements().contains(leftItem) || rightPart.getSelectedElements().contains(rightItem)) {
    lineWidth=2;
  }
  buffer.setForeground(new Color(getCenterPart().getDisplay(),color));
  buffer.setLineWidth(lineWidth);
  buffer.setLineStyle(SWT.LINE_SOLID);
  final int[] points=getCenterCurvePoints(leftX,leftY,rightX,rightY);
  for (int i=1; i < points.length; i++) {
    buffer.drawLine(leftX + i - 1,points[i - 1],leftX + i,points[i]);
  }
}","protected void drawLine(GC gc,Item leftItem,Item rightItem,DiffElement diff){
  if (leftItem == null || rightItem == null)   return;
  final Rectangle centerbounds=getCenterPart().getBounds();
  Rectangle leftBounds=null;
  Rectangle rightBounds=null;
  if (selectedTab == TREE_TAB) {
    leftBounds=((TreeItem)leftItem).getBounds();
    rightBounds=((TreeItem)rightItem).getBounds();
  }
 else   if (selectedTab == PROPERTIES_TAB) {
    leftBounds=((TableItem)leftItem).getBounds();
    rightBounds=((TableItem)rightItem).getBounds();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  RGB color=changedColor;
  if (diff instanceof AddModelElement) {
    color=addedColor;
  }
 else   if (diff instanceof RemoveModelElement) {
    color=removedColor;
  }
  final int treeTabBorder=5;
  final int leftX=0;
  final int rightX=centerbounds.width;
  final int leftRectangleHeight=leftBounds.height - 1;
  final int rightRectangleHeight=rightBounds.height - 1;
  int leftY=leftBounds.y + leftRectangleHeight / 2 + treeTabBorder;
  int rightY=rightBounds.y + rightRectangleHeight / 2 + treeTabBorder;
  if (selectedTab == TREE_TAB && (!leftItem.getData().equals(EMFCompareEObjectUtils.getLeftElement(diff)) || diff instanceof AddModelElement)) {
    leftY=leftBounds.y + leftRectangleHeight + treeTabBorder;
  }
  if (selectedTab == TREE_TAB && (!rightItem.getData().equals(EMFCompareEObjectUtils.getRightElement(diff)) || diff instanceof RemoveModelElement)) {
    rightY=rightBounds.y + rightRectangleHeight + treeTabBorder;
  }
  int lineWidth=1;
  if (selectedTab == PROPERTIES_TAB || leftPart.getSelectedElements().contains(leftItem) || rightPart.getSelectedElements().contains(rightItem)) {
    lineWidth=2;
  }
  gc.setForeground(new Color(getCenterPart().getDisplay(),color));
  gc.setLineWidth(lineWidth);
  gc.setLineStyle(SWT.LINE_SOLID);
  final int[] points=getCenterCurvePoints(leftX,leftY,rightX,rightY);
  for (int i=1; i < points.length; i++) {
    gc.drawLine(leftX + i - 1,points[i - 1],leftX + i,points[i]);
  }
}",0.8472532380527021
93737,"private void drawRectangle(PaintEvent event,TreeItem treeItem,DiffElement diff){
  final Rectangle treeBounds=tree.getTree().getBounds();
  final Rectangle treeItemBounds=treeItem.getBounds();
  final IPreferenceStore comparePreferences=EMFCompareUIPlugin.getDefault().getPreferenceStore();
  RGB color=PreferenceConverter.getColor(comparePreferences,EMFCompareConstants.PREFERENCES_KEY_CHANGED_COLOR);
  treeItem.setBackground(new Color(treeItem.getDisplay(),PreferenceConverter.getColor(comparePreferences,EMFCompareConstants.PREFERENCES_KEY_HIGHLIGHT_COLOR)));
  if (diff instanceof AddModelElement) {
    color=PreferenceConverter.getColor(comparePreferences,EMFCompareConstants.PREFERENCES_KEY_ADDED_COLOR);
  }
 else   if (diff instanceof RemoveModelElement) {
    color=PreferenceConverter.getColor(comparePreferences,EMFCompareConstants.PREFERENCES_KEY_REMOVED_COLOR);
  }
  final int margin=40;
  final int rectangleX=treeItemBounds.x - margin;
  final int rectangleY=treeItemBounds.y;
  final int rectangleWidth=treeItemBounds.width + margin;
  final int rectangleHeight=treeItemBounds.height - 1;
  final int rectangleArcWidth=5;
  final int rectangleArcHeight=5;
  int lineWidth=1;
  if (getSelectedElements().contains(treeItem)) {
    lineWidth=2;
  }
  event.gc.setLineWidth(lineWidth);
  event.gc.setForeground(new Color(treeItem.getDisplay(),color));
  if (partSide == EMFCompareConstants.LEFT) {
    if (!treeItem.getData().equals(EMFCompareEObjectUtils.getLeftElement(diff)) || diff instanceof AddModelElement) {
      event.gc.setLineStyle(SWT.LINE_SOLID);
      event.gc.drawLine(rectangleX,rectangleY + rectangleHeight,treeBounds.width,rectangleY + rectangleHeight);
    }
 else {
      event.gc.setLineStyle(SWT.LINE_DASHDOT);
      event.gc.drawRoundRectangle(rectangleX,rectangleY,rectangleWidth,rectangleHeight,rectangleArcWidth,rectangleArcHeight);
      event.gc.setLineStyle(SWT.LINE_SOLID);
      event.gc.drawLine(rectangleX + rectangleWidth,rectangleY + rectangleHeight / 2,treeBounds.width,rectangleY + rectangleHeight / 2);
    }
  }
 else   if (partSide == EMFCompareConstants.RIGHT) {
    if (!treeItem.getData().equals(EMFCompareEObjectUtils.getRightElement(diff)) || diff instanceof RemoveModelElement) {
      event.gc.setLineStyle(SWT.LINE_SOLID);
      event.gc.drawLine(rectangleX + rectangleWidth,rectangleY + rectangleHeight,treeBounds.x,rectangleY + rectangleHeight);
    }
 else {
      event.gc.setLineStyle(SWT.LINE_DASHDOT);
      event.gc.drawRoundRectangle(rectangleX,rectangleY,rectangleWidth,rectangleHeight,rectangleArcWidth,rectangleArcHeight);
      event.gc.setLineStyle(SWT.LINE_SOLID);
      event.gc.drawLine(rectangleX,rectangleY + rectangleHeight / 2,treeBounds.x,rectangleY + rectangleHeight / 2);
    }
  }
}","private void drawRectangle(PaintEvent event,TreeItem treeItem,DiffElement diff){
  final Rectangle treeBounds=tree.getTree().getBounds();
  final Rectangle treeItemBounds=treeItem.getBounds();
  RGB color=parentViewer.getChangedColor();
  treeItem.setBackground(new Color(treeItem.getDisplay(),parentViewer.getHighlightColor()));
  if (diff instanceof AddModelElement) {
    color=parentViewer.getAddedColor();
  }
 else   if (diff instanceof RemoveModelElement) {
    color=parentViewer.getRemovedColor();
  }
  final int margin=40;
  final int rectangleX=treeItemBounds.x - margin;
  final int rectangleY=treeItemBounds.y;
  final int rectangleWidth=treeItemBounds.width + margin;
  final int rectangleHeight=treeItemBounds.height - 1;
  final int rectangleArcWidth=5;
  final int rectangleArcHeight=5;
  int lineWidth=1;
  if (getSelectedElements().contains(treeItem)) {
    lineWidth=2;
  }
  event.gc.setLineWidth(lineWidth);
  event.gc.setForeground(new Color(treeItem.getDisplay(),color));
  if (partSide == EMFCompareConstants.LEFT) {
    if (!treeItem.getData().equals(EMFCompareEObjectUtils.getLeftElement(diff)) || diff instanceof AddModelElement) {
      event.gc.setLineStyle(SWT.LINE_SOLID);
      event.gc.drawLine(rectangleX,rectangleY + rectangleHeight,treeBounds.width,rectangleY + rectangleHeight);
    }
 else {
      event.gc.setLineStyle(SWT.LINE_DASHDOT);
      event.gc.drawRoundRectangle(rectangleX,rectangleY,rectangleWidth,rectangleHeight,rectangleArcWidth,rectangleArcHeight);
      event.gc.setLineStyle(SWT.LINE_SOLID);
      event.gc.drawLine(rectangleX + rectangleWidth,rectangleY + rectangleHeight / 2,treeBounds.width,rectangleY + rectangleHeight / 2);
    }
  }
 else   if (partSide == EMFCompareConstants.RIGHT) {
    if (!treeItem.getData().equals(EMFCompareEObjectUtils.getRightElement(diff)) || diff instanceof RemoveModelElement) {
      event.gc.setLineStyle(SWT.LINE_SOLID);
      event.gc.drawLine(rectangleX + rectangleWidth,rectangleY + rectangleHeight,treeBounds.x,rectangleY + rectangleHeight);
    }
 else {
      event.gc.setLineStyle(SWT.LINE_DASHDOT);
      event.gc.drawRoundRectangle(rectangleX,rectangleY,rectangleWidth,rectangleHeight,rectangleArcWidth,rectangleArcHeight);
      event.gc.setLineStyle(SWT.LINE_SOLID);
      event.gc.drawLine(rectangleX,rectangleY + rectangleHeight / 2,treeBounds.x,rectangleY + rectangleHeight / 2);
    }
  }
}",0.8163186388244393
93738,"private void drawLine(PaintEvent event,TableItem tableItem){
  final Rectangle tableBounds=properties.getTable().getBounds();
  final Rectangle tableItemBounds=tableItem.getBounds();
  final IPreferenceStore comparePreferences=EMFCompareUIPlugin.getDefault().getPreferenceStore();
  tableItem.setBackground(new Color(tableItem.getDisplay(),PreferenceConverter.getColor(comparePreferences,EMFCompareConstants.PREFERENCES_KEY_HIGHLIGHT_COLOR)));
  event.gc.setLineWidth(2);
  event.gc.setForeground(new Color(tableItem.getDisplay(),PreferenceConverter.getColor(comparePreferences,EMFCompareConstants.PREFERENCES_KEY_CHANGED_COLOR)));
  event.gc.drawLine(getTotalColumnsWidth(),tableItemBounds.y + tableItemBounds.height / 2,tableBounds.width,tableItemBounds.y + tableItemBounds.height / 2);
}","private void drawLine(PaintEvent event,TableItem tableItem){
  final Rectangle tableBounds=properties.getTable().getBounds();
  final Rectangle tableItemBounds=tableItem.getBounds();
  tableItem.setBackground(new Color(tableItem.getDisplay(),parentViewer.getHighlightColor()));
  event.gc.setLineWidth(2);
  event.gc.setForeground(new Color(tableItem.getDisplay(),parentViewer.getChangedColor()));
  event.gc.drawLine(getTotalColumnsWidth(),tableItemBounds.y + tableItemBounds.height / 2,tableBounds.width,tableItemBounds.y + tableItemBounds.height / 2);
}",0.6196136701337296
93739,"/** 
 * Load a model from an   {@link java.io.InputStream  InputStream}.
 * @param stream the inputstream to load from
 * @param fileName the original filename
 * @return the loaded model
 * @throws IOException If the given file does not exist.
 */
@SuppressWarnings(""String_Node_Str"") public static EObject load(InputStream stream,String fileName) throws IOException {
  EObject result=null;
  String fileExtension=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
  if (fileExtension == null || fileExtension.length() == 0) {
    fileExtension=Resource.Factory.Registry.DEFAULT_EXTENSION;
  }
  final ResourceSet resourceSet=new ResourceSetImpl();
  final Resource.Factory.Registry reg=Resource.Factory.Registry.INSTANCE;
  final Object resourceFactory=reg.getExtensionToFactoryMap().get(fileExtension);
  if (resourceFactory != null) {
    resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(fileExtension,resourceFactory);
  }
 else {
    resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(fileExtension,new XMIResourceFactoryImpl());
  }
  final Resource modelResource=resourceSet.createResource(URI.createURI(fileName));
  modelResource.load(stream,Collections.EMPTY_MAP);
  if (modelResource.getContents().size() > 0)   result=(EObject)modelResource.getContents().get(0);
  return result;
}","/** 
 * Load a model from an   {@link java.io.InputStream  InputStream} in a given {@link ResourceSet}.
 * @param stream The inputstream to load from
 * @param fileName The original filename
 * @param resourceSet The  {@link ResourceSet} to load the model in.
 * @return The loaded model
 * @throws IOException If the given file does not exist.
 */
@SuppressWarnings(""String_Node_Str"") public static EObject load(InputStream stream,String fileName,ResourceSet resourceSet) throws IOException {
  EObject result=null;
  String fileExtension=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
  if (fileExtension == null || fileExtension.length() == 0) {
    fileExtension=Resource.Factory.Registry.DEFAULT_EXTENSION;
  }
  final Resource.Factory.Registry reg=Resource.Factory.Registry.INSTANCE;
  final Object resourceFactory=reg.getExtensionToFactoryMap().get(fileExtension);
  if (resourceFactory != null) {
    resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(fileExtension,resourceFactory);
  }
 else {
    resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(fileExtension,new XMIResourceFactoryImpl());
  }
  final Resource modelResource=resourceSet.createResource(URI.createURI(fileName));
  modelResource.load(stream,Collections.EMPTY_MAP);
  if (modelResource.getContents().size() > 0)   result=(EObject)modelResource.getContents().get(0);
  return result;
}",0.9282882882882882
93740,"@Override public void onTimeSet(TimePicker timePicker,int hour,int minute){
  Calendar date=new GregorianCalendar(this.year,this.month,this.day,hour,minute);
switch (callerId) {
case R.id.add_new_scheduled_recording_set_start_time_button:
    ((TextView)findViewById(R.id.add_new_scheduled_recording_start_time_text)).setText(DateUtils.getDateTimeString(date.getTimeInMillis()));
  break;
case R.id.add_new_scheduled_recording_set_end_time_button:
((TextView)findViewById(R.id.add_new_scheduled_recording_end_time_text)).setText(DateUtils.getDateTimeString(date.getTimeInMillis()));
break;
}
}","@Override public void onTimeSet(TimePicker timePicker,int hour,int minute){
  Calendar date=new GregorianCalendar(this.year,this.month,this.day,hour,minute);
switch (callerId) {
case R.id.add_new_scheduled_recording_set_start_time_button:
    startDateTime=date.getTimeInMillis();
  ((TextView)findViewById(R.id.add_new_scheduled_recording_start_time_text)).setText(DateUtils.getDateTimeString(startDateTime));
break;
case R.id.add_new_scheduled_recording_set_end_time_button:
endDateTime=date.getTimeInMillis();
((TextView)findViewById(R.id.add_new_scheduled_recording_end_time_text)).setText(DateUtils.getDateTimeString(endDateTime));
break;
}
}",0.882258064516129
93741,"private String getTimestamp(){
  Calendar calendar=new GregorianCalendar(TimeZone.getDefault());
  StringBuilder timestamp=new StringBuilder();
  timestamp.append(calendar.get(Calendar.YEAR));
  timestamp.append((""String_Node_Str""));
  timestamp.append(StringUtils.pad(calendar.get(Calendar.MONTH)));
  timestamp.append((""String_Node_Str""));
  timestamp.append(StringUtils.pad(calendar.get(Calendar.DAY_OF_MONTH)));
  timestamp.append((""String_Node_Str""));
  timestamp.append(StringUtils.pad(calendar.get(Calendar.HOUR_OF_DAY)));
  timestamp.append((""String_Node_Str""));
  timestamp.append(StringUtils.pad(calendar.get(Calendar.MINUTE)));
  timestamp.append((""String_Node_Str""));
  timestamp.append(StringUtils.pad(calendar.get(Calendar.SECOND)));
  return timestamp.toString();
}","private String getTimestamp(){
  Calendar calendar=new GregorianCalendar();
  StringBuilder timestamp=new StringBuilder();
  timestamp.append(calendar.get(Calendar.YEAR));
  timestamp.append((""String_Node_Str""));
  timestamp.append(StringUtils.pad(calendar.get(Calendar.MONTH) + 1));
  timestamp.append((""String_Node_Str""));
  timestamp.append(StringUtils.pad(calendar.get(Calendar.DAY_OF_MONTH)));
  timestamp.append((""String_Node_Str""));
  timestamp.append(StringUtils.pad(calendar.get(Calendar.HOUR_OF_DAY)));
  timestamp.append((""String_Node_Str""));
  timestamp.append(StringUtils.pad(calendar.get(Calendar.MINUTE)));
  timestamp.append((""String_Node_Str""));
  timestamp.append(StringUtils.pad(calendar.get(Calendar.SECOND)));
  return timestamp.toString();
}",0.983797796500324
93742,"public void onPrepared(MediaPlayer mediaPlayer){
  mediaPlayer.start();
  StringBuilder status=new StringBuilder(getString(R.string.playing_string));
  if (!StringUtils.IsNullOrEmpty(radioDetailsToPlay.getStationName())) {
    status.append(""String_Node_Str"").append(radioDetailsToPlay.getStationName());
  }
  caller.updateUIForPlaying(true,status.toString());
  NotificationHelper.showNotification(getApplicationContext(),NotificationHelper.NOTIFICATION_PLAYING_ID,radioDetailsToPlay,status.toString(),status.toString());
}","public void onPrepared(MediaPlayer mediaPlayer){
  mediaPlayer.start();
  buffering=false;
  StringBuilder status=new StringBuilder(getString(R.string.playing_string));
  if (!StringUtils.IsNullOrEmpty(radioDetailsToPlay.getStationName())) {
    status.append(""String_Node_Str"").append(radioDetailsToPlay.getStationName());
  }
  caller.updateUIForPlaying(true,status.toString());
  NotificationHelper.showNotification(getApplicationContext(),NotificationHelper.NOTIFICATION_PLAYING_ID,radioDetailsToPlay,status.toString(),status.toString());
}",0.9822263797942
93743,"public void startPlaying(RadioActivity view,RadioDetails radioDetails){
  caller=view;
  RadioApplication radioApplication=(RadioApplication)getApplicationContext();
  MediaPlayer mediaPlayer=radioApplication.getMediaPlayer();
  try {
    if (mediaPlayer == null) {
      mediaPlayer=new MediaPlayer();
    }
    mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener(){
      public void onCompletion(      MediaPlayer mediaPlayer){
        if (mediaPlayer.isPlaying()) {
          mediaPlayer.start();
        }
      }
    }
);
    mediaPlayer.setOnErrorListener(new MediaPlayer.OnErrorListener(){
      public boolean onError(      MediaPlayer mediaPlayer,      int i,      int i1){
        Log.e(TAG,""String_Node_Str"");
        caller.updateUIForPlaying(false,""String_Node_Str"");
        return true;
      }
    }
);
    if (radioDetails.getPlaylistUrl().endsWith(""String_Node_Str"") || radioDetails.getPlaylistUrl().endsWith(""String_Node_Str"")) {
      if (radioDetails.getPlaylistUrl().endsWith(""String_Node_Str"")) {
        radioDetails=PlsHandler.parse(radioDetails);
      }
 else {
        radioDetails=M3uHandler.parse(radioDetails);
      }
    }
 else {
      radioDetails.setStreamUrl(radioDetails.getPlaylistUrl());
    }
    mediaPlayer.setDataSource(radioDetails.getStreamUrl());
    mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
    mediaPlayer.prepareAsync();
    final RadioDetails radioDetailsToPlay=radioDetails;
    mediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener(){
      public void onPrepared(      MediaPlayer mediaPlayer){
        mediaPlayer.start();
        StringBuilder status=new StringBuilder(getString(R.string.playing_string));
        if (!StringUtils.IsNullOrEmpty(radioDetailsToPlay.getStationName())) {
          status.append(""String_Node_Str"").append(radioDetailsToPlay.getStationName());
        }
        caller.updateUIForPlaying(true,status.toString());
        NotificationHelper.showNotification(getApplicationContext(),NotificationHelper.NOTIFICATION_PLAYING_ID,radioDetailsToPlay,status.toString(),status.toString());
      }
    }
);
  }
 catch (  IOException ioe) {
    Log.e(TAG,""String_Node_Str"",ioe);
    ioe.printStackTrace();
    mediaPlayer.reset();
  }
 finally {
    radioApplication.setMediaPlayer(mediaPlayer);
    radioApplication.setPlayingStation(radioDetails);
  }
}","public void startPlaying(RadioActivity view,RadioDetails radioDetails){
  caller=view;
  RadioApplication radioApplication=(RadioApplication)getApplicationContext();
  MediaPlayer mediaPlayer=radioApplication.getMediaPlayer();
  try {
    if (mediaPlayer == null) {
      mediaPlayer=new MediaPlayer();
    }
    mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener(){
      public void onCompletion(      MediaPlayer mediaPlayer){
        if (mediaPlayer.isPlaying()) {
          mediaPlayer.start();
        }
      }
    }
);
    mediaPlayer.setOnErrorListener(new MediaPlayer.OnErrorListener(){
      public boolean onError(      MediaPlayer mediaPlayer,      int i,      int i1){
        Log.e(TAG,""String_Node_Str"");
        caller.updateUIForPlaying(false,""String_Node_Str"");
        return true;
      }
    }
);
    if (radioDetails.getPlaylistUrl().endsWith(""String_Node_Str"") || radioDetails.getPlaylistUrl().endsWith(""String_Node_Str"")) {
      if (radioDetails.getPlaylistUrl().endsWith(""String_Node_Str"")) {
        radioDetails=PlsHandler.parse(radioDetails);
      }
 else {
        radioDetails=M3uHandler.parse(radioDetails);
      }
    }
 else {
      radioDetails.setStreamUrl(radioDetails.getPlaylistUrl());
    }
    if (buffering) {
      Log.d(TAG,""String_Node_Str"");
      mediaPlayer.reset();
      buffering=false;
    }
    mediaPlayer.setDataSource(radioDetails.getStreamUrl());
    mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
    mediaPlayer.prepareAsync();
    buffering=true;
    final RadioDetails radioDetailsToPlay=radioDetails;
    mediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener(){
      public void onPrepared(      MediaPlayer mediaPlayer){
        mediaPlayer.start();
        buffering=false;
        StringBuilder status=new StringBuilder(getString(R.string.playing_string));
        if (!StringUtils.IsNullOrEmpty(radioDetailsToPlay.getStationName())) {
          status.append(""String_Node_Str"").append(radioDetailsToPlay.getStationName());
        }
        caller.updateUIForPlaying(true,status.toString());
        NotificationHelper.showNotification(getApplicationContext(),NotificationHelper.NOTIFICATION_PLAYING_ID,radioDetailsToPlay,status.toString(),status.toString());
      }
    }
);
  }
 catch (  IOException ioe) {
    Log.e(TAG,""String_Node_Str"",ioe);
    ioe.printStackTrace();
    mediaPlayer.reset();
  }
 finally {
    radioApplication.setMediaPlayer(mediaPlayer);
    radioApplication.setPlayingStation(radioDetails);
  }
}",0.9679383116883116
93744,"private void play(final RadioDetails radioDetails){
  if (playerServiceBound) {
    if (playerService.alreadyPlaying()) {
      AlertDialog.Builder builder=new AlertDialog.Builder(this);
      builder.setMessage(""String_Node_Str"").setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialogInterface,        int i){
          Log.d(TAG,""String_Node_Str"");
          playerService.stopPlaying(RadioActivity.this);
          updateUIForPlaying(true,getString(R.string.buffering_string));
          playerService.startPlaying(RadioActivity.this,radioDetails);
        }
      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialogInterface,        int i){
        }
      }
);
      builder.create().show();
    }
 else {
      Log.d(TAG,""String_Node_Str"");
      playerService.startPlaying(this,radioDetails);
      updateUIForPlaying(true,getString(R.string.buffering_string));
    }
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
}","private void play(final RadioDetails radioDetails){
  if (playerServiceBound) {
    if (playerService.alreadyPlaying()) {
      AlertDialog.Builder builder=new AlertDialog.Builder(this);
      builder.setMessage(""String_Node_Str"").setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialogInterface,        int i){
          Log.d(TAG,""String_Node_Str"");
          playerService.stopPlaying(RadioActivity.this);
          StringBuilder status=new StringBuilder(getString(R.string.buffering_string)).append(""String_Node_Str"").append(radioDetails.getStationName());
          updateUIForPlaying(true,status.toString());
          playerService.startPlaying(RadioActivity.this,radioDetails);
        }
      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialogInterface,        int i){
        }
      }
);
      builder.create().show();
    }
 else {
      Log.d(TAG,""String_Node_Str"");
      playerService.startPlaying(this,radioDetails);
      StringBuilder status=new StringBuilder(getString(R.string.buffering_string)).append(""String_Node_Str"").append(radioDetails.getStationName());
      updateUIForPlaying(true,status.toString());
    }
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
}",0.8355155482815058
93745,"public String getStationName(){
  return _stationName;
}","public String getStationName(){
  return StringUtils.IsNullOrEmpty(_stationName) ? ""String_Node_Str"" : _stationName;
}",0.6436781609195402
93746,"public void stopRecording(RadioActivity view){
  Log.d(TAG,""String_Node_Str"");
  caller=view;
  RadioApplication radioApplication=(RadioApplication)this.getApplicationContext();
  RecordingTask recordingTask=radioApplication.getRecordingTask();
  recordingTask.cancel(true);
  view.setStatus(""String_Node_Str"");
  cancelNotification(NotificationService.PLAYING_ID);
  recordingTask=null;
  radioApplication.setRecordingTask(recordingTask);
}","public void stopRecording(RadioActivity view){
  Log.d(TAG,""String_Node_Str"");
  caller=view;
  RadioApplication radioApplication=(RadioApplication)this.getApplicationContext();
  RecordingTask recordingTask=radioApplication.getRecordingTask();
  recordingTask.cancel(true);
  view.setStatus(""String_Node_Str"");
  cancelNotification(NotificationService.RECORDING_ID);
  recordingTask=null;
  radioApplication.setRecordingTask(recordingTask);
}",0.98868778280543
93747,"@Override public Map<Email,Future<Void>> deliverPostponedMails(){
  Map<Email,Future<Void>> deliveries=new HashMap<Email,Future<Void>>();
  LOGGER.debug(""String_Node_Str"",deliveries.size());
  while (!this.mailQueue.isEmpty()) {
    Email nextMail=this.mailQueue.poll();
    Future<Void> sendingResult=this.asyncSend(nextMail);
    deliveries.put(nextMail,sendingResult);
  }
  return deliveries;
}","@Override public Map<Email,Future<Void>> deliverPostponedMails(){
  Map<Email,Future<Void>> deliveries=new HashMap<Email,Future<Void>>();
  LOGGER.debug(""String_Node_Str"",this.mailQueue.size());
  while (!this.mailQueue.isEmpty()) {
    Email nextMail=this.mailQueue.poll();
    Future<Void> sendingResult=this.asyncSend(nextMail);
    deliveries.put(nextMail,sendingResult);
  }
  return deliveries;
}",0.97
93748,"public DefaultTemplateMail(String templateName,Freemarker freemarker,Localization localization,AsyncMailer mailer,String appLocation,Object... nameParameters) throws IOException {
  this.templateName=templateName;
  this.appLocation=appLocation;
  this.nameParameters=nameParameters;
  this.template=freemarker.use(templateName + ""String_Node_Str"");
  this.localization=localization;
  this.mailer=mailer;
}","public DefaultTemplateMail(String templateName,Freemarker freemarker,Localization localization,AsyncMailer mailer,String appLocation,Object... nameParameters) throws IOException {
  this.templateName=templateName;
  this.appLocation=appLocation;
  this.nameParameters=nameParameters;
  this.template=freemarker.use(templateName);
  this.localization=localization;
  this.mailer=mailer;
}",0.9748110831234256
93749,"/** 
 * Add a new world
 * @param world
 * @return if the world was added successfully
 */
private synchronized boolean addWorld(final ACWorld world){
  final String name=world.getName();
  if (name == null) {
    throw new NullPointerException();
  }
  final ACWorld ref=worlds.get(name);
  if (ref != null) {
    return false;
  }
  worlds.put(name.toUpperCase(),world);
  return true;
}","/** 
 * Add a new world
 * @param world
 * @return if the world was added successfully
 */
private synchronized boolean addWorld(final ACWorld world){
  final String name=world.getName();
  if (name == null) {
    throw new NullPointerException();
  }
  worlds.put(name.toUpperCase(),world);
  return true;
}",0.757532281205165
93750,"@Override public void run(){
  try {
    ConfigEnum.save();
  }
 catch (  final IOException e) {
  }
}","@Override public void run(){
  SQLPlayer.initPrepStmt();
  try {
    ConfigEnum.save();
  }
 catch (  final IOException e) {
  }
}",0.8793103448275862
93751,"private void convertFactory(){
  final String currentWrapper=ConfigEnum.DATA_WRAPPER.getString();
  final String convertTo=ConfigEnum.CONVERT_INTO.getString();
  if (convertTo.equalsIgnoreCase(currentWrapper)) {
    return;
  }
  if (currentWrapper.equalsIgnoreCase(""String_Node_Str"") && (convertTo.equalsIgnoreCase(""String_Node_Str"") || convertTo.equalsIgnoreCase(""String_Node_Str""))) {
    ConfigEnum.DATA_WRAPPER.setValue(convertTo);
    try {
      ConfigEnum.save();
    }
 catch (    final IOException e) {
    }
    try {
      createTable();
    }
 catch (    final SQLException e) {
      ACLogger.severe(""String_Node_Str"",e);
      return;
    }
    WorldManager.getInstance().convertFactory(new SQLWorldFactory());
    PlayerManager.getInstance().convertFactory(new SQLPlayerFactory());
    FilePlayer.stopSavingTask();
  }
 else   if (isSqlWrapper() && (convertTo.equalsIgnoreCase(""String_Node_Str""))) {
    ConfigEnum.DATA_WRAPPER.setValue(convertTo);
    try {
      ConfigEnum.save();
    }
 catch (    final IOException e) {
    }
    WorldManager.getInstance().convertFactory(new FileWorldFactory(coreInstance.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
    PlayerManager.getInstance().convertFactory(new FilePlayerFactory(coreInstance.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
    FilePlayer.scheduleAsyncSave();
    SQLPlayer.stopSavingTask();
  }
 else   if (isSqlWrapper() && (convertTo.equalsIgnoreCase(""String_Node_Str"") || convertTo.equalsIgnoreCase(""String_Node_Str""))) {
    final WorldConverter wConverter=WorldManager.getInstance().buildConverter(new FileWorldFactory(coreInstance.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
    final PlayerConverter pConverter=PlayerManager.getInstance().buildConverter(new FilePlayerFactory(coreInstance.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
    final String oldValue=ConfigEnum.DATA_WRAPPER.getString();
    wConverter.setAfterConverTask(new Runnable(){
      @Override public void run(){
        ConfigEnum.DATA_WRAPPER.setValue(convertTo);
        Database.initDb();
        try {
          createTable();
        }
 catch (        final SQLException e) {
          ACLogger.severe(""String_Node_Str"",e);
          return;
        }
        SQLWorld.initPrepStmt();
        WorldManager.getInstance().convertFactory(new SQLWorldFactory());
      }
    }
);
    pConverter.setAfterConvertTask(new Runnable(){
      @Override public void run(){
        ConfigEnum.DATA_WRAPPER.setValue(convertTo);
        Database.initDb();
        try {
          Database.DATABASE.open();
        }
 catch (        final SQLException e) {
          ACLogger.severe(""String_Node_Str"",e);
        }
        SQLPlayer.initPrepStmt();
        FilePlayer.forceSaveList();
        FilePlayer.stopSavingTask();
        final PlayerConverter converter=PlayerManager.getInstance().buildConverter(new SQLPlayerFactory());
        converter.setAfterConvertTask(new Runnable(){
          @Override public void run(){
            try {
              ConfigEnum.save();
            }
 catch (            final IOException e) {
            }
          }
        }
);
        converter.convert();
      }
    }
);
    wConverter.convert();
    ConfigEnum.DATA_WRAPPER.setValue(oldValue);
    Database.initDb();
    try {
      Database.DATABASE.open();
    }
 catch (    final SQLException e) {
      ACLogger.severe(""String_Node_Str"",e);
    }
    pConverter.convert();
  }
}","private void convertFactory(){
  final String currentWrapper=ConfigEnum.DATA_WRAPPER.getString();
  final String convertTo=ConfigEnum.CONVERT_INTO.getString();
  if (convertTo.equalsIgnoreCase(currentWrapper)) {
    return;
  }
  if (currentWrapper.equalsIgnoreCase(""String_Node_Str"") && (convertTo.equalsIgnoreCase(""String_Node_Str"") || convertTo.equalsIgnoreCase(""String_Node_Str""))) {
    ConfigEnum.DATA_WRAPPER.setValue(convertTo);
    try {
      ConfigEnum.save();
    }
 catch (    final IOException e) {
    }
    try {
      createTable();
    }
 catch (    final SQLException e) {
      ACLogger.severe(""String_Node_Str"",e);
      return;
    }
    WorldManager.getInstance().convertFactory(new SQLWorldFactory());
    PlayerManager.getInstance().convertFactory(new SQLPlayerFactory());
    FilePlayer.stopSavingTask();
  }
 else   if (isSqlWrapper() && (convertTo.equalsIgnoreCase(""String_Node_Str""))) {
    ConfigEnum.DATA_WRAPPER.setValue(convertTo);
    try {
      ConfigEnum.save();
    }
 catch (    final IOException e) {
    }
    WorldManager.getInstance().convertFactory(new FileWorldFactory(coreInstance.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
    PlayerManager.getInstance().convertFactory(new FilePlayerFactory(coreInstance.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
    FilePlayer.scheduleAsyncSave();
    SQLPlayer.stopSavingTask();
  }
 else   if (isSqlWrapper() && (convertTo.equalsIgnoreCase(""String_Node_Str"") || convertTo.equalsIgnoreCase(""String_Node_Str""))) {
    final WorldConverter wConverter=WorldManager.getInstance().buildConverter(new FileWorldFactory(coreInstance.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
    final PlayerConverter pConverter=PlayerManager.getInstance().buildConverter(new FilePlayerFactory(coreInstance.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
    final String oldValue=ConfigEnum.DATA_WRAPPER.getString();
    wConverter.setAfterConverTask(new Runnable(){
      @Override public void run(){
        ConfigEnum.DATA_WRAPPER.setValue(convertTo);
        Database.initDb();
        try {
          createTable();
        }
 catch (        final SQLException e) {
          ACLogger.severe(""String_Node_Str"",e);
          return;
        }
        SQLWorld.initPrepStmt();
        WorldManager.getInstance().convertFactory(new SQLWorldFactory());
      }
    }
);
    pConverter.setAfterConvertTask(new Runnable(){
      @Override public void run(){
        ConfigEnum.DATA_WRAPPER.setValue(convertTo);
        Database.initDb();
        try {
          Database.DATABASE.open();
        }
 catch (        final SQLException e) {
          ACLogger.severe(""String_Node_Str"",e);
        }
        SQLPlayer.initPrepStmt();
        FilePlayer.forceSaveList();
        FilePlayer.stopSavingTask();
        final PlayerConverter converter=PlayerManager.getInstance().buildConverter(new SQLPlayerFactory());
        converter.setAfterConvertTask(new Runnable(){
          @Override public void run(){
            SQLPlayer.initPrepStmt();
            try {
              ConfigEnum.save();
            }
 catch (            final IOException e) {
            }
          }
        }
);
        converter.convert();
      }
    }
);
    wConverter.convert();
    ConfigEnum.DATA_WRAPPER.setValue(oldValue);
    Database.initDb();
    try {
      Database.DATABASE.open();
    }
 catch (    final SQLException e) {
      ACLogger.severe(""String_Node_Str"",e);
    }
    pConverter.convert();
  }
}",0.9946099290780142
93752,"/** 
 * Add a new world
 * @param world
 */
private synchronized boolean addWorld(final ACWorld world){
  final String name=world.getName();
  if (name == null) {
    throw new NullPointerException();
  }
  final ACWorld ref=worlds.get(name);
  if (ref != null) {
    return false;
  }
  worlds.put(name,world);
  return true;
}","/** 
 * Add a new world
 * @param world
 * @return if the world was added successfully
 */
private synchronized boolean addWorld(final ACWorld world){
  final String name=world.getName();
  if (name == null) {
    throw new NullPointerException();
  }
  final ACWorld ref=worlds.get(name);
  if (ref != null) {
    return false;
  }
  worlds.put(name.toUpperCase(),world);
  return true;
}",0.9149232914923292
93753,"ACWorld demandACWorld(final World world){
  final String name=world.getName();
  ACWorld result=worlds.get(name);
  if (result == null) {
    result=worldFactory.createWorld(world);
    addWorld(result);
    result=worlds.get(name);
  }
  return result;
}","ACWorld demandACWorld(final World world){
  final String name=world.getName();
  ACWorld result=worlds.get(name);
  if (result == null) {
    result=worldFactory.createWorld(world);
    addWorld(result);
    result=worlds.get(name.toUpperCase());
  }
  return result;
}",0.9732824427480916
93754,"@Override public void execute(final CommandSender sender,final CommandArgs args) throws PlayerNotFound, ActionNotPermitedException {
  Player target;
  try {
    target=Users.getUser(sender,args,permNode);
  }
 catch (  final PlayerNotFound e) {
    target=Users.getUserParam(sender,args,permNode);
  }
  if (args.length == 0) {
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    sender.sendMessage(ChatColor.GOLD + MaterialContainer.possibleEnchantment());
    return;
  }
  final HashMap<String,String> replace=new HashMap<String,String>();
  final MaterialContainer inHand=new MaterialContainer(target.getItemInHand());
  Give.setEnchantements(sender,args,inHand,target.equals(sender) ? 0 : 1);
  final Player finalTarget=target;
  ACPluginManager.scheduleSyncTask(new Runnable(){
    @Override public void run(){
      finalTarget.setItemInHand(inHand.getItemStack());
    }
  }
);
  replace.put(""String_Node_Str"",target.getItemInHand().getType().name());
  LocaleHelper.SUCCESS_ENCHANT.sendLocale(sender,replace);
  if (!sender.equals(target)) {
    LocaleHelper.SUCCESS_ENCHANT.sendLocale(target,replace);
  }
}","@Override public void execute(final CommandSender sender,final CommandArgs args) throws PlayerNotFound, ActionNotPermitedException {
  Player target;
  try {
    target=Users.getUser(sender,args,permNode);
  }
 catch (  final PlayerNotFound e) {
    target=Users.getUserParam(sender,args,permNode);
  }
  if (args.length == 0) {
    sender.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    sender.sendMessage(ChatColor.GOLD + MaterialContainer.possibleEnchantment());
    return;
  }
  if (target == null) {
    return;
  }
  final HashMap<String,String> replace=new HashMap<String,String>();
  final ItemStack itemInHand=target.getItemInHand();
  if (itemInHand == null || (itemInHand != null && itemInHand.getType().equals(Material.AIR))) {
    LocaleHelper.ERROR_HOLD_ITEM.sendLocale(sender);
    return;
  }
  final MaterialContainer inHand=new MaterialContainer(itemInHand);
  Give.setEnchantements(sender,args,inHand,target.equals(sender) ? 0 : 1);
  final Player finalTarget=target;
  ACPluginManager.scheduleSyncTask(new Runnable(){
    @Override public void run(){
      finalTarget.setItemInHand(inHand.getItemStack());
    }
  }
);
  replace.put(""String_Node_Str"",itemInHand.getType().name());
  LocaleHelper.SUCCESS_ENCHANT.sendLocale(sender,replace);
  if (!sender.equals(target)) {
    LocaleHelper.SUCCESS_ENCHANT.sendLocale(target,replace);
  }
}",0.8723489395758304
93755,"/** 
 * @param oldFactory
 * @param newFactory
 */
public WorldConverter(final IWorldFactory oldFactory,final IWorldFactory newFactory){
  super();
  this.oldFactory=oldFactory;
  this.newFactory=newFactory;
}","/** 
 * @param oldFactory
 * @param newFactory
 */
public WorldConverter(final AbstractWorldFactory oldFactory,final AbstractWorldFactory newFactory){
  super();
  this.oldFactory=oldFactory;
  this.newFactory=newFactory;
}",0.9583333333333334
93756,"/** 
 */
public FileWorldFactory(final String directory){
  this.directory=directory;
  for (  final World w : ACPluginManager.getServer().getWorlds()) {
    bukkitWorlds.put(w.getName().toLowerCase(),w);
  }
}","/** 
 */
public FileWorldFactory(final String directory){
  this.directory=directory;
}",0.5858585858585859
93757,"/** 
 * @param oldFactory
 * @param newFactory
 * @param world
 */
public WorldConvertTask(final IWorldFactory oldFactory,final IWorldFactory newFactory,final World world){
  super();
  this.oldFactory=oldFactory;
  this.newFactory=newFactory;
  this.world=world;
}","/** 
 * @param oldFactory
 * @param newFactory
 * @param world
 */
public WorldConvertTask(final AbstractWorldFactory oldFactory,final AbstractWorldFactory newFactory,final World world){
  super();
  this.oldFactory=oldFactory;
  this.newFactory=newFactory;
  this.world=world;
}",0.9669117647058824
93758,"/** 
 * To convert the ACWorld using an another factory
 * @param factory
 */
public void convertFactory(final IWorldFactory factory){
  new WorldConverter(worldFactory,factory).convert();
  DebugLog.INSTANCE.info(""String_Node_Str"");
  this.worldFactory=factory;
}","/** 
 * To convert the ACWorld using an another factory
 * @param factory
 */
public void convertFactory(final AbstractWorldFactory factory){
  new WorldConverter(worldFactory,factory).convert();
  DebugLog.INSTANCE.info(""String_Node_Str"");
  this.worldFactory=factory;
}",0.983177570093458
93759,"/** 
 * @param worldFactory the worldFactory to set
 */
public void setWorldFactory(final IWorldFactory worldFactory){
  if (this.worldFactory == null) {
    this.worldFactory=worldFactory;
  }
}","/** 
 * @param worldFactory the worldFactory to set
 */
public void setWorldFactory(final AbstractWorldFactory worldFactory){
  if (this.worldFactory == null) {
    this.worldFactory=worldFactory;
  }
}",0.9773299748110832
93760,"/** 
 */
public SQLWorldFactory(){
  insertWorld=Database.DATABASE.prepare(""String_Node_Str"");
  getWorld=Database.DATABASE.prepare(""String_Node_Str"");
  for (  final World w : ACPluginManager.getServer().getWorlds()) {
    bukkitWorlds.put(w.getName().toLowerCase(),w);
  }
}","/** 
 */
public SQLWorldFactory(){
  insertWorld=Database.DATABASE.prepare(""String_Node_Str"");
  getWorld=Database.DATABASE.prepare(""String_Node_Str"");
}",0.7132867132867133
93761,"private static void teleport(final Player player,final Location toLocation){
  final Object server=MinecraftReflection.getHandle(player.getServer());
  final Object entityPlayer=MinecraftReflection.getHandle(player);
  final Object toWorld=MinecraftReflection.getHandle(toLocation.getWorld());
  final int dimension=FieldUtils.getField(toWorld,""String_Node_Str"");
  final Object activeContainer=FieldUtils.getField(entityPlayer,""String_Node_Str"");
  final Object defaultContainer=FieldUtils.getField(entityPlayer,""String_Node_Str"");
  if (player.getWorld().equals(toLocation.getWorld())) {
    MinecraftReflection.teleportPlayer(player,toLocation);
  }
 else {
    if (activeContainer != defaultContainer) {
      final MethodHandler closeInventory=new MethodHandler(entityPlayer.getClass(),""String_Node_Str"");
      closeInventory.invoke(entityPlayer);
    }
    final MethodHandler moveToWorld=new MethodHandler(server.getClass(),""String_Node_Str"",entityPlayer.getClass(),int.class,boolean.class,toLocation.getClass());
    moveToWorld.invoke(server,entityPlayer,dimension,true,toLocation);
  }
}","private static void teleport(final Player player,final Location toLocation){
  final Object server=MinecraftReflection.getHandle(player.getServer());
  final Object entityPlayer=MinecraftReflection.getHandle(player);
  final Object toWorld=MinecraftReflection.getHandle(toLocation.getWorld());
  if (player.getWorld().equals(toLocation.getWorld())) {
    MinecraftReflection.teleportPlayer(player,toLocation);
  }
 else {
    try {
      final Object activeContainer=FieldUtils.getField(entityPlayer,""String_Node_Str"");
      final Object defaultContainer=FieldUtils.getField(entityPlayer,""String_Node_Str"");
      if (activeContainer != defaultContainer) {
        final MethodHandler closeInventory=new MethodHandler(entityPlayer.getClass(),""String_Node_Str"");
        closeInventory.invoke(entityPlayer);
      }
    }
 catch (    final Throwable e) {
      DebugLog.INSTANCE.log(Level.SEVERE,""String_Node_Str"" + entityPlayer + ""String_Node_Str""+ entityPlayer.getClass()+ ""String_Node_Str"",e);
    }
    final int dimension=FieldUtils.getField(toWorld,""String_Node_Str"");
    final MethodHandler moveToWorld=new MethodHandler(server.getClass(),""String_Node_Str"",entityPlayer.getClass(),int.class,boolean.class,toLocation.getClass());
    moveToWorld.invoke(server,entityPlayer,dimension,true,toLocation);
  }
}",0.7565325591041062
93762,"/** 
 */
public PlayerInformation(final Player p){
  final PlayerInventory inventory=p.getInventory();
  items=Arrays.copyOf(inventory.getContents(),inventory.getContents().length);
  armor=Arrays.copyOf(inventory.getArmorContents(),inventory.getArmorContents().length);
  xp=p.getExp();
  level=p.getLevel();
  System.out.println(""String_Node_Str"" + xp);
  System.out.println(""String_Node_Str"" + level);
}","/** 
 */
public PlayerInformation(final Player p){
  final PlayerInventory inventory=p.getInventory();
  items=Arrays.copyOf(inventory.getContents(),inventory.getContents().length);
  armor=Arrays.copyOf(inventory.getArmorContents(),inventory.getArmorContents().length);
  xp=p.getExp();
  level=p.getLevel();
}",0.8675034867503487
93763,"@Override public void addPermWarp(String name,Location loc,String perm){
}","@Override public void addPermWarp(final String name,final Location loc,final String perm){
}",0.891566265060241
93764,"@EventHandler public void onPlayerRespawn(final PlayerRespawnEvent event){
  final Player player=event.getPlayer();
  final String spawn=ConfigEnum.GSPAWN.getString();
  Location loc=null;
  String worldName=player.getWorld().getName();
  final Environment worldEnv=player.getWorld().getEnvironment();
  if (ConfigEnum.RESPAWN_BEHAVIOR.getBoolean()) {
    if (worldEnv.equals(Environment.NETHER) || worldEnv.equals(Environment.THE_END)) {
      worldName=ACWorld.getWorld(ConfigEnum.RESPAWN_WORLD.getString()).getName();
      if (worldName.isEmpty() || worldName == null) {
        worldName=player.getWorld().getName();
      }
    }
  }
  try {
    if (spawn.isEmpty() || spawn.equalsIgnoreCase(""String_Node_Str"")) {
      loc=ACWorld.getWorld(worldName).getSpawn();
      event.setRespawnLocation(loc);
    }
 else     if (spawn.equalsIgnoreCase(""String_Node_Str"")) {
      loc=ACPlayer.getPlayer(player).getHome(worldName);
      if (loc == null) {
        loc=ACWorld.getWorld(worldName).getSpawn();
      }
      event.setRespawnLocation(loc);
    }
 else     if (spawn.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        loc=player.getBedSpawnLocation();
        if (loc == null) {
          loc=ACWorld.getWorld(worldName).getSpawn();
        }
      }
 catch (      final NullPointerException e) {
        loc=ACWorld.getWorld(worldName).getSpawn();
      }
      event.setRespawnLocation(loc);
    }
 else     if (spawn.equalsIgnoreCase(""String_Node_Str"")) {
      loc=ACHelper.getInstance().getGroupSpawnLocation(player);
      event.setRespawnLocation(loc);
    }
  }
 catch (  WorldNotLoaded e) {
  }
}","@EventHandler public void onPlayerRespawn(final PlayerRespawnEvent event){
  final Player player=event.getPlayer();
  final String spawn=ConfigEnum.GSPAWN.getString();
  Location loc=null;
  String worldName=player.getWorld().getName();
  final Environment worldEnv=player.getWorld().getEnvironment();
  if (ConfigEnum.RESPAWN_BEHAVIOR.getBoolean()) {
    if (worldEnv.equals(Environment.NETHER) || worldEnv.equals(Environment.THE_END)) {
      worldName=ACWorld.getWorld(ConfigEnum.RESPAWN_WORLD.getString()).getName();
      if (worldName.isEmpty() || worldName == null) {
        worldName=player.getWorld().getName();
      }
    }
  }
  try {
    if (spawn.isEmpty() || spawn.equalsIgnoreCase(""String_Node_Str"")) {
      loc=ACWorld.getWorld(worldName).getSpawn();
      event.setRespawnLocation(loc);
    }
 else     if (spawn.equalsIgnoreCase(""String_Node_Str"")) {
      loc=ACPlayer.getPlayer(player).getHome(worldName);
      if (loc == null) {
        loc=ACWorld.getWorld(worldName).getSpawn();
      }
      event.setRespawnLocation(loc);
    }
 else     if (spawn.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        loc=player.getBedSpawnLocation();
        if (loc == null) {
          loc=ACWorld.getWorld(worldName).getSpawn();
        }
      }
 catch (      final NullPointerException e) {
        loc=ACWorld.getWorld(worldName).getSpawn();
      }
      event.setRespawnLocation(loc);
    }
 else     if (spawn.equalsIgnoreCase(""String_Node_Str"")) {
      loc=ACHelper.getInstance().getGroupSpawnLocation(player);
      event.setRespawnLocation(loc);
    }
  }
 catch (  final WorldNotLoaded e) {
  }
}",0.9981549815498156
93765,"@EventHandler(priority=EventPriority.HIGH) public void onPlayerQuit(final PlayerQuitEvent event){
  final Player p=event.getPlayer();
  final ACPlayer player=ACPlayer.getPlayer(p);
  player.setInformation(""String_Node_Str"",System.currentTimeMillis());
  ACPluginManager.getScheduler().runTaskAsynchronously(ACPluginManager.getCorePlugin(),new Runnable(){
    @Override public void run(){
      final int imLvl=ACHelper.getInstance().getLimit(p,Type.Limit.IMMUNITY,""String_Node_Str"");
      player.setInformation(""String_Node_Str"",imLvl == Integer.MAX_VALUE ? ConfigEnum.DIMMUNITY.getInt() : imLvl);
    }
  }
);
  if (ConfigEnum.JQMSG.getBoolean() && !SuperPermissions.isApiSet()) {
    final HashMap<String,String> replace=new HashMap<String,String>();
    replace.put(""String_Node_Str"",Utils.getPlayerName(p,null,true));
    event.setQuitMessage(Utils.I18n(""String_Node_Str"",replace));
  }
  if (player.hasPower(Type.FAKEQUIT)) {
    event.setQuitMessage(null);
  }
 else   if (InvisibleWorker.getInstance().hasInvisiblePowers(p)) {
    event.setQuitMessage(null);
  }
  player.setInformation(""String_Node_Str"",p.getGameMode());
  PlayerManager.getInstance().setOffline(player);
  ACHelper.getInstance().removeDisconnectedPlayer(p);
}","@EventHandler(priority=EventPriority.HIGH) public void onPlayerQuit(final PlayerQuitEvent event){
  final Player p=event.getPlayer();
  final ACPlayer player=ACPlayer.getPlayer(p);
  player.setInformation(""String_Node_Str"",System.currentTimeMillis());
  final int imLvl=ACHelper.getInstance().getLimit(p,Type.Limit.IMMUNITY,""String_Node_Str"");
  player.setInformation(""String_Node_Str"",imLvl == Integer.MAX_VALUE ? ConfigEnum.DIMMUNITY.getInt() : imLvl);
  if (ConfigEnum.JQMSG.getBoolean() && !SuperPermissions.isApiSet()) {
    final HashMap<String,String> replace=new HashMap<String,String>();
    replace.put(""String_Node_Str"",Utils.getPlayerName(p,null,true));
    event.setQuitMessage(Utils.I18n(""String_Node_Str"",replace));
  }
  if (player.hasPower(Type.FAKEQUIT)) {
    event.setQuitMessage(null);
  }
 else   if (InvisibleWorker.getInstance().hasInvisiblePowers(p)) {
    event.setQuitMessage(null);
  }
  player.setInformation(""String_Node_Str"",p.getGameMode());
  PlayerManager.getInstance().setOffline(player);
  ACHelper.getInstance().removeDisconnectedPlayer(p);
}",0.9321814254859612
93766,"@Override public void run(){
  final int imLvl=ACHelper.getInstance().getLimit(p,Type.Limit.IMMUNITY,""String_Node_Str"");
  player.setInformation(""String_Node_Str"",imLvl == Integer.MAX_VALUE ? ConfigEnum.DIMMUNITY.getInt() : imLvl);
}","@Override public void run(){
  DebugLog.INSTANCE.info(""String_Node_Str"" + p.getName());
  DebugLog.INSTANCE.info(""String_Node_Str"");
  if (ConfigEnum.AUTO_AFK.getBoolean()) {
    AFKWorker.getInstance().updateTimeStamp(p);
  }
  DebugLog.INSTANCE.info(""String_Node_Str"");
  DebugLog.INSTANCE.info(""String_Node_Str"");
  final int imLvl=ACHelper.getInstance().getLimit(p,Type.Limit.IMMUNITY,""String_Node_Str"");
  player.setInformation(""String_Node_Str"",imLvl == Integer.MAX_VALUE ? ConfigEnum.DIMMUNITY.getInt() : imLvl);
  DebugLog.INSTANCE.info(""String_Node_Str"");
  DebugLog.INSTANCE.info(""String_Node_Str"");
  if (player.hasPower(Type.SPYMSG)) {
    ACHelper.getInstance().addSpy(p);
  }
  DebugLog.INSTANCE.info(""String_Node_Str"");
  DebugLog.INSTANCE.info(""String_Node_Str"");
  final long lastConn=player.getInformation(""String_Node_Str"").getLong(0);
  player.setInformation(""String_Node_Str"",System.currentTimeMillis());
  DebugLog.INSTANCE.info(""String_Node_Str"");
  DebugLog.INSTANCE.info(""String_Node_Str"");
  final long modifTime=TextLocale.NEWS.getModifTime();
  if (ConfigEnum.NEWS.getBoolean() && (modifTime == 0 || lastConn <= modifTime)) {
    Utils.sParsedLocale(p,""String_Node_Str"");
  }
  DebugLog.INSTANCE.info(""String_Node_Str"");
  DebugLog.INSTANCE.info(""String_Node_Str"");
  if (ConfigEnum.RULES.getBoolean() && !ConfigEnum.FJ_RULES.getBoolean()) {
    Utils.sParsedLocale(p,""String_Node_Str"");
  }
  DebugLog.INSTANCE.info(""String_Node_Str"");
  DebugLog.INSTANCE.info(""String_Node_Str"");
  if (ConfigEnum.TPREQUEST.getBoolean() && !player.hasPower(Type.TP_REQUEST) && PermissionManager.hasPerm(p,""String_Node_Str"",false)) {
    player.setPower(Type.TP_REQUEST);
  }
  DebugLog.INSTANCE.info(""String_Node_Str"");
}",0.2369089984748347
93767,"@Override public String getPermissionLimit(final Player p,final String limit){
  String result=null;
  if (mChat) {
    result=Reader.getInfo(p.getName(),InfoType.USER,p.getWorld().getName(),""String_Node_Str"" + limit);
  }
  if (result == null || (result != null && result.isEmpty())) {
    final Pattern regex=Pattern.compile(""String_Node_Str"" + limit.toLowerCase() + ""String_Node_Str"");
    Set<PermissionAttachmentInfo> permissions=null;
    if (ACHelper.isMainThread()) {
      permissions=p.getEffectivePermissions();
    }
 else {
      final Callable<Set<PermissionAttachmentInfo>> perms=new Callable<Set<PermissionAttachmentInfo>>(){
        @Override public Set<PermissionAttachmentInfo> call() throws Exception {
          return p.getEffectivePermissions();
        }
      }
;
      final Future<Set<PermissionAttachmentInfo>> permTask=ACPluginManager.getScheduler().callSyncMethod(ACPluginManager.getCorePlugin(),perms);
      try {
        permissions=permTask.get();
        DebugLog.INSTANCE.info(""String_Node_Str"" + p.getName());
      }
 catch (      final InterruptedException e) {
        DebugLog.INSTANCE.info(""String_Node_Str"" + p.getName());
      }
catch (      final ExecutionException e) {
        DebugLog.INSTANCE.info(""String_Node_Str"" + p.getName());
      }
    }
    return permissionCheck(permissions,regex);
  }
 else {
    return result;
  }
}","@Override public String getPermissionLimit(final Player p,final String limit){
  String result=null;
  if (mChat) {
    result=Reader.getInfo(p.getName(),InfoType.USER,p.getWorld().getName(),""String_Node_Str"" + limit);
  }
  if (result == null || (result != null && result.isEmpty())) {
    final Pattern regex=Pattern.compile(""String_Node_Str"" + limit.toLowerCase() + ""String_Node_Str"");
    Set<PermissionAttachmentInfo> permissions=null;
    if (ACHelper.isMainThread()) {
      permissions=p.getEffectivePermissions();
    }
 else {
      final Callable<Set<PermissionAttachmentInfo>> perms=new Callable<Set<PermissionAttachmentInfo>>(){
        @Override public Set<PermissionAttachmentInfo> call() throws Exception {
          return p.getEffectivePermissions();
        }
      }
;
      final Future<Set<PermissionAttachmentInfo>> permTask=ACPluginManager.getScheduler().callSyncMethod(ACPluginManager.getCorePlugin(),perms);
      try {
        permissions=permTask.get();
        DebugLog.INSTANCE.info(""String_Node_Str"" + p.getName());
      }
 catch (      final InterruptedException e) {
        DebugLog.INSTANCE.info(""String_Node_Str"" + p.getName());
      }
catch (      final ExecutionException e) {
        DebugLog.INSTANCE.info(""String_Node_Str"" + p.getName());
      }
catch (      final CancellationException e) {
        DebugLog.INSTANCE.info(""String_Node_Str"" + p.getName());
      }
    }
    return permissionCheck(permissions,regex);
  }
 else {
    return result;
  }
}",0.9586374695863747
93768,"@Override public void execute(final CommandSender sender,final CommandArgs args) throws ActionNotPermitedException, PlayerNotFound {
  if (Utils.isPlayer(sender)) {
    final HashMap<String,String> replace=new HashMap<String,String>();
    final String name=args.getString(0);
    replace.put(""String_Node_Str"",name);
    int nbTaped;
    int distance=0;
    try {
      nbTaped=args.getInt(1);
    }
 catch (    final Exception e) {
      nbTaped=1;
    }
    try {
      distance=args.getInt(2);
    }
 catch (    final Exception e) {
      distance=0;
    }
    Player temp=Utils.getUser(sender,args,permNode,3,false);
    if (temp == null) {
      temp=((Player)sender);
    }
    final Player player=temp;
    Location loc;
    if (distance == 0 && player.equals(sender)) {
      loc=player.getTargetBlock(null,100).getLocation().add(0,1,0);
    }
 else     if (distance == 0) {
      final Location playerLoc=player.getLocation();
      loc=playerLoc.add(playerLoc.getDirection().normalize().multiply(2).toLocation(player.getWorld(),playerLoc.getYaw(),playerLoc.getPitch())).add(0,1D,0);
    }
 else {
      final Location playerLoc=player.getLocation();
      loc=playerLoc.add(playerLoc.getDirection().normalize().multiply(distance).toLocation(player.getWorld(),playerLoc.getYaw(),playerLoc.getPitch())).add(0,1D,0);
    }
    EntityType ct=null;
    if (name.contains(""String_Node_Str"")) {
      final String[] creatures=name.split(""String_Node_Str"");
      ct=EntityType.fromName(creatures[0]);
      final EntityType ct2=EntityType.fromName(creatures[1]);
      if (ct == null) {
        replace.put(""String_Node_Str"",creatures[0]);
        Utils.sI18n(sender,""String_Node_Str"",replace);
      }
      if (ct2 == null) {
        replace.put(""String_Node_Str"",creatures[1]);
        Utils.sI18n(sender,""String_Node_Str"",replace);
      }
      if (ct == null || ct2 == null) {
        return;
      }
      ACPluginManager.scheduleSyncTask(new PassengerMob(loc,nbTaped,ct,ct2,player,sender));
    }
 else {
      ct=EntityType.fromName(name);
      if (ct == null) {
        Utils.sI18n(sender,""String_Node_Str"",replace);
        return;
      }
      ACPluginManager.scheduleSyncTask(new NormalMob(loc,nbTaped,ct,player,sender));
    }
  }
}","@Override public void execute(final CommandSender sender,final CommandArgs args) throws ActionNotPermitedException, PlayerNotFound {
  if (Utils.isPlayer(sender)) {
    final HashMap<String,String> replace=new HashMap<String,String>();
    final String name=args.getString(0);
    replace.put(""String_Node_Str"",name);
    int nbTaped;
    int distance=0;
    try {
      nbTaped=args.getInt(1);
    }
 catch (    final Exception e) {
      nbTaped=1;
    }
    try {
      distance=args.getInt(2);
    }
 catch (    final Exception e) {
      distance=0;
    }
    Player temp=Utils.getUser(sender,args,permNode,3,false);
    if (temp == null) {
      temp=((Player)sender);
    }
    final Player player=temp;
    Location loc;
    if (distance == 0 && player.equals(sender)) {
      loc=player.getTargetBlock(null,100).getLocation().add(0,1,0);
    }
 else     if (distance == 0) {
      final Location playerLoc=player.getLocation();
      loc=playerLoc.add(playerLoc.getDirection().normalize().multiply(2).toLocation(player.getWorld(),playerLoc.getYaw(),playerLoc.getPitch())).add(0,1D,0);
    }
 else {
      final Location playerLoc=player.getLocation();
      loc=playerLoc.add(playerLoc.getDirection().normalize().multiply(distance).toLocation(player.getWorld(),playerLoc.getYaw(),playerLoc.getPitch())).add(0,1D,0);
    }
    EntityType ct=null;
    if (name.contains(""String_Node_Str"")) {
      final String[] creatures=name.split(""String_Node_Str"");
      if (creatures[0].equalsIgnoreCase(""String_Node_Str""))       creatures[0]=""String_Node_Str"";
      ct=EntityType.fromName(creatures[0]);
      if (creatures[1].equalsIgnoreCase(""String_Node_Str""))       creatures[1]=""String_Node_Str"";
      final EntityType ct2=EntityType.fromName(creatures[1]);
      if (ct == null) {
        replace.put(""String_Node_Str"",creatures[0]);
        Utils.sI18n(sender,""String_Node_Str"",replace);
      }
      if (ct2 == null) {
        replace.put(""String_Node_Str"",creatures[1]);
        Utils.sI18n(sender,""String_Node_Str"",replace);
      }
      if (ct == null || ct2 == null) {
        return;
      }
      ACPluginManager.scheduleSyncTask(new PassengerMob(loc,nbTaped,ct,ct2,player,sender));
    }
 else {
      ct=EntityType.fromName(name);
      if (ct == null) {
        Utils.sI18n(sender,""String_Node_Str"",replace);
        return;
      }
      ACPluginManager.scheduleSyncTask(new NormalMob(loc,nbTaped,ct,player,sender));
    }
  }
}",0.9361702127659576
93769,"public static Location buildLocation(final ConfigurationSection section,final ACWorld world) throws Exception {
}","public static Location buildLocation(final ConfigurationSection section,final ACWorld world){
}",0.9134615384615384
93770,"public static boolean importESHomes(final ExtendedConfiguration userFile,final String playerName){
  Set<String> nodeList;
  ConfigurationSection home=null, homes=null;
  Location homeLoc=null;
  if (userFile == null) {
    ACLogger.info(""String_Node_Str"" + playerName);
    return false;
  }
  homes=userFile.getConfigurationSection(""String_Node_Str"");
  if (homes != null) {
    nodeList=homes.getKeys(false);
    for (    final String name : nodeList) {
      home=homes.getConfigurationSection(name);
      final ACWorld w=ACWorld.getWorld(home.getString(""String_Node_Str""));
      try {
        homeLoc=buildLocation(home,w);
      }
 catch (      final Exception e) {
        ACLogger.info(""String_Node_Str"" + playerName);
        DebugLog.INSTANCE.log(Level.WARNING,""String_Node_Str"" + playerName,e);
        return false;
      }
      ACPlayer.getPlayer(playerName).setHome(name,homeLoc);
    }
  }
 else {
    ACLogger.info(""String_Node_Str"" + playerName);
    return false;
  }
  return true;
}","public static boolean importESHomes(final ExtendedConfiguration userFile,final String playerName){
  Set<String> nodeList;
  ConfigurationSection home=null, homes=null;
  Location homeLoc=null;
  if (userFile == null) {
    ACLogger.info(""String_Node_Str"" + playerName);
    return false;
  }
  homes=userFile.getConfigurationSection(""String_Node_Str"");
  if (homes != null) {
    nodeList=homes.getKeys(false);
    for (    final String name : nodeList) {
      home=homes.getConfigurationSection(name);
      final ACWorld w=ACWorld.getWorld(home.getString(""String_Node_Str""));
      try {
        homeLoc=buildLocation(home,w);
      }
 catch (      final Exception e) {
        ACLogger.info(""String_Node_Str"" + playerName);
        DebugLog.INSTANCE.log(Level.WARNING,""String_Node_Str"" + playerName,e);
        return false;
      }
      ACPlayer.getPlayer(playerName).setHome(name,homeLoc);
    }
  }
 else {
    if (ConfigEnum.VERBOSE.getBoolean()) {
      ACLogger.info(""String_Node_Str"" + playerName + ""String_Node_Str"");
    }
    return false;
  }
  return false;
}",0.9327569644572526
93771,"@Override public void execute(final CommandSender sender,final CommandArgs args) throws ActionNotPermitedException, PlayerNotFound {
  float amount=0;
  Player target=null;
  final HashMap<String,String> replace=new HashMap<String,String>();
  boolean self=false;
  if (0 < args.length && args.length < 2) {
    if (Utils.isPlayer(sender,true)) {
      target=(Player)sender;
      self=true;
      if (!args.hasFlag('t')) {
        try {
          amount=args.getFloat(0);
        }
 catch (        final NumberFormatException e) {
          replace.put(""String_Node_Str"",args.getString(0));
          Utils.I18n(""String_Node_Str"",replace);
          return;
        }
      }
    }
 else {
      return;
    }
  }
 else   if (args.length >= 2) {
    target=Utils.getPlayer(args.getString(0));
    if (!args.hasFlag('t')) {
      try {
        amount=args.getFloat(1);
      }
 catch (      final NumberFormatException e) {
        replace.put(""String_Node_Str"",args.getString(0));
        Utils.I18n(""String_Node_Str"",replace);
        return;
      }
    }
  }
 else {
    if (Utils.isPlayer(sender,true)) {
      if (args.hasFlag('t')) {
        target=(Player)sender;
        replace.put(""String_Node_Str"",String.valueOf(target.getTotalExperience()));
        sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
        return;
      }
    }
 else {
      return;
    }
  }
  if (target == null) {
    return;
  }
  replace.put(""String_Node_Str"",String.valueOf(amount));
  final Player taskTarget=target;
  final float amountXp=amount;
  if (args.hasFlag('d')) {
    final Location loc=target.getLocation();
    loc.setX(loc.getX() + 2);
    ACPluginManager.scheduleSyncTask(new Runnable(){
      @Override public void run(){
        taskTarget.getLocation().getWorld().spawn(loc,ExperienceOrb.class).setExperience((int)amountXp);
      }
    }
);
    if (self) {
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
 else   if (args.hasFlag('a')) {
    ACPluginManager.scheduleSyncTask(new Runnable(){
      @Override public void run(){
        taskTarget.giveExp((int)amountXp);
      }
    }
);
    if (self) {
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
 else   if (args.hasFlag('p')) {
    final float exp=(amount > 1 ? 1 : amount);
    ACPluginManager.scheduleSyncTask(new Runnable(){
      @Override public void run(){
        taskTarget.setExp(exp);
      }
    }
);
    replace.put(""String_Node_Str"",String.valueOf(exp * 100.0F));
    if (self) {
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
 else   if (args.hasFlag('l')) {
    ACPluginManager.scheduleSyncTask(new Runnable(){
      @Override public void run(){
        taskTarget.setLevel((int)amountXp);
      }
    }
);
    if (self) {
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
 else   if (args.hasFlag('t')) {
    replace.put(""String_Node_Str"",String.valueOf(target.getTotalExperience()));
    if (self) {
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
}","@Override public void execute(final CommandSender sender,final CommandArgs args) throws ActionNotPermitedException, PlayerNotFound {
  float amount=0;
  Player target=null;
  final HashMap<String,String> replace=new HashMap<String,String>();
  boolean self=false;
  if (args.hasFlag('p')) {
    target=Utils.getPlayer(args.getValueFlag('p'));
  }
 else {
    target=(Player)sender;
    self=true;
  }
  if (0 < args.length) {
    if (!args.hasFlag('t')) {
      try {
        amount=args.getFloat(0);
      }
 catch (      final NumberFormatException e) {
        replace.put(""String_Node_Str"",args.getString(0));
        Utils.I18n(""String_Node_Str"",replace);
        return;
      }
    }
  }
 else {
    if (Utils.isPlayer(sender,true)) {
      if (args.hasFlag('t')) {
        target=(Player)sender;
        replace.put(""String_Node_Str"",String.valueOf(target.getTotalExperience()));
        sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
        return;
      }
    }
 else {
      return;
    }
  }
  if (target == null) {
    return;
  }
  replace.put(""String_Node_Str"",String.valueOf(amount));
  final Player taskTarget=target;
  final float amountXp=amount;
  if (args.hasFlag('d')) {
    final Location loc=target.getLocation();
    loc.setX(loc.getX() + 2);
    ACPluginManager.scheduleSyncTask(new Runnable(){
      @Override public void run(){
        taskTarget.getLocation().getWorld().spawn(loc,ExperienceOrb.class).setExperience((int)amountXp);
      }
    }
);
    if (self) {
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
 else   if (args.hasFlag('a')) {
    ACPluginManager.scheduleSyncTask(new Runnable(){
      @Override public void run(){
        taskTarget.giveExp((int)amountXp);
      }
    }
);
    if (self) {
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
 else   if (args.hasFlag('b')) {
    final float exp=(amount > 1 ? 1 : amount);
    ACPluginManager.scheduleSyncTask(new Runnable(){
      @Override public void run(){
        taskTarget.setExp(exp);
      }
    }
);
    replace.put(""String_Node_Str"",String.valueOf(exp * 100.0F));
    if (self) {
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
 else   if (args.hasFlag('l')) {
    ACPluginManager.scheduleSyncTask(new Runnable(){
      @Override public void run(){
        taskTarget.setLevel((int)amountXp);
      }
    }
);
    if (self) {
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
 else   if (args.hasFlag('t')) {
    replace.put(""String_Node_Str"",String.valueOf(target.getTotalExperience()));
    if (self) {
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
}",0.5848496580203897
93772,"private String getMessage(final EntityDamageEvent e){
  final Entity damager=((EntityDamageByEntityEvent)e).getDamager();
  if (damager instanceof Wolf) {
    return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
  }
 else   if (damager instanceof Skeleton) {
    return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
  }
 else   if (damager instanceof TNTPrimed) {
    return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
  }
 else   if (damager instanceof Zombie) {
    return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
  }
 else   if (damager instanceof Projectile) {
    if (damager instanceof Arrow) {
      if (((Arrow)damager).getShooter() == null) {
        return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
      }
 else       if (((Arrow)damager).getShooter() instanceof Player) {
        return ACHelper.getInstance().getDeathMessage(""String_Node_Str"") + Utils.getPlayerName(((Player)((Arrow)damager).getShooter()));
      }
 else       if (((Projectile)damager).getShooter() instanceof Skeleton) {
        return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
      }
    }
 else     if (damager instanceof Fireball) {
      if (((Fireball)damager).getShooter() instanceof Blaze) {
        return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
      }
 else       if (((Fireball)damager).getShooter() instanceof Ghast) {
        return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
      }
    }
 else     if (damager instanceof ThrownPotion) {
      if (((ThrownPotion)damager).getShooter() instanceof Player) {
        return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
      }
    }
  }
 else   if (damager instanceof LivingEntity) {
    return ACHelper.getInstance().getDeathMessage(""String_Node_Str"") + damager.getType().getName();
  }
  return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
}","private String getMessage(final EntityDamageEvent e){
  final Entity damager=((EntityDamageByEntityEvent)e).getDamager();
  if (damager instanceof Wolf) {
    return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
  }
 else   if (damager instanceof Player) {
    return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
  }
 else   if (damager instanceof Skeleton) {
    return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
  }
 else   if (damager instanceof TNTPrimed) {
    return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
  }
 else   if (damager instanceof Zombie) {
    if (damager instanceof PigZombie) {
      return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
    }
    return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
  }
 else   if (damager instanceof Projectile) {
    if (damager instanceof Arrow) {
      if (((Arrow)damager).getShooter() == null) {
        return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
      }
 else       if (((Arrow)damager).getShooter() instanceof Player) {
        return ACHelper.getInstance().getDeathMessage(""String_Node_Str"") + Utils.getPlayerName(((Player)((Arrow)damager).getShooter()));
      }
 else       if (((Projectile)damager).getShooter() instanceof Skeleton) {
        return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
      }
    }
 else     if (damager instanceof Fireball) {
      if (((Fireball)damager).getShooter() instanceof Blaze) {
        return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
      }
 else       if (((Fireball)damager).getShooter() instanceof Ghast) {
        return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
      }
    }
 else     if (damager instanceof ThrownPotion) {
      if (((ThrownPotion)damager).getShooter() instanceof Player) {
        return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
      }
    }
  }
 else   if (damager instanceof LivingEntity) {
    return (ACHelper.getInstance().getDeathMessage(""String_Node_Str"") + damager.getType().getName());
  }
  return ACHelper.getInstance().getDeathMessage(""String_Node_Str"");
}",0.6260616355253579
93773,"@Override public String getPermissionLimit(final Player p,final String limit){
  String result=null;
  if (mChat) {
    result=Reader.getInfo(p.getName(),InfoType.USER,p.getWorld().getName(),""String_Node_Str"" + limit);
  }
  if (result == null || (result != null && result.isEmpty())) {
    final Pattern regex=Pattern.compile(""String_Node_Str"" + limit.toLowerCase() + ""String_Node_Str"");
    Map<String,PermissionAttachmentInfo> permissions=null;
    try {
      final PermissibleBase perm=ClassUtils.getPrivateField(p,""String_Node_Str"");
      permissions=ClassUtils.getPrivateField(perm,""String_Node_Str"");
    }
 catch (    final SecurityException e) {
      ACLogger.severe(""String_Node_Str"" + limit + ""String_Node_Str""+ p.getName(),e);
    }
catch (    final IllegalArgumentException e) {
      ACLogger.severe(""String_Node_Str"" + limit + ""String_Node_Str""+ p.getName(),e);
    }
catch (    final IllegalAccessException e) {
      ACLogger.severe(""String_Node_Str"" + limit + ""String_Node_Str""+ p.getName(),e);
    }
catch (    final NoSuchFieldException e) {
      ACLogger.severe(""String_Node_Str"" + limit + ""String_Node_Str""+ p.getName(),e);
    }
    int max=Integer.MIN_VALUE;
synchronized (permissions) {
      final Collection<PermissionAttachmentInfo> perms=permissions.values();
      for (      final PermissionAttachmentInfo info : perms) {
        final Matcher regexMatcher=regex.matcher(info.getPermission().toLowerCase());
        if (!regexMatcher.find()) {
          continue;
        }
        final int current=Integer.parseInt(info.getPermission().split(""String_Node_Str"")[2]);
        if (current < max) {
          continue;
        }
        max=current;
      }
    }
    if (max != Integer.MIN_VALUE) {
      return String.valueOf(max);
    }
  }
 else {
    return result;
  }
  return null;
}","@Override public String getPermissionLimit(final Player p,final String limit){
  String result=null;
  if (mChat) {
    result=Reader.getInfo(p.getName(),InfoType.USER,p.getWorld().getName(),""String_Node_Str"" + limit);
  }
  if (result == null || (result != null && result.isEmpty())) {
    final Pattern regex=Pattern.compile(""String_Node_Str"" + limit.toLowerCase() + ""String_Node_Str"");
    Map<String,PermissionAttachmentInfo> permissions=null;
    try {
      Permissible perm=ClassUtils.getPrivateField(p,""String_Node_Str"");
      try {
        permissions=ClassUtils.getPrivateField(perm,""String_Node_Str"");
      }
 catch (      final NoSuchFieldException e) {
        perm=ClassUtils.getPrivateField(perm,""String_Node_Str"");
        permissions=ClassUtils.getPrivateField(perm,""String_Node_Str"");
      }
    }
 catch (    final SecurityException e) {
      ACLogger.severe(""String_Node_Str"" + limit + ""String_Node_Str""+ p.getName(),e);
    }
catch (    final IllegalArgumentException e) {
      ACLogger.severe(""String_Node_Str"" + limit + ""String_Node_Str""+ p.getName(),e);
    }
catch (    final IllegalAccessException e) {
      ACLogger.severe(""String_Node_Str"" + limit + ""String_Node_Str""+ p.getName(),e);
    }
catch (    final NoSuchFieldException e) {
      ACLogger.severe(""String_Node_Str"" + limit + ""String_Node_Str""+ p.getName(),e);
    }
    int max=Integer.MIN_VALUE;
synchronized (permissions) {
      final Collection<PermissionAttachmentInfo> perms=permissions.values();
      for (      final PermissionAttachmentInfo info : perms) {
        final Matcher regexMatcher=regex.matcher(info.getPermission().toLowerCase());
        if (!regexMatcher.find()) {
          continue;
        }
        final int current=Integer.parseInt(info.getPermission().split(""String_Node_Str"")[2]);
        if (current < max) {
          continue;
        }
        max=current;
      }
    }
    if (max != Integer.MIN_VALUE) {
      return String.valueOf(max);
    }
  }
 else {
    return result;
  }
  return null;
}",0.942092962866788
93774,"@EventHandler(priority=EventPriority.HIGHEST,ignoreCancelled=true) public void onCreatureSpawn(final CreatureSpawnEvent event){
  final Entity e=event.getEntity();
  if (e instanceof HumanEntity)   return;
  final World world=e.getWorld();
  final ACWorld acWorld=ACWorld.getWorld(world.getName());
  final List<LivingEntity> livEntities=world.getLivingEntities();
  Integer limit=acWorld.getInformation(Type.MOB_LIMIT.toString()).getInt(-1);
  if (limit != -1) {
    if ((livEntities.size() - world.getPlayers().size()) >= limit)     event.setCancelled(true);
  }
  if (!event.isCancelled()) {
    final Class<? extends Entity> entityClass=e.getClass();
    final String entityName=entityClass.getSimpleName();
    limit=acWorld.getMobLimit(entityName);
    if (limit == -1)     return;
    final int count=world.getEntitiesByClass(entityClass).size();
    if (count >= limit)     event.setCancelled(true);
  }
}","@EventHandler(priority=EventPriority.HIGHEST,ignoreCancelled=true) public void onCreatureSpawn(final CreatureSpawnEvent event){
  final Entity e=event.getEntity();
  if (e instanceof HumanEntity)   return;
  final World world=e.getWorld();
  final ACWorld acWorld;
  try {
    acWorld=ACWorld.getWorld(world.getName());
  }
 catch (  final WorldNotLoaded e2) {
    return;
  }
  final List<LivingEntity> livEntities=world.getLivingEntities();
  Integer limit=acWorld.getInformation(Type.MOB_LIMIT.toString()).getInt(-1);
  if (limit != -1) {
    if ((livEntities.size() - world.getPlayers().size()) >= limit)     event.setCancelled(true);
  }
  if (!event.isCancelled()) {
    final Class<? extends Entity> entityClass=e.getClass();
    final String entityName=entityClass.getSimpleName();
    limit=acWorld.getMobLimit(entityName);
    if (limit == -1)     return;
    final int count=world.getEntitiesByClass(entityClass).size();
    if (count >= limit)     event.setCancelled(true);
  }
}",0.9590336134453782
93775,"@EventHandler(priority=EventPriority.LOWEST) public void onPlayerLogin(final PlayerLoginEvent event){
  if (!event.getResult().equals(Result.ALLOWED))   return;
  Ban player=ACHelper.getInstance().getBan(event.getPlayer().getName());
  if (player != null)   event.disallow(Result.KICK_BANNED,player.getReason());
}","@EventHandler(priority=EventPriority.LOWEST) public void onPlayerLogin(final PlayerLoginEvent event){
  if (!event.getResult().equals(Result.ALLOWED))   return;
  Ban player=ACHelper.getInstance().getBan(event.getPlayer().getName());
  if (player == null)   player=ACHelper.getInstance().getBan(event.getAddress().toString().substring(1));
  if (player != null)   event.disallow(Result.KICK_BANNED,player.getReason());
}",0.8555858310626703
93776,"@Override public void execute(final CommandSender sender,final CommandArgs args){
  float amount=0;
  Player target=null;
  boolean self=false;
  if (args.length < 2) {
    if (Utils.isPlayer(sender,true)) {
      target=(Player)sender;
      self=true;
      if (!args.hasFlag('t'))       try {
        amount=args.getFloat(0);
      }
 catch (      final NumberFormatException e) {
        final HashMap<String,String> replace=new HashMap<String,String>();
        replace.put(""String_Node_Str"",args.getString(0));
        Utils.I18n(""String_Node_Str"",replace);
        return;
      }
    }
 else     return;
  }
 else {
    target=Utils.getPlayer(args.getString(0));
    if (!args.hasFlag('t'))     try {
      amount=args.getFloat(1);
    }
 catch (    final NumberFormatException e) {
      final HashMap<String,String> replace=new HashMap<String,String>();
      replace.put(""String_Node_Str"",args.getString(0));
      Utils.I18n(""String_Node_Str"",replace);
      return;
    }
  }
  if (target == null)   return;
  final HashMap<String,String> replace=new HashMap<String,String>();
  replace.put(""String_Node_Str"",String.valueOf(amount));
  final Player taskTarget=target;
  final float amountXp=amount;
  if (args.hasFlag('d')) {
    final Location loc=target.getLocation();
    loc.setX(loc.getX() + 2);
    ACPluginManager.scheduleSyncTask(new Runnable(){
      @Override public void run(){
        taskTarget.getLocation().getWorld().spawn(loc,ExperienceOrb.class).setExperience((int)amountXp);
      }
    }
);
    if (self) {
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
 else   if (args.hasFlag('a')) {
    ACPluginManager.scheduleSyncTask(new Runnable(){
      @Override public void run(){
        taskTarget.giveExp((int)amountXp);
      }
    }
);
    if (self) {
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
 else   if (args.hasFlag('p')) {
    final float exp=(amount > 1 ? 1 : amount);
    ACPluginManager.scheduleSyncTask(new Runnable(){
      @Override public void run(){
        taskTarget.setExp(exp);
      }
    }
);
    replace.put(""String_Node_Str"",String.valueOf(exp * 100.0F));
    if (self) {
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
 else   if (args.hasFlag('l')) {
    ACPluginManager.scheduleSyncTask(new Runnable(){
      @Override public void run(){
        taskTarget.setLevel((int)amountXp);
      }
    }
);
    if (self) {
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
 else   if (args.hasFlag('t')) {
    replace.put(""String_Node_Str"",String.valueOf(target.getTotalExperience()));
    if (self) {
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
}","@Override public void execute(final CommandSender sender,final CommandArgs args){
  float amount=0;
  Player target=null;
  final HashMap<String,String> replace=new HashMap<String,String>();
  boolean self=false;
  if (0 < args.length && args.length < 2) {
    if (Utils.isPlayer(sender,true)) {
      target=(Player)sender;
      self=true;
      if (!args.hasFlag('t'))       try {
        amount=args.getFloat(0);
      }
 catch (      final NumberFormatException e) {
        replace.put(""String_Node_Str"",args.getString(0));
        Utils.I18n(""String_Node_Str"",replace);
        return;
      }
    }
 else     return;
  }
 else   if (args.length >= 2) {
    target=Utils.getPlayer(args.getString(0));
    if (!args.hasFlag('t'))     try {
      amount=args.getFloat(1);
    }
 catch (    final NumberFormatException e) {
      replace.put(""String_Node_Str"",args.getString(0));
      Utils.I18n(""String_Node_Str"",replace);
      return;
    }
  }
 else {
    if (Utils.isPlayer(sender,true)) {
      if (args.hasFlag('t')) {
        target=(Player)sender;
        replace.put(""String_Node_Str"",String.valueOf(target.getTotalExperience()));
        sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
        return;
      }
    }
 else     return;
  }
  if (target == null)   return;
  replace.put(""String_Node_Str"",String.valueOf(amount));
  final Player taskTarget=target;
  final float amountXp=amount;
  if (args.hasFlag('d')) {
    final Location loc=target.getLocation();
    loc.setX(loc.getX() + 2);
    ACPluginManager.scheduleSyncTask(new Runnable(){
      @Override public void run(){
        taskTarget.getLocation().getWorld().spawn(loc,ExperienceOrb.class).setExperience((int)amountXp);
      }
    }
);
    if (self) {
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
 else   if (args.hasFlag('a')) {
    ACPluginManager.scheduleSyncTask(new Runnable(){
      @Override public void run(){
        taskTarget.giveExp((int)amountXp);
      }
    }
);
    if (self) {
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
 else   if (args.hasFlag('p')) {
    final float exp=(amount > 1 ? 1 : amount);
    ACPluginManager.scheduleSyncTask(new Runnable(){
      @Override public void run(){
        taskTarget.setExp(exp);
      }
    }
);
    replace.put(""String_Node_Str"",String.valueOf(exp * 100.0F));
    if (self) {
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
 else   if (args.hasFlag('l')) {
    ACPluginManager.scheduleSyncTask(new Runnable(){
      @Override public void run(){
        taskTarget.setLevel((int)amountXp);
      }
    }
);
    if (self) {
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      target.sendMessage(Utils.I18n(""String_Node_Str"",replace));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
 else   if (args.hasFlag('t')) {
    replace.put(""String_Node_Str"",String.valueOf(target.getTotalExperience()));
    if (self) {
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
 else {
      replace.put(""String_Node_Str"",Utils.getPlayerName(target));
      sender.sendMessage(Utils.I18n(""String_Node_Str"",replace));
    }
  }
}",0.9162419966026396
93777,"@Override public boolean argsCheck(final String... args){
  return args.length >= 1;
}","@Override public boolean argsCheck(final String... args){
  return args != null && args.length >= 1;
}",0.9148936170212766
93778,"/** 
 * Load all the kits
 * @return
 */
public Map<String,KitInstance> loadKits(){
  final Map<String,KitInstance> result=new LinkedHashMap<String,KitInstance>();
  final List<MaterialContainer> items=new ArrayList<MaterialContainer>();
  final ExtendedConfiguration kits=getYml(""String_Node_Str"");
  final Map<String,List<String>> kitParents=new HashMap<String,List<String>>();
  final Map<ArmorPart,MaterialContainer> armor=new EnumMap<Type.ArmorPart,MaterialContainer>(ArmorPart.class);
  final ConfigurationSection kitNodes=kits.getConfigurationSection(""String_Node_Str"");
  if (kitNodes == null) {
    ACLogger.severe(""String_Node_Str"");
    return result;
  }
  for (  final String kitName : kitNodes.getKeys(false)) {
    int delay=0;
    final ConfigurationSection kitNode=kitNodes.getConfigurationSection(kitName);
    ConfigurationSection kitItems=null;
    ConfigurationSection armorItems=null;
    List<String> parents=null;
    try {
      kitItems=kitNode.getConfigurationSection(""String_Node_Str"");
      armorItems=kitNode.getConfigurationSection(""String_Node_Str"");
      parents=kitNode.getStringList(""String_Node_Str"");
    }
 catch (    final NullPointerException e) {
      DebugLog.INSTANCE.warning(""String_Node_Str"" + kitName);
      continue;
    }
    if (kitItems != null)     for (    final String item : kitItems.getKeys(false)) {
      final MaterialContainer m=Utils.checkMaterial(item);
      m.setAmount(kitItems.getInt(item,1));
      if (!m.isNull())       items.add(m);
    }
    delay=kitNode.getInt(""String_Node_Str"",0);
    if (armorItems != null) {
      for (      final ArmorPart part : ArmorPart.values()) {
        final String partId=armorItems.getString(part.toString());
        if (partId == null)         continue;
        final MaterialContainer m=Utils.checkMaterial(partId);
        if (!m.isNull())         armor.put(part,m);
      }
      result.put(kitName,new ArmoredKitInstance(kitName,delay,new ArrayList<MaterialContainer>(items),new EnumMap<Type.ArmorPart,MaterialContainer>(armor)));
    }
 else     result.put(kitName,new KitInstance(kitName,delay,new ArrayList<MaterialContainer>(items)));
    if (parents != null)     kitParents.put(kitName,parents);
 else     ACLogger.info(kitName + ""String_Node_Str"");
    items.clear();
    armor.clear();
  }
  for (  final Entry<String,List<String>> entry : kitParents.entrySet()) {
    KitInstance kit=result.get(entry.getKey());
    for (    final String parent : entry.getValue()) {
      final KitInstance parentKit=result.get(parent);
      if (parentKit == null)       continue;
      if (parentKit instanceof ArmoredKitInstance && !(kit instanceof ArmoredKitInstance)) {
        kit=new ArmoredKitInstance(kit);
        result.put(kit.getName(),kit);
      }
      kit.addParent(parentKit);
    }
  }
  return result;
}","/** 
 * Load all the kits
 * @return
 */
public Map<String,KitInstance> loadKits(){
  final Map<String,KitInstance> result=new LinkedHashMap<String,KitInstance>();
  final List<MaterialContainer> items=new ArrayList<MaterialContainer>();
  final ExtendedConfiguration kits=getYml(""String_Node_Str"");
  final Map<String,List<String>> kitParents=new HashMap<String,List<String>>();
  final Map<ArmorPart,MaterialContainer> armor=new EnumMap<Type.ArmorPart,MaterialContainer>(ArmorPart.class);
  final ConfigurationSection kitNodes=kits.getConfigurationSection(""String_Node_Str"");
  if (kitNodes == null) {
    ACLogger.severe(""String_Node_Str"");
    return result;
  }
  for (  final String kitName : kitNodes.getKeys(false)) {
    int delay=0;
    final ConfigurationSection kitNode=kitNodes.getConfigurationSection(kitName);
    ConfigurationSection kitItems=null;
    ConfigurationSection armorItems=null;
    List<String> parents=null;
    try {
      kitItems=kitNode.getConfigurationSection(""String_Node_Str"");
      armorItems=kitNode.getConfigurationSection(""String_Node_Str"");
      parents=kitNode.getStringList(""String_Node_Str"");
    }
 catch (    final NullPointerException e) {
      DebugLog.INSTANCE.warning(""String_Node_Str"" + kitName);
      continue;
    }
    if (kitItems != null)     for (    final String item : kitItems.getKeys(false)) {
      try {
        final MaterialContainer m=Utils.checkMaterial(item);
        m.setAmount(kitItems.getInt(item,1));
        if (!m.isNull())         items.add(m);
      }
 catch (      final InvalidInputException e) {
        DebugLog.INSTANCE.log(Level.WARNING,""String_Node_Str"" + item,e);
      }
    }
    delay=kitNode.getInt(""String_Node_Str"",0);
    if (armorItems != null) {
      for (      final ArmorPart part : ArmorPart.values()) {
        final String partId=armorItems.getString(part.toString());
        if (partId == null)         continue;
        try {
          final MaterialContainer m=Utils.checkMaterial(partId);
          if (!m.isNull())           armor.put(part,m);
        }
 catch (        final InvalidInputException e) {
          DebugLog.INSTANCE.log(Level.WARNING,""String_Node_Str"" + partId,e);
        }
      }
      result.put(kitName,new ArmoredKitInstance(kitName,delay,new ArrayList<MaterialContainer>(items),new EnumMap<Type.ArmorPart,MaterialContainer>(armor)));
    }
 else     result.put(kitName,new KitInstance(kitName,delay,new ArrayList<MaterialContainer>(items)));
    if (parents != null)     kitParents.put(kitName,parents);
 else     ACLogger.info(kitName + ""String_Node_Str"");
    items.clear();
    armor.clear();
  }
  for (  final Entry<String,List<String>> entry : kitParents.entrySet()) {
    KitInstance kit=result.get(entry.getKey());
    for (    final String parent : entry.getValue()) {
      final KitInstance parentKit=result.get(parent);
      if (parentKit == null)       continue;
      if (parentKit instanceof ArmoredKitInstance && !(kit instanceof ArmoredKitInstance)) {
        kit=new ArmoredKitInstance(kit);
        result.put(kit.getName(),kit);
      }
      kit.addParent(parentKit);
    }
  }
  return result;
}",0.9418060200668896
93779,"/** 
 * Translate the id or name to a material
 * @param mat
 * @return Material
 */
public static MaterialContainer checkMaterial(final String mat){
  MaterialContainer mc=new MaterialContainer();
  try {
    if (oddItem != null) {
      final ItemStack is=OddItem.getItemStack(mat);
      if (is != null) {
        return new MaterialContainer(is);
      }
    }
  }
 catch (  final Exception e) {
  }
  String[] info=new String[2];
  if (mat.contains(""String_Node_Str"")) {
    info=mat.split(""String_Node_Str"");
    mc=new MaterialContainer(info[0],info[1]);
  }
 else {
    info[0]=mat;
    info[1]=""String_Node_Str"";
    if ((mc=ACHelper.getInstance().getAlias(info[0])) == null) {
      mc=new MaterialContainer(info[0],info[1]);
    }
  }
  return mc;
}","/** 
 * Translate the id or name to a material
 * @param mat
 * @return Material
 * @throws InvalidInputException if the input is invalid
 */
public static MaterialContainer checkMaterial(final String mat) throws InvalidInputException {
  MaterialContainer mc=new MaterialContainer();
  try {
    if (oddItem != null) {
      final ItemStack is=OddItem.getItemStack(mat);
      if (is != null) {
        return new MaterialContainer(is);
      }
    }
  }
 catch (  final Exception e) {
  }
  String[] info=new String[2];
  if (mat.contains(""String_Node_Str"")) {
    info=mat.split(""String_Node_Str"");
    if (info.length < 2)     throw new InvalidInputException(mat);
    mc=new MaterialContainer(info[0],info[1]);
  }
 else {
    info[0]=mat;
    info[1]=""String_Node_Str"";
    if ((mc=ACHelper.getInstance().getAlias(info[0])) == null) {
      mc=new MaterialContainer(info[0],info[1]);
    }
  }
  return mc;
}",0.9080047789725209
93780,"/** 
 * Translate the id or name to a material
 * @param mat
 * @return Material
 */
public MaterialContainer checkMaterial(final CommandSender sender,final String mat){
  final MaterialContainer m=Utils.checkMaterial(mat);
  if (m.isNull()) {
    final HashMap<String,String> replace=new HashMap<String,String>();
    replace.put(""String_Node_Str"",mat);
    Utils.sI18n(sender,""String_Node_Str"",replace);
  }
  return m;
}","/** 
 * Translate the id or name to a material
 * @param mat
 * @return Material
 */
public MaterialContainer checkMaterial(final CommandSender sender,final String mat){
  MaterialContainer m=null;
  try {
    m=Utils.checkMaterial(mat);
  }
 catch (  final InvalidInputException e) {
    final HashMap<String,String> replace=new HashMap<String,String>();
    replace.put(""String_Node_Str"",mat);
    Utils.sI18n(sender,""String_Node_Str"",replace);
    return null;
  }
  if (m.isNull()) {
    final HashMap<String,String> replace=new HashMap<String,String>();
    replace.put(""String_Node_Str"",mat);
    Utils.sI18n(sender,""String_Node_Str"",replace);
  }
  return m;
}",0.7229357798165138
93781,"@EventHandler public void onPlayerJoin(final PlayerJoinEvent event){
  final Player p=event.getPlayer();
  final ACPlayer player=PlayerManager.getInstance().setOnline(p);
  player.setInformation(""String_Node_Str"",p.getAddress().getAddress().toString());
  if (ConfigEnum.JQMSG.getBoolean() && !SuperPermissions.isApiSet()) {
    final HashMap<String,String> replace=new HashMap<String,String>();
    replace.put(""String_Node_Str"",Utils.getPlayerName(p,null,true));
    event.setJoinMessage(Utils.I18n(""String_Node_Str"",replace));
  }
  if (player.hasPower(Type.INVISIBLE)) {
    event.setJoinMessage(null);
    Utils.sI18n(event.getPlayer(),""String_Node_Str"");
    InvisibleWorker.getInstance().onJoinEvent(p);
  }
  ACPluginManager.getScheduler().scheduleAsyncDelayedTask(ACPluginManager.getCorePlugin(),new Runnable(){
    @Override public void run(){
      if (ConfigEnum.AUTO_AFK.getBoolean())       AFKWorker.getInstance().updateTimeStamp(p);
      final int imLvl=ACHelper.getInstance().getLimit(p,""String_Node_Str"",""String_Node_Str"");
      player.setInformation(""String_Node_Str"",imLvl == Integer.MAX_VALUE ? ConfigEnum.DIMMUNITY.getInt() : imLvl);
      if (player.hasPower(Type.SPYMSG))       ACHelper.getInstance().addSpy(p);
      player.setInformation(""String_Node_Str"",System.currentTimeMillis());
      if (ConfigEnum.NEWS.getBoolean())       Utils.sParsedLocale(p,""String_Node_Str"");
      if (ConfigEnum.RULES.getBoolean() && !ConfigEnum.FJ_RULES.getBoolean())       Utils.sParsedLocale(p,""String_Node_Str"");
      if (ConfigEnum.TPREQUEST.getBoolean() && !player.hasPower(Type.TP_REQUEST) && PermissionManager.hasPerm(p,""String_Node_Str"",false))       player.setPower(Type.TP_REQUEST);
    }
  }
);
  if (player.hasPower(Type.FAKEQUIT)) {
    event.setJoinMessage(null);
    ACHelper.getInstance().addFakeQuit(p);
  }
  if (player.getInformation(""String_Node_Str"").getBoolean(true)) {
    player.setInformation(""String_Node_Str"",false);
    if (ConfigEnum.JQMSG.getBoolean() && !SuperPermissions.isApiSet()) {
      final HashMap<String,String> replace=new HashMap<String,String>();
      replace.put(""String_Node_Str"",Utils.getPlayerName(p,null,true));
      event.setJoinMessage(Utils.I18n(""String_Node_Str"",replace));
    }
    if (ConfigEnum.FCSPAWN.getBoolean())     ACHelper.getInstance().spawn(p);
    if (!ConfigEnum.FCSPAWN.getBoolean() && ConfigEnum.GSPAWN.getString().equalsIgnoreCase(""String_Node_Str""))     ACHelper.getInstance().groupSpawn(p);
    if (ConfigEnum.FJ_RULES.getBoolean())     Utils.sParsedLocale(p,""String_Node_Str"");
    if (ConfigEnum.MOTD.getBoolean())     Utils.sParsedLocale(p,""String_Node_Str"");
  }
 else   if (ConfigEnum.MOTD.getBoolean())   Utils.sParsedLocale(p,""String_Node_Str"");
}","@EventHandler(priority=EventPriority.HIGH) public void onPlayerJoin(final PlayerJoinEvent event){
  final Player p=event.getPlayer();
  final ACPlayer player=PlayerManager.getInstance().setOnline(p);
  player.setInformation(""String_Node_Str"",p.getAddress().getAddress().toString());
  if (ConfigEnum.JQMSG.getBoolean() && !SuperPermissions.isApiSet()) {
    final HashMap<String,String> replace=new HashMap<String,String>();
    replace.put(""String_Node_Str"",Utils.getPlayerName(p,null,true));
    event.setJoinMessage(Utils.I18n(""String_Node_Str"",replace));
  }
  if (player.hasPower(Type.INVISIBLE)) {
    event.setJoinMessage(null);
    Utils.sI18n(event.getPlayer(),""String_Node_Str"");
    InvisibleWorker.getInstance().onJoinEvent(p);
  }
  ACPluginManager.getScheduler().scheduleAsyncDelayedTask(ACPluginManager.getCorePlugin(),new Runnable(){
    @Override public void run(){
      if (ConfigEnum.AUTO_AFK.getBoolean())       AFKWorker.getInstance().updateTimeStamp(p);
      final int imLvl=ACHelper.getInstance().getLimit(p,""String_Node_Str"",""String_Node_Str"");
      player.setInformation(""String_Node_Str"",imLvl == Integer.MAX_VALUE ? ConfigEnum.DIMMUNITY.getInt() : imLvl);
      if (player.hasPower(Type.SPYMSG))       ACHelper.getInstance().addSpy(p);
      player.setInformation(""String_Node_Str"",System.currentTimeMillis());
      if (ConfigEnum.NEWS.getBoolean())       Utils.sParsedLocale(p,""String_Node_Str"");
      if (ConfigEnum.RULES.getBoolean() && !ConfigEnum.FJ_RULES.getBoolean())       Utils.sParsedLocale(p,""String_Node_Str"");
      if (ConfigEnum.TPREQUEST.getBoolean() && !player.hasPower(Type.TP_REQUEST) && PermissionManager.hasPerm(p,""String_Node_Str"",false))       player.setPower(Type.TP_REQUEST);
    }
  }
);
  if (player.hasPower(Type.FAKEQUIT)) {
    event.setJoinMessage(null);
    ACHelper.getInstance().addFakeQuit(p);
  }
  if (player.getInformation(""String_Node_Str"").getBoolean(true)) {
    player.setInformation(""String_Node_Str"",false);
    if (ConfigEnum.JQMSG.getBoolean() && !SuperPermissions.isApiSet()) {
      final HashMap<String,String> replace=new HashMap<String,String>();
      replace.put(""String_Node_Str"",Utils.getPlayerName(p,null,true));
      event.setJoinMessage(Utils.I18n(""String_Node_Str"",replace));
    }
    if (ConfigEnum.FCSPAWN.getBoolean())     ACHelper.getInstance().spawn(p);
    if (!ConfigEnum.FCSPAWN.getBoolean() && ConfigEnum.GSPAWN.getString().equalsIgnoreCase(""String_Node_Str""))     ACHelper.getInstance().groupSpawn(p);
    if (ConfigEnum.FJ_RULES.getBoolean())     Utils.sParsedLocale(p,""String_Node_Str"");
    if (ConfigEnum.MOTD.getBoolean())     Utils.sParsedLocale(p,""String_Node_Str"");
  }
 else   if (ConfigEnum.MOTD.getBoolean())   Utils.sParsedLocale(p,""String_Node_Str"");
}",0.9947339749409844
93782,"/** 
 * @param player
 * @param from
 * @param to
 * @param cause
 */
public ACTeleportEvent(Player player,Location from,Location to,TeleportCause cause){
  super(player,from,to,cause);
}","/** 
 * @param player
 * @param from
 * @param to
 * @param cause
 */
public ACTeleportEvent(final Player player,final Location from,final Location to,final TeleportCause cause){
  super(player,from,to,cause);
}",0.9396984924623116
93783,"/** 
 * Add a permission Child to the Permission Parent
 * @param perm
 * @return the PermParent (this)
 */
public PermParent addChild(String perm){
  PermChild child=new PermChild(perm);
  child.registerPermission();
  child.parent=this;
  children.add(child);
  return this;
}","/** 
 * Add a permission Child to the Permission Parent
 * @param perm
 * @return the PermParent (this)
 */
public PermParent addChild(String perm){
  PermChild child=new PermChild(perm);
  child.registerPermission();
  child.parent=this;
  children.add(child);
  registered=false;
  return this;
}",0.9652777777777778
93784,"/** 
 * Check if the user have the permission to use this Egg
 * @param player
 * @return
 * @throws DontHaveThePermissionException when the player don't have the permission, with the message to display to the user
 */
protected boolean checkPermission(Player player) throws DontHaveThePermissionException {
  String perm;
  if (this.getClass().isAnnotationPresent(EggPermission.class))   perm=this.getClass().getAnnotation(EggPermission.class).permission();
 else {
    String simpleName=this.getClass().getSimpleName();
    perm=simpleName.substring(0,simpleName.length() - 4).toLowerCase();
  }
  if (perm == null || (perm != null && perm.isEmpty()))   return true;
  if (!PermissionManager.hasPerm(player,perm,false))   throw new DontHaveThePermissionException(Utils.I18n(""String_Node_Str"",""String_Node_Str"",perm));
  return true;
}","/** 
 * Check if the user have the permission to use this Egg
 * @param player
 * @return
 * @throws DontHaveThePermissionException when the player don't have the permission, with the message to display to the user
 */
protected boolean checkPermission(Player player) throws DontHaveThePermissionException {
  String perm;
  if (this.getClass().isAnnotationPresent(EggPermission.class))   perm=this.getClass().getAnnotation(EggPermission.class).permission();
 else {
    String simpleName=this.getClass().getSimpleName();
    perm=""String_Node_Str"" + simpleName.substring(0,simpleName.length() - 3).toLowerCase();
  }
  if (perm == null || (perm != null && perm.isEmpty()))   return true;
  if (!PermissionManager.hasPerm(player,perm,false))   throw new DontHaveThePermissionException(Utils.I18n(""String_Node_Str"",""String_Node_Str"",perm));
  return true;
}",0.9869976359338062
93785,"/** 
 * Add a Package that containing the EggType class. The Class must have a name that finish by Egg.
 * @param packageName
 */
@SuppressWarnings(""String_Node_Str"") public synchronized static void addPackage(Plugin plugin,String packageName){
  PermissionLinker linker=PermissionLinker.getPermissionLinker(plugin.getDescription().getName());
  PermParent parent=new PermParent(""String_Node_Str"");
  linker.addPermParent(parent);
  linker.setMajorPerm(new PermParent(""String_Node_Str""));
  for (  Class<?> clazz : getClassesInPackage(packageName,plugin.getClass().getClassLoader()))   if (EggType.class.isAssignableFrom(clazz)) {
    if (clazz.isAnnotationPresent(EggPermission.class)) {
      EggPermission annotation=clazz.getAnnotation(EggPermission.class);
      if (!annotation.permission().isEmpty())       parent.addChild(annotation.permission());
    }
 else {
      String simpleName=clazz.getSimpleName();
      parent.addChild(""String_Node_Str"" + simpleName.substring(0,simpleName.length() - 4).toLowerCase());
    }
    classes.put(clazz.getName(),(Class<? extends EggType<?>>)clazz);
    classesSimpleName.put(clazz.getSimpleName(),(Class<? extends EggType<?>>)clazz);
  }
  linker.registerAllPermParent();
}","/** 
 * Add a Package that containing the EggType class. The Class must have a name that finish by Egg.
 * @param packageName
 */
@SuppressWarnings(""String_Node_Str"") public synchronized static void addPackage(Plugin plugin,String packageName){
  PermissionLinker linker=PermissionLinker.getPermissionLinker(plugin.getDescription().getName());
  PermParent parent=new PermParent(""String_Node_Str"");
  linker.addPermParent(parent);
  linker.setMajorPerm(new PermParent(""String_Node_Str""));
  for (  Class<?> clazz : getClassesInPackage(packageName,plugin.getClass().getClassLoader()))   if (EggType.class.isAssignableFrom(clazz)) {
    if (clazz.isAnnotationPresent(EggPermission.class)) {
      EggPermission annotation=clazz.getAnnotation(EggPermission.class);
      if (!annotation.permission().isEmpty())       parent.addChild(annotation.permission());
    }
 else {
      String simpleName=clazz.getSimpleName();
      parent.addChild(""String_Node_Str"" + simpleName.substring(0,simpleName.length() - 3).toLowerCase());
    }
    classes.put(clazz.getName(),(Class<? extends EggType<?>>)clazz);
    classesSimpleName.put(clazz.getSimpleName(),(Class<? extends EggType<?>>)clazz);
  }
  linker.registerAllPermParent();
}",0.9991816693944352
93786,"@EventHandler public void onPlayerQuit(PlayerQuitEvent event){
  final Player p=event.getPlayer();
  final ACPlayer player=ACPlayer.getPlayer(p);
  player.setInformation(""String_Node_Str"",System.currentTimeMillis());
  player.setInformation(""String_Node_Str"",ACHelper.getInstance().getLimit(p,""String_Node_Str""));
  if (ConfigEnum.JQMSG.getBoolean() && !SuperPermissions.isApiSet()) {
    final HashMap<String,String> replace=new HashMap<String,String>();
    replace.put(""String_Node_Str"",Utils.getPlayerName(p,null,true));
    event.setQuitMessage(Utils.I18n(""String_Node_Str"",replace));
  }
  if (player.hasPower(Type.FAKEQUIT))   event.setQuitMessage(null);
 else   if (InvisibleWorker.getInstance().hasInvisiblePowers(p.getName()))   event.setQuitMessage(null);
  PlayerManager.getInstance().setOffline(player);
  ACHelper.getInstance().removeDisconnectedPlayer(p);
}","@EventHandler public void onPlayerQuit(PlayerQuitEvent event){
  final Player p=event.getPlayer();
  final ACPlayer player=ACPlayer.getPlayer(p);
  player.setInformation(""String_Node_Str"",System.currentTimeMillis());
  int imLvl=ACHelper.getInstance().getLimit(p,""String_Node_Str"",""String_Node_Str"");
  player.setInformation(""String_Node_Str"",imLvl == Integer.MAX_VALUE ? ConfigEnum.DIMMUNITY : imLvl);
  if (ConfigEnum.JQMSG.getBoolean() && !SuperPermissions.isApiSet()) {
    final HashMap<String,String> replace=new HashMap<String,String>();
    replace.put(""String_Node_Str"",Utils.getPlayerName(p,null,true));
    event.setQuitMessage(Utils.I18n(""String_Node_Str"",replace));
  }
  if (player.hasPower(Type.FAKEQUIT))   event.setQuitMessage(null);
 else   if (InvisibleWorker.getInstance().hasInvisiblePowers(p.getName()))   event.setQuitMessage(null);
  PlayerManager.getInstance().setOffline(player);
  ACHelper.getInstance().removeDisconnectedPlayer(p);
}",0.9067103109656302
93787,"@EventHandler public void onPlayerJoin(PlayerJoinEvent event){
  final Player p=event.getPlayer();
  final ACPlayer player=PlayerManager.getInstance().setOnline(p);
  if (ConfigEnum.JQMSG.getBoolean() && !SuperPermissions.isApiSet()) {
    final HashMap<String,String> replace=new HashMap<String,String>();
    replace.put(""String_Node_Str"",Utils.getPlayerName(p,null,true));
    event.setJoinMessage(Utils.I18n(""String_Node_Str"",replace));
  }
  if (player.hasPower(Type.INVISIBLE)) {
    event.setJoinMessage(null);
    Utils.sI18n(event.getPlayer(),""String_Node_Str"");
    InvisibleWorker.getInstance().onJoinEvent(p);
  }
  if (ConfigEnum.AUTO_AFK.getBoolean())   AFKWorker.getInstance().updateTimeStamp(p);
  player.setInformation(""String_Node_Str"",ACHelper.getInstance().getLimit(p,""String_Node_Str""));
  if (player.hasPower(Type.FAKEQUIT)) {
    event.setJoinMessage(null);
    ACHelper.getInstance().addFakeQuit(p);
  }
  if (player.hasPower(Type.SPYMSG))   ACHelper.getInstance().addSpy(p);
  if (player.getInformation(""String_Node_Str"").getBoolean(true)) {
    player.setInformation(""String_Node_Str"",false);
    if (ConfigEnum.FCSPAWN.getBoolean())     ACHelper.getInstance().spawn(p);
    if (!ConfigEnum.FCSPAWN.getBoolean() && ConfigEnum.GSPAWN.getString().equalsIgnoreCase(""String_Node_Str""))     ACHelper.getInstance().groupSpawn(p);
    if (ConfigEnum.FJ_RULES.getBoolean())     Utils.sParsedLocale(p,""String_Node_Str"");
    if (ConfigEnum.MOTD.getBoolean())     Utils.sParsedLocale(p,""String_Node_Str"");
  }
 else   if (ConfigEnum.MOTD.getBoolean())   Utils.sParsedLocale(p,""String_Node_Str"");
  player.setInformation(""String_Node_Str"",System.currentTimeMillis());
  if (ConfigEnum.NEWS.getBoolean())   Utils.sParsedLocale(p,""String_Node_Str"");
  if (ConfigEnum.RULES.getBoolean() && !ConfigEnum.FJ_RULES.getBoolean())   Utils.sParsedLocale(p,""String_Node_Str"");
  if (ConfigEnum.TPREQUEST.getBoolean() && !player.hasPower(Type.TP_REQUEST) && PermissionManager.hasPerm(p,""String_Node_Str"",false))   player.setPower(Type.TP_REQUEST);
}","@EventHandler public void onPlayerJoin(PlayerJoinEvent event){
  final Player p=event.getPlayer();
  final ACPlayer player=PlayerManager.getInstance().setOnline(p);
  if (ConfigEnum.JQMSG.getBoolean() && !SuperPermissions.isApiSet()) {
    final HashMap<String,String> replace=new HashMap<String,String>();
    replace.put(""String_Node_Str"",Utils.getPlayerName(p,null,true));
    event.setJoinMessage(Utils.I18n(""String_Node_Str"",replace));
  }
  if (player.hasPower(Type.INVISIBLE)) {
    event.setJoinMessage(null);
    Utils.sI18n(event.getPlayer(),""String_Node_Str"");
    InvisibleWorker.getInstance().onJoinEvent(p);
  }
  if (ConfigEnum.AUTO_AFK.getBoolean())   AFKWorker.getInstance().updateTimeStamp(p);
  int imLvl=ACHelper.getInstance().getLimit(p,""String_Node_Str"",""String_Node_Str"");
  player.setInformation(""String_Node_Str"",imLvl == Integer.MAX_VALUE ? ConfigEnum.DIMMUNITY : imLvl);
  if (player.hasPower(Type.FAKEQUIT)) {
    event.setJoinMessage(null);
    ACHelper.getInstance().addFakeQuit(p);
  }
  if (player.hasPower(Type.SPYMSG))   ACHelper.getInstance().addSpy(p);
  if (player.getInformation(""String_Node_Str"").getBoolean(true)) {
    player.setInformation(""String_Node_Str"",false);
    if (ConfigEnum.FCSPAWN.getBoolean())     ACHelper.getInstance().spawn(p);
    if (!ConfigEnum.FCSPAWN.getBoolean() && ConfigEnum.GSPAWN.getString().equalsIgnoreCase(""String_Node_Str""))     ACHelper.getInstance().groupSpawn(p);
    if (ConfigEnum.FJ_RULES.getBoolean())     Utils.sParsedLocale(p,""String_Node_Str"");
    if (ConfigEnum.MOTD.getBoolean())     Utils.sParsedLocale(p,""String_Node_Str"");
  }
 else   if (ConfigEnum.MOTD.getBoolean())   Utils.sParsedLocale(p,""String_Node_Str"");
  player.setInformation(""String_Node_Str"",System.currentTimeMillis());
  if (ConfigEnum.NEWS.getBoolean())   Utils.sParsedLocale(p,""String_Node_Str"");
  if (ConfigEnum.RULES.getBoolean() && !ConfigEnum.FJ_RULES.getBoolean())   Utils.sParsedLocale(p,""String_Node_Str"");
  if (ConfigEnum.TPREQUEST.getBoolean() && !player.hasPower(Type.TP_REQUEST) && PermissionManager.hasPerm(p,""String_Node_Str"",false))   player.setPower(Type.TP_REQUEST);
}",0.9592177438588124
93788,"@Override public void onPlayerJoin(PlayerJoinEvent event){
  Player p=event.getPlayer();
  PlayerManager.getInstance().setOnline(p);
  ACPlayer player=ACPlayer.getPlayer(p);
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !SuperPermissions.isApiSet()) {
    HashMap<String,String> replace=new HashMap<String,String>();
    replace.put(""String_Node_Str"",Utils.getPlayerName(p,null,true));
    event.setJoinMessage(Utils.I18n(""String_Node_Str"",replace));
  }
  if (player.hasPower(Type.INVISIBLE)) {
    event.setJoinMessage(null);
    Utils.sI18n(event.getPlayer(),""String_Node_Str"");
    InvisibleWorker.getInstance().onJoinEvent(p);
  }
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   AFKWorker.getInstance().updateTimeStamp(p);
  player.setInformation(""String_Node_Str"",ACHelper.getInstance().getLimit(p,""String_Node_Str""));
  if (player.hasPower(Type.FAKEQUIT)) {
    event.setJoinMessage(null);
    ACHelper.getInstance().addFakeQuit(p);
  }
  if (player.hasPower(Type.SPYMSG))   ACHelper.getInstance().addSpy(p);
  if (player.getInformation(""String_Node_Str"").getBoolean(true)) {
    player.setInformation(""String_Node_Str"",false);
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     ACHelper.getInstance().spawn(p);
    if (!ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && ACHelper.getInstance().getConfString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))     ACHelper.getInstance().groupSpawn(p);
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     Utils.sParsedLocale(p,""String_Node_Str"");
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     Utils.sParsedLocale(p,""String_Node_Str"");
  }
 else   if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   Utils.sParsedLocale(p,""String_Node_Str"");
  player.setInformation(""String_Node_Str"",System.currentTimeMillis());
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   Utils.sParsedLocale(p,""String_Node_Str"");
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   Utils.sParsedLocale(p,""String_Node_Str"");
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !player.hasPower(Type.TP_REQUEST) && PermissionManager.hasPerm(p,""String_Node_Str"",false))   player.setPower(Type.TP_REQUEST);
}","@Override public void onPlayerJoin(PlayerJoinEvent event){
  Player p=event.getPlayer();
  ACPlayer player=PlayerManager.getInstance().setOnline(p);
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !SuperPermissions.isApiSet()) {
    HashMap<String,String> replace=new HashMap<String,String>();
    replace.put(""String_Node_Str"",Utils.getPlayerName(p,null,true));
    event.setJoinMessage(Utils.I18n(""String_Node_Str"",replace));
  }
  if (player.hasPower(Type.INVISIBLE)) {
    event.setJoinMessage(null);
    Utils.sI18n(event.getPlayer(),""String_Node_Str"");
    InvisibleWorker.getInstance().onJoinEvent(p);
  }
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   AFKWorker.getInstance().updateTimeStamp(p);
  player.setInformation(""String_Node_Str"",ACHelper.getInstance().getLimit(p,""String_Node_Str""));
  if (player.hasPower(Type.FAKEQUIT)) {
    event.setJoinMessage(null);
    ACHelper.getInstance().addFakeQuit(p);
  }
  if (player.hasPower(Type.SPYMSG))   ACHelper.getInstance().addSpy(p);
  if (player.getInformation(""String_Node_Str"").getBoolean(true)) {
    player.setInformation(""String_Node_Str"",false);
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     ACHelper.getInstance().spawn(p);
    if (!ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && ACHelper.getInstance().getConfString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))     ACHelper.getInstance().groupSpawn(p);
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     Utils.sParsedLocale(p,""String_Node_Str"");
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     Utils.sParsedLocale(p,""String_Node_Str"");
  }
 else   if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   Utils.sParsedLocale(p,""String_Node_Str"");
  player.setInformation(""String_Node_Str"",System.currentTimeMillis());
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   Utils.sParsedLocale(p,""String_Node_Str"");
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   Utils.sParsedLocale(p,""String_Node_Str"");
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !player.hasPower(Type.TP_REQUEST) && PermissionManager.hasPerm(p,""String_Node_Str"",false))   player.setPower(Type.TP_REQUEST);
}",0.9878800765468848
93789,"@Override public void onPlayerTeleport(PlayerTeleportEvent event){
  if (event.isCancelled())   return;
  Location from=event.getFrom();
  Location to=event.getTo();
  String playername=event.getPlayer().getName();
  boolean otherWorld=!from.getWorld().equals(to.getWorld());
  ACPlayer player=ACPlayer.getPlayer(playername);
  if (otherWorld) {
    player.setLastLocation(from);
  }
  if (player.hasPower(Type.FROZEN)) {
    event.setCancelled(true);
    return;
  }
  playerRespawnOrJoin(event.getPlayer());
}","@Override public void onPlayerTeleport(PlayerTeleportEvent event){
  if (event.isCancelled())   return;
  Location from=event.getFrom();
  Location to=event.getTo();
  boolean otherWorld=!from.getWorld().equals(to.getWorld());
  ACPlayer player=ACPlayer.getPlayer(event.getPlayer());
  if (otherWorld) {
    player.setLastLocation(from);
  }
  if (player.hasPower(Type.FROZEN)) {
    event.setCancelled(true);
    return;
  }
  playerRespawnOrJoin(event.getPlayer());
}",0.9224489795918368
93790,"@Override public void onPlayerChangedWorld(PlayerChangedWorldEvent event){
  ACPlayer player=ACPlayer.getPlayer(event.getPlayer());
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !PermissionManager.hasPerm(player.getHandler(),""String_Node_Str"",false)) {
    player.removeAllSuperPower();
    if (InvisibleWorker.getInstance().hasInvisiblePowers(player.getName())) {
      InvisibleWorker.getInstance().reappear(event.getPlayer());
    }
    Utils.sI18n(event.getPlayer(),""String_Node_Str"");
  }
}","@Override public void onPlayerChangedWorld(PlayerChangedWorldEvent event){
  ACPlayer player=ACPlayer.getPlayer(event.getPlayer());
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !PermissionManager.hasPerm(event.getPlayer(),""String_Node_Str"",false)) {
    player.removeAllSuperPower();
    if (InvisibleWorker.getInstance().hasInvisiblePowers(player.getName())) {
      InvisibleWorker.getInstance().reappear(event.getPlayer());
    }
    Utils.sI18n(event.getPlayer(),""String_Node_Str"");
  }
}",0.9727626459143968
93791,"public void setOnline(Player player){
  playerFactory.addExistingPlayer(player.getName());
  onlinePlayers.put(demandACPlayer(player),true);
  DebugLog.INSTANCE.info(player.getName() + ""String_Node_Str"");
}","public ACPlayer setOnline(Player player){
  playerFactory.addExistingPlayer(player.getName());
  ACPlayer acPlayer=demandACPlayer(player);
  onlinePlayers.put(acPlayer,true);
  DebugLog.INSTANCE.info(player.getName() + ""String_Node_Str"");
  return acPlayer;
}",0.7741935483870968
93792,"ACPlayer demandACPlayer(Player player){
  if (player == null)   return getPlayer(""String_Node_Str"");
  String playerName=player.getName();
  ACPlayer result=getPlayer(playerName);
  if (result == null) {
    result=playerFactory.createPlayer(player);
    addPlayer(result);
    result=getPlayer(playerName);
  }
 else   if (result instanceof EmptyPlayer) {
    ACPlayer tmp=playerFactory.createPlayer(player);
    if (tmp.equals(result))     return result;
    result=tmp;
    players.remove(playerName);
    addPlayer(result);
    result=getPlayer(playerName);
  }
  return result;
}","ACPlayer demandACPlayer(Player player){
  if (player == null)   return getPlayer(""String_Node_Str"");
  String playerName=player.getName();
  ACPlayer result=getPlayer(playerName);
  if (result == null) {
    result=playerFactory.createPlayer(player);
    addPlayer(result);
    result=getPlayer(playerName);
  }
 else   if (result instanceof EmptyPlayer) {
    ACPlayer tmp=playerFactory.createPlayer(playerName);
    if (tmp instanceof EmptyPlayer)     return result;
    players.remove(playerName);
    onlinePlayers.remove(result);
    result=tmp;
    addPlayer(result);
    result=getPlayer(playerName);
  }
  return result;
}",0.8517298187808896
93793,"@Override public void onEnable(){
  ACPluginManager.setServer(getServer());
  DebugLog.setFile(getDataFolder().getPath());
  PluginDescriptionFile pdfFile=this.getDescription();
  DebugLog.INSTANCE.info(""String_Node_Str"" + pdfFile.getVersion());
  PluginManager pm=getServer().getPluginManager();
  ACPluginListener pL=new ACPluginListener();
  log.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str"");
  pm.registerEvent(Event.Type.PLUGIN_ENABLE,pL,Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLUGIN_DISABLE,pL,Priority.Monitor,this);
  worker=ACHelper.getInstance();
  worker.setCoreInstance(this);
  super.onEnable();
  TerminalCommandManager.getInstance().setPerm(this);
  worker.loadInfos();
  permissionLinker.registerAllPermParent();
  ACPlayerListener playerListener=new ACPlayerListener();
  ACEntityListener entityListener=new ACEntityListener();
  ACBlockListener blkListener=new ACBlockListener();
  pm.registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHANGED_WORLD,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_TELEPORT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_RESPAWN,playerListener,Priority.High,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,playerListener,Priority.High,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,playerListener,Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,entityListener,Priority.High,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,entityListener,Priority.High,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,entityListener,Priority.Normal,this);
  try {
    pm.registerEvent(Event.Type.FOOD_LEVEL_CHANGE,entityListener,Priority.High,this);
  }
 catch (  Throwable e) {
    if (CommandManager.getInstance().unRegisterCommand(Eternal.class,this))     CommandManager.getInstance().unRegisterCommand(Feed.class,this);
    ACLogger.info(""String_Node_Str"");
  }
  pm.registerEvent(Event.Type.CREATURE_SPAWN,entityListener,Priority.Highest,this);
  if (worker.getConfBoolean(""String_Node_Str""))   pm.registerEvent(Event.Type.SIGN_CHANGE,blkListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGE,blkListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,blkListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.WEATHER_CHANGE,new ACWeatherListener(),Priority.Normal,this);
  Ping.init(this);
}","@Override public void onEnable(){
  ACPluginManager.setServer(getServer());
  DebugLog.setFile(getDataFolder().getPath());
  PluginDescriptionFile pdfFile=this.getDescription();
  DebugLog.INSTANCE.info(""String_Node_Str"" + pdfFile.getVersion());
  PluginManager pm=getServer().getPluginManager();
  ACPluginListener pL=new ACPluginListener();
  log.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str"");
  pm.registerEvent(Event.Type.PLUGIN_ENABLE,pL,Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLUGIN_DISABLE,pL,Priority.Monitor,this);
  worker=ACHelper.getInstance();
  worker.setCoreInstance(this);
  super.onEnable();
  TerminalCommandManager.getInstance().setPerm(this);
  worker.loadInfos();
  permissionLinker.registerAllPermParent();
  ACPlayerListener playerListener=new ACPlayerListener();
  ACEntityListener entityListener=new ACEntityListener();
  ACBlockListener blkListener=new ACBlockListener();
  pm.registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHANGED_WORLD,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_TELEPORT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_RESPAWN,playerListener,Priority.High,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,playerListener,Priority.High,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,playerListener,Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,entityListener,Priority.High,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,entityListener,Priority.High,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,entityListener,Priority.Normal,this);
  try {
    pm.registerEvent(Event.Type.FOOD_LEVEL_CHANGE,entityListener,Priority.High,this);
  }
 catch (  Throwable e) {
    if (CommandManager.getInstance().unRegisterCommand(Eternal.class,this))     CommandManager.getInstance().unRegisterCommand(Feed.class,this);
    ACLogger.info(""String_Node_Str"");
  }
  pm.registerEvent(Event.Type.CREATURE_SPAWN,entityListener,Priority.Highest,this);
  if (worker.getConfBoolean(""String_Node_Str""))   pm.registerEvent(Event.Type.SIGN_CHANGE,blkListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGE,blkListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,blkListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.WEATHER_CHANGE,new ACWeatherListener(),Priority.Normal,this);
  Ping.init(this);
}",0.9979564032697548
93794,"@Override public void onPlayerJoin(PlayerJoinEvent event){
  Player p=event.getPlayer();
  PlayerManager.getInstance().setOnline(p);
  ACPlayer player=ACPlayer.getPlayer(p);
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !SuperPermissions.isApiSet()) {
    HashMap<String,String> replace=new HashMap<String,String>();
    replace.put(""String_Node_Str"",Utils.getPlayerName(p,null,true));
    event.setJoinMessage(Utils.I18n(""String_Node_Str"",replace));
  }
  if (player.hasPower(Type.INVISIBLE)) {
    event.setJoinMessage(null);
    Utils.sI18n(event.getPlayer(),""String_Node_Str"");
    InvisibleWorker.getInstance().onJoinEvent(p);
  }
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   AFKWorker.getInstance().updateTimeStamp(p);
  player.setInformation(""String_Node_Str"",ACHelper.getInstance().getLimit(p,""String_Node_Str""));
  if (player.hasPower(Type.FAKEQUIT)) {
    event.setJoinMessage(null);
    ACHelper.getInstance().addFakeQuit(p);
  }
  if (player.hasPower(Type.SPYMSG))   ACHelper.getInstance().addSpy(p);
  if (player.getInformation(""String_Node_Str"").getBoolean(true)) {
    player.setInformation(""String_Node_Str"",false);
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     ACHelper.getInstance().spawn(p);
    if (!ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && ACHelper.getInstance().getConfString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))     ACHelper.getInstance().groupSpawn(p);
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     Utils.sParsedLocale(p,""String_Node_Str"");
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     Utils.sParsedLocale(p,""String_Node_Str"");
  }
 else   if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   Utils.sParsedLocale(p,""String_Node_Str"");
  player.setInformation(""String_Node_Str"",System.currentTimeMillis());
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   Utils.sParsedLocale(p,""String_Node_Str"");
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   Utils.sParsedLocale(p,""String_Node_Str"");
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !player.hasPower(Type.TP_REQUEST) && PermissionManager.hasPerm(p,""String_Node_Str"",false))   player.setPower(Type.TP_REQUEST);
}","@Override public void onPlayerJoin(PlayerJoinEvent event){
  Player p=event.getPlayer();
  ACPlayer player=PlayerManager.getInstance().setOnline(p);
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !SuperPermissions.isApiSet()) {
    HashMap<String,String> replace=new HashMap<String,String>();
    replace.put(""String_Node_Str"",Utils.getPlayerName(p,null,true));
    event.setJoinMessage(Utils.I18n(""String_Node_Str"",replace));
  }
  if (player.hasPower(Type.INVISIBLE)) {
    event.setJoinMessage(null);
    Utils.sI18n(event.getPlayer(),""String_Node_Str"");
    InvisibleWorker.getInstance().onJoinEvent(p);
  }
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   AFKWorker.getInstance().updateTimeStamp(p);
  player.setInformation(""String_Node_Str"",ACHelper.getInstance().getLimit(p,""String_Node_Str""));
  if (player.hasPower(Type.FAKEQUIT)) {
    event.setJoinMessage(null);
    ACHelper.getInstance().addFakeQuit(p);
  }
  if (player.hasPower(Type.SPYMSG))   ACHelper.getInstance().addSpy(p);
  if (player.getInformation(""String_Node_Str"").getBoolean(true)) {
    player.setInformation(""String_Node_Str"",false);
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     ACHelper.getInstance().spawn(p);
    if (!ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && ACHelper.getInstance().getConfString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))     ACHelper.getInstance().groupSpawn(p);
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     Utils.sParsedLocale(p,""String_Node_Str"");
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     Utils.sParsedLocale(p,""String_Node_Str"");
  }
 else   if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   Utils.sParsedLocale(p,""String_Node_Str"");
  player.setInformation(""String_Node_Str"",System.currentTimeMillis());
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   Utils.sParsedLocale(p,""String_Node_Str"");
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   Utils.sParsedLocale(p,""String_Node_Str"");
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !player.hasPower(Type.TP_REQUEST) && PermissionManager.hasPerm(p,""String_Node_Str"",false))   player.setPower(Type.TP_REQUEST);
}",0.9878800765468848
93795,"@Override public void onPlayerTeleport(PlayerTeleportEvent event){
  if (event.isCancelled())   return;
  Location from=event.getFrom();
  Location to=event.getTo();
  String playername=event.getPlayer().getName();
  boolean otherWorld=!from.getWorld().equals(to.getWorld());
  ACPlayer player=ACPlayer.getPlayer(playername);
  if (otherWorld) {
    player.setLastLocation(from);
  }
  if (player.hasPower(Type.FROZEN)) {
    event.setCancelled(true);
    return;
  }
  playerRespawnOrJoin(event.getPlayer());
}","@Override public void onPlayerTeleport(PlayerTeleportEvent event){
  if (event.isCancelled())   return;
  Location from=event.getFrom();
  Location to=event.getTo();
  boolean otherWorld=!from.getWorld().equals(to.getWorld());
  ACPlayer player=ACPlayer.getPlayer(event.getPlayer());
  if (otherWorld) {
    player.setLastLocation(from);
  }
  if (player.hasPower(Type.FROZEN)) {
    event.setCancelled(true);
    return;
  }
  playerRespawnOrJoin(event.getPlayer());
}",0.9224489795918368
93796,"@Override public void onPlayerChangedWorld(PlayerChangedWorldEvent event){
  ACPlayer player=ACPlayer.getPlayer(event.getPlayer());
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !PermissionManager.hasPerm(player.getHandler(),""String_Node_Str"",false)) {
    player.removeAllSuperPower();
    if (InvisibleWorker.getInstance().hasInvisiblePowers(player.getName())) {
      InvisibleWorker.getInstance().reappear(event.getPlayer());
    }
    Utils.sI18n(event.getPlayer(),""String_Node_Str"");
  }
}","@Override public void onPlayerChangedWorld(PlayerChangedWorldEvent event){
  ACPlayer player=ACPlayer.getPlayer(event.getPlayer());
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !PermissionManager.hasPerm(event.getPlayer(),""String_Node_Str"",false)) {
    player.removeAllSuperPower();
    if (InvisibleWorker.getInstance().hasInvisiblePowers(player.getName())) {
      InvisibleWorker.getInstance().reappear(event.getPlayer());
    }
    Utils.sI18n(event.getPlayer(),""String_Node_Str"");
  }
}",0.9727626459143968
93797,"public void setOnline(Player player){
  playerFactory.addExistingPlayer(player.getName());
  onlinePlayers.put(demandACPlayer(player),true);
  DebugLog.INSTANCE.info(player.getName() + ""String_Node_Str"");
}","public ACPlayer setOnline(Player player){
  playerFactory.addExistingPlayer(player.getName());
  ACPlayer acPlayer=demandACPlayer(player);
  onlinePlayers.put(acPlayer,true);
  DebugLog.INSTANCE.info(player.getName() + ""String_Node_Str"");
  return acPlayer;
}",0.7741935483870968
93798,"ACPlayer demandACPlayer(Player player){
  if (player == null)   return getPlayer(""String_Node_Str"");
  String playerName=player.getName();
  ACPlayer result=getPlayer(playerName);
  if (result == null) {
    result=playerFactory.createPlayer(player);
    addPlayer(result);
    result=getPlayer(playerName);
  }
 else   if (result instanceof EmptyPlayer) {
    ACPlayer tmp=playerFactory.createPlayer(player);
    if (tmp.equals(result))     return result;
    result=tmp;
    players.remove(playerName);
    addPlayer(result);
    result=getPlayer(playerName);
  }
  return result;
}","ACPlayer demandACPlayer(Player player){
  if (player == null)   return getPlayer(""String_Node_Str"");
  String playerName=player.getName();
  ACPlayer result=getPlayer(playerName);
  if (result == null) {
    result=playerFactory.createPlayer(player);
    addPlayer(result);
    result=getPlayer(playerName);
  }
 else   if (result instanceof EmptyPlayer) {
    ACPlayer tmp=playerFactory.createPlayer(playerName);
    if (tmp instanceof EmptyPlayer)     return result;
    players.remove(playerName);
    onlinePlayers.remove(result);
    result=tmp;
    addPlayer(result);
    result=getPlayer(playerName);
  }
  return result;
}",0.8517298187808896
93799,"/** 
 * Get the complete player name with all prefix
 * @param player player to get the name
 * @param sender sender that want the name
 * @param withPrefix return the name with or without prefixes (e.g [INV])
 * @return the complete player name with prefix
 */
public static String getPlayerName(Player player,CommandSender sender,boolean withPrefix){
  if (withPrefix) {
    String prefix=colorParser(getPrefix(player,sender));
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     return prefix + player.getDisplayName() + ""String_Node_Str"";
    return prefix + player.getName() + ""String_Node_Str"";
  }
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   return player.getDisplayName();
  return player.getName();
}","/** 
 * Get the complete player name with all prefix
 * @param player player to get the name
 * @param sender sender that want the name
 * @param withPrefix return the name with or without prefixes (e.g [INV])
 * @return the complete player name with prefix
 */
public static String getPlayerName(Player player,CommandSender sender,boolean withPrefix){
  if (withPrefix) {
    String prefix=colorParser(getPrefix(player,sender));
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     return prefix + player.getDisplayName() + ChatColor.YELLOW;
    return prefix + player.getName() + ChatColor.YELLOW;
  }
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   return ChatColor.WHITE + player.getDisplayName();
  return ChatColor.WHITE + player.getName();
}",0.7728459530026109
93800,"/** 
 * Get the complete player name with all prefix
 * @param player player to get the name
 * @param sender sender that want the name
 * @param withPrefix return the name with or without prefixes (e.g [INV])
 * @return the complete player name with prefix
 */
public static String getPlayerName(Player player,CommandSender sender,boolean withPrefix){
  if (withPrefix) {
    String prefix=colorParser(getPrefix(player,sender));
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     return prefix + player.getDisplayName();
    return prefix + player.getName();
  }
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   return player.getDisplayName();
  return player.getName();
}","/** 
 * Get the complete player name with all prefix
 * @param player player to get the name
 * @param sender sender that want the name
 * @param withPrefix return the name with or without prefixes (e.g [INV])
 * @return the complete player name with prefix
 */
public static String getPlayerName(Player player,CommandSender sender,boolean withPrefix){
  if (withPrefix) {
    String prefix=colorParser(getPrefix(player,sender));
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     return prefix + player.getDisplayName() + ""String_Node_Str"";
    return prefix + player.getName() + ""String_Node_Str"";
  }
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))   return player.getDisplayName();
  return player.getName();
}",0.9725651577503428
93801,"@Override public String getPrefix(Player player){
  String prefix=""String_Node_Str"";
  for (  PermissionGroup group : PEX.getUser(player).getGroups())   if ((prefix=group.getPrefix()) != null && !prefix.isEmpty())   break;
  return prefix;
}","@Override public String getPrefix(Player player){
  PermissionUser user=PEX.getUser(player);
  if (user != null)   return user.getPrefix() == null ? ""String_Node_Str"" : user.getPrefix();
  String prefix=""String_Node_Str"";
  for (  PermissionGroup group : PEX.getUser(player).getGroups())   if ((prefix=group.getPrefix()) != null && !prefix.isEmpty())   break;
  return prefix;
}",0.7334410339256866
93802,"@Override public void execute(CommandSender sender,CommandArgs args){
  if (!Utils.isPlayer(sender,true))   return;
  if (Utils.isPlayer(sender,false) && ACPlayer.getPlayer(((Player)sender).getName()).hasPower(Type.MUTED) && ACHelper.getInstance().getConfBoolean(""String_Node_Str"")) {
    Utils.sI18n(sender,""String_Node_Str"");
    return;
  }
  Player pSender=(Player)sender;
  Player buddy=ACHelper.getInstance().getReplyPlayer(pSender);
  if (buddy != null) {
    if (!buddy.isOnline()) {
      Utils.sI18n(sender,""String_Node_Str"");
      ACHelper.getInstance().removeReplyPlayer(pSender);
      return;
    }
    if (InvisibleWorker.getInstance().hasInvisiblePowers(buddy.getName()) && !PermissionManager.hasPerm(sender,""String_Node_Str"",false)) {
      Utils.sI18n(sender,""String_Node_Str"",""String_Node_Str"",args.getString(0));
      return;
    }
    String senderPm=""String_Node_Str"";
    String msgPrefix=""String_Node_Str"" + ChatColor.RED + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"";
    String msg=""String_Node_Str"";
    String senderName=""String_Node_Str"";
    senderName=pSender.getName();
    senderPm=Utils.getPlayerName(pSender,buddy) + ChatColor.WHITE + ""String_Node_Str"";
    for (    String arg : args)     msg+=arg + ""String_Node_Str"";
    msg=msg.trim();
    String parsed=Utils.colorParser(msg);
    if (parsed == null)     parsed=msg;
    buddy.sendMessage(msgPrefix + senderPm + parsed);
    ACHelper.getInstance().setReplyPlayer(buddy,pSender);
    if (AFKWorker.getInstance().isAfk(buddy)) {
      AFKWorker.getInstance().sendAfkMessage((Player)sender,buddy);
    }
 else     sender.sendMessage(msgPrefix + senderPm + parsed);
    String spyMsg=""String_Node_Str"" + ChatColor.GREEN + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ senderName+ ""String_Node_Str""+ buddy.getName()+ ""String_Node_Str""+ parsed;
    for (    ACPlayer p : ACPlayer.getPlayers(Type.SPYMSG))     if (p != null && !p.getName().equals(senderName) && !p.getName().equals(buddy.getName()) && p.getHandler() != null)     p.getHandler().sendMessage(spyMsg);
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     ACLogger.info(spyMsg);
  }
 else   Utils.sI18n(sender,""String_Node_Str"");
}","@Override public void execute(CommandSender sender,CommandArgs args){
  if (!Utils.isPlayer(sender,true))   return;
  if (Utils.isPlayer(sender,false) && ACPlayer.getPlayer(((Player)sender)).hasPower(Type.MUTED) && ACHelper.getInstance().getConfBoolean(""String_Node_Str"")) {
    Utils.sI18n(sender,""String_Node_Str"");
    return;
  }
  Player pSender=(Player)sender;
  Player buddy=ACHelper.getInstance().getReplyPlayer(pSender);
  if (buddy != null) {
    if (!buddy.isOnline()) {
      Utils.sI18n(sender,""String_Node_Str"");
      ACHelper.getInstance().removeReplyPlayer(pSender);
      return;
    }
    if (InvisibleWorker.getInstance().hasInvisiblePowers(buddy.getName()) && !PermissionManager.hasPerm(sender,""String_Node_Str"",false)) {
      Utils.sI18n(sender,""String_Node_Str"",""String_Node_Str"",args.getString(0));
      return;
    }
    String senderPm=""String_Node_Str"";
    String msgPrefix=Utils.I18n(""String_Node_Str"");
    String msg=""String_Node_Str"";
    String senderName=""String_Node_Str"";
    senderName=pSender.getName();
    senderPm=Utils.getPlayerName(pSender,buddy) + ChatColor.WHITE + ""String_Node_Str"";
    for (    String arg : args)     msg+=arg + ""String_Node_Str"";
    msg=msg.trim();
    String parsed=Utils.colorParser(msg);
    if (parsed == null)     parsed=msg;
    buddy.sendMessage(msgPrefix + senderPm + parsed);
    ACHelper.getInstance().setReplyPlayer(buddy,pSender);
    if (AFKWorker.getInstance().isAfk(buddy)) {
      AFKWorker.getInstance().sendAfkMessage((Player)sender,buddy);
    }
 else     sender.sendMessage(msgPrefix + senderPm + parsed);
    String spyMsg=""String_Node_Str"" + ChatColor.GREEN + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ senderName+ ""String_Node_Str""+ buddy.getName()+ ""String_Node_Str""+ parsed;
    for (    Player p : ACHelper.getInstance().getSpyPlayers())     if (p != null && !p.getName().equals(senderName) && !p.getName().equals(buddy.getName()))     p.sendMessage(spyMsg);
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     ACLogger.info(spyMsg);
  }
 else   Utils.sI18n(sender,""String_Node_Str"");
}",0.5951445086705203
93803,"@Override protected void setDefaultLocale(){
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.YELLOW + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.BLUE + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.RED + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.BLUE + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.BLUE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_GREEN+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.BLUE + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.BLUE + ""String_Node_Str"" + ChatColor.WHITE);
  Utils.addLocale(""String_Node_Str"",ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.YELLOW + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.YELLOW + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_PURPLE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  LocaleManager.getInstance().save();
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.DARK_GREEN+ ""String_Node_Str""+ ChatColor.AQUA+ ""String_Node_Str""+ ChatColor.DARK_GREEN+ ""String_Node_Str""+ ChatColor.AQUA+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.DARK_GREEN+ ""String_Node_Str""+ ChatColor.AQUA+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.YELLOW + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.YELLOW + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_PURPLE+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_PURPLE + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.YELLOW + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.DARK_GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.BLUE + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.DARK_GREEN+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.DARK_GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_PURPLE + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.DARK_PURPLE+ ""String_Node_Str""+ ChatColor.AQUA+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.BLUE + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.DARK_GREEN+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.DARK_GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.YELLOW + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"" + ChatColor.AQUA+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.AQUA+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE);
  LocaleManager.getInstance().save();
}","@Override protected void setDefaultLocale(){
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.YELLOW + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.BLUE + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.RED + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.BLUE + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.BLUE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_GREEN+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.BLUE + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.BLUE + ""String_Node_Str"" + ChatColor.WHITE);
  Utils.addLocale(""String_Node_Str"",ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.YELLOW + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.YELLOW + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_PURPLE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  LocaleManager.getInstance().save();
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.DARK_GREEN+ ""String_Node_Str""+ ChatColor.AQUA+ ""String_Node_Str""+ ChatColor.DARK_GREEN+ ""String_Node_Str""+ ChatColor.AQUA+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.DARK_GREEN+ ""String_Node_Str""+ ChatColor.AQUA+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.YELLOW + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.YELLOW + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_PURPLE+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_PURPLE + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.YELLOW + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.DARK_GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.BLUE + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.DARK_GREEN+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.DARK_GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_PURPLE + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.DARK_PURPLE+ ""String_Node_Str""+ ChatColor.AQUA+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.BLUE + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.DARK_GREEN+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.DARK_GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.YELLOW + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"" + ChatColor.AQUA+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GOLD + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.AQUA+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"" + ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.DARK_AQUA + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.GOLD+ ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"");
  Utils.addLocale(""String_Node_Str"",ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE);
  LocaleManager.getInstance().save();
}",0.9985096077074572
93804,"/** 
 * Get ItemStacks for given kit
 * @param kit
 * @return
 */
public ArrayList<ItemStack> getItemStacks(){
  ArrayList<ItemStack> result=new ArrayList<ItemStack>();
  try {
  }
 catch (  Throwable e) {
  }
  for (  MaterialContainer mc : items)   result.add(mc.getItemStack());
  return result;
}","/** 
 * Get ItemStacks for given kit
 * @param kit
 * @return
 */
public List<ItemStack> getItemStacks(){
  ArrayList<ItemStack> result=new ArrayList<ItemStack>();
  try {
  }
 catch (  Throwable e) {
  }
  for (  MaterialContainer mc : items)   result.add(mc.getItemStack());
  return result;
}",0.8403361344537815
93805,"public KitInstance(String name,int delay,List<MaterialContainer> items){
  this.name=name;
  this.delay=delay;
  this.items=items;
}","public KitInstance(String name,int delay,List<MaterialContainer> items){
  this.name=name;
  this.delay=delay;
  this.items=items;
  ACPluginManager.getPluginInstance(""String_Node_Str"").getPermissionLinker().addOnTheFly(""String_Node_Str"" + name,""String_Node_Str"");
}",0.6633165829145728
93806,"/** 
 * @param afkTime the afkTime to set
 */
public void setAfkTime(int afkTime){
  if (afkTime > 0)   this.afkTime=afkTime * 1000;
}","/** 
 * @param afkTime the afkTime to set
 */
public void setAfkTime(int afkTime){
  if (afkTime > 0) {
    this.afkTime=afkTime * 1000;
    if (this.afkTime > this.kickTime)     playerTimeStamp=new MapMaker().expiration(afkTime + 60000,TimeUnit.MILLISECONDS).makeMap();
  }
}",0.6536585365853659
93807,"/** 
 * @param kickTime the kickTime to set
 */
public void setKickTime(int kickTime){
  if (afkTime > 0) {
    this.kickTime=kickTime * 1000 * 60;
    playerTimeStamp=new MapMaker().expiration(kickTime + 60000,TimeUnit.MILLISECONDS).makeMap();
  }
}","/** 
 * @param kickTime the kickTime to set
 */
public void setKickTime(int kickTime){
  if (afkTime > 0) {
    this.kickTime=kickTime * 1000 * 60;
    if (this.kickTime > this.afkTime)     playerTimeStamp=new MapMaker().expiration(kickTime + 60000,TimeUnit.MILLISECONDS).makeMap();
  }
}",0.929368029739777
93808,"@Override public void onPlayerInteract(PlayerInteractEvent event){
  Player p=event.getPlayer();
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"")) {
    AFKWorker.getInstance().updateTimeStamp(p);
    if (AFKWorker.getInstance().isAfk(p))     AFKWorker.getInstance().setOnline(p);
  }
  ACPlayer player=ACPlayer.getPlayer(p.getName());
  if (player.hasPower(Type.FROZEN)) {
    event.setCancelled(true);
    return;
  }
  ItemStack itemInHand=event.getItem();
  if (itemInHand != null && event.getAction() == Action.LEFT_CLICK_BLOCK && itemInHand.getTypeId() == ACHelper.getInstance().getConfInt(""String_Node_Str"") && player.hasPower(Type.SUPER_BREAKER)) {
    superBreaker(player,event.getClickedBlock());
    return;
  }
  if (((event.getAction() == Action.LEFT_CLICK_BLOCK) || (event.getAction() == Action.LEFT_CLICK_AIR))) {
    if (player.hasPower(Type.THOR))     p.getWorld().strikeLightning(p.getTargetBlock(null,600).getLocation());
    Float power=null;
    if ((power=player.getPower(Type.VULCAN).getFloat(0)) != 0)     p.getWorld().createExplosion(p.getTargetBlock(null,600).getLocation(),power,true);
    power=null;
    if ((power=player.getPower(Type.FIREBALL).getFloat(0)) != 0)     ShootFireball.shoot(p,power);
    tpAtSee(player);
  }
}","@Override public void onPlayerInteract(PlayerInteractEvent event){
  Player p=event.getPlayer();
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"")) {
    AFKWorker.getInstance().updateTimeStamp(p);
    if (AFKWorker.getInstance().isAfk(p))     AFKWorker.getInstance().setOnline(p);
  }
  ACPlayer player=ACPlayer.getPlayer(p.getName());
  if (player.hasPower(Type.FROZEN)) {
    event.setCancelled(true);
    return;
  }
  if (((event.getAction() == Action.LEFT_CLICK_BLOCK) || (event.getAction() == Action.LEFT_CLICK_AIR))) {
    if (player.hasPower(Type.THOR))     p.getWorld().strikeLightning(p.getTargetBlock(null,600).getLocation());
    Float power=null;
    if ((power=player.getPower(Type.VULCAN).getFloat(0)) != 0)     p.getWorld().createExplosion(p.getTargetBlock(null,600).getLocation(),power,true);
    power=null;
    if ((power=player.getPower(Type.FIREBALL).getFloat(0)) != 0)     ShootFireball.shoot(p,power);
    tpAtSee(player);
  }
}",0.864308105687416
93809,"public void onEnable(){
  ACPluginManager.setServer(getServer());
  PluginManager pm=getServer().getPluginManager();
  ACPluginListener pL=new ACPluginListener();
  PluginDescriptionFile pdfFile=this.getDescription();
  log.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str"");
  pm.registerEvent(Event.Type.PLUGIN_ENABLE,pL,Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLUGIN_DISABLE,pL,Priority.Monitor,this);
  worker=ACHelper.getInstance();
  worker.setCoreInstance(this);
  super.onEnable();
  TerminalCommandManager.getInstance().setPerm(this);
  worker.loadInfos();
  permissionLinker.registerAllPermParent();
  ACPlayerListener playerListener=new ACPlayerListener();
  ACEntityListener entityListener=new ACEntityListener();
  pm.registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_TELEPORT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_RESPAWN,playerListener,Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,playerListener,Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,entityListener,Priority.High,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,entityListener,Priority.High,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,entityListener,Priority.Normal,this);
  try {
    pm.registerEvent(Event.Type.FOOD_LEVEL_CHANGE,entityListener,Priority.High,this);
  }
 catch (  Throwable e) {
    if (CommandManager.getInstance().unRegisterCommand(Eternal.class,this))     CommandManager.getInstance().unRegisterCommand(Feed.class,this);
    ACLogger.info(""String_Node_Str"");
  }
  pm.registerEvent(Event.Type.SERVER_COMMAND,new ACServerListener(),Priority.Normal,this);
  pm.registerEvent(Event.Type.CREATURE_SPAWN,entityListener,Priority.Highest,this);
  if (worker.getConfBoolean(""String_Node_Str""))   pm.registerEvent(Event.Type.SIGN_CHANGE,new ACBlockListener(),Priority.Normal,this);
  pm.registerEvent(Event.Type.WEATHER_CHANGE,new ACWeatherListener(),Priority.Normal,this);
}","public void onEnable(){
  ACPluginManager.setServer(getServer());
  PluginManager pm=getServer().getPluginManager();
  ACPluginListener pL=new ACPluginListener();
  PluginDescriptionFile pdfFile=this.getDescription();
  log.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str"");
  pm.registerEvent(Event.Type.PLUGIN_ENABLE,pL,Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLUGIN_DISABLE,pL,Priority.Monitor,this);
  worker=ACHelper.getInstance();
  worker.setCoreInstance(this);
  super.onEnable();
  TerminalCommandManager.getInstance().setPerm(this);
  worker.loadInfos();
  permissionLinker.registerAllPermParent();
  ACPlayerListener playerListener=new ACPlayerListener();
  ACEntityListener entityListener=new ACEntityListener();
  ACBlockListener blkListener=new ACBlockListener();
  pm.registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_TELEPORT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_RESPAWN,playerListener,Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,playerListener,Priority.Lowest,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,entityListener,Priority.High,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,entityListener,Priority.High,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,entityListener,Priority.Normal,this);
  try {
    pm.registerEvent(Event.Type.FOOD_LEVEL_CHANGE,entityListener,Priority.High,this);
  }
 catch (  Throwable e) {
    if (CommandManager.getInstance().unRegisterCommand(Eternal.class,this))     CommandManager.getInstance().unRegisterCommand(Feed.class,this);
    ACLogger.info(""String_Node_Str"");
  }
  pm.registerEvent(Event.Type.SERVER_COMMAND,new ACServerListener(),Priority.Normal,this);
  pm.registerEvent(Event.Type.CREATURE_SPAWN,entityListener,Priority.Highest,this);
  if (worker.getConfBoolean(""String_Node_Str""))   pm.registerEvent(Event.Type.SIGN_CHANGE,blkListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGE,blkListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.WEATHER_CHANGE,new ACWeatherListener(),Priority.Normal,this);
}",0.943367826904986
93810,"@Override public void onPlayerQuit(PlayerQuitEvent event){
  Player p=event.getPlayer();
  ACPlayer player=ACPlayer.getPlayer(p.getName());
  player.setInformation(""String_Node_Str"",ACHelper.getInstance().getLimit(p,""String_Node_Str""));
  PlayerManager.getInstance().setOffline(ACPlayer.getPlayer(p.getName()));
  if (player.hasPower(Type.FAKEQUIT))   event.setQuitMessage(null);
 else   if (InvisibleWorker.getInstance().hasInvisiblePowers(p.getName()))   event.setQuitMessage(null);
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"")) {
    AFKWorker.getInstance().removePlayer(p);
  }
}","@Override public void onPlayerQuit(PlayerQuitEvent event){
  Player p=event.getPlayer();
  ACPlayer player=ACPlayer.getPlayer(p.getName());
  player.setInformation(""String_Node_Str"",ACHelper.getInstance().getLimit(p,""String_Node_Str""));
  PlayerManager.getInstance().setOffline(ACPlayer.getPlayer(p.getName()));
  if (player.hasPower(Type.FAKEQUIT))   event.setQuitMessage(null);
 else   if (InvisibleWorker.getInstance().hasInvisiblePowers(p.getName()))   event.setQuitMessage(null);
  AFKWorker.getInstance().removePlayer(p);
}",0.936283185840708
93811,"/** 
 * @param afkTime the afkTime to set
 */
public void setAfkTime(int afkTime){
  if (afkTime > 0) {
    this.afkTime=afkTime * 1000;
    if (this.afkTime > this.kickTime)     playerTimeStamp=new MapMaker().expiration(afkTime + 60000,TimeUnit.MILLISECONDS).makeMap();
  }
}","/** 
 * @param afkTime the afkTime to set
 */
public void setAfkTime(int afkTime){
  if (afkTime > 0)   this.afkTime=afkTime * 1000;
}",0.6536585365853659
93812,"/** 
 * @param kickTime the kickTime to set
 */
public void setKickTime(int kickTime){
  if (afkTime > 0) {
    this.kickTime=kickTime * 1000 * 60;
    if (this.kickTime > this.afkTime)     playerTimeStamp=new MapMaker().expiration(kickTime + 60000,TimeUnit.MILLISECONDS).makeMap();
  }
}","/** 
 * @param kickTime the kickTime to set
 */
public void setKickTime(int kickTime){
  if (afkTime > 0)   this.kickTime=kickTime * 1000 * 60;
}",0.6697459584295612
93813,"@Override public void execute(CommandSender sender,CommandArgs args){
  int dice=6;
  if (args.length >= 1) {
    try {
      dice=args.getInt(0);
    }
 catch (    NumberFormatException e) {
    }
  }
  Random rand=new Random();
  HashMap<String,String> replace=new HashMap<String,String>();
  replace.put(""String_Node_Str"",String.valueOf(dice));
  if (Utils.isPlayer(sender,false))   replace.put(""String_Node_Str"",((Player)sender).getDisplayName());
 else   replace.put(""String_Node_Str"",""String_Node_Str"");
  replace.put(""String_Node_Str"",String.valueOf(rand.nextInt(dice) + 1));
  Utils.broadcastMessage(Utils.I18n(""String_Node_Str"",replace));
}","@Override public void execute(CommandSender sender,CommandArgs args){
  int dice=6;
  if (args.length >= 1 && args.getInt(0) >= 1) {
    try {
      dice=args.getInt(0);
    }
 catch (    NumberFormatException e) {
    }
  }
  Random rand=new Random();
  HashMap<String,String> replace=new HashMap<String,String>();
  replace.put(""String_Node_Str"",String.valueOf(dice));
  if (Utils.isPlayer(sender,false))   replace.put(""String_Node_Str"",((Player)sender).getDisplayName());
 else   replace.put(""String_Node_Str"",""String_Node_Str"");
  replace.put(""String_Node_Str"",String.valueOf(rand.nextInt(dice) + 1));
  Utils.broadcastMessage(Utils.I18n(""String_Node_Str"",replace));
}",0.9825889477668432
93814,"@Override public void onEntityDeath(EntityDeathEvent event){
  if (!(event.getEntity() instanceof Player))   return;
  Player player=(Player)event.getEntity();
  ACHelper.getInstance().addLocation(""String_Node_Str"",player.getName() + ""String_Node_Str"",""String_Node_Str"",player.getName(),player.getLocation());
}","@Override public void onEntityDeath(EntityDeathEvent event){
  if (!(event.getEntity() instanceof Player))   return;
  Player player=(Player)event.getEntity();
  ACPlayer.getPlayer(player.getName()).setLastLocation(player.getLocation());
}",0.6581818181818182
93815,"@Override public void onEntityDamage(EntityDamageEvent event){
  if (event.isCancelled())   return;
  if (!(event.getEntity() instanceof Player))   return;
  Player player=(Player)event.getEntity();
  if (ACHelper.getInstance().isValueSet(Type.FLY,player) && event.getCause().equals(EntityDamageEvent.DamageCause.FALL)) {
    event.setCancelled(true);
    event.setDamage(0);
    return;
  }
 else   if (ACHelper.getInstance().hasGodPowers(player.getName())) {
    if (event.getCause().equals(DamageCause.FIRE) || event.getCause().equals(DamageCause.FIRE_TICK))     player.setFireTicks(0);
    event.setCancelled(true);
    event.setDamage(0);
  }
}","@Override public void onEntityDamage(EntityDamageEvent event){
  if (event.isCancelled())   return;
  if (!(event.getEntity() instanceof Player))   return;
  Player player=(Player)event.getEntity();
  if (ACPlayer.getPlayer(player.getName()).hasPower(Type.FLY) && event.getCause().equals(EntityDamageEvent.DamageCause.FALL)) {
    event.setCancelled(true);
    event.setDamage(0);
    return;
  }
 else   if (ACPlayer.getPlayer(player.getName()).hasPower(Type.GOD)) {
    if (event.getCause().equals(DamageCause.FIRE) || event.getCause().equals(DamageCause.FIRE_TICK))     player.setFireTicks(0);
    event.setCancelled(true);
    event.setDamage(0);
  }
}",0.8796934865900383
93816,"@Override public void onPlayerQuit(PlayerQuitEvent event){
  Player p=event.getPlayer();
  if (InvisibleWorker.getInstance().hasInvisiblePowers(p.getName()))   event.setQuitMessage(null);
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"")) {
    AFKWorker.getInstance().removePlayer(p);
  }
  Utils.updatePlayedTime(p.getName());
}","@Override public void onPlayerQuit(PlayerQuitEvent event){
  Player p=event.getPlayer();
  PlayerManager.getInstance().setOffline(ACPlayer.getPlayer(p.getName()));
  if (InvisibleWorker.getInstance().hasInvisiblePowers(p.getName()))   event.setQuitMessage(null);
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"")) {
    AFKWorker.getInstance().removePlayer(p);
  }
}",0.8421052631578947
93817,"@Override public void onPlayerInteract(PlayerInteractEvent event){
  Player p=event.getPlayer();
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"")) {
    AFKWorker.getInstance().updateTimeStamp(p);
    if (AFKWorker.getInstance().isAfk(p))     AFKWorker.getInstance().setOnline(p);
  }
  if (ACHelper.getInstance().isValueSet(Type.FROZEN,p)) {
    event.setCancelled(true);
    return;
  }
  String playerName=p.getName();
  ItemStack itemInHand=event.getItem();
  if (itemInHand != null && event.getAction() == Action.LEFT_CLICK_BLOCK && itemInHand.getTypeId() == ACHelper.getInstance().getConfInt(""String_Node_Str"") && ACHelper.getInstance().isValueSet(Type.SUPER_BREAKER,playerName)) {
    superBreaker(playerName,event.getClickedBlock());
    return;
  }
  if (((event.getAction() == Action.LEFT_CLICK_BLOCK) || (event.getAction() == Action.LEFT_CLICK_AIR))) {
    if ((ACHelper.getInstance().hasThorPowers(playerName)))     p.getWorld().strikeLightning(p.getTargetBlock(null,600).getLocation());
    Float power=null;
    if ((power=ACHelper.getInstance().getVulcainExplosionPower(playerName)) != null)     p.getWorld().createExplosion(p.getTargetBlock(null,600).getLocation(),power,true);
    power=null;
    if ((power=(Float)ACHelper.getInstance().getValue(Type.FIREBALL,playerName)) != null)     ShootFireball.shoot(p,power);
    tpAtSee(p);
  }
}","@Override public void onPlayerInteract(PlayerInteractEvent event){
  Player p=event.getPlayer();
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"")) {
    AFKWorker.getInstance().updateTimeStamp(p);
    if (AFKWorker.getInstance().isAfk(p))     AFKWorker.getInstance().setOnline(p);
  }
  ACPlayer player=ACPlayer.getPlayer(p.getName());
  if (player.hasPower(Type.FROZEN)) {
    event.setCancelled(true);
    return;
  }
  ItemStack itemInHand=event.getItem();
  if (itemInHand != null && event.getAction() == Action.LEFT_CLICK_BLOCK && itemInHand.getTypeId() == ACHelper.getInstance().getConfInt(""String_Node_Str"") && player.hasPower(Type.SUPER_BREAKER)) {
    superBreaker(player,event.getClickedBlock());
    return;
  }
  if (((event.getAction() == Action.LEFT_CLICK_BLOCK) || (event.getAction() == Action.LEFT_CLICK_AIR))) {
    if (player.hasPower(Type.THOR))     p.getWorld().strikeLightning(p.getTargetBlock(null,600).getLocation());
    Float power=null;
    if ((power=player.getPower(Type.VULCAN).getFloat(0)) != 0)     p.getWorld().createExplosion(p.getTargetBlock(null,600).getLocation(),power,true);
    power=null;
    if ((power=player.getPower(Type.FIREBALL).getFloat(0)) != 0)     ShootFireball.shoot(p,power);
    tpAtSee(player);
  }
}",0.8282138794084186
93818,"/** 
 * Super breaker mode
 * @param playerName
 * @param block
 */
private void superBreaker(String playerName,Block block){
  int typeId=block.getTypeId();
switch (typeId) {
case 64:
    if (block.getData() < 8)     dropItem(block,324);
  break;
case 71:
if (block.getData() < 8) dropItem(block,330);
break;
case 55:
dropItem(block,331);
break;
case 63:
case 68:
dropItem(block,323);
break;
case 83:
dropItem(block,338);
break;
case 59:
case 31:
dropItem(block,295);
break;
case 26:
if (block.getData() < 4) dropItem(block,355);
break;
case 75:
dropItem(block,76);
break;
case 93:
case 94:
dropItem(block,356);
break;
default :
dropItem(block,typeId);
break;
}
if (Utils.logBlock != null) Utils.logBlock.queueBlockBreak(playerName,block.getState());
block.setTypeId(0);
}","/** 
 * Super breaker mode
 * @param player
 * @param block
 */
private void superBreaker(ACPlayer player,Block block){
  int typeId=block.getTypeId();
switch (typeId) {
case 64:
    if (block.getData() < 8)     dropItem(block,324);
  break;
case 71:
if (block.getData() < 8) dropItem(block,330);
break;
case 55:
dropItem(block,331);
break;
case 63:
case 68:
dropItem(block,323);
break;
case 83:
dropItem(block,338);
break;
case 59:
case 31:
dropItem(block,295);
break;
case 26:
if (block.getData() < 4) dropItem(block,355);
break;
case 75:
dropItem(block,76);
break;
case 93:
case 94:
dropItem(block,356);
break;
default :
dropItem(block,typeId);
break;
}
if (Utils.logBlock != null) Utils.logBlock.queueBlockBreak(player.getName(),block.getState());
block.setTypeId(0);
}",0.9728331177231564
93819,"@Override public void onPlayerJoin(PlayerJoinEvent event){
  Player p=event.getPlayer();
  Utils.sParsedLocale(p,""String_Node_Str"");
  Utils.sParsedLocale(p,""String_Node_Str"");
  if (playerRespawnOrJoin(event.getPlayer())) {
    event.setJoinMessage(null);
    Utils.sI18n(event.getPlayer(),""String_Node_Str"");
  }
  if (ACPluginManager.getDataManager().getPlayerInformation(p.getName(),""String_Node_Str"").getBoolean(true)) {
    ACPluginManager.getDataManager().setPlayerInformation(p.getName(),""String_Node_Str"",false);
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     ACHelper.getInstance().spawn(p);
  }
  ACPluginManager.getDataManager().setPlayerInformation(p.getName(),""String_Node_Str"",System.currentTimeMillis());
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !ACHelper.getInstance().isValueSet(Type.TP_REQUEST,p.getName()) && PermissionManager.hasPerm(p,""String_Node_Str""))   ACHelper.getInstance().addValue(Type.TP_REQUEST,p.getName());
}","@Override public void onPlayerJoin(PlayerJoinEvent event){
  Player p=event.getPlayer();
  Utils.sParsedLocale(p,""String_Node_Str"");
  Utils.sParsedLocale(p,""String_Node_Str"");
  PlayerManager.getInstance().setOnline(p.getName());
  if (playerRespawnOrJoin(event.getPlayer())) {
    event.setJoinMessage(null);
    Utils.sI18n(event.getPlayer(),""String_Node_Str"");
  }
  ACPlayer player=ACPlayer.getPlayer(p.getName());
  if (player.getInformation(""String_Node_Str"").getBoolean(true)) {
    player.setInformation(""String_Node_Str"",false);
    if (ACHelper.getInstance().getConfBoolean(""String_Node_Str""))     ACHelper.getInstance().spawn(p);
  }
  player.setInformation(""String_Node_Str"",System.currentTimeMillis());
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !player.hasPower(Type.TP_REQUEST) && PermissionManager.hasPerm(p,""String_Node_Str""))   player.setPower(Type.TP_REQUEST);
}",0.7282321899736148
93820,"private boolean playerRespawnOrJoin(Player newPlayer){
  ACPluginManager.getServer().getScheduler().scheduleSyncDelayedTask(ACHelper.getInstance().getCoreInstance(),new UpdateInvisibleOnJoin(newPlayer),5);
  if (InvisibleWorker.getInstance().hasInvisiblePowers(newPlayer.getName())) {
    ACPluginManager.getServer().getScheduler().scheduleSyncDelayedTask(ACHelper.getInstance().getCoreInstance(),new UpdateInvisible(newPlayer),5);
    return true;
  }
  return false;
}","private boolean playerRespawnOrJoin(Player newPlayer){
  ACPluginManager.getServer().getScheduler().scheduleSyncDelayedTask(ACHelper.getInstance().getCoreInstance(),new UpdateInvisibleOnJoin(newPlayer),15);
  if (InvisibleWorker.getInstance().hasInvisiblePowers(newPlayer.getName())) {
    ACPluginManager.getServer().getScheduler().scheduleSyncDelayedTask(ACHelper.getInstance().getCoreInstance(),new UpdateInvisible(newPlayer),15);
    return true;
  }
  return false;
}",0.9978768577494692
93821,"@Override public void onPlayerTeleport(PlayerTeleportEvent event){
  if (event.isCancelled())   return;
  Location from=event.getFrom();
  Location to=event.getTo();
  String playername=event.getPlayer().getName();
  boolean otherWorld=!from.getWorld().equals(to.getWorld());
  if (otherWorld) {
    ACHelper.getInstance().addLocation(""String_Node_Str"",playername + ""String_Node_Str"",""String_Node_Str"",playername,from);
  }
  if (ACHelper.getInstance().isValueSet(Type.FROZEN,playername)) {
    event.setCancelled(true);
    return;
  }
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !otherWorld && !PermissionManager.hasPerm(event.getPlayer(),""String_Node_Str"",false)) {
    if (ACHelper.getInstance().removeKeyFromValues(event.getPlayer()) || InvisibleWorker.getInstance().hasInvisiblePowers(playername)) {
      InvisibleWorker.getInstance().reappear(event.getPlayer());
      Utils.sI18n(event.getPlayer(),""String_Node_Str"");
    }
  }
 else   playerRespawnOrJoin(event.getPlayer());
}","@Override public void onPlayerTeleport(PlayerTeleportEvent event){
  if (event.isCancelled())   return;
  Location from=event.getFrom();
  Location to=event.getTo();
  String playername=event.getPlayer().getName();
  boolean otherWorld=!from.getWorld().equals(to.getWorld());
  ACPlayer player=ACPlayer.getPlayer(playername);
  if (otherWorld) {
    player.setLastLocation(from);
  }
  if (player.hasPower(Type.FROZEN)) {
    event.setCancelled(true);
    return;
  }
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"") && !otherWorld && !PermissionManager.hasPerm(event.getPlayer(),""String_Node_Str"",false)) {
    player.removeAllSuperPower();
    if (InvisibleWorker.getInstance().hasInvisiblePowers(playername)) {
      InvisibleWorker.getInstance().reappear(event.getPlayer());
      Utils.sI18n(event.getPlayer(),""String_Node_Str"");
    }
  }
  playerRespawnOrJoin(event.getPlayer());
}",0.7811518324607329
93822,"@Override public void onPlayerMove(PlayerMoveEvent event){
  Player p=event.getPlayer();
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"")) {
    AFKWorker.getInstance().updateTimeStamp(p);
    if (AFKWorker.getInstance().isAfk(p))     AFKWorker.getInstance().setOnline(p);
  }
  if (ACHelper.getInstance().isValueSet(Type.FROZEN,p)) {
    ((CraftPlayer)p).getHandle().netServerHandler.teleport(event.getFrom());
    return;
  }
  Float power=(Float)ACHelper.getInstance().getValue(Type.FLY,p.getName());
  if (power != null)   if (p.isSneaking())   p.setVelocity(p.getLocation().getDirection().multiply(power));
 else   if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"")) {
    Vector vel=p.getVelocity();
    vel.add(p.getLocation().getDirection().multiply(ACHelper.getInstance().getConfFloat(""String_Node_Str"")).setY(0));
    if (vel.getY() < ACHelper.getInstance().getConfFloat(""String_Node_Str"")) {
      vel.setY(ACHelper.getInstance().getConfFloat(""String_Node_Str""));
      p.setVelocity(vel);
    }
  }
}","@Override public void onPlayerMove(PlayerMoveEvent event){
  Player p=event.getPlayer();
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"")) {
    AFKWorker.getInstance().updateTimeStamp(p);
    if (AFKWorker.getInstance().isAfk(p))     AFKWorker.getInstance().setOnline(p);
  }
  ACPlayer player=ACPlayer.getPlayer(p.getName());
  if (player.hasPower(Type.FROZEN)) {
    ((CraftPlayer)p).getHandle().netServerHandler.teleport(event.getFrom());
    return;
  }
  Float power=player.getPower(Type.FLY).getFloat(0);
  if (power != 0)   if (p.isSneaking())   p.setVelocity(p.getLocation().getDirection().multiply(power));
 else   if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"")) {
    Vector vel=p.getVelocity();
    vel.add(p.getLocation().getDirection().multiply(ACHelper.getInstance().getConfFloat(""String_Node_Str"")).setY(0));
    if (vel.getY() < ACHelper.getInstance().getConfFloat(""String_Node_Str"")) {
      vel.setY(ACHelper.getInstance().getConfFloat(""String_Node_Str""));
      p.setVelocity(vel);
    }
  }
}",0.9099662975445354
93823,"@Override public void onPlayerChat(PlayerChatEvent event){
  Player p=event.getPlayer();
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"")) {
    AFKWorker.getInstance().updateTimeStamp(p);
    if (AFKWorker.getInstance().isAfk(p))     AFKWorker.getInstance().setOnline(p);
  }
  if (ACHelper.getInstance().isValueSet(Type.MUTED,p)) {
    event.setCancelled(true);
    Utils.sI18n(p,""String_Node_Str"");
  }
}","@Override public void onPlayerChat(PlayerChatEvent event){
  Player p=event.getPlayer();
  ACPlayer player=ACPlayer.getPlayer(p.getName());
  if (ACHelper.getInstance().getConfBoolean(""String_Node_Str"")) {
    AFKWorker.getInstance().updateTimeStamp(p);
    if (AFKWorker.getInstance().isAfk(p))     AFKWorker.getInstance().setOnline(p);
  }
  if (player.hasPower(Type.MUTED)) {
    event.setCancelled(true);
    Utils.sI18n(p,""String_Node_Str"");
  }
}",0.8843069873997709
93824,"@Override public void onPlayerLogin(PlayerLoginEvent event){
  if (ACHelper.getInstance().isValueSet(Type.BANNED,event.getPlayer().getName())) {
    event.disallow(Result.KICK_BANNED,ACHelper.getInstance().getValue(Type.BANNED,event.getPlayer().getName()).toString());
    return;
  }
  if (PermissionManager.hasPerm(event.getPlayer(),""String_Node_Str"",false))   event.allow();
}","@Override public void onPlayerLogin(PlayerLoginEvent event){
  ACPlayer player=ACPlayer.getPlayer(event.getPlayer().getName());
  if (player.hasPower(Type.BANNED)) {
    event.disallow(Result.KICK_BANNED,player.getPower(Type.BANNED).getString());
    return;
  }
  if (PermissionManager.hasPerm(event.getPlayer(),""String_Node_Str"",false))   event.allow();
}",0.6929347826086957
93825,"@Override public void onPlayerPickupItem(PlayerPickupItemEvent event){
  if (event.isCancelled())   return;
  if (ACHelper.getInstance().isValueSet(Type.NO_PICKUP,event.getPlayer()))   event.setCancelled(true);
}","@Override public void onPlayerPickupItem(PlayerPickupItemEvent event){
  if (event.isCancelled())   return;
  ACPlayer player=ACPlayer.getPlayer(event.getPlayer().getName());
  if (player.hasPower(Type.NO_PICKUP))   event.setCancelled(true);
}",0.7120879120879121
93826,"/** 
 * Tp at see mode
 * @param p
 */
private void tpAtSee(Player p){
  if (ACHelper.getInstance().isValueSet(Type.TP_AT_SEE,p))   try {
    String playername=p.getName();
    Block toTp=p.getWorld().getBlockAt(p.getTargetBlock(null,ACHelper.getInstance().getConfInt(""String_Node_Str"")).getLocation().add(0,1,0));
    if (toTp.getTypeId() == 0) {
      Location loc=toTp.getLocation().clone();
      loc.setPitch(p.getLocation().getPitch());
      loc.setYaw(p.getLocation().getYaw());
      ACHelper.getInstance().addLocation(""String_Node_Str"",playername + ""String_Node_Str"",""String_Node_Str"",playername,p.getLocation());
      p.teleport(loc);
    }
  }
 catch (  Exception e) {
  }
}","/** 
 * Tp at see mode
 * @param p
 */
private void tpAtSee(ACPlayer player){
  if (player.hasPower(Type.TP_AT_SEE))   try {
    Player p=player.getHandler();
    String playername=p.getName();
    Block toTp=p.getWorld().getBlockAt(p.getTargetBlock(null,ACHelper.getInstance().getConfInt(""String_Node_Str"")).getLocation().add(0,1,0));
    if (toTp.getTypeId() == 0) {
      Location loc=toTp.getLocation().clone();
      loc.setPitch(p.getLocation().getPitch());
      loc.setYaw(p.getLocation().getYaw());
      ACHelper.getInstance().addLocation(""String_Node_Str"",playername + ""String_Node_Str"",""String_Node_Str"",playername,p.getLocation());
      p.teleport(loc);
    }
  }
 catch (  Exception e) {
  }
}",0.914695340501792
93827,"@Override public void execute(CommandSender sender,String... args){
  if (Utils.isPlayer(sender)) {
    Player p=(Player)sender;
    ACHelper.getInstance().getHomeList(p.getName()).remove(args[0]);
    ACHelper.getInstance().removeLocation(""String_Node_Str"",p.getName() + ""String_Node_Str"" + args[0],""String_Node_Str"" + args[0],p.getName());
    Utils.sI18n(sender,""String_Node_Str"",""String_Node_Str"",args[0]);
  }
}","@Override public void execute(CommandSender sender,String... args){
  if (Utils.isPlayer(sender)) {
    Player p=(Player)sender;
    ACPlayer.getPlayer(p.getName()).removeHome(args[0]);
    Utils.sI18n(sender,""String_Node_Str"",""String_Node_Str"",args[0]);
  }
}",0.5532544378698225
93828,"@Override public void execute(CommandSender sender,String... args){
  if (Utils.isPlayer(sender)) {
    Player player=(Player)sender;
    String home=player.getWorld().getName();
    if (args.length >= 1)     home=args[0];
    Location loc=ACHelper.getInstance().getLocation(""String_Node_Str"",player.getName() + ""String_Node_Str"" + home,""String_Node_Str"" + home,player.getName());
    if (loc == null)     Utils.sI18n(sender,""String_Node_Str"",""String_Node_Str"",home);
 else {
      player.teleport(loc);
      Utils.sI18n(sender,""String_Node_Str"",""String_Node_Str"",home);
    }
  }
}","@Override public void execute(CommandSender sender,String... args){
  if (Utils.isPlayer(sender)) {
    Player player=(Player)sender;
    String home=player.getWorld().getName();
    if (args.length >= 1)     home=args[0];
    Location loc=ACPlayer.getPlayer(player.getName()).getHome(home);
    if (loc == null)     Utils.sI18n(sender,""String_Node_Str"",""String_Node_Str"",home);
 else {
      player.teleport(loc);
      Utils.sI18n(sender,""String_Node_Str"",""String_Node_Str"",home);
    }
  }
}",0.8319405756731661
93829,"@Override public void execute(CommandSender sender,String... args){
  if (Utils.isPlayer(sender)) {
    String msg=""String_Node_Str"";
    Set<String> homes=ACHelper.getInstance().getHomeList(((Player)sender).getName());
    sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ homes.size());
    for (    String name : homes) {
      msg+=name + ""String_Node_Str"";
      if (msg.length() >= 256) {
        sender.sendMessage(msg);
        msg=""String_Node_Str"";
      }
    }
    if (!msg.equals(""String_Node_Str"")) {
      if (msg.endsWith(""String_Node_Str""))       msg=msg.substring(0,msg.lastIndexOf(""String_Node_Str""));
      sender.sendMessage(msg);
    }
  }
}","@Override public void execute(CommandSender sender,String... args){
  if (Utils.isPlayer(sender)) {
    String msg=""String_Node_Str"";
    List<String> homes=ACPlayer.getPlayer(((Player)sender).getName()).getHomeList();
    sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.WHITE+ homes.size());
    for (    String name : homes) {
      msg+=name + ""String_Node_Str"";
      if (msg.length() >= 256) {
        sender.sendMessage(msg);
        msg=""String_Node_Str"";
      }
    }
    if (!msg.equals(""String_Node_Str"")) {
      if (msg.endsWith(""String_Node_Str""))       msg=msg.substring(0,msg.lastIndexOf(""String_Node_Str""));
      sender.sendMessage(msg);
    }
  }
}",0.924872355944566
93830,"/** 
 * Used to execute ACCommands
 * @param sender
 * @param cmd
 * @param args
 * @return
 */
public boolean executeCommand(CommandSender sender,CoreCommand cmd,String[] args){
  try {
    if (cmd.permissionCheck(sender) && cmd.argsCheck(args)) {
      ACCommandContainer container=new ACCommandContainer(sender,cmd,args);
      if (cmd.getCmdName().equals(""String_Node_Str"") || cmd.getCmdName().equals(""String_Node_Str"") || cmd.getCmdName().equals(""String_Node_Str""))       corePlugin.getServer().getScheduler().scheduleSyncDelayedTask(corePlugin,new SyncCommand(container));
 else {
        threads.get(cmdCount).addCommand(container);
        cmdCount++;
        if (cmdCount == MAX_THREADS)         cmdCount=0;
      }
      if (!cmd.getCmdName().equals(""String_Node_Str"")) {
        if (Utils.isPlayer(sender,false))         ACHelper.getInstance().addValue(Type.REPEAT_CMD,(Player)sender,container);
 else         ACHelper.getInstance().addValue(Type.REPEAT_CMD,""String_Node_Str"",container);
      }
      return true;
    }
 else     return false;
  }
 catch (  Throwable t) {
    Logger.getLogger(""String_Node_Str"").severe(""String_Node_Str"" + cmd.getCmdName() + ""String_Node_Str"");
    sender.sendMessage(""String_Node_Str"" + ChatColor.RED + ""String_Node_Str""+ cmd.getCmdName()+ ""String_Node_Str"");
    t.printStackTrace();
    if (cmdCount == 0)     threads.get(4).start();
 else     threads.get(cmdCount - 1).start();
    return false;
  }
}","/** 
 * Used to execute ACCommands
 * @param sender
 * @param cmd
 * @param args
 * @return
 */
public boolean executeCommand(CommandSender sender,CoreCommand cmd,String[] args){
  try {
    if (cmd.permissionCheck(sender) && cmd.argsCheck(args)) {
      ACCommandContainer container=new ACCommandContainer(sender,cmd,args);
      if (cmd.getCmdName().equals(""String_Node_Str"") || cmd.getCmdName().equals(""String_Node_Str"") || cmd.getCmdName().equals(""String_Node_Str""))       corePlugin.getServer().getScheduler().scheduleSyncDelayedTask(corePlugin,new SyncCommand(container));
 else {
        threads.get(cmdCount).addCommand(container);
        cmdCount++;
        if (cmdCount == MAX_THREADS)         cmdCount=0;
      }
      if (!cmd.getCmdName().equals(""String_Node_Str"")) {
        if (Utils.isPlayer(sender,false))         ACPlayer.getPlayer(((Player)sender).getName()).setLastCmd(container);
 else         ACPlayer.getPlayer(""String_Node_Str"").setLastCmd(container);
      }
      return true;
    }
 else     return false;
  }
 catch (  Throwable t) {
    Logger.getLogger(""String_Node_Str"").severe(""String_Node_Str"" + cmd.getCmdName() + ""String_Node_Str"");
    sender.sendMessage(""String_Node_Str"" + ChatColor.RED + ""String_Node_Str""+ cmd.getCmdName()+ ""String_Node_Str"");
    t.printStackTrace();
    if (cmdCount == 0)     threads.get(4).start();
 else     threads.get(cmdCount - 1).start();
    return false;
  }
}",0.9083333333333332
93831,"@Override public void execute(CommandSender sender,CommandArgs args){
  Object cmd;
  if (Utils.isPlayer(sender,false))   cmd=ACHelper.getInstance().getValue(Type.REPEAT_CMD,(Player)sender);
 else   cmd=ACHelper.getInstance().getValue(Type.REPEAT_CMD,""String_Node_Str"");
  if (cmd == null) {
    Utils.sI18n(sender,""String_Node_Str"");
    return;
  }
  Utils.sI18n(sender,""String_Node_Str"");
  ((ACCommandContainer)cmd).execute();
}","@Override public void execute(CommandSender sender,CommandArgs args){
  try {
    if (Utils.isPlayer(sender,false))     ACPlayer.getPlayer(((Player)sender).getName()).executeLastCmd();
 else     ACPlayer.getPlayer(""String_Node_Str"").executeLastCmd();
    Utils.sI18n(sender,""String_Node_Str"");
  }
 catch (  NullPointerException e) {
    Utils.sI18n(sender,""String_Node_Str"");
  }
}",0.5085995085995086
93832,"@Override public void execute(CommandSender sender,CommandArgs args){
  if (Utils.isPlayer(sender)) {
    Player player=(Player)sender;
    Location loc=ACHelper.getInstance().getLocation(""String_Node_Str"",player.getName() + ""String_Node_Str"",""String_Node_Str"",player.getName());
    if (loc == null) {
      Utils.sI18n(sender,""String_Node_Str"");
      return;
    }
    player.teleport(loc);
    Utils.sI18n(sender,""String_Node_Str"");
    ACHelper.getInstance().removeLocation(""String_Node_Str"",player.getName() + ""String_Node_Str"",""String_Node_Str"",player.getName());
  }
}","@Override public void execute(CommandSender sender,CommandArgs args){
  if (Utils.isPlayer(sender)) {
    Player player=(Player)sender;
    ACPlayer p=ACPlayer.getPlayer(player.getName());
    Location loc=p.getLastLocation();
    if (loc == null) {
      Utils.sI18n(sender,""String_Node_Str"");
      return;
    }
    player.teleport(loc);
    Utils.sI18n(sender,""String_Node_Str"");
    p.setLastLocation(null);
  }
}",0.4346076458752515
93833,"private Location getLocation(String location) throws WorldNotLoaded {
  ExtendedNode node=datas.getNode(location);
  if (node.getProperty(""String_Node_Str"") == null) {
    Location loc=parseLocation(location);
    if (loc != null)     setHome(location,loc);
    return loc;
  }
 else {
    World w=ACPluginManager.getServer().getWorld(node.getString(""String_Node_Str""));
    if (w != null)     return new Location(w,node.getDouble(""String_Node_Str"",0),node.getDouble(""String_Node_Str"",0),node.getDouble(""String_Node_Str"",0),Float.parseFloat(node.getString(""String_Node_Str"")),Float.parseFloat(node.getString(""String_Node_Str"")));
 else     throw new WorldNotLoaded(node.getString(""String_Node_Str""));
  }
}","private Location getLocation(String location) throws WorldNotLoaded {
  ExtendedNode node=datas.getNode(location);
  if (node == null)   return null;
  if (node.getProperty(""String_Node_Str"") == null) {
    Location loc=parseLocation(location);
    if (loc != null)     setHome(location,loc);
    return loc;
  }
 else {
    World w=ACPluginManager.getServer().getWorld(node.getString(""String_Node_Str""));
    if (w != null)     return new Location(w,node.getDouble(""String_Node_Str"",0),node.getDouble(""String_Node_Str"",0),node.getDouble(""String_Node_Str"",0),Float.parseFloat(node.getString(""String_Node_Str"")),Float.parseFloat(node.getString(""String_Node_Str"")));
 else     throw new WorldNotLoaded(node.getString(""String_Node_Str""));
  }
}",0.9758120248790602
93834,"@Override public void removeAllSuperPower(){
  for (  String power : powers.getKeys()) {
    if (Type.matchType(power).getCategory().equals(Category.SUPER_POWER))     powers.removeProperty(power);
  }
  writeFile();
}","@Override public void removeAllSuperPower(){
  for (  String power : powers.getKeys()) {
    Type matched=Type.matchType(power);
    if (matched != null && matched.getCategory().equals(Category.SUPER_POWER))     powers.removeProperty(power);
  }
  writeFile();
}",0.8183716075156576
93835,"public void setLastLocation(Location loc){
  ExtendedNode lastLoc=datas.createNode(""String_Node_Str"");
  lastLoc.setProperty(""String_Node_Str"",loc.getWorld().getName());
  lastLoc.setProperty(""String_Node_Str"",loc.getX());
  lastLoc.setProperty(""String_Node_Str"",loc.getY());
  lastLoc.setProperty(""String_Node_Str"",loc.getZ());
  lastLoc.setProperty(""String_Node_Str"",loc.getYaw());
  lastLoc.setProperty(""String_Node_Str"",loc.getPitch());
  writeFile();
}","public void setLastLocation(Location loc){
  if (loc == null)   datas.removeProperty(""String_Node_Str"");
 else {
    ExtendedNode lastLoc=datas.createNode(""String_Node_Str"");
    lastLoc.setProperty(""String_Node_Str"",loc.getWorld().getName());
    lastLoc.setProperty(""String_Node_Str"",loc.getX());
    lastLoc.setProperty(""String_Node_Str"",loc.getY());
    lastLoc.setProperty(""String_Node_Str"",loc.getZ());
    lastLoc.setProperty(""String_Node_Str"",loc.getYaw());
    lastLoc.setProperty(""String_Node_Str"",loc.getPitch());
  }
  writeFile();
}",0.9121756487025948
93836,"/** 
 * Load all the kits
 * @return
 */
public Map<String,List<MaterialContainer>> loadKits(){
  Map<String,List<MaterialContainer>> result=new HashMap<String,List<MaterialContainer>>();
  List<MaterialContainer> items=new ArrayList<MaterialContainer>();
  Configuration conf=getYml(""String_Node_Str"");
  if (conf.getKeys(""String_Node_Str"") != null) {
    ConfigurationNode nodes=conf.getNode(""String_Node_Str"");
    for (    String key : nodes.getKeys()) {
      ConfigurationNode itemsNode=nodes.getNode(key);
      for (      String item : itemsNode.getKeys()) {
        MaterialContainer m=Utils.checkMaterial(item);
        m.setAmount(itemsNode.getInt(item,1));
        if (!m.isNull())         items.add(m);
      }
      result.put(key,items);
      items.clear();
    }
    System.out.print(""String_Node_Str"" + items.size() + ""String_Node_Str"");
  }
  return result;
}","/** 
 * Load all the kits
 * @return
 */
public Map<String,List<MaterialContainer>> loadKits(){
  Map<String,List<MaterialContainer>> result=new HashMap<String,List<MaterialContainer>>();
  List<MaterialContainer> items=new ArrayList<MaterialContainer>();
  Configuration conf=getYml(""String_Node_Str"");
  if (conf.getKeys(""String_Node_Str"") != null) {
    ConfigurationNode nodes=conf.getNode(""String_Node_Str"");
    for (    String key : nodes.getKeys()) {
      ConfigurationNode itemsNode=nodes.getNode(key);
      for (      String item : itemsNode.getKeys()) {
        MaterialContainer m=Utils.checkMaterial(item);
        m.setAmount(itemsNode.getInt(item,1));
        if (!m.isNull())         items.add(m);
      }
      result.put(key,new ArrayList<MaterialContainer>(items));
      items.clear();
    }
    System.out.print(""String_Node_Str"" + items.size() + ""String_Node_Str"");
  }
  return result;
}",0.9754189944134078
93837,"@Override public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  if (split.length == 0)   return;
  String cmdName=split[0].substring(1).toLowerCase();
  ACCommands cmd=CommandManager.getInstance().getCommand(cmdName);
  if (cmd != null) {
    event.setCancelled(true);
    CommandManager.getInstance().executeCommand(event.getPlayer(),cmd,Utils.Arrays_copyOfRange(split,1,split.length));
    event.setMessage(""String_Node_Str"");
  }
}","@Override public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  if (split.length == 0)   return;
  String cmdName=split[0].substring(1).toLowerCase();
  ACCommands cmd=CommandManager.getInstance().getCommand(cmdName);
  if (cmd != null) {
    event.setCancelled(true);
    System.out.print(""String_Node_Str"" + cmdName + ""String_Node_Str"");
    CommandManager.getInstance().executeCommand(event.getPlayer(),cmd,Utils.Arrays_copyOfRange(split,1,split.length));
    event.setMessage(""String_Node_Str"");
  }
}",0.9359783588818756
93838,"/** 
 * Register command
 * @param clazz
 */
public void registerCommand(Class<?> clazz){
  ACCommands command=null;
  try {
    command=(ACCommands)clazz.newInstance();
    command.initializeCommand(plugin);
    for (    String alias : command.getPluginCommand().getAliases())     if (disabledCommands.contains(alias))     throw new CommandDisabled(""String_Node_Str"" + command.getCmdName() + ""String_Node_Str"");
    command.registerBukkitPerm();
    command.getPluginCommand().setExecutor(this);
    commands.put(command.getPluginCommand(),command);
  }
 catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  CommandDisabled e) {
    unRegisterBukkitCommand(command.getCmdName());
    Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + e.getMessage());
  }
catch (  CommandAlreadyExist e) {
    for (    String alias : pluginCommands.get(command.getCmdName()).getAliases())     if (prioritizedCommands.contains(alias)) {
      commandReplacer.put(alias,command);
      command.registerBukkitPerm();
      command.getPluginCommand().setExecutor(this);
      commands.put(command.getPluginCommand(),command);
      return;
    }
    unRegisterBukkitCommand(command.getCmdName());
    Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + e.getMessage());
  }
catch (  CommandException e) {
    Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * Register command
 * @param clazz
 */
public void registerCommand(Class<?> clazz){
  ACCommands command=null;
  try {
    command=(ACCommands)clazz.newInstance();
    command.initializeCommand(plugin);
    for (    String alias : pluginCommands.get(command.getCmdName()).getAliases())     if (disabledCommands.contains(alias))     throw new CommandDisabled(""String_Node_Str"" + command.getCmdName() + ""String_Node_Str"");
 else     if (prioritizedCommands.contains(alias))     commandReplacer.put(alias,command);
    command.registerBukkitPerm();
    command.getPluginCommand().setExecutor(this);
    commands.put(command.getPluginCommand(),command);
  }
 catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  CommandDisabled e) {
    unRegisterBukkitCommand(command.getCmdName());
    Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + e.getMessage());
  }
catch (  CommandAlreadyExist e) {
    for (    String alias : pluginCommands.get(command.getCmdName()).getAliases())     if (prioritizedCommands.contains(alias)) {
      commandReplacer.put(alias,command);
      command.registerBukkitPerm();
      command.getPluginCommand().setExecutor(this);
      commands.put(command.getPluginCommand(),command);
      return;
    }
    unRegisterBukkitCommand(command.getCmdName());
    Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + e.getMessage());
  }
catch (  CommandException e) {
    Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"" + e.getMessage());
  }
}",0.9494290375203916
93839,"@Override public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  if (split.length == 0)   return;
  String cmdName=split[0].toLowerCase();
  ACCommands cmd=CommandManager.getInstance().getCommand(cmdName);
  if (cmd != null) {
    event.setCancelled(true);
    CommandManager.getInstance().executeCommand(event.getPlayer(),cmd,Utils.Arrays_copyOfRange(split,1,split.length));
  }
}","@Override public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  if (split.length == 0)   return;
  String cmdName=split[0].substring(1).toLowerCase();
  ACCommands cmd=CommandManager.getInstance().getCommand(cmdName);
  if (cmd != null) {
    event.setCancelled(true);
    CommandManager.getInstance().executeCommand(event.getPlayer(),cmd,Utils.Arrays_copyOfRange(split,1,split.length));
  }
}",0.9862142099681868
93840,"@Override public void onSignChange(SignChangeEvent event){
  if (event.isCancelled())   return;
  if (!(Boolean)ACHelper.getInstance().getConfValue(""String_Node_Str""))   return;
  String parsed=null;
  for (  String line : event.getLines())   if (line != null && !line.isEmpty()) {
    parsed=Utils.colorParser(line);
    if (parsed != null)     line=parsed;
  }
}","@Override public void onSignChange(SignChangeEvent event){
  if (event.isCancelled())   return;
  if (!(Boolean)ACHelper.getInstance().getConfValue(""String_Node_Str""))   return;
  String parsed=null;
  String line;
  for (int i=0; i < 4; i++) {
    line=event.getLine(i);
    if (line != null && !line.isEmpty()) {
      parsed=Utils.colorParser(line);
      if (parsed != null)       event.setLine(i,parsed);
    }
  }
}",0.8305732484076433
93841,"public void registerBukkitPerm(){
  AdminCmd.getBukkitServer().getPluginManager().addPermission(new Permission(permName,children));
}","public void registerBukkitPerm(){
  AdminCmd.getBukkitServer().getPluginManager().addPermission(new Permission(permName,PermissionDefault.OP,children));
}",0.926829268292683
93842,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(CommandSender sender,String... args){
  Player buddy=sender.getServer().getPlayer(args[0]);
  if (buddy != null) {
    String senderPm=""String_Node_Str"";
    String msgPrefix=""String_Node_Str"" + ChatColor.RED + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"";
    String msg=""String_Node_Str"";
    String senderName=""String_Node_Str"";
    if (Utils.isPlayer(sender,false)) {
      Player pSender=(Player)sender;
      senderName=pSender.getName();
      if (PermissionManager.getPermission() != null) {
        String name=pSender.getName();
        String prefixstring;
        String world=""String_Node_Str"";
        world=pSender.getWorld().getName();
        try {
          prefixstring=PermissionManager.getPermission().safeGetUser(world,name).getPrefix();
        }
 catch (        Exception e) {
          String group=PermissionManager.getPermission().getGroup(world,name);
          prefixstring=PermissionManager.getPermission().getGroupPrefix(world,group);
        }
catch (        NoSuchMethodError e) {
          String group=PermissionManager.getPermission().getGroup(world,name);
          prefixstring=PermissionManager.getPermission().getGroupPrefix(world,group);
        }
        if (prefixstring != null && prefixstring.length() > 1) {
          String result=Utils.colorParser(prefixstring);
          if (result == null)           senderPm=prefixstring + name + ChatColor.WHITE+ ""String_Node_Str"";
 else           senderPm=result + name + ChatColor.WHITE+ ""String_Node_Str"";
        }
 else         senderPm=pSender.getDisplayName() + ""String_Node_Str"";
      }
 else       senderPm=pSender.getDisplayName() + ""String_Node_Str"";
    }
 else     senderPm=""String_Node_Str"" + ""String_Node_Str"";
    for (int i=1; i < args.length; ++i)     msg+=args[i] + ""String_Node_Str"";
    msg=msg.trim();
    String parsed=Utils.colorParser(msg);
    if (parsed == null)     parsed=msg;
    buddy.sendMessage(msgPrefix + senderPm + parsed);
    sender.sendMessage(msgPrefix + senderPm + parsed);
    for (    Player p : ACHelper.getInstance().getAllPowerUserOf(""String_Node_Str""))     if (!p.getName().equals(senderName) && !p.getName().equals(buddy.getName()))     p.sendMessage(""String_Node_Str"" + ChatColor.GREEN + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ senderName+ ""String_Node_Str""+ buddy.getName()+ ""String_Node_Str""+ parsed);
  }
 else   sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ args[0]+ ChatColor.RED+ ""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(CommandSender sender,String... args){
  Player buddy=sender.getServer().getPlayer(args[0]);
  if (buddy != null) {
    String senderPm=""String_Node_Str"";
    String msgPrefix=""String_Node_Str"" + ChatColor.RED + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"";
    String msg=""String_Node_Str"";
    String senderName=""String_Node_Str"";
    if (Utils.isPlayer(sender,false)) {
      Player pSender=(Player)sender;
      senderName=pSender.getName();
      if (PermissionManager.getPermission() != null) {
        String name=pSender.getName();
        String prefixstring;
        String world=""String_Node_Str"";
        world=pSender.getWorld().getName();
        try {
          prefixstring=PermissionManager.getPermission().safeGetUser(world,name).getPrefix();
        }
 catch (        Exception e) {
          String group=PermissionManager.getPermission().getGroup(world,name);
          prefixstring=PermissionManager.getPermission().getGroupPrefix(world,group);
        }
catch (        NoSuchMethodError e) {
          String group=PermissionManager.getPermission().getGroup(world,name);
          prefixstring=PermissionManager.getPermission().getGroupPrefix(world,group);
        }
        if (prefixstring != null && prefixstring.length() > 1) {
          String result=Utils.colorParser(prefixstring);
          if (result == null)           senderPm=prefixstring + name + ChatColor.WHITE+ ""String_Node_Str"";
 else           senderPm=result + name + ChatColor.WHITE+ ""String_Node_Str"";
        }
 else         senderPm=pSender.getDisplayName() + ""String_Node_Str"";
      }
 else       senderPm=pSender.getDisplayName() + ""String_Node_Str"";
    }
 else     senderPm=""String_Node_Str"" + ""String_Node_Str"";
    for (int i=1; i < args.length; ++i)     msg+=args[i] + ""String_Node_Str"";
    msg=msg.trim();
    String parsed=Utils.colorParser(msg);
    if (parsed == null)     parsed=msg;
    buddy.sendMessage(msgPrefix + senderPm + parsed);
    sender.sendMessage(msgPrefix + senderPm + parsed);
    for (    Player p : ACHelper.getInstance().getAllPowerUserOf(Type.SPYMSG))     if (!p.getName().equals(senderName) && !p.getName().equals(buddy.getName()))     p.sendMessage(""String_Node_Str"" + ChatColor.GREEN + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ senderName+ ""String_Node_Str""+ buddy.getName()+ ""String_Node_Str""+ parsed);
  }
 else   sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ args[0]+ ChatColor.RED+ ""String_Node_Str"");
}",0.9945248337895972
93843,"public List<Player> getAllPowerUserOf(String power){
  List<Player> players=new ArrayList<Player>();
  if (storedTypeValues.containsKey(power))   for (  String player : storedTypeValues.get(power).keySet())   players.add(pluginInstance.getServer().getPlayer(player));
  return players;
}","public List<Player> getAllPowerUserOf(Type power){
  List<Player> players=new ArrayList<Player>();
  if (storedTypeValues.containsKey(power))   for (  String player : storedTypeValues.get(power).keySet())   players.add(pluginInstance.getServer().getPlayer(player));
  return players;
}",0.1888111888111888
93844,"/** 
 * @param p
 * @return if the player is afk
 */
public boolean isAfk(Player p){
  return playersAfk.containsKey(p);
}","/** 
 * @param p
 * @return if the player is afk
 */
public boolean isAfk(Player p){
  return ACHelper.getInstance().isValueSet(Type.AFK,p);
}",0.8181818181818182
93845,"/** 
 * Set the player Online
 * @param p
 */
public void setOnline(Player p){
  if (!InvisibleWorker.getInstance().hasInvisiblePowers(p.getName()))   p.getServer().broadcastMessage(Utils.I18n(""String_Node_Str"",""String_Node_Str"",p.getName()));
  p.setDisplayName(playersAfk.get(p));
  p.setSleepingIgnored(false);
  playersAfk.remove(p);
}","/** 
 * Set the player Online
 * @param p
 */
public void setOnline(Player p){
  if (!InvisibleWorker.getInstance().hasInvisiblePowers(p.getName()))   p.getServer().broadcastMessage(Utils.I18n(""String_Node_Str"",""String_Node_Str"",p.getName()));
  p.setDisplayName((String)ACHelper.getInstance().getValue(Type.AFK,p));
  p.setSleepingIgnored(false);
  ACHelper.getInstance().removeValue(Type.AFK,p);
}",0.7425474254742548
93846,"/** 
 * Set the player AFK
 * @param p
 */
private void setAfk(Player p){
  if (!InvisibleWorker.getInstance().hasInvisiblePowers(p.getName()))   p.getServer().broadcastMessage(Utils.I18n(""String_Node_Str"",""String_Node_Str"",p.getName()));
  playersAfk.put(p,p.getDisplayName());
  p.setDisplayName(Utils.I18n(""String_Node_Str"") + p.getDisplayName());
  p.setSleepingIgnored(true);
}","/** 
 * Set the player AFK
 * @param p
 */
private void setAfk(Player p){
  if (!InvisibleWorker.getInstance().hasInvisiblePowers(p.getName()))   p.getServer().broadcastMessage(Utils.I18n(""String_Node_Str"",""String_Node_Str"",p.getName()));
  ACHelper.getInstance().addValue(Type.AFK,p,p.getDisplayName());
  p.setDisplayName(Utils.I18n(""String_Node_Str"") + p.getDisplayName());
  p.setSleepingIgnored(true);
}",0.9341772151898734
93847,"@Override public void run(){
  long now=System.currentTimeMillis();
  for (  Player p : playersAfk.keySet()) {
    if (now - playerTimeStamp.get(p) >= kickTime) {
      p.kickPlayer(Utils.I18n(""String_Node_Str""));
      playersAfk.remove(p);
      playerTimeStamp.remove(p);
    }
  }
}","@Override public void run(){
  long now=System.currentTimeMillis();
  for (  Player p : ACHelper.getInstance().getAllPowerUserOf(Type.AFK)) {
    if (now - playerTimeStamp.get(p) >= kickTime) {
      p.kickPlayer(Utils.I18n(""String_Node_Str""));
      removePlayer(p);
    }
  }
}",0.8
93848,"/** 
 * Remove the player from the check
 * @param player
 */
public void removePlayer(Player player){
  playerTimeStamp.remove(player);
  playersAfk.remove(player);
}","/** 
 * Remove the player from the check
 * @param player
 */
public void removePlayer(Player player){
  playerTimeStamp.remove(player);
  ACHelper.getInstance().removeValue(Type.AFK,player);
}",0.8944444444444445
93849,"/** 
 * Set the player Online
 * @param p
 */
public void setOnline(Player p){
  p.getServer().broadcastMessage(Utils.I18n(""String_Node_Str"",""String_Node_Str"",p.getName()));
  p.setDisplayName(playersAfk.get(p));
  p.setSleepingIgnored(false);
  playersAfk.remove(p);
  playerTimeStamp.remove(p);
}","/** 
 * Set the player Online
 * @param p
 */
public void setOnline(Player p){
  p.getServer().broadcastMessage(Utils.I18n(""String_Node_Str"",""String_Node_Str"",p.getName()));
  p.setDisplayName(playersAfk.get(p));
  p.setSleepingIgnored(false);
  playersAfk.remove(p);
}",0.948853615520282
93850,"/** 
 * {@inheritDoc}
 */
@Override public Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {
  if (!shouldInstrument(name)) {
    return KernelBundleClassLoader.this.loadClass(name,resolve);
  }
  Class<?> cls=KernelBundleClassLoader.this.findLoadedClass(name);
  if (cls == null) {
    cls=this.loadedClasses.get(name);
    if (cls == null) {
      cls=findClassInternal(name,true);
      if (cls == null) {
        cls=KernelBundleClassLoader.this.loadClass(name,resolve);
      }
    }
  }
  if (cls == null) {
    throw new ClassNotFoundException(name);
  }
  if (resolve) {
    resolveClass(cls);
  }
  return this.loadedClasses.putIfAbsent(name,cls);
}","/** 
 * {@inheritDoc}
 */
@Override public Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {
  if (!shouldInstrument(name)) {
    return KernelBundleClassLoader.this.loadClass(name,resolve);
  }
  Class<?> cls=KernelBundleClassLoader.this.findLoadedClass(name);
  if (cls == null) {
    cls=this.loadedClasses.get(name);
    if (cls == null) {
      cls=findClassInternal(name,true);
      if (cls == null) {
        cls=KernelBundleClassLoader.this.loadClass(name,resolve);
      }
    }
  }
  if (cls == null) {
    throw new ClassNotFoundException(name);
  }
  if (resolve) {
    resolveClass(cls);
  }
  this.loadedClasses.putIfAbsent(name,cls);
  return cls;
}",0.9833694866232828
93851,"@Before public void setUp() throws Exception {
  BUNDLE_BRIDGE=new BundleBridge(new StubHashGenerator());
}","@BeforeClass public static void setUp() throws Exception {
  BUNDLE_BRIDGE=new BundleBridge(new StubHashGenerator());
}",0.9469026548672568
93852,"private BundleManifest loadManifest(ArtifactFS compositeArtifactFS) throws DeploymentException {
  ArtifactFSEntry entry=compositeArtifactFS.getEntry(JarFile.MANIFEST_NAME);
  Reader reader=null;
  try {
    reader=new InputStreamReader(entry.getInputStream());
    return BundleManifestFactory.createBundleManifest(reader);
  }
 catch (  IOException ex) {
    throw new DeploymentException(""String_Node_Str"" + compositeArtifactFS + ""String_Node_Str"",ex);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
}","private BundleManifest loadManifest(ArtifactFS compositeArtifactFS) throws DeploymentException {
  ArtifactFSEntry entry=compositeArtifactFS.getEntry(JarFile.MANIFEST_NAME);
  Reader reader=null;
  try {
    reader=new InputStreamReader(entry.getInputStream(),UTF_8);
    return BundleManifestFactory.createBundleManifest(reader);
  }
 catch (  IOException ex) {
    throw new DeploymentException(""String_Node_Str"" + compositeArtifactFS + ""String_Node_Str"",ex);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
}",0.9941520467836256
93853,"private void preparePageContext(final Map<String,String> pageContext,final String rawRequestPath){
  String viewName=rawRequestPath;
  if ('/' == viewName.charAt(0)) {
    viewName=viewName.substring(1);
  }
  List<String> menuItems=new ArrayList<String>();
  this.addIfMbeanPresent(menuItems,""String_Node_Str"",""String_Node_Str"");
  this.addIfMbeanPresent(menuItems,""String_Node_Str"",""String_Node_Str"");
  this.addIfMbeanPresent(menuItems,""String_Node_Str"",""String_Node_Str"");
  this.addIfMbeanPresent(menuItems,""String_Node_Str"",""String_Node_Str"");
  this.addIfMbeanPresent(menuItems,""String_Node_Str"",""String_Node_Str"");
  this.addIfMbeanPresent(menuItems,""String_Node_Str"",""String_Node_Str"");
  String stringArray=Arrays.toString(menuItems.toArray(new String[menuItems.size()]));
  pageContext.put(""String_Node_Str"",stringArray.substring(1,stringArray.length() - 1));
  pageContext.put(""String_Node_Str"",viewName);
  ServletContext servletContext=getServletContext();
  try {
    if (servletContext.getContextPath().isEmpty()) {
      pageContext.put(""String_Node_Str"",Activator.contextPath);
      pageContext.put(""String_Node_Str"",Activator.APPLICATION_NAME);
    }
 else {
      pageContext.put(""String_Node_Str"",servletContext.getContextPath());
      pageContext.put(""String_Node_Str"",servletContext.getServletContextName());
    }
  }
 catch (  UnsupportedOperationException e) {
    pageContext.put(""String_Node_Str"",Activator.contextPath);
    pageContext.put(""String_Node_Str"",Activator.APPLICATION_NAME);
  }
  pageContext.put(""String_Node_Str"",servletContext.getServerInfo());
  pageContext.put(""String_Node_Str"",String.format(""String_Node_Str"",System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str"")));
  pageContext.put(""String_Node_Str"",String.format(""String_Node_Str"",System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str"")));
}","private void preparePageContext(final Map<String,String> pageContext,final String rawRequestPath){
  String viewName=rawRequestPath;
  if ('/' == viewName.charAt(0)) {
    viewName=viewName.substring(1);
  }
  List<String> menuItems=new ArrayList<String>();
  this.addIfMbeanPresent(menuItems,""String_Node_Str"",""String_Node_Str"");
  this.addIfMbeanPresent(menuItems,""String_Node_Str"",""String_Node_Str"");
  this.addIfMbeanPresent(menuItems,""String_Node_Str"",""String_Node_Str"");
  this.addIfMbeanPresent(menuItems,""String_Node_Str"",""String_Node_Str"");
  this.addIfMbeanPresent(menuItems,""String_Node_Str"",""String_Node_Str"");
  this.addIfMbeanPresent(menuItems,""String_Node_Str"",""String_Node_Str"");
  String stringArray=Arrays.toString(menuItems.toArray(new String[menuItems.size()]));
  pageContext.put(""String_Node_Str"",stringArray.substring(1,stringArray.length() - 1));
  pageContext.put(""String_Node_Str"",viewName);
  ServletContext servletContext=getServletContext();
  try {
    if (servletContext.getContextPath().isEmpty()) {
      pageContext.put(""String_Node_Str"",Activator.contextPath);
      pageContext.put(""String_Node_Str"",Activator.APPLICATION_NAME);
    }
 else {
      pageContext.put(""String_Node_Str"",servletContext.getContextPath());
      pageContext.put(""String_Node_Str"",servletContext.getServletContextName());
    }
  }
 catch (  UnsupportedOperationException e) {
    pageContext.put(""String_Node_Str"",Activator.contextPath);
    pageContext.put(""String_Node_Str"",Activator.APPLICATION_NAME);
  }
  pageContext.put(""String_Node_Str"",servletContext.getServerInfo());
  pageContext.put(""String_Node_Str"",String.format(""String_Node_Str"",System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str"")));
  pageContext.put(""String_Node_Str"",String.format(""String_Node_Str"",System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str"")));
}",0.9905894006934126
93854,"private static ManifestContents getManifestContents(File file) throws IOException {
  ManifestParser manifestParser=new RecoveringManifestParser();
  Reader reader=null;
  try {
    reader=new FileReader(file);
    return manifestParser.parse(reader);
  }
  finally {
    if (reader != null) {
      reader.close();
    }
  }
}","private static ManifestContents getManifestContents(File file) throws IOException {
  ManifestParser manifestParser=new RecoveringManifestParser();
  try (Reader reader=new InputStreamReader(new FileInputStream(file),UTF_8)){
    return manifestParser.parse(reader);
  }
 }",0.58
93855,"private String readRedployData(){
  StringBuffer redeployData=new StringBuffer(INITIAL_REDEPLOY_DATA_SIZE);
  Reader redeployDataReader;
  try {
    redeployDataReader=new BufferedReader(new FileReader(redeployDataset.toFile()));
    try {
      char[] chars=new char[INITIAL_REDEPLOY_DATA_SIZE];
      int numRead;
      while (-1 != (numRead=redeployDataReader.read(chars))) {
        redeployData.append(String.valueOf(chars,0,numRead));
      }
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
 finally {
      try {
        redeployDataReader.close();
      }
 catch (      IOException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
  }
 catch (  FileNotFoundException e) {
  }
  return redeployData.toString();
}","private String readRedployData(){
  StringBuffer redeployData=new StringBuffer(INITIAL_REDEPLOY_DATA_SIZE);
  Reader redeployDataReader=null;
  try {
    redeployDataReader=new BufferedReader(new InputStreamReader(new FileInputStream(redeployDataset.toFile()),UTF_8));
    try {
      char[] chars=new char[INITIAL_REDEPLOY_DATA_SIZE];
      int numRead;
      while (-1 != (numRead=redeployDataReader.read(chars))) {
        redeployData.append(String.valueOf(chars,0,numRead));
      }
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
 finally {
      try {
        redeployDataReader.close();
      }
 catch (      IOException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
  }
 catch (  FileNotFoundException e) {
  }
  return redeployData.toString();
}",0.967536600891152
93856,"/** 
 * Write the given set of URIs to the redeploy dataset. To avoid corruption if a crash occurs, write to a redeploy compression file and then switch this for the redeploy dataset.
 * @param redeploySet the URIs to be written
 */
private void rewriteRedeploySet(Map<URI,DeploymentOptions> redeploySet){
  this.redeployCompressionDataset.delete();
  Writer redeployDataWriter;
  try {
    redeployDataWriter=new BufferedWriter(new FileWriter(this.redeployCompressionDataset.toFile()));
    for (    Entry<URI,DeploymentOptions> redeployEntry : redeploySet.entrySet()) {
      recordUriCommand(redeployDataWriter,redeployEntry.getKey(),getCommandString(redeployEntry.getValue()));
    }
    redeployDataWriter.close();
  }
 catch (  IOException e) {
    logger.warn(""String_Node_Str"",e);
  }
  this.redeployDataset.delete();
  this.redeployCompressionDataset.moveTo(this.redeployDataset);
}","/** 
 * Write the given set of URIs to the redeploy dataset. To avoid corruption if a crash occurs, write to a redeploy compression file and then switch this for the redeploy dataset.
 * @param redeploySet the URIs to be written
 */
private void rewriteRedeploySet(Map<URI,DeploymentOptions> redeploySet){
  this.redeployCompressionDataset.delete();
  try (Writer redeployDataWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(this.redeployCompressionDataset.toFile()),UTF_8))){
    for (    Entry<URI,DeploymentOptions> redeployEntry : redeploySet.entrySet()) {
      recordUriCommand(redeployDataWriter,redeployEntry.getKey(),getCommandString(redeployEntry.getValue()));
    }
    redeployDataWriter.close();
  }
 catch (  IOException e) {
    logger.warn(""String_Node_Str"",e);
  }
  this.redeployDataset.delete();
  this.redeployCompressionDataset.moveTo(this.redeployDataset);
}",0.9497767857142856
93857,"private static Reader manifestReaderFromFile(File file) throws IOException {
  try {
    StringWriter writer=new StringWriter();
    FileCopyUtils.copy(new InputStreamReader(new FileInputStream(file)),writer);
    return new StringReader(writer.toString());
  }
 catch (  IOException ioe) {
    throw new IOException(""String_Node_Str"",ioe);
  }
}","private static Reader manifestReaderFromFile(File file) throws IOException {
  try {
    StringWriter writer=new StringWriter();
    FileCopyUtils.copy(new InputStreamReader(new FileInputStream(file),UTF_8),writer);
    return new StringReader(writer.toString());
  }
 catch (  IOException ioe) {
    throw new IOException(""String_Node_Str"",ioe);
  }
}",0.991404011461318
93858,"private static Reader manifestReaderFromJar(File file) throws IOException, SecurityException {
  if (!file.exists()) {
    throw new IOException(""String_Node_Str"" + file + ""String_Node_Str"");
  }
  ArtifactFS fs=new JarFileArtifactFS(file);
  ArtifactFSEntry fsEntry=fs.getEntry(JarFile.MANIFEST_NAME);
  if (fsEntry == null || !fsEntry.exists()) {
    return null;
  }
  StringWriter writer=new StringWriter();
  InputStream inputStream=fsEntry.getInputStream();
  FileCopyUtils.copy(new InputStreamReader(inputStream),writer);
  inputStream.close();
  return new StringReader(writer.toString());
}","private static Reader manifestReaderFromJar(File file) throws IOException, SecurityException {
  if (!file.exists()) {
    throw new IOException(""String_Node_Str"" + file + ""String_Node_Str"");
  }
  ArtifactFS fs=new JarFileArtifactFS(file);
  ArtifactFSEntry fsEntry=fs.getEntry(JarFile.MANIFEST_NAME);
  if (fsEntry == null || !fsEntry.exists()) {
    return null;
  }
  StringWriter writer=new StringWriter();
  InputStream inputStream=fsEntry.getInputStream();
  FileCopyUtils.copy(new InputStreamReader(inputStream,UTF_8),writer);
  inputStream.close();
  return new StringReader(writer.toString());
}",0.9933554817275748
93859,"public ArtifactDescriptor generateArtifactDescriptor(File artifactFile) throws ArtifactGenerationException {
  if (artifactFile.getName().endsWith(PROPERTIES_SUFFIX)) {
    FileReader reader=null;
    try {
      reader=new FileReader(artifactFile);
      Properties properties=new Properties();
      properties.load(reader);
      return createArtifactDescriptor(artifactFile,properties);
    }
 catch (    IOException e) {
      throw new ArtifactGenerationException(""String_Node_Str"",ARTIFACT_TYPE,e);
    }
 finally {
      IOUtils.closeQuietly(reader);
    }
  }
  return null;
}","public ArtifactDescriptor generateArtifactDescriptor(File artifactFile) throws ArtifactGenerationException {
  if (artifactFile.getName().endsWith(PROPERTIES_SUFFIX)) {
    Reader reader=null;
    try {
      reader=new InputStreamReader(new FileInputStream(artifactFile),UTF_8);
      Properties properties=new Properties();
      properties.load(reader);
      return createArtifactDescriptor(artifactFile,properties);
    }
 catch (    IOException e) {
      throw new ArtifactGenerationException(""String_Node_Str"",ARTIFACT_TYPE,e);
    }
 finally {
      IOUtils.closeQuietly(reader);
    }
  }
  return null;
}",0.9416666666666668
93860,"/** 
 * {@inheritDoc}
 */
public String getBundleLocation(){
  Bundle bundle=this.getBundle();
  if (bundle == null) {
    return this.bundleDescription.getLocation();
  }
  return this.bundle.getLocation();
}","/** 
 * {@inheritDoc}
 */
public String getBundleLocation(){
  Bundle bundle=this.getBundle();
  if (bundle == null) {
    return this.bundleDescription.getLocation();
  }
  return bundle.getLocation();
}",0.9878934624697336
93861,"private String getFileName(@NonNull URI location) throws DeploymentException {
  URI normalisedLocation=this.uriNormaliser.normalise(location);
  String path=normalisedLocation.getPath();
  if (path.endsWith(URI_PATH_SEPARATOR)) {
    path=path.substring(0,path.length() - 1);
  }
  int separatorIndex=path.lastIndexOf(URI_PATH_SEPARATOR);
  return separatorIndex != -1 ? path.substring(separatorIndex + 1) : path;
}","private String getFileName(@NonNull URI location) throws DeploymentException {
  URI normalisedLocation=this.uriNormaliser.normalise(location);
  String path=normalisedLocation.getPath();
  String pathSeparator=URI_PATH_SEPARATOR;
  if (SCHEME_FILE.equals(normalisedLocation.getScheme())) {
    pathSeparator=File.separator;
  }
  if (path.endsWith(pathSeparator)) {
    path=path.substring(0,path.length() - 1);
  }
  int separatorIndex=path.lastIndexOf(pathSeparator);
  return separatorIndex != -1 ? path.substring(separatorIndex + 1) : path;
}",0.7892004153686397
93862,"/** 
 * Constructs a new   {@link JarFileArtifactFS} for the given file which is assumed to be in JAR format.
 * @param file a JAR file
 */
JarFileArtifactFS(File file){
  super(file);
}","/** 
 * Constructs a new   {@link JarFileArtifactFS} for the given file which is assumed to be in JAR format.
 * @param file a JAR file
 */
public JarFileArtifactFS(File file){
  super(file);
}",0.9815303430079156
93863,"/** 
 * {@inheritDoc}
 */
public void start(BundleContext context) throws Exception {
  publishConfigurations(context);
  ResolutionFailureDetective rfd=createResolutionFailureDetective(context);
  Repository repository=getPotentiallyDelayedService(context,Repository.class);
  PackageAdmin packageAdmin=getPotentiallyDelayedService(context,PackageAdmin.class);
  EventLogger eventLogger=getPotentiallyDelayedService(context,EventLoggerFactory.class).createEventLogger(context.getBundle());
  RegionDigraph regionDigraph=getPotentiallyDelayedService(context,RegionDigraph.class);
  WorkArea workArea=getPotentiallyDelayedService(context,WorkArea.class);
  ImportExpansionHandler importExpansionHandler=createImportExpansionHandler(context,packageAdmin,repository,eventLogger);
  this.registrationTracker.track(context.registerService(ImportExpander.class.getName(),importExpansionHandler,null));
  TransformedManifestProvidingBundleFileWrapper bundleTransformerHandler=createBundleTransformationHandler(importExpansionHandler);
  OsgiFramework osgiFramework=createOsgiFramework(context,packageAdmin,bundleTransformerHandler);
  this.registrationTracker.track(context.registerService(OsgiFramework.class.getName(),osgiFramework,null));
  DumpExtractor dumpExtractor=new StandardDumpExtractor(workArea);
  QuasiFrameworkFactory quasiFrameworkFactory=createQuasiFrameworkFactory(context,rfd,repository,bundleTransformerHandler,regionDigraph,dumpExtractor);
  this.registrationTracker.track(context.registerService(QuasiFrameworkFactory.class.getName(),quasiFrameworkFactory,null));
  EquinoxHookRegistrar hookRegistrar=createHookRegistrar(context,packageAdmin,bundleTransformerHandler);
  hookRegistrar.init();
  this.hookRegistrar=hookRegistrar;
  PackageAdminUtil packageAdminUtil=createPackageAdminUtil(context);
  this.registrationTracker.track(context.registerService(PackageAdminUtil.class.getName(),packageAdminUtil,null));
  scheduleRegistrationOfServiceScopingRegistryHooks(context,eventLogger);
  Dictionary<String,Object> properties=new Hashtable<String,Object>();
  properties.put(Constants.SERVICE_RANKING,Integer.MIN_VALUE);
  this.registrationTracker.track(context.registerService(ModuleContextAccessor.class.getName(),new EmptyModuleContextAccessor(),properties));
  scheduleInitialArtifactDeployerCreation(context,eventLogger);
  context.registerService(ConfigurationDeployer.class,new UserRegionConfigurationDeployer(context),null);
  initializeConsoleConfigurationConvertor(context);
  this.stateDumpMBeanExorter=new StateDumpMBeanExporter(quasiFrameworkFactory);
  initializeConsoleConfigurationConvertor(context);
}","/** 
 * {@inheritDoc}
 */
public void start(BundleContext context) throws Exception {
  publishConfigurations(context);
  ResolutionFailureDetective rfd=createResolutionFailureDetective(context);
  Repository repository=getPotentiallyDelayedService(context,Repository.class);
  PackageAdmin packageAdmin=getPotentiallyDelayedService(context,PackageAdmin.class);
  EventLogger eventLogger=getPotentiallyDelayedService(context,EventLoggerFactory.class).createEventLogger(context.getBundle());
  RegionDigraph regionDigraph=getPotentiallyDelayedService(context,RegionDigraph.class);
  WorkArea workArea=getPotentiallyDelayedService(context,WorkArea.class);
  ImportExpansionHandler importExpansionHandler=createImportExpansionHandler(context,packageAdmin,repository,eventLogger);
  this.registrationTracker.track(context.registerService(ImportExpander.class.getName(),importExpansionHandler,null));
  TransformedManifestProvidingBundleFileWrapper bundleTransformerHandler=createBundleTransformationHandler(importExpansionHandler);
  OsgiFramework osgiFramework=createOsgiFramework(context,packageAdmin,bundleTransformerHandler);
  this.registrationTracker.track(context.registerService(OsgiFramework.class.getName(),osgiFramework,null));
  DumpExtractor dumpExtractor=new StandardDumpExtractor(workArea);
  QuasiFrameworkFactory quasiFrameworkFactory=createQuasiFrameworkFactory(context,rfd,repository,bundleTransformerHandler,regionDigraph,dumpExtractor);
  this.registrationTracker.track(context.registerService(QuasiFrameworkFactory.class.getName(),quasiFrameworkFactory,null));
  EquinoxHookRegistrar hookRegistrar=createHookRegistrar(context,packageAdmin,bundleTransformerHandler);
  hookRegistrar.init();
  this.hookRegistrar=hookRegistrar;
  PackageAdminUtil packageAdminUtil=createPackageAdminUtil(context);
  this.registrationTracker.track(context.registerService(PackageAdminUtil.class.getName(),packageAdminUtil,null));
  scheduleRegistrationOfServiceScopingRegistryHooks(context,eventLogger);
  Dictionary<String,Object> properties=new Hashtable<String,Object>();
  properties.put(Constants.SERVICE_RANKING,Integer.MIN_VALUE);
  this.registrationTracker.track(context.registerService(ModuleContextAccessor.class.getName(),new EmptyModuleContextAccessor(),properties));
  scheduleInitialArtifactDeployerCreation(context,eventLogger);
  context.registerService(ConfigurationDeployer.class,new UserRegionConfigurationDeployer(context),null);
  initializeConsoleConfigurationConvertor(context);
  this.stateDumpMBeanExorter=new StateDumpMBeanExporter(quasiFrameworkFactory);
}",0.9900268507863444
93864,"private void initializeConsoleConfigurationConvertor(BundleContext context){
  ConsoleConfigurationConvertor consoleConfigurationConvertor=new ConsoleConfigurationConvertor(context);
  consoleConfigurationConvertor.start();
}","private void initializeConsoleConfigurationConvertor(BundleContext context){
  consoleConfigurationConvertor=new ConsoleConfigurationConvertor(context);
  consoleConfigurationConvertor.start();
}",0.9285714285714286
93865,"public void start(){
  Dictionary<String,String> consoleProperties=new Hashtable<String,String>();
  consoleProperties.put(Constants.SERVICE_PID,CONSOLE_PID);
  configuratorRegistration=context.registerService(ManagedService.class,new ConsoleConfigurator(),consoleProperties);
}","public void start(){
  Dictionary<String,String> consoleProperties=new Hashtable<String,String>();
  consoleProperties.put(Constants.SERVICE_PID,CONSOLE_PID);
synchronized (ConsoleConfigurationConvertor.monitor) {
    this.configuratorRegistration=this.context.registerService(ManagedService.class,new ConsoleConfigurator(),consoleProperties);
  }
}",0.8771929824561403
93866,"private void updateConfiguration(String pid,String host,String port,String enabled){
  try {
    Configuration configuration=configAdmin.getConfiguration(pid,null);
    Properties properties=new Properties();
    properties.put(HOST,host);
    properties.put(PORT,port);
    properties.put(ENABLED,enabled);
    configuration.update(properties);
  }
 catch (  IOException e) {
    String message=String.format(""String_Node_Str"",pid);
    logger.error(message);
    logger.trace(message,e);
  }
}","private void updateConfiguration(String pid,String host,String port,String enabled){
  try {
    Configuration configuration=this.configAdmin.getConfiguration(pid,null);
    Properties properties=new Properties();
    properties.put(HOST,host);
    properties.put(PORT,port);
    properties.put(ENABLED,enabled);
    configuration.update(properties);
  }
 catch (  IOException e) {
    String message=String.format(""String_Node_Str"",pid);
    this.logger.error(message);
    this.logger.trace(message,e);
  }
}",0.9850746268656716
93867,"@Override public void updated(Dictionary props) throws ConfigurationException {
  if (props != null) {
    this.properties=props;
    properties.put(Constants.SERVICE_PID,CONSOLE_PID);
  }
 else {
    return;
  }
  configuratorRegistration.setProperties(properties);
  String telnetHost=(String)properties.get(TELNET_HOST);
  String telnetPort=(String)properties.get(TELNET_PORT);
  String telnetEnabled=(String)properties.get(TELNET_ENABLED);
  updateConfiguration(TELNET_PID,telnetHost,telnetPort,telnetEnabled);
  String sshHost=(String)properties.get(SSH_HOST);
  String sshPort=(String)properties.get(SSH_PORT);
  String sshEnabled=(String)properties.get(SSH_ENABLED);
  updateConfiguration(SSH_PID,sshHost,sshPort,sshEnabled);
}","@Override public void updated(Dictionary props) throws ConfigurationException {
  if (props != null) {
    this.properties=props;
    this.properties.put(Constants.SERVICE_PID,CONSOLE_PID);
  }
 else {
    return;
  }
synchronized (ConsoleConfigurationConvertor.monitor) {
    ConsoleConfigurationConvertor.this.configuratorRegistration.setProperties(this.properties);
  }
  String telnetHost=(String)this.properties.get(TELNET_HOST);
  String telnetPort=(String)this.properties.get(TELNET_PORT);
  String telnetEnabled=(String)this.properties.get(TELNET_ENABLED);
  updateConfiguration(TELNET_PID,telnetHost,telnetPort,telnetEnabled);
  String sshHost=(String)this.properties.get(SSH_HOST);
  String sshPort=(String)this.properties.get(SSH_PORT);
  String sshEnabled=(String)this.properties.get(SSH_ENABLED);
  updateConfiguration(SSH_PID,sshHost,sshPort,sshEnabled);
}",0.8977556109725686
93868,"private void formatMissingFragment(ResolverError resolverError,StringBuilder sb){
  sb.append(this.getTypeDescription(resolverError.getType()));
  sb.append(""String_Node_Str"").append(resolverError.getBundle());
}","private void formatMissingFragment(ResolverError resolverError,StringBuilder sb){
  sb.append(this.getTypeDescription(resolverError.getType()));
  sb.append(""String_Node_Str"").append(resolverError.getBundle()).append(""String_Node_Str"");
  formatResolverErrorData(resolverError,sb);
  formatResolverErrorUnsatisfiedConstraint(resolverError,sb);
}",0.7612208258527827
93869,"private void formatBasicResolverError(ResolverError resolverError,StringBuilder sb){
  sb.append(this.getTypeDescription(resolverError.getType()));
  VersionConstraint unsatisfiedConstraint=resolverError.getUnsatisfiedConstraint();
  if (unsatisfiedConstraint != null) {
    formatMissingConstraintWithAttributes(resolverError,sb,unsatisfiedConstraint);
  }
 else {
    sb.append(""String_Node_Str"").append(resolverError.getBundle()).append(""String_Node_Str"");
  }
}","private void formatBasicResolverError(ResolverError resolverError,StringBuilder sb){
  sb.append(this.getTypeDescription(resolverError.getType()));
  formatResolverErrorData(resolverError,sb);
  formatResolverErrorUnsatisfiedConstraint(resolverError,sb);
}",0.4549237170596394
93870,"@Override public final GraphNode<InstallArtifact> getGraph(){
synchronized (this.monitor) {
    return this.graph;
  }
}","/** 
 * {@inheritDoc}
 */
@Override public final GraphNode<InstallArtifact> getGraph(){
synchronized (this.monitor) {
    return this.graph;
  }
}",0.9022556390977444
93871,"/** 
 * {@inheritDoc}
 */
public GraphNode<InstallArtifact> constructInstallArtifactGraph(ArtifactIdentity artifactIdentity,ArtifactStorage artifactStorage,Map<String,String> deploymentProperties,String repositoryName) throws DeploymentException {
  if (PROPERTIES_TYPE.equalsIgnoreCase(artifactIdentity.getType())) {
    ConfigurationDeployer configDeployer=obtainConfigurationDeployer();
    ArtifactStateMonitor artifactStateMonitor=new StandardArtifactStateMonitor(this.bundleContext);
    InstallArtifact configInstallArtifact=new StandardConfigInstallArtifact(artifactIdentity,artifactStorage,this.lifecycleEngine,this.lifecycleEngine,this.lifecycleEngine,artifactStateMonitor,repositoryName,eventLogger,configDeployer);
    return constructInstallGraph(configInstallArtifact);
  }
 else {
    return null;
  }
}","/** 
 * {@inheritDoc}
 */
public GraphNode<InstallArtifact> constructInstallArtifactGraph(ArtifactIdentity artifactIdentity,ArtifactStorage artifactStorage,Map<String,String> deploymentProperties,String repositoryName) throws DeploymentException {
  if (PROPERTIES_TYPE.equalsIgnoreCase(artifactIdentity.getType())) {
    ConfigurationDeployer configDeployer=obtainConfigurationDeployer();
    ArtifactStateMonitor artifactStateMonitor=new StandardArtifactStateMonitor(this.bundleContext);
    ConfigInstallArtifact configInstallArtifact=new StandardConfigInstallArtifact(artifactIdentity,artifactStorage,this.lifecycleEngine,this.lifecycleEngine,this.lifecycleEngine,artifactStateMonitor,repositoryName,eventLogger,configDeployer);
    return constructAssociatedGraphNode(configInstallArtifact);
  }
 else {
    return null;
  }
}",0.9836264402668284
93872,"private GraphNode<InstallArtifact> createPlanGraph(ArtifactIdentity artifactIdentity,ArtifactStorage artifactStorage,PlanDescriptor planDescriptor,String repositoryName) throws DeploymentException {
  StandardPlanInstallArtifact planInstallArtifact;
  planInstallArtifact=new StandardPlanInstallArtifact(artifactIdentity,planDescriptor.getAtomic(),planDescriptor.getScoped(),artifactStorage,new StandardArtifactStateMonitor(this.bundleContext),this.scopeServiceRepository,this.scopeFactory,this.eventLogger,this.refreshHandler,repositoryName,planDescriptor.getArtifactSpecifications());
  GraphNode<InstallArtifact> graph=constructInstallGraph(planInstallArtifact);
  planInstallArtifact.setGraph(graph);
  return graph;
}","private GraphNode<InstallArtifact> createPlanGraph(ArtifactIdentity artifactIdentity,ArtifactStorage artifactStorage,PlanDescriptor planDescriptor,String repositoryName) throws DeploymentException {
  StandardPlanInstallArtifact planInstallArtifact;
  planInstallArtifact=new StandardPlanInstallArtifact(artifactIdentity,planDescriptor.getAtomic(),planDescriptor.getScoped(),artifactStorage,new StandardArtifactStateMonitor(this.bundleContext),this.scopeServiceRepository,this.scopeFactory,this.eventLogger,this.refreshHandler,repositoryName,planDescriptor.getArtifactSpecifications());
  return constructAssociatedGraphNode(planInstallArtifact);
}",0.908029197080292
93873,"private GraphNode<InstallArtifact> createParGraph(ArtifactIdentity artifactIdentity,ArtifactStorage artifactStorage,String repositoryName) throws DeploymentException {
  ParPlanInstallArtifact parArtifact=this.parFactory.createParPlanInstallArtifact(artifactIdentity,artifactStorage,repositoryName);
  GraphNode<InstallArtifact> graph=constructInstallGraph(parArtifact);
  parArtifact.setGraph(graph);
  return graph;
}","private GraphNode<InstallArtifact> createParGraph(ArtifactIdentity artifactIdentity,ArtifactStorage artifactStorage,String repositoryName) throws DeploymentException {
  ParPlanInstallArtifact parArtifact=this.parFactory.createParPlanInstallArtifact(artifactIdentity,artifactStorage,repositoryName);
  return constructAssociatedGraphNode(parArtifact);
}",0.8471502590673575
93874,"/** 
 * {@inheritDoc}
 */
public GraphNode<InstallArtifact> constructInstallArtifactGraph(ArtifactIdentity identity,ArtifactStorage artifactStorage,Map<String,String> deploymentProperties,String repositoryName) throws DeploymentException {
  if (ArtifactIdentityDeterminer.BUNDLE_TYPE.equalsIgnoreCase(identity.getType())) {
    BundleInstallArtifact bundleInstallArtifact=this.bundleArtifactFactory.createBundleInstallArtifact(identity,artifactStorage,repositoryName);
    if (deploymentProperties != null) {
      bundleInstallArtifact.getDeploymentProperties().putAll(deploymentProperties);
    }
    GraphNode<InstallArtifact> graph=constructInstallGraph(bundleInstallArtifact);
    ((StandardBundleInstallArtifact)bundleInstallArtifact).setGraph(graph);
    return graph;
  }
 else {
    return null;
  }
}","/** 
 * {@inheritDoc}
 */
public GraphNode<InstallArtifact> constructInstallArtifactGraph(ArtifactIdentity identity,ArtifactStorage artifactStorage,Map<String,String> deploymentProperties,String repositoryName) throws DeploymentException {
  if (ArtifactIdentityDeterminer.BUNDLE_TYPE.equalsIgnoreCase(identity.getType())) {
    BundleInstallArtifact bundleInstallArtifact=this.bundleArtifactFactory.createBundleInstallArtifact(identity,artifactStorage,repositoryName);
    if (deploymentProperties != null) {
      bundleInstallArtifact.getDeploymentProperties().putAll(deploymentProperties);
    }
    return constructAssociatedGraphNode(bundleInstallArtifact);
  }
 else {
    return null;
  }
}",0.8575215374420145
93875,"@Ignore(""String_Node_Str"") @Test public void testThreadContextClassLoader() throws Throwable {
  File file=new File(""String_Node_Str"");
  deploy(file);
  Assert.assertNotNull(ApplicationContextUtils.getApplicationContext(this.context,BUNDLE_A_SYMBOLIC_NAME));
}","@Test public void testThreadContextClassLoader() throws Throwable {
  File file=new File(""String_Node_Str"");
  deploy(file);
  Assert.assertNotNull(ApplicationContextUtils.getApplicationContext(this.context,BUNDLE_A_SYMBOLIC_NAME));
}",0.9454545454545454
93876,"private void writePropertiesFile(final Properties hotDeployConfiguration,File target,String comment) throws IOException, FileNotFoundException {
  FileOutputStream stream=new FileOutputStream(target);
  hotDeployConfiguration.store(stream,comment);
  stream.close();
}","private void writePropertiesFile(final Properties hotDeployConfiguration,File target,String comment) throws IOException, FileNotFoundException {
  FileOutputStream stream=new FileOutputStream(target);
  hotDeployConfiguration.store(stream,comment);
  stream.flush();
  stream.close();
}",0.967509025270758
93877,"/** 
 * Lists all bundles that export a class
 */
@Descriptor(""String_Node_Str"") public void clexport(@Descriptor(""String_Node_Str"") String className){
  String classPackage=extractPackage(className);
  if (classPackage == null) {
    return;
  }
  Bundle[] bundles=bundleContext.getBundles();
  HashMap<Long,String> foundBundles=new HashMap<Long,String>();
  for (  Bundle bundle : bundles) {
    if (ClassLoadingHelper.isPackageExported(bundleContext,classPackage,bundle)) {
      if (ClassLoadingHelper.tryToLoadClass(className,bundle) != null) {
        foundBundles.put(bundle.getBundleId(),bundle.getSymbolicName());
      }
 else {
        foundBundles.put(bundle.getBundleId(),bundle.getSymbolicName() + ""String_Node_Str"");
      }
    }
  }
  if (foundBundles.size() == 0) {
    System.out.println(""String_Node_Str"" + className + ""String_Node_Str"");
    return;
  }
  System.out.println();
  System.out.println(""String_Node_Str"" + className + ""String_Node_Str"");
  for (  Map.Entry<Long,String> entry : foundBundles.entrySet()) {
    System.out.println(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue());
  }
}","/** 
 * Lists all bundles that export a class
 */
@Descriptor(""String_Node_Str"") public void clexport(@Descriptor(""String_Node_Str"") String className){
  String classPackage=extractPackage(className);
  if (classPackage == null) {
    System.out.println(""String_Node_Str"" + className + ""String_Node_Str"");
    return;
  }
  Bundle[] bundles=bundleContext.getBundles();
  HashMap<Long,String> foundBundles=new HashMap<Long,String>();
  for (  Bundle bundle : bundles) {
    if (ClassLoadingHelper.isPackageExported(bundleContext,classPackage,bundle)) {
      if (ClassLoadingHelper.tryToLoadClass(className,bundle) != null) {
        foundBundles.put(bundle.getBundleId(),bundle.getSymbolicName());
      }
 else {
        foundBundles.put(bundle.getBundleId(),bundle.getSymbolicName() + ""String_Node_Str"");
      }
    }
  }
  if (foundBundles.size() == 0) {
    System.out.println(""String_Node_Str"" + className + ""String_Node_Str"");
    return;
  }
  System.out.println();
  System.out.println(""String_Node_Str"" + className + ""String_Node_Str"");
  for (  Map.Entry<Long,String> entry : foundBundles.entrySet()) {
    System.out.println(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue());
  }
}",0.9682068673166596
93878,"/** 
 * Lists all bundles that contain a class
 */
@Descriptor(""String_Node_Str"") public void clhas(@Descriptor(""String_Node_Str"") String className){
  if (extractPackage(className) == null) {
    return;
  }
  className=ClassLoadingHelper.convertToResourcePath(className);
  Map<Bundle,List<String>> foundBundles=ClassLoadingHelper.getBundlesContainingResource(bundleContext,className);
  if (foundBundles.size() == 0) {
    System.out.println(""String_Node_Str"" + className + ""String_Node_Str"");
    return;
  }
  outputBundlesAndResources(""String_Node_Str"" + className + ""String_Node_Str"",foundBundles);
}","/** 
 * Lists all bundles that contain a class
 */
@Descriptor(""String_Node_Str"") public void clhas(@Descriptor(""String_Node_Str"") String className){
  className=ClassLoadingHelper.convertToResourcePath(className);
  Map<Bundle,List<String>> foundBundles=ClassLoadingHelper.getBundlesContainingResource(bundleContext,className);
  if (foundBundles.size() == 0) {
    System.out.println(""String_Node_Str"" + className + ""String_Node_Str"");
    return;
  }
  outputBundlesAndResources(""String_Node_Str"" + className + ""String_Node_Str"",foundBundles);
}",0.6077922077922078
93879,"private String extractPackage(String className){
  String classPackage=null;
  int index=className.lastIndexOf(""String_Node_Str"");
  if (index == -1) {
    System.out.println(""String_Node_Str"" + className + ""String_Node_Str"");
  }
 else {
    classPackage=className.substring(0,index);
  }
  return classPackage;
}","private String extractPackage(String className){
  int index=className.lastIndexOf(""String_Node_Str"");
  return index == -1 ? null : className.substring(0,index);
}",0.6359832635983264
93880,"private void doClload(String className,String bundle){
  if (extractPackage(className) == null) {
    return;
  }
  Map<Bundle,Bundle> foundBundles;
  if (bundle == null) {
    foundBundles=ClassLoadingHelper.getBundlesLoadingClass(bundleContext,className);
  }
 else {
    foundBundles=ClassLoadingHelper.getBundlesLoadingClass(bundleContext,className,bundle);
  }
  if (foundBundles.size() == 0) {
    if (bundle == null) {
      System.out.println(""String_Node_Str"" + className + ""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + bundle + ""String_Node_Str""+ className+ ""String_Node_Str"");
    }
    return;
  }
  outputFoundBundlesAndRelations(""String_Node_Str"" + className + ""String_Node_Str""+ ((bundle != null) ? ""String_Node_Str"" : ""String_Node_Str""),foundBundles,""String_Node_Str"");
}","private void doClload(String className,String bundle){
  if (extractPackage(className) == null) {
    System.out.println(""String_Node_Str"" + className + ""String_Node_Str"");
  }
  Map<Bundle,Bundle> foundBundles;
  if (bundle == null) {
    foundBundles=ClassLoadingHelper.getBundlesLoadingClass(bundleContext,className);
  }
 else {
    foundBundles=ClassLoadingHelper.getBundlesLoadingClass(bundleContext,className,bundle);
  }
  if (foundBundles.size() == 0) {
    if (bundle == null) {
      System.out.println(""String_Node_Str"" + className + ""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + bundle + ""String_Node_Str""+ className+ ""String_Node_Str"");
    }
    return;
  }
  outputFoundBundlesAndRelations(""String_Node_Str"" + className + ""String_Node_Str""+ ((bundle != null) ? ""String_Node_Str"" : ""String_Node_Str""),foundBundles,""String_Node_Str"");
}",0.9559600704638872
93881,"/** 
 * Returns the scope name of the given   {@link InstallArtifact} or <code>null</code> if the given InstallArtifactdoes not belong to a scope.
 * @param installArtifact the <code>InstallArtiface</code> whose scope name is required
 * @return the scope name or <code>null</code> if the given InstallArtifact does not belong to a scope
 */
private String getArtifactScopeName(InstallArtifact installArtifact){
  if (installArtifact instanceof PlanInstallArtifact) {
    PlanInstallArtifact planInstallArtifact=(PlanInstallArtifact)installArtifact;
    boolean scoped=planInstallArtifact.isScoped();
    if (scoped) {
      return planInstallArtifact.getName() + SCOPE_SEPARATOR + versionToShortString(planInstallArtifact.getVersion());
    }
  }
  Tree<InstallArtifact> tree=installArtifact.getTree();
  Tree<InstallArtifact> parent=tree.getParent();
  if (parent != null) {
    return getArtifactScopeName(parent.getValue());
  }
  return null;
}","/** 
 * Returns the scope name of the given   {@link InstallArtifact} or <code>null</code> if the given InstallArtifactdoes not belong to a scope.
 * @param installArtifact the <code>InstallArtiface</code> whose scope name is required
 * @return the scope name or <code>null</code> if the given InstallArtifact does not belong to a scope
 */
private String getArtifactScopeName(InstallArtifact installArtifact){
  if (installArtifact instanceof PlanInstallArtifact) {
    PlanInstallArtifact planInstallArtifact=(PlanInstallArtifact)installArtifact;
    boolean scoped=planInstallArtifact.isScoped();
    if (scoped) {
      return planInstallArtifact.getName() + SCOPE_SEPARATOR + versionToShortString(planInstallArtifact.getVersion());
    }
  }
  return installArtifact.getScopeName();
}",0.8913168487636572
93882,"private void serviceUnregistering(ServiceReference<?> serviceReference){
synchronized (this.monitor) {
    List<CommandDescriptor> commandDescriptorsForService=this.commandDescriptorsByService.remove(serviceReference);
    this.commandDescriptors.removeAll(commandDescriptorsForService);
  }
}","private void serviceUnregistering(ServiceReference<?> serviceReference){
synchronized (this.monitor) {
    List<CommandDescriptor> commandDescriptorsForService=this.commandDescriptorsByService.remove(serviceReference);
    if (commandDescriptorsForService != null) {
      this.commandDescriptors.removeAll(commandDescriptorsForService);
    }
  }
}",0.912772585669782
93883,"@Override public boolean equals(Object obj){
  return getId().equals(((ArtifactHolder)obj).getId());
}","@Override public boolean equals(Object obj){
  return obj instanceof ArtifactHolder && getId().equals(((ArtifactHolder)obj).getId());
}",0.8607594936708861
93884,"/** 
 * {@inheritDoc}
 */
@Override public List<QuasiLiveService> getAllServices(File source){
  List<QuasiLiveService> quasiLiveServices=new ArrayList<QuasiLiveService>();
  if (source == null) {
    SortedMap<Long,QuasiLiveService> services=getServicesSortedMap(this.getQuasiFramework(source));
    for (    Entry<Long,QuasiLiveService> serviceEntry : services.entrySet()) {
      quasiLiveServices.add(serviceEntry.getValue());
    }
  }
  return quasiLiveServices;
}","/** 
 * {@inheritDoc}
 */
@Override public List<QuasiLiveService> getAllServices(File source){
  List<QuasiLiveService> quasiLiveServices=new ArrayList<QuasiLiveService>();
  if (source == null) {
    SortedMap<Long,QuasiLiveService> services=getServicesSortedMap(this.getQuasiFramework());
    for (    Entry<Long,QuasiLiveService> serviceEntry : services.entrySet()) {
      quasiLiveServices.add(serviceEntry.getValue());
    }
  }
  return quasiLiveServices;
}",0.9935760171306208
93885,"private QuasiFramework getQuasiFramework(File source){
  if (source == null) {
    return new StandardQuasiLiveFramework(this.quasiFrameworkFactory.create(),this.bundleContext);
  }
 else {
    try {
      return this.quasiFrameworkFactory.create(source);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
}","private QuasiFramework getQuasiFramework(File source){
  if (source == null) {
    return getQuasiFramework();
  }
 else {
    try {
      return this.quasiFrameworkFactory.create(source);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
}",0.8553654743390358
93886,"/** 
 * {@inheritDoc}
 */
@Override public QuasiLiveService getService(File source,long serviceId){
  if (source == null) {
    SortedMap<Long,QuasiLiveService> services=getServicesSortedMap(this.getQuasiFramework(source));
    return services.get(serviceId);
  }
  return null;
}","/** 
 * {@inheritDoc}
 */
@Override public QuasiLiveService getService(File source,long serviceId){
  if (source == null) {
    SortedMap<Long,QuasiLiveService> services=getServicesSortedMap(this.getQuasiFramework());
    return services.get(serviceId);
  }
  return null;
}",0.9891696750902528
93887,"/** 
 * Pre-condition: this must only be used on the live framework. 
 */
private SortedMap<Long,QuasiLiveService> getServicesSortedMap(QuasiFramework quasiFramework){
  SortedMap<Long,QuasiLiveService> services=new TreeMap<Long,QuasiLiveService>();
  ServiceReference<?>[] allServiceReferences=null;
  try {
    allServiceReferences=this.bundleContext.getAllServiceReferences(null,null);
  }
 catch (  InvalidSyntaxException e) {
  }
  for (  ServiceReference<?> serviceReference : allServiceReferences) {
    QuasiLiveService service=new StandardQuasiLiveService(quasiFramework,serviceReference);
    services.put(service.getServiceId(),service);
  }
  return services;
}","/** 
 * Pre-condition: this must only be used on the live framework. 
 */
private SortedMap<Long,QuasiLiveService> getServicesSortedMap(QuasiFramework quasiFramework){
  SortedMap<Long,QuasiLiveService> services=new TreeMap<Long,QuasiLiveService>();
  ServiceReference<?>[] allServiceReferences=null;
  try {
    allServiceReferences=this.bundleContext.getAllServiceReferences(null,null);
  }
 catch (  InvalidSyntaxException e) {
    return services;
  }
  for (  ServiceReference<?> serviceReference : allServiceReferences) {
    QuasiLiveService service=new StandardQuasiLiveService(quasiFramework,serviceReference);
    services.put(service.getServiceId(),service);
  }
  return services;
}",0.9846378931967812
93888,"/** 
 * {@inheritDoc}
 */
@Override public List<QuasiResolutionFailure> getResolverReport(File source,long bundleId){
  QuasiFramework framework=this.getQuasiFramework(source);
  return framework.diagnose(bundleId);
}","/** 
 * {@inheritDoc}
 */
@Override public List<QuasiResolutionFailure> getResolverReport(File source,long bundleId){
  QuasiFramework framework=this.getQuasiFramework(source);
  framework.resolve();
  return framework.diagnose(bundleId);
}",0.9190371991247264
93889,"StandardQuasiFramework(BundleContext bundleContext,State state,PlatformAdmin platformAdmin,ResolutionFailureDetective detective,Repository repository,TransformedManifestProvidingBundleFileWrapper bundleTransformationHandler,RegionDigraph regionDigraph){
  TOP=regionDigraph.createRegionFilterBuilder().allowAll(RegionFilter.VISIBLE_ALL_NAMESPACE).build();
  this.bundleContext=bundleContext;
  this.state=state;
  this.stateObjectFactory=platformAdmin.getFactory();
  this.detective=detective;
  this.stateHelper=platformAdmin.getStateHelper();
  this.bundleTransformationHandler=bundleTransformationHandler;
  this.regionDigraph=regionDigraph;
  this.userRegion=regionDigraph.getRegion(""String_Node_Str"");
  setResolverHookFactory();
  this.dependencyCalculator=new DependencyCalculator(platformAdmin.getFactory(),this.detective,repository,this.bundleContext);
}","StandardQuasiFramework(BundleContext bundleContext,State state,PlatformAdmin platformAdmin,ResolutionFailureDetective detective,Repository repository,TransformedManifestProvidingBundleFileWrapper bundleTransformationHandler,RegionDigraph regionDigraph){
  TOP=regionDigraph.createRegionFilterBuilder().allowAll(RegionFilter.VISIBLE_ALL_NAMESPACE).build();
  this.bundleContext=bundleContext;
  this.state=state;
  this.stateObjectFactory=platformAdmin.getFactory();
  this.detective=detective;
  this.stateHelper=platformAdmin.getStateHelper();
  this.bundleTransformationHandler=bundleTransformationHandler;
  this.regionDigraph=regionDigraph;
  this.userRegion=regionDigraph.getRegion(""String_Node_Str"");
  this.coregion=regionDigraph.getRegion(this.userRegion.getName() + COREGION_SUFFIX);
  setResolverHookFactory();
  this.dependencyCalculator=new DependencyCalculator(platformAdmin.getFactory(),this.detective,repository,this.bundleContext);
}",0.9525386313465783
93890,"/** 
 * Gets a specific   {@link Artifact} from this repository. If the artifact is a bundle, it is only returned if thebundle is in the user region.
 * @param type The type of the {@link Artifact} to get
 * @param name The name of the {@link Artifact} to get
 * @param version The {@link Version} of the {@link Artifact} to get
 * @param region The {@link Region} to get the {@link Artifact} from
 * @return The {@link Artifact} represented by this type, name, and version if it is in the repository, otherwise<code>null</code>
 */
Artifact getArtifact(String type,String name,Version version,Region region);","/** 
 * Gets a specific   {@link Artifact} from this repository. 
 * @param type The type of the {@link Artifact} to get
 * @param name The name of the {@link Artifact} to get
 * @param version The {@link Version} of the {@link Artifact} to get
 * @param region The {@link Region} to get the {@link Artifact} from or null if the artifact has no region or the region isn't known
 * @return The {@link Artifact} represented by this type, name, and version if it is in the repository, otherwise<code>null</code>
 */
Artifact getArtifact(String type,String name,Version version,Region region);",0.4641068447412353
93891,"/** 
 * {@inheritDoc}
 */
public Set<Artifact> getDependents(Artifact rootArtifact){
  Set<Artifact> artifacts=new HashSet<Artifact>();
  QuasiBundle rootBundle=getBundle(rootArtifact);
  if (rootBundle == null) {
    return Collections.<Artifact>emptySet();
  }
  for (  QuasiImportPackage importPackage : rootBundle.getImportPackages()) {
    QuasiExportPackage provider=importPackage.getProvider();
    if (provider != null) {
      QuasiBundle bundle=provider.getExportingBundle();
      Artifact artifact=artifactRepository.getArtifact(BundleArtifact.TYPE,bundle.getSymbolicName(),bundle.getVersion(),this.regionDigraph.getRegion(bundle.getBundleId()));
      artifacts.add(artifact);
    }
  }
  return artifacts;
}","/** 
 * {@inheritDoc}
 */
public Set<Artifact> getDependents(Artifact rootArtifact){
  if (!rootArtifact.getType().equalsIgnoreCase(""String_Node_Str"")) {
    return Collections.<Artifact>emptySet();
  }
  QuasiBundle rootBundle=getBundle(rootArtifact);
  if (rootBundle == null) {
    return Collections.<Artifact>emptySet();
  }
  Set<Artifact> artifacts=new HashSet<Artifact>();
  for (  QuasiImportPackage importPackage : rootBundle.getImportPackages()) {
    QuasiExportPackage provider=importPackage.getProvider();
    if (provider != null) {
      QuasiBundle bundle=provider.getExportingBundle();
      Artifact artifact=artifactRepository.getArtifact(BundleArtifact.TYPE,bundle.getSymbolicName(),bundle.getVersion(),this.regionDigraph.getRegion(bundle.getBundleId()));
      artifacts.add(artifact);
    }
  }
  return artifacts;
}",0.7615384615384615
93892,"private QuasiBundle getBundle(Artifact artifact){
  QuasiFramework framework=quasiFrameworkFactory.create();
  for (  QuasiBundle bundle : framework.getBundles()) {
    if (artifact.getName().equals(bundle.getSymbolicName()) && artifact.getVersion().equals(bundle.getVersion())) {
      return bundle;
    }
  }
  return null;
}","private QuasiBundle getBundle(Artifact artifact){
  QuasiFramework framework=quasiFrameworkFactory.create();
  for (  QuasiBundle bundle : framework.getBundles()) {
    if (artifact.getName().equals(bundle.getSymbolicName()) && artifact.getVersion().equals(bundle.getVersion()) && artifact.getRegion().equals(this.regionDigraph.getRegion(bundle.getBundleId()))) {
      return bundle;
    }
  }
  return null;
}",0.8876860622462788
93893,"private void setResolverHookFactory(){
  if (this.state instanceof StateImpl) {
    ServiceReference<ResolverHookFactory> ref=this.bundleContext.getServiceReference(ResolverHookFactory.class);
    if (ref != null) {
      ResolverHookFactory resolverHookFactory=this.bundleContext.getService(ref);
      ((StateImpl)this.state).setResolverHookFactory(resolverHookFactory);
      this.bundleContext.ungetService(ref);
    }
  }
}","private void setResolverHookFactory(){
  ResolverHookFactory resolverHookFactory=new RegionResolverHookFactory(this.regionDigraph);
  this.state.setResolverHookFactory(resolverHookFactory);
}",0.4943457189014539
93894,"private Long getBundleId(BundleRevision bundleRevision){
  Bundle bundle=bundleRevision.getBundle();
  if (bundle != null) {
    return bundle.getBundleId();
  }
  if (bundleRevision instanceof ResolverBundle) {
    ResolverBundle resolverBundle=(ResolverBundle)bundleRevision;
    return resolverBundle.getBundleDescription().getBundleId();
  }
  Assert.isTrue(false,""String_Node_Str"",bundleRevision);
  return INVALID_BUNDLE_ID;
}","private Long getBundleId(BundleRevision bundleRevision){
  Bundle bundle=bundleRevision.getBundle();
  if (bundle != null) {
    return bundle.getBundleId();
  }
  if (bundleRevision instanceof BundleDescription) {
    BundleDescription bundleDescription=(BundleDescription)bundleRevision;
    return bundleDescription.getBundleId();
  }
  Assert.isTrue(false,""String_Node_Str"",bundleRevision);
  return INVALID_BUNDLE_ID;
}",0.7242990654205608
93895,"@Override public boolean isBundleAllowed(String bundleSymbolicName,Version bundleVersion){
synchronized (this.monitor) {
    for (    OrderedPair<String,VersionRange> allowedBundle : this.allowedBundles) {
      if (allowedBundle.getFirst().endsWith(bundleSymbolicName) && allowedBundle.getSecond().includes(bundleVersion)) {
        return true;
      }
    }
    return false;
  }
}","@Override public boolean isBundleAllowed(String bundleSymbolicName,Version bundleVersion){
synchronized (this.monitor) {
    for (    OrderedPair<String,VersionRange> allowedBundle : this.allowedBundles) {
      if (allowedBundle.getFirst().equals(bundleSymbolicName) && allowedBundle.getSecond().includes(bundleVersion)) {
        return true;
      }
    }
    return false;
  }
}",0.9843342036553524
93896,"private void checkPlanScoping(TestPlanArtifactInfo parent,Model model){
  if (parent.isScoped()) {
    Artifact parentPlan=getPlan(parent);
    for (    Artifact child : parentPlan.getDependents()) {
      if (PLAN_TYPE.equals(child.getType())) {
        String childPlanName=child.getName();
        String unscopedChildPlanName=parent.getChildPlan().getName();
        String expectedChildPlanName=model.getScopeName() + SCOPE_SEPARATOR + unscopedChildPlanName;
        assertEquals(expectedChildPlanName,childPlanName);
      }
    }
  }
}","private void checkPlanScoping(TestPlanArtifactInfo parent,Model model){
  if (parent.isScoped()) {
    Artifact parentPlan=getPlan(parent);
    Set<Artifact> children=parentPlan.getDependents();
    for (    Artifact child : children) {
      if (PLAN_TYPE.equals(child.getType())) {
        String childPlanName=child.getName();
        String unscopedChildPlanName=parent.getChildPlan().getName();
        String expectedChildPlanName=model.getScopeName() + SCOPE_SEPARATOR + unscopedChildPlanName;
        assertEquals(expectedChildPlanName,childPlanName);
      }
    }
  }
}",0.9206066012488848
93897,"public ModelBundleListenerInitializer(@NonNull RuntimeArtifactRepository artifactRepository,@NonNull PackageAdminUtil packageAdminUtil,@NonNull BundleContext kernelBundleContext,@NonNull BundleContext userRegionBundleContext){
  this.artifactRepository=artifactRepository;
  this.packageAdminUtil=packageAdminUtil;
  this.kernelBundleContext=kernelBundleContext;
  this.userRegionBundleContext=userRegionBundleContext;
  this.bundleListener=new ModelBundleListener(kernelBundleContext,artifactRepository,packageAdminUtil);
}","public ModelBundleListenerInitializer(@NonNull RuntimeArtifactRepository artifactRepository,@NonNull PackageAdminUtil packageAdminUtil,@NonNull BundleContext kernelBundleContext,@NonNull BundleContext userRegionBundleContext){
  this.artifactRepository=artifactRepository;
  this.packageAdminUtil=packageAdminUtil;
  this.kernelBundleContext=kernelBundleContext;
  this.userRegionBundleContext=userRegionBundleContext;
  this.systemBundleContext=kernelBundleContext.getBundle(0L).getBundleContext();
  this.bundleListener=new ModelBundleListener(kernelBundleContext,artifactRepository,packageAdminUtil);
}",0.9282550930026572
93898,"/** 
 * Unregisters the listener from the OSGi framework
 */
@PreDestroy public void destroy(){
  this.userRegionBundleContext.removeBundleListener(bundleListener);
}","/** 
 * Unregisters the listener from the OSGi framework
 */
@PreDestroy public void destroy(){
  this.systemBundleContext.removeBundleListener(this.bundleListener);
}",0.948948948948949
93899,"/** 
 * Registers a   {@link BundleListener} with the OSGi framework. Enumerates any existing {@link Bundle}s that exist from the OSGi framework.
 */
@PostConstruct public void initialize(){
  this.userRegionBundleContext.addBundleListener(bundleListener);
  for (  Bundle bundle : userRegionBundleContext.getBundles()) {
    try {
      this.artifactRepository.add(new BundleArtifact(kernelBundleContext,packageAdminUtil,bundle));
    }
 catch (    Exception e) {
      logger.error(String.format(""String_Node_Str"",bundle.getSymbolicName(),bundle.getVersion().toString()),e);
    }
  }
}","/** 
 * Registers a   {@link BundleListener} with the OSGi framework. Enumerates any existing {@link Bundle}s that exist from the OSGi framework.
 */
@PostConstruct public void initialize(){
  this.systemBundleContext.addBundleListener(this.bundleListener);
  for (  Bundle bundle : this.userRegionBundleContext.getBundles()) {
    try {
      this.artifactRepository.add(new BundleArtifact(this.kernelBundleContext,this.packageAdminUtil,bundle));
    }
 catch (    Exception e) {
      this.logger.error(String.format(""String_Node_Str"",bundle.getSymbolicName(),bundle.getVersion().toString()),e);
    }
  }
}",0.7050960735171261
93900,"@Test public void destroy() throws IOException, InvalidSyntaxException {
  this.initializer.initialize();
  assertEquals(1,this.bundleContext.getBundleListeners().size());
  this.initializer.destroy();
  assertEquals(0,this.bundleContext.getBundleListeners().size());
}","@Test public void destroy() throws IOException, InvalidSyntaxException {
  this.initializer.initialize();
  assertEquals(1,this.systemBundleContext.getBundleListeners().size());
  this.initializer.destroy();
  assertEquals(0,this.systemBundleContext.getBundleListeners().size());
}",0.9709090909090908
93901,"@Test public void initialize() throws IOException, InvalidSyntaxException {
  assertEquals(0,this.bundleContext.getBundleListeners().size());
  this.initializer.initialize();
  assertEquals(1,this.bundleContext.getBundleListeners().size());
  assertEquals(1,this.artifactRepository.getArtifacts().size());
}","@Test public void initialize() throws IOException, InvalidSyntaxException {
  assertEquals(0,this.systemBundleContext.getBundleListeners().size());
  this.initializer.initialize();
  assertEquals(1,this.systemBundleContext.getBundleListeners().size());
  assertEquals(1,this.artifactRepository.getArtifacts().size());
}",0.97444089456869
93902,"/** 
 * {@inheritDoc}
 */
public void activate(ComponentContext context){
  registerSpringDmToBlueprintEventAdapter(context.getBundleContext());
}","/** 
 * {@inheritDoc}
 */
public void activate(ComponentContext context){
  registerSpringDmToBlueprintEventAdapter(context.getBundleContext());
  context.enableComponent(AGENT_DM_START_TRACKER);
}",0.8513119533527697
93903,"/** 
 * {@inheritDoc}
 */
@Override public void connectRegion(Region tailRegion,RegionFilter filter) throws BundleException {
  this.regionDigraph.connect(this,tailRegion,filter);
}","/** 
 * {@inheritDoc}
 */
@Override public void connectRegion(Region tailRegion,RegionFilter filter) throws BundleException {
synchronized (this.updateMonitor) {
    this.regionDigraph.connect(this,tailRegion,filter);
  }
}",0.8960396039603961
93904,"/** 
 * {@inheritDoc}
 */
@Override public void addBundle(Bundle bundle) throws BundleException {
  checkBundleNotAssociatedWithAnotherRegion(bundle);
  String symbolicName=bundle.getSymbolicName();
  Version version=bundle.getVersion();
  checkDuplicateBundleInRegion(bundle,symbolicName,version);
  checkDuplicateBundleViaFilter(bundle,symbolicName,version);
  this.bundleIds.add(bundle.getBundleId());
}","/** 
 * {@inheritDoc}
 */
@Override public void addBundle(Bundle bundle) throws BundleException {
synchronized (this.updateMonitor) {
    checkBundleNotAssociatedWithAnotherRegion(bundle);
    String symbolicName=bundle.getSymbolicName();
    Version version=bundle.getVersion();
    checkDuplicateBundleInRegion(bundle,symbolicName,version);
    checkDuplicateBundleViaFilter(bundle,symbolicName,version);
    this.bundleIds.add(bundle.getBundleId());
  }
}",0.9398148148148148
93905,"/** 
 * {@inheritDoc}
 */
@Override public Bundle installBundle(String location) throws BundleException {
  return null;
}","/** 
 * {@inheritDoc}
 */
@Override public Bundle installBundle(String location) throws BundleException {
synchronized (this.updateMonitor) {
    return null;
  }
}",0.8531468531468531
93906,Filter getServiceFilter();,"/** 
 * Gets the service filter of this filter.
 * @return the service filter or <code>null</code> if this has not been set
 */
Filter getServiceFilter();",0.2888888888888888
93907,"@Override public boolean isImported(Region providerRegion,String packageName,Map<String,Object> attributes,Map<String,String> directives){
  return providerRegion == null || this.equals(providerRegion);
}","@Override public boolean isImported(String packageName,Map<String,Object> attributes,Map<String,String> directives){
  return false;
}",0.7869822485207101
93908,"private void createAndPublishUserRegion() throws BundleException {
  ImmutableRegion kernelRegion=new ImmutableRegion(REGION_KERNEL,this.bundleContext,new RegionPackageImportPolicy(){
    @Override public boolean isImported(    Region providerRegion,    String packageName,    Map<String,Object> attributes,    Map<String,String> directives){
      return providerRegion == null || this.equals(providerRegion);
    }
  }
);
  registerRegionService(kernelRegion);
  StandardRegionMembership regionMembership=new StandardRegionMembership(this.bundleContext.getBundle(),kernelRegion);
  registerRegionMembership(regionMembership,this.bundleContext);
  registerResolverHookFactory(new RegionResolverHookFactory(regionMembership));
  registerBundleEventHook(new RegionBundleEventHook(regionMembership));
  registerBundleFindHook(new RegionBundleFindHook(regionMembership));
  registerServiceEventHook(new RegionServiceEventHook(regionMembership,this.regionServiceImports,this.regionServiceExports));
  registerServiceFindHook(new RegionServiceFindHook(regionMembership,this.regionServiceImports,this.regionServiceExports));
}","private void createAndPublishUserRegion() throws BundleException {
  ImmutableRegion kernelRegion=new ImmutableRegion(REGION_KERNEL,this.bundleContext,new RegionPackageImportPolicy(){
    @Override public boolean isImported(    String packageName,    Map<String,Object> attributes,    Map<String,String> directives){
      return false;
    }
    @Override public Region getUserRegion(){
      return new Region(){
        @Override public void addBundle(        Bundle bundle) throws BundleException {
        }
        @Override public void connectRegion(        Region tailRegion,        RegionFilter filter) throws BundleException {
        }
        @Override public boolean contains(        Bundle bundle){
          return false;
        }
        @Override public Bundle getBundle(        String symbolicName,        Version version){
          return null;
        }
        @Override public BundleContext getBundleContext(){
          return null;
        }
        @Override public String getName(){
          return null;
        }
        @Override public RegionPackageImportPolicy getRegionPackageImportPolicy(){
          return null;
        }
        @Override public Bundle installBundle(        String location,        InputStream input) throws BundleException {
          return null;
        }
        @Override public Bundle installBundle(        String location) throws BundleException {
          return null;
        }
      }
;
    }
  }
);
  registerRegionService(kernelRegion);
  StandardRegionMembership regionMembership=new StandardRegionMembership(this.bundleContext.getBundle(),kernelRegion);
  registerRegionMembership(regionMembership,this.bundleContext);
  registerResolverHookFactory(new RegionResolverHookFactory(regionMembership));
  registerBundleEventHook(new RegionBundleEventHook(regionMembership));
  registerBundleFindHook(new RegionBundleFindHook(regionMembership));
  registerServiceEventHook(new RegionServiceEventHook(regionMembership,this.regionServiceImports,this.regionServiceExports));
  registerServiceFindHook(new RegionServiceFindHook(regionMembership,this.regionServiceImports,this.regionServiceExports));
}",0.6341760584830948
93909,"/** 
 * Returns <code>true</code> if and only if the package with the specified name exported with the specified attributes and directives is imported into the region.
 * @param providerRegion the region containing the bundle that exports the package
 * @param packageName the name of the package
 * @param attributes the package's export attributes
 * @param directives the package's export directives
 * @return <code>true</code> if and only if the package is imported
 */
boolean isImported(Region providerRegion,String packageName,Map<String,Object> attributes,Map<String,String> directives);","/** 
 * Returns <code>true</code> if and only if the package with the specified name exported with the specified attributes and directives is imported into the region.
 * @param packageName the name of the package
 * @param attributes the package's export attributes
 * @param directives the package's export directives
 * @return <code>true</code> if and only if the package is imported
 */
boolean isImported(String packageName,Map<String,Object> attributes,Map<String,String> directives);",0.7948482060717571
93910,"@Override public void filterMatches(BundleRevision requirer,Collection<Capability> candidates){
  Region requirerRegion=getRegion(requirer);
  if (requirerRegion != null) {
    RegionPackageImportPolicy requirerRegionPackageImportPolicy=requirerRegion.getRegionPackageImportPolicy();
    if (!this.kernelRegion.equals(requirerRegion)) {
      Iterator<Capability> i=candidates.iterator();
      while (i.hasNext()) {
        Capability c=i.next();
        if (this.kernelRegion.equals(getRegion(c.getProviderRevision()))) {
          String namespace=c.getNamespace();
          if (Capability.PACKAGE_CAPABILITY.equals(namespace)) {
            if (!requirerRegionPackageImportPolicy.isImported(this.kernelRegion,(String)c.getAttributes().get(Capability.PACKAGE_CAPABILITY),c.getAttributes(),c.getDirectives())) {
              i.remove();
            }
          }
 else {
            i.remove();
          }
        }
      }
    }
 else {
      Iterator<Capability> i=candidates.iterator();
      while (i.hasNext()) {
        Capability c=i.next();
        BundleRevision providerRevision=c.getProviderRevision();
        if (!isSystemBundle(providerRevision) && !this.kernelRegion.equals(getRegion(providerRevision))) {
          i.remove();
        }
      }
    }
  }
}","@Override public void filterMatches(BundleRevision requirer,Collection<Capability> candidates){
  Region requirerRegion=getRegion(requirer);
  if (requirerRegion != null) {
    RegionPackageImportPolicy requirerRegionPackageImportPolicy=requirerRegion.getRegionPackageImportPolicy();
    if (!this.kernelRegion.equals(requirerRegion)) {
      Iterator<Capability> i=candidates.iterator();
      while (i.hasNext()) {
        Capability c=i.next();
        if (this.kernelRegion.equals(getRegion(c.getProviderRevision()))) {
          String namespace=c.getNamespace();
          if (Capability.PACKAGE_CAPABILITY.equals(namespace)) {
            if (requirerRegionPackageImportPolicy.getUserRegion().equals(this.kernelRegion)) {
              i.remove();
            }
 else             if (!requirerRegionPackageImportPolicy.isImported((String)c.getAttributes().get(Capability.PACKAGE_CAPABILITY),c.getAttributes(),c.getDirectives())) {
              i.remove();
            }
          }
 else {
            i.remove();
          }
        }
      }
    }
 else {
      Iterator<Capability> i=candidates.iterator();
      while (i.hasNext()) {
        Capability c=i.next();
        BundleRevision providerRevision=c.getProviderRevision();
        if (!isSystemBundle(providerRevision) && !this.kernelRegion.equals(getRegion(providerRevision))) {
          i.remove();
        }
      }
    }
  }
}",0.9361225252147928
93911,"private Long getBundleId(BundleRevision bundleRevision){
  if (bundleRevision instanceof ResolverBundle) {
    ResolverBundle resolverBundle=(ResolverBundle)bundleRevision;
    return resolverBundle.getBundleDescription().getBundleId();
  }
  Assert.isTrue(false,""String_Node_Str"",bundleRevision);
  return INVALID_BUNDLE_ID;
}","private Long getBundleId(BundleRevision bundleRevision){
  Bundle bundle=bundleRevision.getBundle();
  if (bundle != null) {
    return bundle.getBundleId();
  }
  if (bundleRevision instanceof ResolverBundle) {
    ResolverBundle resolverBundle=(ResolverBundle)bundleRevision;
    return resolverBundle.getBundleDescription().getBundleId();
  }
  Assert.isTrue(false,""String_Node_Str"",bundleRevision);
  return INVALID_BUNDLE_ID;
}",0.8616600790513834
93912,"@Test public void testFindTransitive() throws BundleException {
  region(REGION_A).connectRegion(region(REGION_B),createFilter(BUNDLE_C));
  region(REGION_B).connectRegion(region(REGION_C),createFilter(BUNDLE_C));
  region(REGION_C).addBundle(bundle(BUNDLE_X));
  this.candidates.add(bundle(BUNDLE_B));
  this.candidates.add(bundle(BUNDLE_C));
  this.bundleFindHook.find(bundleContext(BUNDLE_A),this.candidates);
  assertTrue(this.candidates.contains(bundle(BUNDLE_C)));
  assertFalse(this.candidates.contains(bundle(BUNDLE_B)));
  assertFalse(this.candidates.contains(bundle(BUNDLE_X)));
}","@Test public void testFindTransitive() throws BundleException {
  region(REGION_A).connectRegion(region(REGION_B),createFilter(BUNDLE_C));
  region(REGION_B).connectRegion(region(REGION_C),createFilter(BUNDLE_C));
  region(REGION_C).addBundle(bundle(BUNDLE_X));
  this.candidates.add(bundle(BUNDLE_B));
  this.candidates.add(bundle(BUNDLE_C));
  this.candidates.add(bundle(BUNDLE_X));
  this.bundleFindHook.find(bundleContext(BUNDLE_A),this.candidates);
  assertTrue(this.candidates.contains(bundle(BUNDLE_C)));
  assertFalse(this.candidates.contains(bundle(BUNDLE_B)));
  assertFalse(this.candidates.contains(bundle(BUNDLE_X)));
}",0.9664209664209664
93913,"public StandardStateService(QuasiFrameworkFactory quasiFrameworkFactory,BundleContext bundleContext,RegionMembership regionMembership){
  this.quasiFrameworkFactory=quasiFrameworkFactory;
  this.bundleContext=bundleContext;
  this.regionMembership=regionMembership;
  try {
    this.kernelRegion=regionMembership.getRegion(FrameworkUtil.getBundle(this.getClass()));
  }
 catch (  IndeterminateRegionException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","public StandardStateService(QuasiFrameworkFactory quasiFrameworkFactory,BundleContext bundleContext,RegionMembership regionMembership){
  this.quasiFrameworkFactory=quasiFrameworkFactory;
  this.bundleContext=bundleContext;
  this.regionMembership=regionMembership;
  this.kernelRegion=regionMembership.getKernelRegion();
}",0.7974842767295598
93914,"/** 
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  this.stubBundleContext=new StubBundleContext();
  this.stubQuasiFrameworkFactory=new StubQuasiFrameworkFactory();
  this.mockUserRegion=EasyMock.createMock(Region.class);
  this.mockRegionMembership=EasyMock.createMock(RegionMembership.class);
  this.standardStateService=new StandardStateService(this.stubQuasiFrameworkFactory,this.stubBundleContext,this.mockRegionMembership);
  EasyMock.expect(this.mockRegionMembership.getRegion(EasyMock.anyLong())).andReturn(this.mockUserRegion).anyTimes();
  EasyMock.replay(this.mockUserRegion,this.mockRegionMembership);
}","/** 
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  this.stubBundleContext=new StubBundleContext();
  this.stubQuasiFrameworkFactory=new StubQuasiFrameworkFactory();
  this.mockUserRegion=EasyMock.createMock(Region.class);
  this.mockKernelRegion=EasyMock.createMock(Region.class);
  this.mockRegionMembership=EasyMock.createMock(RegionMembership.class);
  EasyMock.expect(this.mockRegionMembership.getRegion(EasyMock.anyLong())).andReturn(this.mockUserRegion).anyTimes();
  EasyMock.expect(this.mockRegionMembership.getKernelRegion()).andReturn(this.mockKernelRegion).anyTimes();
  EasyMock.replay(this.mockUserRegion,this.mockKernelRegion,this.mockRegionMembership);
  this.standardStateService=new StandardStateService(this.stubQuasiFrameworkFactory,this.stubBundleContext,this.mockRegionMembership);
}",0.5926421404682274
93915,"@Override public void filterResolvable(Collection<BundleRevision> candidates){
  if (!this.triggerInRegion) {
    Iterator<BundleRevision> i=candidates.iterator();
    while (i.hasNext()) {
      if (isMember(i.next())) {
        i.remove();
      }
    }
  }
}","@Override public void filterResolvable(Collection<BundleRevision> candidates){
  if (!this.triggerInRegion) {
    Iterator<BundleRevision> i=candidates.iterator();
    while (i.hasNext()) {
      BundleRevision nextCandidate=i.next();
      if (isMember(nextCandidate) && !isSystemBundle(nextCandidate)) {
        i.remove();
      }
    }
  }
}",0.834983498349835
93916,"private boolean isMember(BundleRevision bundleRevision){
  Bundle bundle=bundleRevision.getBundle();
  if (bundle != null) {
    return isUserRegionBundle(bundle);
  }
  if (bundleRevision instanceof ResolverBundle) {
    ResolverBundle resolverBundle=(ResolverBundle)bundleRevision;
    return isUserRegionBundle(resolverBundle.getBundleDescription().getBundleId());
  }
  Assert.isTrue(false,""String_Node_Str"",bundleRevision);
  return true;
}","private boolean isMember(BundleRevision bundleRevision){
  Bundle bundle=bundleRevision.getBundle();
  if (bundle != null) {
    return isUserRegionBundle(bundle);
  }
  Long bundleId=getBundleId(bundleRevision);
  return isUserRegionBundle(bundleId);
}",0.5931232091690545
93917,"@Override public void filterMatches(BundleRevision requirer,Collection<Capability> candidates){
  if (isMember(requirer)) {
    Iterator<Capability> i=candidates.iterator();
    while (i.hasNext()) {
      Capability c=i.next();
      if (!isMember(c.getProviderRevision())) {
        String namespace=c.getNamespace();
        if (Capability.BUNDLE_CAPABILITY.equals(namespace)) {
          i.remove();
        }
        if (Capability.PACKAGE_CAPABILITY.equals(namespace)) {
          if (!imported((String)c.getAttributes().get(Capability.PACKAGE_CAPABILITY),c.getAttributes(),c.getDirectives())) {
            i.remove();
          }
        }
      }
    }
  }
 else {
    Iterator<Capability> i=candidates.iterator();
    while (i.hasNext()) {
      Capability c=i.next();
      if (!isMember(c.getProviderRevision())) {
        i.remove();
      }
    }
  }
}","@Override public void filterMatches(BundleRevision requirer,Collection<Capability> candidates){
  if (isMember(requirer)) {
    Iterator<Capability> i=candidates.iterator();
    while (i.hasNext()) {
      Capability c=i.next();
      if (!isMember(c.getProviderRevision())) {
        String namespace=c.getNamespace();
        if (Capability.BUNDLE_CAPABILITY.equals(namespace)) {
          i.remove();
        }
        if (Capability.PACKAGE_CAPABILITY.equals(namespace)) {
          if (!imported((String)c.getAttributes().get(Capability.PACKAGE_CAPABILITY),c.getAttributes(),c.getDirectives())) {
            i.remove();
          }
        }
      }
    }
  }
 else {
    Iterator<Capability> i=candidates.iterator();
    while (i.hasNext()) {
      Capability c=i.next();
      BundleRevision providerRevision=c.getProviderRevision();
      if (isMember(providerRevision) && !isSystemBundle(providerRevision)) {
        i.remove();
      }
    }
  }
}",0.9331140350877192
93918,"@Before public void basicSetUp(){
  this.bundle[0]=new StubBundle(0L,""String_Node_Str"",new Version(""String_Node_Str""),""String_Node_Str"");
  this.bundle[1]=new StubBundle(1L,""String_Node_Str"",new Version(""String_Node_Str""),""String_Node_Str"");
  this.bundle[2]=new StubBundle(2L,""String_Node_Str"",new Version(""String_Node_Str""),""String_Node_Str"");
  regionMembership=new StubRegionMembership(2L);
}","@Before public void basicSetUp(){
  this.bundle[SYSTEM_BUNDLE_INDEX]=new StubBundle(0L,""String_Node_Str"",new Version(""String_Node_Str""),""String_Node_Str"");
  this.bundle[KERNEL_BUNDLE_INDEX]=new StubBundle(1L,""String_Node_Str"",new Version(""String_Node_Str""),""String_Node_Str"");
  this.bundle[USER_REGION_BUNDLE_INDEX]=new StubBundle(2L,""String_Node_Str"",new Version(""String_Node_Str""),""String_Node_Str"");
  regionMembership=new StubRegionMembership(2L);
}",0.9236192714453584
93919,"/** 
 * @throws java.lang.Exception
 */
@Before public void basicServiceSetUp() throws Exception {
  for (int i=0; i < 3; i++) {
    StubServiceRegistration<String> reg=new StubServiceRegistration<String>((StubBundleContext)getBundle(i).getBundleContext(),""String_Node_Str"");
    serviceReference[i]=new StubServiceReference<String>(reg);
  }
}","/** 
 * @throws java.lang.Exception
 */
@Before public void basicServiceSetUp() throws Exception {
  for (int i=0; i < NUM_BUNDLES; i++) {
    StubServiceRegistration<String> reg=new StubServiceRegistration<String>((StubBundleContext)getBundle(i).getBundleContext(),""String_Node_Str"");
    serviceReference[i]=new StubServiceReference<String>(reg);
  }
}",0.982808022922636
93920,"void assertServiceReferencePresent(Collection<ServiceReference<?>> serviceReferences,int[] indices){
  for (  int i : indices) {
    assertTrue(serviceReferences.contains(getServiceReference(i)));
  }
}","void assertServiceReferencePresent(Collection<ServiceReference<?>> serviceReferences,int... indices){
  for (  int i : indices) {
    assertTrue(serviceReferences.contains(getServiceReference(i)));
  }
}",0.9876543209876544
93921,"@Test public void testEventFromSystemBundle(){
  BundleEvent event=getBundleEvent(0);
  this.regionBundleEventHook.event(event,this.bundleContexts);
  assertContextPresent(0,1,2);
}","@Test public void testEventFromSystemBundle(){
  BundleEvent event=getBundleEvent(SYSTEM_BUNDLE_INDEX);
  this.regionBundleEventHook.event(event,this.bundleContexts);
  assertContextPresent(SYSTEM_BUNDLE_INDEX,KERNEL_BUNDLE_INDEX,USER_REGION_BUNDLE_INDEX);
}",0.806378132118451
93922,"@Test public void testEventFromKernelRegion(){
  BundleEvent event=getBundleEvent(1);
  this.regionBundleEventHook.event(event,this.bundleContexts);
  assertContextPresent(0,1);
}","@Test public void testEventFromKernelRegion(){
  BundleEvent event=getBundleEvent(KERNEL_BUNDLE_INDEX);
  this.regionBundleEventHook.event(event,this.bundleContexts);
  assertContextPresent(SYSTEM_BUNDLE_INDEX,KERNEL_BUNDLE_INDEX);
}",0.8543689320388349
93923,"@Test public void testEventFromUserRegion(){
  BundleEvent event=getBundleEvent(2);
  this.regionBundleEventHook.event(event,this.bundleContexts);
  assertContextPresent(0,2);
}","@Test public void testEventFromUserRegion(){
  BundleEvent event=getBundleEvent(USER_REGION_BUNDLE_INDEX);
  this.regionBundleEventHook.event(event,this.bundleContexts);
  assertContextPresent(SYSTEM_BUNDLE_INDEX,USER_REGION_BUNDLE_INDEX);
}",0.8325358851674641
93924,"@Test public void testFindByKernelBundle(){
  this.bundles=getBundles();
  this.regionBundleFindHook.find(getBundleContext(1),this.bundles);
  assertBundlePresent(0,1);
}","@Test public void testFindByKernelBundle(){
  this.bundles=getBundles();
  this.regionBundleFindHook.find(getBundleContext(KERNEL_BUNDLE_INDEX),this.bundles);
  assertBundlePresent(SYSTEM_BUNDLE_INDEX,KERNEL_BUNDLE_INDEX);
}",0.8477157360406091
93925,"@Test public void testFindBySystemBundle(){
  this.bundles=getBundles();
  this.regionBundleFindHook.find(getBundleContext(0),this.bundles);
  assertBundlePresent(0,1,2);
}","@Test public void testFindBySystemBundle(){
  this.bundles=getBundles();
  this.regionBundleFindHook.find(getBundleContext(SYSTEM_BUNDLE_INDEX),this.bundles);
  assertBundlePresent(SYSTEM_BUNDLE_INDEX,KERNEL_BUNDLE_INDEX,USER_REGION_BUNDLE_INDEX);
}",0.7980997624703088
93926,"@Test public void testFindByUserRegionBundle(){
  this.bundles=getBundles();
  this.regionBundleFindHook.find(getBundleContext(2),this.bundles);
  assertBundlePresent(0,2);
}","@Test public void testFindByUserRegionBundle(){
  this.bundles=getBundles();
  this.regionBundleFindHook.find(getBundleContext(USER_REGION_BUNDLE_INDEX),this.bundles);
  assertBundlePresent(SYSTEM_BUNDLE_INDEX,USER_REGION_BUNDLE_INDEX);
}",0.8300970873786407
93927,"@Test public void testIsSystemBundleBundleContext(){
  Assert.assertTrue(RegionHookBase.isSystemBundle(getBundle(0).getBundleContext()));
  Assert.assertFalse(RegionHookBase.isSystemBundle(getBundle(1).getBundleContext()));
}","@Test public void testIsSystemBundleBundleContext(){
  Assert.assertTrue(RegionHookBase.isSystemBundle(getBundleContext(SYSTEM_BUNDLE_INDEX)));
  Assert.assertFalse(RegionHookBase.isSystemBundle(getBundleContext(KERNEL_BUNDLE_INDEX)));
}",0.8614718614718615
93928,"@Test public void testIsUserRegionBundleBundle(){
  Assert.assertTrue(this.testRegionHook.isUserRegionBundle(getBundle(0)));
  Assert.assertFalse(this.testRegionHook.isUserRegionBundle(getBundle(1)));
  Assert.assertTrue(this.testRegionHook.isUserRegionBundle(getBundle(2)));
}","@Test public void testIsUserRegionBundleBundle(){
  Assert.assertTrue(this.testRegionHook.isUserRegionBundle(getBundle(SYSTEM_BUNDLE_INDEX)));
  Assert.assertFalse(this.testRegionHook.isUserRegionBundle(getBundle(KERNEL_BUNDLE_INDEX)));
  Assert.assertTrue(this.testRegionHook.isUserRegionBundle(getBundle(USER_REGION_BUNDLE_INDEX)));
}",0.8939641109298532
93929,"@Test public void testIsUserRegionBundleLong(){
  Assert.assertTrue(this.testRegionHook.isUserRegionBundle(getBundle(0).getBundleId()));
  Assert.assertFalse(this.testRegionHook.isUserRegionBundle(getBundle(1).getBundleId()));
  Assert.assertTrue(this.testRegionHook.isUserRegionBundle(getBundle(2).getBundleId()));
}","@Test public void testIsUserRegionBundleLong(){
  Assert.assertTrue(this.testRegionHook.isUserRegionBundle(getBundleId(SYSTEM_BUNDLE_INDEX)));
  Assert.assertFalse(this.testRegionHook.isUserRegionBundle(getBundleId(KERNEL_BUNDLE_INDEX)));
  Assert.assertTrue(this.testRegionHook.isUserRegionBundle(getBundleId(USER_REGION_BUNDLE_INDEX)));
}",0.8188736681887366
93930,"@Test public void testIsUserRegionBundleBundleContext(){
  Assert.assertTrue(this.testRegionHook.isUserRegionBundle(getBundle(0).getBundleContext()));
  Assert.assertFalse(this.testRegionHook.isUserRegionBundle(getBundle(1).getBundleContext()));
  Assert.assertTrue(this.testRegionHook.isUserRegionBundle(getBundle(2).getBundleContext()));
}","@Test public void testIsUserRegionBundleBundleContext(){
  Assert.assertTrue(this.testRegionHook.isUserRegionBundle(getBundleContext(SYSTEM_BUNDLE_INDEX)));
  Assert.assertFalse(this.testRegionHook.isUserRegionBundle(getBundleContext(KERNEL_BUNDLE_INDEX)));
  Assert.assertTrue(this.testRegionHook.isUserRegionBundle(getBundleContext(USER_REGION_BUNDLE_INDEX)));
}",0.8567375886524823
93931,"@Test public void testIsSystemBundleBundle(){
  Assert.assertTrue(RegionHookBase.isSystemBundle(getBundle(0)));
  Assert.assertFalse(RegionHookBase.isSystemBundle(getBundle(1)));
}","@Test public void testIsSystemBundleBundle(){
  Assert.assertTrue(RegionHookBase.isSystemBundle(getBundle(SYSTEM_BUNDLE_INDEX)));
  Assert.assertFalse(RegionHookBase.isSystemBundle(getBundle(KERNEL_BUNDLE_INDEX)));
}",0.898989898989899
93932,"@Override public void filterMatches(BundleRevision requirer,Collection<Capability> candidates){
  if (isMember(requirer.getBundle())) {
    Iterator<Capability> i=candidates.iterator();
    while (i.hasNext()) {
      Capability c=i.next();
      Bundle providerBundle=c.getProviderRevision().getBundle();
      if (!isMember(providerBundle)) {
        String namespace=c.getNamespace();
        if (Capability.BUNDLE_CAPABILITY.equals(namespace)) {
          i.remove();
        }
        if (Capability.PACKAGE_CAPABILITY.equals(namespace)) {
          if (!imported((String)c.getAttributes().get(Capability.PACKAGE_CAPABILITY),c.getAttributes(),c.getDirectives())) {
            i.remove();
          }
        }
      }
    }
  }
}","@Override public void filterMatches(BundleRevision requirer,Collection<Capability> candidates){
  if (isMember(requirer.getBundle())) {
    Iterator<Capability> i=candidates.iterator();
    while (i.hasNext()) {
      Capability c=i.next();
      Bundle providerBundle=c.getProviderRevision().getBundle();
      if (!isMember(providerBundle)) {
        String namespace=c.getNamespace();
        if (Capability.BUNDLE_CAPABILITY.equals(namespace)) {
          i.remove();
        }
        if (Capability.PACKAGE_CAPABILITY.equals(namespace)) {
          if (!imported((String)c.getAttributes().get(Capability.PACKAGE_CAPABILITY),c.getAttributes(),c.getDirectives())) {
            i.remove();
          }
        }
      }
    }
  }
 else {
    Iterator<Capability> i=candidates.iterator();
    while (i.hasNext()) {
      Capability c=i.next();
      Bundle providerBundle=c.getProviderRevision().getBundle();
      if (!isMember(providerBundle)) {
        i.remove();
      }
    }
  }
}",0.8521739130434782
93933,"/** 
 * Calculates the dependencies of the supplied set of   {@link BundleDescription bundles}. <p/> Callers must supply a   {@link State} against which dependency satisfaction is executed. The supplied State isdestructively modified during constraint satisfaction so it <strong>must</strong> not be the system state. <p/> In a successful invocation, any new bundles that need to be installed are returned, and the supplied <code>State</code> is transformed to reflect the newly resolved state of the supplied bundles. Callers can query the <code>State</code> to find the fully wiring graph of the supplied bundles after successful constraint satisfaction. <p/> If diagnostics are forced, then an  {@link UnableToSatisfyDependenciesException} is thrown if the constraintscannot be satisfied. If diagnostics are not forced, then either an <code>UnableToSatisfyDependenciesException</code> is thrown or the new bundles that need to be installed are returned depending on whether cloning some bundles may improve the chances of satisfying the constraints.
 * @param state the <code>State</code> to satisfy against.
 * @param bundles the bundles to calculate dependencies for.
 * @return an array of descriptions of bundles that need to be added to the state to satisfy constraints.
 * @throws BundleException 
 * @throws UnableToSatisfyDependenciesException 
 */
public BundleDescription[] calculateDependencies(State state,BundleDescription[] bundles) throws BundleException, UnableToSatisfyDependenciesException {
  this.logger.info(""String_Node_Str"",bundles);
synchronized (this.monitor) {
    doSatisfyConstraints(bundles,state);
    StateDelta delta=state.resolve(bundles);
    for (    BundleDescription description : bundles) {
      if (!description.isResolved()) {
        generateDump(state);
        ResolverErrorsHolder reh=new ResolverErrorsHolder();
        String failure=this.detective.generateFailureDescription(state,description,reh);
        ResolverError[] resolverErrors=reh.getResolverErrors();
        if (resolverErrors != null) {
          for (          ResolverError resolverError : resolverErrors) {
            if (resolverError.getType() == ResolverError.IMPORT_PACKAGE_USES_CONFLICT) {
              VersionConstraint unsatisfiedConstraint=resolverError.getUnsatisfiedConstraint();
              if ((unsatisfiedConstraint instanceof ImportPackageSpecification)) {
                ImportPackageSpecification importPackageSpecification=(ImportPackageSpecification)unsatisfiedConstraint;
                this.logger.debug(""String_Node_Str"",new Object[]{importPackageSpecification.getName(),importPackageSpecification.getVersionRange(),importPackageSpecification.getBundleSymbolicName(),importPackageSpecification.getBundleVersionRange()});
              }
            }
          }
        }
        throw new UnableToSatisfyBundleDependenciesException(description.getSymbolicName(),description.getVersion(),failure,state,reh.getResolverErrors());
      }
    }
    BundleDelta[] deltas=delta.getChanges(BundleDelta.ADDED,false);
    Set<BundleDescription> newBundles=new HashSet<BundleDescription>();
    for (    BundleDelta bundleDelta : deltas) {
      newBundles.add(bundleDelta.getBundle());
    }
    Set<BundleDescription> dependenciesSet=getNewTransitiveDependencies(new HashSet<BundleDescription>(Arrays.asList(bundles)),newBundles);
    List<BundleDescription> dependencies=new ArrayList<BundleDescription>(dependenciesSet);
    this.logger.info(""String_Node_Str"",Arrays.toString(bundles),dependencies);
    Collections.sort(dependencies,new BundleDescriptionComparator());
    BundleDescription[] dependencyDescriptions=dependencies.toArray(new BundleDescription[dependencies.size()]);
    return dependencyDescriptions;
  }
}","/** 
 * Calculates the dependencies of the supplied set of   {@link BundleDescription bundles}. <p/> Callers must supply a   {@link State} against which dependency satisfaction is executed. The supplied State isdestructively modified during constraint satisfaction so it <strong>must</strong> not be the system state. <p/> In a successful invocation, any new bundles that need to be installed are returned, and the supplied <code>State</code> is transformed to reflect the newly resolved state of the supplied bundles. Callers can query the <code>State</code> to find the fully wiring graph of the supplied bundles after successful constraint satisfaction. <p/> If diagnostics are forced, then an  {@link UnableToSatisfyDependenciesException} is thrown if the constraintscannot be satisfied. If diagnostics are not forced, then either an <code>UnableToSatisfyDependenciesException</code> is thrown or the new bundles that need to be installed are returned depending on whether cloning some bundles may improve the chances of satisfying the constraints.
 * @param state the <code>State</code> to satisfy against.
 * @param bundles the bundles to calculate dependencies for.
 * @return an array of descriptions of bundles that need to be added to the state to satisfy constraints.
 * @throws BundleException
 * @throws UnableToSatisfyDependenciesException
 */
public BundleDescription[] calculateDependencies(State state,BundleDescription[] bundles) throws BundleException, UnableToSatisfyDependenciesException {
  this.logger.info(""String_Node_Str"",bundles);
synchronized (this.monitor) {
    doSatisfyConstraints(bundles,state);
    StateDelta delta=state.resolve(bundles);
    for (    BundleDescription description : bundles) {
      if (!description.isResolved()) {
        generateDump(state);
        ResolverErrorsHolder reh=new ResolverErrorsHolder();
        String failure=this.detective.generateFailureDescription(state,description,reh);
        ResolverError[] resolverErrors=reh.getResolverErrors();
        if (resolverErrors != null) {
          for (          ResolverError resolverError : resolverErrors) {
            if (resolverError.getType() == ResolverError.IMPORT_PACKAGE_USES_CONFLICT) {
              VersionConstraint unsatisfiedConstraint=resolverError.getUnsatisfiedConstraint();
              if ((unsatisfiedConstraint instanceof ImportPackageSpecification)) {
                ImportPackageSpecification importPackageSpecification=(ImportPackageSpecification)unsatisfiedConstraint;
                this.logger.debug(""String_Node_Str"",new Object[]{importPackageSpecification.getName(),importPackageSpecification.getVersionRange(),importPackageSpecification.getBundleSymbolicName(),importPackageSpecification.getBundleVersionRange()});
              }
            }
          }
        }
        throw new UnableToSatisfyBundleDependenciesException(description.getSymbolicName(),description.getVersion(),failure,state,reh.getResolverErrors());
      }
    }
    BundleDelta[] deltas=delta.getChanges(BundleDelta.ADDED,false);
    Set<BundleDescription> newBundles=new HashSet<BundleDescription>();
    for (    BundleDelta bundleDelta : deltas) {
      newBundles.add(bundleDelta.getBundle());
    }
    Set<BundleDescription> dependenciesSet=getNewTransitiveDependencies(new HashSet<BundleDescription>(Arrays.asList(bundles)),newBundles);
    List<BundleDescription> dependencies=new ArrayList<BundleDescription>(dependenciesSet);
    this.logger.info(""String_Node_Str"",Arrays.toString(bundles),dependencies);
    Collections.sort(dependencies,new BundleDescriptionComparator());
    BundleDescription[] dependencyDescriptions=dependencies.toArray(new BundleDescription[dependencies.size()]);
    return dependencyDescriptions;
  }
}",0.9997342545841084
93934,"private BundleDescription createBundleDescription(ArtifactDescriptor artifact,State state) throws BundleException {
  Dictionary<String,String> manifest=BundleBridge.convertToDictionary(artifact);
  try {
    URI uri=artifact.getUri();
    if (""String_Node_Str"".equals(uri.getScheme())) {
      return this.stateObjectFactory.createBundleDescription(state,manifest,new File(uri).getAbsolutePath(),this.bundleId.getAndIncrement());
    }
 else {
      return this.stateObjectFactory.createBundleDescription(state,manifest,uri.toString(),this.bundleId.getAndIncrement());
    }
  }
 catch (  RuntimeException e) {
    throw new BundleException(""String_Node_Str"" + artifact.getUri() + ""String_Node_Str"",e);
  }
catch (  BundleException be) {
    throw new BundleException(""String_Node_Str"" + artifact.getUri() + ""String_Node_Str"",be);
  }
}","private BundleDescription createBundleDescription(ArtifactDescriptor artifact,State state) throws BundleException {
  Dictionary<String,String> manifest=BundleBridge.convertToDictionary(artifact);
  try {
    URI uri=artifact.getUri();
    String installLocation=""String_Node_Str"".equals(uri.getScheme()) ? new File(uri).getAbsolutePath() : uri.toString();
    return this.stateObjectFactory.createBundleDescription(state,manifest,USER_REGION_TAG + installLocation,this.bundleId.getAndIncrement());
  }
 catch (  RuntimeException e) {
    throw new BundleException(""String_Node_Str"" + artifact.getUri() + ""String_Node_Str"",e);
  }
catch (  BundleException be) {
    throw new BundleException(""String_Node_Str"" + artifact.getUri() + ""String_Node_Str"",be);
  }
}",0.8090169067000627
93935,"private StandardQuasiBundle doInstall(URI location,BundleManifest bundleManifest) throws BundleException {
  try {
    Dictionary<String,String> manifest=bundleManifest.toDictionary();
    String installLocation=""String_Node_Str"".equals(location.getScheme()) ? new File(location).getAbsolutePath() : location.toString();
    BundleDescription bundleDescription=this.stateObjectFactory.createBundleDescription(this.state,manifest,installLocation,nextBundleId());
    this.state.addBundle(bundleDescription);
    return new StandardQuasiBundle(bundleDescription,bundleManifest,this.stateHelper);
  }
 catch (  RuntimeException e) {
    throw new BundleException(""String_Node_Str"" + location + ""String_Node_Str"",e);
  }
}","private StandardQuasiBundle doInstall(URI location,BundleManifest bundleManifest) throws BundleException {
  try {
    Dictionary<String,String> manifest=bundleManifest.toDictionary();
    String installLocation=""String_Node_Str"".equals(location.getScheme()) ? new File(location).getAbsolutePath() : location.toString();
    BundleDescription bundleDescription=this.stateObjectFactory.createBundleDescription(this.state,manifest,USER_REGION_TAG + installLocation,nextBundleId());
    this.state.addBundle(bundleDescription);
    return new StandardQuasiBundle(bundleDescription,bundleManifest,this.stateHelper);
  }
 catch (  RuntimeException e) {
    throw new BundleException(""String_Node_Str"" + location + ""String_Node_Str"",e);
  }
}",0.9876203576341128
93936,"private void createAndPublishUserRegion() throws BundleException {
  registerRegionService(new ImmutableRegion(REGION_KERNEL,this.bundleContext));
  String userRegionImportsProperty=this.regionImports != null ? this.regionImports : this.bundleContext.getProperty(USER_REGION_PACKAGE_IMPORTS_PROPERTY);
  String expandedUserRegionImportsProperty=null;
  if (userRegionImportsProperty != null) {
    expandedUserRegionImportsProperty=PackageImportWildcardExpander.expandPackageImportsWildcards(userRegionImportsProperty,this.bundleContext);
  }
  RegionMembership regionMembership=new RegionMembership(){
    @Override public boolean contains(    Bundle bundle){
      long bundleId=bundle.getBundleId();
      return bundleId > bundleContext.getBundle().getBundleId() || bundleId == 0L;
    }
  }
;
  registerResolverHookFactory(new RegionResolverHookFactory(regionMembership,expandedUserRegionImportsProperty));
  registerBundleEventHook(new RegionBundleEventHook(regionMembership));
  registerBundleFindHook(new RegionBundleFindHook(regionMembership));
  BundleContext userRegionBundleContext=initialiseUserRegionBundles();
  registerRegionService(new ImmutableRegion(REGION_USER,userRegionBundleContext));
  publishUserRegionBundleContext(userRegionBundleContext);
}","private void createAndPublishUserRegion() throws BundleException {
  registerRegionService(new ImmutableRegion(REGION_KERNEL,this.bundleContext));
  String userRegionImportsProperty=this.regionImports != null ? this.regionImports : this.bundleContext.getProperty(USER_REGION_PACKAGE_IMPORTS_PROPERTY);
  String expandedUserRegionImportsProperty=null;
  if (userRegionImportsProperty != null) {
    expandedUserRegionImportsProperty=PackageImportWildcardExpander.expandPackageImportsWildcards(userRegionImportsProperty,this.bundleContext);
  }
  RegionMembership regionMembership=new RegionMembership(){
    @Override public boolean contains(    Bundle bundle){
      long bundleId=bundle.getBundleId();
      return contains(bundleId);
    }
    @Override public boolean contains(    Long bundleId){
      return bundleId > bundleContext.getBundle().getBundleId() || bundleId == 0L;
    }
  }
;
  registerResolverHookFactory(new RegionResolverHookFactory(regionMembership,expandedUserRegionImportsProperty));
  registerBundleEventHook(new RegionBundleEventHook(regionMembership));
  registerBundleFindHook(new RegionBundleFindHook(regionMembership));
  BundleContext userRegionBundleContext=initialiseUserRegionBundles();
  registerRegionService(new ImmutableRegion(REGION_USER,userRegionBundleContext));
  publishUserRegionBundleContext(userRegionBundleContext);
}",0.9631598936574248
93937,"@Override public boolean contains(Bundle bundle){
  long bundleId=bundle.getBundleId();
  return bundleId > bundleContext.getBundle().getBundleId() || bundleId == 0L;
}","@Override public boolean contains(Long bundleId){
  return bundleId > bundleContext.getBundle().getBundleId() || bundleId == 0L;
}",0.8590604026845637
93938,"/** 
 * Determines whether or not the specified bundle belongs to the region represented by this   {@link RegionMembership}.
 * @param bundle the {@link Bundle} to be checked for membership
 * @return <code>true</code> if and only if the specified bundle belongs to the region
 */
boolean contains(Bundle bundle);","/** 
 * Determines whether or not the bundle with the specified bundle id belongs to the region represented by this  {@link RegionMembership}.
 * @param bundleId the id of the {@link Bundle} to be checked for membership
 * @return <code>true</code> if and only if the specified bundle belongs to the region
 */
boolean contains(Long bundleId);",0.8628048780487805
93939,"@Override public void filterResolvable(Collection<BundleRevision> candidates){
  Iterator<BundleRevision> i=candidates.iterator();
  while (i.hasNext()) {
    if (!isMember(i.next().getBundle())) {
      i.remove();
    }
  }
}","@Override public void filterResolvable(Collection<BundleRevision> candidates){
  if (!this.triggerInRegion) {
    Iterator<BundleRevision> i=candidates.iterator();
    while (i.hasNext()) {
      if (isMember(i.next())) {
        i.remove();
      }
    }
  }
}",0.8278688524590164
93940,"private boolean isMember(Bundle bundle){
  return this.regionMembership.contains(bundle);
}","private boolean isMember(BundleRevision bundleRevision){
  Bundle bundle=bundleRevision.getBundle();
  if (bundle != null) {
    return this.regionMembership.contains(bundle);
  }
  if (bundleRevision instanceof ResolverBundle) {
    ResolverBundle resolverBundle=(ResolverBundle)bundleRevision;
    return this.regionMembership.contains(resolverBundle.getBundleDescription().getBundleId());
  }
  Assert.isTrue(false,""String_Node_Str"",bundleRevision);
  return true;
}",0.3
93941,"@Override public void filterMatches(BundleRevision requirer,Collection<Capability> candidates){
  if (isMember(requirer.getBundle())) {
    Iterator<Capability> i=candidates.iterator();
    while (i.hasNext()) {
      Capability c=i.next();
      Bundle providerBundle=c.getProviderRevision().getBundle();
      if (!isMember(providerBundle)) {
        String namespace=c.getNamespace();
        if (Capability.BUNDLE_CAPABILITY.equals(namespace)) {
          i.remove();
        }
        if (Capability.PACKAGE_CAPABILITY.equals(namespace)) {
          if (!imported((String)c.getAttributes().get(Capability.PACKAGE_CAPABILITY),c.getAttributes(),c.getDirectives())) {
            i.remove();
          }
        }
      }
    }
  }
 else {
    Iterator<Capability> i=candidates.iterator();
    while (i.hasNext()) {
      Capability c=i.next();
      Bundle providerBundle=c.getProviderRevision().getBundle();
      if (!isMember(providerBundle)) {
        i.remove();
      }
    }
  }
}","@Override public void filterMatches(BundleRevision requirer,Collection<Capability> candidates){
  if (isMember(requirer)) {
    Iterator<Capability> i=candidates.iterator();
    while (i.hasNext()) {
      Capability c=i.next();
      if (!isMember(c.getProviderRevision())) {
        String namespace=c.getNamespace();
        if (Capability.BUNDLE_CAPABILITY.equals(namespace)) {
          i.remove();
        }
        if (Capability.PACKAGE_CAPABILITY.equals(namespace)) {
          if (!imported((String)c.getAttributes().get(Capability.PACKAGE_CAPABILITY),c.getAttributes(),c.getDirectives())) {
            i.remove();
          }
        }
      }
    }
  }
 else {
    Iterator<Capability> i=candidates.iterator();
    while (i.hasNext()) {
      Capability c=i.next();
      if (!isMember(c.getProviderRevision())) {
        i.remove();
      }
    }
  }
}",0.8674568965517241
93942,"RegionResolverHook(RegionMembership regionMembership,List<ImportedPackage> importedPackages){
  this.regionMembership=regionMembership;
  this.importedPackages=importedPackages;
}","RegionResolverHook(RegionMembership regionMembership,List<ImportedPackage> importedPackages,Collection<BundleRevision> triggers){
  this.regionMembership=regionMembership;
  this.importedPackages=importedPackages;
  this.triggerInRegion=triggerInRegion(triggers);
}",0.8063063063063063
93943,"@Override public ResolverHook begin(Collection<BundleRevision> triggers){
  boolean triggerInRegion=triggerInRegion(triggers);
  return triggerInRegion ? new RegionResolverHook(this.regionMembership,this.importedPackages) : null;
}","@Override public ResolverHook begin(Collection<BundleRevision> triggers){
  return new RegionResolverHook(this.regionMembership,this.importedPackages,triggers);
}",0.7786259541984732
93944,"private Set<Long> installQuasiBundles() throws BundleException {
  Set<Long> installed=new HashSet<Long>();
  for (  StandardQuasiBundle quasiBundle : this.installedQuasiBundles) {
    BundleDescription description=quasiBundle.getBundleDescription();
    String location=description.getLocation();
    ManifestTransformer manifestTransformer=new QuasiManifestTransformer(quasiBundle.getBundleManifest());
    this.bundleTransformationHandler.pushManifestTransformer(manifestTransformer);
    try {
      URI locationUri=new File(location).toURI();
      Bundle bundle=doInstallBundleInternal(locationUri.toString());
      quasiBundle.setBundle(bundle);
      installed.add(description.getBundleId());
    }
  finally {
      this.bundleTransformationHandler.popManifestTransformer();
    }
  }
  return installed;
}","private Set<Long> installQuasiBundles() throws BundleException {
  Set<Long> installed=new HashSet<Long>();
  for (  StandardQuasiBundle quasiBundle : this.installedQuasiBundles) {
    BundleDescription description=quasiBundle.getBundleDescription();
    String location=description.getLocation();
    ManifestTransformer manifestTransformer=new QuasiManifestTransformer(quasiBundle.getBundleManifest());
    this.bundleTransformationHandler.pushManifestTransformer(manifestTransformer);
    try {
      URI locationUri=new File(stripRegionTag(location)).toURI();
      Bundle bundle=doInstallBundleInternal(locationUri.toString());
      quasiBundle.setBundle(bundle);
      installed.add(description.getBundleId());
    }
  finally {
      this.bundleTransformationHandler.popManifestTransformer();
    }
  }
  return installed;
}",0.9805825242718448
93945,"private Bundle installBundleDescription(BundleDescription description) throws BundleException {
  String location=description.getLocation();
  String installLocation=location.startsWith(""String_Node_Str"") ? location : new File(location).toURI().toString();
  return doInstallBundleInternal(installLocation);
}","private Bundle installBundleDescription(BundleDescription description) throws BundleException {
  String location=stripRegionTag(description.getLocation());
  String installLocation=location.startsWith(""String_Node_Str"") ? location : new File(location).toURI().toString();
  return doInstallBundleInternal(installLocation);
}",0.9747634069400632
93946,"StandardQuasiFramework(BundleContext bundleContext,State state,PlatformAdmin platformAdmin,ResolutionFailureDetective detective,Repository repository,TransformedManifestProvidingBundleFileWrapper bundleTransformationHandler){
  this.bundleContext=bundleContext;
  this.state=state;
  this.stateObjectFactory=platformAdmin.getFactory();
  this.detective=detective;
  this.dependencyCalculator=new DependencyCalculator(platformAdmin.getFactory(),this.detective,repository,this.bundleContext);
  this.stateHelper=platformAdmin.getStateHelper();
  this.bundleTransformationHandler=bundleTransformationHandler;
}","StandardQuasiFramework(BundleContext bundleContext,State state,PlatformAdmin platformAdmin,ResolutionFailureDetective detective,Repository repository,TransformedManifestProvidingBundleFileWrapper bundleTransformationHandler){
  this.bundleContext=bundleContext;
  this.state=state;
  this.stateObjectFactory=platformAdmin.getFactory();
  this.detective=detective;
  this.dependencyCalculator=new DependencyCalculator(platformAdmin.getFactory(),this.detective,repository,this.bundleContext);
  this.stateHelper=platformAdmin.getStateHelper();
  this.bundleTransformationHandler=bundleTransformationHandler;
  setResolverHookFactory();
}",0.9774557165861514
93947,"private TracingService getTracingService(){
  TracingService localTracingService=this.tracingService;
  if (localTracingService != null && NO_OP_TRACING_SERVICE.equals(localTracingService)) {
    return localTracingService;
  }
  ServiceReference serviceReference=this.bundleContext.getServiceReference(TracingService.class.getName());
  if (serviceReference != null) {
    localTracingService=(TracingService)this.bundleContext.getService(serviceReference);
  }
  if (localTracingService == null) {
    localTracingService=NO_OP_TRACING_SERVICE;
  }
  this.tracingService=localTracingService;
  return localTracingService;
}","private TracingService getTracingService(){
  TracingService localTracingService=this.tracingService;
  if (localTracingService != null && NO_OP_TRACING_SERVICE.equals(localTracingService)) {
    return localTracingService;
  }
  ServiceReference<TracingService> serviceReference=this.bundleContext.getServiceReference(TracingService.class);
  if (serviceReference != null) {
    localTracingService=(TracingService)this.bundleContext.getService(serviceReference);
  }
  if (localTracingService == null) {
    localTracingService=NO_OP_TRACING_SERVICE;
  }
  this.tracingService=localTracingService;
  return localTracingService;
}",0.9792993630573248
93948,"public KernelConfiguration start(BundleContext context,EventLogger eventLogger) throws IOException {
  ServiceReference configurationAdminReference=context.getServiceReference(ConfigurationAdmin.class.getName());
  ConfigurationAdmin configAdmin=null;
  if (configurationAdminReference != null) {
    configAdmin=(ConfigurationAdmin)context.getService(configurationAdminReference);
  }
  if (configAdmin == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  KernelConfiguration configuration=new KernelConfiguration(context);
  publishConfiguration(context,eventLogger,configuration,configAdmin);
  this.configAdminExporter=initializeConfigAdminExporter(context,configuration,configAdmin);
  initializeDumpContributor(context,configAdmin);
  return configuration;
}","public KernelConfiguration start(BundleContext context,EventLogger eventLogger) throws IOException {
  ServiceReference<ConfigurationAdmin> configurationAdminReference=context.getServiceReference(ConfigurationAdmin.class);
  ConfigurationAdmin configAdmin=null;
  if (configurationAdminReference != null) {
    configAdmin=(ConfigurationAdmin)context.getService(configurationAdminReference);
  }
  if (configAdmin == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  KernelConfiguration configuration=new KernelConfiguration(context);
  publishConfiguration(context,eventLogger,configuration,configAdmin);
  this.configAdminExporter=initializeConfigAdminExporter(context,configuration,configAdmin);
  initializeDumpContributor(context,configAdmin);
  return configuration;
}",0.9809885931558936
93949,"@Test public void testStartAndStop() throws Exception {
  StubBundleContext bundleContext=new StubBundleContext();
  StubBundleContext surrogateBundleContext=new StubBundleContext();
  Framework user=createMock(Framework.class);
  SurrogateBundle surrogate=createMock(SurrogateBundle.class);
  ServiceFactory serviceFactory=createMock(ServiceFactory.class);
  CompositeBundleFactory factory=createMock(CompositeBundleFactory.class);
  CompositeBundle bundle=createMock(CompositeBundle.class);
  expect(factory.installCompositeBundle(isA(Map.class),isA(String.class),isA(Map.class))).andReturn(bundle);
  expect(bundle.getCompositeFramework()).andReturn(user);
  bundle.start();
  expect(bundle.getSurrogateBundle()).andReturn(surrogate);
  expect(surrogate.getBundleContext()).andReturn(surrogateBundleContext);
  EventAdmin eventAdmin=createMock(EventAdmin.class);
  eventAdmin.sendEvent(isA(Event.class));
  Dictionary<String,String> properties=new Hashtable<String,String>();
  Configuration config=createMock(Configuration.class);
  expect(config.getProperties()).andReturn(properties);
  ConfigurationAdmin configAdmin=createMock(ConfigurationAdmin.class);
  expect(configAdmin.getConfiguration(isA(String.class))).andReturn(config);
  EventLogger eventLogger=createMock(EventLogger.class);
  Shutdown shutdown=createMock(Shutdown.class);
  replay(factory,bundle,surrogate,eventAdmin,configAdmin,config);
  RegionManager manager=new RegionManager(bundleContext,factory,eventAdmin,serviceFactory,configAdmin,eventLogger,shutdown);
  manager.start();
  List<StubServiceRegistration> serviceRegistrations=bundleContext.getServiceRegistrations();
  assertEquals(""String_Node_Str"",2,serviceRegistrations.size());
  manager.stop();
  verify(factory,bundle,surrogate,eventAdmin,configAdmin,config);
}","@Test public void testStartAndStop() throws Exception {
  StubBundleContext bundleContext=new StubBundleContext();
  StubBundleContext surrogateBundleContext=new StubBundleContext();
  Framework user=createMock(Framework.class);
  SurrogateBundle surrogate=createMock(SurrogateBundle.class);
  ServiceFactory<EventLogger> serviceFactory=createMock(ServiceFactory.class);
  CompositeBundleFactory factory=createMock(CompositeBundleFactory.class);
  CompositeBundle bundle=createMock(CompositeBundle.class);
  expect(factory.installCompositeBundle(isA(Map.class),isA(String.class),isA(Map.class))).andReturn(bundle);
  expect(bundle.getCompositeFramework()).andReturn(user);
  bundle.start();
  expect(bundle.getSurrogateBundle()).andReturn(surrogate);
  expect(surrogate.getBundleContext()).andReturn(surrogateBundleContext);
  EventAdmin eventAdmin=createMock(EventAdmin.class);
  eventAdmin.sendEvent(isA(Event.class));
  Dictionary<String,String> properties=new Hashtable<String,String>();
  Configuration config=createMock(Configuration.class);
  expect(config.getProperties()).andReturn(properties);
  ConfigurationAdmin configAdmin=createMock(ConfigurationAdmin.class);
  expect(configAdmin.getConfiguration(isA(String.class))).andReturn(config);
  EventLogger eventLogger=createMock(EventLogger.class);
  Shutdown shutdown=createMock(Shutdown.class);
  replay(factory,bundle,surrogate,eventAdmin,configAdmin,config);
  RegionManager manager=new RegionManager(bundleContext,factory,eventAdmin,serviceFactory,configAdmin,eventLogger,shutdown);
  manager.start();
  List<StubServiceRegistration<Object>> serviceRegistrations=bundleContext.getServiceRegistrations();
  assertEquals(""String_Node_Str"",2,serviceRegistrations.size());
  manager.stop();
  verify(factory,bundle,surrogate,eventAdmin,configAdmin,config);
}",0.9941940834946088
93950,"/** 
 * Simple getter used when this class is created as a bean and placed in the service registry.
 * @return String or String[] of the types this converter can convert
 */
public static String[] getTypes(){
  return TYPES;
}","/** 
 * Simple getter used when this class is created as a bean and placed in the service registry.
 * @return String or String[] of the types this converter can convert
 */
public static String[] getTypes(){
  return TYPES.clone();
}",0.982608695652174
93951,"public static void sync(String player){
  try {
    if (!Config.database_keepalive) {
      Util.databaseManager.connect();
    }
    EBean eBeanClass=checkPlayer(player,true);
    String registered=eBeanClass.getRegistered();
    if (!Util.checkOtherName(player).equals(player)) {
      eBeanClass.setRegistered(""String_Node_Str"");
      save(eBeanClass);
      registered=""String_Node_Str"";
    }
 else     if (Util.checkScript(""String_Node_Str"",Config.script_name,Util.checkOtherName(player),null,null,null)) {
      eBeanClass.setRegistered(""String_Node_Str"");
      save(eBeanClass);
      registered=""String_Node_Str"";
    }
 else {
      if (registered != null && registered.equalsIgnoreCase(""String_Node_Str"")) {
        Util.logging.Debug(""String_Node_Str"" + player + ""String_Node_Str"");
        eBeanClass.setRegistered(""String_Node_Str"");
        save(eBeanClass);
        registered=""String_Node_Str"";
      }
    }
    if (registered != null && registered.equalsIgnoreCase(""String_Node_Str"")) {
      Util.checkScript(""String_Node_Str"",Config.script_name,Util.checkOtherName(player),null,null,null);
      Util.checkScript(""String_Node_Str"",Config.script_name,Util.checkOtherName(player),null,null,null);
    }
    if (!Config.database_keepalive) {
      Util.databaseManager.close();
    }
  }
 catch (  SQLException e) {
  }
}","public static void sync(String player){
  SyncThread s=new SyncThread(player);
  s.start();
}",0.103207810320781
93952,"public Config(AuthDB plugin,String config,String directory,String filename){
  if (config.equalsIgnoreCase(""String_Node_Str"")) {
    configFile=plugin.getBasicConfig();
    language_commands=getConfigString(""String_Node_Str"",""String_Node_Str"");
    language_messages=getConfigString(""String_Node_Str"",""String_Node_Str"");
    autoupdate_enable=getConfigBoolean(""String_Node_Str"",true);
    debug_enable=getConfigBoolean(""String_Node_Str"",false);
    usagestats_enabled=getConfigBoolean(""String_Node_Str"",true);
    logformat=getConfigString(""String_Node_Str"",""String_Node_Str"");
    logging_enabled=getConfigBoolean(""String_Node_Str"",true);
    database_type=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_port=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_host=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_database=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_keepalive=getConfigBoolean(""String_Node_Str"",false);
    dbDb=""String_Node_Str"" + database_host + ""String_Node_Str""+ database_port+ ""String_Node_Str""+ database_database;
    script_name=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    script_version=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_tableprefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_updatestatus=getConfigBoolean(""String_Node_Str"",true);
    script_salt=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    configFile=plugin.getAdvancedConfig();
    custom_enabled=getConfigBoolean(""String_Node_Str"",false);
    custom_autocreate=getConfigBoolean(""String_Node_Str"",true);
    custom_emailrequired=getConfigBoolean(""String_Node_Str"",false);
    custom_table=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_userfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_passfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_emailfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_encryption=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    register_enabled=getConfigBoolean(""String_Node_Str"",true);
    register_force=getConfigBoolean(""String_Node_Str"",true);
    register_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_delay=Util.toTicks(register_delay_time,register_delay_length);
    register_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_show=Util.toSeconds(register_show_time,register_show_length);
    register_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_timeout=Util.toTicks(register_timeout_time,register_timeout_length);
    login_method=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_tries=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    login_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_delay=Util.toTicks(login_delay_time,login_delay_length);
    login_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_show=Util.toSeconds(login_show_time,login_show_length);
    login_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_timeout=Util.toTicks(login_timeout_time,login_timeout_length);
    link_enabled=getConfigBoolean(""String_Node_Str"",true);
    link_rename=getConfigBoolean(""String_Node_Str"",true);
    unlink_enabled=getConfigBoolean(""String_Node_Str"",true);
    unlink_rename=getConfigBoolean(""String_Node_Str"",true);
    username_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    username_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    session_enabled=getConfigBoolean(""String_Node_Str"",false);
    session_protect=getConfigBoolean(""String_Node_Str"",true);
    session_thelength=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    session_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    session_length=Util.toSeconds(session_time,session_thelength);
    session_start=Util.checkSessionStart(getConfigString(""String_Node_Str"",""String_Node_Str""));
    guests_commands=getConfigBoolean(""String_Node_Str"",false);
    guests_movement=getConfigBoolean(""String_Node_Str"",false);
    guests_inventory=getConfigBoolean(""String_Node_Str"",false);
    guests_drop=getConfigBoolean(""String_Node_Str"",false);
    guests_pickup=getConfigBoolean(""String_Node_Str"",false);
    guests_health=getConfigBoolean(""String_Node_Str"",false);
    guests_mobdamage=getConfigBoolean(""String_Node_Str"",false);
    guests_interact=getConfigBoolean(""String_Node_Str"",false);
    guests_build=getConfigBoolean(""String_Node_Str"",false);
    guests_destroy=getConfigBoolean(""String_Node_Str"",false);
    guests_chat=getConfigBoolean(""String_Node_Str"",false);
    guests_mobtargeting=getConfigBoolean(""String_Node_Str"",false);
    guests_pvp=getConfigBoolean(""String_Node_Str"",false);
    protection_freeze=getConfigBoolean(""String_Node_Str"",true);
    protection_freeze_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_freeze_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_freeze_delay=Util.toSeconds(protection_freeze_delay_time,protection_freeze_delay_length);
    protection_notify=getConfigBoolean(""String_Node_Str"",true);
    protection_notify_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_notify_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_notify_delay=Util.toSeconds(protection_notify_delay_time,protection_notify_delay_length);
    filter_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    filter_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_whitelist=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    configFile=plugin.getPluginsConfig();
    CraftIRC_enabled=getConfigBoolean(""String_Node_Str"",true);
    CraftIRC_tag=getConfigString(""String_Node_Str"",""String_Node_Str"");
    CraftIRC_prefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    configFile=plugin.getMessagesConfig();
    Messages.time_millisecond=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_milliseconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_second=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_seconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minute=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minutes=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hour=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hours=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_day=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_days=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_reload_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_database_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_disabled=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_normal=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_prompt=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_authorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_duplicate=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_nonexist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invalidpass=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_required=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_invalid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_badcharacters=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_username=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_password=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_valid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_protected=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_denied=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_notauthorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_join=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_quit=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    configFile=plugin.getCommandsConfig();
    commands_user_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
}","public Config(AuthDB plugin,String config,String directory,String filename){
  if (config.equalsIgnoreCase(""String_Node_Str"")) {
    configFile=plugin.getBasicConfig();
    language_commands=getConfigString(""String_Node_Str"",""String_Node_Str"");
    language_messages=getConfigString(""String_Node_Str"",""String_Node_Str"");
    autoupdate_enable=getConfigBoolean(""String_Node_Str"",true);
    debug_enable=getConfigBoolean(""String_Node_Str"",false);
    usagestats_enabled=getConfigBoolean(""String_Node_Str"",true);
    logformat=getConfigString(""String_Node_Str"",""String_Node_Str"");
    logging_enabled=getConfigBoolean(""String_Node_Str"",true);
    database_type=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_port=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_host=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_database=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_keepalive=getConfigBoolean(""String_Node_Str"",false);
    dbDb=""String_Node_Str"" + database_host + ""String_Node_Str""+ database_port+ ""String_Node_Str""+ database_database+ ""String_Node_Str"";
    script_name=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    script_version=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_tableprefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_updatestatus=getConfigBoolean(""String_Node_Str"",true);
    script_salt=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    configFile=plugin.getAdvancedConfig();
    custom_enabled=getConfigBoolean(""String_Node_Str"",false);
    custom_autocreate=getConfigBoolean(""String_Node_Str"",true);
    custom_emailrequired=getConfigBoolean(""String_Node_Str"",false);
    custom_table=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_userfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_passfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_emailfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_encryption=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    register_enabled=getConfigBoolean(""String_Node_Str"",true);
    register_force=getConfigBoolean(""String_Node_Str"",true);
    register_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_delay=Util.toTicks(register_delay_time,register_delay_length);
    register_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_show=Util.toSeconds(register_show_time,register_show_length);
    register_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_timeout=Util.toTicks(register_timeout_time,register_timeout_length);
    login_method=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_tries=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    login_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_delay=Util.toTicks(login_delay_time,login_delay_length);
    login_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_show=Util.toSeconds(login_show_time,login_show_length);
    login_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_timeout=Util.toTicks(login_timeout_time,login_timeout_length);
    link_enabled=getConfigBoolean(""String_Node_Str"",true);
    link_rename=getConfigBoolean(""String_Node_Str"",true);
    unlink_enabled=getConfigBoolean(""String_Node_Str"",true);
    unlink_rename=getConfigBoolean(""String_Node_Str"",true);
    username_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    username_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    session_enabled=getConfigBoolean(""String_Node_Str"",false);
    session_protect=getConfigBoolean(""String_Node_Str"",true);
    session_thelength=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    session_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    session_length=Util.toSeconds(session_time,session_thelength);
    session_start=Util.checkSessionStart(getConfigString(""String_Node_Str"",""String_Node_Str""));
    guests_commands=getConfigBoolean(""String_Node_Str"",false);
    guests_movement=getConfigBoolean(""String_Node_Str"",false);
    guests_inventory=getConfigBoolean(""String_Node_Str"",false);
    guests_drop=getConfigBoolean(""String_Node_Str"",false);
    guests_pickup=getConfigBoolean(""String_Node_Str"",false);
    guests_health=getConfigBoolean(""String_Node_Str"",false);
    guests_mobdamage=getConfigBoolean(""String_Node_Str"",false);
    guests_interact=getConfigBoolean(""String_Node_Str"",false);
    guests_build=getConfigBoolean(""String_Node_Str"",false);
    guests_destroy=getConfigBoolean(""String_Node_Str"",false);
    guests_chat=getConfigBoolean(""String_Node_Str"",false);
    guests_mobtargeting=getConfigBoolean(""String_Node_Str"",false);
    guests_pvp=getConfigBoolean(""String_Node_Str"",false);
    protection_freeze=getConfigBoolean(""String_Node_Str"",true);
    protection_freeze_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_freeze_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_freeze_delay=Util.toSeconds(protection_freeze_delay_time,protection_freeze_delay_length);
    protection_notify=getConfigBoolean(""String_Node_Str"",true);
    protection_notify_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_notify_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_notify_delay=Util.toSeconds(protection_notify_delay_time,protection_notify_delay_length);
    filter_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    filter_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_whitelist=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    configFile=plugin.getPluginsConfig();
    CraftIRC_enabled=getConfigBoolean(""String_Node_Str"",true);
    CraftIRC_tag=getConfigString(""String_Node_Str"",""String_Node_Str"");
    CraftIRC_prefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    configFile=plugin.getMessagesConfig();
    Messages.time_millisecond=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_milliseconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_second=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_seconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minute=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minutes=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hour=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hours=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_day=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_days=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_reload_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_database_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_disabled=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_normal=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_prompt=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_authorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_duplicate=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_nonexist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invalidpass=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_required=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_invalid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_badcharacters=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_username=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_password=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_valid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_protected=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_denied=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_notauthorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_join=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_quit=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    configFile=plugin.getCommandsConfig();
    commands_user_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9995053757842396
93953,"public static String replaceStrings(String string,Player player,String additional){
  long start=Util.timeMS();
  logging.Debug((""String_Node_Str""));
  String extra=""String_Node_Str"";
  if (additional != null) {
    extra=additional;
  }
  if (!Config.has_badcharacters && Config.database_ison && player != null && player.getName().length() > Integer.parseInt(Config.username_minimum) && player.getName().length() < Integer.parseInt(Config.username_maximum) && extra.equalsIgnoreCase(""String_Node_Str"") == false) {
    string=string.replaceAll(""String_Node_Str"",craftFirePlayer.getIP(player));
    string=string.replaceAll(""String_Node_Str"",player.getName());
    string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
    string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
    string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (!Util.checkOtherName(player.getName()).equals(player.getName())) {
      string=string.replaceAll(""String_Node_Str"",checkOtherName(player.getName()));
    }
  }
 else {
    string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(""String_Node_Str""));
  }
  String email=""String_Node_Str"";
  if (Config.custom_emailrequired) {
    email=""String_Node_Str"";
  }
  string=string.replaceAll(""String_Node_Str"",Config.username_minimum);
  string=string.replaceAll(""String_Node_Str"",Config.username_maximum);
  string=string.replaceAll(""String_Node_Str"",Config.password_minimum);
  string=string.replaceAll(""String_Node_Str"",Config.password_maximum);
  string=string.replaceAll(""String_Node_Str"",AuthDB.pluginName);
  string=string.replaceAll(""String_Node_Str"",AuthDB.pluginVersion);
  string=string.replaceAll(""String_Node_Str"",Config.login_timeout_length + ""String_Node_Str"" + replaceTime(Config.login_timeout_length,Config.login_timeout_time));
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"" + Config.register_timeout_length + ""String_Node_Str""+ replaceTime(Config.register_timeout_length,Config.register_timeout_time));
  string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(Config.filter_username));
  string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(Config.filter_password));
  string=string.replaceAll(""String_Node_Str"",email);
  string=string.replaceAll(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  string=string.replaceAll(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  string=string.replaceAll(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  string=string.replaceAll(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  string=string.replaceAll(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  string=string.replaceAll(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  string=string.replaceAll(""String_Node_Str"",Config.commands_user_register + ""String_Node_Str"" + Config.aliases_user_register+ ""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",Config.commands_user_link + ""String_Node_Str"" + Config.aliases_user_link+ ""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",Config.commands_user_unlink + ""String_Node_Str"" + Config.aliases_user_unlink+ ""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",Config.commands_user_login + ""String_Node_Str"" + Config.aliases_user_login+ ""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  long stop=Util.timeMS();
  Util.logging.Debug(""String_Node_Str"" + ((stop - start) / 1000) + ""String_Node_Str""+ (stop - start)+ ""String_Node_Str"");
  return string;
}","public static String replaceStrings(String string,Player player,String additional){
  long start=Util.timeMS();
  logging.Debug((""String_Node_Str""));
  String extra=""String_Node_Str"";
  if (additional != null) {
    extra=additional;
  }
  if (!Config.has_badcharacters && Config.database_ison && player != null && player.getName().length() >= Integer.parseInt(Config.username_minimum) && player.getName().length() <= Integer.parseInt(Config.username_maximum) && extra.equalsIgnoreCase(""String_Node_Str"") == false) {
    string=string.replaceAll(""String_Node_Str"",craftFirePlayer.getIP(player));
    string=string.replaceAll(""String_Node_Str"",player.getName());
    string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
    string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
    string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (!Util.checkOtherName(player.getName()).equals(player.getName())) {
      string=string.replaceAll(""String_Node_Str"",checkOtherName(player.getName()));
    }
  }
 else {
    string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(""String_Node_Str""));
  }
  String email=""String_Node_Str"";
  if (Config.custom_emailrequired) {
    email=""String_Node_Str"";
  }
  string=string.replaceAll(""String_Node_Str"",Config.username_minimum);
  string=string.replaceAll(""String_Node_Str"",Config.username_maximum);
  string=string.replaceAll(""String_Node_Str"",Config.password_minimum);
  string=string.replaceAll(""String_Node_Str"",Config.password_maximum);
  string=string.replaceAll(""String_Node_Str"",AuthDB.pluginName);
  string=string.replaceAll(""String_Node_Str"",AuthDB.pluginVersion);
  string=string.replaceAll(""String_Node_Str"",Config.login_timeout_length + ""String_Node_Str"" + replaceTime(Config.login_timeout_length,Config.login_timeout_time));
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"" + Config.register_timeout_length + ""String_Node_Str""+ replaceTime(Config.register_timeout_length,Config.register_timeout_time));
  string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(Config.filter_username));
  string=string.replaceAll(""String_Node_Str"",Matcher.quoteReplacement(Config.filter_password));
  string=string.replaceAll(""String_Node_Str"",email);
  string=string.replaceAll(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  string=string.replaceAll(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  string=string.replaceAll(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  string=string.replaceAll(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  string=string.replaceAll(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  string=string.replaceAll(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  string=string.replaceAll(""String_Node_Str"",Config.commands_user_register + ""String_Node_Str"" + Config.aliases_user_register+ ""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",Config.commands_user_link + ""String_Node_Str"" + Config.aliases_user_link+ ""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",Config.commands_user_unlink + ""String_Node_Str"" + Config.aliases_user_unlink+ ""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",Config.commands_user_login + ""String_Node_Str"" + Config.aliases_user_login+ ""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  long stop=Util.timeMS();
  Util.logging.Debug(""String_Node_Str"" + ((stop - start) / 1000) + ""String_Node_Str""+ (stop - start)+ ""String_Node_Str"");
  return string;
}",0.9998695368558382
93954,"public void onEnable(){
  plugin=this;
  setupPluginInformation();
  server=getServer();
  database=getDatabase();
  Plugin[] plugins=server.getPluginManager().getPlugins();
  int counter=0;
  StringBuffer Plugins=new StringBuffer();
  while (plugins.length > counter) {
    Plugins.append(plugins[counter].getDescription().getName() + ""String_Node_Str"" + plugins[counter].getDescription().getVersion());
    if (plugins.length != (counter + 1)) {
      Plugins.append(""String_Node_Str"");
    }
    counter++;
  }
  File f=new File(""String_Node_Str"" + pluginName + ""String_Node_Str"");
  if (!f.exists()) {
    Util.logging.Info(""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  new Config(this,""String_Node_Str"",""String_Node_Str"" + pluginName + ""String_Node_Str"",""String_Node_Str"");
  f=new File(""String_Node_Str"" + pluginName + ""String_Node_Str"");
  if (!f.exists()) {
    Util.logging.Info(""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  new Config(this,""String_Node_Str"",""String_Node_Str"" + pluginName + ""String_Node_Str"",""String_Node_Str"");
  f=new File(getDataFolder() + ""String_Node_Str"");
  if (!f.exists()) {
    Util.logging.Info(""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  LoadYml(""String_Node_Str"",getClass().getProtectionDomain().getCodeSource());
  LoadYml(""String_Node_Str"",getClass().getProtectionDomain().getCodeSource());
  setupDatabase();
  checkOldFiles();
  PluginManager pm=getServer().getPluginManager();
  Plugin check=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (check != null) {
    Config.hasBackpack=true;
    Util.logging.Info(""String_Node_Str"" + check.getDescription().getName() + ""String_Node_Str""+ check.getDescription().getVersion());
  }
 else {
    Util.logging.Debug(""String_Node_Str"");
  }
  check=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (check != null) {
    Config.hasBuildr=true;
    Util.logging.Info(""String_Node_Str"" + check.getDescription().getName() + ""String_Node_Str""+ check.getDescription().getVersion());
  }
 else {
    Util.logging.Debug(""String_Node_Str"");
  }
  check=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (check != null) {
    ZPermissions.hasbPermissions=true;
    Util.logging.Info(""String_Node_Str"" + check.getDescription().getName() + ""String_Node_Str""+ check.getDescription().getVersion());
  }
 else {
    Util.logging.Debug(""String_Node_Str"");
  }
  final AuthDBPlayerListener playerListener=new AuthDBPlayerListener(this);
  pm.registerEvents(playerListener,this);
  final AuthDBEntityListener entityListener=new AuthDBEntityListener(this);
  pm.registerEvents(entityListener,this);
  final AuthDBBlockListener blockListener=new AuthDBBlockListener(this);
  pm.registerEvents(blockListener,this);
  Config.onlineMode=getServer().getOnlineMode();
  Util.logging.Debug(""String_Node_Str"" + Config.onlineMode);
  updateLinkedNames();
  Util.databaseManager.connect();
  try {
    Util.checkScript(""String_Node_Str"",Config.script_name,null,null,null,null);
  }
 catch (  SQLException e) {
    if (Config.custom_enabled && Config.custom_autocreate) {
      String enter=""String_Node_Str"";
      Util.logging.Info(""String_Node_Str"" + Config.custom_table);
      StringBuilder query=new StringBuilder();
      String NL=System.getProperty(""String_Node_Str"");
      try {
        Scanner scanner=new Scanner(new FileInputStream(getDataFolder() + ""String_Node_Str""));
        while (scanner != null && scanner.hasNextLine()) {
          String line=scanner.nextLine();
          if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
            query.append(""String_Node_Str"" + Config.custom_table + ""String_Node_Str""+ NL);
          }
 else {
            query.append(line + NL);
          }
        }
        scanner.close();
      }
 catch (      FileNotFoundException e2) {
        Util.logging.StackTrace(e2.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
      Util.logging.Debug(enter + query);
      try {
        MySQL.query(""String_Node_Str"" + query);
        Util.logging.Info(""String_Node_Str"" + Config.custom_table);
        PreparedStatement ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str"");
        ResultSet rs=ps.executeQuery();
        if (rs.next()) {
          Util.logging.Info(""String_Node_Str"" + rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
        }
        ps.close();
      }
 catch (      SQLException e1) {
        Util.logging.error(""String_Node_Str"" + Config.custom_table);
        Config.authdb_enabled=false;
        Util.logging.StackTrace(e1.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
    }
 else {
      Util.logging.error(""String_Node_Str"" + Config.database_database + ""String_Node_Str"");
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      Config.authdb_enabled=false;
    }
  }
  Util.logging.Info(pluginVersion + ""String_Node_Str"");
  Util.logging.Debug(""String_Node_Str"");
  if (Config.custom_enabled) {
    if (Config.custom_encryption == null) {
      Util.logging.Info(""String_Node_Str"");
    }
  }
  Util.logging.Info(""String_Node_Str"");
  String thescript=""String_Node_Str"", theversion=""String_Node_Str"";
  if (Config.custom_enabled) {
    thescript=""String_Node_Str"";
  }
 else {
    thescript=Config.script_name;
    theversion=Config.script_version;
  }
  String online=""String_Node_Str"" + getServer().getOnlinePlayers().length;
  String max=""String_Node_Str"" + getServer().getMaxPlayers();
  if (Config.usagestats_enabled) {
    try {
      Util.craftFire.postInfo(getServer().getServerName(),getServer().getVersion(),pluginVersion,System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),thescript,theversion,Plugins.toString(),online,max,server.getPort());
    }
 catch (    IOException e1) {
      Util.logging.Debug(""String_Node_Str"");
    }
  }
  for (  Player p : getServer().getOnlinePlayers()) {
    EBean eBeanClass=EBean.checkPlayer(p,true);
    if (eBeanClass.getReloadtime() + 30 > Util.timeStamp()) {
      Processes.Login(p);
    }
  }
}","public void onEnable(){
  plugin=this;
  setupPluginInformation();
  server=getServer();
  database=getDatabase();
  Plugin[] plugins=server.getPluginManager().getPlugins();
  int counter=0;
  StringBuffer Plugins=new StringBuffer();
  while (plugins.length > counter) {
    Plugins.append(plugins[counter].getDescription().getName() + ""String_Node_Str"" + plugins[counter].getDescription().getVersion());
    if (plugins.length != (counter + 1)) {
      Plugins.append(""String_Node_Str"");
    }
    counter++;
  }
  File f=new File(""String_Node_Str"" + pluginName + ""String_Node_Str"");
  if (!f.exists()) {
    Util.logging.Info(""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  new Config(this,""String_Node_Str"",""String_Node_Str"" + pluginName + ""String_Node_Str"",""String_Node_Str"");
  f=new File(""String_Node_Str"" + pluginName + ""String_Node_Str"");
  if (!f.exists()) {
    Util.logging.Info(""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  new Config(this,""String_Node_Str"",""String_Node_Str"" + pluginName + ""String_Node_Str"",""String_Node_Str"");
  f=new File(getDataFolder() + ""String_Node_Str"");
  if (!f.exists()) {
    Util.logging.Info(""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  LoadYml(""String_Node_Str"",getClass().getProtectionDomain().getCodeSource());
  LoadYml(""String_Node_Str"",getClass().getProtectionDomain().getCodeSource());
  setupDatabase();
  checkOldFiles();
  PluginManager pm=getServer().getPluginManager();
  Plugin check=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (check != null) {
    Config.hasBackpack=true;
    Util.logging.Info(""String_Node_Str"" + check.getDescription().getName() + ""String_Node_Str""+ check.getDescription().getVersion());
  }
 else {
    Util.logging.Debug(""String_Node_Str"");
  }
  check=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (check != null) {
    Config.hasBuildr=true;
    Util.logging.Info(""String_Node_Str"" + check.getDescription().getName() + ""String_Node_Str""+ check.getDescription().getVersion());
  }
 else {
    Util.logging.Debug(""String_Node_Str"");
  }
  check=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (check != null) {
    ZPermissions.hasbPermissions=true;
    Util.logging.Info(""String_Node_Str"" + check.getDescription().getName() + ""String_Node_Str""+ check.getDescription().getVersion());
  }
 else {
    Util.logging.Debug(""String_Node_Str"");
  }
  final AuthDBPlayerListener playerListener=new AuthDBPlayerListener(this);
  pm.registerEvents(playerListener,this);
  final AuthDBEntityListener entityListener=new AuthDBEntityListener(this);
  pm.registerEvents(entityListener,this);
  final AuthDBBlockListener blockListener=new AuthDBBlockListener(this);
  pm.registerEvents(blockListener,this);
  final AuthDBServerListener serverListener=new AuthDBServerListener();
  pm.registerEvents(serverListener,this);
  Config.onlineMode=getServer().getOnlineMode();
  Util.logging.Debug(""String_Node_Str"" + Config.onlineMode);
  updateLinkedNames();
  Util.databaseManager.connect();
  try {
    Util.checkScript(""String_Node_Str"",Config.script_name,null,null,null,null);
  }
 catch (  SQLException e) {
    if (Config.custom_enabled && Config.custom_autocreate) {
      String enter=""String_Node_Str"";
      Util.logging.Info(""String_Node_Str"" + Config.custom_table);
      StringBuilder query=new StringBuilder();
      String NL=System.getProperty(""String_Node_Str"");
      try {
        Scanner scanner=new Scanner(new FileInputStream(getDataFolder() + ""String_Node_Str""));
        while (scanner != null && scanner.hasNextLine()) {
          String line=scanner.nextLine();
          if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
            query.append(""String_Node_Str"" + Config.custom_table + ""String_Node_Str""+ NL);
          }
 else {
            query.append(line + NL);
          }
        }
        scanner.close();
      }
 catch (      FileNotFoundException e2) {
        Util.logging.StackTrace(e2.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
      Util.logging.Debug(enter + query);
      try {
        MySQL.query(""String_Node_Str"" + query);
        Util.logging.Info(""String_Node_Str"" + Config.custom_table);
        PreparedStatement ps=MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str"");
        ResultSet rs=ps.executeQuery();
        if (rs.next()) {
          Util.logging.Info(""String_Node_Str"" + rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
        }
        ps.close();
      }
 catch (      SQLException e1) {
        Util.logging.error(""String_Node_Str"" + Config.custom_table);
        Config.authdb_enabled=false;
        Util.logging.StackTrace(e1.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
    }
 else {
      Util.logging.error(""String_Node_Str"" + Config.database_database + ""String_Node_Str"");
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      Config.authdb_enabled=false;
    }
  }
  Util.logging.Info(pluginVersion + ""String_Node_Str"");
  Util.logging.Debug(""String_Node_Str"");
  if (Config.custom_enabled) {
    if (Config.custom_encryption == null) {
      Util.logging.Info(""String_Node_Str"");
    }
  }
  Util.logging.Info(""String_Node_Str"");
  String thescript=""String_Node_Str"", theversion=""String_Node_Str"";
  if (Config.custom_enabled) {
    thescript=""String_Node_Str"";
  }
 else {
    thescript=Config.script_name;
    theversion=Config.script_version;
  }
  String online=""String_Node_Str"" + getServer().getOnlinePlayers().length;
  String max=""String_Node_Str"" + getServer().getMaxPlayers();
  if (Config.usagestats_enabled) {
    try {
      Util.craftFire.postInfo(getServer().getServerName(),getServer().getVersion(),pluginVersion,System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),thescript,theversion,Plugins.toString(),online,max,server.getPort());
    }
 catch (    IOException e1) {
      Util.logging.Debug(""String_Node_Str"");
    }
  }
  for (  Player p : getServer().getOnlinePlayers()) {
    EBean eBeanClass=EBean.checkPlayer(p,true);
    if (eBeanClass.getReloadtime() + 30 > Util.timeStamp()) {
      Processes.Login(p);
    }
  }
}",0.99037835491572
93955,"public void onDisable(){
  for (  Player p : getServer().getOnlinePlayers()) {
    EBean eBeanClass=EBean.checkPlayer(p,true);
    if (eBeanClass.getAuthorized() != null && eBeanClass.getAuthorized().equalsIgnoreCase(""String_Node_Str"")) {
      eBeanClass.setReloadtime(Util.timeStamp());
      AuthDB.database.save(eBeanClass);
    }
    Processes.Logout(p,false);
  }
  Util.logging.Info(pluginVersion + ""String_Node_Str"");
  authorizedNames.clear();
  AuthDB_AuthTime.clear();
  AuthDB_GUI_ScreenIDs.clear();
  AuthDB_RemindLogin.clear();
  AuthDB_SpamMessage.clear();
  AuthDB_SpamMessageTime.clear();
  AuthDB_GUI_PasswordFieldIDs.clear();
  AuthDB_GUI_ErrorFieldIDs.clear();
  AuthDB_JoinTime.clear();
  AuthDB_LinkedNames.clear();
  AuthDB_LinkedNameCheck.clear();
  AuthDB_PasswordTries.clear();
  AuthDB_GUI_TempPasswords.clear();
  AuthDB_Timeouts.clear();
  AuthDB_Sessions.clear();
  AuthDB_Authed.clear();
  Util.databaseManager.close();
}","public void onDisable(){
  for (  Player p : getServer().getOnlinePlayers()) {
    EBean eBeanClass=EBean.checkPlayer(p,true);
    if (eBeanClass.getAuthorized() != null && eBeanClass.getAuthorized().equalsIgnoreCase(""String_Node_Str"")) {
      eBeanClass.setReloadtime(Util.timeStamp());
      AuthDB.database.save(eBeanClass);
      Processes.Logout(p,false);
    }
 else     if (isRegistered(""String_Node_Str"",p.getName()) && AuthDB_loggedOut.containsKey(p.getName()) && stop) {
      Util.craftFirePlayer.setInventoryFromStorage(p);
    }
 else {
      Processes.Logout(p,false);
    }
  }
  Util.logging.Info(pluginVersion + ""String_Node_Str"");
  authorizedNames.clear();
  AuthDB_AuthTime.clear();
  AuthDB_GUI_ScreenIDs.clear();
  AuthDB_RemindLogin.clear();
  AuthDB_SpamMessage.clear();
  AuthDB_SpamMessageTime.clear();
  AuthDB_GUI_PasswordFieldIDs.clear();
  AuthDB_GUI_ErrorFieldIDs.clear();
  AuthDB_JoinTime.clear();
  AuthDB_LinkedNames.clear();
  AuthDB_LinkedNameCheck.clear();
  AuthDB_PasswordTries.clear();
  AuthDB_GUI_TempPasswords.clear();
  AuthDB_Timeouts.clear();
  AuthDB_Sessions.clear();
  AuthDB_Authed.clear();
  AuthDB_loggedOut.clear();
  Util.databaseManager.close();
}",0.8794063079777366
93956,"@EventHandler(priority=EventPriority.LOWEST) public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  long start=Util.timeMS();
  String[] split=event.getMessage().split(""String_Node_Str"");
  Player player=event.getPlayer();
  if (split[0].equalsIgnoreCase(Config.commands_user_login) || split[0].equalsIgnoreCase(Config.aliases_user_login)) {
    if (ZPermissions.isAllowed(player,Permission.command_login)) {
      Messages.sendMessage(Message.login_processing,player,null);
      if (this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
        Messages.sendMessage(Message.login_notregistered,player,null);
      }
 else       if (plugin.isAuthorized(player)) {
        Messages.sendMessage(Message.login_authorized,player,null);
      }
 else       if (split.length < 2) {
        Messages.sendMessage(Message.login_usage,player,null);
      }
 else       if (this.plugin.checkPassword(player.getName(),split[1])) {
        Processes.Login(player);
        Messages.sendMessage(Message.login_success,player,null);
      }
 else {
        if (Config.authdb_enabled) {
          Messages.sendMessage(Message.login_failure,player,null);
        }
 else {
          Messages.sendMessage(Message.login_offline,player,null);
        }
      }
      Util.logging.Debug(player.getName() + ""String_Node_Str"");
      event.setMessage(Config.commands_user_login + ""String_Node_Str"");
      event.setCancelled(true);
    }
 else {
      Messages.sendMessage(Message.protection_denied,player,null);
    }
  }
 else   if (!Config.join_restrict && (split[0].equalsIgnoreCase(Config.commands_user_link) || split[0].equalsIgnoreCase(Config.aliases_user_link))) {
    if (Config.link_enabled) {
      if (ZPermissions.isAllowed(player,Permission.command_link)) {
        if (split.length == 3) {
          if (!player.getName().equals(split[1])) {
            Messages.sendMessage(Message.link_processing,player,null);
            if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false) {
              if (Util.checkOtherName(player.getName()).equals(player.getName())) {
                EBean eBeanClass=EBean.checkPlayer(split[1],true);
                String linkedname=eBeanClass.getLinkedname();
                if (linkedname != null) {
                  Messages.sendMessage(Message.link_duplicate,player,null);
                }
 else                 if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Link(player,split[1]);
                  Messages.sendMessage(Message.link_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.link_failure,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.link_exists,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.link_registered,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.link_invaliduser,player,null);
          }
        }
 else {
          Messages.sendMessage(Message.link_usage,player,null);
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_user_link + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
  }
 else   if (!Config.join_restrict && (split[0].equalsIgnoreCase(Config.commands_user_unlink) || split[0].equalsIgnoreCase(Config.aliases_user_unlink))) {
    if (Config.unlink_enabled) {
      if (ZPermissions.isAllowed(player,Permission.command_unlink)) {
        Messages.sendMessage(Message.unlink_processing,player,null);
        if (split.length == 3) {
          if (Util.checkOtherName(player.getName()).equals(player.getDisplayName())) {
            EBean eBeanClass=EBean.checkPlayer(player,true);
            String linkedname=eBeanClass.getLinkedname();
            if (linkedname.equals(split[1])) {
              if (this.plugin.checkPassword(split[1],split[2])) {
                Processes.Unlink(player,split[1]);
                Messages.sendMessage(Message.unlink_success,player,null);
              }
 else {
                Messages.sendMessage(Message.unlink_invalidpass,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.unlink_invaliduser,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.unlink_nonexist,player,null);
          }
        }
 else {
          Messages.sendMessage(Message.unlink_usage,player,null);
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_user_unlink + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
  }
 else   if (!Config.join_restrict && (split[0].equalsIgnoreCase(Config.commands_user_register) || split[0].equalsIgnoreCase(Config.aliases_user_register))) {
    if (ZPermissions.isAllowed(player,Permission.command_register)) {
      Messages.sendMessage(Message.register_processing,player,null);
      Boolean email=true;
      if (Config.custom_enabled) {
        email=Config.custom_emailrequired;
        if (Config.custom_emailfield == null || Config.custom_emailfield == ""String_Node_Str"") {
          email=false;
        }
      }
      if (!Config.register_enabled) {
        Messages.sendMessage(Message.register_disabled,player,null);
      }
 else       if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
        Messages.sendMessage(Message.register_exists,player,null);
      }
 else       if (split.length < 2) {
        Messages.sendMessage(Message.register_usage,player,null);
      }
 else       if (split.length < 3 && email) {
        Messages.sendMessage(Message.email_required,player,null);
      }
 else       if ((split.length >= 3 && email) && (!this.plugin.checkEmail(split[2]))) {
        Messages.sendMessage(Message.email_invalid,player,null);
      }
 else {
        try {
          if (split.length >= 3 || (!email && split.length >= 2)) {
            String themail=null;
            if (!email) {
              themail=null;
            }
 else {
              themail=split[2];
            }
            if (this.plugin.register(player,split[1],themail,Util.craftFirePlayer.getIP(player))) {
              Processes.Login(player);
              Messages.sendMessage(Message.register_success,player,null);
            }
          }
        }
 catch (        IOException e) {
          Messages.sendMessage(Message.register_failure,player,null);
          Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
        }
catch (        SQLException e) {
          Messages.sendMessage(Message.register_failure,player,null);
          Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
        }
      }
      Util.logging.Debug(player.getName() + ""String_Node_Str"");
      event.setMessage(Config.commands_user_register + ""String_Node_Str"");
      event.setCancelled(true);
    }
 else {
      Messages.sendMessage(Message.protection_denied,player,null);
    }
  }
 else   if (!plugin.isAuthorized(player)) {
    if (!checkGuest(player,Config.guests_commands)) {
      event.setMessage(""String_Node_Str"");
      event.setCancelled(true);
    }
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}","@EventHandler(priority=EventPriority.LOWEST) public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  if (event.getMessage().equalsIgnoreCase(""String_Node_Str"") && event.getPlayer().hasPermission(""String_Node_Str"")) {
    AuthDB.stop=true;
  }
  long start=Util.timeMS();
  String[] split=event.getMessage().split(""String_Node_Str"");
  Player player=event.getPlayer();
  if (split[0].equalsIgnoreCase(Config.commands_user_login) || split[0].equalsIgnoreCase(Config.aliases_user_login)) {
    if (ZPermissions.isAllowed(player,Permission.command_login)) {
      Messages.sendMessage(Message.login_processing,player,null);
      if (!this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
        Messages.sendMessage(Message.login_notregistered,player,null);
      }
 else       if (plugin.isAuthorized(player)) {
        Messages.sendMessage(Message.login_authorized,player,null);
      }
 else       if (split.length < 2) {
        Messages.sendMessage(Message.login_usage,player,null);
      }
 else       if (this.plugin.checkPassword(player.getName(),split[1])) {
        Processes.Login(player);
        Messages.sendMessage(Message.login_success,player,null);
      }
 else {
        if (Config.authdb_enabled) {
          Messages.sendMessage(Message.login_failure,player,null);
        }
 else {
          Messages.sendMessage(Message.login_offline,player,null);
        }
      }
      Util.logging.Debug(player.getName() + ""String_Node_Str"");
      event.setMessage(Config.commands_user_login + ""String_Node_Str"");
      event.setCancelled(true);
    }
 else {
      Messages.sendMessage(Message.protection_denied,player,null);
    }
  }
 else   if (!Config.join_restrict && (split[0].equalsIgnoreCase(Config.commands_user_link) || split[0].equalsIgnoreCase(Config.aliases_user_link))) {
    if (Config.link_enabled) {
      if (ZPermissions.isAllowed(player,Permission.command_link)) {
        if (split.length == 3) {
          if (!player.getName().equals(split[1])) {
            Messages.sendMessage(Message.link_processing,player,null);
            if (!this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
              if (Util.checkOtherName(player.getName()).equals(player.getName())) {
                EBean eBeanClass=EBean.checkPlayer(split[1],true);
                String linkedname=eBeanClass.getLinkedname();
                if (linkedname != null) {
                  Messages.sendMessage(Message.link_duplicate,player,null);
                }
 else                 if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Link(player,split[1]);
                  Messages.sendMessage(Message.link_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.link_failure,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.link_exists,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.link_registered,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.link_invaliduser,player,null);
          }
        }
 else {
          Messages.sendMessage(Message.link_usage,player,null);
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_user_link + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
  }
 else   if (!Config.join_restrict && (split[0].equalsIgnoreCase(Config.commands_user_unlink) || split[0].equalsIgnoreCase(Config.aliases_user_unlink))) {
    if (Config.unlink_enabled) {
      if (ZPermissions.isAllowed(player,Permission.command_unlink)) {
        Messages.sendMessage(Message.unlink_processing,player,null);
        if (split.length == 3) {
          if (Util.checkOtherName(player.getName()).equals(player.getDisplayName())) {
            EBean eBeanClass=EBean.checkPlayer(player,true);
            String linkedname=eBeanClass.getLinkedname();
            if (linkedname.equals(split[1])) {
              if (this.plugin.checkPassword(split[1],split[2])) {
                Processes.Unlink(player,split[1]);
                Messages.sendMessage(Message.unlink_success,player,null);
              }
 else {
                Messages.sendMessage(Message.unlink_invalidpass,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.unlink_invaliduser,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.unlink_nonexist,player,null);
          }
        }
 else {
          Messages.sendMessage(Message.unlink_usage,player,null);
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_user_unlink + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
  }
 else   if (!Config.join_restrict && (split[0].equalsIgnoreCase(Config.commands_user_register) || split[0].equalsIgnoreCase(Config.aliases_user_register))) {
    if (ZPermissions.isAllowed(player,Permission.command_register)) {
      Messages.sendMessage(Message.register_processing,player,null);
      Boolean email=true;
      if (Config.custom_enabled) {
        email=Config.custom_emailrequired;
        if (Config.custom_emailfield == null || Config.custom_emailfield.equals(""String_Node_Str"")) {
          email=false;
        }
      }
      if (!Config.register_enabled) {
        Messages.sendMessage(Message.register_disabled,player,null);
      }
 else       if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
        Messages.sendMessage(Message.register_exists,player,null);
      }
 else       if (Config.register_limit > 0 && EBean.getAmount(""String_Node_Str"",player.getAddress().getAddress().toString().substring(1)) > Config.register_limit) {
        Messages.sendMessage(Message.register_limit,player,null);
      }
 else       if (split.length < 2) {
        Messages.sendMessage(Message.register_usage,player,null);
      }
 else       if (split.length < 3 && email) {
        Messages.sendMessage(Message.email_required,player,null);
      }
 else       if ((split.length >= 3 && email) && (!this.plugin.checkEmail(split[2]))) {
        Messages.sendMessage(Message.email_invalid,player,null);
      }
 else {
        try {
          if (split.length >= 3 || (!email && split.length >= 2)) {
            String themail=null;
            if (!email) {
              themail=null;
            }
 else {
              themail=split[2];
            }
            if (this.plugin.register(player,split[1],themail,Util.craftFirePlayer.getIP(player))) {
              Processes.Login(player);
              Messages.sendMessage(Message.register_success,player,null);
            }
          }
        }
 catch (        IOException e) {
          Messages.sendMessage(Message.register_failure,player,null);
          Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
        }
catch (        SQLException e) {
          Messages.sendMessage(Message.register_failure,player,null);
          Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
        }
      }
      Util.logging.Debug(player.getName() + ""String_Node_Str"");
      event.setMessage(Config.commands_user_register + ""String_Node_Str"");
      event.setCancelled(true);
    }
 else {
      Messages.sendMessage(Message.protection_denied,player,null);
    }
  }
 else   if (!plugin.isAuthorized(player)) {
    if (!checkGuest(player,Config.guests_commands)) {
      event.setMessage(""String_Node_Str"");
      event.setCancelled(true);
    }
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}",0.9747428640983506
93957,"public Config(AuthDB plugin,String config,String directory,String filename){
  if (config.equalsIgnoreCase(""String_Node_Str"")) {
    configFile=plugin.getBasicConfig();
    language_commands=getConfigString(""String_Node_Str"",""String_Node_Str"");
    language_messages=getConfigString(""String_Node_Str"",""String_Node_Str"");
    autoupdate_enable=getConfigBoolean(""String_Node_Str"",true);
    debug_enable=getConfigBoolean(""String_Node_Str"",false);
    usagestats_enabled=getConfigBoolean(""String_Node_Str"",true);
    logformat=getConfigString(""String_Node_Str"",""String_Node_Str"");
    logging_enabled=getConfigBoolean(""String_Node_Str"",true);
    database_type=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_port=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_host=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_database=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_keepalive=getConfigBoolean(""String_Node_Str"",false);
    dbDb=""String_Node_Str"" + database_host + ""String_Node_Str""+ database_port+ ""String_Node_Str""+ database_database+ ""String_Node_Str"";
    script_name=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    script_version=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_tableprefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_updatestatus=getConfigBoolean(""String_Node_Str"",true);
    script_salt=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    configFile=plugin.getAdvancedConfig();
    custom_enabled=getConfigBoolean(""String_Node_Str"",false);
    custom_autocreate=getConfigBoolean(""String_Node_Str"",true);
    custom_emailrequired=getConfigBoolean(""String_Node_Str"",false);
    custom_table=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_userfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_passfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_emailfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_encryption=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    join_restrict=getConfigBoolean(""String_Node_Str"",false);
    register_enabled=getConfigBoolean(""String_Node_Str"",true);
    register_force=getConfigBoolean(""String_Node_Str"",true);
    register_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_delay=Util.toTicks(register_delay_time,register_delay_length);
    register_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_show=Util.toSeconds(register_show_time,register_show_length);
    register_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_timeout=Util.toTicks(register_timeout_time,register_timeout_length);
    login_method=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_tries=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    login_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_delay=Util.toTicks(login_delay_time,login_delay_length);
    login_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_show=Util.toSeconds(login_show_time,login_show_length);
    login_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_timeout=Util.toTicks(login_timeout_time,login_timeout_length);
    link_enabled=getConfigBoolean(""String_Node_Str"",true);
    link_rename=getConfigBoolean(""String_Node_Str"",true);
    unlink_enabled=getConfigBoolean(""String_Node_Str"",true);
    unlink_rename=getConfigBoolean(""String_Node_Str"",true);
    username_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    username_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    session_enabled=getConfigBoolean(""String_Node_Str"",false);
    session_protect=getConfigBoolean(""String_Node_Str"",true);
    session_thelength=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    session_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    session_length=Util.toSeconds(session_time,session_thelength);
    session_start=Util.checkSessionStart(getConfigString(""String_Node_Str"",""String_Node_Str""));
    guests_commands=getConfigBoolean(""String_Node_Str"",false);
    guests_movement=getConfigBoolean(""String_Node_Str"",false);
    guests_inventory=getConfigBoolean(""String_Node_Str"",false);
    guests_drop=getConfigBoolean(""String_Node_Str"",false);
    guests_pickup=getConfigBoolean(""String_Node_Str"",false);
    guests_health=getConfigBoolean(""String_Node_Str"",false);
    guests_mobdamage=getConfigBoolean(""String_Node_Str"",false);
    guests_interact=getConfigBoolean(""String_Node_Str"",false);
    guests_build=getConfigBoolean(""String_Node_Str"",false);
    guests_destroy=getConfigBoolean(""String_Node_Str"",false);
    guests_chat=getConfigBoolean(""String_Node_Str"",false);
    guests_mobtargeting=getConfigBoolean(""String_Node_Str"",false);
    guests_pvp=getConfigBoolean(""String_Node_Str"",false);
    protection_freeze=getConfigBoolean(""String_Node_Str"",true);
    protection_freeze_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_freeze_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_freeze_delay=Util.toSeconds(protection_freeze_delay_time,protection_freeze_delay_length);
    protection_notify=getConfigBoolean(""String_Node_Str"",true);
    protection_notify_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_notify_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_notify_delay=Util.toSeconds(protection_notify_delay_time,protection_notify_delay_length);
    filter_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    filter_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_whitelist=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    configFile=plugin.getMessagesConfig();
    Messages.time_millisecond=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_milliseconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_second=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_seconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minute=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minutes=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hour=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hours=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_day=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_days=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_reload_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_database_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_join_restrict=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_disabled=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_normal=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_prompt=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_authorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_duplicate=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_nonexist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invalidpass=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_required=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_invalid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_badcharacters=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_username=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_password=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_valid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_protected=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_denied=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_notauthorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_join=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_quit=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    configFile=plugin.getCommandsConfig();
    commands_user_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
}","public Config(AuthDB plugin,String config,String directory,String filename){
  if (config.equalsIgnoreCase(""String_Node_Str"")) {
    configFile=plugin.getBasicConfig();
    language_commands=getConfigString(""String_Node_Str"",""String_Node_Str"");
    language_messages=getConfigString(""String_Node_Str"",""String_Node_Str"");
    autoupdate_enable=getConfigBoolean(""String_Node_Str"",true);
    debug_enable=getConfigBoolean(""String_Node_Str"",false);
    usagestats_enabled=getConfigBoolean(""String_Node_Str"",true);
    logformat=getConfigString(""String_Node_Str"",""String_Node_Str"");
    logging_enabled=getConfigBoolean(""String_Node_Str"",true);
    database_type=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_port=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_host=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_database=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_keepalive=getConfigBoolean(""String_Node_Str"",false);
    dbDb=""String_Node_Str"" + database_host + ""String_Node_Str""+ database_port+ ""String_Node_Str""+ database_database+ ""String_Node_Str"";
    script_name=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    script_version=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_tableprefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_updatestatus=getConfigBoolean(""String_Node_Str"",true);
    script_salt=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    configFile=plugin.getAdvancedConfig();
    custom_enabled=getConfigBoolean(""String_Node_Str"",false);
    custom_autocreate=getConfigBoolean(""String_Node_Str"",true);
    custom_emailrequired=getConfigBoolean(""String_Node_Str"",false);
    custom_table=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_userfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_passfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_emailfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_encryption=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    join_restrict=getConfigBoolean(""String_Node_Str"",false);
    register_enabled=getConfigBoolean(""String_Node_Str"",true);
    register_force=getConfigBoolean(""String_Node_Str"",true);
    register_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_delay=Util.toTicks(register_delay_time,register_delay_length);
    register_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_show=Util.toSeconds(register_show_time,register_show_length);
    register_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_timeout=Util.toTicks(register_timeout_time,register_timeout_length);
    register_limit=getConfigInteger(""String_Node_Str"",3);
    login_method=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_tries=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    login_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_delay=Util.toTicks(login_delay_time,login_delay_length);
    login_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_show=Util.toSeconds(login_show_time,login_show_length);
    login_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_timeout=Util.toTicks(login_timeout_time,login_timeout_length);
    link_enabled=getConfigBoolean(""String_Node_Str"",true);
    link_rename=getConfigBoolean(""String_Node_Str"",true);
    unlink_enabled=getConfigBoolean(""String_Node_Str"",true);
    unlink_rename=getConfigBoolean(""String_Node_Str"",true);
    username_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    username_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    session_enabled=getConfigBoolean(""String_Node_Str"",false);
    session_protect=getConfigBoolean(""String_Node_Str"",true);
    session_thelength=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    session_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    session_length=Util.toSeconds(session_time,session_thelength);
    session_start=Util.checkSessionStart(getConfigString(""String_Node_Str"",""String_Node_Str""));
    guests_commands=getConfigBoolean(""String_Node_Str"",false);
    guests_movement=getConfigBoolean(""String_Node_Str"",false);
    guests_inventory=getConfigBoolean(""String_Node_Str"",false);
    guests_drop=getConfigBoolean(""String_Node_Str"",false);
    guests_pickup=getConfigBoolean(""String_Node_Str"",false);
    guests_health=getConfigBoolean(""String_Node_Str"",false);
    guests_mobdamage=getConfigBoolean(""String_Node_Str"",false);
    guests_interact=getConfigBoolean(""String_Node_Str"",false);
    guests_build=getConfigBoolean(""String_Node_Str"",false);
    guests_destroy=getConfigBoolean(""String_Node_Str"",false);
    guests_chat=getConfigBoolean(""String_Node_Str"",false);
    guests_mobtargeting=getConfigBoolean(""String_Node_Str"",false);
    guests_pvp=getConfigBoolean(""String_Node_Str"",false);
    protection_freeze=getConfigBoolean(""String_Node_Str"",true);
    protection_freeze_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_freeze_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_freeze_delay=Util.toSeconds(protection_freeze_delay_time,protection_freeze_delay_length);
    protection_notify=getConfigBoolean(""String_Node_Str"",true);
    protection_notify_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_notify_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_notify_delay=Util.toSeconds(protection_notify_delay_time,protection_notify_delay_length);
    filter_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    filter_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_whitelist=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    configFile=plugin.getMessagesConfig();
    Messages.time_millisecond=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_milliseconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_second=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_seconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minute=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minutes=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hour=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hours=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_day=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_days=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_reload_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_database_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_join_restrict=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_disabled=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_limit=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_normal=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_prompt=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_authorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_duplicate=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_nonexist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invalidpass=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_processing=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_required=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_invalid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_badcharacters=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_username=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_password=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_valid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_protected=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_denied=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_notauthorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_join=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_quit=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    configFile=plugin.getCommandsConfig();
    commands_user_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9689801033996552
93958,"public static boolean Logout(Player player,boolean storeInventory){
  if (AuthDB.isAuthorized(player)) {
    if (AuthDB.AuthDB_AuthTime.containsKey(player.getName())) {
      AuthDB.AuthDB_AuthTime.remove(player.getName());
    }
    AuthDB.authorizedNames.remove(player.getName());
    EBean eBeanClass=EBean.checkPlayer(player,true);
    eBeanClass.setAuthorized(""String_Node_Str"");
    if (AuthDB.AuthDB_Authed.containsKey(Encryption.md5(player.getName()))) {
      AuthDB.AuthDB_Authed.remove(Encryption.md5(player.getName()));
    }
    if (AuthDB.AuthDB_Sessions.containsKey(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)))) {
      AuthDB.AuthDB_Sessions.remove(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)));
    }
    if (AuthDB.AuthDB_SpamMessage.containsKey(player.getName())) {
      AuthDB.server.getScheduler().cancelTask(AuthDB.AuthDB_SpamMessage.get(player.getName()));
      AuthDB.AuthDB_SpamMessage.remove(player.getName());
      AuthDB.AuthDB_SpamMessageTime.remove(player.getName());
    }
    if (AuthDB.AuthDB_Timeouts.containsKey(player.getName())) {
      int TaskID=AuthDB.AuthDB_Timeouts.get(player.getName());
      Util.logging.Debug(player.getName() + ""String_Node_Str"" + TaskID);
      eBeanClass.setTimeoutid(0);
      if (AuthDB.AuthDB_Timeouts.remove(player.getName()) != null) {
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        AuthDB.server.getScheduler().cancelTask(TaskID);
      }
 else {
        Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      }
    }
 else {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
    }
    AuthDB.database.save(eBeanClass);
    if (storeInventory) {
      try {
        Util.craftFirePlayer.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 catch (      IOException e) {
        Util.logging.Severe(""String_Node_Str"" + AuthDB.pluginName + ""String_Node_Str"");
        player.kickPlayer(""String_Node_Str"");
        Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
      player.getInventory().clear();
    }
    Util.logging.Debug(""String_Node_Str"" + player.getName());
    return true;
  }
  return false;
}","public static boolean Logout(Player player,boolean storeInventory){
  if (AuthDB.isAuthorized(player)) {
    if (AuthDB.AuthDB_AuthTime.containsKey(player.getName())) {
      AuthDB.AuthDB_AuthTime.remove(player.getName());
    }
    AuthDB.authorizedNames.remove(player.getName());
    EBean eBeanClass=EBean.checkPlayer(player,true);
    eBeanClass.setAuthorized(""String_Node_Str"");
    if (AuthDB.AuthDB_Authed.containsKey(Encryption.md5(player.getName()))) {
      AuthDB.AuthDB_Authed.remove(Encryption.md5(player.getName()));
    }
    if (AuthDB.AuthDB_Sessions.containsKey(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)))) {
      AuthDB.AuthDB_Sessions.remove(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)));
    }
    if (AuthDB.AuthDB_SpamMessage.containsKey(player.getName())) {
      AuthDB.server.getScheduler().cancelTask(AuthDB.AuthDB_SpamMessage.get(player.getName()));
      AuthDB.AuthDB_SpamMessage.remove(player.getName());
      AuthDB.AuthDB_SpamMessageTime.remove(player.getName());
    }
    if (AuthDB.AuthDB_Timeouts.containsKey(player.getName())) {
      int TaskID=AuthDB.AuthDB_Timeouts.get(player.getName());
      Util.logging.Debug(player.getName() + ""String_Node_Str"" + TaskID);
      eBeanClass.setTimeoutid(0);
      if (AuthDB.AuthDB_Timeouts.remove(player.getName()) != null) {
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        AuthDB.server.getScheduler().cancelTask(TaskID);
      }
 else {
        Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      }
    }
 else {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
    }
    AuthDB.database.save(eBeanClass);
    if (storeInventory) {
      try {
        Util.craftFirePlayer.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 catch (      IOException e) {
        Util.logging.Severe(""String_Node_Str"" + AuthDB.pluginName + ""String_Node_Str"");
        player.kickPlayer(""String_Node_Str"");
        Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
      player.getInventory().clear();
    }
    Util.logging.Debug(""String_Node_Str"" + player.getName());
    AuthDB.AuthDB_loggedOut.put(player.getName(),true);
    return true;
  }
  return false;
}",0.984627512810406
93959,"public static void sync(String player){
  try {
    Util.logging.Debug(""String_Node_Str"" + player);
    if (!Config.database_keepalive) {
      Util.databaseManager.connect();
    }
    EBean eBeanClass=EBean.checkPlayer(player,true);
    String registered=eBeanClass.getRegistered();
    if (!Util.checkOtherName(player).equals(player)) {
      eBeanClass.setRegistered(""String_Node_Str"");
      eBeanClass.save(eBeanClass);
      registered=""String_Node_Str"";
    }
 else     if (Util.checkScript(""String_Node_Str"",Config.script_name,Util.checkOtherName(player),null,null,null)) {
      eBeanClass.setRegistered(""String_Node_Str"");
      eBeanClass.save(eBeanClass);
      registered=""String_Node_Str"";
    }
 else {
      if (registered != null && registered.equalsIgnoreCase(""String_Node_Str"")) {
        Util.logging.Debug(""String_Node_Str"" + player + ""String_Node_Str"");
        eBeanClass.setRegistered(""String_Node_Str"");
        eBeanClass.save(eBeanClass);
        registered=""String_Node_Str"";
      }
    }
    if (registered != null && registered.equalsIgnoreCase(""String_Node_Str"")) {
      Util.checkScript(""String_Node_Str"",Config.script_name,Util.checkOtherName(player),null,null,null);
      Util.checkScript(""String_Node_Str"",Config.script_name,Util.checkOtherName(player),null,null,null);
    }
    if (!Config.database_keepalive) {
      Util.databaseManager.close();
    }
  }
 catch (  SQLException e) {
  }
}","public static void sync(String player){
  try {
    Util.logging.Debug(""String_Node_Str"" + player);
    if (!Config.database_keepalive) {
      Util.databaseManager.connect();
    }
    EBean eBeanClass=EBean.checkPlayer(player,true);
    String registered=eBeanClass.getRegistered();
    if (!Util.checkOtherName(player).equals(player)) {
      eBeanClass.setRegistered(""String_Node_Str"");
      AuthDB.database.save(eBeanClass);
      registered=""String_Node_Str"";
    }
 else     if (Util.checkScript(""String_Node_Str"",Config.script_name,Util.checkOtherName(player),null,null,null)) {
      eBeanClass.setRegistered(""String_Node_Str"");
      AuthDB.database.save(eBeanClass);
      registered=""String_Node_Str"";
    }
 else {
      if (registered != null && registered.equalsIgnoreCase(""String_Node_Str"")) {
        Util.logging.Debug(""String_Node_Str"" + player + ""String_Node_Str"");
        eBeanClass.setRegistered(""String_Node_Str"");
        AuthDB.database.save(eBeanClass);
        registered=""String_Node_Str"";
      }
    }
    if (registered != null && registered.equalsIgnoreCase(""String_Node_Str"")) {
      Util.checkScript(""String_Node_Str"",Config.script_name,Util.checkOtherName(player),null,null,null);
      Util.checkScript(""String_Node_Str"",Config.script_name,Util.checkOtherName(player),null,null,null);
    }
    if (!Config.database_keepalive) {
      Util.databaseManager.close();
    }
  }
 catch (  SQLException e) {
  }
}",0.9760333449114276
93960,"public static String SHA512(String text){
  StringBuffer sb=new StringBuffer();
  try {
    MessageDigest messageDigest=MessageDigest.getInstance(""String_Node_Str"");
    messageDigest.update(text.getBytes(""String_Node_Str""));
    byte[] digestBytes=messageDigest.digest();
    String hex=null;
    for (int i=0; i < digestBytes.length; i++) {
      hex=Integer.toHexString(0xFF & digestBytes[i]);
      if (hex.length() < 2) {
        sb.append(""String_Node_Str"");
      }
      sb.append(hex);
    }
  }
 catch (  Exception ex) {
    System.out.println(ex.getMessage());
  }
  return new String(sb);
}","public static String SHA512(String text){
  byte[] sha1hash=new byte[40];
  try {
    MessageDigest md=MessageDigest.getInstance(""String_Node_Str"");
    md.update(text.getBytes(""String_Node_Str""),0,text.length());
    sha1hash=md.digest();
  }
 catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
  return convertToHex(sha1hash);
}",0.356513222331048
93961,"public void onPlayerLogin(PlayerLoginEvent event){
  Player player=event.getPlayer();
  if (!MySQL.isConnected()) {
    event.disallow(Result.KICK_OTHER,""String_Node_Str"");
    return;
  }
  EBean.sync(player);
  if (Config.session_protect && Util.checkIfLoggedIn(player)) {
    Messages.sendMessage(Message.session_protected,player,event);
  }
  if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"") || Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
    String name=player.getName();
    if (Util.checkFilter(""String_Node_Str"",name) == false && Util.checkWhitelist(""String_Node_Str"",player) == false) {
      Util.logging.Debug(""String_Node_Str"");
    }
    if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
      Messages.sendMessage(Message.filter_username,player,event);
    }
  }
  if (player.getName().length() < Integer.parseInt(Config.username_minimum)) {
    Messages.sendMessage(Message.username_minimum,player,event);
  }
 else   if (player.getName().length() > Integer.parseInt(Config.username_maximum)) {
    Messages.sendMessage(Message.username_maximum,player,event);
  }
  if (Config.link_rename && !Util.checkOtherName(player.getName()).equals(player.getName())) {
    Util.craftFirePlayer.renamePlayer(player,Util.checkOtherName(player.getName()));
  }
}","public void onPlayerLogin(PlayerLoginEvent event){
  Player player=event.getPlayer();
  if (!MySQL.isConnected()) {
    event.disallow(Result.KICK_OTHER,""String_Node_Str"");
    return;
  }
  EBean.sync(player);
  if (Config.session_protect && Util.checkIfLoggedIn(player)) {
    Messages.sendMessage(Message.session_protected,player,event);
  }
  if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"") || Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
    String name=player.getName();
    if (Util.checkFilter(""String_Node_Str"",name) == false && Util.checkWhitelist(""String_Node_Str"",player) == false) {
      Util.logging.Debug(name + ""String_Node_Str"");
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        Messages.sendMessage(Message.filter_username,player,event);
      }
    }
  }
  if (player.getName().length() < Integer.parseInt(Config.username_minimum)) {
    Messages.sendMessage(Message.username_minimum,player,event);
  }
 else   if (player.getName().length() > Integer.parseInt(Config.username_maximum)) {
    Messages.sendMessage(Message.username_maximum,player,event);
  }
  if (Config.link_rename && !Util.checkOtherName(player.getName()).equals(player.getName())) {
    Util.craftFirePlayer.renamePlayer(player,Util.checkOtherName(player.getName()));
  }
}",0.8929523809523809
93962,"public static boolean checkFilter(String what,String string){
  if (what.equalsIgnoreCase(""String_Node_Str"")) {
    logging.Debug(""String_Node_Str"" + Config.filter_username);
    int lengtha=string.length();
    int lengthb=Config.filter_username.length();
    int i=0;
    char thechar1, thechar2;
    while (i < lengtha) {
      thechar1=string.charAt(i);
      int a=0;
      while (a < lengthb) {
        thechar2=Config.filter_username.charAt(a);
        if (thechar1 == thechar2 || thechar1 == '\'' || thechar1 == '\""') {
          logging.Debug(""String_Node_Str"" + thechar2);
          Config.has_badcharacters=true;
          return false;
        }
        a++;
      }
      i++;
    }
    Config.has_badcharacters=false;
    return true;
  }
 else   if (what.equalsIgnoreCase(""String_Node_Str"")) {
    logging.Debug(""String_Node_Str"" + Config.filter_password);
    int lengtha=string.length();
    int lengthb=Config.filter_password.length();
    int i=0;
    char thechar1, thechar2;
    while (i < lengtha) {
      thechar1=string.charAt(i);
      int a=0;
      while (a < lengthb) {
        thechar2=Config.filter_password.charAt(a);
        if (thechar1 == thechar2 || thechar1 == '\'' || thechar1 == '\""') {
          logging.Debug(""String_Node_Str"" + thechar2);
          return false;
        }
        a++;
      }
      i++;
    }
    return true;
  }
  return true;
}","public static boolean checkFilter(String what,String string){
  if (what.equalsIgnoreCase(""String_Node_Str"")) {
    logging.Debug(""String_Node_Str"" + Config.filter_username);
    int lengtha=string.length();
    int lengthb=Config.filter_username.length();
    int i=0;
    char thechar1, thechar2;
    while (i < lengtha) {
      thechar1=string.charAt(i);
      int a=0;
      while (a < lengthb) {
        thechar2=Config.filter_username.charAt(a);
        if (thechar1 == thechar2 || thechar1 == '\'' || thechar1 == '\""') {
          Util.logging.Info(string + ""String_Node_Str"" + thechar2);
          Config.has_badcharacters=true;
          return false;
        }
        a++;
      }
      i++;
    }
    Config.has_badcharacters=false;
    Util.logging.Debug(string + ""String_Node_Str"");
    return true;
  }
 else   if (what.equalsIgnoreCase(""String_Node_Str"")) {
    logging.Debug(""String_Node_Str"" + Config.filter_password);
    int lengtha=string.length();
    int lengthb=Config.filter_password.length();
    int i=0;
    char thechar1, thechar2;
    while (i < lengtha) {
      thechar1=string.charAt(i);
      int a=0;
      while (a < lengthb) {
        thechar2=Config.filter_password.charAt(a);
        if (thechar1 == thechar2 || thechar1 == '\'' || thechar1 == '\""') {
          logging.Debug(""String_Node_Str"" + thechar2);
          return false;
        }
        a++;
      }
      i++;
    }
    return true;
  }
  return true;
}",0.9672880759760816
93963,"public void onEntityDamage(EntityDamageEvent event){
  if (event.getEntity() instanceof Player) {
    Player p=(Player)event.getEntity();
    if (this.plugin.AuthDB_AuthTime.containsKey(p.getName())) {
      long timestamp=System.currentTimeMillis() / 1000;
      long difference=timestamp - this.plugin.AuthDB_AuthTime.get(p.getName());
      if (difference < 5) {
        Util.logging.Debug(""String_Node_Str"" + difference + ""String_Node_Str"");
        event.setCancelled(true);
      }
    }
    if (event instanceof EntityDamageByEntityEvent) {
      EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
      if ((e.getDamager() instanceof Animals) || (e.getDamager() instanceof Monster)) {
        if (event.getEntity() instanceof Player && !checkGuest(p,Config.guests_health)) {
          event.setCancelled(true);
        }
      }
 else       if (e.getDamager() instanceof Player && e.getEntity() instanceof Player) {
        Player t=(Player)e.getDamager();
        if ((this.plugin.isRegistered(""String_Node_Str"",p.getName()) == true && plugin.isAuthorized(p) == false) || (!checkGuest(t,Config.guests_pvp) && !checkGuest(p,Config.guests_health))) {
          event.setCancelled(true);
        }
      }
 else {
        if (!checkGuest(p,Config.guests_health)) {
          event.setCancelled(true);
        }
 else         if (this.plugin.isRegistered(""String_Node_Str"",p.getName()) == true && plugin.isAuthorized(p) == false) {
          event.setCancelled(true);
        }
      }
    }
 else {
      if (this.plugin.isRegistered(""String_Node_Str"",p.getName()) == true && plugin.isAuthorized(p) == false) {
        event.setCancelled(true);
        return;
      }
    }
  }
 else   if ((event.getEntity() instanceof Animals) || (event.getEntity() instanceof Monster)) {
    if (!(event instanceof EntityDamageByEntityEvent)) {
      return;
    }
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    if ((e.getDamager() instanceof Player)) {
      Player t=(Player)e.getDamager();
      if (!checkGuest(t,Config.guests_mobdamage)) {
        event.setCancelled(true);
      }
    }
  }
}","public void onEntityDamage(EntityDamageEvent event){
  if (event.getEntity() instanceof Player) {
    Player p=(Player)event.getEntity();
    if (this.plugin.AuthDB_AuthTime.containsKey(p.getName())) {
      long timestamp=System.currentTimeMillis() / 1000;
      long difference=timestamp - this.plugin.AuthDB_AuthTime.get(p.getName());
      if (difference < 5) {
        Util.logging.Debug(""String_Node_Str"" + difference + ""String_Node_Str"");
        event.setCancelled(true);
      }
    }
    if (event instanceof EntityDamageByEntityEvent) {
      EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
      if ((e.getDamager() instanceof Animals) || (e.getDamager() instanceof Monster)) {
        if (event.getEntity() instanceof Player && !checkGuest(p,Config.guests_health)) {
          event.setCancelled(true);
        }
      }
 else       if (e.getDamager() instanceof Player && e.getEntity() instanceof Player) {
        Player t=(Player)e.getDamager();
        if ((this.plugin.isRegistered(""String_Node_Str"",p.getName()) == true && plugin.isAuthorized(p) == false) || (!checkGuest(t,Config.guests_pvp) && !checkGuest(p,Config.guests_health))) {
          event.setCancelled(true);
        }
      }
 else {
        if (!checkGuest(p,Config.guests_health)) {
          event.setCancelled(true);
        }
 else         if (this.plugin.isRegistered(""String_Node_Str"",p.getName()) == true && plugin.isAuthorized(p) == false) {
          event.setCancelled(true);
        }
      }
    }
 else {
      if (this.plugin.isRegistered(""String_Node_Str"",p.getName()) == true && plugin.isAuthorized(p) == false) {
        event.setCancelled(true);
        return;
      }
    }
  }
 else   if ((event.getEntity() instanceof Animals) || (event.getEntity() instanceof Monster)) {
    if (!(event instanceof EntityDamageByEntityEvent)) {
      return;
    }
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    if ((e.getDamager() instanceof Player)) {
      Player t=(Player)e.getDamager();
      if (plugin.isAuthorized(t) == false && !checkGuest(t,Config.guests_mobdamage)) {
        event.setCancelled(true);
      }
    }
  }
}",0.9918319719953326
93964,"public void onPlayerChat(PlayerChatEvent event){
  if (event.isCancelled()) {
    return;
  }
  AuthDBPlayer aPlayer=new AuthDBPlayer(event.getPlayer());
  Util.logging.Debug(""String_Node_Str"" + aPlayer.getName());
  Util.logging.Debug(""String_Node_Str"" + aPlayer.getEmail());
  if (!AuthDB.isAuthorized(event.getPlayer())) {
    Player player=event.getPlayer();
    if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
      if (this.plugin.isRegistered(""String_Node_Str"",event.getPlayer().getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(event.getPlayer().getName()))) {
        String[] split=event.getMessage().split(""String_Node_Str"");
        if (ZPermissions.isAllowed(player,Permission.command_login)) {
          if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
            if (AuthDB.isAuthorized(player)) {
              Messages.sendMessage(Message.login_authorized,player,null);
            }
 else             if (split.length > 1) {
              Messages.sendMessage(Message.login_prompt,player,null);
            }
 else             if (this.plugin.checkPassword(player.getName(),split[0]) || this.plugin.checkPassword(Util.checkOtherName(player.getName()),split[0])) {
              Processes.Login(player);
              Messages.sendMessage(Message.login_success,player,null);
            }
 else {
              Messages.sendMessage(Message.login_failure,player,null);
            }
            Util.logging.Debug(player.getName() + ""String_Node_Str"");
            event.setMessage(""String_Node_Str"");
            event.setCancelled(true);
          }
          event.setMessage(""String_Node_Str"");
          event.setCancelled(true);
        }
      }
 else       if (!checkGuest(event.getPlayer(),Config.guests_chat)) {
        event.setCancelled(true);
      }
    }
 else     if (!checkGuest(event.getPlayer(),Config.guests_chat)) {
      event.setCancelled(true);
    }
  }
}","public void onPlayerChat(PlayerChatEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (!AuthDB.isAuthorized(event.getPlayer())) {
    Player player=event.getPlayer();
    if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
      if (this.plugin.isRegistered(""String_Node_Str"",event.getPlayer().getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(event.getPlayer().getName()))) {
        String[] split=event.getMessage().split(""String_Node_Str"");
        if (ZPermissions.isAllowed(player,Permission.command_login)) {
          if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
            if (AuthDB.isAuthorized(player)) {
              Messages.sendMessage(Message.login_authorized,player,null);
            }
 else             if (split.length > 1) {
              Messages.sendMessage(Message.login_prompt,player,null);
            }
 else             if (this.plugin.checkPassword(player.getName(),split[0]) || this.plugin.checkPassword(Util.checkOtherName(player.getName()),split[0])) {
              Processes.Login(player);
              Messages.sendMessage(Message.login_success,player,null);
            }
 else {
              Messages.sendMessage(Message.login_failure,player,null);
            }
            Util.logging.Debug(player.getName() + ""String_Node_Str"");
            event.setMessage(""String_Node_Str"");
            event.setCancelled(true);
          }
          event.setMessage(""String_Node_Str"");
          event.setCancelled(true);
        }
      }
 else       if (!checkGuest(event.getPlayer(),Config.guests_chat)) {
        event.setCancelled(true);
      }
    }
 else     if (!checkGuest(event.getPlayer(),Config.guests_chat)) {
      event.setCancelled(true);
    }
  }
}",0.9535886380928228
93965,"public void onPlayerLogin(PlayerLoginEvent event){
  Player player=event.getPlayer();
  AuthDBPlayer aPlayer=new AuthDBPlayer(event.getPlayer());
  Util.logging.Debug(""String_Node_Str"" + aPlayer.getEmail());
  aPlayer.setEmail(""String_Node_Str"" + test);
  test++;
  Util.logging.Debug(""String_Node_Str"" + aPlayer.getEmail());
  if (!MySQL.isConnected()) {
    event.disallow(Result.KICK_OTHER,""String_Node_Str"");
    return;
  }
  EBean.sync(player);
  if (Config.session_protect && Util.checkIfLoggedIn(player)) {
    Messages.sendMessage(Message.session_protected,player,event);
  }
  if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"") || Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
    String name=player.getName();
    if (Util.checkFilter(""String_Node_Str"",name) == false && Util.checkWhitelist(""String_Node_Str"",player) == false) {
      Util.logging.Debug(name + ""String_Node_Str"");
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        Messages.sendMessage(Message.filter_username,player,event);
      }
    }
  }
  if (player.getName().length() < Integer.parseInt(Config.username_minimum)) {
    Messages.sendMessage(Message.username_minimum,player,event);
  }
 else   if (player.getName().length() > Integer.parseInt(Config.username_maximum)) {
    Messages.sendMessage(Message.username_maximum,player,event);
  }
  if (Config.link_rename && !Util.checkOtherName(player.getName()).equals(player.getName())) {
    Util.craftFirePlayer.renamePlayer(player,Util.checkOtherName(player.getName()));
  }
}","public void onPlayerLogin(PlayerLoginEvent event){
  Player player=event.getPlayer();
  if (!MySQL.isConnected()) {
    event.disallow(Result.KICK_OTHER,""String_Node_Str"");
    return;
  }
  EBean.sync(player);
  if (Config.session_protect && Util.checkIfLoggedIn(player)) {
    Messages.sendMessage(Message.session_protected,player,event);
  }
  if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"") || Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
    String name=player.getName();
    if (Util.checkFilter(""String_Node_Str"",name) == false && Util.checkWhitelist(""String_Node_Str"",player) == false) {
      Util.logging.Debug(name + ""String_Node_Str"");
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        Messages.sendMessage(Message.filter_username,player,event);
      }
    }
  }
  if (player.getName().length() < Integer.parseInt(Config.username_minimum)) {
    Messages.sendMessage(Message.username_minimum,player,event);
  }
 else   if (player.getName().length() > Integer.parseInt(Config.username_maximum)) {
    Messages.sendMessage(Message.username_maximum,player,event);
  }
  if (Config.link_rename && !Util.checkOtherName(player.getName()).equals(player.getName())) {
    Util.craftFirePlayer.renamePlayer(player,Util.checkOtherName(player.getName()));
  }
}",0.9166087560806117
93966,"public static boolean checkIfLoggedIn(Player player){
  for (  Player p : player.getServer().getOnlinePlayers()) {
    if (p.getName().equals(player.getName()) && AuthDB.isAuthorized(p)) {
      return true;
    }
  }
  return false;
}","public static boolean checkIfLoggedIn(Player player){
  for (  Player p : player.getServer().getOnlinePlayers()) {
    if (p.getName().equalsIgnoreCase(player.getName()) && AuthDB.isAuthorized(p)) {
      return true;
    }
  }
  return false;
}",0.9791666666666666
93967,"public void onPlayerLogin(PlayerLoginEvent event){
  Player player=event.getPlayer();
  if (!MySQL.isConnected()) {
    event.disallow(Result.KICK_OTHER,""String_Node_Str"");
    return;
  }
  EBean.sync(player);
  if (Config.session_protect && Util.checkIfLoggedIn(player)) {
    Messages.sendMessage(Message.session_protected,player,event);
  }
  if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"") || Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
    String name=player.getName();
    if (Util.checkFilter(""String_Node_Str"",name) == false && Util.checkWhitelist(""String_Node_Str"",player) == false) {
      Util.logging.Debug(name + ""String_Node_Str"");
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        Messages.sendMessage(Message.filter_username,player,event);
      }
    }
  }
  if (player.getName().length() < Integer.parseInt(Config.username_minimum)) {
    Messages.sendMessage(Message.username_minimum,player,event);
  }
 else   if (player.getName().length() > Integer.parseInt(Config.username_maximum)) {
    Messages.sendMessage(Message.username_maximum,player,event);
  }
  if (Config.link_rename && !Util.checkOtherName(player.getName()).equals(player.getName())) {
    Util.craftFirePlayer.renamePlayer(player,Util.checkOtherName(player.getName()));
  }
}","public void onPlayerLogin(PlayerLoginEvent event){
  Player player=event.getPlayer();
  if (!MySQL.isConnected()) {
    event.disallow(Result.KICK_OTHER,""String_Node_Str"");
    return;
  }
  if (Config.session_protect && Util.checkIfLoggedIn(player)) {
    Messages.sendMessage(Message.session_protected,player,event);
    return;
  }
 else {
    EBean.sync(player);
  }
  if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"") || Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
    String name=player.getName();
    if (Util.checkFilter(""String_Node_Str"",name) == false && Util.checkWhitelist(""String_Node_Str"",player) == false) {
      Util.logging.Debug(name + ""String_Node_Str"");
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        Messages.sendMessage(Message.filter_username,player,event);
        return;
      }
    }
  }
  if (player.getName().length() < Integer.parseInt(Config.username_minimum)) {
    Messages.sendMessage(Message.username_minimum,player,event);
  }
 else   if (player.getName().length() > Integer.parseInt(Config.username_maximum)) {
    Messages.sendMessage(Message.username_maximum,player,event);
  }
  if (Config.link_rename && !Util.checkOtherName(player.getName()).equals(player.getName())) {
    Util.craftFirePlayer.renamePlayer(player,Util.checkOtherName(player.getName()));
  }
}",0.8873134328358209
93968,"public static void checkIP(String player,String IP){
  EBean eBeanClass=checkPlayer(player,true);
  if (eBeanClass.getIp() == null || eBeanClass.getIp().equals(IP) == false) {
    Util.logging.Debug(""String_Node_Str"");
    eBeanClass.setIp(IP);
    AuthDB.database.save(eBeanClass);
  }
}","public static void checkIP(String player,String IP){
  EBean eBeanClass=checkPlayer(player,true);
  if (eBeanClass.getIp() == null || eBeanClass.getIp().equals(IP) == false) {
    Util.logging.Debug(""String_Node_Str"");
    eBeanClass.setSessiontime(0);
    eBeanClass.setIp(IP);
    AuthDB.database.save(eBeanClass);
  }
}",0.9442622950819672
93969,"public static void sendMessage(final Message type,final Player player,PlayerLoginEvent event){
  long start=Util.timeMS();
  ZCraftIRC.sendMessage(type,player);
  if (type.equals(Message.database_failure)) {
    AuthDB.server.broadcastMessage(Util.replaceStrings(AuthDB_message_database_failure,null,null));
  }
 else   if (Config.database_ison) {
    if (type.equals(Message.register_welcome)) {
      if (Config.authdb_enabled) {
        if (Config.link_enabled) {
          player.sendMessage(Util.replaceStrings(AuthDB_message_register_welcome + ""String_Node_Str"" + AuthDB_message_link_welcome,player,null));
        }
 else {
          player.sendMessage(Util.replaceStrings(AuthDB_message_register_welcome,player,null));
        }
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_register_offline,player,null));
      }
    }
 else     if (type.equals(Message.reload_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_reload_success,player,null));
    }
 else     if (type.equals(Message.register_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_success,player,null));
    }
 else     if (type.equals(Message.register_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_failure,player,null));
    }
 else     if (type.equals(Message.register_offline)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_offline,player,null));
    }
 else     if (type.equals(Message.register_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_exists,player,null));
    }
 else     if (type.equals(Message.register_disabled)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_disabled,player,null));
    }
 else     if (type.equals(Message.register_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_register_timeout,player,null));
    }
 else     if (type.equals(Message.register_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_usage,player,null));
    }
 else     if (type.equals(Message.unregister_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_success,player,null));
    }
 else     if (type.equals(Message.unregister_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_failure,player,null));
    }
 else     if (type.equals(Message.unregister_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_usage,player,null));
    }
 else     if (type.equals(Message.login_normal)) {
      Util.spamText(player,Message.login_normal.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_prompt)) {
      Util.spamText(player,Message.login_prompt.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_success)) {
      AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_success,player,null));
    }
 else     if (type.equals(Message.login_failure)) {
      String temp=""String_Node_Str"";
      if (AuthDB.AuthDB_PasswordTries.containsKey(player.getName())) {
        temp=AuthDB.AuthDB_PasswordTries.get(player.getName());
      }
      int tries=Integer.parseInt(temp) + 1;
      if (tries > Integer.parseInt(Config.login_tries) && Config.login_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_login_failure,player,null));
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      }
 else {
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"" + tries);
        player.sendMessage(Util.replaceStrings(AuthDB_message_login_failure,player,null));
      }
    }
 else     if (type.equals(Message.login_offline)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_offline,player,null));
    }
 else     if (type.equals(Message.login_authorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_authorized,player,null));
    }
 else     if (type.equals(Message.login_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_notregistered,player,null));
    }
 else     if (type.equals(Message.login_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_login_timeout,player,null));
    }
 else     if (type.equals(Message.login_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_admin,player,null));
    }
 else     if (type.equals(Message.login_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_usage,player,null));
    }
 else     if (type.equals(Message.logout_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_success,player,null));
    }
 else     if (type.equals(Message.logout_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_failure,player,null));
    }
 else     if (type.equals(Message.logout_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_admin,player,null));
    }
 else     if (type.equals(Message.logout_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_usage,player,null));
    }
 else     if (type.equals(Message.link_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_success,player,null));
    }
 else     if (type.equals(Message.link_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_failure,player,null));
    }
 else     if (type.equals(Message.link_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_exists,player,null));
    }
 else     if (type.equals(Message.link_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_usage,player,null));
    }
 else     if (type.equals(Message.link_duplicate)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_duplicate,player,null));
    }
 else     if (type.equals(Message.link_registered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_registered,player,null));
    }
 else     if (type.equals(Message.link_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_invaliduser,player,null));
    }
 else     if (type.equals(Message.link_renamed)) {
      player.getServer().broadcastMessage(Util.replaceStrings(AuthDB_message_link_renamed,player,null));
    }
 else     if (type.equals(Message.unlink_success)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_success,player,null));
    }
 else     if (type.equals(Message.unlink_failure)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_failure,player,null));
    }
 else     if (type.equals(Message.unlink_nonexist)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_nonexist,player,null));
    }
 else     if (type.equals(Message.unlink_usage)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_usage,player,null));
    }
 else     if (type.equals(Message.unlink_invalidpass)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invalidpass,player,null));
    }
 else     if (type.equals(Message.unlink_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invaliduser,player,null));
    }
 else     if (type.equals(Message.unlink_renamed)) {
      player.getServer().broadcastMessage(Util.replaceStrings(AuthDB_message_unlink_renamed,player,null));
    }
 else     if (type.equals(Message.email_required)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_required,player,null));
    }
 else     if (type.equals(Message.email_invalid)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_invalid,player,null));
    }
 else     if (type.equals(Message.email_badcharacters)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_badcharacters,player,null));
    }
 else     if (type.equals(Message.filter_renamed)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_renamed,player,null));
    }
 else     if (type.equals(Message.filter_username)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_filter_username,player,null));
    }
 else     if (type.equals(Message.filter_password)) {
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
    }
 else     if (type.equals(Message.filter_whitelist)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_whitelist,player,null));
    }
 else     if (type.equals(Message.username_minimum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_minimum,player,null));
    }
 else     if (type.equals(Message.username_maximum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_maximum,player,null));
    }
 else     if (type.equals(Message.password_minimum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_minimum,player,null));
    }
 else     if (type.equals(Message.password_maximum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_maximum,player,null));
    }
 else     if (type.equals(Message.password_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_success,player,null));
    }
 else     if (type.equals(Message.password_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_failure,player,null));
    }
 else     if (type.equals(Message.password_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_notregistered,player,null));
    }
 else     if (type.equals(Message.password_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_usage,player,null));
    }
 else     if (type.equals(Message.session_valid)) {
      if (Config.hasBukkitContrib || Config.hasSpout) {
        player.sendMessage(""String_Node_Str"");
      }
      player.sendMessage(Util.replaceStrings(AuthDB_message_session_valid,player,null));
    }
 else     if (type.equals(Message.session_protected)) {
      event.disallow(Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_session_protected,player,""String_Node_Str""));
    }
 else     if (type.equals(Message.protection_denied)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_denied,player,null));
    }
 else     if (type.equals(Message.protection_notauthorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_notauthorized,player,null));
    }
  }
 else {
    Messages.sendMessage(Message.database_failure,null,null);
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}","public static void sendMessage(final Message type,final Player player,PlayerLoginEvent event){
  long start=Util.timeMS();
  ZCraftIRC.sendMessage(type,player);
  if (type.equals(Message.database_failure)) {
    AuthDB.server.broadcastMessage(Util.replaceStrings(AuthDB_message_database_failure,null,null));
  }
 else   if (Config.database_ison) {
    if (type.equals(Message.register_welcome)) {
      if (Config.authdb_enabled) {
        if (Config.link_enabled) {
          player.sendMessage(Util.replaceStrings(AuthDB_message_register_welcome + ""String_Node_Str"" + AuthDB_message_link_welcome,player,null));
        }
 else {
          player.sendMessage(Util.replaceStrings(AuthDB_message_register_welcome,player,null));
        }
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_register_offline,player,null));
      }
    }
 else     if (type.equals(Message.reload_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_reload_success,player,null));
    }
 else     if (type.equals(Message.register_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_success,player,null));
    }
 else     if (type.equals(Message.register_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_failure,player,null));
    }
 else     if (type.equals(Message.register_offline)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_offline,player,null));
    }
 else     if (type.equals(Message.register_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_exists,player,null));
    }
 else     if (type.equals(Message.register_disabled)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_disabled,player,null));
    }
 else     if (type.equals(Message.register_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_register_timeout,player,null));
    }
 else     if (type.equals(Message.register_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_usage,player,null));
    }
 else     if (type.equals(Message.unregister_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_success,player,null));
    }
 else     if (type.equals(Message.unregister_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_failure,player,null));
    }
 else     if (type.equals(Message.unregister_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_usage,player,null));
    }
 else     if (type.equals(Message.login_normal)) {
      Util.spamText(player,Message.login_normal.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_prompt)) {
      Util.spamText(player,Message.login_prompt.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_success)) {
      AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_success,player,null));
    }
 else     if (type.equals(Message.login_failure)) {
      String temp=""String_Node_Str"";
      if (AuthDB.AuthDB_PasswordTries.containsKey(player.getName())) {
        temp=AuthDB.AuthDB_PasswordTries.get(player.getName());
      }
      int tries=Integer.parseInt(temp) + 1;
      if (tries > Integer.parseInt(Config.login_tries) && Config.login_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_login_failure,player,null));
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      }
 else {
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"" + tries);
        player.sendMessage(Util.replaceStrings(AuthDB_message_login_failure,player,null));
      }
    }
 else     if (type.equals(Message.login_offline)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_offline,player,null));
    }
 else     if (type.equals(Message.login_authorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_authorized,player,null));
    }
 else     if (type.equals(Message.login_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_notregistered,player,null));
    }
 else     if (type.equals(Message.login_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_login_timeout,player,null));
    }
 else     if (type.equals(Message.login_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_admin,player,null));
    }
 else     if (type.equals(Message.login_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_usage,player,null));
    }
 else     if (type.equals(Message.logout_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_success,player,null));
    }
 else     if (type.equals(Message.logout_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_failure,player,null));
    }
 else     if (type.equals(Message.logout_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_admin,player,null));
    }
 else     if (type.equals(Message.logout_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_usage,player,null));
    }
 else     if (type.equals(Message.link_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_success,player,null));
    }
 else     if (type.equals(Message.link_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_failure,player,null));
    }
 else     if (type.equals(Message.link_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_exists,player,null));
    }
 else     if (type.equals(Message.link_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_usage,player,null));
    }
 else     if (type.equals(Message.link_duplicate)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_duplicate,player,null));
    }
 else     if (type.equals(Message.link_registered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_registered,player,null));
    }
 else     if (type.equals(Message.link_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_invaliduser,player,null));
    }
 else     if (type.equals(Message.link_renamed)) {
      player.getServer().broadcastMessage(Util.replaceStrings(AuthDB_message_link_renamed,player,null));
    }
 else     if (type.equals(Message.unlink_success)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_success,player,null));
    }
 else     if (type.equals(Message.unlink_failure)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_failure,player,null));
    }
 else     if (type.equals(Message.unlink_nonexist)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_nonexist,player,null));
    }
 else     if (type.equals(Message.unlink_usage)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_usage,player,null));
    }
 else     if (type.equals(Message.unlink_invalidpass)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invalidpass,player,null));
    }
 else     if (type.equals(Message.unlink_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invaliduser,player,null));
    }
 else     if (type.equals(Message.unlink_renamed)) {
      player.getServer().broadcastMessage(Util.replaceStrings(AuthDB_message_unlink_renamed,player,null));
    }
 else     if (type.equals(Message.email_required)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_required,player,null));
    }
 else     if (type.equals(Message.email_invalid)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_invalid,player,null));
    }
 else     if (type.equals(Message.email_badcharacters)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_badcharacters,player,null));
    }
 else     if (type.equals(Message.filter_renamed)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_renamed,player,null));
    }
 else     if (type.equals(Message.filter_username)) {
      Config.has_badcharacters=true;
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_filter_username,player,null));
      Config.has_badcharacters=false;
    }
 else     if (type.equals(Message.filter_password)) {
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
    }
 else     if (type.equals(Message.filter_whitelist)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_whitelist,player,null));
    }
 else     if (type.equals(Message.username_minimum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_minimum,player,null));
    }
 else     if (type.equals(Message.username_maximum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_maximum,player,null));
    }
 else     if (type.equals(Message.password_minimum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_minimum,player,null));
    }
 else     if (type.equals(Message.password_maximum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_maximum,player,null));
    }
 else     if (type.equals(Message.password_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_success,player,null));
    }
 else     if (type.equals(Message.password_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_failure,player,null));
    }
 else     if (type.equals(Message.password_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_notregistered,player,null));
    }
 else     if (type.equals(Message.password_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_usage,player,null));
    }
 else     if (type.equals(Message.session_valid)) {
      if (Config.hasBukkitContrib || Config.hasSpout) {
        player.sendMessage(""String_Node_Str"");
      }
      player.sendMessage(Util.replaceStrings(AuthDB_message_session_valid,player,null));
    }
 else     if (type.equals(Message.session_protected)) {
      event.disallow(Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_session_protected,player,""String_Node_Str""));
    }
 else     if (type.equals(Message.protection_denied)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_denied,player,null));
    }
 else     if (type.equals(Message.protection_notauthorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_notauthorized,player,null));
    }
  }
 else {
    Messages.sendMessage(Message.database_failure,null,null);
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}",0.99679391270893
93970,"public static String forumCache(String cache,String player,int userid,String nummember,String activemembers,String newusername,String newuserid,String extrausername,String lastvalue){
  StringTokenizer st=new StringTokenizer(cache,""String_Node_Str"");
  int i=0;
  List<String> array=new ArrayList<String>();
  while (st.hasMoreTokens()) {
    array.add(st.nextToken() + ""String_Node_Str"");
  }
  StringBuffer newcache=new StringBuffer();
  while (array.size() > i) {
    if (array.get(i).equals(""String_Node_Str"" + nummember + ""String_Node_Str"") && nummember != null) {
      String temp=array.get(i + 2);
      temp=removeChar(temp,'""');
      temp=removeChar(temp,':');
      temp=removeChar(temp,'s');
      temp=removeChar(temp,';');
      temp=temp.trim();
      int tempnum=Integer.parseInt(temp) + 1;
      String templength=""String_Node_Str"" + tempnum;
      if (lastvalue.equalsIgnoreCase(extrausername)) {
        temp=""String_Node_Str"" + tempnum + ""String_Node_Str""+ ""String_Node_Str"";
      }
 else {
        temp=""String_Node_Str"" + tempnum + ""String_Node_Str""+ ""String_Node_Str"";
      }
      array.set(i + 1,templength.length() + ""String_Node_Str"");
      array.set(i + 2,temp);
    }
 else     if (array.get(i).equals(""String_Node_Str"" + newusername + ""String_Node_Str"") && newusername != null) {
      array.set(i + 1,player.length() + ""String_Node_Str"");
      if (lastvalue.equalsIgnoreCase(newusername)) {
        array.set(i + 2,""String_Node_Str"" + player + ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        array.set(i + 2,""String_Node_Str"" + player + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
 else     if (array.get(i).equals(""String_Node_Str"" + extrausername + ""String_Node_Str"") && extrausername != null) {
      array.set(i + 1,player.length() + ""String_Node_Str"");
      if (lastvalue.equalsIgnoreCase(extrausername)) {
        array.set(i + 2,""String_Node_Str"" + player + ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        array.set(i + 2,""String_Node_Str"" + player + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
 else     if (array.get(i).equals(""String_Node_Str"" + activemembers + ""String_Node_Str"") && activemembers != null) {
      String temp=array.get(i + 2);
      temp=removeChar(temp,'""');
      temp=removeChar(temp,':');
      temp=removeChar(temp,'s');
      temp=removeChar(temp,';');
      temp=temp.trim();
      int tempnum=Integer.parseInt(temp) + 1;
      String templength=""String_Node_Str"" + tempnum;
      if (lastvalue.equalsIgnoreCase(extrausername)) {
        temp=""String_Node_Str"" + tempnum + ""String_Node_Str""+ ""String_Node_Str"";
      }
 else {
        temp=""String_Node_Str"" + tempnum + ""String_Node_Str""+ ""String_Node_Str"";
      }
      array.set(i + 1,templength.length() + ""String_Node_Str"");
      array.set(i + 2,temp);
    }
 else     if (array.get(i).equals(""String_Node_Str"" + newuserid + ""String_Node_Str"") && newuserid != null) {
      String dupe=""String_Node_Str"" + userid;
      array.set(i + 1,dupe.length() + ""String_Node_Str"");
      if (lastvalue.equalsIgnoreCase(newuserid)) {
        array.set(i + 2,""String_Node_Str"" + userid + ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        array.set(i + 2,""String_Node_Str"" + userid + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    newcache.append(array.get(i));
    i++;
  }
  return newcache.toString();
}","public static String forumCache(String cache,String player,int userid,String nummember,String activemembers,String newusername,String newuserid,String extrausername,String lastvalue){
  StringTokenizer st=new StringTokenizer(cache,""String_Node_Str"");
  int i=0;
  List<String> array=new ArrayList<String>();
  while (st.hasMoreTokens()) {
    array.add(st.nextToken() + ""String_Node_Str"");
  }
  StringBuffer newcache=new StringBuffer();
  while (array.size() > i) {
    if (array.get(i).equals(""String_Node_Str"" + nummember + ""String_Node_Str"") && nummember != null) {
      String temp=array.get(i + 1);
      temp=removeChar(temp,'""');
      temp=removeChar(temp,':');
      temp=removeChar(temp,'s');
      temp=removeChar(temp,';');
      temp=temp.trim();
      int tempnum=Integer.parseInt(temp) + 1;
      if (lastvalue.equalsIgnoreCase(nummember)) {
        temp=tempnum + ""String_Node_Str"";
      }
 else {
        temp=tempnum + ""String_Node_Str"";
      }
      array.set(i + 1,temp);
    }
 else     if (array.get(i).equals(""String_Node_Str"" + newusername + ""String_Node_Str"") && newusername != null) {
      array.set(i + 1,player.length() + ""String_Node_Str"");
      if (lastvalue.equalsIgnoreCase(newusername)) {
        array.set(i + 2,""String_Node_Str"" + player + ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        array.set(i + 2,""String_Node_Str"" + player + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
 else     if (array.get(i).equals(""String_Node_Str"" + extrausername + ""String_Node_Str"") && extrausername != null) {
      array.set(i + 1,player.length() + ""String_Node_Str"");
      if (lastvalue.equalsIgnoreCase(extrausername)) {
        array.set(i + 2,""String_Node_Str"" + player + ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        array.set(i + 2,""String_Node_Str"" + player + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
 else     if (array.get(i).equals(""String_Node_Str"" + activemembers + ""String_Node_Str"") && activemembers != null) {
      String temp=array.get(i + 2);
      temp=removeChar(temp,'""');
      temp=removeChar(temp,':');
      temp=removeChar(temp,'s');
      temp=removeChar(temp,';');
      temp=temp.trim();
      int tempnum=Integer.parseInt(temp) + 1;
      String templength=""String_Node_Str"" + tempnum;
      if (lastvalue.equalsIgnoreCase(activemembers)) {
        temp=""String_Node_Str"" + tempnum + ""String_Node_Str""+ ""String_Node_Str"";
      }
 else {
        temp=""String_Node_Str"" + tempnum + ""String_Node_Str""+ ""String_Node_Str"";
      }
      array.set(i + 1,templength.length() + ""String_Node_Str"");
      array.set(i + 2,temp);
    }
 else     if (array.get(i).equals(""String_Node_Str"" + newuserid + ""String_Node_Str"") && newuserid != null) {
      String dupe=""String_Node_Str"" + userid;
      array.set(i + 1,dupe.length() + ""String_Node_Str"");
      if (lastvalue.equalsIgnoreCase(newuserid)) {
        array.set(i + 2,""String_Node_Str"" + userid + ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        array.set(i + 2,""String_Node_Str"" + userid + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    newcache.append(array.get(i));
    i++;
  }
  return newcache.toString();
}",0.933793724665966
93971,"public static boolean checkScript(String type,String script,String player,String password,String email,String ipAddress) throws SQLException {
  if (player != null) {
    player=player.toLowerCase();
  }
  if (Util.databaseManager.getDatabaseType().equalsIgnoreCase(""String_Node_Str"")) {
    EBean eBeanClass=EBean.checkPlayer(player,true);
    if (type.equalsIgnoreCase(""String_Node_Str"")) {
      if (eBeanClass.getRegistered().equalsIgnoreCase(""String_Node_Str"")) {
        return true;
      }
      return false;
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      String storedPassword=eBeanClass.getPassword();
      if (Encryption.SHA512(password).equals(storedPassword)) {
        return true;
      }
      return false;
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      Custom.adduser(player,email,password,ipAddress);
      eBeanClass.setEmail(email);
      eBeanClass.setPassword(Encryption.SHA512(password));
      eBeanClass.setRegistered(""String_Node_Str"");
      eBeanClass.setIp(ipAddress);
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      int amount=EBean.getUsers();
      logging.Info(amount + ""String_Node_Str"");
    }
  }
 else   if (Config.database_ison) {
    String usertable=null, usernamefield=null, passwordfield=null, saltfield=""String_Node_Str"";
    boolean bans=false;
    PreparedStatement ps=null;
    int number=0;
    if (Config.custom_enabled) {
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        String check=MySQL.getfromtable(Config.custom_table,""String_Node_Str"",Config.custom_userfield,player);
        if (check != ""String_Node_Str"") {
          Config.hasForumBoard=true;
          return true;
        }
        return false;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        EBean eBeanClass=EBean.find(player);
        String storedPassword=eBeanClass.getPassword();
        if (Custom.check_hash(password,storedPassword)) {
          return true;
        }
        String hash=MySQL.getfromtable(Config.custom_table,""String_Node_Str"" + Config.custom_passfield + ""String_Node_Str"",""String_Node_Str"" + Config.custom_userfield + ""String_Node_Str"",player);
        EBean.checkPassword(player,hash);
        if (Custom.check_hash(password,hash)) {
          return true;
        }
        return false;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        String hash=MySQL.getfromtable(Config.custom_table,""String_Node_Str"" + Config.custom_passfield + ""String_Node_Str"",""String_Node_Str"" + Config.custom_userfield + ""String_Node_Str"",player);
        EBean.checkPassword(player,hash);
        return true;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        Custom.adduser(player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str"");
        ResultSet rs=ps.executeQuery();
        if (rs.next()) {
          logging.Info(rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
        }
      }
    }
 else     if (script.equalsIgnoreCase(PhpBB.Name) || script.equalsIgnoreCase(PhpBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(PhpBB.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && PhpBB.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (PhpBB.check_hash(password,hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(PhpBB.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && PhpBB.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (PhpBB.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        PhpBB.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(SMF.Name) || script.equalsIgnoreCase(SMF.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(SMF.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        saltfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && SMF.check_hash(SMF.hash(1,player,password),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (SMF.check_hash(SMF.hash(1,player,password),hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(SMF.VersionRange2) || checkVersionInRange(""String_Node_Str"") || checkVersionInRange(""String_Node_Str"")) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && SMF.check_hash(SMF.hash(2,player,password),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (SMF.check_hash(SMF.hash(2,player,password),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        SMF.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(MyBB.Name) || script.equalsIgnoreCase(MyBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(MyBB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && MyBB.check_hash(MyBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (MyBB.check_hash(MyBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        MyBB.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(VBulletin.Name) || script.equalsIgnoreCase(VBulletin.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(VBulletin.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(VBulletin.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        VBulletin.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(Drupal.Name) || script.equalsIgnoreCase(Drupal.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(Drupal.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Encryption.md5(password).equals(storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Encryption.md5(password).equals(hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(Drupal.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && storedPassword.equals(Drupal.user_check_password(password,storedPassword))) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (hash.equals(Drupal.user_check_password(password,hash))) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        Drupal.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(Joomla.Name) || script.equalsIgnoreCase(Joomla.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(Joomla.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Joomla.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Joomla.check_hash(password,hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(Joomla.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Joomla.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Joomla.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        Joomla.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(Vanilla.Name) || script.equalsIgnoreCase(Vanilla.ShortName)) {
      if (checkVersionInRange(Vanilla.VersionRange)) {
        usertable=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        if (Vanilla.check() == 2) {
          usertable=usertable.toLowerCase();
        }
        Config.hasForumBoard=true;
        number=Vanilla.check();
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Vanilla.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Vanilla.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        String emailcheck=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",email);
        if (emailcheck.equalsIgnoreCase(""String_Node_Str"")) {
          Vanilla.adduser(number,player,email,password,ipAddress);
          EBean.sync(player);
          return true;
        }
        return false;
      }
    }
 else     if (script.equalsIgnoreCase(PunBB.Name) || script.equalsIgnoreCase(PunBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(PunBB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && PunBB.check_hash(PunBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (PunBB.check_hash(PunBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        PunBB.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(XenForo.Name) || script.equalsIgnoreCase(XenForo.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(XenForo.VersionRange)) {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
          if (hash != null) {
            int offset=-1;
            int chunkSize=1024;
            long blobLength=hash.length();
            if (chunkSize > blobLength) {
              chunkSize=(int)blobLength;
            }
            char buffer[]=new char[chunkSize];
            StringBuilder stringBuffer=new StringBuilder();
            Reader reader=new InputStreamReader(hash.getBinaryStream());
            try {
              while ((offset=reader.read(buffer)) != -1) {
                stringBuffer.append(buffer,0,offset);
              }
            }
 catch (            IOException e) {
              logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
            }
            String cache=stringBuffer.toString();
            String thehash=forumCacheValue(cache,""String_Node_Str"");
            String thesalt=forumCacheValue(cache,""String_Node_Str"");
            EBean eBeanClass=EBean.find(player);
            String storedPassword=eBeanClass.getPassword();
            String storedSalt=eBeanClass.getSalt();
            if (storedPassword != null && storedSalt != null && XenForo.check_hash(XenForo.hash(1,storedSalt,password),storedPassword)) {
              return true;
            }
            EBean.checkSalt(player,thesalt);
            EBean.checkPassword(player,thehash);
            if (XenForo.check_hash(XenForo.hash(1,thesalt,password),thehash)) {
              return true;
            }
          }
 else {
            return false;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        XenForo.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
 else       if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
        int offset=-1;
        int chunkSize=1024;
        long blobLength=hash.length();
        if (chunkSize > blobLength) {
          chunkSize=(int)blobLength;
        }
        char buffer[]=new char[chunkSize];
        StringBuilder stringBuffer=new StringBuilder();
        Reader reader=new InputStreamReader(hash.getBinaryStream());
        try {
          while ((offset=reader.read(buffer)) != -1) {
            stringBuffer.append(buffer,0,offset);
          }
        }
 catch (        IOException e) {
          logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
        }
        String cache=stringBuffer.toString();
        String thehash=forumCacheValue(cache,""String_Node_Str"");
        EBean.checkPassword(player,thehash);
        return true;
      }
 else       if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled&& saltfield != null && saltfield != ""String_Node_Str"") {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
        int offset=-1;
        int chunkSize=1024;
        long blobLength=hash.length();
        if (chunkSize > blobLength) {
          chunkSize=(int)blobLength;
        }
        char buffer[]=new char[chunkSize];
        StringBuilder stringBuffer=new StringBuilder();
        Reader reader=new InputStreamReader(hash.getBinaryStream());
        try {
          while ((offset=reader.read(buffer)) != -1) {
            stringBuffer.append(buffer,0,offset);
          }
        }
 catch (        IOException e) {
          logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
        }
        String cache=stringBuffer.toString();
        String thesalt=forumCacheValue(cache,""String_Node_Str"");
        EBean.checkSalt(player,thesalt);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(BBPress.Name) || script.equalsIgnoreCase(BBPress.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(BBPress.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && BBPress.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (BBPress.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        BBPress.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(DLE.Name) || script.equalsIgnoreCase(DLE.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(DLE.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && DLE.check_hash(DLE.hash(password),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (DLE.check_hash(DLE.hash(password),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        DLE.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(IPB.Name) || script.equalsIgnoreCase(IPB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(IPB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          player=player.toLowerCase();
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(IPB.VersionRange2)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          player=player.toLowerCase();
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        player=player.toLowerCase();
        IPB.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(WordPress.Name) || script.equalsIgnoreCase(WordPress.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(WordPress.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && WordPress.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          Util.logging.Info(""String_Node_Str"" + hash);
          if (WordPress.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        WordPress.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
    if (!Config.hasForumBoard) {
      if (!Config.custom_enabled) {
        String tempVers=Config.script_version;
        Config.script_version=scriptVersion();
        logging.Info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + Config.script_name + ""String_Node_Str""+ tempVers+ ""String_Node_Str""+ Config.script_version+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
      String check=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",usernamefield,player);
      if (check != ""String_Node_Str"") {
        return true;
      }
      return false;
    }
 else     if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
      if (script.equalsIgnoreCase(PhpBB.Name) || script.equalsIgnoreCase(PhpBB.ShortName)) {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + usertable+ ""String_Node_Str"");
      }
 else {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + usertable+ ""String_Node_Str"");
      }
      ResultSet rs=ps.executeQuery();
      if (rs.next()) {
        logging.Info(rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
      }
    }
 else     if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
      String hash=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"" + passwordfield + ""String_Node_Str"",usernamefield,player);
      EBean.checkPassword(player,hash);
      return true;
    }
 else     if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled&& saltfield != null && saltfield != ""String_Node_Str"") {
      String salt=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"" + saltfield + ""String_Node_Str"",usernamefield,player);
      EBean.checkSalt(player,salt);
      return true;
    }
  }
  return false;
}","public static boolean checkScript(String type,String script,String player,String password,String email,String ipAddress) throws SQLException {
  if (player != null) {
    player=player.toLowerCase();
  }
  if (Util.databaseManager.getDatabaseType().equalsIgnoreCase(""String_Node_Str"")) {
    EBean eBeanClass=EBean.checkPlayer(player,true);
    if (type.equalsIgnoreCase(""String_Node_Str"")) {
      if (eBeanClass.getRegistered().equalsIgnoreCase(""String_Node_Str"")) {
        return true;
      }
      return false;
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      String storedPassword=eBeanClass.getPassword();
      if (Encryption.SHA512(password).equals(storedPassword)) {
        return true;
      }
      return false;
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      Custom.adduser(player,email,password,ipAddress);
      eBeanClass.setEmail(email);
      eBeanClass.setPassword(Encryption.SHA512(password));
      eBeanClass.setRegistered(""String_Node_Str"");
      eBeanClass.setIp(ipAddress);
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      int amount=EBean.getUsers();
      logging.Info(amount + ""String_Node_Str"");
    }
  }
 else   if (Config.database_ison) {
    String usertable=null, usernamefield=null, passwordfield=null, saltfield=""String_Node_Str"";
    boolean bans=false;
    PreparedStatement ps=null;
    int number=0;
    if (Config.custom_enabled) {
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        String check=MySQL.getfromtable(Config.custom_table,""String_Node_Str"",Config.custom_userfield,player);
        if (check != ""String_Node_Str"") {
          Config.hasForumBoard=true;
          return true;
        }
        return false;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        EBean eBeanClass=EBean.find(player);
        String storedPassword=eBeanClass.getPassword();
        if (Custom.check_hash(password,storedPassword)) {
          return true;
        }
        String hash=MySQL.getfromtable(Config.custom_table,""String_Node_Str"" + Config.custom_passfield + ""String_Node_Str"",""String_Node_Str"" + Config.custom_userfield + ""String_Node_Str"",player);
        EBean.checkPassword(player,hash);
        if (Custom.check_hash(password,hash)) {
          return true;
        }
        return false;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        String hash=MySQL.getfromtable(Config.custom_table,""String_Node_Str"" + Config.custom_passfield + ""String_Node_Str"",""String_Node_Str"" + Config.custom_userfield + ""String_Node_Str"",player);
        EBean.checkPassword(player,hash);
        return true;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        Custom.adduser(player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"")) {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str"");
        ResultSet rs=ps.executeQuery();
        if (rs.next()) {
          logging.Info(rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
        }
      }
    }
 else     if (script.equalsIgnoreCase(PhpBB.Name) || script.equalsIgnoreCase(PhpBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(PhpBB.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && PhpBB.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (PhpBB.check_hash(password,hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(PhpBB.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && PhpBB.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (PhpBB.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        PhpBB.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(SMF.Name) || script.equalsIgnoreCase(SMF.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(SMF.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        saltfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && SMF.check_hash(SMF.hash(1,player,password),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (SMF.check_hash(SMF.hash(1,player,password),hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(SMF.VersionRange2) || checkVersionInRange(""String_Node_Str"") || checkVersionInRange(""String_Node_Str"")) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && SMF.check_hash(SMF.hash(2,player,password),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (SMF.check_hash(SMF.hash(2,player,password),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        SMF.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(MyBB.Name) || script.equalsIgnoreCase(MyBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(MyBB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && MyBB.check_hash(MyBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (MyBB.check_hash(MyBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        MyBB.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(VBulletin.Name) || script.equalsIgnoreCase(VBulletin.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(VBulletin.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(VBulletin.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        bans=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (VBulletin.check_hash(VBulletin.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        VBulletin.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(Drupal.Name) || script.equalsIgnoreCase(Drupal.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(Drupal.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Encryption.md5(password).equals(storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Encryption.md5(password).equals(hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(Drupal.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && storedPassword.equals(Drupal.user_check_password(password,storedPassword))) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (hash.equals(Drupal.user_check_password(password,hash))) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        Drupal.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(Joomla.Name) || script.equalsIgnoreCase(Joomla.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(Joomla.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Joomla.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Joomla.check_hash(password,hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(Joomla.VersionRange2)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Joomla.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Joomla.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        Joomla.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(Vanilla.Name) || script.equalsIgnoreCase(Vanilla.ShortName)) {
      if (checkVersionInRange(Vanilla.VersionRange)) {
        usertable=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        if (Vanilla.check() == 2) {
          usertable=usertable.toLowerCase();
        }
        Config.hasForumBoard=true;
        number=Vanilla.check();
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && Vanilla.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (Vanilla.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        String emailcheck=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",email);
        if (emailcheck.equalsIgnoreCase(""String_Node_Str"")) {
          Vanilla.adduser(number,player,email,password,ipAddress);
          EBean.sync(player);
          return true;
        }
        return false;
      }
    }
 else     if (script.equalsIgnoreCase(PunBB.Name) || script.equalsIgnoreCase(PunBB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(PunBB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && PunBB.check_hash(PunBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (PunBB.check_hash(PunBB.hash(""String_Node_Str"",player,password,""String_Node_Str""),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        PunBB.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(XenForo.Name) || script.equalsIgnoreCase(XenForo.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(XenForo.VersionRange)) {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
          if (hash != null) {
            int offset=-1;
            int chunkSize=1024;
            long blobLength=hash.length();
            if (chunkSize > blobLength) {
              chunkSize=(int)blobLength;
            }
            char buffer[]=new char[chunkSize];
            StringBuilder stringBuffer=new StringBuilder();
            Reader reader=new InputStreamReader(hash.getBinaryStream());
            try {
              while ((offset=reader.read(buffer)) != -1) {
                stringBuffer.append(buffer,0,offset);
              }
            }
 catch (            IOException e) {
              logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
            }
            String cache=stringBuffer.toString();
            String thehash=forumCacheValue(cache,""String_Node_Str"");
            String thesalt=forumCacheValue(cache,""String_Node_Str"");
            EBean eBeanClass=EBean.find(player);
            String storedPassword=eBeanClass.getPassword();
            String storedSalt=eBeanClass.getSalt();
            if (storedPassword != null && storedSalt != null && XenForo.check_hash(XenForo.hash(1,storedSalt,password),storedPassword)) {
              return true;
            }
            EBean.checkSalt(player,thesalt);
            EBean.checkPassword(player,thehash);
            if (XenForo.check_hash(XenForo.hash(1,thesalt,password),thehash)) {
              return true;
            }
          }
 else {
            return false;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        XenForo.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
 else       if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
        int offset=-1;
        int chunkSize=1024;
        long blobLength=hash.length();
        if (chunkSize > blobLength) {
          chunkSize=(int)blobLength;
        }
        char buffer[]=new char[chunkSize];
        StringBuilder stringBuffer=new StringBuilder();
        Reader reader=new InputStreamReader(hash.getBinaryStream());
        try {
          while ((offset=reader.read(buffer)) != -1) {
            stringBuffer.append(buffer,0,offset);
          }
        }
 catch (        IOException e) {
          logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
        }
        String cache=stringBuffer.toString();
        String thehash=forumCacheValue(cache,""String_Node_Str"");
        EBean.checkPassword(player,thehash);
        return true;
      }
 else       if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled&& saltfield != null && saltfield != ""String_Node_Str"") {
        String userid=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",""String_Node_Str"",player);
        Blob hash=MySQL.getfromtableBlob(Config.script_tableprefix + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",userid);
        int offset=-1;
        int chunkSize=1024;
        long blobLength=hash.length();
        if (chunkSize > blobLength) {
          chunkSize=(int)blobLength;
        }
        char buffer[]=new char[chunkSize];
        StringBuilder stringBuffer=new StringBuilder();
        Reader reader=new InputStreamReader(hash.getBinaryStream());
        try {
          while ((offset=reader.read(buffer)) != -1) {
            stringBuffer.append(buffer,0,offset);
          }
        }
 catch (        IOException e) {
          logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
        }
        String cache=stringBuffer.toString();
        String thesalt=forumCacheValue(cache,""String_Node_Str"");
        EBean.checkSalt(player,thesalt);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(BBPress.Name) || script.equalsIgnoreCase(BBPress.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(BBPress.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && BBPress.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (BBPress.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        BBPress.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(DLE.Name) || script.equalsIgnoreCase(DLE.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(DLE.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && DLE.check_hash(DLE.hash(password),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (DLE.check_hash(DLE.hash(password),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        DLE.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(IPB.Name) || script.equalsIgnoreCase(IPB.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(IPB.VersionRange)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          player=player.toLowerCase();
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),hash)) {
            return true;
          }
        }
      }
 else       if (checkVersionInRange(IPB.VersionRange2)) {
        saltfield=""String_Node_Str"";
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=2;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          player=player.toLowerCase();
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          if (IPB.check_hash(IPB.hash(""String_Node_Str"",player,password,null),hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        player=player.toLowerCase();
        IPB.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
 else     if (script.equalsIgnoreCase(WordPress.Name) || script.equalsIgnoreCase(WordPress.ShortName)) {
      usertable=""String_Node_Str"";
      if (checkVersionInRange(WordPress.VersionRange)) {
        usernamefield=""String_Node_Str"";
        passwordfield=""String_Node_Str"";
        Config.hasForumBoard=true;
        number=1;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          EBean eBeanClass=EBean.find(player);
          String storedPassword=eBeanClass.getPassword();
          if (storedPassword != null && WordPress.check_hash(password,storedPassword)) {
            return true;
          }
          String hash=MySQL.getfromtable(Config.script_tableprefix + ""String_Node_Str"" + usertable+ ""String_Node_Str"",""String_Node_Str"" + passwordfield + ""String_Node_Str"",""String_Node_Str"" + usernamefield + ""String_Node_Str"",player);
          EBean.checkPassword(player,hash);
          Util.logging.Info(""String_Node_Str"" + hash);
          if (WordPress.check_hash(password,hash)) {
            return true;
          }
        }
      }
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        WordPress.adduser(number,player,email,password,ipAddress);
        EBean.sync(player);
        return true;
      }
    }
    if (!Config.hasForumBoard) {
      if (!Config.custom_enabled) {
        String tempVers=Config.script_version;
        Config.script_version=scriptVersion();
        logging.Info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + Config.script_name + ""String_Node_Str""+ tempVers+ ""String_Node_Str""+ Config.script_version+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
      String check=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"",usernamefield,player);
      if (check != ""String_Node_Str"") {
        return true;
      }
      return false;
    }
 else     if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
      if (script.equalsIgnoreCase(PhpBB.Name) || script.equalsIgnoreCase(PhpBB.ShortName)) {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + usertable+ ""String_Node_Str"");
      }
 else {
        ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.script_tableprefix + usertable+ ""String_Node_Str"");
      }
      ResultSet rs=ps.executeQuery();
      if (rs.next()) {
        logging.Info(rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
      }
    }
 else     if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled) {
      String hash=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"" + passwordfield + ""String_Node_Str"",usernamefield,player);
      EBean.checkPassword(player,hash);
      return true;
    }
 else     if (Config.hasForumBoard && type.equalsIgnoreCase(""String_Node_Str"") && !Config.custom_enabled&& saltfield != null && saltfield != ""String_Node_Str"") {
      String salt=MySQL.getfromtable(Config.script_tableprefix + usertable,""String_Node_Str"" + saltfield + ""String_Node_Str"",usernamefield,player);
      EBean.checkSalt(player,salt);
      return true;
    }
  }
  return false;
}",0.9996831130969356
93972,"public boolean onCommand(CommandSender sender,Command cmd,String cmdLabel,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (cmd.getName().equalsIgnoreCase(""String_Node_Str"") && args.length == 0) {
      String tempName=""String_Node_Str"" + pluginName.substring(0,4);
      tempName+=""String_Node_Str"" + pluginName.substring(4,pluginName.length()) + ""String_Node_Str"";
      player.sendMessage(""String_Node_Str"" + tempName + ""String_Node_Str""+ pluginVersion);
      player.sendMessage(""String_Node_Str"" + tempName + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + pluginWebsite);
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(commandString(Config.commands_reload)) || cmd.getName().equalsIgnoreCase(commandString(Config.aliases_reload))) {
      if (args.length == 1) {
        if (ZPermissions.isAllowed(player,Permission.command_admin_reload)) {
          new Config(""String_Node_Str"",""String_Node_Str"" + pluginName + ""String_Node_Str"",""String_Node_Str"");
          LoadYml(""String_Node_Str"",getClass().getProtectionDomain().getCodeSource());
          LoadYml(""String_Node_Str"",getClass().getProtectionDomain().getCodeSource());
          Messages.sendMessage(Message.reload_success,player,null);
          return true;
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (cmd.getName().equalsIgnoreCase(commandString(Config.commands_logout)) || cmd.getName().equalsIgnoreCase(commandString(Config.aliases_logout))) {
      if (args.length == 0) {
        if (ZPermissions.isAllowed(player,Permission.command_logout)) {
          if (Processes.Logout(player)) {
            EBean eBeanClass=EBean.checkPlayer(player,true);
            eBeanClass.setSessiontime(0);
            getDatabase().save(eBeanClass);
            String check=Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player));
            if (AuthDB.AuthDB_Sessions.containsKey(check)) {
              AuthDB_Sessions.remove(check);
            }
            Messages.sendMessage(Message.logout_success,player,null);
            return true;
          }
 else {
            Messages.sendMessage(Message.logout_failure,player,null);
            return true;
          }
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
 else       if (args.length == 1) {
        if (ZPermissions.isAllowed(player,Permission.command_admin_logout)) {
          String PlayerName=args[0];
          List<Player> players=sender.getServer().matchPlayer(PlayerName);
          if (!players.isEmpty()) {
            if (Processes.Logout(players.get(0))) {
              Messages.sendMessage(Message.logout_admin_success,player,null,players.get(0).getName());
              Messages.sendMessage(Message.logout_admin,players.get(0),null);
              return true;
            }
 else {
              Messages.sendMessage(Message.logout_admin_failure,player,null,players.get(0).getName());
              return true;
            }
          }
          Messages.sendMessage(Message.logout_admin_notfound,player,null,PlayerName);
          return true;
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (isAuthorized(player) && (cmd.getName().equalsIgnoreCase(commandString(Config.commands_login)) || cmd.getName().equalsIgnoreCase(commandString(Config.aliases_login)))) {
      if (ZPermissions.isAllowed(player,Permission.command_admin_login)) {
        if (args.length == 1) {
          String PlayerName=args[0];
          List<Player> players=sender.getServer().matchPlayer(PlayerName);
          if (!players.isEmpty()) {
            if (Processes.Logout(players.get(0))) {
              Messages.sendMessage(Message.login_admin_success,player,null,players.get(0).getName());
              Messages.sendMessage(Message.login_admin,players.get(0),null);
              return true;
            }
 else {
              Messages.sendMessage(Message.login_admin_failure,player,null,players.get(0).getName());
              return true;
            }
          }
          Messages.sendMessage(Message.login_admin_notfound,player,null,PlayerName);
          return true;
        }
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
  }
  return false;
}","public boolean onCommand(CommandSender sender,Command cmd,String cmdLabel,String[] args){
  if (sender instanceof Player) {
    String command=cmd.getName();
    if (args.length > 0) {
      for (int i=0; i < args.length; i++) {
        command+=""String_Node_Str"" + args[i];
      }
    }
    Player player=(Player)sender;
    if ((cmd.getName().equalsIgnoreCase(""String_Node_Str"") && args.length == 0) || (command.equalsIgnoreCase(""String_Node_Str""))) {
      String tempName=""String_Node_Str"" + pluginName.substring(0,4);
      tempName+=""String_Node_Str"" + pluginName.substring(4,pluginName.length()) + ""String_Node_Str"";
      player.sendMessage(""String_Node_Str"" + tempName + ""String_Node_Str""+ pluginVersion);
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + pluginWebsite);
      return true;
    }
 else     if (command.equalsIgnoreCase(commandString(Config.commands_admin_reload,true)) || command.equalsIgnoreCase(commandString(Config.aliases_admin_reload,true))) {
      if (ZPermissions.isAllowed(player,Permission.command_admin_reload)) {
        new Config(""String_Node_Str"",""String_Node_Str"" + pluginName + ""String_Node_Str"",""String_Node_Str"");
        LoadYml(""String_Node_Str"",getClass().getProtectionDomain().getCodeSource());
        LoadYml(""String_Node_Str"",getClass().getProtectionDomain().getCodeSource());
        Messages.sendMessage(Message.reload_success,player,null);
        return true;
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
        return true;
      }
    }
 else     if (cmd.getName().equalsIgnoreCase(commandString(Config.commands_user_logout,false)) || cmd.getName().equalsIgnoreCase(commandString(Config.aliases_user_logout,false))) {
      if (ZPermissions.isAllowed(player,Permission.command_logout)) {
        if (Processes.Logout(player)) {
          EBean eBeanClass=EBean.checkPlayer(player,true);
          eBeanClass.setSessiontime(0);
          getDatabase().save(eBeanClass);
          String check=Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player));
          if (AuthDB.AuthDB_Sessions.containsKey(check)) {
            AuthDB_Sessions.remove(check);
          }
          Messages.sendMessage(Message.logout_success,player,null);
          return true;
        }
 else {
          Messages.sendMessage(Message.logout_failure,player,null);
          return true;
        }
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
        return true;
      }
    }
 else     if (command.startsWith(commandString(Config.commands_admin_logout,true)) || command.startsWith(commandString(Config.aliases_admin_logout,true))) {
      if (ZPermissions.isAllowed(player,Permission.command_admin_logout)) {
        String[] temp=commandString(Config.commands_admin_logout,true).split(""String_Node_Str"");
        if (args.length == temp.length) {
          String PlayerName=args[temp.length - 1];
          List<Player> players=sender.getServer().matchPlayer(PlayerName);
          if (!players.isEmpty()) {
            if (Processes.Logout(players.get(0))) {
              Messages.sendMessage(Message.logout_admin_success,player,null,players.get(0).getName());
              Messages.sendMessage(Message.logout_admin,players.get(0),null);
              return true;
            }
 else {
              Messages.sendMessage(Message.logout_admin_failure,player,null,players.get(0).getName());
              return true;
            }
          }
          Messages.sendMessage(Message.logout_admin_notfound,player,null,PlayerName);
          return true;
        }
 else {
          player.sendMessage(""String_Node_Str"" + cmd.getUsage());
          return true;
        }
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
        return true;
      }
    }
 else     if (command.startsWith(commandString(Config.commands_admin_login,true)) || command.startsWith(commandString(Config.aliases_admin_login,true))) {
      if (ZPermissions.isAllowed(player,Permission.command_admin_login)) {
        String[] temp=commandString(Config.commands_admin_login,true).split(""String_Node_Str"");
        if (args.length == temp.length) {
          String PlayerName=args[temp.length - 1];
          List<Player> players=sender.getServer().matchPlayer(PlayerName);
          if (!players.isEmpty()) {
            if (Processes.Login(players.get(0))) {
              Messages.sendMessage(Message.login_admin_success,player,null,players.get(0).getName());
              Messages.sendMessage(Message.login_admin,players.get(0),null);
              return true;
            }
 else {
              Messages.sendMessage(Message.login_admin_failure,player,null,players.get(0).getName());
              return true;
            }
          }
          Messages.sendMessage(Message.login_admin_notfound,player,null,PlayerName);
          return true;
        }
 else {
          player.sendMessage(""String_Node_Str"" + cmd.getUsage());
          return true;
        }
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
        return true;
      }
    }
  }
  return true;
}",0.586990351696234
93973,"public String commandString(String command){
  if (command.contains(""String_Node_Str"")) {
    String[] temp=command.split(""String_Node_Str"");
    if (temp.length > 0) {
      command=temp[0].replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    command=command.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  return command;
}","public String commandString(String command,boolean check){
  command=command.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return command;
}",0.5292929292929293
93974,"public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  long start=Util.timeMS();
  String Contrib=event.getMessage();
  Contrib=Contrib.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!ZBukkitContrib.checkCommand(Contrib)) {
    String[] split=event.getMessage().split(""String_Node_Str"");
    Player player=event.getPlayer();
    if (split[0].equalsIgnoreCase(Config.commands_login) || split[0].equalsIgnoreCase(Config.aliases_login)) {
      if (ZPermissions.isAllowed(player,Permission.command_login)) {
        if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
          Messages.sendMessage(Message.login_notregistered,player,null);
        }
 else         if (plugin.isAuthorized(player)) {
          Messages.sendMessage(Message.login_authorized,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.login_usage,player,null);
        }
 else         if (this.plugin.checkPassword(player.getName(),split[1])) {
          Processes.Login(player);
          Messages.sendMessage(Message.login_success,player,null);
        }
 else {
          if (Config.authdb_enabled) {
            Messages.sendMessage(Message.login_failure,player,null);
          }
 else {
            Messages.sendMessage(Message.login_offline,player,null);
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_login + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_link) || split[0].equalsIgnoreCase(Config.aliases_link)) {
      if (Config.link_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_link)) {
          if (split.length == 3) {
            if (!player.getName().equals(split[1])) {
              if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false) {
                if (Util.checkOtherName(player.getName()).equals(player.getName())) {
                  EBean eBeanClass=EBean.checkPlayer(split[1],true);
                  String linkedname=eBeanClass.getLinkedname();
                  if (linkedname != null) {
                    Messages.sendMessage(Message.link_duplicate,player,null);
                  }
 else                   if (this.plugin.checkPassword(split[1],split[2])) {
                    Processes.Link(player,split[1]);
                    Messages.sendMessage(Message.link_success,player,null);
                  }
 else {
                    Messages.sendMessage(Message.link_failure,player,null);
                  }
                }
 else {
                  Messages.sendMessage(Message.link_exists,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.link_registred,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.link_invaliduser,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.link_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_link + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_unlink) || split[0].equalsIgnoreCase(Config.aliases_unlink)) {
      if (Config.unlink_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_unlink)) {
          if (split.length == 3) {
            if (Util.checkOtherName(player.getName()).equals(player.getDisplayName())) {
              EBean eBeanClass=EBean.checkPlayer(player,true);
              String linkedname=eBeanClass.getLinkedname();
              if (linkedname.equals(split[1])) {
                if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Unlink(player,split[1]);
                  Messages.sendMessage(Message.unlink_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.unlink_invalidpass,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.unlink_invaliduser,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.unlink_nonexist,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.unlink_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_unlink + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_register) || split[0].equalsIgnoreCase(Config.aliases_register)) {
      if (ZPermissions.isAllowed(player,Permission.command_register)) {
        Boolean email=true;
        if (Config.custom_enabled) {
          email=Config.custom_emailrequired;
        }
        if (Config.custom_emailfield == null || Config.custom_emailfield == ""String_Node_Str"") {
          email=false;
        }
        if (!Config.register_enabled) {
          Messages.sendMessage(Message.register_disabled,player,null);
        }
 else         if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
          Messages.sendMessage(Message.register_exists,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.register_usage,player,null);
        }
 else         if (split.length < 3 && email) {
          Messages.sendMessage(Message.email_required,player,null);
        }
 else         if ((split.length >= 3 && email) && (!this.plugin.checkEmail(split[2]))) {
          Messages.sendMessage(Message.email_invalid,player,null);
        }
 else {
          try {
            if (split.length >= 3 || (!email && split.length >= 2)) {
              String themail=null;
              if (!email) {
                themail=null;
              }
 else {
                themail=split[2];
              }
              if (this.plugin.register(player,split[1],themail,Util.craftFirePlayer.getIP(player))) {
                if (Processes.Login(player)) {
                  Messages.sendMessage(Message.register_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.register_failure,player,null);
                  Util.logging.Debug(""String_Node_Str"");
                }
              }
            }
          }
 catch (          IOException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
catch (          SQLException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_register + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
 else     if (!plugin.isAuthorized(player)) {
      if (!checkGuest(player,Config.guests_commands)) {
        event.setMessage(""String_Node_Str"");
        event.setCancelled(true);
      }
    }
  }
 else {
    Util.logging.Debug(""String_Node_Str"" + event.getMessage());
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}","public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  long start=Util.timeMS();
  String Contrib=event.getMessage();
  Contrib=Contrib.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!ZBukkitContrib.checkCommand(Contrib)) {
    String[] split=event.getMessage().split(""String_Node_Str"");
    Player player=event.getPlayer();
    if (split[0].equalsIgnoreCase(Config.commands_user_login) || split[0].equalsIgnoreCase(Config.aliases_user_login)) {
      if (ZPermissions.isAllowed(player,Permission.command_login)) {
        if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
          Messages.sendMessage(Message.login_notregistered,player,null);
        }
 else         if (plugin.isAuthorized(player)) {
          Messages.sendMessage(Message.login_authorized,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.login_usage,player,null);
        }
 else         if (this.plugin.checkPassword(player.getName(),split[1])) {
          Processes.Login(player);
          Messages.sendMessage(Message.login_success,player,null);
        }
 else {
          if (Config.authdb_enabled) {
            Messages.sendMessage(Message.login_failure,player,null);
          }
 else {
            Messages.sendMessage(Message.login_offline,player,null);
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_user_login + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_user_link) || split[0].equalsIgnoreCase(Config.aliases_user_link)) {
      if (Config.link_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_link)) {
          if (split.length == 3) {
            if (!player.getName().equals(split[1])) {
              if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false) {
                if (Util.checkOtherName(player.getName()).equals(player.getName())) {
                  EBean eBeanClass=EBean.checkPlayer(split[1],true);
                  String linkedname=eBeanClass.getLinkedname();
                  if (linkedname != null) {
                    Messages.sendMessage(Message.link_duplicate,player,null);
                  }
 else                   if (this.plugin.checkPassword(split[1],split[2])) {
                    Processes.Link(player,split[1]);
                    Messages.sendMessage(Message.link_success,player,null);
                  }
 else {
                    Messages.sendMessage(Message.link_failure,player,null);
                  }
                }
 else {
                  Messages.sendMessage(Message.link_exists,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.link_registred,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.link_invaliduser,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.link_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_user_link + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_user_unlink) || split[0].equalsIgnoreCase(Config.aliases_user_unlink)) {
      if (Config.unlink_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_unlink)) {
          if (split.length == 3) {
            if (Util.checkOtherName(player.getName()).equals(player.getDisplayName())) {
              EBean eBeanClass=EBean.checkPlayer(player,true);
              String linkedname=eBeanClass.getLinkedname();
              if (linkedname.equals(split[1])) {
                if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Unlink(player,split[1]);
                  Messages.sendMessage(Message.unlink_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.unlink_invalidpass,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.unlink_invaliduser,player,null);
              }
            }
 else {
              Messages.sendMessage(Message.unlink_nonexist,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.unlink_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_user_unlink + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_user_register) || split[0].equalsIgnoreCase(Config.aliases_user_register)) {
      if (ZPermissions.isAllowed(player,Permission.command_register)) {
        Boolean email=true;
        if (Config.custom_enabled) {
          email=Config.custom_emailrequired;
        }
        if (Config.custom_emailfield == null || Config.custom_emailfield == ""String_Node_Str"") {
          email=false;
        }
        if (!Config.register_enabled) {
          Messages.sendMessage(Message.register_disabled,player,null);
        }
 else         if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
          Messages.sendMessage(Message.register_exists,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.register_usage,player,null);
        }
 else         if (split.length < 3 && email) {
          Messages.sendMessage(Message.email_required,player,null);
        }
 else         if ((split.length >= 3 && email) && (!this.plugin.checkEmail(split[2]))) {
          Messages.sendMessage(Message.email_invalid,player,null);
        }
 else {
          try {
            if (split.length >= 3 || (!email && split.length >= 2)) {
              String themail=null;
              if (!email) {
                themail=null;
              }
 else {
                themail=split[2];
              }
              if (this.plugin.register(player,split[1],themail,Util.craftFirePlayer.getIP(player))) {
                if (Processes.Login(player)) {
                  Messages.sendMessage(Message.register_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.register_failure,player,null);
                  Util.logging.Debug(""String_Node_Str"");
                }
              }
            }
          }
 catch (          IOException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
catch (          SQLException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_user_register + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
 else     if (!plugin.isAuthorized(player)) {
      if (!checkGuest(player,Config.guests_commands)) {
        event.setMessage(""String_Node_Str"");
        event.setCancelled(true);
      }
    }
  }
 else {
    Util.logging.Debug(""String_Node_Str"" + event.getMessage());
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}",0.99642899654803
93975,"public Config(String config,String directory,String filename){
  template=new Configuration(new File(directory,filename));
  template.load();
  if (config.equalsIgnoreCase(""String_Node_Str"")) {
    language=getConfigString(""String_Node_Str"",""String_Node_Str"");
    autoupdate_enable=getConfigBoolean(""String_Node_Str"",true);
    debug_enable=getConfigBoolean(""String_Node_Str"",false);
    usagestats_enabled=getConfigBoolean(""String_Node_Str"",true);
    logformat=getConfigString(""String_Node_Str"",""String_Node_Str"");
    logging_enabled=getConfigBoolean(""String_Node_Str"",true);
    database_type=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_port=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_host=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_database=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_keepalive=getConfigBoolean(""String_Node_Str"",false);
    dbDb=""String_Node_Str"" + database_host + ""String_Node_Str""+ database_port+ ""String_Node_Str""+ database_database;
    script_name=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    script_version=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_tableprefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_updatestatus=getConfigBoolean(""String_Node_Str"",true);
    script_salt=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    custom_enabled=getConfigBoolean(""String_Node_Str"",false);
    custom_autocreate=getConfigBoolean(""String_Node_Str"",true);
    custom_emailrequired=getConfigBoolean(""String_Node_Str"",false);
    custom_table=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_userfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_passfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_emailfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_encryption=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    register_enabled=getConfigBoolean(""String_Node_Str"",true);
    register_force=getConfigBoolean(""String_Node_Str"",true);
    register_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_delay=Util.toTicks(register_delay_time,register_delay_length);
    register_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_show=Util.toSeconds(register_show_time,register_show_length);
    register_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_timeout=Util.toTicks(register_timeout_time,register_timeout_length);
    login_method=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_tries=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    login_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_delay=Util.toTicks(login_delay_time,login_delay_length);
    login_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_show=Util.toSeconds(login_show_time,login_show_length);
    login_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_timeout=Util.toTicks(login_timeout_time,login_timeout_length);
    link_enabled=getConfigBoolean(""String_Node_Str"",true);
    link_rename=getConfigBoolean(""String_Node_Str"",true);
    unlink_enabled=getConfigBoolean(""String_Node_Str"",true);
    unlink_rename=getConfigBoolean(""String_Node_Str"",true);
    username_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    username_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    session_enabled=getConfigBoolean(""String_Node_Str"",false);
    session_protect=getConfigBoolean(""String_Node_Str"",true);
    session_thelength=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    session_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    session_length=Util.toSeconds(session_time,session_thelength);
    session_start=Util.checkSessionStart(getConfigString(""String_Node_Str"",""String_Node_Str""));
    guests_commands=getConfigBoolean(""String_Node_Str"",false);
    guests_movement=getConfigBoolean(""String_Node_Str"",false);
    guests_inventory=getConfigBoolean(""String_Node_Str"",false);
    guests_drop=getConfigBoolean(""String_Node_Str"",false);
    guests_pickup=getConfigBoolean(""String_Node_Str"",false);
    guests_health=getConfigBoolean(""String_Node_Str"",false);
    guests_mobdamage=getConfigBoolean(""String_Node_Str"",false);
    guests_interact=getConfigBoolean(""String_Node_Str"",false);
    guests_build=getConfigBoolean(""String_Node_Str"",false);
    guests_destroy=getConfigBoolean(""String_Node_Str"",false);
    guests_chat=getConfigBoolean(""String_Node_Str"",false);
    guests_mobtargeting=getConfigBoolean(""String_Node_Str"",false);
    guests_pvp=getConfigBoolean(""String_Node_Str"",false);
    protection_freeze=getConfigBoolean(""String_Node_Str"",true);
    protection_freeze_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_freeze_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_freeze_delay=Util.toSeconds(protection_freeze_delay_time,protection_freeze_delay_length);
    protection_notify=getConfigBoolean(""String_Node_Str"",true);
    protection_notify_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_notify_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_notify_delay=Util.toSeconds(protection_notify_delay_time,protection_notify_delay_length);
    filter_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    filter_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_whitelist=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    CraftIRC_enabled=getConfigBoolean(""String_Node_Str"",true);
    CraftIRC_tag=getConfigString(""String_Node_Str"",""String_Node_Str"");
    CraftIRC_prefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    Messages.time_millisecond=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_milliseconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_second=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_seconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minute=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minutes=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hour=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hours=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_day=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_days=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_reload_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_database_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_disabled=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_normal=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_prompt=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_authorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_duplicate=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_registred=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_nonexist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invalidpass=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_required=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_invalid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_badcharacters=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_username=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_password=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_valid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_protected=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_denied=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_notauthorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_join=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_quit=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    commands_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_setspawn=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_setspawn=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
}","public Config(String config,String directory,String filename){
  template=new Configuration(new File(directory,filename));
  template.load();
  if (config.equalsIgnoreCase(""String_Node_Str"")) {
    language=getConfigString(""String_Node_Str"",""String_Node_Str"");
    autoupdate_enable=getConfigBoolean(""String_Node_Str"",true);
    debug_enable=getConfigBoolean(""String_Node_Str"",false);
    usagestats_enabled=getConfigBoolean(""String_Node_Str"",true);
    logformat=getConfigString(""String_Node_Str"",""String_Node_Str"");
    logging_enabled=getConfigBoolean(""String_Node_Str"",true);
    database_type=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_port=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_host=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_database=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_keepalive=getConfigBoolean(""String_Node_Str"",false);
    dbDb=""String_Node_Str"" + database_host + ""String_Node_Str""+ database_port+ ""String_Node_Str""+ database_database;
    script_name=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    script_version=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_tableprefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_updatestatus=getConfigBoolean(""String_Node_Str"",true);
    script_salt=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    custom_enabled=getConfigBoolean(""String_Node_Str"",false);
    custom_autocreate=getConfigBoolean(""String_Node_Str"",true);
    custom_emailrequired=getConfigBoolean(""String_Node_Str"",false);
    custom_table=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_userfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_passfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_emailfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_encryption=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    register_enabled=getConfigBoolean(""String_Node_Str"",true);
    register_force=getConfigBoolean(""String_Node_Str"",true);
    register_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_delay=Util.toTicks(register_delay_time,register_delay_length);
    register_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_show=Util.toSeconds(register_show_time,register_show_length);
    register_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_timeout=Util.toTicks(register_timeout_time,register_timeout_length);
    login_method=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_tries=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    login_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_delay=Util.toTicks(login_delay_time,login_delay_length);
    login_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_show=Util.toSeconds(login_show_time,login_show_length);
    login_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_timeout=Util.toTicks(login_timeout_time,login_timeout_length);
    link_enabled=getConfigBoolean(""String_Node_Str"",true);
    link_rename=getConfigBoolean(""String_Node_Str"",true);
    unlink_enabled=getConfigBoolean(""String_Node_Str"",true);
    unlink_rename=getConfigBoolean(""String_Node_Str"",true);
    username_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    username_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    session_enabled=getConfigBoolean(""String_Node_Str"",false);
    session_protect=getConfigBoolean(""String_Node_Str"",true);
    session_thelength=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    session_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    session_length=Util.toSeconds(session_time,session_thelength);
    session_start=Util.checkSessionStart(getConfigString(""String_Node_Str"",""String_Node_Str""));
    guests_commands=getConfigBoolean(""String_Node_Str"",false);
    guests_movement=getConfigBoolean(""String_Node_Str"",false);
    guests_inventory=getConfigBoolean(""String_Node_Str"",false);
    guests_drop=getConfigBoolean(""String_Node_Str"",false);
    guests_pickup=getConfigBoolean(""String_Node_Str"",false);
    guests_health=getConfigBoolean(""String_Node_Str"",false);
    guests_mobdamage=getConfigBoolean(""String_Node_Str"",false);
    guests_interact=getConfigBoolean(""String_Node_Str"",false);
    guests_build=getConfigBoolean(""String_Node_Str"",false);
    guests_destroy=getConfigBoolean(""String_Node_Str"",false);
    guests_chat=getConfigBoolean(""String_Node_Str"",false);
    guests_mobtargeting=getConfigBoolean(""String_Node_Str"",false);
    guests_pvp=getConfigBoolean(""String_Node_Str"",false);
    protection_freeze=getConfigBoolean(""String_Node_Str"",true);
    protection_freeze_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_freeze_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_freeze_delay=Util.toSeconds(protection_freeze_delay_time,protection_freeze_delay_length);
    protection_notify=getConfigBoolean(""String_Node_Str"",true);
    protection_notify_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_notify_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_notify_delay=Util.toSeconds(protection_notify_delay_time,protection_notify_delay_length);
    filter_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    filter_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_whitelist=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    CraftIRC_enabled=getConfigBoolean(""String_Node_Str"",true);
    CraftIRC_tag=getConfigString(""String_Node_Str"",""String_Node_Str"");
    CraftIRC_prefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    Messages.time_millisecond=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_milliseconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_second=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_seconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minute=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minutes=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hour=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hours=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_day=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_days=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_reload_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_database_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_disabled=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_normal=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_prompt=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_authorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_duplicate=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_registred=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_nonexist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invalidpass=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_required=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_invalid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_badcharacters=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_username=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_password=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_valid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_protected=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_denied=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_notauthorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_join=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_quit=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    commands_user_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
}",0.970808362561794
93976,"void LoadYml(String type,CodeSource src){
  String Language=""String_Node_Str"";
  File LanguagesAll=new File(getDataFolder() + ""String_Node_Str"");
  if (!LanguagesAll.exists()) {
    if (LanguagesAll.mkdir()) {
      Util.logging.Debug(""String_Node_Str"" + LanguagesAll);
    }
  }
  boolean Set=false;
  File[] directories;
  FileFilter fileFilter=new FileFilter(){
    public boolean accept(    File file){
      return file.isDirectory();
    }
  }
;
  if (src != null) {
    try {
      URL jar=src.getLocation();
      ZipInputStream zip=new ZipInputStream(jar.openStream());
      ZipEntry ze=null;
      while ((ze=zip.getNextEntry()) != null) {
        String directory=ze.getName();
        if (directory.startsWith(""String_Node_Str"") && directory.endsWith(""String_Node_Str"") == false) {
          directory=directory.replace(""String_Node_Str"",""String_Node_Str"");
          directory=directory.replace(""String_Node_Str"",""String_Node_Str"");
          if (directory.equals(""String_Node_Str"") == false) {
            Util.logging.Debug(""String_Node_Str"" + directory);
            File f=new File(getDataFolder() + ""String_Node_Str"" + directory+ ""String_Node_Str""+ type+ ""String_Node_Str"");
            if (!f.exists()) {
              Util.logging.Info(type + ""String_Node_Str"" + ""String_Node_Str""+ directory+ ""String_Node_Str""+ type+ ""String_Node_Str"");
              DefaultFile(type + ""String_Node_Str"",""String_Node_Str"" + directory + ""String_Node_Str"");
            }
            if ((Config.language).equalsIgnoreCase(directory)) {
              Set=true;
              Language=directory;
            }
          }
        }
      }
      zip.close();
    }
 catch (    IOException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
  directories=LanguagesAll.listFiles(fileFilter);
  if (directories.length > 0) {
    Util.logging.Debug(""String_Node_Str"" + directories.length + ""String_Node_Str""+ type);
  }
 else {
    Util.logging.error(""String_Node_Str"" + type);
  }
  if (!Set) {
    for (int z=0; z < directories.length; z++) {
      if (Config.language.equalsIgnoreCase(directories[z].getName())) {
        Set=true;
        Language=directories[z].getName();
      }
    }
  }
  if (!Set) {
    Util.logging.Info(""String_Node_Str"" + Config.language + ""String_Node_Str""+ Language);
  }
 else {
    Util.logging.Debug(type + ""String_Node_Str"" + Language);
  }
  new Config(type,getDataFolder() + ""String_Node_Str"" + Language+ ""String_Node_Str"",type + ""String_Node_Str"");
}","void LoadYml(String type,CodeSource src){
  String languageMessages=""String_Node_Str"";
  String languageCommands=""String_Node_Str"";
  File LanguagesAll=new File(getDataFolder() + ""String_Node_Str"");
  if (!LanguagesAll.exists()) {
    if (LanguagesAll.mkdir()) {
      Util.logging.Debug(""String_Node_Str"" + LanguagesAll);
    }
  }
  boolean setCommands=false;
  boolean setMessages=false;
  File[] directories;
  FileFilter fileFilter=new FileFilter(){
    public boolean accept(    File file){
      return file.isDirectory();
    }
  }
;
  if (src != null) {
    try {
      URL jar=src.getLocation();
      ZipInputStream zip=new ZipInputStream(jar.openStream());
      ZipEntry ze=null;
      while ((ze=zip.getNextEntry()) != null) {
        String directory=ze.getName();
        if (directory.startsWith(""String_Node_Str"") && directory.endsWith(""String_Node_Str"") == false) {
          directory=directory.replace(""String_Node_Str"",""String_Node_Str"");
          directory=directory.replace(""String_Node_Str"",""String_Node_Str"");
          if (directory.equals(""String_Node_Str"") == false) {
            Util.logging.Debug(""String_Node_Str"" + directory);
            File f=new File(getDataFolder() + ""String_Node_Str"" + directory+ ""String_Node_Str""+ type+ ""String_Node_Str"");
            if (!f.exists()) {
              Util.logging.Info(type + ""String_Node_Str"" + ""String_Node_Str""+ directory+ ""String_Node_Str""+ type+ ""String_Node_Str"");
              DefaultFile(type + ""String_Node_Str"",""String_Node_Str"" + directory + ""String_Node_Str"");
            }
            if (type.equals(""String_Node_Str"") && (Config.language_commands).equalsIgnoreCase(directory)) {
              setCommands=true;
              languageCommands=directory;
            }
 else             if (type.equals(""String_Node_Str"") && (Config.language_messages).equalsIgnoreCase(directory)) {
              setMessages=true;
              languageMessages=directory;
            }
          }
        }
      }
      zip.close();
    }
 catch (    IOException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
  directories=LanguagesAll.listFiles(fileFilter);
  if (directories.length > 0) {
    Util.logging.Debug(""String_Node_Str"" + directories.length + ""String_Node_Str""+ type);
  }
 else {
    Util.logging.error(""String_Node_Str"" + type);
  }
  if (!setCommands) {
    for (int z=0; z < directories.length; z++) {
      if (Config.language_commands.equalsIgnoreCase(directories[z].getName())) {
        setCommands=true;
        languageCommands=directories[z].getName();
      }
    }
  }
 else   if (!setMessages) {
    for (int z=0; z < directories.length; z++) {
      if (Config.language_messages.equalsIgnoreCase(directories[z].getName())) {
        setMessages=true;
        languageMessages=directories[z].getName();
      }
    }
  }
  if (!setCommands) {
    Util.logging.Info(""String_Node_Str"" + Config.language_commands + ""String_Node_Str""+ languageCommands);
  }
 else   if (!setMessages) {
    Util.logging.Info(""String_Node_Str"" + Config.language_messages + ""String_Node_Str""+ languageMessages);
  }
 else {
    Util.logging.Debug(type + ""String_Node_Str"");
  }
  new Config(type,getDataFolder() + ""String_Node_Str"" + languageCommands+ ""String_Node_Str"",type + ""String_Node_Str"");
  new Config(type,getDataFolder() + ""String_Node_Str"" + languageMessages+ ""String_Node_Str"",type + ""String_Node_Str"");
}",0.8286565292365574
93977,"public Config(String config,String directory,String filename){
  template=new Configuration(new File(directory,filename));
  template.load();
  if (config.equalsIgnoreCase(""String_Node_Str"")) {
    language=getConfigString(""String_Node_Str"",""String_Node_Str"");
    autoupdate_enable=getConfigBoolean(""String_Node_Str"",true);
    debug_enable=getConfigBoolean(""String_Node_Str"",false);
    usagestats_enabled=getConfigBoolean(""String_Node_Str"",true);
    logformat=getConfigString(""String_Node_Str"",""String_Node_Str"");
    logging_enabled=getConfigBoolean(""String_Node_Str"",true);
    database_type=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_port=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_host=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_database=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_keepalive=getConfigBoolean(""String_Node_Str"",false);
    dbDb=""String_Node_Str"" + database_host + ""String_Node_Str""+ database_port+ ""String_Node_Str""+ database_database;
    script_name=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    script_version=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_tableprefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_updatestatus=getConfigBoolean(""String_Node_Str"",true);
    script_salt=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    custom_enabled=getConfigBoolean(""String_Node_Str"",false);
    custom_autocreate=getConfigBoolean(""String_Node_Str"",true);
    custom_emailrequired=getConfigBoolean(""String_Node_Str"",false);
    custom_table=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_userfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_passfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_emailfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_encryption=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    register_enabled=getConfigBoolean(""String_Node_Str"",true);
    register_force=getConfigBoolean(""String_Node_Str"",true);
    register_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_delay=Util.toTicks(register_delay_time,register_delay_length);
    register_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_show=Util.toSeconds(register_show_time,register_show_length);
    register_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_timeout=Util.toTicks(register_timeout_time,register_timeout_length);
    login_method=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_tries=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    login_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_delay=Util.toTicks(login_delay_time,login_delay_length);
    login_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_show=Util.toSeconds(login_show_time,login_show_length);
    login_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_timeout=Util.toTicks(login_timeout_time,login_timeout_length);
    link_enabled=getConfigBoolean(""String_Node_Str"",true);
    link_rename=getConfigBoolean(""String_Node_Str"",true);
    unlink_enabled=getConfigBoolean(""String_Node_Str"",true);
    unlink_rename=getConfigBoolean(""String_Node_Str"",true);
    username_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    username_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    session_enabled=getConfigBoolean(""String_Node_Str"",false);
    session_protect=getConfigBoolean(""String_Node_Str"",true);
    session_thelength=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    session_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    session_length=Util.toSeconds(session_time,session_thelength);
    session_start=Util.checkSessionStart(getConfigString(""String_Node_Str"",""String_Node_Str""));
    guests_commands=getConfigBoolean(""String_Node_Str"",false);
    guests_movement=getConfigBoolean(""String_Node_Str"",false);
    guests_inventory=getConfigBoolean(""String_Node_Str"",false);
    guests_drop=getConfigBoolean(""String_Node_Str"",false);
    guests_pickup=getConfigBoolean(""String_Node_Str"",false);
    guests_health=getConfigBoolean(""String_Node_Str"",false);
    guests_mobdamage=getConfigBoolean(""String_Node_Str"",false);
    guests_interact=getConfigBoolean(""String_Node_Str"",false);
    guests_build=getConfigBoolean(""String_Node_Str"",false);
    guests_destroy=getConfigBoolean(""String_Node_Str"",false);
    guests_chat=getConfigBoolean(""String_Node_Str"",false);
    guests_mobtargeting=getConfigBoolean(""String_Node_Str"",false);
    guests_pvp=getConfigBoolean(""String_Node_Str"",false);
    protection_freeze=getConfigBoolean(""String_Node_Str"",true);
    protection_freeze_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_freeze_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_freeze_delay=Util.toSeconds(protection_freeze_delay_time,protection_freeze_delay_length);
    protection_notify=getConfigBoolean(""String_Node_Str"",true);
    protection_notify_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_notify_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_notify_delay=Util.toSeconds(protection_notify_delay_time,protection_notify_delay_length);
    filter_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    filter_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_whitelist=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    CraftIRC_enabled=getConfigBoolean(""String_Node_Str"",true);
    CraftIRC_tag=getConfigString(""String_Node_Str"",""String_Node_Str"");
    CraftIRC_prefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    Messages.time_millisecond=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_milliseconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_second=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_seconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minute=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minutes=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hour=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hours=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_day=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_days=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_reload_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_database_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_disabled=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_normal=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_prompt=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_authorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_duplicate=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_nonexist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invalidpass=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_required=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_invalid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_badcharacters=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_username=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_password=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_valid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_protected=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_denied=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_notauthorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_join=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_quit=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    commands_user_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
}","public Config(String config,String directory,String filename){
  template=new Configuration(new File(directory,filename));
  template.load();
  if (config.equalsIgnoreCase(""String_Node_Str"")) {
    language_commands=getConfigString(""String_Node_Str"",""String_Node_Str"");
    language_messages=getConfigString(""String_Node_Str"",""String_Node_Str"");
    autoupdate_enable=getConfigBoolean(""String_Node_Str"",true);
    debug_enable=getConfigBoolean(""String_Node_Str"",false);
    usagestats_enabled=getConfigBoolean(""String_Node_Str"",true);
    logformat=getConfigString(""String_Node_Str"",""String_Node_Str"");
    logging_enabled=getConfigBoolean(""String_Node_Str"",true);
    database_type=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_port=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_host=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_database=getConfigString(""String_Node_Str"",""String_Node_Str"");
    database_keepalive=getConfigBoolean(""String_Node_Str"",false);
    dbDb=""String_Node_Str"" + database_host + ""String_Node_Str""+ database_port+ ""String_Node_Str""+ database_database;
    script_name=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    script_version=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_tableprefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
    script_updatestatus=getConfigBoolean(""String_Node_Str"",true);
    script_salt=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    custom_enabled=getConfigBoolean(""String_Node_Str"",false);
    custom_autocreate=getConfigBoolean(""String_Node_Str"",true);
    custom_emailrequired=getConfigBoolean(""String_Node_Str"",false);
    custom_table=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_userfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_passfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_emailfield=getConfigString(""String_Node_Str"",""String_Node_Str"");
    custom_encryption=getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    register_enabled=getConfigBoolean(""String_Node_Str"",true);
    register_force=getConfigBoolean(""String_Node_Str"",true);
    register_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_delay=Util.toTicks(register_delay_time,register_delay_length);
    register_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_show=Util.toSeconds(register_show_time,register_show_length);
    register_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    register_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    register_timeout=Util.toTicks(register_timeout_time,register_timeout_length);
    login_method=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_tries=getConfigString(""String_Node_Str"",""String_Node_Str"");
    login_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    login_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_delay=Util.toTicks(login_delay_time,login_delay_length);
    login_show_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_show_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_show=Util.toSeconds(login_show_time,login_show_length);
    login_timeout_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    login_timeout_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    login_timeout=Util.toTicks(login_timeout_time,login_timeout_length);
    link_enabled=getConfigBoolean(""String_Node_Str"",true);
    link_rename=getConfigBoolean(""String_Node_Str"",true);
    unlink_enabled=getConfigBoolean(""String_Node_Str"",true);
    unlink_rename=getConfigBoolean(""String_Node_Str"",true);
    username_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    username_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_minimum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    password_maximum=getConfigString(""String_Node_Str"",""String_Node_Str"");
    session_enabled=getConfigBoolean(""String_Node_Str"",false);
    session_protect=getConfigBoolean(""String_Node_Str"",true);
    session_thelength=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    session_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    session_length=Util.toSeconds(session_time,session_thelength);
    session_start=Util.checkSessionStart(getConfigString(""String_Node_Str"",""String_Node_Str""));
    guests_commands=getConfigBoolean(""String_Node_Str"",false);
    guests_movement=getConfigBoolean(""String_Node_Str"",false);
    guests_inventory=getConfigBoolean(""String_Node_Str"",false);
    guests_drop=getConfigBoolean(""String_Node_Str"",false);
    guests_pickup=getConfigBoolean(""String_Node_Str"",false);
    guests_health=getConfigBoolean(""String_Node_Str"",false);
    guests_mobdamage=getConfigBoolean(""String_Node_Str"",false);
    guests_interact=getConfigBoolean(""String_Node_Str"",false);
    guests_build=getConfigBoolean(""String_Node_Str"",false);
    guests_destroy=getConfigBoolean(""String_Node_Str"",false);
    guests_chat=getConfigBoolean(""String_Node_Str"",false);
    guests_mobtargeting=getConfigBoolean(""String_Node_Str"",false);
    guests_pvp=getConfigBoolean(""String_Node_Str"",false);
    protection_freeze=getConfigBoolean(""String_Node_Str"",true);
    protection_freeze_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_freeze_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_freeze_delay=Util.toSeconds(protection_freeze_delay_time,protection_freeze_delay_length);
    protection_notify=getConfigBoolean(""String_Node_Str"",true);
    protection_notify_delay_length=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[0];
    protection_notify_delay_time=Util.split(getConfigString(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")[1];
    protection_notify_delay=Util.toSeconds(protection_notify_delay_time,protection_notify_delay_length);
    filter_action=Util.getAction(getConfigString(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    filter_username=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_password=getConfigString(""String_Node_Str"",""String_Node_Str"");
    filter_whitelist=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    CraftIRC_enabled=getConfigBoolean(""String_Node_Str"",true);
    CraftIRC_tag=getConfigString(""String_Node_Str"",""String_Node_Str"");
    CraftIRC_prefix=getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    Messages.time_millisecond=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_milliseconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_second=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_seconds=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minute=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_minutes=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hour=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_hours=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_day=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.time_days=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_reload_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_database_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_disabled=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_register_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unregister_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_logout_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_normal=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_prompt=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_offline=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_authorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_timeout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_admin_notfound=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_login_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_welcome=(String)Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_exists=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_duplicate=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_link_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_nonexist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invaliduser=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_invalidpass=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_unlink_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_required=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_invalid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_email_badcharacters=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_username=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_password=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_username_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_minimum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_maximum=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_notregistered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_password_usage=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_valid=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_session_protected=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_denied=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.AuthDB_message_protection_notauthorized=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_join=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_status_quit=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_register_registered=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_success=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_password_failure=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_idle_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_renamed=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_kicked=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    Messages.CraftIRC_message_filter_whitelist=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (config.equalsIgnoreCase(""String_Node_Str"")) {
    commands_user_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_user_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    commands_admin_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_register=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_link=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_unlink=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_user_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_login=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_logout=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
    aliases_admin_reload=Config.getConfigString(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9976995317870578
93978,"public boolean isRegistered(String when,String player){
  boolean dupe=false;
  boolean checkneeded=true;
  Util.logging.Debug(""String_Node_Str"" + player + ""String_Node_Str"");
  player=Util.checkOtherName(player);
  EBean eBeanClass=EBean.checkPlayer(player,true);
  if (eBeanClass.getRegistered().equalsIgnoreCase(""String_Node_Str"")) {
    if (when.equalsIgnoreCase(""String_Node_Str"")) {
      if (!Config.database_keepalive) {
        Util.databaseManager.connect();
      }
      Config.hasForumBoard=false;
      try {
        if (Util.checkScript(""String_Node_Str"",Config.script_name,player,null,null,null)) {
          AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
          dupe=true;
        }
      }
 catch (      SQLException e) {
        Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
      if (!Config.database_keepalive) {
        Util.databaseManager.close();
      }
      if (!dupe) {
        AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
      }
      return dupe;
    }
 else     if (when.equalsIgnoreCase(""String_Node_Str"")) {
      if (!Config.database_keepalive) {
        Util.databaseManager.connect();
      }
      Config.hasForumBoard=false;
      try {
        if (Util.checkScript(""String_Node_Str"",Config.script_name,player,null,null,null)) {
          AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
          dupe=true;
        }
 else         if (Util.checkOtherName(player) != player) {
          AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
          dupe=true;
        }
      }
 catch (      SQLException e) {
        Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
      if (!Config.database_keepalive) {
        Util.databaseManager.close();
      }
      if (!dupe) {
        AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
      }
      return dupe;
    }
 else {
      if (this.AuthDB_Authed.containsKey(Encryption.md5(player))) {
        String check=AuthDB_Authed.get(Encryption.md5(player));
        if (check.equalsIgnoreCase(""String_Node_Str"")) {
          checkneeded=false;
          return true;
        }
 else         if (check.equalsIgnoreCase(""String_Node_Str"")) {
          return false;
        }
      }
 else       if (checkneeded) {
        Util.logging.Debug(""String_Node_Str"");
        try {
          if (!Config.database_keepalive) {
            Util.databaseManager.connect();
          }
          Config.hasForumBoard=false;
          if (Util.checkScript(""String_Node_Str"",Config.script_name,player,null,null,null)) {
            AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
            dupe=true;
          }
          if (!Config.database_keepalive) {
            Util.databaseManager.close();
          }
          if (!dupe) {
            AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
          }
          return dupe;
        }
 catch (        SQLException e) {
          Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          Stop(""String_Node_Str"");
        }
      }
    }
  }
  return false;
}","public boolean isRegistered(String when,String player){
  boolean dupe=false;
  boolean checkneeded=true;
  player=Util.checkOtherName(player);
  EBean eBeanClass=EBean.checkPlayer(player,true);
  if (eBeanClass.getRegistered().equalsIgnoreCase(""String_Node_Str"")) {
    if (when.equalsIgnoreCase(""String_Node_Str"")) {
      if (!Config.database_keepalive) {
        Util.databaseManager.connect();
      }
      Config.hasForumBoard=false;
      try {
        if (Util.checkScript(""String_Node_Str"",Config.script_name,player,null,null,null)) {
          AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
          dupe=true;
        }
      }
 catch (      SQLException e) {
        Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
      if (!Config.database_keepalive) {
        Util.databaseManager.close();
      }
      if (!dupe) {
        AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
      }
      return dupe;
    }
 else     if (when.equalsIgnoreCase(""String_Node_Str"")) {
      if (!Config.database_keepalive) {
        Util.databaseManager.connect();
      }
      Config.hasForumBoard=false;
      try {
        if (Util.checkScript(""String_Node_Str"",Config.script_name,player,null,null,null)) {
          AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
          dupe=true;
        }
 else         if (Util.checkOtherName(player) != player) {
          AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
          dupe=true;
        }
      }
 catch (      SQLException e) {
        Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
      if (!Config.database_keepalive) {
        Util.databaseManager.close();
      }
      if (!dupe) {
        AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
      }
      return dupe;
    }
 else {
      if (this.AuthDB_Authed.containsKey(Encryption.md5(player))) {
        String check=AuthDB_Authed.get(Encryption.md5(player));
        if (check.equalsIgnoreCase(""String_Node_Str"")) {
          checkneeded=false;
          return true;
        }
 else         if (check.equalsIgnoreCase(""String_Node_Str"")) {
          return false;
        }
      }
 else       if (checkneeded) {
        Util.logging.Debug(""String_Node_Str"");
        try {
          if (!Config.database_keepalive) {
            Util.databaseManager.connect();
          }
          Config.hasForumBoard=false;
          if (Util.checkScript(""String_Node_Str"",Config.script_name,player,null,null,null)) {
            AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
            dupe=true;
          }
          if (!Config.database_keepalive) {
            Util.databaseManager.close();
          }
          if (!dupe) {
            AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
          }
          return dupe;
        }
 catch (        SQLException e) {
          Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          Stop(""String_Node_Str"");
        }
      }
    }
  }
  return false;
}",0.990624162871685
93979,"public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (!plugin.isAuthorized(event.getPlayer())) {
    if (!checkGuest(event.getPlayer(),Config.guests_movement)) {
      if (this.plugin.AuthDB_JoinTime.containsKey(event.getPlayer().getName())) {
        if (Config.protection_freeze) {
          long jointime=this.plugin.AuthDB_JoinTime.get(event.getPlayer().getName());
          Location temp=event.getFrom();
          temp.setY(temp.getY() - 1);
          if (jointime + Config.protection_freeze_delay < Util.timeStamp() && temp.getBlock().getTypeId() != 0) {
            this.plugin.AuthDB_JoinTime.remove(event.getPlayer().getName());
          }
        }
      }
 else {
        event.getPlayer().teleport(event.getFrom());
      }
    }
  }
}","public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (!plugin.isAuthorized(event.getPlayer())) {
    Location test=new Location(event.getPlayer().getWorld(),event.getFrom().getX(),event.getFrom().getY() - 1,event.getFrom().getZ());
    if (test.getBlock().getTypeId() != 0 && !checkGuest(event.getPlayer(),Config.guests_movement)) {
      if (this.plugin.AuthDB_JoinTime.containsKey(event.getPlayer().getName())) {
        if (Config.protection_freeze) {
          long jointime=this.plugin.AuthDB_JoinTime.get(event.getPlayer().getName());
          if (jointime + Config.protection_freeze_delay < Util.timeStamp()) {
            this.plugin.AuthDB_JoinTime.remove(event.getPlayer().getName());
          }
        }
      }
 else {
        event.getPlayer().teleport(event.getFrom());
      }
    }
  }
}",0.8216019417475728
93980,"public static boolean Logout(Player player){
  if (AuthDB.isAuthorized(player)) {
    if (AuthDB.AuthDB_AuthTime.containsKey(player.getName())) {
      AuthDB.AuthDB_AuthTime.remove(player.getName());
    }
    AuthDB.authorizedNames.remove(player.getName());
    EBean eBeanClass=EBean.checkPlayer(player,true);
    eBeanClass.setAuthorized(""String_Node_Str"");
    if (AuthDB.AuthDB_Authed.containsKey(Encryption.md5(player.getName()))) {
      AuthDB.AuthDB_Authed.remove(Encryption.md5(player.getName()));
    }
    if (AuthDB.AuthDB_Sessions.containsKey(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)))) {
      AuthDB.AuthDB_Sessions.remove(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)));
    }
    if (AuthDB.AuthDB_SpamMessage.containsKey(player.getName())) {
      AuthDB.server.getScheduler().cancelTask(AuthDB.AuthDB_SpamMessage.get(player.getName()));
      AuthDB.AuthDB_SpamMessage.remove(player.getName());
      AuthDB.AuthDB_SpamMessageTime.remove(player.getName());
    }
    if (AuthDB.AuthDB_Timeouts.containsKey(player.getName())) {
      int TaskID=AuthDB.AuthDB_Timeouts.get(player.getName());
      Util.logging.Debug(player.getName() + ""String_Node_Str"" + TaskID);
      eBeanClass.setTimeoutid(0);
      if (AuthDB.AuthDB_Timeouts.remove(player.getName()) != null) {
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        AuthDB.server.getScheduler().cancelTask(TaskID);
      }
 else {
        Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      }
    }
 else {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
    }
    AuthDB.database.save(eBeanClass);
    return true;
  }
  return false;
}","public static boolean Logout(Player player){
  if (AuthDB.isAuthorized(player)) {
    if (AuthDB.AuthDB_AuthTime.containsKey(player.getName())) {
      AuthDB.AuthDB_AuthTime.remove(player.getName());
    }
    AuthDB.authorizedNames.remove(player.getName());
    EBean eBeanClass=EBean.checkPlayer(player,true);
    eBeanClass.setAuthorized(""String_Node_Str"");
    if (AuthDB.AuthDB_Authed.containsKey(Encryption.md5(player.getName()))) {
      AuthDB.AuthDB_Authed.remove(Encryption.md5(player.getName()));
    }
    if (AuthDB.AuthDB_Sessions.containsKey(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)))) {
      AuthDB.AuthDB_Sessions.remove(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)));
    }
    if (AuthDB.AuthDB_SpamMessage.containsKey(player.getName())) {
      AuthDB.server.getScheduler().cancelTask(AuthDB.AuthDB_SpamMessage.get(player.getName()));
      AuthDB.AuthDB_SpamMessage.remove(player.getName());
      AuthDB.AuthDB_SpamMessageTime.remove(player.getName());
    }
    if (AuthDB.AuthDB_Timeouts.containsKey(player.getName())) {
      int TaskID=AuthDB.AuthDB_Timeouts.get(player.getName());
      Util.logging.Debug(player.getName() + ""String_Node_Str"" + TaskID);
      eBeanClass.setTimeoutid(0);
      if (AuthDB.AuthDB_Timeouts.remove(player.getName()) != null) {
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        AuthDB.server.getScheduler().cancelTask(TaskID);
      }
 else {
        Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      }
    }
 else {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
    }
    AuthDB.database.save(eBeanClass);
    try {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        Util.craftFirePlayer.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        Util.craftFirePlayer.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
    }
 catch (    IOException e) {
      Util.logging.Severe(""String_Node_Str"" + AuthDB.pluginName + ""String_Node_Str"");
      player.kickPlayer(""String_Node_Str"");
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
    player.getInventory().clear();
    return true;
  }
  return false;
}",0.7764547292743204
93981,"public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (!plugin.isAuthorized(event.getPlayer())) {
    if (!checkGuest(event.getPlayer(),Config.guests_movement)) {
      if (this.plugin.AuthDB_JoinTime.containsKey(event.getPlayer().getName())) {
        if (Config.protection_freeze) {
          long jointime=this.plugin.AuthDB_JoinTime.get(event.getPlayer().getName());
          if (jointime + Config.protection_freeze_delay < Util.timeStamp()) {
            this.plugin.AuthDB_JoinTime.remove(event.getPlayer().getName());
          }
        }
      }
 else {
        event.getPlayer().teleport(event.getFrom());
      }
    }
  }
}","public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (!plugin.isAuthorized(event.getPlayer())) {
    if (!checkGuest(event.getPlayer(),Config.guests_movement)) {
      if (this.plugin.AuthDB_JoinTime.containsKey(event.getPlayer().getName())) {
        if (Config.protection_freeze) {
          long jointime=this.plugin.AuthDB_JoinTime.get(event.getPlayer().getName());
          Location temp=event.getFrom();
          temp.setY(temp.getY() - 1);
          if (jointime + Config.protection_freeze_delay < Util.timeStamp() && temp.getBlock().getTypeId() != 0) {
            this.plugin.AuthDB_JoinTime.remove(event.getPlayer().getName());
          }
        }
      }
 else {
        event.getPlayer().teleport(event.getFrom());
      }
    }
  }
}",0.9221394719025052
93982,"public void onEntityDamage(EntityDamageEvent event){
  if (event.getEntity() instanceof Player) {
    Player p=(Player)event.getEntity();
    if (this.plugin.AuthDB_AuthTime.containsKey(p.getName())) {
      long timestamp=System.currentTimeMillis() / 1000;
      long difference=timestamp - this.plugin.AuthDB_AuthTime.get(p.getName());
      if (difference < 5) {
        Util.logging.Debug(""String_Node_Str"" + difference + ""String_Node_Str"");
        event.setCancelled(true);
      }
    }
    if (event instanceof EntityDamageByEntityEvent) {
      EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
      if ((e.getDamager() instanceof Animals) || (e.getDamager() instanceof Monster)) {
        if (event.getEntity() instanceof Player && !checkGuest(p,Config.guests_health)) {
          event.setCancelled(true);
        }
      }
 else       if (e.getDamager() instanceof Player && e.getEntity() instanceof Player) {
        Player t=(Player)e.getDamager();
        if (!checkGuest(t,Config.guests_pvp) && !checkGuest(p,Config.guests_health)) {
          event.setCancelled(true);
        }
      }
 else {
        if (!checkGuest(p,Config.guests_health)) {
          event.setCancelled(true);
        }
 else         if (this.plugin.isRegistered(""String_Node_Str"",p.getName()) == true && plugin.isAuthorized(p) == false) {
          event.setCancelled(true);
        }
      }
    }
 else {
      if (this.plugin.isRegistered(""String_Node_Str"",p.getName()) == true && plugin.isAuthorized(p) == false) {
        event.setCancelled(true);
        return;
      }
    }
  }
 else   if ((event.getEntity() instanceof Animals) || (event.getEntity() instanceof Monster)) {
    if (!(event instanceof EntityDamageByEntityEvent)) {
      return;
    }
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    if ((e.getDamager() instanceof Player)) {
      Player t=(Player)e.getDamager();
      if (!checkGuest(t,Config.guests_mobdamage)) {
        event.setCancelled(true);
      }
    }
  }
}","public void onEntityDamage(EntityDamageEvent event){
  if (event.getEntity() instanceof Player) {
    Player p=(Player)event.getEntity();
    if (this.plugin.AuthDB_AuthTime.containsKey(p.getName())) {
      long timestamp=System.currentTimeMillis() / 1000;
      long difference=timestamp - this.plugin.AuthDB_AuthTime.get(p.getName());
      if (difference < 5) {
        Util.logging.Debug(""String_Node_Str"" + difference + ""String_Node_Str"");
        event.setCancelled(true);
      }
    }
    if (event instanceof EntityDamageByEntityEvent) {
      EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
      if ((e.getDamager() instanceof Animals) || (e.getDamager() instanceof Monster)) {
        if (event.getEntity() instanceof Player && !checkGuest(p,Config.guests_health)) {
          event.setCancelled(true);
        }
      }
 else       if (e.getDamager() instanceof Player && e.getEntity() instanceof Player) {
        Player t=(Player)e.getDamager();
        Util.logging.Debug(""String_Node_Str"");
        if ((this.plugin.isRegistered(""String_Node_Str"",p.getName()) == true && plugin.isAuthorized(p) == false) || (!checkGuest(t,Config.guests_pvp) && !checkGuest(p,Config.guests_health))) {
          Util.logging.Debug(""String_Node_Str"");
          event.setCancelled(true);
        }
      }
 else {
        if (!checkGuest(p,Config.guests_health)) {
          event.setCancelled(true);
        }
 else         if (this.plugin.isRegistered(""String_Node_Str"",p.getName()) == true && plugin.isAuthorized(p) == false) {
          event.setCancelled(true);
        }
      }
    }
 else {
      if (this.plugin.isRegistered(""String_Node_Str"",p.getName()) == true && plugin.isAuthorized(p) == false) {
        event.setCancelled(true);
        return;
      }
    }
  }
 else   if ((event.getEntity() instanceof Animals) || (event.getEntity() instanceof Monster)) {
    if (!(event instanceof EntityDamageByEntityEvent)) {
      return;
    }
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    if ((e.getDamager() instanceof Player)) {
      Player t=(Player)e.getDamager();
      if (!checkGuest(t,Config.guests_mobdamage)) {
        event.setCancelled(true);
      }
    }
  }
}",0.9514150943396228
93983,"public static void sendMessage(final Message type,final Player player,PlayerLoginEvent event){
  long start=Util.timeMS();
  ZCraftIRC.sendMessage(type,player);
  if (type.equals(Message.database_failure)) {
    AuthDB.server.broadcastMessage(Util.replaceStrings(AuthDB_message_database_failure,null,null));
  }
 else   if (Config.database_ison) {
    if (type.equals(Message.register_welcome)) {
      if (Config.authdb_enabled) {
        if (Config.link_enabled) {
          player.sendMessage(Util.replaceStrings(AuthDB_message_register_welcome + ""String_Node_Str"" + AuthDB_message_link_welcome,player,null));
        }
 else {
          player.sendMessage(Util.replaceStrings(AuthDB_message_register_welcome,player,null));
        }
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_register_offline,player,null));
      }
    }
 else     if (type.equals(Message.reload_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_reload_success,player,null));
    }
 else     if (type.equals(Message.register_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_success,player,null));
    }
 else     if (type.equals(Message.register_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_failure,player,null));
    }
 else     if (type.equals(Message.register_offline)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_offline,player,null));
    }
 else     if (type.equals(Message.register_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_exists,player,null));
    }
 else     if (type.equals(Message.register_disabled)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_disabled,player,null));
    }
 else     if (type.equals(Message.register_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_register_timeout,player,null));
    }
 else     if (type.equals(Message.register_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_usage,player,null));
    }
 else     if (type.equals(Message.unregister_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_success,player,null));
    }
 else     if (type.equals(Message.unregister_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_failure,player,null));
    }
 else     if (type.equals(Message.unregister_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_usage,player,null));
    }
 else     if (type.equals(Message.login_normal)) {
      Util.spamText(player,Message.login_normal.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_prompt)) {
      Util.spamText(player,Message.login_prompt.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_success)) {
      AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_success,player,null));
    }
 else     if (type.equals(Message.login_failure)) {
      String temp=AuthDB.AuthDB_PasswordTries.get(player.getName());
      int tries=Integer.parseInt(temp) + 1;
      if (tries > Integer.parseInt(Config.login_tries) && Config.login_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_login_failure,player,null));
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      }
 else {
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"" + tries);
        player.sendMessage(Util.replaceStrings(AuthDB_message_login_failure,player,null));
      }
    }
 else     if (type.equals(Message.login_offline)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_offline,player,null));
    }
 else     if (type.equals(Message.login_authorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_authorized,player,null));
    }
 else     if (type.equals(Message.login_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_notregistered,player,null));
    }
 else     if (type.equals(Message.login_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_login_timeout,player,null));
    }
 else     if (type.equals(Message.login_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_admin,player,null));
    }
 else     if (type.equals(Message.login_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_usage,player,null));
    }
 else     if (type.equals(Message.logout_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_success,player,null));
    }
 else     if (type.equals(Message.logout_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_failure,player,null));
    }
 else     if (type.equals(Message.logout_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_admin,player,null));
    }
 else     if (type.equals(Message.logout_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_usage,player,null));
    }
 else     if (type.equals(Message.link_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_success,player,null));
    }
 else     if (type.equals(Message.link_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_failure,player,null));
    }
 else     if (type.equals(Message.link_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_exists,player,null));
    }
 else     if (type.equals(Message.link_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_usage,player,null));
    }
 else     if (type.equals(Message.link_duplicate)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_duplicate,player,null));
    }
 else     if (type.equals(Message.link_registred)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_registred,player,null));
    }
 else     if (type.equals(Message.link_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_invaliduser,player,null));
    }
 else     if (type.equals(Message.link_renamed)) {
      player.getServer().broadcastMessage(Util.replaceStrings(AuthDB_message_link_renamed,player,null));
    }
 else     if (type.equals(Message.unlink_success)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_success,player,null));
    }
 else     if (type.equals(Message.unlink_failure)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_failure,player,null));
    }
 else     if (type.equals(Message.unlink_nonexist)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_nonexist,player,null));
    }
 else     if (type.equals(Message.unlink_usage)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_usage,player,null));
    }
 else     if (type.equals(Message.unlink_invalidpass)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invalidpass,player,null));
    }
 else     if (type.equals(Message.unlink_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invaliduser,player,null));
    }
 else     if (type.equals(Message.unlink_renamed)) {
      player.getServer().broadcastMessage(Util.replaceStrings(AuthDB_message_unlink_renamed,player,null));
    }
 else     if (type.equals(Message.email_required)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_required,player,null));
    }
 else     if (type.equals(Message.email_invalid)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_invalid,player,null));
    }
 else     if (type.equals(Message.email_badcharacters)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_badcharacters,player,null));
    }
 else     if (type.equals(Message.filter_renamed)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_renamed,player,null));
    }
 else     if (type.equals(Message.filter_username)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_filter_username,player,null));
    }
 else     if (type.equals(Message.filter_password)) {
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
    }
 else     if (type.equals(Message.filter_whitelist)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_whitelist,player,null));
    }
 else     if (type.equals(Message.username_minimum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_minimum,player,null));
    }
 else     if (type.equals(Message.username_maximum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_maximum,player,null));
    }
 else     if (type.equals(Message.password_minimum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_minimum,player,null));
    }
 else     if (type.equals(Message.password_maximum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_maximum,player,null));
    }
 else     if (type.equals(Message.password_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_success,player,null));
    }
 else     if (type.equals(Message.password_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_failure,player,null));
    }
 else     if (type.equals(Message.password_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_notregistered,player,null));
    }
 else     if (type.equals(Message.password_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_usage,player,null));
    }
 else     if (type.equals(Message.session_valid)) {
      if (Config.hasBukkitContrib || Config.hasSpout) {
        player.sendMessage(""String_Node_Str"");
      }
      player.sendMessage(Util.replaceStrings(AuthDB_message_session_valid,player,null));
    }
 else     if (type.equals(Message.session_protected)) {
      event.disallow(Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_session_protected,player,""String_Node_Str""));
    }
 else     if (type.equals(Message.protection_denied)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_denied,player,null));
    }
 else     if (type.equals(Message.protection_notauthorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_notauthorized,player,null));
    }
  }
 else {
    Messages.sendMessage(Message.database_failure,null,null);
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}","public static void sendMessage(final Message type,final Player player,PlayerLoginEvent event){
  long start=Util.timeMS();
  ZCraftIRC.sendMessage(type,player);
  if (type.equals(Message.database_failure)) {
    AuthDB.server.broadcastMessage(Util.replaceStrings(AuthDB_message_database_failure,null,null));
  }
 else   if (Config.database_ison) {
    if (type.equals(Message.register_welcome)) {
      if (Config.authdb_enabled) {
        if (Config.link_enabled) {
          player.sendMessage(Util.replaceStrings(AuthDB_message_register_welcome + ""String_Node_Str"" + AuthDB_message_link_welcome,player,null));
        }
 else {
          player.sendMessage(Util.replaceStrings(AuthDB_message_register_welcome,player,null));
        }
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_register_offline,player,null));
      }
    }
 else     if (type.equals(Message.reload_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_reload_success,player,null));
    }
 else     if (type.equals(Message.register_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_success,player,null));
    }
 else     if (type.equals(Message.register_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_failure,player,null));
    }
 else     if (type.equals(Message.register_offline)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_offline,player,null));
    }
 else     if (type.equals(Message.register_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_exists,player,null));
    }
 else     if (type.equals(Message.register_disabled)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_disabled,player,null));
    }
 else     if (type.equals(Message.register_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_register_timeout,player,null));
    }
 else     if (type.equals(Message.register_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_register_usage,player,null));
    }
 else     if (type.equals(Message.unregister_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_success,player,null));
    }
 else     if (type.equals(Message.unregister_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_failure,player,null));
    }
 else     if (type.equals(Message.unregister_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unregister_usage,player,null));
    }
 else     if (type.equals(Message.login_normal)) {
      Util.spamText(player,Message.login_normal.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_prompt)) {
      Util.spamText(player,Message.login_prompt.text,Config.login_delay,Config.login_show);
    }
 else     if (type.equals(Message.login_success)) {
      AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_success,player,null));
    }
 else     if (type.equals(Message.login_failure)) {
      String temp=""String_Node_Str"";
      if (AuthDB.AuthDB_PasswordTries.containsKey(player.getName())) {
        temp=AuthDB.AuthDB_PasswordTries.get(player.getName());
      }
      int tries=Integer.parseInt(temp) + 1;
      if (tries > Integer.parseInt(Config.login_tries) && Config.login_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_login_failure,player,null));
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
      }
 else {
        AuthDB.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"" + tries);
        player.sendMessage(Util.replaceStrings(AuthDB_message_login_failure,player,null));
      }
    }
 else     if (type.equals(Message.login_offline)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_offline,player,null));
    }
 else     if (type.equals(Message.login_authorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_authorized,player,null));
    }
 else     if (type.equals(Message.login_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_notregistered,player,null));
    }
 else     if (type.equals(Message.login_timeout)) {
      player.kickPlayer(Util.replaceStrings(AuthDB_message_login_timeout,player,null));
    }
 else     if (type.equals(Message.login_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_admin,player,null));
    }
 else     if (type.equals(Message.login_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_login_usage,player,null));
    }
 else     if (type.equals(Message.logout_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_success,player,null));
    }
 else     if (type.equals(Message.logout_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_failure,player,null));
    }
 else     if (type.equals(Message.logout_admin)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_admin,player,null));
    }
 else     if (type.equals(Message.logout_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_logout_usage,player,null));
    }
 else     if (type.equals(Message.link_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_success,player,null));
    }
 else     if (type.equals(Message.link_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_failure,player,null));
    }
 else     if (type.equals(Message.link_exists)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_exists,player,null));
    }
 else     if (type.equals(Message.link_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_usage,player,null));
    }
 else     if (type.equals(Message.link_duplicate)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_duplicate,player,null));
    }
 else     if (type.equals(Message.link_registred)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_registred,player,null));
    }
 else     if (type.equals(Message.link_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_link_invaliduser,player,null));
    }
 else     if (type.equals(Message.link_renamed)) {
      player.getServer().broadcastMessage(Util.replaceStrings(AuthDB_message_link_renamed,player,null));
    }
 else     if (type.equals(Message.unlink_success)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_success,player,null));
    }
 else     if (type.equals(Message.unlink_failure)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_failure,player,null));
    }
 else     if (type.equals(Message.unlink_nonexist)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_nonexist,player,null));
    }
 else     if (type.equals(Message.unlink_usage)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_usage,player,null));
    }
 else     if (type.equals(Message.unlink_invalidpass)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invalidpass,player,null));
    }
 else     if (type.equals(Message.unlink_invaliduser)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_unlink_invaliduser,player,null));
    }
 else     if (type.equals(Message.unlink_renamed)) {
      player.getServer().broadcastMessage(Util.replaceStrings(AuthDB_message_unlink_renamed,player,null));
    }
 else     if (type.equals(Message.email_required)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_required,player,null));
    }
 else     if (type.equals(Message.email_invalid)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_invalid,player,null));
    }
 else     if (type.equals(Message.email_badcharacters)) {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      player.sendMessage(Util.replaceStrings(AuthDB_message_email_badcharacters,player,null));
    }
 else     if (type.equals(Message.filter_renamed)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_renamed,player,null));
    }
 else     if (type.equals(Message.filter_username)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_filter_username,player,null));
    }
 else     if (type.equals(Message.filter_password)) {
      if (Config.filter_action.equalsIgnoreCase(""String_Node_Str"")) {
        player.kickPlayer(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
 else {
        player.sendMessage(Util.replaceStrings(AuthDB_message_filter_password,player,null));
      }
    }
 else     if (type.equals(Message.filter_whitelist)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_filter_whitelist,player,null));
    }
 else     if (type.equals(Message.username_minimum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_minimum,player,null));
    }
 else     if (type.equals(Message.username_maximum)) {
      event.disallow(PlayerLoginEvent.Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_username_maximum,player,null));
    }
 else     if (type.equals(Message.password_minimum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_minimum,player,null));
    }
 else     if (type.equals(Message.password_maximum)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_maximum,player,null));
    }
 else     if (type.equals(Message.password_success)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_success,player,null));
    }
 else     if (type.equals(Message.password_failure)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_failure,player,null));
    }
 else     if (type.equals(Message.password_notregistered)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_notregistered,player,null));
    }
 else     if (type.equals(Message.password_usage)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_password_usage,player,null));
    }
 else     if (type.equals(Message.session_valid)) {
      if (Config.hasBukkitContrib || Config.hasSpout) {
        player.sendMessage(""String_Node_Str"");
      }
      player.sendMessage(Util.replaceStrings(AuthDB_message_session_valid,player,null));
    }
 else     if (type.equals(Message.session_protected)) {
      event.disallow(Result.KICK_OTHER,Util.replaceStrings(AuthDB_message_session_protected,player,""String_Node_Str""));
    }
 else     if (type.equals(Message.protection_denied)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_denied,player,null));
    }
 else     if (type.equals(Message.protection_notauthorized)) {
      player.sendMessage(Util.replaceStrings(AuthDB_message_protection_notauthorized,player,null));
    }
  }
 else {
    Messages.sendMessage(Message.database_failure,null,null);
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}",0.9949575485928543
93984,"public static boolean Logout(Player player){
  if (AuthDB.isAuthorized(player)) {
    if (AuthDB.AuthDB_AuthTime.containsKey(player.getName())) {
      AuthDB.AuthDB_AuthTime.remove(player.getName());
    }
    AuthDB.authorizedNames.remove(player.getName());
    EBean eBeanClass=EBean.checkPlayer(player,true);
    eBeanClass.setAuthorized(""String_Node_Str"");
    if (AuthDB.AuthDB_Authed.containsKey(Encryption.md5(player.getName()))) {
      AuthDB.AuthDB_Authed.remove(Encryption.md5(player.getName()));
    }
    if (AuthDB.AuthDB_Sessions.containsKey(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)))) {
      AuthDB.AuthDB_Sessions.remove(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)));
    }
    if (AuthDB.AuthDB_SpamMessage.containsKey(player.getName())) {
      AuthDB.server.getScheduler().cancelTask(AuthDB.AuthDB_SpamMessage.get(player.getName()));
      AuthDB.AuthDB_SpamMessage.remove(player.getName());
      AuthDB.AuthDB_SpamMessageTime.remove(player.getName());
    }
    if (AuthDB.AuthDB_Timeouts.containsKey(player.getName())) {
      int TaskID=AuthDB.AuthDB_Timeouts.get(player.getName());
      Util.logging.Debug(player.getName() + ""String_Node_Str"" + TaskID);
      eBeanClass.setTimeoutid(0);
      if (AuthDB.AuthDB_Timeouts.remove(player.getName()) != null) {
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        AuthDB.server.getScheduler().cancelTask(TaskID);
      }
 else {
        Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      }
    }
 else {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
    }
    AuthDB.database.save(eBeanClass);
    try {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        Util.craftFirePlayer.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        Util.craftFirePlayer.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
    }
 catch (    IOException e) {
      Util.logging.Severe(""String_Node_Str"" + AuthDB.pluginName + ""String_Node_Str"");
      player.kickPlayer(""String_Node_Str"");
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
    player.getInventory().clear();
    return true;
  }
  return false;
}","public static boolean Logout(Player player){
  if (AuthDB.isAuthorized(player)) {
    if (AuthDB.AuthDB_AuthTime.containsKey(player.getName())) {
      AuthDB.AuthDB_AuthTime.remove(player.getName());
    }
    AuthDB.authorizedNames.remove(player.getName());
    EBean eBeanClass=EBean.checkPlayer(player,true);
    eBeanClass.setAuthorized(""String_Node_Str"");
    if (AuthDB.AuthDB_Authed.containsKey(Encryption.md5(player.getName()))) {
      AuthDB.AuthDB_Authed.remove(Encryption.md5(player.getName()));
    }
    if (AuthDB.AuthDB_Sessions.containsKey(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)))) {
      AuthDB.AuthDB_Sessions.remove(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)));
    }
    if (AuthDB.AuthDB_SpamMessage.containsKey(player.getName())) {
      AuthDB.server.getScheduler().cancelTask(AuthDB.AuthDB_SpamMessage.get(player.getName()));
      AuthDB.AuthDB_SpamMessage.remove(player.getName());
      AuthDB.AuthDB_SpamMessageTime.remove(player.getName());
    }
    if (AuthDB.AuthDB_Timeouts.containsKey(player.getName())) {
      int TaskID=AuthDB.AuthDB_Timeouts.get(player.getName());
      Util.logging.Debug(player.getName() + ""String_Node_Str"" + TaskID);
      eBeanClass.setTimeoutid(0);
      if (AuthDB.AuthDB_Timeouts.remove(player.getName()) != null) {
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        AuthDB.server.getScheduler().cancelTask(TaskID);
      }
 else {
        Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      }
    }
 else {
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
    }
    AuthDB.database.save(eBeanClass);
    try {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        Util.craftFirePlayer.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        Util.craftFirePlayer.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
    }
 catch (    IOException e) {
      Util.logging.Severe(""String_Node_Str"" + AuthDB.pluginName + ""String_Node_Str"");
      player.kickPlayer(""String_Node_Str"");
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
    player.getInventory().clear();
    Util.logging.Debug(""String_Node_Str"" + player.getName());
    return true;
  }
  return false;
}",0.9846210179421456
93985,"void LoadYml(String type,CodeSource src){
  String languageMessages=""String_Node_Str"";
  String languageCommands=""String_Node_Str"";
  File LanguagesAll=new File(getDataFolder() + ""String_Node_Str"");
  if (!LanguagesAll.exists()) {
    if (LanguagesAll.mkdir()) {
      Util.logging.Debug(""String_Node_Str"" + LanguagesAll);
    }
  }
  boolean setCommands=false;
  boolean setMessages=false;
  File[] directories;
  FileFilter fileFilter=new FileFilter(){
    public boolean accept(    File file){
      return file.isDirectory();
    }
  }
;
  if (src != null) {
    try {
      URL jar=src.getLocation();
      ZipInputStream zip=new ZipInputStream(jar.openStream());
      ZipEntry ze=null;
      while ((ze=zip.getNextEntry()) != null) {
        String directory=ze.getName();
        if (directory.startsWith(""String_Node_Str"") && directory.endsWith(""String_Node_Str"") == false) {
          directory=directory.replace(""String_Node_Str"",""String_Node_Str"");
          directory=directory.replace(""String_Node_Str"",""String_Node_Str"");
          if (directory.equals(""String_Node_Str"") == false) {
            Util.logging.Debug(""String_Node_Str"" + directory);
            File f=new File(getDataFolder() + ""String_Node_Str"" + directory+ ""String_Node_Str""+ type+ ""String_Node_Str"");
            if (!f.exists()) {
              Util.logging.Info(type + ""String_Node_Str"" + ""String_Node_Str""+ pluginName+ ""String_Node_Str""+ directory+ ""String_Node_Str""+ type+ ""String_Node_Str"");
              DefaultFile(type + ""String_Node_Str"",""String_Node_Str"" + directory + ""String_Node_Str"");
            }
            if (type.equals(""String_Node_Str"") && (Config.language_commands).equalsIgnoreCase(directory)) {
              setCommands=true;
              languageCommands=directory;
            }
 else             if (type.equals(""String_Node_Str"") && (Config.language_messages).equalsIgnoreCase(directory)) {
              setMessages=true;
              languageMessages=directory;
            }
          }
        }
      }
      zip.close();
    }
 catch (    IOException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
  directories=LanguagesAll.listFiles(fileFilter);
  if (directories.length > 0) {
    Util.logging.Debug(""String_Node_Str"" + directories.length + ""String_Node_Str""+ type);
  }
 else {
    Util.logging.error(""String_Node_Str"" + type);
  }
  if (!setCommands) {
    for (int z=0; z < directories.length; z++) {
      if (Config.language_commands.equalsIgnoreCase(directories[z].getName())) {
        setCommands=true;
        languageCommands=directories[z].getName();
      }
    }
  }
 else   if (!setMessages) {
    for (int z=0; z < directories.length; z++) {
      if (Config.language_messages.equalsIgnoreCase(directories[z].getName())) {
        setMessages=true;
        languageMessages=directories[z].getName();
      }
    }
  }
  if (!setCommands) {
    Util.logging.Info(""String_Node_Str"" + Config.language_commands + ""String_Node_Str""+ languageCommands);
  }
 else   if (!setMessages) {
    Util.logging.Info(""String_Node_Str"" + Config.language_messages + ""String_Node_Str""+ languageMessages);
  }
 else {
    Util.logging.Debug(type + ""String_Node_Str"");
  }
  new Config(type,getDataFolder() + ""String_Node_Str"" + languageCommands+ ""String_Node_Str"",type + ""String_Node_Str"");
  new Config(type,getDataFolder() + ""String_Node_Str"" + languageMessages+ ""String_Node_Str"",type + ""String_Node_Str"");
}","void LoadYml(String type,CodeSource src){
  String language=""String_Node_Str"";
  File LanguagesAll=new File(getDataFolder() + ""String_Node_Str"");
  if (!LanguagesAll.exists()) {
    if (LanguagesAll.mkdir()) {
      Util.logging.Debug(""String_Node_Str"" + LanguagesAll);
    }
  }
  boolean set=false;
  File[] directories;
  FileFilter fileFilter=new FileFilter(){
    public boolean accept(    File file){
      return file.isDirectory();
    }
  }
;
  if (src != null) {
    try {
      URL jar=src.getLocation();
      ZipInputStream zip=new ZipInputStream(jar.openStream());
      ZipEntry ze=null;
      while ((ze=zip.getNextEntry()) != null) {
        String directory=ze.getName();
        if (directory.startsWith(""String_Node_Str"") && directory.endsWith(""String_Node_Str"") == false) {
          directory=directory.replace(""String_Node_Str"",""String_Node_Str"");
          directory=directory.replace(""String_Node_Str"",""String_Node_Str"");
          if (directory.equals(""String_Node_Str"") == false) {
            Util.logging.Debug(""String_Node_Str"" + directory);
            File f=new File(getDataFolder() + ""String_Node_Str"" + directory+ ""String_Node_Str""+ type+ ""String_Node_Str"");
            if (!f.exists()) {
              Util.logging.Info(type + ""String_Node_Str"" + ""String_Node_Str""+ pluginName+ ""String_Node_Str""+ directory+ ""String_Node_Str""+ type+ ""String_Node_Str"");
              DefaultFile(type + ""String_Node_Str"",""String_Node_Str"" + directory + ""String_Node_Str"");
            }
            if (type.equals(""String_Node_Str"") && (Config.language_commands).equalsIgnoreCase(directory)) {
              set=true;
              language=directory;
            }
 else             if (type.equals(""String_Node_Str"") && (Config.language_messages).equalsIgnoreCase(directory)) {
              set=true;
              language=directory;
            }
          }
        }
      }
      zip.close();
    }
 catch (    IOException e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
  directories=LanguagesAll.listFiles(fileFilter);
  if (directories.length > 0) {
    Util.logging.Debug(""String_Node_Str"" + directories.length + ""String_Node_Str""+ type);
  }
 else {
    Util.logging.error(""String_Node_Str"" + type);
  }
  if (!set) {
    for (int z=0; z < directories.length; z++) {
      if (type.equalsIgnoreCase(""String_Node_Str"") && Config.language_commands.equalsIgnoreCase(directories[z].getName())) {
        set=true;
        language=directories[z].getName();
      }
 else       if (type.equalsIgnoreCase(""String_Node_Str"") && Config.language_messages.equalsIgnoreCase(directories[z].getName())) {
        set=true;
        language=directories[z].getName();
      }
    }
  }
  if (!set && type.equalsIgnoreCase(""String_Node_Str"")) {
    Util.logging.Info(""String_Node_Str"" + Config.language_commands + ""String_Node_Str""+ language);
  }
 else   if (!set && type.equalsIgnoreCase(""String_Node_Str"")) {
    Util.logging.Info(""String_Node_Str"" + Config.language_messages + ""String_Node_Str""+ language);
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    Util.logging.Info(type + ""String_Node_Str"" + Config.language_commands);
  }
 else   if (type.equalsIgnoreCase(""String_Node_Str"")) {
    Util.logging.Info(type + ""String_Node_Str"" + Config.language_messages);
  }
  new Config(type,getDataFolder() + ""String_Node_Str"" + language+ ""String_Node_Str"",type + ""String_Node_Str"");
}",0.8060473985290112
93986,"public void onPlayerJoin(PlayerJoinEvent event){
  final Player player=event.getPlayer();
  EBean.checkIP(player.getName(),Util.craftFirePlayer.getIP(player));
  player.teleport(Util.landLocation(player.getLocation()));
  if (Config.link_rename && !Util.checkOtherName(player.getName()).equals(player.getName())) {
    String message=event.getJoinMessage();
    message=message.replaceAll(player.getName(),player.getDisplayName());
    event.setJoinMessage(message);
  }
  this.plugin.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
  if (Config.session_enabled && Config.session_length != 0) {
    long timestamp=System.currentTimeMillis() / 1000;
    if (Util.authDBplayer.sessionTime(player) != 0) {
      long storedtime=Util.authDBplayer.sessionTime(player);
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ storedtime);
      long timedifference=timestamp - storedtime;
      Util.logging.Debug(""String_Node_Str"" + timedifference);
      Util.logging.Debug(""String_Node_Str"" + Config.session_length);
      if (timedifference > Config.session_length) {
        sessionallow=false;
      }
 else {
        sessionallow=true;
      }
    }
 else {
      sessionallow=false;
    }
  }
  try {
    if (sessionallow == false) {
      int time=0;
      if (Config.login_timeout > 0 && plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.login_timeout + ""String_Node_Str"");
        time=Config.login_timeout;
      }
 else       if (Config.register_timeout > 0 && !plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.register_timeout + ""String_Node_Str"");
        time=Config.register_timeout;
      }
      if (time > 0) {
        Schedule=plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            checkTimeout(player);
          }
        }
,time);
        EBean eBeanClass=EBean.checkPlayer(player,true);
        Util.logging.Debug(""String_Node_Str"" + Schedule);
        eBeanClass.setTimeoutid(Schedule);
        AuthDB.database.save(eBeanClass);
        if (AuthDB.AuthDB_Timeouts.put(player.getName(),Schedule) != null) {
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
        }
      }
    }
    if (Config.custom_enabled && (Config.custom_encryption.equals(""String_Node_Str"") || Config.custom_encryption == null)) {
      player.sendMessage(""String_Node_Str"");
    }
    if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
      player.setHealth(20);
      player.teleport(player.getWorld().getSpawnLocation());
    }
    EBean eBeanClass=EBean.checkPlayer(player,true);
    if ((eBeanClass.getReloadtime() + 30) >= Util.timeStamp()) {
      sessionallow=true;
    }
    if (Config.onlineMode && this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      sessionallow=true;
    }
    if (sessionallow) {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(event.getPlayer());
      Messages.sendMessage(Message.session_valid,player,null);
    }
 else     if (this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
        @Override public void run(){
          if (!plugin.isAuthorized(player)) {
            if (player.getInventory() != null) {
              player.getInventory().clear();
            }
            Util.craftFirePlayer.clearArmorinventory(player);
          }
        }
      }
,20);
      if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
        ZSpout spout=new ZSpout();
        if (!spout.popGUI(player)) {
          Messages.sendMessage(Message.login_prompt,player,null);
        }
      }
 else {
        Messages.sendMessage(Message.login_normal,player,null);
      }
    }
 else     if (Config.register_force) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      Util.craftFirePlayer.clearArmorinventory(player);
      Messages.sendMessage(Message.welcome_guest,player,null);
    }
 else     if (!Config.register_force) {
      Messages.sendMessage(Message.welcome_guest,player,null);
    }
 else {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(player);
    }
  }
 catch (  IOException e) {
    Util.logging.Severe(""String_Node_Str"" + AuthDB.pluginName + ""String_Node_Str"");
    player.kickPlayer(""String_Node_Str"");
    Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    player.sendMessage(Color.red + ""String_Node_Str"");
  }
}","public void onPlayerJoin(PlayerJoinEvent event){
  final Player player=event.getPlayer();
  EBean.checkIP(player.getName(),Util.craftFirePlayer.getIP(player));
  player.teleport(Util.landLocation(player.getLocation()));
  if (Config.link_rename && !Util.checkOtherName(player.getName()).equals(player.getName())) {
    String message=event.getJoinMessage();
    message=message.replaceAll(player.getName(),player.getDisplayName());
    event.setJoinMessage(message);
  }
  this.plugin.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
  if (Config.session_enabled && Config.session_length != 0) {
    long timestamp=System.currentTimeMillis() / 1000;
    if (Util.authDBplayer.sessionTime(player) != 0) {
      long storedtime=Util.authDBplayer.sessionTime(player);
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ storedtime);
      long timedifference=timestamp - storedtime;
      Util.logging.Debug(""String_Node_Str"" + timedifference);
      Util.logging.Debug(""String_Node_Str"" + Config.session_length);
      if (timedifference > Config.session_length) {
        sessionallow=false;
      }
 else {
        sessionallow=true;
      }
    }
 else {
      sessionallow=false;
    }
  }
  try {
    if (sessionallow == false) {
      int time=0;
      if (Config.login_timeout > 0 && plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.login_timeout + ""String_Node_Str"");
        time=Config.login_timeout;
      }
 else       if (Config.register_timeout > 0 && !plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.register_timeout + ""String_Node_Str"");
        time=Config.register_timeout;
      }
      if (time > 0) {
        Schedule=plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            checkTimeout(player);
          }
        }
,time);
        EBean eBeanClass=EBean.checkPlayer(player,true);
        Util.logging.Debug(""String_Node_Str"" + Schedule);
        eBeanClass.setTimeoutid(Schedule);
        AuthDB.database.save(eBeanClass);
        if (AuthDB.AuthDB_Timeouts.put(player.getName(),Schedule) != null) {
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
        }
      }
    }
    if (Config.custom_enabled && (Config.custom_encryption.equals(""String_Node_Str"") || Config.custom_encryption == null)) {
      player.sendMessage(""String_Node_Str"");
    }
    if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
      player.setHealth(20);
      player.teleport(player.getWorld().getSpawnLocation());
    }
    EBean eBeanClass=EBean.checkPlayer(player,true);
    if ((eBeanClass.getReloadtime() + 30) >= Util.timeStamp()) {
      sessionallow=true;
    }
    if (Config.onlineMode && this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      sessionallow=true;
    }
    if (sessionallow) {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(event.getPlayer());
      Messages.sendMessage(Message.session_valid,player,null);
    }
 else     if (this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
        @Override public void run(){
          if (!plugin.isAuthorized(player)) {
            if (player.getInventory() != null) {
              player.getInventory().clear();
            }
            Util.craftFirePlayer.clearArmorinventory(player);
          }
        }
      }
,20);
      if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
        if (Config.hasSpout) {
          ZSpout spout=new ZSpout();
          if (!spout.popGUI(player)) {
            Messages.sendMessage(Message.login_prompt,player,null);
          }
        }
 else {
          Messages.sendMessage(Message.login_prompt,player,null);
        }
      }
 else {
        Messages.sendMessage(Message.login_normal,player,null);
      }
    }
 else     if (Config.register_force) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      Util.craftFirePlayer.clearArmorinventory(player);
      Messages.sendMessage(Message.welcome_guest,player,null);
    }
 else     if (!Config.register_force) {
      Messages.sendMessage(Message.welcome_guest,player,null);
    }
 else {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(player);
    }
  }
 catch (  IOException e) {
    Util.logging.Severe(""String_Node_Str"" + AuthDB.pluginName + ""String_Node_Str"");
    player.kickPlayer(""String_Node_Str"");
    Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    player.sendMessage(Color.red + ""String_Node_Str"");
  }
}",0.9889064976228208
93987,"public void onDisable(){
  for (  Player p : getServer().getOnlinePlayers()) {
    EBean eBeanClass=EBean.checkPlayer(p,true);
    if (eBeanClass.getAuthorized() != null && eBeanClass.getAuthorized().equalsIgnoreCase(""String_Node_Str"")) {
      eBeanClass.setReloadtime(Util.timeStamp());
      AuthDB.database.save(eBeanClass);
    }
    Processes.Logout(p);
  }
  Util.logging.Info(pluginName + ""String_Node_Str"" + pluginVersion+ ""String_Node_Str"");
  Plugin checkCraftIRC=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if ((checkCraftIRC != null) && (checkCraftIRC.isEnabled()) && (Config.CraftIRC_enabled == true)) {
    ZCraftIRC.sendMessage(Message.OnDisable,null);
  }
  authorizedNames.clear();
  AuthDB_AuthTime.clear();
  AuthDB_RemindLogin.clear();
  AuthDB_SpamMessage.clear();
  AuthDB_SpamMessageTime.clear();
  AuthDB_GUI_PasswordFieldIDs.clear();
  AuthDB_GUI_ErrorFieldIDs.clear();
  AuthDB_LinkedNames.clear();
  AuthDB_LinkedNameCheck.clear();
  AuthDB_PasswordTries.clear();
  AuthDB_GUI_TempPasswords.clear();
  AuthDB_Timeouts.clear();
  AuthDB_Sessions.clear();
  AuthDB_Authed.clear();
  Util.databaseManager.close();
}","public void onDisable(){
  for (  Player p : getServer().getOnlinePlayers()) {
    EBean eBeanClass=EBean.checkPlayer(p,true);
    if (eBeanClass.getAuthorized() != null && eBeanClass.getAuthorized().equalsIgnoreCase(""String_Node_Str"")) {
      eBeanClass.setReloadtime(Util.timeStamp());
      AuthDB.database.save(eBeanClass);
    }
    Processes.Logout(p);
  }
  Util.logging.Info(pluginName + ""String_Node_Str"" + pluginVersion+ ""String_Node_Str"");
  Plugin checkCraftIRC=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if ((checkCraftIRC != null) && (checkCraftIRC.isEnabled()) && (Config.CraftIRC_enabled == true)) {
    ZCraftIRC.sendMessage(Message.OnDisable,null);
  }
  authorizedNames.clear();
  AuthDB_AuthTime.clear();
  AuthDB_RemindLogin.clear();
  AuthDB_SpamMessage.clear();
  AuthDB_SpamMessageTime.clear();
  AuthDB_GUI_PasswordFieldIDs.clear();
  AuthDB_GUI_ErrorFieldIDs.clear();
  AuthDB_JoinTime.clear();
  AuthDB_LinkedNames.clear();
  AuthDB_LinkedNameCheck.clear();
  AuthDB_PasswordTries.clear();
  AuthDB_GUI_TempPasswords.clear();
  AuthDB_Timeouts.clear();
  AuthDB_Sessions.clear();
  AuthDB_Authed.clear();
  Util.databaseManager.close();
}",0.9884861407249468
93988,"public boolean register(Player theplayer,String password,String email,String ipAddress) throws IOException, SQLException {
  if (password.length() < Integer.parseInt(Config.password_minimum)) {
    Messages.sendMessage(Message.password_minimum,theplayer,null);
    return false;
  }
 else   if (password.length() > Integer.parseInt(Config.password_maximum)) {
    Messages.sendMessage(Message.password_maximum,theplayer,null);
    return false;
  }
  if (!Config.database_keepalive) {
    Util.databaseManager.connect();
  }
  String player=theplayer.getName();
  if (!Util.checkFilter(""String_Node_Str"",password)) {
    Messages.sendMessage(Message.filter_password,theplayer,null);
  }
 else {
    if (Util.checkScript(""String_Node_Str"",Config.script_name,player,password,email,ipAddress)) {
      Util.logging.Debug(""String_Node_Str"" + theplayer.getName());
    }
 else {
      Util.logging.Debug(""String_Node_Str"" + theplayer.getName());
    }
  }
  if (!Config.database_keepalive) {
    Util.databaseManager.close();
  }
  return true;
}","public boolean register(Player theplayer,String password,String email,String ipAddress) throws IOException, SQLException {
  if (password.length() < Integer.parseInt(Config.password_minimum)) {
    Messages.sendMessage(Message.password_minimum,theplayer,null);
    return false;
  }
 else   if (password.length() > Integer.parseInt(Config.password_maximum)) {
    Messages.sendMessage(Message.password_maximum,theplayer,null);
    return false;
  }
  if (!Config.database_keepalive) {
    Util.databaseManager.connect();
  }
  String player=theplayer.getName();
  if (!Util.checkFilter(""String_Node_Str"",password)) {
    Messages.sendMessage(Message.filter_password,theplayer,null);
  }
 else {
    if (Util.checkScript(""String_Node_Str"",Config.script_name,player,password,email,ipAddress)) {
      Util.logging.Debug(""String_Node_Str"" + theplayer.getName());
    }
 else {
      Util.logging.Debug(""String_Node_Str"" + theplayer.getName());
      if (!Config.database_keepalive) {
        Util.databaseManager.close();
      }
      return false;
    }
  }
  if (!Config.database_keepalive) {
    Util.databaseManager.close();
  }
  return true;
}",0.9341864716636198
93989,"public void onPlayerJoin(PlayerJoinEvent event){
  final Player player=event.getPlayer();
  EBean.checkIP(player.getName(),Util.craftFirePlayer.getIP(player));
  player.teleport(Util.landLocation(player.getLocation()));
  if (Config.link_rename && !Util.checkOtherName(player.getName()).equals(player.getName())) {
    String message=event.getJoinMessage();
    message=message.replaceAll(player.getName(),player.getDisplayName());
    event.setJoinMessage(message);
  }
  this.plugin.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
  if (Config.session_enabled && Config.session_length != 0) {
    long timestamp=System.currentTimeMillis() / 1000;
    if (Util.authDBplayer.sessionTime(player) != 0) {
      long storedtime=Util.authDBplayer.sessionTime(player);
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ storedtime);
      long timedifference=timestamp - storedtime;
      Util.logging.Debug(""String_Node_Str"" + timedifference);
      Util.logging.Debug(""String_Node_Str"" + Config.session_length);
      if (timedifference > Config.session_length) {
        sessionallow=false;
      }
 else {
        sessionallow=true;
      }
    }
 else {
      sessionallow=false;
    }
  }
  try {
    if (sessionallow == false) {
      int time=0;
      if (Config.login_timeout > 0 && plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.login_timeout + ""String_Node_Str"");
        time=Config.login_timeout;
      }
 else       if (Config.register_timeout > 0 && !plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.register_timeout + ""String_Node_Str"");
        time=Config.register_timeout;
      }
      if (time > 0) {
        Schedule=plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            checkTimeout(player);
          }
        }
,time);
        EBean eBeanClass=EBean.checkPlayer(player,true);
        Util.logging.Debug(""String_Node_Str"" + Schedule);
        eBeanClass.setTimeoutid(Schedule);
        AuthDB.database.save(eBeanClass);
        if (AuthDB.AuthDB_Timeouts.put(player.getName(),Schedule) != null) {
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
        }
      }
    }
    if (Config.custom_enabled && (Config.custom_encryption.equals(""String_Node_Str"") || Config.custom_encryption == null)) {
      player.sendMessage(""String_Node_Str"");
    }
    if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
      player.setHealth(20);
      player.teleport(player.getWorld().getSpawnLocation());
    }
    EBean eBeanClass=EBean.checkPlayer(player,true);
    if (Config.session_enabled && ((eBeanClass.getReloadtime() + 30) >= Util.timeStamp())) {
      sessionallow=true;
    }
    if (Config.onlineMode && this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      sessionallow=true;
    }
    if (sessionallow) {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(event.getPlayer());
      Messages.sendMessage(Message.session_valid,player,null);
    }
 else     if (this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
        @Override public void run(){
          if (!plugin.isAuthorized(player)) {
            if (player.getInventory() != null) {
              player.getInventory().clear();
            }
            Util.craftFirePlayer.clearArmorinventory(player);
          }
        }
      }
,20);
      if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
        if (!Config.hasSpout) {
          Messages.sendMessage(Message.login_prompt,player,null);
        }
      }
 else {
        Messages.sendMessage(Message.login_normal,player,null);
      }
    }
 else     if (Config.register_force) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      Util.craftFirePlayer.clearArmorinventory(player);
      Messages.sendMessage(Message.welcome_guest,player,null);
    }
 else     if (!Config.register_force) {
      if (Config.register_enabled) {
        Messages.sendMessage(Message.welcome_guest,player,null);
      }
    }
 else {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(player);
    }
  }
 catch (  IOException e) {
    Util.logging.Severe(""String_Node_Str"" + AuthDB.pluginName + ""String_Node_Str"");
    player.kickPlayer(""String_Node_Str"");
    Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    player.sendMessage(Color.red + ""String_Node_Str"");
  }
}","public void onPlayerJoin(PlayerJoinEvent event){
  final Player player=event.getPlayer();
  EBean.checkIP(player.getName(),Util.craftFirePlayer.getIP(player));
  player.teleport(Util.landLocation(player.getLocation()));
  this.plugin.AuthDB_JoinTime.put(player.getName(),Util.timeStamp());
  if (Config.link_rename && !Util.checkOtherName(player.getName()).equals(player.getName())) {
    String message=event.getJoinMessage();
    message=message.replaceAll(player.getName(),player.getDisplayName());
    event.setJoinMessage(message);
  }
  this.plugin.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
  if (Config.session_enabled && Config.session_length != 0) {
    long timestamp=System.currentTimeMillis() / 1000;
    if (Util.authDBplayer.sessionTime(player) != 0) {
      long storedtime=Util.authDBplayer.sessionTime(player);
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ storedtime);
      long timedifference=timestamp - storedtime;
      Util.logging.Debug(""String_Node_Str"" + timedifference);
      Util.logging.Debug(""String_Node_Str"" + Config.session_length);
      if (timedifference > Config.session_length) {
        sessionallow=false;
      }
 else {
        sessionallow=true;
      }
    }
 else {
      sessionallow=false;
    }
  }
  try {
    if (sessionallow == false) {
      int time=0;
      if (Config.login_timeout > 0 && plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.login_timeout + ""String_Node_Str"");
        time=Config.login_timeout;
      }
 else       if (Config.register_timeout > 0 && !plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.register_timeout + ""String_Node_Str"");
        time=Config.register_timeout;
      }
      if (time > 0) {
        Schedule=plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            checkTimeout(player);
          }
        }
,time);
        EBean eBeanClass=EBean.checkPlayer(player,true);
        Util.logging.Debug(""String_Node_Str"" + Schedule);
        eBeanClass.setTimeoutid(Schedule);
        AuthDB.database.save(eBeanClass);
        if (AuthDB.AuthDB_Timeouts.put(player.getName(),Schedule) != null) {
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
        }
      }
    }
    if (Config.custom_enabled && (Config.custom_encryption.equals(""String_Node_Str"") || Config.custom_encryption == null)) {
      player.sendMessage(""String_Node_Str"");
    }
    if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
      player.setHealth(20);
      player.teleport(player.getWorld().getSpawnLocation());
    }
    EBean eBeanClass=EBean.checkPlayer(player,true);
    if (Config.session_enabled && ((eBeanClass.getReloadtime() + 30) >= Util.timeStamp())) {
      sessionallow=true;
    }
    if (Config.onlineMode && this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      sessionallow=true;
    }
    if (sessionallow) {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(event.getPlayer());
      Messages.sendMessage(Message.session_valid,player,null);
    }
 else     if (this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
        @Override public void run(){
          if (!plugin.isAuthorized(player)) {
            if (player.getInventory() != null) {
              player.getInventory().clear();
            }
            Util.craftFirePlayer.clearArmorinventory(player);
          }
        }
      }
,20);
      if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
        if (!Config.hasSpout) {
          Messages.sendMessage(Message.login_prompt,player,null);
        }
      }
 else {
        Messages.sendMessage(Message.login_normal,player,null);
      }
    }
 else     if (Config.register_force) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      Util.craftFirePlayer.clearArmorinventory(player);
      Messages.sendMessage(Message.welcome_guest,player,null);
    }
 else     if (!Config.register_force) {
      if (Config.register_enabled) {
        Messages.sendMessage(Message.welcome_guest,player,null);
      }
    }
 else {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(player);
    }
  }
 catch (  IOException e) {
    Util.logging.Severe(""String_Node_Str"" + AuthDB.pluginName + ""String_Node_Str"");
    player.kickPlayer(""String_Node_Str"");
    Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    player.sendMessage(Color.red + ""String_Node_Str"");
  }
}",0.994164721573858
93990,"public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (!plugin.isAuthorized(event.getPlayer())) {
    if (!checkGuest(event.getPlayer(),Config.guests_movement)) {
      event.getPlayer().teleport(event.getFrom());
    }
  }
}","public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (!plugin.isAuthorized(event.getPlayer())) {
    if (!checkGuest(event.getPlayer(),Config.guests_movement)) {
      if (this.plugin.AuthDB_JoinTime.containsKey(event.getPlayer().getName())) {
        long jointime=this.plugin.AuthDB_JoinTime.get(event.getPlayer().getName());
        if (jointime + 1 < Util.timeStamp()) {
          this.plugin.AuthDB_JoinTime.remove(event.getPlayer().getName());
        }
      }
 else {
        event.getPlayer().teleport(event.getFrom());
      }
    }
  }
}",0.6087962962962963
93991,"public static Location landLocation(Location location){
  while (location.getBlock().getType().getId() == 0) {
    location.setY(location.getY() - 1);
  }
  location.setY(location.getY() + 1);
  return location;
}","public static Location landLocation(Location location){
  while (location.getBlock().getType().getId() == 0) {
    location.setY(location.getY() - 1);
  }
  location.setY(location.getY() + 2);
  return location;
}",0.9953051643192488
93992,"public void onEnable(){
  plugin=this;
  setupPluginInformation();
  checkOldFiles();
  server=getServer();
  database=getDatabase();
  Plugin[] plugins=server.getPluginManager().getPlugins();
  int counter=0;
  StringBuffer Plugins=new StringBuffer();
  while (plugins.length > counter) {
    Plugins.append(plugins[counter].getDescription().getName() + ""String_Node_Str"" + plugins[counter].getDescription().getVersion());
    if (plugins.length != (counter + 1)) {
      Plugins.append(""String_Node_Str"");
    }
    counter++;
  }
  File f=new File(""String_Node_Str"" + pluginName + ""String_Node_Str"");
  if (!f.exists()) {
    Util.logging.Info(""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  new Config(""String_Node_Str"",""String_Node_Str"" + pluginName + ""String_Node_Str"",""String_Node_Str"");
  f=new File(getDataFolder() + ""String_Node_Str"");
  if (!f.exists()) {
    Util.logging.Info(""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  LoadYml(""String_Node_Str"");
  LoadYml(""String_Node_Str"");
  final Plugin checkCraftIRC=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  CheckPermissions();
  if ((checkCraftIRC != null) && (Config.CraftIRC_enabled == true)) {
    craftircHandle=((CraftIRC)checkCraftIRC);
    Util.logging.Info(""String_Node_Str"" + checkCraftIRC.getDescription().getName());
    this.getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
      @Override public void run(){
        if (checkCraftIRC.isEnabled()) {
          ZCraftIRC.sendMessage(Message.OnEnable,null);
        }
      }
    }
,100);
  }
  final Plugin Backpack=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (Backpack != null) {
    Config.hasBackpack=true;
  }
  final Plugin Check=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (Check != null) {
    Config.hasBukkitContrib=true;
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,this.playerListener,Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_RESPAWN,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.entityListener,Event.Priority.Normal,this);
  Config.onlineMode=getServer().getOnlineMode();
  Util.logging.Debug(""String_Node_Str"" + Config.onlineMode);
  updateLinkedNames();
  setupDatabase();
  MySQL.connect();
  try {
    Util.checkScript(""String_Node_Str"",Config.script_name,null,null,null,null);
  }
 catch (  SQLException e) {
    if (Config.custom_enabled && Config.custom_autocreate) {
      String enter=""String_Node_Str"";
      Util.logging.Info(""String_Node_Str"" + Config.custom_table);
      StringBuilder query=new StringBuilder();
      String NL=System.getProperty(""String_Node_Str"");
      try {
        Scanner scanner=new Scanner(new FileInputStream(getDataFolder() + ""String_Node_Str""));
        while (scanner != null && scanner.hasNextLine()) {
          String line=scanner.nextLine();
          if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
            query.append(""String_Node_Str"" + Config.custom_table + ""String_Node_Str""+ NL);
          }
 else {
            query.append(line + NL);
          }
        }
        scanner.close();
      }
 catch (      FileNotFoundException e2) {
        Util.logging.StackTrace(e2.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
      Util.logging.Debug(enter + query);
      try {
        MySQL.query(""String_Node_Str"" + query);
        Util.logging.Info(""String_Node_Str"" + Config.custom_table);
        PreparedStatement ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str"");
        ResultSet rs=ps.executeQuery();
        if (rs.next()) {
          Util.logging.Info(rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
        }
        ps.close();
      }
 catch (      SQLException e1) {
        Util.logging.Info(""String_Node_Str"" + Config.custom_table);
        Util.logging.StackTrace(e1.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
    }
 else {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
  Util.logging.Info(pluginName + ""String_Node_Str"" + pluginVersion+ ""String_Node_Str"");
  Util.logging.Debug(""String_Node_Str"");
  if (Config.custom_enabled) {
    if (Config.custom_encryption == null) {
      Util.logging.Info(""String_Node_Str"");
    }
  }
  Util.logging.Info(pluginName + ""String_Node_Str"");
  String thescript=""String_Node_Str"", theversion=""String_Node_Str"";
  if (Config.custom_enabled) {
    thescript=""String_Node_Str"";
  }
 else {
    thescript=Config.script_name;
    theversion=Config.script_version;
  }
  String online=""String_Node_Str"" + getServer().getOnlinePlayers().length;
  String max=""String_Node_Str"" + getServer().getMaxPlayers();
  if (Config.usagestats_enabled) {
    try {
      Util.postInfo(getServer().getServerName(),getServer().getVersion(),pluginVersion,System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),thescript,theversion,Plugins.toString(),online,max,server.getPort());
    }
 catch (    IOException e1) {
      Util.logging.Debug(""String_Node_Str"");
    }
  }
  for (  Player p : getServer().getOnlinePlayers()) {
    EBean eBeanClass=EBean.checkPlayer(p);
    if (eBeanClass.getReloadtime() + 30 > Util.timeStamp()) {
      Processes.Login(p);
    }
  }
}","public void onEnable(){
  plugin=this;
  setupPluginInformation();
  server=getServer();
  database=getDatabase();
  Plugin[] plugins=server.getPluginManager().getPlugins();
  int counter=0;
  StringBuffer Plugins=new StringBuffer();
  while (plugins.length > counter) {
    Plugins.append(plugins[counter].getDescription().getName() + ""String_Node_Str"" + plugins[counter].getDescription().getVersion());
    if (plugins.length != (counter + 1)) {
      Plugins.append(""String_Node_Str"");
    }
    counter++;
  }
  File f=new File(""String_Node_Str"" + pluginName + ""String_Node_Str"");
  if (!f.exists()) {
    Util.logging.Info(""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  new Config(""String_Node_Str"",""String_Node_Str"" + pluginName + ""String_Node_Str"",""String_Node_Str"");
  f=new File(getDataFolder() + ""String_Node_Str"");
  if (!f.exists()) {
    Util.logging.Info(""String_Node_Str"");
    DefaultFile(""String_Node_Str"",""String_Node_Str"");
  }
  LoadYml(""String_Node_Str"");
  LoadYml(""String_Node_Str"");
  setupDatabase();
  checkOldFiles();
  final Plugin checkCraftIRC=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  CheckPermissions();
  if ((checkCraftIRC != null) && (Config.CraftIRC_enabled == true)) {
    craftircHandle=((CraftIRC)checkCraftIRC);
    Util.logging.Info(""String_Node_Str"" + checkCraftIRC.getDescription().getName());
    this.getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
      @Override public void run(){
        if (checkCraftIRC.isEnabled()) {
          ZCraftIRC.sendMessage(Message.OnEnable,null);
        }
      }
    }
,100);
  }
  final Plugin Backpack=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (Backpack != null) {
    Config.hasBackpack=true;
  }
  final Plugin Check=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (Check != null) {
    Config.hasBukkitContrib=true;
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,this.playerListener,Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.playerListener,Event.Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_RESPAWN,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,this.playerListener,Event.Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.entityListener,Event.Priority.Normal,this);
  Config.onlineMode=getServer().getOnlineMode();
  Util.logging.Debug(""String_Node_Str"" + Config.onlineMode);
  updateLinkedNames();
  MySQL.connect();
  try {
    Util.checkScript(""String_Node_Str"",Config.script_name,null,null,null,null);
  }
 catch (  SQLException e) {
    if (Config.custom_enabled && Config.custom_autocreate) {
      String enter=""String_Node_Str"";
      Util.logging.Info(""String_Node_Str"" + Config.custom_table);
      StringBuilder query=new StringBuilder();
      String NL=System.getProperty(""String_Node_Str"");
      try {
        Scanner scanner=new Scanner(new FileInputStream(getDataFolder() + ""String_Node_Str""));
        while (scanner != null && scanner.hasNextLine()) {
          String line=scanner.nextLine();
          if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
            query.append(""String_Node_Str"" + Config.custom_table + ""String_Node_Str""+ NL);
          }
 else {
            query.append(line + NL);
          }
        }
        scanner.close();
      }
 catch (      FileNotFoundException e2) {
        Util.logging.StackTrace(e2.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
      Util.logging.Debug(enter + query);
      try {
        MySQL.query(""String_Node_Str"" + query);
        Util.logging.Info(""String_Node_Str"" + Config.custom_table);
        PreparedStatement ps=(PreparedStatement)MySQL.mysql.prepareStatement(""String_Node_Str"" + Config.custom_table + ""String_Node_Str"");
        ResultSet rs=ps.executeQuery();
        if (rs.next()) {
          Util.logging.Info(rs.getInt(""String_Node_Str"") + ""String_Node_Str"");
        }
        ps.close();
      }
 catch (      SQLException e1) {
        Util.logging.Info(""String_Node_Str"" + Config.custom_table);
        Util.logging.StackTrace(e1.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
    }
 else {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
  }
  Util.logging.Info(pluginName + ""String_Node_Str"" + pluginVersion+ ""String_Node_Str"");
  Util.logging.Debug(""String_Node_Str"");
  if (Config.custom_enabled) {
    if (Config.custom_encryption == null) {
      Util.logging.Info(""String_Node_Str"");
    }
  }
  Util.logging.Info(pluginName + ""String_Node_Str"");
  String thescript=""String_Node_Str"", theversion=""String_Node_Str"";
  if (Config.custom_enabled) {
    thescript=""String_Node_Str"";
  }
 else {
    thescript=Config.script_name;
    theversion=Config.script_version;
  }
  String online=""String_Node_Str"" + getServer().getOnlinePlayers().length;
  String max=""String_Node_Str"" + getServer().getMaxPlayers();
  if (Config.usagestats_enabled) {
    try {
      Util.craftFire.postInfo(getServer().getServerName(),getServer().getVersion(),pluginVersion,System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),System.getProperty(""String_Node_Str""),thescript,theversion,Plugins.toString(),online,max,server.getPort());
    }
 catch (    IOException e1) {
      Util.logging.Debug(""String_Node_Str"");
    }
  }
  for (  Player p : getServer().getOnlinePlayers()) {
    EBean eBeanClass=EBean.checkPlayer(p,true);
    if (eBeanClass.getReloadtime() + 30 > Util.timeStamp()) {
      Processes.Login(p);
    }
  }
}",0.8634096344379911
93993,"public void onDisable(){
  for (  Player p : getServer().getOnlinePlayers()) {
    EBean eBeanClass=EBean.checkPlayer(p);
    if (eBeanClass.getAuthorized() != null && eBeanClass.getAuthorized().equalsIgnoreCase(""String_Node_Str"")) {
      eBeanClass.setReloadtime(Util.timeStamp());
      EBean.save(eBeanClass);
    }
    Processes.Logout(p);
  }
  Util.logging.Info(pluginName + ""String_Node_Str"" + pluginVersion+ ""String_Node_Str"");
  Plugin checkCraftIRC=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if ((checkCraftIRC != null) && (checkCraftIRC.isEnabled()) && (Config.CraftIRC_enabled == true)) {
    ZCraftIRC.sendMessage(Message.OnDisable,null);
  }
  authorizedNames.clear();
  AuthDB_AuthTime.clear();
  AuthDB_RemindLogin.clear();
  AuthDB_SpamMessage.clear();
  AuthDB_SpamMessageTime.clear();
  AuthDB_LinkedNames.clear();
  AuthDB_LinkedNameCheck.clear();
  AuthDB_PasswordTries.clear();
  AuthDB_Timeouts.clear();
  AuthDB_Sessions.clear();
  AuthDB_Authed.clear();
  MySQL.close();
}","public void onDisable(){
  for (  Player p : getServer().getOnlinePlayers()) {
    EBean eBeanClass=EBean.checkPlayer(p,true);
    if (eBeanClass.getAuthorized() != null && eBeanClass.getAuthorized().equalsIgnoreCase(""String_Node_Str"")) {
      eBeanClass.setReloadtime(Util.timeStamp());
      AuthDB.database.save(eBeanClass);
    }
    Processes.Logout(p);
  }
  Util.logging.Info(pluginName + ""String_Node_Str"" + pluginVersion+ ""String_Node_Str"");
  Plugin checkCraftIRC=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if ((checkCraftIRC != null) && (checkCraftIRC.isEnabled()) && (Config.CraftIRC_enabled == true)) {
    ZCraftIRC.sendMessage(Message.OnDisable,null);
  }
  authorizedNames.clear();
  AuthDB_AuthTime.clear();
  AuthDB_RemindLogin.clear();
  AuthDB_SpamMessage.clear();
  AuthDB_SpamMessageTime.clear();
  AuthDB_LinkedNames.clear();
  AuthDB_LinkedNameCheck.clear();
  AuthDB_PasswordTries.clear();
  AuthDB_Timeouts.clear();
  AuthDB_Sessions.clear();
  AuthDB_Authed.clear();
  MySQL.close();
}",0.9878108239882984
93994,"void checkOldFiles(){
  File data=new File(getDataFolder() + ""String_Node_Str"",""String_Node_Str"");
  if (!data.exists()) {
    if (data.mkdir()) {
      Util.logging.Debug(""String_Node_Str"" + getDataFolder() + ""String_Node_Str"");
    }
  }
  data=new File(getDataFolder() + ""String_Node_Str"",""String_Node_Str"");
  if (!data.exists()) {
    if (data.mkdir()) {
      Util.logging.Debug(""String_Node_Str"" + getDataFolder() + ""String_Node_Str"");
    }
  }
  data=new File(getDataFolder() + ""String_Node_Str"",""String_Node_Str"");
  if (!data.exists()) {
    if (data.mkdir()) {
      Util.logging.Debug(""String_Node_Str"" + getDataFolder() + ""String_Node_Str"");
    }
  }
  data=new File(getDataFolder() + ""String_Node_Str"",""String_Node_Str"");
  if (data.exists()) {
    if (data.renameTo(new File(getDataFolder() + ""String_Node_Str"",""String_Node_Str""))) {
      Util.logging.Debug(""String_Node_Str"" + getDataFolder() + ""String_Node_Str""+ getDataFolder()+ ""String_Node_Str"");
    }
  }
  data=new File(getDataFolder() + ""String_Node_Str"",""String_Node_Str"");
  if (data.exists()) {
    if (data.delete()) {
      Util.logging.Debug(""String_Node_Str"" + getDataFolder());
    }
  }
  data=new File(getDataFolder() + ""String_Node_Str"",""String_Node_Str"");
  if (data.exists()) {
    if (data.delete()) {
      Util.logging.Debug(""String_Node_Str"" + getDataFolder());
    }
  }
}","void checkOldFiles(){
  File data=new File(getDataFolder() + ""String_Node_Str"",""String_Node_Str"");
  if (!data.exists()) {
    if (data.mkdir()) {
      Util.logging.Debug(""String_Node_Str"" + getDataFolder() + ""String_Node_Str"");
    }
  }
  data=new File(getDataFolder() + ""String_Node_Str"",""String_Node_Str"");
  if (!data.exists()) {
    if (data.mkdir()) {
      Util.logging.Debug(""String_Node_Str"" + getDataFolder() + ""String_Node_Str"");
    }
  }
  data=new File(getDataFolder() + ""String_Node_Str"",""String_Node_Str"");
  if (!data.exists()) {
    if (data.mkdir()) {
      Util.logging.Debug(""String_Node_Str"" + getDataFolder() + ""String_Node_Str"");
    }
  }
  data=new File(getDataFolder() + ""String_Node_Str"",""String_Node_Str"");
  if (data.exists()) {
    try {
      FileInputStream fstream=new FileInputStream(getDataFolder() + ""String_Node_Str"");
      DataInputStream in=new DataInputStream(fstream);
      BufferedReader br=new BufferedReader(new InputStreamReader(in));
      String strLine;
      String[] split;
      int count=0;
      EBean eBeanClass=null;
      while ((strLine=br.readLine()) != null) {
        split=strLine.split(""String_Node_Str"");
        if (split.length == 2) {
          count++;
          Util.logging.Debug(""String_Node_Str"" + split[0] + ""String_Node_Str""+ split[1]);
          eBeanClass=EBean.checkPlayer(split[0],false);
          eBeanClass.setLinkedname(split[1]);
          database.save(eBeanClass);
        }
      }
      in.close();
      if (count > 0) {
        Util.logging.Debug(""String_Node_Str"" + count + ""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    }
    if (data.delete()) {
      Util.logging.Debug(""String_Node_Str"" + getDataFolder());
    }
  }
  data=new File(getDataFolder() + ""String_Node_Str"",""String_Node_Str"");
  if (data.exists()) {
    if (data.delete()) {
      Util.logging.Debug(""String_Node_Str"" + getDataFolder());
    }
  }
  data=new File(getDataFolder() + ""String_Node_Str"",""String_Node_Str"");
  if (data.exists()) {
    if (data.delete()) {
      Util.logging.Debug(""String_Node_Str"" + getDataFolder());
    }
  }
}",0.5034519383961763
93995,"public boolean onCommand(CommandSender sender,Command cmd,String cmdLabel,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length == 0) {
        player.sendMessage(""String_Node_Str"" + pluginName + ""String_Node_Str""+ pluginVersion);
        player.sendMessage(""String_Node_Str"" + pluginName + ""String_Node_Str"");
        player.sendMessage(""String_Node_Str"" + pluginWebsite);
        return true;
      }
    }
 else     if (cmd.getName().equalsIgnoreCase(commandString(Config.commands_reload)) || cmd.getName().equalsIgnoreCase(commandString(Config.aliases_reload))) {
      if (args.length == 1) {
        if (ZPermissions.isAllowed(player,Permission.command_admin_reload)) {
          new Config(""String_Node_Str"",""String_Node_Str"" + pluginName + ""String_Node_Str"",""String_Node_Str"");
          LoadYml(""String_Node_Str"");
          LoadYml(""String_Node_Str"");
          player.sendMessage(""String_Node_Str"");
          Messages.sendMessage(Message.reload_success,player,null);
          return true;
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (cmd.getName().equalsIgnoreCase(commandString(Config.commands_logout)) || cmd.getName().equalsIgnoreCase(commandString(Config.aliases_logout))) {
      if (args.length == 0) {
        if (ZPermissions.isAllowed(player,Permission.command_logout)) {
          if (Processes.Logout(player)) {
            EBean eBeanClass=EBean.checkPlayer(player);
            eBeanClass.setSessiontime(0);
            getDatabase().save(eBeanClass);
            String check=Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player));
            if (AuthDB.AuthDB_Sessions.containsKey(check)) {
              AuthDB_Sessions.remove(check);
            }
            Messages.sendMessage(Message.logout_success,player,null);
            return true;
          }
 else {
            Messages.sendMessage(Message.logout_failure,player,null);
            return true;
          }
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
 else       if (args.length == 1) {
        if (ZPermissions.isAllowed(player,Permission.command_admin_logout)) {
          String PlayerName=args[0];
          List<Player> players=sender.getServer().matchPlayer(PlayerName);
          if (!players.isEmpty()) {
            if (Processes.Logout(players.get(0))) {
              Messages.sendMessage(Message.logout_admin_success,player,null,players.get(0).getName());
              Messages.sendMessage(Message.logout_admin,players.get(0),null);
              return true;
            }
 else {
              Messages.sendMessage(Message.logout_admin_failure,player,null,players.get(0).getName());
              return true;
            }
          }
          Messages.sendMessage(Message.logout_admin_notfound,player,null,PlayerName);
          return true;
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (isAuthorized(player) && (cmd.getName().equalsIgnoreCase(commandString(Config.commands_login)) || cmd.getName().equalsIgnoreCase(commandString(Config.aliases_login)))) {
      if (ZPermissions.isAllowed(player,Permission.command_admin_login)) {
        if (args.length == 1) {
          String PlayerName=args[0];
          List<Player> players=sender.getServer().matchPlayer(PlayerName);
          if (!players.isEmpty()) {
            if (Processes.Logout(players.get(0))) {
              Messages.sendMessage(Message.login_admin_success,player,null,players.get(0).getName());
              Messages.sendMessage(Message.login_admin,players.get(0),null);
              return true;
            }
 else {
              Messages.sendMessage(Message.login_admin_failure,player,null,players.get(0).getName());
              return true;
            }
          }
          Messages.sendMessage(Message.login_admin_notfound,player,null,PlayerName);
          return true;
        }
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
  }
  return false;
}","public boolean onCommand(CommandSender sender,Command cmd,String cmdLabel,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length == 0) {
        player.sendMessage(""String_Node_Str"" + pluginName + ""String_Node_Str""+ pluginVersion);
        player.sendMessage(""String_Node_Str"" + pluginName + ""String_Node_Str"");
        player.sendMessage(""String_Node_Str"" + pluginWebsite);
        return true;
      }
    }
 else     if (cmd.getName().equalsIgnoreCase(commandString(Config.commands_reload)) || cmd.getName().equalsIgnoreCase(commandString(Config.aliases_reload))) {
      if (args.length == 1) {
        if (ZPermissions.isAllowed(player,Permission.command_admin_reload)) {
          new Config(""String_Node_Str"",""String_Node_Str"" + pluginName + ""String_Node_Str"",""String_Node_Str"");
          LoadYml(""String_Node_Str"");
          LoadYml(""String_Node_Str"");
          player.sendMessage(""String_Node_Str"");
          Messages.sendMessage(Message.reload_success,player,null);
          return true;
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (cmd.getName().equalsIgnoreCase(commandString(Config.commands_logout)) || cmd.getName().equalsIgnoreCase(commandString(Config.aliases_logout))) {
      if (args.length == 0) {
        if (ZPermissions.isAllowed(player,Permission.command_logout)) {
          if (Processes.Logout(player)) {
            EBean eBeanClass=EBean.checkPlayer(player,true);
            eBeanClass.setSessiontime(0);
            getDatabase().save(eBeanClass);
            String check=Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player));
            if (AuthDB.AuthDB_Sessions.containsKey(check)) {
              AuthDB_Sessions.remove(check);
            }
            Messages.sendMessage(Message.logout_success,player,null);
            return true;
          }
 else {
            Messages.sendMessage(Message.logout_failure,player,null);
            return true;
          }
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
 else       if (args.length == 1) {
        if (ZPermissions.isAllowed(player,Permission.command_admin_logout)) {
          String PlayerName=args[0];
          List<Player> players=sender.getServer().matchPlayer(PlayerName);
          if (!players.isEmpty()) {
            if (Processes.Logout(players.get(0))) {
              Messages.sendMessage(Message.logout_admin_success,player,null,players.get(0).getName());
              Messages.sendMessage(Message.logout_admin,players.get(0),null);
              return true;
            }
 else {
              Messages.sendMessage(Message.logout_admin_failure,player,null,players.get(0).getName());
              return true;
            }
          }
          Messages.sendMessage(Message.logout_admin_notfound,player,null,PlayerName);
          return true;
        }
 else {
          Messages.sendMessage(Message.protection_denied,player,null);
        }
      }
    }
 else     if (isAuthorized(player) && (cmd.getName().equalsIgnoreCase(commandString(Config.commands_login)) || cmd.getName().equalsIgnoreCase(commandString(Config.aliases_login)))) {
      if (ZPermissions.isAllowed(player,Permission.command_admin_login)) {
        if (args.length == 1) {
          String PlayerName=args[0];
          List<Player> players=sender.getServer().matchPlayer(PlayerName);
          if (!players.isEmpty()) {
            if (Processes.Logout(players.get(0))) {
              Messages.sendMessage(Message.login_admin_success,player,null,players.get(0).getName());
              Messages.sendMessage(Message.login_admin,players.get(0),null);
              return true;
            }
 else {
              Messages.sendMessage(Message.login_admin_failure,player,null,players.get(0).getName());
              return true;
            }
          }
          Messages.sendMessage(Message.login_admin_notfound,player,null,PlayerName);
          return true;
        }
      }
 else {
        Messages.sendMessage(Message.protection_denied,player,null);
      }
    }
  }
  return false;
}",0.9994122487363348
93996,"public boolean isRegistered(String when,String player){
  boolean dupe=false;
  boolean checkneeded=true;
  EBean eBeanClass=EBean.checkPlayer(player);
  if (eBeanClass.getRegistred().equalsIgnoreCase(""String_Node_Str"")) {
    if (when.equalsIgnoreCase(""String_Node_Str"")) {
      if (!Config.database_keepalive) {
        MySQL.connect();
      }
      Config.hasForumBoard=false;
      try {
        if (Util.checkScript(""String_Node_Str"",Config.script_name,player,null,null,null)) {
          AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
          dupe=true;
        }
      }
 catch (      SQLException e) {
        Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
      if (!Config.database_keepalive) {
        MySQL.close();
      }
      if (!dupe) {
        AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
      }
      return dupe;
    }
 else     if (when.equalsIgnoreCase(""String_Node_Str"")) {
      if (!Config.database_keepalive) {
        MySQL.connect();
      }
      Config.hasForumBoard=false;
      try {
        if (Util.checkScript(""String_Node_Str"",Config.script_name,player.toLowerCase(),null,null,null)) {
          AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
          dupe=true;
        }
 else         if (Util.checkOtherName(player) != player) {
          AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
          dupe=true;
        }
      }
 catch (      SQLException e) {
        Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
      if (!Config.database_keepalive) {
        MySQL.close();
      }
      if (!dupe) {
        AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
      }
      return dupe;
    }
 else {
      if (this.AuthDB_Authed.containsKey(Encryption.md5(player))) {
        String check=AuthDB_Authed.get(Encryption.md5(player));
        if (check.equalsIgnoreCase(""String_Node_Str"")) {
          checkneeded=false;
          return true;
        }
 else         if (check.equalsIgnoreCase(""String_Node_Str"")) {
          return false;
        }
      }
 else       if (checkneeded) {
        Util.logging.Debug(""String_Node_Str"");
        try {
          if (!Config.database_keepalive) {
            MySQL.connect();
          }
          Config.hasForumBoard=false;
          if (Util.checkScript(""String_Node_Str"",Config.script_name,player.toLowerCase(),null,null,null)) {
            AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
            dupe=true;
          }
          if (!Config.database_keepalive) {
            MySQL.close();
          }
          if (!dupe) {
            AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
          }
          return dupe;
        }
 catch (        SQLException e) {
          Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          Stop(""String_Node_Str"");
        }
      }
    }
  }
  return false;
}","public boolean isRegistered(String when,String player){
  boolean dupe=false;
  boolean checkneeded=true;
  EBean eBeanClass=EBean.checkPlayer(player,true);
  if (eBeanClass.getRegistred().equalsIgnoreCase(""String_Node_Str"")) {
    if (when.equalsIgnoreCase(""String_Node_Str"")) {
      if (!Config.database_keepalive) {
        MySQL.connect();
      }
      Config.hasForumBoard=false;
      try {
        if (Util.checkScript(""String_Node_Str"",Config.script_name,player,null,null,null)) {
          AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
          dupe=true;
        }
      }
 catch (      SQLException e) {
        Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
      if (!Config.database_keepalive) {
        MySQL.close();
      }
      if (!dupe) {
        AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
      }
      return dupe;
    }
 else     if (when.equalsIgnoreCase(""String_Node_Str"")) {
      if (!Config.database_keepalive) {
        MySQL.connect();
      }
      Config.hasForumBoard=false;
      try {
        if (Util.checkScript(""String_Node_Str"",Config.script_name,player.toLowerCase(),null,null,null)) {
          AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
          dupe=true;
        }
 else         if (Util.checkOtherName(player) != player) {
          AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
          dupe=true;
        }
      }
 catch (      SQLException e) {
        Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
      }
      if (!Config.database_keepalive) {
        MySQL.close();
      }
      if (!dupe) {
        AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
      }
      return dupe;
    }
 else {
      if (this.AuthDB_Authed.containsKey(Encryption.md5(player))) {
        String check=AuthDB_Authed.get(Encryption.md5(player));
        if (check.equalsIgnoreCase(""String_Node_Str"")) {
          checkneeded=false;
          return true;
        }
 else         if (check.equalsIgnoreCase(""String_Node_Str"")) {
          return false;
        }
      }
 else       if (checkneeded) {
        Util.logging.Debug(""String_Node_Str"");
        try {
          if (!Config.database_keepalive) {
            MySQL.connect();
          }
          Config.hasForumBoard=false;
          if (Util.checkScript(""String_Node_Str"",Config.script_name,player.toLowerCase(),null,null,null)) {
            AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
            dupe=true;
          }
          if (!Config.database_keepalive) {
            MySQL.close();
          }
          if (!dupe) {
            AuthDB_Authed.put(Encryption.md5(player),""String_Node_Str"");
          }
          return dupe;
        }
 catch (        SQLException e) {
          Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          Stop(""String_Node_Str"");
        }
      }
    }
  }
  return false;
}",0.999304492975379
93997,"public void onPlayerQuit(PlayerQuitEvent event){
  Player player=event.getPlayer();
  Messages.sendMessage(Message.left_server,player,null);
  if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
    player.setHealth(20);
    player.teleport(player.getWorld().getSpawnLocation());
  }
  long thetimestamp=System.currentTimeMillis() / 1000;
  if (Config.session_start.equalsIgnoreCase(""String_Node_Str"")) {
    this.plugin.AuthDB_Sessions.put(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)),thetimestamp);
    EBean EBeanClass=EBean.checkPlayer(player);
    EBeanClass.setSessiontime(thetimestamp);
    this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
  }
  if (checkGuest(player,Config.guests_inventory) == false && this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false && this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
    ItemStack[] theinv=new ItemStack[36];
    player.getInventory().setContents(theinv);
  }
  Processes.Logout(player);
}","public void onPlayerQuit(PlayerQuitEvent event){
  Player player=event.getPlayer();
  Messages.sendMessage(Message.left_server,player,null);
  if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
    player.setHealth(20);
    player.teleport(player.getWorld().getSpawnLocation());
  }
  long thetimestamp=System.currentTimeMillis() / 1000;
  if (Config.session_enabled && Config.session_start.equalsIgnoreCase(""String_Node_Str"")) {
    this.plugin.AuthDB_Sessions.put(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)),thetimestamp);
    EBean EBeanClass=EBean.checkPlayer(player,true);
    EBeanClass.setSessiontime(thetimestamp);
    this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
  }
  if (checkGuest(player,Config.guests_inventory) == false && this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false && this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
    ItemStack[] theinv=new ItemStack[36];
    player.getInventory().setContents(theinv);
  }
  Processes.Logout(player);
}",0.9857208659603868
93998,"public void checkTimeout(Player player){
  Util.logging.Debug(""String_Node_Str"");
  EBean eBeanClass=EBean.checkPlayer(player);
  int timeoutid=eBeanClass.getTimeoutid();
  if (plugin.isAuthorized(player) == false && (AuthDB.AuthDB_Timeouts.containsKey(player.getName()) || timeoutid != 0)) {
    eBeanClass.setTimeoutid(0);
    EBean.save(eBeanClass);
    if (plugin.isRegistered(""String_Node_Str"",player.getName())) {
      Messages.sendMessage(Message.login_timeout,player,null);
    }
 else {
      Messages.sendMessage(Message.register_timeout,player,null);
    }
  }
}","public void checkTimeout(Player player){
  Util.logging.Debug(""String_Node_Str"");
  EBean eBeanClass=EBean.checkPlayer(player,true);
  int timeoutid=eBeanClass.getTimeoutid();
  if (plugin.isAuthorized(player) == false && (AuthDB.AuthDB_Timeouts.containsKey(player.getName()) || timeoutid != 0)) {
    eBeanClass.setTimeoutid(0);
    EBean.save(eBeanClass);
    if (plugin.isRegistered(""String_Node_Str"",player.getName())) {
      Messages.sendMessage(Message.login_timeout,player,null);
    }
 else {
      Messages.sendMessage(Message.register_timeout,player,null);
    }
  }
}",0.9956634865568084
93999,"public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  long start=Util.timeMS();
  String noPermission=""String_Node_Str"";
  String Contrib=event.getMessage();
  Contrib=Contrib.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!ZBukkitContrib.checkCommand(Contrib)) {
    String[] split=event.getMessage().split(""String_Node_Str"");
    Player player=event.getPlayer();
    if (split[0].equalsIgnoreCase(Config.commands_login) || split[0].equalsIgnoreCase(Config.aliases_login)) {
      if (ZPermissions.isAllowed(player,Permission.command_login)) {
        if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
          Messages.sendMessage(Message.login_notregistered,player,null);
        }
 else         if (plugin.isAuthorized(player)) {
          Messages.sendMessage(Message.login_authorized,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.login_usage,player,null);
        }
 else         if (this.plugin.checkPassword(player.getName(),split[1])) {
          Processes.Login(player);
          Messages.sendMessage(Message.login_success,player,null);
        }
 else {
          Messages.sendMessage(Message.login_failure,player,null);
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_login + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        player.sendMessage(noPermission);
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_link) || split[0].equalsIgnoreCase(Config.aliases_link)) {
      if (Config.link_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_link)) {
          if (split.length == 3) {
            if (!player.getName().equals(split[1])) {
              if (Util.checkOtherName(player.getName()).equals(player.getName())) {
                EBean eBeanClass=EBean.checkPlayer(split[1]);
                String linkedname=eBeanClass.getLinkedname();
                if (linkedname != null) {
                  player.sendMessage(""String_Node_Str"");
                }
 else                 if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Link(player,split[1]);
                  Messages.sendMessage(Message.link_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.link_failure,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.link_exists,player,null);
              }
            }
 else {
              player.sendMessage(""String_Node_Str"");
            }
          }
 else {
            Messages.sendMessage(Message.link_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_link + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          player.sendMessage(noPermission);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_unlink) || split[0].equalsIgnoreCase(Config.aliases_unlink)) {
      if (Config.unlink_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_unlink)) {
          if (split.length == 3) {
            if (Util.checkOtherName(player.getName()).equals(player.getDisplayName())) {
              EBean eBeanClass=EBean.checkPlayer(player);
              String linkedname=eBeanClass.getLinkedname();
              if (linkedname.equals(split[1])) {
                if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Unlink(player,split[1]);
                  Messages.sendMessage(Message.unlink_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.unlink_failure,player,null);
                }
              }
 else {
                player.sendMessage(""String_Node_Str"");
              }
            }
 else {
              Messages.sendMessage(Message.unlink_nonexist,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.unlink_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_unlink + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          player.sendMessage(noPermission);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_register) || split[0].equalsIgnoreCase(Config.aliases_register)) {
      if (ZPermissions.isAllowed(player,Permission.command_register)) {
        Boolean email=true;
        if (Config.custom_emailfield == null || Config.custom_emailfield == ""String_Node_Str"") {
          email=false;
        }
        if (!Config.register_enabled) {
          Messages.sendMessage(Message.register_disabled,player,null);
        }
 else         if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
          Messages.sendMessage(Message.register_exists,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.register_usage,player,null);
        }
 else         if (split.length < 3 && email) {
          Messages.sendMessage(Message.email_required,player,null);
        }
 else         if ((split.length >= 3 && email) && (!this.plugin.checkEmail(split[2]))) {
          Util.logging.Debug(""String_Node_Str"" + split[2]);
          Messages.sendMessage(Message.email_invalid,player,null);
        }
 else {
          try {
            if (split.length >= 3 || (!email && split.length >= 2)) {
              String themail=null;
              if (!email) {
                themail=null;
              }
 else {
                themail=split[2];
              }
              if (this.plugin.register(player,split[1],themail,Util.craftFirePlayer.getIP(player))) {
                ItemStack[] inv=this.plugin.getInventory(player);
                if (inv != null) {
                  player.getInventory().setContents(inv);
                }
                inv=AuthDB.getArmorInventory(player);
                if (inv != null) {
                  player.getInventory().setArmorContents(inv);
                }
                long timestamp=System.currentTimeMillis() / 1000;
                this.plugin.AuthDB_Authed.put(Encryption.md5(player.getName()),""String_Node_Str"");
                this.plugin.AuthDB_Sessions.put(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)),timestamp);
                EBean eBeanClass=EBean.checkPlayer(player);
                eBeanClass.setSessiontime(timestamp);
                AuthDB.database.save(eBeanClass);
                Util.logging.Debug(""String_Node_Str"" + player.getName());
                Processes.Login(player);
                long thetimestamp=System.currentTimeMillis() / 1000;
                this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
                Location temploc=event.getPlayer().getLocation();
                while (temploc.getBlock().getTypeId() == 0) {
                  temploc.setY(temploc.getY() - 1);
                }
                temploc.setY(temploc.getY() + 1);
                event.getPlayer().teleport(temploc);
                Messages.sendMessage(Message.register_success,player,null);
              }
            }
          }
 catch (          IOException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
catch (          SQLException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_register + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        player.sendMessage(noPermission);
      }
    }
 else     if (!plugin.isAuthorized(player)) {
      if (!checkGuest(player,Config.guests_commands)) {
        event.setMessage(""String_Node_Str"");
        event.setCancelled(true);
      }
    }
  }
 else {
    Util.logging.Debug(""String_Node_Str"" + event.getMessage());
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}","public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  long start=Util.timeMS();
  String noPermission=""String_Node_Str"";
  String Contrib=event.getMessage();
  Contrib=Contrib.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!ZBukkitContrib.checkCommand(Contrib)) {
    String[] split=event.getMessage().split(""String_Node_Str"");
    Player player=event.getPlayer();
    if (split[0].equalsIgnoreCase(Config.commands_login) || split[0].equalsIgnoreCase(Config.aliases_login)) {
      if (ZPermissions.isAllowed(player,Permission.command_login)) {
        if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) == false || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName())) == false) {
          Messages.sendMessage(Message.login_notregistered,player,null);
        }
 else         if (plugin.isAuthorized(player)) {
          Messages.sendMessage(Message.login_authorized,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.login_usage,player,null);
        }
 else         if (this.plugin.checkPassword(player.getName(),split[1])) {
          Processes.Login(player);
          Messages.sendMessage(Message.login_success,player,null);
        }
 else {
          Messages.sendMessage(Message.login_failure,player,null);
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_login + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        player.sendMessage(noPermission);
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_link) || split[0].equalsIgnoreCase(Config.aliases_link)) {
      if (Config.link_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_link)) {
          if (split.length == 3) {
            if (!player.getName().equals(split[1])) {
              if (Util.checkOtherName(player.getName()).equals(player.getName())) {
                EBean eBeanClass=EBean.checkPlayer(split[1],true);
                String linkedname=eBeanClass.getLinkedname();
                if (linkedname != null) {
                  player.sendMessage(""String_Node_Str"");
                }
 else                 if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Link(player,split[1]);
                  Messages.sendMessage(Message.link_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.link_failure,player,null);
                }
              }
 else {
                Messages.sendMessage(Message.link_exists,player,null);
              }
            }
 else {
              player.sendMessage(""String_Node_Str"");
            }
          }
 else {
            Messages.sendMessage(Message.link_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_link + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          player.sendMessage(noPermission);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_unlink) || split[0].equalsIgnoreCase(Config.aliases_unlink)) {
      if (Config.unlink_enabled) {
        if (ZPermissions.isAllowed(player,Permission.command_unlink)) {
          if (split.length == 3) {
            if (Util.checkOtherName(player.getName()).equals(player.getDisplayName())) {
              EBean eBeanClass=EBean.checkPlayer(player,true);
              String linkedname=eBeanClass.getLinkedname();
              if (linkedname.equals(split[1])) {
                if (this.plugin.checkPassword(split[1],split[2])) {
                  Processes.Unlink(player,split[1]);
                  Messages.sendMessage(Message.unlink_success,player,null);
                }
 else {
                  Messages.sendMessage(Message.unlink_failure,player,null);
                }
              }
 else {
                player.sendMessage(""String_Node_Str"");
              }
            }
 else {
              Messages.sendMessage(Message.unlink_nonexist,player,null);
            }
          }
 else {
            Messages.sendMessage(Message.unlink_usage,player,null);
          }
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
          event.setMessage(Config.commands_unlink + ""String_Node_Str"");
          event.setCancelled(true);
        }
 else {
          player.sendMessage(noPermission);
        }
      }
    }
 else     if (split[0].equalsIgnoreCase(Config.commands_register) || split[0].equalsIgnoreCase(Config.aliases_register)) {
      if (ZPermissions.isAllowed(player,Permission.command_register)) {
        Boolean email=true;
        if (Config.custom_emailfield == null || Config.custom_emailfield == ""String_Node_Str"") {
          email=false;
        }
        if (!Config.register_enabled) {
          Messages.sendMessage(Message.register_disabled,player,null);
        }
 else         if (this.plugin.isRegistered(""String_Node_Str"",player.getName()) || this.plugin.isRegistered(""String_Node_Str"",Util.checkOtherName(player.getName()))) {
          Messages.sendMessage(Message.register_exists,player,null);
        }
 else         if (split.length < 2) {
          Messages.sendMessage(Message.register_usage,player,null);
        }
 else         if (split.length < 3 && email) {
          Messages.sendMessage(Message.email_required,player,null);
        }
 else         if ((split.length >= 3 && email) && (!this.plugin.checkEmail(split[2]))) {
          Util.logging.Debug(""String_Node_Str"" + split[2]);
          Messages.sendMessage(Message.email_invalid,player,null);
        }
 else {
          try {
            if (split.length >= 3 || (!email && split.length >= 2)) {
              String themail=null;
              if (!email) {
                themail=null;
              }
 else {
                themail=split[2];
              }
              if (this.plugin.register(player,split[1],themail,Util.craftFirePlayer.getIP(player))) {
                ItemStack[] inv=this.plugin.getInventory(player);
                if (inv != null) {
                  player.getInventory().setContents(inv);
                }
                inv=AuthDB.getArmorInventory(player);
                if (inv != null) {
                  player.getInventory().setArmorContents(inv);
                }
                long timestamp=System.currentTimeMillis() / 1000;
                this.plugin.AuthDB_Authed.put(Encryption.md5(player.getName()),""String_Node_Str"");
                if (Config.session_enabled) {
                  this.plugin.AuthDB_Sessions.put(Encryption.md5(player.getName() + Util.craftFirePlayer.getIP(player)),timestamp);
                  EBean eBeanClass=EBean.checkPlayer(player,true);
                  eBeanClass.setSessiontime(timestamp);
                  AuthDB.database.save(eBeanClass);
                  Util.logging.Debug(""String_Node_Str"" + player.getName());
                }
                Processes.Login(player);
                long thetimestamp=System.currentTimeMillis() / 1000;
                this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
                Location temploc=event.getPlayer().getLocation();
                while (temploc.getBlock().getTypeId() == 0) {
                  temploc.setY(temploc.getY() - 1);
                }
                temploc.setY(temploc.getY() + 1);
                event.getPlayer().teleport(temploc);
                Messages.sendMessage(Message.register_success,player,null);
              }
            }
          }
 catch (          IOException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
catch (          SQLException e) {
            Messages.sendMessage(Message.register_failure,player,null);
            Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
          }
        }
        Util.logging.Debug(player.getName() + ""String_Node_Str"");
        event.setMessage(Config.commands_register + ""String_Node_Str"");
        event.setCancelled(true);
      }
 else {
        player.sendMessage(noPermission);
      }
    }
 else     if (!plugin.isAuthorized(player)) {
      if (!checkGuest(player,Config.guests_commands)) {
        event.setMessage(""String_Node_Str"");
        event.setCancelled(true);
      }
    }
  }
 else {
    Util.logging.Debug(""String_Node_Str"" + event.getMessage());
  }
  long stop=Util.timeMS();
  Util.logging.timeUsage(stop - start,""String_Node_Str"");
}",0.9950585753150852
94000,"public void onPlayerJoin(PlayerJoinEvent event){
  final Player player=event.getPlayer();
  EBean.checkIP(player.getName(),Util.craftFirePlayer.getIP(player));
  player.teleport(Util.landLocation(player.getLocation()));
  if (Config.link_rename && !Util.checkOtherName(player.getName()).equals(player.getName())) {
    String message=event.getJoinMessage();
    message=message.replaceAll(player.getName(),player.getDisplayName());
    event.setJoinMessage(message);
  }
  this.plugin.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
  if (Config.session_length != 0) {
    long timestamp=System.currentTimeMillis() / 1000;
    if (Util.authDBplayer.sessionTime(player) != 0) {
      long storedtime=Util.authDBplayer.sessionTime(player);
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ storedtime);
      long timedifference=timestamp - storedtime;
      Util.logging.Debug(""String_Node_Str"" + timedifference);
      Util.logging.Debug(""String_Node_Str"" + Config.session_length);
      if (timedifference > Config.session_length) {
        sessionallow=false;
      }
 else {
        sessionallow=true;
      }
    }
 else {
      sessionallow=false;
    }
  }
  try {
    if (sessionallow == false) {
      int time=0;
      if (Config.login_timeout > 0 && plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.login_timeout + ""String_Node_Str"");
        time=Config.login_timeout;
      }
 else       if (Config.register_timeout > 0 && !plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.register_timeout + ""String_Node_Str"");
        time=Config.register_timeout;
      }
      if (time > 0) {
        Schedule=plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            checkTimeout(player);
          }
        }
,time);
        EBean eBeanClass=EBean.checkPlayer(player);
        Util.logging.Debug(""String_Node_Str"" + Schedule);
        eBeanClass.setTimeoutid(Schedule);
        EBean.save(eBeanClass);
        if (AuthDB.AuthDB_Timeouts.put(player.getName(),Schedule) != null) {
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
        }
      }
    }
    if (Config.custom_enabled)     if (Config.custom_encryption == null) {
      player.sendMessage(""String_Node_Str"");
    }
    if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
      player.setHealth(20);
      player.teleport(player.getWorld().getSpawnLocation());
    }
    EBean eBeanClass=EBean.checkPlayer(player);
    if ((eBeanClass.getReloadtime() + 30) >= Util.timeStamp()) {
      sessionallow=true;
    }
    if (Config.onlineMode) {
      sessionallow=true;
    }
    if (sessionallow) {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(event.getPlayer());
      Messages.sendMessage(Message.session_valid,player,null);
    }
 else     if (this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
        @Override public void run(){
          if (!plugin.isAuthorized(player)) {
            if (player.getInventory() != null) {
              player.getInventory().clear();
            }
            Util.craftFirePlayer.clearArmorinventory(player);
          }
        }
      }
,20);
      if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
        Messages.sendMessage(Message.login_prompt,player,null);
      }
 else {
        Messages.sendMessage(Message.login_normal,player,null);
      }
    }
 else     if (Config.register_force) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      Util.craftFirePlayer.clearArmorinventory(player);
      Messages.sendMessage(Message.welcome_guest,player,null);
    }
 else     if (!Config.register_force) {
      Messages.sendMessage(Message.welcome_guest,player,null);
    }
 else {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(player);
    }
  }
 catch (  IOException e) {
    Util.logging.Severe(""String_Node_Str"" + AuthDB.pluginName + ""String_Node_Str"");
    player.kickPlayer(""String_Node_Str"");
    Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    player.sendMessage(Color.red + ""String_Node_Str"");
  }
}","public void onPlayerJoin(PlayerJoinEvent event){
  final Player player=event.getPlayer();
  EBean.checkIP(player.getName(),Util.craftFirePlayer.getIP(player));
  player.teleport(Util.landLocation(player.getLocation()));
  if (Config.link_rename && !Util.checkOtherName(player.getName()).equals(player.getName())) {
    String message=event.getJoinMessage();
    message=message.replaceAll(player.getName(),player.getDisplayName());
    event.setJoinMessage(message);
  }
  this.plugin.AuthDB_PasswordTries.put(player.getName(),""String_Node_Str"");
  if (Config.session_enabled && Config.session_length != 0) {
    long timestamp=System.currentTimeMillis() / 1000;
    if (Util.authDBplayer.sessionTime(player) != 0) {
      long storedtime=Util.authDBplayer.sessionTime(player);
      Util.logging.Debug(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ storedtime);
      long timedifference=timestamp - storedtime;
      Util.logging.Debug(""String_Node_Str"" + timedifference);
      Util.logging.Debug(""String_Node_Str"" + Config.session_length);
      if (timedifference > Config.session_length) {
        sessionallow=false;
      }
 else {
        sessionallow=true;
      }
    }
 else {
      sessionallow=false;
    }
  }
  try {
    if (sessionallow == false) {
      int time=0;
      if (Config.login_timeout > 0 && plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.login_timeout + ""String_Node_Str"");
        time=Config.login_timeout;
      }
 else       if (Config.register_timeout > 0 && !plugin.isRegistered(""String_Node_Str"",player.getName())) {
        Util.logging.Debug(""String_Node_Str"" + Config.register_timeout + ""String_Node_Str"");
        time=Config.register_timeout;
      }
      if (time > 0) {
        Schedule=plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            checkTimeout(player);
          }
        }
,time);
        EBean eBeanClass=EBean.checkPlayer(player,true);
        Util.logging.Debug(""String_Node_Str"" + Schedule);
        eBeanClass.setTimeoutid(Schedule);
        AuthDB.database.save(eBeanClass);
        if (AuthDB.AuthDB_Timeouts.put(player.getName(),Schedule) != null) {
          Util.logging.Debug(player.getName() + ""String_Node_Str"");
        }
      }
    }
    if (Config.custom_enabled && (Config.custom_encryption.equals(""String_Node_Str"") || Config.custom_encryption == null)) {
      player.sendMessage(""String_Node_Str"");
    }
    if (event.getPlayer().getHealth() == 0 || event.getPlayer().getHealth() == -1) {
      player.setHealth(20);
      player.teleport(player.getWorld().getSpawnLocation());
    }
    EBean eBeanClass=EBean.checkPlayer(player,true);
    if ((eBeanClass.getReloadtime() + 30) >= Util.timeStamp()) {
      sessionallow=true;
    }
    if (Config.onlineMode) {
      sessionallow=true;
    }
    if (sessionallow) {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(event.getPlayer());
      Messages.sendMessage(Message.session_valid,player,null);
    }
 else     if (this.plugin.isRegistered(""String_Node_Str"",player.getName())) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
        @Override public void run(){
          if (!plugin.isAuthorized(player)) {
            if (player.getInventory() != null) {
              player.getInventory().clear();
            }
            Util.craftFirePlayer.clearArmorinventory(player);
          }
        }
      }
,20);
      if (Util.toLoginMethod(Config.login_method).equalsIgnoreCase(""String_Node_Str"")) {
        Messages.sendMessage(Message.login_prompt,player,null);
      }
 else {
        Messages.sendMessage(Message.login_normal,player,null);
      }
    }
 else     if (Config.register_force) {
      if (Config.hasBackpack) {
        BackpackPlayer BackpackPlayer=BackpackManager.getBackpackPlayer((Player)player);
        BackpackPlayer.createBackpack();
        this.plugin.storeInventory(player,BackpackPlayer.getInventory().getContents(),player.getInventory().getArmorContents());
      }
 else {
        this.plugin.storeInventory(player,player.getInventory().getContents(),player.getInventory().getArmorContents());
      }
      player.getInventory().clear();
      Util.craftFirePlayer.clearArmorinventory(player);
      Messages.sendMessage(Message.welcome_guest,player,null);
    }
 else     if (!Config.register_force) {
      Messages.sendMessage(Message.welcome_guest,player,null);
    }
 else {
      long thetimestamp=System.currentTimeMillis() / 1000;
      this.plugin.AuthDB_AuthTime.put(player.getName(),thetimestamp);
      Processes.Login(player);
    }
  }
 catch (  IOException e) {
    Util.logging.Severe(""String_Node_Str"" + AuthDB.pluginName + ""String_Node_Str"");
    player.kickPlayer(""String_Node_Str"");
    Util.logging.StackTrace(e.getStackTrace(),Thread.currentThread().getStackTrace()[1].getMethodName(),Thread.currentThread().getStackTrace()[1].getLineNumber(),Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getFileName());
    player.sendMessage(Color.red + ""String_Node_Str"");
  }
}",0.9837752965806
