record_number,buggy_code,fixed_code,code_similarity
78001,"/** 
 * Validates the input value at the given locale. The format is: short date and medium time.
 * @param value the value to validate
 * @param locale the locale information
 * @return the date value if validation is successful
 * @throws ValidationValueException if the value is invalid
 */
static final Date doVidateDateTime(String value,ULocale locale) throws ValidationValueException {
  DateFormat formatter=DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.MEDIUM,locale);
  try {
    return formatter.parse(value);
  }
 catch (  ParseException e) {
    throw new ValidationValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,DesignChoiceConstants.PARAM_TYPE_DATETIME);
  }
}","/** 
 * Validates the input value at the given locale. The format is: short date and medium time.
 * @param value the value to validate
 * @param locale the locale information
 * @return the date value if validation is successful
 * @throws ValidationValueException if the value is invalid
 */
static final Date doVidateDateTime(String value,ULocale locale) throws ValidationValueException {
  DateFormat formatter=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM,locale);
  try {
    return formatter.parse(value);
  }
 catch (  ParseException e) {
    throw new ValidationValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,DesignChoiceConstants.PARAM_TYPE_DATETIME);
  }
}",0.992313067784766
78002,"/** 
 * @throws DataException
 */
void doSaveFinish() throws DataException {
  if (needsSaveToDoc() == false)   return;
  if (isBasicSaved == false) {
    isBasicSaved=true;
    this.getRdSave().saveResultIterator((CachedResultSet)this.odiResult,this.groupLevel,this.subQueryInfo);
  }
  this.getRdSave().saveFinish(odiResult.getCurrentResultIndex());
}","/** 
 * @throws DataException
 */
void doSaveFinish() throws DataException {
  if (needsSaveToDoc() == false)   return;
  if (isBasicSaved == false) {
    isBasicSaved=true;
    this.getRdSave().saveResultIterator(this.odiResult,this.groupLevel,this.subQueryInfo);
  }
  this.getRdSave().saveFinish(odiResult.getCurrentResultIndex());
}",0.9753265602322206
78003,"protected void adjustForNumColumns(int numColumns){
  Control control=getLabelControl();
  if (control != null) {
    ((GridData)control.getLayoutData()).horizontalSpan=1;
    numColumns--;
  }
  ((GridData)getTextControl(null).getLayoutData()).horizontalSpan=1;
  ((GridData)getTextControl(null).getLayoutData()).widthHint=85;
  numColumns--;
  ((GridData)getButtonControl(null).getLayoutData()).horizontalSpan=numColumns;
  ((GridData)getButtonControl(null).getLayoutData()).widthHint=85;
}","protected void adjustForNumColumns(int numColumns){
  Control control=getLabelControl();
  if (control != null) {
    ((GridData)control.getLayoutData()).horizontalSpan=1;
    numColumns--;
  }
  ((GridData)getTextControl(null).getLayoutData()).horizontalSpan=1;
  ((GridData)getTextControl(null).getLayoutData()).widthHint=85;
  numColumns--;
  ((GridData)getButtonControl(null).getLayoutData()).horizontalSpan=numColumns;
  ((GridData)getButtonControl(null).getLayoutData()).widthHint=Math.max(getButtonControl(null).computeSize(SWT.DEFAULT,SWT.DEFAULT).x,85);
}",0.9318181818181818
78004,"protected Control createContents(Composite parent){
  super.createFieldEditors();
  final Composite innerParent=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  innerParent.setLayout(layout);
  innerParent.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Table table=new Table(innerParent,SWT.BORDER | SWT.FULL_SELECTION);
  GridData data=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(data);
  table.setHeaderVisible(true);
  table.setLinesVisible(false);
  TableLayout tableLayout=new TableLayout();
  table.setLayout(tableLayout);
  final TableColumn column1=new TableColumn(table,SWT.NONE);
  column1.setText(Messages.getString(""String_Node_Str""));
  final TableColumn column2=new TableColumn(table,SWT.NONE);
  column2.setText(Messages.getString(""String_Node_Str""));
  fTableViewer=new TableViewer(table);
  fTableViewer.setLabelProvider(new HighlightLabelProvider());
  fTableViewer.setContentProvider(new HighlightContentProvider());
  fTableViewer.setSorter(null);
  fTableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateButtons();
    }
  }
);
  fTableViewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      edit();
    }
  }
);
  innerParent.addControlListener(new ControlAdapter(){
    public void controlResized(    ControlEvent e){
      Rectangle area=innerParent.getClientArea();
      Point preferredSize=table.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      int width=area.width - 2 * table.getBorderWidth();
      if (preferredSize.y > area.height) {
        Point vBarSize=table.getVerticalBar().getSize();
        width-=vBarSize.x;
      }
      Point oldSize=table.getSize();
      if (oldSize.x > width) {
        column1.setWidth(2 * width / 5);
        column2.setWidth(width - column1.getWidth());
        table.setSize(width,area.height);
      }
 else {
        table.setSize(width,area.height);
        column1.setWidth(2 * width / 5);
        column2.setWidth(width - column1.getWidth());
      }
    }
  }
);
  Composite buttons=new Composite(innerParent,SWT.NONE);
  buttons.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
  layout=new GridLayout();
  layout.numColumns=6;
  layout.marginHeight=0;
  layout.marginWidth=0;
  buttons.setLayout(layout);
  fAddButton=new Button(buttons,SWT.PUSH);
  fAddButton.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.HORIZONTAL_ALIGN_END);
  data.widthHint=Math.max(fAddButton.computeSize(-1,-1).x,60);
  data.heightHint=24;
  fAddButton.setLayoutData(data);
  fAddButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      add();
    }
  }
);
  fEditButton=new Button(buttons,SWT.PUSH);
  fEditButton.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.HORIZONTAL_ALIGN_END);
  data.widthHint=Math.max(fEditButton.computeSize(-1,-1).x,60);
  data.heightHint=24;
  fEditButton.setLayoutData(data);
  fEditButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      edit();
    }
  }
);
  fDeleteButton=new Button(buttons,SWT.PUSH);
  fDeleteButton.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.HORIZONTAL_ALIGN_END);
  data.widthHint=Math.max(fDeleteButton.computeSize(-1,-1).x,60);
  data.heightHint=24;
  fDeleteButton.setLayoutData(data);
  fDeleteButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      delete();
    }
  }
);
  fMoveUpButton=new Button(buttons,SWT.ARROW);
  fMoveUpButton.setAlignment(SWT.UP);
  data=new GridData(GridData.HORIZONTAL_ALIGN_END);
  data.widthHint=40;
  data.heightHint=24;
  fMoveUpButton.setLayoutData(data);
  fMoveUpButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveUp();
    }
  }
);
  fMoveDownButton=new Button(buttons,SWT.ARROW);
  fMoveDownButton.setAlignment(SWT.DOWN);
  data=new GridData(GridData.HORIZONTAL_ALIGN_END);
  data.widthHint=40;
  data.heightHint=24;
  fMoveDownButton.setLayoutData(data);
  fMoveDownButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveDown();
    }
  }
);
  fTableViewer.setInput(model);
  refreshTableItemView();
  updateButtons();
  Dialog.applyDialogFont(parent);
  return innerParent;
}","protected Control createContents(Composite parent){
  super.createFieldEditors();
  final Composite innerParent=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  innerParent.setLayout(layout);
  innerParent.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Table table=new Table(innerParent,SWT.BORDER | SWT.FULL_SELECTION);
  GridData data=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(data);
  table.setHeaderVisible(true);
  table.setLinesVisible(false);
  TableLayout tableLayout=new TableLayout();
  table.setLayout(tableLayout);
  final TableColumn column1=new TableColumn(table,SWT.NONE);
  column1.setText(Messages.getString(""String_Node_Str""));
  final TableColumn column2=new TableColumn(table,SWT.NONE);
  column2.setText(Messages.getString(""String_Node_Str""));
  fTableViewer=new TableViewer(table);
  fTableViewer.setLabelProvider(new HighlightLabelProvider());
  fTableViewer.setContentProvider(new HighlightContentProvider());
  fTableViewer.setSorter(null);
  fTableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateButtons();
    }
  }
);
  fTableViewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      edit();
    }
  }
);
  innerParent.addControlListener(new ControlAdapter(){
    public void controlResized(    ControlEvent e){
      Rectangle area=innerParent.getClientArea();
      Point preferredSize=table.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      int width=area.width - 2 * table.getBorderWidth();
      if (preferredSize.y > area.height) {
        Point vBarSize=table.getVerticalBar().getSize();
        width-=vBarSize.x;
      }
      Point oldSize=table.getSize();
      if (oldSize.x > width) {
        column1.setWidth(2 * width / 5);
        column2.setWidth(width - column1.getWidth());
        table.setSize(width,area.height);
      }
 else {
        table.setSize(width,area.height);
        column1.setWidth(2 * width / 5);
        column2.setWidth(width - column1.getWidth());
      }
    }
  }
);
  Composite buttons=new Composite(innerParent,SWT.NONE);
  buttons.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
  layout=new GridLayout();
  layout.numColumns=6;
  layout.marginHeight=0;
  layout.marginWidth=0;
  buttons.setLayout(layout);
  fAddButton=new Button(buttons,SWT.PUSH);
  fAddButton.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.HORIZONTAL_ALIGN_END);
  data.widthHint=Math.max(fAddButton.computeSize(-1,-1).x,60);
  fAddButton.setLayoutData(data);
  fAddButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      add();
    }
  }
);
  fEditButton=new Button(buttons,SWT.PUSH);
  fEditButton.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.HORIZONTAL_ALIGN_END);
  data.widthHint=Math.max(fEditButton.computeSize(-1,-1).x,60);
  fEditButton.setLayoutData(data);
  fEditButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      edit();
    }
  }
);
  fDeleteButton=new Button(buttons,SWT.PUSH);
  fDeleteButton.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.HORIZONTAL_ALIGN_END);
  data.widthHint=Math.max(fDeleteButton.computeSize(-1,-1).x,60);
  fDeleteButton.setLayoutData(data);
  fDeleteButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      delete();
    }
  }
);
  fMoveUpButton=new Button(buttons,SWT.ARROW);
  fMoveUpButton.setAlignment(SWT.UP);
  data=new GridData(GridData.HORIZONTAL_ALIGN_END);
  data.widthHint=40;
  data.heightHint=24;
  fMoveUpButton.setLayoutData(data);
  fMoveUpButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveUp();
    }
  }
);
  fMoveDownButton=new Button(buttons,SWT.ARROW);
  fMoveDownButton.setAlignment(SWT.DOWN);
  data=new GridData(GridData.HORIZONTAL_ALIGN_END);
  data.widthHint=40;
  data.heightHint=24;
  fMoveDownButton.setLayoutData(data);
  fMoveDownButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      moveDown();
    }
  }
);
  fTableViewer.setInput(model);
  refreshTableItemView();
  updateButtons();
  Dialog.applyDialogFont(parent);
  return innerParent;
}",0.9927344782034346
78005,"protected Control createContents(Composite ancestor){
  super.createFieldEditors();
  final Composite parent=new Composite(ancestor,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  parent.setLayout(layout);
  final Table table=new Table(parent,SWT.BORDER | SWT.FULL_SELECTION);
  GridData data=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(data);
  table.setHeaderVisible(true);
  table.setLinesVisible(false);
  TableLayout tableLayout=new TableLayout();
  table.setLayout(tableLayout);
  final TableColumn column1=new TableColumn(table,SWT.NONE);
  column1.setText(Messages.getString(""String_Node_Str""));
  final TableColumn column2=new TableColumn(table,SWT.NONE);
  column2.setText(Messages.getString(""String_Node_Str""));
  fTableViewer=new TableViewer(table);
  fTableViewer.setLabelProvider(new MapLabelProvider());
  fTableViewer.setContentProvider(new MapContentProvider());
  fTableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateButtons();
    }
  }
);
  fTableViewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      edit();
    }
  }
);
  parent.addControlListener(new ControlAdapter(){
    public void controlResized(    ControlEvent e){
      Rectangle area=parent.getClientArea();
      Point preferredSize=table.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      int width=area.width - 2 * table.getBorderWidth();
      if (preferredSize.y > area.height) {
        Point vBarSize=table.getVerticalBar().getSize();
        width-=vBarSize.x;
      }
      Point oldSize=table.getSize();
      if (oldSize.x > width) {
        column1.setWidth(width / 4);
        column2.setWidth(width - column1.getWidth());
        table.setSize(width,area.height);
      }
 else {
        table.setSize(width,area.height);
        column1.setWidth(width / 4);
        column2.setWidth(width - column1.getWidth());
      }
    }
  }
);
  Composite buttons=new Composite(parent,SWT.NONE);
  buttons.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
  layout=new GridLayout();
  layout.numColumns=6;
  layout.marginHeight=0;
  layout.marginWidth=0;
  buttons.setLayout(layout);
  fAddButton=new Button(buttons,SWT.PUSH);
  fAddButton.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=Math.max(fAddButton.computeSize(-1,-1).x,60);
  data.heightHint=24;
  fAddButton.setLayoutData(data);
  fAddButton.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      add();
    }
  }
);
  fEditButton=new Button(buttons,SWT.PUSH);
  fEditButton.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=Math.max(fEditButton.computeSize(-1,-1).x,60);
  data.heightHint=24;
  fEditButton.setLayoutData(data);
  fEditButton.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      edit();
    }
  }
);
  fDeleteButton=new Button(buttons,SWT.PUSH);
  fDeleteButton.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=Math.max(fDeleteButton.computeSize(-1,-1).x,60);
  data.heightHint=24;
  fDeleteButton.setLayoutData(data);
  fDeleteButton.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      delete();
    }
  }
);
  fMoveUpButton=new Button(buttons,SWT.ARROW);
  fMoveUpButton.setAlignment(SWT.UP);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=40;
  data.heightHint=24;
  fMoveUpButton.setLayoutData(data);
  fMoveUpButton.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      moveUp();
    }
  }
);
  fMoveDownButton=new Button(buttons,SWT.ARROW);
  fMoveDownButton.setAlignment(SWT.DOWN);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=40;
  data.heightHint=24;
  fMoveDownButton.setLayoutData(data);
  fMoveDownButton.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      moveDown();
    }
  }
);
  fTableViewer.setInput(model);
  updateButtons();
  Dialog.applyDialogFont(parent);
  return parent;
}","protected Control createContents(Composite ancestor){
  super.createFieldEditors();
  final Composite parent=new Composite(ancestor,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=0;
  layout.marginWidth=0;
  parent.setLayout(layout);
  final Table table=new Table(parent,SWT.BORDER | SWT.FULL_SELECTION);
  GridData data=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(data);
  table.setHeaderVisible(true);
  table.setLinesVisible(false);
  TableLayout tableLayout=new TableLayout();
  table.setLayout(tableLayout);
  final TableColumn column1=new TableColumn(table,SWT.NONE);
  column1.setText(Messages.getString(""String_Node_Str""));
  final TableColumn column2=new TableColumn(table,SWT.NONE);
  column2.setText(Messages.getString(""String_Node_Str""));
  fTableViewer=new TableViewer(table);
  fTableViewer.setLabelProvider(new MapLabelProvider());
  fTableViewer.setContentProvider(new MapContentProvider());
  fTableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateButtons();
    }
  }
);
  fTableViewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      edit();
    }
  }
);
  parent.addControlListener(new ControlAdapter(){
    public void controlResized(    ControlEvent e){
      Rectangle area=parent.getClientArea();
      Point preferredSize=table.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      int width=area.width - 2 * table.getBorderWidth();
      if (preferredSize.y > area.height) {
        Point vBarSize=table.getVerticalBar().getSize();
        width-=vBarSize.x;
      }
      Point oldSize=table.getSize();
      if (oldSize.x > width) {
        column1.setWidth(width / 4);
        column2.setWidth(width - column1.getWidth());
        table.setSize(width,area.height);
      }
 else {
        table.setSize(width,area.height);
        column1.setWidth(width / 4);
        column2.setWidth(width - column1.getWidth());
      }
    }
  }
);
  Composite buttons=new Composite(parent,SWT.NONE);
  buttons.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
  layout=new GridLayout();
  layout.numColumns=6;
  layout.marginHeight=0;
  layout.marginWidth=0;
  buttons.setLayout(layout);
  fAddButton=new Button(buttons,SWT.PUSH);
  fAddButton.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=Math.max(fAddButton.computeSize(-1,-1).x,60);
  fAddButton.setLayoutData(data);
  fAddButton.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      add();
    }
  }
);
  fEditButton=new Button(buttons,SWT.PUSH);
  fEditButton.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=Math.max(fEditButton.computeSize(-1,-1).x,60);
  fEditButton.setLayoutData(data);
  fEditButton.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      edit();
    }
  }
);
  fDeleteButton=new Button(buttons,SWT.PUSH);
  fDeleteButton.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=Math.max(fDeleteButton.computeSize(-1,-1).x,60);
  fDeleteButton.setLayoutData(data);
  fDeleteButton.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      delete();
    }
  }
);
  fMoveUpButton=new Button(buttons,SWT.ARROW);
  fMoveUpButton.setAlignment(SWT.UP);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=40;
  data.heightHint=24;
  fMoveUpButton.setLayoutData(data);
  fMoveUpButton.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      moveUp();
    }
  }
);
  fMoveDownButton=new Button(buttons,SWT.ARROW);
  fMoveDownButton.setAlignment(SWT.DOWN);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=40;
  data.heightHint=24;
  fMoveDownButton.setLayoutData(data);
  fMoveDownButton.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      moveDown();
    }
  }
);
  fTableViewer.setInput(model);
  updateButtons();
  Dialog.applyDialogFont(parent);
  return parent;
}",0.992271662763466
78006,"/** 
 * Create web viewer url to run the report.
 * @param servletName servlet name to viewer report
 * @param report report file name
 * @param format report format
 * @return valid web viewer url
 */
private static String createURL(String servletName,String report,String format,boolean inDesigner){
  String encodedReportName=null;
  try {
    encodedReportName=URLEncoder.encode(report,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
  }
  String locale=ViewerPlugin.getDefault().getPluginPreferences().getString(USER_LOCALE);
  String svgFlag=ViewerPlugin.getDefault().getPluginPreferences().getString(SVG_FLAG);
  boolean bSVGFlag=false;
  boolean rtl=false;
  String eclipseCommands=System.getProperty(""String_Node_Str"");
  if (eclipseCommands != null) {
    String[] options=eclipseCommands.split(""String_Node_Str"");
    String regex=""String_Node_Str"";
    Pattern pattern=Pattern.compile(regex);
    for (int i=0; i < options.length; i++) {
      String option=options[i];
      if (pattern.matcher(option).matches()) {
        rtl=true;
        break;
      }
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(svgFlag)) {
    bSVGFlag=true;
  }
  String masterPageContent=ViewerPlugin.getDefault().getPluginPreferences().getString(MASTER_PAGE_CONTENT);
  boolean bMasterPageContent=true;
  if (""String_Node_Str"".equalsIgnoreCase(masterPageContent)) {
    bMasterPageContent=false;
  }
  return getBaseURL() + servletName + ""String_Node_Str""+ ""String_Node_Str""+ encodedReportName+ ""String_Node_Str""+ format+ ""String_Node_Str""+ String.valueOf(bSVGFlag)+ (LocaleTable.containsKey(locale) ? ""String_Node_Str"" + LocaleTable.get(locale) : ""String_Node_Str"")+ ""String_Node_Str""+ String.valueOf(inDesigner)+ ""String_Node_Str""+ String.valueOf(bMasterPageContent)+ ""String_Node_Str""+ String.valueOf(rtl);
}","/** 
 * Create web viewer url to run the report.
 * @param servletName servlet name to viewer report
 * @param report report file name
 * @param format report format
 * @return valid web viewer url
 */
private static String createURL(String servletName,String report,String format,boolean inDesigner){
  String encodedReportName=null;
  try {
    encodedReportName=URLEncoder.encode(report,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
  }
  String locale=ViewerPlugin.getDefault().getPluginPreferences().getString(USER_LOCALE);
  String svgFlag=ViewerPlugin.getDefault().getPluginPreferences().getString(SVG_FLAG);
  boolean bSVGFlag=false;
  String maxrows=ViewerPlugin.getDefault().getPluginPreferences().getString(PREVIEW_MAXROW);
  if (maxrows == null)   maxrows=""String_Node_Str"";
  boolean rtl=false;
  String eclipseCommands=System.getProperty(""String_Node_Str"");
  if (eclipseCommands != null) {
    String[] options=eclipseCommands.split(""String_Node_Str"");
    String regex=""String_Node_Str"";
    Pattern pattern=Pattern.compile(regex);
    for (int i=0; i < options.length; i++) {
      String option=options[i];
      if (pattern.matcher(option).matches()) {
        rtl=true;
        break;
      }
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(svgFlag)) {
    bSVGFlag=true;
  }
  String masterPageContent=ViewerPlugin.getDefault().getPluginPreferences().getString(MASTER_PAGE_CONTENT);
  boolean bMasterPageContent=true;
  if (""String_Node_Str"".equalsIgnoreCase(masterPageContent)) {
    bMasterPageContent=false;
  }
  return getBaseURL() + servletName + ""String_Node_Str""+ ""String_Node_Str""+ encodedReportName+ ""String_Node_Str""+ format+ ""String_Node_Str""+ String.valueOf(bSVGFlag)+ (LocaleTable.containsKey(locale) ? ""String_Node_Str"" + LocaleTable.get(locale) : ""String_Node_Str"")+ ""String_Node_Str""+ String.valueOf(inDesigner)+ ""String_Node_Str""+ String.valueOf(bMasterPageContent)+ ""String_Node_Str""+ String.valueOf(rtl)+ ""String_Node_Str""+ maxrows;
}",0.9547948784949046
78007,"public EmptyFigure(){
  setBackgroundColor(ReportColorConstants.greyFillColor);
}","public EmptyFigure(){
  setOpaque(true);
  setBackgroundColor(ReportColorConstants.greyFillColor);
}",0.8950276243093923
78008,"/** 
 * if parameter existed in config file, return the correct parameter name
 * @param configVarName
 * @return String
 */
private String getParameterName(String configVarName){
  String paramName=null;
  List parameters=null;
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (model != null) {
    parameters=model.getFlattenParameters();
  }
  if (parameters != null) {
    for (int i=0; i < parameters.size(); i++) {
      ScalarParameterHandle parameter=null;
      if (parameters.get(i) instanceof ScalarParameterHandle) {
        parameter=((ScalarParameterHandle)parameters.get(i));
      }
      String curName=null;
      if (parameter != null && parameter.getName() != null) {
        curName=parameter.getName() + parameter.getID();
      }
      if (curName != null && curName.equalsIgnoreCase(configVarName)) {
        paramName=parameter.getName();
        break;
      }
    }
  }
  return paramName;
}","/** 
 * if parameter existed in config file, return the correct parameter name
 * @param configVarName
 * @return String
 */
private String getParameterName(String configVarName){
  String paramName=null;
  List parameters=null;
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (model != null) {
    parameters=model.getFlattenParameters();
  }
  if (parameters != null) {
    for (int i=0; i < parameters.size(); i++) {
      ScalarParameterHandle parameter=null;
      if (parameters.get(i) instanceof ScalarParameterHandle) {
        parameter=((ScalarParameterHandle)parameters.get(i));
      }
      String curName=null;
      if (parameter != null && parameter.getName() != null) {
        curName=parameter.getName() + ""String_Node_Str"" + parameter.getID();
      }
      if (curName != null && curName.equalsIgnoreCase(configVarName)) {
        paramName=parameter.getName();
        break;
      }
    }
  }
  return paramName;
}",0.9896373056994818
78009,"/** 
 * @param g2d
 * @param f
 * @param dX
 * @param dY
 * @param sText
 * @param iAngleInDegrees
 */
private final void showRightValue(IPrimitiveRenderer ipr,Location lo,Label la,boolean bShadow){
  Graphics2D g2d=(Graphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  double dX=lo.getX(), dY=lo.getY();
  FontDefinition fd=la.getCaption().getFont();
  double dAngleInDegrees=fd.getRotation();
  if (bShadow) {
    bShadow=la.getShadowColor() != null;
  }
  Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  dY+=1;
  final ITextMetrics itm=new SVGTextMetrics(_sxs,la);
  final double dFW=itm.getFullWidth();
  final double dH=itm.getHeight();
  final double dD=itm.getDescent();
  final double dFH=itm.getFullHeight();
  double dXOffset=0, dW=0;
  final int iLC=itm.getLineCount();
  final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
  SVGTextLayout tl;
  final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
  final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
  final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
  double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  int iRotateX=(int)dX;
  int iRotateY=(int)(dY + dH / 2);
  dY+=dH / 2;
  if (dAngleInDegrees == 0) {
    double dYHalfOffset=(dFH + dH) / 2d;
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dYHalfOffset) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dYHalfOffset) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dYHalfOffset) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dYHalfOffset + ins.getTop() + dH * (i + 1) - dD));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
  }
 else   if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
    double dDeltaX=dH * Math.sin(dAngleInRadians);
    double dDeltaY=dH * Math.cos(dAngleInRadians) - dH / 2;
    dX-=dDeltaX;
    dY+=dDeltaY;
    g2d.rotate(dAngleInRadians,iRotateX - dDeltaX,iRotateY + dDeltaY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dH) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,(dY - dH),dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD + dH * i) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,iRotateX - dDeltaX,iRotateY + dDeltaY);
  }
 else   if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
    double dDeltaY=-dH / 2;
    dY+=dDeltaY;
    g2d.rotate(dAngleInRadians,iRotateX,iRotateY + dDeltaY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dFH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dFH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dFH) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD - dH * (iLC - i - 1)) - ins.getBottom()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,iRotateX,iRotateY + dDeltaY);
  }
 else   if (dAngleInDegrees == 90) {
    double dDeltaX=dH;
    double dDeltaY=(dFW - dH) / 2;
    dX+=dDeltaX;
    dY+=dDeltaY;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dH) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD + dH * i) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees == -90) {
    double dDeltaX=0;
    double dDeltaY=(dFW + dH) / 2;
    dX+=dDeltaX;
    dY-=dDeltaY;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dH) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD + dH * i) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
  itm.dispose();
}","/** 
 * @param g2d
 * @param f
 * @param dX
 * @param dY
 * @param sText
 * @param iAngleInDegrees
 */
private final void showRightValue(IPrimitiveRenderer ipr,Location lo,Label la,boolean bShadow){
  SVGGraphics2D g2d=(SVGGraphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  double dX=lo.getX(), dY=lo.getY();
  FontDefinition fd=la.getCaption().getFont();
  double dAngleInDegrees=fd.getRotation();
  if (bShadow) {
    bShadow=la.getShadowColor() != null;
  }
  Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  dY+=1;
  final ITextMetrics itm=new SVGTextMetrics(_sxs,la);
  final double dFW=itm.getFullWidth();
  final double dH=itm.getHeight();
  final double dD=itm.getDescent();
  final double dFH=itm.getFullHeight();
  double dXOffset=0, dW=0;
  final int iLC=itm.getLineCount();
  final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
  SVGTextLayout tl;
  final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
  final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
  final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
  double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  int iRotateX=(int)dX;
  int iRotateY=(int)(dY + dH / 2);
  dY+=dH / 2;
  if (dAngleInDegrees == 0) {
    double dYHalfOffset=(dFH + dH) / 2d;
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dYHalfOffset) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dYHalfOffset) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dYHalfOffset) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dYHalfOffset + ins.getTop() + dH * (i + 1) - dD));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
  }
 else   if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
    double dDeltaX=dH * Math.sin(dAngleInRadians);
    double dDeltaY=dH * Math.cos(dAngleInRadians) - dH / 2;
    dX-=dDeltaX;
    dY+=dDeltaY;
    g2d.rotate(dAngleInRadians,iRotateX - dDeltaX,iRotateY + dDeltaY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dH) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,(dY - dH),dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD + dH * i) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,iRotateX - dDeltaX,iRotateY + dDeltaY);
  }
 else   if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
    double dDeltaY=-dH / 2;
    dY+=dDeltaY;
    g2d.rotate(dAngleInRadians,iRotateX,iRotateY + dDeltaY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dFH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dFH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dFH) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD - dH * (iLC - i - 1)) - ins.getBottom()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,iRotateX,iRotateY + dDeltaY);
  }
 else   if (dAngleInDegrees == 90) {
    double dDeltaX=dH;
    double dDeltaY=(dFW - dH) / 2;
    dX+=dDeltaX;
    dY+=dDeltaY;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dH) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD + dH * i) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees == -90) {
    double dDeltaX=0;
    double dDeltaY=(dFW + dH) / 2;
    dX+=dDeltaX;
    dY-=dDeltaY;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dH) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD + dH * i) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
  itm.dispose();
}",0.9977497187148392
78010,"/** 
 * @param g2d
 * @param f
 * @param dX
 * @param dY
 * @param sText
 * @param iAngleInDegrees
 */
private final void showTopValue(IPrimitiveRenderer ipr,Location lo,Label la,boolean bShadow){
  final Graphics2D g2d=(Graphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  double dX=lo.getX(), dY=lo.getY();
  final FontDefinition fd=la.getCaption().getFont();
  final double dAngleInDegrees=fd.getRotation();
  final Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final ITextMetrics itm=new SVGTextMetrics(_sxs,la);
  final double dFW=itm.getFullWidth();
  final double dH=itm.getHeight();
  final double dD=itm.getDescent();
  final double dFH=itm.getFullHeight();
  double dXOffset=0, dW=0;
  final int iLC=itm.getLineCount();
  final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
  SVGTextLayout tl;
  final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
  final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
  final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
  dX-=dFW / 2;
  if (dAngleInDegrees == 0) {
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dFH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dFH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dFH) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,(dY - dFH),dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=((SVGTextMetrics)itm).getLayout(iLC - i - 1);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD - dH * i - ins.getBottom()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
  }
 else   if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
    double dDeltaX=dFW / 2;
    dX+=dDeltaX;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dFH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dFH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dFH) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,(dY - dFH),dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=new SVGTextLayout(itm.getLine(iLC - i - 1),g2d.getFont().getAttributes(),g2d.getFontRenderContext());
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD - dH * i - ins.getBottom()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
    double dCosTheta=Math.abs(Math.cos(dAngleInRadians));
    double dSineTheta=Math.abs(Math.sin(dAngleInRadians));
    dX-=dFW / 2 - (dFW - dFW * dCosTheta);
    dY-=dFW * dSineTheta;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dFH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dFH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dFH) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=((SVGTextMetrics)itm).getLayout(iLC - i - 1);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD - dH * i - ins.getBottom()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees == 90) {
    double dYHalfOffset=(dFH + dH) / 2.0;
    double dDeltaX=(dFW + dH) / 2;
    dX+=dDeltaX;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dYHalfOffset) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dYHalfOffset) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dYHalfOffset) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - ((itm.getLineCount() - i) * dH - (iLC + 1) * dH / 2)) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees == -90) {
    double dYHalfOffset=(dFH + dH) / 2.0;
    double dDeltaX=(dFW - dH) / 2;
    double dDeltaY=dFW;
    dX+=dDeltaX;
    dY-=dDeltaY;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dYHalfOffset) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dYHalfOffset) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dYHalfOffset) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - ((itm.getLineCount() - i) * dH - (iLC + 1) * dH / 2)) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
  itm.dispose();
}","/** 
 * @param g2d
 * @param f
 * @param dX
 * @param dY
 * @param sText
 * @param iAngleInDegrees
 */
private final void showTopValue(IPrimitiveRenderer ipr,Location lo,Label la,boolean bShadow){
  final SVGGraphics2D g2d=(SVGGraphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  double dX=lo.getX(), dY=lo.getY();
  final FontDefinition fd=la.getCaption().getFont();
  final double dAngleInDegrees=fd.getRotation();
  final Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final ITextMetrics itm=new SVGTextMetrics(_sxs,la);
  final double dFW=itm.getFullWidth();
  final double dH=itm.getHeight();
  final double dD=itm.getDescent();
  final double dFH=itm.getFullHeight();
  double dXOffset=0, dW=0;
  final int iLC=itm.getLineCount();
  final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
  SVGTextLayout tl;
  final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
  final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
  final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
  dX-=dFW / 2;
  if (dAngleInDegrees == 0) {
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dFH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dFH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dFH) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,(dY - dFH),dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=((SVGTextMetrics)itm).getLayout(iLC - i - 1);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD - dH * i - ins.getBottom()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
  }
 else   if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
    double dDeltaX=dFW / 2;
    dX+=dDeltaX;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dFH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dFH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dFH) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,(dY - dFH),dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=new SVGTextLayout(itm.getLine(iLC - i - 1),g2d.getFont().getAttributes(),g2d.getFontRenderContext());
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD - dH * i - ins.getBottom()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
    double dCosTheta=Math.abs(Math.cos(dAngleInRadians));
    double dSineTheta=Math.abs(Math.sin(dAngleInRadians));
    dX-=dFW / 2 - (dFW - dFW * dCosTheta);
    dY-=dFW * dSineTheta;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dFH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dFH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dFH) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=((SVGTextMetrics)itm).getLayout(iLC - i - 1);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD - dH * i - ins.getBottom()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees == 90) {
    double dYHalfOffset=(dFH + dH) / 2.0;
    double dDeltaX=(dFW + dH) / 2;
    dX+=dDeltaX;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dYHalfOffset) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dYHalfOffset) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dYHalfOffset) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - ((itm.getLineCount() - i) * dH - (iLC + 1) * dH / 2)) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees == -90) {
    double dYHalfOffset=(dFH + dH) / 2.0;
    double dDeltaX=(dFW - dH) / 2;
    double dDeltaY=dFW;
    dX+=dDeltaX;
    dY-=dDeltaY;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dYHalfOffset) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dYHalfOffset) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dYHalfOffset) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - ((itm.getLineCount() - i) * dH - (iLC + 1) * dH / 2)) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
  itm.dispose();
}",0.997779422649889
78011,"/** 
 * @param g2d
 * @param f
 * @param dX
 * @param dY
 * @param sText
 * @param iAngleInDegrees
 */
private final void showBottomValue(IPrimitiveRenderer ipr,Location lo,Label la,boolean bShadow){
  Graphics2D g2d=(Graphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  double dX=lo.getX(), dY=lo.getY();
  FontDefinition fd=la.getCaption().getFont();
  double dAngleInDegrees=fd.getRotation();
  Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final ITextMetrics itm=new SVGTextMetrics(_sxs,la);
  final double dFW=itm.getFullWidth();
  final double dH=itm.getHeight();
  final double dD=itm.getDescent();
  final double dFH=itm.getFullHeight();
  double dXOffset=0, dW=0;
  final int iLC=itm.getLineCount();
  final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
  SVGTextLayout tl;
  final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
  final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
  final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
  dX-=dFW / 2;
  dY+=dH;
  if (dAngleInDegrees == 0) {
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dH) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD + dH * i + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
  }
 else   if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
    double dSineTheta=Math.abs(Math.sin(dAngleInRadians));
    double dCosTheta=Math.abs(Math.cos(dAngleInRadians));
    double dDeltaX=dFW * dCosTheta - dH * dSineTheta - dFW / 2.0;
    double dDeltaY=dH * dCosTheta + dFW * dSineTheta - dH;
    dX-=dDeltaX;
    dY+=dDeltaY;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dH) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD + dH * i + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
    dX+=dFW / 2;
    g2d.rotate(dAngleInRadians,dX,dY - dH);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dH) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD + dH * i + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY - dH);
  }
 else   if (dAngleInDegrees == 90) {
    double dYHalfOffset=(dFH + dH) / 2.0;
    double dDeltaX=(dFW + dH) / 2;
    double dDeltaY=(dFW - dH);
    dX+=dDeltaX;
    dY+=dDeltaY;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dYHalfOffset) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dYHalfOffset) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dYHalfOffset) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - ((iLC - i) * dH - (iLC + 1) * dH / 2)) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees == -90) {
    dX+=dFW / 2;
    dY-=dH;
    double dYHalfOffset=(dFH + dH) / 2d;
    double dDeltaX=dYHalfOffset - dFH / 2d;
    dX-=dDeltaX;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dYHalfOffset) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dYHalfOffset) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dYHalfOffset) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD) - dYHalfOffset + dH * (i + 1) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
  itm.dispose();
}","/** 
 * @param g2d
 * @param f
 * @param dX
 * @param dY
 * @param sText
 * @param iAngleInDegrees
 */
private final void showBottomValue(IPrimitiveRenderer ipr,Location lo,Label la,boolean bShadow){
  SVGGraphics2D g2d=(SVGGraphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  double dX=lo.getX(), dY=lo.getY();
  FontDefinition fd=la.getCaption().getFont();
  double dAngleInDegrees=fd.getRotation();
  Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final ITextMetrics itm=new SVGTextMetrics(_sxs,la);
  final double dFW=itm.getFullWidth();
  final double dH=itm.getHeight();
  final double dD=itm.getDescent();
  final double dFH=itm.getFullHeight();
  double dXOffset=0, dW=0;
  final int iLC=itm.getLineCount();
  final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
  SVGTextLayout tl;
  final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
  final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
  final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
  dX-=dFW / 2;
  dY+=dH;
  if (dAngleInDegrees == 0) {
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dH) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD + dH * i + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
  }
 else   if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
    double dSineTheta=Math.abs(Math.sin(dAngleInRadians));
    double dCosTheta=Math.abs(Math.cos(dAngleInRadians));
    double dDeltaX=dFW * dCosTheta - dH * dSineTheta - dFW / 2.0;
    double dDeltaY=dH * dCosTheta + dFW * dSineTheta - dH;
    dX-=dDeltaX;
    dY+=dDeltaY;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dH) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD + dH * i + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
    dX+=dFW / 2;
    g2d.rotate(dAngleInRadians,dX,dY - dH);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dH) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dD + dH * i + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY - dH);
  }
 else   if (dAngleInDegrees == 90) {
    double dYHalfOffset=(dFH + dH) / 2.0;
    double dDeltaX=(dFW + dH) / 2;
    double dDeltaY=(dFW - dH);
    dX+=dDeltaX;
    dY+=dDeltaY;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dYHalfOffset) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dYHalfOffset) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dYHalfOffset) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - ((iLC - i) * dH - (iLC + 1) * dH / 2)) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees == -90) {
    dX+=dFW / 2;
    dY-=dH;
    double dYHalfOffset=(dFH + dH) / 2d;
    double dDeltaX=dYHalfOffset - dFH / 2d;
    dX-=dDeltaX;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dYHalfOffset) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dYHalfOffset) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dYHalfOffset) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)((dY - dD) - dYHalfOffset + dH * (i + 1) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
  itm.dispose();
}",0.9977452085682076
78012,"/** 
 * @param g2d
 * @param dX
 * @param dY
 * @param sText
 * @param dAngleInDegrees
 */
private final void showLeftValue(IPrimitiveRenderer ipr,Location lo,Label la,boolean bShadow){
  Graphics2D g2d=(Graphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  double dX=lo.getX(), dY=lo.getY();
  FontDefinition fd=la.getCaption().getFont();
  double dAngleInDegrees=fd.getRotation();
  if (bShadow) {
    bShadow=la.getShadowColor() != null;
  }
  Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final double dSineTheta=(Math.sin(dAngleInRadians));
  final double dCosTheta=(Math.cos(dAngleInRadians));
  final ITextMetrics itm=new SVGTextMetrics(_sxs,la);
  final double dFW=itm.getFullWidth();
  final double dH=itm.getHeight();
  final double dD=itm.getDescent();
  final double dFH=itm.getFullHeight();
  double dXOffset=0, dW=0;
  final int iLC=itm.getLineCount();
  final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
  SVGTextLayout tl;
  final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
  final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
  final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
  double dRotateX=(dX - dFW);
  double dRotateY=(dY + dH / 2);
  dX-=dFW;
  dY+=dH / 2;
  if (dAngleInDegrees == 0) {
    double dYHalfOffset=(dFH + dH) / 2d;
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dYHalfOffset) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dYHalfOffset) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dYHalfOffset) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dYHalfOffset + ins.getTop() + dH * (i + 1) - dD));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
  }
 else   if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
    double dDeltaX=dFW - dFW * dCosTheta;
    double dDeltaY=dFW * dSineTheta + dH / 2;
    dX+=dDeltaX;
    dY-=dDeltaY;
    g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dFH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dFH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dFH) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=((SVGTextMetrics)itm).getLayout(iLC - i - 1);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - (dH * i)) - ins.getBottom()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
  }
 else   if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
    double dDeltaX=dFW - dFW * dCosTheta - dH * dSineTheta;
    double dDeltaY=dFW * dSineTheta + dH / 2 - dH * dCosTheta;
    dX+=dDeltaX;
    dY-=dDeltaY;
    g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dH) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) + (dH * i)) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
  }
 else   if (dAngleInDegrees == 90) {
    double dDeltaX=dFW;
    double dDeltaY=(dFW - dH) / 2;
    dX+=dDeltaX;
    dY+=dDeltaY;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dFH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dFH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dFH) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - (dH * (iLC - i - 1))) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees == -90) {
    double dDeltaX=dFW - dH;
    double dDeltaY=(dFW + dH) / 2;
    dX+=dDeltaX;
    dY-=dDeltaY;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dFH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dFH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dFH) + 3,dFW,dFH));
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) + (dH * i)) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
  itm.dispose();
}","/** 
 * @param g2d
 * @param dX
 * @param dY
 * @param sText
 * @param dAngleInDegrees
 */
private final void showLeftValue(IPrimitiveRenderer ipr,Location lo,Label la,boolean bShadow){
  SVGGraphics2D g2d=(SVGGraphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
  double dX=lo.getX(), dY=lo.getY();
  FontDefinition fd=la.getCaption().getFont();
  double dAngleInDegrees=fd.getRotation();
  if (bShadow) {
    bShadow=la.getShadowColor() != null;
  }
  Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  Color clrBackground=null;
  if (la.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
  }
  final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final double dSineTheta=(Math.sin(dAngleInRadians));
  final double dCosTheta=(Math.cos(dAngleInRadians));
  final ITextMetrics itm=new SVGTextMetrics(_sxs,la);
  final double dFW=itm.getFullWidth();
  final double dH=itm.getHeight();
  final double dD=itm.getDescent();
  final double dFH=itm.getFullHeight();
  double dXOffset=0, dW=0;
  final int iLC=itm.getLineCount();
  final Insets ins=la.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
  SVGTextLayout tl;
  final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
  final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
  final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
  double dRotateX=(dX - dFW);
  double dRotateY=(dY + dH / 2);
  dX-=dFW;
  dY+=dH / 2;
  if (dAngleInDegrees == 0) {
    double dYHalfOffset=(dFH + dH) / 2d;
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dYHalfOffset) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dYHalfOffset) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dYHalfOffset) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(dY - dYHalfOffset + ins.getTop() + dH * (i + 1) - dD));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
  }
 else   if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
    double dDeltaX=dFW - dFW * dCosTheta;
    double dDeltaY=dFW * dSineTheta + dH / 2;
    dX+=dDeltaX;
    dY-=dDeltaY;
    g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dFH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dFH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dFH) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < itm.getLineCount(); i++) {
        tl=((SVGTextMetrics)itm).getLayout(iLC - i - 1);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - (dH * i)) - ins.getBottom()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
  }
 else   if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
    double dDeltaX=dFW - dFW * dCosTheta - dH * dSineTheta;
    double dDeltaY=dFW * dSineTheta + dH / 2 - dH * dCosTheta;
    dX+=dDeltaX;
    dY-=dDeltaY;
    g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dH) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) + (dH * i)) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
  }
 else   if (dAngleInDegrees == 90) {
    double dDeltaX=dFW;
    double dDeltaY=(dFW - dH) / 2;
    dX+=dDeltaX;
    dY+=dDeltaY;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dFH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dFH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dFH) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) - (dH * (iLC - i - 1))) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
 else   if (dAngleInDegrees == -90) {
    double dDeltaX=dFW - dH;
    double dDeltaY=(dFW + dH) / 2;
    dX+=dDeltaX;
    dY-=dDeltaY;
    g2d.rotate(dAngleInRadians,dX,dY);
    if (bShadow) {
      g2d.setPaint(new GradientPaint(new Point2D.Double(dX + 3,(dY - dFH) + 3),(Color)_sxs.getColor(la.getShadowColor()),new Point2D.Double(dX + 3 + dFW,(dY - dFH) + 3 + dFH),(Color)_sxs.getColor(la.getShadowColor().translucent())));
      g2d.fill(new Rectangle2D.Double(dX + 3,(dY - dFH) + 3,dFW,dFH),false);
    }
 else {
      final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dH,dFW,dFH);
      if (clrBackground != null) {
        g2d.setColor(clrBackground);
        g2d.fill(r2d);
      }
      g2d.setColor(clrText);
      for (int i=0; i < iLC; i++) {
        tl=((SVGTextMetrics)itm).getLayout(i);
        if (bRightAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
        }
 else         if (bCenterAligned) {
          dW=tl.getBounds().getWidth();
          dXOffset=-ins.getLeft() + (dFW - dW) / 2;
        }
        tl.draw(g2d,(float)(dX + dXOffset + ins.getLeft()),(float)(((dY - dD) + (dH * i)) + ins.getTop()));
      }
      renderOutline(ipr,la.getOutline(),r2d);
    }
    g2d.rotate(-dAngleInRadians,dX,dY);
  }
  itm.dispose();
}",0.9978234582829504
78013,"/** 
 * Clears values of all properties. Clearing a property removes any value set for the property on this element. After this, the element will now inherit the property from its parent element, style, or from the default value for the property.
 * @throws SemanticException if the property is not defined on this element
 */
public void clearAllProperties() throws SemanticException {
  List props=getDefn().getProperties();
  for (int i=0; i < props.size(); i++) {
    PropertyDefn propDefn=(PropertyDefn)props.get(i);
    setProperty(propDefn.getName(),null);
  }
}","/** 
 * Clears values of all properties. Clearing a property removes any value set for the property on this element. After this, the element will now inherit the property from its parent element, style, or from the default value for the property.
 * @throws SemanticException if the property is not defined on this element
 */
public void clearAllProperties() throws SemanticException {
  List props=getDefn().getProperties();
  for (int i=0; i < props.size(); i++) {
    PropertyDefn propDefn=(PropertyDefn)props.get(i);
    String propName=propDefn.getName();
    if ((DesignElement.NAME_PROP.equals(propName))) {
      NameCommand nameCmd=new NameCommand(module,getElement());
      try {
        nameCmd.checkName(null);
      }
 catch (      NameException e) {
        continue;
      }
    }
    PropertyHandle propHandle=getPropertyHandle(propName);
    if (propHandle.isLocal())     propHandle.clearValue();
  }
}",0.7342281879194631
78014,"public void clearLocalProperties() throws SemanticException {
  ActivityStack stack=module.getActivityStack();
  stack.startTrans();
  try {
    Iterator iter=propertyIterator();
    while (iter.hasNext()) {
      GroupPropertyHandle propHandle=(GroupPropertyHandle)iter.next();
      String propName=propHandle.getPropertyDefn().getName();
      if (DesignElement.EXTENDS_PROP.equals(propName)) {
        continue;
      }
      propHandle.clearValue();
    }
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}","public void clearLocalProperties() throws SemanticException {
  ActivityStack stack=module.getActivityStack();
  stack.startTrans();
  try {
    Iterator iter=propertyIterator();
    while (iter.hasNext()) {
      GroupPropertyHandle propHandle=(GroupPropertyHandle)iter.next();
      String propName=propHandle.getPropertyDefn().getName();
      if (DesignElement.EXTENDS_PROP.equals(propName)) {
        continue;
      }
      if (DesignElement.NAME_PROP.equals(propName)) {
        for (Iterator elementIter=elements.iterator(); elementIter.hasNext(); ) {
          DesignElementHandle handle=(DesignElementHandle)elementIter.next();
          NameCommand nameCmd=new NameCommand(module,handle.getElement());
          try {
            nameCmd.checkName(null);
          }
 catch (          NameException e) {
            continue;
          }
          PropertyHandle tmpPropHandle=handle.getPropertyHandle(propName);
          if (tmpPropHandle.isLocal())           propHandle.clearValue();
        }
      }
 else {
        String localValue=propHandle.getLocalStringValue();
        if (localValue != null) {
          propHandle.clearValue();
        }
      }
    }
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}",0.574398249452954
78015,"/** 
 * Checks the current element name. Done when adding a newly created element where the element name is already set on the new element.
 * @param name the name to check.
 * @throws NameException if the element name is not allowed to change.
 */
private void checkName(String name) throws NameException {
  ElementDefn metaData=(ElementDefn)element.getDefn();
  if (name == null) {
    if (element.hasDerived() || element.hasReferences())     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_HAS_REFERENCES);
    if (metaData.getNameOption() == MetaDataConstants.REQUIRED_NAME)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_REQUIRED);
  }
 else {
    if (!isNameValidInContext(name))     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_DUPLICATE);
    if (metaData.getNameOption() == MetaDataConstants.NO_NAME)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_FORBIDDEN);
    if (name.indexOf(ReferenceValue.NAMESPACE_DELIMITER) != -1) {
      throw new NameException(element,name,NameException.DESIGN_EXCEPTION_DOT_FORBIDDEN);
    }
    if (!element.isManagedByNameSpace()) {
      return;
    }
    int ns=metaData.getNameSpaceID();
    DesignElement existedElement=getModule().getNameSpace(ns).getElement(name);
    if (existedElement != null)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_DUPLICATE);
  }
}","/** 
 * Checks the current element name. Done when adding a newly created element where the element name is already set on the new element.
 * @param name the name to check.
 * @throws NameException if the element name is not allowed to change.
 */
public void checkName(String name) throws NameException {
  ElementDefn metaData=(ElementDefn)element.getDefn();
  if (name == null) {
    if (element.hasDerived() || element.hasReferences())     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_HAS_REFERENCES);
    if (metaData.getNameOption() == MetaDataConstants.REQUIRED_NAME)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_REQUIRED);
    if ((module instanceof Library) && (element.getContainer() instanceof Library)) {
      throw new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_REQUIRED);
    }
  }
 else {
    if (!isNameValidInContext(name))     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_DUPLICATE);
    if (metaData.getNameOption() == MetaDataConstants.NO_NAME)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_FORBIDDEN);
    if (name.indexOf(ReferenceValue.NAMESPACE_DELIMITER) != -1) {
      throw new NameException(element,name,NameException.DESIGN_EXCEPTION_DOT_FORBIDDEN);
    }
    if (!element.isManagedByNameSpace()) {
      return;
    }
    int ns=metaData.getNameSpaceID();
    DesignElement existedElement=getModule().getNameSpace(ns).getElement(name);
    if (existedElement != null)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_DUPLICATE);
  }
}",0.9368248772504092
78016,"private void createDefaultEditor(){
  createLabel(valueArea,LABEL_DEFAULT_VALUE,maxStrLengthProperty);
  defaultValueEditor=new Text(valueArea,SWT.BORDER);
  defaultValueEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  defaultValueEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      defaultValue=UIUtil.convertToModelString(defaultValueEditor.getText(),false);
      if (isStatic()) {
        refreshValueTable();
      }
      updateFormatField();
      updateMessageLine();
    }
  }
);
}","private void createDefaultEditor(){
  createLabel(valueArea,LABEL_DEFAULT_VALUE);
  defaultValueEditor=new Text(valueArea,SWT.BORDER);
  defaultValueEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  defaultValueEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      defaultValue=UIUtil.convertToModelString(defaultValueEditor.getText(),false);
      if (isStatic()) {
        refreshValueTable();
      }
      updateFormatField();
      updateMessageLine();
    }
  }
);
}",0.9806451612903224
78017,"private void createMoreOptionSection(Composite composite){
  Group moreOptionSection=new Group(composite,SWT.NONE);
  moreOptionSection.setText(GROUP_MORE_OPTION);
  moreOptionSection.setLayout(new GridLayout(2,false));
  moreOptionSection.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(moreOptionSection,LABEL_HELP_TEXT,maxStrLengthOption);
  helpTextEditor=new Text(moreOptionSection,SWT.BORDER);
  helpTextEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(moreOptionSection,LABEL_FORMAT,maxStrLengthOption);
  Composite formatSection=new Composite(moreOptionSection,SWT.NONE);
  formatSection.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  formatSection.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  formatField=new Text(formatSection,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY);
  formatField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  changeFormat=new Button(formatSection,SWT.PUSH);
  changeFormat.setText(BUTTON_LABEL_CHANGE_FORMAT);
  setButtonLayoutData(changeFormat);
  changeFormat.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      popupFormatBuilder(true);
    }
  }
);
  createLabel(moreOptionSection,null,maxStrLengthOption);
  Group previewArea=new Group(moreOptionSection,SWT.NONE);
  previewArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  previewArea.setLayout(UIUtil.createGridLayoutWithoutMargin());
  previewArea.setText(LABEL_PREVIEW);
  previewLabel=new Label(previewArea,SWT.NONE);
  previewLabel.setAlignment(SWT.CENTER);
  previewLabel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(moreOptionSection,LABEL_LIST_LIMIT,maxStrLengthOption);
  Composite limitArea=new Composite(moreOptionSection,SWT.NULL);
  GridLayout layout=new GridLayout(2,false);
  layout.marginWidth=0;
  layout.marginHeight=0;
  limitArea.setLayout(layout);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.verticalSpan=1;
  limitArea.setLayoutData(data);
  listLimit=new Text(limitArea,SWT.BORDER);
  data=new GridData();
  data.widthHint=80;
  listLimit.setLayoutData(data);
  listLimit.addVerifyListener(new VerifyListener(){
    public void verifyText(    VerifyEvent e){
      e.doit=(""String_Node_Str"".indexOf(e.character) != -1);
    }
  }
);
  Label values=new Label(limitArea,SWT.NULL);
  values.setText(Messages.getString(""String_Node_Str""));
  values.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(moreOptionSection,null,maxStrLengthProperty);
  Composite checkBoxArea=new Composite(moreOptionSection,SWT.NONE);
  checkBoxArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  checkBoxArea.setLayoutData(new GridData(GridData.FILL_BOTH));
  allowNull=new Button(checkBoxArea,SWT.CHECK);
  allowNull.setText(CHECKBOX_ALLOW_NULL);
  addCheckBoxListener(allowNull,CHECKBOX_ALLOW_NULL);
  allowBlank=new Button(checkBoxArea,SWT.CHECK);
  allowBlank.setText(CHECKBOX_ALLOW_BLANK);
  addCheckBoxListener(allowBlank,CHECKBOX_ALLOW_BLANK);
  doNotEcho=new Button(checkBoxArea,SWT.CHECK);
  doNotEcho.setText(CHECKBOX_DO_NOT_ECHO);
  addCheckBoxListener(doNotEcho,CHECKBOX_DO_NOT_ECHO);
  isHidden=new Button(checkBoxArea,SWT.CHECK);
  isHidden.setText(CHECKBOX_HIDDEN);
  addCheckBoxListener(isHidden,CHECKBOX_HIDDEN);
  needSort=new Button(checkBoxArea,SWT.CHECK);
  needSort.setText(CHECKBOX_SORT);
  addCheckBoxListener(needSort,CHECKBOX_SORT);
}","private void createMoreOptionSection(Composite composite){
  Group moreOptionSection=new Group(composite,SWT.NONE);
  moreOptionSection.setText(GROUP_MORE_OPTION);
  moreOptionSection.setLayout(new GridLayout(2,false));
  moreOptionSection.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(moreOptionSection,LABEL_HELP_TEXT);
  helpTextEditor=new Text(moreOptionSection,SWT.BORDER);
  helpTextEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(moreOptionSection,LABEL_FORMAT);
  Composite formatSection=new Composite(moreOptionSection,SWT.NONE);
  formatSection.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  formatSection.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  formatField=new Text(formatSection,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY);
  formatField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  changeFormat=new Button(formatSection,SWT.PUSH);
  changeFormat.setText(BUTTON_LABEL_CHANGE_FORMAT);
  setButtonLayoutData(changeFormat);
  changeFormat.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      popupFormatBuilder(true);
    }
  }
);
  createLabel(moreOptionSection,null);
  Group previewArea=new Group(moreOptionSection,SWT.NONE);
  previewArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  previewArea.setLayout(UIUtil.createGridLayoutWithoutMargin());
  previewArea.setText(LABEL_PREVIEW);
  previewLabel=new Label(previewArea,SWT.NONE);
  previewLabel.setAlignment(SWT.CENTER);
  previewLabel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(moreOptionSection,LABEL_LIST_LIMIT);
  Composite limitArea=new Composite(moreOptionSection,SWT.NULL);
  GridLayout layout=new GridLayout(2,false);
  layout.marginWidth=0;
  layout.marginHeight=0;
  limitArea.setLayout(layout);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.verticalSpan=1;
  limitArea.setLayoutData(data);
  listLimit=new Text(limitArea,SWT.BORDER);
  data=new GridData();
  data.widthHint=80;
  listLimit.setLayoutData(data);
  listLimit.addVerifyListener(new VerifyListener(){
    public void verifyText(    VerifyEvent e){
      e.doit=(""String_Node_Str"".indexOf(e.character) != -1);
    }
  }
);
  Label values=new Label(limitArea,SWT.NULL);
  values.setText(Messages.getString(""String_Node_Str""));
  values.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(moreOptionSection,null);
  Composite checkBoxArea=new Composite(moreOptionSection,SWT.NONE);
  checkBoxArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  checkBoxArea.setLayoutData(new GridData(GridData.FILL_BOTH));
  allowNull=new Button(checkBoxArea,SWT.CHECK);
  allowNull.setText(CHECKBOX_ALLOW_NULL);
  addCheckBoxListener(allowNull,CHECKBOX_ALLOW_NULL);
  allowBlank=new Button(checkBoxArea,SWT.CHECK);
  allowBlank.setText(CHECKBOX_ALLOW_BLANK);
  addCheckBoxListener(allowBlank,CHECKBOX_ALLOW_BLANK);
  doNotEcho=new Button(checkBoxArea,SWT.CHECK);
  doNotEcho.setText(CHECKBOX_DO_NOT_ECHO);
  addCheckBoxListener(doNotEcho,CHECKBOX_DO_NOT_ECHO);
  isHidden=new Button(checkBoxArea,SWT.CHECK);
  isHidden.setText(CHECKBOX_HIDDEN);
  addCheckBoxListener(isHidden,CHECKBOX_HIDDEN);
  needSort=new Button(checkBoxArea,SWT.CHECK);
  needSort.setText(CHECKBOX_SORT);
  addCheckBoxListener(needSort,CHECKBOX_SORT);
}",0.9858166398596286
78018,"private void updateTableButtons(){
  boolean isEnable=true;
  SelectionChoice selectedChoice=null;
  if (valueTable.getSelection().isEmpty()) {
    isEnable=false;
  }
 else {
    selectedChoice=(SelectionChoice)((IStructuredSelection)valueTable.getSelection()).getFirstElement();
    if (selectedChoice == dummyChoice) {
      isEnable=false;
    }
  }
  boolean isDefault=isEnable && isDefaultChoice(selectedChoice);
  if (isDefault) {
    changeDefault.setText(BUTTON_LABEL_REMOVE_DEFAULT);
  }
 else {
    changeDefault.setText(BUTTON_LABEL_SET_DEFAULT);
  }
  setButtonLayoutData(changeDefault);
  changeDefault.setSelection(isDefault);
  changeDefault.setEnabled(isEnable);
  delete.setEnabled(isEnable);
}","private void updateTableButtons(){
  boolean isEnable=true;
  SelectionChoice selectedChoice=null;
  if (valueTable.getSelection().isEmpty()) {
    isEnable=false;
  }
 else {
    selectedChoice=(SelectionChoice)((IStructuredSelection)valueTable.getSelection()).getFirstElement();
    if (selectedChoice == dummyChoice) {
      isEnable=false;
    }
  }
  boolean isDefault=isEnable && isDefaultChoice(selectedChoice);
  if (isDefault) {
    changeDefault.setText(BUTTON_LABEL_REMOVE_DEFAULT);
  }
 else {
    changeDefault.setText(BUTTON_LABEL_SET_DEFAULT);
  }
  changeDefault.setSelection(isDefault);
  changeDefault.setEnabled(isEnable);
  delete.setEnabled(isEnable);
}",0.9393939393939394
78019,"private void switchToCheckBox(){
  createLabel(valueArea,LABEL_DEFAULT_VALUE,maxStrLengthProperty);
  defaultValueChooser=new Combo(valueArea,SWT.READ_ONLY | SWT.BORDER);
  defaultValueChooser.add(CHOICE_NO_DEFAULT);
  defaultValueChooser.add(BOOLEAN_TRUE);
  defaultValueChooser.add(BOOLEAN_FALSE);
  defaultValueChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  defaultValueChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
switch (defaultValueChooser.getSelectionIndex()) {
case 0:
        defaultValue=null;
      break;
case 1:
    defaultValue=Boolean.toString(true);
  break;
case 2:
defaultValue=Boolean.toString(false);
break;
}
}
}
);
}","private void switchToCheckBox(){
  createLabel(valueArea,LABEL_DEFAULT_VALUE);
  defaultValueChooser=new Combo(valueArea,SWT.READ_ONLY | SWT.BORDER);
  defaultValueChooser.add(CHOICE_NO_DEFAULT);
  defaultValueChooser.add(BOOLEAN_TRUE);
  defaultValueChooser.add(BOOLEAN_FALSE);
  defaultValueChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  defaultValueChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
switch (defaultValueChooser.getSelectionIndex()) {
case 0:
        defaultValue=null;
      break;
case 1:
    defaultValue=Boolean.toString(true);
  break;
case 2:
defaultValue=Boolean.toString(false);
break;
}
}
}
);
}",0.9851590106007068
78020,"protected Control createDialogArea(Composite parent){
  maxStrLengthProperty=getMaxStrLength(parent,PROPERTY_LABEL_STRING);
  maxStrLengthOption=getMaxStrLength(parent,OPTION_LABEL_STRING);
  Composite composite=(Composite)super.createDialogArea(parent);
  createPropertiesSection(composite);
  createMoreOptionSection(composite);
  return composite;
}","protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  createPropertiesSection(composite);
  createMoreOptionSection(composite);
  return composite;
}",0.7605633802816901
78021,"private void createPropertiesSection(Composite composite){
  Group propertiesSection=new Group(composite,SWT.NONE);
  propertiesSection.setText(GROUP_PROPERTIES);
  propertiesSection.setLayout(new GridLayout(2,false));
  propertiesSection.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(propertiesSection,LABEL_NAME,maxStrLengthProperty);
  nameEditor=new Text(propertiesSection,SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateMessageLine();
    }
  }
);
  createLabel(propertiesSection,LABEL_PROMPT_TEXT,maxStrLengthProperty);
  promptTextEditor=new Text(propertiesSection,SWT.BORDER);
  promptTextEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(propertiesSection,LABEL_PARAM_DATA_TYPE,maxStrLengthProperty);
  dataTypeChooser=new Combo(propertiesSection,SWT.READ_ONLY | SWT.DROP_DOWN);
  dataTypeChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  dataTypeChooser.setItems(ChoiceSetFactory.getDisplayNamefromChoiceSet(dataType));
  dataTypeChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      changeDataType();
      if (allowBlank != null && !allowBlank.isDisposed()) {
        if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(getSelectedDataType())) {
          allowBlank.setEnabled(true);
        }
 else {
          allowBlank.setEnabled(false);
          allowBlank.setSelection(false);
          checkBoxChange(allowBlank,CHECKBOX_ALLOW_BLANK);
        }
      }
    }
  }
);
  createLabel(propertiesSection,LABEL_DISPALY_TYPE,maxStrLengthProperty);
  controlTypeChooser=new Combo(propertiesSection,SWT.READ_ONLY | SWT.DROP_DOWN);
  controlTypeChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  controlTypeChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      changeControlType();
    }
  }
);
  createLabel(propertiesSection,LABEL_LIST_OF_VALUE,maxStrLengthProperty);
  Composite choiceArea=new Composite(propertiesSection,SWT.NONE);
  choiceArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  choiceArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,true));
  staticRadio=new Button(choiceArea,SWT.RADIO);
  staticRadio.setText(RADIO_STATIC);
  staticRadio.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      switchParamterType();
    }
  }
);
  dynamicRadio=new Button(choiceArea,SWT.RADIO);
  dynamicRadio.setText(RADIO_DYNAMIC);
  dynamicRadio.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      switchParamterType();
    }
  }
);
  valueArea=new Composite(propertiesSection,SWT.NONE);
  valueArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=150;
  gd.widthHint=550;
  gd.horizontalSpan=2;
  valueArea.setLayoutData(gd);
  createLabel(propertiesSection,null,maxStrLengthProperty);
  errorMessageLine=new CLabel(propertiesSection,SWT.NONE);
  errorMessageLine.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}","private void createPropertiesSection(Composite composite){
  Group propertiesSection=new Group(composite,SWT.NONE);
  propertiesSection.setText(GROUP_PROPERTIES);
  propertiesSection.setLayout(new GridLayout(2,false));
  propertiesSection.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(propertiesSection,LABEL_NAME);
  nameEditor=new Text(propertiesSection,SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateMessageLine();
    }
  }
);
  createLabel(propertiesSection,LABEL_PROMPT_TEXT);
  promptTextEditor=new Text(propertiesSection,SWT.BORDER);
  promptTextEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(propertiesSection,LABEL_PARAM_DATA_TYPE);
  dataTypeChooser=new Combo(propertiesSection,SWT.READ_ONLY | SWT.DROP_DOWN);
  dataTypeChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  dataTypeChooser.setItems(ChoiceSetFactory.getDisplayNamefromChoiceSet(dataType));
  dataTypeChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      changeDataType();
      if (allowBlank != null && !allowBlank.isDisposed()) {
        if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(getSelectedDataType())) {
          allowBlank.setEnabled(true);
        }
 else {
          allowBlank.setEnabled(false);
          allowBlank.setSelection(false);
          checkBoxChange(allowBlank,CHECKBOX_ALLOW_BLANK);
        }
      }
    }
  }
);
  createLabel(propertiesSection,LABEL_DISPALY_TYPE);
  controlTypeChooser=new Combo(propertiesSection,SWT.READ_ONLY | SWT.DROP_DOWN);
  controlTypeChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  controlTypeChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      changeControlType();
    }
  }
);
  createLabel(propertiesSection,LABEL_LIST_OF_VALUE);
  Composite choiceArea=new Composite(propertiesSection,SWT.NONE);
  choiceArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  choiceArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,true));
  staticRadio=new Button(choiceArea,SWT.RADIO);
  staticRadio.setText(RADIO_STATIC);
  staticRadio.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      switchParamterType();
    }
  }
);
  dynamicRadio=new Button(choiceArea,SWT.RADIO);
  dynamicRadio.setText(RADIO_DYNAMIC);
  dynamicRadio.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      switchParamterType();
    }
  }
);
  valueArea=new Composite(propertiesSection,SWT.NONE);
  valueArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=150;
  gd.widthHint=550;
  gd.horizontalSpan=2;
  valueArea.setLayoutData(gd);
  createLabel(propertiesSection,null);
  errorMessageLine=new CLabel(propertiesSection,SWT.NONE);
  errorMessageLine.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}",0.9803432137285492
78022,"private void switchToDynamic(){
  Composite composite=new Composite(valueArea,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  composite.setLayoutData(gd);
  composite.setLayout(UIUtil.createGridLayoutWithoutMargin(3,false));
  createLabel(composite,LABEL_SELECT_DATA_SET,maxStrLengthProperty);
  dataSetChooser=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  dataSetChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  dataSetChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      refreshColumns(false);
    }
  }
);
  createDataSet=new Button(composite,SWT.PUSH);
  createDataSet.setText(BUTTON_CREATE_DATA_SET);
  setButtonLayoutData(createDataSet);
  createDataSet.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      new NewDataSetAction().run();
      refreshDataSets();
    }
  }
);
  createLabel(composite,LABEL_SELECT_VALUE_COLUMN,maxStrLengthProperty);
  columnChooser=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  columnChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  columnChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      updateButtons();
    }
  }
);
  createLabel(composite,null,maxStrLengthProperty);
  createLabel(composite,LABEL_SELECT_DISPLAY_TEXT,maxStrLengthProperty);
  displayTextChooser=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  displayTextChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(composite,null,maxStrLengthProperty);
  createDefaultEditor();
  listLimit.setEditable(true);
}","private void switchToDynamic(){
  Composite composite=new Composite(valueArea,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  composite.setLayoutData(gd);
  composite.setLayout(UIUtil.createGridLayoutWithoutMargin(3,false));
  createLabel(composite,LABEL_SELECT_DATA_SET);
  dataSetChooser=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  dataSetChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  dataSetChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      refreshColumns(false);
    }
  }
);
  createDataSet=new Button(composite,SWT.PUSH);
  createDataSet.setText(BUTTON_CREATE_DATA_SET);
  setButtonLayoutData(createDataSet);
  createDataSet.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      new NewDataSetAction().run();
      refreshDataSets();
    }
  }
);
  createLabel(composite,LABEL_SELECT_VALUE_COLUMN);
  columnChooser=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  columnChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  columnChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      updateButtons();
    }
  }
);
  createLabel(composite,null);
  createLabel(composite,LABEL_SELECT_DISPLAY_TEXT);
  displayTextChooser=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  displayTextChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(composite,null);
  createDefaultEditor();
  listLimit.setEditable(true);
}",0.9427446228415632
78023,"private void createLabel(Composite parent,String content,int width){
  Label label=new Label(parent,SWT.NONE);
  if (content != null) {
    label.setText(content);
  }
  setLabelLayoutData(label,width);
}","private void createLabel(Composite parent,String content){
  Label label=new Label(parent,SWT.NONE);
  if (content != null) {
    label.setText(content);
  }
  setLabelLayoutData(label);
}",0.9591836734693876
78024,"private void switchToText(){
  createDefaultEditor();
  createLabel(valueArea,null,maxStrLengthProperty);
  createPromptLine(valueArea);
}","private void switchToText(){
  createDefaultEditor();
  createLabel(valueArea,null);
  createPromptLine(valueArea);
}",0.9176470588235294
78025,"private void setLabelLayoutData(Label label,int width){
  GridData gd=new GridData();
  if (label.getText().equals(LABEL_VALUES)) {
    gd.verticalAlignment=GridData.BEGINNING;
  }
  gd.widthHint=width;
  label.setLayoutData(gd);
}","private void setLabelLayoutData(Label label){
  GridData gd=new GridData();
  if (label.getText().equals(LABEL_VALUES)) {
    gd.verticalAlignment=GridData.BEGINNING;
  }
  label.setLayoutData(gd);
}",0.9255813953488372
78026,"private void switchToList(){
  createLabel(valueArea,LABEL_VALUES,maxStrLengthProperty);
  Composite tableArea=new Composite(valueArea,SWT.NONE);
  tableArea.setLayout(UIUtil.createGridLayoutWithoutMargin());
  tableArea.setLayoutData(new GridData(GridData.FILL_BOTH));
  Table table=new Table(tableArea,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER);
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addKeyListener(new KeyAdapter(){
    /** 
 * @see org.eclipse.swt.events.KeyAdapter#keyReleased(org.eclipse.swt.events.KeyEvent)
 */
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        deleteRow();
      }
    }
  }
);
  String[] columns;
  int[] columnWidth;
  CellEditor[] cellEditors;
  columns=new String[]{null,COLUMN_IS_DEFAULT,COLUMN_VALUE,COLUMN_DISPLAY_TEXT};
  columnWidth=new int[]{20,70,145,145};
  cellEditors=new CellEditor[]{null,null,new TextCellEditor(table),new TextCellEditor(table)};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null && !COLUMN_IS_DEFAULT.equals(columns[i]));
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  valueTable=new TableViewer(table);
  valueTable.setCellEditors(cellEditors);
  valueTable.setColumnProperties(columns);
  valueTable.setContentProvider(contentProvider);
  valueTable.setLabelProvider(labelProvider);
  valueTable.setCellModifier(cellModifier);
  valueTable.setInput(choiceList);
  valueTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateTableButtons();
    }
  }
);
  Composite buttonBar=new Composite(tableArea,SWT.NONE);
  buttonBar.setLayout(UIUtil.createGridLayoutWithoutMargin(4,false));
  buttonBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  importValue=new Button(buttonBar,SWT.PUSH);
  importValue.setText(BUTTON_LABEL_IMPORT);
  setButtonLayoutData(importValue);
  importValue.setEnabled(!inputParameter.getModuleHandle().getVisibleDataSets().isEmpty());
  importValue.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String type=getSelectedDataType();
      ImportValueDialog dialog=new ImportValueDialog(type);
      if (dialog.open() == OK) {
        String[] importValues=(String[])dialog.getResult();
        for (int i=0; i < importValues.length; i++) {
          if (!containValue(null,importValues[i],COLUMN_VALUE)) {
            SelectionChoice choice=StructureFactory.createSelectionChoice();
            choice.setValue(importValues[i]);
            choiceList.add(choice);
          }
        }
        refreshValueTable();
      }
    }
  }
);
  changeDefault=new Button(buttonBar,SWT.TOGGLE);
  changeDefault.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      SelectionChoice choice=(SelectionChoice)((IStructuredSelection)valueTable.getSelection()).getFirstElement();
      if (isDefaultChoice(choice)) {
        defaultValue=null;
      }
 else {
        defaultValue=choice.getValue();
      }
      refreshValueTable();
      updateMessageLine();
      updateButtons();
    }
  }
);
  delete=new Button(buttonBar,SWT.PUSH);
  delete.setText(BUTTON_LABEL_DELETE);
  setButtonLayoutData(delete);
  delete.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      deleteRow();
    }
  }
);
  createPromptLine(tableArea);
  updateTableButtons();
}","private void switchToList(){
  createLabel(valueArea,LABEL_VALUES);
  Composite tableArea=new Composite(valueArea,SWT.NONE);
  tableArea.setLayout(UIUtil.createGridLayoutWithoutMargin());
  tableArea.setLayoutData(new GridData(GridData.FILL_BOTH));
  Table table=new Table(tableArea,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER);
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addKeyListener(new KeyAdapter(){
    /** 
 * @see org.eclipse.swt.events.KeyAdapter#keyReleased(org.eclipse.swt.events.KeyEvent)
 */
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        deleteRow();
      }
    }
  }
);
  String[] columns;
  int[] columnWidth;
  CellEditor[] cellEditors;
  columns=new String[]{null,COLUMN_IS_DEFAULT,COLUMN_VALUE,COLUMN_DISPLAY_TEXT};
  columnWidth=new int[]{20,70,145,145};
  cellEditors=new CellEditor[]{null,null,new TextCellEditor(table),new TextCellEditor(table)};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null);
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  valueTable=new TableViewer(table);
  valueTable.setCellEditors(cellEditors);
  valueTable.setColumnProperties(columns);
  valueTable.setContentProvider(contentProvider);
  valueTable.setLabelProvider(labelProvider);
  valueTable.setCellModifier(cellModifier);
  valueTable.setInput(choiceList);
  valueTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateTableButtons();
    }
  }
);
  Composite buttonBar=new Composite(tableArea,SWT.NONE);
  buttonBar.setLayout(UIUtil.createGridLayoutWithoutMargin(4,false));
  buttonBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  importValue=new Button(buttonBar,SWT.PUSH);
  importValue.setText(BUTTON_LABEL_IMPORT);
  setButtonLayoutData(importValue);
  importValue.setEnabled(!inputParameter.getModuleHandle().getVisibleDataSets().isEmpty());
  importValue.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String type=getSelectedDataType();
      ImportValueDialog dialog=new ImportValueDialog(type);
      if (dialog.open() == OK) {
        String[] importValues=(String[])dialog.getResult();
        for (int i=0; i < importValues.length; i++) {
          if (!containValue(null,importValues[i],COLUMN_VALUE)) {
            SelectionChoice choice=StructureFactory.createSelectionChoice();
            choice.setValue(importValues[i]);
            choiceList.add(choice);
          }
        }
        refreshValueTable();
      }
    }
  }
);
  changeDefault=new Button(buttonBar,SWT.TOGGLE);
  changeDefault.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      SelectionChoice choice=(SelectionChoice)((IStructuredSelection)valueTable.getSelection()).getFirstElement();
      if (isDefaultChoice(choice)) {
        defaultValue=null;
      }
 else {
        defaultValue=choice.getValue();
      }
      refreshValueTable();
      updateMessageLine();
      updateButtons();
      changeDefault.getParent().layout();
    }
  }
);
  delete=new Button(buttonBar,SWT.PUSH);
  delete.setText(BUTTON_LABEL_DELETE);
  setButtonLayoutData(delete);
  delete.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      deleteRow();
    }
  }
);
  createPromptLine(tableArea);
  updateTableButtons();
}",0.985784581738655
78027,"protected void handleSelectionChange(ReportRequest request){
  List list=request.getSelectionModelList();
  if ((request.getSource() instanceof LibraryOutlinePage || request.getSource() instanceof TableEditPart) && !isInContainer(list)) {
    int size=list.size();
    Object obj=null;
    if (size != 0) {
      obj=list.get(size - 1);
    }
    SetCurrentEditModelCommand command=new SetCurrentEditModelCommand(obj);
    command.execute();
    return;
  }
  super.handleSelectionChange(request);
}","protected void handleSelectionChange(ReportRequest request){
  List list=request.getSelectionModelList();
  if ((request.getSource() instanceof LibraryOutlinePage || request.getSource() instanceof TableEditPart) && !isInContainer(list)) {
    int size=list.size();
    Object obj=null;
    if (size != 0) {
      obj=list.get(size - 1);
      SetCurrentEditModelCommand command=new SetCurrentEditModelCommand(obj);
      command.execute();
      return;
    }
  }
  super.handleSelectionChange(request);
}",0.9701195219123506
78028,"/** 
 * Adds drop support to viewer.Must set viewer before execution.
 */
public void addDropSupportToViewer(){
  final StyledText text=viewer.getTextWidget();
  DropTarget dropTarget=new DropTarget(text,DND.DROP_COPY | DND.DROP_DEFAULT);
  dropTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
  dropTarget.addDropListener(new DropTargetAdapter(){
    public void dragEnter(    DropTargetEvent event){
      text.setFocus();
      if (event.detail == DND.DROP_DEFAULT)       event.detail=DND.DROP_COPY;
      if (event.detail != DND.DROP_COPY)       event.detail=DND.DROP_NONE;
    }
    public void dragOver(    DropTargetEvent event){
      event.feedback=DND.FEEDBACK_SCROLL | DND.FEEDBACK_INSERT_BEFORE;
    }
    public void dragOperationChanged(    DropTargetEvent event){
      dragEnter(event);
    }
    public void drop(    DropTargetEvent event){
      if (event.data instanceof String)       insertText((String)event.data);
    }
  }
);
}","/** 
 * Adds drop support to viewer.Must set viewer before execution.
 */
public void addDropSupportToViewer(){
  final StyledText text=viewer.getTextWidget();
  DropTarget dropTarget=new DropTarget(text,DND.DROP_COPY | DND.DROP_DEFAULT);
  dropTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
  dropTarget.addDropListener(new DropTargetAdapter(){
    public void dragEnter(    DropTargetEvent event){
      text.setFocus();
      if (event.detail == DND.DROP_DEFAULT)       event.detail=DND.DROP_COPY;
      if (event.detail != DND.DROP_COPY)       event.detail=DND.DROP_NONE;
    }
    public void dragOver(    DropTargetEvent event){
      event.feedback=DND.FEEDBACK_SCROLL | DND.FEEDBACK_SELECT;
    }
    public void dragOperationChanged(    DropTargetEvent event){
      dragEnter(event);
    }
    public void drop(    DropTargetEvent event){
      if (event.data instanceof String)       insertText((String)event.data);
    }
  }
);
}",0.9921996879875196
78029,"public void dragOver(DropTargetEvent event){
  event.feedback=DND.FEEDBACK_SCROLL | DND.FEEDBACK_INSERT_BEFORE;
}","public void dragOver(DropTargetEvent event){
  event.feedback=DND.FEEDBACK_SCROLL | DND.FEEDBACK_SELECT;
}",0.9406392694063926
78030,"/** 
 * Constructs a new model exception.
 * @param pluginId Returns the unique identifier of the plug-in associated with this exception
 * @param errorCode used to retrieve a piece of externalized message displayed to end user.
 * @param cause the nested exception
 * @param args string arguments used to format error messages
 */
public ExtendedElementException(DesignElement element,String pluginId,String errorCode,Object[] args,Throwable cause){
  super(pluginId,errorCode,args,cause);
  this.element=element;
}","/** 
 * Constructs a new model exception.
 * @param element The element with semantic error.
 * @param pluginId Returns the unique identifier of the plug-in associated with this exception
 * @param errorCode used to retrieve a piece of externalized message displayed to end user.
 * @param cause the nested exception
 * @param args string arguments used to format error messages
 */
public ExtendedElementException(DesignElement element,String pluginId,String errorCode,Object[] args,Throwable cause){
  super(pluginId,errorCode,args,cause);
  this.element=element;
}",0.9529085872576176
78031,"/** 
 * Returns extended element exception properties.
 * @param propName property name of extended element exception.
 * @return
 */
public Object getProperty(String propName){
  return properties.get(propName);
}","/** 
 * Returns extended element exception properties.
 * @param propName property name of extended element exception.
 * @return value of extended element exception.
 */
public Object getProperty(String propName){
  return properties.get(propName);
}",0.9204301075268816
78032,"/** 
 * Returns localized message.
 */
public String getLocalizedMessage(){
}","/** 
 * Returns localized message.
 * @return localized message.
 */
public String getLocalizedMessage(){
}",0.8369565217391305
78033,"public Dimension getPreferredSize(int wHint,int hHint){
  return CONTROL_SIZE;
}","public Dimension getPreferredSize(int wHint,int hHint){
  Dimension dimension=new Dimension(0,CONTROL_SIZE.height);
  List list=getChildren();
  for (int i=0; i < list.size(); i++) {
    Figure figure=(Figure)list.get(i);
    dimension.width=dimension.width + figure.getSize().width;
  }
  return dimension;
}",0.365038560411311
78034,"/** 
 * @param owner
 */
public ListControlDisplayNameFigure(ListBandEditPart owner){
  super();
  this.owner=owner;
  setBounds(new Rectangle(35,0,50,19));
  setBorder(new MarginBorder(8,0,0,0));
}","/** 
 * @param owner
 */
public ListControlDisplayNameFigure(ListBandEditPart owner){
  super();
  this.owner=owner;
  text=(((ListBandProxy)owner.getModel()).getDisplayName());
  Font font=getFont();
  if (font == null) {
    GC gc=new GC(new Shell());
    font=gc.getFont();
  }
  int width=FigureUtilities.getTextWidth(text,font);
  setBounds(new Rectangle(35,0,width + DISPLAY_MARGIN.right,19));
  setBorder(new MarginBorder(8,0,0,0));
}",0.6134585289514867
78035,"/** 
 * @param ri
 * @param scope
 * @param saveUtil
 * @param serviceForResultSet
 */
BindingColumnsEvalUtil(IResultIterator ri,Scriptable scope,RDSaveUtil saveUtil,List manualBindingExprs,Map autoBindingExprs){
  this.odiResult=ri;
  this.scope=scope;
  this.saveUtil=saveUtil;
  this.initBindingColumns(manualBindingExprs,autoBindingExprs);
}","/** 
 * @param ri
 * @param scope
 * @param saveUtil
 * @param serviceForResultSet
 */
BindingColumnsEvalUtil(IResultIterator ri,Scriptable scope,RDSaveUtil saveUtil,List manualBindingExprs,Map autoBindingExprs){
  this.odiResult=ri;
  this.scope=scope;
  this.saveUtil=saveUtil;
  try {
    this.isBasedOnRD=ExprMetaUtil.isBasedOnRD(ri.getResultClass());
    if (this.isBasedOnRD == true)     this.evalHelper=new EvalHelper(ri);
  }
 catch (  DataException e) {
  }
  this.initBindingColumns(manualBindingExprs,autoBindingExprs);
}",0.7069555302166477
78036,"/** 
 * @param baseExpr
 * @param exprType
 * @param valueMap
 * @throws DataException
 */
private void evaluateValue(BindingColumn bindingColumn,Map valueMap,int exprType) throws DataException {
  Object exprValue;
  try {
    if (exprType == MANUAL_BINDING)     exprValue=ExprEvaluateUtil.evaluateExpression(bindingColumn.baseExpr,odiResult,scope);
 else     exprValue=ExprEvaluateUtil.evaluateRawExpression(bindingColumn.baseExpr,scope);
  }
 catch (  BirtException e) {
    exprValue=e;
  }
  valueMap.put(bindingColumn.columnName,exprValue);
  if (exprValue instanceof BirtException == false)   saveUtil.doSaveExpr(bindingColumn.columnName,exprValue);
}","/** 
 * @param baseExpr
 * @param exprType
 * @param valueMap
 * @throws DataException
 */
private void evaluateValue(BindingColumn bindingColumn,Map valueMap,int exprType) throws DataException {
  Object exprValue=null;
  try {
    boolean getValue=false;
    if (isBasedOnRD == true) {
      String columnName=bindingColumn.columnName;
      if (evalHelper.contains(columnName)) {
        getValue=true;
        exprValue=evalHelper.getValue(columnName);
      }
    }
    if (getValue == false) {
      if (exprType == MANUAL_BINDING)       exprValue=ExprEvaluateUtil.evaluateExpression(bindingColumn.baseExpr,odiResult,scope);
 else       exprValue=ExprEvaluateUtil.evaluateRawExpression(bindingColumn.baseExpr,scope);
    }
  }
 catch (  BirtException e) {
    exprValue=e;
  }
  valueMap.put(bindingColumn.columnName,exprValue);
  if (exprValue instanceof BirtException == false)   saveUtil.doSaveExpr(bindingColumn.columnName,exprValue);
}",0.8204488778054863
78037,"/** 
 * @param inExprMetas
 * @return
 */
public static ExprMetaInfo[] buildExprDataMetaInfo(ExprMetaInfo[] inExprMetas){
  ExprMetaInfo[] exprMetas=null;
  if (isBasedOnSecondRD(inExprMetas) == false) {
    exprMetas=new ExprMetaInfo[inExprMetas.length + 2];
    System.arraycopy(inExprMetas,0,exprMetas,0,inExprMetas.length);
    ExprMetaInfo[] tempExprMetaInfo=getAssistExprMetaInfo();
    System.arraycopy(tempExprMetaInfo,0,exprMetas,inExprMetas.length,tempExprMetaInfo.length);
  }
 else {
    exprMetas=inExprMetas;
  }
  return exprMetas;
}","/** 
 * @param inExprMetas
 * @return
 */
public static ExprMetaInfo[] buildExprDataMetaInfo(ExprMetaInfo[] inExprMetas){
  ExprMetaInfo[] exprMetas=null;
  if (isBasedOnRD(inExprMetas) == false) {
    exprMetas=new ExprMetaInfo[inExprMetas.length + 2];
    System.arraycopy(inExprMetas,0,exprMetas,0,inExprMetas.length);
    ExprMetaInfo[] tempExprMetaInfo=getAssistExprMetaInfo();
    System.arraycopy(tempExprMetaInfo,0,exprMetas,inExprMetas.length,tempExprMetaInfo.length);
  }
 else {
    exprMetas=inExprMetas;
  }
  return exprMetas;
}",0.9944954128440368
78038,"/** 
 * @return
 */
private static ExprMetaInfo[] getAssistExprMetaInfo(){
  final String FILTER_NAME=""String_Node_Str"";
  ExprMetaInfo[] exprMetas=new ExprMetaInfo[2];
  exprMetas[0]=new ExprMetaInfo();
  exprMetas[0].setName(POS_NAME);
  exprMetas[0].setGroupLevel(0);
  exprMetas[0].setDataType(DataType.INTEGER_TYPE);
  exprMetas[0].setType(ExprMetaInfo.SCRIPT_EXPRESSION);
  exprMetas[0].setJSText(""String_Node_Str"");
  exprMetas[1]=new ExprMetaInfo();
  exprMetas[1].setName(FILTER_NAME);
  exprMetas[1].setGroupLevel(0);
  exprMetas[1].setType(ExprMetaInfo.SCRIPT_EXPRESSION);
  exprMetas[1].setDataType(DataType.BOOLEAN_TYPE);
  exprMetas[1].setJSText(null);
  return exprMetas;
}","/** 
 * @return
 */
private static ExprMetaInfo[] getAssistExprMetaInfo(){
  ExprMetaInfo[] exprMetas=new ExprMetaInfo[2];
  exprMetas[0]=new ExprMetaInfo();
  exprMetas[0].setName(POS_NAME);
  exprMetas[0].setGroupLevel(0);
  exprMetas[0].setDataType(DataType.INTEGER_TYPE);
  exprMetas[0].setType(ExprMetaInfo.SCRIPT_EXPRESSION);
  exprMetas[0].setJSText(""String_Node_Str"");
  exprMetas[1]=new ExprMetaInfo();
  exprMetas[1].setName(FILTER_NAME);
  exprMetas[1].setGroupLevel(0);
  exprMetas[1].setType(ExprMetaInfo.SCRIPT_EXPRESSION);
  exprMetas[1].setDataType(DataType.BOOLEAN_TYPE);
  exprMetas[1].setJSText(null);
  return exprMetas;
}",0.9654135338345864
78039,"public URL findResource(ModuleHandle moduleHandle,String fileName,int type){
  if (fileName == null)   return null;
  try {
    File f=new File(fileName);
    if (f.isAbsolute())     return f.exists() && f.isFile() ? f.getCanonicalFile().toURL() : null;
    String resourcePath=moduleHandle.getModule().getSession().getBirtResourcePath();
    if (resourcePath != null) {
      f=new File(resourcePath,fileName);
      if (f.exists() && f.isFile())       return f.getCanonicalFile().toURL();
    }
    if (moduleHandle == null)     return null;
    URL systemId=moduleHandle.getModule().getSystemId();
    if (systemId == null)     return null;
    if (URIUtil.FILE_SCHEMA.equalsIgnoreCase(systemId.getProtocol()))     return tryFileSearch(systemId,fileName);
 else     return new URL(systemId,URIUtil.convertFileNameToURLString(fileName));
  }
 catch (  MalformedURLException e) {
  }
catch (  IOException e) {
  }
  return null;
}","public URL findResource(ModuleHandle moduleHandle,String fileName,int type){
  if (fileName == null)   return null;
  try {
    File f=new File(fileName);
    if (f.isAbsolute())     return f.exists() && f.isFile() ? f.getCanonicalFile().toURL() : null;
    try {
      URL objURI=new URL(fileName);
      if (URIUtil.FILE_SCHEMA.equalsIgnoreCase(objURI.getProtocol())) {
        f=new File(objURI.getPath());
        if (f.isAbsolute())         return f.exists() && f.isFile() ? f.getCanonicalFile().toURL() : null;
      }
    }
 catch (    MalformedURLException e) {
    }
    String resourcePath=moduleHandle.getModule().getSession().getBirtResourcePath();
    if (resourcePath != null) {
      f=new File(resourcePath,fileName);
      if (f.exists() && f.isFile())       return f.getCanonicalFile().toURL();
    }
    if (moduleHandle == null)     return null;
    URL systemId=moduleHandle.getModule().getSystemId();
    if (systemId == null)     return null;
    if (URIUtil.FILE_SCHEMA.equalsIgnoreCase(systemId.getProtocol()))     return tryFileSearch(systemId,fileName);
    return new URL(systemId,URIUtil.convertFileNameToURLString(fileName));
  }
 catch (  MalformedURLException e) {
  }
catch (  IOException e) {
  }
  return null;
}",0.3994490358126721
78040,"/** 
 * Creates bound columns for report item.
 * @param element the report item
 * @param module the root of the report item
 */
private void dealReportItem(ReportItem element,Module module){
  dealStyle(element,module);
  String value=(String)element.getLocalProperty(module,ReportItem.TOC_PROP);
  if (value != null)   handleBoundsForValue(element,module,value);
  value=(String)element.getLocalProperty(module,ReportItem.BOOKMARK_PROP);
  if (value != null)   handleBoundsForValue(element,module,value);
  value=(String)element.getLocalProperty(module,ReportItem.ON_CREATE_METHOD);
  if (value != null)   handleBoundsForValue(element,module,value);
  List paramBindings=(List)element.getLocalProperty(module,ReportItem.PARAM_BINDINGS_PROP);
  if (paramBindings != null && paramBindings.size() > 0) {
    for (int i=0; i < paramBindings.size(); i++) {
      ParamBinding paramValue=(ParamBinding)paramBindings.get(i);
      handleBoundsForParamBinding(element,module,paramValue.getExpression());
    }
  }
  List hideRules=(List)element.getLocalProperty(module,ReportItem.VISIBILITY_PROP);
  if (hideRules != null && hideRules.size() > 0) {
    for (int i=0; i < hideRules.size(); i++) {
      HideRule paramValue=(HideRule)hideRules.get(i);
      handleBoundsForValue(element,module,paramValue.getExpression());
    }
  }
}","/** 
 * Creates bound columns for report item.
 * @param element the report item
 * @param module the root of the report item
 */
protected void dealReportItem(ReportItem element,Module module){
  dealStyle(element,module);
  String value=(String)element.getLocalProperty(module,ReportItem.TOC_PROP);
  if (value != null)   handleBoundsForValue(element,module,value);
  value=(String)element.getLocalProperty(module,ReportItem.BOOKMARK_PROP);
  if (value != null)   handleBoundsForValue(element,module,value);
  value=(String)element.getLocalProperty(module,ReportItem.ON_CREATE_METHOD);
  if (value != null)   handleBoundsForValue(element,module,value);
  List paramBindings=(List)element.getLocalProperty(module,ReportItem.PARAM_BINDINGS_PROP);
  if (paramBindings != null && paramBindings.size() > 0) {
    for (int i=0; i < paramBindings.size(); i++) {
      ParamBinding paramValue=(ParamBinding)paramBindings.get(i);
      handleBoundsForParamBinding(element,module,paramValue.getExpression());
    }
  }
  List hideRules=(List)element.getLocalProperty(module,ReportItem.VISIBILITY_PROP);
  if (hideRules != null && hideRules.size() > 0) {
    for (int i=0; i < hideRules.size(); i++) {
      HideRule paramValue=(HideRule)hideRules.get(i);
      handleBoundsForValue(element,module,paramValue.getExpression());
    }
  }
}",0.9954819277108434
78041,"/** 
 * Creates bound columns for extended item.
 * @param element the extended item
 * @param module the root of the report item
 */
protected void dealExtendedItem(ExtendedItem element,Module module){
  dealReportItem(element,module);
  List values=(List)element.getLocalProperty(module,ExtendedItem.FILTER_PROP);
  if (!(values == null || values.size() < 1)) {
    for (int i=0; i < values.size(); i++) {
      FilterCondition struct=(FilterCondition)values.get(i);
      handleBoundsForValue(element,module,struct.getExpr());
      handleBoundsForValue(element,module,struct.getValue1());
      handleBoundsForValue(element,module,struct.getValue2());
    }
  }
  Object reportItem=element.getExtendedElement();
  if (reportItem != null && reportItem instanceof ICompatibleReportItem) {
    List jsExprs=((ICompatibleReportItem)reportItem).getRowExpressions();
    Map updatedExprs=DataBoundColumnUtil.handleJavaExpression(jsExprs,element,module);
    ((ICompatibleReportItem)reportItem).updateRowExpressions(updatedExprs);
  }
}","/** 
 * Creates bound columns for extended item.
 * @param element the extended item
 * @param module the root of the report item
 */
protected void dealExtendedItem(ExtendedItem element,Module module){
  dealReportItem(element,module);
  List values=(List)element.getLocalProperty(module,ExtendedItem.FILTER_PROP);
  if (!(values == null || values.size() < 1)) {
    for (int i=0; i < values.size(); i++) {
      FilterCondition struct=(FilterCondition)values.get(i);
      handleBoundsForValue(element,module,struct.getExpr());
      handleBoundsForValue(element,module,struct.getValue1());
      handleBoundsForValue(element,module,struct.getValue2());
    }
  }
  Object reportItem=element.getExtendedElement();
  if (reportItem != null && reportItem instanceof ICompatibleReportItem) {
    List jsExprs=((ICompatibleReportItem)reportItem).getRowExpressions();
    for (int i=0; i < jsExprs.size(); i++)     handleBoundsForValue(element,module,(String)jsExprs.get(i));
    Map updatedExprs=DataBoundColumnUtil.handleJavaExpression(jsExprs,element,module);
    ((ICompatibleReportItem)reportItem).updateRowExpressions(updatedExprs);
  }
}",0.9503219871205152
78042,"/** 
 * @param expr
 * @param odiResult
 * @param scope
 * @return
 * @throws DataException
 */
public static Object evaluateCompiledExpression(CompiledExpression expr,IResultIterator odiResult,Scriptable scope) throws DataException {
  if (expr instanceof ColumnReferenceExpression) {
    ColumnReferenceExpression colref=(ColumnReferenceExpression)expr;
    if (colref.isIndexed()) {
      int idx=colref.getColumnindex();
      if (idx == 0)       return new Integer(odiResult.getCurrentResultIndex());
 else       if (odiResult.getCurrentResult() != null)       return odiResult.getCurrentResult().getFieldValue(idx);
 else       return null;
    }
 else {
      String name=colref.getColumnName();
      if (JSRowObject.ROW_POSITION.equals(name))       return new Integer(odiResult.getCurrentResultIndex());
 else       if (odiResult.getCurrentResult() != null)       return odiResult.getCurrentResult().getFieldValue(name);
 else       return null;
    }
  }
 else {
    Context cx=Context.enter();
    try {
      return expr.evaluate(cx,scope);
    }
  finally {
      Context.exit();
    }
  }
}","/** 
 * @param expr
 * @param odiResult
 * @param scope
 * @return
 * @throws DataException
 */
private static Object evaluateCompiledExpression(CompiledExpression expr,int index,IResultObject roObject,Scriptable scope) throws DataException {
  if (expr instanceof ColumnReferenceExpression) {
    ColumnReferenceExpression colref=(ColumnReferenceExpression)expr;
    if (colref.isIndexed()) {
      int idx=colref.getColumnindex();
      if (idx == 0)       return new Integer(index);
 else       if (roObject != null)       return roObject.getFieldValue(idx);
 else       return null;
    }
 else {
      String name=colref.getColumnName();
      if (JSRowObject.ROW_POSITION.equals(name))       return new Integer(index);
 else       if (roObject != null)       return roObject.getFieldValue(name);
 else       return null;
    }
  }
 else {
    Context cx=Context.enter();
    try {
      return expr.evaluate(cx,scope);
    }
  finally {
      Context.exit();
    }
  }
}",0.8115384615384615
78043,"/** 
 * @param rsObject
 * @param index
 * @param name
 * @return value
 * @throws DataException 
 */
public Object getValue(IResultObject rsObject,int index,String name) throws DataException {
  Object value=null;
  if (name.startsWith(""String_Node_Str"")) {
    try {
      value=rsObject.getFieldValue(name);
    }
 catch (    DataException e) {
    }
  }
 else {
    IBaseExpression dataExpr=this.exprManager.getExpr(name);
    try {
      value=evaluateValue(dataExpr,-1,rsObject,this.scope);
      value=JavascriptEvalUtil.convertJavascriptValue(value);
    }
 catch (    BirtException e) {
    }
  }
  return value;
}","/** 
 * @param rsObject
 * @param index
 * @param name
 * @return value
 * @throws DataException 
 */
public Object getValue(IResultObject rsObject,int index,String name) throws DataException {
  Object value=null;
  if (name.startsWith(""String_Node_Str"")) {
    try {
      value=rsObject.getFieldValue(name);
    }
 catch (    DataException e) {
    }
  }
 else {
    IBaseExpression dataExpr=this.exprManager.getExpr(name);
    try {
      value=ExprEvaluateUtil.evaluateValue(dataExpr,-1,rsObject,this.scope);
      value=JavascriptEvalUtil.convertJavascriptValue(value);
    }
 catch (    BirtException e) {
    }
  }
  return value;
}",0.9865399841646872
78044,"public Object get(String name,Scriptable start){
  if (""String_Node_Str"".equalsIgnoreCase(name)) {
    if (this.helper.getParent() != null)     return helper.getParent().getJSRowObject();
 else     return null;
  }
  int rowIndex=-1;
  try {
    rowIndex=odiResult.getCurrentResultIndex();
  }
 catch (  BirtException e1) {
  }
  if (""String_Node_Str"".equalsIgnoreCase(name) || ""String_Node_Str"".equalsIgnoreCase(name)) {
    return new Integer(rowIndex);
  }
  if (rowIndex == currRowIndex && valueCacheMap.containsKey(name)) {
    return valueCacheMap.get(name);
  }
 else {
    Object value=null;
    try {
      IBaseExpression dataExpr=this.exprManager.getExpr(name);
      if (dataExpr == null) {
        return null;
      }
      value=evaluateValue(dataExpr,this.odiResult.getCurrentResultIndex(),this.odiResult.getCurrentResult(),this.scope);
    }
 catch (    BirtException e) {
      value=null;
    }
    if (this.currRowIndex != rowIndex) {
      this.valueCacheMap.clear();
      this.currRowIndex=rowIndex;
    }
    valueCacheMap.put(name,value);
    return value;
  }
}","public Object get(String name,Scriptable start){
  if (""String_Node_Str"".equalsIgnoreCase(name)) {
    if (this.helper.getParent() != null)     return helper.getParent().getJSRowObject();
 else     return null;
  }
  int rowIndex=-1;
  try {
    rowIndex=odiResult.getCurrentResultIndex();
  }
 catch (  BirtException e1) {
  }
  if (""String_Node_Str"".equalsIgnoreCase(name) || ""String_Node_Str"".equalsIgnoreCase(name)) {
    return new Integer(rowIndex);
  }
  if (rowIndex == currRowIndex && valueCacheMap.containsKey(name)) {
    return valueCacheMap.get(name);
  }
 else {
    Object value=null;
    try {
      IBaseExpression dataExpr=this.exprManager.getExpr(name);
      if (dataExpr == null) {
        return new DataExceptionMocker(new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,name));
      }
      value=ExprEvaluateUtil.evaluateValue(dataExpr,this.odiResult.getCurrentResultIndex(),this.odiResult.getCurrentResult(),this.scope);
    }
 catch (    BirtException e) {
      value=null;
    }
    if (this.currRowIndex != rowIndex) {
      this.valueCacheMap.clear();
      this.currRowIndex=rowIndex;
    }
    valueCacheMap.put(name,value);
    return value;
  }
}",0.95129442738043
78045,"public void validate() throws ExtendedElementException {
  System.out.println(""String_Node_Str"");
}","public List validate(){
  return null;
}",0.4460431654676259
78046,"/** 
 * Translates <code>SAXException</code>.
 * @param e a SAX exception to translate
 */
private void translate(SAXException e){
  type=DesignFileException.DESIGN_EXCEPTION_INVALID_XML;
  exceptionName=e.getClass().getName();
  message=e.getMessage();
  description.append(""String_Node_Str"");
  description.append(e.getClass().getName());
  description.append(""String_Node_Str"");
  description.append(""String_Node_Str"");
  description.append(e.getMessage());
  description.append(""String_Node_Str"");
  if (e.getCause() != null && e.getCause() instanceof RuntimeException) {
    translateRuntimeException((RuntimeException)e.getCause());
  }
}","/** 
 * Translates the <code>ExtendedElementException</code> to printable string.
 * @param e the runtime exception
 */
private void translate(ExtendedElementException e){
}",0.2668298653610771
78047,"/** 
 * The default constructor.
 */
public ErrorDetail(){
}","/** 
 * Constructs the error detail with a given exception.
 * @param e the exception types that can be translated are <code>XMLParserException</code>, <code>DesignParserException</code>, <code>SemanticException</code> , <code>SAXException</code>.
 */
public ErrorDetail(Exception e){
}",0.2196531791907514
78048,"/** 
 * Add Driver Page to the Dialog
 * @param tabFolder tab Composite
 */
private void addDriverPage(TabFolder tabFolder){
  Composite page=new Composite(tabFolder,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=10;
  layout.marginWidth=10;
  layout.verticalSpacing=5;
  page.setLayout(layout);
  page.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Table table=new Table(page,SWT.BORDER | SWT.FULL_SELECTION);
  GridData data=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(data);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  TableLayout tableLayout=new TableLayout();
  table.setLayout(tableLayout);
  TableColumn column0=new TableColumn(table,SWT.NONE);
  column0.setWidth(20);
  TableColumn column1=new TableColumn(table,SWT.NONE);
  column1.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column1.setWidth(300);
  column1.addSelectionListener(new SelectionListener(){
    private boolean asc=false;
    public void widgetSelected(    SelectionEvent e){
      sortDriver(1,asc);
      asc=!asc;
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  TableColumn column2=new TableColumn(table,SWT.NONE);
  column2.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column2.setWidth(100);
  column2.addSelectionListener(new SelectionListener(){
    private boolean asc=false;
    public void widgetSelected(    SelectionEvent e){
      sortDriver(2,asc);
      asc=!asc;
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  TableColumn column3=new TableColumn(table,SWT.NONE);
  column3.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column3.setWidth(100);
  column3.addSelectionListener(new SelectionListener(){
    private boolean asc=false;
    public void widgetSelected(    SelectionEvent e){
      sortDriver(3,asc);
      asc=!asc;
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  driverViewer=new TableViewer(table);
  driverViewer.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement instanceof Map) {
        return ((Map)inputElement).entrySet().toArray();
      }
      return new Object[0];
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public void dispose(){
    }
  }
);
  driverViewer.setSorter(null);
  driverViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateDriverButtons();
    }
  }
);
  driverViewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      editDriver();
    }
  }
);
  Composite buttons=new Composite(page,SWT.NONE);
  buttons.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  layout=new GridLayout();
  layout.numColumns=2;
  layout.marginHeight=0;
  layout.marginWidth=0;
  buttons.setLayout(layout);
  editButton=new Button(buttons,SWT.PUSH);
  editButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  data=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  data.widthHint=btnWidth;
  data.heightHint=btnHeight;
  editButton.setLayoutData(data);
  editButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editDriver();
    }
  }
);
  TabItem tabItem=new TabItem(tabFolder,SWT.NONE);
  tabItem.setControl(page);
  tabItem.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
}","/** 
 * Add Driver Page to the Dialog
 * @param tabFolder tab Composite
 */
private void addDriverPage(TabFolder tabFolder){
  Composite page=new Composite(tabFolder,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=10;
  layout.marginWidth=10;
  layout.verticalSpacing=5;
  page.setLayout(layout);
  page.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Table table=new Table(page,SWT.BORDER | SWT.FULL_SELECTION);
  GridData data=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(data);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  TableLayout tableLayout=new TableLayout();
  table.setLayout(tableLayout);
  TableColumn column0=new TableColumn(table,SWT.NONE);
  column0.setWidth(20);
  TableColumn column1=new TableColumn(table,SWT.NONE);
  column1.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column1.setWidth(300);
  column1.addSelectionListener(new SelectionListener(){
    private boolean asc=false;
    public void widgetSelected(    SelectionEvent e){
      sortDriver(1,asc);
      asc=!asc;
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  TableColumn column2=new TableColumn(table,SWT.NONE);
  column2.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column2.setWidth(100);
  column2.addSelectionListener(new SelectionListener(){
    private boolean asc=false;
    public void widgetSelected(    SelectionEvent e){
      sortDriver(2,asc);
      asc=!asc;
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  TableColumn column3=new TableColumn(table,SWT.NONE);
  column3.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column3.setWidth(100);
  column3.addSelectionListener(new SelectionListener(){
    private boolean asc=false;
    public void widgetSelected(    SelectionEvent e){
      sortDriver(3,asc);
      asc=!asc;
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  driverViewer=new TableViewer(table);
  driverViewer.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement instanceof Map) {
        return ((Map)inputElement).entrySet().toArray();
      }
      return new Object[0];
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public void dispose(){
    }
  }
);
  driverViewer.setSorter(null);
  driverViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateDriverButtons();
    }
  }
);
  driverViewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      editDriver();
    }
  }
);
  Composite buttons=new Composite(page,SWT.NONE);
  buttons.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  layout=new GridLayout();
  layout.numColumns=2;
  layout.marginHeight=0;
  layout.marginWidth=0;
  buttons.setLayout(layout);
  editButton=new Button(buttons,SWT.PUSH);
  editButton.setText(TEXT_EDITBUTTON);
  data=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  data.widthHint=btnWidth;
  editButton.setLayoutData(data);
  editButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editDriver();
    }
  }
);
  TabItem tabItem=new TabItem(tabFolder,SWT.NONE);
  tabItem.setControl(page);
  tabItem.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
}",0.9880478087649402
78049,"/** 
 * add Jar Page to the Dialog
 * @param tabFolder
 */
private void addJarPage(TabFolder tabFolder){
  final Composite page=new Composite(tabFolder,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=10;
  layout.marginWidth=10;
  layout.verticalSpacing=5;
  page.setLayout(layout);
  page.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Table table=new Table(page,SWT.BORDER | SWT.FULL_SELECTION);
  GridData data=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(data);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  TableLayout tableLayout=new TableLayout();
  table.setLayout(tableLayout);
  final TableColumn column0=new TableColumn(table,SWT.NONE);
  column0.setWidth(20);
  final TableColumn column1=new TableColumn(table,SWT.NONE);
  column1.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column1.setWidth(150);
  column1.addSelectionListener(new SelectionListener(){
    private boolean asc=false;
    public void widgetSelected(    SelectionEvent e){
      sortJar(1,asc);
      asc=!asc;
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  final TableColumn column2=new TableColumn(table,SWT.NONE);
  column2.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column2.setWidth(280);
  column2.addSelectionListener(new SelectionListener(){
    private boolean asc=false;
    public void widgetSelected(    SelectionEvent e){
      sortJar(2,asc);
      asc=!asc;
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  jarViewer=new TableViewer(table);
  jarViewer.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement instanceof Map) {
        return ((Map)inputElement).entrySet().toArray();
      }
      return new Object[0];
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public void dispose(){
    }
  }
);
  jarViewer.setSorter(null);
  jarViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateJarButtons();
    }
  }
);
  Label lb=new Label(page,SWT.NONE);
  lb.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  lb=new Label(page,SWT.NONE);
  lb.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  lb=new Label(page,SWT.NONE);
  lb.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  Composite buttons=new Composite(page,SWT.NONE);
  buttons.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  layout=new GridLayout();
  layout.numColumns=4;
  layout.marginHeight=0;
  layout.marginWidth=0;
  buttons.setLayout(layout);
  addButton=new Button(buttons,SWT.PUSH);
  addButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  data=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  data.widthHint=btnWidth;
  data.heightHint=btnHeight;
  addButton.setLayoutData(data);
  addButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      addJar();
    }
  }
);
  restoreButton=new Button(buttons,SWT.PUSH);
  restoreButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  data=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  data.widthHint=btnWidth;
  data.heightHint=btnHeight;
  restoreButton.setLayoutData(data);
  restoreButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      restoreJar();
    }
  }
);
  deleteButton=new Button(buttons,SWT.PUSH);
  deleteButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  data=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  data.widthHint=btnWidth;
  data.heightHint=btnHeight;
  deleteButton.setLayoutData(data);
  deleteButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      deleteJar();
    }
  }
);
  TabItem tabItem=new TabItem(tabFolder,SWT.NONE);
  tabItem.setControl(page);
  tabItem.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
}","/** 
 * add Jar Page to the Dialog
 * @param tabFolder
 */
private void addJarPage(TabFolder tabFolder){
  final Composite page=new Composite(tabFolder,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=10;
  layout.marginWidth=10;
  layout.verticalSpacing=5;
  page.setLayout(layout);
  page.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Table table=new Table(page,SWT.BORDER | SWT.FULL_SELECTION);
  GridData data=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(data);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  TableLayout tableLayout=new TableLayout();
  table.setLayout(tableLayout);
  final TableColumn column0=new TableColumn(table,SWT.NONE);
  column0.setWidth(20);
  final TableColumn column1=new TableColumn(table,SWT.NONE);
  column1.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column1.setWidth(150);
  column1.addSelectionListener(new SelectionListener(){
    private boolean asc=false;
    public void widgetSelected(    SelectionEvent e){
      sortJar(1,asc);
      asc=!asc;
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  final TableColumn column2=new TableColumn(table,SWT.NONE);
  column2.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column2.setWidth(280);
  column2.addSelectionListener(new SelectionListener(){
    private boolean asc=false;
    public void widgetSelected(    SelectionEvent e){
      sortJar(2,asc);
      asc=!asc;
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  jarViewer=new TableViewer(table);
  jarViewer.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement instanceof Map) {
        return ((Map)inputElement).entrySet().toArray();
      }
      return new Object[0];
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public void dispose(){
    }
  }
);
  jarViewer.setSorter(null);
  jarViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateJarButtons();
    }
  }
);
  Label lb=new Label(page,SWT.NONE);
  lb.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  lb=new Label(page,SWT.NONE);
  lb.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  lb=new Label(page,SWT.NONE);
  lb.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  Composite buttons=new Composite(page,SWT.NONE);
  buttons.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  layout=new GridLayout();
  layout.numColumns=4;
  layout.marginHeight=0;
  layout.marginWidth=0;
  buttons.setLayout(layout);
  addButton=new Button(buttons,SWT.PUSH);
  addButton.setText(TEXT_ADDBUTTON);
  data=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  data.widthHint=btnWidth;
  addButton.setLayoutData(data);
  addButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      addJar();
    }
  }
);
  restoreButton=new Button(buttons,SWT.PUSH);
  restoreButton.setText(TEXT_RESTOREBUTTON);
  data=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  data.widthHint=btnWidth;
  restoreButton.setLayoutData(data);
  restoreButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      restoreJar();
    }
  }
);
  deleteButton=new Button(buttons,SWT.PUSH);
  deleteButton.setText(TEXT_DELETEBUTTON);
  data=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  data.widthHint=btnWidth;
  deleteButton.setLayoutData(data);
  deleteButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      deleteJar();
    }
  }
);
  TabItem tabItem=new TabItem(tabFolder,SWT.NONE);
  tabItem.setControl(page);
  tabItem.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
}",0.9668339248561988
78050,"/** 
 * Add jarPage and driverPage
 * @param tabFolder parent Composite
 */
private void addTabPages(TabFolder tabFolder){
  addJarPage(tabFolder);
  addDriverPage(tabFolder);
}","/** 
 * Add jarPage and driverPage
 * @param tabFolder parent Composite
 */
private void addTabPages(TabFolder tabFolder){
  localizeButtonWidth();
  addJarPage(tabFolder);
  addDriverPage(tabFolder);
}",0.934036939313984
78051,"/** 
 * copy resource to the platform.  If the resources is a folder, make the same folder into the platform and copy all resources into the dest folder.
 * @param resourcePath resource path.
 * @param platform platform folder
 */
private void copyResources(String resourcePath,String platform){
  Set paths=context.getResourcePaths(resourcePath);
  for (Iterator it=paths.iterator(); it.hasNext(); ) {
    String path=(String)it.next();
    File newFile=new File(platform,path.substring(RESOURCE_BASE.length()));
    if (path.endsWith(""String_Node_Str"")) {
      newFile.mkdir();
      copyResources(path,platform);
    }
 else {
      try {
        if (newFile.createNewFile()) {
          InputStream is=context.getResourceAsStream(path);
          OutputStream os=new FileOutputStream(newFile);
          byte[] buffer=new byte[8192];
          int bytesRead=is.read(buffer);
          while (bytesRead != -1) {
            os.write(buffer,0,bytesRead);
            bytesRead=is.read(buffer);
          }
          is.close();
          os.close();
        }
      }
 catch (      IOException e) {
        log.log(Level.WARNING,""String_Node_Str"",e);
      }
    }
  }
}","/** 
 * copy resource to the platform.  If the resources is a folder, make the same folder into the platform and copy all resources into the dest folder.
 * @param resourcePath resource path.
 * @param platform platform folder
 */
private void copyResources(String resourcePath,String platform){
  Set paths=context.getResourcePaths(resourcePath);
  if (paths != null) {
    for (Iterator it=paths.iterator(); it.hasNext(); ) {
      String path=(String)it.next();
      File newFile=new File(platform,path.substring(RESOURCE_BASE.length()));
      if (path.endsWith(""String_Node_Str"")) {
        newFile.mkdir();
        copyResources(path,platform);
      }
 else {
        try {
          if (newFile.createNewFile()) {
            InputStream is=context.getResourceAsStream(path);
            OutputStream os=new FileOutputStream(newFile);
            byte[] buffer=new byte[8192];
            int bytesRead=is.read(buffer);
            while (bytesRead != -1) {
              os.write(buffer,0,bytesRead);
              bytesRead=is.read(buffer);
            }
            is.close();
            os.close();
          }
        }
 catch (        IOException e) {
          log.log(Level.WARNING,""String_Node_Str"",e);
        }
      }
    }
  }
}",0.9393814432989692
78052,"public void startup(PlatformConfig config) throws BirtException {
  IPlatformContext context=config.getPlatformContext();
  if (context == null) {
    throw new BirtException(""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  String root=context.getPlatform();
  platformDirectory=new File(root);
  if (!platformDirectory.exists() || !platformDirectory.isDirectory()) {
    throw new BirtException(""String_Node_Str"" + root,root);
  }
  if (frameworkClassLoader != null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",platformDirectory.getAbsolutePath());
  File configurationDirectory=new File(platformDirectory,""String_Node_Str"");
  if (!configurationDirectory.exists()) {
    configurationDirectory.mkdirs();
  }
  System.setProperty(""String_Node_Str"",configurationDirectory.getAbsolutePath());
  File workspaceDirectory=new File(platformDirectory,""String_Node_Str"");
  if (!workspaceDirectory.exists()) {
    workspaceDirectory.mkdirs();
  }
  System.setProperty(""String_Node_Str"",workspaceDirectory.getAbsolutePath());
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String path=new File(platformDirectory,""String_Node_Str"").toString();
  path=searchFor(""String_Node_Str"",path);
  if (path == null) {
    throw new BirtException(""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  final String framework=new File(path).getAbsolutePath();
  String[] args=config.getOSGiArguments();
  if (args == null) {
    args=new String[]{""String_Node_Str""};
  }
  ClassLoader original=Thread.currentThread().getContextClassLoader();
  try {
    URL frameworkUrl=new File(framework).toURL();
    System.setProperty(""String_Node_Str"",frameworkUrl.toExternalForm());
    frameworkClassLoader=new URLClassLoader(new URL[]{frameworkUrl},this.getClass().getClassLoader());
    Class clazz=frameworkClassLoader.loadClass(ECLIPSE_STARTER);
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    Method runMethod=clazz.getMethod(""String_Node_Str"",new Class[]{String[].class,Runnable.class});
    bundleContext=runMethod.invoke(null,new Object[]{args,null});
    frameworkContextClassLoader=Thread.currentThread().getContextClassLoader();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
 finally {
    Thread.currentThread().setContextClassLoader(original);
  }
}","public void startup(PlatformConfig config) throws BirtException {
  IPlatformContext context=config.getPlatformContext();
  if (context == null) {
    throw new BirtException(""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  String root=context.getPlatform();
  platformDirectory=new File(root);
  if (!platformDirectory.exists() || !platformDirectory.isDirectory()) {
    throw new BirtException(""String_Node_Str"" + root,root);
  }
  if (frameworkClassLoader != null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",platformDirectory.getAbsolutePath());
  File configurationDirectory=new File(platformDirectory,""String_Node_Str"");
  if (!configurationDirectory.exists()) {
    configurationDirectory.mkdirs();
  }
  System.setProperty(""String_Node_Str"",configurationDirectory.getAbsolutePath());
  File workspaceDirectory=new File(platformDirectory,""String_Node_Str"");
  if (!workspaceDirectory.exists()) {
    workspaceDirectory.mkdirs();
  }
  System.setProperty(""String_Node_Str"",workspaceDirectory.getAbsolutePath());
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String path=new File(platformDirectory,""String_Node_Str"").toString();
  path=searchFor(""String_Node_Str"",path);
  if (path == null) {
    throw new BirtException(""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  final String framework=new File(path).getAbsolutePath();
  String[] args=config.getOSGiArguments();
  if (args == null) {
    args=new String[]{""String_Node_Str""};
  }
  ClassLoader original=Thread.currentThread().getContextClassLoader();
  try {
    URL frameworkUrl=new File(framework).toURL();
    System.setProperty(""String_Node_Str"",frameworkUrl.toExternalForm());
    ClassLoader loader=this.getClass().getClassLoader();
    frameworkClassLoader=new URLClassLoader(new URL[]{frameworkUrl},loader);
    try {
      loader.loadClass(""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    Class clazz=frameworkClassLoader.loadClass(ECLIPSE_STARTER);
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    Method runMethod=clazz.getMethod(""String_Node_Str"",new Class[]{String[].class,Runnable.class});
    bundleContext=runMethod.invoke(null,new Object[]{args,null});
    frameworkContextClassLoader=Thread.currentThread().getContextClassLoader();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
 finally {
    Thread.currentThread().setContextClassLoader(original);
  }
}",0.9626131444313264
78053,"protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName);
  if (reportDocumentInstance != null) {
    reportRunnable=reportDocumentInstance.getReportRunnable();
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
      this.parameterMap=reportDocumentInstance.getParameterValues();
    }
    reportDocumentInstance.close();
  }
  if (reportRunnable == null) {
    try {
      reportRunnable=ReportEngineService.getInstance().openReportDesign(this.reportDesignName);
    }
 catch (    EngineException e) {
      e.printStackTrace();
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
 else {
    design=new BirtViewerReportDesignHandle(null,reportDesignName);
  }
  return design;
}","protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName);
  if (reportDocumentInstance != null) {
    reportRunnable=reportDocumentInstance.getReportRunnable();
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
      this.parameterMap=reportDocumentInstance.getParameterValues();
    }
    reportDocumentInstance.close();
  }
  if (reportRunnable == null) {
    try {
      reportRunnable=ReportEngineService.getInstance().openReportDesign(this.reportDesignName);
    }
 catch (    EngineException e) {
      this.exception=e;
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
 else {
    design=new BirtViewerReportDesignHandle(null,reportDesignName);
  }
  return design;
}",0.983575786015955
78054,"protected void __initParameters(HttpServletRequest request) throws Exception {
  this.reportDesignHandle=getDesignHandle(request);
  if (isDesigner) {
    this.parseConfigVars(request);
  }
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  options.setOption(InputOptions.OPT_RTL,new Boolean(rtl));
  Collection parameterList=this.getReportService().getParameterDefinitions(reportDesignHandle,options,false);
  this.parameters=(HashMap)getParsedParameters(reportDesignHandle,parameterList,request,options);
  this.missingParameter=validateParameters(parameterList,this.parameters);
}","protected void __initParameters(HttpServletRequest request) throws Exception {
  this.reportDesignHandle=getDesignHandle(request);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  options.setOption(InputOptions.OPT_RTL,new Boolean(rtl));
  this.parameterList=this.getReportService().getParameterDefinitions(reportDesignHandle,options,false);
  if (isDesigner) {
    this.parseConfigVars(request);
  }
  this.parameters=(HashMap)getParsedParameters(reportDesignHandle,parameterList,request,options);
  this.missingParameter=validateParameters(parameterList,this.parameters);
}",0.7668621700879765
78055,"/** 
 * parse paramenters from config file.
 * @param request
 * @return
 */
protected void parseConfigVars(HttpServletRequest request){
  String reportConfigName=this.reportDesignName.replaceFirst(IBirtConstants.SUFFIX_DESIGN_FILE,IBirtConstants.SUFFIX_DESIGN_CONFIG);
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.getDefault());
  ReportDesignHandle handle=null;
  try {
    this.configMap=new HashMap();
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=getParameterName(configVar.getName());
          if (paramName != null && paramName.length() > 0) {
            this.configMap.put(paramName,configVar.getValue());
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
    try {
      if (handle != null)       handle.close();
    }
 catch (    Exception err) {
    }
  }
}","/** 
 * parse paramenters from config file.
 * @param request
 * @return
 */
protected void parseConfigVars(HttpServletRequest request){
  String reportConfigName=this.reportDesignName.replaceFirst(IBirtConstants.SUFFIX_DESIGN_FILE,IBirtConstants.SUFFIX_DESIGN_CONFIG);
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.getDefault());
  ReportDesignHandle handle=null;
  try {
    this.configMap=new HashMap();
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      Iterator paramIr=null;
      if (parameterList != null)       paramIr=parameterList.iterator();
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=getParameterName(configVar.getName());
          Object paramValue=configVar.getValue();
          while (paramIr != null && paramName != null && paramValue != null && paramIr.hasNext()) {
            ParameterDefinition parameterObj=(ParameterDefinition)paramIr.next();
            if (paramName.equals(parameterObj.getName())) {
              ReportParameterConverter converter=new ReportParameterConverter(parameterObj.getPattern(),ULocale.US);
              paramValue=converter.parse(paramValue.toString(),parameterObj.getDataType());
              break;
            }
          }
          if (paramName != null && paramName.length() > 0 && paramValue != null) {
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
    try {
      if (handle != null)       handle.close();
    }
 catch (    Exception err) {
    }
  }
}",0.75
78056,"/** 
 * get parameter object.
 * @param request
 * @param parameterObj
 * @exception Throwable
 * @return
 */
protected Object getParamValueObject(HttpServletRequest request,ParameterDefinition parameterObj) throws ReportServiceException {
  String paramName=parameterObj.getName();
  String format=parameterObj.getDisplayFormat();
  Object paramValueObj=super.getParamValueObject(request,parameterObj);
  if (paramValueObj != null)   return paramValueObj;
  if (ParameterAccessor.isDesigner(request) && this.configMap != null && this.configMap.containsKey(paramName)) {
    paramValueObj=this.configMap.get(paramName);
  }
 else   if (this.parameterMap != null && this.parameterMap.containsKey(paramName)) {
    paramValueObj=this.parameterMap.get(paramName);
  }
  if (paramValueObj != null) {
    ReportParameterConverter cfgConverter=new ReportParameterConverter(format,Locale.US);
    return cfgConverter.parse(paramValueObj.toString(),parameterObj.getDataType());
  }
 else {
    return super.getParamValueObject(request,parameterObj);
  }
}","/** 
 * get parameter object.
 * @param request
 * @param parameterObj
 * @exception Throwable
 * @return
 */
protected Object getParamValueObject(HttpServletRequest request,ParameterDefinition parameterObj) throws ReportServiceException {
  String paramName=parameterObj.getName();
  Object paramValueObj=super.getParamValueObject(request,parameterObj);
  if (paramValueObj != null)   return paramValueObj;
  if (ParameterAccessor.isDesigner(request) && this.configMap != null && this.configMap.containsKey(paramName)) {
    paramValueObj=this.configMap.get(paramName);
  }
 else   if (this.parameterMap != null && this.parameterMap.containsKey(paramName)) {
    paramValueObj=this.parameterMap.get(paramName);
  }
  return paramValueObj;
}",0.8210290827740492
78057,"public String runReport(IViewerReportDesignHandle design,String outputDocName,InputOptions runOptions,Map parameters) throws ReportServiceException {
  IReportRunnable runnable;
  String reportDesignName=design.getFileName();
  HttpServletRequest request=(HttpServletRequest)runOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)runOptions.getOption(InputOptions.OPT_LOCALE);
  try {
    runnable=ReportEngineService.getInstance().openReportDesign(reportDesignName);
  }
 catch (  EngineException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
  ViewerAttributeBean attrBean=(ViewerAttributeBean)request.getAttribute(""String_Node_Str"");
  Map parsedParams=attrBean.getParameters();
  parsedParams.putAll(this.getParsedParameters(design,runOptions,parameters));
  try {
    ReportEngineService.getInstance().runReport(request,runnable,outputDocName,locale,(HashMap)parsedParams);
  }
 catch (  RemoteException e) {
    e.printStackTrace();
    throw new ReportServiceException(e.getLocalizedMessage());
  }
  return outputDocName;
}","public String runReport(IViewerReportDesignHandle design,String outputDocName,InputOptions runOptions,Map parameters) throws ReportServiceException {
  IReportRunnable runnable;
  HttpServletRequest request=(HttpServletRequest)runOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)runOptions.getOption(InputOptions.OPT_LOCALE);
  ViewerAttributeBean attrBean=(ViewerAttributeBean)request.getAttribute(""String_Node_Str"");
  Map parsedParams=attrBean.getParameters();
  if (parameters != null) {
    parsedParams.putAll(parameters);
  }
  runnable=(IReportRunnable)design.getDesignObject();
  try {
    ReportEngineService.getInstance().runReport(request,runnable,outputDocName,locale,(HashMap)parsedParams);
  }
 catch (  RemoteException e) {
    e.printStackTrace();
    throw new ReportServiceException(e.getLocalizedMessage());
  }
  return outputDocName;
}",0.5146078933880062
78058,"public void runAndRenderReport(IViewerReportDesignHandle design,String outputDocName,InputOptions options,Map parameters,OutputStream out,List activeIds) throws ReportServiceException {
  String reportDesignName=design.getFileName();
  HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
  Boolean isMasterPageContent=(Boolean)options.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  Boolean svgFlag=(Boolean)options.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  String format=(String)options.getOption(InputOptions.OPT_RENDER_FORMAT);
  Boolean isRtl=(Boolean)options.getOption(InputOptions.OPT_RTL);
  try {
    IReportRunnable runnable=ReportEngineService.getInstance().openReportDesign(reportDesignName);
    Map parsedParams=getParsedParameters(design,options,parameters);
    ReportEngineService.getInstance().runAndRenderReport(request,runnable,out,format,locale,isRtl.booleanValue(),parsedParams,isMasterPageContent.booleanValue(),svgFlag.booleanValue());
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
catch (  EngineException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
}","public void runAndRenderReport(IViewerReportDesignHandle design,String outputDocName,InputOptions options,Map parameters,OutputStream out,List activeIds) throws ReportServiceException {
  HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
  Boolean isMasterPageContent=(Boolean)options.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  Boolean svgFlag=(Boolean)options.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  String format=(String)options.getOption(InputOptions.OPT_RENDER_FORMAT);
  Boolean isRtl=(Boolean)options.getOption(InputOptions.OPT_RTL);
  try {
    IReportRunnable runnable=(IReportRunnable)design.getDesignObject();
    ReportEngineService.getInstance().runAndRenderReport(request,runnable,out,format,locale,isRtl.booleanValue(),parameters,isMasterPageContent.booleanValue(),svgFlag.booleanValue());
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
}",0.7872797593467985
78059,"protected void __execute() throws RemoteException {
  ViewerAttributeBean attrBean=(ViewerAttributeBean)context.getBean();
  try {
    String reportDesignName=attrBean.getReportDesignName();
    String configFileName=reportDesignName.replaceFirst(IBirtConstants.SUFFIX_DESIGN_FILE,IBirtConstants.SUFFIX_DESIGN_CONFIG);
    SessionHandle sessionHandle=DesignEngine.newSession(ULocale.getDefault());
    File configFile=new File(configFileName);
    if (configFile != null && configFile.exists() && configFile.isFile()) {
      configFile.delete();
    }
    ReportDesignHandle handle=sessionHandle.createDesign();
    IReportRunnable runnable=(IReportRunnable)attrBean.getReportDesignHandle(context.getRequest()).getDesignObject();
    ModuleHandle model=runnable.getDesignHandle().getModuleHandle();
    Oprand[] op=this.operation.getOprand();
    if (op != null) {
      for (int i=0; i < op.length; i++) {
        ConfigVariable configVar=new ConfigVariable();
        ParameterHandle parameterHandle=model.findParameter(op[i].getName());
        if (parameterHandle != null) {
          configVar.setName(op[i].getName() + parameterHandle.getID());
          configVar.setValue(op[i].getValue());
          handle.addConfigVariable(configVar);
        }
      }
    }
    handle.saveAs(configFileName);
    handle.close();
    handleUpdate();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault();
    fault.setFaultCode(new QName(""String_Node_Str""));
    fault.setFaultReason(e.getLocalizedMessage());
    throw fault;
  }
}","protected void __execute() throws RemoteException {
  ViewerAttributeBean attrBean=(ViewerAttributeBean)context.getBean();
  try {
    String reportDesignName=attrBean.getReportDesignName();
    String configFileName=reportDesignName.replaceFirst(IBirtConstants.SUFFIX_DESIGN_FILE,IBirtConstants.SUFFIX_DESIGN_CONFIG);
    SessionHandle sessionHandle=DesignEngine.newSession(ULocale.getDefault());
    File configFile=new File(configFileName);
    if (configFile != null && configFile.exists() && configFile.isFile()) {
      configFile.delete();
    }
    ReportDesignHandle handle=sessionHandle.createDesign();
    IReportRunnable runnable=(IReportRunnable)attrBean.getReportDesignHandle(context.getRequest()).getDesignObject();
    ModuleHandle model=runnable.getDesignHandle().getModuleHandle();
    Oprand[] op=this.operation.getOprand();
    if (op != null) {
      Iterator paramIr=null;
      if (attrBean.getParameterList() != null)       paramIr=attrBean.getParameterList().iterator();
      for (int i=0; i < op.length; i++) {
        ConfigVariable configVar=new ConfigVariable();
        String paramName=op[i].getName();
        String paramValue=op[i].getValue();
        ParameterHandle parameterHandle=model.findParameter(paramName);
        if (parameterHandle != null && paramValue != null && paramIr != null) {
          while (paramIr.hasNext()) {
            ParameterDefinition parameterObj=(ParameterDefinition)paramIr.next();
            if (paramName.equals(parameterObj.getName())) {
              ReportParameterConverter converter=new ReportParameterConverter(parameterObj.getPattern(),attrBean.getLocale());
              Object paramValueObj=converter.parse(paramValue,parameterObj.getDataType());
              converter=new ReportParameterConverter(parameterObj.getPattern(),ULocale.US);
              paramValue=converter.format(paramValueObj);
              break;
            }
          }
          if (paramValue != null) {
            configVar.setName(paramName + parameterHandle.getID());
            configVar.setValue(paramValue);
            handle.addConfigVariable(configVar);
          }
        }
      }
    }
    handle.saveAs(configFileName);
    handle.close();
    handleUpdate();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault();
    fault.setFaultCode(new QName(""String_Node_Str""));
    fault.setFaultReason(e.getLocalizedMessage());
    throw fault;
  }
}",0.7549167927382754
78060,"/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.reportPage=String.valueOf(ParameterAccessor.getPage(request));
  this.reportDocumentName=ParameterAccessor.getReportDocument(request);
  this.reportDesignName=ParameterAccessor.getReport(request);
  this.format=ParameterAccessor.getFormat(request);
  processReport(request);
  String title=null;
  if (title == null || title.trim().length() <= 0) {
    title=BirtResources.getString(""String_Node_Str"");
  }
  this.reportTitle=ParameterAccessor.htmlEncode(title);
  this.__initParameters(request);
}","/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.reportPage=String.valueOf(ParameterAccessor.getPage(request));
  this.reportDocumentName=ParameterAccessor.getReportDocument(request);
  this.reportDesignName=ParameterAccessor.getReport(request);
  this.format=ParameterAccessor.getFormat(request);
  this.maxRows=ParameterAccessor.getMaxRows(request);
  ReportEngineService.getInstance().setMaxRows(this.maxRows);
  processReport(request);
  String title=null;
  if (title == null || title.trim().length() <= 0) {
    title=BirtResources.getString(""String_Node_Str"");
  }
  this.reportTitle=ParameterAccessor.htmlEncode(title);
  this.__initParameters(request);
}",0.9414141414141414
78061,"/** 
 * Render image.
 * @param imageId
 * @param outputStream
 * @throws EngineException
 */
public void renderImage(String imageId,OutputStream outputStream) throws RemoteException {
  assert(this.imageHandler != null);
  try {
    this.imageHandler.getImage(outputStream,this.imageDirectory,imageId);
  }
 catch (  EngineException e) {
    AxisFault fault=new AxisFault();
    fault.setFaultCode(new QName(""String_Node_Str""));
    fault.setFaultString(e.getLocalizedMessage());
    throw fault;
  }
}","/** 
 * Render image.
 * @param imageId
 * @param outputStream
 * @throws EngineException
 */
public void renderImage(String imageId,OutputStream outputStream) throws RemoteException {
  assert(this.imageHandler != null);
  try {
    this.imageHandler.getImage(outputStream,this.imageDirectory,imageId);
  }
 catch (  EngineException e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage());
    fault.setFaultCode(new QName(""String_Node_Str""));
    fault.setFaultString(e.getLocalizedMessage());
    throw fault;
  }
}",0.977648202137998
78062,"/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param config Servlet configuration
 */
public synchronized static void initParameters(ServletConfig config){
  ServletContext context=config.getServletContext();
  workingFolder=context.getInitParameter(INIT_PARAM_REPORT_DIR);
  if (workingFolder == null || workingFolder.trim().length() <= 0) {
    workingFolder=context.getRealPath(""String_Node_Str"");
  }
  if (workingFolder != null && workingFolder.trim().endsWith(File.separator)) {
    workingFolder=workingFolder.trim().substring(0,workingFolder.trim().length() - 1);
  }
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  clearDocuments();
}","/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param config Servlet configuration
 */
public synchronized static void initParameters(ServletConfig config){
  ServletContext context=config.getServletContext();
  workingFolder=context.getInitParameter(INIT_PARAM_REPORT_DIR);
  if (workingFolder == null || workingFolder.trim().length() <= 0) {
    workingFolder=context.getRealPath(""String_Node_Str"");
  }
  if (workingFolder != null && workingFolder.trim().endsWith(File.separator)) {
    workingFolder=workingFolder.trim().substring(0,workingFolder.trim().length() - 1);
  }
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  clearDocuments();
}",0.8996865203761756
78063,"private void populateLists(){
  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
  String[] saFontNames=ge.getAvailableFontFamilyNames();
  String currentFont=ChartUIUtil.getFontName(fdCurrent);
  cmbFontNames.add(FONT_AUTO);
  if (FONT_AUTO.equals(currentFont)) {
    cmbFontNames.select(0);
  }
  for (int iC=0; iC < saFontNames.length; iC++) {
    cmbFontNames.add(saFontNames[iC]);
    if (saFontNames[iC].equalsIgnoreCase(currentFont)) {
      cmbFontNames.select(iC);
    }
  }
  if (cmbFontNames.getSelectionIndex() == -1) {
    cmbFontNames.select(0);
  }
  if (isAlignmentEnabled && fdCurrent.getAlignment() != null && fdCurrent.getAlignment().isSetHorizontalAlignment() && fdCurrent.getAlignment().isSetVerticalAlignment()) {
    HorizontalAlignment ha=fdCurrent.getAlignment().getHorizontalAlignment();
    VerticalAlignment va=fdCurrent.getAlignment().getVerticalAlignment();
    if (HorizontalAlignment.LEFT_LITERAL.equals(ha)) {
      if (VerticalAlignment.TOP_LITERAL.equals(va)) {
        btnATopLeft.setSelection(true);
      }
 else       if (VerticalAlignment.BOTTOM_LITERAL.equals(va)) {
        btnABottomLeft.setSelection(true);
      }
 else {
        btnACenterLeft.setSelection(true);
      }
    }
 else     if (HorizontalAlignment.RIGHT_LITERAL.equals(ha)) {
      if (VerticalAlignment.TOP_LITERAL.equals(va)) {
        btnATopRight.setSelection(true);
      }
 else       if (VerticalAlignment.BOTTOM_LITERAL.equals(va)) {
        btnABottomRight.setSelection(true);
      }
 else {
        btnACenterRight.setSelection(true);
      }
    }
 else {
      if (VerticalAlignment.TOP_LITERAL.equals(va)) {
        btnATopCenter.setSelection(true);
      }
 else       if (VerticalAlignment.BOTTOM_LITERAL.equals(va)) {
        btnABottomCenter.setSelection(true);
      }
 else {
        btnACenter.setSelection(true);
      }
    }
  }
}","private void populateLists(){
  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
  String[] saFontNames=ge.getAvailableFontFamilyNames();
  String currentFont=ChartUIUtil.getFontName(fdCurrent);
  cmbFontNames.add(FONT_AUTO);
  if (FONT_AUTO.equals(currentFont)) {
    cmbFontNames.select(0);
  }
  for (int iC=0; iC < saFontNames.length; iC++) {
    cmbFontNames.add(saFontNames[iC]);
    if (saFontNames[iC].equalsIgnoreCase(currentFont)) {
      cmbFontNames.select(iC + 1);
    }
  }
  if (cmbFontNames.getSelectionIndex() == -1) {
    cmbFontNames.select(0);
  }
  if (isAlignmentEnabled && fdCurrent.getAlignment() != null && fdCurrent.getAlignment().isSetHorizontalAlignment() && fdCurrent.getAlignment().isSetVerticalAlignment()) {
    HorizontalAlignment ha=fdCurrent.getAlignment().getHorizontalAlignment();
    VerticalAlignment va=fdCurrent.getAlignment().getVerticalAlignment();
    if (HorizontalAlignment.LEFT_LITERAL.equals(ha)) {
      if (VerticalAlignment.TOP_LITERAL.equals(va)) {
        btnATopLeft.setSelection(true);
      }
 else       if (VerticalAlignment.BOTTOM_LITERAL.equals(va)) {
        btnABottomLeft.setSelection(true);
      }
 else {
        btnACenterLeft.setSelection(true);
      }
    }
 else     if (HorizontalAlignment.RIGHT_LITERAL.equals(ha)) {
      if (VerticalAlignment.TOP_LITERAL.equals(va)) {
        btnATopRight.setSelection(true);
      }
 else       if (VerticalAlignment.BOTTOM_LITERAL.equals(va)) {
        btnABottomRight.setSelection(true);
      }
 else {
        btnACenterRight.setSelection(true);
      }
    }
 else {
      if (VerticalAlignment.TOP_LITERAL.equals(va)) {
        btnATopCenter.setSelection(true);
      }
 else       if (VerticalAlignment.BOTTOM_LITERAL.equals(va)) {
        btnABottomCenter.setSelection(true);
      }
 else {
        btnACenter.setSelection(true);
      }
    }
  }
}",0.9989423585404548
78064,"/** 
 * Copies values of <code>sourceHandle</code> to <code>sourceDesign</code>.
 * @param setHandle the Model handle
 * @param setDesign the ODA data source design
 */
public void updateDataSetDesign(OdaDataSetHandle setHandle,DataSetDesign setDesign){
  setDesign.setName(setHandle.getName());
  setDesign.setDisplayName(setHandle.getDisplayName());
  setDesign.setOdaExtensionDataSetId(setHandle.getExtensionID());
  setDesign.setPublicProperties(newOdaPublicProperties(setHandle.getExtensionPropertyDefinitionList(),setHandle));
  setDesign.setPrivateProperties(newOdaPrivateProperties(setHandle.privateDriverPropertiesIterator()));
  setDesign.setPrimaryResultSetName(setHandle.getResultSetName());
  setDesign.setQueryText(setHandle.getQueryText());
  OdaDataSourceHandle sourceHandle=(OdaDataSourceHandle)setHandle.getDataSource();
  if (sourceHandle != null)   setDesign.setDataSourceDesign(createDataSourceDesign(sourceHandle));
  setDesign.setParameters(new DataSetParameterAdapter().newOdaDataSetParams(setHandle.parametersIterator()));
  setDesign.setPrimaryResultSet(ResultSetsAdapter.newOdaResultSetDefinition(setHandle));
}","/** 
 * Copies values of <code>sourceHandle</code> to <code>sourceDesign</code>.
 * @param setHandle the Model handle
 * @param setDesign the ODA data source design
 */
public void updateDataSetDesign(OdaDataSetHandle setHandle,DataSetDesign setDesign,String propertyName){
  if (propertyName == null)   return;
  if (propertyName.equalsIgnoreCase(OdaDataSetHandle.NAME_PROP))   setDesign.setName(setHandle.getName());
 else   if (propertyName.equalsIgnoreCase(OdaDataSetHandle.DISPLAY_NAME_PROP))   setDesign.setDisplayName(setHandle.getDisplayName());
 else   if (propertyName.equalsIgnoreCase(OdaDataSourceHandle.EXTENSION_ID_PROP))   setDesign.setOdaExtensionDataSetId(setHandle.getExtensionID());
 else   if (propertyName.equalsIgnoreCase(OdaDataSetHandle.PRIVATE_DRIVER_PROPERTIES_PROP))   setDesign.setPrivateProperties(newOdaPrivateProperties(setHandle.privateDriverPropertiesIterator()));
 else   if (propertyName.equalsIgnoreCase(OdaDataSetHandle.RESULT_SET_NAME_PROP))   setDesign.setPrimaryResultSetName(setHandle.getResultSetName());
 else   if (propertyName.equalsIgnoreCase(OdaDataSetHandle.QUERY_TEXT_PROP))   setDesign.setQueryText(setHandle.getQueryText());
 else   if (propertyName.equalsIgnoreCase(OdaDataSetHandle.DATA_SOURCE_PROP)) {
    OdaDataSourceHandle sourceHandle=(OdaDataSourceHandle)setHandle.getDataSource();
    if (sourceHandle != null)     setDesign.setDataSourceDesign(createDataSourceDesign(sourceHandle));
  }
 else   if (propertyName.equalsIgnoreCase(OdaDataSetHandle.PARAMETERS_PROP))   setDesign.setParameters(new DataSetParameterAdapter().newOdaDataSetParams(setHandle.parametersIterator()));
 else   if (propertyName.equalsIgnoreCase(OdaDataSetHandle.RESULT_SET_PROP))   setDesign.setPrimaryResultSet(ResultSetsAdapter.newOdaResultSetDefinition(setHandle));
}",0.6136054421768707
78065,"/** 
 * Save below information into report document: result class group information subquery information
 * @param odiResult
 * @throws DataException
 */
private void saveResultIterator(IResultIterator odiResult,int groupLevel,int[] subQueryInfo) throws DataException {
  try {
    boolean isSubQuery=streamManager.isSubquery();
    OutputStream streamForResultClass=null;
    if (isSubQuery == false)     streamForResultClass=streamManager.getOutStream(DataEngineContext.RESULTCLASS_STREAM);
    OutputStream streamForGroupInfo=streamManager.getOutStream(DataEngineContext.GROUP_INFO_STREAM);
    odiResult.doSave(streamManager.getOutStream(DataEngineContext.EXPR_VALUE_STREAM),streamManager.getOutStream(DataEngineContext.ROWLENGTH_INFO_STREAM),streamForResultClass,null,streamForGroupInfo,isSubQuery,RDSave.this.exprNameSet);
    streamForGroupInfo.close();
    if (streamForResultClass != null)     streamForResultClass.close();
    if (isSubQuery == true && streamManager.hasSubStream(DataEngineContext.SUBQUERY_INFO_STREAM) == false) {
      OutputStream streamForSubQuery=streamManager.getSubOutStream(DataEngineContext.SUBQUERY_INFO_STREAM);
      RDSubQueryUtil.doSave(streamForSubQuery,groupLevel,subQueryInfo);
      streamForSubQuery.close();
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}","/** 
 * Save below information into report document: result class group information subquery information
 * @param odiResult
 * @throws DataException
 */
private void saveResultIterator(IResultIterator odiResult,int groupLevel,int[] subQueryInfo) throws DataException {
  try {
    boolean isSubQuery=streamManager.isSubquery();
    OutputStream streamForResultClass=null;
    if (isSubQuery == false)     streamForResultClass=streamManager.getOutStream(DataEngineContext.RESULTCLASS_STREAM);
    OutputStream streamForGroupInfo=streamManager.getOutStream(DataEngineContext.GROUP_INFO_STREAM);
    OutputStream streamForExprValue=null;
    OutputStream streamForRowLen=null;
    if (context.getMode() == DataEngineContext.PRESENTATION_AND_GENERATION) {
      streamForExprValue=streamManager.getOutStream(DataEngineContext.EXPR_VALUE_STREAM);
      streamForRowLen=streamManager.getOutStream(DataEngineContext.ROWLENGTH_INFO_STREAM);
    }
    odiResult.doSave(streamForExprValue,streamForRowLen,streamForResultClass,null,streamForGroupInfo,isSubQuery,RDSave.this.exprNameSet);
    if (streamForExprValue != null) {
      streamForExprValue.close();
      streamForRowLen.close();
    }
    streamForGroupInfo.close();
    if (streamForResultClass != null)     streamForResultClass.close();
    if (isSubQuery == true && streamManager.hasSubStream(DataEngineContext.SUBQUERY_INFO_STREAM) == false) {
      OutputStream streamForSubQuery=streamManager.getSubOutStream(DataEngineContext.SUBQUERY_INFO_STREAM);
      RDSubQueryUtil.doSave(streamForSubQuery,groupLevel,subQueryInfo);
      streamForSubQuery.close();
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}",0.8748395378690629
78066,"/** 
 * init save environment
 */
private void initSave(boolean finish) throws DataException {
  if (inited == true)   return;
  inited=true;
  try {
    rowExprsDos=new DataOutputStream(rowExprsOs);
    rowLenDos=new DataOutputStream(rowLenOs);
    int totalRowCount=0;
    if (finish == true)     totalRowCount=rowCount;
 else     totalRowCount=rowCount == 0 ? 1 : rowCount;
    IOUtil.writeInt(this.rowExprsDos,totalRowCount);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","/** 
 * init save environment
 */
private void initSave(boolean finish) throws DataException {
  if (inited == true)   return;
  inited=true;
  try {
    int totalRowCount=0;
    if (finish == true)     totalRowCount=rowCount;
 else     totalRowCount=rowCount == 0 ? 1 : rowCount;
    IOUtil.writeInt(this.rowExprsDos,totalRowCount);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9004149377593361
78067,"/** 
 */
public RowSaveUtil(int rowCount,OutputStream rowExprsOs,OutputStream rowLenOs,Set exprNameSet){
  this.rowCount=rowCount;
  this.currRowBytes=0;
  this.rowExprsOs=rowExprsOs;
  this.rowLenOs=rowLenOs;
  this.exprNameSet=exprNameSet;
}","/** 
 */
public RowSaveUtil(int rowCount,OutputStream rowExprsOs,OutputStream rowLenOs,Set exprNameSet){
  this.rowCount=rowCount;
  this.exprNameSet=exprNameSet;
  this.currRowBytes=0;
  this.rowExprsDos=new DataOutputStream(rowExprsOs);
  this.rowLenDos=new DataOutputStream(rowLenOs);
}",0.7706766917293233
78068,"/** 
 * Checks if the version of a design file is of old version.
 * @param fileName the file name with full path of the design file
 * @return <code>-1</code> if the version of given file is lower thancurrent version; <code>0</code> if they are equal; otherwise, return <code>1</code>.
 * @throws DesignFileException if any exception happens
 * @throws FileNotFoundException
 */
public static int checkVersion(String fileName) throws DesignFileException, FileNotFoundException {
  return checkVersion(new BufferedInputStream(new FileInputStream(fileName)));
}","/** 
 * Checks whether the opening design file holds a version number before the some specific features is supported. This method is used to remind user that opening the file may need convert the original file automatically.
 * @param fileName the file name with full path of the design file
 * @return a list whose entry is of <code>IVersionInfo</code> type. Eachkind of automatical conversion information is stored in one instance of <code>IVersionInfo</code>. Note that if the design file does not exist, or it is an invalid design file, an instance of <code>IVersionInfo</code> will also generate. If the size of the return list is 0, there is no auto-conversion.
 */
public static List checkVersion(String fileName){
  List rtnList=new ArrayList();
  InputStream inputStream=null;
  try {
    inputStream=new BufferedInputStream(new FileInputStream(fileName));
    rtnList.addAll(checkVersion(inputStream));
  }
 catch (  FileNotFoundException e1) {
    rtnList.add(new VersionInfo(null,VersionInfo.INVALID_DESIGN_FILE));
  }
catch (  DesignFileException e1) {
    rtnList.add(new VersionInfo(null,VersionInfo.INVALID_DESIGN_FILE));
  }
 finally {
    try {
      if (inputStream != null)       inputStream.close();
    }
 catch (    IOException e) {
    }
  }
  return rtnList;
}",0.2363143631436314
78069,"/** 
 * @param queryDefn
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSourceDataSet(QueryDefinition queryDefn) throws AdapterException, BirtException {
  String dataSetName=queryDefn.getDataSetName();
  List l=this.moduleHandle.getAllDataSets();
  DataSetHandle handle=null;
  for (int i=0; i < l.size(); i++) {
    if (((DataSetHandle)l.get(i)).getName() != null && ((DataSetHandle)l.get(i)).getName().equals(dataSetName)) {
      handle=(DataSetHandle)l.get(i);
    }
  }
  defineDataSet(handle);
}","/** 
 * @param queryDefn
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSourceDataSet(QueryDefinition queryDefn) throws AdapterException, BirtException {
  String dataSetName=queryDefn.getDataSetName();
  List l=this.moduleHandle.getAllDataSets();
  DataSetHandle handle=null;
  for (int i=0; i < l.size(); i++) {
    if (((DataSetHandle)l.get(i)).getQualifiedName() != null && ((DataSetHandle)l.get(i)).getQualifiedName().equals(dataSetName)) {
      handle=(DataSetHandle)l.get(i);
    }
  }
  defineDataSet(handle);
}",0.9834558823529412
78070,"protected void pageChange(int newPageIndex){
  int oldPageIndex=getCurrentPage();
  if (oldPageIndex == newPageIndex) {
    return;
  }
  if (oldPageIndex != -1) {
    Object oldPage=pages.get(oldPageIndex);
    Object newPage=pages.get(newPageIndex);
    super.pageChange(newPageIndex);
    if (!prePageChanges(oldPage,newPage)) {
      super.setActivePage(oldPageIndex);
    }
  }
 else {
    super.pageChange(newPageIndex);
  }
  updateRelatedViews();
  bingdingKey(newPageIndex);
}","protected void pageChange(int newPageIndex){
  int oldPageIndex=getCurrentPage();
  if (oldPageIndex == newPageIndex) {
    return;
  }
  if (oldPageIndex != -1) {
    Object oldPage=pages.get(oldPageIndex);
    Object newPage=pages.get(newPageIndex);
    super.pageChange(newPageIndex);
    if (!prePageChanges(oldPage,newPage)) {
      super.setActivePage(oldPageIndex);
      updateRelatedViews();
      return;
    }
  }
 else {
    super.pageChange(newPageIndex);
  }
  updateRelatedViews();
  bingdingKey(newPageIndex);
}",0.958498023715415
78071,"private void updateRelatedViews(){
  updatePaletteView(getActivePageInstance());
  updateOutLineView(getActivePageInstance());
  updateDateView(getActivePageInstance());
}","private void updateRelatedViews(){
  updatePaletteView(getCurrentPageInstance());
  updateOutLineView(getCurrentPageInstance());
  updateDateView(getCurrentPageInstance());
}",0.9043478260869564
78072,"private void refreshValues(){
  resultList.clear();
  if (columnChooser.isEnabled()) {
    DataSetItemModel selectedColumn=null;
    try {
      BaseQueryDefinition query=(BaseQueryDefinition)DataSetManager.getCurrentInstance().getPreparedQuery(getDataSetHandle()).getReportQueryDefn();
      String queryExpr=null;
      for (int i=0; i < columns.length; i++) {
        if (columns[i].getName().equals(columnChooser.getText())) {
          String colName=(columns[i]).getAlias();
          if (colName == null || colName.trim().length() == 0) {
            colName=(columns[i]).getName();
          }
          queryExpr=DEUtil.getResultSetColumnExpression(colName);
          selectedColumn=columns[i];
          break;
        }
      }
      if (queryExpr == null) {
        return;
      }
      ScriptExpression expression=new ScriptExpression(queryExpr);
      String columnBindingName=""String_Node_Str"";
      query.addResultSetExpression(columnBindingName,expression);
      IPreparedQuery preparedQuery=DataSetManager.getCurrentInstance().getEngine().prepare((IQueryDefinition)query);
      IQueryResults results=preparedQuery.execute(null);
      if (results != null) {
        IResultIterator iter=results.getResultIterator();
        if (iter != null) {
          DateFormatter formatter=new DateFormatter(DATE_TIME_PATTERN);
          while (iter.next()) {
            String result=null;
            if (selectedColumn.getDataType() == DataType.DATE_TYPE) {
              result=formatter.format(iter.getDate(columnBindingName));
            }
 else {
              result=iter.getString(columnBindingName);
            }
            if (!StringUtil.isBlank(result) && !resultList.contains(result)) {
              resultList.add(result);
            }
          }
        }
        results.close();
      }
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
      valueList.removeAll();
      valueList.deselectAll();
      updateButtons();
    }
    filteValues();
  }
 else {
    valueList.removeAll();
    valueList.deselectAll();
    updateButtons();
  }
}","private void refreshValues(){
  resultList.clear();
  if (columnChooser.isEnabled()) {
    ResultSetColumnHandle selectedColumn=null;
    try {
      BaseQueryDefinition query=(BaseQueryDefinition)DataUtil.getPreparedQuery(engine,getDataSetHandle()).getReportQueryDefn();
      String queryExpr=null;
      for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
        ResultSetColumnHandle column=(ResultSetColumnHandle)iter.next();
        if (column.getColumnName().equals(columnChooser.getText())) {
          queryExpr=DEUtil.getResultSetColumnExpression(column.getColumnName());
          selectedColumn=column;
          break;
        }
      }
      if (queryExpr == null) {
        return;
      }
      ScriptExpression expression=new ScriptExpression(queryExpr);
      String columnBindingName=""String_Node_Str"";
      query.addResultSetExpression(columnBindingName,expression);
      IPreparedQuery preparedQuery=engine.prepare((IQueryDefinition)query);
      IQueryResults results=preparedQuery.execute(null);
      if (results != null) {
        IResultIterator iter=results.getResultIterator();
        if (iter != null) {
          DateFormatter formatter=new DateFormatter(DATE_TIME_PATTERN);
          while (iter.next()) {
            String result=null;
            if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(selectedColumn.getDataType())) {
              result=formatter.format(iter.getDate(columnBindingName));
            }
 else {
              result=iter.getString(columnBindingName);
            }
            if (!StringUtil.isBlank(result) && !resultList.contains(result)) {
              resultList.add(result);
            }
          }
        }
        results.close();
      }
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
      valueList.removeAll();
      valueList.deselectAll();
      updateButtons();
    }
    filteValues();
  }
 else {
    valueList.removeAll();
    valueList.deselectAll();
    updateButtons();
  }
}",0.8526110297706199
78073,"private boolean matchType(ResultSetColumnHandle model){
  return style.equals(model.getDataType());
}","private boolean matchType(ResultSetColumnHandle column){
  if (style.equals(DesignChoiceConstants.PARAM_TYPE_STRING) || DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(column.getDataType())) {
    return true;
  }
  if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_DECIMAL);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_FLOAT);
  }
 else   if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(column.getDataType())) {
    return style.equals(DesignChoiceConstants.PARAM_TYPE_FLOAT) || style.equals(DesignChoiceConstants.PARAM_TYPE_DECIMAL);
  }
  return false;
}",0.141747572815534
78074,"protected boolean initDialog(){
  dataSetChooser.setItems(ChoiceSetFactory.getDataSets());
  dataSetChooser.select(0);
  currentDataSetName=dataSetChooser.getText();
  refreshColumns();
  return true;
}","protected boolean initDialog(){
  try {
    engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  dataSetChooser.setItems(ChoiceSetFactory.getDataSets());
  dataSetChooser.select(0);
  currentDataSetName=dataSetChooser.getText();
  refreshColumns();
  return true;
}",0.5925925925925926
78075,"private void refreshColumns(){
  columns=DataSetManager.getCurrentInstance().getColumns(currentDataSetName,false);
  columnChooser.removeAll();
  selectedColumnIndex=-1;
  if (columns.length == 0) {
    columnChooser.setItems(new String[0]);
  }
 else {
    ArrayList columnList=new ArrayList();
    for (int i=0; i < columns.length; i++) {
      if (matchType(columns[i])) {
        columnChooser.add(columns[i].getDataSetColumnName());
        columnList.add(columns[i]);
        selectedColumnIndex=0;
      }
    }
  }
  columnChooser.select(selectedColumnIndex);
  columnChooser.setEnabled(selectedColumnIndex == 0);
  refreshValues();
}","private void refreshColumns(){
  DataSetHandle dataSetHandle=getDataSetHandle();
  try {
    columnList=DataUtil.getColumnList(dataSetHandle);
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
  columnChooser.removeAll();
  selectedColumnIndex=-1;
  if (columnList.size() == 0) {
    columnChooser.setItems(new String[0]);
  }
 else {
    ArrayList matachedColumnList=new ArrayList();
    for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
      ResultSetColumnHandle column=(ResultSetColumnHandle)iter.next();
      if (matchType(column)) {
        columnChooser.add(column.getColumnName());
        matachedColumnList.add(column);
        selectedColumnIndex=0;
      }
    }
  }
  columnChooser.select(selectedColumnIndex);
  columnChooser.setEnabled(selectedColumnIndex == 0);
  refreshValues();
}",0.7041299932295193
78076,"/** 
 * @see GraphicalEditor#createPartControl(Composite)
 */
public void createPartControl(Composite parent){
  splitter=new FlyoutPaletteComposite(parent,SWT.NONE,getSite().getPage(),getPaletteViewerProvider(),getPalettePreferences());
  super.createPartControl(splitter);
  Control ctrl=getGraphicalControl();
  splitter.setGraphicalControl(ctrl);
  if (page != null) {
    splitter.setExternalViewer(page.getPaletteViewer());
    page=null;
  }
  DataSetManager.initCurrentInstance(getEditorInput());
}","/** 
 * @see GraphicalEditor#createPartControl(Composite)
 */
public void createPartControl(Composite parent){
  splitter=new FlyoutPaletteComposite(parent,SWT.NONE,getSite().getPage(),getPaletteViewerProvider(),getPalettePreferences());
  super.createPartControl(splitter);
  Control ctrl=getGraphicalControl();
  splitter.setGraphicalControl(ctrl);
  if (page != null) {
    splitter.setExternalViewer(page.getPaletteViewer());
    page=null;
  }
}",0.9414225941422594
78077,"protected Control createDialogArea(Composite parent){
  Composite parentComposite=(Composite)super.createDialogArea(parent);
  Composite composite=new Composite(parentComposite,SWT.NONE);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  composite.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  CLabel warnLabel=new CLabel(composite,SWT.NONE);
  warnLabel.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_WARN_TSK));
  warnLabel.setText(WARN_COLUMN_BINDINGS);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  warnLabel.setLayoutData(gd);
  Label label=new Label(composite,SWT.NONE);
  label.setText(LABEL_COLUMN_BINDINGS);
  label.setLayoutData(new GridData(GridData.BEGINNING));
  combo=new CCombo(composite,SWT.READ_ONLY | SWT.BORDER);
  combo.setBackground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
  String[] dataSets=ChoiceSetFactory.getDataSets();
  String[] newList=new String[dataSets.length + 1];
  newList[0]=NONE;
  System.arraycopy(dataSets,0,newList,1,dataSets.length);
  combo.setItems(newList);
  String dataSetName=getDataSetName();
  combo.deselectAll();
  combo.setText(dataSetName);
  combo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  gd=new GridData();
  gd.widthHint=250;
  combo.setLayoutData(gd);
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      String value=combo.getText();
      if (value.equals(NONE)) {
        value=null;
      }
      if (canChangeDataSet(value)) {
        try {
          startTrans(""String_Node_Str"");
          DataSetHandle dataSet=null;
          if (value != null) {
            dataSet=SessionHandleAdapter.getInstance().getReportDesignHandle().findDataSet(value);
          }
          inputElement.setDataSet(dataSet);
          generateBindingColumns();
          getPropertyHandle().setStringValue(null);
          commit();
        }
 catch (        SemanticException e) {
          rollback();
          ExceptionHandler.handle(e);
        }
      }
 else {
        combo.setText(getDataSetName());
      }
    }
  }
);
  Table table=new Table(parentComposite,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER| (canSelect ? SWT.CHECK : 0));
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=200;
  table.setLayoutData(gd);
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addKeyListener(new KeyAdapter(){
    /** 
 * @see org.eclipse.swt.events.KeyAdapter#keyReleased(org.eclipse.swt.events.KeyEvent)
 */
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        IStructuredSelection selection=(IStructuredSelection)bindingTable.getSelection();
        if (selection.getFirstElement() instanceof ComputedColumnHandle) {
          deleteRow((ComputedColumnHandle)selection.getFirstElement());
        }
      }
    }
  }
);
  String[] columns=null;
  int[] columnWidth=null;
  CellEditor[] cellEditors;
  expressionCellEditor=new ExpressionCellEditor(table);
  columns=new String[]{null,COLUMN_NAME,COLUMN_DATATYPE,COLUMN_EXPRESSION,COLUMN_AGGREGATEON};
  columnWidth=new int[]{canSelect ? 25 : 20,150,70,150,150};
  groupList=DEUtil.getGroups(inputElement);
  groups=new String[groupList.size() + 1];
  groups[0]=NONE;
  for (int i=0; i < groupList.size(); i++) {
    groups[i + 1]=((GroupHandle)groupList.get(i)).getName();
  }
  cellEditors=new CellEditor[]{null,new TextCellEditor(table),new ComboBoxCellEditor(table,dataTypeDisplayNames),expressionCellEditor,new ComboBoxCellEditor(table,groups,SWT.READ_ONLY)};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null);
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  if (canSelect) {
    bindingTable=new CheckboxTableViewer(table);
    ((CheckboxTableViewer)bindingTable).addCheckStateListener(new ICheckStateListener(){
      public void checkStateChanged(      CheckStateChangedEvent event){
        if (event.getElement() instanceof ComputedColumnHandle) {
          ComputedColumnHandle handle=(ComputedColumnHandle)event.getElement();
          if (handle.getName().equals(selectedColumnName)) {
            selectedColumnName=null;
          }
 else {
            selectedColumnName=handle.getName();
          }
          updateSelection();
          updateButtons();
        }
 else {
          ((CheckboxTableViewer)bindingTable).setChecked(dummyChoice,false);
        }
      }
    }
);
  }
 else {
    bindingTable=new TableViewer(table);
  }
  bindingTable.setCellEditors(cellEditors);
  bindingTable.setColumnProperties(columns);
  bindingTable.setContentProvider(contentProvider);
  bindingTable.setLabelProvider(labelProvider);
  bindingTable.setCellModifier(cellModifier);
  bindingTable.setInput(inputElement);
  bindingTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      if (!bindingTable.getSelection().isEmpty()) {
        Object obj=((IStructuredSelection)bindingTable.getSelection()).getFirstElement();
        if (obj == dummyChoice && !existDefaultColumn()) {
          bindingTable.refresh();
          bindingTable.getTable().getItem(bindingTable.getTable().getSelectionIndex() - 1).setForeground(1,Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          bindingTable.getTable().setSelection(bindingTable.getTable().getSelectionIndex() - 1);
        }
 else         if (obj instanceof ComputedColumnHandle) {
          ComputedColumnHandle column=(ComputedColumnHandle)obj;
          BindingExpressionProvider provider=new BindingExpressionProvider(column.getElementHandle());
          provider.addFilter(new ComputedColumnExpressionFilter(bindingTable));
          expressionCellEditor.setExpressionProvider(provider);
        }
      }
    }
  }
);
  initTableCellColor();
  return parentComposite;
}","protected Control createDialogArea(Composite parent){
  Composite parentComposite=(Composite)super.createDialogArea(parent);
  Composite composite=new Composite(parentComposite,SWT.NONE);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  composite.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  CLabel warnLabel=new CLabel(composite,SWT.NONE);
  warnLabel.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_WARN_TSK));
  warnLabel.setText(WARN_COLUMN_BINDINGS);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  warnLabel.setLayoutData(gd);
  Label label=new Label(composite,SWT.NONE);
  label.setText(LABEL_COLUMN_BINDINGS);
  label.setLayoutData(new GridData(GridData.BEGINNING));
  combo=new CCombo(composite,SWT.READ_ONLY | SWT.BORDER);
  combo.setBackground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
  String[] dataSets=ChoiceSetFactory.getDataSets();
  String[] newList=new String[dataSets.length + 1];
  newList[0]=NONE;
  System.arraycopy(dataSets,0,newList,1,dataSets.length);
  combo.setItems(newList);
  String dataSetName=getDataSetName();
  combo.deselectAll();
  combo.setText(dataSetName);
  combo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  gd=new GridData();
  gd.widthHint=250;
  combo.setLayoutData(gd);
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      String value=combo.getText();
      if (value.equals(NONE)) {
        value=null;
      }
      if (canChangeDataSet(value)) {
        try {
          startTrans(""String_Node_Str"");
          DataSetHandle dataSet=null;
          if (value != null) {
            dataSet=SessionHandleAdapter.getInstance().getReportDesignHandle().findDataSet(value);
          }
          inputElement.setDataSet(dataSet);
          generateBindingColumns();
          getPropertyHandle().setStringValue(null);
          commit();
        }
 catch (        SemanticException e) {
          rollback();
          ExceptionHandler.handle(e);
        }
      }
 else {
        combo.setText(getDataSetName());
      }
    }
  }
);
  Table table=new Table(parentComposite,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER| (canSelect ? SWT.CHECK : 0));
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=200;
  table.setLayoutData(gd);
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addKeyListener(new KeyAdapter(){
    /** 
 * @see org.eclipse.swt.events.KeyAdapter#keyReleased(org.eclipse.swt.events.KeyEvent)
 */
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        IStructuredSelection selection=(IStructuredSelection)bindingTable.getSelection();
        if (selection.getFirstElement() instanceof ComputedColumnHandle) {
          deleteRow((ComputedColumnHandle)selection.getFirstElement());
        }
      }
    }
  }
);
  String[] columns=null;
  int[] columnWidth=null;
  CellEditor[] cellEditors;
  expressionCellEditor=new ExpressionCellEditor(table);
  columns=new String[]{null,COLUMN_NAME,COLUMN_DATATYPE,COLUMN_EXPRESSION,COLUMN_AGGREGATEON};
  columnWidth=new int[]{canSelect ? 25 : 20,150,70,150,150};
  groupList=DEUtil.getGroups(inputElement);
  groups=new String[groupList.size() + 1];
  groups[0]=NONE;
  for (int i=0; i < groupList.size(); i++) {
    groups[i + 1]=((GroupHandle)groupList.get(i)).getName();
  }
  cellEditors=new CellEditor[]{null,new TextCellEditor(table),new ComboBoxCellEditor(table,dataTypeDisplayNames),expressionCellEditor,new ComboBoxCellEditor(table,groups,SWT.READ_ONLY)};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null);
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  if (canSelect) {
    bindingTable=new CheckboxTableViewer(table);
    ((CheckboxTableViewer)bindingTable).addCheckStateListener(new ICheckStateListener(){
      public void checkStateChanged(      CheckStateChangedEvent event){
        if (event.getElement() instanceof ComputedColumnHandle) {
          ComputedColumnHandle handle=(ComputedColumnHandle)event.getElement();
          if (handle.getName().equals(selectedColumnName)) {
            selectedColumnName=null;
          }
 else {
            selectedColumnName=handle.getName();
          }
          updateSelection();
          updateButtons();
        }
 else {
          ((CheckboxTableViewer)bindingTable).setChecked(dummyChoice,false);
        }
      }
    }
);
  }
 else {
    bindingTable=new TableViewer(table);
  }
  bindingTable.setCellEditors(cellEditors);
  bindingTable.setColumnProperties(columns);
  bindingTable.setContentProvider(contentProvider);
  bindingTable.setLabelProvider(labelProvider);
  bindingTable.setCellModifier(cellModifier);
  bindingTable.setInput(inputElement);
  bindingTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      if (!bindingTable.getSelection().isEmpty()) {
        Object obj=((IStructuredSelection)bindingTable.getSelection()).getFirstElement();
        if (obj == dummyChoice && !existHighLightColumn()) {
          bindingTable.refresh();
          setHihtLightColumn();
        }
 else         if (obj instanceof ComputedColumnHandle) {
          ComputedColumnHandle column=(ComputedColumnHandle)obj;
          BindingExpressionProvider provider=new BindingExpressionProvider(column.getElementHandle());
          provider.addFilter(new ComputedColumnExpressionFilter(bindingTable));
          expressionCellEditor.setExpressionProvider(provider);
        }
      }
    }
  }
);
  return parentComposite;
}",0.9014985687826234
78078,"public Object getValue(Object element,String property){
  if (element == dummyChoice) {
    ComputedColumn column=StructureFactory.createComputedColumn();
    column.setName(DEFAULT_COLUMN_NAME);
    column.setExpression(""String_Node_Str"");
    addBinding(column);
    return ""String_Node_Str"";
  }
  ComputedColumnHandle handle=((ComputedColumnHandle)element);
  String value=null;
  if (COLUMN_NAME.equals(property)) {
    value=handle.getName();
  }
 else   if (COLUMN_DATATYPE.equals(property)) {
    IChoice type=dataTypeChoiceSet.findChoice(handle.getDataType());
    if (type != null) {
      for (int i=0; i < dataTypeDisplayNames.length; i++) {
        if (dataTypeDisplayNames[i].equals(type.getDisplayName())) {
          return new Integer(i);
        }
      }
    }
    return new Integer(0);
  }
 else   if (COLUMN_EXPRESSION.equals(property)) {
    value=handle.getExpression();
  }
 else   if (COLUMN_AGGREGATEON.equals(property)) {
    value=handle.getAggregrateOn();
    ;
    if (value != null) {
      for (int i=1; i < groups.length; i++) {
        if (value.equals(groups[i])) {
          return new Integer(i);
        }
      }
    }
    return new Integer(0);
  }
  if (value == null) {
    value=""String_Node_Str"";
  }
  return value;
}","public Object getValue(Object element,String property){
  if (element == dummyChoice) {
    ComputedColumn column=StructureFactory.newComputedColumn(inputElement,DEFAULT_COLUMN_NAME);
    column.setExpression(""String_Node_Str"");
    addBinding(column);
    highLightName=column.getName();
    return ""String_Node_Str"";
  }
  ComputedColumnHandle handle=((ComputedColumnHandle)element);
  String value=null;
  if (COLUMN_NAME.equals(property)) {
    value=handle.getName();
  }
 else   if (COLUMN_DATATYPE.equals(property)) {
    IChoice type=dataTypeChoiceSet.findChoice(handle.getDataType());
    if (type != null) {
      for (int i=0; i < dataTypeDisplayNames.length; i++) {
        if (dataTypeDisplayNames[i].equals(type.getDisplayName())) {
          return new Integer(i);
        }
      }
    }
    return new Integer(0);
  }
 else   if (COLUMN_EXPRESSION.equals(property)) {
    value=handle.getExpression();
  }
 else   if (COLUMN_AGGREGATEON.equals(property)) {
    value=handle.getAggregrateOn();
    ;
    if (value != null) {
      for (int i=1; i < groups.length; i++) {
        if (value.equals(groups[i])) {
          return new Integer(i);
        }
      }
    }
    return new Integer(0);
  }
  if (value == null) {
    value=""String_Node_Str"";
  }
  return value;
}",0.9568627450980391
78079,"public void modify(Object element,String property,Object value){
  if (element instanceof Item) {
    element=((Item)element).getData();
  }
  try {
    if (COLUMN_NAME.equals(property)) {
      String newName=UIUtil.convertToModelString((String)value,false);
      if (element == dummyChoice) {
        if (newName == null) {
          return;
        }
      }
 else {
        ComputedColumnHandle columnHandle=(ComputedColumnHandle)element;
        boolean selectedNameChanged=false;
        if (columnHandle.getName().equals(selectedColumnName)) {
          selectedNameChanged=true;
        }
        if (DEFAULT_COLUMN_NAME.equals(((ComputedColumnHandle)element).getName()) && !DEFAULT_COLUMN_NAME.equals(newName)) {
          bindingTable.getTable().getItem(bindingTable.getTable().getSelectionIndex()).setForeground(1,Display.getDefault().getSystemColor(SWT.COLOR_LIST_FOREGROUND));
        }
        ((ComputedColumnHandle)element).setName(newName);
        if (selectedNameChanged) {
          selectedColumnName=newName;
        }
      }
    }
 else {
      ComputedColumnHandle bindingHandle=((ComputedColumnHandle)element);
      if (COLUMN_DATATYPE.equals(property)) {
        bindingHandle.setDataType(dataTypes[((Integer)value).intValue()].getName());
      }
 else       if (COLUMN_EXPRESSION.equals(property)) {
        bindingHandle.setExpression((String)value);
      }
 else       if (COLUMN_AGGREGATEON.equals(property)) {
        if (((Integer)value).intValue() == 0)         bindingHandle.setAggregrateOn(null);
 else         bindingHandle.setAggregrateOn(groups[((Integer)value).intValue()]);
      }
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
  refreshBindingTable();
}","public void modify(Object element,String property,Object value){
  if (element instanceof Item) {
    element=((Item)element).getData();
  }
  try {
    if (COLUMN_NAME.equals(property)) {
      String newName=UIUtil.convertToModelString((String)value,false);
      if (element == dummyChoice) {
        if (newName == null) {
          return;
        }
      }
 else {
        ComputedColumnHandle columnHandle=(ComputedColumnHandle)element;
        boolean selectedNameChanged=false;
        if (columnHandle.getName().equals(selectedColumnName)) {
          selectedNameChanged=true;
        }
        if (highLightName != null && highLightName.equals(((ComputedColumnHandle)element).getName()) && !highLightName.equals(newName)) {
          bindingTable.getTable().getItem(bindingTable.getTable().getSelectionIndex()).setForeground(1,Display.getDefault().getSystemColor(SWT.COLOR_LIST_FOREGROUND));
        }
        ((ComputedColumnHandle)element).setName(newName);
        if (selectedNameChanged) {
          selectedColumnName=newName;
        }
      }
    }
 else {
      ComputedColumnHandle bindingHandle=((ComputedColumnHandle)element);
      if (COLUMN_DATATYPE.equals(property)) {
        bindingHandle.setDataType(dataTypes[((Integer)value).intValue()].getName());
      }
 else       if (COLUMN_EXPRESSION.equals(property)) {
        bindingHandle.setExpression((String)value);
      }
 else       if (COLUMN_AGGREGATEON.equals(property)) {
        if (((Integer)value).intValue() == 0)         bindingHandle.setAggregrateOn(null);
 else         bindingHandle.setAggregrateOn(groups[((Integer)value).intValue()]);
      }
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
  refreshBindingTable();
}",0.9467932125395456
78080,"public void selectionChanged(SelectionChangedEvent event){
  if (!bindingTable.getSelection().isEmpty()) {
    Object obj=((IStructuredSelection)bindingTable.getSelection()).getFirstElement();
    if (obj == dummyChoice && !existDefaultColumn()) {
      bindingTable.refresh();
      bindingTable.getTable().getItem(bindingTable.getTable().getSelectionIndex() - 1).setForeground(1,Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
      bindingTable.getTable().setSelection(bindingTable.getTable().getSelectionIndex() - 1);
    }
 else     if (obj instanceof ComputedColumnHandle) {
      ComputedColumnHandle column=(ComputedColumnHandle)obj;
      BindingExpressionProvider provider=new BindingExpressionProvider(column.getElementHandle());
      provider.addFilter(new ComputedColumnExpressionFilter(bindingTable));
      expressionCellEditor.setExpressionProvider(provider);
    }
  }
}","public void selectionChanged(SelectionChangedEvent event){
  if (!bindingTable.getSelection().isEmpty()) {
    Object obj=((IStructuredSelection)bindingTable.getSelection()).getFirstElement();
    if (obj == dummyChoice && !existHighLightColumn()) {
      bindingTable.refresh();
      setHihtLightColumn();
    }
 else     if (obj instanceof ComputedColumnHandle) {
      ComputedColumnHandle column=(ComputedColumnHandle)obj;
      BindingExpressionProvider provider=new BindingExpressionProvider(column.getElementHandle());
      provider.addFilter(new ComputedColumnExpressionFilter(bindingTable));
      expressionCellEditor.setExpressionProvider(provider);
    }
  }
}",0.7844387755102041
78081,"protected DataSetDesign collectDataSetDesign(DataSetDesign design){
  if (design != null && doc != null)   design.setQueryText(doc.get());
  return design;
}","protected DataSetDesign collectDataSetDesign(DataSetDesign design){
  if (design != null && doc != null)   design.setQueryText(doc.get());
  if (!formerQueryTxt.equals(design.getQueryText())) {
    savePage(design);
    formerQueryTxt=design.getQueryText();
  }
  return design;
}",0.6498855835240275
78082,"/** 
 * Prepare UI when pageActivated event is invoked Following things will be done: Set StyledText content Set StyledText as focus
 */
private void prepareUI(){
  StyledText styledText=viewer.getTextWidget();
  String queryText=styledText.getText();
  if (queryText != null && queryText.equalsIgnoreCase(getQueryPresetTextString())) {
    String[] lines=getQueryPresetTextArray();
    if (lines != null && lines.length > 0)     styledText.setSelection(lines[0].length() + 1,lines[0].length() + 1);
  }
  styledText.setFocus();
}","/** 
 * Prepare UI when pageActivated event is invoked Following things will be done: Set StyledText content Set StyledText as focus
 */
private void prepareUI(){
  StyledText styledText=viewer.getTextWidget();
  String queryText=styledText.getText();
  this.formerQueryTxt=queryText;
  if (queryText != null && queryText.equalsIgnoreCase(getQueryPresetTextString())) {
    String[] lines=getQueryPresetTextArray();
    if (lines != null && lines.length > 0)     styledText.setSelection(lines[0].length() + 1,lines[0].length() + 1);
  }
  styledText.setFocus();
}",0.969807868252516
78083,"protected Element createText(String text){
  Element elem=dom.createElement(""String_Node_Str"");
  elem.appendChild(dom.createTextNode(text));
switch (getFont().getStyle()) {
case Font.BOLD:
    elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
  break;
case Font.ITALIC:
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
break;
case (Font.BOLD + Font.ITALIC):
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
break;
}
String textDecorator=null;
Map attributes=getFont().getAttributes();
if (attributes.get(TextAttribute.UNDERLINE) == TextAttribute.UNDERLINE_ON) {
textDecorator=""String_Node_Str"";
}
if (attributes.get(TextAttribute.STRIKETHROUGH) == TextAttribute.STRIKETHROUGH_ON) {
if (textDecorator == null) textDecorator=""String_Node_Str"";
 else textDecorator+=""String_Node_Str"";
}
if (textDecorator != null) elem.setAttribute(""String_Node_Str"",textDecorator);
elem.setAttribute(""String_Node_Str"",getFont().getFamily());
elem.setAttribute(""String_Node_Str"",Integer.toString(getFont().getSize()));
String style=getRenderingStyle(RenderingHints.KEY_TEXT_ANTIALIASING);
if (color != null) {
String alpha=alphaToString(color);
if (alpha != null) style+=""String_Node_Str"" + alpha + ""String_Node_Str"";
style+=""String_Node_Str"" + serializeToString(color) + ""String_Node_Str"";
}
elem.setAttribute(""String_Node_Str"",style);
if (transforms.getType() != AffineTransform.TYPE_IDENTITY) {
double[] matrix=new double[6];
transforms.getMatrix(matrix);
elem.setAttribute(""String_Node_Str"",""String_Node_Str"" + matrix[0] + ""String_Node_Str""+ matrix[1]+ ""String_Node_Str""+ matrix[2]+ ""String_Node_Str""+ matrix[3]+ ""String_Node_Str""+ matrix[4]+ ""String_Node_Str""+ matrix[5]+ ""String_Node_Str"");
}
return elem;
}","protected Element createText(String text){
  Element elem=dom.createElement(""String_Node_Str"");
  elem.appendChild(dom.createTextNode(text));
switch (getFont().getStyle()) {
case Font.BOLD:
    elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
  break;
case Font.ITALIC:
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
break;
case (Font.BOLD + Font.ITALIC):
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
break;
}
String textDecorator=null;
Map attributes=getFont().getAttributes();
if (attributes.get(TextAttribute.UNDERLINE) == TextAttribute.UNDERLINE_ON) {
textDecorator=""String_Node_Str"";
}
if (attributes.get(TextAttribute.STRIKETHROUGH) == TextAttribute.STRIKETHROUGH_ON) {
if (textDecorator == null) textDecorator=""String_Node_Str"";
 else textDecorator+=""String_Node_Str"";
}
if (textDecorator != null) elem.setAttribute(""String_Node_Str"",textDecorator);
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
elem.setAttribute(""String_Node_Str"",getFont().getFamily());
elem.setAttribute(""String_Node_Str"",Integer.toString(getFont().getSize()));
String style=getRenderingStyle(RenderingHints.KEY_TEXT_ANTIALIASING);
if (color != null) {
String alpha=alphaToString(color);
if (alpha != null) style+=""String_Node_Str"" + alpha + ""String_Node_Str"";
style+=""String_Node_Str"" + serializeToString(color) + ""String_Node_Str"";
}
elem.setAttribute(""String_Node_Str"",style);
if (transforms.getType() != AffineTransform.TYPE_IDENTITY) {
double[] matrix=new double[6];
transforms.getMatrix(matrix);
elem.setAttribute(""String_Node_Str"",""String_Node_Str"" + matrix[0] + ""String_Node_Str""+ matrix[1]+ ""String_Node_Str""+ matrix[2]+ ""String_Node_Str""+ matrix[3]+ ""String_Node_Str""+ matrix[4]+ ""String_Node_Str""+ matrix[5]+ ""String_Node_Str"");
}
return elem;
}",0.9844271412680756
78084,"/** 
 * Sets the operator of this filter condition. The allowed values are defined in   {@link org.eclipse.birt.report.model.api.elements.DesignChoiceConstants}, and they are: <ul> <li><code>FILTER_OPERATOR_EQ</code> <li><code>FILTER_OPERATOR_NE</code> <li><code>FILTER_OPERATOR_LT</code> <li><code>FILTER_OPERATOR_LE</code> <li><code>FILTER_OPERATOR_GE</code> <li><code>FILTER_OPERATOR_GT</code> <li><code>FILTER_OPERATOR_BETWEEN</code> <li><code>FILTER_OPERATOR_NOT_BETWEEN</code> <li><code>FILTER_OPERATOR_NULL</code> <li><code>FILTER_OPERATOR_NOT_NULL</code> <li><code>FILTER_OPERATOR_TRUE</code> <li><code>FILTER_OPERATOR_FALSE</code> <li><code>FILTER_OPERATOR_LIKE</code> <li><code>FILTER_OPERATOR_TOP_N</code> <li><code>FILTER_OPERATOR_BOTTOM_N</code> <li><code>FILTER_OPERATOR_TOP_PERCENT</code> <li><code>FILTER_OPERATOR_BOTTOM_PERCENT</code> <li><code>FILTER_OPERATOR_ANY</code> </ul>
 * @param operator the operator to set
 * @throws SemanticException if operator is not in the choice list.
 */
public void setOperator(String operator) throws SemanticException {
  setProperty(FilterCondition.OPERATOR_MEMBER,operator);
}","/** 
 * Sets the operator of this filter condition. The allowed values are defined in  {@link org.eclipse.birt.report.model.api.elements.DesignChoiceConstants}, and they are: <ul> <li><code>FILTER_OPERATOR_EQ</code> <li><code>FILTER_OPERATOR_NE</code> <li><code>FILTER_OPERATOR_LT</code> <li><code>FILTER_OPERATOR_LE</code> <li><code>FILTER_OPERATOR_GE</code> <li><code>FILTER_OPERATOR_GT</code> <li><code>FILTER_OPERATOR_BETWEEN</code> <li><code>FILTER_OPERATOR_NOT_BETWEEN</code> <li><code>FILTER_OPERATOR_NULL</code> <li><code>FILTER_OPERATOR_NOT_NULL</code> <li><code>FILTER_OPERATOR_TRUE</code> <li><code>FILTER_OPERATOR_FALSE</code> <li><code>FILTER_OPERATOR_LIKE</code> <li><code>FILTER_OPERATOR_TOP_N</code> <li><code>FILTER_OPERATOR_BOTTOM_N</code> <li><code>FILTER_OPERATOR_TOP_PERCENT</code> <li><code>FILTER_OPERATOR_BOTTOM_PERCENT</code> <li><code>FILTER_OPERATOR_ANY</code> </ul>
 * @param operator the operator to set
 * @throws SemanticException if operator is not in the choice list.
 */
public void setOperator(String operator) throws SemanticException {
  setProperty(FilterCondition.OPERATOR_MEMBER,operator);
}",0.9995581087052584
78085,"/** 
 * Returns the operator of this filter condition. The possible values are defined in   {@link org.eclipse.birt.report.model.api.elements.DesignChoiceConstants}, and they are: <ul> <li><code>FILTER_OPERATOR_EQ</code> <li><code>FILTER_OPERATOR_NE</code> <li><code>FILTER_OPERATOR_LT</code> <li><code>FILTER_OPERATOR_LE</code> <li><code>FILTER_OPERATOR_GE</code> <li><code>FILTER_OPERATOR_GT</code> <li><code>FILTER_OPERATOR_BETWEEN</code> <li><code>FILTER_OPERATOR_NOT_BETWEEN</code> <li><code>FILTER_OPERATOR_NULL</code> <li><code>FILTER_OPERATOR_NOT_NULL</code> <li><code>FILTER_OPERATOR_TRUE</code> <li><code>FILTER_OPERATOR_FALSE</code> <li><code>FILTER_OPERATOR_LIKE</code> <li><code>FILTER_OPERATOR_TOP_N</code> <li><code>FILTER_OPERATOR_BOTTOM_N</code> <li><code>FILTER_OPERATOR_TOP_PERCENT</code> <li><code>FILTER_OPERATOR_BOTTOM_PERCENT</code> <li><code>FILTER_OPERATOR_ANY</code> </ul>
 * @return the operator of this filter condition
 */
public String getOperator(){
  return getStringProperty(FilterCondition.OPERATOR_MEMBER);
}","/** 
 * Returns the operator of this filter condition. The possible values are defined in  {@link org.eclipse.birt.report.model.api.elements.DesignChoiceConstants}, and they are: <ul> <li><code>FILTER_OPERATOR_EQ</code> <li><code>FILTER_OPERATOR_NE</code> <li><code>FILTER_OPERATOR_LT</code> <li><code>FILTER_OPERATOR_LE</code> <li><code>FILTER_OPERATOR_GE</code> <li><code>FILTER_OPERATOR_GT</code> <li><code>FILTER_OPERATOR_BETWEEN</code> <li><code>FILTER_OPERATOR_NOT_BETWEEN</code> <li><code>FILTER_OPERATOR_NULL</code> <li><code>FILTER_OPERATOR_NOT_NULL</code> <li><code>FILTER_OPERATOR_TRUE</code> <li><code>FILTER_OPERATOR_FALSE</code> <li><code>FILTER_OPERATOR_LIKE</code> <li><code>FILTER_OPERATOR_TOP_N</code> <li><code>FILTER_OPERATOR_BOTTOM_N</code> <li><code>FILTER_OPERATOR_TOP_PERCENT</code> <li><code>FILTER_OPERATOR_BOTTOM_PERCENT</code> <li><code>FILTER_OPERATOR_ANY</code> </ul>
 * @return the operator of this filter condition
 */
public String getOperator(){
  return getStringProperty(FilterCondition.OPERATOR_MEMBER);
}",0.9995203836930456
78086,"/** 
 * Sets the group name.
 * @param theName the group name to set
 */
public void setName(String theName){
}","/** 
 * Sets the group name.
 * @param theName the group name to set
 */
public void setName(String theName) throws NameException {
}",0.9098360655737704
78087,"/** 
 * Validates whether the group with the given name can be added into the given listing element.
 * @param element List/Table element
 * @param groupName name of the group to add
 * @return error list, each of which is the instance of<code>SemanticException</code>.
 */
public List validateForAddingGroup(ListingHandle element,String groupName){
  List groupList=Collections.EMPTY_LIST;
  ListingElement targetElement=getListingElement(element.getModule(),(ListingElement)element.getElement());
  if (targetElement == null) {
    targetElement=(ListingElement)element.getElement();
    groupList=getGroups(element.getModule(),(ListingElement)element.getElement());
  }
 else {
    groupList=getGroupsWithContents(element.getModule(),targetElement);
  }
  List list=new ArrayList();
  if (isDuplicateGroupName(element.getModule(),groupList,groupName)) {
    list.add(new SemanticError(targetElement,new String[]{groupName},SemanticError.DESIGN_EXCEPTION_DUPLICATE_GROUP_NAME));
    return list;
  }
  return list;
}","/** 
 * Validates whether the group with the given name can be added into the given listing element.
 * @param element List/Table element
 * @param groupName name of the group to add
 * @return error list, each of which is the instance of<code>SemanticException</code>.
 */
public List validateForAddingGroup(ListingHandle element,String groupName){
  List groupList=Collections.EMPTY_LIST;
  ListingElement targetElement=getListingElement(element.getModule(),(ListingElement)element.getElement());
  if (targetElement == null) {
    targetElement=(ListingElement)element.getElement();
    groupList=getGroups(element.getModule(),(ListingElement)element.getElement());
  }
 else {
    groupList=getGroupsWithContents(element.getModule(),targetElement);
  }
  List list=new ArrayList();
  if (isDuplicateGroupName(element.getModule(),groupList,groupName)) {
    list.add(new NameException(targetElement,groupName,NameException.DESIGN_EXCEPTION_DUPLICATE));
    return list;
  }
  return list;
}",0.9617105917454004
78088,"/** 
 * Validates whether the group can be renamed to the given name.
 * @param element List/Table element
 * @param group the group to rename
 * @param groupName name of the group to add
 * @return error list, each of which is the instance of<code>SemanticException</code>.
 */
public List validateForRenamingGroup(ListingHandle element,GroupHandle group,String groupName){
  if (group.getName() == groupName || (groupName != null && groupName.equals(group.getName()))) {
    return Collections.EMPTY_LIST;
  }
  ListingElement targetElement=getListingElement(element.getModule(),(ListingElement)element.getElement());
  if (targetElement == null)   return Collections.EMPTY_LIST;
  List groupList=getGroupsWithContents(element.getModule(),targetElement);
  List list=new ArrayList();
  if (isDuplicateGroupName(element.getModule(),groupList,groupName)) {
    list.add(new SemanticError(targetElement,new String[]{groupName},SemanticError.DESIGN_EXCEPTION_DUPLICATE_GROUP_NAME));
    return list;
  }
  return list;
}","/** 
 * Validates whether the group can be renamed to the given name.
 * @param element List/Table element
 * @param group the group to rename
 * @param groupName name of the group to add
 * @return error list, each of which is the instance of<code>SemanticException</code>.
 */
public List validateForRenamingGroup(ListingHandle element,GroupHandle group,String groupName){
  if (group.getName() == groupName || (groupName != null && groupName.equals(group.getName()))) {
    return Collections.EMPTY_LIST;
  }
  ListingElement targetElement=getListingElement(element.getModule(),(ListingElement)element.getElement());
  if (targetElement == null)   return Collections.EMPTY_LIST;
  List groupList=getGroupsWithContents(element.getModule(),targetElement);
  List list=new ArrayList();
  if (isDuplicateGroupName(element.getModule(),groupList,groupName)) {
    list.add(new NameException(targetElement,groupName,NameException.DESIGN_EXCEPTION_DUPLICATE));
    return list;
  }
  return list;
}",0.9527598209845848
78089,"/** 
 * Validates whether the style can be renamed to the given name.
 * @param theme the theme element
 * @param style the style to rename
 * @param styleName the new name of the style to add
 * @return error list, each of which is the instance of<code>SemanticException</code>.
 */
public List validateForRenamingStyle(ThemeHandle theme,StyleHandle style,String styleName){
  if (style.getName() == styleName || (styleName != null && styleName.equals(style.getName())))   return Collections.EMPTY_LIST;
  return validateForAddingStyle(theme,styleName);
}","/** 
 * Validates whether the style can be renamed to the given name.
 * @param theme the theme element
 * @param style the style to rename
 * @param styleName the new name of the style to add
 * @return error list, each of which is the instance of<code>SemanticException</code>.
 */
public List validateForRenamingStyle(ThemeHandle theme,StyleHandle style,String styleName){
  if (style.getName() == styleName || (styleName != null && styleName.equals(style.getName())))   return Collections.EMPTY_LIST;
  List list=new ArrayList();
  StyleHandle tmpStyle=theme.findStyle(styleName);
  if (tmpStyle != null && style != tmpStyle) {
    list.add(new NameException(theme.getElement(),styleName,NameException.DESIGN_EXCEPTION_DUPLICATE));
  }
  return list;
}",0.7820121951219512
78090,"public void dispose(){
  DataSetManager.removeInstance(this.getEditorInput());
  if (fPalettePage != null) {
    fPalettePage.dispose();
  }
  if (outlinePage != null) {
    outlinePage.dispose();
  }
  if (dataPage != null) {
    dataPage.dispose();
  }
  SessionHandleAdapter.getInstance().getMediator().removeGlobalColleague(this);
  super.dispose();
}","public void dispose(){
  if (fPalettePage != null) {
    fPalettePage.dispose();
  }
  if (outlinePage != null) {
    outlinePage.dispose();
  }
  if (dataPage != null) {
    dataPage.dispose();
  }
  SessionHandleAdapter.getInstance().getMediator().removeGlobalColleague(this);
  super.dispose();
}",0.9143730886850152
78091,"public void partActivated(IWorkbenchPart part){
  if (part != this) {
    if (part instanceof PageBookView) {
      PageBookView view=(PageBookView)part;
      if (view.getCurrentPage() instanceof DesignerOutlinePage) {
        ISelectionProvider provider=(ISelectionProvider)view.getCurrentPage();
        ReportRequest request=new ReportRequest(view.getCurrentPage());
        List list=new ArrayList();
        if (provider.getSelection() instanceof IStructuredSelection) {
          list=((IStructuredSelection)provider.getSelection()).toList();
        }
        request.setSelectionObject(list);
        request.setType(ReportRequest.SELECTION);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
        SessionHandleAdapter.getInstance().getMediator().pushState();
      }
    }
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getEditDomain().getPaletteViewer() != null) {
        GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
        GraphicalViewer view=editor.getGraphicalViewer();
        view.getEditDomain().loadDefaultTool();
      }
    }
    return;
  }
  if (part == this) {
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
      GraphicalViewer view=editor.getGraphicalViewer();
      UIUtil.resetViewSelection(view,true);
    }
    if (getEditorInput().exists()) {
      handleActivation();
      SessionHandleAdapter.getInstance().setReportDesignHandle(getModel());
      DataSetManager.initCurrentInstance(getEditorInput());
    }
  }
}","public void partActivated(IWorkbenchPart part){
  if (part != this) {
    if (part instanceof PageBookView) {
      PageBookView view=(PageBookView)part;
      if (view.getCurrentPage() instanceof DesignerOutlinePage) {
        ISelectionProvider provider=(ISelectionProvider)view.getCurrentPage();
        ReportRequest request=new ReportRequest(view.getCurrentPage());
        List list=new ArrayList();
        if (provider.getSelection() instanceof IStructuredSelection) {
          list=((IStructuredSelection)provider.getSelection()).toList();
        }
        request.setSelectionObject(list);
        request.setType(ReportRequest.SELECTION);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
        SessionHandleAdapter.getInstance().getMediator().pushState();
      }
    }
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getEditDomain().getPaletteViewer() != null) {
        GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
        GraphicalViewer view=editor.getGraphicalViewer();
        view.getEditDomain().loadDefaultTool();
      }
    }
    return;
  }
  if (part == this) {
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
      GraphicalViewer view=editor.getGraphicalViewer();
      UIUtil.resetViewSelection(view,true);
    }
    if (getEditorInput().exists()) {
      handleActivation();
      SessionHandleAdapter.getInstance().setReportDesignHandle(getModel());
    }
  }
}",0.9830316742081447
78092,"public void setGroupName(String name){
  this.groupName=name;
}","public void setGroupName(String name){
  if (name != null)   this.groupName=name;
 else   this.groupName=GROUP_OVERALL;
}",0.6847826086956522
78093,"protected void addColumBinding(IBaseQueryDefinition transfer,ComputedColumnHandle binding){
  String name=binding.getName();
  String expr=binding.getExpression();
  String type=binding.getDataType();
  int dbType=ModelDteApiAdapter.toDteDataType(type);
  IBaseExpression dbExpr=new ScriptExpression(expr,dbType);
  transfer.getResultSetExpressions().put(name,dbExpr);
}","protected void addColumBinding(IBaseQueryDefinition transfer,ComputedColumnHandle binding){
  String name=binding.getName();
  String expr=binding.getExpression();
  String type=binding.getDataType();
  int dbType=ModelDteApiAdapter.toDteDataType(type);
  IBaseExpression dbExpr=new ScriptExpression(expr,dbType);
  dbExpr.setGroupName(binding.getAggregrateOn());
  transfer.getResultSetExpressions().put(name,dbExpr);
}",0.9367088607594936
78094,"/** 
 * Initializes the Jdbc related information , used  by this page ( such as the Jdbc Connection , Catalog Name etc )
 * @param curDataSourceHandle
 */
protected void resetJdbcInfo(DataSourceDesign curDataSourceDesign){
  if (metaDataProvider != null) {
    metaDataProvider.closeConnection();
    metaDataProvider=null;
    createMetaDataProvider();
    jdbcConnection=connectMetadataProvider(metaDataProvider,curDataSourceDesign);
    tableList=null;
    schemaList=null;
    schemaCombo.removeAll();
  }
  try {
    if (jdbcConnection != null) {
      isSchemaSupported=metaDataProvider.isSchemaSupported();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.showException(null,""String_Node_Str"",""String_Node_Str"",e);
  }
}","/** 
 * Initializes the Jdbc related information , used  by this page ( such as the Jdbc Connection , Catalog Name etc )
 * @param curDataSourceHandle
 */
protected void resetJdbcInfo(DataSourceDesign curDataSourceDesign){
  if (metaDataProvider != null) {
    metaDataProvider.closeConnection();
    metaDataProvider=null;
    createMetaDataProvider();
    jdbcConnection=connectMetadataProvider(metaDataProvider,curDataSourceDesign);
    tableList=null;
    schemaList=null;
    schemaCombo.removeAll();
  }
  try {
    if (jdbcConnection != null) {
      isSchemaSupported=metaDataProvider.isSchemaSupported();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.showException(this.getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
}",0.9412541254125412
78095,"/** 
 * Initializes the Jdbc related information , used  by this page ( such as the Jdbc Connection , Catalog Name etc )
 */
protected void initJdbcInfo(){
  createMetaDataProvider();
  prevDataSourceDesign=this.getDataSetDesign().getDataSourceDesign();
  jdbcConnection=connectMetadataProvider(metaDataProvider,prevDataSourceDesign);
  validConnection=(jdbcConnection == null) ? false : true;
  try {
    if (jdbcConnection != null) {
      isSchemaSupported=metaDataProvider.isSchemaSupported();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.showException(null,""String_Node_Str"",""String_Node_Str"",e);
  }
}","/** 
 * Initializes the Jdbc related information , used  by this page ( such as the Jdbc Connection , Catalog Name etc )
 */
protected void initJdbcInfo(){
  createMetaDataProvider();
  prevDataSourceDesign=this.getDataSetDesign().getDataSourceDesign();
  jdbcConnection=connectMetadataProvider(metaDataProvider,prevDataSourceDesign);
  validConnection=(jdbcConnection == null) ? false : true;
  try {
    if (jdbcConnection != null) {
      isSchemaSupported=metaDataProvider.isSchemaSupported();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.showException(this.getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
}",0.930631332813718
78096,"/** 
 * @return
 */
private DataSetDesign getDataSetDesign(){
  return this.getInitializationDesign();
}","/** 
 * @return
 */
private DataSetDesign getDataSetDesign(){
  if (dataSetDesign == null)   dataSetDesign=this.getInitializationDesign();
  return dataSetDesign;
}",0.753731343283582
78097,"protected boolean initDialog(){
  if (inputGroup.getName() != null) {
    nameEditor.setText(inputGroup.getName());
  }
  refreshColumnList();
  setKeyExpression(inputGroup.getKeyExpr());
  int index=getIntervalTypeIndex(inputGroup.getInterval());
  intervalType.select(index);
  if (index == 0) {
    intervalRange.setEnabled(false);
    intervalBaseButton.setEnabled(false);
    intervalBaseText.setEnabled(false);
  }
 else {
    intervalRange.setEnabled(true);
    intervalRange.setSelection(inputGroup.getIntervalRange());
    if (getColumnType() == String.class) {
      intervalBaseButton.setEnabled(false);
      intervalBaseText.setEnabled(false);
    }
 else {
      intervalBaseButton.setEnabled(true);
      intervalBaseButton.setSelection(inputGroup.getIntervalBase() != null);
      intervalBaseText.setEnabled(intervalBaseButton.getSelection());
      if (inputGroup.getIntervalBase() != null) {
        intervalBaseText.setText(inputGroup.getIntervalBase());
      }
    }
  }
  if (inputGroup instanceof TableGroupHandle) {
    includeHeader.setSelection(inputGroup.hasHeader());
    includeFooter.setSelection(inputGroup.hasFooter());
  }
 else {
    includeHeader.setSelection(false);
    includeFooter.setSelection(false);
  }
  if (DesignChoiceConstants.SORT_DIRECTION_ASC.equals(inputGroup.getSortDirection())) {
    ascending.setSelection(true);
  }
 else {
    descending.setSelection(true);
  }
  List list=new ArrayList(1);
  list.add(inputGroup);
  tocEditor.setText(UIUtil.convertToGUIString(inputGroup.getTocExpression()));
  index=getPagebreakBeforeIndex(inputGroup.getPageBreakBefore());
  pagebreakBeforeCombo.select(index);
  index=getPagebreakAfterIndex(inputGroup.getPageBreakAfter());
  pagebreakAfterCombo.select(index);
  if (inputGroup.repeatHeader()) {
    repeatHeaderButton.setSelection(true);
  }
  hideDetail.setSelection(inputGroup.hideDetail());
  inputGroup.addListener(this);
  return true;
}","protected boolean initDialog(){
  if (inputGroup.getName() != null) {
    nameEditor.setText(inputGroup.getName());
  }
  refreshColumnList();
  setKeyExpression(inputGroup.getKeyExpr());
  int index=getIntervalTypeIndex(inputGroup.getInterval());
  intervalType.select(index);
  if (index == 0) {
    intervalRange.setEnabled(false);
    intervalBaseButton.setEnabled(false);
    intervalBaseText.setEnabled(false);
  }
 else {
    intervalRange.setEnabled(true);
    intervalRange.setSelection(inputGroup.getIntervalRange());
    if (getColumnType() == String.class) {
      intervalBaseButton.setEnabled(false);
      intervalBaseText.setEnabled(false);
    }
 else {
      intervalBaseButton.setEnabled(true);
      intervalBaseButton.setSelection(inputGroup.getIntervalBase() != null);
      intervalBaseText.setEnabled(intervalBaseButton.getSelection());
      if (inputGroup.getIntervalBase() != null) {
        intervalBaseText.setText(inputGroup.getIntervalBase());
      }
    }
  }
  if (DesignChoiceConstants.SORT_DIRECTION_ASC.equals(inputGroup.getSortDirection())) {
    ascending.setSelection(true);
  }
 else {
    descending.setSelection(true);
  }
  List list=new ArrayList(1);
  list.add(inputGroup);
  tocEditor.setText(UIUtil.convertToGUIString(inputGroup.getTocExpression()));
  index=getPagebreakBeforeIndex(inputGroup.getPageBreakBefore());
  pagebreakBeforeCombo.select(index);
  index=getPagebreakAfterIndex(inputGroup.getPageBreakAfter());
  pagebreakAfterCombo.select(index);
  if (inputGroup.repeatHeader()) {
    repeatHeaderButton.setSelection(true);
  }
  hideDetail.setSelection(inputGroup.hideDetail());
  return true;
}",0.9204229271007234
78098,"/** 
 * Sets the dataset list to use.
 * @param dataSetList
 */
protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc != inputGroup.getTocExpression()) {
      if (newToc == null || !newToc.equals(inputGroup.getTocExpression())) {
        inputGroup.setTocExpression(newToc);
      }
    }
    int index=keyChooser.getSelectionIndex();
    String oldKeyExpr=inputGroup.getKeyExpr();
    String newKeyExpr=getKeyExpression();
    inputGroup.setKeyExpr(newKeyExpr);
    if (newKeyExpr != null && newKeyExpr.length() != 0 && !newKeyExpr.equals(oldKeyExpr) && index != -1) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DataItemHandle dataItemHandle=inputGroup.getElementFactory().newDataItem(null);
        dataItemHandle.setResultSetColumn(((ComputedColumnHandle)columnList.get(index)).getName());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getSelection());
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (intervalBaseText.getEnabled()) {
      inputGroup.setIntervalBase(UIUtil.convertToModelString(intervalBaseText.getText(),false));
    }
 else {
      inputGroup.setIntervalBase(null);
    }
    inputGroup.setHideDetail(hideDetail.getSelection());
    if (inputGroup instanceof TableGroupHandle) {
      if (includeHeader.getSelection() != inputGroup.hasHeader()) {
        if (includeHeader.getSelection()) {
          inputGroup.getHeader().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.HEADER_SLOT);
        }
      }
      if (includeFooter.getSelection() != inputGroup.hasFooter()) {
        if (includeFooter.getSelection()) {
          inputGroup.getFooter().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.FOOTER_SLOT);
        }
      }
    }
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
    inputGroup.setPageBreakBefore(pagebreakBeforeChoicesAll[pagebreakBeforeCombo.getSelectionIndex()].getName());
    inputGroup.setPageBreakAfter(pagebreakAfterChoicesAll[pagebreakAfterCombo.getSelectionIndex()].getName());
    inputGroup.setRepeatHeader(repeatHeaderButton.getSelection());
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}","/** 
 * Sets the dataset list to use.
 * @param dataSetList
 */
protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc != inputGroup.getTocExpression()) {
      if (newToc == null || !newToc.equals(inputGroup.getTocExpression())) {
        inputGroup.setTocExpression(newToc);
      }
    }
    int index=keyChooser.getSelectionIndex();
    String oldKeyExpr=inputGroup.getKeyExpr();
    String newKeyExpr=getKeyExpression();
    inputGroup.setKeyExpr(newKeyExpr);
    if (newKeyExpr != null && newKeyExpr.length() != 0 && !newKeyExpr.equals(oldKeyExpr) && index != -1) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DataItemHandle dataItemHandle=inputGroup.getElementFactory().newDataItem(null);
        dataItemHandle.setResultSetColumn(((ComputedColumnHandle)columnList.get(index)).getName());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getSelection());
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (intervalBaseText.getEnabled()) {
      inputGroup.setIntervalBase(UIUtil.convertToModelString(intervalBaseText.getText(),false));
    }
 else {
      inputGroup.setIntervalBase(null);
    }
    inputGroup.setHideDetail(hideDetail.getSelection());
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
    inputGroup.setPageBreakBefore(pagebreakBeforeChoicesAll[pagebreakBeforeCombo.getSelectionIndex()].getName());
    inputGroup.setPageBreakAfter(pagebreakAfterChoicesAll[pagebreakAfterCombo.getSelectionIndex()].getName());
    inputGroup.setRepeatHeader(repeatHeaderButton.getSelection());
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}",0.899965265717263
78099,"/** 
 * Creates the group area
 * @param parent the parent composite
 */
private void createGroupArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridData layoutData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  layoutData.verticalSpan=2;
  composite.setLayoutData(layoutData);
  composite.setLayout(new GridLayout());
  Group includeGroup=new Group(composite,SWT.NONE);
  includeGroup.setText(GROUP_DLG_HEADER_FOOTER_LABEL);
  includeGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  includeGroup.setLayout(new FillLayout(SWT.VERTICAL));
  Composite includeGroupComposite=new Composite(includeGroup,SWT.NONE);
  includeGroupComposite.setLayout(new GridLayout());
  includeHeader=new Button(includeGroupComposite,SWT.CHECK);
  includeHeader.setText(GROUP_DLG_INCLUDE_HEADER_LABEL);
  includeFooter=new Button(includeGroupComposite,SWT.CHECK);
  includeFooter.setText(GROUP_DLG_INCLUDE_FOOTER_LABEL);
  if (inputGroup instanceof ListGroupHandle) {
    includeGroup.setEnabled(false);
    includeHeader.setEnabled(false);
    includeFooter.setEnabled(false);
  }
  Group sortingGroup=new Group(composite,SWT.NONE);
  sortingGroup.setText(SORT_GROUP_TITLE);
  sortingGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  sortingGroup.setLayout(new FillLayout(SWT.VERTICAL));
  Composite sortingGroupComposite=new Composite(sortingGroup,SWT.NONE);
  sortingGroupComposite.setLayout(new GridLayout());
  ascending=new Button(sortingGroupComposite,SWT.RADIO);
  ascending.setText(sortByAscending.getDisplayName());
  descending=new Button(sortingGroupComposite,SWT.RADIO);
  descending.setText(sortByDescending.getDisplayName());
  Group pagebreakGroup=new Group(composite,SWT.NONE);
  pagebreakGroup.setText(Messages.getString(""String_Node_Str""));
  pagebreakGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  pagebreakGroup.setLayout(layout);
  new Label(pagebreakGroup,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  pagebreakBeforeCombo=new Combo(pagebreakGroup,SWT.NONE);
  for (int i=0; i < pagebreakBeforeChoicesAll.length; i++) {
    pagebreakBeforeCombo.add(pagebreakBeforeChoicesAll[i].getDisplayName());
  }
  pagebreakBeforeCombo.setData(pagebreakBeforeChoicesAll);
  new Label(pagebreakGroup,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  pagebreakAfterCombo=new Combo(pagebreakGroup,SWT.NONE);
  for (int i=0; i < pagebreakAfterChoicesAll.length; i++) {
    pagebreakAfterCombo.add(pagebreakAfterChoicesAll[i].getDisplayName());
  }
  pagebreakAfterCombo.setData(pagebreakAfterChoicesAll);
  repeatHeaderButton=new Button(pagebreakGroup,SWT.CHECK);
  repeatHeaderButton.setText(Messages.getString(""String_Node_Str""));
  GridData data=new GridData();
  data.horizontalSpan=2;
  repeatHeaderButton.setLayoutData(data);
}","/** 
 * Creates the group area
 * @param parent the parent composite
 */
private void createGroupArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridData layoutData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  layoutData.verticalSpan=2;
  composite.setLayoutData(layoutData);
  composite.setLayout(new GridLayout());
  Group sortingGroup=new Group(composite,SWT.NONE);
  sortingGroup.setText(SORT_GROUP_TITLE);
  sortingGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  sortingGroup.setLayout(new FillLayout(SWT.VERTICAL));
  Composite sortingGroupComposite=new Composite(sortingGroup,SWT.NONE);
  sortingGroupComposite.setLayout(new GridLayout());
  ascending=new Button(sortingGroupComposite,SWT.RADIO);
  ascending.setText(sortByAscending.getDisplayName());
  descending=new Button(sortingGroupComposite,SWT.RADIO);
  descending.setText(sortByDescending.getDisplayName());
  Group pagebreakGroup=new Group(composite,SWT.NONE);
  pagebreakGroup.setText(Messages.getString(""String_Node_Str""));
  pagebreakGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  pagebreakGroup.setLayout(layout);
  new Label(pagebreakGroup,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  pagebreakBeforeCombo=new Combo(pagebreakGroup,SWT.NONE);
  for (int i=0; i < pagebreakBeforeChoicesAll.length; i++) {
    pagebreakBeforeCombo.add(pagebreakBeforeChoicesAll[i].getDisplayName());
  }
  pagebreakBeforeCombo.setData(pagebreakBeforeChoicesAll);
  new Label(pagebreakGroup,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  pagebreakAfterCombo=new Combo(pagebreakGroup,SWT.NONE);
  for (int i=0; i < pagebreakAfterChoicesAll.length; i++) {
    pagebreakAfterCombo.add(pagebreakAfterChoicesAll[i].getDisplayName());
  }
  pagebreakAfterCombo.setData(pagebreakAfterChoicesAll);
  repeatHeaderButton=new Button(pagebreakGroup,SWT.CHECK);
  repeatHeaderButton.setText(Messages.getString(""String_Node_Str""));
  GridData data=new GridData();
  data.horizontalSpan=2;
  repeatHeaderButton.setLayoutData(data);
}",0.6545526367766147
78100,"protected void appendMetaData(IBaseTransform query){
  Map bindings=query.getResultSetExpressions();
  Iterator iter=bindings.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    String name=(String)entry.getKey();
    IBaseExpression expr=(IBaseExpression)entry.getValue();
    int type=expr.getDataType();
    metaEntries.add(new MetaDataEntry(name,type));
  }
}","protected void appendMetaData(IBaseQueryDefinition query){
  Map bindings=query.getResultSetExpressions();
  Iterator iter=bindings.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    String name=(String)entry.getKey();
    IBaseExpression expr=(IBaseExpression)entry.getValue();
    int type=expr.getDataType();
    metaEntries.add(new MetaDataEntry(name,type));
  }
}",0.9733009708737864
78101,"public void startCell(ICellContent cell){
  if (isHidden()) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  if (cell != null) {
    int colSpan=getNewColSpan(cell);
    if (colSpan < 1) {
      push(true);
      return;
    }
    push(false);
    writer.openTag(HTMLTags.TAG_TD);
    setStyleName(cell.getStyleClass());
    if (colSpan > 1) {
      writer.attribute(HTMLTags.ATTR_COLSPAN,cell.getColSpan());
    }
    if ((cell.getRowSpan()) > 1) {
      writer.attribute(HTMLTags.ATTR_ROWSPAN,cell.getRowSpan());
    }
    StringBuffer styleBuffer=new StringBuffer();
    IStyle mergedStyle=cell.getStyle();
    String vAlign=null;
    String textAlign=null;
    if (mergedStyle != null) {
      vAlign=mergedStyle.getVerticalAlign();
      textAlign=mergedStyle.getTextAlign();
    }
    if (vAlign == null) {
      IStyle cs=cell.getComputedStyle();
      vAlign=cs.getVerticalAlign();
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(vAlign);
      styleBuffer.append(""String_Node_Str"");
    }
    if (textAlign == null) {
      IStyle cs=cell.getComputedStyle();
      textAlign=cs.getTextAlign();
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(textAlign);
      styleBuffer.append(""String_Node_Str"");
    }
    handleStyle(cell,styleBuffer);
  }
 else {
    writer.openTag(HTMLTags.TAG_TD);
  }
}","public void startCell(ICellContent cell){
  if (isHidden()) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  if (cell != null) {
    int colSpan=getNewColSpan(cell);
    if (colSpan < 1) {
      push(true);
      return;
    }
    push(false);
    writer.openTag(HTMLTags.TAG_TD);
    setStyleName(cell.getStyleClass());
    if (colSpan > 1) {
      writer.attribute(HTMLTags.ATTR_COLSPAN,colSpan);
    }
    if ((cell.getRowSpan()) > 1) {
      writer.attribute(HTMLTags.ATTR_ROWSPAN,cell.getRowSpan());
    }
    StringBuffer styleBuffer=new StringBuffer();
    IStyle mergedStyle=cell.getStyle();
    String vAlign=null;
    String textAlign=null;
    if (mergedStyle != null) {
      vAlign=mergedStyle.getVerticalAlign();
      textAlign=mergedStyle.getTextAlign();
    }
    if (vAlign == null) {
      IStyle cs=cell.getComputedStyle();
      vAlign=cs.getVerticalAlign();
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(vAlign);
      styleBuffer.append(""String_Node_Str"");
    }
    if (textAlign == null) {
      IStyle cs=cell.getComputedStyle();
      textAlign=cs.getTextAlign();
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(textAlign);
      styleBuffer.append(""String_Node_Str"");
    }
    handleStyle(cell,styleBuffer);
  }
 else {
    writer.openTag(HTMLTags.TAG_TD);
  }
}",0.9918938835666912
78102,"/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers){
  if (elm != null) {
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
          String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
        if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
          Element title=svg_g2d.dom.createElement(""String_Node_Str"");
          title.appendChild(svg_g2d.dom.createTextNode(tooltipText));
          elm.appendChild(title);
          if (scriptEvent.equals(""String_Node_Str"")) {
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
          }
 else           elm.setAttribute(scriptEvent,""String_Node_Str"");
        }
      break;
case ActionType.URL_REDIRECT:
    URLValue urlValue=((URLValue)tg.getAction().getValue());
  Element aLink=svg_g2d.createElement(""String_Node_Str"");
aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
aLink.appendChild(elm);
elm=aLink;
if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
elm.setAttribute(scriptEvent,""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str"");
elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
}
 else {
String target=urlValue.getTarget();
if (target == null) target=""String_Node_Str"";
elm.setAttribute(scriptEvent,""String_Node_Str"" + target + ""String_Node_Str""+ urlValue.getBaseUrl()+ ""String_Node_Str"");
}
break;
case ActionType.TOGGLE_VISIBILITY:
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
case ActionType.HIGHLIGHT:
addJSCodeOnElement(src,tg,elm,scriptEvent,tg.getAction().getType().getValue());
break;
case ActionType.INVOKE_SCRIPT:
if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) {
AccessibilityValue accessValue=((AccessibilityValue)tg.getAction().getValue());
if (accessValue.getText() != null) {
Element title=svg_g2d.createElement(""String_Node_Str"");
title.appendChild(svg_g2d.dom.createTextNode(accessValue.getText()));
elm.appendChild(title);
}
if (accessValue.getAccessibility() != null) {
Element description=svg_g2d.createElement(""String_Node_Str"");
description.appendChild(svg_g2d.dom.createTextNode(accessValue.getAccessibility()));
elm.appendChild(description);
}
}
 else {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ src.getSource().hashCode()+ ""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
svg_g2d.addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
}
hotspotLayer.appendChild(elm);
}
}","/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers){
  if (elm != null) {
    boolean redirect=false;
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      if (tg.getAction().getType().getValue() == ActionType.URL_REDIRECT) {
        redirect=true;
        break;
      }
    }
    if (redirect) {
      Element aLink=svg_g2d.createElement(""String_Node_Str"");
      Element group=svg_g2d.createElement(""String_Node_Str"");
      group.appendChild(elm);
      aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
      aLink.appendChild(group);
      elm=group;
      hotspotLayer.appendChild(aLink);
    }
 else     hotspotLayer.appendChild(elm);
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
          String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
        if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
          Element title=svg_g2d.dom.createElement(""String_Node_Str"");
          title.appendChild(svg_g2d.dom.createTextNode(tooltipText));
          elm.appendChild(title);
          if (scriptEvent.equals(""String_Node_Str"")) {
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
          }
 else           elm.setAttribute(scriptEvent,""String_Node_Str"");
        }
      break;
case ActionType.URL_REDIRECT:
    URLValue urlValue=((URLValue)tg.getAction().getValue());
  if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    elm.setAttribute(scriptEvent,""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str"");
    elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    String target=urlValue.getTarget();
    if (target == null)     target=""String_Node_Str"";
    elm.setAttribute(scriptEvent,""String_Node_Str"" + target + ""String_Node_Str""+ urlValue.getBaseUrl()+ ""String_Node_Str"");
  }
break;
case ActionType.TOGGLE_VISIBILITY:
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
case ActionType.HIGHLIGHT:
addJSCodeOnElement(src,tg,elm,scriptEvent,tg.getAction().getType().getValue());
break;
case ActionType.INVOKE_SCRIPT:
if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) {
AccessibilityValue accessValue=((AccessibilityValue)tg.getAction().getValue());
if (accessValue.getText() != null) {
Element title=svg_g2d.createElement(""String_Node_Str"");
title.appendChild(svg_g2d.dom.createTextNode(accessValue.getText()));
elm.appendChild(title);
}
if (accessValue.getAccessibility() != null) {
Element description=svg_g2d.createElement(""String_Node_Str"");
description.appendChild(svg_g2d.dom.createTextNode(accessValue.getAccessibility()));
elm.appendChild(description);
}
}
 else {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ src.getSource().hashCode()+ ""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
svg_g2d.addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
}
}
}",0.6172610776594102
78103,"protected void initializeContent(IContent content){
  content.setReportContent(reportContent);
  InstanceID id=content.getInstanceID();
  if (id != null) {
    long designId=id.getComponentID();
    if (designId != -1) {
      Object generateBy=findReportItem(designId);
      content.setGenerateBy(generateBy);
      if (generateBy instanceof TemplateDesign) {
        TemplateDesign design=(TemplateDesign)generateBy;
        if (content instanceof ILabelContent) {
          ILabelContent labelContent=(ILabelContent)content;
          labelContent.setLabelKey(design.getPromptTextKey());
          labelContent.setLabelText(design.getPromptText());
        }
      }
    }
  }
}","protected void initializeContent(IContent content){
  content.setReportContent(reportContent);
  InstanceID id=content.getInstanceID();
  if (id != null) {
    long designId=id.getComponentID();
    if (designId != -1) {
      Object generateBy=findReportItem(designId);
      content.setGenerateBy(generateBy);
      if (generateBy instanceof TemplateDesign) {
        TemplateDesign design=(TemplateDesign)generateBy;
        if (content instanceof ILabelContent) {
          ILabelContent labelContent=(ILabelContent)content;
          labelContent.setLabelKey(design.getPromptTextKey());
          labelContent.setLabelText(design.getPromptText());
        }
      }
    }
  }
  if (content instanceof IAutoTextContent) {
    IAutoTextContent autoText=(IAutoTextContent)content;
    if (autoText.getType() == IAutoTextContent.TOTAL_PAGE) {
      autoText.setText(String.valueOf(reportDoc.getPageCount()));
    }
  }
}",0.8509045539613225
78104,"public Object getValue(String exprName) throws BirtException {
  checkStarted();
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(exprName));
  if (this.resultService.getBaseExpression(exprName) == null && this.resultService.getAutoBindingExpr(exprName) == null)   throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,exprName);
  int currRowIndex=this.odiResult.getCurrentResultIndex();
  if (lastRowIndex < currRowIndex) {
    if (boundColumnsEvalUtil == null) {
      boundColumnsEvalUtil=new BoundColumnsEvalUtil(this.odiResult,this.scope,this.getRdSaveUtil(),this.resultService);
    }
    lastRowIndex=currRowIndex;
    boundColumnValueMap=boundColumnsEvalUtil.getBoundColumnsValue();
  }
  Object exprValue=boundColumnValueMap.get(exprName);
  if (exprValue instanceof BirtException)   throw (BirtException)exprValue;
  return exprValue;
}","public Object getValue(String exprName) throws BirtException {
  checkStarted();
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(exprName));
  if (this.resultService.getBaseExpression(exprName) == null && this.resultService.getAutoBindingExpr(exprName) == null)   throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,exprName);
  int currRowIndex=this.odiResult.getCurrentResultIndex();
  if (lastRowIndex < currRowIndex) {
    if (bindingColumnsEvalUtil == null) {
      bindingColumnsEvalUtil=new BindingColumnsEvalUtil(this.odiResult,this.scope,this.getRdSaveUtil(),this.resultService);
    }
    lastRowIndex=currRowIndex;
    boundColumnValueMap=bindingColumnsEvalUtil.getColumnsValue();
  }
  Object exprValue=boundColumnValueMap.get(exprName);
  if (exprValue instanceof BirtException)   throw (BirtException)exprValue;
  return exprValue;
}",0.9756625202812332
78105,"/** 
 * @param dataExpr
 * @param odiResult
 * @param scope
 * @param logger
 * @return
 * @throws BirtException
 */
public static Object evaluateExpression(IBaseExpression dataExpr,IResultIterator odiResult,Scriptable scope,Logger logger) throws BirtException {
  Object exprValue=null;
  if (dataExpr == null)   throw new DataException(ResourceConstants.BAD_DATA_EXPRESSION);
  Object handle=dataExpr.getHandle();
  if (handle instanceof CompiledExpression) {
    CompiledExpression expr=(CompiledExpression)handle;
    Object value=evaluateCompiledExpression(expr,odiResult,scope);
    try {
      exprValue=DataTypeUtil.convert(value,dataExpr.getDataType());
    }
 catch (    BirtException e) {
      throw new DataException(ResourceConstants.INCONVERTIBLE_DATATYPE,new Object[]{value,value.getClass(),DataType.getClass(dataExpr.getDataType())});
    }
  }
 else   if (handle instanceof ConditionalExpression) {
    ConditionalExpression ce=(ConditionalExpression)handle;
    Object resultExpr=evaluateExpression(ce.getExpression(),odiResult,scope,logger);
    Object resultOp1=ce.getOperand1() != null ? evaluateExpression(ce.getOperand1(),odiResult,scope,logger) : null;
    Object resultOp2=ce.getOperand2() != null ? evaluateExpression(ce.getOperand2(),odiResult,scope,logger) : null;
    String op1Text=ce.getOperand1() != null ? ce.getOperand1().getText() : null;
    String op2Text=ce.getOperand2() != null ? ce.getOperand2().getText() : null;
    exprValue=ScriptEvalUtil.evalConditionalExpr(resultExpr,ce.getOperator(),ScriptEvalUtil.newExprInfo(op1Text,resultOp1),ScriptEvalUtil.newExprInfo(op2Text,resultOp2));
  }
 else {
    DataException e=new DataException(ResourceConstants.INVALID_EXPR_HANDLE);
    logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  if (exprValue instanceof DataExceptionMocker) {
    throw ((DataExceptionMocker)exprValue).getCause();
  }
  return exprValue;
}","/** 
 * @param dataExpr
 * @param odiResult
 * @param scope
 * @param logger
 * @return
 * @throws BirtException
 */
public static Object evaluateExpression(IBaseExpression dataExpr,IResultIterator odiResult,Scriptable scope) throws BirtException {
  Object exprValue=null;
  if (dataExpr == null)   throw new DataException(ResourceConstants.BAD_DATA_EXPRESSION);
  Object handle=dataExpr.getHandle();
  if (handle instanceof CompiledExpression) {
    CompiledExpression expr=(CompiledExpression)handle;
    Object value=evaluateCompiledExpression(expr,odiResult,scope);
    try {
      exprValue=DataTypeUtil.convert(value,dataExpr.getDataType());
    }
 catch (    BirtException e) {
      throw new DataException(ResourceConstants.INCONVERTIBLE_DATATYPE,new Object[]{value,value.getClass(),DataType.getClass(dataExpr.getDataType())});
    }
  }
 else   if (handle instanceof ConditionalExpression) {
    ConditionalExpression ce=(ConditionalExpression)handle;
    Object resultExpr=evaluateExpression(ce.getExpression(),odiResult,scope);
    Object resultOp1=ce.getOperand1() != null ? evaluateExpression(ce.getOperand1(),odiResult,scope) : null;
    Object resultOp2=ce.getOperand2() != null ? evaluateExpression(ce.getOperand2(),odiResult,scope) : null;
    String op1Text=ce.getOperand1() != null ? ce.getOperand1().getText() : null;
    String op2Text=ce.getOperand2() != null ? ce.getOperand2().getText() : null;
    exprValue=ScriptEvalUtil.evalConditionalExpr(resultExpr,ce.getOperator(),ScriptEvalUtil.newExprInfo(op1Text,resultOp1),ScriptEvalUtil.newExprInfo(op2Text,resultOp2));
  }
 else {
    DataException e=new DataException(ResourceConstants.INVALID_EXPR_HANDLE);
    throw e;
  }
  if (exprValue instanceof DataExceptionMocker) {
    throw ((DataExceptionMocker)exprValue).getCause();
  }
  return exprValue;
}",0.9063571616987602
78106,"public Object getValue(String exprName) throws BirtException {
  checkStarted();
  Object exprValue=null;
  Object exprObject=this.resultService.getBaseExpression(exprName);
  if (exprObject != null) {
    exprValue=this.doGetValue((IBaseExpression)exprObject);
  }
 else {
    IScriptExpression scriptExpr=this.resultService.getAutoBindingExpr(exprName);
    if (scriptExpr != null)     exprValue=ExprEvaluateUtil.evaluateRawExpression(scriptExpr,scope);
 else     throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,exprName);
  }
  this.getRdSaveUtil().doSaveExpr(exprName,exprValue);
  return exprValue;
}","public Object getValue(String exprName) throws BirtException {
  checkStarted();
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(exprName));
  if (this.resultService.getBaseExpression(exprName) == null && this.resultService.getAutoBindingExpr(exprName) == null)   throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,exprName);
  int currRowIndex=this.odiResult.getCurrentResultIndex();
  if (lastRowIndex < currRowIndex) {
    if (boundColumnsEvalUtil == null) {
      boundColumnsEvalUtil=new BoundColumnsEvalUtil(this.odiResult,this.scope,this.getRdSaveUtil(),this.resultService);
    }
    lastRowIndex=currRowIndex;
    boundColumnValueMap=boundColumnsEvalUtil.getBoundColumnsValue();
  }
  Object exprValue=boundColumnValueMap.get(exprName);
  if (exprValue instanceof BirtException)   throw (BirtException)exprValue;
  return exprValue;
}",0.3229974160206718
78107,"private void updateFormatField(){
  String displayFormat;
  IChoiceSet choiceSet=getFormatChoiceSet(getSelectedDataType());
  if (choiceSet == null) {
    displayFormat=DesignEngine.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE).findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getDisplayName();
  }
 else {
    displayFormat=choiceSet.findChoice(formatCategroy).getDisplayName();
    if (formatPattern != null) {
      displayFormat+=""String_Node_Str"" + formatPattern;
    }
  }
  formatField.setText(""String_Node_Str"" + displayFormat);
  changeFormat.setEnabled(choiceSet != null);
  if (selectedParameter != null) {
    doPreview(formatPattern == null ? formatCategroy : formatPattern);
  }
}","private void updateFormatField(){
  String displayFormat;
  IChoiceSet choiceSet=getFormatChoiceSet(getSelectedDataType());
  if (choiceSet == null) {
    displayFormat=DesignEngine.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE).findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getDisplayName();
  }
 else {
    displayFormat=choiceSet.findChoice(formatCategroy).getDisplayName();
    if (formatCategroy != DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM) {
      displayFormat+=""String_Node_Str"" + formatPattern;
    }
  }
  formatField.setText(""String_Node_Str"" + displayFormat);
  changeFormat.setEnabled(choiceSet != null);
  if (selectedParameter != null) {
    doPreview(formatCategroy != DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern);
  }
}",0.5994962216624685
78108,"private void popupFormatBuilder(boolean refresh){
  String type=getSelectedDataType();
  int style;
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    return;
  }
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    style=FormatBuilder.STRING;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    style=FormatBuilder.DATETIME;
  }
 else {
    style=FormatBuilder.NUMBER;
  }
  FormatBuilder formatBuilder=new FormatBuilder(style);
  formatBuilder.setInputFormat(formatCategroy,formatPattern);
  if (formatBuilder.open() == OK) {
    formatCategroy=getCategroy((String)formatBuilder.getResult());
    formatPattern=getPattern((String)formatBuilder.getResult());
    updateFormatField();
  }
}","private void popupFormatBuilder(boolean refresh){
  String type=getSelectedDataType();
  int style;
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    return;
  }
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    style=FormatBuilder.STRING;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    style=FormatBuilder.DATETIME;
  }
 else {
    style=FormatBuilder.NUMBER;
  }
  FormatBuilder formatBuilder=new FormatBuilder(style);
  formatBuilder.setInputFormat(formatCategroy,formatPattern);
  if (formatBuilder.open() == OK) {
    formatCategroy=((String[])formatBuilder.getResult())[0];
    formatPattern=((String[])formatBuilder.getResult())[1];
    updateFormatField();
  }
}",0.9790398918187964
78109,"protected void okPressed(){
  if (page.isFormatModified()) {
    setResult(page.getFormatString());
    super.okPressed();
  }
 else {
    cancelPressed();
  }
}","protected void okPressed(){
  if (page.isFormatModified()) {
    setResult(new String[]{page.getCategory(),page.getPattern()});
    super.okPressed();
  }
 else {
    cancelPressed();
  }
}",0.8914285714285715
78110,"private void updateFormatField(){
  String displayFormat;
  String previewString;
  String type=getSelectedDataType();
  IChoiceSet choiceSet=getFormatChoiceSet(getSelectedDataType());
  if (choiceSet == null) {
    displayFormat=DesignEngine.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE).findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getDisplayName();
    previewString=""String_Node_Str"";
  }
 else {
    displayFormat=choiceSet.findChoice(formatCategroy).getDisplayName();
    if (defaultValue != null) {
      previewString=format(defaultValue);
    }
 else {
      if (formatPattern != null) {
        displayFormat+=""String_Node_Str"" + formatPattern;
      }
      if (type.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME)) {
        previewString=new DateFormatter(formatPattern == null ? formatCategroy : formatPattern,ULocale.getDefault()).format(new Date());
      }
 else       if (type.equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
        previewString=new StringFormatter(formatPattern == null ? formatCategroy : formatPattern,ULocale.getDefault()).format(Messages.getString(""String_Node_Str""));
      }
 else {
        previewString=new NumberFormatter(formatPattern == null ? formatCategroy : formatPattern,ULocale.getDefault()).format(123456789.01234);
      }
    }
  }
  formatField.setText(displayFormat);
  previewLabel.setText(previewString);
  changeFormat.setEnabled(choiceSet != null);
}","private void updateFormatField(){
  String displayFormat;
  String previewString;
  String type=getSelectedDataType();
  IChoiceSet choiceSet=getFormatChoiceSet(getSelectedDataType());
  if (choiceSet == null) {
    displayFormat=DesignEngine.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_STRING_FORMAT_TYPE).findChoice(DesignChoiceConstants.STRING_FORMAT_TYPE_UNFORMATTED).getDisplayName();
    previewString=""String_Node_Str"";
  }
 else {
    displayFormat=choiceSet.findChoice(formatCategroy).getDisplayName();
    if (defaultValue != null) {
      previewString=format(defaultValue);
    }
 else {
      if (formatCategroy == DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM || formatCategroy == DesignChoiceConstants.NUMBER_FORMAT_TYPE_CUSTOM || formatCategroy == DesignChoiceConstants.DATETIEM_FORMAT_TYPE_CUSTOM) {
        displayFormat+=""String_Node_Str"" + formatPattern;
      }
      if (type.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME)) {
        previewString=new DateFormatter(formatCategroy != DesignChoiceConstants.DATETIEM_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern,ULocale.getDefault()).format(new Date());
      }
 else       if (type.equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
        previewString=new StringFormatter(formatCategroy != DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern,ULocale.getDefault()).format(Messages.getString(""String_Node_Str""));
      }
 else {
        previewString=new NumberFormatter(formatCategroy != DesignChoiceConstants.NUMBER_FORMAT_TYPE_CUSTOM ? formatCategroy : formatPattern,ULocale.getDefault()).format(123456789.01234);
      }
    }
  }
  formatField.setText(displayFormat);
  previewLabel.setText(previewString);
  changeFormat.setEnabled(choiceSet != null);
}",0.8685015290519877
78111,"private void popupFormatBuilder(boolean refresh){
  String type=getSelectedDataType();
  int style;
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    return;
  }
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    style=FormatBuilder.STRING;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    style=FormatBuilder.DATETIME;
  }
 else {
    style=FormatBuilder.NUMBER;
  }
  FormatBuilder formatBuilder=new FormatBuilder(style);
  formatBuilder.setInputFormat(formatCategroy,formatPattern);
  formatBuilder.setPreviewText(defaultValue);
  if (formatBuilder.open() == OK) {
    formatCategroy=getCategroy((String)formatBuilder.getResult());
    formatPattern=getPattern((String)formatBuilder.getResult());
    updateFormatField();
    if (refresh) {
      refreshValueTable();
    }
  }
}","private void popupFormatBuilder(boolean refresh){
  String type=getSelectedDataType();
  int style;
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    return;
  }
  if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    style=FormatBuilder.STRING;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    style=FormatBuilder.DATETIME;
  }
 else {
    style=FormatBuilder.NUMBER;
  }
  FormatBuilder formatBuilder=new FormatBuilder(style);
  formatBuilder.setInputFormat(formatCategroy,formatPattern);
  formatBuilder.setPreviewText(defaultValue);
  if (formatBuilder.open() == OK) {
    formatCategroy=((String[])formatBuilder.getResult())[0];
    formatPattern=((String[])formatBuilder.getResult())[1];
    updateFormatField();
    if (refresh) {
      refreshValueTable();
    }
  }
}",0.9814925373134328
78112,"private void insertFormat(int style){
  FormatBuilder dialog=new FormatBuilder(style);
  if (dialog.open() == OK) {
    String result=""String_Node_Str"" + getFormatPattern(((String)dialog.getResult())) + ""String_Node_Str"";
    textEditor.insert(result);
  }
}","private void insertFormat(int style){
  FormatBuilder dialog=new FormatBuilder(style);
  if (dialog.open() == OK && ((String[])dialog.getResult())[1] != null) {
    String result=""String_Node_Str"" + ((String[])dialog.getResult())[1] + ""String_Node_Str"";
    textEditor.insert(result);
  }
}",0.8467153284671532
78113,"/** 
 * Tests whether the given expression has corresponding column binding in the given list.
 * @param columns the binding columns
 * @param columnName the old value expression in BIRT 2.1M5
 * @return <code>true</code> if the expression exists in the columns.Otherwise, <code>false</code>.
 */
public static boolean exists(List columns,String columnName){
  if ((columns == null) || (columns.size() == 0))   return false;
  for (int i=0; i < columns.size(); i++) {
    ComputedColumn column=(ComputedColumn)columns.get(i);
    if (columnName.equals(column.getName()))     return true;
  }
  return false;
}","/** 
 * Tests whether the given expression has corresponding column binding in the given list.
 * @param columns the binding columns
 * @param columnName the old value expression in BIRT 2.1M5
 * @return <code>true</code> if the expression exists in the columns.Otherwise, <code>false</code>.
 */
private static boolean exists(List columns,String columnName){
  if (getColumn(columns,columnName) == null)   return false;
  return true;
}",0.7609942638623327
78114,"/** 
 * Gets the column with the given expression bound the given list.
 * @param columns the binding columns
 * @param expression the old value expression in BIRT 2.1M5
 * @return the bound column
 */
public static ComputedColumn getColumn(List columns,String name){
  if ((columns == null) || (columns.size() == 0) || name == null)   return null;
  for (int i=0; i < columns.size(); i++) {
    ComputedColumn column=(ComputedColumn)columns.get(i);
    if (name.equals(column.getName()))     return column;
  }
  return null;
}","/** 
 * Gets the column with the given expression bound the given list.
 * @param columns the binding columns
 * @param name the column binding name
 * @return the bound column
 */
public static ComputedColumn getColumn(List columns,String name){
  if ((columns == null) || (columns.size() == 0) || name == null)   return null;
  for (int i=0; i < columns.size(); i++) {
    ComputedColumn column=(ComputedColumn)columns.get(i);
    if (name.equals(column.getName()))     return column;
  }
  return null;
}",0.9256038647342996
78115,"/** 
 * @param dataSet
 * @return
 * @throws BirtException
 */
public IPreparedQuery prepareQuery(DataSetHandle dataSet,QueryDefinition queryDefn) throws BirtException {
  DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSet.getModuleHandle());
  DataRequestSession session=DataRequestSession.newSession(context);
  return session.prepare(queryDefn,null);
}","/** 
 * Gets prepared query, given Data set, Parameter binding, and useColumnHints, useFilters information.
 * @param dataSet Given DataSet providing SQL query and parameters.
 * @param bindingParams Given Parameter bindings providing binded parameters, null if no binded parameters.
 * @param useColumnHints Using column hints flag.
 * @param useFilters Using filters flag.
 * @return IPreparedQeury
 * @throws BirtException
 */
public final IPreparedQuery prepareQuery(DataSetHandle dataSet,ParamBindingHandle[] bindingParams,boolean useColumnHints,boolean useFilters) throws BirtException {
  IBaseDataSetDesign dataSetDesign=getDataSetDesign(dataSet,useColumnHints,useFilters);
  return prepareQuery(dataSet,getQueryDefinition(dataSetDesign,bindingParams));
}",0.2566295979469632
78116,"/** 
 * @param dataSetDesign
 * @param rowsToReturn
 * @return
 */
public final QueryDefinition getQueryDefinition(IBaseDataSetDesign dataSetDesign,int rowsToReturn){
  if (dataSetDesign != null) {
    QueryDefinition defn=new QueryDefinition(null);
    defn.setDataSetName(dataSetDesign.getName());
    if (rowsToReturn > 0) {
      defn.setMaxRows(rowsToReturn);
    }
    List parameters=dataSetDesign.getParameters();
    Iterator iter=parameters.iterator();
    while (iter.hasNext()) {
      ParameterDefinition paramDefn=(ParameterDefinition)iter.next();
      if (paramDefn.isInputMode()) {
        if (paramDefn.getDefaultInputValue() != null) {
          InputParameterBinding binding=new InputParameterBinding(paramDefn.getName(),new ScriptExpression(paramDefn.getDefaultInputValue().toString()));
          defn.addInputParamBinding(binding);
        }
      }
    }
    return defn;
  }
  return null;
}","/** 
 * @param dataSetDesign
 * @param bindingParams
 * @param i
 * @return
 */
private QueryDefinition getQueryDefinition(IBaseDataSetDesign dataSetDesign,ParamBindingHandle[] bindingParams,int rowsToReturn){
  if (bindingParams == null || bindingParams.length == 0) {
    return getQueryDefinition(dataSetDesign,rowsToReturn);
  }
  if (dataSetDesign != null) {
    QueryDefinition defn=new QueryDefinition(null);
    defn.setDataSetName(dataSetDesign.getName());
    if (rowsToReturn > 0) {
      defn.setMaxRows(rowsToReturn);
    }
    for (int i=0; i < bindingParams.length; i++) {
      ParamBindingHandle param=bindingParams[i];
      InputParameterBinding binding=new InputParameterBinding(param.getParamName(),new ScriptExpression(param.getExpression()));
      defn.addInputParamBinding(binding);
    }
    return defn;
  }
  return null;
}",0.5014148273910582
78117,"/** 
 * @param dataSet
 * @param useColumnHints
 * @param useFilters
 * @return
 * @throws BirtException
 */
public final IBaseDataSetDesign getDataSetDesign(DataSetHandle dataSet,boolean useColumnHints,boolean useFilters) throws BirtException {
  if (dataSet != null) {
    DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSet.getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    IBaseDataSetDesign dataSetDesign=session.getModelAdaptor().adaptDataSet(dataSet);
    if (!useColumnHints) {
      dataSetDesign.getResultSetHints().clear();
    }
    if (!useFilters) {
      dataSetDesign.getFilters().clear();
    }
    if (!(dataSet instanceof JointDataSetHandle)) {
      IBaseDataSourceDesign dataSourceDesign=session.getModelAdaptor().adaptDataSource(dataSet.getDataSource());
      getEngine().defineDataSource(dataSourceDesign);
    }
    if (dataSet instanceof JointDataSetHandle) {
      defineSourceDataSets(dataSet,dataSetDesign);
    }
    getEngine().defineDataSet(dataSetDesign);
    return dataSetDesign;
  }
  return null;
}","/** 
 * @param dataSet
 * @param useColumnHints
 * @param useFilters
 * @return
 * @throws BirtException
 */
public final IBaseDataSetDesign getDataSetDesign(DataSetHandle dataSet,boolean useColumnHints,boolean useFilters) throws BirtException {
  if (dataSet != null) {
    DataRequestSession session=getDataRequestSession(dataSet);
    IBaseDataSetDesign dataSetDesign=session.getModelAdaptor().adaptDataSet(dataSet);
    if (!useColumnHints) {
      dataSetDesign.getResultSetHints().clear();
    }
    if (!useFilters) {
      dataSetDesign.getFilters().clear();
    }
    if (!(dataSet instanceof JointDataSetHandle)) {
      IBaseDataSourceDesign dataSourceDesign=session.getModelAdaptor().adaptDataSource(dataSet.getDataSource());
      session.defineDataSource(dataSourceDesign);
    }
    if (dataSet instanceof JointDataSetHandle) {
      defineSourceDataSets(dataSet,dataSetDesign);
    }
    session.defineDataSet(dataSetDesign);
    return dataSetDesign;
  }
  return null;
}",0.8857412653446648
78118,"/** 
 * Gets prepared query, given Data set, Parameter binding, and useColumnHints, useFilters information.
 * @param dataSet Given DataSet providing SQL query and parameters.
 * @param bindingParams Given Parameter bindings providing binded parameters, null if no binded parameters.
 * @param useColumnHints Using column hints flag.
 * @param useFilters Using filters flag.
 * @return IPreparedQeury
 * @throws BirtException
 */
public final IPreparedQuery prepareQuery(DataSetHandle dataSet,ParamBindingHandle[] bindingParams,boolean useColumnHints,boolean useFilters) throws BirtException {
  IBaseDataSetDesign dataSetDesign=getDataSetDesign(dataSet,useColumnHints,useFilters);
  return prepareQuery(dataSet,getQueryDefinition(dataSetDesign,bindingParams));
}","/** 
 * Gets prepared query, given Data set, Parameter binding, and useColumnHints, useFilters information.
 * @param dataSet Given DataSet providing SQL query and parameters.
 * @param bindingParams Given Parameter bindings providing binded parameters, null if no binded parameters.
 * @param useColumnHints Using column hints flag.
 * @param useFilters Using filters flag.
 * @return IPreparedQeury
 * @throws BirtException
 */
public final IPreparedQuery prepareQuery(DataSetHandle dataSet,ParamBindingHandle[] bindingParams,boolean useColumnHints,boolean useFilters) throws BirtException {
  DataRequestSession session=getDataRequestSession(dataSet);
  IBaseDataSetDesign dataSetDesign=getDataSetDesign(dataSet,useColumnHints,useFilters);
  return session.prepare(getQueryDefinition(dataSetDesign,bindingParams),null);
}",0.9187145557655956
78119,"private static ParameterGroupDefinition convertParameterGroup(IParameterGroupDefn engineParam,IGetParameterDefinitionTask task){
  boolean cascade=engineParam instanceof ICascadingParameterGroup;
  ParameterGroupDefinition paramGroup=new ParameterGroupDefinition(engineParam.getName(),engineParam.getDisplayName(),null,cascade);
  List contents=convertParametersInGroup(engineParam.getContents(),paramGroup,task);
  paramGroup.setParameters(contents);
  return paramGroup;
}","private static ParameterGroupDefinition convertParameterGroup(IParameterGroupDefn engineParam,IGetParameterDefinitionTask task){
  boolean cascade=engineParam instanceof ICascadingParameterGroup;
  ParameterGroupDefinition paramGroup=new ParameterGroupDefinition(engineParam.getName(),engineParam.getDisplayName(),engineParam.getPromptText(),null,cascade);
  List contents=convertParametersInGroup(engineParam.getContents(),paramGroup,task);
  paramGroup.setParameters(contents);
  return paramGroup;
}",0.971311475409836
78120,"public ParameterGroupDefinition(String name,String displayName,List parameters,boolean cascade){
  this.name=name;
  this.displayName=displayName;
  this.parameters=parameters;
  this.cascade=cascade;
}","public ParameterGroupDefinition(String name,String displayName,String promptText,List parameters,boolean cascade){
  this.name=name;
  this.displayName=displayName;
  this.promptText=promptText;
  this.parameters=parameters;
  this.cascade=cascade;
}",0.8938053097345132
78121,"/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle) throws BirtException {
  dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
  IResultMetaData rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  for (int i=1; i <= rsMeta.getColumnCount(); i++) {
    ResultSetColumn rsc=StructureFactory.createResultSetColumn();
    rsc.setColumnName((rsMeta.getColumnAlias(i) == null || rsMeta.getColumnAlias(i).trim().length() == 0) ? rsMeta.getColumnName(i) : rsMeta.getColumnAlias(i));
    rsc.setDataType(toModelDataType(rsMeta.getColumnType(i)));
    rsc.setPosition(new Integer(i));
    dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem(rsc);
  }
  return rsMeta;
}","/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle) throws BirtException {
  IResultMetaData rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
    for (int i=1; i <= rsMeta.getColumnCount(); i++) {
      ResultSetColumn rsc=StructureFactory.createResultSetColumn();
      rsc.setColumnName(getColumnName(rsMeta,i));
      rsc.setDataType(toModelDataType(rsMeta.getColumnType(i)));
      rsc.setPosition(new Integer(i));
      dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem(rsc);
    }
  }
  return rsMeta;
}",0.7399073461283918
78122,"protected boolean isPropertyVisible(String propName){
  List elements=getElements();
  for (int i=0; i < elements.size(); i++) {
    PropertyHandle propertyHandle=((DesignElementHandle)elements.get(i)).getPropertyHandle(propName);
    if (propertyHandle != null && !propertyHandle.isVisible() || propertyHandle == null)     return false;
  }
  return !isInvalidInMasterPage(propName);
}","protected boolean isPropertyVisible(String propName){
  List elements=getElements();
  for (int i=0; i < elements.size(); i++) {
    PropertyHandle propertyHandle=((DesignElementHandle)elements.get(i)).getPropertyHandle(propName);
    if (propertyHandle != null && !propertyHandle.isVisible() || propertyHandle == null)     return false;
  }
  return !needHide(propName);
}",0.9644268774703556
78123,"protected boolean isPropertyReadOnly(String propName){
  for (int i=0; i < elements.size(); i++) {
    PropertyHandle propertyHandle=((DesignElementHandle)elements.get(i)).getPropertyHandle(propName);
    if (propertyHandle != null && propertyHandle.isReadOnly() || propertyHandle == null)     return true;
  }
  return isInvalidInMasterPage(propName);
}","protected boolean isPropertyReadOnly(String propName){
  for (int i=0; i < elements.size(); i++) {
    PropertyHandle propertyHandle=((DesignElementHandle)elements.get(i)).getPropertyHandle(propName);
    if (propertyHandle != null && propertyHandle.isReadOnly() || propertyHandle == null)     return true;
  }
  return needHide(propName);
}",0.9611510791366906
78124,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,Object context){
  String baseURL=null;
  if (context != null && context instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)context).getBaseURL();
  }
  StringBuffer link=new StringBuffer();
  String reportName=action.getReportName();
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    String format=action.getFormat();
    if (!""String_Node_Str"".equalsIgnoreCase(format)) {
      link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.append(baseURL);
    }
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,""String_Node_Str""));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    if (format != null && format.length() > 0) {
      link.append(""String_Node_Str"" + format);
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=valueObj.toString();
            link.append(""String_Node_Str"" + URLEncoder.encode(key,""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(value,""String_Node_Str""));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
    }
    link.append(""String_Node_Str"");
    if (!""String_Node_Str"".equalsIgnoreCase(format) && action.getBookmark() != null) {
      try {
        link.append(""String_Node_Str"");
        link.append(URLEncoder.encode(action.getBookmark(),""String_Node_Str""));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,Object context){
  String baseURL=null;
  if (context != null && context instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)context).getBaseURL();
  }
  StringBuffer link=new StringBuffer();
  String reportName=action.getReportName();
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    String format=action.getFormat();
    if (!""String_Node_Str"".equalsIgnoreCase(format)) {
      link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.append(baseURL);
    }
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,""String_Node_Str""));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    if (format != null && format.length() > 0) {
      link.append(""String_Node_Str"" + format);
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=valueObj.toString();
            link.append(""String_Node_Str"" + URLEncoder.encode(key,""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(value,""String_Node_Str""));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
    }
    link.append(""String_Node_Str"");
    if (!""String_Node_Str"".equalsIgnoreCase(format) && action.getBookmark() != null) {
      try {
        if (baseURL.lastIndexOf(""String_Node_Str"") > 0) {
          link.append(""String_Node_Str"");
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(action.getBookmark(),""String_Node_Str""));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.9701423977951308
78125,"/** 
 * Get parameter values from config file.
 * @return Map
 */
private Map getConfigVars(){
  HashMap configVars=new HashMap();
  String reportDesignName=this.getFileUri();
  String configFileName=reportDesignName.replaceFirst(SUFFIX_DESIGN_FILE,SUFFIX_DESIGN_CONFIG);
  ReportDesignHandle handle=null;
  try {
    SessionHandle sessionHandle=SessionHandleAdapter.getInstance().getSessionHandle();
    File configFile=new File(configFileName);
    if (configFile != null && configFile.exists() && configFile.isFile()) {
      handle=sessionHandle.openDesign(configFileName);
      if (handle != null) {
        Iterator it=handle.configVariablesIterator();
        while (it != null && it.hasNext()) {
          ConfigVariableHandle configVar=(ConfigVariableHandle)it.next();
          if (configVar != null && configVar.getName() != null) {
            configVars.put(configVar.getName(),configVar.getValue());
          }
        }
        handle.close();
      }
    }
  }
 catch (  DesignFileException e) {
    e.printStackTrace();
    try {
      if (handle != null) {
        handle.close();
      }
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
  }
  return configVars;
}","/** 
 * Get parameter values from config file.
 * @return Map
 */
private Map getConfigVars(){
  HashMap configVars=new HashMap();
  String reportDesignName=this.getFileUri();
  String configFileName=reportDesignName.replaceFirst(SUFFIX_DESIGN_FILE,SUFFIX_DESIGN_CONFIG);
  ReportDesignHandle handle=null;
  try {
    SessionHandle sessionHandle=SessionHandleAdapter.getInstance().getSessionHandle();
    File configFile=new File(configFileName);
    if (configFile != null && configFile.exists() && configFile.isFile()) {
      handle=sessionHandle.openDesign(configFileName);
      if (handle != null) {
        Iterator it=handle.configVariablesIterator();
        while (it != null && it.hasNext()) {
          ConfigVariableHandle configVar=(ConfigVariableHandle)it.next();
          if (configVar != null && configVar.getName() != null) {
            String paramName=getParameterName(configVar.getName());
            if (paramName != null && paramName.length() > 0) {
              configVars.put(paramName,configVar.getValue());
            }
          }
        }
        handle.close();
      }
    }
  }
 catch (  DesignFileException e) {
    e.printStackTrace();
    try {
      if (handle != null) {
        handle.close();
      }
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
  }
  return configVars;
}",0.9343295320487612
78126,"protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName);
  if (reportDocumentInstance != null) {
    reportRunnable=reportDocumentInstance.getReportRunnable();
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
      this.parameterMap=reportDocumentInstance.getParameterValues();
    }
    reportDocumentInstance.close();
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
 else {
    design=new BirtViewerReportDesignHandle(null,reportDesignName);
  }
  return design;
}","protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName);
  if (reportDocumentInstance != null) {
    reportRunnable=reportDocumentInstance.getReportRunnable();
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
      this.parameterMap=reportDocumentInstance.getParameterValues();
    }
    reportDocumentInstance.close();
  }
  if (reportRunnable == null) {
    try {
      reportRunnable=ReportEngineService.getInstance().openReportDesign(this.reportDesignName);
    }
 catch (    EngineException e) {
      e.printStackTrace();
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
 else {
    design=new BirtViewerReportDesignHandle(null,reportDesignName);
  }
  return design;
}",0.8885416666666667
78127,"/** 
 * parse paramenters from config file.
 * @param request
 * @return
 */
protected void parseConfigVars(HttpServletRequest request){
  String reportConfigName=this.reportDesignName.replaceFirst(IBirtConstants.SUFFIX_DESIGN_FILE,IBirtConstants.SUFFIX_DESIGN_CONFIG);
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.getDefault());
  ReportDesignHandle handle=null;
  try {
    this.configMap=new HashMap();
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          this.configMap.put(configVar.getName(),configVar.getValue());
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
    try {
      if (handle != null)       handle.close();
    }
 catch (    Exception err) {
    }
  }
}","/** 
 * parse paramenters from config file.
 * @param request
 * @return
 */
protected void parseConfigVars(HttpServletRequest request){
  String reportConfigName=this.reportDesignName.replaceFirst(IBirtConstants.SUFFIX_DESIGN_FILE,IBirtConstants.SUFFIX_DESIGN_CONFIG);
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.getDefault());
  ReportDesignHandle handle=null;
  try {
    this.configMap=new HashMap();
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=getParameterName(configVar.getName());
          if (paramName != null && paramName.length() > 0) {
            this.configMap.put(paramName,configVar.getValue());
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
    try {
      if (handle != null)       handle.close();
    }
 catch (    Exception err) {
    }
  }
}",0.9220119981541302
78128,"protected void __execute() throws RemoteException {
  BaseAttributeBean attrBean=(BaseAttributeBean)context.getBean();
  try {
    String reportDesignName=attrBean.getReportDesignName();
    String configFileName=reportDesignName.replaceFirst(IBirtConstants.SUFFIX_DESIGN_FILE,IBirtConstants.SUFFIX_DESIGN_CONFIG);
    SessionHandle sessionHandle=DesignEngine.newSession(ULocale.getDefault());
    File configFile=new File(configFileName);
    if (configFile != null && configFile.exists() && configFile.isFile()) {
      configFile.delete();
    }
    ReportDesignHandle handle=sessionHandle.createDesign();
    Oprand[] op=this.operation.getOprand();
    if (op != null) {
      for (int i=0; i < op.length; i++) {
        ConfigVariable configVar=new ConfigVariable();
        configVar.setName(op[i].getName());
        configVar.setValue(op[i].getValue());
        handle.addConfigVariable(configVar);
      }
    }
    handle.saveAs(configFileName);
    handle.close();
    handleUpdate();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault();
    fault.setFaultCode(new QName(""String_Node_Str""));
    fault.setFaultReason(e.getLocalizedMessage());
    throw fault;
  }
}","protected void __execute() throws RemoteException {
  ViewerAttributeBean attrBean=(ViewerAttributeBean)context.getBean();
  try {
    String reportDesignName=attrBean.getReportDesignName();
    String configFileName=reportDesignName.replaceFirst(IBirtConstants.SUFFIX_DESIGN_FILE,IBirtConstants.SUFFIX_DESIGN_CONFIG);
    SessionHandle sessionHandle=DesignEngine.newSession(ULocale.getDefault());
    File configFile=new File(configFileName);
    if (configFile != null && configFile.exists() && configFile.isFile()) {
      configFile.delete();
    }
    ReportDesignHandle handle=sessionHandle.createDesign();
    IReportRunnable runnable=(IReportRunnable)attrBean.getReportDesignHandle().getDesignObject();
    ModuleHandle model=runnable.getDesignHandle().getModuleHandle();
    Oprand[] op=this.operation.getOprand();
    if (op != null) {
      for (int i=0; i < op.length; i++) {
        ConfigVariable configVar=new ConfigVariable();
        ParameterHandle parameterHandle=model.findParameter(op[i].getName());
        if (parameterHandle != null) {
          configVar.setName(op[i].getName() + parameterHandle.getID());
          configVar.setValue(op[i].getValue());
          handle.addConfigVariable(configVar);
        }
      }
    }
    handle.saveAs(configFileName);
    handle.close();
    handleUpdate();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault();
    fault.setFaultCode(new QName(""String_Node_Str""));
    fault.setFaultReason(e.getLocalizedMessage());
    throw fault;
  }
}",0.8574593796159528
78129,"private final void renderOutline(IPrimitiveRenderer ipr,LineAttributes lia,Rectangle2D.Double r2d){
  if (lia != null && lia.isVisible() && lia.getColor() != null) {
    Graphics2D g2d=(Graphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
    Stroke sPrevious=null;
    final ColorDefinition cd=lia.getColor();
    final Stroke sCurrent=((SVGRendererImpl)ipr).getCachedStroke(lia);
    if (sCurrent != null) {
      sPrevious=g2d.getStroke();
      g2d.setStroke(sCurrent);
    }
    g2d.setColor((Color)_sxs.getColor(cd));
    g2d.draw(r2d);
    if (sPrevious != null) {
      g2d.setStroke(sPrevious);
    }
  }
}","private final void renderOutline(IPrimitiveRenderer ipr,LineAttributes lia,Rectangle2D.Double r2d){
  if (lia != null && lia.isVisible() && lia.getColor() != null) {
    SVGGraphics2D g2d=(SVGGraphics2D)((IDeviceRenderer)ipr).getGraphicsContext();
    Stroke sPrevious=null;
    final ColorDefinition cd=lia.getColor();
    final Stroke sCurrent=((SVGRendererImpl)ipr).getCachedStroke(lia);
    if (sCurrent != null) {
      sPrevious=g2d.getStroke();
      g2d.setStroke(sCurrent);
    }
    g2d.setColor((Color)_sxs.getColor(cd));
    g2d.draw(r2d);
    g2d.setNoFillColor(g2d.getCurrentElement());
    if (sPrevious != null) {
      g2d.setStroke(sPrevious);
    }
  }
}",0.9573973663826492
78130,"/** 
 * Constructs the error detail with a given exception.
 * @param e the exception types that can be translated are <code>XMLParserException</code>, <code>DesignParserException</code>, <code>SemanticException</code> and <code>SAXException</code>.
 */
public ErrorDetail(Exception e){
}","/** 
 * The default constructor.
 */
public ErrorDetail(){
}",0.2701149425287356
78131,"/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers){
  if (elm != null) {
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
          String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
        if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
          Element title=svg_g2d.dom.createElement(""String_Node_Str"");
          title.appendChild(svg_g2d.dom.createTextNode(tooltipText));
          elm.appendChild(title);
          if (scriptEvent.equals(""String_Node_Str"")) {
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
          }
 else           elm.setAttribute(scriptEvent,""String_Node_Str"");
        }
      break;
case ActionType.URL_REDIRECT:
    URLValue urlValue=((URLValue)tg.getAction().getValue());
  if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    Element aLink=svg_g2d.createElement(""String_Node_Str"");
    aLink.setAttribute(scriptEvent,""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str"");
    aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    aLink.appendChild(elm);
    elm=aLink;
  }
 else {
    Element aLink=svg_g2d.createElement(""String_Node_Str"");
    aLink.setAttribute(""String_Node_Str"",urlValue.getBaseUrl());
    if (urlValue.getTarget() != null)     aLink.setAttribute(""String_Node_Str"",urlValue.getTarget());
    aLink.appendChild(elm);
    elm=aLink;
  }
break;
case ActionType.TOGGLE_VISIBILITY:
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
case ActionType.HIGHLIGHT:
addJSCodeOnElement(src,tg,elm,scriptEvent,tg.getAction().getType().getValue());
break;
case ActionType.INVOKE_SCRIPT:
if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) {
AccessibilityValue accessValue=((AccessibilityValue)tg.getAction().getValue());
if (accessValue.getText() != null) {
Element title=svg_g2d.createElement(""String_Node_Str"");
title.appendChild(svg_g2d.dom.createTextNode(accessValue.getText()));
elm.appendChild(title);
}
if (accessValue.getAccessibility() != null) {
Element description=svg_g2d.createElement(""String_Node_Str"");
description.appendChild(svg_g2d.dom.createTextNode(accessValue.getAccessibility()));
elm.appendChild(description);
}
}
 else {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ src.getSource().hashCode()+ ""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
svg_g2d.addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
}
hotspotLayer.appendChild(elm);
}
}","/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers){
  if (elm != null) {
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
          String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
        if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
          Element title=svg_g2d.dom.createElement(""String_Node_Str"");
          title.appendChild(svg_g2d.dom.createTextNode(tooltipText));
          elm.appendChild(title);
          if (scriptEvent.equals(""String_Node_Str"")) {
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
          }
 else           elm.setAttribute(scriptEvent,""String_Node_Str"");
        }
      break;
case ActionType.URL_REDIRECT:
    URLValue urlValue=((URLValue)tg.getAction().getValue());
  if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    Element aLink=svg_g2d.createElement(""String_Node_Str"");
    aLink.setAttribute(scriptEvent,""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str"");
    aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    aLink.appendChild(elm);
    elm=aLink;
  }
 else {
    String target=urlValue.getTarget();
    if (target == null)     target=""String_Node_Str"";
    elm.setAttribute(scriptEvent,""String_Node_Str"" + target + ""String_Node_Str""+ urlValue.getBaseUrl()+ ""String_Node_Str"");
  }
break;
case ActionType.TOGGLE_VISIBILITY:
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
case ActionType.HIGHLIGHT:
addJSCodeOnElement(src,tg,elm,scriptEvent,tg.getAction().getType().getValue());
break;
case ActionType.INVOKE_SCRIPT:
if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) {
AccessibilityValue accessValue=((AccessibilityValue)tg.getAction().getValue());
if (accessValue.getText() != null) {
Element title=svg_g2d.createElement(""String_Node_Str"");
title.appendChild(svg_g2d.dom.createTextNode(accessValue.getText()));
elm.appendChild(title);
}
if (accessValue.getAccessibility() != null) {
Element description=svg_g2d.createElement(""String_Node_Str"");
description.appendChild(svg_g2d.dom.createTextNode(accessValue.getAccessibility()));
elm.appendChild(description);
}
}
 else {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ src.getSource().hashCode()+ ""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
svg_g2d.addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
}
hotspotLayer.appendChild(elm);
}
}",0.9292561983471076
78132,"/** 
 * Gets a helper to deal with a bundle of message files.
 * @param msgFolder directory where to locates the message files.
 * @param baseName base name of the resource bundle. The name is a common base name
 * @return a correspondent helper instance. Return <code>null</code> ifthe <code>msgFolder</code> is null or not a directory.
 */
public static BundleHelper getHelper(File msgFolder,String baseName){
  if (msgFolder == null || !msgFolder.isDirectory())   return null;
  return new BundleHelper(msgFolder,baseName);
}","/** 
 * Gets a helper to deal with a bundle of message files.
 * @param module the module
 * @param baseName base name of the resource bundle. The name is a common base name
 * @return a correspondent helper instance. Return <code>null</code> ifthe <code>msgFolder</code> is null or not a directory.
 */
public static BundleHelper getHelper(Module module,String baseName){
}",0.3946784922394678
78133,"/** 
 * Return a message resource bundle list for the given locale. A message key should be look into the files in the sequence order from the first to the last. Content of the list is <code>java.util.PropertyResourceBundle</code> <p> If the given locale is <code>null</code>, locale of the current thread will be used.
 * @param locale locale to use when locating the bundles.
 * @return a message file list for the given locale.
 */
private List gatherMessageBundles(ULocale locale){
  if (locale == null)   locale=ThreadResources.getLocale();
  List bundleHierarchy=new ArrayList();
  if (this.baseName == null)   return bundleHierarchy;
  final String language=locale.getLanguage();
  final int languageLength=language.length();
  final String country=locale.getCountry();
  final int countryLength=country.length();
  if (languageLength > 0 && countryLength > 0) {
    StringBuffer temp=new StringBuffer(baseName);
    temp.append(""String_Node_Str"");
    temp.append(language);
    temp.append(""String_Node_Str"");
    temp.append(country);
    temp.append(""String_Node_Str"");
    PropertyResourceBundle bundle=populateBundle(new File(msgFolder,temp.toString()));
    if (bundle != null)     bundleHierarchy.add(bundle);
  }
  if (languageLength > 0) {
    StringBuffer temp=new StringBuffer(baseName);
    temp.append(""String_Node_Str"");
    temp.append(language);
    temp.append(""String_Node_Str"");
    PropertyResourceBundle bundle=populateBundle(new File(msgFolder,temp.toString()));
    if (bundle != null)     bundleHierarchy.add(bundle);
  }
  PropertyResourceBundle bundle=populateBundle(new File(msgFolder,baseName + ""String_Node_Str""));
  if (bundle != null)   bundleHierarchy.add(bundle);
  return bundleHierarchy;
}","/** 
 * Return a message resource bundle list for the given locale. A message key should be look into the files in the sequence order from the first to the last. Content of the list is <code>java.util.PropertyResourceBundle</code> <p> If the given locale is <code>null</code>, locale of the current thread will be used.
 * @param locale locale to use when locating the bundles.
 * @return a message file list for the given locale.
 */
private List gatherMessageBundles(ULocale locale){
  if (locale == null)   locale=ThreadResources.getLocale();
  List bundleHierarchy=new ArrayList();
  if (this.baseName == null)   return bundleHierarchy;
  final String language=locale.getLanguage();
  final int languageLength=language.length();
  final String country=locale.getCountry();
  final int countryLength=country.length();
  if (languageLength > 0 && countryLength > 0) {
    StringBuffer temp=new StringBuffer(baseName);
    temp.append(""String_Node_Str"");
    temp.append(language);
    temp.append(""String_Node_Str"");
    temp.append(country);
    temp.append(""String_Node_Str"");
    PropertyResourceBundle bundle=populateBundle(temp.toString());
    if (bundle != null)     bundleHierarchy.add(bundle);
  }
  if (languageLength > 0) {
    StringBuffer temp=new StringBuffer(baseName);
    temp.append(""String_Node_Str"");
    temp.append(language);
    temp.append(""String_Node_Str"");
    PropertyResourceBundle bundle=populateBundle(temp.toString());
    if (bundle != null)     bundleHierarchy.add(bundle);
  }
  PropertyResourceBundle bundle=populateBundle(baseName + ""String_Node_Str"");
  if (bundle != null)   bundleHierarchy.add(bundle);
  return bundleHierarchy;
}",0.9659224441833136
78134,"/** 
 * Populates a <code>ResourceBundle</code> for a input file.
 * @param file a file binds to a message file.
 * @return A <code>ResourceBundle</code> for a input file, return<code>null</code> if the file doesn't exist or any exception occurred during I/O reading.
 */
private PropertyResourceBundle populateBundle(File file){
}","/** 
 * Populates a <code>ResourceBundle</code> for a input file.
 * @param file a file binds to a message file.
 * @return A <code>ResourceBundle</code> for a input file, return<code>null</code> if the file doesn't exist or any exception occurred during I/O reading.
 */
private PropertyResourceBundle populateBundle(String fileName){
}",0.9670658682634732
78135,"/** 
 * Private constructor. Constructs a helper given the message folder and common base name of the message bundles.
 * @param msgFolder directory where to locates the message files.
 * @param baseName base name of the resource bundle. The name is a common base name
 */
private BundleHelper(File msgFolder,String baseName){
}","/** 
 * Private constructor. Constructs a helper given the message folder and common base name of the message bundles.
 * @param module the module
 * @param baseName base name of the resource bundle. The name is a common base name
 */
private BundleHelper(Module module,String baseName){
  this.module=module;
  this.baseName=baseName;
}",0.6887218045112782
78136,"/** 
 * Finds user-defined messages for the given locale. <p> First we look up in the report itself, then look into the referenced message file. Each search uses a reduced form of Java locale-driven search algorithm: Language&Country, language, default.
 * @param resourceKey Resource key of the user defined message.
 * @param locale locale of message, if the input <code>locale</code> is <code>null</code>, the locale for the current thread will be used instead.
 * @return the corresponding locale-dependent messages. Return<code>""""</code> if translation can not be found, or <code>resourceKey</code> is blank or <code>null</code>.
 */
public String getMessage(String resourceKey,ULocale locale){
  if (StringUtil.isBlank(resourceKey))   return ""String_Node_Str"";
  if (locale == null)   locale=ThreadResources.getLocale();
  String msg=translations.getMessage(resourceKey,locale);
  if (msg != null)   return msg;
  String baseName=getStringProperty(this,INCLUDE_RESOURCE_PROP);
  if (baseName == null)   return ""String_Node_Str"";
  String resourcePath=session.getBirtResourcePath();
  if (resourcePath != null) {
    File msgFolder=new File(session.getBirtResourcePath());
    msg=BundleHelper.getHelper(msgFolder,baseName).getMessage(resourceKey,locale);
  }
  if (msg == null || msg.length() == 0) {
    File msgFolder=getModuleFolder();
    if (msgFolder == null)     return ""String_Node_Str"";
    return BundleHelper.getHelper(msgFolder,baseName).getMessage(resourceKey,locale);
  }
  return msg;
}","/** 
 * Finds user-defined messages for the given locale. <p> First we look up in the report itself, then look into the referenced message file. Each search uses a reduced form of Java locale-driven search algorithm: Language&Country, language, default.
 * @param resourceKey Resource key of the user defined message.
 * @param locale locale of message, if the input <code>locale</code> is <code>null</code>, the locale for the current thread will be used instead.
 * @return the corresponding locale-dependent messages. Return<code>""""</code> if translation can not be found, or <code>resourceKey</code> is blank or <code>null</code>.
 */
public String getMessage(String resourceKey,ULocale locale){
  if (StringUtil.isBlank(resourceKey))   return ""String_Node_Str"";
  if (locale == null)   locale=ThreadResources.getLocale();
  String msg=translations.getMessage(resourceKey,locale);
  if (msg != null)   return msg;
  String baseName=getStringProperty(this,INCLUDE_RESOURCE_PROP);
  if (baseName == null)   return ""String_Node_Str"";
  msg=BundleHelper.getHelper(this,baseName).getMessage(resourceKey,locale);
  return msg;
}",0.7983289023927079
78137,"/** 
 * Return a list of user-defined message keys. The list contained resource keys defined in the report itself and the keys defined in the referenced message files for the current thread's locale. The list returned contains no duplicate keys.
 * @return a list of user-defined message keys.
 */
public List getMessageKeys(){
  Set keys=new LinkedHashSet();
  String[] transKeys=translations.getResourceKeys();
  if (transKeys != null) {
    for (int i=0; i < transKeys.length; i++)     keys.add(transKeys[i]);
  }
  String baseName=getStringProperty(this,INCLUDE_RESOURCE_PROP);
  if (baseName == null)   return new ArrayList(keys);
  String resourcePath=session.getBirtResourcePath();
  File msgFolder=null;
  if (resourcePath != null) {
    msgFolder=new File(session.getBirtResourcePath());
    Collection msgKeys=BundleHelper.getHelper(msgFolder,baseName).getMessageKeys(ThreadResources.getLocale());
    if (msgKeys != null) {
      keys.addAll(msgKeys);
      return new ArrayList(keys);
    }
  }
  msgFolder=getModuleFolder();
  if (msgFolder == null)   return new ArrayList(keys);
  keys.addAll(BundleHelper.getHelper(msgFolder,baseName).getMessageKeys(ThreadResources.getLocale()));
  return new ArrayList(keys);
}","/** 
 * Return a list of user-defined message keys. The list contained resource keys defined in the report itself and the keys defined in the referenced message files for the current thread's locale. The list returned contains no duplicate keys.
 * @return a list of user-defined message keys.
 */
public List getMessageKeys(){
  Set keys=new LinkedHashSet();
  String[] transKeys=translations.getResourceKeys();
  if (transKeys != null) {
    for (int i=0; i < transKeys.length; i++)     keys.add(transKeys[i]);
  }
  String baseName=getStringProperty(this,INCLUDE_RESOURCE_PROP);
  if (baseName == null)   return new ArrayList(keys);
  keys.addAll(BundleHelper.getHelper(this,baseName).getMessageKeys(ThreadResources.getLocale()));
  return new ArrayList(keys);
}",0.7359437751004017
78138,"/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers){
  if (elm != null) {
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
          String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
        if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
          Element title=svg_g2d.dom.createElement(""String_Node_Str"");
          title.appendChild(svg_g2d.dom.createTextNode(tooltipText));
          elm.appendChild(title);
          if (scriptEvent.equals(""String_Node_Str"")) {
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
          }
 else           elm.setAttribute(scriptEvent,""String_Node_Str"");
        }
      break;
case ActionType.URL_REDIRECT:
    URLValue urlValue=((URLValue)tg.getAction().getValue());
  if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    Element aLink=svg_g2d.createElement(""String_Node_Str"");
    aLink.setAttribute(scriptEvent,""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str"");
    aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    aLink.appendChild(elm);
    elm=aLink;
  }
 else {
    String target=urlValue.getTarget();
    if (target == null)     target=""String_Node_Str"";
    elm.setAttribute(scriptEvent,""String_Node_Str"" + target + ""String_Node_Str""+ urlValue.getBaseUrl()+ ""String_Node_Str"");
  }
break;
case ActionType.TOGGLE_VISIBILITY:
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
case ActionType.HIGHLIGHT:
addJSCodeOnElement(src,tg,elm,scriptEvent,tg.getAction().getType().getValue());
break;
case ActionType.INVOKE_SCRIPT:
if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) {
AccessibilityValue accessValue=((AccessibilityValue)tg.getAction().getValue());
if (accessValue.getText() != null) {
Element title=svg_g2d.createElement(""String_Node_Str"");
title.appendChild(svg_g2d.dom.createTextNode(accessValue.getText()));
elm.appendChild(title);
}
if (accessValue.getAccessibility() != null) {
Element description=svg_g2d.createElement(""String_Node_Str"");
description.appendChild(svg_g2d.dom.createTextNode(accessValue.getAccessibility()));
elm.appendChild(description);
}
}
 else {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ src.getSource().hashCode()+ ""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
svg_g2d.addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
}
hotspotLayer.appendChild(elm);
}
}","/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers){
  if (elm != null) {
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
          String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
        if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
          Element title=svg_g2d.dom.createElement(""String_Node_Str"");
          title.appendChild(svg_g2d.dom.createTextNode(tooltipText));
          elm.appendChild(title);
          if (scriptEvent.equals(""String_Node_Str"")) {
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
          }
 else           elm.setAttribute(scriptEvent,""String_Node_Str"");
        }
      break;
case ActionType.URL_REDIRECT:
    URLValue urlValue=((URLValue)tg.getAction().getValue());
  Element aLink=svg_g2d.createElement(""String_Node_Str"");
aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
aLink.appendChild(elm);
elm=aLink;
if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
elm.setAttribute(scriptEvent,""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str"");
elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
}
 else {
String target=urlValue.getTarget();
if (target == null) target=""String_Node_Str"";
elm.setAttribute(scriptEvent,""String_Node_Str"" + target + ""String_Node_Str""+ urlValue.getBaseUrl()+ ""String_Node_Str"");
}
break;
case ActionType.TOGGLE_VISIBILITY:
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
case ActionType.HIGHLIGHT:
addJSCodeOnElement(src,tg,elm,scriptEvent,tg.getAction().getType().getValue());
break;
case ActionType.INVOKE_SCRIPT:
if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) {
AccessibilityValue accessValue=((AccessibilityValue)tg.getAction().getValue());
if (accessValue.getText() != null) {
Element title=svg_g2d.createElement(""String_Node_Str"");
title.appendChild(svg_g2d.dom.createTextNode(accessValue.getText()));
elm.appendChild(title);
}
if (accessValue.getAccessibility() != null) {
Element description=svg_g2d.createElement(""String_Node_Str"");
description.appendChild(svg_g2d.dom.createTextNode(accessValue.getAccessibility()));
elm.appendChild(description);
}
}
 else {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ src.getSource().hashCode()+ ""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
svg_g2d.addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
}
hotspotLayer.appendChild(elm);
}
}",0.943936117118616
78139,"/** 
 * if parameter existed in config file, return the correct parameter name
 * @param configVarName
 * @return String
 */
private String getParameterName(String configVarName){
  String paramName=null;
  List parameters=null;
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (model != null) {
    parameters=model.getFlattenParameters();
  }
  if (parameters != null) {
    for (int i=0; i < parameters.size(); i++) {
      ScalarParameterHandle parameter=((ScalarParameterHandle)parameters.get(i));
      String curName=null;
      if (parameter != null && parameter.getName() != null) {
        curName=parameter.getName() + parameter.getID();
      }
      if (curName != null && curName.equalsIgnoreCase(configVarName)) {
        paramName=parameter.getName();
        break;
      }
    }
  }
  return paramName;
}","/** 
 * if parameter existed in config file, return the correct parameter name
 * @param configVarName
 * @return String
 */
private String getParameterName(String configVarName){
  String paramName=null;
  List parameters=null;
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (model != null) {
    parameters=model.getFlattenParameters();
  }
  if (parameters != null) {
    for (int i=0; i < parameters.size(); i++) {
      ScalarParameterHandle parameter=null;
      if (parameters.get(i) instanceof ScalarParameterHandle) {
        parameter=((ScalarParameterHandle)parameters.get(i));
      }
      String curName=null;
      if (parameter != null && parameter.getName() != null) {
        curName=parameter.getName() + parameter.getID();
      }
      if (curName != null && curName.equalsIgnoreCase(configVarName)) {
        paramName=parameter.getName();
        break;
      }
    }
  }
  return paramName;
}",0.9239250275633958
78140,"/** 
 * if parameter existed in config file, return the correct parameter name
 * @param configVarName
 * @return String
 */
private String getParameterName(String configVarName){
  String paramName=null;
  List parameters=null;
  IReportRunnable runnable=(IReportRunnable)reportDesignHandle.getDesignObject();
  ModuleHandle model=runnable.getDesignHandle().getModuleHandle();
  if (model != null) {
    parameters=model.getFlattenParameters();
  }
  if (parameters != null) {
    for (int i=0; i < parameters.size(); i++) {
      ScalarParameterHandle parameter=((ScalarParameterHandle)parameters.get(i));
      String curName=null;
      if (parameter != null && parameter.getName() != null) {
        curName=parameter.getName() + parameter.getID();
      }
      if (curName != null && curName.equalsIgnoreCase(configVarName)) {
        paramName=parameter.getName();
        break;
      }
    }
  }
  return paramName;
}","/** 
 * if parameter existed in config file, return the correct parameter name
 * @param configVarName
 * @return String
 */
private String getParameterName(String configVarName){
  String paramName=null;
  List parameters=null;
  IReportRunnable runnable=(IReportRunnable)reportDesignHandle.getDesignObject();
  ModuleHandle model=runnable.getDesignHandle().getModuleHandle();
  if (model != null) {
    parameters=model.getFlattenParameters();
  }
  if (parameters != null) {
    for (int i=0; i < parameters.size(); i++) {
      ScalarParameterHandle parameter=null;
      if (parameters.get(i) instanceof ScalarParameterHandle) {
        parameter=((ScalarParameterHandle)parameters.get(i));
      }
      String curName=null;
      if (parameter != null && parameter.getName() != null) {
        curName=parameter.getName() + parameter.getID();
      }
      if (curName != null && curName.equalsIgnoreCase(configVarName)) {
        paramName=parameter.getName();
        break;
      }
    }
  }
  return paramName;
}",0.9292307692307692
78141,"/** 
 * Popup the builder for Data element
 */
public void performDirectEdit(){
  TextDataHandle handle=(TextDataHandle)getModel();
  ExpressionBuilder dialog=new ExpressionBuilder(PlatformUI.getWorkbench().getDisplay().getActiveShell(),handle.getValueExpr());
  dialog.setExpressionProvier(new BindingExpressionProvider(handle));
  if (dialog.open() == Dialog.OK) {
    try {
      ((TextDataHandle)getModel()).setValueExpr(dialog.getResult());
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
      return;
    }
    refreshVisuals();
  }
}","/** 
 * Popup the builder for Data element
 */
public void performDirectEdit(){
  TextDataHandle handle=(TextDataHandle)getModel();
  ExpressionBuilder dialog=new ExpressionBuilder(PlatformUI.getWorkbench().getDisplay().getActiveShell(),handle.getValueExpr());
  dialog.setExpressionProvier(new ExpressionProvider(handle));
  if (dialog.open() == Dialog.OK) {
    try {
      ((TextDataHandle)getModel()).setValueExpr(dialog.getResult());
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
      return;
    }
    refreshVisuals();
  }
}",0.9937998228520816
78142,"/** 
 * Switch to select file in BIRT resource folder.
 */
private void swtichToResourceType(){
  Label title=new Label(inputArea,SWT.NONE);
  uriEditor=new Text(inputArea,SWT.SINGLE | SWT.BORDER | SWT.READ_ONLY);
  uriEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  uriEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  Composite innerComp=new Composite(inputArea,SWT.NONE);
  innerComp.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
  innerComp.setLayout(new GridLayout(2,false));
  title.setText(DLG_ENTER_URI_LABEL);
  Button inputButton=new Button(innerComp,SWT.PUSH);
  inputButton.setText(Messages.getString(""String_Node_Str""));
  inputButton.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
  inputButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      openResourceBrowser();
    }
  }
);
  previewButton=new Button(innerComp,SWT.PUSH);
  previewButton.setText(DLG_PREVIEW_LABEL);
  previewButton.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
  previewButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      uriEditor.setText(uriEditor.getText().trim());
      preview(CorePlugin.RESOURCE_FOLDER + File.separator + removeQuoteString(uriEditor.getText()));
    }
  }
);
  initURIEditor();
}","/** 
 * Switch to select file in BIRT resource folder.
 */
private void swtichToResourceType(){
  Label title=new Label(inputArea,SWT.NONE);
  uriEditor=new Text(inputArea,SWT.SINGLE | SWT.BORDER | SWT.READ_ONLY);
  uriEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  uriEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  Composite innerComp=new Composite(inputArea,SWT.NONE);
  innerComp.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
  innerComp.setLayout(new GridLayout(2,false));
  title.setText(DLG_ENTER_RESOURCE_FILE_LABEL);
  Button inputButton=new Button(innerComp,SWT.PUSH);
  inputButton.setText(Messages.getString(""String_Node_Str""));
  inputButton.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
  inputButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      openResourceBrowser();
    }
  }
);
  previewButton=new Button(innerComp,SWT.PUSH);
  previewButton.setText(DLG_PREVIEW_LABEL);
  previewButton.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
  previewButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      uriEditor.setText(uriEditor.getText().trim());
      preview(CorePlugin.RESOURCE_FOLDER + File.separator + removeQuoteString(uriEditor.getText()));
    }
  }
);
  initURIEditor();
}",0.9965706447187928
78143,"/** 
 * @param rs
 * @param rinfo
 * @param fileName
 * @param tName
 * @throws OdaException
 */
public SaxParserConsumer(ResultSet rs,RelationInformation rinfo,InputStream is,String tName) throws OdaException {
  this.resultSet=rs;
  cachedResultSetRowNo=0;
  currentAvailableMaxLineNo=-1;
  tableName=tName;
  relationInfo=rinfo;
  nestedColumnUtil=new NestedColumnUtil(relationInfo,tableName,true);
  currentRowNo=0;
  cachedResultSet=new String[Constants.CACHED_RESULT_SET_LENGTH][resultSet.getMetaData().getColumnCount()];
  this.rootPath=relationInfo.getTableRootPath(tableName);
  this.namesOfCachedComplexNestedColumns=relationInfo.getTableComplexNestedXMLColumnNames(tableName);
  this.namesOfCachedSimpleNestedColumns=relationInfo.getTableSimpleNestedXMLColumnNames(tableName);
  this.namesOfColumns=relationInfo.getTableColumnNames(tableName);
  XMLDataInputStream xdis=(is instanceof XMLDataInputStream) ? (XMLDataInputStream)is : new XMLDataInputStream(is);
  if (namesOfCachedComplexNestedColumns.length > 0) {
    spNestedQueryHelper=new SaxParserComplexNestedQueryHelper(rinfo,xdis,tName);
    while (!spNestedQueryHelper.isPrepared()) {
      try {
synchronized (this) {
          wait(1000);
        }
      }
 catch (      InterruptedException e) {
        throw new OdaException(e.getLocalizedMessage());
      }
    }
  }
  sp=new SaxParser(xdis,this);
  spThread=new Thread(sp);
  spThread.start();
}","/** 
 * @param rs
 * @param rinfo
 * @param fileName
 * @param tName
 * @throws OdaException
 */
public SaxParserConsumer(ResultSet rs,RelationInformation rinfo,XMLDataInputStream is,String tName) throws OdaException {
  this.resultSet=rs;
  cachedResultSetRowNo=0;
  currentAvailableMaxLineNo=-1;
  tableName=tName;
  relationInfo=rinfo;
  nestedColumnUtil=new NestedColumnUtil(relationInfo,tableName,true);
  currentRowNo=0;
  cachedResultSet=new String[Constants.CACHED_RESULT_SET_LENGTH][resultSet.getMetaData().getColumnCount()];
  this.rootPath=relationInfo.getTableRootPath(tableName);
  this.namesOfCachedComplexNestedColumns=relationInfo.getTableComplexNestedXMLColumnNames(tableName);
  this.namesOfCachedSimpleNestedColumns=relationInfo.getTableSimpleNestedXMLColumnNames(tableName);
  this.namesOfColumns=relationInfo.getTableColumnNames(tableName);
  XMLDataInputStream xdis=is;
  if (namesOfCachedComplexNestedColumns.length > 0) {
    spNestedQueryHelper=new SaxParserComplexNestedQueryHelper(rinfo,xdis,tName);
    while (!spNestedQueryHelper.isPrepared()) {
      try {
synchronized (this) {
          wait(1000);
        }
      }
 catch (      InterruptedException e) {
        throw new OdaException(e.getLocalizedMessage());
      }
    }
  }
  sp=new SaxParser(xdis,this);
  spThread=new Thread(sp);
  spThread.start();
}",0.9649186256781194
78144,"/** 
 * Writes the XML document to an output stream
 * @param svgDocument
 * @param outputStream
 * @throws Exception
 */
private void writeDocumentToOutputStream(Document svgDocument,OutputStream outputStream) throws Exception {
  if (svgDocument != null && outputStream != null) {
    OutputStreamWriter writer=null;
    writer=new OutputStreamWriter(outputStream,""String_Node_Str"");
    DOMSource source=new DOMSource(svgDocument);
    StreamResult result=new StreamResult(writer);
    TransformerFactory transFactory=TransformerFactory.newInstance();
    Transformer transformer=transFactory.newTransformer();
    transformer.transform(source,result);
  }
}","/** 
 * Writes the XML document to an output stream
 * @param svgDocument
 * @param outputStream
 * @throws Exception
 */
private void writeDocumentToOutputStream(Document svgDocument,OutputStream outputStream) throws Exception {
  if (svgDocument != null && outputStream != null) {
    OutputStreamWriter writer=null;
    writer=new OutputStreamWriter(outputStream,""String_Node_Str"");
    DOMSource source=new DOMSource(svgDocument);
    StreamResult result=new StreamResult(writer);
    checkForTransformFactoryImpl();
    TransformerFactory transFactory=TransformerFactory.newInstance();
    Transformer transformer=transFactory.newTransformer();
    transformer.transform(source,result);
  }
}",0.9734904270986744
78145,"protected void __initParameters(HttpServletRequest request) throws Exception {
  IViewerReportDesignHandle design=getDesignHandle(request);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  Collection parameterList=this.getReportService().getParameterDefinitions(design,options,false);
  this.parameters=(HashMap)getParsedParameters(design,parameterList,request,options);
  this.missingParameter=validateParameters(parameterList,this.parameters);
}","protected void __initParameters(HttpServletRequest request) throws Exception {
  this.reportDesignHandle=getDesignHandle(request);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  Collection parameterList=this.getReportService().getParameterDefinitions(this.reportDesignHandle,options,false);
  this.parameters=(HashMap)getParsedParameters(this.reportDesignHandle,parameterList,request,options);
  this.missingParameter=validateParameters(parameterList,this.parameters);
}",0.929902395740905
78146,"protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName);
  if (reportDocumentInstance != null) {
    reportRunnable=reportDocumentInstance.getReportRunnable();
    reportDocumentInstance.close();
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
 else {
    design=new BirtViewerReportDesignHandle(null,reportDesignName);
  }
  return design;
}","protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request){
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName);
  if (reportDocumentInstance != null) {
    reportRunnable=reportDocumentInstance.getReportRunnable();
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
      this.parameterMap=reportDocumentInstance.getParameterValues();
    }
    reportDocumentInstance.close();
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
 else {
    design=new BirtViewerReportDesignHandle(null,reportDesignName);
  }
  return design;
}",0.8922077922077922
78147,"protected void __initParameters(HttpServletRequest request) throws Exception {
  IViewerReportDesignHandle design=getDesignHandle(request);
  if (isDesigner) {
    this.parseConfigVars(request);
  }
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  Collection parameterList=this.getReportService().getParameterDefinitions(design,options,false);
  this.parameters=(HashMap)getParsedParameters(design,parameterList,request,options);
  this.missingParameter=validateParameters(parameterList,this.parameters);
}","protected void __initParameters(HttpServletRequest request) throws Exception {
  this.reportDesignHandle=getDesignHandle(request);
  if (isDesigner) {
    this.parseConfigVars(request);
  }
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  Collection parameterList=this.getReportService().getParameterDefinitions(reportDesignHandle,options,false);
  this.parameters=(HashMap)getParsedParameters(reportDesignHandle,parameterList,request,options);
  this.missingParameter=validateParameters(parameterList,this.parameters);
}",0.9441295546558705
78148,"/** 
 * parse paramenters from config file.
 * @param request
 * @return
 */
protected void parseConfigVars(HttpServletRequest request){
  String reportConfigName=this.reportDesignName.replaceFirst(IBirtConstants.SUFFIX_DESIGN_FILE,IBirtConstants.SUFFIX_DESIGN_CONFIG);
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.getDefault());
  ReportDesignHandle handle=null;
  try {
    this.configMap=new HashMap();
    handle=sessionHandle.openDesign(reportConfigName);
    Iterator configVars=handle.configVariablesIterator();
    while (configVars.hasNext()) {
      ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
      if (configVar != null && configVar.getName() != null) {
        this.configMap.put(configVar.getName(),configVar.getValue());
      }
    }
    handle.close();
  }
 catch (  Exception e) {
    try {
      handle.close();
    }
 catch (    Exception err) {
    }
  }
}","/** 
 * parse paramenters from config file.
 * @param request
 * @return
 */
protected void parseConfigVars(HttpServletRequest request){
  String reportConfigName=this.reportDesignName.replaceFirst(IBirtConstants.SUFFIX_DESIGN_FILE,IBirtConstants.SUFFIX_DESIGN_CONFIG);
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.getDefault());
  ReportDesignHandle handle=null;
  try {
    this.configMap=new HashMap();
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          this.configMap.put(configVar.getName(),configVar.getValue());
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
    try {
      if (handle != null)       handle.close();
    }
 catch (    Exception err) {
    }
  }
}",0.831958762886598
78149,"/** 
 * get parameter object.
 * @param request
 * @param parameterObj
 * @exception Throwable
 * @return
 */
protected Object getParamValueObject(HttpServletRequest request,ParameterDefinition parameterObj) throws ReportServiceException {
  String paramName=parameterObj.getName();
  String format=parameterObj.getDisplayFormat();
  Object paramValueObj=super.getParamValueObject(request,parameterObj);
  if (paramValueObj != null)   return paramValueObj;
  IReportRunnable runnable;
  try {
    runnable=ReportEngineService.getInstance().openReportDesign(reportDesignName);
  }
 catch (  EngineException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
  Map configMap=runnable.getTestConfig();
  if (ParameterAccessor.isDesigner(request) && configMap.containsKey(paramName)) {
    String configValue=(String)configMap.get(paramName);
    ReportParameterConverter cfgConverter=new ReportParameterConverter(format,Locale.US);
    return cfgConverter.parse(configValue,parameterObj.getDataType());
  }
 else   return super.getParamValueObject(request,parameterObj);
}","/** 
 * get parameter object.
 * @param request
 * @param parameterObj
 * @exception Throwable
 * @return
 */
protected Object getParamValueObject(HttpServletRequest request,ParameterDefinition parameterObj) throws ReportServiceException {
  String paramName=parameterObj.getName();
  String format=parameterObj.getDisplayFormat();
  Object paramValueObj=super.getParamValueObject(request,parameterObj);
  if (paramValueObj != null)   return paramValueObj;
  if (ParameterAccessor.isDesigner(request) && this.configMap != null && this.configMap.containsKey(paramName)) {
    paramValueObj=this.configMap.get(paramName);
  }
 else   if (this.parameterMap != null && this.parameterMap.containsKey(paramName)) {
    paramValueObj=this.parameterMap.get(paramName);
  }
  if (paramValueObj != null) {
    ReportParameterConverter cfgConverter=new ReportParameterConverter(format,Locale.US);
    return cfgConverter.parse(paramValueObj.toString(),parameterObj.getDataType());
  }
 else {
    return super.getParamValueObject(request,parameterObj);
  }
}",0.7487131492746841
78150,"protected void doService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  Collection fragments=new ArrayList();
  IViewerReportService service=getReportService();
  String reportDesignName=ParameterAccessor.getReport(request);
  Collection parameters=null;
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  IViewerReportDesignHandle design=new BirtViewerReportDesignHandle(null,reportDesignName);
  try {
    parameters=service.getParameterDefinitions(design,options,true);
  }
 catch (  ReportServiceException e) {
    e.printStackTrace();
  }
  if (parameters != null) {
    Iterator iParameters=parameters.iterator();
    while (iParameters != null && iParameters.hasNext()) {
      Object parameter=iParameters.next();
      if (parameter == null) {
        continue;
      }
      IFragment fragment=null;
      if (parameter instanceof ParameterGroupDefinition) {
        fragment=new ParameterGroupFragment((ParameterGroupDefinition)parameter);
      }
 else       if (parameter instanceof ParameterDefinition) {
        ParameterDefinition scalarParameter=(ParameterDefinition)parameter;
        if (!scalarParameter.isHidden()) {
switch (scalarParameter.getControlType()) {
case ParameterDefinition.TEXT_BOX:
{
              fragment=new TextBoxParameterFragment(scalarParameter);
              break;
            }
case ParameterDefinition.LIST_BOX:
{
            fragment=new ComboBoxParameterFragment(scalarParameter);
            break;
          }
case ParameterDefinition.RADIO_BUTTON:
{
          fragment=new RadioButtonParameterFragment(scalarParameter);
          break;
        }
case ParameterDefinition.CHECK_BOX:
{
        fragment=new CheckboxParameterFragment(scalarParameter);
        break;
      }
  }
}
}
if (fragment != null) {
fragment.setJSPRootPath(JSPRootPath);
fragments.add(fragment);
}
}
}
request.setAttribute(""String_Node_Str"",fragments);
}","protected void doService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
}",0.1161904761904761
78151,"protected void prepareParameterBean(HttpServletRequest request,IViewerReportService service,ScalarParameterBean parameterBean,Locale locale) throws ReportServiceException {
  String reportDesignName=ParameterAccessor.getReport(request);
  ViewerAttributeBean attrBean=(ViewerAttributeBean)request.getAttribute(""String_Node_Str"");
  IViewerReportDesignHandle design=new BirtViewerReportDesignHandle(null,reportDesignName);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  Collection selectionList=null;
  ParameterDefinition paramDef=parameterBean.getParameter();
  if (paramDef.getGroup() != null && paramDef.getGroup().cascade()) {
    Map paramValues=attrBean.getParameters();
    selectionList=getParameterSelectionListForCascadingGroup(design,service,paramValues);
  }
 else   selectionList=service.getParameterSelectionList(design,options,parameter.getName());
  parameterBean.setValueInList(false);
  if (selectionList != null) {
    ReportParameterConverter converter=new ReportParameterConverter(parameter.getPattern(),locale);
    for (Iterator iter=selectionList.iterator(); iter.hasNext(); ) {
      ParameterSelectionChoice selectionItem=(ParameterSelectionChoice)iter.next();
      String value=converter.format(selectionItem.getValue());
      String label=selectionItem.getLabel();
      label=(label == null || label.length() <= 0) ? value : label;
      label=ParameterAccessor.htmlEncode(label);
      if (label != null) {
        parameterBean.getSelectionList().add(label);
        parameterBean.getSelectionTable().put(label,value);
      }
      if (value != null && value.equals(parameterBean.getValue())) {
        parameterBean.setValueInList(true);
      }
    }
  }
}","protected void prepareParameterBean(HttpServletRequest request,IViewerReportService service,ScalarParameterBean parameterBean,Locale locale) throws ReportServiceException {
}",0.1813444502344971
78152,"protected void prepareParameterBean(HttpServletRequest request,IViewerReportService service,ScalarParameterBean parameterBean,Locale locale) throws ReportServiceException {
  String reportDesignName=ParameterAccessor.getReport(request);
  IViewerReportDesignHandle designHandle=new BirtViewerReportDesignHandle(null,reportDesignName);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  Collection selectionList=service.getParameterSelectionList(designHandle,options,parameterBean.getName());
  if (selectionList != null) {
    ReportParameterConverter converter=new ReportParameterConverter(parameter.getPattern(),locale);
    for (Iterator iter=selectionList.iterator(); iter.hasNext(); ) {
      ParameterSelectionChoice selectionItem=(ParameterSelectionChoice)iter.next();
      String value=converter.format(selectionItem.getValue());
      String label=selectionItem.getLabel();
      label=(label == null || label.length() <= 0) ? value : label;
      label=ParameterAccessor.htmlEncode(label);
      parameterBean.getSelectionList().add(label);
      parameterBean.getSelectionTable().put(label,value);
    }
  }
}","protected void prepareParameterBean(HttpServletRequest request,IViewerReportService service,ScalarParameterBean parameterBean,Locale locale) throws ReportServiceException {
}",0.2589285714285714
78153,"public boolean onBroughtToTop(IReportEditorPage prePage){
  boolean isDisplay=false;
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (prePage.isDirty()) {
    prePage.doSave(null);
  }
  if (isMissingParameter()) {
    if (parameterDialog != null) {
      parameterDialog.open();
      if (parameterDialog.getReturnCode() == InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED) {
        isDisplay=true;
      }
    }
  }
 else {
    isDisplay=true;
  }
  if (isDisplay) {
    display();
  }
  return true;
}","public boolean onBroughtToTop(IReportEditorPage prePage){
  boolean isDisplay=false;
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (prePage.isDirty()) {
    prePage.doSave(null);
  }
  if (isMissingParameter()) {
    if (parameterDialog != null) {
      parameterDialog.open();
      if (parameterDialog.getReturnCode() == InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED) {
        isDisplay=true;
        if (isMissingParameter()) {
          editor.setActivePage(prePage.getId());
          return false;
        }
      }
    }
  }
 else {
    isDisplay=true;
  }
  if (isDisplay) {
    display();
  }
  return true;
}",0.9044176706827308
78154,"private final boolean isValidPrecedingCharacter(int iCh){
  return (iCh == ' ' || iCh == '\r' || iCh == '\n');
}","private final boolean isValidPrecedingCharacter(int iCh){
  return (iCh == ' ' || iCh == '\t' || iCh == '\r' || iCh == '\n');
}",0.9372384937238494
78155,"public AbstractContent(IContent content){
  this(content.getReportContent());
  this.name=content.getName();
  this.bounds=content.getBounds();
  this.x=content.getX();
  this.y=content.getY();
  this.width=content.getWidth();
  this.height=content.getHeight();
  this.hyperlink=content.getHyperlinkAction();
  this.bookmark=content.getBookmark();
  this.helpText=content.getHelpText();
  this.inlineStyle=content.getInlineStyle();
  this.generateBy=content.getGenerateBy();
  this.styleClass=content.getStyleClass();
  this.instanceId=content.getInstanceID();
  this.toc=content.getTOC();
}","public AbstractContent(IContent content){
  this(content.getReportContent());
  this.name=content.getName();
  this.x=content.getX();
  this.y=content.getY();
  this.width=content.getWidth();
  this.height=content.getHeight();
  this.hyperlink=content.getHyperlinkAction();
  this.bookmark=content.getBookmark();
  this.helpText=content.getHelpText();
  this.inlineStyle=content.getInlineStyle();
  this.generateBy=content.getGenerateBy();
  this.styleClass=content.getStyleClass();
  this.instanceId=content.getInstanceID();
  this.toc=content.getTOC();
}",0.969485614646905
78156,"/** 
 * @return the width of the report item
 */
public DimensionType getWidth(){
  return width;
}","/** 
 * @return the width of the report item
 */
public DimensionType getWidth(){
  if (width != null) {
    return width;
  }
  if (generateBy instanceof ReportItemDesign) {
    return ((ReportItemDesign)generateBy).getWidth();
  }
  return null;
}",0.5287356321839081
78157,"/** 
 * @return the height of the report item
 */
public DimensionType getHeight(){
  return height;
}","/** 
 * @return the height of the report item
 */
public DimensionType getHeight(){
  if (height != null) {
    return height;
  }
  if (generateBy instanceof ReportItemDesign) {
    return ((ReportItemDesign)generateBy).getHeight();
  }
  return null;
}",0.5730337078651685
78158,"/** 
 * @return the x position of the repor titem.
 */
public DimensionType getX(){
  return x;
}","/** 
 * @return the x position of the repor titem.
 */
public DimensionType getX(){
  if (x != null) {
    return x;
  }
  if (generateBy instanceof ReportItemDesign) {
    return ((ReportItemDesign)generateBy).getX();
  }
  return null;
}",0.5773809523809523
78159,"/** 
 * @return Returns the y position of the repor titem.
 */
public DimensionType getY(){
  return y;
}","/** 
 * @return Returns the y position of the repor titem.
 */
public DimensionType getY(){
  if (y != null) {
    return y;
  }
  if (generateBy instanceof ReportItemDesign) {
    return ((ReportItemDesign)generateBy).getY();
  }
  return null;
}",0.5965909090909091
78160,"protected IResultSet doExecuteQuery(DteResultSet parentResult,IQueryDefinition query){
  String queryID=(String)queryIDMap.get(query);
  try {
    IQueryResults parentQueryResults=null;
    if (parentResult != null) {
      parentQueryResults=parentResult.getQueryResults();
    }
    String resultSetID=null;
    if (parentQueryResults == null) {
      resultSetID=getResultID(null,-1,queryID);
    }
 else {
      String pRsetId=parentQueryResults.getID();
      long rowid=parentResult.getRawID();
      resultSetID=getResultID(pRsetId,rowid,queryID);
    }
    if (resultSetID == null) {
      logger.log(Level.SEVERE,""String_Node_Str"");
      return null;
    }
    ((QueryDefinition)query).setQueryResultsID(resultSetID);
    IPreparedQuery pQuery=dteEngine.prepare(query);
    Scriptable scope=context.getSharedScope();
    IQueryResults dteResults;
    if (parentQueryResults == null) {
      dteResults=pQuery.execute(scope);
    }
 else {
      dteResults=pQuery.execute(parentQueryResults,scope);
    }
    DteResultSet resultSet=new DteResultSet(dteResults.getID(),dteResults.getResultIterator(),this,context);
    rsets.addFirst(resultSet);
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
    return null;
  }
}","protected IResultSet doExecuteQuery(DteResultSet parentResult,IQueryDefinition query){
  String queryID=(String)queryIDMap.get(query);
  try {
    IQueryResults parentQueryResults=null;
    if (parentResult != null) {
      parentQueryResults=parentResult.getQueryResults();
    }
    String resultSetID=null;
    if (parentQueryResults == null) {
      resultSetID=getResultID(null,-1,queryID);
    }
 else {
      String pRsetId=parentQueryResults.getID();
      long rowid=parentResult.getRawID();
      resultSetID=getResultID(pRsetId,rowid,queryID);
    }
    if (resultSetID == null) {
      logger.log(Level.SEVERE,""String_Node_Str"");
      return null;
    }
    ((QueryDefinition)query).setQueryResultsID(resultSetID);
    IPreparedQuery pQuery=dteEngine.prepare(query);
    Scriptable scope=context.getSharedScope();
    IQueryResults dteResults;
    if (parentQueryResults == null) {
      dteResults=pQuery.execute(scope);
    }
 else {
      dteResults=pQuery.execute(parentQueryResults,scope);
    }
    DataSetID dataSetId=new DataSetID(dteResults.getID());
    DteResultSet resultSet=new DteResultSet(dataSetId,parentResult,dteResults.getResultIterator(),this,context);
    rsets.addFirst(resultSet);
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
    return null;
  }
}",0.9384098544232924
78161,"protected IResultSet doExecuteQuery(DteResultSet parentResult,IQueryDefinition query){
  String queryID=(String)queryIDMap.get(query);
  try {
    IQueryResults queryResults=null;
    if (parentResult != null) {
      queryResults=parentResult.getQueryResults();
    }
    String resultSetID=null;
    if (queryResults == null) {
      resultSetID=getResultID(null,-1,queryID);
    }
 else {
      String pRsetId=queryResults.getID();
      long rowid=parentResult.getCurrentPosition();
      resultSetID=getResultID(pRsetId,rowid,queryID);
    }
    if (resultSetID == null) {
      logger.log(Level.SEVERE,""String_Node_Str"");
      return null;
    }
    queryResults=dteEngine.getQueryResults(resultSetID);
    DteResultSet resultSet=new DteResultSet(queryResults.getID(),queryResults.getResultIterator(),this,context);
    rsets.addFirst(resultSet);
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
    return null;
  }
}","protected IResultSet doExecuteQuery(DteResultSet parentResult,IQueryDefinition query){
  String queryID=(String)queryIDMap.get(query);
  try {
    IQueryResults queryResults=null;
    if (parentResult != null) {
      queryResults=parentResult.getQueryResults();
    }
    String resultSetID=null;
    if (queryResults == null) {
      resultSetID=getResultID(null,-1,queryID);
    }
 else {
      String pRsetId=queryResults.getID();
      long rowid=parentResult.getCurrentPosition();
      resultSetID=getResultID(pRsetId,rowid,queryID);
    }
    if (resultSetID == null) {
      logger.log(Level.SEVERE,""String_Node_Str"");
      return null;
    }
    queryResults=dteEngine.getQueryResults(resultSetID);
    DataSetID dataSetId=new DataSetID(queryResults.getID());
    DteResultSet resultSet=new DteResultSet(dataSetId,parentResult,queryResults.getResultIterator(),this,context);
    rsets.addFirst(resultSet);
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
    return null;
  }
}",0.9187109187109188
78162,"protected IResultSet doExecuteQuery(DteResultSet resultSet,IQueryDefinition query){
  IPreparedQuery pQuery=(IPreparedQuery)queryMap.get(query);
  if (pQuery == null) {
    return null;
  }
  try {
    Scriptable scope=context.getSharedScope();
    IQueryResults dteResults;
    if (resultSet == null) {
      dteResults=pQuery.execute(scope);
    }
 else {
      dteResults=pQuery.execute(resultSet.getQueryResults(),scope);
    }
    resultSet=new DteResultSet(dteResults.getID(),dteResults.getResultIterator(),this,context);
    rsets.addFirst(resultSet);
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
  }
  return null;
}","protected IResultSet doExecuteQuery(DteResultSet resultSet,IQueryDefinition query){
  IPreparedQuery pQuery=(IPreparedQuery)queryMap.get(query);
  if (pQuery == null) {
    return null;
  }
  try {
    Scriptable scope=context.getSharedScope();
    IQueryResults dteResults;
    if (resultSet == null) {
      dteResults=pQuery.execute(scope);
    }
 else {
      dteResults=pQuery.execute(resultSet.getQueryResults(),scope);
    }
    DataSetID dataSetId=new DataSetID(dteResults.getID());
    resultSet=new DteResultSet(dataSetId,resultSet,dteResults.getResultIterator(),this,context);
    rsets.addFirst(resultSet);
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
  }
  return null;
}",0.9136302294197032
78163,"private static Collection convertEngineParameters(Collection params,IGetParameterDefinitionTask task,boolean includeGroups){
  if (params == null)   return Collections.EMPTY_LIST;
  List ret=new ArrayList();
  List groups=new ArrayList();
  for (Iterator it=params.iterator(); it.hasNext(); ) {
    Object o=it.next();
    if (o instanceof IParameterGroupDefn) {
      if (!includeGroups) {
        IParameterGroupDefn groupDef=(IParameterGroupDefn)o;
        List contents=new ArrayList(convertEngineParameters(groupDef.getContents(),task,true));
        ret.addAll(contents);
      }
      groups.add(o);
    }
  }
  for (Iterator it=params.iterator(); it.hasNext(); ) {
    Object o=it.next();
    if (o instanceof IScalarParameterDefn) {
      IScalarParameterDefn engineParam=(IScalarParameterDefn)o;
      ParameterGroupDefinition group=null;
      for (Iterator groupIt=groups.iterator(); groupIt.hasNext(); ) {
        IParameterGroupDefn tempGroup=(IParameterGroupDefn)groupIt.next();
        boolean cascade=tempGroup instanceof ICascadingParameterGroup;
        if (tempGroup.getContents().contains(engineParam)) {
          List contents=new ArrayList(convertEngineParameters(tempGroup.getContents(),task,true));
          group=new ParameterGroupDefinition(tempGroup.getName(),tempGroup.getDisplayName(),contents,cascade);
          break;
        }
      }
      ParameterDefinition param=convertScalarParameter(engineParam,group,task);
      ret.add(param);
    }
 else     if (o instanceof IParameterGroupDefn && includeGroups) {
      IParameterGroupDefn engineParam=(IParameterGroupDefn)o;
      boolean cascade=engineParam instanceof ICascadingParameterGroup;
      ParameterGroupDefinition paramGroup=new ParameterGroupDefinition(engineParam.getName(),engineParam.getDisplayName(),null,cascade);
      List contents=convertParametersInGroup(engineParam.getContents(),paramGroup,task);
      paramGroup.setParameters(contents);
      ret.add(paramGroup);
    }
  }
  return ret;
}","private static Collection convertEngineParameters(Collection params,IGetParameterDefinitionTask task,boolean includeGroups){
  if (params == null)   return Collections.EMPTY_LIST;
  List ret=new ArrayList();
  List groups=new ArrayList();
  for (Iterator it=params.iterator(); it.hasNext(); ) {
    Object o=it.next();
    if (o instanceof IParameterGroupDefn) {
      if (!includeGroups) {
        IParameterGroupDefn groupDef=(IParameterGroupDefn)o;
        ParameterGroupDefinition groupParam=convertGroupParameter(groupDef,task);
        ret.addAll(groupParam.getParameters());
      }
      groups.add(o);
    }
  }
  for (Iterator it=params.iterator(); it.hasNext(); ) {
    Object o=it.next();
    if (o instanceof IScalarParameterDefn) {
      IScalarParameterDefn engineParam=(IScalarParameterDefn)o;
      ParameterGroupDefinition group=null;
      for (Iterator groupIt=groups.iterator(); groupIt.hasNext(); ) {
        IParameterGroupDefn tempGroup=(IParameterGroupDefn)groupIt.next();
        boolean cascade=tempGroup instanceof ICascadingParameterGroup;
        if (tempGroup.getContents().contains(engineParam)) {
          List contents=new ArrayList(convertEngineParameters(tempGroup.getContents(),task,true));
          group=new ParameterGroupDefinition(tempGroup.getName(),tempGroup.getDisplayName(),contents,cascade);
          break;
        }
      }
      ParameterDefinition param=convertScalarParameter(engineParam,group,task);
      ret.add(param);
    }
 else     if (o instanceof IParameterGroupDefn && includeGroups) {
      IParameterGroupDefn engineParam=(IParameterGroupDefn)o;
      ParameterGroupDefinition paramGroup=convertGroupParameter(engineParam,task);
      ret.add(paramGroup);
    }
  }
  return ret;
}",0.8505072076882008
78164,"/** 
 * @return
 * @throws DataException
 */
private RDSave getRdSave() throws DataException {
  if (rdSave == null) {
    rdSave=RDUtil.newSave(this.context,this.queryDefn,this.queryResultID,1,null,-1);
  }
  return rdSave;
}","/** 
 * @return
 * @throws DataException
 */
private RDSave getRdSave() throws DataException {
  if (rdSave == null) {
    rdSave=RDUtil.newSave(this.context,this.queryDefn != null ? this.queryDefn : subQueryDefn,this.queryResultID,1,subQueryName,subQueryIndex);
  }
  return rdSave;
}",0.8532289628180039
78165,"/** 
 * @param name
 * @param value
 * @throws DataException
 */
void doSaveExpr(String name,Object value) throws DataException {
  if (needsSaveToDoc() == false)   return;
  if (isBasicSaved == false) {
    isBasicSaved=true;
    this.getRdSave().saveResultIterator(new DummyCachedResult(),-1,null);
  }
  this.getRdSave().saveExprValue(0,name,value);
}","/** 
 * @param name
 * @param value
 * @throws DataException
 */
void doSaveExpr(String name,Object value) throws DataException {
  if (needsSaveToDoc() == false)   return;
  if (isBasicSaved == false) {
    isBasicSaved=true;
    int groupLevel;
    int[] subQueryInfo;
    if (subQueryName == null) {
      groupLevel=-1;
      subQueryInfo=null;
    }
 else {
      groupLevel=1;
      subQueryInfo=new int[]{0,1};
    }
    this.getRdSave().saveResultIterator(new DummyCachedResult(),groupLevel,subQueryInfo);
  }
  this.getRdSave().saveExprValue(0,name,value);
}",0.755700325732899
78166,"public IResultIterator getSecondaryIterator(String subQueryName,Scriptable scope) throws BirtException {
  this.checkOpened();
  return queryResults.preparedQuery.execSubQuery(subQueryName,scope != null ? scope : queryScope,this.jsDummyRowObject);
}","public IResultIterator getSecondaryIterator(String subQueryName,Scriptable scope) throws BirtException {
  this.checkOpened();
  return queryResults.preparedQuery.execSubQuery(getQueryResultsID(),subQueryName,scope != null ? scope : queryScope,this.jsDummyRowObject);
}",0.9613899613899614
78167,"public void doSave(OutputStream resultClassStream,OutputStream dataSetDataStream,OutputStream groupInfoStream,boolean isSubQuery) throws DataException {
  try {
    IOUtil.writeInt(resultClassStream,0);
    if (dataSetDataStream != null)     IOUtil.writeInt(dataSetDataStream,0);
    IOUtil.writeInt(groupInfoStream,0);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}","public void doSave(OutputStream resultClassStream,OutputStream dataSetDataStream,OutputStream groupInfoStream,boolean isSubQuery) throws DataException {
  try {
    if (resultClassStream != null)     IOUtil.writeInt(resultClassStream,0);
    if (dataSetDataStream != null)     IOUtil.writeInt(dataSetDataStream,0);
    IOUtil.writeInt(groupInfoStream,0);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}",0.9615806805708014
78168,"/** 
 * @return
 * @throws BirtException 
 */
private IResultIterator execSubQuery(String name,Scriptable scope,Scriptable parentScope) throws BirtException {
  Object ob=subQueryMap.get(name);
  if (ob == null)   return null;
  PreparedDummyQuery preparedQuery=new PreparedDummyQuery(context,(ISubqueryDefinition)ob,scope);
  return preparedQuery.executeQuery(scope,parentScope).getResultIterator();
}","/** 
 * @return
 * @throws BirtException 
 */
private IResultIterator execSubQuery(String parentQueryResultID,String name,Scriptable scope,Scriptable parentScope) throws BirtException {
  Object ob=subQueryMap.get(name);
  if (ob == null)   return null;
  PreparedDummyQuery preparedQuery=new PreparedDummyQuery(context,(ISubqueryDefinition)ob,scope);
  preparedQuery.subQueryName=name;
  preparedQuery.subQueryIndex=0;
  QueryResults queryResults=(QueryResults)preparedQuery.executeQuery(scope,parentScope);
  queryResults.setID(parentQueryResultID);
  return queryResults.getResultIterator();
}",0.7915831663326653
78169,"private Map getConfigVars(){
  HashMap configVars=new HashMap();
  String reportDesignName=this.getFileUri();
  String configFileName=reportDesignName.replaceFirst(IBirtPreviewConstants.SUFFIX_DESIGN_FILE,IBirtPreviewConstants.SUFFIX_DESIGN_CONFIG);
  try {
    SessionHandle sessionHandle=DesignEngine.newSession(ULocale.getDefault());
    File configFile=new File(configFileName);
    if (configFile != null && configFile.exists() && configFile.isFile()) {
      ReportDesignHandle handle=sessionHandle.openDesign(configFileName);
      Iterator it=handle.configVariablesIterator();
      while (it.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)it.next();
        if (configVar != null && configVar.getName() != null) {
          configVars.put(configVar.getName(),configVar.getValue());
        }
      }
    }
  }
 catch (  DesignFileException e) {
    e.printStackTrace();
  }
  return configVars;
}","private Map getConfigVars(){
  HashMap configVars=new HashMap();
  String reportDesignName=this.getFileUri();
  String configFileName=reportDesignName.replaceFirst(SUFFIX_DESIGN_FILE,SUFFIX_DESIGN_CONFIG);
  try {
    SessionHandle sessionHandle=SessionHandleAdapter.getInstance().getSessionHandle();
    File configFile=new File(configFileName);
    if (configFile != null && configFile.exists() && configFile.isFile()) {
      ReportDesignHandle handle=sessionHandle.openDesign(configFileName);
      Iterator it=handle.configVariablesIterator();
      while (it.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)it.next();
        if (configVar != null && configVar.getName() != null) {
          configVars.put(configVar.getName(),configVar.getValue());
        }
      }
    }
  }
 catch (  DesignFileException e) {
    e.printStackTrace();
  }
  return configVars;
}",0.9234135667396062
78170,"private Map getConfigVars(){
  HashMap configVars=new HashMap();
  String reportDesignName=this.getFileUri();
  String configFileName=reportDesignName.replaceFirst(IBirtConstants.SUFFIX_DESIGN_FILE,IBirtConstants.SUFFIX_DESIGN_CONFIG);
  try {
    SessionHandle sessionHandle=DesignEngine.newSession(ULocale.getDefault());
    File configFile=new File(configFileName);
    if (configFile != null && configFile.exists() && configFile.isFile()) {
      ReportDesignHandle handle=sessionHandle.openDesign(configFileName);
      Iterator it=handle.configVariablesIterator();
      while (it.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)it.next();
        if (configVar != null && configVar.getName() != null) {
          configVars.put(configVar.getName(),configVar.getValue());
        }
      }
    }
  }
 catch (  DesignFileException e) {
    e.printStackTrace();
  }
  return configVars;
}","private Map getConfigVars(){
  HashMap configVars=new HashMap();
  String reportDesignName=this.getFileUri();
  String configFileName=reportDesignName.replaceFirst(IBirtPreviewConstants.SUFFIX_DESIGN_FILE,IBirtPreviewConstants.SUFFIX_DESIGN_CONFIG);
  try {
    SessionHandle sessionHandle=DesignEngine.newSession(ULocale.getDefault());
    File configFile=new File(configFileName);
    if (configFile != null && configFile.exists() && configFile.isFile()) {
      ReportDesignHandle handle=sessionHandle.openDesign(configFileName);
      Iterator it=handle.configVariablesIterator();
      while (it.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)it.next();
        if (configVar != null && configVar.getName() != null) {
          configVars.put(configVar.getName(),configVar.getValue());
        }
      }
    }
  }
 catch (  DesignFileException e) {
    e.printStackTrace();
  }
  return configVars;
}",0.9924324324324324
78171,"/** 
 * Creates sorting and filter table area
 * @param parent the parent composite
 */
private void createFilterSortingArea(Composite parent){
  Group group=new Group(parent,SWT.NONE);
  group.setText(GROUP_DLG_GROUP_FILTER_SORTING);
  group.setLayout(new GridLayout());
  group.setLayoutData(new GridData(550,250));
  ArrayList list=new ArrayList(1);
  list.add(inputGroup);
  TabFolder tab=new TabFolder(group,SWT.TOP);
  tab.setLayoutData(new GridData(GridData.FILL_BOTH));
  TabItem bindingItem=new TabItem(tab,SWT.NONE);
  FormPage bindingPage=new DataSetColumnBindingsFormPage(tab,new DataSetColumnBindingsFormHandleProvider());
  bindingPage.setInput(list);
  bindingItem.setText(TAB_BINDING);
  bindingItem.setControl(bindingPage);
  TabItem filterItem=new TabItem(tab,SWT.NONE);
  FormPage filterPage=new FormPage(tab,FormPage.NORMAL_FUNCTION,new FilterHandleProvider(){
    public int[] getColumnWidths(){
      return new int[]{200,100,100,100};
    }
  }
);
  filterPage.setInput(list);
  filterItem.setText(TAB_FILTER);
  filterItem.setControl(filterPage);
  TabItem sortItem=new TabItem(tab,SWT.NONE);
  FormPage sortPage=new FormPage(tab,FormPage.NORMAL_FUNCTION,new SortingHandleProvider(){
    public int[] getColumnWidths(){
      return new int[]{200,100};
    }
  }
);
  sortPage.setInput(list);
  sortItem.setText(TAB_SORTING);
  sortItem.setControl(sortPage);
}","/** 
 * Creates sorting and filter table area
 * @param parent the parent composite
 */
private void createFilterSortingArea(Composite parent){
  Group group=new Group(parent,SWT.NONE);
  group.setText(GROUP_DLG_GROUP_FILTER_SORTING);
  group.setLayout(new GridLayout());
  group.setLayoutData(new GridData(550,250));
  ArrayList list=new ArrayList(1);
  list.add(inputGroup);
  TabFolder tab=new TabFolder(group,SWT.TOP);
  tab.setLayoutData(new GridData(GridData.FILL_BOTH));
  TabItem filterItem=new TabItem(tab,SWT.NONE);
  FormPage filterPage=new FormPage(tab,FormPage.NORMAL_FUNCTION,new FilterHandleProvider(){
    public int[] getColumnWidths(){
      return new int[]{200,100,100,100};
    }
  }
);
  filterPage.setInput(list);
  filterItem.setText(TAB_FILTER);
  filterItem.setControl(filterPage);
  TabItem sortItem=new TabItem(tab,SWT.NONE);
  FormPage sortPage=new FormPage(tab,FormPage.NORMAL_FUNCTION,new SortingHandleProvider(){
    public int[] getColumnWidths(){
      return new int[]{200,100};
    }
  }
);
  sortPage.setInput(list);
  sortItem.setText(TAB_SORTING);
  sortItem.setControl(sortPage);
}",0.8950099800399202
78172,"/** 
 * Anything before do service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doPreService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  if (""String_Node_Str"".equalsIgnoreCase(request.getServletPath())) {
    response.setContentType(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(ParameterAccessor.getFormat(request))) {
    response.setContentType(""String_Node_Str"");
  }
 else {
    response.setContentType(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
}","/** 
 * Anything before do service.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
protected void doPreService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  if (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
    response.setContentType(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (ParameterAccessor.PARAM_FORMAT_PDF.equalsIgnoreCase(ParameterAccessor.getFormat(request))) {
    response.setContentType(""String_Node_Str"");
  }
 else {
    response.setContentType(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9666884389288048
78173,"/** 
 * Local initialization.
 * @return
 */
protected void __init(ServletConfig config){
  BirtReportServiceFactory.init(new BirtViewerReportService(config));
  viewer=new FramesetFragment();
  viewer.buildComposite();
  engine=new EngineFragment();
}","/** 
 * Local initialization.
 * @return
 */
protected void __init(ServletConfig config){
  BirtReportServiceFactory.init(new BirtViewerReportService(config));
  viewer=new FramesetFragment();
  viewer.buildComposite();
  engine=new EngineFragment();
  engine.buildComposite();
}",0.9491525423728814
78174,"protected void doService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  Collection fragments=new ArrayList();
  IViewerReportService service=getReportService();
  String reportDesignName=ParameterAccessor.getReport(request);
  Collection parameters=null;
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  IViewerReportDesignHandle design=new BirtViewerReportDesignHandle(null,reportDesignName);
  try {
    parameters=service.getParameterDefinitions(design,options,true);
  }
 catch (  ReportServiceException e) {
    e.printStackTrace();
  }
  if (parameters != null) {
    Iterator iParameters=parameters.iterator();
    while (iParameters != null && iParameters.hasNext()) {
      Object parameter=iParameters.next();
      if (parameter == null) {
        continue;
      }
      IFragment fragment=null;
      if (parameter instanceof ParameterGroupDefinition) {
        fragment=new ParameterGroupFragment((ParameterGroupDefinition)parameter);
      }
 else       if (parameter instanceof ParameterDefinition) {
        ParameterDefinition scalarParameter=(ParameterDefinition)parameter;
        if (!scalarParameter.isHidden()) {
switch (scalarParameter.getControlType()) {
case ParameterDefinition.TEXT_BOX:
{
              fragment=new TextBoxParameterFragment(scalarParameter);
              break;
            }
case ParameterDefinition.LIST_BOX:
{
            fragment=new ComboBoxParameterFragment(scalarParameter);
            break;
          }
case ParameterDefinition.RADIO_BUTTON:
{
          fragment=new RadioButtonParameterFragment(scalarParameter);
          break;
        }
case ParameterDefinition.CHECK_BOX:
{
        fragment=new CheckboxParameterFragment(scalarParameter);
        break;
      }
  }
}
}
if (fragment != null) {
fragments.add(fragment);
}
}
}
request.setAttribute(""String_Node_Str"",fragments);
}","protected void doService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  Collection fragments=new ArrayList();
  IViewerReportService service=getReportService();
  String reportDesignName=ParameterAccessor.getReport(request);
  Collection parameters=null;
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  IViewerReportDesignHandle design=new BirtViewerReportDesignHandle(null,reportDesignName);
  try {
    parameters=service.getParameterDefinitions(design,options,true);
  }
 catch (  ReportServiceException e) {
    e.printStackTrace();
  }
  if (parameters != null) {
    Iterator iParameters=parameters.iterator();
    while (iParameters != null && iParameters.hasNext()) {
      Object parameter=iParameters.next();
      if (parameter == null) {
        continue;
      }
      IFragment fragment=null;
      if (parameter instanceof ParameterGroupDefinition) {
        fragment=new ParameterGroupFragment((ParameterGroupDefinition)parameter);
      }
 else       if (parameter instanceof ParameterDefinition) {
        ParameterDefinition scalarParameter=(ParameterDefinition)parameter;
        if (!scalarParameter.isHidden()) {
switch (scalarParameter.getControlType()) {
case ParameterDefinition.TEXT_BOX:
{
              fragment=new TextBoxParameterFragment(scalarParameter);
              break;
            }
case ParameterDefinition.LIST_BOX:
{
            fragment=new ComboBoxParameterFragment(scalarParameter);
            break;
          }
case ParameterDefinition.RADIO_BUTTON:
{
          fragment=new RadioButtonParameterFragment(scalarParameter);
          break;
        }
case ParameterDefinition.CHECK_BOX:
{
        fragment=new CheckboxParameterFragment(scalarParameter);
        break;
      }
  }
}
}
if (fragment != null) {
fragment.setJSPRootPath(JSPRootPath);
fragments.add(fragment);
}
}
}
request.setAttribute(""String_Node_Str"",fragments);
}",0.9903011740684022
78175,"protected void prepareParameterBean(HttpServletRequest request,IViewerReportService service,ScalarParameterBean parameterBean,Locale locale) throws ReportServiceException {
  String reportDesignName=ParameterAccessor.getReport(request);
  ViewerAttributeBean attrBean=(ViewerAttributeBean)request.getAttribute(""String_Node_Str"");
  IViewerReportDesignHandle design=new BirtViewerReportDesignHandle(null,reportDesignName);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  Collection selectionList=null;
  ParameterDefinition paramDef=parameterBean.getParameter();
  if (paramDef.getGroup() != null) {
    Map paramValues=attrBean.getParameters();
    selectionList=getParameterSelectionListForCascadingGroup(design,service,paramValues);
  }
 else   selectionList=service.getParameterSelectionList(design,options,parameter.getName());
  parameterBean.setValueInList(false);
  if (selectionList != null) {
    ReportParameterConverter converter=new ReportParameterConverter(parameter.getPattern(),locale);
    for (Iterator iter=selectionList.iterator(); iter.hasNext(); ) {
      ParameterSelectionChoice selectionItem=(ParameterSelectionChoice)iter.next();
      String value=converter.format(selectionItem.getValue());
      String label=selectionItem.getLabel();
      label=(label == null || label.length() <= 0) ? value : label;
      label=ParameterAccessor.htmlEncode(label);
      if (label != null) {
        parameterBean.getSelectionList().add(label);
        parameterBean.getSelectionTable().put(label,value);
      }
      if (value != null && value.equals(parameterBean.getValue())) {
        parameterBean.setValueInList(true);
      }
    }
  }
}","protected void prepareParameterBean(HttpServletRequest request,IViewerReportService service,ScalarParameterBean parameterBean,Locale locale) throws ReportServiceException {
  String reportDesignName=ParameterAccessor.getReport(request);
  ViewerAttributeBean attrBean=(ViewerAttributeBean)request.getAttribute(""String_Node_Str"");
  IViewerReportDesignHandle design=new BirtViewerReportDesignHandle(null,reportDesignName);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  Collection selectionList=null;
  ParameterDefinition paramDef=parameterBean.getParameter();
  if (paramDef.getGroup() != null && paramDef.getGroup().cascade()) {
    Map paramValues=attrBean.getParameters();
    selectionList=getParameterSelectionListForCascadingGroup(design,service,paramValues);
  }
 else   selectionList=service.getParameterSelectionList(design,options,parameter.getName());
  parameterBean.setValueInList(false);
  if (selectionList != null) {
    ReportParameterConverter converter=new ReportParameterConverter(parameter.getPattern(),locale);
    for (Iterator iter=selectionList.iterator(); iter.hasNext(); ) {
      ParameterSelectionChoice selectionItem=(ParameterSelectionChoice)iter.next();
      String value=converter.format(selectionItem.getValue());
      String label=selectionItem.getLabel();
      label=(label == null || label.length() <= 0) ? value : label;
      label=ParameterAccessor.htmlEncode(label);
      if (label != null) {
        parameterBean.getSelectionList().add(label);
        parameterBean.getSelectionTable().put(label,value);
      }
      if (value != null && value.equals(parameterBean.getValue())) {
        parameterBean.setValueInList(true);
      }
    }
  }
}",0.9904541509979752
78176,"/** 
 * initialize the pdfEmitter
 */
public void initialize(IEmitterServices services){
  this.reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  Object renderContext=services.getRenderContext();
  if (renderContext != null && renderContext instanceof Map) {
    Object con=((Map)renderContext).get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (con instanceof PDFRenderContext) {
      this.context=(PDFRenderContext)con;
    }
  }
  Object fd=services.getOption(RenderOptionBase.OUTPUT_FILE_NAME);
  File file=null;
  try {
    if (fd != null) {
      file=new File(fd.toString());
      output=new FileOutputStream(file);
    }
  }
 catch (  FileNotFoundException fnfe) {
    logger.log(Level.WARNING,fnfe.getMessage(),fnfe);
  }
  if (output == null) {
    Object value=services.getOption(RenderOptionBase.OUTPUT_STREAM);
    if (value != null && value instanceof OutputStream) {
      output=(OutputStream)value;
    }
 else {
      try {
        file=new File(REPORT_FILE);
        output=new FileOutputStream(file);
      }
 catch (      FileNotFoundException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  }
}","/** 
 * initialize the pdfEmitter
 */
public void initialize(IEmitterServices services){
  this.reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  Object renderContext=services.getRenderContext();
  if (renderContext != null && renderContext instanceof Map) {
    Object con=((Map)renderContext).get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (con instanceof PDFRenderContext) {
      this.context=(PDFRenderContext)con;
    }
  }
  Object fd=services.getOption(RenderOptionBase.OUTPUT_FILE_NAME);
  File file=null;
  try {
    if (fd != null) {
      file=new File(fd.toString());
      File parent=file.getParentFile();
      if (parent != null && !parent.exists()) {
        parent.mkdirs();
      }
      output=new FileOutputStream(file);
    }
  }
 catch (  FileNotFoundException fnfe) {
    logger.log(Level.WARNING,fnfe.getMessage(),fnfe);
  }
  if (output == null) {
    Object value=services.getOption(RenderOptionBase.OUTPUT_STREAM);
    if (value != null && value instanceof OutputStream) {
      output=(OutputStream)value;
    }
 else {
      try {
        file=new File(REPORT_FILE);
        output=new FileOutputStream(file);
      }
 catch (      FileNotFoundException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  }
}",0.9540098821740784
78177,"/** 
 * Executes the prepared (data) execution plan of a report item. Returns an IResultSet object <p>
 * @param the query to be executed
 * @return IResultSet object or null if the query is null
 */
IResultSet execute(IBaseQueryDefinition query);","/** 
 * execute the query in the parent result
 * @param parent parent result set.
 * @param query query to be executed
 * @return result.
 */
IResultSet execute(IResultSet parent,IBaseQueryDefinition query);",0.3252747252747253
78178,abstract protected IResultSet doExecuteQuery(IBaseQueryDefinition query);,"abstract protected IResultSet doExecuteQuery(DteResultSet parent,IBaseQueryDefinition query);",0.8795180722891566
78179,"/** 
 */
public IResultSet execute(IBaseQueryDefinition query){
  if (query instanceof IQueryDefinition) {
    return doExecuteQuery(query);
  }
 else   if (query instanceof ISubqueryDefinition) {
    return doExecuteSubQuery(query);
  }
  return null;
}","/** 
 */
public IResultSet execute(IResultSet parent,IBaseQueryDefinition query){
  if (query instanceof IQueryDefinition) {
    return doExecuteQuery((DteResultSet)parent,query);
  }
 else   if (query instanceof ISubqueryDefinition) {
    return doExecuteSubQuery((DteResultSet)parent,query);
  }
  return null;
}",0.8943661971830986
78180,"/** 
 * get the sub query result from the current query.
 * @param query
 * @return
 */
protected IResultSet doExecuteSubQuery(IBaseQueryDefinition query){
}","/** 
 * get the sub query result from the current query.
 * @param query
 * @return
 */
protected IResultSet doExecuteSubQuery(DteResultSet parent,IBaseQueryDefinition query){
}",0.940119760479042
78181,"protected IResultSet doExecuteQuery(IBaseQueryDefinition query){
}","protected IResultSet doExecuteQuery(DteResultSet resultSet,IBaseQueryDefinition query){
}",0.8516129032258064
78182,"protected IResultSet doExecuteQuery(IBaseQueryDefinition query){
}","protected IResultSet doExecuteQuery(DteResultSet parentResult,IBaseQueryDefinition query){
}",0.8354430379746836
78183,"protected IResultSet doExecuteQuery(IBaseQueryDefinition query){
}","protected IResultSet doExecuteQuery(DteResultSet resultSet,IBaseQueryDefinition query){
}",0.8516129032258064
78184,"protected void generateContent(ExtendedItemDesign item,IForeignContent content){
  ExtendedItemHandle handle=(ExtendedItemHandle)item.getHandle();
  String tagName=handle.getExtensionName();
  String name=item.getName();
  IReportItemGeneration itemGeneration=ExtensionManager.getInstance().createGenerationItem(tagName);
  byte[] generationStatus=null;
  if (itemGeneration != null) {
    itemGeneration.setModelObject(handle);
    itemGeneration.setScriptContext(context.getReportContext());
    itemGeneration.setReportQueries(((ExtendedItemDesign)item).getQueries());
    IRowSet[] rowSets=executeQueries(item);
    try {
      if (rowSets != null) {
        itemGeneration.onRowSets(rowSets);
      }
      if (itemGeneration.needSerialization()) {
        ByteArrayOutputStream out=new ByteArrayOutputStream();
        itemGeneration.serialize(out);
        generationStatus=out.toByteArray();
      }
      itemGeneration.finish();
    }
 catch (    BirtException ex) {
      logger.log(Level.SEVERE,ex.getMessage(),ex);
      context.addException(new EngineException(MessageConstants.EXTENDED_ITEM_GENERATION_ERROR,handle.getExtensionName() + (name != null ? ""String_Node_Str"" + name : ""String_Node_Str""),ex));
    }
    closeQueries(rowSets);
  }
  content.setRawType(IForeignContent.EXTERNAL_TYPE);
  content.setRawValue(generationStatus);
}","protected void generateContent(ExtendedItemDesign item,IForeignContent content){
  ExtendedItemHandle handle=(ExtendedItemHandle)item.getHandle();
  String tagName=handle.getExtensionName();
  String name=item.getName();
  IReportItemGeneration itemGeneration=ExtensionManager.getInstance().createGenerationItem(tagName);
  byte[] generationStatus=null;
  if (itemGeneration != null) {
    itemGeneration.setModelObject(handle);
    itemGeneration.setScriptContext(context.getReportContext());
    IBaseQueryDefinition[] queries=((ExtendedItemDesign)item).getQueries();
    if (queries == null) {
      if (item.getQuery() != null) {
        queries=new IBaseQueryDefinition[]{item.getQuery()};
      }
    }
    itemGeneration.setReportQueries(queries);
    IRowSet[] rowSets=executeQueries(item);
    try {
      if (rowSets != null) {
        itemGeneration.onRowSets(rowSets);
      }
      if (itemGeneration.needSerialization()) {
        ByteArrayOutputStream out=new ByteArrayOutputStream();
        itemGeneration.serialize(out);
        generationStatus=out.toByteArray();
      }
      itemGeneration.finish();
    }
 catch (    BirtException ex) {
      logger.log(Level.SEVERE,ex.getMessage(),ex);
      context.addException(new EngineException(MessageConstants.EXTENDED_ITEM_GENERATION_ERROR,handle.getExtensionName() + (name != null ? ""String_Node_Str"" + name : ""String_Node_Str""),ex));
    }
    closeQueries(rowSets);
  }
  content.setRawType(IForeignContent.EXTERNAL_TYPE);
  content.setRawValue(generationStatus);
}",0.9095320623916812
78185,"protected void closeQuery(IContent content){
  Object generateBy=content.getGenerateBy();
  if (generateBy instanceof ReportItemDesign) {
    if (!(generateBy instanceof ExtendedItemDesign)) {
      ReportItemDesign design=(ReportItemDesign)generateBy;
      IBaseQueryDefinition query=design.getQuery();
      if (query != null) {
        IResultSet rset=(IResultSet)resultSets.pop();
        if (rset != null) {
          rset.close();
        }
      }
    }
  }
}","protected void closeQuery(IContent content){
  Object generateBy=content.getGenerateBy();
  if (generateBy instanceof ReportItemDesign) {
    ReportItemDesign design=(ReportItemDesign)generateBy;
    IBaseQueryDefinition query=design.getQuery();
    if (query != null) {
      IResultSet rset=(IResultSet)resultSets.pop();
      if (rset != null) {
        rset.close();
      }
    }
  }
}",0.5250875145857643
78186,"private ColumnReferenceExpression getDirectColRefExpr(Node refNode){
  assert(refNode.getType() == Token.GETPROP || refNode.getType() == Token.GETELEM);
  Node rowName=refNode.getFirstChild();
  assert(rowName != null);
  if (rowName.getType() != Token.NAME)   return null;
  String str=rowName.getString();
  assert(str != null);
  if (!str.equals(rowIndicator))   return null;
  Node rowColumn=rowName.getNext();
  assert(rowColumn != null);
  if (refNode.getType() == Token.GETPROP && rowColumn.getType() == Token.STRING) {
    if (""String_Node_Str"".equals(rowColumn.getString()) && ""String_Node_Str"".equals(rowColumn.getString()) && ""String_Node_Str"".equals(rowColumn.getString()))     return null;
    return new ColumnReferenceExpression(this.isDataSetMode ? STRING_ROW : STRING_DATASETROW,rowColumn.getString());
  }
  if (refNode.getType() == Token.GETELEM) {
    if (rowColumn.getType() == Token.NUMBER) {
      if (0 == rowColumn.getDouble())       return null;
      return new ColumnReferenceExpression(this.isDataSetMode ? STRING_ROW : STRING_DATASETROW,(int)rowColumn.getDouble());
    }
 else     if (rowColumn.getType() == Token.STRING) {
      if (""String_Node_Str"".equals(rowColumn.getString()))       return null;
      return new ColumnReferenceExpression(this.isDataSetMode ? STRING_ROW : STRING_DATASETROW,rowColumn.getString());
    }
  }
  return null;
}","private ColumnReferenceExpression getDirectColRefExpr(Node refNode){
  assert(refNode.getType() == Token.GETPROP || refNode.getType() == Token.GETELEM);
  Node rowName=refNode.getFirstChild();
  assert(rowName != null);
  if (rowName.getType() != Token.NAME)   return null;
  String str=rowName.getString();
  assert(str != null);
  if (!str.equals(rowIndicator))   return null;
  Node rowColumn=rowName.getNext();
  assert(rowColumn != null);
  if (refNode.getType() == Token.GETPROP && rowColumn.getType() == Token.STRING) {
    if (""String_Node_Str"".equals(rowColumn.getString()) || ""String_Node_Str"".equals(rowColumn.getString()) || ""String_Node_Str"".equals(rowColumn.getString()))     return null;
    return new ColumnReferenceExpression(this.isDataSetMode ? STRING_ROW : STRING_DATASETROW,rowColumn.getString());
  }
  if (refNode.getType() == Token.GETELEM) {
    if (rowColumn.getType() == Token.NUMBER) {
      if (0 == rowColumn.getDouble())       return null;
      return new ColumnReferenceExpression(this.isDataSetMode ? STRING_ROW : STRING_DATASETROW,(int)rowColumn.getDouble());
    }
 else     if (rowColumn.getType() == Token.STRING) {
      if (""String_Node_Str"".equals(rowColumn.getString()))       return null;
      return new ColumnReferenceExpression(this.isDataSetMode ? STRING_ROW : STRING_DATASETROW,rowColumn.getString());
    }
  }
  return null;
}",0.9970972423802612
78187,"protected void setUp() throws Exception {
  super.setUp();
  sessionHandle=DesignEngine.newSession(Locale.getDefault());
  designHandle=sessionHandle.createDesign();
}","protected void setUp() throws Exception {
  super.setUp();
  sessionHandle=DesignEngine.newSession(ULocale.getDefault());
  designHandle=sessionHandle.createDesign();
}",0.9970149253731344
78188,"protected void __initParameters(HttpServletRequest request) throws Exception {
  IViewerReportDesignHandle design=getDesignHandle(request);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  Collection parameterList=this.getReportService().getParameterDefinitions(design,options);
  this.parameters=(HashMap)getParsedParameters(design,parameterList,request,options);
  this.missingParameter=validateParameters(parameterList,this.parameters);
}","protected void __initParameters(HttpServletRequest request) throws Exception {
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName);
  if (reportDocumentInstance != null) {
    reportRunnable=reportDocumentInstance.getReportRunnable();
    reportDocumentInstance.close();
  }
  if (reportRunnable != null)   design=new BirtViewerReportDesignHandle(null,reportRunnable.getReportName());
 else   design=getDesignHandle(request);
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  Collection parameterList=this.getReportService().getParameterDefinitions(design,options);
  this.parameters=(HashMap)getParsedParameters(design,parameterList,request,options);
  this.missingParameter=validateParameters(parameterList,this.parameters);
}",0.7055016181229773
78189,"public void extractResultSet(String docName,String resultSetId,Set columns,Set filters,InputOptions options,OutputStream out) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(docName);
  Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
  try {
    ReportEngineService.getInstance().extractData(doc,resultSetId,columns,locale,out);
    doc.close();
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
}","public void extractResultSet(String docName,String resultSetId,Set columns,Set filters,InputOptions options,OutputStream out) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(options),docName);
  Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
  try {
    ReportEngineService.getInstance().extractData(doc,resultSetId,columns,locale,out);
    doc.close();
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
}",0.973172987974098
78190,"public long getPageCount(String docName,InputOptions options) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(docName);
  long count=doc.getPageCount();
  doc.close();
  return count;
}","public long getPageCount(String docName,InputOptions options) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(options),docName);
  long count=doc.getPageCount();
  doc.close();
  return count;
}",0.9323017408123792
78191,"public IViewerReportDesignHandle getReportDesignHandle(String docName,InputOptions options){
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(docName);
  String fileName=doc.getReportRunnable().getReportName();
  doc.close();
  IViewerReportDesignHandle design=new BirtViewerReportDesignHandle(null,fileName);
  return design;
}","public IViewerReportDesignHandle getReportDesignHandle(String docName,InputOptions options){
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(options),docName);
  String fileName=doc.getReportRunnable().getReportName();
  doc.close();
  IViewerReportDesignHandle design=new BirtViewerReportDesignHandle(null,fileName);
  return design;
}",0.960651289009498
78192,"public ByteArrayOutputStream getPage(String docName,String pageID,InputOptions renderOptions,List activeIds) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(docName);
  HttpServletRequest request=(HttpServletRequest)renderOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)renderOptions.getOption(InputOptions.OPT_LOCALE);
  Boolean isMasterPageContent=(Boolean)renderOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  Boolean svgFlag=(Boolean)renderOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  Long pageNum=Long.valueOf(pageID);
  try {
    ByteArrayOutputStream os=ReportEngineService.getInstance().renderReport(request,doc,pageNum.longValue(),isMasterPageContent.booleanValue(),svgFlag.booleanValue(),activeIds,locale);
    doc.close();
    return os;
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
}","public ByteArrayOutputStream getPage(String docName,String pageID,InputOptions renderOptions,List activeIds) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(renderOptions),docName);
  HttpServletRequest request=(HttpServletRequest)renderOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)renderOptions.getOption(InputOptions.OPT_LOCALE);
  Boolean isMasterPageContent=(Boolean)renderOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  Boolean svgFlag=(Boolean)renderOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  Long pageNum=Long.valueOf(pageID);
  try {
    ByteArrayOutputStream os=ReportEngineService.getInstance().renderReport(request,doc,pageNum.longValue(),isMasterPageContent.booleanValue(),svgFlag.booleanValue(),activeIds,locale);
    doc.close();
    return os;
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
}",0.9821519632840388
78193,"private Map getParsedParameters(IViewerReportDesignHandle design,InputOptions options,Map parameters) throws ReportServiceException {
  Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
  Collection parameterList=getParameterDefinitions(design,options);
  Map paramMap=new HashMap();
  IGetParameterDefinitionTask task=null;
  Map configMap=null;
  Boolean isDesignerBoolean=(Boolean)options.getOption(InputOptions.OPT_IS_DESIGNER);
  boolean isDesigner=(isDesignerBoolean != null ? isDesignerBoolean.booleanValue() : false);
  try {
    task=getParameterDefinitionTask(design.getFileName());
    IReportRunnable runnable=ReportEngineService.getInstance().openReportDesign(design.getFileName());
    configMap=runnable.getTestConfig();
  }
 catch (  EngineException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    IScalarParameterDefn parameterObj=(IScalarParameterDefn)iter.next();
    String paramValue=null;
    Object paramValueObj=null;
    ScalarParameterHandle paramHandle=(ScalarParameterHandle)parameterObj.getHandle();
    String paramName=paramHandle.getName();
    String format=paramHandle.getPattern();
    ReportParameterConverter converter=new ReportParameterConverter(format,locale);
    Set paramNames=null;
    if (parameters != null) {
      paramNames=parameters.keySet();
    }
    if (parameters != null && paramName != null) {
      boolean found=false;
      for (Iterator it=paramNames.iterator(); it.hasNext(); ) {
        String name=(String)it.next();
        if (paramName.equals(name)) {
          paramValue=(String)parameters.get(name);
          paramValueObj=converter.parse(paramValue,ParameterDataTypeConverter.getEngineDataType(paramHandle.getDataType()));
          paramMap.put(paramName,paramValueObj);
          found=true;
          break;
        }
      }
      if (!found && configMap.containsKey(paramName) && isDesigner) {
        String configValue=(String)configMap.get(paramName);
        ReportParameterConverter cfgConverter=new ReportParameterConverter(format,Locale.US);
        paramValueObj=cfgConverter.parse(configValue,parameterObj.getDataType());
      }
 else       if (!found) {
        paramValueObj=task.getDefaultValue(parameterObj.getName());
      }
    }
  }
  return paramMap;
}","private Map getParsedParameters(IViewerReportDesignHandle design,InputOptions options,Map parameters) throws ReportServiceException {
  Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
  Collection parameterList=getParameterDefinitions(design,options);
  Map paramMap=new HashMap();
  IGetParameterDefinitionTask task=null;
  Map configMap=null;
  Boolean isDesignerBoolean=(Boolean)options.getOption(InputOptions.OPT_IS_DESIGNER);
  boolean isDesigner=(isDesignerBoolean != null ? isDesignerBoolean.booleanValue() : false);
  try {
    task=getParameterDefinitionTask(design.getFileName());
    IReportRunnable runnable=ReportEngineService.getInstance().openReportDesign(design.getFileName());
    configMap=runnable.getTestConfig();
  }
 catch (  EngineException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    IScalarParameterDefn parameterObj=(IScalarParameterDefn)iter.next();
    String paramValue=null;
    Object paramValueObj=null;
    ScalarParameterHandle paramHandle=(ScalarParameterHandle)parameterObj.getHandle();
    String paramName=paramHandle.getName();
    String format=paramHandle.getPattern();
    ReportParameterConverter converter=new ReportParameterConverter(format,locale);
    Set paramNames=null;
    if (parameters != null) {
      paramNames=parameters.keySet();
    }
    if (parameters != null && paramName != null) {
      boolean found=false;
      for (Iterator it=paramNames.iterator(); it.hasNext(); ) {
        String name=(String)it.next();
        if (paramName.equals(name)) {
          if (parameters.get(name) != null)           paramValue=parameters.get(name).toString();
          paramValueObj=converter.parse(paramValue,ParameterDataTypeConverter.getEngineDataType(paramHandle.getDataType()));
          paramMap.put(paramName,paramValueObj);
          found=true;
          break;
        }
      }
      if (!found && configMap.containsKey(paramName) && isDesigner) {
        String configValue=(String)configMap.get(paramName);
        ReportParameterConverter cfgConverter=new ReportParameterConverter(format,Locale.US);
        paramValueObj=cfgConverter.parse(configValue,parameterObj.getDataType());
      }
 else       if (!found) {
        paramValueObj=task.getDefaultValue(parameterObj.getName());
      }
    }
  }
  return paramMap;
}",0.9813221406086045
78194,"public ToC getTOC(String docName,String tocId,InputOptions options) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(docName);
  TOCNode node=null;
  if (tocId != null) {
    node=doc.findTOC(tocId);
  }
 else {
    node=doc.findTOC(null);
  }
  if (node == null) {
    throw new ReportServiceException(""String_Node_Str"");
  }
  doc.close();
  return transformTOCNode(node);
}","public ToC getTOC(String docName,String tocId,InputOptions options) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(options),docName);
  TOCNode node=null;
  if (tocId != null) {
    node=doc.findTOC(tocId);
  }
 else {
    node=doc.findTOC(null);
  }
  if (node == null) {
    throw new ReportServiceException(""String_Node_Str"");
  }
  doc.close();
  return transformTOCNode(node);
}",0.967670011148272
78195,"public Map getParameterValues(String docName,InputOptions options){
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(docName);
  Map paramValues=doc.getParameterValues();
  doc.close();
  return paramValues;
}","public Map getParameterValues(String docName,InputOptions options){
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(options),docName);
  Map paramValues=doc.getParameterValues();
  doc.close();
  return paramValues;
}",0.9298597194388778
78196,"public long getPageNumberByBookmark(String docName,String bookmark,InputOptions options) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(docName);
  long pageNumber=doc.getPageNumber(bookmark);
  doc.close();
  return pageNumber;
}","public long getPageNumberByBookmark(String docName,String bookmark,InputOptions options) throws ReportServiceException {
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(options),docName);
  long pageNumber=doc.getPageNumber(bookmark);
  doc.close();
  return pageNumber;
}",0.9523809523809524
78197,"/** 
 * Open report document from archive,
 * @param docName -the name of the report document
 * @return
 */
public IReportDocument openReportDocument(String docName){
  IReportDocument document=null;
  try {
synchronized (this.getClass()) {
      document=engine.openReportDocument(docName);
    }
  }
 catch (  Exception e) {
  }
  return document;
}","/** 
 * Open report document from archive,
 * @param docName -the name of the report document
 * @return
 */
public IReportDocument openReportDocument(String systemId,String docName){
  IReportDocument document=null;
  try {
synchronized (this.getClass()) {
      document=engine.openReportDocument(docName);
    }
  }
 catch (  Exception e) {
  }
  return document;
}",0.9777777777777776
78198,"/** 
 * Constructor.
 * @param config
 */
public ReportEngineService(ServletConfig servletConfig){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (servletConfig == null) {
    return;
  }
  config=new EngineConfig();
  HTMLEmitterConfig emitterConfig=new HTMLEmitterConfig();
  emitterConfig.setActionHandler(new HTMLActionHandler());
  imageHandler=new HTMLServerImageHandler();
  emitterConfig.setImageHandler(imageHandler);
  config.getEmitterConfigs().put(""String_Node_Str"",emitterConfig);
  imageDirectory=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (imageDirectory == null || imageDirectory.trim().length() <= 0 || ParameterAccessor.isRelativePath(imageDirectory)) {
    imageDirectory=servletConfig.getServletContext().getRealPath(""String_Node_Str"");
  }
  imageBaseUrl=""String_Node_Str"";
  String logDirectory=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (logDirectory == null || logDirectory.trim().length() <= 0 || ParameterAccessor.isRelativePath(logDirectory)) {
    logDirectory=servletConfig.getServletContext().getRealPath(""String_Node_Str"");
  }
  String logLevel=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  Level level=Level.OFF;
  if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.SEVERE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.WARNING;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.INFO;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.CONFIG;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINER;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINEST;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.OFF;
  }
  config.setLogConfig(logDirectory,level);
  String scriptLibDir=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (scriptLibDir == null || scriptLibDir.trim().length() <= 0 || ParameterAccessor.isRelativePath(scriptLibDir)) {
    scriptLibDir=servletConfig.getServletContext().getRealPath(""String_Node_Str"");
  }
  ArrayList jarFileList=new ArrayList();
  if (scriptLibDir != null) {
    File dir=new File(scriptLibDir);
    getAllJarFiles(dir,jarFileList);
  }
  String scriptlibClassPath=""String_Node_Str"";
  for (int i=0; i < jarFileList.size(); i++)   scriptlibClassPath+=EngineConstants.PROPERTYSEPARATOR + ((File)jarFileList.get(i)).getAbsolutePath();
  if (scriptlibClassPath.startsWith(EngineConstants.PROPERTYSEPARATOR))   scriptlibClassPath=scriptlibClassPath.substring(EngineConstants.PROPERTYSEPARATOR.length());
  System.setProperty(EngineConstants.WEBAPP_CLASSPATH_KEY,scriptlibClassPath);
  config.setEngineHome(""String_Node_Str"");
}","/** 
 * Constructor.
 * @param config
 */
public ReportEngineService(ServletConfig servletConfig){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (servletConfig == null) {
    return;
  }
  config=new EngineConfig();
  HTMLEmitterConfig emitterConfig=new HTMLEmitterConfig();
  emitterConfig.setActionHandler(new HTMLActionHandler());
  imageHandler=new HTMLServerImageHandler();
  emitterConfig.setImageHandler(imageHandler);
  config.getEmitterConfigs().put(""String_Node_Str"",emitterConfig);
  String resourcePath=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_BIRT_RESOURCE_PATH);
  if (resourcePath == null || resourcePath.trim().length() <= 0 || ParameterAccessor.isRelativePath(resourcePath)) {
    resourcePath=servletConfig.getServletContext().getRealPath(""String_Node_Str"");
  }
  File resourceFile=new File(resourcePath);
  boolean isResourceOk=true;
  if (!resourceFile.exists()) {
    isResourceOk=resourceFile.mkdirs();
  }
  if (isResourceOk) {
    config.setProperty(ParameterAccessor.INIT_PARAM_BIRT_RESOURCE_PATH,resourcePath);
  }
  imageDirectory=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (imageDirectory == null || imageDirectory.trim().length() <= 0 || ParameterAccessor.isRelativePath(imageDirectory)) {
    imageDirectory=servletConfig.getServletContext().getRealPath(""String_Node_Str"");
  }
  imageBaseUrl=""String_Node_Str"";
  String logDirectory=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (logDirectory == null || logDirectory.trim().length() <= 0 || ParameterAccessor.isRelativePath(logDirectory)) {
    logDirectory=servletConfig.getServletContext().getRealPath(""String_Node_Str"");
  }
  String logLevel=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  Level level=Level.OFF;
  if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.SEVERE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.WARNING;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.INFO;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.CONFIG;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINE;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINER;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.FINEST;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
    level=Level.OFF;
  }
  config.setLogConfig(logDirectory,level);
  String scriptLibDir=servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (scriptLibDir == null || scriptLibDir.trim().length() <= 0 || ParameterAccessor.isRelativePath(scriptLibDir)) {
    scriptLibDir=servletConfig.getServletContext().getRealPath(""String_Node_Str"");
  }
  ArrayList jarFileList=new ArrayList();
  if (scriptLibDir != null) {
    File dir=new File(scriptLibDir);
    getAllJarFiles(dir,jarFileList);
  }
  String scriptlibClassPath=""String_Node_Str"";
  for (int i=0; i < jarFileList.size(); i++)   scriptlibClassPath+=EngineConstants.PROPERTYSEPARATOR + ((File)jarFileList.get(i)).getAbsolutePath();
  if (scriptlibClassPath.startsWith(EngineConstants.PROPERTYSEPARATOR))   scriptlibClassPath=scriptlibClassPath.substring(EngineConstants.PROPERTYSEPARATOR.length());
  System.setProperty(EngineConstants.WEBAPP_CLASSPATH_KEY,scriptlibClassPath);
  config.setEngineHome(""String_Node_Str"");
}",0.9109630526953362
78199,"/** 
 * Create HTML render context.
 * @param svgFlag
 * @return
 */
private HTMLRenderContext createHTMLrenderContext(boolean svgFlag){
  HTMLRenderContext renderContext=new HTMLRenderContext();
  renderContext.setImageDirectory(imageDirectory);
  renderContext.setBaseImageURL(contextPath + imageBaseUrl);
  renderContext.setBaseURL(this.contextPath + ""String_Node_Str"");
  renderContext.setSupportedImageFormats(svgFlag ? ""String_Node_Str"" : ""String_Node_Str"");
  return renderContext;
}","/** 
 * Create HTML render context.
 * @param svgFlag
 * @param servletPath
 * @return
 */
private HTMLRenderContext createHTMLrenderContext(boolean svgFlag,String servletPath){
  HTMLRenderContext renderContext=new HTMLRenderContext();
  renderContext.setImageDirectory(imageDirectory);
  renderContext.setBaseImageURL(contextPath + imageBaseUrl);
  if (servletPath != null && servletPath.length() > 0 && !servletPath.equalsIgnoreCase(IBirtConstants.SERVLET_PATH_PREVIEW)) {
    renderContext.setBaseURL(this.contextPath + servletPath);
  }
 else {
    renderContext.setBaseURL(this.contextPath + IBirtConstants.SERVLET_PATH_FRAMESET);
  }
  renderContext.setSupportedImageFormats(svgFlag ? ""String_Node_Str"" : ""String_Node_Str"");
  return renderContext;
}",0.7345629510825983
78200,"/** 
 * Create PDF render context.
 * @return
 */
private PDFRenderContext createPDFrenderContext(){
  PDFRenderContext renderContext=new PDFRenderContext();
  renderContext.setBaseURL(this.contextPath + ""String_Node_Str"");
  renderContext.setSupportedImageFormats(""String_Node_Str"");
  return renderContext;
}","/** 
 * Create PDF render context.
 * @return
 */
private PDFRenderContext createPDFrenderContext(){
  PDFRenderContext renderContext=new PDFRenderContext();
  renderContext.setBaseURL(this.contextPath + IBirtConstants.SERVLET_PATH_RUN);
  renderContext.setSupportedImageFormats(""String_Node_Str"");
  return renderContext;
}",0.9337539432176656
78201,"public AbstractParseState startElement(String tagName){
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.TEXT_TAG))   return new TextItemState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.LABEL_TAG))   return new LabelState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.DATA_TAG))   return new DataItemState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.LIST_TAG))   return new ListItemState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.TABLE_TAG))   return new TableItemState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.FREE_FORM_TAG))   return new FreeFormState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.GRID_TAG))   return new GridItemState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.INCLUDE_TAG))   return new AnyElementState(handler);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.IMAGE_TAG))   return new ImageState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.LINE_TAG))   return new LineItemState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.BROWSER_CONTROL_TAG))   return new AnyElementState(handler);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.EXTENDED_ITEM_TAG))   return new ExtendedItemState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.MULTI_LINE_DATA_TAG) || tagName.equalsIgnoreCase(DesignSchemaConstants.TEXT_DATA_TAG))   return new TextDataItemState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.TEMPLATE_REPORT_ITEM_TAG))   return new TemplateReportItemState(handler,element,Cell.CONTENT_SLOT);
  return super.startElement(tagName);
}","public AbstractParseState startElement(String tagName){
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.TEXT_TAG))   return new TextItemState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.AUTO_TEXT_TAG))   return new AutoTextState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.LABEL_TAG))   return new LabelState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.DATA_TAG))   return new DataItemState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.LIST_TAG))   return new ListItemState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.TABLE_TAG))   return new TableItemState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.FREE_FORM_TAG))   return new FreeFormState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.GRID_TAG))   return new GridItemState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.INCLUDE_TAG))   return new AnyElementState(handler);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.IMAGE_TAG))   return new ImageState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.LINE_TAG))   return new LineItemState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.BROWSER_CONTROL_TAG))   return new AnyElementState(handler);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.EXTENDED_ITEM_TAG))   return new ExtendedItemState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.MULTI_LINE_DATA_TAG) || tagName.equalsIgnoreCase(DesignSchemaConstants.TEXT_DATA_TAG))   return new TextDataItemState(handler,element,Cell.CONTENT_SLOT);
  if (tagName.equalsIgnoreCase(DesignSchemaConstants.TEMPLATE_REPORT_ITEM_TAG))   return new TemplateReportItemState(handler,element,Cell.CONTENT_SLOT);
  return super.startElement(tagName);
}",0.967439565860878
78202,"/** 
 * UnGroups the svg drawing instructions that represents this primitive events.
 * @param pre primitive render event
 * @param drawText TODO
 */
protected void ungroupPrimitive(PrimitiveRenderEvent pre,boolean drawText){
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  if (pre.getSource() instanceof StructureSource) {
    final Series series=(Series)getElementFromSource((StructureSource)pre.getSource(),StructureType.SERIES);
    if (series != null) {
      if (drawText) {
        svg_g2d.popParent();
        svg_g2d.popParent();
      }
 else {
        svg_g2d.setDeferStrokColor(null);
        svg_g2d.popParent();
      }
    }
  }
}","/** 
 * UnGroups the svg drawing instructions that represents this primitive events.
 * @param pre primitive render event
 * @param drawText TODO
 */
protected void ungroupPrimitive(PrimitiveRenderEvent pre,boolean drawText){
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  if (pre.getSource() instanceof StructureSource) {
    StructureSource sourceObject=(StructureSource)pre.getSource();
    final Series series=(Series)getElementFromSource(sourceObject,StructureType.SERIES);
    if (series != null) {
      if (drawText) {
        svg_g2d.popParent();
        svg_g2d.popParent();
      }
 else {
        svg_g2d.setDeferStrokColor(null);
        svg_g2d.popParent();
      }
    }
 else {
      if ((getElementFromSource(sourceObject,StructureType.TITLE) != null) || (getElementFromSource(sourceObject,StructureType.CHART_BLOCK) != null)) {
        svg_g2d.setDeferStrokColor(null);
        svg_g2d.popParent();
      }
    }
  }
}",0.7946943483275664
78203,"/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers){
  if (elm != null) {
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
          String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
        if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
          Element title=svg_g2d.dom.createElement(""String_Node_Str"");
          title.appendChild(svg_g2d.dom.createTextNode(tooltipText));
          elm.appendChild(title);
          elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
          elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
        }
      break;
case ActionType.URL_REDIRECT:
    URLValue urlValue=((URLValue)tg.getAction().getValue());
  if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    Element aLink=svg_g2d.createElement(""String_Node_Str"");
    aLink.setAttribute(scriptEvent,""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str"");
    aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    aLink.appendChild(elm);
    elm=aLink;
  }
 else {
    Element aLink=svg_g2d.createElement(""String_Node_Str"");
    aLink.setAttribute(""String_Node_Str"",urlValue.getBaseUrl());
    if (urlValue.getTarget() != null)     aLink.setAttribute(""String_Node_Str"",urlValue.getTarget());
    aLink.appendChild(elm);
    elm=aLink;
  }
break;
case ActionType.TOGGLE_VISIBILITY:
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
case ActionType.HIGHLIGHT:
addJSCodeOnElement(src,tg,elm,scriptEvent,tg.getAction().getType().getValue());
break;
case ActionType.INVOKE_SCRIPT:
if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) {
AccessibilityValue accessValue=((AccessibilityValue)tg.getAction().getValue());
if (accessValue.getText() != null) {
Element title=svg_g2d.createElement(""String_Node_Str"");
title.appendChild(svg_g2d.dom.createTextNode(accessValue.getText()));
elm.appendChild(title);
}
if (accessValue.getAccessibility() != null) {
Element description=svg_g2d.createElement(""String_Node_Str"");
description.appendChild(svg_g2d.dom.createTextNode(accessValue.getAccessibility()));
elm.appendChild(description);
}
}
 else {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ src.getSource().hashCode()+ ""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
svg_g2d.addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
}
hotspotLayer.appendChild(elm);
}
}","/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers){
  if (elm != null) {
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
          String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
        if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
          Element title=svg_g2d.dom.createElement(""String_Node_Str"");
          title.appendChild(svg_g2d.dom.createTextNode(tooltipText));
          elm.appendChild(title);
          if (scriptEvent.equals(""String_Node_Str"")) {
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
          }
 else           elm.setAttribute(scriptEvent,""String_Node_Str"");
        }
      break;
case ActionType.URL_REDIRECT:
    URLValue urlValue=((URLValue)tg.getAction().getValue());
  if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    Element aLink=svg_g2d.createElement(""String_Node_Str"");
    aLink.setAttribute(scriptEvent,""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str"");
    aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    aLink.appendChild(elm);
    elm=aLink;
  }
 else {
    Element aLink=svg_g2d.createElement(""String_Node_Str"");
    aLink.setAttribute(""String_Node_Str"",urlValue.getBaseUrl());
    if (urlValue.getTarget() != null)     aLink.setAttribute(""String_Node_Str"",urlValue.getTarget());
    aLink.appendChild(elm);
    elm=aLink;
  }
break;
case ActionType.TOGGLE_VISIBILITY:
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
case ActionType.HIGHLIGHT:
addJSCodeOnElement(src,tg,elm,scriptEvent,tg.getAction().getType().getValue());
break;
case ActionType.INVOKE_SCRIPT:
if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) {
AccessibilityValue accessValue=((AccessibilityValue)tg.getAction().getValue());
if (accessValue.getText() != null) {
Element title=svg_g2d.createElement(""String_Node_Str"");
title.appendChild(svg_g2d.dom.createTextNode(accessValue.getText()));
elm.appendChild(title);
}
if (accessValue.getAccessibility() != null) {
Element description=svg_g2d.createElement(""String_Node_Str"");
description.appendChild(svg_g2d.dom.createTextNode(accessValue.getAccessibility()));
elm.appendChild(description);
}
}
 else {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ src.getSource().hashCode()+ ""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
svg_g2d.addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
}
hotspotLayer.appendChild(elm);
}
}",0.9772041568890378
78204,"/** 
 * Groups the svg drawing instructions that represents this primitive events. Each group is assigned an id that identifies the source object of the primitive event
 * @param pre primitive render event
 * @param drawText TODO
 */
protected void groupPrimitive(PrimitiveRenderEvent pre,boolean drawText){
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  if (pre.getSource() instanceof StructureSource) {
    Series seDT=(Series)getElementFromSource((StructureSource)pre.getSource(),StructureType.SERIES);
    if (seDT != null) {
      String groupIdentifier=null;
      try {
        if (isColoredByCategories() && getElementFromSource((StructureSource)pre.getSource(),StructureType.SERIES_DATA_POINT) != null) {
          seDT=findCategorySeries(seDT);
          groupIdentifier=String.valueOf(seDT.hashCode());
          DataPointHints dph=(DataPointHints)getElementFromSource((StructureSource)pre.getSource(),StructureType.SERIES_DATA_POINT);
          groupIdentifier+=""String_Node_Str"";
          groupIdentifier+=((DataPointHints)dph).getIndex();
        }
 else {
          seDT=findDesignTimeSeries(seDT);
          groupIdentifier=String.valueOf(seDT.hashCode());
        }
      }
 catch (      ChartException e) {
        logger.log(e);
        return;
      }
      if (drawText) {
        String id=Integer.toString(pre.hashCode());
        List components=(List)labelPrimitives.get(seDT);
        if (components == null) {
          components=new ArrayList();
          labelPrimitives.put(seDT,components);
        }
        components.add(id);
        Element outerGroup=svg_g2d.createElement(""String_Node_Str"");
        svg_g2d.pushParent(outerGroup);
        Element primGroup=svg_g2d.createElement(""String_Node_Str"");
        outerGroup.appendChild(primGroup);
        svg_g2d.pushParent(primGroup);
        primGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + id);
        primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
        outerGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + id+ ""String_Node_Str"");
        outerGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        String id=Integer.toString(pre.hashCode());
        List components=(List)componentPrimitives.get(seDT);
        if (components == null) {
          components=new ArrayList();
          componentPrimitives.put(seDT,components);
        }
        String idTemp=id;
        int counter=1;
        while (components.contains(idTemp)) {
          idTemp=id + ""String_Node_Str"" + counter;
          counter++;
        }
        components.add(idTemp);
        Element primGroup=svg_g2d.createElement(""String_Node_Str"");
        svg_g2d.pushParent(primGroup);
        primGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + idTemp);
        primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
        svg_g2d.setDeferStrokColor(primGroup);
      }
    }
  }
}","/** 
 * Groups the svg drawing instructions that represents this primitive events. Each group is assigned an id that identifies the source object of the primitive event
 * @param pre primitive render event
 * @param drawText TODO
 */
protected void groupPrimitive(PrimitiveRenderEvent pre,boolean drawText){
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  if (pre.getSource() instanceof StructureSource) {
    StructureSource sourceObject=(StructureSource)pre.getSource();
    Series seDT=(Series)getElementFromSource(sourceObject,StructureType.SERIES);
    if (seDT != null) {
      String groupIdentifier=null;
      try {
        if (isColoredByCategories() && getElementFromSource(sourceObject,StructureType.SERIES_DATA_POINT) != null) {
          seDT=findCategorySeries(seDT);
          groupIdentifier=String.valueOf(seDT.hashCode());
          DataPointHints dph=(DataPointHints)getElementFromSource(sourceObject,StructureType.SERIES_DATA_POINT);
          groupIdentifier+=""String_Node_Str"";
          groupIdentifier+=((DataPointHints)dph).getIndex();
        }
 else {
          seDT=findDesignTimeSeries(seDT);
          groupIdentifier=String.valueOf(seDT.hashCode());
        }
      }
 catch (      ChartException e) {
        logger.log(e);
        return;
      }
      if (drawText) {
        String id=Integer.toString(pre.hashCode());
        List components=(List)labelPrimitives.get(seDT);
        if (components == null) {
          components=new ArrayList();
          labelPrimitives.put(seDT,components);
        }
        components.add(id);
        Element outerGroup=svg_g2d.createElement(""String_Node_Str"");
        svg_g2d.pushParent(outerGroup);
        Element primGroup=svg_g2d.createElement(""String_Node_Str"");
        outerGroup.appendChild(primGroup);
        svg_g2d.pushParent(primGroup);
        primGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + id);
        primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
        outerGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + id+ ""String_Node_Str"");
        outerGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        String id=Integer.toString(pre.hashCode());
        List components=(List)componentPrimitives.get(seDT);
        if (components == null) {
          components=new ArrayList();
          componentPrimitives.put(seDT,components);
        }
        String idTemp=id;
        int counter=1;
        while (components.contains(idTemp)) {
          idTemp=id + ""String_Node_Str"" + counter;
          counter++;
        }
        components.add(idTemp);
        Element primGroup=svg_g2d.createElement(""String_Node_Str"");
        svg_g2d.pushParent(primGroup);
        primGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + idTemp);
        primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
        svg_g2d.setDeferStrokColor(primGroup);
      }
    }
 else {
      final Chart cmDT=_iun.getDesignTimeModel();
      Object designObject=null;
      if (getElementFromSource(sourceObject,StructureType.TITLE) != null) {
        designObject=cmDT.getTitle();
      }
 else       if (getElementFromSource(sourceObject,StructureType.CHART_BLOCK) != null) {
        designObject=cmDT.getBlock();
      }
      if (designObject != null) {
        String groupIdentifier=String.valueOf(designObject.hashCode());
        String id=Integer.toString(pre.hashCode());
        List components=(List)componentPrimitives.get(designObject);
        if (components == null) {
          components=new ArrayList();
          componentPrimitives.put(designObject,components);
        }
        String idTemp=id;
        int counter=1;
        while (components.contains(idTemp)) {
          idTemp=id + ""String_Node_Str"" + counter;
          counter++;
        }
        components.add(idTemp);
        Element primGroup=svg_g2d.createElement(""String_Node_Str"");
        svg_g2d.pushParent(primGroup);
        primGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + idTemp);
        primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
        svg_g2d.setDeferStrokColor(primGroup);
      }
    }
  }
}",0.802335052945968
78205,"/** 
 * @see org.eclipse.birt.report.designer.ui.dialogs.properties.IPropertyPage#createPageControl(org.eclipse.swt.widgets.Composite)
 */
public Control createPageControl(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  FillLayout layout=new FillLayout();
  content.setLayout(layout);
  Label txt=new Label(content,SWT.LEFT);
  txt.setText(Messages.formatMessage(""String_Node_Str"",new Object[]{dataSourceDesign.getName()}));
  return content;
}","public Control createPageControl(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  FillLayout layout=new FillLayout();
  content.setLayout(layout);
  Label txt=new Label(content,SWT.LEFT);
  txt.setText(Messages.formatMessage(""String_Node_Str"",new Object[]{dataSourceDesign.getName()}));
  return content;
}",0.8260325406758448
78206,"protected DataSetDesign collectDataSetDesign(DataSetDesign design){
  this.datasetDesign.getDataSourceDesign().setOdaExtensionId(OdaJdbcDriver.Constants.DATA_SOURCE_ID);
  this.datasetDesign.setQueryText(""String_Node_Str"");
  return this.datasetDesign;
}","protected DataSetDesign collectDataSetDesign(DataSetDesign design){
  if (props == null)   props=new Properties();
  props.setProperty(Constants.ODADriverClass,SampleDBConstants.DRIVER_CLASS);
  props.setProperty(Constants.ODAURL,SampleDBConstants.DRIVER_URL);
  props.setProperty(Constants.ODAUser,SAMPLE_DB_SCHEMA);
  props.setProperty(Constants.ODAPassword,""String_Node_Str"");
  design.getDataSourceDesign().setOdaExtensionId(OdaJdbcDriver.Constants.DATA_SOURCE_ID);
  try {
    design.getDataSourceDesign().setPublicProperties(DesignSessionUtil.createDataSourcePublicProperties(OdaJdbcDriver.Constants.DATA_SOURCE_ID,props));
  }
 catch (  OdaException e) {
    e.printStackTrace();
  }
  return design;
}",0.3530633437175493
78207,"/** 
 * Create a report engine instance.
 */
public IReportEngine createReportEngine(EngineConfig config){
  if (config == null) {
    config=new EngineConfig();
  }
  Platform.initialize(new PlatformFileContext());
  Object factory=Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  if (factory instanceof IReportEngineFactory) {
    return ((IReportEngineFactory)factory).createReportEngine(config);
  }
  return null;
}","/** 
 * Create a report engine instance.
 * @throws BirtException 
 */
public IReportEngine createReportEngine(EngineConfig config) throws BirtException {
  if (config == null) {
    config=new EngineConfig();
  }
  Platform.startup(new PlatformConfig());
  Object factory=Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  if (factory instanceof IReportEngineFactory) {
    return ((IReportEngineFactory)factory).createReportEngine(config);
  }
  return null;
}",0.920335429769392
78208,"/** 
 * UnGroups the svg drawing instructions that represents this primitive events.
 * @param pre primitive render event
 * @param drawText TODO
 */
protected void ungroupPrimitive(PrimitiveRenderEvent pre,boolean drawText){
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  if (pre.getSource() instanceof StructureSource) {
    StructureSource sourceObject=(StructureSource)pre.getSource();
    final Series series=(Series)getElementFromSource(sourceObject,StructureType.SERIES);
    if (series != null) {
      if (drawText) {
        svg_g2d.popParent();
        svg_g2d.popParent();
      }
 else {
        svg_g2d.setDeferStrokColor(null);
        svg_g2d.popParent();
      }
    }
 else {
      if ((getElementFromSource(sourceObject,StructureType.TITLE) != null) || (getElementFromSource(sourceObject,StructureType.CHART_BLOCK) != null)) {
        svg_g2d.setDeferStrokColor(null);
        svg_g2d.popParent();
      }
    }
  }
}","/** 
 * UnGroups the svg drawing instructions that represents this primitive events.
 * @param pre primitive render event
 * @param drawText TODO
 */
protected void ungroupPrimitive(PrimitiveRenderEvent pre,boolean drawText){
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  if (pre.getSource() instanceof StructureSource) {
    StructureSource sourceObject=(StructureSource)pre.getSource();
    final Series series=(Series)getElementFromSource(sourceObject,StructureType.SERIES);
    if (series != null) {
      if (drawText) {
        svg_g2d.popParent();
        svg_g2d.popParent();
      }
 else {
        svg_g2d.setDeferStrokColor(null);
        svg_g2d.popParent();
      }
    }
 else {
      if ((getElementFromSource(sourceObject,StructureType.TITLE) != null) || (getElementFromSource(sourceObject,StructureType.AXIS) != null) || (getElementFromSource(sourceObject,StructureType.CHART_BLOCK) != null)|| (getElementFromSource(sourceObject,StructureType.PLOT) != null)) {
        svg_g2d.setDeferStrokColor(null);
        svg_g2d.popParent();
      }
    }
  }
}",0.9383974062065772
78209,"/** 
 * Groups the svg drawing instructions that represents this primitive events. Each group is assigned an id that identifies the source object of the primitive event
 * @param pre primitive render event
 * @param drawText TODO
 */
protected void groupPrimitive(PrimitiveRenderEvent pre,boolean drawText){
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  if (pre.getSource() instanceof StructureSource) {
    StructureSource sourceObject=(StructureSource)pre.getSource();
    Series seDT=(Series)getElementFromSource(sourceObject,StructureType.SERIES);
    if (seDT != null) {
      String groupIdentifier=null;
      try {
        if (isColoredByCategories() && getElementFromSource(sourceObject,StructureType.SERIES_DATA_POINT) != null) {
          seDT=findCategorySeries(seDT);
          groupIdentifier=String.valueOf(seDT.hashCode());
          DataPointHints dph=(DataPointHints)getElementFromSource(sourceObject,StructureType.SERIES_DATA_POINT);
          groupIdentifier+=""String_Node_Str"";
          groupIdentifier+=((DataPointHints)dph).getIndex();
        }
 else {
          seDT=findDesignTimeSeries(seDT);
          groupIdentifier=String.valueOf(seDT.hashCode());
        }
      }
 catch (      ChartException e) {
        logger.log(e);
        return;
      }
      if (drawText) {
        String id=Integer.toString(pre.hashCode());
        List components=(List)labelPrimitives.get(seDT);
        if (components == null) {
          components=new ArrayList();
          labelPrimitives.put(seDT,components);
        }
        components.add(id);
        Element outerGroup=svg_g2d.createElement(""String_Node_Str"");
        svg_g2d.pushParent(outerGroup);
        Element primGroup=svg_g2d.createElement(""String_Node_Str"");
        outerGroup.appendChild(primGroup);
        svg_g2d.pushParent(primGroup);
        primGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + id);
        primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
        outerGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + id+ ""String_Node_Str"");
        outerGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        String id=Integer.toString(pre.hashCode());
        List components=(List)componentPrimitives.get(seDT);
        if (components == null) {
          components=new ArrayList();
          componentPrimitives.put(seDT,components);
        }
        String idTemp=id;
        int counter=1;
        while (components.contains(idTemp)) {
          idTemp=id + ""String_Node_Str"" + counter;
          counter++;
        }
        components.add(idTemp);
        Element primGroup=svg_g2d.createElement(""String_Node_Str"");
        svg_g2d.pushParent(primGroup);
        primGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + idTemp);
        primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
        svg_g2d.setDeferStrokColor(primGroup);
      }
    }
 else {
      final Chart cmDT=_iun.getDesignTimeModel();
      Object designObject=null;
      if (getElementFromSource(sourceObject,StructureType.TITLE) != null) {
        designObject=cmDT.getTitle();
      }
 else       if (getElementFromSource(sourceObject,StructureType.CHART_BLOCK) != null) {
        designObject=cmDT.getBlock();
      }
      if (designObject != null) {
        String groupIdentifier=String.valueOf(designObject.hashCode());
        String id=Integer.toString(pre.hashCode());
        List components=(List)componentPrimitives.get(designObject);
        if (components == null) {
          components=new ArrayList();
          componentPrimitives.put(designObject,components);
        }
        String idTemp=id;
        int counter=1;
        while (components.contains(idTemp)) {
          idTemp=id + ""String_Node_Str"" + counter;
          counter++;
        }
        components.add(idTemp);
        Element primGroup=svg_g2d.createElement(""String_Node_Str"");
        svg_g2d.pushParent(primGroup);
        primGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + idTemp);
        primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
        svg_g2d.setDeferStrokColor(primGroup);
      }
    }
  }
}","/** 
 * Groups the svg drawing instructions that represents this primitive events. Each group is assigned an id that identifies the source object of the primitive event
 * @param pre primitive render event
 * @param drawText TODO
 */
protected void groupPrimitive(PrimitiveRenderEvent pre,boolean drawText){
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  if (pre.getSource() instanceof StructureSource) {
    StructureSource sourceObject=(StructureSource)pre.getSource();
    Series seDT=(Series)getElementFromSource(sourceObject,StructureType.SERIES);
    if (seDT != null) {
      String groupIdentifier=null;
      try {
        if (isColoredByCategories() && getElementFromSource(sourceObject,StructureType.SERIES_DATA_POINT) != null) {
          seDT=findCategorySeries(seDT);
          groupIdentifier=String.valueOf(seDT.hashCode());
          DataPointHints dph=(DataPointHints)getElementFromSource(sourceObject,StructureType.SERIES_DATA_POINT);
          groupIdentifier+=""String_Node_Str"";
          groupIdentifier+=((DataPointHints)dph).getIndex();
        }
 else {
          seDT=findDesignTimeSeries(seDT);
          groupIdentifier=String.valueOf(seDT.hashCode());
        }
      }
 catch (      ChartException e) {
        logger.log(e);
        return;
      }
      if (drawText) {
        String id=Integer.toString(pre.hashCode());
        List components=(List)labelPrimitives.get(seDT);
        if (components == null) {
          components=new ArrayList();
          labelPrimitives.put(seDT,components);
        }
        components.add(id);
        Element outerGroup=svg_g2d.createElement(""String_Node_Str"");
        svg_g2d.pushParent(outerGroup);
        Element primGroup=svg_g2d.createElement(""String_Node_Str"");
        outerGroup.appendChild(primGroup);
        svg_g2d.pushParent(primGroup);
        primGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + id);
        primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
        outerGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + id+ ""String_Node_Str"");
        outerGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        String id=Integer.toString(pre.hashCode());
        List components=(List)componentPrimitives.get(seDT);
        if (components == null) {
          components=new ArrayList();
          componentPrimitives.put(seDT,components);
        }
        String idTemp=id;
        int counter=1;
        while (components.contains(idTemp)) {
          idTemp=id + ""String_Node_Str"" + counter;
          counter++;
        }
        components.add(idTemp);
        Element primGroup=svg_g2d.createElement(""String_Node_Str"");
        svg_g2d.pushParent(primGroup);
        primGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + idTemp);
        primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
        svg_g2d.setDeferStrokColor(primGroup);
      }
    }
 else {
      Object designObject=null;
      if (getElementFromSource(sourceObject,StructureType.TITLE) != null) {
        designObject=sourceObject.getSource();
      }
 else       if (getElementFromSource(sourceObject,StructureType.CHART_BLOCK) != null) {
        designObject=sourceObject.getSource();
      }
 else       if (getElementFromSource(sourceObject,StructureType.PLOT) != null) {
        designObject=sourceObject.getSource();
      }
 else       if (getElementFromSource(sourceObject,StructureType.AXIS) != null) {
        designObject=sourceObject.getSource();
      }
      if (designObject != null) {
        String groupIdentifier=String.valueOf(designObject.hashCode());
        String id=Integer.toString(pre.hashCode());
        List components=(List)componentPrimitives.get(designObject);
        if (components == null) {
          components=new ArrayList();
          componentPrimitives.put(designObject,components);
        }
        String idTemp=id;
        int counter=1;
        while (components.contains(idTemp)) {
          idTemp=id + ""String_Node_Str"" + counter;
          counter++;
        }
        components.add(idTemp);
        Element primGroup=svg_g2d.createElement(""String_Node_Str"");
        svg_g2d.pushParent(primGroup);
        primGroup.setAttribute(""String_Node_Str"",groupIdentifier + ""String_Node_Str"" + idTemp);
        primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
        svg_g2d.setDeferStrokColor(primGroup);
      }
    }
  }
}",0.8829763246899662
78210,"/** 
 * Overridden behavior for graphic element series that are plotted along axes
 * @param bo
 */
public final void render(Map htRenderers,Bounds bo) throws ChartException {
  final boolean bFirstInSequence=(iSeriesIndex == 0);
  final boolean bLastInSequence=(iSeriesIndex == iSeriesCount - 1);
  long lTimer=System.currentTimeMillis();
  final Chart cm=getModel();
  final IDeviceRenderer idr=getDevice();
  final ScriptHandler sh=getRunTimeContext().getScriptHandler();
  if (bFirstInSequence) {
    lTimer=System.currentTimeMillis();
    htRenderers.put(TIMER,new Long(lTimer));
    Block bl=cm.getBlock();
    final Enumeration e=bl.children(true);
    final BlockGenerationEvent bge=new BlockGenerationEvent(bl);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
    bge.updateBlock(bl);
    renderChartBlock(idr,bl,StructureSource.createUnknown(bl));
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    while (e.hasMoreElements()) {
      bl=(Block)e.nextElement();
      bge.updateBlock(bl);
      if (bl instanceof Plot) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderPlot(idr,(Plot)bl);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
        if (!bLastInSequence) {
          break;
        }
      }
 else       if (bl instanceof TitleBlock) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderTitle(idr,(TitleBlock)bl);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof LabelBlock) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderLabel(idr,bl,StructureSource.createUnknown(bl));
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof Legend) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderLegend(idr,(Legend)bl,htRenderers);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderBlock(idr,bl,StructureSource.createUnknown(bl));
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
    }
  }
 else   if (bLastInSequence) {
    Block bl=cm.getBlock();
    final Enumeration e=bl.children(true);
    final BlockGenerationEvent bge=new BlockGenerationEvent(this);
    boolean bStarted=false;
    while (e.hasMoreElements()) {
      bl=(Block)e.nextElement();
      if (!bStarted && !bl.isPlot()) {
        continue;
      }
      bStarted=true;
      bge.updateBlock(bl);
      if (bl instanceof Plot) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderPlot(idr,(Plot)bl);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof TitleBlock) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderTitle(idr,(TitleBlock)bl);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof LabelBlock) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderLabel(idr,bl,StructureSource.createUnknown(bl));
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof Legend) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderLegend(idr,(Legend)bl,htRenderers);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderBlock(idr,bl,StructureSource.createUnknown(bl));
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
    }
  }
 else {
    final BlockGenerationEvent bge=new BlockGenerationEvent(this);
    Plot p=cm.getPlot();
    bge.updateBlock(p);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,p,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,p);
    renderPlot(idr,p);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,p,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,p);
  }
  lTimer=System.currentTimeMillis() - lTimer;
  if (htRenderers.containsKey(TIMER)) {
    final Long l=(Long)htRenderers.get(TIMER);
    htRenderers.put(TIMER,new Long(l.longValue() + lTimer));
  }
 else {
    htRenderers.put(TIMER,new Long(lTimer));
  }
  if (bLastInSequence) {
    Object obj=getComputations();
    if (obj instanceof PlotWith2DAxes) {
      final PlotWith2DAxes pw2da=(PlotWith2DAxes)getComputations();
      pw2da.getStackedSeriesLookup().resetSubUnits();
    }
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Long(lTimer)},getRunTimeContext().getULocale()));
    htRenderers.remove(TIMER);
  }
}","/** 
 * Overridden behavior for graphic element series that are plotted along axes
 * @param bo
 */
public final void render(Map htRenderers,Bounds bo) throws ChartException {
  final boolean bFirstInSequence=(iSeriesIndex == 0);
  final boolean bLastInSequence=(iSeriesIndex == iSeriesCount - 1);
  long lTimer=System.currentTimeMillis();
  final Chart cm=getModel();
  final IDeviceRenderer idr=getDevice();
  final ScriptHandler sh=getRunTimeContext().getScriptHandler();
  if (bFirstInSequence) {
    lTimer=System.currentTimeMillis();
    htRenderers.put(TIMER,new Long(lTimer));
    Block bl=cm.getBlock();
    final Enumeration e=bl.children(true);
    final BlockGenerationEvent bge=new BlockGenerationEvent(bl);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
    bge.updateBlock(bl);
    renderChartBlock(idr,bl,StructureSource.createChartBlock(bl));
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    while (e.hasMoreElements()) {
      bl=(Block)e.nextElement();
      bge.updateBlock(bl);
      if (bl instanceof Plot) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderPlot(idr,(Plot)bl);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
        if (!bLastInSequence) {
          break;
        }
      }
 else       if (bl instanceof TitleBlock) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderTitle(idr,(TitleBlock)bl);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof LabelBlock) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderLabel(idr,bl,StructureSource.createUnknown(bl));
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof Legend) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderLegend(idr,(Legend)bl,htRenderers);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderBlock(idr,bl,StructureSource.createUnknown(bl));
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
    }
  }
 else   if (bLastInSequence) {
    Block bl=cm.getBlock();
    final Enumeration e=bl.children(true);
    final BlockGenerationEvent bge=new BlockGenerationEvent(this);
    boolean bStarted=false;
    while (e.hasMoreElements()) {
      bl=(Block)e.nextElement();
      if (!bStarted && !bl.isPlot()) {
        continue;
      }
      bStarted=true;
      bge.updateBlock(bl);
      if (bl instanceof Plot) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderPlot(idr,(Plot)bl);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof TitleBlock) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderTitle(idr,(TitleBlock)bl);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof LabelBlock) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderLabel(idr,bl,StructureSource.createUnknown(bl));
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof Legend) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderLegend(idr,(Legend)bl,htRenderers);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderBlock(idr,bl,StructureSource.createUnknown(bl));
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
    }
  }
 else {
    final BlockGenerationEvent bge=new BlockGenerationEvent(this);
    Plot p=cm.getPlot();
    bge.updateBlock(p);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,p,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,p);
    renderPlot(idr,p);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,p,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,p);
  }
  lTimer=System.currentTimeMillis() - lTimer;
  if (htRenderers.containsKey(TIMER)) {
    final Long l=(Long)htRenderers.get(TIMER);
    htRenderers.put(TIMER,new Long(l.longValue() + lTimer));
  }
 else {
    htRenderers.put(TIMER,new Long(lTimer));
  }
  if (bLastInSequence) {
    Object obj=getComputations();
    if (obj instanceof PlotWith2DAxes) {
      final PlotWith2DAxes pw2da=(PlotWith2DAxes)getComputations();
      pw2da.getStackedSeriesLookup().resetSubUnits();
    }
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Long(lTimer)},getRunTimeContext().getULocale()));
    htRenderers.remove(TIMER);
  }
}",0.9990867579908675
78211,"/** 
 * Renders all blocks using the appropriate block z-order and the containment hierarchy.
 * @param bo
 */
public void render(Map htRenderers,Bounds bo) throws ChartException {
  final boolean bFirstInSequence=(iSeriesIndex == 0);
  final boolean bLastInSequence=(iSeriesIndex == iSeriesCount - 1);
  boolean bStarted=bFirstInSequence;
  long lTimer=System.currentTimeMillis();
  Block bl=cm.getBlock();
  final Enumeration e=bl.children(true);
  final BlockGenerationEvent bge=new BlockGenerationEvent(this);
  final IDeviceRenderer idr=getDevice();
  final ScriptHandler sh=getRunTimeContext().getScriptHandler();
  if (bFirstInSequence) {
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
    bge.updateBlock(bl);
    renderChartBlock(idr,bl,StructureSource.createUnknown(bl));
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
  }
  while (e.hasMoreElements()) {
    bl=(Block)e.nextElement();
    bge.updateBlock(bl);
    if (bl instanceof Plot) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderPlot(ir,(Plot)bl);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      if (bFirstInSequence && !bLastInSequence) {
        break;
      }
      if (!bStarted) {
        bStarted=true;
      }
    }
 else     if (bl instanceof TitleBlock && bStarted) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderTitle(ir,(TitleBlock)bl);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    }
 else     if (bl instanceof LabelBlock && bStarted) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderLabel(ir,bl,StructureSource.createUnknown(bl));
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    }
 else     if (bl instanceof Legend && bStarted && bLastInSequence) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderLegend(idr,(Legend)bl,htRenderers);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    }
 else     if (bStarted) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderBlock(ir,bl,StructureSource.createUnknown(bl));
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    }
  }
  lTimer=System.currentTimeMillis() - lTimer;
  if (htRenderers.containsKey(TIMER)) {
    final Long l=(Long)htRenderers.get(TIMER);
    htRenderers.put(TIMER,new Long(l.longValue() + lTimer));
  }
 else {
    htRenderers.put(TIMER,new Long(lTimer));
  }
  if (bLastInSequence) {
    try {
      dc.flush();
    }
 catch (    ChartException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Long(lTimer)},rtc.getULocale()));
    htRenderers.remove(TIMER);
  }
}","/** 
 * Renders all blocks using the appropriate block z-order and the containment hierarchy.
 * @param bo
 */
public void render(Map htRenderers,Bounds bo) throws ChartException {
  final boolean bFirstInSequence=(iSeriesIndex == 0);
  final boolean bLastInSequence=(iSeriesIndex == iSeriesCount - 1);
  boolean bStarted=bFirstInSequence;
  long lTimer=System.currentTimeMillis();
  Block bl=cm.getBlock();
  final Enumeration e=bl.children(true);
  final BlockGenerationEvent bge=new BlockGenerationEvent(this);
  final IDeviceRenderer idr=getDevice();
  final ScriptHandler sh=getRunTimeContext().getScriptHandler();
  if (bFirstInSequence) {
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
    bge.updateBlock(bl);
    renderChartBlock(idr,bl,StructureSource.createChartBlock(bl));
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
  }
  while (e.hasMoreElements()) {
    bl=(Block)e.nextElement();
    bge.updateBlock(bl);
    if (bl instanceof Plot) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderPlot(ir,(Plot)bl);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      if (bFirstInSequence && !bLastInSequence) {
        break;
      }
      if (!bStarted) {
        bStarted=true;
      }
    }
 else     if (bl instanceof TitleBlock && bStarted) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderTitle(ir,(TitleBlock)bl);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    }
 else     if (bl instanceof LabelBlock && bStarted) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderLabel(ir,bl,StructureSource.createUnknown(bl));
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    }
 else     if (bl instanceof Legend && bStarted && bLastInSequence) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderLegend(idr,(Legend)bl,htRenderers);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    }
 else     if (bStarted) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderBlock(ir,bl,StructureSource.createUnknown(bl));
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    }
  }
  lTimer=System.currentTimeMillis() - lTimer;
  if (htRenderers.containsKey(TIMER)) {
    final Long l=(Long)htRenderers.get(TIMER);
    htRenderers.put(TIMER,new Long(l.longValue() + lTimer));
  }
 else {
    htRenderers.put(TIMER,new Long(lTimer));
  }
  if (bLastInSequence) {
    try {
      dc.flush();
    }
 catch (    ChartException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Long(lTimer)},rtc.getULocale()));
    htRenderers.remove(TIMER);
  }
}",0.9983615510649918
78212,"/** 
 * Insert a text string into the text area
 * @param text
 */
private void insertText(String text){
  StyledText textWidget=viewer.getTextWidget();
  int selectionStart=textWidget.getSelection().x;
  textWidget.insert(text);
  textWidget.setSelection(selectionStart + text.length());
  textWidget.setFocus();
}","/** 
 * Insert a text string into the text area
 * @param text
 */
private void insertText(String text){
  if (text == null)   return;
  StyledText textWidget=viewer.getTextWidget();
  int selectionStart=textWidget.getSelection().x;
  textWidget.insert(text);
  textWidget.setSelection(selectionStart + text.length());
  textWidget.setFocus();
}",0.9545454545454546
78213,"/** 
 * Creates the textual query editor 
 * @param parent
 */
private void createTextualQueryComposite(Composite parent){
  Composite composite=new Composite(parent,SWT.FILL);
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  composite.setLayout(layout);
  CompositeRuler ruler=new CompositeRuler();
  LineNumberRulerColumn lineNumbers=new LineNumberRulerColumn();
  ruler.addDecorator(0,lineNumbers);
  viewer=new SourceViewer(composite,ruler,SWT.H_SCROLL | SWT.V_SCROLL);
  sourceViewerConfiguration=new JdbcSQLSourceViewerConfiguration(this.getDataSetDesign());
  viewer.configure(sourceViewerConfiguration);
  doc=new Document(getQueryText());
  FastPartitioner partitioner=new FastPartitioner(new SQLPartitionScanner(),new String[]{SQLPartitionScanner.SINGLE_LINE_COMMENT1,SQLPartitionScanner.SINGLE_LINE_COMMENT2,SQLPartitionScanner.MULTI_LINE_COMMENT,IDocument.DEFAULT_CONTENT_TYPE});
  partitioner.connect(doc);
  doc.setDocumentPartitioner(partitioner);
  viewer.setDocument(doc);
  viewer.getTextWidget().setFont(JFaceResources.getTextFont());
  attachMenus(viewer);
  GridData data=new GridData(GridData.FILL_BOTH);
  viewer.getControl().setLayoutData(data);
  addDropSupportToViewer();
  if (isExternalEditorConfigured()) {
    Button btnExternalEditor=new Button(composite,SWT.NONE);
    btnExternalEditor.setText(""String_Node_Str"");
    btnExternalEditor.addSelectionListener(this);
  }
  viewer.getTextWidget().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (isUndoKeyPress(e)) {
        viewer.doOperation(ITextOperationTarget.UNDO);
      }
 else       if (isRedoKeyPress(e)) {
        viewer.doOperation(ITextOperationTarget.REDO);
      }
    }
    private boolean isUndoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'z') || (e.keyCode == 'Z'));
    }
    private boolean isRedoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'y') || (e.keyCode == 'Y'));
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
}","/** 
 * Creates the textual query editor 
 * @param parent
 */
private void createTextualQueryComposite(Composite parent){
  Composite composite=new Composite(parent,SWT.FILL);
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  composite.setLayout(layout);
  CompositeRuler ruler=new CompositeRuler();
  LineNumberRulerColumn lineNumbers=new LineNumberRulerColumn();
  ruler.addDecorator(0,lineNumbers);
  viewer=new SourceViewer(composite,ruler,SWT.H_SCROLL | SWT.V_SCROLL);
  sourceViewerConfiguration=new JdbcSQLSourceViewerConfiguration(this.getDataSetDesign());
  viewer.configure(sourceViewerConfiguration);
  doc=new Document(getQueryText());
  FastPartitioner partitioner=new FastPartitioner(new SQLPartitionScanner(),new String[]{SQLPartitionScanner.SINGLE_LINE_COMMENT1,SQLPartitionScanner.SINGLE_LINE_COMMENT2,SQLPartitionScanner.MULTI_LINE_COMMENT,IDocument.DEFAULT_CONTENT_TYPE});
  partitioner.connect(doc);
  doc.setDocumentPartitioner(partitioner);
  viewer.setDocument(doc);
  viewer.getTextWidget().setFont(JFaceResources.getTextFont());
  viewer.getTextWidget().addBidiSegmentListener(new BidiSegmentListener(){
    public void lineGetSegments(    BidiSegmentEvent event){
      event.segments=getBidiLineSegments(event.lineText);
    }
  }
);
  attachMenus(viewer);
  GridData data=new GridData(GridData.FILL_BOTH);
  viewer.getControl().setLayoutData(data);
  addDropSupportToViewer();
  if (isExternalEditorConfigured()) {
    Button btnExternalEditor=new Button(composite,SWT.NONE);
    btnExternalEditor.setText(""String_Node_Str"");
    btnExternalEditor.addSelectionListener(this);
  }
  viewer.getTextWidget().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (isUndoKeyPress(e)) {
        viewer.doOperation(ITextOperationTarget.UNDO);
      }
 else       if (isRedoKeyPress(e)) {
        viewer.doOperation(ITextOperationTarget.REDO);
      }
    }
    private boolean isUndoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'z') || (e.keyCode == 'Z'));
    }
    private boolean isRedoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'y') || (e.keyCode == 'Y'));
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
}",0.9526207370107576
78214,"/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.reportPage=String.valueOf(ParameterAccessor.getPage(request));
  this.reportDocumentName=ParameterAccessor.getReportDocument(request);
  this.reportDesignName=ParameterAccessor.getReport(request);
  processReport(request);
  String title=null;
  if (title == null || title.trim().length() <= 0) {
    title=BirtResources.getString(""String_Node_Str"");
  }
  this.reportTitle=ParameterAccessor.htmlEncode(title);
}","/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.reportPage=String.valueOf(ParameterAccessor.getPage(request));
  this.reportDocumentName=ParameterAccessor.getReportDocument(request);
  this.reportDesignName=ParameterAccessor.getReport(request);
  processReport(request);
  String title=null;
  if (title == null || title.trim().length() <= 0) {
    title=BirtResources.getString(""String_Node_Str"");
  }
  this.reportTitle=ParameterAccessor.htmlEncode(title);
  this.__initParameters(request);
}",0.9803012746234068
78215,"/** 
 * @param source
 * @return
 */
private static Node[] populateNodeList(Node[] source){
}","/** 
 * @param source
 * @return
 */
private static Node[] populateNodeList(Node[] source){
  Node[] result=new Node[source.length];
  for (int i=0; i < result.length; i++) {
    result[i]=new Node(source[i].getValue());
  }
  for (int i=0; i < result.length; i++) {
    List l=source[i].getChildren();
    for (int j=0; j < l.size(); j++) {
      Node n=getMatchedNode((Node)l.get(j),result);
      if (n != null)       result[i].addChild(n);
    }
  }
  return result;
}",0.3292035398230089
78216,"private Map getParsedParameters(IViewerReportDesignHandle design,InputOptions options,Map parameters) throws ReportServiceException {
  Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
  Collection parameterList=getParameterDefinitions(design,options);
  Map paramMap=new HashMap();
  IGetParameterDefinitionTask task=null;
  Map configMap=null;
  Boolean isDesignerBoolean=(Boolean)options.getOption(InputOptions.OPT_IS_DESIGNER);
  boolean isDesigner=(isDesignerBoolean != null ? isDesignerBoolean.booleanValue() : false);
  try {
    task=getParameterDefinitionTask(design.getFileName());
    IReportRunnable runnable=ReportEngineService.getInstance().openReportDesign(design.getFileName());
    configMap=runnable.getTestConfig();
  }
 catch (  EngineException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ScalarParameterDefn parameterObj=(ScalarParameterDefn)iter.next();
    String paramValue=null;
    Object paramValueObj=null;
    ScalarParameterHandle paramHandle=(ScalarParameterHandle)parameterObj.getHandle();
    String paramName=paramHandle.getName();
    String format=paramHandle.getPattern();
    ReportParameterConverter converter=new ReportParameterConverter(format,locale);
    Set paramNames=parameters.keySet();
    if (parameters != null && paramName != null) {
      boolean found=false;
      for (Iterator it=paramNames.iterator(); it.hasNext(); ) {
        String name=(String)it.next();
        if (paramName.equals(name)) {
          paramValue=(String)parameters.get(name);
          paramValueObj=converter.parse(paramValue,ParameterDataTypeConverter.getEngineDataType(paramHandle.getDataType()));
          paramMap.put(paramName,paramValueObj);
          found=true;
          break;
        }
      }
      if (!found && configMap.containsKey(paramName) && isDesigner) {
        String configValue=(String)configMap.get(paramName);
        ReportParameterConverter cfgConverter=new ReportParameterConverter(format,Locale.US);
        paramValueObj=cfgConverter.parse(configValue,parameterObj.getDataType());
      }
 else       if (!found) {
        paramValueObj=task.getDefaultValue(parameterObj.getName());
      }
    }
  }
  return paramMap;
}","private Map getParsedParameters(IViewerReportDesignHandle design,InputOptions options,Map parameters) throws ReportServiceException {
  Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
  Collection parameterList=getParameterDefinitions(design,options);
  Map paramMap=new HashMap();
  IGetParameterDefinitionTask task=null;
  Map configMap=null;
  Boolean isDesignerBoolean=(Boolean)options.getOption(InputOptions.OPT_IS_DESIGNER);
  boolean isDesigner=(isDesignerBoolean != null ? isDesignerBoolean.booleanValue() : false);
  try {
    task=getParameterDefinitionTask(design.getFileName());
    IReportRunnable runnable=ReportEngineService.getInstance().openReportDesign(design.getFileName());
    configMap=runnable.getTestConfig();
  }
 catch (  EngineException e) {
    throw new ReportServiceException(e.getLocalizedMessage());
  }
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    IScalarParameterDefn parameterObj=(IScalarParameterDefn)iter.next();
    String paramValue=null;
    Object paramValueObj=null;
    ScalarParameterHandle paramHandle=(ScalarParameterHandle)parameterObj.getHandle();
    String paramName=paramHandle.getName();
    String format=paramHandle.getPattern();
    ReportParameterConverter converter=new ReportParameterConverter(format,locale);
    Set paramNames=null;
    if (parameters != null) {
      paramNames=parameters.keySet();
    }
    if (parameters != null && paramName != null) {
      boolean found=false;
      for (Iterator it=paramNames.iterator(); it.hasNext(); ) {
        String name=(String)it.next();
        if (paramName.equals(name)) {
          paramValue=(String)parameters.get(name);
          paramValueObj=converter.parse(paramValue,ParameterDataTypeConverter.getEngineDataType(paramHandle.getDataType()));
          paramMap.put(paramName,paramValueObj);
          found=true;
          break;
        }
      }
      if (!found && configMap.containsKey(paramName) && isDesigner) {
        String configValue=(String)configMap.get(paramName);
        ReportParameterConverter cfgConverter=new ReportParameterConverter(format,Locale.US);
        paramValueObj=cfgConverter.parse(configValue,parameterObj.getDataType());
      }
 else       if (!found) {
        paramValueObj=task.getDefaultValue(parameterObj.getName());
      }
    }
  }
  return paramMap;
}",0.9869014386944384
78217,"/** 
 * Set Engine context.
 * @param servletContext
 * @param request
 */
synchronized public void setEngineContext(ServletContext servletContext,HttpServletRequest request){
  if (engine == null) {
    IPlatformContext platformContext=new PlatformServletContext(servletContext);
    config.setPlatformContext(platformContext);
    try {
      Platform.startup(null);
    }
 catch (    BirtException e) {
      e.printStackTrace();
    }
    IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
    engine=factory.createReportEngine(config);
    contextPath=request.getContextPath();
  }
}","/** 
 * Set Engine context.
 * @param servletContext
 * @param request
 */
synchronized public void setEngineContext(ServletContext servletContext,HttpServletRequest request){
  if (engine == null) {
    IPlatformContext platformContext=new PlatformServletContext(servletContext);
    config.setPlatformContext(platformContext);
    try {
      Platform.startup(config);
    }
 catch (    BirtException e) {
      e.printStackTrace();
    }
    IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
    engine=factory.createReportEngine(config);
    contextPath=request.getContextPath();
  }
}",0.9925705794947994
78218,"/** 
 * Get report document name.
 * @param request http request
 * @return report file name
 * @throws AxisFault
 */
public static String getReportDocument(HttpServletRequest request){
  String filePath=getParameter(request,PARAM_REPORT_DOCUMENT);
  filePath=preProcess(filePath);
  if (""String_Node_Str"".equals(filePath)) {
    filePath=generateDocumentFromReport(request);
    filePath=createDocumentPath(filePath,request);
  }
  return filePath;
}","/** 
 * Get report document name.
 * @param request http request
 * @return report file name
 * @throws AxisFault
 */
public static String getReportDocument(HttpServletRequest request){
  String filePath=getParameter(request,PARAM_REPORT_DOCUMENT);
  filePath=preProcess(filePath);
  if (""String_Node_Str"".equals(filePath)) {
    filePath=generateDocumentFromReport(request);
    filePath=createDocumentPath(filePath,request);
  }
 else {
    filePath=createAbsolutePath(filePath);
  }
  return filePath;
}",0.9090909090909092
78219,"private void refreshColumnList(){
  keyChooser.removeAll();
  columnList=DEUtil.getVisiableColumnBindingsList(inputGroup);
  Iterator itor=columnList.iterator();
  while (itor.hasNext()) {
    keyChooser.add(((ComputedColumnHandle)itor.next()).getName());
  }
}","private void refreshColumnList(){
  String selected=keyChooser.getText();
  keyChooser.removeAll();
  columnList=DEUtil.getVisiableColumnBindingsList(inputGroup);
  Iterator itor=columnList.iterator();
  while (itor.hasNext()) {
    keyChooser.add(((ComputedColumnHandle)itor.next()).getName());
  }
  int newIndex=keyChooser.indexOf(selected);
  if (newIndex != -1) {
    keyChooser.select(newIndex);
  }
 else {
    keyChooser.setText(selected);
  }
}",0.7310924369747899
78220,"/** 
 * Test whether there are dependency cycles in exprManager.
 * @param exprManager
 * @return
 * @throws DataException
 */
private static void testDependencyCycle(ExprManager exprManager) throws DataException {
  List result=new ArrayList();
  Iterator it=exprManager.getColumnNames().iterator();
  while (it.hasNext()) {
    String name=it.next().toString();
    Node n=new Node(name);
    IBaseExpression expr=exprManager.getExpr(name);
    if (expr instanceof IScriptExpression) {
      String exprText=((IScriptExpression)expr).getText();
      try {
        List l=ExpressionUtil.extractColumnExpressions(exprText);
        for (int j=0; j < l.size(); j++) {
          n.addChild(new Node(((IColumnBinding)l.get(j)).getResultSetColumnName()));
        }
      }
 catch (      BirtException e) {
        throw new DataException(e.getLocalizedMessage());
      }
    }
    result.add(n);
  }
  Node[] source=new Node[result.size()];
  for (int i=0; i < source.length; i++) {
    source[i]=(Node)result.get(i);
  }
  validateNodes(source);
}","/** 
 * Test whether there are dependency cycles in exprManager.
 * @param exprManager
 * @return
 * @throws DataException
 */
private static void testDependencyCycle(ExprManager exprManager) throws DataException {
  List result=new ArrayList();
  Iterator it=exprManager.getColumnNames().iterator();
  while (it.hasNext()) {
    String name=it.next().toString();
    Node n=new Node(name);
    IBaseExpression expr=exprManager.getExpr(name);
    if (expr != null) {
      try {
        List l=null;
        if (expr instanceof IScriptExpression)         l=ExpressionParserUtil.extractColumnExpression((IScriptExpression)expr);
 else         if (expr instanceof IConditionalExpression)         l=ExpressionParserUtil.extractColumnExpression((IConditionalExpression)expr);
 else         throw new DataException(ResourceConstants.BAD_DATA_EXPRESSION);
        for (int j=0; j < l.size(); j++) {
          n.addChild(new Node(l.get(j) == null ? null : l.get(j).toString()));
        }
      }
 catch (      BirtException e) {
        throw new DataException(e.getLocalizedMessage());
      }
    }
    result.add(n);
  }
  Node[] source=new Node[result.size()];
  for (int i=0; i < source.length; i++) {
    source[i]=(Node)result.get(i);
  }
  validateNodes(source);
}",0.7756160830090791
78221,"public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  ModuleHandle model=getProvider().getReportModuleHandle(getEditorInput());
  if (model != null && getModel() != model) {
    Object oldModel=getModel();
    getProvider().connect(model);
    rebuildReportDesign(oldModel);
    if (getModel() != null) {
      setViewContentsAsMasterPage();
      markPageStale(IPageStaleType.NONE);
    }
    updateStackActions();
  }
  return true;
}","public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  ModuleHandle model=getProvider().getReportModuleHandle(getEditorInput());
  if (model != null && getModel() != model) {
    Object oldModel=getModel();
    getProvider().connect(model);
    setModel(model);
    rebuildReportDesign(oldModel);
    if (getModel() != null) {
      setViewContentsAsMasterPage();
      markPageStale(IPageStaleType.NONE);
    }
    updateStackActions();
  }
  return true;
}",0.9809264305177112
78222,"protected DataSetDesign collectDataSetDesign(DataSetDesign design){
  if (design != null)   design.setQueryText(doc.get());
  return design;
}","protected DataSetDesign collectDataSetDesign(DataSetDesign design){
  if (design != null && doc != null)   design.setQueryText(doc.get());
  return design;
}",0.9498327759197324
78223,"private void RemoveAllAvailableDbObjects(){
  availableDbObjectsTree.removeAll();
}","private void RemoveAllAvailableDbObjects(){
  if (availableDbObjectsTree != null)   availableDbObjectsTree.removeAll();
}",0.8137254901960784
78224,"public Control createPageControl(Composite parent){
  SashForm SashForm=new SashForm(parent,SWT.HORIZONTAL);
  SashForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  initialize();
  initJdbcInfo();
  createTableSelectionComposite(SashForm);
  populateAvailableDbObjects();
  createTextualQueryComposite(SashForm);
  setSashFormWeights(SashForm);
  return SashForm;
}","/** 
 * @param parent
 * @return
 */
public Control createPageControl(Composite parent){
  SashForm SashForm=new SashForm(parent,SWT.HORIZONTAL);
  SashForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  initialize();
  initJdbcInfo();
  createTableSelectionComposite(SashForm);
  populateAvailableDbObjects();
  createTextualQueryComposite(SashForm);
  setSashFormWeights(SashForm);
  return SashForm;
}",0.9525032092426188
78225,"/** 
 * Test whether high level group keys are depended on low level group keys.
 * @param exprManager
 * @return
 * @throws DataException 
 */
private static void testGroupNameValidation(ExprManager exprManager) throws DataException {
  HashMap map=exprManager.getGroupKeys();
  Iterator it=map.keySet().iterator();
  while (it.hasNext()) {
    Integer level=(Integer)it.next();
    exprManager.setEntryGroupLevel(level.intValue());
    if (!ExpressionCompilerUtil.hasColumnRow(map.get(level).toString(),exprManager)) {
      exprManager.setEntryGroupLevel(ExprManager.OVERALL_GROUP);
      throw new DataException(ResourceConstants.INVALID_GROUP_KEY,new Object[]{map.get(level).toString(),level});
    }
  }
}","/** 
 * Test whether high level group keys are depended on low level group keys.
 * @param exprManager
 * @return
 * @throws DataException 
 */
private static void testGroupNameValidation(ExprManager exprManager) throws DataException {
  HashMap map=exprManager.getGroupKeys();
  Iterator it=map.keySet().iterator();
  while (it.hasNext()) {
    Integer level=(Integer)it.next();
    exprManager.setEntryGroupLevel(level.intValue());
    if (!ExpressionCompilerUtil.hasColumnRow(map.get(level).toString(),exprManager)) {
      exprManager.setEntryGroupLevel(ExprManager.OVERALL_GROUP);
      throw new DataException(ResourceConstants.INVALID_GROUP_KEY,new Object[]{map.get(level).toString(),level});
    }
  }
  exprManager.setEntryGroupLevel(ExprManager.OVERALL_GROUP);
}",0.9588671611598112
78226,"/** 
 * Returns the image source type. This is one of the following options defined in <code>DesignChoiceConstants</code>: <p> <ul> <li><code>IMAGE_REF_TYPE_NONE</code> <li><code>IMAGE_REF_TYPE_URL</code> <li><code>IMAGE_REF_TYPE_FILE</code> <li><code>IMAGE_REF_TYPE_EXPR</code> <li><code>IMAGE_REF_TYPE_EMBED</code> </ul>
 * @param source the image source type.
 * @throws SemanticException if the <code>source</code> is not one of the above.
 */
public void setSource(String source) throws SemanticException {
  setProperty(ImageItem.SOURCE_PROP,source);
}","/** 
 * Sets the image source type. This is one of the following options defined in <code>DesignChoiceConstants</code>: <p> <ul> <li><code>IMAGE_REF_TYPE_NONE</code> <li><code>IMAGE_REF_TYPE_URL</code> <li><code>IMAGE_REF_TYPE_FILE</code> <li><code>IMAGE_REF_TYPE_EXPR</code> <li><code>IMAGE_REF_TYPE_EMBED</code> </ul>
 * @param source the image source type.
 * @throws SemanticException if the <code>source</code> is not one of the above.
 */
public void setSource(String source) throws SemanticException {
  setProperty(ImageItem.SOURCE_PROP,source);
}",0.9919137466307276
78227,"/** 
 * Sets the image uri property. The source type is automatically set in this method. Whether <code>IMAGE_REF_TYPE_FILE</code> or <code>IMAGE_REF_TYPE_URL</code> depends on the uri to set.
 * @param uri the uri to be set.
 * @throws SemanticException if the property is locked.
 */
public void setURI(String uri) throws SemanticException {
  String source=DesignChoiceConstants.IMAGE_REF_TYPE_URL;
  try {
    module.getActivityStack().startTrans();
    setProperty(ImageItem.SOURCE_PROP,source);
    setProperty(ImageItem.URI_PROP,uri);
  }
 catch (  SemanticException e) {
    module.getActivityStack().rollback();
    throw e;
  }
  module.getActivityStack().commit();
}","/** 
 * Sets the image uri property. The source type is <code>IMAGE_REF_TYPE_URL</code>, and will automatically set in this method.
 * @param uri the uri to be set.
 * @throws SemanticException if the property is locked.
 */
public void setURI(String uri) throws SemanticException {
  String source=DesignChoiceConstants.IMAGE_REF_TYPE_URL;
  setURIProperty(uri,source);
}",0.219256434699714
78228,"public void doSaveAs(){
  getActivePageInstance().doSaveAs();
  setInput(getActivePageInstance().getEditorInput());
  IReportProvider provider=getProvider();
  if (provider != null) {
    setPartName(provider.getInputPath(getEditorInput()).lastSegment());
    firePropertyChange(IWorkbenchPartConstants.PROP_PART_NAME);
    getProvider().getReportModuleHandle(getEditorInput()).setFileName(getProvider().getInputPath(getEditorInput()).toOSString());
  }
}","public void doSaveAs(){
  getActivePageInstance().doSaveAs();
  setInput(getActivePageInstance().getEditorInput());
  IReportProvider provider=getProvider();
  if (provider != null) {
    setPartName(provider.getInputPath(getEditorInput()).lastSegment());
    firePropertyChange(IWorkbenchPartConstants.PROP_PART_NAME);
    getProvider().getReportModuleHandle(getEditorInput()).setFileName(getProvider().getInputPath(getEditorInput()).toOSString());
  }
  updateRelatedViews();
}",0.974304068522484
78229,"private String[] getDataSetColumns(ScalarParameterHandle handle){
  if (dataSet == null) {
    return new String[0];
  }
  DataSetItemModel[] models=DataSetManager.getCurrentInstance().getColumns(dataSet,false);
  if (models == null) {
    return new String[0];
  }
  ArrayList valueList=new ArrayList(models.length);
  for (int i=0; i < models.length; i++) {
    if (handle == null || matchDataType(handle,models[i])) {
      valueList.add(models[i].getName());
    }
  }
  return (String[])valueList.toArray(new String[0]);
}","private String[] getDataSetColumns(ScalarParameterHandle handle){
  if (dataSet == null) {
    return new String[0];
  }
  DataSetItemModel[] models=DataSetManager.getCurrentInstance().getColumns(dataSet,false);
  if (models == null) {
    return new String[0];
  }
  ArrayList valueList=new ArrayList(models.length);
  for (int i=0; i < models.length; i++) {
    if (handle == null || matchDataType(handle,models[i])) {
      valueList.add(models[i].getAlias() == null ? models[i].getName() : models[i].getAlias());
    }
  }
  return (String[])valueList.toArray(new String[0]);
}",0.9512635379061372
78230,"/** 
 * compile column reference expression
 * @param refNode
 * @throws BirtException
 */
private void compileDirectColRefExpr(Node refNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  assert(refNode.getType() == Token.GETPROP || refNode.getType() == Token.GETELEM);
  Node rowName=refNode.getFirstChild();
  assert(rowName != null);
  if (rowName.getType() != Token.NAME) {
    compileComplexExpr(refNode,tree,columnExprList);
  }
  String str=rowName.getString();
  assert(str != null);
  if (!str.equals(ROW_INDICATOR))   return;
  Node rowColumn=rowName.getNext();
  assert(rowColumn != null);
  if (refNode.getType() == Token.GETPROP && rowColumn.getType() == Token.STRING) {
    ColumnBinding binding=new ColumnBinding(rowColumn.getString(),DATASETROW_INDICATOR + ""String_Node_Str"" + rowColumn.getString()+ ""String_Node_Str"");
    columnExprList.add(binding);
  }
  if (refNode.getType() == Token.GETELEM) {
    if (rowColumn.getType() == Token.NUMBER) {
    }
 else     if (rowColumn.getType() == Token.STRING) {
      ColumnBinding binding=new ColumnBinding(rowColumn.getString(),DATASETROW_INDICATOR + ""String_Node_Str"" + rowColumn.getString()+ ""String_Node_Str"");
      columnExprList.add(binding);
    }
  }
}","/** 
 * compile column reference expression
 * @param refNode
 * @throws BirtException
 */
private void compileDirectColRefExpr(Node refNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  assert(refNode.getType() == Token.GETPROP || refNode.getType() == Token.GETELEM);
  Node rowName=refNode.getFirstChild();
  assert(rowName != null);
  if (rowName.getType() != Token.NAME) {
    compileComplexExpr(refNode,tree,columnExprList);
    return;
  }
  String str=rowName.getString();
  assert(str != null);
  if (!str.equals(ROW_INDICATOR))   return;
  Node rowColumn=rowName.getNext();
  assert(rowColumn != null);
  if (refNode.getType() == Token.GETPROP && rowColumn.getType() == Token.STRING) {
    ColumnBinding binding=new ColumnBinding(rowColumn.getString(),DATASETROW_INDICATOR + ""String_Node_Str"" + rowColumn.getString()+ ""String_Node_Str"");
    columnExprList.add(binding);
  }
  if (refNode.getType() == Token.GETELEM) {
    if (rowColumn.getType() == Token.NUMBER) {
    }
 else     if (rowColumn.getType() == Token.STRING) {
      ColumnBinding binding=new ColumnBinding(rowColumn.getString(),DATASETROW_INDICATOR + ""String_Node_Str"" + rowColumn.getString()+ ""String_Node_Str"");
      columnExprList.add(binding);
    }
  }
}",0.9951923076923076
78231,"/** 
 * Returns the level between the holder and the given handle
 * @param holder the handle of the holder
 * @param baseElement the handle of the base element
 * @return the level between the holder and the base element, or -1 if theelement is not a children of the holder
 */
public static int getBindingLevel(DesignElementHandle holder,DesignElementHandle baseElement){
  int level=0;
  for (DesignElementHandle elementHandle=baseElement; elementHandle.getContainer() != null; elementHandle=getBindingHolder(elementHandle).getContainer(), level++) {
    if (getBindingHolder(elementHandle) == holder) {
      return level;
    }
  }
  return -1;
}","/** 
 * Returns the level between the holder and the given handle
 * @param holder the handle of the holder
 * @param baseElement the handle of the base element
 * @return the level between the holder and the base element, or -1 if theelement is not a children of the holder
 */
public static int getBindingLevel(DesignElementHandle holder,DesignElementHandle baseElement){
  int level=0;
  for (DesignElementHandle elementHandle=baseElement; elementHandle.getContainer() != null; elementHandle=getBindingHolder(elementHandle).getContainer(), level++) {
    DesignElementHandle bindingHolder=getBindingHolder(elementHandle);
    if (bindingHolder == holder) {
      return level;
    }
    if (holder instanceof GroupHandle && bindingHolder == holder.getContainer()) {
      return level;
    }
  }
  return -1;
}",0.8469945355191257
78232,"/** 
 * Returns all visible column bindings for the given element
 * @param handle the handle of the element
 * @return the list of all visible column bindings.The list order is fromthe top to the given element
 */
public static List getVisiableColumnBindingsList(DesignElementHandle handle,boolean includeSelf){
  List bindingList=new ArrayList();
  if (includeSelf) {
    Iterator iterator=getBindingColumnIterator(handle);
    while (iterator.hasNext()) {
      bindingList.add(iterator.next());
    }
  }
  ReportItemHandle holder=getBindingHolder(handle);
  if (holder != null) {
    for (DesignElementHandle elementHandle=handle.getContainer(); elementHandle != holder.getContainer(); elementHandle=elementHandle.getContainer()) {
      List subBindingList=new ArrayList();
      Iterator iterator=getBindingColumnIterator(elementHandle);
      while (iterator.hasNext()) {
        subBindingList.add(iterator.next());
      }
      bindingList.addAll(0,subBindingList);
    }
  }
  return bindingList;
}","/** 
 * Returns all visible column bindings for the given element
 * @param handle the handle of the element
 * @return the list of all visible column bindings.The list order is fromthe top to the given element
 */
public static List getVisiableColumnBindingsList(DesignElementHandle handle,boolean includeSelf){
  List bindingList=new ArrayList();
  if (includeSelf) {
    Iterator iterator=getBindingColumnIterator(handle);
    while (iterator.hasNext()) {
      bindingList.add(iterator.next());
    }
  }
  ReportItemHandle holder=getBindingHolder(handle);
  if (holder != null) {
    if (holder instanceof ListingHandle && ((ListingHandle)holder).getDetail() == handle.getContainerSlotHandle()) {
      SlotHandle groupSlotHandle=((ListingHandle)holder).getGroups();
      for (Iterator iter=groupSlotHandle.iterator(); iter.hasNext(); ) {
        GroupHandle group=(GroupHandle)iter.next();
        for (Iterator columnIter=group.columnBindingsIterator(); columnIter.hasNext(); ) {
          bindingList.add(columnIter.next());
        }
      }
    }
    for (DesignElementHandle elementHandle=handle.getContainer(); elementHandle != holder.getContainer(); elementHandle=elementHandle.getContainer()) {
      List subBindingList=new ArrayList();
      Iterator iterator=getBindingColumnIterator(elementHandle);
      while (iterator.hasNext()) {
        subBindingList.add(iterator.next());
      }
      bindingList.addAll(0,subBindingList);
    }
  }
  return bindingList;
}",0.8102687525070197
78233,"/** 
 * Returns the element handle which can save binding columns the given element
 * @param handle the handle of the element which needs binding columns
 * @return the holder for the element,or itself if no holder available
 */
public static ReportItemHandle getBindingHolder(DesignElementHandle handle){
  if (handle instanceof ReportElementHandle) {
    if (handle instanceof ListingHandle || handle instanceof GridHandle) {
      return (ReportItemHandle)handle;
    }
    ReportItemHandle result=getBindingHolder(handle.getContainer());
    if (result == null && handle instanceof ReportItemHandle) {
      result=(ReportItemHandle)handle;
    }
    return result;
  }
  return null;
}","/** 
 * Returns the element handle which can save binding columns the given element
 * @param handle the handle of the element which needs binding columns
 * @return the holder for the element,or itself if no holder available
 */
public static ReportItemHandle getBindingHolder(DesignElementHandle handle){
  if (handle instanceof ReportElementHandle) {
    if (handle instanceof ListingHandle) {
      return (ReportItemHandle)handle;
    }
    if (handle instanceof ReportItemHandle) {
      if (((ReportItemHandle)handle).getDataSet() != null && ((ReportItemHandle)handle).columnBindingsIterator().hasNext()) {
        return (ReportItemHandle)handle;
      }
    }
    ReportItemHandle result=getBindingHolder(handle.getContainer());
    if (result == null && handle instanceof ReportItemHandle) {
      result=(ReportItemHandle)handle;
    }
    return result;
  }
  return null;
}",0.8357641090678504
78234,"/** 
 * Returns all available column bindings for the given element.
 * @param handle the handle of the element
 * @param includeSelf true if includes the element itself, or false only includes bindings in the containers
 * @return the list of all column bindings available.The list order is fromthe top to the given element
 */
public static List getAllColumnBindingList(DesignElementHandle handle,boolean includeSelf){
  List bindingList=new ArrayList();
  if (handle instanceof ReportElementHandle) {
    Iterator iterator=getBindingColumnIterator(handle);
    while (iterator.hasNext()) {
      bindingList.add(iterator.next());
    }
    bindingList.addAll(0,getAllColumnBindingList(handle.getContainer(),true));
  }
  return bindingList;
}","/** 
 * Returns all available column bindings for the given element.
 * @param handle the handle of the element
 * @param includeSelf true if includes the element itself, or false only includes bindings in the containers
 * @return the list of all column bindings available.The list order is fromthe top to the given element
 */
public static List getAllColumnBindingList(DesignElementHandle handle,boolean includeSelf){
  List bindingList=new ArrayList();
  if (handle instanceof ReportElementHandle) {
    Iterator iterator=getBindingColumnIterator(handle);
    while (iterator.hasNext()) {
      bindingList.add(iterator.next());
    }
    if (handle instanceof ListingHandle) {
      SlotHandle groupSlotHandle=((ListingHandle)handle).getGroups();
      for (Iterator iter=groupSlotHandle.iterator(); iter.hasNext(); ) {
        GroupHandle group=(GroupHandle)iter.next();
        for (Iterator columnIter=group.columnBindingsIterator(); columnIter.hasNext(); ) {
          bindingList.add(columnIter.next());
        }
      }
    }
    bindingList.addAll(0,getAllColumnBindingList(handle.getContainer(),true));
  }
  return bindingList;
}",0.7887771307570143
78235,"public AbstractParseState startElement(String tagName){
  if (DesignSchemaConstants.STRUCTURE_TAG.equalsIgnoreCase(tagName))   return new ActionStructureState(ActionParserHandler.this,element);
  return super.startElement(tagName);
}","public AbstractParseState startElement(String tagName){
  if (DesignSchemaConstants.REPORT_TAG.equalsIgnoreCase(tagName) || DesignSchemaConstants.LIBRARY_TAG.equalsIgnoreCase(tagName))   return new VersionState();
  return super.startElement(tagName);
}",0.7078189300411523
78236,"public void elementChanged(DesignElementHandle focus,NotificationEvent ev){
switch (ev.getEventType()) {
case NotificationEvent.CONTENT_EVENT:
case NotificationEvent.STYLE_EVENT:
{
      refresh();
      break;
    }
case NotificationEvent.PROPERTY_EVENT:
case NotificationEvent.THEME_EVENT:
case NotificationEvent.TEMPLATE_TRANSFORM_EVENT:
{
    refresh();
    this.markDirty(true);
    break;
  }
}
}","public void elementChanged(DesignElementHandle focus,NotificationEvent ev){
switch (ev.getEventType()) {
case NotificationEvent.CONTENT_EVENT:
case NotificationEvent.STYLE_EVENT:
{
      refresh();
      break;
    }
case NotificationEvent.PROPERTY_EVENT:
case NotificationEvent.THEME_EVENT:
case NotificationEvent.TEMPLATE_TRANSFORM_EVENT:
{
    refresh();
    this.markDirty(true);
    break;
  }
case NotificationEvent.LIBRARY_EVENT:
{
  reloadTheChildren();
}
}
}",0.9252013808975834
78237,"/** 
 * Convert string to date with check. JDK may do incorrect converse, for example: 2005/1/1 Local.US, format pattern is MM/dd/YY. Above conversion can be done without error, but obviously the result is not right. This method will do such a simple check, in DateFormat.SHORT case instead of all cases. Year is not lower than 0. Month is from 1 to 12. Day is from 1 to 31.  
 * @param source
 * @param locale
 * @return Date
 * @throws BirtException
 */
public static Date toDateWithCheck(String source,ULocale locale) throws BirtException {
  DateFormat dateFormat=DateFormat.getDateInstance(DateFormat.SHORT,locale);
  Date resultDate=null;
  try {
    resultDate=dateFormat.parse(source);
  }
 catch (  ParseException e) {
    return toDate(source,locale);
  }
  if (DateUtil.checkValid(dateFormat,source) == false) {
    throw new BirtException(pluginId,ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""},resourceBundle);
  }
  return resultDate;
}","/** 
 * Convert string to date with check. JDK may do incorrect converse, for example: 2005/1/1 Local.US, format pattern is MM/dd/YY. Above conversion can be done without error, but obviously the result is not right. This method will do such a simple check, in DateFormat.SHORT case instead of all cases. Year is not lower than 0. Month is from 1 to 12. Day is from 1 to 31.  
 * @param source
 * @param locale
 * @return Date
 * @throws BirtException
 */
public static Date toDateWithCheck(String source,ULocale locale) throws BirtException {
  DateFormat dateFormat=DateFormatHolder.getDateInstance(DateFormat.SHORT,locale);
  Date resultDate=null;
  try {
    resultDate=dateFormat.parse(source);
  }
 catch (  ParseException e) {
    return toDate(source,locale);
  }
  if (DateUtil.checkValid(dateFormat,source) == false) {
    throw new BirtException(pluginId,ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""},resourceBundle);
  }
  return resultDate;
}",0.9969635627530364
78238,"/** 
 * Resolves extends references for elements in the <code>module</code>. During the resolving procedure, cached overridden values are also distributed.
 */
protected void resolveAllElementDescendants(){
  if (module instanceof ReportDesign)   resolveElementDescendantsInSlot(ReportDesign.BODY_SLOT);
  resolveElementDescendantsInSlot(Module.COMPONENT_SLOT);
  resolveElementDescendantsInSlot(Module.DATA_SOURCE_SLOT);
  resolveElementDescendantsInSlot(Module.DATA_SET_SLOT);
  resolveElementDescendantsInSlot(Module.PARAMETER_SLOT);
}","/** 
 * Resolves extends references for elements in the <code>module</code>. During the resolving procedure, cached overridden values are also distributed.
 */
protected void resolveAllElementDescendants(){
  for (int i=0; i < module.getDefn().getSlotCount(); i++) {
    int slotId=i;
    if (slotId == ReportDesign.STYLE_SLOT || slotId == Library.THEMES_SLOT || slotId == ReportDesign.TEMPLATE_PARAMETER_DEFINITION_SLOT)     continue;
    resolveElementDescendantsInSlot(slotId);
  }
}",0.5078125
78239,"public void end() throws SAXException {
  if (element.getContainer() instanceof GroupElement) {
    element=element.getContainer();
    super.end();
  }
}","public void end() throws SAXException {
  if (element instanceof TableRow)   if (element.getContainer() instanceof GroupElement)   element=element.getContainer();
  String value=text.toString();
  if (value.equalsIgnoreCase(""String_Node_Str"") || value.equalsIgnoreCase(""String_Node_Str""))   value=DesignChoiceConstants.PAGE_BREAK_AFTER_ALWAYS;
  doEnd(value);
}",0.5320388349514563
78240,"public AbstractParseState jumpTo(){
  if (!valid)   return new AnyElementState(getHandler());
  IPropertyDefn jmpDefn=null;
  if (struct != null)   jmpDefn=struct.getDefn().getMember(name);
 else   jmpDefn=element.getPropertyDefn(name);
  if (element instanceof ListGroup && ListGroup.GROUP_START_PROP.equalsIgnoreCase(name)) {
    CompatibleRenamedPropertyState state=new CompatibleRenamedPropertyState(handler,element,ListGroup.GROUP_START_PROP);
    state.setName(ListGroup.INTERVAL_BASE_PROP);
    return state;
  }
  if (element instanceof ReportDesign && ""String_Node_Str"".equalsIgnoreCase(name)) {
    CompatibleRenamedPropertyState state=new CompatibleRenamedPropertyState(handler,element,""String_Node_Str"");
    state.setName(ReportDesign.CHEAT_SHEET_PROP);
    return state;
  }
  if (jmpDefn != null && (FilterCondition.OPERATOR_MEMBER.equalsIgnoreCase(jmpDefn.getName()) || MapRule.OPERATOR_MEMBER.equalsIgnoreCase(jmpDefn.getName()))) {
    CompatibleOperatorState state=new CompatibleOperatorState(handler,element,propDefn,struct);
    state.setName(name);
    return state;
  }
  if ((jmpDefn != null) && (jmpDefn.getStructDefn() != null)) {
    if (DateTimeFormatValue.FORMAT_VALUE_STRUCT.equalsIgnoreCase(jmpDefn.getStructDefn().getName()) || NumberFormatValue.FORMAT_VALUE_STRUCT.equalsIgnoreCase(jmpDefn.getStructDefn().getName()) || StringFormatValue.FORMAT_VALUE_STRUCT.equalsIgnoreCase(jmpDefn.getStructDefn().getName())|| ParameterFormatValue.FORMAT_VALUE_STRUCT.equalsIgnoreCase(jmpDefn.getStructDefn().getName())) {
      CompatibleFormatPropertyState state=new CompatibleFormatPropertyState(handler,element,propDefn,struct);
      state.setName(name);
      state.createStructure();
      return state;
    }
  }
  if (ReportDesignConstants.GRAPHIC_MASTER_PAGE_ELEMENT.equalsIgnoreCase(element.getDefn().getName()) && (name.equalsIgnoreCase(""String_Node_Str"") || name.equalsIgnoreCase(""String_Node_Str"")))   return new CompatibleIgnorePropertyState(handler,element);
  if ((element instanceof ListingElement || element instanceof GroupElement)) {
    if (IListingElementModel.PAGE_BREAK_INTERVAL_PROP.equalsIgnoreCase(name))     return new CompatibleIgnorePropertyState(handler,element);
    if (name.equalsIgnoreCase(""String_Node_Str"") || name.equalsIgnoreCase(""String_Node_Str""))     return new CompatibleIgnorePropertyState(handler,element);
    if (""String_Node_Str"".equalsIgnoreCase(name) && !(element instanceof TableItem))     return new CompatibleIgnorePropertyState(handler,element);
    if (""String_Node_Str"".equalsIgnoreCase(name))     return new CompatibleOnRowPropertyState(handler,element);
  }
  if (element instanceof GroupElement) {
    if (""String_Node_Str"".equalsIgnoreCase(name) || ""String_Node_Str"".equalsIgnoreCase(name))     return new CompatibleIgnorePropertyState(handler,element);
  }
  if (element instanceof TableRow)   if (IStyleModel.PAGE_BREAK_BEFORE_PROP.equalsIgnoreCase(name) || IStyleModel.PAGE_BREAK_AFTER_PROP.equalsIgnoreCase(name) || IStyleModel.PAGE_BREAK_INSIDE_PROP.equalsIgnoreCase(name)) {
    CompatiblePageBreakPropState state=new CompatiblePageBreakPropState(handler,element);
    state.setName(name);
    return state;
  }
  if ((ICellModel.ON_CREATE_METHOD.equalsIgnoreCase(name) || ITableRowModel.ON_CREATE_METHOD.equalsIgnoreCase(name) || IReportItemModel.ON_CREATE_METHOD.equalsIgnoreCase(name)) && StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) {
    CompatibleMiscExpressionState state=new CompatibleMiscExpressionState(handler,element);
    state.setName(name);
    return state;
  }
  return super.jumpTo();
}","public AbstractParseState jumpTo(){
  if (!valid)   return new AnyElementState(getHandler());
  IPropertyDefn jmpDefn=null;
  if (struct != null)   jmpDefn=struct.getDefn().getMember(name);
 else   jmpDefn=element.getPropertyDefn(name);
  if (element instanceof ListGroup && ListGroup.GROUP_START_PROP.equalsIgnoreCase(name)) {
    CompatibleRenamedPropertyState state=new CompatibleRenamedPropertyState(handler,element,ListGroup.GROUP_START_PROP);
    state.setName(ListGroup.INTERVAL_BASE_PROP);
    return state;
  }
  if (element instanceof ReportDesign && ""String_Node_Str"".equalsIgnoreCase(name)) {
    CompatibleRenamedPropertyState state=new CompatibleRenamedPropertyState(handler,element,""String_Node_Str"");
    state.setName(ReportDesign.CHEAT_SHEET_PROP);
    return state;
  }
  if (jmpDefn != null && (FilterCondition.OPERATOR_MEMBER.equalsIgnoreCase(jmpDefn.getName()) || MapRule.OPERATOR_MEMBER.equalsIgnoreCase(jmpDefn.getName()))) {
    CompatibleOperatorState state=new CompatibleOperatorState(handler,element,propDefn,struct);
    state.setName(name);
    return state;
  }
  if ((jmpDefn != null) && (jmpDefn.getStructDefn() != null)) {
    if (DateTimeFormatValue.FORMAT_VALUE_STRUCT.equalsIgnoreCase(jmpDefn.getStructDefn().getName()) || NumberFormatValue.FORMAT_VALUE_STRUCT.equalsIgnoreCase(jmpDefn.getStructDefn().getName()) || StringFormatValue.FORMAT_VALUE_STRUCT.equalsIgnoreCase(jmpDefn.getStructDefn().getName())|| ParameterFormatValue.FORMAT_VALUE_STRUCT.equalsIgnoreCase(jmpDefn.getStructDefn().getName())) {
      CompatibleFormatPropertyState state=new CompatibleFormatPropertyState(handler,element,propDefn,struct);
      state.setName(name);
      state.createStructure();
      return state;
    }
  }
  if (ReportDesignConstants.GRAPHIC_MASTER_PAGE_ELEMENT.equalsIgnoreCase(element.getDefn().getName()) && (name.equalsIgnoreCase(""String_Node_Str"") || name.equalsIgnoreCase(""String_Node_Str"")))   return new CompatibleIgnorePropertyState(handler,element);
  if ((element instanceof ListingElement || element instanceof GroupElement)) {
    if (IListingElementModel.PAGE_BREAK_INTERVAL_PROP.equalsIgnoreCase(name))     return new CompatibleIgnorePropertyState(handler,element);
    if (name.equalsIgnoreCase(""String_Node_Str"") || name.equalsIgnoreCase(""String_Node_Str""))     return new CompatibleIgnorePropertyState(handler,element);
    if (""String_Node_Str"".equalsIgnoreCase(name) && !(element instanceof TableItem))     return new CompatibleIgnorePropertyState(handler,element);
    if (""String_Node_Str"".equalsIgnoreCase(name))     return new CompatibleOnRowPropertyState(handler,element);
  }
  if (element instanceof GroupElement) {
    if (""String_Node_Str"".equalsIgnoreCase(name) || ""String_Node_Str"".equalsIgnoreCase(name))     return new CompatibleIgnorePropertyState(handler,element);
  }
  if (IStyleModel.PAGE_BREAK_BEFORE_PROP.equalsIgnoreCase(name) || IStyleModel.PAGE_BREAK_AFTER_PROP.equalsIgnoreCase(name) || IStyleModel.PAGE_BREAK_INSIDE_PROP.equalsIgnoreCase(name)) {
    CompatiblePageBreakPropState state=new CompatiblePageBreakPropState(handler,element);
    state.setName(name);
    return state;
  }
  if ((ICellModel.ON_CREATE_METHOD.equalsIgnoreCase(name) || ITableRowModel.ON_CREATE_METHOD.equalsIgnoreCase(name) || IReportItemModel.ON_CREATE_METHOD.equalsIgnoreCase(name)) && StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) {
    CompatibleMiscExpressionState state=new CompatibleMiscExpressionState(handler,element);
    state.setName(name);
    return state;
  }
  return super.jumpTo();
}",0.995135510771369
78241,"protected void performPostTasks(Stack transStack){
  if (!isOutermostFilterTrans())   return;
  List tasks=ModelUtil.filterLayoutTasks(getPostTasks());
  for (int i=0; i < tasks.size(); i++) {
    RecordTask subTask=(RecordTask)tasks.get(i);
    subTask.doTask(this,transStack);
  }
  super.performPostTasks(transStack);
}","protected void performPostTasks(Stack transStack){
  if (!isOutermostFilterTrans())   return;
  List tasks=ModelUtil.filterLayoutTasks(getPostTasks());
  for (int i=0; i < tasks.size(); i++) {
    RecordTask subTask=(RecordTask)tasks.get(i);
    subTask.doTask(this,transStack);
  }
}",0.9372937293729372
78242,"/** 
 * Reloads the library with the given file path. After reloading, acticity stack is cleared.
 * @param location the URL file path of the library file.
 * @throws DesignFileException if the file does no exist.
 * @throws SemanticException if the library is not included in the current module.
 */
public void reloadLibrary(String location) throws DesignFileException, SemanticException {
  Library library=module.getLibraryByLocation(location);
  if (!module.getLibraries().contains(library)) {
    throw new LibraryException(library,new String[]{library == null ? null : library.getNamespace()},LibraryException.DESIGN_EXCEPTION_LIBRARY_NOT_FOUND);
  }
  String namespace=library.getNamespace();
  IncludedLibrary includedItem=module.findIncludedLibrary(namespace);
  String path=includedItem.getFileName();
  URL url=module.findResource(path,IResourceLocator.LIBRARY);
  if (url == null) {
    DesignParserException ex=new DesignParserException(new String[]{path},DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND);
    List exceptionList=new ArrayList();
    exceptionList.add(ex);
    throw new DesignFileException(path,exceptionList);
  }
  Map overriddenValues=null;
  ActivityStack activityStack=getActivityStack();
  activityStack.startFilterEventTrans(null);
  try {
    overriddenValues=dealAllElementDecendents(library,RELOAD_ACTION);
    doDropLibrary(library);
    doAddLibrary(path,namespace,RELOAD_ACTION,overriddenValues);
  }
 catch (  SemanticException e) {
    activityStack.rollback();
    throw e;
  }
catch (  DesignFileException e) {
    activityStack.rollback();
    throw e;
  }
  activityStack.commit();
  activityStack.flush();
  LibraryEvent event=new LibraryEvent(module.getLibraryByLocation(location),LibraryEvent.RELOAD);
  module.broadcast(event);
}","/** 
 * Reloads the library with the given file path. After reloading, acticity stack is cleared.
 * @param location the URL file path of the library file.
 * @throws DesignFileException if the file does no exist.
 * @throws SemanticException if the library is not included in the current module.
 */
public void reloadLibrary(String location) throws DesignFileException, SemanticException {
  Library library=module.getLibraryByLocation(location);
  if (!module.getLibraries().contains(library)) {
    throw new LibraryException(library,new String[]{library == null ? null : library.getNamespace()},LibraryException.DESIGN_EXCEPTION_LIBRARY_NOT_FOUND);
  }
  String namespace=library.getNamespace();
  IncludedLibrary includedItem=module.findIncludedLibrary(namespace);
  String path=includedItem.getFileName();
  URL url=module.findResource(path,IResourceLocator.LIBRARY);
  if (url == null) {
    DesignParserException ex=new DesignParserException(new String[]{path},DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND);
    List exceptionList=new ArrayList();
    exceptionList.add(ex);
    throw new DesignFileException(path,exceptionList);
  }
  Map overriddenValues=null;
  ActivityStack activityStack=getActivityStack();
  activityStack.startSilentTrans();
  try {
    overriddenValues=dealAllElementDecendents(library,RELOAD_ACTION);
    doDropLibrary(library);
    doAddLibrary(path,namespace,RELOAD_ACTION,overriddenValues);
  }
 catch (  SemanticException e) {
    activityStack.rollback();
    throw e;
  }
catch (  DesignFileException e) {
    activityStack.rollback();
    throw e;
  }
  activityStack.commit();
  activityStack.flush();
  LibraryEvent event=new LibraryEvent(module.getLibraryByLocation(location),LibraryEvent.RELOAD);
  module.broadcast(event);
}",0.9957971420565984
78243,"/** 
 * Recursively collect all the descendents of the given element.
 * @param element a given element.
 * @param results the result list containing all the childs.
 */
private void getAllDescdents(DesignElement element,List results){
  List descends=element.getDerived();
  results.addAll(descends);
  for (int i=0; i < descends.size(); i++) {
    getAllDescdents((DesignElement)descends.get(i),results);
  }
}","/** 
 * Recursively collect all the descendents of the given element.
 * @param tmpElement a given element.
 * @param results the result list containing all the childs.
 */
private void getAllDescdents(DesignElement tmpElement,List results){
  List descends=tmpElement.getDerived();
  results.addAll(descends);
  for (int i=0; i < descends.size(); i++) {
    getAllDescdents((DesignElement)descends.get(i),results);
  }
}",0.9819927971188476
78244,"/** 
 * Scatters overridden values to virtual elements in the given design element.
 * @param element the design element
 * @param overriddenValues a map containing overridden values of virtual element. The key is the base id of virtual element. The value is a list containing property name/value pair.
 */
public static void distributeValues(DesignElement element,Map overriddenValues){
  ContentIterator contentIterator=new ContentIterator(element);
  while (contentIterator.hasNext()) {
    DesignElement content=(DesignElement)contentIterator.next();
    Long baseId=new Long(content.getID());
    List values=(List)overriddenValues.get(baseId);
    if (values == null || values.isEmpty())     continue;
    for (int i=0; i < values.size(); i++) {
      Property prop=(Property)values.get(i);
      if (StyledElement.STYLE_PROP.equals(prop.getName()))       ((StyledElement)content).setStyleName((String)prop.getValue());
 else       content.setProperty(prop.getName(),prop.getValue());
    }
  }
}","/** 
 * Scatters overridden values to virtual elements in the given design element.
 * @param element the design element
 * @param overriddenValues a map containing overridden values of virtual element. The key is the base id of virtual element. The value is a list containing property name/value pair.
 */
public static void distributeValues(DesignElement element,Map overriddenValues){
  if (element == null)   return;
  ContentIterator contentIterator=new ContentIterator(element);
  while (contentIterator.hasNext()) {
    DesignElement content=(DesignElement)contentIterator.next();
    Long baseId=new Long(content.getID());
    if (overriddenValues == null || overriddenValues.isEmpty())     continue;
    List values=(List)overriddenValues.get(baseId);
    if (values == null || values.isEmpty())     continue;
    for (int i=0; i < values.size(); i++) {
      Property prop=(Property)values.get(i);
      if (StyledElement.STYLE_PROP.equals(prop.getName()))       ((StyledElement)content).setStyleName((String)prop.getValue());
 else       content.setProperty(prop.getName(),prop.getValue());
    }
  }
}",0.947517730496454
78245,"protected List getModelChildren(){
  return HandleAdapterFactory.getInstance().getReportDesignHandleAdapter().getChildren();
}","protected List getModelChildren(){
  return HandleAdapterFactory.getInstance().getReportDesignHandleAdapter(getModel()).getChildren();
}",0.9618320610687024
78246,"/** 
 * @param inputStream
 * @return
 * @throws IOException
 */
private static int getSeperator(InputStream inputStream) throws IOException {
  byte[] bytes=new byte[4];
  int len=inputStream.read(bytes);
  if (len == -1)   return RDSave.endSeparator;
 else   if (len < 4)   throw new IOException(""String_Node_Str"");
  return IOUtil.getInt(bytes);
}","/** 
 * @param inputStream
 * @return
 * @throws IOException
 */
private static int getSeperator(InputStream inputStream) throws IOException {
  byte[] bytes=new byte[4];
  int len=inputStream.read(bytes);
  if (len == -1)   return RDSave.endSeparator;
 else   if (len < 4) {
    for (int i=len; i < 4; i++) {
      bytes[i]=(byte)inputStream.read();
      if (bytes[i] == -1)       throw new IOException(""String_Node_Str"");
    }
  }
  return IOUtil.getInt(bytes);
}",0.8567931456548348
78247,"public Template(String reportPath) throws DesignFileException {
  ReportDesignHandle reportDesign=(ReportDesignHandle)files.get(reportPath);
  if (reportDesign == null) {
    reportDesign=SessionHandleAdapter.getInstance().getSessionHandle().openDesign(reportPath);
    files.put(reportPath,reportDesign);
  }
  name=reportDesign.getDisplayName() == null ? UIUtil.getSimpleFileName(reportDesign.getFileName()) : reportDesign.getDisplayName();
  templateDescription=reportDesign.getStringProperty(ModuleHandle.DESCRIPTION_PROP);
  if (templateDescription == null) {
    templateDescription=""String_Node_Str"";
  }
  picturePath=reportDesign.getIconFile() == null ? ""String_Node_Str"" : reportDesign.getIconFile();
  cheatSheetId=reportDesign.getCheetSheet() == null ? ""String_Node_Str"" : reportDesign.getCheetSheet();
  this.reportPath=reportPath;
}","public Template(String reportPath) throws DesignFileException {
  ReportDesignHandle reportDesign=(ReportDesignHandle)files.get(reportPath);
  if (reportDesign == null) {
    reportDesign=SessionHandleAdapter.getInstance().getSessionHandle().openDesign(reportPath);
    files.put(reportPath,reportDesign);
  }
  name=reportDesign.getDisplayName() == null ? UIUtil.getSimpleFileName(reportDesign.getFileName()) : reportDesign.getDisplayName();
  templateDescription=reportDesign.getStringProperty(ModuleHandle.DESCRIPTION_PROP);
  if (templateDescription == null) {
    templateDescription=""String_Node_Str"";
  }
  picturePath=reportDesign.getIconFile() == null ? ""String_Node_Str"" : reportDesign.getIconFile();
  cheatSheetId=reportDesign.getCheatSheet() == null ? ""String_Node_Str"" : reportDesign.getCheatSheet();
  this.reportPath=reportPath;
}",0.9976359338061466
78248,"public static int toDteDataType(String modelDataType){
}","public static int toDteDataType(String modelDataType){
  if (modelDataType == null)   return DataType.UNKNOWN_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY))   return DataType.ANY_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER))   return DataType.INTEGER_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING))   return DataType.STRING_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME))   return DataType.DATE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL))   return DataType.DECIMAL_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT))   return DataType.DOUBLE_TYPE;
  return DataType.UNKNOWN_TYPE;
}",0.1336515513126491
78249,"/** 
 * Returns the defined width in model in Pixel.
 * @return
 */
public String getDefinedWidth(){
  DimensionHandle handle=((ReportItemHandle)getHandle()).getWidth();
  if (handle.getUnits() == null || handle.getUnits().length() == 0) {
    return null;
  }
 else   if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(handle.getUnits())) {
    return handle.getMeasure() + DesignChoiceConstants.UNITS_PERCENTAGE;
  }
 else {
    int px=(int)DEUtil.convertoToPixel(handle);
    if (px <= 0) {
      return null;
    }
    return String.valueOf(px);
  }
}","/** 
 * Returns the defined width in model in Pixel.
 * @return
 */
public String getDefinedWidth(){
  DimensionHandle handle=((ReportItemHandle)getHandle()).getWidth();
  if (handle.getUnits() == null || handle.getUnits().length() == 0) {
    return DEFAULT_WIDTH;
  }
 else   if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(handle.getUnits())) {
    return handle.getMeasure() + DesignChoiceConstants.UNITS_PERCENTAGE;
  }
 else {
    int px=(int)DEUtil.convertoToPixel(handle);
    if (px <= 0) {
      return null;
    }
    return String.valueOf(px);
  }
}",0.9847806624888094
78250,"public AbstractParseState jumpTo(){
  if ((StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) && Action.URI_MEMBER.equalsIgnoreCase(name)) {
    CompatibleURIState state=new CompatibleURIState(handler,element);
    state.setName(name);
    state.struct=struct;
    state.propDefn=propDefn;
    return state;
  }
  return null;
}","public AbstractParseState jumpTo(){
  if ((StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) && (Action.URI_MEMBER.equalsIgnoreCase(name) || Action.TARGET_BOOKMARK_MEMBER.equalsIgnoreCase(name))) {
    CompatibleURIState state=new CompatibleURIState(handler,element);
    state.setName(name);
    state.struct=struct;
    state.propDefn=propDefn;
    return state;
  }
  return null;
}",0.9230769230769232
78251,"/** 
 * Constructs the design parse state with the design file parser handler. This constructor is used when this list property to parse is a property of one element.
 * @param theHandler the design file parser handler
 * @param element the element which holds this property
 */
CompatibleBoundColumnState(ModuleParserHandler theHandler,DesignElement element){
}","/** 
 * Constructs the design parse state with the design file parser handler. This constructor is used when this list property to parse is a property of one element.
 * @param theHandler the design file parser handler
 * @param element the element which holds this property
 */
CompatibleBoundColumnState(ModuleParserHandler theHandler,DesignElement element){
  super(theHandler,element);
}",0.9614873837981408
78252,"protected int invokeDataBinding(){
  BindingColumnDialog page=new BindingColumnDialog(false);
  page.setInput(itemHandle);
  return page.open();
}","protected int invokeDataBinding(){
  ColumnBindingDialog page=new ColumnBindingDialog(false);
  page.setInput(itemHandle);
  return page.open();
}",0.9178082191780822
78253,"/** 
 * Evaluate non-compiled expression
 * @param dataExpr
 * @param scope
 * @return value of dataExpr
 * @throws BirtException
 */
public static Object evaluateRawExpression(IBaseExpression dataExpr,Scriptable scope) throws BirtException {
}","/** 
 * Evaluate non-compiled expression
 * @param dataExpr
 * @param scope
 * @return the value of raw data type, Java or Java Script
 * @throws BirtException
 */
public static Object evaluateRawExpression(IBaseExpression dataExpr,Scriptable scope) throws BirtException {
  return doEvaluateRawExpression(dataExpr,scope,false);
}",0.8222996515679443
78254,"public Object evaluate(IBaseExpression expr) throws BirtException {
  return ExprEvaluateUtil.evaluateRawExpression(expr,scope);
}","public Object evaluate(IBaseExpression expr) throws BirtException {
  return ExprEvaluateUtil.evaluateRawExpression2(expr,scope);
}",0.9961685823754788
78255,"/** 
 * Does backward compatiblility work for the extended item from BIRT 2.1M5 to BIRT 2.1.0.
 * @param jsExprs the expression from the extended item.
 * @return a map containing updated expressions.
 */
private Map handleJavaExpression(List jsExprs){
  List columns=new ArrayList();
  Map retMap=new HashMap();
  for (int i=0; i < jsExprs.size(); i++) {
    String jsExpr=(String)jsExprs.get(i);
    IColumnBinding boundColumn=ExpressionUtil.getColumnBinding(jsExpr);
    if (boundColumn == null)     continue;
    if (!columns.contains(boundColumn))     columns.add(boundColumn);
    retMap.put(jsExpr,ExpressionUtil.createRowExpression(boundColumn.getResultSetColumnName()));
  }
  DataBoundColumnUtil.setupBoundDataColumns(element,columns,handler.getModule());
  return retMap;
}","/** 
 * Does backward compatiblility work for the extended item from BIRT 2.1M5 to BIRT 2.1.0.
 * @param jsExprs the expression from the extended item.
 * @return a map containing updated expressions.
 */
private Map handleJavaExpression(List jsExprs){
  List columns=new ArrayList();
  Map retMap=new HashMap();
  List boundColumns=(List)element.getLocalProperty(handler.getModule(),ReportItem.BOUND_DATA_COLUMNS_PROP);
  for (int i=0; i < jsExprs.size(); i++) {
    String jsExpr=(String)jsExprs.get(i);
    IColumnBinding boundColumn=ExpressionUtil.getColumnBinding(jsExpr);
    if (boundColumn == null)     continue;
    String columnName=DataBoundColumnUtil.getColumnName(boundColumns,boundColumn.getBoundExpression());
    if (!columns.contains(boundColumn) && columnName == null)     columns.add(boundColumn);
    if (columnName == null)     columnName=boundColumn.getResultSetColumnName();
    retMap.put(jsExpr,ExpressionUtil.createRowExpression(columnName));
  }
  DataBoundColumnUtil.setupBoundDataColumns(element,columns,handler.getModule());
  return retMap;
}",0.8152934841141626
78256,"private Object getResultSetColumn(String name){
  if (models == null)   return null;
  for (int i=0; i < models.length; i++) {
    DataSetItemModel model=models[i];
    if (model.getDisplayName().equals(name))     return model;
  }
  return null;
}","private Object getResultSetColumn(String name){
  if (columnList.isEmpty()) {
    return null;
  }
  for (int i=0; i < columnList.size(); i++) {
    ComputedColumnHandle column=(ComputedColumnHandle)columnList.get(i);
    if (column.getName().equals(name)) {
      return column;
    }
  }
  return null;
}",0.483754512635379
78257,"/** 
 * Gets all columns in a dataSet.
 * @param handle ReportItem object
 * @return Columns array.
 */
private String[] getDataSetColumns(ReportItemHandle handle){
  DataSetHandle dataSet=handle.getDataSet();
  if (dataSet == null)   return EMPTY;
  models=DataSetManager.getCurrentInstance().getColumns(dataSet,false);
  if (models == null)   return EMPTY;
  String[] values=new String[models.length];
  for (int i=0; i < models.length; i++) {
    values[i]=models[i].getDisplayName();
  }
  return values;
}","/** 
 * Gets all columns in a dataSet.
 * @param handle ReportItem object
 * @return Columns array.
 */
private String[] getDataSetColumns(DesignElementHandle handle){
  columnList=DEUtil.getVisiableColumnBindingsList(handle);
  if (columnList.isEmpty()) {
    return EMPTY;
  }
  String[] values=new String[columnList.size()];
  for (int i=0; i < columnList.size(); i++) {
    values[i]=((ComputedColumnHandle)columnList.get(i)).getName();
  }
  return values;
}",0.5529290853031861
78258,"/** 
 * Gets the choice set of one property
 * @param item ReportItem object
 * @param key Property key
 * @return Choice set
 */
public String[] getChoiceSet(Object item,String key){
  if (key.equals(FilterCondition.OPERATOR_MEMBER)) {
    choiceSet=ChoiceSetFactory.getStructChoiceSet(FilterCondition.FILTER_COND_STRUCT,key);
    return ChoiceSetFactory.getDisplayNamefromChoiceSet(choiceSet);
  }
  if (item instanceof GroupHandle) {
    item=((GroupHandle)item).getContainer();
  }
  if (!(item instanceof ReportItemHandle))   return EMPTY;
  return getDataSetColumns((ReportItemHandle)item);
}","/** 
 * Gets the choice set of one property
 * @param item ReportItem object
 * @param key Property key
 * @return Choice set
 */
public String[] getChoiceSet(Object item,String key){
  if (key.equals(FilterCondition.OPERATOR_MEMBER)) {
    choiceSet=ChoiceSetFactory.getStructChoiceSet(FilterCondition.FILTER_COND_STRUCT,key);
    return ChoiceSetFactory.getDisplayNamefromChoiceSet(choiceSet);
  }
  if (!(item instanceof DesignElementHandle)) {
    return EMPTY;
  }
  return getDataSetColumns((DesignElementHandle)item);
}",0.8772241992882562
78259,"private Object getResultSetColumn(String name){
  if (models == null)   return null;
  for (int i=0; i < models.length; i++) {
    DataSetItemModel model=models[i];
    if (model.getDisplayName().equals(name))     return model;
  }
  return null;
}","private Object getResultSetColumn(String name){
  if (columnList.isEmpty()) {
    return null;
  }
  for (int i=0; i < columnList.size(); i++) {
    ComputedColumnHandle column=(ComputedColumnHandle)columnList.get(i);
    if (column.getName().equals(name)) {
      return column;
    }
  }
  return null;
}",0.483754512635379
78260,"/** 
 * Gets all columns in a dataSet.
 * @param item ReportItem object
 * @return Columns array.
 */
private String[] getDataSetColumns(ReportItemHandle handle){
  DataSetHandle dataSet=handle.getDataSet();
  if (dataSet == null)   return EMPTY;
  models=DataSetManager.getCurrentInstance().getColumns(dataSet,false);
  if (models == null)   return EMPTY;
  String[] values=new String[models.length];
  for (int i=0; i < models.length; i++) {
    values[i]=models[i].getDisplayName();
  }
  return values;
}","/** 
 * Gets all columns in a dataSet.
 * @param item ReportItem object
 * @return Columns array.
 */
private String[] getDataSetColumns(DesignElementHandle handle){
  columnList=DEUtil.getVisiableColumnBindingsList(handle);
  if (columnList.isEmpty()) {
    return EMPTY;
  }
  String[] values=new String[columnList.size()];
  for (int i=0; i < columnList.size(); i++) {
    values[i]=((ComputedColumnHandle)columnList.get(i)).getName();
  }
  return values;
}",0.5510835913312694
78261,"/** 
 * Gets the choice set of one property
 * @param item ReportItem object
 * @param key Property key
 * @return Choice set
 */
public String[] getChoiceSet(Object item,String key){
  if (key.equals(SortKey.DIRECTION_MEMBER)) {
    choiceSet=ChoiceSetFactory.getStructChoiceSet(SortKey.SORT_STRUCT,key);
    return ChoiceSetFactory.getDisplayNamefromChoiceSet(choiceSet);
  }
  if (item instanceof GroupHandle) {
    item=((GroupHandle)item).getContainer();
  }
  if (!(item instanceof ReportItemHandle)) {
    return EMPTY;
  }
  return getDataSetColumns((ReportItemHandle)item);
}","/** 
 * Gets the choice set of one property
 * @param item ReportItem object
 * @param key Property key
 * @return Choice set
 */
public String[] getChoiceSet(Object item,String key){
  if (key.equals(SortKey.DIRECTION_MEMBER)) {
    choiceSet=ChoiceSetFactory.getStructChoiceSet(SortKey.SORT_STRUCT,key);
    return ChoiceSetFactory.getDisplayNamefromChoiceSet(choiceSet);
  }
  if (!(item instanceof DesignElementHandle)) {
    return EMPTY;
  }
  return getDataSetColumns((DesignElementHandle)item);
}",0.875
78262,"protected static TableHandle performInsertDataSet(DataSetHandle model) throws SemanticException {
  CachedMetaDataHandle cachedMetadata=DataSetUIUtil.getCachedMetaDataHandle(model);
  List columList=new ArrayList();
  for (Iterator iter=cachedMetadata.getResultSet().iterator(); iter.hasNext(); ) {
    ResultSetColumnHandle element=(ResultSetColumnHandle)iter.next();
    columList.add(element);
  }
  ResultSetColumnHandle[] columns=(ResultSetColumnHandle[])columList.toArray(new ResultSetColumnHandle[columList.size()]);
  TableHandle tableHandle=DesignElementFactory.getInstance().newTableItem(null,columns.length);
  setInitWidth(tableHandle);
  insertToCell(tableHandle,tableHandle.getHeader(),columns,true);
  insertToCell(tableHandle,tableHandle.getDetail(),columns,false);
  tableHandle.setDataSet(model);
  return tableHandle;
}","protected static TableHandle performInsertDataSet(DataSetHandle model) throws SemanticException {
  CachedMetaDataHandle cachedMetadata=DataSetUIUtil.getCachedMetaDataHandle(model);
  List columList=new ArrayList();
  for (Iterator iter=cachedMetadata.getResultSet().iterator(); iter.hasNext(); ) {
    ResultSetColumnHandle element=(ResultSetColumnHandle)iter.next();
    columList.add(element);
  }
  ResultSetColumnHandle[] columns=(ResultSetColumnHandle[])columList.toArray(new ResultSetColumnHandle[columList.size()]);
  TableHandle tableHandle=DesignElementFactory.getInstance().newTableItem(null,columns.length);
  setInitWidth(tableHandle);
  insertToCell(model,tableHandle,tableHandle.getHeader(),columns,true);
  insertToCell(model,tableHandle,tableHandle.getDetail(),columns,false);
  tableHandle.setDataSet(model);
  return tableHandle;
}",0.9798578199052131
78263,"/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DataItemHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  dataHandle.setResultSetColumn(model.getColumnName());
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    if (!DEUtil.getDataSetList(container).contains(dataSet)) {
      if (container.getDataSet() == null) {
        container.setDataSet(dataSet);
      }
    }
    GroupHandle groupHandle=getGroupHandle(target);
    if (groupHandle != null) {
      ComputedColumn bindingColumn=StructureFactory.newComputedColumn(groupHandle,model.getColumnName());
      bindingColumn.setDataType(model.getDataType());
      bindingColumn.setExpression(DEUtil.getExpression(model));
      groupHandle.addColumnBinding(bindingColumn,false);
    }
 else {
      ComputedColumn bindingColumn=StructureFactory.newComputedColumn(container,model.getColumnName());
      bindingColumn.setDataType(model.getDataType());
      bindingColumn.setExpression(DEUtil.getExpression(model));
      container.addColumnBinding(bindingColumn,false);
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    bindingColumn.setExpression(DEUtil.getExpression(model));
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(model.getColumnName());
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}","/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DataItemHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  dataHandle.setResultSetColumn(model.getColumnName());
  boolean bindingExist=false;
  if (targetParent instanceof ReportItemHandle) {
    ComputedColumn bindingColumn=StructureFactory.createComputedColumn();
    bindingColumn.setName(model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    bindingColumn.setExpression(DEUtil.getExpression(model));
    ReportItemHandle container=(ReportItemHandle)targetParent;
    GroupHandle groupHandle=getGroupHandle(target);
    if (groupHandle != null) {
      for (Iterator iter=groupHandle.getColumnBindings().iterator(); iter.hasNext(); ) {
        ComputedColumnHandle element=(ComputedColumnHandle)iter.next();
        if (element.getStructure().equals(bindingColumn)) {
          bindingExist=true;
          break;
        }
      }
    }
 else {
      for (Iterator iter=container.getColumnBindings().iterator(); iter.hasNext(); ) {
        ComputedColumnHandle element=(ComputedColumnHandle)iter.next();
        if (element.getStructure().equals(bindingColumn)) {
          bindingExist=true;
          break;
        }
      }
    }
  }
  if (!bindingExist) {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    bindingColumn.setExpression(DEUtil.getExpression(model));
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(model.getColumnName());
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}",0.6238373350638113
78264,"protected static void insertToCell(TableHandle tableHandle,SlotHandle slot,ResultSetColumnHandle[] columns,boolean isLabel){
  for (int i=0; i < slot.getCount(); i++) {
    SlotHandle cells=((RowHandle)slot.get(i)).getCells();
    for (int j=0; j < cells.getCount(); j++) {
      CellHandle cell=(CellHandle)cells.get(j);
      try {
        if (isLabel) {
          LabelHandle labelItemHandle=SessionHandleAdapter.getInstance().getReportDesignHandle().getElementFactory().newLabel(null);
          labelItemHandle.setText(columns[j].getColumnName());
          cell.addElement(labelItemHandle,cells.getSlotID());
        }
 else {
          DataItemHandle dataHandle=SessionHandleAdapter.getInstance().getReportDesignHandle().getElementFactory().newDataItem(null);
          dataHandle.setResultSetColumn(columns[j].getColumnName());
          cell.addElement(dataHandle,cells.getSlotID());
          ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,columns[j].getColumnName());
          bindingColumn.setDataType(columns[j].getDataType());
          bindingColumn.setExpression(DEUtil.getExpression(columns[j]));
          tableHandle.addColumnBinding(bindingColumn,false);
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
}","protected static void insertToCell(DataSetHandle model,TableHandle tableHandle,SlotHandle slot,ResultSetColumnHandle[] columns,boolean isLabel){
  for (int i=0; i < slot.getCount(); i++) {
    SlotHandle cells=((RowHandle)slot.get(i)).getCells();
    for (int j=0; j < cells.getCount(); j++) {
      CellHandle cell=(CellHandle)cells.get(j);
      try {
        if (isLabel) {
          LabelHandle labelItemHandle=SessionHandleAdapter.getInstance().getReportDesignHandle().getElementFactory().newLabel(null);
          if (columns[j].getColumnName() != null) {
            boolean hasDisplayName=false;
            for (Iterator iter=model.columnHintsIterator(); iter.hasNext(); ) {
              ColumnHintHandle hint=(ColumnHintHandle)iter.next();
              if (columns[j].getColumnName().equals(hint.getColumnName())) {
                labelItemHandle.setText(hint.getDisplayName());
                hasDisplayName=true;
                break;
              }
            }
            if (!hasDisplayName) {
              labelItemHandle.setText(columns[j].getColumnName());
            }
          }
          cell.addElement(labelItemHandle,cells.getSlotID());
        }
 else {
          DataItemHandle dataHandle=SessionHandleAdapter.getInstance().getReportDesignHandle().getElementFactory().newDataItem(null);
          dataHandle.setResultSetColumn(columns[j].getColumnName());
          cell.addElement(dataHandle,cells.getSlotID());
          ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,columns[j].getColumnName());
          bindingColumn.setDataType(columns[j].getDataType());
          bindingColumn.setExpression(DEUtil.getExpression(columns[j]));
          tableHandle.addColumnBinding(bindingColumn,false);
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
}",0.5733207190160833
78265,"public BindingExpressionProvider(DesignElementHandle handle){
  super(handle);
  if (handle instanceof ReportItemHandle) {
    dataSetHandle=((ReportItemHandle)handle).getDataSet();
  }
}","public BindingExpressionProvider(DesignElementHandle handle){
  super(handle);
  if (handle instanceof ReportItemHandle) {
    dataSetHandle=((ReportItemHandle)handle).getDataSet();
  }
 else   if (handle instanceof GroupHandle) {
    dataSetHandle=((ReportItemHandle)((GroupHandle)handle).getContainer()).getDataSet();
  }
}",0.73046875
78266,"/** 
 * compile aggregate expression
 * @param context
 * @param parent
 * @param callNode
 * @throws BirtException
 */
private void compileAggregateExpr(Node parent,Node callNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  assert(callNode.getType() == Token.CALL);
  extractArguments(callNode,tree,columnExprList);
}","/** 
 * compile aggregate expression
 * @param context
 * @param parent
 * @param callNode
 * @throws BirtException
 */
private void compileAggregateExpr(Node parent,Node callNode,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  assert(callNode.getType() == Token.CALL);
  compileAggregationFunction(callNode,tree,columnExprList);
  extractArguments(callNode,tree,columnExprList);
}",0.8780487804878049
78267,"public void setBookmark(String bookmark) throws EngineException {
  long pageNumber=reportDoc.getPageNumber(bookmark);
  if (pageNumber == 0) {
    throw new EngineException(""String_Node_Str"",bookmark);
  }
  innerRender=new PageRender(pageNumber);
}","public void setBookmark(String bookmark) throws EngineException {
  long pageNumber=reportDoc.getPageNumber(bookmark);
  if (pageNumber <= 0) {
    throw new EngineException(""String_Node_Str"",bookmark);
  }
  innerRender=new PageRender(pageNumber);
}",0.996
78268,"/** 
 * Returns the refresh rate when viewing the report.
 * @return the refresh rate
 */
public ThemeHandle getTheme(){
  Theme theme=getModule().getTheme();
  if (theme == null)   return null;
  return (ThemeHandle)theme.getHandle(getModule());
}","/** 
 * Returns the refresh rate when viewing the report.
 * @return the refresh rate
 */
public ThemeHandle getTheme(){
  Theme theme=getModule().getTheme(module);
  if (theme == null)   return null;
  return (ThemeHandle)theme.getHandle(theme.getRoot());
}",0.9446640316205532
78269,"/** 
 * @return
 */
private boolean basicCache(){
  if (dataSourceDesign == null || dataSetDesign == null)   return false;
  if (this.cacheOption == DISABLE) {
    return false;
  }
 else   if (this.cacheOption == ALWAYS) {
    if (this.alwaysCacheRowCount == 0)     return false;
  }
 else   if (dataSetDesign.getCacheRowCount() == 0) {
    return false;
  }
  return true;
}","/** 
 * @return
 */
private boolean basicCache(){
  if (dataSetDesign == null)   return false;
  if (this.cacheOption == DISABLE) {
    return false;
  }
 else   if (this.cacheOption == ALWAYS) {
    if (this.alwaysCacheRowCount == 0)     return false;
  }
 else   if (dataSetDesign.getCacheRowCount() == 0) {
    return false;
  }
  return true;
}",0.9613259668508288
78270,"/** 
 * Prepares a filter expression for top(n)/bottom(n) evaluation Each top(n)/bottom(n) expression is tagged with a NEvaluator handle TODO: this code is temporary
 * @param expr
 */
public static void prepareFilterExpression(IBaseExpression expr,FilterPassController filterPass) throws DataException {
  if (expr instanceof IConditionalExpression) {
    ConditionalExpression ce=(ConditionalExpression)expr;
    int operator=ce.getOperator();
    if (operator == IConditionalExpression.OP_TOP_N || operator == IConditionalExpression.OP_TOP_PERCENT || operator == IConditionalExpression.OP_BOTTOM_N || operator == IConditionalExpression.OP_BOTTOM_PERCENT) {
      Object handle=expr.getHandle();
      if (handle instanceof NEvaluator) {
        return;
      }
      NEvaluator evaluator=NEvaluator.newInstance(operator,ce.getExpression(),ce.getOperand1(),filterPass);
      expr.setHandle(evaluator);
    }
  }
}","/** 
 * Prepares a filter expression for top(n)/bottom(n) evaluation Each top(n)/bottom(n) expression is tagged with a NEvaluator handle TODO: this code is temporary
 * @param expr
 */
public static void prepareFilterExpression(IBaseExpression expr,FilterPassController filterPass,IExecutorHelper helper) throws DataException {
  if (expr instanceof IConditionalExpression) {
    ConditionalExpression ce=(ConditionalExpression)expr;
    int operator=ce.getOperator();
    if (operator == IConditionalExpression.OP_TOP_N || operator == IConditionalExpression.OP_TOP_PERCENT || operator == IConditionalExpression.OP_BOTTOM_N || operator == IConditionalExpression.OP_BOTTOM_PERCENT) {
      Object handle=expr.getHandle();
      if (handle instanceof NEvaluator) {
        return;
      }
      NEvaluator evaluator=NEvaluator.newInstance(operator,ce.getExpression(),ce.getOperand1(),filterPass,helper);
      expr.setHandle(evaluator);
    }
  }
}",0.9838882921589688
78271,"/** 
 * Evaluate a filter expression.
 * @param cx
 * @param filter
 * @return
 * @throws DataException
 */
private Object evaluteFilterExpression(Context cx,IFilterDefinition filter) throws DataException {
  IBaseExpression expr=filter.getExpression();
  FilterUtil.prepareFilterExpression(expr,filterPass);
  Object result=ScriptEvalUtil.evalExpr(expr,cx,this.groupProcessor.getExpressionProcessor().getScope(),""String_Node_Str"",0);
  if (result == null) {
    Object info=null;
    if (expr instanceof IScriptExpression)     info=((IScriptExpression)expr).getText();
 else     info=expr;
    throw new DataException(ResourceConstants.INVALID_EXPRESSION_IN_FILTER,info);
  }
  return result;
}","/** 
 * Evaluate a filter expression.
 * @param cx
 * @param filter
 * @return
 * @throws DataException
 */
private Object evaluteFilterExpression(Context cx,IFilterDefinition filter) throws DataException {
  IBaseExpression expr=filter.getExpression();
  FilterUtil.prepareFilterExpression(expr,filterPass,this.populator.getEventHandler().getExecutorHelper());
  Object result=ScriptEvalUtil.evalExpr(expr,cx,this.groupProcessor.getExpressionProcessor().getScope(),""String_Node_Str"",0);
  if (result == null) {
    Object info=null;
    if (expr instanceof IScriptExpression)     info=((IScriptExpression)expr).getText();
 else     info=expr;
    throw new DataException(ResourceConstants.INVALID_EXPRESSION_IN_FILTER,info);
  }
  return result;
}",0.9632709632709632
78272,"public void setDataSetMode(boolean isDataSetMode){
  this.helper.setDataSetMode(isDataSetMode);
}","public void setDataSetMode(boolean isDataSetMode){
  this.isDataSetMode=isDataSetMode;
  this.helper.setDataSetMode(isDataSetMode);
}",0.8434782608695652
78273,"/** 
 * @param resultSetMetaData
 * @param resultIterator
 * @param scope
 */
public ExpressionProcessor(IResultClass metaData,IResultIterator resultIterator,DataSetRuntime dataSet,BaseQuery query){
  helper=new ExpressionParseHelper(metaData,dataSet.getScriptScope());
  helper.setQuery(query);
  this.metaData=metaData;
  this.query=query;
  this.resultIterator=resultIterator;
  this.dataSet=dataSet;
}","/** 
 * @param resultSetMetaData
 * @param resultIterator
 * @param scope
 */
public ExpressionProcessor(IResultClass metaData,IResultIterator resultIterator,DataSetRuntime dataSet,BaseQuery query){
  helper=new ExpressionParseHelper(metaData,dataSet.getScriptScope());
  helper.setDataSetMode(this.isDataSetMode);
  helper.setQuery(query);
  this.metaData=metaData;
  this.query=query;
  this.resultIterator=resultIterator;
  this.dataSet=dataSet;
}",0.9473684210526316
78274,"public boolean process(IResultObject row,int rowIndex) throws DataException {
  logger.entering(FilterByRow.class.getName(),""String_Node_Str"");
  Context cx=Context.enter();
  try {
    boolean isAccepted=true;
    this.currentFilters=this.getFilterList(currentWorkingFilters);
    Iterator filterIt=currentFilters.iterator();
    dataSet.setRowObject(row,false);
    dataSet.setCurrentRowIndex(rowIndex);
    while (filterIt.hasNext()) {
      IFilterDefinition filter=(IFilterDefinition)filterIt.next();
      IBaseExpression expr=filter.getExpression();
      Object result=ScriptEvalUtil.evalExpr(expr,cx,dataSet.getScriptScope(),""String_Node_Str"",0);
      if (result == null) {
        Object info=null;
        if (expr instanceof IScriptExpression)         info=((IScriptExpression)expr).getText();
 else         info=expr;
        throw new DataException(ResourceConstants.INVALID_EXPRESSION_IN_FILTER,info);
      }
      try {
        if (DataTypeUtil.toBoolean(result).booleanValue() == false) {
          isAccepted=false;
          break;
        }
      }
 catch (      BirtException e) {
        DataException e1=new DataException(ResourceConstants.DATATYPEUTIL_ERROR,e);
        logger.logp(Level.FINE,FilterByRow.class.getName(),""String_Node_Str"",""String_Node_Str"",e1);
        throw e1;
      }
    }
    return isAccepted;
  }
  finally {
    Context.exit();
    logger.exiting(FilterByRow.class.getName(),""String_Node_Str"");
  }
}","public boolean process(IResultObject row,int rowIndex) throws DataException {
  logger.entering(FilterByRow.class.getName(),""String_Node_Str"");
  Context cx=Context.enter();
  try {
    boolean isAccepted=true;
    this.currentFilters=this.getFilterList(currentWorkingFilters);
    Iterator filterIt=currentFilters.iterator();
    dataSet.setRowObject(row,false);
    dataSet.setCurrentRowIndex(rowIndex);
    while (filterIt.hasNext()) {
      IFilterDefinition filter=(IFilterDefinition)filterIt.next();
      IBaseExpression expr=filter.getExpression();
      Object result=null;
      try {
        if (ModeManager.isNewMode() && helper != null)         result=helper.evaluate(expr);
 else         result=ScriptEvalUtil.evalExpr(expr,cx,dataSet.getScriptScope(),""String_Node_Str"",0);
      }
 catch (      BirtException e2) {
        throw new DataException(e2.getLocalizedMessage());
      }
      if (result == null) {
        Object info=null;
        if (expr instanceof IScriptExpression)         info=((IScriptExpression)expr).getText();
 else         info=expr;
        throw new DataException(ResourceConstants.INVALID_EXPRESSION_IN_FILTER,info);
      }
      try {
        if (DataTypeUtil.toBoolean(result).booleanValue() == false) {
          isAccepted=false;
          break;
        }
      }
 catch (      BirtException e) {
        DataException e1=new DataException(ResourceConstants.DATATYPEUTIL_ERROR,e);
        logger.logp(Level.FINE,FilterByRow.class.getName(),""String_Node_Str"",""String_Node_Str"",e1);
        throw e1;
      }
    }
    return isAccepted;
  }
  finally {
    Context.exit();
    logger.exiting(FilterByRow.class.getName(),""String_Node_Str"");
  }
}",0.9233216671969456
78275,"public AbstractParseState jumpTo(){
  if (!valid)   return new AnyElementState(getHandler());
  if ((element instanceof TextDataItem) && ""String_Node_Str"".equalsIgnoreCase(name)) {
    CompatibleRenamedPropertyState state=new CompatibleRenamedPropertyState(handler,element,""String_Node_Str"");
    state.setName(TextDataItem.CONTENT_TYPE_PROP);
    return state;
  }
  if (""String_Node_Str"".equalsIgnoreCase(name)) {
    if (handler.isVersion(""String_Node_Str"") || handler.isVersion(""String_Node_Str""))     return new CompatibleTestExpreState(handler,element,Style.HIGHLIGHT_RULES_PROP);
  }
  if (""String_Node_Str"".equalsIgnoreCase(name))   return new CompatibleTestExpreState(handler,element,Style.MAP_RULES_PROP);
  if (element instanceof DataItem && (""String_Node_Str"").equalsIgnoreCase(name) && struct == null && StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) {
    CompatibleDataValueExprState state=new CompatibleDataValueExprState(handler,element);
    state.setName(IDataItemModel.RESULT_SET_COLUMN_PROP);
    return state;
  }
  if (propDefn == null)   propDefn=element.getPropertyDefn(name);
  if (propDefn != null && propDefn.getValueType() == IPropertyDefn.USER_PROPERTY && StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) {
    CompatibleMiscExpressionState state=new CompatibleMiscExpressionState(handler,element);
    state.setName(name);
    return state;
  }
  if ((StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) && element instanceof ImageItem && ImageItem.URI_PROP.equalsIgnoreCase(name)) {
    CompatibleImageURIState state=new CompatibleImageURIState(handler,element);
    state.setName(name);
    return state;
  }
  if (StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) {
    if (struct instanceof ComputedColumn && element instanceof DataItem)     return super.jumpTo();
    CompatibleMiscExpressionState state=new CompatibleMiscExpressionState(handler,element);
    state.setName(name);
    state.struct=struct;
    state.propDefn=propDefn;
    return state;
  }
  return super.jumpTo();
}","public AbstractParseState jumpTo(){
  if (!valid)   return new AnyElementState(getHandler());
  if ((element instanceof TextDataItem) && ""String_Node_Str"".equalsIgnoreCase(name)) {
    CompatibleRenamedPropertyState state=new CompatibleRenamedPropertyState(handler,element,""String_Node_Str"");
    state.setName(TextDataItem.CONTENT_TYPE_PROP);
    return state;
  }
  if (""String_Node_Str"".equalsIgnoreCase(name)) {
    if (handler.isVersion(""String_Node_Str"") || handler.isVersion(""String_Node_Str""))     return new CompatibleTestExpreState(handler,element,Style.HIGHLIGHT_RULES_PROP);
  }
  if (""String_Node_Str"".equalsIgnoreCase(name))   return new CompatibleTestExpreState(handler,element,Style.MAP_RULES_PROP);
  if (element instanceof DataItem && (""String_Node_Str"").equalsIgnoreCase(name) && struct == null && StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) {
    CompatibleDataValueExprState state=new CompatibleDataValueExprState(handler,element);
    state.setName(IDataItemModel.RESULT_SET_COLUMN_PROP);
    return state;
  }
  if (propDefn == null)   propDefn=element.getPropertyDefn(name);
  if (propDefn != null && propDefn.getValueType() == IPropertyDefn.USER_PROPERTY && StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) {
    CompatibleMiscExpressionState state=new CompatibleMiscExpressionState(handler,element);
    state.setName(name);
    return state;
  }
  if ((StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) && element instanceof ImageItem && struct != null && ImageItem.URI_PROP.equalsIgnoreCase(name)) {
    CompatibleURIState state=new CompatibleURIState(handler,element);
    state.setName(name);
    return state;
  }
  if (StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) {
    if (struct instanceof ComputedColumn && element instanceof DataItem)     return super.jumpTo();
    CompatibleMiscExpressionState state=new CompatibleMiscExpressionState(handler,element);
    state.setName(name);
    state.struct=struct;
    state.propDefn=propDefn;
    return state;
  }
  return super.jumpTo();
}",0.993361782835467
78276,"public AbstractParseState jumpTo(){
  if (!valid)   return new AnyElementState(getHandler());
  if ((element instanceof TextDataItem) && ""String_Node_Str"".equalsIgnoreCase(name)) {
    CompatibleRenamedPropertyState state=new CompatibleRenamedPropertyState(handler,element,""String_Node_Str"");
    state.setName(TextDataItem.CONTENT_TYPE_PROP);
    return state;
  }
  if (""String_Node_Str"".equalsIgnoreCase(name)) {
    if (handler.isVersion(""String_Node_Str"") || handler.isVersion(""String_Node_Str""))     return new CompatibleTestExpreState(handler,element,Style.HIGHLIGHT_RULES_PROP);
  }
  if (""String_Node_Str"".equalsIgnoreCase(name))   return new CompatibleTestExpreState(handler,element,Style.MAP_RULES_PROP);
  if (element instanceof DataItem && (""String_Node_Str"").equalsIgnoreCase(name) && struct == null && StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) {
    CompatibleDataValueExprState state=new CompatibleDataValueExprState(handler,element);
    state.setName(IDataItemModel.RESULT_SET_COLUMN_PROP);
    return state;
  }
  if (propDefn == null)   propDefn=element.getPropertyDefn(name);
  if (propDefn != null && propDefn.getValueType() == IPropertyDefn.USER_PROPERTY && StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) {
    CompatibleMiscExpressionState state=new CompatibleMiscExpressionState(handler,element);
    state.setName(name);
    return state;
  }
  if ((StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) && element instanceof ImageItem && struct != null && ImageItem.URI_PROP.equalsIgnoreCase(name)) {
    CompatibleURIState state=new CompatibleURIState(handler,element);
    state.setName(name);
    return state;
  }
  if (StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) {
    if (struct instanceof ComputedColumn && element instanceof DataItem)     return super.jumpTo();
    CompatibleMiscExpressionState state=new CompatibleMiscExpressionState(handler,element);
    state.setName(name);
    state.struct=struct;
    state.propDefn=propDefn;
    return state;
  }
  return super.jumpTo();
}","public AbstractParseState jumpTo(){
  if (!valid)   return new AnyElementState(getHandler());
  if ((element instanceof TextDataItem) && ""String_Node_Str"".equalsIgnoreCase(name)) {
    CompatibleRenamedPropertyState state=new CompatibleRenamedPropertyState(handler,element,""String_Node_Str"");
    state.setName(TextDataItem.CONTENT_TYPE_PROP);
    return state;
  }
  if (""String_Node_Str"".equalsIgnoreCase(name)) {
    if (handler.isVersion(""String_Node_Str"") || handler.isVersion(""String_Node_Str""))     return new CompatibleTestExpreState(handler,element,Style.HIGHLIGHT_RULES_PROP);
  }
  if (""String_Node_Str"".equalsIgnoreCase(name))   return new CompatibleTestExpreState(handler,element,Style.MAP_RULES_PROP);
  if (element instanceof DataItem && (""String_Node_Str"").equalsIgnoreCase(name) && struct == null && StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) {
    CompatibleDataValueExprState state=new CompatibleDataValueExprState(handler,element);
    state.setName(IDataItemModel.RESULT_SET_COLUMN_PROP);
    return state;
  }
  if (propDefn == null)   propDefn=element.getPropertyDefn(name);
  if (propDefn != null && propDefn.getValueType() == IPropertyDefn.USER_PROPERTY && StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) {
    CompatibleMiscExpressionState state=new CompatibleMiscExpressionState(handler,element);
    state.setName(name);
    return state;
  }
  if ((StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) && element instanceof ImageItem && struct == null && ImageItem.URI_PROP.equalsIgnoreCase(name)) {
    CompatibleURIState state=new CompatibleURIState(handler,element);
    state.setName(name);
    return state;
  }
  if (StringUtil.compareVersion(handler.getVersion(),""String_Node_Str"") < 0) {
    if (struct instanceof ComputedColumn && element instanceof DataItem)     return super.jumpTo();
    CompatibleMiscExpressionState state=new CompatibleMiscExpressionState(handler,element);
    state.setName(name);
    state.struct=struct;
    state.propDefn=propDefn;
    return state;
  }
  return super.jumpTo();
}",0.9995267392333176
78277,"/** 
 * Returns the position where the cell resides in the row.
 * @param cell the cell handle
 * @return the position indexing from 0
 */
protected static int findCellPosition(CellHandle cell){
}","/** 
 * Returns the position where the cell resides in the row.
 * @param row the row handle
 * @param columnToInsert the column number to insert, count from 1
 * @param insert whether insert mode
 * @return the position indexing from 1
 */
protected int findCellPosition(RowHandle row,int columnToInsert,boolean insert){
  SlotHandle cells=row.getCells();
  for (int i=0; i < cells.getCount(); i++) {
    CellHandle cell=(CellHandle)cells.get(i);
    int cellPos=getCellPosition(cell);
    if (columnToInsert == cellPos)     return insert ? (i + 1) : i;
 else     if (columnToInsert < cellPos)     return i;
  }
  return -1;
}",0.2867557715674362
78278,"/** 
 * Returns insert positions of <code>copiedCells</code>. Each element in the return value is an integer, which can be <ul> <li>0 -- insert to the beginning of row <li>an integer between 0 and the maximal position <li>-1 -- insert to the end of the row </ul>
 * @param copiedCells a list containing cells that is to be inserted.
 * @param originalCells a list containing cells that is to be deleted.
 * @param columnIndex the column index where copied cells are pasted
 * @param isInsert <code>true</code> if this is an insert and paste action. Otherwise <code>false</code>.
 * @return an array containing insert positions
 */
private int[] getInsertPosition(List copiedCells,List originalCells,int columnIndex,boolean isInsert){
  int[] insertPosition=null;
  int columnCount=adapter.getColumnCount();
  if (isInsert && (columnIndex == 0 || columnIndex == columnCount - 1)) {
    insertPosition=new int[copiedCells.size()];
    if (columnIndex == 0)     Arrays.fill(insertPosition,0);
 else     Arrays.fill(insertPosition,-1);
  }
 else {
    int[] copiedRowSpans=new int[copiedCells.size()];
    int[] originalPositions=new int[originalCells.size()];
    int[] originalRowSpans=new int[originalCells.size()];
    for (int i=0; i < originalCells.size(); i++) {
      CellContextInfo contextInfo=(CellContextInfo)originalCells.get(i);
      CellHandle cell=contextInfo.getCell().handle(adapter.getModule());
      originalPositions[i]=ColumnBandAdapter.findCellPosition(cell);
      originalRowSpans[i]=contextInfo.getRowSpan();
    }
    for (int i=0; i < copiedCells.size(); i++) {
      CellContextInfo contextInfo=(CellContextInfo)copiedCells.get(i);
      copiedRowSpans[i]=contextInfo.getRowSpan();
    }
    insertPosition=getIndexToAdd(originalPositions,originalRowSpans,copiedRowSpans);
  }
  return insertPosition;
}","/** 
 * Returns insert positions of <code>copiedCells</code> if the cells are inserted to the beginning of row or at the end of the row. Each element in the return value is an integer, which can be <ul> <li>0 -- insert to the beginning of row <li>-1 -- insert to the end of the row </ul> And for other cases, the position is not calculated here.
 * @param size the size of the array to be return.
 * @param columnIndex the column index where copied cells are pasted
 * @param isInsert <code>true</code> if this is an insert and paste action. Otherwise <code>false</code>.
 * @return an array containing insert positions
 */
private int[] getInsertPosition(int size,int columnIndex,boolean isInsert){
  int[] insertPosition=null;
  int columnCount=adapter.getColumnCount();
  if (isInsert && (columnIndex == 0 || columnIndex == columnCount - 1)) {
    insertPosition=new int[size];
    if (columnIndex == 0)     Arrays.fill(insertPosition,0);
 else     Arrays.fill(insertPosition,-1);
  }
  return insertPosition;
}",0.5759493670886076
78279,"/** 
 * Returns the library handle with the given namespace.
 * @param namespace the library namespace
 * @return the library handle with the given namespace
 */
public LibraryHandle getLibrary(String namespace){
  Module library=module.getLibraryWithNamespace(namespace,IModuleNameSpace.ONE_LEVEL);
  if (library == null)   return null;
  return (LibraryHandle)library.getHandle(library);
}","/** 
 * Returns the library handle with the given namespace.
 * @param namespace the library namespace
 * @return the library handle with the given namespace
 */
public LibraryHandle getLibrary(String namespace){
  Module library=module.getLibraryWithNamespace(namespace,IModuleNameSpace.DIRECTLY_INCLUDED_LEVEL);
  if (library == null)   return null;
  return (LibraryHandle)library.getHandle(library);
}",0.9798994974874372
78280,"/** 
 * Returns the libraries this report design includes directly. Each in the returned list is the instance of <code>LibraryHandle</code>.
 * @return the libraries this report design includes directly.
 */
public List getLibraries(){
  return getLibraries(IModuleNameSpace.ONE_LEVEL);
}","/** 
 * Returns the libraries this report design includes directly. Each in the returned list is the instance of <code>LibraryHandle</code>.
 * @return the libraries this report design includes directly.
 */
public List getLibraries(){
  return getLibraries(IModuleNameSpace.DIRECTLY_INCLUDED_LEVEL);
}",0.9694915254237289
78281,"/** 
 * Returns all theme element handles that this modules and the included modules contain.
 * @return all theme element handles that this modules and the includedmodules contain.
 */
public List getAllThemes(){
  List elementList=module.getModuleNameSpace(Module.THEME_NAME_SPACE).getElements(IModuleNameSpace.ONE_LEVEL);
  return generateHandleList(elementList);
}","/** 
 * Returns all theme element handles that this modules and the included modules contain.
 * @return all theme element handles that this modules and the includedmodules contain.
 * @deprecated from BIRT 2.1.0. Replaced by {@link #getVisibleThemes(int)}
 */
public List getAllThemes(){
  List elementList=module.getModuleNameSpace(Module.THEME_NAME_SPACE).getElements(IModuleNameSpace.DIRECTLY_INCLUDED_LEVEL);
  return generateHandleList(elementList);
}",0.8872727272727273
78282,"/** 
 * Returns all theme element handles that this module contain.
 * @return all theme element handles that this module contain.
 */
public List getVisibleThemes(){
  List elementList=module.getModuleNameSpace(Module.THEME_NAME_SPACE).getElements(IModuleNameSpace.NATIVE_LEVEL);
  return generateHandleList(elementList);
}","/** 
 * Returns theme handles according the input level.
 * @param level an <code>int</code> value, which should be the one defined in <code>IVisibleLevelControl</code>.
 * @return theme handles according the input level
 */
public List getVisibleThemes(int level){
  List elementList=module.getModuleNameSpace(Module.THEME_NAME_SPACE).getElements(level);
  return generateHandleList(elementList);
}",0.4674965421853388
78283,"/** 
 * Returns only libraries this module includes directly.
 * @return list of libraries.
 */
public List getLibraries(){
  return getLibraries(IModuleNameSpace.ONE_LEVEL);
}","/** 
 * Returns only libraries this module includes directly.
 * @return list of libraries.
 */
public List getLibraries(){
  return getLibraries(IModuleNameSpace.DIRECTLY_INCLUDED_LEVEL);
}",0.9562841530054644
78284,"protected Control createContents(Composite parent){
  GridData gdata;
  GridLayout glayout;
  createTitleArea(parent);
  Composite composite=new Composite(parent,0);
  glayout=new GridLayout();
  glayout.marginHeight=0;
  glayout.marginWidth=0;
  glayout.verticalSpacing=0;
  composite.setLayout(glayout);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  applyDialogFont(composite);
  initializeDialogUnits(composite);
  Composite innerParent=(Composite)createDialogArea(composite);
  createButtonBar(composite);
  Label lb=new Label(innerParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Composite condition=new Composite(innerParent,SWT.NONE);
  condition.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  glayout=new GridLayout(5,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  fillExpression(expression);
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.resolveNull(((DataItemHandle)designHandle).getValueExpr()));
      }
      updateButtons();
    }
  }
);
  expression.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  Button expBuilder=new Button(condition,SWT.PUSH);
  expBuilder.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  expBuilder.setLayoutData(gdata);
  expBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
  expBuilder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(expression);
    }
  }
);
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String value=getValueForOperator(operator.getText());
      int vv=determineValueVisible(value);
      if (vv == 0) {
        value1.setVisible(false);
        value2.setVisible(false);
        valBuilder1.setVisible(false);
        valBuilder2.setVisible(false);
        andLable.setVisible(false);
      }
 else       if (vv == 1) {
        value1.setVisible(true);
        valBuilder1.setVisible(true);
        value2.setVisible(false);
        valBuilder2.setVisible(false);
        andLable.setVisible(false);
      }
 else       if (vv == 2) {
        value1.setVisible(true);
        value2.setVisible(true);
        valBuilder1.setVisible(true);
        valBuilder2.setVisible(true);
        andLable.setVisible(true);
      }
      updateButtons();
    }
  }
);
  value1=createText(condition);
  value1.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  valBuilder1=new Button(condition,SWT.PUSH);
  valBuilder1.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  valBuilder1.setLayoutData(gdata);
  valBuilder1.setToolTipText(Messages.getString(""String_Node_Str""));
  valBuilder1.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(value1);
    }
  }
);
  createDummy(condition,3);
  andLable=new Label(condition,SWT.NONE);
  andLable.setText(Messages.getString(""String_Node_Str""));
  andLable.setVisible(false);
  createDummy(condition,1);
  createDummy(condition,3);
  value2=createText(condition);
  value2.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  value2.setVisible(false);
  valBuilder2=new Button(condition,SWT.PUSH);
  valBuilder2.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  valBuilder2.setLayoutData(gdata);
  valBuilder2.setToolTipText(Messages.getString(""String_Node_Str""));
  valBuilder2.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(value2);
    }
  }
);
  valBuilder2.setVisible(false);
  if (operator.getItemCount() > 0) {
    operator.select(0);
  }
  lb=new Label(innerParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Composite format=new Composite(innerParent,SWT.NONE);
  format.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  glayout=new GridLayout(7,false);
  format.setLayout(glayout);
  lb=new Label(format,0);
  lb.setText(Messages.getString(""String_Node_Str""));
  lb=new Label(format,0);
  lb.setText(Messages.getString(""String_Node_Str""));
  lb=new Label(format,0);
  lb.setText(Messages.getString(""String_Node_Str""));
  createDummy(format,4);
  font=new Combo(format,SWT.READ_ONLY);
  gdata=new GridData();
  gdata.widthHint=100;
  font.setLayoutData(gdata);
  IChoiceSet fontSet=ChoiceSetFactory.getElementChoiceSet(ReportDesignConstants.STYLE_ELEMENT,StyleHandle.FONT_FAMILY_PROP);
  font.setData(fontSet);
  font.setItems(ChoiceSetFactory.getDisplayNamefromChoiceSet(fontSet,new AlphabeticallyComparator()));
  if (SYSTEM_FONT_LIST != null && SYSTEM_FONT_LIST.length > 0) {
    for (int i=0; i < SYSTEM_FONT_LIST.length; i++) {
      font.add(SYSTEM_FONT_LIST[i]);
    }
  }
  font.add(DEFAULT_CHOICE,0);
  font.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      updatePreview();
    }
  }
);
  if (font.getItemCount() > 0) {
    font.select(0);
  }
  size=new FontSizeBuilder(format,SWT.None);
  if (designHandle != null) {
    size.setDefaultUnit(designHandle.getPropertyHandle(StyleHandle.FONT_SIZE_PROP).getDefaultUnit());
  }
  gdata=new GridData();
  gdata.widthHint=120;
  size.setLayoutData(gdata);
  size.setFontSizeValue(null);
  size.addListener(SWT.Modify,new Listener(){
    public void handleEvent(    Event event){
      updatePreview();
    }
  }
);
  color=new ColorBuilder(format,0);
  gdata=new GridData();
  gdata.widthHint=50;
  color.setLayoutData(gdata);
  color.setChoiceSet(ChoiceSetFactory.getElementChoiceSet(ReportDesignConstants.STYLE_ELEMENT,StyleHandle.COLOR_PROP));
  color.setRGB(null);
  color.addListener(SWT.Modify,new Listener(){
    public void handleEvent(    Event event){
      previewLabel.setForeground(ColorManager.getColor(color.getRGB()));
      previewLabel.redraw();
    }
  }
);
  Composite fstyle=new Composite(format,0);
  gdata=new GridData();
  gdata.horizontalSpan=4;
  fstyle.setLayoutData(gdata);
  fstyle.setLayout(new GridLayout(4,false));
  bold=createToggleButton(fstyle);
  bold.setImage(ReportPlatformUIImages.getImage(AttributeConstant.FONT_WIDTH));
  bold.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      isBoldChanged=true;
      updatePreview();
    }
  }
);
  italic=createToggleButton(fstyle);
  italic.setImage(ReportPlatformUIImages.getImage(AttributeConstant.FONT_STYLE));
  italic.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      isItalicChanged=true;
      updatePreview();
    }
  }
);
  underline=createToggleButton(fstyle);
  underline.setImage(ReportPlatformUIImages.getImage(AttributeConstant.TEXT_UNDERLINE));
  underline.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      isUnderlineChanged=true;
      previewLabel.setUnderline(underline.getSelection());
      previewLabel.redraw();
    }
  }
);
  linethrough=createToggleButton(fstyle);
  linethrough.setImage(ReportPlatformUIImages.getImage(AttributeConstant.TEXT_LINE_THROUGH));
  linethrough.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      isLinethroughChanged=true;
      previewLabel.setLinethrough(linethrough.getSelection());
      previewLabel.redraw();
    }
  }
);
  Composite back=new Composite(innerParent,SWT.NONE);
  back.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  glayout=new GridLayout(1,false);
  back.setLayout(glayout);
  lb=new Label(back,0);
  lb.setText(Messages.getString(""String_Node_Str""));
  backColor=new ColorBuilder(back,0);
  gdata=new GridData();
  gdata.widthHint=50;
  backColor.setLayoutData(gdata);
  backColor.setChoiceSet(ChoiceSetFactory.getElementChoiceSet(ReportDesignConstants.STYLE_ELEMENT,StyleHandle.BACKGROUND_COLOR_PROP));
  backColor.setRGB(null);
  backColor.addListener(SWT.Modify,new Listener(){
    public void handleEvent(    Event event){
      previewLabel.setBackground(ColorManager.getColor(backColor.getRGB()));
      previewLabel.redraw();
    }
  }
);
  Composite preview=new Composite(innerParent,SWT.NONE);
  glayout=new GridLayout();
  preview.setLayout(glayout);
  gdata=new GridData(GridData.FILL_BOTH);
  preview.setLayoutData(gdata);
  lb=new Label(preview,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Composite previewPane=new Composite(preview,SWT.BORDER);
  glayout=new GridLayout();
  glayout.marginWidth=0;
  glayout.marginHeight=0;
  previewPane.setLayout(glayout);
  gdata=new GridData(GridData.FILL_BOTH);
  gdata.heightHint=60;
  previewPane.setLayoutData(gdata);
  previewLabel=new PreviewLabel(previewPane,0);
  previewLabel.setText(Messages.getString(""String_Node_Str""));
  gdata=new GridData(GridData.FILL_BOTH);
  previewLabel.setLayoutData(gdata);
  updatePreview();
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  syncViewProperties();
  updatePreview();
  updateButtons();
  return composite;
}","protected Control createContents(Composite parent){
  GridData gdata;
  GridLayout glayout;
  createTitleArea(parent);
  Composite composite=new Composite(parent,0);
  glayout=new GridLayout();
  glayout.marginHeight=0;
  glayout.marginWidth=0;
  glayout.verticalSpacing=0;
  composite.setLayout(glayout);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  applyDialogFont(composite);
  initializeDialogUnits(composite);
  Composite innerParent=(Composite)createDialogArea(composite);
  createButtonBar(composite);
  Label lb=new Label(innerParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Composite condition=new Composite(innerParent,SWT.NONE);
  condition.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  glayout=new GridLayout(5,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  fillExpression(expression);
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getName()));
      }
      updateButtons();
    }
  }
);
  expression.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  Button expBuilder=new Button(condition,SWT.PUSH);
  expBuilder.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  expBuilder.setLayoutData(gdata);
  expBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
  expBuilder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(expression);
    }
  }
);
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String value=getValueForOperator(operator.getText());
      int vv=determineValueVisible(value);
      if (vv == 0) {
        value1.setVisible(false);
        value2.setVisible(false);
        valBuilder1.setVisible(false);
        valBuilder2.setVisible(false);
        andLable.setVisible(false);
      }
 else       if (vv == 1) {
        value1.setVisible(true);
        valBuilder1.setVisible(true);
        value2.setVisible(false);
        valBuilder2.setVisible(false);
        andLable.setVisible(false);
      }
 else       if (vv == 2) {
        value1.setVisible(true);
        value2.setVisible(true);
        valBuilder1.setVisible(true);
        valBuilder2.setVisible(true);
        andLable.setVisible(true);
      }
      updateButtons();
    }
  }
);
  value1=createText(condition);
  value1.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  valBuilder1=new Button(condition,SWT.PUSH);
  valBuilder1.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  valBuilder1.setLayoutData(gdata);
  valBuilder1.setToolTipText(Messages.getString(""String_Node_Str""));
  valBuilder1.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(value1);
    }
  }
);
  createDummy(condition,3);
  andLable=new Label(condition,SWT.NONE);
  andLable.setText(Messages.getString(""String_Node_Str""));
  andLable.setVisible(false);
  createDummy(condition,1);
  createDummy(condition,3);
  value2=createText(condition);
  value2.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  value2.setVisible(false);
  valBuilder2=new Button(condition,SWT.PUSH);
  valBuilder2.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  valBuilder2.setLayoutData(gdata);
  valBuilder2.setToolTipText(Messages.getString(""String_Node_Str""));
  valBuilder2.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(value2);
    }
  }
);
  valBuilder2.setVisible(false);
  if (operator.getItemCount() > 0) {
    operator.select(0);
  }
  lb=new Label(innerParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Composite format=new Composite(innerParent,SWT.NONE);
  format.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  glayout=new GridLayout(7,false);
  format.setLayout(glayout);
  lb=new Label(format,0);
  lb.setText(Messages.getString(""String_Node_Str""));
  lb=new Label(format,0);
  lb.setText(Messages.getString(""String_Node_Str""));
  lb=new Label(format,0);
  lb.setText(Messages.getString(""String_Node_Str""));
  createDummy(format,4);
  font=new Combo(format,SWT.READ_ONLY);
  gdata=new GridData();
  gdata.widthHint=100;
  font.setLayoutData(gdata);
  IChoiceSet fontSet=ChoiceSetFactory.getElementChoiceSet(ReportDesignConstants.STYLE_ELEMENT,StyleHandle.FONT_FAMILY_PROP);
  font.setData(fontSet);
  font.setItems(ChoiceSetFactory.getDisplayNamefromChoiceSet(fontSet,new AlphabeticallyComparator()));
  if (SYSTEM_FONT_LIST != null && SYSTEM_FONT_LIST.length > 0) {
    for (int i=0; i < SYSTEM_FONT_LIST.length; i++) {
      font.add(SYSTEM_FONT_LIST[i]);
    }
  }
  font.add(DEFAULT_CHOICE,0);
  font.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      updatePreview();
    }
  }
);
  if (font.getItemCount() > 0) {
    font.select(0);
  }
  size=new FontSizeBuilder(format,SWT.None);
  if (designHandle != null) {
    size.setDefaultUnit(designHandle.getPropertyHandle(StyleHandle.FONT_SIZE_PROP).getDefaultUnit());
  }
  gdata=new GridData();
  gdata.widthHint=120;
  size.setLayoutData(gdata);
  size.setFontSizeValue(null);
  size.addListener(SWT.Modify,new Listener(){
    public void handleEvent(    Event event){
      updatePreview();
    }
  }
);
  color=new ColorBuilder(format,0);
  gdata=new GridData();
  gdata.widthHint=50;
  color.setLayoutData(gdata);
  color.setChoiceSet(ChoiceSetFactory.getElementChoiceSet(ReportDesignConstants.STYLE_ELEMENT,StyleHandle.COLOR_PROP));
  color.setRGB(null);
  color.addListener(SWT.Modify,new Listener(){
    public void handleEvent(    Event event){
      previewLabel.setForeground(ColorManager.getColor(color.getRGB()));
      previewLabel.redraw();
    }
  }
);
  Composite fstyle=new Composite(format,0);
  gdata=new GridData();
  gdata.horizontalSpan=4;
  fstyle.setLayoutData(gdata);
  fstyle.setLayout(new GridLayout(4,false));
  bold=createToggleButton(fstyle);
  bold.setImage(ReportPlatformUIImages.getImage(AttributeConstant.FONT_WIDTH));
  bold.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      isBoldChanged=true;
      updatePreview();
    }
  }
);
  italic=createToggleButton(fstyle);
  italic.setImage(ReportPlatformUIImages.getImage(AttributeConstant.FONT_STYLE));
  italic.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      isItalicChanged=true;
      updatePreview();
    }
  }
);
  underline=createToggleButton(fstyle);
  underline.setImage(ReportPlatformUIImages.getImage(AttributeConstant.TEXT_UNDERLINE));
  underline.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      isUnderlineChanged=true;
      previewLabel.setUnderline(underline.getSelection());
      previewLabel.redraw();
    }
  }
);
  linethrough=createToggleButton(fstyle);
  linethrough.setImage(ReportPlatformUIImages.getImage(AttributeConstant.TEXT_LINE_THROUGH));
  linethrough.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      isLinethroughChanged=true;
      previewLabel.setLinethrough(linethrough.getSelection());
      previewLabel.redraw();
    }
  }
);
  Composite back=new Composite(innerParent,SWT.NONE);
  back.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  glayout=new GridLayout(1,false);
  back.setLayout(glayout);
  lb=new Label(back,0);
  lb.setText(Messages.getString(""String_Node_Str""));
  backColor=new ColorBuilder(back,0);
  gdata=new GridData();
  gdata.widthHint=50;
  backColor.setLayoutData(gdata);
  backColor.setChoiceSet(ChoiceSetFactory.getElementChoiceSet(ReportDesignConstants.STYLE_ELEMENT,StyleHandle.BACKGROUND_COLOR_PROP));
  backColor.setRGB(null);
  backColor.addListener(SWT.Modify,new Listener(){
    public void handleEvent(    Event event){
      previewLabel.setBackground(ColorManager.getColor(backColor.getRGB()));
      previewLabel.redraw();
    }
  }
);
  Composite preview=new Composite(innerParent,SWT.NONE);
  glayout=new GridLayout();
  preview.setLayout(glayout);
  gdata=new GridData(GridData.FILL_BOTH);
  preview.setLayoutData(gdata);
  lb=new Label(preview,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Composite previewPane=new Composite(preview,SWT.BORDER);
  glayout=new GridLayout();
  glayout.marginWidth=0;
  glayout.marginHeight=0;
  previewPane.setLayout(glayout);
  gdata=new GridData(GridData.FILL_BOTH);
  gdata.heightHint=60;
  previewPane.setLayoutData(gdata);
  previewLabel=new PreviewLabel(previewPane,0);
  previewLabel.setText(Messages.getString(""String_Node_Str""));
  gdata=new GridData(GridData.FILL_BOTH);
  previewLabel.setLayoutData(gdata);
  updatePreview();
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  syncViewProperties();
  updatePreview();
  updateButtons();
  return composite;
}",0.997804442175134
78285,"protected Control createContents(Composite parent){
  GridData gdata;
  GridLayout glayout;
  createTitleArea(parent);
  Composite composite=new Composite(parent,0);
  glayout=new GridLayout();
  glayout.marginHeight=0;
  glayout.marginWidth=0;
  glayout.verticalSpacing=0;
  composite.setLayout(glayout);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  applyDialogFont(composite);
  initializeDialogUnits(composite);
  Composite innerParent=(Composite)createDialogArea(composite);
  createButtonBar(composite);
  Label lb=new Label(innerParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Composite condition=new Composite(innerParent,SWT.NONE);
  condition.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  glayout=new GridLayout(5,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  fillExpression(expression);
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.resolveNull(((DataItemHandle)designHandle).getValueExpr()));
      }
      updateButtons();
    }
  }
);
  expression.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  Button expBuilder=new Button(condition,SWT.PUSH);
  expBuilder.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  expBuilder.setLayoutData(gdata);
  expBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
  expBuilder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(expression);
    }
  }
);
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String value=getValueForOperator(operator.getText());
      int vv=determineValueVisible(value);
      if (vv == 0) {
        value1.setVisible(false);
        value2.setVisible(false);
        valBuilder1.setVisible(false);
        valBuilder2.setVisible(false);
        andLable.setVisible(false);
      }
 else       if (vv == 1) {
        value1.setVisible(true);
        valBuilder1.setVisible(true);
        value2.setVisible(false);
        valBuilder2.setVisible(false);
        andLable.setVisible(false);
      }
 else       if (vv == 2) {
        value1.setVisible(true);
        value2.setVisible(true);
        valBuilder1.setVisible(true);
        valBuilder2.setVisible(true);
        andLable.setVisible(true);
      }
      updateButtons();
    }
  }
);
  value1=createText(condition);
  value1.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  valBuilder1=new Button(condition,SWT.PUSH);
  valBuilder1.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  valBuilder1.setLayoutData(gdata);
  valBuilder1.setToolTipText(Messages.getString(""String_Node_Str""));
  valBuilder1.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(value1);
    }
  }
);
  createDummy(condition,3);
  andLable=new Label(condition,SWT.NONE);
  andLable.setText(Messages.getString(""String_Node_Str""));
  andLable.setVisible(false);
  createDummy(condition,1);
  createDummy(condition,3);
  value2=createText(condition);
  value2.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  value2.setVisible(false);
  valBuilder2=new Button(condition,SWT.PUSH);
  valBuilder2.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  valBuilder2.setLayoutData(gdata);
  valBuilder2.setToolTipText(Messages.getString(""String_Node_Str""));
  valBuilder2.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(value2);
    }
  }
);
  valBuilder2.setVisible(false);
  if (operator.getItemCount() > 0) {
    operator.select(0);
  }
  lb=new Label(innerParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Composite format=new Composite(innerParent,SWT.NONE);
  format.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  glayout=new GridLayout();
  format.setLayout(glayout);
  display=new Text(format,SWT.BORDER);
  gdata=new GridData();
  gdata.widthHint=300;
  display.setLayoutData(gdata);
  Composite space=new Composite(innerParent,SWT.NONE);
  gdata=new GridData(GridData.FILL_HORIZONTAL);
  gdata.heightHint=20;
  space.setLayoutData(gdata);
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (handle != null) {
    syncViewProperties();
  }
  updateButtons();
  return composite;
}","protected Control createContents(Composite parent){
  GridData gdata;
  GridLayout glayout;
  createTitleArea(parent);
  Composite composite=new Composite(parent,0);
  glayout=new GridLayout();
  glayout.marginHeight=0;
  glayout.marginWidth=0;
  glayout.verticalSpacing=0;
  composite.setLayout(glayout);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  applyDialogFont(composite);
  initializeDialogUnits(composite);
  Composite innerParent=(Composite)createDialogArea(composite);
  createButtonBar(composite);
  Label lb=new Label(innerParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Composite condition=new Composite(innerParent,SWT.NONE);
  condition.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  glayout=new GridLayout(5,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  fillExpression(expression);
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getName()));
      }
      updateButtons();
    }
  }
);
  expression.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  Button expBuilder=new Button(condition,SWT.PUSH);
  expBuilder.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  expBuilder.setLayoutData(gdata);
  expBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
  expBuilder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(expression);
    }
  }
);
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String value=getValueForOperator(operator.getText());
      int vv=determineValueVisible(value);
      if (vv == 0) {
        value1.setVisible(false);
        value2.setVisible(false);
        valBuilder1.setVisible(false);
        valBuilder2.setVisible(false);
        andLable.setVisible(false);
      }
 else       if (vv == 1) {
        value1.setVisible(true);
        valBuilder1.setVisible(true);
        value2.setVisible(false);
        valBuilder2.setVisible(false);
        andLable.setVisible(false);
      }
 else       if (vv == 2) {
        value1.setVisible(true);
        value2.setVisible(true);
        valBuilder1.setVisible(true);
        valBuilder2.setVisible(true);
        andLable.setVisible(true);
      }
      updateButtons();
    }
  }
);
  value1=createText(condition);
  value1.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  valBuilder1=new Button(condition,SWT.PUSH);
  valBuilder1.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  valBuilder1.setLayoutData(gdata);
  valBuilder1.setToolTipText(Messages.getString(""String_Node_Str""));
  valBuilder1.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(value1);
    }
  }
);
  createDummy(condition,3);
  andLable=new Label(condition,SWT.NONE);
  andLable.setText(Messages.getString(""String_Node_Str""));
  andLable.setVisible(false);
  createDummy(condition,1);
  createDummy(condition,3);
  value2=createText(condition);
  value2.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  value2.setVisible(false);
  valBuilder2=new Button(condition,SWT.PUSH);
  valBuilder2.setText(""String_Node_Str"");
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  valBuilder2.setLayoutData(gdata);
  valBuilder2.setToolTipText(Messages.getString(""String_Node_Str""));
  valBuilder2.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(value2);
    }
  }
);
  valBuilder2.setVisible(false);
  if (operator.getItemCount() > 0) {
    operator.select(0);
  }
  lb=new Label(innerParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Composite format=new Composite(innerParent,SWT.NONE);
  format.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  glayout=new GridLayout();
  format.setLayout(glayout);
  display=new Text(format,SWT.BORDER);
  gdata=new GridData();
  gdata.widthHint=300;
  display.setLayoutData(gdata);
  Composite space=new Composite(innerParent,SWT.NONE);
  gdata=new GridData(GridData.FILL_HORIZONTAL);
  gdata.heightHint=20;
  space.setLayoutData(gdata);
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (handle != null) {
    syncViewProperties();
  }
  updateButtons();
  return composite;
}",0.9958296964406944
78286,"private String getColumnName(String value){
  CachedMetaDataHandle cmdh=null;
  try {
    cmdh=DataSetUIUtil.getCachedMetaDataHandle(dataSet);
  }
 catch (  SemanticException e) {
  }
  if (cmdh != null) {
    for (Iterator iter=cmdh.getResultSet().iterator(); iter.hasNext(); ) {
      ResultSetColumnHandle element=(ResultSetColumnHandle)iter.next();
      if (value.equalsIgnoreCase(DEUtil.getColumnExpression(element.getColumnName()))) {
        return element.getColumnName();
      }
    }
  }
  return null;
}","private String getColumnName(String value){
  CachedMetaDataHandle cmdh=null;
  try {
    cmdh=DataSetUIUtil.getCachedMetaDataHandle(dataSet);
  }
 catch (  SemanticException e) {
  }
  if (cmdh != null) {
    for (Iterator iter=cmdh.getResultSet().iterator(); iter.hasNext(); ) {
      ResultSetColumnHandle element=(ResultSetColumnHandle)iter.next();
      if (DEUtil.getColumnExpression(element.getColumnName()).equalsIgnoreCase(value)) {
        return element.getColumnName();
      }
    }
  }
  return null;
}",0.9554263565891472
78287,"private String[] getDataSets(){
  return (String[])DEUtil.getDataSets().toArray(new String[0]);
}","private String[] getDataSets(){
  return ChoiceSetFactory.getDataSets();
}",0.7134502923976608
78288,"/** 
 * Creates builder for given element
 * @param handle
 * @return
 */
public Object createBuilder(DesignElementHandle handle){
  if (handle instanceof TextItemHandle) {
    return new TextEditor(UIUtil.getDefaultShell(),TextEditor.DLG_TITLE_NEW,(TextItemHandle)handle);
  }
  if (handle instanceof TextDataHandle) {
    ExpressionBuilder dialog=new ExpressionBuilder(UIUtil.getDefaultShell(),((TextDataHandle)handle).getValueExpr());
    dialog.setExpressionProvier(new ExpressionProvider(handle));
    return (dialog);
  }
  if (handle instanceof DataItemHandle) {
    BindingColumnDialog dialog=new BindingColumnDialog();
    dialog.setInput((ReportItemHandle)handle);
    return (dialog);
  }
  if (handle instanceof ImageHandle) {
    ImageBuilder dialog=new ImageBuilder(UIUtil.getDefaultShell(),ImageBuilder.DLG_TITLE_NEW);
    dialog.setInput(handle);
    return dialog;
  }
  return null;
}","/** 
 * Creates builder for given element
 * @param handle
 * @return
 */
public Object createBuilder(DesignElementHandle handle){
  if (handle instanceof TextItemHandle) {
    return new TextEditor(UIUtil.getDefaultShell(),TextEditor.DLG_TITLE_NEW,(TextItemHandle)handle);
  }
  if (handle instanceof TextDataHandle) {
    ExpressionBuilder dialog=new ExpressionBuilder(UIUtil.getDefaultShell(),((TextDataHandle)handle).getValueExpr());
    dialog.setExpressionProvier(new ExpressionProvider(handle));
    return (dialog);
  }
  if (handle instanceof DataItemHandle) {
    BindingColumnDialog dialog=new BindingColumnDialog(true);
    dialog.setInput((ReportItemHandle)handle);
    return (dialog);
  }
  if (handle instanceof ImageHandle) {
    ImageBuilder dialog=new ImageBuilder(UIUtil.getDefaultShell(),ImageBuilder.DLG_TITLE_NEW);
    dialog.setInput(handle);
    return dialog;
  }
  return null;
}",0.9977876106194692
78289,"/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  keyChooser=new Combo(composite,SWT.DROP_DOWN | SWT.READ_ONLY);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyChooser.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!keyChooser.getText().trim().equals(""String_Node_Str""))       resetInterval();
    }
  }
);
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  Composite intervalTypeArea=new Composite(intervalArea,SWT.NONE);
  intervalTypeArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalTypeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  Composite intervalRangeArea=new Composite(intervalArea,SWT.NONE);
  intervalRangeArea.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRangeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  new Label(intervalTypeArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalRangeArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalTypeArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
      intervalBaseButton.setEnabled(intervalType.getSelectionIndex() != 0 && (getColumnType() != String.class));
      intervalBaseText.setEnabled(intervalBaseButton.getEnabled() && intervalBaseButton.getSelection());
    }
  }
);
  intervalRange=new Spinner(intervalRangeArea,SWT.NONE);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.setMinimum(0);
  intervalRange.setMaximum(Integer.MAX_VALUE);
  intervalRange.setStep(1);
  intervalBaseButton=new Button(composite,SWT.CHECK);
  intervalBaseButton.setText(GROUP_DLG_INTERVAL_BASE_LABEL);
  intervalBaseButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalBaseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalBaseText.setEnabled(intervalBaseButton.getSelection());
    }
  }
);
  intervalBaseText=new Text(composite,SWT.SINGLE | SWT.BORDER);
  intervalBaseText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail=new Button(composite,SWT.CHECK);
  hideDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail.setText(GROUP_DLG_HIDE_DETAIL);
}","/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  Composite keyArea=new Composite(composite,SWT.NONE);
  keyArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  keyChooser=new Combo(keyArea,SWT.DROP_DOWN);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyChooser.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!keyChooser.getText().trim().equals(""String_Node_Str""))       resetInterval();
    }
  }
);
  Button exprButton=new Button(keyArea,SWT.PUSH);
  exprButton.setText(""String_Node_Str"");
  exprButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(getKeyExpression());
      expressionBuilder.setExpressionProvier(new ExpressionProvider(inputGroup));
      if (expressionBuilder.open() == OK) {
        setKeyExpression(expressionBuilder.getResult().trim());
      }
    }
  }
);
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  Composite intervalTypeArea=new Composite(intervalArea,SWT.NONE);
  intervalTypeArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalTypeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  Composite intervalRangeArea=new Composite(intervalArea,SWT.NONE);
  intervalRangeArea.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRangeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  new Label(intervalTypeArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalRangeArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalTypeArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
      intervalBaseButton.setEnabled(intervalType.getSelectionIndex() != 0 && (getColumnType() != String.class));
      intervalBaseText.setEnabled(intervalBaseButton.getEnabled() && intervalBaseButton.getSelection());
    }
  }
);
  intervalRange=new Spinner(intervalRangeArea,SWT.NONE);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.setMinimum(0);
  intervalRange.setMaximum(Integer.MAX_VALUE);
  intervalRange.setStep(1);
  intervalBaseButton=new Button(composite,SWT.CHECK);
  intervalBaseButton.setText(GROUP_DLG_INTERVAL_BASE_LABEL);
  intervalBaseButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalBaseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalBaseText.setEnabled(intervalBaseButton.getSelection());
    }
  }
);
  intervalBaseText=new Text(composite,SWT.SINGLE | SWT.BORDER);
  intervalBaseText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail=new Button(composite,SWT.CHECK);
  hideDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hideDetail.setText(GROUP_DLG_HIDE_DETAIL);
}",0.7810938555030384
78290,"private void setKeyExpression(String key){
  keyChooser.deselectAll();
  if (StringUtil.isBlank(key)) {
    keyChooser.setText(""String_Node_Str"");
    return;
  }
  keyChooser.setText(key);
}","private void setKeyExpression(String key){
  keyChooser.deselectAll();
  key=StringUtil.trimString(key);
  if (StringUtil.isBlank(key)) {
    keyChooser.setText(""String_Node_Str"");
    return;
  }
  for (int i=0; i < columnList.size(); i++) {
    if (key.equals(DEUtil.getExpression(columnList.get(i)))) {
      keyChooser.select(i);
      return;
    }
  }
  keyChooser.setText(key);
}",0.6620450606585788
78291,"/** 
 * Sets the dataset list to use.
 * @param dataSetList
 */
protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc != inputGroup.getTocExpression()) {
      if (newToc == null || !newToc.equals(inputGroup.getTocExpression())) {
        inputGroup.setTocExpression(newToc);
      }
    }
    int index=keyChooser.getSelectionIndex();
    String oldKeyExpr=inputGroup.getKeyExpr();
    String newKeyExpr=keyChooser.getText();
    inputGroup.setKeyExpr(newKeyExpr);
    if (newKeyExpr != null && newKeyExpr.length() != 0 && !newKeyExpr.equals(oldKeyExpr)) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null && index != -1) {
        DataItemHandle dataItemHandle=inputGroup.getElementFactory().newDataItem(null);
        dataItemHandle.setResultSetColumn(((ComputedColumnHandle)columnList.get(index)).getName());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getSelection());
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (intervalBaseText.getEnabled()) {
      inputGroup.setIntervalBase(UIUtil.convertToModelString(intervalBaseText.getText(),false));
    }
 else {
      inputGroup.setIntervalBase(null);
    }
    inputGroup.setHideDetail(hideDetail.getSelection());
    if (inputGroup instanceof TableGroupHandle) {
      if (includeHeader.getSelection() != inputGroup.hasHeader()) {
        if (includeHeader.getSelection()) {
          inputGroup.getHeader().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.HEADER_SLOT);
        }
      }
      if (includeFooter.getSelection() != inputGroup.hasFooter()) {
        if (includeFooter.getSelection()) {
          inputGroup.getFooter().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.FOOTER_SLOT);
        }
      }
    }
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
    inputGroup.setPageBreakBefore(pagebreakBeforeChoicesAll[pagebreakBeforeCombo.getSelectionIndex()].getName());
    inputGroup.setPageBreakAfter(pagebreakAfterChoicesAll[pagebreakAfterCombo.getSelectionIndex()].getName());
    inputGroup.setRepeatHeader(repeatHeaderButton.getSelection());
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}","/** 
 * Sets the dataset list to use.
 * @param dataSetList
 */
protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc != inputGroup.getTocExpression()) {
      if (newToc == null || !newToc.equals(inputGroup.getTocExpression())) {
        inputGroup.setTocExpression(newToc);
      }
    }
    int index=keyChooser.getSelectionIndex();
    String oldKeyExpr=inputGroup.getKeyExpr();
    String newKeyExpr=getKeyExpression();
    inputGroup.setKeyExpr(newKeyExpr);
    if (newKeyExpr != null && newKeyExpr.length() != 0 && !newKeyExpr.equals(oldKeyExpr) && index != -1) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DataItemHandle dataItemHandle=inputGroup.getElementFactory().newDataItem(null);
        dataItemHandle.setResultSetColumn(((ComputedColumnHandle)columnList.get(index)).getName());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getSelection());
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (intervalBaseText.getEnabled()) {
      inputGroup.setIntervalBase(UIUtil.convertToModelString(intervalBaseText.getText(),false));
    }
 else {
      inputGroup.setIntervalBase(null);
    }
    inputGroup.setHideDetail(hideDetail.getSelection());
    if (inputGroup instanceof TableGroupHandle) {
      if (includeHeader.getSelection() != inputGroup.hasHeader()) {
        if (includeHeader.getSelection()) {
          inputGroup.getHeader().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.HEADER_SLOT);
        }
      }
      if (includeFooter.getSelection() != inputGroup.hasFooter()) {
        if (includeFooter.getSelection()) {
          inputGroup.getFooter().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.FOOTER_SLOT);
        }
      }
    }
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
    inputGroup.setPageBreakBefore(pagebreakBeforeChoicesAll[pagebreakBeforeCombo.getSelectionIndex()].getName());
    inputGroup.setPageBreakAfter(pagebreakAfterChoicesAll[pagebreakAfterCombo.getSelectionIndex()].getName());
    inputGroup.setRepeatHeader(repeatHeaderButton.getSelection());
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}",0.8229166666666666
78292,"/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DataItemHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  dataHandle.setResultSetColumn(model.getColumnName());
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    if (!DEUtil.getDataSetList(container).contains(dataSet)) {
      if (container.getDataSet() == null) {
        container.setDataSet(dataSet);
      }
    }
    GroupHandle groupHandle=getGroupHandle(target);
    if (groupHandle != null) {
      ComputedColumn bindingColumn=StructureFactory.createComputedColumn();
      bindingColumn.setDataType(model.getDataType());
      bindingColumn.setExpression(DEUtil.getExpression(model));
      bindingColumn.setName(model.getColumnName());
      groupHandle.addColumnBinding(bindingColumn,false);
    }
 else {
      ComputedColumn bindingColumn=StructureFactory.createComputedColumn();
      bindingColumn.setDataType(model.getDataType());
      bindingColumn.setExpression(DEUtil.getExpression(model));
      bindingColumn.setName(model.getColumnName());
      container.addColumnBinding(bindingColumn,false);
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.createComputedColumn();
    bindingColumn.setDataType(model.getDataType());
    bindingColumn.setExpression(DEUtil.getExpression(model));
    bindingColumn.setName(model.getColumnName());
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(model.getColumnName());
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}","/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DataItemHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  dataHandle.setResultSetColumn(model.getColumnName());
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    if (!DEUtil.getDataSetList(container).contains(dataSet)) {
      if (container.getDataSet() == null) {
        container.setDataSet(dataSet);
      }
    }
    GroupHandle groupHandle=getGroupHandle(target);
    if (groupHandle != null) {
      ComputedColumn bindingColumn=StructureFactory.newComputedColumn(groupHandle,model.getColumnName());
      bindingColumn.setDataType(model.getDataType());
      bindingColumn.setExpression(DEUtil.getExpression(model));
      groupHandle.addColumnBinding(bindingColumn,false);
    }
 else {
      ComputedColumn bindingColumn=StructureFactory.newComputedColumn(container,model.getColumnName());
      bindingColumn.setDataType(model.getDataType());
      bindingColumn.setExpression(DEUtil.getExpression(model));
      container.addColumnBinding(bindingColumn,false);
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    bindingColumn.setExpression(DEUtil.getExpression(model));
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(model.getColumnName());
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}",0.9194645600175554
78293,"protected static void insertToCell(TableHandle tableHandle,SlotHandle slot,ResultSetColumnHandle[] columns,boolean isLabel){
  for (int i=0; i < slot.getCount(); i++) {
    SlotHandle cells=((RowHandle)slot.get(i)).getCells();
    for (int j=0; j < cells.getCount(); j++) {
      CellHandle cell=(CellHandle)cells.get(j);
      try {
        if (isLabel) {
          LabelHandle labelItemHandle=SessionHandleAdapter.getInstance().getReportDesignHandle().getElementFactory().newLabel(null);
          labelItemHandle.setText(columns[j].getColumnName());
          cell.addElement(labelItemHandle,cells.getSlotID());
        }
 else {
          DataItemHandle dataHandle=SessionHandleAdapter.getInstance().getReportDesignHandle().getElementFactory().newDataItem(null);
          dataHandle.setResultSetColumn(columns[j].getColumnName());
          cell.addElement(dataHandle,cells.getSlotID());
          ComputedColumn bindingColumn=StructureFactory.createComputedColumn();
          bindingColumn.setDataType(columns[j].getDataType());
          bindingColumn.setExpression(DEUtil.getExpression(columns[j]));
          bindingColumn.setName(columns[j].getColumnName());
          tableHandle.addColumnBinding(bindingColumn,false);
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
}","protected static void insertToCell(TableHandle tableHandle,SlotHandle slot,ResultSetColumnHandle[] columns,boolean isLabel){
  for (int i=0; i < slot.getCount(); i++) {
    SlotHandle cells=((RowHandle)slot.get(i)).getCells();
    for (int j=0; j < cells.getCount(); j++) {
      CellHandle cell=(CellHandle)cells.get(j);
      try {
        if (isLabel) {
          LabelHandle labelItemHandle=SessionHandleAdapter.getInstance().getReportDesignHandle().getElementFactory().newLabel(null);
          labelItemHandle.setText(columns[j].getColumnName());
          cell.addElement(labelItemHandle,cells.getSlotID());
        }
 else {
          DataItemHandle dataHandle=SessionHandleAdapter.getInstance().getReportDesignHandle().getElementFactory().newDataItem(null);
          dataHandle.setResultSetColumn(columns[j].getColumnName());
          cell.addElement(dataHandle,cells.getSlotID());
          ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,columns[j].getColumnName());
          bindingColumn.setDataType(columns[j].getDataType());
          bindingColumn.setExpression(DEUtil.getExpression(columns[j]));
          tableHandle.addColumnBinding(bindingColumn,false);
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
}",0.9590909090909092
78294,"protected static DataItemHandle performInsertParameter(ScalarParameterHandle model) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  dataHandle.setValueExpr(DEUtil.getExpression(model));
  return dataHandle;
}","protected static DataItemHandle performInsertParameter(ScalarParameterHandle model) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getName());
  bindingColumn.setDataType(model.getDataType());
  bindingColumn.setExpression(DEUtil.getExpression(model));
  dataHandle.addColumnBinding(bindingColumn,false);
  dataHandle.setResultSetColumn(bindingColumn.getColumnName());
  return dataHandle;
}",0.6245353159851301
78295,"protected void openQuery(IContent content){
  Object generateBy=content.getGenerateBy();
  if (generateBy instanceof ReportItemDesign) {
    if (!(generateBy instanceof ExtendedItemDesign)) {
      ReportItemDesign design=(ReportItemDesign)generateBy;
      IBaseQueryDefinition query=design.getQuery();
      if (query != null) {
        IResultSet rset=dataEngine.execute(query);
        resultSets.push(rset);
      }
    }
  }
  InstanceID iid=content.getInstanceID();
  if (iid != null) {
    DataID dataId=iid.getDataID();
    while (dataId == null && iid.getParentID() != null) {
      iid=iid.getParentID();
      dataId=iid.getDataID();
    }
    if (dataId != null) {
      if (!resultSets.isEmpty()) {
        IResultSet rset=(IResultSet)resultSets.peek();
        if (rset != null) {
          long rowId=dataId.getRowID();
          if (rowId != -1 && rowId != rset.getCurrentPosition()) {
            rset.skipTo(rowId);
          }
        }
      }
    }
  }
  if (generateBy instanceof DataItemDesign && content instanceof DataContent) {
    DataItemDesign design=(DataItemDesign)generateBy;
    DataContent data=(DataContent)content;
    if (design.getMap() == null) {
      String valueExpr=design.getValue();
      if (valueExpr != null) {
        Object value=context.evaluate(valueExpr);
        data.setValue(value);
      }
    }
  }
}","protected void openQuery(IContent content){
  Object generateBy=content.getGenerateBy();
  if (generateBy instanceof ReportItemDesign) {
    if (!(generateBy instanceof ExtendedItemDesign)) {
      InstanceID iid=content.getInstanceID();
      if (iid != null) {
        DataID dataId=iid.getDataID();
        if (dataId != null) {
          DataSetID dataSetId=dataId.getDataSetID();
          if (dataSetId != null) {
            DataSetID parentSetId=dataSetId.getParentID();
            long parentRowId=dataSetId.getRowID();
            if (parentSetId != null && parentRowId != -1) {
              if (!resultSets.isEmpty()) {
                IResultSet rset=(IResultSet)resultSets.peek();
                if (rset != null) {
                  if (parentRowId != rset.getCurrentPosition()) {
                    rset.skipTo(parentRowId);
                  }
                }
              }
            }
          }
        }
      }
      ReportItemDesign design=(ReportItemDesign)generateBy;
      IBaseQueryDefinition query=design.getQuery();
      if (query != null) {
        IResultSet rset=dataEngine.execute(query);
        resultSets.push(rset);
      }
    }
  }
  InstanceID iid=content.getInstanceID();
  if (iid != null) {
    DataID dataId=iid.getDataID();
    while (dataId == null && iid.getParentID() != null) {
      iid=iid.getParentID();
      dataId=iid.getDataID();
    }
    if (dataId != null) {
      if (!resultSets.isEmpty()) {
        IResultSet rset=(IResultSet)resultSets.peek();
        if (rset != null) {
          long rowId=dataId.getRowID();
          if (rowId != -1 && rowId != rset.getCurrentPosition()) {
            rset.skipTo(rowId);
          }
        }
      }
    }
  }
  if (generateBy instanceof DataItemDesign && content instanceof DataContent) {
    DataItemDesign design=(DataItemDesign)generateBy;
    DataContent data=(DataContent)content;
    if (design.getMap() == null) {
      String valueExpr=design.getValue();
      if (valueExpr != null) {
        Object value=context.evaluate(valueExpr);
        data.setValue(value);
      }
    }
  }
}",0.5230680507497116
78296,"public void startContent(IContent content){
  List children=root.getChildren();
  if (parent != null) {
    children=parent.getChildren();
  }
  if (children.contains(content)) {
    children.add(content);
  }
  parent=content;
}","public void startContent(IContent content){
  List children=root.getChildren();
  if (parent != null) {
    children=parent.getChildren();
  }
  if (!children.contains(content)) {
    children.add(content);
  }
  parent=content;
}",0.9978213507625272
78297,"private void refreshDataSets(){
  String selectedDataSetName=dataSetChooser.getText();
  String[] oldList=dataSetChooser.getItems();
  List avaiableList=SessionHandleAdapter.getInstance().getReportDesignHandle().getVisibleDataSets();
  String[] newList=(String[])avaiableList.toArray(new String[]{});
  if (oldList.length != newList.length) {
    dataSetChooser.setItems(newList);
    if (StringUtil.isBlank(selectedDataSetName)) {
      dataSetChooser.select(0);
      refreshColumns(false);
    }
 else {
      dataSetChooser.setText(selectedDataSetName);
    }
  }
}","private void refreshDataSets(){
  String selectedDataSetName=dataSetChooser.getText();
  String[] oldList=dataSetChooser.getItems();
  String[] newList=ChoiceSetFactory.getDataSets();
  if (oldList.length != newList.length) {
    dataSetChooser.setItems(newList);
    if (StringUtil.isBlank(selectedDataSetName)) {
      dataSetChooser.select(0);
      refreshColumns(false);
    }
 else {
      dataSetChooser.setText(selectedDataSetName);
    }
  }
}",0.8305582761998042
78298,"/** 
 * @return
 */
private RDSaveUtil getRdSaveUtil(){
  if (this.rdSaveUtil == null) {
    rdSaveUtil=new RDSaveUtil(context,queryDefn,queryDefn.getQueryResultsID());
  }
  return this.rdSaveUtil;
}","/** 
 * @return
 */
private RDSaveUtil getRdSaveUtil(){
  if (this.rdSaveUtil == null) {
    rdSaveUtil=new RDSaveUtil(context,queryDefn,queryResults.getID());
  }
  return this.rdSaveUtil;
}",0.9565217391304348
78299,"/** 
 * @param queryResults
 * @param queryScope
 */
private ResultIterator(IQueryResults queryResults,ExprManager exprManager,Scriptable queryScope){
  this.queryResults=queryResults;
  this.exprManager=exprManager;
  this.queryScope=queryScope;
  queryScope.put(""String_Node_Str"",queryScope,new JSTempRowObject(exprManager,queryScope));
}","/** 
 * @param queryResults
 * @param queryScope
 */
private ResultIterator(QueryResults queryResults,ExprManager exprManager,Scriptable queryScope){
  this.queryResults=queryResults;
  this.exprManager=exprManager;
  this.queryScope=queryScope;
  queryScope.put(""String_Node_Str"",queryScope,new JSTempRowObject(exprManager,queryScope));
}",0.9985272459499264
78300,"public String getID(){
  return IDUtil.nextQursID();
}","public String getID(){
  if (queryResultID == null)   queryResultID=IDUtil.nextQursID();
  return queryResultID;
}",0.6190476190476191
78301,"/** 
 * @param inputStream
 */
public void doSave(OutputStream outputStream){
  try {
    this.groupInformationUtil.saveGroupsToStream(outputStream);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * @param inputStream
 * @throws DataException 
 */
public void doSave(OutputStream outputStream) throws DataException {
  try {
    this.groupInformationUtil.saveGroupsToStream(outputStream);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}",0.7362428842504743
78302,"public IResultMetaData getResultMetaData() throws BirtException {
  return null;
}","public IResultMetaData getResultMetaData() throws BirtException {
  return new ResultMetaData(new ResultClass(new ArrayList()));
}",0.7735849056603774
78303,"/** 
 * @param queryDefn
 */
PreparedDummyQuery(IQueryDefinition queryDefn,Scriptable sharedScope){
}","/** 
 * @param context 
 * @param queryDefn
 */
PreparedDummyQuery(DataEngineContext context,IQueryDefinition queryDefn,Scriptable sharedScope){
}",0.8178137651821862
78304,"public void close() throws BirtException {
  this.openStatus=ENDED;
}","public void close() throws BirtException {
  this.openStatus=ENDED;
  this.getRdSaveUtil().doSaveFinish();
}",0.7796610169491526
78305,"public Object getValue(String name) throws BirtException {
  checkOpened();
  return ExprEvaluateUtil.evaluateRawExpression(this.exprManager.getExpr(name),queryScope);
}","public Object getValue(String name) throws BirtException {
  checkOpened();
  Object value=ExprEvaluateUtil.evaluateRawExpression(this.exprManager.getExpr(name),queryScope);
  this.getRdSaveUtil().doSaveExpr(name,value);
  return value;
}",0.7960687960687961
78306,"/** 
 * Deletes the specified file from ODA driver path and viewer dirver path, NOTE just the file name is used.
 * @param filePath
 */
public void deleteJarFromODADir(){
  File source=new File(filePath);
  File odaDir=getDriverLocation();
  File viewDir=getViewerDriverLocation();
  File dest1=null, dest2=null;
  if (odaDir != null) {
    dest1=new File(odaDir.getAbsolutePath() + File.separator + source.getName());
    if (dest1.exists()) {
      if (!dest1.delete()) {
        dest1.deleteOnExit();
      }
    }
  }
  if (viewDir != null) {
    dest2=new File(viewDir.getAbsolutePath() + File.separator + source.getName());
    if (dest2.exists()) {
      if (!dest2.delete()) {
        dest2.deleteOnExit();
      }
    }
  }
}","/** 
 * Deletes the specified file from ODA driver path and viewer dirver path, NOTE just the file name is used.
 * @param filePath
 */
public void deleteJarFromODADir(){
  File source=new File(filePath);
  File odaDir=getDriverLocation();
  File dest1=null;
  if (odaDir != null) {
    dest1=new File(odaDir.getAbsolutePath() + File.separator + source.getName());
    if (dest1.exists()) {
      if (!dest1.delete()) {
        dest1.deleteOnExit();
      }
    }
  }
}",0.7797173732335827
78307,"/** 
 * Copies the specified file to ODA driver path and viewer dirver path.
 * @param filePath
 */
public void copyJarToODADir(){
  File source=new File(filePath);
  File odaDir=getDriverLocation();
  File viewDir=getViewerDriverLocation();
  File dest1=null, dest2=null;
  if (odaDir != null) {
    dest1=new File(odaDir.getAbsolutePath() + File.separator + source.getName());
  }
  if (viewDir != null) {
    dest2=new File(viewDir.getAbsolutePath() + File.separator + source.getName());
  }
  if (source.exists()) {
    FileChannel in=null, out1=null, out2=null;
    try {
      if (dest1 != null) {
        try {
          out1=new FileOutputStream(dest1).getChannel();
        }
 catch (        FileNotFoundException e) {
        }
      }
      if (dest2 != null) {
        try {
          out2=new FileOutputStream(dest2).getChannel();
        }
 catch (        FileNotFoundException e) {
        }
      }
      if (out1 != null) {
        in=new FileInputStream(source).getChannel();
        long size=in.size();
        MappedByteBuffer buf=in.map(FileChannel.MapMode.READ_ONLY,0,size);
        out1.write(buf);
      }
      try {
        if (in != null) {
          in.close();
        }
      }
 catch (      IOException e1) {
      }
      if (out2 != null) {
        in=new FileInputStream(source).getChannel();
        long size=in.size();
        MappedByteBuffer buf=in.map(FileChannel.MapMode.READ_ONLY,0,size);
        out2.write(buf);
      }
    }
 catch (    FileNotFoundException e) {
    }
catch (    IOException e) {
    }
 finally {
      try {
        if (in != null) {
          in.close();
        }
        if (out1 != null) {
          out1.close();
        }
        if (out2 != null) {
          out2.close();
        }
      }
 catch (      IOException e1) {
      }
    }
  }
}","/** 
 * Copies the specified file to ODA driver path and viewer dirver path.
 * @param filePath
 */
public void copyJarToODADir(){
  File source=new File(filePath);
  File odaDir=getDriverLocation();
  File dest1=null;
  if (odaDir != null) {
    dest1=new File(odaDir.getAbsolutePath() + File.separator + source.getName());
  }
  if (source.exists()) {
    FileChannel in=null, out1=null;
    try {
      if (dest1 != null) {
        try {
          out1=new FileOutputStream(dest1).getChannel();
        }
 catch (        FileNotFoundException e) {
        }
      }
      if (out1 != null) {
        in=new FileInputStream(source).getChannel();
        long size=in.size();
        MappedByteBuffer buf=in.map(FileChannel.MapMode.READ_ONLY,0,size);
        out1.write(buf);
      }
      try {
        if (in != null) {
          in.close();
        }
      }
 catch (      IOException e1) {
      }
    }
 catch (    FileNotFoundException e) {
    }
catch (    IOException e) {
    }
 finally {
      try {
        if (in != null) {
          in.close();
        }
        if (out1 != null) {
          out1.close();
        }
      }
 catch (      IOException e1) {
      }
    }
  }
}",0.6984021304926764
78308,"/** 
 * Adds event listeners
 */
private void addControlListeners(){
  jdbcUrl.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!jdbcUrl.isFocusControl() && jdbcUrl.getText().trim().length() == 0) {
        return;
      }
      verifyJDBCProperties();
      updateTestButton();
    }
  }
);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testButton.setEnabled(false);
      try {
        if (testConnection()) {
          MessageDialog.openInformation(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
        }
 else {
          MessageDialog.openError(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
        }
      }
 catch (      OdaException e1) {
        MessageDialog.openError(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e1.getLocalizedMessage());
      }
      testButton.setEnabled(true);
    }
  }
);
  manageButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      JdbcDriverManagerDialog dlg=new JdbcDriverManagerDialog(getShell());
      manageButton.setEnabled(false);
      testButton.setEnabled(false);
      if (dlg.open() == Window.OK) {
        BusyIndicator.showWhile(getShell() == null ? null : getShell().getDisplay(),new Runnable(){
          public void run(){
            okPressedProcess();
          }
        }
);
      }
      testButton.setEnabled(true);
      manageButton.setEnabled(true);
    }
  }
);
}","/** 
 * Adds event listeners
 */
private void addControlListeners(){
  jdbcUrl.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!jdbcUrl.isFocusControl() && jdbcUrl.getText().trim().length() == 0) {
        return;
      }
      verifyJDBCProperties();
      updateTestButton();
    }
  }
);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testButton.setEnabled(false);
      try {
        if (testConnection()) {
          MessageDialog.openInformation(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
        }
 else {
          MessageDialog.openError(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
        }
      }
 catch (      OdaException e1) {
        MessageDialog.openError(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e1.getLocalizedMessage());
      }
      testButton.setEnabled(true);
    }
  }
);
  manageButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      JdbcDriverManagerDialog dlg=new JdbcDriverManagerDialog(getShell());
      manageButton.setEnabled(false);
      testButton.setEnabled(false);
      if (dlg.open() == Window.OK) {
        BusyIndicator.showWhile(getShell() == null ? null : getShell().getDisplay(),new Runnable(){
          public void run(){
            okPressedProcess();
          }
        }
);
      }
      updateTestButton();
      manageButton.setEnabled(true);
    }
  }
);
}",0.9796042617960428
78309,"public void widgetSelected(SelectionEvent e){
  JdbcDriverManagerDialog dlg=new JdbcDriverManagerDialog(getShell());
  manageButton.setEnabled(false);
  testButton.setEnabled(false);
  if (dlg.open() == Window.OK) {
    BusyIndicator.showWhile(getShell() == null ? null : getShell().getDisplay(),new Runnable(){
      public void run(){
        okPressedProcess();
      }
    }
);
  }
  testButton.setEnabled(true);
  manageButton.setEnabled(true);
}","public void widgetSelected(SelectionEvent e){
  JdbcDriverManagerDialog dlg=new JdbcDriverManagerDialog(getShell());
  manageButton.setEnabled(false);
  testButton.setEnabled(false);
  if (dlg.open() == Window.OK) {
    BusyIndicator.showWhile(getShell() == null ? null : getShell().getDisplay(),new Runnable(){
      public void run(){
        okPressedProcess();
      }
    }
);
  }
  updateTestButton();
  manageButton.setEnabled(true);
}",0.9339305711086228
78310,"private String[] getDataSets(){
  ArrayList dataSetList=new ArrayList();
  for (Iterator iter=DEUtil.getDataSets().iterator(); iter.hasNext(); ) {
    DataSetHandle dataSet=(DataSetHandle)iter.next();
    if (!dataSet.paramBindingsIterator().hasNext()) {
      dataSetList.add(dataSet.getQualifiedName());
    }
  }
  return (String[])dataSetList.toArray(new String[dataSetList.size()]);
}","private String[] getDataSets(){
  return (String[])DEUtil.getDataSets().toArray(new String[0]);
}",0.3621399176954732
78311,"private void refreshDataSets(){
  String selectedDataSetName=dataSetChooser.getText();
  String[] oldList=dataSetChooser.getItems();
  ArrayList avaiableList=new ArrayList();
  for (Iterator iter=SessionHandleAdapter.getInstance().getReportDesignHandle().getVisibleDataSets().iterator(); iter.hasNext(); ) {
    DataSetHandle dataSet=(DataSetHandle)iter.next();
    if (!dataSet.parametersIterator().hasNext()) {
      avaiableList.add(dataSet.getQualifiedName());
    }
  }
  String[] newList=(String[])avaiableList.toArray(new String[]{});
  if (oldList.length != newList.length) {
    dataSetChooser.setItems(newList);
    if (StringUtil.isBlank(selectedDataSetName)) {
      dataSetChooser.select(0);
      refreshColumns(false);
    }
 else {
      dataSetChooser.setText(selectedDataSetName);
    }
  }
}","private void refreshDataSets(){
  String selectedDataSetName=dataSetChooser.getText();
  String[] oldList=dataSetChooser.getItems();
  List avaiableList=SessionHandleAdapter.getInstance().getReportDesignHandle().getVisibleDataSets();
  String[] newList=(String[])avaiableList.toArray(new String[]{});
  if (oldList.length != newList.length) {
    dataSetChooser.setItems(newList);
    if (StringUtil.isBlank(selectedDataSetName)) {
      dataSetChooser.select(0);
      refreshColumns(false);
    }
 else {
      dataSetChooser.setText(selectedDataSetName);
    }
  }
}",0.6903553299492385
78312,"/** 
 * Gets all available themes .
 * @return A String array contains all available themes.
 */
public static String[] getThemes(){
  ArrayList list=new ArrayList();
  list.add(CHOICE_NONE);
  ModuleHandle handle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  Iterator iterator=handle.getAllThemes().iterator();
  if (iterator != null) {
    while (iterator.hasNext()) {
      ReportElementHandle elementHandle=(ReportElementHandle)iterator.next();
      list.add(elementHandle.getQualifiedName());
    }
  }
  return (String[])list.toArray(new String[0]);
}","/** 
 * Gets all available themes .
 * @return A String array contains all available themes.
 */
public static String[] getThemes(){
  ArrayList list=new ArrayList();
  list.add(CHOICE_NONE);
  ModuleHandle handle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  Iterator iterator=handle.getVisibleThemes().iterator();
  if (iterator != null) {
    while (iterator.hasNext()) {
      ReportElementHandle elementHandle=(ReportElementHandle)iterator.next();
      list.add(elementHandle.getQualifiedName());
    }
  }
  return (String[])list.toArray(new String[0]);
}",0.9913194444444444
78313,"/** 
 * Saves the design file to temp directory.
 * @param filename the new file name to save
 * @throws IOException if any exception
 */
protected void saveLibraryAs(String filename) throws IOException {
  if (libraryHandle == null)   return;
  String outputPath=PLUGIN_PATH + getClassFolder() + OUTPUT_FOLDER;
  File outputFolder=new File(outputPath);
  if (!outputFolder.exists() && !outputFolder.mkdir()) {
    throw new IOException(""String_Node_Str"");
  }
  libraryHandle.saveAs(outputPath + filename);
}","/** 
 * Saves the design file to temp directory.
 * @param filename the new file name to save
 * @throws IOException if any exception
 */
protected void saveLibraryAs(String filename) throws IOException {
  if (libraryHandle == null)   return;
  String outputPath=getClassFolder() + OUTPUT_FOLDER;
  File outputFolder=new File(outputPath);
  if (!outputFolder.exists() && !outputFolder.mkdir()) {
    throw new IOException(""String_Node_Str"");
  }
  libraryHandle.saveAs(outputPath + filename);
}",0.9860557768924304
78314,"/** 
 * Locates the folder where the unit test java source file is saved.
 * @return the path name where the test java source file locates.
 */
protected String getClassFolder(){
  String className=this.getClass().getName();
  int lastDotIndex=className.lastIndexOf(""String_Node_Str"");
  className=className.substring(0,lastDotIndex);
  className=TEST_FOLDER + className.replace('.','/');
  return className;
}","/** 
 * Locates the folder where the unit test java source file is saved.
 * @return the path name where the test java source file locates.
 */
protected String getClassFolder(){
  String pathBase=null;
  ProtectionDomain domain=this.getClass().getProtectionDomain();
  if (domain != null) {
    CodeSource source=domain.getCodeSource();
    if (source != null) {
      URL url=source.getLocation();
      pathBase=url.getPath();
      if (pathBase.endsWith(""String_Node_Str""))       pathBase=pathBase.substring(0,pathBase.length() - 4);
      if (pathBase.endsWith(""String_Node_Str""))       pathBase=pathBase.substring(0,pathBase.length() - 3);
    }
  }
  pathBase=pathBase + TEST_FOLDER;
  String className=this.getClass().getName();
  int lastDotIndex=className.lastIndexOf(""String_Node_Str"");
  className=className.substring(0,lastDotIndex);
  className=pathBase + className.replace('.','/');
  return className;
}",0.4620015048908954
78315,"public void testPropertiesOfDynamicParameter() throws Exception {
  SlotHandle params=designHandle.getParameters();
  ScalarParameterHandle handle=(ScalarParameterHandle)params.get(0);
  SlotHandle dataset=designHandle.getDataSets();
  DataSetHandle ds=(DataSetHandle)dataset.get(0);
  assertEquals(""String_Node_Str"",ds.getName());
  assertEquals(""String_Node_Str"",dataset.get(1).getName());
  assertEquals(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC,handle.getValueType());
  assertEquals(DesignChoiceConstants.PARAM_TYPE_DATETIME,handle.getDataType());
  handle.setPromptText(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getPromptText());
  handle.setDataSetName(""String_Node_Str"");
  handle.setValueExpr(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getValueExpr());
  handle.setControlType(DesignChoiceConstants.PARAM_CONTROL_LIST_BOX);
  assertEquals(DesignChoiceConstants.PARAM_CONTROL_LIST_BOX,handle.getControlType());
  handle.setDefaultValue(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getDefaultValue());
  handle.setFormat(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE);
  assertEquals(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE,handle.getFormat());
  handle.setListlimit(20);
  assertEquals(20,handle.getListlimit());
  assertTrue(handle.isMustMatch());
  assertTrue(handle.isFixedOrder());
  handle=(ScalarParameterHandle)params.get(1);
  assertEquals(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC,handle.getValueType());
  assertEquals(DesignChoiceConstants.PARAM_TYPE_FLOAT,handle.getDataType());
  handle.setDataSetName(""String_Node_Str"");
  handle.setValueExpr(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getValueExpr());
  assertEquals(DesignChoiceConstants.PARAM_CONTROL_LIST_BOX,handle.getControlType());
  assertFalse(handle.isHidden());
  assertEquals(""String_Node_Str"",handle.getHelpText());
  assertFalse(handle.isConcealValue());
  assertFalse(handle.allowBlank());
  assertTrue(handle.allowNull());
  assertEquals(DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT,handle.getAlignment());
  assertEquals(""String_Node_Str"",handle.getFormat());
  assertEquals(5,handle.getListlimit());
  try {
    openDesign(""String_Node_Str"");
  }
 catch (  DesignFileException e) {
  }
  super.saveAs(OUTPUT_FILE_NAME);
  assertTrue(compareTextFile(GOLDEN_FILE_NAME,OUTPUT_FILE_NAME));
}","public void testPropertiesOfDynamicParameter() throws Exception {
  SlotHandle params=designHandle.getParameters();
  ScalarParameterHandle handle=(ScalarParameterHandle)params.get(0);
  SlotHandle dataset=designHandle.getDataSets();
  DataSetHandle ds=(DataSetHandle)dataset.get(0);
  assertEquals(""String_Node_Str"",ds.getName());
  assertEquals(""String_Node_Str"",dataset.get(1).getName());
  assertEquals(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC,handle.getValueType());
  assertEquals(DesignChoiceConstants.PARAM_TYPE_DATETIME,handle.getDataType());
  handle.setPromptText(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getPromptText());
  handle.setDataSetName(""String_Node_Str"");
  handle.setValueExpr(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getValueExpr());
  handle.setControlType(DesignChoiceConstants.PARAM_CONTROL_LIST_BOX);
  assertEquals(DesignChoiceConstants.PARAM_CONTROL_LIST_BOX,handle.getControlType());
  handle.setDefaultValue(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getDefaultValue());
  handle.setCategory(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE);
  assertEquals(DesignChoiceConstants.DATETIEM_FORMAT_TYPE_LONG_DATE,handle.getCategory());
  handle.setListlimit(20);
  assertEquals(20,handle.getListlimit());
  assertTrue(handle.isMustMatch());
  assertTrue(handle.isFixedOrder());
  handle=(ScalarParameterHandle)params.get(1);
  assertEquals(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC,handle.getValueType());
  assertEquals(DesignChoiceConstants.PARAM_TYPE_FLOAT,handle.getDataType());
  handle.setDataSetName(""String_Node_Str"");
  handle.setValueExpr(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle.getValueExpr());
  assertEquals(DesignChoiceConstants.PARAM_CONTROL_LIST_BOX,handle.getControlType());
  assertFalse(handle.isHidden());
  assertEquals(""String_Node_Str"",handle.getHelpText());
  assertFalse(handle.isConcealValue());
  assertFalse(handle.allowBlank());
  assertTrue(handle.allowNull());
  assertEquals(DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT,handle.getAlignment());
  assertEquals(""String_Node_Str"",handle.getPattern());
  assertEquals(5,handle.getListlimit());
  try {
    openDesign(""String_Node_Str"");
  }
 catch (  DesignFileException e) {
  }
  super.saveAs(OUTPUT_FILE_NAME);
  assertTrue(compareTextFile(GOLDEN_FILE_NAME,OUTPUT_FILE_NAME));
}",0.9913774973711882
78316,"public void testAddinLibrary() throws Exception {
  openDesign(""String_Node_Str"");
  designHandle.includeLibrary(LibFile,""String_Node_Str"");
  designHandle.includeLibrary(""String_Node_Str"",""String_Node_Str"");
  super.saveAs(outFileName);
  assertTrue(compareTextFile(goldenFileName,outFileName));
  try {
    designHandle.includeLibrary(LibFileError1,""String_Node_Str"");
  }
 catch (  SemanticException e) {
    assertNotNull(e);
  }
catch (  DesignFileException e) {
    assertNotNull(e);
  }
catch (  Exception e) {
    assertNotNull(e);
  }
  try {
    designHandle.includeLibrary(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  SemanticException e) {
    assertNotNull(e);
  }
catch (  DesignFileException e) {
    assertNotNull(e);
  }
catch (  Exception e) {
    assertNotNull(e);
  }
}","public void testAddinLibrary() throws Exception {
  openDesign(""String_Node_Str"");
  designHandle.includeLibrary(LibFile,""String_Node_Str"");
  designHandle.includeLibrary(""String_Node_Str"",""String_Node_Str"");
  saveAs(outFileName);
  assertTrue(compareTextFile(goldenFileName,outFileName));
  try {
    designHandle.includeLibrary(LibFileError1,""String_Node_Str"");
  }
 catch (  SemanticException e) {
    assertNotNull(e);
  }
catch (  DesignFileException e) {
    assertNotNull(e);
  }
catch (  Exception e) {
    assertNotNull(e);
  }
  try {
    designHandle.includeLibrary(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  SemanticException e) {
    assertNotNull(e);
  }
catch (  DesignFileException e) {
    assertNotNull(e);
  }
catch (  Exception e) {
    assertNotNull(e);
  }
}",0.996216897856242
78317,"/** 
 * Finds the result columns on DataSet and update the bound column with the element that uses this data set. Operations are in persistent transaction. Hence, operations in the method can not undo/redo. Parts of migration work from BIRT 2.1M5 to BIRT 2.1.0 for bound data columns.
 * @param module the libray/report instance
 * @throws SemanticException if values in result set columns are not valid in data bound columns.
 */
public static void updateBoundDataColumns(ModuleHandle module) throws SemanticException {
  ContentIterator contentIter=new ContentIterator(module.getElement());
  if (!contentIter.hasNext())   return;
  CommandStack cmdStack=module.getCommandStack();
  cmdStack.startPersistentTrans(null);
  try {
    while (contentIter.hasNext()) {
      DesignElement element=(DesignElement)contentIter.next();
      if (!(element instanceof ReportItem))       continue;
      ReportItemHandle reportItem=(ReportItemHandle)element.getHandle(module.getModule());
      DataSetHandle dataSet=reportItem.getDataSet();
      if (dataSet == null)       continue;
      setupBoundDataColumns(dataSet,reportItem);
    }
  }
 catch (  SemanticException e) {
    cmdStack.rollback();
    throw e;
  }
  cmdStack.commit();
}","/** 
 * Finds the result columns on DataSet and update the bound column with the element that uses this data set. Operations are in persistent transaction. Hence, operations in the method can not undo/redo. Parts of migration work from BIRT 2.1M5 to BIRT 2.1.0 for bound data columns.
 * @param module the libray/report instance
 * @throws SemanticException if values in result set columns are not valid in data bound columns.
 * @deprecated temporarily since another way to implement this feature.
 */
public static void updateBoundDataColumns(ModuleHandle module) throws SemanticException {
  ContentIterator contentIter=new ContentIterator(module.getElement());
  if (!contentIter.hasNext())   return;
  CommandStack cmdStack=module.getCommandStack();
  cmdStack.startPersistentTrans(null);
  try {
    while (contentIter.hasNext()) {
      DesignElement element=(DesignElement)contentIter.next();
      if (!(element instanceof ReportItem))       continue;
      ReportItemHandle reportItem=(ReportItemHandle)element.getHandle(module.getModule());
      DataSetHandle dataSet=reportItem.getDataSet();
      if (dataSet == null)       continue;
      setupBoundDataColumns(dataSet,reportItem);
    }
  }
 catch (  SemanticException e) {
    cmdStack.rollback();
    throw e;
  }
  cmdStack.commit();
}",0.9716088328075708
78318,"public void end() throws SAXException {
  String value=text.toString();
  if (StringUtil.isBlank(value))   return;
  value=ExpressionUtil.toNewExpression(value);
  String newColumnName=setupBoundDataColumn(value,value);
  doEnd(newColumnName);
}","public void end() throws SAXException {
  String value=text.toString();
  if (StringUtil.isBlank(value))   return;
  String newColumnName=setupBoundDataColumn(value,value);
  doEnd(newColumnName);
}",0.8939051918735892
78319,"IOdaDataSourceDesign newOdaDataSource(OdaDataSourceHandle source) throws BirtException {
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(""String_Node_Str"" + source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      if (""String_Node_Str"".equals(driverName) && (propName.equals(""String_Node_Str"") || propName.equals(""String_Node_Str"")) && propValue != null) {
        Object url=source.getModuleHandle().findResource((String)propValue,IResourceLocator.LIBRARY);
        propValue=url == null ? ""String_Node_Str"" : url.toString();
      }
      dteSource.addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  return dteSource;
}","IOdaDataSourceDesign newOdaDataSource(OdaDataSourceHandle source) throws BirtException {
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(""String_Node_Str"" + source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      if (""String_Node_Str"".equals(driverName) && (propName.equals(""String_Node_Str"") || propName.equals(""String_Node_Str"")) && propValue != null) {
        Object url=source.getModuleHandle().findResource((String)propValue,IResourceLocator.LIBRARY);
        propValue=url == null ? propValue : url.toString();
      }
      dteSource.addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  return dteSource;
}",0.9931398416886544
78320,"public void startPage(IPageContent page){
  pageNo++;
  if (pageNo > 1 && outputMasterPageContent == false) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  writer.openTag(HTMLTags.TAG_DIV);
  if (pageNo > 1) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
  if (page != null) {
    if (outputMasterPageContent) {
      writer.openTag(HTMLTags.TAG_DIV);
      handlePageStyle(page.getPageHeader().getStyleClass(),page.getPageHeader().getStyle());
      contentVisitor.visitList(page.getHeader(),null);
      writer.closeTag(HTMLTags.TAG_DIV);
    }
  }
  writer.openTag(HTMLTags.TAG_DIV);
  if (page != null) {
    IContent pageBody=page.getPageBody();
    IStyle bodyStyle=pageBody.getStyle();
    String bodyStyleName=pageBody.getStyleClass();
    Object genBy=page.getGenerateBy();
    if (genBy instanceof MasterPageDesign) {
      MasterPageDesign masterPage=(MasterPageDesign)genBy;
      StringBuffer styleBuffer=new StringBuffer();
      if (isEmbeddable) {
        AttributeBuilder.buildStyle(styleBuffer,bodyStyle,this);
      }
 else {
        setStyleName(bodyStyleName);
      }
      AttributeBuilder.buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,masterPage.getPageHeight());
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
  }
}","public void startPage(IPageContent page){
  pageNo++;
  if (pageNo > 1 && outputMasterPageContent == false) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  writer.openTag(HTMLTags.TAG_DIV);
  if (pageNo > 1) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
  if (page != null) {
    if (outputMasterPageContent) {
      writer.openTag(HTMLTags.TAG_DIV);
      handlePageStyle(page.getPageHeader().getStyleClass(),page.getPageHeader().getStyle());
      contentVisitor.visitList(page.getHeader(),null);
      writer.closeTag(HTMLTags.TAG_DIV);
    }
  }
  writer.openTag(HTMLTags.TAG_DIV);
  if (page != null) {
    IContent pageBody=page.getPageBody();
    IStyle bodyStyle=pageBody.getStyle();
    String bodyStyleName=pageBody.getStyleClass();
    Object genBy=page.getGenerateBy();
    if (genBy instanceof MasterPageDesign) {
      MasterPageDesign masterPage=(MasterPageDesign)genBy;
      StringBuffer styleBuffer=new StringBuffer();
      if (isEmbeddable) {
        AttributeBuilder.buildStyle(styleBuffer,bodyStyle,this);
      }
 else {
        setStyleName(bodyStyleName);
      }
      AttributeBuilder.buildSize(styleBuffer,HTMLTags.ATTR_MIN_HEIGHT,masterPage.getPageHeight());
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
  }
}",0.998490566037736
78321,"public void startText(ITextContent text){
  IStyle mergedStyle=text.getStyle();
  if (peek(mergedStyle)) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  resizeTemplateElement(text);
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=text.getX();
  DimensionType y=text.getY();
  DimensionType width=text.getWidth();
  DimensionType height=text.getHeight();
  String textValue=text.getText();
  int display;
  if (textValue != null && textValue.indexOf('\n') >= 0) {
    display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  }
 else {
    display=checkElementType(x,y,mergedStyle,styleBuffer);
  }
  String tagName;
  if (handleAction(text.getHyperlinkAction())) {
    tagName=HTMLTags.TAG_A;
    setDisplayProperty(display,DISPLAY_BLOCK | DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(mergedStyle,styleBuffer);
  }
 else {
    tagName=openTagByType(display,DISPLAY_FLAG_ALL);
    setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  setStyleName(text.getStyleClass());
  setBookmark(tagName,text.getBookmark());
  setActiveIDTypeIID(text);
  writer.attribute(HTMLTags.ATTR_TITLE,text.getHelpText());
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  handleStyle(text,styleBuffer,false);
  String verticalAlign=mergedStyle.getVerticalAlign();
  if (!""String_Node_Str"".equals(verticalAlign) && height != null) {
    writer.openTag(HTMLTags.TAG_TABLE);
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    writer.openTag(HTMLTags.TAG_TR);
    writer.openTag(HTMLTags.TAG_TD);
    StringBuffer textStyleBuffer=new StringBuffer();
    textStyleBuffer.append(""String_Node_Str"");
    textStyleBuffer.append(verticalAlign);
    textStyleBuffer.append(""String_Node_Str"");
    String textAlign=mergedStyle.getTextAlign();
    if (textAlign != null) {
      textStyleBuffer.append(""String_Node_Str"");
      textStyleBuffer.append(textAlign);
      textStyleBuffer.append(""String_Node_Str"");
    }
    writer.attribute(HTMLTags.ATTR_STYLE,textStyleBuffer);
    writer.text(textValue);
    writer.closeTag(HTMLTags.TAG_TD);
    writer.closeTag(HTMLTags.TAG_TR);
    writer.closeTag(HTMLTags.TAG_TABLE);
  }
 else {
    writer.text(textValue);
  }
  writer.closeTag(tagName);
}","public void startText(ITextContent text){
  IStyle mergedStyle=text.getStyle();
  if (peek(mergedStyle)) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  resizeTemplateElement(text);
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=text.getX();
  DimensionType y=text.getY();
  DimensionType width=text.getWidth();
  DimensionType height=text.getHeight();
  String textValue=text.getText();
  if (textValue == null || textValue == ""String_Node_Str"") {
    textValue=""String_Node_Str"";
  }
  int display;
  if (textValue != null && textValue.indexOf('\n') >= 0) {
    display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  }
 else {
    display=checkElementType(x,y,mergedStyle,styleBuffer);
  }
  String tagName;
  if (handleAction(text.getHyperlinkAction())) {
    tagName=HTMLTags.TAG_A;
    setDisplayProperty(display,DISPLAY_BLOCK | DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(mergedStyle,styleBuffer);
  }
 else {
    tagName=openTagByType(display,DISPLAY_FLAG_ALL);
    setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  setStyleName(text.getStyleClass());
  setBookmark(tagName,text.getBookmark());
  setActiveIDTypeIID(text);
  writer.attribute(HTMLTags.ATTR_TITLE,text.getHelpText());
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  handleStyle(text,styleBuffer,false);
  String verticalAlign=mergedStyle.getVerticalAlign();
  if (!""String_Node_Str"".equals(verticalAlign) && height != null) {
    writer.openTag(HTMLTags.TAG_TABLE);
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    writer.openTag(HTMLTags.TAG_TR);
    writer.openTag(HTMLTags.TAG_TD);
    StringBuffer textStyleBuffer=new StringBuffer();
    textStyleBuffer.append(""String_Node_Str"");
    textStyleBuffer.append(verticalAlign);
    textStyleBuffer.append(""String_Node_Str"");
    String textAlign=mergedStyle.getTextAlign();
    if (textAlign != null) {
      textStyleBuffer.append(""String_Node_Str"");
      textStyleBuffer.append(textAlign);
      textStyleBuffer.append(""String_Node_Str"");
    }
    writer.attribute(HTMLTags.ATTR_STYLE,textStyleBuffer);
    writer.text(textValue);
    writer.closeTag(HTMLTags.TAG_TD);
    writer.closeTag(HTMLTags.TAG_TR);
    writer.closeTag(HTMLTags.TAG_TABLE);
  }
 else {
    writer.text(textValue);
  }
  writer.closeTag(tagName);
}",0.9790419161676648
78322,"/** 
 * Populate the JointResultMetadata.
 * @param left
 * @param leftPrefix
 * @param right
 * @param rightPrefix
 * @return
 * @throws DataException
 */
private JointResultMetadata populatorJointResultMetadata(IResultClass left,String leftPrefix,IResultClass right,String rightPrefix) throws DataException {
  int length=left.getFieldCount() + right.getFieldCount() + ((dataSet.getComputedColumns() == null) ? 0 : dataSet.getComputedColumns().size());
  int[] index=new int[length];
  int[] columnSource=new int[length];
  List projectedColumns=new ArrayList();
  for (int i=1; i <= left.getFieldCount(); i++) {
    index[i - 1]=i;
    columnSource[i - 1]=JointResultMetadata.COLUMN_TYPE_LEFT;
    projectedColumns.add(new ResultFieldMetadata(i,leftPrefix + left.getFieldName(i),leftPrefix + left.getFieldName(i),left.getFieldValueClass(i),left.getFieldNativeTypeName(i),false));
  }
  for (int i=left.getFieldCount() + 1; i <= left.getFieldCount() + right.getFieldCount(); i++) {
    index[i - 1]=i - left.getFieldCount();
    columnSource[i - 1]=JointResultMetadata.COLUMN_TYPE_RIGHT;
    projectedColumns.add(new ResultFieldMetadata(i,rightPrefix + right.getFieldName(i - left.getFieldCount()),rightPrefix + right.getFieldName(i - left.getFieldCount()),right.getFieldValueClass(i - left.getFieldCount()),right.getFieldNativeTypeName(i - left.getFieldCount()),false));
  }
  if (dataSet.getComputedColumns() != null) {
    for (int i=0; i < dataSet.getComputedColumns().size(); i++) {
      IComputedColumn cc=(IComputedColumn)dataSet.getComputedColumns().get(i);
      index[i + left.getFieldCount() + right.getFieldCount()]=-1;
      columnSource[i + left.getFieldCount() + right.getFieldCount()]=JointResultMetadata.COLUMN_TYPE_COMPUTED;
      projectedColumns.add(new ResultFieldMetadata(i,cc.getName(),cc.getName(),DataType.getClass(cc.getDataType()),null,true));
    }
  }
  ResultClass resultClass=new ResultClass(projectedColumns);
  return new JointResultMetadata(resultClass,columnSource,index);
}","/** 
 * Populate the JointResultMetadata.
 * @param left
 * @param leftPrefix
 * @param right
 * @param rightPrefix
 * @return
 * @throws DataException
 */
private JointResultMetadata populatorJointResultMetadata(IResultClass left,String leftPrefix,IResultClass right,String rightPrefix) throws DataException {
  int length=left.getFieldCount() + right.getFieldCount() + ((dataSet.getComputedColumns() == null) ? 0 : dataSet.getComputedColumns().size());
  int[] index=new int[length];
  int[] columnSource=new int[length];
  List projectedColumns=new ArrayList();
  for (int i=1; i <= left.getFieldCount(); i++) {
    index[i - 1]=i;
    columnSource[i - 1]=JointResultMetadata.COLUMN_TYPE_LEFT;
    projectedColumns.add(new ResultFieldMetadata(i,leftPrefix + left.getFieldName(i),leftPrefix + left.getFieldName(i),left.getFieldValueClass(i),left.getFieldNativeTypeName(i),false));
  }
  for (int i=left.getFieldCount() + 1; i <= left.getFieldCount() + right.getFieldCount(); i++) {
    index[i - 1]=i - left.getFieldCount();
    columnSource[i - 1]=JointResultMetadata.COLUMN_TYPE_RIGHT;
    projectedColumns.add(new ResultFieldMetadata(i,rightPrefix + right.getFieldName(i - left.getFieldCount()),rightPrefix + right.getFieldName(i - left.getFieldCount()),right.getFieldValueClass(i - left.getFieldCount()),right.getFieldNativeTypeName(i - left.getFieldCount()),false));
  }
  if (dataSet.getComputedColumns() != null) {
    for (int i=0; i < dataSet.getComputedColumns().size(); i++) {
      IComputedColumn cc=(IComputedColumn)dataSet.getComputedColumns().get(i);
      index[i + left.getFieldCount() + right.getFieldCount()]=-1;
      columnSource[i + left.getFieldCount() + right.getFieldCount()]=JointResultMetadata.COLUMN_TYPE_COMPUTED;
      projectedColumns.add(new ResultFieldMetadata(i,cc.getName(),cc.getName(),DataType.getClass(cc.getDataType()),null,true));
    }
  }
  if (dataSet.getResultSetHints() != null) {
    List hintList=dataSet.getResultSetHints();
    for (int i=0; i < hintList.size(); i++) {
      IColumnDefinition columnDefinition=(IColumnDefinition)hintList.get(i);
      for (int j=0; j < projectedColumns.size(); j++) {
        ResultFieldMetadata resultFieldMetadata=(ResultFieldMetadata)projectedColumns.get(j);
        if (columnDefinition.getColumnName().equals(resultFieldMetadata.getName())) {
          resultFieldMetadata.setAlias(columnDefinition.getAlias());
          break;
        }
      }
    }
  }
  ResultClass resultClass=new ResultClass(projectedColumns);
  return new JointResultMetadata(resultClass,columnSource,index);
}",0.8694704728699063
78323,"/** 
 * Tests to get a style property of a cell element in the table.
 * @throws Exception
 */
public void testGetColumnProperty() throws Exception {
  openDesign(fileName);
  TableHandle table=(TableHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",table);
  ColumnHandle column=(ColumnHandle)table.getColumns().get(0);
  column.setRepeatCount(2);
  assertEquals(2,column.getRepeatCount());
  DimensionHandle dh=column.getWidth();
  assertEquals(100,dh.getMeasure(),0);
  assertEquals(""String_Node_Str"",dh.getUnits());
}","/** 
 * Tests to get a style property of a cell element in the table.
 * @throws Exception
 */
public void testGetColumnProperty() throws Exception {
  openDesign(fileName);
  TableHandle table=(TableHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",table);
  ColumnHandle column=(ColumnHandle)table.getColumns().get(0);
  column.setRepeatCount(2);
  assertEquals(2,column.getRepeatCount());
  DimensionHandle dh=column.getWidth();
  assertEquals(100,dh.getMeasure(),0);
  assertEquals(""String_Node_Str"",dh.getUnits());
  assertFalse(column.suppressDuplicates());
  column.setSuppressDuplicates(true);
  assertTrue(column.suppressDuplicates());
  designHandle.getCommandStack().undo();
  assertFalse(column.suppressDuplicates());
  designHandle.getCommandStack().redo();
  assertTrue(column.suppressDuplicates());
  ElementFactory factory=new ElementFactory(designHandle.getModule());
  GridHandle grid=factory.newGridItem(""String_Node_Str"",3,3);
  ColumnHandle gridcolumn=(ColumnHandle)grid.getColumns().get(0);
  assertFalse(gridcolumn.suppressDuplicates());
}",0.6731117824773414
78324,"public void testDesignIncludeLibrary() throws Exception {
  openDesign(fileName);
  designHandle.includeLibrary(inputLibrary,""String_Node_Str"");
  LibraryHandle libAHandle=designHandle.getLibrary(""String_Node_Str"");
  TextItemHandle textLibA=(TextItemHandle)libAHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",textLibA);
  TableHandle tableLibA=(TableHandle)libAHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",tableLibA);
  ParameterHandle parameterLibA=(ParameterHandle)libAHandle.findParameter(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",parameterLibA);
  LabelHandle labelLibA=(LabelHandle)libAHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",labelLibA);
  ImageHandle imageLibA=(ImageHandle)libAHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",imageLibA);
  DataItemHandle dataLibA=(DataItemHandle)libAHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataLibA);
  DataSourceHandle dataSourceLibA=(DataSourceHandle)libAHandle.findDataSource(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataSourceLibA);
  DataSetHandle dataSetLibA=(DataSetHandle)libAHandle.findDataSet(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataSetLibA);
  ListHandle listLibA=(ListHandle)libAHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",listLibA);
  GridHandle gridLibA=(GridHandle)libAHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",gridLibA);
  TextItemHandle textLibAHandle=(TextItemHandle)designHandle.getElementFactory().newElementFrom(textLibA,""String_Node_Str"");
  TableHandle tableLibAHandle=(TableHandle)designHandle.getElementFactory().newElementFrom(tableLibA,""String_Node_Str"");
  ParameterHandle parameterLibAHandle=(ParameterHandle)designHandle.getElementFactory().newElementFrom(parameterLibA,""String_Node_Str"");
  LabelHandle labelLibAHandle=(LabelHandle)designHandle.getElementFactory().newElementFrom(labelLibA,""String_Node_Str"");
  ImageHandle imageLibAHandle=(ImageHandle)designHandle.getElementFactory().newElementFrom(imageLibA,""String_Node_Str"");
  DataItemHandle dataLibAHandle=(DataItemHandle)designHandle.getElementFactory().newElementFrom(dataLibA,""String_Node_Str"");
  DataSourceHandle dataSourceLibAHandle=(DataSourceHandle)designHandle.getElementFactory().newOdaDataSource(""String_Node_Str"");
  DataSetHandle dataSetLibAHandle=(DataSetHandle)designHandle.getElementFactory().newOdaDataSet(""String_Node_Str"");
  ListHandle listLibAHandle=(ListHandle)designHandle.getElementFactory().newElementFrom(listLibA,""String_Node_Str"");
  GridHandle gridLibAHandle=(GridHandle)designHandle.getElementFactory().newElementFrom(gridLibA,""String_Node_Str"");
  designHandle.getDataSources().add(dataSourceLibAHandle);
  designHandle.getDataSets().add(dataSetLibAHandle);
  designHandle.getBody().add(dataLibAHandle);
  designHandle.getParameters().add(parameterLibAHandle);
  designHandle.getBody().add(textLibAHandle);
  designHandle.getBody().add(labelLibAHandle);
  designHandle.getBody().add(tableLibAHandle);
  designHandle.getBody().add(imageLibAHandle);
  designHandle.getBody().add(listLibAHandle);
  designHandle.getBody().add(gridLibAHandle);
  assertEquals(""String_Node_Str"",dataSourceLibAHandle.getName());
  assertEquals(""String_Node_Str"",dataSetLibAHandle.getName());
  assertEquals(""String_Node_Str"",dataLibAHandle.getName());
  assertEquals(""String_Node_Str"",parameterLibAHandle.getName());
  assertEquals(""String_Node_Str"",textLibAHandle.getName());
  assertEquals(""String_Node_Str"",labelLibAHandle.getName());
  assertEquals(""String_Node_Str"",tableLibAHandle.getName());
  assertEquals(""String_Node_Str"",imageLibAHandle.getName());
  assertEquals(""String_Node_Str"",listLibAHandle.getName());
  assertEquals(""String_Node_Str"",gridLibAHandle.getName());
  LabelHandle labelDesignHandle=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",labelDesignHandle);
  assertEquals(""String_Node_Str"",labelDesignHandle.getStringProperty(""String_Node_Str""));
  assertEquals(""String_Node_Str"",labelDesignHandle.getStringProperty(""String_Node_Str""));
  StyleHandle styleLibA=(StyleHandle)libAHandle.findStyle(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",styleLibA);
  StyleHandle styleLibAHandle=(StyleHandle)designHandle.getElementFactory().newStyle(""String_Node_Str"");
  designHandle.getStyles().add(styleLibAHandle);
  assertEquals(""String_Node_Str"",labelDesignHandle.getStringProperty(""String_Node_Str""));
  assertEquals(""String_Node_Str"",labelDesignHandle.getStringProperty(""String_Node_Str""));
  StyleHandle styleDesignHandle=(StyleHandle)designHandle.findStyle(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",styleDesignHandle);
  styleDesignHandle.drop();
  assertEquals(""String_Node_Str"",labelDesignHandle.getStringProperty(""String_Node_Str""));
  assertEquals(null,labelDesignHandle.getStringProperty(""String_Node_Str""));
  designHandle.saveAs(outFileName);
}","public void testDesignIncludeLibrary() throws Exception {
  openDesign(fileName);
  designHandle.includeLibrary(inputLibraryName,""String_Node_Str"");
  LibraryHandle libAHandle=designHandle.getLibrary(""String_Node_Str"");
  TextItemHandle textLibA=(TextItemHandle)libAHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",textLibA);
  TableHandle tableLibA=(TableHandle)libAHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",tableLibA);
  ParameterHandle parameterLibA=(ParameterHandle)libAHandle.findParameter(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",parameterLibA);
  LabelHandle labelLibA=(LabelHandle)libAHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",labelLibA);
  ImageHandle imageLibA=(ImageHandle)libAHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",imageLibA);
  DataItemHandle dataLibA=(DataItemHandle)libAHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataLibA);
  DataSourceHandle dataSourceLibA=(DataSourceHandle)libAHandle.findDataSource(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataSourceLibA);
  DataSetHandle dataSetLibA=(DataSetHandle)libAHandle.findDataSet(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataSetLibA);
  ListHandle listLibA=(ListHandle)libAHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",listLibA);
  GridHandle gridLibA=(GridHandle)libAHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",gridLibA);
  TextItemHandle textLibAHandle=(TextItemHandle)designHandle.getElementFactory().newElementFrom(textLibA,""String_Node_Str"");
  TableHandle tableLibAHandle=(TableHandle)designHandle.getElementFactory().newElementFrom(tableLibA,""String_Node_Str"");
  ParameterHandle parameterLibAHandle=(ParameterHandle)designHandle.getElementFactory().newElementFrom(parameterLibA,""String_Node_Str"");
  LabelHandle labelLibAHandle=(LabelHandle)designHandle.getElementFactory().newElementFrom(labelLibA,""String_Node_Str"");
  ImageHandle imageLibAHandle=(ImageHandle)designHandle.getElementFactory().newElementFrom(imageLibA,""String_Node_Str"");
  DataItemHandle dataLibAHandle=(DataItemHandle)designHandle.getElementFactory().newElementFrom(dataLibA,""String_Node_Str"");
  DataSourceHandle dataSourceLibAHandle=(DataSourceHandle)designHandle.getElementFactory().newOdaDataSource(""String_Node_Str"");
  DataSetHandle dataSetLibAHandle=(DataSetHandle)designHandle.getElementFactory().newOdaDataSet(""String_Node_Str"");
  ListHandle listLibAHandle=(ListHandle)designHandle.getElementFactory().newElementFrom(listLibA,""String_Node_Str"");
  GridHandle gridLibAHandle=(GridHandle)designHandle.getElementFactory().newElementFrom(gridLibA,""String_Node_Str"");
  designHandle.getDataSources().add(dataSourceLibAHandle);
  designHandle.getDataSets().add(dataSetLibAHandle);
  designHandle.getBody().add(dataLibAHandle);
  designHandle.getParameters().add(parameterLibAHandle);
  designHandle.getBody().add(textLibAHandle);
  designHandle.getBody().add(labelLibAHandle);
  designHandle.getBody().add(tableLibAHandle);
  designHandle.getBody().add(imageLibAHandle);
  designHandle.getBody().add(listLibAHandle);
  designHandle.getBody().add(gridLibAHandle);
  assertEquals(""String_Node_Str"",dataSourceLibAHandle.getName());
  assertEquals(""String_Node_Str"",dataSetLibAHandle.getName());
  assertEquals(""String_Node_Str"",dataLibAHandle.getName());
  assertEquals(""String_Node_Str"",parameterLibAHandle.getName());
  assertEquals(""String_Node_Str"",textLibAHandle.getName());
  assertEquals(""String_Node_Str"",labelLibAHandle.getName());
  assertEquals(""String_Node_Str"",tableLibAHandle.getName());
  assertEquals(""String_Node_Str"",imageLibAHandle.getName());
  assertEquals(""String_Node_Str"",listLibAHandle.getName());
  assertEquals(""String_Node_Str"",gridLibAHandle.getName());
  LabelHandle labelDesignHandle=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",labelDesignHandle);
  assertEquals(""String_Node_Str"",labelDesignHandle.getStringProperty(""String_Node_Str""));
  assertEquals(""String_Node_Str"",labelDesignHandle.getStringProperty(""String_Node_Str""));
  StyleHandle styleLibA=(StyleHandle)libAHandle.findStyle(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",styleLibA);
  StyleHandle styleLibAHandle=(StyleHandle)designHandle.getElementFactory().newStyle(""String_Node_Str"");
  designHandle.getStyles().add(styleLibAHandle);
  assertEquals(""String_Node_Str"",labelDesignHandle.getStringProperty(""String_Node_Str""));
  assertEquals(""String_Node_Str"",labelDesignHandle.getStringProperty(""String_Node_Str""));
  StyleHandle styleDesignHandle=(StyleHandle)designHandle.findStyle(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",styleDesignHandle);
  styleDesignHandle.drop();
  assertEquals(""String_Node_Str"",labelDesignHandle.getStringProperty(""String_Node_Str""));
  assertEquals(null,labelDesignHandle.getStringProperty(""String_Node_Str""));
  super.saveAs(outFileName);
}",0.9979077413569792
78325,"public void testDuplicateDesign() throws Exception {
  openDesign(fileName);
  designHandle.includeLibrary(inputLibrary,""String_Node_Str"");
  LibraryHandle libAHandle=designHandle.getLibrary(""String_Node_Str"");
  TextItemHandle text1LibA=(TextItemHandle)libAHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",text1LibA);
  TextItemHandle text1LibAHandle=(TextItemHandle)designHandle.getElementFactory().newElementFrom(text1LibA,""String_Node_Str"");
  designHandle.getBody().add(text1LibAHandle);
  text1LibAHandle.setName(""String_Node_Str"");
  TextItemHandle text4LibA=(TextItemHandle)libAHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",text4LibA);
  try {
    TextItemHandle text4LibAHandle=(TextItemHandle)designHandle.getElementFactory().newElementFrom(text4LibA,""String_Node_Str"");
    designHandle.getBody().add(text4LibAHandle);
  }
 catch (  Exception e) {
    assertNotNull(e);
  }
}","public void testDuplicateDesign() throws Exception {
  openDesign(fileName);
  designHandle.includeLibrary(inputLibraryName,""String_Node_Str"");
  LibraryHandle libAHandle=designHandle.getLibrary(""String_Node_Str"");
  TextItemHandle text1LibA=(TextItemHandle)libAHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",text1LibA);
  TextItemHandle text1LibAHandle=(TextItemHandle)designHandle.getElementFactory().newElementFrom(text1LibA,""String_Node_Str"");
  designHandle.getBody().add(text1LibAHandle);
  text1LibAHandle.setName(""String_Node_Str"");
  TextItemHandle text4LibA=(TextItemHandle)libAHandle.findElement(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",text4LibA);
  try {
    TextItemHandle text4LibAHandle=(TextItemHandle)designHandle.getElementFactory().newElementFrom(text4LibA,""String_Node_Str"");
    designHandle.getBody().add(text4LibAHandle);
  }
 catch (  Exception e) {
    assertNotNull(e);
  }
}",0.9978700745473909
78326,"public void testDBRefer() throws Exception {
  openDesign(fileName);
  designHandle.includeLibrary(inputLibrary,""String_Node_Str"");
  LibraryHandle libAHandle=designHandle.getLibrary(""String_Node_Str"");
  DataSourceHandle dataSourceLibA=(DataSourceHandle)libAHandle.findDataSource(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataSourceLibA);
  DataSetHandle dataSetLibA=(DataSetHandle)libAHandle.findDataSet(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataSetLibA);
  DataSetHandle dataSetLibAHandle=(DataSetHandle)designHandle.getElementFactory().newOdaDataSet(""String_Node_Str"");
  designHandle.getDataSets().add(dataSetLibAHandle);
  TableHandle tableHandle=(TableHandle)designHandle.getElementFactory().newTableItem(""String_Node_Str"");
  designHandle.getBody().add(tableHandle);
  dataSetLibAHandle.setDataSource(""String_Node_Str"");
  tableHandle.setDataSet(dataSetLibA);
}","public void testDBRefer() throws Exception {
  openDesign(fileName);
  designHandle.includeLibrary(inputLibraryName,""String_Node_Str"");
  LibraryHandle libAHandle=designHandle.getLibrary(""String_Node_Str"");
  DataSourceHandle dataSourceLibA=(DataSourceHandle)libAHandle.findDataSource(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataSourceLibA);
  DataSetHandle dataSetLibA=(DataSetHandle)libAHandle.findDataSet(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",dataSetLibA);
  DataSetHandle dataSetLibAHandle=(DataSetHandle)designHandle.getElementFactory().newOdaDataSet(""String_Node_Str"");
  designHandle.getDataSets().add(dataSetLibAHandle);
  TableHandle tableHandle=(TableHandle)designHandle.getElementFactory().newTableItem(""String_Node_Str"");
  designHandle.getBody().add(tableHandle);
  dataSetLibAHandle.setDataSource(""String_Node_Str"");
  tableHandle.setDataSet(dataSetLibA);
}",0.9977753058954394
78327,"/** 
 * Tests to read and set properties on a GroupElement.
 * @throws Exception if errors occur when opens the design file
 */
public void testProperties() throws Exception {
  openDesign(""String_Node_Str"");
  ListHandle list=(ListHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(list);
  SlotHandle groupSlot=list.getGroups();
  GroupHandle group=(GroupHandle)groupSlot.get(0);
  group.setName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",group.getDisplayLabel(DesignElement.FULL_LABEL));
  assertEquals(""String_Node_Str"",group.getGroupStart());
  group.setName(""String_Node_Str"");
  assertEquals(null,group.getDisplayLabel(DesignElement.USER_LABEL));
  group.setName(""String_Node_Str"");
  assertEquals(null,group.getDisplayLabel(DesignElement.USER_LABEL));
  group.setInterval(DesignChoiceConstants.INTERVAL_PREFIX);
  assertEquals(DesignChoiceConstants.INTERVAL_PREFIX,group.getInterval());
  group.setIntervalRange(0.1234);
  assertTrue(0.1234 == group.getIntervalRange());
  group.setKeyExpr(""String_Node_Str"");
  assertEquals(""String_Node_Str"",group.getKeyExpr());
  group.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
  assertEquals(DesignChoiceConstants.SORT_DIRECTION_DESC,group.getSortDirection());
  group.setOnPrepare(""String_Node_Str"");
  assertEquals(""String_Node_Str"",group.getOnPrepare());
}","/** 
 * Tests to read and set properties on a GroupElement.
 * @throws Exception if errors occur when opens the design file
 */
public void testProperties() throws Exception {
  openDesign(""String_Node_Str"");
  ListHandle list=(ListHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(list);
  SlotHandle groupSlot=list.getGroups();
  GroupHandle group=(GroupHandle)groupSlot.get(0);
  group.setName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",group.getDisplayLabel(DesignElement.FULL_LABEL));
  assertEquals(""String_Node_Str"",group.getGroupStart());
  group.setName(""String_Node_Str"");
  assertEquals(null,group.getDisplayLabel(DesignElement.USER_LABEL));
  group.setName(""String_Node_Str"");
  assertEquals(null,group.getDisplayLabel(DesignElement.USER_LABEL));
  assertFalse(group.hideDetail());
  group.setHideDetail(true);
  assertTrue(group.hideDetail());
  designHandle.getCommandStack().undo();
  assertFalse(group.hideDetail());
  designHandle.getCommandStack().redo();
  assertTrue(group.hideDetail());
  ElementFactory factory=new ElementFactory(designHandle.getModule());
  TableGroupHandle tablegroup=factory.newTableGroup();
  assertFalse(tablegroup.hideDetail());
  group.setInterval(DesignChoiceConstants.INTERVAL_PREFIX);
  assertEquals(DesignChoiceConstants.INTERVAL_PREFIX,group.getInterval());
  group.setIntervalRange(0.1234);
  assertTrue(0.1234 == group.getIntervalRange());
  group.setKeyExpr(""String_Node_Str"");
  assertEquals(""String_Node_Str"",group.getKeyExpr());
  group.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
  assertEquals(DesignChoiceConstants.SORT_DIRECTION_DESC,group.getSortDirection());
  group.setOnPrepare(""String_Node_Str"");
  assertEquals(""String_Node_Str"",group.getOnPrepare());
}",0.8667736757624398
78328,"public void setEnabled(boolean enabled){
  this.btnApproximate.setSelection(!getFormatSpecifier().isPrecise());
  this.btnApproximate.setEnabled(enabled);
  this.txtDelimiter.setEnabled(enabled);
  this.txtPrefix.setEnabled(enabled);
  this.txtSuffix.setEnabled(enabled);
  this.btnUseNumerator.setEnabled(enabled && btnApproximate.getSelection());
  this.btnUseDenorminator.setEnabled(enabled && btnApproximate.getSelection());
  if (getFormatSpecifier().getNumerator() > 0) {
    this.btnUseNumerator.setSelection(true);
  }
 else {
    this.btnUseDenorminator.setSelection(true);
  }
  this.spnNumerator.setEnabled(enabled && btnApproximate.getSelection() && btnUseNumerator.getSelection());
  this.spnFractionDigits.setEnabled(enabled && btnApproximate.getSelection() && btnUseDenorminator.getSelection());
  super.setEnabled(enabled);
}","public void setEnabled(boolean enabled){
  this.btnApproximate.setSelection(!getFormatSpecifier().isPrecise());
  this.btnApproximate.setEnabled(enabled);
  this.txtDelimiter.setEnabled(enabled);
  this.txtPrefix.setEnabled(enabled);
  this.txtSuffix.setEnabled(enabled);
  this.btnUseNumerator.setEnabled(enabled && btnApproximate.getSelection());
  this.btnUseDenorminator.setEnabled(enabled && btnApproximate.getSelection());
  if (getFormatSpecifier().getNumerator() > 0) {
    this.btnUseNumerator.setSelection(true);
    this.btnUseDenorminator.setSelection(false);
  }
 else {
    this.btnUseNumerator.setSelection(false);
    this.btnUseDenorminator.setSelection(true);
  }
  this.spnNumerator.setEnabled(enabled && btnApproximate.getSelection() && btnUseNumerator.getSelection());
  this.spnFractionDigits.setEnabled(enabled && btnApproximate.getSelection() && btnUseDenorminator.getSelection());
  super.setEnabled(enabled);
}",0.9465391108610016
78329,"private void updateUIState(){
  if (cmbDataType.getText().equals(""String_Node_Str"")) {
    if (this.btnStandard.getSelection()) {
      cpWrapStandardNumber.setEnabled(true);
      cpWrapAdvancedNumber.setEnabled(false);
      cpWrapFractionNumber.setEnabled(false);
    }
 else     if (this.btnAdvanced.getSelection()) {
      cpWrapStandardNumber.setEnabled(false);
      cpWrapAdvancedNumber.setEnabled(true);
      cpWrapFractionNumber.setEnabled(false);
    }
 else     if (this.btnFraction.getSelection()) {
      cpWrapStandardNumber.setEnabled(false);
      cpWrapAdvancedNumber.setEnabled(false);
      cpWrapFractionNumber.setEnabled(true);
    }
 else {
      cpWrapStandardNumber.setEnabled(false);
      cpWrapAdvancedNumber.setEnabled(false);
      cpWrapFractionNumber.setEnabled(false);
    }
  }
 else {
    if (this.btnStandard.getSelection()) {
      cpWrapStandardDate.setEnabled(true);
      cpWrapAdvancedDate.setEnabled(false);
    }
 else     if (this.btnAdvanced.getSelection()) {
      cpWrapStandardDate.setEnabled(false);
      cpWrapAdvancedDate.setEnabled(true);
    }
 else {
      cpWrapStandardDate.setEnabled(false);
      cpWrapAdvancedDate.setEnabled(false);
    }
  }
}","private void updateUIState(){
  if (cmbDataType.getText().equals(""String_Node_Str"")) {
    if (this.btnStandard.getSelection()) {
      cpWrapStandardNumber.setEnabled(true);
      cpWrapAdvancedNumber.setEnabled(false);
      cpWrapFractionNumber.setEnabled(false);
    }
 else     if (this.btnAdvanced.getSelection()) {
      cpWrapStandardNumber.setEnabled(false);
      cpWrapAdvancedNumber.setEnabled(true);
      cpWrapFractionNumber.setEnabled(false);
    }
 else     if (this.btnFraction.getSelection()) {
      cpWrapStandardNumber.setEnabled(false);
      cpWrapAdvancedNumber.setEnabled(false);
      cpWrapFractionNumber.setEnabled(true);
    }
 else {
      cpWrapStandardNumber.setEnabled(false);
      cpWrapAdvancedNumber.setEnabled(false);
      cpWrapFractionNumber.setEnabled(false);
    }
    cmpFractionNumberDetails.setVisible(true);
    btnFraction.setVisible(true);
  }
 else {
    if (this.btnStandard.getSelection()) {
      cpWrapStandardDate.setEnabled(true);
      cpWrapAdvancedDate.setEnabled(false);
    }
 else     if (this.btnAdvanced.getSelection()) {
      cpWrapStandardDate.setEnabled(false);
      cpWrapAdvancedDate.setEnabled(true);
    }
 else {
      cpWrapStandardDate.setEnabled(false);
      cpWrapAdvancedDate.setEnabled(false);
    }
    cmpFractionNumberDetails.setVisible(false);
    btnFraction.setVisible(false);
  }
}",0.936335403726708
78330,"/** 
 * Adds event listeners
 */
private void addControlListeners(){
  jdbcUrl.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!jdbcUrl.isFocusControl()) {
        return;
      }
      verifyJDBCProperties();
      updateTestButton();
    }
  }
);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testButton.setEnabled(false);
      try {
        if (testConnection()) {
          MessageDialog.openInformation(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
        }
 else {
          MessageDialog.openError(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
        }
      }
 catch (      OdaException e1) {
        MessageDialog.openError(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e1.getLocalizedMessage());
      }
      testButton.setEnabled(true);
    }
  }
);
  manageButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      JdbcDriverManagerDialog dlg=new JdbcDriverManagerDialog(getShell());
      manageButton.setEnabled(false);
      testButton.setEnabled(false);
      if (dlg.open() == Window.OK) {
        BusyIndicator.showWhile(getShell() == null ? null : getShell().getDisplay(),new Runnable(){
          public void run(){
            okPressedProcess();
          }
        }
);
      }
      testButton.setEnabled(true);
      manageButton.setEnabled(true);
    }
  }
);
}","/** 
 * Adds event listeners
 */
private void addControlListeners(){
  jdbcUrl.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!jdbcUrl.isFocusControl() && jdbcUrl.getText().trim().length() == 0) {
        return;
      }
      verifyJDBCProperties();
      updateTestButton();
    }
  }
);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testButton.setEnabled(false);
      try {
        if (testConnection()) {
          MessageDialog.openInformation(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
        }
 else {
          MessageDialog.openError(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
        }
      }
 catch (      OdaException e1) {
        MessageDialog.openError(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e1.getLocalizedMessage());
      }
      testButton.setEnabled(true);
    }
  }
);
  manageButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      JdbcDriverManagerDialog dlg=new JdbcDriverManagerDialog(getShell());
      manageButton.setEnabled(false);
      testButton.setEnabled(false);
      if (dlg.open() == Window.OK) {
        BusyIndicator.showWhile(getShell() == null ? null : getShell().getDisplay(),new Runnable(){
          public void run(){
            okPressedProcess();
          }
        }
);
      }
      testButton.setEnabled(true);
      manageButton.setEnabled(true);
    }
  }
);
}",0.9870848708487084
78331,"public void modifyText(ModifyEvent e){
  if (!jdbcUrl.isFocusControl()) {
    return;
  }
  verifyJDBCProperties();
  updateTestButton();
}","public void modifyText(ModifyEvent e){
  if (!jdbcUrl.isFocusControl() && jdbcUrl.getText().trim().length() == 0) {
    return;
  }
  verifyJDBCProperties();
  updateTestButton();
}",0.86875
78332,"protected void createEditPolicies(){
  installEditPolicy(EditPolicy.LAYOUT_ROLE,new ReportFlowLayoutEditPolicy(){
    protected org.eclipse.gef.commands.Command getCreateCommand(    CreateRequest request){
      List list=getHost().getChildren();
      if (list.size() != 0 && !(list.get(0) instanceof EmptyEditPart)) {
        return UnexecutableCommand.INSTANCE;
      }
      CreateCommand command=new CreateCommand(request.getExtendedData()){
        public void execute(){
          super.execute();
          Display.getCurrent().asyncExec(new Runnable(){
            public void run(){
              SetCurrentEditModelCommand c=new SetCurrentEditModelCommand(getNewObject());
              c.execute();
            }
          }
);
        }
      }
;
      Object model=this.getHost().getModel();
      if (model instanceof ReportElementModel) {
        command.setParent(((ReportElementModel)model).getSlotHandle());
      }
 else       if (model instanceof ListBandProxy) {
        command.setParent(((ListBandProxy)model).getSlotHandle());
      }
 else {
        command.setParent(model);
      }
      return command;
    }
  }
);
  installEditPolicy(EditPolicy.CONTAINER_ROLE,new ReportContainerEditPolicy());
}","protected void createEditPolicies(){
  installEditPolicy(EditPolicy.LAYOUT_ROLE,new ReportFlowLayoutEditPolicy(){
    protected org.eclipse.gef.commands.Command getCreateCommand(    CreateRequest request){
      List list=getHost().getChildren();
      Boolean direct=(Boolean)request.getExtendedData().get(DesignerConstants.DIRECT_CREATEITEM);
      if (list.size() != 0 && !(list.get(0) instanceof EmptyEditPart) && (direct == null || !direct.booleanValue())) {
        return UnexecutableCommand.INSTANCE;
      }
      CreateCommand command=new CreateCommand(request.getExtendedData()){
        public void execute(){
          super.execute();
          Display.getCurrent().asyncExec(new Runnable(){
            public void run(){
              SetCurrentEditModelCommand c=new SetCurrentEditModelCommand(getNewObject());
              c.execute();
            }
          }
);
        }
      }
;
      Object model=this.getHost().getModel();
      if (model instanceof ReportElementModel) {
        command.setParent(((ReportElementModel)model).getSlotHandle());
      }
 else       if (model instanceof ListBandProxy) {
        command.setParent(((ListBandProxy)model).getSlotHandle());
      }
 else {
        command.setParent(model);
      }
      return command;
    }
  }
);
  installEditPolicy(EditPolicy.CONTAINER_ROLE,new ReportContainerEditPolicy());
}",0.9445300462249616
78333,"protected org.eclipse.gef.commands.Command getCreateCommand(CreateRequest request){
  List list=getHost().getChildren();
  if (list.size() != 0 && !(list.get(0) instanceof EmptyEditPart)) {
    return UnexecutableCommand.INSTANCE;
  }
  CreateCommand command=new CreateCommand(request.getExtendedData()){
    public void execute(){
      super.execute();
      Display.getCurrent().asyncExec(new Runnable(){
        public void run(){
          SetCurrentEditModelCommand c=new SetCurrentEditModelCommand(getNewObject());
          c.execute();
        }
      }
);
    }
  }
;
  Object model=this.getHost().getModel();
  if (model instanceof ReportElementModel) {
    command.setParent(((ReportElementModel)model).getSlotHandle());
  }
 else   if (model instanceof ListBandProxy) {
    command.setParent(((ListBandProxy)model).getSlotHandle());
  }
 else {
    command.setParent(model);
  }
  return command;
}","protected org.eclipse.gef.commands.Command getCreateCommand(CreateRequest request){
  List list=getHost().getChildren();
  Boolean direct=(Boolean)request.getExtendedData().get(DesignerConstants.DIRECT_CREATEITEM);
  if (list.size() != 0 && !(list.get(0) instanceof EmptyEditPart) && (direct == null || !direct.booleanValue())) {
    return UnexecutableCommand.INSTANCE;
  }
  CreateCommand command=new CreateCommand(request.getExtendedData()){
    public void execute(){
      super.execute();
      Display.getCurrent().asyncExec(new Runnable(){
        public void run(){
          SetCurrentEditModelCommand c=new SetCurrentEditModelCommand(getNewObject());
          c.execute();
        }
      }
);
    }
  }
;
  Object model=this.getHost().getModel();
  if (model instanceof ReportElementModel) {
    command.setParent(((ReportElementModel)model).getSlotHandle());
  }
 else   if (model instanceof ListBandProxy) {
    command.setParent(((ListBandProxy)model).getSlotHandle());
  }
 else {
    command.setParent(model);
  }
  return command;
}",0.928644240570846
78334,"protected boolean moveData(Object transfer,Object target){
  if (isSupportPalletType(target,transfer)) {
    AbstractToolHandleExtends pre=BasePaletteFactory.getAbstractToolHandleExtendsFromPaletteName(transfer);
    ReportCreationTool tool=new ReportCreationTool(new ReportElementFactory(transfer),pre);
    final EditDomain domain=UIUtil.getLayoutEditPartViewer().getEditDomain();
    tool.setEditDomain(domain);
    tool.setViewer(UIUtil.getLayoutEditPartViewer());
    tool.performCreation(UIUtil.getCurrentEditPart());
    SetCurrentEditModelCommand command=new SetCurrentEditModelCommand(tool.getNewObjectFromRequest());
    command.execute();
    return true;
  }
  return super.moveData(transfer,target);
}","protected boolean moveData(Object transfer,Object target){
  if (isSupportPalletType(target,transfer)) {
    AbstractToolHandleExtends pre=BasePaletteFactory.getAbstractToolHandleExtendsFromPaletteName(transfer);
    ReportCreationTool tool=new ReportCreationTool(new ReportElementFactory(transfer),pre);
    final EditDomain domain=UIUtil.getLayoutEditPartViewer().getEditDomain();
    tool.setEditDomain(domain);
    tool.setViewer(UIUtil.getLayoutEditPartViewer());
    tool.getTargetRequest().getExtendedData().put(DesignerConstants.DIRECT_CREATEITEM,new Boolean(true));
    tool.performCreation(getLibrartReportEditPart());
    SetCurrentEditModelCommand command=new SetCurrentEditModelCommand(tool.getNewObjectFromRequest());
    command.execute();
    return true;
  }
  return super.moveData(transfer,target);
}",0.9106327462491846
78335,"protected org.eclipse.birt.data.engine.odi.IResultIterator executeOdiQuery(IEventHandler eventHandler) throws DataException {
  initialize(dataEngine,dataSetDesign,appContext);
  return new CachedResultSet((BaseQuery)this.odiQuery,resultClass,populator,eventHandler);
}","protected org.eclipse.birt.data.engine.odi.IResultIterator executeOdiQuery(IEventHandler eventHandler) throws DataException {
  JointResultMetadata jrm=getJointResultMetadata(left,right);
  resultClass=jrm.getResultClass();
  populator=JointDataSetPopulatorFactory.getBinaryTreeDataSetPopulator(left.getOdiResult(),right.getOdiResult(),jrm,matcher,joinType);
  return new CachedResultSet((BaseQuery)this.odiQuery,resultClass,populator,eventHandler);
}",0.6388888888888888
78336,"/** 
 * Initialize the instance.
 * @param dataEngine
 * @param dataSetDesign
 * @param appContext
 * @throws DataException
 */
private void initialize(DataEngineImpl dataEngine,IBaseDataSetDesign dataSetDesign,Map appContext) throws DataException {
  dataSet=(IJointDataSetDesign)dataSetDesign;
  ResultIterator left=getSortedResultIterator(dataEngine,dataSet.getLeftDataSetDesignName(),appContext,dataSet.getJoinConditions(),true);
  ResultIterator right=getSortedResultIterator(dataEngine,dataSet.getRightDataSetDesignName(),appContext,dataSet.getJoinConditions(),false);
  IJoinConditionMatcher matcher=new JoinConditionMatcher(left.getOdiResult(),right.getOdiResult(),left.getScope(),right.getScope(),dataSet.getJoinConditions());
  JointResultMetadata meta=getJointResultMetadata(left,right);
  resultClass=meta.getResultClass();
  populator=JointDataSetPopulatorFactory.getBinaryTreeDataSetPopulator(left.getOdiResult(),right.getOdiResult(),meta,matcher,dataSet.getJoinType());
}","/** 
 * Initialize the instance.
 * @param dataEngine
 * @param dataSetDesign
 * @param appContext
 * @throws DataException
 */
private void initialize(DataEngineImpl dataEngine,IBaseDataSetDesign dataSetDesign,Map appContext) throws DataException {
  dataSet=(IJointDataSetDesign)dataSetDesign;
  ResultIterator left=getSortedResultIterator(dataEngine,dataSet.getLeftDataSetDesignName(),appContext,dataSet.getJoinConditions(),true);
  ResultIterator right=getSortedResultIterator(dataEngine,dataSet.getRightDataSetDesignName(),appContext,dataSet.getJoinConditions(),false);
  this.left=left;
  this.right=right;
  this.joinType=dataSet.getJoinType();
  this.matcher=new JoinConditionMatcher(left.getOdiResult(),right.getOdiResult(),left.getScope(),right.getScope(),dataSet.getJoinConditions());
  JointResultMetadata meta=getJointResultMetadata(left,right);
  resultClass=meta.getResultClass();
}",0.8698884758364313
78337,"/** 
 * Constructor.
 * @param dataEngine
 * @param queryDefn
 * @param dataSetDesign
 * @param appContext
 * @throws DataException
 */
PreparedJointDataSourceQuery(DataEngineImpl dataEngine,IQueryDefinition queryDefn,IBaseDataSetDesign dataSetDesign,Map appContext) throws DataException {
  super(dataEngine,queryDefn,dataSetDesign,appContext);
  this.dataEngine=dataEngine;
  this.dataSetDesign=dataSetDesign;
  this.appContext=appContext;
}","/** 
 * Constructor.
 * @param dataEngine
 * @param queryDefn
 * @param dataSetDesign
 * @param appContext
 * @throws DataException
 */
PreparedJointDataSourceQuery(DataEngineImpl dataEngine,IQueryDefinition queryDefn,IBaseDataSetDesign dataSetDesign,Map appContext) throws DataException {
  super(dataEngine,queryDefn,dataSetDesign,appContext);
  this.dataEngine=dataEngine;
  this.dataSetDesign=dataSetDesign;
  this.appContext=appContext;
  initialize(dataEngine,dataSetDesign,appContext);
}",0.9455709711846318
78338,"/** 
 * Creates a ODA DesignerState object with the given OdaDataSource.
 * @param sourceHandle the ODA DataSource.
 * @return the oda DesignerState object.
 */
public DesignerState newOdaDesignerState(OdaDataSourceHandle sourceHandle){
  OdaDesignerStateHandle designerState=sourceHandle.getDesignerStateHandle();
  return DesignerStateAdapter.createOdaDesignState(designerState);
}","/** 
 * Creates a ODA DesignerState object with the given OdaDataSource.
 * @param sourceHandle the ODA DataSource.
 * @return the oda DesignerState object.
 */
public DesignerState newOdaDesignerState(OdaDataSourceHandle sourceHandle){
  OdaDesignerStateHandle designerState=sourceHandle.getDesignerState();
  return DesignerStateAdapter.createOdaDesignState(designerState);
}",0.9921052631578948
78339,"/** 
 * Creates a ROM DesignerState object with the given ODA DataSet design.
 * @param designerState the ODA designer state.
 * @param sourceHandle the ODA DataSource.
 * @throws SemanticException if ROM Designer state value is locked.
 */
public void updateROMDesignerState(DesignerState designerState,OdaDataSourceHandle sourceHandle) throws SemanticException {
  if (designerState == null || sourceHandle == null)   return;
  DesignerStateAdapter.updateROMDesignerState(designerState,sourceHandle.getDesignerStateHandle());
}","/** 
 * Creates a ROM DesignerState object with the given ODA DataSet design.
 * @param designerState the ODA designer state.
 * @param sourceHandle the ODA DataSource.
 * @throws SemanticException if ROM Designer state value is locked.
 */
public void updateROMDesignerState(DesignerState designerState,OdaDataSourceHandle sourceHandle) throws SemanticException {
  if (designerState == null || sourceHandle == null)   return;
  DesignerStateAdapter.updateROMDesignerState(designerState,sourceHandle);
}",0.9757986447241046
78340,"/** 
 * access the query and create the contents. the execution process is: <li> the cursor is at the begin of result set. <li> call listing's onStart event <li> create the header <li> for each row: <ul> <li> call onRow event. <li> if the row start some groups, create the group header for that group. <li> create the detail row. <li> if the row end some groups, create the group footer for that group. </ul> <li> create the footer. <li> call the onFinish event.
 */
protected void accessQuery(ReportItemDesign design,IContentEmitter emitter){
  ListingDesign listing=(ListingDesign)design;
  rsetCursor=-1;
  outputEmitter=emitter;
  int groupCount=listing.getGroupCount();
  int NONE_GROUP=groupCount + 1;
  int groupIndex=-1;
  int pageBreakInterval=listing.getPageBreakInterval();
  if (rset == null || rsetEmpty == true) {
    startTOCEntry(null);
    accessHeader(listing,outputEmitter,null);
    finishTOCEntry();
    startTOCEntry(null);
    accessFooter(listing,outputEmitter,null);
    finishTOCEntry();
    return;
  }
  IResultIterator rsIterator=((DteResultSet)rset).getResultIterator();
  startTOCEntry(null);
  accessHeader(listing,outputEmitter,rsIterator);
  finishTOCEntry();
  if (groupCount == 0) {
    do {
      rsetCursor++;
      startTOCEntry(null);
      accessDetail(listing,outputEmitter,rsIterator);
      finishTOCEntry();
      if (pageBreakInterval > 0) {
        if ((rsetCursor + 1) % pageBreakInterval == 0) {
          needPageBreak=true;
        }
      }
      if (rset.getEndingGroupLevel() == 0) {
        needPageBreak=false;
        startTOCEntry(null);
        accessFooter(listing,outputEmitter,rsIterator);
        finishTOCEntry();
      }
    }
 while (rset.next());
    return;
  }
  boolean hideDetail=false;
  int hideGroupStartIndex=-1;
  do {
    rsetCursor++;
    int startGroup=rset.getStartingGroupLevel();
    ArrayList groupList=listing.getGroups();
    if (startGroup != NONE_GROUP) {
      groupIndex=startGroup - 1;
      if (groupIndex < 0) {
        groupIndex=0;
      }
      while (groupIndex < groupCount && (hideGroupStartIndex == -1 || groupIndex < hideGroupStartIndex)) {
        startGroupTOCEntry();
        startTOCEntry(null);
        accessGroupHeader(listing,groupIndex,outputEmitter);
        finishTOCEntry();
        groupIndex++;
        GroupDesign groupDesign=(GroupDesign)groupList.get(groupIndex - 1);
        if (groupDesign.getHideDetail() && hideGroupStartIndex == -1) {
          hideDetail=true;
          hideGroupStartIndex=groupIndex;
          break;
        }
      }
      clearDuplicateFlags(listing);
    }
    startGroupTOCEntry();
    if (!hideDetail) {
      accessDetail(listing,outputEmitter,rsIterator);
    }
    finishGroupTOCEntry();
    int endGroup=rset.getEndingGroupLevel();
    if (endGroup != NONE_GROUP) {
      endGroup=endGroup - 1;
      if (endGroup < 0) {
        endGroup=0;
      }
      if (hideGroupStartIndex == -1) {
        groupIndex=groupCount - 1;
      }
 else {
        groupIndex=hideGroupStartIndex - 1;
      }
      while (groupIndex >= endGroup) {
        startTOCEntry(null);
        accessGroupFooter(listing,groupIndex,outputEmitter);
        finishTOCEntry();
        finishGroupTOCEntry();
        groupIndex--;
      }
    }
    if (pageBreakInterval > 0) {
      if ((rsetCursor + 1) % pageBreakInterval == 0) {
        needPageBreak=true;
      }
    }
    if (rset.getEndingGroupLevel() == 0) {
      needPageBreak=false;
      startTOCEntry(null);
      accessFooter(listing,outputEmitter,rsIterator);
      finishTOCEntry();
    }
  }
 while (rset.next());
}","/** 
 * access the query and create the contents. the execution process is: <li> the cursor is at the begin of result set. <li> call listing's onStart event <li> create the header <li> for each row: <ul> <li> call onRow event. <li> if the row start some groups, create the group header for that group. <li> create the detail row. <li> if the row end some groups, create the group footer for that group. </ul> <li> create the footer. <li> call the onFinish event.
 */
protected void accessQuery(ReportItemDesign design,IContentEmitter emitter){
  ListingDesign listing=(ListingDesign)design;
  rsetCursor=-1;
  outputEmitter=emitter;
  int groupCount=listing.getGroupCount();
  int NONE_GROUP=groupCount + 1;
  int groupIndex=-1;
  int pageBreakInterval=listing.getPageBreakInterval();
  if (rset == null || rsetEmpty == true) {
    startTOCEntry(null);
    accessHeader(listing,outputEmitter,null);
    finishTOCEntry();
    startTOCEntry(null);
    accessFooter(listing,outputEmitter,null);
    finishTOCEntry();
    return;
  }
  IResultIterator rsIterator=((DteResultSet)rset).getResultIterator();
  startTOCEntry(null);
  accessHeader(listing,outputEmitter,rsIterator);
  finishTOCEntry();
  if (groupCount == 0) {
    do {
      rsetCursor++;
      startTOCEntry(null);
      accessDetail(listing,outputEmitter,rsIterator);
      finishTOCEntry();
      if (pageBreakInterval > 0) {
        if ((rsetCursor + 1) % pageBreakInterval == 0) {
          needPageBreak=true;
        }
      }
      if (rset.getEndingGroupLevel() == 0) {
        needPageBreak=false;
        startTOCEntry(null);
        accessFooter(listing,outputEmitter,rsIterator);
        finishTOCEntry();
      }
    }
 while (rset.next());
    return;
  }
  boolean hideDetail=false;
  int hideGroupStartIndex=-1;
  do {
    rsetCursor++;
    int startGroup=rset.getStartingGroupLevel();
    ArrayList groupList=listing.getGroups();
    if (startGroup != NONE_GROUP) {
      groupIndex=startGroup - 1;
      if (groupIndex < 0) {
        groupIndex=0;
      }
      while (groupIndex < groupCount && (hideGroupStartIndex == -1 || groupIndex < hideGroupStartIndex)) {
        startGroupTOCEntry();
        startTOCEntry(null);
        accessGroupHeader(listing,groupIndex,outputEmitter);
        finishTOCEntry();
        groupIndex++;
        GroupDesign groupDesign=(GroupDesign)groupList.get(groupIndex - 1);
        if (groupDesign.getHideDetail() && hideGroupStartIndex == -1) {
          hideDetail=true;
          hideGroupStartIndex=groupIndex;
          break;
        }
      }
      clearDuplicateFlags(listing);
    }
    startGroupTOCEntry();
    if (!hideDetail) {
      accessDetail(listing,outputEmitter,rsIterator);
    }
    finishGroupTOCEntry();
    int endGroup=rset.getEndingGroupLevel();
    if (endGroup != NONE_GROUP) {
      endGroup=endGroup - 1;
      if (endGroup < 0) {
        endGroup=0;
      }
      if (hideGroupStartIndex == -1) {
        groupIndex=groupCount - 1;
      }
 else {
        groupIndex=hideGroupStartIndex - 1;
      }
      while (groupIndex >= endGroup) {
        startTOCEntry(null);
        accessGroupFooter(listing,groupIndex,outputEmitter);
        finishTOCEntry();
        finishGroupTOCEntry();
        groupIndex--;
      }
    }
    if (pageBreakInterval > 0) {
      if ((rsetCursor + 1) % pageBreakInterval == 0) {
        needPageBreak=true;
      }
    }
    if (rset.getEndingGroupLevel() == 0) {
      startTOCEntry(null);
      accessFooter(listing,outputEmitter,rsIterator);
      finishTOCEntry();
    }
  }
 while (rset.next());
}",0.9962390305056414
78341,"/** 
 * Drops the given library from the design and break all the parent/child relationships. All child element will be localized in the module.
 * @param library the given library to drop
 * @throws SemanticException if errors occured when drop the library.It may be because that the library is not found in the design or that some elements can not be localized properly.
 */
public void dropLibraryAndBreakExtends(LibraryHandle library) throws SemanticException {
  LibraryCommand command=new LibraryCommand(module);
  command.dropLibraryAndBreakExtends((Library)library.getElement());
}","/** 
 * Drops the given library from the design and break all the parent/child relationships. All child element will be localized in the module.
 * @param library the given library to drop
 * @throws SemanticException if errors occured when drop the library.It may be because that the library is not found in the design or that some elements can not be localized properly.
 */
public void dropLibraryAndBreakExtends(LibraryHandle library) throws SemanticException {
  if (library == null)   return;
  LibraryCommand command=new LibraryCommand(module);
  command.dropLibraryAndBreakExtends((Library)library.getElement());
}",0.972749793559042
78342,"/** 
 * Drops the given library from the included libraries of this design file.
 * @param library the library to drop
 * @throws SemanticException if error is encountered when handling <code>IncludeLibrary</code> structure list. Or it maybe because that the given library is not found in the design. Or that the library has descedents in the current module
 */
public void dropLibrary(LibraryHandle library) throws SemanticException {
  LibraryCommand command=new LibraryCommand(module);
  command.dropLibrary((Library)library.getElement());
}","/** 
 * Drops the given library from the included libraries of this design file.
 * @param library the library to drop
 * @throws SemanticException if error is encountered when handling <code>IncludeLibrary</code> structure list. Or it maybe because that the given library is not found in the design. Or that the library has descedents in the current module
 */
public void dropLibrary(LibraryHandle library) throws SemanticException {
  if (library == null)   return;
  LibraryCommand command=new LibraryCommand(module);
  command.dropLibrary((Library)library.getElement());
}",0.9705619982158786
78343,"/** 
 * Shifts the library to new position. This method might affect the style reference, because the library order is changed.
 * @param library the library to shift
 * @param toPosn the new position
 * @throws SemanticException if error is encountered when shifting
 */
public void shiftLibrary(LibraryHandle library,int toPosn) throws SemanticException {
  ShiftLibraryCommand command=new ShiftLibraryCommand(module);
  command.shiftLibrary((Library)library.getElement(),toPosn);
}","/** 
 * Shifts the library to new position. This method might affect the style reference, because the library order is changed.
 * @param library the library to shift
 * @param toPosn the new position
 * @throws SemanticException if error is encountered when shifting
 */
public void shiftLibrary(LibraryHandle library,int toPosn) throws SemanticException {
  if (library == null)   return;
  ShiftLibraryCommand command=new ShiftLibraryCommand(module);
  command.shiftLibrary((Library)library.getElement(),toPosn);
}",0.967032967032967
78344,"/** 
 * Reloads the library with the given file path. After reloading, acticity stack is cleared.
 * @param location the URL file path of the library file.
 * @throws DesignFileException if the file does no exist.
 * @throws SemanticException if the library is not included in the current module.
 */
public void reloadLibrary(String location) throws DesignFileException, SemanticException {
  Library library=module.getLibraryByLocation(location);
  if (!module.getLibraries().contains(library)) {
    throw new LibraryException(library,LibraryException.DESIGN_EXCEPTION_LIBRARY_NOT_FOUND);
  }
  String namespace=library.getNamespace();
  IncludedLibrary includedItem=module.findIncludedLibrary(namespace);
  String path=includedItem.getFileName();
  URL url=module.findResource(path,IResourceLocator.LIBRARY);
  if (url == null) {
    DesignParserException ex=new DesignParserException(new String[]{path},DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND);
    List exceptionList=new ArrayList();
    exceptionList.add(ex);
    throw new DesignFileException(path,exceptionList);
  }
  Map overriddenValues=null;
  ActivityStack activityStack=getActivityStack();
  activityStack.startFilterEventTrans(null);
  try {
    overriddenValues=dealAllElementDecendents(library,RELOAD_ACTION);
    doDropLibrary(library);
    doAddLibrary(path,namespace,RELOAD_ACTION,overriddenValues);
  }
 catch (  SemanticException e) {
    activityStack.rollback();
    throw e;
  }
catch (  DesignFileException e) {
    activityStack.rollback();
    throw e;
  }
  activityStack.commit();
  activityStack.flush();
  LibraryEvent event=new LibraryEvent(module.getLibraryByLocation(location),LibraryEvent.RELOAD);
  module.broadcast(event);
}","/** 
 * Reloads the library with the given file path. After reloading, acticity stack is cleared.
 * @param location the URL file path of the library file.
 * @throws DesignFileException if the file does no exist.
 * @throws SemanticException if the library is not included in the current module.
 */
public void reloadLibrary(String location) throws DesignFileException, SemanticException {
  Library library=module.getLibraryByLocation(location);
  if (!module.getLibraries().contains(library)) {
    throw new LibraryException(library,new String[]{library == null ? null : library.getNamespace()},LibraryException.DESIGN_EXCEPTION_LIBRARY_NOT_FOUND);
  }
  String namespace=library.getNamespace();
  IncludedLibrary includedItem=module.findIncludedLibrary(namespace);
  String path=includedItem.getFileName();
  URL url=module.findResource(path,IResourceLocator.LIBRARY);
  if (url == null) {
    DesignParserException ex=new DesignParserException(new String[]{path},DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND);
    List exceptionList=new ArrayList();
    exceptionList.add(ex);
    throw new DesignFileException(path,exceptionList);
  }
  Map overriddenValues=null;
  ActivityStack activityStack=getActivityStack();
  activityStack.startFilterEventTrans(null);
  try {
    overriddenValues=dealAllElementDecendents(library,RELOAD_ACTION);
    doDropLibrary(library);
    doAddLibrary(path,namespace,RELOAD_ACTION,overriddenValues);
  }
 catch (  SemanticException e) {
    activityStack.rollback();
    throw e;
  }
catch (  DesignFileException e) {
    activityStack.rollback();
    throw e;
  }
  activityStack.commit();
  activityStack.flush();
  LibraryEvent event=new LibraryEvent(module.getLibraryByLocation(location),LibraryEvent.RELOAD);
  module.broadcast(event);
}",0.9823663253697384
78345,"/** 
 * Drops the given library.
 * @param library the library to drop
 * @param inForce <code>true</code> if drop the library even the module has element reference to this library. <code>false</code> if do not drop library when the module has element reference to this library.
 * @throws SemanticException if failed to remove <code>IncludeLibrary</code> strcutre
 */
public void dropLibrary(Library library) throws SemanticException {
  if (!module.getLibraries().contains(library)) {
    throw new LibraryException(library,LibraryException.DESIGN_EXCEPTION_LIBRARY_NOT_FOUND);
  }
  dealAllElementDecendents(library,SIMPLE_ACTION);
  doDropLibrary(library);
}","/** 
 * Drops the given library.
 * @param library the library to drop
 * @param inForce <code>true</code> if drop the library even the module has element reference to this library. <code>false</code> if do not drop library when the module has element reference to this library.
 * @throws SemanticException if failed to remove <code>IncludeLibrary</code> strcutre
 */
public void dropLibrary(Library library) throws SemanticException {
  if (!module.getLibraries().contains(library)) {
    throw new LibraryException(library,new String[]{library.getNamespace()},LibraryException.DESIGN_EXCEPTION_LIBRARY_NOT_FOUND);
  }
  dealAllElementDecendents(library,SIMPLE_ACTION);
  doDropLibrary(library);
}",0.9728141072740631
78346,"/** 
 * This constructor supports shape definition via an elliptical arc
 * @param oSource
 * @param boEllipse
 * @param dStart
 * @param dExtent
 * @param iArcType
 * @param ac
 */
ShapedAction(Object oSource,Bounds boEllipse,double dStart,double dExtent,int iArcType,Action ac){
  this(oSource,boEllipse,dStart,dExtent,iArcType,ac,null);
}","/** 
 * This constructor supports shape definition via an elliptical arc
 * @param oSource
 * @param boEllipse
 * @param dStart
 * @param dExtent
 * @param iArcType
 * @param ac
 */
ShapedAction(StructureSource oSource,Bounds boEllipse,double dStart,double dExtent,int iArcType,Action ac){
  this(oSource,boEllipse,dStart,dExtent,iArcType,ac,null);
}",0.9696092619392184
78347,"/** 
 * Returns the source object associated with current ShapedAction.
 * @return
 */
public final Object getSource(){
  return _oSource;
}","/** 
 * Returns the source object associated with current ShapedAction.
 * @return
 */
public final StructureSource getSource(){
  return _oSource;
}",0.9411764705882352
78348,"private synchronized void handleAction(List al,Object event,boolean cleanState){
  if (al == null || event == null) {
    return;
  }
  ShapedAction sa;
  Shape sh;
  Action ac;
  Point p=null;
  if (event instanceof MouseEvent) {
    p=((MouseEvent)event).getPoint();
  }
  if (event instanceof KeyEvent) {
  }
  boolean bFound=false;
  LOOP:   for (int i=0; i < al.size(); i++) {
    sa=(ShapedAction)al.get(i);
    sh=sa.getShape();
    if (p == null || sh.contains(p)) {
      ac=sa.getAction();
      final StructureSource src=(StructureSource)sa.getSource();
switch (ac.getType().getValue()) {
case ActionType.URL_REDIRECT:
        final URLValue uv=(URLValue)ac.getValue();
      logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",lcl) + uv.getBaseUrl());
    DeviceUtil.openURL(uv.getBaseUrl());
  break LOOP;
case ActionType.SHOW_TOOLTIP:
if (sa != saTooltip) {
  hideTooltip();
}
saTooltip=sa;
bFound=true;
showTooltip(saTooltip);
break LOOP;
case ActionType.TOGGLE_VISIBILITY:
if (src.getType() == StructureType.SERIES || src.getType() == StructureType.SERIES_DATA_POINT) {
final Series seRT;
if (src.getType() == StructureType.SERIES) {
seRT=(Series)src.getSource();
}
 else {
seRT=(Series)((WrappedStructureSource)src).getParent().getSource();
}
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",lcl) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
seDT.setVisible(!seDT.isVisible());
iun.regenerateChart();
break LOOP;
}
break;
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
if (src.getType() == StructureType.SERIES) {
final Series seRT;
if (src.getType() == StructureType.SERIES) {
seRT=(Series)src.getSource();
}
 else {
seRT=(Series)((WrappedStructureSource)src).getParent().getSource();
}
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",lcl) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
seDT.getLabel().setVisible(!seDT.getLabel().isVisible());
iun.regenerateChart();
break LOOP;
}
break;
case ActionType.HIGHLIGHT:
bFound=true;
boolean newRegion=saHighlighted == null;
if (!newRegion) {
if (p == null || !saHighlighted.getShape().contains(p)) {
newRegion=true;
}
}
if (newRegion) {
saHighlighted=sa;
toggleHighlight(sa);
break LOOP;
}
break;
case ActionType.CALL_BACK:
if (iun instanceof ICallBackNotifier) {
final CallBackValue cv=(CallBackValue)ac.getValue();
((ICallBackNotifier)iun).callback(event,sa.getSource(),cv);
}
 else {
logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",new Object[]{iun},lcl));
}
break LOOP;
}
}
}
if (!bFound && saTooltip != null) {
hideTooltip();
saTooltip=null;
}
if (cleanState || (!bFound && saHighlighted != null)) {
saHighlighted=null;
}
}","private synchronized void handleAction(List al,Object event,boolean cleanState){
  if (al == null || event == null) {
    return;
  }
  ShapedAction sa;
  Shape sh;
  Action ac;
  Point p=null;
  if (event instanceof MouseEvent) {
    p=((MouseEvent)event).getPoint();
  }
  if (event instanceof KeyEvent) {
  }
  boolean bFound=false;
  LOOP:   for (int i=0; i < al.size(); i++) {
    sa=(ShapedAction)al.get(i);
    sh=sa.getShape();
    if (p == null || sh.contains(p)) {
      ac=sa.getAction();
      final StructureSource src=(StructureSource)sa.getSource();
switch (ac.getType().getValue()) {
case ActionType.URL_REDIRECT:
        final URLValue uv=(URLValue)ac.getValue();
      logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",lcl) + uv.getBaseUrl());
    DeviceUtil.openURL(uv.getBaseUrl());
  break LOOP;
case ActionType.SHOW_TOOLTIP:
if (sa != saTooltip) {
  hideTooltip();
}
saTooltip=sa;
bFound=true;
showTooltip(saTooltip);
break LOOP;
case ActionType.TOGGLE_VISIBILITY:
if (src.getType() == StructureType.SERIES || src.getType() == StructureType.SERIES_DATA_POINT) {
final Series seRT;
if (src.getType() == StructureType.SERIES) {
seRT=(Series)src.getSource();
}
 else {
seRT=(Series)((WrappedStructureSource)src).getParent().getSource();
}
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",lcl) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
seDT.setVisible(!seDT.isVisible());
iun.regenerateChart();
break LOOP;
}
break;
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
if (src.getType() == StructureType.SERIES || src.getType() == StructureType.SERIES_DATA_POINT) {
final Series seRT;
if (src.getType() == StructureType.SERIES) {
seRT=(Series)src.getSource();
}
 else {
seRT=(Series)((WrappedStructureSource)src).getParent().getSource();
}
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",lcl) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
seDT.getLabel().setVisible(!seDT.getLabel().isVisible());
iun.regenerateChart();
break LOOP;
}
break;
case ActionType.HIGHLIGHT:
bFound=true;
boolean newRegion=saHighlighted == null;
if (!newRegion) {
if (p == null || !saHighlighted.getShape().contains(p)) {
newRegion=true;
}
}
if (newRegion) {
saHighlighted=sa;
toggleHighlight(sa);
break LOOP;
}
break;
case ActionType.CALL_BACK:
if (iun instanceof ICallBackNotifier) {
final CallBackValue cv=(CallBackValue)ac.getValue();
((ICallBackNotifier)iun).callback(event,sa.getSource(),cv);
}
 else {
logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",new Object[]{iun},lcl));
}
break LOOP;
}
}
}
if (!bFound && saTooltip != null) {
hideTooltip();
saTooltip=null;
}
if (cleanState || (!bFound && saHighlighted != null)) {
saHighlighted=null;
}
}",0.990877192982456
78349,"public void enableInteraction(InteractionEvent iev) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  final Trigger[] tga=iev.getTriggers();
  if (tga == null) {
    return;
  }
  Shape clipping=_g2d.getClip();
  TriggerCondition tc;
  ArrayList al;
  final PrimitiveRenderEvent pre=iev.getHotSpot();
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new ShapedAction(iev.getSource(),loa,tga[i].getAction(),clipping));
    }
  }
 else   if (pre instanceof RectangleRenderEvent) {
    final Bounds bo=((RectangleRenderEvent)pre).getBounds();
    final Location[] loa=new Location[4];
    loa[0]=LocationImpl.create(bo.getLeft(),bo.getTop());
    loa[1]=LocationImpl.create(bo.getLeft(),bo.getTop() + bo.getHeight());
    loa[2]=LocationImpl.create(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight());
    loa[3]=LocationImpl.create(bo.getLeft() + bo.getWidth(),bo.getTop());
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new ShapedAction(iev.getSource(),loa,tga[i].getAction(),clipping));
    }
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new ShapedAction(iev.getSource(),boEllipse,tga[i].getAction(),clipping));
    }
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    final Bounds boEllipse=are.getEllipseBounds();
    double dStart=are.getStartAngle();
    double dExtent=are.getAngleExtent();
    int iArcType=toSwingArcType(are.getStyle());
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new ShapedAction(iev.getSource(),boEllipse,dStart,dExtent,iArcType,tga[i].getAction(),clipping));
    }
  }
 else   if (pre instanceof AreaRenderEvent) {
    final Bounds bo=((AreaRenderEvent)pre).getBounds();
    final Location[] loa=new Location[4];
    loa[0]=LocationImpl.create(bo.getLeft(),bo.getTop());
    loa[1]=LocationImpl.create(bo.getLeft(),bo.getTop() + bo.getHeight());
    loa[2]=LocationImpl.create(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight());
    loa[3]=LocationImpl.create(bo.getLeft() + bo.getWidth(),bo.getTop());
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new ShapedAction(iev.getSource(),loa,tga[i].getAction(),clipping));
    }
  }
}","public void enableInteraction(InteractionEvent iev) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  final Trigger[] tga=iev.getTriggers();
  if (tga == null) {
    return;
  }
  Shape clipping=_g2d.getClip();
  TriggerCondition tc;
  ArrayList al;
  final PrimitiveRenderEvent pre=iev.getHotSpot();
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new ShapedAction(iev.getStructureSource(),loa,tga[i].getAction(),clipping));
    }
  }
 else   if (pre instanceof RectangleRenderEvent) {
    final Bounds bo=((RectangleRenderEvent)pre).getBounds();
    final Location[] loa=new Location[4];
    loa[0]=LocationImpl.create(bo.getLeft(),bo.getTop());
    loa[1]=LocationImpl.create(bo.getLeft(),bo.getTop() + bo.getHeight());
    loa[2]=LocationImpl.create(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight());
    loa[3]=LocationImpl.create(bo.getLeft() + bo.getWidth(),bo.getTop());
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new ShapedAction(iev.getStructureSource(),loa,tga[i].getAction(),clipping));
    }
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new ShapedAction(iev.getStructureSource(),boEllipse,tga[i].getAction(),clipping));
    }
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    final Bounds boEllipse=are.getEllipseBounds();
    double dStart=are.getStartAngle();
    double dExtent=are.getAngleExtent();
    int iArcType=toSwingArcType(are.getStyle());
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new ShapedAction(iev.getStructureSource(),boEllipse,dStart,dExtent,iArcType,tga[i].getAction(),clipping));
    }
  }
 else   if (pre instanceof AreaRenderEvent) {
    final Bounds bo=((AreaRenderEvent)pre).getBounds();
    final Location[] loa=new Location[4];
    loa[0]=LocationImpl.create(bo.getLeft(),bo.getTop());
    loa[1]=LocationImpl.create(bo.getLeft(),bo.getTop() + bo.getHeight());
    loa[2]=LocationImpl.create(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight());
    loa[3]=LocationImpl.create(bo.getLeft() + bo.getWidth(),bo.getTop());
    for (int i=0; i < tga.length; i++) {
      tc=tga[i].getCondition();
      al=(ArrayList)_lhmAllTriggers.get(tc);
      if (al == null) {
        al=new ArrayList(4);
        _lhmAllTriggers.put(tc,al);
      }
      al.add(new ShapedAction(iev.getStructureSource(),loa,tga[i].getAction(),clipping));
    }
  }
}",0.9933303690529124
78350,"/** 
 * Set the base factory for this clss. This methdo should be called before any other operation.
 * @param base The real factory class used to create the ODA provider.
 */
public synchronized static void initeTheFactory(ODABaseProviderFactory base){
  if (baseFactory != null)   return;
  baseFactory=base;
}","/** 
 * Set the base factory for this clss. This methdo should be called before any other operation.
 * @param base The real factory class used to create the ODA provider.
 */
public synchronized static void initeTheFactory(IODAProviderFactory base){
  if (baseFactory != null)   return;
  baseFactory=base;
}",0.9919484702093396
78351,"public IChoiceSet getAllowedChoices(){
  return null;
}","public IChoiceSet getAllowedChoices(){
  return getChoices();
}",0.864406779661017
78352,"public IChoiceSet getChoices(){
  PropertyChoice[] propertyChoices=property.getChoices();
  ChoiceSet choiceSet=null;
  if (propertyChoices != null && propertyChoices.length > 0) {
    choiceSet=new ChoiceSet();
    IChoice[] choices=new ODAChoice[propertyChoices.length];
    for (int i=0; i < propertyChoices.length; i++) {
      choices[i]=new ODAChoice(propertyChoices[i]);
    }
    choiceSet.setChoices(choices);
  }
  return choiceSet;
}","public IChoiceSet getChoices(){
  PropertyChoice[] propertyChoices=property.getChoices();
  ChoiceSet choiceSet=new ChoiceSet();
  if (propertyChoices != null && propertyChoices.length > 0) {
    IChoice[] choices=new ODAChoice[propertyChoices.length];
    for (int i=0; i < propertyChoices.length; i++) {
      choices[i]=new ODAChoice(propertyChoices[i]);
    }
    choiceSet.setChoices(choices);
  }
  return choiceSet;
}",0.9447004608294932
78353,"/** 
 * Return whether there are multipass filters in the query.
 * @param fetchEventsList
 * @return
 * @throws DataException
 */
public static boolean hasMultiPassFilters(Object[] fetchEventsList) throws DataException {
  for (int i=0; i < fetchEventsList.length; i++) {
    if (fetchEventsList[i] instanceof FilterByRow) {
      List list=((FilterByRow)fetchEventsList[i]).getFilterList(FilterByRow.ALL_FILTER);
      if (list == null)       return false;
      for (int j=0; j < list.size(); j++) {
        if (FilterUtil.isFilterNeedMultiPass((IFilterDefinition)(list.get(j))))         return true;
      }
    }
  }
  return false;
}","/** 
 * Return whether there are multipass filters in the query.
 * @param fetchEventsList
 * @return
 * @throws DataException
 */
public static boolean hasMultiPassFilters(Object[] fetchEventsList) throws DataException {
  for (int i=0; i < fetchEventsList.length; i++) {
    if (fetchEventsList[i] instanceof FilterByRow) {
      if (((FilterByRow)fetchEventsList[i]).isFilterSetExist(FilterByRow.GROUP_FILTER))       return true;
      List list=((FilterByRow)fetchEventsList[i]).getFilterList(FilterByRow.ALL_ROW_FILTER);
      if (list == null)       return false;
      for (int j=0; j < list.size(); j++) {
        if (FilterUtil.isFilterNeedMultiPass((IFilterDefinition)(list.get(j))))         return true;
      }
    }
  }
  return false;
}",0.8912886969042476
78354,"/** 
 * Populate the result set. In this method we would firstly prepare the data needed to be used in population process, then call doPopulate method to carry out the actual population job.
 * @param odaResultSet
 * @throws DataException
 */
public void populateResultSet(OdiResultSetWrapper odaResultSet) throws DataException {
  Object[] fetchEventsList=ResultSetPopulatorUtil.getFetchEventListFromQuery(this);
  boolean allowGroupFiltering=!ResultSetPopulatorUtil.hasAggregationsInComputedColumns(fetchEventsList,this);
  boolean needMultipassRowProcessing=(!allowGroupFiltering) || FilterUtil.hasMultiPassFilters(fetchEventsList);
  RowProcessorFactory.getRowProcessor(this,needMultipassRowProcessing).pass(odaResultSet);
  if (query.getGrouping() != null)   groupProcessorManager.doGroupFilteringAndSorting(this.smartCache,exprProcessor,allowGroupFiltering);
}","/** 
 * Populate the result set. In this method we would firstly prepare the data needed to be used in population process, then call doPopulate method to carry out the actual population job.
 * @param odaResultSet
 * @throws DataException
 */
public void populateResultSet(OdiResultSetWrapper odaResultSet) throws DataException {
  Object[] fetchEventsList=ResultSetPopulatorUtil.getFetchEventListFromQuery(this);
  boolean hasAggregationInCC=!ResultSetPopulatorUtil.hasAggregationsInComputedColumns(fetchEventsList,this);
  boolean needMultipassRowProcessing=(!hasAggregationInCC) || FilterUtil.hasMultiPassFilters(fetchEventsList);
  RowProcessorFactory.getRowProcessor(this,needMultipassRowProcessing).pass(odaResultSet);
  if (query.getGrouping() != null)   groupProcessorManager.doGroupFilteringAndSorting(this.smartCache,exprProcessor);
}",0.945029239766082
78355,"/** 
 * Do group filtering job.
 * @param cx
 * @throws DataException
 */
public void doGroupFiltering(Context cx,boolean canDoGroupFiltering) throws DataException {
  List groupLevels=new ArrayList();
  List expressionList=new ArrayList();
  populateGroupFilteringExpressions(expressionList,groupLevels);
  if (expressionList.size() > 0) {
    if (!canDoGroupFiltering)     throw new DataException(ResourceConstants.GROUP_FILTERING_IS_NOT_ALLOWED_IN_GIVEN_QUERY);
    this.groupProcessor.calculateExpressionList(expressionList,groupLevels,IExpressionProcessor.FILTER_ON_GROUP_EXPR);
    ArrayList[] groupBoundaryInfos=this.groupProcessor.getGroupCalculationUtil().getGroupInformationUtil().getGroupBoundaryInfos();
    populateFiltersInGroupBoundaryInfoSets(cx,groupBoundaryInfos);
    groupBoundaryInfos=this.groupProcessor.getGroupCalculationUtil().filterGroupBoundaryInfos(groupBoundaryInfos);
    OrderingInfo odInfo=this.groupProcessor.getGroupCalculationUtil().getGroupInformationUtil().getOrderingInfo(groupBoundaryInfos);
    this.populator.reSetSmartCacheUsingOrderingInfo(odInfo);
  }
}","/** 
 * Do group filtering job.
 * @param cx
 * @throws DataException
 */
public void doGroupFiltering(Context cx) throws DataException {
  List groupLevels=new ArrayList();
  List expressionList=new ArrayList();
  populateGroupFilteringExpressions(expressionList,groupLevels);
  if (expressionList.size() > 0) {
    this.groupProcessor.calculateExpressionList(expressionList,groupLevels,IExpressionProcessor.FILTER_ON_GROUP_EXPR);
    ArrayList[] groupBoundaryInfos=this.groupProcessor.getGroupCalculationUtil().getGroupInformationUtil().getGroupBoundaryInfos();
    populateFiltersInGroupBoundaryInfoSets(cx,groupBoundaryInfos);
    groupBoundaryInfos=this.groupProcessor.getGroupCalculationUtil().filterGroupBoundaryInfos(groupBoundaryInfos);
    OrderingInfo odInfo=this.groupProcessor.getGroupCalculationUtil().getGroupInformationUtil().getOrderingInfo(groupBoundaryInfos);
    this.populator.reSetSmartCacheUsingOrderingInfo(odInfo);
  }
}",0.7335945151811949
78356,"/** 
 * Do group filtering and Sorting job.
 * @throws DataException
 */
public void doGroupFilteringAndSorting(ResultSetCache rsCache,IExpressionProcessor exprProc,boolean doGroupFiltering) throws DataException {
  this.populator.setCache(rsCache);
  this.exprProcessor=exprProc;
  exprProcessor.setResultIterator(this.populator.getResultIterator());
  Context cx=Context.enter();
  try {
    new GroupInstanceFilter(this).doGroupFiltering(cx,doGroupFiltering);
    new GroupInstanceSorter(this).doGroupSorting(cx);
  }
  finally {
    Context.exit();
  }
}","/** 
 * Do group filtering and Sorting job.
 * @throws DataException
 */
public void doGroupFilteringAndSorting(ResultSetCache rsCache,IExpressionProcessor exprProc) throws DataException {
  this.populator.setCache(rsCache);
  this.exprProcessor=exprProc;
  exprProcessor.setResultIterator(this.populator.getResultIterator());
  Context cx=Context.enter();
  try {
    new GroupInstanceFilter(this).doGroupFiltering(cx);
    new GroupInstanceSorter(this).doGroupSorting(cx);
  }
  finally {
    Context.exit();
  }
}",0.3612662942271881
78357,"public void init(IEditorSite site,IEditorInput input) throws PartInitException {
  super.init(site,input);
  site.setSelectionProvider(new FormEditorSelectionProvider(this));
  IReportProvider provider=getProvider();
  if (provider != null && provider.getInputPath(input) != null) {
    setPartName(provider.getInputPath(input).lastSegment());
    firePropertyChange(IWorkbenchPartConstants.PROP_PART_NAME);
  }
 else {
    setPartName(input.getName());
    firePropertyChange(IWorkbenchPartConstants.PROP_PART_NAME);
  }
}","public void init(IEditorSite site,IEditorInput input) throws PartInitException {
  super.init(site,input);
  site.setSelectionProvider(new FormEditorSelectionProvider(this));
  IReportProvider provider=getProvider();
  if (provider != null && provider.getInputPath(input) != null) {
    setPartName(provider.getInputPath(input).lastSegment());
    firePropertyChange(IWorkbenchPartConstants.PROP_PART_NAME);
  }
 else {
    setPartName(input.getName());
    firePropertyChange(IWorkbenchPartConstants.PROP_PART_NAME);
  }
  SessionHandleAdapter.getInstance().getMediator().addGlobalColleague(this);
}",0.931433659839715
78358,"public void dispose(){
  DataSetManager.removeInstance(this.getEditorInput());
  if (fPalettePage != null) {
    fPalettePage.dispose();
  }
  if (outlinePage != null) {
    outlinePage.dispose();
  }
  if (dataPage != null) {
    dataPage.dispose();
  }
  super.dispose();
}","public void dispose(){
  DataSetManager.removeInstance(this.getEditorInput());
  if (fPalettePage != null) {
    fPalettePage.dispose();
  }
  if (outlinePage != null) {
    outlinePage.dispose();
  }
  if (dataPage != null) {
    dataPage.dispose();
  }
  SessionHandleAdapter.getInstance().getMediator().removeGlobalColleague(this);
  super.dispose();
}",0.873015873015873
78359,"/** 
 * Set Engine context.
 * @param servletContext
 * @param request
 */
synchronized public void setEngineContext(ServletContext servletContext){
  if (engine == null) {
    IPlatformContext platformContext=new PlatformServletContext(servletContext);
    config.setPlatformContext(platformContext);
    try {
      Platform.startup(platformContext);
    }
 catch (    BirtException e) {
      e.printStackTrace();
    }
    IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
    engine=factory.createReportEngine(config);
  }
}","/** 
 * Set Engine context.
 * @param servletContext
 * @param request
 */
synchronized public void setEngineContext(ServletContext servletContext,HttpServletRequest request){
  if (engine == null) {
    IPlatformContext platformContext=new PlatformServletContext(servletContext);
    config.setPlatformContext(platformContext);
    try {
      Platform.startup(platformContext);
    }
 catch (    BirtException e) {
      e.printStackTrace();
    }
    IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
    engine=factory.createReportEngine(config);
    contextPath=request.getContextPath();
  }
}",0.9468003084040092
78360,"/** 
 * Process http request with POST method. Four different servlet paths are expected: ""/frameset"", ""/navigation"", ""/toolbar"", and ""/run"".
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
  if (ParameterAccessor.HEADER_REQUEST_TYPE_SOAP.equalsIgnoreCase(requestType)) {
    ReportEngineService.getInstance().setEngineContext(getServletContext());
    BirtContext context=new BirtContext(request);
    if (""String_Node_Str"".equalsIgnoreCase(request.getServletPath())) {
      if (context.getBean().getException() != null) {
        context.finalize();
        displayException(request,response,context.getBean().getException());
      }
 else {
        try {
          engine.service(request,response);
        }
 catch (        BirtException e) {
          displayException(request,response,e);
        }
 finally {
          context.finalize();
        }
      }
    }
 else {
      super.doPost(request,response);
      context.finalize();
    }
  }
 else {
    doGet(request,response);
  }
}","/** 
 * Process http request with POST method. Four different servlet paths are expected: ""/frameset"", ""/navigation"", ""/toolbar"", and ""/run"".
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
  if (ParameterAccessor.HEADER_REQUEST_TYPE_SOAP.equalsIgnoreCase(requestType)) {
    ReportEngineService.getInstance().setEngineContext(getServletContext(),request);
    BirtContext context=new BirtContext(request);
    if (""String_Node_Str"".equalsIgnoreCase(request.getServletPath())) {
      if (context.getBean().getException() != null) {
        context.finalize();
        displayException(request,response,context.getBean().getException());
      }
 else {
        try {
          engine.service(request,response);
        }
 catch (        BirtException e) {
          displayException(request,response,e);
        }
 finally {
          context.finalize();
        }
      }
    }
 else {
      super.doPost(request,response);
      context.finalize();
    }
  }
 else {
    doGet(request,response);
  }
}",0.996875
78361,"/** 
 * Process http request with GET method
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  ReportEngineService.getInstance().setEngineContext(getServletContext());
  BirtContext context=new BirtContext(request);
  if (context.getBean().getException() != null) {
    context.finalize();
    displayException(request,response,context.getBean().getException());
  }
 else {
    try {
      if (SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
        viewer.service(request,response);
      }
 else       if (SERVLET_PATH_PREVIEW.equalsIgnoreCase(request.getServletPath())) {
        preview.service(request,response);
      }
 else       if (SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath())) {
        engine.service(request,response);
      }
 else       if (SERVLET_PATH_PARAMETER.equalsIgnoreCase(request.getServletPath())) {
        parameter.service(request,response);
      }
    }
 catch (    BirtException e) {
      displayException(request,response,e);
    }
 finally {
      context.finalize();
    }
  }
}","/** 
 * Process http request with GET method
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  ReportEngineService.getInstance().setEngineContext(getServletContext(),request);
  BirtContext context=new BirtContext(request);
  if (context.getBean().getException() != null) {
    context.finalize();
    displayException(request,response,context.getBean().getException());
  }
 else {
    try {
      if (SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
        viewer.service(request,response);
      }
 else       if (SERVLET_PATH_PREVIEW.equalsIgnoreCase(request.getServletPath())) {
        preview.service(request,response);
      }
 else       if (SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath())) {
        engine.service(request,response);
      }
 else       if (SERVLET_PATH_PARAMETER.equalsIgnoreCase(request.getServletPath())) {
        parameter.service(request,response);
      }
    }
 catch (    BirtException e) {
      displayException(request,response,e);
    }
 finally {
      context.finalize();
    }
  }
}",0.9968076616121307
78362,"public CellComputedStyle(ICellContent elt){
  super(elt);
  IRowContent row=(IRowContent)elt.getParent();
  if (row != null) {
    IElement parentElt=row.getParent();
    if (parentElt instanceof ITableBandContent) {
      parentElt=parentElt.getParent();
    }
    ITableContent table=(ITableContent)parentElt;
    if (table != null) {
      int columnId=elt.getColumn();
      if (columnId >= 0 && columnId < table.getColumnCount()) {
        IColumn column=table.getColumn(columnId);
        if (column.getStyleClass() != null) {
          cell=new StyledCell(elt);
        }
      }
    }
  }
  if (cell == null) {
    cell=elt;
  }
}","public CellComputedStyle(ICellContent elt){
  super(elt);
  IRowContent row=(IRowContent)elt.getParent();
  if (row != null) {
    IElement parentElt=row.getParent();
    rowStyle=row.getStyle();
    if (parentElt instanceof ITableBandContent) {
      parentElt=parentElt.getParent();
    }
    ITableContent table=(ITableContent)parentElt;
    if (table != null) {
      int columnId=elt.getColumn();
      if (columnId >= 0 && columnId < table.getColumnCount()) {
        IColumn column=table.getColumn(columnId);
        String styleClass=column.getStyleClass();
        if (styleClass != null) {
          columnStyle=elt.getReportContent().findStyle(styleClass);
          cell=new StyledCell(elt);
        }
      }
    }
  }
  if (cell == null) {
    cell=elt;
    columnStyle=null;
  }
}",0.8597348220516399
78363,"protected Value resolveProperty(int index){
  CSSStylableElement parent=(CSSStylableElement)cell.getParent();
  IStyle pcs=null;
  if (parent != null) {
    pcs=parent.getComputedStyle();
  }
  IStyle s=cell.getStyle();
  Value sv=s == null ? null : (Value)s.getProperty(index);
  Value cv=engine.resolveStyle(elt,index,sv,pcs);
  return cv;
}","protected Value resolveProperty(int index){
  CSSStylableElement parent=(CSSStylableElement)cell.getParent();
  IStyle pcs=null;
  if (parent != null) {
    pcs=parent.getComputedStyle();
  }
  IStyle s=cell.getStyle();
  Value sv=s == null ? null : (Value)s.getProperty(index);
  if (sv == null && columnStyle != null && isBackgroundProperties(index) && rowStyle != null && rowStyle.getProperty(index) == null) {
    sv=(Value)columnStyle.getProperty(index);
  }
  Value cv=engine.resolveStyle(elt,index,sv,pcs);
  return cv;
}",0.7876004592422503
78364,"/** 
 * Populate the smartCache.
 * @param rsMeta
 * @param rowResultSet
 * @param sortSpec
 * @throws DataException
 */
private void populateData(IResultClass rsMeta,IRowResultSet rowResultSet,SortSpec sortSpec) throws DataException {
  long startTime=System.currentTimeMillis();
  int memoryCacheRowCount=computeCacheRowCount(rsMeta);
  logger.info(""String_Node_Str"" + memoryCacheRowCount);
  IResultObject odaObject;
  IResultObject[] resultObjects;
  List resultObjectsList=new ArrayList();
  int dataCount=0;
  while ((odaObject=rowResultSet.next()) != null) {
    dataCount++;
    if (dataCount <= memoryCacheRowCount) {
      Object[] obs=new Object[rsMeta.getFieldCount()];
      for (int i=1; i <= rsMeta.getFieldCount(); i++) {
        if (i <= odaObject.getResultClass().getFieldCount())         obs[i - 1]=odaObject.getFieldValue(rsMeta.getFieldName(i));
 else         obs[i - 1]=null;
      }
      resultObjectsList.add(new ResultObject(rsMeta,obs));
    }
 else {
      logger.info(""String_Node_Str"");
      resultObjects=(IResultObject[])resultObjectsList.toArray(new IResultObject[0]);
      resultSetCache=new DiskCache(resultObjects,odaObject,rowResultSet,rsMeta,getComparator(sortSpec),memoryCacheRowCount);
      break;
    }
  }
  if (resultSetCache == null) {
    logger.info(""String_Node_Str"");
    resultObjects=(IResultObject[])resultObjectsList.toArray(new IResultObject[0]);
    resultSetCache=new MemoryCache(resultObjects,rsMeta,getComparator(sortSpec));
  }
  odaObject=null;
  resultObjects=null;
  resultObjectsList=null;
  rowResultSet=null;
  long consumedTime=(System.currentTimeMillis() - startTime) / 1000;
  logger.info(""String_Node_Str"" + consumedTime + ""String_Node_Str"");
}","/** 
 * Populate the smartCache.
 * @param rsMeta
 * @param rowResultSet
 * @param sortSpec
 * @throws DataException
 */
private void populateData(IResultClass rsMeta,IRowResultSet rowResultSet,SortSpec sortSpec) throws DataException {
  long startTime=System.currentTimeMillis();
  int memoryCacheRowCount=computeCacheRowCount(rsMeta);
  logger.info(""String_Node_Str"" + memoryCacheRowCount);
  IResultObject odaObject;
  IResultObject[] resultObjects;
  List resultObjectsList=new ArrayList();
  int dataCount=0;
  while ((odaObject=rowResultSet.next()) != null) {
    dataCount++;
    if (dataCount <= memoryCacheRowCount) {
      Object[] obs=new Object[rsMeta.getFieldCount()];
      for (int i=1; i <= rsMeta.getFieldCount(); i++) {
        obs[i - 1]=odaObject.getFieldValue(rsMeta.getFieldName(i));
      }
      resultObjectsList.add(new ResultObject(rsMeta,obs));
    }
 else {
      logger.info(""String_Node_Str"");
      resultObjects=(IResultObject[])resultObjectsList.toArray(new IResultObject[0]);
      resultSetCache=new DiskCache(resultObjects,odaObject,rowResultSet,rsMeta,getComparator(sortSpec),memoryCacheRowCount);
      break;
    }
  }
  if (resultSetCache == null) {
    logger.info(""String_Node_Str"");
    resultObjects=(IResultObject[])resultObjectsList.toArray(new IResultObject[0]);
    resultSetCache=new MemoryCache(resultObjects,rsMeta,getComparator(sortSpec));
  }
  odaObject=null;
  resultObjects=null;
  resultObjectsList=null;
  rowResultSet=null;
  long consumedTime=(System.currentTimeMillis() - startTime) / 1000;
  logger.info(""String_Node_Str"" + consumedTime + ""String_Node_Str"");
}",0.9724385859796284
78365,"/** 
 * Populate the JointResultMetadata.
 * @param left
 * @param leftPrefix
 * @param right
 * @param rightPrefix
 * @return
 * @throws DataException
 */
private JointResultMetadata populatorJointResultMetadata(IResultClass left,String leftPrefix,IResultClass right,String rightPrefix) throws DataException {
  int[] index=new int[left.getFieldCount() + right.getFieldCount()];
  boolean[] isFromLeft=new boolean[left.getFieldCount() + right.getFieldCount()];
  List projectedColumns=new ArrayList();
  for (int i=1; i <= left.getFieldCount(); i++) {
    index[i - 1]=i;
    isFromLeft[i - 1]=true;
    projectedColumns.add(new ResultFieldMetadata(i,leftPrefix + left.getFieldName(i),leftPrefix + left.getFieldName(i),left.getFieldValueClass(i),left.getFieldNativeTypeName(i),false));
  }
  for (int i=left.getFieldCount() + 1; i <= index.length; i++) {
    index[i - 1]=i - left.getFieldCount();
    isFromLeft[i - 1]=false;
    projectedColumns.add(new ResultFieldMetadata(i,rightPrefix + right.getFieldName(i - left.getFieldCount()),rightPrefix + right.getFieldName(i - left.getFieldCount()),right.getFieldValueClass(i - left.getFieldCount()),right.getFieldNativeTypeName(i - left.getFieldCount()),false));
  }
  ResultClass resultClass=new ResultClass(projectedColumns);
  return new JointResultMetadata(resultClass,isFromLeft,index);
}","/** 
 * Populate the JointResultMetadata.
 * @param left
 * @param leftPrefix
 * @param right
 * @param rightPrefix
 * @return
 * @throws DataException
 */
private JointResultMetadata populatorJointResultMetadata(IResultClass left,String leftPrefix,IResultClass right,String rightPrefix) throws DataException {
  int length=left.getFieldCount() + right.getFieldCount() + ((dataSet.getComputedColumns() == null) ? 0 : dataSet.getComputedColumns().size());
  int[] index=new int[length];
  int[] columnSource=new int[length];
  List projectedColumns=new ArrayList();
  for (int i=1; i <= left.getFieldCount(); i++) {
    index[i - 1]=i;
    columnSource[i - 1]=JointResultMetadata.COLUMN_TYPE_LEFT;
    projectedColumns.add(new ResultFieldMetadata(i,leftPrefix + left.getFieldName(i),leftPrefix + left.getFieldName(i),left.getFieldValueClass(i),left.getFieldNativeTypeName(i),false));
  }
  for (int i=left.getFieldCount() + 1; i <= left.getFieldCount() + right.getFieldCount(); i++) {
    index[i - 1]=i - left.getFieldCount();
    columnSource[i - 1]=JointResultMetadata.COLUMN_TYPE_RIGHT;
    projectedColumns.add(new ResultFieldMetadata(i,rightPrefix + right.getFieldName(i - left.getFieldCount()),rightPrefix + right.getFieldName(i - left.getFieldCount()),right.getFieldValueClass(i - left.getFieldCount()),right.getFieldNativeTypeName(i - left.getFieldCount()),false));
  }
  if (dataSet.getComputedColumns() != null) {
    for (int i=0; i < dataSet.getComputedColumns().size(); i++) {
      IComputedColumn cc=(IComputedColumn)dataSet.getComputedColumns().get(i);
      index[i + left.getFieldCount() + right.getFieldCount()]=-1;
      columnSource[i + left.getFieldCount() + right.getFieldCount()]=JointResultMetadata.COLUMN_TYPE_COMPUTED;
      projectedColumns.add(new ResultFieldMetadata(i,cc.getName(),cc.getName(),DataType.getClass(cc.getDataType()),null,true));
    }
  }
  ResultClass resultClass=new ResultClass(projectedColumns);
  return new JointResultMetadata(resultClass,columnSource,index);
}",0.7072152653548003
78366,"/** 
 * Initialize the instance.
 * @param dataEngine
 * @param dataSetDesign
 * @param appContext
 * @throws DataException
 */
private void initialize(DataEngineImpl dataEngine,IBaseDataSetDesign dataSetDesign,Map appContext) throws DataException {
  dataSet=(IJointDataSetDesign)dataSetDesign;
  ResultIterator left=getSortedResultIterator(dataEngine,dataSet.getLeftDataSetDesignName(),appContext,dataSet.getJoinConditions(),true);
  ResultIterator right=getSortedResultIterator(dataEngine,dataSet.getRightDataSetDesignName(),appContext,dataSet.getJoinConditions(),false);
  IJoinConditionMatcher matcher=new JoinConditionMatcher(left.getOdiResult(),right.getOdiResult(),left.getScope(),right.getScope(),dataSet.getJoinConditions());
  JointResultMetadata meta=getJointResultMetadata(left,right);
  resultClass=getPreparedResultClass(meta.getResultClass());
  populator=JointDataSetPopulatorFactory.getBinaryTreeDataSetPopulator(left.getOdiResult(),right.getOdiResult(),meta,matcher,dataSet.getJoinType());
}","/** 
 * Initialize the instance.
 * @param dataEngine
 * @param dataSetDesign
 * @param appContext
 * @throws DataException
 */
private void initialize(DataEngineImpl dataEngine,IBaseDataSetDesign dataSetDesign,Map appContext) throws DataException {
  dataSet=(IJointDataSetDesign)dataSetDesign;
  ResultIterator left=getSortedResultIterator(dataEngine,dataSet.getLeftDataSetDesignName(),appContext,dataSet.getJoinConditions(),true);
  ResultIterator right=getSortedResultIterator(dataEngine,dataSet.getRightDataSetDesignName(),appContext,dataSet.getJoinConditions(),false);
  IJoinConditionMatcher matcher=new JoinConditionMatcher(left.getOdiResult(),right.getOdiResult(),left.getScope(),right.getScope(),dataSet.getJoinConditions());
  JointResultMetadata meta=getJointResultMetadata(left,right);
  resultClass=meta.getResultClass();
  populator=JointDataSetPopulatorFactory.getBinaryTreeDataSetPopulator(left.getOdiResult(),right.getOdiResult(),meta,matcher,dataSet.getJoinType());
}",0.9679358717434868
78367,"/** 
 * Create an instance of IResultObject.
 * @param primary
 * @param secondary
 * @return
 * @throws DataException
 */
private IResultObject createResultObject(IResultObject primary,IResultObject secondary) throws DataException {
  Object[] fields=new Object[meta.getResultClass().getFieldCount()];
  for (int i=1; i <= fields.length; i++) {
    IResultObject ri=null;
    if (meta.isFromLeftResultSet(i)) {
      if (joinType != IJointDataSetDesign.RIGHT_OUTER_JOIN)       ri=primary;
 else       ri=secondary;
    }
 else {
      if (joinType != IJointDataSetDesign.RIGHT_OUTER_JOIN)       ri=secondary;
 else       ri=primary;
    }
    fields[i - 1]=ri == null ? null : ri.getFieldValue(meta.getSourceIndex(i));
  }
  return new ResultObject(meta.getResultClass(),fields);
}","/** 
 * Create an instance of IResultObject.
 * @param primary
 * @param secondary
 * @return
 * @throws DataException
 */
private IResultObject createResultObject(IResultObject primary,IResultObject secondary) throws DataException {
  Object[] fields=new Object[meta.getResultClass().getFieldCount()];
  for (int i=1; i <= fields.length; i++) {
    IResultObject ri=null;
    if (meta.getColumnSource(i) == JointResultMetadata.COLUMN_TYPE_LEFT) {
      if (joinType != IJointDataSetDesign.RIGHT_OUTER_JOIN)       ri=primary;
 else       ri=secondary;
    }
 else     if (meta.getColumnSource(i) == JointResultMetadata.COLUMN_TYPE_RIGHT) {
      if (joinType != IJointDataSetDesign.RIGHT_OUTER_JOIN)       ri=secondary;
 else       ri=primary;
    }
    fields[i - 1]=ri == null ? null : ri.getFieldValue(meta.getSourceIndex(i));
  }
  return new ResultObject(meta.getResultClass(),fields);
}",0.8626045400238949
78368,"/** 
 * Constructor 
 * @param resultClass
 * @param isFromLeftResultSet
 * @param index
 */
public JointResultMetadata(IResultClass resultClass,boolean[] isFromLeftResultSet,int[] index){
  this.resultClass=resultClass;
  this.isFromLeftResultSet=isFromLeftResultSet;
  this.columnIndex=index;
}","/** 
 * Constructor 
 * @param resultClass
 * @param isFromLeftResultSet
 * @param index
 */
public JointResultMetadata(IResultClass resultClass,int[] columnSource,int[] index){
  this.resultClass=resultClass;
  this.columnSource=columnSource;
  this.columnIndex=index;
}",0.818342151675485
78369,"public void enableInteraction(InteractionEvent ie) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  Trigger[] triggers=ie.getTriggers();
  if (triggers == null) {
    return;
  }
  final PrimitiveRenderEvent pre=ie.getHotSpot();
  Element elm=null;
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    int[][] pa=getCoordinatesAsInts(loa);
    elm=svggc.createPolygon(pa[0],pa[1],pa[0].length);
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    elm=svggc.createOval(boEllipse.getLeft(),boEllipse.getTop(),boEllipse.getWidth(),boEllipse.getHeight());
  }
 else   if (pre instanceof RectangleRenderEvent) {
    final Bounds boRect=((RectangleRenderEvent)pre).getBounds();
    elm=svggc.createRect(boRect.getLeft(),boRect.getTop(),boRect.getWidth(),boRect.getHeight());
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      elm=svggc.createGeneralPath(fArea);
    }
 else {
      elm=svggc.createGeneralPath(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
  }
  if (elm != null) {
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      final StructureSource src=(StructureSource)ie.getSource();
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
        String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
      if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
        Element title=svggc.dom.createElement(""String_Node_Str"");
        title.appendChild(svggc.dom.createTextNode(tooltipText));
        elm.appendChild(title);
        elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
        elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
    break;
case ActionType.URL_REDIRECT:
  URLValue urlValue=((URLValue)tg.getAction().getValue());
if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
  Element aLink=((SVGGraphics2D)_g2d).createElement(""String_Node_Str"");
  aLink.setAttribute(""String_Node_Str"",""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str"");
  aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
  aLink.appendChild(elm);
  elm=aLink;
}
 else {
  Element aLink=((SVGGraphics2D)_g2d).createElement(""String_Node_Str"");
  aLink.setAttribute(""String_Node_Str"",urlValue.getBaseUrl());
  if (urlValue.getTarget() != null)   aLink.setAttribute(""String_Node_Str"",urlValue.getTarget());
  aLink.appendChild(elm);
  elm=aLink;
}
break;
case ActionType.TOGGLE_VISIBILITY:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getULocale()) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
cacheSeriesHotspots.put(elm,seDT);
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
}
break;
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getULocale()) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
if (seDT != null) cacheHotspots.put(elm,seDT);
}
break;
case ActionType.HIGHLIGHT:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getULocale()) + seRT);
String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
if (scriptEvent != null) {
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
List components=(List)componentPrimitives.get(seDT);
if (components != null) {
Iterator iter=components.iterator();
StringBuffer sb=new StringBuffer();
sb.append(seDT.hashCode());
if (iter.hasNext()) sb.append(""String_Node_Str"");
while (iter.hasNext()) {
sb.append(""String_Node_Str"").append(iter.next()).append(""String_Node_Str"");
if (iter.hasNext()) sb.append(""String_Node_Str"");
}
if (components.size() > 0) sb.append(""String_Node_Str"");
elm.setAttribute(scriptEvent,""String_Node_Str"" + sb.toString() + ""String_Node_Str"");
if (tg.getCondition().getValue() == TriggerCondition.ONMOUSEOVER) {
elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
}
setCursor(elm);
((SVGGraphics2D)_g2d).addCSSStyle(""String_Node_Str"" + seDT.hashCode(),""String_Node_Str"",""String_Node_Str"");
}
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
}
}
break;
case ActionType.INVOKE_SCRIPT:
final StructureSource sructSource=(StructureSource)ie.getSource();
if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) {
AccessibilityValue accessValue=((AccessibilityValue)tg.getAction().getValue());
if (accessValue.getText() != null) {
Element title=((SVGGraphics2D)_g2d).createElement(""String_Node_Str"");
title.appendChild(svggc.dom.createTextNode(accessValue.getText()));
elm.appendChild(title);
}
if (accessValue.getAccessibility() != null) {
Element description=((SVGGraphics2D)_g2d).createElement(""String_Node_Str"");
description.appendChild(svggc.dom.createTextNode(accessValue.getAccessibility()));
elm.appendChild(description);
}
}
 else {
String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
if (scriptEvent != null) {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ sructSource.getSource().hashCode()+ ""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
((SVGGraphics2D)_g2d).addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
}
break;
}
}
hotspotLayer.appendChild(elm);
}
}","public void enableInteraction(InteractionEvent ie) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  Trigger[] triggers=ie.getTriggers();
  if (triggers == null) {
    return;
  }
  final PrimitiveRenderEvent pre=ie.getHotSpot();
  Element elm=null;
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    int[][] pa=getCoordinatesAsInts(loa);
    elm=svggc.createPolygon(pa[0],pa[1],pa[0].length);
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    elm=svggc.createOval(boEllipse.getLeft(),boEllipse.getTop(),boEllipse.getWidth(),boEllipse.getHeight());
  }
 else   if (pre instanceof RectangleRenderEvent) {
    final Bounds boRect=((RectangleRenderEvent)pre).getBounds();
    elm=svggc.createRect(boRect.getLeft(),boRect.getTop(),boRect.getWidth(),boRect.getHeight());
  }
 else   if (pre instanceof AreaRenderEvent) {
    AreaRenderEvent are=(AreaRenderEvent)pre;
    final GeneralPath gp=new GeneralPath();
    PrimitiveRenderEvent subPre;
    for (int i=0; i < are.getElementCount(); i++) {
      subPre=are.getElement(i);
      if (subPre instanceof ArcRenderEvent) {
        final ArcRenderEvent acre=(ArcRenderEvent)subPre;
        final Arc2D.Double a2d=new Arc2D.Double(acre.getTopLeft().getX(),acre.getTopLeft().getY(),acre.getWidth(),acre.getHeight(),acre.getStartAngle(),acre.getAngleExtent(),toSwingArcType(acre.getStyle()));
        gp.append(a2d,true);
      }
 else       if (subPre instanceof LineRenderEvent) {
        final LineRenderEvent lre=(LineRenderEvent)subPre;
        final Line2D.Double l2d=new Line2D.Double(lre.getStart().getX(),lre.getStart().getY(),lre.getEnd().getX(),lre.getEnd().getY());
        gp.append(l2d,true);
      }
    }
    elm=svggc.createGeneralPath(gp);
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      elm=svggc.createGeneralPath(fArea);
    }
 else {
      elm=svggc.createGeneralPath(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
  }
  if (elm != null) {
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      final StructureSource src=(StructureSource)ie.getSource();
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
        String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
      if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
        Element title=svggc.dom.createElement(""String_Node_Str"");
        title.appendChild(svggc.dom.createTextNode(tooltipText));
        elm.appendChild(title);
        elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
        elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
    break;
case ActionType.URL_REDIRECT:
  URLValue urlValue=((URLValue)tg.getAction().getValue());
if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
  Element aLink=((SVGGraphics2D)_g2d).createElement(""String_Node_Str"");
  aLink.setAttribute(""String_Node_Str"",""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str"");
  aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
  aLink.appendChild(elm);
  elm=aLink;
}
 else {
  Element aLink=((SVGGraphics2D)_g2d).createElement(""String_Node_Str"");
  aLink.setAttribute(""String_Node_Str"",urlValue.getBaseUrl());
  if (urlValue.getTarget() != null)   aLink.setAttribute(""String_Node_Str"",urlValue.getTarget());
  aLink.appendChild(elm);
  elm=aLink;
}
break;
case ActionType.TOGGLE_VISIBILITY:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getULocale()) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
cacheSeriesHotspots.put(elm,seDT);
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
}
break;
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getULocale()) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
if (seDT != null) cacheHotspots.put(elm,seDT);
}
break;
case ActionType.HIGHLIGHT:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getULocale()) + seRT);
String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
if (scriptEvent != null) {
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
List components=(List)componentPrimitives.get(seDT);
if (components != null) {
Iterator iter=components.iterator();
StringBuffer sb=new StringBuffer();
sb.append(seDT.hashCode());
if (iter.hasNext()) sb.append(""String_Node_Str"");
while (iter.hasNext()) {
sb.append(""String_Node_Str"").append(iter.next()).append(""String_Node_Str"");
if (iter.hasNext()) sb.append(""String_Node_Str"");
}
if (components.size() > 0) sb.append(""String_Node_Str"");
elm.setAttribute(scriptEvent,""String_Node_Str"" + sb.toString() + ""String_Node_Str"");
if (tg.getCondition().getValue() == TriggerCondition.ONMOUSEOVER) {
elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
}
setCursor(elm);
((SVGGraphics2D)_g2d).addCSSStyle(""String_Node_Str"" + seDT.hashCode(),""String_Node_Str"",""String_Node_Str"");
}
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
}
}
break;
case ActionType.INVOKE_SCRIPT:
final StructureSource sructSource=(StructureSource)ie.getSource();
if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) {
AccessibilityValue accessValue=((AccessibilityValue)tg.getAction().getValue());
if (accessValue.getText() != null) {
Element title=((SVGGraphics2D)_g2d).createElement(""String_Node_Str"");
title.appendChild(svggc.dom.createTextNode(accessValue.getText()));
elm.appendChild(title);
}
if (accessValue.getAccessibility() != null) {
Element description=((SVGGraphics2D)_g2d).createElement(""String_Node_Str"");
description.appendChild(svggc.dom.createTextNode(accessValue.getAccessibility()));
elm.appendChild(description);
}
}
 else {
String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
if (scriptEvent != null) {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ sructSource.getSource().hashCode()+ ""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
((SVGGraphics2D)_g2d).addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
}
break;
}
}
hotspotLayer.appendChild(elm);
}
}",0.9362109001502528
78370,"public DesignElementHandle createElement(Object extendedData){
  ExtendedItemHandle handle=DesignElementFactory.getInstance().newExtendedItem(getNewName(extendedData),getElementType());
  if (getBuilder() != null) {
    if (!editElement(handle)) {
      return null;
    }
  }
  return handle;
}","public DesignElementHandle createElement(Object extendedData){
  ExtendedItemHandle handle=DesignElementFactory.getInstance().newExtendedItem(getNewName(extendedData),getElementType());
  return handle;
}",0.8176352705410822
78371,"protected boolean performInsert(Object model,SlotHandle slotHandle,String type,String position,Map extendData) throws Exception {
  DesignElementHandle elementHandle=createElement(slotHandle,type);
  if (extendData != null) {
    extendData.put(IRequestConstants.REQUEST_KEY_RESULT,elementHandle);
  }
  if (elementHandle == null) {
    return false;
  }
  if (position == InsertAction.CURRENT) {
    slotHandle.add(elementHandle);
  }
 else {
    int pos=DNDUtil.calculateNextPosition(model,DNDUtil.handleValidateTargetCanContain(model,elementHandle,true));
    if (pos > 0 && position == InsertAction.ABOVE) {
      pos--;
    }
    if (pos == -1) {
      slotHandle.add(elementHandle);
    }
 else {
      slotHandle.add(elementHandle,pos);
    }
  }
  return true;
}","protected boolean performInsert(Object model,SlotHandle slotHandle,String type,String position,Map extendData) throws Exception {
  DesignElementHandle elementHandle=createElement(slotHandle,type);
  if (extendData != null) {
    extendData.put(IRequestConstants.REQUEST_KEY_RESULT,elementHandle);
  }
  if (elementHandle == null) {
    return false;
  }
  if (position == InsertAction.CURRENT) {
    slotHandle.add(elementHandle);
  }
 else {
    int pos=DNDUtil.calculateNextPosition(model,DNDUtil.handleValidateTargetCanContain(model,elementHandle,true));
    if (pos > 0 && position == InsertAction.ABOVE) {
      pos--;
    }
    if (pos == -1) {
      slotHandle.add(elementHandle);
    }
 else {
      slotHandle.add(elementHandle,pos);
    }
  }
  if (elementHandle instanceof ExtendedItemHandle) {
    if (!ElementProcessorFactory.createProcessor(elementHandle).editElement(elementHandle)) {
      return false;
    }
  }
  return true;
}",0.8945835760046593
78372,"/** 
 * Testcase for test setCategoryProvider() method
 */
public void testSetCategoryProvider(){
  BaseAttributePage page=new BaseAttributePage(new Shell(),SWT.NULL);
  page.setCategoryProvider(null);
  assertEquals(0,page.categoryList.getItemCount());
  final String[] labels=new String[]{""String_Node_Str"",""String_Node_Str""};
  page.setCategoryProvider(new ICategoryProvider(){
    public String[] getCategoryLabels(){
      return labels;
    }
    public void createCategoryPanes(    Composite parent,    List input){
    }
    public void setCategoryInput(    Composite parent,    List input){
    }
    public Control getCategoryPane(    String category){
      return null;
    }
    public String getCategoryByIndex(    int index){
      return null;
    }
  }
);
  assertEquals(labels.length,page.categoryList.getItemCount());
  assertEquals(0,page.categoryList.getSelectionIndex());
}","/** 
 * Testcase for test setCategoryProvider() method
 */
public void testSetCategoryProvider(){
}",0.1991951710261569
78373,"/** 
 * Execute the report design which includes: <br> 1. Read the input design and create the task. <br> 2. Set report render options (including format, locale, output file name etc). <br> 3. Run the task.
 */
protected int runAndRenderReport(){
  try {
    IReportRunnable runnable=engine.openReportDesign(source);
    HashMap inputValues=evaluateParameterValues(runnable);
    IRunAndRenderTask task=engine.createRunAndRenderTask(runnable);
    task.setParameterValues(inputValues);
    IRenderOption options;
    if (format.equalsIgnoreCase(""String_Node_Str"")) {
      options=new FORenderOption();
    }
 else     if (format.equalsIgnoreCase(""String_Node_Str"")) {
      options=new FORenderOption();
    }
 else {
      options=new HTMLRenderOption();
      if (""String_Node_Str"".equals(htmlType))       ((HTMLRenderOption)options).setEmbeddable(true);
    }
    options.setOutputFormat(format);
    options.setOutputFileName(targetFile);
    options.getOutputSetting().put(HTMLRenderOption.URL_ENCODING,encoding);
    task.setRenderOption(options);
    if (format.equalsIgnoreCase(""String_Node_Str"")) {
      HTMLRenderContext renderContext=new HTMLRenderContext();
      renderContext.setImageDirectory(""String_Node_Str"");
      HashMap appContext=new HashMap();
      appContext.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT,renderContext);
      task.setAppContext(appContext);
    }
    task.setLocale(getLocale(locale));
    task.run();
    return 0;
  }
 catch (  EngineException e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
    return -1;
  }
}","/** 
 * Execute the report design which includes: <br> 1. Read the input design and create the task. <br> 2. Set report render options (including format, locale, output file name etc). <br> 3. Run the task.
 */
protected int runAndRenderReport(){
  try {
    IReportRunnable runnable=engine.openReportDesign(source);
    HashMap inputValues=evaluateParameterValues(runnable);
    IRunAndRenderTask task=engine.createRunAndRenderTask(runnable);
    task.setParameterValues(inputValues);
    IRenderOption options;
    if (format.equalsIgnoreCase(""String_Node_Str"")) {
      options=new HTMLRenderOption();
      if (""String_Node_Str"".equals(htmlType))       ((HTMLRenderOption)options).setEmbeddable(true);
    }
 else {
      options=new RenderOptionBase();
    }
    options.setOutputFormat(format);
    options.setOutputFileName(targetFile);
    options.getOutputSetting().put(HTMLRenderOption.URL_ENCODING,encoding);
    task.setRenderOption(options);
    if (format.equalsIgnoreCase(""String_Node_Str"")) {
      HTMLRenderContext renderContext=new HTMLRenderContext();
      renderContext.setImageDirectory(""String_Node_Str"");
      HashMap appContext=new HashMap();
      appContext.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT,renderContext);
      task.setAppContext(appContext);
    }
    task.setLocale(getLocale(locale));
    task.run();
    return 0;
  }
 catch (  EngineException e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
    return -1;
  }
}",0.93285055957867
78374,"public void setRenderOption(IRenderOption options){
  if (options != null) {
    String format=options.getOutputFormat();
    if (format == null || format.length() == 0) {
      options.setOutputFormat(""String_Node_Str"");
    }
    if (""String_Node_Str"".equalsIgnoreCase(format)) {
      if (options instanceof FORenderOption) {
        FORenderOption foOptions=(FORenderOption)options;
        if (foOptions.getTailoredForFOP()) {
          options.setOutputFormat(""String_Node_Str"");
        }
      }
    }
  }
  renderOptions=options;
  executionContext.setRenderOption(renderOptions);
}","public void setRenderOption(IRenderOption options){
  if (options != null) {
    String format=options.getOutputFormat();
    if (format == null || format.length() == 0) {
      options.setOutputFormat(""String_Node_Str"");
    }
  }
  renderOptions=options;
  executionContext.setRenderOption(renderOptions);
}",0.5466666666666666
78375,"/** 
 * Create an IJointDataSetDesign instance.
 * @param handle
 * @param context2
 * @return
 * @throws BirtException
 */
private IJointDataSetDesign newJointDataSet(JointDataSetHandle handle,ExecutionContext context2) throws BirtException {
  Iterator it=handle.joinConditionsIterator();
  List joinConditions=new ArrayList();
  JoinConditionHandle jc=null;
  while (it.hasNext()) {
    jc=(JoinConditionHandle)it.next();
    joinConditions.add(new JoinConditionExpression(new ScriptExpression(jc.getLeftExpression()),new ScriptExpression(jc.getRightExpression()),toDteJoinOperator(jc.getOperator())));
  }
  IBaseDataSetDesign leftDataSet=new BaseDataSetDesign(jc.getLeftDataSet());
  IBaseDataSetDesign rightDataSet=new BaseDataSetDesign(jc.getRightDataSet());
  int joinType=toDteJoinType(jc.getJoinType());
  IBaseDataSetEventHandler eventHandler=new DataSetScriptExecutor(handle,context);
  JointDataSetDesign dteDataSet=new JointDataSetDesign(handle.getName(),leftDataSet,rightDataSet,joinType,joinConditions);
  dteDataSet.setEventHandler(eventHandler);
  adaptBaseDataSet(handle,dteDataSet);
  return dteDataSet;
}","/** 
 * Create an IJointDataSetDesign instance.
 * @param handle
 * @param context2
 * @return
 * @throws BirtException
 */
private IJointDataSetDesign newJointDataSet(JointDataSetHandle handle,ExecutionContext context2) throws BirtException {
  Iterator it=handle.joinConditionsIterator();
  List joinConditions=new ArrayList();
  JoinConditionHandle jc=null;
  while (it.hasNext()) {
    jc=(JoinConditionHandle)it.next();
    joinConditions.add(new JoinConditionExpression(new ScriptExpression(jc.getLeftExpression()),new ScriptExpression(jc.getRightExpression()),toDteJoinOperator(jc.getOperator())));
  }
  IBaseDataSetDesign leftDataSet=null;
  IBaseDataSetDesign rightDataSet=null;
  List dataSets=handle.getModuleHandle().getAllDataSets();
  for (int i=0; i < dataSets.size(); i++) {
    DataSetHandle dsHandle=(DataSetHandle)dataSets.get(i);
    if (dsHandle.getName() != null) {
      if (dsHandle.getName().equals(jc.getLeftDataSet())) {
        leftDataSet=createDataSetDesign(dsHandle);
      }
      if (dsHandle.getName().equals(jc.getRightDataSet())) {
        rightDataSet=createDataSetDesign(dsHandle);
      }
    }
  }
  int joinType=toDteJoinType(jc.getJoinType());
  IBaseDataSetEventHandler eventHandler=new DataSetScriptExecutor(handle,context);
  JointDataSetDesign dteDataSet=new JointDataSetDesign(handle.getName(),leftDataSet,rightDataSet,joinType,joinConditions);
  dteDataSet.setEventHandler(eventHandler);
  adaptBaseDataSet(handle,dteDataSet);
  return dteDataSet;
}",0.8105223027068242
78376,"protected Element createText(String text){
  Element elem=dom.createElement(""String_Node_Str"");
  elem.appendChild(dom.createTextNode(text));
  elem.setAttribute(""String_Node_Str"",getFont().getFamily());
  elem.setAttribute(""String_Node_Str"",Integer.toString(getFont().getSize()));
  String style=getRenderingStyle(RenderingHints.KEY_TEXT_ANTIALIASING);
  if (color != null) {
    String alpha=alphaToString(color);
    if (alpha != null)     style+=""String_Node_Str"" + alpha + ""String_Node_Str"";
    style+=""String_Node_Str"" + serializeToString(color) + ""String_Node_Str"";
  }
  elem.setAttribute(""String_Node_Str"",style);
  if (transforms.getType() != AffineTransform.TYPE_IDENTITY) {
    double[] matrix=new double[6];
    transforms.getMatrix(matrix);
    elem.setAttribute(""String_Node_Str"",""String_Node_Str"" + matrix[0] + ""String_Node_Str""+ matrix[1]+ ""String_Node_Str""+ matrix[2]+ ""String_Node_Str""+ matrix[3]+ ""String_Node_Str""+ matrix[4]+ ""String_Node_Str""+ matrix[5]+ ""String_Node_Str"");
  }
  return elem;
}","protected Element createText(String text){
  Element elem=dom.createElement(""String_Node_Str"");
  elem.appendChild(dom.createTextNode(text));
switch (getFont().getStyle()) {
case Font.BOLD:
    elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
  break;
case Font.ITALIC:
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
break;
case (Font.BOLD + Font.ITALIC):
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
break;
}
String textDecorator=null;
Map attributes=getFont().getAttributes();
if (attributes.get(TextAttribute.UNDERLINE) == TextAttribute.UNDERLINE_ON) {
textDecorator=""String_Node_Str"";
}
if (attributes.get(TextAttribute.STRIKETHROUGH) == TextAttribute.STRIKETHROUGH_ON) {
if (textDecorator == null) textDecorator=""String_Node_Str"";
 else textDecorator+=""String_Node_Str"";
}
if (textDecorator != null) elem.setAttribute(""String_Node_Str"",textDecorator);
elem.setAttribute(""String_Node_Str"",getFont().getFamily());
elem.setAttribute(""String_Node_Str"",Integer.toString(getFont().getSize()));
String style=getRenderingStyle(RenderingHints.KEY_TEXT_ANTIALIASING);
if (color != null) {
String alpha=alphaToString(color);
if (alpha != null) style+=""String_Node_Str"" + alpha + ""String_Node_Str"";
style+=""String_Node_Str"" + serializeToString(color) + ""String_Node_Str"";
}
elem.setAttribute(""String_Node_Str"",style);
if (transforms.getType() != AffineTransform.TYPE_IDENTITY) {
double[] matrix=new double[6];
transforms.getMatrix(matrix);
elem.setAttribute(""String_Node_Str"",""String_Node_Str"" + matrix[0] + ""String_Node_Str""+ matrix[1]+ ""String_Node_Str""+ matrix[2]+ ""String_Node_Str""+ matrix[3]+ ""String_Node_Str""+ matrix[4]+ ""String_Node_Str""+ matrix[5]+ ""String_Node_Str"");
}
return elem;
}",0.6922525107604017
78377,"/** 
 * Returns the value of an element reference property. Returns a handle to the referenced element, or <code>null</code> if the reference is unresolved or unset.
 * @param propName the name of the property.
 * @return a corresponding DesignElement handle to the referenced element
 */
public DesignElementHandle getElementProperty(String propName){
  DesignElement target=getElement().getReferenceProperty(module,propName);
  if (target == null)   return null;
  return target.getHandle(module);
}","/** 
 * Returns the value of an element reference property. Returns a handle to the referenced element, or <code>null</code> if the reference is unresolved or unset.
 * @param propName the name of the property.
 * @return a corresponding DesignElement handle to the referenced element
 */
public DesignElementHandle getElementProperty(String propName){
  DesignElement target=getElement().getReferenceProperty(module,propName);
  if (target == null)   return null;
  return target.getHandle(target.getRoot());
}",0.9782608695652174
78378,"/** 
 * Initializes the report design when it is just created. <p> Set the value to the properties on repot design element which need the initialize valuel.  All initialize operations will not go into the command stack and can not be undo redo.
 * @param properties the property name value pairs.Those properties in the map are which need to be initialized.
 * @throws SemanticException SemamticException will throw out when the give properties map contians invlid property name or property value.
 * @deprecated
 */
public void initializeModule(Map properties) throws SemanticException {
  if (isInitialized)   return;
  String name=null;
  Object value=null;
  Module module=(Module)getElement();
  Set propNames=properties.keySet();
  Iterator itre=propNames.iterator();
  while (itre.hasNext()) {
    name=(String)itre.next();
    value=PropertyValueValidationUtil.validateProperty(this,name,properties.get(name));
    module.setProperty(name,value);
  }
  isInitialized=true;
}","/** 
 * Initializes the report design when it is just created. <p> Set the value to the properties on repot design element which need the initialize valuel. All initialize operations will not go into the command stack and can not be undo redo.
 * @param properties the property name value pairs.Those properties in the map are which need to be initialized.
 * @throws SemanticException SemamticException will throw out when the give properties map contians invlid property name or property value.
 * @deprecated
 */
public void initializeModule(Map properties) throws SemanticException {
  if (isInitialized)   return;
  String name=null;
  Object value=null;
  Module module=(Module)getElement();
  Set propNames=properties.keySet();
  Iterator itre=propNames.iterator();
  while (itre.hasNext()) {
    name=(String)itre.next();
    value=PropertyValueValidationUtil.validateProperty(this,name,properties.get(name));
    module.setProperty(name,value);
  }
  isInitialized=true;
}",0.999490575649516
78379,"/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
public void init(HttpServletRequest request){
  String servletPath=request.getServletPath();
  if (servletPath.indexOf(""String_Node_Str"") != -1) {
    this.category=""String_Node_Str"";
  }
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.reportDocumentName=ParameterAccessor.getReportDocument(request);
  File reportDocFile=new File(this.reportDocumentName);
  String reportDesignName=ParameterAccessor.getReport(request);
  File reportDesignDocFile=new File(reportDesignName);
  if (reportDesignDocFile != null && reportDesignDocFile.exists() && reportDesignDocFile.isFile() && reportDocFile != null && reportDocFile.exists() && reportDocFile.isFile() && ""String_Node_Str"".equalsIgnoreCase(request.getMethod())) {
    if (reportDesignDocFile.lastModified() > reportDocFile.lastModified() || ParameterAccessor.isOverwrite(request)) {
      reportDocFile.delete();
    }
  }
  if (reportDocFile.exists() && reportDocFile.isFile()) {
    this.reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDocumentName);
    if (this.reportDocumentInstance == null) {
      this.exception=new Exception(""String_Node_Str"" + ParameterAccessor.getReportDocument(request));
      return;
    }
    this.reportRunnable=this.reportDocumentInstance.getReportRunnable();
  }
 else {
    try {
      this.reportRunnable=ReportEngineService.getInstance().openReportDesign(ParameterAccessor.getReport(request));
    }
 catch (    EngineException e) {
      this.exception=e;
      return;
    }
  }
  if (this.reportRunnable == null) {
    this.exception=new Exception(""String_Node_Str"");
    return;
  }
  this.locale=ParameterAccessor.getLocale(request);
  this.reportPage=String.valueOf(ParameterAccessor.getPage(request));
  String title=null;
  if (this.reportRunnable != null) {
    title=(String)this.reportRunnable.getProperty(""String_Node_Str"");
  }
  if (title == null || title.trim().length() <= 0) {
    title=BirtResources.getString(""String_Node_Str"");
  }
  this.reportTitle=ParameterAccessor.htmlEncode(title);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.parameterTask=ReportEngineService.getInstance().createGetParameterDefinitionTask(this.reportRunnable);
  if (this.parameterTask != null) {
    this.parameterTask.setLocale(this.locale);
  }
  this.parameters=ReportEngineService.getInstance().parseParameters(request,this.parameterTask,this.reportRunnable.getTestConfig(),this.locale);
  this.missingParameter=ReportEngineService.getInstance().validateParameters(this.parameterTask,this.parameters);
}","/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
public void init(HttpServletRequest request){
  String servletPath=request.getServletPath();
  if (servletPath.indexOf(""String_Node_Str"") != -1) {
    this.category=""String_Node_Str"";
  }
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.reportDocumentName=ParameterAccessor.getReportDocument(request);
  File reportDocFile=new File(this.reportDocumentName);
  String reportDesignName=ParameterAccessor.getReport(request);
  File reportDesignDocFile=new File(reportDesignName);
  if (reportDesignDocFile != null && reportDesignDocFile.exists() && reportDesignDocFile.isFile() && reportDocFile != null && reportDocFile.exists() && reportDocFile.isFile() && ""String_Node_Str"".equalsIgnoreCase(request.getMethod())) {
    if (reportDesignDocFile.lastModified() > reportDocFile.lastModified() || ParameterAccessor.isOverwrite(request)) {
      reportDocFile.delete();
    }
  }
  if (reportDocFile.exists() && reportDocFile.isFile()) {
    this.reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDocumentName);
    if (this.reportDocumentInstance == null) {
      this.exception=new Exception(""String_Node_Str"" + ParameterAccessor.getReportDocument(request));
      return;
    }
    this.reportRunnable=this.reportDocumentInstance.getReportRunnable();
  }
 else {
    if (ViewerServlet.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || ViewerServlet.SERVLET_PATH_PREVIEW.equalsIgnoreCase(request.getServletPath()) || ViewerServlet.SERVLET_PATH_PARAMETER.equalsIgnoreCase(request.getServletPath())) {
      this.exception=new EngineException(MessageUtility.format(BirtResources.getString(MessageConstants.REPORT_DOCUMENT_NOT_FOUND_EXCEPTION),reportDocumentName));
      return;
    }
    try {
      this.reportRunnable=ReportEngineService.getInstance().openReportDesign(ParameterAccessor.getReport(request));
    }
 catch (    EngineException e) {
      this.exception=e;
      return;
    }
  }
  if (this.reportRunnable == null) {
    this.exception=new Exception(""String_Node_Str"");
    return;
  }
  this.locale=ParameterAccessor.getLocale(request);
  this.reportPage=String.valueOf(ParameterAccessor.getPage(request));
  String title=null;
  if (this.reportRunnable != null) {
    title=(String)this.reportRunnable.getProperty(""String_Node_Str"");
  }
  if (title == null || title.trim().length() <= 0) {
    title=BirtResources.getString(""String_Node_Str"");
  }
  this.reportTitle=ParameterAccessor.htmlEncode(title);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.parameterTask=ReportEngineService.getInstance().createGetParameterDefinitionTask(this.reportRunnable);
  if (this.parameterTask != null) {
    this.parameterTask.setLocale(this.locale);
  }
  this.parameters=ReportEngineService.getInstance().parseParameters(request,this.parameterTask,this.reportRunnable.getTestConfig(),this.locale);
  this.missingParameter=ReportEngineService.getInstance().validateParameters(this.parameterTask,this.parameters);
}",0.8548036758563075
78380,"/** 
 * Process http request with POST method. Four different servlet paths are expected: ""/frameset"", ""/navigation"", ""/toolbar"", and ""/run"".
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
  if (ParameterAccessor.HEADER_REQUEST_TYPE_SOAP.equalsIgnoreCase(requestType)) {
    ReportEngineService.getInstance().setEngineContext(getServletContext(),request);
    BirtContext context=new BirtContext(request);
    if (""String_Node_Str"".equalsIgnoreCase(request.getServletPath())) {
      if (context.getBean().getException() != null) {
        context.finalize();
        String target=""String_Node_Str"";
        request.setAttribute(""String_Node_Str"",context.getBean().getException());
        RequestDispatcher rd=request.getRequestDispatcher(target);
        rd.include(request,response);
      }
 else {
        try {
          engine.service(request,response);
        }
 catch (        BirtException e) {
          String target=""String_Node_Str"";
          request.setAttribute(""String_Node_Str"",e);
          RequestDispatcher rd=request.getRequestDispatcher(target);
          rd.include(request,response);
        }
 finally {
          context.finalize();
        }
      }
    }
 else {
      super.doPost(request,response);
      context.finalize();
    }
  }
 else {
    doGet(request,response);
  }
}","/** 
 * Process http request with POST method. Four different servlet paths are expected: ""/frameset"", ""/navigation"", ""/toolbar"", and ""/run"".
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
  if (ParameterAccessor.HEADER_REQUEST_TYPE_SOAP.equalsIgnoreCase(requestType)) {
    ReportEngineService.getInstance().setEngineContext(getServletContext(),request);
    BirtContext context=new BirtContext(request);
    if (""String_Node_Str"".equalsIgnoreCase(request.getServletPath())) {
      if (context.getBean().getException() != null) {
        context.finalize();
        displayException(request,response,context.getBean().getException());
      }
 else {
        try {
          engine.service(request,response);
        }
 catch (        BirtException e) {
          displayException(request,response,e);
        }
 finally {
          context.finalize();
        }
      }
    }
 else {
      super.doPost(request,response);
      context.finalize();
    }
  }
 else {
    doGet(request,response);
  }
}",0.6307371349095967
78381,"/** 
 * Process http request with GET method
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  ReportEngineService.getInstance().setEngineContext(getServletContext(),request);
  BirtContext context=new BirtContext(request);
  if (context.getBean().getException() != null) {
    context.finalize();
    String target=""String_Node_Str"";
    request.setAttribute(""String_Node_Str"",context.getBean().getException());
    RequestDispatcher rd=request.getRequestDispatcher(target);
    rd.include(request,response);
  }
 else {
    try {
      if (""String_Node_Str"".equalsIgnoreCase(request.getServletPath())) {
        viewer.service(request,response);
      }
      if (""String_Node_Str"".equalsIgnoreCase(request.getServletPath())) {
        preview.service(request,response);
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(request.getServletPath())) {
        engine.service(request,response);
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(request.getServletPath())) {
        parameter.service(request,response);
      }
    }
 catch (    BirtException e) {
      String target=""String_Node_Str"";
      request.setAttribute(""String_Node_Str"",e);
      RequestDispatcher rd=request.getRequestDispatcher(target);
      rd.include(request,response);
    }
 finally {
      context.finalize();
    }
  }
}","/** 
 * Process http request with GET method
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 */
public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  ReportEngineService.getInstance().setEngineContext(getServletContext(),request);
  BirtContext context=new BirtContext(request);
  if (context.getBean().getException() != null) {
    context.finalize();
    displayException(request,response,context.getBean().getException());
  }
 else {
    try {
      if (SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) {
        viewer.service(request,response);
      }
 else       if (SERVLET_PATH_PREVIEW.equalsIgnoreCase(request.getServletPath())) {
        preview.service(request,response);
      }
 else       if (SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath())) {
        engine.service(request,response);
      }
 else       if (SERVLET_PATH_PARAMETER.equalsIgnoreCase(request.getServletPath())) {
        parameter.service(request,response);
      }
    }
 catch (    BirtException e) {
      displayException(request,response,e);
    }
 finally {
      context.finalize();
    }
  }
}",0.3775620280474649
78382,"/** 
 * Returns the resource bundle with the locale.
 * @param locale the given locale
 * @return the resource bundle
 */
public ResourceBundle getResourceBundle(ULocale locale);","/** 
 * Returns the resource bundle with the locale.
 * @param locale the given locale
 * @return the resource bundle
 */
public UResourceBundle getResourceBundle(ULocale locale);",0.9971988795518208
78383,"/** 
 * if the schema is not support, populate the table list
 */
protected void populateTableList(){
  if (rootNode != null) {
    removeTreeItem(rootNode);
  }
  ResultSet tablesRs=null;
  ArrayList procedureRs=null;
  String catalogName=metaDataProvider.getCatalog();
  String namePattern=null;
  String[] tableType=null;
  cachedSearchTxt=searchTxt.getText();
  namePattern=getTailoredSearchText(searchTxt.getText());
  String dbtype=getSelectedDbType();
  cachedDbType=dbtype;
  if (dbtype != null) {
    if (DbType.TABLE_STRING.equalsIgnoreCase(dbtype) || DbType.VIEW_STRING.equalsIgnoreCase(dbtype)) {
      tableType=new String[]{dbtype};
    }
  }
  if (metaDataProvider.isProcedureSupported())   procedureRs=metaDataProvider.getAllProcedure(catalogName,null,namePattern);
  if (!DbType.PROCEDURE_STRING.equalsIgnoreCase(dbtype))   tablesRs=metaDataProvider.getAlltables(catalogName,null,namePattern,tableType);
  if (tablesRs == null && procedureRs == null) {
    return;
  }
  try {
    Image image=tableImage;
    if (tablesRs != null) {
      int numberOfTable;
      Preferences preferences=ReportPlugin.getDefault().getPluginPreferences();
      if (preferences.contains(DateSetPreferencePage.USER_MAX_NUM_OF_TABLE_EACH_SCHEMA)) {
        numberOfTable=preferences.getInt(DateSetPreferencePage.USER_MAX_NUM_OF_TABLE_EACH_SCHEMA);
      }
 else {
        numberOfTable=DateSetPreferencePage.DEFAULT_MAX_NUM_OF_TABLE_EACH_SCHEMA;
        preferences.setValue(DateSetPreferencePage.USER_MAX_NUM_OF_TABLE_EACH_SCHEMA,numberOfTable);
      }
      int count=0;
      tableList=new ArrayList();
      while (tablesRs.next() && count < numberOfTable) {
        String tableName=tablesRs.getString(""String_Node_Str"");
        String type=tablesRs.getString(""String_Node_Str"");
        if (type.equalsIgnoreCase(""String_Node_Str""))         continue;
        int dbType=DbObject.TABLE_TYPE;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=tableImage;
          dbType=DbObject.TABLE_TYPE;
        }
 else         if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=viewImage;
          dbType=DbObject.VIEW_TYPE;
        }
        DbObject dbObject=new DbObject(tableName,tableName,dbType,image);
        tableList.add(dbObject);
        count++;
      }
    }
    if (needToCreateProcedureNode(dbtype,procedureRs)) {
      String fullyQualifiedTableName=""String_Node_Str"";
      DbObject dbObject=new DbObject(fullyQualifiedTableName,""String_Node_Str"",DbObject.PROCEDURE_TYPE,tableImage);
      tableList.add(dbObject);
    }
    TreeItem item[]=Utility.createTreeItems(rootNode,tableList,SWT.NONE,null);
    if (item != null && item.length > 0)     availableDbObjectsTree.showItem(item[0]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * if the schema is not support, populate the table list
 */
protected void populateTableList(){
  if (rootNode != null) {
    removeTreeItem(rootNode);
  }
  ResultSet tablesRs=null;
  ArrayList procedureRs=null;
  String catalogName=metaDataProvider.getCatalog();
  String namePattern=null;
  String[] tableType=null;
  cachedSearchTxt=searchTxt.getText();
  namePattern=getTailoredSearchText(searchTxt.getText());
  String dbtype=getSelectedDbType();
  cachedDbType=dbtype;
  if (dbtype != null) {
    if (DbType.TABLE_STRING.equalsIgnoreCase(dbtype) || DbType.VIEW_STRING.equalsIgnoreCase(dbtype)) {
      tableType=new String[]{dbtype};
    }
  }
  if (metaDataProvider.isProcedureSupported())   procedureRs=metaDataProvider.getAllProcedure(catalogName,null,namePattern);
  if (!DbType.PROCEDURE_STRING.equalsIgnoreCase(dbtype))   tablesRs=metaDataProvider.getAlltables(catalogName,null,namePattern,tableType);
  if (tablesRs == null && procedureRs == null) {
    return;
  }
  try {
    Image image=tableImage;
    if (tablesRs != null) {
      int numberOfTable;
      Preferences preferences=ReportPlugin.getDefault().getPluginPreferences();
      if (preferences.contains(DateSetPreferencePage.USER_MAX_NUM_OF_TABLE_EACH_SCHEMA)) {
        numberOfTable=preferences.getInt(DateSetPreferencePage.USER_MAX_NUM_OF_TABLE_EACH_SCHEMA);
      }
 else {
        numberOfTable=DateSetPreferencePage.DEFAULT_MAX_NUM_OF_TABLE_EACH_SCHEMA;
        preferences.setValue(DateSetPreferencePage.USER_MAX_NUM_OF_TABLE_EACH_SCHEMA,numberOfTable);
      }
      int count=0;
      tableList=new ArrayList();
      while (tablesRs.next() && count < numberOfTable) {
        String tableName=tablesRs.getString(""String_Node_Str"");
        String type=tablesRs.getString(""String_Node_Str"");
        if (type.equalsIgnoreCase(""String_Node_Str""))         continue;
        int dbType=DbObject.TABLE_TYPE;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=tableImage;
          dbType=DbObject.TABLE_TYPE;
        }
 else         if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=viewImage;
          dbType=DbObject.VIEW_TYPE;
        }
        DbObject dbObject=new DbObject(getTableNameWithSchema(null,tableName),tableName,dbType,image);
        tableList.add(dbObject);
        count++;
      }
    }
    if (needToCreateProcedureNode(dbtype,procedureRs)) {
      String fullyQualifiedTableName=""String_Node_Str"";
      DbObject dbObject=new DbObject(fullyQualifiedTableName,""String_Node_Str"",DbObject.PROCEDURE_TYPE,tableImage);
      tableList.add(dbObject);
    }
    TreeItem item[]=Utility.createTreeItems(rootNode,tableList,SWT.NONE,null);
    if (item != null && item.length > 0)     availableDbObjectsTree.showItem(item[0]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.994479073909172
78384,"public void dragSetData(DragSourceEvent event){
  if (TextTransfer.getInstance().isSupportedType(event.dataType)) {
    TreeItem[] selection=availableDbObjectsTree.getSelection();
    if (selection.length > 0) {
      Object obj=selection[0].getData();
      if (obj instanceof DbObject) {
        event.data=((DbObject)obj).getName();
      }
 else       if (obj instanceof Procedure) {
        event.data=((Procedure)obj).getProcedureNameWithSchema();
      }
 else       event.data=selection[0].getData();
    }
  }
}","public void dragSetData(DragSourceEvent event){
  if (TextTransfer.getInstance().isSupportedType(event.dataType)) {
    TreeItem[] selection=availableDbObjectsTree.getSelection();
    if (selection.length > 0) {
      Object obj=selection[0].getData();
      if (obj instanceof DbObject) {
        event.data=getDnDString(((DbObject)obj).getName());
      }
 else       if (obj instanceof Procedure) {
        event.data=getDnDString(((Procedure)obj).getProcedureNameWithSchema());
      }
 else {
        event.data=getDnDString(selection[0].getData());
      }
    }
  }
}",0.9506398537477148
78385,"/** 
 * Creates the composite,  for displaying the list of available db objects
 * @param parent
 */
private void createTableSelectionComposite(Composite parent){
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessVerticalSpace=true;
    tablescomposite.setLayoutData(data);
  }
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
{
    GridData data=new GridData();
    dataSourceLabel.setLayoutData(data);
  }
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessHorizontalSpace=true;
    data.grabExcessVerticalSpace=true;
    availableDbObjectsTree.setLayoutData(data);
  }
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
    }
  }
);
  availableDbObjectsTree.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (event.widget.getClass() != null)       handleAvailabeTreeSelection();
    }
    private void handleAvailabeTreeSelection(){
      TreeItem items[]=availableDbObjectsTree.getSelection();
      for (int i=0; i < items.length; i++) {
        if (items[i].getGrayed()) {
          availableDbObjectsTree.setRedraw(false);
          availableDbObjectsTree.deselectAll();
          availableDbObjectsTree.setRedraw(true);
          availableDbObjectsTree.redraw();
        }
      }
    }
  }
);
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
{
    GridLayout groupLayout=new GridLayout();
    groupLayout.numColumns=3;
    groupLayout.verticalSpacing=10;
    selectTableGroup.setLayout(groupLayout);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    selectTableGroup.setLayoutData(data);
  }
  schemaLabel=new Label(selectTableGroup,SWT.LEFT);
  schemaLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  schemaCombo=new Combo(selectTableGroup,SWT.READ_ONLY);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  schemaCombo.setLayoutData(gd);
  enableSchemaComponent(isSchemaSupported);
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
{
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    data.horizontalSpan=2;
    searchTxt.setLayoutData(data);
  }
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer);
  filterComboViewer.getControl().setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          populateAvailableDbObjects();
        }
      }
);
    }
  }
);
  setRootElement();
  addDragSupportToTree();
}","/** 
 * Creates the composite,  for displaying the list of available db objects
 * @param parent
 */
private void createTableSelectionComposite(Composite parent){
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessVerticalSpace=true;
    tablescomposite.setLayoutData(data);
  }
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
{
    GridData data=new GridData();
    dataSourceLabel.setLayoutData(data);
  }
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessHorizontalSpace=true;
    data.grabExcessVerticalSpace=true;
    availableDbObjectsTree.setLayoutData(data);
  }
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
    }
  }
);
  availableDbObjectsTree.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (event.widget.getClass() != null)       handleAvailabeTreeSelection();
    }
    private void handleAvailabeTreeSelection(){
      TreeItem items[]=availableDbObjectsTree.getSelection();
      for (int i=0; i < items.length; i++) {
        if (items[i].getGrayed()) {
          availableDbObjectsTree.setRedraw(false);
          availableDbObjectsTree.deselectAll();
          availableDbObjectsTree.setRedraw(true);
          availableDbObjectsTree.redraw();
        }
      }
    }
  }
);
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
{
    GridLayout groupLayout=new GridLayout();
    groupLayout.numColumns=3;
    groupLayout.verticalSpacing=10;
    selectTableGroup.setLayout(groupLayout);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    selectTableGroup.setLayoutData(data);
  }
  schemaLabel=new Label(selectTableGroup,SWT.LEFT);
  schemaLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  schemaCombo=new Combo(selectTableGroup,SWT.READ_ONLY);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  schemaCombo.setLayoutData(gd);
  enableSchemaComponent(isSchemaSupported);
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
{
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    data.horizontalSpan=2;
    searchTxt.setLayoutData(data);
  }
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer);
  filterComboViewer.getControl().setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          populateAvailableDbObjects();
        }
      }
);
    }
  }
);
  setupIdentifierQuoteStringCheckBox(selectTableGroup);
  setRootElement();
  addDragSupportToTree();
}",0.9919285096569616
78386,"/** 
 * Adds drag support to tree..Must set tree before execution.
 */
public void addDragSupportToTree(){
  DragSource dragSource=new DragSource(availableDbObjectsTree,DND.DROP_COPY);
  dragSource.setTransfer(new Transfer[]{TextTransfer.getInstance()});
  dragSource.addDragListener(new DragSourceAdapter(){
    public void dragStart(    DragSourceEvent event){
      TreeItem[] selection=availableDbObjectsTree.getSelection();
      if (selection.length > 0) {
        if (selection[0].getData() instanceof DbObject) {
          if (((DbObject)selection[0].getData()).getType() == DbObject.PROCEDURE_TYPE) {
            event.doit=false;
            return;
          }
        }
 else         if (selection[0].getData() instanceof ProcedureParameter) {
          event.doit=false;
          return;
        }
      }
 else       if (selection.length <= 0 || selection[0].getData() == null) {
        event.doit=false;
        return;
      }
    }
    public void dragSetData(    DragSourceEvent event){
      if (TextTransfer.getInstance().isSupportedType(event.dataType)) {
        TreeItem[] selection=availableDbObjectsTree.getSelection();
        if (selection.length > 0) {
          Object obj=selection[0].getData();
          if (obj instanceof DbObject) {
            event.data=((DbObject)obj).getName();
          }
 else           if (obj instanceof Procedure) {
            event.data=((Procedure)obj).getProcedureNameWithSchema();
          }
 else           event.data=selection[0].getData();
        }
      }
    }
  }
);
}","/** 
 * Adds drag support to tree..Must set tree before execution.
 */
public void addDragSupportToTree(){
  DragSource dragSource=new DragSource(availableDbObjectsTree,DND.DROP_COPY);
  dragSource.setTransfer(new Transfer[]{TextTransfer.getInstance()});
  dragSource.addDragListener(new DragSourceAdapter(){
    public void dragStart(    DragSourceEvent event){
      TreeItem[] selection=availableDbObjectsTree.getSelection();
      if (selection.length > 0) {
        if (selection[0].getData() instanceof DbObject) {
          if (((DbObject)selection[0].getData()).getType() == DbObject.PROCEDURE_TYPE) {
            event.doit=false;
            return;
          }
        }
 else         if (selection[0].getData() instanceof ProcedureParameter) {
          event.doit=false;
          return;
        }
      }
 else       if (selection.length <= 0 || selection[0].getData() == null) {
        event.doit=false;
        return;
      }
    }
    public void dragSetData(    DragSourceEvent event){
      if (TextTransfer.getInstance().isSupportedType(event.dataType)) {
        TreeItem[] selection=availableDbObjectsTree.getSelection();
        if (selection.length > 0) {
          Object obj=selection[0].getData();
          if (obj instanceof DbObject) {
            event.data=getDnDString(((DbObject)obj).getName());
          }
 else           if (obj instanceof Procedure) {
            event.data=getDnDString(((Procedure)obj).getProcedureNameWithSchema());
          }
 else {
            event.data=getDnDString(selection[0].getData());
          }
        }
      }
    }
  }
);
}",0.9815638906547998
78387,"public void widgetSelected(SelectionEvent e){
  intervalBaseText.setEnabled(intervalBaseButton.getSelection());
}","public void widgetSelected(SelectionEvent e){
  intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
  intervalBaseButton.setEnabled(intervalType.getSelectionIndex() != 0 && (getColumnType() != String.class));
  intervalBaseText.setEnabled(intervalBaseButton.getEnabled() && intervalBaseButton.getSelection());
}",0.4393592677345537
78388,"/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  Composite keyArea=new Composite(composite,SWT.NONE);
  keyArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  keyChooser=new Combo(keyArea,SWT.DROP_DOWN);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button exprButton=new Button(keyArea,SWT.PUSH);
  exprButton.setText(""String_Node_Str"");
  exprButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(getKeyExpression());
      expressionBuilder.setExpressionProvier(new ExpressionProvider(dataSetList));
      if (expressionBuilder.open() == OK) {
        setKeyExpression(expressionBuilder.getResult().trim());
      }
    }
  }
);
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  Composite intervalTypeArea=new Composite(intervalArea,SWT.NONE);
  intervalTypeArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalTypeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  Composite intervalRangeArea=new Composite(intervalArea,SWT.NONE);
  intervalRangeArea.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRangeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  new Label(intervalTypeArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalRangeArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalTypeArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
      intervalBaseButton.setEnabled(intervalType.getSelectionIndex() != 0);
      intervalBaseText.setEnabled(intervalBaseButton.getEnabled() && intervalBaseButton.getSelection());
    }
  }
);
  intervalRange=new Spinner(intervalRangeArea,SWT.NONE);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.setMinimum(0);
  intervalRange.setMaximum(Integer.MAX_VALUE);
  intervalRange.setStep(1);
  intervalBaseButton=new Button(composite,SWT.CHECK);
  intervalBaseButton.setText(GROUP_DLG_INTERVAL_BASE_LABEL);
  intervalBaseButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalBaseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalBaseText.setEnabled(intervalBaseButton.getSelection());
    }
  }
);
  intervalBaseText=new Text(composite,SWT.SINGLE | SWT.BORDER);
  intervalBaseText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}","/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  Composite keyArea=new Composite(composite,SWT.NONE);
  keyArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  keyChooser=new Combo(keyArea,SWT.DROP_DOWN);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyChooser.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!keyChooser.getText().trim().equals(""String_Node_Str""))       resetInterval();
    }
  }
);
  Button exprButton=new Button(keyArea,SWT.PUSH);
  exprButton.setText(""String_Node_Str"");
  exprButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(getKeyExpression());
      expressionBuilder.setExpressionProvier(new ExpressionProvider(dataSetList));
      if (expressionBuilder.open() == OK) {
        setKeyExpression(expressionBuilder.getResult().trim());
      }
    }
  }
);
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  Composite intervalTypeArea=new Composite(intervalArea,SWT.NONE);
  intervalTypeArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalTypeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  Composite intervalRangeArea=new Composite(intervalArea,SWT.NONE);
  intervalRangeArea.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRangeArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  new Label(intervalTypeArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalRangeArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalTypeArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
      intervalBaseButton.setEnabled(intervalType.getSelectionIndex() != 0 && (getColumnType() != String.class));
      intervalBaseText.setEnabled(intervalBaseButton.getEnabled() && intervalBaseButton.getSelection());
    }
  }
);
  intervalRange=new Spinner(intervalRangeArea,SWT.NONE);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.setMinimum(0);
  intervalRange.setMaximum(Integer.MAX_VALUE);
  intervalRange.setStep(1);
  intervalBaseButton=new Button(composite,SWT.CHECK);
  intervalBaseButton.setText(GROUP_DLG_INTERVAL_BASE_LABEL);
  intervalBaseButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalBaseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalBaseText.setEnabled(intervalBaseButton.getSelection());
    }
  }
);
  intervalBaseText=new Text(composite,SWT.SINGLE | SWT.BORDER);
  intervalBaseText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}",0.9501528645487172
78389,"protected boolean initDialog(){
  if (inputGroup.getName() != null) {
    nameEditor.setText(inputGroup.getName());
  }
  columnList=DataSetManager.getCurrentInstance().getColumns(dataSetList);
  Iterator itor=columnList.iterator();
  while (itor.hasNext()) {
    keyChooser.add(((DataSetItemModel)itor.next()).getDisplayName());
  }
  setKeyExpression(inputGroup.getKeyExpr());
  int index=getIntervalTypeIndex(inputGroup.getInterval());
  intervalType.select(index);
  if (index == 0) {
    intervalRange.setEnabled(false);
    intervalBaseButton.setEnabled(false);
    intervalBaseText.setEnabled(false);
  }
 else {
    intervalRange.setSelection(inputGroup.getIntervalRange());
    intervalBaseButton.setSelection(inputGroup.getIntervalBase() != null);
    intervalBaseText.setEnabled(intervalBaseButton.getSelection());
    if (inputGroup.getIntervalBase() != null) {
      intervalBaseText.setText(inputGroup.getIntervalBase());
    }
  }
  if (inputGroup instanceof TableGroupHandle) {
    includeHeader.setSelection(inputGroup.hasHeader());
    includeFooter.setSelection(inputGroup.hasFooter());
  }
 else {
    includeHeader.setSelection(false);
    includeFooter.setSelection(false);
  }
  if (DesignChoiceConstants.SORT_DIRECTION_ASC.equals(inputGroup.getSortDirection())) {
    ascending.setSelection(true);
  }
 else {
    descending.setSelection(true);
  }
  List list=new ArrayList(1);
  list.add(inputGroup);
  tocEditor.setText(UIUtil.convertToGUIString(inputGroup.getTocExpression()));
  return true;
}","protected boolean initDialog(){
  if (inputGroup.getName() != null) {
    nameEditor.setText(inputGroup.getName());
  }
  columnList=DataSetManager.getCurrentInstance().getColumns(dataSetList);
  Iterator itor=columnList.iterator();
  while (itor.hasNext()) {
    keyChooser.add(((DataSetItemModel)itor.next()).getDisplayName());
  }
  setKeyExpression(inputGroup.getKeyExpr());
  int index=getIntervalTypeIndex(inputGroup.getInterval());
  intervalType.select(index);
  if (index == 0) {
    intervalRange.setEnabled(false);
    intervalBaseButton.setEnabled(false);
    intervalBaseText.setEnabled(false);
  }
 else {
    intervalRange.setEnabled(true);
    intervalRange.setSelection(inputGroup.getIntervalRange());
    if (getColumnType() == String.class) {
      intervalBaseButton.setEnabled(false);
      intervalBaseText.setEnabled(false);
    }
 else {
      intervalBaseButton.setEnabled(true);
      intervalBaseButton.setSelection(inputGroup.getIntervalBase() != null);
      intervalBaseText.setEnabled(intervalBaseButton.getSelection());
      if (inputGroup.getIntervalBase() != null) {
        intervalBaseText.setText(inputGroup.getIntervalBase());
      }
    }
  }
  if (inputGroup instanceof TableGroupHandle) {
    includeHeader.setSelection(inputGroup.hasHeader());
    includeFooter.setSelection(inputGroup.hasFooter());
  }
 else {
    includeHeader.setSelection(false);
    includeFooter.setSelection(false);
  }
  if (DesignChoiceConstants.SORT_DIRECTION_ASC.equals(inputGroup.getSortDirection())) {
    ascending.setSelection(true);
  }
 else {
    descending.setSelection(true);
  }
  List list=new ArrayList(1);
  list.add(inputGroup);
  tocEditor.setText(UIUtil.convertToGUIString(inputGroup.getTocExpression()));
  return true;
}",0.9274832419256552
78390,"protected void createAndInitCustomControl(Composite parent,Properties profileProps){
  if (m_pageHelper == null)   m_pageHelper=new JDBCSelectionPageHelper(this);
  m_pageHelper.createCustomControl(parent);
  m_pageHelper.initCustomControl(profileProps);
}","protected void createAndInitCustomControl(Composite parent,Properties profileProps){
  if (m_pageHelper == null)   m_pageHelper=new JDBCSelectionPageHelper(this);
  m_pageHelper.createCustomControl(parent);
  this.setPingButtonVisible(false);
  m_pageHelper.initCustomControl(profileProps);
}",0.8905109489051095
78391,"public void createPageCustomControl(Composite parent){
  if (m_pageHelper == null)   m_pageHelper=new JDBCSelectionPageHelper(this);
  m_pageHelper.createCustomControl(parent);
  m_pageHelper.initCustomControl(m_folderProperties);
}","public void createPageCustomControl(Composite parent){
  if (m_pageHelper == null)   m_pageHelper=new JDBCSelectionPageHelper(this);
  m_pageHelper.createCustomControl(parent);
  m_pageHelper.initCustomControl(m_folderProperties);
  this.setPingButtonVisible(false);
}",0.928
78392,"/** 
 * Get report parameters.
 * @return collection of report parameter definition.
 */
public Collection getReportParameters(){
  if (parameterTask != null) {
    return parameterTask.getParameterDefns(false);
  }
  return null;
}","/** 
 * Get report parameters.
 * @return collection of report parameter definition.
 */
public Collection getReportParameters(){
  if (parameterTask != null) {
    return parameterTask.getParameters().getContents();
  }
  return null;
}",0.9424307036247336
78393,"/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param config Servlet configuration
 */
public synchronized static void initParameters(ServletConfig config){
  workingFolder=config.getServletContext().getInitParameter(INIT_PARAM_REPORT_DIR);
  if (workingFolder == null || workingFolder.trim().length() <= 0) {
    workingFolder=config.getServletContext().getRealPath(""String_Node_Str"");
  }
  if (workingFolder != null && workingFolder.trim().endsWith(File.separator)) {
    workingFolder=workingFolder.trim().substring(0,workingFolder.trim().length() - 1);
  }
  webAppLocale=getLocaleFromString(config.getServletContext().getInitParameter(INIT_PARAM_LOCALE));
}","/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param config Servlet configuration
 */
public synchronized static void initParameters(ServletConfig config){
  ServletContext context=config.getServletContext();
  workingFolder=context.getInitParameter(INIT_PARAM_REPORT_DIR);
  if (workingFolder == null || workingFolder.trim().length() <= 0) {
    workingFolder=context.getRealPath(""String_Node_Str"");
  }
  if (workingFolder != null && workingFolder.trim().endsWith(File.separator)) {
    workingFolder=workingFolder.trim().substring(0,workingFolder.trim().length() - 1);
  }
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
}",0.8571428571428571
78394,"/** 
 * If a report file name is a relative path, it is relative to working folder. So if a report file path is relative path, it's absolute path is synthesized by appending file path to the working folder path.
 * @param file
 * @return
 */
private static String createAbsolutePath(String filePath){
  if (isRelativePath(filePath)) {
    filePath=workingFolder + File.separator + filePath;
  }
  return filePath;
}","/** 
 * If a report file name is a relative path, it is relative to working folder. So if a report file path is relative path, it's absolute path is synthesized by appending file path to the working folder path.
 * @param file
 * @return
 */
private static String createAbsolutePath(String filePath){
  if (isWorkingFolderAccessOnly || isRelativePath(filePath)) {
    return workingFolder + File.separator + filePath;
  }
  return filePath;
}",0.9474912485414236
78395,"private void createExpressionField(Composite parent){
  Composite expressionArea=new Composite(parent,SWT.NONE);
  expressionArea.setLayout(new GridLayout(2,false));
  expressionArea.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite composite=new Composite(expressionArea,SWT.BORDER);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  composite.setLayout(UIUtil.createGridLayoutWithoutMargin());
  CompositeRuler ruler=new CompositeRuler();
  ruler.addDecorator(0,new LineNumberRulerColumn());
  sourceViewer=new SourceViewer(composite,ruler,SWT.H_SCROLL | SWT.V_SCROLL);
  sourceViewer.configure(new JSSourceViewerConfiguration());
  if (expression != null) {
    JSEditorInput editorInput=new JSEditorInput(expression);
    JSDocumentProvider documentProvider=new JSDocumentProvider();
    try {
      documentProvider.connect(editorInput);
    }
 catch (    CoreException e) {
      ExceptionHandler.handle(e);
    }
    IDocument document=documentProvider.getDocument(editorInput);
    sourceViewer.setDocument(document);
  }
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=150;
  sourceViewer.getControl().setLayoutData(gd);
  sourceViewer.getTextWidget().addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (isUndoKeyPress(e)) {
        sourceViewer.doOperation(ITextOperationTarget.UNDO);
      }
 else       if (isRedoKeyPress(e)) {
        sourceViewer.doOperation(ITextOperationTarget.REDO);
      }
    }
    private boolean isUndoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'z') || (e.keyCode == 'Z'));
    }
    private boolean isRedoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'y') || (e.keyCode == 'Y'));
    }
  }
);
  buttonBar=new Composite(expressionArea,SWT.NONE);
  buttonBar.setLayout(UIUtil.createGridLayoutWithoutMargin());
  buttonBar.setLayoutData(new GridData(GridData.FILL_VERTICAL));
}","private void createExpressionField(Composite parent){
  Composite expressionArea=new Composite(parent,SWT.NONE);
  expressionArea.setLayout(new GridLayout(2,false));
  expressionArea.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite composite=new Composite(expressionArea,SWT.BORDER);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  composite.setLayout(UIUtil.createGridLayoutWithoutMargin());
  CompositeRuler ruler=new CompositeRuler();
  ruler.addDecorator(0,new LineNumberRulerColumn());
  sourceViewer=new SourceViewer(composite,ruler,SWT.H_SCROLL | SWT.V_SCROLL);
  sourceViewer.configure(new JSSourceViewerConfiguration());
  if (expression != null) {
    JSEditorInput editorInput=new JSEditorInput(expression);
    JSDocumentProvider documentProvider=new JSDocumentProvider();
    try {
      documentProvider.connect(editorInput);
    }
 catch (    CoreException e) {
      ExceptionHandler.handle(e);
    }
    IDocument document=documentProvider.getDocument(editorInput);
    sourceViewer.setDocument(document);
  }
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=150;
  sourceViewer.getControl().setLayoutData(gd);
  if (Platform.getOS().equals(Platform.WS_WIN32)) {
    Font font=sourceViewer.getTextWidget().getFont();
    FontData data=font.getFontData()[0];
    Font newFont=FontManager.getFont(data.getName(),data.getHeight() + 1,data.getStyle());
    sourceViewer.getTextWidget().setFont(newFont);
  }
  sourceViewer.getTextWidget().addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (isUndoKeyPress(e)) {
        sourceViewer.doOperation(ITextOperationTarget.UNDO);
      }
 else       if (isRedoKeyPress(e)) {
        sourceViewer.doOperation(ITextOperationTarget.REDO);
      }
    }
    private boolean isUndoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'z') || (e.keyCode == 'Z'));
    }
    private boolean isRedoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'y') || (e.keyCode == 'Y'));
    }
  }
);
  buttonBar=new Composite(expressionArea,SWT.NONE);
  buttonBar.setLayout(UIUtil.createGridLayoutWithoutMargin());
  buttonBar.setLayoutData(new GridData(GridData.FILL_VERTICAL));
}",0.9311721869861403
78396,"public void layout(IFigure container){
  if (data != null && data.columnWidths != null && data.columnWidths.length == getColumnCount() && data.rowHeights != null && data.rowHeights.length == getRowCount() && !needlayout || !owner.isActive()) {
    return;
  }
  helper=new TableBorderHelper(owner);
  helper.updateCellBorderInsets();
  data=new WorkingData();
  data.columnWidths=new TableLayoutData.ColumnData[getColumnCount()];
  data.rowHeights=new TableLayoutData.RowData[getRowCount()];
  init(data.columnWidths,data.rowHeights);
  List children=container.getChildren();
  initMinSize(children);
  initMergeMinsize(children);
  caleLayoutData(container);
  layoutTable(container);
  resetRowMinSize(data.rowHeights);
  initRowMinSize(children);
  initRowMergeMinsize(children);
  caleRowData();
  layoutTable(container);
  setConstraint(container,data);
  needlayout=false;
  reselect();
}","public void layout(IFigure container){
  if (data != null && data.columnWidths != null && data.columnWidths.length == getColumnCount() && data.rowHeights != null && data.rowHeights.length == getRowCount() && !needlayout || !owner.isActive()) {
    return;
  }
  helper=new TableBorderHelper(owner);
  helper.updateCellBorderInsets();
  data=new WorkingData();
  data.columnWidths=new TableLayoutData.ColumnData[getColumnCount()];
  data.rowHeights=new TableLayoutData.RowData[getRowCount()];
  init(data.columnWidths,data.rowHeights);
  List children=container.getChildren();
  initMinSize(children);
  initMergeMinsize(children);
  caleLayoutData(container);
  layoutTable(container);
  resetRowMinSize(data.rowHeights);
  initRowMinSize(children);
  initRowMergeMinsize(children);
  caleRowData();
  layoutTable(container);
  setConstraint(container,data);
  needlayout=false;
  int containerWidth=getOwner().getFigure().getParent().getClientArea().getSize().width;
  if (containerWidth < 0) {
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        getOwner().markDirty(true,true);
      }
    }
);
    return;
  }
  reselect();
}",0.8583941605839416
78397,"/** 
 * Executes the Command. This method should not be called if the Command is not executable.
 */
public void execute(){
  DesignElementHandle newObject=(DesignElementHandle)extendsData.get(DesignerConstants.KEY_NEWOBJECT);
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"");
  }
  try {
    if (parent instanceof SlotHandle) {
      if (after != null) {
        int pos=DEUtil.findInsertPosition(((SlotHandle)parent).getElementHandle(),(DesignElementHandle)after,((SlotHandle)parent).getSlotID());
        ((SlotHandle)parent).add(newObject,pos);
      }
 else {
        ((SlotHandle)parent).add(newObject);
      }
    }
 else     if (newObject instanceof DataSourceHandle) {
      ((DesignElementHandle)parent).addElement(newObject,ReportDesignHandle.DATA_SOURCE_SLOT);
    }
 else {
      if (after != null) {
        int pos=DEUtil.findInsertPosition((DesignElementHandle)parent,(DesignElementHandle)after);
        int slotID=DEUtil.findSlotID(parent,after);
        ((DesignElementHandle)parent).addElement(newObject,slotID,pos);
      }
 else {
        ((DesignElementHandle)parent).addElement(newObject,DEUtil.getDefaultSlotID(parent));
      }
    }
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(newObject) + ""String_Node_Str"");
    }
  }
 catch (  SemanticException e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    e.printStackTrace();
  }
}","/** 
 * Executes the Command. This method should not be called if the Command is not executable.
 */
public void execute(){
  DesignElementHandle newObject=getNewObject();
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"");
  }
  try {
    if (parent instanceof SlotHandle) {
      if (after != null) {
        int pos=DEUtil.findInsertPosition(((SlotHandle)parent).getElementHandle(),(DesignElementHandle)after,((SlotHandle)parent).getSlotID());
        ((SlotHandle)parent).add(newObject,pos);
      }
 else {
        ((SlotHandle)parent).add(newObject);
      }
    }
 else     if (newObject instanceof DataSourceHandle) {
      ((DesignElementHandle)parent).addElement(newObject,ReportDesignHandle.DATA_SOURCE_SLOT);
    }
 else {
      if (after != null) {
        int pos=DEUtil.findInsertPosition((DesignElementHandle)parent,(DesignElementHandle)after);
        int slotID=DEUtil.findSlotID(parent,after);
        ((DesignElementHandle)parent).addElement(newObject,slotID,pos);
      }
 else {
        ((DesignElementHandle)parent).addElement(newObject,DEUtil.getDefaultSlotID(parent));
      }
    }
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(newObject) + ""String_Node_Str"");
    }
  }
 catch (  SemanticException e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    e.printStackTrace();
  }
}",0.9741176470588236
78398,"public void run(){
  Object model=evt.getNewValue();
  Object editpart=getViewer().getEditPartRegistry().get(model);
  if (editpart instanceof EditPart) {
    getViewer().flush();
    if (!(editpart instanceof EmptyEditPart)) {
      getViewer().select((EditPart)editpart);
    }
  }
  if (editpart != null) {
    getViewer().reveal((EditPart)editpart);
  }
}","public void run(){
  SetCurrentEditModelCommand c=new SetCurrentEditModelCommand(getNewObject());
  c.execute();
}",0.1564482029598308
78399,"public void dragOver(DropTargetEvent event){
  super.dragOver(event);
  if (getTargetEditPart() == null || getTargetEditPart().getModel() instanceof LibraryHandle) {
    event.detail=DND.DROP_NONE;
  }
}","public void dragOver(DropTargetEvent event){
  super.dragOver(event);
  if (getTargetEditPart() == null) {
    event.detail=DND.DROP_NONE;
    return;
  }
  if (getTargetEditPart().getModel() instanceof LibraryHandle) {
    List list=getTargetEditPart().getChildren();
    if (list.size() > 0 && !(list.get(0) instanceof EmptyEditPart)) {
      event.detail=DND.DROP_NONE;
    }
  }
}",0.6780238500851788
78400,"protected boolean handleMove(){
  boolean validateTrue=false;
  if (isCreating) {
    return true;
  }
  updateTargetUnderMouse();
  if (getTargetEditPart().getModel() instanceof LibraryHandle) {
    return true;
  }
  if (getTargetEditPart() != null) {
    validateTrue=handleValidatePalette(getFactory().getObjectType(),getTargetEditPart());
  }
  if (validateTrue) {
    updateTargetRequest();
    setCurrentCommand(getCommand());
    showTargetFeedback();
  }
 else {
    setCurrentCommand(null);
  }
  return validateTrue;
}","protected boolean handleMove(){
  boolean validateTrue=false;
  if (isCreating) {
    return true;
  }
  updateTargetUnderMouse();
  if (getTargetEditPart().getModel() instanceof LibraryHandle) {
  }
  if (getTargetEditPart() != null) {
    validateTrue=handleValidatePalette(getFactory().getObjectType(),getTargetEditPart());
  }
  if (validateTrue) {
    updateTargetRequest();
    setCurrentCommand(getCommand());
    showTargetFeedback();
  }
 else {
    setCurrentCommand(null);
  }
  return validateTrue;
}",0.983669548511047
78401,"private Object getTableParent(){
  DesignElementHandle element=getColumnHandle().getContainer();
  if (element instanceof TableGroupHandle) {
    element=element.getContainer();
  }
  return element;
}","public Object getTableParent(){
  DesignElementHandle element=getColumnHandle().getContainer();
  if (element instanceof TableGroupHandle) {
    element=element.getContainer();
  }
  return element;
}",0.972568578553616
78402,"public int getColumnNumber(){
  return HandleAdapterFactory.getInstance().getColumnHandleAdapter(getModel()).getColumnNumber();
}","public int getColumnNumber(){
  ColumnHandleAdapter adapt=HandleAdapterFactory.getInstance().getColumnHandleAdapter(getModel());
  if (adapt.getTableParent() == null) {
    return -1;
  }
  return adapt.getColumnNumber();
}",0.6931818181818182
78403,"public int getRowNumber(){
  return HandleAdapterFactory.getInstance().getRowHandleAdapter(getModel()).getRowNumber();
}","public int getRowNumber(){
  RowHandleAdapter adapt=HandleAdapterFactory.getInstance().getRowHandleAdapter(getModel());
  if (adapt.getTableParent() == null) {
    return -1;
  }
  return adapt.getRowNumber();
}",0.6827794561933535
78404,"/** 
 * Get report parameters.
 * @return collection of report parameter definition.
 */
public Collection getReportParameters(){
  if (parameterTask != null) {
    return parameterTask.getParameters().getContents();
  }
  return null;
}","/** 
 * Get report parameters.
 * @return collection of report parameter definition.
 */
public Collection getReportParameters(){
  if (parameterTask != null) {
    return parameterTask.getParameterDefns(false);
  }
  return null;
}",0.9509594882729212
78405,"/** 
 * Return the root node of a schema tree.
 * @param fileName
 * @return
 * @throws OdaException
 * @throws MalformedURLException 
 * @throws URISyntaxException 
 */
public static ATreeNode getSchemaTree(String fileName,boolean incAttr) throws OdaException, MalformedURLException, URISyntaxException {
  includeAttribute=incAttr;
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  URI uri=null;
  File f=new File(fileName);
  uri=f.toURI();
  if (uri == null) {
    uri=new URI(fileName);
  }
  XSLoader xsLoader=new XMLSchemaLoader();
  XSModel xsModel=xsLoader.loadURI(uri.toString());
  ATreeNode complexTypesRoot=populateComplexTypeTree(xsModel);
  XSNamedMap map=xsModel.getComponents(XSConstants.ELEMENT_DECLARATION);
  ATreeNode root=new ATreeNode();
  root.setValue(""String_Node_Str"");
  for (int i=0; i < map.getLength(); i++) {
    ATreeNode node=new ATreeNode();
    XSElementDecl element=(XSElementDecl)map.item(i);
    node.setValue(element.getName());
    node.setType(ATreeNode.ELEMENT_TYPE);
    node.setDataType(element.getName());
    if (element.getTypeDefinition() instanceof XSComplexTypeDecl) {
      XSComplexTypeDecl complexType=(XSComplexTypeDecl)element.getTypeDefinition();
      if (complexType.getName() != null) {
        node.setDataType(complexType.getName());
        node.addChild(findComplexElement(complexTypesRoot,complexType.getName()).getChildren());
      }
 else {
        addParticleAndAttributeInfo(node,complexType,complexTypesRoot);
      }
    }
    root.addChild(node);
  }
  populateRoot(root);
  return root;
}","/** 
 * Return the root node of a schema tree.
 * @param fileName
 * @return
 * @throws OdaException
 * @throws MalformedURLException 
 * @throws URISyntaxException 
 */
public static ATreeNode getSchemaTree(String fileName,boolean incAttr) throws OdaException, MalformedURLException, URISyntaxException {
  includeAttribute=incAttr;
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  URI uri=null;
  File f=new File(fileName);
  uri=f.toURI();
  if (uri == null) {
    uri=new URI(fileName);
  }
  XSLoader xsLoader=new XMLSchemaLoader();
  XSModel xsModel=xsLoader.loadURI(uri.toString());
  ATreeNode complexTypesRoot=populateComplexTypeTree(xsModel);
  XSNamedMap map=xsModel.getComponents(XSConstants.ELEMENT_DECLARATION);
  ATreeNode root=new ATreeNode();
  root.setValue(""String_Node_Str"");
  for (int i=0; i < map.getLength(); i++) {
    ATreeNode node=new ATreeNode();
    XSElementDecl element=(XSElementDecl)map.item(i);
    node.setValue(element.getName());
    node.setType(ATreeNode.ELEMENT_TYPE);
    node.setDataType(element.getName());
    if (element.getTypeDefinition() instanceof XSComplexTypeDecl) {
      XSComplexTypeDecl complexType=(XSComplexTypeDecl)element.getTypeDefinition();
      if (complexType.getName() != null) {
        node.setDataType(complexType.getName());
        ATreeNode n=findComplexElement(complexTypesRoot,complexType.getName());
        if (n != null)         node.addChild(n.getChildren());
      }
 else {
        addParticleAndAttributeInfo(node,complexType,complexTypesRoot);
      }
    }
    root.addChild(node);
  }
  populateRoot(root);
  return root;
}",0.9506999391357274
78406,"/** 
 * Add the particles and attributes that defined in an implicitly defined ComplexType to the node.
 * @param node
 * @param complexType
 */
private static void addParticleAndAttributeInfo(ATreeNode node,XSComplexTypeDecl complexType,ATreeNode complexTypesRoot){
  XSParticle particle=complexType.getParticle();
  if (particle != null) {
    XSObjectList list=((XSModelGroupImpl)particle.getTerm()).getParticles();
    for (int j=0; j < list.getLength(); j++) {
      ATreeNode childNode=new ATreeNode();
      childNode.setValue(((XSParticleDecl)list.item(j)).getTerm().getName());
      String dataType=((XSElementDecl)((XSParticleDecl)list.item(j)).getTerm()).getTypeDefinition().getName();
      if (dataType == null || dataType.length() == 0)       dataType=childNode.getValue().toString();
      childNode.setDataType(dataType);
      childNode.setType(ATreeNode.ELEMENT_TYPE);
      if ((!dataType.equals(""String_Node_Str"")) && ((XSElementDecl)((XSParticleDecl)list.item(j)).getTerm()).getTypeDefinition() instanceof XSComplexTypeDecl)       childNode.addChild(findComplexElement(complexTypesRoot,dataType).getChildren());
      node.addChild(childNode);
    }
  }
  if (!includeAttribute)   return;
  XSAttributeGroupDecl group=complexType.getAttrGrp();
  if (group != null) {
    XSObjectList list=group.getAttributeUses();
    for (int j=0; j < list.getLength(); j++) {
      ATreeNode childNode=new ATreeNode();
      childNode.setValue(((XSAttributeUseImpl)list.item(j)).getAttrDeclaration().getName());
      childNode.setType(ATreeNode.ATTRIBUTE_TYPE);
      node.addChild(childNode);
    }
  }
}","/** 
 * Add the particles and attributes that defined in an implicitly defined ComplexType to the node.
 * @param node
 * @param complexType
 */
private static void addParticleAndAttributeInfo(ATreeNode node,XSComplexTypeDecl complexType,ATreeNode complexTypesRoot){
  XSParticle particle=complexType.getParticle();
  if (particle != null) {
    XSObjectList list=((XSModelGroupImpl)particle.getTerm()).getParticles();
    for (int j=0; j < list.getLength(); j++) {
      ATreeNode childNode=new ATreeNode();
      childNode.setValue(((XSParticleDecl)list.item(j)).getTerm().getName());
      String dataType=((XSElementDecl)((XSParticleDecl)list.item(j)).getTerm()).getTypeDefinition().getName();
      if (dataType == null || dataType.length() == 0)       dataType=childNode.getValue().toString();
      childNode.setDataType(dataType);
      childNode.setType(ATreeNode.ELEMENT_TYPE);
      if ((!dataType.equals(""String_Node_Str"")) && ((XSElementDecl)((XSParticleDecl)list.item(j)).getTerm()).getTypeDefinition() instanceof XSComplexTypeDecl) {
        ATreeNode n=findComplexElement(complexTypesRoot,dataType);
        if (n != null) {
          childNode.addChild(n.getChildren());
        }
      }
      node.addChild(childNode);
    }
  }
  if (!includeAttribute)   return;
  XSAttributeGroupDecl group=complexType.getAttrGrp();
  if (group != null) {
    XSObjectList list=group.getAttributeUses();
    for (int j=0; j < list.getLength(); j++) {
      ATreeNode childNode=new ATreeNode();
      childNode.setValue(((XSAttributeUseImpl)list.item(j)).getAttrDeclaration().getName());
      childNode.setType(ATreeNode.ATTRIBUTE_TYPE);
      node.addChild(childNode);
    }
  }
}",0.9563636363636364
78407,"/** 
 * @see org.eclipse.gef.tools.DirectEditManager#bringDown()
 */
protected void bringDown(){
  Font disposeFont=scaledFont;
  scaledFont=null;
  super.bringDown();
  if (disposeFont != null)   disposeFont.dispose();
  if (getEditPart() instanceof PlaceHolderEditPart) {
    ((PlaceHolderEditPart)getEditPart()).perfrormLabelEdit(getChanged());
  }
}","/** 
 * @see org.eclipse.gef.tools.DirectEditManager#bringDown()
 */
protected void bringDown(){
  if (actionHandler != null) {
    actionHandler.dispose();
    actionHandler=null;
  }
  if (actionBars != null) {
    restoreSavedActions(actionBars);
    actionBars.updateActionBars();
    actionBars=null;
  }
  Font disposeFont=scaledFont;
  scaledFont=null;
  super.bringDown();
  if (disposeFont != null)   disposeFont.dispose();
  if (getEditPart() instanceof PlaceHolderEditPart) {
    ((PlaceHolderEditPart)getEditPart()).perfrormLabelEdit(getChanged());
  }
}",0.7682263329706203
78408,"protected void initCellEditor(){
  Text text=(Text)getCellEditor().getControl();
  LabelFigure labelFigure=(LabelFigure)getEditPart().getFigure();
  String initialLabelText=((LabelHandle)getModel()).getText();
  if (initialLabelText == null) {
    initialLabelText=""String_Node_Str"";
  }
  getCellEditor().setValue(initialLabelText);
  IFigure figure=getEditPart().getFigure();
  scaledFont=figure.getFont();
  FontData data=scaledFont.getFontData()[0];
  Dimension fontSize=new Dimension(0,data.getHeight());
  labelFigure.translateToAbsolute(fontSize);
  data.setHeight(fontSize.height);
  scaledFont=new Font(null,data);
  text.setFont(scaledFont);
  text.selectAll();
}","protected void initCellEditor(){
  Text text=(Text)getCellEditor().getControl();
  LabelFigure labelFigure=(LabelFigure)getEditPart().getFigure();
  String initialLabelText=((LabelHandle)getModel()).getText();
  if (initialLabelText == null) {
    initialLabelText=""String_Node_Str"";
  }
  getCellEditor().setValue(initialLabelText);
  IFigure figure=getEditPart().getFigure();
  scaledFont=figure.getFont();
  FontData data=scaledFont.getFontData()[0];
  Dimension fontSize=new Dimension(0,data.getHeight());
  labelFigure.translateToAbsolute(fontSize);
  data.setHeight(fontSize.height);
  scaledFont=new Font(null,data);
  text.setFont(scaledFont);
  text.selectAll();
  actionBars=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor().getEditorSite().getActionBars();
  saveCurrentActions(actionBars);
  actionHandler=new CellEditorActionHandler(actionBars);
  actionHandler.addCellEditor(getCellEditor());
  actionBars.updateActionBars();
}",0.8152634766807996
78409,"/** 
 * Creates a new JDBC connection to the embedded sample database.
 * @see org.eclipse.birt.report.data.oda.jdbc.IConnectionFactory#getConnection(java.lang.String,java.lang.String,java.util.Properties)
 */
public Connection getConnection(String driverClass,String url,Properties connectionProperties) throws SQLException {
  if (!driverClass.equals(SampleDBConstants.DRIVER_CLASS)) {
    logger.log(Level.SEVERE,""String_Node_Str"" + driverClass);
    throw new SQLException(""String_Node_Str"" + driverClass);
  }
  if (!url.equals(SampleDBConstants.DRIVER_URL)) {
    logger.log(Level.WARNING,""String_Node_Str"" + url);
    throw new SQLException(""String_Node_Str"" + driverClass);
  }
  String dbUrl=getDbUrl();
  Properties props;
  if (connectionProperties != null)   props=(Properties)connectionProperties.clone();
 else   props=new Properties();
  props.put(""String_Node_Str"",SampleDBConstants.SAMPLE_DB_SCHEMA);
  props.put(""String_Node_Str"",""String_Node_Str"");
  try {
    return JDBCDriverManager.getInstance().getConnection(SampleDBConstants.DERBY_DRIVER_CLASS,dbUrl,props);
  }
 catch (  OdaException e) {
    throw new SQLException(e.getLocalizedMessage());
  }
}","/** 
 * Creates a new JDBC connection to the embedded sample database.
 * @see org.eclipse.birt.report.data.oda.jdbc.IConnectionFactory#getConnection(java.lang.String,java.lang.String,java.util.Properties)
 */
public Connection getConnection(String driverClass,String url,Properties connectionProperties) throws SQLException {
  if (!driverClass.equals(SampleDBConstants.DRIVER_CLASS)) {
    logger.log(Level.SEVERE,""String_Node_Str"" + driverClass);
    throw new SQLException(""String_Node_Str"" + driverClass);
  }
  if (!url.equals(SampleDBConstants.DRIVER_URL)) {
    logger.log(Level.WARNING,""String_Node_Str"" + url);
    throw new SQLException(""String_Node_Str"" + driverClass);
  }
  String dbUrl=SampleDBConstants.getDBUrl();
  Properties props;
  if (connectionProperties != null)   props=(Properties)connectionProperties.clone();
 else   props=new Properties();
  props.put(""String_Node_Str"",SampleDBConstants.SAMPLE_DB_SCHEMA);
  props.put(""String_Node_Str"",""String_Node_Str"");
  try {
    return JDBCDriverManager.getInstance().getConnection(SampleDBConstants.DERBY_DRIVER_CLASS,dbUrl,props);
  }
 catch (  OdaException e) {
    throw new SQLException(e.getLocalizedMessage());
  }
}",0.9881656804733728
78410,"public void activate(){
  super.activate();
}","public void activate(){
  super.activate();
  addListBandEditPart();
}",0.782608695652174
78411,"protected void paintFigure(Graphics graphics){
  IFigure figure=source.getLayer(LayerConstants.PRIMARY_LAYER);
  TableBorderHelper helper=((TableLayout)figure.getLayoutManager()).getBorderHelper();
  if (helper == null) {
    return;
  }
  borderData=helper.getBorderData();
  rowCount=source.getRowCount();
  colCount=source.getColumnCount();
  for (int i=0; i < rowCount; i++) {
    int y=TableUtil.caleY(source,i + 1);
    int h=caleVisualHeight(i + 1);
    for (int j=0; j < colCount; j++) {
      int bottomIndex=(i + 1) * (2 * colCount + 1) + j;
      int rightIndex=i * (2 * colCount + 1) + colCount + j + 1;
      int topIndex=i * (2 * colCount + 1) + j;
      int leftIndex=i * (2 * colCount + 1) + colCount + j;
      int x=TableUtil.caleX(source,j + 1);
      int w=caleVisualWidth(j + 1);
      if (j == 0) {
        drawLeft(graphics,i,j,x,y,w,h,borderData[leftIndex]);
      }
      drawRight(graphics,i,j,x,y,w,h,borderData[rightIndex]);
      if (i == 0) {
        drawTop(graphics,i,j,x,y,w,h,borderData[topIndex]);
      }
      drawBottom(graphics,i,j,x,y,w,h,borderData[bottomIndex]);
    }
  }
}","protected void paintFigure(Graphics graphics){
  IFigure figure=source.getLayer(LayerConstants.PRIMARY_LAYER);
  TableBorderHelper helper=((TableLayout)figure.getLayoutManager()).getBorderHelper();
  if (helper == null) {
    return;
  }
  borderData=helper.getBorderData();
  rowCount=source.getRowCount();
  colCount=source.getColumnCount();
  if (borderData == null || borderData.length != (2 * colCount * rowCount + colCount + rowCount)) {
    return;
  }
  for (int i=0; i < rowCount; i++) {
    int y=TableUtil.caleY(source,i + 1);
    int h=caleVisualHeight(i + 1);
    for (int j=0; j < colCount; j++) {
      int bottomIndex=(i + 1) * (2 * colCount + 1) + j;
      int rightIndex=i * (2 * colCount + 1) + colCount + j + 1;
      int topIndex=i * (2 * colCount + 1) + j;
      int leftIndex=i * (2 * colCount + 1) + colCount + j;
      int x=TableUtil.caleX(source,j + 1);
      int w=caleVisualWidth(j + 1);
      if (j == 0) {
        drawLeft(graphics,i,j,x,y,w,h,borderData[leftIndex]);
      }
      drawRight(graphics,i,j,x,y,w,h,borderData[rightIndex]);
      if (i == 0) {
        drawTop(graphics,i,j,x,y,w,h,borderData[topIndex]);
      }
      drawBottom(graphics,i,j,x,y,w,h,borderData[bottomIndex]);
    }
  }
}",0.950596252129472
78412,"protected void setLabelInstanceId(ITextContent text){
  if (text instanceof LabelContent) {
    Object genBy=text.getGenerateBy();
    if (genBy != null && genBy instanceof LabelItemDesign) {
      boolean isTempValue=((LabelItemDesign)genBy).getHandle().isTemplateParameterValue();
      InstanceID iid=text.getInstanceID();
      if (isTempValue) {
        writer.attribute(HTMLTags.ATTR_TYPE,iid.toString());
        exportElementID(text,iid.toString(),""String_Node_Str"");
      }
    }
  }
}","protected void setLabelInstanceId(ITextContent text){
  if (text instanceof LabelContent) {
    Object genBy=text.getGenerateBy();
    if (genBy != null && genBy instanceof LabelItemDesign) {
      boolean isTempValue=((LabelItemDesign)genBy).getHandle().isTemplateParameterValue();
      InstanceID iid=text.getInstanceID();
      if (isTempValue) {
        writer.attribute(""String_Node_Str"",iid.toString());
        exportElementID(text,iid.toString(),""String_Node_Str"");
      }
    }
  }
}",0.9666329625884732
78413,"protected void createDataSet(){
  dataSet=getElementFactory().newOdaDataSet(DATA_SET_NAME);
  HashMap map=new HashMap();
  map.put(DesignerConstants.KEY_NEWOBJECT,dataSet);
  CreateCommand command=new CreateCommand(map);
  SlotHandle parent=getReportDesignHandle().getDataSets();
  command.setParent(parent);
  command.execute();
  if (dataSource1 == null)   createDataSource1();
  try {
    dataSet.setDataSource(DATA_SOURCE_NAME);
  }
 catch (  SemanticException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}","protected void createDataSet(){
  dataSet=getElementFactory().newOdaDataSet(DATA_SET_NAME);
  HashMap map=new HashMap();
  map.put(DesignerConstants.KEY_NEWOBJECT,dataSet);
  CreateCommand command=new CreateCommand(map);
  SlotHandle parent=getReportDesignHandle().getDataSets();
  command.setParent(parent);
  command.execute();
  if (dataSource == null)   createDataSource();
  try {
    dataSet.setDataSource(DATA_SOURCE_NAME);
  }
 catch (  SemanticException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}",0.9981060606060606
78414,"protected void tearDown(){
  dataItem=null;
  firstColumn=null;
  firstCell=secondCell=null;
  firstRow=secondRow=null;
  adapter=null;
  table=null;
  dataSource1=null;
}","protected void tearDown() throws SemanticException {
  clearAll(getReportDesignHandle().getBody());
  clearAll(getReportDesignHandle().getDataSources());
  clearAll(getReportDesignHandle().getDataSets());
  dataItem=null;
  firstColumn=null;
  firstCell=secondCell=null;
  firstRow=secondRow=null;
  adapter=null;
  table=null;
  dataSource=null;
}",0.6551059730250481
78415,"public void testCreateDataSource(){
  SlotHandle parent=getReportDesignHandle().getDataSources();
  assertEquals(0,parent.getCount());
  createDataSource1();
  assertEquals(1,parent.getCount());
  assertEquals(dataSource1,parent.get(0));
}","public void testCreateDataSource(){
  SlotHandle parent=getReportDesignHandle().getDataSources();
  assertEquals(0,parent.getCount());
  createDataSource();
  assertEquals(1,parent.getCount());
  assertEquals(dataSource,parent.get(0));
}",0.9957983193277312
78416,"public void testCreateDataSourceWithSameName(){
  SlotHandle parent=getReportDesignHandle().getDataSources();
  assertEquals(0,parent.getCount());
  createDataSource1();
  assertEquals(1,parent.getCount());
  DataSourceHandle dataSource2=getElementFactory().newOdaDataSource(DATA_SOURCE_NAME);
  HashMap map=new HashMap();
  map.put(DesignerConstants.KEY_NEWOBJECT,dataSource2);
  CreateCommand command=new CreateCommand(map);
  command.setParent(parent);
  command.execute();
  assertEquals(2,parent.getCount());
  assertEquals(dataSource2,parent.get(1));
  assertTrue(!dataSource2.getName().equals(DATA_SOURCE_NAME));
}","public void testCreateDataSourceWithSameName(){
  SlotHandle parent=getReportDesignHandle().getDataSources();
  assertEquals(0,parent.getCount());
  createDataSource();
  assertEquals(1,parent.getCount());
  DataSourceHandle dataSource2=getElementFactory().newOdaDataSource(DATA_SOURCE_NAME);
  HashMap map=new HashMap();
  map.put(DesignerConstants.KEY_NEWOBJECT,dataSource2);
  CreateCommand command=new CreateCommand(map);
  command.setParent(parent);
  command.execute();
  assertEquals(2,parent.getCount());
  assertEquals(dataSource2,parent.get(1));
  assertTrue(!dataSource2.getName().equals(DATA_SOURCE_NAME));
}",0.999194198227236
78417,"public void testDeleteDataSource(){
  SlotHandle parent=getReportDesignHandle().getDataSources();
  assertEquals(0,parent.getCount());
  createDataSource1();
  createDataSet();
  assertEquals(1,parent.getCount());
  assertEquals(dataSource1,parent.get(0));
  assertEquals(dataSource1,dataSet.getDataSource());
  DeleteCommand deleteCmd=new DeleteCommand(dataSource1);
  assertTrue(deleteCmd.canExecute());
  deleteCmd.execute();
  assertEquals(0,parent.getCount());
  assertNull(dataSet.getDataSource());
}","public void testDeleteDataSource(){
  SlotHandle parent=getReportDesignHandle().getDataSources();
  assertEquals(0,parent.getCount());
  createDataSource();
  createDataSet();
  assertEquals(1,parent.getCount());
  assertEquals(dataSource,parent.get(0));
  assertEquals(dataSource,dataSet.getDataSource());
  DeleteCommand deleteCmd=new DeleteCommand(dataSource);
  assertTrue(deleteCmd.canExecute());
  deleteCmd.execute();
  assertEquals(0,parent.getCount());
  assertNull(dataSet.getDataSource());
}",0.996031746031746
78418,"private void createEmbeddedImage(){
  EmbeddedImageNode embeddedImgNode=new EmbeddedImageNode(getReportDesignHandle());
  embeddedImg=new EmbeddedImage(testImageName);
  try {
    embeddedImg.setData(""String_Node_Str"".getBytes(EmbeddedImage.CHARSET));
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}","private void createEmbeddedImage(){
  embeddedImg=new EmbeddedImage(testImageName);
  try {
    embeddedImg.setData(""String_Node_Str"".getBytes(EmbeddedImage.CHARSET));
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}",0.8675078864353313
78419,"protected void tearDown(){
  super.tearDown();
  embeddedImg=null;
}","protected void tearDown() throws SemanticException {
  super.tearDown();
  embeddedImg=null;
}",0.8395061728395061
78420,"/** 
 * Visits the template data set.
 * @param obj the template data set to traverse
 */
public void visitTemplateDataSet(TemplateDataSet obj){
  DesignVisitor.this.visitTemplateElement(obj.handle(module));
}","/** 
 * Visits the template data set.
 * @param obj the template data set to traverse
 */
public void visitTemplateDataSet(TemplateDataSet obj){
  DesignVisitor.this.visitTemplateDataSet(obj.handle(module));
}",0.971291866028708
78421,"/** 
 * Visits the template element.
 * @param obj the template element to traverse
 */
public void visitTemplateElement(TemplateElementHandle obj){
  visitDesignElement(obj);
}","/** 
 * Visits the template element.
 * @param obj the template element to traverse
 */
protected void visitTemplateElement(TemplateElementHandle obj){
  visitDesignElement(obj);
}",0.969187675070028
78422,"/** 
 * Visits the template report item.
 * @param obj the template report item to traverse
 */
public void visitTemplateReportItem(TemplateReportItem obj){
  DesignVisitor.this.visitTemplateElement(obj.handle(module));
}","/** 
 * Visits the template report item.
 * @param obj the template report item to traverse
 */
public void visitTemplateReportItem(TemplateReportItem obj){
  DesignVisitor.this.visitTemplateReportItem(obj.handle(module));
}",0.9617977528089888
78423,"public IExtractionResults extract() throws EngineException {
  if (currentResult != null)   return currentResult;
  if (instanceId != null) {
    return extractByInstanceId();
  }
 else   if (resultSetName != null) {
    return extractByResultSetName();
  }
  return null;
}","public IExtractionResults extract() throws EngineException {
  if (currentResult != null)   return currentResult;
  if (resultSetName != null) {
    return extractByResultSetName();
  }
  return null;
}",0.6890756302521008
78424,"public List getMetaData() throws EngineException {
  if (resultMetaList == null) {
    resultMetaList=new ArrayList();
    ResultMetaData metaData=null;
    if (selectedColumns == null && instanceId != null) {
      currentResult=extract();
      try {
        resultMetaList.add(currentResult.getResultMetaData());
      }
 catch (      BirtException be) {
        be.printStackTrace();
      }
    }
    if (selectedColumns == null) {
      return null;
    }
 else {
      metaData=new ResultMetaData(null,selectedColumns);
      resultMetaList.add(metaData);
    }
  }
  return resultMetaList;
}","public List getMetaData() throws EngineException {
  return resultMetaList;
}",0.2278106508875739
78425,"public static void handleOnCreate(CellContent content,IRowData rowData,ExecutionContext context,boolean fromGrid){
  try {
    ReportItemDesign cellDesign=(ReportItemDesign)content.getGenerateBy();
    ICellInstance cell=new CellInstance(content,rowData,context,fromGrid);
    if (handleJS(cell,cellDesign.getOnCreate(),context).didRun())     return;
    ICellEventHandler eh=getEventHandler(cellDesign,context);
    if (eh != null)     eh.onCreate(cell,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public static void handleOnCreate(CellContent content,IRowData rowData,ExecutionContext context,boolean fromGrid){
  try {
    Object generateBy=content.getGenerateBy();
    if (generateBy == null) {
      return;
    }
    ReportItemDesign cellDesign=(ReportItemDesign)generateBy;
    ICellInstance cell=new CellInstance(content,rowData,context,fromGrid);
    if (handleJS(cell,cellDesign.getOnCreate(),context).didRun())     return;
    ICellEventHandler eh=getEventHandler(cellDesign,context);
    if (eh != null)     eh.onCreate(cell,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.826530612244898
78426,"public static void handleOnRender(CellContent content,ExecutionContext context){
  try {
    ReportItemDesign cellDesign=(ReportItemDesign)content.getGenerateBy();
    ICellInstance cell=new CellInstance(content,null,context,false);
    if (handleJS(cell,cellDesign.getOnRender(),context).didRun())     return;
    ICellEventHandler eh=getEventHandler(cellDesign,context);
    if (eh != null)     eh.onRender(cell,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public static void handleOnRender(CellContent content,ExecutionContext context){
  try {
    Object generateBy=content.getGenerateBy();
    if (generateBy == null) {
      return;
    }
    ReportItemDesign cellDesign=(ReportItemDesign)generateBy;
    ICellInstance cell=new CellInstance(content,null,context,false);
    if (handleJS(cell,cellDesign.getOnRender(),context).didRun())     return;
    ICellEventHandler eh=getEventHandler(cellDesign,context);
    if (eh != null)     eh.onRender(cell,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.8978102189781022
78427,"public void enableInteraction(InteractionEvent ie) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getLocale()));
    return;
  }
  Trigger[] triggers=ie.getTriggers();
  if (triggers == null) {
    return;
  }
  final PrimitiveRenderEvent pre=ie.getHotSpot();
  Element elm=null;
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    int[][] pa=getCoordinatesAsInts(loa);
    elm=svggc.createPolygon(pa[0],pa[1],pa[0].length);
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    elm=svggc.createOval(boEllipse.getLeft(),boEllipse.getTop(),boEllipse.getWidth(),boEllipse.getHeight());
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      elm=svggc.createGeneralPath(fArea);
    }
 else {
      elm=svggc.createGeneralPath(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
  }
  if (elm != null) {
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      final StructureSource src=(StructureSource)ie.getSource();
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
        String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
      if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
        Element title=svggc.dom.createElement(""String_Node_Str"");
        title.appendChild(svggc.dom.createTextNode(tooltipText));
        elm.appendChild(title);
        elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
        elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
    break;
case ActionType.URL_REDIRECT:
  URLValue urlValue=((URLValue)tg.getAction().getValue());
if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
  Element aLink=((SVGGraphics2D)_g2d).createElement(""String_Node_Str"");
  aLink.setAttribute(""String_Node_Str"",""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str"");
  aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
  aLink.appendChild(elm);
  elm=aLink;
}
 else {
  Element aLink=((SVGGraphics2D)_g2d).createElement(""String_Node_Str"");
  aLink.setAttribute(""String_Node_Str"",urlValue.getBaseUrl());
  if (urlValue.getTarget() != null)   aLink.setAttribute(""String_Node_Str"",urlValue.getTarget());
  aLink.appendChild(elm);
  elm=aLink;
}
break;
case ActionType.TOGGLE_VISIBILITY:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getLocale()) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
cacheSeriesHotspots.put(elm,seDT);
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
}
break;
case ActionType.HIGHLIGHT:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getLocale()) + seRT);
String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
if (scriptEvent != null) {
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
List components=(List)componentPrimitives.get(seDT);
if (components != null) {
Iterator iter=components.iterator();
StringBuffer sb=new StringBuffer();
sb.append(seDT.hashCode());
if (iter.hasNext()) sb.append(""String_Node_Str"");
while (iter.hasNext()) {
  sb.append(""String_Node_Str"").append(iter.next()).append(""String_Node_Str"");
  if (iter.hasNext())   sb.append(""String_Node_Str"");
}
if (components.size() > 0) sb.append(""String_Node_Str"");
elm.setAttribute(scriptEvent,""String_Node_Str"" + sb.toString() + ""String_Node_Str"");
if (tg.getCondition().getValue() == TriggerCondition.ONMOUSEOVER) {
  elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
}
setCursor(elm);
((SVGGraphics2D)_g2d).addCSSStyle(""String_Node_Str"" + seDT.hashCode(),""String_Node_Str"",""String_Node_Str"");
}
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
}
}
break;
case ActionType.INVOKE_SCRIPT:
final StructureSource sructSource=(StructureSource)ie.getSource();
String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
if (scriptEvent != null) {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ sructSource.getSource().hashCode()+ ""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
((SVGGraphics2D)_g2d).addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
hotspotLayer.appendChild(elm);
}
}","public void enableInteraction(InteractionEvent ie) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getLocale()));
    return;
  }
  Trigger[] triggers=ie.getTriggers();
  if (triggers == null) {
    return;
  }
  final PrimitiveRenderEvent pre=ie.getHotSpot();
  Element elm=null;
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    int[][] pa=getCoordinatesAsInts(loa);
    elm=svggc.createPolygon(pa[0],pa[1],pa[0].length);
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    elm=svggc.createOval(boEllipse.getLeft(),boEllipse.getTop(),boEllipse.getWidth(),boEllipse.getHeight());
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      elm=svggc.createGeneralPath(fArea);
    }
 else {
      elm=svggc.createGeneralPath(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
  }
  if (elm != null) {
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      final StructureSource src=(StructureSource)ie.getSource();
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
        String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
      if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
        Element title=svggc.dom.createElement(""String_Node_Str"");
        title.appendChild(svggc.dom.createTextNode(tooltipText));
        elm.appendChild(title);
        elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
        elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
    break;
case ActionType.URL_REDIRECT:
  URLValue urlValue=((URLValue)tg.getAction().getValue());
if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
  Element aLink=((SVGGraphics2D)_g2d).createElement(""String_Node_Str"");
  aLink.setAttribute(""String_Node_Str"",""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str"");
  aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
  aLink.appendChild(elm);
  elm=aLink;
}
 else {
  Element aLink=((SVGGraphics2D)_g2d).createElement(""String_Node_Str"");
  aLink.setAttribute(""String_Node_Str"",urlValue.getBaseUrl());
  if (urlValue.getTarget() != null)   aLink.setAttribute(""String_Node_Str"",urlValue.getTarget());
  aLink.appendChild(elm);
  elm=aLink;
}
break;
case ActionType.TOGGLE_VISIBILITY:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getLocale()) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
cacheSeriesHotspots.put(elm,seDT);
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
}
break;
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getLocale()) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
if (seDT != null) cacheHotspots.put(elm,seDT);
}
break;
case ActionType.HIGHLIGHT:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getLocale()) + seRT);
String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
if (scriptEvent != null) {
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
List components=(List)componentPrimitives.get(seDT);
if (components != null) {
Iterator iter=components.iterator();
StringBuffer sb=new StringBuffer();
sb.append(seDT.hashCode());
if (iter.hasNext()) sb.append(""String_Node_Str"");
while (iter.hasNext()) {
sb.append(""String_Node_Str"").append(iter.next()).append(""String_Node_Str"");
if (iter.hasNext()) sb.append(""String_Node_Str"");
}
if (components.size() > 0) sb.append(""String_Node_Str"");
elm.setAttribute(scriptEvent,""String_Node_Str"" + sb.toString() + ""String_Node_Str"");
if (tg.getCondition().getValue() == TriggerCondition.ONMOUSEOVER) {
elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
}
setCursor(elm);
((SVGGraphics2D)_g2d).addCSSStyle(""String_Node_Str"" + seDT.hashCode(),""String_Node_Str"",""String_Node_Str"");
}
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
}
}
break;
case ActionType.INVOKE_SCRIPT:
final StructureSource sructSource=(StructureSource)ie.getSource();
String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
if (scriptEvent != null) {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ sructSource.getSource().hashCode()+ ""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
((SVGGraphics2D)_g2d).addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
hotspotLayer.appendChild(elm);
}
}",0.965215901302262
78428,"protected Image createImage(byte[] data){
  return null;
}","protected Image createImage(byte[] data){
  return new SVGImage(super.createImage(data),null,data);
}",0.7295597484276729
78429,"public void doSave(IProgressMonitor progressMonitor){
  super.doSave(progressMonitor);
  Object adapter=((IEditorPart)this).getAdapter(IReportProvider.class);
  if (adapter != null) {
    IReportProvider provider=(IReportProvider)adapter;
    ModuleHandle model=provider.getReportModuleHandle(getEditorInput(),true);
    SessionHandleAdapter.getInstance().setReportDesignHandle(model);
  }
}","public void doSave(IProgressMonitor progressMonitor){
  super.doSave(progressMonitor);
  Object adapter=((IEditorPart)this).getAdapter(IReportProvider.class);
  if (adapter != null && isValidModelFile()) {
    IReportProvider provider=(IReportProvider)adapter;
    ModuleHandle model=provider.getReportModuleHandle(getEditorInput(),true);
    SessionHandleAdapter.getInstance().setReportDesignHandle(model);
  }
}",0.972636815920398
78430,"public boolean canLeaveThePage(){
  if (isDirty()) {
    MessageDialog prefDialog=new MessageDialog(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),null,Messages.getString(""String_Node_Str""),MessageDialog.INFORMATION,new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},0);
    int ret=prefDialog.open();
switch (ret) {
case 0:
      doSave(null);
    break;
case 1:
  if (getEditorInput() != null) {
    this.setInput(getEditorInput());
  }
break;
case 2:
return false;
}
}
IEditorInput input=getEditorInput();
boolean validModel=false;
if (input instanceof IPathEditorInput) {
IPath path=((IPathEditorInput)input).getPath();
try {
if (path.toOSString().endsWith(IReportEditorContants.LIBRARY_FILE_EXTENTION)) {
validModel=ModuleUtil.isValidLibrary(SessionHandleAdapter.getInstance().getSessionHandle(),path.toOSString(),new FileInputStream(new File(path.toOSString())));
}
 else {
validModel=ModuleUtil.isValidDesign(SessionHandleAdapter.getInstance().getSessionHandle(),path.toOSString(),new FileInputStream(new File(path.toOSString())));
}
}
 catch (FileNotFoundException e) {
ExceptionHandler.handle(e);
}
}
if (!validModel) {
Display.getCurrent().beep();
MessageDialog.openError(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
return false;
}
return true;
}","public boolean canLeaveThePage(){
  if (isDirty()) {
    MessageDialog prefDialog=new MessageDialog(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),null,Messages.getString(""String_Node_Str""),MessageDialog.INFORMATION,new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},0);
    int ret=prefDialog.open();
switch (ret) {
case 0:
      doSave(null);
    break;
case 1:
  if (getEditorInput() != null) {
    this.setInput(getEditorInput());
  }
break;
case 2:
return false;
}
}
boolean validModel=false;
validModel=isValidModelFile();
if (!validModel) {
Display.getCurrent().beep();
MessageDialog.openError(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
return false;
}
return true;
}",0.718266253869969
78431,"public void enableInteraction(InteractionEvent ie) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getLocale()));
    return;
  }
  Trigger[] triggers=ie.getTriggers();
  if (triggers == null) {
    return;
  }
  final PrimitiveRenderEvent pre=ie.getHotSpot();
  Element elm=null;
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    int[][] pa=getCoordinatesAsInts(loa);
    elm=svggc.createPolygon(pa[0],pa[1],pa[0].length);
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    elm=svggc.createOval(boEllipse.getLeft(),boEllipse.getTop(),boEllipse.getWidth(),boEllipse.getHeight());
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      elm=svggc.createGeneralPath(fArea);
    }
 else {
      elm=svggc.createGeneralPath(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
  }
  if (elm != null) {
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      final StructureSource src=(StructureSource)ie.getSource();
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
        String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
      if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
        Element title=svggc.dom.createElement(""String_Node_Str"");
        title.appendChild(svggc.dom.createTextNode(tooltipText));
        elm.appendChild(title);
        elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
        elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
    break;
case ActionType.URL_REDIRECT:
  URLValue urlValue=((URLValue)tg.getAction().getValue());
Element aLink=((SVGGraphics2D)_g2d).createElement(""String_Node_Str"");
aLink.setAttribute(""String_Node_Str"",urlValue.getBaseUrl());
if (urlValue.getTarget() != null) aLink.setAttribute(""String_Node_Str"",urlValue.getTarget());
aLink.appendChild(elm);
elm=aLink;
break;
case ActionType.TOGGLE_VISIBILITY:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getLocale()) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
cacheSeriesHotspots.put(elm,seDT);
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
}
break;
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getLocale()) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
if (seDT != null) cacheHotspots.put(elm,seDT);
}
break;
case ActionType.HIGHLIGHT:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getLocale()) + seRT);
String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
if (scriptEvent != null) {
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
List components=(List)componentPrimitives.get(seDT);
if (components != null) {
Iterator iter=components.iterator();
StringBuffer sb=new StringBuffer();
sb.append(seDT.hashCode());
if (iter.hasNext()) sb.append(""String_Node_Str"");
while (iter.hasNext()) {
sb.append(""String_Node_Str"").append(iter.next()).append(""String_Node_Str"");
if (iter.hasNext()) sb.append(""String_Node_Str"");
}
if (components.size() > 0) sb.append(""String_Node_Str"");
elm.setAttribute(scriptEvent,""String_Node_Str"" + sb.toString() + ""String_Node_Str"");
setCursor(elm);
((SVGGraphics2D)_g2d).addCSSStyle(""String_Node_Str"" + seDT.hashCode(),""String_Node_Str"",""String_Node_Str"");
}
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
}
}
break;
case ActionType.INVOKE_SCRIPT:
final StructureSource sructSource=(StructureSource)ie.getSource();
String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
if (scriptEvent != null) {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ sructSource.getSource().hashCode()+ ""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
((SVGGraphics2D)_g2d).addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
hotspotLayer.appendChild(elm);
}
}","public void enableInteraction(InteractionEvent ie) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getLocale()));
    return;
  }
  Trigger[] triggers=ie.getTriggers();
  if (triggers == null) {
    return;
  }
  final PrimitiveRenderEvent pre=ie.getHotSpot();
  Element elm=null;
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    int[][] pa=getCoordinatesAsInts(loa);
    elm=svggc.createPolygon(pa[0],pa[1],pa[0].length);
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    elm=svggc.createOval(boEllipse.getLeft(),boEllipse.getTop(),boEllipse.getWidth(),boEllipse.getHeight());
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      elm=svggc.createGeneralPath(fArea);
    }
 else {
      elm=svggc.createGeneralPath(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
  }
  if (elm != null) {
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      final StructureSource src=(StructureSource)ie.getSource();
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
        String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
      if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
        Element title=svggc.dom.createElement(""String_Node_Str"");
        title.appendChild(svggc.dom.createTextNode(tooltipText));
        elm.appendChild(title);
        elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
        elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
    break;
case ActionType.URL_REDIRECT:
  URLValue urlValue=((URLValue)tg.getAction().getValue());
Element aLink=((SVGGraphics2D)_g2d).createElement(""String_Node_Str"");
aLink.setAttribute(""String_Node_Str"",urlValue.getBaseUrl());
if (urlValue.getTarget() != null) aLink.setAttribute(""String_Node_Str"",urlValue.getTarget());
aLink.appendChild(elm);
elm=aLink;
break;
case ActionType.TOGGLE_VISIBILITY:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getLocale()) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
cacheSeriesHotspots.put(elm,seDT);
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
}
break;
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getLocale()) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
if (seDT != null) cacheHotspots.put(elm,seDT);
}
break;
case ActionType.HIGHLIGHT:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getLocale()) + seRT);
String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
if (scriptEvent != null) {
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
List components=(List)componentPrimitives.get(seDT);
if (components != null) {
Iterator iter=components.iterator();
StringBuffer sb=new StringBuffer();
sb.append(seDT.hashCode());
if (iter.hasNext()) sb.append(""String_Node_Str"");
while (iter.hasNext()) {
sb.append(""String_Node_Str"").append(iter.next()).append(""String_Node_Str"");
if (iter.hasNext()) sb.append(""String_Node_Str"");
}
if (components.size() > 0) sb.append(""String_Node_Str"");
elm.setAttribute(scriptEvent,""String_Node_Str"" + sb.toString() + ""String_Node_Str"");
if (tg.getCondition().getValue() == TriggerCondition.ONMOUSEOVER) {
elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
}
setCursor(elm);
((SVGGraphics2D)_g2d).addCSSStyle(""String_Node_Str"" + seDT.hashCode(),""String_Node_Str"",""String_Node_Str"");
}
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
}
}
break;
case ActionType.INVOKE_SCRIPT:
final StructureSource sructSource=(StructureSource)ie.getSource();
String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
if (scriptEvent != null) {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ sructSource.getSource().hashCode()+ ""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
((SVGGraphics2D)_g2d).addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
hotspotLayer.appendChild(elm);
}
}",0.9888641425389756
78432,"public final void setProperty(String sProperty,Object oValue){
  super.setProperty(sProperty,oValue);
  if (sProperty.equals(IDeviceRenderer.UPDATE_NOTIFIER)) {
    _iun=(IUpdateNotifier)oValue;
  }
 else   if (sProperty.equals(IDeviceRenderer.EXPECTED_BOUNDS)) {
    final Bounds bo=(Bounds)oValue;
    try {
      dom=createSvgDocument(bo.getWidth(),bo.getHeight());
      svggc=new SVGGraphics2D(dom);
      hotspotLayer=createHotspotLayer(dom);
      super.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,svggc);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (sProperty.equals(IDeviceRenderer.FILE_IDENTIFIER)) {
    oOutputIdentifier=oValue;
  }
 else   if (sProperty.equals(ISVGConstants.JAVASCRIPT_CODE_LIST)) {
    scriptCodeList=(List)oValue;
  }
 else   if (sProperty.equals(ISVGConstants.JAVASCRIPT_URL_REF_LIST)) {
    scriptRefList=(List)oValue;
  }
}","public final void setProperty(String sProperty,Object oValue){
  super.setProperty(sProperty,oValue);
  if (sProperty.equals(IDeviceRenderer.UPDATE_NOTIFIER)) {
    _iun=(IUpdateNotifier)oValue;
  }
 else   if (sProperty.equals(IDeviceRenderer.EXPECTED_BOUNDS)) {
    final Bounds bo=(Bounds)oValue;
    try {
      dom=createSvgDocument(bo.getWidth(),bo.getHeight());
      svggc=new SVGGraphics2D(dom);
      hotspotLayer=createHotspotLayer(dom);
      super.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,svggc);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (sProperty.equals(IDeviceRenderer.FILE_IDENTIFIER)) {
    oOutputIdentifier=oValue;
  }
 else   if (sProperty.equals(ISVGConstants.JAVASCRIPT_CODE_LIST)) {
    scriptCodeList=(List)oValue;
  }
 else   if (sProperty.equals(ISVGConstants.JAVASCRIPT_URL_REF_LIST)) {
    scriptRefList=(List)oValue;
  }
 else   if (sProperty.equals(ISVGConstants.RESIZE_SVG)) {
    _resizeSVG=((Boolean)oValue).booleanValue();
  }
}",0.9416710457172884
78433,"/** 
 * Updates values of <code>sourceHandle</code> with the given <code>sourceDesign</code>.
 * @param sourceDesign the ODA data source design
 * @param sourceHandle the Model handle
 * @throws SemanticException if any of <code>sourceDesign</code> property values is not valid.
 */
public void updateDataSourceHandle(DataSourceDesign sourceDesign,OdaDataSourceHandle sourceHandle) throws SemanticException {
  if (sourceDesign == null || sourceHandle == null)   return;
  DesignUtil.validateObject(sourceDesign);
  CommandStack stack=sourceHandle.getModuleHandle().getCommandStack();
  stack.startTrans(null);
  try {
    sourceHandle.getElement().setProperty(OdaDataSourceHandle.EXTENSION_ID_PROP,sourceDesign.getOdaExtensionId());
    sourceHandle.setName(sourceDesign.getName());
    sourceHandle.setDisplayName(sourceDesign.getDisplayName());
    List props=sourceDesign.getPublicProperties().getProperties();
    for (int i=0; i < props.size(); i++) {
      Property prop=(Property)props.get(i);
      sourceHandle.setProperty(prop.getName(),prop.getValue());
    }
    props=sourceDesign.getPrivateProperties().getProperties();
    for (int i=0; i < props.size(); i++) {
      Property prop=(Property)props.get(i);
      sourceHandle.setPrivateDriverProperty(prop.getName(),prop.getValue());
    }
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}","/** 
 * Updates values of <code>sourceHandle</code> with the given <code>sourceDesign</code>.
 * @param sourceDesign the ODA data source design
 * @param sourceHandle the Model handle
 * @throws SemanticException if any of <code>sourceDesign</code> property values is not valid.
 */
public void updateDataSourceHandle(DataSourceDesign sourceDesign,OdaDataSourceHandle sourceHandle) throws SemanticException {
  if (sourceDesign == null || sourceHandle == null)   return;
  DesignUtil.validateObject(sourceDesign);
  CommandStack stack=sourceHandle.getModuleHandle().getCommandStack();
  stack.startTrans(null);
  try {
    sourceHandle.getElement().setProperty(OdaDataSourceHandle.EXTENSION_ID_PROP,sourceDesign.getOdaExtensionId());
    sourceHandle.setName(sourceDesign.getName());
    sourceHandle.setDisplayName(sourceDesign.getDisplayName());
    Properties props=sourceDesign.getPublicProperties();
    if (props != null) {
      EList propList=props.getProperties();
      for (int i=0; i < propList.size(); i++) {
        Property prop=(Property)propList.get(i);
        sourceHandle.setProperty(prop.getName(),prop.getValue());
      }
    }
    props=sourceDesign.getPrivateProperties();
    if (props != null) {
      EList propList=props.getProperties();
      for (int i=0; i < propList.size(); i++) {
        Property prop=(Property)propList.get(i);
        sourceHandle.setPrivateDriverProperty(prop.getName(),prop.getValue());
      }
    }
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}",0.8855013550135501
78434,"/** 
 * Renders the FittingCurve if defined for supported series.
 * @param ipr
 * @param points
 * @param curve
 * @param bDeferred
 * @throws ChartException
 */
protected final void renderFittingCurve(IPrimitiveRenderer ipr,Location[] points,CurveFitting curve,boolean bShowAsTape,boolean bDeferred) throws ChartException {
  if (!curve.getLineAttributes().isSetVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",ResourceBundle.getBundle(Messages.ENGINE,getRunTimeContext().getLocale()));
  }
  boolean isTransposed=((ChartWithAxes)getModel()).isTransposed();
  if (curve.getLineAttributes().isVisible()) {
    ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.BEFORE_DRAW_FITTING_CURVE,curve,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_FITTING_CURVE,curve);
    double[] xArray=new double[points.length];
    double[] yArray=new double[points.length];
    for (int i=0; i < xArray.length; i++) {
      xArray[i]=points[i].getX();
      yArray[i]=points[i].getY();
    }
    sort(xArray,yArray,!isTransposed);
    double[] baseArray=xArray, orthogonalArray=yArray;
    if (isTransposed) {
      baseArray=yArray;
      orthogonalArray=xArray;
    }
    FittingCalculator fc=new FittingCalculator(baseArray,orthogonalArray,0.33);
    double[] fitYarray=fc.getFittedValue();
    orthogonalArray=fitYarray;
    if (isTransposed) {
      baseArray=fitYarray;
      orthogonalArray=yArray;
      sort(baseArray,orthogonalArray,false);
    }
    if (curve.getLineAttributes().getColor() != null) {
      CurveRenderer crdr=new CurveRenderer((ChartWithAxes)getModel(),this,curve.getLineAttributes(),LocationImpl.create(baseArray,orthogonalArray),bShowAsTape,-1,bDeferred,false,null,false);
      crdr.draw(ipr);
    }
    if (curve.getLabel().isSetVisible() && curve.getLabel().isVisible()) {
      Label lb=(Label)EcoreUtil.copy(curve.getLabel());
      final String sPreviousValue=lb.getCaption().getValue();
      lb.getCaption().setValue(getRunTimeContext().externalizedMessage(sPreviousValue));
      if (isTransposed) {
        double rot=lb.getCaption().getFont().getRotation();
        if (rot >= 0 && rot <= 90) {
          rot=-(90 - rot);
        }
 else         if (rot < 0 && rot >= -90) {
          rot=(rot + 90);
        }
        lb.getCaption().getFont().setRotation(rot);
      }
      BoundingBox bb=Methods.computeBox(getXServer(),IConstants.LEFT,lb,0,0);
      Anchor lbPosition=curve.getLabelAnchor();
      if (lbPosition == null) {
        lbPosition=Anchor.NORTH_LITERAL;
      }
      int horizontal=IConstants.CENTER;
      int vertical=IConstants.ABOVE;
switch (lbPosition.getValue()) {
case Anchor.WEST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
        horizontal=IConstants.LEFT;
      break;
case Anchor.NORTH:
case Anchor.SOUTH:
    horizontal=IConstants.CENTER;
  break;
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
horizontal=IConstants.RIGHT;
break;
}
switch (lbPosition.getValue()) {
case Anchor.NORTH:
case Anchor.NORTH_WEST:
case Anchor.NORTH_EAST:
case Anchor.WEST:
case Anchor.EAST:
vertical=IConstants.ABOVE;
break;
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
vertical=IConstants.BELOW;
break;
}
double xc, yc;
if (isTransposed) {
if (horizontal == IConstants.LEFT) {
yc=orthogonalArray[orthogonalArray.length - 1] - bb.getHeight();
}
 else if (horizontal == IConstants.RIGHT) {
yc=orthogonalArray[0] + bb.getHeight() / 2d;
}
 else {
yc=orthogonalArray[0] + (orthogonalArray[orthogonalArray.length - 1] - orthogonalArray[0]) / 2d;
}
xc=getFitYPosition(orthogonalArray,baseArray,yc,bb.getHeight(),bb.getWidth(),vertical == IConstants.BELOW);
}
 else {
if (horizontal == IConstants.LEFT) {
xc=xArray[0];
}
 else if (horizontal == IConstants.RIGHT) {
xc=xArray[xArray.length - 1] - bb.getWidth();
}
 else {
xc=xArray[0] + (xArray[xArray.length - 1] - xArray[0]) / 2d;
}
yc=getFitYPosition(xArray,fitYarray,xc,bb.getWidth(),bb.getHeight(),vertical == IConstants.ABOVE);
}
bb.setLeft(xc);
bb.setTop(yc);
if (ChartUtil.isShadowDefined(lb)) {
renderLabel(StructureSource.createSeries(getSeries()),TextRenderEvent.RENDER_SHADOW_AT_LOCATION,lb,Position.RIGHT_LITERAL,LocationImpl.create(bb.getLeft(),bb.getTop()),BoundsImpl.create(bb.getLeft(),bb.getTop(),bb.getWidth(),bb.getHeight()));
}
renderLabel(StructureSource.createSeries(getSeries()),TextRenderEvent.RENDER_TEXT_IN_BLOCK,lb,Position.RIGHT_LITERAL,LocationImpl.create(bb.getLeft(),bb.getTop()),BoundsImpl.create(bb.getLeft(),bb.getTop(),bb.getWidth(),bb.getHeight()));
}
ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.AFTER_DRAW_FITTING_CURVE,curve,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_FITTING_CURVE,curve);
}
}","/** 
 * Renders the FittingCurve if defined for supported series.
 * @param ipr
 * @param points
 * @param curve
 * @param bDeferred
 * @throws ChartException
 */
protected final void renderFittingCurve(IPrimitiveRenderer ipr,Location[] points,CurveFitting curve,boolean bShowAsTape,boolean bDeferred) throws ChartException {
  if (!curve.getLineAttributes().isSetVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",ResourceBundle.getBundle(Messages.ENGINE,getRunTimeContext().getLocale()));
  }
  boolean isTransposed=((ChartWithAxes)getModel()).isTransposed();
  if (curve.getLineAttributes().isVisible()) {
    ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.BEFORE_DRAW_FITTING_CURVE,curve,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_FITTING_CURVE,curve);
    double[] xArray=new double[points.length];
    double[] yArray=new double[points.length];
    for (int i=0; i < xArray.length; i++) {
      xArray[i]=points[i].getX();
      yArray[i]=points[i].getY();
    }
    sort(xArray,yArray,!isTransposed);
    double[] baseArray=xArray, orthogonalArray=yArray;
    if (isTransposed) {
      baseArray=yArray;
      orthogonalArray=xArray;
    }
    FittingCalculator fc=new FittingCalculator(baseArray,orthogonalArray,0.33);
    double[] fitYarray=fc.getFittedValue();
    orthogonalArray=fitYarray;
    if (isTransposed) {
      baseArray=fitYarray;
      orthogonalArray=yArray;
      sort(baseArray,orthogonalArray,false);
    }
    if (curve.getLineAttributes().getColor() != null) {
      CurveRenderer crdr=new CurveRenderer((ChartWithAxes)getModel(),this,curve.getLineAttributes(),LocationImpl.create(baseArray,orthogonalArray),bShowAsTape,-1,bDeferred,false,null,false,true);
      crdr.draw(ipr);
    }
    if (curve.getLabel().isSetVisible() && curve.getLabel().isVisible()) {
      Label lb=(Label)EcoreUtil.copy(curve.getLabel());
      final String sPreviousValue=lb.getCaption().getValue();
      lb.getCaption().setValue(getRunTimeContext().externalizedMessage(sPreviousValue));
      if (isTransposed) {
        double rot=lb.getCaption().getFont().getRotation();
        if (rot >= 0 && rot <= 90) {
          rot=-(90 - rot);
        }
 else         if (rot < 0 && rot >= -90) {
          rot=(rot + 90);
        }
        lb.getCaption().getFont().setRotation(rot);
      }
      BoundingBox bb=Methods.computeBox(getXServer(),IConstants.LEFT,lb,0,0);
      Anchor lbPosition=curve.getLabelAnchor();
      if (lbPosition == null) {
        lbPosition=Anchor.NORTH_LITERAL;
      }
      int horizontal=IConstants.CENTER;
      int vertical=IConstants.ABOVE;
switch (lbPosition.getValue()) {
case Anchor.WEST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
        horizontal=IConstants.LEFT;
      break;
case Anchor.NORTH:
case Anchor.SOUTH:
    horizontal=IConstants.CENTER;
  break;
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
horizontal=IConstants.RIGHT;
break;
}
switch (lbPosition.getValue()) {
case Anchor.NORTH:
case Anchor.NORTH_WEST:
case Anchor.NORTH_EAST:
case Anchor.WEST:
case Anchor.EAST:
vertical=IConstants.ABOVE;
break;
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
vertical=IConstants.BELOW;
break;
}
double xc, yc;
if (isTransposed) {
if (horizontal == IConstants.LEFT) {
yc=orthogonalArray[orthogonalArray.length - 1] - bb.getHeight();
}
 else if (horizontal == IConstants.RIGHT) {
yc=orthogonalArray[0] + bb.getHeight() / 2d;
}
 else {
yc=orthogonalArray[0] + (orthogonalArray[orthogonalArray.length - 1] - orthogonalArray[0]) / 2d;
}
xc=getFitYPosition(orthogonalArray,baseArray,yc,bb.getHeight(),bb.getWidth(),vertical == IConstants.BELOW);
}
 else {
if (horizontal == IConstants.LEFT) {
xc=xArray[0];
}
 else if (horizontal == IConstants.RIGHT) {
xc=xArray[xArray.length - 1] - bb.getWidth();
}
 else {
xc=xArray[0] + (xArray[xArray.length - 1] - xArray[0]) / 2d;
}
yc=getFitYPosition(xArray,fitYarray,xc,bb.getWidth(),bb.getHeight(),vertical == IConstants.ABOVE);
}
bb.setLeft(xc);
bb.setTop(yc);
if (ChartUtil.isShadowDefined(lb)) {
renderLabel(StructureSource.createSeries(getSeries()),TextRenderEvent.RENDER_SHADOW_AT_LOCATION,lb,Position.RIGHT_LITERAL,LocationImpl.create(bb.getLeft(),bb.getTop()),BoundsImpl.create(bb.getLeft(),bb.getTop(),bb.getWidth(),bb.getHeight()));
}
renderLabel(StructureSource.createSeries(getSeries()),TextRenderEvent.RENDER_TEXT_IN_BLOCK,lb,Position.RIGHT_LITERAL,LocationImpl.create(bb.getLeft(),bb.getTop()),BoundsImpl.create(bb.getLeft(),bb.getTop(),bb.getWidth(),bb.getHeight()));
}
ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.AFTER_DRAW_FITTING_CURVE,curve,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_FITTING_CURVE,curve);
}
}",0.9994938758983702
78435,"/** 
 * @param _cwa
 * @param _render
 * @param _lia
 * @param _faX
 * @param _faY
 * @param _bShowAsTape
 */
public CurveRenderer(ChartWithAxes _cwa,BaseRenderer _render,LineAttributes _lia,Location[] _lo,double _zeroLocation,boolean _bShowAsTape,double _tapeWidth,boolean _bFillArea,boolean _bTranslucent,boolean _bUseLastState,boolean _bDeferred,boolean _bKeepState,Fill paletteEntry,boolean usePaletteLineColor){
  cwa=_cwa;
  bRendering3D=_lo instanceof Location3D[];
  loPoints=_lo;
  tempPoints=_lo;
  bFillArea=_bFillArea;
  bShowAsTape=_bShowAsTape;
  bDeferred=_bDeferred;
  loa=(bShowAsTape || bFillArea) ? new Location[4] : null;
  loa3d=(bRendering3D) ? new Location3D[4] : null;
  if (_tapeWidth == -1) {
    dTapeWidth=_cwa.getSeriesThickness();
  }
 else {
    dTapeWidth=_tapeWidth;
  }
  if (loa != null) {
    for (int i=0; i < 4; i++) {
      loa[i]=LocationImpl.create(0,0);
    }
  }
  if (loa3d != null) {
    for (int i=0; i < 4; i++) {
      loa3d[i]=Location3DImpl.create(0,0,0);
    }
  }
  lia=_lia;
  zeroLocation=_zeroLocation;
  bTranslucent=_bTranslucent;
  oSource=StructureSource.createSeries(_render.getSeries());
  dc=_render.getDeferredCache();
  this.iRender=_render;
  loStart=LocationImpl.create(0,0);
  loEnd=LocationImpl.create(0,0);
  bUseLastState=_bUseLastState;
  bKeepState=_bKeepState;
  if (paletteEntry instanceof ColorDefinition && usePaletteLineColor) {
    lia=(LineAttributes)EcoreUtil.copy(lia);
    lia.setColor((ColorDefinition)EcoreUtil.copy(paletteEntry));
  }
  if (bFillArea && paletteEntry instanceof ColorDefinition) {
    fillColor=(ColorDefinition)EcoreUtil.copy(paletteEntry);
    tapeColor=fillColor.brighter();
    sideColor=fillColor.darker();
  }
 else {
    fillColor=lia.getColor();
    tapeColor=lia.getColor().brighter();
    sideColor=lia.getColor().darker();
  }
  if (bTranslucent) {
    fillColor=fillColor.translucent();
    tapeColor=tapeColor.translucent();
    sideColor=sideColor.translucent();
  }
}","/** 
 * @param _cwa
 * @param _render
 * @param _lia
 * @param _faX
 * @param _faY
 * @param _bShowAsTape
 */
public CurveRenderer(ChartWithAxes _cwa,BaseRenderer _render,LineAttributes _lia,Location[] _lo,double _zeroLocation,boolean _bShowAsTape,double _tapeWidth,boolean _bFillArea,boolean _bTranslucent,boolean _bUseLastState,boolean _bDeferred,boolean _bKeepState,Fill paletteEntry,boolean usePaletteLineColor,boolean connectMissingValue){
  cwa=_cwa;
  bRendering3D=_lo instanceof Location3D[];
  loPoints=_lo;
  tempPoints=_lo;
  bConnectMissingValue=connectMissingValue;
  bFillArea=_bFillArea;
  bShowAsTape=_bShowAsTape;
  bDeferred=_bDeferred;
  loa=(bShowAsTape || bFillArea) ? new Location[4] : null;
  loa3d=(bRendering3D) ? new Location3D[4] : null;
  if (_tapeWidth == -1) {
    dTapeWidth=_cwa.getSeriesThickness();
  }
 else {
    dTapeWidth=_tapeWidth;
  }
  if (loa != null) {
    for (int i=0; i < 4; i++) {
      loa[i]=LocationImpl.create(0,0);
    }
  }
  if (loa3d != null) {
    for (int i=0; i < 4; i++) {
      loa3d[i]=Location3DImpl.create(0,0,0);
    }
  }
  lia=_lia;
  zeroLocation=_zeroLocation;
  bTranslucent=_bTranslucent;
  oSource=StructureSource.createSeries(_render.getSeries());
  dc=_render.getDeferredCache();
  this.iRender=_render;
  loStart=LocationImpl.create(0,0);
  loEnd=LocationImpl.create(0,0);
  bUseLastState=_bUseLastState;
  bKeepState=_bKeepState;
  if (paletteEntry instanceof ColorDefinition && usePaletteLineColor) {
    lia=(LineAttributes)EcoreUtil.copy(lia);
    lia.setColor((ColorDefinition)EcoreUtil.copy(paletteEntry));
  }
  if (bFillArea && paletteEntry instanceof ColorDefinition) {
    fillColor=(ColorDefinition)EcoreUtil.copy(paletteEntry);
    tapeColor=fillColor.brighter();
    sideColor=fillColor.darker();
  }
 else {
    fillColor=lia.getColor();
    tapeColor=lia.getColor().brighter();
    sideColor=lia.getColor().darker();
  }
  if (bTranslucent) {
    fillColor=fillColor.translucent();
    tapeColor=tapeColor.translucent();
    sideColor=sideColor.translucent();
  }
}",0.9821693907875184
78436,"/** 
 * @param ipr
 * @throws RenderingException
 */
public final void draw(IPrimitiveRenderer ipr) throws ChartException {
  if (!lia.isSetVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",ResourceBundle.getBundle(Messages.ENGINE,iRender.getRunTimeContext().getLocale()));
  }
  if (!bFillArea && !lia.isVisible()) {
    return;
  }
  if (!((LineSeries)iRender.getSeries()).isConnectMissingValue()) {
    for (int i=0; i < loPoints.length; i++) {
      if (Double.isNaN(loPoints[i].getX()) || Double.isNaN(loPoints[i].getY())) {
        continue;
      }
      ArrayList al=new ArrayList();
      while ((i < loPoints.length) && !(Double.isNaN(loPoints[i].getX()) || Double.isNaN(loPoints[i].getY()))) {
        al.add(loPoints[i]);
        i+=1;
      }
      i-=1;
      if (loPoints instanceof Location3D[]) {
        tempPoints=(Location3D[])al.toArray(new Location3D[0]);
      }
 else {
        tempPoints=(Location[])al.toArray(new Location[0]);
      }
      faX=LocationImpl.getXArray(tempPoints);
      faY=LocationImpl.getYArray(tempPoints);
      if (bRendering3D) {
        faZ=Location3DImpl.getZArray((Location3D[])tempPoints);
      }
 else {
        faZ=null;
      }
      iNumberOfPoints=faX.length;
      if (iNumberOfPoints < 1) {
        return;
      }
 else       if (iNumberOfPoints == 1) {
        double iSize=(double)lia.getThickness();
        if (bRendering3D) {
          Line3DRenderEvent lre3dValue=(Line3DRenderEvent)((EventObjectCache)ipr).getEventObject(oSource,Line3DRenderEvent.class);
          Location3D[] loa3dValue=new Location3D[2];
          loa3dValue[0]=Location3DImpl.create(faX[0],faY[0],faZ[0]);
          loa3dValue[1]=Location3DImpl.create(faX[0],faY[0],faZ[0] - dTapeWidth);
          lre3dValue.setStart3D(loa3dValue[0]);
          lre3dValue.setEnd3D(loa3dValue[1]);
          lre3dValue.setLineAttributes(lia);
          dc.addLine(lre3dValue);
        }
 else {
          final OvalRenderEvent ore=(OvalRenderEvent)((EventObjectCache)ipr).getEventObject(oSource,OvalRenderEvent.class);
          ore.setBounds(BoundsImpl.create(faX[0] - iSize,faY[0] - iSize,2 * iSize,2 * iSize));
          ore.setOutline(lia);
          ipr.drawOval(ore);
        }
      }
 else {
        spX=new Spline(faX);
        spY=new Spline(faY);
        fa=new double[iNumberOfPoints];
        for (int j=0; j < iNumberOfPoints; j++) {
          fa[j]=j;
        }
        renderCurve(ipr,0,0);
      }
    }
  }
 else {
    tempPoints=filterNull(loPoints);
    faX=LocationImpl.getXArray(tempPoints);
    faY=LocationImpl.getYArray(tempPoints);
    if (bRendering3D) {
      faZ=Location3DImpl.getZArray((Location3D[])tempPoints);
    }
 else {
      faZ=null;
    }
    iNumberOfPoints=faX.length;
    if (iNumberOfPoints <= 1) {
      return;
    }
    spX=new Spline(faX);
    spY=new Spline(faY);
    fa=new double[iNumberOfPoints];
    for (int i=0; i < iNumberOfPoints; i++) {
      fa[i]=i;
    }
    renderCurve(ipr,0,0);
  }
}","/** 
 * @param ipr
 * @throws RenderingException
 */
public final void draw(IPrimitiveRenderer ipr) throws ChartException {
  if (!lia.isSetVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",ResourceBundle.getBundle(Messages.ENGINE,iRender.getRunTimeContext().getLocale()));
  }
  if (!bFillArea && !lia.isVisible()) {
    return;
  }
  if (!bConnectMissingValue) {
    for (int i=0; i < loPoints.length; i++) {
      if (Double.isNaN(loPoints[i].getX()) || Double.isNaN(loPoints[i].getY())) {
        continue;
      }
      ArrayList al=new ArrayList();
      while ((i < loPoints.length) && !(Double.isNaN(loPoints[i].getX()) || Double.isNaN(loPoints[i].getY()))) {
        al.add(loPoints[i]);
        i+=1;
      }
      i-=1;
      if (loPoints instanceof Location3D[]) {
        tempPoints=(Location3D[])al.toArray(new Location3D[0]);
      }
 else {
        tempPoints=(Location[])al.toArray(new Location[0]);
      }
      faX=LocationImpl.getXArray(tempPoints);
      faY=LocationImpl.getYArray(tempPoints);
      if (bRendering3D) {
        faZ=Location3DImpl.getZArray((Location3D[])tempPoints);
      }
 else {
        faZ=null;
      }
      iNumberOfPoints=faX.length;
      if (iNumberOfPoints < 1) {
        return;
      }
 else       if (iNumberOfPoints == 1) {
        double iSize=(double)lia.getThickness();
        if (bRendering3D) {
          Line3DRenderEvent lre3dValue=(Line3DRenderEvent)((EventObjectCache)ipr).getEventObject(oSource,Line3DRenderEvent.class);
          Location3D[] loa3dValue=new Location3D[2];
          loa3dValue[0]=Location3DImpl.create(faX[0],faY[0],faZ[0]);
          loa3dValue[1]=Location3DImpl.create(faX[0],faY[0],faZ[0] - dTapeWidth);
          lre3dValue.setStart3D(loa3dValue[0]);
          lre3dValue.setEnd3D(loa3dValue[1]);
          lre3dValue.setLineAttributes(lia);
          dc.addLine(lre3dValue);
        }
 else {
          final OvalRenderEvent ore=(OvalRenderEvent)((EventObjectCache)ipr).getEventObject(oSource,OvalRenderEvent.class);
          ore.setBounds(BoundsImpl.create(faX[0] - iSize,faY[0] - iSize,2 * iSize,2 * iSize));
          ore.setOutline(lia);
          ipr.drawOval(ore);
        }
      }
 else {
        spX=new Spline(faX);
        spY=new Spline(faY);
        fa=new double[iNumberOfPoints];
        for (int j=0; j < iNumberOfPoints; j++) {
          fa[j]=j;
        }
        renderCurve(ipr,0,0);
      }
    }
  }
 else {
    tempPoints=filterNull(loPoints);
    faX=LocationImpl.getXArray(tempPoints);
    faY=LocationImpl.getYArray(tempPoints);
    if (bRendering3D) {
      faZ=Location3DImpl.getZArray((Location3D[])tempPoints);
    }
 else {
      faZ=null;
    }
    iNumberOfPoints=faX.length;
    if (iNumberOfPoints <= 1) {
      return;
    }
    spX=new Spline(faX);
    spY=new Spline(faY);
    fa=new double[iNumberOfPoints];
    for (int i=0; i < iNumberOfPoints; i++) {
      fa[i]=i;
    }
    renderCurve(ipr,0,0);
  }
}",0.9935226706527156
78437,"private void placeComponents(){
  GridLayout glContent=new GridLayout(4,false);
  glContent.marginHeight=2;
  glContent.marginWidth=2;
  this.setLayout(glContent);
  if (isShadowNeeded()) {
    Label lblShadow=new Label(this,SWT.NONE);
    GridData gdLBLShadow=new GridData();
    lblShadow.setLayoutData(gdLBLShadow);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    fccShadow=new FillChooserComposite(this,SWT.NONE,series.eAdapters(),((LineSeries)series).getShadowColor(),false,false);
    GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
    gdFCCShadow.widthHint=180;
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
  }
  btnPalette=new Button(this,SWT.CHECK);
{
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(((LineSeries)series).isPaletteLineColor());
    btnPalette.addSelectionListener(this);
  }
  btnCurve=new Button(this,SWT.CHECK);
{
    btnCurve.setText(Messages.getString(""String_Node_Str""));
    btnCurve.setSelection(((LineSeries)series).isCurve());
    btnCurve.addSelectionListener(this);
  }
  if (!(series instanceof AreaSeries)) {
    btnMissingValue=new Button(this,SWT.CHECK);
{
      btnMissingValue.setText(Messages.getString(""String_Node_Str""));
      GridData gdBTNMissingValue=new GridData();
      gdBTNMissingValue.horizontalSpan=4;
      btnMissingValue.setLayoutData(gdBTNMissingValue);
      btnMissingValue.setSelection(((LineSeries)series).isConnectMissingValue());
      btnMissingValue.addSelectionListener(this);
    }
  }
  if (!isShadowNeeded()) {
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    gd.horizontalIndent=5;
    btnPalette.setLayoutData(gd);
    gd=new GridData();
    gd.horizontalSpan=2;
    gd.horizontalIndent=5;
    btnCurve.setLayoutData(gd);
  }
  GridLayout glMarker=new GridLayout();
  glMarker.numColumns=2;
  glMarker.marginHeight=4;
  glMarker.marginWidth=4;
  glMarker.verticalSpacing=4;
  glMarker.horizontalSpacing=4;
  grpMarker=new Group(this,SWT.NONE);
  GridData gdGRPMarker=new GridData(GridData.FILL_BOTH);
  gdGRPMarker.horizontalSpan=2;
  grpMarker.setLayoutData(gdGRPMarker);
  grpMarker.setLayout(glMarker);
  grpMarker.setText(Messages.getString(""String_Node_Str""));
  btnMarkerVisible=new Button(grpMarker,SWT.CHECK);
  GridData gdBTNVisible=new GridData();
  gdBTNVisible.horizontalSpan=2;
  btnMarkerVisible.setLayoutData(gdBTNVisible);
  btnMarkerVisible.setText(Messages.getString(""String_Node_Str""));
  btnMarkerVisible.addSelectionListener(this);
  btnMarkerVisible.setSelection(((LineSeries)series).getMarker().isVisible());
  Label lblType=new Label(grpMarker,SWT.NONE);
  GridData gdLBLType=new GridData();
  lblType.setLayoutData(gdLBLType);
  lblType.setText(Messages.getString(""String_Node_Str""));
  cmbMarkerTypes=new Combo(grpMarker,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBMarkerTypes=new GridData(GridData.FILL_HORIZONTAL);
  cmbMarkerTypes.setLayoutData(gdCMBMarkerTypes);
  cmbMarkerTypes.addSelectionListener(this);
  cmbMarkerTypes.setEnabled(btnMarkerVisible.getSelection());
  Label lblSize=new Label(grpMarker,SWT.NONE);
  GridData gdLBLSize=new GridData();
  lblSize.setLayoutData(gdLBLSize);
  lblSize.setText(Messages.getString(""String_Node_Str""));
  iscMarkerSize=new IntegerSpinControl(grpMarker,SWT.NONE,((LineSeries)series).getMarker().getSize());
  GridData gdISCMarkerSize=new GridData(GridData.FILL_HORIZONTAL);
  iscMarkerSize.setLayoutData(gdISCMarkerSize);
  iscMarkerSize.setMinimum(0);
  iscMarkerSize.setMaximum(100);
  iscMarkerSize.addListener(this);
  iscMarkerSize.setEnabled(btnMarkerVisible.getSelection());
  grpLine=new Group(this,SWT.NONE);
  GridData gdGRPLine=new GridData(GridData.FILL_BOTH);
  gdGRPLine.horizontalSpan=2;
  grpLine.setLayout(new FillLayout());
  grpLine.setLayoutData(gdGRPLine);
  grpLine.setText(Messages.getString(""String_Node_Str""));
  liacLine=new LineAttributesComposite(grpLine,SWT.NONE,((LineSeries)series).getLineAttributes(),true,true,true);
  liacLine.addListener(this);
  enableLineSettings(((LineSeries)series).getLineAttributes().isVisible());
  populateLists();
}","private void placeComponents(){
  GridLayout glContent=new GridLayout(4,false);
  glContent.marginHeight=2;
  glContent.marginWidth=2;
  this.setLayout(glContent);
  if (isShadowNeeded()) {
    Label lblShadow=new Label(this,SWT.NONE);
    GridData gdLBLShadow=new GridData();
    lblShadow.setLayoutData(gdLBLShadow);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    fccShadow=new FillChooserComposite(this,SWT.NONE,series.eAdapters(),((LineSeries)series).getShadowColor(),false,false);
    GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
    gdFCCShadow.widthHint=180;
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
  }
  btnPalette=new Button(this,SWT.CHECK);
{
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(((LineSeries)series).isPaletteLineColor());
    btnPalette.addSelectionListener(this);
  }
  btnCurve=new Button(this,SWT.CHECK);
{
    btnCurve.setText(Messages.getString(""String_Node_Str""));
    btnCurve.setSelection(((LineSeries)series).isCurve());
    btnCurve.addSelectionListener(this);
  }
  if (!(series instanceof AreaSeries || series instanceof ScatterSeries)) {
    btnMissingValue=new Button(this,SWT.CHECK);
{
      btnMissingValue.setText(Messages.getString(""String_Node_Str""));
      GridData gdBTNMissingValue=new GridData();
      gdBTNMissingValue.horizontalSpan=4;
      btnMissingValue.setLayoutData(gdBTNMissingValue);
      btnMissingValue.setSelection(((LineSeries)series).isConnectMissingValue());
      btnMissingValue.addSelectionListener(this);
    }
  }
  if (!isShadowNeeded()) {
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    gd.horizontalIndent=5;
    btnPalette.setLayoutData(gd);
    gd=new GridData();
    gd.horizontalSpan=2;
    gd.horizontalIndent=5;
    btnCurve.setLayoutData(gd);
  }
  GridLayout glMarker=new GridLayout();
  glMarker.numColumns=2;
  glMarker.marginHeight=4;
  glMarker.marginWidth=4;
  glMarker.verticalSpacing=4;
  glMarker.horizontalSpacing=4;
  grpMarker=new Group(this,SWT.NONE);
  GridData gdGRPMarker=new GridData(GridData.FILL_BOTH);
  gdGRPMarker.horizontalSpan=2;
  grpMarker.setLayoutData(gdGRPMarker);
  grpMarker.setLayout(glMarker);
  grpMarker.setText(Messages.getString(""String_Node_Str""));
  btnMarkerVisible=new Button(grpMarker,SWT.CHECK);
  GridData gdBTNVisible=new GridData();
  gdBTNVisible.horizontalSpan=2;
  btnMarkerVisible.setLayoutData(gdBTNVisible);
  btnMarkerVisible.setText(Messages.getString(""String_Node_Str""));
  btnMarkerVisible.addSelectionListener(this);
  btnMarkerVisible.setSelection(((LineSeries)series).getMarker().isVisible());
  Label lblType=new Label(grpMarker,SWT.NONE);
  GridData gdLBLType=new GridData();
  lblType.setLayoutData(gdLBLType);
  lblType.setText(Messages.getString(""String_Node_Str""));
  cmbMarkerTypes=new Combo(grpMarker,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBMarkerTypes=new GridData(GridData.FILL_HORIZONTAL);
  cmbMarkerTypes.setLayoutData(gdCMBMarkerTypes);
  cmbMarkerTypes.addSelectionListener(this);
  cmbMarkerTypes.setEnabled(btnMarkerVisible.getSelection());
  Label lblSize=new Label(grpMarker,SWT.NONE);
  GridData gdLBLSize=new GridData();
  lblSize.setLayoutData(gdLBLSize);
  lblSize.setText(Messages.getString(""String_Node_Str""));
  iscMarkerSize=new IntegerSpinControl(grpMarker,SWT.NONE,((LineSeries)series).getMarker().getSize());
  GridData gdISCMarkerSize=new GridData(GridData.FILL_HORIZONTAL);
  iscMarkerSize.setLayoutData(gdISCMarkerSize);
  iscMarkerSize.setMinimum(0);
  iscMarkerSize.setMaximum(100);
  iscMarkerSize.addListener(this);
  iscMarkerSize.setEnabled(btnMarkerVisible.getSelection());
  grpLine=new Group(this,SWT.NONE);
  GridData gdGRPLine=new GridData(GridData.FILL_BOTH);
  gdGRPLine.horizontalSpan=2;
  grpLine.setLayout(new FillLayout());
  grpLine.setLayoutData(gdGRPLine);
  grpLine.setText(Messages.getString(""String_Node_Str""));
  liacLine=new LineAttributesComposite(grpLine,SWT.NONE,((LineSeries)series).getLineAttributes(),true,true,true);
  liacLine.addListener(this);
  enableLineSettings(((LineSeries)series).getLineAttributes().isVisible());
  populateLists();
}",0.9957957957957958
78438,"public void clear(){
  mediatorMap.remove(getInstance().getReportDesignHandle());
  setReportDesignHandle(null);
  designHandleAdapter=null;
}","public void clear(ModuleHandle handle){
  mediatorMap.remove(handle);
  if (handle == getReportDesignHandle()) {
    setReportDesignHandle(null);
    designHandleAdapter=null;
  }
}",0.8111455108359134
78439,"/** 
 * Sets report design.
 * @param handle the model
 */
public void setReportDesignHandle(ModuleHandle handle){
  if (designHandleAdapter != null) {
    designHandleAdapter.setReportDesignHandle(handle);
  }
}","/** 
 * Sets report design.
 * @param handle the model
 */
public void setReportDesignHandle(ModuleHandle handle){
  if (designHandleAdapter != null) {
    designHandleAdapter.setReportDesignHandle(handle);
  }
 else   if (handle != null) {
    designHandleAdapter=new ReportDesignHandleAdapter(handle);
  }
}",0.8138195777351248
78440,"public void partClosed(IWorkbenchPart part){
  SessionHandleAdapter.getInstance().clear();
}","public void partClosed(IWorkbenchPart part){
  if (part == this) {
    SessionHandleAdapter.getInstance().clear(getModel());
  }
}",0.8288288288288288
78441,"/** 
 * Test openEditor method invoke openEditor then check the active editor's ID and title to test if it works correctly
 */
public void testOpenEditor() throws Exception {
  if (PlatformUtil.isWindows()) {
    IEditorPart tPart=openEditor();
    assertTrue(tPart instanceof ReportEditor);
    assertEquals(tPart,tPage.getActiveEditor());
    assertEquals(EDITOR_ID,tPart.getSite().getId());
    assertEquals(EDITOR_NAME,tPart.getSite().getRegisteredName());
    assertEquals(TEST_DESIGN_FILE,tPart.getTitle());
    closeEditor();
  }
}","/** 
 * Test openEditor method invoke openEditor then check the active editor's ID and title to test if it works correctly
 */
public void testOpenEditor() throws Exception {
  if (PlatformUtil.isWindows()) {
    IEditorPart tPart=openEditor();
    assertTrue(tPart instanceof AbstractMultiPageEditor);
    assertEquals(tPart,tPage.getActiveEditor());
    assertEquals(EDITOR_ID,tPart.getSite().getId());
    assertEquals(EDITOR_NAME,tPart.getSite().getRegisteredName());
    assertEquals(TEST_DESIGN_FILE,tPart.getTitle());
    closeEditor();
  }
}",0.9788408463661452
78442,"protected void processDataPointHotspot(){
  Iterator iter=cacheSeriesHotspots.keySet().iterator();
  Iterator valIter=cacheSeriesHotspots.values().iterator();
  while (iter.hasNext()) {
    Element elm=(Element)iter.next();
    Series seDT=(Series)valIter.next();
    List components=(List)componentPrimitives.get(seDT);
    if (components != null) {
      Iterator iterComp=components.iterator();
      StringBuffer sb=new StringBuffer();
      StringBuffer labelSB=new StringBuffer();
      sb.append(seDT.hashCode());
      if (iterComp.hasNext())       sb.append(""String_Node_Str"");
      while (iterComp.hasNext()) {
        sb.append(""String_Node_Str"").append(iterComp.next()).append(""String_Node_Str"");
        if (iterComp.hasNext())         sb.append(""String_Node_Str"");
      }
      if (components.size() > 0)       sb.append(""String_Node_Str"");
      List labelComp=(List)labelPrimitives.get(seDT);
      if (labelComp != null) {
        Iterator iterLabel=labelComp.iterator();
        if (iterLabel.hasNext())         labelSB.append(""String_Node_Str"");
        while (iterLabel.hasNext()) {
          labelSB.append(""String_Node_Str"").append(iterLabel.next()).append(""String_Node_Str"");
          if (iterLabel.hasNext())           labelSB.append(""String_Node_Str"");
        }
        if (labelComp.size() > 0)         labelSB.append(""String_Node_Str"");
      }
      elm.setAttribute(""String_Node_Str"",""String_Node_Str"" + sb.toString() + ""String_Node_Str""+ labelSB.toString()+ ""String_Node_Str"");
      setCursor(elm);
      ((SVGGraphics2D)_g2d).addCSSStyle(""String_Node_Str"" + seDT.hashCode(),""String_Node_Str"",""String_Node_Str"");
    }
  }
  iter=cacheHotspots.keySet().iterator();
  valIter=cacheHotspots.values().iterator();
  while (iter.hasNext()) {
    Element elm=(Element)iter.next();
    Series seDT=(Series)valIter.next();
    List components=(List)labelPrimitives.get(seDT);
    if (components != null) {
      Iterator compIter=components.iterator();
      StringBuffer sb=new StringBuffer();
      sb.append(seDT.hashCode());
      if (compIter.hasNext())       sb.append(""String_Node_Str"");
      while (compIter.hasNext()) {
        sb.append(""String_Node_Str"").append(compIter.next()).append(""String_Node_Str"");
        if (compIter.hasNext())         sb.append(""String_Node_Str"");
      }
      if (components.size() > 0)       sb.append(""String_Node_Str"");
      elm.setAttribute(""String_Node_Str"",""String_Node_Str"" + sb.toString() + ""String_Node_Str"");
      setCursor(elm);
    }
  }
}","protected void processDataPointHotspot(){
  Iterator iter=cacheSeriesHotspots.keySet().iterator();
  Iterator valIter=cacheSeriesHotspots.values().iterator();
  while (iter.hasNext()) {
    Element elm=(Element)iter.next();
    Series seDT=(Series)valIter.next();
    List components=(List)componentPrimitives.get(seDT);
    if (components != null) {
      Iterator iterComp=components.iterator();
      StringBuffer sb=new StringBuffer();
      StringBuffer labelSB=new StringBuffer();
      sb.append(seDT.hashCode());
      if (iterComp.hasNext())       sb.append(""String_Node_Str"");
      while (iterComp.hasNext()) {
        sb.append(""String_Node_Str"").append(iterComp.next()).append(""String_Node_Str"");
        if (iterComp.hasNext())         sb.append(""String_Node_Str"");
      }
      if (components.size() > 0)       sb.append(""String_Node_Str"");
      List labelComp=(List)labelPrimitives.get(seDT);
      if (labelComp != null) {
        Iterator iterLabel=labelComp.iterator();
        if (iterLabel.hasNext())         labelSB.append(""String_Node_Str"");
        while (iterLabel.hasNext()) {
          labelSB.append(""String_Node_Str"").append(iterLabel.next()).append(""String_Node_Str"");
          if (iterLabel.hasNext())           labelSB.append(""String_Node_Str"");
        }
        if (labelComp.size() > 0)         labelSB.append(""String_Node_Str"");
        sb.append(""String_Node_Str"").append(labelSB);
      }
      elm.setAttribute(""String_Node_Str"",""String_Node_Str"" + sb.toString() + ""String_Node_Str"");
      setCursor(elm);
      ((SVGGraphics2D)_g2d).addCSSStyle(""String_Node_Str"" + seDT.hashCode(),""String_Node_Str"",""String_Node_Str"");
    }
  }
  iter=cacheHotspots.keySet().iterator();
  valIter=cacheHotspots.values().iterator();
  while (iter.hasNext()) {
    Element elm=(Element)iter.next();
    Series seDT=(Series)valIter.next();
    List components=(List)labelPrimitives.get(seDT);
    if (components != null) {
      Iterator compIter=components.iterator();
      StringBuffer sb=new StringBuffer();
      sb.append(seDT.hashCode());
      if (compIter.hasNext())       sb.append(""String_Node_Str"");
      while (compIter.hasNext()) {
        sb.append(""String_Node_Str"").append(compIter.next()).append(""String_Node_Str"");
        if (compIter.hasNext())         sb.append(""String_Node_Str"");
      }
      if (components.size() > 0)       sb.append(""String_Node_Str"");
      elm.setAttribute(""String_Node_Str"",""String_Node_Str"" + sb.toString() + ""String_Node_Str"");
      setCursor(elm);
    }
  }
}",0.9816169203399882
78443,"public void earlyStartup(){
  WorkspaceClassPathFinder finder=new WorkspaceClassPathFinder();
  WorkspaceClasspathManager.registerClassPathFinder(finder);
  String projectClassPaths=finder.getClassPath();
  if (projectClassPaths == null) {
    projectClassPaths=""String_Node_Str"";
  }
  System.setProperty(WORKSPACE_CLASSPATH_KEY,projectClassPaths);
  String value=System.getProperty(""String_Node_Str"");
  if (value == null || value.length() == 0) {
    return;
  }
  StringTokenizer token=new StringTokenizer(value,""String_Node_Str"");
  while (token.hasMoreTokens()) {
    String str=token.nextToken();
    try {
      DebugUtil.importProject(str);
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
  }
}","public void earlyStartup(){
  WorkspaceClassPathFinder finder=new WorkspaceClassPathFinder();
  WorkspaceClasspathManager.registerClassPathFinder(finder);
  String projectClassPaths=finder.getClassPath();
  if (projectClassPaths == null) {
    projectClassPaths=""String_Node_Str"";
  }
  System.setProperty(WORKSPACE_CLASSPATH_KEY,projectClassPaths);
  String value=System.getProperty(""String_Node_Str"");
  if (value == null || value.length() == 0) {
    return;
  }
  StringTokenizer token=new StringTokenizer(value,""String_Node_Str"");
  while (token.hasMoreTokens()) {
    String str=token.nextToken();
    try {
      DebugUtil.importProject(str);
    }
 catch (    Exception e1) {
    }
  }
}",0.9802538787023978
78444,"/** 
 * Gets the display name of the node
 * @param model the model of the node 
 * @return Returns the display name for the node
 */
public String getNodeDisplayName(Object model);","/** 
 * Gets the display name of the node
 * @param model the model of the node
 * @return Returns the display name for the node
 */
public String getNodeDisplayName(Object model);",0.997229916897507
78445,"/** 
 * handle the hyperlink, bookmark and drillthrough
 * @param area			the area which may need to handle the hyperlink action
 */
private void handleHyperlinkAction(IArea area){
  IContent content=area.getContent();
  if (null != content) {
    IHyperlinkAction hlAction=content.getHyperlinkAction();
    if (null != hlAction)     try {
switch (hlAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
        writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(area.getAbsoluteX()),layoutPointY2PDF(area.getAbsoluteY() + area.getHeight()),layoutPointX2PDF(area.getAbsoluteX() + area.getWidth()),layoutPointY2PDF(area.getAbsoluteY()),createPdfAction(hlAction.getHyperlink(),hlAction.getBookmark(),hlAction.getTargetWindow(),IHyperlinkAction.ACTION_BOOKMARK)));
      break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
    String baseURL=null;
  if (context != null) {
    baseURL=context.getBaseURL();
  }
StringBuffer link=new StringBuffer();
String reportName=hlAction.getReportName();
if (reportName != null && !reportName.equals(""String_Node_Str"")) {
String format=hlAction.getFormat();
if (""String_Node_Str"".equalsIgnoreCase(format)) {
link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
}
 else if (""String_Node_Str"".equalsIgnoreCase(format)) {
link.append(baseURL);
}
link.append(""String_Node_Str"");
try {
link.append(URLEncoder.encode(reportName,""String_Node_Str""));
}
 catch (UnsupportedEncodingException e1) {
}
if (format != null && format.length() > 0) {
link.append(""String_Node_Str"" + format);
}
if (hlAction.getParameterBindings() != null) {
Iterator paramsIte=hlAction.getParameterBindings().entrySet().iterator();
while (paramsIte.hasNext()) {
  Map.Entry entry=(Map.Entry)paramsIte.next();
  try {
    link.append(""String_Node_Str"" + URLEncoder.encode((String)entry.getKey(),""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode((String)entry.getValue(),""String_Node_Str""));
  }
 catch (  UnsupportedEncodingException e) {
  }
}
}
}
if (hlAction.getBookmark() != null) {
link.append(""String_Node_Str"");
link.append(hlAction.getBookmark());
}
writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(area.getAbsoluteX()),layoutPointY2PDF(area.getAbsoluteY() + area.getHeight()),layoutPointX2PDF(area.getAbsoluteX() + area.getWidth()),layoutPointY2PDF(area.getAbsoluteY()),createPdfAction(link.toString(),null,hlAction.getTargetWindow(),IHyperlinkAction.ACTION_DRILLTHROUGH)));
break;
case IHyperlinkAction.ACTION_HYPERLINK:
writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(area.getAbsoluteX()),layoutPointY2PDF(area.getAbsoluteY() + area.getHeight()),layoutPointX2PDF(area.getAbsoluteX() + area.getWidth()),layoutPointY2PDF(area.getAbsoluteY()),createPdfAction(hlAction.getHyperlink(),null,hlAction.getTargetWindow(),IHyperlinkAction.ACTION_HYPERLINK)));
break;
}
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getMessage(),e);
}
}
}","/** 
 * handle the hyperlink, bookmark and drillthrough
 * @param area			the area which may need to handle the hyperlink action
 */
private void handleHyperlinkAction(IArea area){
  IContent content=area.getContent();
  if (null != content) {
    IHyperlinkAction hlAction=content.getHyperlinkAction();
    if (null != hlAction)     try {
switch (hlAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
        writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(area.getAbsoluteX()),layoutPointY2PDF(area.getAbsoluteY() + area.getHeight()),layoutPointX2PDF(area.getAbsoluteX() + area.getWidth()),layoutPointY2PDF(area.getAbsoluteY()),createPdfAction(hlAction.getHyperlink(),hlAction.getBookmark(),hlAction.getTargetWindow(),IHyperlinkAction.ACTION_BOOKMARK)));
      break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
    String baseURL=null;
  if (context != null) {
    baseURL=context.getBaseURL();
  }
StringBuffer link=new StringBuffer();
String reportName=hlAction.getReportName();
if (reportName != null && !reportName.equals(""String_Node_Str"")) {
String format=hlAction.getFormat();
if (""String_Node_Str"".equalsIgnoreCase(format)) {
link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
}
 else if (""String_Node_Str"".equalsIgnoreCase(format)) {
link.append(baseURL);
}
link.append(""String_Node_Str"");
try {
link.append(URLEncoder.encode(reportName,""String_Node_Str""));
}
 catch (UnsupportedEncodingException e1) {
}
if (format != null && format.length() > 0) {
link.append(""String_Node_Str"" + format);
}
if (hlAction.getParameterBindings() != null) {
Iterator paramsIte=hlAction.getParameterBindings().entrySet().iterator();
while (paramsIte.hasNext()) {
  Map.Entry entry=(Map.Entry)paramsIte.next();
  try {
    String key=(String)entry.getKey();
    Object valueObj=entry.getValue();
    if (valueObj != null) {
      String value=valueObj.toString();
      link.append(""String_Node_Str"" + URLEncoder.encode(key,""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(value,""String_Node_Str""));
    }
  }
 catch (  UnsupportedEncodingException e) {
  }
}
}
}
link.append(""String_Node_Str"");
if (hlAction.getBookmark() != null) {
link.append(""String_Node_Str"");
link.append(hlAction.getBookmark());
}
writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(area.getAbsoluteX()),layoutPointY2PDF(area.getAbsoluteY() + area.getHeight()),layoutPointX2PDF(area.getAbsoluteX() + area.getWidth()),layoutPointY2PDF(area.getAbsoluteY()),createPdfAction(link.toString(),null,hlAction.getTargetWindow(),IHyperlinkAction.ACTION_DRILLTHROUGH)));
break;
case IHyperlinkAction.ACTION_HYPERLINK:
writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(area.getAbsoluteX()),layoutPointY2PDF(area.getAbsoluteY() + area.getHeight()),layoutPointX2PDF(area.getAbsoluteX() + area.getWidth()),layoutPointY2PDF(area.getAbsoluteY()),createPdfAction(hlAction.getHyperlink(),null,hlAction.getTargetWindow(),IHyperlinkAction.ACTION_HYPERLINK)));
break;
}
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getMessage(),e);
}
}
}",0.9600133846411244
78446,"public void layout(IFigure parent){
  Rectangle parentBounds=getInitSize();
  Result result=getReportBounds(parentBounds);
  parentBounds=result.reportSize;
  parent.setBounds(parentBounds);
  List children=parent.getChildren();
  Rectangle clientArea=parent.getClientArea();
  int y=clientArea.y;
  int height=clientArea.height;
  IFigure figure;
  for (int i=0; i < children.size(); i++) {
    figure=(IFigure)children.get(i);
    Rectangle bounds=(Rectangle)getConstraint(figure);
    if (bounds == null) {
      continue;
    }
    bounds=convertRectangle(bounds,clientArea);
    figure.getBounds().width=bounds.width;
    Dimension preferredSize=figure.getPreferredSize();
    bounds=bounds.getCopy();
    if (bounds.height <= 0) {
      bounds.height=Math.max(preferredSize.height,MINIMUM_HEIGHT);
    }
 else     if (bounds.height < MINIMUM_HEIGHT) {
      bounds.height=MINIMUM_HEIGHT;
    }
    if (bounds.height > height) {
      bounds.height=height;
    }
    if (bounds.y + bounds.height > height + y || bounds.y < y) {
      bounds.y=height + y - bounds.height;
    }
    figure.setBounds(bounds);
  }
  Rectangle rect=new Rectangle(0,0,parentBounds.x + parentBounds.width + result.rightSpace,parentBounds.y + parentBounds.height + result.bottomSpace);
  setViewProperty(rect,parentBounds);
}","public void layout(IFigure parent){
  Rectangle parentBounds=getInitSize();
  Result result=getReportBounds(parentBounds);
  parentBounds=result.reportSize;
  parent.setBounds(parentBounds);
  List children=parent.getChildren();
  Rectangle clientArea=parent.getClientArea();
  int y=clientArea.y;
  int height=clientArea.height;
  IFigure figure;
  for (int i=0; i < children.size(); i++) {
    figure=(IFigure)children.get(i);
    Rectangle bounds=(Rectangle)getConstraint(figure);
    if (bounds == null) {
      continue;
    }
    bounds=convertRectangle(bounds,clientArea);
    figure.getBounds().width=bounds.width;
    Dimension preferredSize=figure.getPreferredSize();
    bounds=bounds.getCopy();
    if (bounds.height < 0) {
      bounds.height=Math.max(preferredSize.height,MINIMUM_HEIGHT);
    }
    if (bounds.height > height) {
      bounds.height=height;
    }
    if (bounds.y + bounds.height > height + y || bounds.y < y) {
      bounds.y=height + y - bounds.height;
    }
    figure.setBounds(bounds);
  }
  Rectangle rect=new Rectangle(0,0,parentBounds.x + parentBounds.width + result.rightSpace,parentBounds.y + parentBounds.height + result.bottomSpace);
  setViewProperty(rect,parentBounds);
}",0.96390321301071
78447,"/** 
 * @return The constraint
 */
protected Object getConstraint(){
  ReportItemHandle handle=(ReportItemHandle)getModel();
  ReportItemConstraint constraint=new ReportItemConstraint();
  constraint.setDisplay(handle.getPrivateStyle().getDisplay());
  return constraint;
}","/** 
 * @return The constraint
 */
protected Object getConstraint(){
  ReportItemHandle handle=(ReportItemHandle)getModel();
  ReportItemConstraint constraint=new ReportItemConstraint();
  constraint.setDisplay(handle.getPrivateStyle().getDisplay());
  DimensionHandle value=handle.getWidth();
  constraint.setMeasure(value.getMeasure());
  constraint.setUnits(value.getUnits());
  return constraint;
}",0.8088888888888889
78448,"protected Dimension getChildSize(IFigure child,int wHint,int hHint){
  ReportItemConstraint constraint=(ReportItemConstraint)getConstraint(child);
  Dimension preferredDimension=child.getPreferredSize(wHint,hHint);
  if (constraint != null) {
    if (constraint.isNone()) {
      return new Dimension(0,0);
    }
    Dimension dimension=constraint.getSize();
    if (dimension.height <= 0)     dimension.height=preferredDimension.height;
    if (dimension.width <= 0)     dimension.width=preferredDimension.width;
    return dimension;
  }
 else {
    return preferredDimension;
  }
}","protected Dimension getChildSize(IFigure child,int wHint,int hHint){
  ReportItemConstraint constraint=(ReportItemConstraint)getConstraint(child);
  Dimension preferredDimension=child.getPreferredSize(wHint,hHint);
  if (constraint != null) {
    if (constraint.isNone()) {
      return new Dimension(0,0);
    }
    Dimension dimension=constraint.getSize();
    if (dimension.height <= 0) {
      dimension.height=preferredDimension.height;
    }
    if (dimension.width <= 0) {
      if (constraint.getMeasure() != 0 && DesignChoiceConstants.UNITS_PERCENTAGE.equals(constraint.getUnits())) {
        dimension.width=(int)constraint.getMeasure() * wHint / 100;
      }
 else {
        dimension.width=preferredDimension.width;
      }
    }
    return dimension;
  }
 else {
    return preferredDimension;
  }
}",0.836676217765043
78449,"/** 
 * @see org.eclipse.draw2d.LayoutManager#layout(IFigure)
 */
public void layout(IFigure parent){
  data=new WorkingData();
  Rectangle relativeArea=parent.getClientArea();
  data.area=relativeArea;
  Iterator iterator=parent.getChildren().iterator();
  int dx;
  int wHint=parent.getClientArea().width;
  int hHint=-1;
  initVariables(parent);
  initRow();
  int i=0;
  int display=ReportItemConstraint.NONE;
  int lastDisplay=ReportItemConstraint.NONE;
  while (iterator.hasNext()) {
    IFigure f=(IFigure)iterator.next();
    Insets fmargin=getFigureMargin(f);
    if (getDisplay(f) == ReportItemConstraint.BLOCK) {
      wHint=parent.getClientArea().width;
    }
 else {
      wHint=-1;
    }
    if (wHint != -1) {
      wHint=Math.max(0,wHint - fmargin.getWidth());
    }
    Dimension pref=getChildSize(f,wHint,hHint);
    if (f instanceof LabelFigure && (pref.width + fmargin.getWidth()) > parent.getClientArea().width) {
      pref=getChildSize(f,Math.max(0,parent.getClientArea().width - fmargin.getWidth()),hHint);
    }
    Rectangle r=new Rectangle(0,0,pref.width + fmargin.getWidth(),pref.height + fmargin.getHeight());
    display=getDisplay(f);
    if (data.rowCount > data.rowPos) {
      if ((data.rowWidth + r.width > data.maxWidth) || display == ReportItemConstraint.BLOCK || lastDisplay == ReportItemConstraint.BLOCK)       layoutRow(parent);
    }
    lastDisplay=display;
    r.x=data.rowX;
    r.y=data.rowY;
    dx=r.width + getMinorSpacing();
    data.rowX+=dx;
    data.rowWidth+=dx;
    data.rowHeight=Math.max(data.rowHeight,r.height);
    data.row[data.rowCount]=f;
    data.margin[data.rowCount]=fmargin;
    data.bounds[data.rowCount]=r;
    data.rowCount++;
    i++;
  }
  if (data.rowCount > data.rowPos) {
    layoutRow(parent);
  }
  layoutVertical(parent);
  data=null;
}","/** 
 * @see org.eclipse.draw2d.LayoutManager#layout(IFigure)
 */
public void layout(IFigure parent){
  data=new WorkingData();
  Rectangle relativeArea=parent.getClientArea();
  data.area=relativeArea;
  Iterator iterator=parent.getChildren().iterator();
  int dx;
  int wHint=parent.getClientArea().width;
  int hHint=-1;
  initVariables(parent);
  initRow();
  int i=0;
  int display=ReportItemConstraint.NONE;
  int lastDisplay=ReportItemConstraint.NONE;
  while (iterator.hasNext()) {
    IFigure f=(IFigure)iterator.next();
    Insets fmargin=getFigureMargin(f);
    if (getDisplay(f) == ReportItemConstraint.BLOCK || f instanceof ImageFigure) {
      wHint=parent.getClientArea().width;
    }
 else {
      wHint=-1;
    }
    if (wHint != -1) {
      wHint=Math.max(0,wHint - fmargin.getWidth());
    }
    Dimension pref=getChildSize(f,wHint,hHint);
    if (f instanceof LabelFigure && (pref.width + fmargin.getWidth()) > parent.getClientArea().width) {
      pref=getChildSize(f,Math.max(0,parent.getClientArea().width - fmargin.getWidth()),hHint);
    }
    Rectangle r=new Rectangle(0,0,pref.width + fmargin.getWidth(),pref.height + fmargin.getHeight());
    display=getDisplay(f);
    if (data.rowCount > data.rowPos) {
      if ((data.rowWidth + r.width > data.maxWidth) || display == ReportItemConstraint.BLOCK || lastDisplay == ReportItemConstraint.BLOCK)       layoutRow(parent);
    }
    lastDisplay=display;
    r.x=data.rowX;
    r.y=data.rowY;
    dx=r.width + getMinorSpacing();
    data.rowX+=dx;
    data.rowWidth+=dx;
    data.rowHeight=Math.max(data.rowHeight,r.height);
    data.row[data.rowCount]=f;
    data.margin[data.rowCount]=fmargin;
    data.bounds[data.rowCount]=r;
    data.rowCount++;
    i++;
  }
  if (data.rowCount > data.rowPos) {
    layoutRow(parent);
  }
  layoutVertical(parent);
  data=null;
}",0.992337164750958
78450,"public void startLabel(ILabelContent label){
  startText(label);
}","public void startLabel(ILabelContent label){
  String bookmark=label.getBookmark();
  if (bookmark == null) {
    bookmark=generateUniqueID();
    label.setBookmark(bookmark);
  }
  startText(label);
}",0.4943820224719101
78451,"private Image getImage(){
  TableEditPart part=(TableEditPart)getOwner();
  String type=HandleAdapterFactory.getInstance().getRowHandleAdapter(part.getRow(getRowNumber())).getType();
  if (TableHandleAdapter.TABLE_HEADER.equals(type)) {
    type=IReportGraphicConstants.ICON_NODE_HEADER;
  }
 else   if (TableHandleAdapter.TABLE_DETAIL.equals(type)) {
    type=IReportGraphicConstants.ICON_NODE_DETAILS;
  }
 else   if (TableHandleAdapter.TABLE_FOOTER.equals(type)) {
    type=IReportGraphicConstants.ICON_NODE_FOOTER;
  }
 else   if (TableHandleAdapter.TABLE_GROUP_HEADER.equals(type)) {
    type=IReportGraphicConstants.ICON_NODE_GROUP_HEADER;
  }
 else   if (TableHandleAdapter.TABLE_GROUP_FOOTER.equals(type)) {
    type=IReportGraphicConstants.ICON_NODE_GROUP_FOOTER;
  }
 else {
    return null;
  }
  return ReportPlatformUIImages.getImage(type);
}","private Image getImage(){
  TableEditPart part=(TableEditPart)getOwner();
  if (part.getRow(getRowNumber()) == null) {
    return null;
  }
  String type=HandleAdapterFactory.getInstance().getRowHandleAdapter(part.getRow(getRowNumber())).getType();
  if (TableHandleAdapter.TABLE_HEADER.equals(type)) {
    type=IReportGraphicConstants.ICON_NODE_HEADER;
  }
 else   if (TableHandleAdapter.TABLE_DETAIL.equals(type)) {
    type=IReportGraphicConstants.ICON_NODE_DETAILS;
  }
 else   if (TableHandleAdapter.TABLE_FOOTER.equals(type)) {
    type=IReportGraphicConstants.ICON_NODE_FOOTER;
  }
 else   if (TableHandleAdapter.TABLE_GROUP_HEADER.equals(type)) {
    type=IReportGraphicConstants.ICON_NODE_GROUP_HEADER;
  }
 else   if (TableHandleAdapter.TABLE_GROUP_FOOTER.equals(type)) {
    type=IReportGraphicConstants.ICON_NODE_GROUP_FOOTER;
  }
 else {
    return null;
  }
  return ReportPlatformUIImages.getImage(type);
}",0.9628378378378378
78452,"/** 
 * Gets list edit parts.
 * @return The current selected list edit parts, null if no list edit partis selected.
 */
protected List getListEditParts(){
  List listParts=new ArrayList();
  for (Iterator iter=getSelectedObjects().iterator(); iter.hasNext(); ) {
    Object obj=iter.next();
    if (obj instanceof ListEditPart) {
      if (!(listParts.contains(obj))) {
        listParts.add(obj);
      }
    }
 else     if (obj instanceof ListBandEditPart) {
      Object parent=(ListEditPart)((ListBandEditPart)obj).getParent();
      if (!(listParts.contains(parent))) {
        listParts.add(parent);
      }
    }
 else {
      return Collections.EMPTY_LIST;
    }
  }
  return listParts;
}","/** 
 * Gets list edit parts.
 * @return The current selected list edit parts, null if no list edit partis selected.
 */
protected List getListEditParts(){
  List listParts=new ArrayList();
  for (Iterator iter=getSelectedObjects().iterator(); iter.hasNext(); ) {
    Object obj=iter.next();
    if (obj instanceof ListEditPart) {
      if (!(listParts.contains(obj))) {
        listParts.add(obj);
      }
    }
 else     if (obj instanceof ListBandEditPart) {
      ListEditPart parent2=(ListEditPart)((ListBandEditPart)obj).getParent();
      Object parent=parent2;
      if (!(listParts.contains(parent))) {
        listParts.add(parent);
      }
    }
 else {
      return Collections.EMPTY_LIST;
    }
  }
  return listParts;
}",0.9062937062937064
78453,"private boolean isMutilSelection(Object multiSelection){
  return multiSelection != null && (multiSelection == Object.class || multiSelection == DesignElementHandle.class || isRootElementHandleClass(multiSelection) || multiSelection == ReportItemHandle.class || multiSelection == ListHandle.class);
}","private boolean isMutilSelection(Object multiSelection){
  return multiSelection != null && (multiSelection == Object.class || multiSelection == DesignElementHandle.class || isRootElementHandleClass(multiSelection) || multiSelection == ReportItemHandle.class);
}",0.9323843416370108
78454,"/** 
 * Gets table edit part.
 * @return The current selected table edit part, null if no table edit partis selected.
 */
protected List getTableEditParts(){
  List tableParts=new ArrayList();
  for (Iterator itor=getSelectedObjects().iterator(); itor.hasNext(); ) {
    Object obj=itor.next();
    if (obj instanceof DummyEditpart) {
    }
 else     if (obj instanceof TableEditPart) {
      if (obj instanceof GridEditPart) {
        return Collections.EMPTY_LIST;
      }
      if (!(tableParts.contains(obj))) {
        tableParts.add(obj);
      }
    }
 else     if (obj instanceof TableCellEditPart) {
      Object parent=(TableEditPart)((TableCellEditPart)obj).getParent();
      if (parent instanceof GridEditPart) {
        return Collections.EMPTY_LIST;
      }
      if (!(tableParts.contains(parent))) {
        tableParts.add(parent);
      }
    }
 else {
      return Collections.EMPTY_LIST;
    }
  }
  return tableParts;
}","/** 
 * Gets table edit part.
 * @return The current selected table edit part, null if no table edit partis selected.
 */
protected List getTableEditParts(){
  List tableParts=new ArrayList();
  for (Iterator itor=getSelectedObjects().iterator(); itor.hasNext(); ) {
    Object obj=itor.next();
    if (obj instanceof DummyEditpart) {
    }
 else     if (obj instanceof TableEditPart) {
      if (obj instanceof GridEditPart) {
        return Collections.EMPTY_LIST;
      }
      if (!(tableParts.contains(obj))) {
        tableParts.add(obj);
      }
    }
 else     if (obj instanceof TableCellEditPart) {
      TableEditPart parent2=(TableEditPart)((TableCellEditPart)obj).getParent();
      Object parent=parent2;
      if (parent instanceof GridEditPart) {
        return Collections.EMPTY_LIST;
      }
      if (!(tableParts.contains(parent))) {
        tableParts.add(parent);
      }
    }
 else {
      return Collections.EMPTY_LIST;
    }
  }
  return tableParts;
}",0.927490871152843
78455,"private boolean performRevertToTemplateItem(DesignElementHandle handle){
  try {
    handle.revertToTemplate(""String_Node_Str"");
  }
 catch (  SemanticException e) {
    return false;
  }
  return true;
}","private boolean performRevertToTemplateItem(DesignElementHandle handle){
  try {
    handle.revertToTemplate(""String_Node_Str"");
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  return true;
}",0.9272727272727272
78456,"private boolean performTransferPlaceHolder(TemplateElementHandle handle){
  DesignElementHandle copiedHandle=handle.getDefaultElement().copy().getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle().getModule());
  try {
    ((TemplateReportItemHandle)handle).transformToReportItem((ReportItemHandle)copiedHandle);
  }
 catch (  SemanticException e) {
    return false;
  }
  return true;
}","private boolean performTransferPlaceHolder(TemplateElementHandle handle){
  DesignElementHandle copiedHandle=handle.getDefaultElement().copy().getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle().getModule());
  try {
    ((TemplateReportItemHandle)handle).transformToReportItem((ReportItemHandle)copiedHandle);
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  return true;
}",0.9618138424821002
78457,"private boolean performRevertToReportItem(DesignElementHandle handle){
  try {
    handle.revertToReportItem();
  }
 catch (  SemanticException e) {
    return false;
  }
  return true;
}","private boolean performRevertToReportItem(DesignElementHandle handle){
  try {
    handle.revertToReportItem();
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  return true;
}",0.9211822660098522
78458,"/** 
 * Creates actions and registers them to the ActionRegistry.
 */
protected void createActions(){
  addStackAction(new UndoAction(this));
  addStackAction(new RedoAction(this));
  addEditPartAction(new DeleteAction((IWorkbenchPart)this){
    public Command createDeleteCommand(    List objects){
      if (objects.isEmpty())       return null;
      if (!(objects.get(0) instanceof EditPart))       return null;
      GroupRequest deleteReq=new GroupRequest(RequestConstants.REQ_DELETE);
      deleteReq.setEditParts(objects);
      List list=new ArrayList();
      for (int i=0; i < objects.size(); i++) {
        EditPart object=(EditPart)objects.get(i);
        list.add(object.getModel());
      }
      return new DeleteCommand(list.toArray());
    }
  }
);
  SaveAction saveAction=new SaveAction(this);
  saveAction.setLazyEnablementCalculation(true);
  addEditorAction(saveAction);
  addAction(new CopyTemplateAction(this));
}","/** 
 * Creates actions and registers them to the ActionRegistry.
 */
protected void createActions(){
  addStackAction(new UndoAction(this));
  addStackAction(new RedoAction(this));
  addEditPartAction(new DeleteAction((IWorkbenchPart)this){
    public Command createDeleteCommand(    List objects){
      if (objects.isEmpty())       return null;
      if (!(objects.get(0) instanceof EditPart))       return null;
      GroupRequest deleteReq=new GroupRequest(RequestConstants.REQ_DELETE);
      deleteReq.setEditParts(objects);
      List temp=TableUtil.filletCellModel(objects);
      List list=new ArrayList();
      for (int i=0; i < temp.size(); i++) {
        EditPart object=(EditPart)temp.get(i);
        list.add(object.getModel());
      }
      return new DeleteCommand(list.toArray());
    }
  }
);
  SaveAction saveAction=new SaveAction(this);
  saveAction.setLazyEnablementCalculation(true);
  addEditorAction(saveAction);
  addAction(new CopyTemplateAction(this));
}",0.9614583333333332
78459,"public Command createDeleteCommand(List objects){
  if (objects.isEmpty())   return null;
  if (!(objects.get(0) instanceof EditPart))   return null;
  GroupRequest deleteReq=new GroupRequest(RequestConstants.REQ_DELETE);
  deleteReq.setEditParts(objects);
  List list=new ArrayList();
  for (int i=0; i < objects.size(); i++) {
    EditPart object=(EditPart)objects.get(i);
    list.add(object.getModel());
  }
  return new DeleteCommand(list.toArray());
}","public Command createDeleteCommand(List objects){
  if (objects.isEmpty())   return null;
  if (!(objects.get(0) instanceof EditPart))   return null;
  GroupRequest deleteReq=new GroupRequest(RequestConstants.REQ_DELETE);
  deleteReq.setEditParts(objects);
  List temp=TableUtil.filletCellModel(objects);
  List list=new ArrayList();
  for (int i=0; i < temp.size(); i++) {
    EditPart object=(EditPart)temp.get(i);
    list.add(object.getModel());
  }
  return new DeleteCommand(list.toArray());
}",0.9267782426778244
78460,"/** 
 * @param list
 * @return
 */
public static ISelection filletCellInSelectionEditorpart(ISelection selection){
  if (selection == null || !(selection instanceof IStructuredSelection))   return new StructuredSelection(Collections.EMPTY_LIST);
  List list=((IStructuredSelection)selection).toList();
  ArrayList retValue=new ArrayList(list);
  boolean hasRowOrColumn=false;
  int size=list.size();
  for (int i=0; i < size; i++) {
    Object obj=list.get(i);
    if (obj instanceof TableEditPart.DummyColumnEditPart || obj instanceof TableEditPart.DummyRowEditPart) {
      hasRowOrColumn=true;
      break;
    }
  }
  if (hasRowOrColumn) {
    for (int i=0; i < size; i++) {
      Object obj=list.get(i);
      if (obj instanceof TableCellEditPart) {
        retValue.remove(obj);
      }
    }
  }
  return new StructuredSelection(retValue);
}","/** 
 * @param list
 * @return
 */
public static ISelection filletCellInSelectionEditorpart(ISelection selection){
  if (selection == null || !(selection instanceof IStructuredSelection))   return new StructuredSelection(Collections.EMPTY_LIST);
  List list=((IStructuredSelection)selection).toList();
  List retValue=filletCellModel(list);
  return new StructuredSelection(retValue);
}",0.5299837925445705
78461,"public List getChildren(){
  List list=new ArrayList();
  list.add(currentEditorModel);
  return list;
}","public List getChildren(){
  List list=new ArrayList();
  list.add(getTopContainer(getCurrentEditorModel()));
  return list;
}",0.8956521739130435
78462,"/** 
 * @param currentEditorModel The currentEditorModel to set.
 */
public void setCurrentEditorModel(Object current){
  Object old=this.currentEditorModel;
  if (current == null || current instanceof LibraryHandle) {
    this.currentEditorModel=new LibRootModel(current);
  }
 else {
    this.currentEditorModel=current;
  }
  if (currentEditorModel == old) {
    return;
  }
  PropertyChangeEvent event=new PropertyChangeEvent(this,CURRENTMODEL,old,this.currentEditorModel);
  firePropertyChangeEvent(event);
}","/** 
 * @param currentEditorModel The currentEditorModel to set.
 */
public void setCurrentEditorModel(Object current){
  Object old=this.currentEditorModel;
  if (current == null || current instanceof LibraryHandle) {
    this.currentEditorModel=new LibRootModel(current);
  }
 else {
    this.currentEditorModel=current;
  }
  PropertyChangeEvent event=new PropertyChangeEvent(this,CURRENTMODEL,old,this.currentEditorModel);
  firePropertyChangeEvent(event);
}",0.9476923076923076
78463,"public void elementChanged(DesignElementHandle arg0,NotificationEvent arg1){
  markDirty(true);
  refreshVisuals();
  if (arg1.getEventType() == NotificationEvent.PROPERTY_EVENT && ((PropertyEvent)arg1).getPropertyName().equals(StyleHandle.FONT_SIZE_PROP)) {
    getFigure().invalidateTree();
  }
}","public void elementChanged(DesignElementHandle arg0,NotificationEvent arg1){
  markDirty(true);
  refreshVisuals();
  if (arg1.getEventType() == NotificationEvent.PROPERTY_EVENT && ((PropertyEvent)arg1).getPropertyName().equals(StyleHandle.FONT_SIZE_PROP)) {
    ((LabelFigure)getFigure()).resetHeight();
    getFigure().invalidateTree();
  }
}",0.8660436137071651
78464,"/** 
 * @param sortSpec
 * @return Comparator based on specified sortSpec, null indicates there isno need to do sorting
 */
private Comparator getComparator(SortSpec sortSpec){
  if (sortSpec == null)   return null;
  final int[] sortKeyIndexes=sortSpec.sortKeyIndexes;
  if (sortKeyIndexes == null || sortKeyIndexes.length == 0)   return null;
  final boolean[] sortAscending=sortSpec.sortAscending;
  Comparator comparator=new Comparator(){
    /** 
 * compares two row indexes, actually compares two rows pointed by the two row indexes
 */
    public int compare(    Object obj1,    Object obj2){
      IResultObject row1=(IResultObject)obj1;
      IResultObject row2=(IResultObject)obj2;
      for (int i=0; i < sortKeyIndexes.length; i++) {
        int colIndex=sortKeyIndexes[i];
        try {
          Object colObj1=row1.getFieldValue(colIndex);
          Object colObj2=row2.getFieldValue(colIndex);
          int result=doCompare(colObj1,colObj2);
          if (result != 0) {
            return sortAscending[i] ? result : -result;
          }
        }
 catch (        DataException e) {
        }
      }
      return 0;
    }
    /** 
 * Compare two objects
 * @param colObj1
 * @param colObj2
 * @return true colObj1 equals colObj2
 */
    private int doCompare(    Object colObj1,    Object colObj2){
      int result=0;
      if (colObj1 == colObj2) {
        return result;
      }
      if (colObj1 == null || colObj2 == null) {
        if (colObj1 == null) {
          result=-1;
        }
 else {
          result=1;
        }
        return result;
      }
      if (colObj1.equals(colObj2)) {
        return result;
      }
 else       if (colObj1 instanceof Comparable && colObj2 instanceof Comparable) {
        Comparable comp1=(Comparable)colObj1;
        Comparable comp2=(Comparable)colObj2;
        result=comp1.compareTo(comp2);
      }
 else       if (colObj1 instanceof Boolean && colObj2 instanceof Boolean) {
        Boolean bool=(Boolean)colObj1;
        if (bool.equals(Boolean.TRUE))         result=1;
 else         result=-1;
      }
 else {
      }
      return result;
    }
  }
;
  return comparator;
}","/** 
 * @param sortSpec
 * @return Comparator based on specified sortSpec, null indicates there isno need to do sorting
 */
private Comparator getComparator(SortSpec sortSpec){
  if (sortSpec == null)   return null;
  final int[] sortKeyIndexes=sortSpec.sortKeyIndexes;
  if (sortKeyIndexes == null || sortKeyIndexes.length == 0)   return null;
  final boolean[] sortAscending=sortSpec.sortAscending;
  Comparator comparator=new Comparator(){
    /** 
 * compares two row indexes, actually compares two rows pointed by the two row indexes
 */
    public int compare(    Object obj1,    Object obj2){
      IResultObject row1=(IResultObject)obj1;
      IResultObject row2=(IResultObject)obj2;
      for (int i=0; i < sortKeyIndexes.length; i++) {
        int colIndex=sortKeyIndexes[i];
        try {
          Object colObj1=row1.getFieldValue(colIndex);
          Object colObj2=row2.getFieldValue(colIndex);
          int result=doCompare(colObj1,colObj2);
          if (result != 0) {
            return sortAscending[i] ? result : -result;
          }
        }
 catch (        DataException e) {
        }
      }
      return 0;
    }
    /** 
 * Compare two objects
 * @param colObj1
 * @param colObj2
 * @return true colObj1 equals colObj2
 */
    private int doCompare(    Object colObj1,    Object colObj2){
      int result=0;
      if (colObj1 == colObj2) {
        return result;
      }
      if (colObj1 == null || colObj2 == null) {
        if (colObj1 == null) {
          result=-1;
        }
 else {
          result=1;
        }
        return result;
      }
      if (colObj1.equals(colObj2)) {
        return result;
      }
 else       if (colObj1 instanceof Comparable && colObj2 instanceof Comparable) {
        Comparable comp1=(Comparable)colObj1;
        Comparable comp2=(Comparable)colObj2;
        if (colObj1.getClass() != colObj2.getClass() && colObj1 instanceof Number && colObj2 instanceof Number) {
          try {
            comp1=(Comparable)DataTypeUtil.toDouble(colObj1);
            comp2=(Comparable)DataTypeUtil.toDouble(colObj2);
          }
 catch (          BirtException ex) {
          }
        }
        result=comp1.compareTo(comp2);
      }
 else       if (colObj1 instanceof Boolean && colObj2 instanceof Boolean) {
        Boolean bool=(Boolean)colObj1;
        if (bool.equals(Boolean.TRUE))         result=1;
 else         result=-1;
      }
 else {
      }
      return result;
    }
  }
;
  return comparator;
}",0.9293760831889082
78465,"/** 
 * Compare two objects
 * @param colObj1
 * @param colObj2
 * @return true colObj1 equals colObj2
 */
private int doCompare(Object colObj1,Object colObj2){
  int result=0;
  if (colObj1 == colObj2) {
    return result;
  }
  if (colObj1 == null || colObj2 == null) {
    if (colObj1 == null) {
      result=-1;
    }
 else {
      result=1;
    }
    return result;
  }
  if (colObj1.equals(colObj2)) {
    return result;
  }
 else   if (colObj1 instanceof Comparable && colObj2 instanceof Comparable) {
    Comparable comp1=(Comparable)colObj1;
    Comparable comp2=(Comparable)colObj2;
    result=comp1.compareTo(comp2);
  }
 else   if (colObj1 instanceof Boolean && colObj2 instanceof Boolean) {
    Boolean bool=(Boolean)colObj1;
    if (bool.equals(Boolean.TRUE))     result=1;
 else     result=-1;
  }
 else {
  }
  return result;
}","/** 
 * Compare two objects
 * @param colObj1
 * @param colObj2
 * @return true colObj1 equals colObj2
 */
private int doCompare(Object colObj1,Object colObj2){
  int result=0;
  if (colObj1 == colObj2) {
    return result;
  }
  if (colObj1 == null || colObj2 == null) {
    if (colObj1 == null) {
      result=-1;
    }
 else {
      result=1;
    }
    return result;
  }
  if (colObj1.equals(colObj2)) {
    return result;
  }
 else   if (colObj1 instanceof Comparable && colObj2 instanceof Comparable) {
    Comparable comp1=(Comparable)colObj1;
    Comparable comp2=(Comparable)colObj2;
    if (colObj1.getClass() != colObj2.getClass() && colObj1 instanceof Number && colObj2 instanceof Number) {
      try {
        comp1=(Comparable)DataTypeUtil.toDouble(colObj1);
        comp2=(Comparable)DataTypeUtil.toDouble(colObj2);
      }
 catch (      BirtException ex) {
      }
    }
    result=comp1.compareTo(comp2);
  }
 else   if (colObj1 instanceof Boolean && colObj2 instanceof Boolean) {
    Boolean bool=(Boolean)colObj1;
    if (bool.equals(Boolean.TRUE))     result=1;
 else     result=-1;
  }
 else {
  }
  return result;
}",0.8515151515151516
78466,"/** 
 * Constructor Statement(java.sql.Connection connection) use JDBC's Connection to construct it.
 */
public Statement(java.sql.Connection connection) throws OdaException {
  if (connection != null) {
    this.preStat=null;
    this.conn=connection;
    maxrows=0;
  }
 else {
    throw new JDBCException(ResourceConstants.DRIVER_NO_CONNECTION,ResourceConstants.ERROR_NO_CONNECTION);
  }
}","/** 
 * Constructor Statement(java.sql.Connection connection) use JDBC's Connection to construct it.
 */
public Statement(java.sql.Connection connection) throws OdaException {
  if (connection != null) {
    this.preStat=null;
    this.conn=connection;
    maxrows=-1;
  }
 else {
    throw new JDBCException(ResourceConstants.DRIVER_NO_CONNECTION,ResourceConstants.ERROR_NO_CONNECTION);
  }
}",0.9961783439490446
78467,"public IResultSet executeQuery() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(preStat);
  if (this.cachedResultSet != null) {
    IResultSet ret=this.cachedResultSet;
    this.cachedResultSet=null;
    return ret;
  }
  try {
    if (!maxRowsUpToDate) {
      try {
        preStat.setMaxRows(maxrows);
      }
 catch (      SQLException e1) {
      }
      maxRowsUpToDate=true;
    }
    return new ResultSet(this.preStat.executeQuery());
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_RETURN,e);
  }
}","public IResultSet executeQuery() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(preStat);
  if (this.cachedResultSet != null) {
    IResultSet ret=this.cachedResultSet;
    this.cachedResultSet=null;
    return ret;
  }
  try {
    if (maxrows >= 0 && !maxRowsUpToDate) {
      try {
        preStat.setMaxRows(maxrows);
      }
 catch (      SQLException e1) {
      }
      maxRowsUpToDate=true;
    }
    return new ResultSet(this.preStat.executeQuery());
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_RETURN,e);
  }
}",0.987878787878788
78468,"public void fatalError(CSSParseException exception) throws CSSException {
  StringBuffer sb=new StringBuffer();
  sb.append(exception.getURI()).append(""String_Node_Str"").append(exception.getLineNumber()).append(""String_Node_Str"").append(exception.getColumnNumber()).append(""String_Node_Str"").append(exception.getMessage());
  System.err.println(sb.toString());
}","public void fatalError(CSSParseException exception) throws CSSException {
  StringBuffer sb=new StringBuffer();
  if (!StringUtil.isBlank(exception.getURI()))   sb.append(exception.getURI()).append(""String_Node_Str"");
  ;
  sb.append(""String_Node_Str"").append(exception.getLineNumber()).append(""String_Node_Str"").append(exception.getColumnNumber()).append(""String_Node_Str"").append(exception.getMessage());
  System.err.println(sb.toString());
  fatalErrors.add(sb.toString());
}",0.8394768133174791
78469,"public void warning(CSSParseException exception) throws CSSException {
  StringBuffer sb=new StringBuffer();
  sb.append(exception.getURI()).append(""String_Node_Str"").append(exception.getLineNumber()).append(""String_Node_Str"").append(exception.getColumnNumber()).append(""String_Node_Str"").append(exception.getMessage());
  System.err.println(sb.toString());
}","public void warning(CSSParseException exception) throws CSSException {
  StringBuffer sb=new StringBuffer();
  if (!StringUtil.isBlank(exception.getURI()))   sb.append(exception.getURI()).append(""String_Node_Str"");
  ;
  sb.append(""String_Node_Str"").append(exception.getLineNumber()).append(""String_Node_Str"").append(exception.getColumnNumber()).append(""String_Node_Str"").append(exception.getMessage());
  System.err.println(sb.toString());
  warnings.add(sb.toString());
}",0.8413461538461539
78470,"public void error(CSSParseException exception) throws CSSException {
  StringBuffer sb=new StringBuffer();
  sb.append(exception.getURI()).append(""String_Node_Str"").append(exception.getLineNumber()).append(""String_Node_Str"").append(exception.getColumnNumber()).append(""String_Node_Str"").append(exception.getMessage());
  System.err.println(sb.toString());
}","public void error(CSSParseException exception) throws CSSException {
  StringBuffer sb=new StringBuffer();
  if (!StringUtil.isBlank(exception.getURI()))   sb.append(exception.getURI()).append(""String_Node_Str"");
  ;
  sb.append(""String_Node_Str"").append(exception.getLineNumber()).append(""String_Node_Str"").append(exception.getColumnNumber()).append(""String_Node_Str"").append(exception.getMessage());
  System.err.println(sb.toString());
  errors.add(sb.toString());
}",0.8426150121065376
78471,"/** 
 * Loads the styles from an external style sheet resource.
 * @param charStream character stream that shall not include a byte order mark
 * @return the <code>CssStyleSheet</code> containing all the styles loadedfrom an external style sheet, otherwise null
 * @throws StyleSheetException the style sheet resource has some syntax errors colliding with CSS2 grammar
 */
CssStyleSheet load(Reader charStream) throws StyleSheetException {
  StyleSheet ss=null;
  try {
    InputSource is=new InputSource(source);
    ss=(StyleSheet)parser.parseStyleSheet(is);
  }
 catch (  CSSException e) {
    logger.log(Level.SEVERE,e.getMessage());
    throw new StyleSheetException(StyleSheetException.DESIGN_EXCEPTION_SYNTAX_ERROR,e);
  }
catch (  IOException e) {
    throw new StyleSheetException(StyleSheetException.DESIGN_EXCEPTION_STYLE_SHEET_NOT_FOUND,e);
  }
 finally {
    try {
      source.close();
    }
 catch (    IOException e) {
    }
  }
  if (ss == null)   return null;
  CssStyleSheet styleSheet=new CssStyleSheet();
  List rules=ss.getRules();
  for (int i=0; i < rules.size(); i++) {
    CSSRule rule=(CSSRule)rules.get(i);
    loadStyle(styleSheet,rule);
  }
  styleSheet.addWarning(warnings);
  return styleSheet;
}","/** 
 * Loads the styles from an external style sheet resource.
 * @param charStream character stream that shall not include a byte order mark
 * @return the <code>CssStyleSheet</code> containing all the styles loadedfrom an external style sheet, otherwise null
 * @throws StyleSheetException the style sheet resource has some syntax errors colliding with CSS2 grammar
 */
CssStyleSheet load(Reader charStream) throws StyleSheetException {
  StyleSheet ss=null;
  try {
    InputSource is=new InputSource(source);
    ss=(StyleSheet)parser.parseStyleSheet(is);
  }
 catch (  CSSException e) {
    logger.log(Level.SEVERE,e.getMessage());
    throw new StyleSheetException(StyleSheetException.DESIGN_EXCEPTION_SYNTAX_ERROR,e);
  }
catch (  IOException e) {
    throw new StyleSheetException(StyleSheetException.DESIGN_EXCEPTION_STYLE_SHEET_NOT_FOUND,e);
  }
 finally {
    try {
      source.close();
    }
 catch (    IOException e) {
    }
  }
  if (ss == null)   return null;
  CssStyleSheet styleSheet=new CssStyleSheet();
  List rules=ss.getRules();
  for (int i=0; i < rules.size(); i++) {
    CSSRule rule=(CSSRule)rules.get(i);
    loadStyle(styleSheet,rule);
  }
  styleSheet.addWarning(warnings);
  styleSheet.setErrorHandler(parser.getErrorHandler());
  return styleSheet;
}",0.9777070063694268
78472,"boolean execute() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(preStat);
  try {
    if (!maxRowsUpToDate) {
      preStat.setMaxRows(maxrows);
      maxRowsUpToDate=true;
    }
    return preStat.execute();
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.QUERY_EXECUTE_FAIL,e);
  }
}","boolean execute() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(preStat);
  try {
    if (maxrows >= 0 && !maxRowsUpToDate) {
      preStat.setMaxRows(maxrows);
      maxRowsUpToDate=true;
    }
    return preStat.execute();
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.QUERY_EXECUTE_FAIL,e);
  }
}",0.981042654028436
78473,"public Object getValue(IBaseExpression dataExpr) throws BirtException {
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(dataExpr));
  checkStarted();
  Object exprValue=null;
  Object handle=dataExpr.getHandle();
  if (handle instanceof CompiledExpression) {
    CompiledExpression expr=(CompiledExpression)handle;
    Object value=evaluateCompiledExpression(expr,odiResult,scope);
    try {
      exprValue=DataTypeUtil.convert(value,dataExpr.getDataType());
    }
 catch (    BirtException e) {
      throw new DataException(ResourceConstants.INCONVERTIBLE_DATATYPE,new Object[]{value,value.getClass(),DataType.getClass(dataExpr.getDataType())});
    }
  }
 else   if (handle instanceof ConditionalExpression) {
    ConditionalExpression ce=(ConditionalExpression)handle;
    Object resultExpr=getValue(ce.getExpression());
    Object resultOp1=ce.getOperand1() != null ? getValue(ce.getOperand1()) : null;
    Object resultOp2=ce.getOperand2() != null ? getValue(ce.getOperand2()) : null;
    String op1Text=ce.getOperand1() != null ? ce.getOperand1().getText() : null;
    String op2Text=ce.getOperand2() != null ? ce.getOperand2().getText() : null;
    exprValue=ScriptEvalUtil.evalConditionalExpr(resultExpr,ce.getOperator(),ScriptEvalUtil.newExprInfo(op1Text,resultOp1),ScriptEvalUtil.newExprInfo(op2Text,resultOp2));
  }
 else {
    DataException e=new DataException(ResourceConstants.INVALID_EXPR_HANDLE);
    logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  this.getRdSaveUtil().doSaveExpr(dataExpr,exprValue);
  return exprValue;
}","public Object getValue(IBaseExpression dataExpr) throws BirtException {
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(dataExpr));
  checkStarted();
  Object exprValue=null;
  Object handle=dataExpr.getHandle();
  if (handle instanceof CompiledExpression) {
    CompiledExpression expr=(CompiledExpression)handle;
    Object value=evaluateCompiledExpression(expr,odiResult,scope);
    try {
      exprValue=DataTypeUtil.convert(value,dataExpr.getDataType());
    }
 catch (    BirtException e) {
      throw new DataException(ResourceConstants.INCONVERTIBLE_DATATYPE,new Object[]{value,value.getClass(),DataType.getClass(dataExpr.getDataType())});
    }
  }
 else   if (handle instanceof ConditionalExpression) {
    ConditionalExpression ce=(ConditionalExpression)handle;
    Object resultExpr=getValue(ce.getExpression());
    Object resultOp1=ce.getOperand1() != null ? getValue(ce.getOperand1()) : null;
    Object resultOp2=ce.getOperand2() != null ? getValue(ce.getOperand2()) : null;
    String op1Text=ce.getOperand1() != null ? ce.getOperand1().getText() : null;
    String op2Text=ce.getOperand2() != null ? ce.getOperand2().getText() : null;
    exprValue=ScriptEvalUtil.evalConditionalExpr(resultExpr,ce.getOperator(),ScriptEvalUtil.newExprInfo(op1Text,resultOp1),ScriptEvalUtil.newExprInfo(op2Text,resultOp2));
  }
 else {
    DataException e=new DataException(ResourceConstants.INVALID_EXPR_HANDLE);
    logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  if (exprValue instanceof DataExceptionMocker) {
    throw ((DataExceptionMocker)exprValue).getCause();
  }
  this.getRdSaveUtil().doSaveExpr(dataExpr,exprValue);
  return exprValue;
}",0.9683782999709892
78474,"/** 
 * To check whether the expressions are comparable. If so, they will be formatted to the comparable.For operands, only ExprTextAndValue is acceptable.
 * @param obj
 * @param operator
 * @param op1
 * @param op2
 * @return
 * @throws DataException
 */
private static Object[] isComparable(Object obj,int operator,ExprTextAndValue op1,ExprTextAndValue op2) throws DataException {
  if (isFormatNeeded(obj,operator,op1,op2))   return formatToComparable(obj,op1,op2);
  return null;
}","/** 
 * To check whether the expressions are comparable. If so, they will be formatted to the comparable.For operands, only ExprTextAndValue is acceptable.
 * @param obj
 * @param operator
 * @param op1
 * @param op2
 * @return
 * @throws DataException
 */
private static Object[] isComparable(Object obj,int operator,ExprTextAndValue op1,ExprTextAndValue op2) throws DataException {
  if (needFormat(obj,operator,op1,op2))   return formatToComparable(obj,op1,op2);
  return null;
}",0.987603305785124
78475,"public String getNamedExpression(String name){
  UserPropertyDefnHandle propDefn=handle.getUserPropertyDefnHandle(name);
  if (propDefn == null || propDefn.getDefn() == null || propDefn.getDefn().getDefault() == null || propDefn.getType() != IPropertyType.EXPRESSION_TYPE)   return null;
  return propDefn.getDefn().getDefault().toString();
}","public String getNamedExpression(String name){
  UserPropertyDefnHandle propDefn=handle.getUserPropertyDefnHandle(name);
  Object userProp=getUserProperty(name);
  if (propDefn == null || userProp == null || propDefn.getType() != IPropertyType.EXPRESSION_TYPE)   return null;
  return userProp.toString();
}",0.7704160246533128
78476,"public IStyle getComputedStyle(){
  if (computedStyle == null) {
    CSSEngine cssEngine=null;
    if (report != null) {
      cssEngine=report.getCSSEngine();
    }
    if (cssEngine != null) {
      cssEngine=new BIRTCSSEngine();
    }
    computedStyle=new ComputedStyle(this);
  }
  return computedStyle;
}","public IStyle getComputedStyle(){
  if (computedStyle == null) {
    CSSEngine cssEngine=null;
    if (report != null) {
      cssEngine=report.getCSSEngine();
    }
    if (cssEngine == null) {
      cssEngine=new BIRTCSSEngine();
    }
    computedStyle=new ComputedStyle(this);
  }
  return computedStyle;
}",0.9967741935483873
78477,"/** 
 * Gets a property value given its definition. This version does the property search as defined by the given derived component. That is, it gets the ""effective"" property value. The definition can be for a system or user-defined property. <p> The search won't search up the containment hierarchy. Meanwhile, it won't the inheritance hierarchy if the non-style property is not inheritable. <p> Part of: Property value system.
 * @param module the module
 * @param prop definition of the property to get
 * @return The property value, or null if no value is set.
 */
public Object getPropertyFromElement(Module module,ElementPropertyDefn prop){
  Object value=null;
  value=getPropertyFromSelf(module,prop);
  if (value != null)   return value;
  if (isInheritableProperty(prop) || prop.isStyleProperty()) {
    if (isVirtualElement()) {
      value=getPropertyFromVirtualParent(module,prop);
    }
 else {
      value=getPropertyFromParent(module,prop);
    }
    if (value != null)     return value;
  }
  if (prop.isStyleProperty()) {
    value=getPropertyFromSelfSelector(module,prop);
    if (value != null)     return value;
    value=getPropertyFromSlotSelector(module,prop);
    if (value != null)     return value;
  }
  return null;
}","/** 
 * Gets a property value given its definition. This version does the property search as defined by the given derived component. That is, it gets the ""effective"" property value. The definition can be for a system or user-defined property. <p> The search won't search up the containment hierarchy. Meanwhile, it won't the inheritance hierarchy if the non-style property is not inheritable. <p> Part of: Property value system.
 * @param module the module
 * @param prop definition of the property to get
 * @return The property value, or null if no value is set.
 */
public Object getPropertyFromElement(Module module,ElementPropertyDefn prop){
  Object value=null;
  value=getPropertyFromSelf(module,prop);
  if (value != null)   return value;
  if (isInheritableProperty(prop) || prop.isStyleProperty()) {
    value=getPropertyFromParent(module,prop);
    if (value != null)     return value;
  }
  if (prop.isStyleProperty()) {
    value=getPropertyFromSelfSelector(module,prop);
    if (value != null)     return value;
    value=getPropertyFromSlotSelector(module,prop);
    if (value != null)     return value;
  }
  return null;
}",0.8737945492662473
78478,"/** 
 * Returns the property value from this element's parent, or any ancestor. The value is only from local properties, or local style of its ancestor.
 * @param module module
 * @param prop definition of the property to get.
 * @return property value, or null if no value is set.
 */
protected Object getPropertyFromParent(Module module,ElementPropertyDefn prop){
}","/** 
 * Returns the property value from this element's parent, or its virtual parent. The value is only from local properties, or local style of its ancestor.
 * @param module module
 * @param prop definition of the property to get.
 * @return property value, or <code>null</code> if no value is set.
 */
protected Object getPropertyFromParent(Module module,ElementPropertyDefn prop){
}",0.9322709163346612
78479,"/** 
 * Gets the property value by the following rule: <li>if the value existed on self, return it.</li> <li>if the value existed on parent, return null, else check the element selector.</li> <li>if the value existed on the self selector, return it.</li>
 * @param module module
 * @param prop definition of the property to get
 * @return The property value, or null if no value is set.
 */
private Object getFactoryPropertyFromElement(Module module,ElementPropertyDefn prop){
}","/** 
 * Gets the property value by the following rule: <li>if the value existed on self, return it.</li> <li>if the value existed on parent, return null, else check the element selector.</li> <li>if the value existed on the self selector, return it.</li>
 * @param module module
 * @param prop definition of the property to get
 * @return The property value, or null if no value is set.
 */
private Object getFactoryPropertyFromElement(Module module,ElementPropertyDefn prop){
  Object value=null;
  value=getPropertyFromSelf(module,prop);
  if (value != null)   return value;
  if (isInheritableProperty(prop) || prop.isStyleProperty()) {
    value=getPropertyFromParent(module,prop);
    if (value != null)     return value;
  }
  if (prop.isStyleProperty()) {
    value=getPropertyFromSelfSelector(module,prop);
    if (value != null)     return value;
    value=getPropertyFromSlotSelector(module,prop);
    if (value != null)     return value;
  }
  return null;
}",0.6606772633033863
78480,"/** 
 * Loads the extensions in plug-ins, and add them into metadata dictionary.
 * @throws MetaDataParserException if error is found when loading extension.
 */
public void load() throws MetaDataParserException {
  try {
    doLoad();
  }
 catch (  ExtensionException e) {
    logger.log(Level.SEVERE,e.getMessage());
    MetaLogManager.log(""String_Node_Str"",e);
    throw new MetaDataParserException(e,MetaDataParserException.DESIGN_EXCEPTION_EXTENSION_ERROR);
  }
catch (  MetaDataException e) {
    logger.log(Level.SEVERE,e.getMessage());
    MetaLogManager.log(""String_Node_Str"",e);
    throw new MetaDataParserException(e,MetaDataParserException.DESIGN_EXCEPTION_EXTENSION_ERROR);
  }
}","/** 
 * Loads the extensions in plug-ins, and add them into metadata dictionary.
 * @throws MetaDataParserException if error is found when loading extension.
 */
public void load() throws MetaDataParserException {
  try {
    doLoad();
  }
 catch (  ExtensionException e) {
    logExtenstionException(e);
    throw new MetaDataParserException(e,MetaDataParserException.DESIGN_EXCEPTION_EXTENSION_ERROR);
  }
catch (  MetaDataException e) {
    logger.log(Level.SEVERE,e.getMessage());
    MetaLogManager.log(""String_Node_Str"",e);
    throw new MetaDataParserException(e,MetaDataParserException.DESIGN_EXCEPTION_EXTENSION_ERROR);
  }
}",0.9253956292388849
78481,"protected void setRowType(String tagName,Object value){
  if (tagName != null && value != null) {
    if (value instanceof RowDesign) {
      RowDesign row=(RowDesign)value;
      int bandType=row.getBandType();
      if (bandType == TableBandDesign.TABLE_HEADER) {
        writer.attribute(tagName,""String_Node_Str"");
      }
 else       if (bandType == TableBandDesign.TABLE_FOOTER) {
        writer.attribute(tagName,""String_Node_Str"");
      }
 else       if (bandType == TableBandDesign.GROUP_HEADER) {
        writer.attribute(tagName,""String_Node_Str"" + row.getGroupLevel());
      }
 else       if (bandType == TableBandDesign.GROUP_FOOTER) {
        writer.attribute(tagName,""String_Node_Str"" + row.getGroupLevel());
      }
    }
  }
}","protected void setRowType(String tagName,IRowContent rowContent){
  if (tagName != null && rowContent != null) {
    if (rowContent instanceof RowContent) {
      RowContent rCont=(RowContent)rowContent;
      int bandType=rCont.getRowType();
      if (bandType == TableBandDesign.TABLE_HEADER) {
        writer.attribute(tagName,""String_Node_Str"");
      }
 else       if (bandType == TableBandDesign.TABLE_FOOTER) {
        writer.attribute(tagName,""String_Node_Str"");
      }
 else       if (bandType == TableBandDesign.GROUP_HEADER) {
        writer.attribute(tagName,""String_Node_Str"" + rCont.getGroupLevel());
      }
 else       if (bandType == TableBandDesign.GROUP_FOOTER) {
        writer.attribute(tagName,""String_Node_Str"" + rCont.getGroupLevel());
      }
    }
  }
}",0.88
78482,"protected void writeFields(DataOutputStream out) throws IOException {
  super.writeFields(out);
  if (rowID != -1) {
    IOUtil.writeInt(out,FIELD_ROWID);
    IOUtil.writeInt(out,rowID);
  }
}","protected void writeFields(DataOutputStream out) throws IOException {
  super.writeFields(out);
  if (rowID != -1) {
    IOUtil.writeInt(out,FIELD_ROWID);
    IOUtil.writeInt(out,rowID);
    IOUtil.writeInt(out,FIELD_ROWTYPE);
    IOUtil.writeInt(out,rowType);
    IOUtil.writeInt(out,FIELD_ROW_GROUPLEVEL);
    IOUtil.writeInt(out,groupLevel);
  }
}",0.7084870848708487
78483,"protected void readField(int version,int filedId,DataInputStream in) throws IOException {
switch (filedId) {
case FIELD_ROWID:
    rowID=IOUtil.readInt(in);
  break;
default :
super.readField(version,filedId,in);
}
}","protected void readField(int version,int filedId,DataInputStream in) throws IOException {
switch (filedId) {
case FIELD_ROWID:
    rowID=IOUtil.readInt(in);
  break;
case FIELD_ROWTYPE:
rowType=IOUtil.readInt(in);
break;
case FIELD_ROW_GROUPLEVEL:
groupLevel=IOUtil.readInt(in);
break;
default :
super.readField(version,filedId,in);
}
}",0.782608695652174
78484,"/** 
 * output the row. row is output as: row start, cells*, row end.
 * @param rowIndex the index in the rows
 * @param row row design
 * @param emitter output emitter
 */
protected void accessRow(RowDesign row,IContentEmitter emitter,IResultIterator rsIterator){
  IRowData rowData=null;
  if (context.isInFactory()) {
    rowData=new RowData(rsIterator,getValueExpressions(row));
  }
  if (rowClosed) {
    IRowContent rowContent=report.createRowContent();
    rowContent.setRowID(rowId++);
    assert(rowContent instanceof RowContent);
    IContent parent=context.getContent();
    context.pushContent(rowContent);
    initializeContent(parent,row,rowContent);
    processStyle(row,rowContent);
    processVisibility(row,rowContent);
    processBookmark(row,rowContent);
    processAction(row,rowContent);
    if (needPageBreak) {
      rowContent.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.SOFT_VALUE);
      needPageBreak=false;
    }
    if (context.isInFactory()) {
      RowScriptExecutor.handleOnCreate((RowContent)rowContent,rowData,context);
    }
    startTOCEntry(rowContent);
    if (emitter != null) {
      emitter.startRow(rowContent);
    }
    rowClosed=false;
  }
  for (int j=0; j < row.getCellCount(); j++) {
    CellDesign cell=row.getCell(j);
    if (cell != null) {
      ICellContent cellContent=report.createCellContent();
      assert(cellContent instanceof CellContent);
      IContent parent=context.getContent();
      context.pushContent(cellContent);
      initializeContent(parent,cell,cellContent);
      cellContent.setColumn(cell.getColumn());
      cellContent.setColSpan(cell.getColSpan());
      cellContent.setRowSpan(cell.getRowSpan());
      processStyle(cell,cellContent);
      processVisibility(cell,cellContent);
      processBookmark(cell,cellContent);
      processAction(cell,cellContent);
      if (context.isInFactory()) {
        CellScriptExecutor.handleOnCreate((CellContent)cellContent,rowData,context,false);
      }
      startTOCEntry(cellContent);
      if (emitter != null) {
        emitter.startCell(cellContent);
      }
      for (int m=0; m < cell.getContentCount(); m++) {
        ReportItemDesign item=cell.getContent(m);
        if (item != null) {
          if (layoutEmitter != null) {
            item.accept(this.visitor,layoutEmitter.getCellEmitter());
          }
 else {
            item.accept(this.visitor,emitter);
          }
        }
      }
      if (emitter != null) {
        emitter.endCell(cellContent);
      }
      finishTOCEntry();
      context.popContent();
    }
  }
  boolean closeRow=true;
  if (closeRow) {
    emitter.endRow((IRowContent)context.getContent());
    finishTOCEntry();
    context.popContent();
    rowClosed=true;
  }
}","/** 
 * output the row. row is output as: row start, cells*, row end.
 * @param rowIndex the index in the rows
 * @param row row design
 * @param emitter output emitter
 */
protected void accessRow(RowDesign row,IContentEmitter emitter,IResultIterator rsIterator){
  IRowData rowData=null;
  if (context.isInFactory()) {
    rowData=new RowData(rsIterator,getValueExpressions(row));
  }
  if (rowClosed) {
    IRowContent rowContent=report.createRowContent();
    rowContent.setRowID(rowId++);
    assert(rowContent instanceof RowContent);
    IContent parent=context.getContent();
    context.pushContent(rowContent);
    initializeContent(parent,row,rowContent);
    processStyle(row,rowContent);
    processVisibility(row,rowContent);
    processBookmark(row,rowContent);
    processAction(row,rowContent);
    processRowType(row,rowContent);
    if (needPageBreak) {
      rowContent.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.SOFT_VALUE);
      needPageBreak=false;
    }
    if (context.isInFactory()) {
      RowScriptExecutor.handleOnCreate((RowContent)rowContent,rowData,context);
    }
    startTOCEntry(rowContent);
    if (emitter != null) {
      emitter.startRow(rowContent);
    }
    rowClosed=false;
  }
  for (int j=0; j < row.getCellCount(); j++) {
    CellDesign cell=row.getCell(j);
    if (cell != null) {
      ICellContent cellContent=report.createCellContent();
      assert(cellContent instanceof CellContent);
      IContent parent=context.getContent();
      context.pushContent(cellContent);
      initializeContent(parent,cell,cellContent);
      cellContent.setColumn(cell.getColumn());
      cellContent.setColSpan(cell.getColSpan());
      cellContent.setRowSpan(cell.getRowSpan());
      processStyle(cell,cellContent);
      processVisibility(cell,cellContent);
      processBookmark(cell,cellContent);
      processAction(cell,cellContent);
      if (context.isInFactory()) {
        CellScriptExecutor.handleOnCreate((CellContent)cellContent,rowData,context,false);
      }
      startTOCEntry(cellContent);
      if (emitter != null) {
        emitter.startCell(cellContent);
      }
      for (int m=0; m < cell.getContentCount(); m++) {
        ReportItemDesign item=cell.getContent(m);
        if (item != null) {
          if (layoutEmitter != null) {
            item.accept(this.visitor,layoutEmitter.getCellEmitter());
          }
 else {
            item.accept(this.visitor,emitter);
          }
        }
      }
      if (emitter != null) {
        emitter.endCell(cellContent);
      }
      finishTOCEntry();
      context.popContent();
    }
  }
  boolean closeRow=true;
  if (closeRow) {
    emitter.endRow((IRowContent)context.getContent());
    finishTOCEntry();
    context.popContent();
    rowClosed=true;
  }
}",0.9934994582881906
78485,"protected void accessHeader(ListingDesign list,IContentEmitter emitter,IResultIterator rsIterator){
  ITableContent tableContent=(ITableContent)context.getContent();
  TableBandDesign bandDesign=((TableItemDesign)list).getHeader();
  if (bandDesign != null) {
    ITableBandContent header=report.createTableHeader();
    context.pushContent(header);
    initializeContent(tableContent,bandDesign,header);
    if (emitter != null) {
      emitter.startTableHeader(header);
    }
    accessTableBand(bandDesign,emitter,rsIterator);
    if (emitter != null) {
      emitter.endTableHeader(header);
    }
    context.popContent();
  }
  ITableBandContent body=report.createTableBody();
  initializeContent(tableContent,null,body);
  context.pushContent(body);
  if (emitter != null) {
    emitter.startTableBody(body);
  }
}","protected void accessHeader(ListingDesign list,IContentEmitter emitter,IResultIterator rsIterator){
  ITableContent tableContent=(ITableContent)context.getContent();
  TableBandDesign bandDesign=((TableItemDesign)list).getHeader();
  if (bandDesign != null) {
    ITableBandContent header=report.createTableHeader();
    context.pushContent(header);
    initializeContent(tableContent,bandDesign,header);
    if (emitter != null) {
      emitter.startTableHeader(header);
    }
    bandDesign.setBandType(TableBandDesign.TABLE_HEADER);
    accessTableBand(bandDesign,emitter,rsIterator);
    if (emitter != null) {
      emitter.endTableHeader(header);
    }
    context.popContent();
  }
  ITableBandContent body=report.createTableBody();
  initializeContent(tableContent,null,body);
  context.pushContent(body);
  if (emitter != null) {
    emitter.startTableBody(body);
  }
}",0.9658421672555948
78486,"protected void accessTableBand(TableBandDesign band,IContentEmitter emitter,IResultIterator rsIterator){
  if (band != null) {
    for (int i=0; i < band.getRowCount(); i++) {
      accessRow(band.getRow(i),emitter,rsIterator);
    }
  }
}","protected void accessTableBand(TableBandDesign band,IContentEmitter emitter,IResultIterator rsIterator){
  if (band != null) {
    for (int i=0; i < band.getRowCount(); i++) {
      RowDesign rowDesign=band.getRow(i);
      rowDesign.setBandType(band.getBandType());
      rowDesign.setGroupLevel(band.getBandLevel());
      accessRow(rowDesign,emitter,rsIterator);
    }
  }
}",0.698051948051948
78487,"protected void accessFooter(ListingDesign list,IContentEmitter emitter,IResultIterator rsIterator){
  if (layoutEmitter != null) {
    layoutEmitter.flush();
    outputEmitter=layoutEmitter.emitter;
    emitter=outputEmitter;
    layoutEmitter=null;
  }
  ITableBandContent body=(ITableBandContent)context.getContent();
  if (emitter != null) {
    emitter.endTableBody(body);
  }
  context.popContent();
  TableBandDesign bandDesign=((TableItemDesign)list).getFooter();
  if (bandDesign != null) {
    ITableBandContent footer=report.createTableFooter();
    IContent parent=context.getContent();
    context.pushContent(footer);
    initializeContent(parent,bandDesign,footer);
    if (emitter != null) {
      emitter.startTableFooter(footer);
    }
    accessTableBand(bandDesign,emitter,rsIterator);
    if (emitter != null) {
      emitter.endTableFooter(footer);
    }
    context.popContent();
  }
}","protected void accessFooter(ListingDesign list,IContentEmitter emitter,IResultIterator rsIterator){
  if (layoutEmitter != null) {
    layoutEmitter.flush();
    outputEmitter=layoutEmitter.emitter;
    emitter=outputEmitter;
    layoutEmitter=null;
  }
  ITableBandContent body=(ITableBandContent)context.getContent();
  if (emitter != null) {
    emitter.endTableBody(body);
  }
  context.popContent();
  TableBandDesign bandDesign=((TableItemDesign)list).getFooter();
  if (bandDesign != null) {
    ITableBandContent footer=report.createTableFooter();
    IContent parent=context.getContent();
    context.pushContent(footer);
    initializeContent(parent,bandDesign,footer);
    if (emitter != null) {
      emitter.startTableFooter(footer);
    }
    bandDesign.setBandType(TableBandDesign.TABLE_FOOTER);
    accessTableBand(bandDesign,emitter,rsIterator);
    if (emitter != null) {
      emitter.endTableFooter(footer);
    }
    context.popContent();
  }
}",0.9551282051282052
78488,"protected void accessGroupHeader(ListingDesign list,int index,IContentEmitter emitter){
  groupIndex=index;
  TableGroupDesign group=((TableItemDesign)list).getGroup(index);
  if (group != null) {
    TableBandDesign band=group.getHeader();
    if (layoutEmitter == null && tableInfo.hasDropCells(index)) {
      layoutEmitter=new TableLayoutEmitter((TableItemDesign)list,emitter);
      outputEmitter=layoutEmitter;
    }
    accessTableBand(band,outputEmitter,null);
  }
}","protected void accessGroupHeader(ListingDesign list,int index,IContentEmitter emitter){
  groupIndex=index;
  TableGroupDesign group=((TableItemDesign)list).getGroup(index);
  if (group != null) {
    TableBandDesign band=group.getHeader();
    if (layoutEmitter == null && tableInfo.hasDropCells(index)) {
      layoutEmitter=new TableLayoutEmitter((TableItemDesign)list,emitter);
      outputEmitter=layoutEmitter;
    }
    band.setBandType(TableBandDesign.GROUP_HEADER);
    band.setBandLevel(index);
    accessTableBand(band,outputEmitter,null);
  }
}",0.920388349514563
78489,"public void endElement(){
  String tagName=""String_Node_Str"";
  if (elementStack.size() > 0)   tagName=(String)elementStack.get(elementStack.size() - 1);
  if (!tagName.equalsIgnoreCase(currentTagName)) {
    literal(getIndent(elementStack.size() - 1));
  }
  super.endElement();
}","public void endElement(){
  String tagName=""String_Node_Str"";
  if (!elementStack.isEmpty())   tagName=(String)elementStack.get(elementStack.size() - 1);
  if (!elementStack.isEmpty() && !tagName.equalsIgnoreCase(currentTagName))   literal(getIndent(elementStack.size() - 1));
  currentTagName=tagName;
  super.endElement();
}",0.3163097199341021
78490,"public void startText(ITextContent text){
  IStyle mergedStyle=text.getStyle();
  if (peek(mergedStyle)) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=text.getX();
  DimensionType y=text.getY();
  DimensionType width=text.getWidth();
  DimensionType height=text.getHeight();
  String textValue=text.getText();
  int display;
  if (textValue != null && textValue.indexOf('\n') >= 0) {
    display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  }
 else {
    display=checkElementType(x,y,mergedStyle,styleBuffer);
  }
  String tagName;
  if (handleAction(text.getHyperlinkAction())) {
    tagName=HTMLTags.TAG_A;
    setDisplayProperty(display,DISPLAY_BLOCK | DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(mergedStyle,styleBuffer);
  }
 else {
    tagName=openTagByType(display,DISPLAY_FLAG_ALL);
    setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  setStyleName(text.getStyleClass());
  setBookmark(tagName,text.getBookmark());
  writer.attribute(HTMLTags.ATTR_TITLE,text.getHelpText());
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  handleStyle(text,styleBuffer,false);
  writer.text(textValue);
  writer.closeTag(tagName);
}","public void startText(ITextContent text){
  IStyle mergedStyle=text.getStyle();
  if (peek(mergedStyle)) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=text.getX();
  DimensionType y=text.getY();
  DimensionType width=text.getWidth();
  DimensionType height=text.getHeight();
  String textValue=text.getText();
  int display;
  if (textValue != null && textValue.indexOf('\n') >= 0) {
    display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  }
 else {
    display=checkElementType(x,y,mergedStyle,styleBuffer);
  }
  String tagName;
  if (handleAction(text.getHyperlinkAction())) {
    tagName=HTMLTags.TAG_A;
    setDisplayProperty(display,DISPLAY_BLOCK | DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(mergedStyle,styleBuffer);
  }
 else {
    tagName=openTagByType(display,DISPLAY_FLAG_ALL);
    setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  setStyleName(text.getStyleClass());
  setBookmark(tagName,text.getBookmark());
  setLabelInstanceId(text);
  writer.attribute(HTMLTags.ATTR_TITLE,text.getHelpText());
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  handleStyle(text,styleBuffer,false);
  writer.text(textValue);
  writer.closeTag(tagName);
}",0.9893211289092296
78491,"/** 
 * access list band, such as list header, group header, detail etc
 * @param band the list band
 * @param emitter the report emitter
 * @param expressionRow TODO
 * @param isDetail true if it is detail band
 */
private void accessListBand(ListBandDesign band,IContentEmitter emitter,IResultIterator rsIterator){
  if (band != null && band.getContentCount() > 0) {
    for (int i=0; i < band.getContentCount(); i++) {
      ReportItemDesign item=band.getContent(i);
      if (context.isInFactory()) {
      }
      if (needPageBreak) {
        needPageBreak=false;
      }
      if (item != null) {
        item.accept(this.visitor,emitter);
      }
    }
  }
}","/** 
 * access list band, such as list header, group header, detail etc
 * @param band the list band
 * @param emitter the report emitter
 * @param expressionRow TODO
 * @param isDetail true if it is detail band
 */
private void accessListBand(ListBandDesign band,IContentEmitter emitter,IResultIterator rsIterator){
  if (band != null && band.getContentCount() > 0) {
    IContainerContent bandContent=report.createContainerContent();
    assert(bandContent instanceof ContainerContent);
    IContent parent=context.getContent();
    context.pushContent(bandContent);
    initializeContent(parent,band,bandContent);
    for (int i=0; i < band.getContentCount(); i++) {
      ReportItemDesign item=band.getContent(i);
      if (context.isInFactory()) {
      }
      if (needPageBreak) {
        needPageBreak=false;
      }
      if (item != null) {
        item.accept(this.visitor,emitter);
      }
    }
    context.popContent();
  }
}",0.8291770573566085
78492,"/** 
 * execute a cell. the execution process is: <li> create a cell content <li> push the content into the stack <li> intialize the cell <li> process the action, bookmark, style, visibility <li> call onCreate if necessary <li> call emitter to start the cell <li> for each element in the cell, execute the element. <li> call emiter to close the cell <li> popup the cell.
 * @param rowContent row content
 * @param cell cell design
 * @param emitter output emitter
 */
private void executeCell(IRowContent rowContent,CellDesign cell,IContentEmitter emitter,IRowData rowData){
  ICellContent cellContent=report.createCellContent();
  assert(cellContent instanceof CellContent);
  context.pushContent(cellContent);
  initializeContent(rowContent,cell,cellContent);
  cellContent.setColumn(cell.getColumn());
  cellContent.setColSpan(cell.getColSpan());
  cellContent.setRowSpan(cell.getRowSpan());
  processAction(cell,cellContent);
  processBookmark(cell,cellContent);
  processStyle(cell,cellContent);
  processVisibility(cell,cellContent);
  if (context.isInFactory()) {
    CellScriptExecutor.handleOnCreate((CellContent)cellContent,rowData,context);
  }
  startTOCEntry(cellContent);
  if (emitter != null) {
    emitter.startCell(cellContent);
  }
  for (int m=0; m < cell.getContentCount(); m++) {
    ReportItemDesign ri=cell.getContent(m);
    if (ri != null) {
      ri.accept(this.visitor,emitter);
    }
  }
  if (emitter != null) {
    emitter.endCell(cellContent);
  }
  finishTOCEntry();
  context.popContent();
}","/** 
 * execute a cell. the execution process is: <li> create a cell content <li> push the content into the stack <li> intialize the cell <li> process the action, bookmark, style, visibility <li> call onCreate if necessary <li> call emitter to start the cell <li> for each element in the cell, execute the element. <li> call emiter to close the cell <li> popup the cell.
 * @param rowContent row content
 * @param cell cell design
 * @param emitter output emitter
 */
private void executeCell(IRowContent rowContent,CellDesign cell,IContentEmitter emitter,IRowData rowData){
  ICellContent cellContent=report.createCellContent();
  assert(cellContent instanceof CellContent);
  context.pushContent(cellContent);
  initializeContent(rowContent,cell,cellContent);
  cellContent.setColumn(cell.getColumn());
  cellContent.setColSpan(cell.getColSpan());
  cellContent.setRowSpan(cell.getRowSpan());
  processAction(cell,cellContent);
  processBookmark(cell,cellContent);
  processStyle(cell,cellContent);
  processVisibility(cell,cellContent);
  if (context.isInFactory()) {
    CellScriptExecutor.handleOnCreate((CellContent)cellContent,rowData,context,true);
  }
  startTOCEntry(cellContent);
  if (emitter != null) {
    emitter.startCell(cellContent);
  }
  for (int m=0; m < cell.getContentCount(); m++) {
    ReportItemDesign ri=cell.getContent(m);
    if (ri != null) {
      ri.accept(this.visitor,emitter);
    }
  }
  if (emitter != null) {
    emitter.endCell(cellContent);
  }
  finishTOCEntry();
  context.popContent();
}",0.9983633387888708
78493,"/** 
 * execute the row. The execution process is: <li> create a row content <li> push it into the context <li> intialize the content. <li> process bookmark, action, style and visibility <li> call onCreate if necessary <li> call emitter to start the row <li> for each cell, execute the cell <li> call emitter to close the row <li> pop up the row.
 * @param rowId row id.
 * @param body table body.
 * @param row row design
 * @param emitter output emitter
 */
private void executeRow(int rowId,ITableBandContent body,RowDesign row,IContentEmitter emitter){
  IRowContent rowContent=report.createRowContent();
  rowContent.setRowID(rowId);
  assert(rowContent instanceof RowContent);
  context.pushContent(rowContent);
  initializeContent(body,row,rowContent);
  processAction(row,rowContent);
  processBookmark(row,rowContent);
  processStyle(row,rowContent);
  processVisibility(row,rowContent);
  IRowData rowData=null;
  IBaseQueryDefinition query=row.getQuery();
  if (query != null) {
    Collection rowExpressions=(query.getRowExpressions());
    IResultIterator rsIterator=((DteResultSet)rset).getResultIterator();
    rowData=new RowData(rsIterator,rowExpressions);
  }
  if (context.isInFactory()) {
    RowScriptExecutor.handleOnCreate((RowContent)rowContent,rowData,context);
  }
  startTOCEntry(rowContent);
  if (emitter != null) {
    emitter.startRow(rowContent);
  }
  for (int j=0; j < row.getCellCount(); j++) {
    CellDesign cell=row.getCell(j);
    if (cell != null) {
      executeCell(rowContent,cell,emitter,rowData);
    }
  }
  if (emitter != null) {
    emitter.endRow(rowContent);
  }
  finishTOCEntry();
  context.popContent();
}","/** 
 * execute the row. The execution process is: <li> create a row content <li> push it into the context <li> intialize the content. <li> process bookmark, action, style and visibility <li> call onCreate if necessary <li> call emitter to start the row <li> for each cell, execute the cell <li> call emitter to close the row <li> pop up the row.
 * @param rowId row id.
 * @param body table body.
 * @param row row design
 * @param emitter output emitter
 */
private void executeRow(int rowId,ITableBandContent body,RowDesign row,IContentEmitter emitter){
  IRowContent rowContent=report.createRowContent();
  rowContent.setRowID(rowId);
  assert(rowContent instanceof RowContent);
  context.pushContent(rowContent);
  initializeContent(body,row,rowContent);
  processAction(row,rowContent);
  processBookmark(row,rowContent);
  processStyle(row,rowContent);
  processVisibility(row,rowContent);
  IResultIterator rsIterator=((DteResultSet)rset).getResultIterator();
  IRowData rowData=null;
  if (context.isInFactory()) {
    rowData=new RowData(rsIterator,TableItemExecutor.getValueExpressions(row));
    RowScriptExecutor.handleOnCreate((RowContent)rowContent,rowData,context);
  }
  startTOCEntry(rowContent);
  if (emitter != null) {
    emitter.startRow(rowContent);
  }
  for (int j=0; j < row.getCellCount(); j++) {
    CellDesign cell=row.getCell(j);
    if (cell != null) {
      executeCell(rowContent,cell,emitter,rowData);
    }
  }
  if (emitter != null) {
    emitter.endRow(rowContent);
  }
  finishTOCEntry();
  context.popContent();
}",0.8657739022111491
78494,"/** 
 * execute a grid. The execution process is: <li> create a Table content <li> push it into the stack <li> execute the query and seek to the first record <li> process the table style, visiblity, action, bookmark <li> execute the onCreate if necessary. <li> call emitter to start the grid. <li> for each row, execute the row. <li> call emitter to close the grid. <li> close the query <li> popup the table.
 * @see org.eclipse.birt.report.engine.excutor.ReportItemExcutor#excute()
 */
public void execute(ReportItemDesign item,IContentEmitter emitter){
  GridItemDesign gridItem=(GridItemDesign)item;
  ITableContent tableObj=report.createTableContent();
  IContent parent=context.getContent();
  context.pushContent(tableObj);
  openResultSet(item);
  accessQuery(item,emitter);
  initializeContent(parent,item,tableObj);
  processAction(item,tableObj);
  processBookmark(item,tableObj);
  processStyle(item,tableObj);
  processVisibility(item,tableObj);
  for (int i=0; i < gridItem.getColumnCount(); i++) {
    ColumnDesign columnDesign=gridItem.getColumn(i);
    Column column=new Column();
    column.setStyleClass(columnDesign.getStyleName());
    column.setWidth(columnDesign.getWidth());
    tableObj.addColumn(column);
  }
  IBaseQueryDefinition query=item.getQuery();
  IRowData rowData=null;
  if (query != null) {
    Collection rowExpressions=(query.getRowExpressions());
    IResultIterator rsIterator=((DteResultSet)rset).getResultIterator();
    rowData=new RowData(rsIterator,rowExpressions);
  }
  if (context.isInFactory()) {
    GridScriptExecutor.handleOnCreate((TableContent)tableObj,rowData,context);
  }
  startTOCEntry(tableObj);
  if (emitter != null) {
    emitter.startTable(tableObj);
  }
  ITableBandContent body=report.createTableBody();
  initializeContent(tableObj,null,body);
  context.pushContent(body);
  startTOCEntry(body);
  if (emitter != null) {
    emitter.startTableBody(body);
  }
  for (int i=0; i < gridItem.getRowCount(); i++) {
    RowDesign row=gridItem.getRow(i);
    if (row != null) {
      executeRow(i,body,row,emitter);
    }
  }
  if (emitter != null) {
    emitter.endTableBody(body);
  }
  finishTOCEntry();
  context.popContent();
  if (emitter != null) {
    emitter.endTable(tableObj);
  }
  finishTOCEntry();
  closeResultSet();
  context.popContent();
}","/** 
 * execute a grid. The execution process is: <li> create a Table content <li> push it into the stack <li> execute the query and seek to the first record <li> process the table style, visiblity, action, bookmark <li> execute the onCreate if necessary. <li> call emitter to start the grid. <li> for each row, execute the row. <li> call emitter to close the grid. <li> close the query <li> popup the table.
 * @see org.eclipse.birt.report.engine.excutor.ReportItemExcutor#excute()
 */
public void execute(ReportItemDesign item,IContentEmitter emitter){
  GridItemDesign gridItem=(GridItemDesign)item;
  ITableContent tableObj=report.createTableContent();
  IContent parent=context.getContent();
  context.pushContent(tableObj);
  openResultSet(item);
  accessQuery(item,emitter);
  initializeContent(parent,item,tableObj);
  processAction(item,tableObj);
  processBookmark(item,tableObj);
  processStyle(item,tableObj);
  processVisibility(item,tableObj);
  for (int i=0; i < gridItem.getColumnCount(); i++) {
    ColumnDesign columnDesign=gridItem.getColumn(i);
    Column column=new Column();
    column.setStyleClass(columnDesign.getStyleName());
    column.setWidth(columnDesign.getWidth());
    tableObj.addColumn(column);
  }
  if (context.isInFactory()) {
    GridScriptExecutor.handleOnCreate((TableContent)tableObj,context);
  }
  startTOCEntry(tableObj);
  if (emitter != null) {
    emitter.startTable(tableObj);
  }
  ITableBandContent body=report.createTableBody();
  initializeContent(tableObj,null,body);
  context.pushContent(body);
  startTOCEntry(body);
  if (emitter != null) {
    emitter.startTableBody(body);
  }
  for (int i=0; i < gridItem.getRowCount(); i++) {
    RowDesign row=gridItem.getRow(i);
    if (row != null) {
      executeRow(i,body,row,emitter);
    }
  }
  if (emitter != null) {
    emitter.endTableBody(body);
  }
  finishTOCEntry();
  context.popContent();
  if (emitter != null) {
    emitter.endTable(tableObj);
  }
  finishTOCEntry();
  closeResultSet();
  context.popContent();
}",0.9176254026691212
78495,"protected void accessFooter(ListingDesign list,IContentEmitter emitter,IRowData rowData){
  accessListBand(((ListItemDesign)list).getFooter(),emitter,rowData);
}","protected void accessFooter(ListingDesign list,IContentEmitter emitter,IResultIterator rsIterator){
  accessListBand(((ListItemDesign)list).getFooter(),emitter,rsIterator);
}",0.8895522388059701
78496,"/** 
 * access list band, such as list header, group header, detail etc
 * @param band the list band
 * @param emitter the report emitter
 * @param expressionRow TODO
 * @param isDetail true if it is detail band
 */
private void accessListBand(ListBandDesign band,IContentEmitter emitter,IRowData rowData){
  if (band != null && band.getContentCount() > 0) {
    for (int i=0; i < band.getContentCount(); i++) {
      ReportItemDesign item=band.getContent(i);
      if (context.isInFactory()) {
      }
      if (needPageBreak) {
        needPageBreak=false;
      }
      if (item != null) {
        item.accept(this.visitor,emitter);
      }
    }
  }
}","/** 
 * access list band, such as list header, group header, detail etc
 * @param band the list band
 * @param emitter the report emitter
 * @param expressionRow TODO
 * @param isDetail true if it is detail band
 */
private void accessListBand(ListBandDesign band,IContentEmitter emitter,IResultIterator rsIterator){
  if (band != null && band.getContentCount() > 0) {
    for (int i=0; i < band.getContentCount(); i++) {
      ReportItemDesign item=band.getContent(i);
      if (context.isInFactory()) {
      }
      if (needPageBreak) {
        needPageBreak=false;
      }
      if (item != null) {
        item.accept(this.visitor,emitter);
      }
    }
  }
}",0.9712121212121212
78497,"protected void accessHeader(ListingDesign list,IContentEmitter emitter,IRowData rowData){
  accessListBand(((ListItemDesign)list).getHeader(),emitter,rowData);
}","protected void accessHeader(ListingDesign list,IContentEmitter emitter,IResultIterator rsIterator){
  accessListBand(((ListItemDesign)list).getHeader(),emitter,rsIterator);
}",0.8895522388059701
78498,"protected void accessDetail(ListingDesign list,IContentEmitter emitter,IRowData rowData){
  accessListBand(((ListItemDesign)list).getDetail(),emitter,rowData);
}","protected void accessDetail(ListingDesign list,IContentEmitter emitter,IResultIterator rsIterator){
  accessListBand(((ListItemDesign)list).getDetail(),emitter,rsIterator);
}",0.8895522388059701
78499,"/** 
 * create the footer band.
 * @param list listing design.
 * @param emitter output emitter
 */
abstract protected void accessFooter(ListingDesign list,IContentEmitter emitter,IRowData rowData);","/** 
 * create the footer band.
 * @param list listing design.
 * @param emitter output emitter
 */
abstract protected void accessFooter(ListingDesign list,IContentEmitter emitter,IResultIterator rsIterator);",0.9064039408866996
78500,"/** 
 * create the header band
 * @param list listing design
 * @param emitter output emitter
 */
abstract protected void accessHeader(ListingDesign list,IContentEmitter emitter,IRowData rowData);","/** 
 * create the header band
 * @param list listing design
 * @param emitter output emitter
 */
abstract protected void accessHeader(ListingDesign list,IContentEmitter emitter,IResultIterator rsIterator);",0.9054726368159204
78501,"/** 
 * access the query and create the contents. the execution process is: <li> the cursor is at the begin of result set. <li> call listing's onStart event <li> create the header <li> for each row: <ul> <li> call onRow event. <li> if the row start some groups, create the group header for that group. <li> create the detail row. <li> if the row end some groups, create the group footer for that group. </ul> <li> create the footer. <li> call the onFinish event.
 */
protected void accessQuery(ReportItemDesign design,IContentEmitter emitter){
  ListingDesign listing=(ListingDesign)design;
  rsetCursor=-1;
  outputEmitter=emitter;
  int groupCount=listing.getGroupCount();
  int NONE_GROUP=groupCount + 1;
  int groupIndex;
  int pageBreakInterval=listing.getPageBreakInterval();
  if (rset == null || rsetEmpty == true) {
    startTOCEntry(null);
    accessHeader(listing,outputEmitter,null);
    finishTOCEntry();
    startTOCEntry(null);
    accessFooter(listing,outputEmitter,null);
    finishTOCEntry();
    return;
  }
  IResultIterator rsIterator=((DteResultSet)rset).getResultIterator();
  IBaseQueryDefinition query=listing.getQuery();
  Collection rowExpressions=(query == null ? null : query.getRowExpressions());
  Collection beforeExpressions=(query == null ? null : query.getBeforeExpressions());
  Collection afterExpressions=(query == null ? null : query.getAfterExpressions());
  IRowData rowData=new RowData(rsIterator,rowExpressions);
  IRowData headerData=new RowData(rsIterator,beforeExpressions);
  IRowData footerData=new RowData(rsIterator,afterExpressions);
  startTOCEntry(null);
  accessHeader(listing,outputEmitter,headerData);
  finishTOCEntry();
  if (groupCount == 0) {
    do {
      rsetCursor++;
      startTOCEntry(null);
      accessDetail(listing,outputEmitter,rowData);
      finishTOCEntry();
      if (pageBreakInterval > 0) {
        if ((rsetCursor + 1) % pageBreakInterval == 0) {
          needPageBreak=true;
        }
      }
      if (rset.getEndingGroupLevel() == 0) {
        needPageBreak=false;
        startTOCEntry(null);
        accessFooter(listing,outputEmitter,footerData);
        finishTOCEntry();
      }
    }
 while (rset.next());
    return;
  }
  do {
    rsetCursor++;
    int startGroup=rset.getStartingGroupLevel();
    if (startGroup != NONE_GROUP) {
      groupIndex=startGroup - 1;
      if (groupIndex < 0) {
        groupIndex=0;
      }
      while (groupIndex < groupCount) {
        startGroupTOCEntry();
        startTOCEntry(null);
        accessGroupHeader(listing,groupIndex,outputEmitter);
        finishTOCEntry();
        groupIndex++;
      }
    }
    startGroupTOCEntry();
    accessDetail(listing,outputEmitter,rowData);
    finishGroupTOCEntry();
    int endGroup=rset.getEndingGroupLevel();
    if (endGroup != NONE_GROUP) {
      endGroup=endGroup - 1;
      if (endGroup < 0) {
        endGroup=0;
      }
      groupIndex=groupCount - 1;
      while (groupIndex >= endGroup) {
        startTOCEntry(null);
        accessGroupFooter(listing,groupIndex,outputEmitter);
        finishTOCEntry();
        finishGroupTOCEntry();
        groupIndex--;
      }
    }
    if (pageBreakInterval > 0) {
      if ((rsetCursor + 1) % pageBreakInterval == 0) {
        needPageBreak=true;
      }
    }
    if (rset.getEndingGroupLevel() == 0) {
      needPageBreak=false;
      startTOCEntry(null);
      accessFooter(listing,outputEmitter,footerData);
      finishTOCEntry();
    }
  }
 while (rset.next());
}","/** 
 * access the query and create the contents. the execution process is: <li> the cursor is at the begin of result set. <li> call listing's onStart event <li> create the header <li> for each row: <ul> <li> call onRow event. <li> if the row start some groups, create the group header for that group. <li> create the detail row. <li> if the row end some groups, create the group footer for that group. </ul> <li> create the footer. <li> call the onFinish event.
 */
protected void accessQuery(ReportItemDesign design,IContentEmitter emitter){
  ListingDesign listing=(ListingDesign)design;
  rsetCursor=-1;
  outputEmitter=emitter;
  int groupCount=listing.getGroupCount();
  int NONE_GROUP=groupCount + 1;
  int groupIndex;
  int pageBreakInterval=listing.getPageBreakInterval();
  if (rset == null || rsetEmpty == true) {
    startTOCEntry(null);
    accessHeader(listing,outputEmitter,null);
    finishTOCEntry();
    startTOCEntry(null);
    accessFooter(listing,outputEmitter,null);
    finishTOCEntry();
    return;
  }
  IResultIterator rsIterator=((DteResultSet)rset).getResultIterator();
  startTOCEntry(null);
  accessHeader(listing,outputEmitter,rsIterator);
  finishTOCEntry();
  if (groupCount == 0) {
    do {
      rsetCursor++;
      startTOCEntry(null);
      accessDetail(listing,outputEmitter,rsIterator);
      finishTOCEntry();
      if (pageBreakInterval > 0) {
        if ((rsetCursor + 1) % pageBreakInterval == 0) {
          needPageBreak=true;
        }
      }
      if (rset.getEndingGroupLevel() == 0) {
        needPageBreak=false;
        startTOCEntry(null);
        accessFooter(listing,outputEmitter,rsIterator);
        finishTOCEntry();
      }
    }
 while (rset.next());
    return;
  }
  do {
    rsetCursor++;
    int startGroup=rset.getStartingGroupLevel();
    if (startGroup != NONE_GROUP) {
      groupIndex=startGroup - 1;
      if (groupIndex < 0) {
        groupIndex=0;
      }
      while (groupIndex < groupCount) {
        startGroupTOCEntry();
        startTOCEntry(null);
        accessGroupHeader(listing,groupIndex,outputEmitter);
        finishTOCEntry();
        groupIndex++;
      }
    }
    startGroupTOCEntry();
    accessDetail(listing,outputEmitter,rsIterator);
    finishGroupTOCEntry();
    int endGroup=rset.getEndingGroupLevel();
    if (endGroup != NONE_GROUP) {
      endGroup=endGroup - 1;
      if (endGroup < 0) {
        endGroup=0;
      }
      groupIndex=groupCount - 1;
      while (groupIndex >= endGroup) {
        startTOCEntry(null);
        accessGroupFooter(listing,groupIndex,outputEmitter);
        finishTOCEntry();
        finishGroupTOCEntry();
        groupIndex--;
      }
    }
    if (pageBreakInterval > 0) {
      if ((rsetCursor + 1) % pageBreakInterval == 0) {
        needPageBreak=true;
      }
    }
    if (rset.getEndingGroupLevel() == 0) {
      needPageBreak=false;
      startTOCEntry(null);
      accessFooter(listing,outputEmitter,rsIterator);
      finishTOCEntry();
    }
  }
 while (rset.next());
}",0.9112444239347792
78502,"/** 
 * create detail band.
 * @param list listing design.
 * @param emitter output emitter
 */
abstract protected void accessDetail(ListingDesign list,IContentEmitter emitter,IRowData rowData);","/** 
 * create detail band.
 * @param list listing design.
 * @param emitter output emitter
 */
abstract protected void accessDetail(ListingDesign list,IContentEmitter emitter,IResultIterator rsIterator);",0.9045226130653268
78503,"/** 
 * Gets the design cheet sheet file path.
 * @return the design cheet sheet file path
 */
public String getCheetSheet(){
  return getStringProperty(ReportDesign.CHEET_SHEET_PROP);
}","/** 
 * Gets the design cheat sheet file path.
 * @return the design cheat sheet file path
 * @deprecated by {@link #getCheatSheet()}
 */
public String getCheetSheet(){
  return getCheatSheet();
}",0.7486910994764397
78504,"/** 
 * Sets the design cheet sheet file path.
 * @param cheetSheet the design cheet sheet file path to set
 * @throws SemanticException if the property is locked or not defined on this design.
 */
public void setCheetSheet(String cheetSheet) throws SemanticException {
  setStringProperty(ReportDesign.CHEET_SHEET_PROP,cheetSheet);
}","/** 
 * Sets the design cheat sheet file path.
 * @param cheatSheet the design cheat sheet file path to set
 * @throws SemanticException if the property is locked or not defined on this design.
 * @deprecated by {@link #setCheatSheet(String)}
 */
public void setCheetSheet(String cheatSheet) throws SemanticException {
  setCheatSheet(cheatSheet);
}",0.7642752562225475
78505,"/** 
 * handle the hyperlink, bookmark and drillthrough
 * @param area			the area which may need to handle the hyperlink action
 */
private void handleHyperlinkAction(IArea area){
  IContent content=area.getContent();
  if (null != content) {
    IHyperlinkAction hlAction=content.getHyperlinkAction();
    if (null != hlAction)     try {
switch (hlAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
        writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(area.getAbsoluteX()),layoutPointY2PDF(area.getAbsoluteY() + area.getHeight()),layoutPointX2PDF(area.getAbsoluteX() + area.getWidth()),layoutPointY2PDF(area.getAbsoluteY()),createPdfAction(hlAction.getHyperlink(),hlAction.getBookmark(),hlAction.getTargetWindow(),IHyperlinkAction.ACTION_BOOKMARK)));
      break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
    String baseURL=null;
  if (context != null) {
    baseURL=context.getBaseURL();
  }
StringBuffer link=new StringBuffer();
String reportName=hlAction.getReportName();
if (reportName != null && !reportName.equals(""String_Node_Str"")) {
String format=hlAction.getFormat();
if (""String_Node_Str"".equalsIgnoreCase(format)) {
link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
}
link.append(""String_Node_Str"");
try {
link.append(URLEncoder.encode(reportName,""String_Node_Str""));
}
 catch (UnsupportedEncodingException e1) {
}
if (format != null && format.length() > 0) {
link.append(""String_Node_Str"" + format);
}
if (hlAction.getParameterBindings() != null) {
Iterator paramsIte=hlAction.getParameterBindings().entrySet().iterator();
while (paramsIte.hasNext()) {
  Map.Entry entry=(Map.Entry)paramsIte.next();
  try {
    link.append(""String_Node_Str"" + URLEncoder.encode((String)entry.getKey(),""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode((String)entry.getValue(),""String_Node_Str""));
  }
 catch (  UnsupportedEncodingException e) {
  }
}
}
}
if (hlAction.getBookmark() != null) {
link.append(""String_Node_Str"");
link.append(hlAction.getBookmark());
}
writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(area.getAbsoluteX()),layoutPointY2PDF(area.getAbsoluteY() + area.getHeight()),layoutPointX2PDF(area.getAbsoluteX() + area.getWidth()),layoutPointY2PDF(area.getAbsoluteY()),createPdfAction(link.toString(),null,hlAction.getTargetWindow(),IHyperlinkAction.ACTION_DRILLTHROUGH)));
break;
case IHyperlinkAction.ACTION_HYPERLINK:
writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(area.getAbsoluteX()),layoutPointY2PDF(area.getAbsoluteY() + area.getHeight()),layoutPointX2PDF(area.getAbsoluteX() + area.getWidth()),layoutPointY2PDF(area.getAbsoluteY()),createPdfAction(hlAction.getHyperlink(),null,hlAction.getTargetWindow(),IHyperlinkAction.ACTION_HYPERLINK)));
break;
}
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getMessage(),e);
}
}
}","/** 
 * handle the hyperlink, bookmark and drillthrough
 * @param area			the area which may need to handle the hyperlink action
 */
private void handleHyperlinkAction(IArea area){
  IContent content=area.getContent();
  if (null != content) {
    IHyperlinkAction hlAction=content.getHyperlinkAction();
    if (null != hlAction)     try {
switch (hlAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
        writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(area.getAbsoluteX()),layoutPointY2PDF(area.getAbsoluteY() + area.getHeight()),layoutPointX2PDF(area.getAbsoluteX() + area.getWidth()),layoutPointY2PDF(area.getAbsoluteY()),createPdfAction(hlAction.getHyperlink(),hlAction.getBookmark(),hlAction.getTargetWindow(),IHyperlinkAction.ACTION_BOOKMARK)));
      break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
    String baseURL=null;
  if (context != null) {
    baseURL=context.getBaseURL();
  }
StringBuffer link=new StringBuffer();
String reportName=hlAction.getReportName();
if (reportName != null && !reportName.equals(""String_Node_Str"")) {
String format=hlAction.getFormat();
if (""String_Node_Str"".equalsIgnoreCase(format)) {
link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
}
 else if (""String_Node_Str"".equalsIgnoreCase(format)) {
link.append(baseURL);
}
link.append(""String_Node_Str"");
try {
link.append(URLEncoder.encode(reportName,""String_Node_Str""));
}
 catch (UnsupportedEncodingException e1) {
}
if (format != null && format.length() > 0) {
link.append(""String_Node_Str"" + format);
}
if (hlAction.getParameterBindings() != null) {
Iterator paramsIte=hlAction.getParameterBindings().entrySet().iterator();
while (paramsIte.hasNext()) {
  Map.Entry entry=(Map.Entry)paramsIte.next();
  try {
    link.append(""String_Node_Str"" + URLEncoder.encode((String)entry.getKey(),""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode((String)entry.getValue(),""String_Node_Str""));
  }
 catch (  UnsupportedEncodingException e) {
  }
}
}
}
if (hlAction.getBookmark() != null) {
link.append(""String_Node_Str"");
link.append(hlAction.getBookmark());
}
writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(area.getAbsoluteX()),layoutPointY2PDF(area.getAbsoluteY() + area.getHeight()),layoutPointX2PDF(area.getAbsoluteX() + area.getWidth()),layoutPointY2PDF(area.getAbsoluteY()),createPdfAction(link.toString(),null,hlAction.getTargetWindow(),IHyperlinkAction.ACTION_DRILLTHROUGH)));
break;
case IHyperlinkAction.ACTION_HYPERLINK:
writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(area.getAbsoluteX()),layoutPointY2PDF(area.getAbsoluteY() + area.getHeight()),layoutPointX2PDF(area.getAbsoluteX() + area.getWidth()),layoutPointY2PDF(area.getAbsoluteY()),createPdfAction(hlAction.getHyperlink(),null,hlAction.getTargetWindow(),IHyperlinkAction.ACTION_HYPERLINK)));
break;
}
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getMessage(),e);
}
}
}",0.9860869565217392
78506,"/** 
 * access list band, such as list header, group header, detail etc
 * @param band the list band
 * @param emitter the report emitter
 * @param expressionRow TODO
 * @param isDetail true if it is detail band
 */
private void accessListBand(ListBandDesign band,IContentEmitter emitter,IResultIterator rsIterator){
  if (band != null && band.getContentCount() > 0) {
    IContainerContent bandContent=report.createContainerContent();
    assert(bandContent instanceof ContainerContent);
    IContent parent=context.getContent();
    context.pushContent(bandContent);
    initializeContent(parent,band,bandContent);
    for (int i=0; i < band.getContentCount(); i++) {
      ReportItemDesign item=band.getContent(i);
      if (context.isInFactory()) {
      }
      if (needPageBreak) {
        needPageBreak=false;
      }
      if (item != null) {
        item.accept(this.visitor,emitter);
      }
    }
    context.popContent();
  }
}","/** 
 * access list band, such as list header, group header, detail etc
 * @param band the list band
 * @param emitter the report emitter
 * @param expressionRow TODO
 * @param isDetail true if it is detail band
 */
private void accessListBand(ListBandDesign band,IContentEmitter emitter,IResultIterator rsIterator){
  if (band != null && band.getContentCount() > 0) {
    for (int i=0; i < band.getContentCount(); i++) {
      ReportItemDesign item=band.getContent(i);
      if (context.isInFactory()) {
      }
      if (needPageBreak) {
        needPageBreak=false;
      }
      if (item != null) {
        item.accept(this.visitor,emitter);
      }
    }
  }
}",0.8291770573566085
78507,"public DataID getDataID(){
  if (rset != null) {
    return new DataID(rset.getID(),rset.getCurrentPosition());
  }
  return null;
}","public DataID getDataID(){
  IResultSet curRset=rset;
  if (curRset == null) {
    curRset=context.getDataEngine().getCurrentRS();
  }
  if (curRset != null) {
    return new DataID(curRset.getID(),curRset.getCurrentPosition());
  }
  return null;
}",0.6771653543307087
78508,"/** 
 * Creates a new page in the pagebook for a particular part. This page will be made visible whenever the part is active, and will be destroyed with a call to <code>doDestroyPage</code>.
 * @param part the input part
 * @return the record describing a new page for this view
 * @see #doDestroyPage
 */
protected PageRec doCreatePage(IWorkbenchPart part){
  if (part instanceof AbstractMultiPageLayoutEditor) {
    IEditorPart editor=UIUtil.getActiveEditor(true);
    if (editor != null) {
      Object fileAdapter=editor.getEditorInput().getAdapter(IFile.class);
      if (fileAdapter != null) {
        LibraryExplorerTreeViewPage page=getPage(fileAdapter,editor);
        initPage(page);
        page.createControl(getPageBook());
        return new PageRec(part,page);
      }
    }
  }
  return null;
}","/** 
 * Creates a new page in the pagebook for a particular part. This page will be made visible whenever the part is active, and will be destroyed with a call to <code>doDestroyPage</code>.
 * @param part the input part
 * @return the record describing a new page for this view
 * @see #doDestroyPage
 */
protected PageRec doCreatePage(IWorkbenchPart part){
  if (part instanceof AbstractMultiPageLayoutEditor) {
    IEditorPart editor=UIUtil.getActiveEditor(true);
    if (editor != null) {
      Object fileAdapter=editor.getEditorInput().getAdapter(IFile.class);
      LibraryExplorerTreeViewPage page=getPage(fileAdapter,editor);
      initPage(page);
      page.createControl(getPageBook());
      return new PageRec(part,page);
    }
  }
  return null;
}",0.9522597071928708
78509,"public String getDisplayText(Object element){
  if (element instanceof Object[]) {
    if (element instanceof Operator[]) {
      if (element == OPERATORS_ASSIGNMENT) {
        return DISPLAY_TEXT_ASSIGNMENT;
      }
 else       if (element == OPERATORS_COMPARISON) {
        return DISPLAY_TEXT_COMPARISON;
      }
 else       if (element == OPERATORS_COMPUTATIONAL) {
        return DISPLAY_TEXT_COMPUTATIONAL;
      }
 else       if (element == OPERATORS_LOGICAL) {
        return DISPLAY_TEXT_LOGICAL;
      }
    }
 else     if (element instanceof ILocalizableInfo[]) {
      ILocalizableInfo info=((ILocalizableInfo[])element)[1];
      StringBuffer displayText=new StringBuffer(info.getName());
      if (info instanceof IMethodInfo) {
        IMethodInfo method=(IMethodInfo)info;
        displayText.append(""String_Node_Str"");
        boolean isFirst=true;
        IArgumentInfoList arguments=(IArgumentInfoList)method.argumentListIterator().next();
        for (Iterator iter=arguments.argumentsIterator(); iter.hasNext(); ) {
          IArgumentInfo argInfo=(IArgumentInfo)iter.next();
          if (!isFirst) {
            displayText.append(""String_Node_Str"");
          }
          isFirst=false;
          if (IArgumentInfo.OPTIONAL_ARGUMENT_NAME.equals(argInfo.getName())) {
            displayText.append(argInfo.getDisplayName());
          }
 else {
            displayText.append(argInfo.getType());
          }
        }
        displayText.append(""String_Node_Str"");
        String returnType=method.getReturnType();
        if (returnType == null) {
          returnType=""String_Node_Str"";
        }
        displayText.append(returnType);
      }
 else       if (info instanceof IMemberInfo) {
        displayText.append(""String_Node_Str"");
        displayText.append(((IMemberInfo)info).getDataType());
      }
      return displayText.toString();
    }
    return ALL;
  }
 else   if (element instanceof String) {
    return (String)element;
  }
 else   if (element instanceof Operator) {
    return ((Operator)element).symbol;
  }
 else   if (element instanceof DesignElementHandle) {
    return ((DesignElementHandle)element).getQualifiedName();
  }
 else   if (element instanceof DataSetItemModel) {
    return ((DataSetItemModel)element).getDisplayName();
  }
  return element.toString();
}","public String getDisplayText(Object element){
  if (element instanceof Object[]) {
    if (element instanceof Operator[]) {
      if (element == OPERATORS_ASSIGNMENT) {
        return DISPLAY_TEXT_ASSIGNMENT;
      }
 else       if (element == OPERATORS_COMPARISON) {
        return DISPLAY_TEXT_COMPARISON;
      }
 else       if (element == OPERATORS_COMPUTATIONAL) {
        return DISPLAY_TEXT_COMPUTATIONAL;
      }
 else       if (element == OPERATORS_LOGICAL) {
        return DISPLAY_TEXT_LOGICAL;
      }
    }
 else     if (element instanceof ILocalizableInfo[]) {
      ILocalizableInfo info=((ILocalizableInfo[])element)[1];
      StringBuffer displayText=new StringBuffer(info.getName());
      if (info instanceof IMethodInfo) {
        IMethodInfo method=(IMethodInfo)info;
        displayText.append(""String_Node_Str"");
        boolean isFirst=true;
        Iterator argumentListIter=method.argumentListIterator();
        IArgumentInfoList arguments=(IArgumentInfoList)argumentListIter.next();
        for (Iterator iter=arguments.argumentsIterator(); iter.hasNext(); ) {
          IArgumentInfo argInfo=(IArgumentInfo)iter.next();
          if (!isFirst) {
            displayText.append(""String_Node_Str"");
          }
          isFirst=false;
          displayText.append(argInfo.getDisplayName());
        }
        displayText.append(""String_Node_Str"");
        if (!argumentListIter.hasNext()) {
          displayText.append(""String_Node_Str"");
          String returnType=method.getReturnType();
          if (returnType == null) {
            returnType=""String_Node_Str"";
          }
          displayText.append(returnType);
        }
      }
 else       if (info instanceof IMemberInfo) {
        displayText.append(""String_Node_Str"");
        displayText.append(((IMemberInfo)info).getDataType());
      }
      return displayText.toString();
    }
    return ALL;
  }
 else   if (element instanceof String) {
    return (String)element;
  }
 else   if (element instanceof Operator) {
    return ((Operator)element).symbol;
  }
 else   if (element instanceof DesignElementHandle) {
    return ((DesignElementHandle)element).getQualifiedName();
  }
 else   if (element instanceof DataSetItemModel) {
    return ((DataSetItemModel)element).getDisplayName();
  }
  return element.toString();
}",0.9049364087087736
78510,"public boolean isEnabled(){
  if (getSelectedElement() == null) {
    return false;
  }
  return super.isEnabled() && getSelectedElement().isTemplateParameterValue() && !(getSelectedElement().getContainer() instanceof SimpleMasterPageHandle)&& !(getSelectedElement().getRoot() instanceof LibraryHandle);
}","public boolean isEnabled(){
  if (getSelectedElement() == null) {
    return false;
  }
  return super.isEnabled() && getSelectedElement().canTransformToTemplate() && getSelectedElement().isTemplateParameterValue()&& !(getSelectedElement().getContainer() instanceof SimpleMasterPageHandle)&& !(getSelectedElement().getRoot() instanceof LibraryHandle);
}",0.917933130699088
78511,"public DataExtractionTask(ReportEngine engine,IReportRunnable runnable,ReportDocumentReader reader) throws EngineException {
  super(engine,runnable);
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  report=new ReportParser().parse(((ReportRunnable)runnable).getReport());
  executionContext.setReport(report);
  setParameterValues(reportDocReader.getParameterValues());
  IDataEngine dataEngine=executionContext.getDataEngine();
  dataEngine.prepare(report,appContext);
}","public DataExtractionTask(ReportEngine engine,IReportRunnable runnable,ReportDocumentReader reader) throws EngineException {
  super(engine,runnable);
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  try {
    ReportParser parser=new ReportParser();
    ReportDesignHandle reportDesign=parser.getDesignHandle(reader.getDesignName(),reader.getDesignStream());
    report=parser.parse(reportDesign);
  }
 catch (  DesignFileException e) {
    e.printStackTrace();
  }
  executionContext.setReport(report);
  setParameterValues(reportDocReader.getParameterValues());
  IDataEngine dataEngine=executionContext.getDataEngine();
  dataEngine.prepare(report,appContext);
}",0.7850467289719626
78512,"/** 
 * execute the report
 */
public void execute(Report report,IContentEmitter emitter){
  BirtTimer timer=new BirtTimer();
  context.setReport(report);
  IReportContent reportContent=ContentFactory.createReportContent(report);
  context.setReportContent(reportContent);
  TOCBuilder tocBuilder=new TOCBuilder(reportContent.getTOC());
  context.setTOCBuilder(tocBuilder);
  timer.restart();
  context.getDataEngine().prepare(report,context.getAppContext());
  timer.stop();
  timer.logTimeTaken(logger,Level.FINE,context.getTaskIDString(),""String_Node_Str"");
  timer.restart();
  if (emitter != null) {
    emitter.start(reportContent);
  }
  if (report.getContentCount() > 0) {
    for (int i=0; i < report.getContentCount(); i++) {
      report.getContent(i).accept(builder,emitter);
    }
  }
  if (emitter != null) {
    emitter.end(reportContent);
  }
  timer.stop();
  timer.logTimeTaken(logger,Level.FINE,context.getTaskIDString(),""String_Node_Str"");
}","/** 
 * execute the report
 */
public void execute(Report report,IContentEmitter emitter){
  BirtTimer timer=new BirtTimer();
  context.setReport(report);
  IReportContent reportContent=ContentFactory.createReportContent(report);
  context.setReportContent(reportContent);
  TOCBuilder tocBuilder=new TOCBuilder(reportContent.getTOC());
  context.setTOCBuilder(tocBuilder);
  timer.restart();
  context.getDataEngine().prepare(report,context.getAppContext());
  timer.stop();
  timer.logTimeTaken(logger,Level.FINE,context.getTaskIDString(),""String_Node_Str"");
  timer.restart();
  if (emitter != null) {
    emitter.start(reportContent);
  }
  IContent dummyReportContent=new LabelContent((ReportContent)reportContent);
  dummyReportContent.setStyleClass(report.getRootStyleName());
  context.pushContent(dummyReportContent);
  if (report.getContentCount() > 0) {
    for (int i=0; i < report.getContentCount(); i++) {
      report.getContent(i).accept(builder,emitter);
    }
  }
  context.popContent();
  if (emitter != null) {
    emitter.end(reportContent);
  }
  timer.stop();
  timer.logTimeTaken(logger,Level.FINE,context.getTaskIDString(),""String_Node_Str"");
}",0.9023474178403756
78513,"private ArrayList getAncestors(IContent content){
  ArrayList list=new ArrayList();
  while (content != null) {
    list.add(content);
    content=(IContent)content.getParent();
  }
  return list;
}","private ArrayList getAncestors(IContent content){
  ArrayList list=new ArrayList();
  while (content.getParent() != null) {
    list.add(content);
    content=(IContent)content.getParent();
  }
  return list;
}",0.9705882352941176
78514,"/** 
 * execute the row. The execution process is: <li> create a row content <li> push it into the context <li> intialize the content. <li> process bookmark, action, style and visibility <li> call onCreate if necessary <li> call emitter to start the row <li> for each cell, execute the cell <li> call emitter to close the row <li> pop up the row.
 * @param rowId row id.
 * @param body table body.
 * @param row row design
 * @param emitter output emitter
 */
private void executeRow(int rowId,ITableBandContent body,RowDesign row,IContentEmitter emitter){
  IRowContent rowContent=report.createRowContent();
  rowContent.setRowID(rowId);
  assert(rowContent instanceof RowContent);
  context.pushContent(rowContent);
  initializeContent(body,row,rowContent);
  processAction(row,rowContent);
  processBookmark(row,rowContent);
  processStyle(row,rowContent);
  processVisibility(row,rowContent);
  IResultIterator rsIterator=((DteResultSet)rset).getResultIterator();
  IRowData rowData=null;
  if (context.isInFactory()) {
    rowData=new RowData(rsIterator,TableItemExecutor.getValueExpressions(row));
    RowScriptExecutor.handleOnCreate((RowContent)rowContent,rowData,context);
  }
  startTOCEntry(rowContent);
  if (emitter != null) {
    emitter.startRow(rowContent);
  }
  for (int j=0; j < row.getCellCount(); j++) {
    CellDesign cell=row.getCell(j);
    if (cell != null) {
      executeCell(rowContent,cell,emitter,rowData);
    }
  }
  if (emitter != null) {
    emitter.endRow(rowContent);
  }
  finishTOCEntry();
  context.popContent();
}","/** 
 * execute the row. The execution process is: <li> create a row content <li> push it into the context <li> intialize the content. <li> process bookmark, action, style and visibility <li> call onCreate if necessary <li> call emitter to start the row <li> for each cell, execute the cell <li> call emitter to close the row <li> pop up the row.
 * @param rowId row id.
 * @param body table body.
 * @param row row design
 * @param emitter output emitter
 */
private void executeRow(int rowId,ITableBandContent body,RowDesign row,IContentEmitter emitter){
  IRowContent rowContent=report.createRowContent();
  rowContent.setRowID(rowId);
  assert(rowContent instanceof RowContent);
  context.pushContent(rowContent);
  initializeContent(body,row,rowContent);
  processAction(row,rowContent);
  processBookmark(row,rowContent);
  processStyle(row,rowContent);
  processVisibility(row,rowContent);
  IRowData rowData=null;
  if (context.isInFactory()) {
    if (rset != null) {
      IResultIterator rsIterator=((DteResultSet)rset).getResultIterator();
      rowData=new RowData(rsIterator,TableItemExecutor.getValueExpressions(row));
    }
    RowScriptExecutor.handleOnCreate((RowContent)rowContent,rowData,context);
  }
  startTOCEntry(rowContent);
  if (emitter != null) {
    emitter.startRow(rowContent);
  }
  for (int j=0; j < row.getCellCount(); j++) {
    CellDesign cell=row.getCell(j);
    if (cell != null) {
      executeCell(rowContent,cell,emitter,rowData);
    }
  }
  if (emitter != null) {
    emitter.endRow(rowContent);
  }
  finishTOCEntry();
  context.popContent();
}",0.9153405474220242
78515,"private Object eval(String expression) throws ScriptException {
  if (valueExpressions == null)   return null;
  Iterator exprIt=valueExpressions.iterator();
  while (exprIt.hasNext()) {
    IBaseExpression expr=(IBaseExpression)exprIt.next();
    if (!(expr instanceof IScriptExpression))     continue;
    String rowExpr=((IScriptExpression)expr).getText();
    if (expression.equals(rowExpr)) {
      try {
        return rsIterator.getValue(expr);
      }
 catch (      BirtException e) {
        throw new ScriptException(e.getLocalizedMessage());
      }
    }
  }
  return null;
}","private Object eval(String expression) throws ScriptException {
  if (valueExpressions == null || rsIterator == null)   return null;
  Iterator exprIt=valueExpressions.iterator();
  while (exprIt.hasNext()) {
    IBaseExpression expr=(IBaseExpression)exprIt.next();
    if (!(expr instanceof IScriptExpression))     continue;
    String rowExpr=((IScriptExpression)expr).getText();
    if (expression.equals(rowExpr)) {
      try {
        return rsIterator.getValue(expr);
      }
 catch (      BirtException e) {
        throw new ScriptException(e.getLocalizedMessage());
      }
    }
  }
  return null;
}",0.9816053511705686
78516,"public Object getExpressionValue(int index) throws ScriptException {
  if (index <= valueExpressions.size()) {
    IBaseExpression expr=(IBaseExpression)valueExpressions.get(index - 1);
    if (expr == null)     return null;
    try {
      return rsIterator.getValue(expr);
    }
 catch (    BirtException e) {
      throw new ScriptException(e.getLocalizedMessage());
    }
  }
  return null;
}","public Object getExpressionValue(int index) throws ScriptException {
  if (valueExpressions == null || rsIterator == null)   return null;
  if (index <= valueExpressions.size()) {
    IBaseExpression expr=(IBaseExpression)valueExpressions.get(index - 1);
    if (expr == null)     return null;
    try {
      return rsIterator.getValue(expr);
    }
 catch (    BirtException e) {
      throw new ScriptException(e.getLocalizedMessage());
    }
  }
  return null;
}",0.9198606271777005
78517,"/** 
 * @param rowIndex
 * @throws IOException
 */
private void saveExprOfCurrRow(int lastRowIndex,int currIndex) throws IOException {
  saveNullRowsBetween(lastRowIndex,currIndex);
  Set keySet=exprValueMap.keySet();
  String[] exprIDs=(String[])keySet.toArray(new String[0]);
  int size=exprIDs.length;
  IOUtil.writeInt(dos,size);
  for (int i=0; i < size; i++) {
    String exprID=exprIDs[i];
    Object exprValue=exprValueMap.get(exprID);
    IOUtil.writeString(dos,exprID);
    IOUtil.writeObject(dos,exprValue);
  }
}","/** 
 * @param rowIndex
 * @throws IOException
 */
private void saveExprOfCurrRow(int lastRowIndex,int currIndex) throws IOException {
  Set keySet=exprValueMap.keySet();
  String[] exprIDs=(String[])keySet.toArray(new String[0]);
  int size=exprIDs.length;
  IOUtil.writeInt(dos,size);
  for (int i=0; i < size; i++) {
    String exprID=exprIDs[i];
    Object exprValue=exprValueMap.get(exprID);
    IOUtil.writeString(dos,exprID);
    IOUtil.writeObject(dos,exprValue);
  }
  saveNullRowsBetween(lastRowIndex,currIndex);
}",0.9103053435114504
78518,"/** 
 * Do the second pass
 * @param N
 * @return
 */
private boolean doSecondPass(){
  secondPassRowNumberCounter++;
  if (qualifiedRowCounter < N) {
    for (int i=0; i < N; i++) {
      if (rowIdList[i] == secondPassRowNumberCounter) {
        qualifiedRowCounter++;
        reset();
        return true;
      }
    }
    return false;
  }
 else {
    reset();
    return false;
  }
}","/** 
 * Do the second pass
 * @param N
 * @return
 */
private boolean doSecondPass(){
  secondPassRowNumberCounter++;
  if (secondPassRowNumberCounter > this.filterPassController.getSecondPassRowCount())   this.filterPassController.setSecondPassRowCount(secondPassRowNumberCounter);
 else   this.secondPassRowNumberCounter=this.filterPassController.getSecondPassRowCount();
  if (qualifiedRowCounter < N) {
    for (int i=0; i < N; i++) {
      if (rowIdList[i] == secondPassRowNumberCounter) {
        qualifiedRowCounter++;
        reset();
        return true;
      }
    }
    return false;
  }
 else {
    reset();
    return false;
  }
}",0.751937984496124
78519,"/** 
 * Do the first pass. In the first pass we maintain a value list and a row id list that will host all top/bottom N values/rowIds so that in pass 2 we can use them to filter rows out.
 * @param value
 * @return
 * @throws DataException
 */
private boolean doFirstPass(Object value) throws DataException {
  firstPassRowNumberCounter++;
  if (valueList == null) {
    valueList=new Object[N];
    rowIdList=new int[N];
  }
  populateValueListAndRowIdList(value,N);
  return false;
}","/** 
 * Do the first pass. In the first pass we maintain a value list and a row id list that will host all top/bottom N values/rowIds so that in pass 2 we can use them to filter rows out.
 * @param value
 * @return
 * @throws DataException
 */
private boolean doFirstPass(Object value) throws DataException {
  firstPassRowNumberCounter++;
  if (valueList == null) {
    valueList=new Object[N];
    rowIdList=new int[N];
  }
  populateValueListAndRowIdList(value,N);
  return true;
}",0.9927760577915375
78520,"/** 
 * test abnormal input arguments
 */
public void testReportDocumentAbnormal(){
  String path=getBaseFolder() + System.getProperty(""String_Node_Str"");
  String report_design=path + INPUT_FOLDER + System.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
  String report_document=path + OUTPUT_FOLDER + System.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
  try {
    createReportDocument(report_design,report_document);
    IDocArchiveReader archive=new FileArchiveReader(report_document);
    IReportDocument reportDoc=engine.openReportDocument(report_document);
    TOCNode tocNode;
    tocNode=(TOCNode)reportDoc.findTOC(null);
    assertEquals(""String_Node_Str"",""String_Node_Str"",tocNode.getDisplayString());
    tocNode=(TOCNode)reportDoc.findTOC(""String_Node_Str"");
    assertNull(""String_Node_Str"",tocNode);
    tocNode=(TOCNode)reportDoc.findTOC(""String_Node_Str"");
    assertNull(""String_Node_Str"",tocNode);
    tocNode=(TOCNode)reportDoc.findTOC(""String_Node_Str"");
    assertNull(""String_Node_Str"",tocNode);
    List children;
    children=reportDoc.getChildren(null);
    assertNotNull(children);
    assertEquals(""String_Node_Str"",1,children.size());
    children=reportDoc.getChildren(""String_Node_Str"");
    assertNull(""String_Node_Str"",children);
    children=reportDoc.getChildren(""String_Node_Str"");
    assertNull(""String_Node_Str"",children);
    children=reportDoc.getChildren(""String_Node_Str"");
    assertNull(""String_Node_Str"",children);
    long pageNum;
    String bookmark=null;
    pageNum=reportDoc.getPageNumber(bookmark);
    assertEquals(""String_Node_Str"",-1,pageNum);
    bookmark=""String_Node_Str"";
    pageNum=reportDoc.getPageNumber(bookmark);
    assertEquals(""String_Node_Str"",-1,pageNum);
    bookmark=""String_Node_Str"";
    pageNum=reportDoc.getPageNumber(bookmark);
    assertEquals(""String_Node_Str"",-1,pageNum);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * test abnormal input arguments
 */
public void testReportDocumentAbnormal(){
  String path=getBaseFolder() + System.getProperty(""String_Node_Str"");
  String report_design=path + INPUT_FOLDER + System.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
  String report_document=path + OUTPUT_FOLDER + System.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
  try {
    createReportDocument(report_design,report_document);
    IDocArchiveReader archive=new FileArchiveReader(report_document);
    IReportDocument reportDoc=engine.openReportDocument(report_document);
    TOCNode tocNode;
    tocNode=(TOCNode)reportDoc.findTOC(null);
    assertEquals(""String_Node_Str"",null,tocNode.getDisplayString());
    tocNode=(TOCNode)reportDoc.findTOC(""String_Node_Str"");
    assertNull(""String_Node_Str"",tocNode);
    tocNode=(TOCNode)reportDoc.findTOC(""String_Node_Str"");
    assertNull(""String_Node_Str"",tocNode);
    tocNode=(TOCNode)reportDoc.findTOC(""String_Node_Str"");
    assertNull(""String_Node_Str"",tocNode);
    List children;
    children=reportDoc.getChildren(null);
    assertNotNull(children);
    assertEquals(""String_Node_Str"",1,children.size());
    children=reportDoc.getChildren(""String_Node_Str"");
    assertNull(""String_Node_Str"",children);
    children=reportDoc.getChildren(""String_Node_Str"");
    assertNull(""String_Node_Str"",children);
    children=reportDoc.getChildren(""String_Node_Str"");
    assertNull(""String_Node_Str"",children);
    long pageNum;
    String bookmark=null;
    pageNum=reportDoc.getPageNumber(bookmark);
    assertEquals(""String_Node_Str"",-1,pageNum);
    bookmark=""String_Node_Str"";
    pageNum=reportDoc.getPageNumber(bookmark);
    assertEquals(""String_Node_Str"",-1,pageNum);
    bookmark=""String_Node_Str"";
    pageNum=reportDoc.getPageNumber(bookmark);
    assertEquals(""String_Node_Str"",-1,pageNum);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9945184025058732
78521,"/** 
 * test informations which should be contained by report document
 */
public void testReportDocument(){
  String path=getBaseFolder() + System.getProperty(""String_Node_Str"");
  String report_design=path + INPUT_FOLDER + System.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
  String report_document=path + OUTPUT_FOLDER + System.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
  try {
    createReportDocument1(report_design,report_document);
    IDocArchiveReader archive=new FileArchiveReader(report_document);
    IReportDocument reportDoc=engine.openReportDocument(report_document);
    TOCNode root, tableNode, headerNode, groupNode, detailNode, footerNode;
    root=reportDoc.findTOC(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",root);
    assertNotNull(""String_Node_Str"",root.getChildren());
    tableNode=(TOCNode)root.getChildren().get(0);
    assertNotNull(""String_Node_Str"",tableNode);
    assertEquals(""String_Node_Str"",""String_Node_Str"",tableNode.getDisplayString());
    assertNotNull(""String_Node_Str"",tableNode.getChildren());
    assertEquals(""String_Node_Str"",6,tableNode.getChildren().size());
    headerNode=(TOCNode)tableNode.getChildren().get(0);
    groupNode=(TOCNode)((TOCNode)tableNode.getChildren().get(1)).getChildren().get(0);
    footerNode=(TOCNode)tableNode.getChildren().get(5);
    assertNotNull(""String_Node_Str"",headerNode);
    assertNotNull(""String_Node_Str"",groupNode);
    assertNotNull(""String_Node_Str"",footerNode);
    assertEquals(""String_Node_Str"",""String_Node_Str"",headerNode.getDisplayString());
    assertEquals(""String_Node_Str"",""String_Node_Str"",groupNode.getDisplayString());
    assertEquals(""String_Node_Str"",""String_Node_Str"",footerNode.getDisplayString());
    assertNotNull(""String_Node_Str"",groupNode.getChildren());
    detailNode=(TOCNode)((TOCNode)tableNode.getChildren().get(1)).getChildren().get(1);
    assertEquals(""String_Node_Str"",""String_Node_Str"",detailNode.getDisplayString());
    IDocArchiveReader arch=reportDoc.getArchive();
    assertNotNull(""String_Node_Str"",arch);
    assertEquals(""String_Node_Str"",archive.getName(),arch.getName());
    ArrayList bookmarks=(ArrayList)reportDoc.getBookmarks();
    String hMark=""String_Node_Str"", gMark=""String_Node_Str"", dMark=""String_Node_Str"";
    String fMark=""String_Node_Str"", pMark=""String_Node_Str"";
    assertNotNull(""String_Node_Str"",bookmarks);
    assertTrue(""String_Node_Str"" + hMark,bookmarks.contains(hMark));
    assertTrue(""String_Node_Str"" + gMark,bookmarks.contains(gMark));
    assertTrue(""String_Node_Str"" + dMark,bookmarks.contains(dMark));
    assertTrue(""String_Node_Str"" + fMark,bookmarks.contains(fMark));
    assertTrue(""String_Node_Str"" + pMark,bookmarks.contains(pMark));
    List root_children=reportDoc.getChildren(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",root_children);
    assertNotNull(""String_Node_Str"",root_children.get(0));
    TOCNode table_toc=(TOCNode)root_children.get(0);
    List table_children=reportDoc.getChildren(table_toc.getNodeID());
    assertNotNull(""String_Node_Str"",table_children);
    assertEquals(""String_Node_Str"",6,table_children.size());
    InputStream designStream=reportDoc.getDesignStream();
    FileInputStream designFile=new FileInputStream(report_design);
    assertNotNull(""String_Node_Str"",designStream);
    int length=designStream.available();
    byte[] fBytes=new byte[length];
    designStream.read(fBytes,0,length);
    String tempFile=path + OUTPUT_FOLDER + ""String_Node_Str"";
    File tmp=new File(tempFile);
    FileOutputStream fos=new FileOutputStream(tmp);
    fos.write(fBytes);
    fos.close();
    designStream.close();
    designFile.close();
    assertEquals(""String_Node_Str"",-6,new File(report_design).compareTo(tmp));
    removeFile(tempFile);
    assertEquals(""String_Node_Str"",3,reportDoc.getPageCount());
    assertEquals(""String_Node_Str"",2,reportDoc.getPageNumber(pMark));
    HashMap params=(HashMap)reportDoc.getParameterValues();
    assertNotNull(""String_Node_Str"",params);
    assertEquals(""String_Node_Str"",2,params.size());
    assertNotNull(""String_Node_Str"",params.get(new String(""String_Node_Str"")));
    assertNotNull(""String_Node_Str"",params.get(new String(""String_Node_Str"")));
    assertEquals(""String_Node_Str"",""String_Node_Str"",params.get(new String(""String_Node_Str"")));
    assertEquals(""String_Node_Str"",new Integer(2),params.get(new String(""String_Node_Str"")));
    String name=report_document;
    name=name.replace('/','\\');
    assertEquals(""String_Node_Str"",name,reportDoc.getName());
    IReportRunnable report=reportDoc.getReportRunnable();
    assertNotNull(""String_Node_Str"",report);
    assertEquals(""String_Node_Str"",reportRunnable.getReportEngine(),report.getReportEngine());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * test informations which should be contained by report document
 */
public void testReportDocument(){
  String path=getBaseFolder() + System.getProperty(""String_Node_Str"");
  String report_design=path + INPUT_FOLDER + System.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
  String report_document=path + OUTPUT_FOLDER + System.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
  try {
    createReportDocument1(report_design,report_document);
    IDocArchiveReader archive=new FileArchiveReader(report_document);
    IReportDocument reportDoc=engine.openReportDocument(report_document);
    TOCNode root, tableNode, headerNode, groupNode, detailNode, footerNode;
    root=reportDoc.findTOC(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",root);
    assertNotNull(""String_Node_Str"",root.getChildren());
    tableNode=(TOCNode)root.getChildren().get(0);
    assertNotNull(""String_Node_Str"",tableNode);
    assertEquals(""String_Node_Str"",""String_Node_Str"",tableNode.getDisplayString());
    assertNotNull(""String_Node_Str"",tableNode.getChildren());
    assertEquals(""String_Node_Str"",6,tableNode.getChildren().size());
    headerNode=(TOCNode)tableNode.getChildren().get(0);
    groupNode=(TOCNode)((TOCNode)tableNode.getChildren().get(1)).getChildren().get(0);
    footerNode=(TOCNode)tableNode.getChildren().get(5);
    assertNotNull(""String_Node_Str"",headerNode);
    assertNotNull(""String_Node_Str"",groupNode);
    assertNotNull(""String_Node_Str"",footerNode);
    assertEquals(""String_Node_Str"",""String_Node_Str"",headerNode.getDisplayString());
    assertEquals(""String_Node_Str"",""String_Node_Str"",groupNode.getDisplayString());
    assertEquals(""String_Node_Str"",""String_Node_Str"",footerNode.getDisplayString());
    assertNotNull(""String_Node_Str"",groupNode.getChildren());
    detailNode=(TOCNode)((TOCNode)tableNode.getChildren().get(1)).getChildren().get(1);
    assertEquals(""String_Node_Str"",""String_Node_Str"",detailNode.getDisplayString());
    IDocArchiveReader arch=reportDoc.getArchive();
    assertNotNull(""String_Node_Str"",arch);
    assertEquals(""String_Node_Str"",archive.getName(),arch.getName());
    ArrayList bookmarks=(ArrayList)reportDoc.getBookmarks();
    String hMark=""String_Node_Str"", gMark=""String_Node_Str"", dMark=""String_Node_Str"";
    String fMark=""String_Node_Str"", pMark=""String_Node_Str"";
    assertNotNull(""String_Node_Str"",bookmarks);
    assertTrue(""String_Node_Str"" + hMark,bookmarks.contains(hMark));
    assertTrue(""String_Node_Str"" + gMark,bookmarks.contains(gMark));
    assertTrue(""String_Node_Str"" + dMark,bookmarks.contains(dMark));
    assertTrue(""String_Node_Str"" + fMark,bookmarks.contains(fMark));
    assertTrue(""String_Node_Str"" + pMark,bookmarks.contains(pMark));
    List root_children=reportDoc.getChildren(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",root_children);
    assertNotNull(""String_Node_Str"",root_children.get(0));
    TOCNode table_toc=(TOCNode)root_children.get(0);
    List table_children=reportDoc.getChildren(table_toc.getNodeID());
    assertNotNull(""String_Node_Str"",table_children);
    assertEquals(""String_Node_Str"",6,table_children.size());
    InputStream designStream=reportDoc.getDesignStream();
    FileInputStream designFile=new FileInputStream(report_design);
    assertNotNull(""String_Node_Str"",designStream);
    int length=designStream.available();
    byte[] fBytes=new byte[length];
    designStream.read(fBytes,0,length);
    String tempFile=path + OUTPUT_FOLDER + ""String_Node_Str"";
    File tmp=new File(tempFile);
    FileOutputStream fos=new FileOutputStream(tmp);
    fos.write(fBytes);
    fos.close();
    designStream.close();
    designFile.close();
    assertEquals(""String_Node_Str"",-6,new File(report_design).compareTo(tmp));
    removeFile(tempFile);
    assertEquals(""String_Node_Str"",2,reportDoc.getPageCount());
    assertEquals(""String_Node_Str"",2,reportDoc.getPageNumber(pMark));
    HashMap params=(HashMap)reportDoc.getParameterValues();
    assertNotNull(""String_Node_Str"",params);
    assertEquals(""String_Node_Str"",2,params.size());
    assertNotNull(""String_Node_Str"",params.get(new String(""String_Node_Str"")));
    assertNotNull(""String_Node_Str"",params.get(new String(""String_Node_Str"")));
    assertEquals(""String_Node_Str"",""String_Node_Str"",params.get(new String(""String_Node_Str"")));
    assertEquals(""String_Node_Str"",new Integer(2),params.get(new String(""String_Node_Str"")));
    String name=report_document;
    name=name.replace('/','\\');
    assertEquals(""String_Node_Str"",name,reportDoc.getName());
    IReportRunnable report=reportDoc.getReportRunnable();
    assertNotNull(""String_Node_Str"",report);
    assertEquals(""String_Node_Str"",reportRunnable.getReportEngine(),report.getReportEngine());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.999792143005612
78522,"/** 
 * processes a table/list group
 */
protected IGroupDefinition handleGroup(GroupDesign group,GroupHandle handle){
  GroupDefinition groupDefn=new GroupDefinition(group.getName());
  groupDefn.setKeyExpression(handle.getKeyExpr());
  String interval=handle.getInterval();
  if (interval != null) {
    groupDefn.setInterval(parseInterval(interval));
  }
  groupDefn.setIntervalRange(handle.getIntervalRange());
  String direction=handle.getSortDirection();
  if (direction != null) {
    groupDefn.setSortDirection(parseSortDirection(direction));
  }
  groupDefn.getSorts().addAll(createSorts(handle));
  groupDefn.getFilters().addAll(createFilters(handle));
  getParentQuery().getGroups().add(groupDefn);
  return groupDefn;
}","/** 
 * processes a table/list group
 */
protected IGroupDefinition handleGroup(GroupDesign group,GroupHandle handle){
  GroupDefinition groupDefn=new GroupDefinition(group.getName());
  groupDefn.setKeyExpression(handle.getKeyExpr());
  String interval=handle.getInterval();
  if (interval != null) {
    groupDefn.setInterval(parseInterval(interval));
  }
  groupDefn.setIntervalRange(handle.getIntervalRange());
  groupDefn.setIntervalStart(handle.getIntervalBase());
  String direction=handle.getSortDirection();
  if (direction != null) {
    groupDefn.setSortDirection(parseSortDirection(direction));
  }
  groupDefn.getSorts().addAll(createSorts(handle));
  groupDefn.getFilters().addAll(createFilters(handle));
  getParentQuery().getGroups().add(groupDefn);
  return groupDefn;
}",0.9631093544137024
78523,"/** 
 * @return
 */
public IContent popContent(){
  exitScope();
  return (IContent)reportContents.pop();
}","/** 
 * @return
 */
public IContent popContent(){
  return (IContent)reportContents.pop();
}",0.9246231155778896
78524,"/** 
 * @param obj
 */
public void pushContent(IContent obj){
  reportContents.push(obj);
  newScope(obj);
}","/** 
 * @param obj
 */
public void pushContent(IContent obj){
  reportContents.push(obj);
}",0.914572864321608
78525,"public int getFieldIndex(String fieldName){
  Integer i=(Integer)m_nameToIdMapping.get(fieldName.toUpperCase());
  return (i == null) ? -1 : i.intValue();
}","public int getFieldIndex(String fieldName){
  Integer i=(Integer)m_nameToIdMapping.get(fieldName);
  return (i == null) ? -1 : i.intValue();
}",0.953020134228188
78526,"/** 
 * @param projectedColumns
 */
private void initColumnsInfo(List projectedColumns){
  m_projectedColumns=new ArrayList();
  m_projectedColumns.addAll(projectedColumns);
  m_nameToIdMapping=new HashMap();
  for (int i=0, n=projectedColumns.size(); i < n; i++) {
    ResultFieldMetadata column=(ResultFieldMetadata)projectedColumns.get(i);
    String upperCaseName=column.getName();
    if (upperCaseName != null)     upperCaseName=upperCaseName.toUpperCase();
    Integer index=new Integer(i + 1);
    if (!m_nameToIdMapping.containsKey(upperCaseName)) {
      m_nameToIdMapping.put(upperCaseName,index);
    }
    String upperCaseAlias=column.getAlias();
    if (upperCaseAlias != null)     upperCaseAlias=upperCaseAlias.toUpperCase();
    if (upperCaseAlias != null && upperCaseAlias.length() > 0 && !m_nameToIdMapping.containsKey(upperCaseAlias)) {
      m_nameToIdMapping.put(upperCaseAlias,index);
    }
  }
}","/** 
 * @param projectedColumns
 */
private void initColumnsInfo(List projectedColumns){
  m_projectedColumns=new ArrayList();
  m_projectedColumns.addAll(projectedColumns);
  m_nameToIdMapping=new HashMap();
  for (int i=0, n=projectedColumns.size(); i < n; i++) {
    ResultFieldMetadata column=(ResultFieldMetadata)projectedColumns.get(i);
    String upperCaseName=column.getName();
    Integer index=new Integer(i + 1);
    if (!m_nameToIdMapping.containsKey(upperCaseName)) {
      m_nameToIdMapping.put(upperCaseName,index);
    }
    String upperCaseAlias=column.getAlias();
    if (upperCaseAlias != null && upperCaseAlias.length() > 0 && !m_nameToIdMapping.containsKey(upperCaseAlias)) {
      m_nameToIdMapping.put(upperCaseAlias,index);
    }
  }
}",0.7823494335122242
78527,"/** 
 * The method which extracts column name from group definition.
 * @param group
 * @return
 */
private String getGroupKeyColumnName(GroupDefinition group){
  String columnName;
  if (group.getKeyColumn() != null) {
    columnName=group.getKeyColumn();
  }
 else {
    columnName=group.getKeyExpression();
    if (columnName.toUpperCase().startsWith(""String_Node_Str""))     columnName=columnName.toUpperCase().replaceFirst(""String_Node_Str"",""String_Node_Str"");
 else     if (columnName.toUpperCase().startsWith(""String_Node_Str"")) {
      columnName=columnName.toUpperCase().replaceFirst(""String_Node_Str"",""String_Node_Str"");
      columnName=columnName.trim().substring(0,columnName.length() - 1).trim();
    }
    if (columnName != null && columnName.matches(""String_Node_Str""))     columnName=columnName.substring(1,columnName.length() - 1);
  }
  if (columnName.startsWith(""String_Node_Str"") && columnName.endsWith(""String_Node_Str"")) {
    columnName=""String_Node_Str"" + columnName.substring(2,columnName.length() - 2) + ""String_Node_Str"";
  }
  return columnName;
}","/** 
 * The method which extracts column name from group definition.
 * @param group
 * @return
 */
private String getGroupKeyColumnName(GroupDefinition group){
  String columnName;
  if (group.getKeyColumn() != null) {
    columnName=group.getKeyColumn();
  }
 else {
    columnName=group.getKeyExpression();
    if (columnName.trim().toUpperCase().startsWith(""String_Node_Str"")) {
      String temp=columnName.trim().substring(3).trim();
      if (temp.startsWith(""String_Node_Str""))       columnName=temp.replaceFirst(""String_Node_Str"",""String_Node_Str"");
 else       if (temp.startsWith(""String_Node_Str"")) {
        columnName=temp.replaceFirst(""String_Node_Str"",""String_Node_Str"");
        columnName=columnName.trim().substring(0,columnName.length() - 1).trim();
      }
    }
    if (columnName != null && columnName.matches(""String_Node_Str""))     columnName=columnName.substring(1,columnName.length() - 1);
  }
  if (columnName.startsWith(""String_Node_Str"") && columnName.endsWith(""String_Node_Str"")) {
    columnName=""String_Node_Str"" + columnName.substring(2,columnName.length() - 2) + ""String_Node_Str"";
  }
  return columnName;
}",0.902614968440036
78528,"/** 
 * if the schema is not support, populate the table list
 */
protected void populateTableList(){
  if (rootNode != null)   rootNode.removeAll();
  ResultSet tablesRs=null;
  ArrayList procedureRs=null;
  String catalogName=metaDataProvider.getCatalog();
  String namePattern=null;
  String[] tableType=null;
  cachedSearchTxt=searchTxt.getText();
  namePattern=getTailoredSearchText(searchTxt.getText());
  String dbtype=getSelectedDbType();
  cachedDbType=dbtype;
  if (metaDataProvider.isProcedureSupported())   procedureRs=metaDataProvider.getAllProcedure(catalogName,null,namePattern);
  if (!DbType.PROCEDURE_STRING.equalsIgnoreCase(dbtype))   tablesRs=metaDataProvider.getAlltables(catalogName,null,namePattern,tableType);
  if (tablesRs == null && procedureRs == null) {
    return;
  }
  try {
    Image image=tableImage;
    if (tablesRs != null) {
      tableList=new ArrayList();
      while (tablesRs.next()) {
        String tableName=tablesRs.getString(""String_Node_Str"");
        String type=tablesRs.getString(""String_Node_Str"");
        if (type.equalsIgnoreCase(""String_Node_Str""))         continue;
        int dbType=DbObject.TABLE_TYPE;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=tableImage;
          dbType=DbObject.TABLE_TYPE;
        }
 else         if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=viewImage;
          dbType=DbObject.VIEW_TYPE;
        }
        DbObject dbObject=new DbObject(tableName,tableName,dbType,image);
        tableList.add(dbObject);
      }
    }
    if (needToCreateProcedureNode(dbtype,procedureRs)) {
      String fullyQualifiedTableName=""String_Node_Str"";
      DbObject dbObject=new DbObject(fullyQualifiedTableName,""String_Node_Str"",DbObject.PROCEDURE_TYPE,tableImage);
      tableList.add(dbObject);
    }
    TreeItem item[]=Utility.createTreeItems(rootNode,tableList,SWT.NONE,null);
    if (item != null && item.length > 0)     availableDbObjectsTree.showItem(item[0]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * if the schema is not support, populate the table list
 */
protected void populateTableList(){
  if (rootNode != null) {
    removeTreeItem(rootNode);
  }
  ResultSet tablesRs=null;
  ArrayList procedureRs=null;
  String catalogName=metaDataProvider.getCatalog();
  String namePattern=null;
  String[] tableType=null;
  cachedSearchTxt=searchTxt.getText();
  namePattern=getTailoredSearchText(searchTxt.getText());
  String dbtype=getSelectedDbType();
  cachedDbType=dbtype;
  if (metaDataProvider.isProcedureSupported())   procedureRs=metaDataProvider.getAllProcedure(catalogName,null,namePattern);
  if (!DbType.PROCEDURE_STRING.equalsIgnoreCase(dbtype))   tablesRs=metaDataProvider.getAlltables(catalogName,null,namePattern,tableType);
  if (tablesRs == null && procedureRs == null) {
    return;
  }
  try {
    Image image=tableImage;
    if (tablesRs != null) {
      tableList=new ArrayList();
      while (tablesRs.next()) {
        String tableName=tablesRs.getString(""String_Node_Str"");
        String type=tablesRs.getString(""String_Node_Str"");
        if (type.equalsIgnoreCase(""String_Node_Str""))         continue;
        int dbType=DbObject.TABLE_TYPE;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=tableImage;
          dbType=DbObject.TABLE_TYPE;
        }
 else         if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=viewImage;
          dbType=DbObject.VIEW_TYPE;
        }
        DbObject dbObject=new DbObject(tableName,tableName,dbType,image);
        tableList.add(dbObject);
      }
    }
    if (needToCreateProcedureNode(dbtype,procedureRs)) {
      String fullyQualifiedTableName=""String_Node_Str"";
      DbObject dbObject=new DbObject(fullyQualifiedTableName,""String_Node_Str"",DbObject.PROCEDURE_TYPE,tableImage);
      tableList.add(dbObject);
    }
    TreeItem item[]=Utility.createTreeItems(rootNode,tableList,SWT.NONE,null);
    if (item != null && item.length > 0)     availableDbObjectsTree.showItem(item[0]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9887750122010736
78529,"/** 
 * populate shema list if the schema is supported
 */
protected void populateSchemaList(){
  if (rootNode != null) {
    rootNode.removeAll();
  }
  getAvailableSchema();
  if (schemaCombo.getItemCount() < 1) {
    schemaCombo.add(JdbcPlugin.getResourceString(""String_Node_Str""));
    schemaCombo.select(0);
    if (schemaList != null) {
      Iterator it=schemaList.iterator();
      while (it.hasNext())       schemaCombo.add(it.next().toString());
    }
  }
  ArrayList targetSchemaList=new ArrayList();
  ArrayList schemaObjectList=new ArrayList();
  if (schemaList != null) {
    int numberOfSchema=0;
    Preferences preferences=ReportPlugin.getDefault().getPluginPreferences();
    if (preferences.contains(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA)) {
      numberOfSchema=preferences.getInt(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA);
    }
 else {
      numberOfSchema=DateSetPreferencePage.DEFAULT_MAX_NUM_OF_SCHEMA;
      preferences.setValue(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA,numberOfSchema);
    }
    cachedSchemaComboIndex=schemaCombo.getSelectionIndex();
    if (schemaCombo.getSelectionIndex() == 0) {
      targetSchemaList=schemaList;
    }
 else {
      targetSchemaList.add(schemaCombo.getItem(schemaCombo.getSelectionIndex()));
      numberOfSchema=1;
    }
    for (int i=0; i < targetSchemaList.size() && i < numberOfSchema; i++) {
      String schemaName=(String)targetSchemaList.get(i);
      DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
      schemaObjectList.add(schemaObj);
    }
    TreeItem[] items=Utility.createTreeItems(rootNode,schemaObjectList,SWT.NONE,schemaImage);
    if (items != null && items.length > 0) {
      availableDbObjectsTree.showItem(items[0]);
    }
  }
}","/** 
 * populate shema list if the schema is supported
 */
protected void populateSchemaList(){
  if (rootNode != null) {
    removeTreeItem(rootNode);
  }
  getAvailableSchema();
  if (schemaCombo.getItemCount() < 1) {
    schemaCombo.add(JdbcPlugin.getResourceString(""String_Node_Str""));
    schemaCombo.select(0);
    if (schemaList != null) {
      Iterator it=schemaList.iterator();
      while (it.hasNext())       schemaCombo.add(it.next().toString());
    }
  }
  ArrayList targetSchemaList=new ArrayList();
  ArrayList schemaObjectList=new ArrayList();
  if (schemaList != null) {
    int numberOfSchema=0;
    Preferences preferences=ReportPlugin.getDefault().getPluginPreferences();
    if (preferences.contains(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA)) {
      numberOfSchema=preferences.getInt(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA);
    }
 else {
      numberOfSchema=DateSetPreferencePage.DEFAULT_MAX_NUM_OF_SCHEMA;
      preferences.setValue(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA,numberOfSchema);
    }
    cachedSchemaComboIndex=schemaCombo.getSelectionIndex();
    if (schemaCombo.getSelectionIndex() == 0) {
      targetSchemaList=schemaList;
    }
 else {
      targetSchemaList.add(schemaCombo.getItem(schemaCombo.getSelectionIndex()));
      numberOfSchema=1;
    }
    for (int i=0; i < targetSchemaList.size() && i < numberOfSchema; i++) {
      String schemaName=(String)targetSchemaList.get(i);
      DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
      schemaObjectList.add(schemaObj);
    }
    TreeItem[] items=Utility.createTreeItems(rootNode,schemaObjectList,SWT.NONE,schemaImage);
    if (items != null && items.length > 0) {
      availableDbObjectsTree.showItem(items[0]);
    }
  }
}",0.9926842993809792
78530,"/** 
 * create a PdfAction
 * @param hyperlink			
 * @param bookmark
 * @param target			if target equals ""_blank"", the target will be opened in a new window,else the target will be opened in the current window.
 * @return					the created PdfAction.
 */
private PdfAction createPdfAction(String hyperlink,String bookmark,String target){
  if (""String_Node_Str"".equalsIgnoreCase(target)) {
    return new PdfAction(hyperlink);
  }
 else {
    if (null == hyperlink) {
      return PdfAction.gotoLocalPage(bookmark,false);
    }
 else {
      return PdfAction.gotoRemotePage(hyperlink,bookmark,false,false);
    }
  }
}","/** 
 * create a PdfAction
 * @param hyperlink			
 * @param bookmark
 * @param target			if target equals ""_blank"", the target will be opened in a new window,else the target will be opened in the current window.
 * @return					the created PdfAction.
 */
private PdfAction createPdfAction(String hyperlink,String bookmark,String target,int type){
  if (""String_Node_Str"".equalsIgnoreCase(target)) {
    return new PdfAction(hyperlink);
  }
 else {
    if (type == IHyperlinkAction.ACTION_BOOKMARK) {
      return PdfAction.gotoLocalPage(bookmark,false);
    }
 else {
      if (type == IHyperlinkAction.ACTION_HYPERLINK) {
        return PdfAction.gotoRemotePage(hyperlink,bookmark,false,false);
      }
 else {
        return new PdfAction(hyperlink);
      }
    }
  }
}",0.8701298701298701
78531,"/** 
 * handle the hyperlink, bookmark and drillthrough
 * @param area			the area which may need to handle the hyperlink action
 */
private void handleHyperlinkAction(IArea area){
  IContent content=area.getContent();
  if (null != content) {
    IHyperlinkAction hlAction=content.getHyperlinkAction();
    if (null != hlAction)     try {
switch (hlAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
        writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(area.getAbsoluteX()),layoutPointY2PDF(area.getAbsoluteY() + area.getHeight()),layoutPointX2PDF(area.getAbsoluteX() + area.getWidth()),layoutPointY2PDF(area.getAbsoluteY()),createPdfAction(hlAction.getHyperlink(),hlAction.getBookmark(),hlAction.getTargetWindow())));
      break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
    String baseURL=null;
  if (context != null) {
    baseURL=context.getBaseURL();
  }
StringBuffer link=new StringBuffer();
String reportName=hlAction.getReportName();
if (reportName != null && !reportName.equals(""String_Node_Str"")) {
String format=hlAction.getFormat();
if (""String_Node_Str"".equalsIgnoreCase(format)) {
link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
}
link.append(""String_Node_Str"");
try {
link.append(URLEncoder.encode(reportName,""String_Node_Str""));
}
 catch (UnsupportedEncodingException e1) {
}
if (format != null && format.length() > 0) {
link.append(""String_Node_Str"" + format);
}
if (hlAction.getParameterBindings() != null) {
Iterator paramsIte=hlAction.getParameterBindings().entrySet().iterator();
while (paramsIte.hasNext()) {
  Map.Entry entry=(Map.Entry)paramsIte.next();
  try {
    link.append(""String_Node_Str"" + URLEncoder.encode((String)entry.getKey(),""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode((String)entry.getValue(),""String_Node_Str""));
  }
 catch (  UnsupportedEncodingException e) {
  }
}
}
}
if (hlAction.getBookmark() != null) {
link.append(""String_Node_Str"");
link.append(hlAction.getBookmark());
}
writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(area.getAbsoluteX()),layoutPointY2PDF(area.getAbsoluteY() + area.getHeight()),layoutPointX2PDF(area.getAbsoluteX() + area.getWidth()),layoutPointY2PDF(area.getAbsoluteY()),createPdfAction(link.toString(),null,hlAction.getTargetWindow())));
break;
case IHyperlinkAction.ACTION_HYPERLINK:
writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(area.getAbsoluteX()),layoutPointY2PDF(area.getAbsoluteY() + area.getHeight()),layoutPointX2PDF(area.getAbsoluteX() + area.getWidth()),layoutPointY2PDF(area.getAbsoluteY()),createPdfAction(hlAction.getHyperlink(),null,hlAction.getTargetWindow())));
break;
}
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getMessage(),e);
}
}
}","/** 
 * handle the hyperlink, bookmark and drillthrough
 * @param area			the area which may need to handle the hyperlink action
 */
private void handleHyperlinkAction(IArea area){
  IContent content=area.getContent();
  if (null != content) {
    IHyperlinkAction hlAction=content.getHyperlinkAction();
    if (null != hlAction)     try {
switch (hlAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
        writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(area.getAbsoluteX()),layoutPointY2PDF(area.getAbsoluteY() + area.getHeight()),layoutPointX2PDF(area.getAbsoluteX() + area.getWidth()),layoutPointY2PDF(area.getAbsoluteY()),createPdfAction(hlAction.getHyperlink(),hlAction.getBookmark(),hlAction.getTargetWindow(),IHyperlinkAction.ACTION_BOOKMARK)));
      break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
    String baseURL=null;
  if (context != null) {
    baseURL=context.getBaseURL();
  }
StringBuffer link=new StringBuffer();
String reportName=hlAction.getReportName();
if (reportName != null && !reportName.equals(""String_Node_Str"")) {
String format=hlAction.getFormat();
if (""String_Node_Str"".equalsIgnoreCase(format)) {
link.append(baseURL.replaceFirst(""String_Node_Str"",""String_Node_Str""));
}
link.append(""String_Node_Str"");
try {
link.append(URLEncoder.encode(reportName,""String_Node_Str""));
}
 catch (UnsupportedEncodingException e1) {
}
if (format != null && format.length() > 0) {
link.append(""String_Node_Str"" + format);
}
if (hlAction.getParameterBindings() != null) {
Iterator paramsIte=hlAction.getParameterBindings().entrySet().iterator();
while (paramsIte.hasNext()) {
  Map.Entry entry=(Map.Entry)paramsIte.next();
  try {
    link.append(""String_Node_Str"" + URLEncoder.encode((String)entry.getKey(),""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode((String)entry.getValue(),""String_Node_Str""));
  }
 catch (  UnsupportedEncodingException e) {
  }
}
}
}
if (hlAction.getBookmark() != null) {
link.append(""String_Node_Str"");
link.append(hlAction.getBookmark());
}
writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(area.getAbsoluteX()),layoutPointY2PDF(area.getAbsoluteY() + area.getHeight()),layoutPointX2PDF(area.getAbsoluteX() + area.getWidth()),layoutPointY2PDF(area.getAbsoluteY()),createPdfAction(link.toString(),null,hlAction.getTargetWindow(),IHyperlinkAction.ACTION_DRILLTHROUGH)));
break;
case IHyperlinkAction.ACTION_HYPERLINK:
writer.addAnnotation(new PdfAnnotation(writer,layoutPointX2PDF(area.getAbsoluteX()),layoutPointY2PDF(area.getAbsoluteY() + area.getHeight()),layoutPointX2PDF(area.getAbsoluteX() + area.getWidth()),layoutPointY2PDF(area.getAbsoluteY()),createPdfAction(hlAction.getHyperlink(),null,hlAction.getTargetWindow(),IHyperlinkAction.ACTION_HYPERLINK)));
break;
}
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getMessage(),e);
}
}
}",0.9813151275601868
78532,"public Page(IContentEmitter emitter,IPageContent pageContent){
  this.emitter=emitter;
  this.pageContent=pageContent;
  this.rootRegion=new PageRegion(this,null);
}","public Page(IContentEmitter emitter,IPageContent pageContent){
  this.emitter=emitter;
  this.pageContent=pageContent;
  this.rootRegion=new PageRegion(this);
}",0.9846153846153848
78533,"public PageRegion createRegion(IContent content){
  return new PageRegion(this,content);
}","public PageRegion createRegion(){
  return new PageRegion(this);
}",0.8461538461538461
78534,"private ArrayList getAncestors(){
  ArrayList list=new ArrayList();
  IContent content=rootContent;
  while (content != null) {
    list.add(content);
    content=(IContent)content.getParent();
  }
  return list;
}","private ArrayList getAncestors(IContent content){
  ArrayList list=new ArrayList();
  while (content != null) {
    list.add(content);
    content=(IContent)content.getParent();
  }
  return list;
}",0.883495145631068
78535,"public void close(){
  if (rootContent != null) {
    ArrayList contents=getAncestors();
    int size=contents.size();
    for (int i=0; i < size; i++) {
      closeContent((IContent)contents.get(i));
    }
  }
}","public void close(IContent content){
  if (content != null) {
    ArrayList contents=getAncestors(content);
    int size=contents.size();
    for (int i=0; i < size; i++) {
      closeContent((IContent)contents.get(i));
    }
  }
}",0.9345372460496614
78536,"public void open(){
  if (rootContent != null) {
    ArrayList contents=getAncestors();
    int size=contents.size() - 1;
    for (int i=size; i >= 0; i--) {
      openContent((IContent)contents.get(i));
    }
  }
}","public void open(IContent content){
  if (content != null) {
    ArrayList contents=getAncestors(content);
    int size=contents.size() - 1;
    for (int i=size; i >= 0; i--) {
      openContent((IContent)contents.get(i));
    }
  }
}",0.935412026726058
78537,"public PageRegion(Page page,IContent content){
  super(page.getEmitter());
  this.rootContent=content;
  startEmitterVisitor=new StartEmitterVisitor(emitter);
  endEmitterVisitor=new EndEmitterVisitor(emitter);
}","public PageRegion(Page page){
  super(page.getEmitter());
  startEmitterVisitor=new StartEmitterVisitor(emitter);
  endEmitterVisitor=new EndEmitterVisitor(emitter);
}",0.8812664907651715
78538,"/** 
 * Reset all the member data to their default value.
 */
private void reset(){
  if (firstPassRowNumberCounter == secondPassRowNumberCounter) {
    firstPassRowNumberCounter=0;
    secondPassRowNumberCounter=0;
    qualifiedRowCounter=0;
    rowIdList=null;
    valueList=null;
    N=-1;
  }
}","/** 
 * Reset all the member data to their default value.
 */
private void reset(){
  if (firstPassRowNumberCounter == secondPassRowNumberCounter) {
    doReset();
  }
}",0.7066381156316917
78539,"/** 
 * Evaluate the given value
 * @param value
 * @param n
 * @return
 * @throws DataException
 */
public boolean evaluate(Object value,Object n,boolean calculatePercent) throws DataException {
  if (N == -1) {
    try {
      if (calculatePercent) {
        double temp=Double.valueOf(n.toString()).doubleValue() / 100;
        if (temp > 1 || temp < 0)         throw new DataException(ResourceConstants.INVALID_TOP_BOTTOM_PERCENT_ARGUMENT);
        N=(int)Math.round(temp * getRowCount());
      }
 else       N=Double.valueOf(n.toString()).intValue();
    }
 catch (    NumberFormatException e) {
    }
    if (N < 0)     throw new DataException(ResourceConstants.INVALID_TOP_BOTTOM_N_ARGUMENT);
  }
  if (getPassLevel() == FIRST_PASS) {
    return doFirstPass(value);
  }
 else   if (getPassLevel() == SECOND_PASS) {
    return doSecondPass();
  }
  return false;
}","/** 
 * Evaluate the given value
 * @param value
 * @param n
 * @return
 * @throws DataException
 */
public boolean evaluate(Object value,Object n,boolean calculatePercent) throws DataException {
  if (FilterPassController.getForceReset()) {
    doReset();
    FilterPassController.setForceReset(false);
  }
  if (N == -1) {
    try {
      if (calculatePercent) {
        double temp=Double.valueOf(n.toString()).doubleValue() / 100;
        if (temp > 1 || temp < 0)         throw new DataException(ResourceConstants.INVALID_TOP_BOTTOM_PERCENT_ARGUMENT);
        N=(int)Math.round(temp * getRowCount());
      }
 else       N=Double.valueOf(n.toString()).intValue();
    }
 catch (    NumberFormatException e) {
    }
    if (N < 0)     throw new DataException(ResourceConstants.INVALID_TOP_BOTTOM_N_ARGUMENT);
  }
  if (getPassLevel() == FIRST_PASS) {
    return doFirstPass(value);
  }
 else   if (getPassLevel() == SECOND_PASS) {
    return doSecondPass();
  }
  return false;
}",0.9395900755124056
78540,"public void testDefineThemes() throws Exception {
  sessionHandle=DesignEngine.newSession(null);
  libraryHandle=sessionHandle.createLibrary();
  library=(Library)libraryHandle.getModule();
  factory=new ElementFactory(library);
  theme=factory.newTheme(null);
  assertEquals(""String_Node_Str"",theme.getName());
  libraryHandle.getThemes().add(theme);
  try {
    libraryHandle.getThemes().add(theme);
    fail();
  }
 catch (  NameException e) {
    assertNotNull(e);
  }
  style1=factory.newStyle(""String_Node_Str"");
  style2=factory.newStyle(""String_Node_Str"");
  theme.getStyles().add(style1);
  theme.getStyles().add(style2);
  assertEquals(2,theme.getStyles().getCount());
}","public void testDefineThemes() throws Exception {
  sessionHandle=DesignEngine.newSession(null);
  libraryHandle=sessionHandle.createLibrary();
  library=(Library)libraryHandle.getModule();
  factory=new ElementFactory(library);
  theme=factory.newTheme(null);
  theme1=factory.newTheme(null);
  assertEquals(""String_Node_Str"",theme.getName());
  libraryHandle.getThemes().add(theme);
  libraryHandle.getThemes().add(theme1);
  assertEquals(""String_Node_Str"",theme1.getName());
  style1=factory.newStyle(""String_Node_Str"");
  style2=factory.newStyle(""String_Node_Str"");
  theme.getStyles().add(style1);
  theme.getStyles().add(style2);
  assertEquals(2,theme.getStyles().getCount());
}",0.6476190476190476
78541,"public void testCopyPasteTheme() throws Exception {
  openLibrary(LibC);
  ThemeHandle defaulttheme=libraryHandle.findTheme(""String_Node_Str"");
  ThemeHandle theme1=libraryHandle.findTheme(""String_Node_Str"");
  assertNotNull(defaulttheme);
  assertNotNull(theme1);
  ThemeHandle defaultcopy=((Theme)defaulttheme.copy()).handle(libraryHandle.getModule());
  ThemeHandle theme1copy=((Theme)theme1.copy()).handle(libraryHandle.getModule());
  try {
    libraryHandle.getThemes().add(defaultcopy);
    fail();
  }
 catch (  NameException e) {
    assertNotNull(e);
  }
  defaultcopy.setName(""String_Node_Str"");
  theme1copy.setName(""String_Node_Str"");
  libraryHandle.getThemes().add(defaultcopy);
  libraryHandle.getThemes().add(theme1copy);
  assertEquals(""String_Node_Str"",libraryHandle.getThemes().get(2).getName());
  assertEquals(""String_Node_Str"",libraryHandle.getThemes().get(3).getName());
  openLibrary(LibB);
  libraryHandle.getThemes().add(defaultcopy);
  libraryHandle.getThemes().add(theme1copy);
  assertEquals(""String_Node_Str"",libraryHandle.getThemes().get(2).getName());
  assertEquals(""String_Node_Str"",libraryHandle.getThemes().get(3).getName());
}","public void testCopyPasteTheme() throws Exception {
  openLibrary(LibC);
  ThemeHandle defaulttheme=libraryHandle.findTheme(""String_Node_Str"");
  ThemeHandle theme1=libraryHandle.findTheme(""String_Node_Str"");
  assertNotNull(defaulttheme);
  assertNotNull(theme1);
  ThemeHandle defaultcopy=((Theme)defaulttheme.copy()).handle(libraryHandle.getModule());
  ThemeHandle defaultcopy1=((Theme)defaulttheme.copy()).handle(libraryHandle.getModule());
  ThemeHandle theme1copy=((Theme)theme1.copy()).handle(libraryHandle.getModule());
  ThemeHandle theme1copy1=((Theme)theme1.copy()).handle(libraryHandle.getModule());
  try {
    libraryHandle.getThemes().add(defaultcopy);
    fail();
  }
 catch (  NameException e) {
    assertNotNull(e);
  }
  defaultcopy.setName(""String_Node_Str"");
  theme1copy.setName(""String_Node_Str"");
  libraryHandle.getThemes().add(defaultcopy);
  libraryHandle.getThemes().add(theme1copy);
  assertEquals(""String_Node_Str"",libraryHandle.getThemes().get(2).getName());
  assertEquals(""String_Node_Str"",libraryHandle.getThemes().get(3).getName());
  openLibrary(LibB);
  defaultcopy1.setName(""String_Node_Str"");
  theme1copy1.setName(""String_Node_Str"");
  libraryHandle.getThemes().add(defaultcopy1);
  libraryHandle.getThemes().add(theme1copy1);
  assertEquals(""String_Node_Str"",libraryHandle.getThemes().get(2).getName());
  assertEquals(""String_Node_Str"",libraryHandle.getThemes().get(3).getName());
}",0.8332046332046332
78542,"public void setCurrentEditObject(Object obj){
  this.currentEditObject=obj;
  if (contextItem != null && !contextItem.isDisposed()) {
    contextItem.removeAll();
  }
}","public void setCurrentEditObject(Object obj){
  this.currentEditObject=obj;
  removeTreeItem();
}",0.6716981132075471
78543,"/** 
 * Creates context objects tree. Context ojects tree is used in JS editor palette, which displays current object method's arguments.
 */
public void createContextObjects(String methodName){
  if (contextItem != null && !contextItem.isDisposed() && currentEditObject != null && methodName != null) {
    contextItem.removeAll();
    DesignElementHandle handle=(DesignElementHandle)currentEditObject;
    Map argMap=DEUtil.getDesignElementMethodArguments(handle,methodName);
    for (Iterator iter=argMap.keySet().iterator(); iter.hasNext(); ) {
      String argName=(String)iter.next();
      createSubTreeItem(contextItem,argName,IMAGE_METHOD,argName,""String_Node_Str"",true);
    }
  }
}","/** 
 * Creates context objects tree. Context ojects tree is used in JS editor palette, which displays current object method's arguments.
 */
public void createContextObjects(String methodName){
  if (contextItem != null && !contextItem.isDisposed() && currentEditObject != null && methodName != null) {
    removeTreeItem();
    DesignElementHandle handle=(DesignElementHandle)currentEditObject;
    Map argMap=DEUtil.getDesignElementMethodArguments(handle,methodName);
    for (Iterator iter=argMap.keySet().iterator(); iter.hasNext(); ) {
      String argName=(String)iter.next();
      createSubTreeItem(contextItem,argName,IMAGE_METHOD,argName,""String_Node_Str"",true);
    }
  }
}",0.9803921568627452
78544,"/** 
 * remove the tree item's direct child treeItem, cause since 3.1, TreeItem.removeAll is supported.But in 3.0,this method is not supported.
 * @param treeItem
 */
private void removeTreeItem(TreeItem treeItem){
  TreeItem[] items=treeItem.getItems();
  for (int i=0; i < items.length; i++) {
    if (items[i] != null && !items[i].isDisposed()) {
      items[i].dispose();
    }
  }
}","/** 
 * remove the tree item's direct child treeItem, cause since 3.1, TreeItem.removeAll is supported.But in 3.0,this method is not supported.
 * @param treeItem
 */
private void removeTreeItem(TreeItem treeItem){
  if (treeItem.isDisposed())   return;
  TreeItem[] items=treeItem.getItems();
  for (int i=0; i < items.length; i++) {
    if (items[i] != null && !items[i].isDisposed()) {
      items[i].dispose();
    }
  }
}",0.9520295202952028
78545,"public static boolean getForceReset(){
  return forceReset;
}","public boolean getForceReset(){
  return forceReset;
}",0.9391304347826088
78546,"public static int getRowCount(){
  return rowCount;
}","public int getRowCount(){
  return rowCount;
}",0.9292929292929292
78547,"public static int getPassLevel(){
  return passLevel;
}","public int getPassLevel(){
  return passLevel;
}",0.9320388349514565
78548,"public static void setRowCount(int i){
  rowCount=i;
}","public void setRowCount(int i){
  rowCount=i;
}",0.9306930693069309
78549,"public static void setForceReset(boolean b){
  forceReset=b;
}","public void setForceReset(boolean b){
  forceReset=b;
}",0.9401709401709402
78550,"public static void setPassLevel(int i){
  passLevel=i;
}","public void setPassLevel(int i){
  passLevel=i;
}",0.9333333333333332
78551,"/** 
 * @param value
 * @param N
 * @throws DataException
 */
private void populateValueListAndRowIdList(Object value,int N) throws DataException {
  for (int i=0; i < N; i++) {
    if (value == null)     value=""String_Node_Str"";
    if (valueList[i] == null) {
      valueList[i]=value;
      rowIdList[i]=firstPassRowNumberCounter;
      break;
    }
 else {
      Object result=this.doCompare(value,valueList[i]);
      try {
        if (DataTypeUtil.toBoolean(result).booleanValue() == true) {
          for (int j=N - 1; j > i; j--) {
            valueList[j]=valueList[j - 1];
            rowIdList[j]=rowIdList[j - 1];
          }
          valueList[i]=value;
          rowIdList[i]=firstPassRowNumberCounter;
          break;
        }
      }
 catch (      BirtException e) {
        throw DataException.wrap(e);
      }
    }
  }
}","/** 
 * @param value
 * @param N
 * @throws DataException
 */
private void populateValueListAndRowIdList(Object value,int N) throws DataException {
}",0.3007063572149344
78552,"/** 
 * Evaluate the given value
 * @param value
 * @param n
 * @return
 * @throws DataException
 */
public boolean evaluate(Object value,Object n,boolean calculatePercent) throws DataException {
  if (FilterPassController.getForceReset()) {
    doReset();
    FilterPassController.setForceReset(false);
  }
  if (N == -1) {
    try {
      if (calculatePercent) {
        double temp=Double.valueOf(n.toString()).doubleValue() / 100;
        if (temp > 1 || temp < 0)         throw new DataException(ResourceConstants.INVALID_TOP_BOTTOM_PERCENT_ARGUMENT);
        N=(int)Math.round(temp * getRowCount());
      }
 else       N=Double.valueOf(n.toString()).intValue();
    }
 catch (    NumberFormatException e) {
    }
    if (N < 0)     throw new DataException(ResourceConstants.INVALID_TOP_BOTTOM_N_ARGUMENT);
  }
  if (getPassLevel() == FIRST_PASS) {
    return doFirstPass(value);
  }
 else   if (getPassLevel() == SECOND_PASS) {
    return doSecondPass();
  }
  return false;
}","/** 
 * Evaluate the given value
 * @param value
 * @param n
 * @return
 * @throws DataException
 */
public boolean evaluate(Context cx,Scriptable scope) throws DataException {
  if (filterPassController.getForceReset()) {
    doReset();
    filterPassController.setForceReset(false);
  }
  if (N == -1) {
    Object n_object=ScriptEvalUtil.evalExpr(n_expr,cx,scope,""String_Node_Str"",0);
    double n_value=-1;
    try {
      n_value=DataTypeUtil.toDouble(n_object).doubleValue();
    }
 catch (    BirtException e) {
      throw new DataException(ResourceConstants.INVALID_TOP_BOTTOM_PERCENT_ARGUMENT,e);
    }
    if (n_percent) {
      if (n_value < 0 || n_value > 100)       throw new DataException(ResourceConstants.INVALID_TOP_BOTTOM_PERCENT_ARGUMENT);
      N=(int)Math.round(n_value / 100 * filterPassController.getRowCount());
    }
 else {
      if (n_value < 0)       throw new DataException(ResourceConstants.INVALID_TOP_BOTTOM_PERCENT_ARGUMENT);
      N=(int)n_value;
    }
  }
  Object value=ScriptEvalUtil.evalExpr(op_expr,cx,scope,""String_Node_Str"",0);
  if (filterPassController.getPassLevel() == FilterPassController.FIRST_PASS) {
    return doFirstPass(value);
  }
 else   if (filterPassController.getPassLevel() == FilterPassController.SECOND_PASS) {
    return doSecondPass();
  }
  return false;
}",0.4663482414242292
78553,"/** 
 * Evaluates a conditional expression. A conditional expression comprises of a Javascript expression, an operator, and up to 2 operands (which are Javascript expressions themselves).<br> Both op1 and op2 will be encapsulated to ExprTextAndValue type to show specific message in case anything goes wrong, they are assumed not to be null as well. <p> The basic rule for comparison: obj will always be considered as the default data type,i.e. obj, op1 and op2 will be formatted to the superset of obj (or Double if obj is numeric)on the condition they are comparable.<br> e.g.<br> obj: Integer=>obj, op1 and op2 will be formatted to Double.<br> obj: Timestamp=>obj, op1 and op2 will be formatted to Date.<br> obj: Boolean=>obj and op1 will be formatted to Boolean.<br> obj: String=>obj, op1 and op2 will remain the same
 * @param obj
 * @param operator
 * @param op1
 * @param op2
 * @return A Boolean result
 * @throws DataException
 */
public static Object evalConditionalExpr(Object obj,int operator,ExprTextAndValue op1,ExprTextAndValue op2) throws DataException {
  Object resultObject=obj;
  Object resultOp1=op1.value;
  Object resultOp2=op2.value;
  Object[] obArray=MiscUtil.isComparable(obj,operator,op1,op2);
  if (obArray != null) {
    resultObject=obArray[0];
    resultOp1=obArray[1];
    resultOp2=obArray[2];
  }
  if (logger.isLoggable(Level.FINER))   logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(resultObject) + ""String_Node_Str""+ operator+ (resultOp1 == null ? null : (""String_Node_Str"" + LogUtil.toString(resultOp1)))+ (resultOp2 == null ? null : (""String_Node_Str"" + LogUtil.toString(resultOp2))));
  boolean result=false;
switch (operator) {
case IConditionalExpression.OP_EQ:
    result=compare(resultObject,resultOp1) == 0;
  break;
case IConditionalExpression.OP_NE:
result=compare(resultObject,resultOp1) != 0;
break;
case IConditionalExpression.OP_LT:
result=compare(resultObject,resultOp1) < 0;
break;
case IConditionalExpression.OP_LE:
result=compare(resultObject,resultOp1) <= 0;
break;
case IConditionalExpression.OP_GE:
result=compare(resultObject,resultOp1) >= 0;
break;
case IConditionalExpression.OP_GT:
result=compare(resultObject,resultOp1) > 0;
break;
case IConditionalExpression.OP_BETWEEN:
result=between(resultObject,resultOp1,resultOp2);
break;
case IConditionalExpression.OP_NOT_BETWEEN:
result=!(between(resultObject,resultOp1,resultOp2));
break;
case IConditionalExpression.OP_NULL:
result=resultObject == null;
break;
case IConditionalExpression.OP_NOT_NULL:
result=resultObject != null;
break;
case IConditionalExpression.OP_TRUE:
result=isTrueOrFalse(resultObject,Boolean.TRUE);
break;
case IConditionalExpression.OP_FALSE:
result=isTrueOrFalse(resultObject,Boolean.FALSE);
break;
case IConditionalExpression.OP_LIKE:
result=like(resultObject,resultOp1);
break;
case IConditionalExpression.OP_TOP_N:
result=isTopN(resultObject,resultOp1);
break;
case IConditionalExpression.OP_BOTTOM_N:
result=isBottomN(resultObject,resultOp1);
break;
case IConditionalExpression.OP_TOP_PERCENT:
result=isTopPercent(resultObject,resultOp1);
break;
case IConditionalExpression.OP_BOTTOM_PERCENT:
result=isBottomPercent(resultObject,resultOp1);
break;
case IConditionalExpression.OP_ANY:
throw new DataException(ResourceConstants.UNSUPPORTTED_COND_OPERATOR,""String_Node_Str"");
case IConditionalExpression.OP_MATCH:
result=match(resultObject,resultOp1);
break;
default :
throw new DataException(ResourceConstants.UNSUPPORTTED_COND_OPERATOR,new Integer(operator));
}
logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",new Boolean(result));
return new Boolean(result);
}","/** 
 * Evaluates a conditional expression. A conditional expression comprises of a Javascript expression, an operator, and up to 2 operands (which are Javascript expressions themselves).<br> Both op1 and op2 will be encapsulated to ExprTextAndValue type to show specific message in case anything goes wrong, they are assumed not to be null as well. <p> The basic rule for comparison: obj will always be considered as the default data type,i.e. obj, op1 and op2 will be formatted to the superset of obj (or Double if obj is numeric)on the condition they are comparable.<br> e.g.<br> obj: Integer=>obj, op1 and op2 will be formatted to Double.<br> obj: Timestamp=>obj, op1 and op2 will be formatted to Date.<br> obj: Boolean=>obj and op1 will be formatted to Boolean.<br> obj: String=>obj, op1 and op2 will remain the same
 * @param obj
 * @param operator
 * @param op1
 * @param op2
 * @return A Boolean result
 * @throws DataException
 */
public static Object evalConditionalExpr(Object obj,int operator,ExprTextAndValue op1,ExprTextAndValue op2) throws DataException {
  Object resultObject=obj;
  Object resultOp1=op1.value;
  Object resultOp2=op2.value;
  Object[] obArray=MiscUtil.isComparable(obj,operator,op1,op2);
  if (obArray != null) {
    resultObject=obArray[0];
    resultOp1=obArray[1];
    resultOp2=obArray[2];
  }
  if (logger.isLoggable(Level.FINER))   logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(resultObject) + ""String_Node_Str""+ operator+ (resultOp1 == null ? null : (""String_Node_Str"" + LogUtil.toString(resultOp1)))+ (resultOp2 == null ? null : (""String_Node_Str"" + LogUtil.toString(resultOp2))));
  boolean result=false;
switch (operator) {
case IConditionalExpression.OP_EQ:
    result=compare(resultObject,resultOp1) == 0;
  break;
case IConditionalExpression.OP_NE:
result=compare(resultObject,resultOp1) != 0;
break;
case IConditionalExpression.OP_LT:
result=compare(resultObject,resultOp1) < 0;
break;
case IConditionalExpression.OP_LE:
result=compare(resultObject,resultOp1) <= 0;
break;
case IConditionalExpression.OP_GE:
result=compare(resultObject,resultOp1) >= 0;
break;
case IConditionalExpression.OP_GT:
result=compare(resultObject,resultOp1) > 0;
break;
case IConditionalExpression.OP_BETWEEN:
result=between(resultObject,resultOp1,resultOp2);
break;
case IConditionalExpression.OP_NOT_BETWEEN:
result=!(between(resultObject,resultOp1,resultOp2));
break;
case IConditionalExpression.OP_NULL:
result=resultObject == null;
break;
case IConditionalExpression.OP_NOT_NULL:
result=resultObject != null;
break;
case IConditionalExpression.OP_TRUE:
result=isTrueOrFalse(resultObject,Boolean.TRUE);
break;
case IConditionalExpression.OP_FALSE:
result=isTrueOrFalse(resultObject,Boolean.FALSE);
break;
case IConditionalExpression.OP_LIKE:
result=like(resultObject,resultOp1);
break;
case IConditionalExpression.OP_TOP_N:
case IConditionalExpression.OP_BOTTOM_N:
case IConditionalExpression.OP_TOP_PERCENT:
case IConditionalExpression.OP_BOTTOM_PERCENT:
throw new DataException(ResourceConstants.UNSUPPORTTED_COND_OPERATOR,""String_Node_Str"");
case IConditionalExpression.OP_ANY:
throw new DataException(ResourceConstants.UNSUPPORTTED_COND_OPERATOR,""String_Node_Str"");
case IConditionalExpression.OP_MATCH:
result=match(resultObject,resultOp1);
break;
default :
throw new DataException(ResourceConstants.UNSUPPORTTED_COND_OPERATOR,new Integer(operator));
}
logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",new Boolean(result));
return new Boolean(result);
}",0.9497716894977168
78554,"/** 
 * Evaluates a IJSExpression or IConditionalExpression
 * @param expr
 * @param cx
 * @param scope
 * @param source
 * @param lineNo
 * @return 
 * @throws DataException
 */
public static Object evalExpr(IBaseExpression expr,Context cx,Scriptable scope,String source,int lineNo) throws DataException {
  if (logger.isLoggable(Level.FINER))   logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(expr) + ""String_Node_Str""+ source+ ""String_Node_Str""+ lineNo);
  Object result;
  if (expr == null) {
    result=null;
  }
 else   if (expr instanceof IConditionalExpression) {
    ConditionalExpression ConditionalExpr=(ConditionalExpression)expr;
    Object expression=evalExpr(ConditionalExpr.getExpression(),cx,scope,source,lineNo);
    Object Op1=evalExpr(MiscUtil.constructValidScriptExpression(ConditionalExpr.getOperand1()),cx,scope,source,lineNo);
    Object Op2=evalExpr(MiscUtil.constructValidScriptExpression(ConditionalExpr.getOperand2()),cx,scope,source,lineNo);
    result=evalConditionalExpr2(expression,ConditionalExpr.getOperator(),Op1,Op2);
  }
 else {
    IScriptExpression jsExpr=(IScriptExpression)expr;
    if (jsExpr.getText() != null && jsExpr.getHandle() != null) {
      result=((CompiledExpression)jsExpr.getHandle()).evaluate(cx,scope);
    }
 else {
      result=evaluateJSAsExpr(cx,scope,jsExpr.getText(),source,lineNo);
    }
  }
  if (logger.isLoggable(Level.FINER))   logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",result);
  return result;
}","/** 
 * Evaluates a IJSExpression or IConditionalExpression
 * @param expr
 * @param cx
 * @param scope
 * @param source
 * @param lineNo
 * @return 
 * @throws DataException
 */
public static Object evalExpr(IBaseExpression expr,Context cx,Scriptable scope,String source,int lineNo) throws DataException {
  if (logger.isLoggable(Level.FINER))   logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(expr) + ""String_Node_Str""+ source+ ""String_Node_Str""+ lineNo);
  Object result;
  if (expr == null) {
    result=null;
  }
 else   if (expr instanceof IConditionalExpression) {
    Object handle=expr.getHandle();
    if (handle instanceof NEvaluator) {
      result=Boolean.valueOf(((NEvaluator)handle).evaluate(cx,scope));
    }
 else {
      ConditionalExpression ConditionalExpr=(ConditionalExpression)expr;
      Object expression=evalExpr(ConditionalExpr.getExpression(),cx,scope,source,lineNo);
      Object Op1=evalExpr(MiscUtil.constructValidScriptExpression(ConditionalExpr.getOperand1()),cx,scope,source,lineNo);
      Object Op2=evalExpr(MiscUtil.constructValidScriptExpression(ConditionalExpr.getOperand2()),cx,scope,source,lineNo);
      result=evalConditionalExpr2(expression,ConditionalExpr.getOperator(),Op1,Op2);
    }
  }
 else {
    IScriptExpression jsExpr=(IScriptExpression)expr;
    if (jsExpr.getText() != null && jsExpr.getHandle() != null) {
      result=((CompiledExpression)jsExpr.getHandle()).evaluate(cx,scope);
    }
 else {
      result=evaluateJSAsExpr(cx,scope,jsExpr.getText(),source,lineNo);
    }
  }
  if (logger.isLoggable(Level.FINER))   logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",result);
  return result;
}",0.8358392144829703
78555,"/** 
 * Gets a handle to deal with the item's x (horizontal) position.
 * @return The item's x position.
 */
String getX();","/** 
 * Gets the item's x (horizontal) position.
 * @return The item's x position.
 */
String getX();",0.9017857142857144
78556,"/** 
 * Gets a handle to deal with the item's height.
 * @return a DimensionHandle for the item's height.
 */
String getHeight();","/** 
 * Gets the item's height.
 * @return the item's height.
 */
String getHeight();",0.794392523364486
78557,"/** 
 * Sets the bookmark of the report item.
 * @param value the property value to be set.
 * @throws ScriptException if the property is locked.
 */
void setBookmark(String value) throws ScriptException ;","/** 
 * Sets the bookmark of the report item. The bookmark value is evaluated as an expression. If you want the bookmark to be the string ""bookmark"", you need to use setBookmark(""\""bookmark\""""); If bookmark is a JavaScript variable, use setBookmark(""bookmark"");
 * @param value the bookmark expression
 * @throws ScriptException if the property is locked.
 */
void setBookmark(String value) throws ScriptException ;",0.5806451612903226
78558,"/** 
 * Gets a handle to deal with the item's y (vertical) position.
 * @return The item's y position.
 */
String getY();","/** 
 * Gets the item's y (vertical) position.
 * @return The item's y position.
 */
String getY();",0.9
78559,"/** 
 * Gets a handle to deal with the item's width.
 * @return a DimensionHandle for the item's width.
 */
String getWidth();","/** 
 * Gets a the item's width.
 * @return a the item's width.
 */
String getWidth();",0.8113207547169812
78560,"/** 
 * Returns the bookmark of the report item.
 * @return the book mark as a string
 */
String getBookmark();","/** 
 * Returns the bookmark of the report item. The bookmark value is evaluated as an expression.
 * @return the book mark as a string
 */
String getBookmark();",0.8161764705882353
78561,"/** 
 * Gets a handle to deal with the row's height.
 * @return a DimensionHandle for the row's height.
 */
String getHeight();","/** 
 * Gets a handle to deal with the row's height.
 * @return the row's height.
 */
String getHeight();",0.9051724137931034
78562,"/** 
 * Sets the bookmark of this row.
 * @param value the bookmark to set
 * @throws ScriptException if the property is locked.
 */
void setBookmark(String value) throws ScriptException ;","/** 
 * Sets the bookmark of the row. The bookmark value is evaluated as an expression. If you want the bookmark to be the string ""bookmark"", you need to use setBookmark(""\""bookmark\""""); If bookmark is a JavaScript variable, use setBookmark(""bookmark"");
 * @param value the bookmark expression
 * @throws ScriptException if the property is locked.
 */
void setBookmark(String value) throws ScriptException ;",0.6050420168067226
78563,"/** 
 * Returns the bookmark of this row.
 * @return the bookmark of this row
 */
String getBookmark();","/** 
 * Returns the bookmark of the row. The bookmark value is evaluated as an expression.
 * @return the book mark as a string
 */
String getBookmark();",0.7265625
78564,"/** 
 * Handle the fetch event. Implementation should call methods on  the row object to set data of the current row being fetched.
 * @return true if current data row has been populated. false if the last call to fetch has returned the last data row, and no more data is available.   
 */
boolean fetch(IDataSetInstance dataSet,IUpdatableDataSetRow row);","/** 
 * Handle the fetch event. Implementation should call methods on the row object to set data of the current row being fetched.
 * @return true if current data row has been populated. false if the lastcall to fetch has returned the last data row, and no more data is available.
 */
boolean fetch(IDataSetInstance dataSet,IUpdatableDataSetRow row);",0.9929078014184396
78565,"/** 
 * Method for Script Data Set to return dynamically generated data set  metadata. This method is called  before the open event  is fired. If the data set implementation has dynamically generated metadata, it should call the addColumn method on the metaData object to add all its column definition, then return true. If the data set implementation uses the static metadata defined in the data set design , it should return false.
 */
boolean describe(IDataSetInstance dataSet,IScriptedDataSetMetaData metaData);","/** 
 * Method for Script Data Set to return dynamically generated data set metadata. This method is called before the open event is fired. If the data set implementation has dynamically generated metadata, it should call the addColumn method on the metaData object to add all its column definition, then return true. If the data set implementation uses the static metadata defined in the data set design , it should return false.
 */
boolean describe(IDataSetInstance dataSet,IScriptedDataSetMetaData metaData);",0.997078870496592
78566,"/** 
 * @param hyperlink
 * @param bookmark
 * @param target
 * @return
 */
private PdfAction createPdfAction(String hyperlink,String bookmark,String target){
  if (""String_Node_Str"".equalsIgnoreCase(target)) {
    return new PdfAction(hyperlink);
  }
 else {
    if (null == hyperlink) {
      return PdfAction.gotoLocalPage(bookmark,false);
    }
 else {
      return PdfAction.gotoRemotePage(hyperlink,bookmark,false,false);
    }
  }
}","/** 
 * create a PdfAction
 * @param hyperlink			
 * @param bookmark
 * @param target			if target equals ""_blank"", the target will be opened in a new window,else the target will be opened in the current window.
 * @return					the created PdfAction.
 */
private PdfAction createPdfAction(String hyperlink,String bookmark,String target){
  if (""String_Node_Str"".equalsIgnoreCase(target)) {
    return new PdfAction(hyperlink);
  }
 else {
    if (null == hyperlink) {
      return PdfAction.gotoLocalPage(bookmark,false);
    }
 else {
      return PdfAction.gotoRemotePage(hyperlink,bookmark,false,false);
    }
  }
}",0.8322274881516588
78567,"private void loadResultSetMetaData() throws EngineException {
  IDocArchiveReader reader=reportDocReader.getArchive();
  try {
    ObjectInputStream ois=new ObjectInputStream(reader.getStream(AbstractDataEngine.DATA_META_STREAM));
    mapQueryIDToResultSetName=(HashMap)ois.readObject();
    ois.close();
  }
 catch (  IOException ioe) {
    executionContext.addException(new EngineException(""String_Node_Str"",ioe));
    logger.log(Level.SEVERE,ioe.getMessage(),ioe);
  }
catch (  ClassNotFoundException cnfe) {
    executionContext.addException(new EngineException(""String_Node_Str"",cnfe));
    logger.log(Level.SEVERE,cnfe.getMessage(),cnfe);
  }
}","private void loadResultSetMetaData() throws EngineException {
  IDocArchiveReader reader=reportDocReader.getArchive();
  try {
    DataInputStream dis=new DataInputStream(reader.getStream(AbstractDataEngine.DATA_META_STREAM));
    mapQueryIDToResultSetName=new HashMap();
    int size=IOUtil.readInt(dis);
    for (int i=0; i < size; i++) {
      String queryId=IOUtil.readString(dis);
      LinkedList ridList=new LinkedList();
      readStringList(dis,ridList);
      mapQueryIDToResultSetName.put(queryId,ridList);
    }
    dis.close();
  }
 catch (  IOException ioe) {
    executionContext.addException(new EngineException(""String_Node_Str"",ioe));
    logger.log(Level.SEVERE,ioe.getMessage(),ioe);
  }
}",0.6416482707873437
78568,"private void storeDteMetaInfo(){
  try {
    ObjectOutputStream oos=new ObjectOutputStream(writer.createRandomAccessStream(DATA_META_STREAM));
    oos.writeObject(mapQueryIDToResultSetIDs);
    oos.writeObject(queryResultRelations);
    oos.writeObject(queryExpressionIDs);
    oos.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","private void storeDteMetaInfo(){
  try {
    DataOutputStream dos=new DataOutputStream(writer.createRandomAccessStream(DATA_META_STREAM));
    int size=mapQueryIDToResultSetIDs.size();
    IOUtil.writeInt(dos,size);
    Set keySet=mapQueryIDToResultSetIDs.keySet();
    Iterator keyIter=keySet.iterator();
    while (keyIter.hasNext()) {
      String queryId=(String)keyIter.next();
      IOUtil.writeString(dos,queryId);
      LinkedList resultList=(LinkedList)mapQueryIDToResultSetIDs.get(queryId);
      writeStringList(dos,resultList);
    }
    size=queryResultRelations.size();
    IOUtil.writeInt(dos,size);
    for (int i=0; i < size; i++) {
      Key key=(Key)queryResultRelations.get(i);
      IOUtil.writeString(dos,key.parentRSID);
      IOUtil.writeString(dos,key.resultSetID);
      IOUtil.writeString(dos,key.rowid);
    }
    size=queryExpressionIDs.size();
    IOUtil.writeInt(dos,size);
    for (int i=0; i < size; i++) {
      QueryID queryId=(QueryID)queryExpressionIDs.get(i);
      writeQueryID(dos,queryId);
    }
    dos.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.3599182004089979
78569,"private void loadDteMetaInfo(){
  try {
    ObjectInputStream ois=new ObjectInputStream(reader.getStream(DATA_META_STREAM));
    mapQueryIDToResultSetIDs=(HashMap)ois.readObject();
    queryResultRelations=(ArrayList)ois.readObject();
    queryExpressionIDs=(ArrayList)ois.readObject();
    ois.close();
  }
 catch (  IOException ioe) {
    context.addException(new EngineException(""String_Node_Str"",ioe));
    logger.log(Level.SEVERE,ioe.getMessage(),ioe);
  }
catch (  ClassNotFoundException cnfe) {
    context.addException(new EngineException(""String_Node_Str"",cnfe));
    logger.log(Level.SEVERE,cnfe.getMessage(),cnfe);
  }
}","private void loadDteMetaInfo(){
  try {
    DataInputStream dis=new DataInputStream(reader.getStream(DATA_META_STREAM));
    mapQueryIDToResultSetIDs=new HashMap();
    int size=IOUtil.readInt(dis);
    for (int i=0; i < size; i++) {
      String queryId=IOUtil.readString(dis);
      LinkedList ridList=new LinkedList();
      readStringList(dis,ridList);
      mapQueryIDToResultSetIDs.put(queryId,ridList);
    }
    size=IOUtil.readInt(dis);
    queryResultRelations=new ArrayList();
    for (int i=0; i < size; i++) {
      String parentRSID=IOUtil.readString(dis);
      String resultSetID=IOUtil.readString(dis);
      String rowid=IOUtil.readString(dis);
      Key key=new Key(parentRSID,rowid,resultSetID);
      queryResultRelations.add(key);
    }
    size=IOUtil.readInt(dis);
    queryExpressionIDs=new ArrayList();
    for (int i=0; i < size; i++) {
      QueryID queryId=new QueryID();
      readQueryID(dis,queryId);
      queryExpressionIDs.add(queryId);
    }
    dis.close();
  }
 catch (  IOException ioe) {
    context.addException(new EngineException(""String_Node_Str"",ioe));
    logger.log(Level.SEVERE,ioe.getMessage(),ioe);
  }
}",0.4246498599439776
78570,"public void moduleDisposed(ModuleHandle targetElement,DisposeEvent ev){
  ReportMediator media=(ReportMediator)mediatorMap.get(targetElement);
  if (media != null) {
    media.dispose();
    mediatorMap.remove(targetElement);
  }
  targetElement.removeDisposeListener(disposeLitener);
}","public void moduleDisposed(ModuleHandle targetElement,DisposeEvent ev){
  ReportMediator media=(ReportMediator)mediatorMap.get(targetElement);
  if (media != null) {
    media.dispose();
  }
  mediatorMap.remove(targetElement);
  targetElement.removeDisposeListener(this);
}",0.8321428571428572
78571,"/** 
 * Remove cached adapter
 * @param obj Key to find the adapter
 */
public void remove(Object obj){
  map.remove(obj);
}","/** 
 * Remove cached adapter
 * @param obj Key to find the adapter
 */
public void remove(Object obj){
  removeRelated(obj);
  map.remove(obj);
}",0.9185185185185184
78572,"public void testContainElement() throws Throwable {
  showPerspective();
  openEditor();
  getView(DATA_EXPLORER_ID).setFocus();
  DataViewPage dataViewPage=(DataViewPage)((DataView)getView(DATA_EXPLORER_ID)).getCurrentPage();
  TreeViewer dataTreeViewer=(TreeViewer)PrivateAccessor.getField(dataViewPage,""String_Node_Str"");
  ContentOutlinePage outlinePage=(ContentOutlinePage)PrivateAccessor.getField(UIUtil.getActiveReportEditor(),""String_Node_Str"");
  TreeViewer outlineTreeViewer=(TreeViewer)PrivateAccessor.getField(outlinePage,""String_Node_Str"");
  ReportDesignHandle reportHandle=(ReportDesignHandle)SessionHandleAdapter.getInstance().getReportDesignHandle();
  DataSourceHandle dataSource=reportHandle.getElementFactory().newOdaDataSource(null,null);
  DataSetHandle dataSet=reportHandle.getElementFactory().newScriptDataSet(null);
  dataSet.setDataSource(dataSource.getName());
  ScalarParameterHandle param1=reportHandle.getElementFactory().newScalarParameter(""String_Node_Str"");
  ScalarParameterHandle param2=reportHandle.getElementFactory().newScalarParameter(""String_Node_Str"");
  ParameterGroupHandle paramGroup=reportHandle.getElementFactory().newParameterGroup(null);
  paramGroup.addElement(param2,ParameterGroupHandle.PARAMETERS_SLOT);
  reportHandle.getDataSources().add(dataSource);
  reportHandle.getDataSets().add(dataSet);
  reportHandle.getParameters().add(param1);
  reportHandle.getParameters().add(paramGroup);
  LabelHandle label1=reportHandle.getElementFactory().newLabel(null);
  LabelHandle label2=reportHandle.getElementFactory().newLabel(null);
  TextItemHandle text=reportHandle.getElementFactory().newTextItem(null);
  ListHandle list=reportHandle.getElementFactory().newList(null);
  ListGroupHandle listGroup=reportHandle.getElementFactory().newListGroup();
  listGroup.getHeader().add(label2);
  list.getDetail().add(text);
  list.getGroups().add(listGroup);
  reportHandle.getBody().add(label1);
  reportHandle.getBody().add(list);
  getView(DATA_EXPLORER_ID).setFocus();
  dataTreeViewer.refresh();
  getView(OUTLINE_ID).setFocus();
  outlineTreeViewer.refresh();
  try {
    assertTrue(UIUtil.containElement(outlineTreeViewer,label1));
    assertTrue(UIUtil.containElement(outlineTreeViewer,label2));
    assertTrue(UIUtil.containElement(outlineTreeViewer,text));
    assertTrue(UIUtil.containElement(outlineTreeViewer,list));
    assertTrue(UIUtil.containElement(outlineTreeViewer,listGroup));
    assertTrue(UIUtil.containElement(dataTreeViewer,dataSource));
    assertTrue(UIUtil.containElement(dataTreeViewer,dataSet));
    assertTrue(UIUtil.containElement(dataTreeViewer,param1));
    assertTrue(UIUtil.containElement(dataTreeViewer,paramGroup));
    assertTrue(UIUtil.containElement(dataTreeViewer,param2));
    assertTrue(UIUtil.containElement(outlineTreeViewer,dataSource));
    assertTrue(UIUtil.containElement(outlineTreeViewer,dataSet));
    assertTrue(UIUtil.containElement(outlineTreeViewer,param1));
    assertTrue(UIUtil.containElement(outlineTreeViewer,paramGroup));
    assertTrue(UIUtil.containElement(outlineTreeViewer,param2));
    assertFalse(UIUtil.containElement(dataTreeViewer,label1));
    assertFalse(UIUtil.containElement(dataTreeViewer,label2));
    assertFalse(UIUtil.containElement(dataTreeViewer,text));
    assertFalse(UIUtil.containElement(dataTreeViewer,list));
    assertFalse(UIUtil.containElement(dataTreeViewer,listGroup));
  }
 catch (  Throwable e) {
    throw e;
  }
 finally {
    closeEditor();
  }
}","public void testContainElement() throws Throwable {
  showPerspective();
  openEditor();
  ContentOutlinePage outlinePage=(ContentOutlinePage)PrivateAccessor.getField(UIUtil.getActiveReportEditor(),""String_Node_Str"");
  TreeViewer outlineTreeViewer=(TreeViewer)PrivateAccessor.getField(outlinePage,""String_Node_Str"");
  ReportDesignHandle reportHandle=(ReportDesignHandle)SessionHandleAdapter.getInstance().getReportDesignHandle();
  DataSourceHandle dataSource=reportHandle.getElementFactory().newOdaDataSource(null,null);
  DataSetHandle dataSet=reportHandle.getElementFactory().newScriptDataSet(null);
  dataSet.setDataSource(dataSource.getName());
  ScalarParameterHandle param1=reportHandle.getElementFactory().newScalarParameter(""String_Node_Str"");
  ScalarParameterHandle param2=reportHandle.getElementFactory().newScalarParameter(""String_Node_Str"");
  ParameterGroupHandle paramGroup=reportHandle.getElementFactory().newParameterGroup(null);
  paramGroup.addElement(param2,ParameterGroupHandle.PARAMETERS_SLOT);
  reportHandle.getDataSources().add(dataSource);
  reportHandle.getDataSets().add(dataSet);
  reportHandle.getParameters().add(param1);
  reportHandle.getParameters().add(paramGroup);
  LabelHandle label1=reportHandle.getElementFactory().newLabel(null);
  LabelHandle label2=reportHandle.getElementFactory().newLabel(null);
  TextItemHandle text=reportHandle.getElementFactory().newTextItem(null);
  ListHandle list=reportHandle.getElementFactory().newList(null);
  ListGroupHandle listGroup=reportHandle.getElementFactory().newListGroup();
  listGroup.getHeader().add(label2);
  list.getDetail().add(text);
  list.getGroups().add(listGroup);
  reportHandle.getBody().add(label1);
  reportHandle.getBody().add(list);
  getView(OUTLINE_ID).setFocus();
  outlineTreeViewer.refresh();
  try {
    assertTrue(UIUtil.containElement(outlineTreeViewer,label1));
    assertTrue(UIUtil.containElement(outlineTreeViewer,label2));
    assertTrue(UIUtil.containElement(outlineTreeViewer,text));
    assertTrue(UIUtil.containElement(outlineTreeViewer,list));
    assertTrue(UIUtil.containElement(outlineTreeViewer,listGroup));
    assertTrue(UIUtil.containElement(outlineTreeViewer,dataSource));
    assertTrue(UIUtil.containElement(outlineTreeViewer,dataSet));
    assertTrue(UIUtil.containElement(outlineTreeViewer,param1));
    assertTrue(UIUtil.containElement(outlineTreeViewer,paramGroup));
    assertTrue(UIUtil.containElement(outlineTreeViewer,param2));
  }
 catch (  Throwable e) {
    throw e;
  }
 finally {
    closeEditor();
  }
}",0.8125932062966031
78573,"/** 
 * @param rootPath - the absolute path of the root folder. The path is seperated by system's File seperator.
 * @param fullString - the absolute path of the stream. The path is seperated by system's File seperator.
 * @return the relative path string. The path is based on Unix syntax and starts with ""/"". 
 */
public static String generateRelativePath(String rootPath,String fullPath){
  String relativePath=null;
  if ((rootPath != null) && fullPath.startsWith(rootPath)) {
    relativePath=fullPath.substring(rootPath.length());
  }
 else   relativePath=fullPath;
  relativePath=convertToUnixString(relativePath);
  if (!relativePath.startsWith(UNIX_SEPERATOR))   relativePath=UNIX_SEPERATOR + relativePath.substring(1);
  return relativePath;
}","/** 
 * @param rootPath - the absolute path of the root folder. The path is seperated by system's File seperator.
 * @param fullString - the absolute path of the stream. The path is seperated by system's File seperator.
 * @return the relative path string. The path is based on Unix syntax and starts with ""/"". 
 */
public static String generateRelativePath(String rootPath,String fullPath){
  String relativePath=null;
  if ((rootPath != null) && fullPath.startsWith(rootPath)) {
    relativePath=fullPath.substring(rootPath.length());
  }
 else   relativePath=fullPath;
  relativePath=convertToUnixString(relativePath);
  if (!relativePath.startsWith(UNIX_SEPERATOR))   relativePath=UNIX_SEPERATOR + relativePath;
  return relativePath;
}",0.9912926992632284
78574,"/** 
 * Compound File Format: <br> 1long(stream section position) + 1long(entry number in lookup map) + lookup map section + stream data section <br> The Lookup map is a hash map. The key is the relative path of the stram. The entry contains two long number. The first long is the start postion. The second long is the length of the stream. <br>
 * @param tempFolder
 * @param fileName
 * @return Whether the compound file was created successfully.
 */
private void createFileFromFolder() throws IOException {
  File targetFile=new File(fileName);
  ArchiveUtil.DeleteAllFiles(targetFile);
  RandomAccessFile compoundFile=null;
  compoundFile=new RandomAccessFile(targetFile,""String_Node_Str"");
  compoundFile.writeLong(0);
  compoundFile.writeLong(0);
  ArrayList fileList=new ArrayList();
  getAllFiles(new File(tempFolder),fileList);
  long streamRelativePosition=0;
  long entryNum=0;
  for (int i=0; i < fileList.size(); i++) {
    File file=(File)fileList.get(i);
    String relativePath=ArchiveUtil.generateRelativePath(tempFolder,file.getAbsolutePath());
    compoundFile.writeUTF(relativePath);
    compoundFile.writeLong(streamRelativePosition);
    compoundFile.writeLong(file.length());
    streamRelativePosition+=file.length();
    entryNum++;
  }
  long streamSectionPos=compoundFile.getFilePointer();
  for (int i=0; i < fileList.size(); i++) {
    File file=(File)fileList.get(i);
    copyFileIntoTheArchive(file,compoundFile);
  }
  compoundFile.seek(0);
  compoundFile.writeLong(streamSectionPos);
  compoundFile.writeLong(entryNum);
  compoundFile.close();
}","/** 
 * Compound File Format: <br> 1long(stream section position) + 1long(entry number in lookup map) + lookup map section + stream data section <br> The Lookup map is a hash map. The key is the relative path of the stram. The entry contains two long number. The first long is the start postion. The second long is the length of the stream. <br>
 * @param tempFolder
 * @param fileName
 * @return Whether the compound file was created successfully.
 */
private void createFileFromFolder() throws IOException {
  File targetFile=new File(fileName);
  ArchiveUtil.DeleteAllFiles(targetFile);
  RandomAccessFile compoundFile=null;
  compoundFile=new RandomAccessFile(targetFile,""String_Node_Str"");
  compoundFile.writeLong(0);
  compoundFile.writeLong(0);
  ArrayList fileList=new ArrayList();
  getAllFiles(new File(tempFolder),fileList);
  if (streamSorter != null) {
    ArrayList streamNameList=new ArrayList();
    for (int i=0; i < fileList.size(); i++) {
      File file=(File)fileList.get(i);
      streamNameList.add(ArchiveUtil.generateRelativePath(tempFolder,file.getAbsolutePath()));
    }
    ArrayList sortedNameList=streamSorter.sortStream(streamNameList);
    if (sortedNameList != null) {
      fileList.clear();
      for (int i=0; i < sortedNameList.size(); i++) {
        String fileName=ArchiveUtil.generateFullPath(tempFolder,(String)sortedNameList.get(i));
        fileList.add(new File(fileName));
      }
    }
  }
  long streamRelativePosition=0;
  long entryNum=0;
  for (int i=0; i < fileList.size(); i++) {
    File file=(File)fileList.get(i);
    String relativePath=ArchiveUtil.generateRelativePath(tempFolder,file.getAbsolutePath());
    compoundFile.writeUTF(relativePath);
    compoundFile.writeLong(streamRelativePosition);
    compoundFile.writeLong(file.length());
    streamRelativePosition+=file.length();
    entryNum++;
  }
  long streamSectionPos=compoundFile.getFilePointer();
  for (int i=0; i < fileList.size(); i++) {
    File file=(File)fileList.get(i);
    copyFileIntoTheArchive(file,compoundFile);
  }
  compoundFile.seek(0);
  compoundFile.writeLong(streamSectionPos);
  compoundFile.writeLong(entryNum);
  compoundFile.close();
}",0.8258785942492013
78575,"public void close(){
  try {
    if (coreStream != null) {
      try {
        IOUtil.writeString(coreStream,designName);
        IOUtil.writeMap(coreStream,paramters);
        IOUtil.writeMap(coreStream,globalVariables);
      }
  finally {
        try {
          coreStream.close();
        }
 catch (        Exception ex) {
        }
      }
    }
    archive.finish();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
}","public void close(){
  try {
    if (coreStream != null) {
      try {
        IOUtil.writeString(coreStream,designName);
        IOUtil.writeMap(coreStream,paramters);
        IOUtil.writeMap(coreStream,globalVariables);
      }
  finally {
        try {
          coreStream.close();
        }
 catch (        Exception ex) {
        }
      }
    }
    archive.setStreamSorter(new ReportDocumentStreamSorter());
    archive.finish();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
}",0.9359104781281792
78576,"/** 
 * Removes the model listener.
 */
private void removeModelLister(){
  if (getModel() instanceof DesignElementHandle) {
    ((DesignElementHandle)getModel()).removeListener(this);
  }
}","/** 
 * Removes the model listener.
 */
protected void removeModelLister(){
  if (getModel() instanceof DesignElementHandle) {
    ((DesignElementHandle)getModel()).removeListener(this);
  }
}",0.9790575916230366
78577,"private void validateSelectedColumns(IBaseQueryDefinition query) throws EngineException {
}","private void validateSelectedColumns(ReportItemDesign reportItem) throws EngineException {
}",0.8087431693989071
78578,"public List getResultSetList() throws EngineException {
  if (resultMetaList == null) {
    if (isMetaDataPrepared == false) {
      prepareMetaData();
    }
    resultMetaList=new ArrayList();
    String dispName=null;
    IBaseQueryDefinition query=null;
    if (instanceId != null) {
      ReportItemDesign reportItem=(ReportItemDesign)report.getReportItemByID(instanceId.getComponentID());
      dispName=(String)mapReportItemToDisplayName.get(reportItem);
      query=reportItem.getQuery();
      addToResultSetList(query,dispName);
    }
 else {
      Set keySet=mapDispNameToQuery.keySet();
      Iterator keyIter=keySet.iterator();
      while (keyIter.hasNext()) {
        dispName=(String)keyIter.next();
        query=(IBaseQueryDefinition)mapDispNameToQuery.get(dispName);
        addToResultSetList(query,dispName);
      }
    }
  }
  return resultMetaList;
}","public List getResultSetList() throws EngineException {
  if (resultMetaList == null) {
    prepareMetaData();
    resultMetaList=new ArrayList();
    String dispName=null;
    if (instanceId != null) {
      ReportItemDesign reportItem=(ReportItemDesign)report.getReportItemByID(instanceId.getComponentID());
      dispName=(String)mapReportItemToDisplayName.get(reportItem);
      addToResultSetList(reportItem,dispName);
    }
 else {
      Set keySet=mapDispNameToResultSetName.keySet();
      Iterator keyIter=keySet.iterator();
      while (keyIter.hasNext()) {
        dispName=(String)keyIter.next();
        String resultSetName=(String)mapDispNameToResultSetName.get(dispName);
        ReportItemDesign reportItem=(ReportItemDesign)mapResultSetToReportItem.get(resultSetName);
        addToResultSetList(reportItem,dispName);
      }
    }
  }
  return resultMetaList;
}",0.7199087278950371
78579,"private void addToResultSetList(IBaseQueryDefinition query,String displayName){
}","private void addToResultSetList(ReportItemDesign reportItem,String displayName){
}",0.7852760736196319
78580,"private void prepareMetaData() throws EngineException {
}","private void prepareMetaData(){
}",0.7333333333333333
78581,"/** 
 * Returns the list of validation nodes.
 * @param element the element to validate
 * @param triggers the validation triggers
 * @param onlyOnSelf whether the validator is applied on the given element itself
 * @return the list of validation nodes
 */
public static List getValidationNodes(DesignElement element,SemanticTriggerDefnSet triggers,boolean onlyOnSelf){
  List nodes=new ArrayList();
  List validatorDefns=triggers.getTriggerList();
  if (validatorDefns != null && !validatorDefns.isEmpty()) {
    Iterator iter=validatorDefns.iterator();
    while (iter.hasNext()) {
      SemanticTriggerDefn triggerDefn=(SemanticTriggerDefn)iter.next();
      String targetName=triggerDefn.getTargetElement();
      if (StringUtil.isBlank(targetName)) {
        ValidationNode node=new ValidationNode(element,triggerDefn);
        nodes.add(node);
      }
 else {
        ElementDefn targetDefn=(ElementDefn)MetaDataDictionary.getInstance().getElement(targetName);
        ElementDefn elementDefn=(ElementDefn)element.getDefn();
        if (targetDefn.isKindOf(elementDefn) || !onlyOnSelf) {
          ValidationNode node=new ValidationNode(element,triggerDefn);
          nodes.add(node);
        }
      }
    }
  }
  return nodes;
}","/** 
 * Returns the list of validation nodes.
 * @param element the element to validate
 * @param triggers the validation triggers
 * @param onlyOnSelf whether the validator is applied on the given element itself
 * @return the list of validation nodes
 */
public static List getValidationNodes(DesignElement element,SemanticTriggerDefnSet triggers,boolean onlyOnSelf){
  List nodes=new ArrayList();
  List validatorDefns=triggers.getTriggerList();
  if (validatorDefns == null || validatorDefns.isEmpty())   return nodes;
  Iterator iter=validatorDefns.iterator();
  while (iter.hasNext()) {
    SemanticTriggerDefn triggerDefn=(SemanticTriggerDefn)iter.next();
    String targetName=triggerDefn.getTargetElement();
    if (StringUtil.isBlank(targetName)) {
      nodes.add(new ValidationNode(element,triggerDefn));
      continue;
    }
    ElementDefn targetDefn=(ElementDefn)MetaDataDictionary.getInstance().getElement(targetName);
    ElementDefn elementDefn=(ElementDefn)element.getDefn();
    if (targetDefn.isKindOf(elementDefn) || !onlyOnSelf)     nodes.add(new ValidationNode(element,triggerDefn));
  }
  return nodes;
}",0.7367976341360372
78582,"/** 
 * Reorganizes the nodes in the following aspects in order to improve the efficiency: <ul> <li>The duplicate validation is removed from the node list. <li>The pre-requisite validator is shifted to the beginning of the node list. </ul>
 * @param nodes the validation nodes to reorganize
 * @return the reorganized nodes
 */
private List reorganize(List nodes){
  List newList=new ArrayList();
  Iterator iter=nodes.iterator();
  while (iter.hasNext()) {
    ValidationNode node=(ValidationNode)iter.next();
    boolean found=false;
    int count=newList.size();
    for (int i=0; i < count; i++) {
      ValidationNode nodeInList=(ValidationNode)newList.get(i);
      String validationID1=node.getTriggerDefn().getValidationID();
      String validationID2=nodeInList.getTriggerDefn().getValidationID();
      if (StringUtil.isEqual(validationID1,validationID2)) {
        found=true;
        break;
      }
    }
    if (!found) {
      if (node.getTriggerDefn().isPreRequisite())       newList.add(0,node);
 else       newList.add(node);
    }
  }
  return newList;
}","/** 
 * Reorganizes the nodes in the following aspects in order to improve the efficiency: <ul> <li>The duplicate validation is removed from the node list. <li>The pre-requisite validator is shifted to the beginning of the node list. </ul>
 * @param nodes the validation nodes to reorganize
 * @return the reorganized nodes
 */
private List reorganize(List nodes){
  List newList=new ArrayList();
  Iterator iter=nodes.iterator();
  Set validationIDs=new HashSet();
  while (iter.hasNext()) {
    ValidationNode node=(ValidationNode)iter.next();
    String id=node.getTriggerDefn().getValidationID();
    if (!validationIDs.contains(id)) {
      validationIDs.add(id);
      if (node.getTriggerDefn().isPreRequisite())       newList.add(0,node);
 else       newList.add(node);
    }
  }
  return newList;
}",0.5907397551889303
78583,"/** 
 * @param groupKeyValues
 * @param columnNames
 * @param i
 * @return
 * @throws BirtException
 */
private boolean groupKeyValuesEqual(org.eclipse.birt.data.engine.odi.IResultIterator odiResult,Object[] groupKeyValues,String[] columnNames,int i) throws BirtException {
  Object fieldValue=odiResult.getCurrentResult().getFieldValue(columnNames[i]);
  boolean retValue=false;
  if (fieldValue == groupKeyValues[i]) {
    retValue=true;
  }
 else   if (fieldValue != null && groupKeyValues[i] != null) {
    if (fieldValue.getClass().equals(groupKeyValues[i].getClass())) {
      retValue=fieldValue.equals(groupKeyValues[i]);
    }
 else {
      Object convertedOb=DataTypeUtil.convert(groupKeyValues[i],fieldValue.getClass());
      retValue=fieldValue.equals(convertedOb);
    }
  }
  return retValue;
}","/** 
 * @param groupKeyValues
 * @param columnNames
 * @param i
 * @return
 * @throws BirtException
 */
private boolean groupKeyValuesEqual(org.eclipse.birt.data.engine.odi.IResultIterator odiResult,Object[] groupKeyValues,String[] columnNames,int i) throws BirtException {
  Object fieldValue=odiResult.getCurrentResult().getFieldValue(columnNames[i]);
  boolean retValue=false;
  if (fieldValue == groupKeyValues[i]) {
    retValue=true;
  }
 else   if (fieldValue != null && groupKeyValues[i] != null) {
    if (fieldValue.getClass().equals(groupKeyValues[i].getClass())) {
      retValue=isTwoObjectEqual(fieldValue,groupKeyValues[i]);
    }
 else {
      Object convertedOb=DataTypeUtil.convert(groupKeyValues[i],fieldValue.getClass());
      retValue=isTwoObjectEqual(fieldValue,convertedOb);
    }
  }
  return retValue;
}",0.9536019536019535
78584,"/** 
 * A convenience method provided to lookup externalized messages associated with a given message key.
 * @param sChartKey The key using which an externalized message is being looked up.
 * @return The externalized message associated with the specified key.
 */
public final String externalizedMessage(String sChartKey){
  if (iml == null) {
    final int iKeySeparator=sChartKey.indexOf(IMessageLookup.KEY_SEPARATOR);
    if (iKeySeparator != -1) {
      return sChartKey.substring(iKeySeparator + 1);
    }
    return sChartKey;
  }
  return iml.getMessageValue(sChartKey,lcl);
}","/** 
 * A convenience method provided to lookup externalized messages associated with a given message key.
 * @param sChartKey The key using which an externalized message is being looked up.
 * @return The externalized message associated with the specified key.
 */
public final String externalizedMessage(String sChartKey){
  String sKey=sChartKey;
  String sDefaultValue=sChartKey;
  final int iKeySeparator=sChartKey.indexOf(IMessageLookup.KEY_SEPARATOR);
  if (iKeySeparator != -1) {
    sDefaultValue=sChartKey.substring(iKeySeparator + 1);
  }
  if (iml == null) {
    return sDefaultValue;
  }
 else {
    if (iKeySeparator > 0) {
      sKey=sChartKey.substring(0,iKeySeparator);
    }
 else     if (iKeySeparator == 0) {
      return sDefaultValue;
    }
 else {
      sKey=sDefaultValue;
    }
    String localizedValue=iml.getMessageValue(sKey,getLocale());
    if (localizedValue == null || localizedValue.equals(""String_Node_Str""))     return sDefaultValue;
 else     return localizedValue;
  }
}",0.6603892027620841
78585,"public Object onRowSets(IRowSet[] irsa) throws BirtException {
  if (irsa == null || irsa.length != 1 || ibqda == null || ibqda.length != 1 || irsa[0] == null) {
    logger.log(new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,""String_Node_Str"",ResourceBundle.getBundle(Messages.REPORT_ITEM,rtc.getLocale())));
    return null;
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
  try {
    String javaHandlerClass=handle.getEventHandlerClass();
    if (javaHandlerClass != null && javaHandlerClass.length() > 0) {
      cm.setScript(javaHandlerClass);
    }
    BIRTDataRowEvaluator rowAdapter=new BIRTDataRowEvaluator(irsa[0],ibqda[0]);
    Generator.instance().bindData(rowAdapter,new BIRTActionEvaluator(),cm,rtc);
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    try {
      fChartImage=File.createTempFile(""String_Node_Str"",""String_Node_Str"" + sExtension);
      logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{sExtension,fChartImage.getPath()}));
    }
 catch (    IOException ioex) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ioex);
    }
    idr=PluginSettings.instance().getDevice(""String_Node_Str"" + sExtension.toUpperCase(Locale.US));
    idr.setProperty(IDeviceRenderer.DPI_RESOLUTION,new Integer(dpi));
    final Bounds originalBounds=cm.getBlock().getBounds();
    final Bounds bo=(Bounds)EcoreUtil.copy(originalBounds);
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",bo));
    final Generator gr=Generator.instance();
    GeneratedChartState gcs=null;
    rtc.setScriptClassLoader(new BIRTScriptClassLoader());
    rtc.setActionRenderer(new BIRTActionRenderer(this.handle,this.ah,rowAdapter,this.context));
    gcs=gr.build(idr.getDisplayServer(),cm,bo,new BIRTExternalContext(context),rtc,new ChartReportStyleProcessor(handle));
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    idr.setProperty(IDeviceRenderer.FILE_IDENTIFIER,fChartImage.getPath());
    idr.setProperty(IDeviceRenderer.UPDATE_NOTIFIER,new EmptyUpdateNotifier(cm,gcs.getChartModel()));
    gr.render(idr,gcs);
    rowAdapter.close();
    try {
      fis=new FileInputStream(fChartImage.getPath());
    }
 catch (    IOException ioex) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ioex);
    }
    if (!""String_Node_Str"".equals(sExtension) && idr instanceof IImageMapEmitter) {
      imageMap=((IImageMapEmitter)idr).getImageMap();
    }
  }
 catch (  BirtException ex) {
    if (ex.getCause() instanceof ChartException && ((ChartException)ex.getCause()).getType() == ChartException.ZERO_DATASET) {
      logger.log(ex);
      return null;
    }
    if ((ex.getCause() instanceof ChartException && ((ChartException)ex.getCause()).getType() == ChartException.INVALID_IMAGE_SIZE) || (ex instanceof ChartException && ((ChartException)ex).getType() == ChartException.INVALID_IMAGE_SIZE)) {
      logger.log(ex);
      return null;
    }
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw ex;
  }
catch (  RuntimeException ex) {
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ex);
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
  if (""String_Node_Str"".equals(sExtension)) {
    return fis;
  }
 else {
    return new Object[]{fis,imageMap};
  }
}","public Object onRowSets(IRowSet[] irsa) throws BirtException {
  if (irsa == null || irsa.length != 1 || ibqda == null || ibqda.length != 1 || irsa[0] == null) {
    logger.log(new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,""String_Node_Str"",ResourceBundle.getBundle(Messages.REPORT_ITEM,rtc.getLocale())));
    return null;
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
  try {
    String javaHandlerClass=handle.getEventHandlerClass();
    if (javaHandlerClass != null && javaHandlerClass.length() > 0) {
      cm.setScript(javaHandlerClass);
    }
    BIRTDataRowEvaluator rowAdapter=new BIRTDataRowEvaluator(irsa[0],ibqda[0]);
    Generator.instance().bindData(rowAdapter,new BIRTActionEvaluator(),cm,rtc);
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    try {
      fChartImage=File.createTempFile(""String_Node_Str"",""String_Node_Str"" + sExtension);
      logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{sExtension,fChartImage.getPath()}));
    }
 catch (    IOException ioex) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ioex);
    }
    idr=PluginSettings.instance().getDevice(""String_Node_Str"" + sExtension.toUpperCase(Locale.US));
    idr.setProperty(IDeviceRenderer.DPI_RESOLUTION,new Integer(dpi));
    final Bounds originalBounds=cm.getBlock().getBounds();
    final Bounds bo=(Bounds)EcoreUtil.copy(originalBounds);
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",bo));
    final Generator gr=Generator.instance();
    GeneratedChartState gcs=null;
    rtc.setScriptClassLoader(new BIRTScriptClassLoader());
    rtc.setActionRenderer(new BIRTActionRenderer(this.handle,this.ah,rowAdapter,this.context));
    rtc.setMessageLookup(new BIRTMessageLookup(context));
    gcs=gr.build(idr.getDisplayServer(),cm,bo,new BIRTExternalContext(context),rtc,new ChartReportStyleProcessor(handle));
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    idr.setProperty(IDeviceRenderer.FILE_IDENTIFIER,fChartImage.getPath());
    idr.setProperty(IDeviceRenderer.UPDATE_NOTIFIER,new EmptyUpdateNotifier(cm,gcs.getChartModel()));
    gr.render(idr,gcs);
    rowAdapter.close();
    try {
      fis=new FileInputStream(fChartImage.getPath());
    }
 catch (    IOException ioex) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ioex);
    }
    if (!""String_Node_Str"".equals(sExtension) && idr instanceof IImageMapEmitter) {
      imageMap=((IImageMapEmitter)idr).getImageMap();
    }
  }
 catch (  BirtException ex) {
    if (ex.getCause() instanceof ChartException && ((ChartException)ex.getCause()).getType() == ChartException.ZERO_DATASET) {
      logger.log(ex);
      return null;
    }
    if ((ex.getCause() instanceof ChartException && ((ChartException)ex.getCause()).getType() == ChartException.INVALID_IMAGE_SIZE) || (ex instanceof ChartException && ((ChartException)ex).getType() == ChartException.INVALID_IMAGE_SIZE)) {
      logger.log(ex);
      return null;
    }
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw ex;
  }
catch (  RuntimeException ex) {
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ex);
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
  if (""String_Node_Str"".equals(sExtension)) {
    return fis;
  }
 else {
    return new Object[]{fis,imageMap};
  }
}",0.9919309961046188
78586,"public void widgetSelected(SelectionEvent e){
  ExternalizedTextEditorDialog editor=new ExternalizedTextEditorDialog(getShell(),SWT.APPLICATION_MODAL,buildString(),keys,serviceprovider);
  String sTxt=editor.open();
  if (sTxt != null) {
    this.setText(sTxt);
    if (sKey == null || sKey.length() == 0) {
      txtSelection.setEnabled(true);
    }
 else {
      txtSelection.setEnabled(false);
    }
    fireEvent();
  }
}","public void widgetSelected(SelectionEvent e){
  ExternalizedTextEditorDialog editor=new ExternalizedTextEditorDialog(getShell(),SWT.APPLICATION_MODAL,buildString(),keys,serviceprovider);
  String sTxt=editor.open(sCurrent);
  if (sTxt != null) {
    this.setText(sTxt);
    fireEvent();
  }
}",0.7587168758716876
78587,"private String buildString(){
  return sKey + ExternalizedTextEditorComposite.SEPARATOR + sCurrent;
}","private String buildString(){
  if (sKey != null && !sKey.equals(""String_Node_Str"")) {
    return sKey + ExternalizedTextEditorComposite.SEPARATOR + sCurrent;
  }
 else   return sCurrent;
}",0.696551724137931
78588,"public void setEnabled(boolean bState){
  this.txtSelection.setEnabled(bState);
  this.btnDown.setEnabled(bState);
  this.bEnabled=bState;
}","public void setEnabled(boolean bState){
  if (bState) {
    if (sKey == null || sKey.length() == 0) {
      txtSelection.setEnabled(true);
    }
  }
 else {
    this.txtSelection.setEnabled(bState);
  }
  this.btnDown.setEnabled(bState);
  this.bEnabled=bState;
}",0.630272952853598
78589,"public String getValue(String str){
  String sTmp=""String_Node_Str"";
  sTmp=getKey(str);
  if (""String_Node_Str"".equals(sTmp)) {
    int iSeparator=str.indexOf(SEPARATOR) + SEPARATOR.length();
    if (iSeparator == (-1 + SEPARATOR.length())) {
      iSeparator=0;
    }
    return str.substring(iSeparator);
  }
  sTmp=serviceprovider.getValue(sTmp);
  if (sTmp == null || ""String_Node_Str"".equals(sTmp)) {
    sTmp=Messages.getString(""String_Node_Str"");
  }
  return sTmp;
}","public String getValue(String str){
  int iSeparator=str.indexOf(SEPARATOR) + SEPARATOR.length();
  if (iSeparator == (-1 + SEPARATOR.length())) {
    iSeparator=0;
  }
  return str.substring(iSeparator);
}",0.604992657856094
78590,"public ExternalizedTextEditorComposite(Composite parent,int style,int iHeightHint,int iWidthHint,List keys,IUIServiceProvider serviceprovider,String sText){
  super(parent,SWT.NONE);
  this.iStyle=style;
  this.iHeightHint=iHeightHint;
  this.iWidthHint=iWidthHint;
  this.keys=keys;
  this.serviceprovider=serviceprovider;
  sKey=getKey(sText);
  sCurrent=getValue(sText);
  init();
  placeComponents();
}","public ExternalizedTextEditorComposite(Composite parent,int style,int iHeightHint,int iWidthHint,List keys,IUIServiceProvider serviceprovider,String sText){
  super(parent,SWT.NONE);
  this.iStyle=style;
  this.iHeightHint=iHeightHint;
  this.iWidthHint=iWidthHint;
  this.keys=keys;
  this.serviceprovider=serviceprovider;
  init();
  placeComponents();
  setText(sText);
}",0.8743589743589744
78591,"private void placeComponents(){
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=1;
  glContent.marginHeight=0;
  glContent.marginWidth=0;
  this.setLayout(glContent);
  txtSelection=new TextEditorComposite(this,iStyle);
  if (sKey == null || sKey.length() == 0) {
    txtSelection.setEnabled(true);
  }
 else {
    txtSelection.setEnabled(false);
  }
  txtSelection.setText(sCurrent);
  GridData gdTXTSelection=new GridData(GridData.FILL_HORIZONTAL);
  if (iHeightHint > 0) {
    gdTXTSelection.heightHint=iHeightHint - 10;
  }
  if (iWidthHint > 0) {
    gdTXTSelection.widthHint=iWidthHint;
  }
  txtSelection.setLayoutData(gdTXTSelection);
  txtSelection.addListener(this);
  btnDown=new Button(this,SWT.PUSH);
  GridData gdBTNDown=new GridData(GridData.VERTICAL_ALIGN_END);
  gdBTNDown.heightHint=iSize;
  gdBTNDown.widthHint=iSize;
  btnDown.setText(""String_Node_Str"");
  btnDown.setToolTipText(Messages.getString(""String_Node_Str""));
  btnDown.setLayoutData(gdBTNDown);
  btnDown.addSelectionListener(this);
}","private void placeComponents(){
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=1;
  glContent.marginHeight=0;
  glContent.marginWidth=0;
  this.setLayout(glContent);
  txtSelection=new TextEditorComposite(this,iStyle);
  GridData gdTXTSelection=new GridData(GridData.FILL_HORIZONTAL);
  if (iHeightHint > 0) {
    gdTXTSelection.heightHint=iHeightHint - 10;
  }
  if (iWidthHint > 0) {
    gdTXTSelection.widthHint=iWidthHint;
  }
  txtSelection.setLayoutData(gdTXTSelection);
  txtSelection.addListener(this);
  btnDown=new Button(this,SWT.PUSH);
  GridData gdBTNDown=new GridData(GridData.VERTICAL_ALIGN_END);
  gdBTNDown.heightHint=iSize;
  gdBTNDown.widthHint=iSize;
  btnDown.setText(""String_Node_Str"");
  btnDown.setToolTipText(Messages.getString(""String_Node_Str""));
  btnDown.setLayoutData(gdBTNDown);
  btnDown.addSelectionListener(this);
}",0.9159449821701476
78592,"public void setText(String str){
  sKey=getKey(str);
  sCurrent=getValue(str);
  txtSelection.setText(sCurrent);
}","public void setText(String str){
  sKey=getKey(str);
  sCurrent=getValue(str);
  txtSelection.setText(getLocalizedValue(str));
  if (sKey == null || sKey.length() == 0) {
    txtSelection.setEnabled(true);
  }
 else {
    txtSelection.setEnabled(false);
  }
}",0.5522788203753352
78593,"private String getDisplayValue(){
  if (cbExternalize.getSelection()) {
    return new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{getKeyComponent(sResult)});
  }
  return getValueComponent(sResult);
}","private String getDisplayValue(){
  if (cbExternalize.getSelection()) {
    if (defaultValue == null || defaultValue.equals(""String_Node_Str""))     return new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{getKeyComponent(sResult)});
 else     return defaultValue;
  }
  return getValueComponent(sResult);
}",0.8170515097690941
78594,"private String buildString(){
  StringBuffer sbText=new StringBuffer(""String_Node_Str"");
  String sKey=cmbKeys.getText();
  if (cbExternalize.getSelection()) {
    sbText.append(sKey);
    sbText.append(ExternalizedTextEditorComposite.SEPARATOR);
  }
  sbText.append(txtValue.getText());
  return sbText.toString();
}","/** 
 * @return ""key=defaultValue""
 */
private String buildString(){
  StringBuffer sbText=new StringBuffer(""String_Node_Str"");
  String sKey=cmbKeys.getText();
  if (cbExternalize.getSelection()) {
    sbText.append(sKey);
    sbText.append(ExternalizedTextEditorComposite.SEPARATOR);
  }
  sbText.append(txtValue.getText());
  return sbText.toString();
}",0.9420505200594352
78595,"public String open(){
  Shell parent=getParent();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.APPLICATION_MODAL);
  shell.setText(Messages.getString(""String_Node_Str""));
  shell.setLayout(new FillLayout());
  placeComponents(shell);
  shell.pack();
  shell.setDefaultButton(btnAccept);
  UIHelper.centerOnScreen(shell);
  shell.open();
  Display display=parent.getDisplay();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return sResult;
}","public String open(String defaultValue){
  Shell parent=getParent();
  shell=new Shell(parent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.APPLICATION_MODAL);
  shell.setText(Messages.getString(""String_Node_Str""));
  shell.setLayout(new FillLayout());
  this.defaultValue=defaultValue;
  placeComponents(shell);
  shell.pack();
  shell.setDefaultButton(btnAccept);
  UIHelper.centerOnScreen(shell);
  shell.open();
  Display display=parent.getDisplay();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  return sResult;
}",0.9499527856468366
78596,"private void placeComponents(){
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=5;
  glContent.horizontalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  glContent.numColumns=9;
  cmpContent=new Composite(shell,SWT.NONE);
  cmpContent.setLayout(glContent);
  Label lblFont=new Label(cmpContent,SWT.NONE);
  GridData gdLFont=new GridData();
  gdLFont.heightHint=22;
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  cmbFontNames=new Combo(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBFontNames=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBFontNames.horizontalSpan=8;
  cmbFontNames.setLayoutData(gdCMBFontNames);
  cmbFontNames.addSelectionListener(this);
  Label lblSize=new Label(cmpContent,SWT.NONE);
  GridData gdLSize=new GridData();
  gdLSize.heightHint=22;
  lblSize.setLayoutData(gdLSize);
  lblSize.setText(Messages.getString(""String_Node_Str""));
  iscFontSizes=new IntegerSpinControl(cmpContent,SWT.NONE,ChartUIUtil.getFontSize(fdCurrent));
  GridData gdISCFontSizes=new GridData(GridData.FILL_HORIZONTAL);
  gdISCFontSizes.horizontalSpan=3;
  iscFontSizes.setLayoutData(gdISCFontSizes);
  iscFontSizes.setMinimum(MIN_FONT_SIZE);
  iscFontSizes.setMaximum(MAX_FONT_SIZE);
  iscFontSizes.addListener(this);
  Label lblForeground=new Label(cmpContent,SWT.NONE);
  GridData gdLForeground=new GridData();
  gdLForeground.horizontalSpan=2;
  gdLForeground.horizontalIndent=40;
  lblForeground.setLayoutData(gdLForeground);
  lblForeground.setText(Messages.getString(""String_Node_Str""));
  fccColor=new FillChooserComposite(cmpContent,SWT.NONE,cdCurrent,false,false);
  GridData gdFCCColor=new GridData(GridData.FILL_HORIZONTAL);
  gdFCCColor.horizontalSpan=3;
  fccColor.setLayoutData(gdFCCColor);
  fccColor.addListener(this);
  createFontStylePanel();
  Label lblFormat=new Label(cmpContent,SWT.NONE);
  GridData gdLFormat=new GridData();
  gdLFormat.horizontalSpan=2;
  gdLFormat.horizontalIndent=40;
  lblFormat.setLayoutData(gdLFormat);
  lblFormat.setText(Messages.getString(""String_Node_Str""));
  Composite cmpFormat=new Composite(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    cmpFormat.setLayout(layout);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=3;
    cmpFormat.setLayoutData(gd);
  }
  cbStrikethru=new Button(cmpFormat,SWT.CHECK);
  cbStrikethru.addSelectionListener(this);
  cbStrikethru.setText(Messages.getString(""String_Node_Str""));
  cbStrikethru.setSelection(fdCurrent.isSetStrikethrough() && fdCurrent.isStrikethrough());
  if (isAlignmentEnabled) {
    createAlignmentPanel();
  }
  createRotationPanel();
  Label lblPreview=new Label(cmpContent,SWT.NONE);
{
    lblPreview.setText(Messages.getString(""String_Node_Str""));
    lblPreview.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  }
  FillLayout flPreview=new FillLayout();
  flPreview.marginHeight=2;
  flPreview.marginWidth=3;
  Composite grpPreview=new Composite(cmpContent,SWT.NONE);
  GridData gdGRPPreview=new GridData(GridData.FILL_BOTH);
  gdGRPPreview.horizontalSpan=4;
  grpPreview.setLayoutData(gdGRPPreview);
  grpPreview.setLayout(flPreview);
  fcPreview=new FontCanvas(grpPreview,SWT.NONE,fdCurrent,cdCurrent,true,true,true);
  createButtonPanel();
}","private void placeComponents(){
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=5;
  glContent.horizontalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  glContent.numColumns=9;
  cmpContent=new Composite(shell,SWT.NONE);
  cmpContent.setLayout(glContent);
  Label lblFont=new Label(cmpContent,SWT.NONE);
  GridData gdLFont=new GridData();
  gdLFont.heightHint=22;
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  cmbFontNames=new Combo(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBFontNames=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBFontNames.horizontalSpan=8;
  cmbFontNames.setLayoutData(gdCMBFontNames);
  cmbFontNames.addSelectionListener(this);
  Label lblSize=new Label(cmpContent,SWT.NONE);
  GridData gdLSize=new GridData();
  gdLSize.heightHint=22;
  lblSize.setLayoutData(gdLSize);
  lblSize.setText(Messages.getString(""String_Node_Str""));
  iscFontSizes=new IntegerSpinControl(cmpContent,SWT.NONE,ChartUIUtil.getFontSize(fdCurrent));
  GridData gdISCFontSizes=new GridData(GridData.FILL_HORIZONTAL);
  gdISCFontSizes.horizontalSpan=3;
  iscFontSizes.setLayoutData(gdISCFontSizes);
  iscFontSizes.setMinimum(MIN_FONT_SIZE);
  iscFontSizes.setMaximum(MAX_FONT_SIZE);
  iscFontSizes.addListener(this);
  Label lblForeground=new Label(cmpContent,SWT.NONE);
  GridData gdLForeground=new GridData();
  gdLForeground.horizontalSpan=2;
  gdLForeground.horizontalIndent=40;
  lblForeground.setLayoutData(gdLForeground);
  lblForeground.setText(Messages.getString(""String_Node_Str""));
  fccColor=new FillChooserComposite(cmpContent,SWT.NONE,cdCurrent,false,false);
  GridData gdFCCColor=new GridData(GridData.FILL_HORIZONTAL);
  gdFCCColor.horizontalSpan=3;
  fccColor.setLayoutData(gdFCCColor);
  fccColor.addListener(this);
  createFontStylePanel();
  Label lblFormat=new Label(cmpContent,SWT.NONE);
  GridData gdLFormat=new GridData();
  gdLFormat.horizontalSpan=2;
  gdLFormat.horizontalIndent=40;
  lblFormat.setLayoutData(gdLFormat);
  lblFormat.setText(Messages.getString(""String_Node_Str""));
  Composite cmpFormat=new Composite(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    cmpFormat.setLayout(layout);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=3;
    cmpFormat.setLayoutData(gd);
  }
  cbStrikethru=new Button(cmpFormat,SWT.CHECK);
  cbStrikethru.addSelectionListener(this);
  cbStrikethru.setText(Messages.getString(""String_Node_Str""));
  cbStrikethru.setSelection(fdCurrent.isSetStrikethrough() && fdCurrent.isStrikethrough());
  if (isAlignmentEnabled) {
    createAlignmentPanel();
  }
  createRotationPanel();
  Label lblPreview=new Label(cmpContent,SWT.NONE);
{
    lblPreview.setText(Messages.getString(""String_Node_Str""));
    lblPreview.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  }
  FillLayout flPreview=new FillLayout();
  flPreview.marginHeight=2;
  flPreview.marginWidth=3;
  Composite grpPreview=new Composite(cmpContent,SWT.NONE);
  GridData gdGRPPreview=new GridData(GridData.FILL_BOTH);
  gdGRPPreview.horizontalSpan=4;
  grpPreview.setLayoutData(gdGRPPreview);
  grpPreview.setLayout(flPreview);
  fcPreview=new FontCanvas(grpPreview,SWT.BORDER,fdCurrent,cdCurrent,true,true,true);
  createButtonPanel();
}",0.999105278854757
78597,"public void getComponent(Composite parent){
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpBasic.setLayoutData(gd);
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
{
    lblTitle.setText(Messages.getString(""String_Node_Str""));
  }
  List keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),getChart().getTitle().getLabel().getCaption().getValue());
{
    GridData gdTXTTitle=new GridData(GridData.FILL_HORIZONTAL);
    txtTitle.setLayoutData(gdTXTTitle);
    txtTitle.setEnabled(getChart().getTitle().isVisible());
    txtTitle.addListener(this);
  }
  btnVisible=new Button(cmpBasic,SWT.CHECK);
{
    btnVisible.setText(Messages.getString(""String_Node_Str""));
    btnVisible.setSelection(getChart().getTitle().isVisible());
    btnVisible.addSelectionListener(this);
  }
  Label lblBackground=new Label(cmpBasic,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  cmbBackground=new FillChooserComposite(cmpBasic,SWT.NONE,getChart().getBlock().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbBackground.setLayoutData(gridData);
    cmbBackground.addListener(this);
  }
  new Label(cmpBasic,SWT.NONE);
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  cmbStyle=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbStyle.setLayoutData(gridData);
    cmbStyle.addSelectionListener(this);
  }
  btnEnablePreview=new Button(cmpBasic,SWT.CHECK);
{
    btnEnablePreview.setText(Messages.getString(""String_Node_Str""));
    btnEnablePreview.setSelection(ChartPreviewPainter.isProcessorEnabled());
    btnEnablePreview.addSelectionListener(this);
  }
  Group cmpInteractivity=new Group(cmpBasic,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpInteractivity.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpInteractivity.setLayoutData(gd);
    cmpInteractivity.setText(Messages.getString(""String_Node_Str""));
  }
  btnEnable=new Button(cmpInteractivity,SWT.CHECK);
{
    GridData gridData=new GridData();
    gridData.horizontalSpan=2;
    btnEnable.setLayoutData(gridData);
    btnEnable.setText(Messages.getString(""String_Node_Str""));
    btnEnable.setSelection(getChart().getInteractivity().isEnable());
    btnEnable.addSelectionListener(this);
  }
  lblLegendBehavior=new Label(cmpInteractivity,SWT.NONE);
{
    lblLegendBehavior.setText(Messages.getString(""String_Node_Str""));
  }
  cmbInteractivity=new Combo(cmpInteractivity,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbInteractivity.setLayoutData(gridData);
    cmbInteractivity.addSelectionListener(this);
  }
  btnTitleTriggers=new Button(cmpInteractivity,SWT.PUSH);
{
    btnTitleTriggers.setText(Messages.getString(""String_Node_Str""));
    btnTitleTriggers.addSelectionListener(this);
  }
  btnChartAreaTriggers=new Button(cmpInteractivity,SWT.PUSH);
{
    btnChartAreaTriggers.setText(Messages.getString(""String_Node_Str""));
    btnChartAreaTriggers.addSelectionListener(this);
  }
  enableInteractivity(btnEnable.getSelection());
  populateLists();
  createButtonGroup(cmpContent);
}","public void getComponent(Composite parent){
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpBasic.setLayoutData(gd);
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
{
    lblTitle.setText(Messages.getString(""String_Node_Str""));
  }
  List keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),getChart().getTitle().getLabel().getCaption().getValue());
{
    GridData gdTXTTitle=new GridData(GridData.FILL_HORIZONTAL);
    txtTitle.setLayoutData(gdTXTTitle);
    if (!getChart().getTitle().isVisible())     txtTitle.setEnabled(false);
    txtTitle.addListener(this);
  }
  btnVisible=new Button(cmpBasic,SWT.CHECK);
{
    btnVisible.setText(Messages.getString(""String_Node_Str""));
    btnVisible.setSelection(getChart().getTitle().isVisible());
    btnVisible.addSelectionListener(this);
  }
  Label lblBackground=new Label(cmpBasic,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  cmbBackground=new FillChooserComposite(cmpBasic,SWT.NONE,getChart().getBlock().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbBackground.setLayoutData(gridData);
    cmbBackground.addListener(this);
  }
  new Label(cmpBasic,SWT.NONE);
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  cmbStyle=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbStyle.setLayoutData(gridData);
    cmbStyle.addSelectionListener(this);
  }
  btnEnablePreview=new Button(cmpBasic,SWT.CHECK);
{
    btnEnablePreview.setText(Messages.getString(""String_Node_Str""));
    btnEnablePreview.setSelection(ChartPreviewPainter.isProcessorEnabled());
    btnEnablePreview.addSelectionListener(this);
  }
  Group cmpInteractivity=new Group(cmpBasic,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpInteractivity.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpInteractivity.setLayoutData(gd);
    cmpInteractivity.setText(Messages.getString(""String_Node_Str""));
  }
  btnEnable=new Button(cmpInteractivity,SWT.CHECK);
{
    GridData gridData=new GridData();
    gridData.horizontalSpan=2;
    btnEnable.setLayoutData(gridData);
    btnEnable.setText(Messages.getString(""String_Node_Str""));
    btnEnable.setSelection(getChart().getInteractivity().isEnable());
    btnEnable.addSelectionListener(this);
  }
  lblLegendBehavior=new Label(cmpInteractivity,SWT.NONE);
{
    lblLegendBehavior.setText(Messages.getString(""String_Node_Str""));
  }
  cmbInteractivity=new Combo(cmpInteractivity,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbInteractivity.setLayoutData(gridData);
    cmbInteractivity.addSelectionListener(this);
  }
  btnTitleTriggers=new Button(cmpInteractivity,SWT.PUSH);
{
    btnTitleTriggers.setText(Messages.getString(""String_Node_Str""));
    btnTitleTriggers.addSelectionListener(this);
  }
  btnChartAreaTriggers=new Button(cmpInteractivity,SWT.PUSH);
{
    btnChartAreaTriggers.setText(Messages.getString(""String_Node_Str""));
    btnChartAreaTriggers.addSelectionListener(this);
  }
  enableInteractivity(btnEnable.getSelection());
  populateLists();
  createButtonGroup(cmpContent);
}",0.9926238145416229
78598,"public void handleEvent(Event event){
  if (event.widget.equals(txtTitle)) {
    seriesDefn.getDesignTimeSeries().setSeriesIdentifier(txtTitle.getValue(txtTitle.getText()));
  }
}","public void handleEvent(Event event){
  if (event.widget.equals(txtTitle)) {
    seriesDefn.getDesignTimeSeries().setSeriesIdentifier(txtTitle.getText());
  }
}",0.943952802359882
78599,"public Object get(String name,Scriptable scope){
  if (queryExecutor == null)   return null;
  Object paramValue=null;
  if (valueMap.containsKey(name)) {
    paramValue=valueMap.get(name);
  }
 else {
    try {
      if (queryExecutor.getPreparedOdiQuery() != null) {
        paramValue=queryExecutor.getPreparedOdiQuery().getOutputParameterValue(name);
        valueMap.put(name,paramValue);
      }
    }
 catch (    DataException e) {
    }
  }
  return paramValue;
}","public Object get(String name,Scriptable scope){
  if (queryExecutor == null)   return null;
  Object paramValue=null;
  if (valueMap.containsKey(name)) {
    paramValue=valueMap.get(name);
  }
 else {
    try {
      if (queryExecutor.getPreparedOdiQuery() != null) {
        paramValue=queryExecutor.getPreparedOdiQuery().getOutputParameterValue(name);
        valueMap.put(name,paramValue);
      }
    }
 catch (    DataException e) {
    }
  }
  return JavascriptEvalUtil.convertToJavascriptValue(paramValue,queryExecutor.getDataEngine().getSharedScope());
}",0.8916827852998066
78600,"/** 
 * Gets a named property
 */
public Object get(String name,Scriptable start){
  logger.entering(JSRowObject.class.getName(),""String_Node_Str"",name);
  if (name.equals(DATA_SET)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"");
    return dataSet.getJSDataSetObject();
  }
 else   if (name.equals(COLUMN_MD)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",getColumnMetadataScriptable());
    return getColumnMetadataScriptable();
  }
 else   if (name.equals(ROW_POSITION)) {
    try {
      return new Integer(dataSet.getCurrentRowIndex());
    }
 catch (    DataException e) {
      logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    }
  }
  try {
    return dataSet.getDataRow().getColumnValue(name);
  }
 catch (  BirtException e) {
    logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    return new DataExceptionMocker(e);
  }
}","/** 
 * Gets a named property
 */
public Object get(String name,Scriptable start){
  logger.entering(JSRowObject.class.getName(),""String_Node_Str"",name);
  if (name.equals(DATA_SET)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"");
    return dataSet.getJSDataSetObject();
  }
 else   if (name.equals(COLUMN_MD)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",getColumnMetadataScriptable());
    return getColumnMetadataScriptable();
  }
 else   if (name.equals(ROW_POSITION)) {
    try {
      return new Integer(dataSet.getCurrentRowIndex());
    }
 catch (    DataException e) {
      logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    }
  }
  try {
    Object value=dataSet.getDataRow().getColumnValue(name);
    return JavascriptEvalUtil.convertToJavascriptValue(value,dataSet.getDataEngine().getSharedScope());
  }
 catch (  BirtException e) {
    logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    return new DataExceptionMocker(e);
  }
}",0.9434306569343066
78601,"/** 
 * Sets an indexed property
 */
public void put(int index,Scriptable start,Object value){
  logger.entering(JSRowObject.class.getName(),""String_Node_Str"",new Integer(index));
  value=getRealValue(value);
  try {
    dataSet.getDataRow().setColumnValue(index,value);
  }
 catch (  BirtException e) {
    logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
  }
  logger.exiting(JSRowObject.class.getName(),""String_Node_Str"");
}","/** 
 * Sets an indexed property
 */
public void put(int index,Scriptable start,Object value){
  logger.entering(JSRowObject.class.getName(),""String_Node_Str"",new Integer(index));
  value=JavascriptEvalUtil.convertJavascriptValue(value);
  try {
    dataSet.getDataRow().setColumnValue(index,value);
  }
 catch (  BirtException e) {
    logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
  }
  logger.exiting(JSRowObject.class.getName(),""String_Node_Str"");
}",0.955440414507772
78602,"protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc != inputGroup.getTocExpression()) {
      if (newToc == null || !newToc.equals(inputGroup.getTocExpression())) {
        inputGroup.setTocExpression(newToc);
      }
    }
    int index=keyChooser.getSelectionIndex();
    String oldKeyExpr=inputGroup.getKeyExpr();
    String newKeyExpr=getKeyExpression();
    inputGroup.setKeyExpr(newKeyExpr);
    if (newKeyExpr != null && !newKeyExpr.equals(oldKeyExpr)) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DesignElementHandle dataItemHandle=InsertInLayoutUtil.performInsert(newKeyExpr.trim(),slotHandle,inputGroup.getContainer());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getSelection());
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (intervalBaseText.getEnabled()) {
      inputGroup.setIntervalBase(UIUtil.convertToModelString(intervalBaseText.getText(),false));
    }
 else {
      inputGroup.setIntervalBase(null);
    }
    if (inputGroup instanceof TableGroupHandle) {
      if (includeHeader.getSelection() != inputGroup.hasHeader()) {
        if (includeHeader.getSelection()) {
          inputGroup.getHeader().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.HEADER_SLOT);
        }
      }
      if (includeFooter.getSelection() != inputGroup.hasFooter()) {
        if (includeFooter.getSelection()) {
          inputGroup.getFooter().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.FOOTER_SLOT);
        }
      }
    }
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}","protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc != inputGroup.getTocExpression()) {
      if (newToc == null || !newToc.equals(inputGroup.getTocExpression())) {
        inputGroup.setTocExpression(newToc);
      }
    }
    int index=keyChooser.getSelectionIndex();
    String oldKeyExpr=inputGroup.getKeyExpr();
    String newKeyExpr=getKeyExpression();
    inputGroup.setKeyExpr(newKeyExpr);
    if (newKeyExpr != null && !newKeyExpr.equals(oldKeyExpr)) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        Object insertObject;
        if (index == -1) {
          insertObject=newKeyExpr.trim();
        }
 else {
          insertObject=columnList.get(index);
        }
        DesignElementHandle dataItemHandle=InsertInLayoutUtil.performInsert(insertObject,slotHandle,inputGroup.getContainer());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getSelection());
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (intervalBaseText.getEnabled()) {
      inputGroup.setIntervalBase(UIUtil.convertToModelString(intervalBaseText.getText(),false));
    }
 else {
      inputGroup.setIntervalBase(null);
    }
    if (inputGroup instanceof TableGroupHandle) {
      if (includeHeader.getSelection() != inputGroup.hasHeader()) {
        if (includeHeader.getSelection()) {
          inputGroup.getHeader().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.HEADER_SLOT);
        }
      }
      if (includeFooter.getSelection() != inputGroup.hasFooter()) {
        if (includeFooter.getSelection()) {
          inputGroup.getFooter().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.FOOTER_SLOT);
        }
      }
    }
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}",0.9450629676948348
78603,"protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc != inputGroup.getTocExpression()) {
      if (newToc == null || !newToc.equals(inputGroup.getTocExpression())) {
        inputGroup.setTocExpression(newToc);
      }
    }
    int index=keyChooser.getSelectionIndex();
    String oldKeyExpr=inputGroup.getKeyExpr();
    String newKeyExpr=getKeyExpression();
    inputGroup.setKeyExpr(newKeyExpr);
    if (newKeyExpr != null && !newKeyExpr.equals(oldKeyExpr)) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DesignElementHandle dataItemHandle=InsertInLayoutUtil.performInsert(newKeyExpr.trim(),slotHandle,inputGroup.getContainer());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getSelection());
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (intervalBaseText.getEnabled()) {
      inputGroup.setIntervalBase(UIUtil.convertToModelString(intervalBaseText.getText(),false));
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (inputGroup instanceof TableGroupHandle) {
      if (includeHeader.getSelection() != inputGroup.hasHeader()) {
        if (includeHeader.getSelection()) {
          inputGroup.getHeader().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.HEADER_SLOT);
        }
      }
      if (includeFooter.getSelection() != inputGroup.hasFooter()) {
        if (includeFooter.getSelection()) {
          inputGroup.getFooter().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.FOOTER_SLOT);
        }
      }
    }
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}","protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc != inputGroup.getTocExpression()) {
      if (newToc == null || !newToc.equals(inputGroup.getTocExpression())) {
        inputGroup.setTocExpression(newToc);
      }
    }
    int index=keyChooser.getSelectionIndex();
    String oldKeyExpr=inputGroup.getKeyExpr();
    String newKeyExpr=getKeyExpression();
    inputGroup.setKeyExpr(newKeyExpr);
    if (newKeyExpr != null && !newKeyExpr.equals(oldKeyExpr)) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DesignElementHandle dataItemHandle=InsertInLayoutUtil.performInsert(newKeyExpr.trim(),slotHandle,inputGroup.getContainer());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getSelection());
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (intervalBaseText.getEnabled()) {
      inputGroup.setIntervalBase(UIUtil.convertToModelString(intervalBaseText.getText(),false));
    }
 else {
      inputGroup.setIntervalBase(null);
    }
    if (inputGroup instanceof TableGroupHandle) {
      if (includeHeader.getSelection() != inputGroup.hasHeader()) {
        if (includeHeader.getSelection()) {
          inputGroup.getHeader().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.HEADER_SLOT);
        }
      }
      if (includeFooter.getSelection() != inputGroup.hasFooter()) {
        if (includeFooter.getSelection()) {
          inputGroup.getFooter().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.FOOTER_SLOT);
        }
      }
    }
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}",0.9902621722846442
78604,"/** 
 * processes after pressing ok button
 */
private void okPressedProcess(){
  Utility.setPreferenceStoredMap(JdbcPlugin.JAR_MAP_PREFERENCE_KEY,jarMap);
  Utility.setPreferenceStoredMap(JdbcPlugin.DRIVER_MAP_PREFERENCE_KEY,driverMap);
  Iterator jarsCopyIterator=jarsToBeCopied.values().iterator();
  while (jarsCopyIterator.hasNext()) {
    JarFile jar=(JarFile)jarsCopyIterator.next();
    jar.copyJarToODADir();
    Utility.removeMapEntryFromPreferenceStoredMap(JdbcPlugin.DELETED_JAR_MAP_PREFERENCE_KEY,jar.getFileName());
  }
  Iterator jarsDeleteIterator=jarsToBeDeleted.values().iterator();
  while (jarsDeleteIterator.hasNext()) {
    JarFile jar=(JarFile)jarsDeleteIterator.next();
    jar.deleteJarFromODADir();
    Utility.putPreferenceStoredMapValue(JdbcPlugin.DELETED_JAR_MAP_PREFERENCE_KEY,jar.getFileName(),jar);
  }
  refreshDriverPage();
  JdbcToolKit.resetJdbcDriverNames();
  super.okPressed();
}","/** 
 * processes after pressing ok button
 */
private void okPressedProcess(){
  Utility.setPreferenceStoredMap(JdbcPlugin.JAR_MAP_PREFERENCE_KEY,jarMap);
  Utility.setPreferenceStoredMap(JdbcPlugin.DRIVER_MAP_PREFERENCE_KEY,driverMap);
  Iterator jarsCopyIterator=jarsToBeCopied.values().iterator();
  while (jarsCopyIterator.hasNext()) {
    JarFile jar=(JarFile)jarsCopyIterator.next();
    jar.copyJarToODADir();
    Utility.removeMapEntryFromPreferenceStoredMap(JdbcPlugin.DELETED_JAR_MAP_PREFERENCE_KEY,jar.getFileName());
  }
  Iterator jarsDeleteIterator=jarsToBeDeleted.values().iterator();
  while (jarsDeleteIterator.hasNext()) {
    JarFile jar=(JarFile)jarsDeleteIterator.next();
    jar.deleteJarFromODADir();
    Utility.putPreferenceStoredMapValue(JdbcPlugin.DELETED_JAR_MAP_PREFERENCE_KEY,jar.getFileName(),jar);
  }
  refreshDriverPage();
  super.okPressed();
}",0.978865406006674
78605,"protected void cancelPressed(){
  JdbcToolKit.resetJdbcDriverNames();
  super.cancelPressed();
}","protected void cancelPressed(){
  super.cancelPressed();
}",0.7532467532467533
78606,"/** 
 * actions of Edit Driver in Driver Page
 */
private void editDriver(){
  if (driverViewer.getTable().getSelectionIndex() >= 0 && driverViewer.getTable().getSelectionIndex() < driverViewer.getTable().getItemCount()) {
    EditJdbcDriverDialog dlg=new EditJdbcDriverDialog(getShell());
    Object obj=driverViewer.getTable().getItem(driverViewer.getTable().getSelectionIndex()).getData();
    DriverInfo driverInfo=(DriverInfo)((Map.Entry)obj).getValue();
    if (obj instanceof Map.Entry) {
      dlg.setDriverClassName(((Map.Entry)obj).getKey().toString());
      dlg.setDisplayName(driverInfo.getDisplayName());
      dlg.setUrlTemplate(driverInfo.getUrlTemplate());
    }
    if (dlg.open() == Window.OK) {
      if (obj instanceof Map.Entry && (!dlg.getDisplayName().trim().equals(driverInfo.getDisplayName().trim()) || !dlg.getUrlTemplate().trim().equals(driverInfo.getUrlTemplate().trim()))) {
        driverInfo.setDisplayName(dlg.getDisplayName());
        driverInfo.setUrlTemplate(dlg.getUrlTemplate());
        driverMap.put(((Map.Entry)obj).getKey(),driverInfo);
        jarChanged=true;
      }
      refreshDriverViewer();
      updateDriverButtons();
    }
  }
}","/** 
 * actions of Edit Driver in Driver Page
 */
private void editDriver(){
  if (driverViewer.getTable().getSelectionIndex() >= 0 && driverViewer.getTable().getSelectionIndex() < driverViewer.getTable().getItemCount()) {
    EditJdbcDriverDialog dlg=new EditJdbcDriverDialog(getShell());
    Object obj=driverViewer.getTable().getItem(driverViewer.getTable().getSelectionIndex()).getData();
    DriverInfo driverInfo=(DriverInfo)((Map.Entry)obj).getValue();
    if (obj instanceof Map.Entry) {
      dlg.setDriverClassName(((Map.Entry)obj).getKey().toString());
      dlg.setDisplayName(driverInfo.getDisplayName());
      dlg.setUrlTemplate(driverInfo.getUrlTemplate());
    }
    if (dlg.open() == Window.OK) {
      if (obj instanceof Map.Entry && (!dlg.getDisplayName().trim().equals(driverInfo.getDisplayName().trim()) || !dlg.getUrlTemplate().trim().equals(driverInfo.getUrlTemplate().trim()))) {
        driverInfo.setDisplayName(dlg.getDisplayName());
        driverInfo.setUrlTemplate(dlg.getUrlTemplate());
        driverMap.put(((Map.Entry)obj).getKey(),driverInfo);
        Utility.setPreferenceStoredMap(JdbcPlugin.DRIVER_MAP_PREFERENCE_KEY,driverMap);
        driverChanged=true;
      }
      refreshDriverViewer();
      updateDriverButtons();
    }
  }
}",0.9613034623217924
78607,"/** 
 * Returns a List jdbc Drivers. The Drivers are searched from predefined directories in the DTE plug-in. Currently it is expected that the jdbc drivers are in the ""drivers"" directory of the DTE oda.jdbc plug-in.
 * @param driverName
 * @return
 */
public static List getJdbcDriversFromODADir(String driverName){
  if (jdbcDriverInfos != null) {
    if (!driverNameMap.containsValue(jdbcDriverInfos.get(0)))     jdbcDriverInfos.remove(0);
    return jdbcDriverInfos;
  }
  jdbcDriverInfos=new ArrayList();
  driverNameMap=new HashMap();
  file2Drivers=new Hashtable();
  addDriversFromFiles();
  final String ODBCJDBCDriverName=""String_Node_Str"";
  JDBCDriverInformation ODBCJDBCInfo=null;
  JDBCDriverInformation driverInfos[]=JDBCDriverInfoManager.getDrivers();
  for (int i=0; i < driverInfos.length; i++) {
    JDBCDriverInformation newInfo=driverInfos[i];
    JDBCDriverInformation existing=(JDBCDriverInformation)driverNameMap.get(newInfo.getDriverClassName());
    if (existing == null) {
      if (newInfo.getDriverClassName().equalsIgnoreCase(ODBCJDBCDriverName)) {
        ODBCJDBCInfo=newInfo;
        continue;
      }
      jdbcDriverInfos.add(newInfo);
      driverNameMap.put(newInfo.getDriverClassName(),newInfo);
    }
 else {
      existing.setDisplayName(newInfo.getDisplayName());
      existing.setUrlFormat(newInfo.getUrlFormat());
    }
  }
  if (ODBCJDBCInfo != null) {
    jdbcDriverInfos.add(ODBCJDBCInfo);
    driverNameMap.put(ODBCJDBCInfo.getDriverClassName(),ODBCJDBCInfo);
  }
  Map preferenceMap=Utility.getPreferenceStoredMap(JdbcPlugin.DRIVER_MAP_PREFERENCE_KEY);
  for (Iterator itr=jdbcDriverInfos.iterator(); itr.hasNext(); ) {
    JDBCDriverInformation info=(JDBCDriverInformation)itr.next();
    Object ob=preferenceMap.get(info.toString());
    if (ob != null) {
      DriverInfo driverInfo=(DriverInfo)ob;
      if (driverInfo.getDisplayName() != null && driverInfo.getDisplayName().length() > 0) {
        info.setDisplayName(driverInfo.getDisplayName());
      }
      if (driverInfo.getUrlTemplate() != null && driverInfo.getUrlTemplate().length() > 0) {
        info.setUrlFormat(driverInfo.getUrlTemplate());
      }
    }
  }
  return jdbcDriverInfos;
}","/** 
 * Returns a List jdbc Drivers. The Drivers are searched from predefined directories in the DTE plug-in. Currently it is expected that the jdbc drivers are in the ""drivers"" directory of the DTE oda.jdbc plug-in.
 * @param driverName
 * @return
 */
public static List getJdbcDriversFromODADir(String driverName){
  if (jdbcDriverInfos != null) {
    if (!driverNameMap.containsValue(jdbcDriverInfos.get(0)))     jdbcDriverInfos.remove(0);
    if (JdbcDriverManagerDialog.needResetPreferences()) {
      resetPreferences();
      JdbcDriverManagerDialog.resetDriverChangedStatus();
    }
    return jdbcDriverInfos;
  }
  jdbcDriverInfos=new ArrayList();
  driverNameMap=new HashMap();
  file2Drivers=new Hashtable();
  addDriversFromFiles();
  final String ODBCJDBCDriverName=""String_Node_Str"";
  JDBCDriverInformation ODBCJDBCInfo=null;
  JDBCDriverInformation driverInfos[]=JDBCDriverInfoManager.getDrivers();
  for (int i=0; i < driverInfos.length; i++) {
    JDBCDriverInformation newInfo=driverInfos[i];
    JDBCDriverInformation existing=(JDBCDriverInformation)driverNameMap.get(newInfo.getDriverClassName());
    if (existing == null) {
      if (newInfo.getDriverClassName().equalsIgnoreCase(ODBCJDBCDriverName)) {
        ODBCJDBCInfo=newInfo;
        continue;
      }
      jdbcDriverInfos.add(newInfo);
      driverNameMap.put(newInfo.getDriverClassName(),newInfo);
    }
 else {
      existing.setDisplayName(newInfo.getDisplayName());
      existing.setUrlFormat(newInfo.getUrlFormat());
    }
  }
  if (ODBCJDBCInfo != null) {
    jdbcDriverInfos.add(ODBCJDBCInfo);
    driverNameMap.put(ODBCJDBCInfo.getDriverClassName(),ODBCJDBCInfo);
  }
  resetPreferences();
  return jdbcDriverInfos;
}",0.7820086889854332
78608,"protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  createToolbar(composite);
  createExpressionField(composite);
  if (provider == null) {
    provider=new ExpressionProvider();
  }
  createOperatorsBar(composite);
  createListArea(composite);
  return composite;
}","protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  createToolbar(composite);
  createExpressionField(composite);
  if (provider == null) {
    provider=new ExpressionProvider();
  }
  createOperatorsBar(composite);
  createMessageLine(composite);
  createListArea(composite);
  return composite;
}",0.9544159544159544
78609,"public void selectionChanged(SelectionChangedEvent event){
  IStructuredSelection selection=(IStructuredSelection)event.getSelection();
  if (selection.isEmpty()) {
    return;
  }
  TableViewer target=null;
  if (event.getSource() == categoryTable) {
    target=subCategoryTable;
  }
 else   if (event.getSource() == subCategoryTable) {
    target=functionTable;
  }
  if (target != null) {
    target.setInput(selection.getFirstElement());
  }
}","public void selectionChanged(SelectionChangedEvent event){
  IStructuredSelection selection=(IStructuredSelection)event.getSelection();
  if (selection.isEmpty()) {
    return;
  }
  TableViewer target=null;
  if (event.getSource() == categoryTable) {
    target=subCategoryTable;
  }
 else   if (event.getSource() == subCategoryTable) {
    target=functionTable;
  }
  if (target != null) {
    target.setInput(selection.getFirstElement());
  }
  if (event.getSource() == functionTable) {
    Table table=functionTable.getTable();
    if (table.getSelectionCount() == 1) {
      messageLine.setText(table.getSelection()[0].getText());
    }
 else {
      messageLine.setText(""String_Node_Str"");
    }
  }
}",0.7746967071057193
78610,"protected void loadDesign(){
  ReportDesignHandle reportDesign=executionContext.getDesign();
  Iterator iter=reportDesign.includeScriptsIterator();
  while (iter.hasNext()) {
    String fileName=(String)iter.next();
    executionContext.loadScript(fileName);
  }
  ReportScriptExecutor.handleInitialize(reportDesign,executionContext);
}","protected void loadDesign(){
  ReportDesignHandle reportDesign=executionContext.getDesign();
  Iterator iter=reportDesign.includeScriptsIterator();
  while (iter.hasNext()) {
    IncludeScriptHandle includeScript=(IncludeScriptHandle)iter.next();
    String fileName=includeScript.getFileName();
    executionContext.loadScript(fileName);
  }
  ReportScriptExecutor.handleInitialize(reportDesign,executionContext);
}",0.848404255319149
78611,"/** 
 * Loads scripts that are stored in an external file. Used to support include-script. Each script file should be load only once. and the script in the file must be encoded in UTF-8.
 * @param fileName script file name
 */
public void loadScript(String fileName){
  File script=new File(report.getBasePath(),fileName);
  try {
    FileInputStream in=new FileInputStream(script);
    byte[] buffer=new byte[in.available()];
    in.read(buffer);
    execute(new String(buffer,""String_Node_Str""),fileName,1);
    in.close();
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"" + fileName + ""String_Node_Str"",ex);
    addException(new EngineException(MessageConstants.SCRIPT_FILE_LOAD_ERROR,script.getAbsolutePath(),ex));
  }
}","/** 
 * Loads scripts that are stored in an external file. Used to support include-script. Each script file should be load only once. and the script in the file must be encoded in UTF-8.
 * @param fileName script file name
 */
public void loadScript(String fileName){
  ReportDesignHandle reportDesign=this.getDesign();
  if (reportDesign != null) {
    URL url=reportDesign.findResource(fileName,IResourceLocator.LIBRARY);
    if (url != null) {
      fileName=url.getFile();
    }
  }
  File scriptFile=new File(fileName);
  try {
    FileInputStream in=new FileInputStream(scriptFile);
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    byte[] buffer=new byte[1024];
    int size=in.read(buffer);
    while (size != -1) {
      out.write(buffer,0,size);
      size=in.read(buffer);
    }
    byte[] script=out.toByteArray();
    execute(new String(script,""String_Node_Str""),fileName,1);
    in.close();
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"" + fileName + ""String_Node_Str"",ex);
    addException(new EngineException(MessageConstants.SCRIPT_FILE_LOAD_ERROR,scriptFile.getAbsolutePath(),ex));
  }
}",0.6561181434599156
78612,"/** 
 * The same behavior as RandomAccessFile.readInt(). <br> Reads a signed 32-bit integer from this file. This method reads 4  bytes from the file, starting at the current file pointer.  If the bytes read, in order, are <code>b1</code>, <code>b2</code>, <code>b3</code>, and <code>b4</code>, where  <code>0&nbsp;&lt;=&nbsp;b1, b2, b3, b4&nbsp;&lt;=&nbsp;255</code>,  then the result is equal to: <blockquote><pre> (b1 &lt;&lt; 24) | (b2 &lt;&lt; 16) + (b3 &lt;&lt; 8) + b4 </pre></blockquote> <p> This method blocks until the four bytes are read, the end of the  stream is detected, or an exception is thrown. 
 * @return     the next four bytes of this stream, interpreted as an<code>int</code>.
 * @exception EOFException  if this stream reaches the end before readingfour bytes.
 * @exception IOException   if an I/O error occurs.
 */
public int readInt() throws IOException {
  int ch1=this.read();
  int ch2=this.read();
  int ch3=this.read();
  int ch4=this.read();
  if ((ch1 | ch2 | ch3| ch4) < 0)   throw new EOFException();
  return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8)+ (ch4 << 0));
}","/** 
 * The same behavior as RandomAccessFile.readInt(). <br> Reads a signed 32-bit integer from this file. This method reads 4  bytes from the file, starting at the current file pointer.  If the bytes read, in order, are <code>b1</code>, <code>b2</code>, <code>b3</code>, and <code>b4</code>, where  <code>0&nbsp;&lt;=&nbsp;b1, b2, b3, b4&nbsp;&lt;=&nbsp;255</code>,  then the result is equal to: <blockquote><pre> (b1 &lt;&lt; 24) | (b2 &lt;&lt; 16) + (b3 &lt;&lt; 8) + b4 </pre></blockquote> <p> This method blocks until the four bytes are read, the end of the  stream is detected, or an exception is thrown. 
 * @return     the next four bytes of this stream, interpreted as an<code>int</code>.
 * @exception EOFException  if this stream reaches the end before readingfour bytes.
 * @exception IOException   if an I/O error occurs.
 */
public int readInt() throws IOException {
  byte ch[]=new byte[4];
  this.readFully(ch,0,4);
  int ret=0;
  for (int i=0; i < ch.length; i++)   ret=((ret << 8) & 0xFFFFFF00) | (ch[i] & 0x000000FF);
  return ret;
}",0.8583372039015328
78613,"public void widgetSelected(SelectionEvent e){
  intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
}","public void widgetSelected(SelectionEvent e){
  intervalBaseText.setEnabled(intervalBaseButton.getSelection());
}",0.8634361233480177
78614,"/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  Composite keyArea=new Composite(composite,SWT.NONE);
  keyArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  keyChooser=new Combo(keyArea,SWT.DROP_DOWN);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button exprButton=new Button(keyArea,SWT.PUSH);
  exprButton.setText(""String_Node_Str"");
  exprButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(getKeyExpression());
      expressionBuilder.setExpressionProvier(new ExpressionProvider(dataSetList));
      if (expressionBuilder.open() == OK) {
        setKeyExpression(expressionBuilder.getResult().trim());
      }
    }
  }
);
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  new Label(intervalArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
    }
  }
);
  intervalRange=new Spinner(intervalArea,SWT.NONE);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.setMinimum(0);
  intervalRange.setMaximum(Integer.MAX_VALUE);
  intervalRange.setStep(1);
}","/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  Composite keyArea=new Composite(composite,SWT.NONE);
  keyArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  keyChooser=new Combo(keyArea,SWT.DROP_DOWN);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button exprButton=new Button(keyArea,SWT.PUSH);
  exprButton.setText(""String_Node_Str"");
  exprButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(getKeyExpression());
      expressionBuilder.setExpressionProvier(new ExpressionProvider(dataSetList));
      if (expressionBuilder.open() == OK) {
        setKeyExpression(expressionBuilder.getResult().trim());
      }
    }
  }
);
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  new Label(intervalArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
      intervalBaseButton.setEnabled(intervalType.getSelectionIndex() != 0);
      intervalBaseText.setEnabled(intervalBaseButton.getEnabled() && intervalBaseButton.getSelection());
    }
  }
);
  intervalRange=new Spinner(intervalArea,SWT.NONE);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.setMinimum(0);
  intervalRange.setMaximum(Integer.MAX_VALUE);
  intervalRange.setStep(1);
  intervalBaseButton=new Button(composite,SWT.CHECK);
  intervalBaseButton.setText(GROUP_DLG_INTERVAL_BASE_LABEL);
  intervalBaseButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalBaseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalBaseText.setEnabled(intervalBaseButton.getSelection());
    }
  }
);
  intervalBaseText=new Text(composite,SWT.SINGLE | SWT.BORDER);
  intervalBaseText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}",0.8736935341009743
78615,"protected boolean initDialog(){
  if (inputGroup.getName() != null) {
    nameEditor.setText(inputGroup.getName());
  }
  columnList=DataSetManager.getCurrentInstance().getColumns(dataSetList);
  Iterator itor=columnList.iterator();
  while (itor.hasNext()) {
    keyChooser.add(((DataSetItemModel)itor.next()).getDisplayName());
  }
  setKeyExpression(inputGroup.getKeyExpr());
  int index=getIntervalTypeIndex(inputGroup.getInterval());
  intervalType.select(index);
  if (index == 0) {
    intervalRange.setEnabled(false);
  }
 else {
    intervalRange.setSelection(inputGroup.getIntervalRange());
  }
  if (inputGroup instanceof TableGroupHandle) {
    includeHeader.setSelection(inputGroup.hasHeader());
    includeFooter.setSelection(inputGroup.hasFooter());
  }
 else {
    includeHeader.setSelection(false);
    includeFooter.setSelection(false);
  }
  if (DesignChoiceConstants.SORT_DIRECTION_ASC.equals(inputGroup.getSortDirection())) {
    ascending.setSelection(true);
  }
 else {
    descending.setSelection(true);
  }
  List list=new ArrayList(1);
  list.add(inputGroup);
  tocEditor.setText(UIUtil.convertToGUIString(inputGroup.getTocExpression()));
  return true;
}","protected boolean initDialog(){
  if (inputGroup.getName() != null) {
    nameEditor.setText(inputGroup.getName());
  }
  columnList=DataSetManager.getCurrentInstance().getColumns(dataSetList);
  Iterator itor=columnList.iterator();
  while (itor.hasNext()) {
    keyChooser.add(((DataSetItemModel)itor.next()).getDisplayName());
  }
  setKeyExpression(inputGroup.getKeyExpr());
  int index=getIntervalTypeIndex(inputGroup.getInterval());
  intervalType.select(index);
  if (index == 0) {
    intervalRange.setEnabled(false);
    intervalBaseButton.setEnabled(false);
    intervalBaseText.setEnabled(false);
  }
 else {
    intervalRange.setSelection(inputGroup.getIntervalRange());
    intervalBaseButton.setSelection(inputGroup.getIntervalBase() != null);
    intervalBaseText.setEnabled(intervalBaseButton.getSelection());
    if (inputGroup.getIntervalBase() != null) {
      intervalBaseText.setText(inputGroup.getIntervalBase());
    }
  }
  if (inputGroup instanceof TableGroupHandle) {
    includeHeader.setSelection(inputGroup.hasHeader());
    includeFooter.setSelection(inputGroup.hasFooter());
  }
 else {
    includeHeader.setSelection(false);
    includeFooter.setSelection(false);
  }
  if (DesignChoiceConstants.SORT_DIRECTION_ASC.equals(inputGroup.getSortDirection())) {
    ascending.setSelection(true);
  }
 else {
    descending.setSelection(true);
  }
  List list=new ArrayList(1);
  list.add(inputGroup);
  tocEditor.setText(UIUtil.convertToGUIString(inputGroup.getTocExpression()));
  return true;
}",0.8738438771735109
78616,"protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc != inputGroup.getTocExpression()) {
      if (newToc == null || !newToc.equals(inputGroup.getTocExpression())) {
        inputGroup.setTocExpression(newToc);
      }
    }
    int index=keyChooser.getSelectionIndex();
    String oldKey=inputGroup.getKeyExpr();
    String newKey=getKeyExpression();
    inputGroup.setKeyExpr(newKey);
    if (newKey != null && !newKey.equals(oldKey)) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DesignElementHandle dataItemHandle=InsertInLayoutUtil.performInsert(columnList.get(index),slotHandle,inputGroup.getContainer());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getSelection());
    }
    if (inputGroup instanceof TableGroupHandle) {
      if (includeHeader.getSelection() != inputGroup.hasHeader()) {
        if (includeHeader.getSelection()) {
          inputGroup.getHeader().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.HEADER_SLOT);
        }
      }
      if (includeFooter.getSelection() != inputGroup.hasFooter()) {
        if (includeFooter.getSelection()) {
          inputGroup.getFooter().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.FOOTER_SLOT);
        }
      }
    }
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}","protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc != inputGroup.getTocExpression()) {
      if (newToc == null || !newToc.equals(inputGroup.getTocExpression())) {
        inputGroup.setTocExpression(newToc);
      }
    }
    int index=keyChooser.getSelectionIndex();
    String oldKeyExpr=inputGroup.getKeyExpr();
    String newKeyExpr=getKeyExpression();
    inputGroup.setKeyExpr(newKeyExpr);
    if (newKeyExpr != null && !newKeyExpr.equals(oldKeyExpr)) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DesignElementHandle dataItemHandle=InsertInLayoutUtil.performInsert(newKeyExpr.trim(),slotHandle,inputGroup.getContainer());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getSelection());
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (intervalBaseText.getEnabled()) {
      inputGroup.setIntervalBase(UIUtil.convertToModelString(intervalBaseText.getText(),false));
    }
 else {
      inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP,null);
    }
    if (inputGroup instanceof TableGroupHandle) {
      if (includeHeader.getSelection() != inputGroup.hasHeader()) {
        if (includeHeader.getSelection()) {
          inputGroup.getHeader().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.HEADER_SLOT);
        }
      }
      if (includeFooter.getSelection() != inputGroup.hasFooter()) {
        if (includeFooter.getSelection()) {
          inputGroup.getFooter().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.FOOTER_SLOT);
        }
      }
    }
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}",0.9273809523809524
78617,"/** 
 * @param pageNumber
 * @throws EngineException
 */
public abstract void render(long pageNumber) throws EngineException ;","/** 
 * Render the page from startPageNumber to endPageNumber in the Report Doucment to an output format.
 * @throws EngineException
 */
public abstract void render(String pageRange) throws EngineException ;",0.5405405405405406
78618,"/** 
 * @param pageNumber the page to be rendered
 * @throws EngineException throws exception if there is a rendering error
 */
protected void doRender(long pageNumber) throws EngineException {
  try {
    ReportContentLoader loader=new ReportContentLoader(executionContext);
    ReportExecutor executor=new ReportExecutor(executionContext);
    executionContext.setExecutor(executor);
    IContentEmitter emitter=createContentEmitter(executor);
    startRender();
    loader.loadPage(pageNumber,emitter);
    closeRender();
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
}","/** 
 * @param pageNumber the page to be rendered
 * @throws EngineException throws exception if there is a rendering error
 */
protected void doRender(List pageSequences) throws EngineException {
  if (pageSequences.size() == 0) {
    return;
  }
  try {
    ReportContentLoader loader=new ReportContentLoader(executionContext);
    ReportExecutor executor=new ReportExecutor(executionContext);
    executionContext.setExecutor(executor);
    IContentEmitter emitter=createContentEmitter(executor);
    startRender();
    loader.loadPageRange(pageSequences,emitter);
    closeRender();
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
}",0.9225543478260868
78619,"public void render(long pageNumber) throws EngineException {
  long totalPage=reportDoc.getPageCount();
  if (pageNumber <= 0 || pageNumber > totalPage) {
    throw new EngineException(""String_Node_Str"",new Long(pageNumber));
  }
  if (renderOptions == null) {
    throw new EngineException(""String_Node_Str"");
  }
  doRender(pageNumber);
}","public void render(String pageRange) throws EngineException {
  long totalPage=reportDoc.getPageCount();
  if (renderOptions == null) {
    throw new EngineException(""String_Node_Str"");
  }
  List ps=parsePageSequence(pageRange,totalPage);
  doRender(ps);
}",0.4958123953098827
78620,"private IContentEmitter createContentEmitter(ReportExecutor executor) throws EngineException {
  EngineEmitterServices services=new EngineEmitterServices(this);
  EngineConfig config=engine.getConfig();
  if (config != null) {
    services.setEmitterConfig(config.getEmitterConfigs());
  }
  services.setRenderOption(renderOptions);
  services.setExecutor(executor);
  services.setRenderContext(appContext);
  services.setReportRunnable(runnable);
  String format=executionContext.getOutputFormat();
  if (format == null) {
    format=""String_Node_Str"";
  }
  ExtensionManager extManager=ExtensionManager.getInstance();
  if (!extManager.getSupportedFormat().contains(format)) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new EngineException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  IContentEmitter emitter=extManager.createEmitter(format,emitterID);
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION);
  }
  emitter=new LocalizedEmitter(executionContext,emitter);
  if (format.equalsIgnoreCase(""String_Node_Str"")) {
    boolean paginate=true;
    if (renderOptions instanceof HTMLRenderOption) {
      HTMLRenderOption htmlOption=(HTMLRenderOption)renderOptions;
      paginate=htmlOption.getHtmlPagination();
    }
    if (paginate) {
      emitter=new HTMLPaginationEmitter(executor,null,emitter);
    }
  }
 else   if (format.equalsIgnoreCase(""String_Node_Str"") || format.equalsIgnoreCase(""String_Node_Str"")) {
    emitter=new DefaultPaginationEmitter(executor,null,emitter);
  }
  emitter.initialize(services);
  return emitter;
}","private IContentEmitter createContentEmitter(ReportExecutor executor) throws EngineException {
  EngineEmitterServices services=new EngineEmitterServices(this);
  EngineConfig config=engine.getConfig();
  if (config != null) {
    services.setEmitterConfig(config.getEmitterConfigs());
  }
  services.setRenderOption(renderOptions);
  services.setExecutor(executor);
  services.setRenderContext(appContext);
  services.setReportRunnable(runnable);
  String format=executionContext.getOutputFormat();
  if (format == null) {
    format=""String_Node_Str"";
  }
  ExtensionManager extManager=ExtensionManager.getInstance();
  if (!extManager.getSupportedFormat().contains(format)) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new EngineException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  IContentEmitter emitter=null;
  try {
    emitter=extManager.createEmitter(format,emitterID);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,t);
  }
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION);
  }
  emitter=new LocalizedEmitter(executionContext,emitter);
  if (format.equalsIgnoreCase(""String_Node_Str"")) {
    boolean paginate=true;
    if (renderOptions instanceof HTMLRenderOption) {
      HTMLRenderOption htmlOption=(HTMLRenderOption)renderOptions;
      paginate=htmlOption.getHtmlPagination();
    }
    if (paginate) {
      emitter=new HTMLPaginationEmitter(executor,null,emitter);
    }
  }
 else   if (format.equalsIgnoreCase(""String_Node_Str"") || format.equalsIgnoreCase(""String_Node_Str"")) {
    emitter=new DefaultPaginationEmitter(executor,null,emitter);
  }
  emitter.initialize(services);
  return emitter;
}",0.9358761746821448
78621,"public void run() throws EngineException {
  ReportDesignHandle reportDesign=executionContext.getDesign();
  if (!validateParameters()) {
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    ReportExecutor executor=new ReportExecutor(executionContext);
    executionContext.setExecutor(executor);
    IContentEmitter emitter=createContentEmitter(executor);
    executor.execute(reportDesign,emitter);
    closeRender();
    closeFactory();
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    new EngineException(""String_Node_Str"",t);
  }
}","public void run() throws EngineException {
  ReportDesignHandle reportDesign=executionContext.getDesign();
  if (!validateParameters()) {
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    ReportExecutor executor=new ReportExecutor(executionContext);
    executionContext.setExecutor(executor);
    IContentEmitter emitter=createContentEmitter(executor);
    executor.execute(reportDesign,emitter);
    closeRender();
    closeFactory();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    err.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    new EngineException(""String_Node_Str"",t);
  }
}",0.9715206878022568
78622,"/** 
 * Return the value of the i:th expression in the current row. Null will be return if the i:th expression doesn't exist.
 */
public Object getExpressionValue(int i);","/** 
 * Return the value of the i:th expression in the current row. Null will be return if the i:th expression doesn't exist.
 * @throws ScriptException 
 */
public Object getExpressionValue(int i) throws ScriptException ;",0.8673469387755102
78623,"public void onCreate(ICellInstance cellInstance,IRowData rowData,IReportContext reportContext){
}","public void onCreate(ICellInstance cellInstance,IReportContext reportContext){
}",0.903954802259887
78624,"public void onCreate(IRowInstance rowInstance,IRowData rowData,IReportContext reportContext){
}","public void onCreate(IRowInstance rowInstance,IReportContext reportContext){
}",0.9017341040462428
78625,"/** 
 * Handle the onCreate event
 */
void onCreate(ICellInstance cellInstance,IRowData rowData,IReportContext reportContext);","/** 
 * Handle the onCreate event
 */
void onCreate(ICellInstance cellInstance,IReportContext reportContext);",0.9276595744680852
78626,"/** 
 * Handle the onCreate event
 */
void onCreate(IRowInstance rowInstance,IRowData rowData,IReportContext reportContext);","/** 
 * Handle the onCreate event
 */
void onCreate(IRowInstance rowInstance,IReportContext reportContext);",0.9264069264069263
78627,"private ModuleHandle getReportDesignHandle(){
  return SessionHandleAdapter.getInstance().getReportDesignHandle();
}","private ModuleHandle getReportDesignHandle(){
  if (handle == null) {
    handle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  }
  return handle;
}",0.8028673835125448
78628,"private GraphicalViewer createRulerContainer(int orientation){
  ScrollingGraphicalViewer viewer=new RulerViewer();
  final boolean isHorizontal=orientation == PositionConstants.NORTH || orientation == PositionConstants.SOUTH;
  viewer.setRootEditPart(new EditorRulerRootEditPart(isHorizontal));
  viewer.setEditPartFactory(new EditorRulerEditPartFactory(diagramViewer));
  viewer.createControl(this);
  ((GraphicalEditPart)viewer.getRootEditPart()).getFigure().setBorder(new RulerBorder(isHorizontal));
  viewer.setProperty(GraphicalViewer.class.toString(),diagramViewer);
  FigureCanvas canvas=(FigureCanvas)viewer.getControl();
  canvas.setScrollBarVisibility(FigureCanvas.NEVER);
  if (font == null) {
    FontData[] data=canvas.getFont().getFontData();
    for (int i=0; i < data.length; i++) {
      data[i].setHeight(data[i].getHeight() - 1);
    }
    font=new Font(Display.getCurrent(),data);
  }
  canvas.setFont(font);
  if (isHorizontal) {
    canvas.getViewport().setHorizontalRangeModel(editor.getViewport().getHorizontalRangeModel());
  }
 else {
    canvas.getViewport().setVerticalRangeModel(editor.getViewport().getVerticalRangeModel());
  }
  if (rulerEditDomain == null) {
    rulerEditDomain=new EditDomain();
    rulerEditDomain.setCommandStack(diagramViewer.getEditDomain().getCommandStack());
  }
  rulerEditDomain.addViewer(viewer);
  return viewer;
}","private GraphicalViewer createRulerContainer(int orientation){
  ScrollingGraphicalViewer viewer=new RulerViewer();
  final boolean isHorizontal=orientation == PositionConstants.NORTH || orientation == PositionConstants.SOUTH;
  viewer.setRootEditPart(new EditorRulerRootEditPart(isHorizontal));
  viewer.setEditPartFactory(new EditorRulerEditPartFactory(diagramViewer));
  viewer.createControl(this);
  ((GraphicalEditPart)viewer.getRootEditPart()).getFigure().setBorder(new RulerBorder(isHorizontal));
  viewer.setProperty(GraphicalViewer.class.toString(),diagramViewer);
  FigureCanvas canvas=(FigureCanvas)viewer.getControl();
  canvas.setScrollBarVisibility(FigureCanvas.NEVER);
  if (font == null) {
    FontData[] data=canvas.getFont().getFontData();
    for (int i=0; i < data.length; i++) {
      data[i].setHeight(data[i].getHeight() - 1);
    }
    font=new Font(Display.getCurrent(),data);
  }
  canvas.setFont(font);
  if (isHorizontal) {
    canvas.getViewport().setHorizontalRangeModel(new RulerDefaultRangeModel(editor.getViewport().getHorizontalRangeModel()));
  }
 else {
    canvas.getViewport().setVerticalRangeModel(new RulerDefaultRangeModel(editor.getViewport().getVerticalRangeModel()));
  }
  if (rulerEditDomain == null) {
    rulerEditDomain=new EditDomain();
    rulerEditDomain.setCommandStack(diagramViewer.getEditDomain().getCommandStack());
  }
  rulerEditDomain.addViewer(viewer);
  return viewer;
}",0.98005698005698
78629,"/** 
 * Constructor
 */
public RulerViewer(){
  super();
  init();
}","/** 
 * Constructor
 */
public RulerViewer(){
  super();
}",0.9206349206349206
78630,"private void disposeRulerViewer(GraphicalViewer viewer){
  if (viewer == null)   return;
  RangeModel rModel=new DefaultRangeModel();
  Viewport port=((FigureCanvas)viewer.getControl()).getViewport();
  port.setHorizontalRangeModel(rModel);
  port.setVerticalRangeModel(rModel);
  rulerEditDomain.removeViewer(viewer);
  viewer.getControl().dispose();
}","private void disposeRulerViewer(GraphicalViewer viewer){
  if (viewer == null)   return;
  RangeModel rModel=new DefaultRangeModel();
  Viewport port=((FigureCanvas)viewer.getControl()).getViewport();
  port.setHorizontalRangeModel(new RulerDefaultRangeModel(rModel));
  port.setVerticalRangeModel(new RulerDefaultRangeModel(rModel));
  rulerEditDomain.removeViewer(viewer);
  viewer.getControl().dispose();
}",0.89501312335958
78631,"private void disposeResources(){
  if (diagramViewer != null)   diagramViewer.removePropertyChangeListener(propertyListener);
  getZoomManager().removeZoomListener(zoomListener);
  if (font != null)   font.dispose();
  if (getReportDesignHandle() != null) {
    getReportDesignHandle().removeListener(designListener);
  }
  if (getMasterPageHandle() != null) {
    getMasterPageHandle().removeListener(designListener);
  }
}","private void disposeResources(){
  left=null;
  top=null;
  editor=null;
  if (diagramViewer != null) {
    diagramViewer.removePropertyChangeListener(propertyListener);
    diagramViewer.setProperty(RulerProvider.PROPERTY_HORIZONTAL_RULER,null);
    diagramViewer.setProperty(RulerProvider.PROPERTY_VERTICAL_RULER,null);
  }
  getZoomManager().removeZoomListener(zoomListener);
  if (font != null)   font.dispose();
  if (getReportDesignHandle() != null) {
    getReportDesignHandle().removeListener(designListener);
  }
  if (getMasterPageHandle() != null) {
    getMasterPageHandle().removeListener(designListener);
  }
  rulerEditDomain=null;
}",0.7835820895522388
78632,"private MasterPageHandle getMasterPageHandle(){
  return SessionHandleAdapter.getInstance().getMasterPageHandle();
}","private MasterPageHandle getMasterPageHandle(){
  return SessionHandleAdapter.getInstance().getMasterPageHandle(getReportDesignHandle());
}",0.9098039215686274
78633,"/** 
 * visit content of a row
 */
protected void handleRow(RowDesign row,Object value){
  if (row.getVisibility() != null) {
    for (int i=0; i < row.getVisibility().count(); i++)     addExpression(row.getVisibility().getRule(i).getExpression());
  }
  addExpression(row.getBookmark());
  for (int i=0; i < row.getCellCount(); i++) {
    CellDesign cell=row.getCell(i);
    if (cell != null) {
      handleCell(cell,value);
    }
  }
}","/** 
 * visit content of a row
 */
protected void handleRow(RowDesign row,Object value){
  if (row.getVisibility() != null) {
    for (int i=0; i < row.getVisibility().count(); i++)     addExpression(row.getVisibility().getRule(i).getExpression());
  }
  addExpression(row.getTOC());
  addExpression(row.getBookmark());
  for (int i=0; i < row.getCellCount(); i++) {
    CellDesign cell=row.getCell(i);
    if (cell != null) {
      handleCell(cell,value);
    }
  }
}",0.9657458563535912
78634,"/** 
 * create a table group using the DE's TableGroup.
 * @param handle De's table group
 * @return engine's table group
 */
public void visitTableGroup(TableGroupHandle handle){
  TableGroupDesign tableGroup=new TableGroupDesign();
  setupGroup(tableGroup,handle);
  TableBandDesign header=createTableBand(handle.getHeader());
  tableGroup.setHeader(header);
  TableBandDesign footer=createTableBand(handle.getFooter());
  tableGroup.setFooter(footer);
  currentElement=tableGroup;
}","/** 
 * create a table group using the DE's TableGroup.
 * @param handle De's table group
 * @return engine's table group
 */
public void visitTableGroup(TableGroupHandle handle){
  TableGroupDesign tableGroup=new TableGroupDesign();
  setupGroup(tableGroup,handle);
  TableBandDesign header=createTableBand(handle.getHeader());
  tableGroup.setHeader(header);
  String toc=handle.getTocExpression();
  if (null != toc && !""String_Node_Str"".equals(toc)) {
    if (header.getRowCount() > 0) {
      RowDesign row=header.getRow(0);
      row.setTOC(new Expression(toc));
    }
  }
  TableBandDesign footer=createTableBand(handle.getFooter());
  tableGroup.setFooter(footer);
  currentElement=tableGroup;
}",0.8164983164983165
78635,"/** 
 * create a list group using the DE's ListGroup.
 * @param handle De's list group
 * @return engine's list group
 */
public void visitListGroup(ListGroupHandle handle){
  ListGroupDesign listGroup=new ListGroupDesign();
  setupGroup(listGroup,handle);
  ListBandDesign header=createListBand(handle.getHeader());
  listGroup.setHeader(header);
  ListBandDesign footer=createListBand(handle.getFooter());
  listGroup.setFooter(footer);
  currentElement=listGroup;
}","/** 
 * create a list group using the DE's ListGroup.
 * @param handle De's list group
 * @return engine's list group
 */
public void visitListGroup(ListGroupHandle handle){
  ListGroupDesign listGroup=new ListGroupDesign();
  setupGroup(listGroup,handle);
  ListBandDesign header=createListBand(handle.getHeader());
  listGroup.setHeader(header);
  String tocExpr=handle.getTocExpression();
  if (null != tocExpr && !""String_Node_Str"".equals(tocExpr)) {
    if (header.getContentCount() > 0) {
      ReportItemDesign item=(ReportItemDesign)header.getContent(0);
      item.setTOC(new Expression(tocExpr));
    }
  }
  ListBandDesign footer=createListBand(handle.getFooter());
  listGroup.setFooter(footer);
  currentElement=listGroup;
}",0.7767634854771784
78636,"public void elementChanged(DesignElementHandle element,NotificationEvent ev){
switch (ev.getEventType()) {
case NotificationEvent.CONTENT_EVENT:
case NotificationEvent.ELEMENT_DELETE_EVENT:
case NotificationEvent.PROPERTY_EVENT:
case NotificationEvent.STYLE_EVENT:
{
      markDirty(true);
      refresh();
      for (Iterator it=getChildren().iterator(); it.hasNext(); ) {
        ((AbstractEditPart)it.next()).refresh();
      }
    }
}
}","public void elementChanged(DesignElementHandle element,NotificationEvent ev){
switch (ev.getEventType()) {
case NotificationEvent.CONTENT_EVENT:
case NotificationEvent.ELEMENT_DELETE_EVENT:
case NotificationEvent.PROPERTY_EVENT:
case NotificationEvent.STYLE_EVENT:
case NotificationEvent.THEME_EVENT:
case NotificationEvent.TEMPLATE_TRANSFORM_EVENT:
{
      markDirty(true);
      refresh();
      for (Iterator it=getChildren().iterator(); it.hasNext(); ) {
        ((AbstractEditPart)it.next()).refresh();
      }
    }
}
}",0.911917098445596
78637,"private void populateColumnsMap(){
  if (resultMeta == null)   return;
  for (int i=0; i < selectedColumns.length; i++) {
    for (int j=1; j <= resultMeta.getColumnCount(); j++) {
      try {
        String colName=resultMeta.getColumnName(j);
        String newColName=""String_Node_Str"" + colName + ""String_Node_Str"";
        if (selectedColumns[i].equalsIgnoreCase(newColName)) {
          if (columnsMap == null)           columnsMap=new HashMap();
          columnsMap.put(new Integer(i),new Integer(j));
        }
      }
 catch (      BirtException be) {
        be.printStackTrace();
      }
    }
  }
}","private void populateColumnsMap(){
  if (resultMeta == null)   return;
  for (int i=0; i < selectedColumns.length; i++) {
    for (int j=1; j <= resultMeta.getColumnCount(); j++) {
      try {
        String colName=resultMeta.getColumnName(j);
        if (colName.matches(""String_Node_Str"")) {
          colName=colName.replaceAll(""String_Node_Str"",""String_Node_Str"");
        }
        String newColName=""String_Node_Str"" + colName + ""String_Node_Str"";
        if (selectedColumns[i].equalsIgnoreCase(newColName)) {
          if (columnsMap == null)           columnsMap=new HashMap();
          columnsMap.put(new Integer(i),new Integer(j));
          break;
        }
      }
 catch (      BirtException be) {
        be.printStackTrace();
      }
    }
  }
}",0.8893740902474527
78638,"public void setExtensionProperty(String name,String value){
  Map m=dataSet.getPublicProperties();
  if (m == null)   return;
  Set s=(Set)m.get(name);
  if (s == null)   s=new HashSet();
  s.add(value);
  m.put(name,value);
}","public void setExtensionProperty(String name,String value){
  Map m=dataSet.getPublicProperties();
  if (m == null)   return;
  Set s=(Set)m.get(name);
  if (s == null)   s=new HashSet();
  s.add(value);
  m.put(name,s);
}",0.9866071428571428
78639,"/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  keyChooser=new Combo(composite,SWT.DROP_DOWN | SWT.READ_ONLY);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  new Label(intervalArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
    }
  }
);
  intervalRange=new Spinner(intervalArea,SWT.NONE);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.setMinimum(0);
  intervalRange.setMaximum(Integer.MAX_VALUE);
  intervalRange.setStep(1);
}","/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  Composite keyArea=new Composite(composite,SWT.NONE);
  keyArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  keyChooser=new Combo(keyArea,SWT.DROP_DOWN);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button exprButton=new Button(keyArea,SWT.PUSH);
  exprButton.setText(""String_Node_Str"");
  exprButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(getKeyExpression());
      expressionBuilder.setExpressionProvier(new ExpressionProvider(dataSetList));
      if (expressionBuilder.open() == OK) {
        setKeyExpression(expressionBuilder.getResult().trim());
      }
    }
  }
);
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  new Label(intervalArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
    }
  }
);
  intervalRange=new Spinner(intervalArea,SWT.NONE);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.setMinimum(0);
  intervalRange.setMaximum(Integer.MAX_VALUE);
  intervalRange.setStep(1);
}",0.7543447627994364
78640,"protected boolean initDialog(){
  if (inputGroup.getName() != null) {
    nameEditor.setText(inputGroup.getName());
  }
  columnList=DataSetManager.getCurrentInstance().getColumns(dataSetList);
  Iterator itor=columnList.iterator();
  while (itor.hasNext()) {
    keyChooser.add(((DataSetItemModel)itor.next()).getDisplayName());
  }
  String groupKey=inputGroup.getKeyExpr();
  int index=-1;
  if (groupKey != null) {
    for (int i=0; i < columnList.size(); i++) {
      if (groupKey.equals(DEUtil.getExpression(columnList.get(i)))) {
        index=i;
        break;
      }
    }
    if (index != -1) {
      keyChooser.select(index);
    }
  }
  index=getIntervalTypeIndex(inputGroup.getInterval());
  intervalType.select(index);
  if (index == 0) {
    intervalRange.setEnabled(false);
  }
 else {
    intervalRange.setSelection(inputGroup.getIntervalRange());
  }
  if (inputGroup instanceof TableGroupHandle) {
    includeHeader.setSelection(inputGroup.hasHeader());
    includeFooter.setSelection(inputGroup.hasFooter());
  }
 else {
    includeHeader.setSelection(false);
    includeFooter.setSelection(false);
  }
  if (DesignChoiceConstants.SORT_DIRECTION_ASC.equals(inputGroup.getSortDirection())) {
    ascending.setSelection(true);
  }
 else {
    descending.setSelection(true);
  }
  List list=new ArrayList(1);
  list.add(inputGroup);
  tocEditor.setText(UIUtil.convertToGUIString(inputGroup.getTocExpression()));
  return true;
}","protected boolean initDialog(){
  if (inputGroup.getName() != null) {
    nameEditor.setText(inputGroup.getName());
  }
  columnList=DataSetManager.getCurrentInstance().getColumns(dataSetList);
  Iterator itor=columnList.iterator();
  while (itor.hasNext()) {
    keyChooser.add(((DataSetItemModel)itor.next()).getDisplayName());
  }
  setKeyExpression(inputGroup.getKeyExpr());
  int index=getIntervalTypeIndex(inputGroup.getInterval());
  intervalType.select(index);
  if (index == 0) {
    intervalRange.setEnabled(false);
  }
 else {
    intervalRange.setSelection(inputGroup.getIntervalRange());
  }
  if (inputGroup instanceof TableGroupHandle) {
    includeHeader.setSelection(inputGroup.hasHeader());
    includeFooter.setSelection(inputGroup.hasFooter());
  }
 else {
    includeHeader.setSelection(false);
    includeFooter.setSelection(false);
  }
  if (DesignChoiceConstants.SORT_DIRECTION_ASC.equals(inputGroup.getSortDirection())) {
    ascending.setSelection(true);
  }
 else {
    descending.setSelection(true);
  }
  List list=new ArrayList(1);
  list.add(inputGroup);
  tocEditor.setText(UIUtil.convertToGUIString(inputGroup.getTocExpression()));
  return true;
}",0.8747620860296916
78641,"protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    int index=keyChooser.getSelectionIndex();
    String oldKey=inputGroup.getKeyExpr();
    String newKey=null;
    if (index != -1) {
      newKey=DEUtil.getExpression(columnList.get(index));
    }
    inputGroup.setKeyExpr(newKey);
    if (newKey != null && !newKey.equals(oldKey)) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DesignElementHandle dataItemHandle=InsertInLayoutUtil.performInsert(columnList.get(index),slotHandle,inputGroup.getContainer());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getSelection());
    }
    if (inputGroup instanceof TableGroupHandle) {
      if (includeHeader.getSelection() != inputGroup.hasHeader()) {
        if (includeHeader.getSelection()) {
          inputGroup.getHeader().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.HEADER_SLOT);
        }
      }
      if (includeFooter.getSelection() != inputGroup.hasFooter()) {
        if (includeFooter.getSelection()) {
          inputGroup.getFooter().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.FOOTER_SLOT);
        }
      }
    }
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
    inputGroup.setTocExpression(UIUtil.convertToModelString(tocEditor.getText(),true));
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}","protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    String newToc=UIUtil.convertToModelString(tocEditor.getText(),true);
    if (newToc != inputGroup.getTocExpression()) {
      if (newToc == null || !newToc.equals(inputGroup.getTocExpression())) {
        inputGroup.setTocExpression(newToc);
      }
    }
    int index=keyChooser.getSelectionIndex();
    String oldKey=inputGroup.getKeyExpr();
    String newKey=getKeyExpression();
    inputGroup.setKeyExpr(newKey);
    if (newKey != null && !newKey.equals(oldKey)) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DesignElementHandle dataItemHandle=InsertInLayoutUtil.performInsert(columnList.get(index),slotHandle,inputGroup.getContainer());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getSelection());
    }
    if (inputGroup instanceof TableGroupHandle) {
      if (includeHeader.getSelection() != inputGroup.hasHeader()) {
        if (includeHeader.getSelection()) {
          inputGroup.getHeader().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.HEADER_SLOT);
        }
      }
      if (includeFooter.getSelection() != inputGroup.hasFooter()) {
        if (includeFooter.getSelection()) {
          inputGroup.getFooter().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.FOOTER_SLOT);
        }
      }
    }
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}",0.8909603295035768
78642,"protected Request insertElement() throws Exception {
  Request request=new Request(IRequestConstants.REQUEST_TYPE_INSERT);
  Map extendsData=new HashMap();
  extendsData.put(IRequestConstants.REQUEST_KEY_INSERT_SLOT,slotHandle);
  extendsData.put(IRequestConstants.REQUEST_KEY_INSERT_TYPE,insertType);
  extendsData.put(IRequestConstants.REQUEST_KEY_INSERT_POSITION,InsertAction.BELOW);
  request.setExtendedData(extendsData);
  ProviderFactory.createProvider(slotHandle.getElementHandle()).performRequest(model,request);
  return request;
}","protected Request insertElement() throws Exception {
  Request request=new Request(IRequestConstants.REQUEST_TYPE_INSERT);
  Map extendsData=new HashMap();
  extendsData.put(IRequestConstants.REQUEST_KEY_INSERT_SLOT,slotHandle);
  extendsData.put(IRequestConstants.REQUEST_KEY_INSERT_TYPE,insertType);
  extendsData.put(IRequestConstants.REQUEST_KEY_INSERT_POSITION,InsertAction.BELOW);
  request.setExtendedData(extendsData);
  if (ProviderFactory.createProvider(slotHandle.getElementHandle()).performRequest(model,request)) {
    return request;
  }
  return null;
}",0.939585211902615
78643,"public void run(){
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
  stack.startTrans(STACK_MSG_INSERT_ELEMENT);
  try {
    final Request req=insertElement();
    stack.commit();
    selectElement(req.getExtendedData().get(IRequestConstants.REQUEST_KEY_RESULT),true);
  }
 catch (  Exception e) {
    stack.rollbackAll();
    ExceptionHandler.handle(e);
  }
}","public void run(){
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
  stack.startTrans(STACK_MSG_INSERT_ELEMENT);
  try {
    final Request req=insertElement();
    if (req != null) {
      stack.commit();
      selectElement(req.getExtendedData().get(IRequestConstants.REQUEST_KEY_RESULT),true);
      return;
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
  stack.rollback();
}",0.8357289527720739
78644,"private void placeComponents(){
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=5;
  glContent.horizontalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  glContent.numColumns=9;
  cmpContent=new Composite(shell,SWT.NONE);
  cmpContent.setLayout(glContent);
  Label lblFont=new Label(cmpContent,SWT.NONE);
  GridData gdLFont=new GridData();
  gdLFont.heightHint=22;
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  cmbFontNames=new Combo(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBFontNames=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBFontNames.horizontalSpan=8;
  cmbFontNames.setLayoutData(gdCMBFontNames);
  cmbFontNames.addSelectionListener(this);
  Label lblSize=new Label(cmpContent,SWT.NONE);
  GridData gdLSize=new GridData();
  gdLSize.heightHint=22;
  lblSize.setLayoutData(gdLSize);
  lblSize.setText(Messages.getString(""String_Node_Str""));
  iscFontSizes=new IntegerSpinControl(cmpContent,SWT.NONE,ChartUIUtil.getFontSize(fdCurrent));
  GridData gdISCFontSizes=new GridData(GridData.FILL_HORIZONTAL);
  gdISCFontSizes.horizontalSpan=3;
  iscFontSizes.setLayoutData(gdISCFontSizes);
  iscFontSizes.setMinimum(MIN_FONT_SIZE);
  iscFontSizes.setMaximum(MAX_FONT_SIZE);
  iscFontSizes.addListener(this);
  Label lblForeground=new Label(cmpContent,SWT.NONE);
  GridData gdLForeground=new GridData();
  gdLForeground.horizontalSpan=2;
  gdLForeground.horizontalIndent=40;
  lblForeground.setLayoutData(gdLForeground);
  lblForeground.setText(Messages.getString(""String_Node_Str""));
  fccColor=new FillChooserComposite(cmpContent,SWT.NONE,cdCurrent,false,false);
  GridData gdFCCColor=new GridData(GridData.FILL_HORIZONTAL);
  gdFCCColor.horizontalSpan=3;
  fccColor.setLayoutData(gdFCCColor);
  fccColor.addListener(this);
  createFontStylePanel();
  Label lblFormat=new Label(cmpContent,SWT.NONE);
  GridData gdLFormat=new GridData();
  gdLFormat.horizontalSpan=2;
  gdLFormat.horizontalIndent=40;
  lblFormat.setLayoutData(gdLFormat);
  lblFormat.setText(Messages.getString(""String_Node_Str""));
  Composite cmpFormat=new Composite(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    cmpFormat.setLayout(layout);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=3;
    cmpFormat.setLayoutData(gd);
  }
  cbStrikethru=new Button(cmpFormat,SWT.CHECK);
  cbStrikethru.addSelectionListener(this);
  cbStrikethru.setText(Messages.getString(""String_Node_Str""));
  cbStrikethru.setSelection(fdCurrent.isSetStrikethrough() && fdCurrent.isStrikethrough());
  cbWrap=new Button(cmpFormat,SWT.CHECK);
  cbWrap.addSelectionListener(this);
  cbWrap.setText(Messages.getString(""String_Node_Str""));
  cbWrap.setSelection(fdCurrent.isSetWordWrap() && fdCurrent.isWordWrap());
  if (isAlignmentEnabled) {
    createAlignmentPanel();
  }
  createRotationPanel();
  Label lblPreview=new Label(cmpContent,SWT.NONE);
{
    lblPreview.setText(Messages.getString(""String_Node_Str""));
    lblPreview.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  }
  FillLayout flPreview=new FillLayout();
  flPreview.marginHeight=2;
  flPreview.marginWidth=3;
  Composite grpPreview=new Composite(cmpContent,SWT.NONE);
  GridData gdGRPPreview=new GridData(GridData.FILL_BOTH);
  gdGRPPreview.horizontalSpan=4;
  grpPreview.setLayoutData(gdGRPPreview);
  grpPreview.setLayout(flPreview);
  fcPreview=new FontCanvas(grpPreview,SWT.NONE,fdCurrent,cdCurrent,true,true,true);
  createButtonPanel();
}","private void placeComponents(){
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=5;
  glContent.horizontalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  glContent.numColumns=9;
  cmpContent=new Composite(shell,SWT.NONE);
  cmpContent.setLayout(glContent);
  Label lblFont=new Label(cmpContent,SWT.NONE);
  GridData gdLFont=new GridData();
  gdLFont.heightHint=22;
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  cmbFontNames=new Combo(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBFontNames=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBFontNames.horizontalSpan=8;
  cmbFontNames.setLayoutData(gdCMBFontNames);
  cmbFontNames.addSelectionListener(this);
  Label lblSize=new Label(cmpContent,SWT.NONE);
  GridData gdLSize=new GridData();
  gdLSize.heightHint=22;
  lblSize.setLayoutData(gdLSize);
  lblSize.setText(Messages.getString(""String_Node_Str""));
  iscFontSizes=new IntegerSpinControl(cmpContent,SWT.NONE,ChartUIUtil.getFontSize(fdCurrent));
  GridData gdISCFontSizes=new GridData(GridData.FILL_HORIZONTAL);
  gdISCFontSizes.horizontalSpan=3;
  iscFontSizes.setLayoutData(gdISCFontSizes);
  iscFontSizes.setMinimum(MIN_FONT_SIZE);
  iscFontSizes.setMaximum(MAX_FONT_SIZE);
  iscFontSizes.addListener(this);
  Label lblForeground=new Label(cmpContent,SWT.NONE);
  GridData gdLForeground=new GridData();
  gdLForeground.horizontalSpan=2;
  gdLForeground.horizontalIndent=40;
  lblForeground.setLayoutData(gdLForeground);
  lblForeground.setText(Messages.getString(""String_Node_Str""));
  fccColor=new FillChooserComposite(cmpContent,SWT.NONE,cdCurrent,false,false);
  GridData gdFCCColor=new GridData(GridData.FILL_HORIZONTAL);
  gdFCCColor.horizontalSpan=3;
  fccColor.setLayoutData(gdFCCColor);
  fccColor.addListener(this);
  createFontStylePanel();
  Label lblFormat=new Label(cmpContent,SWT.NONE);
  GridData gdLFormat=new GridData();
  gdLFormat.horizontalSpan=2;
  gdLFormat.horizontalIndent=40;
  lblFormat.setLayoutData(gdLFormat);
  lblFormat.setText(Messages.getString(""String_Node_Str""));
  Composite cmpFormat=new Composite(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    cmpFormat.setLayout(layout);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=3;
    cmpFormat.setLayoutData(gd);
  }
  cbStrikethru=new Button(cmpFormat,SWT.CHECK);
  cbStrikethru.addSelectionListener(this);
  cbStrikethru.setText(Messages.getString(""String_Node_Str""));
  cbStrikethru.setSelection(fdCurrent.isSetStrikethrough() && fdCurrent.isStrikethrough());
  if (isAlignmentEnabled) {
    createAlignmentPanel();
  }
  createRotationPanel();
  Label lblPreview=new Label(cmpContent,SWT.NONE);
{
    lblPreview.setText(Messages.getString(""String_Node_Str""));
    lblPreview.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  }
  FillLayout flPreview=new FillLayout();
  flPreview.marginHeight=2;
  flPreview.marginWidth=3;
  Composite grpPreview=new Composite(cmpContent,SWT.NONE);
  GridData gdGRPPreview=new GridData(GridData.FILL_BOTH);
  gdGRPPreview.horizontalSpan=4;
  grpPreview.setLayoutData(gdGRPPreview);
  grpPreview.setLayout(flPreview);
  fcPreview=new FontCanvas(grpPreview,SWT.NONE,fdCurrent,cdCurrent,true,true,true);
  createButtonPanel();
}",0.9693464430306536
78645,"public void getComponent(Composite parent){
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpBasic.setLayoutData(gd);
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  List keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),getChart().getLegend().getTitle().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=200;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
    txtTitle.setEnabled(getChart().getLegend().getTitle().isVisible());
  }
  btnTitleVisible=new Button(cmpBasic,SWT.CHECK);
{
    btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
    btnTitleVisible.addSelectionListener(this);
    btnTitleVisible.setSelection(getChart().getLegend().getTitle().isVisible());
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  cmbBackgroundColor=new FillChooserComposite(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY,getChart().getLegend().getClientArea().getBackground(),true,true);
{
    GridData gridData=new GridData();
    gridData.widthHint=200;
    gridData.horizontalSpan=2;
    cmbBackgroundColor.setLayoutData(gridData);
    cmbBackgroundColor.addListener(this);
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  btnShowValue=new Button(cmpBasic,SWT.CHECK);
{
    GridData gridData=new GridData();
    gridData.horizontalSpan=2;
    btnShowValue.setLayoutData(gridData);
    btnShowValue.setText(Messages.getString(""String_Node_Str""));
    btnShowValue.setToolTipText(Messages.getString(""String_Node_Str""));
    btnShowValue.addSelectionListener(this);
    btnShowValue.setSelection(getChart().getLegend().isShowValue());
  }
  createButtonGroup(cmpContent);
}","public void getComponent(Composite parent){
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpBasic.setLayoutData(gd);
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  List keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),getChart().getLegend().getTitle().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=200;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
    txtTitle.setEnabled(getChart().getLegend().getTitle().isVisible());
  }
  btnTitleVisible=new Button(cmpBasic,SWT.CHECK);
{
    btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
    btnTitleVisible.addSelectionListener(this);
    btnTitleVisible.setSelection(getChart().getLegend().getTitle().isVisible());
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  cmbBackgroundColor=new FillChooserComposite(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY,getChart().getLegend().getClientArea().getBackground(),true,true);
{
    GridData gridData=new GridData();
    gridData.widthHint=200;
    gridData.horizontalSpan=2;
    cmbBackgroundColor.setLayoutData(gridData);
    cmbBackgroundColor.addListener(this);
  }
  if (getChart().getLegend().getItemType() == LegendItemType.SERIES_LITERAL) {
    new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    btnShowValue=new Button(cmpBasic,SWT.CHECK);
{
      GridData gridData=new GridData();
      gridData.horizontalSpan=2;
      btnShowValue.setLayoutData(gridData);
      btnShowValue.setText(Messages.getString(""String_Node_Str""));
      btnShowValue.setToolTipText(Messages.getString(""String_Node_Str""));
      btnShowValue.addSelectionListener(this);
      btnShowValue.setSelection(getChart().getLegend().isShowValue());
    }
  }
  createButtonGroup(cmpContent);
}",0.9778256189451022
78646,"public boolean isEnabled(){
  if (getSelectedElement() == null) {
    return false;
  }
  return super.isEnabled() && ((getSelectedElement() instanceof TemplateReportItemHandle && ((TemplateReportItemHandle)getSelectedElement()).canTransformToTemplate()) || (getSelectedElement().isTemplateParameterValue()));
}","public boolean isEnabled(){
  if (getSelectedElement() == null) {
    return false;
  }
  return super.isEnabled() && (getSelectedElement().isTemplateParameterValue());
}",0.7068607068607069
78647,"protected boolean doAction() throws Exception {
  if (getSelectedElement() == null) {
    return false;
  }
  if (getSelectedElement() instanceof TemplateReportItemHandle && ((TemplateReportItemHandle)getSelectedElement()).canTransformToTemplate()) {
    return ProviderFactory.createProvider(getSelectedElement()).performRequest(getSelectedElement(),new Request(IRequestConstants.REQUEST_TRANSFER_PLACEHOLDER));
  }
 else   if (getSelectedElement().isTemplateParameterValue()) {
    return ProviderFactory.createProvider(getSelectedElement()).performRequest(getSelectedElement(),new Request(IRequestConstants.REQUST_REVERT_TO_REPORTITEM));
  }
  return false;
}","protected boolean doAction() throws Exception {
  if (getSelectedElement() == null) {
    return false;
  }
  if (getSelectedElement().isTemplateParameterValue()) {
    if (getSelectedElement() instanceof TemplateReportItemHandle) {
      return ProviderFactory.createProvider(getSelectedElement()).performRequest(getSelectedElement(),new Request(IRequestConstants.REQUEST_TRANSFER_PLACEHOLDER));
    }
    return ProviderFactory.createProvider(getSelectedElement()).performRequest(getSelectedElement(),new Request(IRequestConstants.REQUST_REVERT_TO_REPORTITEM));
  }
  return false;
}",0.8372093023255814
78648,"public boolean performFinish(){
  String templateFolderPath=ReportPlugin.getDefault().getTemplatePreference();
  String filePath=SessionHandleAdapter.getInstance().getReportDesignHandle().getFileName();
  String fileName=filePath.substring(filePath.lastIndexOf(File.separator));
  String targetPath=templateFolderPath + fileName;
  int overwrite=0;
  try {
    if (new File(targetPath).exists()) {
      String[] buttons=new String[]{IDialogConstants.YES_LABEL,IDialogConstants.NO_LABEL,IDialogConstants.CANCEL_LABEL};
      String question=Messages.getFormattedString(""String_Node_Str"",new Object[]{targetPath});
      MessageDialog d=new MessageDialog(getShell(),Messages.getString(""String_Node_Str""),null,question,MessageDialog.QUESTION,buttons,0);
      overwrite=d.open();
    }
    if (overwrite == 0) {
      copyFile(filePath,templateFolderPath + fileName);
    }
  }
 catch (  IOException e) {
    ExceptionHandler.handle(e);
  }
  try {
    setDesignFile(templateFolderPath + fileName);
  }
 catch (  DesignFileException e) {
    ExceptionHandler.handle(e);
    return false;
  }
catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return false;
  }
catch (  IOException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  return overwrite != 1;
}","public boolean performFinish(){
  String templateFolderPath=ReportPlugin.getDefault().getTemplatePreference();
  String filePath=SessionHandleAdapter.getInstance().getReportDesignHandle().getFileName();
  String fileName=filePath.substring(filePath.lastIndexOf(File.separator));
  String targetPath=templateFolderPath + fileName;
  if (ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(targetPath)) != null) {
    ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    return true;
  }
  int overwrite=0;
  try {
    if (new File(targetPath).exists()) {
      String[] buttons=new String[]{IDialogConstants.YES_LABEL,IDialogConstants.NO_LABEL,IDialogConstants.CANCEL_LABEL};
      String question=Messages.getFormattedString(""String_Node_Str"",new Object[]{targetPath});
      MessageDialog d=new MessageDialog(getShell(),Messages.getString(""String_Node_Str""),null,question,MessageDialog.QUESTION,buttons,0);
      overwrite=d.open();
    }
    if (overwrite == 0) {
      copyFile(filePath,templateFolderPath + fileName);
    }
  }
 catch (  IOException e) {
    ExceptionHandler.handle(e);
  }
  try {
    setDesignFile(templateFolderPath + fileName);
  }
 catch (  DesignFileException e) {
    ExceptionHandler.handle(e);
    return false;
  }
catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return false;
  }
catch (  IOException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  return overwrite != 1;
}",0.9183381088825217
78649,"/** 
 * get the report design handle
 * @return report design object.
 */
public Object getDesign(){
  return scriptContext.eval(""String_Node_Str"");
}","/** 
 * get the report design handle
 * @return report design object.
 */
public IReportDesign getDesign(){
  Object design=scriptContext.eval(""String_Node_Str"");
  if (design instanceof IReportDesign) {
    return (IReportDesign)design;
  }
  return null;
}",0.6274509803921569
78650,"/** 
 * returns the metadata corresponding to the data stored in the report document, for the specific extraction level, i.e., report, daat set, report item, or report item instance levels. To get the metadata for the extracted data, use the getResultMetaData method from the IDataIterator interface.
 * @return a List of IResultMetaData. The list usually has one result setmeta data, but could have more if data extraction is based on the whole report
 */
public List getMetaData();","/** 
 * returns the metadata corresponding to the data stored in the report document, for the specific extraction level, i.e., report, daat set, report item, or report item instance levels. To get the metadata for the extracted data, use the getResultMetaData method from the IDataIterator interface.
 * @return a List of IResultMetaData. The list usually has one result setmeta data, but could have more if data extraction is based on the whole report
 */
public List getMetaData() throws EngineException ;",0.9757575757575756
78651,"public List getMetaData(){
  if (resultMetaList == null) {
    resultMetaList=new ArrayList();
    ResultMetaData metaData=null;
    if (selectedColumns == null && instanceId != null) {
      try {
        currentResult=extract();
        resultMetaList.add(currentResult.getResultMetaData());
      }
 catch (      BirtException e) {
        e.printStackTrace();
      }
    }
    if (selectedColumns == null) {
      return null;
    }
 else {
      metaData=new ResultMetaData(null,selectedColumns);
      resultMetaList.add(metaData);
    }
  }
  return resultMetaList;
}","public List getMetaData() throws EngineException {
  if (resultMetaList == null) {
    resultMetaList=new ArrayList();
    ResultMetaData metaData=null;
    if (selectedColumns == null && instanceId != null) {
      currentResult=extract();
      try {
        resultMetaList.add(currentResult.getResultMetaData());
      }
 catch (      BirtException be) {
        be.printStackTrace();
      }
    }
    if (selectedColumns == null) {
      return null;
    }
 else {
      metaData=new ResultMetaData(null,selectedColumns);
      resultMetaList.add(metaData);
    }
  }
  return resultMetaList;
}",0.9011925042589438
78652,"/** 
 * Gets the first MasterPageHandle
 */
public MasterPageHandle getMasterPageHandle(){
  SlotHandle slotHandle=getReportDesignHandle().getMasterPages();
  Iterator iter=slotHandle.iterator();
  return (MasterPageHandle)iter.next();
}","/** 
 * Gets the first MasterPageHandle
 * @param handle
 * @return
 */
public MasterPageHandle getMasterPageHandle(ModuleHandle handle){
  SlotHandle slotHandle=handle.getMasterPages();
  Iterator iter=slotHandle.iterator();
  return (MasterPageHandle)iter.next();
}",0.8492063492063492
78653,"public boolean performFinish(){
  String templateFolderPath=ReportPlugin.getDefault().getTemplatePreference();
  String filePath=SessionHandleAdapter.getInstance().getReportDesignHandle().getFileName();
  String fileName=filePath.substring(filePath.lastIndexOf(File.separator));
  try {
    copyFile(filePath,templateFolderPath + fileName);
  }
 catch (  IOException e) {
    ExceptionHandler.handle(e);
  }
  try {
    setDesignFile(templateFolderPath + fileName);
  }
 catch (  DesignFileException e) {
    ExceptionHandler.handle(e);
    return false;
  }
catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return false;
  }
catch (  IOException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  return true;
}","public boolean performFinish(){
  String templateFolderPath=ReportPlugin.getDefault().getTemplatePreference();
  String filePath=SessionHandleAdapter.getInstance().getReportDesignHandle().getFileName();
  String fileName=filePath.substring(filePath.lastIndexOf(File.separator));
  String targetPath=templateFolderPath + fileName;
  int overwrite=0;
  try {
    if (new File(targetPath).exists()) {
      String[] buttons=new String[]{IDialogConstants.YES_LABEL,IDialogConstants.NO_LABEL,IDialogConstants.CANCEL_LABEL};
      String question=Messages.getFormattedString(""String_Node_Str"",new Object[]{targetPath});
      MessageDialog d=new MessageDialog(getShell(),Messages.getString(""String_Node_Str""),null,question,MessageDialog.QUESTION,buttons,0);
      overwrite=d.open();
    }
    if (overwrite == 0) {
      copyFile(filePath,templateFolderPath + fileName);
    }
  }
 catch (  IOException e) {
    ExceptionHandler.handle(e);
  }
  try {
    setDesignFile(templateFolderPath + fileName);
  }
 catch (  DesignFileException e) {
    ExceptionHandler.handle(e);
    return false;
  }
catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return false;
  }
catch (  IOException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  return overwrite != 1;
}",0.7286208601087494
78654,"public IPageContent executeMasterPage(int pageNo,MasterPageDesign masterPage){
  IReportContent reportContent=context.getReportContent();
  IPageContent pageContent=reportContent.createPageContent();
  pageContent.setGenerateBy(masterPage);
  pageContent.setPageNumber(pageNo);
  context.setPageNumber(pageNo);
  if (masterPage instanceof SimpleMasterPageDesign) {
    TOCBuilder tocBuilder=context.getTOCBuilder();
    context.setTOCBuilder(null);
    SimpleMasterPageDesign pageDesign=(SimpleMasterPageDesign)masterPage;
    InstanceID iid=new InstanceID(null,pageDesign.getID(),null);
    pageContent.setInstanceID(iid);
    for (int i=0; i < pageDesign.getHeaderCount(); i++) {
      pageDesign.getHeader(i).accept(builder,new PageContentBuilder(pageContent.getHeader()));
    }
    for (int i=0; i < pageDesign.getFooterCount(); i++) {
      pageDesign.getFooter(i).accept(builder,new PageContentBuilder(pageContent.getFooter()));
    }
    context.setTOCBuilder(tocBuilder);
  }
  return pageContent;
}","public IPageContent executeMasterPage(int pageNo,MasterPageDesign masterPage){
  IReportContent reportContent=context.getReportContent();
  IPageContent pageContent=reportContent.createPageContent();
  pageContent.setGenerateBy(masterPage);
  pageContent.setPageNumber(pageNo);
  context.setPageNumber(pageNo);
  context.pushContent(pageContent);
  if (masterPage instanceof SimpleMasterPageDesign) {
    TOCBuilder tocBuilder=context.getTOCBuilder();
    context.setTOCBuilder(null);
    SimpleMasterPageDesign pageDesign=(SimpleMasterPageDesign)masterPage;
    InstanceID iid=new InstanceID(null,pageDesign.getID(),null);
    pageContent.setInstanceID(iid);
    for (int i=0; i < pageDesign.getHeaderCount(); i++) {
      pageDesign.getHeader(i).accept(builder,new PageContentBuilder(pageContent.getHeader()));
    }
    for (int i=0; i < pageDesign.getFooterCount(); i++) {
      pageDesign.getFooter(i).accept(builder,new PageContentBuilder(pageContent.getFooter()));
    }
    context.setTOCBuilder(tocBuilder);
  }
  context.popContent();
  return pageContent;
}",0.9710982658959536
78655,"void setUserProperty(String name,Object value) throws ScriptException ;","void setUserProperty(String name,Object value,String type) throws ScriptException ;",0.922077922077922
78656,"public void setUserProperty(String name,Object value) throws ScriptException {
  try {
    handle.setProperty(name,value);
  }
 catch (  SemanticException e) {
    throw new ScriptException(e.getLocalizedMessage());
  }
}","public void setUserProperty(String name,Object value,String type) throws ScriptException {
  if (handle.getUserPropertyDefnHandle(name) == null)   addUserProperty(name,type);
  try {
    handle.setProperty(name,value);
  }
 catch (  SemanticException e) {
    throw new ScriptException(e.getLocalizedMessage());
  }
}",0.8215613382899628
78657,"public void setNamedExpression(String name,String exp) throws ScriptException {
  setUserProperty(name,exp);
}","public void setNamedExpression(String name,String exp) throws ScriptException {
  UserPropertyDefnHandle propDefn=handle.getUserPropertyDefnHandle(name);
  if (propDefn == null) {
    addUserProperty(name,IPropertyType.EXPRESSION_TYPE_NAME);
  }
 else   if (propDefn.getType() != IPropertyType.EXPRESSION_TYPE)   return;
  setUserProperty(name,exp);
}",0.4642082429501085
78658,"public String getNamedExpression(String name){
  Object prop=getUserProperty(name);
  if (prop == null || (prop instanceof String))   return null;
  return (String)prop;
}","public String getNamedExpression(String name){
  UserPropertyDefnHandle propDefn=handle.getUserPropertyDefnHandle(name);
  if (propDefn == null || propDefn.getDefn() == null || propDefn.getDefn().getDefault() == null || propDefn.getType() != IPropertyType.EXPRESSION_TYPE)   return null;
  return propDefn.getDefn().getDefault().toString();
}",0.4210526315789473
78659,"protected void addNewSeriesDefinition(){
  SeriesDefinition sdTmp=SeriesDefinitionImpl.create();
  sdTmp.getSeriesPalette().update(-seriesDefns.size());
  sdTmp.getSeries().add(EcoreUtil.copy(((SeriesDefinition)seriesDefns.get(0)).getDesignTimeSeries()));
  sdTmp.setQuery((Query)EcoreUtil.copy(((SeriesDefinition)seriesDefns.get(0)).getQuery()));
  cleanDataDefinition(sdTmp);
  sdTmp.eAdapters().addAll(((SeriesDefinition)seriesDefns.get(0)).eAdapters());
  int firstIndex=getFirstIndexOfSameAxis();
  EList list=chart.getSampleData().getOrthogonalSampleData();
  OrthogonalSampleData sdOrthogonal=(OrthogonalSampleData)EcoreUtil.copy((EObject)list.get(firstIndex));
  sdOrthogonal.setSeriesDefinitionIndex(list.size());
  sdOrthogonal.eAdapters().addAll(chart.getSampleData().eAdapters());
  list.add(sdOrthogonal);
  seriesDefns.add(sdTmp);
}","protected void addNewSeriesDefinition(){
  SeriesDefinition sdTmp=SeriesDefinitionImpl.create();
  sdTmp.getSeriesPalette().update(-seriesDefns.size());
  sdTmp.getSeries().add(EcoreUtil.copy(((SeriesDefinition)seriesDefns.get(0)).getDesignTimeSeries()));
  sdTmp.setQuery((Query)EcoreUtil.copy(((SeriesDefinition)seriesDefns.get(0)).getQuery()));
  cleanDataDefinition(sdTmp);
  sdTmp.eAdapters().addAll(((SeriesDefinition)seriesDefns.get(0)).eAdapters());
  int firstIndex=getFirstIndexOfSameAxis();
  EList list=chart.getSampleData().getOrthogonalSampleData();
  OrthogonalSampleData sdOrthogonal=(OrthogonalSampleData)EcoreUtil.copy((EObject)list.get(firstIndex));
  sdOrthogonal.setSeriesDefinitionIndex(list.size());
  sdOrthogonal.eAdapters().addAll(chart.getSampleData().eAdapters());
  boolean isNotificaionIgnored=ChartAdapter.isNotificationIgnored();
  ChartAdapter.ignoreNotifications(true);
  list.add(sdOrthogonal);
  ChartAdapter.ignoreNotifications(isNotificaionIgnored);
  seriesDefns.add(sdTmp);
}",0.9091886082751208
78660,"/** 
 * Relativizes the path against this base path.
 * @param basePath the base path
 * @param path the path to convert
 * @return The relative path based on the base path if it is possible, orthe original path
 */
public static String getRelativedPath(String basePath,String path){
  return URIUtil.getRelativePath(new File(basePath).getParent(),new File(path).getParent()) + ""String_Node_Str"" + new File(path).getName();
}","/** 
 * Relativizes the path against this base path.
 * @param basePath the base path
 * @param path the path to convert
 * @return The relative path based on the base path if it is possible, orthe original path
 */
public static String getRelativedPath(String basePath,String path){
  return URIUtil.getRelativePath(new File(basePath).getParent(),path);
}",0.9014084507042254
78661,"/** 
 * Return the relative path for the given <code>resource</code> according to <code>base</code>. Only handle file system. Network protocols such as http, ftp, etc. are not supported. If such cases happens, <code>resource</code> is returned. <p> The <code>base</code> value should be directory ONLY and does NOT contain file name and the format can be: <ul> <li>./../hello/ <li>C:\\hello\..\ <li>/C:/../hello/ </ul> The spearator in the return path is platform-depedent.
 * @param base the base directory
 * @param resource the full path
 * @return the relative path
 */
public static String getRelativePath(String base,String resource){
  String baseDir=getLocalPath(base);
  String resourceDir=getLocalPath(resource);
  if (baseDir == null || resourceDir == null)   return resource;
  File baseFile=new File(baseDir);
  File resourceFile=new File(resourceDir);
  baseDir=baseFile.getAbsolutePath();
  resourceDir=resourceFile.getAbsolutePath();
  int matchedPos=0;
  for (matchedPos=0; matchedPos < baseDir.length() && matchedPos < resourceDir.length(); matchedPos++) {
    if (baseDir.charAt(matchedPos) != resourceDir.charAt(matchedPos))     break;
  }
  if (isLastDirectoryMatched(baseDir,resourceDir,matchedPos) || isLastDirectoryMatched(resourceDir,baseDir,matchedPos))   ;
 else   matchedPos=baseDir.lastIndexOf(File.separator,matchedPos);
  int samePrefixPos=matchedPos;
  int upDirs=0;
  while (matchedPos < baseDir.length() && matchedPos > 0) {
    matchedPos=baseDir.indexOf(File.separator,matchedPos + 1);
    upDirs++;
  }
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < upDirs; i++) {
    sb.append(""String_Node_Str"" + File.separator);
  }
  if (samePrefixPos < resourceDir.length())   sb.append(resourceDir.substring(samePrefixPos + 1));
  return sb.toString();
}","/** 
 * Return the relative path for the given <code>resource</code> according to <code>base</code>. Only handle file system. Network protocols such as http, ftp, etc. are not supported. If such cases happens, <code>resource</code> is returned. <p> The <code>base</code> value should be directory ONLY and does NOT contain file name and the format can be: <ul> <li>./../hello/ <li>C:\\hello\..\ <li>/C:/../hello/ </ul> The spearator in the return path is platform-depedent. Please note that the <code>File.separator</code> in the end of directory will be striped in the return value.
 * @param base the base directory
 * @param resource the full path
 * @return the relative path.
 */
public static String getRelativePath(String base,String resource){
  String baseDir=getLocalPath(base);
  String resourceDir=getLocalPath(resource);
  if (baseDir == null || resourceDir == null)   return resource;
  File baseFile=new File(baseDir);
  File resourceFile=new File(resourceDir);
  baseDir=baseFile.getAbsolutePath();
  resourceDir=resourceFile.getAbsolutePath();
  int matchedPos=0;
  for (matchedPos=0; matchedPos < baseDir.length() && matchedPos < resourceDir.length(); matchedPos++) {
    if (baseDir.charAt(matchedPos) != resourceDir.charAt(matchedPos))     break;
  }
  if (isLastDirectoryMatched(baseDir,resourceDir,matchedPos) || isLastDirectoryMatched(resourceDir,baseDir,matchedPos))   ;
 else   matchedPos=baseDir.lastIndexOf(File.separator,matchedPos);
  int samePrefixPos=matchedPos;
  int upDirs=0;
  while (matchedPos < baseDir.length() && matchedPos > 0) {
    matchedPos=baseDir.indexOf(File.separator,matchedPos + 1);
    upDirs++;
  }
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < upDirs; i++) {
    sb.append(""String_Node_Str"" + File.separator);
  }
  if (samePrefixPos < resourceDir.length())   sb.append(resourceDir.substring(samePrefixPos + 1));
  int len=sb.length();
  if (len > 0) {
    char lastChar=sb.charAt(len - 1);
    if (lastChar == File.separatorChar)     sb.deleteCharAt(len - 1);
  }
  return sb.toString();
}",0.931635040291136
78662,"/** 
 * Returns the library handle with the given namespace.
 * @param namespace the library namespace
 * @return the library handle with the given namespace
 */
public LibraryHandle getLibrary(String namespace){
  Module library=module.getVisibleLibraryWithNamespace(namespace);
  if (library == null)   return null;
  return (LibraryHandle)library.getHandle(library);
}","/** 
 * Returns the library handle with the given namespace.
 * @param namespace the library namespace
 * @return the library handle with the given namespace
 */
public LibraryHandle getLibrary(String namespace){
  Module library=module.getLibraryWithNamespace(namespace,IModuleNameSpace.ONE_LEVEL);
  if (library == null)   return null;
  return (LibraryHandle)library.getHandle(library);
}",0.8792650918635171
78663,"/** 
 * Returns all data source handles that this modules and the included modules contain.
 * @return all data source handles that this modules and the includedmodules contain.
 */
public List getAllDataSources(){
  IModuleNameSpace namescope=module.getModuleNameSpace(Module.DATA_SOURCE_NAME_SPACE);
  List elementList=namescope.getElements();
  return generateHandleList(elementList);
}","/** 
 * Returns all data source handles that this modules and the included modules contain.
 * @return all data source handles that this modules and the includedmodules contain.
 */
public List getAllDataSources(){
  IModuleNameSpace namescope=module.getModuleNameSpace(Module.DATA_SOURCE_NAME_SPACE);
  List elementList=namescope.getElements(IModuleNameSpace.ARBITARY_LEVEL);
  return generateHandleList(elementList);
}",0.96168108776267
78664,"/** 
 * Returns the libraries this report design includes directly. Each in the returned list is the instance of <code>LibraryHandle</code>.
 * @return the libraries this report design includes directly.
 */
public List getLibraries(){
  if (module.getLibraries() == null)   return Collections.EMPTY_LIST;
  List libraries=new ArrayList();
  Iterator iter=module.getLibraries().iterator();
  while (iter.hasNext()) {
    Library library=(Library)iter.next();
    libraries.add(library.handle());
  }
  return libraries;
}","/** 
 * Returns the libraries this report design includes directly. Each in the returned list is the instance of <code>LibraryHandle</code>.
 * @return the libraries this report design includes directly.
 */
public List getLibraries(){
  return getLibraries(IModuleNameSpace.ONE_LEVEL);
}",0.6081582200247219
78665,"/** 
 * Returns all template parameter definition handles that this modules and the included modules contain.
 * @return all template parameter definition handles that this modules andthe included modules contain.
 */
List getAllTemplateParameterDefinitions(){
  List elementList=module.getModuleNameSpace(Module.TEMPLATE_PARAMETER_NAME_SPACE).getElements();
  return generateHandleList(elementList);
}","/** 
 * Returns all template parameter definition handles that this modules and the included modules contain.
 * @return all template parameter definition handles that this modules andthe included modules contain.
 */
List getAllTemplateParameterDefinitions(){
  List elementList=module.getModuleNameSpace(Module.TEMPLATE_PARAMETER_NAME_SPACE).getElements(IModuleNameSpace.NATIVE_LEVEL);
  return generateHandleList(elementList);
}",0.965186074429772
78666,"/** 
 * Returns data set handles that are visible to this modules.
 * @return data set handles that are visible to this modules.
 */
public List getVisibleDataSets(){
  List elementList=module.getNameSpace(Module.DATA_SET_NAME_SPACE).getElements();
  return generateHandleList(elementList);
}","/** 
 * Returns data set handles that are visible to this modules.
 * @return data set handles that are visible to this modules.
 */
public List getVisibleDataSets(){
  IModuleNameSpace namescope=module.getModuleNameSpace(Module.DATA_SET_NAME_SPACE);
  List elementList=namescope.getElements(IModuleNameSpace.NATIVE_LEVEL);
  return generateHandleList(elementList);
}",0.8376327769347496
78667,"/** 
 * Returns all data set handles that this modules and the included modules contain.
 * @return all data set handles that this modules and the included modulescontain.
 */
public List getAllDataSets(){
  IModuleNameSpace namescope=module.getModuleNameSpace(Module.DATA_SET_NAME_SPACE);
  List elementList=namescope.getElements();
  return generateHandleList(elementList);
}","/** 
 * Returns all data set handles that this modules and the included modules contain.
 * @return all data set handles that this modules and the included modulescontain.
 */
public List getAllDataSets(){
  IModuleNameSpace namescope=module.getModuleNameSpace(Module.DATA_SET_NAME_SPACE);
  List elementList=namescope.getElements(IModuleNameSpace.ARBITARY_LEVEL);
  return generateHandleList(elementList);
}",0.9605095541401274
78668,"/** 
 * Returns data source handles that are visible to this modules.
 * @return data source handles that are visible to this modules.
 */
public List getVisibleDataSources(){
  List elementList=module.getNameSpace(Module.DATA_SOURCE_NAME_SPACE).getElements();
  return generateHandleList(elementList);
}","/** 
 * Returns data source handles that are visible to this modules.
 * @return data source handles that are visible to this modules.
 */
public List getVisibleDataSources(){
  IModuleNameSpace namescope=module.getModuleNameSpace(Module.DATA_SOURCE_NAME_SPACE);
  List elementList=namescope.getElements(IModuleNameSpace.NATIVE_LEVEL);
  return generateHandleList(elementList);
}",0.8433382137628112
78669,"/** 
 * Returns all style element handles that this modules and the included modules contain.
 * @return all style element handles that this modules and the includedmodules contain.
 */
public List getAllStyles(){
  List elementList=module.getModuleNameSpace(Module.STYLE_NAME_SPACE).getElements();
  return generateHandleList(elementList);
}","/** 
 * Returns all style element handles that this modules and the included modules contain.
 * @return all style element handles that this modules and the includedmodules contain.
 */
public List getAllStyles(){
  List elementList=module.getModuleNameSpace(Module.STYLE_NAME_SPACE).getElements(IModuleNameSpace.ARBITARY_LEVEL);
  return generateHandleList(elementList);
}",0.9566433566433566
78670,"/** 
 * Returns all theme element handles that this modules and the included modules contain.
 * @return all theme element handles that this modules and the includedmodules contain.
 */
public List getAllThemes(){
  List elementList=module.getModuleNameSpace(Module.THEME_NAME_SPACE).getElements();
  return generateHandleList(elementList);
}","/** 
 * Returns all theme element handles that this modules and the included modules contain.
 * @return all theme element handles that this modules and the includedmodules contain.
 */
public List getAllThemes(){
  List elementList=module.getModuleNameSpace(Module.THEME_NAME_SPACE).getElements(IModuleNameSpace.ONE_LEVEL);
  return generateHandleList(elementList);
}",0.9633802816901408
78671,"/** 
 * Returns the libraries this report design includes directly or indirectly. Each in the returned list is the instance of <code>LibraryHandle</code>.
 * @return the libraries this report design includes directly or indirectly.
 */
public List getAllLibraries(){
  if (module.getLibraries() == null)   return Collections.EMPTY_LIST;
  List libraries=new ArrayList();
  Iterator iter=module.getAllLibraries().iterator();
  while (iter.hasNext()) {
    Library library=(Library)iter.next();
    libraries.add(library.handle());
  }
  return libraries;
}","/** 
 * Returns the libraries this report design includes directly or indirectly. Each in the returned list is the instance of <code>LibraryHandle</code>.
 * @return the libraries this report design includes directly or indirectly.
 */
public List getAllLibraries(){
  return getLibraries(IModuleNameSpace.ARBITARY_LEVEL);
}",0.6393629124004551
78672,"/** 
 * Returns whether the namespace to check is duplicate in target module. This method helps to judge whether the library to check can be included in target module.
 * @param namespaceToCheck the namespace to check
 * @return true if the namespace to check is duplicate.
 */
public boolean isDuplicateNamespace(String namespaceToCheck){
  Module rootHost=this;
  while (rootHost instanceof Library && ((Library)rootHost).getHost() != null)   rootHost=((Library)rootHost).getHost();
  List libraries=rootHost.getAllLibraries();
  Iterator iter=libraries.iterator();
  while (iter.hasNext()) {
    Library library=(Library)iter.next();
    if (library.getNamespace().equals(namespaceToCheck))     return true;
  }
  return false;
}","/** 
 * Returns whether the namespace to check is duplicate in target module. This method helps to judge whether the library to check can be included in target module.
 * @param namespaceToCheck the namespace to check
 * @return true if the namespace to check is duplicate.
 */
public boolean isDuplicateNamespace(String namespaceToCheck){
  Module rootHost=this;
  while (rootHost instanceof Library && ((Library)rootHost).getHost() != null)   rootHost=((Library)rootHost).getHost();
  List libraries=rootHost.getLibraries(IModuleNameSpace.ARBITARY_LEVEL);
  Iterator iter=libraries.iterator();
  while (iter.hasNext()) {
    Library library=(Library)iter.next();
    if (library.getNamespace().equals(namespaceToCheck))     return true;
  }
  return false;
}",0.96514745308311
78673,"/** 
 * Returns the resolved theme of the report design/library.
 * @param module the module to resolve the theme
 * @return the resolved theme of the report design/library
 */
public Theme getTheme(Module module){
  if (theme == null)   return null;
  if (theme.isResolved())   return (Theme)theme.getElement();
  IModuleNameSpace resolver=module.getModuleNameSpace(Module.THEME_NAME_SPACE);
  ElementRefValue refValue=resolver.resolve(ReferenceValueUtil.needTheNamespacePrefix(theme,this));
  Theme target=null;
  if (refValue.isResolved()) {
    target=(Theme)refValue.getElement();
    theme.resolve(target);
    target.addClient(this,THEME_PROP);
  }
  return target;
}","/** 
 * Returns the resolved theme of the report design/library.
 * @param module the module to resolve the theme
 * @return the resolved theme of the report design/library
 */
public Theme getTheme(Module module){
  if (theme == null)   return null;
  if (theme.isResolved())   return (Theme)theme.getElement();
  IModuleNameSpace resolver=module.getModuleNameSpace(Module.THEME_NAME_SPACE);
  ElementRefValue refValue=resolver.resolve(ReferenceValueUtil.needTheNamespacePrefix(theme,this),null);
  Theme target=null;
  if (refValue.isResolved()) {
    target=(Theme)refValue.getElement();
    theme.resolve(target);
    target.addClient(this,THEME_PROP);
  }
  return target;
}",0.9963045084996304
78674,"/** 
 * Returns only libraries this module includes directly.
 * @return list of libraries.
 */
public List getLibraries(){
  if (libraries != null)   return new ArrayList(libraries);
  return Collections.EMPTY_LIST;
}","/** 
 * Returns only libraries this module includes directly.
 * @return list of libraries.
 */
public List getLibraries(){
  return getLibraries(IModuleNameSpace.ONE_LEVEL);
}",0.7360406091370558
78675,"/** 
 * Returns the module with the given namespace. This method checks the namespace in both directly and indirectly included libraries.
 * @param namespace the module namespace
 * @return the module with the given namespace
 */
public Library getLibraryWithNamespace(String namespace){
  if (libraries == null)   return null;
  List list=getAllLibraries();
  Iterator iter=list.iterator();
  while (iter.hasNext()) {
    Library library=(Library)iter.next();
    if (library.getNamespace().equals(namespace))     return library;
  }
  return null;
}","/** 
 * Returns the module with the given namespace. This method checks the namespace in included libraries within the given depth.
 * @param namespace the module namespace
 * @param level the depth of the library
 * @return the module with the given namespace
 * @see IModuleNameSpace
 */
public Library getLibraryWithNamespace(String namespace,int level){
  if (libraries == null)   return null;
  List list=getLibraries(level);
  Iterator iter=list.iterator();
  while (iter.hasNext()) {
    Library library=(Library)iter.next();
    if (library.getNamespace().equals(namespace))     return library;
  }
  return null;
}",0.8534923339011925
78676,"/** 
 * Finds a shared style in this module and its included modules.
 * @param name Name of the style to find.
 * @return The style, or null if the style is not found.
 */
public StyleElement findStyle(String name){
  ElementRefValue refValue=moduleNameSpaces[STYLE_NAME_SPACE].resolve(name);
  return (StyleElement)refValue.getElement();
}","/** 
 * Finds a shared style in this module and its included modules.
 * @param name Name of the style to find.
 * @return The style, or null if the style is not found.
 */
public StyleElement findStyle(String name){
  ElementRefValue refValue=moduleNameSpaces[STYLE_NAME_SPACE].resolve(name,null);
  return (StyleElement)refValue.getElement();
}",0.992721979621543
78677,"/** 
 * Finds a theme in this module and its included modules.
 * @param name Name of the style to find.
 * @return The style, or null if the style is not found.
 */
public Theme findTheme(String name){
  ElementRefValue refValue=moduleNameSpaces[THEME_NAME_SPACE].resolve(name);
  return (Theme)refValue.getElement();
}","/** 
 * Finds a theme in this module and its included modules.
 * @param name Name of the style to find.
 * @return The style, or null if the style is not found.
 */
public Theme findTheme(String name){
  ElementRefValue refValue=moduleNameSpaces[THEME_NAME_SPACE].resolve(name,null);
  return (Theme)refValue.getElement();
}",0.992248062015504
78678,"/** 
 * Returns all libaries this module contains.
 * @return list of libraries.
 */
public List getAllLibraries(){
  if (libraries == null)   return Collections.EMPTY_LIST;
  List allLibraries=new ArrayList();
  allLibraries.addAll(getLibraries());
  Iterator iter=getLibraries().iterator();
  while (iter.hasNext()) {
    Library library=(Library)iter.next();
    allLibraries.addAll(library.getAllLibraries());
  }
  return allLibraries;
}","/** 
 * Returns all libaries this module contains.
 * @return list of libraries.
 */
public List getAllLibraries(){
  return getLibraries(IModuleNameSpace.ARBITARY_LEVEL);
}",0.4617886178861788
78679,"/** 
 * Checks the Action object and then output corresponding tag and property.
 * @param action The <code>IHyperlinkAction</code> object.
 * @return A <code>boolean</code> value indicating whether the Actionobject is valid or not.
 */
protected boolean handleAction(IHyperlinkAction action){
  if (action == null) {
    return false;
  }
  Action act=new Action(action);
  if (actionHandler == null) {
    return false;
  }
  String link=actionHandler.getURL(act,renderContext);
  boolean ret=(link != null && !link.equals(""String_Node_Str""));
  if (ret) {
    if (action.getType() == IAction.ACTION_BOOKMARK) {
      link=""String_Node_Str"" + link;
    }
 else {
      if (urlEncoding != null) {
        link=URLEncoder.encode(link,urlEncoding);
      }
    }
    writer.openTag(HTMLTags.TAG_A);
    writer.attribute(HTMLTags.ATTR_HREF,link);
    writer.attribute(HTMLTags.ATTR_TARGET,action.getTargetWindow());
  }
  return ret;
}","/** 
 * Checks the Action object and then output corresponding tag and property.
 * @param action The <code>IHyperlinkAction</code> object.
 * @return A <code>boolean</code> value indicating whether the Actionobject is valid or not.
 */
protected boolean handleAction(IHyperlinkAction action){
  if (action == null) {
    return false;
  }
  Action act=new Action(action);
  if (actionHandler == null) {
    return false;
  }
  String link=actionHandler.getURL(act,renderContext);
  boolean ret=(link != null && !link.equals(""String_Node_Str""));
  if (ret) {
    writer.openTag(HTMLTags.TAG_A);
    writer.attribute(HTMLTags.ATTR_HREF,link);
    writer.attribute(HTMLTags.ATTR_TARGET,action.getTargetWindow());
  }
  return ret;
}",0.8779314491882141
78680,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL 
 */
protected String buildDrillAction(IAction action,Object context){
  String baseURL=null;
  if (context != null && context instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)context).getBaseURL();
  }
  StringBuffer link=new StringBuffer();
  String reportName=action.getReportName();
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,""String_Node_Str""));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format != null && format.length() > 0) {
      link.append(""String_Node_Str"" + format);
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          link.append(""String_Node_Str"" + URLEncoder.encode((String)entry.getKey(),""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode((String)entry.getValue(),""String_Node_Str""));
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
    }
  }
  if (action.getBookmark() != null) {
    link.append(""String_Node_Str"");
    link.append(action.getBookmark());
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,Object context){
  String baseURL=null;
  if (context != null && context instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)context).getBaseURL();
  }
  StringBuffer link=new StringBuffer();
  String reportName=action.getReportName();
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    appendReportDesignName(link,reportName);
    String format=action.getFormat();
    appendFormat(link,format);
    Map params=action.getParameterBindings();
    if (params != null) {
      Iterator paramsIte=params.entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        String key=(String)entry.getKey();
        Object valueObj=entry.getValue();
        appendParamter(link,key,valueObj);
      }
    }
  }
  String bookmark=action.getBookmark();
  appendBookmark(link,bookmark);
  return link.toString();
}",0.574635241301908
78681,"protected void handleFileImage(String imageFile,IImageContent imageContent){
  ReportDesignHandle reportDesign=context.getDesign();
  if (reportDesign != null) {
    URL url=reportDesign.findResource(imageFile,IResourceLocator.IMAGE);
    if (url != null) {
      try {
        URI uri=new URI(url.toExternalForm());
        File file=new File(uri);
        imageFile=file.getAbsolutePath();
      }
 catch (      URISyntaxException x) {
      }
    }
  }
  imageContent.setURI(imageFile);
  imageContent.setImageSource(IImageContent.IMAGE_FILE);
  imageContent.setExtension(FileUtil.getExtFromFileName(imageFile,FileUtil.SEPARATOR_PATH));
  if (imageFile == null) {
    logger.log(Level.SEVERE,""String_Node_Str"");
    context.addException(new EngineException(MessageConstants.MISSING_IMAGE_FILE_ERROR));
  }
}","protected void handleFileImage(String imageFile,IImageContent imageContent){
  ReportDesignHandle reportDesign=context.getDesign();
  if (reportDesign != null) {
    URL url=reportDesign.findResource(imageFile,IResourceLocator.IMAGE);
    if (url != null) {
      String fileName=url.getFile();
      if (fileName != null) {
        imageFile=fileName;
      }
    }
  }
  imageContent.setURI(imageFile);
  imageContent.setImageSource(IImageContent.IMAGE_FILE);
  imageContent.setExtension(FileUtil.getExtFromFileName(imageFile,FileUtil.SEPARATOR_PATH));
  if (imageFile == null) {
    logger.log(Level.SEVERE,""String_Node_Str"");
    context.addException(new EngineException(MessageConstants.MISSING_IMAGE_FILE_ERROR));
  }
}",0.8495114006514658
78682,"/** 
 * Validates selection can be dragged, cut or copied
 * @param selection selected object, support single or multiple selection
 * @return if selection can be dragged, cut or copied
 */
public static boolean handleValidateDragInOutline(Object selection){
  if (selection instanceof StructuredSelection) {
    return handleValidateDragInOutline(((StructuredSelection)selection).toArray());
  }
  if (selection instanceof Object[]) {
    Object[] array=(Object[])selection;
    if (array.length == 0) {
      return false;
    }
    if (array[0] instanceof ColumnHandle) {
      boolean bool=false;
      int columnNumber=HandleAdapterFactory.getInstance().getColumnHandleAdapter(array[0]).getColumnNumber();
      Object parent=((ColumnHandle)array[0]).getContainer();
      if (parent instanceof TableHandle) {
        bool=((TableHandle)parent).canCopyColumn(columnNumber);
      }
 else       if (parent instanceof GridHandle) {
        bool=((GridHandle)parent).canCopyColumn(columnNumber);
      }
      if (bool && array.length == 1) {
        return true;
      }
      if (bool && array[1] instanceof CellHandle) {
        return true;
      }
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (checkContainerExists(array[i],array))       continue;
      if (!handleValidateDragInOutline(array[i]))       return false;
    }
    return true;
  }
  if (selection instanceof ReportElementModel) {
    return handleValidateDragInOutline(((ReportElementModel)selection).getSlotHandle());
  }
  if (selection instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)selection;
    DesignElementHandle handle=slot.getElementHandle();
    return slot.getContents().size() > 0 && (handle instanceof ListHandle || handle instanceof ListGroupHandle);
  }
  if (selection instanceof ColumnHandle) {
    int columnNumber=HandleAdapterFactory.getInstance().getColumnHandleAdapter(selection).getColumnNumber();
    Object parent=((ColumnHandle)selection).getContainer();
    if (parent instanceof TableHandle) {
      return ((TableHandle)parent).canCopyColumn(columnNumber);
    }
 else     if (parent instanceof GridHandle) {
      return ((GridHandle)parent).canCopyColumn(columnNumber);
    }
  }
  return selection instanceof ReportItemHandle || selection instanceof DataSetHandle || selection instanceof DataSourceHandle|| selection instanceof ScalarParameterHandle|| selection instanceof ParameterGroupHandle|| selection instanceof GroupHandle|| selection instanceof StyleHandle|| selection instanceof ThemeHandle|| selection instanceof EmbeddedImageHandle|| selection instanceof TemplateElementHandle;
}","/** 
 * Validates selection can be dragged, cut or copied
 * @param selection selected object, support single or multiple selection
 * @return if selection can be dragged, cut or copied
 */
public static boolean handleValidateDragInOutline(Object selection){
  if (selection instanceof StructuredSelection) {
    return handleValidateDragInOutline(((StructuredSelection)selection).toArray());
  }
  if (selection instanceof Object[]) {
    Object[] array=(Object[])selection;
    if (array.length == 0) {
      return false;
    }
    if (array[0] instanceof ColumnHandle) {
      boolean bool=false;
      int columnNumber=HandleAdapterFactory.getInstance().getColumnHandleAdapter(array[0]).getColumnNumber();
      Object parent=((ColumnHandle)array[0]).getContainer();
      if (parent instanceof TableHandle) {
        bool=((TableHandle)parent).canCopyColumn(columnNumber);
      }
 else       if (parent instanceof GridHandle) {
        bool=((GridHandle)parent).canCopyColumn(columnNumber);
      }
      if (bool && array.length == 1) {
        return true;
      }
      if (bool && array[1] instanceof CellHandle) {
        return true;
      }
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (checkContainerExists(array[i],array))       continue;
      if (!handleValidateDragInOutline(array[i]))       return false;
    }
    return true;
  }
  if (selection instanceof ReportElementModel) {
    return handleValidateDragInOutline(((ReportElementModel)selection).getSlotHandle());
  }
  if (selection instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)selection;
    DesignElementHandle handle=slot.getElementHandle();
    return slot.getContents().size() > 0 && (handle instanceof ListHandle || handle instanceof ListGroupHandle);
  }
  if (selection instanceof ColumnHandle) {
    int columnNumber=HandleAdapterFactory.getInstance().getColumnHandleAdapter(selection).getColumnNumber();
    Object parent=((ColumnHandle)selection).getContainer();
    if (parent instanceof TableHandle) {
      return ((TableHandle)parent).canCopyColumn(columnNumber);
    }
 else     if (parent instanceof GridHandle) {
      return ((GridHandle)parent).canCopyColumn(columnNumber);
    }
  }
  return selection instanceof ReportItemHandle || selection instanceof DataSetHandle || selection instanceof DataSourceHandle|| selection instanceof ScalarParameterHandle|| selection instanceof ParameterGroupHandle|| selection instanceof GroupHandle|| selection instanceof StyleHandle|| selection instanceof ThemeHandle|| selection instanceof EmbeddedImageHandle|| selection instanceof TemplateElementHandle|| selection instanceof DataSetItemModel;
}",0.9924698795180724
78683,"private String getUniqueReportName(){
  IProject[] pjs=ResourcesPlugin.getWorkspace().getRoot().getProjects();
  resetUniqueCount();
  boolean goon=true;
  while (goon) {
    goon=false;
    for (int i=0; i < pjs.length; i++) {
      if (pjs[i].isAccessible()) {
        if (!validDuplicate(NEW_REPORT_FILE_NAME_PREFIX,NEW_REPORT_FILE_EXTENSION,UNIQUE_COUNTER,pjs[i])) {
          UNIQUE_COUNTER++;
          goon=true;
          break;
        }
      }
    }
  }
  if (UNIQUE_COUNTER == 0) {
    return NEW_REPORT_FILE_NAME;
  }
  return NEW_REPORT_FILE_NAME_PREFIX + ""String_Node_Str"" + UNIQUE_COUNTER+ NEW_REPORT_FILE_EXTENSION;
}","private String getUniqueReportName(){
  IProject[] pjs=ResourcesPlugin.getWorkspace().getRoot().getProjects();
  if (pjs.length != 0) {
    resetUniqueCount();
    boolean goon=true;
    while (goon) {
      goon=false;
      for (int i=0; i < pjs.length; i++) {
        if (pjs[i].isAccessible()) {
          if (!validDuplicate(NEW_REPORT_FILE_NAME_PREFIX,NEW_REPORT_FILE_EXTENSION,UNIQUE_COUNTER,pjs[i])) {
            UNIQUE_COUNTER++;
            goon=true;
            break;
          }
        }
      }
    }
    if (UNIQUE_COUNTER == 0) {
      return NEW_REPORT_FILE_NAME;
    }
    return NEW_REPORT_FILE_NAME_PREFIX + ""String_Node_Str"" + UNIQUE_COUNTER+ NEW_REPORT_FILE_EXTENSION;
  }
 else {
    String extension=NEW_REPORT_FILE_EXTENSION;
    String path=Platform.getLocation().toOSString();
    String name=NEW_REPORT_FILE_NAME_PREFIX + NEW_REPORT_FILE_EXTENSION;
    int count=0;
    File file;
    file=new File(path,name);
    while (file.exists()) {
      count++;
      name=NEW_REPORT_FILE_NAME_PREFIX + ""String_Node_Str"" + count+ NEW_REPORT_FILE_EXTENSION;
      file=null;
      file=new File(path,name);
    }
    file=null;
    return name;
  }
}",0.6766334440753046
78684,"public void addPages(){
  newReportFileWizardPage=new WizardNewReportCreationPage(WIZARDPAGE);
  addPage(newReportFileWizardPage);
  templateChoicePage=new WizardTemplateChoicePage(TEMPLATECHOICEPAGE);
  addPage(templateChoicePage);
  newReportFileWizardPage.setTitle(REPORT);
  newReportFileWizardPage.setDescription(CREATE_A_NEW_REPORT);
  templateChoicePage.setTitle(REPORT);
  templateChoicePage.setDescription(SELECT_A_REPORT_TEMPLATE);
  settingPage=new WizardReportSettingPage(null);
  settingPage.setTitle(Messages.getString(""String_Node_Str""));
  addPage(settingPage);
  newReportFileWizardPage.setInitialFileName(getNewFileFullName(NEW_REPORT_FILE_NAME_PREFIX));
  newReportFileWizardPage.setInitialFileLocation(getDefaultLocation());
}","public void addPages(){
  newReportFileWizardPage=new WizardNewReportCreationPage(WIZARDPAGE);
  addPage(newReportFileWizardPage);
  templateChoicePage=new WizardTemplateChoicePage(TEMPLATECHOICEPAGE);
  addPage(templateChoicePage);
  newReportFileWizardPage.setTitle(REPORT);
  newReportFileWizardPage.setDescription(CREATE_A_NEW_REPORT);
  templateChoicePage.setTitle(REPORT);
  templateChoicePage.setDescription(SELECT_A_REPORT_TEMPLATE);
  settingPage=new WizardReportSettingPage(null);
  settingPage.setTitle(Messages.getFormattedString(""String_Node_Str"",new Object[]{Messages.getString(""String_Node_Str"")}));
  addPage(settingPage);
  newReportFileWizardPage.setInitialFileName(getNewFileFullName(NEW_REPORT_FILE_NAME_PREFIX));
  newReportFileWizardPage.setInitialFileLocation(getDefaultLocation());
}",0.960721184803606
78685,"public Object[] getDataForColumns(String[] sExpressions,int iMaxRecords,boolean byRow){
  byRow=false;
  Object[] array=new Object[ROW_COUNT];
  for (int i=0; i < array.length; i++) {
    Object[] innerArray=new Object[sExpressions.length];
    for (int j=0; j < sExpressions.length; j++) {
      String str=sExpressions[j];
      int index=Integer.valueOf(str.substring(5,str.length() - 3)).intValue() - 1;
      innerArray[j]=new Integer(((String[])getPreviewData().get(i))[index]);
    }
    array[i]=innerArray;
  }
  return array;
}","public Object[] getDataForColumns(String[] sExpressions,int iMaxRecords,boolean byRow){
  byRow=false;
  Object[] array=new Object[sExpressions.length];
  for (int i=0; i < sExpressions.length; i++) {
    Object[] innerArray=new Object[ROW_COUNT];
    for (int j=0; j < ROW_COUNT; j++) {
      String str=sExpressions[i];
      int intStart=str.lastIndexOf(' ') + 1;
      int index=Integer.valueOf(str.substring(intStart,intStart + 1)).intValue() - 1;
      innerArray[j]=new Integer(((String[])getPreviewData().get(j))[index]);
    }
    array[i]=innerArray;
  }
  return array;
}",0.5951742627345844
78686,"public void dragSetData(DragSourceEvent event){
  if (TextTransfer.getInstance().isSupportedType(event.dataType)) {
    TreeItem[] selection=availableDbObjectsTree.getSelection();
    if (selection.length > 0) {
      Object obj=selection[0].getData();
      if (obj instanceof DbObject) {
        event.data=((DbObject)obj).getName();
      }
 else       if (obj instanceof Procedure) {
        event.data=((Procedure)obj).getProcedureName();
      }
 else       event.data=selection[0].getData();
    }
  }
}","public void dragSetData(DragSourceEvent event){
  if (TextTransfer.getInstance().isSupportedType(event.dataType)) {
    TreeItem[] selection=availableDbObjectsTree.getSelection();
    if (selection.length > 0) {
      Object obj=selection[0].getData();
      if (obj instanceof DbObject) {
        event.data=((DbObject)obj).getName();
      }
 else       if (obj instanceof Procedure) {
        event.data=((Procedure)obj).getProcedureNameWithSchema();
      }
 else       event.data=selection[0].getData();
    }
  }
}",0.9902912621359224
78687,"/** 
 * Adds drag support to tree..Must set tree before execution.
 */
public void addDragSupportToTree(){
  DragSource dragSource=new DragSource(availableDbObjectsTree,DND.DROP_COPY);
  dragSource.setTransfer(new Transfer[]{TextTransfer.getInstance()});
  dragSource.addDragListener(new DragSourceAdapter(){
    public void dragStart(    DragSourceEvent event){
      TreeItem[] selection=availableDbObjectsTree.getSelection();
      if (selection.length > 0) {
        if (selection[0].getData() instanceof DbObject) {
          if (((DbObject)selection[0].getData()).getType() == DbObject.PROCEDURE_TYPE) {
            event.doit=false;
            return;
          }
        }
 else         if (selection[0].getData() instanceof ProcedureParameter) {
          event.doit=false;
          return;
        }
      }
 else       if (selection.length <= 0 || selection[0].getData() == null) {
        event.doit=false;
        return;
      }
    }
    public void dragSetData(    DragSourceEvent event){
      if (TextTransfer.getInstance().isSupportedType(event.dataType)) {
        TreeItem[] selection=availableDbObjectsTree.getSelection();
        if (selection.length > 0) {
          Object obj=selection[0].getData();
          if (obj instanceof DbObject) {
            event.data=((DbObject)obj).getName();
          }
 else           if (obj instanceof Procedure) {
            event.data=((Procedure)obj).getProcedureName();
          }
 else           event.data=selection[0].getData();
        }
      }
    }
  }
);
}","/** 
 * Adds drag support to tree..Must set tree before execution.
 */
public void addDragSupportToTree(){
  DragSource dragSource=new DragSource(availableDbObjectsTree,DND.DROP_COPY);
  dragSource.setTransfer(new Transfer[]{TextTransfer.getInstance()});
  dragSource.addDragListener(new DragSourceAdapter(){
    public void dragStart(    DragSourceEvent event){
      TreeItem[] selection=availableDbObjectsTree.getSelection();
      if (selection.length > 0) {
        if (selection[0].getData() instanceof DbObject) {
          if (((DbObject)selection[0].getData()).getType() == DbObject.PROCEDURE_TYPE) {
            event.doit=false;
            return;
          }
        }
 else         if (selection[0].getData() instanceof ProcedureParameter) {
          event.doit=false;
          return;
        }
      }
 else       if (selection.length <= 0 || selection[0].getData() == null) {
        event.doit=false;
        return;
      }
    }
    public void dragSetData(    DragSourceEvent event){
      if (TextTransfer.getInstance().isSupportedType(event.dataType)) {
        TreeItem[] selection=availableDbObjectsTree.getSelection();
        if (selection.length > 0) {
          Object obj=selection[0].getData();
          if (obj instanceof DbObject) {
            event.data=((DbObject)obj).getName();
          }
 else           if (obj instanceof Procedure) {
            event.data=((Procedure)obj).getProcedureNameWithSchema();
          }
 else           event.data=selection[0].getData();
        }
      }
    }
  }
);
}",0.9967511371020142
78688,"/** 
 * get parameter metadata from database matadata
 */
private java.util.List getCallableParamMetaData(){
  java.util.List paramMetaDataList=new ArrayList();
  try {
    DatabaseMetaData metaData=conn.getMetaData();
    String cataLog=conn.getCatalog();
    ArrayList schemaList=createSchemaList(metaData.getSchemas());
    String columnNamePattern=null;
    String procedureNamePattern=procedureName;
    if (procedureName.indexOf(""String_Node_Str"") > 0) {
      cataLog=procedureName.substring(0,procedureName.indexOf(""String_Node_Str""));
      procedureNamePattern=procedureName.substring(procedureName.indexOf(""String_Node_Str"") + 1);
    }
    if (schemaList == null || schemaList.size() == 0) {
      schemaList.add(""String_Node_Str"");
      columnNamePattern=""String_Node_Str"";
    }
    for (int i=0; i < schemaList.size(); i++) {
      java.sql.ResultSet rs=metaData.getProcedureColumns(cataLog,schemaList.get(i).toString(),procedureNamePattern,columnNamePattern);
      while (rs.next()) {
        ParameterDefn p=new ParameterDefn();
        p.setParamName(rs.getString(""String_Node_Str""));
        p.setParamInOutType(rs.getInt(""String_Node_Str""));
        p.setParamType(rs.getInt(""String_Node_Str""));
        p.setParamTypeName(rs.getString(""String_Node_Str""));
        p.setPrecision(rs.getInt(""String_Node_Str""));
        p.setScale(rs.getInt(""String_Node_Str""));
        p.setIsNullable(rs.getInt(""String_Node_Str""));
        if (p.getParamInOutType() != 5)         paramMetaDataList.add(p);
      }
    }
  }
 catch (  SQLException e) {
  }
  return paramMetaDataList;
}","/** 
 * get parameter metadata from database matadata
 */
private java.util.List getCallableParamMetaData(){
  java.util.List paramMetaDataList=new ArrayList();
  try {
    DatabaseMetaData metaData=conn.getMetaData();
    String cataLog=conn.getCatalog();
    String schemaPattern=null;
    ArrayList schemaList=null;
    String columnNamePattern=null;
    String procedureNamePattern=procedureName;
    if (procedureName.indexOf(""String_Node_Str"") > 0) {
      schemaPattern=procedureName.substring(0,procedureName.indexOf(""String_Node_Str""));
      procedureNamePattern=procedureName.substring(procedureName.indexOf(""String_Node_Str"") + 1);
    }
    if (schemaPattern != null) {
      schemaList=new ArrayList();
      schemaList.add(schemaPattern);
    }
 else {
      schemaList=createSchemaList(metaData.getSchemas());
    }
    if (schemaList == null || schemaList.size() == 0) {
      if (schemaList == null)       schemaList=new ArrayList();
      schemaList.add(""String_Node_Str"");
      columnNamePattern=""String_Node_Str"";
    }
    for (int i=0; i < schemaList.size(); i++) {
      java.sql.ResultSet rs=metaData.getProcedureColumns(cataLog,schemaList.get(i).toString(),procedureNamePattern,columnNamePattern);
      while (rs.next()) {
        ParameterDefn p=new ParameterDefn();
        p.setParamName(rs.getString(""String_Node_Str""));
        p.setParamInOutType(rs.getInt(""String_Node_Str""));
        p.setParamType(rs.getInt(""String_Node_Str""));
        p.setParamTypeName(rs.getString(""String_Node_Str""));
        p.setPrecision(rs.getInt(""String_Node_Str""));
        p.setScale(rs.getInt(""String_Node_Str""));
        p.setIsNullable(rs.getInt(""String_Node_Str""));
        if (p.getParamInOutType() != 5)         paramMetaDataList.add(p);
      }
    }
  }
 catch (  SQLException e) {
  }
  return paramMetaDataList;
}",0.9008746355685132
78689,"public int compare(Object o1,Object o2){
  TableItem it1=(TableItem)o1;
  TableItem it2=(TableItem)o2;
  int result=0;
  if (asc) {
    result=it1.getText(columnIndex).compareTo(it2.getText(columnIndex));
  }
 else {
    result=it2.getText(columnIndex).compareTo(it1.getText(columnIndex));
  }
  return result;
}","public int compare(String source,String target){
  int result=0;
  if (columnIndex == 1)   result=super.compare(getFileName(source),getFileName(target));
 else   if (columnIndex == 2)   result=super.compare(getFilePath(source),getFilePath(target));
  if (!asc)   return result;
 else   return result*=-1;
}",0.0809061488673139
78690,"/** 
 * refresh jarViewer
 */
private void refreshJarViewer(){
  jarViewer.setInput(null);
  jarViewer.setInput(jarMap);
  for (int i=0; i < jarViewer.getTable().getItemCount(); i++) {
    TableItem ti=jarViewer.getTable().getItem(i);
    Object element=ti.getData();
    String c0=""String_Node_Str"", c1=""String_Node_Str"", c2=""String_Node_Str"";
    if (element instanceof Map.Entry) {
      Map.Entry entry=(Map.Entry)element;
      JarFile jarInfo=(JarFile)entry.getValue();
      c0=jarInfo.getState();
      c1=(String)entry.getKey();
      c2=jarInfo.getFilePath();
    }
    ti.setText(0,c0);
    ti.setText(1,c1);
    ti.setText(2,c2);
  }
}","/** 
 * refresh jarViewer
 */
private void refreshJarViewer(){
  jarViewer.setInput(null);
  jarViewer.setInput(jarMap);
  refreshJar();
}",0.3363057324840764
78691,"/** 
 * Carry out sort operation against certain jar column
 * @param columnIndex the column based on which the sort operation would be carried out 
 * @param asc the sort direction
 */
private void sortJar(final int columnIndex,final boolean asc){
  TableItem[] tableItems=jarViewer.getTable().getItems();
  sort(columnIndex,asc,tableItems);
  String[][] records=mapTableItemsTo2DArray(tableItems);
  jarViewer.getTable().removeAll();
  TableItem tableItem;
  for (int i=0; i < tableItems.length; i++) {
    tableItem=new TableItem(jarViewer.getTable(),SWT.NONE);
    tableItem.setText(records[i]);
  }
}","/** 
 * Carry out sort operation against certain jar column
 * @param columnIndex the column based on which the sort operation would be carried out 
 * @param asc the sort direction
 */
private void sortJar(final int columnIndex,final boolean asc){
  try {
    jarViewer.setSorter(new ViewerSorter(new RuleBasedCollator(((RuleBasedCollator)Collator.getInstance()).getRules()){
      public int compare(      String source,      String target){
        int result=0;
        if (columnIndex == 1)         result=super.compare(getFileName(source),getFileName(target));
 else         if (columnIndex == 2)         result=super.compare(getFilePath(source),getFilePath(target));
        if (!asc)         return result;
 else         return result*=-1;
      }
    }
));
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
  refreshJar();
}",0.3969676085458304
78692,"/** 
 * actions after add button is click in jarPage
 */
private void addJar(){
  jarChanged=true;
  FileDialog dlg=new FileDialog(getShell());
  dlg.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  if (dlg.open() != null) {
    String fn=dlg.getFilterPath() + File.separator + dlg.getFileName();
    if (jarMap.containsKey(dlg.getFileName()) && !((JarFile)jarMap.get(dlg.getFileName())).getState().equals(JarFile.ODA_FILE_NOT_EXIST_TOKEN)) {
      ExceptionHandler.openErrorMessageBox(JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
      return;
    }
    JarFile jarInfo=new JarFile(dlg.getFileName(),fn,""String_Node_Str"",false);
    if (jarsToBeDeleted.containsKey(dlg.getFileName())) {
      jarsToBeDeleted.remove(dlg.getFileName());
    }
 else {
      jarsToBeCopied.put(dlg.getFileName(),jarInfo);
    }
    jarsToBeCopiedRuntime.put(dlg.getFileName(),jarInfo);
    jarMap.put(dlg.getFileName(),jarInfo);
    refreshJarViewer();
    updateJarButtons();
  }
}","/** 
 * actions after add button is click in jarPage
 */
private void addJar(){
  jarChanged=true;
  FileDialog dlg=new FileDialog(getShell());
  dlg.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  if (dlg.open() != null) {
    String fn=dlg.getFilterPath() + File.separator + dlg.getFileName();
    if (jarMap.containsKey(dlg.getFileName()) && !((JarFile)jarMap.get(dlg.getFileName())).getState().equals(JarFile.ODA_FILE_NOT_EXIST_TOKEN)) {
      ExceptionHandler.openErrorMessageBox(JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
      return;
    }
    JarFile jarInfo=new JarFile(dlg.getFileName(),fn,""String_Node_Str"",false);
    if (jarsToBeDeleted.containsKey(dlg.getFileName())) {
      jarsToBeDeleted.remove(dlg.getFileName());
    }
 else {
      jarsToBeCopied.put(dlg.getFileName(),jarInfo);
    }
    if (jarsToBeDeletedRuntime.containsKey(dlg.getFileName()))     jarsToBeDeletedRuntime.remove(dlg.getFileName());
 else     jarsToBeCopiedRuntime.put(dlg.getFileName(),jarInfo);
    jarMap.put(dlg.getFileName(),jarInfo);
    refreshJarViewer();
    updateJarButtons();
  }
}",0.9442682374263708
78693,"/** 
 * refresh driverViewer
 */
private void refreshDriverViewer(){
  driverViewer.setInput(null);
  driverViewer.setInput(driverMap);
  for (int i=0; i < driverViewer.getTable().getItemCount(); i++) {
    TableItem ti=driverViewer.getTable().getItem(i);
    Object element=ti.getData();
    String c1=""String_Node_Str"", c2=""String_Node_Str"", c3=""String_Node_Str"";
    if (element instanceof Map.Entry) {
      Map.Entry entry=(Map.Entry)element;
      DriverInfo driverInfo=(DriverInfo)entry.getValue();
      c1=entry.getKey().toString();
      c2=driverInfo.getDisplayName();
      c3=driverInfo.getUrlTemplate();
    }
    ti.setText(0,""String_Node_Str"");
    ti.setText(1,c1);
    ti.setText(2,c2);
    ti.setText(3,c3);
  }
}","/** 
 * refresh driverViewer
 */
private void refreshDriverViewer(){
  driverViewer.setInput(null);
  driverViewer.setInput(driverMap);
  refreshDriver();
}",0.3445945945945945
78694,"/** 
 * actions after restore button is click in jarPage
 */
private void restoreJar(){
  jarChanged=true;
  if (jarViewer.getTable().getSelectionIndex() >= 0 && jarViewer.getTable().getSelectionIndex() < jarViewer.getTable().getItemCount()) {
    Map.Entry fn=(Map.Entry)jarViewer.getTable().getSelection()[0].getData();
    ((JarFile)fn.getValue()).setRestored();
    jarsToBeCopied.put(((JarFile)fn.getValue()).getFileName(),(JarFile)fn.getValue());
    checkJarState();
    refreshJarViewer();
    updateJarButtons();
  }
}","/** 
 * actions after restore button is click in jarPage
 */
private void restoreJar(){
  jarChanged=true;
  if (jarViewer.getTable().getSelectionIndex() >= 0 && jarViewer.getTable().getSelectionIndex() < jarViewer.getTable().getItemCount()) {
    Map.Entry fn=(Map.Entry)jarViewer.getTable().getSelection()[0].getData();
    ((JarFile)fn.getValue()).setRestored();
    jarsToBeCopied.put(((JarFile)fn.getValue()).getFileName(),(JarFile)fn.getValue());
    ((JarFile)fn.getValue()).checkJarState();
    refreshJarViewer();
    updateJarButtons();
  }
}",0.9768303985171456
78695,"/** 
 * Carry out sort operation against certain driver column
 * @param columnIndex the column based on which the sort operation would be carried out 
 * @param asc the sort direction
 */
private void sortDriver(final int columnIndex,final boolean asc){
  TableItem[] tableItems=driverViewer.getTable().getItems();
  sort(columnIndex,asc,tableItems);
  String[][] records=mapTableItemsTo2DArray(tableItems);
  driverViewer.getTable().removeAll();
  TableItem tableItem;
  for (int i=0; i < tableItems.length; i++) {
    tableItem=new TableItem(driverViewer.getTable(),SWT.NONE);
    tableItem.setText(records[i]);
  }
}","/** 
 * Carry out sort operation against certain driver column
 * @param columnIndex the column based on which the sort operation would be carried out 
 * @param asc the sort direction
 */
private void sortDriver(final int columnIndex,final boolean asc){
  try {
    driverViewer.setSorter(new ViewerSorter(new RuleBasedCollator(((RuleBasedCollator)Collator.getInstance()).getRules()){
      public int compare(      String source,      String target){
        int result=0;
        if (columnIndex == 1)         result=super.compare(getDriverClassName(source),getDriverClassName(target));
 else         if (columnIndex == 2)         result=super.compare(getDisplayName(source),getDisplayName(target));
 else         if (columnIndex == 3)         result=super.compare(getUrlTemplate(source),getUrlTemplate(target));
        if (!asc)         return result;
 else         return result*=-1;
      }
    }
));
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
  refreshDriver();
}",0.3525760397268777
78696,"/** 
 * actions after delete button is click in jarPage
 */
private void deleteJar(){
  jarChanged=true;
  if (jarViewer.getTable().getSelectionIndex() >= 0 && jarViewer.getTable().getSelectionIndex() < jarViewer.getTable().getItemCount()) {
    int idx=jarViewer.getTable().getSelectionIndex();
    Map.Entry fn=(Map.Entry)jarViewer.getTable().getSelection()[0].getData();
    JarFile jarFile=(JarFile)fn.getValue();
    jarFile.setToBeDeleted(true);
    if (jarsToBeCopied.containsKey(jarFile.getFileName())) {
      jarsToBeCopied.remove(jarFile.getFileName());
    }
 else {
      jarsToBeDeleted.put(jarFile.getFileName(),jarFile);
    }
    jarsToBeDeletedRuntime.put(jarFile.getFileName(),jarFile);
    jarMap.remove(fn.getKey());
    jarViewer.getTable().remove(idx);
    jarViewer.refresh();
    if (idx >= jarViewer.getTable().getItemCount()) {
      idx--;
    }
    jarViewer.getTable().select(idx);
    refreshJarViewer();
    updateJarButtons();
  }
}","/** 
 * actions after delete button is click in jarPage
 */
private void deleteJar(){
  jarChanged=true;
  if (jarViewer.getTable().getSelectionIndex() >= 0 && jarViewer.getTable().getSelectionIndex() < jarViewer.getTable().getItemCount()) {
    int idx=jarViewer.getTable().getSelectionIndex();
    Map.Entry fn=(Map.Entry)jarViewer.getTable().getSelection()[0].getData();
    JarFile jarFile=(JarFile)fn.getValue();
    jarFile.setToBeDeleted(true);
    if (jarsToBeCopied.containsKey(jarFile.getFileName())) {
      jarsToBeCopied.remove(jarFile.getFileName());
    }
 else {
      if (jarFile.getState() != JarFile.ODA_FILE_NOT_EXIST_TOKEN)       jarsToBeDeleted.put(jarFile.getFileName(),jarFile);
    }
    if (jarsToBeCopiedRuntime.containsKey(jarFile.getFileName()))     jarsToBeCopiedRuntime.remove(jarFile.getFileName());
 else {
      if (jarFile.getState() != JarFile.ODA_FILE_NOT_EXIST_TOKEN)       jarsToBeDeletedRuntime.put(jarFile.getFileName(),jarFile);
    }
    jarMap.remove(fn.getKey());
    jarViewer.getTable().remove(idx);
    jarViewer.refresh();
    if (idx >= jarViewer.getTable().getItemCount()) {
      idx--;
    }
    jarViewer.getTable().select(idx);
    refreshJarViewer();
    updateJarButtons();
  }
}",0.8723307587460245
78697,"/** 
 * The method which extracts column name from group definition.
 * @param group
 * @return
 */
private String getGroupKeyColumnName(GroupDefinition group){
  String columnName;
  if (group.getKeyColumn() != null) {
    columnName=group.getKeyColumn();
  }
 else {
    columnName=group.getKeyExpression();
    if (columnName.toUpperCase().startsWith(""String_Node_Str""))     columnName=columnName.toUpperCase().replaceFirst(""String_Node_Str"",""String_Node_Str"");
 else     if (columnName.toUpperCase().startsWith(""String_Node_Str"")) {
      columnName=columnName.toUpperCase().replaceFirst(""String_Node_Str"",""String_Node_Str"");
      columnName=columnName.trim().substring(0,columnName.length() - 1).trim();
    }
    if (columnName != null && columnName.matches(""String_Node_Str""))     columnName=columnName.substring(1,columnName.length() - 1);
  }
  return columnName;
}","/** 
 * The method which extracts column name from group definition.
 * @param group
 * @return
 */
private String getGroupKeyColumnName(GroupDefinition group){
  String columnName;
  if (group.getKeyColumn() != null) {
    columnName=group.getKeyColumn();
  }
 else {
    columnName=group.getKeyExpression();
    if (columnName.toUpperCase().startsWith(""String_Node_Str""))     columnName=columnName.toUpperCase().replaceFirst(""String_Node_Str"",""String_Node_Str"");
 else     if (columnName.toUpperCase().startsWith(""String_Node_Str"")) {
      columnName=columnName.toUpperCase().replaceFirst(""String_Node_Str"",""String_Node_Str"");
      columnName=columnName.trim().substring(0,columnName.length() - 1).trim();
    }
    if (columnName != null && columnName.matches(""String_Node_Str""))     columnName=columnName.substring(1,columnName.length() - 1);
  }
  if (columnName.startsWith(""String_Node_Str"") && columnName.endsWith(""String_Node_Str"")) {
    columnName=""String_Node_Str"" + columnName.substring(2,columnName.length() - 2) + ""String_Node_Str"";
  }
  return columnName;
}",0.88
78698,"/** 
 * Constructs an instance with the given report context and scope
 * @param reportContext Context for event handlers. May be null
 * @param jsScope Scope for evaluting property binding expressions. If null, property bindings have no effect
 */
public ModelDteApiAdapter(IReportContext reportContext,Scriptable jsScope){
  this.reportContext=reportContext;
  this.jsScope=jsScope;
}","/** 
 * Constructs an instance with the given report context and scope
 * @param context Context for event handlers. May be null
 * @param jsScope Scope for evaluting property binding expressions. If null, property bindings have no effect
 */
public ModelDteApiAdapter(ExecutionContext context,Scriptable jsScope){
  this.context=context;
  this.jsScope=jsScope;
}",0.4586666666666666
78699,"IOdaDataSetDesign newExtendedDataSet(OdaDataSetHandle modelDataSet,IReportContext reportContext) throws BirtException {
  OdaDataSetDesign dteDataSet=new OdaDataSetDesign(modelDataSet.getQualifiedName());
  IBaseDataSetEventHandler eventHandler=new DataSetScriptExecutor(modelDataSet,reportContext);
  dteDataSet.setEventHandler(eventHandler);
  adaptBaseDataSet(modelDataSet,dteDataSet);
  String queryTextBinding=modelDataSet.getPropertyBinding(OdaDataSet.QUERY_TEXT_PROP);
  if (needPropertyBinding() && queryTextBinding != null && queryTextBinding.length() > 0) {
    dteDataSet.setQueryText(evaluatePropertyBindingExpr(queryTextBinding));
  }
 else {
    dteDataSet.setQueryText(modelDataSet.getQueryText());
  }
  dteDataSet.setExtensionID(modelDataSet.getExtensionID());
  dteDataSet.setPrimaryResultSetName(modelDataSet.getResultSetName());
  Map staticProps=getExtensionProperties(modelDataSet,modelDataSet.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=modelDataSet.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=this.evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteDataSet.addPublicProperty((String)propName,propValue);
    }
  }
  Iterator elmtIter=modelDataSet.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteDataSet.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  return dteDataSet;
}","IOdaDataSetDesign newExtendedDataSet(OdaDataSetHandle modelDataSet,ExecutionContext context) throws BirtException {
  OdaDataSetDesign dteDataSet=new OdaDataSetDesign(modelDataSet.getQualifiedName());
  IBaseDataSetEventHandler eventHandler=new DataSetScriptExecutor(modelDataSet,context);
  dteDataSet.setEventHandler(eventHandler);
  adaptBaseDataSet(modelDataSet,dteDataSet);
  String queryTextBinding=modelDataSet.getPropertyBinding(OdaDataSet.QUERY_TEXT_PROP);
  if (needPropertyBinding() && queryTextBinding != null && queryTextBinding.length() > 0) {
    dteDataSet.setQueryText(evaluatePropertyBindingExpr(queryTextBinding));
  }
 else {
    dteDataSet.setQueryText(modelDataSet.getQueryText());
  }
  dteDataSet.setExtensionID(modelDataSet.getExtensionID());
  dteDataSet.setPrimaryResultSetName(modelDataSet.getResultSetName());
  Map staticProps=getExtensionProperties(modelDataSet,modelDataSet.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=modelDataSet.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=this.evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteDataSet.addPublicProperty((String)propName,propValue);
    }
  }
  Iterator elmtIter=modelDataSet.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteDataSet.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  return dteDataSet;
}",0.9915611814345991
78700,"IOdaDataSourceDesign newExtendedDataSource(OdaDataSourceHandle source) throws BirtException {
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,reportContext);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(""String_Node_Str"" + source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteSource.addPublicProperty((String)propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  return dteSource;
}","IOdaDataSourceDesign newExtendedDataSource(OdaDataSourceHandle source) throws BirtException {
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(""String_Node_Str"" + source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteSource.addPublicProperty((String)propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  return dteSource;
}",0.9974811083123426
78701,"IScriptDataSourceDesign newScriptDataSource(ScriptDataSourceHandle source){
  ScriptDataSourceDesign dteSource=new ScriptDataSourceDesign(source.getQualifiedName());
  IScriptDataSourceEventHandler eventHandler=new ScriptDataSourceScriptExecutor(source,reportContext);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  dteSource.setOpenScript(source.getOpen());
  dteSource.setCloseScript(source.getClose());
  return dteSource;
}","IScriptDataSourceDesign newScriptDataSource(ScriptDataSourceHandle source){
  ScriptDataSourceDesign dteSource=new ScriptDataSourceDesign(source.getQualifiedName());
  IScriptDataSourceEventHandler eventHandler=new ScriptDataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  dteSource.setOpenScript(source.getOpen());
  dteSource.setCloseScript(source.getClose());
  return dteSource;
}",0.9913606911447084
78702,"IScriptDataSetDesign newScriptDataSet(ScriptDataSetHandle modelDataSet,IReportContext reportContext) throws BirtException {
  ScriptDataSetDesign dteDataSet=new ScriptDataSetDesign(modelDataSet.getQualifiedName());
  IScriptDataSetEventHandler eventHandler=new ScriptDataSetScriptExecutor(modelDataSet,reportContext);
  dteDataSet.setEventHandler(eventHandler);
  adaptBaseDataSet(modelDataSet,dteDataSet);
  dteDataSet.setOpenScript(modelDataSet.getOpen());
  dteDataSet.setFetchScript(modelDataSet.getFetch());
  dteDataSet.setCloseScript(modelDataSet.getClose());
  dteDataSet.setDescribeScript(modelDataSet.getDescribe());
  return dteDataSet;
}","IScriptDataSetDesign newScriptDataSet(ScriptDataSetHandle modelDataSet,ExecutionContext context) throws BirtException {
  ScriptDataSetDesign dteDataSet=new ScriptDataSetDesign(modelDataSet.getQualifiedName());
  IScriptDataSetEventHandler eventHandler=new ScriptDataSetScriptExecutor(modelDataSet,context);
  dteDataSet.setEventHandler(eventHandler);
  adaptBaseDataSet(modelDataSet,dteDataSet);
  dteDataSet.setOpenScript(modelDataSet.getOpen());
  dteDataSet.setFetchScript(modelDataSet.getFetch());
  dteDataSet.setCloseScript(modelDataSet.getClose());
  dteDataSet.setDescribeScript(modelDataSet.getDescribe());
  return dteDataSet;
}",0.9332298136645962
78703,"/** 
 * temp method to decide whether need property binding
 * @return
 */
private boolean needPropertyBinding(){
  if (this.reportContext == null || this.jsScope == null)   return false;
 else   return true;
}","/** 
 * temp method to decide whether need property binding
 * @return
 */
private boolean needPropertyBinding(){
  if (this.context == null || this.jsScope == null)   return false;
 else   return true;
}",0.9806763285024156
78704,"/** 
 * The first step to work with the cascading parameters. Create the query definition, prepare and execute the query. Cache the iterator of the result set and also cache the IBaseExpression used in the prepare.
 * @param parameterGroupName -the cascading parameter group name
 */
public void evaluateQuery(String parameterGroupName){
  CascadingParameterGroupHandle parameterGroup=getCascadingParameterGroup(parameterGroupName);
  if (dataCache == null)   dataCache=new HashMap();
  if (parameterGroup == null)   return;
  DataSetHandle dataSet=parameterGroup.getDataSet();
  if (dataSet != null) {
    try {
      DataEngine dataEngine=getDataEngine();
      DataSourceHandle dataSource=dataSet.getDataSource();
      ModelDteApiAdapter adaptor=new ModelDteApiAdapter(executionContext.getReportContext(),executionContext.getSharedScope());
      try {
        dataEngine.defineDataSource(adaptor.createDataSourceDesign(dataSource));
        dataEngine.defineDataSet(adaptor.createDataSetDesign(dataSet));
      }
 catch (      BirtException e) {
        log.log(Level.SEVERE,e.getMessage());
      }
      QueryDefinition queryDefn=new QueryDefinition();
      queryDefn.setDataSetName(dataSet.getQualifiedName());
      SlotHandle parameters=parameterGroup.getParameters();
      Iterator iter=parameters.iterator();
      if (labelMap == null)       labelMap=new HashMap();
      if (valueMap == null)       valueMap=new HashMap();
      while (iter.hasNext()) {
        Object param=iter.next();
        if (param instanceof ScalarParameterHandle) {
          String valueExpString=((ScalarParameterHandle)param).getValueExpr();
          Object valueExpObject=new ScriptExpression(valueExpString);
          valueMap.put(parameterGroup.getName() + ""String_Node_Str"" + ((ScalarParameterHandle)param).getName(),valueExpObject);
          queryDefn.getRowExpressions().add(valueExpObject);
          String labelExpString=((ScalarParameterHandle)param).getLabelExpr();
          if (labelExpString != null && labelExpString.length() > 0) {
            Object labelExpObject=new ScriptExpression(labelExpString);
            labelMap.put(parameterGroup.getName() + ""String_Node_Str"" + ((ScalarParameterHandle)param).getName(),labelExpObject);
            queryDefn.getRowExpressions().add(labelExpObject);
          }
          GroupDefinition groupDef=new GroupDefinition();
          groupDef.setKeyExpression(valueExpString);
          queryDefn.addGroup(groupDef);
        }
      }
      IPreparedQuery query=dataEngine.prepare(queryDefn);
      IQueryResults result=query.execute(executionContext.getSharedScope());
      IResultIterator resultIter=result.getResultIterator();
      dataCache.put(parameterGroup.getName(),resultIter);
      return;
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  dataCache.put(parameterGroup.getName(),null);
}","/** 
 * The first step to work with the cascading parameters. Create the query definition, prepare and execute the query. Cache the iterator of the result set and also cache the IBaseExpression used in the prepare.
 * @param parameterGroupName -the cascading parameter group name
 */
public void evaluateQuery(String parameterGroupName){
  CascadingParameterGroupHandle parameterGroup=getCascadingParameterGroup(parameterGroupName);
  if (dataCache == null)   dataCache=new HashMap();
  if (parameterGroup == null)   return;
  DataSetHandle dataSet=parameterGroup.getDataSet();
  if (dataSet != null) {
    try {
      DataEngine dataEngine=getDataEngine();
      DataSourceHandle dataSource=dataSet.getDataSource();
      ModelDteApiAdapter adaptor=new ModelDteApiAdapter(executionContext,executionContext.getSharedScope());
      try {
        dataEngine.defineDataSource(adaptor.createDataSourceDesign(dataSource));
        dataEngine.defineDataSet(adaptor.createDataSetDesign(dataSet));
      }
 catch (      BirtException e) {
        log.log(Level.SEVERE,e.getMessage());
      }
      QueryDefinition queryDefn=new QueryDefinition();
      queryDefn.setDataSetName(dataSet.getQualifiedName());
      SlotHandle parameters=parameterGroup.getParameters();
      Iterator iter=parameters.iterator();
      if (labelMap == null)       labelMap=new HashMap();
      if (valueMap == null)       valueMap=new HashMap();
      while (iter.hasNext()) {
        Object param=iter.next();
        if (param instanceof ScalarParameterHandle) {
          String valueExpString=((ScalarParameterHandle)param).getValueExpr();
          Object valueExpObject=new ScriptExpression(valueExpString);
          valueMap.put(parameterGroup.getName() + ""String_Node_Str"" + ((ScalarParameterHandle)param).getName(),valueExpObject);
          queryDefn.getRowExpressions().add(valueExpObject);
          String labelExpString=((ScalarParameterHandle)param).getLabelExpr();
          if (labelExpString != null && labelExpString.length() > 0) {
            Object labelExpObject=new ScriptExpression(labelExpString);
            labelMap.put(parameterGroup.getName() + ""String_Node_Str"" + ((ScalarParameterHandle)param).getName(),labelExpObject);
            queryDefn.getRowExpressions().add(labelExpObject);
          }
          GroupDefinition groupDef=new GroupDefinition();
          groupDef.setKeyExpression(valueExpString);
          queryDefn.addGroup(groupDef);
        }
      }
      IPreparedQuery query=dataEngine.prepare(queryDefn);
      IQueryResults result=query.execute(executionContext.getSharedScope());
      IResultIterator resultIter=result.getResultIterator();
      dataCache.put(parameterGroup.getName(),resultIter);
      return;
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  dataCache.put(parameterGroup.getName(),null);
}",0.9966962267431752
78705,"/** 
 * get selection choices from the data set.
 * @param dataSetName data set name
 * @param labelStmt label statement
 * @param valueStmt value statement
 * @param dataType value type
 * @return
 */
private Collection createDynamicSelectionChoices(String dataSetName,String labelStmt,String valueStmt,String dataType,int limit,boolean fixedOrder){
  ArrayList choices=new ArrayList();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  DataSetHandle dataSet=report.findDataSet(dataSetName);
  if (dataSet != null) {
    try {
      DataEngine dataEngine=getDataEngine();
      DataSourceHandle dataSource=dataSet.getDataSource();
      ModelDteApiAdapter adaptor=new ModelDteApiAdapter(executionContext.getReportContext(),executionContext.getSharedScope());
      try {
        dataEngine.defineDataSource(adaptor.createDataSourceDesign(dataSource));
        dataEngine.defineDataSet(adaptor.createDataSetDesign(dataSet));
      }
 catch (      BirtException e) {
        log.log(Level.SEVERE,e.getMessage());
      }
      ScriptExpression labelExpr=null;
      if (labelStmt != null && labelStmt.length() > 0) {
        labelExpr=new ScriptExpression(labelStmt);
      }
      ScriptExpression valueExpr=new ScriptExpression(valueStmt);
      QueryDefinition queryDefn=new QueryDefinition();
      queryDefn.setDataSetName(dataSetName);
      Iterator paramIter=dataSet.paramBindingsIterator();
      while (paramIter.hasNext()) {
        ParamBindingHandle binding=(ParamBindingHandle)paramIter.next();
        String paramName=binding.getParamName();
        String paramExpr=binding.getExpression();
        queryDefn.getInputParamBindings().add(new InputParameterBinding(paramName,new ScriptExpression(paramExpr)));
      }
      if (labelExpr != null) {
        queryDefn.getRowExpressions().add(labelExpr);
      }
      queryDefn.getRowExpressions().add(valueExpr);
      GroupDefinition groupDef=new GroupDefinition();
      groupDef.setKeyExpression(valueStmt);
      queryDefn.addGroup(groupDef);
      IPreparedQuery query=dataEngine.prepare(queryDefn);
      IQueryResults result=query.execute(executionContext.getSharedScope());
      IResultIterator iter=result.getResultIterator();
      int count=0;
      while (iter.next()) {
        String label=null;
        if (labelExpr != null) {
          label=iter.getString(labelExpr);
        }
        Object value=iter.getValue(valueExpr);
        choices.add(new SelectionChoice(label,convertToType(value,dataType)));
        count++;
        if ((limit != 0) && (count >= limit)) {
          break;
        }
        iter.skipToEnd(1);
      }
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  if (!fixedOrder)   Collections.sort(choices,new SelectionChoiceComparator(true));
  return choices;
}","/** 
 * get selection choices from the data set.
 * @param dataSetName data set name
 * @param labelStmt label statement
 * @param valueStmt value statement
 * @param dataType value type
 * @return
 */
private Collection createDynamicSelectionChoices(String dataSetName,String labelStmt,String valueStmt,String dataType,int limit,boolean fixedOrder){
  ArrayList choices=new ArrayList();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  DataSetHandle dataSet=report.findDataSet(dataSetName);
  if (dataSet != null) {
    try {
      DataEngine dataEngine=getDataEngine();
      DataSourceHandle dataSource=dataSet.getDataSource();
      ModelDteApiAdapter adaptor=new ModelDteApiAdapter(executionContext,executionContext.getSharedScope());
      try {
        dataEngine.defineDataSource(adaptor.createDataSourceDesign(dataSource));
        dataEngine.defineDataSet(adaptor.createDataSetDesign(dataSet));
      }
 catch (      BirtException e) {
        log.log(Level.SEVERE,e.getMessage());
      }
      ScriptExpression labelExpr=null;
      if (labelStmt != null && labelStmt.length() > 0) {
        labelExpr=new ScriptExpression(labelStmt);
      }
      ScriptExpression valueExpr=new ScriptExpression(valueStmt);
      QueryDefinition queryDefn=new QueryDefinition();
      queryDefn.setDataSetName(dataSetName);
      Iterator paramIter=dataSet.paramBindingsIterator();
      while (paramIter.hasNext()) {
        ParamBindingHandle binding=(ParamBindingHandle)paramIter.next();
        String paramName=binding.getParamName();
        String paramExpr=binding.getExpression();
        queryDefn.getInputParamBindings().add(new InputParameterBinding(paramName,new ScriptExpression(paramExpr)));
      }
      if (labelExpr != null) {
        queryDefn.getRowExpressions().add(labelExpr);
      }
      queryDefn.getRowExpressions().add(valueExpr);
      GroupDefinition groupDef=new GroupDefinition();
      groupDef.setKeyExpression(valueStmt);
      queryDefn.addGroup(groupDef);
      IPreparedQuery query=dataEngine.prepare(queryDefn);
      IQueryResults result=query.execute(executionContext.getSharedScope());
      IResultIterator iter=result.getResultIterator();
      int count=0;
      while (iter.next()) {
        String label=null;
        if (labelExpr != null) {
          label=iter.getString(labelExpr);
        }
        Object value=iter.getValue(valueExpr);
        choices.add(new SelectionChoice(label,convertToType(value,dataType)));
        count++;
        if ((limit != 0) && (count >= limit)) {
          break;
        }
        iter.skipToEnd(1);
      }
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  if (!fixedOrder)   Collections.sort(choices,new SelectionChoiceComparator(true));
  return choices;
}",0.9966270193502574
78706,"/** 
 * Gets the column data by column name.
 * @param name of column
 */
Object getColumnValue(String name);","/** 
 * Gets the column data by column name.
 * @param name of column
 * @throws ScriptException 
 */
Object getColumnValue(String name) throws ScriptException ;",0.8074074074074075
78707,"/** 
 * Sets the column data by column name.
 * @param name of column
 */
void setColumnValue(String name,Object value);","/** 
 * Sets the column data by column name.
 * @param name of column
 * @throws ScriptException 
 */
void setColumnValue(String name,Object value) throws ScriptException ;",0.821917808219178
78708,"/** 
 * @return Returns the height.
 */
DimensionType getHeight();","/** 
 * @return Returns the height.
 */
String getHeight();",0.88
78709,"/** 
 * Returns a List jdbc Drivers. The Drivers are searched from predefined directories in the DTE plug-in. Currently it is expected that the jdbc drivers are in the ""drivers"" directory of the DTE oda.jdbc plug-in.
 * @param driverName
 * @return
 */
public static List getJdbcDriversFromODADir(String driverName){
  if (jdbcDriverInfos != null)   return jdbcDriverInfos;
  jdbcDriverInfos=new ArrayList();
  driverNameMap=new HashMap();
  file2Drivers=new Hashtable();
  addDriversFromFiles();
  final String ODBCJDBCDriverName=""String_Node_Str"";
  JDBCDriverInformation ODBCJDBCInfo=null;
  JDBCDriverInformation driverInfos[]=JDBCDriverInfoManager.getDrivers();
  for (int i=0; i < driverInfos.length; i++) {
    JDBCDriverInformation newInfo=driverInfos[i];
    JDBCDriverInformation existing=(JDBCDriverInformation)driverNameMap.get(newInfo.getDriverClassName());
    if (existing == null) {
      if (newInfo.getDriverClassName().equalsIgnoreCase(ODBCJDBCDriverName)) {
        ODBCJDBCInfo=newInfo;
        continue;
      }
      jdbcDriverInfos.add(newInfo);
      driverNameMap.put(newInfo.getDriverClassName(),newInfo);
    }
 else {
      existing.setDisplayName(newInfo.getDisplayName());
      existing.setUrlFormat(newInfo.getUrlFormat());
    }
  }
  if (ODBCJDBCInfo != null) {
    jdbcDriverInfos.add(ODBCJDBCInfo);
    driverNameMap.put(ODBCJDBCInfo.getDriverClassName(),ODBCJDBCInfo);
  }
  Map preferenceMap=Utility.getPreferenceStoredMap(JdbcPlugin.DRIVER_MAP_PREFERENCE_KEY);
  for (Iterator itr=jdbcDriverInfos.iterator(); itr.hasNext(); ) {
    JDBCDriverInformation info=(JDBCDriverInformation)itr.next();
    Object ob=preferenceMap.get(info.toString());
    if (ob != null) {
      DriverInfo driverInfo=(DriverInfo)ob;
      if (driverInfo.getDisplayName() != null && driverInfo.getDisplayName().length() > 0) {
        info.setDisplayName(driverInfo.getDisplayName());
      }
      if (driverInfo.getUrlTemplate() != null && driverInfo.getUrlTemplate().length() > 0) {
        info.setUrlFormat(driverInfo.getUrlTemplate());
      }
    }
  }
  return jdbcDriverInfos;
}","/** 
 * Returns a List jdbc Drivers. The Drivers are searched from predefined directories in the DTE plug-in. Currently it is expected that the jdbc drivers are in the ""drivers"" directory of the DTE oda.jdbc plug-in.
 * @param driverName
 * @return
 */
public static List getJdbcDriversFromODADir(String driverName){
  if (jdbcDriverInfos != null) {
    if (!driverNameMap.containsValue(jdbcDriverInfos.get(0)))     jdbcDriverInfos.remove(0);
    return jdbcDriverInfos;
  }
  jdbcDriverInfos=new ArrayList();
  driverNameMap=new HashMap();
  file2Drivers=new Hashtable();
  addDriversFromFiles();
  final String ODBCJDBCDriverName=""String_Node_Str"";
  JDBCDriverInformation ODBCJDBCInfo=null;
  JDBCDriverInformation driverInfos[]=JDBCDriverInfoManager.getDrivers();
  for (int i=0; i < driverInfos.length; i++) {
    JDBCDriverInformation newInfo=driverInfos[i];
    JDBCDriverInformation existing=(JDBCDriverInformation)driverNameMap.get(newInfo.getDriverClassName());
    if (existing == null) {
      if (newInfo.getDriverClassName().equalsIgnoreCase(ODBCJDBCDriverName)) {
        ODBCJDBCInfo=newInfo;
        continue;
      }
      jdbcDriverInfos.add(newInfo);
      driverNameMap.put(newInfo.getDriverClassName(),newInfo);
    }
 else {
      existing.setDisplayName(newInfo.getDisplayName());
      existing.setUrlFormat(newInfo.getUrlFormat());
    }
  }
  if (ODBCJDBCInfo != null) {
    jdbcDriverInfos.add(ODBCJDBCInfo);
    driverNameMap.put(ODBCJDBCInfo.getDriverClassName(),ODBCJDBCInfo);
  }
  Map preferenceMap=Utility.getPreferenceStoredMap(JdbcPlugin.DRIVER_MAP_PREFERENCE_KEY);
  for (Iterator itr=jdbcDriverInfos.iterator(); itr.hasNext(); ) {
    JDBCDriverInformation info=(JDBCDriverInformation)itr.next();
    Object ob=preferenceMap.get(info.toString());
    if (ob != null) {
      DriverInfo driverInfo=(DriverInfo)ob;
      if (driverInfo.getDisplayName() != null && driverInfo.getDisplayName().length() > 0) {
        info.setDisplayName(driverInfo.getDisplayName());
      }
      if (driverInfo.getUrlTemplate() != null && driverInfo.getUrlTemplate().length() > 0) {
        info.setUrlFormat(driverInfo.getUrlTemplate());
      }
    }
  }
  return jdbcDriverInfos;
}",0.972370559554214
78710,"/** 
 * @param computedCol1
 * @param computedCol2
 * @return
 */
private boolean isEqualComputedColumns(List computedCol1,List computedCol2){
  if (computedCol1 == computedCol2)   return true;
  if (isEqualBasicCol(computedCol1,computedCol2) == false)   return false;
  Iterator it=computedCol1.iterator();
  Iterator it2=computedCol1.iterator();
  while (it.hasNext()) {
    IComputedColumn cc=(IComputedColumn)it.next();
    IComputedColumn cc2=(IComputedColumn)it2.next();
    if (isEqualComputedCol(cc,cc2) == false)     return false;
  }
  return true;
}","/** 
 * @param computedCol1
 * @param computedCol2
 * @return
 */
private boolean isEqualComputedColumns(List computedCol1,List computedCol2){
  if (computedCol1 == computedCol2)   return true;
  int basicCol=isEqualBasicCol(computedCol1,computedCol2);
  if (basicCol == B_TRUE)   return true;
 else   if (basicCol == B_FALSE)   return false;
  Iterator it=computedCol1.iterator();
  Iterator it2=computedCol1.iterator();
  while (it.hasNext()) {
    IComputedColumn cc=(IComputedColumn)it.next();
    IComputedColumn cc2=(IComputedColumn)it2.next();
    if (isEqualComputedCol(cc,cc2) == false)     return false;
  }
  return true;
}",0.9195979899497488
78711,"/** 
 * @param map1
 * @param map2
 * @return
 */
private boolean isEqualProps(Map map1,Map map2){
  if (map1 == map2)   return true;
 else   if (map1 == null || map2 == null)   return false;
 else   if (map1.keySet().size() != map2.keySet().size())   return false;
  Set set=map1.keySet();
  Iterator it=set.iterator();
  while (it.hasNext()) {
    Object ob=it.next();
    Object value1=map1.get(ob);
    Object value2=map1.get(ob);
    if (isEqualObject(value1,value2) == false)     return false;
  }
  return true;
}","/** 
 * @param map1
 * @param map2
 * @return
 */
private boolean isEqualProps(Map map1,Map map2){
  if (map1 == map2) {
    return true;
  }
 else   if (map1 == null || map2 == null) {
    if (map1 == null) {
      if (map2.size() != 0)       return false;
 else       return true;
    }
 else {
      if (map1.size() != 0)       return false;
 else       return true;
    }
  }
 else   if (map1.keySet().size() != map2.keySet().size()) {
    return false;
  }
  Set set=map1.keySet();
  Iterator it=set.iterator();
  while (it.hasNext()) {
    Object ob=it.next();
    Object value1=map1.get(ob);
    Object value2=map1.get(ob);
    if (isEqualObject(value1,value2) == false)     return false;
  }
  return true;
}",0.7702265372168284
78712,"/** 
 * @param resultHints1
 * @param resultHints2
 * @return
 */
private boolean isEqualResultHints(List resultHints1,List resultHints2){
  if (resultHints1 == resultHints2)   return true;
  if (isEqualBasicCol(resultHints1,resultHints2) == false)   return false;
  Iterator it=resultHints1.iterator();
  Iterator it2=resultHints2.iterator();
  while (it.hasNext()) {
    IColumnDefinition cd=(IColumnDefinition)it.next();
    IColumnDefinition cd2=(IColumnDefinition)it2.next();
    if (isEqualColumnDefn(cd,cd2) == false)     return false;
  }
  return true;
}","/** 
 * @param resultHints1
 * @param resultHints2
 * @return
 */
private boolean isEqualResultHints(List resultHints1,List resultHints2){
  if (resultHints1 == resultHints2)   return true;
  int basicCol=isEqualBasicCol(resultHints1,resultHints2);
  if (basicCol == B_TRUE)   return true;
 else   if (basicCol == B_FALSE)   return false;
  Iterator it=resultHints1.iterator();
  Iterator it2=resultHints2.iterator();
  while (it.hasNext()) {
    IColumnDefinition cd=(IColumnDefinition)it.next();
    IColumnDefinition cd2=(IColumnDefinition)it2.next();
    if (isEqualColumnDefn(cd,cd2) == false)     return false;
  }
  return true;
}",0.9183333333333332
78713,"/** 
 * @param params1
 * @param params2
 * @return
 */
private boolean isEqualParameters(List params1,List params2){
  if (params1 == params2)   return true;
  if (isEqualBasicCol(params1,params2) == false)   return false;
  Iterator it=params1.iterator();
  Iterator it2=params2.iterator();
  while (it.hasNext()) {
    IParameterDefinition pd=(IParameterDefinition)it.next();
    IParameterDefinition pd2=(IParameterDefinition)it2.next();
    if (isEqualParameter(pd,pd2) == false)     return false;
  }
  return true;
}","/** 
 * @param params1
 * @param params2
 * @return
 */
private boolean isEqualParameters(List params1,List params2){
  if (params1 == params2)   return true;
  int basicCol=isEqualBasicCol(params1,params2);
  if (basicCol == B_TRUE)   return true;
 else   if (basicCol == B_FALSE)   return false;
  Iterator it=params1.iterator();
  Iterator it2=params2.iterator();
  while (it.hasNext()) {
    IParameterDefinition pd=(IParameterDefinition)it.next();
    IParameterDefinition pd2=(IParameterDefinition)it2.next();
    if (isEqualParameter(pd,pd2) == false)     return false;
  }
  return true;
}",0.9125
78714,"/** 
 * @param col1
 * @param col2
 * @return
 */
private boolean isEqualBasicCol(Collection col1,Collection col2){
  if (col1 == col2)   return true;
 else   if (col1 == null || col2 == null)   return false;
 else   return col1.size() == col2.size();
}","/** 
 * @param col1
 * @param col2
 * @return
 */
private int isEqualBasicCol(Collection col1,Collection col2){
  if (col1 == col2) {
    return B_TRUE;
  }
 else   if (col1 == null || col2 == null) {
    if (col1 == null) {
      if (col2.size() == 0)       return B_TRUE;
 else       return B_FALSE;
    }
 else {
      if (col1.size() == 0)       return B_TRUE;
 else       return B_FALSE;
    }
  }
 else {
    if (col1.size() == col2.size())     return B_UNKNOWN;
 else     return B_FALSE;
  }
}",0.4913678618857902
78715,"/** 
 * @param ob1
 * @param ob2
 * @return
 */
private boolean isEqualObject(Object ob1,Object ob2){
  if (ob1 == ob2)   return true;
 else   if (ob1 == null || ob2 == null)   return false;
  return ob1.equals(ob2);
}","/** 
 * Only for non-collection object
 * @param ob1
 * @param ob2
 * @return
 */
private boolean isEqualObject(Object ob1,Object ob2){
  if (ob1 == ob2)   return true;
 else   if (ob1 == null || ob2 == null)   return false;
  return ob1.equals(ob2);
}",0.9276595744680852
78716,"/** 
 * @param paramsBinding1
 * @param paramsBinding2
 * @return
 */
private boolean isEqualParameterBindings(Collection paramsBinding1,Collection paramsBinding2){
  if (paramsBinding1 == paramsBinding2)   return true;
  if (isEqualBasicCol(paramsBinding1,paramsBinding2) == false)   return false;
  Iterator it=paramsBinding1.iterator();
  Iterator it2=paramsBinding2.iterator();
  while (it.hasNext()) {
    IInputParameterBinding pb=(IInputParameterBinding)it.next();
    IInputParameterBinding pb2=(IInputParameterBinding)it2.next();
    if (isEqualParameterBinding(pb,pb2) == false)     return false;
  }
  return true;
}","/** 
 * @param paramsBinding1
 * @param paramsBinding2
 * @return
 */
private boolean isEqualParameterBindings(Collection paramsBinding1,Collection paramsBinding2){
  if (paramsBinding1 == paramsBinding2)   return true;
  int basicCol=isEqualBasicCol(paramsBinding1,paramsBinding2);
  if (basicCol == B_TRUE)   return true;
 else   if (basicCol == B_FALSE)   return false;
  Iterator it=paramsBinding1.iterator();
  Iterator it2=paramsBinding2.iterator();
  while (it.hasNext()) {
    IInputParameterBinding pb=(IInputParameterBinding)it.next();
    IInputParameterBinding pb2=(IInputParameterBinding)it2.next();
    if (isEqualParameterBinding(pb,pb2) == false)     return false;
  }
  return true;
}",0.927710843373494
78717,"public boolean equals(Object obj){
  if (obj == null || obj instanceof DataSourceAndDataSet == false)   return false;
  if (this == obj)   return true;
  IBaseDataSourceDesign dataSourceDesign2=((DataSourceAndDataSet)obj).dataSourceDesign;
  IBaseDataSetDesign dataSetDesign2=((DataSourceAndDataSet)obj).dataSetDesign;
  Collection parameterBindings2=((DataSourceAndDataSet)obj).parameterBindings;
  int cacheCount2=((DataSourceAndDataSet)obj).cacheCount;
  if (this.dataSourceDesign == dataSourceDesign2) {
    if (this.dataSetDesign == dataSetDesign2) {
      if (this.parameterBindings == parameterBindings2)       return true;
 else       if (this.parameterBindings == null || parameterBindings2 == null)       return false;
    }
 else     if (this.dataSetDesign == null || dataSetDesign2 == null)     return false;
  }
 else   if (this.dataSourceDesign == null || dataSourceDesign2 == null) {
    return false;
  }
 else {
    if ((this.dataSetDesign != dataSetDesign2) && (this.dataSetDesign == null || dataSetDesign2 == null))     return false;
  }
  if (isEqualString(dataSourceDesign.getBeforeOpenScript(),dataSourceDesign2.getBeforeOpenScript()) == false || isEqualString(dataSourceDesign.getAfterOpenScript(),dataSourceDesign2.getAfterOpenScript()) == false || isEqualString(dataSourceDesign.getBeforeCloseScript(),dataSourceDesign2.getBeforeCloseScript()) == false || isEqualString(dataSourceDesign.getAfterCloseScript(),dataSourceDesign2.getAfterCloseScript()) == false)   return false;
  if (dataSourceDesign instanceof IOdaDataSourceDesign && dataSourceDesign2 instanceof IOdaDataSourceDesign) {
    IOdaDataSourceDesign dataSource=(IOdaDataSourceDesign)dataSourceDesign;
    IOdaDataSourceDesign dataSource2=(IOdaDataSourceDesign)dataSourceDesign2;
    if (isEqualString(dataSource.getExtensionID(),dataSource2.getExtensionID()) == false)     return false;
    if (isEqualProps(dataSource.getPublicProperties(),dataSource2.getPublicProperties()) == false || isEqualProps(dataSource.getPrivateProperties(),dataSource2.getPrivateProperties()) == false)     return false;
  }
 else   if (dataSourceDesign instanceof IScriptDataSourceDesign && dataSourceDesign2 instanceof IScriptDataSourceDesign) {
    IScriptDataSourceDesign dataSource=(IScriptDataSourceDesign)dataSourceDesign;
    IScriptDataSourceDesign dataSource2=(IScriptDataSourceDesign)dataSourceDesign2;
    if (isEqualString(dataSource.getOpenScript(),dataSource2.getOpenScript()) == false || isEqualString(dataSource.getCloseScript(),dataSource2.getCloseScript()) == false)     return false;
  }
  if (isEqualString(dataSetDesign.getBeforeOpenScript(),dataSetDesign2.getBeforeOpenScript()) == false || isEqualString(dataSetDesign.getAfterOpenScript(),dataSetDesign2.getAfterOpenScript()) == false || isEqualString(dataSetDesign.getBeforeCloseScript(),dataSetDesign2.getBeforeCloseScript()) == false || isEqualString(dataSetDesign.getAfterCloseScript(),dataSetDesign2.getAfterCloseScript()) == false)   return false;
  if (isEqualComputedColumns(dataSetDesign.getComputedColumns(),dataSetDesign2.getComputedColumns()) == false || isEqualFilters(dataSetDesign.getFilters(),dataSetDesign2.getFilters()) == false || isEqualParameterBindings(dataSetDesign.getInputParamBindings(),dataSetDesign2.getInputParamBindings()) == false || isEqualParameters(dataSetDesign.getParameters(),dataSetDesign2.getParameters()) == false || isEqualResultHints(dataSetDesign.getResultSetHints(),dataSetDesign2.getResultSetHints()) == false)   return false;
  if (dataSetDesign instanceof IOdaDataSetDesign && dataSetDesign2 instanceof IOdaDataSetDesign) {
    IOdaDataSetDesign dataSet=(IOdaDataSetDesign)dataSetDesign;
    IOdaDataSetDesign dataSet2=(IOdaDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getQueryText(),dataSet2.getQueryText()) == false || isEqualString(dataSet.getQueryScript(),dataSet2.getQueryScript()) == false || isEqualString(dataSet.getExtensionID(),dataSet2.getExtensionID()) == false || isEqualString(dataSet.getPrimaryResultSetName(),dataSet2.getPrimaryResultSetName()) == false || isEqualProps(dataSet.getPublicProperties(),dataSet2.getPublicProperties()) == false || isEqualProps(dataSet.getPrivateProperties(),dataSet2.getPrivateProperties()) == false)     return false;
  }
 else   if (dataSetDesign instanceof IScriptDataSetDesign && dataSetDesign2 instanceof IScriptDataSetDesign) {
    IScriptDataSetDesign dataSet=(IScriptDataSetDesign)dataSetDesign;
    IScriptDataSetDesign dataSet2=(IScriptDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getOpenScript(),dataSet2.getOpenScript()) == false || isEqualString(dataSet.getFetchScript(),dataSet2.getFetchScript()) == false || isEqualString(dataSet.getCloseScript(),dataSet2.getCloseScript()) == false || isEqualString(dataSet.getDescribeScript(),dataSet2.getDescribeScript()) == false)     return false;
  }
 else {
    return false;
  }
  if (this.isEqualParameterBindings(this.parameterBindings,parameterBindings2) == false)   return false;
  if (this.cacheCount != cacheCount2)   return false;
  return true;
}","public boolean equals(Object obj){
  if (obj == null || obj instanceof DataSourceAndDataSet == false)   return false;
  if (this == obj)   return true;
  IBaseDataSourceDesign dataSourceDesign2=((DataSourceAndDataSet)obj).dataSourceDesign;
  IBaseDataSetDesign dataSetDesign2=((DataSourceAndDataSet)obj).dataSetDesign;
  Collection parameterBindings2=((DataSourceAndDataSet)obj).parameterBindings;
  int cacheCount2=((DataSourceAndDataSet)obj).cacheCount;
  if (this.dataSourceDesign == dataSourceDesign2) {
    if (this.dataSetDesign == dataSetDesign2) {
      if (this.parameterBindings == parameterBindings2)       return true;
    }
 else     if (this.dataSetDesign == null || dataSetDesign2 == null) {
      return false;
    }
  }
 else   if (this.dataSourceDesign == null || dataSourceDesign2 == null) {
    return false;
  }
 else {
    if ((this.dataSetDesign != dataSetDesign2) && (this.dataSetDesign == null || dataSetDesign2 == null))     return false;
  }
  if (isEqualString(dataSourceDesign.getBeforeOpenScript(),dataSourceDesign2.getBeforeOpenScript()) == false || isEqualString(dataSourceDesign.getAfterOpenScript(),dataSourceDesign2.getAfterOpenScript()) == false || isEqualString(dataSourceDesign.getBeforeCloseScript(),dataSourceDesign2.getBeforeCloseScript()) == false || isEqualString(dataSourceDesign.getAfterCloseScript(),dataSourceDesign2.getAfterCloseScript()) == false)   return false;
  if (dataSourceDesign instanceof IOdaDataSourceDesign && dataSourceDesign2 instanceof IOdaDataSourceDesign) {
    IOdaDataSourceDesign dataSource=(IOdaDataSourceDesign)dataSourceDesign;
    IOdaDataSourceDesign dataSource2=(IOdaDataSourceDesign)dataSourceDesign2;
    if (isEqualString(dataSource.getExtensionID(),dataSource2.getExtensionID()) == false)     return false;
    if (isEqualProps(dataSource.getPublicProperties(),dataSource2.getPublicProperties()) == false || isEqualProps(dataSource.getPrivateProperties(),dataSource2.getPrivateProperties()) == false)     return false;
  }
 else   if (dataSourceDesign instanceof IScriptDataSourceDesign && dataSourceDesign2 instanceof IScriptDataSourceDesign) {
    IScriptDataSourceDesign dataSource=(IScriptDataSourceDesign)dataSourceDesign;
    IScriptDataSourceDesign dataSource2=(IScriptDataSourceDesign)dataSourceDesign2;
    if (isEqualString(dataSource.getOpenScript(),dataSource2.getOpenScript()) == false || isEqualString(dataSource.getCloseScript(),dataSource2.getCloseScript()) == false)     return false;
  }
  if (isEqualString(dataSetDesign.getBeforeOpenScript(),dataSetDesign2.getBeforeOpenScript()) == false || isEqualString(dataSetDesign.getAfterOpenScript(),dataSetDesign2.getAfterOpenScript()) == false || isEqualString(dataSetDesign.getBeforeCloseScript(),dataSetDesign2.getBeforeCloseScript()) == false || isEqualString(dataSetDesign.getAfterCloseScript(),dataSetDesign2.getAfterCloseScript()) == false)   return false;
  if (isEqualComputedColumns(dataSetDesign.getComputedColumns(),dataSetDesign2.getComputedColumns()) == false || isEqualFilters(dataSetDesign.getFilters(),dataSetDesign2.getFilters()) == false || isEqualParameterBindings(dataSetDesign.getInputParamBindings(),dataSetDesign2.getInputParamBindings()) == false || isEqualParameters(dataSetDesign.getParameters(),dataSetDesign2.getParameters()) == false || isEqualResultHints(dataSetDesign.getResultSetHints(),dataSetDesign2.getResultSetHints()) == false)   return false;
  if (dataSetDesign instanceof IOdaDataSetDesign && dataSetDesign2 instanceof IOdaDataSetDesign) {
    IOdaDataSetDesign dataSet=(IOdaDataSetDesign)dataSetDesign;
    IOdaDataSetDesign dataSet2=(IOdaDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getQueryText(),dataSet2.getQueryText()) == false || isEqualString(dataSet.getQueryScript(),dataSet2.getQueryScript()) == false || isEqualString(dataSet.getExtensionID(),dataSet2.getExtensionID()) == false || isEqualString(dataSet.getPrimaryResultSetName(),dataSet2.getPrimaryResultSetName()) == false || isEqualProps(dataSet.getPublicProperties(),dataSet2.getPublicProperties()) == false || isEqualProps(dataSet.getPrivateProperties(),dataSet2.getPrivateProperties()) == false)     return false;
  }
 else   if (dataSetDesign instanceof IScriptDataSetDesign && dataSetDesign2 instanceof IScriptDataSetDesign) {
    IScriptDataSetDesign dataSet=(IScriptDataSetDesign)dataSetDesign;
    IScriptDataSetDesign dataSet2=(IScriptDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getOpenScript(),dataSet2.getOpenScript()) == false || isEqualString(dataSet.getFetchScript(),dataSet2.getFetchScript()) == false || isEqualString(dataSet.getCloseScript(),dataSet2.getCloseScript()) == false || isEqualString(dataSet.getDescribeScript(),dataSet2.getDescribeScript()) == false)     return false;
  }
 else {
    return false;
  }
  if (this.isEqualParameterBindings(this.parameterBindings,parameterBindings2) == false)   return false;
  if (this.cacheCount != cacheCount2)   return false;
  return true;
}",0.3774860779634049
78718,"public void elementChanged(DesignElementHandle focus,NotificationEvent ev){
  super.elementChanged(focus,ev);
switch (ev.getEventType()) {
case NotificationEvent.CONTENT_EVENT:
{
      markDirty(true);
      if (focus instanceof GridHandle) {
        addListenerToChildren();
        refreshChildren();
      }
      break;
    }
default :
  break;
}
}","public void elementChanged(DesignElementHandle focus,NotificationEvent ev){
  if (!isActive()) {
    return;
  }
  super.elementChanged(focus,ev);
switch (ev.getEventType()) {
case NotificationEvent.CONTENT_EVENT:
{
      markDirty(true);
      if (focus instanceof GridHandle) {
        addListenerToChildren();
        refreshChildren();
      }
      break;
    }
default :
  break;
}
}",0.9500674763832658
78719,"public void earlyStartup(){
  WorkspaceClasspathManager.registerClassPathFinder(new WorkspaceClassPathFinder());
  String value=System.getProperty(""String_Node_Str"");
  if (value == null || value.length() == 0) {
    return;
  }
  StringTokenizer token=new StringTokenizer(value,""String_Node_Str"");
  while (token.hasMoreTokens()) {
    String str=token.nextToken();
    try {
      DebugUtil.importProject(str);
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
  }
}","public void earlyStartup(){
  WorkspaceClassPathFinder finder=new WorkspaceClassPathFinder();
  WorkspaceClasspathManager.registerClassPathFinder(finder);
  String projectClassPaths=finder.getClassPath();
  if (projectClassPaths == null) {
    projectClassPaths=""String_Node_Str"";
  }
  System.setProperty(WORKSPACE_CLASSPATH_KEY,projectClassPaths);
  String value=System.getProperty(""String_Node_Str"");
  if (value == null || value.length() == 0) {
    return;
  }
  StringTokenizer token=new StringTokenizer(value,""String_Node_Str"");
  while (token.hasMoreTokens()) {
    String str=token.nextToken();
    try {
      DebugUtil.importProject(str);
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
  }
}",0.6931348221670802
78720,"public static void handleOnCreate(CellContent content,IRowData rowData,ExecutionContext context){
  try {
    ReportItemDesign cellDesign=(ReportItemDesign)content.getGenerateBy();
    ICellInstance cell=new CellInstance(content);
    if (handleJS(cell,cellDesign.getOnCreate(),context).didRun())     return;
    CellHandle handle=(CellHandle)cellDesign.getHandle();
    if (handle != null) {
      ICellEventHandler eh=(ICellEventHandler)getInstance((CellHandle)cellDesign.getHandle());
      if (eh != null)       eh.onCreate(cell,rowData,context.getReportContext());
    }
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnCreate(CellContent content,IRowData rowData,ExecutionContext context){
  try {
    ReportItemDesign cellDesign=(ReportItemDesign)content.getGenerateBy();
    ICellInstance cell=new CellInstance(content,context);
    if (handleJS(cell,cellDesign.getOnCreate(),context).didRun())     return;
    CellHandle handle=(CellHandle)cellDesign.getHandle();
    if (handle != null) {
      ICellEventHandler eh=(ICellEventHandler)getInstance((CellHandle)cellDesign.getHandle());
      if (eh != null)       eh.onCreate(cell,rowData,context.getReportContext());
    }
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.9939301972685888
78721,"public static void handleOnRender(CellContent content,IRowData rowData,ExecutionContext context){
  try {
    ReportItemDesign cellDesign=(ReportItemDesign)content.getGenerateBy();
    ICellInstance cell=new CellInstance(content);
    if (handleJS(cell,cellDesign.getOnRender(),context).didRun())     return;
    ICellEventHandler eh=(ICellEventHandler)getInstance((CellHandle)cellDesign.getHandle());
    if (eh != null)     eh.onRender(cell,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnRender(CellContent content,IRowData rowData,ExecutionContext context){
  try {
    ReportItemDesign cellDesign=(ReportItemDesign)content.getGenerateBy();
    ICellInstance cell=new CellInstance(content,context);
    if (handleJS(cell,cellDesign.getOnRender(),context).didRun())     return;
    ICellEventHandler eh=(ICellEventHandler)getInstance((CellHandle)cellDesign.getHandle());
    if (eh != null)     eh.onRender(cell,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.9927927927927928
78722,"public static void handleOnCreate(DataContent content,ExecutionContext context){
  try {
    ReportItemDesign dataItemDesign=(ReportItemDesign)content.getGenerateBy();
    IDataItemInstance dataItem=new DataItemInstance(content);
    if (handleJS(dataItem,dataItemDesign.getOnCreate(),context).didRun())     return;
    IDataItemEventHandler eh=(IDataItemEventHandler)getInstance((DataItemHandle)dataItemDesign.getHandle());
    if (eh != null)     eh.onCreate(dataItem,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnCreate(DataContent content,ExecutionContext context){
  try {
    ReportItemDesign dataItemDesign=(ReportItemDesign)content.getGenerateBy();
    IDataItemInstance dataItem=new DataItemInstance(content,context);
    if (handleJS(dataItem,dataItemDesign.getOnCreate(),context).didRun())     return;
    IDataItemEventHandler eh=(IDataItemEventHandler)getInstance((DataItemHandle)dataItemDesign.getHandle());
    if (eh != null)     eh.onCreate(dataItem,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.993127147766323
78723,"public static void handleOnRender(DataContent content,ExecutionContext context){
  try {
    ReportItemDesign dataItemDesign=(ReportItemDesign)content.getGenerateBy();
    IDataItemInstance dataItem=new DataItemInstance(content);
    if (handleJS(dataItem,dataItemDesign.getOnRender(),context).didRun())     return;
    IDataItemEventHandler eh=(IDataItemEventHandler)getInstance((DataItemHandle)dataItemDesign.getHandle());
    if (eh != null)     eh.onRender(dataItem,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnRender(DataContent content,ExecutionContext context){
  try {
    ReportItemDesign dataItemDesign=(ReportItemDesign)content.getGenerateBy();
    IDataItemInstance dataItem=new DataItemInstance(content,context);
    if (handleJS(dataItem,dataItemDesign.getOnRender(),context).didRun())     return;
    IDataItemEventHandler eh=(IDataItemEventHandler)getInstance((DataItemHandle)dataItemDesign.getHandle());
    if (eh != null)     eh.onRender(dataItem,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.993127147766323
78724,"public static void handleOnCreate(ForeignContent content,ExecutionContext context){
  try {
    ReportItemDesign textItemDesign=(ReportItemDesign)content.getGenerateBy();
    IDynamicTextInstance text=new DynamicTextInstance(content);
    if (handleJS(text,textItemDesign.getOnCreate(),context).didRun())     return;
    IDynamicTextEventHandler eh=(IDynamicTextEventHandler)getInstance((TextDataHandle)textItemDesign.getHandle());
    if (eh != null)     eh.onCreate(text,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnCreate(ForeignContent content,ExecutionContext context){
  try {
    ReportItemDesign textItemDesign=(ReportItemDesign)content.getGenerateBy();
    IDynamicTextInstance text=new DynamicTextInstance(content,context);
    if (handleJS(text,textItemDesign.getOnCreate(),context).didRun())     return;
    IDynamicTextEventHandler eh=(IDynamicTextEventHandler)getInstance((TextDataHandle)textItemDesign.getHandle());
    if (eh != null)     eh.onCreate(text,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.9931623931623932
78725,"public static void handleOnRender(ForeignContent content,ExecutionContext context){
  try {
    ReportItemDesign textItemDesign=(ReportItemDesign)content.getGenerateBy();
    IDynamicTextInstance text=new DynamicTextInstance(content);
    if (handleJS(text,textItemDesign.getOnRender(),context).didRun())     return;
    IDynamicTextEventHandler eh=(IDynamicTextEventHandler)getInstance((TextDataHandle)textItemDesign.getHandle());
    if (eh != null)     eh.onRender(text,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnRender(ForeignContent content,ExecutionContext context){
  try {
    ReportItemDesign textItemDesign=(ReportItemDesign)content.getGenerateBy();
    IDynamicTextInstance text=new DynamicTextInstance(content,context);
    if (handleJS(text,textItemDesign.getOnRender(),context).didRun())     return;
    IDynamicTextEventHandler eh=(IDynamicTextEventHandler)getInstance((TextDataHandle)textItemDesign.getHandle());
    if (eh != null)     eh.onRender(text,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.9931623931623932
78726,"public static IReportElementInstance getInstance(IElement element){
  if (element == null)   return null;
  if (element instanceof CellContent)   return new CellInstance((CellContent)element);
  if (element instanceof DataContent)   return new DataItemInstance((DataContent)element);
  if (element instanceof ImageContent)   return new ImageInstance((ImageContent)element);
  if (element instanceof LabelContent)   return new LabelInstance((LabelContent)element);
  if (element instanceof ContainerContent)   return new ListInstance((ContainerContent)element);
  if (element instanceof RowContent)   return new RowInstance((RowContent)element);
  if (element instanceof TableContent) {
    Object genBy=((TableContent)element).getGenerateBy();
    if (genBy instanceof TableItemDesign)     return new TableInstance((TableContent)element);
 else     if (genBy instanceof GridItemDesign)     return new GridInstance((TableContent)element);
  }
  if (element instanceof TextContent)   return new TextItemInstance((TextContent)element);
  if (element instanceof ForeignContent) {
    ForeignContent fc=(ForeignContent)element;
    if (IForeignContent.HTML_TYPE.equals(fc.getRawType()) || IForeignContent.TEXT_TYPE.equals(fc.getRawType()) || IForeignContent.TEMPLATE_TYPE.equals(fc.getRawType()))     return new TextItemInstance(fc);
  }
  return null;
}","public static IReportElementInstance getInstance(IElement element,ExecutionContext context){
  if (element == null)   return null;
  if (element instanceof CellContent)   return new CellInstance((CellContent)element,context);
  if (element instanceof DataContent)   return new DataItemInstance((DataContent)element,context);
  if (element instanceof ImageContent)   return new ImageInstance((ImageContent)element,context);
  if (element instanceof LabelContent)   return new LabelInstance((LabelContent)element,context);
  if (element instanceof ContainerContent)   return new ListInstance((ContainerContent)element,context);
  if (element instanceof RowContent)   return new RowInstance((RowContent)element,context);
  if (element instanceof TableContent) {
    Object genBy=((TableContent)element).getGenerateBy();
    if (genBy instanceof TableItemDesign)     return new TableInstance((TableContent)element,context);
 else     if (genBy instanceof GridItemDesign)     return new GridInstance((TableContent)element,context);
  }
  if (element instanceof TextContent)   return new TextItemInstance((TextContent)element,context);
  if (element instanceof ForeignContent) {
    ForeignContent fc=(ForeignContent)element;
    if (IForeignContent.HTML_TYPE.equals(fc.getRawType()) || IForeignContent.TEXT_TYPE.equals(fc.getRawType()) || IForeignContent.TEMPLATE_TYPE.equals(fc.getRawType()))     return new TextItemInstance(fc,context);
  }
  if (element instanceof TableBandContent) {
    return getInstance(element.getParent(),context);
  }
  return null;
}",0.921170395869191
78727,"public static void handleOnCreate(TableContent content,IRowData rowData,ExecutionContext context){
  try {
    ReportItemDesign gridDesign=(ReportItemDesign)content.getGenerateBy();
    IGridInstance grid=new GridInstance(content);
    if (handleJS(grid,gridDesign.getOnCreate(),context).didRun())     return;
    IGridEventHandler eh=(IGridEventHandler)getInstance((GridHandle)gridDesign.getHandle());
    if (eh != null)     eh.onCreate(grid,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnCreate(TableContent content,IRowData rowData,ExecutionContext context){
  try {
    ReportItemDesign gridDesign=(ReportItemDesign)content.getGenerateBy();
    IGridInstance grid=new GridInstance(content,context);
    if (handleJS(grid,gridDesign.getOnCreate(),context).didRun())     return;
    IGridEventHandler eh=(IGridEventHandler)getInstance((GridHandle)gridDesign.getHandle());
    if (eh != null)     eh.onCreate(grid,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.9928057553956836
78728,"public static void handleOnRender(TableContent content,ExecutionContext context){
  try {
    ReportItemDesign gridDesign=(ReportItemDesign)content.getGenerateBy();
    IGridInstance grid=new GridInstance(content);
    if (handleJS(grid,gridDesign.getOnRender(),context).didRun())     return;
    IGridEventHandler eh=(IGridEventHandler)getInstance((GridHandle)gridDesign.getHandle());
    if (eh != null)     eh.onRender(grid,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnRender(TableContent content,ExecutionContext context){
  try {
    ReportItemDesign gridDesign=(ReportItemDesign)content.getGenerateBy();
    IGridInstance grid=new GridInstance(content,context);
    if (handleJS(grid,gridDesign.getOnRender(),context).didRun())     return;
    IGridEventHandler eh=(IGridEventHandler)getInstance((GridHandle)gridDesign.getHandle());
    if (eh != null)     eh.onRender(grid,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.9925788497217068
78729,"public static void handleOnCreate(ImageContent content,ExecutionContext context){
  try {
    ReportItemDesign imageDesign=(ReportItemDesign)content.getGenerateBy();
    IImageInstance image=new ImageInstance(content);
    if (handleJS(image,imageDesign.getOnCreate(),context).didRun())     return;
    IImageEventHandler eh=(IImageEventHandler)getInstance((ImageHandle)imageDesign.getHandle());
    if (eh != null)     eh.onCreate(image,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnCreate(ImageContent content,ExecutionContext context){
  try {
    ReportItemDesign imageDesign=(ReportItemDesign)content.getGenerateBy();
    IImageInstance image=new ImageInstance(content,context);
    if (handleJS(image,imageDesign.getOnCreate(),context).didRun())     return;
    IImageEventHandler eh=(IImageEventHandler)getInstance((ImageHandle)imageDesign.getHandle());
    if (eh != null)     eh.onCreate(image,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.9927272727272728
78730,"public static void handleOnRender(ImageContent content,ExecutionContext context){
  try {
    ReportItemDesign imageDesign=(ReportItemDesign)content.getGenerateBy();
    IImageInstance image=new ImageInstance(content);
    if (handleJS(image,imageDesign.getOnRender(),context).didRun())     return;
    IImageEventHandler eh=(IImageEventHandler)getInstance((ImageHandle)imageDesign.getHandle());
    if (eh != null)     eh.onRender(image,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnRender(ImageContent content,ExecutionContext context){
  try {
    ReportItemDesign imageDesign=(ReportItemDesign)content.getGenerateBy();
    IImageInstance image=new ImageInstance(content,context);
    if (handleJS(image,imageDesign.getOnRender(),context).didRun())     return;
    IImageEventHandler eh=(IImageEventHandler)getInstance((ImageHandle)imageDesign.getHandle());
    if (eh != null)     eh.onRender(image,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.9927272727272728
78731,"public static void handleOnCreate(LabelContent content,ExecutionContext context){
  try {
    ReportItemDesign labelDesign=(ReportItemDesign)content.getGenerateBy();
    ILabelInstance label=new LabelInstance(content);
    if (handleJS(label,labelDesign.getOnCreate(),context).didRun())     return;
    ILabelEventHandler eh=(ILabelEventHandler)getInstance((LabelHandle)labelDesign.getHandle());
    if (eh != null)     eh.onCreate(label,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnCreate(LabelContent content,ExecutionContext context){
  try {
    ReportItemDesign labelDesign=(ReportItemDesign)content.getGenerateBy();
    ILabelInstance label=new LabelInstance(content,context);
    if (handleJS(label,labelDesign.getOnCreate(),context).didRun())     return;
    ILabelEventHandler eh=(ILabelEventHandler)getInstance((LabelHandle)labelDesign.getHandle());
    if (eh != null)     eh.onCreate(label,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.9927272727272728
78732,"public static void handleOnRender(LabelContent content,ExecutionContext context){
  try {
    ReportItemDesign labelDesign=(ReportItemDesign)content.getGenerateBy();
    ILabelInstance label=new LabelInstance(content);
    if (handleJS(label,labelDesign.getOnRender(),context).didRun())     return;
    ILabelEventHandler eh=(ILabelEventHandler)getInstance((LabelHandle)labelDesign.getHandle());
    if (eh != null)     eh.onRender(label,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnRender(LabelContent content,ExecutionContext context){
  try {
    ReportItemDesign labelDesign=(ReportItemDesign)content.getGenerateBy();
    ILabelInstance label=new LabelInstance(content,context);
    if (handleJS(label,labelDesign.getOnRender(),context).didRun())     return;
    ILabelEventHandler eh=(ILabelEventHandler)getInstance((LabelHandle)labelDesign.getHandle());
    if (eh != null)     eh.onRender(label,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.9927272727272728
78733,"public static void handleOnCreate(ContainerContent content,ExecutionContext context){
  try {
    ReportItemDesign listDesign=(ReportItemDesign)content.getGenerateBy();
    IListInstance list=new ListInstance(content);
    if (handleJS(list,listDesign.getOnCreate(),context).didRun())     return;
    IListEventHandler eh=(IListEventHandler)getInstance((ListHandle)listDesign.getHandle());
    if (eh != null)     eh.onCreate(list,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnCreate(ContainerContent content,ExecutionContext context){
  try {
    ReportItemDesign listDesign=(ReportItemDesign)content.getGenerateBy();
    IListInstance list=new ListInstance(content,context);
    if (handleJS(list,listDesign.getOnCreate(),context).didRun())     return;
    IListEventHandler eh=(IListEventHandler)getInstance((ListHandle)listDesign.getHandle());
    if (eh != null)     eh.onCreate(list,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.992633517495396
78734,"public static void handleOnRender(ContainerContent content,ExecutionContext context){
  try {
    ReportItemDesign listDesign=(ReportItemDesign)content.getGenerateBy();
    IListInstance list=new ListInstance(content);
    if (handleJS(list,listDesign.getOnRender(),context).didRun())     return;
    IListEventHandler eh=(IListEventHandler)getInstance((ListHandle)listDesign.getHandle());
    if (eh != null)     eh.onRender(list,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnRender(ContainerContent content,ExecutionContext context){
  try {
    ReportItemDesign listDesign=(ReportItemDesign)content.getGenerateBy();
    IListInstance list=new ListInstance(content,context);
    if (handleJS(list,listDesign.getOnRender(),context).didRun())     return;
    IListEventHandler eh=(IListEventHandler)getInstance((ListHandle)listDesign.getHandle());
    if (eh != null)     eh.onRender(list,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.992633517495396
78735,"public static void handleOnCreate(RowContent content,IRowData rowData,ExecutionContext context){
  try {
    ReportItemDesign rowDesign=(ReportItemDesign)content.getGenerateBy();
    IRowInstance row=new RowInstance(content);
    if (handleJS(row,rowDesign.getOnCreate(),context).didRun())     return;
    IRowEventHandler eh=(IRowEventHandler)getInstance((RowHandle)rowDesign.getHandle());
    if (eh != null)     eh.onCreate(row,rowData,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnCreate(RowContent content,IRowData rowData,ExecutionContext context){
  try {
    ReportItemDesign rowDesign=(ReportItemDesign)content.getGenerateBy();
    IRowInstance row=new RowInstance(content,context);
    if (handleJS(row,rowDesign.getOnCreate(),context).didRun())     return;
    IRowEventHandler eh=(IRowEventHandler)getInstance((RowHandle)rowDesign.getHandle());
    if (eh != null)     eh.onCreate(row,rowData,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.9927404718693283
78736,"public static void handleOnRender(RowContent content,IRowData rowData,ExecutionContext context){
  try {
    ReportItemDesign rowDesign=(ReportItemDesign)content.getGenerateBy();
    IRowInstance row=new RowInstance(content);
    if (handleJS(row,rowDesign.getOnRender(),context).didRun())     return;
    IRowEventHandler eh=(IRowEventHandler)getInstance((RowHandle)rowDesign.getHandle());
    if (eh != null)     eh.onRender(row,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnRender(RowContent content,IRowData rowData,ExecutionContext context){
  try {
    ReportItemDesign rowDesign=(ReportItemDesign)content.getGenerateBy();
    IRowInstance row=new RowInstance(content,context);
    if (handleJS(row,rowDesign.getOnRender(),context).didRun())     return;
    IRowEventHandler eh=(IRowEventHandler)getInstance((RowHandle)rowDesign.getHandle());
    if (eh != null)     eh.onRender(row,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.992633517495396
78737,"public static void handleOnCreate(TableContent content,ExecutionContext context){
  try {
    ReportItemDesign tableDesign=(ReportItemDesign)content.getGenerateBy();
    ITableInstance table=new TableInstance(content);
    if (handleJS(table,tableDesign.getOnCreate(),context).didRun())     return;
    ITableEventHandler eh=(ITableEventHandler)getInstance((TableHandle)tableDesign.getHandle());
    if (eh != null)     eh.onCreate(table,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnCreate(TableContent content,ExecutionContext context){
  try {
    ReportItemDesign tableDesign=(ReportItemDesign)content.getGenerateBy();
    ITableInstance table=new TableInstance(content,context);
    if (handleJS(table,tableDesign.getOnCreate(),context).didRun())     return;
    ITableEventHandler eh=(ITableEventHandler)getInstance((TableHandle)tableDesign.getHandle());
    if (eh != null)     eh.onCreate(table,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.9927272727272728
78738,"public static void handleOnRender(TableContent content,ExecutionContext context){
  try {
    ReportItemDesign tableDesign=(ReportItemDesign)content.getGenerateBy();
    ITableInstance table=new TableInstance(content);
    if (handleJS(table,tableDesign.getOnRender(),context).didRun())     return;
    ITableEventHandler eh=(ITableEventHandler)getInstance((TableHandle)tableDesign.getHandle());
    if (eh != null)     eh.onRender(table,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnRender(TableContent content,ExecutionContext context){
  try {
    ReportItemDesign tableDesign=(ReportItemDesign)content.getGenerateBy();
    ITableInstance table=new TableInstance(content,context);
    if (handleJS(table,tableDesign.getOnRender(),context).didRun())     return;
    ITableEventHandler eh=(ITableEventHandler)getInstance((TableHandle)tableDesign.getHandle());
    if (eh != null)     eh.onRender(table,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.9927272727272728
78739,"/** 
 * Constructs an instance with the given report context and scope
 * @param reportContext Context for event handlers. May be null
 * @param jsScope Scope for evaluting property binding expressions. If null, property bindings have no effect
 */
public ModelDteApiAdapter(IReportContext reportContext,Scriptable jsScope){
  this.reportContext=reportContext;
  if (jsScope == null) {
    Context context=Context.enter();
    jsScope=context.initStandardObjects();
  }
 else   this.jsScope=jsScope;
}","/** 
 * Constructs an instance with the given report context and scope
 * @param reportContext Context for event handlers. May be null
 * @param jsScope Scope for evaluting property binding expressions. If null, property bindings have no effect
 */
public ModelDteApiAdapter(IReportContext reportContext,Scriptable jsScope){
  this.reportContext=reportContext;
  this.jsScope=jsScope;
}",0.8703494926719278
78740,"/** 
 * Evaluates a property binding Javascript expression
 */
String evaluatePropertyBindingExpr(String expr) throws BirtException {
  expr=formatText(expr);
  Object result=JavascriptEvalUtil.evaluateScript(null,jsScope,expr,""String_Node_Str"",0);
  return result.toString();
}","/** 
 * Evaluates a property binding Javascript expression
 */
String evaluatePropertyBindingExpr(String expr) throws BirtException {
  Object result=JavascriptEvalUtil.evaluateScript(null,jsScope,expr,""String_Node_Str"",0);
  return result.toString();
}",0.9529190207156308
78741,"/** 
 * temp method to decide whether need property binding
 * @return
 */
private boolean needPropertyBinding(){
  if (this.reportContext == null)   return false;
 else   return true;
}","/** 
 * temp method to decide whether need property binding
 * @return
 */
private boolean needPropertyBinding(){
  if (this.reportContext == null || this.jsScope == null)   return false;
 else   return true;
}",0.9393939393939394
78742,"public void setInstanceID(InstanceID iid){
  instanceId=iid;
}","public void setInstanceID(InstanceID iid){
  instanceId=iid;
  currentResult=null;
}",0.8493150684931506
78743,"public void selectColumns(String[] columnNames){
  selectedColumns=columnNames;
}","public void selectColumns(String[] columnNames){
  selectedColumns=columnNames;
  currentResult=null;
}",0.8804347826086957
78744,"public List getMetaData(){
}","public List getMetaData(){
  if (resultMetaList == null) {
    resultMetaList=new ArrayList();
    ResultMetaData metaData=null;
    if (selectedColumns == null && instanceId != null) {
      try {
        currentResult=extract();
        resultMetaList.add(currentResult.getResultMetaData());
      }
 catch (      BirtException e) {
        e.printStackTrace();
      }
    }
    if (selectedColumns == null) {
      return null;
    }
 else {
      metaData=new ResultMetaData(null,selectedColumns);
      resultMetaList.add(metaData);
    }
  }
  return resultMetaList;
}",0.0895522388059701
78745,"protected void setStrokeStyle(Element currentElement){
  Element element=currentElement;
  if (deferStrokColor != null) {
    element=deferStrokColor;
  }
  String style=element.getAttribute(""String_Node_Str"");
  if (style == null)   style=""String_Node_Str"";
  if (color != null) {
    style+=""String_Node_Str"" + serializeToString(color) + ""String_Node_Str"";
  }
  if ((stroke != null) && (stroke instanceof BasicStroke)) {
    BasicStroke bs=(BasicStroke)stroke;
    if (bs.getLineWidth() > 0)     style+=""String_Node_Str"" + bs.getLineWidth() + ""String_Node_Str"";
    if (bs.getDashArray() != null) {
      String dashArrayStr=""String_Node_Str"";
      for (int x=0; x < bs.getDashArray().length; x++) {
        dashArrayStr+=""String_Node_Str"" + bs.getDashArray()[x];
      }
      if (!(dashArrayStr.equals(""String_Node_Str"")))       style+=""String_Node_Str"" + dashArrayStr + ""String_Node_Str"";
    }
    style+=""String_Node_Str"" + bs.getMiterLimit() + ""String_Node_Str"";
switch (bs.getLineJoin()) {
case BasicStroke.JOIN_BEVEL:
      style+=""String_Node_Str"";
    break;
case BasicStroke.JOIN_ROUND:
  style+=""String_Node_Str"";
break;
}
switch (bs.getEndCap()) {
case BasicStroke.CAP_ROUND:
style+=""String_Node_Str"";
break;
case BasicStroke.CAP_SQUARE:
style+=""String_Node_Str"";
break;
}
}
element.setAttribute(""String_Node_Str"",style);
if (styleClass != null) element.setAttribute(""String_Node_Str"",styleClass);
if (id != null) element.setAttribute(""String_Node_Str"",id);
if (clip != null) element.setAttribute(""String_Node_Str"",""String_Node_Str"" + clip.hashCode() + ""String_Node_Str"");
}","/** 
 * Adds stroke color and style information to the element passed in.
 * @param currentElement the element to add style information to.
 * @param isClipped boolean that determines whether to defer the clipping of the element
 */
protected void setStrokeStyle(Element currentElement,boolean deferClipped){
  Element element=currentElement;
  if (deferStrokColor != null) {
    element=deferStrokColor;
  }
  String style=element.getAttribute(""String_Node_Str"");
  if (style == null)   style=""String_Node_Str"";
  if (color != null) {
    style+=""String_Node_Str"" + serializeToString(color) + ""String_Node_Str"";
  }
  if ((stroke != null) && (stroke instanceof BasicStroke)) {
    BasicStroke bs=(BasicStroke)stroke;
    if (bs.getLineWidth() > 0)     style+=""String_Node_Str"" + bs.getLineWidth() + ""String_Node_Str"";
    if (bs.getDashArray() != null) {
      String dashArrayStr=""String_Node_Str"";
      for (int x=0; x < bs.getDashArray().length; x++) {
        dashArrayStr+=""String_Node_Str"" + bs.getDashArray()[x];
      }
      if (!(dashArrayStr.equals(""String_Node_Str"")))       style+=""String_Node_Str"" + dashArrayStr + ""String_Node_Str"";
    }
    style+=""String_Node_Str"" + bs.getMiterLimit() + ""String_Node_Str"";
switch (bs.getLineJoin()) {
case BasicStroke.JOIN_BEVEL:
      style+=""String_Node_Str"";
    break;
case BasicStroke.JOIN_ROUND:
  style+=""String_Node_Str"";
break;
}
switch (bs.getEndCap()) {
case BasicStroke.CAP_ROUND:
style+=""String_Node_Str"";
break;
case BasicStroke.CAP_SQUARE:
style+=""String_Node_Str"";
break;
}
}
element.setAttribute(""String_Node_Str"",style);
if (styleClass != null) element.setAttribute(""String_Node_Str"",styleClass);
if (id != null) element.setAttribute(""String_Node_Str"",id);
if ((clip != null) && (!deferClipped)) element.setAttribute(""String_Node_Str"",""String_Node_Str"" + clip.hashCode() + ""String_Node_Str"");
}",0.9204512583164594
78746,"public void drawGlyphVector(GlyphVector glyph,float x,float y){
  translate(x,y);
  currentElement=createElement(""String_Node_Str"");
  setFillColor(currentElement);
  for (int idx=0; idx < glyph.getNumGlyphs(); idx++) {
    Element glyphElem=createShape(glyph.getGlyphOutline(idx));
    currentElement.appendChild(glyphElem);
  }
  appendChild(currentElement);
  translate(-x,-y);
}","public void drawGlyphVector(GlyphVector glyph,float x,float y){
  translate(x,y);
  Element currentElement=dom.createElement(""String_Node_Str"");
  Element transElement=createElement(""String_Node_Str"");
  currentElement.appendChild(transElement);
  setFillColor(transElement,true);
  for (int idx=0; idx < glyph.getNumGlyphs(); idx++) {
    Element glyphElem=createShape(glyph.getGlyphOutline(idx));
    transElement.appendChild(glyphElem);
  }
  if (clip != null)   currentElement.setAttribute(""String_Node_Str"",""String_Node_Str"" + clip.hashCode() + ""String_Node_Str"");
  appendChild(currentElement);
  translate(-x,-y);
}",0.7191235059760956
78747,"protected void setFillColor(Element currentElement){
  Element element=currentElement;
  if (deferStrokColor != null) {
    element=deferStrokColor;
  }
  String style=element.getAttribute(""String_Node_Str"");
  if (style == null)   style=""String_Node_Str"";
  if (paint == null) {
    if (color == null)     return;
    String alpha=alphaToString(color);
    if (alpha != null)     style+=""String_Node_Str"" + alpha + ""String_Node_Str"";
    element.setAttribute(""String_Node_Str"",style + ""String_Node_Str"" + serializeToString(color)+ ""String_Node_Str"");
  }
 else {
    if (paint instanceof SVGGradientPaint)     element.setAttribute(""String_Node_Str"",style + ""String_Node_Str"" + ((SVGGradientPaint)paint).getId()+ ""String_Node_Str"");
  }
  if (styleClass != null)   element.setAttribute(""String_Node_Str"",styleClass);
  if (id != null)   element.setAttribute(""String_Node_Str"",id);
  if (clip != null)   element.setAttribute(""String_Node_Str"",""String_Node_Str"" + clip.hashCode() + ""String_Node_Str"");
}","/** 
 * Adds fill color and style information to the element passed in.
 * @param currentElement the element to add style information to.
 * @param isClipped boolean that determines whether to defer the clipping of the element
 */
protected void setFillColor(Element currentElement,boolean deferClipped){
  Element element=currentElement;
  if (deferStrokColor != null) {
    element=deferStrokColor;
  }
  String style=element.getAttribute(""String_Node_Str"");
  if (style == null)   style=""String_Node_Str"";
  if (paint == null) {
    if (color == null)     return;
    String alpha=alphaToString(color);
    if (alpha != null)     style+=""String_Node_Str"" + alpha + ""String_Node_Str"";
    element.setAttribute(""String_Node_Str"",style + ""String_Node_Str"" + serializeToString(color)+ ""String_Node_Str"");
  }
 else {
    if (paint instanceof SVGGradientPaint)     element.setAttribute(""String_Node_Str"",style + ""String_Node_Str"" + ((SVGGradientPaint)paint).getId()+ ""String_Node_Str"");
  }
  if (styleClass != null)   element.setAttribute(""String_Node_Str"",styleClass);
  if (id != null)   element.setAttribute(""String_Node_Str"",id);
  if ((clip != null) && (!deferClipped))   element.setAttribute(""String_Node_Str"",""String_Node_Str"" + clip.hashCode() + ""String_Node_Str"");
}",0.8756043956043956
78748,"private void createLabel(Composite parent,String content){
  Label label=new Label(parent,SWT.NONE);
  setLabelLayoutData(label);
  if (content != null) {
    label.setText(content);
  }
}","private void createLabel(Composite parent,String content){
  Label label=new Label(parent,SWT.NONE);
  if (content != null) {
    label.setText(content);
  }
  setLabelLayoutData(label);
}",0.8457446808510638
78749,"private void setLabelLayoutData(Control control){
  GridData gd=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
  gd.widthHint=100;
  control.setLayoutData(gd);
}","private void setLabelLayoutData(Label label){
  GridData gd=new GridData();
  if (label.getText().equals(LABEL_VALUES)) {
    gd.verticalAlignment=GridData.BEGINNING;
  }
  gd.widthHint=100;
  if (Locale.getDefault().getLanguage().equals(""String_Node_Str"")) {
    gd.widthHint+=15;
  }
  label.setLayoutData(gd);
}",0.3647798742138364
78750,"protected JSMethodRunner getRunner(Scriptable scope,String type,String name){
  if (runner == null) {
    String scopeName=type + ""String_Node_Str"" + name+ ""String_Node_Str"";
    runner=new JSMethodRunner(scope,scopeName);
  }
  return runner;
}","protected JSMethodRunner getRunner(Scriptable scope,String type,String name){
  String scopeName=type + ""String_Node_Str"" + name+ ""String_Node_Str"";
  runner=new JSMethodRunner(scope,scopeName);
  return runner;
}",0.7947598253275109
78751,"public DataExtractionTask(ReportEngine engine,IReportRunnable runnable,ReportDocumentReader reader){
  super(engine,runnable);
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  report=new ReportParser().parse(((ReportRunnable)runnable).getReport());
  populateContent();
  executionContext.setReport(report);
  setParameterValues(reportDocReader.getParameterValues());
  IDataEngine dataEngine=executionContext.getDataEngine();
  dataEngine.prepare(report,context);
}","public DataExtractionTask(ReportEngine engine,IReportRunnable runnable,ReportDocumentReader reader){
  super(engine,runnable);
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  report=new ReportParser().parse(((ReportRunnable)runnable).getReport());
  executionContext.setReport(report);
  setParameterValues(reportDocReader.getParameterValues());
  IDataEngine dataEngine=executionContext.getDataEngine();
  dataEngine.prepare(report,context);
}",0.769098712446352
78752,"public Map getNamedExpressions(){
  if (namedExpressions == null)   namedExpressions=new HashMap();
  return namedExpressions;
}","/** 
 * return the named expression defined on the report
 * @return
 */
public Map getNamedExpressions(){
  if (namedExpressions == null)   namedExpressions=new HashMap();
  return namedExpressions;
}",0.7781155015197568
78753,"int toDteFilterOperator(String modelOpr){
}","public static int toDteFilterOperator(String modelOpr){
}",0.86
78754,"/** 
 * create one Filter given a filter condition handle
 * @param handle a filter condition handle
 * @return the filter
 */
private IFilterDefinition createFilter(FilterConditionHandle handle){
  String filterExpr=handle.getExpr();
  if (filterExpr == null || filterExpr.length() == 0)   return null;
  String filterOpr=handle.getOperator();
  if (filterOpr == null || filterOpr.length() == 0)   return new FilterDefinition(new ScriptExpression(filterExpr));
  String column=filterExpr;
  int dteOpr=toDteFilterOperator(filterOpr);
  String operand1=handle.getValue1();
  String operand2=handle.getValue2();
  return new FilterDefinition(new ConditionalExpression(column,dteOpr,operand1,operand2));
}","/** 
 * create one Filter given a filter condition handle
 * @param handle a filter condition handle
 * @return the filter
 */
private IFilterDefinition createFilter(FilterConditionHandle handle){
  String filterExpr=handle.getExpr();
  if (filterExpr == null || filterExpr.length() == 0)   return null;
  String filterOpr=handle.getOperator();
  if (filterOpr == null || filterOpr.length() == 0)   return new FilterDefinition(new ScriptExpression(filterExpr));
  String column=filterExpr;
  int dteOpr=ModelDteApiAdapter.toDteFilterOperator(filterOpr);
  String operand1=handle.getValue1();
  String operand2=handle.getValue2();
  return new FilterDefinition(new ConditionalExpression(column,dteOpr,operand1,operand2));
}",0.9866666666666668
78755,"public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (isEmbeddable) {
    fixTransparentPNG();
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeNoEndTag();
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    Report reportDesign=report.getDesign();
    for (int n=0; n < reportDesign.getStyleCount(); n++) {
      styleBuffer.delete(0,styleBuffer.capacity());
      style=(IStyle)reportDesign.getStyle(n);
      AttributeBuilder.buildStyle(styleBuffer,style,this);
      writer.style(Report.PREFIX_STYLE_NAME + n,styleBuffer.toString(),false);
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  fixTransparentPNG();
  writer.closeTag(HTMLTags.TAG_HEAD);
  String reportStyleName=report == null ? null : report.getDesign().getRootStyleName();
  if (!isEmbeddable) {
    writer.openTag(HTMLTags.TAG_BODY);
    if (reportStyleName != null) {
      writer.attribute(HTMLTags.ATTR_CLASS,reportStyleName);
    }
  }
 else {
    writer.openTag(HTMLTags.TAG_DIV);
    if (reportStyleName != null) {
      AttributeBuilder.buildStyle(styleBuffer,report.findStyle(reportStyleName),this);
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
  }
}","public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (isEmbeddable) {
    fixTransparentPNG();
    writer.openTag(HTMLTags.TAG_DIV);
    String reportStyleName=report == null ? null : report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      StringBuffer styleBuffer=new StringBuffer();
      AttributeBuilder.buildStyle(styleBuffer,report.findStyle(reportStyleName),this);
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeNoEndTag();
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    Report reportDesign=report.getDesign();
    for (int n=0; n < reportDesign.getStyleCount(); n++) {
      styleBuffer.delete(0,styleBuffer.capacity());
      style=(IStyle)reportDesign.getStyle(n);
      AttributeBuilder.buildStyle(styleBuffer,style,this);
      writer.style(Report.PREFIX_STYLE_NAME + n,styleBuffer.toString(),false);
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  fixTransparentPNG();
  writer.closeTag(HTMLTags.TAG_HEAD);
  String reportStyleName=report == null ? null : report.getDesign().getRootStyleName();
  writer.openTag(HTMLTags.TAG_BODY);
  if (reportStyleName != null) {
    writer.attribute(HTMLTags.ATTR_CLASS,reportStyleName);
  }
}",0.8284518828451883
78756,"/** 
 * @param index
 * @param name
 * @param type
 * @param path
 * @param originalPath
 * @throws OdaException
 */
public ColumnInfo(int index,String name,String type,String path,String originalPath) throws OdaException {
  this.index=index;
  this.name=name;
  this.type=type;
  if (!DataTypes.isValidType(type))   throw new OdaException(Messages.getString(""String_Node_Str""));
  this.path=fixTrailingAttr(buildPath(path));
  this.originalPath=originalPath;
  String[] originalPathFrags=originalPath.split(""String_Node_Str"");
  int lastTwoDotAbbrevationPosition=0;
  int numberOfConcretePathFragsBefore2DotAbb=0;
  for (int i=0; i < originalPathFrags.length; i++) {
    if (originalPathFrags[i].equals(""String_Node_Str""))     lastTwoDotAbbrevationPosition=i;
  }
  for (int i=0; i < lastTwoDotAbbrevationPosition; i++) {
    if (!originalPathFrags[i].equals(""String_Node_Str""))     numberOfConcretePathFragsBefore2DotAbb++;
  }
  int numberOf2DotAbb=lastTwoDotAbbrevationPosition - numberOfConcretePathFragsBefore2DotAbb + 1;
  backRefNumber=numberOf2DotAbb - numberOfConcretePathFragsBefore2DotAbb;
  if (backRefNumber < 0)   backRefNumber=0;
}","/** 
 * @param index
 * @param name
 * @param type
 * @param path
 * @param originalPath
 * @throws OdaException
 */
public ColumnInfo(int index,String name,String type,String path,String originalPath) throws OdaException {
  this.index=index;
  this.name=name;
  this.type=type;
  if (!DataTypes.isValidType(type))   throw new OdaException(Messages.getString(""String_Node_Str""));
  this.path=fixTrailingAttr(buildPath(path));
  this.originalPath=originalPath;
  if (originalPath.matches(""String_Node_Str"")) {
    String[] originalPathFrags=originalPath.split(""String_Node_Str"");
    int lastTwoDotAbbrevationPosition=0;
    int numberOfConcretePathFragsBefore2DotAbb=0;
    for (int i=0; i < originalPathFrags.length; i++) {
      if (originalPathFrags[i].equals(""String_Node_Str""))       lastTwoDotAbbrevationPosition=i;
    }
    for (int i=0; i < lastTwoDotAbbrevationPosition; i++) {
      if (!originalPathFrags[i].equals(""String_Node_Str""))       numberOfConcretePathFragsBefore2DotAbb++;
    }
    int numberOf2DotAbb=lastTwoDotAbbrevationPosition - numberOfConcretePathFragsBefore2DotAbb + 1;
    backRefNumber=numberOf2DotAbb - numberOfConcretePathFragsBefore2DotAbb;
    if (backRefNumber < 0)     backRefNumber=0;
  }
 else {
    backRefNumber=0;
  }
}",0.9519071310116086
78757,"/** 
 * This method is used to populate the possible column path expressions List
 * @param rootPath the root path of the table the column in, must be absolute path.
 * @param columnPath the absolute column path.
 * @return
 */
public static List populateColumnPath(String rootPath,String columnPath){
}","/** 
 * This method is used to populate the possible column path expressions List
 * @param rootPath the root path of the table the column in, must be absolute path.
 * @param columnPath the absolute column path.
 * @return
 */
public static String populateColumnPath(String rootPath,String columnPath){
}",0.9835526315789472
78758,"protected List getPostTasks(){
  List retValue=new ArrayList();
  retValue.addAll(super.getPostTasks());
  if (container instanceof TableItem || container instanceof TableGroup || container instanceof TableRow) {
    TableItem table=LayoutUtil.getTableContainer(container);
    if (table != null)     retValue.add(new LayoutActivityTask(module,table));
  }
  NotificationEvent event=null;
  if (add && state != UNDONE_STATE || !add && state == UNDONE_STATE)   event=new ContentEvent(container,content,slotID,ContentEvent.ADD);
 else   event=new ContentEvent(container,content,slotID,ContentEvent.REMOVE);
  if (state == DONE_STATE)   event.setSender(sender);
  retValue.add(new NotificationRecordTask(container,event));
  if (add && state != UNDONE_STATE || !add && state == UNDONE_STATE) {
    if (isSelector(content))     retValue.add(new NotificationRecordTask(content,event,container.getRoot()));
    return retValue;
  }
  if (content instanceof Parameter || content instanceof ParameterGroup || content instanceof DataSet) {
    event=new ElementDeletedEvent(container,content);
    if (state == DONE_STATE)     event.setSender(sender);
    retValue.add(new NotificationRecordTask(content,event,container.getRoot()));
  }
  return retValue;
}","protected List getPostTasks(){
  List retValue=new ArrayList();
  retValue.addAll(super.getPostTasks());
  if (container instanceof TableItem || container instanceof TableGroup || container instanceof TableRow) {
    TableItem table=LayoutUtil.getTableContainer(container);
    if (table != null)     retValue.add(new LayoutActivityTask(module,table));
  }
  NotificationEvent event=null;
  if (add && state != UNDONE_STATE || !add && state == UNDONE_STATE)   event=new ContentEvent(container,content,slotID,ContentEvent.ADD);
 else   event=new ContentEvent(container,content,slotID,ContentEvent.REMOVE);
  if (state == DONE_STATE)   event.setSender(sender);
  retValue.add(new NotificationRecordTask(container,event));
  if (add && state != UNDONE_STATE || !add && state == UNDONE_STATE) {
    if (isSelector(content))     retValue.add(new NotificationRecordTask(content,event,container.getRoot()));
    return retValue;
  }
  if (content instanceof Parameter || content instanceof ParameterGroup || content instanceof DataSet|| content instanceof StyleElement) {
    event=new ElementDeletedEvent(container,content);
    if (state == DONE_STATE)     event.setSender(sender);
    retValue.add(new NotificationRecordTask(content,event,container.getRoot()));
  }
  return retValue;
}",0.9865612648221344
78759,"public String getImageMap(){
  Map triggerMap=getTriggers();
  if (triggerMap == null || triggerMap.size() == 0) {
    return null;
  }
  StringBuffer sb=new StringBuffer();
  List al=(List)triggerMap.get(TriggerCondition.ONFOCUS_LITERAL);
  if (al != null) {
    for (int i=al.size() - 1; i >= 0; i--) {
      ShapedAction sa=(ShapedAction)al.get(i);
      Action ac=sa.getAction();
      String coords=shape2polyCoords(sa.getShape());
      if (coords != null) {
        if (checkSupportedAction(ac)) {
switch (ac.getType().getValue()) {
case ActionType.URL_REDIRECT:
            URLValue uv=(URLValue)ac.getValue();
          sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
      sb.append(eval(uv.getBaseUrl()));
    sb.append(""String_Node_Str"");
  sb.append(coords).append(""String_Node_Str"");
break;
case ActionType.SHOW_TOOLTIP:
break;
case ActionType.INVOKE_SCRIPT:
ScriptValue sv=(ScriptValue)ac.getValue();
sb.append(""String_Node_Str"");
sb.append(eval(sv.getScript()));
sb.append(""String_Node_Str"");
sb.append(coords).append(""String_Node_Str"");
break;
}
}
 else {
}
}
}
}
al=(List)triggerMap.get(TriggerCondition.ONBLUR_LITERAL);
if (al != null) {
for (int i=al.size() - 1; i >= 0; i--) {
ShapedAction sa=(ShapedAction)al.get(i);
Action ac=sa.getAction();
String coords=shape2polyCoords(sa.getShape());
if (coords != null) {
if (checkSupportedAction(ac)) {
switch (ac.getType().getValue()) {
case ActionType.URL_REDIRECT:
URLValue uv=(URLValue)ac.getValue();
sb.append(""String_Node_Str"");
sb.append(""String_Node_Str"");
sb.append(eval(uv.getBaseUrl()));
sb.append(""String_Node_Str"");
sb.append(coords).append(""String_Node_Str"");
break;
case ActionType.SHOW_TOOLTIP:
break;
case ActionType.INVOKE_SCRIPT:
ScriptValue sv=(ScriptValue)ac.getValue();
sb.append(""String_Node_Str"");
sb.append(eval(sv.getScript()));
sb.append(""String_Node_Str"");
sb.append(coords).append(""String_Node_Str"");
break;
}
}
 else {
}
}
}
}
al=(List)triggerMap.get(TriggerCondition.ONCLICK_LITERAL);
if (al != null) {
for (int i=al.size() - 1; i >= 0; i--) {
ShapedAction sa=(ShapedAction)al.get(i);
Action ac=sa.getAction();
String coords=shape2polyCoords(sa.getShape());
if (coords != null) {
if (checkSupportedAction(ac)) {
switch (ac.getType().getValue()) {
case ActionType.URL_REDIRECT:
URLValue uv=(URLValue)ac.getValue();
sb.append(""String_Node_Str"");
sb.append(eval(uv.getBaseUrl()));
sb.append(""String_Node_Str"");
sb.append(coords).append(""String_Node_Str"");
break;
case ActionType.SHOW_TOOLTIP:
break;
case ActionType.INVOKE_SCRIPT:
ScriptValue sv=(ScriptValue)ac.getValue();
sb.append(""String_Node_Str"");
sb.append(eval(sv.getScript()));
sb.append(""String_Node_Str"");
sb.append(coords).append(""String_Node_Str"");
break;
}
}
 else {
}
}
}
}
al=(List)triggerMap.get(TriggerCondition.ONMOUSEOVER_LITERAL);
if (al != null) {
for (int i=al.size() - 1; i >= 0; i--) {
ShapedAction sa=(ShapedAction)al.get(i);
Action ac=sa.getAction();
String coords=shape2polyCoords(sa.getShape());
if (coords != null) {
if (checkSupportedAction(ac)) {
switch (ac.getType().getValue()) {
case ActionType.URL_REDIRECT:
break;
case ActionType.SHOW_TOOLTIP:
TooltipValue tv=(TooltipValue)ac.getValue();
sb.append(""String_Node_Str"");
sb.append(eval(tv.getText()));
sb.append(""String_Node_Str"");
sb.append(coords).append(""String_Node_Str"");
break;
case ActionType.INVOKE_SCRIPT:
break;
}
}
 else {
}
}
}
}
return sb.toString();
}","public String getImageMap(){
  Map triggerMap=getTriggers();
  if (triggerMap == null || triggerMap.size() == 0) {
    return null;
  }
  StringBuffer sb=new StringBuffer();
  List al=(List)triggerMap.get(TriggerCondition.ONFOCUS_LITERAL);
  if (al != null) {
    for (int i=al.size() - 1; i >= 0; i--) {
      HTMLTag tag=new HTMLTag(""String_Node_Str"");
      ShapedAction sa=(ShapedAction)al.get(i);
      Action ac=sa.getAction();
      String coords=shape2polyCoords(sa.getShape());
      if (coords != null) {
        if (checkSupportedAction(ac)) {
switch (ac.getType().getValue()) {
case ActionType.URL_REDIRECT:
            URLValue uv=(URLValue)ac.getValue();
          tag.addAttribute(HTMLAttribute.HREF,NO_OP_JAVASCRIPT);
        tag.addAttribute(HTMLAttribute.ONFOCUS,getJsURLRedirect(uv));
      tag.addAttribute(HTMLAttribute.SHAPE,POLY_SHAPE);
    tag.addAttribute(HTMLAttribute.COORDS,coords);
  sb.append(tag.toString());
break;
case ActionType.SHOW_TOOLTIP:
break;
case ActionType.INVOKE_SCRIPT:
ScriptValue sv=(ScriptValue)ac.getValue();
tag.addAttribute(HTMLAttribute.HREF,NO_OP_JAVASCRIPT);
tag.addAttribute(HTMLAttribute.ONFOCUS,eval(sv.getScript()));
tag.addAttribute(HTMLAttribute.SHAPE,POLY_SHAPE);
tag.addAttribute(HTMLAttribute.COORDS,coords);
sb.append(tag.toString());
break;
}
}
 else {
}
}
}
}
al=(List)triggerMap.get(TriggerCondition.ONBLUR_LITERAL);
if (al != null) {
for (int i=al.size() - 1; i >= 0; i--) {
HTMLTag tag=new HTMLTag(""String_Node_Str"");
ShapedAction sa=(ShapedAction)al.get(i);
Action ac=sa.getAction();
String coords=shape2polyCoords(sa.getShape());
if (coords != null) {
if (checkSupportedAction(ac)) {
switch (ac.getType().getValue()) {
case ActionType.URL_REDIRECT:
URLValue uv=(URLValue)ac.getValue();
tag.addAttribute(HTMLAttribute.HREF,NO_OP_JAVASCRIPT);
tag.addAttribute(HTMLAttribute.ONBLUR,getJsURLRedirect(uv));
tag.addAttribute(HTMLAttribute.SHAPE,POLY_SHAPE);
tag.addAttribute(HTMLAttribute.COORDS,coords);
sb.append(tag.toString());
break;
case ActionType.SHOW_TOOLTIP:
break;
case ActionType.INVOKE_SCRIPT:
ScriptValue sv=(ScriptValue)ac.getValue();
tag.addAttribute(HTMLAttribute.HREF,NO_OP_JAVASCRIPT);
tag.addAttribute(HTMLAttribute.ONBLUR,eval(sv.getScript()));
tag.addAttribute(HTMLAttribute.SHAPE,POLY_SHAPE);
tag.addAttribute(HTMLAttribute.COORDS,coords);
sb.append(tag.toString());
break;
}
}
 else {
}
}
}
}
al=(List)triggerMap.get(TriggerCondition.ONCLICK_LITERAL);
if (al != null) {
for (int i=al.size() - 1; i >= 0; i--) {
HTMLTag tag=new HTMLTag(""String_Node_Str"");
ShapedAction sa=(ShapedAction)al.get(i);
Action ac=sa.getAction();
String coords=shape2polyCoords(sa.getShape());
if (coords != null) {
if (checkSupportedAction(ac)) {
switch (ac.getType().getValue()) {
case ActionType.URL_REDIRECT:
URLValue uv=(URLValue)ac.getValue();
tag.addAttribute(HTMLAttribute.HREF,eval(uv.getBaseUrl()));
tag.addAttribute(HTMLAttribute.TARGET,eval(uv.getTarget()));
tag.addAttribute(HTMLAttribute.SHAPE,POLY_SHAPE);
tag.addAttribute(HTMLAttribute.COORDS,coords);
sb.append(tag.toString());
break;
case ActionType.SHOW_TOOLTIP:
break;
case ActionType.INVOKE_SCRIPT:
ScriptValue sv=(ScriptValue)ac.getValue();
tag.addAttribute(HTMLAttribute.HREF,NO_OP_JAVASCRIPT);
tag.addAttribute(HTMLAttribute.ONCLICK,eval(sv.getScript()));
tag.addAttribute(HTMLAttribute.SHAPE,POLY_SHAPE);
tag.addAttribute(HTMLAttribute.COORDS,coords);
sb.append(tag.toString());
break;
}
}
 else {
}
}
}
}
al=(List)triggerMap.get(TriggerCondition.ONMOUSEOVER_LITERAL);
if (al != null) {
for (int i=al.size() - 1; i >= 0; i--) {
HTMLTag tag=new HTMLTag(""String_Node_Str"");
ShapedAction sa=(ShapedAction)al.get(i);
Action ac=sa.getAction();
String coords=shape2polyCoords(sa.getShape());
if (coords != null) {
if (checkSupportedAction(ac)) {
switch (ac.getType().getValue()) {
case ActionType.URL_REDIRECT:
break;
case ActionType.SHOW_TOOLTIP:
TooltipValue tv=(TooltipValue)ac.getValue();
tag.addAttribute(HTMLAttribute.ALT,eval(tv.getText()));
tag.addAttribute(HTMLAttribute.SHAPE,POLY_SHAPE);
tag.addAttribute(HTMLAttribute.COORDS,coords);
sb.append(tag.toString());
break;
case ActionType.INVOKE_SCRIPT:
break;
}
}
 else {
}
}
}
}
return sb.toString();
}",0.5633136094674556
78760,"private String eval(String expr){
  if (expr == null) {
    return ""String_Node_Str"";
  }
 else {
    return expr;
  }
}","protected String eval(String expr){
  if (expr == null) {
    return ""String_Node_Str"";
  }
 else {
    return expr;
  }
}",0.9669421487603306
78761,"/** 
 * post-process the triggers.
 * @param tg
 * @param dph
 */
public void processTrigger(Trigger tg,StructureSource source){
  IActionRenderer iar=getRunTimeContext().getActionRenderer();
  if (iar != null) {
    iar.processAction(tg.getAction(),source);
  }
  if (StructureType.SERIES_DATA_POINT.equals(source.getType())) {
    DataPointHints dph=(DataPointHints)source.getSource();
    if (tg.getAction().getType() == ActionType.SHOW_TOOLTIP_LITERAL) {
      ((TooltipValue)tg.getAction().getValue()).setText(dph.getDisplayValue());
    }
 else     if (tg.getAction().getType() == ActionType.URL_REDIRECT_LITERAL) {
      final URLValue uv=(URLValue)tg.getAction().getValue();
      final String sBaseURL=uv.getBaseUrl();
      final StringBuffer sb=new StringBuffer(sBaseURL);
      char c='?';
      if (sBaseURL.indexOf(c) != -1) {
        c='&';
      }
      if (uv.getBaseParameterName() != null && uv.getBaseParameterName().length() > 0) {
        sb.append(c);
        c='&';
        sb.append(URLValueImpl.encode(uv.getBaseParameterName()));
        sb.append('=');
        sb.append(URLValueImpl.encode(dph.getBaseDisplayValue()));
      }
      if (uv.getValueParameterName() != null && uv.getValueParameterName().length() > 0) {
        sb.append(c);
        c='&';
        sb.append(URLValueImpl.encode(uv.getValueParameterName()));
        sb.append('=');
        sb.append(URLValueImpl.encode(dph.getOrthogonalDisplayValue()));
      }
      uv.setBaseUrl(sb.toString());
    }
  }
}","/** 
 * post-process the triggers.
 * @param tg
 * @param dph
 */
public void processTrigger(Trigger tg,StructureSource source){
  IActionRenderer iar=getRunTimeContext().getActionRenderer();
  if (iar != null) {
    iar.processAction(tg.getAction(),source);
  }
  if (StructureType.SERIES_DATA_POINT.equals(source.getType())) {
    DataPointHints dph=(DataPointHints)source.getSource();
    if (tg.getAction().getType() == ActionType.SHOW_TOOLTIP_LITERAL) {
      ((TooltipValue)tg.getAction().getValue()).setText(dph.getDisplayValue());
    }
 else     if (tg.getAction().getType() == ActionType.URL_REDIRECT_LITERAL) {
      final URLValue uv=(URLValue)tg.getAction().getValue();
      final String sBaseURL=uv.getBaseUrl();
      final StringBuffer sb=new StringBuffer(sBaseURL);
      char c='?';
      if (sBaseURL.indexOf(c) != -1) {
        c='&';
      }
      if (uv.getBaseParameterName() != null && uv.getBaseParameterName().length() > 0) {
        sb.append(c);
        c='&';
        sb.append(URLValueImpl.encode(uv.getBaseParameterName()));
        sb.append('=');
        sb.append(URLValueImpl.encode(dph.getBaseDisplayValue()));
      }
      if (uv.getValueParameterName() != null && uv.getValueParameterName().length() > 0) {
        sb.append(c);
        c='&';
        sb.append(URLValueImpl.encode(uv.getValueParameterName()));
        sb.append('=');
        sb.append(URLValueImpl.encode(dph.getOrthogonalDisplayValue()));
      }
      if (uv.getSeriesParameterName() != null && uv.getSeriesParameterName().length() > 0) {
        sb.append(c);
        c='&';
        sb.append(URLValueImpl.encode(uv.getSeriesParameterName()));
        sb.append('=');
        sb.append(URLValueImpl.encode(dph.getSeriesDisplayValue()));
      }
      uv.setBaseUrl(sb.toString());
    }
  }
}",0.909310761789601
78762,"public void processAction(Action action,StructureSource source){
  if (ActionType.URL_REDIRECT_LITERAL.equals(action.getType())) {
    URLValue uv=(URLValue)action.getValue();
    String sa=uv.getBaseUrl();
    if (StructureType.SERIES_DATA_POINT.equals(source.getType())) {
      final DataPointHints dph=(DataPointHints)source.getSource();
      try {
        final ActionHandle handle=ModuleUtil.deserializeAction(sa);
        sa=handler.getURL(new IAction(){
          public int getType(){
            if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType()))             return IAction.ACTION_HYPERLINK;
            if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))             return IAction.ACTION_BOOKMARK;
            if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(handle.getLinkType()))             return IAction.ACTION_DRILLTHROUGH;
            return 0;
          }
          public String getBookmark(){
            return (String)dph.getUserValue(handle.getTargetBookmark());
          }
          public String getActionString(){
            if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType()))             return (String)dph.getUserValue(handle.getURI());
            if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))             return (String)dph.getUserValue(handle.getTargetBookmark());
            return null;
          }
          public String getReportName(){
            return handle.getReportName();
          }
          public Map getParameterBindings(){
            Map map=new HashMap();
            for (Iterator itr=handle.getParamBindings().iterator(); itr.hasNext(); ) {
              ParamBindingHandle pbh=(ParamBindingHandle)itr.next();
              map.put(pbh.getParamName(),(String)dph.getUserValue(pbh.getExpression()));
            }
            return map;
          }
          public Map getSearchCriteria(){
            Map map=new HashMap();
            for (Iterator itr=handle.getSearch().iterator(); itr.hasNext(); ) {
              SearchKeyHandle skh=(SearchKeyHandle)itr.next();
              map.put(skh.getExpression(),(String)dph.getUserValue(skh.getExpression()));
            }
            return map;
          }
          public String getTargetWindow(){
            return handle.getTargetWindow();
          }
          public String getFormat(){
            return handle.getFormatType();
          }
        }
,context);
      }
 catch (      Exception e) {
        sa=""String_Node_Str"";
        logger.log(e);
      }
    }
 else {
      try {
        final ActionHandle handle=ModuleUtil.deserializeAction(sa);
        sa=handler.getURL(new IAction(){
          public int getType(){
            if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType()))             return IAction.ACTION_HYPERLINK;
            if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))             return IAction.ACTION_BOOKMARK;
            if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(handle.getLinkType()))             return IAction.ACTION_DRILLTHROUGH;
            return 0;
          }
          public String getBookmark(){
            return handle.getTargetBookmark();
          }
          public String getActionString(){
            if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType()))             return handle.getURI();
            if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))             return handle.getTargetBookmark();
            return null;
          }
          public String getReportName(){
            return handle.getReportName();
          }
          public Map getParameterBindings(){
            Map map=new HashMap();
            for (Iterator itr=handle.getParamBindings().iterator(); itr.hasNext(); ) {
              ParamBindingHandle pbh=(ParamBindingHandle)itr.next();
              map.put(pbh.getParamName(),pbh.getExpression());
            }
            return map;
          }
          public Map getSearchCriteria(){
            Map map=new HashMap();
            for (Iterator itr=handle.getSearch().iterator(); itr.hasNext(); ) {
              SearchKeyHandle skh=(SearchKeyHandle)itr.next();
              map.put(skh.getExpression(),skh.getExpression());
            }
            return map;
          }
          public String getTargetWindow(){
            return handle.getTargetWindow();
          }
          public String getFormat(){
            return handle.getFormatType();
          }
        }
,context);
      }
 catch (      Exception e) {
        sa=""String_Node_Str"";
        logger.log(e);
      }
    }
    uv.setBaseUrl(sa);
  }
}","public void processAction(Action action,StructureSource source){
  if (ActionType.URL_REDIRECT_LITERAL.equals(action.getType())) {
    URLValue uv=(URLValue)action.getValue();
    String sa=uv.getBaseUrl();
    String target=null;
    if (StructureType.SERIES_DATA_POINT.equals(source.getType())) {
      final DataPointHints dph=(DataPointHints)source.getSource();
      try {
        final ActionHandle handle=ModuleUtil.deserializeAction(sa);
        target=handle.getTargetWindow();
        sa=handler.getURL(new IAction(){
          public int getType(){
            if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType()))             return IAction.ACTION_HYPERLINK;
            if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))             return IAction.ACTION_BOOKMARK;
            if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(handle.getLinkType()))             return IAction.ACTION_DRILLTHROUGH;
            return 0;
          }
          public String getBookmark(){
            return (String)dph.getUserValue(handle.getTargetBookmark());
          }
          public String getActionString(){
            if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType()))             return (String)dph.getUserValue(handle.getURI());
            if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))             return (String)dph.getUserValue(handle.getTargetBookmark());
            return null;
          }
          public String getReportName(){
            return handle.getReportName();
          }
          public Map getParameterBindings(){
            Map map=new HashMap();
            for (Iterator itr=handle.getParamBindings().iterator(); itr.hasNext(); ) {
              ParamBindingHandle pbh=(ParamBindingHandle)itr.next();
              map.put(pbh.getParamName(),(String)dph.getUserValue(pbh.getExpression()));
            }
            return map;
          }
          public Map getSearchCriteria(){
            Map map=new HashMap();
            for (Iterator itr=handle.getSearch().iterator(); itr.hasNext(); ) {
              SearchKeyHandle skh=(SearchKeyHandle)itr.next();
              map.put(skh.getExpression(),(String)dph.getUserValue(skh.getExpression()));
            }
            return map;
          }
          public String getTargetWindow(){
            return handle.getTargetWindow();
          }
          public String getFormat(){
            return handle.getFormatType();
          }
        }
,context);
      }
 catch (      Exception e) {
        sa=""String_Node_Str"";
        logger.log(e);
      }
    }
 else {
      try {
        final ActionHandle handle=ModuleUtil.deserializeAction(sa);
        target=handle.getTargetWindow();
        sa=handler.getURL(new IAction(){
          public int getType(){
            if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType()))             return IAction.ACTION_HYPERLINK;
            if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))             return IAction.ACTION_BOOKMARK;
            if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(handle.getLinkType()))             return IAction.ACTION_DRILLTHROUGH;
            return 0;
          }
          public String getBookmark(){
            return handle.getTargetBookmark();
          }
          public String getActionString(){
            if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType()))             return handle.getURI();
            if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))             return handle.getTargetBookmark();
            return null;
          }
          public String getReportName(){
            return handle.getReportName();
          }
          public Map getParameterBindings(){
            Map map=new HashMap();
            for (Iterator itr=handle.getParamBindings().iterator(); itr.hasNext(); ) {
              ParamBindingHandle pbh=(ParamBindingHandle)itr.next();
              map.put(pbh.getParamName(),pbh.getExpression());
            }
            return map;
          }
          public Map getSearchCriteria(){
            Map map=new HashMap();
            for (Iterator itr=handle.getSearch().iterator(); itr.hasNext(); ) {
              SearchKeyHandle skh=(SearchKeyHandle)itr.next();
              map.put(skh.getExpression(),skh.getExpression());
            }
            return map;
          }
          public String getTargetWindow(){
            return handle.getTargetWindow();
          }
          public String getFormat(){
            return handle.getFormatType();
          }
        }
,context);
      }
 catch (      Exception e) {
        sa=""String_Node_Str"";
        logger.log(e);
      }
    }
    uv.setBaseUrl(sa);
    uv.setTarget(target);
  }
}",0.9865580448065172
78763,"/** 
 * The constructor.
 * @param handler
 */
public BIRTActionRenderer(IHTMLActionHandler handler,Object context){
  this.handler=handler;
  this.context=context;
}","/** 
 * The constructor.
 * @param handler
 */
public BIRTActionRenderer(IHTMLActionHandler handler,Object context){
  this.handler=handler;
  this.context=((IReportContext)context).getAppContext().get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
}",0.7607655502392344
78764,"public void handleEvent(Event event){
  if (event.widget.equals(txtTitle)) {
    seriesDefn.getDesignTimeSeries().setSeriesIdentifier(txtTitle.getText());
  }
}","public void handleEvent(Event event){
  if (event.widget.equals(txtTitle)) {
    seriesDefn.getDesignTimeSeries().setSeriesIdentifier(txtTitle.getValue(txtTitle.getText()));
  }
}",0.943952802359882
78765,"/** 
 * Gets all the data source binding to report element.
 * @return
 */
public List getDataSources(){
  return getModuleHandle().getAllDataSources();
}","/** 
 * Gets all the data source binding to report element.
 * @return
 */
public List getDataSources(){
  return getModuleHandle().getVisibleDataSources();
}",0.9743589743589745
78766,"public static List getDataSets(){
  return SessionHandleAdapter.getInstance().getReportDesignHandle().getAllDataSets();
}","public static List getDataSets(){
  return SessionHandleAdapter.getInstance().getReportDesignHandle().getVisibleDataSets();
}",0.967479674796748
78767,"public static List getDataSources(){
  return SessionHandleAdapter.getInstance().getReportDesignHandle().getAllDataSources();
}","public static List getDataSources(){
  return SessionHandleAdapter.getInstance().getReportDesignHandle().getVisibleDataSources();
}",0.9689922480620154
78768,"protected boolean calculateEnabled(){
  return !SessionHandleAdapter.getInstance().getReportDesignHandle().getAllDataSets().isEmpty();
}","protected boolean calculateEnabled(){
  return !SessionHandleAdapter.getInstance().getReportDesignHandle().getVisibleDataSets().isEmpty();
}",0.9710144927536232
78769,"private void updateButtons(){
  boolean complete=false;
switch (selectedType) {
case BLOB_TYPE:
    complete=!StringUtil.isBlank(uriEditor.getText());
  previewButton.setEnabled(false);
if (SessionHandleAdapter.getInstance().getReportDesignHandle().getAllDataSets().isEmpty()) {
  bindingButton.setEnabled(false);
}
 else {
  bindingButton.setEnabled(true);
}
break;
case URI_TYPE:
complete=!StringUtil.isBlank(uriEditor.getText());
previewButton.setEnabled(complete);
break;
case EMBEDDED_TYPE:
complete=(embeddedImageList.getSelectionCount() > 0);
break;
}
getOkButton().setEnabled(complete);
}","private void updateButtons(){
  boolean complete=false;
switch (selectedType) {
case BLOB_TYPE:
    complete=!StringUtil.isBlank(uriEditor.getText());
  previewButton.setEnabled(false);
if (SessionHandleAdapter.getInstance().getReportDesignHandle().getVisibleDataSets().isEmpty()) {
  bindingButton.setEnabled(false);
}
 else {
  bindingButton.setEnabled(true);
}
break;
case URI_TYPE:
complete=!StringUtil.isBlank(uriEditor.getText());
previewButton.setEnabled(complete);
break;
case EMBEDDED_TYPE:
complete=(embeddedImageList.getSelectionCount() > 0);
break;
}
getOkButton().setEnabled(complete);
}",0.991638795986622
78770,"private void refreshDataSets(){
  String selectedDataSetName=dataSetChooser.getText();
  String[] oldList=dataSetChooser.getItems();
  ArrayList avaiableList=new ArrayList();
  for (Iterator iter=SessionHandleAdapter.getInstance().getReportDesignHandle().getAllDataSets().iterator(); iter.hasNext(); ) {
    DataSetHandle dataSet=(DataSetHandle)iter.next();
    if (!dataSet.parametersIterator().hasNext()) {
      avaiableList.add(dataSet.getQualifiedName());
    }
  }
  String[] newList=(String[])avaiableList.toArray(new String[]{});
  if (oldList.length != newList.length) {
    dataSetChooser.setItems(newList);
    if (StringUtil.isBlank(selectedDataSetName)) {
      dataSetChooser.select(0);
      refreshColumns(false);
    }
 else {
      dataSetChooser.setText(selectedDataSetName);
    }
  }
}","private void refreshDataSets(){
  String selectedDataSetName=dataSetChooser.getText();
  String[] oldList=dataSetChooser.getItems();
  ArrayList avaiableList=new ArrayList();
  for (Iterator iter=SessionHandleAdapter.getInstance().getReportDesignHandle().getVisibleDataSets().iterator(); iter.hasNext(); ) {
    DataSetHandle dataSet=(DataSetHandle)iter.next();
    if (!dataSet.parametersIterator().hasNext()) {
      avaiableList.add(dataSet.getQualifiedName());
    }
  }
  String[] newList=(String[])avaiableList.toArray(new String[]{});
  if (oldList.length != newList.length) {
    dataSetChooser.setItems(newList);
    if (StringUtil.isBlank(selectedDataSetName)) {
      dataSetChooser.select(0);
      refreshColumns(false);
    }
 else {
      dataSetChooser.setText(selectedDataSetName);
    }
  }
}",0.9938118811881188
78771,"private void switchToList(){
  createLabel(valueArea,LABEL_VALUES);
  Composite tableArea=new Composite(valueArea,SWT.NONE);
  tableArea.setLayout(UIUtil.createGridLayoutWithoutMargin());
  tableArea.setLayoutData(new GridData(GridData.FILL_BOTH));
  Table table=new Table(tableArea,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER);
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addKeyListener(new KeyAdapter(){
    /** 
 * @see org.eclipse.swt.events.KeyAdapter#keyReleased(org.eclipse.swt.events.KeyEvent)
 */
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        deleteRow();
      }
    }
  }
);
  String[] columns;
  int[] columnWidth;
  CellEditor[] cellEditors;
  columns=new String[]{null,COLUMN_IS_DEFAULT,COLUMN_VALUE,COLUMN_DISPLAY_TEXT};
  columnWidth=new int[]{20,70,145,145};
  cellEditors=new CellEditor[]{null,null,new TextCellEditor(table),new TextCellEditor(table)};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null && !COLUMN_IS_DEFAULT.equals(columns[i]));
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  valueTable=new TableViewer(table);
  valueTable.setCellEditors(cellEditors);
  valueTable.setColumnProperties(columns);
  valueTable.setContentProvider(contentProvider);
  valueTable.setLabelProvider(labelProvider);
  valueTable.setCellModifier(cellModifier);
  valueTable.setInput(choiceList);
  valueTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateTableButtons();
    }
  }
);
  Composite buttonBar=new Composite(tableArea,SWT.NONE);
  buttonBar.setLayout(UIUtil.createGridLayoutWithoutMargin(4,false));
  buttonBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  importValue=new Button(buttonBar,SWT.PUSH);
  importValue.setText(BUTTON_LABEL_IMPORT);
  setButtonLayoutData(importValue);
  importValue.setEnabled(!inputParameter.getModuleHandle().getAllDataSets().isEmpty());
  importValue.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String type=getSelectedDataType();
      ImportValueDialog dialog=new ImportValueDialog(type);
      if (dialog.open() == OK) {
        String[] importValues=(String[])dialog.getResult();
        for (int i=0; i < importValues.length; i++) {
          if (!containValue(null,importValues[i],COLUMN_VALUE)) {
            SelectionChoice choice=StructureFactory.createSelectionChoice();
            choice.setValue(importValues[i]);
            choiceList.add(choice);
          }
        }
        refreshValueTable();
      }
    }
  }
);
  changeDefault=new Button(buttonBar,SWT.TOGGLE);
  changeDefault.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      SelectionChoice choice=(SelectionChoice)((IStructuredSelection)valueTable.getSelection()).getFirstElement();
      if (isDefaultChoice(choice)) {
        defaultValue=null;
      }
 else {
        defaultValue=choice.getValue();
      }
      refreshValueTable();
      updateMessageLine();
      updateButtons();
    }
  }
);
  delete=new Button(buttonBar,SWT.PUSH);
  delete.setText(BUTTON_LABEL_DELETE);
  setButtonLayoutData(delete);
  delete.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      deleteRow();
    }
  }
);
  createPromptLine(tableArea);
  updateTableButtons();
}","private void switchToList(){
  createLabel(valueArea,LABEL_VALUES);
  Composite tableArea=new Composite(valueArea,SWT.NONE);
  tableArea.setLayout(UIUtil.createGridLayoutWithoutMargin());
  tableArea.setLayoutData(new GridData(GridData.FILL_BOTH));
  Table table=new Table(tableArea,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER);
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addKeyListener(new KeyAdapter(){
    /** 
 * @see org.eclipse.swt.events.KeyAdapter#keyReleased(org.eclipse.swt.events.KeyEvent)
 */
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        deleteRow();
      }
    }
  }
);
  String[] columns;
  int[] columnWidth;
  CellEditor[] cellEditors;
  columns=new String[]{null,COLUMN_IS_DEFAULT,COLUMN_VALUE,COLUMN_DISPLAY_TEXT};
  columnWidth=new int[]{20,70,145,145};
  cellEditors=new CellEditor[]{null,null,new TextCellEditor(table),new TextCellEditor(table)};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(columns[i] != null && !COLUMN_IS_DEFAULT.equals(columns[i]));
    if (columns[i] != null) {
      column.setText(columns[i]);
    }
    column.setWidth(columnWidth[i]);
  }
  valueTable=new TableViewer(table);
  valueTable.setCellEditors(cellEditors);
  valueTable.setColumnProperties(columns);
  valueTable.setContentProvider(contentProvider);
  valueTable.setLabelProvider(labelProvider);
  valueTable.setCellModifier(cellModifier);
  valueTable.setInput(choiceList);
  valueTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateTableButtons();
    }
  }
);
  Composite buttonBar=new Composite(tableArea,SWT.NONE);
  buttonBar.setLayout(UIUtil.createGridLayoutWithoutMargin(4,false));
  buttonBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  importValue=new Button(buttonBar,SWT.PUSH);
  importValue.setText(BUTTON_LABEL_IMPORT);
  setButtonLayoutData(importValue);
  importValue.setEnabled(!inputParameter.getModuleHandle().getVisibleDataSets().isEmpty());
  importValue.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String type=getSelectedDataType();
      ImportValueDialog dialog=new ImportValueDialog(type);
      if (dialog.open() == OK) {
        String[] importValues=(String[])dialog.getResult();
        for (int i=0; i < importValues.length; i++) {
          if (!containValue(null,importValues[i],COLUMN_VALUE)) {
            SelectionChoice choice=StructureFactory.createSelectionChoice();
            choice.setValue(importValues[i]);
            choiceList.add(choice);
          }
        }
        refreshValueTable();
      }
    }
  }
);
  changeDefault=new Button(buttonBar,SWT.TOGGLE);
  changeDefault.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      SelectionChoice choice=(SelectionChoice)((IStructuredSelection)valueTable.getSelection()).getFirstElement();
      if (isDefaultChoice(choice)) {
        defaultValue=null;
      }
 else {
        defaultValue=choice.getValue();
      }
      refreshValueTable();
      updateMessageLine();
      updateButtons();
    }
  }
);
  delete=new Button(buttonBar,SWT.PUSH);
  delete.setText(BUTTON_LABEL_DELETE);
  setButtonLayoutData(delete);
  delete.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      deleteRow();
    }
  }
);
  createPromptLine(tableArea);
  updateTableButtons();
}",0.9986282578875172
78772,"/** 
 * Gets all the DataSets available.
 * @return A String array contains all the DataSets.
 */
public static String[] getDataSets(){
  ArrayList list=new ArrayList();
  ModuleHandle handle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  for (Iterator iterator=handle.getAllDataSets().iterator(); iterator.hasNext(); ) {
    DataSetHandle DataSetHandle=(DataSetHandle)iterator.next();
    list.add(DataSetHandle.getQualifiedName());
  }
  return (String[])list.toArray(new String[0]);
}","/** 
 * Gets all the DataSets available.
 * @return A String array contains all the DataSets.
 */
public static String[] getDataSets(){
  ArrayList list=new ArrayList();
  ModuleHandle handle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  for (Iterator iterator=handle.getVisibleDataSets().iterator(); iterator.hasNext(); ) {
    DataSetHandle DataSetHandle=(DataSetHandle)iterator.next();
    list.add(DataSetHandle.getQualifiedName());
  }
  return (String[])list.toArray(new String[0]);
}",0.9900793650793652
78773,"/** 
 * Returns all data source handles that this modules and the included modules contain.
 * @return all data source handles that this modules and the includedmodules contain.
 */
public List getAllDataSources(){
  List elementList=module.getNameSpace(Module.DATA_SOURCE_NAME_SPACE).getElements();
  return generateHandleList(elementList);
}","/** 
 * Returns all data source handles that this modules and the included modules contain.
 * @return all data source handles that this modules and the includedmodules contain.
 */
public List getAllDataSources(){
  IModuleNameSpace namescope=module.getModuleNameSpace(Module.DATA_SOURCE_NAME_SPACE);
  List elementList=namescope.getElements();
  return generateHandleList(elementList);
}",0.8934426229508197
78774,"/** 
 * Returns all data set handles that this modules and the included modules contain.
 * @return all data set handles that this modules and the included modulescontain.
 */
public List getAllDataSets(){
  List elementList=module.getNameSpace(Module.DATA_SET_NAME_SPACE).getElements();
  return generateHandleList(elementList);
}","/** 
 * Returns all data set handles that this modules and the included modules contain.
 * @return all data set handles that this modules and the included modulescontain.
 */
public List getAllDataSets(){
  IModuleNameSpace namescope=module.getModuleNameSpace(Module.DATA_SET_NAME_SPACE);
  List elementList=namescope.getElements();
  return generateHandleList(elementList);
}",0.8898305084745762
78775,"/** 
 * Resolves element with the given element name and name space.
 * @param elementName name of the element
 * @param nameSpace name space
 * @return the resolved element if the name can be resolved, otherwise,return null.
 */
private DesignElement resolveNativeElement(String elementName,int nameSpace){
  ElementRefValue refValue=moduleNameSpaces[nameSpace].resolve(elementName,null);
  return refValue.getElement();
}","/** 
 * Resolves element with the given element name and name space.
 * @param elementName name of the element
 * @param nameSpace name space
 * @return the resolved element if the name can be resolved, otherwise,return null.
 */
private DesignElement resolveNativeElement(String elementName,int nameSpace){
  NameSpace namespace=nameSpaces[nameSpace];
  return namespace.getElement(elementName);
}",0.8112058465286236
78776,"/** 
 * Finds a data set by name in this module and the included modules.
 * @param name the name of the data set to find.
 * @return the data set, or null if the data set is not found.
 */
public DesignElement findDataSet(String name){
  return findElementInLibraries(name,DATA_SET_NAME_SPACE);
}","/** 
 * Finds a data set by name in this module and the included modules.
 * @param name the name of the data set to find.
 * @return the data set, or null if the data set is not found.
 */
public DesignElement findDataSet(String name){
  return resolveElement(name,DATA_SET_NAME_SPACE,null);
}",0.9306260575296108
78777,"/** 
 * Finds a data source by name in this module and the included modules.
 * @param name the name of the data source to find.
 * @return the data source, or null if the data source is not found.
 */
public DesignElement findDataSource(String name){
  return findElementInLibraries(name,DATA_SOURCE_NAME_SPACE);
}","/** 
 * Finds a data source by name in this module and the included modules.
 * @param name the name of the data source to find.
 * @return the data source, or null if the data source is not found.
 */
public DesignElement findDataSource(String name){
  return resolveElement(name,DATA_SOURCE_NAME_SPACE,null);
}",0.934609250398724
78778,"/** 
 * Resolves an element reference. Look up the name in the name space of the target element type. If the target is found, replace the element name with the cached element.
 * @param module the report design
 * @param defn the definition of the element ref property
 * @param ref the element reference
 */
public void resolve(Module module,PropertyDefn defn,ElementRefValue ref){
  if (ref.isResolved())   return;
  ElementDefn targetDefn=(ElementDefn)defn.getTargetElementType();
  IModuleNameSpace elementResolver=module.getModuleNameSpace(targetDefn.getNameSpaceID());
  String name=ReferenceValueUtil.needTheNamespacePrefix(ref,null,module);
  DesignElement target=null;
  target=elementResolver.resolve(name,defn).getElement();
  if (target != null)   ref.resolve(target);
}","/** 
 * Resolves an element reference. Look up the name in the name space of the target element type. If the target is found, replace the element name with the cached element.
 * @param module the report design
 * @param defn the definition of the element ref property
 * @param ref the element reference
 */
public void resolve(Module module,PropertyDefn defn,ElementRefValue ref){
  if (ref.isResolved())   return;
  ElementDefn targetDefn=(ElementDefn)defn.getTargetElementType();
  IModuleNameSpace elementResolver=module.getModuleNameSpace(targetDefn.getNameSpaceID());
  String name=ReferenceValueUtil.needTheNamespacePrefix(ref,module);
  DesignElement target=null;
  target=elementResolver.resolve(name,defn).getElement();
  if (target != null)   ref.resolve(target);
}",0.9967928159076332
78779,"/** 
 * Resolves a structure reference. Look up the name in the report design. If the target is found, replace the structure name with the cached structure.
 * @param module the report design
 * @param defn the definition of the structure ref property
 * @param ref the structure reference
 */
public void resolve(Module module,PropertyDefn defn,StructRefValue ref){
}","/** 
 * Resolves a structure reference. Look up the name in the report design. If the target is found, replace the structure name with the cached structure.
 * @param module the report design
 * @param defn the definition of the structure ref property
 * @param ref the structure reference
 */
public void resolve(Module module,PropertyDefn defn,StructRefValue ref){
  if (ref.isResolved() || module == null)   return;
  StructureDefn targetDefn=(StructureDefn)defn.getStructDefn();
  Structure target=null;
  Module targetModule=null;
  if (ReferencableStructure.LIB_REFERENCE_MEMBER.equals(defn.getName())) {
    String namespace=ref.getLibraryNamespace();
    targetModule=module.getLibraryWithNamespace(namespace);
    if (targetModule != null) {
      target=StructureRefUtil.findStructure(targetModule,targetDefn,ref.getName());
      if (target != null)       ref.resolve(target);
    }
  }
 else {
    StructRefValue retValue=StructureRefUtil.resolve(module,defn,ReferenceValueUtil.needTheNamespacePrefix(ref,module));
    target=retValue.getStructure();
    ref.libraryNamespace=retValue.getLibraryNamespace();
    ref.name=retValue.getName();
    if (target != null)     ref.resolve(target);
  }
}",0.4673015873015873
78780,"public static void handleOnRender(TableContent content,IRowData rowData,ExecutionContext context){
  try {
    ReportItemDesign gridDesign=(ReportItemDesign)content.getGenerateBy();
    IGridInstance grid=new GridInstance(content);
    if (handleJS(grid,gridDesign.getOnRender(),context).didRun())     return;
    IGridEventHandler eh=(IGridEventHandler)getInstance((GridHandle)gridDesign.getHandle());
    if (eh != null)     eh.onRender(grid,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}","public static void handleOnRender(TableContent content,ExecutionContext context){
  try {
    ReportItemDesign gridDesign=(ReportItemDesign)content.getGenerateBy();
    IGridInstance grid=new GridInstance(content);
    if (handleJS(grid,gridDesign.getOnRender(),context).didRun())     return;
    IGridEventHandler eh=(IGridEventHandler)getInstance((GridHandle)gridDesign.getHandle());
    if (eh != null)     eh.onRender(grid,context.getReportContext());
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.getMessage(),e);
  }
}",0.984360625574977
78781,"/** 
 * Sets the cell's row span. This is the number of table or grid rows occupied by this cell.
 * @param span the row span
 * @throws SemanticException if this property is locked.
 */
public void setRowSpan(int span) throws ScriptException {
  try {
    ((CellHandle)handle).setRowSpan(span);
  }
 catch (  SemanticException e) {
    throw new ScriptException(e.getLocalizedMessage());
  }
}","/** 
 * Sets the cell's row span. This is the number of table or grid rows occupied by this cell.
 * @param span the row span
 * @throws ScriptException if this property is locked.
 */
public void setRowSpan(int span) throws ScriptException {
  try {
    ((CellHandle)handle).setRowSpan(span);
  }
 catch (  SemanticException e) {
    throw new ScriptException(e.getLocalizedMessage());
  }
}",0.9847328244274808
78782,"/** 
 * Sets the cell's column property. The input value gives the column in which the cell starts. Columns are numbered from 1.
 * @param column the column index, starting from 1.
 * @throws SemanticException if this property is locked.
 */
public void setColumn(int column) throws ScriptException {
  try {
    ((CellHandle)handle).setColumn(column);
  }
 catch (  SemanticException e) {
    throw new ScriptException(e.getLocalizedMessage());
  }
}","/** 
 * Sets the cell's column property. The input value gives the column in which the cell starts. Columns are numbered from 1.
 * @param column the column index, starting from 1.
 * @throws ScriptException if this property is locked.
 */
public void setColumn(int column) throws ScriptException {
  try {
    ((CellHandle)handle).setColumn(column);
  }
 catch (  SemanticException e) {
    throw new ScriptException(e.getLocalizedMessage());
  }
}",0.9866666666666668
78783,"/** 
 * Sets the cell's column span. This is the number of table or grid columns occupied by this cell.
 * @param span the column span
 * @throws SemanticException if this property is locked.
 */
public void setColumnSpan(int span) throws ScriptException {
  try {
    ((CellHandle)handle).setColumnSpan(span);
  }
 catch (  SemanticException e) {
    throw new ScriptException(e.getLocalizedMessage());
  }
}","/** 
 * Sets the cell's column span. This is the number of table or grid columns occupied by this cell.
 * @param span the column span
 * @throws ScriptException if this property is locked.
 */
public void setColumnSpan(int span) throws ScriptException {
  try {
    ((CellHandle)handle).setColumnSpan(span);
  }
 catch (  SemanticException e) {
    throw new ScriptException(e.getLocalizedMessage());
  }
}",0.9852941176470588
78784,"/** 
 * Sets the cell's drop property. The input value is defined in <code>DesignChoiceConstants</code> and can be one of: <ul> <li>DROP_TYPE_NONE</li> <li>DROP_TYPE_DETAIL</li> <li>DROP_TYPE_ALL</li> </ul> <p> Note that This property is valid only for cells within a table; but not for cells within a grid.
 * @param drop the string value of the drop property
 * @throws SemanticException if the property is locked or the input value is not one of the above.
 * @see #getDrop()
 */
public void setDrop(String drop) throws ScriptException {
  try {
    ((CellHandle)handle).setDrop(drop);
  }
 catch (  SemanticException e) {
    throw new ScriptException(e.getLocalizedMessage());
  }
}","/** 
 * Sets the cell's drop property. The input value is defined in <code>DesignChoiceConstants</code> and can be one of: <ul> <li>DROP_TYPE_NONE</li> <li>DROP_TYPE_DETAIL</li> <li>DROP_TYPE_ALL</li> </ul> <p> Note that This property is valid only for cells within a table; but not for cells within a grid.
 * @param drop the string value of the drop property
 * @throws ScriptException if the property is locked or the input value is not one of the above.
 * @see #getDrop()
 */
public void setDrop(String drop) throws ScriptException {
  try {
    ((CellHandle)handle).setDrop(drop);
  }
 catch (  SemanticException e) {
    throw new ScriptException(e.getLocalizedMessage());
  }
}",0.9912536443148688
78785,"public void activate(){
  HandleAdapterFactory.getInstance().getLibraryHandleAdapter((LibraryHandle)getModel()).addPropertyChangeListener(this);
  super.activate();
}","public void activate(){
  HandleAdapterFactory.getInstance().getLibraryHandleAdapter(getModel()).addPropertyChangeListener(this);
  super.activate();
}",0.9526813880126184
78786,"public void propertyChange(PropertyChangeEvent evt){
  if (evt.getPropertyName().equals(LibraryHandleAdapter.CURRENTMODEL)) {
    refresh();
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        final List mediatorSelection=SessionHandleAdapter.getInstance().getMediator().getCurrentState().getSelectionObject();
        if (mediatorSelection.size() == 1 && mediatorSelection.get(0) instanceof LibraryHandle) {
          return;
        }
        List list=getChildren();
        EditPartViewer viewer=getViewer();
        if (viewer instanceof DeferredGraphicalViewer) {
          ((DeferredGraphicalViewer)viewer).setSelection(new StructuredSelection(list),false);
        }
      }
    }
);
  }
}","public void propertyChange(final PropertyChangeEvent evt){
  if (evt.getPropertyName().equals(LibraryHandleAdapter.CURRENTMODEL)) {
    refresh();
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        Object model=evt.getNewValue();
        Object editpart=getViewer().getEditPartRegistry().get(model);
        if (editpart instanceof EditPart) {
          getViewer().flush();
          getViewer().select((EditPart)editpart);
        }
        if (editpart != null) {
          getViewer().reveal((EditPart)editpart);
        }
      }
    }
);
  }
}",0.4774980930587338
78787,"public void run(){
  final List mediatorSelection=SessionHandleAdapter.getInstance().getMediator().getCurrentState().getSelectionObject();
  if (mediatorSelection.size() == 1 && mediatorSelection.get(0) instanceof LibraryHandle) {
    return;
  }
  List list=getChildren();
  EditPartViewer viewer=getViewer();
  if (viewer instanceof DeferredGraphicalViewer) {
    ((DeferredGraphicalViewer)viewer).setSelection(new StructuredSelection(list),false);
  }
}","public void run(){
  Object model=evt.getNewValue();
  Object editpart=getViewer().getEditPartRegistry().get(model);
  if (editpart instanceof EditPart) {
    getViewer().flush();
    getViewer().select((EditPart)editpart);
  }
  if (editpart != null) {
    getViewer().reveal((EditPart)editpart);
  }
}",0.1686429512516469
78788,"public void deactivate(){
  HandleAdapterFactory.getInstance().getLibraryHandleAdapter((LibraryHandle)getModel()).removePropertyChangeListener(this);
  super.deactivate();
}","public void deactivate(){
  HandleAdapterFactory.getInstance().getLibraryHandleAdapter(getModel()).removePropertyChangeListener(this);
  super.deactivate();
}",0.9546827794561934
78789,"public void visitReportDesign(ReportDesignHandle handle){
  report.setUnit(handle.getDefaultUnits());
  if (handle.getBase() != null && !handle.getBase().equals(""String_Node_Str"")) {
    report.setBasePath(handle.getBase());
  }
  defaultUnit=report.getUnit();
  setupNamedExpressions(handle.getUserProperties(),report.getNamedExpressions());
  StyleHandle defaultStyle=handle.findStyle(""String_Node_Str"");
  createReportDefaultStyles(defaultStyle);
  PageSetupDesign pageSetup=new PageSetupDesign();
  SlotHandle pageSlot=handle.getMasterPages();
  for (int i=0; i < pageSlot.getCount(); i++) {
    apply(pageSlot.get(i));
    if (currentElement != null) {
      pageSetup.addMasterPage((MasterPageDesign)currentElement);
    }
  }
  report.setPageSetup(pageSetup);
  SlotHandle bodySlot=handle.getBody();
  for (int i=0; i < bodySlot.getCount(); i++) {
    apply(bodySlot.get(i));
    if (currentElement != null) {
      report.addContent((ReportItemDesign)currentElement);
    }
  }
}","public void visitReportDesign(ReportDesignHandle handle){
  report.setUnit(handle.getDefaultUnits());
  if (handle.getBase() != null && !handle.getBase().equals(""String_Node_Str"")) {
    report.setBasePath(handle.getBase());
  }
  defaultUnit=report.getUnit();
  setupNamedExpressions(handle,report.getNamedExpressions());
  StyleHandle defaultStyle=handle.findStyle(""String_Node_Str"");
  createReportDefaultStyles(defaultStyle);
  PageSetupDesign pageSetup=new PageSetupDesign();
  SlotHandle pageSlot=handle.getMasterPages();
  for (int i=0; i < pageSlot.getCount(); i++) {
    apply(pageSlot.get(i));
    if (currentElement != null) {
      pageSetup.addMasterPage((MasterPageDesign)currentElement);
    }
  }
  report.setPageSetup(pageSetup);
  SlotHandle bodySlot=handle.getBody();
  for (int i=0; i < bodySlot.getCount(); i++) {
    apply(bodySlot.get(i));
    if (currentElement != null) {
      report.addContent((ReportItemDesign)currentElement);
    }
  }
}",0.9897645854657112
78790,"/** 
 * setup the named expression map
 * @param userProperties user defined named expressions in design file
 * @param namedExpressions the data structure that hold named expressions
 */
private void setupNamedExpressions(List userProperties,Map namedExpressions){
  if (userProperties == null || namedExpressions == null)   return;
  for (int i=0; i < userProperties.size(); i++) {
    UserPropertyDefn userDef=(UserPropertyDefn)userProperties.get(i);
    if (userDef.getTypeCode() == IPropertyType.EXPRESSION_TYPE) {
      String name=userDef.getName();
      String exprString=handle.getStringProperty(name);
      if (exprString != null && !exprString.equals(""String_Node_Str"")) {
        Expression expression=new Expression(exprString);
        namedExpressions.put(name,expression);
      }
    }
  }
}","/** 
 * setup the named expression map
 * @param userProperties user defined named expressions in design file
 * @param namedExpressions the data structure that hold named expressions
 */
private void setupNamedExpressions(DesignElementHandle handle,Map namedExpressions){
  List userProperties=handle.getUserProperties();
  if (userProperties == null || namedExpressions == null)   return;
  for (int i=0; i < userProperties.size(); i++) {
    UserPropertyDefn userDef=(UserPropertyDefn)userProperties.get(i);
    if (userDef.getTypeCode() == IPropertyType.EXPRESSION_TYPE) {
      String name=userDef.getName();
      String exprString=handle.getStringProperty(name);
      if (exprString != null && !exprString.equals(""String_Node_Str"")) {
        Expression expression=new Expression(exprString);
        namedExpressions.put(name,expression);
      }
    }
  }
}",0.94335122242099
78791,"/** 
 * Initialize tableInfos by analyzing the input string.
 * @param relationString
 * @throws OdaException 
 */
private void initialize(String relationString) throws OdaException {
  if (relationString == null || relationString.length() == 0)   throw new OdaException(""String_Node_Str"");
  String[] tables=relationString.split(CONST_TABLE_DELIMITER);
  for (int i=0; i < tables.length; i++) {
    String[] temp=tables[i].trim().split(CONST_TABLE_COLUMN_DELIMITER);
    assert(temp.length == 3);
    TableInfo tableInfo=new TableInfo(temp[0].trim(),temp[1].substring(1,temp[1].length() - 1).trim());
    String[] columns=temp[2].trim().split(CONST_COLUMN_DELIMITER);
    for (int j=0; j < columns.length; j++) {
      String trimedColumn=columns[j].trim();
      String[] columnInfos=trimedColumn.substring(1,trimedColumn.length() - 1).split(CONST_COLUMN_METAINFO_DELIMITER);
      String columnXpath=null;
      if (columnInfos.length == 3) {
        columnXpath=columnInfos[2];
      }
 else {
        columnXpath=""String_Node_Str"";
      }
      for (int m=0; m < columnInfos.length; m++)       columnInfos[m]=columnInfos[m].trim();
      if (columnXpath.matches(""String_Node_Str"")) {
        String value=columnXpath.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
        value=value.substring(1,value.length() - 2);
        tableInfo.addFilter(columnInfos[0],value);
        columnXpath=columnXpath.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      tableInfo.addColumn(new ColumnInfo(j + 1,columnInfos[0],columnInfos[1],combineColumnPath(tableInfo.getRootPath(),columnXpath),columnXpath));
    }
    this.tableInfos.put(temp[0].trim(),tableInfo);
  }
}","/** 
 * Initialize tableInfos by analyzing the input string.
 * @param relationString
 * @throws OdaException 
 */
private void initialize(String relationString) throws OdaException {
  if (relationString == null || relationString.length() == 0)   throw new OdaException(""String_Node_Str"");
  String[] tables=relationString.split(CONST_TABLE_DELIMITER);
  for (int i=0; i < tables.length; i++) {
    String[] temp=tables[i].trim().split(CONST_TABLE_COLUMN_DELIMITER);
    assert(temp.length == 3);
    TableInfo tableInfo=new TableInfo(temp[0].trim(),temp[1].substring(1,temp[1].length() - 1).trim());
    String[] columns=temp[2].trim().split(CONST_COLUMN_DELIMITER);
    for (int j=0; j < columns.length; j++) {
      String trimedColumn=columns[j].trim();
      String[] columnInfos=trimedColumn.substring(1,trimedColumn.length() - 1).split(CONST_COLUMN_METAINFO_DELIMITER);
      String columnXpath=null;
      if (columnInfos.length == 3) {
        columnXpath=columnInfos[2];
      }
 else {
        columnXpath=""String_Node_Str"";
      }
      for (int m=0; m < columnInfos.length; m++)       columnInfos[m]=columnInfos[m].trim();
      String originalColumnXpath=columnXpath;
      if (columnXpath.matches(""String_Node_Str"")) {
        String value=columnXpath.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
        value=value.substring(1,value.length() - 2);
        tableInfo.addFilter(columnInfos[0],value);
        columnXpath=columnXpath.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      tableInfo.addColumn(new ColumnInfo(j + 1,columnInfos[0],columnInfos[1],combineColumnPath(tableInfo.getRootPath(),columnXpath),originalColumnXpath));
    }
    this.tableInfos.put(temp[0].trim(),tableInfo);
  }
}",0.9836065573770492
78792,"/** 
 * Get the right border width.
 */
public String getBorderRightWidth(){
  return style.getBorderBottomWidth();
}","/** 
 * Get the right border width.
 */
public String getBorderRightWidth(){
  return style.getBorderRightWidth();
}",0.96137339055794
78793,"/** 
 * @param index
 * @param name
 * @param type
 * @param path
 * @param originalPath
 * @throws OdaException
 */
public ColumnInfo(int index,String name,String type,String path,String originalPath) throws OdaException {
  this.index=index;
  this.name=name;
  this.type=type;
  if (!DataTypes.isValidType(type))   throw new OdaException(""String_Node_Str"");
  this.path=fixTrailingAttr(buildPath(path));
  this.originalPath=originalPath;
}","/** 
 * @param index
 * @param name
 * @param type
 * @param path
 * @param originalPath
 * @throws OdaException
 */
public ColumnInfo(int index,String name,String type,String path,String originalPath) throws OdaException {
  this.index=index;
  this.name=name;
  this.type=type;
  if (!DataTypes.isValidType(type))   throw new OdaException(""String_Node_Str"");
  this.path=fixTrailingAttr(buildPath(path));
  this.originalPath=originalPath;
  String[] originalPathFrags=originalPath.split(""String_Node_Str"");
  int lastTwoDotAbbrevationPosition=0;
  int numberOfConcretePathFragsBefore2DotAbb=0;
  for (int i=0; i < originalPathFrags.length; i++) {
    if (originalPathFrags[i].equals(""String_Node_Str""))     lastTwoDotAbbrevationPosition=i;
  }
  for (int i=0; i < lastTwoDotAbbrevationPosition; i++) {
    if (!originalPathFrags[i].equals(""String_Node_Str""))     numberOfConcretePathFragsBefore2DotAbb++;
  }
  int numberOf2DotAbb=lastTwoDotAbbrevationPosition - numberOfConcretePathFragsBefore2DotAbb + 1;
  backRefNumber=numberOf2DotAbb - numberOfConcretePathFragsBefore2DotAbb;
  if (backRefNumber < 0)   backRefNumber=0;
}",0.5630573248407643
78794,"public void run(){
  XMLReader xr;
  try {
    xr=new SAXParser();
    xr.setContentHandler(this);
    xr.setErrorHandler(this);
    URL url=null;
    Reader file=null;
    try {
      File f=new File(xmlFile);
      url=f.toURL();
      file=new InputStreamReader(url.openStream());
    }
 catch (    IOException e) {
      url=null;
    }
    if (url == null) {
      url=new URL(xmlFile);
    }
    file=new InputStreamReader(url.openStream());
    xr.parse(new InputSource(file));
  }
 catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  MalformedURLException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    this.alive=false;
    spConsumer.wakeup();
  }
}","public void run(){
  XMLReader xr;
  try {
    xr=new SAXParser();
    xr.setContentHandler(this);
    xr.setErrorHandler(this);
    URL url=null;
    Reader file=null;
    try {
      File f=new File(xmlFile);
      url=f.toURL();
      file=new InputStreamReader(url.openStream());
    }
 catch (    IOException e) {
      url=null;
    }
    if (url == null) {
      url=new URL(xmlFile);
    }
    InputStream is=getInputStream(url);
    file=new InputStreamReader(is);
    xr.parse(new InputSource(file));
  }
 catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  MalformedURLException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    this.alive=false;
    spConsumer.wakeup();
  }
}",0.9609164420485176
78795,"/** 
 * The second step to work with the cascading parameters. Get the selection choices for a parameter in the cascading group. The parameter to work on is the parameter on the next level in the parameter cascading hierarchy. For the ""parameter to work on"", please see the following example. Assume we have a cascading parameter group as Country - State - City. If user specified an empty array in groupKeyValues (meaning user doesn't have any parameter value), the parameter to work on will be the first level which is Country in this case. If user specified groupKeyValues as Object[]{""USA""} (meaning user has set the value of the top level), the parameter to work on will be the second level which is State in ""USA"" in this case. If user specified groupKeyValues as Object[]{""USA"", ""CA""} (meaning user has set the values of the top and the second level), the parameter to work on will be the third level which is City in ""USA, CA"" in this case.
 * @param parameterGroupName -the cascading parameter group name
 * @param groupKeyValues -the array of known parameter values (see the example above)
 * @return the selection list of the parameter to work on
 */
public Collection getSelectionListForCascadingGroup(String parameterGroupName,Object[] groupKeyValues){
  CascadingParameterGroupHandle parameterGroup=getCascadingParameterGroup(parameterGroupName);
  if (parameterGroup == null)   return null;
  IResultIterator iter=(IResultIterator)dataCache.get(parameterGroup.getName());
  if (iter == null)   return null;
  SlotHandle slotHandle=parameterGroup.getParameters();
  assert(groupKeyValues.length < slotHandle.getCount());
  int skipLevel=groupKeyValues.length + 1;
  ScalarParameterHandle requestedParam=(ScalarParameterHandle)slotHandle.get(groupKeyValues.length);
  int listLimit=requestedParam.getListlimit();
  boolean fixedOrder=requestedParam.isFixedOrder();
  ScriptExpression labelExpr=(ScriptExpression)labelMap.get(parameterGroup.getName() + ""String_Node_Str"" + requestedParam.getName());
  ScriptExpression valueExpr=(ScriptExpression)valueMap.get(parameterGroup.getName() + ""String_Node_Str"" + requestedParam.getName());
  ArrayList choices=new ArrayList();
  try {
    if (skipLevel > 1)     iter.findGroup(groupKeyValues);
    int startGroupLevel=skipLevel - 1;
    int count=0;
    while (iter.next()) {
      String label=(labelExpr != null ? iter.getString(labelExpr) : null);
      Object value=iter.getValue(valueExpr);
      choices.add(new SelectionChoice(label,value));
      count++;
      if ((listLimit != 0) && (count >= listLimit))       break;
      iter.skipToEnd(skipLevel);
      int endGroupLevel=iter.getEndingGroupLevel();
      if (endGroupLevel <= startGroupLevel) {
        break;
      }
    }
  }
 catch (  BirtException e) {
    e.printStackTrace();
  }
  if (!fixedOrder)   Collections.sort(choices,new SelectionChoiceComparator(true));
  return choices;
}","/** 
 * The second step to work with the cascading parameters. Get the selection choices for a parameter in the cascading group. The parameter to work on is the parameter on the next level in the parameter cascading hierarchy. For the ""parameter to work on"", please see the following example. Assume we have a cascading parameter group as Country - State - City. If user specified an empty array in groupKeyValues (meaning user doesn't have any parameter value), the parameter to work on will be the first level which is Country in this case. If user specified groupKeyValues as Object[]{""USA""} (meaning user has set the value of the top level), the parameter to work on will be the second level which is State in ""USA"" in this case. If user specified groupKeyValues as Object[]{""USA"", ""CA""} (meaning user has set the values of the top and the second level), the parameter to work on will be the third level which is City in ""USA, CA"" in this case.
 * @param parameterGroupName -the cascading parameter group name
 * @param groupKeyValues -the array of known parameter values (see the example above)
 * @return the selection list of the parameter to work on
 */
public Collection getSelectionListForCascadingGroup(String parameterGroupName,Object[] groupKeyValues){
  CascadingParameterGroupHandle parameterGroup=getCascadingParameterGroup(parameterGroupName);
  if (parameterGroup == null)   return Collections.EMPTY_LIST;
  IResultIterator iter=(IResultIterator)dataCache.get(parameterGroup.getName());
  if (iter == null)   return Collections.EMPTY_LIST;
  SlotHandle slotHandle=parameterGroup.getParameters();
  assert(groupKeyValues.length < slotHandle.getCount());
  int skipLevel=groupKeyValues.length + 1;
  ScalarParameterHandle requestedParam=(ScalarParameterHandle)slotHandle.get(groupKeyValues.length);
  int listLimit=requestedParam.getListlimit();
  boolean fixedOrder=requestedParam.isFixedOrder();
  ScriptExpression labelExpr=(ScriptExpression)labelMap.get(parameterGroup.getName() + ""String_Node_Str"" + requestedParam.getName());
  ScriptExpression valueExpr=(ScriptExpression)valueMap.get(parameterGroup.getName() + ""String_Node_Str"" + requestedParam.getName());
  ArrayList choices=new ArrayList();
  try {
    if (skipLevel > 1)     iter.findGroup(groupKeyValues);
    int startGroupLevel=skipLevel - 1;
    int count=0;
    while (iter.next()) {
      String label=(labelExpr != null ? iter.getString(labelExpr) : null);
      Object value=iter.getValue(valueExpr);
      choices.add(new SelectionChoice(label,value));
      count++;
      if ((listLimit != 0) && (count >= listLimit))       break;
      iter.skipToEnd(skipLevel);
      int endGroupLevel=iter.getEndingGroupLevel();
      if (endGroupLevel <= startGroupLevel) {
        break;
      }
    }
  }
 catch (  BirtException e) {
    e.printStackTrace();
  }
  if (!fixedOrder)   Collections.sort(choices,new SelectionChoiceComparator(true));
  return choices;
}",0.9911202185792348
78796,"public Collection getSelectionList(String name){
  usingParameterValues();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  ScalarParameterHandle parameter=(ScalarParameterHandle)report.findParameter(name);
  if (parameter == null) {
    return null;
  }
  String selectionType=parameter.getValueType();
  String dataType=parameter.getDataType();
  boolean fixedOrder=parameter.isFixedOrder();
  if (DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC.equals(selectionType)) {
    String dataSetName=parameter.getDataSetName();
    String valueExpr=parameter.getValueExpr();
    String labelExpr=parameter.getLabelExpr();
    int limit=parameter.getListlimit();
    return createDynamicSelectionChoices(dataSetName,labelExpr,valueExpr,dataType,limit,fixedOrder);
  }
 else   if (DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC.equals(selectionType)) {
    Iterator iter=parameter.choiceIterator();
    ArrayList choices=new ArrayList();
    while (iter.hasNext()) {
      SelectionChoiceHandle choice=(SelectionChoiceHandle)iter.next();
      String label=report.getMessage(choice.getLabelKey(),locale);
      if (label != null) {
        label=choice.getLabel();
      }
      Object value=getStringValue(choice.getValue(),dataType);
      choices.add(new SelectionChoice(label,value));
    }
    if (!fixedOrder)     Collections.sort(choices,new SelectionChoiceComparator(true));
    return choices;
  }
  return null;
}","public Collection getSelectionList(String name){
  usingParameterValues();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  ScalarParameterHandle parameter=(ScalarParameterHandle)report.findParameter(name);
  if (parameter == null) {
    return Collections.EMPTY_LIST;
  }
  String selectionType=parameter.getValueType();
  String dataType=parameter.getDataType();
  boolean fixedOrder=parameter.isFixedOrder();
  if (DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC.equals(selectionType)) {
    String dataSetName=parameter.getDataSetName();
    String valueExpr=parameter.getValueExpr();
    String labelExpr=parameter.getLabelExpr();
    int limit=parameter.getListlimit();
    return createDynamicSelectionChoices(dataSetName,labelExpr,valueExpr,dataType,limit,fixedOrder);
  }
 else   if (DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC.equals(selectionType)) {
    Iterator iter=parameter.choiceIterator();
    ArrayList choices=new ArrayList();
    while (iter.hasNext()) {
      SelectionChoiceHandle choice=(SelectionChoiceHandle)iter.next();
      String label=report.getMessage(choice.getLabelKey(),locale);
      if (label != null) {
        label=choice.getLabel();
      }
      Object value=getStringValue(choice.getValue(),dataType);
      choices.add(new SelectionChoice(label,value));
    }
    if (!fixedOrder)     Collections.sort(choices,new SelectionChoiceComparator(true));
    return choices;
  }
  return Collections.EMPTY_LIST;
}",0.9822767552828904
78797,"/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  keyChooser=new Combo(composite,SWT.DROP_DOWN);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  new Label(intervalArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
    }
  }
);
  intervalRange=new Spinner(intervalArea,SWT.NONE);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.setMinimum(0);
  intervalRange.setMaximum(Integer.MAX_VALUE);
  intervalRange.setStep(1);
}","/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  keyChooser=new Combo(composite,SWT.DROP_DOWN | SWT.READ_ONLY);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  new Label(intervalArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
    }
  }
);
  intervalRange=new Spinner(intervalArea,SWT.NONE);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.setMinimum(0);
  intervalRange.setMaximum(Integer.MAX_VALUE);
  intervalRange.setStep(1);
}",0.9955156950672646
78798,"protected boolean initDialog(){
  if (inputGroup.getName() != null) {
    nameEditor.setText(inputGroup.getName());
  }
  columnList=DataSetManager.getCurrentInstance().getColumns(dataSetList);
  Iterator itor=columnList.iterator();
  while (itor.hasNext()) {
    keyChooser.add(((DataSetItemModel)itor.next()).getDisplayName());
  }
  String groupKey=inputGroup.getKeyExpr();
  int index=-1;
  if (groupKey != null) {
    for (int i=0; i < columnList.size(); i++) {
      if (groupKey.equals(DEUtil.getExpression(columnList.get(i)))) {
        index=i;
        break;
      }
    }
    if (index != -1) {
      keyChooser.select(index);
    }
 else {
      keyChooser.setText(groupKey);
    }
  }
  index=getIntervalTypeIndex(inputGroup.getInterval());
  intervalType.select(index);
  if (index == 0) {
    intervalRange.setEnabled(false);
  }
 else {
    intervalRange.setSelection(inputGroup.getIntervalRange());
  }
  if (inputGroup instanceof TableGroupHandle) {
    includeHeader.setSelection(inputGroup.hasHeader());
    includeFooter.setSelection(inputGroup.hasFooter());
  }
 else {
    includeHeader.setSelection(false);
    includeFooter.setSelection(false);
  }
  if (DesignChoiceConstants.SORT_DIRECTION_ASC.equals(inputGroup.getSortDirection())) {
    ascending.setSelection(true);
  }
 else {
    descending.setSelection(true);
  }
  List list=new ArrayList(1);
  list.add(inputGroup);
  tocEditor.setText(UIUtil.convertToGUIString(inputGroup.getTocExpression()));
  return true;
}","protected boolean initDialog(){
  if (inputGroup.getName() != null) {
    nameEditor.setText(inputGroup.getName());
  }
  columnList=DataSetManager.getCurrentInstance().getColumns(dataSetList);
  Iterator itor=columnList.iterator();
  while (itor.hasNext()) {
    keyChooser.add(((DataSetItemModel)itor.next()).getDisplayName());
  }
  String groupKey=inputGroup.getKeyExpr();
  int index=-1;
  if (groupKey != null) {
    for (int i=0; i < columnList.size(); i++) {
      if (groupKey.equals(DEUtil.getExpression(columnList.get(i)))) {
        index=i;
        break;
      }
    }
    if (index != -1) {
      keyChooser.select(index);
    }
  }
  index=getIntervalTypeIndex(inputGroup.getInterval());
  intervalType.select(index);
  if (index == 0) {
    intervalRange.setEnabled(false);
  }
 else {
    intervalRange.setSelection(inputGroup.getIntervalRange());
  }
  if (inputGroup instanceof TableGroupHandle) {
    includeHeader.setSelection(inputGroup.hasHeader());
    includeFooter.setSelection(inputGroup.hasFooter());
  }
 else {
    includeHeader.setSelection(false);
    includeFooter.setSelection(false);
  }
  if (DesignChoiceConstants.SORT_DIRECTION_ASC.equals(inputGroup.getSortDirection())) {
    ascending.setSelection(true);
  }
 else {
    descending.setSelection(true);
  }
  List list=new ArrayList(1);
  list.add(inputGroup);
  tocEditor.setText(UIUtil.convertToGUIString(inputGroup.getTocExpression()));
  return true;
}",0.9830047586675732
78799,"protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    int index=keyChooser.getSelectionIndex();
    String oldKey=inputGroup.getKeyExpr();
    String newKey=null;
    if (index == -1) {
      newKey=keyChooser.getText();
    }
 else {
      newKey=DEUtil.getExpression(columnList.get(index));
    }
    if (!newKey.equals(oldKey)) {
      inputGroup.setKeyExpr(newKey);
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        Object insertObj=index == -1 ? newKey : columnList.get(index);
        DesignElementHandle dataItemHandle=InsertInLayoutUtil.performInsert(insertObj,slotHandle,inputGroup.getContainer());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getSelection());
    }
    if (inputGroup instanceof TableGroupHandle) {
      if (includeHeader.getSelection() != inputGroup.hasHeader()) {
        if (includeHeader.getSelection()) {
          inputGroup.getHeader().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.HEADER_SLOT);
        }
      }
      if (includeFooter.getSelection() != inputGroup.hasFooter()) {
        if (includeFooter.getSelection()) {
          inputGroup.getFooter().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.FOOTER_SLOT);
        }
      }
    }
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
    inputGroup.setTocExpression(UIUtil.convertToModelString(tocEditor.getText(),true));
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}","protected void okPressed(){
  try {
    inputGroup.setName(nameEditor.getText());
    int index=keyChooser.getSelectionIndex();
    String oldKey=inputGroup.getKeyExpr();
    String newKey=null;
    if (index != -1) {
      newKey=DEUtil.getExpression(columnList.get(index));
    }
    inputGroup.setKeyExpr(newKey);
    if (newKey != null && !newKey.equals(oldKey)) {
      SlotHandle slotHandle=null;
      if (inputGroup instanceof ListGroupHandle) {
        slotHandle=inputGroup.getHeader();
      }
 else       if (inputGroup instanceof TableGroupHandle) {
        if (inputGroup.getHeader().getCount() != 0) {
          RowHandle rowHandle=((RowHandle)inputGroup.getHeader().get(0));
          CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
          slotHandle=cellHandle.getContent();
        }
      }
      if (slotHandle != null) {
        DesignElementHandle dataItemHandle=InsertInLayoutUtil.performInsert(columnList.get(index),slotHandle,inputGroup.getContainer());
        slotHandle.add(dataItemHandle);
      }
    }
    index=intervalType.getSelectionIndex();
    inputGroup.setInterval(intervalChoices[index].getName());
    if (index != 0) {
      inputGroup.setIntervalRange(intervalRange.getSelection());
    }
    if (inputGroup instanceof TableGroupHandle) {
      if (includeHeader.getSelection() != inputGroup.hasHeader()) {
        if (includeHeader.getSelection()) {
          inputGroup.getHeader().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.HEADER_SLOT);
        }
      }
      if (includeFooter.getSelection() != inputGroup.hasFooter()) {
        if (includeFooter.getSelection()) {
          inputGroup.getFooter().add(createRow());
        }
 else {
          inputGroup.clearContents(GroupHandle.FOOTER_SLOT);
        }
      }
    }
    if (ascending.getSelection()) {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
    }
 else {
      inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
    }
    inputGroup.setTocExpression(UIUtil.convertToModelString(tocEditor.getText(),true));
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputGroup);
  super.okPressed();
}",0.7564046895353886
78800,"public void setGenerateBy(Object design){
  super.setGenerateBy(design);
  if (design instanceof MasterPageDesign) {
    MasterPageDesign page=(MasterPageDesign)design;
    orientation=page.getOrientation();
    pageType=page.getPageType();
    pageHeight=page.getPageHeight();
    pageWidth=page.getPageWidth();
    marginTop=page.getTopMargin();
    marginLeft=page.getLeftMargin();
    marginRight=page.getRightMargin();
    marginBottom=page.getBottomMargin();
    if (page instanceof SimpleMasterPageDesign) {
      headerHeight=((SimpleMasterPageDesign)page).getHeaderHeight();
      footerHeight=((SimpleMasterPageDesign)page).getFooterHeight();
    }
    if (headerHeight == null) {
      headerHeight=new DimensionType(0.25f,EngineIRConstants.UNITS_IN);
    }
    if (footerHeight == null) {
      footerHeight=new DimensionType(0.25f,EngineIRConstants.UNITS_IN);
    }
  }
}","public void setGenerateBy(Object design){
  super.setGenerateBy(design);
  if (design instanceof MasterPageDesign) {
    MasterPageDesign page=(MasterPageDesign)design;
    orientation=page.getOrientation();
    pageType=page.getPageType();
    if (EngineIRConstants.PAGE_ORIENTATION_LANDSCAPE.equals(page.getOrientation())) {
      pageHeight=page.getPageWidth();
      pageWidth=page.getPageHeight();
    }
 else {
      pageHeight=page.getPageHeight();
      pageWidth=page.getPageWidth();
    }
    marginTop=page.getTopMargin();
    marginLeft=page.getLeftMargin();
    marginRight=page.getRightMargin();
    marginBottom=page.getBottomMargin();
    if (page instanceof SimpleMasterPageDesign) {
      headerHeight=((SimpleMasterPageDesign)page).getHeaderHeight();
      footerHeight=((SimpleMasterPageDesign)page).getFooterHeight();
    }
    if (headerHeight == null) {
      headerHeight=new DimensionType(0.25f,EngineIRConstants.UNITS_IN);
    }
    if (footerHeight == null) {
      footerHeight=new DimensionType(0.25f,EngineIRConstants.UNITS_IN);
    }
  }
}",0.8526100307062436
78801,"/** 
 * Creates one new element based on the given element. The new element will extends the given one. The element must be extendable.
 * @param baseElement the base element.
 * @param name the optional new element name
 * @return the handle to the new element.
 * @throws ExtendsException if the the base element is in a library that is not included in this module, or if the ""extends"" relationship is illegal
 */
public DesignElementHandle newElementFrom(DesignElementHandle baseElement,String name) throws ExtendsException {
  if (baseElement == null)   return null;
  if (baseElement.getRoot().getElement() == module) {
    DesignElementHandle childElement=null;
    if (baseElement instanceof ExtendedItemHandle) {
      String extensionName=baseElement.getStringProperty(ExtendedItem.EXTENSION_NAME_PROP);
      childElement=this.newExtendedItem(name,extensionName,(ExtendedItemHandle)baseElement);
      childElement.getElement().refreshStructureFromParent(module);
    }
 else {
      childElement=newElement(baseElement.getElement().getElementName(),name);
      childElement.setExtends(baseElement);
      childElement.getElement().refreshStructureFromParent(module);
    }
    return childElement;
  }
  Module root=(Module)baseElement.getRoot().getElement();
  if (root instanceof Library) {
    Library lib=module.getLibraryByLocation(root.getLocation());
    if (lib == null) {
      throw new ExtendsException(null,baseElement.getElement(),ExtendsException.DESIGN_EXCEPTION_PARENT_NOT_INCLUDE);
    }
    DesignElement base=lib.getElementByID(baseElement.getID());
    if (base == null || base.getDefn() != baseElement.getElement().getDefn()) {
      throw new ExtendsException(null,baseElement.getName(),ExtendsException.DESIGN_EXCEPTION_NOT_FOUND);
    }
    DesignElementHandle childElement=null;
    if (baseElement instanceof ExtendedItemHandle) {
      String extensionName=baseElement.getStringProperty(ExtendedItem.EXTENSION_NAME_PROP);
      childElement=this.newExtendedItem(name,extensionName,(ExtendedItemHandle)base.getHandle(lib));
      childElement.getElement().refreshStructureFromParent(module);
    }
 else {
      childElement=newElement(base.getElementName(),name);
      childElement.setExtends(base.getHandle(lib));
      childElement.getElement().refreshStructureFromParent(module);
    }
    return childElement;
  }
  return null;
}","/** 
 * Creates one new element based on the given element. The new element will extends the given one. The element must be extendable.
 * @param name the optional new element name
 * @param baseElement the base element
 * @return the handle to the new element.
 * @throws ExtendsException if the ""extends"" relationship is illegal
 */
private DesignElementHandle newElementFrom(String name,DesignElementHandle baseElement) throws ExtendsException {
  DesignElementHandle childElement=null;
  if (baseElement instanceof ExtendedItemHandle) {
    String extensionName=baseElement.getStringProperty(ExtendedItem.EXTENSION_NAME_PROP);
    childElement=newExtendedItem(name,extensionName,(ExtendedItemHandle)baseElement);
    childElement.getElement().refreshStructureFromParent(module);
  }
 else {
    childElement=newElement(baseElement.getElement().getElementName(),name);
    if (childElement.getElement() instanceof IOdaExtendableElementModel) {
      String extensionId=(String)baseElement.getProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP);
      childElement.getElement().setProperty(IOdaExtendableElementModel.EXTENSION_ID_PROP,extensionId);
    }
    childElement.setExtends(baseElement);
    childElement.getElement().refreshStructureFromParent(module);
  }
  return childElement;
}",0.3722070844686648
78802,"public void checkExtends(DesignElement parent) throws ExtendsException {
  super.checkExtends(parent);
  if (provider != null)   provider.checkExtends(parent);
}","public void checkExtends(DesignElement parent) throws ExtendsException {
  super.checkExtends(parent);
  if (provider != null)   provider.checkExtends(parent);
 else {
    OdaDataSet odaParent=(OdaDataSet)parent;
    if (odaParent.extensionID != null && !odaParent.extensionID.equals(extensionID))     throw new ExtendsException(this,parent,ExtendsException.DESIGN_EXCEPTION_WRONG_EXTENSION_TYPE);
    if (extensionID != null && !extensionID.equals(odaParent.extensionID))     throw new ExtendsException(this,parent,ExtendsException.DESIGN_EXCEPTION_WRONG_EXTENSION_TYPE);
  }
}",0.435723951285521
78803,"public void checkExtends(DesignElement parent) throws ExtendsException {
  super.checkExtends(parent);
  if (provider != null)   provider.checkExtends(parent);
}","public void checkExtends(DesignElement parent) throws ExtendsException {
  super.checkExtends(parent);
  if (provider != null)   provider.checkExtends(parent);
 else {
    OdaDataSource odaParent=(OdaDataSource)parent;
    if (odaParent.extensionID != null && !odaParent.extensionID.equals(extensionID))     throw new ExtendsException(this,parent,ExtendsException.DESIGN_EXCEPTION_WRONG_EXTENSION_TYPE);
    if (extensionID != null && !extensionID.equals(odaParent.extensionID))     throw new ExtendsException(this,parent,ExtendsException.DESIGN_EXCEPTION_WRONG_EXTENSION_TYPE);
  }
}",0.4322147651006711
78804,"/** 
 * Creates an embedded image from another library embedded image.
 * @param baseImage
 * @return the created embedded image
 */
public static EmbeddedImage createEmbeddedImage(EmbeddedImageHandle baseImage){
  if (baseImage == null)   return null;
  EmbeddedImage image=new EmbeddedImage();
  Module module=baseImage.getModule();
  String namespace=module instanceof Library ? ((Library)module).getNamespace() : null;
  StructRefValue libReference=new StructRefValue(namespace,baseImage.getName());
  image.setProperty(EmbeddedImage.LIB_REFERENCE_MEMBER,libReference);
  return image;
}","/** 
 * Creates an embedded image from another library embedded image.
 * @param baseImage
 * @return the created embedded image
 * @deprecated by{@link #newEmbeddedImageFrom(EmbeddedImageHandle,String,ModuleHandle)}
 */
public static EmbeddedImage createEmbeddedImage(EmbeddedImageHandle baseImage){
  if (baseImage == null)   return null;
  EmbeddedImage image=new EmbeddedImage();
  Module module=baseImage.getModule();
  String namespace=module instanceof Library ? ((Library)module).getNamespace() : null;
  StructRefValue libReference=new StructRefValue(namespace,baseImage.getName());
  image.setProperty(EmbeddedImage.LIB_REFERENCE_MEMBER,libReference);
  return image;
}",0.9307086614173228
78805,"/** 
 * @param index
 * @param name
 * @param type
 * @param path
 * @param originalPath
 * @throws OdaException
 */
public ColumnInfo(int index,String name,String type,String path,String originalPath) throws OdaException {
  this.index=index;
  this.name=name;
  this.type=type;
  if (!DataTypes.isValidType(type))   throw new OdaException(""String_Node_Str"");
  this.path=buildPath(path);
  this.originalPath=originalPath;
}","/** 
 * @param index
 * @param name
 * @param type
 * @param path
 * @param originalPath
 * @throws OdaException
 */
public ColumnInfo(int index,String name,String type,String path,String originalPath) throws OdaException {
  this.index=index;
  this.name=name;
  this.type=type;
  if (!DataTypes.isValidType(type))   throw new OdaException(""String_Node_Str"");
  this.path=fixTrailingAttr(buildPath(path));
  this.originalPath=originalPath;
}",0.9803921568627452
78806,"private static boolean addGroup(DesignElementHandle parent,int position) throws SemanticException {
  GroupHandle groupHandle=null;
  SlotHandle slotHandle=null;
  DesignElementFactory factory=DesignElementFactory.getInstance(parent.getModuleHandle());
  if (parent instanceof TableHandle) {
    groupHandle=factory.newTableGroup();
    slotHandle=((TableHandle)parent).getGroups();
    int columnCount=((TableHandle)parent).getColumnCount();
    groupHandle.getHeader().add(factory.newTableRow(columnCount));
    groupHandle.getFooter().add(factory.newTableRow(columnCount));
  }
 else   if (parent instanceof ListHandle) {
    groupHandle=factory.newListGroup();
    slotHandle=((ListHandle)parent).getGroups();
  }
  if (groupHandle != null && slotHandle != null) {
    slotHandle.add(groupHandle,position);
    if (!DEUtil.getDataSetList(parent).isEmpty()) {
      GroupDialog dialog=new GroupDialog(getDefaultShell(),GroupDialog.GROUP_DLG_TITLE_NEW);
      dialog.setDataSetList(DEUtil.getDataSetList(parent));
      dialog.setInput(groupHandle);
      if (dialog.open() == Window.CANCEL) {
        return false;
      }
    }
    return true;
  }
  return false;
}","private static boolean addGroup(DesignElementHandle parent,int position) throws SemanticException {
  GroupHandle groupHandle=null;
  SlotHandle slotHandle=null;
  DesignElementFactory factory=DesignElementFactory.getInstance(parent.getModuleHandle());
  if (parent instanceof TableHandle) {
    groupHandle=factory.newTableGroup();
    slotHandle=((TableHandle)parent).getGroups();
    int columnCount=((TableHandle)parent).getColumnCount();
    groupHandle.getHeader().add(factory.newTableRow(columnCount));
    groupHandle.getFooter().add(factory.newTableRow(columnCount));
  }
 else   if (parent instanceof ListHandle) {
    groupHandle=factory.newListGroup();
    slotHandle=((ListHandle)parent).getGroups();
  }
  if (groupHandle != null && slotHandle != null) {
    slotHandle.add(groupHandle,position);
{
      GroupDialog dialog=new GroupDialog(getDefaultShell(),GroupDialog.GROUP_DLG_TITLE_NEW);
      dialog.setDataSetList(DEUtil.getDataSetList(parent));
      dialog.setInput(groupHandle);
      if (dialog.open() == Window.CANCEL) {
        return false;
      }
    }
    return true;
  }
  return false;
}",0.9781659388646288
78807,"/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  keyChooser=new Combo(composite,SWT.DROP_DOWN);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keyChooser.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      getOkButton().setEnabled(keyChooser.getText().length() > 0);
    }
  }
);
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  new Label(intervalArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
    }
  }
);
  intervalRange=new Spinner(intervalArea,SWT.NONE);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.setMinimum(0);
  intervalRange.setMaximum(Integer.MAX_VALUE);
  intervalRange.setStep(1);
}","/** 
 * Creates the field area
 * @param parent the parent composite
 */
private void createFieldArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=200;
  composite.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_NAME_LABEL);
  nameEditor=new Text(composite,SWT.SINGLE | SWT.BORDER);
  nameEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(composite,SWT.NONE).setText(GROUP_DLG_GROUP_KEY_LABEL);
  keyChooser=new Combo(composite,SWT.DROP_DOWN);
  keyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite intervalArea=new Composite(composite,SWT.NONE);
  intervalArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  intervalArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  new Label(intervalArea,SWT.NONE).setText(GROUP_DLG_GROUP_INTERVAL_LABEL);
  new Label(intervalArea,SWT.NONE).setText(GROUP_DLG_GROUP_RANGE_LABEL);
  intervalType=new Combo(intervalArea,SWT.READ_ONLY | SWT.DROP_DOWN);
  intervalType.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  for (int i=0; i < intervalChoices.length; i++) {
    intervalType.add(intervalChoices[i].getDisplayName());
  }
  intervalType.setData(intervalChoices);
  intervalType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      intervalRange.setEnabled(intervalType.getSelectionIndex() != 0);
    }
  }
);
  intervalRange=new Spinner(intervalArea,SWT.NONE);
  intervalRange.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  intervalRange.setMinimum(0);
  intervalRange.setMaximum(Integer.MAX_VALUE);
  intervalRange.setStep(1);
}",0.9517684887459807
78808,"protected boolean initDialog(){
  if (inputGroup.getName() != null) {
    nameEditor.setText(inputGroup.getName());
  }
  columnList=DataSetManager.getCurrentInstance().getColumns(dataSetList);
  Iterator itor=columnList.iterator();
  if (!itor.hasNext()) {
    ExceptionHandler.openMessageBox(ERROR_DLG_TITLE_NO_DATA,ERROR_MESSAGE_NO_DATA,SWT.ICON_QUESTION);
    return false;
  }
  while (itor.hasNext()) {
    keyChooser.add(((DataSetItemModel)itor.next()).getDisplayName());
  }
  String groupKey=inputGroup.getKeyExpr();
  int index=-1;
  if (groupKey != null) {
    for (int i=0; i < columnList.size(); i++) {
      if (groupKey.equals(DEUtil.getExpression(columnList.get(i)))) {
        index=i;
        break;
      }
    }
    if (index != -1) {
      keyChooser.select(index);
    }
 else {
      keyChooser.setText(groupKey);
    }
  }
 else {
    getOkButton().setEnabled(false);
  }
  index=getIntervalTypeIndex(inputGroup.getInterval());
  intervalType.select(index);
  if (index == 0) {
    intervalRange.setEnabled(false);
  }
 else {
    intervalRange.setSelection(inputGroup.getIntervalRange());
  }
  if (inputGroup instanceof TableGroupHandle) {
    includeHeader.setSelection(inputGroup.hasHeader());
    includeFooter.setSelection(inputGroup.hasFooter());
  }
 else {
    includeHeader.setSelection(false);
    includeFooter.setSelection(false);
  }
  if (DesignChoiceConstants.SORT_DIRECTION_ASC.equals(inputGroup.getSortDirection())) {
    ascending.setSelection(true);
  }
 else {
    descending.setSelection(true);
  }
  List list=new ArrayList(1);
  list.add(inputGroup);
  tocEditor.setText(UIUtil.convertToGUIString(inputGroup.getTocExpression()));
  return true;
}","protected boolean initDialog(){
  if (inputGroup.getName() != null) {
    nameEditor.setText(inputGroup.getName());
  }
  columnList=DataSetManager.getCurrentInstance().getColumns(dataSetList);
  Iterator itor=columnList.iterator();
  while (itor.hasNext()) {
    keyChooser.add(((DataSetItemModel)itor.next()).getDisplayName());
  }
  String groupKey=inputGroup.getKeyExpr();
  int index=-1;
  if (groupKey != null) {
    for (int i=0; i < columnList.size(); i++) {
      if (groupKey.equals(DEUtil.getExpression(columnList.get(i)))) {
        index=i;
        break;
      }
    }
    if (index != -1) {
      keyChooser.select(index);
    }
 else {
      keyChooser.setText(groupKey);
    }
  }
  index=getIntervalTypeIndex(inputGroup.getInterval());
  intervalType.select(index);
  if (index == 0) {
    intervalRange.setEnabled(false);
  }
 else {
    intervalRange.setSelection(inputGroup.getIntervalRange());
  }
  if (inputGroup instanceof TableGroupHandle) {
    includeHeader.setSelection(inputGroup.hasHeader());
    includeFooter.setSelection(inputGroup.hasFooter());
  }
 else {
    includeHeader.setSelection(false);
    includeFooter.setSelection(false);
  }
  if (DesignChoiceConstants.SORT_DIRECTION_ASC.equals(inputGroup.getSortDirection())) {
    ascending.setSelection(true);
  }
 else {
    descending.setSelection(true);
  }
  List list=new ArrayList(1);
  list.add(inputGroup);
  tocEditor.setText(UIUtil.convertToGUIString(inputGroup.getTocExpression()));
  return true;
}",0.9379310344827586
78809,"/** 
 * Returns whether the library with the given namespace can be included in this module.
 * @param namespace the library namespace
 * @return true, if the library with the given namespace can be included.
 */
public boolean isRecursiveNamespace(String namespace){
  Module module=this;
  while (module instanceof Library) {
    Library library=(Library)module;
    if (library.getNamespace().equals(namespace))     return true;
    module=library.getHost();
  }
  return false;
}","/** 
 * Returns whether the library with the given namespace can be included in this module.
 * @param namespace the library namespace
 * @return true, if the library with the given namespace can be included.
 */
public boolean isRecursiveNamespace(String namespace){
  Module module=this;
  while (module instanceof Library) {
    Library library=(Library)module;
    if (namespace.equals(library.getNamespace()))     return true;
    module=library.getHost();
  }
  return false;
}",0.9648033126293996
78810,"public void startContainer(IContainerContent container){
  IStyle mergedStyle=container.getStyle();
  push(mergedStyle);
  if (isHidden()) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  String tagName;
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=container.getX();
  DimensionType y=container.getY();
  DimensionType width=container.getWidth();
  DimensionType height=container.getHeight();
  int display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  tagName=openTagByType(display,DISPLAY_FLAG_ALL);
  tagStack.push(tagName);
  setStyleName(container.getStyleClass());
  setBookmark(tagName,container.getBookmark());
  setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  handleStyle(container,styleBuffer);
}","public void startContainer(IContainerContent container){
  IStyle mergedStyle=container.getStyle();
  push(mergedStyle);
  if (isHidden()) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  String tagName;
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=container.getX();
  DimensionType y=container.getY();
  DimensionType width=container.getWidth();
  DimensionType height=container.getHeight();
  int display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  tagName=openTagByType(display,DISPLAY_FLAG_ALL);
  tagStack.push(tagName);
  setStyleName(container.getStyleClass());
  String bookmark=container.getBookmark();
  if (bookmark == null) {
    bookmark=generateUniqueID();
  }
  setBookmark(tagName,bookmark);
  exportElementID(container,bookmark);
  setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  handleStyle(container,styleBuffer);
}",0.9022222222222224
78811,"public void setFilters(Filter[] simpleFilterExpression){
  throw new UnsupportedOperationException();
}","public void setFilters(Filter[] simpleFilterExpression){
}",0.7204968944099379
78812,"public void setSortConditions(String[] columnNames,int[] directions){
  throw new UnsupportedOperationException();
}","public void setSortConditions(String[] columnNames,int[] directions){
}",0.7593582887700535
78813,"public void selectColumns(String[] columnNames){
  throw new UnsupportedOperationException();
}","public void selectColumns(String[] columnNames){
}",0.6896551724137931
78814,"protected void exportElementID(IContent content,String bookmark){
  Object generateBy=content.getGenerateBy();
  if (generateBy instanceof TableItemDesign || generateBy instanceof ListItemDesign || generateBy instanceof ExtendedItemDesign) {
    if (renderOption instanceof HTMLRenderOption) {
      List htmlIds=((HTMLRenderOption)renderOption).getInstanceIDs();
      if (htmlIds != null && bookmark != null) {
        htmlIds.add(bookmark);
      }
    }
  }
}","protected void exportElementID(IContent content,String bookmark,String type){
}",0.2472324723247232
78815,"protected String generateUniqueID(){
  if (random == null) {
    random=new Random();
  }
  return ""String_Node_Str"" + random.nextLong();
}","protected String generateUniqueID(){
  if (random == null) {
    random=new Random();
  }
  String randLong=""String_Node_Str"" + random.nextLong();
  randLong=randLong.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return ""String_Node_Str"" + randLong;
}",0.6379746835443038
78816,"public void startContainer(IContainerContent container){
  IStyle mergedStyle=container.getStyle();
  push(mergedStyle);
  if (isHidden()) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  String tagName;
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=container.getX();
  DimensionType y=container.getY();
  DimensionType width=container.getWidth();
  DimensionType height=container.getHeight();
  int display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  tagName=openTagByType(display,DISPLAY_FLAG_ALL);
  tagStack.push(tagName);
  setStyleName(container.getStyleClass());
  String bookmark=container.getBookmark();
  if (bookmark == null) {
    bookmark=generateUniqueID();
  }
  setBookmark(tagName,bookmark);
  exportElementID(container,bookmark);
  setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  handleStyle(container,styleBuffer);
}","public void startContainer(IContainerContent container){
  IStyle mergedStyle=container.getStyle();
  push(mergedStyle);
  if (isHidden()) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  String tagName;
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=container.getX();
  DimensionType y=container.getY();
  DimensionType width=container.getWidth();
  DimensionType height=container.getHeight();
  int display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  tagName=openTagByType(display,DISPLAY_FLAG_ALL);
  tagStack.push(tagName);
  setStyleName(container.getStyleClass());
  String bookmark=container.getBookmark();
  if (bookmark == null) {
    bookmark=generateUniqueID();
  }
  setBookmark(tagName,bookmark);
  exportElementID(container,bookmark,""String_Node_Str"");
  setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  handleStyle(container,styleBuffer);
}",0.9907597535934292
78817,"protected void exportElementID(IContent content,String bookmark){
  Object generateBy=content.getGenerateBy();
  if (generateBy instanceof TableItemDesign || generateBy instanceof ListItemDesign || generateBy instanceof ImageItemDesign) {
    if (renderOption instanceof HTMLRenderOption) {
      List htmlIds=((HTMLRenderOption)renderOption).getInstanceIDs();
      if (htmlIds != null && bookmark != null) {
        htmlIds.add(bookmark);
      }
    }
  }
}","protected void exportElementID(IContent content,String bookmark){
  Object generateBy=content.getGenerateBy();
  if (generateBy instanceof TableItemDesign || generateBy instanceof ListItemDesign || generateBy instanceof ExtendedItemDesign) {
    if (renderOption instanceof HTMLRenderOption) {
      List htmlIds=((HTMLRenderOption)renderOption).getInstanceIDs();
      if (htmlIds != null && bookmark != null) {
        htmlIds.add(bookmark);
      }
    }
  }
}",0.9859154929577464
78818,"/** 
 * @param currentEditorModel The currentEditorModel to set.
 */
public void setCurrentEditorModel(Object current){
  Object old=this.currentEditorModel;
  if (currentEditorModel == null || current instanceof LibraryHandle) {
    this.currentEditorModel=new LibRootModel(current);
  }
 else {
    this.currentEditorModel=current;
  }
  if (currentEditorModel == old) {
    return;
  }
  PropertyChangeEvent event=new PropertyChangeEvent(this,CURRENTMODEL,old,this.currentEditorModel);
  firePropertyChangeEvent(event);
}","/** 
 * @param currentEditorModel The currentEditorModel to set.
 */
public void setCurrentEditorModel(Object current){
  Object old=this.currentEditorModel;
  if (current == null || current instanceof LibraryHandle) {
    this.currentEditorModel=new LibRootModel(current);
  }
 else {
    this.currentEditorModel=current;
  }
  if (currentEditorModel == old) {
    return;
  }
  PropertyChangeEvent event=new PropertyChangeEvent(this,CURRENTMODEL,old,this.currentEditorModel);
  firePropertyChangeEvent(event);
}",0.9893924783027964
78819,"/** 
 * Returns the created event if the given event is editpart event
 * @param event the selection changed event
 * @return the created event
 */
private List convertEventToGFE(ReportRequest event){
  if (event.getSource() == getGraphicalViewer()) {
    return null;
  }
  ArrayList tempList=new ArrayList();
  List list=event.getSelectionModelList();
  int size=list.size();
  if (size != 0 && list.get(0) instanceof RowHandle) {
    RowHandle handle=(RowHandle)list.get(0);
    RowHandleAdapter adapter=HandleAdapterFactory.getInstance().getRowHandleAdapter(handle);
    Object tableParent=adapter.getTableParent();
    TableEditPart part=(TableEditPart)getGraphicalViewer().getEditPartRegistry().get(tableParent);
    int[] selectRows=new int[]{adapter.getRowNumber()};
    for (int i=1; i < size; i++) {
      Object o=list.get(i);
      if (o instanceof RowHandle) {
        handle=(RowHandle)o;
        adapter=HandleAdapterFactory.getInstance().getRowHandleAdapter(handle);
        if (tableParent != adapter.getTableParent()) {
          return null;
        }
        int len=selectRows.length;
        int temp[]=new int[len + 1];
        System.arraycopy(selectRows,0,temp,0,len);
        temp[len]=adapter.getRowNumber();
        selectRows=temp;
      }
 else {
        return null;
      }
    }
    if (handle.getRoot() == null) {
      return null;
    }
    if (part != null) {
      Arrays.sort(selectRows);
      int len=selectRows.length;
      if (len > 1) {
        for (int i=0; i < len - 1; i++) {
          if (selectRows[i + 1] - selectRows[i] != 1) {
            return null;
          }
        }
      }
      part.selectRow(selectRows);
    }
    return null;
  }
  for (int i=0; i < size; i++) {
    Object obj=list.get(i);
    if (obj instanceof EditPart) {
      tempList.add(obj);
    }
 else {
      Object part=null;
      if (obj instanceof ReportElementModel) {
        obj=(((ReportElementModel)obj).getSlotHandle());
        part=getGraphicalViewer().getEditPartRegistry().get(new ListBandProxy((SlotHandle)obj));
      }
 else {
        part=getGraphicalViewer().getEditPartRegistry().get(obj);
      }
      if (part instanceof EditPart) {
        tempList.add(part);
      }
    }
  }
  if (tempList.isEmpty()) {
    return null;
  }
  return tempList;
}","/** 
 * Returns the created event if the given event is editpart event
 * @param event the selection changed event
 * @return the created event
 */
private List convertEventToGFE(ReportRequest event){
  if (event.getSource() == getGraphicalViewer()) {
    return null;
  }
  ArrayList tempList=new ArrayList();
  List list=event.getSelectionModelList();
  int size=list.size();
  if (size != 0 && list.get(0) instanceof RowHandle) {
    RowHandle handle=(RowHandle)list.get(0);
    RowHandleAdapter adapter=HandleAdapterFactory.getInstance().getRowHandleAdapter(handle);
    Object tableParent=adapter.getTableParent();
    if (tableParent == null) {
      return null;
    }
    TableEditPart part=(TableEditPart)getGraphicalViewer().getEditPartRegistry().get(tableParent);
    int[] selectRows=new int[]{adapter.getRowNumber()};
    for (int i=1; i < size; i++) {
      Object o=list.get(i);
      if (o instanceof RowHandle) {
        handle=(RowHandle)o;
        adapter=HandleAdapterFactory.getInstance().getRowHandleAdapter(handle);
        if (tableParent != adapter.getTableParent()) {
          return null;
        }
        int len=selectRows.length;
        int temp[]=new int[len + 1];
        System.arraycopy(selectRows,0,temp,0,len);
        temp[len]=adapter.getRowNumber();
        selectRows=temp;
      }
 else {
        return null;
      }
    }
    if (handle.getRoot() == null) {
      return null;
    }
    if (part != null) {
      Arrays.sort(selectRows);
      int len=selectRows.length;
      if (len > 1) {
        for (int i=0; i < len - 1; i++) {
          if (selectRows[i + 1] - selectRows[i] != 1) {
            return null;
          }
        }
      }
      part.selectRow(selectRows);
    }
    return null;
  }
  for (int i=0; i < size; i++) {
    Object obj=list.get(i);
    if (obj instanceof EditPart) {
      tempList.add(obj);
    }
 else {
      Object part=null;
      if (obj instanceof ReportElementModel) {
        obj=(((ReportElementModel)obj).getSlotHandle());
        part=getGraphicalViewer().getEditPartRegistry().get(new ListBandProxy((SlotHandle)obj));
      }
 else {
        part=getGraphicalViewer().getEditPartRegistry().get(obj);
      }
      if (part instanceof EditPart) {
        tempList.add(part);
      }
    }
  }
  if (tempList.isEmpty()) {
    return null;
  }
  return tempList;
}",0.9879673399226472
78820,"protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=new GridLayout(2,false);
  layout.marginHeight=layout.marginWidth=10;
  composite.setLayout(layout);
  new Label(composite,SWT.NONE).setText(LABEL_NAME);
  nameEditor=new Text(composite,SWT.BORDER | SWT.SINGLE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.widthHint=200;
  nameEditor.setLayoutData(gd);
  nameEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkName();
    }
  }
);
  messageLine=new CLabel(composite,SWT.NONE);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  messageLine.setLayoutData(gd);
switch (style) {
case USER_PROPERTY:
    new Label(composite,SWT.NONE).setText(LABEL_TYPE);
  typeChooser=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
typeChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
for (int i=0; i < PROPERTY_TYPES.length; i++) {
typeChooser.add(PROPERTY_TYPES[i].getDisplayName(),i);
}
break;
case NAMED_EXPRESSION:
new Label(composite,SWT.NONE).setText(LABEL_DEFAULT_VALUE);
Composite subComposite=new Composite(composite,SWT.NONE);
subComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
subComposite.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
defaultValueEditor=new Text(subComposite,SWT.BORDER | SWT.SINGLE);
defaultValueEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
Button button=new Button(subComposite,SWT.PUSH);
button.setText(""String_Node_Str"");
button.setLayoutData(new GridData());
button.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
ExpressionBuilder builder=new ExpressionBuilder(UIUtil.getDefaultShell(),defaultValueEditor.getText());
builder.setExpressionProvier(new ExpressionProvider(input.getModuleHandle(),DEUtil.getDataSetList(input)));
if (builder.open() == OK) {
defaultValueEditor.setText(UIUtil.convertToGUIString(builder.getResult()));
}
}
}
);
}
return composite;
}","protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=new GridLayout(2,false);
  layout.marginHeight=layout.marginWidth=10;
  composite.setLayout(layout);
switch (style) {
case USER_PROPERTY:
    new Label(composite,SWT.NONE).setText(LABEL_PROPERTY_NAME);
  break;
case NAMED_EXPRESSION:
new Label(composite,SWT.NONE).setText(LABEL_EXPRESSION_NAME);
break;
}
nameEditor=new Text(composite,SWT.BORDER | SWT.SINGLE);
GridData gd=new GridData(GridData.FILL_HORIZONTAL);
gd.widthHint=200;
nameEditor.setLayoutData(gd);
nameEditor.addModifyListener(new ModifyListener(){
public void modifyText(ModifyEvent e){
checkName();
}
}
);
messageLine=new CLabel(composite,SWT.NONE);
gd=new GridData(GridData.FILL_HORIZONTAL);
gd.horizontalSpan=2;
messageLine.setLayoutData(gd);
switch (style) {
case USER_PROPERTY:
new Label(composite,SWT.NONE).setText(LABEL_TYPE);
typeChooser=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
typeChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
for (int i=0; i < PROPERTY_TYPES.length; i++) {
typeChooser.add(PROPERTY_TYPES[i].getDisplayName(),i);
}
break;
case NAMED_EXPRESSION:
new Label(composite,SWT.NONE).setText(LABEL_DEFAULT_VALUE);
Composite subComposite=new Composite(composite,SWT.NONE);
subComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
subComposite.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
defaultValueEditor=new Text(subComposite,SWT.BORDER | SWT.SINGLE);
defaultValueEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
Button button=new Button(subComposite,SWT.PUSH);
button.setText(""String_Node_Str"");
button.setLayoutData(new GridData());
button.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
ExpressionBuilder builder=new ExpressionBuilder(UIUtil.getDefaultShell(),defaultValueEditor.getText());
builder.setExpressionProvier(new ExpressionProvider(input.getModuleHandle(),DEUtil.getDataSetList(input)));
if (builder.open() == OK) {
defaultValueEditor.setText(UIUtil.convertToGUIString(builder.getResult()));
}
}
}
);
}
return composite;
}",0.9405354181473584
78821,"private boolean matchDataType(DataSetItemModel column){
  if (column.getDataType() == DataType.UNKNOWN_TYPE) {
    return false;
  }
  String type=getSelectedDataType();
  if (type.equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
    return true;
  }
switch (column.getDataType()) {
case DataType.BOOLEAN_TYPE:
    return type.equals(DesignChoiceConstants.PARAM_TYPE_BOOLEAN);
case DataType.INTEGER_TYPE:
  return type.equals(DesignChoiceConstants.PARAM_TYPE_DECIMAL) || type.equals(DesignChoiceConstants.PARAM_TYPE_FLOAT);
case DataType.DATE_TYPE:
return type.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME);
case DataType.DECIMAL_TYPE:
return type.equals(DesignChoiceConstants.PARAM_TYPE_DECIMAL) || type.equals(DesignChoiceConstants.PARAM_TYPE_FLOAT);
case DataType.DOUBLE_TYPE:
return type.equals(DesignChoiceConstants.PARAM_TYPE_FLOAT);
}
return false;
}","private boolean matchDataType(ScalarParameterHandle handle,DataSetItemModel column){
  if (column.getDataType() == DataType.UNKNOWN_TYPE) {
    return false;
  }
  String type=handle.getDataType();
  if (handle == selectedParameter) {
    type=getSelectedDataType();
  }
  if (type.equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
    return true;
  }
switch (column.getDataType()) {
case DataType.BOOLEAN_TYPE:
    return type.equals(DesignChoiceConstants.PARAM_TYPE_BOOLEAN);
case DataType.INTEGER_TYPE:
  return type.equals(DesignChoiceConstants.PARAM_TYPE_DECIMAL) || type.equals(DesignChoiceConstants.PARAM_TYPE_FLOAT);
case DataType.DATE_TYPE:
return type.equals(DesignChoiceConstants.PARAM_TYPE_DATETIME);
case DataType.DECIMAL_TYPE:
return type.equals(DesignChoiceConstants.PARAM_TYPE_DECIMAL) || type.equals(DesignChoiceConstants.PARAM_TYPE_FLOAT);
case DataType.DOUBLE_TYPE:
return type.equals(DesignChoiceConstants.PARAM_TYPE_FLOAT);
}
return false;
}",0.9447181171319102
78822,"private void createDynamicParamsPart(Composite parent){
  Composite comp=new Composite(parent,SWT.NULL);
  GridLayout layout=new GridLayout(3,false);
  layout.marginHeight=0;
  layout.marginWidth=0;
  comp.setLayout(layout);
  comp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(comp,LABEL_DATA_SETS);
  dataSetsCombo=new Combo(comp,SWT.READ_ONLY);
  GridData data=new GridData();
  data.widthHint=120;
  dataSetsCombo.setLayoutData(data);
  dataSetsCombo.setItems(getDataSets());
  dataSetsCombo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      dataSet=getDataSet(dataSetsCombo.getText());
    }
  }
);
  createDSButton=new Button(comp,SWT.PUSH);
  createDSButton.setText(LABEL_BUTTON_CREATE_NEW_DATASET);
  createDSButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      new NewDataSetAction().run();
      refreshDataSets();
    }
  }
);
  Label label=new Label(comp,SWT.NULL);
  label.setText(LABEL_PARAMETERS);
  data=new GridData();
  data.horizontalSpan=3;
  label.setLayoutData(data);
  table=new Table(comp,SWT.FULL_SELECTION | SWT.HIDE_SELECTION | SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=3;
  data.heightHint=100;
  table.setLayoutData(data);
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        deleteRow();
      }
    }
  }
);
  int[] columnWidths=new int[]{180,145,145};
  String[] columnProps=new String[]{COLUMN_NAME,COLUMN_VALUE,COLUMN_DISPLAY_TEXT};
  String[] columnLabels=new String[]{COLUMN_NAME_LABEL,COLUMN_VALUE_LABEL,COLUMN_DISPLAY_TEXT_LABEL};
  cellEditors=new CellEditor[]{new TextCellEditor(table),new ComboBoxCellEditor(table,new String[0],SWT.READ_ONLY),new ComboBoxCellEditor(table,new String[0],SWT.READ_ONLY)};
  for (int i=0; i < columnProps.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(true);
    column.setText(columnLabels[i]);
    column.setWidth(columnWidths[i]);
  }
  valueTable=new TableViewer(table);
  valueTable.setCellEditors(cellEditors);
  valueTable.setColumnProperties(columnProps);
  valueTable.setContentProvider(contentProvider);
  valueTable.setLabelProvider(labelProvider);
  valueTable.setCellModifier(cellModifier);
  valueTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      ISelection selection=event.getSelection();
      Object param=((StructuredSelection)selection).getFirstElement();
      if (param != selectedParameter) {
        if (param instanceof ScalarParameterHandle) {
          try {
            saveParameterProperties();
            selectedParameter=(ScalarParameterHandle)param;
          }
 catch (          SemanticException e) {
            ExceptionHandler.handle(e);
            valueTable.setSelection(new StructuredSelection(selectedParameter));
          }
          refreshParameterProperties();
          updateButtons();
        }
      }
    }
  }
);
}","private void createDynamicParamsPart(Composite parent){
  Composite comp=new Composite(parent,SWT.NULL);
  GridLayout layout=new GridLayout(3,false);
  layout.marginHeight=0;
  layout.marginWidth=0;
  comp.setLayout(layout);
  comp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(comp,LABEL_DATA_SETS);
  dataSetsCombo=new Combo(comp,SWT.READ_ONLY);
  GridData data=new GridData();
  data.widthHint=120;
  dataSetsCombo.setLayoutData(data);
  dataSetsCombo.setItems(getDataSets());
  dataSetsCombo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      dataSet=getDataSet(dataSetsCombo.getText());
      refreshValueTable();
      updateButtons();
    }
  }
);
  createDSButton=new Button(comp,SWT.PUSH);
  createDSButton.setText(LABEL_BUTTON_CREATE_NEW_DATASET);
  createDSButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      new NewDataSetAction().run();
      refreshDataSets();
    }
  }
);
  Label label=new Label(comp,SWT.NULL);
  label.setText(LABEL_PARAMETERS);
  data=new GridData();
  data.horizontalSpan=3;
  label.setLayoutData(data);
  table=new Table(comp,SWT.FULL_SELECTION | SWT.HIDE_SELECTION | SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=3;
  data.heightHint=100;
  table.setLayoutData(data);
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        deleteRow();
      }
    }
  }
);
  int[] columnWidths=new int[]{180,145,145};
  String[] columnProps=new String[]{COLUMN_NAME,COLUMN_VALUE,COLUMN_DISPLAY_TEXT};
  String[] columnLabels=new String[]{COLUMN_NAME_LABEL,COLUMN_VALUE_LABEL,COLUMN_DISPLAY_TEXT_LABEL};
  cellEditors=new CellEditor[]{new TextCellEditor(table),new ComboBoxCellEditor(table,new String[0],SWT.READ_ONLY),new ComboBoxCellEditor(table,new String[0],SWT.READ_ONLY)};
  for (int i=0; i < columnProps.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(true);
    column.setText(columnLabels[i]);
    column.setWidth(columnWidths[i]);
  }
  valueTable=new TableViewer(table);
  valueTable.setCellEditors(cellEditors);
  valueTable.setColumnProperties(columnProps);
  valueTable.setContentProvider(contentProvider);
  valueTable.setLabelProvider(labelProvider);
  valueTable.setCellModifier(cellModifier);
  valueTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      ISelection selection=event.getSelection();
      Object param=((StructuredSelection)selection).getFirstElement();
      if (param != selectedParameter) {
        if (param instanceof ScalarParameterHandle) {
          try {
            saveParameterProperties();
            selectedParameter=(ScalarParameterHandle)param;
          }
 catch (          SemanticException e) {
            ExceptionHandler.handle(e);
            valueTable.setSelection(new StructuredSelection(selectedParameter));
          }
          refreshParameterProperties();
          updateButtons();
        }
      }
    }
  }
);
}",0.9922311995027968
78823,"private void setCellEditorItems(){
  ((ComboBoxCellEditor)cellEditors[1]).setItems(getDataSetColumns(true));
  ((ComboBoxCellEditor)cellEditors[2]).setItems(getDataSetColumns(false));
}","private void setCellEditorItems(){
  ((ComboBoxCellEditor)cellEditors[1]).setItems(getDataSetColumns(selectedParameter));
  ((ComboBoxCellEditor)cellEditors[2]).setItems(getDataSetColumns());
}",0.9470899470899472
78824,"public Object[] getElements(Object inputElement){
  ArrayList elementsList=new ArrayList(inputParameterGroup.getParameters().getContents());
  if (newParameter == null) {
    newParameter=DesignElementFactory.getInstance().newScalarParameter(null);
    try {
      newParameter.setControlType(DesignChoiceConstants.PARAM_CONTROL_LIST_BOX);
      newParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
  elementsList.add(newParameter);
  return elementsList.toArray();
}","public Object[] getElements(Object inputElement){
  ArrayList elementsList=new ArrayList(inputParameterGroup.getParameters().getContents());
  for (Iterator iter=elementsList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle handle=(ScalarParameterHandle)iter.next();
    String[] columns=getDataSetColumns(handle);
    boolean found=false;
    for (int i=0; i < columns.length; i++) {
      if (DEUtil.getColumnExpression(columns[i]).equals(handle.getValueExpr())) {
        found=true;
        break;
      }
    }
    if (!found) {
      try {
        handle.setValueExpr(null);
      }
 catch (      SemanticException e) {
        ExceptionHandler.handle(e);
      }
    }
  }
  if (newParameter == null) {
    newParameter=DesignElementFactory.getInstance().newScalarParameter(null);
    try {
      newParameter.setControlType(DesignChoiceConstants.PARAM_CONTROL_LIST_BOX);
      newParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
  elementsList.add(newParameter);
  return elementsList.toArray();
}",0.6768867924528302
78825,"private void updateButtons(){
  boolean okEnable=true;
  if (dataSet == null) {
    okEnable=false;
  }
 else {
    Iterator iter=inputParameterGroup.getParameters().iterator();
    if (!iter.hasNext()) {
      okEnable=false;
    }
 else {
      int count=0;
      while (iter.hasNext()) {
        Object obj=iter.next();
        if (obj instanceof ScalarParameterHandle) {
          ScalarParameterHandle param=(ScalarParameterHandle)obj;
          count++;
          if (param.getValueExpr() == null) {
            okEnable=false;
            break;
          }
        }
      }
      okEnable=(count != 0);
    }
  }
  getOkButton().setEnabled(okEnable);
}","private void updateButtons(){
  boolean okEnable=true;
  if (dataSet == null) {
    okEnable=false;
  }
 else {
    Iterator iter=inputParameterGroup.getParameters().iterator();
    if (!iter.hasNext()) {
      okEnable=false;
    }
 else {
      int count=0;
      while (iter.hasNext()) {
        Object obj=iter.next();
        if (obj instanceof ScalarParameterHandle) {
          ScalarParameterHandle param=(ScalarParameterHandle)obj;
          count++;
          if (param.getValueExpr() == null) {
            okEnable=false;
            break;
          }
        }
      }
      okEnable&=(count != 0);
    }
  }
  getOkButton().setEnabled(okEnable);
}",0.999244142101285
78826,"private void changeDataType(String type){
  initFormatField(type);
  String[] columns=getDataSetColumns(true);
  for (int i=0; i < columns.length; i++) {
    if (DEUtil.getColumnExpression(columns[i]).equals(selectedParameter.getValueExpr())) {
      updateButtons();
      return;
    }
  }
  try {
    selectedParameter.setValueExpr(null);
    valueTable.refresh();
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
  getOkButton().setEnabled(false);
}","private void changeDataType(String type){
  initFormatField(type);
  refreshValueTable();
  updateButtons();
}",0.3509369676320272
78827,"public boolean canModify(Object element,String property){
  if (element != selectedParameter) {
    return false;
  }
  if (element == newParameter) {
    if (!property.equals(COLUMN_VALUE)) {
      return false;
    }
  }
 else   if (property.equals(COLUMN_NAME)) {
    return false;
  }
  if (property.equals(COLUMN_VALUE)) {
    if (getDataSetColumns(true).length == 0) {
      return false;
    }
  }
  setCellEditorItems();
  return true;
}","public boolean canModify(Object element,String property){
  if (element != selectedParameter) {
    return false;
  }
  if (element == newParameter) {
    if (!property.equals(COLUMN_VALUE)) {
      return false;
    }
  }
 else   if (property.equals(COLUMN_NAME)) {
    return false;
  }
  if (property.equals(COLUMN_VALUE)) {
    if (getDataSetColumns((ScalarParameterHandle)element).length == 0) {
      return false;
    }
  }
  setCellEditorItems();
  return true;
}",0.962882096069869
78828,"public String getColumnText(Object element,int columnIndex){
  String value=null;
  ScalarParameterHandle paramHandle=null;
  if (element instanceof ScalarParameterHandle) {
    paramHandle=(ScalarParameterHandle)element;
  }
  if (paramHandle == newParameter) {
    if (columnIndex == 0) {
      value=LABEL_CREATE_NEW_PARAMETER;
    }
 else     if (columnIndex == 1) {
      value=LABEL_SELECT_A_VALUE_COLUMN;
    }
  }
 else {
switch (columnIndex) {
case 0:
{
        if (paramHandle != newParameter) {
          String paramName;
          if (paramHandle != selectedParameter) {
            paramName=paramHandle.getName();
          }
 else {
            paramName=paramNameEditor.getText().trim();
          }
          value=getDummyText(paramHandle) + paramName;
        }
        break;
      }
case 1:
{
      if (paramHandle.getValueExpr() != null) {
        value=getColumnName(paramHandle.getValueExpr());
      }
 else {
        value=LABEL_SELECT_A_VALUE_COLUMN;
      }
      break;
    }
case 2:
{
    value=getColumnName(paramHandle.getLabelExpr());
    if (value == null) {
      value=LABEL_SELECT_DISPLAY_COLUMN;
    }
    break;
  }
}
}
if (value == null) {
value=""String_Node_Str"";
}
return value;
}","public String getColumnText(Object element,int columnIndex){
  String value=null;
  ScalarParameterHandle paramHandle=null;
  if (element instanceof ScalarParameterHandle) {
    paramHandle=(ScalarParameterHandle)element;
  }
  if (paramHandle == newParameter) {
    if (columnIndex == 0) {
      value=LABEL_CREATE_NEW_PARAMETER;
    }
 else     if (columnIndex == 1) {
      value=LABEL_SELECT_A_VALUE_COLUMN;
    }
  }
 else {
switch (columnIndex) {
case 0:
{
        if (paramHandle != newParameter) {
          String paramName;
          if (paramHandle != selectedParameter) {
            paramName=paramHandle.getName();
          }
 else {
            paramName=paramNameEditor.getText().trim();
          }
          value=getDummyText(paramHandle) + paramName;
        }
        break;
      }
case 1:
{
      if (paramHandle.getValueExpr() != null) {
        value=getColumnName(paramHandle.getValueExpr());
      }
 else       if (getDataSetColumns(paramHandle).length > 0) {
        value=LABEL_SELECT_A_VALUE_COLUMN;
      }
 else {
        value=LABEL_NO_COLUMN_AVAILABLE;
      }
      break;
    }
case 2:
{
    value=getColumnName(paramHandle.getLabelExpr());
    if (value == null) {
      if (getDataSetColumns().length > 0) {
        value=LABEL_SELECT_DISPLAY_COLUMN;
      }
 else {
        value=LABEL_NO_COLUMN_AVAILABLE;
      }
    }
    break;
  }
}
}
if (value == null) {
value=""String_Node_Str"";
}
return value;
}",0.91713535808024
78829,"private void createOptionsPart(Composite parent){
  optionsGroup=new Group(parent,SWT.NULL);
  optionsGroup.setText(LABEL_GROUP_MORE_OPTIONS);
  optionsGroup.setLayout(new GridLayout(2,false));
  optionsGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(optionsGroup,LABEL_HELP_TEXT);
  helpTextEditor=new Text(optionsGroup,SWT.BORDER);
  helpTextEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lable=new Label(optionsGroup,SWT.NULL);
  lable.setText(LABEL_FORMAT_AS);
  lable.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  Composite formatArea=new Composite(optionsGroup,SWT.NONE);
  formatArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  formatArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  formatField=new Text(formatArea,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY);
  formatField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  changeFormat=new Button(formatArea,SWT.PUSH);
  changeFormat.setText(LABEL_CHANGE_FORMAT_BUTTON);
  setButtonLayoutData(changeFormat);
  changeFormat.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      popupFormatBuilder(true);
    }
  }
);
  Group preview=new Group(formatArea,SWT.NULL);
  preview.setText(LABEL_PREVIEW_WITH_FORMAT);
  preview.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  preview.setLayout(new GridLayout());
  previewLable=new Label(preview,SWT.CENTER | SWT.HORIZONTAL | SWT.VIRTUAL);
  previewLable.setText(""String_Node_Str"");
  previewLable.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(optionsGroup,LABEL_LIST_LIMIT);
  Composite composite=new Composite(optionsGroup,SWT.NULL);
  composite.setLayout(UIUtil.createGridLayoutWithoutMargin(2,true));
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite limitArea=new Composite(composite,SWT.NULL);
  limitArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,true));
  limitArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  listLimit=new Text(limitArea,SWT.BORDER);
  listLimit.setLayoutData(new GridData());
  listLimit.addModifyListener(new ModifyListener(){
    private String oldValue=""String_Node_Str"";
    public void modifyText(    ModifyEvent e){
      try {
        if (!StringUtil.isBlank(listLimit.getText())) {
          Integer.parseInt(listLimit.getText());
          oldValue=listLimit.getText();
        }
      }
 catch (      NumberFormatException e1) {
        ExceptionHandler.openErrorMessageBox(ERROR_TITLE_INVALID_LIST_LIMIT,MessageFormat.format(ERROR_MSG_INVALID_LIST_LIMIT,new Object[]{Integer.toString(Integer.MAX_VALUE)}));
        listLimit.setText(oldValue);
      }
    }
  }
);
  new Label(limitArea,SWT.NONE).setText(LABEL_VALUES);
  allowNull=new Button(composite,SWT.CHECK);
  allowNull.setText(LABEL_ALLOW_NULL_VALUE);
  allowNull.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  allowNull.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (selectedParameter != null && selectedParameter != newParameter) {
        try {
          selectedParameter.setAllowNull(allowNull.getSelection());
        }
 catch (        SemanticException e1) {
          ExceptionHandler.handle(e1);
        }
      }
    }
  }
);
}","private void createOptionsPart(Composite parent){
  optionsGroup=new Group(parent,SWT.NULL);
  optionsGroup.setText(LABEL_GROUP_MORE_OPTIONS);
  optionsGroup.setLayout(new GridLayout(2,false));
  optionsGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(optionsGroup,LABEL_HELP_TEXT);
  helpTextEditor=new Text(optionsGroup,SWT.BORDER);
  helpTextEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lable=new Label(optionsGroup,SWT.NULL);
  lable.setText(LABEL_FORMAT_AS);
  lable.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  Composite formatArea=new Composite(optionsGroup,SWT.NONE);
  formatArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,false));
  formatArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  formatField=new Text(formatArea,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY);
  formatField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  changeFormat=new Button(formatArea,SWT.PUSH);
  changeFormat.setText(LABEL_CHANGE_FORMAT_BUTTON);
  setButtonLayoutData(changeFormat);
  changeFormat.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      popupFormatBuilder(true);
    }
  }
);
  Group preview=new Group(formatArea,SWT.NULL);
  preview.setText(LABEL_PREVIEW_WITH_FORMAT);
  preview.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  preview.setLayout(new GridLayout());
  previewLable=new Label(preview,SWT.CENTER | SWT.HORIZONTAL | SWT.VIRTUAL);
  previewLable.setText(""String_Node_Str"");
  previewLable.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createLabel(optionsGroup,LABEL_LIST_LIMIT);
  Composite composite=new Composite(optionsGroup,SWT.NULL);
  composite.setLayout(UIUtil.createGridLayoutWithoutMargin(2,true));
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite limitArea=new Composite(composite,SWT.NULL);
  limitArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,true));
  limitArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  listLimit=new Text(limitArea,SWT.BORDER);
  listLimit.setLayoutData(new GridData());
  listLimit.addVerifyListener(new VerifyListener(){
    public void verifyText(    VerifyEvent e){
      e.doit=(""String_Node_Str"".indexOf(e.character) != -1);
    }
  }
);
  listLimit.addModifyListener(new ModifyListener(){
    private String oldValue=""String_Node_Str"";
    public void modifyText(    ModifyEvent e){
      try {
        if (!StringUtil.isBlank(listLimit.getText())) {
          Integer.parseInt(listLimit.getText());
          oldValue=listLimit.getText();
        }
      }
 catch (      NumberFormatException e1) {
        ExceptionHandler.openErrorMessageBox(ERROR_TITLE_INVALID_LIST_LIMIT,MessageFormat.format(ERROR_MSG_INVALID_LIST_LIMIT,new Object[]{Integer.toString(Integer.MAX_VALUE)}));
        listLimit.setText(oldValue);
      }
    }
  }
);
  new Label(limitArea,SWT.NONE).setText(LABEL_VALUES);
  allowNull=new Button(composite,SWT.CHECK);
  allowNull.setText(BUTTON_ALLOW_NULL_VALUE);
  allowNull.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  allowNull.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (selectedParameter != null && selectedParameter != newParameter) {
        try {
          selectedParameter.setAllowNull(allowNull.getSelection());
        }
 catch (        SemanticException e1) {
          ExceptionHandler.handle(e1);
        }
      }
    }
  }
);
}",0.973461650627005
78830,"private String[] getDataSetColumns(boolean needFilte){
  if (dataSet == null) {
    return new String[0];
  }
  DataSetItemModel[] models=DataSetManager.getCurrentInstance().getColumns(dataSet,true);
  if (models == null) {
    return new String[0];
  }
  ArrayList valueList=new ArrayList(models.length);
  for (int i=0; i < models.length; i++) {
    if (!needFilte || matchDataType(models[i])) {
      valueList.add(models[i].getName());
    }
  }
  return (String[])valueList.toArray(new String[0]);
}","private String[] getDataSetColumns(ScalarParameterHandle handle){
  if (dataSet == null) {
    return new String[0];
  }
  DataSetItemModel[] models=DataSetManager.getCurrentInstance().getColumns(dataSet,true);
  if (models == null) {
    return new String[0];
  }
  ArrayList valueList=new ArrayList(models.length);
  for (int i=0; i < models.length; i++) {
    if (handle == null || matchDataType(handle,models[i])) {
      valueList.add(models[i].getName());
    }
  }
  return (String[])valueList.toArray(new String[0]);
}",0.9281553398058252
78831,"private void saveParameterProperties() throws SemanticException {
  if (selectedParameter != null && selectedParameter != newParameter) {
    selectedParameter.setPromptText(UIUtil.convertToModelString(promptText.getText(),false));
    selectedParameter.setDefaultValue(UIUtil.convertToModelString(defaultValueEditor.getText(),true));
    selectedParameter.setHelpText(UIUtil.convertToModelString(helpTextEditor.getText(),true));
    if (StringUtil.isBlank(listLimit.getText())) {
      selectedParameter.setProperty(ScalarParameterHandle.LIST_LIMIT_PROP,null);
    }
 else {
      selectedParameter.setListlimit(Integer.parseInt(listLimit.getText()));
    }
    selectedParameter.setAllowNull(allowNull.getSelection());
    selectedParameter.setName(UIUtil.convertToModelString(paramNameEditor.getText(),true));
    refreshValueTable();
  }
  ;
}","private void saveParameterProperties() throws SemanticException {
  if (selectedParameter != null && selectedParameter != newParameter) {
    selectedParameter.setPromptText(UIUtil.convertToModelString(promptText.getText(),false));
    selectedParameter.setHelpText(UIUtil.convertToModelString(helpTextEditor.getText(),true));
    selectedParameter.setDefaultValue(UIUtil.convertToModelString(defaultValueEditor.getText(),true));
    if (StringUtil.isBlank(listLimit.getText())) {
      selectedParameter.setProperty(ScalarParameterHandle.LIST_LIMIT_PROP,null);
    }
 else {
      selectedParameter.setListlimit(Integer.parseInt(listLimit.getText()));
    }
    selectedParameter.setAllowNull(allowNull.getSelection());
    selectedParameter.setName(UIUtil.convertToModelString(paramNameEditor.getText(),true));
    refreshValueTable();
  }
  ;
}",0.9067296340023612
78832,"public String getDisplayText(Object element){
  if (element instanceof Object[]) {
    if (element instanceof Operator[]) {
      if (element == OPERATORS_ASSIGNMENT) {
        return DISPLAY_TEXT_ASSIGNMENT;
      }
 else       if (element == OPERATORS_COMPARISON) {
        return DISPLAY_TEXT_COMPARISON;
      }
 else       if (element == OPERATORS_COMPUTATIONAL) {
        return DISPLAY_TEXT_COMPUTATIONAL;
      }
 else       if (element == OPERATORS_LOGICAL) {
        return DISPLAY_TEXT_LOGICAL;
      }
    }
 else     if (element instanceof ILocalizableInfo[]) {
      ILocalizableInfo info=((ILocalizableInfo[])element)[1];
      StringBuffer displayText=new StringBuffer(info.getName());
      if (info instanceof IMethodInfo) {
        IMethodInfo method=(IMethodInfo)info;
        displayText.append(""String_Node_Str"");
        displayText.append(""String_Node_Str"");
        displayText.append(method.getReturnType());
      }
      return displayText.toString();
    }
    return ALL;
  }
 else   if (element instanceof String) {
    return (String)element;
  }
 else   if (element instanceof Operator) {
    return ((Operator)element).symbol;
  }
 else   if (element instanceof DesignElementHandle) {
    return ((DesignElementHandle)element).getQualifiedName();
  }
 else   if (element instanceof DataSetItemModel) {
    return ((DataSetItemModel)element).getName();
  }
  return element.toString();
}","public String getDisplayText(Object element){
  if (element instanceof Object[]) {
    if (element instanceof Operator[]) {
      if (element == OPERATORS_ASSIGNMENT) {
        return DISPLAY_TEXT_ASSIGNMENT;
      }
 else       if (element == OPERATORS_COMPARISON) {
        return DISPLAY_TEXT_COMPARISON;
      }
 else       if (element == OPERATORS_COMPUTATIONAL) {
        return DISPLAY_TEXT_COMPUTATIONAL;
      }
 else       if (element == OPERATORS_LOGICAL) {
        return DISPLAY_TEXT_LOGICAL;
      }
    }
 else     if (element instanceof ILocalizableInfo[]) {
      ILocalizableInfo info=((ILocalizableInfo[])element)[1];
      StringBuffer displayText=new StringBuffer(info.getName());
      if (info instanceof IMethodInfo) {
        IMethodInfo method=(IMethodInfo)info;
        displayText.append(""String_Node_Str"");
        displayText.append(""String_Node_Str"");
        displayText.append(method.getReturnType());
      }
      return displayText.toString();
    }
    return ALL;
  }
 else   if (element instanceof String) {
    return (String)element;
  }
 else   if (element instanceof Operator) {
    return ((Operator)element).symbol;
  }
 else   if (element instanceof DesignElementHandle) {
    return ((DesignElementHandle)element).getQualifiedName();
  }
 else   if (element instanceof DataSetItemModel) {
    return ((DataSetItemModel)element).getDisplayName();
  }
  return element.toString();
}",0.9975412715138744
78833,"public void execute(ReportItemDesign item,IContentEmitter emitter){
  BirtTimer timer=new BirtTimer();
  timer.start();
  TableItemDesign tableDesign=(TableItemDesign)item;
  tableInfo=new TABLEINFO(tableDesign);
  logger.log(Level.FINEST,""String_Node_Str"");
  ITableContent tableContent=report.createTableContent();
  assert(tableContent instanceof TableContent);
  IContent parent=context.getContent();
  context.pushContent(tableContent);
  logger.log(Level.FINEST,""String_Node_Str"");
  openResultSet(item);
  logger.log(Level.FINEST,""String_Node_Str"");
  initializeContent(parent,item,tableContent);
  processStyle(item,tableContent);
  processVisibility(item,tableContent);
  processBookmark(item,tableContent);
  processAction(item,tableContent);
  for (int i=0; i < tableDesign.getColumnCount(); i++) {
    ColumnDesign columnDesign=tableDesign.getColumn(i);
    Column column=new Column();
    column.setStyleClass(columnDesign.getStyleName());
    column.setWidth(columnDesign.getWidth());
    tableContent.addColumn(column);
  }
  if (context.isInFactory()) {
    TableScriptExecutor.handleOnCreate((TableContent)tableContent,context);
  }
  startTOCEntry(tableContent);
  if (emitter != null) {
    emitter.startTable(tableContent);
  }
  accessQuery(tableDesign,emitter);
  if (emitter != null) {
    emitter.endTable(tableContent);
  }
  finishTOCEntry();
  context.popContent();
  closeResultSet();
  logger.log(Level.FINEST,""String_Node_Str"");
  timer.stop();
  timer.logTimeTaken(logger,Level.FINEST,context.getTaskIDString(),""String_Node_Str"");
}","public void execute(ReportItemDesign item,IContentEmitter emitter){
  BirtTimer timer=new BirtTimer();
  timer.start();
  TableItemDesign tableDesign=(TableItemDesign)item;
  tableInfo=new TABLEINFO(tableDesign);
  logger.log(Level.FINEST,""String_Node_Str"");
  ITableContent tableContent=report.createTableContent();
  assert(tableContent instanceof TableContent);
  ((TableContent)tableContent).setHeaderRepeat(tableDesign.getRepeatHeader());
  IContent parent=context.getContent();
  context.pushContent(tableContent);
  logger.log(Level.FINEST,""String_Node_Str"");
  openResultSet(item);
  logger.log(Level.FINEST,""String_Node_Str"");
  initializeContent(parent,item,tableContent);
  processStyle(item,tableContent);
  processVisibility(item,tableContent);
  processBookmark(item,tableContent);
  processAction(item,tableContent);
  for (int i=0; i < tableDesign.getColumnCount(); i++) {
    ColumnDesign columnDesign=tableDesign.getColumn(i);
    Column column=new Column();
    column.setStyleClass(columnDesign.getStyleName());
    column.setWidth(columnDesign.getWidth());
    tableContent.addColumn(column);
  }
  if (context.isInFactory()) {
    TableScriptExecutor.handleOnCreate((TableContent)tableContent,context);
  }
  startTOCEntry(tableContent);
  if (emitter != null) {
    emitter.startTable(tableContent);
  }
  accessQuery(tableDesign,emitter);
  if (emitter != null) {
    emitter.endTable(tableContent);
  }
  finishTOCEntry();
  context.popContent();
  closeResultSet();
  logger.log(Level.FINEST,""String_Node_Str"");
  timer.stop();
  timer.logTimeTaken(logger,Level.FINEST,context.getTaskIDString(),""String_Node_Str"");
}",0.9753510140405616
78834,"/** 
 * Return the table's ancestor path. A table's ancestor path is the common prefix that all table columns' pathes shared. Table's rootpath should only equal to, or prefixed with a table's ancestor path.
 * @return
 */
public String getAncestor(){
  String[] columnNames=this.getColumnNames();
  if (columnNames.length == 1)   return getPath(columnNames[0]);
  String[] paths=new String[columnNames.length];
  for (int i=0; i < paths.length; i++) {
    paths[i]=getPath(columnNames[i]);
  }
  String theLongestPath=""String_Node_Str"";
  for (int i=0; i < paths.length; i++) {
    if (paths[i].split(""String_Node_Str"").length > theLongestPath.split(""String_Node_Str"").length)     theLongestPath=paths[i];
  }
  boolean isAbsolutePath=false;
  if (theLongestPath.startsWith(""String_Node_Str"")) {
    isAbsolutePath=false;
    theLongestPath=theLongestPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    isAbsolutePath=true;
    theLongestPath=theLongestPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  String[] temp=theLongestPath.split(""String_Node_Str"");
  String prefix=isAbsolutePath ? ""String_Node_Str"" : ""String_Node_Str"";
  for (int j=0; j < temp.length; j++) {
    String attempedPrefix=j == 0 ? prefix + temp[j] : prefix + ""String_Node_Str"" + temp[j];
    for (int i=0; i < paths.length; i++) {
      if (!paths[i].startsWith(attempedPrefix))       return prefix;
    }
    prefix=attempedPrefix;
  }
  return prefix;
}","/** 
 * Return the table's ancestor path. A table's ancestor path is the common prefix that all table columns' pathes shared. Table's rootpath should only equal to, or prefixed with a table's ancestor path.
 * @return
 */
public String getAncestor(){
  String[] columnNames=this.getColumnNames();
  if (columnNames.length == 1)   return getPath(columnNames[0]);
  String[] paths=new String[columnNames.length];
  for (int i=0; i < paths.length; i++) {
    paths[i]=getPath(columnNames[i]).replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  String theLongestPath=""String_Node_Str"";
  for (int i=0; i < paths.length; i++) {
    if (paths[i].split(""String_Node_Str"").length > theLongestPath.split(""String_Node_Str"").length)     theLongestPath=paths[i];
  }
  boolean isAbsolutePath=false;
  if (theLongestPath.startsWith(""String_Node_Str"")) {
    isAbsolutePath=false;
    theLongestPath=theLongestPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    isAbsolutePath=true;
    theLongestPath=theLongestPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  String[] temp=theLongestPath.split(""String_Node_Str"");
  String prefix=isAbsolutePath ? ""String_Node_Str"" : ""String_Node_Str"";
  for (int j=0; j < temp.length; j++) {
    String attempedPrefix=j == 0 ? prefix + temp[j] : prefix + ""String_Node_Str"" + temp[j];
    for (int i=0; i < paths.length; i++) {
      if (!paths[i].startsWith(attempedPrefix))       return prefix;
    }
    prefix=attempedPrefix;
  }
  return prefix;
}",0.9831763122476448
78835,"public void run(){
  XMLReader xr;
  try {
    xr=new SAXParser();
    xr.setContentHandler(this);
    xr.setErrorHandler(this);
    Reader file=new InputStreamReader(new File(xmlFile).toURL().openStream());
    xr.parse(new InputSource(file));
  }
 catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    this.alive=false;
    spConsumer.wakeup();
  }
}","public void run(){
  XMLReader xr;
  try {
    xr=new SAXParser();
    xr.setContentHandler(this);
    xr.setErrorHandler(this);
    URL url=null;
    Reader file=null;
    try {
      File f=new File(xmlFile);
      url=f.toURL();
      file=new InputStreamReader(url.openStream());
    }
 catch (    IOException e) {
      url=null;
    }
    if (url == null) {
      url=new URL(xmlFile);
    }
    file=new InputStreamReader(url.openStream());
    xr.parse(new InputSource(file));
  }
 catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  MalformedURLException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    this.alive=false;
    spConsumer.wakeup();
  }
}",0.6929392446633826
78836,"/** 
 * @param rs
 * @param rinfo
 * @param fileName
 * @param tName
 * @throws OdaException
 */
public SaxParserConsumer(ResultSet rs,RelationInformation rinfo,String fileName,String tName) throws OdaException {
  this.resultSet=rs;
  cachedResultSetRowNo=0;
  currentAvailableMaxLineNo=-1;
  tableName=tName;
  relationInfo=rinfo;
  currentRowNo=0;
  cachedResultSet=new String[Constants.CACHED_RESULT_SET_LENGTH][resultSet.getMetaData().getColumnCount()];
  this.rootPath=relationInfo.getTableRootPath(tableName);
  this.ancestorPath=relationInfo.getTableAncestor(tableName);
  this.isNotNestedXMLTable=rootPath.equals(ancestorPath);
  this.namesOfCachedColumns=relationInfo.getTableNestedXMLColumnNames(tableName);
  this.namesOfColumns=relationInfo.getTableColumnNames(tableName);
  if (!isNotNestedXMLTable) {
    spNestedQueryHelper=new SaxParserNestedQueryHelper(rinfo,fileName,tName);
    while (spNestedQueryHelper.isPrepared()) {
      try {
synchronized (this) {
          wait(1000);
        }
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
  sp=new SaxParser(fileName,this);
  spThread=new Thread(sp);
  spThread.start();
}","/** 
 * @param rs
 * @param rinfo
 * @param fileName
 * @param tName
 * @throws OdaException
 */
public SaxParserConsumer(ResultSet rs,RelationInformation rinfo,String fileName,String tName) throws OdaException {
  this.resultSet=rs;
  cachedResultSetRowNo=0;
  currentAvailableMaxLineNo=-1;
  tableName=tName;
  relationInfo=rinfo;
  currentRowNo=0;
  cachedResultSet=new String[Constants.CACHED_RESULT_SET_LENGTH][resultSet.getMetaData().getColumnCount()];
  this.rootPath=relationInfo.getTableRootPath(tableName);
  this.ancestorPath=relationInfo.getTableAncestor(tableName);
  this.isNotNestedXMLTable=rootPath.equals(ancestorPath);
  this.namesOfCachedColumns=relationInfo.getTableNestedXMLColumnNames(tableName);
  this.namesOfColumns=relationInfo.getTableColumnNames(tableName);
  if (!isNotNestedXMLTable) {
    spNestedQueryHelper=new SaxParserNestedQueryHelper(rinfo,fileName,tName);
    while (!spNestedQueryHelper.isPrepared()) {
      try {
synchronized (this) {
          wait(1000);
        }
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
  sp=new SaxParser(fileName,this);
  spThread=new Thread(sp);
  spThread.start();
}",0.9995782370307889
78837,"/** 
 * Creates a new multi line data item.
 * @param name the optional multi line data name. Can be <code>null</code>.
 * @return a handle to multi line data item
 */
public TextDataHandle newTextData(String name){
  String newName=getNewName(ReportDesignConstants.TEXT_ITEM,name);
  return factory.newTextData(newName);
}","/** 
 * Creates a new multi line data item.
 * @param name the optional multi line data name. Can be <code>null</code>.
 * @return a handle to multi line data item
 */
public TextDataHandle newTextData(String name){
  String newName=getNewName(ReportDesignConstants.TEXT_DATA_ITEM,name);
  return factory.newTextData(newName);
}",0.9923195084485408
78838,"/** 
 * Returns the created event if the given event is editpart event
 * @param event the selection changed event
 * @return the created event
 */
private List convertEventToGFE(ReportRequest event){
  if (event.getSource() == getGraphicalViewer()) {
    return null;
  }
  ArrayList tempList=new ArrayList();
  List list=event.getSelectionModelList();
  int size=list.size();
  if (size == 1 && list.get(0) instanceof RowHandle) {
    RowHandle handle=(RowHandle)list.get(0);
    if (handle.getRoot() == null) {
      return null;
    }
    RowHandleAdapter adapter=HandleAdapterFactory.getInstance().getRowHandleAdapter(handle);
    TableEditPart part=(TableEditPart)getGraphicalViewer().getEditPartRegistry().get(adapter.getTableParent());
    if (part != null) {
      part.selectRow(new int[]{adapter.getRowNumber()});
    }
    return null;
  }
  for (int i=0; i < size; i++) {
    Object obj=list.get(i);
    if (obj instanceof EditPart) {
      tempList.add(obj);
    }
 else {
      Object part=null;
      if (obj instanceof ReportElementModel) {
        obj=(((ReportElementModel)obj).getSlotHandle());
        part=getGraphicalViewer().getEditPartRegistry().get(new ListBandProxy((SlotHandle)obj));
      }
 else {
        part=getGraphicalViewer().getEditPartRegistry().get(obj);
      }
      if (part instanceof EditPart) {
        tempList.add(part);
      }
    }
  }
  if (tempList.isEmpty()) {
    return null;
  }
  return tempList;
}","/** 
 * Returns the created event if the given event is editpart event
 * @param event the selection changed event
 * @return the created event
 */
private List convertEventToGFE(ReportRequest event){
  if (event.getSource() == getGraphicalViewer()) {
    return null;
  }
  ArrayList tempList=new ArrayList();
  List list=event.getSelectionModelList();
  int size=list.size();
  if (size != 0 && list.get(0) instanceof RowHandle) {
    RowHandle handle=(RowHandle)list.get(0);
    RowHandleAdapter adapter=HandleAdapterFactory.getInstance().getRowHandleAdapter(handle);
    Object tableParent=adapter.getTableParent();
    TableEditPart part=(TableEditPart)getGraphicalViewer().getEditPartRegistry().get(tableParent);
    int[] selectRows=new int[]{adapter.getRowNumber()};
    for (int i=1; i < size; i++) {
      Object o=list.get(i);
      if (o instanceof RowHandle) {
        handle=(RowHandle)o;
        adapter=HandleAdapterFactory.getInstance().getRowHandleAdapter(handle);
        if (tableParent != adapter.getTableParent()) {
          return null;
        }
        int len=selectRows.length;
        int temp[]=new int[len + 1];
        System.arraycopy(selectRows,0,temp,0,len);
        temp[len]=adapter.getRowNumber();
        selectRows=temp;
      }
 else {
        return null;
      }
    }
    if (handle.getRoot() == null) {
      return null;
    }
    if (part != null) {
      Arrays.sort(selectRows);
      int len=selectRows.length;
      if (len > 1) {
        for (int i=0; i < len - 1; i++) {
          if (selectRows[i + 1] - selectRows[i] != 1) {
            return null;
          }
        }
      }
      part.selectRow(selectRows);
    }
    return null;
  }
  for (int i=0; i < size; i++) {
    Object obj=list.get(i);
    if (obj instanceof EditPart) {
      tempList.add(obj);
    }
 else {
      Object part=null;
      if (obj instanceof ReportElementModel) {
        obj=(((ReportElementModel)obj).getSlotHandle());
        part=getGraphicalViewer().getEditPartRegistry().get(new ListBandProxy((SlotHandle)obj));
      }
 else {
        part=getGraphicalViewer().getEditPartRegistry().get(obj);
      }
      if (part instanceof EditPart) {
        tempList.add(part);
      }
    }
  }
  if (tempList.isEmpty()) {
    return null;
  }
  return tempList;
}",0.5263718700053277
78839,"public String getColumnText(Object element,int columnIndex){
  SelectionChoice choice=((SelectionChoice)element);
  final int valueIndex=valueTable.getColumnProperties().length - 2;
  String text=null;
  if (valueTable.getColumnProperties().length == 4 && columnIndex == 1) {
    if (isDefaultChoice(choice)) {
      text=FLAG_DEFAULT;
    }
  }
 else   if (columnIndex == valueIndex) {
    if (choice == dummyChoice) {
      text=INPUT_PROPMT;
    }
 else {
      text=format(choice.getValue());
    }
  }
 else   if (columnIndex == valueIndex + 1) {
    text=choice.getLabel();
  }
  if (text == null) {
    text=""String_Node_Str"";
  }
  return text;
}","public String getColumnText(Object element,int columnIndex){
  SelectionChoice choice=((SelectionChoice)element);
  final int valueIndex=valueTable.getColumnProperties().length - 2;
  String text=null;
  if (valueTable.getColumnProperties().length == 4 && columnIndex == 1) {
    if (isDefaultChoice(choice)) {
      text=FLAG_DEFAULT;
    }
  }
 else   if (columnIndex == valueIndex) {
    if (choice == dummyChoice) {
      text=INPUT_PROPMT;
    }
 else {
      text=choice.getValue();
    }
  }
 else   if (columnIndex == valueIndex + 1) {
    text=choice.getLabel();
    if (text == null) {
      text=format(choice.getValue());
    }
  }
  if (text == null) {
    text=""String_Node_Str"";
  }
  return text;
}",0.9444444444444444
78840,"public void testContainElement() throws Throwable {
  showPerspective();
  openEditor();
  getView(DATA_EXPLORER_ID).setFocus();
  DataViewPage dataViewPage=(DataViewPage)((DataView)getView(DATA_EXPLORER_ID)).getCurrentPage();
  TreeViewer dataTreeViewer=(TreeViewer)PrivateAccessor.getField(dataViewPage,""String_Node_Str"");
  ContentOutlinePage outlinePage=(ContentOutlinePage)PrivateAccessor.getField(UIUtil.getActiveReportEditor(),""String_Node_Str"");
  TreeViewer outlineTreeViewer=(TreeViewer)PrivateAccessor.getField(outlinePage,""String_Node_Str"");
  ReportDesignHandle reportHandle=(ReportDesignHandle)SessionHandleAdapter.getInstance().getReportDesignHandle();
  DataSourceHandle dataSource=reportHandle.getElementFactory().newOdaDataSource(null,null);
  DataSetHandle dataSet=reportHandle.getElementFactory().newScriptDataSet(null);
  dataSet.setDataSource(dataSource.getName());
  ScalarParameterHandle param1=reportHandle.getElementFactory().newScalarParameter(""String_Node_Str"");
  ScalarParameterHandle param2=reportHandle.getElementFactory().newScalarParameter(""String_Node_Str"");
  ParameterGroupHandle paramGroup=reportHandle.getElementFactory().newParameterGroup(null);
  paramGroup.addElement(param2,ParameterGroupHandle.PARAMETERS_SLOT);
  reportHandle.getDataSources().add(dataSource);
  reportHandle.getDataSets().add(dataSet);
  reportHandle.getParameters().add(param1);
  reportHandle.getParameters().add(paramGroup);
  LabelHandle label1=reportHandle.getElementFactory().newLabel(null);
  LabelHandle label2=reportHandle.getElementFactory().newLabel(null);
  TextItemHandle text=reportHandle.getElementFactory().newTextItem(null);
  ListHandle list=reportHandle.getElementFactory().newList(null);
  ListGroupHandle listGroup=reportHandle.getElementFactory().newListGroup();
  listGroup.getHeader().add(label2);
  list.getDetail().add(text);
  list.getGroups().add(listGroup);
  reportHandle.getBody().add(label1);
  reportHandle.getBody().add(list);
  getView(DATA_EXPLORER_ID).setFocus();
  dataTreeViewer.refresh();
  getView(OUTLINE_ID).setFocus();
  outlineTreeViewer.refresh();
  try {
    assertTrue(UIUtil.containElement(outlineTreeViewer,label1));
    assertTrue(UIUtil.containElement(outlineTreeViewer,label2));
    assertTrue(UIUtil.containElement(outlineTreeViewer,text));
    assertTrue(UIUtil.containElement(outlineTreeViewer,list));
    assertTrue(UIUtil.containElement(outlineTreeViewer,listGroup));
    assertTrue(UIUtil.containElement(dataTreeViewer,dataSource));
    assertTrue(UIUtil.containElement(dataTreeViewer,dataSet));
    assertTrue(UIUtil.containElement(dataTreeViewer,param1));
    assertTrue(UIUtil.containElement(dataTreeViewer,paramGroup));
    assertTrue(UIUtil.containElement(dataTreeViewer,param2));
    assertFalse(UIUtil.containElement(outlineTreeViewer,dataSource));
    assertFalse(UIUtil.containElement(outlineTreeViewer,dataSet));
    assertFalse(UIUtil.containElement(outlineTreeViewer,param1));
    assertFalse(UIUtil.containElement(outlineTreeViewer,paramGroup));
    assertFalse(UIUtil.containElement(outlineTreeViewer,param2));
    assertFalse(UIUtil.containElement(dataTreeViewer,label1));
    assertFalse(UIUtil.containElement(dataTreeViewer,label2));
    assertFalse(UIUtil.containElement(dataTreeViewer,text));
    assertFalse(UIUtil.containElement(dataTreeViewer,list));
    assertFalse(UIUtil.containElement(dataTreeViewer,listGroup));
  }
 catch (  Throwable e) {
    throw e;
  }
 finally {
    closeEditor();
  }
}","public void testContainElement() throws Throwable {
  showPerspective();
  openEditor();
  getView(DATA_EXPLORER_ID).setFocus();
  DataViewPage dataViewPage=(DataViewPage)((DataView)getView(DATA_EXPLORER_ID)).getCurrentPage();
  TreeViewer dataTreeViewer=(TreeViewer)PrivateAccessor.getField(dataViewPage,""String_Node_Str"");
  ContentOutlinePage outlinePage=(ContentOutlinePage)PrivateAccessor.getField(UIUtil.getActiveReportEditor(),""String_Node_Str"");
  TreeViewer outlineTreeViewer=(TreeViewer)PrivateAccessor.getField(outlinePage,""String_Node_Str"");
  ReportDesignHandle reportHandle=(ReportDesignHandle)SessionHandleAdapter.getInstance().getReportDesignHandle();
  DataSourceHandle dataSource=reportHandle.getElementFactory().newOdaDataSource(null,null);
  DataSetHandle dataSet=reportHandle.getElementFactory().newScriptDataSet(null);
  dataSet.setDataSource(dataSource.getName());
  ScalarParameterHandle param1=reportHandle.getElementFactory().newScalarParameter(""String_Node_Str"");
  ScalarParameterHandle param2=reportHandle.getElementFactory().newScalarParameter(""String_Node_Str"");
  ParameterGroupHandle paramGroup=reportHandle.getElementFactory().newParameterGroup(null);
  paramGroup.addElement(param2,ParameterGroupHandle.PARAMETERS_SLOT);
  reportHandle.getDataSources().add(dataSource);
  reportHandle.getDataSets().add(dataSet);
  reportHandle.getParameters().add(param1);
  reportHandle.getParameters().add(paramGroup);
  LabelHandle label1=reportHandle.getElementFactory().newLabel(null);
  LabelHandle label2=reportHandle.getElementFactory().newLabel(null);
  TextItemHandle text=reportHandle.getElementFactory().newTextItem(null);
  ListHandle list=reportHandle.getElementFactory().newList(null);
  ListGroupHandle listGroup=reportHandle.getElementFactory().newListGroup();
  listGroup.getHeader().add(label2);
  list.getDetail().add(text);
  list.getGroups().add(listGroup);
  reportHandle.getBody().add(label1);
  reportHandle.getBody().add(list);
  getView(DATA_EXPLORER_ID).setFocus();
  dataTreeViewer.refresh();
  getView(OUTLINE_ID).setFocus();
  outlineTreeViewer.refresh();
  try {
    assertTrue(UIUtil.containElement(outlineTreeViewer,label1));
    assertTrue(UIUtil.containElement(outlineTreeViewer,label2));
    assertTrue(UIUtil.containElement(outlineTreeViewer,text));
    assertTrue(UIUtil.containElement(outlineTreeViewer,list));
    assertTrue(UIUtil.containElement(outlineTreeViewer,listGroup));
    assertTrue(UIUtil.containElement(dataTreeViewer,dataSource));
    assertTrue(UIUtil.containElement(dataTreeViewer,dataSet));
    assertTrue(UIUtil.containElement(dataTreeViewer,param1));
    assertTrue(UIUtil.containElement(dataTreeViewer,paramGroup));
    assertTrue(UIUtil.containElement(dataTreeViewer,param2));
    assertTrue(UIUtil.containElement(outlineTreeViewer,dataSource));
    assertTrue(UIUtil.containElement(outlineTreeViewer,dataSet));
    assertTrue(UIUtil.containElement(outlineTreeViewer,param1));
    assertTrue(UIUtil.containElement(outlineTreeViewer,paramGroup));
    assertTrue(UIUtil.containElement(outlineTreeViewer,param2));
    assertFalse(UIUtil.containElement(dataTreeViewer,label1));
    assertFalse(UIUtil.containElement(dataTreeViewer,label2));
    assertFalse(UIUtil.containElement(dataTreeViewer,text));
    assertFalse(UIUtil.containElement(dataTreeViewer,list));
    assertFalse(UIUtil.containElement(dataTreeViewer,listGroup));
  }
 catch (  Throwable e) {
    throw e;
  }
 finally {
    closeEditor();
  }
}",0.8596818116669055
78841,"/** 
 * Checks the element after the paste action.
 * @param content the pasted element
 * @return a list containing parsing errors. Each element in the list is<code>ErrorDetail</code>.
 */
private List checkPostPasteErrors(DesignElement content){
  Module currentModule=getElementHandle().getEffectiveModule();
  String nameSpace=null;
  if (currentModule != null && currentModule instanceof Library)   nameSpace=((Library)currentModule).getNamespace();
  reviseNameSpace(content,nameSpace);
  List exceptionList=content.validateWithContents(getModule());
  List errorDetailList=ErrorDetail.convertExceptionList(exceptionList);
  return errorDetailList;
}","/** 
 * Checks the element after the paste action.
 * @param content the pasted element
 * @return a list containing parsing errors. Each element in the list is<code>ErrorDetail</code>.
 */
private List checkPostPasteErrors(DesignElement content){
  Module currentModule=getElementHandle().getEffectiveModule();
  String nameSpace=null;
  if (currentModule != null && currentModule instanceof Library)   nameSpace=((Library)currentModule).getNamespace();
  ModelUtil.reviseNameSpace(getElementHandle().getEffectiveModule(),content,nameSpace);
  List exceptionList=content.validateWithContents(getModule());
  List errorDetailList=ErrorDetail.convertExceptionList(exceptionList);
  return errorDetailList;
}",0.9632892804698971
78842,"private void switchToDrillthrough(){
  new Label(displayArea,SWT.NONE).setText(REQUIED_MARK + LABEL_REPORT);
  locationEditor=new Text(displayArea,SWT.BORDER | SWT.SINGLE);
  locationEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  locationEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      initParamterBindings();
      updateButtons();
    }
  }
);
  createBrowerButton(displayArea,locationEditor,false,true);
  UIUtil.createBlankLabel(displayArea);
  messageLine=new CLabel(displayArea,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  messageLine.setLayoutData(gd);
  createBindingTable();
  createBookmarkBar(false);
  createTargetBar();
  createFormatBar();
}","private void switchToDrillthrough(){
  new Label(displayArea,SWT.NONE).setText(REQUIED_MARK + LABEL_REPORT);
  locationEditor=new Text(displayArea,SWT.BORDER | SWT.SINGLE);
  locationEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  locationEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      closeReport();
      initParamterBindings();
      updateButtons();
    }
  }
);
  createBrowerButton(displayArea,locationEditor,false,true);
  UIUtil.createBlankLabel(displayArea);
  messageLine=new CLabel(displayArea,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  messageLine.setLayoutData(gd);
  createBindingTable();
  createBookmarkBar(false);
  createTargetBar();
  createFormatBar();
}",0.986529826812059
78843,"private void initParamterBindings(){
  bindingList.clear();
  parameterList.clear();
  String errorMessage=null;
  String newFilename=locationEditor.getText().trim();
  if (newFilename.length() == 0) {
    errorMessage=ERROR_MSG_REPORT_REQUIRED;
  }
 else {
    try {
      reportHandle=SessionHandleAdapter.getInstance().getSessionHandle().openDesign(newFilename);
      for (Iterator iter=reportHandle.getAllParameters().iterator(); iter.hasNext(); ) {
        Object obj=iter.next();
        if (obj instanceof ParameterHandle) {
          parameterList.add(obj);
        }
 else         if (obj instanceof ParameterGroupHandle) {
          parameterList.addAll(((ParameterGroupHandle)obj).getParameters().getContents());
        }
      }
      if (newFilename.equals(inputHandle.getReportName())) {
        for (Iterator iter=inputHandle.paramBindingsIterator(); iter.hasNext(); ) {
          ParamBindingHandle handle=(ParamBindingHandle)iter.next();
          bindingList.add(handle.getStructure());
        }
      }
    }
 catch (    DesignFileException e) {
      errorMessage=ERROR_MSG_INVALID_REPORT;
    }
  }
  if (errorMessage != null) {
    messageLine.setText(errorMessage);
    messageLine.setImage(ERROR_ICON);
  }
 else {
    messageLine.setText(""String_Node_Str"");
    messageLine.setImage(null);
  }
  paramBindingTable.refresh();
  paramBindingTable.getTable().setEnabled(!parameterList.isEmpty());
  updateButtons();
}","private void initParamterBindings(){
  bindingList.clear();
  parameterList.clear();
  String errorMessage=null;
  String newFilename=locationEditor.getText().trim();
  if (newFilename.length() == 0) {
    errorMessage=ERROR_MSG_REPORT_REQUIRED;
  }
 else {
    try {
      reportHandle=SessionHandleAdapter.getInstance().getSessionHandle().openDesign(newFilename);
    }
 catch (    DesignFileException e) {
      try {
        reportHandle=SessionHandleAdapter.getInstance().getSessionHandle().openDesign(URIUtil.resolveAbsolutePath(getBasePath(),newFilename));
      }
 catch (      DesignFileException e1) {
        errorMessage=ERROR_MSG_INVALID_REPORT;
      }
    }
    if (reportHandle != null) {
      for (Iterator iter=reportHandle.getAllParameters().iterator(); iter.hasNext(); ) {
        Object obj=iter.next();
        if (obj instanceof ParameterHandle) {
          parameterList.add(obj);
        }
 else         if (obj instanceof ParameterGroupHandle) {
          parameterList.addAll(((ParameterGroupHandle)obj).getParameters().getContents());
        }
      }
      if (newFilename.equals(inputHandle.getReportName())) {
        for (Iterator iter=inputHandle.paramBindingsIterator(); iter.hasNext(); ) {
          ParamBindingHandle handle=(ParamBindingHandle)iter.next();
          bindingList.add(handle.getStructure());
        }
      }
    }
  }
  if (errorMessage != null) {
    messageLine.setText(errorMessage);
    messageLine.setImage(ERROR_ICON);
  }
 else {
    messageLine.setText(""String_Node_Str"");
    messageLine.setImage(null);
  }
  paramBindingTable.refresh();
  paramBindingTable.getTable().setEnabled(!parameterList.isEmpty());
  updateButtons();
}",0.4995215311004785
78844,"private void createBrowerButton(Composite parent,final Text text,final boolean needQuote,final boolean needFilter){
  Button button=new Button(parent,SWT.PUSH);
  button.setLayoutData(new GridData());
  button.setImage(IMAGE_OPEN_FILE);
  button.setToolTipText(TOOLTIP_BROWSE_FILE);
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(UIUtil.getDefaultShell());
      if (needFilter) {
        dialog.setFilterExtensions(new String[]{""String_Node_Str""});
      }
      try {
        String filename=dialog.open();
        if (filename != null) {
          if (needQuote) {
            filename=""String_Node_Str"" + filename + ""String_Node_Str"";
          }
          text.setText(filename);
        }
 else {
          text.setText(""String_Node_Str"");
        }
        updateButtons();
      }
 catch (      Exception ex) {
        ExceptionHandler.handle(ex);
      }
    }
  }
);
}","private void createBrowerButton(Composite parent,final Text text,final boolean needQuote,final boolean needFilter){
  Button button=new Button(parent,SWT.PUSH);
  button.setLayoutData(new GridData());
  button.setImage(IMAGE_OPEN_FILE);
  button.setToolTipText(TOOLTIP_BROWSE_FILE);
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(UIUtil.getDefaultShell());
      if (needFilter) {
        dialog.setFilterExtensions(new String[]{""String_Node_Str""});
      }
      try {
        String filename=dialog.open();
        if (filename != null) {
          if (needFilter) {
            filename=URIUtil.getRelativePath(getBasePath(),filename);
          }
          if (needQuote) {
            filename=""String_Node_Str"" + filename + ""String_Node_Str"";
          }
          text.setText(filename);
        }
 else {
          text.setText(""String_Node_Str"");
        }
        updateButtons();
      }
 catch (      Exception ex) {
        ExceptionHandler.handle(ex);
      }
    }
  }
);
}",0.94675701839303
78845,"/** 
 * @return socpe
 */
public abstract Scriptable getJavaScriptScope();","/** 
 * @return current top scope
 */
public Scriptable getJavaScriptScope(){
  return scope;
}",0.757396449704142
78846,"/** 
 * When mode is MODE_GENERATION, the output stream of archive will be used. When mode is MODE_PRESENTATION, the input stream of archive will be used. When mode is DIRECT_PRESENTATION, the archive will not be used.
 * @param mode
 * @param scope
 * @param archive
 * @return an instance of DataEngineContext
 */
public static DataEngineContext newInstance(int mode,Scriptable scope,IDocArchiveReader reader,IDocArchiveWriter writer) throws BirtException {
  return new DataEngineContextImpl(mode,scope,reader,writer);
}","/** 
 * When mode is MODE_GENERATION, the writer stream of archive will be used. When mode is MODE_PRESENTATION, the reader stream of archive will be used. When mode is DIRECT_PRESENTATION, the archive will not be used.
 * @param mode
 * @param scope
 * @param reader
 * @param writer
 * @return an instance of DataEngineContext
 */
public static DataEngineContext newInstance(int mode,Scriptable scope,IDocArchiveReader reader,IDocArchiveWriter writer) throws BirtException {
  return new DataEngineContext(mode,scope,reader,writer);
}",0.9461756373937678
78847,"/** 
 * According to the paramters of streamID and streamType, an output stream will be created for it. To make stream close simply, the output stream needs to be closed by caller, and then caller requires to add buffer stream layer when it is used.
 * @param streamID
 * @param subStreamID
 * @param streamType
 * @return output stream for specified streamID and streamType
 */
public abstract OutputStream getOutputStream(String streamID,String subStreamID,int streamType);","/** 
 * According to the paramters of streamID, subStreamID and streamType, an output stream will be created for it. To make stream close simply, the stream needs to be closed by caller, and then caller requires to add buffer stream layer when needed.
 * @param streamID
 * @param subStreamID
 * @param streamType
 * @return output stream for specified streamID, subStreamID and streamType
 */
public OutputStream getOutputStream(String streamID,String subStreamID,int streamType) throws DataException {
}",0.9183673469387756
78848,"/** 
 * @return mode
 */
public abstract int getMode();","/** 
 * @return current context mode
 */
public int getMode(){
  return mode;
}",0.6865671641791045
78849,"/** 
 * According to the paramters of streamID and streamType, an input stream will be created for it. To make stream close simply, the input stream needs to be closed by caller, and then caller requires to add buffer stream layer when it is used.
 * @param streamID
 * @param subStreamID
 * @param streamType
 * @return input stream for specified streamID and streamType
 */
public abstract InputStream getInputStream(String streamID,String subStreamID,int streamType);","/** 
 * According to the paramters of streamID, subStreamID and streamType, an input stream will be created for it. To make stream close simply, the stream needs to be closed by caller, and then caller requires to add buffer stream layer when needed.
 * @param streamID
 * @param subStreamID
 * @param streamType
 * @return input stream for specified streamID, subStreamID and streamType
 */
public InputStream getInputStream(String streamID,String subStreamID,int streamType) throws DataException {
}",0.9186405767250256
78850,"/** 
 * Determins whether one particula stream exists
 * @param streamID
 * @param subStreamID
 * @param streamType
 * @return boolean value
 */
public abstract boolean hasStream(String streamID,String subStreamID,int streamType);","/** 
 * Determins whether one particular stream exists
 * @param streamID
 * @param subStreamID
 * @param streamType
 * @return boolean value
 */
public boolean hasStream(String streamID,String subStreamID,int streamType){
  String relativePath=getPath(streamID,subStreamID,streamType);
  if (mode == MODE_GENERATION)   return writer.exists(relativePath);
 else   if (mode == MODE_GENERATION)   return reader.exists(relativePath);
 else   return false;
}",0.6461988304093568
78851,"public IStyle getContentStyle(){
  if (body == null) {
    if (generateBy instanceof MasterPageDesign) {
      body=report.createCellContent();
      body.setInlineStyle(((MasterPageDesign)generateBy).getContentStyle());
    }
  }
  return body.getComputedStyle();
}","public IStyle getContentStyle(){
  if (generateBy instanceof MasterPageDesign) {
    return ((MasterPageDesign)generateBy).getContentStyle();
  }
  return null;
}",0.7383177570093458
78852,"public void elementChanged(DesignElementHandle focus,NotificationEvent ev){
  if (!isActive()) {
    return;
  }
switch (ev.getEventType()) {
case NotificationEvent.CONTENT_EVENT:
{
      markDirty(true);
      if (focus instanceof TableHandle || focus instanceof TableGroupHandle) {
        addListenerToChildren();
      }
      refreshChildren();
      refreshVisuals();
      if (((ContentEvent)ev).getAction() == ContentEvent.REMOVE) {
        this.getViewer().select(this);
      }
      break;
    }
case NotificationEvent.PROPERTY_EVENT:
{
    markDirty(true);
    reLayout();
    PropertyEvent event=(PropertyEvent)ev;
    if (event.getPropertyName().startsWith(""String_Node_Str"")) {
      refreshVisuals();
    }
    if (event.getPropertyName().equals(StyleHandle.PADDING_TOP_PROP) || event.getPropertyName().equals(StyleHandle.PADDING_BOTTOM_PROP) || event.getPropertyName().equals(StyleHandle.PADDING_LEFT_PROP)|| event.getPropertyName().equals(StyleHandle.PADDING_RIGHT_PROP)) {
      invalidParent();
    }
    if (event.getPropertyName().equals(ReportItemHandle.WIDTH_PROP) || event.getPropertyName().equals(ReportItemHandle.HEIGHT_PROP)) {
      invalidParent();
    }
    refresh();
    break;
  }
case NotificationEvent.ELEMENT_DELETE_EVENT:
case NotificationEvent.TABLE_MODEL_EVENT:
{
  markDirty(true);
  refresh();
  break;
}
case NotificationEvent.STYLE_EVENT:
{
markDirty(true);
invalidParent();
refresh();
}
default :
break;
}
}","public void elementChanged(DesignElementHandle focus,NotificationEvent ev){
  if (!isActive()) {
    return;
  }
switch (ev.getEventType()) {
case NotificationEvent.CONTENT_EVENT:
{
      markDirty(true);
      if (focus instanceof TableHandle || focus instanceof TableGroupHandle) {
        addListenerToChildren();
      }
      refreshChildren();
      refreshVisuals();
      if (((ContentEvent)ev).getAction() == ContentEvent.REMOVE) {
        reselectTable();
      }
      break;
    }
case NotificationEvent.PROPERTY_EVENT:
{
    markDirty(true);
    reLayout();
    PropertyEvent event=(PropertyEvent)ev;
    if (event.getPropertyName().startsWith(""String_Node_Str"")) {
      refreshVisuals();
    }
    if (event.getPropertyName().equals(StyleHandle.PADDING_TOP_PROP) || event.getPropertyName().equals(StyleHandle.PADDING_BOTTOM_PROP) || event.getPropertyName().equals(StyleHandle.PADDING_LEFT_PROP)|| event.getPropertyName().equals(StyleHandle.PADDING_RIGHT_PROP)) {
      invalidParent();
    }
    if (event.getPropertyName().equals(ReportItemHandle.WIDTH_PROP) || event.getPropertyName().equals(ReportItemHandle.HEIGHT_PROP)) {
      invalidParent();
    }
    refresh();
    break;
  }
case NotificationEvent.ELEMENT_DELETE_EVENT:
case NotificationEvent.TABLE_MODEL_EVENT:
{
  markDirty(true);
  refresh();
  break;
}
case NotificationEvent.STYLE_EVENT:
{
markDirty(true);
invalidParent();
refresh();
}
default :
break;
}
}",0.9854671280276815
78853,"public void run(){
  try {
    FileDialog dialog;
    if (getSelection() instanceof ReportDesignHandle) {
      dialog=new FileDialog(UIUtil.getDefaultShell(),SWT.SAVE);
    }
 else {
      dialog=new FileDialog(UIUtil.getDefaultShell(),SWT.OPEN);
    }
    dialog.setFilterExtensions(new String[]{""String_Node_Str""});
    String filename=dialog.open();
    if (filename == null) {
      return;
    }
    pref=ReportPlugin.getDefault().getPreferenceStore().getInt(PREF_KEY);
    if (!filename.endsWith(""String_Node_Str"")) {
      filename+=""String_Node_Str"";
    }
    if (filename != null) {
      if (pref == PREF_PROMPT && new File(filename).exists()) {
        MessageDialog prefDialog=new MessageDialog(dialog.getParent(),DIALOG_TITLE,null,DIALOG_MESSAGE,MessageDialog.INFORMATION,new String[]{BUTTON_YES,BUTTON_NO,BUTTON_CANCEL},0){
          protected Control createCustomArea(          Composite parent){
            Composite container=new Composite(parent,SWT.NONE);
            GridLayout gridLayout=new GridLayout();
            gridLayout.marginWidth=20;
            container.setLayout(gridLayout);
            Button chkbox=new Button(container,SWT.CHECK);
            chkbox.setText(REMEMBER_DECISION);
            chkbox.addSelectionListener(new SelectionListener(){
              public void widgetSelected(              SelectionEvent e){
                saveDecision=!saveDecision;
              }
              public void widgetDefaultSelected(              SelectionEvent e){
                saveDecision=false;
              }
            }
);
            return super.createCustomArea(parent);
          }
          protected void buttonPressed(          int buttonId){
switch (buttonId) {
case 0:
              pref=PREF_OVERWRITE;
            break;
case 1:
          pref=PREF_NOT_OVERWRITE;
        break;
default :
      break;
  }
  if (saveDecision) {
    ReportPlugin.getDefault().getPreferenceStore().setValue(PREF_KEY,pref);
  }
  super.buttonPressed(buttonId);
}
}
;
if (prefDialog.open() == 2) return;
}
if (getSelection() instanceof ReportDesignHandle) {
ElementExportUtil.exportDesign((ReportDesignHandle)getSelection(),filename);
}
 else {
ElementExportUtil.exportElement((DesignElementHandle)getSelection(),filename,pref == PREF_OVERWRITE);
}
}
}
 catch (Exception e) {
ExceptionHandler.handle(e);
}
}","public void run(){
  try {
    FileDialog dialog;
    if (getSelection() instanceof ReportDesignHandle) {
      dialog=new FileDialog(UIUtil.getDefaultShell(),SWT.SAVE);
    }
 else {
      dialog=new FileDialog(UIUtil.getDefaultShell(),SWT.OPEN);
    }
    dialog.setFilterExtensions(new String[]{""String_Node_Str""});
    String filename=dialog.open();
    if (filename == null) {
      return;
    }
    pref=ReportPlugin.getDefault().getPreferenceStore().getInt(PREF_KEY);
    if (!filename.endsWith(""String_Node_Str"")) {
      filename+=""String_Node_Str"";
    }
    if (filename != null) {
      if (pref == PREF_PROMPT && new File(filename).exists()) {
        MessageDialog prefDialog=new MessageDialog(dialog.getParent(),DIALOG_TITLE,null,DIALOG_MESSAGE,MessageDialog.INFORMATION,new String[]{BUTTON_YES,BUTTON_NO,BUTTON_CANCEL},0){
          protected Control createCustomArea(          Composite parent){
            Composite container=new Composite(parent,SWT.NONE);
            GridLayout gridLayout=new GridLayout();
            gridLayout.marginWidth=20;
            container.setLayout(gridLayout);
            Button chkbox=new Button(container,SWT.CHECK);
            chkbox.setText(REMEMBER_DECISION);
            chkbox.addSelectionListener(new SelectionListener(){
              public void widgetSelected(              SelectionEvent e){
                saveDecision=!saveDecision;
              }
              public void widgetDefaultSelected(              SelectionEvent e){
                saveDecision=false;
              }
            }
);
            return super.createCustomArea(parent);
          }
          protected void buttonPressed(          int buttonId){
switch (buttonId) {
case 0:
              pref=PREF_OVERWRITE;
            break;
case 1:
          pref=PREF_NOT_OVERWRITE;
        break;
default :
      break;
  }
  if (saveDecision) {
    ReportPlugin.getDefault().getPreferenceStore().setValue(PREF_KEY,pref);
  }
  super.buttonPressed(buttonId);
}
}
;
if (prefDialog.open() == 2) return;
}
if (getSelection() instanceof ReportDesignHandle) {
ElementExportUtil.exportDesign((ReportDesignHandle)getSelection(),filename,false);
}
 else {
ElementExportUtil.exportElement((DesignElementHandle)getSelection(),filename,pref == PREF_OVERWRITE);
}
}
}
 catch (Exception e) {
ExceptionHandler.handle(e);
}
}",0.9987212276214834
78854,"/** 
 * Returns the iterator over all included libraries. Each one is the instance of <code>IncludeLibraryHandle</code>
 * @return the iterator over all included libraries.
 * @see IncludeLibraryHandle
 */
public Iterator includeLibrariesIterator(){
}","/** 
 * Returns the iterator over all included libraries. Each one is the instance of <code>IncludeLibraryHandle</code>
 * @return the iterator over all included libraries.
 * @see IncludedLibraryHandle
 */
public Iterator includeLibrariesIterator(){
}",0.9980119284294234
78855,"/** 
 * Creates an empty include library structure.
 * @return an empty include library structure
 */
public static IncludeLibrary createIncludeLibrary(){
  return new IncludeLibrary();
}","/** 
 * Creates an empty include library structure.
 * @return an empty include library structure
 */
public static IncludedLibrary createIncludeLibrary(){
  return new IncludedLibrary();
}",0.9946808510638298
78856,"/** 
 * Exports one design to library.
 * @param designToExport handle of the report design to export
 * @param targetLibraryHandle handle of target library
 * @throws SemanticException if error encountered when element name is duplicate in the target library.
 */
public static void exportDesign(ReportDesignHandle designToExport,LibraryHandle targetLibraryHandle) throws SemanticException {
  ElementExporter exporter=new ElementExporter(targetLibraryHandle);
  exporter.exportDesign(designToExport);
}","/** 
 * Exports one design to library.
 * @param designToExport handle of the report design to export
 * @param targetLibraryHandle handle of target library
 * @throws SemanticException if error encountered when element name is duplicate in the target library.
 */
public static void exportDesign(ReportDesignHandle designToExport,LibraryHandle targetLibraryHandle,boolean canOverride) throws SemanticException {
  ElementExporter exporter=new ElementExporter(targetLibraryHandle);
  exporter.exportDesign(designToExport,canOverride);
}",0.9692307692307692
78857,"public IStyle getContentStyle(){
  if (generateBy instanceof MasterPageDesign) {
    return ((MasterPageDesign)generateBy).getContentStyle();
  }
  return null;
}","public IStyle getContentStyle(){
  if (body == null) {
    if (generateBy instanceof MasterPageDesign) {
      body=report.createCellContent();
      body.setInlineStyle(((MasterPageDesign)generateBy).getContentStyle());
    }
  }
  return body.getComputedStyle();
}",0.6728971962616822
78858,"FilterByRow(List filters,Scriptable scope,JSRowObject scriptObj){
  this.filters=filters;
  this.scope=scope;
  this.scriptObj=scriptObj;
  logger.log(Level.FINER,""String_Node_Str"");
}","FilterByRow(List filters,Scriptable scope,JSRowObject scriptObj) throws DataException {
  isLegal(filters);
  this.filters=filters;
  this.scope=scope;
  this.scriptObj=scriptObj;
  logger.log(Level.FINER,""String_Node_Str"");
}",0.8975609756097561
78859,"public PageHint getPageHint(long pageNumber){
  if (pageHints == null) {
    loadPageHintStream();
  }
  if (pageHints != null) {
    if (pageNumber >= 0 && pageNumber < pageHints.size()) {
      return (PageHint)pageHints.get((int)pageNumber);
    }
  }
  return null;
}","public PageHint getPageHint(long pageNumber){
  if (pageHints == null) {
    loadPageHintStream();
  }
  if (pageHints != null) {
    if (pageNumber >= 1 && pageNumber <= pageHints.size()) {
      return (PageHint)pageHints.get((int)(pageNumber - 1));
    }
  }
  return null;
}",0.9471766848816028
78860,"public ReportDocumentReader(ReportEngine engine,IDocArchiveReader archive){
  this.engine=engine;
  this.archive=archive;
  try {
    archive.open();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public ReportDocumentReader(ReportEngine engine,IDocArchiveReader archive){
  this.engine=engine;
  this.archive=archive;
  try {
    archive.open();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
}",0.8680089485458613
78861,"public void close(){
  try {
    archive.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void close(){
  try {
    archive.close();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
}",0.8259109311740891
78862,"public ReportDocumentWriter(IDocArchiveWriter archive){
  this.archive=archive;
  try {
    archive.initialize();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public ReportDocumentWriter(IDocArchiveWriter archive){
  this.archive=archive;
  try {
    archive.initialize();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
}",0.8426666666666667
78863,"public void close(){
  try {
    archive.finish();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void close(){
  try {
    archive.finish();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
}",0.8273092369477911
78864,"public void run(IDocArchiveWriter archive) throws EngineException {
  if (archive == null)   throw new EngineException(""String_Node_Str"");
  try {
    archive.initialize();
  }
 catch (  IOException ex) {
    throw new EngineException(""String_Node_Str"",ex);
  }
  writer=new ReportDocumentWriter(archive);
  doRun();
  try {
    archive.finish();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void run(IDocArchiveWriter archive) throws EngineException {
  if (archive == null)   throw new EngineException(""String_Node_Str"");
  try {
    archive.initialize();
  }
 catch (  IOException ex) {
    throw new EngineException(""String_Node_Str"",ex);
  }
  writer=new ReportDocumentWriter(archive);
  doRun();
  writer.close();
}",0.8655913978494624
78865,"/** 
 * create a <code>DataEngine</code> given an execution context
 * @param context the execution context
 * @return a data engine instance
 */
public IDataEngine createDataEngine(ExecutionContext context){
  IReportDocument document=context.getReportDocument();
  if (document != null) {
    if (context.isInFactory()) {
      return new DataGenerationEngine(context,context.getReportDocWriter().getArchive());
    }
    return new DataPresentationEngine(context,context.getReportDocument().getArchive());
  }
  return new DteDataEngine(context);
}","/** 
 * create a <code>DataEngine</code> given an execution context
 * @param context the execution context
 * @return a data engine instance
 */
public IDataEngine createDataEngine(ExecutionContext context){
  ReportDocumentWriter writer=context.getReportDocWriter();
  if (writer != null) {
    return new DataGenerationEngine(context,context.getReportDocWriter().getArchive());
  }
  IReportDocument document=context.getReportDocument();
  if (document != null) {
    return new DataPresentationEngine(context,context.getReportDocument().getArchive());
  }
  return new DteDataEngine(context);
}",0.5587467362924282
78866,"/** 
 * Implements   {@link ValueManager#computeValue(CSSStylableElement,String,CSSEngine,int,StyleMap,Value)}.
 */
public Value computeValue(CSSStylableElement elt,CSSEngine engine,int idx,Value value){
  if (value.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {
    CSSPrimitiveValue pvalue=(CSSPrimitiveValue)value;
    if (pvalue.getPrimitiveType() == CSSPrimitiveValue.CSS_IDENT) {
      String ident=pvalue.getStringValue();
      Value v=(Value)computedValues.get(ident);
      if (v != null) {
        return v;
      }
      if (values.get(ident) == null) {
        throw new InternalError();
      }
      return (Value)engine.getCSSContext().getSystemColor(ident);
    }
  }
  return super.computeValue(elt,engine,idx,value);
}","/** 
 * Implements   {@link ValueManager#computeValue(CSSStylableElement,String,CSSEngine,int,StyleMap,Value)}.
 */
public Value computeValue(CSSStylableElement elt,CSSEngine engine,int idx,Value value){
  if (value.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {
    CSSPrimitiveValue pvalue=(CSSPrimitiveValue)value;
    int primitiveType=pvalue.getPrimitiveType();
    if (primitiveType == CSSPrimitiveValue.CSS_IDENT) {
      String ident=pvalue.getStringValue();
      Value v=(Value)computedValues.get(ident);
      if (v != null) {
        return v;
      }
      if (values.get(ident) == null) {
        throw new InternalError();
      }
      return (Value)engine.getCSSContext().getSystemColor(ident);
    }
    if (primitiveType == CSSPrimitiveValue.CSS_RGBCOLOR) {
      RGBColor color=value.getRGBColorValue();
      CSSPrimitiveValue red=color.getRed();
      CSSPrimitiveValue green=color.getGreen();
      CSSPrimitiveValue blue=color.getBlue();
      return createRGBColor(createColorComponent(red),createColorComponent(green),createColorComponent(blue));
    }
  }
  return super.computeValue(elt,engine,idx,value);
}",0.7717622080679406
78867,"/** 
 * @param launch
 */
private void cofigLaunch(ILaunch launch,ILaunchConfiguration configuration){
  if (launch.getSourceLocator() instanceof JavaSourceLookupDirector) {
    JavaSourceLookupDirector director=(JavaSourceLookupDirector)launch.getSourceLocator();
    ISourceContainer[] contains=director.getSourceContainers();
    List list=new ArrayList();
    if (contains != null && contains.length != 0) {
      for (int i=0; i < contains.length; i++) {
        list.add(contains[i]);
      }
    }
    try {
      List sourcePaths=getAllProjectSourcePaths(configuration.getAttribute(IMPORTPROJECTNAMES,""String_Node_Str""));
      for (int i=0; i < sourcePaths.size(); i++) {
        String source=(String)sourcePaths.get(i);
        ISourceContainer temp=new DirectorySourceContainer(new Path(source),true);
        list.add(temp);
      }
    }
 catch (    CoreException e) {
    }
    ISourceContainer[] retValue=new ISourceContainer[list.size()];
    retValue=(ISourceContainer[])list.toArray(retValue);
    director.setSourceContainers(retValue);
  }
}","/** 
 * @param launch
 */
private void cofigLaunch(ILaunch launch,ILaunchConfiguration configuration){
  if (launch.getSourceLocator() instanceof JavaSourceLookupDirector) {
    JavaSourceLookupDirector director=(JavaSourceLookupDirector)launch.getSourceLocator();
    ISourceContainer[] contains=director.getSourceContainers();
    List list=new ArrayList();
    if (contains != null && contains.length != 0) {
      for (int i=0; i < contains.length; i++) {
        list.add(contains[i]);
      }
    }
    try {
      List sourcePaths=getAllProjectSourcePaths(configuration.getAttribute(IMPORTPROJECTNAMES,""String_Node_Str""));
      for (int i=0; i < sourcePaths.size(); i++) {
        IJavaProject source=(IJavaProject)sourcePaths.get(i);
        ISourceContainer temp=new JavaProjectSourceContainer(source);
        list.add(temp);
      }
    }
 catch (    CoreException e) {
    }
    ISourceContainer[] retValue=new ISourceContainer[list.size()];
    retValue=(ISourceContainer[])list.toArray(retValue);
    director.setSourceContainers(retValue);
  }
}",0.9533678756476685
78868,"private List getAllProjectSourcePaths(String path){
  List retValue=new ArrayList();
  if (path == null || path.length() == 0) {
    return retValue;
  }
  StringTokenizer token=new StringTokenizer(path,PROPERTYSEPARATOR);
  while (token.hasMoreTokens()) {
    String projectName=token.nextToken();
    List paths=getProjectSourcePaths(projectName);
    for (int i=0; i < paths.size(); i++) {
      retValue.add(paths.get(i));
    }
  }
  return retValue;
}","private List getAllProjectSourcePaths(String path){
  List retValue=new ArrayList();
  if (path == null || path.length() == 0) {
    return retValue;
  }
  StringTokenizer token=new StringTokenizer(path,PROPERTYSEPARATOR);
  while (token.hasMoreTokens()) {
    String projectName=token.nextToken();
    IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
    if (project != null && hasJavaNature(project)) {
      retValue.add(JavaCore.create(project));
    }
  }
  return retValue;
}",0.7818930041152263
78869,"/** 
 * @param editparts
 */
private List flitterEditpart(List editparts){
  int size=editparts.size();
  boolean hasCell=false;
  boolean hasOther=false;
  for (int i=0; i < size; i++) {
    Object obj=((EditPart)editparts.get(i)).getModel();
    if (obj instanceof CellHandle || obj instanceof RowHandle || obj instanceof ColumnHandle) {
      hasCell=true;
    }
 else {
      hasOther=true;
    }
  }
  if (hasCell && hasOther) {
    List copy=new ArrayList(editparts);
    for (int i=0; i < size; i++) {
      EditPart part=(EditPart)editparts.get(i);
      Object obj=part.getModel();
      if (obj instanceof CellHandle || obj instanceof RowHandle || obj instanceof ColumnHandle) {
        copy.remove(part);
      }
    }
    editparts=copy;
  }
  return editparts;
}","/** 
 * @param editparts
 */
private List flitterEditpart(List editparts){
  int size=editparts.size();
  List copy=new ArrayList(editparts);
  for (int i=0; i < size; i++) {
    EditPart part=(EditPart)editparts.get(i);
    if (part instanceof AreaEditPart) {
      copy.remove(part);
    }
  }
  boolean hasCell=false;
  boolean hasOther=false;
  for (int i=0; i < size; i++) {
    Object obj=((EditPart)editparts.get(i)).getModel();
    if (obj instanceof CellHandle || obj instanceof RowHandle || obj instanceof ColumnHandle) {
      hasCell=true;
    }
 else {
      hasOther=true;
    }
  }
  if (hasCell && hasOther) {
    for (int i=0; i < size; i++) {
      EditPart part=(EditPart)editparts.get(i);
      Object obj=part.getModel();
      if (obj instanceof CellHandle || obj instanceof RowHandle || obj instanceof ColumnHandle) {
        copy.remove(part);
      }
    }
  }
  editparts=copy;
  return editparts;
}",0.768235294117647
78870,"/** 
 * Gets models of selected elements
 * @return
 */
protected List getElementHandles(){
  List list=getSelectedObjects();
  if (list.isEmpty()) {
    return Collections.EMPTY_LIST;
  }
  List handles=new ArrayList();
  for (int i=0; i < list.size(); i++) {
    handles.add(((EditPart)(list.get(i))).getModel());
  }
  return handles;
}","/** 
 * Gets models of selected elements
 * @return
 */
protected List getElementHandles(){
  return InsertInLayoutUtil.editPart2Model(TableUtil.filletCellInSelectionEditorpart(getSelection())).toList();
}",0.4007352941176471
78871,"GroupPropertyIterator(List list){
  propIterator=list.iterator();
}","/** 
 * Constructs the group property iterator with the common property list.
 * @param list
 */
GroupPropertyIterator(List list){
  propIterator=list.iterator();
}",0.5800865800865801
78872,"public boolean isVisible(){
  IElementDefn elementDefn=getElementHandle().getDefn();
  if (elementDefn.isPropertyVisible(propDefn.getName()))   return true;
  if (propDefn.isUserProperty())   return true;
  return false;
}","public boolean isVisible(){
  IElementDefn elementDefn=getElementHandle().getDefn();
  if (!elementDefn.isPropertyVisible(propDefn.getName()) && (propDefn.isSystemProperty() || (propDefn.getValueType() == PropertyDefn.EXTENSION_PROPERTY)))   return false;
  return true;
}",0.6437246963562753
78873,"protected void buildStyleProperties() throws MetaDataException {
  if (hasStyle)   addStyleProperties();
  if (ReportDesignConstants.EXTENDED_ITEM.equalsIgnoreCase(getName())) {
    List styles=MetaDataDictionary.getInstance().getStyle().getLocalProperties();
    for (int i=0; i < styles.size(); i++) {
      String propName=((SystemPropertyDefn)styles.get(i)).getName();
      properties.put(propName,styles.get(i));
    }
  }
 else {
    if (!hasStyle && stylePropertyNames != null || hasStyle && isContainer() && stylePropertyNames != null)     throw new MetaDataException(new String[]{this.name},MetaDataException.DESIGN_EXCEPTION_ILLEGAL_STYLE_PROPS);
  }
}","/** 
 * Builds the style properties in this element.
 * @throws MetaDataException
 */
protected void buildStyleProperties() throws MetaDataException {
  if (hasStyle)   addStyleProperties();
  if (ReportDesignConstants.EXTENDED_ITEM.equalsIgnoreCase(getName())) {
    List styles=MetaDataDictionary.getInstance().getStyle().getLocalProperties();
    for (int i=0; i < styles.size(); i++) {
      String propName=((SystemPropertyDefn)styles.get(i)).getName();
      properties.put(propName,styles.get(i));
    }
  }
 else {
    if (!hasStyle && stylePropertyNames != null || hasStyle && isContainer() && stylePropertyNames != null)     throw new MetaDataException(new String[]{this.name},MetaDataException.DESIGN_EXCEPTION_ILLEGAL_STYLE_PROPS);
  }
}",0.9390934844192634
78874,"private void checkPropertyVisibilities() throws MetaDataException {
  if (this.propVisibilites == null)   return;
  Iterator propNames=this.propVisibilites.keySet().iterator();
  while (propNames.hasNext()) {
    String propName=(String)propNames.next();
    if (getProperty(propName) == null)     throw new MetaDataException(new String[]{name,propName},MetaDataException.DESIGN_EXCEPTION_VISIBILITY_PROPERTY_NOT_FOUND);
  }
}","/** 
 * Checks the validation of the defined property visibilities. If the property with the name is not defined, then the visibility is illegal.
 * @throws MetaDataException if the property definition is not found
 */
private void checkPropertyVisibilities() throws MetaDataException {
  if (this.propVisibilites == null)   return;
  Iterator propNames=this.propVisibilites.keySet().iterator();
  while (propNames.hasNext()) {
    String propName=(String)propNames.next();
    if (getProperty(propName) == null)     throw new MetaDataException(new String[]{name,propName},MetaDataException.DESIGN_EXCEPTION_VISIBILITY_PROPERTY_NOT_FOUND);
  }
}",0.7955182072829131
78875,"private StyleHandle getStyleHandle(){
  IStructuredSelection selection=InsertInLayoutUtil.editPart2Model(getSelection());
  if (!selection.isEmpty() && selection.getFirstElement() instanceof DesignElementHandle) {
    SharedStyleHandle style=((DesignElementHandle)selection.getFirstElement()).getStyle();
    for (Iterator iterator=selection.iterator(); iterator.hasNext(); ) {
      Object obj=iterator.next();
      if (!(obj instanceof DesignElementHandle)) {
        return null;
      }
      if (((DesignElementHandle)obj).getStyle() != style) {
        return null;
      }
    }
    return style;
  }
  return null;
}","private StyleHandle getStyleHandle(){
  IStructuredSelection selection=InsertInLayoutUtil.editPart2Model(getSelection());
  if (!selection.isEmpty() && selection.getFirstElement() instanceof DesignElementHandle) {
    if ((DesignElementHandle)selection.getFirstElement() instanceof RowHandle) {
      selection=InsertInLayoutUtil.editPart2Model(TableUtil.filletCellInSelectionEditorpart(getSelection()));
    }
    SharedStyleHandle style=((DesignElementHandle)selection.getFirstElement()).getStyle();
    for (Iterator iterator=selection.iterator(); iterator.hasNext(); ) {
      Object obj=iterator.next();
      if (!(obj instanceof DesignElementHandle)) {
        return null;
      }
      if (((DesignElementHandle)obj).getStyle() != style) {
        return null;
      }
    }
    return style;
  }
  return null;
}",0.8638562543192813
78876,"protected boolean moveData(Object transfer,Object target){
  if (isSupportPalletType(target,transfer)) {
    AbstractToolHandleExtends pre=BasePaletteFactory.getAbstractToolHandleExtendsFromPalletName(transfer);
    ReportCreationTool tool=new ReportCreationTool(new ReportElementFactory(transfer),pre);
    final EditDomain domain=UIUtil.getLayoutEditPartViewer().getEditDomain();
    tool.setEditDomain(domain);
    tool.setViewer(UIUtil.getLayoutEditPartViewer());
    tool.performCreation(UIUtil.getCurrentEditPart());
    SetCurrentEditModelCommand command=new SetCurrentEditModelCommand(tool.getNewObjectFromRequest());
    command.execute();
    return true;
  }
  return super.moveData(transfer,target);
}","protected boolean moveData(Object transfer,Object target){
  if (isSupportPalletType(target,transfer)) {
    AbstractToolHandleExtends pre=BasePaletteFactory.getAbstractToolHandleExtendsFromPaletteName(transfer);
    ReportCreationTool tool=new ReportCreationTool(new ReportElementFactory(transfer),pre);
    final EditDomain domain=UIUtil.getLayoutEditPartViewer().getEditDomain();
    tool.setEditDomain(domain);
    tool.setViewer(UIUtil.getLayoutEditPartViewer());
    tool.performCreation(UIUtil.getCurrentEditPart());
    SetCurrentEditModelCommand command=new SetCurrentEditModelCommand(tool.getNewObjectFromRequest());
    command.execute();
    return true;
  }
  return super.moveData(transfer,target);
}",0.9950946040644708
78877,"/** 
 */
private void performDirectEdit(){
  ImageBuilder dialog=new ImageBuilder(PlatformUI.getWorkbench().getDisplay().getActiveShell(),ImageBuilder.DLG_TITLE_EDIT);
  dialog.setInput(getModel());
  CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
  stack.startTrans(IMG_TRANS_MSG);
  if (dialog.open() == Window.OK) {
    stack.commit();
  }
 else {
    stack.rollback();
  }
}","/** 
 */
private void performDirectEdit(){
  List dataSetList=DEUtil.getDataSetList((DesignElementHandle)getModel());
  ImageBuilder dialog=new ImageBuilder(PlatformUI.getWorkbench().getDisplay().getActiveShell(),ImageBuilder.DLG_TITLE_EDIT,dataSetList);
  dialog.setInput(getModel());
  CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
  stack.startTrans(IMG_TRANS_MSG);
  if (dialog.open() == Window.OK) {
    stack.commit();
  }
 else {
    stack.rollback();
  }
}",0.9027932960893856
78878,"/** 
 * @param object
 */
private static Object doPalette(Object object,String type){
  assert(object instanceof PaletteRoot);
  PaletteRoot root=(PaletteRoot)object;
  List list=root.getChildren();
  List exts=ExtensionPointManager.getInstance().getExtendedElementPoints();
  if (exts == null) {
    return root;
  }
  for (Iterator itor=exts.iterator(); itor.hasNext(); ) {
    ExtendedElementUIPoint point=(ExtendedElementUIPoint)itor.next();
    if (point == null) {
      return root;
    }
    String category=(String)point.getAttribute(IExtensionConstants.ATTRIBUTE_PALETTE_CATEGORY);
    ImageDescriptor icon=(ImageDescriptor)point.getAttribute(IExtensionConstants.ATTRIBUTE_KEY_PALETTE_ICON);
    IReportItemFigureProvider UI=point.getReportItemUI();
    if (UI == null) {
      return root;
    }
    if (PALETTE_DESIGNER.equals(type)) {
      Boolean bool=(Boolean)point.getAttribute(IExtensionConstants.ATTRIBUTE_EDITOR_SHOW_IN_DESIGNER);
      if (!bool.booleanValue()) {
        continue;
      }
    }
 else     if (PALETTE_MASTERPAGE.equals(type)) {
      Boolean bool=(Boolean)point.getAttribute(IExtensionConstants.ATTRIBUTE_EDITOR_SHOW_IN_MASTERPAGE);
      if (!bool.booleanValue()) {
        continue;
      }
    }
    String displayName=DesignEngine.getMetaDataDictionary().getExtension(point.getExtensionName()).getDisplayName();
    CombinedTemplateCreationEntry combined=new ReportCombinedTemplateCreationEntry(displayName,Messages.getFormattedString(""String_Node_Str"",new Object[]{displayName}),getExtendedPalletTemplateName(point),new ReportElementFactory(IReportElementConstants.REPORT_ELEMENT_EXTENDED + point.getExtensionName()),icon,icon,BasePaletteFactory.getAbstractToolHandleExtendsFromPalletName(getExtendedPalletTemplateName(point)));
    PaletteContainer entry=findCategory(list,category);
    if (entry == null) {
      String categoryLabel=(String)point.getAttribute(IExtensionConstants.ATTRIBUTE_PALETTE_CATEGORY_DISPLAYNAME);
      if (categoryLabel == null) {
        categoryLabel=category;
      }
      entry=new PaletteCategory(category,categoryLabel,null);
      root.add(entry);
    }
    entry.add(combined);
  }
  return root;
}","/** 
 * @param object
 */
private static Object doPalette(Object object,String type){
  assert(object instanceof PaletteRoot);
  PaletteRoot root=(PaletteRoot)object;
  List list=root.getChildren();
  List exts=ExtensionPointManager.getInstance().getExtendedElementPoints();
  if (exts == null) {
    return root;
  }
  for (Iterator itor=exts.iterator(); itor.hasNext(); ) {
    ExtendedElementUIPoint point=(ExtendedElementUIPoint)itor.next();
    if (point == null) {
      return root;
    }
    String category=(String)point.getAttribute(IExtensionConstants.ATTRIBUTE_PALETTE_CATEGORY);
    ImageDescriptor icon=(ImageDescriptor)point.getAttribute(IExtensionConstants.ATTRIBUTE_KEY_PALETTE_ICON);
    IReportItemFigureProvider UI=point.getReportItemUI();
    if (UI == null) {
      return root;
    }
    if (PALETTE_DESIGNER.equals(type)) {
      Boolean bool=(Boolean)point.getAttribute(IExtensionConstants.ATTRIBUTE_EDITOR_SHOW_IN_DESIGNER);
      if (!bool.booleanValue()) {
        continue;
      }
    }
 else     if (PALETTE_MASTERPAGE.equals(type)) {
      Boolean bool=(Boolean)point.getAttribute(IExtensionConstants.ATTRIBUTE_EDITOR_SHOW_IN_MASTERPAGE);
      if (!bool.booleanValue()) {
        continue;
      }
    }
    String displayName=DesignEngine.getMetaDataDictionary().getExtension(point.getExtensionName()).getDisplayName();
    CombinedTemplateCreationEntry combined=new ReportCombinedTemplateCreationEntry(displayName,Messages.getFormattedString(""String_Node_Str"",new Object[]{displayName}),getExtendedPalletTemplateName(point),new ReportElementFactory(IReportElementConstants.REPORT_ELEMENT_EXTENDED + point.getExtensionName()),icon,icon,BasePaletteFactory.getAbstractToolHandleExtendsFromPaletteName(getExtendedPalletTemplateName(point)));
    PaletteContainer entry=findCategory(list,category);
    if (entry == null) {
      String categoryLabel=(String)point.getAttribute(IExtensionConstants.ATTRIBUTE_PALETTE_CATEGORY_DISPLAYNAME);
      if (categoryLabel == null) {
        categoryLabel=category;
      }
      entry=new PaletteCategory(category,categoryLabel,null);
      root.add(entry);
    }
    entry.add(combined);
  }
  return root;
}",0.99839412709337
78879,"/** 
 * Creats sub menu in the specified action group of the specified menu manager.
 * @param menuManager The menu manager contains the action group.
 * @param group_name The action group contains the sub menu.
 */
private void createInsertElementMenu(IMenuManager menuManager,String group_name){
  MenuManager subMenu=new MenuManager(ELEMENT_MENU_ITEM_TEXT);
  IAction action=getAction(GeneralInsertMenuAction.INSERT_TEXT_ID);
  action.setText(GeneralInsertMenuAction.INSERT_TEXT_DISPLAY_TEXT);
  subMenu.add(action);
  action=getAction(GeneralInsertMenuAction.INSERT_LABEL_ID);
  action.setText(GeneralInsertMenuAction.INSERT_LABEL_DISPLAY_TEXT);
  subMenu.add(action);
  action=getAction(GeneralInsertMenuAction.INSERT_DATA_ID);
  action.setText(GeneralInsertMenuAction.INSERT_DATA_DISPLAY_TEXT);
  subMenu.add(action);
  action=getAction(GeneralInsertMenuAction.INSERT_IMAGE_ID);
  action.setText(GeneralInsertMenuAction.INSERT_IMAGE_DISPLAY_TEXT);
  subMenu.add(action);
  action=getAction(GeneralInsertMenuAction.INSERT_GRID_ID);
  action.setText(GeneralInsertMenuAction.INSERT_GRID_DISPLAY_TEXT);
  subMenu.add(action);
  action=getAction(GeneralInsertMenuAction.INSERT_LIST_ID);
  action.setText(GeneralInsertMenuAction.INSERT_LIST_DISPLAY_TEXT);
  subMenu.add(action);
  action=getAction(GeneralInsertMenuAction.INSERT_TABLE_ID);
  action.setText(GeneralInsertMenuAction.INSERT_TABLE_DISPLAY_TEXT);
  subMenu.add(action);
  action=getAction(GeneralInsertMenuAction.INSERT_DYNAMIC_TEXT_ID);
  action.setText(GeneralInsertMenuAction.INSERT_DYNAMIC_TEXT_DISPLAY_TEXT);
  subMenu.add(action);
  List points=ExtensionPointManager.getInstance().getExtendedElementPoints();
  for (Iterator iter=points.iterator(); iter.hasNext(); ) {
    ExtendedElementUIPoint point=(ExtendedElementUIPoint)iter.next();
    action=getAction(point.getExtensionName());
    if (action != null) {
      if (point.getExtensionName().equalsIgnoreCase(""String_Node_Str"")) {
        action.setText(""String_Node_Str"" + point.getExtensionName());
      }
 else {
        action.setText(point.getExtensionName());
      }
      subMenu.add(action);
    }
  }
  menuManager.appendToGroup(group_name,subMenu);
}","/** 
 * Creats sub menu in the specified action group of the specified menu manager.
 * @param menuManager The menu manager contains the action group.
 * @param group_name The action group contains the sub menu.
 */
private void createInsertElementMenu(IMenuManager menuManager,String group_name){
  MenuManager subMenu=new MenuManager(ELEMENT_MENU_ITEM_TEXT);
  IAction action=getAction(GeneralInsertMenuAction.INSERT_TEXT_ID);
  action.setText(GeneralInsertMenuAction.INSERT_TEXT_DISPLAY_TEXT);
  subMenu.add(action);
  action=getAction(GeneralInsertMenuAction.INSERT_LABEL_ID);
  action.setText(GeneralInsertMenuAction.INSERT_LABEL_DISPLAY_TEXT);
  subMenu.add(action);
  action=getAction(GeneralInsertMenuAction.INSERT_DATA_ID);
  action.setText(GeneralInsertMenuAction.INSERT_DATA_DISPLAY_TEXT);
  subMenu.add(action);
  action=getAction(GeneralInsertMenuAction.INSERT_IMAGE_ID);
  action.setText(GeneralInsertMenuAction.INSERT_IMAGE_DISPLAY_TEXT);
  subMenu.add(action);
  action=getAction(GeneralInsertMenuAction.INSERT_GRID_ID);
  action.setText(GeneralInsertMenuAction.INSERT_GRID_DISPLAY_TEXT);
  subMenu.add(action);
  action=getAction(GeneralInsertMenuAction.INSERT_LIST_ID);
  action.setText(GeneralInsertMenuAction.INSERT_LIST_DISPLAY_TEXT);
  subMenu.add(action);
  action=getAction(GeneralInsertMenuAction.INSERT_TABLE_ID);
  action.setText(GeneralInsertMenuAction.INSERT_TABLE_DISPLAY_TEXT);
  subMenu.add(action);
  action=getAction(GeneralInsertMenuAction.INSERT_DYNAMIC_TEXT_ID);
  action.setText(GeneralInsertMenuAction.INSERT_DYNAMIC_TEXT_DISPLAY_TEXT);
  subMenu.add(action);
  List points=ExtensionPointManager.getInstance().getExtendedElementPoints();
  for (Iterator iter=points.iterator(); iter.hasNext(); ) {
    ExtendedElementUIPoint point=(ExtendedElementUIPoint)iter.next();
    IElementDefn extension=DesignEngine.getMetaDataDictionary().getExtension(point.getExtensionName());
    String displayName=new String();
    displayName=extension.getDisplayName();
    action=getAction(point.getExtensionName());
    if (action != null) {
      if (displayName.equalsIgnoreCase(""String_Node_Str"")) {
        action.setText(""String_Node_Str"" + displayName);
      }
 else {
        action.setText(point.getExtensionName());
      }
      subMenu.add(action);
    }
  }
  menuManager.appendToGroup(group_name,subMenu);
}",0.8779518870006621
78880,"/** 
 * @param rs
 * @param rinfo
 * @param fileName
 * @param tName
 * @throws OdaException
 */
public SaxParserConsumer(ResultSet rs,RelationInformation rinfo,String fileName,String tName) throws OdaException {
  this.resultSet=rs;
  cachedResultSetRowNo=0;
  currentAvailableMaxLineNo=-1;
  tableName=tName;
  relationInfo=rinfo;
  currentRowNo=0;
  cachedResultSet=new String[Constants.CACHED_RESULT_SET_LENGTH][resultSet.getMetaData().getColumnCount()];
  this.rootPath=relationInfo.getTableRootPath(tableName);
  this.ancestorPath=relationInfo.getTableAncestor(tableName);
  this.isNotNestedXMLTable=rootPath.equals(ancestorPath);
  this.namesOfCachedColumns=relationInfo.getTableNestedXMLColumnNames(tableName);
  this.cachedColumns=new HashMap();
  sp=new SaxParser(fileName,this);
  spThread=new Thread(sp);
  spThread.start();
}","/** 
 * @param rs
 * @param rinfo
 * @param fileName
 * @param tName
 * @throws OdaException
 */
public SaxParserConsumer(ResultSet rs,RelationInformation rinfo,String fileName,String tName) throws OdaException {
  this.resultSet=rs;
  cachedResultSetRowNo=0;
  currentAvailableMaxLineNo=-1;
  tableName=tName;
  relationInfo=rinfo;
  currentRowNo=0;
  cachedResultSet=new String[Constants.CACHED_RESULT_SET_LENGTH][resultSet.getMetaData().getColumnCount()];
  this.rootPath=relationInfo.getTableRootPath(tableName);
  this.ancestorPath=relationInfo.getTableAncestor(tableName);
  this.isNotNestedXMLTable=rootPath.equals(ancestorPath);
  this.namesOfCachedColumns=relationInfo.getTableNestedXMLColumnNames(tableName);
  this.namesOfColumns=relationInfo.getTableColumnNames(tableName);
  if (!isNotNestedXMLTable) {
    spNestedQueryHelper=new SaxParserNestedQueryHelper(rinfo,fileName,tName);
    while (spNestedQueryHelper.isPrepared()) {
      try {
synchronized (this) {
          wait(1000);
        }
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
  sp=new SaxParser(fileName,this);
  spThread=new Thread(sp);
  spThread.start();
}",0.7434503213049926
78881,"/** 
 * Populate all the columns that come from Nested XML data in certain row.
 */
private void populateNestedXMLDataMappingColumns(){
  if (!isNotNestedXMLTable) {
    Iterator it=cachedColumns.keySet().iterator();
    Integer i=null;
    while (it.hasNext()) {
      i=(Integer)it.next();
      cachedResultSet[cachedResultSetRowNo][i.intValue()]=cachedColumns.get(i).toString();
    }
  }
}","/** 
 * Populate all the columns that come from Nested XML data in certain row.
 */
private void populateNestedXMLDataMappingColumns(String path){
  if (!isNotNestedXMLTable) {
    for (int i=0; i < namesOfCachedColumns.length; i++) {
      for (int j=0; j < namesOfColumns.length; j++) {
        if (namesOfCachedColumns[i].equals(namesOfColumns[j])) {
          cachedResultSet[cachedResultSetRowNo][j]=this.spNestedQueryHelper.getNestedColumnValue(namesOfCachedColumns[i],path);
        }
      }
    }
  }
}",0.574585635359116
78882,"public void detectNewRow(String path){
  clearCachedColumns(path);
  if (isSamePath(rootPath,path)) {
    populateNestedXMLDataMappingColumns();
    if (!isCurrentRowValid())     return;
    cachedResultSetRowNo++;
    currentAvailableMaxLineNo++;
    if (cachedResultSetRowNo > Constants.CACHED_RESULT_SET_LENGTH - 1) {
      sp.setStart(false);
      cachedResultSetRowNo=0;
    }
  }
}","public void detectNewRow(String path){
  if (SaxParserUtil.isSamePath(rootPath,path)) {
    populateNestedXMLDataMappingColumns(path);
    if (!isCurrentRowValid())     return;
    cachedResultSetRowNo++;
    currentAvailableMaxLineNo++;
    if (cachedResultSetRowNo > Constants.CACHED_RESULT_SET_LENGTH - 1) {
      sp.setStart(false);
      cachedResultSetRowNo=0;
    }
  }
}",0.9399477806788512
78883,"public void manipulateData(String path,String value){
  String[] filter=relationInfo.getTableColumnNames(tableName);
  for (int i=0; i < filter.length; i++) {
    if (isSamePath(relationInfo.getTableColumnPath(tableName,filter[i]),path)) {
      if (cachedResultSet[cachedResultSetRowNo][i] == null) {
        cachedResultSet[cachedResultSetRowNo][i]=value;
        if (cachedColumns.get(new Integer(i)) == null && value != null) {
          for (int k=0; k < namesOfCachedColumns.length; k++) {
            if (namesOfCachedColumns[k].equals(filter[i])) {
              cachedColumns.put(new Integer(i),value);
            }
          }
        }
      }
    }
  }
}","public void manipulateData(String path,String value){
  for (int i=0; i < namesOfColumns.length; i++) {
    if (SaxParserUtil.isSamePath(relationInfo.getTableColumnPath(tableName,namesOfColumns[i]),path)) {
      if (cachedResultSet[cachedResultSetRowNo][i] == null) {
        cachedResultSet[cachedResultSetRowNo][i]=value;
      }
    }
  }
}",0.5974282888229476
78884,"/** 
 * Close the SaxParserConsumer.
 */
public void close(){
  if (this.spThread != null)   this.spThread.stop();
  this.cachedColumns=null;
  this.namesOfCachedColumns=null;
}","/** 
 * Close the SaxParserConsumer.
 */
public void close(){
  if (this.spThread != null)   this.spThread.stop();
}",0.7918088737201365
78885,"/** 
 * Return the root node of a schema tree.
 * @param fileName
 * @return
 * @throws OdaException
 */
public static ATreeNode getSchemaTree(String fileName) throws OdaException {
  try {
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    factory.setNamespaceAware(true);
    DocumentBuilder builder=factory.newDocumentBuilder();
    Document document=builder.parse(fileName);
    NodeList nodes=document.getChildNodes();
    ATreeNode root=new ATreeNode();
    root.setValue(""String_Node_Str"");
    populateNodeList(nodes,root,0);
    populateRoot(root);
    return root;
  }
 catch (  XPathExpressionException e) {
    throw new OdaException(e.getMessage());
  }
catch (  ParserConfigurationException e) {
    throw new OdaException(e.getMessage());
  }
catch (  SAXException e) {
    throw new OdaException(e.getMessage());
  }
catch (  IOException e) {
    throw new OdaException(e.getMessage());
  }
}","/** 
 * Return the root node of a schema tree.
 * @param fileName
 * @return
 * @throws OdaException
 */
public static ATreeNode getSchemaTree(String fileName) throws OdaException {
  try {
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    factory.setNamespaceAware(true);
    DocumentBuilder builder=factory.newDocumentBuilder();
    Document document=builder.parse(fileName);
    NodeList nodes=document.getChildNodes();
    ATreeNode root=new ATreeNode();
    root.setValue(""String_Node_Str"");
    populateNodeList(nodes,root,0);
    populateRoot(root);
    return root;
  }
 catch (  ParserConfigurationException e) {
    throw new OdaException(e.getMessage());
  }
catch (  SAXException e) {
    throw new OdaException(e.getMessage());
  }
catch (  IOException e) {
    throw new OdaException(e.getMessage());
  }
}",0.9511510387422796
78886,"/** 
 * Populate the node list of a tree node in certain level. TODO add comments
 * @param nodeList
 * @param root
 * @param level
 * @throws XPathExpressionException
 */
private static void populateNodeList(NodeList nodeList,ATreeNode root,int level) throws XPathExpressionException {
  for (int i=0; i < nodeList.getLength(); i++) {
    boolean goToNextLevel=false;
    String space=""String_Node_Str"";
    for (int t=0; t < level; t++) {
      space+=""String_Node_Str"";
    }
    Node item=nodeList.item(i);
    if (item.getLocalName() != null) {
      ATreeNode node=new ATreeNode();
      if (item.getLocalName().equals(""String_Node_Str"") || item.getLocalName().equals(""String_Node_Str"")) {
        String name=""String_Node_Str"";
        if (item.getAttributes().getNamedItem(""String_Node_Str"") != null) {
          name=item.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        }
 else {
          name=item.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        }
        node.setParent(root);
        node.setValue(name);
        if (item.getLocalName().equals(""String_Node_Str""))         node.setType(ATreeNode.ELEMENT_TYPE);
 else         node.setType(ATreeNode.ATTRIBUTE_TYPE);
        goToNextLevel=true;
      }
      if (item.getChildNodes().getLength() != 0) {
        populateNodeList(item.getChildNodes(),goToNextLevel ? node : root,goToNextLevel ? level + 1 : level);
      }
    }
  }
}","/** 
 * Populate the node list of a tree node in certain level. TODO add comments
 * @param nodeList
 * @param root
 * @param level
 * @throws XPathExpressionException
 */
private static void populateNodeList(NodeList nodeList,ATreeNode root,int level){
  for (int i=0; i < nodeList.getLength(); i++) {
    boolean goToNextLevel=false;
    String space=""String_Node_Str"";
    for (int t=0; t < level; t++) {
      space+=""String_Node_Str"";
    }
    Node item=nodeList.item(i);
    if (item.getLocalName() != null) {
      ATreeNode node=new ATreeNode();
      if (item.getLocalName().equals(""String_Node_Str"") || item.getLocalName().equals(""String_Node_Str"")) {
        String name=""String_Node_Str"";
        if (item.getAttributes().getNamedItem(""String_Node_Str"") != null) {
          name=item.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        }
 else {
          name=item.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        }
        node.setParent(root);
        node.setValue(name);
        if (item.getLocalName().equals(""String_Node_Str""))         node.setType(ATreeNode.ELEMENT_TYPE);
 else         node.setType(ATreeNode.ATTRIBUTE_TYPE);
        goToNextLevel=true;
      }
      if (item.getChildNodes().getLength() != 0) {
        populateNodeList(item.getChildNodes(),goToNextLevel ? node : root,goToNextLevel ? level + 1 : level);
      }
    }
  }
}",0.9884169884169884
78887,"/** 
 * handles an image report item and returns an image URL
 * @param image represents the image design information
 * @param context context information
 * @param prefix image prefix in URL
 * @param needMap whether image map is needed
 * @return URL for the image
 */
protected String handleImage(IImage image,Object context,String prefix,boolean needMap){
  String mapID=null;
  if (needMap) {
    mapID=getImageMapID(image);
    if (map.containsKey(mapID)) {
      return (String)map.get(mapID);
    }
  }
  String ret=null;
  if (context != null && (context instanceof HTMLRenderContext)) {
    HTMLRenderContext myContext=(HTMLRenderContext)context;
    String imageURL=myContext.getBaseImageURL();
    String imageDir=myContext.getImageDirectory();
    if (imageURL == null || imageURL.length() == 0 || imageDir == null || imageDir.length() == 0) {
      log.log(Level.SEVERE,""String_Node_Str"");
      return null;
    }
    String fileName;
    File file;
synchronized (HTMLCompleteImageHandler.class) {
      String extension=image.getExtension();
      if (extension != null && extension.length() > 0) {
        fileName=createUniqueFileName(imageDir,prefix,extension);
      }
 else {
        fileName=createUniqueFileName(imageDir,prefix);
      }
      file=new File(imageDir,fileName);
      try {
        image.writeImage(file);
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,e.getMessage(),e);
      }
    }
    if (imageURL.indexOf(""String_Node_Str"") > 0) {
      ret=imageURL + fileName;
    }
 else     if (imageURL.endsWith(""String_Node_Str"")) {
      ret=imageURL + fileName;
    }
 else {
      ret=imageURL + ""String_Node_Str"" + fileName;
    }
    if (needMap) {
      map.put(mapID,ret);
    }
  }
  return ret;
}","/** 
 * handles an image report item and returns an image URL
 * @param image represents the image design information
 * @param context context information
 * @param prefix image prefix in URL
 * @param needMap whether image map is needed
 * @return URL for the image
 */
protected String handleImage(IImage image,Object context,String prefix,boolean needMap){
  String mapID=null;
  if (needMap) {
    mapID=getImageMapID(image);
    if (map.containsKey(mapID)) {
      return (String)map.get(mapID);
    }
  }
  String ret=null;
  if (context != null && (context instanceof HTMLRenderContext)) {
    HTMLRenderContext myContext=(HTMLRenderContext)context;
    String imageURL=myContext.getBaseImageURL();
    String imageDir=myContext.getImageDirectory();
    if (imageURL == null || imageURL.length() == 0 || imageDir == null || imageDir.length() == 0) {
      log.log(Level.SEVERE,""String_Node_Str"");
      return null;
    }
    String fileName;
    File file;
synchronized (HTMLCompleteImageHandler.class) {
      String extension=image.getExtension();
      if (extension != null && extension.length() > 0) {
        fileName=createUniqueFileName(imageDir,prefix,extension);
      }
 else {
        fileName=createUniqueFileName(imageDir,prefix);
      }
      file=new File(imageDir,fileName);
      try {
        image.writeImage(file);
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,e.getMessage(),e);
      }
    }
    if (imageURL.indexOf(""String_Node_Str"") > 0) {
      ret=imageURL + fileName;
    }
 else     if (imageURL.endsWith(""String_Node_Str"")) {
      ret=imageURL + fileName;
    }
 else {
      ret=imageURL + ""String_Node_Str"" + fileName;
    }
    if (needMap) {
      map.put(mapID,ret);
    }
  }
 else {
    ret=handleTempImage(image,prefix,needMap);
  }
  return ret;
}",0.9835241552638928
78888,"/** 
 * returns the unique identifier for the image
 * @param image the image object 
 * @return the image id
 */
protected String getImageMapID(IImage image){
  if (image.getReportRunnable() != null) {
    return image.getReportRunnable().hashCode() + image.getID();
  }
  return image.getID();
}","/** 
 * returns the unique identifier for the image
 * @param image the image object
 * @return the image id
 */
protected String getImageMapID(IImage image){
  if (image.getReportRunnable() != null) {
    return image.getReportRunnable().hashCode() + image.getID();
  }
  return image.getID();
}",0.9983136593591906
78889,"/** 
 * dummy constructor 
 */
public HTMLServerImageHandler(){
}","/** 
 * dummy constructor
 */
public HTMLServerImageHandler(){
}",0.992248062015504
78890,"/** 
 * returns a unique file name based on a directory and name prefix
 * @param imageDir directory to store the image
 * @param prefix prefix for the file name 
 * @return a file name
 */
protected String createUniqueFileName(String imageDir,String prefix){
  File file=null;
  do {
    count++;
    file=new File(imageDir + ""String_Node_Str"" + prefix+ count);
  }
 while (file.exists());
  return prefix + count;
}","/** 
 * returns a unique file name based on a directory and name prefix
 * @param imageDir directory to store the image
 * @param prefix prefix for the file name
 * @return a file name
 */
protected String createUniqueFileName(String imageDir,String prefix){
  File file=null;
  do {
    count++;
    file=new File(imageDir + ""String_Node_Str"" + prefix+ count);
  }
 while (file.exists());
  return prefix + count;
}",0.9987995198079233
78891,"/** 
 * Validates drag source from data view to layout. Support the multiple.
 * @return validate result
 */
public static boolean handleValidateInsert(Object insertObj){
  if (insertObj instanceof Object[]) {
    Object[] array=(Object[])insertObj;
    if (array.length == 0) {
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (!handleValidateInsert(array[i]))       return false;
    }
    return true;
  }
 else   if (insertObj instanceof IStructuredSelection) {
    return handleValidateInsert(((IStructuredSelection)insertObj).toArray());
  }
  return insertObj instanceof DataSetHandle || insertObj instanceof DataSetItemModel || insertObj instanceof ScalarParameterHandle;
}","/** 
 * Validates drag source from data view to layout. Support the multiple.
 * @return validate result
 */
public static boolean handleValidateInsert(Object insertObj){
  if (insertObj instanceof Object[]) {
    Object[] array=(Object[])insertObj;
    if (array.length == 0) {
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (!handleValidateInsert(array[i]))       return false;
    }
    return true;
  }
 else   if (insertObj instanceof IStructuredSelection) {
    return handleValidateInsert(((IStructuredSelection)insertObj).toArray());
  }
 else   if (insertObj instanceof ParameterHandle) {
    if (((ParameterHandle)insertObj).getRoot() instanceof LibraryHandle)     return false;
  }
  return insertObj instanceof DataSetHandle || insertObj instanceof DataSetItemModel || insertObj instanceof ScalarParameterHandle;
}",0.9061901723037652
78892,"private void refreshDataSets(){
  String selectedDataSetName=dataSetChooser.getText();
  String[] oldList=dataSetChooser.getItems();
  ArrayList avaiableList=new ArrayList();
  for (Iterator iter=SessionHandleAdapter.getInstance().getReportDesignHandle().getAllDataSets().iterator(); iter.hasNext(); ) {
    DataSetHandle dataSet=(DataSetHandle)iter.next();
    if (!dataSet.parametersIterator().hasNext()) {
      avaiableList.add(dataSet.getName());
    }
  }
  String[] newList=(String[])avaiableList.toArray(new String[]{});
  if (oldList.length != newList.length) {
    dataSetChooser.setItems(newList);
    if (StringUtil.isBlank(selectedDataSetName)) {
      dataSetChooser.select(0);
      refreshColumns(false);
    }
 else {
      dataSetChooser.setText(selectedDataSetName);
    }
  }
}","private void refreshDataSets(){
  String selectedDataSetName=dataSetChooser.getText();
  String[] oldList=dataSetChooser.getItems();
  ArrayList avaiableList=new ArrayList();
  for (Iterator iter=SessionHandleAdapter.getInstance().getReportDesignHandle().getAllDataSets().iterator(); iter.hasNext(); ) {
    DataSetHandle dataSet=(DataSetHandle)iter.next();
    if (!dataSet.parametersIterator().hasNext()) {
      avaiableList.add(dataSet.getQualifiedName());
    }
  }
  String[] newList=(String[])avaiableList.toArray(new String[]{});
  if (oldList.length != newList.length) {
    dataSetChooser.setItems(newList);
    if (StringUtil.isBlank(selectedDataSetName)) {
      dataSetChooser.select(0);
      refreshColumns(false);
    }
 else {
      dataSetChooser.setText(selectedDataSetName);
    }
  }
}",0.9943855271366188
78893,"protected boolean initDialog(){
  Assert.isNotNull(inputParameter);
  nameEditor.setText(inputParameter.getName());
  if (inputParameter.getDisplayName() != null) {
    promptTextEditor.setText(inputParameter.getDisplayName());
  }
  if (isStatic() && !DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(inputParameter.getControlType()) && (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(inputParameter.getDataType()) || DesignChoiceConstants.PARAM_TYPE_STRING.equals(inputParameter.getDataType()))) {
    defaultValue=removeQuoteString(inputParameter.getDefaultValue());
  }
 else {
    defaultValue=inputParameter.getDefaultValue();
  }
  helpTextEditor.setText(UIUtil.convertToGUIString(inputParameter.getHelpText()));
  if (inputParameter.getValueType().equals(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC)) {
    staticRadio.setSelection(true);
    for (Iterator iter=inputParameter.getPropertyHandle(ScalarParameterHandle.SELECTION_LIST_PROP).iterator(); iter.hasNext(); ) {
      SelectionChoiceHandle choiceHandle=(SelectionChoiceHandle)iter.next();
      choiceList.add(choiceHandle.getStructure());
    }
  }
 else {
    dynamicRadio.setSelection(true);
  }
  if (inputParameter.getPropertyHandle(ScalarParameterHandle.LIST_LIMIT_PROP).isSet()) {
    listLimit.setText(String.valueOf(inputParameter.getListlimit()));
  }
  changeDataType();
  dataTypeChooser.setText(dataType.findChoice(inputParameter.getDataType()).getDisplayName());
  switchParamterType();
  loading=false;
  return true;
}","protected boolean initDialog(){
  Assert.isNotNull(inputParameter);
  nameEditor.setText(inputParameter.getName());
  if (inputParameter.getDisplayName() != null) {
    promptTextEditor.setText(inputParameter.getDisplayName());
  }
  helpTextEditor.setText(UIUtil.convertToGUIString(inputParameter.getHelpText()));
  if (inputParameter.getValueType().equals(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC)) {
    staticRadio.setSelection(true);
    for (Iterator iter=inputParameter.getPropertyHandle(ScalarParameterHandle.SELECTION_LIST_PROP).iterator(); iter.hasNext(); ) {
      SelectionChoiceHandle choiceHandle=(SelectionChoiceHandle)iter.next();
      choiceList.add(choiceHandle.getStructure());
    }
  }
 else {
    dynamicRadio.setSelection(true);
  }
  if (isStatic() && !DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(inputParameter.getControlType()) && (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(inputParameter.getDataType()) || DesignChoiceConstants.PARAM_TYPE_STRING.equals(inputParameter.getDataType()))) {
    defaultValue=removeQuoteString(inputParameter.getDefaultValue());
  }
 else {
    defaultValue=inputParameter.getDefaultValue();
  }
  if (inputParameter.getPropertyHandle(ScalarParameterHandle.LIST_LIMIT_PROP).isSet()) {
    listLimit.setText(String.valueOf(inputParameter.getListlimit()));
  }
  changeDataType();
  dataTypeChooser.setText(dataType.findChoice(inputParameter.getDataType()).getDisplayName());
  switchParamterType();
  loading=false;
  return true;
}",0.7279362972793629
78894,"public void modify(Object element,String property,Object value){
  if (element instanceof Item) {
    element=((Item)element).getData();
  }
  SelectionChoice choice=((SelectionChoice)element);
{
    String newValue=UIUtil.convertToModelString((String)value,false);
    if (COLUMN_VALUE.equals(property)) {
      String errorMessage=isValidValue(newValue);
      if (errorMessage != null) {
        ExceptionHandler.openMessageBox(ERROR_TITLE_INVALID_INPUT,errorMessage,SWT.ICON_INFORMATION);
        return;
      }
      if (choice.getLabel() == null && containValue(choice,newValue,COLUMN_DISPLAY_TEXT)) {
        ExceptionHandler.openMessageBox(ERROR_TITLE_INVALID_INPUT,ERROR_MSG_DUPLICATED_LABEL,SWT.ICON_INFORMATION);
        return;
      }
    }
    newValue=convertToStandardFormat(newValue);
    if (containValue(choice,newValue,property)) {
      if (COLUMN_DISPLAY_TEXT.equals(property)) {
        ExceptionHandler.openMessageBox(ERROR_TITLE_INVALID_INPUT,ERROR_MSG_DUPLICATED_LABEL,SWT.ICON_INFORMATION);
      }
 else {
        ExceptionHandler.openMessageBox(ERROR_TITLE_INVALID_INPUT,ERROR_MSG_DUPLICATED_VALUE,SWT.ICON_INFORMATION);
      }
      return;
    }
    if (choice == dummyChoice) {
      choice=StructureFactory.createSelectionChoice();
      choiceList.add(choice);
    }
    if (COLUMN_VALUE.equals(property)) {
      if (isDefaultChoice(choice) && !PARAM_CONTROL_LIST.equals(getSelectedControlType())) {
        defaultValue=newValue;
      }
      choice.setValue(newValue);
    }
 else     if (COLUMN_DISPLAY_TEXT.equals(property)) {
      choice.setLabel(newValue);
    }
  }
  refreshValueTable();
}","public void modify(Object element,String property,Object value){
  if (element instanceof Item) {
    element=((Item)element).getData();
  }
  SelectionChoice choice=((SelectionChoice)element);
{
    String newValue=UIUtil.convertToModelString((String)value,false);
    if (COLUMN_VALUE.equals(property)) {
      String errorMessage=isValidValue(newValue);
      if (errorMessage != null) {
        ExceptionHandler.openMessageBox(ERROR_TITLE_INVALID_INPUT,errorMessage,SWT.ICON_INFORMATION);
        return;
      }
      if (choice.getLabel() == null && containValue(choice,newValue,COLUMN_DISPLAY_TEXT)) {
        ExceptionHandler.openMessageBox(ERROR_TITLE_INVALID_INPUT,ERROR_MSG_DUPLICATED_LABEL,SWT.ICON_INFORMATION);
        return;
      }
    }
    newValue=convertToStandardFormat(newValue);
    if (containValue(choice,newValue,property)) {
      if (COLUMN_DISPLAY_TEXT.equals(property)) {
        ExceptionHandler.openMessageBox(ERROR_TITLE_INVALID_INPUT,ERROR_MSG_DUPLICATED_LABEL,SWT.ICON_INFORMATION);
      }
 else {
        ExceptionHandler.openMessageBox(ERROR_TITLE_INVALID_INPUT,ERROR_MSG_DUPLICATED_VALUE,SWT.ICON_INFORMATION);
      }
      return;
    }
    if (choice == dummyChoice) {
      choice=StructureFactory.createSelectionChoice();
      choiceList.add(choice);
    }
    if (COLUMN_VALUE.equals(property)) {
      if (isDefaultChoice(choice)) {
        defaultValue=newValue;
      }
      choice.setValue(newValue);
    }
 else     if (COLUMN_DISPLAY_TEXT.equals(property)) {
      choice.setLabel(newValue);
    }
  }
  refreshValueTable();
}",0.8718905472636815
78895,"/** 
 * Return the root node of a schema tree.
 * @param fileName
 * @return
 */
public ATreeNode getSchemaTree(String fileName){
  sp=new SaxParser(fileName,this);
  Thread spThread=new Thread(sp);
  spThread.start();
  while (sp.isAlive()) {
    try {
synchronized (this) {
        wait();
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  populateRoot(root);
  return root;
}","/** 
 * Return the root node of a schema tree.
 * @param fileName
 * @return
 * @throws OdaException
 */
public static ATreeNode getSchemaTree(String fileName) throws OdaException {
  try {
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    factory.setNamespaceAware(true);
    DocumentBuilder builder=factory.newDocumentBuilder();
    Document document=builder.parse(fileName);
    NodeList nodes=document.getChildNodes();
    ATreeNode root=new ATreeNode();
    root.setValue(""String_Node_Str"");
    populateNodeList(nodes,root,0);
    populateRoot(root);
    return root;
  }
 catch (  XPathExpressionException e) {
    throw new OdaException(e.getMessage());
  }
catch (  ParserConfigurationException e) {
    throw new OdaException(e.getMessage());
  }
catch (  SAXException e) {
    throw new OdaException(e.getMessage());
  }
catch (  IOException e) {
    throw new OdaException(e.getMessage());
  }
}",0.2305986696230598
78896,"public void manipulateData(String path,String value){
  String treamedPath=path.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
  if (!isAttribute(treamedPath)) {
    if (treamedPath.endsWith(""String_Node_Str"")) {
      this.inComplexType=!this.inComplexType;
      if (inComplexType && this.currentComplexTypeTreeNode == null) {
        this.currentComplexTypeTreeNode=this.currentTreeNode;
      }
 else       if (!inComplexType) {
        this.currentComplexTypeTreeNode=null;
      }
    }
  }
 else   this.insertNode(treamedPath,value);
}","public void manipulateData(String path,String value){
  String treamedPath=path.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
  this.insertNode(treamedPath);
}",0.4694444444444444
78897,"/** 
 * Insert a node specified by the path.
 * @param treatedPath
 */
private void insertNode(String treatedPath,String value){
  if (treatedPath.endsWith(""String_Node_Str"") || treatedPath.endsWith(""String_Node_Str"")) {
    if (inComplexType) {
      currentTreeNode=new ATreeNode();
      currentTreeNode.setParent(currentComplexTypeTreeNode);
    }
 else {
      currentTreeNode=new ATreeNode();
      currentTreeNode.setParent(root);
    }
    currentTreeNode.setValue(value);
    String elementPath=treatedPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (elementPath.endsWith(""String_Node_Str""))     currentTreeNode.setType(ATreeNode.ATTRIBUTE_TYPE);
 else     currentTreeNode.setType(ATreeNode.ELEMENT_TYPE);
  }
}","/** 
 * Insert a node specified by the path.
 * @param treatedPath
 */
private void insertNode(String treatedPath){
}",0.2746478873239437
78898,"public boolean findGroup(Object[] groupKeyValues) throws BirtException {
  List groups=query.getQueryDefn().getGroups();
  if (groupKeyValues.length > groups.size())   throw new DataException(ResourceConstants.INCORRECT_GROUP_KEY_VALUES);
  GroupDefinition group=null;
  String[] columnNames=new String[groupKeyValues.length];
  for (int i=0; i < columnNames.length; i++) {
    group=(GroupDefinition)groups.get(i);
    columnNames[i]=getGroupKeyColumnName(group);
  }
  odiResult.first(0);
  do {
    for (int i=0; i < columnNames.length; i++) {
      if (groupKeyValuesEqual(groupKeyValues,columnNames,i)) {
        if (i == columnNames.length - 1)         return true;
      }
 else {
        this.skipToEnd(i + 1);
        break;
      }
    }
  }
 while (odiResult.next());
  return false;
}","public boolean findGroup(Object[] groupKeyValues) throws BirtException {
  List groups=query.getQueryDefn().getGroups();
  if (groupKeyValues.length > groups.size())   throw new DataException(ResourceConstants.INCORRECT_GROUP_KEY_VALUES);
  GroupDefinition group=null;
  String[] columnNames=new String[groupKeyValues.length];
  for (int i=0; i < columnNames.length; i++) {
    group=(GroupDefinition)groups.get(i);
    columnNames[i]=getGroupKeyColumnName(group);
  }
  odiResult.first(0);
  if (odiResult.getCurrentResult() == null)   return false;
  do {
    for (int i=0; i < columnNames.length; i++) {
      if (groupKeyValuesEqual(groupKeyValues,columnNames,i)) {
        if (i == columnNames.length - 1)         return true;
      }
 else {
        this.skipToEnd(i + 1);
        break;
      }
    }
  }
 while (odiResult.next());
  return false;
}",0.9636803874092008
78899,"/** 
 * Gets the property value by the following rule: <li>if the value existed on self, return it.</li> <li>if the value existed on parent, return null, else check the element selector.</li> <li>if the value existed on the self selector, return it.</li>
 */
private Object getFactoryPropertyFromElement(Module module,ElementPropertyDefn prop){
}","/** 
 * Gets the property value by the following rule: <li>if the value existed on self, return it.</li> <li>if the value existed on parent, return null, else check the element selector.</li> <li>if the value existed on the self selector, return it.</li>
 * @param module module
 * @param prop definition of the property to get
 * @return The property value, or null if no value is set.
 */
private Object getFactoryPropertyFromElement(Module module,ElementPropertyDefn prop){
}",0.8398058252427184
78900,"/** 
 * Exports the given element.
 * @param elementToExport handle of the element to export.
 * @param canOverride indicates whether the element with the same name in target library will be overriden.
 * @throws SemanticException if error encountered when adding this element to target library or duplicating property value from the given element.
 */
void exportElement(DesignElementHandle elementToExport,boolean canOverride) throws SemanticException {
  if (elementToExport instanceof StyleHandle) {
    exportStyle((StyleHandle)elementToExport,canOverride);
    return;
  }
  if (canOverride) {
    int nameSpaceID=((ElementDefn)elementToExport.getDefn()).getNameSpaceID();
    NameSpace nameSpace=targetLibraryHandle.getModule().getNameSpace(nameSpaceID);
    DesignElement duplicateElement=nameSpace.getElement(elementToExport.getName());
    if (duplicateElement != null)     duplicateElement.getHandle(elementToExport.getModule()).drop();
  }
  DesignElementHandle newElementHandle=duplicateElement(elementToExport,false);
  int slotID=getTopContainerSlot(elementToExport.getElement());
  if (slotID == ReportDesign.BODY_SLOT)   slotID=Module.COMPONENT_SLOT;
 else   if (slotID == Module.PAGE_SLOT && elementToExport.getContainer() != elementToExport.getModuleHandle())   slotID=Module.COMPONENT_SLOT;
  SlotHandle slotHandle=targetLibraryHandle.getSlot(slotID);
  addToSlot(slotHandle,newElementHandle);
}","/** 
 * Exports the given element.
 * @param elementToExport handle of the element to export.
 * @param canOverride indicates whether the element with the same name in target library will be overriden.
 * @throws SemanticException if error encountered when adding this element to target library or duplicating property value from the given element.
 */
void exportElement(DesignElementHandle elementToExport,boolean canOverride) throws SemanticException {
  if (elementToExport instanceof StyleHandle) {
    exportStyle((StyleHandle)elementToExport,canOverride);
    return;
  }
  if (canOverride) {
    int nameSpaceID=((ElementDefn)elementToExport.getDefn()).getNameSpaceID();
    NameSpace nameSpace=targetLibraryHandle.getModule().getNameSpace(nameSpaceID);
    DesignElement duplicateElement=nameSpace.getElement(elementToExport.getName());
    if (duplicateElement != null)     duplicateElement.getHandle(elementToExport.getModule()).drop();
  }
  DesignElementHandle newElementHandle=duplicateElement(elementToExport,false);
  int slotID=getTopContainerSlot(elementToExport.getElement());
  if (slotID == ReportDesign.BODY_SLOT)   slotID=Module.COMPONENT_SLOT;
 else   if (slotID == Module.PAGE_SLOT && elementToExport.getContainer() != elementToExport.getModuleHandle())   slotID=Module.COMPONENT_SLOT;
  if (slotID >= Library.SLOT_COUNT)   return;
  SlotHandle slotHandle=targetLibraryHandle.getSlot(slotID);
  addToSlot(slotHandle,newElementHandle);
}",0.9840055632823366
78901,"/** 
 * Exports the given design. The following rules are applied on exporting. <ul> <li>Only properties supported by library are exported. <li>Only top-level element with name are exported. </ul>
 * @param designToExport handle of the report design to export.
 * @throws SemanticException if error encountered when adding this element to target library or duplicating property value from the given element.
 */
void exportDesign(ReportDesignHandle designToExport) throws SemanticException {
  ModelUtil.duplicateProperties(designToExport,targetLibraryHandle,false);
  int slotCount=designToExport.getDefn().getSlotCount();
  for (int i=0; i < slotCount; i++) {
    SlotHandle sourceSlotHandle=designToExport.getSlot(i);
    Iterator iter=sourceSlotHandle.iterator();
    while (iter.hasNext()) {
      DesignElementHandle contentHandle=(DesignElementHandle)iter.next();
      if (!StringUtil.isBlank(contentHandle.getName())) {
        exportElement(contentHandle,false);
      }
    }
  }
}","/** 
 * Exports the given design. The following rules are applied on exporting. <ul> <li>Only properties supported by library are exported. <li>Only top-level element with name are exported. </ul>
 * @param designToExport handle of the report design to export.
 * @throws SemanticException if error encountered when adding this element to target library or duplicating property value from the given element.
 */
void exportDesign(ReportDesignHandle designToExport) throws SemanticException {
  ModelUtil.duplicateProperties(designToExport,targetLibraryHandle,false);
  int slotCount=designToExport.getDefn().getSlotCount();
  for (int i=0; i < slotCount; i++) {
    SlotHandle sourceSlotHandle=designToExport.getSlot(i);
    Iterator iter=sourceSlotHandle.iterator();
    while (iter.hasNext()) {
      DesignElementHandle contentHandle=(DesignElementHandle)iter.next();
      if (!StringUtil.isBlank(contentHandle.getName()))       exportElement(contentHandle,false);
    }
  }
}",0.9939148073022313
78902,"/** 
 * Checks whether the element to insert can reside in the given module.
 * @param module the root module of the element to add
 * @param slotID the slot ID to insert
 * @param defn the definition of element to insert
 * @return false if the module is a library and the element to insert is atemplate element or its content is a template element; or the container is report design and slot is component slot and the element to insert is a template element or its content is a template element; otherwise true
 */
private boolean canContainTemplateElement(Module module,int slotID,IElementDefn defn){
  if (defn != null && defn.isKindOf(MetaDataDictionary.getInstance().getElement(ReportDesignConstants.TEMPLATE_ELEMENT))) {
    DesignElement container=this;
    int slot=slotID;
    while (container != null) {
      if ((container instanceof Module && slot == Module.COMPONENT_SLOT) || container instanceof Library)       return false;
      slot=container.getContainerSlot();
      container=container.getContainer();
    }
  }
  return true;
}","/** 
 * Checks whether the element to insert can reside in the given module.
 * @param module the root module of the element to add
 * @param slotID the slot ID to insert
 * @param defn the definition of element to insert
 * @return false if the module is a library and the element to insert is atemplate element or its content is a template element; or the container is report design and slot is component slot and the element to insert is a template element or its content is a template element; otherwise true
 */
private boolean canContainTemplateElement(Module module,int slotID,IElementDefn defn){
  if (defn != null && defn.isKindOf(MetaDataDictionary.getInstance().getElement(ReportDesignConstants.TEMPLATE_ELEMENT))) {
    DesignElement container=this;
    int slot=slotID;
    while (container != null) {
      if ((container instanceof Module && slot == Module.COMPONENT_SLOT) || container instanceof Library)       return false;
      slot=container.getContainerSlot();
      container=container.getContainer();
    }
    if (module instanceof Library)     return false;
  }
  return true;
}",0.9753831862517418
78903,"/** 
 * Checks whether a property is visible in the property sheet. The visible property is visible in all <code>elements</code>.
 * @param propName the property name
 * @return <code>true</code> if it is visible. Otherwise<code>false</code>.
 */
protected boolean isPropertyVisible(String propName){
  boolean isVisible=true;
  for (int i=0; i < elements.size(); i++) {
    IElementDefn elementDefn=((DesignElementHandle)elements.get(i)).getDefn();
    if (!elementDefn.isPropertyVisible(propName)) {
      isVisible=false;
      break;
    }
  }
  return isVisible;
}","/** 
 * Checks whether a property is visible in the property sheet. The visible property is visible in all <code>elements</code>.
 * @param propName the property name
 * @return <code>true</code> if it is visible. Otherwise<code>false</code>.
 */
protected boolean isPropertyVisible(String propName){
  boolean isVisible=true;
  for (int i=0; i < elements.size(); i++) {
    PropertyHandle propertyHandle=((DesignElementHandle)elements.get(i)).getPropertyHandle(propName);
    if (propertyHandle != null && !propertyHandle.isVisible() || propertyHandle == null) {
      isVisible=false;
      break;
    }
  }
  return isVisible;
}",0.7816666666666666
78904,"/** 
 * Checks whether a property is read-only in the property sheet. The visible property is read-only in all <code>elements</code>.
 * @param propName the property name
 * @return <code>true</code> if it is read-only. Otherwise<code>false</code>.
 */
protected boolean isPropertyReadOnly(String propName){
  boolean isReadOnly=false;
  for (int i=0; i < elements.size(); i++) {
    PropertyHandle propertyHandle=((DesignElementHandle)elements.get(i)).getPropertyHandle(propName);
    if (propertyHandle != null && propertyHandle.isReadOnly()) {
      isReadOnly=true;
      break;
    }
  }
  return isReadOnly;
}","/** 
 * Checks whether a property is read-only in the property sheet. The visible property is read-only in all <code>elements</code>.
 * @param propName the property name
 * @return <code>true</code> if it is read-only. Otherwise<code>false</code>.
 */
protected boolean isPropertyReadOnly(String propName){
  boolean isReadOnly=false;
  for (int i=0; i < elements.size(); i++) {
    PropertyHandle propertyHandle=((DesignElementHandle)elements.get(i)).getPropertyHandle(propName);
    if (propertyHandle != null && propertyHandle.isReadOnly() || propertyHandle == null) {
      isReadOnly=true;
      break;
    }
  }
  return isReadOnly;
}",0.9792993630573248
78905,"public boolean isVisible(){
  IElementDefn elementDefn=getElementHandle().getDefn();
  return elementDefn.isPropertyVisible(propDefn.getName());
}","public boolean isVisible(){
  IElementDefn elementDefn=getElementHandle().getDefn();
  if (elementDefn.isPropertyVisible(propDefn.getName()))   return true;
  if (propDefn.isUserProperty())   return true;
  return false;
}",0.7554347826086957
78906,"/** 
 * Gets the choice set of one property
 * @param item ReportItem object
 * @param key Property key
 * @return Choice set
 */
public String[] getChoiceSet(Object item,String key){
  if (key.equals(FilterCondition.OPERATOR_MEMBER)) {
    choiceSet=ChoiceSetFactory.getStructChoiceSet(FilterCondition.FILTER_COND_STRUCT,key);
    return ChoiceSetFactory.getDisplayNamefromChoiceSet(choiceSet);
  }
  if (!(item instanceof ReportItemHandle))   return EMPTY;
  return getDataSetColumns((ReportItemHandle)item);
}","/** 
 * Gets the choice set of one property
 * @param item ReportItem object
 * @param key Property key
 * @return Choice set
 */
public String[] getChoiceSet(Object item,String key){
  if (key.equals(FilterCondition.OPERATOR_MEMBER)) {
    choiceSet=ChoiceSetFactory.getStructChoiceSet(FilterCondition.FILTER_COND_STRUCT,key);
    return ChoiceSetFactory.getDisplayNamefromChoiceSet(choiceSet);
  }
  if (item instanceof GroupHandle) {
    item=((GroupHandle)item).getContainer();
  }
  if (!(item instanceof ReportItemHandle))   return EMPTY;
  return getDataSetColumns((ReportItemHandle)item);
}",0.9225225225225224
78907,"/** 
 * Gets the choice set of one property
 * @param item ReportItem object
 * @param key Property key
 * @return Choice set
 */
public String[] getChoiceSet(Object item,String key){
  if (key.equals(SortKey.DIRECTION_MEMBER)) {
    choiceSet=ChoiceSetFactory.getStructChoiceSet(SortKey.SORT_STRUCT,key);
    return ChoiceSetFactory.getDisplayNamefromChoiceSet(choiceSet);
  }
  if (!(item instanceof ReportItemHandle))   return EMPTY;
  return getDataSetColumns((ReportItemHandle)item);
}","/** 
 * Gets the choice set of one property
 * @param item ReportItem object
 * @param key Property key
 * @return Choice set
 */
public String[] getChoiceSet(Object item,String key){
  if (key.equals(SortKey.DIRECTION_MEMBER)) {
    choiceSet=ChoiceSetFactory.getStructChoiceSet(SortKey.SORT_STRUCT,key);
    return ChoiceSetFactory.getDisplayNamefromChoiceSet(choiceSet);
  }
  if (item instanceof GroupHandle) {
    item=((GroupHandle)item).getContainer();
  }
  if (!(item instanceof ReportItemHandle)) {
    return EMPTY;
  }
  return getDataSetColumns((ReportItemHandle)item);
}",0.9124767225325884
78908,"/** 
 * Insert a text string into the text area
 * @param text
 */
protected void insertText(String text){
  StyledText textWidget=sourceViewer.getTextWidget();
  if (!textWidget.isEnabled()) {
    return;
  }
  int selectionStart=textWidget.getSelection().x;
  StringBuffer insertText=new StringBuffer();
  for (int index; (index=text.indexOf(""String_Node_Str"")) != -1; ) {
    insertText.append(text.substring(0,index));
    if (index == text.length() - 1) {
      insertText.append(textWidget.getSelectionText());
      text=""String_Node_Str"";
    }
 else     if (text.charAt(index + 1) != '@') {
      insertText.append(textWidget.getSelectionText());
      text=text.substring(index + 1);
    }
 else {
      insertText.append(""String_Node_Str"");
      text=text.substring(index + 2);
    }
  }
  insertText.append(text);
  text=insertText.toString();
  textWidget.insert(text);
  textWidget.setSelection(selectionStart + text.length());
  textWidget.setFocus();
  if (text.endsWith(""String_Node_Str"")) {
    textWidget.setCaretOffset(textWidget.getCaretOffset() - 1);
  }
}","/** 
 * Insert a text string into the text area
 * @param text
 */
protected void insertText(String text){
  StyledText textWidget=sourceViewer.getTextWidget();
  if (!textWidget.isEnabled()) {
    return;
  }
  int selectionStart=textWidget.getSelection().x;
  textWidget.insert(text);
  textWidget.setSelection(selectionStart + text.length());
  textWidget.setFocus();
  if (text.endsWith(""String_Node_Str"")) {
    textWidget.setCaretOffset(textWidget.getCaretOffset() - 1);
  }
}",0.3741191543882127
78909,"protected void okPressed(){
  UserPropertyDefn def=new UserPropertyDefn();
  def.setName(nameEditor.getText().trim());
switch (style) {
case USER_PROPERTY:
    def.setType(PROPERTY_TYPES[typeChooser.getSelectionIndex()]);
  break;
case NAMED_EXPRESSION:
def.setType(EXPRESSION_TYPE);
break;
}
setResult(def);
super.okPressed();
}","protected void okPressed(){
  UserPropertyDefn def=new UserPropertyDefn();
  def.setName(nameEditor.getText().trim());
switch (style) {
case USER_PROPERTY:
    def.setType(PROPERTY_TYPES[typeChooser.getSelectionIndex()]);
  break;
case NAMED_EXPRESSION:
def.setType(EXPRESSION_TYPE);
def.setDefault(UIUtil.convertToModelString(defaultValueEditor.getText(),false));
break;
}
setResult(def);
super.okPressed();
}",0.8903924221921515
78910,"public boolean equals(Object obj){
  if (obj instanceof ElementRefValue) {
    ElementRefValue value=(ElementRefValue)obj;
    if (this.isResolved() == value.isResolved()) {
      if (value.isResolved()) {
        return getElement().equals(value.getElement());
      }
      return getLibraryNamespace().equals(value.getLibraryNamespace()) && getName().equals(value.getName());
    }
    return false;
  }
  return false;
}","public boolean equals(Object obj){
  if (!(obj instanceof ElementRefValue))   return false;
  ElementRefValue value=(ElementRefValue)obj;
  if (isResolved() != value.isResolved())   return false;
  if (value.isResolved())   return getElement().equals(value.getElement());
  if (!getName().equals(value.getName()))   return false;
  String myNameSpace=getLibraryNamespace();
  String objNameSpace=value.getLibraryNamespace();
  if (myNameSpace == null && objNameSpace == null)   return true;
  if (myNameSpace != null && myNameSpace.equals(objNameSpace))   return true;
  return false;
}",0.5821782178217821
78911,"/** 
 * Returns the name of the user-defined property.
 * @return the name of the user-defined property
 */
public String getName(){
  return getDefn().getName();
}","/** 
 * Returns the name of the user-defined property.
 * @return the name of the user-defined property
 */
public String getName(){
  return propDefn.getName();
}",0.9724770642201837
78912,"/** 
 * Returns the type of the user-defined property.
 * @return the type of the user-defined property
 * @see org.eclipse.birt.report.model.metadata.PropertyType
 */
public int getType(){
  return getDefn().getTypeCode();
}","/** 
 * Returns the type of the user-defined property.
 * @return the type of the user-defined property
 * @see org.eclipse.birt.report.model.metadata.PropertyType
 */
public int getType(){
  return propDefn.getTypeCode();
}",0.979955456570156
78913,"/** 
 * Returns the display name of the user-defined property.
 * @return the display name of the user-defined property
 */
public String getDisplayName(){
  return getDefn().getDisplayName();
}","/** 
 * Returns the display name of the user-defined property.
 * @return the display name of the user-defined property
 */
public String getDisplayName(){
  return propDefn.getDisplayName();
}",0.9767441860465116
78914,"/** 
 * Returns the copy of the property definition for this user-defined property.
 * @return the copy of the property definition
 */
public UserPropertyDefn getCopy(){
  UserPropertyDefn prop=(UserPropertyDefn)((UserPropertyDefn)getDefn()).copy();
  return prop;
}","/** 
 * Returns the copy of the property definition for this user-defined property.
 * @return the copy of the property definition
 */
public UserPropertyDefn getCopy(){
  UserPropertyDefn prop=(UserPropertyDefn)(propDefn).copy();
  return prop;
}",0.9317738791423
78915,"/** 
 * Sets the definition for the user-defined property.
 * @param prop the new definition of the user-defined property
 * @throws UserPropertyException if the property is not found, is not a user property, or is not defined on this element, or the user property definition is inconsistent.
 * @throws PropertyValueException if the type changes, the value becomes invalid.
 */
public void setUserPropertyDefn(UserPropertyDefn prop) throws UserPropertyException, PropertyValueException {
  UserPropertyCommand cmd=new UserPropertyCommand(elementHandle.getModule(),getElement());
  cmd.setPropertyDefn((UserPropertyDefn)getDefn(),prop);
}","/** 
 * Sets the definition for the user-defined property.
 * @param prop the new definition of the user-defined property
 * @throws UserPropertyException if the property is not found, is not a user property, or is not defined on this element, or the user property definition is inconsistent.
 * @throws PropertyValueException if the type changes, the value becomes invalid.
 */
public void setUserPropertyDefn(UserPropertyDefn prop) throws UserPropertyException, PropertyValueException {
  UserPropertyCommand cmd=new UserPropertyCommand(elementHandle.getModule(),getElement());
  cmd.setPropertyDefn(propDefn,prop);
}",0.9785202863961814
78916,"/** 
 * Constructs a handle for the user-defined property with the given element handle and the name of the user-defined property.
 * @param element a handle to a report element
 * @param propName The name of the user-defined property.
 */
public UserPropertyDefnHandle(DesignElementHandle element,String propName){
  super(element,propName);
}","/** 
 * Constructs a handle for the user-defined property with the given element handle and the name of the user-defined property.
 * @param element a handle to a report element
 * @param propName The name of the user-defined property.
 */
public UserPropertyDefnHandle(DesignElementHandle element,String propName){
  super(element);
  propDefn=element.getElement().getUserPropertyDefn(propName);
  if (propDefn == null)   throw new IllegalArgumentException(""String_Node_Str"" + propName + ""String_Node_Str"");
}",0.7845433255269321
78917,"public String getLocalizedMessage(){
  if (sResourceKey == DESIGN_EXCEPTION_NOT_FOUND || sResourceKey == DESIGN_EXCEPTION_DUPLICATE_NAME || sResourceKey == DESIGN_EXCEPTION_INVALID_DISPLAY_ID || sResourceKey == DESIGN_EXCEPTION_CHOICE_NAME_REQUIRED || sResourceKey == DESIGN_EXCEPTION_CHOICE_VALUE_REQUIRED || sResourceKey == DESIGN_EXCEPTION_INVALID_CHOICE_VALUE) {
    return ModelMessages.getMessage(sResourceKey,new String[]{propertyName});
  }
 else   if (sResourceKey == DESIGN_EXCEPTION_USER_PROP_DISALLOWED) {
    return ModelMessages.getMessage(sResourceKey,new String[]{getElementName(element)});
  }
  return ModelMessages.getMessage(sResourceKey);
}","public String getLocalizedMessage(){
}",0.1087267525035765
78918,"/** 
 * Constructor.
 * @param obj the element to be changed
 * @param name the name of the user property
 * @param errCode the error code
 * @param cause the nested exception
 */
public UserPropertyException(DesignElement obj,String name,String errCode,MetaDataException cause){
  super(obj,errCode,cause);
  propertyName=name;
}","/** 
 * Constructor.
 * @param obj the element to be changed
 * @param name the name of the user property
 * @param errCode the error code
 * @param cause the nested exception
 * @param args argument array used for error message
 */
public UserPropertyException(DesignElement obj,String name,String errCode,ModelException cause,String[] args){
  super(obj,args,errCode,cause);
  propertyName=name;
}",0.8861454046639232
78919,"/** 
 * Gets valid types for user property. Each one in the list is an instance of <code>IPropertyType</code>.
 * @return the list of allowed property types for user property.
 */
public static List getAllowedTypes(){
  if (allowedTypes != null)   return allowedTypes;
  allowedTypes=new ArrayList();
  Iterator iter=MetaDataDictionary.getInstance().getPropertyTypes().iterator();
  while (iter.hasNext()) {
    PropertyType propType=(PropertyType)iter.next();
    if (propType instanceof StructPropertyType || propType instanceof StructRefPropertyType || propType instanceof ElementRefPropertyType|| propType instanceof ExtendsPropertyType)     continue;
    allowedTypes.add(propType);
  }
  return allowedTypes;
}","/** 
 * Gets valid types for user property. Each one in the list is an instance of <code>IPropertyType</code>.
 * @return the list of allowed property types for user property.
 */
public static List getAllowedTypes(){
  if (allowedTypes != null)   return allowedTypes;
  allowedTypes=new ArrayList();
  Iterator iter=MetaDataDictionary.getInstance().getPropertyTypes().iterator();
  while (iter.hasNext()) {
    PropertyType propType=(PropertyType)iter.next();
    int type=propType.getTypeCode();
switch (type) {
case PropertyType.STRUCT_TYPE:
case PropertyType.STRUCT_REF_TYPE:
case PropertyType.ELEMENT_REF_TYPE:
case PropertyType.EXTENDS_TYPE:
      break;
default :
    allowedTypes.add(propType);
}
}
return allowedTypes;
}",0.6532871972318339
78920,"/** 
 * Checks whether the element can take the given user property definition.
 * @param prop the user property definition
 * @throws UserPropertyException if the element is not allowed to have user property or the user property definition is invalid, or if the value of the user-defined choice is invalid for the type of user property definition, or the user property definition is inconsistent.
 */
private void checkUserPropertyDefn(UserPropertyDefn prop) throws UserPropertyException {
  String name=prop.getName();
  if (!element.getDefn().allowsUserProperties())   throw new UserPropertyException(element,name,UserPropertyException.DESIGN_EXCEPTION_USER_PROP_DISALLOWED);
  if (StringUtil.isBlank(name))   throw new UserPropertyException(element,name,UserPropertyException.DESIGN_EXCEPTION_NAME_REQUIRED);
  MetaDataDictionary dd=MetaDataDictionary.getInstance();
  if (dd.getPropertyType(prop.getTypeCode()) == null || prop.getTypeCode() == PropertyType.ELEMENT_REF_TYPE || prop.getTypeCode() == PropertyType.STRUCT_TYPE)   throw new UserPropertyException(element,name,UserPropertyException.DESIGN_EXCEPTION_INVALID_TYPE);
  String msgID=prop.getDisplayNameID();
  String displayName=prop.getDisplayName();
  if (!StringUtil.isBlank(msgID)) {
    displayName=module.getMessage(msgID);
    if (StringUtil.isBlank(displayName))     throw new UserPropertyException(element,name,UserPropertyException.DESIGN_EXCEPTION_INVALID_DISPLAY_ID);
  }
  if (prop.getTypeCode() == PropertyType.CHOICE_TYPE) {
    IChoiceSet choices=prop.getChoices();
    if (choices == null || choices.getChoices().length == 0)     throw new UserPropertyException(element,name,UserPropertyException.DESIGN_EXCEPTION_MISSING_CHOICES);
  }
  if (prop.hasChoices()) {
    IChoiceSet choiceSet=prop.getChoices();
    IChoice[] choices=choiceSet.getChoices();
    for (int i=0; i < choices.length; i++) {
      UserChoice choice=(UserChoice)choices[i];
      Object value=choice.getValue();
      if (StringUtil.isBlank(choice.getName())) {
        throw new UserPropertyException(element,name,UserPropertyException.DESIGN_EXCEPTION_CHOICE_NAME_REQUIRED);
      }
      if (value == null)       throw new UserPropertyException(element,name,UserPropertyException.DESIGN_EXCEPTION_CHOICE_VALUE_REQUIRED);
      if (prop.getTypeCode() != PropertyType.CHOICE_TYPE) {
        try {
          value=prop.validateValue(module,value);
        }
 catch (        PropertyValueException e) {
          throw new UserPropertyException(element,name,UserPropertyException.DESIGN_EXCEPTION_INVALID_CHOICE_VALUE);
        }
      }
    }
  }
  try {
    prop.build();
  }
 catch (  MetaDataException e) {
    throw new UserPropertyException(element,name,UserPropertyException.DESIGN_EXCEPTION_INVALID_DEFINITION,e);
  }
}","/** 
 * Checks whether the element can take the given user property definition.
 * @param prop the user property definition
 * @throws UserPropertyException if the element is not allowed to have user property or the user property definition is invalid, or if the value of the user-defined choice is invalid for the type of user property definition, or the user property definition is inconsistent.
 */
private void checkUserPropertyDefn(UserPropertyDefn prop) throws UserPropertyException {
}",0.3009174311926605
78921,"public void testContainElement() throws Throwable {
  showPerspective();
  openEditor();
  getView(DATA_EXPLORER_ID).setFocus();
  DataViewPage dataViewPage=(DataViewPage)((DataView)getView(DATA_EXPLORER_ID)).getCurrentPage();
  TreeViewer dataTreeViewer=(TreeViewer)PrivateAccessor.getField(dataViewPage,""String_Node_Str"");
  ContentOutlinePage outlinePage=(ContentOutlinePage)PrivateAccessor.getField(UIUtil.getActiveReportEditor(),""String_Node_Str"");
  TreeViewer outlineTreeViewer=(TreeViewer)PrivateAccessor.getField(outlinePage,""String_Node_Str"");
  ReportDesignHandle reportHandle=(ReportDesignHandle)SessionHandleAdapter.getInstance().getReportDesignHandle();
  DataSourceHandle dataSource=reportHandle.getElementFactory().newOdaDataSource(null);
  DataSetHandle dataSet=reportHandle.getElementFactory().newScriptDataSet(null);
  ScalarParameterHandle param1=reportHandle.getElementFactory().newScalarParameter(""String_Node_Str"");
  ScalarParameterHandle param2=reportHandle.getElementFactory().newScalarParameter(""String_Node_Str"");
  ParameterGroupHandle paramGroup=reportHandle.getElementFactory().newParameterGroup(null);
  paramGroup.addElement(param2,ParameterGroupHandle.PARAMETERS_SLOT);
  reportHandle.getDataSources().add(dataSource);
  reportHandle.getDataSets().add(dataSet);
  reportHandle.getParameters().add(param1);
  reportHandle.getParameters().add(paramGroup);
  LabelHandle label1=reportHandle.getElementFactory().newLabel(null);
  LabelHandle label2=reportHandle.getElementFactory().newLabel(null);
  TextItemHandle text=reportHandle.getElementFactory().newTextItem(null);
  ListHandle list=reportHandle.getElementFactory().newList(null);
  ListGroupHandle listGroup=reportHandle.getElementFactory().newListGroup();
  listGroup.getHeader().add(label2);
  list.getDetail().add(text);
  list.getGroups().add(listGroup);
  reportHandle.getBody().add(label1);
  reportHandle.getBody().add(list);
  getView(DATA_EXPLORER_ID).setFocus();
  dataTreeViewer.refresh();
  getView(OUTLINE_ID).setFocus();
  outlineTreeViewer.refresh();
  try {
    assertTrue(UIUtil.containElement(outlineTreeViewer,label1));
    assertTrue(UIUtil.containElement(outlineTreeViewer,label2));
    assertTrue(UIUtil.containElement(outlineTreeViewer,text));
    assertTrue(UIUtil.containElement(outlineTreeViewer,list));
    assertTrue(UIUtil.containElement(outlineTreeViewer,listGroup));
    assertTrue(UIUtil.containElement(dataTreeViewer,dataSource));
    assertTrue(UIUtil.containElement(dataTreeViewer,dataSet));
    assertTrue(UIUtil.containElement(dataTreeViewer,param1));
    assertTrue(UIUtil.containElement(dataTreeViewer,paramGroup));
    assertTrue(UIUtil.containElement(dataTreeViewer,param2));
    assertFalse(UIUtil.containElement(outlineTreeViewer,dataSource));
    assertFalse(UIUtil.containElement(outlineTreeViewer,dataSet));
    assertFalse(UIUtil.containElement(outlineTreeViewer,param1));
    assertFalse(UIUtil.containElement(outlineTreeViewer,paramGroup));
    assertFalse(UIUtil.containElement(outlineTreeViewer,param2));
    assertFalse(UIUtil.containElement(dataTreeViewer,label1));
    assertFalse(UIUtil.containElement(dataTreeViewer,label2));
    assertFalse(UIUtil.containElement(dataTreeViewer,text));
    assertFalse(UIUtil.containElement(dataTreeViewer,list));
    assertFalse(UIUtil.containElement(dataTreeViewer,listGroup));
  }
 catch (  Throwable e) {
    throw e;
  }
 finally {
    closeEditor();
  }
}","public void testContainElement() throws Throwable {
  showPerspective();
  openEditor();
  getView(DATA_EXPLORER_ID).setFocus();
  DataViewPage dataViewPage=(DataViewPage)((DataView)getView(DATA_EXPLORER_ID)).getCurrentPage();
  TreeViewer dataTreeViewer=(TreeViewer)PrivateAccessor.getField(dataViewPage,""String_Node_Str"");
  ContentOutlinePage outlinePage=(ContentOutlinePage)PrivateAccessor.getField(UIUtil.getActiveReportEditor(),""String_Node_Str"");
  TreeViewer outlineTreeViewer=(TreeViewer)PrivateAccessor.getField(outlinePage,""String_Node_Str"");
  ReportDesignHandle reportHandle=(ReportDesignHandle)SessionHandleAdapter.getInstance().getReportDesignHandle();
  DataSourceHandle dataSource=reportHandle.getElementFactory().newOdaDataSource(null,null);
  DataSetHandle dataSet=reportHandle.getElementFactory().newScriptDataSet(null);
  dataSet.setDataSource(dataSource.getName());
  ScalarParameterHandle param1=reportHandle.getElementFactory().newScalarParameter(""String_Node_Str"");
  ScalarParameterHandle param2=reportHandle.getElementFactory().newScalarParameter(""String_Node_Str"");
  ParameterGroupHandle paramGroup=reportHandle.getElementFactory().newParameterGroup(null);
  paramGroup.addElement(param2,ParameterGroupHandle.PARAMETERS_SLOT);
  reportHandle.getDataSources().add(dataSource);
  reportHandle.getDataSets().add(dataSet);
  reportHandle.getParameters().add(param1);
  reportHandle.getParameters().add(paramGroup);
  LabelHandle label1=reportHandle.getElementFactory().newLabel(null);
  LabelHandle label2=reportHandle.getElementFactory().newLabel(null);
  TextItemHandle text=reportHandle.getElementFactory().newTextItem(null);
  ListHandle list=reportHandle.getElementFactory().newList(null);
  ListGroupHandle listGroup=reportHandle.getElementFactory().newListGroup();
  listGroup.getHeader().add(label2);
  list.getDetail().add(text);
  list.getGroups().add(listGroup);
  reportHandle.getBody().add(label1);
  reportHandle.getBody().add(list);
  getView(DATA_EXPLORER_ID).setFocus();
  dataTreeViewer.refresh();
  getView(OUTLINE_ID).setFocus();
  outlineTreeViewer.refresh();
  try {
    assertTrue(UIUtil.containElement(outlineTreeViewer,label1));
    assertTrue(UIUtil.containElement(outlineTreeViewer,label2));
    assertTrue(UIUtil.containElement(outlineTreeViewer,text));
    assertTrue(UIUtil.containElement(outlineTreeViewer,list));
    assertTrue(UIUtil.containElement(outlineTreeViewer,listGroup));
    assertTrue(UIUtil.containElement(dataTreeViewer,dataSource));
    assertTrue(UIUtil.containElement(dataTreeViewer,dataSet));
    assertTrue(UIUtil.containElement(dataTreeViewer,param1));
    assertTrue(UIUtil.containElement(dataTreeViewer,paramGroup));
    assertTrue(UIUtil.containElement(dataTreeViewer,param2));
    assertFalse(UIUtil.containElement(outlineTreeViewer,dataSource));
    assertFalse(UIUtil.containElement(outlineTreeViewer,dataSet));
    assertFalse(UIUtil.containElement(outlineTreeViewer,param1));
    assertFalse(UIUtil.containElement(outlineTreeViewer,paramGroup));
    assertFalse(UIUtil.containElement(outlineTreeViewer,param2));
    assertFalse(UIUtil.containElement(dataTreeViewer,label1));
    assertFalse(UIUtil.containElement(dataTreeViewer,label2));
    assertFalse(UIUtil.containElement(dataTreeViewer,text));
    assertFalse(UIUtil.containElement(dataTreeViewer,list));
    assertFalse(UIUtil.containElement(dataTreeViewer,listGroup));
  }
 catch (  Throwable e) {
    throw e;
  }
 finally {
    closeEditor();
  }
}",0.9924963924963924
78922,"/** 
 * Determines if this element is editable or not. If the element comes from a library, it can not be edited in the report design.
 * @return true if it can be edited. false if it can't.
 */
public boolean canEdit(){
  boolean canEdit=true;
  if ((getRoot() != null) && (getRoot().getElement() != getModule()))   canEdit=false;
  return canEdit;
}","/** 
 * Determines if this element is editable or not. If the element comes from a library, it can not be edited in the report design.
 * @return true if it can be edited. false if it can't.
 */
public boolean canEdit(){
}",0.774869109947644
78923,"public boolean isReadOnly(){
  IElementDefn elementDefn=getElementHandle().getDefn();
  return elementDefn.isPropertyReadOnly(propDefn.getName());
}","public boolean isReadOnly(){
}",0.3370786516853932
78924,"public BIRTPropertyManagerFactory(){
  vms=new ValueManager[PerfectHash.TOTAL_KEYWORDS];
  vms[StyleConstants.STYLE_TEXT_ALIGN]=new TextAlignManager(CSSConstants.CSS_TEXT_ALIGN_PROPERTY);
  vms[StyleConstants.STYLE_TEXT_INDENT]=new LengthManager(CSSConstants.CSS_TEXT_INDENT_PROPERTY,true,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_NUMBER_ALIGN]=new TextAlignManager(BIRTConstants.BIRT_NUMBER_ALIGN_PROPERTY);
  vms[StyleConstants.STYLE_NUMBER_FORMAT]=new RawStringManager(BIRTConstants.BIRT_NUMBER_FORMAT_PROPERTY,true,null);
  vms[StyleConstants.STYLE_STRING_FORMAT]=new RawStringManager(BIRTConstants.BIRT_STRING_FORMAT_PROPERTY,true,null);
  vms[StyleConstants.STYLE_DATE_FORMAT]=new RawStringManager(BIRTConstants.BIRT_DATE_TIME_FORMAT_PROPERTY,true,null);
  vms[StyleConstants.STYLE_VERTICAL_ALIGN]=new VerticalAlignManager();
  vms[StyleConstants.STYLE_LINE_HEIGHT]=new LineHeightManager();
  vms[StyleConstants.STYLE_BACKGROUND_REPEAT]=new BackgroundRepeatManager();
  vms[StyleConstants.STYLE_BACKGROUND_ATTACHMENT]=new BackgroundAttachmentManager();
  vms[StyleConstants.STYLE_CAN_SHRINK]=new BooleanManager(BIRTConstants.BIRT_CAN_SHRINK_PROPERTY,true,false);
  vms[StyleConstants.STYLE_TEXT_OVERLINE]=new TextOverlineManager();
  vms[StyleConstants.STYLE_TEXT_UNDERLINE]=new TextUnderlineManager();
  vms[StyleConstants.STYLE_TEXT_LINETHROUGH]=new TextLineThroughManager();
  vms[StyleConstants.STYLE_BACKGROUND_IMAGE]=new URIManager(CSSConstants.CSS_BACKGROUND_IMAGE_PROPERTY,false,CSSValueConstants.NONE_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_TOP_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_LEFT_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_RIGHT_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_BOTTOM_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_COLOR]=new ColorManager(CSSConstants.CSS_COLOR_PROPERTY,true,CSSValueConstants.BLACK_RGB_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_TOP_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_LEFT_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_RIGHT_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_BOTTOM_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BACKGROUND_COLOR]=new ColorManager(CSSConstants.CSS_BACKGROUND_COLOR_PROPERTY,false,CSSValueConstants.TRANSPARENT_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_TOP_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_LEFT_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_RIGHT_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_BOTTOM_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_LETTER_SPACING]=new SpacingManager(CSSConstants.CSS_LETTER_SPACING_PROPERTY);
  vms[StyleConstants.STYLE_FONT_WEIGHT]=new FontWeightManager();
  vms[StyleConstants.STYLE_FONT_VARIANT]=new FontVariantManager();
  vms[StyleConstants.STYLE_MARGIN_LEFT]=new MarginManager(CSSConstants.CSS_MARGIN_LEFT_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_RIGHT]=new MarginManager(CSSConstants.CSS_MARGIN_RIGHT_PROPERTY);
  vms[StyleConstants.STYLE_DISPLAY]=new DisplayManager();
  vms[StyleConstants.STYLE_TEXT_TRANSFORM]=new TextTransformManager();
  vms[StyleConstants.STYLE_BACKGROUND_POSITION_Y]=new BackgroundPositionYManager();
  vms[StyleConstants.STYLE_PADDING_LEFT]=new LengthManager(CSSConstants.CSS_PADDING_LEFT_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_PADDING_RIGHT]=new LengthManager(CSSConstants.CSS_PADDING_RIGHT_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_FONT_SIZE]=new FontSizeManager();
  vms[StyleConstants.STYLE_FONT_STYLE]=new FontStyleManager();
  vms[StyleConstants.STYLE_WHITE_SPACE]=new WhiteSpaceManager();
  vms[StyleConstants.STYLE_ORPHANS]=new IntegerManager(CSSConstants.CSS_ORPHANS_PROPERTY,true,2);
  vms[StyleConstants.STYLE_MASTER_PAGE]=new RawStringManager(BIRTConstants.BIRT_MASTER_PAGE_PROPERTY,false,null);
  vms[StyleConstants.STYLE_WORD_SPACING]=new SpacingManager(CSSConstants.CSS_WORD_SPACING_PROPERTY);
  vms[StyleConstants.STYLE_BACKGROUND_POSITION_X]=new BackgroundPositionXManager();
  vms[StyleConstants.STYLE_PAGE_BREAK_BEFORE]=new PageBreakBeforeAfterManager(CSSConstants.CSS_PAGE_BREAK_BEFORE_PROPERTY);
  vms[StyleConstants.STYLE_PAGE_BREAK_INSIDE]=new PageBreakInsideManager();
  vms[StyleConstants.STYLE_SHOW_IF_BLANK]=new BooleanManager(BIRTConstants.BIRT_SHOW_IF_BLANK_PROPERTY,true,false);
  vms[StyleConstants.STYLE_FONT_FAMILY]=new FontFamilyManager();
  vms[StyleConstants.STYLE_PAGE_BREAK_AFTER]=new PageBreakBeforeAfterManager(CSSConstants.CSS_PAGE_BREAK_AFTER_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_BOTTOM]=new MarginManager(CSSConstants.CSS_MARGIN_BOTTOM_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_TOP]=new MarginManager(CSSConstants.CSS_MARGIN_TOP_PROPERTY);
  vms[StyleConstants.STYLE_WIDOWS]=new IntegerManager(CSSConstants.CSS_WIDOWS_PROPERTY,true,2);
  vms[StyleConstants.STYLE_PADDING_BOTTOM]=new LengthManager(CSSConstants.CSS_PADDING_BOTTOM_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_PADDING_TOP]=new LengthManager(CSSConstants.CSS_PADDING_TOP_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_VISIBLE_FORMAT]=new VisibleFormatManager();
}","public BIRTPropertyManagerFactory(){
  vms=new ValueManager[PerfectHash.TOTAL_KEYWORDS];
  vms[StyleConstants.STYLE_TEXT_ALIGN]=new TextAlignManager(CSSConstants.CSS_TEXT_ALIGN_PROPERTY);
  vms[StyleConstants.STYLE_TEXT_INDENT]=new LengthManager(CSSConstants.CSS_TEXT_INDENT_PROPERTY,true,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_NUMBER_ALIGN]=new TextAlignManager(BIRTConstants.BIRT_NUMBER_ALIGN_PROPERTY);
  vms[StyleConstants.STYLE_NUMBER_FORMAT]=new RawStringManager(BIRTConstants.BIRT_NUMBER_FORMAT_PROPERTY,true,CSSValueConstants.EMPTY_STRING_VALUE);
  vms[StyleConstants.STYLE_STRING_FORMAT]=new RawStringManager(BIRTConstants.BIRT_STRING_FORMAT_PROPERTY,true,CSSValueConstants.EMPTY_STRING_VALUE);
  vms[StyleConstants.STYLE_DATE_FORMAT]=new RawStringManager(BIRTConstants.BIRT_DATE_TIME_FORMAT_PROPERTY,true,CSSValueConstants.EMPTY_STRING_VALUE);
  vms[StyleConstants.STYLE_VERTICAL_ALIGN]=new VerticalAlignManager();
  vms[StyleConstants.STYLE_LINE_HEIGHT]=new LineHeightManager();
  vms[StyleConstants.STYLE_BACKGROUND_REPEAT]=new BackgroundRepeatManager();
  vms[StyleConstants.STYLE_BACKGROUND_ATTACHMENT]=new BackgroundAttachmentManager();
  vms[StyleConstants.STYLE_CAN_SHRINK]=new BooleanManager(BIRTConstants.BIRT_CAN_SHRINK_PROPERTY,true,false);
  vms[StyleConstants.STYLE_TEXT_OVERLINE]=new TextOverlineManager();
  vms[StyleConstants.STYLE_TEXT_UNDERLINE]=new TextUnderlineManager();
  vms[StyleConstants.STYLE_TEXT_LINETHROUGH]=new TextLineThroughManager();
  vms[StyleConstants.STYLE_BACKGROUND_IMAGE]=new URIManager(CSSConstants.CSS_BACKGROUND_IMAGE_PROPERTY,false,CSSValueConstants.NONE_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_TOP_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_LEFT_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_RIGHT_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_BOTTOM_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_COLOR]=new ColorManager(CSSConstants.CSS_COLOR_PROPERTY,true,CSSValueConstants.BLACK_RGB_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_TOP_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_LEFT_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_RIGHT_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_BOTTOM_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BACKGROUND_COLOR]=new ColorManager(CSSConstants.CSS_BACKGROUND_COLOR_PROPERTY,false,CSSValueConstants.TRANSPARENT_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_TOP_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_LEFT_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_RIGHT_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_BOTTOM_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_LETTER_SPACING]=new SpacingManager(CSSConstants.CSS_LETTER_SPACING_PROPERTY);
  vms[StyleConstants.STYLE_FONT_WEIGHT]=new FontWeightManager();
  vms[StyleConstants.STYLE_FONT_VARIANT]=new FontVariantManager();
  vms[StyleConstants.STYLE_MARGIN_LEFT]=new MarginManager(CSSConstants.CSS_MARGIN_LEFT_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_RIGHT]=new MarginManager(CSSConstants.CSS_MARGIN_RIGHT_PROPERTY);
  vms[StyleConstants.STYLE_DISPLAY]=new DisplayManager();
  vms[StyleConstants.STYLE_TEXT_TRANSFORM]=new TextTransformManager();
  vms[StyleConstants.STYLE_BACKGROUND_POSITION_Y]=new BackgroundPositionYManager();
  vms[StyleConstants.STYLE_PADDING_LEFT]=new LengthManager(CSSConstants.CSS_PADDING_LEFT_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_PADDING_RIGHT]=new LengthManager(CSSConstants.CSS_PADDING_RIGHT_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_FONT_SIZE]=new FontSizeManager();
  vms[StyleConstants.STYLE_FONT_STYLE]=new FontStyleManager();
  vms[StyleConstants.STYLE_WHITE_SPACE]=new WhiteSpaceManager();
  vms[StyleConstants.STYLE_ORPHANS]=new IntegerManager(CSSConstants.CSS_ORPHANS_PROPERTY,true,2);
  vms[StyleConstants.STYLE_MASTER_PAGE]=new RawStringManager(BIRTConstants.BIRT_MASTER_PAGE_PROPERTY,false,null);
  vms[StyleConstants.STYLE_WORD_SPACING]=new SpacingManager(CSSConstants.CSS_WORD_SPACING_PROPERTY);
  vms[StyleConstants.STYLE_BACKGROUND_POSITION_X]=new BackgroundPositionXManager();
  vms[StyleConstants.STYLE_PAGE_BREAK_BEFORE]=new PageBreakBeforeAfterManager(CSSConstants.CSS_PAGE_BREAK_BEFORE_PROPERTY);
  vms[StyleConstants.STYLE_PAGE_BREAK_INSIDE]=new PageBreakInsideManager();
  vms[StyleConstants.STYLE_SHOW_IF_BLANK]=new BooleanManager(BIRTConstants.BIRT_SHOW_IF_BLANK_PROPERTY,true,false);
  vms[StyleConstants.STYLE_FONT_FAMILY]=new FontFamilyManager();
  vms[StyleConstants.STYLE_PAGE_BREAK_AFTER]=new PageBreakBeforeAfterManager(CSSConstants.CSS_PAGE_BREAK_AFTER_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_BOTTOM]=new MarginManager(CSSConstants.CSS_MARGIN_BOTTOM_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_TOP]=new MarginManager(CSSConstants.CSS_MARGIN_TOP_PROPERTY);
  vms[StyleConstants.STYLE_WIDOWS]=new IntegerManager(CSSConstants.CSS_WIDOWS_PROPERTY,true,2);
  vms[StyleConstants.STYLE_PADDING_BOTTOM]=new LengthManager(CSSConstants.CSS_PADDING_BOTTOM_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_PADDING_TOP]=new LengthManager(CSSConstants.CSS_PADDING_TOP_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_VISIBLE_FORMAT]=new VisibleFormatManager();
}",0.9903225806451612
78925,"public void run(){
  try {
    FileDialog dialog;
    if (getSelection() instanceof ReportDesignHandle)     dialog=new FileDialog(UIUtil.getDefaultShell(),SWT.SAVE);
 else     dialog=new FileDialog(UIUtil.getDefaultShell(),SWT.OPEN);
    dialog.setFilterExtensions(new String[]{""String_Node_Str""});
    String filename;
    pref=ReportPlugin.getDefault().getPreferenceStore().getInt(PREF_KEY);
    filename=dialog.open();
    if (filename != null) {
      if (getSelection() instanceof ReportDesignHandle)       ElementExportUtil.exportDesign((ReportDesignHandle)getSelection(),filename);
 else {
        if (pref == PREF_PROMPT) {
          MessageDialog prefDialog=new MessageDialog(dialog.getParent(),DIALOG_TITLE,null,DIALOG_MESSAGE,MessageDialog.INFORMATION,new String[]{BUTTON_YES,BUTTON_NO,BUTTON_CANCEL},0){
            protected Control createCustomArea(            Composite parent){
              Composite container=new Composite(parent,SWT.NONE);
              GridLayout gridLayout=new GridLayout();
              gridLayout.marginWidth=20;
              container.setLayout(gridLayout);
              Button chkbox=new Button(container,SWT.CHECK);
              chkbox.setText(REMEMBER_DECISION);
              chkbox.addSelectionListener(new SelectionListener(){
                public void widgetSelected(                SelectionEvent e){
                  saveDecision=!saveDecision;
                }
                public void widgetDefaultSelected(                SelectionEvent e){
                  saveDecision=false;
                }
              }
);
              return super.createCustomArea(parent);
            }
            protected void buttonPressed(            int buttonId){
switch (buttonId) {
case 0:
                pref=PREF_OVERWRITE;
              break;
case 1:
            pref=PREF_NOT_OVERWRITE;
          break;
default :
        break;
    }
    if (saveDecision) {
      ReportPlugin.getDefault().getPreferenceStore().setValue(PREF_KEY,pref);
    }
    super.buttonPressed(buttonId);
  }
}
;
if (prefDialog.open() == 2) return;
}
ElementExportUtil.exportElement((DesignElementHandle)getSelection(),filename,pref == PREF_OVERWRITE);
}
}
}
 catch (Exception e) {
ExceptionHandler.handle(e);
}
}","public void run(){
  try {
    FileDialog dialog;
    if (getSelection() instanceof ReportDesignHandle) {
      dialog=new FileDialog(UIUtil.getDefaultShell(),SWT.SAVE);
    }
 else {
      dialog=new FileDialog(UIUtil.getDefaultShell(),SWT.OPEN);
    }
    dialog.setFilterExtensions(new String[]{""String_Node_Str""});
    String filename=dialog.open();
    pref=ReportPlugin.getDefault().getPreferenceStore().getInt(PREF_KEY);
    if (!filename.endsWith(""String_Node_Str"")) {
      filename+=""String_Node_Str"";
    }
    if (filename != null) {
      if (getSelection() instanceof ReportDesignHandle)       ElementExportUtil.exportDesign((ReportDesignHandle)getSelection(),filename);
 else {
        if (pref == PREF_PROMPT) {
          MessageDialog prefDialog=new MessageDialog(dialog.getParent(),DIALOG_TITLE,null,DIALOG_MESSAGE,MessageDialog.INFORMATION,new String[]{BUTTON_YES,BUTTON_NO,BUTTON_CANCEL},0){
            protected Control createCustomArea(            Composite parent){
              Composite container=new Composite(parent,SWT.NONE);
              GridLayout gridLayout=new GridLayout();
              gridLayout.marginWidth=20;
              container.setLayout(gridLayout);
              Button chkbox=new Button(container,SWT.CHECK);
              chkbox.setText(REMEMBER_DECISION);
              chkbox.addSelectionListener(new SelectionListener(){
                public void widgetSelected(                SelectionEvent e){
                  saveDecision=!saveDecision;
                }
                public void widgetDefaultSelected(                SelectionEvent e){
                  saveDecision=false;
                }
              }
);
              return super.createCustomArea(parent);
            }
            protected void buttonPressed(            int buttonId){
switch (buttonId) {
case 0:
                pref=PREF_OVERWRITE;
              break;
case 1:
            pref=PREF_NOT_OVERWRITE;
          break;
default :
        break;
    }
    if (saveDecision) {
      ReportPlugin.getDefault().getPreferenceStore().setValue(PREF_KEY,pref);
    }
    super.buttonPressed(buttonId);
  }
}
;
if (prefDialog.open() == 2) return;
}
ElementExportUtil.exportElement((DesignElementHandle)getSelection(),filename,pref == PREF_OVERWRITE);
}
}
}
 catch (Exception e) {
ExceptionHandler.handle(e);
}
}",0.9712292938099388
78926,"/** 
 * Checks whether a property is read-only in the property sheet. The visible property is read-only in all <code>elements</code>.
 * @param propName the property name
 * @return <code>true</code> if it is read-only. Otherwise<code>false</code>.
 */
protected boolean isPropertyReadOnly(String propName){
  boolean isReadOnly=false;
  for (int i=0; i < elements.size(); i++) {
    IElementDefn elementDefn=((DesignElementHandle)elements.get(i)).getDefn();
    if (elementDefn.isPropertyReadOnly(propName)) {
      isReadOnly=true;
      break;
    }
  }
  return isReadOnly;
}","/** 
 * Checks whether a property is read-only in the property sheet. The visible property is read-only in all <code>elements</code>.
 * @param propName the property name
 * @return <code>true</code> if it is read-only. Otherwise<code>false</code>.
 */
protected boolean isPropertyReadOnly(String propName){
  boolean isReadOnly=false;
  for (int i=0; i < elements.size(); i++) {
    PropertyHandle propertyHandle=((DesignElementHandle)elements.get(i)).getPropertyHandle(propName);
    if (propertyHandle != null && propertyHandle.isReadOnly()) {
      isReadOnly=true;
      break;
    }
  }
  return isReadOnly;
}",0.8056951423785594
78927,"protected List getPostTasks(){
  List retValue=new ArrayList();
  retValue.addAll(super.getPostTasks());
  if (container instanceof TableItem || container instanceof TableGroup || container instanceof TableRow) {
    TableItem table=LayoutUtil.getTableContainer(container);
    if (table != null)     retValue.add(new LayoutActivityTask(module,table));
  }
  NotificationEvent event=null;
  event=getContainerEvent();
  retValue.add(new NotificationRecordTask(container,event));
  if (state != UNDONE_STATE) {
    if (isSelector(newElement))     retValue.add(new NotificationRecordTask(newElement,event,container.getRoot()));
  }
 else {
    if (isSelector(oldElement))     retValue.add(new NotificationRecordTask(oldElement,event,container.getRoot()));
  }
  if (state != UNDONE_STATE) {
    event=new ElementDeletedEvent(container,oldElement);
    retValue.add(new NotificationRecordTask(oldElement,event,container.getRoot()));
  }
 else {
    event=new ElementDeletedEvent(container,newElement);
    retValue.add(new NotificationRecordTask(newElement,event,container.getRoot()));
  }
  if (state == DONE_STATE)   event.setSender(sender);
  return retValue;
}","protected List getPostTasks(){
  List retValue=new ArrayList();
  retValue.addAll(super.getPostTasks());
  if (container instanceof TableItem || container instanceof TableGroup || container instanceof TableRow) {
    TableItem table=LayoutUtil.getTableContainer(container);
    if (table != null)     retValue.add(new LayoutActivityTask(module,table));
  }
  NotificationEvent event=null;
  event=getContainerEvent();
  retValue.add(new NotificationRecordTask(container,event));
  if (state != UNDONE_STATE) {
    if (isSelector(newElement))     retValue.add(new NotificationRecordTask(newElement,event,container.getRoot()));
  }
 else {
    if (isSelector(oldElement))     retValue.add(new NotificationRecordTask(oldElement,event,container.getRoot()));
  }
  return retValue;
}",0.7942238267148014
78928,"/** 
 * Performs a semantic check of this element, and all its contained elements. Records errors in the module context. <p> Checks the contents of this element.
 * @param module the module information needed for the check, and records any errors
 */
public final void semanticCheck(Module module){
  allExceptions=validateWithContents(module);
}","/** 
 * Performs a semantic check of this element, and all its contained elements. Records errors in the module context. <p> Checks the contents of this element.
 * @param module the module information needed for the check, and records any errors
 */
public final void semanticCheck(Module module){
}",0.9287925696594428
78929,"public void setWordSpacing(String wordSpacing) throws DOMException {
}","public void setWordSpacing(String wordSpacing) throws DOMException {
  setCssText(STYLE_WORD_SPACING,wordSpacing);
}",0.7526881720430108
78930,"public void run() throws EngineException {
  ReportDesignHandle designHandle=(ReportDesignHandle)runnable.getDesignHandle();
  ReportDesignHandle copiedDesignHandle=designHandle;
  if (!validateParameters()) {
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  EngineEmitterServices services=new EngineEmitterServices(this);
  services.setRenderOption(renderOption);
  EngineConfig config=engine.getConfig();
  if (config != null)   services.setEmitterConfig(engine.getConfig().getEmitterConfigs());
  services.setRenderContext(context);
  services.setReportRunnable(runnable);
  usingParameterValues();
  ReportContextImpl reportContext=new ReportContextImpl(executionContext.getParams(),config.getConfigMap(),executionContext.getAppContext());
  executionContext.setReportContext(reportContext);
  ScriptedDesignVisitor visitor=new ScriptedDesignVisitor(copiedDesignHandle,executionContext);
  visitor.apply(copiedDesignHandle.getRoot());
  executionContext.getConfigs().putAll(runnable.getTestConfig());
  executionContext.getConfigs().putAll(System.getProperties());
  executionContext.setRenderOption(renderOption);
  String format=renderOption.getOutputFormat();
  if (format == null || format.length() == 0) {
    renderOption.setOutputFormat(""String_Node_Str"");
    format=""String_Node_Str"";
  }
 else   if (renderOption != null && format.equalsIgnoreCase(""String_Node_Str"") && ((FORenderOption)renderOption).getTailoredForFOP()) {
    format=""String_Node_Str"";
  }
  if (!ExtensionManager.getInstance().getEmitterExtensions().containsKey(format)) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new EngineException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  IContentEmitter emitter=ExtensionManager.getInstance().createEmitter(format);
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION);
  }
  ReportExecutor executor=new ReportExecutor(executionContext);
  services.setExecutor(executor);
  emitter=new LocalizedEmitter(executionContext,emitter);
  emitter=new HtmlPaginateEmitter(executor,emitter);
  emitter.initialize(services);
  try {
    Report report=new ReportParser().parse(((ReportRunnable)runnable).getReport());
    executor.execute(report,emitter);
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
}","public void run() throws EngineException {
  ReportDesignHandle designHandle=(ReportDesignHandle)runnable.getDesignHandle();
  ReportDesignHandle copiedDesignHandle=designHandle;
  if (!validateParameters()) {
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  EngineEmitterServices services=new EngineEmitterServices(this);
  services.setRenderOption(renderOption);
  EngineConfig config=engine.getConfig();
  if (config != null)   services.setEmitterConfig(engine.getConfig().getEmitterConfigs());
  services.setRenderContext(context);
  services.setReportRunnable(runnable);
  usingParameterValues();
  ReportContextImpl reportContext=new ReportContextImpl(executionContext.getParams(),config.getConfigMap(),executionContext.getAppContext());
  executionContext.setReportContext(reportContext);
  ScriptedDesignVisitor visitor=new ScriptedDesignVisitor(copiedDesignHandle,executionContext);
  visitor.apply(copiedDesignHandle.getRoot());
  executionContext.getConfigs().putAll(runnable.getTestConfig());
  executionContext.getConfigs().putAll(System.getProperties());
  executionContext.setRenderOption(renderOption);
  String format=renderOption.getOutputFormat();
  if (format == null || format.length() == 0) {
    renderOption.setOutputFormat(""String_Node_Str"");
    format=""String_Node_Str"";
  }
 else   if (renderOption != null && format.equalsIgnoreCase(""String_Node_Str"") && ((FORenderOption)renderOption).getTailoredForFOP()) {
    format=""String_Node_Str"";
  }
  if (!ExtensionManager.getInstance().getEmitterExtensions().containsKey(format)) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new EngineException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  IContentEmitter emitter=ExtensionManager.getInstance().createEmitter(format);
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION);
  }
  ReportExecutor executor=new ReportExecutor(executionContext);
  services.setExecutor(executor);
  emitter=new LocalizedEmitter(executionContext,emitter);
  if (format.equalsIgnoreCase(""String_Node_Str"")) {
    emitter=new HtmlPaginateEmitter(executor,emitter);
  }
 else   if (format.equalsIgnoreCase(""String_Node_Str"") || format.equalsIgnoreCase(""String_Node_Str"") || format.equalsIgnoreCase(""String_Node_Str"")) {
    emitter=new DefaultPaginateEmitter(executor,emitter);
  }
  emitter.initialize(services);
  try {
    Report report=new ReportParser().parse(((ReportRunnable)runnable).getReport());
    executor.execute(report,emitter);
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
}",0.9498327759197324
78931,"/** 
 * Implements   {@link ValueManager#computeValue(CSSStylableElement,String,CSSEngine,int,StyleMap,Value)}.
 */
public Value computeValue(CSSStylableElement elt,CSSEngine engine,int idx,Value value){
  CSSContext ctx=engine.getCSSContext();
  float fs=ctx.getMediumFontSize();
  if (value == CSSValueConstants.XX_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f / 1.2f/ 1.2f);
  }
  if (value == CSSValueConstants.X_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f / 1.2f);
  }
  if (value == CSSValueConstants.SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f);
  }
  if (value == CSSValueConstants.MEDIUM_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs);
  }
  if (value == CSSValueConstants.LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f);
  }
  if (value == CSSValueConstants.X_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f * 1.2f);
  }
  if (value == CSSValueConstants.XX_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f * 1.2f* 1.2f);
  }
  float scale=1.0f;
  boolean doParentRelative=false;
  if (value == CSSValueConstants.SMALLER_VALUE) {
    doParentRelative=true;
    scale=1.0f / 1.2f;
  }
 else   if (value == CSSValueConstants.LARGER_VALUE) {
    doParentRelative=true;
    scale=1.2f;
  }
 else   if (value.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {
switch (value.getPrimitiveType()) {
case CSSPrimitiveValue.CSS_EMS:
      doParentRelative=true;
    scale=value.getFloatValue();
  break;
case CSSPrimitiveValue.CSS_EXS:
doParentRelative=true;
scale=value.getFloatValue() * 0.5f;
break;
case CSSPrimitiveValue.CSS_PERCENTAGE:
doParentRelative=true;
scale=value.getFloatValue() * 0.01f;
break;
}
}
if (doParentRelative) {
CSSStylableElement parent=(CSSStylableElement)elt.getParent();
if (parent != null) {
StyleDeclaration style=(StyleDeclaration)parent.getComputedStyle();
if (style != null) {
Value fontSize=(Value)style.getProperty(IStyle.STYLE_FONT_SIZE);
if (fontSize != null) {
fs=fontSize.getFloatValue();
}
}
}
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * scale);
}
return super.computeValue(elt,engine,idx,value);
}","/** 
 * Implements   {@link ValueManager#computeValue(CSSStylableElement,String,CSSEngine,int,StyleMap,Value)}.
 */
public Value computeValue(CSSStylableElement elt,CSSEngine engine,int idx,Value value){
  CSSContext ctx=engine.getCSSContext();
  float fs=ctx.getMediumFontSize();
  if (value == CSSValueConstants.XX_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f / 1.2f/ 1.2f);
  }
  if (value == CSSValueConstants.X_SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f / 1.2f);
  }
  if (value == CSSValueConstants.SMALL_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs / 1.2f);
  }
  if (value == CSSValueConstants.MEDIUM_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs);
  }
  if (value == CSSValueConstants.LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f);
  }
  if (value == CSSValueConstants.X_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f * 1.2f);
  }
  if (value == CSSValueConstants.XX_LARGE_VALUE) {
    return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * 1.2f * 1.2f* 1.2f);
  }
  float scale=1.0f;
  boolean doParentRelative=false;
  if (value == CSSValueConstants.SMALLER_VALUE) {
    doParentRelative=true;
    scale=1.0f / 1.2f;
  }
 else   if (value == CSSValueConstants.LARGER_VALUE) {
    doParentRelative=true;
    scale=1.2f;
  }
 else   if (value.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {
switch (value.getPrimitiveType()) {
case CSSPrimitiveValue.CSS_EMS:
      doParentRelative=true;
    scale=value.getFloatValue();
  break;
case CSSPrimitiveValue.CSS_EXS:
doParentRelative=true;
scale=value.getFloatValue() * 0.5f;
break;
case CSSPrimitiveValue.CSS_PERCENTAGE:
doParentRelative=true;
scale=value.getFloatValue() * 0.01f;
break;
}
}
if (doParentRelative) {
CSSStylableElement parent=(CSSStylableElement)elt.getParent();
if (parent != null) {
IStyle style=parent.getComputedStyle();
if (style != null) {
Value fontSize=(Value)style.getProperty(IStyle.STYLE_FONT_SIZE);
if (fontSize != null) {
fs=fontSize.getFloatValue();
}
}
}
return new FloatValue(CSSPrimitiveValue.CSS_NUMBER,fs * scale);
}
return super.computeValue(elt,engine,idx,value);
}",0.9933628318584072
78932,"public Element popParent(){
  Element popElement=(Element)parentStack.pop();
  if (!parentStack.isEmpty())   currentParent=(Element)parentStack.peek();
  return popElement;
}","public Element popParent(){
  Element popElement=null;
  if (!parentStack.isEmpty())   popElement=(Element)parentStack.pop();
  if (!parentStack.isEmpty())   currentParent=(Element)parentStack.peek();
  return popElement;
}",0.7455919395465995
78933,"/** 
 * Locates a design-time series corresponding to a given cloned run-time series.
 * @param seRT
 * @return
 */
private final Series findDesignTimeSeries(Series seRT) throws ChartException {
  final ChartWithAxes cwaRT=(ChartWithAxes)_iun.getRunTimeModel();
  final ChartWithAxes cwaDT=(ChartWithAxes)_iun.getDesignTimeModel();
  Series seDT=null;
  Axis[] axaBase=cwaRT.getPrimaryBaseAxes();
  Axis axBase=axaBase[0];
  Axis[] axaOrthogonal=cwaRT.getOrthogonalAxes(axBase,true);
  EList elSD, elSE;
  SeriesDefinition sd;
  Series se=null;
  int i, j=0, k=0;
  boolean bFound=false;
  for (i=0; i < axaOrthogonal.length; i++) {
    elSD=axaOrthogonal[i].getSeriesDefinitions();
    for (j=0; j < elSD.size(); j++) {
      sd=(SeriesDefinition)elSD.get(j);
      elSE=sd.getSeries();
      for (k=0; k < elSE.size(); k++) {
        se=(Series)elSE.get(k);
        if (seRT == se) {
          bFound=true;
          break;
        }
      }
      if (bFound) {
        break;
      }
    }
    if (bFound) {
      break;
    }
  }
  if (!bFound) {
    throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.OUT_OF_SYNC,""String_Node_Str"",new Object[]{seRT},ResourceBundle.getBundle(Messages.DEVICE_EXTENSION,getLocale()));
  }
  axaBase=cwaDT.getPrimaryBaseAxes();
  axBase=axaBase[0];
  axaOrthogonal=cwaDT.getOrthogonalAxes(axBase,true);
  elSD=axaOrthogonal[i].getSeriesDefinitions();
  sd=(SeriesDefinition)elSD.get(j);
  elSE=sd.getSeries();
  seDT=(Series)elSE.get(k);
  return seDT;
}","/** 
 * Locates a design-time series corresponding to a given cloned run-time series.
 * @param seRT
 * @return
 */
private final Series findDesignTimeSeries(Series seRT) throws ChartException {
  Series seDT=null;
  final Chart cmRT=_iun.getRunTimeModel();
  final Chart cmDT=_iun.getDesignTimeModel();
  if (cmDT instanceof ChartWithAxes) {
    final ChartWithAxes cwaRT=(ChartWithAxes)cmRT;
    final ChartWithAxes cwaDT=(ChartWithAxes)cmDT;
    Axis[] axaBase=cwaRT.getPrimaryBaseAxes();
    Axis axBase=axaBase[0];
    Axis[] axaOrthogonal=cwaRT.getOrthogonalAxes(axBase,true);
    EList elSD, elSE;
    SeriesDefinition sd;
    Series se=null;
    int i=-1, j=0, k=0;
    boolean bFound=false;
    elSD=axaBase[0].getSeriesDefinitions();
    for (j=0; j < elSD.size(); j++) {
      sd=(SeriesDefinition)elSD.get(j);
      elSE=sd.getSeries();
      for (k=0; k < elSE.size(); k++) {
        se=(Series)elSE.get(k);
        if (seRT == se) {
          bFound=true;
          break;
        }
      }
      if (bFound) {
        break;
      }
    }
    if (!bFound) {
      for (i=0; i < axaOrthogonal.length; i++) {
        elSD=axaOrthogonal[i].getSeriesDefinitions();
        for (j=0; j < elSD.size(); j++) {
          sd=(SeriesDefinition)elSD.get(j);
          elSE=sd.getSeries();
          for (k=0; k < elSE.size(); k++) {
            se=(Series)elSE.get(k);
            if (seRT == se) {
              bFound=true;
              break;
            }
          }
          if (bFound) {
            break;
          }
        }
        if (bFound) {
          break;
        }
      }
    }
    if (!bFound) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.OUT_OF_SYNC,""String_Node_Str"",new Object[]{seRT},ResourceBundle.getBundle(Messages.DEVICE_EXTENSION,getLocale()));
    }
    axaBase=cwaDT.getPrimaryBaseAxes();
    axBase=axaBase[0];
    axaOrthogonal=cwaDT.getOrthogonalAxes(axBase,true);
    if (i == -1) {
      elSD=axaBase[0].getSeriesDefinitions();
    }
 else {
      elSD=axaOrthogonal[i].getSeriesDefinitions();
    }
    sd=(SeriesDefinition)elSD.get(j);
    elSE=sd.getSeries();
    seDT=(Series)elSE.get(k);
  }
 else   if (cmDT instanceof ChartWithoutAxes) {
    final ChartWithoutAxes cwoaRT=(ChartWithoutAxes)cmRT;
    final ChartWithoutAxes cwoaDT=(ChartWithoutAxes)cmDT;
    EList elSD, elSE;
    SeriesDefinition sd;
    Series se=null;
    int i=-1, j=0, k=0;
    boolean bFound=false;
    elSD=cwoaRT.getSeriesDefinitions();
    for (j=0; j < elSD.size(); j++) {
      sd=(SeriesDefinition)elSD.get(j);
      elSE=sd.getSeries();
      for (k=0; k < elSE.size(); k++) {
        se=(Series)elSE.get(k);
        if (seRT == se) {
          bFound=true;
          break;
        }
      }
      if (bFound) {
        break;
      }
    }
    if (!bFound) {
      i=1;
      elSD=((SeriesDefinition)cwoaRT.getSeriesDefinitions().get(0)).getSeriesDefinitions();
      for (j=0; j < elSD.size(); j++) {
        sd=(SeriesDefinition)elSD.get(j);
        elSE=sd.getSeries();
        for (k=0; k < elSE.size(); k++) {
          se=(Series)elSE.get(k);
          if (seRT == se) {
            bFound=true;
            break;
          }
        }
        if (bFound) {
          break;
        }
      }
    }
    if (!bFound) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.OUT_OF_SYNC,""String_Node_Str"",new Object[]{seRT},ResourceBundle.getBundle(Messages.DEVICE_EXTENSION,getLocale()));
    }
    if (i == -1) {
      elSD=cwoaDT.getSeriesDefinitions();
    }
 else {
      elSD=((SeriesDefinition)cwoaDT.getSeriesDefinitions().get(0)).getSeriesDefinitions();
    }
    sd=(SeriesDefinition)elSD.get(j);
    elSE=sd.getSeries();
    seDT=(Series)elSE.get(k);
  }
  return seDT;
}",0.4828630941109638
78934,"public void enableInteraction(InteractionEvent ie) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getLocale()));
    return;
  }
  Trigger[] triggers=ie.getTriggers();
  if (triggers == null) {
    return;
  }
  final PrimitiveRenderEvent pre=ie.getHotSpot();
  Element elm=null;
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    int[][] pa=getCoordinatesAsInts(loa);
    elm=svggc.createPolygon(pa[0],pa[1],pa[0].length);
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    elm=svggc.createOval(boEllipse.getLeft(),boEllipse.getTop(),boEllipse.getWidth(),boEllipse.getHeight());
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      elm=svggc.createGeneralPath(fArea);
    }
 else {
      elm=svggc.createGeneralPath(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
  }
  if (elm != null) {
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      final StructureSource src=(StructureSource)ie.getSource();
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
        Element title=svggc.dom.createElement(""String_Node_Str"");
      title.appendChild(svggc.dom.createTextNode(((TooltipValue)tg.getAction().getValue()).getText()));
    elm.appendChild(title);
  elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
break;
case ActionType.URL_REDIRECT:
elm.setAttribute(""String_Node_Str"",""String_Node_Str"" + ((URLValue)tg.getAction().getValue()).getBaseUrl() + ""String_Node_Str"");
setCursor(elm);
break;
case ActionType.TOGGLE_VISIBILITY:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getLocale()) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
List components=(List)componentPrimitives.get(seDT);
Iterator iter=components.iterator();
StringBuffer sb=new StringBuffer();
sb.append(seDT.hashCode());
if (iter.hasNext()) sb.append(""String_Node_Str"");
while (iter.hasNext()) {
sb.append(""String_Node_Str"").append(iter.next()).append(""String_Node_Str"");
if (iter.hasNext()) sb.append(""String_Node_Str"");
}
if (components.size() > 0) sb.append(""String_Node_Str"");
elm.setAttribute(""String_Node_Str"",""String_Node_Str"" + sb.toString() + ""String_Node_Str"");
setCursor(elm);
((SVGGraphics2D)_g2d).addCSSStyle(""String_Node_Str"" + seDT.hashCode(),""String_Node_Str"",""String_Node_Str"");
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
}
break;
case ActionType.HIGHLIGHT:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getLocale()) + seRT);
String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
if (scriptEvent != null) {
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
List components=(List)componentPrimitives.get(seDT);
Iterator iter=components.iterator();
StringBuffer sb=new StringBuffer();
sb.append(seDT.hashCode());
if (iter.hasNext()) sb.append(""String_Node_Str"");
while (iter.hasNext()) {
sb.append(""String_Node_Str"").append(iter.next()).append(""String_Node_Str"");
if (iter.hasNext()) sb.append(""String_Node_Str"");
}
if (components.size() > 0) sb.append(""String_Node_Str"");
elm.setAttribute(scriptEvent,""String_Node_Str"" + sb.toString() + ""String_Node_Str"");
setCursor(elm);
((SVGGraphics2D)_g2d).addCSSStyle(""String_Node_Str"" + seDT.hashCode(),""String_Node_Str"",""String_Node_Str"");
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
}
}
break;
case ActionType.INVOKE_SCRIPT:
final StructureSource sructSource=(StructureSource)ie.getSource();
String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
if (scriptEvent != null) {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ sructSource.getSource().hashCode()+ ""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
((SVGGraphics2D)_g2d).addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
hotspotLayer.appendChild(elm);
}
}","public void enableInteraction(InteractionEvent ie) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getLocale()));
    return;
  }
  Trigger[] triggers=ie.getTriggers();
  if (triggers == null) {
    return;
  }
  final PrimitiveRenderEvent pre=ie.getHotSpot();
  Element elm=null;
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    int[][] pa=getCoordinatesAsInts(loa);
    elm=svggc.createPolygon(pa[0],pa[1],pa[0].length);
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    elm=svggc.createOval(boEllipse.getLeft(),boEllipse.getTop(),boEllipse.getWidth(),boEllipse.getHeight());
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      elm=svggc.createGeneralPath(fArea);
    }
 else {
      elm=svggc.createGeneralPath(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
  }
  if (elm != null) {
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      final StructureSource src=(StructureSource)ie.getSource();
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
        Element title=svggc.dom.createElement(""String_Node_Str"");
      title.appendChild(svggc.dom.createTextNode(((TooltipValue)tg.getAction().getValue()).getText()));
    elm.appendChild(title);
  elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
break;
case ActionType.URL_REDIRECT:
elm.setAttribute(""String_Node_Str"",""String_Node_Str"" + ((URLValue)tg.getAction().getValue()).getBaseUrl() + ""String_Node_Str"");
setCursor(elm);
break;
case ActionType.TOGGLE_VISIBILITY:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getLocale()) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
List components=(List)componentPrimitives.get(seDT);
if (components != null) {
Iterator iter=components.iterator();
StringBuffer sb=new StringBuffer();
sb.append(seDT.hashCode());
if (iter.hasNext()) sb.append(""String_Node_Str"");
while (iter.hasNext()) {
sb.append(""String_Node_Str"").append(iter.next()).append(""String_Node_Str"");
if (iter.hasNext()) sb.append(""String_Node_Str"");
}
if (components.size() > 0) sb.append(""String_Node_Str"");
elm.setAttribute(""String_Node_Str"",""String_Node_Str"" + sb.toString() + ""String_Node_Str"");
setCursor(elm);
((SVGGraphics2D)_g2d).addCSSStyle(""String_Node_Str"" + seDT.hashCode(),""String_Node_Str"",""String_Node_Str"");
}
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
}
break;
case ActionType.HIGHLIGHT:
if (src.getType() == StructureType.SERIES) {
final Series seRT=(Series)src.getSource();
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",getLocale()) + seRT);
String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
if (scriptEvent != null) {
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
List components=(List)componentPrimitives.get(seDT);
if (components != null) {
Iterator iter=components.iterator();
StringBuffer sb=new StringBuffer();
sb.append(seDT.hashCode());
if (iter.hasNext()) sb.append(""String_Node_Str"");
while (iter.hasNext()) {
sb.append(""String_Node_Str"").append(iter.next()).append(""String_Node_Str"");
if (iter.hasNext()) sb.append(""String_Node_Str"");
}
if (components.size() > 0) sb.append(""String_Node_Str"");
elm.setAttribute(scriptEvent,""String_Node_Str"" + sb.toString() + ""String_Node_Str"");
setCursor(elm);
((SVGGraphics2D)_g2d).addCSSStyle(""String_Node_Str"" + seDT.hashCode(),""String_Node_Str"",""String_Node_Str"");
}
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
}
}
break;
case ActionType.INVOKE_SCRIPT:
final StructureSource sructSource=(StructureSource)ie.getSource();
String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
if (scriptEvent != null) {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ sructSource.getSource().hashCode()+ ""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
((SVGGraphics2D)_g2d).addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
hotspotLayer.appendChild(elm);
}
}",0.9948406117560348
78935,"/** 
 * Creates the context menu
 * @param sourceViewer the source viewer
 * @param object the object
 * @param menu the menu
 */
public void createContextMenu(TreeViewer sourceViewer,Object object,IMenuManager menu){
  menu.add(new Separator());
  InsertInLayoutAction insertAction=new InsertInLayoutAction(object);
  if (insertAction.isTypeAvailable()) {
    menu.add(insertAction);
  }
  menu.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
  RenameAction renameAction=new RenameAction(sourceViewer);
  if (renameAction.isEnabled()) {
    menu.add(renameAction);
  }
  DeleteAction deleteAction=new DeleteAction(object);
  if (deleteAction.isEnabled()) {
    menu.add(deleteAction);
  }
  CutAction cutAction=new CutAction(object);
  if (cutAction.isEnabled())   menu.add(cutAction);
  CopyAction copyAction=new CopyAction(object);
  if (copyAction.isEnabled())   menu.add(copyAction);
  menu.add(new PasteAction(object));
  menu.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS + ""String_Node_Str""));
  Action action=new CodePageAction(object);
  if (action.isEnabled())   menu.add(action);
  menu.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS + ""String_Node_Str""));
  action=new ExportToLibraryAction(object);
  if (action.isEnabled())   menu.add(action);
}","/** 
 * Creates the context menu
 * @param sourceViewer the source viewer
 * @param object the object
 * @param menu the menu
 */
public void createContextMenu(TreeViewer sourceViewer,Object object,IMenuManager menu){
  menu.add(new Separator());
  InsertInLayoutAction insertAction=new InsertInLayoutAction(object);
  if (insertAction.isTypeAvailable()) {
    menu.add(insertAction);
  }
  menu.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
  RenameAction renameAction=new RenameAction(sourceViewer);
  if (renameAction.isEnabled()) {
    menu.add(renameAction);
  }
  DeleteAction deleteAction=new DeleteAction(object);
  if (deleteAction.isEnabled()) {
    menu.add(deleteAction);
  }
  CutAction cutAction=new CutAction(object);
  if (cutAction.isEnabled())   menu.add(cutAction);
  CopyAction copyAction=new CopyAction(object);
  if (copyAction.isEnabled())   menu.add(copyAction);
  menu.add(new PasteAction(object));
  menu.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS + ""String_Node_Str""));
  Action action=new CodePageAction(object);
  if (action.isEnabled())   menu.add(action);
  menu.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS + ""String_Node_Str""));
  action=new ExportToLibraryAction(object);
  if (object instanceof ReportDesignHandle || (object instanceof ReportElementHandle && !(((ReportElementHandle)object).getRoot() instanceof LibraryHandle)))   menu.add(action);
}",0.9396615158204562
78936,"public boolean isEnabled(){
  if (getSelection() instanceof ReportElementHandle)   return ((ReportElementHandle)getSelection()).getName() != null;
  return false;
}","public boolean isEnabled(){
  if (getSelection() instanceof ReportDesignHandle)   return true;
 else   if (getSelection() instanceof ReportElementHandle)   return ((ReportElementHandle)getSelection()).getName() != null;
  return false;
}",0.8179551122194514
78937,"public void run(){
  try {
    FileDialog dialog=new FileDialog(UIUtil.getDefaultShell(),SWT.OPEN);
    dialog.setFilterExtensions(new String[]{""String_Node_Str""});
    String filename;
    pref=ReportPlugin.getDefault().getPreferenceStore().getInt(PREF_KEY);
    filename=dialog.open();
    if (filename != null) {
      if (pref == PREF_PROMPT) {
        MessageDialog prefDialog=new MessageDialog(dialog.getParent(),DIALOG_TITLE,null,DIALOG_MESSAGE,MessageDialog.INFORMATION,new String[]{BUTTON_YES,BUTTON_NO,BUTTON_CANCEL},0){
          protected Control createCustomArea(          Composite parent){
            Composite container=new Composite(parent,SWT.NONE);
            GridLayout gridLayout=new GridLayout();
            gridLayout.marginWidth=20;
            gridLayout.marginTop=15;
            container.setLayout(gridLayout);
            Button chkbox=new Button(container,SWT.CHECK);
            chkbox.setText(REMEMBER_DECISION);
            chkbox.addSelectionListener(new SelectionListener(){
              public void widgetSelected(              SelectionEvent e){
                saveDecision=!saveDecision;
              }
              public void widgetDefaultSelected(              SelectionEvent e){
                saveDecision=false;
              }
            }
);
            return super.createCustomArea(parent);
          }
          protected void buttonPressed(          int buttonId){
switch (buttonId) {
case 0:
              pref=PREF_OVERWRITE;
            break;
case 1:
          pref=PREF_NOT_OVERWRITE;
        break;
default :
      break;
  }
  if (saveDecision) {
    ReportPlugin.getDefault().getPreferenceStore().setValue(PREF_KEY,pref);
  }
  super.buttonPressed(buttonId);
}
}
;
if (prefDialog.open() == 2) return;
}
ElementExportUtil.exportElement((DesignElementHandle)getSelection(),filename,pref == PREF_OVERWRITE);
}
}
 catch (Exception e) {
ExceptionHandler.handle(e);
}
}","public void run(){
  try {
    FileDialog dialog;
    if (getSelection() instanceof ReportDesignHandle)     dialog=new FileDialog(UIUtil.getDefaultShell(),SWT.SAVE);
 else     dialog=new FileDialog(UIUtil.getDefaultShell(),SWT.OPEN);
    dialog.setFilterExtensions(new String[]{""String_Node_Str""});
    String filename;
    pref=ReportPlugin.getDefault().getPreferenceStore().getInt(PREF_KEY);
    filename=dialog.open();
    if (filename != null) {
      if (getSelection() instanceof ReportDesignHandle)       ElementExportUtil.exportDesign((ReportDesignHandle)getSelection(),filename);
 else {
        if (pref == PREF_PROMPT) {
          MessageDialog prefDialog=new MessageDialog(dialog.getParent(),DIALOG_TITLE,null,DIALOG_MESSAGE,MessageDialog.INFORMATION,new String[]{BUTTON_YES,BUTTON_NO,BUTTON_CANCEL},0){
            protected Control createCustomArea(            Composite parent){
              Composite container=new Composite(parent,SWT.NONE);
              GridLayout gridLayout=new GridLayout();
              gridLayout.marginWidth=20;
              gridLayout.marginTop=15;
              container.setLayout(gridLayout);
              Button chkbox=new Button(container,SWT.CHECK);
              chkbox.setText(REMEMBER_DECISION);
              chkbox.addSelectionListener(new SelectionListener(){
                public void widgetSelected(                SelectionEvent e){
                  saveDecision=!saveDecision;
                }
                public void widgetDefaultSelected(                SelectionEvent e){
                  saveDecision=false;
                }
              }
);
              return super.createCustomArea(parent);
            }
            protected void buttonPressed(            int buttonId){
switch (buttonId) {
case 0:
                pref=PREF_OVERWRITE;
              break;
case 1:
            pref=PREF_NOT_OVERWRITE;
          break;
default :
        break;
    }
    if (saveDecision) {
      ReportPlugin.getDefault().getPreferenceStore().setValue(PREF_KEY,pref);
    }
    super.buttonPressed(buttonId);
  }
}
;
if (prefDialog.open() == 2) return;
}
ElementExportUtil.exportElement((DesignElementHandle)getSelection(),filename,pref == PREF_OVERWRITE);
}
}
}
 catch (Exception e) {
ExceptionHandler.handle(e);
}
}",0.9157769869513642
78938,"protected void perform(boolean undo){
  if (undo) {
    unresolveStyles(newTheme);
    if (oldTheme instanceof String)     module.setThemeName((String)oldTheme);
 else     module.setTheme((Theme)oldTheme);
  }
 else {
    unresolveStyles(oldTheme);
    module.setTheme(newTheme);
  }
}","protected void perform(boolean undo){
  if (undo) {
    if (oldTheme instanceof String)     module.setThemeName((String)oldTheme);
 else     module.setTheme((Theme)oldTheme);
    updateStyles(newTheme);
  }
 else {
    module.setTheme(newTheme);
    updateStyles(oldTheme);
  }
}",0.3971631205673759
78939,"/** 
 * Updates the element reference which refers to the given referenceable element.
 * @param referred the element whose element references are updated
 */
public void updateClientReferences(ReferenceableElement referred){
  List clients=referred.getClientList();
  Iterator iter=clients.iterator();
  while (iter.hasNext()) {
    BackRef ref=(BackRef)iter.next();
    DesignElement client=ref.element;
    ElementRefValue value=(ElementRefValue)client.getLocalProperty(this,ref.propName);
    value.unresolved(value.getName());
    referred.dropClient(client);
    client.resolveElementReference(this,client.getPropertyDefn(ref.propName));
  }
}","/** 
 * Updates the element reference which refers to the given referenceable element.
 * @param referred the element whose element references are updated
 */
public void updateClientReferences(ReferenceableElement referred){
  List clients=referred.getClientList();
  Iterator iter=clients.iterator();
  while (iter.hasNext()) {
    BackRef ref=(BackRef)iter.next();
    DesignElement client=ref.element;
    ElementRefValue value=(ElementRefValue)client.getLocalProperty(this,ref.propName);
    value.unresolved(value.getName());
    referred.dropClient(client);
    if (IStyledElementModel.STYLE_PROP.equalsIgnoreCase(ref.propName))     client.broadcast(new StyleEvent(client));
 else     client.resolveElementReference(this,client.getPropertyDefn(ref.propName));
  }
}",0.9134412385643912
78940,"public void startForeign(IForeignContent foreign){
  IStyle mergedStyle=foreign.getStyle();
  if (peek(mergedStyle)) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=foreign.getX();
  DimensionType y=foreign.getY();
  DimensionType width=foreign.getWidth();
  DimensionType height=foreign.getHeight();
  int display;
  display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  String tagName;
  if (handleAction(foreign.getHyperlinkAction())) {
    tagName=HTMLTags.TAG_A;
    setDisplayProperty(display,DISPLAY_BLOCK | DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(mergedStyle,styleBuffer);
  }
 else {
    tagName=openTagByType(display,DISPLAY_FLAG_ALL);
    setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  setStyleName(foreign.getStyleClass());
  setBookmark(tagName,foreign.getBookmark());
  writer.attribute(HTMLTags.ATTR_TITLE,foreign.getHelpText());
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  handleStyle(foreign,styleBuffer);
  Object rawValue=foreign.getRawValue();
  String rawType=foreign.getRawType();
  boolean notHtml=!IForeignContent.HTML_TYPE.equalsIgnoreCase(rawType);
  String text=rawValue == null ? null : rawValue.toString();
  if (!notHtml) {
    text=text.trim();
    if (text.length() > 6) {
      String htmlTag=text.substring(0,6);
      if (""String_Node_Str"".equalsIgnoreCase(htmlTag)) {
        text=text.substring(6);
      }
    }
    if (text.length() > 7) {
      String endTag=text.substring(text.length() - 7);
      if (""String_Node_Str"".equalsIgnoreCase(endTag)) {
        text=text.substring(0,text.length() - 7);
      }
    }
  }
  writer.text(text,notHtml,notHtml);
  writer.closeTag(tagName);
}","public void startForeign(IForeignContent foreign){
  IStyle mergedStyle=foreign.getStyle();
  if (peek(mergedStyle)) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  StringBuffer styleBuffer=new StringBuffer();
  DimensionType x=foreign.getX();
  DimensionType y=foreign.getY();
  DimensionType width=foreign.getWidth();
  DimensionType height=foreign.getHeight();
  int display;
  display=checkElementType(x,y,width,height,mergedStyle,styleBuffer);
  String tagName;
  if (handleAction(foreign.getHyperlinkAction())) {
    tagName=HTMLTags.TAG_A;
    setDisplayProperty(display,DISPLAY_BLOCK | DISPLAY_INLINE_BLOCK,styleBuffer);
    AttributeBuilder.checkHyperlinkTextDecoration(mergedStyle,styleBuffer);
  }
 else {
    tagName=openTagByType(display,DISPLAY_FLAG_ALL);
    setDisplayProperty(display,DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  setStyleName(foreign.getStyleClass());
  setBookmark(tagName,foreign.getBookmark());
  writer.attribute(HTMLTags.ATTR_TITLE,foreign.getHelpText());
  handleShrink(display,mergedStyle,height,width,styleBuffer);
  handleStyle(foreign,styleBuffer);
  Object rawValue=foreign.getRawValue();
  String rawType=foreign.getRawType();
  boolean isHtml=IForeignContent.HTML_TYPE.equalsIgnoreCase(rawType);
  String text=rawValue == null ? null : rawValue.toString();
  if (isHtml) {
    text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
    text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
    text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
    text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  writer.text(text,!isHtml,!isHtml);
  writer.closeTag(tagName);
}",0.7663389242336611
78941,"/** 
 * Returns the object can be deleted. If the parent can be deleted, the children will be skippedl
 * @param source single or multiple objects
 */
protected boolean canDrop(Object source){
  if (source == null) {
    return false;
  }
  if (source instanceof StructuredSelection) {
    return canDrop(((StructuredSelection)source).toArray());
  }
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    if (array.length == 0) {
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (DNDUtil.checkContainerExists(array[i],array))       continue;
      if (canDrop(array[i]))       return true;
    }
    return false;
  }
  source=DNDUtil.unwrapToModel(source);
  if (source instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)source;
    DesignElementHandle handle=slot.getElementHandle();
    return slot.getContents().size() > 0 && ((handle instanceof ListHandle && ((ListHandle)handle).canDrop() || (handle instanceof ListGroupHandle) && ((ListGroupHandle)handle).canDrop())) && canDrop(slot.getContents());
  }
  if (source instanceof EmbeddedImageHandle) {
    return true;
  }
  if (source instanceof CellHandle) {
    return ((CellHandle)source).getContent().getContents().size() > 0 && ((CellHandle)source).canDrop();
  }
  if (source instanceof MasterPageHandle) {
    return false;
  }
 else   if (source instanceof ReportElementHandle) {
    return ((ReportElementHandle)source).canDrop();
  }
 else   return false;
}","/** 
 * Returns the object can be deleted. If the parent can be deleted, the children will be skippedl
 * @param source single or multiple objects
 */
protected boolean canDrop(Object source){
  if (source == null) {
    return false;
  }
  if (source instanceof List) {
    return canDrop(((List)source).toArray());
  }
  if (source instanceof StructuredSelection) {
    return canDrop(((StructuredSelection)source).toArray());
  }
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    if (array.length == 0) {
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (DNDUtil.checkContainerExists(array[i],array))       continue;
      if (canDrop(array[i]))       return true;
    }
    return false;
  }
  source=DNDUtil.unwrapToModel(source);
  if (source instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)source;
    DesignElementHandle handle=slot.getElementHandle();
    return slot.getContents().size() > 0 && ((handle instanceof ListHandle && ((ListHandle)handle).canDrop()) || (handle instanceof ListGroupHandle && ((ListGroupHandle)handle).canDrop())) && canDrop(slot.getContents());
  }
  if (source instanceof EmbeddedImageHandle) {
    return true;
  }
  if (source instanceof CellHandle) {
    return ((CellHandle)source).getContent().getContents().size() > 0 && ((CellHandle)source).canDrop();
  }
  if (source instanceof MasterPageHandle) {
    return false;
  }
 else   if (source instanceof ReportElementHandle) {
    return ((ReportElementHandle)source).canDrop();
  }
 else   return false;
}",0.9724228496388706
78942,"public void selectionChanged(IAction action,ISelection selection){
  IEditorPart editor=UIUtil.getActiveEditor(true);
  action.setEnabled(editor.getEditorInput().getName().endsWith(""String_Node_Str""));
}","public void selectionChanged(IAction action,ISelection selection){
  action.setEnabled(isEnable());
}",0.6447368421052632
78943,"/** 
 * Creates the outline provider and returns it.
 * @param object the object
 * @return the outline provider
 */
public static INodeProvider createProvider(Object object){
  if (object instanceof ReportDesignHandle) {
    return new ReportDesignNodeProvider();
  }
  if (object instanceof LibraryHandle) {
    return new LibraryHandleNodeProvider();
  }
 else   if (object instanceof ReportElementModel) {
    ReportElementModel model=(ReportElementModel)object;
    DesignElementHandle handle=model.getElementHandle();
    if (handle instanceof ModuleHandle) {
switch (model.getSlotId()) {
case ReportDesignHandle.BODY_SLOT:
        return new BodyNodeProvider();
case ModuleHandle.COMPONENT_SLOT:
      return new ComponentsProvider();
case ILibraryModel.THEMES_SLOT:
{
      if (model.getElementHandle() instanceof LibraryHandle) {
        ThemesNodeProvider themesProvider=new ThemesNodeProvider();
        themesProvider.setSorter(new AlphabeticallyComparator());
        return themesProvider;
      }
      StylesNodeProvider provider=new StylesNodeProvider();
      provider.setSorter(new AlphabeticallyComparator());
      return provider;
    }
case ModuleHandle.PAGE_SLOT:
  return new MasterPagesNodeProvider();
case ModuleHandle.DATA_SOURCE_SLOT:
return new DataSourcesNodeProvider();
case ModuleHandle.PARAMETER_SLOT:
return new ParametersNodeProvider();
case ModuleHandle.DATA_SET_SLOT:
return new DataSetsNodeProvider();
}
}
 else if (handle instanceof TableHandle || handle instanceof TableGroupHandle) {
return new TableBandProvider();
}
 else if (handle instanceof ListHandle || handle instanceof ListGroupHandle) {
return new ListBandProvider();
}
 else if (handle instanceof MasterPageHandle) {
return new MasterPageBandProvider();
}
}
 else if (object instanceof DesignElementHandle) {
String elementName=((DesignElementHandle)object).getDefn().getName();
IProviderFactory factory=ExtensionPointManager.getInstance().getProviderFactory(elementName);
if (factory != null) {
return factory.createProvider(object);
}
if (object instanceof CellHandle) {
return new CellProvider();
}
 else if (object instanceof GridHandle) {
return new GridProvider();
}
 else if (object instanceof StyleHandle) {
return new StyleNodeProvider();
}
 else if (object instanceof ListHandle) {
return new ListProvider();
}
 else if (object instanceof TableHandle) {
return new TableProvider();
}
 else if (object instanceof TableGroupHandle || object instanceof ListGroupHandle) {
return new GroupProvider();
}
 else if (object instanceof RowHandle) {
return new RowProvider();
}
 else if (object instanceof DataItemHandle) {
return new DataProvider();
}
 else if (object instanceof LabelHandle) {
return new LabelProvider();
}
 else if (object instanceof MasterPageHandle) {
return new MasterPageNodeProvider();
}
 else if (object instanceof DataSourceHandle) {
return new DataSourceNodeProvider();
}
 else if (object instanceof DataSetHandle) {
return new DataSetNodeProvider();
}
 else if (object instanceof ParameterGroupHandle) {
if (object instanceof CascadingParameterGroupHandle) {
return new CascadingParameterGroupNodeProvider();
}
return new ParameterGroupNodeProvider();
}
 else if (object instanceof ParameterHandle) {
return new ParameterNodeProvider();
}
 else if (object instanceof ThemeHandle) {
return new ThemeNodeProvider();
}
}
 else if (object instanceof DataSetItemModel) {
return new DataSetColumnProvider();
}
 else if (object instanceof DataSetParameterHandle) {
return new DataSetParameterProvider();
}
 else if (object instanceof EmbeddedImageNode) {
return new EmbeddedImagesNodeProvider();
}
 else if (object instanceof EmbeddedImageHandle) {
return new EmbeddedImageNodeProvider();
}
 else if (object instanceof LibraryNode) {
return new LibrariesNodeProvider();
}
return getDefaultProvider();
}","/** 
 * Creates the outline provider and returns it.
 * @param object the object
 * @return the outline provider
 */
public static INodeProvider createProvider(Object object){
  if (object instanceof ReportDesignHandle) {
    return new ReportDesignNodeProvider();
  }
  if (object instanceof LibraryHandle) {
    return new LibraryNodeProvider();
  }
 else   if (object instanceof ReportElementModel) {
    ReportElementModel model=(ReportElementModel)object;
    DesignElementHandle handle=model.getElementHandle();
    if (handle instanceof ModuleHandle) {
switch (model.getSlotId()) {
case ReportDesignHandle.BODY_SLOT:
        return new BodyNodeProvider();
case ModuleHandle.COMPONENT_SLOT:
      return new ComponentsProvider();
case ILibraryModel.THEMES_SLOT:
{
      if (model.getElementHandle() instanceof LibraryHandle) {
        ThemesNodeProvider themesProvider=new ThemesNodeProvider();
        themesProvider.setSorter(new AlphabeticallyComparator());
        return themesProvider;
      }
      StylesNodeProvider provider=new StylesNodeProvider();
      provider.setSorter(new AlphabeticallyComparator());
      return provider;
    }
case ModuleHandle.PAGE_SLOT:
  return new MasterPagesNodeProvider();
case ModuleHandle.DATA_SOURCE_SLOT:
return new DataSourcesNodeProvider();
case ModuleHandle.PARAMETER_SLOT:
return new ParametersNodeProvider();
case ModuleHandle.DATA_SET_SLOT:
return new DataSetsNodeProvider();
}
}
 else if (handle instanceof TableHandle || handle instanceof TableGroupHandle) {
return new TableBandProvider();
}
 else if (handle instanceof ListHandle || handle instanceof ListGroupHandle) {
return new ListBandProvider();
}
 else if (handle instanceof MasterPageHandle) {
return new MasterPageBandProvider();
}
}
 else if (object instanceof DesignElementHandle) {
String elementName=((DesignElementHandle)object).getDefn().getName();
IProviderFactory factory=ExtensionPointManager.getInstance().getProviderFactory(elementName);
if (factory != null) {
return factory.createProvider(object);
}
if (object instanceof CellHandle) {
return new CellProvider();
}
 else if (object instanceof GridHandle) {
return new GridProvider();
}
 else if (object instanceof StyleHandle) {
return new StyleNodeProvider();
}
 else if (object instanceof ListHandle) {
return new ListProvider();
}
 else if (object instanceof TableHandle) {
return new TableProvider();
}
 else if (object instanceof TableGroupHandle || object instanceof ListGroupHandle) {
return new GroupProvider();
}
 else if (object instanceof RowHandle) {
return new RowProvider();
}
 else if (object instanceof DataItemHandle) {
return new DataProvider();
}
 else if (object instanceof LabelHandle) {
return new LabelProvider();
}
 else if (object instanceof MasterPageHandle) {
return new MasterPageNodeProvider();
}
 else if (object instanceof DataSourceHandle) {
return new DataSourceNodeProvider();
}
 else if (object instanceof DataSetHandle) {
return new DataSetNodeProvider();
}
 else if (object instanceof ParameterGroupHandle) {
if (object instanceof CascadingParameterGroupHandle) {
return new CascadingParameterGroupNodeProvider();
}
return new ParameterGroupNodeProvider();
}
 else if (object instanceof ParameterHandle) {
return new ParameterNodeProvider();
}
 else if (object instanceof ThemeHandle) {
return new ThemeNodeProvider();
}
}
 else if (object instanceof DataSetItemModel) {
return new DataSetColumnProvider();
}
 else if (object instanceof DataSetParameterHandle) {
return new DataSetParameterProvider();
}
 else if (object instanceof EmbeddedImageNode) {
return new EmbeddedImagesNodeProvider();
}
 else if (object instanceof EmbeddedImageHandle) {
return new EmbeddedImageNodeProvider();
}
 else if (object instanceof LibraryNode) {
return new LibrariesNodeProvider();
}
return getDefaultProvider();
}",0.999215481171548
78944,"/** 
 * Creates a new extended item.
 * @param name the optional extended item name. Can be <code>null</code>.
 * @param extensionName the required extension name
 * @return a handle to extended item, return <code>null</code> if thedefinition with the given extension name is not found
 */
public ExtendedItemHandle newExtendedItem(String name,String extensionName){
}","/** 
 * Creates a new extended item which extends from a given parent.
 * @param name the optional extended item name. Can be <code>null</code>.
 * @param extensionName the required extension name
 * @param parent a given parent element.
 * @return a handle to extended item, return <code>null</code> if thedefinition with the given extension name is not found
 * @throws ExtendsException
 */
private ExtendedItemHandle newExtendedItem(String name,String extensionName,ExtendedItemHandle parent) throws ExtendsException {
}",0.8148148148148148
78945,"/** 
 * Creates one new element based on the given element. The new element will extends the given one. The element must be extendable.
 * @param baseElement the base element.
 * @param name the optional new element name
 * @return the handle to the new element.
 * @throws ExtendsException if the the base element is in a library that is not included in this module, or if the ""extends"" relationship is illegal
 */
public DesignElementHandle newElementFrom(DesignElementHandle baseElement,String name) throws ExtendsException {
  if (baseElement == null)   return null;
  if (baseElement.getRoot().getElement() == module) {
    DesignElementHandle childElement=newElement(baseElement.getElement().getElementName(),name);
    childElement.setExtends(baseElement);
    childElement.getElement().refreshStructureFromParent(module);
    return childElement;
  }
  Module root=baseElement.getModule();
  if (root instanceof Library) {
    Library lib=module.getLibraryByLocation(root.getLocation());
    if (lib == null) {
      throw new ExtendsException(null,baseElement.getElement(),ExtendsException.DESIGN_EXCEPTION_PARENT_NOT_INCLUDE);
    }
    DesignElement base=lib.getElementByID(baseElement.getID());
    if (base == null || base.getDefn() != baseElement.getDefn()) {
      throw new ExtendsException(null,baseElement.getName(),ExtendsException.DESIGN_EXCEPTION_NOT_FOUND);
    }
    DesignElementHandle childElement=newElement(base.getElementName(),name);
    childElement.setExtends(base.getHandle(lib));
    childElement.getElement().refreshStructureFromParent(module);
    return childElement;
  }
  return null;
}","/** 
 * Creates one new element based on the given element. The new element will extends the given one. The element must be extendable.
 * @param baseElement the base element.
 * @param name the optional new element name
 * @return the handle to the new element.
 * @throws ExtendsException if the the base element is in a library that is not included in this module, or if the ""extends"" relationship is illegal
 */
public DesignElementHandle newElementFrom(DesignElementHandle baseElement,String name) throws ExtendsException {
  if (baseElement == null)   return null;
  if (baseElement.getRoot().getElement() == module) {
    DesignElementHandle childElement=null;
    if (baseElement instanceof ExtendedItemHandle) {
      String extensionName=baseElement.getStringProperty(ExtendedItem.EXTENSION_NAME_PROP);
      childElement=this.newExtendedItem(name,extensionName,(ExtendedItemHandle)baseElement);
      childElement.getElement().refreshStructureFromParent(module);
    }
 else {
      childElement=newElement(baseElement.getElement().getElementName(),name);
      childElement.setExtends(baseElement);
      childElement.getElement().refreshStructureFromParent(module);
    }
    return childElement;
  }
  Module root=baseElement.getModule();
  if (root instanceof Library) {
    Library lib=module.getLibraryByLocation(root.getLocation());
    if (lib == null) {
      throw new ExtendsException(null,baseElement.getElement(),ExtendsException.DESIGN_EXCEPTION_PARENT_NOT_INCLUDE);
    }
    DesignElement base=lib.getElementByID(baseElement.getID());
    if (base == null || base.getDefn() != baseElement.getElement().getDefn()) {
      throw new ExtendsException(null,baseElement.getName(),ExtendsException.DESIGN_EXCEPTION_NOT_FOUND);
    }
    DesignElementHandle childElement=null;
    if (baseElement instanceof ExtendedItemHandle) {
      String extensionName=baseElement.getStringProperty(ExtendedItem.EXTENSION_NAME_PROP);
      childElement=this.newExtendedItem(name,extensionName,(ExtendedItemHandle)base.getHandle(lib));
      childElement.getElement().refreshStructureFromParent(module);
    }
 else {
      childElement=newElement(base.getElementName(),name);
      childElement.setExtends(base.getHandle(lib));
      childElement.getElement().refreshStructureFromParent(module);
    }
    return childElement;
  }
  return null;
}",0.7604925860769037
78946,"private void switchToURI(){
  new Label(displayArea,SWT.NONE).setText(LABEL_LOCATION);
  locationEditor=new Text(displayArea,SWT.BORDER | SWT.SINGLE);
  locationEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  locationEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  Composite buttonArea=new Composite(displayArea,SWT.NONE);
  buttonArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,true));
  buttonArea.setLayoutData(new GridData());
  createBrowerButton(buttonArea,locationEditor,true);
  createExpressionButton(buttonArea,locationEditor);
  createTargetBar();
}","private void switchToURI(){
  new Label(displayArea,SWT.NONE).setText(LABEL_LOCATION);
  locationEditor=new Text(displayArea,SWT.BORDER | SWT.SINGLE);
  locationEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  locationEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  Composite buttonArea=new Composite(displayArea,SWT.NONE);
  buttonArea.setLayout(UIUtil.createGridLayoutWithoutMargin(2,true));
  buttonArea.setLayoutData(new GridData());
  createBrowerButton(buttonArea,locationEditor,true,false);
  createExpressionButton(buttonArea,locationEditor);
  createTargetBar();
}",0.9955156950672646
78947,"public HyperlinkBuilder(String title){
  super(title);
}","public HyperlinkBuilder(Shell parentShell){
  super(parentShell,""String_Node_Str"");
}",0.6382978723404256
78948,"private void switchToDrillthrough(){
  new Label(displayArea,SWT.NONE).setText(LABEL_REPORT);
  locationEditor=new Text(displayArea,SWT.BORDER | SWT.SINGLE);
  locationEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  locationEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      initParamterBindings();
      updateButtons();
    }
  }
);
  createBrowerButton(displayArea,locationEditor,false);
  UIUtil.createBlankLabel(displayArea);
  messageLine=new CLabel(displayArea,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  messageLine.setLayoutData(gd);
  createBindingTable();
  createBookmarkBar();
  createTargetBar();
  createFormatBar();
}","private void switchToDrillthrough(){
  new Label(displayArea,SWT.NONE).setText(LABEL_REPORT);
  locationEditor=new Text(displayArea,SWT.BORDER | SWT.SINGLE);
  locationEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  locationEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      initParamterBindings();
      updateButtons();
    }
  }
);
  createBrowerButton(displayArea,locationEditor,false,true);
  UIUtil.createBlankLabel(displayArea);
  messageLine=new CLabel(displayArea,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  messageLine.setLayoutData(gd);
  createBindingTable();
  createBookmarkBar();
  createTargetBar();
  createFormatBar();
}",0.9966510381781648
78949,"private void createBrowerButton(Composite parent,final Text text,final boolean needQuote){
  Button button=new Button(parent,SWT.PUSH);
  button.setLayoutData(new GridData());
  button.setImage(IMAGE_OPEN_FILE);
  button.setToolTipText(TOOLTIP_BROWSE_FILE);
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(UIUtil.getDefaultShell());
      dialog.setFilterExtensions(new String[]{""String_Node_Str""});
      try {
        String filename=dialog.open();
        if (filename != null) {
          if (needQuote) {
            filename=""String_Node_Str"" + filename + ""String_Node_Str"";
          }
          text.setText(filename);
        }
 else {
          text.setText(""String_Node_Str"");
        }
        updateButtons();
      }
 catch (      Exception ex) {
        ExceptionHandler.handle(ex);
      }
    }
  }
);
}","private void createBrowerButton(Composite parent,final Text text,final boolean needQuote,final boolean needFilter){
  Button button=new Button(parent,SWT.PUSH);
  button.setLayoutData(new GridData());
  button.setImage(IMAGE_OPEN_FILE);
  button.setToolTipText(TOOLTIP_BROWSE_FILE);
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      FileDialog dialog=new FileDialog(UIUtil.getDefaultShell());
      if (needFilter) {
        dialog.setFilterExtensions(new String[]{""String_Node_Str""});
      }
      try {
        String filename=dialog.open();
        if (filename != null) {
          if (needQuote) {
            filename=""String_Node_Str"" + filename + ""String_Node_Str"";
          }
          text.setText(filename);
        }
 else {
          text.setText(""String_Node_Str"");
        }
        updateButtons();
      }
 catch (      Exception ex) {
        ExceptionHandler.handle(ex);
      }
    }
  }
);
}",0.9688982604111755
78950,"public void first(){
}","public void first(){
  set.next();
}",0.7586206896551724
78951,"public void handleEvent(Event event){
  if (event.widget.equals(txtRadius)) {
    series.getDial().setRadius(Double.parseDouble(txtRadius.getText()));
  }
 else   if (event.widget.equals(iscStartAngle)) {
    series.getDial().setStartAngle(((Integer)event.data).intValue());
  }
 else   if (event.widget.equals(iscStopAngle)) {
    series.getDial().setStopAngle(((Integer)event.data).intValue());
  }
 else   if (event.widget.equals(liacNeedle)) {
    if (event.type == LineAttributesComposite.STYLE_CHANGED_EVENT) {
      series.getNeedle().getLineAttributes().setStyle((LineStyle)event.data);
    }
 else     if (event.type == LineAttributesComposite.WIDTH_CHANGED_EVENT) {
      series.getNeedle().getLineAttributes().setThickness(((Integer)event.data).intValue());
    }
  }
 else   if (event.widget.equals(cmbHeadStyle)) {
    if (event.type == HeadStyleAttributeComposite.STYLE_CHANGED_EVENT) {
      series.getNeedle().setDecorator((LineDecorator)event.data);
    }
  }
}","public void handleEvent(Event event){
  if (event.widget.equals(txtRadius)) {
    series.getDial().setRadius(Double.parseDouble(trimString(txtRadius.getText())));
  }
 else   if (event.widget.equals(iscStartAngle)) {
    series.getDial().setStartAngle(((Integer)event.data).intValue());
  }
 else   if (event.widget.equals(iscStopAngle)) {
    series.getDial().setStopAngle(((Integer)event.data).intValue());
  }
 else   if (event.widget.equals(liacNeedle)) {
    if (event.type == LineAttributesComposite.STYLE_CHANGED_EVENT) {
      series.getNeedle().getLineAttributes().setStyle((LineStyle)event.data);
    }
 else     if (event.type == LineAttributesComposite.WIDTH_CHANGED_EVENT) {
      series.getNeedle().getLineAttributes().setThickness(((Integer)event.data).intValue());
    }
  }
 else   if (event.widget.equals(cmbHeadStyle)) {
    if (event.type == HeadStyleAttributeComposite.STYLE_CHANGED_EVENT) {
      series.getNeedle().setDecorator((LineDecorator)event.data);
    }
  }
}",0.9939024390243902
78952,"public void handleEvent(Event event){
  if (event.widget.equals(lacLabel)) {
    if (this.lstMarkers.getSelection().length != 0) {
switch (event.type) {
case LabelAttributesComposite.FONT_CHANGED_EVENT:
        getSelectedMarkerLabel().getCaption().setFont((FontDefinition)((Object[])event.data)[0]);
      getSelectedMarkerLabel().getCaption().setColor((ColorDefinition)((Object[])event.data)[1]);
    break;
case LabelAttributesComposite.BACKGROUND_CHANGED_EVENT:
  getSelectedMarkerLabel().setBackground((Fill)event.data);
break;
case LabelAttributesComposite.OUTLINE_STYLE_CHANGED_EVENT:
getSelectedMarkerLabel().getOutline().setStyle((LineStyle)event.data);
break;
case LabelAttributesComposite.OUTLINE_WIDTH_CHANGED_EVENT:
getSelectedMarkerLabel().getOutline().setThickness(((Integer)event.data).intValue());
break;
case LabelAttributesComposite.OUTLINE_COLOR_CHANGED_EVENT:
getSelectedMarkerLabel().getOutline().setColor((ColorDefinition)event.data);
break;
case LabelAttributesComposite.OUTLINE_VISIBILITY_CHANGED_EVENT:
getSelectedMarkerLabel().getOutline().setVisible(((Boolean)event.data).booleanValue());
break;
}
}
}
 else if (event.widget.equals(fccRange)) {
((DialRegion)(getDialForProcessing().getDialRegions()).get(getMarkerIndex())).setFill((Fill)event.data);
}
 else if (event.widget.equals(txtStartValue)) {
int iMarkerIndex=getMarkerIndex();
((DialRegion)(getDialForProcessing().getDialRegions()).get(iMarkerIndex)).setStartValue(this.getTypedDataElement(txtStartValue.getText()));
}
 else if (event.widget.equals(txtEndValue)) {
int iMarkerIndex=getMarkerIndex();
((DialRegion)(getDialForProcessing().getDialRegions()).get(iMarkerIndex)).setEndValue(this.getTypedDataElement(txtEndValue.getText()));
}
 else if (event.widget.equals(txtInnerRadius)) {
((DialRegion)(getDialForProcessing().getDialRegions()).get(getMarkerIndex())).setInnerRadius(Double.parseDouble(txtInnerRadius.getText()));
}
 else if (event.widget.equals(txtOuterRadius)) {
((DialRegion)(getDialForProcessing().getDialRegions()).get(getMarkerIndex())).setOuterRadius(Double.parseDouble(txtOuterRadius.getText()));
}
 else if (event.widget.equals(liacMarkerRange)) {
if (event.type == LineAttributesComposite.STYLE_CHANGED_EVENT) {
((DialRegion)getDialForProcessing().getDialRegions().get(getMarkerIndex())).getOutline().setStyle((LineStyle)event.data);
}
 else if (event.type == LineAttributesComposite.WIDTH_CHANGED_EVENT) {
((DialRegion)getDialForProcessing().getDialRegions().get(getMarkerIndex())).getOutline().setThickness(((Integer)event.data).intValue());
}
 else if (event.type == LineAttributesComposite.COLOR_CHANGED_EVENT) {
((DialRegion)getDialForProcessing().getDialRegions().get(getMarkerIndex())).getOutline().setColor((ColorDefinition)event.data);
}
 else {
((DialRegion)getDialForProcessing().getDialRegions().get(getMarkerIndex())).getOutline().setVisible(((Boolean)event.data).booleanValue());
}
}
}","public void handleEvent(Event event){
  if (event.widget.equals(lacLabel)) {
    if (this.lstMarkers.getSelection().length != 0) {
switch (event.type) {
case LabelAttributesComposite.FONT_CHANGED_EVENT:
        getSelectedMarkerLabel().getCaption().setFont((FontDefinition)((Object[])event.data)[0]);
      getSelectedMarkerLabel().getCaption().setColor((ColorDefinition)((Object[])event.data)[1]);
    break;
case LabelAttributesComposite.BACKGROUND_CHANGED_EVENT:
  getSelectedMarkerLabel().setBackground((Fill)event.data);
break;
case LabelAttributesComposite.OUTLINE_STYLE_CHANGED_EVENT:
getSelectedMarkerLabel().getOutline().setStyle((LineStyle)event.data);
break;
case LabelAttributesComposite.OUTLINE_WIDTH_CHANGED_EVENT:
getSelectedMarkerLabel().getOutline().setThickness(((Integer)event.data).intValue());
break;
case LabelAttributesComposite.OUTLINE_COLOR_CHANGED_EVENT:
getSelectedMarkerLabel().getOutline().setColor((ColorDefinition)event.data);
break;
case LabelAttributesComposite.OUTLINE_VISIBILITY_CHANGED_EVENT:
getSelectedMarkerLabel().getOutline().setVisible(((Boolean)event.data).booleanValue());
break;
}
}
}
 else if (event.widget.equals(fccRange)) {
((DialRegion)(getDialForProcessing().getDialRegions()).get(getMarkerIndex())).setFill((Fill)event.data);
}
 else if (event.widget.equals(txtStartValue)) {
int iMarkerIndex=getMarkerIndex();
((DialRegion)(getDialForProcessing().getDialRegions()).get(iMarkerIndex)).setStartValue(this.getTypedDataElement(txtStartValue.getText()));
}
 else if (event.widget.equals(txtEndValue)) {
int iMarkerIndex=getMarkerIndex();
((DialRegion)(getDialForProcessing().getDialRegions()).get(iMarkerIndex)).setEndValue(this.getTypedDataElement(txtEndValue.getText()));
}
 else if (event.widget.equals(txtInnerRadius)) {
((DialRegion)(getDialForProcessing().getDialRegions()).get(getMarkerIndex())).setInnerRadius(Double.parseDouble(trimString(txtInnerRadius.getText())));
}
 else if (event.widget.equals(txtOuterRadius)) {
((DialRegion)(getDialForProcessing().getDialRegions()).get(getMarkerIndex())).setOuterRadius(Double.parseDouble(trimString(txtOuterRadius.getText())));
}
 else if (event.widget.equals(liacMarkerRange)) {
if (event.type == LineAttributesComposite.STYLE_CHANGED_EVENT) {
((DialRegion)getDialForProcessing().getDialRegions().get(getMarkerIndex())).getOutline().setStyle((LineStyle)event.data);
}
 else if (event.type == LineAttributesComposite.WIDTH_CHANGED_EVENT) {
((DialRegion)getDialForProcessing().getDialRegions().get(getMarkerIndex())).getOutline().setThickness(((Integer)event.data).intValue());
}
 else if (event.type == LineAttributesComposite.COLOR_CHANGED_EVENT) {
((DialRegion)getDialForProcessing().getDialRegions().get(getMarkerIndex())).getOutline().setColor((ColorDefinition)event.data);
}
 else {
((DialRegion)getDialForProcessing().getDialRegions().get(getMarkerIndex())).getOutline().setVisible(((Boolean)event.data).booleanValue());
}
}
}",0.995890410958904
78953,"public String execute(TextTemplate template,HashMap values){
  this.buffer=new StringBuffer();
  this.values=values;
  ArrayList nodes=template.getNodes();
  Iterator iter=nodes.iterator();
  while (iter.hasNext()) {
    TextTemplate.Node node=(TextTemplate.Node)iter.next();
    node.accept(this,null);
  }
  return buffer.toString();
}","public String execute(TextTemplate template,HashMap values){
  this.buffer=new StringBuffer();
  this.values=values;
  if (template == null) {
    return ""String_Node_Str"";
  }
  ArrayList nodes=template.getNodes();
  Iterator iter=nodes.iterator();
  while (iter.hasNext()) {
    TextTemplate.Node node=(TextTemplate.Node)iter.next();
    node.accept(this,null);
  }
  return buffer.toString();
}",0.9182561307901907
78954,"/** 
 * Gets all available themes .
 * @return A String array contains all available themes.
 */
public static String[] getThemes(){
  ArrayList list=new ArrayList();
  list.add(CHOICE_NONE);
  ModuleHandle handle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  Iterator iterator=handle.getAllThemes().iterator();
  if (iterator != null) {
    while (iterator.hasNext()) {
      ReportElementHandle elementHandle=(ReportElementHandle)iterator.next();
      list.add(elementHandle.getQualifiedName());
    }
  }
  return (String[])list.toArray(new String[0]);
}","/** 
 * Gets all available themes .
 * @return A String array contains all available themes.
 */
public static String[] getThemes(){
  ArrayList list=new ArrayList();
  list.add(CHOICE_NONE);
  ModuleHandle handle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  Iterator iterator=handle.getAllThemes().iterator();
  if (iterator != null) {
    while (iterator.hasNext()) {
      ReportElementHandle elementHandle=(ReportElementHandle)iterator.next();
      list.add(elementHandle.getName());
    }
  }
  return (String[])list.toArray(new String[0]);
}",0.9920983318700616
78955,"/** 
 * Indicates whether some other object is ""equal to"" this one.
 * @param obj the reference object with which to compare.
 */
public boolean equals(Object obj){
  if (obj == null || !(obj instanceof StringValue)) {
    return false;
  }
  StringValue v=(StringValue)obj;
  if (unitType != v.unitType) {
    return false;
  }
  return value.equals(v.value);
}","/** 
 * Indicates whether some other object is ""equal to"" this one.
 * @param obj the reference object with which to compare.
 */
public boolean equals(Object obj){
  if (obj == null || !(obj instanceof StringValue)) {
    return false;
  }
  StringValue v=(StringValue)obj;
  if (unitType != v.unitType) {
    return false;
  }
  if (value != null) {
    return value.equals(v.value);
  }
 else {
    if (v.value == null) {
      return true;
    }
  }
  return false;
}",0.8667466986794717
78956,"public void widgetSelected(SelectionEvent e){
  if (e.getSource().equals(btnUseReportData)) {
    if (!btnUseReportData.getSelection()) {
      return;
    }
    try {
      switchDataSet(null);
    }
 catch (    ChartException e1) {
      container.displayException(e1);
    }
    cmbDataSet.setEnabled(false);
    btnNewData.setEnabled(false);
    btnFilters.setEnabled(hasDataSet());
    btnParameters.setEnabled(hasDataSet());
  }
 else   if (e.getSource().equals(btnUseDataSet)) {
    if (!btnUseDataSet.getSelection()) {
      return;
    }
    if (cmbDataSet.getText().length() == 0) {
      cmbDataSet.setItems(getWizardContext().getDataServiceProvider().getAllDataSets());
      cmbDataSet.select(0);
    }
    if (cmbDataSet.getText().length() != 0) {
      try {
        switchDataSet(cmbDataSet.getText());
      }
 catch (      ChartException e1) {
        container.displayException(e1);
      }
    }
    cmbDataSet.setEnabled(true);
    btnNewData.setEnabled(true);
    btnFilters.setEnabled(true);
    btnParameters.setEnabled(true);
  }
 else   if (e.getSource().equals(cmbDataSet)) {
    try {
      ColorPalette.getInstance().restore();
      switchDataSet(cmbDataSet.getText());
    }
 catch (    ChartException e1) {
      container.displayException(e1);
    }
  }
 else   if (e.getSource().equals(btnNewData)) {
    String[] sAllDS=getWizardContext().getDataServiceProvider().getAllDataSets();
    String sCurrentDS=""String_Node_Str"";
    if (sAllDS.length > 0) {
      sCurrentDS=getWizardContext().getDataServiceProvider().getBoundDataSet();
    }
    getWizardContext().getDataServiceProvider().invoke(IDataServiceProvider.COMMAND_NEW_DATASET);
    sAllDS=((ChartWizardContext)context).getDataServiceProvider().getAllDataSets();
    cmbDataSet.setItems(sAllDS);
    if (sCurrentDS.length() > 0) {
      cmbDataSet.setText(sCurrentDS);
    }
 else     if (sAllDS.length > 0) {
      cmbDataSet.setText(sAllDS[0]);
      try {
        switchDataSet(sAllDS[0]);
      }
 catch (      ChartException e1) {
        container.displayException(e1);
      }
    }
  }
 else   if (e.getSource().equals(btnFilters)) {
    if (getWizardContext().getDataServiceProvider().invoke(IDataServiceProvider.COMMAND_EDIT_FILTER) == Window.OK) {
      refreshTablePreview();
      doLivePreview();
    }
  }
 else   if (e.getSource().equals(btnParameters)) {
    if (getWizardContext().getDataServiceProvider().invoke(IDataServiceProvider.COMMAND_EDIT_PARAMETER) == Window.OK) {
      refreshTablePreview();
      doLivePreview();
    }
  }
 else   if (e.getSource() instanceof MenuItem) {
    MenuItem item=(MenuItem)e.getSource();
    IAction action=(IAction)item.getData();
    action.setChecked(!action.isChecked());
    action.run();
  }
}","public void widgetSelected(SelectionEvent e){
  if (e.getSource().equals(btnUseReportData)) {
    if (!btnUseReportData.getSelection()) {
      return;
    }
    try {
      switchDataSet(null);
    }
 catch (    ChartException e1) {
      container.displayException(e1);
    }
    cmbDataSet.setEnabled(false);
    btnNewData.setEnabled(false);
    btnFilters.setEnabled(hasDataSet());
    btnParameters.setEnabled(hasDataSet());
  }
 else   if (e.getSource().equals(btnUseDataSet)) {
    if (!btnUseDataSet.getSelection()) {
      return;
    }
    if (cmbDataSet.getText().length() == 0) {
      cmbDataSet.setItems(getWizardContext().getDataServiceProvider().getAllDataSets());
      cmbDataSet.select(0);
    }
    if (cmbDataSet.getText().length() != 0) {
      try {
        switchDataSet(cmbDataSet.getText());
      }
 catch (      ChartException e1) {
        container.displayException(e1);
      }
    }
    cmbDataSet.setEnabled(true);
    btnNewData.setEnabled(true);
    btnFilters.setEnabled(hasDataSet());
    btnParameters.setEnabled(hasDataSet());
  }
 else   if (e.getSource().equals(cmbDataSet)) {
    try {
      ColorPalette.getInstance().restore();
      switchDataSet(cmbDataSet.getText());
    }
 catch (    ChartException e1) {
      container.displayException(e1);
    }
  }
 else   if (e.getSource().equals(btnNewData)) {
    String[] sAllDS=getWizardContext().getDataServiceProvider().getAllDataSets();
    String sCurrentDS=""String_Node_Str"";
    if (sAllDS.length > 0) {
      sCurrentDS=getWizardContext().getDataServiceProvider().getBoundDataSet();
    }
    getWizardContext().getDataServiceProvider().invoke(IDataServiceProvider.COMMAND_NEW_DATASET);
    sAllDS=((ChartWizardContext)context).getDataServiceProvider().getAllDataSets();
    cmbDataSet.setItems(sAllDS);
    if (sCurrentDS.length() > 0) {
      cmbDataSet.setText(sCurrentDS);
    }
 else     if (sAllDS.length > 0) {
      cmbDataSet.setText(sAllDS[0]);
      try {
        switchDataSet(sAllDS[0]);
      }
 catch (      ChartException e1) {
        container.displayException(e1);
      }
    }
  }
 else   if (e.getSource().equals(btnFilters)) {
    if (getWizardContext().getDataServiceProvider().invoke(IDataServiceProvider.COMMAND_EDIT_FILTER) == Window.OK) {
      refreshTablePreview();
      doLivePreview();
    }
  }
 else   if (e.getSource().equals(btnParameters)) {
    if (getWizardContext().getDataServiceProvider().invoke(IDataServiceProvider.COMMAND_EDIT_PARAMETER) == Window.OK) {
      refreshTablePreview();
      doLivePreview();
    }
  }
 else   if (e.getSource() instanceof MenuItem) {
    MenuItem item=(MenuItem)e.getSource();
    IAction action=(IAction)item.getData();
    action.setChecked(!action.isChecked());
    action.run();
  }
}",0.9941965904969168
78957,"/** 
 * Converts the actual float value to the given unit type.
 */
public static float convertFloatValue(short unitType,FloatValue value){
switch (unitType) {
case CSSPrimitiveValue.CSS_NUMBER:
case CSSPrimitiveValue.CSS_PERCENTAGE:
case CSSPrimitiveValue.CSS_EMS:
case CSSPrimitiveValue.CSS_EXS:
case CSSPrimitiveValue.CSS_DIMENSION:
case CSSPrimitiveValue.CSS_PX:
    if (value.getPrimitiveType() == unitType) {
      return value.getFloatValue(unitType);
    }
  break;
case CSSPrimitiveValue.CSS_CM:
return toCentimeters(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_MM:
return toMillimeters(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_IN:
return toInches(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_PT:
return toPoints(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_PC:
return toPicas(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_DEG:
return toDegrees(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_RAD:
return toRadians(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_GRAD:
return toGradians(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_MS:
return toMilliseconds(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_S:
return toSeconds(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_HZ:
return toHertz(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_KHZ:
return tokHertz(unitType,value.getFloatValue());
}
throw new DOMException(DOMException.INVALID_ACCESS_ERR,""String_Node_Str"");
}","/** 
 * Converts the actual float value to the given unit type.
 */
public static float convertFloatValue(short unitType,FloatValue value){
switch (unitType) {
case CSSPrimitiveValue.CSS_NUMBER:
case CSSPrimitiveValue.CSS_PERCENTAGE:
case CSSPrimitiveValue.CSS_EMS:
case CSSPrimitiveValue.CSS_EXS:
case CSSPrimitiveValue.CSS_DIMENSION:
case CSSPrimitiveValue.CSS_PX:
    if (value.getPrimitiveType() == unitType) {
      return value.getFloatValue();
    }
  break;
case CSSPrimitiveValue.CSS_CM:
return toCentimeters(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_MM:
return toMillimeters(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_IN:
return toInches(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_PT:
return toPoints(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_PC:
return toPicas(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_DEG:
return toDegrees(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_RAD:
return toRadians(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_GRAD:
return toGradians(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_MS:
return toMilliseconds(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_S:
return toSeconds(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_HZ:
return toHertz(unitType,value.getFloatValue());
case CSSPrimitiveValue.CSS_KHZ:
return tokHertz(unitType,value.getFloatValue());
}
throw new DOMException(DOMException.INVALID_ACCESS_ERR,""String_Node_Str"");
}",0.9973873285434356
78958,"/** 
 * Returns the property value which is related to container. It may be from the selector style which represents the slot or combination of container and slot.
 * @param module the module
 * @param prop the definition of property
 * @return the property value, or null if no value is set.
 */
protected Object getPropertyRelatedToContainer(Module module,ElementPropertyDefn prop){
  if (getContainer() == null)   return null;
  String selector=getContainer().getSelector(getContainerSlot());
  return getPropertyFromSelector(module,prop,selector);
}","/** 
 * Returns the property value which is related to container.
 * @param module the module
 * @param prop the definition of property
 * @return the property value, or null if no value is set.
 */
protected Object getPropertyRelatedToContainer(Module module,ElementPropertyDefn prop){
  return null;
}",0.7079439252336449
78959,"protected void accessHeader(ListingDesign list,IContentEmitter emitter){
  ITableContent tableContent=(ITableContent)context.getContent();
  TableBandDesign bandDesign=((TableItemDesign)list).getHeader();
  if (bandDesign != null) {
    ITableBandContent header=report.createTableHeader();
    context.pushContent(header);
    initializeContent(tableContent,bandDesign,header);
    if (emitter != null) {
      emitter.startTableHeader(header);
    }
    accessTableBand(bandDesign,emitter);
    if (emitter != null) {
      emitter.endTableHeader(header);
    }
    context.popContent();
  }
  ITableBandContent body=report.createTableBody();
  initializeContent(tableContent,null,body);
  context.pushContent(body);
  if (emitter != null) {
    emitter.startTableBody(body);
  }
}","protected void accessHeader(ListingDesign list,IContentEmitter emitter){
  ITableContent tableContent=(ITableContent)context.getContent();
  TableBandDesign bandDesign=((TableItemDesign)list).getHeader();
  if (bandDesign != null) {
    ITableBandContent header=report.createTableHeader();
    context.pushContent(header);
    initializeContent(tableContent,bandDesign,header);
    if (emitter != null) {
      emitter.startTableHeader(header);
    }
    accessTableBand(bandDesign,emitter,false);
    if (emitter != null) {
      emitter.endTableHeader(header);
    }
    context.popContent();
  }
  ITableBandContent body=report.createTableBody();
  initializeContent(tableContent,null,body);
  context.pushContent(body);
  if (emitter != null) {
    emitter.startTableBody(body);
  }
}",0.9961783439490446
78960,"protected void accessTableBand(TableBandDesign band,IContentEmitter emitter){
  if (band != null) {
    for (int i=0; i < band.getRowCount(); i++) {
      accessRow(band.getRow(i),emitter);
    }
  }
}","protected void accessTableBand(TableBandDesign band,IContentEmitter emitter,boolean runScript){
  if (band != null) {
    for (int i=0; i < band.getRowCount(); i++) {
      accessRow(band.getRow(i),emitter,runScript);
    }
  }
}",0.9348837209302324
78961,"protected void accessDetail(ListingDesign list,IContentEmitter emitter){
  accessTableBand(((TableItemDesign)list).getDetail(),emitter);
}","protected void accessDetail(ListingDesign list,IContentEmitter emitter){
  accessTableBand(((TableItemDesign)list).getDetail(),emitter,true);
}",0.98220640569395
78962,"protected void accessFooter(ListingDesign list,IContentEmitter emitter){
  if (layoutEmitter != null) {
    layoutEmitter.flush();
    outputEmitter=layoutEmitter.emitter;
    emitter=outputEmitter;
    layoutEmitter=null;
  }
  ITableBandContent body=(ITableBandContent)context.getContent();
  if (emitter != null) {
    emitter.endTableBody(body);
  }
  context.popContent();
  TableBandDesign bandDesign=((TableItemDesign)list).getFooter();
  if (bandDesign != null) {
    ITableBandContent footer=report.createTableFooter();
    IContent parent=context.getContent();
    context.pushContent(footer);
    initializeContent(parent,bandDesign,footer);
    if (emitter != null) {
      emitter.startTableFooter(footer);
    }
    accessTableBand(bandDesign,emitter);
    if (emitter != null) {
      emitter.endTableFooter(footer);
    }
    context.popContent();
  }
}","protected void accessFooter(ListingDesign list,IContentEmitter emitter){
  if (layoutEmitter != null) {
    layoutEmitter.flush();
    outputEmitter=layoutEmitter.emitter;
    emitter=outputEmitter;
    layoutEmitter=null;
  }
  ITableBandContent body=(ITableBandContent)context.getContent();
  if (emitter != null) {
    emitter.endTableBody(body);
  }
  context.popContent();
  TableBandDesign bandDesign=((TableItemDesign)list).getFooter();
  if (bandDesign != null) {
    ITableBandContent footer=report.createTableFooter();
    IContent parent=context.getContent();
    context.pushContent(footer);
    initializeContent(parent,bandDesign,footer);
    if (emitter != null) {
      emitter.startTableFooter(footer);
    }
    accessTableBand(bandDesign,emitter,false);
    if (emitter != null) {
      emitter.endTableFooter(footer);
    }
    context.popContent();
  }
}",0.9965596330275228
78963,"/** 
 * output the row. row is output as: row start, cells*, row end.
 * @param rowIndex the index in the rows
 * @param row row design
 * @param emitter output emitter
 */
protected void accessRow(RowDesign row,IContentEmitter emitter){
  if (rowClosed) {
    IRowContent rowContent=report.createRowContent();
    IContent parent=context.getContent();
    context.pushContent(rowContent);
    initializeContent(parent,row,rowContent);
    processStyle(row,rowContent);
    processVisibility(row,rowContent);
    processBookmark(row,rowContent);
    processAction(row,rowContent);
    if (emitter != null) {
      emitter.startRow(rowContent);
    }
    rowClosed=false;
  }
  for (int j=0; j < row.getCellCount(); j++) {
    CellDesign cell=row.getCell(j);
    if (cell != null) {
      ICellContent cellContent=report.createCellContent();
      IContent parent=context.getContent();
      context.pushContent(cellContent);
      initializeContent(parent,cell,cellContent);
      cellContent.setColumn(cell.getColumn());
      cellContent.setColSpan(cell.getColSpan());
      cellContent.setRowSpan(cell.getRowSpan());
      processStyle(cell,cellContent);
      processVisibility(cell,cellContent);
      processBookmark(cell,cellContent);
      processAction(cell,cellContent);
      if (emitter != null) {
        emitter.startCell(cellContent);
      }
      for (int m=0; m < cell.getContentCount(); m++) {
        ReportItemDesign item=cell.getContent(m);
        if (item != null) {
          if (layoutEmitter != null) {
            item.accept(this.visitor,layoutEmitter.getCellEmitter());
          }
 else {
            item.accept(this.visitor,emitter);
          }
        }
      }
      if (emitter != null) {
        emitter.endCell(cellContent);
      }
      context.popContent();
    }
  }
  boolean closeRow=true;
  if (closeRow) {
    emitter.endRow((IRowContent)context.getContent());
    context.popContent();
    rowClosed=true;
  }
}","/** 
 * output the row. row is output as: row start, cells*, row end.
 * @param rowIndex the index in the rows
 * @param row row design
 * @param emitter output emitter
 */
protected void accessRow(RowDesign row,IContentEmitter emitter,boolean runScript){
  if (rowClosed) {
    IRowContent rowContent=report.createRowContent();
    assert(rowContent instanceof RowContent);
    IContent parent=context.getContent();
    context.pushContent(rowContent);
    initializeContent(parent,row,rowContent);
    processStyle(row,rowContent);
    processVisibility(row,rowContent);
    processBookmark(row,rowContent);
    processAction(row,rowContent);
    if (context.isInFactory() && runScript) {
      DetailRowScriptExecutor.handleOnCreate((RowContent)rowContent,null,context);
    }
    if (emitter != null) {
      emitter.startRow(rowContent);
    }
    rowClosed=false;
  }
  for (int j=0; j < row.getCellCount(); j++) {
    CellDesign cell=row.getCell(j);
    if (cell != null) {
      ICellContent cellContent=report.createCellContent();
      assert(cellContent instanceof CellContent);
      IContent parent=context.getContent();
      context.pushContent(cellContent);
      initializeContent(parent,cell,cellContent);
      cellContent.setColumn(cell.getColumn());
      cellContent.setColSpan(cell.getColSpan());
      cellContent.setRowSpan(cell.getRowSpan());
      processStyle(cell,cellContent);
      processVisibility(cell,cellContent);
      processBookmark(cell,cellContent);
      processAction(cell,cellContent);
      if (context.isInFactory()) {
        CellScriptExecutor.handleOnCreate((CellContent)cellContent,null,context);
      }
      if (emitter != null) {
        emitter.startCell(cellContent);
      }
      for (int m=0; m < cell.getContentCount(); m++) {
        ReportItemDesign item=cell.getContent(m);
        if (item != null) {
          if (layoutEmitter != null) {
            item.accept(this.visitor,layoutEmitter.getCellEmitter());
          }
 else {
            item.accept(this.visitor,emitter);
          }
        }
      }
      if (emitter != null) {
        emitter.endCell(cellContent);
      }
      context.popContent();
    }
  }
  boolean closeRow=true;
  if (closeRow) {
    emitter.endRow((IRowContent)context.getContent());
    context.popContent();
    rowClosed=true;
  }
}",0.912861136999068
78964,"protected void accessGroupHeader(ListingDesign list,int index,IContentEmitter emitter){
  groupIndex=index;
  TableGroupDesign group=((TableItemDesign)list).getGroup(index);
  if (group != null) {
    TableBandDesign band=group.getHeader();
    if (layoutEmitter == null && tableInfo.hasDropCells(index)) {
      layoutEmitter=new TableLayoutEmitter((TableItemDesign)list,emitter);
      outputEmitter=layoutEmitter;
    }
    accessTableBand(band,outputEmitter);
  }
}","protected void accessGroupHeader(ListingDesign list,int index,IContentEmitter emitter){
  groupIndex=index;
  TableGroupDesign group=((TableItemDesign)list).getGroup(index);
  if (group != null) {
    TableBandDesign band=group.getHeader();
    if (layoutEmitter == null && tableInfo.hasDropCells(index)) {
      layoutEmitter=new TableLayoutEmitter((TableItemDesign)list,emitter);
      outputEmitter=layoutEmitter;
    }
    accessTableBand(band,outputEmitter,false);
  }
}",0.9936440677966102
78965,"public void run() throws EngineException {
  ReportDesignHandle designHandle=(ReportDesignHandle)runnable.getDesignHandle();
  ReportDesignHandle copiedDesignHandle=designHandle;
  if (!validateParameters()) {
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  EngineEmitterServices services=new EngineEmitterServices(this);
  services.setRenderOption(renderOption);
  EngineConfig config=engine.getConfig();
  if (config != null)   services.setEmitterConfig(engine.getConfig().getEmitterConfigs());
  services.setRenderContext(context);
  services.setReportRunnable(runnable);
  usingParameterValues();
  ReportContextImpl reportContext=new ReportContextImpl(executionContext.getParams(),config.getConfigMap(),executionContext.getAppContext());
  executionContext.setReportContext(reportContext);
  ScriptedDesignVisitor visitor=new ScriptedDesignVisitor(copiedDesignHandle,executionContext);
  visitor.apply(copiedDesignHandle.getRoot());
  executionContext.getConfigs().putAll(runnable.getTestConfig());
  executionContext.getConfigs().putAll(System.getProperties());
  executionContext.setRenderOption(renderOption);
  String format=renderOption.getOutputFormat();
  if (format == null || format.length() == 0) {
    renderOption.setOutputFormat(""String_Node_Str"");
    format=""String_Node_Str"";
  }
 else   if (renderOption != null && format.equalsIgnoreCase(""String_Node_Str"") && ((FORenderOption)renderOption).getTailoredForFOP()) {
    format=""String_Node_Str"";
  }
  if (!ExtensionManager.getInstance().getEmitterExtensions().containsKey(format)) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new EngineException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  IContentEmitter emitter=ExtensionManager.getInstance().createEmitter(format);
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION);
  }
  ReportExecutor executor=new ReportExecutor(executionContext);
  emitter=new LocalizedEmitter(executionContext,emitter);
  emitter=new HtmlPaginateEmitter(executor,emitter);
  emitter.initialize(services);
  try {
    Report report=new ReportParser().parse(((ReportRunnable)runnable).getReport());
    executor.execute(report,emitter);
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
}","public void run() throws EngineException {
  ReportDesignHandle designHandle=(ReportDesignHandle)runnable.getDesignHandle();
  ReportDesignHandle copiedDesignHandle=designHandle;
  if (!validateParameters()) {
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  EngineEmitterServices services=new EngineEmitterServices(this);
  services.setRenderOption(renderOption);
  EngineConfig config=engine.getConfig();
  if (config != null)   services.setEmitterConfig(engine.getConfig().getEmitterConfigs());
  services.setRenderContext(context);
  services.setReportRunnable(runnable);
  usingParameterValues();
  ReportContextImpl reportContext=new ReportContextImpl(executionContext.getParams(),config.getConfigMap(),executionContext.getAppContext());
  executionContext.setReportContext(reportContext);
  ScriptedDesignVisitor visitor=new ScriptedDesignVisitor(copiedDesignHandle,executionContext);
  visitor.apply(copiedDesignHandle.getRoot());
  executionContext.getConfigs().putAll(runnable.getTestConfig());
  executionContext.getConfigs().putAll(System.getProperties());
  executionContext.setRenderOption(renderOption);
  String format=renderOption.getOutputFormat();
  if (format == null || format.length() == 0) {
    renderOption.setOutputFormat(""String_Node_Str"");
    format=""String_Node_Str"";
  }
 else   if (renderOption != null && format.equalsIgnoreCase(""String_Node_Str"") && ((FORenderOption)renderOption).getTailoredForFOP()) {
    format=""String_Node_Str"";
  }
  if (!ExtensionManager.getInstance().getEmitterExtensions().containsKey(format)) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new EngineException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  IContentEmitter emitter=ExtensionManager.getInstance().createEmitter(format);
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION);
  }
  ReportExecutor executor=new ReportExecutor(executionContext);
  services.setExecutor(executor);
  emitter=new LocalizedEmitter(executionContext,emitter);
  emitter=new HtmlPaginateEmitter(executor,emitter);
  emitter.initialize(services);
  try {
    Report report=new ReportParser().parse(((ReportRunnable)runnable).getReport());
    executor.execute(report,emitter);
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
}",0.993304450571091
78966,"public float getBolderFontWeight(float f){
  return 0;
}","/** 
 * Returns a bolder font-weight.
 */
public float getBolderFontWeight(float f){
  int weight=((int)((f + 50) / 100)) * 100;
switch (weight) {
case 100:
    return 600;
case 200:
  return 600;
case 300:
return 600;
case 400:
return 600;
case 500:
return 600;
case 600:
return 700;
case 700:
return 800;
case 800:
return 900;
case 900:
return 900;
default :
throw new IllegalArgumentException(""String_Node_Str"" + f);
}
}",0.2004175365344467
78967,"public CSSValue getDefaultFontFamily(){
  return FontFamilyManager.DEFAULT_VALUE;
}","/** 
 * Returns the default font family.
 */
public CSSValue getDefaultFontFamily(){
  return FontFamilyManager.DEFAULT_VALUE;
}",0.7867298578199052
78968,"public float getLighterFontWeight(float f){
  return 0;
}","/** 
 * Returns a lighter font-weight.
 */
public float getLighterFontWeight(float f){
  int weight=((int)((f + 50) / 100)) * 100;
switch (weight) {
case 100:
    return 100;
case 200:
  return 100;
case 300:
return 200;
case 400:
return 300;
case 500:
return 400;
case 600:
return 400;
case 700:
return 400;
case 800:
return 400;
case 900:
return 400;
default :
throw new IllegalArgumentException(""String_Node_Str"" + f);
}
}",0.2033195020746888
78969,"public float getPixelUnitToMillimeter(){
  return 0;
}","/** 
 * Returns the size of a px CSS unit in millimeters.
 */
public float getPixelUnitToMillimeter(){
  return 0.26458333333333333333333333333333f;
}",0.5294117647058824
78970,"public float getMediumFontSize(){
  return 0;
}","/** 
 * Returns the  medium font size. 
 */
public float getMediumFontSize(){
  return 9f * 1000.0f;
}",0.6308724832214765
78971,"public void dragOver(DropTargetEvent event){
  super.dragOver(event);
  event.detail=DND.DROP_NONE;
}","public void dragOver(DropTargetEvent event){
  super.dragOver(event);
  if (getTargetEditPart() == null || getTargetEditPart().getModel() instanceof LibraryHandle) {
    event.detail=DND.DROP_NONE;
  }
}",0.6644736842105263
78972,"protected boolean handleMove(){
  if (isCreating || SessionHandleAdapter.getInstance().getReportDesignHandle() instanceof LibraryHandle) {
    return true;
  }
  boolean validateTrue=false;
  updateTargetUnderMouse();
  if (getTargetEditPart() != null) {
    validateTrue=handleValidatePalette(getFactory().getObjectType(),getTargetEditPart());
  }
  if (validateTrue) {
    updateTargetRequest();
    setCurrentCommand(getCommand());
    showTargetFeedback();
  }
 else {
    setCurrentCommand(null);
  }
  return validateTrue;
}","protected boolean handleMove(){
  boolean validateTrue=false;
  updateTargetUnderMouse();
  if (isCreating || getTargetEditPart().getModel() instanceof LibraryHandle) {
    return true;
  }
  if (getTargetEditPart() != null) {
    validateTrue=handleValidatePalette(getFactory().getObjectType(),getTargetEditPart());
  }
  if (validateTrue) {
    updateTargetRequest();
    setCurrentCommand(getCommand());
    showTargetFeedback();
  }
 else {
    setCurrentCommand(null);
  }
  return validateTrue;
}",0.813953488372093
78973,"/** 
 * Returns the object can be deleted. If the parent can be deleted, the children will be skippedl
 * @param source single or multiple objects
 */
protected boolean canDrop(Object source){
  if (source == null) {
    return false;
  }
  if (source instanceof StructuredSelection) {
    return canDrop(((StructuredSelection)source).toArray());
  }
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    if (array.length == 0) {
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (DNDUtil.checkContainerExists(array[i],array))       continue;
      if (canDrop(array[i]))       return true;
    }
    return false;
  }
  source=DNDUtil.unwrapToModel(source);
  if (source instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)source;
    DesignElementHandle handle=slot.getElementHandle();
    return slot.getContents().size() > 0 && (handle instanceof ListHandle || handle instanceof ListGroupHandle);
  }
  if (source instanceof EmbeddedImageHandle) {
    return true;
  }
  if (source instanceof CellHandle) {
    return ((CellHandle)source).getContent().getContents().size() > 0;
  }
  return source instanceof ReportElementHandle && !(source instanceof MasterPageHandle);
}","/** 
 * Returns the object can be deleted. If the parent can be deleted, the children will be skippedl
 * @param source single or multiple objects
 */
protected boolean canDrop(Object source){
  if (source == null) {
    return false;
  }
  if (source instanceof StructuredSelection) {
    return canDrop(((StructuredSelection)source).toArray());
  }
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    if (array.length == 0) {
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (DNDUtil.checkContainerExists(array[i],array))       continue;
      if (canDrop(array[i]))       return true;
    }
    return false;
  }
  source=DNDUtil.unwrapToModel(source);
  if (source instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)source;
    DesignElementHandle handle=slot.getElementHandle();
    return slot.getContents().size() > 0 && (handle instanceof ListHandle || handle instanceof ListGroupHandle);
  }
  if (source instanceof EmbeddedImageHandle) {
    return true;
  }
  if (source instanceof CellHandle) {
    return ((CellHandle)source).getContent().getContents().size() > 0;
  }
  if (source instanceof MasterPageHandle) {
    return false;
  }
 else   if (source instanceof ReportElementHandle) {
    if (((ReportElementHandle)source).getRoot() instanceof LibraryHandle && SessionHandleAdapter.getInstance().getReportDesignHandle() instanceof ReportDesignHandle) {
      return false;
    }
    return true;
  }
 else   return false;
}",0.8700109849871842
78974,"/** 
 * Gets the name of this element. The returned element name will be the same as <CODE>getName()</CODE>, plus the namespace of the module that the elment is contained, if any. If the element is existed in the current module,this method and <CODE>getName()</CODE> will return identical results.
 * @return the qualified name of thie element.
 */
public String getQualifiedName(){
  if (getElement().getName() == null)   return null;
  if (module instanceof Library) {
    String namespace=((Library)module).getNamespace();
    return StringUtil.buildQualifiedReference(namespace,getElement().getName());
  }
  return getElement().getName();
}","/** 
 * Gets the name of this element. The returned element name will be the same as <CODE>getName()</CODE>, plus the namespace of the module that the elment is contained, if any. If the element is existed in the current module,this method and <CODE>getName()</CODE> will return identical results.
 * @return the qualified name of thie element.
 */
public String getQualifiedName(){
  if (getElement().getName() == null)   return null;
  Module rootElement=(Module)getRoot().getElement();
  if (rootElement instanceof Library) {
    String namespace=((Library)rootElement).getNamespace();
    return StringUtil.buildQualifiedReference(namespace,getElement().getName());
  }
  return getElement().getName();
}",0.9297856614929786
78975,"/** 
 * Checks whether this element is based on a template parameter definition or not. Call this method before calling method  {@link #revertToTemplate(String) } to assure that this element can bereverted to a template element. If this method returns false, method <code>revertToTemplate(String)</code> must fail too.
 * @return true if this element is based on a template parameter definition,otherwise false
 */
public boolean isTemplateParameterValue(){
  return getElement().getTemplateParameterElement(getModule()) != null;
}","/** 
 * Checks whether this element is based on a template parameter definition or not. Call this method before calling method  {@link #revertToTemplate(String) }to assure that this element can be reverted to a template element. If this method returns false, method <code>revertToTemplate(String)</code> must fail too.
 * @return true if this element is based on a template parameter definition,otherwise false
 */
public boolean isTemplateParameterValue(){
  return getElement().getTemplateParameterElement(getModule()) != null;
}",0.9981167608286252
78976,"/** 
 * Creates one new element based on the given element. The new element will extends the given one. The element must be extendable.
 * @param baseElement the base element.
 * @param name the optional new element name
 * @return the handle to the new element.
 * @throws ExtendsException if the the base element is in a library that is not included in this module, or if the ""extends"" relationship is illegal
 */
public DesignElementHandle newElementFrom(DesignElementHandle baseElement,String name) throws ExtendsException {
  if (baseElement == null)   return null;
  if (baseElement.getModule() == this.module) {
    DesignElementHandle childElement=newElement(baseElement.getElement().getElementName(),name);
    childElement.setExtends(baseElement);
    childElement.getElement().refreshStructureFromParent(module);
    return childElement;
  }
  Module root=baseElement.getModule();
  if (root instanceof Library) {
    Library lib=module.getLibraryByLocation(root.getLocation());
    if (lib == null) {
      throw new ExtendsException(null,baseElement.getElement(),ExtendsException.DESIGN_EXCEPTION_PARENT_NOT_INCLUDE);
    }
    DesignElement base=lib.getElementByID(baseElement.getID());
    if (base == null || base.getDefn() != baseElement.getDefn()) {
      throw new ExtendsException(null,baseElement.getName(),ExtendsException.DESIGN_EXCEPTION_NOT_FOUND);
    }
    DesignElementHandle childElement=newElement(base.getElementName(),name);
    childElement.setExtends(base.getHandle(lib));
    childElement.getElement().refreshStructureFromParent(module);
    return childElement;
  }
  return null;
}","/** 
 * Creates one new element based on the given element. The new element will extends the given one. The element must be extendable.
 * @param baseElement the base element.
 * @param name the optional new element name
 * @return the handle to the new element.
 * @throws ExtendsException if the the base element is in a library that is not included in this module, or if the ""extends"" relationship is illegal
 */
public DesignElementHandle newElementFrom(DesignElementHandle baseElement,String name) throws ExtendsException {
  if (baseElement == null)   return null;
  if (baseElement.getRoot().getElement() == module) {
    DesignElementHandle childElement=newElement(baseElement.getElement().getElementName(),name);
    childElement.setExtends(baseElement);
    childElement.getElement().refreshStructureFromParent(module);
    return childElement;
  }
  Module root=baseElement.getModule();
  if (root instanceof Library) {
    Library lib=module.getLibraryByLocation(root.getLocation());
    if (lib == null) {
      throw new ExtendsException(null,baseElement.getElement(),ExtendsException.DESIGN_EXCEPTION_PARENT_NOT_INCLUDE);
    }
    DesignElement base=lib.getElementByID(baseElement.getID());
    if (base == null || base.getDefn() != baseElement.getDefn()) {
      throw new ExtendsException(null,baseElement.getName(),ExtendsException.DESIGN_EXCEPTION_NOT_FOUND);
    }
    DesignElementHandle childElement=newElement(base.getElementName(),name);
    childElement.setExtends(base.getHandle(lib));
    childElement.getElement().refreshStructureFromParent(module);
    return childElement;
  }
  return null;
}",0.9913633559531152
78977,"/** 
 * execute the data item. <li> create the data content object <li> push it to the stack <li> open the data set, seek to the first record <li> intialize the content object <li> process the style, visiblitly, action and bookmark <li> evaluate the expression, and map it to a predefined value. <li> call the onCreate if necessary <li> pass it to emitter <li> close the data set if any <li> pop the stack.
 * @see org.eclipse.birt.report.engine.excutor.ReportItemExecutor#execute()
 */
public void execute(ReportItemDesign item,IContentEmitter emitter){
  DataItemDesign dataItem=(DataItemDesign)item;
  IDataContent dataObj=report.createDataContent();
  assert(dataObj instanceof DataContent);
  IContent parent=context.getContent();
  context.pushContent(dataObj);
  openResultSet(item);
  accessQuery(item,emitter);
  initializeContent(parent,item,dataObj);
  processAction(item,dataObj);
  processBookmark(item,dataObj);
  processStyle(item,dataObj);
  processVisibility(item,dataObj);
  Object value=context.evaluate(dataItem.getValue());
  value=getMappingValue(value,dataItem);
  dataObj.setValue(value);
  if (context.isInFactory()) {
    DataItemScriptExecutor.handleOnCreate((DataContent)dataObj,context);
  }
  if (emitter != null) {
    emitter.startData(dataObj);
  }
  closeResultSet();
  context.popContent();
}","/** 
 * execute the data item. <li> create the data content object <li> push it to the stack <li> open the data set, seek to the first record <li> intialize the content object <li> process the style, visiblitly, action and bookmark <li> evaluate the expression, and map it to a predefined value. <li> call the onCreate if necessary <li> pass it to emitter <li> close the data set if any <li> pop the stack.
 * @see org.eclipse.birt.report.engine.excutor.ReportItemExecutor#execute()
 */
public void execute(ReportItemDesign item,IContentEmitter emitter){
  DataItemDesign dataItem=(DataItemDesign)item;
  IDataContent dataObj=report.createDataContent();
  assert(dataObj instanceof DataContent);
  IContent parent=context.getContent();
  context.pushContent(dataObj);
  openResultSet(item);
  accessQuery(item,emitter);
  initializeContent(parent,item,dataObj);
  processAction(item,dataObj);
  processBookmark(item,dataObj);
  processStyle(item,dataObj);
  processVisibility(item,dataObj);
  Object value=context.evaluate(dataItem.getValue());
  value=getMappingValue(value,dataItem);
  dataObj.setValue(value);
  if (context.isInFactory()) {
    try {
      context.newScope(dataObj);
      DataItemScriptExecutor.handleOnCreate((DataContent)dataObj,context);
    }
  finally {
      context.exitScope();
    }
  }
  if (emitter != null) {
    emitter.startData(dataObj);
  }
  closeResultSet();
  context.popContent();
}",0.9650909090909092
78978,"/** 
 * execute a cell. the execution process is: <li> create a cell content <li> push the content into the stack <li> intialize the cell <li> process the action, bookmark, style, visibility <li> call onCreate if necessary <li> call emitter to start the cell <li> for each element in the cell, execute the element. <li> call emiter to close the cell <li> popup the cell.
 * @param rowContent row content
 * @param cell cell design
 * @param emitter output emitter
 */
private void executeCell(IRowContent rowContent,CellDesign cell,IContentEmitter emitter){
  ICellContent cellContent=report.createCellContent();
  assert(cellContent instanceof CellContent);
  context.pushContent(cellContent);
  initializeContent(rowContent,cell,cellContent);
  cellContent.setColumn(cell.getColumn());
  cellContent.setColSpan(cell.getColSpan());
  cellContent.setRowSpan(cell.getRowSpan());
  processAction(cell,cellContent);
  processBookmark(cell,cellContent);
  processStyle(cell,cellContent);
  processVisibility(cell,cellContent);
  if (context.isInFactory()) {
    CellScriptExecutor.handleOnCreate((CellContent)cellContent,null,context);
  }
  if (emitter != null) {
    emitter.startCell(cellContent);
  }
  for (int m=0; m < cell.getContentCount(); m++) {
    ReportItemDesign ri=cell.getContent(m);
    if (ri != null) {
      ri.accept(this.visitor,emitter);
    }
  }
  if (emitter != null) {
    emitter.endCell(cellContent);
  }
  context.popContent();
}","/** 
 * execute a cell. the execution process is: <li> create a cell content <li> push the content into the stack <li> intialize the cell <li> process the action, bookmark, style, visibility <li> call onCreate if necessary <li> call emitter to start the cell <li> for each element in the cell, execute the element. <li> call emiter to close the cell <li> popup the cell.
 * @param rowContent row content
 * @param cell cell design
 * @param emitter output emitter
 */
private void executeCell(IRowContent rowContent,CellDesign cell,IContentEmitter emitter){
  ICellContent cellContent=report.createCellContent();
  assert(cellContent instanceof CellContent);
  context.pushContent(cellContent);
  initializeContent(rowContent,cell,cellContent);
  cellContent.setColumn(cell.getColumn());
  cellContent.setColSpan(cell.getColSpan());
  cellContent.setRowSpan(cell.getRowSpan());
  processAction(cell,cellContent);
  processBookmark(cell,cellContent);
  processStyle(cell,cellContent);
  processVisibility(cell,cellContent);
  if (context.isInFactory()) {
    try {
      context.newScope(cellContent);
      CellScriptExecutor.handleOnCreate((CellContent)cellContent,null,context);
    }
  finally {
      context.exitScope();
    }
  }
  if (emitter != null) {
    emitter.startCell(cellContent);
  }
  for (int m=0; m < cell.getContentCount(); m++) {
    ReportItemDesign ri=cell.getContent(m);
    if (ri != null) {
      ri.accept(this.visitor,emitter);
    }
  }
  if (emitter != null) {
    emitter.endCell(cellContent);
  }
  context.popContent();
}",0.9667774086378738
78979,"/** 
 * execute the row. The execution process is: <li> create a row content <li> push it into the context <li> intialize the content. <li> process bookmark, action, style and visibility <li> call onCreate if necessary <li> call emitter to start the row <li> for each cell, execute the cell <li> call emitter to close the row <li> pop up the row.
 * @param rowId row id.
 * @param body table body.
 * @param row row design
 * @param emitter output emitter
 */
private void executeRow(int rowId,ITableBandContent body,RowDesign row,IContentEmitter emitter){
  IRowContent rowContent=report.createRowContent();
  assert(rowContent instanceof RowContent);
  context.pushContent(rowContent);
  initializeContent(body,row,rowContent);
  processAction(row,rowContent);
  processBookmark(row,rowContent);
  processStyle(row,rowContent);
  processVisibility(row,rowContent);
  if (context.isInFactory()) {
    DetailRowScriptExecutor.handleOnCreate((RowContent)rowContent,null,context);
  }
  if (emitter != null) {
    emitter.startRow(rowContent);
  }
  for (int j=0; j < row.getCellCount(); j++) {
    CellDesign cell=row.getCell(j);
    if (cell != null) {
      executeCell(rowContent,cell,emitter);
    }
  }
  if (emitter != null) {
    emitter.endRow(rowContent);
  }
  context.popContent();
}","/** 
 * execute the row. The execution process is: <li> create a row content <li> push it into the context <li> intialize the content. <li> process bookmark, action, style and visibility <li> call onCreate if necessary <li> call emitter to start the row <li> for each cell, execute the cell <li> call emitter to close the row <li> pop up the row.
 * @param rowId row id.
 * @param body table body.
 * @param row row design
 * @param emitter output emitter
 */
private void executeRow(int rowId,ITableBandContent body,RowDesign row,IContentEmitter emitter){
  IRowContent rowContent=report.createRowContent();
  assert(rowContent instanceof RowContent);
  context.pushContent(rowContent);
  initializeContent(body,row,rowContent);
  processAction(row,rowContent);
  processBookmark(row,rowContent);
  processStyle(row,rowContent);
  processVisibility(row,rowContent);
  if (context.isInFactory()) {
    try {
      context.newScope(rowContent);
      DetailRowScriptExecutor.handleOnCreate((RowContent)rowContent,null,context);
    }
  finally {
      context.exitScope();
    }
  }
  if (emitter != null) {
    emitter.startRow(rowContent);
  }
  for (int j=0; j < row.getCellCount(); j++) {
    CellDesign cell=row.getCell(j);
    if (cell != null) {
      executeCell(rowContent,cell,emitter);
    }
  }
  if (emitter != null) {
    emitter.endRow(rowContent);
  }
  context.popContent();
}",0.9631284916201116
78980,"/** 
 * execute a grid. The execution process is: <li> create a Table content <li> push it into the stack <li> execute the query and seek to the first record <li> process the table style, visiblity, action, bookmark <li> execute the onCreate if necessary. <li> call emitter to start the grid. <li> for each row, execute the row. <li> call emitter to close the grid. <li> close the query <li> popup the table.
 * @see org.eclipse.birt.report.engine.excutor.ReportItemExcutor#excute()
 */
public void execute(ReportItemDesign item,IContentEmitter emitter){
  GridItemDesign gridItem=(GridItemDesign)item;
  ITableContent tableObj=report.createTableContent();
  IContent parent=context.getContent();
  context.pushContent(tableObj);
  openResultSet(item);
  accessQuery(item,emitter);
  initializeContent(parent,item,tableObj);
  processAction(item,tableObj);
  processBookmark(item,tableObj);
  processStyle(item,tableObj);
  processVisibility(item,tableObj);
  for (int i=0; i < gridItem.getColumnCount(); i++) {
    ColumnDesign columnDesign=gridItem.getColumn(i);
    Column column=new Column();
    column.setStyleClass(columnDesign.getStyleName());
    column.setWidth(columnDesign.getWidth());
    tableObj.addColumn(column);
  }
  if (context.isInFactory()) {
    TableScriptExecutor.handleOnCreate((TableContent)tableObj,context);
  }
  if (emitter != null) {
    emitter.startTable(tableObj);
  }
  ITableBandContent body=report.createTableBandContent();
  body.setParent(tableObj);
  context.pushContent(body);
  if (emitter != null) {
    emitter.startTableBody(body);
  }
  for (int i=0; i < gridItem.getRowCount(); i++) {
    RowDesign row=gridItem.getRow(i);
    if (row != null) {
      executeRow(i,body,row,emitter);
    }
  }
  if (emitter != null) {
    emitter.endTableBody(body);
  }
  context.popContent();
  if (emitter != null) {
    emitter.endTable(tableObj);
  }
  closeResultSet();
  context.popContent();
}","/** 
 * execute a grid. The execution process is: <li> create a Table content <li> push it into the stack <li> execute the query and seek to the first record <li> process the table style, visiblity, action, bookmark <li> execute the onCreate if necessary. <li> call emitter to start the grid. <li> for each row, execute the row. <li> call emitter to close the grid. <li> close the query <li> popup the table.
 * @see org.eclipse.birt.report.engine.excutor.ReportItemExcutor#excute()
 */
public void execute(ReportItemDesign item,IContentEmitter emitter){
  GridItemDesign gridItem=(GridItemDesign)item;
  ITableContent tableObj=report.createTableContent();
  IContent parent=context.getContent();
  context.pushContent(tableObj);
  openResultSet(item);
  accessQuery(item,emitter);
  initializeContent(parent,item,tableObj);
  processAction(item,tableObj);
  processBookmark(item,tableObj);
  processStyle(item,tableObj);
  processVisibility(item,tableObj);
  for (int i=0; i < gridItem.getColumnCount(); i++) {
    ColumnDesign columnDesign=gridItem.getColumn(i);
    Column column=new Column();
    column.setStyleClass(columnDesign.getStyleName());
    column.setWidth(columnDesign.getWidth());
    tableObj.addColumn(column);
  }
  if (context.isInFactory()) {
    try {
      context.newScope(tableObj);
      GridScriptExecutor.handleOnCreate((TableContent)tableObj,null,context);
    }
  finally {
      context.exitScope();
    }
  }
  if (emitter != null) {
    emitter.startTable(tableObj);
  }
  ITableBandContent body=report.createTableBandContent();
  body.setParent(tableObj);
  context.pushContent(body);
  if (emitter != null) {
    emitter.startTableBody(body);
  }
  for (int i=0; i < gridItem.getRowCount(); i++) {
    RowDesign row=gridItem.getRow(i);
    if (row != null) {
      executeRow(i,body,row,emitter);
    }
  }
  if (emitter != null) {
    emitter.endTableBody(body);
  }
  context.popContent();
  if (emitter != null) {
    emitter.endTable(tableObj);
  }
  closeResultSet();
  context.popContent();
}",0.972019158053945
78981,"/** 
 * execute a label and output an label item content. The execution process is: <li> create an label <li> push it into the stack <li> intialize the content <li> process the action, bookmark, style ,visibility. <li> execute the onCreate if necessary <li> call emitter to start the label <li> popup the label.
 * @see org.eclipse.birt.report.engine.executor.ReportItemExcutor#execute()
 */
public void execute(ReportItemDesign item,IContentEmitter emitter){
  ILabelContent labelObj=report.createLabelContent();
  assert(labelObj instanceof LabelContent);
  IContent parent=context.getContent();
  context.pushContent(labelObj);
  initializeContent(parent,item,labelObj);
  processAction(item,labelObj);
  processBookmark(item,labelObj);
  processStyle(item,labelObj);
  processVisibility(item,labelObj);
  if (context.isInFactory()) {
    LabelScriptExecutor.handleOnCreate((LabelContent)labelObj,context);
  }
  if (emitter != null) {
    emitter.startLabel(labelObj);
  }
  context.popContent();
}","/** 
 * execute a label and output an label item content. The execution process is: <li> create an label <li> push it into the stack <li> intialize the content <li> process the action, bookmark, style ,visibility. <li> execute the onCreate if necessary <li> call emitter to start the label <li> popup the label.
 * @see org.eclipse.birt.report.engine.executor.ReportItemExcutor#execute()
 */
public void execute(ReportItemDesign item,IContentEmitter emitter){
  ILabelContent labelObj=report.createLabelContent();
  assert(labelObj instanceof LabelContent);
  IContent parent=context.getContent();
  context.pushContent(labelObj);
  initializeContent(parent,item,labelObj);
  processAction(item,labelObj);
  processBookmark(item,labelObj);
  processStyle(item,labelObj);
  processVisibility(item,labelObj);
  if (context.isInFactory()) {
    try {
      context.newScope(labelObj);
      LabelScriptExecutor.handleOnCreate((LabelContent)labelObj,context);
    }
  finally {
      context.exitScope();
    }
  }
  if (emitter != null) {
    emitter.startLabel(labelObj);
  }
  context.popContent();
}",0.9538315088053309
78982,"/** 
 * Execute a listint and create the contents. List create a serials of contents. The execution process is: <li> create an container which will contain all the contents it creates. <li> push it into the stack <li> open query <li> process action, bookmark, style and visibility <li> call the onCreate if necessary <li> call emitter to start the list <li> access the query <li> call emitter to end the list <li> close the query. <li> pop up the container.
 * @see org.eclipse.birt.report.engine.executor.ReportItemExecutor#execute(org.eclipse.birt.report.engine.ir.ReportItemDesign,org.eclipse.birt.report.engine.emitter.IReportEmitter)
 */
public void execute(ReportItemDesign item,IContentEmitter emitter){
  ListItemDesign list=(ListItemDesign)item;
  logger.log(Level.FINE,""String_Node_Str"");
  IContainerContent listContent=report.createContainerContent();
  assert(listContent instanceof ContainerContent);
  IContent parent=context.getContent();
  context.pushContent(listContent);
  openResultSet(list);
  initializeContent(parent,item,listContent);
  processAction(item,listContent);
  processBookmark(item,listContent);
  processStyle(item,listContent);
  processVisibility(item,listContent);
  if (context.isInFactory()) {
    ListScriptExecutor.handleOnCreate((ContainerContent)listContent,context);
  }
  if (emitter != null) {
    emitter.startContainer(listContent);
  }
  logger.log(Level.FINE,""String_Node_Str"");
  accessQuery(list,emitter);
  logger.log(Level.FINE,""String_Node_Str"");
  if (emitter != null) {
    emitter.endContainer(listContent);
  }
  closeResultSet();
  context.popContent();
  logger.log(Level.FINE,""String_Node_Str"");
}","/** 
 * Execute a listint and create the contents. List create a serials of contents. The execution process is: <li> create an container which will contain all the contents it creates. <li> push it into the stack <li> open query <li> process action, bookmark, style and visibility <li> call the onCreate if necessary <li> call emitter to start the list <li> access the query <li> call emitter to end the list <li> close the query. <li> pop up the container.
 * @see org.eclipse.birt.report.engine.executor.ReportItemExecutor#execute(org.eclipse.birt.report.engine.ir.ReportItemDesign,org.eclipse.birt.report.engine.emitter.IReportEmitter)
 */
public void execute(ReportItemDesign item,IContentEmitter emitter){
  ListItemDesign list=(ListItemDesign)item;
  logger.log(Level.FINE,""String_Node_Str"");
  IContainerContent listContent=report.createContainerContent();
  assert(listContent instanceof ContainerContent);
  IContent parent=context.getContent();
  context.pushContent(listContent);
  openResultSet(list);
  initializeContent(parent,item,listContent);
  processAction(item,listContent);
  processBookmark(item,listContent);
  processStyle(item,listContent);
  processVisibility(item,listContent);
  if (context.isInFactory()) {
    try {
      context.newScope(listContent);
      ListScriptExecutor.handleOnCreate((ContainerContent)listContent,context);
    }
  finally {
      context.exitScope();
    }
  }
  if (emitter != null) {
    emitter.startContainer(listContent);
  }
  logger.log(Level.FINE,""String_Node_Str"");
  accessQuery(list,emitter);
  logger.log(Level.FINE,""String_Node_Str"");
  if (emitter != null) {
    emitter.endContainer(listContent);
  }
  closeResultSet();
  context.popContent();
  logger.log(Level.FINE,""String_Node_Str"");
}",0.9707943925233644
78983,"public void execute(ReportItemDesign item,IContentEmitter emitter){
  BirtTimer timer=new BirtTimer();
  timer.start();
  TableItemDesign tableDesign=(TableItemDesign)item;
  tableInfo=new TABLEINFO(tableDesign);
  logger.log(Level.FINEST,""String_Node_Str"");
  ITableContent tableContent=report.createTableContent();
  assert(tableContent instanceof TableContent);
  IContent parent=context.getContent();
  context.pushContent(tableContent);
  logger.log(Level.FINEST,""String_Node_Str"");
  openResultSet(item);
  logger.log(Level.FINEST,""String_Node_Str"");
  initializeContent(parent,item,tableContent);
  processStyle(item,tableContent);
  processVisibility(item,tableContent);
  processBookmark(item,tableContent);
  processAction(item,tableContent);
  for (int i=0; i < tableDesign.getColumnCount(); i++) {
    ColumnDesign columnDesign=tableDesign.getColumn(i);
    Column column=new Column();
    column.setStyleClass(columnDesign.getStyleName());
    column.setWidth(columnDesign.getWidth());
    tableContent.addColumn(column);
  }
  if (context.isInFactory()) {
    TableScriptExecutor.handleOnCreate((TableContent)tableContent,context);
  }
  if (emitter != null) {
    emitter.startTable(tableContent);
  }
  accessQuery(tableDesign,emitter);
  if (emitter != null) {
    emitter.endTable(tableContent);
  }
  context.popContent();
  closeResultSet();
  logger.log(Level.FINEST,""String_Node_Str"");
  timer.stop();
  timer.logTimeTaken(logger,Level.FINEST,context.getTaskIDString(),""String_Node_Str"");
}","public void execute(ReportItemDesign item,IContentEmitter emitter){
  BirtTimer timer=new BirtTimer();
  timer.start();
  TableItemDesign tableDesign=(TableItemDesign)item;
  tableInfo=new TABLEINFO(tableDesign);
  logger.log(Level.FINEST,""String_Node_Str"");
  ITableContent tableContent=report.createTableContent();
  assert(tableContent instanceof TableContent);
  IContent parent=context.getContent();
  context.pushContent(tableContent);
  logger.log(Level.FINEST,""String_Node_Str"");
  openResultSet(item);
  logger.log(Level.FINEST,""String_Node_Str"");
  initializeContent(parent,item,tableContent);
  processStyle(item,tableContent);
  processVisibility(item,tableContent);
  processBookmark(item,tableContent);
  processAction(item,tableContent);
  for (int i=0; i < tableDesign.getColumnCount(); i++) {
    ColumnDesign columnDesign=tableDesign.getColumn(i);
    Column column=new Column();
    column.setStyleClass(columnDesign.getStyleName());
    column.setWidth(columnDesign.getWidth());
    tableContent.addColumn(column);
  }
  if (context.isInFactory()) {
    try {
      context.newScope(tableContent);
      TableScriptExecutor.handleOnCreate((TableContent)tableContent,context);
    }
  finally {
      context.exitScope();
    }
  }
  if (emitter != null) {
    emitter.startTable(tableContent);
  }
  accessQuery(tableDesign,emitter);
  if (emitter != null) {
    emitter.endTable(tableContent);
  }
  context.popContent();
  closeResultSet();
  logger.log(Level.FINEST,""String_Node_Str"");
  timer.stop();
  timer.logTimeTaken(logger,Level.FINEST,context.getTaskIDString(),""String_Node_Str"");
}",0.96768
78984,"/** 
 * output the row. row is output as: row start, cells*, row end.
 * @param rowIndex the index in the rows
 * @param row row design
 * @param emitter output emitter
 */
protected void accessRow(RowDesign row,IContentEmitter emitter,boolean runScript){
  if (rowClosed) {
    IRowContent rowContent=report.createRowContent();
    assert(rowContent instanceof RowContent);
    IContent parent=context.getContent();
    context.pushContent(rowContent);
    initializeContent(parent,row,rowContent);
    processStyle(row,rowContent);
    processVisibility(row,rowContent);
    processBookmark(row,rowContent);
    processAction(row,rowContent);
    if (context.isInFactory() && runScript) {
      DetailRowScriptExecutor.handleOnCreate((RowContent)rowContent,null,context);
    }
    if (emitter != null) {
      emitter.startRow(rowContent);
    }
    rowClosed=false;
  }
  for (int j=0; j < row.getCellCount(); j++) {
    CellDesign cell=row.getCell(j);
    if (cell != null) {
      ICellContent cellContent=report.createCellContent();
      assert(cellContent instanceof CellContent);
      IContent parent=context.getContent();
      context.pushContent(cellContent);
      initializeContent(parent,cell,cellContent);
      cellContent.setColumn(cell.getColumn());
      cellContent.setColSpan(cell.getColSpan());
      cellContent.setRowSpan(cell.getRowSpan());
      processStyle(cell,cellContent);
      processVisibility(cell,cellContent);
      processBookmark(cell,cellContent);
      processAction(cell,cellContent);
      if (context.isInFactory()) {
        CellScriptExecutor.handleOnCreate((CellContent)cellContent,null,context);
      }
      if (emitter != null) {
        emitter.startCell(cellContent);
      }
      for (int m=0; m < cell.getContentCount(); m++) {
        ReportItemDesign item=cell.getContent(m);
        if (item != null) {
          if (layoutEmitter != null) {
            item.accept(this.visitor,layoutEmitter.getCellEmitter());
          }
 else {
            item.accept(this.visitor,emitter);
          }
        }
      }
      if (emitter != null) {
        emitter.endCell(cellContent);
      }
      context.popContent();
    }
  }
  boolean closeRow=true;
  if (closeRow) {
    emitter.endRow((IRowContent)context.getContent());
    context.popContent();
    rowClosed=true;
  }
}","/** 
 * output the row. row is output as: row start, cells*, row end.
 * @param rowIndex the index in the rows
 * @param row row design
 * @param emitter output emitter
 */
protected void accessRow(RowDesign row,IContentEmitter emitter,boolean runScript){
  if (rowClosed) {
    IRowContent rowContent=report.createRowContent();
    assert(rowContent instanceof RowContent);
    IContent parent=context.getContent();
    context.pushContent(rowContent);
    initializeContent(parent,row,rowContent);
    processStyle(row,rowContent);
    processVisibility(row,rowContent);
    processBookmark(row,rowContent);
    processAction(row,rowContent);
    if (context.isInFactory() && runScript) {
      try {
        context.newScope(rowContent);
        DetailRowScriptExecutor.handleOnCreate((RowContent)rowContent,null,context);
      }
  finally {
        context.exitScope();
      }
    }
    if (emitter != null) {
      emitter.startRow(rowContent);
    }
    rowClosed=false;
  }
  for (int j=0; j < row.getCellCount(); j++) {
    CellDesign cell=row.getCell(j);
    if (cell != null) {
      ICellContent cellContent=report.createCellContent();
      assert(cellContent instanceof CellContent);
      IContent parent=context.getContent();
      context.pushContent(cellContent);
      initializeContent(parent,cell,cellContent);
      cellContent.setColumn(cell.getColumn());
      cellContent.setColSpan(cell.getColSpan());
      cellContent.setRowSpan(cell.getRowSpan());
      processStyle(cell,cellContent);
      processVisibility(cell,cellContent);
      processBookmark(cell,cellContent);
      processAction(cell,cellContent);
      if (context.isInFactory()) {
        try {
          context.newScope(cellContent);
          CellScriptExecutor.handleOnCreate((CellContent)cellContent,null,context);
        }
  finally {
          context.exitScope();
        }
      }
      if (emitter != null) {
        emitter.startCell(cellContent);
      }
      for (int m=0; m < cell.getContentCount(); m++) {
        ReportItemDesign item=cell.getContent(m);
        if (item != null) {
          if (layoutEmitter != null) {
            item.accept(this.visitor,layoutEmitter.getCellEmitter());
          }
 else {
            item.accept(this.visitor,emitter);
          }
        }
      }
      if (emitter != null) {
        emitter.endCell(cellContent);
      }
      context.popContent();
    }
  }
  boolean closeRow=true;
  if (closeRow) {
    emitter.endRow((IRowContent)context.getContent());
    context.popContent();
    rowClosed=true;
  }
}",0.953217568947906
78985,"/** 
 * execute the plain text.
 * @param design
 * @param emitter
 */
protected void executePlainText(TextItemDesign design,IContentEmitter emitter){
  ILabelContent content=report.createLabelContent();
  assert(content instanceof LabelContent);
  IContent parent=context.getContent();
  context.pushContent(content);
  initializeContent(parent,design,content);
  content.setLabelText(design.getText());
  content.setLabelKey(design.getTextKey());
  processAction(design,content);
  processBookmark(design,content);
  processStyle(design,content);
  processVisibility(design,content);
  if (context.isInFactory()) {
    if (context.isInFactory()) {
      TextItemScriptExecutor.handleOnCreate((LabelContent)content,context);
    }
  }
  if (emitter != null) {
    emitter.startLabel(content);
  }
  context.popContent();
}","/** 
 * execute the plain text.
 * @param design
 * @param emitter
 */
protected void executePlainText(TextItemDesign design,IContentEmitter emitter){
  ILabelContent content=report.createLabelContent();
  assert(content instanceof LabelContent);
  IContent parent=context.getContent();
  context.pushContent(content);
  initializeContent(parent,design,content);
  content.setLabelText(design.getText());
  content.setLabelKey(design.getTextKey());
  processAction(design,content);
  processBookmark(design,content);
  processStyle(design,content);
  processVisibility(design,content);
  if (context.isInFactory()) {
    try {
      context.newScope(content);
      TextItemScriptExecutor.handleOnCreate((LabelContent)content,context);
    }
  finally {
      context.exitScope();
    }
  }
  if (emitter != null) {
    emitter.startLabel(content);
  }
  context.popContent();
}",0.8630217519106408
78986,"/** 
 * Sets the theme to a report.
 * @param themeName the name of the theme
 * @throws SemanticException
 */
public void setThemeName(String themeName) throws SemanticException {
  ThemeCommand command=new ThemeCommand(getModule());
  command.setTheme(themeName);
}","/** 
 * Sets the theme to a report.
 * @param themeName the name of the theme
 * @throws SemanticException
 */
public void setThemeName(String themeName) throws SemanticException {
  ThemeCommand command=new ThemeCommand(getModule(),getElement());
  command.setTheme(themeName);
}",0.9762340036563072
78987,"/** 
 * Sets the theme to a report.
 * @param theme the theme instance
 * @throws SemanticException
 */
private void setThemeElement(Theme theme) throws SemanticException {
  ThemeCommand command=new ThemeCommand(getModule());
  command.setThemeElement(theme);
}","/** 
 * Sets the theme to a report.
 * @param theme the theme instance
 * @throws SemanticException
 */
private void setThemeElement(Theme theme) throws SemanticException {
  ThemeCommand command=new ThemeCommand(getModule(),getElement());
  command.setThemeElement(theme);
}",0.9757914338919924
78988,"/** 
 * Constructor.
 * @param module the module
 */
public ThemeCommand(Module module){
}","/** 
 * Constructor.
 * @param module the module
 * @param element the module to set the theme
 */
public ThemeCommand(Module module,DesignElement element){
}",0.7258064516129032
78989,"/** 
 * Sets the theme of an element.
 * @param name the name of the theme to set.
 * @throws SemanticException if the element can not have theme or the theme is not found.
 */
public void setTheme(String name) throws SemanticException {
  name=StringUtil.trimString(name);
  ReportDesign design=(ReportDesign)element;
  Theme theme=null;
  Theme oldTheme=design.getTheme();
  if (name != null) {
    theme=getModule().findTheme(name);
    if (theme == oldTheme)     return;
    if (theme == null)     throw new StyleException(element,name,StyleException.DESIGN_EXCEPTION_NOT_FOUND);
  }
 else {
    if (oldTheme == null)     return;
  }
  design.getActivityStack().startTrans();
  PropertyCommand propCommand=new PropertyCommand(module,module);
  propCommand.setProperty(IModuleModel.THEME_PROP,name);
  ThemeRecord themeEffects=new ThemeRecord(design,theme,oldTheme);
  design.getActivityStack().execute(themeEffects);
  design.getActivityStack().commit();
}","/** 
 * Sets the theme of an element.
 * @param name the name of the theme to set.
 * @throws SemanticException if the element can not have theme or the theme is not found.
 */
public void setTheme(String name) throws SemanticException {
  name=StringUtil.trimString(name);
  Module currentModule=(Module)element;
  Theme theme=null;
  Theme oldTheme=currentModule.getTheme();
  if (name != null) {
    theme=getModule().findTheme(name);
    if (theme == oldTheme)     return;
    if (theme == null)     throw new StyleException(element,name,StyleException.DESIGN_EXCEPTION_NOT_FOUND);
  }
 else {
    if (oldTheme == null)     return;
  }
  ThemeRecord themeRecord=new ThemeRecord(currentModule,theme);
  getModule().getActivityStack().execute(themeRecord);
}",0.6744186046511628
78990,"/** 
 * Unresolves references of styles of a theme.
 * @param theme the theme
 */
private void unresolveStyles(Theme theme){
}","/** 
 * Unresolves references of styles of a theme.
 * @param theme the theme
 */
private void unresolveStyles(Object theme){
}",0.9644268774703556
78991,"public DesignElement getTarget(){
  return newTheme;
}","public DesignElement getTarget(){
  return module;
}",0.9056603773584906
78992,"protected void perform(boolean undo){
  if (undo)   unresolveStyles(newTheme);
 else   unresolveStyles(oldTheme);
}","protected void perform(boolean undo){
  if (undo) {
    unresolveStyles(newTheme);
    if (oldTheme instanceof String)     module.setThemeName((String)oldTheme);
 else     module.setTheme((Theme)oldTheme);
  }
 else {
    unresolveStyles(oldTheme);
    module.setTheme(newTheme);
  }
}",0.555
78993,"/** 
 * Constructs the library record.
 * @param module the module
 * @param library the library to add/drop
 * @param add whether the given library is for adding
 */
ThemeRecord(ReportDesign module,Theme newTheme,Theme oldTheme){
  this.module=module;
  this.newTheme=newTheme;
  this.oldTheme=oldTheme;
}","/** 
 * Constructs the library record.
 * @param module the module
 * @param newTheme the new theme
 * @param oldTheme the old theme
 */
ThemeRecord(Module module,Theme newTheme){
  this.module=module;
  this.newTheme=newTheme;
  if (module.getTheme() != null)   oldTheme=module.getTheme();
 else   oldTheme=module.getThemeName();
  label=ModelMessages.getMessage(MessageConstants.SET_THEME_MESSAGE);
}",0.268361581920904
78994,"/** 
 * Creates a new library.
 * @return the created library.
 */
public Library createLibrary(){
  Library library=new Library(this);
  Theme theme=new Theme(ModelMessages.getMessage(Theme.DEFAULT_THEME_NAME));
  library.setProperty(Module.THEME_PROP,new ElementRefValue(null,theme));
  ModelUtil.insertCompatibleThemeToLibrary(library,theme);
  theme.setID(library.getNextID());
  library.addElementID(theme);
  library.setValid(true);
  libraries.add(library);
  return library;
}","/** 
 * Creates a new library.
 * @return the created library.
 */
public Library createLibrary(){
  Library library=new Library(this);
  Theme theme=new Theme(ModelMessages.getMessage(Theme.DEFAULT_THEME_NAME));
  library.setTheme(theme);
  ModelUtil.insertCompatibleThemeToLibrary(library,theme);
  theme.setID(library.getNextID());
  library.addElementID(theme);
  library.setValid(true);
  libraries.add(library);
  return library;
}",0.9250814332247556
78995,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"" + ""String_Node_Str"");
  suite.addTestSuite(AverageTest.class);
  suite.addTestSuite(SumTest.class);
  suite.addTestSuite(ValueFormatterTest.class);
  suite.addTestSuite(DataSetProcessorImplTest.class);
  suite.addTestSuite(ResultSetDataSetTest.class);
  suite.addTestSuite(ResultSetWrapperTest.class);
  suite.addTestSuite(StockEntryTest.class);
  suite.addTest(ModelAttributeTest.suite());
  suite.addTestSuite(CDateTimeTest.class);
  suite.addTestSuite(ChartUtilTest.class);
  suite.addTestSuite(ClipTest.class);
  suite.addTestSuite(LiteralHelperTest.class);
  suite.addTestSuite(LowessTest.class);
  suite.addTestSuite(LUDecompositionTest.class);
  suite.addTestSuite(MatrixTest.class);
  suite.addTestSuite(NameSetTest.class);
  suite.addTestSuite(QRDecompositionTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"" + ""String_Node_Str"");
  suite.addTestSuite(AverageTest.class);
  suite.addTestSuite(SumTest.class);
  suite.addTestSuite(ValueFormatterTest.class);
  suite.addTestSuite(VectorTest.class);
  suite.addTestSuite(BoundingBoxTest.class);
  suite.addTestSuite(DataSetProcessorImplTest.class);
  suite.addTestSuite(ResultSetDataSetTest.class);
  suite.addTestSuite(ResultSetWrapperTest.class);
  suite.addTestSuite(StockEntryTest.class);
  suite.addTest(ModelAttributeTest.suite());
  suite.addTestSuite(CDateTimeTest.class);
  suite.addTestSuite(ChartUtilTest.class);
  suite.addTestSuite(ClipTest.class);
  suite.addTestSuite(LiteralHelperTest.class);
  suite.addTestSuite(LowessTest.class);
  suite.addTestSuite(LUDecompositionTest.class);
  suite.addTestSuite(MatrixTest.class);
  suite.addTestSuite(NameSetTest.class);
  suite.addTestSuite(QRDecompositionTest.class);
  return suite;
}",0.9537289058247144
78996,"public void testGet(){
  assertEquals(ActionType.URL_REDIRECT_LITERAL,ActionType.get(ActionType.URL_REDIRECT));
  assertEquals(ActionType.SHOW_TOOLTIP_LITERAL,ActionType.get(ActionType.SHOW_TOOLTIP));
  assertEquals(ActionType.TOGGLE_VISIBILITY_LITERAL,ActionType.get(2));
  assertEquals(ActionType.INVOKE_SCRIPT_LITERAL,ActionType.get(3));
  assertEquals(ActionType.URL_REDIRECT_LITERAL,ActionType.get(""String_Node_Str""));
  assertEquals(ActionType.SHOW_TOOLTIP_LITERAL,ActionType.get(""String_Node_Str""));
  assertEquals(ActionType.TOGGLE_VISIBILITY_LITERAL,ActionType.get(""String_Node_Str""));
  assertEquals(ActionType.INVOKE_SCRIPT_LITERAL,ActionType.get(""String_Node_Str""));
  assertNull(ActionType.get(""String_Node_Str""));
  assertNull(ActionType.get(10));
}","public void testGet(){
  assertEquals(ActionType.URL_REDIRECT_LITERAL,ActionType.get(ActionType.URL_REDIRECT));
  assertEquals(ActionType.SHOW_TOOLTIP_LITERAL,ActionType.get(ActionType.SHOW_TOOLTIP));
  assertEquals(ActionType.URL_REDIRECT_LITERAL,ActionType.get(""String_Node_Str""));
  assertEquals(ActionType.SHOW_TOOLTIP_LITERAL,ActionType.get(""String_Node_Str""));
  assertEquals(ActionType.TOGGLE_VISIBILITY_LITERAL,ActionType.get(""String_Node_Str""));
  assertEquals(ActionType.INVOKE_SCRIPT_LITERAL,ActionType.get(""String_Node_Str""));
  assertNull(ActionType.get(""String_Node_Str""));
}",0.5931952662721893
78997,"public void testConstant(){
  assertEquals(ActionType.URL_REDIRECT,0);
  assertEquals(ActionType.SHOW_TOOLTIP,1);
  assertEquals(ActionType.TOGGLE_VISIBILITY,2);
  assertEquals(ActionType.INVOKE_SCRIPT,3);
}","public void testConstant(){
  assertEquals(ActionType.URL_REDIRECT,ActionType.URL_REDIRECT_LITERAL.getValue());
  assertEquals(ActionType.SHOW_TOOLTIP,ActionType.SHOW_TOOLTIP_LITERAL.getValue());
  assertEquals(ActionType.TOGGLE_VISIBILITY,ActionType.TOGGLE_VISIBILITY_LITERAL.getValue());
  assertEquals(ActionType.INVOKE_SCRIPT,ActionType.INVOKE_SCRIPT_LITERAL.getValue());
}",0.6952054794520548
78998,"/** 
 * Returns 1-based the column position with the given row index and the cell element.
 * @param rowId the row index
 * @param cell the cell to search
 * @return 1-based the column position
 */
protected int getColumnPos(int rowId,Cell cell){
  if (rowId < 0 || rowId > rows.size())   return 0;
  LayoutRow row=(LayoutRow)getLayoutRow(rowId);
  return row.findCellColumnPos(cell);
}","/** 
 * Returns 1-based the column position with the given row index and the cell element.
 * @param rowId the row index
 * @param cell the cell to search
 * @return 1-based the column position
 */
protected int getColumnPos(int rowId,Cell cell){
  if (rowId < 0 || rowId >= rows.size())   return 0;
  LayoutRow row=(LayoutRow)getLayoutRow(rowId);
  return row.findCellColumnPos(cell);
}",0.998706338939198
78999,"/** 
 * Returns the level of this group within the list. The grouping level is cached for performance.
 * @return the 1-based grouping level of this group
 */
public int getGroupLevel(){
  if (groupLevel == LEVEL_NOT_SET) {
    ContainerSlot slot=container.getSlot(containerSlotID);
    groupLevel=slot.findPosn(this) + 1;
  }
  return groupLevel;
}","/** 
 * Returns the level of this group within the list. The grouping level is cached for performance.
 * @return the 1-based grouping level of this group
 */
public int getGroupLevel(){
  ContainerSlot slot=container.getSlot(containerSlotID);
  groupLevel=slot.findPosn(this) + 1;
  return groupLevel;
}",0.8728943338437979
79000,"/** 
 * Checks whether the input stream has a compatible encoding signature with BIRT. Currently, BIRT only supports UTF-8 encoding.
 * @param inputStream the input stream to check
 * @param fileName the design file name
 * @return the signature from the UTF files.
 * @throws IOException if errors occur during opening the design file
 * @throws SAXException if the stream has unexpected encoding signature
 */
protected String checkUTFSignature(InputStream inputStream,String fileName) throws IOException, SAXException {
  logger.log(Level.FINE,""String_Node_Str"");
  String encoding=UnicodeUtil.checkUTFSignature(inputStream);
  if (encoding != null && !UnicodeUtil.SIGNATURE_UTF_8.equals(encoding)) {
    Exception cause=new DesignParserException(DesignParserException.DESIGN_EXCEPTION_UNSUPPORTED_ENCODING);
    Exception fileException=new DesignFileException(fileName,cause);
    throw new SAXException(fileException);
  }
  return encoding;
}","/** 
 * Checks whether the input stream has a compatible encoding signature with BIRT. Currently, BIRT only supports UTF-8 encoding.
 * @param inputStream the input stream to check
 * @param fileName the design file name
 * @return the signature from the UTF files.
 * @throws IOException if errors occur during opening the design file
 * @throws SAXException if the stream has unexpected encoding signature
 */
protected String checkUTFSignature(InputStream inputStream,String fileName) throws IOException, SAXException {
  String encoding=UnicodeUtil.checkUTFSignature(inputStream);
  if (encoding != null && !UnicodeUtil.SIGNATURE_UTF_8.equals(encoding)) {
    Exception cause=new DesignParserException(DesignParserException.DESIGN_EXCEPTION_UNSUPPORTED_ENCODING);
    Exception fileException=new DesignFileException(fileName,cause);
    throw new SAXException(fileException);
  }
  return encoding;
}",0.976241900647948
