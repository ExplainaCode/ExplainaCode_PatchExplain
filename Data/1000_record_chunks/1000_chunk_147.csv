record_number,buggy_code,fixed_code,code_similarity
146001,"private void handleForeignKey(MetadataRepository repository,ComplexTypeMetadata type,XmlSchemaAnnotationProcessorState state,Element appInfo){
  state.markAsReference();
  String path=appInfo.getTextContent();
  FieldMetadata fieldMetadata=getFieldMetadata(repository,type,appInfo,path);
  state.setReferencedField(fieldMetadata);
  state.setReferencedType(new SoftTypeRef(repository,repository.getUserNamespace(),getTypeName(type,path),true));
}","private void handleForeignKey(MetadataRepository repository,ComplexTypeMetadata type,XmlSchemaAnnotationProcessorState state,Element appInfo){
  state.markAsReference();
  String path=appInfo.getTextContent();
  FieldMetadata fieldMetadata=getFieldMetadata(repository,type,appInfo,path,false);
  state.setReferencedField(fieldMetadata);
  state.setReferencedType(new SoftTypeRef(repository,repository.getUserNamespace(),getTypeName(type,path),true));
}",0.9933184855233852
146002,"private static FieldMetadata getFieldMetadata(MetadataRepository repository,ComplexTypeMetadata type,Element appInfo,String path){
  String typeName=getTypeName(type,path);
  String fieldPath=StringUtils.substringAfter(path,""String_Node_Str"").trim();
  FieldMetadata fieldMetadata;
  if (!fieldPath.isEmpty() && (repository.getComplexType(typeName) == null || repository.getComplexType(typeName).getKeyFields().size() <= 1)) {
    fieldMetadata=new SoftFieldRef(repository,fieldPath,typeName);
  }
 else {
    fieldMetadata=new SoftIdFieldRef(repository,typeName);
  }
  fieldMetadata.setData(MetadataRepository.XSD_LINE_NUMBER,XSDParser.getStartLine(appInfo));
  fieldMetadata.setData(MetadataRepository.XSD_COLUMN_NUMBER,XSDParser.getStartColumn(appInfo));
  fieldMetadata.setData(MetadataRepository.XSD_DOM_ELEMENT,appInfo);
  return fieldMetadata;
}","private static FieldMetadata getFieldMetadata(MetadataRepository repository,ComplexTypeMetadata type,Element appInfo,String path,boolean isFKInfo){
  String typeName=getTypeName(type,path);
  String fieldPath=StringUtils.substringAfter(path,""String_Node_Str"").trim();
  FieldMetadata fieldMetadata;
  if (!fieldPath.isEmpty() && isFKInfo) {
    fieldMetadata=new SoftFieldRef(repository,fieldPath,typeName);
  }
 else {
    if (!fieldPath.isEmpty() && (repository.getComplexType(typeName) == null || repository.getComplexType(typeName).getKeyFields().size() == 1)) {
      fieldMetadata=new SoftFieldRef(repository,fieldPath,typeName);
    }
 else {
      fieldMetadata=new SoftIdFieldRef(repository,typeName);
    }
  }
  fieldMetadata.setData(MetadataRepository.XSD_LINE_NUMBER,XSDParser.getStartLine(appInfo));
  fieldMetadata.setData(MetadataRepository.XSD_COLUMN_NUMBER,XSDParser.getStartColumn(appInfo));
  fieldMetadata.setData(MetadataRepository.XSD_DOM_ELEMENT,appInfo);
  return fieldMetadata;
}",0.9171151776103336
146003,"private void handleForeignKeyInfo(MetadataRepository repository,XmlSchemaAnnotationProcessorState state,Element appInfo){
  String path=appInfo.getTextContent();
  FieldMetadata fieldMetadata=getFieldMetadata(repository,(ComplexTypeMetadata)state.getReferencedType(),appInfo,path);
  state.setForeignKeyInfo(fieldMetadata);
}","private void handleForeignKeyInfo(MetadataRepository repository,XmlSchemaAnnotationProcessorState state,Element appInfo){
  String path=appInfo.getTextContent();
  FieldMetadata fieldMetadata=getFieldMetadata(repository,(ComplexTypeMetadata)state.getReferencedType(),appInfo,path,true);
  state.setForeignKeyInfo(fieldMetadata);
}",0.9923664122137404
146004,"private static List<ComplexTypeMetadata> _sortTypes(MetadataRepository repository,List<ComplexTypeMetadata> typesSubSet,final SortType sortType){
  final List<ComplexTypeMetadata> types=new ArrayList<ComplexTypeMetadata>();
  for (  ComplexTypeMetadata currentType : typesSubSet) {
    if (currentType instanceof ContainedComplexTypeMetadata) {
      types.add(currentType.getEntity());
    }
 else     if (!types.contains(currentType)) {
      types.add(currentType);
    }
  }
  final int typeNumber=types.size();
  byte[][] dependencyGraph=new byte[typeNumber][typeNumber];
  for (  final ComplexTypeMetadata type : types) {
    dependencyGraph[getId(type,types)]=type.accept(new DefaultMetadataVisitor<byte[]>(){
      final Set<TypeMetadata> processedTypes=new HashSet<TypeMetadata>();
      final Set<TypeMetadata> processedReferences=new HashSet<TypeMetadata>();
      final byte[] lineContent=new byte[typeNumber];
      @Override public byte[] visit(      ComplexTypeMetadata complexType){
        if (processedTypes.contains(complexType)) {
          return lineContent;
        }
 else {
          processedTypes.add(complexType);
        }
        if (complexType.isInstantiable()) {
          Collection<TypeMetadata> superTypes=complexType.getSuperTypes();
          for (          TypeMetadata superType : superTypes) {
            if (superType instanceof ComplexTypeMetadata) {
              int id=types.indexOf(superType);
              if (id >= 0) {
                lineContent[id]++;
              }
            }
          }
          super.visit(complexType);
        }
        if (complexType.isInstantiable()) {
          processedTypes.clear();
        }
        return lineContent;
      }
      @Override public byte[] visit(      ContainedTypeFieldMetadata containedField){
        ComplexTypeMetadata containedType=containedField.getContainedType();
        if (processedTypes.contains(containedType)) {
          return lineContent;
        }
 else {
          processedTypes.add(containedType);
        }
        containedType.accept(this);
        for (        ComplexTypeMetadata subType : containedType.getSubTypes()) {
          if (processedTypes.contains(subType)) {
            return lineContent;
          }
 else {
            processedTypes.add(subType);
            subType.accept(this);
          }
        }
        return lineContent;
      }
      @Override public byte[] visit(      ReferenceFieldMetadata referenceField){
        boolean isInherited=!referenceField.getDeclaringType().equals(referenceField.getContainingType());
        if (isInherited) {
          return lineContent;
        }
        ComplexTypeMetadata referencedType=referenceField.getReferencedType();
        if (!processedReferences.add(referencedType)) {
          return lineContent;
        }
        if (include(referenceField) && referenceField.isFKIntegrity()) {
          if (referencedType.isInstantiable()) {
            if (types.contains(referencedType) && (!processedTypes.contains(referencedType) || isReferencedBySelf(referenceField))) {
              lineContent[getId(referencedType,types)]++;
              if (sortType == SortType.LENIENT) {
                for (                ComplexTypeMetadata subType : referencedType.getSubTypes()) {
                  lineContent[getId(subType,types)]++;
                }
              }
            }
          }
        }
        return lineContent;
      }
      private boolean include(      FieldMetadata field){
        if (field == null) {
          return false;
        }
        ComplexTypeMetadata containingType=field.getContainingType();
        FieldMetadata containerField=containingType.getContainer();
switch (sortType) {
case STRICT:
          if (containerField != null) {
            return include(containerField) && field.isMandatory();
          }
 else {
            return field.isMandatory();
          }
case LENIENT:
        return true;
default :
      throw new NotImplementedException(""String_Node_Str"" + sortType + ""String_Node_Str"");
  }
}
private boolean isReferencedBySelf(ReferenceFieldMetadata referenceField){
  ComplexTypeMetadata containingType=referenceField.getContainingType();
  if (containingType instanceof ContainedComplexTypeMetadata) {
    containingType=containingType.getContainer().getContainingType();
  }
  return containingType.equals(referenceField.getReferencedType());
}
}
);
}
if (LOGGER.isTraceEnabled()) {
StringBuilder builder=logDependencyMatrix(dependencyGraph);
LOGGER.trace(""String_Node_Str"" + builder.toString());
}
List<ComplexTypeMetadata> sortedTypes=new LinkedList<ComplexTypeMetadata>();
Set<ComplexTypeMetadata> noIncomingEdges=new HashSet<ComplexTypeMetadata>();
int lineNumber=0;
for (byte[] line : dependencyGraph) {
if (!hasIncomingEdges(line)) {
noIncomingEdges.add(getType(types,lineNumber));
}
lineNumber++;
}
while (!noIncomingEdges.isEmpty()) {
Iterator<ComplexTypeMetadata> iterator=noIncomingEdges.iterator();
ComplexTypeMetadata type=iterator.next();
iterator.remove();
sortedTypes.add(type);
int columnNumber=getId(type,types);
for (int i=0; i < typeNumber; i++) {
int edge=dependencyGraph[i][columnNumber];
if (edge > 0) {
  dependencyGraph[i][columnNumber]-=edge;
  if (!hasIncomingEdges(dependencyGraph[i])) {
    noIncomingEdges.add(getType(types,i));
  }
}
}
}
if (LOGGER.isTraceEnabled()) {
StringBuilder builder=logDependencyMatrix(dependencyGraph);
LOGGER.trace(""String_Node_Str"" + builder.toString());
}
if (sortedTypes.size() < dependencyGraph.length) {
lineNumber=0;
List<List<ComplexTypeMetadata>> cycles=new LinkedList<List<ComplexTypeMetadata>>();
for (byte[] line : dependencyGraph) {
if (hasIncomingEdges(line)) {
  List<ComplexTypeMetadata> dependencyPath=new LinkedList<ComplexTypeMetadata>();
  int currentLineNumber=lineNumber;
  do {
    ComplexTypeMetadata type=getType(types,currentLineNumber);
    dependencyPath.add(type);
    InboundReferences incomingReferences=new InboundReferences(type);
    Set<ReferenceFieldMetadata> incomingFields=repository.accept(incomingReferences);
    boolean hasMetDependency=false;
    for (    ReferenceFieldMetadata incomingField : incomingFields) {
      ComplexTypeMetadata containingType=repository.getComplexType(incomingField.getEntityTypeName());
      if (containingType != null) {
        int currentDependency=getId(containingType,types);
        if (hasIncomingEdges(dependencyGraph[currentDependency])) {
          dependencyGraph[currentLineNumber][currentDependency]--;
          currentLineNumber=currentDependency;
          hasMetDependency=true;
          break;
        }
      }
    }
    if (!hasMetDependency) {
      break;
    }
  }
 while (currentLineNumber != lineNumber);
  if (dependencyPath.size() >= 1) {
    dependencyPath.add(getType(types,lineNumber));
    cycles.add(dependencyPath);
  }
}
lineNumber++;
}
switch (sortType) {
case STRICT:
if (!cycles.isEmpty()) {
  Iterator<List<ComplexTypeMetadata>> cyclesIterator=cycles.iterator();
  Map<ComplexTypeMetadata,List<FieldMetadata>> cycleHints=new HashMap<ComplexTypeMetadata,List<FieldMetadata>>();
  while (cyclesIterator.hasNext()) {
    Iterator<ComplexTypeMetadata> dependencyPathIterator=cyclesIterator.next().iterator();
    ComplexTypeMetadata previous=null;
    while (dependencyPathIterator.hasNext()) {
      ComplexTypeMetadata currentType=dependencyPathIterator.next();
      ArrayList<FieldMetadata> fields=new ArrayList<FieldMetadata>();
      cycleHints.put(currentType,fields);
      if (previous != null) {
        Set<ReferenceFieldMetadata> inboundReferences=repository.accept(new InboundReferences(currentType));
        for (        ReferenceFieldMetadata inboundReference : inboundReferences) {
          ComplexTypeMetadata entity=repository.getComplexType(inboundReference.getEntityTypeName());
          if (entity != null) {
            fields.add(inboundReference);
          }
        }
      }
      previous=currentType;
    }
  }
  throw new CircularDependencyException(cycleHints);
}
case LENIENT:
for (List<ComplexTypeMetadata> cycle : cycles) {
cycle.remove(cycle.size() - 1);
for (ComplexTypeMetadata cycleElement : cycle) {
  if (!sortedTypes.contains(cycleElement)) {
    sortedTypes.add(cycleElement);
  }
}
}
break;
default :
throw new NotImplementedException(""String_Node_Str"" + sortType + ""String_Node_Str"");
}
}
return sortedTypes;
}","private static List<ComplexTypeMetadata> _sortTypes(MetadataRepository repository,List<ComplexTypeMetadata> typesSubSet,final SortType sortType){
  final List<ComplexTypeMetadata> types=new ArrayList<ComplexTypeMetadata>();
  for (  ComplexTypeMetadata currentType : typesSubSet) {
    if (currentType instanceof ContainedComplexTypeMetadata) {
      types.add(currentType.getEntity());
    }
 else     if (!types.contains(currentType)) {
      types.add(currentType);
    }
  }
  final int typeNumber=types.size();
  byte[][] dependencyGraph=new byte[typeNumber][typeNumber];
  for (  final ComplexTypeMetadata type : types) {
    dependencyGraph[getId(type,types)]=type.accept(new DefaultMetadataVisitor<byte[]>(){
      final Set<TypeMetadata> processedTypes=new HashSet<TypeMetadata>();
      final Set<TypeMetadata> processedReferences=new HashSet<TypeMetadata>();
      final byte[] lineContent=new byte[typeNumber];
      @Override public byte[] visit(      ComplexTypeMetadata complexType){
        if (processedTypes.contains(complexType)) {
          return lineContent;
        }
 else {
          processedTypes.add(complexType);
        }
        if (complexType.isInstantiable()) {
          Collection<TypeMetadata> superTypes=complexType.getSuperTypes();
          for (          TypeMetadata superType : superTypes) {
            if (superType instanceof ComplexTypeMetadata) {
              int id=types.indexOf(superType);
              if (id >= 0) {
                lineContent[id]++;
              }
            }
          }
          super.visit(complexType);
        }
        if (complexType.isInstantiable()) {
          processedTypes.clear();
        }
        return lineContent;
      }
      @Override public byte[] visit(      ContainedTypeFieldMetadata containedField){
        ComplexTypeMetadata containedType=containedField.getContainedType();
        if (processedTypes.contains(containedType)) {
          return lineContent;
        }
 else {
          processedTypes.add(containedType);
        }
        containedType.accept(this);
        for (        ComplexTypeMetadata subType : containedType.getSubTypes()) {
          if (processedTypes.contains(subType)) {
            return lineContent;
          }
 else {
            processedTypes.add(subType);
            subType.accept(this);
          }
        }
        return lineContent;
      }
      @Override public byte[] visit(      ReferenceFieldMetadata referenceField){
        boolean isInherited=!referenceField.getDeclaringType().equals(referenceField.getContainingType());
        if (isInherited) {
          return lineContent;
        }
        ComplexTypeMetadata referencedType=referenceField.getReferencedType();
        if (!processedReferences.add(referencedType)) {
          return lineContent;
        }
        if (include(referenceField) && referenceField.isFKIntegrity()) {
          if (referencedType.isInstantiable()) {
            if (types.contains(referencedType) && (!processedTypes.contains(referencedType) || isReferencedBySelf(referenceField))) {
              lineContent[getId(referencedType,types)]++;
              if (sortType == SortType.LENIENT) {
                for (                ComplexTypeMetadata subType : referencedType.getSubTypes()) {
                  lineContent[getId(subType,types)]++;
                }
              }
            }
          }
        }
        return lineContent;
      }
      private boolean include(      FieldMetadata field){
        if (field == null) {
          return false;
        }
        ComplexTypeMetadata containingType=field.getContainingType();
        FieldMetadata containerField=containingType.getContainer();
switch (sortType) {
case STRICT:
          if (containerField != null) {
            return include(containerField) && field.isMandatory();
          }
 else {
            return field.isMandatory();
          }
case LENIENT:
        return true;
default :
      throw new NotImplementedException(""String_Node_Str"" + sortType + ""String_Node_Str"");
  }
}
private boolean isReferencedBySelf(ReferenceFieldMetadata referenceField){
  ComplexTypeMetadata containingType=referenceField.getContainingType();
  if (containingType instanceof ContainedComplexTypeMetadata) {
    containingType=containingType.getContainer().getContainingType();
  }
  return containingType.equals(referenceField.getReferencedType());
}
}
);
}
if (LOGGER.isTraceEnabled()) {
StringBuilder builder=logDependencyMatrix(dependencyGraph);
LOGGER.trace(""String_Node_Str"" + builder.toString());
}
List<ComplexTypeMetadata> sortedTypes=new LinkedList<ComplexTypeMetadata>();
Set<ComplexTypeMetadata> noIncomingEdges=new HashSet<ComplexTypeMetadata>();
int lineNumber=0;
for (byte[] line : dependencyGraph) {
if (!hasIncomingEdges(line)) {
noIncomingEdges.add(getType(types,lineNumber));
}
lineNumber++;
}
while (!noIncomingEdges.isEmpty()) {
Iterator<ComplexTypeMetadata> iterator=noIncomingEdges.iterator();
ComplexTypeMetadata type=iterator.next();
iterator.remove();
sortedTypes.add(type);
int columnNumber=getId(type,types);
for (int i=0; i < typeNumber; i++) {
int edge=dependencyGraph[i][columnNumber];
if (edge > 0) {
  dependencyGraph[i][columnNumber]-=edge;
  if (!hasIncomingEdges(dependencyGraph[i])) {
    noIncomingEdges.add(getType(types,i));
  }
}
}
}
if (LOGGER.isTraceEnabled()) {
StringBuilder builder=logDependencyMatrix(dependencyGraph);
LOGGER.trace(""String_Node_Str"" + builder.toString());
}
if (sortedTypes.size() < dependencyGraph.length) {
lineNumber=0;
List<List<ComplexTypeMetadata>> cycles=new LinkedList<List<ComplexTypeMetadata>>();
for (byte[] line : dependencyGraph) {
if (hasIncomingEdges(line)) {
  List<ComplexTypeMetadata> dependencyPath=new LinkedList<ComplexTypeMetadata>();
  int currentLineNumber=lineNumber;
  do {
    ComplexTypeMetadata type=getType(types,currentLineNumber);
    dependencyPath.add(type);
    InboundReferences incomingReferences=new InboundReferences(type);
    Set<ReferenceFieldMetadata> incomingFields=repository.accept(incomingReferences);
    boolean hasMetDependency=false;
    for (    ReferenceFieldMetadata incomingField : incomingFields) {
      ComplexTypeMetadata containingType=repository.getComplexType(incomingField.getEntityTypeName());
      if (containingType != null && containingType != type) {
        int currentDependency=getId(containingType,types);
        if (hasIncomingEdges(dependencyGraph[currentDependency])) {
          dependencyGraph[currentLineNumber][currentDependency]--;
          currentLineNumber=currentDependency;
          hasMetDependency=true;
          break;
        }
      }
    }
    if (!hasMetDependency) {
      break;
    }
  }
 while (currentLineNumber != lineNumber);
  if (dependencyPath.size() >= 1) {
    dependencyPath.add(getType(types,lineNumber));
    cycles.add(dependencyPath);
  }
}
lineNumber++;
}
switch (sortType) {
case STRICT:
if (!cycles.isEmpty()) {
  Iterator<List<ComplexTypeMetadata>> cyclesIterator=cycles.iterator();
  Map<ComplexTypeMetadata,List<FieldMetadata>> cycleHints=new HashMap<ComplexTypeMetadata,List<FieldMetadata>>();
  while (cyclesIterator.hasNext()) {
    Iterator<ComplexTypeMetadata> dependencyPathIterator=cyclesIterator.next().iterator();
    ComplexTypeMetadata previous=null;
    while (dependencyPathIterator.hasNext()) {
      ComplexTypeMetadata currentType=dependencyPathIterator.next();
      ArrayList<FieldMetadata> fields=new ArrayList<FieldMetadata>();
      cycleHints.put(currentType,fields);
      if (previous != null) {
        Set<ReferenceFieldMetadata> inboundReferences=repository.accept(new InboundReferences(currentType));
        for (        ReferenceFieldMetadata inboundReference : inboundReferences) {
          ComplexTypeMetadata entity=repository.getComplexType(inboundReference.getEntityTypeName());
          if (entity != null) {
            fields.add(inboundReference);
          }
        }
      }
      previous=currentType;
    }
  }
  throw new CircularDependencyException(cycleHints);
}
case LENIENT:
for (List<ComplexTypeMetadata> cycle : cycles) {
cycle.remove(cycle.size() - 1);
for (ComplexTypeMetadata cycleElement : cycle) {
  if (!sortedTypes.contains(cycleElement)) {
    sortedTypes.add(cycleElement);
  }
}
}
break;
default :
throw new NotImplementedException(""String_Node_Str"" + sortType + ""String_Node_Str"");
}
}
return sortedTypes;
}",0.9984531175630652
146005,"@Override public ValidationRule createValidationRule(){
  return ValidationFactory.getRule(this);
}","@Override public ValidationRule createValidationRule(){
  List<ValidationRule> rules=new LinkedList<ValidationRule>();
  rules.add(ValidationFactory.getRule(this));
  Collection<FieldMetadata> fields=fieldType.getFields();
  for (  FieldMetadata field : fields) {
    rules.add(ValidationFactory.getRule(field));
  }
  return new CompositeValidationRule(rules.toArray(new ValidationRule[rules.size()]));
}",0.365079365079365
146006,"CompositeValidationRule(ValidationRule... rules){
  this.rules=rules;
}","public CompositeValidationRule(ValidationRule... rules){
  this.rules=rules;
}",0.953020134228188
146007,"@Override public void validate(ValidationHandler handler){
  if (!superTypes.isEmpty()) {
    List<TypeMetadata> thisSuperTypes=new LinkedList<TypeMetadata>(superTypes);
    for (    TypeMetadata superType : thisSuperTypes) {
      if (isInstantiable() == superType.isInstantiable()) {
        if (superType instanceof ComplexTypeMetadata) {
          Collection<FieldMetadata> thisTypeKeyFields=getKeyFields();
          for (          FieldMetadata thisTypeKeyField : thisTypeKeyFields) {
            if (!((ComplexTypeMetadata)superType).hasField(thisTypeKeyField.getName())) {
              handler.error(superType,""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str""+ superType.getName()+ ""String_Node_Str"",superType.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),superType.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),superType.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_CANNOT_OVERRIDE_SUPER_TYPE_KEY);
            }
          }
        }
      }
    }
  }
  for (  FieldMetadata value : fieldMetadata.values()) {
    value.validate(handler);
  }
  for (  FieldMetadata keyField : keyFields.values()) {
    keyField.validate(handler);
    FieldMetadata frozenField=keyField.freeze(handler);
    if (frozenField.isMany()) {
      handler.error(frozenField,""String_Node_Str"",frozenField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),frozenField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),frozenField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FIELD_KEY_CANNOT_BE_REPEATABLE);
    }
    if (!frozenField.isMandatory()) {
      handler.error(frozenField,""String_Node_Str"",frozenField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),frozenField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),frozenField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FIELD_KEY_MUST_BE_MANDATORY);
    }
  }
  for (  FieldMetadata pkInfo : primaryKeyInfo) {
    if (!this.equals(pkInfo.getContainingType())) {
      handler.error(this,""String_Node_Str"",pkInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),pkInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),pkInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.PRIMARY_KEY_INFO_NOT_IN_ENTITY);
      continue;
    }
    int previousErrorCount=handler.getErrorCount();
    pkInfo.validate(handler);
    if (handler.getErrorCount() == previousErrorCount) {
      if (pkInfo.isMany()) {
        handler.error(this,""String_Node_Str"",pkInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),pkInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),pkInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.PRIMARY_KEY_INFO_CANNOT_BE_REPEATABLE);
        continue;
      }
      if (!isPrimitiveTypeField(pkInfo)) {
        handler.warning(this,""String_Node_Str"",pkInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),pkInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),pkInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.PRIMARY_KEY_INFO_TYPE_NOT_PRIMITIVE);
      }
    }
  }
  for (  FieldMetadata lookupField : lookupFields) {
    int errorCount=handler.getErrorCount();
    lookupField.validate(handler);
    if (handler.getErrorCount() > errorCount) {
      continue;
    }
    if (!this.equals(lookupField.getContainingType())) {
      handler.error(this,""String_Node_Str"",lookupField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),lookupField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),lookupField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.LOOKUP_FIELD_NOT_IN_ENTITY);
      continue;
    }
    lookupField.getContainingType().freeze(handler);
    if (lookupField.isKey()) {
      handler.error(this,""String_Node_Str"",lookupField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),lookupField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),lookupField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.LOOKUP_FIELD_CANNOT_BE_KEY);
      continue;
    }
    lookupField.validate(handler);
    if (!isPrimitiveTypeField(lookupField)) {
      handler.error(this,""String_Node_Str"",lookupField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),lookupField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),lookupField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.LOOKUP_FIELD_MUST_BE_SIMPLE_TYPE);
    }
  }
}","@Override public void validate(ValidationHandler handler){
  if (isValidated) {
    return;
  }
  int originalErrorCount=handler.getErrorCount();
  if (!superTypes.isEmpty()) {
    List<TypeMetadata> thisSuperTypes=new LinkedList<TypeMetadata>(superTypes);
    for (    TypeMetadata superType : thisSuperTypes) {
      if (isInstantiable() == superType.isInstantiable()) {
        if (superType instanceof ComplexTypeMetadata) {
          Collection<FieldMetadata> thisTypeKeyFields=getKeyFields();
          for (          FieldMetadata thisTypeKeyField : thisTypeKeyFields) {
            if (!((ComplexTypeMetadata)superType).hasField(thisTypeKeyField.getName())) {
              handler.error(superType,""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str""+ superType.getName()+ ""String_Node_Str"",superType.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),superType.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),superType.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_CANNOT_OVERRIDE_SUPER_TYPE_KEY);
            }
          }
        }
      }
    }
  }
  for (  FieldMetadata value : fieldMetadata.values()) {
    value.validate(handler);
  }
  for (  FieldMetadata keyField : keyFields.values()) {
    int errorCount=handler.getErrorCount();
    keyField.validate(handler);
    if (handler.getErrorCount() > errorCount) {
      continue;
    }
    FieldMetadata frozenField=keyField.freeze(handler);
    if (frozenField.isMany()) {
      handler.error(frozenField,""String_Node_Str"",frozenField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),frozenField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),frozenField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FIELD_KEY_CANNOT_BE_REPEATABLE);
    }
    if (!frozenField.isMandatory()) {
      handler.error(frozenField,""String_Node_Str"",frozenField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),frozenField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),frozenField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FIELD_KEY_MUST_BE_MANDATORY);
    }
  }
  for (  FieldMetadata pkInfo : primaryKeyInfo) {
    if (!this.equals(pkInfo.getContainingType())) {
      handler.error(this,""String_Node_Str"",pkInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),pkInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),pkInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.PRIMARY_KEY_INFO_NOT_IN_ENTITY);
      continue;
    }
    int previousErrorCount=handler.getErrorCount();
    pkInfo.validate(handler);
    if (handler.getErrorCount() == previousErrorCount) {
      if (pkInfo.isMany()) {
        handler.error(this,""String_Node_Str"",pkInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),pkInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),pkInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.PRIMARY_KEY_INFO_CANNOT_BE_REPEATABLE);
        continue;
      }
      if (!isPrimitiveTypeField(pkInfo)) {
        handler.warning(this,""String_Node_Str"",pkInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),pkInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),pkInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.PRIMARY_KEY_INFO_TYPE_NOT_PRIMITIVE);
      }
    }
  }
  for (  FieldMetadata lookupField : lookupFields) {
    int errorCount=handler.getErrorCount();
    lookupField.validate(handler);
    if (handler.getErrorCount() > errorCount) {
      continue;
    }
    if (!this.equals(lookupField.getContainingType())) {
      handler.error(this,""String_Node_Str"",lookupField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),lookupField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),lookupField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.LOOKUP_FIELD_NOT_IN_ENTITY);
      continue;
    }
    if (handler.getErrorCount() == originalErrorCount) {
      lookupField.getContainingType().freeze(handler);
      if (lookupField.isKey()) {
        handler.error(this,""String_Node_Str"",lookupField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),lookupField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),lookupField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.LOOKUP_FIELD_CANNOT_BE_KEY);
        continue;
      }
      lookupField.validate(handler);
      if (!isPrimitiveTypeField(lookupField)) {
        handler.error(this,""String_Node_Str"",lookupField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),lookupField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),lookupField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.LOOKUP_FIELD_MUST_BE_SIMPLE_TYPE);
      }
    }
  }
  isValidated=true;
}",0.9674639086403792
146008,"@Override public void error(FieldMetadata field,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  if (error == ValidationError.TYPE_DOES_NOT_EXIST) {
    if (lineNumber < 0) {
      handler.error(fieldMetadata,message,xmlElement,line,column,error);
    }
 else {
      handler.error(fieldMetadata,message,element,lineNumber,columnNumber,error);
    }
  }
 else {
    handler.error(field,message,xmlElement,line,column,error);
  }
}","@Override public void error(FieldMetadata field,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  if (error == ValidationError.TYPE_DOES_NOT_EXIST || error == ValidationError.TYPE_DOES_NOT_OWN_FIELD) {
    if (lineNumber < 0) {
      handler.error(fieldMetadata,message,xmlElement,line,column,error);
    }
 else {
      handler.error(fieldMetadata,message,element,lineNumber,columnNumber,error);
    }
  }
 else {
    handler.error(field,message,xmlElement,line,column,error);
  }
}",0.9475806451612904
146009,"@Override public FieldMetadata freeze(ValidationHandler handler){
  if (frozenField != null) {
    return frozenField;
  }
  ComplexTypeMetadata type;
  if (containingType != null) {
    type=repository.getComplexType(containingType.getName());
  }
 else {
    type=(ComplexTypeMetadata)containingField.getType();
  }
  if (type == null) {
    Integer line=this.getData(MetadataRepository.XSD_LINE_NUMBER);
    Integer column=this.getData(MetadataRepository.XSD_COLUMN_NUMBER);
    Element xmlElement=this.getData(MetadataRepository.XSD_DOM_ELEMENT);
    handler.error(this,this.getContainingType().getName() + ""String_Node_Str"" + this.getName()+ ""String_Node_Str"",xmlElement,line,column,ValidationError.TYPE_DOES_NOT_EXIST);
    return null;
  }
  frozenField=type.getField(fieldName);
  Set<Map.Entry<String,Object>> data=additionalData.entrySet();
  for (  Map.Entry<String,Object> currentData : data) {
    frozenField.setData(currentData.getKey(),currentData.getValue());
  }
  return frozenField;
}","@Override public FieldMetadata freeze(ValidationHandler handler){
  if (frozenField != null) {
    return frozenField;
  }
  ComplexTypeMetadata type;
  if (containingType != null) {
    type=repository.getComplexType(containingType.getName());
  }
 else {
    type=(ComplexTypeMetadata)containingField.getType();
  }
  if (type == null) {
    Integer line=this.getData(MetadataRepository.XSD_LINE_NUMBER);
    Integer column=this.getData(MetadataRepository.XSD_COLUMN_NUMBER);
    Element xmlElement=this.getData(MetadataRepository.XSD_DOM_ELEMENT);
    handler.error(this,this.getContainingType().getName() + ""String_Node_Str"" + this.getName()+ ""String_Node_Str"",xmlElement,line,column,ValidationError.TYPE_DOES_NOT_EXIST);
    return null;
  }
  if (!type.hasField(fieldName)) {
    return null;
  }
  frozenField=type.getField(fieldName);
  Set<Map.Entry<String,Object>> data=additionalData.entrySet();
  for (  Map.Entry<String,Object> currentData : data) {
    frozenField.setData(currentData.getKey(),currentData.getValue());
  }
  return frozenField;
}",0.9728682170542636
146010,"@Override public FieldMetadata freeze(ValidationHandler handler){
  if (frozenField != null) {
    return frozenField;
  }
  ComplexTypeMetadata type=(ComplexTypeMetadata)repository.getType(typeName);
  if (type == null) {
    type=(ComplexTypeMetadata)repository.getNonInstantiableType(repository.getUserNamespace(),typeName);
  }
  if (type == null) {
    handler.fatal((TypeMetadata)null,""String_Node_Str"" + typeName + ""String_Node_Str"",null,-1,-1,ValidationError.TYPE_DOES_NOT_EXIST);
    return this;
  }
  Collection<FieldMetadata> keyFields=type.getKeyFields();
  if (fieldName == null) {
    if (keyFields.size() == 1) {
      frozenField=keyFields.iterator().next();
    }
 else {
      frozenField=new CompoundFieldMetadata(keyFields.toArray(new FieldMetadata[keyFields.size()]));
    }
  }
 else {
    frozenField=type.getField(fieldName);
  }
  Set<Map.Entry<String,Object>> data=additionalData.entrySet();
  for (  Map.Entry<String,Object> currentData : data) {
    frozenField.setData(currentData.getKey(),currentData.getValue());
  }
  return frozenField;
}","@Override public FieldMetadata freeze(ValidationHandler handler){
  if (frozenField != null) {
    return frozenField;
  }
  ComplexTypeMetadata type=(ComplexTypeMetadata)repository.getType(typeName);
  if (type == null) {
    type=(ComplexTypeMetadata)repository.getNonInstantiableType(repository.getUserNamespace(),typeName);
  }
  if (type == null) {
    handler.fatal((TypeMetadata)null,""String_Node_Str"" + typeName + ""String_Node_Str"",null,-1,-1,ValidationError.TYPE_DOES_NOT_EXIST);
    return this;
  }
  Collection<FieldMetadata> keyFields=type.getKeyFields();
  if (fieldName == null) {
    if (keyFields.size() == 1) {
      frozenField=keyFields.iterator().next();
    }
 else {
      frozenField=new CompoundFieldMetadata(keyFields.toArray(new FieldMetadata[keyFields.size()]));
    }
  }
 else {
    if (!type.hasField(fieldName)) {
      handler.error(this,""String_Node_Str"" + typeName + ""String_Node_Str""+ fieldName+ ""String_Node_Str"",type.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),type.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),type.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_DOES_NOT_OWN_FIELD);
      return this;
    }
    frozenField=type.getField(fieldName);
  }
  Set<Map.Entry<String,Object>> data=additionalData.entrySet();
  for (  Map.Entry<String,Object> currentData : data) {
    frozenField.setData(currentData.getKey(),currentData.getValue());
  }
  return frozenField;
}",0.8481012658227848
146011,"@Override public void validate(ValidationHandler handler){
  ComplexTypeMetadata type=(ComplexTypeMetadata)repository.getType(typeName);
  if (type == null) {
    type=(ComplexTypeMetadata)repository.getNonInstantiableType(repository.getUserNamespace(),typeName);
  }
  if (type == null) {
    handler.error(this,""String_Node_Str"" + typeName + ""String_Node_Str"",(Element)additionalData.get(MetadataRepository.XSD_DOM_ELEMENT),(Integer)additionalData.get(MetadataRepository.XSD_LINE_NUMBER),(Integer)additionalData.get(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_DOES_NOT_EXIST);
    return;
  }
  Collection<FieldMetadata> keyFields=type.getKeyFields();
  if (keyFields.isEmpty()) {
    handler.error(type,""String_Node_Str"" + typeName + ""String_Node_Str"",type.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),type.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),type.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_DOES_NOT_OWN_KEY);
  }
}","@Override public void validate(ValidationHandler handler){
  ComplexTypeMetadata type=(ComplexTypeMetadata)repository.getType(typeName);
  if (type == null) {
    type=(ComplexTypeMetadata)repository.getNonInstantiableType(repository.getUserNamespace(),typeName);
  }
  if (type == null) {
    handler.error(this,""String_Node_Str"" + typeName + ""String_Node_Str"",(Element)additionalData.get(MetadataRepository.XSD_DOM_ELEMENT),(Integer)additionalData.get(MetadataRepository.XSD_LINE_NUMBER),(Integer)additionalData.get(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_DOES_NOT_EXIST);
    return;
  }
  if (fieldName != null && !type.hasField(fieldName)) {
    handler.error(this,""String_Node_Str"" + type.getName() + ""String_Node_Str""+ fieldName+ ""String_Node_Str"",(Element)type.getData(MetadataRepository.XSD_DOM_ELEMENT),(Integer)type.getData(MetadataRepository.XSD_LINE_NUMBER),(Integer)type.getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_DOES_NOT_OWN_FIELD);
    return;
  }
  Collection<FieldMetadata> keyFields=type.getKeyFields();
  if (keyFields.isEmpty()) {
    handler.error(type,""String_Node_Str"" + typeName + ""String_Node_Str"",type.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),type.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),type.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_DOES_NOT_OWN_KEY);
  }
}",0.8327731092436975
146012,"private FieldMetadata createFieldMetadata(XSDElementDeclaration element,ComplexTypeMetadata containingType){
  String fieldName=element.getName();
  int minOccurs=((XSDParticle)element.getContainer()).getMinOccurs();
  int maxOccurs=((XSDParticle)element.getContainer()).getMaxOccurs();
  if (maxOccurs > 0 && minOccurs > maxOccurs) {
    throw new IllegalArgumentException(""String_Node_Str"" + element.getQName() + ""String_Node_Str""+ containingType+ ""String_Node_Str"");
  }
  boolean isMany=maxOccurs == -1 || maxOccurs > 1;
  XmlSchemaAnnotationProcessorState state=new XmlSchemaAnnotationProcessorState();
  try {
    XSDAnnotation annotation=element.getAnnotation();
    for (    XmlSchemaAnnotationProcessor processor : XML_ANNOTATIONS_PROCESSORS) {
      processor.process(this,containingType,annotation,state);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ containingType.getName()+ ""String_Node_Str"",e);
  }
  boolean isMandatory=minOccurs > 0;
  boolean isContained=false;
  boolean isReference=state.isReference();
  boolean fkIntegrity=state.isFkIntegrity();
  boolean fkIntegrityOverride=state.isFkIntegrityOverride();
  FieldMetadata foreignKeyInfo=state.getForeignKeyInfo();
  TypeMetadata fieldType=state.getFieldType();
  FieldMetadata referencedField=state.getReferencedField();
  TypeMetadata referencedType=state.getReferencedType();
  List<String> hideUsers=state.getHide();
  List<String> allowWriteUsers=state.getAllowWrite();
  if (foreignKeyInfo != null && fieldType == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ containingType.getName()+ ""String_Node_Str"");
  }
  XSDTypeDefinition schemaType=element.getType();
  if (schemaType instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition simpleSchemaType=(XSDSimpleTypeDefinition)schemaType;
    XSDSimpleTypeDefinition content=simpleSchemaType.getBaseTypeDefinition();
    if (schemaType.getQName() != null) {
      fieldType=new SoftTypeRef(this,schemaType.getTargetNamespace(),schemaType.getName(),false);
      fieldType.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
      fieldType.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
      fieldType.setData(XSD_DOM_ELEMENT,element.getElement());
    }
    if (isReference) {
      ReferenceFieldMetadata referenceField=new ReferenceFieldMetadata(containingType,false,isMany,isMandatory,fieldName,(ComplexTypeMetadata)referencedType,referencedField,foreignKeyInfo,fkIntegrity,fkIntegrityOverride,fieldType,allowWriteUsers,hideUsers);
      referenceField.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
      referenceField.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
      referenceField.setData(XSD_DOM_ELEMENT,element.getElement());
      return referenceField;
    }
    if (content != null) {
      if (fieldType == null) {
        fieldType=new SoftTypeRef(this,content.getTargetNamespace(),content.getName(),false);
      }
      if (content.getFacets().size() > 0) {
        boolean isEnumeration=false;
        for (int i=0; i < content.getFacets().size(); i++) {
          XSDConstrainingFacet item=content.getFacets().get(i);
          if (item instanceof XSDEnumerationFacet) {
            isEnumeration=true;
          }
        }
        if (isEnumeration) {
          EnumerationFieldMetadata enumField=new EnumerationFieldMetadata(containingType,false,isMany,isMandatory,fieldName,fieldType,allowWriteUsers,hideUsers);
          enumField.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
          enumField.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
          enumField.setData(XSD_DOM_ELEMENT,element.getElement());
          return enumField;
        }
 else {
          FieldMetadata field=new SimpleTypeFieldMetadata(containingType,false,isMany,isMandatory,fieldName,fieldType,allowWriteUsers,hideUsers);
          field.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
          field.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
          field.setData(XSD_DOM_ELEMENT,element.getElement());
          return field;
        }
      }
 else {
        FieldMetadata field=new SimpleTypeFieldMetadata(containingType,false,isMany,isMandatory,fieldName,fieldType,allowWriteUsers,hideUsers);
        field.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
        field.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
        field.setData(XSD_DOM_ELEMENT,element.getElement());
        return field;
      }
    }
  }
  if (fieldType == null) {
    String qName=element.getType() == null ? null : element.getType().getQName();
    if (qName != null) {
      TypeMetadata metadata=getType(element.getType().getTargetNamespace(),element.getType().getName());
      if (metadata != null) {
        referencedType=new ContainedComplexTypeRef(currentTypeStack.peek(),targetNamespace,element.getName(),new SoftTypeRef(this,targetNamespace,schemaType.getName(),false));
        isContained=true;
      }
 else {
        if (schemaType == null) {
          throw new IllegalArgumentException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ containingType.getName()+ ""String_Node_Str"");
        }
        if (schemaType instanceof XSDComplexTypeDefinition) {
          referencedType=new ContainedComplexTypeRef(currentTypeStack.peek(),targetNamespace,element.getName(),new SoftTypeRef(this,targetNamespace,schemaType.getName(),false));
          isContained=true;
        }
 else         if (schemaType instanceof XSDSimpleTypeDefinition) {
          fieldType=new SoftTypeRef(this,schemaType.getTargetNamespace(),schemaType.getName(),false);
          XmlSchemaWalker.walk(schemaType,this);
        }
 else {
          throw new NotImplementedException(""String_Node_Str"" + schemaType.getClass() + ""String_Node_Str"");
        }
      }
    }
 else {
      isContained=true;
      XSDElementDeclaration refName=element.getResolvedElementDeclaration();
      if (schemaType != null) {
        referencedType=new ContainedComplexTypeMetadata(currentTypeStack.peek(),targetNamespace,ANONYMOUS_PREFIX + String.valueOf(anonymousCounter++));
        fieldType=referencedType;
        isContained=true;
        currentTypeStack.push((ComplexTypeMetadata)referencedType);
        XmlSchemaWalker.walk(schemaType,this);
        currentTypeStack.pop();
      }
 else       if (refName != null) {
        SoftTypeRef reference=new SoftTypeRef(this,refName.getTargetNamespace(),refName.getName(),true);
        referencedType=new ContainedComplexTypeRef(currentTypeStack.peek(),targetNamespace,element.getName(),reference);
        fieldType=referencedType;
      }
 else {
        throw new NotImplementedException();
      }
    }
  }
  if (isContained) {
    ContainedTypeFieldMetadata containedField=new ContainedTypeFieldMetadata(containingType,isMany,isMandatory,fieldName,(ContainedComplexTypeMetadata)referencedType,allowWriteUsers,hideUsers);
    containedField.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
    containedField.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
    containedField.setData(XSD_DOM_ELEMENT,element.getElement());
    return containedField;
  }
 else {
    FieldMetadata field=new SimpleTypeFieldMetadata(containingType,false,isMany,isMandatory,fieldName,fieldType,allowWriteUsers,hideUsers);
    field.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
    field.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
    field.setData(XSD_DOM_ELEMENT,element.getElement());
    return field;
  }
}","private FieldMetadata createFieldMetadata(XSDElementDeclaration element,ComplexTypeMetadata containingType){
  String fieldName=element.getName();
  int minOccurs=((XSDParticle)element.getContainer()).getMinOccurs();
  int maxOccurs=((XSDParticle)element.getContainer()).getMaxOccurs();
  if (maxOccurs > 0 && minOccurs > maxOccurs) {
    throw new IllegalArgumentException(""String_Node_Str"" + element.getQName() + ""String_Node_Str""+ containingType+ ""String_Node_Str"");
  }
  boolean isMany=maxOccurs == -1 || maxOccurs > 1;
  XmlSchemaAnnotationProcessorState state=new XmlSchemaAnnotationProcessorState();
  try {
    XSDAnnotation annotation=element.getAnnotation();
    for (    XmlSchemaAnnotationProcessor processor : XML_ANNOTATIONS_PROCESSORS) {
      processor.process(this,containingType,annotation,state);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ containingType.getName()+ ""String_Node_Str"",e);
  }
  boolean isMandatory=minOccurs > 0;
  boolean isContained=false;
  boolean isReference=state.isReference();
  boolean fkIntegrity=state.isFkIntegrity();
  boolean fkIntegrityOverride=state.isFkIntegrityOverride();
  FieldMetadata foreignKeyInfo=state.getForeignKeyInfo();
  TypeMetadata fieldType=state.getFieldType();
  FieldMetadata referencedField=state.getReferencedField();
  TypeMetadata referencedType=state.getReferencedType();
  List<String> hideUsers=state.getHide();
  List<String> allowWriteUsers=state.getAllowWrite();
  if (foreignKeyInfo != null && fieldType == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ containingType.getName()+ ""String_Node_Str"");
  }
  XSDTypeDefinition schemaType=element.getType();
  if (schemaType instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition simpleSchemaType=(XSDSimpleTypeDefinition)schemaType;
    XSDSimpleTypeDefinition content=simpleSchemaType.getBaseTypeDefinition();
    if (schemaType.getQName() != null) {
      fieldType=new SoftTypeRef(this,schemaType.getTargetNamespace(),schemaType.getName(),false);
      fieldType.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
      fieldType.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
      fieldType.setData(XSD_DOM_ELEMENT,element.getElement());
    }
    if (isReference) {
      ReferenceFieldMetadata referenceField=new ReferenceFieldMetadata(containingType,false,isMany,isMandatory,fieldName,(ComplexTypeMetadata)referencedType,referencedField,foreignKeyInfo,fkIntegrity,fkIntegrityOverride,fieldType,allowWriteUsers,hideUsers);
      referenceField.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
      referenceField.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
      referenceField.setData(XSD_DOM_ELEMENT,element.getElement());
      return referenceField;
    }
    if (content != null) {
      if (fieldType == null) {
        fieldType=new SimpleTypeMetadata(content.getTargetNamespace(),content.getName());
        EList<XSDConstrainingFacet> facets=simpleSchemaType.getFacetContents();
        for (        XSDConstrainingFacet currentFacet : facets) {
          if (currentFacet instanceof XSDMaxLengthFacet) {
            fieldType.setData(MetadataRepository.DATA_MAX_LENGTH,String.valueOf(((XSDMaxLengthFacet)currentFacet).getValue()));
          }
 else           if (LOGGER.isDebugEnabled()) {
            LOGGER.debug(""String_Node_Str"" + fieldName + ""String_Node_Str""+ currentFacet);
          }
        }
      }
      if (content.getFacets().size() > 0) {
        boolean isEnumeration=false;
        for (int i=0; i < content.getFacets().size(); i++) {
          XSDConstrainingFacet item=content.getFacets().get(i);
          if (item instanceof XSDEnumerationFacet) {
            isEnumeration=true;
          }
        }
        if (isEnumeration) {
          EnumerationFieldMetadata enumField=new EnumerationFieldMetadata(containingType,false,isMany,isMandatory,fieldName,fieldType,allowWriteUsers,hideUsers);
          enumField.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
          enumField.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
          enumField.setData(XSD_DOM_ELEMENT,element.getElement());
          return enumField;
        }
 else {
          FieldMetadata field=new SimpleTypeFieldMetadata(containingType,false,isMany,isMandatory,fieldName,fieldType,allowWriteUsers,hideUsers);
          field.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
          field.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
          field.setData(XSD_DOM_ELEMENT,element.getElement());
          return field;
        }
      }
 else {
        FieldMetadata field=new SimpleTypeFieldMetadata(containingType,false,isMany,isMandatory,fieldName,fieldType,allowWriteUsers,hideUsers);
        field.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
        field.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
        field.setData(XSD_DOM_ELEMENT,element.getElement());
        return field;
      }
    }
  }
  if (fieldType == null) {
    String qName=element.getType() == null ? null : element.getType().getQName();
    if (qName != null) {
      TypeMetadata metadata=getType(element.getType().getTargetNamespace(),element.getType().getName());
      if (metadata != null) {
        referencedType=new ContainedComplexTypeRef(currentTypeStack.peek(),targetNamespace,element.getName(),new SoftTypeRef(this,targetNamespace,schemaType.getName(),false));
        isContained=true;
      }
 else {
        if (schemaType == null) {
          throw new IllegalArgumentException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ containingType.getName()+ ""String_Node_Str"");
        }
        if (schemaType instanceof XSDComplexTypeDefinition) {
          referencedType=new ContainedComplexTypeRef(currentTypeStack.peek(),targetNamespace,element.getName(),new SoftTypeRef(this,targetNamespace,schemaType.getName(),false));
          isContained=true;
        }
 else         if (schemaType instanceof XSDSimpleTypeDefinition) {
          fieldType=new SoftTypeRef(this,schemaType.getTargetNamespace(),schemaType.getName(),false);
          XmlSchemaWalker.walk(schemaType,this);
        }
 else {
          throw new NotImplementedException(""String_Node_Str"" + schemaType.getClass() + ""String_Node_Str"");
        }
      }
    }
 else {
      isContained=true;
      XSDElementDeclaration refName=element.getResolvedElementDeclaration();
      if (schemaType != null) {
        referencedType=new ContainedComplexTypeMetadata(currentTypeStack.peek(),targetNamespace,ANONYMOUS_PREFIX + String.valueOf(anonymousCounter++));
        fieldType=referencedType;
        isContained=true;
        currentTypeStack.push((ComplexTypeMetadata)referencedType);
        XmlSchemaWalker.walk(schemaType,this);
        currentTypeStack.pop();
      }
 else       if (refName != null) {
        SoftTypeRef reference=new SoftTypeRef(this,refName.getTargetNamespace(),refName.getName(),true);
        referencedType=new ContainedComplexTypeRef(currentTypeStack.peek(),targetNamespace,element.getName(),reference);
        fieldType=referencedType;
      }
 else {
        throw new NotImplementedException();
      }
    }
  }
  if (isContained) {
    ContainedTypeFieldMetadata containedField=new ContainedTypeFieldMetadata(containingType,isMany,isMandatory,fieldName,(ContainedComplexTypeMetadata)referencedType,allowWriteUsers,hideUsers);
    containedField.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
    containedField.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
    containedField.setData(XSD_DOM_ELEMENT,element.getElement());
    return containedField;
  }
 else {
    FieldMetadata field=new SimpleTypeFieldMetadata(containingType,false,isMany,isMandatory,fieldName,fieldType,allowWriteUsers,hideUsers);
    field.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
    field.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
    field.setData(XSD_DOM_ELEMENT,element.getElement());
    return field;
  }
}",0.9608448616600792
146013,"@Override public void validate(ValidationHandler handler){
  if (isValidated) {
    return;
  }
  int originalErrorCount=handler.getErrorCount();
  if (!superTypes.isEmpty()) {
    List<TypeMetadata> thisSuperTypes=new LinkedList<TypeMetadata>(superTypes);
    for (    TypeMetadata superType : thisSuperTypes) {
      if (isInstantiable() == superType.isInstantiable()) {
        if (superType instanceof ComplexTypeMetadata) {
          Collection<FieldMetadata> thisTypeKeyFields=getKeyFields();
          for (          FieldMetadata thisTypeKeyField : thisTypeKeyFields) {
            if (!((ComplexTypeMetadata)superType).hasField(thisTypeKeyField.getName())) {
              handler.error(superType,""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str""+ superType.getName()+ ""String_Node_Str"",superType.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),superType.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),superType.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_CANNOT_OVERRIDE_SUPER_TYPE_KEY);
            }
          }
        }
      }
    }
  }
  for (  FieldMetadata value : fieldMetadata.values()) {
    value.validate(handler);
  }
  for (  FieldMetadata keyField : keyFields.values()) {
    int errorCount=handler.getErrorCount();
    keyField.validate(handler);
    if (handler.getErrorCount() > errorCount) {
      continue;
    }
    FieldMetadata frozenField=keyField.freeze(handler);
    if (frozenField.isMany()) {
      handler.error(frozenField,""String_Node_Str"",frozenField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),frozenField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),frozenField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FIELD_KEY_CANNOT_BE_REPEATABLE);
    }
    if (!frozenField.isMandatory()) {
      handler.error(frozenField,""String_Node_Str"",frozenField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),frozenField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),frozenField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FIELD_KEY_MUST_BE_MANDATORY);
    }
  }
  for (  FieldMetadata pkInfo : primaryKeyInfo) {
    if (!this.equals(pkInfo.getContainingType())) {
      handler.error(this,""String_Node_Str"",pkInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),pkInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),pkInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.PRIMARY_KEY_INFO_NOT_IN_ENTITY);
      continue;
    }
    int previousErrorCount=handler.getErrorCount();
    pkInfo.validate(handler);
    if (handler.getErrorCount() == previousErrorCount) {
      if (pkInfo.isMany()) {
        handler.error(this,""String_Node_Str"",pkInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),pkInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),pkInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.PRIMARY_KEY_INFO_CANNOT_BE_REPEATABLE);
        continue;
      }
      if (!isPrimitiveTypeField(pkInfo)) {
        handler.warning(this,""String_Node_Str"",pkInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),pkInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),pkInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.PRIMARY_KEY_INFO_TYPE_NOT_PRIMITIVE);
      }
    }
  }
  for (  FieldMetadata lookupField : lookupFields) {
    int errorCount=handler.getErrorCount();
    lookupField.validate(handler);
    if (handler.getErrorCount() > errorCount) {
      continue;
    }
    if (!this.equals(lookupField.getContainingType())) {
      handler.error(this,""String_Node_Str"",lookupField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),lookupField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),lookupField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.LOOKUP_FIELD_NOT_IN_ENTITY);
      continue;
    }
    if (handler.getErrorCount() == originalErrorCount) {
      lookupField.getContainingType().freeze(handler);
      if (lookupField.isKey()) {
        handler.error(this,""String_Node_Str"",lookupField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),lookupField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),lookupField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.LOOKUP_FIELD_CANNOT_BE_KEY);
        continue;
      }
      lookupField.validate(handler);
      if (!isPrimitiveTypeField(lookupField)) {
        handler.error(this,""String_Node_Str"",lookupField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),lookupField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),lookupField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.LOOKUP_FIELD_MUST_BE_SIMPLE_TYPE);
      }
    }
  }
  isValidated=true;
}","@Override public void validate(ValidationHandler handler){
  if (isValidated) {
    return;
  }
  int originalErrorCount=handler.getErrorCount();
  if (!superTypes.isEmpty()) {
    List<TypeMetadata> thisSuperTypes=new LinkedList<TypeMetadata>(superTypes);
    for (    TypeMetadata superType : thisSuperTypes) {
      if (isInstantiable() == superType.isInstantiable()) {
        if (superType instanceof ComplexTypeMetadata) {
          Collection<FieldMetadata> thisTypeKeyFields=getKeyFields();
          for (          FieldMetadata thisTypeKeyField : thisTypeKeyFields) {
            if (!((ComplexTypeMetadata)superType).hasField(thisTypeKeyField.getName())) {
              handler.error(superType,""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str""+ superType.getName()+ ""String_Node_Str"",superType.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),superType.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),superType.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_CANNOT_OVERRIDE_SUPER_TYPE_KEY);
            }
          }
        }
      }
    }
  }
  for (  FieldMetadata value : fieldMetadata.values()) {
    value.validate(handler);
  }
  for (  FieldMetadata keyField : keyFields.values()) {
    int errorCount=handler.getErrorCount();
    keyField.validate(handler);
    if (handler.getErrorCount() > errorCount) {
      continue;
    }
    FieldMetadata frozenField=keyField.freeze(handler);
    if (frozenField.isMany()) {
      handler.error(frozenField,""String_Node_Str"",frozenField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),frozenField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),frozenField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FIELD_KEY_CANNOT_BE_REPEATABLE);
    }
    if (!frozenField.isMandatory()) {
      handler.error(frozenField,""String_Node_Str"",frozenField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),frozenField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),frozenField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FIELD_KEY_MUST_BE_MANDATORY);
    }
  }
  for (  FieldMetadata pkInfo : primaryKeyInfo) {
    if (!this.equals(pkInfo.getContainingType())) {
      handler.error(this,""String_Node_Str"",pkInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),pkInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),pkInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.PRIMARY_KEY_INFO_NOT_IN_ENTITY);
      continue;
    }
    int previousErrorCount=handler.getErrorCount();
    pkInfo.validate(handler);
    if (handler.getErrorCount() == previousErrorCount) {
      if (pkInfo.isMany()) {
        handler.error(this,""String_Node_Str"",pkInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),pkInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),pkInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.PRIMARY_KEY_INFO_CANNOT_BE_REPEATABLE);
        continue;
      }
      if (!isPrimitiveTypeField(pkInfo)) {
        handler.warning(this,""String_Node_Str"",pkInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),pkInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),pkInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.PRIMARY_KEY_INFO_TYPE_NOT_PRIMITIVE);
      }
    }
  }
  for (  FieldMetadata lookupField : lookupFields) {
    int errorCount=handler.getErrorCount();
    lookupField.validate(handler);
    if (handler.getErrorCount() > errorCount) {
      continue;
    }
    ComplexTypeMetadata containingType=lookupField.freeze(handler).getContainingType();
    while (containingType instanceof ContainedComplexTypeMetadata) {
      containingType=((ContainedComplexTypeMetadata)containingType).getContainerType();
    }
    if (!this.equals(containingType)) {
      handler.error(this,""String_Node_Str"",lookupField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),lookupField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),lookupField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.LOOKUP_FIELD_NOT_IN_ENTITY);
      continue;
    }
    if (handler.getErrorCount() == originalErrorCount) {
      containingType.freeze(handler);
      if (lookupField.isKey()) {
        handler.error(this,""String_Node_Str"",lookupField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),lookupField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),lookupField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.LOOKUP_FIELD_CANNOT_BE_KEY);
        continue;
      }
      lookupField.validate(handler);
      if (!isPrimitiveTypeField(lookupField)) {
        handler.error(this,""String_Node_Str"",lookupField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),lookupField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),lookupField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.LOOKUP_FIELD_MUST_BE_SIMPLE_TYPE);
      }
    }
  }
  isValidated=true;
}",0.9652076318742986
146014,"@Override public void warning(TypeMetadata type,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  LOGGER.warn(message);
}","@Override public void warning(TypeMetadata type,String message,Element element,Integer lineNumber,Integer columnNumber,ValidationError error){
  LOGGER.warn(message);
}",0.9634146341463414
146015,"@Override public void error(TypeMetadata type,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  addErrorMessage(message,lineNumber,columnNumber,error);
  errorCount++;
}","@Override public void error(TypeMetadata type,String message,Element element,Integer lineNumber,Integer columnNumber,ValidationError error){
  addErrorMessage(message,lineNumber,columnNumber,error);
  errorCount++;
}",0.8962264150943396
146016,"@Override public void fatal(TypeMetadata type,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  throw new RuntimeException(message);
}","@Override public void fatal(TypeMetadata type,String message,Element element,Integer lineNumber,Integer columnNumber,ValidationError error){
  throw new RuntimeException(message);
}",0.9661016949152542
146017,"public void warning(FieldMetadata field,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  handler.warning(field,message,xmlElement,line,column,error);
}","public void warning(FieldMetadata field,String message,Element element,Integer lineNumber,Integer columnNumber,ValidationError error){
  handler.warning(field,message,xmlElement,line,column,error);
}",0.9692307692307692
146018,"@Override public void error(FieldMetadata field,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  if (error == ValidationError.TYPE_DOES_NOT_EXIST || error == ValidationError.TYPE_DOES_NOT_OWN_FIELD) {
    if (lineNumber < 0) {
      handler.error(fieldMetadata,message,xmlElement,line,column,error);
    }
 else {
      handler.error(fieldMetadata,message,element,lineNumber,columnNumber,error);
    }
  }
 else {
    handler.error(field,message,xmlElement,line,column,error);
  }
}","@Override public void error(FieldMetadata field,String message,Element element,Integer lineNumber,Integer columnNumber,ValidationError error){
  if (error == ValidationError.TYPE_DOES_NOT_EXIST || error == ValidationError.TYPE_DOES_NOT_OWN_FIELD) {
    if (lineNumber < 0) {
      handler.error(fieldMetadata,message,xmlElement,line,column,error);
    }
 else {
      handler.error(fieldMetadata,message,element,lineNumber,columnNumber,error);
    }
  }
 else {
    handler.error(field,message,xmlElement,line,column,error);
  }
}",0.9809885931558936
146019,"public void fatal(TypeMetadata type,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  handler.fatal(type,message,xmlElement,line,column,error);
}","public void fatal(TypeMetadata type,String message,Element element,Integer lineNumber,Integer columnNumber,ValidationError error){
  handler.fatal(type,message,xmlElement,line,column,error);
}",0.9680851063829788
146020,"@Override public void error(FieldMetadata field,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
}","@Override public void error(FieldMetadata field,String message,Element element,Integer lineNumber,Integer columnNumber,ValidationError error){
}",0.9571428571428572
146021,"@Override public void fatal(TypeMetadata type,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
}","@Override public void fatal(TypeMetadata type,String message,Element element,Integer lineNumber,Integer columnNumber,ValidationError error){
}",0.9565217391304348
146022,"@Override public void warning(TypeMetadata type,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
}","@Override public void warning(TypeMetadata type,String message,Element element,Integer lineNumber,Integer columnNumber,ValidationError error){
}",0.9571428571428572
146023,"@Override public void validate(final ValidationHandler handler){
  int errorCount=handler.getErrorCount();
  fieldType.validate(handler);
  if (handler.getErrorCount() > errorCount) {
    return;
  }
  TypeMetadata currentType=fieldType;
  if (!XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(currentType.getNamespace())) {
    while (!currentType.getSuperTypes().isEmpty()) {
      TypeMetadata superType=currentType.getSuperTypes().iterator().next();
      if (XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(superType.getNamespace()) && (""String_Node_Str"".equals(superType.getName()) || ""String_Node_Str"".equals(superType.getName()))) {
        break;
      }
      currentType=superType;
      errorCount=handler.getErrorCount();
      currentType.validate(handler);
      if (handler.getErrorCount() > errorCount) {
        return;
      }
    }
  }
  final Integer line=this.getData(MetadataRepository.XSD_LINE_NUMBER);
  final Integer column=this.getData(MetadataRepository.XSD_COLUMN_NUMBER);
  final Element xmlElement=this.getData(MetadataRepository.XSD_DOM_ELEMENT);
  if (!Types.STRING.equals(currentType.getName())) {
    handler.error(this,""String_Node_Str"" + getName() + ""String_Node_Str"",xmlElement,line,column,ValidationError.FOREIGN_KEY_NOT_STRING_TYPED);
  }
  if (fieldType.freeze(handler).getData(MetadataRepository.DATA_MAX_LENGTH) != null) {
    handler.warning(this,""String_Node_Str"" + getName() + ""String_Node_Str"",xmlElement,line,column,ValidationError.FOREIGN_KEY_USES_MAX_LENGTH);
  }
  int previousErrorCount=handler.getErrorCount();
  referencedField.validate(new LocationOverride(this,handler,xmlElement,line,column));
  if (handler.getErrorCount() > previousErrorCount) {
    return;
  }
  for (  FieldMetadata foreignKeyInfo : foreignKeyInfoFields) {
    errorCount=handler.getErrorCount();
    foreignKeyInfo.validate(handler);
    if (handler.getErrorCount() > errorCount) {
      continue;
    }
    if (!isPrimitiveTypeField(foreignKeyInfo)) {
      handler.warning(foreignKeyInfo,""String_Node_Str"",foreignKeyInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_INFO_NOT_PRIMITIVE_XSD_TYPED);
    }
    if (foreignKeyInfo.isMany()) {
      handler.warning(foreignKeyInfo,""String_Node_Str"",foreignKeyInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_INFO_REPEATABLE);
    }
  }
  freeze(handler);
  if (!referencedField.isKey()) {
    StringBuilder referencedTypePK=new StringBuilder();
    Iterator<FieldMetadata> keyFields=referencedType.getKeyFields().iterator();
    while (keyFields.hasNext()) {
      referencedTypePK.append('\'').append(keyFields.next().getName()).append('\'');
      if (keyFields.hasNext()) {
        referencedTypePK.append(' ');
      }
    }
    handler.warning(referencedField,""String_Node_Str"" + referencedTypePK + ""String_Node_Str"",this.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),this.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),this.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_SHOULD_POINT_TO_PRIMARY_KEY);
  }
}","@Override public void validate(final ValidationHandler handler){
  int errorCount=handler.getErrorCount();
  fieldType.validate(handler);
  if (handler.getErrorCount() > errorCount) {
    return;
  }
  TypeMetadata currentType=fieldType;
  if (!XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(currentType.getNamespace())) {
    while (!currentType.getSuperTypes().isEmpty()) {
      TypeMetadata superType=currentType.getSuperTypes().iterator().next();
      if (XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(superType.getNamespace()) && (""String_Node_Str"".equals(superType.getName()) || ""String_Node_Str"".equals(superType.getName()))) {
        break;
      }
      currentType=superType;
      errorCount=handler.getErrorCount();
      currentType.validate(handler);
      if (handler.getErrorCount() > errorCount) {
        return;
      }
    }
  }
  final Integer line=this.getData(MetadataRepository.XSD_LINE_NUMBER);
  final Integer column=this.getData(MetadataRepository.XSD_COLUMN_NUMBER);
  final Element xmlElement=this.getData(MetadataRepository.XSD_DOM_ELEMENT);
  if (!Types.STRING.equals(currentType.getName())) {
    handler.error(this,""String_Node_Str"" + getName() + ""String_Node_Str"",xmlElement,line,column,ValidationError.FOREIGN_KEY_NOT_STRING_TYPED);
  }
  if (fieldType.freeze(handler).getData(MetadataRepository.DATA_MAX_LENGTH) != null) {
    handler.warning(this,""String_Node_Str"" + getName() + ""String_Node_Str"",xmlElement,line,column,ValidationError.FOREIGN_KEY_USES_MAX_LENGTH);
  }
  int previousErrorCount=handler.getErrorCount();
  referencedField.validate(new LocationOverride(this,handler,xmlElement,line,column));
  if (handler.getErrorCount() > previousErrorCount) {
    return;
  }
  for (  FieldMetadata foreignKeyInfo : foreignKeyInfoFields) {
    errorCount=handler.getErrorCount();
    foreignKeyInfo.validate(handler);
    if (handler.getErrorCount() > errorCount) {
      continue;
    }
    if (!isPrimitiveTypeField(foreignKeyInfo)) {
      handler.warning(foreignKeyInfo,""String_Node_Str"",foreignKeyInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_INFO_NOT_PRIMITIVE_XSD_TYPED);
    }
    if (foreignKeyInfo.isMany()) {
      handler.warning(foreignKeyInfo,""String_Node_Str"",foreignKeyInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_INFO_REPEATABLE);
    }
    if (foreignKeyInfo.getContainingType() != null) {
      ComplexTypeMetadata foreignKeyInfoContainingType=foreignKeyInfo.freeze(handler).getContainingType();
      while (foreignKeyInfoContainingType instanceof ContainedComplexTypeMetadata) {
        foreignKeyInfoContainingType=((ContainedComplexTypeMetadata)foreignKeyInfoContainingType).getContainerType();
      }
      if (foreignKeyInfoContainingType.isInstantiable() && !foreignKeyInfoContainingType.equals(referencedType)) {
        handler.error(foreignKeyInfo,""String_Node_Str"",foreignKeyInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_INFO_NOT_REFERENCING_FK_TYPE);
      }
    }
  }
  freeze(handler);
  if (!referencedField.isKey()) {
    StringBuilder referencedTypePK=new StringBuilder();
    Iterator<FieldMetadata> keyFields=referencedType.getKeyFields().iterator();
    while (keyFields.hasNext()) {
      referencedTypePK.append('\'').append(keyFields.next().getName()).append('\'');
      if (keyFields.hasNext()) {
        referencedTypePK.append(' ');
      }
    }
    handler.warning(referencedField,""String_Node_Str"" + referencedTypePK + ""String_Node_Str"",this.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),this.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),this.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_SHOULD_POINT_TO_PRIMARY_KEY);
  }
}",0.8914738929279576
146024,"@Override public void validate(ValidationHandler handler){
  Integer lineNumberObject=(Integer)additionalData.get(MetadataRepository.XSD_LINE_NUMBER);
  Integer columnNumberObject=(Integer)additionalData.get(MetadataRepository.XSD_COLUMN_NUMBER);
  Element xmlElement=(Element)additionalData.get(MetadataRepository.XSD_DOM_ELEMENT);
  TypeMetadata validationType;
  if (containingType != null) {
    validationType=containingType;
  }
 else {
    int errorCount=handler.getErrorCount();
    containingField.validate(new LocationOverride(containingField,handler,xmlElement,lineNumberObject,columnNumberObject));
    if (handler.getErrorCount() > errorCount) {
      return;
    }
    validationType=containingField.getType();
  }
  if (lineNumberObject == null) {
    lineNumberObject=validationType.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER);
  }
  if (columnNumberObject == null) {
    columnNumberObject=validationType.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER);
  }
  if (lineNumberObject == null) {
    lineNumberObject=-1;
  }
  if (columnNumberObject == null) {
    columnNumberObject=-1;
  }
  TypeMetadata type=repository.getComplexType(validationType.getName());
  if (type == null) {
    type=repository.getNonInstantiableType(validationType.getNamespace(),validationType.getName());
  }
  if (type == null) {
    handler.error(this,""String_Node_Str"" + validationType.getName() + ""String_Node_Str"",xmlElement,lineNumberObject,columnNumberObject,ValidationError.TYPE_DOES_NOT_EXIST);
    return;
  }
  if (fieldName != null) {
    ComplexTypeMetadata complexTypeMetadata=(ComplexTypeMetadata)validationType;
    if (!complexTypeMetadata.hasField(fieldName)) {
      handler.error(this,""String_Node_Str"" + validationType.getName() + ""String_Node_Str""+ fieldName+ ""String_Node_Str"",xmlElement,lineNumberObject,columnNumberObject,ValidationError.TYPE_DOES_NOT_OWN_FIELD);
    }
  }
}","@Override public void validate(ValidationHandler handler){
  Integer lineNumberObject=(Integer)additionalData.get(MetadataRepository.XSD_LINE_NUMBER);
  Integer columnNumberObject=(Integer)additionalData.get(MetadataRepository.XSD_COLUMN_NUMBER);
  Element xmlElement=(Element)additionalData.get(MetadataRepository.XSD_DOM_ELEMENT);
  TypeMetadata validationType;
  if (containingType != null) {
    validationType=containingType;
  }
 else {
    int errorCount=handler.getErrorCount();
    containingField.validate(new LocationOverride(containingField,handler,xmlElement,lineNumberObject,columnNumberObject));
    if (handler.getErrorCount() > errorCount) {
      return;
    }
    validationType=containingField.getType();
  }
  if (lineNumberObject == null) {
    lineNumberObject=validationType.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER);
  }
  if (columnNumberObject == null) {
    columnNumberObject=validationType.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER);
  }
  if (lineNumberObject == null) {
    lineNumberObject=-1;
  }
  if (columnNumberObject == null) {
    columnNumberObject=-1;
  }
  if (fieldName != null) {
    ComplexTypeMetadata complexTypeMetadata=(ComplexTypeMetadata)validationType;
    int errorCount=handler.getErrorCount();
    complexTypeMetadata.validate(handler);
    if (handler.getErrorCount() > errorCount) {
      return;
    }
    if (!complexTypeMetadata.hasField(fieldName)) {
      handler.error(this,""String_Node_Str"" + validationType.getName() + ""String_Node_Str""+ fieldName+ ""String_Node_Str"",xmlElement,lineNumberObject,columnNumberObject,ValidationError.TYPE_DOES_NOT_OWN_FIELD);
    }
  }
}",0.7563779086066723
146025,"void warning(TypeMetadata type,String message,Element element,int lineNumber,int columnNumber,ValidationError error);","void warning(TypeMetadata type,String message,Element element,Integer lineNumber,Integer columnNumber,ValidationError error);",0.950413223140496
146026,"void error(TypeMetadata type,String message,Element element,int lineNumber,int columnNumber,ValidationError error);","void error(TypeMetadata type,String message,Element element,Integer lineNumber,Integer columnNumber,ValidationError error);",0.9495798319327732
146027,"void fatal(TypeMetadata type,String message,Element element,int lineNumber,int columnNumber,ValidationError error);","void fatal(TypeMetadata type,String message,Element element,Integer lineNumber,Integer columnNumber,ValidationError error);",0.9495798319327732
146028,"@Override public void validate(ValidationHandler handler){
  if (!superTypes.isEmpty()) {
    List<TypeMetadata> thisSuperTypes=new LinkedList<TypeMetadata>(superTypes);
    for (    TypeMetadata superType : thisSuperTypes) {
      if (isInstantiable() == superType.isInstantiable()) {
        if (superType instanceof ComplexTypeMetadata) {
          Collection<FieldMetadata> thisTypeKeyFields=getKeyFields();
          for (          FieldMetadata thisTypeKeyField : thisTypeKeyFields) {
            if (!((ComplexTypeMetadata)superType).hasField(thisTypeKeyField.getName())) {
              handler.error(superType,""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str""+ superType.getName()+ ""String_Node_Str"",superType.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),superType.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_CANNOT_OVERRIDE_SUPER_TYPE_KEY);
            }
          }
        }
      }
    }
  }
  for (  FieldMetadata value : fieldMetadata.values()) {
    value.validate(handler);
  }
  for (  FieldMetadata keyField : keyFields.values()) {
    if (keyField.isMany()) {
      handler.error(keyField,""String_Node_Str"",keyField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),keyField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FIELD_KEY_CANNOT_BE_REPEATABLE);
    }
  }
  for (  FieldMetadata pkInfo : primaryKeyInfo) {
    if (!this.equals(pkInfo.getContainingType())) {
      handler.error(pkInfo,""String_Node_Str"",pkInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),pkInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.PRIMARY_KEY_INFO_NOT_IN_ENTITY);
      continue;
    }
    int previousErrorCount=handler.getErrorCount();
    pkInfo.validate(handler);
    if (handler.getErrorCount() == previousErrorCount) {
      if (pkInfo.isMany()) {
        handler.error(pkInfo,""String_Node_Str"",pkInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),pkInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.PRIMARY_KEY_INFO_CANNOT_BE_REPEATABLE);
        continue;
      }
      if (!isPrimitiveTypeField(pkInfo)) {
        handler.warning(pkInfo,""String_Node_Str"",pkInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),pkInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.PRIMARY_KEY_INFO_TYPE_NOT_PRIMITIVE);
      }
    }
  }
  for (  FieldMetadata lookupField : lookupFields) {
    int errorCount=handler.getErrorCount();
    lookupField.validate(handler);
    if (handler.getErrorCount() > errorCount) {
      continue;
    }
    if (!this.equals(lookupField.getContainingType())) {
      handler.error(lookupField,""String_Node_Str"",lookupField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),lookupField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.LOOKUP_FIELD_NOT_IN_ENTITY);
      continue;
    }
    if (lookupField.isKey()) {
      handler.error(lookupField,""String_Node_Str"",lookupField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),lookupField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.LOOKUP_FIELD_CANNOT_BE_KEY);
      continue;
    }
    lookupField.validate(handler);
    if (!isPrimitiveTypeField(lookupField)) {
      handler.error(lookupField,""String_Node_Str"",lookupField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),lookupField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.LOOKUP_FIELD_MUST_BE_SIMPLE_TYPE);
    }
  }
}","@Override public void validate(ValidationHandler handler){
  if (!superTypes.isEmpty()) {
    List<TypeMetadata> thisSuperTypes=new LinkedList<TypeMetadata>(superTypes);
    for (    TypeMetadata superType : thisSuperTypes) {
      if (isInstantiable() == superType.isInstantiable()) {
        if (superType instanceof ComplexTypeMetadata) {
          Collection<FieldMetadata> thisTypeKeyFields=getKeyFields();
          for (          FieldMetadata thisTypeKeyField : thisTypeKeyFields) {
            if (!((ComplexTypeMetadata)superType).hasField(thisTypeKeyField.getName())) {
              handler.error(superType,""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str""+ superType.getName()+ ""String_Node_Str"",superType.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),superType.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),superType.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_CANNOT_OVERRIDE_SUPER_TYPE_KEY);
            }
          }
        }
      }
    }
  }
  for (  FieldMetadata value : fieldMetadata.values()) {
    value.validate(handler);
  }
  for (  FieldMetadata keyField : keyFields.values()) {
    if (keyField.isMany()) {
      handler.error(keyField,""String_Node_Str"",keyField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),keyField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),keyField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FIELD_KEY_CANNOT_BE_REPEATABLE);
    }
  }
  for (  FieldMetadata pkInfo : primaryKeyInfo) {
    if (!this.equals(pkInfo.getContainingType())) {
      handler.error(this,""String_Node_Str"",pkInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),pkInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),pkInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.PRIMARY_KEY_INFO_NOT_IN_ENTITY);
      continue;
    }
    int previousErrorCount=handler.getErrorCount();
    pkInfo.validate(handler);
    if (handler.getErrorCount() == previousErrorCount) {
      if (pkInfo.isMany()) {
        handler.error(this,""String_Node_Str"",pkInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),pkInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),pkInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.PRIMARY_KEY_INFO_CANNOT_BE_REPEATABLE);
        continue;
      }
      if (!isPrimitiveTypeField(pkInfo)) {
        handler.warning(this,""String_Node_Str"",pkInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),pkInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),pkInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.PRIMARY_KEY_INFO_TYPE_NOT_PRIMITIVE);
      }
    }
  }
  for (  FieldMetadata lookupField : lookupFields) {
    int errorCount=handler.getErrorCount();
    lookupField.validate(handler);
    if (handler.getErrorCount() > errorCount) {
      continue;
    }
    if (!this.equals(lookupField.getContainingType())) {
      handler.error(this,""String_Node_Str"",lookupField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),lookupField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),lookupField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.LOOKUP_FIELD_NOT_IN_ENTITY);
      continue;
    }
    if (lookupField.isKey()) {
      handler.error(this,""String_Node_Str"",lookupField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),lookupField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),lookupField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.LOOKUP_FIELD_CANNOT_BE_KEY);
      continue;
    }
    lookupField.validate(handler);
    if (!isPrimitiveTypeField(lookupField)) {
      handler.error(this,""String_Node_Str"",lookupField.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),lookupField.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),lookupField.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.LOOKUP_FIELD_MUST_BE_SIMPLE_TYPE);
    }
  }
}",0.9235474006116208
146029,"@Override public void warning(TypeMetadata type,String message,int lineNumber,int columnNumber,ValidationError error){
  LOGGER.warn(message);
}","@Override public void warning(TypeMetadata type,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  LOGGER.warn(message);
}",0.9473684210526316
146030,"@Override public void error(TypeMetadata type,String message,int lineNumber,int columnNumber,ValidationError error){
  addErrorMessage(message,lineNumber,columnNumber,error);
  errorCount++;
}","@Override public void error(TypeMetadata type,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  addErrorMessage(message,lineNumber,columnNumber,error);
  errorCount++;
}",0.96
146031,"@Override public void fatal(TypeMetadata type,String message,int lineNumber,int columnNumber,ValidationError error){
  throw new RuntimeException(message);
}","@Override public void fatal(TypeMetadata type,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  throw new RuntimeException(message);
}",0.9515151515151516
146032,"/** 
 * Validates the field: performs assertions on content specific to MDM (this method should not raise XSD compliance issues).
 * @param handler A {@link ValidationHandler} to be used for error / warning reporting.
 * @see ValidationHandler#error(FieldMetadata,String,int,int,ValidationError)
 */
void validate(ValidationHandler handler);","/** 
 * Validates the field: performs assertions on content specific to MDM (this method should not raise XSD compliance issues).
 * @param handler A {@link ValidationHandler} to be used for error / warning reporting.
 * @see ValidationHandler#error(FieldMetadata,String,org.w3c.dom.Element,int,int,ValidationError)
 */
void validate(ValidationHandler handler);",0.9715099715099716
146033,"private static void resolveAdditionalSuperTypes(MetadataRepository repository,ValidationHandler handler){
  Collection<ComplexTypeMetadata> types=repository.getUserComplexTypes();
  for (  TypeMetadata current : types) {
    String complexTypeName=current.getData(COMPLEX_TYPE_NAME);
    if (complexTypeName != null) {
      TypeMetadata nonInstantiableType=repository.getNonInstantiableType(USER_NAMESPACE,complexTypeName);
      if (!nonInstantiableType.getSuperTypes().isEmpty()) {
        if (nonInstantiableType.getSuperTypes().size() > 1) {
          handler.error(nonInstantiableType,""String_Node_Str"",nonInstantiableType.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),nonInstantiableType.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.MULTIPLE_INHERITANCE_NOT_ALLOWED);
        }
        TypeMetadata superType=nonInstantiableType.getSuperTypes().iterator().next();
        ComplexTypeMetadata entitySuperType=null;
        for (        TypeMetadata entity : types) {
          if (superType.getName().equals(entity.getData(COMPLEX_TYPE_NAME))) {
            entitySuperType=(ComplexTypeMetadata)entity;
            break;
          }
        }
        if (entitySuperType != null) {
          current.addSuperType(entitySuperType,repository);
        }
      }
    }
  }
}","private static void resolveAdditionalSuperTypes(MetadataRepository repository,ValidationHandler handler){
  Collection<ComplexTypeMetadata> types=repository.getUserComplexTypes();
  for (  TypeMetadata current : types) {
    String complexTypeName=current.getData(COMPLEX_TYPE_NAME);
    if (complexTypeName != null) {
      TypeMetadata nonInstantiableType=repository.getNonInstantiableType(USER_NAMESPACE,complexTypeName);
      if (!nonInstantiableType.getSuperTypes().isEmpty()) {
        if (nonInstantiableType.getSuperTypes().size() > 1) {
          handler.error(nonInstantiableType,""String_Node_Str"",nonInstantiableType.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),nonInstantiableType.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),nonInstantiableType.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.MULTIPLE_INHERITANCE_NOT_ALLOWED);
        }
        TypeMetadata superType=nonInstantiableType.getSuperTypes().iterator().next();
        ComplexTypeMetadata entitySuperType=null;
        for (        TypeMetadata entity : types) {
          if (superType.getName().equals(entity.getData(COMPLEX_TYPE_NAME))) {
            entitySuperType=(ComplexTypeMetadata)entity;
            break;
          }
        }
        if (entitySuperType != null) {
          current.addSuperType(entitySuperType,repository);
        }
      }
    }
  }
}",0.97291280148423
146034,"@Override public void error(FieldMetadata field,String message,int lineNumber,int columnNumber,ValidationError error){
}","@Override public void error(FieldMetadata field,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
}",0.9375
146035,"@Override public void fatal(TypeMetadata type,String message,int lineNumber,int columnNumber,ValidationError error){
}","@Override public void fatal(TypeMetadata type,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
}",0.9365079365079364
146036,"public void load(InputStream inputStream,ValidationHandler handler){
  if (inputStream == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(Resource.OPTION_SAVE_ONLY_IF_CHANGED,Resource.OPTION_SAVE_ONLY_IF_CHANGED_MEMORY_BUFFER);
  XSDParser parse=new XSDParser(options);
  parse.setDocumentLocator(new LocatorImpl());
  parse.parse(inputStream);
  XSDSchema schema=parse.getSchema();
  schema.validate();
  EList<XSDDiagnostic> diagnostics=schema.getDiagnostics();
  for (  XSDDiagnostic diagnostic : diagnostics) {
    XSDDiagnosticSeverity severity=diagnostic.getSeverity();
    if (severity.equals(XSDDiagnosticSeverity.ERROR_LITERAL)) {
      handler.error((TypeMetadata)null,""String_Node_Str"" + diagnostic.getMessage(),-1,-1,ValidationError.XML_SCHEMA);
    }
 else     if (severity.equals(XSDDiagnosticSeverity.WARNING_LITERAL)) {
      handler.error((TypeMetadata)null,""String_Node_Str"" + diagnostic.getMessage(),-1,-1,ValidationError.XML_SCHEMA);
    }
  }
  XmlSchemaWalker.walk(schema,this);
  resolveAdditionalSuperTypes(this,handler);
  for (  TypeMetadata type : getUserComplexTypes()) {
    type.validate(handler);
  }
  for (  TypeMetadata type : getNonInstantiableTypes()) {
    type.validate(handler);
  }
  handler.end();
  if (handler.getErrorCount() == 0) {
    for (    TypeMetadata type : getTypes()) {
      type.freeze(handler);
    }
  }
 else {
    LOGGER.error(""String_Node_Str"" + handler.getErrorCount() + ""String_Node_Str"");
  }
}","public void load(InputStream inputStream,ValidationHandler handler){
  if (inputStream == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(Resource.OPTION_SAVE_ONLY_IF_CHANGED,Resource.OPTION_SAVE_ONLY_IF_CHANGED_MEMORY_BUFFER);
  XSDParser parse=new XSDParser(options);
  parse.setDocumentLocator(new LocatorImpl());
  parse.parse(inputStream);
  XSDSchema schema=parse.getSchema();
  schema.validate();
  EList<XSDDiagnostic> diagnostics=schema.getDiagnostics();
  for (  XSDDiagnostic diagnostic : diagnostics) {
    XSDDiagnosticSeverity severity=diagnostic.getSeverity();
    if (severity.equals(XSDDiagnosticSeverity.ERROR_LITERAL)) {
      handler.error((TypeMetadata)null,""String_Node_Str"" + diagnostic.getMessage(),null,-1,-1,ValidationError.XML_SCHEMA);
    }
 else     if (severity.equals(XSDDiagnosticSeverity.WARNING_LITERAL)) {
      handler.error((TypeMetadata)null,""String_Node_Str"" + diagnostic.getMessage(),null,-1,-1,ValidationError.XML_SCHEMA);
    }
  }
  XmlSchemaWalker.walk(schema,this);
  resolveAdditionalSuperTypes(this,handler);
  for (  TypeMetadata type : getUserComplexTypes()) {
    type.validate(handler);
  }
  for (  TypeMetadata type : getNonInstantiableTypes()) {
    type.validate(handler);
  }
  handler.end();
  if (handler.getErrorCount() == 0) {
    for (    TypeMetadata type : getTypes()) {
      type.freeze(handler);
    }
  }
 else {
    LOGGER.error(""String_Node_Str"" + handler.getErrorCount() + ""String_Node_Str"");
  }
}",0.9967928159076332
146037,"@Override public void warning(TypeMetadata type,String message,int lineNumber,int columnNumber,ValidationError error){
}","@Override public void warning(TypeMetadata type,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
}",0.9375
146038,"@Override public void validate(ValidationHandler handler){
  int errorCount=handler.getErrorCount();
  fieldType.validate(handler);
  if (handler.getErrorCount() > errorCount) {
    return;
  }
  TypeMetadata currentType=fieldType;
  if (!XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(currentType.getNamespace())) {
    while (!currentType.getSuperTypes().isEmpty()) {
      TypeMetadata superType=currentType.getSuperTypes().iterator().next();
      if (XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(superType.getNamespace()) && (""String_Node_Str"".equals(superType.getName()) || ""String_Node_Str"".equals(superType.getName()))) {
        break;
      }
      currentType=superType;
      errorCount=handler.getErrorCount();
      currentType.validate(handler);
      if (handler.getErrorCount() > errorCount) {
        return;
      }
    }
  }
  if (!""String_Node_Str"".equals(currentType.getName())) {
    handler.error(this,""String_Node_Str"" + getName() + ""String_Node_Str"",this.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),this.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_NOT_STRING_TYPED);
  }
  referencedField.validate(handler);
  if (foreignKeyInfo != null) {
    errorCount=handler.getErrorCount();
    foreignKeyInfo.validate(handler);
    if (handler.getErrorCount() > errorCount) {
      return;
    }
    if (!isPrimitiveTypeField(foreignKeyInfo)) {
      handler.warning(foreignKeyInfo,""String_Node_Str"",foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_INFO_NOT_STRING_TYPED);
    }
    if (foreignKeyInfo.isMany()) {
      handler.warning(foreignKeyInfo,""String_Node_Str"",foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_INFO_REPEATABLE);
    }
  }
}","@Override public void validate(ValidationHandler handler){
  int errorCount=handler.getErrorCount();
  fieldType.validate(handler);
  if (handler.getErrorCount() > errorCount) {
    return;
  }
  TypeMetadata currentType=fieldType;
  if (!XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(currentType.getNamespace())) {
    while (!currentType.getSuperTypes().isEmpty()) {
      TypeMetadata superType=currentType.getSuperTypes().iterator().next();
      if (XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(superType.getNamespace()) && (""String_Node_Str"".equals(superType.getName()) || ""String_Node_Str"".equals(superType.getName()))) {
        break;
      }
      currentType=superType;
      errorCount=handler.getErrorCount();
      currentType.validate(handler);
      if (handler.getErrorCount() > errorCount) {
        return;
      }
    }
  }
  if (!""String_Node_Str"".equals(currentType.getName())) {
    handler.error(this,""String_Node_Str"" + getName() + ""String_Node_Str"",this.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),this.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),this.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_NOT_STRING_TYPED);
  }
  referencedField.validate(handler);
  if (foreignKeyInfo != null) {
    errorCount=handler.getErrorCount();
    foreignKeyInfo.validate(handler);
    if (handler.getErrorCount() > errorCount) {
      return;
    }
    if (!isPrimitiveTypeField(foreignKeyInfo)) {
      handler.warning(foreignKeyInfo,""String_Node_Str"",foreignKeyInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_INFO_NOT_STRING_TYPED);
    }
    if (foreignKeyInfo.isMany()) {
      handler.warning(foreignKeyInfo,""String_Node_Str"",foreignKeyInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_INFO_REPEATABLE);
    }
  }
}",0.9523107177974436
146039,"@Override public void validate(ValidationHandler handler){
  if (!superTypes.isEmpty()) {
    List<TypeMetadata> thisSuperTypes=new LinkedList<TypeMetadata>(superTypes);
    superTypes.clear();
    for (    TypeMetadata superType : thisSuperTypes) {
      if (isInstantiable() == superType.isInstantiable()) {
        superType=superType.freeze(handler);
        superTypes.add(superType);
      }
 else {
        handler.error(superType,""String_Node_Str"",superType.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),superType.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.ENTITY_CANNOT_INHERIT_FROM_REUSABLE_TYPE);
      }
    }
  }
}","@Override public void validate(ValidationHandler handler){
  if (!superTypes.isEmpty()) {
    List<TypeMetadata> thisSuperTypes=new LinkedList<TypeMetadata>(superTypes);
    superTypes.clear();
    for (    TypeMetadata superType : thisSuperTypes) {
      if (isInstantiable() == superType.isInstantiable()) {
        superType=superType.freeze(handler);
        superTypes.add(superType);
      }
 else {
        handler.error(superType,""String_Node_Str"",superType.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),superType.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),superType.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.ENTITY_CANNOT_INHERIT_FROM_REUSABLE_TYPE);
      }
    }
  }
}",0.9545782263878876
146040,"@Override public void validate(ValidationHandler handler){
  TypeMetadata validationType;
  if (containingType != null) {
    validationType=containingType;
  }
 else {
    int errorCount=handler.getErrorCount();
    containingField.validate(handler);
    if (handler.getErrorCount() > errorCount) {
      return;
    }
    validationType=containingField.getType();
  }
  Integer lineNumberObject=(Integer)additionalData.get(MetadataRepository.XSD_LINE_NUMBER);
  Integer columnNumberObject=(Integer)additionalData.get(MetadataRepository.XSD_COLUMN_NUMBER);
  if (lineNumberObject == null) {
    lineNumberObject=validationType.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER);
  }
  if (columnNumberObject == null) {
    columnNumberObject=validationType.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER);
  }
  if (lineNumberObject == null) {
    lineNumberObject=-1;
  }
  if (columnNumberObject == null) {
    columnNumberObject=-1;
  }
  TypeMetadata type=repository.getComplexType(validationType.getName());
  if (type == null) {
    type=repository.getNonInstantiableType(validationType.getNamespace(),validationType.getName());
  }
  if (type == null) {
    handler.error(this,""String_Node_Str"" + validationType.getName() + ""String_Node_Str"",lineNumberObject,columnNumberObject,ValidationError.TYPE_DOES_NOT_EXIST);
    return;
  }
  if (fieldName != null) {
    ComplexTypeMetadata complexTypeMetadata=(ComplexTypeMetadata)validationType;
    if (!complexTypeMetadata.hasField(fieldName)) {
      handler.error(this,""String_Node_Str"" + validationType.getName() + ""String_Node_Str""+ fieldName+ ""String_Node_Str"",lineNumberObject,columnNumberObject,ValidationError.TYPE_DOES_NOT_OWN_FIELD);
    }
  }
}","@Override public void validate(ValidationHandler handler){
  TypeMetadata validationType;
  if (containingType != null) {
    validationType=containingType;
  }
 else {
    int errorCount=handler.getErrorCount();
    containingField.validate(handler);
    if (handler.getErrorCount() > errorCount) {
      return;
    }
    validationType=containingField.getType();
  }
  Integer lineNumberObject=(Integer)additionalData.get(MetadataRepository.XSD_LINE_NUMBER);
  Integer columnNumberObject=(Integer)additionalData.get(MetadataRepository.XSD_COLUMN_NUMBER);
  if (lineNumberObject == null) {
    lineNumberObject=validationType.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER);
  }
  if (columnNumberObject == null) {
    columnNumberObject=validationType.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER);
  }
  if (lineNumberObject == null) {
    lineNumberObject=-1;
  }
  if (columnNumberObject == null) {
    columnNumberObject=-1;
  }
  TypeMetadata type=repository.getComplexType(validationType.getName());
  if (type == null) {
    type=repository.getNonInstantiableType(validationType.getNamespace(),validationType.getName());
  }
  if (type == null) {
    handler.error(this,""String_Node_Str"" + validationType.getName() + ""String_Node_Str"",(Element)additionalData.get(MetadataRepository.XSD_DOM_ELEMENT),lineNumberObject,columnNumberObject,ValidationError.TYPE_DOES_NOT_EXIST);
    return;
  }
  if (fieldName != null) {
    ComplexTypeMetadata complexTypeMetadata=(ComplexTypeMetadata)validationType;
    if (!complexTypeMetadata.hasField(fieldName)) {
      handler.error(this,""String_Node_Str"" + validationType.getName() + ""String_Node_Str""+ fieldName+ ""String_Node_Str"",(Element)additionalData.get(MetadataRepository.XSD_DOM_ELEMENT),lineNumberObject,columnNumberObject,ValidationError.TYPE_DOES_NOT_OWN_FIELD);
    }
  }
}",0.9640852974186308
146041,"@Override public FieldMetadata freeze(ValidationHandler handler){
  if (frozenField != null) {
    return frozenField;
  }
  ComplexTypeMetadata type=(ComplexTypeMetadata)repository.getType(typeName);
  if (type == null) {
    type=(ComplexTypeMetadata)repository.getNonInstantiableType(repository.getUserNamespace(),typeName);
  }
  if (type == null) {
    handler.fatal((TypeMetadata)null,""String_Node_Str"" + typeName + ""String_Node_Str"",-1,-1,ValidationError.TYPE_DOES_NOT_EXIST);
    return this;
  }
  Collection<FieldMetadata> keyFields=type.getKeyFields();
  if (fieldName == null) {
    if (keyFields.size() == 1) {
      frozenField=keyFields.iterator().next();
    }
 else {
      frozenField=new CompoundFieldMetadata(keyFields.toArray(new FieldMetadata[keyFields.size()]));
    }
  }
 else {
    frozenField=type.getField(fieldName);
  }
  Set<Map.Entry<String,Object>> data=additionalData.entrySet();
  for (  Map.Entry<String,Object> currentData : data) {
    frozenField.setData(currentData.getKey(),currentData.getValue());
  }
  return frozenField;
}","@Override public FieldMetadata freeze(ValidationHandler handler){
  if (frozenField != null) {
    return frozenField;
  }
  ComplexTypeMetadata type=(ComplexTypeMetadata)repository.getType(typeName);
  if (type == null) {
    type=(ComplexTypeMetadata)repository.getNonInstantiableType(repository.getUserNamespace(),typeName);
  }
  if (type == null) {
    handler.fatal((TypeMetadata)null,""String_Node_Str"" + typeName + ""String_Node_Str"",null,-1,-1,ValidationError.TYPE_DOES_NOT_EXIST);
    return this;
  }
  Collection<FieldMetadata> keyFields=type.getKeyFields();
  if (fieldName == null) {
    if (keyFields.size() == 1) {
      frozenField=keyFields.iterator().next();
    }
 else {
      frozenField=new CompoundFieldMetadata(keyFields.toArray(new FieldMetadata[keyFields.size()]));
    }
  }
 else {
    frozenField=type.getField(fieldName);
  }
  Set<Map.Entry<String,Object>> data=additionalData.entrySet();
  for (  Map.Entry<String,Object> currentData : data) {
    frozenField.setData(currentData.getKey(),currentData.getValue());
  }
  return frozenField;
}",0.997662459093034
146042,"@Override public void validate(ValidationHandler handler){
  ComplexTypeMetadata type=(ComplexTypeMetadata)repository.getType(typeName);
  if (type == null) {
    type=(ComplexTypeMetadata)repository.getNonInstantiableType(repository.getUserNamespace(),typeName);
  }
  if (type == null) {
    handler.error(this,""String_Node_Str"" + typeName + ""String_Node_Str"",(Integer)additionalData.get(MetadataRepository.XSD_LINE_NUMBER),(Integer)additionalData.get(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_DOES_NOT_EXIST);
    return;
  }
  Collection<FieldMetadata> keyFields=type.getKeyFields();
  if (keyFields.isEmpty()) {
    handler.error(type,""String_Node_Str"" + typeName + ""String_Node_Str"",type.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),type.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_DOES_NOT_OWN_KEY);
  }
}","@Override public void validate(ValidationHandler handler){
  ComplexTypeMetadata type=(ComplexTypeMetadata)repository.getType(typeName);
  if (type == null) {
    type=(ComplexTypeMetadata)repository.getNonInstantiableType(repository.getUserNamespace(),typeName);
  }
  if (type == null) {
    handler.error(this,""String_Node_Str"" + typeName + ""String_Node_Str"",(Element)additionalData.get(MetadataRepository.XSD_DOM_ELEMENT),(Integer)additionalData.get(MetadataRepository.XSD_LINE_NUMBER),(Integer)additionalData.get(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_DOES_NOT_EXIST);
    return;
  }
  Collection<FieldMetadata> keyFields=type.getKeyFields();
  if (keyFields.isEmpty()) {
    handler.error(type,""String_Node_Str"" + typeName + ""String_Node_Str"",type.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),type.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),type.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_DOES_NOT_OWN_KEY);
  }
}",0.9344086021505376
146043,"@Override public void validate(ValidationHandler handler){
  TypeMetadata type;
  if (instantiable) {
    type=repository.getType(namespace,typeName);
  }
 else {
    type=repository.getNonInstantiableType(namespace,typeName);
  }
  if (type == null) {
    if (instantiable) {
      handler.error((TypeMetadata)null,""String_Node_Str"" + typeName + ""String_Node_Str""+ namespace+ ""String_Node_Str"",(Integer)additionalData.get(MetadataRepository.XSD_LINE_NUMBER),(Integer)additionalData.get(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_DOES_NOT_EXIST);
    }
 else {
      handler.error((TypeMetadata)null,""String_Node_Str"" + typeName + ""String_Node_Str""+ namespace+ ""String_Node_Str"",(Integer)additionalData.get(MetadataRepository.XSD_LINE_NUMBER),(Integer)additionalData.get(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_DOES_NOT_EXIST);
    }
  }
}","@Override public void validate(ValidationHandler handler){
  TypeMetadata type;
  if (instantiable) {
    type=repository.getType(namespace,typeName);
  }
 else {
    type=repository.getNonInstantiableType(namespace,typeName);
  }
  if (type == null) {
    if (instantiable) {
      handler.error((TypeMetadata)null,""String_Node_Str"" + typeName + ""String_Node_Str""+ namespace+ ""String_Node_Str"",(Element)additionalData.get(MetadataRepository.XSD_DOM_ELEMENT),(Integer)additionalData.get(MetadataRepository.XSD_LINE_NUMBER),(Integer)additionalData.get(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_DOES_NOT_EXIST);
    }
 else {
      handler.error((TypeMetadata)null,""String_Node_Str"" + typeName + ""String_Node_Str""+ namespace+ ""String_Node_Str"",(Element)additionalData.get(MetadataRepository.XSD_DOM_ELEMENT),(Integer)additionalData.get(MetadataRepository.XSD_LINE_NUMBER),(Integer)additionalData.get(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.TYPE_DOES_NOT_EXIST);
    }
  }
}",0.9317697228144988
146044,"/** 
 * Validates the type: performs assertions on content specific to MDM (this method should not raise XSD compliance issues).
 * @param handler A {@link ValidationHandler} to be used for error / warning reporting.
 * @see ValidationHandler#error(TypeMetadata,String,int,int,ValidationError)
 */
void validate(ValidationHandler handler);","/** 
 * Validates the type: performs assertions on content specific to MDM (this method should not raise XSD compliance issues).
 * @param handler A {@link ValidationHandler} to be used for error / warning reporting.
 * @see ValidationHandler#error(TypeMetadata,String,org.w3c.dom.Element,int,int,ValidationError)
 */
void validate(ValidationHandler handler);",0.97134670487106
146045,"@Override public void validate(ValidationHandler handler){
  int errorCount=handler.getErrorCount();
  fieldType.validate(handler);
  if (handler.getErrorCount() > errorCount) {
    return;
  }
  TypeMetadata currentType=fieldType;
  if (!XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(currentType.getNamespace())) {
    while (!currentType.getSuperTypes().isEmpty()) {
      TypeMetadata superType=currentType.getSuperTypes().iterator().next();
      if (XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(superType.getNamespace()) && (""String_Node_Str"".equals(superType.getName()) || ""String_Node_Str"".equals(superType.getName()))) {
        break;
      }
      currentType=superType;
      errorCount=handler.getErrorCount();
      currentType.validate(handler);
      if (handler.getErrorCount() > errorCount) {
        return;
      }
    }
  }
  if (!""String_Node_Str"".equals(currentType.getName())) {
    handler.error(this,""String_Node_Str"" + getName() + ""String_Node_Str"",this.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),this.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),this.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_NOT_STRING_TYPED);
  }
  referencedField.validate(handler);
  if (foreignKeyInfo != null) {
    errorCount=handler.getErrorCount();
    foreignKeyInfo.validate(handler);
    if (handler.getErrorCount() > errorCount) {
      return;
    }
    if (!isPrimitiveTypeField(foreignKeyInfo)) {
      handler.warning(foreignKeyInfo,""String_Node_Str"",foreignKeyInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_INFO_NOT_STRING_TYPED);
    }
    if (foreignKeyInfo.isMany()) {
      handler.warning(foreignKeyInfo,""String_Node_Str"",foreignKeyInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_INFO_REPEATABLE);
    }
  }
}","@Override public void validate(final ValidationHandler handler){
  int errorCount=handler.getErrorCount();
  fieldType.validate(handler);
  if (handler.getErrorCount() > errorCount) {
    return;
  }
  TypeMetadata currentType=fieldType;
  if (!XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(currentType.getNamespace())) {
    while (!currentType.getSuperTypes().isEmpty()) {
      TypeMetadata superType=currentType.getSuperTypes().iterator().next();
      if (XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(superType.getNamespace()) && (""String_Node_Str"".equals(superType.getName()) || ""String_Node_Str"".equals(superType.getName()))) {
        break;
      }
      currentType=superType;
      errorCount=handler.getErrorCount();
      currentType.validate(handler);
      if (handler.getErrorCount() > errorCount) {
        return;
      }
    }
  }
  if (!""String_Node_Str"".equals(currentType.getName())) {
    handler.error(this,""String_Node_Str"" + getName() + ""String_Node_Str"",this.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),this.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),this.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_NOT_STRING_TYPED);
  }
  referencedField.validate(new ValidationHandler(){
    @Override public void error(    TypeMetadata type,    String message,    Element element,    int lineNumber,    int columnNumber,    ValidationError error){
      handler.error(type,message,element,lineNumber,columnNumber,error);
    }
    public void warning(    TypeMetadata type,    String message,    Element element,    int lineNumber,    int columnNumber,    ValidationError error){
      handler.warning(type,message,element,lineNumber,columnNumber,error);
    }
    public void end(){
      handler.end();
    }
    public int getErrorCount(){
      return handler.getErrorCount();
    }
    public void fatal(    FieldMetadata field,    String message,    Element element,    int lineNumber,    int columnNumber,    ValidationError error){
      handler.fatal(field,message,element,lineNumber,columnNumber,error);
    }
    @Override public void error(    FieldMetadata field,    String message,    Element element,    int lineNumber,    int columnNumber,    ValidationError error){
      if (error == ValidationError.TYPE_DOES_NOT_EXIST) {
        handler.error(ReferenceFieldMetadata.this,message,element,lineNumber,columnNumber,error);
      }
 else {
        handler.error(field,message,element,lineNumber,columnNumber,error);
      }
    }
    public void warning(    FieldMetadata field,    String message,    Element element,    int lineNumber,    int columnNumber,    ValidationError error){
      handler.warning(field,message,element,lineNumber,columnNumber,error);
    }
    public void fatal(    TypeMetadata type,    String message,    Element element,    int lineNumber,    int columnNumber,    ValidationError error){
      handler.fatal(type,message,element,lineNumber,columnNumber,error);
    }
  }
);
  if (foreignKeyInfo != null) {
    errorCount=handler.getErrorCount();
    foreignKeyInfo.validate(handler);
    if (handler.getErrorCount() > errorCount) {
      return;
    }
    if (!isPrimitiveTypeField(foreignKeyInfo)) {
      handler.warning(foreignKeyInfo,""String_Node_Str"",foreignKeyInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_INFO_NOT_STRING_TYPED);
    }
    if (foreignKeyInfo.isMany()) {
      handler.warning(foreignKeyInfo,""String_Node_Str"",foreignKeyInfo.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),foreignKeyInfo.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER),ValidationError.FOREIGN_KEY_INFO_REPEATABLE);
    }
  }
}",0.7085619285120532
146046,"@Override public void validate(ValidationHandler handler){
  if (containingType != null) {
    ComplexTypeMetadata type=repository.getComplexType(containingType.getName());
    Integer lineNumberObject=(Integer)additionalData.get(MetadataRepository.XSD_LINE_NUMBER);
    Integer columnNumberObject=(Integer)additionalData.get(MetadataRepository.XSD_COLUMN_NUMBER);
    if (type == null) {
      handler.error(this,""String_Node_Str"" + containingType + ""String_Node_Str"",lineNumberObject == null ? containingType.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER) : lineNumberObject,columnNumberObject == null ? containingType.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER) : columnNumberObject);
      return;
    }
    if (!type.hasField(fieldName)) {
      handler.error(this,""String_Node_Str"" + containingType + ""String_Node_Str""+ fieldName+ ""String_Node_Str"",lineNumberObject == null ? containingType.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER) : lineNumberObject,columnNumberObject == null ? containingType.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER) : columnNumberObject);
    }
  }
}","@Override public void validate(ValidationHandler handler){
  Integer lineNumberObject=(Integer)additionalData.get(MetadataRepository.XSD_LINE_NUMBER);
  Integer columnNumberObject=(Integer)additionalData.get(MetadataRepository.XSD_COLUMN_NUMBER);
  TypeMetadata validationContainingType;
  if (containingType != null) {
    validationContainingType=containingType;
  }
 else {
    validationContainingType=containingField.getContainingType();
  }
  ComplexTypeMetadata type=repository.getComplexType(validationContainingType.getName());
  if (type == null) {
    handler.error(this,""String_Node_Str"" + validationContainingType + ""String_Node_Str"",lineNumberObject == null ? validationContainingType.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER) : lineNumberObject,columnNumberObject == null ? validationContainingType.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER) : columnNumberObject);
    return;
  }
  if (!type.hasField(fieldName)) {
    handler.error(this,""String_Node_Str"" + validationContainingType + ""String_Node_Str""+ fieldName+ ""String_Node_Str"",lineNumberObject == null ? validationContainingType.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER) : lineNumberObject,columnNumberObject == null ? validationContainingType.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER) : columnNumberObject);
  }
}",0.7952691680261011
146047,"private FieldMetadata createFieldMetadata(XSDElementDeclaration element,ComplexTypeMetadata containingType){
  String fieldName=element.getName();
  int minOccurs=((XSDParticle)element.getContainer()).getMinOccurs();
  int maxOccurs=((XSDParticle)element.getContainer()).getMaxOccurs();
  if (maxOccurs > 0 && minOccurs > maxOccurs) {
    throw new IllegalArgumentException(""String_Node_Str"" + element.getQName() + ""String_Node_Str""+ containingType+ ""String_Node_Str"");
  }
  boolean isMany=maxOccurs == -1 || maxOccurs > 1;
  XmlSchemaAnnotationProcessorState state=new XmlSchemaAnnotationProcessorState();
  try {
    XSDAnnotation annotation=element.getAnnotation();
    for (    XmlSchemaAnnotationProcessor processor : XML_ANNOTATIONS_PROCESSORS) {
      processor.process(this,containingType,annotation,state);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ containingType.getName()+ ""String_Node_Str"",e);
  }
  boolean isMandatory=minOccurs > 0;
  boolean isContained=false;
  boolean isReference=state.isReference();
  boolean fkIntegrity=state.isFkIntegrity();
  boolean fkIntegrityOverride=state.isFkIntegrityOverride();
  FieldMetadata foreignKeyInfo=state.getForeignKeyInfo();
  TypeMetadata fieldType=state.getFieldType();
  FieldMetadata referencedField=state.getReferencedField();
  TypeMetadata referencedType=state.getReferencedType();
  List<String> hideUsers=state.getHide();
  List<String> allowWriteUsers=state.getAllowWrite();
  if (foreignKeyInfo != null && fieldType == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ containingType.getName()+ ""String_Node_Str"");
  }
  XSDTypeDefinition schemaType=element.getType();
  if (schemaType instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition simpleSchemaType=(XSDSimpleTypeDefinition)schemaType;
    XSDSimpleTypeDefinition content=simpleSchemaType.getBaseTypeDefinition();
    if (schemaType.getQName() != null) {
      fieldType=new SoftTypeRef(this,schemaType.getTargetNamespace(),schemaType.getName(),false);
    }
    if (isReference) {
      ReferenceFieldMetadata referenceField=new ReferenceFieldMetadata(containingType,false,isMany,isMandatory,fieldName,(ComplexTypeMetadata)referencedType,referencedField,foreignKeyInfo,fkIntegrity,fkIntegrityOverride,fieldType,allowWriteUsers,hideUsers);
      referenceField.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
      referenceField.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
      referenceField.setData(XSD_DOM_ELEMENT,element.getElement());
      return referenceField;
    }
    if (content != null) {
      if (fieldType == null) {
        fieldType=new SoftTypeRef(this,content.getTargetNamespace(),content.getName(),false);
      }
      if (content.getFacets().size() > 0) {
        boolean isEnumeration=false;
        for (int i=0; i < content.getFacets().size(); i++) {
          XSDConstrainingFacet item=content.getFacets().get(i);
          if (item instanceof XSDEnumerationFacet) {
            isEnumeration=true;
          }
        }
        if (isEnumeration) {
          EnumerationFieldMetadata enumField=new EnumerationFieldMetadata(containingType,false,isMany,isMandatory,fieldName,fieldType,allowWriteUsers,hideUsers);
          enumField.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
          enumField.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
          enumField.setData(XSD_DOM_ELEMENT,element.getElement());
          return enumField;
        }
 else {
          FieldMetadata field=new SimpleTypeFieldMetadata(containingType,false,isMany,isMandatory,fieldName,fieldType,allowWriteUsers,hideUsers);
          field.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
          field.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
          field.setData(XSD_DOM_ELEMENT,element.getElement());
          return field;
        }
      }
 else {
        FieldMetadata field=new SimpleTypeFieldMetadata(containingType,false,isMany,isMandatory,fieldName,fieldType,allowWriteUsers,hideUsers);
        field.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
        field.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
        field.setData(XSD_DOM_ELEMENT,element.getElement());
        return field;
      }
    }
  }
  if (fieldType == null) {
    String qName=element.getType() == null ? null : element.getType().getQName();
    if (qName != null) {
      TypeMetadata metadata=getType(element.getType().getTargetNamespace(),element.getType().getName());
      if (metadata != null) {
        referencedType=new ContainedComplexTypeRef(currentTypeStack.peek(),targetNamespace,element.getName(),new SoftTypeRef(this,targetNamespace,schemaType.getName(),false));
        isContained=true;
      }
 else {
        if (schemaType == null) {
          throw new IllegalArgumentException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ containingType.getName()+ ""String_Node_Str"");
        }
        if (schemaType instanceof XSDComplexTypeDefinition) {
          referencedType=new ContainedComplexTypeRef(currentTypeStack.peek(),targetNamespace,element.getName(),new SoftTypeRef(this,targetNamespace,schemaType.getName(),false));
          isContained=true;
        }
 else         if (schemaType instanceof XSDSimpleTypeDefinition) {
          fieldType=new SoftTypeRef(this,schemaType.getTargetNamespace(),schemaType.getName(),false);
          XmlSchemaWalker.walk(schemaType,this);
        }
 else {
          throw new NotImplementedException(""String_Node_Str"" + schemaType.getClass() + ""String_Node_Str"");
        }
      }
    }
 else {
      isContained=true;
      XSDElementDeclaration refName=element.getResolvedElementDeclaration();
      if (schemaType != null) {
        referencedType=new ContainedComplexTypeMetadata(currentTypeStack.peek(),targetNamespace,ANONYMOUS_PREFIX + String.valueOf(anonymousCounter++));
        fieldType=referencedType;
        isContained=true;
        currentTypeStack.push((ComplexTypeMetadata)referencedType);
        XmlSchemaWalker.walk(schemaType,this);
        currentTypeStack.pop();
      }
 else       if (refName != null) {
        SoftTypeRef reference=new SoftTypeRef(this,refName.getTargetNamespace(),refName.getName(),true);
        referencedType=new ContainedComplexTypeRef(currentTypeStack.peek(),targetNamespace,element.getName(),reference);
        fieldType=referencedType;
      }
 else {
        throw new NotImplementedException();
      }
    }
  }
  if (isContained) {
    ContainedTypeFieldMetadata containedField=new ContainedTypeFieldMetadata(containingType,isMany,isMandatory,fieldName,(ContainedComplexTypeMetadata)referencedType,allowWriteUsers,hideUsers);
    containedField.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
    containedField.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
    containedField.setData(XSD_DOM_ELEMENT,element.getElement());
    return containedField;
  }
 else {
    FieldMetadata field=new SimpleTypeFieldMetadata(containingType,false,isMany,isMandatory,fieldName,fieldType,allowWriteUsers,hideUsers);
    field.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
    field.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
    field.setData(XSD_DOM_ELEMENT,element.getElement());
    return field;
  }
}","private FieldMetadata createFieldMetadata(XSDElementDeclaration element,ComplexTypeMetadata containingType){
  String fieldName=element.getName();
  int minOccurs=((XSDParticle)element.getContainer()).getMinOccurs();
  int maxOccurs=((XSDParticle)element.getContainer()).getMaxOccurs();
  if (maxOccurs > 0 && minOccurs > maxOccurs) {
    throw new IllegalArgumentException(""String_Node_Str"" + element.getQName() + ""String_Node_Str""+ containingType+ ""String_Node_Str"");
  }
  boolean isMany=maxOccurs == -1 || maxOccurs > 1;
  XmlSchemaAnnotationProcessorState state=new XmlSchemaAnnotationProcessorState();
  try {
    XSDAnnotation annotation=element.getAnnotation();
    for (    XmlSchemaAnnotationProcessor processor : XML_ANNOTATIONS_PROCESSORS) {
      processor.process(this,containingType,annotation,state);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ containingType.getName()+ ""String_Node_Str"",e);
  }
  boolean isMandatory=minOccurs > 0;
  boolean isContained=false;
  boolean isReference=state.isReference();
  boolean fkIntegrity=state.isFkIntegrity();
  boolean fkIntegrityOverride=state.isFkIntegrityOverride();
  FieldMetadata foreignKeyInfo=state.getForeignKeyInfo();
  TypeMetadata fieldType=state.getFieldType();
  FieldMetadata referencedField=state.getReferencedField();
  TypeMetadata referencedType=state.getReferencedType();
  List<String> hideUsers=state.getHide();
  List<String> allowWriteUsers=state.getAllowWrite();
  if (foreignKeyInfo != null && fieldType == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ containingType.getName()+ ""String_Node_Str"");
  }
  XSDTypeDefinition schemaType=element.getType();
  if (schemaType instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition simpleSchemaType=(XSDSimpleTypeDefinition)schemaType;
    XSDSimpleTypeDefinition content=simpleSchemaType.getBaseTypeDefinition();
    if (schemaType.getQName() != null) {
      fieldType=new SoftTypeRef(this,schemaType.getTargetNamespace(),schemaType.getName(),false);
      fieldType.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
      fieldType.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
      fieldType.setData(XSD_DOM_ELEMENT,element.getElement());
    }
    if (isReference) {
      ReferenceFieldMetadata referenceField=new ReferenceFieldMetadata(containingType,false,isMany,isMandatory,fieldName,(ComplexTypeMetadata)referencedType,referencedField,foreignKeyInfo,fkIntegrity,fkIntegrityOverride,fieldType,allowWriteUsers,hideUsers);
      referenceField.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
      referenceField.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
      referenceField.setData(XSD_DOM_ELEMENT,element.getElement());
      return referenceField;
    }
    if (content != null) {
      if (fieldType == null) {
        fieldType=new SoftTypeRef(this,content.getTargetNamespace(),content.getName(),false);
      }
      if (content.getFacets().size() > 0) {
        boolean isEnumeration=false;
        for (int i=0; i < content.getFacets().size(); i++) {
          XSDConstrainingFacet item=content.getFacets().get(i);
          if (item instanceof XSDEnumerationFacet) {
            isEnumeration=true;
          }
        }
        if (isEnumeration) {
          EnumerationFieldMetadata enumField=new EnumerationFieldMetadata(containingType,false,isMany,isMandatory,fieldName,fieldType,allowWriteUsers,hideUsers);
          enumField.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
          enumField.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
          enumField.setData(XSD_DOM_ELEMENT,element.getElement());
          return enumField;
        }
 else {
          FieldMetadata field=new SimpleTypeFieldMetadata(containingType,false,isMany,isMandatory,fieldName,fieldType,allowWriteUsers,hideUsers);
          field.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
          field.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
          field.setData(XSD_DOM_ELEMENT,element.getElement());
          return field;
        }
      }
 else {
        FieldMetadata field=new SimpleTypeFieldMetadata(containingType,false,isMany,isMandatory,fieldName,fieldType,allowWriteUsers,hideUsers);
        field.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
        field.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
        field.setData(XSD_DOM_ELEMENT,element.getElement());
        return field;
      }
    }
  }
  if (fieldType == null) {
    String qName=element.getType() == null ? null : element.getType().getQName();
    if (qName != null) {
      TypeMetadata metadata=getType(element.getType().getTargetNamespace(),element.getType().getName());
      if (metadata != null) {
        referencedType=new ContainedComplexTypeRef(currentTypeStack.peek(),targetNamespace,element.getName(),new SoftTypeRef(this,targetNamespace,schemaType.getName(),false));
        isContained=true;
      }
 else {
        if (schemaType == null) {
          throw new IllegalArgumentException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ containingType.getName()+ ""String_Node_Str"");
        }
        if (schemaType instanceof XSDComplexTypeDefinition) {
          referencedType=new ContainedComplexTypeRef(currentTypeStack.peek(),targetNamespace,element.getName(),new SoftTypeRef(this,targetNamespace,schemaType.getName(),false));
          isContained=true;
        }
 else         if (schemaType instanceof XSDSimpleTypeDefinition) {
          fieldType=new SoftTypeRef(this,schemaType.getTargetNamespace(),schemaType.getName(),false);
          XmlSchemaWalker.walk(schemaType,this);
        }
 else {
          throw new NotImplementedException(""String_Node_Str"" + schemaType.getClass() + ""String_Node_Str"");
        }
      }
    }
 else {
      isContained=true;
      XSDElementDeclaration refName=element.getResolvedElementDeclaration();
      if (schemaType != null) {
        referencedType=new ContainedComplexTypeMetadata(currentTypeStack.peek(),targetNamespace,ANONYMOUS_PREFIX + String.valueOf(anonymousCounter++));
        fieldType=referencedType;
        isContained=true;
        currentTypeStack.push((ComplexTypeMetadata)referencedType);
        XmlSchemaWalker.walk(schemaType,this);
        currentTypeStack.pop();
      }
 else       if (refName != null) {
        SoftTypeRef reference=new SoftTypeRef(this,refName.getTargetNamespace(),refName.getName(),true);
        referencedType=new ContainedComplexTypeRef(currentTypeStack.peek(),targetNamespace,element.getName(),reference);
        fieldType=referencedType;
      }
 else {
        throw new NotImplementedException();
      }
    }
  }
  if (isContained) {
    ContainedTypeFieldMetadata containedField=new ContainedTypeFieldMetadata(containingType,isMany,isMandatory,fieldName,(ContainedComplexTypeMetadata)referencedType,allowWriteUsers,hideUsers);
    containedField.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
    containedField.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
    containedField.setData(XSD_DOM_ELEMENT,element.getElement());
    return containedField;
  }
 else {
    FieldMetadata field=new SimpleTypeFieldMetadata(containingType,false,isMany,isMandatory,fieldName,fieldType,allowWriteUsers,hideUsers);
    field.setData(XSD_LINE_NUMBER,XSDParser.getStartLine(element.getElement()));
    field.setData(XSD_COLUMN_NUMBER,XSDParser.getStartColumn(element.getElement()));
    field.setData(XSD_DOM_ELEMENT,element.getElement());
    return field;
  }
}",0.5356981034371157
146048,"@Override public void validate(ValidationHandler handler){
  TypeMetadata currentType=fieldType;
  if (!XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(currentType.getNamespace())) {
    while (!currentType.getSuperTypes().isEmpty()) {
      TypeMetadata superType=currentType.getSuperTypes().iterator().next();
      if (XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(superType.getNamespace()) && (""String_Node_Str"".equals(superType.getName()) || ""String_Node_Str"".equals(superType.getName()))) {
        break;
      }
      currentType=superType;
    }
  }
  if (!""String_Node_Str"".equals(currentType.getName())) {
    handler.error(containingType,""String_Node_Str"" + getName() + ""String_Node_Str"",-1,-1);
  }
  referencedField.validate(handler);
}","@Override public void validate(ValidationHandler handler){
  int errorCount=handler.getErrorCount();
  fieldType.validate(handler);
  if (handler.getErrorCount() > errorCount) {
    return;
  }
  TypeMetadata currentType=fieldType;
  if (!XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(currentType.getNamespace())) {
    while (!currentType.getSuperTypes().isEmpty()) {
      TypeMetadata superType=currentType.getSuperTypes().iterator().next();
      if (XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(superType.getNamespace()) && (""String_Node_Str"".equals(superType.getName()) || ""String_Node_Str"".equals(superType.getName()))) {
        break;
      }
      currentType=superType;
      errorCount=handler.getErrorCount();
      currentType.validate(handler);
      if (handler.getErrorCount() > errorCount) {
        return;
      }
    }
  }
  if (!""String_Node_Str"".equals(currentType.getName())) {
    handler.error(this,""String_Node_Str"" + getName() + ""String_Node_Str"",this.<Integer>getData(MetadataRepository.XSD_LINE_NUMBER),this.<Integer>getData(MetadataRepository.XSD_COLUMN_NUMBER));
  }
  referencedField.validate(handler);
}",0.772192513368984
146049,"@Override public TypeMetadata freeze(ValidationHandler handler){
  return getType().freeze(handler);
}","@Override public TypeMetadata freeze(ValidationHandler handler){
  if (frozenType == null) {
    frozenType=getType().freeze(handler);
    Set<Map.Entry<String,Object>> data=additionalData.entrySet();
    for (    Map.Entry<String,Object> currentData : data) {
      frozenType.setData(currentData.getKey(),currentData.getValue());
    }
  }
  return frozenType;
}",0.407725321888412
146050,"@Override public <X>X getData(String key){
  return getType().<X>getData(key);
}","@Override public <X>X getData(String key){
  return (X)additionalData.get(key);
}",0.8074534161490683
146051,"@Override public void validate(ValidationHandler handler){
  TypeMetadata type;
  if (instantiable) {
    type=repository.getType(namespace,typeName);
  }
 else {
    type=repository.getNonInstantiableType(namespace,typeName);
  }
  if (type == null) {
    if (instantiable) {
      handler.error((TypeMetadata)null,""String_Node_Str"" + typeName + ""String_Node_Str""+ namespace+ ""String_Node_Str"",-1,-1);
    }
 else {
      handler.error((TypeMetadata)null,""String_Node_Str"" + typeName + ""String_Node_Str""+ namespace+ ""String_Node_Str"",-1,-1);
    }
  }
}","@Override public void validate(ValidationHandler handler){
  TypeMetadata type;
  if (instantiable) {
    type=repository.getType(namespace,typeName);
  }
 else {
    type=repository.getNonInstantiableType(namespace,typeName);
  }
  if (type == null) {
    if (instantiable) {
      handler.error((TypeMetadata)null,""String_Node_Str"" + typeName + ""String_Node_Str""+ namespace+ ""String_Node_Str"",(Integer)additionalData.get(MetadataRepository.XSD_LINE_NUMBER),(Integer)additionalData.get(MetadataRepository.XSD_COLUMN_NUMBER));
    }
 else {
      handler.error((TypeMetadata)null,""String_Node_Str"" + typeName + ""String_Node_Str""+ namespace+ ""String_Node_Str"",(Integer)additionalData.get(MetadataRepository.XSD_LINE_NUMBER),(Integer)additionalData.get(MetadataRepository.XSD_COLUMN_NUMBER));
    }
  }
}",0.8053097345132744
146052,"@Override public synchronized void setData(String key,Object data){
  getType().setData(key,data);
}","@Override public synchronized void setData(String key,Object data){
  additionalData.put(key,data);
}",0.8756218905472637
146053,"private static String serializeConfiguration(SmtpConfigurationBean configuration) throws Exception {
  try {
    String xml=""String_Node_Str"";
    xml+=""String_Node_Str"" + (""String_Node_Str"".equals(StringEscapeUtils.escapeXml(configuration.getSmtpServer())) ? ""String_Node_Str"" : StringEscapeUtils.escapeXml(configuration.getSmtpServer())) + ""String_Node_Str"";
    xml+=""String_Node_Str"" + ((configuration.getSmtpPort() <= 0) ? ""String_Node_Str"" : String.valueOf(configuration.getSmtpPort())) + ""String_Node_Str"";
    xml+=""String_Node_Str"" + ((""String_Node_Str"".equals(StringEscapeUtils.escapeXml(configuration.getSmtpUsername()))) ? ""String_Node_Str"" : StringEscapeUtils.escapeXml(configuration.getSmtpUsername())) + ""String_Node_Str""+ ""String_Node_Str""+ ((""String_Node_Str"".equals(StringEscapeUtils.escapeXml(configuration.getSmtpPassword()))) ? ""String_Node_Str"" : StringEscapeUtils.escapeXml(configuration.getSmtpPassword()))+ ""String_Node_Str""+ ""String_Node_Str""+ ((""String_Node_Str"".equals(StringEscapeUtils.escapeXml(configuration.getSmtpBCC()))) ? ""String_Node_Str"" : StringEscapeUtils.escapeXml(configuration.getSmtpBCC()).replaceAll(""String_Node_Str"",""String_Node_Str""));
    xml+=""String_Node_Str"";
    return xml;
  }
 catch (  Exception e) {
    Matcher m=Pattern.compile(""String_Node_Str"",Pattern.DOTALL).matcher(e.getLocalizedMessage());
    if (m.matches())     throw new Exception(m.group(2));
    throw new Exception(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}","private static String serializeConfiguration(SmtpConfigurationBean configuration) throws Exception {
  try {
    String xml=""String_Node_Str"";
    xml+=""String_Node_Str"" + (""String_Node_Str"".equals(configuration.getSmtpServer()) ? ""String_Node_Str"" : configuration.getSmtpServer()) + ""String_Node_Str"";
    xml+=""String_Node_Str"" + ((configuration.getSmtpPort() <= 0) ? ""String_Node_Str"" : String.valueOf(configuration.getSmtpPort())) + ""String_Node_Str"";
    xml+=""String_Node_Str"" + ((""String_Node_Str"".equals(configuration.getSmtpUsername())) ? ""String_Node_Str"" : configuration.getSmtpUsername()) + ""String_Node_Str""+ ""String_Node_Str""+ ((""String_Node_Str"".equals(configuration.getSmtpPassword())) ? ""String_Node_Str"" : configuration.getSmtpPassword())+ ""String_Node_Str""+ ""String_Node_Str""+ ((""String_Node_Str"".equals(configuration.getSmtpBCC())) ? ""String_Node_Str"" : configuration.getSmtpBCC()).replaceAll(""String_Node_Str"",""String_Node_Str"");
    xml+=""String_Node_Str"";
    return xml;
  }
 catch (  Exception e) {
    Matcher m=Pattern.compile(""String_Node_Str"",Pattern.DOTALL).matcher(e.getLocalizedMessage());
    if (m.matches())     throw new Exception(m.group(2));
    throw new Exception(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.7836676217765043
146054,"public static void deleteDirectory(File dir){
  File[] entries=dir.listFiles();
  int sz=entries.length;
  for (int i=0; i < sz; i++) {
    if (entries[i].isDirectory()) {
      deleteDirectory(entries[i]);
    }
 else {
      entries[i].delete();
    }
  }
  dir.delete();
}","public static void deleteDirectory(File dir){
  if (!dir.exists() || dir.isFile())   return;
  File[] entries=dir.listFiles();
  int sz=entries.length;
  for (int i=0; i < sz; i++) {
    if (entries[i].isDirectory()) {
      deleteDirectory(entries[i]);
    }
 else {
      entries[i].delete();
    }
  }
  dir.delete();
}",0.9212730318257956
146055,"/** 
 * DOC hbhong Comment method ""unZipFile"". same with unZipFile(String zipfile, String unzipdir) method except having a progressMonitor
 * @param zipfile
 * @param unzipdir
 * @param totalProgress
 * @param monitor
 * @throws IOException
 * @throws Exception
 */
public static void unZipFile(String zipfile,String unzipdir,int totalProgress,IProgressMonitor monitor) throws IOException {
  monitor.setTaskName(""String_Node_Str"");
  File unzipF=new File(unzipdir);
  if (!unzipF.exists()) {
    unzipF.mkdirs();
  }
  ZipFile zfile=null;
  try {
    zfile=new ZipFile(zipfile);
    int total=zfile.size();
    int interval, step;
    if (totalProgress / total > 0) {
      interval=1;
      step=Math.round(totalProgress / total);
    }
 else {
      step=1;
      interval=Math.round(total / totalProgress + 0.5f);
    }
    Enumeration zList=zfile.entries();
    ZipEntry ze=null;
    byte[] buf=new byte[1024];
    int tmp=1;
    while (zList.hasMoreElements()) {
      ze=(ZipEntry)zList.nextElement();
      monitor.subTask(ze.getName());
      if (ze.isDirectory()) {
        File f=new File(unzipdir + ze.getName());
        f.mkdirs();
        continue;
      }
      unzipdir=unzipdir.replace('\\','/');
      if (!unzipdir.endsWith(""String_Node_Str"")) {
        unzipdir=unzipdir + ""String_Node_Str"";
      }
      String filename=unzipdir + ze.getName();
      File zeF=new File(filename);
      if (!zeF.getParentFile().exists()) {
        zeF.getParentFile().mkdirs();
      }
      OutputStream os=null;
      InputStream is=null;
      try {
        os=new BufferedOutputStream(new FileOutputStream(zeF));
        is=new BufferedInputStream(zfile.getInputStream(ze));
        int readLen=0;
        while ((readLen=is.read(buf,0,1024)) != -1) {
          os.write(buf,0,readLen);
        }
      }
 catch (      IOException e) {
        Log.error(e.getMessage(),e);
      }
 finally {
        try {
          if (is != null) {
            is.close();
          }
        }
 catch (        Exception e) {
        }
        try {
          if (os != null) {
            os.close();
          }
        }
 catch (        Exception e) {
        }
      }
      if (interval == 1) {
        monitor.worked(step);
      }
 else {
        if (tmp >= interval) {
          monitor.worked(step);
          tmp=1;
        }
 else {
          tmp++;
        }
      }
    }
  }
 catch (  IOException e) {
    Log.error(e.getMessage(),e);
    throw e;
  }
 finally {
    if (zfile != null) {
      try {
        zfile.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","/** 
 * DOC aiming Comment method ""unZipFile"".
 * @param zipfile
 * @param unzipdir
 * @throws IOException 
 * @throws Exception
 */
public static void unZipFile(String zipfile,String unzipdir) throws IOException {
  File unzipF=new File(unzipdir);
  if (!unzipF.exists()) {
    unzipF.mkdirs();
  }
  ZipFile zfile=null;
  try {
    zfile=new ZipFile(zipfile);
    Enumeration zList=zfile.entries();
    ZipEntry ze=null;
    byte[] buf=new byte[1024];
    while (zList.hasMoreElements()) {
      ze=(ZipEntry)zList.nextElement();
      if (ze.isDirectory()) {
        File f=new File(unzipdir + ze.getName());
        f.mkdirs();
        continue;
      }
      unzipdir=unzipdir.replace('\\','/');
      if (!unzipdir.endsWith(""String_Node_Str"")) {
        unzipdir=unzipdir + ""String_Node_Str"";
      }
      String filename=unzipdir + ze.getName();
      File zeF=new File(filename);
      if (!zeF.getParentFile().exists()) {
        zeF.getParentFile().mkdirs();
      }
      OutputStream os=null;
      InputStream is=null;
      try {
        os=new BufferedOutputStream(new FileOutputStream(zeF));
        is=new BufferedInputStream(zfile.getInputStream(ze));
        int readLen=0;
        while ((readLen=is.read(buf,0,1024)) != -1) {
          os.write(buf,0,readLen);
        }
      }
 catch (      IOException e) {
        Log.error(e.getMessage(),e);
      }
 finally {
        try {
          if (is != null) {
            is.close();
          }
        }
 catch (        Exception e) {
        }
        try {
          if (os != null) {
            os.close();
          }
        }
 catch (        Exception e) {
        }
      }
    }
  }
 catch (  IOException e) {
    Log.error(e.getMessage(),e);
    throw e;
  }
 finally {
    if (zfile != null) {
      try {
        zfile.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",0.7713004484304933
146056,"public static void main(String[] args){
  try {
    zipFile(""String_Node_Str"",""String_Node_Str"");
    unZipFile(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    File barf=new File(""String_Node_Str"");
    removeTalendLibsFromBarFile(barf);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.7638190954773869
146057,"/** 
 * DOC hbhong Comment method ""unZipFile"". same with unZipFile(String zipfile, String unzipdir) method except having a progressMonitor
 * @param zipfile
 * @param unzipdir
 * @param totalProgress
 * @param monitor
 * @throws Exception
 */
public static void unZipFile(String zipfile,String unzipdir,int totalProgress,IProgressMonitor monitor) throws Exception {
  monitor.setTaskName(""String_Node_Str"");
  File unzipF=new File(unzipdir);
  if (!unzipF.exists()) {
    unzipF.mkdirs();
  }
  ZipFile zfile=new ZipFile(zipfile);
  int total=zfile.size();
  int interval, step;
  if (totalProgress / total > 0) {
    interval=1;
    step=Math.round(totalProgress / total);
  }
 else {
    step=1;
    interval=Math.round(total / totalProgress + 0.5f);
  }
  Enumeration zList=zfile.entries();
  ZipEntry ze=null;
  byte[] buf=new byte[1024];
  int tmp=1;
  while (zList.hasMoreElements()) {
    ze=(ZipEntry)zList.nextElement();
    monitor.subTask(ze.getName());
    if (ze.isDirectory()) {
      File f=new File(unzipdir + ze.getName());
      f.mkdirs();
      continue;
    }
    unzipdir=unzipdir.replace('\\','/');
    if (!unzipdir.endsWith(""String_Node_Str"")) {
      unzipdir=unzipdir + ""String_Node_Str"";
    }
    String filename=unzipdir + ze.getName();
    File zeF=new File(filename);
    if (!zeF.getParentFile().exists()) {
      zeF.getParentFile().mkdirs();
    }
    OutputStream os=new BufferedOutputStream(new FileOutputStream(zeF));
    InputStream is=new BufferedInputStream(zfile.getInputStream(ze));
    int readLen=0;
    while ((readLen=is.read(buf,0,1024)) != -1) {
      os.write(buf,0,readLen);
    }
    is.close();
    os.close();
    if (interval == 1) {
      monitor.worked(step);
    }
 else {
      if (tmp >= interval) {
        monitor.worked(step);
        tmp=1;
      }
 else {
        tmp++;
      }
    }
  }
  zfile.close();
}","/** 
 * DOC hbhong Comment method ""unZipFile"". same with unZipFile(String zipfile, String unzipdir) method except having a progressMonitor
 * @param zipfile
 * @param unzipdir
 * @param totalProgress
 * @param monitor
 * @throws IOException
 * @throws Exception
 */
public static void unZipFile(String zipfile,String unzipdir,int totalProgress,IProgressMonitor monitor) throws IOException {
  monitor.setTaskName(""String_Node_Str"");
  File unzipF=new File(unzipdir);
  if (!unzipF.exists()) {
    unzipF.mkdirs();
  }
  ZipFile zfile=null;
  try {
    zfile=new ZipFile(zipfile);
    int total=zfile.size();
    int interval, step;
    if (totalProgress / total > 0) {
      interval=1;
      step=Math.round(totalProgress / total);
    }
 else {
      step=1;
      interval=Math.round(total / totalProgress + 0.5f);
    }
    Enumeration zList=zfile.entries();
    ZipEntry ze=null;
    byte[] buf=new byte[1024];
    int tmp=1;
    while (zList.hasMoreElements()) {
      ze=(ZipEntry)zList.nextElement();
      monitor.subTask(ze.getName());
      if (ze.isDirectory()) {
        File f=new File(unzipdir + ze.getName());
        f.mkdirs();
        continue;
      }
      unzipdir=unzipdir.replace('\\','/');
      if (!unzipdir.endsWith(""String_Node_Str"")) {
        unzipdir=unzipdir + ""String_Node_Str"";
      }
      String filename=unzipdir + ze.getName();
      File zeF=new File(filename);
      if (!zeF.getParentFile().exists()) {
        zeF.getParentFile().mkdirs();
      }
      OutputStream os=null;
      InputStream is=null;
      try {
        os=new BufferedOutputStream(new FileOutputStream(zeF));
        is=new BufferedInputStream(zfile.getInputStream(ze));
        int readLen=0;
        while ((readLen=is.read(buf,0,1024)) != -1) {
          os.write(buf,0,readLen);
        }
      }
 catch (      IOException e) {
        Log.error(e.getMessage(),e);
      }
 finally {
        try {
          if (is != null) {
            is.close();
          }
        }
 catch (        Exception e) {
        }
        try {
          if (os != null) {
            os.close();
          }
        }
 catch (        Exception e) {
        }
      }
      if (interval == 1) {
        monitor.worked(step);
      }
 else {
        if (tmp >= interval) {
          monitor.worked(step);
          tmp=1;
        }
 else {
          tmp++;
        }
      }
    }
  }
 catch (  IOException e) {
    Log.error(e.getMessage(),e);
    throw e;
  }
 finally {
    if (zfile != null) {
      try {
        zfile.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",0.7575078440161362
146058,"public static EDBType getDBType(){
  Object dbtype=getConfiguration().get(""String_Node_Str"");
  if (dbtype != null && dbtype.toString().equals(EDBType.ORACLE.getName())) {
    return EDBType.ORACLE;
  }
  if (dbtype != null && dbtype.toString().equals(EDBType.BERKELEY.getName())) {
    return EDBType.BERKELEY;
  }
  return EDBType.EXIST;
}","public static EDBType getDBType(){
  Object dbtype=getConfiguration().get(""String_Node_Str"");
  if (dbtype != null && dbtype.toString().equals(EDBType.ORACLE.getName())) {
    return EDBType.ORACLE;
  }
  if (dbtype != null && dbtype.toString().equals(EDBType.BERKELEY.getName())) {
    return EDBType.BERKELEY;
  }
  if (dbtype != null && dbtype.toString().equals(EDBType.QIZX.getName())) {
    return EDBType.QIZX;
  }
  return EDBType.EXIST;
}",0.866581956797967
146059,"/** 
 * DOC aiming Comment method ""unZipFile"".
 * @param zipfile
 * @param unzipdir
 * @throws Exception
 */
public static void unZipFile(String zipfile,String unzipdir) throws Exception {
  File unzipF=new File(unzipdir);
  if (!unzipF.exists()) {
    unzipF.mkdirs();
  }
  ZipFile zfile=new ZipFile(zipfile);
  Enumeration zList=zfile.entries();
  ZipEntry ze=null;
  byte[] buf=new byte[1024];
  while (zList.hasMoreElements()) {
    ze=(ZipEntry)zList.nextElement();
    if (ze.isDirectory()) {
      File f=new File(unzipdir + ze.getName());
      f.mkdirs();
      continue;
    }
    unzipdir=unzipdir.replace('\\','/');
    if (!unzipdir.endsWith(""String_Node_Str"")) {
      unzipdir=unzipdir + ""String_Node_Str"";
    }
    String filename=unzipdir + ze.getName();
    File zeF=new File(filename);
    if (!zeF.getParentFile().exists()) {
      zeF.getParentFile().mkdirs();
    }
    OutputStream os=new BufferedOutputStream(new FileOutputStream(zeF));
    InputStream is=new BufferedInputStream(zfile.getInputStream(ze));
    int readLen=0;
    while ((readLen=is.read(buf,0,1024)) != -1) {
      os.write(buf,0,readLen);
    }
    is.close();
    os.close();
  }
  zfile.close();
}","/** 
 * DOC hbhong Comment method ""unZipFile"". same with unZipFile(String zipfile, String unzipdir) method except having a progressMonitor
 * @param zipfile
 * @param unzipdir
 * @param totalProgress
 * @param monitor
 * @throws Exception
 */
public static void unZipFile(String zipfile,String unzipdir,int totalProgress,IProgressMonitor monitor) throws Exception {
  monitor.setTaskName(""String_Node_Str"");
  File unzipF=new File(unzipdir);
  if (!unzipF.exists()) {
    unzipF.mkdirs();
  }
  ZipFile zfile=new ZipFile(zipfile);
  int total=zfile.size();
  int interval, step;
  if (totalProgress / total > 0) {
    interval=1;
    step=Math.round(totalProgress / total);
  }
 else {
    step=1;
    interval=Math.round(total / totalProgress + 0.5f);
  }
  Enumeration zList=zfile.entries();
  ZipEntry ze=null;
  byte[] buf=new byte[1024];
  int tmp=1;
  while (zList.hasMoreElements()) {
    ze=(ZipEntry)zList.nextElement();
    monitor.subTask(ze.getName());
    if (ze.isDirectory()) {
      File f=new File(unzipdir + ze.getName());
      f.mkdirs();
      continue;
    }
    unzipdir=unzipdir.replace('\\','/');
    if (!unzipdir.endsWith(""String_Node_Str"")) {
      unzipdir=unzipdir + ""String_Node_Str"";
    }
    String filename=unzipdir + ze.getName();
    File zeF=new File(filename);
    if (!zeF.getParentFile().exists()) {
      zeF.getParentFile().mkdirs();
    }
    OutputStream os=new BufferedOutputStream(new FileOutputStream(zeF));
    InputStream is=new BufferedInputStream(zfile.getInputStream(ze));
    int readLen=0;
    while ((readLen=is.read(buf,0,1024)) != -1) {
      os.write(buf,0,readLen);
    }
    is.close();
    os.close();
    if (interval == 1) {
      monitor.worked(step);
    }
 else {
      if (tmp >= interval) {
        monitor.worked(step);
        tmp=1;
      }
 else {
        tmp++;
      }
    }
  }
  zfile.close();
}",0.7758564437194128
146060,"public ArrayList<ArrayList<String>> getCrossReferencingContent(String tableName) throws XtentisWebappException {
  try {
    String[] results=Util.getPort().getItems(new WSGetItems(new WSDataClusterPK(Configuration.datacluster),tableName,null,-1,0,-1)).getStrings();
    DocumentBuilder documentBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
    XPath xpath=XPathFactory.newInstance().newXPath();
    ArrayList<ArrayList<String>> list=new ArrayList<ArrayList<String>>();
    for (int i=1; i < results.length; i++) {
      Element lineElement=documentBuilder.parse(new InputSource(new StringReader(results[i]))).getDocumentElement();
      NodeList rowList=(NodeList)xpath.evaluate(""String_Node_Str"",lineElement,XPathConstants.NODESET);
      ArrayList<String> fields=new ArrayList<String>();
      for (int j=0; j < rowList.getLength(); j++) {
{
          NodeList textNodes=rowList.item(j).getChildNodes();
          String val=""String_Node_Str"";
          if (textNodes.getLength() > 0) {
            String text=textNodes.item(0).getNodeValue();
            if (text != null)             val=text;
          }
          fields.add(val);
        }
      }
      list.add(fields);
    }
    if (results.length > 0)     return list;
 else     return null;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","public ArrayList<ArrayList<String>> getCrossReferencingContent(String tableName) throws XtentisWebappException {
  try {
    String[] results=Util.getPort().getItems(new WSGetItems(new WSDataClusterPK(Configuration.datacluster),tableName,null,-1,0,-1)).getStrings();
    DocumentBuilder documentBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
    XPath xpath=XPathFactory.newInstance().newXPath();
    ArrayList<ArrayList<String>> list=new ArrayList<ArrayList<String>>();
    for (int i=0; i < results.length; i++) {
      Element lineElement=documentBuilder.parse(new InputSource(new StringReader(results[i]))).getDocumentElement();
      NodeList rowList=(NodeList)xpath.evaluate(""String_Node_Str"",lineElement,XPathConstants.NODESET);
      ArrayList<String> fields=new ArrayList<String>();
      for (int j=0; j < rowList.getLength(); j++) {
{
          NodeList textNodes=rowList.item(j).getChildNodes();
          String val=""String_Node_Str"";
          if (textNodes.getLength() > 0) {
            String text=textNodes.item(0).getNodeValue();
            if (text != null)             val=text;
          }
          fields.add(val);
        }
      }
      list.add(fields);
    }
    if (results.length > 0)     return list;
 else     return null;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}",0.9992603550295858
146061,"public ListRange getUsers(String regex,String language) throws Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + regex + ""String_Node_Str""+ language);
  try {
    WSWhereItem wi=new WSWhereItem();
    if ((regex == null) || (""String_Node_Str"".equals(regex)) || ""String_Node_Str"".equals(regex)) {
      wi=null;
    }
 else {
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,regex,WSStringPredicate.NONE,true);
      wi.setWhereCondition(wc);
    }
    String[] results=Util.getPort().getItems(new WSGetItems(new WSDataClusterPK(dataclusterPK),""String_Node_Str"",wi,0,0,Integer.MAX_VALUE)).getStrings();
    ArrayList<User> names=new ArrayList<User>();
    for (int i=1; i < results.length; i++) {
      User user=User.parse(results[i]);
      names.add(user);
    }
    ListRange listRange=new ListRange();
    listRange.setData(names.toArray(new User[names.size()]));
    listRange.setTotalSize(names.size());
    return listRange;
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new Exception(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public ListRange getUsers(String regex,String language) throws Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + regex + ""String_Node_Str""+ language);
  try {
    WSWhereItem wi=new WSWhereItem();
    if ((regex == null) || (""String_Node_Str"".equals(regex)) || ""String_Node_Str"".equals(regex)) {
      wi=null;
    }
 else {
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,regex,WSStringPredicate.NONE,true);
      wi.setWhereCondition(wc);
    }
    String[] results=Util.getPort().getItems(new WSGetItems(new WSDataClusterPK(dataclusterPK),""String_Node_Str"",wi,0,0,Integer.MAX_VALUE)).getStrings();
    ArrayList<User> names=new ArrayList<User>();
    for (int i=0; i < results.length; i++) {
      User user=User.parse(results[i]);
      names.add(user);
    }
    ListRange listRange=new ListRange();
    listRange.setData(names.toArray(new User[names.size()]));
    listRange.setTotalSize(names.size());
    return listRange;
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new Exception(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9991438356164384
146062,"public ArrayList<ArrayList<String>> getCrossReferencingContent(String tableName) throws XtentisWebappException {
  try {
    String[] results=Util.getPort().getItems(new WSGetItems(new WSDataClusterPK(Configuration.datacluster),tableName,null,-1,0,-1)).getStrings();
    DocumentBuilder documentBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
    XPath xpath=XPathFactory.newInstance().newXPath();
    ArrayList<ArrayList<String>> list=new ArrayList<ArrayList<String>>();
    for (int i=0; i < results.length; i++) {
      Element lineElement=documentBuilder.parse(new InputSource(new StringReader(results[i]))).getDocumentElement();
      NodeList rowList=(NodeList)xpath.evaluate(""String_Node_Str"",lineElement,XPathConstants.NODESET);
      ArrayList<String> fields=new ArrayList<String>();
      for (int j=0; j < rowList.getLength(); j++) {
{
          NodeList textNodes=rowList.item(j).getChildNodes();
          String val=""String_Node_Str"";
          if (textNodes.getLength() > 0) {
            String text=textNodes.item(0).getNodeValue();
            if (text != null)             val=text;
          }
          fields.add(val);
        }
      }
      list.add(fields);
    }
    if (results.length > 0)     return list;
 else     return null;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","public ArrayList<ArrayList<String>> getCrossReferencingContent(String tableName) throws XtentisWebappException {
  try {
    String[] results=Util.getPort().getItems(new WSGetItems(new WSDataClusterPK(Configuration.datacluster),tableName,null,-1,0,-1)).getStrings();
    DocumentBuilder documentBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
    XPath xpath=XPathFactory.newInstance().newXPath();
    ArrayList<ArrayList<String>> list=new ArrayList<ArrayList<String>>();
    for (int i=1; i < results.length; i++) {
      Element lineElement=documentBuilder.parse(new InputSource(new StringReader(results[i]))).getDocumentElement();
      NodeList rowList=(NodeList)xpath.evaluate(""String_Node_Str"",lineElement,XPathConstants.NODESET);
      ArrayList<String> fields=new ArrayList<String>();
      for (int j=0; j < rowList.getLength(); j++) {
{
          NodeList textNodes=rowList.item(j).getChildNodes();
          String val=""String_Node_Str"";
          if (textNodes.getLength() > 0) {
            String text=textNodes.item(0).getNodeValue();
            if (text != null)             val=text;
          }
          fields.add(val);
        }
      }
      list.add(fields);
    }
    if (results.length > 0)     return list;
 else     return null;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}",0.9992603550295858
146063,"public ListRange getUsers(String regex,String language) throws Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + regex + ""String_Node_Str""+ language);
  try {
    WSWhereItem wi=new WSWhereItem();
    if ((regex == null) || (""String_Node_Str"".equals(regex)) || ""String_Node_Str"".equals(regex)) {
      wi=null;
    }
 else {
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,regex,WSStringPredicate.NONE,true);
      wi.setWhereCondition(wc);
    }
    String[] results=Util.getPort().getItems(new WSGetItems(new WSDataClusterPK(dataclusterPK),""String_Node_Str"",wi,0,0,Integer.MAX_VALUE)).getStrings();
    ArrayList<User> names=new ArrayList<User>();
    for (int i=0; i < results.length; i++) {
      User user=User.parse(results[i]);
      names.add(user);
    }
    ListRange listRange=new ListRange();
    listRange.setData(names.toArray(new User[names.size()]));
    listRange.setTotalSize(names.size());
    return listRange;
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new Exception(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public ListRange getUsers(String regex,String language) throws Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + regex + ""String_Node_Str""+ language);
  try {
    WSWhereItem wi=new WSWhereItem();
    if ((regex == null) || (""String_Node_Str"".equals(regex)) || ""String_Node_Str"".equals(regex)) {
      wi=null;
    }
 else {
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,regex,WSStringPredicate.NONE,true);
      wi.setWhereCondition(wc);
    }
    String[] results=Util.getPort().getItems(new WSGetItems(new WSDataClusterPK(dataclusterPK),""String_Node_Str"",wi,0,0,Integer.MAX_VALUE)).getStrings();
    ArrayList<User> names=new ArrayList<User>();
    for (int i=1; i < results.length; i++) {
      User user=User.parse(results[i]);
      names.add(user);
    }
    ListRange listRange=new ListRange();
    listRange.setData(names.toArray(new User[names.size()]));
    listRange.setTotalSize(names.size());
    return listRange;
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new Exception(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9991438356164384
146064,"@Override public void fillContextMenu(TreeObject xobject,IMenuManager manager){
switch (xobject.getType()) {
case TreeObject._SERVER_:
    manager.add(new VersioningXObjectAction(ServerView.show(),VersioningXObjectAction.ACTION_TYPE_TAGUNIVERSE));
  break;
default :
if (xobject.getType() != TreeObject.WORKFLOW_PROCESS && xobject.getType() != TreeObject.JOB && Util.hasTags(xobject)) manager.add(new VersioningXObjectAction(ServerView.show(),VersioningXObjectAction.ACTION_TYPE_VERSIONS));
break;
}
}","@Override public void fillContextMenu(TreeObject xobject,IMenuManager manager){
switch (xobject.getType()) {
case TreeObject._SERVER_:
    manager.add(new VersioningXObjectAction(ServerView.show(),VersioningXObjectAction.ACTION_TYPE_TAGUNIVERSE));
  break;
default :
if (xobject.getType() != TreeObject.WORKFLOW_PROCESS && xobject.getType() != TreeObject.JOB && Util.hasTags(xobject) && xobject.getType() != TreeObject.DATA_MODEL_TYPES_RESOURCE && xobject.getType() != TreeObject.DATA_MODEL_RESOURCE) manager.add(new VersioningXObjectAction(ServerView.show(),VersioningXObjectAction.ACTION_TYPE_VERSIONS));
break;
}
}",0.8962432915921288
146065,"public void run(){
  if (this.server != null) {
    ISelection selection=server.getViewer().getSelection();
    xobject=(TreeParent)((IStructuredSelection)selection).getFirstElement();
  }
  if (xobject.getType() != TreeObject.JOB_REGISTRY)   return;
  try {
    XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
    FileDialog fileDialog=new FileDialog(server.getSite().getShell(),SWT.OPEN);
    fileDialog.setFilterExtensions(new String[]{""String_Node_Str""});
    String name=fileDialog.open();
    if (name != null) {
      JobInfo info=getJobInfo(name);
      WSMDMJobArray array=port.getMDMJob(new WSMDMNULL());
      if (checkExist(array,info)) {
        MessageDialog.openWarning(this.server.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return;
      }
      String fileName=info.getJobname() + ""String_Node_Str"" + info.getJobversion()+ ""String_Node_Str"";
      String endpointaddress=xobject.getEndpointAddress();
      String uploadURL=new URL(endpointaddress).getProtocol() + ""String_Node_Str"" + new URL(endpointaddress).getHost()+ ""String_Node_Str""+ new URL(endpointaddress).getPort()+ ""String_Node_Str""+ fileName;
      String remoteFile=Util.uploadFileToAppServer(uploadURL,name,""String_Node_Str"",""String_Node_Str"");
      port.putMDMJob(new WSPUTMDMJob(info.getJobname(),info.getJobversion()));
      TreeObject obj=new TreeObject(info.getJobname() + ""String_Node_Str"" + info.getJobversion(),xobject.getServerRoot(),TreeObject.JOB,info,null);
      xobject.addChild(obj);
      LocalTreeObjectRepository.getInstance().mergeNewTreeObject(obj);
      XObjectEditor editpart=(XObjectEditor)server.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(obj,obj.getDisplayName()),""String_Node_Str"");
    }
  }
 catch (  Exception e) {
  }
}","public void run(){
  if (this.server != null) {
    ISelection selection=server.getViewer().getSelection();
    xobject=(TreeParent)((IStructuredSelection)selection).getFirstElement();
  }
  if (xobject.getType() != TreeObject.JOB_REGISTRY)   return;
  try {
    XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
    FileDialog fileDialog=new FileDialog(server.getSite().getShell(),SWT.OPEN);
    fileDialog.setFilterExtensions(new String[]{""String_Node_Str""});
    String name=fileDialog.open();
    boolean recover=false;
    boolean exist=false;
    if (name != null) {
      JobInfo info=getJobInfo(name);
      WSMDMJobArray array=port.getMDMJob(new WSMDMNULL());
      exist=checkExist(array,info);
      if (exist) {
        recover=MessageDialog.openConfirm(this.server.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
        if (!recover)         return;
 else         MessageDialog.openWarning(this.server.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      }
      String fileName=info.getJobname() + ""String_Node_Str"" + info.getJobversion()+ ""String_Node_Str"";
      String endpointaddress=xobject.getEndpointAddress();
      String uploadURL=new URL(endpointaddress).getProtocol() + ""String_Node_Str"" + new URL(endpointaddress).getHost()+ ""String_Node_Str""+ new URL(endpointaddress).getPort()+ ""String_Node_Str""+ fileName;
      String remoteFile=Util.uploadFileToAppServer(uploadURL,name,""String_Node_Str"",""String_Node_Str"");
      if (!exist) {
        port.putMDMJob(new WSPUTMDMJob(info.getJobname(),info.getJobversion()));
        TreeObject obj=new TreeObject(info.getJobname() + ""String_Node_Str"" + info.getJobversion(),xobject.getServerRoot(),TreeObject.JOB,info,null);
        xobject.addChild(obj);
        LocalTreeObjectRepository.getInstance().mergeNewTreeObject(obj);
        XObjectEditor editpart=(XObjectEditor)server.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(obj,obj.getDisplayName()),""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
  }
}",0.9141315014720314
146066,"@Override public void fillContextMenu(TreeObject xobject,IMenuManager manager){
switch (xobject.getType()) {
case TreeObject._SERVER_:
    manager.add(new VersioningXObjectAction(ServerView.show(),VersioningXObjectAction.ACTION_TYPE_VERSIONS));
  break;
default :
if (xobject.getType() != TreeObject.WORKFLOW_PROCESS && xobject.getType() != TreeObject.JOB && Util.hasTags(xobject)) manager.add(new VersioningXObjectAction(ServerView.show(),VersioningXObjectAction.ACTION_TYPE_TAGUNIVERSE));
break;
}
}","@Override public void fillContextMenu(TreeObject xobject,IMenuManager manager){
switch (xobject.getType()) {
case TreeObject._SERVER_:
    manager.add(new VersioningXObjectAction(ServerView.show(),VersioningXObjectAction.ACTION_TYPE_TAGUNIVERSE));
  break;
default :
if (xobject.getType() != TreeObject.WORKFLOW_PROCESS && xobject.getType() != TreeObject.JOB && Util.hasTags(xobject)) manager.add(new VersioningXObjectAction(ServerView.show(),VersioningXObjectAction.ACTION_TYPE_VERSIONS));
break;
}
}",0.9720558882235528
146067,"@Override protected void createFormContent(IManagedForm managedForm){
  try {
    managedForm.getForm().setText(this.getTitle());
    toolkit=managedForm.getToolkit();
    Composite composite=managedForm.getForm().getBody();
    composite.setLayout(new GridLayout(1,false));
    Composite separator=toolkit.createCompositeSeparator(composite);
    separator.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    ((GridData)separator.getLayoutData()).heightHint=2;
    ccrollComposite=new ScrolledComposite(composite,SWT.H_SCROLL | SWT.V_SCROLL);
    ccrollComposite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    processCom=new Group(ccrollComposite,0);
    processCom.setText(""String_Node_Str"");
    processCom.setBackground(processCom.getShell().getDisplay().getSystemColor(SWT.COLOR_WHITE));
    processCom.setLayout(new GridLayout(1,false));
    GridData gd=new GridData(SWT.FILL,SWT.CENTER,true,true,1,1);
    gd.heightHint=150;
    processCom.setLayoutData(gd);
    ccrollComposite.setContent(processCom);
    ccrollComposite.setExpandHorizontal(true);
    ccrollComposite.setExpandVertical(true);
    ccrollComposite.setMinSize(400,4 * 31);
    plist=new ProcessList(toolkit,processCom,ccrollComposite,viewer);
    xobject=getXObject();
    port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
    WSWorkflowProcessDefinitionUUID uuid=(WSWorkflowProcessDefinitionUUID)xobject.getWsKey();
    WSProcessInstanceArray array=port.workflowGetProcessInstances(new WSWorkflowGetProcessInstances(uuid));
    if (array != null && array.getInstance() != null) {
      for (      final WSProcessInstance instance : array.getInstance()) {
        final ProcessWidget pw=plist.add(instance.getName());
        pw.setPort(port);
        pw.getStatusLabel().setText(instance.getState());
      }
    }
    Label label1=toolkit.createLabel(composite,""String_Node_Str"");
    label1.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    String[] columns={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    createTable(composite,columns);
    plist.setViewer(viewer);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void createFormContent(IManagedForm managedForm){
  try {
    managedForm.getForm().setText(this.getTitle());
    toolkit=managedForm.getToolkit();
    Composite composite=managedForm.getForm().getBody();
    composite.setLayout(new GridLayout(1,false));
    Composite separator=toolkit.createCompositeSeparator(composite);
    separator.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    ((GridData)separator.getLayoutData()).heightHint=2;
    ccrollComposite=new ScrolledComposite(composite,SWT.H_SCROLL | SWT.V_SCROLL);
    ccrollComposite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    processCom=new Group(ccrollComposite,0);
    processCom.setText(""String_Node_Str"");
    processCom.setBackground(processCom.getShell().getDisplay().getSystemColor(SWT.COLOR_WHITE));
    processCom.setLayout(new GridLayout(1,false));
    GridData gd=new GridData(SWT.FILL,SWT.CENTER,true,true,1,1);
    gd.heightHint=150;
    processCom.setLayoutData(gd);
    ccrollComposite.setContent(processCom);
    ccrollComposite.setExpandHorizontal(true);
    ccrollComposite.setExpandVertical(true);
    ccrollComposite.setMinSize(400,4 * 31);
    xobject=getXObject();
    port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
    plist=new ProcessList(port,toolkit,processCom,ccrollComposite,viewer);
    WSWorkflowProcessDefinitionUUID uuid=(WSWorkflowProcessDefinitionUUID)xobject.getWsKey();
    WSProcessInstanceArray array=port.workflowGetProcessInstances(new WSWorkflowGetProcessInstances(uuid));
    if (array != null && array.getInstance() != null) {
      for (      final WSProcessInstance instance : array.getInstance()) {
        final ProcessWidget pw=plist.add(instance.getName());
        pw.setPort(port);
        pw.getStatusLabel().setText(instance.getState());
      }
    }
    Label label1=toolkit.createLabel(composite,""String_Node_Str"");
    label1.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    String[] columns={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    createTable(composite,columns);
    plist.setViewer(viewer);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9677849366807376
146068,"public ProcessWidget add(String name){
  if (map.get(name) != null) {
    MessageDialog.openWarning(null,""String_Node_Str"",name + ""String_Node_Str"");
    return null;
  }
  final ProcessWidget pw=new ProcessWidget(toolkit,parent,name,this,viewer);
  pw.getDelButton().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      delete(pw.getName());
    }
  }
);
  map.put(name,pw);
  parent.layout(true);
  ccrollComposite.setMinSize(400,31 * map.size());
  return pw;
}","public ProcessWidget add(String name){
  if (map.get(name) != null) {
    MessageDialog.openWarning(null,""String_Node_Str"",name + ""String_Node_Str"");
    return null;
  }
  final ProcessWidget pw=new ProcessWidget(toolkit,parent,name,this,viewer);
  pw.getDelButton().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        delete(pw.getName());
        port.workflowDeleteProcessInstances(new WSWorkflowDeleteProcessInstancesRequest(pw.getName()));
      }
 catch (      RemoteException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  map.put(name,pw);
  parent.layout(true);
  ccrollComposite.setMinSize(400,31 * map.size());
  return pw;
}",0.8402555910543131
146069,"@Override public void widgetSelected(SelectionEvent e){
  delete(pw.getName());
}","@Override public void widgetSelected(SelectionEvent e){
  try {
    delete(pw.getName());
    port.workflowDeleteProcessInstances(new WSWorkflowDeleteProcessInstancesRequest(pw.getName()));
  }
 catch (  RemoteException e1) {
    e1.printStackTrace();
  }
}",0.4792899408284023
146070,"public ProcessList(FormToolkit toolkit,Composite composite,ScrolledComposite ccrollComposite,TableViewer viewer){
  this.toolkit=toolkit;
  this.parent=composite;
  this.ccrollComposite=ccrollComposite;
  this.viewer=viewer;
}","public ProcessList(XtentisPort port,FormToolkit toolkit,Composite composite,ScrolledComposite ccrollComposite,TableViewer viewer){
  this.port=port;
  this.toolkit=toolkit;
  this.parent=composite;
  this.ccrollComposite=ccrollComposite;
  this.viewer=viewer;
}",0.9281314168377824
146071,"private void create(){
  process=toolkit.createLabel(parent,name);
  GridData gd=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  gd.widthHint=240;
  process.setLayoutData(gd);
  Label label=toolkit.createLabel(parent,""String_Node_Str"");
  statusLabel=toolkit.createLabel(parent,""String_Node_Str"");
  gd=new GridData(SWT.FILL,SWT.CENTER,false,true,1,1);
  gd.widthHint=300;
  statusLabel.setLayoutData(gd);
  startButton=toolkit.createButton(parent,""String_Node_Str"",SWT.TOGGLE);
  startButton.setImage(ImageCache.getCreatedImage(EImage.RUN_EXC.getPath()));
  startButton.setToolTipText(""String_Node_Str"");
  startButton.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  stopButton=toolkit.createButton(parent,""String_Node_Str"",SWT.TOGGLE);
  stopButton.setImage(ImageCache.getCreatedImage(EImage.STOP.getPath()));
  stopButton.setToolTipText(""String_Node_Str"");
  stopButton.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  suspendButton=toolkit.createButton(parent,""String_Node_Str"",SWT.TOGGLE);
  suspendButton.setImage(ImageCache.getCreatedImage(EImage.SUSPEND.getPath()));
  suspendButton.setToolTipText(""String_Node_Str"");
  suspendButton.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  suspendButton.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      if (suspendButton.getSelection()) {
        suspendButton.setText(""String_Node_Str"");
        suspendButton.redraw();
      }
 else {
        suspendButton.setText(""String_Node_Str"");
        suspendButton.redraw();
      }
    }
  }
);
  delButton=toolkit.createButton(parent,""String_Node_Str"",SWT.TOGGLE);
  delButton.setImage(ImageCache.getCreatedImage(EImage.DELETE_OBJ.getPath()));
  delButton.setToolTipText(""String_Node_Str"");
  delButton.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  startButton.addSelectionListener(listener);
  stopButton.addSelectionListener(listener);
  suspendButton.addSelectionListener(listener);
  label.addMouseListener(mouseListener);
  process.addMouseListener(mouseListener);
  statusLabel.addMouseListener(mouseListener);
  statusLabel.addMouseListener(mouseListener);
  parent.addMouseListener(mouseListener);
}","private void create(){
  process=toolkit.createLabel(parent,name);
  GridData gd=new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1);
  gd.widthHint=240;
  process.setLayoutData(gd);
  Label label=toolkit.createLabel(parent,""String_Node_Str"");
  statusLabel=toolkit.createLabel(parent,""String_Node_Str"");
  gd=new GridData(SWT.FILL,SWT.CENTER,false,true,1,1);
  gd.widthHint=300;
  statusLabel.setLayoutData(gd);
  delButton=toolkit.createButton(parent,""String_Node_Str"",SWT.TOGGLE);
  delButton.setImage(ImageCache.getCreatedImage(EImage.DELETE_OBJ.getPath()));
  delButton.setToolTipText(""String_Node_Str"");
  delButton.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  label.addMouseListener(mouseListener);
  process.addMouseListener(mouseListener);
  statusLabel.addMouseListener(mouseListener);
  statusLabel.addMouseListener(mouseListener);
  parent.addMouseListener(mouseListener);
}",0.461734693877551
146072,"/** 
 * checkup the  configuration
 * @throws XtentisException
 * @ejb.interface-method view-type = ""local""
 * @ejb.facade-method
 */
public boolean checkConfigure(String conf) throws com.amalto.core.util.XtentisException {
  try {
    Document doc=Util.parse(conf);
    Util.validate(doc.getDocumentElement(),getConfigurationSchema());
    start();
    configuration=(SvnConfiguration)Unmarshaller.unmarshal(SvnConfiguration.class,new InputSource(new StringReader(conf)));
    new SvnHandler(configuration).list(""String_Node_Str"",null);
  }
 catch (  Exception e) {
    String err=""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(err,e);
    throw new XtentisException(err);
  }
  return true;
}","/** 
 * checkup the  configuration
 * @throws XtentisException
 * @ejb.interface-method view-type = ""local""
 * @ejb.facade-method
 */
public boolean checkConfigure(String conf) throws com.amalto.core.util.XtentisException {
  try {
    Document doc=Util.parse(conf);
    Util.validate(doc.getDocumentElement(),getConfigurationSchema());
    configuration=(SvnConfiguration)Unmarshaller.unmarshal(SvnConfiguration.class,new InputSource(new StringReader(conf)));
    start();
    new SvnHandler(configuration).list(""String_Node_Str"",null);
  }
 catch (  Exception e) {
    String err=""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(err,e);
    throw new XtentisException(err);
  }
  return true;
}",0.9836888331242158
146073,"public void onMessage(Message msg){
  if (msg instanceof TextMessage) {
    try {
      TextMessage tm=(TextMessage)msg;
      Logger.getLogger(this.getClass()).info(""String_Node_Str"" + tm.getText());
      AutoCommitToSvnMsg msg1=AutoCommitToSvnMsg.unmarshal(tm.getText());
      Util.getVersioningSystemCtrlLocal().commitItem(new VersioningSystemPOJOPK(msg1.getVersionSystemPk()),msg1.getItemPk(),msg1.getComment());
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
  }
}","public void onMessage(Message msg){
  TextMessage tm=null;
  if (msg instanceof TextMessage) {
    try {
      tm=(TextMessage)msg;
      Logger.getLogger(this.getClass()).info(""String_Node_Str"" + tm.getText());
      AutoCommitToSvnMsg msg1=AutoCommitToSvnMsg.unmarshal(tm.getText());
      Util.getVersioningSystemCtrlLocal().commitItem(new VersioningSystemPOJOPK(msg1.getVersionSystemPk()),msg1.getItemPk(),msg1.getComment());
    }
 catch (    Throwable t) {
      Logger.getLogger(this.getClass()).info(""String_Node_Str"");
      try {
        Util.getXmlServerCtrlLocal().putDocumentFromString(tm.getText(),tm.getJMSMessageID(),AutoCommitToSvnSendBean.FailedAutoCommitSvnMessage,null);
      }
 catch (      Exception e) {
      }
    }
  }
}",0.7469684721099434
146074,"@Override public void init(ServletConfig config) throws ServletException {
  super.init(config);
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
  try {
    XtentisPort port=Util.getPort(null,null,Util._FORCE_RMI_);
    if (!port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK(Configuration.datacluster))).is_true()) {
      port.putDataCluster(new WSPutDataCluster(new WSDataCluster(Configuration.datacluster,""String_Node_Str"",""String_Node_Str"")));
    }
    if (!port.existsDataModel(new WSExistsDataModel(new WSDataModelPK(Configuration.datamodel))).is_true()) {
      port.putDataModel(new WSPutDataModel(new WSDataModel(Configuration.datamodel,""String_Node_Str"",""String_Node_Str"")));
    }
  }
 catch (  Exception e) {
    String err=""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(this.getClass()).error(err,e);
    throw new ServletException(err);
  }
}","@Override public void init(ServletConfig config) throws ServletException {
  super.init(config);
}",0.1934846989141165
146075,"@Override public void init(ServletConfig config) throws ServletException {
  super.init(config);
  try {
    Util.getAjaxSubject();
  }
 catch (  Exception e1) {
    return;
  }
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
  try {
    if (!Util.getPort().existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK(Configuration.datacluster))).is_true()) {
      Util.getPort().putDataCluster(new WSPutDataCluster(new WSDataCluster(Configuration.datacluster,""String_Node_Str"",""String_Node_Str"")));
    }
    if (!Util.getPort().existsDataModel(new WSExistsDataModel(new WSDataModelPK(Configuration.datamodel))).is_true()) {
      Util.getPort().putDataModel(new WSPutDataModel(new WSDataModel(Configuration.datamodel,""String_Node_Str"",""String_Node_Str"")));
    }
  }
 catch (  Exception e) {
    String err=""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(this.getClass()).error(err,e);
    throw new ServletException(err);
  }
}","@Override public void init(ServletConfig config) throws ServletException {
  super.init(config);
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
  try {
    XtentisPort port=Util.getPort(null,null,Util._FORCE_RMI_);
    if (!port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK(Configuration.datacluster))).is_true()) {
      port.putDataCluster(new WSPutDataCluster(new WSDataCluster(Configuration.datacluster,""String_Node_Str"",""String_Node_Str"")));
    }
    if (!port.existsDataModel(new WSExistsDataModel(new WSDataModelPK(Configuration.datamodel))).is_true()) {
      port.putDataModel(new WSPutDataModel(new WSDataModel(Configuration.datamodel,""String_Node_Str"",""String_Node_Str"")));
    }
  }
 catch (  Exception e) {
    String err=""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(this.getClass()).error(err,e);
    throw new ServletException(err);
  }
}",0.2139830508474576
146076,"public void execute(){
  List<String> list=new ArrayList<String>();
  try {
    DocumentBuilder builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
    InputStream in=Thread.currentThread().getContextClassLoader().getResourceAsStream(MIGRATION_FILE_NAME);
    Document doc=builder.parse(in);
    NodeList nodelist=doc.getElementsByTagName(""String_Node_Str"");
    Node root=nodelist.item(0);
    Node child=root.getFirstChild();
    for (int id=0; id < root.getChildNodes().getLength(); id++) {
      Node node=root.getChildNodes().item(id);
      if (node instanceof Element)       list.add(node.getNodeName());
    }
  }
 catch (  Exception e) {
    org.apache.log4j.Logger.getLogger(this.getClass()).error(e.getCause());
    return;
  }
  Class[] clses=getDirectoryEntries(list);
  try {
    for (    Class cls : clses) {
      Constructor cons=cls.getConstructor(new Class[]{});
      Object handler=cons.newInstance(new Object[]{});
      Method executeMethod=cls.getMethod(""String_Node_Str"",new Class[]{});
      executeMethod.invoke(handler,new Object[]{});
    }
  }
 catch (  Exception ex) {
    org.apache.log4j.Logger.getLogger(this.getClass()).error(ex.getMessage());
  }
  ItemPOJO.clearCache();
  ObjectPOJO.clearCache();
}","public void execute(){
  if (!isExeuted) {
    List<String> list=new ArrayList<String>();
    try {
      DocumentBuilder builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
      InputStream in=Thread.currentThread().getContextClassLoader().getResourceAsStream(MIGRATION_FILE_NAME);
      Document doc=builder.parse(in);
      NodeList nodelist=doc.getElementsByTagName(""String_Node_Str"");
      Node root=nodelist.item(0);
      Node child=root.getFirstChild();
      for (int id=0; id < root.getChildNodes().getLength(); id++) {
        Node node=root.getChildNodes().item(id);
        if (node instanceof Element)         list.add(node.getNodeName());
      }
    }
 catch (    Exception e) {
      org.apache.log4j.Logger.getLogger(this.getClass()).error(e.getCause());
      return;
    }
    for (    String clazz : list) {
      try {
        AbstractMigrationTask task=(AbstractMigrationTask)Class.forName(clazz).newInstance();
        task.start();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    ItemPOJO.clearCache();
    ObjectPOJO.clearCache();
  }
  isExeuted=true;
}",0.6870805369127517
146077,"public boolean saveSyncItem(SynchronizationItem item) throws Exception {
  logger.debug(""String_Node_Str"");
  boolean ret=true;
  try {
    String resolvedXml=item.getNode().serialize();
    item.setStatus(SynchronizationItem.STATUS_RESOLVED);
    logger.debug(""String_Node_Str"" + resolvedXml + ""String_Node_Str""+ item.getStatus());
    item.setResolvedProjection(resolvedXml);
    WSSynchronizationItem wsitem=new WSSynchronizationItem();
    wsitem=item.POJO2WS(item);
    logger.debug(""String_Node_Str"" + wsitem.getStatus().getValue());
    Util.getPort().putSynchronizationItem(new WSPutSynchronizationItem(wsitem));
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    ret=false;
    throw new Exception(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
 finally {
    return ret;
  }
}","public boolean saveSyncItem(SynchronizationItem item) throws Exception {
  logger.debug(""String_Node_Str"");
  boolean ret=true;
  try {
    String resolvedXml=item.getNode().serialize();
    item.setStatus(SynchronizationItem.STATUS_RESOLVED);
    logger.debug(""String_Node_Str"" + resolvedXml + ""String_Node_Str""+ item.getStatus());
    item.setResolvedProjection(resolvedXml);
    Util.getPort().resolveSynchronizationItem(new WSResolveSynchronizationItem(new WSSynchronizationItemPK(new String[]{""String_Node_Str"",item.getItemPOJOPK().getUniqueID()}),resolvedXml));
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    ret=false;
    throw new Exception(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
 finally {
    return ret;
  }
}",0.7874306839186691
146078,"protected boolean isDone(){
  Boolean res=false;
  try {
    String content=Util.getXmlServerCtrlLocal().getDocumentAsString(null,CLUSTER_MIGRATION,UNIQUE_MIGRATION);
    if (content == null)     return false;
    AbstractMigrationTask cpy=unmarshal(content);
    handlerMap=cpy.getHandlerMap();
    res=handlerMap.get(this.getClass().getName());
    if (res == null)     return false;
  }
 catch (  Exception e) {
    org.apache.log4j.Logger.getLogger(this.getClass()).error(e.getMessage());
    return res;
  }
  return res;
}","protected boolean isDone(){
  Boolean res=false;
  try {
    if (handlerMap == null) {
      String content=Util.getXmlServerCtrlLocal().getDocumentAsString(null,CLUSTER_MIGRATION,UNIQUE_MIGRATION);
      if (content == null)       return false;
      AbstractMigrationTask cpy=unmarshal(content);
      handlerMap=cpy.getHandlerMap();
    }
    res=handlerMap.get(this.getClass().getName());
    if (res == null)     return false;
  }
 catch (  Exception e) {
    org.apache.log4j.Logger.getLogger(this.getClass()).error(e.getMessage());
    return res;
  }
  return res;
}",0.9582577132486388
146079,"protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
  request.setCharacterEncoding(""String_Node_Str"");
  response.setContentType(""String_Node_Str"");
  Configuration config=null;
  try {
    org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"" + request.getSession().getId());
    config=(Configuration)request.getSession().getAttribute(""String_Node_Str"");
    if (config == null) {
      org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    }
  }
 catch (  Exception e1) {
    e1.printStackTrace();
  }
  String start=request.getParameter(""String_Node_Str"");
  String limit=request.getParameter(""String_Node_Str"");
  String sortCol=(request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : ""String_Node_Str"");
  String sortDir=(request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : ""String_Node_Str"");
  String viewName=request.getParameter(""String_Node_Str"");
  String criteria=request.getParameter(""String_Node_Str"");
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + ""String_Node_Str"" + start + ""String_Node_Str""+ ""String_Node_Str""+ limit+ ""String_Node_Str""+ ""String_Node_Str""+ criteria+ ""String_Node_Str""+ ""String_Node_Str""+ viewName+ ""String_Node_Str""+ ""String_Node_Str""+ sortCol+ ""String_Node_Str""+ ""String_Node_Str""+ sortDir);
  JSONObject json=new JSONObject();
  String[] results;
  ArrayList<String[]> itemsBrowserContent=new ArrayList<String[]>();
  try {
    int max=Integer.parseInt(limit);
    int skip=Integer.parseInt(start);
    View view=new View(viewName);
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    ArrayList<WSWhereItem> conditions=new ArrayList<WSWhereItem>();
    WSWhereItem wi;
    String[] filters=criteria.split(""String_Node_Str"");
    String[] filterXpaths=new String[filters.length];
    String[] filterOperators=new String[filters.length];
    String[] filterValues=new String[filters.length];
    for (int i=0; i < filters.length; i++) {
      if (filters[i].split(""String_Node_Str"").length > 2) {
        filterXpaths[i]=filters[i].split(""String_Node_Str"")[0];
        filterOperators[i]=filters[i].split(""String_Node_Str"")[1];
        filterValues[i]=filters[i].split(""String_Node_Str"")[2];
      }
    }
    for (int i=0; i < filterValues.length; i++) {
      if ((filterValues[i] == null) || (""String_Node_Str"".equals(filterValues[i])) || ""String_Node_Str"".equals(filterValues[i])) {
        continue;
      }
      WSWhereCondition wc=new WSWhereCondition(filterXpaths[i],getOperator(filterOperators[i]),filterValues[i],WSStringPredicate.NONE,false);
      WSWhereItem item=new WSWhereItem(wc,null,null);
      conditions.add(item);
    }
    if (conditions.size() == 0) {
      wi=null;
    }
 else {
      WSWhereAnd and=new WSWhereAnd(conditions.toArray(new WSWhereItem[conditions.size()]));
      wi=new WSWhereItem(null,and,null);
    }
    if (""String_Node_Str"".equals(filterXpaths[0])) {
      results=Util.getPort().viewSearch(new WSViewSearch(new WSDataClusterPK(config.getCluster()),new WSViewPK(view.getViewPK()),wi,-1,skip,max,null,null)).getStrings();
    }
 else {
      org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
      results=Util.getPort().viewSearch(new WSViewSearch(new WSDataClusterPK(config.getCluster()),new WSViewPK(view.getViewPK()),wi,-1,skip,max,null,null)).getStrings();
      org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
    }
    for (int i=0; i < results.length; i++) {
      results[i]=results[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
      results[i]=results[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
      results[i]=openingTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      results[i]=closingTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      results[i]=emptyTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      String[] elements=results[i].split(""String_Node_Str"");
      String[] fields=new String[view.getViewables().length];
      int count=Math.min(elements.length,fields.length);
      for (int j=0; j < count; j++) {
        fields[j]=StringEscapeUtils.unescapeXml(elements[j]);
      }
      itemsBrowserContent.add(fields);
    }
    int totalCount=(Integer)request.getSession().getAttribute(""String_Node_Str"");
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + totalCount);
    int tmp=0;
    for (int i=0; i < view.getViewables().length; i++) {
      org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + sortCol + ""String_Node_Str""+ view.getViewables()[i]+ ""String_Node_Str""+ i);
      if (sortCol.equals(""String_Node_Str"" + view.getViewables()[i])) {
        tmp=i;
        break;
      }
    }
    final int column=tmp;
    final String direction=sortDir;
    Comparator sort;
    if (direction.equals(""String_Node_Str"")) {
      sort=new Comparator(){
        public int compare(        Object o1,        Object o2){
          try {
            Double test=(Double.parseDouble(((String[])o1)[column]) - Double.parseDouble(((String[])o2)[column]));
            return test.intValue();
          }
 catch (          Exception e) {
          }
          try {
            return (((String[])o1)[column]).compareTo(((String[])o2)[column]);
          }
 catch (          Exception e) {
            return 0;
          }
        }
      }
;
    }
 else {
      sort=new Comparator(){
        public int compare(        Object o1,        Object o2){
          try {
            Double test=(Double.parseDouble(((String[])o2)[column]) - Double.parseDouble(((String[])o1)[column]));
            return test.intValue();
          }
 catch (          Exception e) {
          }
          try {
            return (((String[])o2)[column]).compareTo(((String[])o1)[column]);
          }
 catch (          Exception e) {
            return 0;
          }
        }
      }
;
    }
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    Collections.sort(itemsBrowserContent,sort);
    if (max > totalCount)     max=totalCount;
    if (max > (totalCount - skip)) {
      max=totalCount - skip;
    }
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    json.put(""String_Node_Str"",totalCount);
    ArrayList<JSONObject> rows=new ArrayList<JSONObject>();
    for (int i=skip; i < (max + skip); i++) {
      JSONObject fields=new JSONObject();
      for (int j=0; j < itemsBrowserContent.get(i - skip).length; j++) {
        fields.put(""String_Node_Str"" + view.getViewables()[j],itemsBrowserContent.get(i - skip)[j]);
      }
      rows.add(fields);
    }
    json.put(""String_Node_Str"",rows);
    json.put(""String_Node_Str"",true);
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(json);
  }
 catch (  XtentisWebappException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  PrintWriter writer=response.getWriter();
  writer.write(json.toString());
  writer.close();
}","protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
  request.setCharacterEncoding(""String_Node_Str"");
  response.setContentType(""String_Node_Str"");
  Configuration config=null;
  try {
    org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"" + request.getSession().getId());
    config=(Configuration)request.getSession().getAttribute(""String_Node_Str"");
    if (config == null) {
      org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    }
  }
 catch (  Exception e1) {
    e1.printStackTrace();
  }
  String start=request.getParameter(""String_Node_Str"");
  String limit=request.getParameter(""String_Node_Str"");
  String sortCol=(request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : ""String_Node_Str"");
  String sortDir=(request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : ""String_Node_Str"");
  String viewName=request.getParameter(""String_Node_Str"");
  String criteria=request.getParameter(""String_Node_Str"");
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + ""String_Node_Str"" + start + ""String_Node_Str""+ ""String_Node_Str""+ limit+ ""String_Node_Str""+ ""String_Node_Str""+ criteria+ ""String_Node_Str""+ ""String_Node_Str""+ viewName+ ""String_Node_Str""+ ""String_Node_Str""+ sortCol+ ""String_Node_Str""+ ""String_Node_Str""+ sortDir);
  JSONObject json=new JSONObject();
  String[] results;
  ArrayList<String[]> itemsBrowserContent=new ArrayList<String[]>();
  try {
    int max=Integer.parseInt(limit);
    int skip=Integer.parseInt(start);
    View view=new View(viewName);
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    ArrayList<WSWhereItem> conditions=new ArrayList<WSWhereItem>();
    WSWhereItem wi;
    String[] filters=criteria.split(""String_Node_Str"");
    String[] filterXpaths=new String[filters.length];
    String[] filterOperators=new String[filters.length];
    String[] filterValues=new String[filters.length];
    for (int i=0; i < filters.length; i++) {
      if (filters[i].split(""String_Node_Str"").length > 2) {
        filterXpaths[i]=filters[i].split(""String_Node_Str"")[0];
        filterOperators[i]=filters[i].split(""String_Node_Str"")[1];
        filterValues[i]=filters[i].split(""String_Node_Str"")[2];
      }
    }
    for (int i=0; i < filterValues.length; i++) {
      if ((filterValues[i] == null) || (""String_Node_Str"".equals(filterValues[i])) || ""String_Node_Str"".equals(filterValues[i])) {
        continue;
      }
      WSWhereCondition wc=new WSWhereCondition(filterXpaths[i],getOperator(filterOperators[i]),filterValues[i],WSStringPredicate.NONE,false);
      WSWhereItem item=new WSWhereItem(wc,null,null);
      conditions.add(item);
    }
    if (conditions.size() == 0) {
      wi=null;
    }
 else {
      WSWhereAnd and=new WSWhereAnd(conditions.toArray(new WSWhereItem[conditions.size()]));
      wi=new WSWhereItem(null,and,null);
    }
    if (""String_Node_Str"".equals(filterXpaths[0])) {
      results=Util.getPort().viewSearch(new WSViewSearch(new WSDataClusterPK(config.getCluster()),new WSViewPK(view.getViewPK()),wi,-1,skip,max,null,null)).getStrings();
    }
 else {
      org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
      results=Util.getPort().viewSearch(new WSViewSearch(new WSDataClusterPK(config.getCluster()),new WSViewPK(view.getViewPK()),wi,-1,skip,max,null,null)).getStrings();
      org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
    }
    for (int i=0; i < results.length; i++) {
      results[i]=results[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
      results[i]=results[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
      results[i]=openingTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      results[i]=closingTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      results[i]=emptyTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      String[] elements=results[i].split(""String_Node_Str"");
      String[] fields=new String[view.getViewables().length];
      int count=Math.min(elements.length,fields.length);
      for (int j=0; j < count; j++) {
        fields[j]=StringEscapeUtils.unescapeXml(elements[j]);
      }
      itemsBrowserContent.add(fields);
    }
    int totalCount=(Integer)request.getSession().getAttribute(""String_Node_Str"");
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + totalCount);
    int tmp=0;
    for (int i=0; i < view.getViewables().length; i++) {
      org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + sortCol + ""String_Node_Str""+ view.getViewables()[i]+ ""String_Node_Str""+ i);
      if (sortCol.equals(""String_Node_Str"" + view.getViewables()[i])) {
        tmp=i;
        break;
      }
    }
    final int column=tmp;
    final String direction=sortDir;
    Comparator sort;
    if (direction.equals(""String_Node_Str"")) {
      sort=new Comparator(){
        public int compare(        Object o1,        Object o2){
          try {
            Double test=(Double.parseDouble(((String[])o1)[column]) - Double.parseDouble(((String[])o2)[column]));
            return test.intValue();
          }
 catch (          Exception e) {
          }
          try {
            return (((String[])o1)[column]).compareTo(((String[])o2)[column]);
          }
 catch (          Exception e) {
            return 0;
          }
        }
      }
;
    }
 else {
      sort=new Comparator(){
        public int compare(        Object o1,        Object o2){
          try {
            Double test=(Double.parseDouble(((String[])o2)[column]) - Double.parseDouble(((String[])o1)[column]));
            return test.intValue();
          }
 catch (          Exception e) {
          }
          try {
            return (((String[])o2)[column]).compareTo(((String[])o1)[column]);
          }
 catch (          Exception e) {
            return 0;
          }
        }
      }
;
    }
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    Collections.sort(itemsBrowserContent,sort);
    if (max > totalCount)     max=totalCount;
    if (max > (totalCount - skip)) {
      max=totalCount - skip;
    }
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    json.put(""String_Node_Str"",totalCount);
    ArrayList<JSONObject> rows=new ArrayList<JSONObject>();
    for (int i=skip; i < (max + skip); i++) {
      if (i - skip > itemsBrowserContent.size() - 1)       break;
      JSONObject fields=new JSONObject();
      for (int j=0; j < itemsBrowserContent.get(i - skip).length; j++) {
        fields.put(""String_Node_Str"" + view.getViewables()[j],itemsBrowserContent.get(i - skip)[j]);
      }
      rows.add(fields);
    }
    json.put(""String_Node_Str"",rows);
    json.put(""String_Node_Str"",true);
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(json);
  }
 catch (  XtentisWebappException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  PrintWriter writer=response.getWriter();
  writer.write(json.toString());
  writer.close();
}",0.9954738718968592
146080,"protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
  request.setCharacterEncoding(""String_Node_Str"");
  response.setContentType(""String_Node_Str"");
  Configuration config=null;
  try {
    org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"" + request.getSession().getId());
    config=(Configuration)request.getSession().getAttribute(""String_Node_Str"");
    if (config == null) {
      org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    }
  }
 catch (  Exception e1) {
    e1.printStackTrace();
  }
  String start=request.getParameter(""String_Node_Str"");
  String limit=request.getParameter(""String_Node_Str"");
  String sortCol=(request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : ""String_Node_Str"");
  String sortDir=(request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : ""String_Node_Str"");
  String viewName=request.getParameter(""String_Node_Str"");
  String criteria=request.getParameter(""String_Node_Str"");
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + ""String_Node_Str"" + start + ""String_Node_Str""+ ""String_Node_Str""+ limit+ ""String_Node_Str""+ ""String_Node_Str""+ criteria+ ""String_Node_Str""+ ""String_Node_Str""+ viewName+ ""String_Node_Str""+ ""String_Node_Str""+ sortCol+ ""String_Node_Str""+ ""String_Node_Str""+ sortDir);
  JSONObject json=new JSONObject();
  String[] results;
  ArrayList<String[]> itemsBrowserContent=new ArrayList<String[]>();
  try {
    int max=Integer.parseInt(limit);
    int skip=Integer.parseInt(start);
    View view=new View(viewName);
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    ArrayList<WSWhereItem> conditions=new ArrayList<WSWhereItem>();
    WSWhereItem wi;
    String[] filters=criteria.split(""String_Node_Str"");
    String[] filterXpaths=new String[filters.length];
    String[] filterOperators=new String[filters.length];
    String[] filterValues=new String[filters.length];
    for (int i=0; i < filters.length; i++) {
      if (filters[i].split(""String_Node_Str"").length > 2) {
        filterXpaths[i]=filters[i].split(""String_Node_Str"")[0];
        filterOperators[i]=filters[i].split(""String_Node_Str"")[1];
        filterValues[i]=filters[i].split(""String_Node_Str"")[2];
      }
    }
    for (int i=0; i < filterValues.length; i++) {
      if ((filterValues[i] == null) || (""String_Node_Str"".equals(filterValues[i])) || ""String_Node_Str"".equals(filterValues[i])) {
        continue;
      }
      WSWhereCondition wc=new WSWhereCondition(filterXpaths[i],getOperator(filterOperators[i]),filterValues[i],WSStringPredicate.NONE,false);
      WSWhereItem item=new WSWhereItem(wc,null,null);
      conditions.add(item);
    }
    if (conditions.size() == 0) {
      wi=null;
    }
 else {
      WSWhereAnd and=new WSWhereAnd(conditions.toArray(new WSWhereItem[conditions.size()]));
      wi=new WSWhereItem(null,and,null);
    }
    if (""String_Node_Str"".equals(filterXpaths[0])) {
      results=Util.getPort().viewSearch(new WSViewSearch(new WSDataClusterPK(config.getCluster()),new WSViewPK(view.getViewPK()),wi,-1,skip,max,null,null)).getStrings();
    }
 else {
      org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
      results=Util.getPort().viewSearch(new WSViewSearch(new WSDataClusterPK(config.getCluster()),new WSViewPK(view.getViewPK()),wi,-1,skip,max,null,null)).getStrings();
      org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
    }
    for (int i=0; i < results.length; i++) {
      results[i]=results[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
      results[i]=results[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
      results[i]=openingTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      results[i]=closingTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      results[i]=emptyTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      String[] elements=results[i].split(""String_Node_Str"");
      String[] fields=new String[view.getViewables().length];
      int count=Math.min(elements.length,fields.length);
      for (int j=0; j < count; j++) {
        fields[j]=StringEscapeUtils.unescapeXml(elements[j]);
      }
      itemsBrowserContent.add(fields);
    }
    int totalCount=(Integer)request.getSession().getAttribute(""String_Node_Str"");
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + totalCount);
    int tmp=0;
    for (int i=0; i < view.getViewables().length; i++) {
      org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + sortCol + ""String_Node_Str""+ view.getViewables()[i]+ ""String_Node_Str""+ i);
      if (sortCol.equals(""String_Node_Str"" + view.getViewables()[i])) {
        tmp=i;
        break;
      }
    }
    final int column=tmp;
    final String direction=sortDir;
    Comparator sort;
    if (direction.equals(""String_Node_Str"")) {
      sort=new Comparator(){
        public int compare(        Object o1,        Object o2){
          try {
            Double test=(Double.parseDouble(((String[])o1)[column]) - Double.parseDouble(((String[])o2)[column]));
            return test.intValue();
          }
 catch (          Exception e) {
          }
          try {
            return (((String[])o1)[column]).compareTo(((String[])o2)[column]);
          }
 catch (          Exception e) {
            return 0;
          }
        }
      }
;
    }
 else {
      sort=new Comparator(){
        public int compare(        Object o1,        Object o2){
          try {
            Double test=(Double.parseDouble(((String[])o2)[column]) - Double.parseDouble(((String[])o1)[column]));
            return test.intValue();
          }
 catch (          Exception e) {
          }
          try {
            return (((String[])o2)[column]).compareTo(((String[])o1)[column]);
          }
 catch (          Exception e) {
            return 0;
          }
        }
      }
;
    }
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    Collections.sort(itemsBrowserContent,sort);
    if (max > totalCount)     max=totalCount;
    if (max > (totalCount - skip)) {
      max=totalCount - skip;
    }
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    json.put(""String_Node_Str"",totalCount);
    ArrayList<JSONObject> rows=new ArrayList<JSONObject>();
    for (int i=skip; i < (max + skip); i++) {
      JSONObject fields=new JSONObject();
      for (int j=0; j < itemsBrowserContent.get(i - skip).length; j++) {
        fields.put(""String_Node_Str"" + view.getViewables()[j],itemsBrowserContent.get(i - skip)[j]);
      }
      rows.add(fields);
    }
    json.put(""String_Node_Str"",rows);
    json.put(""String_Node_Str"",true);
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(json);
  }
 catch (  XtentisWebappException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  PrintWriter writer=response.getWriter();
  writer.write(json.toString());
  writer.close();
}","protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
  request.setCharacterEncoding(""String_Node_Str"");
  response.setContentType(""String_Node_Str"");
  Configuration config=null;
  try {
    org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"" + request.getSession().getId());
    config=(Configuration)request.getSession().getAttribute(""String_Node_Str"");
    if (config == null) {
      org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    }
  }
 catch (  Exception e1) {
    e1.printStackTrace();
  }
  String start=request.getParameter(""String_Node_Str"");
  String limit=request.getParameter(""String_Node_Str"");
  String sortCol=(request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : ""String_Node_Str"");
  String sortDir=(request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : ""String_Node_Str"");
  String viewName=request.getParameter(""String_Node_Str"");
  String criteria=request.getParameter(""String_Node_Str"");
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + ""String_Node_Str"" + start + ""String_Node_Str""+ ""String_Node_Str""+ limit+ ""String_Node_Str""+ ""String_Node_Str""+ criteria+ ""String_Node_Str""+ ""String_Node_Str""+ viewName+ ""String_Node_Str""+ ""String_Node_Str""+ sortCol+ ""String_Node_Str""+ ""String_Node_Str""+ sortDir);
  JSONObject json=new JSONObject();
  String[] results;
  ArrayList<String[]> itemsBrowserContent=new ArrayList<String[]>();
  try {
    int max=Integer.parseInt(limit);
    int skip=Integer.parseInt(start);
    View view=new View(viewName);
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    ArrayList<WSWhereItem> conditions=new ArrayList<WSWhereItem>();
    WSWhereItem wi;
    String[] filters=criteria.split(""String_Node_Str"");
    String[] filterXpaths=new String[filters.length];
    String[] filterOperators=new String[filters.length];
    String[] filterValues=new String[filters.length];
    for (int i=0; i < filters.length; i++) {
      if (filters[i].split(""String_Node_Str"").length > 2) {
        filterXpaths[i]=filters[i].split(""String_Node_Str"")[0];
        filterOperators[i]=filters[i].split(""String_Node_Str"")[1];
        filterValues[i]=filters[i].split(""String_Node_Str"")[2];
      }
    }
    for (int i=0; i < filterValues.length; i++) {
      if ((filterValues[i] == null) || (""String_Node_Str"".equals(filterValues[i])) || ""String_Node_Str"".equals(filterValues[i])) {
        continue;
      }
      WSWhereCondition wc=new WSWhereCondition(filterXpaths[i],getOperator(filterOperators[i]),filterValues[i],WSStringPredicate.NONE,false);
      WSWhereItem item=new WSWhereItem(wc,null,null);
      conditions.add(item);
    }
    if (conditions.size() == 0) {
      wi=null;
    }
 else {
      WSWhereAnd and=new WSWhereAnd(conditions.toArray(new WSWhereItem[conditions.size()]));
      wi=new WSWhereItem(null,and,null);
    }
    if (""String_Node_Str"".equals(filterXpaths[0])) {
      results=Util.getPort().viewSearch(new WSViewSearch(new WSDataClusterPK(config.getCluster()),new WSViewPK(view.getViewPK()),wi,-1,skip,max,null,null)).getStrings();
    }
 else {
      org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
      results=Util.getPort().viewSearch(new WSViewSearch(new WSDataClusterPK(config.getCluster()),new WSViewPK(view.getViewPK()),wi,-1,skip,max,null,null)).getStrings();
      org.apache.log4j.Logger.getLogger(this.getClass()).trace(""String_Node_Str"");
    }
    for (int i=0; i < results.length; i++) {
      results[i]=results[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
      results[i]=results[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
      results[i]=openingTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      results[i]=closingTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      results[i]=emptyTags.matcher(results[i]).replaceAll(""String_Node_Str"");
      String[] elements=results[i].split(""String_Node_Str"");
      String[] fields=new String[view.getViewables().length];
      int count=Math.min(elements.length,fields.length);
      for (int j=0; j < count; j++) {
        fields[j]=StringEscapeUtils.unescapeXml(elements[j]);
      }
      itemsBrowserContent.add(fields);
    }
    int totalCount=(Integer)request.getSession().getAttribute(""String_Node_Str"");
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + totalCount);
    int tmp=0;
    for (int i=0; i < view.getViewables().length; i++) {
      org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + sortCol + ""String_Node_Str""+ view.getViewables()[i]+ ""String_Node_Str""+ i);
      if (sortCol.equals(""String_Node_Str"" + view.getViewables()[i])) {
        tmp=i;
        break;
      }
    }
    final int column=tmp;
    final String direction=sortDir;
    Comparator sort;
    if (direction.equals(""String_Node_Str"")) {
      sort=new Comparator(){
        public int compare(        Object o1,        Object o2){
          try {
            Double test=(Double.parseDouble(((String[])o1)[column]) - Double.parseDouble(((String[])o2)[column]));
            return test.intValue();
          }
 catch (          Exception e) {
          }
          try {
            return (((String[])o1)[column]).compareTo(((String[])o2)[column]);
          }
 catch (          Exception e) {
            return 0;
          }
        }
      }
;
    }
 else {
      sort=new Comparator(){
        public int compare(        Object o1,        Object o2){
          try {
            Double test=(Double.parseDouble(((String[])o2)[column]) - Double.parseDouble(((String[])o1)[column]));
            return test.intValue();
          }
 catch (          Exception e) {
          }
          try {
            return (((String[])o2)[column]).compareTo(((String[])o1)[column]);
          }
 catch (          Exception e) {
            return 0;
          }
        }
      }
;
    }
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    Collections.sort(itemsBrowserContent,sort);
    if (max > totalCount)     max=totalCount;
    if (max > (totalCount - skip)) {
      max=totalCount - skip;
    }
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"");
    json.put(""String_Node_Str"",totalCount);
    ArrayList<JSONObject> rows=new ArrayList<JSONObject>();
    for (int i=skip; i < (max + skip); i++) {
      if (i - skip > itemsBrowserContent.size() - 1)       break;
      JSONObject fields=new JSONObject();
      for (int j=0; j < itemsBrowserContent.get(i - skip).length; j++) {
        fields.put(""String_Node_Str"" + view.getViewables()[j],itemsBrowserContent.get(i - skip)[j]);
      }
      rows.add(fields);
    }
    json.put(""String_Node_Str"",rows);
    json.put(""String_Node_Str"",true);
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(json);
  }
 catch (  XtentisWebappException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  PrintWriter writer=response.getWriter();
  writer.write(json.toString());
  writer.close();
}",0.9954738718968592
146081,"public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.SINGLE | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  editors[0]=new TextCellEditor(table);
  browseViewer.setCellEditors(editors);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
      return values.toArray(new XSDElementDeclaration[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return true;
    }
    public void modify(    Object element,    String property,    Object value){
      TableItem item=(TableItem)element;
      XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
      if (!(BROWSE_ITEMS + elem.getName()).equals(value.toString())) {
        for (        XSDElementDeclaration theElem : declList) {
          if (theElem == elem)           continue;
          if ((BROWSE_ITEMS + theElem.getName()).equals(value.toString())) {
            MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
            return;
          }
        }
        List<Line> lines=browseItemToRoles.get(BROWSE_ITEMS + elem.getName());
        browseItemToRoles.remove(BROWSE_ITEMS + elem.getName());
        int prex=value.toString().indexOf(BROWSE_ITEMS);
        elem.setName(value.toString().substring(prex + BROWSE_ITEMS.length()));
        browseItemToRoles.put(value.toString(),lines);
        refreshRoleView(BROWSE_ITEMS + elem.getName());
        browseViewer.update(elem,null);
      }
    }
    public Object getValue(    Object element,    String property){
      XSDElementDeclaration elem=(XSDElementDeclaration)element;
      return BROWSE_ITEMS + elem.getName();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      XSDElementDeclaration decl=(XSDElementDeclaration)((IStructuredSelection)event.getSelection()).getFirstElement();
      refreshRoleView(BROWSE_ITEMS + decl.getName());
      UpdateComplexViewButton(true);
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.setColumnProperties(new String[]{INSTANCE_NAME});
  browseViewer.refresh();
  Label infoLabel=new Label(composite,SWT.NONE);
  infoLabel.setText(""String_Node_Str"");
  ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
  ruleColumn.setColumnWidth(250);
  List<String> roles=Util.getCachedXObjectsNameSet(page.getXObject(),TreeObject.ROLE);
  ruleColumn.setComboValues(roles.toArray(new String[]{}));
  ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
  acsColumn.setColumnWidth(250);
  acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
  complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),page.getManagedForm().getToolkit(),composite);
  complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
  complexTableViewer.create();
  complexTableViewer.getViewer().setInput(new ArrayList<Line>());
  UpdateComplexViewButton(false);
  setControl(composite);
}","public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.SINGLE | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  editors[0]=new TextCellEditor(table);
  browseViewer.setCellEditors(editors);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
      return values.toArray(new XSDElementDeclaration[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return true;
    }
    public void modify(    Object element,    String property,    Object value){
      TableItem item=(TableItem)element;
      XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
      if (!(BROWSE_ITEMS + elem.getName()).equals(value.toString())) {
        for (        XSDElementDeclaration theElem : declList) {
          if (theElem == elem)           continue;
          if ((BROWSE_ITEMS + theElem.getName()).equals(value.toString())) {
            MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
            return;
          }
        }
        List<Line> lines=browseItemToRoles.get(BROWSE_ITEMS + elem.getName());
        browseItemToRoles.remove(BROWSE_ITEMS + elem.getName());
        int prex=value.toString().indexOf(BROWSE_ITEMS);
        elem.setName(value.toString().substring(prex + BROWSE_ITEMS.length()));
        browseItemToRoles.put(value.toString(),lines);
        refreshRoleView(BROWSE_ITEMS + elem.getName());
        browseViewer.update(elem,null);
      }
    }
    public Object getValue(    Object element,    String property){
      XSDElementDeclaration elem=(XSDElementDeclaration)element;
      return BROWSE_ITEMS + elem.getName();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      XSDElementDeclaration decl=(XSDElementDeclaration)((IStructuredSelection)event.getSelection()).getFirstElement();
      refreshRoleView(BROWSE_ITEMS + decl.getName());
      UpdateComplexViewButton(true);
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.setColumnProperties(new String[]{INSTANCE_NAME});
  browseViewer.refresh();
  Label infoLabel=new Label(composite,SWT.NONE);
  infoLabel.setText(""String_Node_Str"");
  ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
  ruleColumn.setColumnWidth(250);
  List<String> roles=Util.getChildren(page.getXObject().getServerRoot(),TreeObject.ROLE);
  ruleColumn.setComboValues(roles.toArray(new String[]{}));
  ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
  acsColumn.setColumnWidth(250);
  acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
  complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),page.getManagedForm().getToolkit(),composite);
  complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
  complexTableViewer.create();
  complexTableViewer.getViewer().setInput(new ArrayList<Line>());
  UpdateComplexViewButton(false);
  setControl(composite);
}",0.99376026272578
146082,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=3;
  layout.makeColumnsEqualWidth=false;
  if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
    textControl=new CCombo(composite,SWT.BORDER | SWT.READ_ONLY);
    roles=Util.getCachedXObjectsNameSet(this.xObject,TreeObject.ROLE);
    ((CCombo)textControl).setItems(roles.toArray(new String[roles.size()]));
  }
 else {
    textControl=new Text(composite,SWT.BORDER | SWT.SINGLE);
  }
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  }
 else {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  }
  ((GridData)textControl.getLayoutData()).minimumWidth=400;
  textControl.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        xPaths.add(AnnotationOrderedListsDialog.getControlText(textControl));
        viewer.refresh();
      }
    }
  }
);
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    Button xpathButton=new Button(composite,SWT.PUSH | SWT.CENTER);
    xpathButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    xpathButton.setText(""String_Node_Str"");
    xpathButton.setToolTipText(""String_Node_Str"");
    xpathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        XpathSelectDialog dlg=new XpathSelectDialog(parentPage.getSite().getShell(),xObject.getParent(),""String_Node_Str"",parentPage.getSite(),false,dataModelName);
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          ((Text)textControl).setText(dlg.getXpath());
          dlg.close();
        }
      }
    }
);
  }
  Button addLabelButton=new Button(composite,SWT.PUSH | SWT.CENTER);
  addLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  addLabelButton.setText(""String_Node_Str"");
  addLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      boolean exist=false;
      for (Iterator it=xPaths.iterator(); it.hasNext(); ) {
        if (((String)it.next()).equals(getControlText(textControl)))         exist=true;
      }
      if (!exist && getControlText(textControl) != null && getControlText(textControl) != ""String_Node_Str"")       xPaths.add(getControlText(textControl));
      viewer.refresh();
    }
  }
);
  final String COLUMN=columnName;
  viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)viewer.getControl().getLayoutData()).heightHint=100;
  Table table=viewer.getTable();
  new TableColumn(table,SWT.CENTER).setText(COLUMN);
  table.getColumn(0).setWidth(500);
  for (int i=1, n=table.getColumnCount(); i < n; i++) {
    table.getColumn(i).pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  if (actionType == AnnotationOrderedListsDialog.AnnotationWrite_ActionType || actionType == AnnotationOrderedListsDialog.AnnotationHidden_ActionType) {
    editors[0]=new ComboBoxCellEditor(table,roles.toArray(new String[]{}),SWT.READ_ONLY);
  }
 else {
    editors[0]=new TextCellEditor(table);
  }
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> xPaths=(ArrayList<String>)inputElement;
      ArrayList<DescriptionLine> lines=new ArrayList<DescriptionLine>();
      for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
        String xPath=((String)iter.next());
        DescriptionLine line=new DescriptionLine(xPath);
        lines.add(line);
      }
      return lines.toArray(new DescriptionLine[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      DescriptionLine line=(DescriptionLine)element;
switch (columnIndex) {
case 0:
        return line.getLabel();
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
viewer.setColumnProperties(new String[]{COLUMN});
viewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return true;
  }
  public void modify(  Object element,  String property,  Object value){
    TableItem item=(TableItem)element;
    DescriptionLine line=(DescriptionLine)item.getData();
    String orgValue=line.getLabel();
    if (actionType != AnnotationWrite_ActionType && actionType != AnnotationHidden_ActionType) {
      int targetPos=xPaths.indexOf(value.toString());
      if (targetPos < 0) {
        line.setLabel(value.toString());
        xPaths.add(value.toString());
        viewer.update(line,null);
      }
 else       if (targetPos >= 0 && !value.toString().equals(orgValue)) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
      return;
    }
 else {
      String[] attrs=roles.toArray(new String[]{});
      value=attrs[Integer.parseInt(value.toString())];
      int pos=xPaths.indexOf(value.toString());
      if (pos >= 0 && !(orgValue.equals(value))) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        return;
      }
 else       if (pos < 0) {
        line.setLabel(value.toString());
        xPaths.set(xPaths.indexOf(orgValue),value.toString());
        viewer.update(line,null);
      }
    }
  }
  public Object getValue(  Object element,  String property){
    DescriptionLine line=(DescriptionLine)element;
    String value=line.getLabel();
    if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
      String[] attrs=roles.toArray(new String[]{});
      return Arrays.asList(attrs).indexOf(value);
    }
 else {
      return value;
    }
  }
}
);
viewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null)     ((Text)textControl).setText(line.getLabel());
  }
}
);
viewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
      DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
viewer.setInput(xPaths);
viewer.refresh();
Composite rightButtonsComposite=new Composite(composite,SWT.NULL);
rightButtonsComposite.setLayout(new GridLayout(1,true));
rightButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
Button upButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
upButton.setText(""String_Node_Str"");
upButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i > 0) {
          xPaths.remove(i);
          xPaths.add(i - 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i - 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button downButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
downButton.setText(""String_Node_Str"");
downButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i < xPaths.size() - 1) {
          xPaths.remove(i);
          xPaths.add(i + 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i + 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button delButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
delButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
delButton.setText(""String_Node_Str"");
delButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
textControl.setFocus();
if (actionType != AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType && actionType != AnnotationOrderedListsDialog.AnnotationTargetSystems_ActionType) {
  checkBox=new Button(composite,SWT.CHECK);
  checkBox.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,true,2,1));
  checkBox.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      recursive=checkBox.getSelection();
    }
  }
);
  checkBox.setSelection(recursive);
  checkBox.setText(""String_Node_Str"");
}
return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=3;
  layout.makeColumnsEqualWidth=false;
  if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
    textControl=new CCombo(composite,SWT.BORDER | SWT.READ_ONLY);
    roles=Util.getChildren(this.xObject.getServerRoot(),TreeObject.ROLE);
    ((CCombo)textControl).setItems(roles.toArray(new String[roles.size()]));
  }
 else {
    textControl=new Text(composite,SWT.BORDER | SWT.SINGLE);
  }
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  }
 else {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  }
  ((GridData)textControl.getLayoutData()).minimumWidth=400;
  textControl.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        xPaths.add(AnnotationOrderedListsDialog.getControlText(textControl));
        viewer.refresh();
      }
    }
  }
);
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    Button xpathButton=new Button(composite,SWT.PUSH | SWT.CENTER);
    xpathButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    xpathButton.setText(""String_Node_Str"");
    xpathButton.setToolTipText(""String_Node_Str"");
    xpathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        XpathSelectDialog dlg=new XpathSelectDialog(parentPage.getSite().getShell(),xObject.getParent(),""String_Node_Str"",parentPage.getSite(),false,dataModelName);
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          ((Text)textControl).setText(dlg.getXpath());
          dlg.close();
        }
      }
    }
);
  }
  Button addLabelButton=new Button(composite,SWT.PUSH | SWT.CENTER);
  addLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  addLabelButton.setText(""String_Node_Str"");
  addLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      boolean exist=false;
      for (Iterator it=xPaths.iterator(); it.hasNext(); ) {
        if (((String)it.next()).equals(getControlText(textControl)))         exist=true;
      }
      if (!exist && getControlText(textControl) != null && getControlText(textControl) != ""String_Node_Str"")       xPaths.add(getControlText(textControl));
      viewer.refresh();
    }
  }
);
  final String COLUMN=columnName;
  viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)viewer.getControl().getLayoutData()).heightHint=100;
  Table table=viewer.getTable();
  new TableColumn(table,SWT.CENTER).setText(COLUMN);
  table.getColumn(0).setWidth(500);
  for (int i=1, n=table.getColumnCount(); i < n; i++) {
    table.getColumn(i).pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  if (actionType == AnnotationOrderedListsDialog.AnnotationWrite_ActionType || actionType == AnnotationOrderedListsDialog.AnnotationHidden_ActionType) {
    editors[0]=new ComboBoxCellEditor(table,roles.toArray(new String[]{}),SWT.READ_ONLY);
  }
 else {
    editors[0]=new TextCellEditor(table);
  }
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> xPaths=(ArrayList<String>)inputElement;
      ArrayList<DescriptionLine> lines=new ArrayList<DescriptionLine>();
      for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
        String xPath=((String)iter.next());
        DescriptionLine line=new DescriptionLine(xPath);
        lines.add(line);
      }
      return lines.toArray(new DescriptionLine[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      DescriptionLine line=(DescriptionLine)element;
switch (columnIndex) {
case 0:
        return line.getLabel();
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
viewer.setColumnProperties(new String[]{COLUMN});
viewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return true;
  }
  public void modify(  Object element,  String property,  Object value){
    TableItem item=(TableItem)element;
    DescriptionLine line=(DescriptionLine)item.getData();
    String orgValue=line.getLabel();
    if (actionType != AnnotationWrite_ActionType && actionType != AnnotationHidden_ActionType) {
      int targetPos=xPaths.indexOf(value.toString());
      if (targetPos < 0) {
        line.setLabel(value.toString());
        xPaths.add(value.toString());
        viewer.update(line,null);
      }
 else       if (targetPos >= 0 && !value.toString().equals(orgValue)) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
      return;
    }
 else {
      String[] attrs=roles.toArray(new String[]{});
      value=attrs[Integer.parseInt(value.toString())];
      int pos=xPaths.indexOf(value.toString());
      if (pos >= 0 && !(orgValue.equals(value))) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        return;
      }
 else       if (pos < 0) {
        line.setLabel(value.toString());
        xPaths.set(xPaths.indexOf(orgValue),value.toString());
        viewer.update(line,null);
      }
    }
  }
  public Object getValue(  Object element,  String property){
    DescriptionLine line=(DescriptionLine)element;
    String value=line.getLabel();
    if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
      String[] attrs=roles.toArray(new String[]{});
      return Arrays.asList(attrs).indexOf(value);
    }
 else {
      return value;
    }
  }
}
);
viewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null)     ((Text)textControl).setText(line.getLabel());
  }
}
);
viewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
      DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
viewer.setInput(xPaths);
viewer.refresh();
Composite rightButtonsComposite=new Composite(composite,SWT.NULL);
rightButtonsComposite.setLayout(new GridLayout(1,true));
rightButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
Button upButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
upButton.setText(""String_Node_Str"");
upButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i > 0) {
          xPaths.remove(i);
          xPaths.add(i - 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i - 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button downButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
downButton.setText(""String_Node_Str"");
downButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i < xPaths.size() - 1) {
          xPaths.remove(i);
          xPaths.add(i + 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i + 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button delButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
delButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
delButton.setText(""String_Node_Str"");
delButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
textControl.setFocus();
if (actionType != AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType && actionType != AnnotationOrderedListsDialog.AnnotationTargetSystems_ActionType) {
  checkBox=new Button(composite,SWT.CHECK);
  checkBox.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,true,2,1));
  checkBox.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      recursive=checkBox.getSelection();
    }
  }
);
  checkBox.setSelection(recursive);
  checkBox.setText(""String_Node_Str"");
}
return composite;
}",0.9982004125883334
146083,"@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(""String_Node_Str"");
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setBackground(composite.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=1;
  comboDataCluster=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,2);
  comboDataCluster.getCombo().setEditable(false);
  List<String> dcs=Util.getCachedXObjectsNameSet(this.xObject,TreeObject.DATA_CLUSTER);
  dcs.add(0,""String_Node_Str"");
  comboDataCluster.getCombo().setItems(dcs.toArray(new String[dcs.size()]));
  if (xObject != null && xObject.getDisplayName() != null) {
    if (EXtentisObjects.DataCluster.getDisplayName().equalsIgnoreCase(xObject.getDisplayName())) {
      comboDataCluster.getCombo().select(0);
    }
 else {
      comboDataCluster.getCombo().setText(xObject.getDisplayName());
    }
  }
  fw=new FileSelectWidget(composite,""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},comboDataCluster.getCombo().getText());
  comboDataCluster.getCombo().addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (comboDataCluster.getCombo().getText().length() > 0) {
        fw.getText().setText(comboDataCluster.getCombo().getText());
        fw.setFilename(comboDataCluster.getCombo().getText());
      }
    }
  }
);
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(""String_Node_Str"");
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setBackground(composite.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=1;
  comboDataCluster=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,2);
  comboDataCluster.getCombo().setEditable(false);
  List<String> dcs=Util.getChildren(this.xObject.getServerRoot(),TreeObject.DATA_CLUSTER);
  dcs.add(0,""String_Node_Str"");
  comboDataCluster.getCombo().setItems(dcs.toArray(new String[dcs.size()]));
  if (xObject != null && xObject.getDisplayName() != null) {
    if (EXtentisObjects.DataCluster.getDisplayName().equalsIgnoreCase(xObject.getDisplayName())) {
      comboDataCluster.getCombo().select(0);
    }
 else {
      comboDataCluster.getCombo().setText(xObject.getDisplayName());
    }
  }
  fw=new FileSelectWidget(composite,""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},comboDataCluster.getCombo().getText());
  comboDataCluster.getCombo().addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (comboDataCluster.getCombo().getText().length() > 0) {
        fw.getText().setText(comboDataCluster.getCombo().getText());
        fw.setFilename(comboDataCluster.getCombo().getText());
      }
    }
  }
);
  return composite;
}",0.9867613819825638
146084,"@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(""String_Node_Str"");
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setBackground(composite.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=1;
  comboRole=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,2);
  comboRole.getCombo().setEditable(false);
  List<String> roles=Util.getCachedXObjectsNameSet(this.xObject,TreeObject.ROLE);
  comboRole.getCombo().setItems(roles.toArray(new String[roles.size()]));
  if (dataModelFilter.getRole() == null || dataModelFilter.getRole().length() == 0) {
    comboRole.getCombo().select(0);
  }
 else {
    comboRole.getCombo().setText(dataModelFilter.getRole());
  }
  btnAll=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnAll.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnAll.setSelection(dataModelFilter.isAll());
  btnReadOnly=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnReadOnly.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnReadOnly.setSelection(dataModelFilter.isReadOnly());
  btnWrite=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnWrite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnWrite.setSelection(dataModelFilter.isWriteAccess());
  btnHidden=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnHidden.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnHidden.setSelection(dataModelFilter.isHiddenAccess());
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(""String_Node_Str"");
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setBackground(composite.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=1;
  comboRole=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,2);
  comboRole.getCombo().setEditable(false);
  List<String> roles=Util.getChildren(this.xObject.getServerRoot(),TreeObject.ROLE);
  comboRole.getCombo().setItems(roles.toArray(new String[roles.size()]));
  if (dataModelFilter.getRole() == null || dataModelFilter.getRole().length() == 0) {
    comboRole.getCombo().select(0);
  }
 else {
    comboRole.getCombo().setText(dataModelFilter.getRole());
  }
  btnAll=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnAll.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnAll.setSelection(dataModelFilter.isAll());
  btnReadOnly=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnReadOnly.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnReadOnly.setSelection(dataModelFilter.isReadOnly());
  btnWrite=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnWrite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnWrite.setSelection(dataModelFilter.isWriteAccess());
  btnHidden=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnHidden.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnHidden.setSelection(dataModelFilter.isHiddenAccess());
  return composite;
}",0.9876543209876544
146085,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  final TreeParent tree=this.parent.findServerFolder(TreeObject.DATA_MODEL);
  TreeObject[] trees=tree.getChildren();
  ArrayList<String> systemDataModelValues=new ArrayList<String>();
  for (int i=0; i < trees.length; i++)   systemDataModelValues.add(((TreeObject)trees[i]).getDisplayName());
  dataModelCombo.setItems(systemDataModelValues.toArray(new String[systemDataModelValues.size()]));
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      changeDomTree(tree);
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  int index=systemDataModelValues.indexOf(dataModelName);
  if (index < 0)   dataModelCombo.select(0);
 else   dataModelCombo.select(index);
  changeDomTree(tree);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  final TreeParent tree=this.parent.findServerFolder(TreeObject.DATA_MODEL);
  List<String> systemDataModelValues=Util.getChildren(this.parent.getServerRoot(),TreeObject.DATA_MODEL);
  dataModelCombo.setItems(systemDataModelValues.toArray(new String[systemDataModelValues.size()]));
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      changeDomTree(tree);
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  int index=systemDataModelValues.indexOf(dataModelName);
  if (index < 0)   dataModelCombo.select(0);
 else   dataModelCombo.select(index);
  changeDomTree(tree);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}",0.9364622537082136
146086,"@Override protected void createFormContent(IManagedForm managedForm){
  managedForm.getForm().setText(this.getTitle());
  FormToolkit toolkit=managedForm.getToolkit();
  Composite composite=managedForm.getForm().getBody();
  composite.setLayout(new GridLayout(2,false));
  final LabelCombo comboRevision=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,1);
  comboRevision.getCombo().setEditable(false);
  final LabelCombo comboUniverse=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,1);
  comboUniverse.getCombo().setEditable(false);
  List<String> dcs=Util.getCachedXObjectsNameSet(getXObject(),TreeObject.UNIVERSE);
  comboUniverse.getCombo().setItems(dcs.toArray(new String[dcs.size()]));
  comboUniverse.getCombo().add(IConstants.HEAD,0);
  if (getXObject().getUniverse().trim().length() == 0) {
    comboUniverse.getCombo().setText(IConstants.HEAD);
  }
 else {
    comboUniverse.getCombo().setText(getXObject().getUniverse());
  }
  try {
    XtentisPort port=Util.getPort(new URL(getXObject().getEndpointAddress()),getXObject().getUniverse(),getXObject().getUsername(),getXObject().getPassword());
    Map<String,List<String>> map=Util.getUniverseMap(port);
    String name=getXObject().getDisplayName().replaceAll(""String_Node_Str"",""String_Node_Str"");
    List<String> revisions=map.get(name.trim());
    if (revisions != null)     comboRevision.getCombo().setItems(revisions.toArray(new String[revisions.size()]));
    comboRevision.getCombo().add(IConstants.HEAD,0);
    Matcher m=Pattern.compile(""String_Node_Str"").matcher(getXObject().getDisplayName());
    if (m.matches()) {
      String revision=m.group(2);
      comboRevision.getCombo().setText(revision);
    }
    final Map<String,List<String>> map2=Util.getUniverseMap2(port);
    comboRevision.getCombo().addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        if (comboRevision.getCombo().getText().equals(IConstants.HEAD)) {
          comboUniverse.getCombo().setText(IConstants.HEAD);
          return;
        }
        for (        Entry<String,List<String>> entry : map2.entrySet()) {
          if (entry.getValue().contains(comboRevision.getCombo().getText())) {
            comboUniverse.getCombo().setText(entry.getKey());
            break;
          }
        }
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void createFormContent(IManagedForm managedForm){
  managedForm.getForm().setText(this.getTitle());
  FormToolkit toolkit=managedForm.getToolkit();
  Composite composite=managedForm.getForm().getBody();
  composite.setLayout(new GridLayout(2,false));
  final LabelCombo comboRevision=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,1);
  comboRevision.getCombo().setEditable(false);
  final LabelCombo comboUniverse=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,1);
  comboUniverse.getCombo().setEditable(false);
  List<String> dcs=Util.getChildren(getXObject().getServerRoot(),TreeObject.UNIVERSE);
  comboUniverse.getCombo().setItems(dcs.toArray(new String[dcs.size()]));
  comboUniverse.getCombo().add(IConstants.HEAD,0);
  if (getXObject().getUniverse().trim().length() == 0) {
    comboUniverse.getCombo().setText(IConstants.HEAD);
  }
 else {
    comboUniverse.getCombo().setText(getXObject().getUniverse());
  }
  try {
    XtentisPort port=Util.getPort(new URL(getXObject().getEndpointAddress()),getXObject().getUniverse(),getXObject().getUsername(),getXObject().getPassword());
    Map<String,List<String>> map=Util.getUniverseMap(port);
    String name=getXObject().getDisplayName().replaceAll(""String_Node_Str"",""String_Node_Str"");
    List<String> revisions=map.get(name.trim());
    if (revisions != null)     comboRevision.getCombo().setItems(revisions.toArray(new String[revisions.size()]));
    comboRevision.getCombo().add(IConstants.HEAD,0);
    Matcher m=Pattern.compile(""String_Node_Str"").matcher(getXObject().getDisplayName());
    if (m.matches()) {
      String revision=m.group(2);
      comboRevision.getCombo().setText(revision);
    }
    final Map<String,List<String>> map2=Util.getUniverseMap2(port);
    comboRevision.getCombo().addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        if (comboRevision.getCombo().getText().equals(IConstants.HEAD)) {
          comboUniverse.getCombo().setText(IConstants.HEAD);
          return;
        }
        for (        Entry<String,List<String>> entry : map2.entrySet()) {
          if (entry.getValue().contains(comboRevision.getCombo().getText())) {
            comboUniverse.getCombo().setText(entry.getKey());
            break;
          }
        }
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.99052228271829
146087,"public TreeObject findObject(int type,String name){
  TreeObject[] allchildren=this.getChildren();
  for (int i=0; i < allchildren.length; i++) {
    if (allchildren[i] instanceof TreeParent) {
      return ((TreeParent)allchildren[i]).findObject(type,name);
    }
    if ((allchildren[i].getType() == type) && (allchildren[i].getDisplayName().equals(name)))     return allchildren[i];
  }
  return null;
}","public TreeObject findObject(int type,String name){
  TreeObject[] allchildren=this.getChildren();
  TreeObject obj=null;
  for (int i=0; i < allchildren.length; i++) {
    if (allchildren[i] instanceof TreeParent) {
      obj=((TreeParent)allchildren[i]).findObject(type,name);
    }
 else     if ((allchildren[i].getType() == type) && (allchildren[i].getDisplayName().equals(name)))     obj=allchildren[i];
  }
  return obj;
}",0.8729016786570744
146088,"public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.SINGLE | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  editors[0]=new TextCellEditor(table);
  browseViewer.setCellEditors(editors);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
      return values.toArray(new XSDElementDeclaration[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return true;
    }
    public void modify(    Object element,    String property,    Object value){
      TableItem item=(TableItem)element;
      XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
      if (!(BROWSE_ITEMS + elem.getName()).equals(value.toString())) {
        for (        XSDElementDeclaration theElem : declList) {
          if (theElem == elem)           continue;
          if ((BROWSE_ITEMS + theElem.getName()).equals(value.toString())) {
            MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
            return;
          }
        }
        List<Line> lines=browseItemToRoles.get(BROWSE_ITEMS + elem.getName());
        browseItemToRoles.remove(BROWSE_ITEMS + elem.getName());
        int prex=value.toString().indexOf(BROWSE_ITEMS);
        elem.setName(value.toString().substring(prex + BROWSE_ITEMS.length()));
        browseItemToRoles.put(value.toString(),lines);
        refreshRoleView(BROWSE_ITEMS + elem.getName());
        browseViewer.update(elem,null);
      }
    }
    public Object getValue(    Object element,    String property){
      XSDElementDeclaration elem=(XSDElementDeclaration)element;
      return BROWSE_ITEMS + elem.getName();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      XSDElementDeclaration decl=(XSDElementDeclaration)((IStructuredSelection)event.getSelection()).getFirstElement();
      refreshRoleView(BROWSE_ITEMS + decl.getName());
      UpdateComplexViewButton(true);
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.setColumnProperties(new String[]{INSTANCE_NAME});
  browseViewer.refresh();
  Label infoLabel=new Label(composite,SWT.NONE);
  infoLabel.setText(""String_Node_Str"");
  ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
  ruleColumn.setColumnWidth(250);
  List<String> roles=Util.getCachedXObjectsNameSet(page.getXObject(),TreeObject.ROLE);
  ruleColumn.setComboValues(roles.toArray(new String[]{}));
  ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
  acsColumn.setColumnWidth(250);
  acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
  complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),page.getManagedForm().getToolkit(),composite);
  complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
  complexTableViewer.create();
  complexTableViewer.getViewer().setInput(new ArrayList<Line>());
  UpdateComplexViewButton(false);
  setControl(composite);
}","public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.SINGLE | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  editors[0]=new TextCellEditor(table);
  browseViewer.setCellEditors(editors);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
      return values.toArray(new XSDElementDeclaration[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return true;
    }
    public void modify(    Object element,    String property,    Object value){
      TableItem item=(TableItem)element;
      XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
      if (!(BROWSE_ITEMS + elem.getName()).equals(value.toString())) {
        for (        XSDElementDeclaration theElem : declList) {
          if (theElem == elem)           continue;
          if ((BROWSE_ITEMS + theElem.getName()).equals(value.toString())) {
            MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
            return;
          }
        }
        List<Line> lines=browseItemToRoles.get(BROWSE_ITEMS + elem.getName());
        browseItemToRoles.remove(BROWSE_ITEMS + elem.getName());
        int prex=value.toString().indexOf(BROWSE_ITEMS);
        elem.setName(value.toString().substring(prex + BROWSE_ITEMS.length()));
        browseItemToRoles.put(value.toString(),lines);
        refreshRoleView(BROWSE_ITEMS + elem.getName());
        browseViewer.update(elem,null);
      }
    }
    public Object getValue(    Object element,    String property){
      XSDElementDeclaration elem=(XSDElementDeclaration)element;
      return BROWSE_ITEMS + elem.getName();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      XSDElementDeclaration decl=(XSDElementDeclaration)((IStructuredSelection)event.getSelection()).getFirstElement();
      refreshRoleView(BROWSE_ITEMS + decl.getName());
      UpdateComplexViewButton(true);
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.setColumnProperties(new String[]{INSTANCE_NAME});
  browseViewer.refresh();
  Label infoLabel=new Label(composite,SWT.NONE);
  infoLabel.setText(""String_Node_Str"");
  ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
  ruleColumn.setColumnWidth(250);
  List<String> roles=Util.getChildren(page.getXObject().getServerRoot(),TreeObject.ROLE);
  ruleColumn.setComboValues(roles.toArray(new String[]{}));
  ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
  acsColumn.setColumnWidth(250);
  acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
  complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),page.getManagedForm().getToolkit(),composite);
  complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
  complexTableViewer.create();
  complexTableViewer.getViewer().setInput(new ArrayList<Line>());
  UpdateComplexViewButton(false);
  setControl(composite);
}",0.99376026272578
146089,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=3;
  layout.makeColumnsEqualWidth=false;
  if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
    textControl=new CCombo(composite,SWT.BORDER | SWT.READ_ONLY);
    roles=Util.getCachedXObjectsNameSet(this.xObject,TreeObject.ROLE);
    ((CCombo)textControl).setItems(roles.toArray(new String[roles.size()]));
  }
 else {
    textControl=new Text(composite,SWT.BORDER | SWT.SINGLE);
  }
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  }
 else {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  }
  ((GridData)textControl.getLayoutData()).minimumWidth=400;
  textControl.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        xPaths.add(AnnotationOrderedListsDialog.getControlText(textControl));
        viewer.refresh();
      }
    }
  }
);
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    Button xpathButton=new Button(composite,SWT.PUSH | SWT.CENTER);
    xpathButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    xpathButton.setText(""String_Node_Str"");
    xpathButton.setToolTipText(""String_Node_Str"");
    xpathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        XpathSelectDialog dlg=new XpathSelectDialog(parentPage.getSite().getShell(),xObject.getParent(),""String_Node_Str"",parentPage.getSite(),false,dataModelName);
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          ((Text)textControl).setText(dlg.getXpath());
          dlg.close();
        }
      }
    }
);
  }
  Button addLabelButton=new Button(composite,SWT.PUSH | SWT.CENTER);
  addLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  addLabelButton.setText(""String_Node_Str"");
  addLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      boolean exist=false;
      for (Iterator it=xPaths.iterator(); it.hasNext(); ) {
        if (((String)it.next()).equals(getControlText(textControl)))         exist=true;
      }
      if (!exist && getControlText(textControl) != null && getControlText(textControl) != ""String_Node_Str"")       xPaths.add(getControlText(textControl));
      viewer.refresh();
    }
  }
);
  final String COLUMN=columnName;
  viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)viewer.getControl().getLayoutData()).heightHint=100;
  Table table=viewer.getTable();
  new TableColumn(table,SWT.CENTER).setText(COLUMN);
  table.getColumn(0).setWidth(500);
  for (int i=1, n=table.getColumnCount(); i < n; i++) {
    table.getColumn(i).pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  if (actionType == AnnotationOrderedListsDialog.AnnotationWrite_ActionType || actionType == AnnotationOrderedListsDialog.AnnotationHidden_ActionType) {
    editors[0]=new ComboBoxCellEditor(table,roles.toArray(new String[]{}),SWT.READ_ONLY);
  }
 else {
    editors[0]=new TextCellEditor(table);
  }
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> xPaths=(ArrayList<String>)inputElement;
      ArrayList<DescriptionLine> lines=new ArrayList<DescriptionLine>();
      for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
        String xPath=((String)iter.next());
        DescriptionLine line=new DescriptionLine(xPath);
        lines.add(line);
      }
      return lines.toArray(new DescriptionLine[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      DescriptionLine line=(DescriptionLine)element;
switch (columnIndex) {
case 0:
        return line.getLabel();
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
viewer.setColumnProperties(new String[]{COLUMN});
viewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return true;
  }
  public void modify(  Object element,  String property,  Object value){
    TableItem item=(TableItem)element;
    DescriptionLine line=(DescriptionLine)item.getData();
    String orgValue=line.getLabel();
    if (actionType != AnnotationWrite_ActionType && actionType != AnnotationHidden_ActionType) {
      int targetPos=xPaths.indexOf(value.toString());
      if (targetPos < 0) {
        line.setLabel(value.toString());
        xPaths.add(value.toString());
        viewer.update(line,null);
      }
 else       if (targetPos >= 0 && !value.toString().equals(orgValue)) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
      return;
    }
 else {
      String[] attrs=roles.toArray(new String[]{});
      value=attrs[Integer.parseInt(value.toString())];
      int pos=xPaths.indexOf(value.toString());
      if (pos >= 0 && !(orgValue.equals(value))) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        return;
      }
 else       if (pos < 0) {
        line.setLabel(value.toString());
        xPaths.set(xPaths.indexOf(orgValue),value.toString());
        viewer.update(line,null);
      }
    }
  }
  public Object getValue(  Object element,  String property){
    DescriptionLine line=(DescriptionLine)element;
    String value=line.getLabel();
    if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
      String[] attrs=roles.toArray(new String[]{});
      return Arrays.asList(attrs).indexOf(value);
    }
 else {
      return value;
    }
  }
}
);
viewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null)     ((Text)textControl).setText(line.getLabel());
  }
}
);
viewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
      DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
viewer.setInput(xPaths);
viewer.refresh();
Composite rightButtonsComposite=new Composite(composite,SWT.NULL);
rightButtonsComposite.setLayout(new GridLayout(1,true));
rightButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
Button upButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
upButton.setText(""String_Node_Str"");
upButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i > 0) {
          xPaths.remove(i);
          xPaths.add(i - 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i - 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button downButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
downButton.setText(""String_Node_Str"");
downButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i < xPaths.size() - 1) {
          xPaths.remove(i);
          xPaths.add(i + 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i + 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button delButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
delButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
delButton.setText(""String_Node_Str"");
delButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
textControl.setFocus();
if (actionType != AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType && actionType != AnnotationOrderedListsDialog.AnnotationTargetSystems_ActionType) {
  checkBox=new Button(composite,SWT.CHECK);
  checkBox.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,true,2,1));
  checkBox.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      recursive=checkBox.getSelection();
    }
  }
);
  checkBox.setSelection(recursive);
  checkBox.setText(""String_Node_Str"");
}
return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=3;
  layout.makeColumnsEqualWidth=false;
  if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
    textControl=new CCombo(composite,SWT.BORDER | SWT.READ_ONLY);
    roles=Util.getChildren(this.xObject.getServerRoot(),TreeObject.ROLE);
    ((CCombo)textControl).setItems(roles.toArray(new String[roles.size()]));
  }
 else {
    textControl=new Text(composite,SWT.BORDER | SWT.SINGLE);
  }
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  }
 else {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  }
  ((GridData)textControl.getLayoutData()).minimumWidth=400;
  textControl.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        xPaths.add(AnnotationOrderedListsDialog.getControlText(textControl));
        viewer.refresh();
      }
    }
  }
);
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    Button xpathButton=new Button(composite,SWT.PUSH | SWT.CENTER);
    xpathButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    xpathButton.setText(""String_Node_Str"");
    xpathButton.setToolTipText(""String_Node_Str"");
    xpathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        XpathSelectDialog dlg=new XpathSelectDialog(parentPage.getSite().getShell(),xObject.getParent(),""String_Node_Str"",parentPage.getSite(),false,dataModelName);
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          ((Text)textControl).setText(dlg.getXpath());
          dlg.close();
        }
      }
    }
);
  }
  Button addLabelButton=new Button(composite,SWT.PUSH | SWT.CENTER);
  addLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  addLabelButton.setText(""String_Node_Str"");
  addLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      boolean exist=false;
      for (Iterator it=xPaths.iterator(); it.hasNext(); ) {
        if (((String)it.next()).equals(getControlText(textControl)))         exist=true;
      }
      if (!exist && getControlText(textControl) != null && getControlText(textControl) != ""String_Node_Str"")       xPaths.add(getControlText(textControl));
      viewer.refresh();
    }
  }
);
  final String COLUMN=columnName;
  viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)viewer.getControl().getLayoutData()).heightHint=100;
  Table table=viewer.getTable();
  new TableColumn(table,SWT.CENTER).setText(COLUMN);
  table.getColumn(0).setWidth(500);
  for (int i=1, n=table.getColumnCount(); i < n; i++) {
    table.getColumn(i).pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  if (actionType == AnnotationOrderedListsDialog.AnnotationWrite_ActionType || actionType == AnnotationOrderedListsDialog.AnnotationHidden_ActionType) {
    editors[0]=new ComboBoxCellEditor(table,roles.toArray(new String[]{}),SWT.READ_ONLY);
  }
 else {
    editors[0]=new TextCellEditor(table);
  }
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> xPaths=(ArrayList<String>)inputElement;
      ArrayList<DescriptionLine> lines=new ArrayList<DescriptionLine>();
      for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
        String xPath=((String)iter.next());
        DescriptionLine line=new DescriptionLine(xPath);
        lines.add(line);
      }
      return lines.toArray(new DescriptionLine[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      DescriptionLine line=(DescriptionLine)element;
switch (columnIndex) {
case 0:
        return line.getLabel();
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
viewer.setColumnProperties(new String[]{COLUMN});
viewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return true;
  }
  public void modify(  Object element,  String property,  Object value){
    TableItem item=(TableItem)element;
    DescriptionLine line=(DescriptionLine)item.getData();
    String orgValue=line.getLabel();
    if (actionType != AnnotationWrite_ActionType && actionType != AnnotationHidden_ActionType) {
      int targetPos=xPaths.indexOf(value.toString());
      if (targetPos < 0) {
        line.setLabel(value.toString());
        xPaths.add(value.toString());
        viewer.update(line,null);
      }
 else       if (targetPos >= 0 && !value.toString().equals(orgValue)) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
      return;
    }
 else {
      String[] attrs=roles.toArray(new String[]{});
      value=attrs[Integer.parseInt(value.toString())];
      int pos=xPaths.indexOf(value.toString());
      if (pos >= 0 && !(orgValue.equals(value))) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        return;
      }
 else       if (pos < 0) {
        line.setLabel(value.toString());
        xPaths.set(xPaths.indexOf(orgValue),value.toString());
        viewer.update(line,null);
      }
    }
  }
  public Object getValue(  Object element,  String property){
    DescriptionLine line=(DescriptionLine)element;
    String value=line.getLabel();
    if (actionType == AnnotationWrite_ActionType || actionType == AnnotationHidden_ActionType) {
      String[] attrs=roles.toArray(new String[]{});
      return Arrays.asList(attrs).indexOf(value);
    }
 else {
      return value;
    }
  }
}
);
viewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null)     ((Text)textControl).setText(line.getLabel());
  }
}
);
viewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
      DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
viewer.setInput(xPaths);
viewer.refresh();
Composite rightButtonsComposite=new Composite(composite,SWT.NULL);
rightButtonsComposite.setLayout(new GridLayout(1,true));
rightButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
Button upButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
upButton.setText(""String_Node_Str"");
upButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i > 0) {
          xPaths.remove(i);
          xPaths.add(i - 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i - 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button downButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
downButton.setText(""String_Node_Str"");
downButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i < xPaths.size() - 1) {
          xPaths.remove(i);
          xPaths.add(i + 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i + 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button delButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
delButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
delButton.setText(""String_Node_Str"");
delButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
textControl.setFocus();
if (actionType != AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType && actionType != AnnotationOrderedListsDialog.AnnotationTargetSystems_ActionType) {
  checkBox=new Button(composite,SWT.CHECK);
  checkBox.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,true,2,1));
  checkBox.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      recursive=checkBox.getSelection();
    }
  }
);
  checkBox.setSelection(recursive);
  checkBox.setText(""String_Node_Str"");
}
return composite;
}",0.9982004125883334
146090,"@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(""String_Node_Str"");
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setBackground(composite.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=1;
  comboDataCluster=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,2);
  comboDataCluster.getCombo().setEditable(false);
  List<String> dcs=Util.getCachedXObjectsNameSet(this.xObject,TreeObject.DATA_CLUSTER);
  dcs.add(0,""String_Node_Str"");
  comboDataCluster.getCombo().setItems(dcs.toArray(new String[dcs.size()]));
  if (xObject != null && xObject.getDisplayName() != null) {
    if (EXtentisObjects.DataCluster.getDisplayName().equalsIgnoreCase(xObject.getDisplayName())) {
      comboDataCluster.getCombo().select(0);
    }
 else {
      comboDataCluster.getCombo().setText(xObject.getDisplayName());
    }
  }
  fw=new FileSelectWidget(composite,""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},comboDataCluster.getCombo().getText());
  comboDataCluster.getCombo().addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (comboDataCluster.getCombo().getText().length() > 0) {
        fw.getText().setText(comboDataCluster.getCombo().getText());
        fw.setFilename(comboDataCluster.getCombo().getText());
      }
    }
  }
);
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(""String_Node_Str"");
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setBackground(composite.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=1;
  comboDataCluster=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,2);
  comboDataCluster.getCombo().setEditable(false);
  List<String> dcs=Util.getChildren(this.xObject.getServerRoot(),TreeObject.DATA_CLUSTER);
  dcs.add(0,""String_Node_Str"");
  comboDataCluster.getCombo().setItems(dcs.toArray(new String[dcs.size()]));
  if (xObject != null && xObject.getDisplayName() != null) {
    if (EXtentisObjects.DataCluster.getDisplayName().equalsIgnoreCase(xObject.getDisplayName())) {
      comboDataCluster.getCombo().select(0);
    }
 else {
      comboDataCluster.getCombo().setText(xObject.getDisplayName());
    }
  }
  fw=new FileSelectWidget(composite,""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},comboDataCluster.getCombo().getText());
  comboDataCluster.getCombo().addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (comboDataCluster.getCombo().getText().length() > 0) {
        fw.getText().setText(comboDataCluster.getCombo().getText());
        fw.setFilename(comboDataCluster.getCombo().getText());
      }
    }
  }
);
  return composite;
}",0.9867613819825638
146091,"@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(""String_Node_Str"");
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setBackground(composite.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=1;
  comboRole=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,2);
  comboRole.getCombo().setEditable(false);
  List<String> roles=Util.getCachedXObjectsNameSet(this.xObject,TreeObject.ROLE);
  comboRole.getCombo().setItems(roles.toArray(new String[roles.size()]));
  if (dataModelFilter.getRole() == null || dataModelFilter.getRole().length() == 0) {
    comboRole.getCombo().select(0);
  }
 else {
    comboRole.getCombo().setText(dataModelFilter.getRole());
  }
  btnAll=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnAll.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnAll.setSelection(dataModelFilter.isAll());
  btnReadOnly=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnReadOnly.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnReadOnly.setSelection(dataModelFilter.isReadOnly());
  btnWrite=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnWrite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnWrite.setSelection(dataModelFilter.isWriteAccess());
  btnHidden=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnHidden.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnHidden.setSelection(dataModelFilter.isHiddenAccess());
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(""String_Node_Str"");
  Composite composite=(Composite)super.createDialogArea(parent);
  composite.setBackground(composite.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=1;
  comboRole=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,2);
  comboRole.getCombo().setEditable(false);
  List<String> roles=Util.getChildren(this.xObject.getServerRoot(),TreeObject.ROLE);
  comboRole.getCombo().setItems(roles.toArray(new String[roles.size()]));
  if (dataModelFilter.getRole() == null || dataModelFilter.getRole().length() == 0) {
    comboRole.getCombo().select(0);
  }
 else {
    comboRole.getCombo().setText(dataModelFilter.getRole());
  }
  btnAll=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnAll.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnAll.setSelection(dataModelFilter.isAll());
  btnReadOnly=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnReadOnly.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnReadOnly.setSelection(dataModelFilter.isReadOnly());
  btnWrite=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnWrite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnWrite.setSelection(dataModelFilter.isWriteAccess());
  btnHidden=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  btnHidden.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  btnHidden.setSelection(dataModelFilter.isHiddenAccess());
  return composite;
}",0.9876543209876544
146092,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  final TreeParent tree=this.parent.findServerFolder(TreeObject.DATA_MODEL);
  TreeObject[] trees=tree.getChildren();
  ArrayList<String> systemDataModelValues=new ArrayList<String>();
  for (int i=0; i < trees.length; i++)   systemDataModelValues.add(((TreeObject)trees[i]).getDisplayName());
  dataModelCombo.setItems(systemDataModelValues.toArray(new String[systemDataModelValues.size()]));
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      changeDomTree(tree);
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  int index=systemDataModelValues.indexOf(dataModelName);
  if (index < 0)   dataModelCombo.select(0);
 else   dataModelCombo.select(index);
  changeDomTree(tree);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  final TreeParent tree=this.parent.findServerFolder(TreeObject.DATA_MODEL);
  List<String> systemDataModelValues=Util.getChildren(this.parent.getServerRoot(),TreeObject.DATA_MODEL);
  dataModelCombo.setItems(systemDataModelValues.toArray(new String[systemDataModelValues.size()]));
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      changeDomTree(tree);
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  int index=systemDataModelValues.indexOf(dataModelName);
  if (index < 0)   dataModelCombo.select(0);
 else   dataModelCombo.select(index);
  changeDomTree(tree);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}",0.9364622537082136
146093,"@Override protected void createFormContent(IManagedForm managedForm){
  managedForm.getForm().setText(this.getTitle());
  FormToolkit toolkit=managedForm.getToolkit();
  Composite composite=managedForm.getForm().getBody();
  composite.setLayout(new GridLayout(2,false));
  final LabelCombo comboRevision=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,1);
  comboRevision.getCombo().setEditable(false);
  final LabelCombo comboUniverse=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,1);
  comboUniverse.getCombo().setEditable(false);
  List<String> dcs=Util.getCachedXObjectsNameSet(getXObject(),TreeObject.UNIVERSE);
  comboUniverse.getCombo().setItems(dcs.toArray(new String[dcs.size()]));
  comboUniverse.getCombo().add(IConstants.HEAD,0);
  if (getXObject().getUniverse().trim().length() == 0) {
    comboUniverse.getCombo().setText(IConstants.HEAD);
  }
 else {
    comboUniverse.getCombo().setText(getXObject().getUniverse());
  }
  try {
    XtentisPort port=Util.getPort(new URL(getXObject().getEndpointAddress()),getXObject().getUniverse(),getXObject().getUsername(),getXObject().getPassword());
    Map<String,List<String>> map=Util.getUniverseMap(port);
    String name=getXObject().getDisplayName().replaceAll(""String_Node_Str"",""String_Node_Str"");
    List<String> revisions=map.get(name.trim());
    if (revisions != null)     comboRevision.getCombo().setItems(revisions.toArray(new String[revisions.size()]));
    comboRevision.getCombo().add(IConstants.HEAD,0);
    Matcher m=Pattern.compile(""String_Node_Str"").matcher(getXObject().getDisplayName());
    if (m.matches()) {
      String revision=m.group(2);
      comboRevision.getCombo().setText(revision);
    }
    final Map<String,List<String>> map2=Util.getUniverseMap2(port);
    comboRevision.getCombo().addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        if (comboRevision.getCombo().getText().equals(IConstants.HEAD)) {
          comboUniverse.getCombo().setText(IConstants.HEAD);
          return;
        }
        for (        Entry<String,List<String>> entry : map2.entrySet()) {
          if (entry.getValue().contains(comboRevision.getCombo().getText())) {
            comboUniverse.getCombo().setText(entry.getKey());
            break;
          }
        }
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void createFormContent(IManagedForm managedForm){
  managedForm.getForm().setText(this.getTitle());
  FormToolkit toolkit=managedForm.getToolkit();
  Composite composite=managedForm.getForm().getBody();
  composite.setLayout(new GridLayout(2,false));
  final LabelCombo comboRevision=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,1);
  comboRevision.getCombo().setEditable(false);
  final LabelCombo comboUniverse=new LabelCombo(toolkit,composite,""String_Node_Str"",SWT.BORDER,1);
  comboUniverse.getCombo().setEditable(false);
  List<String> dcs=Util.getChildren(getXObject().getServerRoot(),TreeObject.UNIVERSE);
  comboUniverse.getCombo().setItems(dcs.toArray(new String[dcs.size()]));
  comboUniverse.getCombo().add(IConstants.HEAD,0);
  if (getXObject().getUniverse().trim().length() == 0) {
    comboUniverse.getCombo().setText(IConstants.HEAD);
  }
 else {
    comboUniverse.getCombo().setText(getXObject().getUniverse());
  }
  try {
    XtentisPort port=Util.getPort(new URL(getXObject().getEndpointAddress()),getXObject().getUniverse(),getXObject().getUsername(),getXObject().getPassword());
    Map<String,List<String>> map=Util.getUniverseMap(port);
    String name=getXObject().getDisplayName().replaceAll(""String_Node_Str"",""String_Node_Str"");
    List<String> revisions=map.get(name.trim());
    if (revisions != null)     comboRevision.getCombo().setItems(revisions.toArray(new String[revisions.size()]));
    comboRevision.getCombo().add(IConstants.HEAD,0);
    Matcher m=Pattern.compile(""String_Node_Str"").matcher(getXObject().getDisplayName());
    if (m.matches()) {
      String revision=m.group(2);
      comboRevision.getCombo().setText(revision);
    }
    final Map<String,List<String>> map2=Util.getUniverseMap2(port);
    comboRevision.getCombo().addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        if (comboRevision.getCombo().getText().equals(IConstants.HEAD)) {
          comboUniverse.getCombo().setText(IConstants.HEAD);
          return;
        }
        for (        Entry<String,List<String>> entry : map2.entrySet()) {
          if (entry.getValue().contains(comboRevision.getCombo().getText())) {
            comboUniverse.getCombo().setText(entry.getKey());
            break;
          }
        }
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.99052228271829
146094,"public TreeObject findObject(int type,String name){
  TreeObject[] allchildren=this.getChildren();
  for (int i=0; i < allchildren.length; i++) {
    if (allchildren[i] instanceof TreeParent) {
      return ((TreeParent)allchildren[i]).findObject(type,name);
    }
    if ((allchildren[i].getType() == type) && (allchildren[i].getDisplayName().equals(name)))     return allchildren[i];
  }
  return null;
}","public TreeObject findObject(int type,String name){
  TreeObject[] allchildren=this.getChildren();
  TreeObject obj=null;
  for (int i=0; i < allchildren.length; i++) {
    if (allchildren[i] instanceof TreeParent) {
      obj=((TreeParent)allchildren[i]).findObject(type,name);
    }
 else     if ((allchildren[i].getType() == type) && (allchildren[i].getDisplayName().equals(name)))     obj=allchildren[i];
  }
  return obj;
}",0.8729016786570744
146095,"/** 
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
  org.apache.log4j.Category.getInstance(this.getClass()).debug(""String_Node_Str"" + wsServiceAction.getJndiName());
  try {
    Object service=Util.retrieveComponent(null,wsServiceAction.getJndiName());
    String result=""String_Node_Str"";
    if (WSServiceActionCode.EXECUTE.equals(wsServiceAction.getWsAction())) {
      result=(String)Util.getMethod(service,wsServiceAction.getMethodName()).invoke(service,new Object[]{wsServiceAction.getMethodParameters()});
    }
 else {
      if (WSServiceActionCode.START.equals(wsServiceAction.getWsAction())) {
        Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
 else       if (WSServiceActionCode.STOP.equals(wsServiceAction.getWsAction())) {
        Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
      result=(String)Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
    }
    return new WSString(result);
  }
 catch (  XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + wsServiceAction.getJndiName());
  try {
    Object service=com.amalto.core.util.Util.retrieveComponent(null,wsServiceAction.getJndiName());
    String result=""String_Node_Str"";
    if (WSServiceActionCode.EXECUTE.equals(wsServiceAction.getWsAction())) {
      Method method=com.amalto.core.util.Util.getMethod(service,wsServiceAction.getMethodName());
      result=(String)method.invoke(service,wsServiceAction.getMethodParameters());
    }
 else {
      if (WSServiceActionCode.START.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
 else       if (WSServiceActionCode.STOP.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
      result=(String)com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
    }
    return new WSString(result);
  }
 catch (  com.amalto.core.util.XtentisException e) {
    e.printStackTrace();
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    e.printStackTrace();
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9071146245059288
146096,"public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + wsServiceAction.getJndiName());
  try {
    Object service=com.amalto.core.util.Util.retrieveComponent(null,wsServiceAction.getJndiName());
    String result=""String_Node_Str"";
    if (WSServiceActionCode.EXECUTE.equals(wsServiceAction.getWsAction())) {
      result=(String)com.amalto.core.util.Util.getMethod(service,wsServiceAction.getMethodName()).invoke(service,new Object[]{wsServiceAction.getMethodParameters()});
    }
 else {
      if (WSServiceActionCode.START.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
 else       if (WSServiceActionCode.STOP.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
      result=(String)com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
    }
    return new WSString(result);
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + wsServiceAction.getJndiName());
  try {
    Object service=com.amalto.core.util.Util.retrieveComponent(null,wsServiceAction.getJndiName());
    String result=""String_Node_Str"";
    if (WSServiceActionCode.EXECUTE.equals(wsServiceAction.getWsAction())) {
      Method method=com.amalto.core.util.Util.getMethod(service,wsServiceAction.getMethodName());
      result=(String)method.invoke(service,wsServiceAction.getMethodParameters());
    }
 else {
      if (WSServiceActionCode.START.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
 else       if (WSServiceActionCode.STOP.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
      result=(String)com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
    }
    return new WSString(result);
  }
 catch (  com.amalto.core.util.XtentisException e) {
    e.printStackTrace();
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    e.printStackTrace();
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.958217270194986
146097,"/** 
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
  org.apache.log4j.Category.getInstance(this.getClass()).debug(""String_Node_Str"" + wsServiceAction.getJndiName());
  try {
    Object service=Util.retrieveComponent(null,wsServiceAction.getJndiName());
    String result=""String_Node_Str"";
    if (WSServiceActionCode.EXECUTE.equals(wsServiceAction.getWsAction())) {
      result=(String)Util.getMethod(service,wsServiceAction.getMethodName()).invoke(service,new Object[]{wsServiceAction.getMethodParameters()});
    }
 else {
      if (WSServiceActionCode.START.equals(wsServiceAction.getWsAction())) {
        Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
 else       if (WSServiceActionCode.STOP.equals(wsServiceAction.getWsAction())) {
        Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
      result=(String)Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
    }
    return new WSString(result);
  }
 catch (  XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + wsServiceAction.getJndiName());
  try {
    Object service=com.amalto.core.util.Util.retrieveComponent(null,wsServiceAction.getJndiName());
    String result=""String_Node_Str"";
    if (WSServiceActionCode.EXECUTE.equals(wsServiceAction.getWsAction())) {
      Method method=com.amalto.core.util.Util.getMethod(service,wsServiceAction.getMethodName());
      result=(String)method.invoke(service,wsServiceAction.getMethodParameters());
    }
 else {
      if (WSServiceActionCode.START.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
 else       if (WSServiceActionCode.STOP.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
      result=(String)com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
    }
    return new WSString(result);
  }
 catch (  com.amalto.core.util.XtentisException e) {
    e.printStackTrace();
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    e.printStackTrace();
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9071146245059288
146098,"public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + wsServiceAction.getJndiName());
  try {
    Object service=com.amalto.core.util.Util.retrieveComponent(null,wsServiceAction.getJndiName());
    String result=""String_Node_Str"";
    if (WSServiceActionCode.EXECUTE.equals(wsServiceAction.getWsAction())) {
      result=(String)com.amalto.core.util.Util.getMethod(service,wsServiceAction.getMethodName()).invoke(service,new Object[]{wsServiceAction.getMethodParameters()});
    }
 else {
      if (WSServiceActionCode.START.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
 else       if (WSServiceActionCode.STOP.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
      result=(String)com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
    }
    return new WSString(result);
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + wsServiceAction.getJndiName());
  try {
    Object service=com.amalto.core.util.Util.retrieveComponent(null,wsServiceAction.getJndiName());
    String result=""String_Node_Str"";
    if (WSServiceActionCode.EXECUTE.equals(wsServiceAction.getWsAction())) {
      Method method=com.amalto.core.util.Util.getMethod(service,wsServiceAction.getMethodName());
      result=(String)method.invoke(service,wsServiceAction.getMethodParameters());
    }
 else {
      if (WSServiceActionCode.START.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
 else       if (WSServiceActionCode.STOP.equals(wsServiceAction.getWsAction())) {
        com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
      }
      result=(String)com.amalto.core.util.Util.getMethod(service,""String_Node_Str"").invoke(service,new Object[]{});
    }
    return new WSString(result);
  }
 catch (  com.amalto.core.util.XtentisException e) {
    e.printStackTrace();
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    e.printStackTrace();
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.958217270194986
146099,"protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSUniverse ws=(WSUniverse)(getXObject().getWsObject());
    ws.setName(universe.getName());
    ws.setDefaultItemsRevisionID(universe.getDefaultReversionID());
    ws.setDescription(universe.getDescription());
    List<WSUniverseXtentisObjectsRevisionIDs> xtentisObjectsRevisionIDs=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      xtentisObjectsRevisionIDs.add(new WSUniverseXtentisObjectsRevisionIDs(line.key,line.value));
    }
    ws.setXtentisObjectsRevisionIDs(xtentisObjectsRevisionIDs.toArray(new WSUniverseXtentisObjectsRevisionIDs[xtentisObjectsRevisionIDs.size()]));
    List<WSUniverseItemsRevisionIDs> itemIds=new ArrayList<WSUniverseItemsRevisionIDs>();
    for (    Line line : universe.getItemsList()) {
      itemIds.add(new WSUniverseItemsRevisionIDs(line.keyValues.get(0).value,line.keyValues.get(1).value));
    }
    ws.setItemsRevisionIDs(itemIds.toArray(new WSUniverseItemsRevisionIDs[itemIds.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSUniverse ws=(WSUniverse)(getXObject().getWsObject());
    ws.setName(universe.getName());
    ws.setDefaultItemsRevisionID(universe.getDefaultReversionID());
    ws.setDescription(universe.getDescription());
    List<WSUniverseXtentisObjectsRevisionIDs> xtentisObjectsRevisionIDs=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      String name=line.key;
      if (EXtentisObjects.Transformer.getDisplayName().equals(name)) {
        name=EXtentisObjects.Transformer.getName();
      }
      xtentisObjectsRevisionIDs.add(new WSUniverseXtentisObjectsRevisionIDs(name,line.value));
    }
    ws.setXtentisObjectsRevisionIDs(xtentisObjectsRevisionIDs.toArray(new WSUniverseXtentisObjectsRevisionIDs[xtentisObjectsRevisionIDs.size()]));
    List<WSUniverseItemsRevisionIDs> itemIds=new ArrayList<WSUniverseItemsRevisionIDs>();
    for (    Line line : universe.getItemsList()) {
      itemIds.add(new WSUniverseItemsRevisionIDs(line.keyValues.get(0).value,line.keyValues.get(1).value));
    }
    ws.setItemsRevisionIDs(itemIds.toArray(new WSUniverseItemsRevisionIDs[itemIds.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.8729641693811075
146100,"public Universe(String defaultReversionID) throws RemoteException {
  this.defaultReversionID=defaultReversionID;
  for (  String str : getPort().getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
    xtentisObjectsList.add(new KeyValue(str,""String_Node_Str""));
  }
}","public Universe(String defaultReversionID) throws RemoteException {
  this.defaultReversionID=defaultReversionID;
  for (  String str : getPort().getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
    String name=str;
    if (EXtentisObjects.Transformer.getName().equals(name)) {
      name=EXtentisObjects.Transformer.getDisplayName();
    }
    xtentisObjectsList.add(new KeyValue(name,""String_Node_Str""));
  }
}",0.8045977011494253
146101,"protected void refreshData(){
  try {
    if (this.comitting)     return;
    this.refreshing=true;
    WSUniverse wsUniverse=(WSUniverse)(getXObject().getWsObject());
    universe=new Universe(""String_Node_Str"");
    universe.setName(wsUniverse.getName());
    universe.setDefaultReversionID(wsUniverse.getDefaultItemsRevisionID());
    universe.setDescription(wsUniverse.getDescription() == null ? ""String_Node_Str"" : wsUniverse.getDescription());
    universe.setDefaultReversionID(wsUniverse.getDefaultItemsRevisionID());
    universe.getXtentisObjectsList().clear();
    for (    WSUniverseXtentisObjectsRevisionIDs xtentisObjects : wsUniverse.getXtentisObjectsRevisionIDs()) {
      universe.getXtentisObjectsList().add(new KeyValue(xtentisObjects.getXtentisObjectName(),xtentisObjects.getRevisionID()));
    }
    for (    WSUniverseItemsRevisionIDs item : wsUniverse.getItemsRevisionIDs()) {
      universe.getItemsList().add(new Line(columns,new String[]{item.getConceptPattern(),item.getRevisionID()}));
    }
    XtentisPort port=Util.getPort(getXObject());
    String[] objects=port.getObjectsForRoles(null).getStrings();
    Arrays.sort(objects);
    descriptionText.setText(universe.getDescription() == null ? ""String_Node_Str"" : universe.getDescription());
    defaultReversionIDText.getText().setText(universe.getDefaultReversionID() == null ? ""String_Node_Str"" : universe.getDefaultReversionID());
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      LabelText labelText=xtentisObjectsLabelTexts.get(line.key);
      if (labelText != null) {
        labelText.getText().setText(line.value);
      }
    }
    instancesViewer.setInput(universe.getItemsList());
    this.refreshing=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void refreshData(){
  try {
    if (this.comitting)     return;
    this.refreshing=true;
    WSUniverse wsUniverse=(WSUniverse)(getXObject().getWsObject());
    universe=new Universe(""String_Node_Str"");
    universe.setName(wsUniverse.getName());
    universe.setDefaultReversionID(wsUniverse.getDefaultItemsRevisionID());
    universe.setDescription(wsUniverse.getDescription() == null ? ""String_Node_Str"" : wsUniverse.getDescription());
    universe.setDefaultReversionID(wsUniverse.getDefaultItemsRevisionID());
    universe.getXtentisObjectsList().clear();
    for (    WSUniverseXtentisObjectsRevisionIDs xtentisObjects : wsUniverse.getXtentisObjectsRevisionIDs()) {
      String name=xtentisObjects.getXtentisObjectName();
      if (EXtentisObjects.Transformer.getName().equals(name)) {
        name=EXtentisObjects.Transformer.getDisplayName();
      }
      universe.getXtentisObjectsList().add(new KeyValue(name,xtentisObjects.getRevisionID()));
    }
    for (    WSUniverseItemsRevisionIDs item : wsUniverse.getItemsRevisionIDs()) {
      universe.getItemsList().add(new Line(columns,new String[]{item.getConceptPattern(),item.getRevisionID()}));
    }
    XtentisPort port=Util.getPort(getXObject());
    String[] objects=port.getObjectsForRoles(null).getStrings();
    Arrays.sort(objects);
    descriptionText.setText(universe.getDescription() == null ? ""String_Node_Str"" : universe.getDescription());
    defaultReversionIDText.getText().setText(universe.getDefaultReversionID() == null ? ""String_Node_Str"" : universe.getDefaultReversionID());
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      LabelText labelText=xtentisObjectsLabelTexts.get(line.key);
      if (labelText != null) {
        labelText.getText().setText(line.value);
      }
    }
    instancesViewer.setInput(universe.getItemsList());
    this.refreshing=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9420693144447256
146102,"protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSUniverse ws=(WSUniverse)(getXObject().getWsObject());
    ws.setName(universe.getName());
    ws.setDefaultItemsRevisionID(universe.getDefaultReversionID());
    ws.setDescription(universe.getDescription());
    List<WSUniverseXtentisObjectsRevisionIDs> xtentisObjectsRevisionIDs=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      xtentisObjectsRevisionIDs.add(new WSUniverseXtentisObjectsRevisionIDs(line.key,line.value));
    }
    ws.setXtentisObjectsRevisionIDs(xtentisObjectsRevisionIDs.toArray(new WSUniverseXtentisObjectsRevisionIDs[xtentisObjectsRevisionIDs.size()]));
    List<WSUniverseItemsRevisionIDs> itemIds=new ArrayList<WSUniverseItemsRevisionIDs>();
    for (    Line line : universe.getItemsList()) {
      itemIds.add(new WSUniverseItemsRevisionIDs(line.keyValues.get(0).value,line.keyValues.get(1).value));
    }
    ws.setItemsRevisionIDs(itemIds.toArray(new WSUniverseItemsRevisionIDs[itemIds.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSUniverse ws=(WSUniverse)(getXObject().getWsObject());
    ws.setName(universe.getName());
    ws.setDefaultItemsRevisionID(universe.getDefaultReversionID());
    ws.setDescription(universe.getDescription());
    List<WSUniverseXtentisObjectsRevisionIDs> xtentisObjectsRevisionIDs=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      String name=line.key;
      if (EXtentisObjects.Transformer.getDisplayName().equals(name)) {
        name=EXtentisObjects.Transformer.getName();
      }
      xtentisObjectsRevisionIDs.add(new WSUniverseXtentisObjectsRevisionIDs(name,line.value));
    }
    ws.setXtentisObjectsRevisionIDs(xtentisObjectsRevisionIDs.toArray(new WSUniverseXtentisObjectsRevisionIDs[xtentisObjectsRevisionIDs.size()]));
    List<WSUniverseItemsRevisionIDs> itemIds=new ArrayList<WSUniverseItemsRevisionIDs>();
    for (    Line line : universe.getItemsList()) {
      itemIds.add(new WSUniverseItemsRevisionIDs(line.keyValues.get(0).value,line.keyValues.get(1).value));
    }
    ws.setItemsRevisionIDs(itemIds.toArray(new WSUniverseItemsRevisionIDs[itemIds.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.8729641693811075
146103,"public Universe(String defaultReversionID) throws RemoteException {
  this.defaultReversionID=defaultReversionID;
  for (  String str : getPort().getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
    xtentisObjectsList.add(new KeyValue(str,""String_Node_Str""));
  }
}","public Universe(String defaultReversionID) throws RemoteException {
  this.defaultReversionID=defaultReversionID;
  for (  String str : getPort().getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
    String name=str;
    if (EXtentisObjects.Transformer.getName().equals(name)) {
      name=EXtentisObjects.Transformer.getDisplayName();
    }
    xtentisObjectsList.add(new KeyValue(name,""String_Node_Str""));
  }
}",0.8045977011494253
146104,"protected void refreshData(){
  try {
    if (this.comitting)     return;
    this.refreshing=true;
    WSUniverse wsUniverse=(WSUniverse)(getXObject().getWsObject());
    universe=new Universe(""String_Node_Str"");
    universe.setName(wsUniverse.getName());
    universe.setDefaultReversionID(wsUniverse.getDefaultItemsRevisionID());
    universe.setDescription(wsUniverse.getDescription() == null ? ""String_Node_Str"" : wsUniverse.getDescription());
    universe.setDefaultReversionID(wsUniverse.getDefaultItemsRevisionID());
    universe.getXtentisObjectsList().clear();
    for (    WSUniverseXtentisObjectsRevisionIDs xtentisObjects : wsUniverse.getXtentisObjectsRevisionIDs()) {
      universe.getXtentisObjectsList().add(new KeyValue(xtentisObjects.getXtentisObjectName(),xtentisObjects.getRevisionID()));
    }
    for (    WSUniverseItemsRevisionIDs item : wsUniverse.getItemsRevisionIDs()) {
      universe.getItemsList().add(new Line(columns,new String[]{item.getConceptPattern(),item.getRevisionID()}));
    }
    XtentisPort port=Util.getPort(getXObject());
    String[] objects=port.getObjectsForRoles(null).getStrings();
    Arrays.sort(objects);
    descriptionText.setText(universe.getDescription() == null ? ""String_Node_Str"" : universe.getDescription());
    defaultReversionIDText.getText().setText(universe.getDefaultReversionID() == null ? ""String_Node_Str"" : universe.getDefaultReversionID());
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      LabelText labelText=xtentisObjectsLabelTexts.get(line.key);
      if (labelText != null) {
        labelText.getText().setText(line.value);
      }
    }
    instancesViewer.setInput(universe.getItemsList());
    this.refreshing=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void refreshData(){
  try {
    if (this.comitting)     return;
    this.refreshing=true;
    WSUniverse wsUniverse=(WSUniverse)(getXObject().getWsObject());
    universe=new Universe(""String_Node_Str"");
    universe.setName(wsUniverse.getName());
    universe.setDefaultReversionID(wsUniverse.getDefaultItemsRevisionID());
    universe.setDescription(wsUniverse.getDescription() == null ? ""String_Node_Str"" : wsUniverse.getDescription());
    universe.setDefaultReversionID(wsUniverse.getDefaultItemsRevisionID());
    universe.getXtentisObjectsList().clear();
    for (    WSUniverseXtentisObjectsRevisionIDs xtentisObjects : wsUniverse.getXtentisObjectsRevisionIDs()) {
      String name=xtentisObjects.getXtentisObjectName();
      if (EXtentisObjects.Transformer.getName().equals(name)) {
        name=EXtentisObjects.Transformer.getDisplayName();
      }
      universe.getXtentisObjectsList().add(new KeyValue(name,xtentisObjects.getRevisionID()));
    }
    for (    WSUniverseItemsRevisionIDs item : wsUniverse.getItemsRevisionIDs()) {
      universe.getItemsList().add(new Line(columns,new String[]{item.getConceptPattern(),item.getRevisionID()}));
    }
    XtentisPort port=Util.getPort(getXObject());
    String[] objects=port.getObjectsForRoles(null).getStrings();
    Arrays.sort(objects);
    descriptionText.setText(universe.getDescription() == null ? ""String_Node_Str"" : universe.getDescription());
    defaultReversionIDText.getText().setText(universe.getDefaultReversionID() == null ? ""String_Node_Str"" : universe.getDefaultReversionID());
    for (    KeyValue line : universe.getXtentisObjectsList()) {
      LabelText labelText=xtentisObjectsLabelTexts.get(line.key);
      if (labelText != null) {
        labelText.getText().setText(line.value);
      }
    }
    instancesViewer.setInput(universe.getItemsList());
    this.refreshing=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9420693144447256
146105,"@Override protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    if (syncPlan == null)     syncPlan=new SyncronizationPlan();
    this.toolkit=toolkit;
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    descriptionText=new LabelText(charComposite,""String_Node_Str"");
    descriptionText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.description=descriptionText.getText().getText();
        markDirty();
      }
    }
);
    toolkit.createLabel(charComposite,""String_Node_Str"");
    statusText=toolkit.createLabel(charComposite,""String_Node_Str"");
    statusText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
    toolkit.createLabel(charComposite,""String_Node_Str"");
    Composite actionsComposite=toolkit.createComposite(charComposite,SWT.NONE);
    actionsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    actionsComposite.setLayout(new GridLayout(4,false));
    startFullButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    startFullButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    startFullButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (SynchronizationMainPage.this.isDirty()) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.START_FULL));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        startRefreshTimer();
      }
    }
);
    startDifferentialButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    startDifferentialButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    startDifferentialButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (SynchronizationMainPage.this.isDirty()) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.START_DIFFERENTIAL));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        startRefreshTimer();
      }
    }
);
    stopButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    stopButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    stopButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.STOP));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        refreshStatus();
      }
    }
);
    resetButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    resetButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    resetButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.RESET));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        refreshStatus();
      }
    }
);
    Composite remoteMDMGroup=this.getNewSectionComposite(""String_Node_Str"");
    remoteMDMGroup.setLayout(new GridLayout(1,true));
    Composite remoteMDMComposite=toolkit.createComposite(remoteMDMGroup,SWT.BORDER);
    remoteMDMComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    remoteMDMComposite.setLayout(new GridLayout(2,false));
    remoteSystemNameText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemNameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemName=remoteSystemNameText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemURLText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemURLText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemURL=remoteSystemURLText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemUsernameText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemUsernameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemUsername=remoteSystemUsernameText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemPasswordText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemPasswordText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemPassword=remoteSystemPasswordText.getText().getText();
        markDirty();
      }
    }
);
    Composite TISGroup=this.getNewSectionComposite(""String_Node_Str"");
    TISGroup.setLayout(new GridLayout(1,true));
    Composite TISComposite=toolkit.createComposite(TISGroup,SWT.BORDER);
    TISComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    TISComposite.setLayout(new GridLayout(2,false));
    tisURLText=new LabelText(TISComposite,""String_Node_Str"");
    tisURLText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisURL=tisURLText.getText().getText();
        markDirty();
      }
    }
);
    tisUsernameText=new LabelText(TISComposite,""String_Node_Str"");
    tisUsernameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisUsername=tisUsernameText.getText().getText();
        markDirty();
      }
    }
);
    tisPasswordText=new LabelText(TISComposite,""String_Node_Str"");
    tisPasswordText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisPassword=tisPasswordText.getText().getText();
        markDirty();
      }
    }
);
    tisParametersText=new LabelText(TISComposite,""String_Node_Str"");
    tisParametersText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisParameters=tisParametersText.getText().getText();
        markDirty();
      }
    }
);
    Composite itemsGroup=this.getNewSectionComposite(""String_Node_Str"");
    itemsGroup.setLayout(new GridLayout(1,true));
    Composite itemsComposite=toolkit.createComposite(itemsGroup,SWT.BORDER);
    itemsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    itemsComposite.setLayout(new GridLayout(1,true));
    WSDataClusterPK[] xdcPKs=getPort().getDataClusterPKs(new WSRegexDataClusterPKs(""String_Node_Str"")).getWsDataClusterPKs();
    final List<String> dataClustersStrings=new ArrayList<String>();
    for (int i=0; i < xdcPKs.length; i++) {
      String name=xdcPKs[i].getPk();
      if (name != null && name != ""String_Node_Str"" && !""String_Node_Str"".equals(name)) {
        dataClustersStrings.add(name);
      }
    }
    String[] itemsAlgorithmsStrings=getPort().getSynchronizationPlanItemsAlgorithms(new WSGetSynchronizationPlanItemsAlgorithms(new String[]{""String_Node_Str""})).getStrings();
    ComplexTableViewer itemsViewer=new ComplexTableViewer(Arrays.asList(itemsColumns),toolkit,itemsComposite);
    itemsViewer.setMainPage(this);
    ComplexTableViewerColumn complexTableViewerDataClusterColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    complexTableViewerDataClusterColumn.setComboValues(dataClustersStrings.toArray(new String[dataClustersStrings.size()]));
    final ComplexTableViewerColumn complexTableViewerModelConceptColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setComboValues(itemsAlgorithmsStrings);
    final ComplexTableViewerColumn complexTableViewerRevisionIdColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    itemsViewer.create();
    ((CCombo)complexTableViewerDataClusterColumn.getControl()).addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        int selectedIndex=((CCombo)e.getSource()).getSelectionIndex();
        String clusterName=dataClustersStrings.get(selectedIndex);
        try {
          String[] concepts=getPort().getConceptsInDataCluster(new WSGetConceptsInDataCluster(new WSDataClusterPK(clusterName))).getStrings();
          complexTableViewerModelConceptColumn.setComboValues(concepts);
          ((CCombo)complexTableViewerModelConceptColumn.getControl()).setItems(complexTableViewerModelConceptColumn.getComboValues());
        }
 catch (        RemoteException e1) {
          e1.printStackTrace();
        }
      }
    }
);
    ((CCombo)complexTableViewerModelConceptColumn.getControl()).addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        int selectedIndex=((CCombo)e.getSource()).getSelectionIndex();
        String[] concepts=complexTableViewerModelConceptColumn.getComboValues();
        String selectedConcept=concepts[selectedIndex];
        try {
          List<String> pRevisions=BusinessPortHelper.getPossibleItemsRevisionsInCurrentUniverse(getPort(),selectedConcept);
          complexTableViewerRevisionIdColumn.setComboValues(pRevisions.toArray(new String[pRevisions.size()]));
          ((CCombo)complexTableViewerRevisionIdColumn.getControl()).setItems(complexTableViewerRevisionIdColumn.getComboValues());
        }
 catch (        RemoteException e1) {
          e1.printStackTrace();
        }
      }
    }
);
    instancesViewer=itemsViewer.getViewer();
    instancesViewer.setInput(syncPlan.getItemsList());
    Composite objecstGroup=this.getNewSectionComposite(""String_Node_Str"",ExpandableComposite.TWISTIE);
    objecstGroup.setLayout(new GridLayout(1,true));
    String[] objectsAlgorithmStrings=getPort().getSynchronizationPlanObjectsAlgorithms(new WSGetSynchronizationPlanObjectsAlgorithms(new String[]{""String_Node_Str""})).getStrings();
    Composite objectsComposite=toolkit.createComposite(objecstGroup,SWT.BORDER);
    objectsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectsComposite.setLayout(new GridLayout(1,false));
    String[] xtentisObjects=getPort().getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings();
    Map<String,String> objectsRevisionMap=BusinessPortHelper.getObjectsRevisionMapInCurrentUniverse(getPort());
    for (    String object : xtentisObjects) {
      Composite composite=toolkit.createComposite(objectsComposite,SWT.BORDER);
      composite.setLayoutData(new GridData(SWT.FILL,SWT.RIGHT,true,true,1,1));
      composite.setLayout(new GridLayout(2,false));
      Label label=toolkit.createLabel(composite,object,SWT.NULL);
      GridData data=new GridData(SWT.FILL,SWT.RIGHT,false,true,1,1);
      data.widthHint=120;
      label.setLayoutData(data);
      label.setFont(FontUtils.getBoldFont(label.getFont()));
      ComplexTableViewerColumn[] xtentisObjectColumns=new ComplexTableViewerColumn[]{new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,new String[]{},0)};
      ComplexTableViewer objectViewer=new ComplexTableViewer(Arrays.asList(xtentisObjectColumns),toolkit,composite);
      objectViewer.setMainPage(this);
      if (objectsRevisionMap.get(object) != null && objectsRevisionMap.get(object).length() > 0) {
        objectViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setDefaultValue(objectsRevisionMap.get(object));
      }
      objectViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setComboValues(objectsAlgorithmStrings);
      objectViewer.create();
      List<Line> objList=syncPlan.getXtentisObjectsList().get(object);
      if (objList == null) {
        objList=new ArrayList<Line>();
        syncPlan.getXtentisObjectsList().put(object,objList);
      }
      objectViewer.getViewer().setInput(objList);
      ((GridData)objectViewer.getViewer().getTable().getLayoutData()).heightHint=60;
      xtentisViewers.put(object,objectViewer);
    }
    refreshData();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    if (syncPlan == null)     syncPlan=new SyncronizationPlan();
    this.toolkit=toolkit;
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    descriptionText=new LabelText(charComposite,""String_Node_Str"");
    descriptionText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.description=descriptionText.getText().getText();
        markDirty();
      }
    }
);
    toolkit.createLabel(charComposite,""String_Node_Str"");
    statusText=toolkit.createLabel(charComposite,""String_Node_Str"");
    statusText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
    toolkit.createLabel(charComposite,""String_Node_Str"");
    Composite actionsComposite=toolkit.createComposite(charComposite,SWT.NONE);
    actionsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    actionsComposite.setLayout(new GridLayout(4,false));
    startFullButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    startFullButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    startFullButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (SynchronizationMainPage.this.isDirty()) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        if (remoteSystemURLText.getText().getText() == null || remoteSystemURLText.getText().getText().trim().equals(""String_Node_Str"")) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.START_FULL));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        startRefreshTimer();
      }
    }
);
    startDifferentialButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    startDifferentialButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    startDifferentialButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (SynchronizationMainPage.this.isDirty()) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        if (remoteSystemURLText.getText().getText() == null || remoteSystemURLText.getText().getText().trim().equals(""String_Node_Str"")) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.START_DIFFERENTIAL));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        startRefreshTimer();
      }
    }
);
    stopButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    stopButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    stopButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.STOP));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        refreshStatus();
      }
    }
);
    resetButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    resetButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    resetButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.RESET));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        refreshStatus();
      }
    }
);
    Composite remoteMDMGroup=this.getNewSectionComposite(""String_Node_Str"");
    remoteMDMGroup.setLayout(new GridLayout(1,true));
    Composite remoteMDMComposite=toolkit.createComposite(remoteMDMGroup,SWT.BORDER);
    remoteMDMComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    remoteMDMComposite.setLayout(new GridLayout(2,false));
    remoteSystemNameText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemNameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemName=remoteSystemNameText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemURLText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemURLText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemURL=remoteSystemURLText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemUsernameText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemUsernameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemUsername=remoteSystemUsernameText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemPasswordText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemPasswordText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemPassword=remoteSystemPasswordText.getText().getText();
        markDirty();
      }
    }
);
    Composite TISGroup=this.getNewSectionComposite(""String_Node_Str"");
    TISGroup.setLayout(new GridLayout(1,true));
    Composite TISComposite=toolkit.createComposite(TISGroup,SWT.BORDER);
    TISComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    TISComposite.setLayout(new GridLayout(2,false));
    tisURLText=new LabelText(TISComposite,""String_Node_Str"");
    tisURLText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisURL=tisURLText.getText().getText();
        markDirty();
      }
    }
);
    tisUsernameText=new LabelText(TISComposite,""String_Node_Str"");
    tisUsernameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisUsername=tisUsernameText.getText().getText();
        markDirty();
      }
    }
);
    tisPasswordText=new LabelText(TISComposite,""String_Node_Str"");
    tisPasswordText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisPassword=tisPasswordText.getText().getText();
        markDirty();
      }
    }
);
    tisParametersText=new LabelText(TISComposite,""String_Node_Str"");
    tisParametersText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisParameters=tisParametersText.getText().getText();
        markDirty();
      }
    }
);
    Composite itemsGroup=this.getNewSectionComposite(""String_Node_Str"");
    itemsGroup.setLayout(new GridLayout(1,true));
    Composite itemsComposite=toolkit.createComposite(itemsGroup,SWT.BORDER);
    itemsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    itemsComposite.setLayout(new GridLayout(1,true));
    WSDataClusterPK[] xdcPKs=getPort().getDataClusterPKs(new WSRegexDataClusterPKs(""String_Node_Str"")).getWsDataClusterPKs();
    final List<String> dataClustersStrings=new ArrayList<String>();
    for (int i=0; i < xdcPKs.length; i++) {
      String name=xdcPKs[i].getPk();
      if (name != null && name != ""String_Node_Str"" && !""String_Node_Str"".equals(name)) {
        dataClustersStrings.add(name);
      }
    }
    String[] itemsAlgorithmsStrings=getPort().getSynchronizationPlanItemsAlgorithms(new WSGetSynchronizationPlanItemsAlgorithms(new String[]{""String_Node_Str""})).getStrings();
    ComplexTableViewer itemsViewer=new ComplexTableViewer(Arrays.asList(itemsColumns),toolkit,itemsComposite);
    itemsViewer.setMainPage(this);
    ComplexTableViewerColumn complexTableViewerDataClusterColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    complexTableViewerDataClusterColumn.setComboValues(dataClustersStrings.toArray(new String[dataClustersStrings.size()]));
    final ComplexTableViewerColumn complexTableViewerModelConceptColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setComboValues(itemsAlgorithmsStrings);
    final ComplexTableViewerColumn complexTableViewerRevisionIdColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    itemsViewer.create();
    ((CCombo)complexTableViewerDataClusterColumn.getControl()).addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        int selectedIndex=((CCombo)e.getSource()).getSelectionIndex();
        String clusterName=dataClustersStrings.get(selectedIndex);
        try {
          String[] concepts=getPort().getConceptsInDataCluster(new WSGetConceptsInDataCluster(new WSDataClusterPK(clusterName))).getStrings();
          complexTableViewerModelConceptColumn.setComboValues(concepts);
          ((CCombo)complexTableViewerModelConceptColumn.getControl()).setItems(complexTableViewerModelConceptColumn.getComboValues());
        }
 catch (        RemoteException e1) {
          e1.printStackTrace();
        }
      }
    }
);
    ((CCombo)complexTableViewerModelConceptColumn.getControl()).addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        int selectedIndex=((CCombo)e.getSource()).getSelectionIndex();
        String[] concepts=complexTableViewerModelConceptColumn.getComboValues();
        String selectedConcept=concepts[selectedIndex];
        try {
          List<String> pRevisions=BusinessPortHelper.getPossibleItemsRevisionsInCurrentUniverse(getPort(),selectedConcept);
          complexTableViewerRevisionIdColumn.setComboValues(pRevisions.toArray(new String[pRevisions.size()]));
          ((CCombo)complexTableViewerRevisionIdColumn.getControl()).setItems(complexTableViewerRevisionIdColumn.getComboValues());
        }
 catch (        RemoteException e1) {
          e1.printStackTrace();
        }
      }
    }
);
    instancesViewer=itemsViewer.getViewer();
    instancesViewer.setInput(syncPlan.getItemsList());
    Composite objecstGroup=this.getNewSectionComposite(""String_Node_Str"",ExpandableComposite.TWISTIE);
    objecstGroup.setLayout(new GridLayout(1,true));
    String[] objectsAlgorithmStrings=getPort().getSynchronizationPlanObjectsAlgorithms(new WSGetSynchronizationPlanObjectsAlgorithms(new String[]{""String_Node_Str""})).getStrings();
    Composite objectsComposite=toolkit.createComposite(objecstGroup,SWT.BORDER);
    objectsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectsComposite.setLayout(new GridLayout(1,false));
    String[] xtentisObjects=getPort().getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings();
    Map<String,String> objectsRevisionMap=BusinessPortHelper.getObjectsRevisionMapInCurrentUniverse(getPort());
    for (    String object : xtentisObjects) {
      Composite composite=toolkit.createComposite(objectsComposite,SWT.BORDER);
      composite.setLayoutData(new GridData(SWT.FILL,SWT.RIGHT,true,true,1,1));
      composite.setLayout(new GridLayout(2,false));
      Label label=toolkit.createLabel(composite,object,SWT.NULL);
      GridData data=new GridData(SWT.FILL,SWT.RIGHT,false,true,1,1);
      data.widthHint=120;
      label.setLayoutData(data);
      label.setFont(FontUtils.getBoldFont(label.getFont()));
      ComplexTableViewerColumn[] xtentisObjectColumns=new ComplexTableViewerColumn[]{new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,new String[]{},0)};
      ComplexTableViewer objectViewer=new ComplexTableViewer(Arrays.asList(xtentisObjectColumns),toolkit,composite);
      objectViewer.setMainPage(this);
      if (objectsRevisionMap.get(object) != null && objectsRevisionMap.get(object).length() > 0) {
        objectViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setDefaultValue(objectsRevisionMap.get(object));
      }
      objectViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setComboValues(objectsAlgorithmStrings);
      objectViewer.create();
      List<Line> objList=syncPlan.getXtentisObjectsList().get(object);
      if (objList == null) {
        objList=new ArrayList<Line>();
        syncPlan.getXtentisObjectsList().put(object,objList);
      }
      objectViewer.getViewer().setInput(objList);
      ((GridData)objectViewer.getViewer().getTable().getLayoutData()).heightHint=60;
      xtentisViewers.put(object,objectViewer);
    }
    refreshData();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9815110997377008
146106,"private static void generateUUIDForElement(Document schema,String dataCluster,String concept,Element conceptRoot) throws Exception {
  NodeList uuidLists=getUUIDNodes(schema,concept);
  for (int i=0; i < uuidLists.getLength(); i++) {
    Element element=(Element)uuidLists.item(i);
    String name=Util.getFirstTextNode(element,""String_Node_Str"");
    String type=Util.getFirstTextNode(element,""String_Node_Str"");
    String value=null;
    for (int j=0; j < conceptRoot.getChildNodes().getLength(); j++) {
      Node node=conceptRoot.getChildNodes().item(j);
      if (node.getNodeType() != Node.ELEMENT_NODE)       continue;
      if (node.getChildNodes().getLength() > 1) {
        generateUUIDForElement(schema,dataCluster,node.getNodeName(),(Element)node);
      }
 else {
        if (node.getNodeName().equalsIgnoreCase(name)) {
          if (node.getTextContent() == null || node.getTextContent().length() == 0) {
            if (EUUIDCustomType.AUTO_INCREMENT.getName().equalsIgnoreCase(type)) {
              value=String.valueOf(AutoIncrementGenerator.generateNum(LocalUser.getLocalUser().getUniverse().getName(),dataCluster,concept + ""String_Node_Str"" + name));
            }
            if (EUUIDCustomType.UUID.getName().equalsIgnoreCase(type)) {
              value=String.valueOf(UUID.randomUUID().toString());
            }
            node.setTextContent(value);
          }
          break;
        }
      }
    }
  }
}","private static void generateUUIDForElement(Document schema,String dataCluster,String concept,Element conceptRoot) throws Exception {
  NodeList uuidLists=getUUIDNodes(schema,concept);
  for (int i=0; i < uuidLists.getLength(); i++) {
    Element element=(Element)uuidLists.item(i);
    String name=Util.getFirstTextNode(element,""String_Node_Str"");
    String type=Util.getFirstTextNode(element,""String_Node_Str"");
    String value=null;
    for (int j=0; j < conceptRoot.getChildNodes().getLength(); j++) {
      Node node=conceptRoot.getChildNodes().item(j);
      if (node.getNodeType() != Node.ELEMENT_NODE)       continue;
      if (node.getChildNodes().getLength() > 1) {
        generateUUIDForElement(schema,dataCluster,node.getNodeName(),(Element)node);
      }
 else {
        if (node.getNodeName().equalsIgnoreCase(name)) {
          if (node.getTextContent() == null || node.getTextContent().length() == 0) {
            if (EUUIDCustomType.AUTO_INCREMENT.getName().equalsIgnoreCase(type)) {
              String id=String.valueOf(AutoIncrementGenerator.generateNum(LocalUser.getLocalUser().getUniverse().getName(),dataCluster,concept + ""String_Node_Str"" + name));
              ItemPOJOPK pk=new ItemPOJOPK(new DataClusterPOJOPK(dataCluster),concept,new String[]{id});
              ItemPOJO pojo=ItemPOJO.load(pk);
              while (pojo != null) {
                id=String.valueOf(AutoIncrementGenerator.generateNum(LocalUser.getLocalUser().getUniverse().getName(),dataCluster,concept + ""String_Node_Str"" + name));
                pk=new ItemPOJOPK(new DataClusterPOJOPK(dataCluster),concept,new String[]{id});
                pojo=ItemPOJO.load(pk);
                if (pojo == null) {
                  value=id;
                  break;
                }
              }
              if (pojo == null) {
                value=id;
              }
            }
            if (EUUIDCustomType.UUID.getName().equalsIgnoreCase(type)) {
              value=String.valueOf(UUID.randomUUID().toString());
            }
            node.setTextContent(value);
          }
          break;
        }
      }
    }
  }
}",0.8023516237402015
146107,"@Override protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    if (syncPlan == null)     syncPlan=new SyncronizationPlan();
    this.toolkit=toolkit;
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    descriptionText=new LabelText(charComposite,""String_Node_Str"");
    descriptionText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.description=descriptionText.getText().getText();
        markDirty();
      }
    }
);
    toolkit.createLabel(charComposite,""String_Node_Str"");
    statusText=toolkit.createLabel(charComposite,""String_Node_Str"");
    statusText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
    toolkit.createLabel(charComposite,""String_Node_Str"");
    Composite actionsComposite=toolkit.createComposite(charComposite,SWT.NONE);
    actionsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    actionsComposite.setLayout(new GridLayout(4,false));
    startFullButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    startFullButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    startFullButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (SynchronizationMainPage.this.isDirty()) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.START_FULL));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        startRefreshTimer();
      }
    }
);
    startDifferentialButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    startDifferentialButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    startDifferentialButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (SynchronizationMainPage.this.isDirty()) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.START_DIFFERENTIAL));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        startRefreshTimer();
      }
    }
);
    stopButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    stopButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    stopButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.STOP));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        refreshStatus();
      }
    }
);
    resetButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    resetButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    resetButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.RESET));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        refreshStatus();
      }
    }
);
    Composite remoteMDMGroup=this.getNewSectionComposite(""String_Node_Str"");
    remoteMDMGroup.setLayout(new GridLayout(1,true));
    Composite remoteMDMComposite=toolkit.createComposite(remoteMDMGroup,SWT.BORDER);
    remoteMDMComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    remoteMDMComposite.setLayout(new GridLayout(2,false));
    remoteSystemNameText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemNameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemName=remoteSystemNameText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemURLText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemURLText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemURL=remoteSystemURLText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemUsernameText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemUsernameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemUsername=remoteSystemUsernameText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemPasswordText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemPasswordText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemPassword=remoteSystemPasswordText.getText().getText();
        markDirty();
      }
    }
);
    Composite TISGroup=this.getNewSectionComposite(""String_Node_Str"");
    TISGroup.setLayout(new GridLayout(1,true));
    Composite TISComposite=toolkit.createComposite(TISGroup,SWT.BORDER);
    TISComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    TISComposite.setLayout(new GridLayout(2,false));
    tisURLText=new LabelText(TISComposite,""String_Node_Str"");
    tisURLText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisURL=tisURLText.getText().getText();
        markDirty();
      }
    }
);
    tisUsernameText=new LabelText(TISComposite,""String_Node_Str"");
    tisUsernameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisUsername=tisUsernameText.getText().getText();
        markDirty();
      }
    }
);
    tisPasswordText=new LabelText(TISComposite,""String_Node_Str"");
    tisPasswordText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisPassword=tisPasswordText.getText().getText();
        markDirty();
      }
    }
);
    tisParametersText=new LabelText(TISComposite,""String_Node_Str"");
    tisParametersText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisParameters=tisParametersText.getText().getText();
        markDirty();
      }
    }
);
    Composite itemsGroup=this.getNewSectionComposite(""String_Node_Str"");
    itemsGroup.setLayout(new GridLayout(1,true));
    Composite itemsComposite=toolkit.createComposite(itemsGroup,SWT.BORDER);
    itemsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    itemsComposite.setLayout(new GridLayout(1,true));
    WSDataClusterPK[] xdcPKs=getPort().getDataClusterPKs(new WSRegexDataClusterPKs(""String_Node_Str"")).getWsDataClusterPKs();
    final List<String> dataClustersStrings=new ArrayList<String>();
    for (int i=0; i < xdcPKs.length; i++) {
      String name=xdcPKs[i].getPk();
      if (name != null && name != ""String_Node_Str"" && !""String_Node_Str"".equals(name)) {
        dataClustersStrings.add(name);
      }
    }
    String[] itemsAlgorithmsStrings=getPort().getSynchronizationPlanItemsAlgorithms(new WSGetSynchronizationPlanItemsAlgorithms(new String[]{""String_Node_Str""})).getStrings();
    ComplexTableViewer itemsViewer=new ComplexTableViewer(Arrays.asList(itemsColumns),toolkit,itemsComposite);
    itemsViewer.setMainPage(this);
    ComplexTableViewerColumn complexTableViewerDataClusterColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    complexTableViewerDataClusterColumn.setComboValues(dataClustersStrings.toArray(new String[dataClustersStrings.size()]));
    final ComplexTableViewerColumn complexTableViewerModelConceptColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setComboValues(itemsAlgorithmsStrings);
    final ComplexTableViewerColumn complexTableViewerRevisionIdColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    itemsViewer.create();
    ((CCombo)complexTableViewerDataClusterColumn.getControl()).addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        int selectedIndex=((CCombo)e.getSource()).getSelectionIndex();
        String clusterName=dataClustersStrings.get(selectedIndex);
        try {
          String[] concepts=getPort().getConceptsInDataCluster(new WSGetConceptsInDataCluster(new WSDataClusterPK(clusterName))).getStrings();
          complexTableViewerModelConceptColumn.setComboValues(concepts);
          ((CCombo)complexTableViewerModelConceptColumn.getControl()).setItems(complexTableViewerModelConceptColumn.getComboValues());
        }
 catch (        RemoteException e1) {
          e1.printStackTrace();
        }
      }
    }
);
    ((CCombo)complexTableViewerModelConceptColumn.getControl()).addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        int selectedIndex=((CCombo)e.getSource()).getSelectionIndex();
        String[] concepts=complexTableViewerModelConceptColumn.getComboValues();
        String selectedConcept=concepts[selectedIndex];
        try {
          List<String> pRevisions=BusinessPortHelper.getPossibleItemsRevisionsInCurrentUniverse(getPort(),selectedConcept);
          complexTableViewerRevisionIdColumn.setComboValues(pRevisions.toArray(new String[pRevisions.size()]));
          ((CCombo)complexTableViewerRevisionIdColumn.getControl()).setItems(complexTableViewerRevisionIdColumn.getComboValues());
        }
 catch (        RemoteException e1) {
          e1.printStackTrace();
        }
      }
    }
);
    instancesViewer=itemsViewer.getViewer();
    instancesViewer.setInput(syncPlan.getItemsList());
    Composite objecstGroup=this.getNewSectionComposite(""String_Node_Str"",ExpandableComposite.TWISTIE);
    objecstGroup.setLayout(new GridLayout(1,true));
    String[] objectsAlgorithmStrings=getPort().getSynchronizationPlanObjectsAlgorithms(new WSGetSynchronizationPlanObjectsAlgorithms(new String[]{""String_Node_Str""})).getStrings();
    Composite objectsComposite=toolkit.createComposite(objecstGroup,SWT.BORDER);
    objectsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectsComposite.setLayout(new GridLayout(1,false));
    String[] xtentisObjects=getPort().getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings();
    Map<String,String> objectsRevisionMap=BusinessPortHelper.getObjectsRevisionMapInCurrentUniverse(getPort());
    for (    String object : xtentisObjects) {
      Composite composite=toolkit.createComposite(objectsComposite,SWT.BORDER);
      composite.setLayoutData(new GridData(SWT.FILL,SWT.RIGHT,true,true,1,1));
      composite.setLayout(new GridLayout(2,false));
      Label label=toolkit.createLabel(composite,object,SWT.NULL);
      GridData data=new GridData(SWT.FILL,SWT.RIGHT,false,true,1,1);
      data.widthHint=120;
      label.setLayoutData(data);
      label.setFont(FontUtils.getBoldFont(label.getFont()));
      ComplexTableViewerColumn[] xtentisObjectColumns=new ComplexTableViewerColumn[]{new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,new String[]{},0)};
      ComplexTableViewer objectViewer=new ComplexTableViewer(Arrays.asList(xtentisObjectColumns),toolkit,composite);
      objectViewer.setMainPage(this);
      if (objectsRevisionMap.get(object) != null && objectsRevisionMap.get(object).length() > 0) {
        objectViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setDefaultValue(objectsRevisionMap.get(object));
      }
      objectViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setComboValues(objectsAlgorithmStrings);
      objectViewer.create();
      List<Line> objList=syncPlan.getXtentisObjectsList().get(object);
      if (objList == null) {
        objList=new ArrayList<Line>();
        syncPlan.getXtentisObjectsList().put(object,objList);
      }
      objectViewer.getViewer().setInput(objList);
      ((GridData)objectViewer.getViewer().getTable().getLayoutData()).heightHint=60;
      xtentisViewers.put(object,objectViewer);
    }
    refreshData();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    if (syncPlan == null)     syncPlan=new SyncronizationPlan();
    this.toolkit=toolkit;
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    descriptionText=new LabelText(charComposite,""String_Node_Str"");
    descriptionText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.description=descriptionText.getText().getText();
        markDirty();
      }
    }
);
    toolkit.createLabel(charComposite,""String_Node_Str"");
    statusText=toolkit.createLabel(charComposite,""String_Node_Str"");
    statusText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
    toolkit.createLabel(charComposite,""String_Node_Str"");
    Composite actionsComposite=toolkit.createComposite(charComposite,SWT.NONE);
    actionsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    actionsComposite.setLayout(new GridLayout(4,false));
    startFullButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    startFullButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    startFullButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (SynchronizationMainPage.this.isDirty()) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        if (remoteSystemURLText.getText().getText() == null || remoteSystemURLText.getText().getText().trim().equals(""String_Node_Str"")) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.START_FULL));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        startRefreshTimer();
      }
    }
);
    startDifferentialButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    startDifferentialButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    startDifferentialButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        if (SynchronizationMainPage.this.isDirty()) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        if (remoteSystemURLText.getText().getText() == null || remoteSystemURLText.getText().getText().trim().equals(""String_Node_Str"")) {
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.START_DIFFERENTIAL));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        startRefreshTimer();
      }
    }
);
    stopButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    stopButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    stopButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.STOP));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        refreshStatus();
      }
    }
);
    resetButton=toolkit.createButton(actionsComposite,""String_Node_Str"",SWT.PUSH);
    resetButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    resetButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        WSSynchronizationPlan ws=(WSSynchronizationPlan)(getXObject().getWsObject());
        try {
          getPort().synchronizationPlanAction(new WSSynchronizationPlanAction(new WSSynchronizationPlanPK(ws.getName()),WSSynchronizationPlanActionCode.RESET));
        }
 catch (        RemoteException ex) {
          ex.printStackTrace();
          MessageDialog.openError(SynchronizationMainPage.this.getSite().getShell(),""String_Node_Str"",ex.getLocalizedMessage());
        }
        refreshStatus();
      }
    }
);
    Composite remoteMDMGroup=this.getNewSectionComposite(""String_Node_Str"");
    remoteMDMGroup.setLayout(new GridLayout(1,true));
    Composite remoteMDMComposite=toolkit.createComposite(remoteMDMGroup,SWT.BORDER);
    remoteMDMComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    remoteMDMComposite.setLayout(new GridLayout(2,false));
    remoteSystemNameText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemNameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemName=remoteSystemNameText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemURLText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemURLText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemURL=remoteSystemURLText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemUsernameText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemUsernameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemUsername=remoteSystemUsernameText.getText().getText();
        markDirty();
      }
    }
);
    remoteSystemPasswordText=new LabelText(remoteMDMComposite,""String_Node_Str"");
    remoteSystemPasswordText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.remoteSystemPassword=remoteSystemPasswordText.getText().getText();
        markDirty();
      }
    }
);
    Composite TISGroup=this.getNewSectionComposite(""String_Node_Str"");
    TISGroup.setLayout(new GridLayout(1,true));
    Composite TISComposite=toolkit.createComposite(TISGroup,SWT.BORDER);
    TISComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    TISComposite.setLayout(new GridLayout(2,false));
    tisURLText=new LabelText(TISComposite,""String_Node_Str"");
    tisURLText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisURL=tisURLText.getText().getText();
        markDirty();
      }
    }
);
    tisUsernameText=new LabelText(TISComposite,""String_Node_Str"");
    tisUsernameText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisUsername=tisUsernameText.getText().getText();
        markDirty();
      }
    }
);
    tisPasswordText=new LabelText(TISComposite,""String_Node_Str"");
    tisPasswordText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisPassword=tisPasswordText.getText().getText();
        markDirty();
      }
    }
);
    tisParametersText=new LabelText(TISComposite,""String_Node_Str"");
    tisParametersText.getText().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        if (refreshing)         return;
        syncPlan.tisParameters=tisParametersText.getText().getText();
        markDirty();
      }
    }
);
    Composite itemsGroup=this.getNewSectionComposite(""String_Node_Str"");
    itemsGroup.setLayout(new GridLayout(1,true));
    Composite itemsComposite=toolkit.createComposite(itemsGroup,SWT.BORDER);
    itemsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    itemsComposite.setLayout(new GridLayout(1,true));
    WSDataClusterPK[] xdcPKs=getPort().getDataClusterPKs(new WSRegexDataClusterPKs(""String_Node_Str"")).getWsDataClusterPKs();
    final List<String> dataClustersStrings=new ArrayList<String>();
    for (int i=0; i < xdcPKs.length; i++) {
      String name=xdcPKs[i].getPk();
      if (name != null && name != ""String_Node_Str"" && !""String_Node_Str"".equals(name)) {
        dataClustersStrings.add(name);
      }
    }
    String[] itemsAlgorithmsStrings=getPort().getSynchronizationPlanItemsAlgorithms(new WSGetSynchronizationPlanItemsAlgorithms(new String[]{""String_Node_Str""})).getStrings();
    ComplexTableViewer itemsViewer=new ComplexTableViewer(Arrays.asList(itemsColumns),toolkit,itemsComposite);
    itemsViewer.setMainPage(this);
    ComplexTableViewerColumn complexTableViewerDataClusterColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    complexTableViewerDataClusterColumn.setComboValues(dataClustersStrings.toArray(new String[dataClustersStrings.size()]));
    final ComplexTableViewerColumn complexTableViewerModelConceptColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setComboValues(itemsAlgorithmsStrings);
    final ComplexTableViewerColumn complexTableViewerRevisionIdColumn=itemsViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str""));
    itemsViewer.create();
    ((CCombo)complexTableViewerDataClusterColumn.getControl()).addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        int selectedIndex=((CCombo)e.getSource()).getSelectionIndex();
        String clusterName=dataClustersStrings.get(selectedIndex);
        try {
          String[] concepts=getPort().getConceptsInDataCluster(new WSGetConceptsInDataCluster(new WSDataClusterPK(clusterName))).getStrings();
          complexTableViewerModelConceptColumn.setComboValues(concepts);
          ((CCombo)complexTableViewerModelConceptColumn.getControl()).setItems(complexTableViewerModelConceptColumn.getComboValues());
        }
 catch (        RemoteException e1) {
          e1.printStackTrace();
        }
      }
    }
);
    ((CCombo)complexTableViewerModelConceptColumn.getControl()).addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        int selectedIndex=((CCombo)e.getSource()).getSelectionIndex();
        String[] concepts=complexTableViewerModelConceptColumn.getComboValues();
        String selectedConcept=concepts[selectedIndex];
        try {
          List<String> pRevisions=BusinessPortHelper.getPossibleItemsRevisionsInCurrentUniverse(getPort(),selectedConcept);
          complexTableViewerRevisionIdColumn.setComboValues(pRevisions.toArray(new String[pRevisions.size()]));
          ((CCombo)complexTableViewerRevisionIdColumn.getControl()).setItems(complexTableViewerRevisionIdColumn.getComboValues());
        }
 catch (        RemoteException e1) {
          e1.printStackTrace();
        }
      }
    }
);
    instancesViewer=itemsViewer.getViewer();
    instancesViewer.setInput(syncPlan.getItemsList());
    Composite objecstGroup=this.getNewSectionComposite(""String_Node_Str"",ExpandableComposite.TWISTIE);
    objecstGroup.setLayout(new GridLayout(1,true));
    String[] objectsAlgorithmStrings=getPort().getSynchronizationPlanObjectsAlgorithms(new WSGetSynchronizationPlanObjectsAlgorithms(new String[]{""String_Node_Str""})).getStrings();
    Composite objectsComposite=toolkit.createComposite(objecstGroup,SWT.BORDER);
    objectsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectsComposite.setLayout(new GridLayout(1,false));
    String[] xtentisObjects=getPort().getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings();
    Map<String,String> objectsRevisionMap=BusinessPortHelper.getObjectsRevisionMapInCurrentUniverse(getPort());
    for (    String object : xtentisObjects) {
      Composite composite=toolkit.createComposite(objectsComposite,SWT.BORDER);
      composite.setLayoutData(new GridData(SWT.FILL,SWT.RIGHT,true,true,1,1));
      composite.setLayout(new GridLayout(2,false));
      Label label=toolkit.createLabel(composite,object,SWT.NULL);
      GridData data=new GridData(SWT.FILL,SWT.RIGHT,false,true,1,1);
      data.widthHint=120;
      label.setLayoutData(data);
      label.setFont(FontUtils.getBoldFont(label.getFont()));
      ComplexTableViewerColumn[] xtentisObjectColumns=new ComplexTableViewerColumn[]{new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,new String[]{},0)};
      ComplexTableViewer objectViewer=new ComplexTableViewer(Arrays.asList(xtentisObjectColumns),toolkit,composite);
      objectViewer.setMainPage(this);
      if (objectsRevisionMap.get(object) != null && objectsRevisionMap.get(object).length() > 0) {
        objectViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setDefaultValue(objectsRevisionMap.get(object));
      }
      objectViewer.getColumn(new ComplexTableViewerColumn(""String_Node_Str"")).setComboValues(objectsAlgorithmStrings);
      objectViewer.create();
      List<Line> objList=syncPlan.getXtentisObjectsList().get(object);
      if (objList == null) {
        objList=new ArrayList<Line>();
        syncPlan.getXtentisObjectsList().put(object,objList);
      }
      objectViewer.getViewer().setInput(objList);
      ((GridData)objectViewer.getViewer().getTable().getLayoutData()).heightHint=60;
      xtentisViewers.put(object,objectViewer);
    }
    refreshData();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9815110997377008
146108,"private static void generateUUIDForElement(Document schema,String dataCluster,String concept,Element conceptRoot) throws Exception {
  NodeList uuidLists=getUUIDNodes(schema,concept);
  for (int i=0; i < uuidLists.getLength(); i++) {
    Element element=(Element)uuidLists.item(i);
    String name=Util.getFirstTextNode(element,""String_Node_Str"");
    String type=Util.getFirstTextNode(element,""String_Node_Str"");
    String value=null;
    for (int j=0; j < conceptRoot.getChildNodes().getLength(); j++) {
      Node node=conceptRoot.getChildNodes().item(j);
      if (node.getNodeType() != Node.ELEMENT_NODE)       continue;
      if (node.getChildNodes().getLength() > 1) {
        generateUUIDForElement(schema,dataCluster,node.getNodeName(),(Element)node);
      }
 else {
        if (node.getNodeName().equalsIgnoreCase(name)) {
          if (node.getTextContent() == null || node.getTextContent().length() == 0) {
            if (EUUIDCustomType.AUTO_INCREMENT.getName().equalsIgnoreCase(type)) {
              value=String.valueOf(AutoIncrementGenerator.generateNum(LocalUser.getLocalUser().getUniverse().getName(),dataCluster,concept + ""String_Node_Str"" + name));
            }
            if (EUUIDCustomType.UUID.getName().equalsIgnoreCase(type)) {
              value=String.valueOf(UUID.randomUUID().toString());
            }
            node.setTextContent(value);
          }
          break;
        }
      }
    }
  }
}","private static void generateUUIDForElement(Document schema,String dataCluster,String concept,Element conceptRoot) throws Exception {
  NodeList uuidLists=getUUIDNodes(schema,concept);
  for (int i=0; i < uuidLists.getLength(); i++) {
    Element element=(Element)uuidLists.item(i);
    String name=Util.getFirstTextNode(element,""String_Node_Str"");
    String type=Util.getFirstTextNode(element,""String_Node_Str"");
    String value=null;
    for (int j=0; j < conceptRoot.getChildNodes().getLength(); j++) {
      Node node=conceptRoot.getChildNodes().item(j);
      if (node.getNodeType() != Node.ELEMENT_NODE)       continue;
      if (node.getChildNodes().getLength() > 1) {
        generateUUIDForElement(schema,dataCluster,node.getNodeName(),(Element)node);
      }
 else {
        if (node.getNodeName().equalsIgnoreCase(name)) {
          if (node.getTextContent() == null || node.getTextContent().length() == 0) {
            if (EUUIDCustomType.AUTO_INCREMENT.getName().equalsIgnoreCase(type)) {
              String id=String.valueOf(AutoIncrementGenerator.generateNum(LocalUser.getLocalUser().getUniverse().getName(),dataCluster,concept + ""String_Node_Str"" + name));
              ItemPOJOPK pk=new ItemPOJOPK(new DataClusterPOJOPK(dataCluster),concept,new String[]{id});
              ItemPOJO pojo=ItemPOJO.load(pk);
              while (pojo != null) {
                id=String.valueOf(AutoIncrementGenerator.generateNum(LocalUser.getLocalUser().getUniverse().getName(),dataCluster,concept + ""String_Node_Str"" + name));
                pk=new ItemPOJOPK(new DataClusterPOJOPK(dataCluster),concept,new String[]{id});
                pojo=ItemPOJO.load(pk);
                if (pojo == null) {
                  value=id;
                  break;
                }
              }
              if (pojo == null) {
                value=id;
              }
            }
            if (EUUIDCustomType.UUID.getName().equalsIgnoreCase(type)) {
              value=String.valueOf(UUID.randomUUID().toString());
            }
            node.setTextContent(value);
          }
          break;
        }
      }
    }
  }
}",0.8023516237402015
146109,"public void run(){
  IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
  List list=selection.toList();
  for (  Object obj : list) {
    if (obj instanceof XSDElementDeclaration) {
      if (Util.getParent(obj) == obj)       declList.add((XSDElementDeclaration)obj);
    }
  }
  AddBrowseItemsWizard wizard=new AddBrowseItemsWizard(page,list);
  WizardDialog dialog=new WizardDialog(page.getSite().getShell(),wizard);
  dialog.open();
  dialog.setBlockOnOpen(true);
}","public void run(){
  IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
  declList.clear();
  List list=selection.toList();
  for (  Object obj : list) {
    if (obj instanceof XSDElementDeclaration) {
      if (Util.getParent(obj) == obj)       declList.add((XSDElementDeclaration)obj);
    }
  }
  AddBrowseItemsWizard wizard=new AddBrowseItemsWizard(page,declList);
  WizardDialog dialog=new WizardDialog(page.getSite().getShell(),wizard);
  dialog.open();
}",0.9433962264150944
146110,"private void newBrowseItemView(String browseItem) throws RemoteException {
  for (  XSDElementDeclaration decl : declList) {
    String fullName=BROWSE_ITEMS + decl.getName();
    if (fullName.equals(browseItem)) {
      XtentisPort port=getXtentisPort();
      WSView view=new WSView();
      WSPutView wrap=new WSPutView();
      view.setName(browseItem);
      EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
      List<String> keys=new ArrayList<String>();
      for (      XSDIdentityConstraintDefinition idty : idtylist) {
        EList<XSDXPathDefinition> xpathList=idty.getFields();
        for (        XSDXPathDefinition path : xpathList) {
          String key=decl.getName();
          key+=""String_Node_Str"" + path.getValue();
          keys.add(key);
        }
      }
      view.setSearchableBusinessElements(keys.toArray(new String[]{}));
      view.setViewableBusinessElements(keys.toArray(new String[]{}));
      view.setDescription(""String_Node_Str"" + decl.getName() + ""String_Node_Str"");
      wrap.setWsView(view);
      WSDeleteView delView=new WSDeleteView();
      WSViewPK viewPk=new WSViewPK();
      viewPk.setPk(browseItem);
      delView.setWsViewPK(viewPk);
      port.deleteView(delView);
      port.putView(wrap);
    }
  }
}","private void newBrowseItemView(String browseItem) throws RemoteException {
  for (  XSDElementDeclaration decl : declList) {
    String fullName=BROWSE_ITEMS + decl.getName();
    if (fullName.equals(browseItem)) {
      XtentisPort port=getXtentisPort();
      WSView view=new WSView();
      WSPutView wrap=new WSPutView();
      view.setName(browseItem);
      EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
      List<String> keys=new ArrayList<String>();
      for (      XSDIdentityConstraintDefinition idty : idtylist) {
        EList<XSDXPathDefinition> xpathList=idty.getFields();
        for (        XSDXPathDefinition path : xpathList) {
          String key=decl.getName();
          key+=""String_Node_Str"" + path.getValue();
          keys.add(key);
        }
      }
      view.setSearchableBusinessElements(keys.toArray(new String[]{}));
      view.setViewableBusinessElements(keys.toArray(new String[]{}));
      view.setDescription(""String_Node_Str"" + decl.getName() + ""String_Node_Str"");
      wrap.setWsView(view);
      WSViewPK viewPk=new WSViewPK();
      viewPk.setPk(browseItem);
      WSDeleteView delView=new WSDeleteView();
      delView.setWsViewPK(viewPk);
      WSGetView getView=new WSGetView();
      getView.setWsViewPK(viewPk);
      try {
        port.getView(getView);
        port.deleteView(delView);
      }
 catch (      RemoteException ex) {
      }
      port.putView(wrap);
    }
  }
}",0.8855182376309136
146111,"public void selectionChanged(SelectionChangedEvent event){
  String name=(String)((IStructuredSelection)event.getSelection()).getFirstElement();
  refreshRoleView(name);
}","public void selectionChanged(SelectionChangedEvent event){
  XSDElementDeclaration decl=(XSDElementDeclaration)((IStructuredSelection)event.getSelection()).getFirstElement();
  refreshRoleView(BROWSE_ITEMS + decl.getName());
  UpdateComplexViewButton(true);
}",0.6976744186046512
146112,"public Object[] getElements(Object inputElement){
  ArrayList<String> values=new ArrayList<String>();
  for (  XSDElementDeclaration decl : declList) {
    String name=decl.getName();
    name=BROWSE_ITEMS + name;
    values.add(name);
  }
  return values.toArray(new String[values.size()]);
}","public Object[] getElements(Object inputElement){
  ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
  return values.toArray(new XSDElementDeclaration[values.size()]);
}",0.5149700598802395
146113,"public String getColumnText(Object element,int columnIndex){
  return element.toString();
}","public String getColumnText(Object element,int columnIndex){
  return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
}",0.7601809954751131
146114,"public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.SINGLE | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> values=new ArrayList<String>();
      for (      XSDElementDeclaration decl : declList) {
        String name=decl.getName();
        name=BROWSE_ITEMS + name;
        values.add(name);
      }
      return values.toArray(new String[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return element.toString();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return false;
    }
    public void modify(    Object element,    String property,    Object value){
    }
    public Object getValue(    Object element,    String property){
      return element.toString();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      String name=(String)((IStructuredSelection)event.getSelection()).getFirstElement();
      refreshRoleView(name);
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.refresh();
  Label infoLabel=new Label(composite,SWT.NONE);
  infoLabel.setText(""String_Node_Str"");
  ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
  ruleColumn.setColumnWidth(250);
  List<String> roles=Util.getCachedXObjectsNameSet(page.getXObject(),TreeObject.ROLE);
  ruleColumn.setComboValues(roles.toArray(new String[]{}));
  ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
  acsColumn.setColumnWidth(250);
  acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
  complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),page.getManagedForm().getToolkit(),composite);
  complexTableViewer.setMainPage(page);
  complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
  complexTableViewer.create();
  complexTableViewer.getViewer().setInput(browseItemToRoles.get(declList.get(0)));
  setControl(composite);
}","public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.SINGLE | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
      return values.toArray(new XSDElementDeclaration[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return false;
    }
    public void modify(    Object element,    String property,    Object value){
    }
    public Object getValue(    Object element,    String property){
      return element.toString();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      XSDElementDeclaration decl=(XSDElementDeclaration)((IStructuredSelection)event.getSelection()).getFirstElement();
      refreshRoleView(BROWSE_ITEMS + decl.getName());
      UpdateComplexViewButton(true);
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.setColumnProperties(new String[]{INSTANCE_NAME});
  browseViewer.refresh();
  Label infoLabel=new Label(composite,SWT.NONE);
  infoLabel.setText(""String_Node_Str"");
  ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
  ruleColumn.setColumnWidth(250);
  List<String> roles=Util.getCachedXObjectsNameSet(page.getXObject(),TreeObject.ROLE);
  ruleColumn.setComboValues(roles.toArray(new String[]{}));
  ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
  acsColumn.setColumnWidth(250);
  acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
  complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),page.getManagedForm().getToolkit(),composite);
  complexTableViewer.setMainPage(page);
  complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
  complexTableViewer.create();
  complexTableViewer.getViewer().setInput(new ArrayList<Line>());
  UpdateComplexViewButton(false);
  setControl(composite);
}",0.5587459712862585
146115,"/** 
 * Check that a rule actually matches a document
 * @param itemPOJO
 * @param exp
 * @return true if it matches
 * @throws XtentisException
 */
private boolean ruleExpressionMatches(ItemPOJO itemPOJO,RoutingRuleExpressionPOJO exp) throws XtentisException {
  String content=null;
  int contentInt, expInt;
  try {
    content=Util.getFirstTextNode(itemPOJO.getProjection(),exp.getXpath());
  }
 catch (  TransformerException e) {
    String err=""String_Node_Str"" + exp.getXpath() + ""String_Node_Str""+ itemPOJO.getItemPOJOPK().getUniqueID()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(err,e);
    throw new XtentisException(err);
  }
switch (exp.getOperator()) {
case RoutingRuleExpressionPOJO.CONTAINS:
    if (content != null)     return (content.indexOf(exp.getValue()) > -1);
  return false;
case RoutingRuleExpressionPOJO.EQUALS:
if (content != null) return (content.equals(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.GREATER_THAN:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt > contentInt);
return false;
case RoutingRuleExpressionPOJO.GREATER_THAN_OR_EQUAL:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt >= contentInt);
return false;
case RoutingRuleExpressionPOJO.IS_NOT_NULL:
return (content != null);
case RoutingRuleExpressionPOJO.IS_NULL:
return (content == null);
case RoutingRuleExpressionPOJO.LOWER_THAN:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt < contentInt);
return false;
case RoutingRuleExpressionPOJO.LOWER_THAN_OR_EQUAL:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt <= contentInt);
return false;
case RoutingRuleExpressionPOJO.MATCHES:
if (exp.getValue() == null) return false;
if (content != null) return (content.matches(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.NOT_EQUALS:
if (content != null) return (!content.equals(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.STARTSWITH:
if (exp.getValue() == null) return false;
if (content != null) return (content.startsWith(exp.getValue()));
return false;
default :
return false;
}
}","/** 
 * Check that a rule actually matches a document
 * @param itemPOJO
 * @param exp
 * @return true if it matches
 * @throws XtentisException
 */
private boolean ruleExpressionMatches(ItemPOJO itemPOJO,RoutingRuleExpressionPOJO exp) throws XtentisException {
  String content=null;
  int contentInt, expInt;
  String expXpath=exp.getXpath();
  if (!expXpath.startsWith(""String_Node_Str""))   expXpath=""String_Node_Str"" + expXpath;
  try {
    content=Util.getFirstTextNode(itemPOJO.getProjection(),expXpath);
  }
 catch (  TransformerException e) {
    String err=""String_Node_Str"" + exp.getXpath() + ""String_Node_Str""+ itemPOJO.getItemPOJOPK().getUniqueID()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(err,e);
    throw new XtentisException(err);
  }
switch (exp.getOperator()) {
case RoutingRuleExpressionPOJO.CONTAINS:
    if (content != null)     return (content.indexOf(exp.getValue()) > -1);
  return false;
case RoutingRuleExpressionPOJO.EQUALS:
if (content != null) return (content.equals(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.GREATER_THAN:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt > contentInt);
return false;
case RoutingRuleExpressionPOJO.GREATER_THAN_OR_EQUAL:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt >= contentInt);
return false;
case RoutingRuleExpressionPOJO.IS_NOT_NULL:
return (content != null);
case RoutingRuleExpressionPOJO.IS_NULL:
return (content == null);
case RoutingRuleExpressionPOJO.LOWER_THAN:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt < contentInt);
return false;
case RoutingRuleExpressionPOJO.LOWER_THAN_OR_EQUAL:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt <= contentInt);
return false;
case RoutingRuleExpressionPOJO.MATCHES:
if (exp.getValue() == null) return false;
if (content != null) return (content.matches(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.NOT_EQUALS:
if (content != null) return (!content.equals(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.STARTSWITH:
if (exp.getValue() == null) return false;
if (content != null) return (content.startsWith(exp.getValue()));
return false;
default :
return false;
}
}",0.9770609318996416
146116,"@Override protected Control createDialogArea(Composite parent){
  Group comp=new Group(parent,SWT.NONE);
  comp.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  ((GridLayout)parent.getLayout()).marginTop=5;
  ((GridLayout)parent.getLayout()).marginLeft=5;
  ((GridLayout)parent.getLayout()).marginRight=5;
  ((GridLayout)parent.getLayout()).marginBottom=5;
  parent.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  comp.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  comp.setLayout(new GridLayout(1,false));
  comp.setText(""String_Node_Str"" + transformer.getName() + ""String_Node_Str"");
  Set<String> inputVariables=new HashSet<String>();
  for (  WSTransformerProcessStep step : transformer.getProcessSteps()) {
    for (    WSTransformerVariablesMapping mapping : step.getInputMappings()) {
      inputVariables.add(mapping.getPipelineVariable() == null ? TransformerMainPage.DEFAULT_VAR : mapping.getPipelineVariable());
    }
  }
  ComplexTableViewerColumn[] columns=new ComplexTableViewerColumn[]{new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,inputVariables.toArray(new String[inputVariables.size()]),0),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,new String[]{""String_Node_Str"",""String_Node_Str""},0),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,null,10)};
  objectViewer=new ComplexTableViewer(Arrays.asList(columns),toolkit,comp);
  objectViewer.create();
  Table table=objectViewer.getViewer().getTable();
  table.getColumns()[2].setWidth(500);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  if (page.getCacheList() != null) {
    objectViewer.getViewer().setInput(page.getCacheList());
  }
 else {
    List<Line> list=new ArrayList<Line>();
    objectViewer.getViewer().setInput(list);
  }
  return comp;
}","@Override protected Control createDialogArea(Composite parent){
  Group comp=new Group(parent,SWT.NONE);
  comp.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  ((GridLayout)parent.getLayout()).marginTop=5;
  ((GridLayout)parent.getLayout()).marginLeft=5;
  ((GridLayout)parent.getLayout()).marginRight=5;
  ((GridLayout)parent.getLayout()).marginBottom=5;
  parent.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  comp.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  comp.setLayout(new GridLayout(1,false));
  comp.setText(""String_Node_Str"" + transformer.getName() + ""String_Node_Str"");
  Set<String> inputVariables=new HashSet<String>();
  for (  WSTransformerProcessStep step : transformer.getProcessSteps()) {
    for (    WSTransformerVariablesMapping mapping : step.getInputMappings()) {
      inputVariables.add(mapping.getPipelineVariable() == null ? TransformerMainPage.DEFAULT_VAR : mapping.getPipelineVariable());
    }
  }
  ComplexTableViewerColumn[] columns=new ComplexTableViewerColumn[]{new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,inputVariables.toArray(new String[inputVariables.size()]),0),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},0),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,null,10)};
  objectViewer=new ComplexTableViewer(Arrays.asList(columns),toolkit,comp);
  objectViewer.create();
  Table table=objectViewer.getViewer().getTable();
  table.getColumns()[2].setWidth(500);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  if (page.getCacheList() != null) {
    objectViewer.getViewer().setInput(page.getCacheList());
  }
 else {
    List<Line> list=new ArrayList<Line>();
    objectViewer.getViewer().setInput(list);
  }
  return comp;
}",0.9955022488755624
146117,"/** 
 * Check that a rule actually matches a document
 * @param itemPOJO
 * @param exp
 * @return true if it matches
 * @throws XtentisException
 */
private boolean ruleExpressionMatches(ItemPOJO itemPOJO,RoutingRuleExpressionPOJO exp) throws XtentisException {
  String content=null;
  int contentInt, expInt;
  try {
    content=Util.getFirstTextNode(itemPOJO.getProjection(),exp.getXpath());
  }
 catch (  TransformerException e) {
    String err=""String_Node_Str"" + exp.getXpath() + ""String_Node_Str""+ itemPOJO.getItemPOJOPK().getUniqueID()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(err,e);
    throw new XtentisException(err);
  }
switch (exp.getOperator()) {
case RoutingRuleExpressionPOJO.CONTAINS:
    if (content != null)     return (content.indexOf(exp.getValue()) > -1);
  return false;
case RoutingRuleExpressionPOJO.EQUALS:
if (content != null) return (content.equals(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.GREATER_THAN:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt > contentInt);
return false;
case RoutingRuleExpressionPOJO.GREATER_THAN_OR_EQUAL:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt >= contentInt);
return false;
case RoutingRuleExpressionPOJO.IS_NOT_NULL:
return (content != null);
case RoutingRuleExpressionPOJO.IS_NULL:
return (content == null);
case RoutingRuleExpressionPOJO.LOWER_THAN:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt < contentInt);
return false;
case RoutingRuleExpressionPOJO.LOWER_THAN_OR_EQUAL:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt <= contentInt);
return false;
case RoutingRuleExpressionPOJO.MATCHES:
if (exp.getValue() == null) return false;
if (content != null) return (content.matches(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.NOT_EQUALS:
if (content != null) return (!content.equals(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.STARTSWITH:
if (exp.getValue() == null) return false;
if (content != null) return (content.startsWith(exp.getValue()));
return false;
default :
return false;
}
}","/** 
 * Check that a rule actually matches a document
 * @param itemPOJO
 * @param exp
 * @return true if it matches
 * @throws XtentisException
 */
private boolean ruleExpressionMatches(ItemPOJO itemPOJO,RoutingRuleExpressionPOJO exp) throws XtentisException {
  String content=null;
  int contentInt, expInt;
  String expXpath=exp.getXpath();
  if (!expXpath.startsWith(""String_Node_Str""))   expXpath=""String_Node_Str"" + expXpath;
  try {
    content=Util.getFirstTextNode(itemPOJO.getProjection(),expXpath);
  }
 catch (  TransformerException e) {
    String err=""String_Node_Str"" + exp.getXpath() + ""String_Node_Str""+ itemPOJO.getItemPOJOPK().getUniqueID()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(err,e);
    throw new XtentisException(err);
  }
switch (exp.getOperator()) {
case RoutingRuleExpressionPOJO.CONTAINS:
    if (content != null)     return (content.indexOf(exp.getValue()) > -1);
  return false;
case RoutingRuleExpressionPOJO.EQUALS:
if (content != null) return (content.equals(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.GREATER_THAN:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt > contentInt);
return false;
case RoutingRuleExpressionPOJO.GREATER_THAN_OR_EQUAL:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt >= contentInt);
return false;
case RoutingRuleExpressionPOJO.IS_NOT_NULL:
return (content != null);
case RoutingRuleExpressionPOJO.IS_NULL:
return (content == null);
case RoutingRuleExpressionPOJO.LOWER_THAN:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt < contentInt);
return false;
case RoutingRuleExpressionPOJO.LOWER_THAN_OR_EQUAL:
try {
expInt=Integer.parseInt(exp.getValue());
}
 catch (Exception e) {
return false;
}
try {
contentInt=Integer.parseInt(content);
}
 catch (Exception e) {
return false;
}
if (content != null) return (expInt <= contentInt);
return false;
case RoutingRuleExpressionPOJO.MATCHES:
if (exp.getValue() == null) return false;
if (content != null) return (content.matches(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.NOT_EQUALS:
if (content != null) return (!content.equals(exp.getValue()));
return false;
case RoutingRuleExpressionPOJO.STARTSWITH:
if (exp.getValue() == null) return false;
if (content != null) return (content.startsWith(exp.getValue()));
return false;
default :
return false;
}
}",0.9770609318996416
146118,"@Override protected Control createDialogArea(Composite parent){
  Group comp=new Group(parent,SWT.NONE);
  comp.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  ((GridLayout)parent.getLayout()).marginTop=5;
  ((GridLayout)parent.getLayout()).marginLeft=5;
  ((GridLayout)parent.getLayout()).marginRight=5;
  ((GridLayout)parent.getLayout()).marginBottom=5;
  parent.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  comp.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  comp.setLayout(new GridLayout(1,false));
  comp.setText(""String_Node_Str"" + transformer.getName() + ""String_Node_Str"");
  Set<String> inputVariables=new HashSet<String>();
  for (  WSTransformerProcessStep step : transformer.getProcessSteps()) {
    for (    WSTransformerVariablesMapping mapping : step.getInputMappings()) {
      inputVariables.add(mapping.getPipelineVariable() == null ? TransformerMainPage.DEFAULT_VAR : mapping.getPipelineVariable());
    }
  }
  ComplexTableViewerColumn[] columns=new ComplexTableViewerColumn[]{new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,inputVariables.toArray(new String[inputVariables.size()]),0),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,new String[]{""String_Node_Str"",""String_Node_Str""},0),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,null,10)};
  objectViewer=new ComplexTableViewer(Arrays.asList(columns),toolkit,comp);
  objectViewer.create();
  Table table=objectViewer.getViewer().getTable();
  table.getColumns()[2].setWidth(500);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  if (page.getCacheList() != null) {
    objectViewer.getViewer().setInput(page.getCacheList());
  }
 else {
    List<Line> list=new ArrayList<Line>();
    objectViewer.getViewer().setInput(list);
  }
  return comp;
}","@Override protected Control createDialogArea(Composite parent){
  Group comp=new Group(parent,SWT.NONE);
  comp.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  ((GridLayout)parent.getLayout()).marginTop=5;
  ((GridLayout)parent.getLayout()).marginLeft=5;
  ((GridLayout)parent.getLayout()).marginRight=5;
  ((GridLayout)parent.getLayout()).marginBottom=5;
  parent.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  comp.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  comp.setLayout(new GridLayout(1,false));
  comp.setText(""String_Node_Str"" + transformer.getName() + ""String_Node_Str"");
  Set<String> inputVariables=new HashSet<String>();
  for (  WSTransformerProcessStep step : transformer.getProcessSteps()) {
    for (    WSTransformerVariablesMapping mapping : step.getInputMappings()) {
      inputVariables.add(mapping.getPipelineVariable() == null ? TransformerMainPage.DEFAULT_VAR : mapping.getPipelineVariable());
    }
  }
  ComplexTableViewerColumn[] columns=new ComplexTableViewerColumn[]{new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,inputVariables.toArray(new String[inputVariables.size()]),0),new ComplexTableViewerColumn(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},0),new ComplexTableViewerColumn(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,null,10)};
  objectViewer=new ComplexTableViewer(Arrays.asList(columns),toolkit,comp);
  objectViewer.create();
  Table table=objectViewer.getViewer().getTable();
  table.getColumns()[2].setWidth(500);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  if (page.getCacheList() != null) {
    objectViewer.getViewer().setInput(page.getCacheList());
  }
 else {
    List<Line> list=new ArrayList<Line>();
    objectViewer.getViewer().setInput(list);
  }
  return comp;
}",0.9955022488755624
146119,"public void run(){
  IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
  List list=selection.toList();
  for (  Object obj : list) {
    if (obj instanceof XSDElementDeclaration) {
      if (Util.getParent(obj) == obj)       declList.add((XSDElementDeclaration)obj);
    }
  }
  AddBrowseItemsWizard wizard=new AddBrowseItemsWizard(page,list);
  WizardDialog dialog=new WizardDialog(page.getSite().getShell(),wizard);
  dialog.open();
  dialog.setBlockOnOpen(true);
}","public void run(){
  IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
  declList.clear();
  List list=selection.toList();
  for (  Object obj : list) {
    if (obj instanceof XSDElementDeclaration) {
      if (Util.getParent(obj) == obj)       declList.add((XSDElementDeclaration)obj);
    }
  }
  AddBrowseItemsWizard wizard=new AddBrowseItemsWizard(page,declList);
  WizardDialog dialog=new WizardDialog(page.getSite().getShell(),wizard);
  dialog.open();
}",0.9433962264150944
146120,"private void newBrowseItemView(String browseItem) throws RemoteException {
  for (  XSDElementDeclaration decl : declList) {
    String fullName=BROWSE_ITEMS + decl.getName();
    if (fullName.equals(browseItem)) {
      XtentisPort port=getXtentisPort();
      WSView view=new WSView();
      WSPutView wrap=new WSPutView();
      view.setName(browseItem);
      EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
      List<String> keys=new ArrayList<String>();
      for (      XSDIdentityConstraintDefinition idty : idtylist) {
        EList<XSDXPathDefinition> xpathList=idty.getFields();
        for (        XSDXPathDefinition path : xpathList) {
          String key=decl.getName();
          key+=""String_Node_Str"" + path.getValue();
          keys.add(key);
        }
      }
      view.setSearchableBusinessElements(keys.toArray(new String[]{}));
      view.setViewableBusinessElements(keys.toArray(new String[]{}));
      view.setDescription(""String_Node_Str"" + decl.getName() + ""String_Node_Str"");
      wrap.setWsView(view);
      WSDeleteView delView=new WSDeleteView();
      WSViewPK viewPk=new WSViewPK();
      viewPk.setPk(browseItem);
      delView.setWsViewPK(viewPk);
      port.deleteView(delView);
      port.putView(wrap);
    }
  }
}","private void newBrowseItemView(String browseItem) throws RemoteException {
  for (  XSDElementDeclaration decl : declList) {
    String fullName=BROWSE_ITEMS + decl.getName();
    if (fullName.equals(browseItem)) {
      XtentisPort port=getXtentisPort();
      WSView view=new WSView();
      WSPutView wrap=new WSPutView();
      view.setName(browseItem);
      EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
      List<String> keys=new ArrayList<String>();
      for (      XSDIdentityConstraintDefinition idty : idtylist) {
        EList<XSDXPathDefinition> xpathList=idty.getFields();
        for (        XSDXPathDefinition path : xpathList) {
          String key=decl.getName();
          key+=""String_Node_Str"" + path.getValue();
          keys.add(key);
        }
      }
      view.setSearchableBusinessElements(keys.toArray(new String[]{}));
      view.setViewableBusinessElements(keys.toArray(new String[]{}));
      view.setDescription(""String_Node_Str"" + decl.getName() + ""String_Node_Str"");
      wrap.setWsView(view);
      WSViewPK viewPk=new WSViewPK();
      viewPk.setPk(browseItem);
      WSDeleteView delView=new WSDeleteView();
      delView.setWsViewPK(viewPk);
      WSGetView getView=new WSGetView();
      getView.setWsViewPK(viewPk);
      try {
        port.getView(getView);
        port.deleteView(delView);
      }
 catch (      RemoteException ex) {
      }
      port.putView(wrap);
    }
  }
}",0.8855182376309136
146121,"public void selectionChanged(SelectionChangedEvent event){
  String name=(String)((IStructuredSelection)event.getSelection()).getFirstElement();
  refreshRoleView(name);
}","public void selectionChanged(SelectionChangedEvent event){
  XSDElementDeclaration decl=(XSDElementDeclaration)((IStructuredSelection)event.getSelection()).getFirstElement();
  refreshRoleView(BROWSE_ITEMS + decl.getName());
  UpdateComplexViewButton(true);
}",0.6976744186046512
146122,"public Object[] getElements(Object inputElement){
  ArrayList<String> values=new ArrayList<String>();
  for (  XSDElementDeclaration decl : declList) {
    String name=decl.getName();
    name=BROWSE_ITEMS + name;
    values.add(name);
  }
  return values.toArray(new String[values.size()]);
}","public Object[] getElements(Object inputElement){
  ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
  return values.toArray(new XSDElementDeclaration[values.size()]);
}",0.5149700598802395
146123,"public String getColumnText(Object element,int columnIndex){
  return element.toString();
}","public String getColumnText(Object element,int columnIndex){
  return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
}",0.7601809954751131
146124,"public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.SINGLE | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> values=new ArrayList<String>();
      for (      XSDElementDeclaration decl : declList) {
        String name=decl.getName();
        name=BROWSE_ITEMS + name;
        values.add(name);
      }
      return values.toArray(new String[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return element.toString();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return false;
    }
    public void modify(    Object element,    String property,    Object value){
    }
    public Object getValue(    Object element,    String property){
      return element.toString();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      String name=(String)((IStructuredSelection)event.getSelection()).getFirstElement();
      refreshRoleView(name);
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.refresh();
  Label infoLabel=new Label(composite,SWT.NONE);
  infoLabel.setText(""String_Node_Str"");
  ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
  ruleColumn.setColumnWidth(250);
  List<String> roles=Util.getCachedXObjectsNameSet(page.getXObject(),TreeObject.ROLE);
  ruleColumn.setComboValues(roles.toArray(new String[]{}));
  ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
  acsColumn.setColumnWidth(250);
  acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
  complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),page.getManagedForm().getToolkit(),composite);
  complexTableViewer.setMainPage(page);
  complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
  complexTableViewer.create();
  complexTableViewer.getViewer().setInput(browseItemToRoles.get(declList.get(0)));
  setControl(composite);
}","public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.SINGLE | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
      return values.toArray(new XSDElementDeclaration[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return false;
    }
    public void modify(    Object element,    String property,    Object value){
    }
    public Object getValue(    Object element,    String property){
      return element.toString();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      XSDElementDeclaration decl=(XSDElementDeclaration)((IStructuredSelection)event.getSelection()).getFirstElement();
      refreshRoleView(BROWSE_ITEMS + decl.getName());
      UpdateComplexViewButton(true);
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.setColumnProperties(new String[]{INSTANCE_NAME});
  browseViewer.refresh();
  Label infoLabel=new Label(composite,SWT.NONE);
  infoLabel.setText(""String_Node_Str"");
  ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
  ruleColumn.setColumnWidth(250);
  List<String> roles=Util.getCachedXObjectsNameSet(page.getXObject(),TreeObject.ROLE);
  ruleColumn.setComboValues(roles.toArray(new String[]{}));
  ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
  acsColumn.setColumnWidth(250);
  acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
  complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),page.getManagedForm().getToolkit(),composite);
  complexTableViewer.setMainPage(page);
  complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
  complexTableViewer.create();
  complexTableViewer.getViewer().setInput(new ArrayList<Line>());
  UpdateComplexViewButton(false);
  setControl(composite);
}",0.5587459712862585
146125,"/** 
 * give the children of a node
 * @param id the id of the node in yui
 * @param nodeCount the internal count of nodes in yui tree
 * @param language
 * @return an array of TreeNode
 */
public TreeNode[] getChildren(int id,int nodeCount,String language,boolean foreignKey,int docIndex){
  return getChildrenWithMask(id,nodeCount,language,foreignKey,docIndex,false);
}","/** 
 * give the children of a node
 * @param id the id of the node in yui
 * @param nodeCount the internal count of nodes in yui tree
 * @param language
 * @return an array of TreeNode
 */
public TreeNode[] getChildren(int id,int nodeCount,String language,boolean foreignKey,int docIndex){
  return getChildrenWithKeyMask(id,nodeCount,language,foreignKey,docIndex,false);
}",0.995973154362416
146126,"private static String pushUpdateReport(String[] ids,String concept,String operationType) throws Exception {
  org.apache.log4j.Logger.getLogger(ItemsBrowserDWR.class).trace(""String_Node_Str"" + concept + ""String_Node_Str""+ operationType);
  WebContext ctx=WebContextFactory.get();
  HashMap<String,UpdateReportItem> updatedPath=new HashMap<String,UpdateReportItem>();
  updatedPath=(HashMap<String,UpdateReportItem>)ctx.getSession().getAttribute(""String_Node_Str"");
  if (!""String_Node_Str"".equals(operationType) && updatedPath == null) {
    return ""String_Node_Str"";
  }
  String username=""String_Node_Str"";
  String revisionId=""String_Node_Str"";
  String dataModelPK=""String_Node_Str"";
  String dataClusterPK=""String_Node_Str"";
  try {
    Configuration config=Configuration.getInstance();
    dataModelPK=config.getModel() == null ? ""String_Node_Str"" : config.getModel();
    dataClusterPK=config.getCluster() == null ? ""String_Node_Str"" : config.getCluster();
    username=Util.getLoginUserName();
    String universename=Util.getLoginUniverse();
    if (universename != null && universename.length() > 0)     revisionId=Util.getRevisionIdFromUniverse(universename,concept);
  }
 catch (  Exception e1) {
    e1.printStackTrace();
    throw e1;
  }
  String key=""String_Node_Str"";
  if (ids != null) {
    for (int i=0; i < ids.length; i++) {
      key+=ids[i];
      if (i != ids.length - 1)       key+=""String_Node_Str"";
    }
  }
  String xml2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + username + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ System.currentTimeMillis()+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(operationType)+ ""String_Node_Str""+ ""String_Node_Str""+ revisionId+ ""String_Node_Str""+ ""String_Node_Str""+ dataClusterPK+ ""String_Node_Str""+ ""String_Node_Str""+ dataModelPK+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(concept)+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(key)+ ""String_Node_Str"";
  if (""String_Node_Str"".equals(operationType)) {
    Collection<UpdateReportItem> list=updatedPath.values();
    for (Iterator<UpdateReportItem> iter=list.iterator(); iter.hasNext(); ) {
      UpdateReportItem item=iter.next();
      xml2+=""String_Node_Str"" + ""String_Node_Str"" + StringEscapeUtils.escapeXml(item.getPath()) + ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(item.getOldValue())+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(item.getNewValue())+ ""String_Node_Str""+ ""String_Node_Str"";
    }
  }
  xml2+=""String_Node_Str"";
  ctx.getSession().setAttribute(""String_Node_Str"",null);
  ctx.getSession().setAttribute(""String_Node_Str"",null);
  try {
    WSItemPK itemPK=Util.getPort().putItem(new WSPutItem(new WSDataClusterPK(""String_Node_Str""),xml2,new WSDataModelPK(""String_Node_Str"")));
    org.apache.log4j.Logger.getLogger(ItemsBrowserDWR.class).debug(""String_Node_Str"" + xml2);
    Util.getPort().routeItemV2(new WSRouteItemV2(itemPK));
    return ""String_Node_Str"";
  }
 catch (  RemoteException e) {
    e.printStackTrace();
    return ""String_Node_Str"";
  }
catch (  XtentisWebappException e) {
    e.printStackTrace();
    return ""String_Node_Str"";
  }
}","private static String pushUpdateReport(String[] ids,String concept,String operationType) throws Exception {
  org.apache.log4j.Logger.getLogger(ItemsBrowserDWR.class).trace(""String_Node_Str"" + concept + ""String_Node_Str""+ operationType);
  WebContext ctx=WebContextFactory.get();
  HashMap<String,UpdateReportItem> updatedPath=new HashMap<String,UpdateReportItem>();
  updatedPath=(HashMap<String,UpdateReportItem>)ctx.getSession().getAttribute(""String_Node_Str"");
  if (!""String_Node_Str"".equals(operationType) && updatedPath == null) {
    return ""String_Node_Str"";
  }
  String username=""String_Node_Str"";
  String revisionId=""String_Node_Str"";
  String dataModelPK=""String_Node_Str"";
  String dataClusterPK=""String_Node_Str"";
  try {
    Configuration config=Configuration.getInstance();
    dataModelPK=config.getModel() == null ? ""String_Node_Str"" : config.getModel();
    dataClusterPK=config.getCluster() == null ? ""String_Node_Str"" : config.getCluster();
    username=Util.getLoginUserName();
    String universename=Util.getLoginUniverse();
    if (universename != null && universename.length() > 0)     revisionId=Util.getRevisionIdFromUniverse(universename,concept);
  }
 catch (  Exception e1) {
    e1.printStackTrace();
    throw e1;
  }
  String key=""String_Node_Str"";
  if (ids != null) {
    for (int i=0; i < ids.length; i++) {
      key+=ids[i];
      if (i != ids.length - 1)       key+=""String_Node_Str"";
    }
  }
  String xml2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + username + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ System.currentTimeMillis()+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(operationType)+ ""String_Node_Str""+ ""String_Node_Str""+ revisionId+ ""String_Node_Str""+ ""String_Node_Str""+ dataClusterPK+ ""String_Node_Str""+ ""String_Node_Str""+ dataModelPK+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(concept)+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(key)+ ""String_Node_Str"";
  if (""String_Node_Str"".equals(operationType)) {
    Collection<UpdateReportItem> list=updatedPath.values();
    for (Iterator<UpdateReportItem> iter=list.iterator(); iter.hasNext(); ) {
      UpdateReportItem item=iter.next();
      xml2+=""String_Node_Str"" + ""String_Node_Str"" + StringEscapeUtils.escapeXml(item.getPath()) + ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(item.getOldValue())+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(item.getNewValue())+ ""String_Node_Str""+ ""String_Node_Str"";
    }
  }
  xml2+=""String_Node_Str"";
  ctx.getSession().setAttribute(""String_Node_Str"",null);
  ctx.getSession().setAttribute(""String_Node_Str"",null);
  try {
    WSItemPK itemPK=Util.getPort().putItem(new WSPutItem(new WSDataClusterPK(""String_Node_Str""),xml2,new WSDataModelPK(""String_Node_Str"")));
    org.apache.log4j.Logger.getLogger(ItemsBrowserDWR.class).debug(""String_Node_Str"" + xml2);
    return ""String_Node_Str"";
  }
 catch (  RemoteException e) {
    e.printStackTrace();
    return ""String_Node_Str"";
  }
catch (  XtentisWebappException e) {
    e.printStackTrace();
    return ""String_Node_Str"";
  }
}",0.9907595927956148
146127,"/** 
 * give the children of a node
 * @param id the id of the node in yui
 * @param nodeCount the internal count of nodes in yui tree
 * @param language
 * @return an array of TreeNode
 */
public TreeNode[] getChildren(int id,int nodeCount,String language,boolean foreignKey,int docIndex){
  return getChildrenWithMask(id,nodeCount,language,foreignKey,docIndex,false);
}","/** 
 * give the children of a node
 * @param id the id of the node in yui
 * @param nodeCount the internal count of nodes in yui tree
 * @param language
 * @return an array of TreeNode
 */
public TreeNode[] getChildren(int id,int nodeCount,String language,boolean foreignKey,int docIndex){
  return getChildrenWithKeyMask(id,nodeCount,language,foreignKey,docIndex,false);
}",0.995973154362416
146128,"private static String pushUpdateReport(String[] ids,String concept,String operationType) throws Exception {
  org.apache.log4j.Logger.getLogger(ItemsBrowserDWR.class).trace(""String_Node_Str"" + concept + ""String_Node_Str""+ operationType);
  WebContext ctx=WebContextFactory.get();
  HashMap<String,UpdateReportItem> updatedPath=new HashMap<String,UpdateReportItem>();
  updatedPath=(HashMap<String,UpdateReportItem>)ctx.getSession().getAttribute(""String_Node_Str"");
  if (!""String_Node_Str"".equals(operationType) && updatedPath == null) {
    return ""String_Node_Str"";
  }
  String username=""String_Node_Str"";
  String revisionId=""String_Node_Str"";
  String dataModelPK=""String_Node_Str"";
  String dataClusterPK=""String_Node_Str"";
  try {
    Configuration config=Configuration.getInstance();
    dataModelPK=config.getModel() == null ? ""String_Node_Str"" : config.getModel();
    dataClusterPK=config.getCluster() == null ? ""String_Node_Str"" : config.getCluster();
    username=Util.getLoginUserName();
    String universename=Util.getLoginUniverse();
    if (universename != null && universename.length() > 0)     revisionId=Util.getRevisionIdFromUniverse(universename,concept);
  }
 catch (  Exception e1) {
    e1.printStackTrace();
    throw e1;
  }
  String key=""String_Node_Str"";
  if (ids != null) {
    for (int i=0; i < ids.length; i++) {
      key+=ids[i];
      if (i != ids.length - 1)       key+=""String_Node_Str"";
    }
  }
  String xml2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + username + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ System.currentTimeMillis()+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(operationType)+ ""String_Node_Str""+ ""String_Node_Str""+ revisionId+ ""String_Node_Str""+ ""String_Node_Str""+ dataClusterPK+ ""String_Node_Str""+ ""String_Node_Str""+ dataModelPK+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(concept)+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(key)+ ""String_Node_Str"";
  if (""String_Node_Str"".equals(operationType)) {
    Collection<UpdateReportItem> list=updatedPath.values();
    for (Iterator<UpdateReportItem> iter=list.iterator(); iter.hasNext(); ) {
      UpdateReportItem item=iter.next();
      xml2+=""String_Node_Str"" + ""String_Node_Str"" + StringEscapeUtils.escapeXml(item.getPath()) + ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(item.getOldValue())+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(item.getNewValue())+ ""String_Node_Str""+ ""String_Node_Str"";
    }
  }
  xml2+=""String_Node_Str"";
  ctx.getSession().setAttribute(""String_Node_Str"",null);
  ctx.getSession().setAttribute(""String_Node_Str"",null);
  try {
    WSItemPK itemPK=Util.getPort().putItem(new WSPutItem(new WSDataClusterPK(""String_Node_Str""),xml2,new WSDataModelPK(""String_Node_Str"")));
    org.apache.log4j.Logger.getLogger(ItemsBrowserDWR.class).debug(""String_Node_Str"" + xml2);
    Util.getPort().routeItemV2(new WSRouteItemV2(itemPK));
    return ""String_Node_Str"";
  }
 catch (  RemoteException e) {
    e.printStackTrace();
    return ""String_Node_Str"";
  }
catch (  XtentisWebappException e) {
    e.printStackTrace();
    return ""String_Node_Str"";
  }
}","private static String pushUpdateReport(String[] ids,String concept,String operationType) throws Exception {
  org.apache.log4j.Logger.getLogger(ItemsBrowserDWR.class).trace(""String_Node_Str"" + concept + ""String_Node_Str""+ operationType);
  WebContext ctx=WebContextFactory.get();
  HashMap<String,UpdateReportItem> updatedPath=new HashMap<String,UpdateReportItem>();
  updatedPath=(HashMap<String,UpdateReportItem>)ctx.getSession().getAttribute(""String_Node_Str"");
  if (!""String_Node_Str"".equals(operationType) && updatedPath == null) {
    return ""String_Node_Str"";
  }
  String username=""String_Node_Str"";
  String revisionId=""String_Node_Str"";
  String dataModelPK=""String_Node_Str"";
  String dataClusterPK=""String_Node_Str"";
  try {
    Configuration config=Configuration.getInstance();
    dataModelPK=config.getModel() == null ? ""String_Node_Str"" : config.getModel();
    dataClusterPK=config.getCluster() == null ? ""String_Node_Str"" : config.getCluster();
    username=Util.getLoginUserName();
    String universename=Util.getLoginUniverse();
    if (universename != null && universename.length() > 0)     revisionId=Util.getRevisionIdFromUniverse(universename,concept);
  }
 catch (  Exception e1) {
    e1.printStackTrace();
    throw e1;
  }
  String key=""String_Node_Str"";
  if (ids != null) {
    for (int i=0; i < ids.length; i++) {
      key+=ids[i];
      if (i != ids.length - 1)       key+=""String_Node_Str"";
    }
  }
  String xml2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + username + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ System.currentTimeMillis()+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(operationType)+ ""String_Node_Str""+ ""String_Node_Str""+ revisionId+ ""String_Node_Str""+ ""String_Node_Str""+ dataClusterPK+ ""String_Node_Str""+ ""String_Node_Str""+ dataModelPK+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(concept)+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(key)+ ""String_Node_Str"";
  if (""String_Node_Str"".equals(operationType)) {
    Collection<UpdateReportItem> list=updatedPath.values();
    for (Iterator<UpdateReportItem> iter=list.iterator(); iter.hasNext(); ) {
      UpdateReportItem item=iter.next();
      xml2+=""String_Node_Str"" + ""String_Node_Str"" + StringEscapeUtils.escapeXml(item.getPath()) + ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(item.getOldValue())+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(item.getNewValue())+ ""String_Node_Str""+ ""String_Node_Str"";
    }
  }
  xml2+=""String_Node_Str"";
  ctx.getSession().setAttribute(""String_Node_Str"",null);
  ctx.getSession().setAttribute(""String_Node_Str"",null);
  try {
    WSItemPK itemPK=Util.getPort().putItem(new WSPutItem(new WSDataClusterPK(""String_Node_Str""),xml2,new WSDataModelPK(""String_Node_Str"")));
    org.apache.log4j.Logger.getLogger(ItemsBrowserDWR.class).debug(""String_Node_Str"" + xml2);
    return ""String_Node_Str"";
  }
 catch (  RemoteException e) {
    e.printStackTrace();
    return ""String_Node_Str"";
  }
catch (  XtentisWebappException e) {
    e.printStackTrace();
    return ""String_Node_Str"";
  }
}",0.9907595927956148
146129,"public void run(){
  try {
    super.run();
    ISelection selection=view.getViewer().getSelection();
    TreeObject xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    TreeParent xfolder=(xobject.isXObject()) ? xobject.getParent() : (TreeParent)xobject;
    Object key=null;
switch (xfolder.getType()) {
case TreeObject.TRANSFORMER:
      ViewInputDialog vid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          if (!Pattern.matches(""String_Node_Str"",newText)) {
            return ""String_Node_Str"";
          }
          return null;
        }
      }
,true);
    vid.setBtnShow(false);
  vid.create();
vid.getShell().setSize(new Point(500,220));
vid.setBlockOnOpen(true);
if (vid.open() == Window.CANCEL) return;
key=vid.getValue();
break;
case TreeObject.VIEW:
ViewInputDialog tid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
,false);
tid.create();
tid.getShell().setSize(new Point(600,180));
tid.setBlockOnOpen(true);
if (tid.open() == Window.CANCEL) return;
key=tid.getValue();
break;
case TreeObject.SOURCE:
case TreeObject.DESTINATION:
case TreeObject.DATA_MODEL:
case TreeObject.INBOUND_ADAPTOR:
case TreeObject.INBOUND_PLUGIN:
case TreeObject.OUTBOUND_ADAPTOR:
case TreeObject.OUTBOUND_PLUGIN:
case TreeObject.DATA_CLUSTER:
case TreeObject.STORED_PROCEDURE:
case TreeObject.ROLE:
case TreeObject.ROUTING_RULE:
case TreeObject.MENU:
case TreeObject.UNIVERSE:
case TreeObject.SYNCHRONIZATIONPLAN:
InputDialog id1=new InputDialog(view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",null,new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
);
id1.setBlockOnOpen(true);
if (id1.open() == Window.CANCEL) return;
key=id1.getValue();
break;
default :
return;
}
XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
TreeObject newInstance=null;
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
{
if (port.existsDataModel(new WSExistsDataModel(new WSDataModelPK((String)key))).is_true()) {
;
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModel wsDataModel=new WSDataModel((String)key,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
port.putDataModel(new WSPutDataModel(wsDataModel));
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_MODEL,new WSDataModelPK((String)key),wsDataModel);
break;
}
case TreeObject.VIEW:
{
if (port.existsView(new WSExistsView(new WSViewPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModelPK[] dataModelPKs=Util.getAllDataModelPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstDataModel=null;
for (int i=0; i < dataModelPKs.length; i++) {
if (dataModelPKs[i].getPk().indexOf(""String_Node_Str"") == -1) {
firstDataModel=dataModelPKs[i].getPk();
break;
}
}
if (firstDataModel == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSDataClusterPK[] dataClusterPKs=Util.getAllDataClusterPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstItemCluster=null;
for (int i=0; i < dataClusterPKs.length; i++) {
if (!dataClusterPKs[i].getPk().equals(""String_Node_Str"")) {
firstItemCluster=dataClusterPKs[i].getPk();
break;
}
}
if (firstItemCluster == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSView wsview=new WSView((String)key,""String_Node_Str"",new String[]{},new WSWhereCondition[0],new String[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.VIEW,new WSViewPK((String)key),wsview);
break;
}
case TreeObject.DATA_CLUSTER:
{
if (port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataCluster dc=new WSDataCluster((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_CLUSTER,new WSDataClusterPK((String)key),dc);
break;
}
case TreeObject.STORED_PROCEDURE:
{
if (port.existsStoredProcedure(new WSExistsStoredProcedure(new WSStoredProcedurePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSStoredProcedure storedProcedure=new WSStoredProcedure((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK((String)key),storedProcedure);
break;
}
case TreeObject.ROLE:
{
if (port.existsRole(new WSExistsRole(new WSRolePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRole role=new WSRole((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROLE,new WSRolePK((String)key),role);
break;
}
case TreeObject.ROUTING_RULE:
{
if (port.existsRoutingRule(new WSExistsRoutingRule(new WSRoutingRulePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRoutingRule routingRule=new WSRoutingRule((String)key,""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new WSRoutingRuleExpression[0]);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROUTING_RULE,new WSRoutingRulePK((String)key),routingRule);
break;
}
case TreeObject.TRANSFORMER:
{
if (port.existsTransformerV2(new WSExistsTransformerV2(new WSTransformerV2PK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSTransformerV2 transformer=new WSTransformerV2((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.TRANSFORMER,new WSTransformerV2PK((String)key),transformer);
break;
}
case TreeObject.MENU:
{
if (port.existsMenu(new WSExistsMenu(new WSMenuPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSMenu menu=new WSMenu((String)key,""String_Node_Str"",new WSMenuEntry[]{new WSMenuEntry((String)key,new WSMenuMenuEntriesDescriptions[]{new WSMenuMenuEntriesDescriptions(""String_Node_Str"",(String)key)},null,null,null)});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.MENU,new WSMenuPK((String)key),menu);
break;
}
case TreeObject.UNIVERSE:
{
if (port.existsUniverse(new WSExistsUniverse(new WSUniversePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSUniverseXtentisObjectsRevisionIDs> objectsId=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
for (String object : port.getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSUniverseXtentisObjectsRevisionIDs(object,""String_Node_Str""));
}
WSUniverse universe=new WSUniverse((String)key,""String_Node_Str"",objectsId.toArray(new WSUniverseXtentisObjectsRevisionIDs[objectsId.size()]),""String_Node_Str"",new WSUniverseItemsRevisionIDs[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.UNIVERSE,new WSUniversePK((String)key),universe);
break;
}
case TreeObject.SYNCHRONIZATIONPLAN:
{
if (port.existsSynchronizationPlan(new WSExistsSynchronizationPlan(new WSSynchronizationPlanPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSSynchronizationPlanXtentisObjectsSynchronizations> objectsId=new ArrayList<WSSynchronizationPlanXtentisObjectsSynchronizations>();
for (String object : port.getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSSynchronizationPlanXtentisObjectsSynchronizations(object,new WSSynchronizationPlanXtentisObjectsSynchronizationsSynchronizations[0]));
}
Calendar calendar=Calendar.getInstance();
calendar.setTimeInMillis(0);
WSSynchronizationPlan synchronizationPlan=new WSSynchronizationPlan((String)key,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",objectsId.toArray(new WSSynchronizationPlanXtentisObjectsSynchronizations[objectsId.size()]),new WSSynchronizationPlanItemsSynchronizations[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK((String)key),synchronizationPlan);
break;
}
default :
return;
}
XObjectEditor editpart=(XObjectEditor)view.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(newInstance,newInstance.getDisplayName()),""String_Node_Str"");
if (editpart.getSelectedPage() instanceof AMainPageV2) {
((AMainPageV2)editpart.getSelectedPage()).markDirty();
}
if (editpart.getSelectedPage() instanceof AMainPage) ((AMainPage)editpart.getSelectedPage()).markDirty();
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
}
}","public void run(){
  try {
    super.run();
    ISelection selection=view.getViewer().getSelection();
    TreeObject xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    TreeParent xfolder=(xobject.isXObject()) ? xobject.getParent() : (TreeParent)xobject;
    Object key=null;
switch (xfolder.getType()) {
case TreeObject.TRANSFORMER:
      ViewInputDialog vid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          if (!Pattern.matches(""String_Node_Str"",newText)) {
            return ""String_Node_Str"";
          }
          return null;
        }
      }
,true);
    vid.setBtnShow(false);
  vid.create();
vid.setBlockOnOpen(true);
if (vid.open() == Window.CANCEL) return;
key=vid.getValue();
break;
case TreeObject.VIEW:
ViewInputDialog tid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
,false);
tid.create();
tid.getShell().setSize(new Point(600,180));
tid.setBlockOnOpen(true);
if (tid.open() == Window.CANCEL) return;
key=tid.getValue();
break;
case TreeObject.SOURCE:
case TreeObject.DESTINATION:
case TreeObject.DATA_MODEL:
case TreeObject.INBOUND_ADAPTOR:
case TreeObject.INBOUND_PLUGIN:
case TreeObject.OUTBOUND_ADAPTOR:
case TreeObject.OUTBOUND_PLUGIN:
case TreeObject.DATA_CLUSTER:
case TreeObject.STORED_PROCEDURE:
case TreeObject.ROLE:
case TreeObject.ROUTING_RULE:
case TreeObject.MENU:
case TreeObject.UNIVERSE:
case TreeObject.SYNCHRONIZATIONPLAN:
InputDialog id1=new InputDialog(view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",null,new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
);
id1.setBlockOnOpen(true);
if (id1.open() == Window.CANCEL) return;
key=id1.getValue();
break;
default :
return;
}
XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
TreeObject newInstance=null;
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
{
if (port.existsDataModel(new WSExistsDataModel(new WSDataModelPK((String)key))).is_true()) {
;
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModel wsDataModel=new WSDataModel((String)key,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
port.putDataModel(new WSPutDataModel(wsDataModel));
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_MODEL,new WSDataModelPK((String)key),wsDataModel);
break;
}
case TreeObject.VIEW:
{
if (port.existsView(new WSExistsView(new WSViewPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModelPK[] dataModelPKs=Util.getAllDataModelPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstDataModel=null;
for (int i=0; i < dataModelPKs.length; i++) {
if (dataModelPKs[i].getPk().indexOf(""String_Node_Str"") == -1) {
firstDataModel=dataModelPKs[i].getPk();
break;
}
}
if (firstDataModel == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSDataClusterPK[] dataClusterPKs=Util.getAllDataClusterPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstItemCluster=null;
for (int i=0; i < dataClusterPKs.length; i++) {
if (!dataClusterPKs[i].getPk().equals(""String_Node_Str"")) {
firstItemCluster=dataClusterPKs[i].getPk();
break;
}
}
if (firstItemCluster == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSView wsview=new WSView((String)key,""String_Node_Str"",new String[]{},new WSWhereCondition[0],new String[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.VIEW,new WSViewPK((String)key),wsview);
break;
}
case TreeObject.DATA_CLUSTER:
{
if (port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataCluster dc=new WSDataCluster((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_CLUSTER,new WSDataClusterPK((String)key),dc);
break;
}
case TreeObject.STORED_PROCEDURE:
{
if (port.existsStoredProcedure(new WSExistsStoredProcedure(new WSStoredProcedurePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSStoredProcedure storedProcedure=new WSStoredProcedure((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK((String)key),storedProcedure);
break;
}
case TreeObject.ROLE:
{
if (port.existsRole(new WSExistsRole(new WSRolePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRole role=new WSRole((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROLE,new WSRolePK((String)key),role);
break;
}
case TreeObject.ROUTING_RULE:
{
if (port.existsRoutingRule(new WSExistsRoutingRule(new WSRoutingRulePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRoutingRule routingRule=new WSRoutingRule((String)key,""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new WSRoutingRuleExpression[0]);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROUTING_RULE,new WSRoutingRulePK((String)key),routingRule);
break;
}
case TreeObject.TRANSFORMER:
{
if (port.existsTransformerV2(new WSExistsTransformerV2(new WSTransformerV2PK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSTransformerV2 transformer=new WSTransformerV2((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.TRANSFORMER,new WSTransformerV2PK((String)key),transformer);
break;
}
case TreeObject.MENU:
{
if (port.existsMenu(new WSExistsMenu(new WSMenuPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSMenu menu=new WSMenu((String)key,""String_Node_Str"",new WSMenuEntry[]{new WSMenuEntry((String)key,new WSMenuMenuEntriesDescriptions[]{new WSMenuMenuEntriesDescriptions(""String_Node_Str"",(String)key)},null,null,null)});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.MENU,new WSMenuPK((String)key),menu);
break;
}
case TreeObject.UNIVERSE:
{
if (port.existsUniverse(new WSExistsUniverse(new WSUniversePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSUniverseXtentisObjectsRevisionIDs> objectsId=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
for (String object : port.getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSUniverseXtentisObjectsRevisionIDs(object,""String_Node_Str""));
}
WSUniverse universe=new WSUniverse((String)key,""String_Node_Str"",objectsId.toArray(new WSUniverseXtentisObjectsRevisionIDs[objectsId.size()]),""String_Node_Str"",new WSUniverseItemsRevisionIDs[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.UNIVERSE,new WSUniversePK((String)key),universe);
break;
}
case TreeObject.SYNCHRONIZATIONPLAN:
{
if (port.existsSynchronizationPlan(new WSExistsSynchronizationPlan(new WSSynchronizationPlanPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSSynchronizationPlanXtentisObjectsSynchronizations> objectsId=new ArrayList<WSSynchronizationPlanXtentisObjectsSynchronizations>();
for (String object : port.getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSSynchronizationPlanXtentisObjectsSynchronizations(object,new WSSynchronizationPlanXtentisObjectsSynchronizationsSynchronizations[0]));
}
Calendar calendar=Calendar.getInstance();
calendar.setTimeInMillis(0);
WSSynchronizationPlan synchronizationPlan=new WSSynchronizationPlan((String)key,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",objectsId.toArray(new WSSynchronizationPlanXtentisObjectsSynchronizations[objectsId.size()]),new WSSynchronizationPlanItemsSynchronizations[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK((String)key),synchronizationPlan);
break;
}
default :
return;
}
XObjectEditor editpart=(XObjectEditor)view.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(newInstance,newInstance.getDisplayName()),""String_Node_Str"");
if (editpart.getSelectedPage() instanceof AMainPageV2) {
((AMainPageV2)editpart.getSelectedPage()).markDirty();
}
if (editpart.getSelectedPage() instanceof AMainPage) ((AMainPage)editpart.getSelectedPage()).markDirty();
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
}
}",0.9979881115683584
146130,"protected Control createDialogArea(Composite parent){
  composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  if (message != null) {
    label=new Label(composite,SWT.WRAP);
    label.setText(message);
    label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,2,1));
    label.setFont(parent.getFont());
  }
  text=new Text(composite,getInputTextStyle());
  text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateInput();
    }
  }
);
  openDLG=new Button(composite,SWT.NONE);
  openDLG.setText(""String_Node_Str"");
  openDLG.addSelectionListener(this);
  openDLG.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  openDLG.setVisible(isBtnShow);
  openDLG.setToolTipText(""String_Node_Str"");
  errorMessageText=new Text(composite,SWT.READ_ONLY | SWT.WRAP);
  errorMessageText.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,2,1));
  errorMessageText.setBackground(errorMessageText.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  setErrorMessage(errorMessage);
  if (isTransfor) {
    Group radioGroup=new Group(parent,SWT.SHADOW_NONE);
    radioGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,2,1));
    radioGroup.setLayout(new GridLayout(1,false));
    radioGroup.setText(""String_Node_Str"");
    transformeButton=new Button(radioGroup,SWT.RADIO);
    transformeButton.setText(""String_Node_Str"");
    transformeButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    text.setText(""String_Node_Str"");
    transformeButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(""String_Node_Str"");
        label.setText(message);
        smartViewSelected=false;
        openDLG.setVisible(false);
      }
    }
);
    transformeButton.setSelection(true);
    smartViewButton=new Button(radioGroup,SWT.RADIO);
    smartViewButton.setText(""String_Node_Str"");
    smartViewButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    smartViewButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(Smart_view);
        label.setText(""String_Node_Str"");
        smartViewSelected=true;
        openDLG.setVisible(true);
      }
    }
);
  }
 else {
    if (value != null) {
      text.setText(value);
    }
  }
  applyDialogFont(composite);
  return composite;
}","protected Control createDialogArea(final Composite parent){
  composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  if (message != null) {
    label=new Label(composite,SWT.NONE);
    label.setText(message);
    label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,2,1));
    label.setFont(parent.getFont());
  }
  text=new Text(composite,getInputTextStyle());
  text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateInput();
    }
  }
);
  openDLG=new Button(composite,SWT.NONE);
  openDLG.setText(""String_Node_Str"");
  openDLG.addSelectionListener(this);
  openDLG.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  openDLG.setVisible(isBtnShow);
  openDLG.setToolTipText(""String_Node_Str"");
  errorMessageText=new Text(composite,SWT.READ_ONLY | SWT.WRAP);
  errorMessageText.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,2,1));
  errorMessageText.setBackground(errorMessageText.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  setErrorMessage(errorMessage);
  if (isTransfor) {
    Group radioGroup=new Group(parent,SWT.SHADOW_NONE);
    radioGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,2,1));
    radioGroup.setLayout(new GridLayout(1,false));
    radioGroup.setText(""String_Node_Str"");
    transformeButton=new Button(radioGroup,SWT.RADIO);
    transformeButton.setText(""String_Node_Str"");
    transformeButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    text.setText(""String_Node_Str"");
    transformeButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(""String_Node_Str"");
        label.setText(message);
        smartViewSelected=false;
        openDLG.setVisible(false);
        parent.layout(true);
      }
    }
);
    transformeButton.setSelection(true);
    smartViewButton=new Button(radioGroup,SWT.RADIO);
    smartViewButton.setText(""String_Node_Str"");
    smartViewButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    smartViewButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(Smart_view);
        label.setText(""String_Node_Str"");
        smartViewSelected=true;
        openDLG.setVisible(true);
      }
    }
);
  }
 else {
    if (value != null) {
      text.setText(value);
    }
  }
  applyDialogFont(composite);
  return composite;
}",0.9923907273049016
146131,"public void run(){
  try {
    super.run();
    ISelection selection=view.getViewer().getSelection();
    TreeObject xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    TreeParent xfolder=(xobject.isXObject()) ? xobject.getParent() : (TreeParent)xobject;
    Object key=null;
switch (xfolder.getType()) {
case TreeObject.TRANSFORMER:
      ViewInputDialog vid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          if (!Pattern.matches(""String_Node_Str"",newText)) {
            return ""String_Node_Str"";
          }
          return null;
        }
      }
,true);
    vid.setBtnShow(false);
  vid.create();
vid.getShell().setSize(new Point(500,220));
vid.setBlockOnOpen(true);
if (vid.open() == Window.CANCEL) return;
key=vid.getValue();
break;
case TreeObject.VIEW:
ViewInputDialog tid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
,false);
tid.create();
tid.getShell().setSize(new Point(600,180));
tid.setBlockOnOpen(true);
if (tid.open() == Window.CANCEL) return;
key=tid.getValue();
break;
case TreeObject.SOURCE:
case TreeObject.DESTINATION:
case TreeObject.DATA_MODEL:
case TreeObject.INBOUND_ADAPTOR:
case TreeObject.INBOUND_PLUGIN:
case TreeObject.OUTBOUND_ADAPTOR:
case TreeObject.OUTBOUND_PLUGIN:
case TreeObject.DATA_CLUSTER:
case TreeObject.STORED_PROCEDURE:
case TreeObject.ROLE:
case TreeObject.ROUTING_RULE:
case TreeObject.MENU:
case TreeObject.UNIVERSE:
case TreeObject.SYNCHRONIZATIONPLAN:
InputDialog id1=new InputDialog(view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",null,new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
);
id1.setBlockOnOpen(true);
if (id1.open() == Window.CANCEL) return;
key=id1.getValue();
break;
default :
return;
}
XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
TreeObject newInstance=null;
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
{
if (port.existsDataModel(new WSExistsDataModel(new WSDataModelPK((String)key))).is_true()) {
;
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModel wsDataModel=new WSDataModel((String)key,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
port.putDataModel(new WSPutDataModel(wsDataModel));
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_MODEL,new WSDataModelPK((String)key),wsDataModel);
break;
}
case TreeObject.VIEW:
{
if (port.existsView(new WSExistsView(new WSViewPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModelPK[] dataModelPKs=Util.getAllDataModelPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstDataModel=null;
for (int i=0; i < dataModelPKs.length; i++) {
if (dataModelPKs[i].getPk().indexOf(""String_Node_Str"") == -1) {
firstDataModel=dataModelPKs[i].getPk();
break;
}
}
if (firstDataModel == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSDataClusterPK[] dataClusterPKs=Util.getAllDataClusterPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstItemCluster=null;
for (int i=0; i < dataClusterPKs.length; i++) {
if (!dataClusterPKs[i].getPk().equals(""String_Node_Str"")) {
firstItemCluster=dataClusterPKs[i].getPk();
break;
}
}
if (firstItemCluster == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSView wsview=new WSView((String)key,""String_Node_Str"",new String[]{},new WSWhereCondition[0],new String[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.VIEW,new WSViewPK((String)key),wsview);
break;
}
case TreeObject.DATA_CLUSTER:
{
if (port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataCluster dc=new WSDataCluster((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_CLUSTER,new WSDataClusterPK((String)key),dc);
break;
}
case TreeObject.STORED_PROCEDURE:
{
if (port.existsStoredProcedure(new WSExistsStoredProcedure(new WSStoredProcedurePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSStoredProcedure storedProcedure=new WSStoredProcedure((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK((String)key),storedProcedure);
break;
}
case TreeObject.ROLE:
{
if (port.existsRole(new WSExistsRole(new WSRolePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRole role=new WSRole((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROLE,new WSRolePK((String)key),role);
break;
}
case TreeObject.ROUTING_RULE:
{
if (port.existsRoutingRule(new WSExistsRoutingRule(new WSRoutingRulePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRoutingRule routingRule=new WSRoutingRule((String)key,""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new WSRoutingRuleExpression[0]);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROUTING_RULE,new WSRoutingRulePK((String)key),routingRule);
break;
}
case TreeObject.TRANSFORMER:
{
if (port.existsTransformerV2(new WSExistsTransformerV2(new WSTransformerV2PK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSTransformerV2 transformer=new WSTransformerV2((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.TRANSFORMER,new WSTransformerV2PK((String)key),transformer);
break;
}
case TreeObject.MENU:
{
if (port.existsMenu(new WSExistsMenu(new WSMenuPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSMenu menu=new WSMenu((String)key,""String_Node_Str"",new WSMenuEntry[]{new WSMenuEntry((String)key,new WSMenuMenuEntriesDescriptions[]{new WSMenuMenuEntriesDescriptions(""String_Node_Str"",(String)key)},null,null,null)});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.MENU,new WSMenuPK((String)key),menu);
break;
}
case TreeObject.UNIVERSE:
{
if (port.existsUniverse(new WSExistsUniverse(new WSUniversePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSUniverseXtentisObjectsRevisionIDs> objectsId=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
for (String object : port.getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSUniverseXtentisObjectsRevisionIDs(object,""String_Node_Str""));
}
WSUniverse universe=new WSUniverse((String)key,""String_Node_Str"",objectsId.toArray(new WSUniverseXtentisObjectsRevisionIDs[objectsId.size()]),""String_Node_Str"",new WSUniverseItemsRevisionIDs[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.UNIVERSE,new WSUniversePK((String)key),universe);
break;
}
case TreeObject.SYNCHRONIZATIONPLAN:
{
if (port.existsSynchronizationPlan(new WSExistsSynchronizationPlan(new WSSynchronizationPlanPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSSynchronizationPlanXtentisObjectsSynchronizations> objectsId=new ArrayList<WSSynchronizationPlanXtentisObjectsSynchronizations>();
for (String object : port.getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSSynchronizationPlanXtentisObjectsSynchronizations(object,new WSSynchronizationPlanXtentisObjectsSynchronizationsSynchronizations[0]));
}
Calendar calendar=Calendar.getInstance();
calendar.setTimeInMillis(0);
WSSynchronizationPlan synchronizationPlan=new WSSynchronizationPlan((String)key,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",objectsId.toArray(new WSSynchronizationPlanXtentisObjectsSynchronizations[objectsId.size()]),new WSSynchronizationPlanItemsSynchronizations[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK((String)key),synchronizationPlan);
break;
}
default :
return;
}
XObjectEditor editpart=(XObjectEditor)view.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(newInstance,newInstance.getDisplayName()),""String_Node_Str"");
if (editpart.getSelectedPage() instanceof AMainPageV2) {
((AMainPageV2)editpart.getSelectedPage()).markDirty();
}
if (editpart.getSelectedPage() instanceof AMainPage) ((AMainPage)editpart.getSelectedPage()).markDirty();
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
}
}","public void run(){
  try {
    super.run();
    ISelection selection=view.getViewer().getSelection();
    TreeObject xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    TreeParent xfolder=(xobject.isXObject()) ? xobject.getParent() : (TreeParent)xobject;
    Object key=null;
switch (xfolder.getType()) {
case TreeObject.TRANSFORMER:
      ViewInputDialog vid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          if (!Pattern.matches(""String_Node_Str"",newText)) {
            return ""String_Node_Str"";
          }
          return null;
        }
      }
,true);
    vid.setBtnShow(false);
  vid.create();
vid.setBlockOnOpen(true);
if (vid.open() == Window.CANCEL) return;
key=vid.getValue();
break;
case TreeObject.VIEW:
ViewInputDialog tid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
,false);
tid.create();
tid.getShell().setSize(new Point(600,180));
tid.setBlockOnOpen(true);
if (tid.open() == Window.CANCEL) return;
key=tid.getValue();
break;
case TreeObject.SOURCE:
case TreeObject.DESTINATION:
case TreeObject.DATA_MODEL:
case TreeObject.INBOUND_ADAPTOR:
case TreeObject.INBOUND_PLUGIN:
case TreeObject.OUTBOUND_ADAPTOR:
case TreeObject.OUTBOUND_PLUGIN:
case TreeObject.DATA_CLUSTER:
case TreeObject.STORED_PROCEDURE:
case TreeObject.ROLE:
case TreeObject.ROUTING_RULE:
case TreeObject.MENU:
case TreeObject.UNIVERSE:
case TreeObject.SYNCHRONIZATIONPLAN:
InputDialog id1=new InputDialog(view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",null,new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
);
id1.setBlockOnOpen(true);
if (id1.open() == Window.CANCEL) return;
key=id1.getValue();
break;
default :
return;
}
XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
TreeObject newInstance=null;
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
{
if (port.existsDataModel(new WSExistsDataModel(new WSDataModelPK((String)key))).is_true()) {
;
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModel wsDataModel=new WSDataModel((String)key,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
port.putDataModel(new WSPutDataModel(wsDataModel));
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_MODEL,new WSDataModelPK((String)key),wsDataModel);
break;
}
case TreeObject.VIEW:
{
if (port.existsView(new WSExistsView(new WSViewPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModelPK[] dataModelPKs=Util.getAllDataModelPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstDataModel=null;
for (int i=0; i < dataModelPKs.length; i++) {
if (dataModelPKs[i].getPk().indexOf(""String_Node_Str"") == -1) {
firstDataModel=dataModelPKs[i].getPk();
break;
}
}
if (firstDataModel == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSDataClusterPK[] dataClusterPKs=Util.getAllDataClusterPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstItemCluster=null;
for (int i=0; i < dataClusterPKs.length; i++) {
if (!dataClusterPKs[i].getPk().equals(""String_Node_Str"")) {
firstItemCluster=dataClusterPKs[i].getPk();
break;
}
}
if (firstItemCluster == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSView wsview=new WSView((String)key,""String_Node_Str"",new String[]{},new WSWhereCondition[0],new String[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.VIEW,new WSViewPK((String)key),wsview);
break;
}
case TreeObject.DATA_CLUSTER:
{
if (port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataCluster dc=new WSDataCluster((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_CLUSTER,new WSDataClusterPK((String)key),dc);
break;
}
case TreeObject.STORED_PROCEDURE:
{
if (port.existsStoredProcedure(new WSExistsStoredProcedure(new WSStoredProcedurePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSStoredProcedure storedProcedure=new WSStoredProcedure((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK((String)key),storedProcedure);
break;
}
case TreeObject.ROLE:
{
if (port.existsRole(new WSExistsRole(new WSRolePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRole role=new WSRole((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROLE,new WSRolePK((String)key),role);
break;
}
case TreeObject.ROUTING_RULE:
{
if (port.existsRoutingRule(new WSExistsRoutingRule(new WSRoutingRulePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRoutingRule routingRule=new WSRoutingRule((String)key,""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new WSRoutingRuleExpression[0]);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROUTING_RULE,new WSRoutingRulePK((String)key),routingRule);
break;
}
case TreeObject.TRANSFORMER:
{
if (port.existsTransformerV2(new WSExistsTransformerV2(new WSTransformerV2PK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSTransformerV2 transformer=new WSTransformerV2((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.TRANSFORMER,new WSTransformerV2PK((String)key),transformer);
break;
}
case TreeObject.MENU:
{
if (port.existsMenu(new WSExistsMenu(new WSMenuPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSMenu menu=new WSMenu((String)key,""String_Node_Str"",new WSMenuEntry[]{new WSMenuEntry((String)key,new WSMenuMenuEntriesDescriptions[]{new WSMenuMenuEntriesDescriptions(""String_Node_Str"",(String)key)},null,null,null)});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.MENU,new WSMenuPK((String)key),menu);
break;
}
case TreeObject.UNIVERSE:
{
if (port.existsUniverse(new WSExistsUniverse(new WSUniversePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSUniverseXtentisObjectsRevisionIDs> objectsId=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
for (String object : port.getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSUniverseXtentisObjectsRevisionIDs(object,""String_Node_Str""));
}
WSUniverse universe=new WSUniverse((String)key,""String_Node_Str"",objectsId.toArray(new WSUniverseXtentisObjectsRevisionIDs[objectsId.size()]),""String_Node_Str"",new WSUniverseItemsRevisionIDs[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.UNIVERSE,new WSUniversePK((String)key),universe);
break;
}
case TreeObject.SYNCHRONIZATIONPLAN:
{
if (port.existsSynchronizationPlan(new WSExistsSynchronizationPlan(new WSSynchronizationPlanPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSSynchronizationPlanXtentisObjectsSynchronizations> objectsId=new ArrayList<WSSynchronizationPlanXtentisObjectsSynchronizations>();
for (String object : port.getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSSynchronizationPlanXtentisObjectsSynchronizations(object,new WSSynchronizationPlanXtentisObjectsSynchronizationsSynchronizations[0]));
}
Calendar calendar=Calendar.getInstance();
calendar.setTimeInMillis(0);
WSSynchronizationPlan synchronizationPlan=new WSSynchronizationPlan((String)key,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",objectsId.toArray(new WSSynchronizationPlanXtentisObjectsSynchronizations[objectsId.size()]),new WSSynchronizationPlanItemsSynchronizations[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK((String)key),synchronizationPlan);
break;
}
default :
return;
}
XObjectEditor editpart=(XObjectEditor)view.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(newInstance,newInstance.getDisplayName()),""String_Node_Str"");
if (editpart.getSelectedPage() instanceof AMainPageV2) {
((AMainPageV2)editpart.getSelectedPage()).markDirty();
}
if (editpart.getSelectedPage() instanceof AMainPage) ((AMainPage)editpart.getSelectedPage()).markDirty();
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
}
}",0.9979881115683584
146132,"protected Control createDialogArea(Composite parent){
  composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  if (message != null) {
    label=new Label(composite,SWT.WRAP);
    label.setText(message);
    label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,2,1));
    label.setFont(parent.getFont());
  }
  text=new Text(composite,getInputTextStyle());
  text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateInput();
    }
  }
);
  openDLG=new Button(composite,SWT.NONE);
  openDLG.setText(""String_Node_Str"");
  openDLG.addSelectionListener(this);
  openDLG.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  openDLG.setVisible(isBtnShow);
  openDLG.setToolTipText(""String_Node_Str"");
  errorMessageText=new Text(composite,SWT.READ_ONLY | SWT.WRAP);
  errorMessageText.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,2,1));
  errorMessageText.setBackground(errorMessageText.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  setErrorMessage(errorMessage);
  if (isTransfor) {
    Group radioGroup=new Group(parent,SWT.SHADOW_NONE);
    radioGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,2,1));
    radioGroup.setLayout(new GridLayout(1,false));
    radioGroup.setText(""String_Node_Str"");
    transformeButton=new Button(radioGroup,SWT.RADIO);
    transformeButton.setText(""String_Node_Str"");
    transformeButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    text.setText(""String_Node_Str"");
    transformeButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(""String_Node_Str"");
        label.setText(message);
        smartViewSelected=false;
        openDLG.setVisible(false);
      }
    }
);
    transformeButton.setSelection(true);
    smartViewButton=new Button(radioGroup,SWT.RADIO);
    smartViewButton.setText(""String_Node_Str"");
    smartViewButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    smartViewButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(Smart_view);
        label.setText(""String_Node_Str"");
        smartViewSelected=true;
        openDLG.setVisible(true);
      }
    }
);
  }
 else {
    if (value != null) {
      text.setText(value);
    }
  }
  applyDialogFont(composite);
  return composite;
}","protected Control createDialogArea(final Composite parent){
  composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  if (message != null) {
    label=new Label(composite,SWT.NONE);
    label.setText(message);
    label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,2,1));
    label.setFont(parent.getFont());
  }
  text=new Text(composite,getInputTextStyle());
  text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateInput();
    }
  }
);
  openDLG=new Button(composite,SWT.NONE);
  openDLG.setText(""String_Node_Str"");
  openDLG.addSelectionListener(this);
  openDLG.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  openDLG.setVisible(isBtnShow);
  openDLG.setToolTipText(""String_Node_Str"");
  errorMessageText=new Text(composite,SWT.READ_ONLY | SWT.WRAP);
  errorMessageText.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,2,1));
  errorMessageText.setBackground(errorMessageText.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  setErrorMessage(errorMessage);
  if (isTransfor) {
    Group radioGroup=new Group(parent,SWT.SHADOW_NONE);
    radioGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,2,1));
    radioGroup.setLayout(new GridLayout(1,false));
    radioGroup.setText(""String_Node_Str"");
    transformeButton=new Button(radioGroup,SWT.RADIO);
    transformeButton.setText(""String_Node_Str"");
    transformeButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    text.setText(""String_Node_Str"");
    transformeButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(""String_Node_Str"");
        label.setText(message);
        smartViewSelected=false;
        openDLG.setVisible(false);
        parent.layout(true);
      }
    }
);
    transformeButton.setSelection(true);
    smartViewButton=new Button(radioGroup,SWT.RADIO);
    smartViewButton.setText(""String_Node_Str"");
    smartViewButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    smartViewButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(Smart_view);
        label.setText(""String_Node_Str"");
        smartViewSelected=true;
        openDLG.setVisible(true);
      }
    }
);
  }
 else {
    if (value != null) {
      text.setText(value);
    }
  }
  applyDialogFont(composite);
  return composite;
}",0.9923907273049016
146133,"public static void updateReference(Object decl,Object[] objs,String newValue){
  if (!(decl instanceof XSDElementDeclaration)) {
    return;
  }
  for (  Object obj : objs) {
    if (obj instanceof XSDParticle) {
      XSDTerm term=((XSDParticle)obj).getTerm();
      if (term instanceof XSDElementDeclaration) {
        XSDElementDeclaration xsdElem=(XSDElementDeclaration)term;
        if (xsdElem == decl) {
          ((XSDParticle)obj).setTerm((XSDElementDeclaration)decl);
          ((XSDParticle)obj).updateElement();
        }
      }
      XSDElementDeclaration elem=(XSDElementDeclaration)((XSDParticle)obj).getContent();
      if (elem.isElementDeclarationReference()) {
        if (elem.getResolvedElementDeclaration() == decl) {
          elem.setResolvedElementDeclaration((XSDElementDeclaration)decl);
        }
      }
    }
  }
}","public static void updateReference(Object decl,Object[] objs,String newValue){
  if (!(decl instanceof XSDElementDeclaration)) {
    return;
  }
  for (  Object obj : objs) {
    if (obj instanceof XSDParticle) {
      XSDTerm term=((XSDParticle)obj).getTerm();
      if (term instanceof XSDElementDeclaration) {
        XSDElementDeclaration xsdElem=(XSDElementDeclaration)term;
        if (xsdElem == decl) {
          ((XSDParticle)obj).setTerm((XSDElementDeclaration)decl);
          ((XSDParticle)obj).updateElement();
        }
      }
      if (!(((XSDParticle)obj).getContent() instanceof XSDElementDeclaration))       continue;
      XSDElementDeclaration elem=(XSDElementDeclaration)((XSDParticle)obj).getContent();
      if (elem.isElementDeclarationReference()) {
        if (elem.getResolvedElementDeclaration() == decl) {
          elem.setResolvedElementDeclaration((XSDElementDeclaration)decl);
        }
      }
    }
  }
}",0.8235294117647058
146134,"public static void updateReference(Object decl,Object[] objs,String newValue){
  if (!(decl instanceof XSDElementDeclaration)) {
    return;
  }
  for (  Object obj : objs) {
    if (obj instanceof XSDParticle) {
      XSDTerm term=((XSDParticle)obj).getTerm();
      if (term instanceof XSDElementDeclaration) {
        XSDElementDeclaration xsdElem=(XSDElementDeclaration)term;
        if (xsdElem == decl) {
          ((XSDParticle)obj).setTerm((XSDElementDeclaration)decl);
          ((XSDParticle)obj).updateElement();
        }
      }
      XSDElementDeclaration elem=(XSDElementDeclaration)((XSDParticle)obj).getContent();
      if (elem.isElementDeclarationReference()) {
        if (elem.getResolvedElementDeclaration() == decl) {
          elem.setResolvedElementDeclaration((XSDElementDeclaration)decl);
        }
      }
    }
  }
}","public static void updateReference(Object decl,Object[] objs,String newValue){
  if (!(decl instanceof XSDElementDeclaration)) {
    return;
  }
  for (  Object obj : objs) {
    if (obj instanceof XSDParticle) {
      XSDTerm term=((XSDParticle)obj).getTerm();
      if (term instanceof XSDElementDeclaration) {
        XSDElementDeclaration xsdElem=(XSDElementDeclaration)term;
        if (xsdElem == decl) {
          ((XSDParticle)obj).setTerm((XSDElementDeclaration)decl);
          ((XSDParticle)obj).updateElement();
        }
      }
      if (!(((XSDParticle)obj).getContent() instanceof XSDElementDeclaration))       continue;
      XSDElementDeclaration elem=(XSDElementDeclaration)((XSDParticle)obj).getContent();
      if (elem.isElementDeclarationReference()) {
        if (elem.getResolvedElementDeclaration() == decl) {
          elem.setResolvedElementDeclaration((XSDElementDeclaration)decl);
        }
      }
    }
  }
}",0.8235294117647058
146135,"public ListRange getUpdateReportList(int start,int limit,String sort,String dir,String regex) throws Exception {
  ListRange listRange=new ListRange();
  WSDataClusterPK wsDataClusterPK=new WSDataClusterPK(XSystemObjects.DC_UPDATE_PREPORT.getName());
  String conceptName=""String_Node_Str"";
  ArrayList<WSWhereItem> conditions=new ArrayList<WSWhereItem>();
  if (regex != null && regex.length() > 0) {
    JSONObject criteria=new JSONObject(regex);
    if (!criteria.isNull(""String_Node_Str"")) {
      String concept=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,concept.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String key=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,key.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String source=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.EQUALS,source.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String operationType=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.EQUALS,operationType.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String startDate=(String)criteria.get(""String_Node_Str"");
      SimpleDateFormat dataFmt=new SimpleDateFormat(""String_Node_Str"");
      Date date=dataFmt.parse(startDate);
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.GREATER_THAN_OR_EQUAL,date.getTime() + ""String_Node_Str"",WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String endDate=(String)criteria.get(""String_Node_Str"");
      SimpleDateFormat dataFmt=new SimpleDateFormat(""String_Node_Str"");
      Date date=dataFmt.parse(endDate);
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.LOWER_THAN_OR_EQUAL,date.getTime() + ""String_Node_Str"",WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
  }
  WSWhereItem wi=null;
  if (conditions.size() == 0)   wi=null;
 else {
    WSWhereAnd and=new WSWhereAnd(conditions.toArray(new WSWhereItem[conditions.size()]));
    wi=new WSWhereItem(null,and,null);
  }
  String[] results=Util.getPort().getItems(new WSGetItems(wsDataClusterPK,conceptName,wi,-1,0,Integer.MAX_VALUE)).getStrings();
  start=start < results.length ? start : results.length - 1;
  int end=results.length < (start + limit) ? results.length - 1 : (start + limit - 1);
  String[] subResults=end + 1 - start < limit ? new String[end + 1 - start] : new String[limit];
  for (int i=start, j=0; i < end + 1; i++, j++) {
    subResults[j]=results[i];
  }
  DataChangeLog[] data=new DataChangeLog[subResults.length];
  for (int i=0; i < data.length; i++) {
    DataChangeLog item=new DataChangeLog();
    String result=subResults[i];
    if (result != null) {
      Document doc=Util.parse(result);
      String userName=Util.getFirstTextNode(doc,""String_Node_Str"");
      String source=Util.getFirstTextNode(doc,""String_Node_Str"");
      String timeInMillis=Util.getFirstTextNode(doc,""String_Node_Str"");
      String operationType=Util.getFirstTextNode(doc,""String_Node_Str"");
      String revisionID=Util.getFirstTextNode(doc,""String_Node_Str"");
      String dataCluster=Util.getFirstTextNode(doc,""String_Node_Str"");
      String dataModel=Util.getFirstTextNode(doc,""String_Node_Str"");
      String concept=Util.getFirstTextNode(doc,""String_Node_Str"");
      String key=Util.getFirstTextNode(doc,""String_Node_Str"");
      item.setUserName(userName);
      item.setSource(source);
      item.setTimeInMillis(timeInMillis);
      item.setOperationType(operationType);
      item.setRevisionID(revisionID);
      item.setDataCluster(dataCluster);
      item.setDataModel(dataModel);
      item.setConcept(concept);
      item.setKey(key);
      item.setIds(Util.joinStrings(new String[]{source,timeInMillis},""String_Node_Str""));
    }
    data[i]=item;
  }
  if (data.length <= 0) {
    listRange.setData(new DataChangeLog[0]);
    listRange.setTotalSize(0);
    return listRange;
  }
  listRange.setData(data);
  listRange.setTotalSize(results.length);
  return listRange;
}","public ListRange getUpdateReportList(int start,int limit,String sort,String dir,String regex) throws Exception {
  ListRange listRange=new ListRange();
  WSDataClusterPK wsDataClusterPK=new WSDataClusterPK(XSystemObjects.DC_UPDATE_PREPORT.getName());
  String conceptName=""String_Node_Str"";
  ArrayList<WSWhereItem> conditions=new ArrayList<WSWhereItem>();
  if (regex != null && regex.length() > 0) {
    JSONObject criteria=new JSONObject(regex);
    if (!criteria.isNull(""String_Node_Str"")) {
      String concept=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,concept.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String key=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,key.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String source=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.EQUALS,source.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String operationType=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.EQUALS,operationType.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String startDate=(String)criteria.get(""String_Node_Str"");
      SimpleDateFormat dataFmt=new SimpleDateFormat(""String_Node_Str"");
      Date date=dataFmt.parse(startDate);
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.GREATER_THAN_OR_EQUAL,date.getTime() + ""String_Node_Str"",WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String endDate=(String)criteria.get(""String_Node_Str"");
      SimpleDateFormat dataFmt=new SimpleDateFormat(""String_Node_Str"");
      Date date=dataFmt.parse(endDate);
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.LOWER_THAN_OR_EQUAL,date.getTime() + ""String_Node_Str"",WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
  }
  WSWhereItem wi=null;
  if (conditions.size() == 0)   wi=null;
 else {
    WSWhereAnd and=new WSWhereAnd(conditions.toArray(new WSWhereItem[conditions.size()]));
    wi=new WSWhereItem(null,and,null);
  }
  String[] results=Util.getPort().getItems(new WSGetItems(wsDataClusterPK,conceptName,wi,-1,0,Integer.MAX_VALUE)).getStrings();
  start=start < results.length ? start : results.length - 1;
  if (start < 0)   start=0;
  int end=results.length < (start + limit) ? results.length - 1 : (start + limit - 1);
  String[] subResults=end + 1 - start < limit ? new String[end + 1 - start] : new String[limit];
  for (int i=start, j=0; i < end + 1; i++, j++) {
    subResults[j]=results[i];
  }
  DataChangeLog[] data=new DataChangeLog[subResults.length];
  for (int i=0; i < data.length; i++) {
    DataChangeLog item=new DataChangeLog();
    String result=subResults[i];
    if (result != null) {
      Document doc=Util.parse(result);
      String userName=Util.getFirstTextNode(doc,""String_Node_Str"");
      String source=Util.getFirstTextNode(doc,""String_Node_Str"");
      String timeInMillis=Util.getFirstTextNode(doc,""String_Node_Str"");
      String operationType=Util.getFirstTextNode(doc,""String_Node_Str"");
      String revisionID=Util.getFirstTextNode(doc,""String_Node_Str"");
      String dataCluster=Util.getFirstTextNode(doc,""String_Node_Str"");
      String dataModel=Util.getFirstTextNode(doc,""String_Node_Str"");
      String concept=Util.getFirstTextNode(doc,""String_Node_Str"");
      String key=Util.getFirstTextNode(doc,""String_Node_Str"");
      item.setUserName(userName);
      item.setSource(source);
      item.setTimeInMillis(timeInMillis);
      item.setOperationType(operationType);
      item.setRevisionID(revisionID);
      item.setDataCluster(dataCluster);
      item.setDataModel(dataModel);
      item.setConcept(concept);
      item.setKey(key);
      item.setIds(Util.joinStrings(new String[]{source,timeInMillis},""String_Node_Str""));
    }
    data[i]=item;
  }
  if (data.length <= 0) {
    listRange.setData(new DataChangeLog[0]);
    listRange.setTotalSize(0);
    return listRange;
  }
  listRange.setData(data);
  listRange.setTotalSize(results.length);
  return listRange;
}",0.997211155378486
146136,"public ListRange getUpdateReportList(int start,int limit,String sort,String dir,String regex) throws Exception {
  ListRange listRange=new ListRange();
  WSDataClusterPK wsDataClusterPK=new WSDataClusterPK(XSystemObjects.DC_UPDATE_PREPORT.getName());
  String conceptName=""String_Node_Str"";
  ArrayList<WSWhereItem> conditions=new ArrayList<WSWhereItem>();
  if (regex != null && regex.length() > 0) {
    JSONObject criteria=new JSONObject(regex);
    if (!criteria.isNull(""String_Node_Str"")) {
      String concept=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,concept.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String key=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,key.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String source=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.EQUALS,source.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String operationType=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.EQUALS,operationType.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String startDate=(String)criteria.get(""String_Node_Str"");
      SimpleDateFormat dataFmt=new SimpleDateFormat(""String_Node_Str"");
      Date date=dataFmt.parse(startDate);
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.GREATER_THAN_OR_EQUAL,date.getTime() + ""String_Node_Str"",WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String endDate=(String)criteria.get(""String_Node_Str"");
      SimpleDateFormat dataFmt=new SimpleDateFormat(""String_Node_Str"");
      Date date=dataFmt.parse(endDate);
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.LOWER_THAN_OR_EQUAL,date.getTime() + ""String_Node_Str"",WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
  }
  WSWhereItem wi=null;
  if (conditions.size() == 0)   wi=null;
 else {
    WSWhereAnd and=new WSWhereAnd(conditions.toArray(new WSWhereItem[conditions.size()]));
    wi=new WSWhereItem(null,and,null);
  }
  String[] results=Util.getPort().getItems(new WSGetItems(wsDataClusterPK,conceptName,wi,-1,0,Integer.MAX_VALUE)).getStrings();
  start=start < results.length ? start : results.length - 1;
  int end=results.length < (start + limit) ? results.length - 1 : (start + limit - 1);
  String[] subResults=end + 1 - start < limit ? new String[end + 1 - start] : new String[limit];
  for (int i=start, j=0; i < end + 1; i++, j++) {
    subResults[j]=results[i];
  }
  DataChangeLog[] data=new DataChangeLog[subResults.length];
  for (int i=0; i < data.length; i++) {
    DataChangeLog item=new DataChangeLog();
    String result=subResults[i];
    if (result != null) {
      Document doc=Util.parse(result);
      String userName=Util.getFirstTextNode(doc,""String_Node_Str"");
      String source=Util.getFirstTextNode(doc,""String_Node_Str"");
      String timeInMillis=Util.getFirstTextNode(doc,""String_Node_Str"");
      String operationType=Util.getFirstTextNode(doc,""String_Node_Str"");
      String revisionID=Util.getFirstTextNode(doc,""String_Node_Str"");
      String dataCluster=Util.getFirstTextNode(doc,""String_Node_Str"");
      String dataModel=Util.getFirstTextNode(doc,""String_Node_Str"");
      String concept=Util.getFirstTextNode(doc,""String_Node_Str"");
      String key=Util.getFirstTextNode(doc,""String_Node_Str"");
      item.setUserName(userName);
      item.setSource(source);
      item.setTimeInMillis(timeInMillis);
      item.setOperationType(operationType);
      item.setRevisionID(revisionID);
      item.setDataCluster(dataCluster);
      item.setDataModel(dataModel);
      item.setConcept(concept);
      item.setKey(key);
      item.setIds(Util.joinStrings(new String[]{source,timeInMillis},""String_Node_Str""));
    }
    data[i]=item;
  }
  if (data.length <= 0) {
    listRange.setData(new DataChangeLog[0]);
    listRange.setTotalSize(0);
    return listRange;
  }
  listRange.setData(data);
  listRange.setTotalSize(results.length);
  return listRange;
}","public ListRange getUpdateReportList(int start,int limit,String sort,String dir,String regex) throws Exception {
  ListRange listRange=new ListRange();
  WSDataClusterPK wsDataClusterPK=new WSDataClusterPK(XSystemObjects.DC_UPDATE_PREPORT.getName());
  String conceptName=""String_Node_Str"";
  ArrayList<WSWhereItem> conditions=new ArrayList<WSWhereItem>();
  if (regex != null && regex.length() > 0) {
    JSONObject criteria=new JSONObject(regex);
    if (!criteria.isNull(""String_Node_Str"")) {
      String concept=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,concept.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String key=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,key.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String source=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.EQUALS,source.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String operationType=(String)criteria.get(""String_Node_Str"");
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.EQUALS,operationType.trim(),WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String startDate=(String)criteria.get(""String_Node_Str"");
      SimpleDateFormat dataFmt=new SimpleDateFormat(""String_Node_Str"");
      Date date=dataFmt.parse(startDate);
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.GREATER_THAN_OR_EQUAL,date.getTime() + ""String_Node_Str"",WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
    if (!criteria.isNull(""String_Node_Str"")) {
      String endDate=(String)criteria.get(""String_Node_Str"");
      SimpleDateFormat dataFmt=new SimpleDateFormat(""String_Node_Str"");
      Date date=dataFmt.parse(endDate);
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.LOWER_THAN_OR_EQUAL,date.getTime() + ""String_Node_Str"",WSStringPredicate.NONE,false);
      WSWhereItem wsWhereItem=new WSWhereItem(wc,null,null);
      conditions.add(wsWhereItem);
    }
  }
  WSWhereItem wi=null;
  if (conditions.size() == 0)   wi=null;
 else {
    WSWhereAnd and=new WSWhereAnd(conditions.toArray(new WSWhereItem[conditions.size()]));
    wi=new WSWhereItem(null,and,null);
  }
  String[] results=Util.getPort().getItems(new WSGetItems(wsDataClusterPK,conceptName,wi,-1,0,Integer.MAX_VALUE)).getStrings();
  start=start < results.length ? start : results.length - 1;
  if (start < 0)   start=0;
  int end=results.length < (start + limit) ? results.length - 1 : (start + limit - 1);
  String[] subResults=end + 1 - start < limit ? new String[end + 1 - start] : new String[limit];
  for (int i=start, j=0; i < end + 1; i++, j++) {
    subResults[j]=results[i];
  }
  DataChangeLog[] data=new DataChangeLog[subResults.length];
  for (int i=0; i < data.length; i++) {
    DataChangeLog item=new DataChangeLog();
    String result=subResults[i];
    if (result != null) {
      Document doc=Util.parse(result);
      String userName=Util.getFirstTextNode(doc,""String_Node_Str"");
      String source=Util.getFirstTextNode(doc,""String_Node_Str"");
      String timeInMillis=Util.getFirstTextNode(doc,""String_Node_Str"");
      String operationType=Util.getFirstTextNode(doc,""String_Node_Str"");
      String revisionID=Util.getFirstTextNode(doc,""String_Node_Str"");
      String dataCluster=Util.getFirstTextNode(doc,""String_Node_Str"");
      String dataModel=Util.getFirstTextNode(doc,""String_Node_Str"");
      String concept=Util.getFirstTextNode(doc,""String_Node_Str"");
      String key=Util.getFirstTextNode(doc,""String_Node_Str"");
      item.setUserName(userName);
      item.setSource(source);
      item.setTimeInMillis(timeInMillis);
      item.setOperationType(operationType);
      item.setRevisionID(revisionID);
      item.setDataCluster(dataCluster);
      item.setDataModel(dataModel);
      item.setConcept(concept);
      item.setKey(key);
      item.setIds(Util.joinStrings(new String[]{source,timeInMillis},""String_Node_Str""));
    }
    data[i]=item;
  }
  if (data.length <= 0) {
    listRange.setData(new DataChangeLog[0]);
    listRange.setTotalSize(0);
    return listRange;
  }
  listRange.setData(data);
  listRange.setTotalSize(results.length);
  return listRange;
}",0.997211155378486
146137,"private boolean isInclude(XSDAnnotation annotation){
  boolean include=false;
  if (annotation != null) {
    XSDAnnotationsStructure annotion=new XSDAnnotationsStructure(annotation);
    if ((!annotion.getWriteAccesses().values().contains(filter.getRole()) && filter.isReadOnly())) {
      return true;
    }
    if ((annotion.getWriteAccesses().values().contains(filter.getRole()) && filter.isWriteAccess())) {
      return true;
    }
    if ((annotion.getHiddenAccesses().values().contains(filter.getRole()) && filter.isHiddenAccess())) {
      return true;
    }
  }
  return include;
}","private boolean isInclude(XSDAnnotation annotation){
  boolean include=false;
  if (annotation != null) {
    XSDAnnotationsStructure annotion=new XSDAnnotationsStructure(annotation);
    if ((annotion.getWriteAccesses().values().contains(filter.getRole()) && filter.isWriteAccess())) {
      return true;
    }
    if ((annotion.getHiddenAccesses().values().contains(filter.getRole()) && filter.isHiddenAccess())) {
      return true;
    }
  }
 else {
    if ((filter.isReadOnly())) {
      return true;
    }
  }
  return include;
}",0.8472468916518651
146138,"private boolean isInclude(XSDAnnotation annotation){
  boolean include=false;
  if (annotation != null) {
    XSDAnnotationsStructure annotion=new XSDAnnotationsStructure(annotation);
    if ((!annotion.getWriteAccesses().values().contains(filter.getRole()) && filter.isReadOnly())) {
      return true;
    }
    if ((annotion.getWriteAccesses().values().contains(filter.getRole()) && filter.isWriteAccess())) {
      return true;
    }
    if ((annotion.getHiddenAccesses().values().contains(filter.getRole()) && filter.isHiddenAccess())) {
      return true;
    }
  }
  return include;
}","private boolean isInclude(XSDAnnotation annotation){
  boolean include=false;
  if (annotation != null) {
    XSDAnnotationsStructure annotion=new XSDAnnotationsStructure(annotation);
    if ((annotion.getWriteAccesses().values().contains(filter.getRole()) && filter.isWriteAccess())) {
      return true;
    }
    if ((annotion.getHiddenAccesses().values().contains(filter.getRole()) && filter.isHiddenAccess())) {
      return true;
    }
  }
 else {
    if ((filter.isReadOnly())) {
      return true;
    }
  }
  return include;
}",0.8472468916518651
146139,"/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          if (itemKeyValues == null || itemKeyValues[0] == null)           itemKeyValues=new String[]{keys.get(0).getUuidValue()};
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    Element conceptRoot=(Element)root.cloneNode(true);
    Util.generateUUIDForElement(schema,concept,conceptRoot);
    for (int j=0; j < conceptKey.getFields().length; j++) {
      for (int i=0; i < conceptRoot.getChildNodes().getLength(); i++) {
        Node node=conceptRoot.getChildNodes().item(i);
        String name=node.getLocalName();
        if (node.getNodeType() != Node.ELEMENT_NODE)         continue;
        String key=conceptKey.getFields()[j];
        if (name.equals(key) && itemKeyValues[j] == null) {
          itemKeyValues[j]=node.getTextContent();
          break;
        }
      }
    }
    if (itemKeyValues[0] == null) {
      throw (new RemoteException(""String_Node_Str""));
    }
    projection=Util.getXMLStringFromNode(conceptRoot);
    projection=projection.replaceAll(""String_Node_Str"",""String_Node_Str"");
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.6798118668596237
146140,"/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          if (itemKeyValues == null || itemKeyValues[0] == null)           itemKeyValues=new String[]{keys.get(0).getUuidValue()};
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    Element conceptRoot=(Element)root.cloneNode(true);
    Util.generateUUIDForElement(schema,concept,conceptRoot);
    for (int j=0; j < conceptKey.getFields().length; j++) {
      for (int i=0; i < conceptRoot.getChildNodes().getLength(); i++) {
        Node node=conceptRoot.getChildNodes().item(i);
        String name=node.getLocalName();
        if (node.getNodeType() != Node.ELEMENT_NODE)         continue;
        String key=conceptKey.getFields()[j];
        if (name.equals(key) && itemKeyValues[j] == null) {
          itemKeyValues[j]=node.getTextContent();
          break;
        }
      }
    }
    if (itemKeyValues[0] == null) {
      throw (new RemoteException(""String_Node_Str""));
    }
    projection=Util.getXMLStringFromNode(conceptRoot);
    projection=projection.replaceAll(""String_Node_Str"",""String_Node_Str"");
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.640973630831643
146141,"/** 
 * create an ""empty"" item from scratch, set every text node to empty
 * @param viewPK
 * @throws RemoteException
 * @throws Exception
 */
private void createItem(String concept,int docIndex) throws RemoteException, Exception {
  WebContext ctx=WebContextFactory.get();
  Configuration config=Configuration.getInstance();
  String xml1=""String_Node_Str"" + concept + ""String_Node_Str""+ concept+ ""String_Node_Str"";
  Document d=Util.parse(xml1);
  ctx.getSession().setAttribute(""String_Node_Str"" + docIndex,d);
  Map<String,XSElementDecl> map=CommonDWR.getConceptMap(config.getModel());
  XSComplexType xsct=(XSComplexType)(map.get(concept).getType());
  XSParticle[] xsp=xsct.getContentType().asParticle().getTerm().asModelGroup().getChildren();
  for (int j=0; j < xsp.length; j++) {
  }
}","/** 
 * create an ""empty"" item from scratch, set every text node to empty
 * @param viewPK
 * @throws RemoteException
 * @throws Exception
 */
private void createItem(String concept,int docIndex) throws RemoteException, Exception {
  WebContext ctx=WebContextFactory.get();
  Configuration config=Configuration.getInstance();
  String xml1=""String_Node_Str"" + concept + ""String_Node_Str""+ concept+ ""String_Node_Str"";
  Document d=Util.parse(xml1);
  ctx.getSession().setAttribute(""String_Node_Str"" + docIndex,d);
  Map<String,XSElementDecl> map=CommonDWR.getConceptMap(config.getModel());
  XSComplexType xsct=(XSComplexType)(map.get(concept).getType());
  XSParticle[] xsp=xsct.getContentType().asParticle().getTerm().asModelGroup().getChildren();
  for (int j=0; j < xsp.length; j++) {
    setChilden(xsp[j],""String_Node_Str"" + concept,docIndex);
  }
}",0.9629629629629628
146142,"/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          if (itemKeyValues == null || itemKeyValues[0] == null)           itemKeyValues=new String[]{keys.get(0).getUuidValue()};
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    Element conceptRoot=(Element)root.cloneNode(true);
    Util.generateUUIDForElement(schema,concept,conceptRoot);
    for (int j=0; j < conceptKey.getFields().length; j++) {
      for (int i=0; i < conceptRoot.getChildNodes().getLength(); i++) {
        Node node=conceptRoot.getChildNodes().item(i);
        String name=node.getLocalName();
        if (node.getNodeType() != Node.ELEMENT_NODE)         continue;
        String key=conceptKey.getFields()[j];
        if (name.equals(key) && itemKeyValues[j] == null) {
          itemKeyValues[j]=node.getTextContent();
          break;
        }
      }
    }
    if (itemKeyValues[0] == null) {
      throw (new RemoteException(""String_Node_Str""));
    }
    projection=Util.getXMLStringFromNode(conceptRoot);
    projection=projection.replaceAll(""String_Node_Str"",""String_Node_Str"");
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.6798118668596237
146143,"/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          if (itemKeyValues == null || itemKeyValues[0] == null)           itemKeyValues=new String[]{keys.get(0).getUuidValue()};
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    Element conceptRoot=(Element)root.cloneNode(true);
    Util.generateUUIDForElement(schema,concept,conceptRoot);
    for (int j=0; j < conceptKey.getFields().length; j++) {
      for (int i=0; i < conceptRoot.getChildNodes().getLength(); i++) {
        Node node=conceptRoot.getChildNodes().item(i);
        String name=node.getLocalName();
        if (node.getNodeType() != Node.ELEMENT_NODE)         continue;
        String key=conceptKey.getFields()[j];
        if (name.equals(key) && itemKeyValues[j] == null) {
          itemKeyValues[j]=node.getTextContent();
          break;
        }
      }
    }
    if (itemKeyValues[0] == null) {
      throw (new RemoteException(""String_Node_Str""));
    }
    projection=Util.getXMLStringFromNode(conceptRoot);
    projection=projection.replaceAll(""String_Node_Str"",""String_Node_Str"");
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.640973630831643
146144,"/** 
 * create an ""empty"" item from scratch, set every text node to empty
 * @param viewPK
 * @throws RemoteException
 * @throws Exception
 */
private void createItem(String concept,int docIndex) throws RemoteException, Exception {
  WebContext ctx=WebContextFactory.get();
  Configuration config=Configuration.getInstance();
  String xml1=""String_Node_Str"" + concept + ""String_Node_Str""+ concept+ ""String_Node_Str"";
  Document d=Util.parse(xml1);
  ctx.getSession().setAttribute(""String_Node_Str"" + docIndex,d);
  Map<String,XSElementDecl> map=CommonDWR.getConceptMap(config.getModel());
  XSComplexType xsct=(XSComplexType)(map.get(concept).getType());
  XSParticle[] xsp=xsct.getContentType().asParticle().getTerm().asModelGroup().getChildren();
  for (int j=0; j < xsp.length; j++) {
  }
}","/** 
 * create an ""empty"" item from scratch, set every text node to empty
 * @param viewPK
 * @throws RemoteException
 * @throws Exception
 */
private void createItem(String concept,int docIndex) throws RemoteException, Exception {
  WebContext ctx=WebContextFactory.get();
  Configuration config=Configuration.getInstance();
  String xml1=""String_Node_Str"" + concept + ""String_Node_Str""+ concept+ ""String_Node_Str"";
  Document d=Util.parse(xml1);
  ctx.getSession().setAttribute(""String_Node_Str"" + docIndex,d);
  Map<String,XSElementDecl> map=CommonDWR.getConceptMap(config.getModel());
  XSComplexType xsct=(XSComplexType)(map.get(concept).getType());
  XSParticle[] xsp=xsct.getContentType().asParticle().getTerm().asModelGroup().getChildren();
  for (int j=0; j < xsp.length; j++) {
    setChilden(xsp[j],""String_Node_Str"" + concept,docIndex);
  }
}",0.9629629629629628
146145,"public void run(){
  try {
    super.run();
    ISelection selection=view.getViewer().getSelection();
    TreeObject xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    TreeParent xfolder=(xobject.isXObject()) ? xobject.getParent() : (TreeParent)xobject;
    Object key=null;
switch (xfolder.getType()) {
case TreeObject.TRANSFORMER:
      ViewInputDialog vid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          if (!Pattern.matches(""String_Node_Str"",newText)) {
            return ""String_Node_Str"";
          }
          return null;
        }
      }
,true);
    vid.create();
  vid.getShell().setSize(new Point(500,250));
vid.setBlockOnOpen(true);
if (vid.open() == Window.CANCEL) return;
key=vid.getValue();
break;
case TreeObject.VIEW:
ViewInputDialog tid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
,false);
tid.create();
tid.getShell().setSize(new Point(600,180));
tid.setBlockOnOpen(true);
if (tid.open() == Window.CANCEL) return;
key=tid.getValue();
break;
case TreeObject.SOURCE:
case TreeObject.DESTINATION:
case TreeObject.DATA_MODEL:
case TreeObject.INBOUND_ADAPTOR:
case TreeObject.INBOUND_PLUGIN:
case TreeObject.OUTBOUND_ADAPTOR:
case TreeObject.OUTBOUND_PLUGIN:
case TreeObject.DATA_CLUSTER:
case TreeObject.STORED_PROCEDURE:
case TreeObject.ROLE:
case TreeObject.ROUTING_RULE:
case TreeObject.MENU:
case TreeObject.UNIVERSE:
case TreeObject.SYNCHRONIZATIONPLAN:
InputDialog id1=new InputDialog(view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",null,new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
);
id1.setBlockOnOpen(true);
if (id1.open() == Window.CANCEL) return;
key=id1.getValue();
break;
default :
return;
}
XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
TreeObject newInstance=null;
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
{
if (port.existsDataModel(new WSExistsDataModel(new WSDataModelPK((String)key))).is_true()) {
;
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModel wsDataModel=new WSDataModel((String)key,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
port.putDataModel(new WSPutDataModel(wsDataModel));
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_MODEL,new WSDataModelPK((String)key),wsDataModel);
break;
}
case TreeObject.VIEW:
{
if (port.existsView(new WSExistsView(new WSViewPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModelPK[] dataModelPKs=Util.getAllDataModelPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstDataModel=null;
for (int i=0; i < dataModelPKs.length; i++) {
if (dataModelPKs[i].getPk().indexOf(""String_Node_Str"") == -1) {
firstDataModel=dataModelPKs[i].getPk();
break;
}
}
if (firstDataModel == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSDataClusterPK[] dataClusterPKs=Util.getAllDataClusterPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstItemCluster=null;
for (int i=0; i < dataClusterPKs.length; i++) {
if (!dataClusterPKs[i].getPk().equals(""String_Node_Str"")) {
firstItemCluster=dataClusterPKs[i].getPk();
break;
}
}
if (firstItemCluster == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSView wsview=new WSView((String)key,""String_Node_Str"",new String[]{},new WSWhereCondition[0],new String[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.VIEW,new WSViewPK((String)key),wsview);
break;
}
case TreeObject.DATA_CLUSTER:
{
if (port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataCluster dc=new WSDataCluster((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_CLUSTER,new WSDataClusterPK((String)key),dc);
break;
}
case TreeObject.STORED_PROCEDURE:
{
if (port.existsStoredProcedure(new WSExistsStoredProcedure(new WSStoredProcedurePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSStoredProcedure storedProcedure=new WSStoredProcedure((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK((String)key),storedProcedure);
break;
}
case TreeObject.ROLE:
{
if (port.existsRole(new WSExistsRole(new WSRolePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRole role=new WSRole((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROLE,new WSRolePK((String)key),role);
break;
}
case TreeObject.ROUTING_RULE:
{
if (port.existsRoutingRule(new WSExistsRoutingRule(new WSRoutingRulePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRoutingRule routingRule=new WSRoutingRule((String)key,""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new WSRoutingRuleExpression[0]);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROUTING_RULE,new WSRoutingRulePK((String)key),routingRule);
break;
}
case TreeObject.TRANSFORMER:
{
if (port.existsTransformerV2(new WSExistsTransformerV2(new WSTransformerV2PK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSTransformerV2 transformer=new WSTransformerV2((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.TRANSFORMER,new WSTransformerV2PK((String)key),transformer);
break;
}
case TreeObject.MENU:
{
if (port.existsMenu(new WSExistsMenu(new WSMenuPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSMenu menu=new WSMenu((String)key,""String_Node_Str"",new WSMenuEntry[]{new WSMenuEntry((String)key,new WSMenuMenuEntriesDescriptions[]{new WSMenuMenuEntriesDescriptions(""String_Node_Str"",(String)key)},null,null,null)});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.MENU,new WSMenuPK((String)key),menu);
break;
}
case TreeObject.UNIVERSE:
{
if (port.existsUniverse(new WSExistsUniverse(new WSUniversePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSUniverseXtentisObjectsRevisionIDs> objectsId=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
for (String object : port.getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSUniverseXtentisObjectsRevisionIDs(object,""String_Node_Str""));
}
WSUniverse universe=new WSUniverse((String)key,""String_Node_Str"",objectsId.toArray(new WSUniverseXtentisObjectsRevisionIDs[objectsId.size()]),""String_Node_Str"",new WSUniverseItemsRevisionIDs[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.UNIVERSE,new WSUniversePK((String)key),universe);
break;
}
case TreeObject.SYNCHRONIZATIONPLAN:
{
if (port.existsSynchronizationPlan(new WSExistsSynchronizationPlan(new WSSynchronizationPlanPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSSynchronizationPlanXtentisObjectsSynchronizations> objectsId=new ArrayList<WSSynchronizationPlanXtentisObjectsSynchronizations>();
for (String object : port.getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSSynchronizationPlanXtentisObjectsSynchronizations(object,new WSSynchronizationPlanXtentisObjectsSynchronizationsSynchronizations[0]));
}
Calendar calendar=Calendar.getInstance();
calendar.setTimeInMillis(0);
WSSynchronizationPlan synchronizationPlan=new WSSynchronizationPlan((String)key,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",objectsId.toArray(new WSSynchronizationPlanXtentisObjectsSynchronizations[objectsId.size()]),new WSSynchronizationPlanItemsSynchronizations[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK((String)key),synchronizationPlan);
break;
}
default :
return;
}
XObjectEditor editpart=(XObjectEditor)view.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(newInstance,newInstance.getDisplayName()),""String_Node_Str"");
if (editpart.getSelectedPage() instanceof AMainPageV2) {
((AMainPageV2)editpart.getSelectedPage()).markDirty();
}
if (editpart.getSelectedPage() instanceof AMainPage) ((AMainPage)editpart.getSelectedPage()).markDirty();
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
}
}","public void run(){
  try {
    super.run();
    ISelection selection=view.getViewer().getSelection();
    TreeObject xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    TreeParent xfolder=(xobject.isXObject()) ? xobject.getParent() : (TreeParent)xobject;
    Object key=null;
switch (xfolder.getType()) {
case TreeObject.TRANSFORMER:
      ViewInputDialog vid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          if (!Pattern.matches(""String_Node_Str"",newText)) {
            return ""String_Node_Str"";
          }
          return null;
        }
      }
,true);
    vid.create();
  vid.getShell().setSize(new Point(500,220));
vid.setBlockOnOpen(true);
if (vid.open() == Window.CANCEL) return;
key=vid.getValue();
break;
case TreeObject.VIEW:
ViewInputDialog tid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
,false);
tid.create();
tid.getShell().setSize(new Point(600,180));
tid.setBlockOnOpen(true);
if (tid.open() == Window.CANCEL) return;
key=tid.getValue();
break;
case TreeObject.SOURCE:
case TreeObject.DESTINATION:
case TreeObject.DATA_MODEL:
case TreeObject.INBOUND_ADAPTOR:
case TreeObject.INBOUND_PLUGIN:
case TreeObject.OUTBOUND_ADAPTOR:
case TreeObject.OUTBOUND_PLUGIN:
case TreeObject.DATA_CLUSTER:
case TreeObject.STORED_PROCEDURE:
case TreeObject.ROLE:
case TreeObject.ROUTING_RULE:
case TreeObject.MENU:
case TreeObject.UNIVERSE:
case TreeObject.SYNCHRONIZATIONPLAN:
InputDialog id1=new InputDialog(view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",null,new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
);
id1.setBlockOnOpen(true);
if (id1.open() == Window.CANCEL) return;
key=id1.getValue();
break;
default :
return;
}
XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
TreeObject newInstance=null;
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
{
if (port.existsDataModel(new WSExistsDataModel(new WSDataModelPK((String)key))).is_true()) {
;
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModel wsDataModel=new WSDataModel((String)key,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
port.putDataModel(new WSPutDataModel(wsDataModel));
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_MODEL,new WSDataModelPK((String)key),wsDataModel);
break;
}
case TreeObject.VIEW:
{
if (port.existsView(new WSExistsView(new WSViewPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModelPK[] dataModelPKs=Util.getAllDataModelPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstDataModel=null;
for (int i=0; i < dataModelPKs.length; i++) {
if (dataModelPKs[i].getPk().indexOf(""String_Node_Str"") == -1) {
firstDataModel=dataModelPKs[i].getPk();
break;
}
}
if (firstDataModel == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSDataClusterPK[] dataClusterPKs=Util.getAllDataClusterPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstItemCluster=null;
for (int i=0; i < dataClusterPKs.length; i++) {
if (!dataClusterPKs[i].getPk().equals(""String_Node_Str"")) {
firstItemCluster=dataClusterPKs[i].getPk();
break;
}
}
if (firstItemCluster == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSView wsview=new WSView((String)key,""String_Node_Str"",new String[]{},new WSWhereCondition[0],new String[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.VIEW,new WSViewPK((String)key),wsview);
break;
}
case TreeObject.DATA_CLUSTER:
{
if (port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataCluster dc=new WSDataCluster((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_CLUSTER,new WSDataClusterPK((String)key),dc);
break;
}
case TreeObject.STORED_PROCEDURE:
{
if (port.existsStoredProcedure(new WSExistsStoredProcedure(new WSStoredProcedurePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSStoredProcedure storedProcedure=new WSStoredProcedure((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK((String)key),storedProcedure);
break;
}
case TreeObject.ROLE:
{
if (port.existsRole(new WSExistsRole(new WSRolePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRole role=new WSRole((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROLE,new WSRolePK((String)key),role);
break;
}
case TreeObject.ROUTING_RULE:
{
if (port.existsRoutingRule(new WSExistsRoutingRule(new WSRoutingRulePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRoutingRule routingRule=new WSRoutingRule((String)key,""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new WSRoutingRuleExpression[0]);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROUTING_RULE,new WSRoutingRulePK((String)key),routingRule);
break;
}
case TreeObject.TRANSFORMER:
{
if (port.existsTransformerV2(new WSExistsTransformerV2(new WSTransformerV2PK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSTransformerV2 transformer=new WSTransformerV2((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.TRANSFORMER,new WSTransformerV2PK((String)key),transformer);
break;
}
case TreeObject.MENU:
{
if (port.existsMenu(new WSExistsMenu(new WSMenuPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSMenu menu=new WSMenu((String)key,""String_Node_Str"",new WSMenuEntry[]{new WSMenuEntry((String)key,new WSMenuMenuEntriesDescriptions[]{new WSMenuMenuEntriesDescriptions(""String_Node_Str"",(String)key)},null,null,null)});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.MENU,new WSMenuPK((String)key),menu);
break;
}
case TreeObject.UNIVERSE:
{
if (port.existsUniverse(new WSExistsUniverse(new WSUniversePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSUniverseXtentisObjectsRevisionIDs> objectsId=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
for (String object : port.getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSUniverseXtentisObjectsRevisionIDs(object,""String_Node_Str""));
}
WSUniverse universe=new WSUniverse((String)key,""String_Node_Str"",objectsId.toArray(new WSUniverseXtentisObjectsRevisionIDs[objectsId.size()]),""String_Node_Str"",new WSUniverseItemsRevisionIDs[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.UNIVERSE,new WSUniversePK((String)key),universe);
break;
}
case TreeObject.SYNCHRONIZATIONPLAN:
{
if (port.existsSynchronizationPlan(new WSExistsSynchronizationPlan(new WSSynchronizationPlanPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSSynchronizationPlanXtentisObjectsSynchronizations> objectsId=new ArrayList<WSSynchronizationPlanXtentisObjectsSynchronizations>();
for (String object : port.getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSSynchronizationPlanXtentisObjectsSynchronizations(object,new WSSynchronizationPlanXtentisObjectsSynchronizationsSynchronizations[0]));
}
Calendar calendar=Calendar.getInstance();
calendar.setTimeInMillis(0);
WSSynchronizationPlan synchronizationPlan=new WSSynchronizationPlan((String)key,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",objectsId.toArray(new WSSynchronizationPlanXtentisObjectsSynchronizations[objectsId.size()]),new WSSynchronizationPlanItemsSynchronizations[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK((String)key),synchronizationPlan);
break;
}
default :
return;
}
XObjectEditor editpart=(XObjectEditor)view.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(newInstance,newInstance.getDisplayName()),""String_Node_Str"");
if (editpart.getSelectedPage() instanceof AMainPageV2) {
((AMainPageV2)editpart.getSelectedPage()).markDirty();
}
if (editpart.getSelectedPage() instanceof AMainPage) ((AMainPage)editpart.getSelectedPage()).markDirty();
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
}
}",0.9999085421620632
146146,"public void widgetSelected(SelectionEvent e){
  dlg=new XpathSelectDialog(composite.getShell(),treeParent,""String_Node_Str"",site,false,null);
  dlg.setBlockOnOpen(true);
  dlg.open();
  if (dlg.getReturnCode() == Window.OK) {
    String defalutText;
    if (smartViewSelected || !isTransfor)     defalutText=value;
 else     defalutText=""String_Node_Str"";
    if (dlg.getXpath() != null && dlg.getXpath().length() > 0) {
      int point=dlg.getXpath().indexOf(""String_Node_Str"");
      if (point >= 0)       text.setText(defalutText + dlg.getXpath().substring(0,point));
 else       text.setText(defalutText + dlg.getXpath());
    }
    dlg.close();
  }
}","public void widgetSelected(SelectionEvent e){
  dlg=new XpathSelectDialog(composite.getShell(),treeParent,""String_Node_Str"",site,false,null);
  dlg.setBlockOnOpen(true);
  dlg.open();
  if (dlg.getReturnCode() == Window.OK) {
    if (dlg.getXpath() != null && dlg.getXpath().length() > 0) {
      int point=dlg.getXpath().indexOf(""String_Node_Str"");
      if (point >= 0)       text.setText(Smart_view + dlg.getXpath().substring(0,point));
 else       text.setText(Smart_view + dlg.getXpath());
    }
    dlg.close();
  }
}",0.8539898132427843
146147,"protected Control createDialogArea(Composite parent){
  composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  if (message != null) {
    label=new Label(composite,SWT.WRAP);
    label.setText(message);
    GridData data=new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL | GridData.HORIZONTAL_ALIGN_FILL| GridData.VERTICAL_ALIGN_CENTER);
    data.widthHint=convertHorizontalDLUsToPixels(IDialogConstants.MINIMUM_MESSAGE_AREA_WIDTH);
    label.setLayoutData(data);
    label.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,2,1));
    label.setFont(parent.getFont());
  }
  text=new Text(composite,getInputTextStyle());
  text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateInput();
    }
  }
);
  openDLG=new Button(composite,SWT.NONE);
  openDLG.setText(""String_Node_Str"");
  openDLG.addSelectionListener(this);
  errorMessageText=new Text(composite,SWT.READ_ONLY | SWT.WRAP);
  errorMessageText.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  errorMessageText.setBackground(errorMessageText.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  setErrorMessage(errorMessage);
  if (isTransfor) {
    Group radioGroup=new Group(parent,SWT.SHADOW_NONE);
    radioGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,2,1));
    radioGroup.setLayout(new GridLayout(1,false));
    radioGroup.setSize(200,50);
    radioGroup.setText(""String_Node_Str"");
    ((GridLayout)radioGroup.getLayout()).horizontalSpacing=10;
    ((GridLayout)radioGroup.getLayout()).verticalSpacing=5;
    ((GridLayout)radioGroup.getLayout()).marginLeft=10;
    ((GridLayout)radioGroup.getLayout()).marginRight=10;
    transformeButton=new Button(radioGroup,SWT.RADIO);
    transformeButton.setText(""String_Node_Str"");
    transformeButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    transformeButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(""String_Node_Str"");
        label.setText(message);
        smartViewSelected=false;
      }
    }
);
    smartViewButton=new Button(radioGroup,SWT.RADIO);
    smartViewButton.setText(""String_Node_Str"");
    smartViewButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    smartViewButton.setSelection(true);
    smartViewButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(value);
        label.setText(""String_Node_Str"");
        smartViewSelected=true;
      }
    }
);
  }
  applyDialogFont(composite);
  return composite;
}","protected Control createDialogArea(Composite parent){
  composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  if (message != null) {
    label=new Label(composite,SWT.WRAP);
    label.setText(message);
    label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,2,1));
    label.setFont(parent.getFont());
  }
  text=new Text(composite,getInputTextStyle());
  text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateInput();
    }
  }
);
  text.setText(""String_Node_Str"");
  openDLG=new Button(composite,SWT.NONE);
  openDLG.setText(""String_Node_Str"");
  openDLG.addSelectionListener(this);
  openDLG.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  openDLG.setVisible(false);
  openDLG.setToolTipText(""String_Node_Str"");
  errorMessageText=new Text(composite,SWT.READ_ONLY | SWT.WRAP);
  errorMessageText.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,2,1));
  errorMessageText.setBackground(errorMessageText.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  setErrorMessage(errorMessage);
  if (isTransfor) {
    Group radioGroup=new Group(parent,SWT.SHADOW_NONE);
    radioGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,2,1));
    radioGroup.setLayout(new GridLayout(1,false));
    radioGroup.setText(""String_Node_Str"");
    transformeButton=new Button(radioGroup,SWT.RADIO);
    transformeButton.setText(""String_Node_Str"");
    transformeButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    transformeButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(""String_Node_Str"");
        label.setText(message);
        smartViewSelected=false;
        openDLG.setVisible(false);
      }
    }
);
    transformeButton.setSelection(true);
    smartViewButton=new Button(radioGroup,SWT.RADIO);
    smartViewButton.setText(""String_Node_Str"");
    smartViewButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    smartViewButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(Smart_view);
        label.setText(""String_Node_Str"");
        smartViewSelected=true;
        openDLG.setVisible(true);
      }
    }
);
  }
  applyDialogFont(composite);
  return composite;
}",0.7679500520291364
146148,"public void run(){
  try {
    super.run();
    ISelection selection=view.getViewer().getSelection();
    TreeObject xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    TreeParent xfolder=(xobject.isXObject()) ? xobject.getParent() : (TreeParent)xobject;
    Object key=null;
switch (xfolder.getType()) {
case TreeObject.TRANSFORMER:
      ViewInputDialog vid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          if (!Pattern.matches(""String_Node_Str"",newText)) {
            return ""String_Node_Str"";
          }
          return null;
        }
      }
,true);
    vid.create();
  vid.getShell().setSize(new Point(500,250));
vid.setBlockOnOpen(true);
if (vid.open() == Window.CANCEL) return;
key=vid.getValue();
break;
case TreeObject.VIEW:
ViewInputDialog tid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
,false);
tid.create();
tid.getShell().setSize(new Point(600,180));
tid.setBlockOnOpen(true);
if (tid.open() == Window.CANCEL) return;
key=tid.getValue();
break;
case TreeObject.SOURCE:
case TreeObject.DESTINATION:
case TreeObject.DATA_MODEL:
case TreeObject.INBOUND_ADAPTOR:
case TreeObject.INBOUND_PLUGIN:
case TreeObject.OUTBOUND_ADAPTOR:
case TreeObject.OUTBOUND_PLUGIN:
case TreeObject.DATA_CLUSTER:
case TreeObject.STORED_PROCEDURE:
case TreeObject.ROLE:
case TreeObject.ROUTING_RULE:
case TreeObject.MENU:
case TreeObject.UNIVERSE:
case TreeObject.SYNCHRONIZATIONPLAN:
InputDialog id1=new InputDialog(view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",null,new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
);
id1.setBlockOnOpen(true);
if (id1.open() == Window.CANCEL) return;
key=id1.getValue();
break;
default :
return;
}
XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
TreeObject newInstance=null;
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
{
if (port.existsDataModel(new WSExistsDataModel(new WSDataModelPK((String)key))).is_true()) {
;
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModel wsDataModel=new WSDataModel((String)key,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
port.putDataModel(new WSPutDataModel(wsDataModel));
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_MODEL,new WSDataModelPK((String)key),wsDataModel);
break;
}
case TreeObject.VIEW:
{
if (port.existsView(new WSExistsView(new WSViewPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModelPK[] dataModelPKs=Util.getAllDataModelPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstDataModel=null;
for (int i=0; i < dataModelPKs.length; i++) {
if (dataModelPKs[i].getPk().indexOf(""String_Node_Str"") == -1) {
firstDataModel=dataModelPKs[i].getPk();
break;
}
}
if (firstDataModel == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSDataClusterPK[] dataClusterPKs=Util.getAllDataClusterPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstItemCluster=null;
for (int i=0; i < dataClusterPKs.length; i++) {
if (!dataClusterPKs[i].getPk().equals(""String_Node_Str"")) {
firstItemCluster=dataClusterPKs[i].getPk();
break;
}
}
if (firstItemCluster == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSView wsview=new WSView((String)key,""String_Node_Str"",new String[]{},new WSWhereCondition[0],new String[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.VIEW,new WSViewPK((String)key),wsview);
break;
}
case TreeObject.DATA_CLUSTER:
{
if (port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataCluster dc=new WSDataCluster((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_CLUSTER,new WSDataClusterPK((String)key),dc);
break;
}
case TreeObject.STORED_PROCEDURE:
{
if (port.existsStoredProcedure(new WSExistsStoredProcedure(new WSStoredProcedurePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSStoredProcedure storedProcedure=new WSStoredProcedure((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK((String)key),storedProcedure);
break;
}
case TreeObject.ROLE:
{
if (port.existsRole(new WSExistsRole(new WSRolePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRole role=new WSRole((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROLE,new WSRolePK((String)key),role);
break;
}
case TreeObject.ROUTING_RULE:
{
if (port.existsRoutingRule(new WSExistsRoutingRule(new WSRoutingRulePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRoutingRule routingRule=new WSRoutingRule((String)key,""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new WSRoutingRuleExpression[0]);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROUTING_RULE,new WSRoutingRulePK((String)key),routingRule);
break;
}
case TreeObject.TRANSFORMER:
{
if (port.existsTransformerV2(new WSExistsTransformerV2(new WSTransformerV2PK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSTransformerV2 transformer=new WSTransformerV2((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.TRANSFORMER,new WSTransformerV2PK((String)key),transformer);
break;
}
case TreeObject.MENU:
{
if (port.existsMenu(new WSExistsMenu(new WSMenuPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSMenu menu=new WSMenu((String)key,""String_Node_Str"",new WSMenuEntry[]{new WSMenuEntry((String)key,new WSMenuMenuEntriesDescriptions[]{new WSMenuMenuEntriesDescriptions(""String_Node_Str"",(String)key)},null,null,null)});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.MENU,new WSMenuPK((String)key),menu);
break;
}
case TreeObject.UNIVERSE:
{
if (port.existsUniverse(new WSExistsUniverse(new WSUniversePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSUniverseXtentisObjectsRevisionIDs> objectsId=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
for (String object : port.getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSUniverseXtentisObjectsRevisionIDs(object,""String_Node_Str""));
}
WSUniverse universe=new WSUniverse((String)key,""String_Node_Str"",objectsId.toArray(new WSUniverseXtentisObjectsRevisionIDs[objectsId.size()]),""String_Node_Str"",new WSUniverseItemsRevisionIDs[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.UNIVERSE,new WSUniversePK((String)key),universe);
break;
}
case TreeObject.SYNCHRONIZATIONPLAN:
{
if (port.existsSynchronizationPlan(new WSExistsSynchronizationPlan(new WSSynchronizationPlanPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSSynchronizationPlanXtentisObjectsSynchronizations> objectsId=new ArrayList<WSSynchronizationPlanXtentisObjectsSynchronizations>();
for (String object : port.getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSSynchronizationPlanXtentisObjectsSynchronizations(object,new WSSynchronizationPlanXtentisObjectsSynchronizationsSynchronizations[0]));
}
Calendar calendar=Calendar.getInstance();
calendar.setTimeInMillis(0);
WSSynchronizationPlan synchronizationPlan=new WSSynchronizationPlan((String)key,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",objectsId.toArray(new WSSynchronizationPlanXtentisObjectsSynchronizations[objectsId.size()]),new WSSynchronizationPlanItemsSynchronizations[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK((String)key),synchronizationPlan);
break;
}
default :
return;
}
XObjectEditor editpart=(XObjectEditor)view.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(newInstance,newInstance.getDisplayName()),""String_Node_Str"");
if (editpart.getSelectedPage() instanceof AMainPageV2) {
((AMainPageV2)editpart.getSelectedPage()).markDirty();
}
if (editpart.getSelectedPage() instanceof AMainPage) ((AMainPage)editpart.getSelectedPage()).markDirty();
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
}
}","public void run(){
  try {
    super.run();
    ISelection selection=view.getViewer().getSelection();
    TreeObject xobject=(TreeObject)((IStructuredSelection)selection).getFirstElement();
    TreeParent xfolder=(xobject.isXObject()) ? xobject.getParent() : (TreeParent)xobject;
    Object key=null;
switch (xfolder.getType()) {
case TreeObject.TRANSFORMER:
      ViewInputDialog vid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          if (!Pattern.matches(""String_Node_Str"",newText)) {
            return ""String_Node_Str"";
          }
          return null;
        }
      }
,true);
    vid.create();
  vid.getShell().setSize(new Point(500,220));
vid.setBlockOnOpen(true);
if (vid.open() == Window.CANCEL) return;
key=vid.getValue();
break;
case TreeObject.VIEW:
ViewInputDialog tid=new ViewInputDialog(view.getSite(),(TreeParent)view.getRoot().getChildren()[0].findServerFolder(TreeObject.TRANSFORMER),view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
,false);
tid.create();
tid.getShell().setSize(new Point(600,180));
tid.setBlockOnOpen(true);
if (tid.open() == Window.CANCEL) return;
key=tid.getValue();
break;
case TreeObject.SOURCE:
case TreeObject.DESTINATION:
case TreeObject.DATA_MODEL:
case TreeObject.INBOUND_ADAPTOR:
case TreeObject.INBOUND_PLUGIN:
case TreeObject.OUTBOUND_ADAPTOR:
case TreeObject.OUTBOUND_PLUGIN:
case TreeObject.DATA_CLUSTER:
case TreeObject.STORED_PROCEDURE:
case TreeObject.ROLE:
case TreeObject.ROUTING_RULE:
case TreeObject.MENU:
case TreeObject.UNIVERSE:
case TreeObject.SYNCHRONIZATIONPLAN:
InputDialog id1=new InputDialog(view.getSite().getShell(),""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str"",""String_Node_Str"",null,new IInputValidator(){
public String isValid(String newText){
if ((newText == null) || ""String_Node_Str"".equals(newText)) return ""String_Node_Str"";
if (!Pattern.matches(""String_Node_Str"",newText)) {
return ""String_Node_Str"";
}
return null;
}
}
);
id1.setBlockOnOpen(true);
if (id1.open() == Window.CANCEL) return;
key=id1.getValue();
break;
default :
return;
}
XtentisPort port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
TreeObject newInstance=null;
switch (xobject.getType()) {
case TreeObject.DATA_MODEL:
{
if (port.existsDataModel(new WSExistsDataModel(new WSDataModelPK((String)key))).is_true()) {
;
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModel wsDataModel=new WSDataModel((String)key,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
port.putDataModel(new WSPutDataModel(wsDataModel));
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_MODEL,new WSDataModelPK((String)key),wsDataModel);
break;
}
case TreeObject.VIEW:
{
if (port.existsView(new WSExistsView(new WSViewPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataModelPK[] dataModelPKs=Util.getAllDataModelPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstDataModel=null;
for (int i=0; i < dataModelPKs.length; i++) {
if (dataModelPKs[i].getPk().indexOf(""String_Node_Str"") == -1) {
firstDataModel=dataModelPKs[i].getPk();
break;
}
}
if (firstDataModel == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSDataClusterPK[] dataClusterPKs=Util.getAllDataClusterPKs(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
String firstItemCluster=null;
for (int i=0; i < dataClusterPKs.length; i++) {
if (!dataClusterPKs[i].getPk().equals(""String_Node_Str"")) {
firstItemCluster=dataClusterPKs[i].getPk();
break;
}
}
if (firstItemCluster == null) {
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
return;
}
WSView wsview=new WSView((String)key,""String_Node_Str"",new String[]{},new WSWhereCondition[0],new String[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.VIEW,new WSViewPK((String)key),wsview);
break;
}
case TreeObject.DATA_CLUSTER:
{
if (port.existsDataCluster(new WSExistsDataCluster(new WSDataClusterPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSDataCluster dc=new WSDataCluster((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.DATA_CLUSTER,new WSDataClusterPK((String)key),dc);
break;
}
case TreeObject.STORED_PROCEDURE:
{
if (port.existsStoredProcedure(new WSExistsStoredProcedure(new WSStoredProcedurePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSStoredProcedure storedProcedure=new WSStoredProcedure((String)key,""String_Node_Str"",""String_Node_Str"");
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.STORED_PROCEDURE,new WSStoredProcedurePK((String)key),storedProcedure);
break;
}
case TreeObject.ROLE:
{
if (port.existsRole(new WSExistsRole(new WSRolePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRole role=new WSRole((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROLE,new WSRolePK((String)key),role);
break;
}
case TreeObject.ROUTING_RULE:
{
if (port.existsRoutingRule(new WSExistsRoutingRule(new WSRoutingRulePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSRoutingRule routingRule=new WSRoutingRule((String)key,""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new WSRoutingRuleExpression[0]);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.ROUTING_RULE,new WSRoutingRulePK((String)key),routingRule);
break;
}
case TreeObject.TRANSFORMER:
{
if (port.existsTransformerV2(new WSExistsTransformerV2(new WSTransformerV2PK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSTransformerV2 transformer=new WSTransformerV2((String)key,""String_Node_Str"",null);
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.TRANSFORMER,new WSTransformerV2PK((String)key),transformer);
break;
}
case TreeObject.MENU:
{
if (port.existsMenu(new WSExistsMenu(new WSMenuPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
WSMenu menu=new WSMenu((String)key,""String_Node_Str"",new WSMenuEntry[]{new WSMenuEntry((String)key,new WSMenuMenuEntriesDescriptions[]{new WSMenuMenuEntriesDescriptions(""String_Node_Str"",(String)key)},null,null,null)});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.MENU,new WSMenuPK((String)key),menu);
break;
}
case TreeObject.UNIVERSE:
{
if (port.existsUniverse(new WSExistsUniverse(new WSUniversePK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSUniverseXtentisObjectsRevisionIDs> objectsId=new ArrayList<WSUniverseXtentisObjectsRevisionIDs>();
for (String object : port.getObjectsForUniverses(new WSGetObjectsForUniverses(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSUniverseXtentisObjectsRevisionIDs(object,""String_Node_Str""));
}
WSUniverse universe=new WSUniverse((String)key,""String_Node_Str"",objectsId.toArray(new WSUniverseXtentisObjectsRevisionIDs[objectsId.size()]),""String_Node_Str"",new WSUniverseItemsRevisionIDs[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.UNIVERSE,new WSUniversePK((String)key),universe);
break;
}
case TreeObject.SYNCHRONIZATIONPLAN:
{
if (port.existsSynchronizationPlan(new WSExistsSynchronizationPlan(new WSSynchronizationPlanPK((String)key))).is_true()) {
MessageDialog.openError(this.view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + (String)key + ""String_Node_Str"");
return;
}
List<WSSynchronizationPlanXtentisObjectsSynchronizations> objectsId=new ArrayList<WSSynchronizationPlanXtentisObjectsSynchronizations>();
for (String object : port.getObjectsForSynchronizationPlans(new WSGetObjectsForSynchronizationPlans(new String[]{""String_Node_Str""})).getStrings()) {
objectsId.add(new WSSynchronizationPlanXtentisObjectsSynchronizations(object,new WSSynchronizationPlanXtentisObjectsSynchronizationsSynchronizations[0]));
}
Calendar calendar=Calendar.getInstance();
calendar.setTimeInMillis(0);
WSSynchronizationPlan synchronizationPlan=new WSSynchronizationPlan((String)key,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",objectsId.toArray(new WSSynchronizationPlanXtentisObjectsSynchronizations[objectsId.size()]),new WSSynchronizationPlanItemsSynchronizations[]{});
newInstance=new TreeObject((String)key,xfolder.getServerRoot(),TreeObject.SYNCHRONIZATIONPLAN,new WSSynchronizationPlanPK((String)key),synchronizationPlan);
break;
}
default :
return;
}
XObjectEditor editpart=(XObjectEditor)view.getSite().getWorkbenchWindow().getActivePage().openEditor(new XObjectEditorInput(newInstance,newInstance.getDisplayName()),""String_Node_Str"");
if (editpart.getSelectedPage() instanceof AMainPageV2) {
((AMainPageV2)editpart.getSelectedPage()).markDirty();
}
if (editpart.getSelectedPage() instanceof AMainPage) ((AMainPage)editpart.getSelectedPage()).markDirty();
}
 catch (Exception e) {
e.printStackTrace();
MessageDialog.openError(view.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + IConstants.TALEND + ""String_Node_Str""+ e.getLocalizedMessage());
}
}",0.9999085421620632
146149,"public void widgetSelected(SelectionEvent e){
  dlg=new XpathSelectDialog(composite.getShell(),treeParent,""String_Node_Str"",site,false,null);
  dlg.setBlockOnOpen(true);
  dlg.open();
  if (dlg.getReturnCode() == Window.OK) {
    String defalutText;
    if (smartViewSelected || !isTransfor)     defalutText=value;
 else     defalutText=""String_Node_Str"";
    if (dlg.getXpath() != null && dlg.getXpath().length() > 0) {
      int point=dlg.getXpath().indexOf(""String_Node_Str"");
      if (point >= 0)       text.setText(defalutText + dlg.getXpath().substring(0,point));
 else       text.setText(defalutText + dlg.getXpath());
    }
    dlg.close();
  }
}","public void widgetSelected(SelectionEvent e){
  dlg=new XpathSelectDialog(composite.getShell(),treeParent,""String_Node_Str"",site,false,null);
  dlg.setBlockOnOpen(true);
  dlg.open();
  if (dlg.getReturnCode() == Window.OK) {
    if (dlg.getXpath() != null && dlg.getXpath().length() > 0) {
      int point=dlg.getXpath().indexOf(""String_Node_Str"");
      if (point >= 0)       text.setText(Smart_view + dlg.getXpath().substring(0,point));
 else       text.setText(Smart_view + dlg.getXpath());
    }
    dlg.close();
  }
}",0.8539898132427843
146150,"protected Control createDialogArea(Composite parent){
  composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  if (message != null) {
    label=new Label(composite,SWT.WRAP);
    label.setText(message);
    GridData data=new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL | GridData.HORIZONTAL_ALIGN_FILL| GridData.VERTICAL_ALIGN_CENTER);
    data.widthHint=convertHorizontalDLUsToPixels(IDialogConstants.MINIMUM_MESSAGE_AREA_WIDTH);
    label.setLayoutData(data);
    label.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,2,1));
    label.setFont(parent.getFont());
  }
  text=new Text(composite,getInputTextStyle());
  text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateInput();
    }
  }
);
  openDLG=new Button(composite,SWT.NONE);
  openDLG.setText(""String_Node_Str"");
  openDLG.addSelectionListener(this);
  errorMessageText=new Text(composite,SWT.READ_ONLY | SWT.WRAP);
  errorMessageText.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  errorMessageText.setBackground(errorMessageText.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  setErrorMessage(errorMessage);
  if (isTransfor) {
    Group radioGroup=new Group(parent,SWT.SHADOW_NONE);
    radioGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,2,1));
    radioGroup.setLayout(new GridLayout(1,false));
    radioGroup.setSize(200,50);
    radioGroup.setText(""String_Node_Str"");
    ((GridLayout)radioGroup.getLayout()).horizontalSpacing=10;
    ((GridLayout)radioGroup.getLayout()).verticalSpacing=5;
    ((GridLayout)radioGroup.getLayout()).marginLeft=10;
    ((GridLayout)radioGroup.getLayout()).marginRight=10;
    transformeButton=new Button(radioGroup,SWT.RADIO);
    transformeButton.setText(""String_Node_Str"");
    transformeButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    transformeButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(""String_Node_Str"");
        label.setText(message);
        smartViewSelected=false;
      }
    }
);
    smartViewButton=new Button(radioGroup,SWT.RADIO);
    smartViewButton.setText(""String_Node_Str"");
    smartViewButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    smartViewButton.setSelection(true);
    smartViewButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(value);
        label.setText(""String_Node_Str"");
        smartViewSelected=true;
      }
    }
);
  }
  applyDialogFont(composite);
  return composite;
}","protected Control createDialogArea(Composite parent){
  composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  if (message != null) {
    label=new Label(composite,SWT.WRAP);
    label.setText(message);
    label.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,2,1));
    label.setFont(parent.getFont());
  }
  text=new Text(composite,getInputTextStyle());
  text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
  text.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateInput();
    }
  }
);
  text.setText(""String_Node_Str"");
  openDLG=new Button(composite,SWT.NONE);
  openDLG.setText(""String_Node_Str"");
  openDLG.addSelectionListener(this);
  openDLG.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  openDLG.setVisible(false);
  openDLG.setToolTipText(""String_Node_Str"");
  errorMessageText=new Text(composite,SWT.READ_ONLY | SWT.WRAP);
  errorMessageText.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,2,1));
  errorMessageText.setBackground(errorMessageText.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  setErrorMessage(errorMessage);
  if (isTransfor) {
    Group radioGroup=new Group(parent,SWT.SHADOW_NONE);
    radioGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,2,1));
    radioGroup.setLayout(new GridLayout(1,false));
    radioGroup.setText(""String_Node_Str"");
    transformeButton=new Button(radioGroup,SWT.RADIO);
    transformeButton.setText(""String_Node_Str"");
    transformeButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    transformeButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(""String_Node_Str"");
        label.setText(message);
        smartViewSelected=false;
        openDLG.setVisible(false);
      }
    }
);
    transformeButton.setSelection(true);
    smartViewButton=new Button(radioGroup,SWT.RADIO);
    smartViewButton.setText(""String_Node_Str"");
    smartViewButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    smartViewButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        text.setText(Smart_view);
        label.setText(""String_Node_Str"");
        smartViewSelected=true;
        openDLG.setVisible(true);
      }
    }
);
  }
  applyDialogFont(composite);
  return composite;
}",0.7679500520291364
146151,"public String getForeignKeyList(int start,int limit,String value,String xpathForeignKey,String xpathInfoForeignKey) throws RemoteException, Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + xpathForeignKey + ""String_Node_Str""+ xpathInfoForeignKey+ ""String_Node_Str""+ value+ ""String_Node_Str"");
  Configuration config=Configuration.getInstance();
  if (xpathForeignKey.split(""String_Node_Str"").length == 1) {
    String conceptName=xpathForeignKey;
    String[] xpathInfos=new String[0];
    if (!""String_Node_Str"".equals(xpathInfoForeignKey))     xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    String filteredConcept=conceptName;
    if (value != null && !""String_Node_Str"".equals(value.trim())) {
      filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    }
    ArrayList<String> xPaths=new ArrayList<String>();
    for (int i=0; i < xpathInfos.length; i++) {
      xPaths.add(xpathInfos[i].replaceFirst(conceptName,filteredConcept));
    }
    xPaths.add(filteredConcept + ""String_Node_Str"");
    String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),filteredConcept,new WSStringArray(xPaths.toArray(new String[xPaths.size()])),null,-1,start,limit,null,null)).getStrings();
    if (results == null)     results=new String[0];
    JSONObject json=new JSONObject();
    json.put(""String_Node_Str"",results.length);
    JSONArray rows=new JSONArray();
    json.put(""String_Node_Str"",rows);
    for (int i=0; i < results.length; i++) {
      Element root=Util.parse(results[i]).getDocumentElement();
      NodeList list=root.getChildNodes();
      String keys=""String_Node_Str"";
      for (int j=xpathInfos.length; j < list.getLength(); j++) {
        Node textNode=list.item(j).getFirstChild();
        keys+=""String_Node_Str"" + (textNode == null ? ""String_Node_Str"" : textNode.getNodeValue()) + ""String_Node_Str"";
      }
      String infos=null;
      if (xpathInfos.length == 0) {
        infos=keys;
      }
 else {
        for (int j=0; j < xpathInfos.length; j++) {
          infos=(infos == null ? ""String_Node_Str"" : infos + ""String_Node_Str"");
          Node textNode=list.item(j).getFirstChild();
          infos+=textNode == null ? ""String_Node_Str"" : textNode.getNodeValue();
        }
      }
      JSONObject row=new JSONObject();
      row.put(""String_Node_Str"",keys);
      row.put(""String_Node_Str"",infos);
      rows.put(row);
    }
    return json.toString();
  }
  String[] xpaths=null;
  if (!""String_Node_Str"".equals(xpathInfoForeignKey)) {
    String[] xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    xpaths=new String[xpathInfos.length + 1];
    xpaths[0]=xpathForeignKey;
    System.arraycopy(xpathInfos,0,xpaths,1,xpathInfos.length);
  }
 else {
    xpaths=new String[1];
    xpaths[0]=xpathForeignKey;
  }
  for (int i=0; i < xpaths.length; i++) {
    String xpath=xpaths[i];
    int pos=xpath.indexOf(""String_Node_Str"");
    String conceptName=xpath.substring(0,pos);
    String left=xpath.substring(pos);
    String filteredConcept=conceptName;
    filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    xpath=filteredConcept + left;
    xpaths[i]=xpath;
  }
  String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),xpaths[0],new WSStringArray(xpaths),null,-1,0,Integer.MAX_VALUE,null,null)).getStrings();
  if (results == null)   results=new String[0];
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",results.length);
  JSONArray rows=new JSONArray();
  json.put(""String_Node_Str"",rows);
  for (int i=0; i < results.length; i++) {
    if (results[i] != null) {
      Document d=Util.parse(results[i]);
      String tmp=""String_Node_Str"";
      for (int j=0; j < xpaths.length; j++) {
        tmp+=""String_Node_Str"" + Util.getFirstTextNode(d,""String_Node_Str"" + xpaths[j].split(""String_Node_Str"")[xpaths[j].split(""String_Node_Str"").length - 1]);
      }
      if (Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]) != null) {
        String keys=Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]);
        String infos=tmp.substring(3);
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
    }
  }
  return json.toString();
}","public String getForeignKeyList(int start,int limit,String value,String xpathForeignKey,String xpathInfoForeignKey) throws RemoteException, Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + xpathForeignKey + ""String_Node_Str""+ xpathInfoForeignKey+ ""String_Node_Str""+ value+ ""String_Node_Str"");
  Configuration config=Configuration.getInstance();
  if (xpathForeignKey.split(""String_Node_Str"").length == 1) {
    String conceptName=xpathForeignKey;
    String[] xpathInfos=new String[0];
    if (!""String_Node_Str"".equals(xpathInfoForeignKey))     xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    String filteredConcept=conceptName;
    if (value != null && !""String_Node_Str"".equals(value.trim())) {
      filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    }
    ArrayList<String> xPaths=new ArrayList<String>();
    for (int i=0; i < xpathInfos.length; i++) {
      xPaths.add(xpathInfos[i].replaceFirst(conceptName,filteredConcept));
    }
    xPaths.add(filteredConcept + ""String_Node_Str"");
    String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),filteredConcept,new WSStringArray(xPaths.toArray(new String[xPaths.size()])),null,-1,start,limit,null,null)).getStrings();
    if (results == null)     results=new String[0];
    JSONObject json=new JSONObject();
    JSONArray rows=new JSONArray();
    json.put(""String_Node_Str"",rows);
    for (int i=0; i < results.length; i++) {
      if (!results[i].startsWith(""String_Node_Str"")) {
        results[i]=""String_Node_Str"" + results[i] + ""String_Node_Str"";
      }
      Element root=Util.parse(results[i]).getDocumentElement();
      NodeList list=root.getChildNodes();
      String keys=""String_Node_Str"";
      for (int j=xpathInfos.length; j < list.getLength(); j++) {
        Node textNode=list.item(j).getFirstChild();
        keys+=""String_Node_Str"" + (textNode == null ? ""String_Node_Str"" : textNode.getNodeValue()) + ""String_Node_Str"";
      }
      String infos=null;
      if (xpathInfos.length == 0) {
        infos=keys;
      }
 else {
        for (int j=0; j < xpathInfos.length; j++) {
          infos=(infos == null ? ""String_Node_Str"" : infos + ""String_Node_Str"");
          Node textNode=list.item(j).getFirstChild();
          infos+=textNode == null ? ""String_Node_Str"" : textNode.getNodeValue();
        }
      }
      if (keys.equals(""String_Node_Str"") && (infos.equals(""String_Node_Str"") || infos.equals(""String_Node_Str""))) {
      }
 else {
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
      json.put(""String_Node_Str"",rows.length());
    }
    return json.toString();
  }
  String[] xpaths=null;
  if (!""String_Node_Str"".equals(xpathInfoForeignKey)) {
    String[] xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    xpaths=new String[xpathInfos.length + 1];
    xpaths[0]=xpathForeignKey;
    System.arraycopy(xpathInfos,0,xpaths,1,xpathInfos.length);
  }
 else {
    xpaths=new String[1];
    xpaths[0]=xpathForeignKey;
  }
  for (int i=0; i < xpaths.length; i++) {
    String xpath=xpaths[i];
    int pos=xpath.indexOf(""String_Node_Str"");
    String conceptName=xpath.substring(0,pos);
    String left=xpath.substring(pos);
    String filteredConcept=conceptName;
    filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    xpath=filteredConcept + left;
    xpaths[i]=xpath;
  }
  String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),xpaths[0],new WSStringArray(xpaths),null,-1,0,Integer.MAX_VALUE,null,null)).getStrings();
  if (results == null)   results=new String[0];
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",results.length);
  JSONArray rows=new JSONArray();
  json.put(""String_Node_Str"",rows);
  for (int i=0; i < results.length; i++) {
    if (results[i] != null) {
      Document d=Util.parse(results[i]);
      String tmp=""String_Node_Str"";
      for (int j=0; j < xpaths.length; j++) {
        tmp+=""String_Node_Str"" + Util.getFirstTextNode(d,""String_Node_Str"" + xpaths[j].split(""String_Node_Str"")[xpaths[j].split(""String_Node_Str"").length - 1]);
      }
      if (Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]) != null) {
        String keys=Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]);
        String infos=tmp.substring(3);
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
    }
  }
  return json.toString();
}",0.9595733333333332
146152,"public String getForeignKeyList(int start,int limit,String value,String xpathForeignKey,String xpathInfoForeignKey) throws RemoteException, Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + xpathForeignKey + ""String_Node_Str""+ xpathInfoForeignKey+ ""String_Node_Str""+ value+ ""String_Node_Str"");
  Configuration config=Configuration.getInstance();
  if (xpathForeignKey.split(""String_Node_Str"").length == 1) {
    String conceptName=xpathForeignKey;
    String[] xpathInfos=new String[0];
    if (!""String_Node_Str"".equals(xpathInfoForeignKey))     xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    String filteredConcept=conceptName;
    if (value != null && !""String_Node_Str"".equals(value.trim())) {
      filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    }
    ArrayList<String> xPaths=new ArrayList<String>();
    for (int i=0; i < xpathInfos.length; i++) {
      xPaths.add(xpathInfos[i].replaceFirst(conceptName,filteredConcept));
    }
    xPaths.add(filteredConcept + ""String_Node_Str"");
    String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),filteredConcept,new WSStringArray(xPaths.toArray(new String[xPaths.size()])),null,-1,start,limit,null,null)).getStrings();
    if (results == null)     results=new String[0];
    JSONObject json=new JSONObject();
    json.put(""String_Node_Str"",results.length);
    JSONArray rows=new JSONArray();
    json.put(""String_Node_Str"",rows);
    for (int i=0; i < results.length; i++) {
      Element root=Util.parse(results[i]).getDocumentElement();
      NodeList list=root.getChildNodes();
      String keys=""String_Node_Str"";
      for (int j=xpathInfos.length; j < list.getLength(); j++) {
        Node textNode=list.item(j).getFirstChild();
        keys+=""String_Node_Str"" + (textNode == null ? ""String_Node_Str"" : textNode.getNodeValue()) + ""String_Node_Str"";
      }
      String infos=null;
      if (xpathInfos.length == 0) {
        infos=keys;
      }
 else {
        for (int j=0; j < xpathInfos.length; j++) {
          infos=(infos == null ? ""String_Node_Str"" : infos + ""String_Node_Str"");
          Node textNode=list.item(j).getFirstChild();
          infos+=textNode == null ? ""String_Node_Str"" : textNode.getNodeValue();
        }
      }
      JSONObject row=new JSONObject();
      row.put(""String_Node_Str"",keys);
      row.put(""String_Node_Str"",infos);
      rows.put(row);
    }
    return json.toString();
  }
  String[] xpaths=null;
  if (!""String_Node_Str"".equals(xpathInfoForeignKey)) {
    String[] xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    xpaths=new String[xpathInfos.length + 1];
    xpaths[0]=xpathForeignKey;
    System.arraycopy(xpathInfos,0,xpaths,1,xpathInfos.length);
  }
 else {
    xpaths=new String[1];
    xpaths[0]=xpathForeignKey;
  }
  for (int i=0; i < xpaths.length; i++) {
    String xpath=xpaths[i];
    int pos=xpath.indexOf(""String_Node_Str"");
    String conceptName=xpath.substring(0,pos);
    String left=xpath.substring(pos);
    String filteredConcept=conceptName;
    filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    xpath=filteredConcept + left;
    xpaths[i]=xpath;
  }
  String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),xpaths[0],new WSStringArray(xpaths),null,-1,0,Integer.MAX_VALUE,null,null)).getStrings();
  if (results == null)   results=new String[0];
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",results.length);
  JSONArray rows=new JSONArray();
  json.put(""String_Node_Str"",rows);
  for (int i=0; i < results.length; i++) {
    if (results[i] != null) {
      Document d=Util.parse(results[i]);
      String tmp=""String_Node_Str"";
      for (int j=0; j < xpaths.length; j++) {
        tmp+=""String_Node_Str"" + Util.getFirstTextNode(d,""String_Node_Str"" + xpaths[j].split(""String_Node_Str"")[xpaths[j].split(""String_Node_Str"").length - 1]);
      }
      if (Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]) != null) {
        String keys=Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]);
        String infos=tmp.substring(3);
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
    }
  }
  return json.toString();
}","public String getForeignKeyList(int start,int limit,String value,String xpathForeignKey,String xpathInfoForeignKey) throws RemoteException, Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + xpathForeignKey + ""String_Node_Str""+ xpathInfoForeignKey+ ""String_Node_Str""+ value+ ""String_Node_Str"");
  Configuration config=Configuration.getInstance();
  if (xpathForeignKey.split(""String_Node_Str"").length == 1) {
    String conceptName=xpathForeignKey;
    String[] xpathInfos=new String[0];
    if (!""String_Node_Str"".equals(xpathInfoForeignKey))     xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    String filteredConcept=conceptName;
    if (value != null && !""String_Node_Str"".equals(value.trim())) {
      filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    }
    ArrayList<String> xPaths=new ArrayList<String>();
    for (int i=0; i < xpathInfos.length; i++) {
      xPaths.add(xpathInfos[i].replaceFirst(conceptName,filteredConcept));
    }
    xPaths.add(filteredConcept + ""String_Node_Str"");
    String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),filteredConcept,new WSStringArray(xPaths.toArray(new String[xPaths.size()])),null,-1,start,limit,null,null)).getStrings();
    if (results == null)     results=new String[0];
    JSONObject json=new JSONObject();
    JSONArray rows=new JSONArray();
    json.put(""String_Node_Str"",rows);
    for (int i=0; i < results.length; i++) {
      if (!results[i].startsWith(""String_Node_Str"")) {
        results[i]=""String_Node_Str"" + results[i] + ""String_Node_Str"";
      }
      Element root=Util.parse(results[i]).getDocumentElement();
      NodeList list=root.getChildNodes();
      String keys=""String_Node_Str"";
      for (int j=xpathInfos.length; j < list.getLength(); j++) {
        Node textNode=list.item(j).getFirstChild();
        keys+=""String_Node_Str"" + (textNode == null ? ""String_Node_Str"" : textNode.getNodeValue()) + ""String_Node_Str"";
      }
      String infos=null;
      if (xpathInfos.length == 0) {
        infos=keys;
      }
 else {
        for (int j=0; j < xpathInfos.length; j++) {
          infos=(infos == null ? ""String_Node_Str"" : infos + ""String_Node_Str"");
          Node textNode=list.item(j).getFirstChild();
          infos+=textNode == null ? ""String_Node_Str"" : textNode.getNodeValue();
        }
      }
      if (keys.equals(""String_Node_Str"") && (infos.equals(""String_Node_Str"") || infos.equals(""String_Node_Str""))) {
      }
 else {
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
      json.put(""String_Node_Str"",rows.length());
    }
    return json.toString();
  }
  String[] xpaths=null;
  if (!""String_Node_Str"".equals(xpathInfoForeignKey)) {
    String[] xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    xpaths=new String[xpathInfos.length + 1];
    xpaths[0]=xpathForeignKey;
    System.arraycopy(xpathInfos,0,xpaths,1,xpathInfos.length);
  }
 else {
    xpaths=new String[1];
    xpaths[0]=xpathForeignKey;
  }
  for (int i=0; i < xpaths.length; i++) {
    String xpath=xpaths[i];
    int pos=xpath.indexOf(""String_Node_Str"");
    String conceptName=xpath.substring(0,pos);
    String left=xpath.substring(pos);
    String filteredConcept=conceptName;
    filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    xpath=filteredConcept + left;
    xpaths[i]=xpath;
  }
  String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),xpaths[0],new WSStringArray(xpaths),null,-1,0,Integer.MAX_VALUE,null,null)).getStrings();
  if (results == null)   results=new String[0];
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",results.length);
  JSONArray rows=new JSONArray();
  json.put(""String_Node_Str"",rows);
  for (int i=0; i < results.length; i++) {
    if (results[i] != null) {
      Document d=Util.parse(results[i]);
      String tmp=""String_Node_Str"";
      for (int j=0; j < xpaths.length; j++) {
        tmp+=""String_Node_Str"" + Util.getFirstTextNode(d,""String_Node_Str"" + xpaths[j].split(""String_Node_Str"")[xpaths[j].split(""String_Node_Str"").length - 1]);
      }
      if (Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]) != null) {
        String keys=Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]);
        String infos=tmp.substring(3);
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
    }
  }
  return json.toString();
}",0.9595733333333332
146153,"/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          if (itemKeyValues == null || itemKeyValues[0] == null)           itemKeyValues=new String[]{keys.get(0).getUuidValue()};
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9773081586696692
146154,"/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          if (itemKeyValues == null || itemKeyValues[0] == null)           itemKeyValues=new String[]{keys.get(0).getUuidValue()};
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9746859903381644
146155,"/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          if (itemKeyValues == null || itemKeyValues[0] == null)           itemKeyValues=new String[]{keys.get(0).getUuidValue()};
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9773081586696692
146156,"/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          if (itemKeyValues == null || itemKeyValues[0] == null)           itemKeyValues=new String[]{keys.get(0).getUuidValue()};
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9746859903381644
146157,"/** 
 * Selection Listener on OK Button
 */
public void widgetSelected(SelectionEvent e){
  int buttonId=((Integer)e.widget.getData()).intValue();
  if (IDialogConstants.OK_ID != buttonId)   return;
  String server=dialog.getServer();
  String username=dialog.getUsernameText();
  String password=dialog.getPasswordText();
  String universe=dialog.getUniverse();
  dialog.close();
  Authenticator.setDefault(null);
  try {
    XtentisServerObjectsRetriever retriever=new XtentisServerObjectsRetriever(server,username,password,universe);
    new ProgressMonitorDialog(view.getSite().getShell()).run(true,true,retriever);
    if (!retriever.isExistUniverse()) {
      return;
    }
    TreeParent serverRoot=retriever.getServerRoot();
    TreeParent invisibleRoot=view.getTreeContentProvider().getInvisibleRoot();
    TreeObject[] serverRoots=invisibleRoot.getChildren();
    boolean found=false;
    for (int i=0; i < serverRoots.length; i++) {
      if (serverRoots[i].getWsKey().equals(serverRoot.getWsKey())) {
        if (serverRoots[i].getUser().getUniverse().equalsIgnoreCase(serverRoot.getUser().getUniverse())) {
          found=true;
          ((TreeParent)serverRoots[i]).synchronizeWith(serverRoot);
        }
      }
    }
    if (!found)     invisibleRoot.addChild(serverRoot);
    view.getViewer().refresh();
    view.getViewer().expandToLevel(serverRoot,1);
  }
 catch (  InterruptedException ie) {
    return;
  }
catch (  InvocationTargetException ite) {
    ite.printStackTrace();
    MessageDialog.openError(dialog.getShell(),""String_Node_Str"",""String_Node_Str"" + ite.getCause().getLocalizedMessage());
  }
}","/** 
 * Selection Listener on OK Button
 */
public void widgetSelected(SelectionEvent e){
  int buttonId=((Integer)e.widget.getData()).intValue();
  if (IDialogConstants.OK_ID != buttonId)   return;
  String server=dialog.getServer();
  String username=dialog.getUsernameText();
  String password=dialog.getPasswordText();
  String universe=dialog.getUniverse();
  dialog.close();
  Authenticator.setDefault(null);
  try {
    XtentisServerObjectsRetriever retriever=new XtentisServerObjectsRetriever(server,username,password,universe);
    new ProgressMonitorDialog(view.getSite().getShell()).run(true,true,retriever);
    if (!retriever.isExistUniverse()) {
      return;
    }
    TreeParent serverRoot=retriever.getServerRoot();
    TreeParent invisibleRoot=view.getTreeContentProvider().getInvisibleRoot();
    TreeObject[] serverRoots=invisibleRoot.getChildren();
    boolean found=false;
    for (int i=0; i < serverRoots.length; i++) {
      if (serverRoots[i].getDisplayName().equals(serverRoot.getDisplayName())) {
        if (serverRoots[i].getWsKey().equals(serverRoot.getWsKey())) {
          if (serverRoots[i].getUser().getUniverse().equalsIgnoreCase(serverRoot.getUser().getUniverse())) {
            found=true;
            ((TreeParent)serverRoots[i]).synchronizeWith(serverRoot);
          }
        }
      }
    }
    if (!found)     invisibleRoot.addChild(serverRoot);
    view.getViewer().refresh();
    view.getViewer().expandToLevel(serverRoot,1);
  }
 catch (  InterruptedException ie) {
    return;
  }
catch (  InvocationTargetException ite) {
    ite.printStackTrace();
    MessageDialog.openError(dialog.getShell(),""String_Node_Str"",""String_Node_Str"" + ite.getCause().getLocalizedMessage());
  }
}",0.9698777214434836
146158,"/** 
 * Selection Listener on OK Button
 */
public void widgetSelected(SelectionEvent e){
  int buttonId=((Integer)e.widget.getData()).intValue();
  if (IDialogConstants.OK_ID != buttonId)   return;
  String server=dialog.getServer();
  String username=dialog.getUsernameText();
  String password=dialog.getPasswordText();
  String universe=dialog.getUniverse();
  dialog.close();
  Authenticator.setDefault(null);
  try {
    XtentisServerObjectsRetriever retriever=new XtentisServerObjectsRetriever(server,username,password,universe);
    new ProgressMonitorDialog(view.getSite().getShell()).run(true,true,retriever);
    if (!retriever.isExistUniverse()) {
      return;
    }
    TreeParent serverRoot=retriever.getServerRoot();
    TreeParent invisibleRoot=view.getTreeContentProvider().getInvisibleRoot();
    TreeObject[] serverRoots=invisibleRoot.getChildren();
    boolean found=false;
    for (int i=0; i < serverRoots.length; i++) {
      if (serverRoots[i].getWsKey().equals(serverRoot.getWsKey())) {
        if (serverRoots[i].getUser().getUniverse().equalsIgnoreCase(serverRoot.getUser().getUniverse())) {
          found=true;
          ((TreeParent)serverRoots[i]).synchronizeWith(serverRoot);
        }
      }
    }
    if (!found)     invisibleRoot.addChild(serverRoot);
    view.getViewer().refresh();
    view.getViewer().expandToLevel(serverRoot,1);
  }
 catch (  InterruptedException ie) {
    return;
  }
catch (  InvocationTargetException ite) {
    ite.printStackTrace();
    MessageDialog.openError(dialog.getShell(),""String_Node_Str"",""String_Node_Str"" + ite.getCause().getLocalizedMessage());
  }
}","/** 
 * Selection Listener on OK Button
 */
public void widgetSelected(SelectionEvent e){
  int buttonId=((Integer)e.widget.getData()).intValue();
  if (IDialogConstants.OK_ID != buttonId)   return;
  String server=dialog.getServer();
  String username=dialog.getUsernameText();
  String password=dialog.getPasswordText();
  String universe=dialog.getUniverse();
  dialog.close();
  Authenticator.setDefault(null);
  try {
    XtentisServerObjectsRetriever retriever=new XtentisServerObjectsRetriever(server,username,password,universe);
    new ProgressMonitorDialog(view.getSite().getShell()).run(true,true,retriever);
    if (!retriever.isExistUniverse()) {
      return;
    }
    TreeParent serverRoot=retriever.getServerRoot();
    TreeParent invisibleRoot=view.getTreeContentProvider().getInvisibleRoot();
    TreeObject[] serverRoots=invisibleRoot.getChildren();
    boolean found=false;
    for (int i=0; i < serverRoots.length; i++) {
      if (serverRoots[i].getDisplayName().equals(serverRoot.getDisplayName())) {
        if (serverRoots[i].getWsKey().equals(serverRoot.getWsKey())) {
          if (serverRoots[i].getUser().getUniverse().equalsIgnoreCase(serverRoot.getUser().getUniverse())) {
            found=true;
            ((TreeParent)serverRoots[i]).synchronizeWith(serverRoot);
          }
        }
      }
    }
    if (!found)     invisibleRoot.addChild(serverRoot);
    view.getViewer().refresh();
    view.getViewer().expandToLevel(serverRoot,1);
  }
 catch (  InterruptedException ie) {
    return;
  }
catch (  InvocationTargetException ite) {
    ite.printStackTrace();
    MessageDialog.openError(dialog.getShell(),""String_Node_Str"",""String_Node_Str"" + ite.getCause().getLocalizedMessage());
  }
}",0.9698777214434836
146159,"public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (this.viewName != null && this.viewName.length() > 0) {
    if (viewName.matches(""String_Node_Str"")) {
      String concept=viewName.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (concept != null && concept.length() > 0 && lastDataModelName != null && lastDataModelName.length() > 0) {
        java.util.List<String> toAddViewableList=new ArrayList<String>();
        WSGetBusinessConceptKey wsGetBusinessConceptKey=new WSGetBusinessConceptKey(new WSDataModelPK(lastDataModelName),concept);
        WSConceptKey wsConceptKey=null;
        try {
          wsConceptKey=Util.getPort(getXObject()).getBusinessConceptKey(wsGetBusinessConceptKey);
        }
 catch (        RemoteException e) {
          e.printStackTrace();
        }
catch (        XtentisException e) {
          e.printStackTrace();
        }
        if (wsConceptKey != null) {
          java.util.List<String> viewableList=new ArrayList<String>();
          for (int i=0; i < viewableBEsList.getItemCount(); i++) {
            viewableList.add(viewableBEsList.getItem(i));
          }
          String[] keys=wsConceptKey.getFields();
          for (int i=0; i < keys.length; i++) {
            if (""String_Node_Str"".equals(wsConceptKey.getSelector()))             keys[i]=""String_Node_Str"" + concept + ""String_Node_Str""+ keys[i];
 else             keys[i]=wsConceptKey.getSelector() + keys[i];
          }
          String[] ids=wsConceptKey.getFields();
          for (int i=0; i < ids.length; i++) {
            if (!viewableList.contains(ids[i])) {
              toAddViewableList.add(ids[i]);
            }
          }
        }
        if (toAddViewableList.size() > 0) {
          String msg=""String_Node_Str"";
          for (Iterator iterator=toAddViewableList.iterator(); iterator.hasNext(); ) {
            String toAddItem=(String)iterator.next();
            msg+=(toAddItem + ""String_Node_Str"");
          }
          msg+=""String_Node_Str"";
          MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",msg);
        }
        IRunnableWithProgress autoFixProcess=new AutoFixProgress(toAddViewableList,viewableBEsList,this.getSite().getShell());
        try {
          new ProgressMonitorDialog(this.getSite().getShell()).run(false,true,autoFixProcess);
        }
 catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
}","public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (this.viewName != null && this.viewName.length() > 0) {
    if (viewName.matches(""String_Node_Str"")) {
      String concept=viewName.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (concept != null && concept.length() > 0 && lastDataModelName != null && lastDataModelName.length() > 0) {
        java.util.List<String> toAddViewableList=new ArrayList<String>();
        WSGetBusinessConceptKey wsGetBusinessConceptKey=new WSGetBusinessConceptKey(new WSDataModelPK(lastDataModelName),concept);
        WSConceptKey wsConceptKey=null;
        try {
          wsConceptKey=Util.getPort(getXObject()).getBusinessConceptKey(wsGetBusinessConceptKey);
        }
 catch (        RemoteException e) {
          e.printStackTrace();
        }
catch (        XtentisException e) {
          e.printStackTrace();
        }
        if (wsConceptKey != null) {
          java.util.List<String> viewableList=new ArrayList<String>();
          for (int i=0; i < viewableBEsList.getItemCount(); i++) {
            viewableList.add(viewableBEsList.getItem(i));
          }
          String[] keys=wsConceptKey.getFields();
          for (int i=0; i < keys.length; i++) {
            if (""String_Node_Str"".equals(wsConceptKey.getSelector()))             keys[i]=""String_Node_Str"" + concept + ""String_Node_Str""+ keys[i];
 else             keys[i]=wsConceptKey.getSelector() + keys[i];
          }
          String[] ids=wsConceptKey.getFields();
          for (int i=0; i < ids.length; i++) {
            String id=ids[i];
            if (id.startsWith(""String_Node_Str"")) {
              id=id.substring(1);
            }
 else             if (id.startsWith(""String_Node_Str"")) {
              id=id.substring(2);
            }
            if (!viewableList.contains(id)) {
              toAddViewableList.add(id);
            }
          }
        }
        if (toAddViewableList.size() > 0) {
          String msg=""String_Node_Str"";
          for (Iterator iterator=toAddViewableList.iterator(); iterator.hasNext(); ) {
            String toAddItem=(String)iterator.next();
            msg+=(toAddItem + ""String_Node_Str"");
          }
          msg+=""String_Node_Str"";
          MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",msg);
        }
        IRunnableWithProgress autoFixProcess=new AutoFixProgress(toAddViewableList,viewableBEsList,this.getSite().getShell());
        try {
          new ProgressMonitorDialog(this.getSite().getShell()).run(false,true,autoFixProcess);
        }
 catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
}",0.9549483013293943
146160,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  try {
    monitor.beginTask(""String_Node_Str"",toAddViewableList.size());
    for (Iterator<String> iter=toAddViewableList.iterator(); iter.hasNext(); ) {
      String keyPath=iter.next();
      if (keyPath.startsWith(""String_Node_Str""))       keyPath=keyPath.substring(1);
      viewableBEsList.add(keyPath);
      commit();
      monitor.worked(1);
    }
    monitor.done();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(parentShell,""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  try {
    monitor.beginTask(""String_Node_Str"",toAddViewableList.size());
    for (Iterator<String> iter=toAddViewableList.iterator(); iter.hasNext(); ) {
      String keyPath=iter.next();
      viewableBEsList.add(keyPath);
      commit();
      monitor.worked(1);
    }
    monitor.done();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(parentShell,""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9288702928870292
146161,"public Object getAppendInfo(String key){
  return appendInfo.get(key);
}","public Object getAppendInfo(String key){
  if (appendInfo == null)   return null;
  return appendInfo.get(key);
}",0.7783783783783784
146162,"protected void provideViwerContent(XSDSchema xsdSchema){
  drillDownAdapter=new DrillDownAdapter(domViewer);
  domViewer.setLabelProvider(new XSDTreeLabelProvider());
  domViewer.setContentProvider(new XSDTreeContentProvider(site,xsdSchema));
  domViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent e){
      StructuredSelection sel=(StructuredSelection)e.getSelection();
      xpath=getXpath(sel);
      xpathText.setText(xpath);
    }
  }
);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true));
  domViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDFacet)       return 100;
      if (element instanceof XSDIdentityConstraintDefinition) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)element;
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL))         return 300;
 else         if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.KEY_LITERAL))         return 301;
 else         return 302;
      }
      return 200;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  domViewer.setInput(site);
}","protected void provideViwerContent(XSDSchema xsdSchema){
  drillDownAdapter=new DrillDownAdapter(domViewer);
  domViewer.setLabelProvider(new XSDTreeLabelProvider());
  domViewer.setContentProvider(new XPathTreeContentProvider(site,xsdSchema));
  domViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent e){
      StructuredSelection sel=(StructuredSelection)e.getSelection();
      xpath=getXpath(sel);
      xpathText.setText(xpath);
    }
  }
);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true));
  domViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDFacet)       return 100;
      if (element instanceof XSDIdentityConstraintDefinition) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)element;
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL))         return 300;
 else         if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.KEY_LITERAL))         return 301;
 else         return 302;
      }
      return 200;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  domViewer.setInput(site);
}",0.997863247863248
146163,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  TreeParent grantTreeParent=this.parent.getParent();
  TreeParent tree=grantTreeParent.findServerFolder(TreeObject.DATA_MODEL);
  TreeObject[] trees=tree.getChildren();
  TreeObject treeobject;
  for (int i=0; i < trees.length; i++) {
    treeobject=trees[i];
    String treeName=treeobject.getDisplayName();
    dataModelCombo.add(treeName);
  }
  final TreeParent pObject=tree;
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      String modelDisplay=dataModelCombo.getText();
      XpathSelectDialog.this.selectedDataModelName=modelDisplay;
      xobject=pObject.findObject(TreeObject.DATA_MODEL,modelDisplay);
      XtentisPort port=null;
      try {
        port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
      }
 catch (      MalformedURLException e3) {
        e3.printStackTrace();
      }
catch (      XtentisException e3) {
        e3.printStackTrace();
      }
      WSDataModel wsDataModel=null;
      try {
        wsDataModel=port.getDataModel(new WSGetDataModel((WSDataModelPK)xobject.getWsKey()));
      }
 catch (      RemoteException e2) {
        e2.printStackTrace();
      }
      try {
        XSDSchema xsdSchema=getXSDSchema(wsDataModel.getXsdSchema());
        provideViwerContent(xsdSchema);
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=300;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  TreeParent grantTreeParent=this.parent.getParent();
  TreeParent tree=grantTreeParent.findServerFolder(TreeObject.DATA_MODEL);
  TreeObject[] trees=tree.getChildren();
  TreeObject treeobject;
  for (int i=0; i < trees.length; i++) {
    treeobject=trees[i];
    String treeName=treeobject.getDisplayName();
    dataModelCombo.add(treeName);
  }
  final TreeParent pObject=tree;
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      String modelDisplay=dataModelCombo.getText();
      XpathSelectDialog.this.selectedDataModelName=modelDisplay;
      xobject=pObject.findObject(TreeObject.DATA_MODEL,modelDisplay);
      XtentisPort port=null;
      try {
        port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
      }
 catch (      MalformedURLException e3) {
        e3.printStackTrace();
      }
catch (      XtentisException e3) {
        e3.printStackTrace();
      }
      WSDataModel wsDataModel=null;
      try {
        wsDataModel=port.getDataModel(new WSGetDataModel((WSDataModelPK)xobject.getWsKey()));
      }
 catch (      RemoteException e2) {
        e2.printStackTrace();
      }
      try {
        XSDSchema xsdSchema=getXSDSchema(wsDataModel.getXsdSchema());
        provideViwerContent(xsdSchema);
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}",0.9996725605762934
146164,"protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(newConceptAction);
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=false;
    EList l=decl.getIdentityConstraintDefinitions();
    for (Iterator iter=l.iterator(); iter.hasNext(); ) {
      XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
      if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
        isConcept=true;
        break;
      }
    }
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptWrapAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(newConceptAction);
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions(manager);
  }
  if (obj instanceof XSDParticle) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newGroupFromParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation) {
    setAnnotationActions(manager);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(newConceptAction);
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=false;
    EList l=decl.getIdentityConstraintDefinitions();
    for (Iterator iter=l.iterator(); iter.hasNext(); ) {
      XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
      if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
        isConcept=true;
        break;
      }
    }
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptWrapAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(newConceptAction);
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions2(manager);
  }
  if (obj instanceof XSDParticle) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newGroupFromParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation) {
    setAnnotationActions(manager);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}",0.9933142311365808
146165,"public String getForeignKeyList(int start,int limit,String value,String xpathForeignKey,String xpathInfoForeignKey) throws RemoteException, Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + xpathForeignKey + ""String_Node_Str""+ xpathInfoForeignKey+ ""String_Node_Str""+ value+ ""String_Node_Str"");
  Configuration config=Configuration.getInstance();
  if (xpathForeignKey.split(""String_Node_Str"").length == 1) {
    String conceptName=xpathForeignKey;
    String[] xpathInfos=new String[0];
    if (!""String_Node_Str"".equals(xpathInfoForeignKey))     xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    String filteredConcept=conceptName;
    if (value != null && !""String_Node_Str"".equals(value.trim())) {
      filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    }
    ArrayList<String> xPaths=new ArrayList<String>();
    for (int i=0; i < xpathInfos.length; i++) {
      xPaths.add(xpathInfos[i].replaceFirst(conceptName,filteredConcept));
    }
    xPaths.add(filteredConcept + ""String_Node_Str"");
    String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),filteredConcept,new WSStringArray(xPaths.toArray(new String[xPaths.size()])),null,-1,start,limit,null,null)).getStrings();
    if (results == null)     results=new String[0];
    JSONObject json=new JSONObject();
    json.put(""String_Node_Str"",results.length);
    JSONArray rows=new JSONArray();
    json.put(""String_Node_Str"",rows);
    for (int i=0; i < results.length; i++) {
      Element root=Util.parse(results[i]).getDocumentElement();
      NodeList list=root.getChildNodes();
      String keys=""String_Node_Str"";
      for (int j=xpathInfos.length; j < list.getLength(); j++) {
        Node textNode=list.item(j).getFirstChild();
        keys+=""String_Node_Str"" + (textNode == null ? ""String_Node_Str"" : textNode.getNodeValue()) + ""String_Node_Str"";
      }
      String infos=null;
      if (xpathInfos.length == 0) {
        infos=keys;
      }
 else {
        for (int j=0; j < xpathInfos.length; j++) {
          infos=(infos == null ? ""String_Node_Str"" : infos + ""String_Node_Str"");
          Node textNode=list.item(j).getFirstChild();
          infos+=textNode == null ? ""String_Node_Str"" : textNode.getNodeValue();
        }
      }
      JSONObject row=new JSONObject();
      row.put(""String_Node_Str"",keys);
      row.put(""String_Node_Str"",infos);
      rows.put(row);
    }
    return json.toString();
  }
  String[] xpaths=null;
  if (!""String_Node_Str"".equals(xpathInfoForeignKey)) {
    String[] xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    xpaths=new String[xpathInfos.length + 1];
    xpaths[0]=xpathForeignKey;
    System.arraycopy(xpathInfos,0,xpaths,1,xpathInfos.length);
  }
 else {
    xpaths=new String[1];
    xpaths[0]=xpathForeignKey;
  }
  String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),xpathForeignKey,new WSStringArray(xpaths),null,-1,0,Integer.MAX_VALUE,null,null)).getStrings();
  if (results == null)   results=new String[0];
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",results.length);
  JSONArray rows=new JSONArray();
  json.put(""String_Node_Str"",rows);
  for (int i=0; i < results.length; i++) {
    if (results[i] != null) {
      Document d=Util.parse(results[i]);
      String tmp=""String_Node_Str"";
      for (int j=0; j < xpaths.length; j++) {
        tmp+=""String_Node_Str"" + Util.getFirstTextNode(d,""String_Node_Str"" + xpaths[j].split(""String_Node_Str"")[xpaths[j].split(""String_Node_Str"").length - 1]);
      }
      if (Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]) != null) {
        String keys=Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]);
        String infos=tmp.substring(3);
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
    }
  }
  return json.toString();
}","public String getForeignKeyList(int start,int limit,String value,String xpathForeignKey,String xpathInfoForeignKey) throws RemoteException, Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + xpathForeignKey + ""String_Node_Str""+ xpathInfoForeignKey+ ""String_Node_Str""+ value+ ""String_Node_Str"");
  Configuration config=Configuration.getInstance();
  if (xpathForeignKey.split(""String_Node_Str"").length == 1) {
    String conceptName=xpathForeignKey;
    String[] xpathInfos=new String[0];
    if (!""String_Node_Str"".equals(xpathInfoForeignKey))     xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    String filteredConcept=conceptName;
    if (value != null && !""String_Node_Str"".equals(value.trim())) {
      filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    }
    ArrayList<String> xPaths=new ArrayList<String>();
    for (int i=0; i < xpathInfos.length; i++) {
      xPaths.add(xpathInfos[i].replaceFirst(conceptName,filteredConcept));
    }
    xPaths.add(filteredConcept + ""String_Node_Str"");
    String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),filteredConcept,new WSStringArray(xPaths.toArray(new String[xPaths.size()])),null,-1,start,limit,null,null)).getStrings();
    if (results == null)     results=new String[0];
    JSONObject json=new JSONObject();
    json.put(""String_Node_Str"",results.length);
    JSONArray rows=new JSONArray();
    json.put(""String_Node_Str"",rows);
    for (int i=0; i < results.length; i++) {
      Element root=Util.parse(results[i]).getDocumentElement();
      NodeList list=root.getChildNodes();
      String keys=""String_Node_Str"";
      for (int j=xpathInfos.length; j < list.getLength(); j++) {
        Node textNode=list.item(j).getFirstChild();
        keys+=""String_Node_Str"" + (textNode == null ? ""String_Node_Str"" : textNode.getNodeValue()) + ""String_Node_Str"";
      }
      String infos=null;
      if (xpathInfos.length == 0) {
        infos=keys;
      }
 else {
        for (int j=0; j < xpathInfos.length; j++) {
          infos=(infos == null ? ""String_Node_Str"" : infos + ""String_Node_Str"");
          Node textNode=list.item(j).getFirstChild();
          infos+=textNode == null ? ""String_Node_Str"" : textNode.getNodeValue();
        }
      }
      JSONObject row=new JSONObject();
      row.put(""String_Node_Str"",keys);
      row.put(""String_Node_Str"",infos);
      rows.put(row);
    }
    return json.toString();
  }
  String[] xpaths=null;
  if (!""String_Node_Str"".equals(xpathInfoForeignKey)) {
    String[] xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    xpaths=new String[xpathInfos.length + 1];
    xpaths[0]=xpathForeignKey;
    System.arraycopy(xpathInfos,0,xpaths,1,xpathInfos.length);
  }
 else {
    xpaths=new String[1];
    xpaths[0]=xpathForeignKey;
  }
  for (int i=0; i < xpaths.length; i++) {
    String xpath=xpaths[i];
    int pos=xpath.indexOf(""String_Node_Str"");
    String conceptName=xpath.substring(0,pos);
    String left=xpath.substring(pos);
    String filteredConcept=conceptName;
    filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    xpath=filteredConcept + left;
    xpaths[i]=xpath;
  }
  String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),xpaths[0],new WSStringArray(xpaths),null,-1,0,Integer.MAX_VALUE,null,null)).getStrings();
  if (results == null)   results=new String[0];
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",results.length);
  JSONArray rows=new JSONArray();
  json.put(""String_Node_Str"",rows);
  for (int i=0; i < results.length; i++) {
    if (results[i] != null) {
      Document d=Util.parse(results[i]);
      String tmp=""String_Node_Str"";
      for (int j=0; j < xpaths.length; j++) {
        tmp+=""String_Node_Str"" + Util.getFirstTextNode(d,""String_Node_Str"" + xpaths[j].split(""String_Node_Str"")[xpaths[j].split(""String_Node_Str"").length - 1]);
      }
      if (Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]) != null) {
        String keys=Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]);
        String infos=tmp.substring(3);
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
    }
  }
  return json.toString();
}",0.9562428407789232
146166,"protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(newConceptAction);
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=false;
    EList l=decl.getIdentityConstraintDefinitions();
    for (Iterator iter=l.iterator(); iter.hasNext(); ) {
      XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
      if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
        isConcept=true;
        break;
      }
    }
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptWrapAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(newConceptAction);
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions(manager);
  }
  if (obj instanceof XSDParticle) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newGroupFromParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation) {
    setAnnotationActions(manager);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(newConceptAction);
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=false;
    EList l=decl.getIdentityConstraintDefinitions();
    for (Iterator iter=l.iterator(); iter.hasNext(); ) {
      XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
      if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
        isConcept=true;
        break;
      }
    }
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptWrapAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(newConceptAction);
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions2(manager);
  }
  if (obj instanceof XSDParticle) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newGroupFromParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation) {
    setAnnotationActions(manager);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}",0.9933142311365808
146167,"public String getForeignKeyList(int start,int limit,String value,String xpathForeignKey,String xpathInfoForeignKey) throws RemoteException, Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + xpathForeignKey + ""String_Node_Str""+ xpathInfoForeignKey+ ""String_Node_Str""+ value+ ""String_Node_Str"");
  Configuration config=Configuration.getInstance();
  if (xpathForeignKey.split(""String_Node_Str"").length == 1) {
    String conceptName=xpathForeignKey;
    String[] xpathInfos=new String[0];
    if (!""String_Node_Str"".equals(xpathInfoForeignKey))     xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    String filteredConcept=conceptName;
    if (value != null && !""String_Node_Str"".equals(value.trim())) {
      filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    }
    ArrayList<String> xPaths=new ArrayList<String>();
    for (int i=0; i < xpathInfos.length; i++) {
      xPaths.add(xpathInfos[i].replaceFirst(conceptName,filteredConcept));
    }
    xPaths.add(filteredConcept + ""String_Node_Str"");
    String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),filteredConcept,new WSStringArray(xPaths.toArray(new String[xPaths.size()])),null,-1,start,limit,null,null)).getStrings();
    if (results == null)     results=new String[0];
    JSONObject json=new JSONObject();
    json.put(""String_Node_Str"",results.length);
    JSONArray rows=new JSONArray();
    json.put(""String_Node_Str"",rows);
    for (int i=0; i < results.length; i++) {
      Element root=Util.parse(results[i]).getDocumentElement();
      NodeList list=root.getChildNodes();
      String keys=""String_Node_Str"";
      for (int j=xpathInfos.length; j < list.getLength(); j++) {
        Node textNode=list.item(j).getFirstChild();
        keys+=""String_Node_Str"" + (textNode == null ? ""String_Node_Str"" : textNode.getNodeValue()) + ""String_Node_Str"";
      }
      String infos=null;
      if (xpathInfos.length == 0) {
        infos=keys;
      }
 else {
        for (int j=0; j < xpathInfos.length; j++) {
          infos=(infos == null ? ""String_Node_Str"" : infos + ""String_Node_Str"");
          Node textNode=list.item(j).getFirstChild();
          infos+=textNode == null ? ""String_Node_Str"" : textNode.getNodeValue();
        }
      }
      JSONObject row=new JSONObject();
      row.put(""String_Node_Str"",keys);
      row.put(""String_Node_Str"",infos);
      rows.put(row);
    }
    return json.toString();
  }
  String[] xpaths=null;
  if (!""String_Node_Str"".equals(xpathInfoForeignKey)) {
    String[] xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    xpaths=new String[xpathInfos.length + 1];
    xpaths[0]=xpathForeignKey;
    System.arraycopy(xpathInfos,0,xpaths,1,xpathInfos.length);
  }
 else {
    xpaths=new String[1];
    xpaths[0]=xpathForeignKey;
  }
  String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),xpathForeignKey,new WSStringArray(xpaths),null,-1,0,Integer.MAX_VALUE,null,null)).getStrings();
  if (results == null)   results=new String[0];
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",results.length);
  JSONArray rows=new JSONArray();
  json.put(""String_Node_Str"",rows);
  for (int i=0; i < results.length; i++) {
    if (results[i] != null) {
      Document d=Util.parse(results[i]);
      String tmp=""String_Node_Str"";
      for (int j=0; j < xpaths.length; j++) {
        tmp+=""String_Node_Str"" + Util.getFirstTextNode(d,""String_Node_Str"" + xpaths[j].split(""String_Node_Str"")[xpaths[j].split(""String_Node_Str"").length - 1]);
      }
      if (Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]) != null) {
        String keys=Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]);
        String infos=tmp.substring(3);
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
    }
  }
  return json.toString();
}","public String getForeignKeyList(int start,int limit,String value,String xpathForeignKey,String xpathInfoForeignKey) throws RemoteException, Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + xpathForeignKey + ""String_Node_Str""+ xpathInfoForeignKey+ ""String_Node_Str""+ value+ ""String_Node_Str"");
  Configuration config=Configuration.getInstance();
  if (xpathForeignKey.split(""String_Node_Str"").length == 1) {
    String conceptName=xpathForeignKey;
    String[] xpathInfos=new String[0];
    if (!""String_Node_Str"".equals(xpathInfoForeignKey))     xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    String filteredConcept=conceptName;
    if (value != null && !""String_Node_Str"".equals(value.trim())) {
      filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    }
    ArrayList<String> xPaths=new ArrayList<String>();
    for (int i=0; i < xpathInfos.length; i++) {
      xPaths.add(xpathInfos[i].replaceFirst(conceptName,filteredConcept));
    }
    xPaths.add(filteredConcept + ""String_Node_Str"");
    String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),filteredConcept,new WSStringArray(xPaths.toArray(new String[xPaths.size()])),null,-1,start,limit,null,null)).getStrings();
    if (results == null)     results=new String[0];
    JSONObject json=new JSONObject();
    json.put(""String_Node_Str"",results.length);
    JSONArray rows=new JSONArray();
    json.put(""String_Node_Str"",rows);
    for (int i=0; i < results.length; i++) {
      Element root=Util.parse(results[i]).getDocumentElement();
      NodeList list=root.getChildNodes();
      String keys=""String_Node_Str"";
      for (int j=xpathInfos.length; j < list.getLength(); j++) {
        Node textNode=list.item(j).getFirstChild();
        keys+=""String_Node_Str"" + (textNode == null ? ""String_Node_Str"" : textNode.getNodeValue()) + ""String_Node_Str"";
      }
      String infos=null;
      if (xpathInfos.length == 0) {
        infos=keys;
      }
 else {
        for (int j=0; j < xpathInfos.length; j++) {
          infos=(infos == null ? ""String_Node_Str"" : infos + ""String_Node_Str"");
          Node textNode=list.item(j).getFirstChild();
          infos+=textNode == null ? ""String_Node_Str"" : textNode.getNodeValue();
        }
      }
      JSONObject row=new JSONObject();
      row.put(""String_Node_Str"",keys);
      row.put(""String_Node_Str"",infos);
      rows.put(row);
    }
    return json.toString();
  }
  String[] xpaths=null;
  if (!""String_Node_Str"".equals(xpathInfoForeignKey)) {
    String[] xpathInfos=xpathInfoForeignKey.split(""String_Node_Str"");
    xpaths=new String[xpathInfos.length + 1];
    xpaths[0]=xpathForeignKey;
    System.arraycopy(xpathInfos,0,xpaths,1,xpathInfos.length);
  }
 else {
    xpaths=new String[1];
    xpaths[0]=xpathForeignKey;
  }
  for (int i=0; i < xpaths.length; i++) {
    String xpath=xpaths[i];
    int pos=xpath.indexOf(""String_Node_Str"");
    String conceptName=xpath.substring(0,pos);
    String left=xpath.substring(pos);
    String filteredConcept=conceptName;
    filteredConcept+=""String_Node_Str"" + value + ""String_Node_Str"";
    xpath=filteredConcept + left;
    xpaths[i]=xpath;
  }
  String[] results=Util.getPort().xPathsSearch(new WSXPathsSearch(new WSDataClusterPK(config.getCluster()),xpaths[0],new WSStringArray(xpaths),null,-1,0,Integer.MAX_VALUE,null,null)).getStrings();
  if (results == null)   results=new String[0];
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",results.length);
  JSONArray rows=new JSONArray();
  json.put(""String_Node_Str"",rows);
  for (int i=0; i < results.length; i++) {
    if (results[i] != null) {
      Document d=Util.parse(results[i]);
      String tmp=""String_Node_Str"";
      for (int j=0; j < xpaths.length; j++) {
        tmp+=""String_Node_Str"" + Util.getFirstTextNode(d,""String_Node_Str"" + xpaths[j].split(""String_Node_Str"")[xpaths[j].split(""String_Node_Str"").length - 1]);
      }
      if (Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]) != null) {
        String keys=Util.getFirstTextNode(d,""String_Node_Str"" + xpathForeignKey.split(""String_Node_Str"")[xpathForeignKey.split(""String_Node_Str"").length - 1]);
        String infos=tmp.substring(3);
        JSONObject row=new JSONObject();
        row.put(""String_Node_Str"",keys);
        row.put(""String_Node_Str"",infos);
        rows.put(row);
      }
    }
  }
  return json.toString();
}",0.9562428407789232
146168,"protected void provideViwerContent(XSDSchema xsdSchema){
  drillDownAdapter=new DrillDownAdapter(domViewer);
  domViewer.setLabelProvider(new XSDTreeLabelProvider());
  domViewer.setContentProvider(new XSDTreeContentProvider(site,xsdSchema));
  domViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent e){
      StructuredSelection sel=(StructuredSelection)e.getSelection();
      xpath=getXpath(sel);
      xpathText.setText(xpath);
    }
  }
);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true));
  domViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDFacet)       return 100;
      if (element instanceof XSDIdentityConstraintDefinition) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)element;
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL))         return 300;
 else         if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.KEY_LITERAL))         return 301;
 else         return 302;
      }
      return 200;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  domViewer.setInput(site);
}","protected void provideViwerContent(XSDSchema xsdSchema){
  drillDownAdapter=new DrillDownAdapter(domViewer);
  domViewer.setLabelProvider(new XSDTreeLabelProvider());
  domViewer.setContentProvider(new XPathTreeContentProvider(site,xsdSchema));
  domViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent e){
      StructuredSelection sel=(StructuredSelection)e.getSelection();
      xpath=getXpath(sel);
      xpathText.setText(xpath);
    }
  }
);
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true));
  domViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDFacet)       return 100;
      if (element instanceof XSDIdentityConstraintDefinition) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)element;
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL))         return 300;
 else         if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.KEY_LITERAL))         return 301;
 else         return 302;
      }
      return 200;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  domViewer.setInput(site);
}",0.997863247863248
146169,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  TreeParent grantTreeParent=this.parent.getParent();
  TreeParent tree=grantTreeParent.findServerFolder(TreeObject.DATA_MODEL);
  TreeObject[] trees=tree.getChildren();
  TreeObject treeobject;
  for (int i=0; i < trees.length; i++) {
    treeobject=trees[i];
    String treeName=treeobject.getDisplayName();
    dataModelCombo.add(treeName);
  }
  final TreeParent pObject=tree;
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      String modelDisplay=dataModelCombo.getText();
      XpathSelectDialog.this.selectedDataModelName=modelDisplay;
      xobject=pObject.findObject(TreeObject.DATA_MODEL,modelDisplay);
      XtentisPort port=null;
      try {
        port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
      }
 catch (      MalformedURLException e3) {
        e3.printStackTrace();
      }
catch (      XtentisException e3) {
        e3.printStackTrace();
      }
      WSDataModel wsDataModel=null;
      try {
        wsDataModel=port.getDataModel(new WSGetDataModel((WSDataModelPK)xobject.getWsKey()));
      }
 catch (      RemoteException e2) {
        e2.printStackTrace();
      }
      try {
        XSDSchema xsdSchema=getXSDSchema(wsDataModel.getXsdSchema());
        provideViwerContent(xsdSchema);
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=300;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  TreeParent grantTreeParent=this.parent.getParent();
  TreeParent tree=grantTreeParent.findServerFolder(TreeObject.DATA_MODEL);
  TreeObject[] trees=tree.getChildren();
  TreeObject treeobject;
  for (int i=0; i < trees.length; i++) {
    treeobject=trees[i];
    String treeName=treeobject.getDisplayName();
    dataModelCombo.add(treeName);
  }
  final TreeParent pObject=tree;
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      String modelDisplay=dataModelCombo.getText();
      XpathSelectDialog.this.selectedDataModelName=modelDisplay;
      xobject=pObject.findObject(TreeObject.DATA_MODEL,modelDisplay);
      XtentisPort port=null;
      try {
        port=Util.getPort(new URL(xobject.getEndpointAddress()),xobject.getUniverse(),xobject.getUsername(),xobject.getPassword());
      }
 catch (      MalformedURLException e3) {
        e3.printStackTrace();
      }
catch (      XtentisException e3) {
        e3.printStackTrace();
      }
      WSDataModel wsDataModel=null;
      try {
        wsDataModel=port.getDataModel(new WSGetDataModel((WSDataModelPK)xobject.getWsKey()));
      }
 catch (      RemoteException e2) {
        e2.printStackTrace();
      }
      try {
        XSDSchema xsdSchema=getXSDSchema(wsDataModel.getXsdSchema());
        provideViwerContent(xsdSchema);
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=200;
  return composite;
}",0.9996725605762934
146170,"/** 
 * Generates an xml string from a node with or without the xml declaration  (not pretty formatted)
 * @param n the node
 * @return the xml string
 * @throws TransformerException
 */
public static String nodeToString(Node n,boolean omitXMLDeclaration) throws TransformerException {
  StringWriter sw=new StringWriter();
  Transformer transformer=TransformerFactory.newInstance().newTransformer();
  if (omitXMLDeclaration)   transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
 else   transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  transformer.transform(new DOMSource(n),new StreamResult(sw));
  if (sw == null)   return null;
  return sw.toString();
}","/** 
 * Generates an xml string from a node with or without the xml declaration  (not pretty formatted)
 * @param n the node
 * @return the xml string
 * @throws TransformerException
 */
public static String nodeToString(Node n,boolean omitXMLDeclaration) throws TransformerException {
  StringWriter sw=new StringWriter();
  Transformer transformer=TransformerFactory.newInstance().newTransformer();
  if (omitXMLDeclaration)   transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
 else   transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  transformer.transform(new DOMSource(n),new StreamResult(sw));
  if (sw == null)   return null;
  return sw.toString().replaceAll(""String_Node_Str"",""String_Node_Str"");
}",0.9695817490494296
146171,"public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (this.viewName != null && this.viewName.length() > 0) {
    if (viewName.matches(""String_Node_Str"")) {
      String concept=viewName.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (concept != null && concept.length() > 0 && lastDataModelName != null && lastDataModelName.length() > 0) {
        java.util.List<String> toAddViewableList=new ArrayList<String>();
        WSGetBusinessConceptKey wsGetBusinessConceptKey=new WSGetBusinessConceptKey(new WSDataModelPK(lastDataModelName),concept);
        WSConceptKey wsConceptKey=null;
        try {
          wsConceptKey=Util.getPort(getXObject()).getBusinessConceptKey(wsGetBusinessConceptKey);
        }
 catch (        RemoteException e) {
          e.printStackTrace();
        }
catch (        XtentisException e) {
          e.printStackTrace();
        }
        if (wsConceptKey != null) {
          java.util.List<String> viewableList=new ArrayList<String>();
          for (int i=0; i < viewableBEsList.getItemCount(); i++) {
            viewableList.add(viewableBEsList.getItem(i));
          }
          String[] keys=wsConceptKey.getFields();
          for (int i=0; i < keys.length; i++) {
            if (""String_Node_Str"".equals(wsConceptKey.getSelector()))             keys[i]=""String_Node_Str"" + concept + ""String_Node_Str""+ keys[i];
 else             keys[i]=wsConceptKey.getSelector() + keys[i];
          }
          String[] ids=wsConceptKey.getFields();
          for (int i=0; i < ids.length; i++) {
            if (!viewableList.contains(ids[i])) {
              toAddViewableList.add(ids[i]);
            }
          }
        }
        if (toAddViewableList.size() > 0) {
          String msg=""String_Node_Str"";
          for (Iterator iterator=toAddViewableList.iterator(); iterator.hasNext(); ) {
            String toAddItem=(String)iterator.next();
            msg+=(toAddItem + ""String_Node_Str"");
          }
          msg+=""String_Node_Str"";
          MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",msg);
        }
        IRunnableWithProgress autoFixProcess=new AutoFixProgress(toAddViewableList,viewableBEsList,this.getSite().getShell());
        try {
          new ProgressMonitorDialog(this.getSite().getShell()).run(false,true,autoFixProcess);
        }
 catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
}","public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (this.viewName != null && this.viewName.length() > 0) {
    if (viewName.matches(""String_Node_Str"")) {
      String concept=viewName.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (concept != null && concept.length() > 0 && lastDataModelName != null && lastDataModelName.length() > 0) {
        java.util.List<String> toAddViewableList=new ArrayList<String>();
        WSGetBusinessConceptKey wsGetBusinessConceptKey=new WSGetBusinessConceptKey(new WSDataModelPK(lastDataModelName),concept);
        WSConceptKey wsConceptKey=null;
        try {
          wsConceptKey=Util.getPort(getXObject()).getBusinessConceptKey(wsGetBusinessConceptKey);
        }
 catch (        RemoteException e) {
          e.printStackTrace();
        }
catch (        XtentisException e) {
          e.printStackTrace();
        }
        if (wsConceptKey != null) {
          java.util.List<String> viewableList=new ArrayList<String>();
          for (int i=0; i < viewableBEsList.getItemCount(); i++) {
            viewableList.add(viewableBEsList.getItem(i));
          }
          String[] keys=wsConceptKey.getFields();
          for (int i=0; i < keys.length; i++) {
            if (""String_Node_Str"".equals(wsConceptKey.getSelector()))             keys[i]=""String_Node_Str"" + concept + ""String_Node_Str""+ keys[i];
 else             keys[i]=wsConceptKey.getSelector() + keys[i];
          }
          String[] ids=wsConceptKey.getFields();
          for (int i=0; i < ids.length; i++) {
            String id=ids[i];
            if (id.startsWith(""String_Node_Str"")) {
              id=id.substring(1);
            }
 else             if (id.startsWith(""String_Node_Str"")) {
              id=id.substring(2);
            }
            if (!viewableList.contains(id)) {
              toAddViewableList.add(id);
            }
          }
        }
        if (toAddViewableList.size() > 0) {
          String msg=""String_Node_Str"";
          for (Iterator iterator=toAddViewableList.iterator(); iterator.hasNext(); ) {
            String toAddItem=(String)iterator.next();
            msg+=(toAddItem + ""String_Node_Str"");
          }
          msg+=""String_Node_Str"";
          MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",msg);
        }
        IRunnableWithProgress autoFixProcess=new AutoFixProgress(toAddViewableList,viewableBEsList,this.getSite().getShell());
        try {
          new ProgressMonitorDialog(this.getSite().getShell()).run(false,true,autoFixProcess);
        }
 catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
}",0.9549483013293943
146172,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  try {
    monitor.beginTask(""String_Node_Str"",toAddViewableList.size());
    for (Iterator<String> iter=toAddViewableList.iterator(); iter.hasNext(); ) {
      String keyPath=iter.next();
      if (keyPath.startsWith(""String_Node_Str""))       keyPath=keyPath.substring(1);
      viewableBEsList.add(keyPath);
      commit();
      monitor.worked(1);
    }
    monitor.done();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(parentShell,""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  try {
    monitor.beginTask(""String_Node_Str"",toAddViewableList.size());
    for (Iterator<String> iter=toAddViewableList.iterator(); iter.hasNext(); ) {
      String keyPath=iter.next();
      viewableBEsList.add(keyPath);
      commit();
      monitor.worked(1);
    }
    monitor.done();
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(parentShell,""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9288702928870292
146173,"public Object getAppendInfo(String key){
  return appendInfo.get(key);
}","public Object getAppendInfo(String key){
  if (appendInfo == null)   return null;
  return appendInfo.get(key);
}",0.7783783783783784
146174,"/** 
 * Generates an xml string from a node with or without the xml declaration  (not pretty formatted)
 * @param n the node
 * @return the xml string
 * @throws TransformerException
 */
public static String nodeToString(Node n,boolean omitXMLDeclaration) throws TransformerException {
  StringWriter sw=new StringWriter();
  Transformer transformer=TransformerFactory.newInstance().newTransformer();
  if (omitXMLDeclaration)   transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
 else   transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  transformer.transform(new DOMSource(n),new StreamResult(sw));
  if (sw == null)   return null;
  return sw.toString();
}","/** 
 * Generates an xml string from a node with or without the xml declaration  (not pretty formatted)
 * @param n the node
 * @return the xml string
 * @throws TransformerException
 */
public static String nodeToString(Node n,boolean omitXMLDeclaration) throws TransformerException {
  StringWriter sw=new StringWriter();
  Transformer transformer=TransformerFactory.newInstance().newTransformer();
  if (omitXMLDeclaration)   transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
 else   transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  transformer.transform(new DOMSource(n),new StreamResult(sw));
  if (sw == null)   return null;
  return sw.toString().replaceAll(""String_Node_Str"",""String_Node_Str"");
}",0.9695817490494296
146175,"/** 
 * @param droppedItemPOJOPK
 * @return ItemPOJOPK
 * @throws XtentisException recover dropped item
 */
public static ItemPOJOPK recover(DroppedItemPOJOPK droppedItemPOJOPK) throws XtentisException {
  if (droppedItemPOJOPK == null)   return null;
  ItemPOJOPK refItemPOJOPK=droppedItemPOJOPK.getRefItemPOJOPK();
  String actionName=""String_Node_Str"";
  String userName=rolesFilter(refItemPOJOPK,actionName,""String_Node_Str"");
  universeFilter(refItemPOJOPK);
  String sourceItemRevision=droppedItemPOJOPK.getRevisionId();
  XmlServerSLWrapperLocal server=obtainXmlServerSLWrapperLocal();
  try {
    String partPath=droppedItemPOJOPK.getPartPath();
    if (partPath == null || partPath.length() == 0)     return null;
    StringBuffer getXmlDocument=new StringBuffer();
    if (partPath.equals(""String_Node_Str"")) {
      String doc=server.getDocumentAsString(null,""String_Node_Str"",droppedItemPOJOPK.getUniquePK(),null);
      getXmlDocument.append(doc);
    }
 else {
      String query=""String_Node_Str"" + droppedItemPOJOPK.getUniquePK() + ""String_Node_Str"";
      ArrayList<String> results=server.runQuery(null,""String_Node_Str"",query,null);
      if (results == null || results.size() == 0)       return null;
      for (int i=0; i < results.size(); i++) {
        getXmlDocument.append(results.get(i));
      }
    }
    if (getXmlDocument.toString() == null || getXmlDocument.toString().length() == 0)     return null;
    String bakDoc=""String_Node_Str"";
    if (partPath.equals(""String_Node_Str"")) {
      bakDoc=getXmlDocument.toString();
    }
 else {
      bakDoc=server.getDocumentAsString(sourceItemRevision,refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),refItemPOJOPK.getUniqueID(),null);
    }
    if (partPath.equals(""String_Node_Str"")) {
      DroppedItemPOJO droppedItemPOJO=(DroppedItemPOJO)Unmarshaller.unmarshal(DroppedItemPOJO.class,new InputSource(new StringReader(getXmlDocument.toString())));
      server.putDocumentFromString(droppedItemPOJO.getProjection(),refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
    }
 else {
      Document partDom=Util.parse(getXmlDocument.toString());
      String insertText=partDom.getFirstChild().getTextContent();
      Node inserNode=Util.parse(insertText).getFirstChild();
      if (bakDoc == null)       throw new XtentisException(""String_Node_Str"");
      Document targetDom=Util.parse(bakDoc);
      String xPath=""String_Node_Str"" + parserParentPartPath(partPath);
      Node singleParentNode=null;
      NodeList parentNodeList=Util.getNodeList(targetDom,xPath);
      if (parentNodeList.getLength() > 0) {
        singleParentNode=parentNodeList.item(0);
      }
      if (singleParentNode != null) {
        Node importNode=targetDom.importNode(inserNode,true);
        singleParentNode.appendChild(importNode);
      }
      ItemPOJO itemPOJO=ItemPOJO.parse(bakDoc);
      if (itemPOJO.getDataModelName() != null) {
        DataModelPOJO dataModelPOJO=ObjectPOJO.load(itemPOJO.getDataModelRevision(),DataModelPOJO.class,new DataModelPOJOPK(itemPOJO.getDataModelName()));
        if (dataModelPOJO != null)         Util.validate(targetDom.getDocumentElement(),dataModelPOJO.getSchema());
      }
      server.putDocumentFromString(Util.nodeToString(targetDom),refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
    }
    long res=server.deleteDocument(null,""String_Node_Str"",droppedItemPOJOPK.getUniquePK());
    if (res == -1) {
      if (partPath.equals(""String_Node_Str"")) {
        server.deleteDocument(sourceItemRevision,refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),refItemPOJOPK.getUniqueID());
      }
 else {
        server.putDocumentFromString(bakDoc,refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
      }
    }
    return refItemPOJOPK;
  }
 catch (  SAXException e) {
    String err=""String_Node_Str"" + e.getLocalizedMessage();
    throw new XtentisException(err);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + actionName + ""String_Node_Str""+ droppedItemPOJOPK.getUniquePK()+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(DroppedItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
}","/** 
 * @param droppedItemPOJOPK
 * @return ItemPOJOPK
 * @throws XtentisException recover dropped item
 */
public static ItemPOJOPK recover(DroppedItemPOJOPK droppedItemPOJOPK) throws XtentisException {
  if (droppedItemPOJOPK == null)   return null;
  ItemPOJOPK refItemPOJOPK=droppedItemPOJOPK.getRefItemPOJOPK();
  String actionName=""String_Node_Str"";
  String userName=rolesFilter(refItemPOJOPK,actionName,""String_Node_Str"");
  universeFilter(refItemPOJOPK);
  String sourceItemRevision=droppedItemPOJOPK.getRevisionId();
  XmlServerSLWrapperLocal server=obtainXmlServerSLWrapperLocal();
  try {
    String partPath=droppedItemPOJOPK.getPartPath();
    if (partPath == null || partPath.length() == 0)     return null;
    StringBuffer getXmlDocument=new StringBuffer();
    if (partPath.equals(""String_Node_Str"")) {
      String doc=server.getDocumentAsString(null,""String_Node_Str"",droppedItemPOJOPK.getUniquePK(),null);
      getXmlDocument.append(doc);
    }
 else {
      String query=""String_Node_Str"" + droppedItemPOJOPK.getUniquePK() + ""String_Node_Str"";
      ArrayList<String> results=server.runQuery(null,""String_Node_Str"",query,null);
      if (results == null || results.size() == 0)       return null;
      for (int i=0; i < results.size(); i++) {
        getXmlDocument.append(results.get(i));
      }
    }
    if (getXmlDocument.toString() == null || getXmlDocument.toString().length() == 0)     return null;
    String bakDoc=""String_Node_Str"";
    if (partPath.equals(""String_Node_Str"")) {
      bakDoc=getXmlDocument.toString();
    }
 else {
      bakDoc=server.getDocumentAsString(sourceItemRevision,refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),refItemPOJOPK.getUniqueID(),null);
    }
    if (partPath.equals(""String_Node_Str"")) {
      DroppedItemPOJO droppedItemPOJO=(DroppedItemPOJO)Unmarshaller.unmarshal(DroppedItemPOJO.class,new InputSource(new StringReader(getXmlDocument.toString())));
      server.putDocumentFromString(droppedItemPOJO.getProjection(),refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
    }
 else {
      Document partDom=Util.parse(getXmlDocument.toString());
      String insertText=partDom.getFirstChild().getTextContent();
      Node inserNode=Util.parse(insertText).getFirstChild();
      if (bakDoc == null)       throw new XtentisException(""String_Node_Str"");
      Document targetDom=Util.parse(bakDoc);
      String xPath=""String_Node_Str"" + parserParentPartPath(partPath);
      Node singleParentNode=null;
      NodeList parentNodeList=Util.getNodeList(targetDom,xPath);
      if (parentNodeList.getLength() > 0) {
        singleParentNode=parentNodeList.item(0);
      }
      if (singleParentNode != null) {
        Node importNode=targetDom.importNode(inserNode,true);
        singleParentNode.appendChild(importNode);
      }
      String targetDomXml=Util.nodeToString(targetDom);
      ItemPOJO itemPOJO=ItemPOJO.parse(targetDomXml);
      if (itemPOJO.getDataModelName() != null) {
        DataModelPOJO dataModelPOJO=ObjectPOJO.load(itemPOJO.getDataModelRevision(),DataModelPOJO.class,new DataModelPOJOPK(itemPOJO.getDataModelName()));
        if (dataModelPOJO != null) {
          Element projection=null;
          try {
            projection=itemPOJO.getProjection();
          }
 catch (          Exception e) {
            throw new XtentisException(""String_Node_Str"");
          }
          Util.validate(projection,dataModelPOJO.getSchema());
        }
      }
      server.putDocumentFromString(targetDomXml,refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
    }
    long res=server.deleteDocument(null,""String_Node_Str"",droppedItemPOJOPK.getUniquePK());
    if (res == -1) {
      if (partPath.equals(""String_Node_Str"")) {
        server.deleteDocument(sourceItemRevision,refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),refItemPOJOPK.getUniqueID());
      }
 else {
        server.putDocumentFromString(bakDoc,refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
      }
    }
    return refItemPOJOPK;
  }
 catch (  SAXException e) {
    String err=""String_Node_Str"" + e.getLocalizedMessage();
    throw new XtentisException(err);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + actionName + ""String_Node_Str""+ droppedItemPOJOPK.getUniquePK()+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(DroppedItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
}",0.9497431315613134
146176,"/** 
 * @param itemPOJOPK
 * @param partPath
 * @return DroppedItemPOJOPK
 * @throws XtentisException drop an item to items-trash
 */
public static DroppedItemPOJOPK drop(ItemPOJOPK itemPOJOPK,String partPath) throws XtentisException {
  if (itemPOJOPK == null)   return null;
  if (partPath == null || partPath.equals(""String_Node_Str""))   partPath=""String_Node_Str"";
  boolean authorized=false;
  LocalUser user=LocalUser.getLocalUser();
  if (""String_Node_Str"".equals(user.getUsername()) || LocalUser.UNAUTHENTICATED_USER.equals(user.getUsername())) {
    authorized=true;
  }
 else   if (user.userCanWrite(ItemPOJO.class,itemPOJOPK.getUniqueID())) {
    authorized=true;
  }
  if (!authorized) {
    String err=""String_Node_Str"" + ""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ itemPOJOPK.getUniqueID()+ ""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ObjectPOJO.class).error(err);
    throw new XtentisException(err);
  }
  String userName=user.getUsername();
  UniversePOJO universe=LocalUser.getLocalUser().getUniverse();
  if (universe == null) {
    String err=""String_Node_Str"" + LocalUser.getLocalUser().getUsername() + ""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err);
    throw new XtentisException(err);
  }
  String revisionID=universe.getConceptRevisionID(itemPOJOPK.getConceptName());
  XmlServerSLWrapperLocal server;
  try {
    server=((XmlServerSLWrapperLocalHome)new InitialContext().lookup(XmlServerSLWrapperLocalHome.JNDI_NAME)).create();
  }
 catch (  Exception e) {
    String err=""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
  try {
    if (ObjectPOJO.load(null,DataClusterPOJO.class,new DataClusterPOJOPK(""String_Node_Str"")) == null) {
      DataClusterPOJO dataCluster=new DataClusterPOJO(""String_Node_Str"",""String_Node_Str"",null);
      ObjectPOJOPK pk=dataCluster.store(null);
      if (pk == null)       throw new XtentisException(""String_Node_Str"");
      boolean exist=false;
      String[] clusters=server.getAllClusters(null);
      if (clusters != null) {
        exist=Arrays.asList(clusters).contains(pk.getUniqueId());
      }
      if (!exist)       server.createCluster(null,pk.getUniqueId());
      org.apache.log4j.Logger.getLogger(ItemPOJO.class).info(""String_Node_Str"");
    }
    String dataClusterName=itemPOJOPK.getDataClusterPOJOPK().getUniqueId();
    String uniqueID=getFilename(itemPOJOPK);
    StringBuffer xmlDocument=new StringBuffer();
    Document sourceDoc=null;
    NodeList toDeleteNodeList=null;
    String xml=server.getDocumentAsString(revisionID,dataClusterName,uniqueID,null);
    if (xml == null)     return null;
    if (partPath.equals(""String_Node_Str"")) {
      xmlDocument.append(xml);
    }
 else {
      String xPath=""String_Node_Str"" + partPath;
      sourceDoc=Util.parse(xml);
      toDeleteNodeList=Util.getNodeList(sourceDoc,xPath);
      if (toDeleteNodeList.getLength() == 0)       throw new XtentisException(""String_Node_Str"");
      for (int i=0; i < toDeleteNodeList.getLength(); i++) {
        Node node=toDeleteNodeList.item(i);
        xmlDocument.append(Util.nodeToString(node));
      }
    }
    if (partPath.equals(""String_Node_Str"")) {
    }
 else {
      if (toDeleteNodeList != null) {
        Node lastParentNode=null;
        Node formatSiblingNode=null;
        for (int i=0; i < toDeleteNodeList.getLength(); i++) {
          Node node=toDeleteNodeList.item(i);
          lastParentNode=node.getParentNode();
          formatSiblingNode=node.getNextSibling();
          if (lastParentNode != null) {
            lastParentNode.removeChild(node);
          }
          if (formatSiblingNode != null && formatSiblingNode.getNodeValue() != null && formatSiblingNode.getNodeValue().matches(""String_Node_Str"")) {
            lastParentNode.removeChild(formatSiblingNode);
          }
        }
      }
      String leftSourceDoc=Util.nodeToString(sourceDoc);
      ItemPOJO itemPOJO=parse(leftSourceDoc);
      if (itemPOJO.getDataModelName() != null) {
        DataModelPOJO dataModelPOJO=ObjectPOJO.load(itemPOJO.getDataModelRevision(),DataModelPOJO.class,new DataModelPOJOPK(itemPOJO.getDataModelName()));
        if (dataModelPOJO != null)         Util.validate(sourceDoc.getDocumentElement(),dataModelPOJO.getSchema());
      }
    }
    DroppedItemPOJO droppedItemPOJO=new DroppedItemPOJO(revisionID,itemPOJOPK.getDataClusterPOJOPK(),uniqueID,itemPOJOPK.getConceptName(),itemPOJOPK.getIds(),partPath,xmlDocument.toString(),userName,new Long(System.currentTimeMillis()));
    StringWriter sw=new StringWriter();
    Marshaller.marshal(droppedItemPOJO,sw);
    long res=server.putDocumentFromString(sw.toString(),droppedItemPOJO.obtainDroppedItemPK().getUniquePK(),""String_Node_Str"",null);
    if (res == -1)     return null;
    try {
      if (partPath.equals(""String_Node_Str"")) {
        server.deleteDocument(revisionID,dataClusterName,uniqueID);
      }
 else {
        server.putDocumentFromString(Util.nodeToString(sourceDoc),uniqueID,dataClusterName,revisionID);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      server.deleteDocument(null,""String_Node_Str"",droppedItemPOJO.obtainDroppedItemPK().getUniquePK());
      return null;
    }
    return droppedItemPOJO.obtainDroppedItemPK();
  }
 catch (  SAXException e) {
    String err=""String_Node_Str"" + e.getLocalizedMessage();
    throw new XtentisException(err);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + itemPOJOPK.getUniqueID() + ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
}","/** 
 * @param itemPOJOPK
 * @param partPath
 * @return DroppedItemPOJOPK
 * @throws XtentisException drop an item to items-trash
 */
public static DroppedItemPOJOPK drop(ItemPOJOPK itemPOJOPK,String partPath) throws XtentisException {
  if (itemPOJOPK == null)   return null;
  if (partPath == null || partPath.equals(""String_Node_Str""))   partPath=""String_Node_Str"";
  boolean authorized=false;
  LocalUser user=LocalUser.getLocalUser();
  if (""String_Node_Str"".equals(user.getUsername()) || LocalUser.UNAUTHENTICATED_USER.equals(user.getUsername())) {
    authorized=true;
  }
 else   if (user.userCanWrite(ItemPOJO.class,itemPOJOPK.getUniqueID())) {
    authorized=true;
  }
  if (!authorized) {
    String err=""String_Node_Str"" + ""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ itemPOJOPK.getUniqueID()+ ""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ObjectPOJO.class).error(err);
    throw new XtentisException(err);
  }
  String userName=user.getUsername();
  UniversePOJO universe=LocalUser.getLocalUser().getUniverse();
  if (universe == null) {
    String err=""String_Node_Str"" + LocalUser.getLocalUser().getUsername() + ""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err);
    throw new XtentisException(err);
  }
  String revisionID=universe.getConceptRevisionID(itemPOJOPK.getConceptName());
  XmlServerSLWrapperLocal server;
  try {
    server=((XmlServerSLWrapperLocalHome)new InitialContext().lookup(XmlServerSLWrapperLocalHome.JNDI_NAME)).create();
  }
 catch (  Exception e) {
    String err=""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
  try {
    if (ObjectPOJO.load(null,DataClusterPOJO.class,new DataClusterPOJOPK(""String_Node_Str"")) == null) {
      DataClusterPOJO dataCluster=new DataClusterPOJO(""String_Node_Str"",""String_Node_Str"",null);
      ObjectPOJOPK pk=dataCluster.store(null);
      if (pk == null)       throw new XtentisException(""String_Node_Str"");
      boolean exist=false;
      String[] clusters=server.getAllClusters(null);
      if (clusters != null) {
        exist=Arrays.asList(clusters).contains(pk.getUniqueId());
      }
      if (!exist)       server.createCluster(null,pk.getUniqueId());
      org.apache.log4j.Logger.getLogger(ItemPOJO.class).info(""String_Node_Str"");
    }
    String dataClusterName=itemPOJOPK.getDataClusterPOJOPK().getUniqueId();
    String uniqueID=getFilename(itemPOJOPK);
    StringBuffer xmlDocument=new StringBuffer();
    Document sourceDoc=null;
    NodeList toDeleteNodeList=null;
    String xml=server.getDocumentAsString(revisionID,dataClusterName,uniqueID,null);
    if (xml == null)     return null;
    if (partPath.equals(""String_Node_Str"")) {
      xmlDocument.append(xml);
    }
 else {
      String xPath=""String_Node_Str"" + partPath;
      sourceDoc=Util.parse(xml);
      toDeleteNodeList=Util.getNodeList(sourceDoc,xPath);
      if (toDeleteNodeList.getLength() == 0)       throw new XtentisException(""String_Node_Str"");
      for (int i=0; i < toDeleteNodeList.getLength(); i++) {
        Node node=toDeleteNodeList.item(i);
        xmlDocument.append(Util.nodeToString(node));
      }
    }
    if (partPath.equals(""String_Node_Str"")) {
    }
 else {
      if (toDeleteNodeList != null) {
        Node lastParentNode=null;
        Node formatSiblingNode=null;
        for (int i=0; i < toDeleteNodeList.getLength(); i++) {
          Node node=toDeleteNodeList.item(i);
          lastParentNode=node.getParentNode();
          formatSiblingNode=node.getNextSibling();
          if (lastParentNode != null) {
            lastParentNode.removeChild(node);
          }
          if (formatSiblingNode != null && formatSiblingNode.getNodeValue() != null && formatSiblingNode.getNodeValue().matches(""String_Node_Str"")) {
            lastParentNode.removeChild(formatSiblingNode);
          }
        }
      }
      String leftSourceDoc=Util.nodeToString(sourceDoc);
      ItemPOJO itemPOJO=parse(leftSourceDoc);
      if (itemPOJO.getDataModelName() != null) {
        DataModelPOJO dataModelPOJO=ObjectPOJO.load(itemPOJO.getDataModelRevision(),DataModelPOJO.class,new DataModelPOJOPK(itemPOJO.getDataModelName()));
        if (dataModelPOJO != null) {
          Element projection=null;
          try {
            projection=itemPOJO.getProjection();
          }
 catch (          Exception e) {
            throw new XtentisException(""String_Node_Str"");
          }
          if (projection != null)           Util.validate(itemPOJO.getProjection(),dataModelPOJO.getSchema());
        }
      }
    }
    DroppedItemPOJO droppedItemPOJO=new DroppedItemPOJO(revisionID,itemPOJOPK.getDataClusterPOJOPK(),uniqueID,itemPOJOPK.getConceptName(),itemPOJOPK.getIds(),partPath,xmlDocument.toString(),userName,new Long(System.currentTimeMillis()));
    StringWriter sw=new StringWriter();
    Marshaller.marshal(droppedItemPOJO,sw);
    long res=server.putDocumentFromString(sw.toString(),droppedItemPOJO.obtainDroppedItemPK().getUniquePK(),""String_Node_Str"",null);
    if (res == -1)     return null;
    try {
      if (partPath.equals(""String_Node_Str"")) {
        server.deleteDocument(revisionID,dataClusterName,uniqueID);
      }
 else {
        server.putDocumentFromString(Util.nodeToString(sourceDoc),uniqueID,dataClusterName,revisionID);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      server.deleteDocument(null,""String_Node_Str"",droppedItemPOJO.obtainDroppedItemPK().getUniquePK());
      return null;
    }
    return droppedItemPOJO.obtainDroppedItemPK();
  }
 catch (  SAXException e) {
    String err=""String_Node_Str"" + e.getLocalizedMessage();
    throw new XtentisException(err);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + itemPOJOPK.getUniqueID() + ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
}",0.9733988478481872
146177,"/** 
 * @param droppedItemPOJOPK
 * @return ItemPOJOPK
 * @throws XtentisException recover dropped item
 */
public static ItemPOJOPK recover(DroppedItemPOJOPK droppedItemPOJOPK) throws XtentisException {
  if (droppedItemPOJOPK == null)   return null;
  ItemPOJOPK refItemPOJOPK=droppedItemPOJOPK.getRefItemPOJOPK();
  String actionName=""String_Node_Str"";
  String userName=rolesFilter(refItemPOJOPK,actionName,""String_Node_Str"");
  universeFilter(refItemPOJOPK);
  String sourceItemRevision=droppedItemPOJOPK.getRevisionId();
  XmlServerSLWrapperLocal server=obtainXmlServerSLWrapperLocal();
  try {
    String partPath=droppedItemPOJOPK.getPartPath();
    if (partPath == null || partPath.length() == 0)     return null;
    StringBuffer getXmlDocument=new StringBuffer();
    if (partPath.equals(""String_Node_Str"")) {
      String doc=server.getDocumentAsString(null,""String_Node_Str"",droppedItemPOJOPK.getUniquePK(),null);
      getXmlDocument.append(doc);
    }
 else {
      String query=""String_Node_Str"" + droppedItemPOJOPK.getUniquePK() + ""String_Node_Str"";
      ArrayList<String> results=server.runQuery(null,""String_Node_Str"",query,null);
      if (results == null || results.size() == 0)       return null;
      for (int i=0; i < results.size(); i++) {
        getXmlDocument.append(results.get(i));
      }
    }
    if (getXmlDocument.toString() == null || getXmlDocument.toString().length() == 0)     return null;
    String bakDoc=""String_Node_Str"";
    if (partPath.equals(""String_Node_Str"")) {
      bakDoc=getXmlDocument.toString();
    }
 else {
      bakDoc=server.getDocumentAsString(sourceItemRevision,refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),refItemPOJOPK.getUniqueID(),null);
    }
    if (partPath.equals(""String_Node_Str"")) {
      DroppedItemPOJO droppedItemPOJO=(DroppedItemPOJO)Unmarshaller.unmarshal(DroppedItemPOJO.class,new InputSource(new StringReader(getXmlDocument.toString())));
      server.putDocumentFromString(droppedItemPOJO.getProjection(),refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
    }
 else {
      Document partDom=Util.parse(getXmlDocument.toString());
      String insertText=partDom.getFirstChild().getTextContent();
      Node inserNode=Util.parse(insertText).getFirstChild();
      if (bakDoc == null)       throw new XtentisException(""String_Node_Str"");
      Document targetDom=Util.parse(bakDoc);
      String xPath=""String_Node_Str"" + parserParentPartPath(partPath);
      Node singleParentNode=null;
      NodeList parentNodeList=Util.getNodeList(targetDom,xPath);
      if (parentNodeList.getLength() > 0) {
        singleParentNode=parentNodeList.item(0);
      }
      if (singleParentNode != null) {
        Node importNode=targetDom.importNode(inserNode,true);
        singleParentNode.appendChild(importNode);
      }
      ItemPOJO itemPOJO=ItemPOJO.parse(bakDoc);
      if (itemPOJO.getDataModelName() != null) {
        DataModelPOJO dataModelPOJO=ObjectPOJO.load(itemPOJO.getDataModelRevision(),DataModelPOJO.class,new DataModelPOJOPK(itemPOJO.getDataModelName()));
        if (dataModelPOJO != null)         Util.validate(targetDom.getDocumentElement(),dataModelPOJO.getSchema());
      }
      server.putDocumentFromString(Util.nodeToString(targetDom),refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
    }
    long res=server.deleteDocument(null,""String_Node_Str"",droppedItemPOJOPK.getUniquePK());
    if (res == -1) {
      if (partPath.equals(""String_Node_Str"")) {
        server.deleteDocument(sourceItemRevision,refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),refItemPOJOPK.getUniqueID());
      }
 else {
        server.putDocumentFromString(bakDoc,refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
      }
    }
    return refItemPOJOPK;
  }
 catch (  SAXException e) {
    String err=""String_Node_Str"" + e.getLocalizedMessage();
    throw new XtentisException(err);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + actionName + ""String_Node_Str""+ droppedItemPOJOPK.getUniquePK()+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(DroppedItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
}","/** 
 * @param droppedItemPOJOPK
 * @return ItemPOJOPK
 * @throws XtentisException recover dropped item
 */
public static ItemPOJOPK recover(DroppedItemPOJOPK droppedItemPOJOPK) throws XtentisException {
  if (droppedItemPOJOPK == null)   return null;
  ItemPOJOPK refItemPOJOPK=droppedItemPOJOPK.getRefItemPOJOPK();
  String actionName=""String_Node_Str"";
  String userName=rolesFilter(refItemPOJOPK,actionName,""String_Node_Str"");
  universeFilter(refItemPOJOPK);
  String sourceItemRevision=droppedItemPOJOPK.getRevisionId();
  XmlServerSLWrapperLocal server=obtainXmlServerSLWrapperLocal();
  try {
    String partPath=droppedItemPOJOPK.getPartPath();
    if (partPath == null || partPath.length() == 0)     return null;
    StringBuffer getXmlDocument=new StringBuffer();
    if (partPath.equals(""String_Node_Str"")) {
      String doc=server.getDocumentAsString(null,""String_Node_Str"",droppedItemPOJOPK.getUniquePK(),null);
      getXmlDocument.append(doc);
    }
 else {
      String query=""String_Node_Str"" + droppedItemPOJOPK.getUniquePK() + ""String_Node_Str"";
      ArrayList<String> results=server.runQuery(null,""String_Node_Str"",query,null);
      if (results == null || results.size() == 0)       return null;
      for (int i=0; i < results.size(); i++) {
        getXmlDocument.append(results.get(i));
      }
    }
    if (getXmlDocument.toString() == null || getXmlDocument.toString().length() == 0)     return null;
    String bakDoc=""String_Node_Str"";
    if (partPath.equals(""String_Node_Str"")) {
      bakDoc=getXmlDocument.toString();
    }
 else {
      bakDoc=server.getDocumentAsString(sourceItemRevision,refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),refItemPOJOPK.getUniqueID(),null);
    }
    if (partPath.equals(""String_Node_Str"")) {
      DroppedItemPOJO droppedItemPOJO=(DroppedItemPOJO)Unmarshaller.unmarshal(DroppedItemPOJO.class,new InputSource(new StringReader(getXmlDocument.toString())));
      server.putDocumentFromString(droppedItemPOJO.getProjection(),refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
    }
 else {
      Document partDom=Util.parse(getXmlDocument.toString());
      String insertText=partDom.getFirstChild().getTextContent();
      Node inserNode=Util.parse(insertText).getFirstChild();
      if (bakDoc == null)       throw new XtentisException(""String_Node_Str"");
      Document targetDom=Util.parse(bakDoc);
      String xPath=""String_Node_Str"" + parserParentPartPath(partPath);
      Node singleParentNode=null;
      NodeList parentNodeList=Util.getNodeList(targetDom,xPath);
      if (parentNodeList.getLength() > 0) {
        singleParentNode=parentNodeList.item(0);
      }
      if (singleParentNode != null) {
        Node importNode=targetDom.importNode(inserNode,true);
        singleParentNode.appendChild(importNode);
      }
      String targetDomXml=Util.nodeToString(targetDom);
      ItemPOJO itemPOJO=ItemPOJO.parse(targetDomXml);
      if (itemPOJO.getDataModelName() != null) {
        DataModelPOJO dataModelPOJO=ObjectPOJO.load(itemPOJO.getDataModelRevision(),DataModelPOJO.class,new DataModelPOJOPK(itemPOJO.getDataModelName()));
        if (dataModelPOJO != null) {
          Element projection=null;
          try {
            projection=itemPOJO.getProjection();
          }
 catch (          Exception e) {
            throw new XtentisException(""String_Node_Str"");
          }
          Util.validate(projection,dataModelPOJO.getSchema());
        }
      }
      server.putDocumentFromString(targetDomXml,refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
    }
    long res=server.deleteDocument(null,""String_Node_Str"",droppedItemPOJOPK.getUniquePK());
    if (res == -1) {
      if (partPath.equals(""String_Node_Str"")) {
        server.deleteDocument(sourceItemRevision,refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),refItemPOJOPK.getUniqueID());
      }
 else {
        server.putDocumentFromString(bakDoc,refItemPOJOPK.getUniqueID(),refItemPOJOPK.getDataClusterPOJOPK().getUniqueId(),sourceItemRevision);
      }
    }
    return refItemPOJOPK;
  }
 catch (  SAXException e) {
    String err=""String_Node_Str"" + e.getLocalizedMessage();
    throw new XtentisException(err);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + actionName + ""String_Node_Str""+ droppedItemPOJOPK.getUniquePK()+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(DroppedItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
}",0.9497431315613134
146178,"/** 
 * @param itemPOJOPK
 * @param partPath
 * @return DroppedItemPOJOPK
 * @throws XtentisException drop an item to items-trash
 */
public static DroppedItemPOJOPK drop(ItemPOJOPK itemPOJOPK,String partPath) throws XtentisException {
  if (itemPOJOPK == null)   return null;
  if (partPath == null || partPath.equals(""String_Node_Str""))   partPath=""String_Node_Str"";
  boolean authorized=false;
  LocalUser user=LocalUser.getLocalUser();
  if (""String_Node_Str"".equals(user.getUsername()) || LocalUser.UNAUTHENTICATED_USER.equals(user.getUsername())) {
    authorized=true;
  }
 else   if (user.userCanWrite(ItemPOJO.class,itemPOJOPK.getUniqueID())) {
    authorized=true;
  }
  if (!authorized) {
    String err=""String_Node_Str"" + ""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ itemPOJOPK.getUniqueID()+ ""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ObjectPOJO.class).error(err);
    throw new XtentisException(err);
  }
  String userName=user.getUsername();
  UniversePOJO universe=LocalUser.getLocalUser().getUniverse();
  if (universe == null) {
    String err=""String_Node_Str"" + LocalUser.getLocalUser().getUsername() + ""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err);
    throw new XtentisException(err);
  }
  String revisionID=universe.getConceptRevisionID(itemPOJOPK.getConceptName());
  XmlServerSLWrapperLocal server;
  try {
    server=((XmlServerSLWrapperLocalHome)new InitialContext().lookup(XmlServerSLWrapperLocalHome.JNDI_NAME)).create();
  }
 catch (  Exception e) {
    String err=""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
  try {
    if (ObjectPOJO.load(null,DataClusterPOJO.class,new DataClusterPOJOPK(""String_Node_Str"")) == null) {
      DataClusterPOJO dataCluster=new DataClusterPOJO(""String_Node_Str"",""String_Node_Str"",null);
      ObjectPOJOPK pk=dataCluster.store(null);
      if (pk == null)       throw new XtentisException(""String_Node_Str"");
      boolean exist=false;
      String[] clusters=server.getAllClusters(null);
      if (clusters != null) {
        exist=Arrays.asList(clusters).contains(pk.getUniqueId());
      }
      if (!exist)       server.createCluster(null,pk.getUniqueId());
      org.apache.log4j.Logger.getLogger(ItemPOJO.class).info(""String_Node_Str"");
    }
    String dataClusterName=itemPOJOPK.getDataClusterPOJOPK().getUniqueId();
    String uniqueID=getFilename(itemPOJOPK);
    StringBuffer xmlDocument=new StringBuffer();
    Document sourceDoc=null;
    NodeList toDeleteNodeList=null;
    String xml=server.getDocumentAsString(revisionID,dataClusterName,uniqueID,null);
    if (xml == null)     return null;
    if (partPath.equals(""String_Node_Str"")) {
      xmlDocument.append(xml);
    }
 else {
      String xPath=""String_Node_Str"" + partPath;
      sourceDoc=Util.parse(xml);
      toDeleteNodeList=Util.getNodeList(sourceDoc,xPath);
      if (toDeleteNodeList.getLength() == 0)       throw new XtentisException(""String_Node_Str"");
      for (int i=0; i < toDeleteNodeList.getLength(); i++) {
        Node node=toDeleteNodeList.item(i);
        xmlDocument.append(Util.nodeToString(node));
      }
    }
    if (partPath.equals(""String_Node_Str"")) {
    }
 else {
      if (toDeleteNodeList != null) {
        Node lastParentNode=null;
        Node formatSiblingNode=null;
        for (int i=0; i < toDeleteNodeList.getLength(); i++) {
          Node node=toDeleteNodeList.item(i);
          lastParentNode=node.getParentNode();
          formatSiblingNode=node.getNextSibling();
          if (lastParentNode != null) {
            lastParentNode.removeChild(node);
          }
          if (formatSiblingNode != null && formatSiblingNode.getNodeValue() != null && formatSiblingNode.getNodeValue().matches(""String_Node_Str"")) {
            lastParentNode.removeChild(formatSiblingNode);
          }
        }
      }
      String leftSourceDoc=Util.nodeToString(sourceDoc);
      ItemPOJO itemPOJO=parse(leftSourceDoc);
      if (itemPOJO.getDataModelName() != null) {
        DataModelPOJO dataModelPOJO=ObjectPOJO.load(itemPOJO.getDataModelRevision(),DataModelPOJO.class,new DataModelPOJOPK(itemPOJO.getDataModelName()));
        if (dataModelPOJO != null)         Util.validate(sourceDoc.getDocumentElement(),dataModelPOJO.getSchema());
      }
    }
    DroppedItemPOJO droppedItemPOJO=new DroppedItemPOJO(revisionID,itemPOJOPK.getDataClusterPOJOPK(),uniqueID,itemPOJOPK.getConceptName(),itemPOJOPK.getIds(),partPath,xmlDocument.toString(),userName,new Long(System.currentTimeMillis()));
    StringWriter sw=new StringWriter();
    Marshaller.marshal(droppedItemPOJO,sw);
    long res=server.putDocumentFromString(sw.toString(),droppedItemPOJO.obtainDroppedItemPK().getUniquePK(),""String_Node_Str"",null);
    if (res == -1)     return null;
    try {
      if (partPath.equals(""String_Node_Str"")) {
        server.deleteDocument(revisionID,dataClusterName,uniqueID);
      }
 else {
        server.putDocumentFromString(Util.nodeToString(sourceDoc),uniqueID,dataClusterName,revisionID);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      server.deleteDocument(null,""String_Node_Str"",droppedItemPOJO.obtainDroppedItemPK().getUniquePK());
      return null;
    }
    return droppedItemPOJO.obtainDroppedItemPK();
  }
 catch (  SAXException e) {
    String err=""String_Node_Str"" + e.getLocalizedMessage();
    throw new XtentisException(err);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + itemPOJOPK.getUniqueID() + ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
}","/** 
 * @param itemPOJOPK
 * @param partPath
 * @return DroppedItemPOJOPK
 * @throws XtentisException drop an item to items-trash
 */
public static DroppedItemPOJOPK drop(ItemPOJOPK itemPOJOPK,String partPath) throws XtentisException {
  if (itemPOJOPK == null)   return null;
  if (partPath == null || partPath.equals(""String_Node_Str""))   partPath=""String_Node_Str"";
  boolean authorized=false;
  LocalUser user=LocalUser.getLocalUser();
  if (""String_Node_Str"".equals(user.getUsername()) || LocalUser.UNAUTHENTICATED_USER.equals(user.getUsername())) {
    authorized=true;
  }
 else   if (user.userCanWrite(ItemPOJO.class,itemPOJOPK.getUniqueID())) {
    authorized=true;
  }
  if (!authorized) {
    String err=""String_Node_Str"" + ""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ itemPOJOPK.getUniqueID()+ ""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ObjectPOJO.class).error(err);
    throw new XtentisException(err);
  }
  String userName=user.getUsername();
  UniversePOJO universe=LocalUser.getLocalUser().getUniverse();
  if (universe == null) {
    String err=""String_Node_Str"" + LocalUser.getLocalUser().getUsername() + ""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err);
    throw new XtentisException(err);
  }
  String revisionID=universe.getConceptRevisionID(itemPOJOPK.getConceptName());
  XmlServerSLWrapperLocal server;
  try {
    server=((XmlServerSLWrapperLocalHome)new InitialContext().lookup(XmlServerSLWrapperLocalHome.JNDI_NAME)).create();
  }
 catch (  Exception e) {
    String err=""String_Node_Str"";
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
  try {
    if (ObjectPOJO.load(null,DataClusterPOJO.class,new DataClusterPOJOPK(""String_Node_Str"")) == null) {
      DataClusterPOJO dataCluster=new DataClusterPOJO(""String_Node_Str"",""String_Node_Str"",null);
      ObjectPOJOPK pk=dataCluster.store(null);
      if (pk == null)       throw new XtentisException(""String_Node_Str"");
      boolean exist=false;
      String[] clusters=server.getAllClusters(null);
      if (clusters != null) {
        exist=Arrays.asList(clusters).contains(pk.getUniqueId());
      }
      if (!exist)       server.createCluster(null,pk.getUniqueId());
      org.apache.log4j.Logger.getLogger(ItemPOJO.class).info(""String_Node_Str"");
    }
    String dataClusterName=itemPOJOPK.getDataClusterPOJOPK().getUniqueId();
    String uniqueID=getFilename(itemPOJOPK);
    StringBuffer xmlDocument=new StringBuffer();
    Document sourceDoc=null;
    NodeList toDeleteNodeList=null;
    String xml=server.getDocumentAsString(revisionID,dataClusterName,uniqueID,null);
    if (xml == null)     return null;
    if (partPath.equals(""String_Node_Str"")) {
      xmlDocument.append(xml);
    }
 else {
      String xPath=""String_Node_Str"" + partPath;
      sourceDoc=Util.parse(xml);
      toDeleteNodeList=Util.getNodeList(sourceDoc,xPath);
      if (toDeleteNodeList.getLength() == 0)       throw new XtentisException(""String_Node_Str"");
      for (int i=0; i < toDeleteNodeList.getLength(); i++) {
        Node node=toDeleteNodeList.item(i);
        xmlDocument.append(Util.nodeToString(node));
      }
    }
    if (partPath.equals(""String_Node_Str"")) {
    }
 else {
      if (toDeleteNodeList != null) {
        Node lastParentNode=null;
        Node formatSiblingNode=null;
        for (int i=0; i < toDeleteNodeList.getLength(); i++) {
          Node node=toDeleteNodeList.item(i);
          lastParentNode=node.getParentNode();
          formatSiblingNode=node.getNextSibling();
          if (lastParentNode != null) {
            lastParentNode.removeChild(node);
          }
          if (formatSiblingNode != null && formatSiblingNode.getNodeValue() != null && formatSiblingNode.getNodeValue().matches(""String_Node_Str"")) {
            lastParentNode.removeChild(formatSiblingNode);
          }
        }
      }
      String leftSourceDoc=Util.nodeToString(sourceDoc);
      ItemPOJO itemPOJO=parse(leftSourceDoc);
      if (itemPOJO.getDataModelName() != null) {
        DataModelPOJO dataModelPOJO=ObjectPOJO.load(itemPOJO.getDataModelRevision(),DataModelPOJO.class,new DataModelPOJOPK(itemPOJO.getDataModelName()));
        if (dataModelPOJO != null) {
          Element projection=null;
          try {
            projection=itemPOJO.getProjection();
          }
 catch (          Exception e) {
            throw new XtentisException(""String_Node_Str"");
          }
          if (projection != null)           Util.validate(itemPOJO.getProjection(),dataModelPOJO.getSchema());
        }
      }
    }
    DroppedItemPOJO droppedItemPOJO=new DroppedItemPOJO(revisionID,itemPOJOPK.getDataClusterPOJOPK(),uniqueID,itemPOJOPK.getConceptName(),itemPOJOPK.getIds(),partPath,xmlDocument.toString(),userName,new Long(System.currentTimeMillis()));
    StringWriter sw=new StringWriter();
    Marshaller.marshal(droppedItemPOJO,sw);
    long res=server.putDocumentFromString(sw.toString(),droppedItemPOJO.obtainDroppedItemPK().getUniquePK(),""String_Node_Str"",null);
    if (res == -1)     return null;
    try {
      if (partPath.equals(""String_Node_Str"")) {
        server.deleteDocument(revisionID,dataClusterName,uniqueID);
      }
 else {
        server.putDocumentFromString(Util.nodeToString(sourceDoc),uniqueID,dataClusterName,revisionID);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      server.deleteDocument(null,""String_Node_Str"",droppedItemPOJO.obtainDroppedItemPK().getUniquePK());
      return null;
    }
    return droppedItemPOJO.obtainDroppedItemPK();
  }
 catch (  SAXException e) {
    String err=""String_Node_Str"" + e.getLocalizedMessage();
    throw new XtentisException(err);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + itemPOJOPK.getUniqueID() + ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getLocalizedMessage();
    org.apache.log4j.Logger.getLogger(ItemPOJO.class).error(err,e);
    throw new XtentisException(err);
  }
}",0.9733988478481872
146179,"/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,concept + ""String_Node_Str"" + conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9930642006046594
146180,"/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,concept + ""String_Node_Str"" + conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9922388059701492
146181,"/** 
 * Executes a plugin
 * @param globalContext
 * @param pluginNumber
 * @throws XtentisException
 */
protected void executePlugin(TransformerGlobalContext globalContext,int pluginNumber) throws XtentisException {
  TransformerV2POJO transformerPOJO=globalContext.getTransformerPOJO();
  TransformerProcessStep processStep=transformerPOJO.getProcessSteps().get(pluginNumber);
  TransformerPluginContext pluginContext=globalContext.getTransformerPluginContext(pluginNumber);
  HashMap<Integer,TransformerPluginV2LocalInterface> instantiatedPlugins=globalContext.getInstantiatedPlugins();
  String parameters=processStep.getCompiledParameters();
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ processStep.getPluginJNDI());
  TransformerPluginV2LocalInterface plugin=null;
  if ((plugin=instantiatedPlugins.get(new Integer(pluginNumber))) == null) {
    try {
      plugin=getPlugin(processStep.getPluginJNDI());
      plugin.setGlobalContext(globalContext);
      plugin.init(globalContext.getTransformerPluginContext(pluginNumber),parameters);
    }
 catch (    XtentisException e) {
      throw (e);
    }
    instantiatedPlugins.put(new Integer(pluginNumber),plugin);
  }
  try {
    ArrayList<TransformerPluginVariableDescriptor> descriptors=plugin.getInputVariableDescriptors(""String_Node_Str"");
    for (Iterator<TransformerPluginVariableDescriptor> iter=descriptors.iterator(); iter.hasNext(); ) {
      TransformerPluginVariableDescriptor descriptor=iter.next();
      TypedContent content=getMappedInputVariable(descriptor,processStep,globalContext);
      if (content instanceof TypedContent_Do_Not_Process) {
        String msg=""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ globalContext.getTransformerV2POJOPK().getUniqueId()+ ""String_Node_Str""+ ""String_Node_Str""+ descriptor.getVariableName()+ ""String_Node_Str"";
        org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + msg);
        return;
      }
      pluginContext.put(descriptor.getVariableName(),content);
    }
  }
 catch (  XtentisException e) {
    throw (e);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ globalContext.getTransformerV2POJOPK().getUniqueId()+ ""String_Node_Str""+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(""String_Node_Str"" + err);
    throw new XtentisException(err);
  }
  try {
    pluginContext.setPluginCallBack(this);
    plugin.execute(pluginContext);
  }
 catch (  XtentisException e) {
    throw (e);
  }
}","/** 
 * Executes a plugin
 * @param globalContext
 * @param pluginNumber
 * @throws XtentisException
 */
protected void executePlugin(TransformerGlobalContext globalContext,int pluginNumber) throws XtentisException {
  TransformerV2POJO transformerPOJO=globalContext.getTransformerPOJO();
  TransformerProcessStep processStep=transformerPOJO.getProcessSteps().get(pluginNumber);
  TransformerPluginContext pluginContext=globalContext.getTransformerPluginContext(pluginNumber);
  HashMap<Integer,TransformerPluginV2LocalInterface> instantiatedPlugins=globalContext.getInstantiatedPlugins();
  String parameters=processStep.getCompiledParameters();
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ processStep.getPluginJNDI());
  TransformerPluginV2LocalInterface plugin=null;
  if ((plugin=instantiatedPlugins.get(new Integer(pluginNumber))) == null) {
    try {
      plugin=getPlugin(processStep.getPluginJNDI());
      plugin.setGlobalContext(globalContext);
      plugin.init(globalContext.getTransformerPluginContext(pluginNumber),parameters);
    }
 catch (    XtentisException e) {
      throw (e);
    }
    instantiatedPlugins.put(new Integer(pluginNumber),plugin);
  }
  try {
    ArrayList<TransformerPluginVariableDescriptor> descriptors=plugin.getInputVariableDescriptors(""String_Node_Str"");
    for (Iterator<TransformerPluginVariableDescriptor> iter=descriptors.iterator(); iter.hasNext(); ) {
      TransformerPluginVariableDescriptor descriptor=iter.next();
      TypedContent content=getMappedInputVariable(descriptor,processStep,globalContext);
      if (content instanceof TypedContent_Do_Not_Process) {
        String msg=""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ globalContext.getTransformerV2POJOPK().getUniqueId()+ ""String_Node_Str""+ ""String_Node_Str""+ descriptor.getVariableName()+ ""String_Node_Str"";
        org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + msg);
        return;
      }
      pluginContext.put(descriptor.getVariableName(),content);
    }
  }
 catch (  XtentisException e) {
    throw (e);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ globalContext.getTransformerV2POJOPK().getUniqueId()+ ""String_Node_Str""+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(""String_Node_Str"" + err);
    throw new XtentisException(err);
  }
  try {
    pluginContext.setPluginCallBack(this);
    if (!processStep.isDisabled()) {
      plugin.execute(pluginContext);
    }
 else {
      pluginContext.getPluginCallBack().contentIsReady(pluginContext);
    }
  }
 catch (  XtentisException e) {
    throw (e);
  }
}",0.976508854354897
146182,"public void setProcessStep(WSTransformerProcessStep processStep,int index){
  this.processStep=processStep;
  availableVariables.clear();
  for (int i=0; i <= index; i++) {
    for (    WSTransformerVariablesMapping mapping : transformer.getProcessSteps()[i].getInputMappings()) {
      availableVariables.add(mapping.getPipelineVariable() == null ? DEFAULT_VAR : mapping.getPipelineVariable());
    }
    for (    WSTransformerVariablesMapping mapping : transformer.getProcessSteps()[i].getOutputMappings()) {
      availableVariables.add(mapping.getPipelineVariable() == null ? DEFAULT_VAR : mapping.getPipelineVariable());
    }
  }
  refreshViewers();
  refreshCombo();
}","public void setProcessStep(WSTransformerProcessStep processStep,int index){
  this.processStep=processStep;
  availableVariables.clear();
  for (int i=0; i <= index; i++) {
    if (transformer.getProcessSteps()[i].getDisabled())     continue;
    for (    WSTransformerVariablesMapping mapping : transformer.getProcessSteps()[i].getInputMappings()) {
      availableVariables.add(mapping.getPipelineVariable() == null ? DEFAULT_VAR : mapping.getPipelineVariable());
    }
    for (    WSTransformerVariablesMapping mapping : transformer.getProcessSteps()[i].getOutputMappings()) {
      availableVariables.add(mapping.getPipelineVariable() == null ? DEFAULT_VAR : mapping.getPipelineVariable());
    }
  }
  refreshViewers();
  refreshCombo();
}",0.9507042253521126
146183,"/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,concept + ""String_Node_Str"" + conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * /
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    Util.getDataClusterCtrlLocal().getDataCluster(dcpk).addToVocabulary(projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  XtentisException e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9930642006046594
146184,"/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,concept + ""String_Node_Str"" + conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}","/** 
 * Put Item
 */
public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
  try {
    String projection=wsPutItem.getXmlString();
    Element root=Util.parse(projection).getDocumentElement();
    String concept=root.getLocalName();
    DataModelPOJO dataModel=com.amalto.core.util.Util.getDataModelCtrlLocal().getDataModel(new DataModelPOJOPK(wsPutItem.getWsDataModelPK().getPk()));
    Document schema=Util.parse(dataModel.getSchema());
    XSDKey conceptKey=com.amalto.core.util.Util.getBusinessConceptKey(schema,concept);
    String[] itemKeyValues=com.amalto.core.util.Util.getKeyValuesFromItem(root,conceptKey);
    if (conceptKey.getFields().length == 1) {
      Element conceptRoot=Util.parse(projection).getDocumentElement();
      if (Util.getNodeList(conceptRoot,""String_Node_Str"" + concept + ""String_Node_Str""+ conceptKey.getFields()[0]).getLength() == 0) {
        Element rootNS=Util.getRootElement(""String_Node_Str"",schema.getDocumentElement().getNamespaceURI(),""String_Node_Str"");
        NodeList complexLists=Util.getNodeList(schema.getDocumentElement(),""String_Node_Str"",rootNS.getNamespaceURI(),""String_Node_Str"");
        List<UUIDKey> keys=new ArrayList<UUIDKey>();
        for (int i=0; i < complexLists.getLength(); i++) {
          Element element=(Element)complexLists.item(i);
          UUIDKey uuidKey=Util.getUUIDKey(element);
          if (uuidKey != null) {
            keys.add(uuidKey);
            if (i == 0) {
              itemKeyValues=new String[]{uuidKey.getUuidValue()};
            }
          }
        }
        if (keys.size() > 0) {
          projection=Util.getProjectXMLString(keys.toArray(new UUIDKey[keys.size()]),projection);
        }
      }
    }
    DataClusterPOJOPK dcpk=new DataClusterPOJOPK(wsPutItem.getWsDataClusterPK().getPk());
    ItemPOJOPK itemPOJOPK=com.amalto.core.util.Util.getItemCtrl2Local().putItem(new ItemPOJO(dcpk,concept,itemKeyValues,System.currentTimeMillis(),projection),dataModel);
    if (itemPOJOPK == null)     return null;
    com.amalto.core.util.Util.getDataClusterCtrlLocal().addToVocabulary(dcpk,projection);
    return new WSItemPK(new WSDataClusterPK(itemPOJOPK.getDataClusterPOJOPK().getUniqueId()),itemPOJOPK.getConceptName(),itemPOJOPK.getIds());
  }
 catch (  com.amalto.core.util.XtentisException e) {
    throw (new RemoteException(e.getLocalizedMessage()));
  }
catch (  Exception e) {
    throw new RemoteException((e.getCause() == null ? e.getLocalizedMessage() : e.getCause().getLocalizedMessage()));
  }
}",0.9922388059701492
146185,"/** 
 * Executes a plugin
 * @param globalContext
 * @param pluginNumber
 * @throws XtentisException
 */
protected void executePlugin(TransformerGlobalContext globalContext,int pluginNumber) throws XtentisException {
  TransformerV2POJO transformerPOJO=globalContext.getTransformerPOJO();
  TransformerProcessStep processStep=transformerPOJO.getProcessSteps().get(pluginNumber);
  TransformerPluginContext pluginContext=globalContext.getTransformerPluginContext(pluginNumber);
  HashMap<Integer,TransformerPluginV2LocalInterface> instantiatedPlugins=globalContext.getInstantiatedPlugins();
  String parameters=processStep.getCompiledParameters();
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ processStep.getPluginJNDI());
  TransformerPluginV2LocalInterface plugin=null;
  if ((plugin=instantiatedPlugins.get(new Integer(pluginNumber))) == null) {
    try {
      plugin=getPlugin(processStep.getPluginJNDI());
      plugin.setGlobalContext(globalContext);
      plugin.init(globalContext.getTransformerPluginContext(pluginNumber),parameters);
    }
 catch (    XtentisException e) {
      throw (e);
    }
    instantiatedPlugins.put(new Integer(pluginNumber),plugin);
  }
  try {
    ArrayList<TransformerPluginVariableDescriptor> descriptors=plugin.getInputVariableDescriptors(""String_Node_Str"");
    for (Iterator<TransformerPluginVariableDescriptor> iter=descriptors.iterator(); iter.hasNext(); ) {
      TransformerPluginVariableDescriptor descriptor=iter.next();
      TypedContent content=getMappedInputVariable(descriptor,processStep,globalContext);
      if (content instanceof TypedContent_Do_Not_Process) {
        String msg=""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ globalContext.getTransformerV2POJOPK().getUniqueId()+ ""String_Node_Str""+ ""String_Node_Str""+ descriptor.getVariableName()+ ""String_Node_Str"";
        org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + msg);
        return;
      }
      pluginContext.put(descriptor.getVariableName(),content);
    }
  }
 catch (  XtentisException e) {
    throw (e);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ globalContext.getTransformerV2POJOPK().getUniqueId()+ ""String_Node_Str""+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(""String_Node_Str"" + err);
    throw new XtentisException(err);
  }
  try {
    pluginContext.setPluginCallBack(this);
    plugin.execute(pluginContext);
  }
 catch (  XtentisException e) {
    throw (e);
  }
}","/** 
 * Executes a plugin
 * @param globalContext
 * @param pluginNumber
 * @throws XtentisException
 */
protected void executePlugin(TransformerGlobalContext globalContext,int pluginNumber) throws XtentisException {
  TransformerV2POJO transformerPOJO=globalContext.getTransformerPOJO();
  TransformerProcessStep processStep=transformerPOJO.getProcessSteps().get(pluginNumber);
  TransformerPluginContext pluginContext=globalContext.getTransformerPluginContext(pluginNumber);
  HashMap<Integer,TransformerPluginV2LocalInterface> instantiatedPlugins=globalContext.getInstantiatedPlugins();
  String parameters=processStep.getCompiledParameters();
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ processStep.getPluginJNDI());
  TransformerPluginV2LocalInterface plugin=null;
  if ((plugin=instantiatedPlugins.get(new Integer(pluginNumber))) == null) {
    try {
      plugin=getPlugin(processStep.getPluginJNDI());
      plugin.setGlobalContext(globalContext);
      plugin.init(globalContext.getTransformerPluginContext(pluginNumber),parameters);
    }
 catch (    XtentisException e) {
      throw (e);
    }
    instantiatedPlugins.put(new Integer(pluginNumber),plugin);
  }
  try {
    ArrayList<TransformerPluginVariableDescriptor> descriptors=plugin.getInputVariableDescriptors(""String_Node_Str"");
    for (Iterator<TransformerPluginVariableDescriptor> iter=descriptors.iterator(); iter.hasNext(); ) {
      TransformerPluginVariableDescriptor descriptor=iter.next();
      TypedContent content=getMappedInputVariable(descriptor,processStep,globalContext);
      if (content instanceof TypedContent_Do_Not_Process) {
        String msg=""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ globalContext.getTransformerV2POJOPK().getUniqueId()+ ""String_Node_Str""+ ""String_Node_Str""+ descriptor.getVariableName()+ ""String_Node_Str"";
        org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + msg);
        return;
      }
      pluginContext.put(descriptor.getVariableName(),content);
    }
  }
 catch (  XtentisException e) {
    throw (e);
  }
catch (  Exception e) {
    String err=""String_Node_Str"" + processStep.getDescription() + ""String_Node_Str""+ globalContext.getTransformerV2POJOPK().getUniqueId()+ ""String_Node_Str""+ ""String_Node_Str""+ e.getClass().getName()+ ""String_Node_Str""+ e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).error(""String_Node_Str"" + err);
    throw new XtentisException(err);
  }
  try {
    pluginContext.setPluginCallBack(this);
    if (!processStep.isDisabled()) {
      plugin.execute(pluginContext);
    }
 else {
      pluginContext.getPluginCallBack().contentIsReady(pluginContext);
    }
  }
 catch (  XtentisException e) {
    throw (e);
  }
}",0.976508854354897
146186,"public void setProcessStep(WSTransformerProcessStep processStep,int index){
  this.processStep=processStep;
  availableVariables.clear();
  for (int i=0; i <= index; i++) {
    for (    WSTransformerVariablesMapping mapping : transformer.getProcessSteps()[i].getInputMappings()) {
      availableVariables.add(mapping.getPipelineVariable() == null ? DEFAULT_VAR : mapping.getPipelineVariable());
    }
    for (    WSTransformerVariablesMapping mapping : transformer.getProcessSteps()[i].getOutputMappings()) {
      availableVariables.add(mapping.getPipelineVariable() == null ? DEFAULT_VAR : mapping.getPipelineVariable());
    }
  }
  refreshViewers();
  refreshCombo();
}","public void setProcessStep(WSTransformerProcessStep processStep,int index){
  this.processStep=processStep;
  availableVariables.clear();
  for (int i=0; i <= index; i++) {
    if (transformer.getProcessSteps()[i].getDisabled())     continue;
    for (    WSTransformerVariablesMapping mapping : transformer.getProcessSteps()[i].getInputMappings()) {
      availableVariables.add(mapping.getPipelineVariable() == null ? DEFAULT_VAR : mapping.getPipelineVariable());
    }
    for (    WSTransformerVariablesMapping mapping : transformer.getProcessSteps()[i].getOutputMappings()) {
      availableVariables.add(mapping.getPipelineVariable() == null ? DEFAULT_VAR : mapping.getPipelineVariable());
    }
  }
  refreshViewers();
  refreshCombo();
}",0.9507042253521126
146187,"public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getForeignKeyInfos().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setForeignKeyInfos(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getForeignKeyInfos().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setForeignKeyInfos(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9744152046783626
146188,"public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getHiddenAccesses().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setHiddenAccesses(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getHiddenAccesses().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationHidden_ActionType);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setHiddenAccesses(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9772393538913364
146189,"public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getTargetSystems().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setTargetSystems(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getTargetSystems().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationTargetSystems_ActionType);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setTargetSystems(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9746974697469748
146190,"public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getWriteAccesses().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setWriteAccesses(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getWriteAccesses().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationWrite_ActionType);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setWriteAccesses(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9775652813534388
146191,"/** 
 * @param parentShell
 */
public AnnotationOrderedListsDialog(ArrayList<String> xPaths,SelectionListener caller,Shell parentShell,String title,String columnName){
  super(parentShell);
  setShellStyle(this.getShellStyle() | SWT.RESIZE);
  this.xPaths=xPaths;
  this.caller=caller;
  this.title=title;
  this.columnName=columnName;
}","/** 
 * @param parentShell
 */
public AnnotationOrderedListsDialog(ArrayList<String> xPaths,SelectionListener caller,Shell parentShell,String title,String columnName,AMainPageV2 parentPage,int actionType){
  super(parentShell);
  setShellStyle(this.getShellStyle() | SWT.RESIZE);
  this.xPaths=xPaths;
  this.caller=caller;
  this.title=title;
  this.columnName=columnName;
  this.parentPage=parentPage;
  this.xObject=parentPage.getXObject();
  this.actionType=actionType;
}",0.8300492610837439
146192,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=3;
  labelText=new Text(composite,SWT.BORDER | SWT.SINGLE);
  labelText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)labelText.getLayoutData()).minimumWidth=300;
  labelText.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        xPaths.add(labelText.getText());
        viewer.refresh();
      }
    }
  }
);
  Button addLabelButton=new Button(composite,SWT.PUSH | SWT.CENTER);
  addLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  addLabelButton.setText(""String_Node_Str"");
  addLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      xPaths.add(labelText.getText());
      viewer.refresh();
    }
  }
);
  final String COLUMN=columnName;
  viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)viewer.getControl().getLayoutData()).heightHint=100;
  Table table=viewer.getTable();
  new TableColumn(table,SWT.CENTER).setText(COLUMN);
  table.getColumn(0).setWidth(400);
  for (int i=1, n=table.getColumnCount(); i < n; i++) {
    table.getColumn(i).pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[2];
  editors[0]=new TextCellEditor(table);
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> xPaths=(ArrayList<String>)inputElement;
      ArrayList<DescriptionLine> lines=new ArrayList<DescriptionLine>();
      for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
        String xPath=((String)iter.next());
        DescriptionLine line=new DescriptionLine(xPath);
        lines.add(line);
      }
      return lines.toArray(new DescriptionLine[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      DescriptionLine line=(DescriptionLine)element;
switch (columnIndex) {
case 0:
        return line.getLabel();
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
viewer.setColumnProperties(new String[]{COLUMN});
viewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    DescriptionLine line=(DescriptionLine)element;
    if (COLUMN.equals(property)) {
      return line.getLabel();
    }
    return null;
  }
}
);
viewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
  }
}
);
viewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
      DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
viewer.setInput(xPaths);
viewer.refresh();
Composite rightButtonsComposite=new Composite(composite,SWT.NULL);
rightButtonsComposite.setLayout(new GridLayout(1,true));
rightButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
Button upButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
upButton.setText(""String_Node_Str"");
upButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i > 0) {
          xPaths.remove(i);
          xPaths.add(i - 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i - 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button downButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
downButton.setText(""String_Node_Str"");
downButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i < xPaths.size() - 1) {
          xPaths.remove(i);
          xPaths.add(i + 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i + 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button delButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
delButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
delButton.setText(""String_Node_Str"");
delButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
labelText.setFocus();
return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=3;
  if (actionType == AnnotationOrderedListsDialog.AnnotationWrite_ActionType) {
    textControl=new CCombo(composite,SWT.BORDER);
    List<String> roles=Util.getCachedXObjectsNameSet(this.xObject,TreeObject.ROLE);
    ((CCombo)textControl).setItems(roles.toArray(new String[roles.size()]));
  }
 else {
    textControl=new Text(composite,SWT.BORDER | SWT.SINGLE);
  }
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  }
 else {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  }
  ((GridData)textControl.getLayoutData()).minimumWidth=300;
  textControl.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        xPaths.add(AnnotationOrderedListsDialog.getControlText(textControl));
        viewer.refresh();
      }
    }
  }
);
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    Button xpathButton=new Button(composite,SWT.PUSH | SWT.CENTER);
    xpathButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    xpathButton.setText(""String_Node_Str"");
    xpathButton.setToolTipText(""String_Node_Str"");
    xpathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        XpathSelectDialog dlg=new XpathSelectDialog(parentPage.getSite().getShell(),xObject.getParent(),""String_Node_Str"",parentPage.getSite());
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          ((Text)textControl).setText(dlg.getXpath());
          dlg.close();
        }
      }
    }
);
  }
  Button addLabelButton=new Button(composite,SWT.PUSH | SWT.CENTER);
  addLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  addLabelButton.setText(""String_Node_Str"");
  addLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      xPaths.add(getControlText(textControl));
      viewer.refresh();
    }
  }
);
  final String COLUMN=columnName;
  viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)viewer.getControl().getLayoutData()).heightHint=100;
  Table table=viewer.getTable();
  new TableColumn(table,SWT.CENTER).setText(COLUMN);
  table.getColumn(0).setWidth(400);
  for (int i=1, n=table.getColumnCount(); i < n; i++) {
    table.getColumn(i).pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[2];
  editors[0]=new TextCellEditor(table);
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> xPaths=(ArrayList<String>)inputElement;
      ArrayList<DescriptionLine> lines=new ArrayList<DescriptionLine>();
      for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
        String xPath=((String)iter.next());
        DescriptionLine line=new DescriptionLine(xPath);
        lines.add(line);
      }
      return lines.toArray(new DescriptionLine[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      DescriptionLine line=(DescriptionLine)element;
switch (columnIndex) {
case 0:
        return line.getLabel();
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
viewer.setColumnProperties(new String[]{COLUMN});
viewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    DescriptionLine line=(DescriptionLine)element;
    if (COLUMN.equals(property)) {
      return line.getLabel();
    }
    return null;
  }
}
);
viewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
  }
}
);
viewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
      DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
viewer.setInput(xPaths);
viewer.refresh();
Composite rightButtonsComposite=new Composite(composite,SWT.NULL);
rightButtonsComposite.setLayout(new GridLayout(1,true));
rightButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
Button upButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
upButton.setText(""String_Node_Str"");
upButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i > 0) {
          xPaths.remove(i);
          xPaths.add(i - 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i - 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button downButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
downButton.setText(""String_Node_Str"");
downButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i < xPaths.size() - 1) {
          xPaths.remove(i);
          xPaths.add(i + 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i + 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button delButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
delButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
delButton.setText(""String_Node_Str"");
delButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
textControl.setFocus();
return composite;
}",0.8919430084478628
146193,"public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getForeignKeyInfos().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setForeignKeyInfos(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getForeignKeyInfos().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setForeignKeyInfos(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9744152046783626
146194,"public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getHiddenAccesses().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setHiddenAccesses(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getHiddenAccesses().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationHidden_ActionType);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setHiddenAccesses(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9772393538913364
146195,"public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getTargetSystems().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setTargetSystems(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getTargetSystems().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationTargetSystems_ActionType);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setTargetSystems(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9746974697469748
146196,"public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getWriteAccesses().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setWriteAccesses(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void run(){
  try {
    super.run();
    schema=((XSDTreeContentProvider)page.getTreeViewer().getContentProvider()).getXsdSchema();
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure((XSDComponent)selection.getFirstElement());
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + selection.getFirstElement().getClass().getName());
    }
    dlg=new AnnotationOrderedListsDialog(new ArrayList(struc.getWriteAccesses().values()),new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        dlg.close();
      }
    }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationWrite_ActionType);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL)     return;
    struc.setWriteAccesses(dlg.getXPaths());
    if (struc.hasChanged()) {
      page.getTreeViewer().refresh(true);
      page.getTreeViewer().expandToLevel(selection.getFirstElement(),2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9775652813534388
146197,"/** 
 * @param parentShell
 */
public AnnotationOrderedListsDialog(ArrayList<String> xPaths,SelectionListener caller,Shell parentShell,String title,String columnName){
  super(parentShell);
  setShellStyle(this.getShellStyle() | SWT.RESIZE);
  this.xPaths=xPaths;
  this.caller=caller;
  this.title=title;
  this.columnName=columnName;
}","/** 
 * @param parentShell
 */
public AnnotationOrderedListsDialog(ArrayList<String> xPaths,SelectionListener caller,Shell parentShell,String title,String columnName,AMainPageV2 parentPage,int actionType){
  super(parentShell);
  setShellStyle(this.getShellStyle() | SWT.RESIZE);
  this.xPaths=xPaths;
  this.caller=caller;
  this.title=title;
  this.columnName=columnName;
  this.parentPage=parentPage;
  this.xObject=parentPage.getXObject();
  this.actionType=actionType;
}",0.8300492610837439
146198,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=3;
  labelText=new Text(composite,SWT.BORDER | SWT.SINGLE);
  labelText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)labelText.getLayoutData()).minimumWidth=300;
  labelText.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        xPaths.add(labelText.getText());
        viewer.refresh();
      }
    }
  }
);
  Button addLabelButton=new Button(composite,SWT.PUSH | SWT.CENTER);
  addLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  addLabelButton.setText(""String_Node_Str"");
  addLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      xPaths.add(labelText.getText());
      viewer.refresh();
    }
  }
);
  final String COLUMN=columnName;
  viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)viewer.getControl().getLayoutData()).heightHint=100;
  Table table=viewer.getTable();
  new TableColumn(table,SWT.CENTER).setText(COLUMN);
  table.getColumn(0).setWidth(400);
  for (int i=1, n=table.getColumnCount(); i < n; i++) {
    table.getColumn(i).pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[2];
  editors[0]=new TextCellEditor(table);
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> xPaths=(ArrayList<String>)inputElement;
      ArrayList<DescriptionLine> lines=new ArrayList<DescriptionLine>();
      for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
        String xPath=((String)iter.next());
        DescriptionLine line=new DescriptionLine(xPath);
        lines.add(line);
      }
      return lines.toArray(new DescriptionLine[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      DescriptionLine line=(DescriptionLine)element;
switch (columnIndex) {
case 0:
        return line.getLabel();
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
viewer.setColumnProperties(new String[]{COLUMN});
viewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    DescriptionLine line=(DescriptionLine)element;
    if (COLUMN.equals(property)) {
      return line.getLabel();
    }
    return null;
  }
}
);
viewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
  }
}
);
viewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
      DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
viewer.setInput(xPaths);
viewer.refresh();
Composite rightButtonsComposite=new Composite(composite,SWT.NULL);
rightButtonsComposite.setLayout(new GridLayout(1,true));
rightButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
Button upButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
upButton.setText(""String_Node_Str"");
upButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i > 0) {
          xPaths.remove(i);
          xPaths.add(i - 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i - 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button downButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
downButton.setText(""String_Node_Str"");
downButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i < xPaths.size() - 1) {
          xPaths.remove(i);
          xPaths.add(i + 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i + 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button delButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
delButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
delButton.setText(""String_Node_Str"");
delButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
labelText.setFocus();
return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=3;
  if (actionType == AnnotationOrderedListsDialog.AnnotationWrite_ActionType) {
    textControl=new CCombo(composite,SWT.BORDER);
    List<String> roles=Util.getCachedXObjectsNameSet(this.xObject,TreeObject.ROLE);
    ((CCombo)textControl).setItems(roles.toArray(new String[roles.size()]));
  }
 else {
    textControl=new Text(composite,SWT.BORDER | SWT.SINGLE);
  }
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  }
 else {
    textControl.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  }
  ((GridData)textControl.getLayoutData()).minimumWidth=300;
  textControl.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.CR)) {
        xPaths.add(AnnotationOrderedListsDialog.getControlText(textControl));
        viewer.refresh();
      }
    }
  }
);
  if (actionType == AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType) {
    Button xpathButton=new Button(composite,SWT.PUSH | SWT.CENTER);
    xpathButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    xpathButton.setText(""String_Node_Str"");
    xpathButton.setToolTipText(""String_Node_Str"");
    xpathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        XpathSelectDialog dlg=new XpathSelectDialog(parentPage.getSite().getShell(),xObject.getParent(),""String_Node_Str"",parentPage.getSite());
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          ((Text)textControl).setText(dlg.getXpath());
          dlg.close();
        }
      }
    }
);
  }
  Button addLabelButton=new Button(composite,SWT.PUSH | SWT.CENTER);
  addLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  addLabelButton.setText(""String_Node_Str"");
  addLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      xPaths.add(getControlText(textControl));
      viewer.refresh();
    }
  }
);
  final String COLUMN=columnName;
  viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)viewer.getControl().getLayoutData()).heightHint=100;
  Table table=viewer.getTable();
  new TableColumn(table,SWT.CENTER).setText(COLUMN);
  table.getColumn(0).setWidth(400);
  for (int i=1, n=table.getColumnCount(); i < n; i++) {
    table.getColumn(i).pack();
  }
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[2];
  editors[0]=new TextCellEditor(table);
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<String> xPaths=(ArrayList<String>)inputElement;
      ArrayList<DescriptionLine> lines=new ArrayList<DescriptionLine>();
      for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
        String xPath=((String)iter.next());
        DescriptionLine line=new DescriptionLine(xPath);
        lines.add(line);
      }
      return lines.toArray(new DescriptionLine[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      DescriptionLine line=(DescriptionLine)element;
switch (columnIndex) {
case 0:
        return line.getLabel();
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
viewer.setColumnProperties(new String[]{COLUMN});
viewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    DescriptionLine line=(DescriptionLine)element;
    if (COLUMN.equals(property)) {
      return line.getLabel();
    }
    return null;
  }
}
);
viewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
  }
}
);
viewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
      DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
viewer.setInput(xPaths);
viewer.refresh();
Composite rightButtonsComposite=new Composite(composite,SWT.NULL);
rightButtonsComposite.setLayout(new GridLayout(1,true));
rightButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
Button upButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
upButton.setText(""String_Node_Str"");
upButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i > 0) {
          xPaths.remove(i);
          xPaths.add(i - 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i - 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button downButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
downButton.setText(""String_Node_Str"");
downButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line == null)     return;
    int i=0;
    for (Iterator iter=xPaths.iterator(); iter.hasNext(); ) {
      String xPath=(String)iter.next();
      if (xPath.equals(line.getLabel())) {
        if (i < xPaths.size() - 1) {
          xPaths.remove(i);
          xPaths.add(i + 1,xPath);
          viewer.refresh();
          viewer.getTable().setSelection(i + 1);
          viewer.getTable().showSelection();
        }
        return;
      }
      i++;
    }
  }
}
);
Button delButton=new Button(rightButtonsComposite,SWT.PUSH | SWT.CENTER);
delButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
delButton.setText(""String_Node_Str"");
delButton.addSelectionListener(new SelectionListener(){
  public void widgetDefaultSelected(  org.eclipse.swt.events.SelectionEvent e){
  }
  public void widgetSelected(  org.eclipse.swt.events.SelectionEvent e){
    DescriptionLine line=(DescriptionLine)((IStructuredSelection)viewer.getSelection()).getFirstElement();
    if (line != null) {
      ArrayList<String> xPaths=(ArrayList<String>)viewer.getInput();
      xPaths.remove(line.getLabel());
      viewer.refresh();
    }
  }
}
);
textControl.setFocus();
return composite;
}",0.8919430084478628
146199,"public void markDirty(){
  if (editorPart != null)   editorPart.markDirty();
  DataModelMainPage page=((DataModelMainPage)getEditor().findPage(DataModelMainPage.class.getName()));
  if (!page.isDirty())   page.markDirty();
}","public void markDirty(){
  if (editorPart != null)   editorPart.markDirty();
  commitChanges();
  DataModelMainPage page=((DataModelMainPage)getEditor().findPage(DataModelMainPage.class.getName()));
  if (!page.isDirty())   page.markDirtyWithoutCommit();
}",0.9333333333333332
146200,"public void textChanged(TextEvent event){
  if (this.refreshing)   return;
  markDirty();
  commitChanges();
}","public void textChanged(TextEvent event){
  if (this.refreshing)   return;
  markDirty();
}",0.9054726368159204
146201,"protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  AFormPage page=(AFormPage)formPages.get(newPageIndex);
  page.refreshPage();
}","protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  AFormPage page=(AFormPage)formPages.get(newPageIndex);
  page.refreshPage();
  linkDirty(page);
}",0.9436201780415432
146202,"public void markDirty(){
  if (editorPart != null)   editorPart.markDirty();
  commitChanges();
  DataModelMainPage page=((DataModelMainPage)getEditor().findPage(DataModelMainPage.class.getName()));
  if (!page.isDirty())   page.markDirtyWithoutCommit();
}","public void markDirty(){
  if (editorPart != null)   editorPart.markDirty();
  DataModelMainPage page=((DataModelMainPage)getEditor().findPage(DataModelMainPage.class.getName()));
  if (!page.isDirty())   page.markDirtyWithoutCommit();
}",0.9614604462474644
146203,"public void textChanged(TextEvent event){
  if (this.refreshing)   return;
  markDirty();
}","public void textChanged(TextEvent event){
  if (this.refreshing)   return;
  markDirty();
  commitChanges();
}",0.9054726368159204
146204,"protected void createActions(){
  this.newConceptAction=new XSDNewConceptAction(this);
  this.deleteConceptAction=new XSDDeleteConceptAction(this);
  this.newElementAction=new XSDNewElementAction(this);
  this.deleteElementAction=new XSDDeleteElementAction(this);
  this.changeToComplexTypeAction=new XSDChangeToComplexTypeAction(this);
  this.deleteParticleAction=new XSDDeleteParticleAction(this);
  this.newParticleFromTypeAction=new XSDNewParticleFromTypeAction(this);
  this.newParticleFromParticleAction=new XSDNewParticleFromParticleAction(this);
  this.newGroupFromTypeAction=new XSDNewGroupFromTypeAction(this);
  this.newGroupFromParticleAction=new XSDNewGroupFromParticleAction(this);
  this.editParticleAction=new XSDEditParticleAction(this);
  this.editConceptAction=new XSDEditConceptAction(this);
  this.editElementAction=new XSDEditElementAction(this);
  this.deleteIdentityConstraintAction=new XSDDeleteIdentityConstraintAction(this);
  this.editIdentityConstraintAction=new XSDEditIdentityConstraintAction(this);
  this.newIdentityConstraintAction=new XSDNewIdentityConstraintAction(this);
  this.deleteXPathAction=new XSDDeleteXPathAction(this);
  this.newXPathAction=new XSDNewXPathAction(this);
  this.editXPathAction=new XSDEditXPathAction(this);
  this.changeToSimpleTypeAction=new XSDChangeToSimpleTypeAction(this);
  this.changeBaseTypeAction=new XSDChangeBaseTypeAction(this);
  this.getXPathAction=new XSDGetXPathAction(this);
  this.setAnnotationLabelAction=new XSDSetAnnotationLabelAction(this);
  this.setAnnotationDescriptionsAction=new XSDSetAnnotationDescriptionsAction(this);
  this.setAnnotationForeignKeyAction=new XSDSetAnnotationForeignKeyAction(this);
  this.setAnnotationForeignKeyInfoAction=new XSDSetAnnotationForeignKeyInfoAction(this);
  this.setAnnotationWriteAction=new XSDSetAnnotationWriteAction(this);
  this.setAnnotationHiddenAction=new XSDSetAnnotationHiddenAction(this);
  this.setAnnotationTargetSystemsAction=new XSDSetAnnotationTargetSystemsAction(this);
  this.setAnnotationSourceSystemAction=new XSDSetAnnotationSourceSystemAction(this);
  this.setAnnotationDocumentationAction=new XSDSetAnnotationDocumentationAction(this);
}","protected void createActions(){
  this.newConceptAction=new XSDNewConceptAction(this);
  this.deleteConceptAction=new XSDDeleteConceptAction(this);
  this.deleteConceptWrapAction=new XSDDeleteConceptWrapAction(this,deleteConceptAction);
  this.newElementAction=new XSDNewElementAction(this);
  this.deleteElementAction=new XSDDeleteElementAction(this);
  this.changeToComplexTypeAction=new XSDChangeToComplexTypeAction(this);
  this.deleteParticleAction=new XSDDeleteParticleAction(this);
  this.newParticleFromTypeAction=new XSDNewParticleFromTypeAction(this);
  this.newParticleFromParticleAction=new XSDNewParticleFromParticleAction(this);
  this.newGroupFromTypeAction=new XSDNewGroupFromTypeAction(this);
  this.newGroupFromParticleAction=new XSDNewGroupFromParticleAction(this);
  this.editParticleAction=new XSDEditParticleAction(this);
  this.editConceptAction=new XSDEditConceptAction(this);
  this.editElementAction=new XSDEditElementAction(this);
  this.deleteIdentityConstraintAction=new XSDDeleteIdentityConstraintAction(this);
  this.editIdentityConstraintAction=new XSDEditIdentityConstraintAction(this);
  this.newIdentityConstraintAction=new XSDNewIdentityConstraintAction(this);
  this.deleteXPathAction=new XSDDeleteXPathAction(this);
  this.newXPathAction=new XSDNewXPathAction(this);
  this.editXPathAction=new XSDEditXPathAction(this);
  this.changeToSimpleTypeAction=new XSDChangeToSimpleTypeAction(this);
  this.changeBaseTypeAction=new XSDChangeBaseTypeAction(this);
  this.getXPathAction=new XSDGetXPathAction(this);
  this.setAnnotationLabelAction=new XSDSetAnnotationLabelAction(this);
  this.setAnnotationDescriptionsAction=new XSDSetAnnotationDescriptionsAction(this);
  this.setAnnotationForeignKeyAction=new XSDSetAnnotationForeignKeyAction(this);
  this.setAnnotationForeignKeyInfoAction=new XSDSetAnnotationForeignKeyInfoAction(this);
  this.setAnnotationWriteAction=new XSDSetAnnotationWriteAction(this);
  this.setAnnotationHiddenAction=new XSDSetAnnotationHiddenAction(this);
  this.setAnnotationTargetSystemsAction=new XSDSetAnnotationTargetSystemsAction(this);
  this.setAnnotationSourceSystemAction=new XSDSetAnnotationSourceSystemAction(this);
  this.setAnnotationDocumentationAction=new XSDSetAnnotationDocumentationAction(this);
}",0.9800314112631816
146205,"protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(newConceptAction);
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=false;
    EList l=decl.getIdentityConstraintDefinitions();
    for (Iterator iter=l.iterator(); iter.hasNext(); ) {
      XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
      if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
        isConcept=true;
        break;
      }
    }
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(newConceptAction);
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions(manager);
  }
  if (obj instanceof XSDParticle) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newGroupFromParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation) {
    setAnnotationActions(manager);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(newConceptAction);
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=false;
    EList l=decl.getIdentityConstraintDefinitions();
    for (Iterator iter=l.iterator(); iter.hasNext(); ) {
      XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
      if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
        isConcept=true;
        break;
      }
    }
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptWrapAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(newConceptAction);
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions(manager);
  }
  if (obj instanceof XSDParticle) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newGroupFromParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation) {
    setAnnotationActions(manager);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}",0.9994574064026044
146206,"protected Control createDialogArea(Composite parent){
  try {
    parent.getShell().setText(""String_Node_Str"");
    Composite composite=new Composite(parent,SWT.NULL);
    GridLayout layout=new GridLayout();
    layout.marginHeight=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
    layout.marginWidth=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
    layout.verticalSpacing=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
    layout.horizontalSpacing=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
    composite.setLayout(layout);
    composite.setLayoutData(new GridData(GridData.FILL_BOTH));
    applyDialogFont(composite);
    tabFolder=new TabFolder(composite,SWT.TOP | SWT.H_SCROLL | SWT.V_SCROLL);
    tabFolder.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    tabFolder.setLayout(new GridLayout(1,true));
    ((GridData)tabFolder.getLayoutData()).heightHint=600;
    ((GridData)tabFolder.getLayoutData()).widthHint=600;
    TabItem descriptionTI=new TabItem(tabFolder,SWT.NULL);
    descriptionTI.setText(""String_Node_Str"");
    descriptionTI.setToolTipText(""String_Node_Str"");
    Composite descriptionC=new Composite(tabFolder,SWT.NULL | SWT.H_SCROLL | SWT.V_SCROLL);
    descriptionC.setLayout(new GridLayout(1,true));
    descriptionC.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    Label descValue=new Label(descriptionC,SWT.WRAP);
    descValue.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    descValue.setText(description + ""String_Node_Str"");
    Label documentationLabel=new Label(descriptionC,SWT.LEFT);
    documentationLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
    FontData fd=documentationLabel.getFont().getFontData()[0];
    fd.setStyle(SWT.BOLD);
    documentationLabel.setFont(new Font(Display.getDefault(),fd));
    documentationLabel.setText(""String_Node_Str"");
    Text docValue=new Text(descriptionC,SWT.WRAP | SWT.READ_ONLY);
    docValue.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,true,1,1));
    docValue.setBackground(documentationLabel.getBackground());
    docValue.setText(documentation);
    descriptionTI.setControl(descriptionC);
    tabFolder.setSelection(0);
    return composite;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return null;
  }
}","protected Control createDialogArea(Composite parent){
  try {
    parent.getShell().setText(""String_Node_Str"");
    Composite composite=new Composite(parent,SWT.NULL);
    GridLayout layout=new GridLayout();
    layout.marginHeight=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
    layout.marginWidth=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
    layout.verticalSpacing=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
    layout.horizontalSpacing=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
    composite.setLayout(layout);
    composite.setLayoutData(new GridData(GridData.FILL_BOTH));
    applyDialogFont(composite);
    tabFolder=new TabFolder(composite,SWT.TOP);
    tabFolder.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    tabFolder.setLayout(new GridLayout(1,true));
    ((GridData)tabFolder.getLayoutData()).heightHint=600;
    ((GridData)tabFolder.getLayoutData()).widthHint=600;
    TabItem descriptionTI=new TabItem(tabFolder,SWT.NULL);
    descriptionTI.setText(""String_Node_Str"");
    descriptionTI.setToolTipText(""String_Node_Str"");
    Composite descriptionC=new Composite(tabFolder,SWT.NULL);
    descriptionC.setLayout(new GridLayout(1,true));
    descriptionC.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    Label descValue=new Label(descriptionC,SWT.WRAP);
    descValue.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    descValue.setText(description + ""String_Node_Str"");
    Label documentationLabel=new Label(descriptionC,SWT.LEFT);
    documentationLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
    documentationLabel.setFont(FontUtils.getBoldFont(documentationLabel.getFont()));
    documentationLabel.setText(""String_Node_Str"");
    Text docValue=new Text(descriptionC,SWT.WRAP | SWT.READ_ONLY | SWT.V_SCROLL);
    docValue.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    docValue.setBackground(documentationLabel.getBackground());
    docValue.setText(documentation);
    descriptionTI.setControl(descriptionC);
    tabFolder.setSelection(0);
    return composite;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return null;
  }
}",0.9453189726594864
146207,"protected Control createDialogArea(Composite parent){
  try {
    parent.getShell().setText(""String_Node_Str"");
    Composite composite=new Composite(parent,SWT.NULL);
    GridLayout layout=new GridLayout();
    layout.marginHeight=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
    layout.marginWidth=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
    layout.verticalSpacing=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
    layout.horizontalSpacing=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
    composite.setLayout(layout);
    composite.setLayoutData(new GridData(GridData.FILL_BOTH));
    applyDialogFont(composite);
    tabFolder=new TabFolder(composite,SWT.TOP | SWT.H_SCROLL | SWT.V_SCROLL);
    tabFolder.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    tabFolder.setLayout(new GridLayout(1,true));
    ((GridData)tabFolder.getLayoutData()).heightHint=600;
    ((GridData)tabFolder.getLayoutData()).widthHint=600;
    TabItem descriptionTI=new TabItem(tabFolder,SWT.NULL);
    descriptionTI.setText(""String_Node_Str"");
    descriptionTI.setToolTipText(""String_Node_Str"");
    Composite descriptionC=new Composite(tabFolder,SWT.NULL | SWT.H_SCROLL | SWT.V_SCROLL);
    descriptionC.setLayout(new GridLayout(1,true));
    descriptionC.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    Label descValue=new Label(descriptionC,SWT.WRAP);
    descValue.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    descValue.setText(description + ""String_Node_Str"");
    Label documentationLabel=new Label(descriptionC,SWT.LEFT);
    documentationLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
    FontData fd=documentationLabel.getFont().getFontData()[0];
    fd.setStyle(SWT.BOLD);
    documentationLabel.setFont(new Font(Display.getDefault(),fd));
    documentationLabel.setText(""String_Node_Str"");
    Text docValue=new Text(descriptionC,SWT.WRAP | SWT.READ_ONLY);
    docValue.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,true,1,1));
    docValue.setBackground(documentationLabel.getBackground());
    docValue.setText(documentation);
    descriptionTI.setControl(descriptionC);
    tabFolder.setSelection(0);
    return composite;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return null;
  }
}","protected Control createDialogArea(Composite parent){
  try {
    parent.getShell().setText(""String_Node_Str"");
    Composite composite=new Composite(parent,SWT.NULL);
    GridLayout layout=new GridLayout();
    layout.marginHeight=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
    layout.marginWidth=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
    layout.verticalSpacing=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
    layout.horizontalSpacing=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
    composite.setLayout(layout);
    composite.setLayoutData(new GridData(GridData.FILL_BOTH));
    applyDialogFont(composite);
    tabFolder=new TabFolder(composite,SWT.TOP);
    tabFolder.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    tabFolder.setLayout(new GridLayout(1,true));
    ((GridData)tabFolder.getLayoutData()).heightHint=600;
    ((GridData)tabFolder.getLayoutData()).widthHint=600;
    TabItem descriptionTI=new TabItem(tabFolder,SWT.NULL);
    descriptionTI.setText(""String_Node_Str"");
    descriptionTI.setToolTipText(""String_Node_Str"");
    Composite descriptionC=new Composite(tabFolder,SWT.NULL);
    descriptionC.setLayout(new GridLayout(1,true));
    descriptionC.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    Label descValue=new Label(descriptionC,SWT.WRAP);
    descValue.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    descValue.setText(description + ""String_Node_Str"");
    Label documentationLabel=new Label(descriptionC,SWT.LEFT);
    documentationLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
    documentationLabel.setFont(FontUtils.getBoldFont(documentationLabel.getFont()));
    documentationLabel.setText(""String_Node_Str"");
    Text docValue=new Text(descriptionC,SWT.WRAP | SWT.READ_ONLY | SWT.V_SCROLL);
    docValue.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    docValue.setBackground(documentationLabel.getBackground());
    docValue.setText(documentation);
    descriptionTI.setControl(descriptionC);
    tabFolder.setSelection(0);
    return composite;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return null;
  }
}",0.9453189726594864
146208,"public void markDirty(){
  if (editorPart != null)   editorPart.markDirty();
  DataModelMainPage page=((DataModelMainPage)getEditor().findPage(DataModelMainPage.class.getName()));
  if (!page.isDirty())   page.markDirty();
}","public void markDirty(){
  if (editorPart != null)   editorPart.markDirty();
  commitChanges();
  DataModelMainPage page=((DataModelMainPage)getEditor().findPage(DataModelMainPage.class.getName()));
  if (!page.isDirty())   page.markDirtyWithoutCommit();
}",0.9333333333333332
146209,"public void textChanged(TextEvent event){
  if (this.refreshing)   return;
  markDirty();
  commitChanges();
}","public void textChanged(TextEvent event){
  if (this.refreshing)   return;
  markDirty();
}",0.9054726368159204
146210,"protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  AFormPage page=(AFormPage)formPages.get(newPageIndex);
  page.refreshPage();
}","protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  AFormPage page=(AFormPage)formPages.get(newPageIndex);
  page.refreshPage();
  linkDirty(page);
}",0.9436201780415432
146211,"public void markDirty(){
  if (editorPart != null)   editorPart.markDirty();
  commitChanges();
  DataModelMainPage page=((DataModelMainPage)getEditor().findPage(DataModelMainPage.class.getName()));
  if (!page.isDirty())   page.markDirtyWithoutCommit();
}","public void markDirty(){
  if (editorPart != null)   editorPart.markDirty();
  DataModelMainPage page=((DataModelMainPage)getEditor().findPage(DataModelMainPage.class.getName()));
  if (!page.isDirty())   page.markDirtyWithoutCommit();
}",0.9614604462474644
146212,"public void textChanged(TextEvent event){
  if (this.refreshing)   return;
  markDirty();
}","public void textChanged(TextEvent event){
  if (this.refreshing)   return;
  markDirty();
  commitChanges();
}",0.9054726368159204
146213,"protected void createActions(){
  this.newConceptAction=new XSDNewConceptAction(this);
  this.deleteConceptAction=new XSDDeleteConceptAction(this);
  this.newElementAction=new XSDNewElementAction(this);
  this.deleteElementAction=new XSDDeleteElementAction(this);
  this.changeToComplexTypeAction=new XSDChangeToComplexTypeAction(this);
  this.deleteParticleAction=new XSDDeleteParticleAction(this);
  this.newParticleFromTypeAction=new XSDNewParticleFromTypeAction(this);
  this.newParticleFromParticleAction=new XSDNewParticleFromParticleAction(this);
  this.newGroupFromTypeAction=new XSDNewGroupFromTypeAction(this);
  this.newGroupFromParticleAction=new XSDNewGroupFromParticleAction(this);
  this.editParticleAction=new XSDEditParticleAction(this);
  this.editConceptAction=new XSDEditConceptAction(this);
  this.editElementAction=new XSDEditElementAction(this);
  this.deleteIdentityConstraintAction=new XSDDeleteIdentityConstraintAction(this);
  this.editIdentityConstraintAction=new XSDEditIdentityConstraintAction(this);
  this.newIdentityConstraintAction=new XSDNewIdentityConstraintAction(this);
  this.deleteXPathAction=new XSDDeleteXPathAction(this);
  this.newXPathAction=new XSDNewXPathAction(this);
  this.editXPathAction=new XSDEditXPathAction(this);
  this.changeToSimpleTypeAction=new XSDChangeToSimpleTypeAction(this);
  this.changeBaseTypeAction=new XSDChangeBaseTypeAction(this);
  this.getXPathAction=new XSDGetXPathAction(this);
  this.setAnnotationLabelAction=new XSDSetAnnotationLabelAction(this);
  this.setAnnotationDescriptionsAction=new XSDSetAnnotationDescriptionsAction(this);
  this.setAnnotationForeignKeyAction=new XSDSetAnnotationForeignKeyAction(this);
  this.setAnnotationForeignKeyInfoAction=new XSDSetAnnotationForeignKeyInfoAction(this);
  this.setAnnotationWriteAction=new XSDSetAnnotationWriteAction(this);
  this.setAnnotationHiddenAction=new XSDSetAnnotationHiddenAction(this);
  this.setAnnotationTargetSystemsAction=new XSDSetAnnotationTargetSystemsAction(this);
  this.setAnnotationSourceSystemAction=new XSDSetAnnotationSourceSystemAction(this);
  this.setAnnotationDocumentationAction=new XSDSetAnnotationDocumentationAction(this);
}","protected void createActions(){
  this.newConceptAction=new XSDNewConceptAction(this);
  this.deleteConceptAction=new XSDDeleteConceptAction(this);
  this.deleteConceptWrapAction=new XSDDeleteConceptWrapAction(this,deleteConceptAction);
  this.newElementAction=new XSDNewElementAction(this);
  this.deleteElementAction=new XSDDeleteElementAction(this);
  this.changeToComplexTypeAction=new XSDChangeToComplexTypeAction(this);
  this.deleteParticleAction=new XSDDeleteParticleAction(this);
  this.newParticleFromTypeAction=new XSDNewParticleFromTypeAction(this);
  this.newParticleFromParticleAction=new XSDNewParticleFromParticleAction(this);
  this.newGroupFromTypeAction=new XSDNewGroupFromTypeAction(this);
  this.newGroupFromParticleAction=new XSDNewGroupFromParticleAction(this);
  this.editParticleAction=new XSDEditParticleAction(this);
  this.editConceptAction=new XSDEditConceptAction(this);
  this.editElementAction=new XSDEditElementAction(this);
  this.deleteIdentityConstraintAction=new XSDDeleteIdentityConstraintAction(this);
  this.editIdentityConstraintAction=new XSDEditIdentityConstraintAction(this);
  this.newIdentityConstraintAction=new XSDNewIdentityConstraintAction(this);
  this.deleteXPathAction=new XSDDeleteXPathAction(this);
  this.newXPathAction=new XSDNewXPathAction(this);
  this.editXPathAction=new XSDEditXPathAction(this);
  this.changeToSimpleTypeAction=new XSDChangeToSimpleTypeAction(this);
  this.changeBaseTypeAction=new XSDChangeBaseTypeAction(this);
  this.getXPathAction=new XSDGetXPathAction(this);
  this.setAnnotationLabelAction=new XSDSetAnnotationLabelAction(this);
  this.setAnnotationDescriptionsAction=new XSDSetAnnotationDescriptionsAction(this);
  this.setAnnotationForeignKeyAction=new XSDSetAnnotationForeignKeyAction(this);
  this.setAnnotationForeignKeyInfoAction=new XSDSetAnnotationForeignKeyInfoAction(this);
  this.setAnnotationWriteAction=new XSDSetAnnotationWriteAction(this);
  this.setAnnotationHiddenAction=new XSDSetAnnotationHiddenAction(this);
  this.setAnnotationTargetSystemsAction=new XSDSetAnnotationTargetSystemsAction(this);
  this.setAnnotationSourceSystemAction=new XSDSetAnnotationSourceSystemAction(this);
  this.setAnnotationDocumentationAction=new XSDSetAnnotationDocumentationAction(this);
}",0.9800314112631816
146214,"protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(newConceptAction);
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=false;
    EList l=decl.getIdentityConstraintDefinitions();
    for (Iterator iter=l.iterator(); iter.hasNext(); ) {
      XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
      if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
        isConcept=true;
        break;
      }
    }
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(newConceptAction);
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions(manager);
  }
  if (obj instanceof XSDParticle) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newGroupFromParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation) {
    setAnnotationActions(manager);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","protected void fillContextMenu(IMenuManager manager){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(newConceptAction);
    manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    return;
  }
  Object obj=selection.getFirstElement();
  if (obj instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=false;
    EList l=decl.getIdentityConstraintDefinitions();
    for (Iterator iter=l.iterator(); iter.hasNext(); ) {
      XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
      if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
        isConcept=true;
        break;
      }
    }
    if (isConcept) {
      manager.add(editConceptAction);
      manager.add(deleteConceptWrapAction);
    }
 else {
      manager.add(editElementAction);
      manager.add(deleteElementAction);
    }
    manager.add(new Separator());
    manager.add(newConceptAction);
    manager.add(newElementAction);
    manager.add(new Separator());
    manager.add(changeToComplexTypeAction);
    manager.add(changeToSimpleTypeAction);
    manager.add(new Separator());
    manager.add(newIdentityConstraintAction);
    setAnnotationActions(manager);
  }
  if (obj instanceof XSDParticle) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      manager.add(editParticleAction);
      manager.add(newGroupFromParticleAction);
      manager.add(newParticleFromParticleAction);
      if (term instanceof XSDModelGroup) {
        manager.add(newParticleFromTypeAction);
        manager.add(newGroupFromTypeAction);
      }
      manager.add(deleteParticleAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
      if (term instanceof XSDElementDeclaration) {
        setAnnotationActions(manager);
        manager.add(new Separator());
        manager.add(getXPathAction);
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition) {
    manager.add(newParticleFromTypeAction);
    manager.add(newGroupFromTypeAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    if (!typedef.getSchema().getSchemaForSchemaNamespace().equals(typedef.getTargetNamespace())) {
      manager.add(changeBaseTypeAction);
      manager.add(new Separator());
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (obj instanceof XSDAnnotation) {
    setAnnotationActions(manager);
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}",0.9994574064026044
146215,"private static void addMenuEntries(HashMap<String,Menu> index,WSRoleSpecificationInstance instance) throws XtentisWebappException {
  org.apache.log4j.Logger.getLogger(Menu.class).debug(""String_Node_Str"" + instance.getInstanceName());
  try {
    RoleMenuParameters params=RoleMenuParameters.unmarshalMenuParameters(instance.getParameter()[0]);
    WSMenu wsMenu=Util.getPort().getMenu(new WSGetMenu(new WSMenuPK(instance.getInstanceName())));
    WSMenuEntry[] wsEntries=wsMenu.getMenuEntries();
    if (wsEntries != null) {
      for (int i=0; i < wsEntries.length; i++) {
        index.put(wsEntries[i].getId(),wsMenu2Menu(index,wsEntries[i],null,params.getParentID(),params.getPosition()));
      }
    }
  }
 catch (  Exception e) {
    String err;
    try {
      err=""String_Node_Str"" + instance.getInstanceName() + ""String_Node_Str""+ Util.getAjaxSubject().getUsername()+ ""String_Node_Str""+ (e.getClass().getName().contains(""String_Node_Str"") ? ""String_Node_Str"" : e.getClass().getName() + ""String_Node_Str"")+ e.getLocalizedMessage();
    }
 catch (    Exception ex) {
      err=""String_Node_Str"" + ""String_Node_Str"" + ex.getClass().getName() + ""String_Node_Str""+ ex.getLocalizedMessage();
    }
  }
}","private static void addMenuEntries(HashMap<String,Menu> index,WSRoleSpecificationInstance instance) throws XtentisWebappException {
  org.apache.log4j.Logger.getLogger(Menu.class).debug(""String_Node_Str"" + instance.getInstanceName());
  try {
    WSBoolean menuExist=Util.getPort().existsMenu(new WSExistsMenu(new WSMenuPK(instance.getInstanceName())));
    if (menuExist.is_true()) {
      RoleMenuParameters params=RoleMenuParameters.unmarshalMenuParameters(instance.getParameter()[0]);
      WSMenu wsMenu=Util.getPort().getMenu(new WSGetMenu(new WSMenuPK(instance.getInstanceName())));
      WSMenuEntry[] wsEntries=wsMenu.getMenuEntries();
      if (wsEntries != null) {
        for (int i=0; i < wsEntries.length; i++) {
          index.put(wsEntries[i].getId(),wsMenu2Menu(index,wsEntries[i],null,params.getParentID(),params.getPosition()));
        }
      }
    }
  }
 catch (  XtentisWebappException e) {
    throw (e);
  }
catch (  Exception e) {
    String err;
    try {
      err=""String_Node_Str"" + instance.getInstanceName() + ""String_Node_Str""+ Util.getAjaxSubject().getUsername()+ ""String_Node_Str""+ (e.getClass().getName().contains(""String_Node_Str"") ? ""String_Node_Str"" : e.getClass().getName() + ""String_Node_Str"")+ e.getLocalizedMessage();
    }
 catch (    Exception ex) {
      err=""String_Node_Str"" + ""String_Node_Str"" + ex.getClass().getName() + ""String_Node_Str""+ ex.getLocalizedMessage();
    }
    throw new XtentisWebappException(err);
  }
}",0.9018290406868236
146216,"private static void addMenuEntries(HashMap<String,Menu> index,WSRoleSpecificationInstance instance) throws XtentisWebappException {
  org.apache.log4j.Logger.getLogger(Menu.class).debug(""String_Node_Str"" + instance.getInstanceName());
  try {
    RoleMenuParameters params=RoleMenuParameters.unmarshalMenuParameters(instance.getParameter()[0]);
    WSMenu wsMenu=Util.getPort().getMenu(new WSGetMenu(new WSMenuPK(instance.getInstanceName())));
    WSMenuEntry[] wsEntries=wsMenu.getMenuEntries();
    if (wsEntries != null) {
      for (int i=0; i < wsEntries.length; i++) {
        index.put(wsEntries[i].getId(),wsMenu2Menu(index,wsEntries[i],null,params.getParentID(),params.getPosition()));
      }
    }
  }
 catch (  Exception e) {
    String err;
    try {
      err=""String_Node_Str"" + instance.getInstanceName() + ""String_Node_Str""+ Util.getAjaxSubject().getUsername()+ ""String_Node_Str""+ (e.getClass().getName().contains(""String_Node_Str"") ? ""String_Node_Str"" : e.getClass().getName() + ""String_Node_Str"")+ e.getLocalizedMessage();
    }
 catch (    Exception ex) {
      err=""String_Node_Str"" + ""String_Node_Str"" + ex.getClass().getName() + ""String_Node_Str""+ ex.getLocalizedMessage();
    }
  }
}","private static void addMenuEntries(HashMap<String,Menu> index,WSRoleSpecificationInstance instance) throws XtentisWebappException {
  org.apache.log4j.Logger.getLogger(Menu.class).debug(""String_Node_Str"" + instance.getInstanceName());
  try {
    WSBoolean menuExist=Util.getPort().existsMenu(new WSExistsMenu(new WSMenuPK(instance.getInstanceName())));
    if (menuExist.is_true()) {
      RoleMenuParameters params=RoleMenuParameters.unmarshalMenuParameters(instance.getParameter()[0]);
      WSMenu wsMenu=Util.getPort().getMenu(new WSGetMenu(new WSMenuPK(instance.getInstanceName())));
      WSMenuEntry[] wsEntries=wsMenu.getMenuEntries();
      if (wsEntries != null) {
        for (int i=0; i < wsEntries.length; i++) {
          index.put(wsEntries[i].getId(),wsMenu2Menu(index,wsEntries[i],null,params.getParentID(),params.getPosition()));
        }
      }
    }
  }
 catch (  XtentisWebappException e) {
    throw (e);
  }
catch (  Exception e) {
    String err;
    try {
      err=""String_Node_Str"" + instance.getInstanceName() + ""String_Node_Str""+ Util.getAjaxSubject().getUsername()+ ""String_Node_Str""+ (e.getClass().getName().contains(""String_Node_Str"") ? ""String_Node_Str"" : e.getClass().getName() + ""String_Node_Str"")+ e.getLocalizedMessage();
    }
 catch (    Exception ex) {
      err=""String_Node_Str"" + ""String_Node_Str"" + ex.getClass().getName() + ""String_Node_Str""+ ex.getLocalizedMessage();
    }
    throw new XtentisWebappException(err);
  }
}",0.9018290406868236
146217,"/** 
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSRolePK putRole(WSPutRole wsRole) throws RemoteException {
  try {
    RoleCtrlLocal ctrl=RoleCtrlUtil.getLocalHome().create();
    RolePOJOPK pk=ctrl.putRole(WS2POJO(wsRole.getWsRole()));
    return new WSRolePK(pk.getUniqueId());
  }
 catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}","/** 
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSRolePK putRole(WSPutRole wsRole) throws RemoteException {
  try {
    RoleCtrlLocal ctrl=RoleCtrlUtil.getLocalHome().create();
    RolePOJOPK pk=ctrl.putRole(WS2POJO(wsRole.getWsRole()));
    LocalUser.resetLocalUsers();
    return new WSRolePK(pk.getUniqueId());
  }
 catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9747899159663864
146218,"public void keyReleased(KeyEvent e){
  if ((e.stateMask == 0) && (e.character == SWT.CR)) {
    DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
  }
}","public void keyReleased(KeyEvent e){
  if (e.keyCode == SWT.DEL) {
    new DeleteItemsAction(DataClusterBrowserMainPage.this.getSite().getShell(),DataClusterBrowserMainPage.this.resultsViewer).run();
  }
}",0.5638297872340425
146219,"@Override protected void createFormContent(IManagedForm managedForm){
  try {
    managedForm.getForm().setText(this.getTitle());
    FormToolkit toolkit=managedForm.getToolkit();
    Composite composite=managedForm.getForm().getBody();
    composite.setLayout(new GridLayout(9,false));
    final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Label fromLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    fromLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    fromText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    fromText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)fromText.getLayoutData()).widthHint=100;
    fromText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    Calendar c=Calendar.getInstance();
    long yesterday=c.getTimeInMillis() - (1000 * 60 * 60* 24);
    c.setTimeInMillis(yesterday);
    fromText.setText(sdf.format(c.getTime()));
    fromText.pack();
    Button bFrom=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER | SWT.ARROW | SWT.DOWN);
    bFrom.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        final CalendarDialog cal=new CalendarDialog(DataClusterBrowserMainPage.this.getSite().getShell());
        if (fromText.getText() != null && fromText.getText().length() > 0) {
          try {
            Date d=sdf.parse(fromText.getText());
            cal.setDate(d);
          }
 catch (          ParseException pe) {
          }
        }
        cal.addDateChangedListener(new SWTCalendarListener(){
          public void dateChanged(          SWTCalendarEvent calendarEvent){
            fromText.setText(sdf.format(calendarEvent.getCalendar().getTime()));
          }
        }
);
        cal.open();
      }
    }
);
    Label toLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    toLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    toText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    toText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)toText.getLayoutData()).widthHint=100;
    toText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    toText.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        toText.selectAll();
      }
    }
);
    toText.setText(""String_Node_Str"");
    toText.pack();
    Button bTo=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER | SWT.ARROW | SWT.DOWN);
    bTo.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        final CalendarDialog cal=new CalendarDialog(DataClusterBrowserMainPage.this.getSite().getShell());
        if (toText.getText() != null && toText.getText().length() > 0) {
          try {
            Date d=sdf.parse(toText.getText());
            cal.setDate(d);
          }
 catch (          ParseException pe) {
          }
        }
        cal.addDateChangedListener(new SWTCalendarListener(){
          public void dateChanged(          SWTCalendarEvent calendarEvent){
            toText.setText(sdf.format(calendarEvent.getCalendar().getTime()));
          }
        }
);
        cal.open();
      }
    }
);
    Label conceptLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    conceptLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    conceptCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    conceptCombo.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)conceptCombo.getLayoutData()).widthHint=180;
    conceptCombo.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    Button bSearch=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER);
    bSearch.setLayoutData(new GridData(SWT.NONE,SWT.CENTER,false,false,1,1));
    bSearch.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
      }
    }
);
    Label keyLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    keyLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    keyText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    keyText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,5,1));
    keyText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    Label descriptionLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    searchText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    searchText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
    searchText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    final Table table=createTable(composite);
    resultsViewer=new TableViewer(table);
    resultsViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,9,1));
    ((GridData)resultsViewer.getControl().getLayoutData()).heightHint=500;
    resultsViewer.setContentProvider(new ArrayContentProvider());
    resultsViewer.setLabelProvider(new ClusterTableLabelProvider());
    resultsViewer.addDoubleClickListener(new IDoubleClickListener(){
      public void doubleClick(      DoubleClickEvent event){
        resultsViewer.setSelection(event.getSelection());
        try {
          new EditItemAction(DataClusterBrowserMainPage.this.getSite().getShell(),resultsViewer).run();
        }
 catch (        Exception e) {
          MessageDialog.openError(DataClusterBrowserMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getLocalizedMessage());
        }
      }
    }
);
    hookContextMenu();
    managedForm.reflow(true);
    searchText.setFocus();
    WidgetFactory factory=new WidgetFactory();
    factory.adapt(managedForm.getForm().getBody());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void createFormContent(IManagedForm managedForm){
  try {
    managedForm.getForm().setText(this.getTitle());
    FormToolkit toolkit=managedForm.getToolkit();
    Composite composite=managedForm.getForm().getBody();
    composite.setLayout(new GridLayout(9,false));
    final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Label fromLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    fromLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    fromText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    fromText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)fromText.getLayoutData()).widthHint=100;
    fromText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    Calendar c=Calendar.getInstance();
    long yesterday=c.getTimeInMillis() - (1000 * 60 * 60* 24);
    c.setTimeInMillis(yesterday);
    fromText.setText(sdf.format(c.getTime()));
    fromText.pack();
    Button bFrom=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER | SWT.ARROW | SWT.DOWN);
    bFrom.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        final CalendarDialog cal=new CalendarDialog(DataClusterBrowserMainPage.this.getSite().getShell());
        if (fromText.getText() != null && fromText.getText().length() > 0) {
          try {
            Date d=sdf.parse(fromText.getText());
            cal.setDate(d);
          }
 catch (          ParseException pe) {
          }
        }
        cal.addDateChangedListener(new SWTCalendarListener(){
          public void dateChanged(          SWTCalendarEvent calendarEvent){
            fromText.setText(sdf.format(calendarEvent.getCalendar().getTime()));
          }
        }
);
        cal.open();
      }
    }
);
    Label toLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    toLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    toText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    toText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)toText.getLayoutData()).widthHint=100;
    toText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    toText.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        toText.selectAll();
      }
    }
);
    toText.setText(""String_Node_Str"");
    toText.pack();
    Button bTo=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER | SWT.ARROW | SWT.DOWN);
    bTo.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        final CalendarDialog cal=new CalendarDialog(DataClusterBrowserMainPage.this.getSite().getShell());
        if (toText.getText() != null && toText.getText().length() > 0) {
          try {
            Date d=sdf.parse(toText.getText());
            cal.setDate(d);
          }
 catch (          ParseException pe) {
          }
        }
        cal.addDateChangedListener(new SWTCalendarListener(){
          public void dateChanged(          SWTCalendarEvent calendarEvent){
            toText.setText(sdf.format(calendarEvent.getCalendar().getTime()));
          }
        }
);
        cal.open();
      }
    }
);
    Label conceptLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    conceptLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    conceptCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    conceptCombo.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)conceptCombo.getLayoutData()).widthHint=180;
    conceptCombo.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    Button bSearch=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER);
    bSearch.setLayoutData(new GridData(SWT.NONE,SWT.CENTER,false,false,1,1));
    bSearch.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
      }
    }
);
    Label keyLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    keyLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    keyText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    keyText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,5,1));
    keyText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    Label descriptionLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    searchText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    searchText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
    searchText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    final Table table=createTable(composite);
    resultsViewer=new TableViewer(table);
    resultsViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,9,1));
    ((GridData)resultsViewer.getControl().getLayoutData()).heightHint=500;
    resultsViewer.setContentProvider(new ArrayContentProvider());
    resultsViewer.setLabelProvider(new ClusterTableLabelProvider());
    resultsViewer.addDoubleClickListener(new IDoubleClickListener(){
      public void doubleClick(      DoubleClickEvent event){
        resultsViewer.setSelection(event.getSelection());
        try {
          new EditItemAction(DataClusterBrowserMainPage.this.getSite().getShell(),resultsViewer).run();
        }
 catch (        Exception e) {
          MessageDialog.openError(DataClusterBrowserMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getLocalizedMessage());
        }
      }
    }
);
    hookKeyboard();
    hookContextMenu();
    managedForm.reflow(true);
    searchText.setFocus();
    WidgetFactory factory=new WidgetFactory();
    factory.adapt(managedForm.getForm().getBody());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9970330411328387
146220,"protected LineItem[] getResults(){
  Cursor waitCursor=null;
  try {
    Display display=getEditor().getSite().getPage().getWorkbenchWindow().getWorkbench().getDisplay();
    waitCursor=new Cursor(display,SWT.CURSOR_WAIT);
    this.getSite().getShell().setCursor(waitCursor);
    XtentisPort port=Util.getPort(getXObject());
    long from=-1;
    long to=-1;
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    if (!""String_Node_Str"".equals(fromText.getText())) {
      String dateTimeText=fromText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new LineItem[0];
      }
      try {
        Date d=sdf.parse(fromText.getText());
        from=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    if (!""String_Node_Str"".equals(toText.getText())) {
      String dateTimeText=toText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new LineItem[0];
      }
      try {
        Date d=sdf.parse(toText.getText());
        to=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    String concept=conceptCombo.getText();
    if (""String_Node_Str"".equals(concept) | ""String_Node_Str"".equals(concept))     concept=null;
    if (concept != null) {
      concept=concept.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
    }
    String keys=keyText.getText();
    if (""String_Node_Str"".equals(keys) | ""String_Node_Str"".equals(keys))     keys=null;
    String search=searchText.getText();
    if (""String_Node_Str"".equals(search) | ""String_Node_Str"".equals(search))     search=null;
    WSItemPKsByCriteriaResponseResults[] results=port.getItemPKsByCriteria(new WSGetItemPKsByCriteria((WSDataClusterPK)getXObject().getWsKey(),concept,search,keys,from,to,0,Integer.MAX_VALUE)).getResults();
    if (results == null) {
      MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      return new LineItem[0];
    }
    LineItem[] res=new LineItem[results.length];
    for (int i=0; i < results.length; i++) {
      res[i]=new LineItem(results[i].getDate(),results[i].getWsItemPK().getConceptName(),results[i].getWsItemPK().getIds());
    }
    return res;
  }
 catch (  Exception e) {
    e.printStackTrace();
    if ((e.getLocalizedMessage() != null) && e.getLocalizedMessage().contains(""String_Node_Str""))     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
 else     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",e.getLocalizedMessage());
    return null;
  }
 finally {
    try {
      this.getSite().getShell().setCursor(null);
      waitCursor.dispose();
    }
 catch (    Exception e) {
    }
  }
}","protected LineItem[] getResults(boolean showResultInfo){
  Cursor waitCursor=null;
  try {
    Display display=getEditor().getSite().getPage().getWorkbenchWindow().getWorkbench().getDisplay();
    waitCursor=new Cursor(display,SWT.CURSOR_WAIT);
    this.getSite().getShell().setCursor(waitCursor);
    XtentisPort port=Util.getPort(getXObject());
    long from=-1;
    long to=-1;
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    if (!""String_Node_Str"".equals(fromText.getText())) {
      String dateTimeText=fromText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new LineItem[0];
      }
      try {
        Date d=sdf.parse(fromText.getText());
        from=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    if (!""String_Node_Str"".equals(toText.getText())) {
      String dateTimeText=toText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new LineItem[0];
      }
      try {
        Date d=sdf.parse(toText.getText());
        to=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    String concept=conceptCombo.getText();
    if (""String_Node_Str"".equals(concept) | ""String_Node_Str"".equals(concept))     concept=null;
    if (concept != null) {
      concept=concept.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
    }
    String keys=keyText.getText();
    if (""String_Node_Str"".equals(keys) | ""String_Node_Str"".equals(keys))     keys=null;
    String search=searchText.getText();
    if (""String_Node_Str"".equals(search) | ""String_Node_Str"".equals(search))     search=null;
    WSItemPKsByCriteriaResponseResults[] results=port.getItemPKsByCriteria(new WSGetItemPKsByCriteria((WSDataClusterPK)getXObject().getWsKey(),concept,search,keys,from,to,0,Integer.MAX_VALUE)).getResults();
    if (showResultInfo && (results == null)) {
      MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      return new LineItem[0];
    }
    LineItem[] res=new LineItem[results.length];
    for (int i=0; i < results.length; i++) {
      res[i]=new LineItem(results[i].getDate(),results[i].getWsItemPK().getConceptName(),results[i].getWsItemPK().getIds());
    }
    return res;
  }
 catch (  Exception e) {
    e.printStackTrace();
    if ((e.getLocalizedMessage() != null) && e.getLocalizedMessage().contains(""String_Node_Str""))     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
 else     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",e.getLocalizedMessage());
    return null;
  }
 finally {
    try {
      this.getSite().getShell().setCursor(null);
      waitCursor.dispose();
    }
 catch (    Exception e) {
    }
  }
}",0.9931640625
146221,"/** 
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSRolePK putRole(WSPutRole wsRole) throws RemoteException {
  try {
    RoleCtrlLocal ctrl=RoleCtrlUtil.getLocalHome().create();
    RolePOJOPK pk=ctrl.putRole(WS2POJO(wsRole.getWsRole()));
    return new WSRolePK(pk.getUniqueId());
  }
 catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}","/** 
 * @ejb.interface-method view-type = ""service-endpoint""
 * @ejb.permission role-name = ""authenticated"" view-type = ""service-endpoint""
 */
public WSRolePK putRole(WSPutRole wsRole) throws RemoteException {
  try {
    RoleCtrlLocal ctrl=RoleCtrlUtil.getLocalHome().create();
    RolePOJOPK pk=ctrl.putRole(WS2POJO(wsRole.getWsRole()));
    LocalUser.resetLocalUsers();
    return new WSRolePK(pk.getUniqueId());
  }
 catch (  Exception e) {
    String err=""String_Node_Str"" + e.getMessage();
    org.apache.log4j.Logger.getLogger(this.getClass()).debug(err,e);
    throw new RemoteException(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9747899159663864
146222,"public void keyReleased(KeyEvent e){
  if ((e.stateMask == 0) && (e.character == SWT.CR)) {
    DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
  }
}","public void keyReleased(KeyEvent e){
  if (e.keyCode == SWT.DEL) {
    new DeleteItemsAction(DataClusterBrowserMainPage.this.getSite().getShell(),DataClusterBrowserMainPage.this.resultsViewer).run();
  }
}",0.5638297872340425
146223,"@Override protected void createFormContent(IManagedForm managedForm){
  try {
    managedForm.getForm().setText(this.getTitle());
    FormToolkit toolkit=managedForm.getToolkit();
    Composite composite=managedForm.getForm().getBody();
    composite.setLayout(new GridLayout(9,false));
    final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Label fromLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    fromLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    fromText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    fromText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)fromText.getLayoutData()).widthHint=100;
    fromText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    Calendar c=Calendar.getInstance();
    long yesterday=c.getTimeInMillis() - (1000 * 60 * 60* 24);
    c.setTimeInMillis(yesterday);
    fromText.setText(sdf.format(c.getTime()));
    fromText.pack();
    Button bFrom=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER | SWT.ARROW | SWT.DOWN);
    bFrom.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        final CalendarDialog cal=new CalendarDialog(DataClusterBrowserMainPage.this.getSite().getShell());
        if (fromText.getText() != null && fromText.getText().length() > 0) {
          try {
            Date d=sdf.parse(fromText.getText());
            cal.setDate(d);
          }
 catch (          ParseException pe) {
          }
        }
        cal.addDateChangedListener(new SWTCalendarListener(){
          public void dateChanged(          SWTCalendarEvent calendarEvent){
            fromText.setText(sdf.format(calendarEvent.getCalendar().getTime()));
          }
        }
);
        cal.open();
      }
    }
);
    Label toLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    toLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    toText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    toText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)toText.getLayoutData()).widthHint=100;
    toText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    toText.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        toText.selectAll();
      }
    }
);
    toText.setText(""String_Node_Str"");
    toText.pack();
    Button bTo=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER | SWT.ARROW | SWT.DOWN);
    bTo.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        final CalendarDialog cal=new CalendarDialog(DataClusterBrowserMainPage.this.getSite().getShell());
        if (toText.getText() != null && toText.getText().length() > 0) {
          try {
            Date d=sdf.parse(toText.getText());
            cal.setDate(d);
          }
 catch (          ParseException pe) {
          }
        }
        cal.addDateChangedListener(new SWTCalendarListener(){
          public void dateChanged(          SWTCalendarEvent calendarEvent){
            toText.setText(sdf.format(calendarEvent.getCalendar().getTime()));
          }
        }
);
        cal.open();
      }
    }
);
    Label conceptLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    conceptLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    conceptCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    conceptCombo.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)conceptCombo.getLayoutData()).widthHint=180;
    conceptCombo.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    Button bSearch=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER);
    bSearch.setLayoutData(new GridData(SWT.NONE,SWT.CENTER,false,false,1,1));
    bSearch.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
      }
    }
);
    Label keyLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    keyLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    keyText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    keyText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,5,1));
    keyText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    Label descriptionLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    searchText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    searchText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
    searchText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    final Table table=createTable(composite);
    resultsViewer=new TableViewer(table);
    resultsViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,9,1));
    ((GridData)resultsViewer.getControl().getLayoutData()).heightHint=500;
    resultsViewer.setContentProvider(new ArrayContentProvider());
    resultsViewer.setLabelProvider(new ClusterTableLabelProvider());
    resultsViewer.addDoubleClickListener(new IDoubleClickListener(){
      public void doubleClick(      DoubleClickEvent event){
        resultsViewer.setSelection(event.getSelection());
        try {
          new EditItemAction(DataClusterBrowserMainPage.this.getSite().getShell(),resultsViewer).run();
        }
 catch (        Exception e) {
          MessageDialog.openError(DataClusterBrowserMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getLocalizedMessage());
        }
      }
    }
);
    hookContextMenu();
    managedForm.reflow(true);
    searchText.setFocus();
    WidgetFactory factory=new WidgetFactory();
    factory.adapt(managedForm.getForm().getBody());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void createFormContent(IManagedForm managedForm){
  try {
    managedForm.getForm().setText(this.getTitle());
    FormToolkit toolkit=managedForm.getToolkit();
    Composite composite=managedForm.getForm().getBody();
    composite.setLayout(new GridLayout(9,false));
    final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Label fromLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    fromLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    fromText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    fromText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)fromText.getLayoutData()).widthHint=100;
    fromText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    Calendar c=Calendar.getInstance();
    long yesterday=c.getTimeInMillis() - (1000 * 60 * 60* 24);
    c.setTimeInMillis(yesterday);
    fromText.setText(sdf.format(c.getTime()));
    fromText.pack();
    Button bFrom=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER | SWT.ARROW | SWT.DOWN);
    bFrom.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        final CalendarDialog cal=new CalendarDialog(DataClusterBrowserMainPage.this.getSite().getShell());
        if (fromText.getText() != null && fromText.getText().length() > 0) {
          try {
            Date d=sdf.parse(fromText.getText());
            cal.setDate(d);
          }
 catch (          ParseException pe) {
          }
        }
        cal.addDateChangedListener(new SWTCalendarListener(){
          public void dateChanged(          SWTCalendarEvent calendarEvent){
            fromText.setText(sdf.format(calendarEvent.getCalendar().getTime()));
          }
        }
);
        cal.open();
      }
    }
);
    Label toLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    toLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    toText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    toText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)toText.getLayoutData()).widthHint=100;
    toText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    toText.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        toText.selectAll();
      }
    }
);
    toText.setText(""String_Node_Str"");
    toText.pack();
    Button bTo=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER | SWT.ARROW | SWT.DOWN);
    bTo.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        final CalendarDialog cal=new CalendarDialog(DataClusterBrowserMainPage.this.getSite().getShell());
        if (toText.getText() != null && toText.getText().length() > 0) {
          try {
            Date d=sdf.parse(toText.getText());
            cal.setDate(d);
          }
 catch (          ParseException pe) {
          }
        }
        cal.addDateChangedListener(new SWTCalendarListener(){
          public void dateChanged(          SWTCalendarEvent calendarEvent){
            toText.setText(sdf.format(calendarEvent.getCalendar().getTime()));
          }
        }
);
        cal.open();
      }
    }
);
    Label conceptLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    conceptLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    conceptCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    conceptCombo.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    ((GridData)conceptCombo.getLayoutData()).widthHint=180;
    conceptCombo.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    Button bSearch=toolkit.createButton(composite,""String_Node_Str"",SWT.CENTER);
    bSearch.setLayoutData(new GridData(SWT.NONE,SWT.CENTER,false,false,1,1));
    bSearch.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
      }
    }
);
    Label keyLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    keyLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    keyText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    keyText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,5,1));
    keyText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    Label descriptionLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    searchText=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.SINGLE);
    searchText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
    searchText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          DataClusterBrowserMainPage.this.resultsViewer.setInput(getResults(true));
        }
      }
    }
);
    final Table table=createTable(composite);
    resultsViewer=new TableViewer(table);
    resultsViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,9,1));
    ((GridData)resultsViewer.getControl().getLayoutData()).heightHint=500;
    resultsViewer.setContentProvider(new ArrayContentProvider());
    resultsViewer.setLabelProvider(new ClusterTableLabelProvider());
    resultsViewer.addDoubleClickListener(new IDoubleClickListener(){
      public void doubleClick(      DoubleClickEvent event){
        resultsViewer.setSelection(event.getSelection());
        try {
          new EditItemAction(DataClusterBrowserMainPage.this.getSite().getShell(),resultsViewer).run();
        }
 catch (        Exception e) {
          MessageDialog.openError(DataClusterBrowserMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getLocalizedMessage());
        }
      }
    }
);
    hookKeyboard();
    hookContextMenu();
    managedForm.reflow(true);
    searchText.setFocus();
    WidgetFactory factory=new WidgetFactory();
    factory.adapt(managedForm.getForm().getBody());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9970330411328387
146224,"protected LineItem[] getResults(){
  Cursor waitCursor=null;
  try {
    Display display=getEditor().getSite().getPage().getWorkbenchWindow().getWorkbench().getDisplay();
    waitCursor=new Cursor(display,SWT.CURSOR_WAIT);
    this.getSite().getShell().setCursor(waitCursor);
    XtentisPort port=Util.getPort(getXObject());
    long from=-1;
    long to=-1;
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    if (!""String_Node_Str"".equals(fromText.getText())) {
      String dateTimeText=fromText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new LineItem[0];
      }
      try {
        Date d=sdf.parse(fromText.getText());
        from=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    if (!""String_Node_Str"".equals(toText.getText())) {
      String dateTimeText=toText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new LineItem[0];
      }
      try {
        Date d=sdf.parse(toText.getText());
        to=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    String concept=conceptCombo.getText();
    if (""String_Node_Str"".equals(concept) | ""String_Node_Str"".equals(concept))     concept=null;
    if (concept != null) {
      concept=concept.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
    }
    String keys=keyText.getText();
    if (""String_Node_Str"".equals(keys) | ""String_Node_Str"".equals(keys))     keys=null;
    String search=searchText.getText();
    if (""String_Node_Str"".equals(search) | ""String_Node_Str"".equals(search))     search=null;
    WSItemPKsByCriteriaResponseResults[] results=port.getItemPKsByCriteria(new WSGetItemPKsByCriteria((WSDataClusterPK)getXObject().getWsKey(),concept,search,keys,from,to,0,Integer.MAX_VALUE)).getResults();
    if (results == null) {
      MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      return new LineItem[0];
    }
    LineItem[] res=new LineItem[results.length];
    for (int i=0; i < results.length; i++) {
      res[i]=new LineItem(results[i].getDate(),results[i].getWsItemPK().getConceptName(),results[i].getWsItemPK().getIds());
    }
    return res;
  }
 catch (  Exception e) {
    e.printStackTrace();
    if ((e.getLocalizedMessage() != null) && e.getLocalizedMessage().contains(""String_Node_Str""))     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
 else     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",e.getLocalizedMessage());
    return null;
  }
 finally {
    try {
      this.getSite().getShell().setCursor(null);
      waitCursor.dispose();
    }
 catch (    Exception e) {
    }
  }
}","protected LineItem[] getResults(boolean showResultInfo){
  Cursor waitCursor=null;
  try {
    Display display=getEditor().getSite().getPage().getWorkbenchWindow().getWorkbench().getDisplay();
    waitCursor=new Cursor(display,SWT.CURSOR_WAIT);
    this.getSite().getShell().setCursor(waitCursor);
    XtentisPort port=Util.getPort(getXObject());
    long from=-1;
    long to=-1;
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    if (!""String_Node_Str"".equals(fromText.getText())) {
      String dateTimeText=fromText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new LineItem[0];
      }
      try {
        Date d=sdf.parse(fromText.getText());
        from=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    if (!""String_Node_Str"".equals(toText.getText())) {
      String dateTimeText=toText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new LineItem[0];
      }
      try {
        Date d=sdf.parse(toText.getText());
        to=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    String concept=conceptCombo.getText();
    if (""String_Node_Str"".equals(concept) | ""String_Node_Str"".equals(concept))     concept=null;
    if (concept != null) {
      concept=concept.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
    }
    String keys=keyText.getText();
    if (""String_Node_Str"".equals(keys) | ""String_Node_Str"".equals(keys))     keys=null;
    String search=searchText.getText();
    if (""String_Node_Str"".equals(search) | ""String_Node_Str"".equals(search))     search=null;
    WSItemPKsByCriteriaResponseResults[] results=port.getItemPKsByCriteria(new WSGetItemPKsByCriteria((WSDataClusterPK)getXObject().getWsKey(),concept,search,keys,from,to,0,Integer.MAX_VALUE)).getResults();
    if (showResultInfo && (results == null)) {
      MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      return new LineItem[0];
    }
    LineItem[] res=new LineItem[results.length];
    for (int i=0; i < results.length; i++) {
      res[i]=new LineItem(results[i].getDate(),results[i].getWsItemPK().getConceptName(),results[i].getWsItemPK().getIds());
    }
    return res;
  }
 catch (  Exception e) {
    e.printStackTrace();
    if ((e.getLocalizedMessage() != null) && e.getLocalizedMessage().contains(""String_Node_Str""))     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
 else     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",e.getLocalizedMessage());
    return null;
  }
 finally {
    try {
      this.getSite().getShell().setCursor(null);
      waitCursor.dispose();
    }
 catch (    Exception e) {
    }
  }
}",0.9931640625
146225,"/** 
 * Refresh the content of the menu parameters
 * @param instanceName
 */
private void refreshMenuParameters(String instanceName){
  paramsLabel.setText(""String_Node_Str"" + instanceName + ""String_Node_Str"");
  LinkedHashSet<String> parameters=role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).getParameters();
  RoleMenuParameters menuParameters=new RoleMenuParameters();
  menuParametersRefreshing=true;
  if ((parameters != null) && (parameters.size() > 0)) {
    try {
      menuParameters=RoleMenuParameters.unmarshalMenuParameters(parameters);
    }
 catch (    Exception e) {
    }
    menuParentIDCombo.select(menuParameters.getPosition());
    menuPositionCombo.select(menuParameters.getPosition());
  }
 else {
    menuParentIDCombo.select(0);
    menuPositionCombo.select(0);
    commitMenuParameters();
  }
  menuParametersRefreshing=false;
}","/** 
 * Refresh the content of the menu parameters
 * @param instanceName
 */
private void refreshMenuParameters(String instanceName){
  paramsLabel.setText(""String_Node_Str"" + instanceName + ""String_Node_Str"");
  LinkedHashSet<String> parameters=role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).getParameters();
  RoleMenuParameters menuParameters=new RoleMenuParameters();
  menuParametersRefreshing=true;
  if ((parameters != null) && (parameters.size() > 0)) {
    try {
      menuParameters=RoleMenuParameters.unmarshalMenuParameters(parameters);
    }
 catch (    Exception e) {
    }
    menuParentIDCombo.select(menuParameters.getPosition());
    menuPositionCombo.select(menuParameters.getPosition() - 1);
  }
 else {
    menuParentIDCombo.select(0);
    menuPositionCombo.select(0);
    commitMenuParameters();
  }
  menuParametersRefreshing=false;
}",0.9977753058954394
146226,"private Composite getMenuParametersComposite(){
  FormToolkit toolkit=this.getManagedForm().getToolkit();
  Composite composite=toolkit.createComposite(paramsClientComposite,SWT.BORDER);
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  composite.setLayout(new GridLayout(2,false));
  Label menuParentIDLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
  menuParentIDLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
  menuParentIDCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  GridData gridData=new GridData(SWT.BEGINNING,SWT.FILL,true,true,1,1);
  gridData.widthHint=150;
  menuParentIDCombo.setLayoutData(gridData);
  menuParentIDCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (menuParametersRefreshing)       return;
      commitMenuParameters();
    }
  }
);
  Label menuPositionLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
  menuPositionLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
  menuPositionCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  menuPositionCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.FILL,false,false,1,1));
  for (int i=1; i <= 20; i++)   menuPositionCombo.add(""String_Node_Str"" + i);
  menuPositionCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (menuParametersRefreshing)       return;
      commitMenuParameters();
    }
  }
);
  return composite;
}","private Composite getMenuParametersComposite(){
  FormToolkit toolkit=this.getManagedForm().getToolkit();
  Composite composite=toolkit.createComposite(paramsClientComposite,SWT.BORDER);
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  composite.setLayout(new GridLayout(2,false));
  Label menuParentIDLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
  menuParentIDLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
  menuParentIDCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  GridData gridData=new GridData(SWT.BEGINNING,SWT.FILL,true,true,1,1);
  gridData.widthHint=150;
  menuParentIDCombo.setLayoutData(gridData);
  menuParentIDCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (menuParametersRefreshing)       return;
      menuPositionCombo.select(0);
      commitMenuParameters();
    }
  }
);
  Label menuPositionLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
  menuPositionLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
  menuPositionCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  menuPositionCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.FILL,false,false,1,1));
  for (int i=1; i <= 20; i++)   menuPositionCombo.add(""String_Node_Str"" + i);
  menuPositionCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (menuParametersRefreshing)       return;
      commitMenuParameters();
    }
  }
);
  return composite;
}",0.9899280575539569
146227,"/** 
 * Commit the content of the menu parameters
 * @param instanceName
 */
protected void commitMenuParameters(){
  RoleMenuParameters menuParameters=new RoleMenuParameters();
  menuParameters.setParentID(menuParentIDCombo.getText());
  menuParameters.setPosition(menuPositionCombo.getSelectionIndex());
  String instanceName=((InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement()).getInstanceName();
  role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).setParameters(menuParameters.marshalMenuParameters());
  markDirty();
}","/** 
 * Commit the content of the menu parameters
 * @param instanceName
 */
protected void commitMenuParameters(){
  RoleMenuParameters menuParameters=new RoleMenuParameters();
  menuParameters.setParentID(menuParentIDCombo.getText());
  menuParameters.setPosition(menuPositionCombo.getSelectionIndex() + 1);
  String instanceName=((InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement()).getInstanceName();
  role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).setParameters(menuParameters.marshalMenuParameters());
  markDirty();
}",0.9966722129783694
146228,"protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    desAntionComposite.setAnnotationDialogTitle(""String_Node_Str"");
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH | SWT.TRAIL);
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (instancesViewer.getSelection() != null)) {
      InstanceLine line=(InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement();
      role.getSpecifications().get(objectTypesCombo.getText()).getInstances().remove(line.getInstanceName());
      instancesViewer.refresh();
      paramsContainerComposite.setVisible(false);
      markDirty();
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.BORDER);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}","protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    desAntionComposite.setAnnotationDialogTitle(""String_Node_Str"");
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH | SWT.TRAIL);
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          RoleMenuParameters menuParameters=new RoleMenuParameters();
          menuParameters.setParentID(""String_Node_Str"");
          menuParameters.setPosition(1);
          String instanceName=instanceNameCombo.getText();
          specification.getInstances().get(instanceName).setParameters(menuParameters.marshalMenuParameters());
        }
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (instancesViewer.getSelection() != null)) {
      InstanceLine line=(InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement();
      role.getSpecifications().get(objectTypesCombo.getText()).getInstances().remove(line.getInstanceName());
      instancesViewer.refresh();
      paramsContainerComposite.setVisible(false);
      markDirty();
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.BORDER);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}",0.9808337546536748
146229,"/** 
 * Refresh the content of the menu parameters
 * @param instanceName
 */
private void refreshMenuParameters(String instanceName){
  paramsLabel.setText(""String_Node_Str"" + instanceName + ""String_Node_Str"");
  LinkedHashSet<String> parameters=role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).getParameters();
  RoleMenuParameters menuParameters=new RoleMenuParameters();
  menuParametersRefreshing=true;
  if ((parameters != null) && (parameters.size() > 0)) {
    try {
      menuParameters=RoleMenuParameters.unmarshalMenuParameters(parameters);
    }
 catch (    Exception e) {
    }
    menuParentIDCombo.select(menuParameters.getPosition());
    menuPositionCombo.select(menuParameters.getPosition());
  }
 else {
    menuParentIDCombo.select(0);
    menuPositionCombo.select(0);
    commitMenuParameters();
  }
  menuParametersRefreshing=false;
}","/** 
 * Refresh the content of the menu parameters
 * @param instanceName
 */
private void refreshMenuParameters(String instanceName){
  paramsLabel.setText(""String_Node_Str"" + instanceName + ""String_Node_Str"");
  LinkedHashSet<String> parameters=role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).getParameters();
  RoleMenuParameters menuParameters=new RoleMenuParameters();
  menuParametersRefreshing=true;
  if ((parameters != null) && (parameters.size() > 0)) {
    try {
      menuParameters=RoleMenuParameters.unmarshalMenuParameters(parameters);
    }
 catch (    Exception e) {
    }
    menuParentIDCombo.select(menuParameters.getPosition());
    menuPositionCombo.select(menuParameters.getPosition() - 1);
  }
 else {
    menuParentIDCombo.select(0);
    menuPositionCombo.select(0);
    commitMenuParameters();
  }
  menuParametersRefreshing=false;
}",0.9977753058954394
146230,"private Composite getMenuParametersComposite(){
  FormToolkit toolkit=this.getManagedForm().getToolkit();
  Composite composite=toolkit.createComposite(paramsClientComposite,SWT.BORDER);
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  composite.setLayout(new GridLayout(2,false));
  Label menuParentIDLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
  menuParentIDLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
  menuParentIDCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  GridData gridData=new GridData(SWT.BEGINNING,SWT.FILL,true,true,1,1);
  gridData.widthHint=150;
  menuParentIDCombo.setLayoutData(gridData);
  menuParentIDCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (menuParametersRefreshing)       return;
      commitMenuParameters();
    }
  }
);
  Label menuPositionLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
  menuPositionLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
  menuPositionCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  menuPositionCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.FILL,false,false,1,1));
  for (int i=1; i <= 20; i++)   menuPositionCombo.add(""String_Node_Str"" + i);
  menuPositionCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (menuParametersRefreshing)       return;
      commitMenuParameters();
    }
  }
);
  return composite;
}","private Composite getMenuParametersComposite(){
  FormToolkit toolkit=this.getManagedForm().getToolkit();
  Composite composite=toolkit.createComposite(paramsClientComposite,SWT.BORDER);
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  composite.setLayout(new GridLayout(2,false));
  Label menuParentIDLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
  menuParentIDLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
  menuParentIDCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  GridData gridData=new GridData(SWT.BEGINNING,SWT.FILL,true,true,1,1);
  gridData.widthHint=150;
  menuParentIDCombo.setLayoutData(gridData);
  menuParentIDCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (menuParametersRefreshing)       return;
      menuPositionCombo.select(0);
      commitMenuParameters();
    }
  }
);
  Label menuPositionLabel=toolkit.createLabel(composite,""String_Node_Str"",SWT.NULL);
  menuPositionLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
  menuPositionCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  menuPositionCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.FILL,false,false,1,1));
  for (int i=1; i <= 20; i++)   menuPositionCombo.add(""String_Node_Str"" + i);
  menuPositionCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (menuParametersRefreshing)       return;
      commitMenuParameters();
    }
  }
);
  return composite;
}",0.9899280575539569
146231,"/** 
 * Commit the content of the menu parameters
 * @param instanceName
 */
protected void commitMenuParameters(){
  RoleMenuParameters menuParameters=new RoleMenuParameters();
  menuParameters.setParentID(menuParentIDCombo.getText());
  menuParameters.setPosition(menuPositionCombo.getSelectionIndex());
  String instanceName=((InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement()).getInstanceName();
  role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).setParameters(menuParameters.marshalMenuParameters());
  markDirty();
}","/** 
 * Commit the content of the menu parameters
 * @param instanceName
 */
protected void commitMenuParameters(){
  RoleMenuParameters menuParameters=new RoleMenuParameters();
  menuParameters.setParentID(menuParentIDCombo.getText());
  menuParameters.setPosition(menuPositionCombo.getSelectionIndex() + 1);
  String instanceName=((InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement()).getInstanceName();
  role.getSpecifications().get(objectTypesCombo.getText()).getInstances().get(instanceName).setParameters(menuParameters.marshalMenuParameters());
  markDirty();
}",0.9966722129783694
146232,"protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    desAntionComposite.setAnnotationDialogTitle(""String_Node_Str"");
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH | SWT.TRAIL);
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (instancesViewer.getSelection() != null)) {
      InstanceLine line=(InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement();
      role.getSpecifications().get(objectTypesCombo.getText()).getInstances().remove(line.getInstanceName());
      instancesViewer.refresh();
      paramsContainerComposite.setVisible(false);
      markDirty();
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.BORDER);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}","protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    desAntionComposite.setAnnotationDialogTitle(""String_Node_Str"");
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH | SWT.TRAIL);
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          RoleMenuParameters menuParameters=new RoleMenuParameters();
          menuParameters.setParentID(""String_Node_Str"");
          menuParameters.setPosition(1);
          String instanceName=instanceNameCombo.getText();
          specification.getInstances().get(instanceName).setParameters(menuParameters.marshalMenuParameters());
        }
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (instancesViewer.getSelection() != null)) {
      InstanceLine line=(InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement();
      role.getSpecifications().get(objectTypesCombo.getText()).getInstances().remove(line.getInstanceName());
      instancesViewer.refresh();
      paramsContainerComposite.setVisible(false);
      markDirty();
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.BORDER);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}",0.9808337546536748
146233,"protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSRole ws=(WSRole)(getXObject().getWsObject());
    ws.setName(role.getName());
    ws.setDescription(role.getDescription());
    Set<String> objectTypes=role.getSpecifications().keySet();
    ArrayList<WSRoleSpecification> wsSpecifications=new ArrayList<WSRoleSpecification>();
    for (Iterator iter=objectTypes.iterator(); iter.hasNext(); ) {
      String objectType=(String)iter.next();
      Role.Specification specification=role.getSpecifications().get(objectType);
      ArrayList<WSRoleSpecificationInstance> wsInstances=new ArrayList<WSRoleSpecificationInstance>();
      Set<String> instanceIds=specification.getInstances().keySet();
      for (Iterator iterator=instanceIds.iterator(); iterator.hasNext(); ) {
        String id=(String)iterator.next();
        Role.Specification.Instance instance=specification.getInstances().get(id);
        WSRoleSpecificationInstance wsInstance=new WSRoleSpecificationInstance(id,instance.isWritable(),instance.getParameters().toArray(new String[instance.getParameters().size()]));
        wsInstances.add(wsInstance);
      }
      WSRoleSpecification wsSpecification=new WSRoleSpecification(objectType,specification.isAdmin(),wsInstances.toArray(new WSRoleSpecificationInstance[wsInstances.size()]));
      wsSpecifications.add(wsSpecification);
    }
    ws.setSpecification(wsSpecifications.toArray(new WSRoleSpecification[wsSpecifications.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSRole ws=(WSRole)(getXObject().getWsObject());
    ws.setDescription(desAntionComposite.getText());
    ws.setName(role.getName());
    Set<String> objectTypes=role.getSpecifications().keySet();
    ArrayList<WSRoleSpecification> wsSpecifications=new ArrayList<WSRoleSpecification>();
    for (Iterator iter=objectTypes.iterator(); iter.hasNext(); ) {
      String objectType=(String)iter.next();
      Role.Specification specification=role.getSpecifications().get(objectType);
      ArrayList<WSRoleSpecificationInstance> wsInstances=new ArrayList<WSRoleSpecificationInstance>();
      Set<String> instanceIds=specification.getInstances().keySet();
      for (Iterator iterator=instanceIds.iterator(); iterator.hasNext(); ) {
        String id=(String)iterator.next();
        Role.Specification.Instance instance=specification.getInstances().get(id);
        WSRoleSpecificationInstance wsInstance=new WSRoleSpecificationInstance(id,instance.isWritable(),instance.getParameters().toArray(new String[instance.getParameters().size()]));
        wsInstances.add(wsInstance);
      }
      WSRoleSpecification wsSpecification=new WSRoleSpecification(objectType,specification.isAdmin(),wsInstances.toArray(new WSRoleSpecificationInstance[wsInstances.size()]));
      wsSpecifications.add(wsSpecification);
    }
    ws.setSpecification(wsSpecifications.toArray(new WSRoleSpecification[wsSpecifications.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9710441649605148
146234,"protected void refreshData(){
  try {
    if (this.comitting)     return;
    this.refreshing=true;
    WSRole wsRole=(WSRole)(getXObject().getWsObject());
    role=new Role();
    role.setName(wsRole.getName());
    role.setDescription(wsRole.getDescription() == null ? ""String_Node_Str"" : wsRole.getDescription());
    HashMap<String,Role.Specification> specifications=new HashMap<String,Role.Specification>();
    if (wsRole.getSpecification() != null) {
      for (int i=0; i < wsRole.getSpecification().length; i++) {
        WSRoleSpecification wsSpecification=wsRole.getSpecification()[i];
        Role.Specification specification=(new Role()).new Specification();
        specification.setAdmin(wsSpecification.isAdmin());
        HashMap<String,Role.Specification.Instance> instances=new HashMap<String,Role.Specification.Instance>();
        if (wsSpecification.getInstance() != null) {
          for (int j=0; j < wsSpecification.getInstance().length; j++) {
            WSRoleSpecificationInstance wsInstance=wsSpecification.getInstance()[j];
            Role.Specification.Instance instance=specification.new Instance();
            instance.setWritable(wsInstance.isWritable());
            instance.setParameters(new LinkedHashSet<String>(Arrays.asList(wsInstance.getParameter())));
            instances.put(wsInstance.getInstanceName(),instance);
          }
        }
        specification.setInstances(instances);
        specifications.put(wsSpecification.getObjectType(),specification);
      }
    }
    role.setSpecifications(specifications);
    XtentisPort port=Util.getPort(getXObject());
    String[] objects=port.getObjectsForRoles(null).getStrings();
    Arrays.sort(objects);
    desAntionComposite.setText(role.getDescription() == null ? ""String_Node_Str"" : role.getDescription());
    int selected=(objectTypesCombo.getSelectionIndex() == -1 ? 0 : objectTypesCombo.getSelectionIndex());
    objectTypesCombo.setItems(objects);
    objectTypesCombo.select(selected);
    this.refreshing=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void refreshData(){
  try {
    if (this.comitting)     return;
    this.refreshing=true;
    WSRole wsRole=(WSRole)(getXObject().getWsObject());
    desAntionComposite.setText(wsRole.getDescription() == null ? ""String_Node_Str"" : wsRole.getDescription());
    role=new Role();
    role.setName(wsRole.getName());
    role.setDescription(wsRole.getDescription() == null ? ""String_Node_Str"" : wsRole.getDescription());
    HashMap<String,Role.Specification> specifications=new HashMap<String,Role.Specification>();
    if (wsRole.getSpecification() != null) {
      for (int i=0; i < wsRole.getSpecification().length; i++) {
        WSRoleSpecification wsSpecification=wsRole.getSpecification()[i];
        Role.Specification specification=(new Role()).new Specification();
        specification.setAdmin(wsSpecification.isAdmin());
        HashMap<String,Role.Specification.Instance> instances=new HashMap<String,Role.Specification.Instance>();
        if (wsSpecification.getInstance() != null) {
          for (int j=0; j < wsSpecification.getInstance().length; j++) {
            WSRoleSpecificationInstance wsInstance=wsSpecification.getInstance()[j];
            Role.Specification.Instance instance=specification.new Instance();
            instance.setWritable(wsInstance.isWritable());
            instance.setParameters(new LinkedHashSet<String>(Arrays.asList(wsInstance.getParameter())));
            instances.put(wsInstance.getInstanceName(),instance);
          }
        }
        specification.setInstances(instances);
        specifications.put(wsSpecification.getObjectType(),specification);
      }
    }
    role.setSpecifications(specifications);
    XtentisPort port=Util.getPort(getXObject());
    String[] objects=port.getObjectsForRoles(null).getStrings();
    Arrays.sort(objects);
    desAntionComposite.setText(role.getDescription() == null ? ""String_Node_Str"" : role.getDescription());
    int selected=(objectTypesCombo.getSelectionIndex() == -1 ? 0 : objectTypesCombo.getSelectionIndex());
    objectTypesCombo.setItems(objects);
    objectTypesCombo.select(selected);
    this.refreshing=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9754152823920266
146235,"protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH | SWT.TRAIL);
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (instancesViewer.getSelection() != null)) {
      InstanceLine line=(InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement();
      role.getSpecifications().get(objectTypesCombo.getText()).getInstances().remove(line.getInstanceName());
      instancesViewer.refresh();
      paramsContainerComposite.setVisible(false);
      markDirty();
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.BORDER);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}","protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    desAntionComposite.setAnnotationDialogTitle(""String_Node_Str"");
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH | SWT.TRAIL);
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (instancesViewer.getSelection() != null)) {
      InstanceLine line=(InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement();
      role.getSpecifications().get(objectTypesCombo.getText()).getInstances().remove(line.getInstanceName());
      instancesViewer.refresh();
      paramsContainerComposite.setVisible(false);
      markDirty();
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.BORDER);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}",0.9968033095148552
146236,"public DescAnnotationComposite(String labelName,String buttonName,FormToolkit toolkit,Composite parent,AMainPageV2 dialog){
  descAntionHolder=toolkit.createComposite(parent);
  descAntionHolder.setLayoutData(new GridData(SWT.FILL,SWT.RIGHT,true,true,2,1));
  descAntionHolder.setLayout(new GridLayout(3,false));
  Label descriptionLabel=toolkit.createLabel(descAntionHolder,labelName,SWT.NULL);
  descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  annotationButton=toolkit.createButton(descAntionHolder,buttonName,SWT.PUSH);
  annotationButton.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  annotationButton.addSelectionListener(this);
  descriptionText=toolkit.createText(descAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
  descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  descriptionText.setEnabled(false);
  accommodation=dialog;
}","public DescAnnotationComposite(String labelName,String buttonName,FormToolkit toolkit,Composite parent,AMainPageV2 dialog){
  descAntionHolder=toolkit.createComposite(parent);
  descAntionHolder.setLayoutData(new GridData(SWT.FILL,SWT.RIGHT,true,true,2,1));
  descAntionHolder.setLayout(new GridLayout(3,false));
  Label descriptionLabel=toolkit.createLabel(descAntionHolder,labelName,SWT.NULL);
  descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  annotationButton=toolkit.createButton(descAntionHolder,buttonName,SWT.PUSH);
  annotationButton.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  annotationButton.addSelectionListener(this);
  descriptionText=toolkit.createText(descAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
  descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionValue != null && !descriptionValue.equals(descriptionText.getText())) {
        accommodation.markDirty();
      }
      descriptionValue=descriptionText.getText();
      fillDataStore(descriptionText.getText());
    }
  }
);
  accommodation=dialog;
  dlgTitle=""String_Node_Str"";
}",0.8083371091980064
146237,"public void setText(String text){
  dataStore.clear();
  descriptionText.setText(text);
  boolean find=false;
  Matcher match=DESC_PATTERN.matcher(text);
  while (match.find()) {
    find=true;
    String country=match.group(1);
    String desc=match.group(2);
    dataStore.put(country.toLowerCase(),desc.trim());
  }
  if (!find && !text.equals(""String_Node_Str"")) {
    dataStore.put(""String_Node_Str"",text);
  }
}","public void setText(String text){
  descriptionText.setText(text);
  descriptionValue=text;
  fillDataStore(text);
}",0.3377110694183864
146238,"protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSRole ws=(WSRole)(getXObject().getWsObject());
    ws.setName(role.getName());
    ws.setDescription(role.getDescription());
    Set<String> objectTypes=role.getSpecifications().keySet();
    ArrayList<WSRoleSpecification> wsSpecifications=new ArrayList<WSRoleSpecification>();
    for (Iterator iter=objectTypes.iterator(); iter.hasNext(); ) {
      String objectType=(String)iter.next();
      Role.Specification specification=role.getSpecifications().get(objectType);
      ArrayList<WSRoleSpecificationInstance> wsInstances=new ArrayList<WSRoleSpecificationInstance>();
      Set<String> instanceIds=specification.getInstances().keySet();
      for (Iterator iterator=instanceIds.iterator(); iterator.hasNext(); ) {
        String id=(String)iterator.next();
        Role.Specification.Instance instance=specification.getInstances().get(id);
        WSRoleSpecificationInstance wsInstance=new WSRoleSpecificationInstance(id,instance.isWritable(),instance.getParameters().toArray(new String[instance.getParameters().size()]));
        wsInstances.add(wsInstance);
      }
      WSRoleSpecification wsSpecification=new WSRoleSpecification(objectType,specification.isAdmin(),wsInstances.toArray(new WSRoleSpecificationInstance[wsInstances.size()]));
      wsSpecifications.add(wsSpecification);
    }
    ws.setSpecification(wsSpecifications.toArray(new WSRoleSpecification[wsSpecifications.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void commit(){
  try {
    if (this.refreshing)     return;
    this.comitting=true;
    WSRole ws=(WSRole)(getXObject().getWsObject());
    ws.setDescription(desAntionComposite.getText());
    ws.setName(role.getName());
    Set<String> objectTypes=role.getSpecifications().keySet();
    ArrayList<WSRoleSpecification> wsSpecifications=new ArrayList<WSRoleSpecification>();
    for (Iterator iter=objectTypes.iterator(); iter.hasNext(); ) {
      String objectType=(String)iter.next();
      Role.Specification specification=role.getSpecifications().get(objectType);
      ArrayList<WSRoleSpecificationInstance> wsInstances=new ArrayList<WSRoleSpecificationInstance>();
      Set<String> instanceIds=specification.getInstances().keySet();
      for (Iterator iterator=instanceIds.iterator(); iterator.hasNext(); ) {
        String id=(String)iterator.next();
        Role.Specification.Instance instance=specification.getInstances().get(id);
        WSRoleSpecificationInstance wsInstance=new WSRoleSpecificationInstance(id,instance.isWritable(),instance.getParameters().toArray(new String[instance.getParameters().size()]));
        wsInstances.add(wsInstance);
      }
      WSRoleSpecification wsSpecification=new WSRoleSpecification(objectType,specification.isAdmin(),wsInstances.toArray(new WSRoleSpecificationInstance[wsInstances.size()]));
      wsSpecifications.add(wsSpecification);
    }
    ws.setSpecification(wsSpecifications.toArray(new WSRoleSpecification[wsSpecifications.size()]));
    this.comitting=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9710441649605148
146239,"protected void refreshData(){
  try {
    if (this.comitting)     return;
    this.refreshing=true;
    WSRole wsRole=(WSRole)(getXObject().getWsObject());
    role=new Role();
    role.setName(wsRole.getName());
    role.setDescription(wsRole.getDescription() == null ? ""String_Node_Str"" : wsRole.getDescription());
    HashMap<String,Role.Specification> specifications=new HashMap<String,Role.Specification>();
    if (wsRole.getSpecification() != null) {
      for (int i=0; i < wsRole.getSpecification().length; i++) {
        WSRoleSpecification wsSpecification=wsRole.getSpecification()[i];
        Role.Specification specification=(new Role()).new Specification();
        specification.setAdmin(wsSpecification.isAdmin());
        HashMap<String,Role.Specification.Instance> instances=new HashMap<String,Role.Specification.Instance>();
        if (wsSpecification.getInstance() != null) {
          for (int j=0; j < wsSpecification.getInstance().length; j++) {
            WSRoleSpecificationInstance wsInstance=wsSpecification.getInstance()[j];
            Role.Specification.Instance instance=specification.new Instance();
            instance.setWritable(wsInstance.isWritable());
            instance.setParameters(new LinkedHashSet<String>(Arrays.asList(wsInstance.getParameter())));
            instances.put(wsInstance.getInstanceName(),instance);
          }
        }
        specification.setInstances(instances);
        specifications.put(wsSpecification.getObjectType(),specification);
      }
    }
    role.setSpecifications(specifications);
    XtentisPort port=Util.getPort(getXObject());
    String[] objects=port.getObjectsForRoles(null).getStrings();
    Arrays.sort(objects);
    desAntionComposite.setText(role.getDescription() == null ? ""String_Node_Str"" : role.getDescription());
    int selected=(objectTypesCombo.getSelectionIndex() == -1 ? 0 : objectTypesCombo.getSelectionIndex());
    objectTypesCombo.setItems(objects);
    objectTypesCombo.select(selected);
    this.refreshing=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void refreshData(){
  try {
    if (this.comitting)     return;
    this.refreshing=true;
    WSRole wsRole=(WSRole)(getXObject().getWsObject());
    desAntionComposite.setText(wsRole.getDescription() == null ? ""String_Node_Str"" : wsRole.getDescription());
    role=new Role();
    role.setName(wsRole.getName());
    role.setDescription(wsRole.getDescription() == null ? ""String_Node_Str"" : wsRole.getDescription());
    HashMap<String,Role.Specification> specifications=new HashMap<String,Role.Specification>();
    if (wsRole.getSpecification() != null) {
      for (int i=0; i < wsRole.getSpecification().length; i++) {
        WSRoleSpecification wsSpecification=wsRole.getSpecification()[i];
        Role.Specification specification=(new Role()).new Specification();
        specification.setAdmin(wsSpecification.isAdmin());
        HashMap<String,Role.Specification.Instance> instances=new HashMap<String,Role.Specification.Instance>();
        if (wsSpecification.getInstance() != null) {
          for (int j=0; j < wsSpecification.getInstance().length; j++) {
            WSRoleSpecificationInstance wsInstance=wsSpecification.getInstance()[j];
            Role.Specification.Instance instance=specification.new Instance();
            instance.setWritable(wsInstance.isWritable());
            instance.setParameters(new LinkedHashSet<String>(Arrays.asList(wsInstance.getParameter())));
            instances.put(wsInstance.getInstanceName(),instance);
          }
        }
        specification.setInstances(instances);
        specifications.put(wsSpecification.getObjectType(),specification);
      }
    }
    role.setSpecifications(specifications);
    XtentisPort port=Util.getPort(getXObject());
    String[] objects=port.getObjectsForRoles(null).getStrings();
    Arrays.sort(objects);
    desAntionComposite.setText(role.getDescription() == null ? ""String_Node_Str"" : role.getDescription());
    int selected=(objectTypesCombo.getSelectionIndex() == -1 ? 0 : objectTypesCombo.getSelectionIndex());
    objectTypesCombo.setItems(objects);
    objectTypesCombo.select(selected);
    this.refreshing=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9754152823920266
146240,"protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH | SWT.TRAIL);
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (instancesViewer.getSelection() != null)) {
      InstanceLine line=(InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement();
      role.getSpecifications().get(objectTypesCombo.getText()).getInstances().remove(line.getInstanceName());
      instancesViewer.refresh();
      paramsContainerComposite.setVisible(false);
      markDirty();
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.BORDER);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}","protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    desAntionComposite=new DescAnnotationComposite(""String_Node_Str"",""String_Node_Str"",toolkit,charComposite,(AMainPageV2)this);
    desAntionComposite.setAnnotationDialogTitle(""String_Node_Str"");
    windowTarget=new DropTarget(this.getPartControl(),DND.DROP_MOVE);
    windowTarget.setTransfer(new Transfer[]{TextTransfer.getInstance()});
    windowTarget.addDropListener(new DCDropTargetListener());
    Composite permissionsGroup=this.getNewSectionComposite(""String_Node_Str"");
    permissionsGroup.setLayout(new GridLayout(1,true));
    Composite objectTypesComposite=toolkit.createComposite(permissionsGroup,SWT.NULL);
    objectTypesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    objectTypesComposite.setLayout(new GridLayout(4,false));
    Label objectTypeLabel=toolkit.createLabel(objectTypesComposite,""String_Node_Str"",SWT.NULL);
    objectTypeLabel.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,true,1,1));
    objectTypesCombo=new Combo(objectTypesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    objectTypesCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    objectTypesCombo.setVisibleItemCount(20);
    objectTypesCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String objecType=objectTypesCombo.getText();
        Role.Specification specification=role.getSpecifications().get(objecType);
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objecType,specification);
        }
        instancesComposite.setVisible(!specification.isAdmin());
        isAdminButton.setSelection(specification.isAdmin());
        if (!specification.isAdmin()) {
          instanceNameCombo.removeAll();
          try {
            feedInstanceNameCombo();
          }
 catch (          Exception ex) {
            ex.printStackTrace();
          }
          ;
          instanceAccessCombo.select(0);
          instancesViewer.setInput(specification.getInstances());
        }
        paramsContainerComposite.setVisible(false);
        if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
          isAdminButton.setEnabled(false);
          instanceAccessCombo.setEnabled(false);
        }
 else {
          isAdminButton.setEnabled(true);
          instanceAccessCombo.setEnabled(true);
        }
      }
    }
);
    isAdminButton=toolkit.createButton(objectTypesComposite,""String_Node_Str"",SWT.CHECK);
    isAdminButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    isAdminButton.addMouseListener(new MouseListener(){
      public void mouseUp(      MouseEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        instancesComposite.setVisible(!isAdminButton.getSelection());
        specification.setAdmin(isAdminButton.getSelection());
        if (!isAdminButton.getSelection()) {
          instancesViewer.setInput(specification.getInstances());
          instancesViewer.setSelection(null);
        }
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
      }
    }
);
    instancesComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
    instancesComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instancesComposite.setLayout(new GridLayout(3,false));
    Label instancesLabel=toolkit.createLabel(instancesComposite,""String_Node_Str"",SWT.NULL);
    instancesLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    instanceNameCombo=new Combo(instancesComposite,SWT.DROP_DOWN | SWT.SINGLE);
    instanceNameCombo.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    instanceAccessCombo=new Combo(instancesComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    instanceAccessCombo.setLayoutData(new GridData(SWT.BEGINNING,SWT.NONE,false,false,1,1));
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.add(""String_Node_Str"");
    instanceAccessCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
      }
    }
);
    instanceAccessCombo.select(0);
    Button addInstanceButton=toolkit.createButton(instancesComposite,""String_Node_Str"",SWT.PUSH | SWT.TRAIL);
    addInstanceButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    addInstanceButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        Role.Specification specification=role.getSpecifications().get(objectTypesCombo.getText());
        if (specification == null) {
          specification=role.new Specification();
          role.getSpecifications().put(objectTypesCombo.getText(),specification);
        }
        Role.Specification.Instance instance=specification.new Instance();
        instance.setWritable(instanceAccessCombo.getSelectionIndex() == 1);
        specification.getInstances().put(instanceNameCombo.getText(),instance);
        instancesViewer.refresh();
        paramsContainerComposite.setVisible(false);
        markDirty();
      }
    }
);
    final String INSTANCE_NAME=""String_Node_Str"";
    final String INSTANCE_ACCESS=""String_Node_Str"";
    instancesViewer=new TableViewer(instancesComposite,SWT.FULL_SELECTION);
    instancesViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
    ((GridData)instancesViewer.getControl().getLayoutData()).heightHint=100;
    Table table=instancesViewer.getTable();
    new TableColumn(table,SWT.LEFT).setText(INSTANCE_NAME);
    new TableColumn(table,SWT.CENTER).setText(INSTANCE_ACCESS);
    table.getColumn(0).setWidth(200);
    table.getColumn(1).setWidth(200);
    for (int i=2, n=table.getColumnCount(); i < n; i++) {
      table.getColumn(i).pack();
    }
    table.setHeaderVisible(true);
    table.setLinesVisible(true);
    CellEditor[] editors=new CellEditor[4];
    editors[0]=new TextCellEditor(table);
    editors[1]=new TextCellEditor(table);
    instancesViewer.setCellEditors(editors);
    instancesViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        HashMap<String,Role.Specification.Instance> instances=(HashMap<String,Role.Specification.Instance>)inputElement;
        Set<String> names=instances.keySet();
        ArrayList<InstanceLine> lines=new ArrayList<InstanceLine>();
        for (Iterator iter=names.iterator(); iter.hasNext(); ) {
          String name=(String)iter.next();
          InstanceLine line=new InstanceLine(name,instances.get(name).isWritable());
          lines.add(line);
        }
        return lines.toArray(new InstanceLine[lines.size()]);
      }
    }
);
    instancesViewer.setLabelProvider(new ITableLabelProvider(){
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void dispose(){
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void removeListener(      ILabelProviderListener listener){
      }
      public String getColumnText(      Object element,      int columnIndex){
        InstanceLine line=(InstanceLine)element;
switch (columnIndex) {
case 0:
          return line.getInstanceName();
case 1:
        return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return ""String_Node_Str"";
  }
  public Image getColumnImage(  Object element,  int columnIndex){
    return null;
  }
}
);
instancesViewer.setColumnProperties(new String[]{INSTANCE_NAME,INSTANCE_ACCESS});
instancesViewer.setCellModifier(new ICellModifier(){
  public boolean canModify(  Object element,  String property){
    return false;
  }
  public void modify(  Object element,  String property,  Object value){
  }
  public Object getValue(  Object element,  String property){
    InstanceLine line=(InstanceLine)element;
    if (INSTANCE_NAME.equals(property)) {
      return line.getInstanceName();
    }
    if (INSTANCE_ACCESS.equals(property)) {
      return line.isWritable() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    return null;
  }
}
);
instancesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
  public void selectionChanged(  SelectionChangedEvent event){
    InstanceLine line=(InstanceLine)((IStructuredSelection)event.getSelection()).getFirstElement();
    if (line != null) {
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showViewParameters(line.getInstanceName());
      }
      if (""String_Node_Str"".equals(objectTypesCombo.getText())) {
        showMenuParameters(line.getInstanceName());
      }
    }
  }
}
);
instancesViewer.getTable().addKeyListener(new KeyListener(){
  public void keyPressed(  KeyEvent e){
  }
  public void keyReleased(  KeyEvent e){
    if ((e.stateMask == 0) && (e.character == SWT.DEL) && (instancesViewer.getSelection() != null)) {
      InstanceLine line=(InstanceLine)((IStructuredSelection)instancesViewer.getSelection()).getFirstElement();
      role.getSpecifications().get(objectTypesCombo.getText()).getInstances().remove(line.getInstanceName());
      instancesViewer.refresh();
      paramsContainerComposite.setVisible(false);
      markDirty();
    }
  }
}
);
instancesViewer.refresh();
paramsContainerComposite=toolkit.createComposite(permissionsGroup,SWT.BORDER);
paramsContainerComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsContainerComposite.setLayout(new GridLayout(1,false));
paramsLabel=toolkit.createLabel(paramsContainerComposite,""String_Node_Str"",SWT.NULL);
paramsLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite=toolkit.createComposite(paramsContainerComposite,SWT.BORDER);
paramsClientComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
paramsClientComposite.setLayout(new StackLayout());
refreshData();
}
 catch (Exception e) {
e.printStackTrace();
}
}",0.9968033095148552
146241,"public DescAnnotationComposite(String labelName,String buttonName,FormToolkit toolkit,Composite parent,AMainPageV2 dialog){
  descAntionHolder=toolkit.createComposite(parent);
  descAntionHolder.setLayoutData(new GridData(SWT.FILL,SWT.RIGHT,true,true,2,1));
  descAntionHolder.setLayout(new GridLayout(3,false));
  Label descriptionLabel=toolkit.createLabel(descAntionHolder,labelName,SWT.NULL);
  descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  annotationButton=toolkit.createButton(descAntionHolder,buttonName,SWT.PUSH);
  annotationButton.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  annotationButton.addSelectionListener(this);
  descriptionText=toolkit.createText(descAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
  descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  descriptionText.setEnabled(false);
  accommodation=dialog;
}","public DescAnnotationComposite(String labelName,String buttonName,FormToolkit toolkit,Composite parent,AMainPageV2 dialog){
  descAntionHolder=toolkit.createComposite(parent);
  descAntionHolder.setLayoutData(new GridData(SWT.FILL,SWT.RIGHT,true,true,2,1));
  descAntionHolder.setLayout(new GridLayout(3,false));
  Label descriptionLabel=toolkit.createLabel(descAntionHolder,labelName,SWT.NULL);
  descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
  annotationButton=toolkit.createButton(descAntionHolder,buttonName,SWT.PUSH);
  annotationButton.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  annotationButton.addSelectionListener(this);
  descriptionText=toolkit.createText(descAntionHolder,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
  descriptionText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionValue != null && !descriptionValue.equals(descriptionText.getText())) {
        accommodation.markDirty();
      }
      descriptionValue=descriptionText.getText();
      fillDataStore(descriptionText.getText());
    }
  }
);
  accommodation=dialog;
  dlgTitle=""String_Node_Str"";
}",0.8083371091980064
146242,"public void setText(String text){
  dataStore.clear();
  descriptionText.setText(text);
  boolean find=false;
  Matcher match=DESC_PATTERN.matcher(text);
  while (match.find()) {
    find=true;
    String country=match.group(1);
    String desc=match.group(2);
    dataStore.put(country.toLowerCase(),desc.trim());
  }
  if (!find && !text.equals(""String_Node_Str"")) {
    dataStore.put(""String_Node_Str"",text);
  }
}","public void setText(String text){
  descriptionText.setText(text);
  descriptionValue=text;
  fillDataStore(text);
}",0.3377110694183864
146243,"public ListRange getUsers(String regex,String language) throws Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + regex + ""String_Node_Str""+ language);
  try {
    WSWhereItem wi=new WSWhereItem();
    if ((regex == null) || (""String_Node_Str"".equals(regex)) || ""String_Node_Str"".equals(regex)) {
      wi=null;
    }
 else {
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,regex,WSStringPredicate.NONE,true);
      wi.setWhereCondition(wc);
    }
    String[] results=Util.getPort().getItems(new WSGetItems(new WSDataClusterPK(dataclusterPK),""String_Node_Str"",wi,0,0,Integer.MAX_VALUE)).getStrings();
    if ((results == null) || (results.length == 0))     return null;
    ArrayList<User> names=new ArrayList<User>();
    for (int i=0; i < results.length; i++) {
      User user=User.parse(results[i]);
      names.add(user);
    }
    ListRange listRange=new ListRange();
    listRange.setData(names.toArray(new User[names.size()]));
    listRange.setTotalSize(names.size());
    return listRange;
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new Exception(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public ListRange getUsers(String regex,String language) throws Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + regex + ""String_Node_Str""+ language);
  try {
    WSWhereItem wi=new WSWhereItem();
    if ((regex == null) || (""String_Node_Str"".equals(regex)) || ""String_Node_Str"".equals(regex)) {
      wi=null;
    }
 else {
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,regex,WSStringPredicate.NONE,true);
      wi.setWhereCondition(wc);
    }
    String[] results=Util.getPort().getItems(new WSGetItems(new WSDataClusterPK(dataclusterPK),""String_Node_Str"",wi,0,0,Integer.MAX_VALUE)).getStrings();
    ArrayList<User> names=new ArrayList<User>();
    for (int i=0; i < results.length; i++) {
      User user=User.parse(results[i]);
      names.add(user);
    }
    ListRange listRange=new ListRange();
    listRange.setData(names.toArray(new User[names.size()]));
    listRange.setTotalSize(names.size());
    return listRange;
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new Exception(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9713097713097714
146244,"public ListRange getUsers(String regex,String language) throws Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + regex + ""String_Node_Str""+ language);
  try {
    WSWhereItem wi=new WSWhereItem();
    if ((regex == null) || (""String_Node_Str"".equals(regex)) || ""String_Node_Str"".equals(regex)) {
      wi=null;
    }
 else {
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,regex,WSStringPredicate.NONE,true);
      wi.setWhereCondition(wc);
    }
    String[] results=Util.getPort().getItems(new WSGetItems(new WSDataClusterPK(dataclusterPK),""String_Node_Str"",wi,0,0,Integer.MAX_VALUE)).getStrings();
    if ((results == null) || (results.length == 0))     return null;
    ArrayList<User> names=new ArrayList<User>();
    for (int i=0; i < results.length; i++) {
      User user=User.parse(results[i]);
      names.add(user);
    }
    ListRange listRange=new ListRange();
    listRange.setData(names.toArray(new User[names.size()]));
    listRange.setTotalSize(names.size());
    return listRange;
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new Exception(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public ListRange getUsers(String regex,String language) throws Exception {
  org.apache.log4j.Logger.getLogger(this.getClass()).debug(""String_Node_Str"" + regex + ""String_Node_Str""+ language);
  try {
    WSWhereItem wi=new WSWhereItem();
    if ((regex == null) || (""String_Node_Str"".equals(regex)) || ""String_Node_Str"".equals(regex)) {
      wi=null;
    }
 else {
      WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,regex,WSStringPredicate.NONE,true);
      wi.setWhereCondition(wc);
    }
    String[] results=Util.getPort().getItems(new WSGetItems(new WSDataClusterPK(dataclusterPK),""String_Node_Str"",wi,0,0,Integer.MAX_VALUE)).getStrings();
    ArrayList<User> names=new ArrayList<User>();
    for (int i=0; i < results.length; i++) {
      User user=User.parse(results[i]);
      names.add(user);
    }
    ListRange listRange=new ListRange();
    listRange.setData(names.toArray(new User[names.size()]));
    listRange.setTotalSize(names.size());
    return listRange;
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new Exception(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9713097713097714
146245,"public static boolean doMobSpawning(WorldServer par1WorldServer){
  if (!proxy.disableCreatureSpawning || !par1WorldServer.getGameRules().getGameRuleBooleanValue(""String_Node_Str""))   return false;
  for (  ServerTickHandler serverTickHandler : instance.tickHandlers) {
    if (serverTickHandler.worldServer == par1WorldServer)     return serverTickHandler.currentState != SomniaState.ACTIVE;
  }
  throw new IllegalStateException(""String_Node_Str"");
}","public static boolean doMobSpawning(WorldServer par1WorldServer){
  boolean defValue=par1WorldServer.getGameRules().getGameRuleBooleanValue(""String_Node_Str"");
  if (!proxy.disableCreatureSpawning || !defValue)   return defValue;
  for (  ServerTickHandler serverTickHandler : instance.tickHandlers) {
    if (serverTickHandler.worldServer == par1WorldServer)     return serverTickHandler.currentState != SomniaState.ACTIVE;
  }
  throw new IllegalStateException(""String_Node_Str"");
}",0.7884615384615384
146246,"public void tickStart(){
  incrementCounters();
  if (++checkTimer == 10) {
    checkTimer=0;
    SomniaState prevState=currentState;
    currentState=SomniaState.getState(this);
    if (prevState != currentState) {
      currentSleepPeriod=0;
      if (currentState == ACTIVE) {
        lastSleepStart=worldServer.getTotalWorldTime();
        activeTickHandlers++;
      }
 else       if (prevState == ACTIVE) {
        activeTickHandlers--;
        if (currentState == EXPIRED || currentState == NOT_NOW)         closeGuiWithMessage(currentState.toString());
      }
    }
    if (currentState == ACTIVE || currentState == WAITING_PLAYERS || currentState == COOLDOWN) {
      FMLProxyPacket packet=PacketHandler.buildGUIUpdatePacket(""String_Node_Str"",currentState == ACTIVE ? Somnia.timeStringForWorldTime(worldServer.getWorldTime()) : ""String_Node_Str"" + currentState.toString(),""String_Node_Str"",currentState == ACTIVE ? (double)tps / 20d : .0d);
      Somnia.channel.sendToDimension(packet,worldServer.provider.dimensionId);
    }
  }
  if (currentState == ACTIVE)   doMultipliedTicking();
}","public void tickStart(){
  if (++checkTimer == 10) {
    checkTimer=0;
    SomniaState prevState=currentState;
    currentState=SomniaState.getState(this);
    if (prevState != currentState) {
      currentSleepPeriod=0;
      if (currentState == ACTIVE) {
        lastSleepStart=worldServer.getTotalWorldTime();
        activeTickHandlers++;
      }
 else       if (prevState == ACTIVE) {
        activeTickHandlers--;
        if (currentState == EXPIRED || currentState == NOT_NOW)         closeGuiWithMessage(currentState.toString());
      }
    }
    if (currentState == ACTIVE || currentState == WAITING_PLAYERS || currentState == COOLDOWN) {
      FMLProxyPacket packet=PacketHandler.buildGUIUpdatePacket(""String_Node_Str"",currentState == ACTIVE ? Somnia.timeStringForWorldTime(worldServer.getWorldTime()) : ""String_Node_Str"" + currentState.toString(),""String_Node_Str"",currentState == ACTIVE ? (double)tps / 20d : .0d);
      Somnia.channel.sendToDimension(packet,worldServer.provider.dimensionId);
    }
  }
  if (currentState == ACTIVE)   doMultipliedTicking();
}",0.9893960350391886
146247,"private void incrementCounters(){
  liTps++;
  if (currentState == ACTIVE)   currentSleepPeriod++;
}","private void incrementCounters(){
  liTps++;
  currentSleepPeriod++;
}",0.8235294117647058
146248,"public void tickEnd(){
  Minecraft mc=Minecraft.getMinecraft();
  if (mc == null || mc.thePlayer == null)   return;
  GameSettings gameSettings=Minecraft.getMinecraft().gameSettings;
  if (mc.currentScreen != null && mc.currentScreen instanceof GuiSleepMP) {
    if (Somnia.proxy.vanillaBugFixes) {
      if (!moddedFOV) {
        moddedFOV=true;
        if (gameSettings.fovSetting >= 0.75352114) {
          fov=gameSettings.fovSetting;
          gameSettings.fovSetting=0.7253521f;
        }
      }
    }
  }
 else   if (moddedFOV) {
    moddedFOV=false;
    Minecraft.getMinecraft().gameSettings.fovSetting=fov;
  }
  if (mc.thePlayer.isPlayerSleeping()) {
    if (Somnia.proxy.muteSoundWhenSleeping) {
      if (!muted) {
        muted=true;
        defVol=gameSettings.getSoundLevel(SoundCategory.MASTER);
        gameSettings.setSoundLevel(SoundCategory.MASTER,.0f);
      }
    }
  }
 else {
    if (muted) {
      muted=false;
      gameSettings.setSoundLevel(SoundCategory.MASTER,defVol);
    }
  }
  if (Somnia.clientAutoWakeTime > -1 && mc.theWorld.getTotalWorldTime() >= Somnia.clientAutoWakeTime) {
    Somnia.clientAutoWakeTime=-1;
    mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(mc.thePlayer,3));
  }
}","public void tickEnd(){
  Minecraft mc=Minecraft.getMinecraft();
  if (mc == null || mc.thePlayer == null)   return;
  GameSettings gameSettings=Minecraft.getMinecraft().gameSettings;
  if (mc.currentScreen != null && mc.currentScreen instanceof GuiSleepMP) {
    if (Somnia.proxy.vanillaBugFixes) {
      if (!moddedFOV) {
        moddedFOV=true;
        if (gameSettings.fovSetting >= 0.75352114) {
          fov=gameSettings.fovSetting;
          gameSettings.fovSetting=0.7253521f;
        }
      }
    }
  }
 else   if (moddedFOV) {
    moddedFOV=false;
    if (fov > .0f)     Minecraft.getMinecraft().gameSettings.fovSetting=fov;
  }
  if (mc.thePlayer.isPlayerSleeping()) {
    if (Somnia.proxy.muteSoundWhenSleeping) {
      if (!muted) {
        muted=true;
        defVol=gameSettings.getSoundLevel(SoundCategory.MASTER);
        gameSettings.setSoundLevel(SoundCategory.MASTER,.0f);
      }
    }
  }
 else {
    if (muted) {
      muted=false;
      gameSettings.setSoundLevel(SoundCategory.MASTER,defVol);
    }
  }
  if (Somnia.clientAutoWakeTime > -1 && mc.theWorld.getTotalWorldTime() >= Somnia.clientAutoWakeTime) {
    Somnia.clientAutoWakeTime=-1;
    mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(mc.thePlayer,3));
  }
}",0.9923908690428516
146249,"public static FMLProxyPacket buildGUIUpdatePacket(Object... fields){
  ByteBufOutputStream bbos=unpooled();
  try {
    bbos.writeByte(0x02);
    bbos.writeInt(fields.length);
    for (int i=0; i < fields.length; i++) {
      StreamUtils.writeString(fields[i].toString(),bbos);
      StreamUtils.writeObject(fields[++i],bbos);
    }
    return new FMLProxyPacket(bbos.buffer(),Somnia.MOD_ID);
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
 finally {
    close(bbos);
  }
  return null;
}","public static FMLProxyPacket buildGUIUpdatePacket(Object... fields){
  ByteBufOutputStream bbos=unpooled();
  try {
    bbos.writeByte(0x02);
    bbos.writeInt(fields.length / 2);
    for (int i=0; i < fields.length; i++) {
      StreamUtils.writeString(fields[i].toString(),bbos);
      StreamUtils.writeObject(fields[++i],bbos);
    }
    return new FMLProxyPacket(bbos.buffer(),Somnia.MOD_ID);
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
 finally {
    close(bbos);
  }
  return null;
}",0.9960552268244576
146250,"public static boolean deobfuscatedEnvironment(){
  if (mcp == null) {
    mcp=(boolean)Launch.blackboard.get(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + (mcp ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
  return mcp;
}","public static boolean deobfuscatedEnvironment(){
  if (mcp == null) {
    mcp=(Boolean)Launch.blackboard.get(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + (mcp ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
  return mcp;
}",0.996138996138996
146251,"public static double odToMs(double od){
  return 80 - 6 * od;
}","public static double odToMs(double od){
  return 79.5 - Math.ceil(6 * od);
}",0.8776978417266187
146252,"public static double msToOd(double ms){
  return (80 - ms) / 6;
}","public static double msToOd(double ms){
  return (79.5 - ms) / 6;
}",0.9545454545454546
146253,"public static double calcOd(double od,@BitwiseMods long mods){
  if (Easy.is(mods)) {
    od/=2;
  }
  if (HardRock.is(mods)) {
    od=min(10,od * 1.4);
  }
  if (DoubleTime.is(mods) || Nightcore.is(mods)) {
    od=msToOd(odToMs(od) * 2 / 3);
  }
  if (HalfTime.is(mods)) {
    od=msToOd(odToMs(od) * 1.5);
  }
  return od;
}","public static double calcOd(double od,@BitwiseMods long mods){
  if (Easy.is(mods)) {
    od/=2;
  }
  if (HardRock.is(mods)) {
    od=min(10,od * 1.4);
  }
  if (DoubleTime.is(mods) || Nightcore.is(mods)) {
    od=msToOd(odToMs(od) * 2 / 3);
  }
  if (HalfTime.is(mods)) {
    od=msToOd(odToMs(od) * 4 / 3d);
  }
  return od;
}",0.9862174578866768
146254,"@Test public void testOdToMs() throws Exception {
  assertEquals(80,OsuApiBeatmap.odToMs(0),1E-15);
  assertEquals(50,OsuApiBeatmap.odToMs(5),1E-15);
  assertEquals(20,OsuApiBeatmap.odToMs(10),1E-15);
  assertEquals(14,OsuApiBeatmap.odToMs(11),1E-15);
  assertEquals(54,OsuApiBeatmap.odToMs(4 + 1 / 3d),1E-15);
  assertEquals(87.5,OsuApiBeatmap.odToMs(-1.25),1E-15);
  assertEquals(119,OsuApiBeatmap.odToMs(-6.5),1E-15);
}","@Test public void testOdToMs() throws Exception {
  assertEquals(79.5,OsuApiBeatmap.odToMs(0),1E-15);
  assertEquals(52.5,OsuApiBeatmap.odToMs(4.34),1E-15);
  assertEquals(25.5,OsuApiBeatmap.odToMs(9),1E-15);
  assertEquals(24.5,OsuApiBeatmap.odToMs(9.1),1E-15);
  assertEquals(23.5,OsuApiBeatmap.odToMs(9.2),1E-15);
  assertEquals(23.5,OsuApiBeatmap.odToMs(9.3),1E-15);
  assertEquals(20.5,OsuApiBeatmap.odToMs(9.8),1E-15);
}",0.1816037735849056
146255,"@Test public void testCalcOd() throws Exception {
  assertEquals(-2 - 1 / 6d,OsuApiBeatmap.calcOd(6,getMask(HalfTime,Easy)),1E-15);
  assertEquals(3 + 5 / 6d,OsuApiBeatmap.calcOd(7,getMask(HalfTime)),1E-15);
  assertEquals(8 + 1 / 3d,OsuApiBeatmap.calcOd(10,getMask(HalfTime,HardRock)),1E-15);
  assertEquals(5.777777777,OsuApiBeatmap.calcOd(4,getMask(DoubleTime,Easy)),1E-6);
  assertEquals(9.777777777,OsuApiBeatmap.calcOd(8,getMask(DoubleTime)),2E-6);
  assertEquals(10.44444444,OsuApiBeatmap.calcOd(9,getMask(DoubleTime)),2E-6);
  assertEquals(11.111111111,OsuApiBeatmap.calcOd(10,getMask(DoubleTime,HardRock)),1E-6);
}","@Test public void testCalcOd() throws Exception {
  assertEquals(-0.42,OsuApiBeatmap.calcOd(6,getMask(HalfTime,Easy)),1E-2);
  assertEquals(4.92,OsuApiBeatmap.calcOd(7,getMask(HalfTime)),1E-2);
  assertEquals(8.92,OsuApiBeatmap.calcOd(10,getMask(HalfTime,HardRock)),1E-2);
  assertEquals(5.75,OsuApiBeatmap.calcOd(4,getMask(DoubleTime,Easy)),1E-2);
  assertEquals(9.75,OsuApiBeatmap.calcOd(8,getMask(DoubleTime)),2E-2);
  assertEquals(10.42,OsuApiBeatmap.calcOd(9,getMask(DoubleTime)),2E-2);
  assertEquals(11.08,OsuApiBeatmap.calcOd(10,getMask(DoubleTime,HardRock)),1E-2);
}",0.1936560934891485
146256,"@Test public void testMsToOd() throws Exception {
  assertEquals(0,OsuApiBeatmap.msToOd(80),1E-15);
  assertEquals(5,OsuApiBeatmap.msToOd(50),1E-15);
  assertEquals(10,OsuApiBeatmap.msToOd(20),1E-15);
  assertEquals(11,OsuApiBeatmap.msToOd(14),1E-15);
  assertEquals(4 + 1 / 3d,OsuApiBeatmap.msToOd(54),1E-15);
  assertEquals(-1.25,OsuApiBeatmap.msToOd(87.5),1E-15);
  assertEquals(-6.5,OsuApiBeatmap.msToOd(119),1E-15);
}","@Test public void testMsToOd() throws Exception {
  assertEquals(0,OsuApiBeatmap.msToOd(79.5),1E-15);
  assertEquals(5,OsuApiBeatmap.msToOd(49.5),1E-15);
  assertEquals(10,OsuApiBeatmap.msToOd(19.5),1E-15);
}",0.3174603174603174
146257,"@Override public void run(){
  Log.d(TAG,""String_Node_Str"");
  close();
}","@Override public void run(){
  Log.d(TAG,scanTimeout + ""String_Node_Str"");
  close();
}",0.9125
146258,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case MsgId.START_SEARCH:
    Bundle data=msg.getData();
  int timeout=data.getInt(Router.TIMEOUT);
String name=data.getString(Router.PEER_NAME);
String addr=data.getString(Router.PEER_ADDR);
String port=data.getString(Router.PEER_PORT);
router.startPeerSearch(sessionId,new DeviceInfo(name,addr,port),timeout);
break;
case MsgId.STOP_SEARCH:
router.stopPeerSearch(sessionId);
break;
case MsgId.ACCEPT_CONNECTION:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
router.acceptConnection(sessionId,new DeviceInfo(name,addr,port));
break;
case MsgId.DENY_CONNECTION:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
int denyCode=data.getInt(Router.CONN_DENY_CODE);
router.denyConnection(sessionId,new DeviceInfo(name,addr,port),denyCode);
break;
case MsgId.CONNECT:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
byte[] token=data.getByteArray(Router.AUTHENTICATION_TOKEN);
timeout=data.getInt(Router.TIMEOUT);
router.connectPeer(sessionId,new DeviceInfo(name,addr,port),token,timeout);
break;
case MsgId.DISCONNECT:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
router.disconnectPeer(sessionId,new DeviceInfo(name,addr,port));
break;
case MsgId.JOIN_GROUP:
String groupId=msg.getData().getString(Router.GROUP_ID);
router.joinGroup(groupId,null,new MyGroupHandler(groupId));
break;
case MsgId.LEAVE_GROUP:
groupId=msg.getData().getString(Router.GROUP_ID);
router.leaveGroup(groupId);
break;
case MsgId.SEND_MSG:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
groupId=data.getString(Router.GROUP_ID);
router.sendMsg(groupId,new DeviceInfo(name,addr,port),msg.getData());
break;
case MsgId.SET_CONNECTION_INFO:
data=msg.getData();
name=data.getString(Router.DEVICE_NAME);
int liveTime=data.getInt(Router.LIVENESS_TIMEOUT,-1);
int connTime=data.getInt(Router.CONNECT_TIMEOUT,-1);
int searchTime=data.getInt(Router.SEARCH_TIMEOUT,-1);
boolean useSSL=data.getBoolean(Router.USE_SSL,RouterConfig.DEF_USE_SSL);
router.setConnectionInfo(sessionId,name,useSSL,liveTime,connTime,searchTime);
break;
case MsgId.GET_CONNECTION_INFO:
router.getConnectionInfo(sessionId);
break;
case MsgId.GET_DEVICE_INFO:
router.getDeviceInfo(sessionId);
break;
case MsgId.GET_CONNECTED_PEERS:
data=msg.getData();
groupId=null;
if (data != null) groupId=data.getString(Router.GROUP_ID);
router.getConnectedPeers(groupId,sessionId);
break;
case MsgId.GET_NETWORKS:
router.getNetworks(sessionId);
break;
case MsgId.GET_ACTIVE_NETWORK:
router.getActiveNetwork(sessionId);
break;
case MsgId.ACTIVATE_NETWORK:
data=msg.getData();
int type=data.getInt(Router.NET_TYPE);
name=data.getString(Router.NET_NAME);
int encrypt=data.getInt(Router.NET_ENCRYPT);
String pass=data.getString(Router.NET_PASS);
boolean hidden=data.getBoolean(Router.NET_HIDDEN);
byte[] info=data.getByteArray(Router.NET_INFO);
String intfName=data.getString(Router.NET_INTF_NAME);
addr=data.getString(Router.NET_ADDR);
boolean mcast=data.getBoolean(Router.NET_INTF_MCAST);
router.activateNetwork(sessionId,new NetInfo(type,name,encrypt,pass,hidden,info,intfName,addr,mcast));
break;
default :
}
}","@Override public void handleMessage(Message msg){
switch (msg.what) {
case MsgId.START_SEARCH:
    Bundle data=msg.getData();
  int timeout=data.getInt(Router.SEARCH_TIMEOUT);
String name=data.getString(Router.PEER_NAME);
String addr=data.getString(Router.PEER_ADDR);
String port=data.getString(Router.PEER_PORT);
router.startPeerSearch(sessionId,new DeviceInfo(name,addr,port),timeout);
break;
case MsgId.STOP_SEARCH:
router.stopPeerSearch(sessionId);
break;
case MsgId.ACCEPT_CONNECTION:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
router.acceptConnection(sessionId,new DeviceInfo(name,addr,port));
break;
case MsgId.DENY_CONNECTION:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
int denyCode=data.getInt(Router.CONN_DENY_CODE);
router.denyConnection(sessionId,new DeviceInfo(name,addr,port),denyCode);
break;
case MsgId.CONNECT:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
byte[] token=data.getByteArray(Router.AUTHENTICATION_TOKEN);
timeout=data.getInt(Router.CONNECT_TIMEOUT);
router.connectPeer(sessionId,new DeviceInfo(name,addr,port),token,timeout);
break;
case MsgId.DISCONNECT:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
router.disconnectPeer(sessionId,new DeviceInfo(name,addr,port));
break;
case MsgId.JOIN_GROUP:
String groupId=msg.getData().getString(Router.GROUP_ID);
router.joinGroup(groupId,null,new MyGroupHandler(groupId));
break;
case MsgId.LEAVE_GROUP:
groupId=msg.getData().getString(Router.GROUP_ID);
router.leaveGroup(groupId);
break;
case MsgId.SEND_MSG:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
groupId=data.getString(Router.GROUP_ID);
router.sendMsg(groupId,new DeviceInfo(name,addr,port),msg.getData());
break;
case MsgId.SET_CONNECTION_INFO:
data=msg.getData();
name=data.getString(Router.DEVICE_NAME);
int liveTime=data.getInt(Router.LIVENESS_TIMEOUT,-1);
int connTime=data.getInt(Router.CONNECT_TIMEOUT,-1);
int searchTime=data.getInt(Router.SEARCH_TIMEOUT,-1);
boolean useSSL=data.getBoolean(Router.USE_SSL,RouterConfig.DEF_USE_SSL);
router.setConnectionInfo(sessionId,name,useSSL,liveTime,connTime,searchTime);
break;
case MsgId.GET_CONNECTION_INFO:
router.getConnectionInfo(sessionId);
break;
case MsgId.GET_DEVICE_INFO:
router.getDeviceInfo(sessionId);
break;
case MsgId.GET_CONNECTED_PEERS:
data=msg.getData();
groupId=null;
if (data != null) groupId=data.getString(Router.GROUP_ID);
router.getConnectedPeers(groupId,sessionId);
break;
case MsgId.GET_NETWORKS:
router.getNetworks(sessionId);
break;
case MsgId.GET_ACTIVE_NETWORK:
router.getActiveNetwork(sessionId);
break;
case MsgId.ACTIVATE_NETWORK:
data=msg.getData();
int type=data.getInt(Router.NET_TYPE);
name=data.getString(Router.NET_NAME);
int encrypt=data.getInt(Router.NET_ENCRYPT);
String pass=data.getString(Router.NET_PASS);
boolean hidden=data.getBoolean(Router.NET_HIDDEN);
byte[] info=data.getByteArray(Router.NET_INFO);
String intfName=data.getString(Router.NET_INTF_NAME);
addr=data.getString(Router.NET_ADDR);
boolean mcast=data.getBoolean(Router.NET_INTF_MCAST);
router.activateNetwork(sessionId,new NetInfo(type,name,encrypt,pass,hidden,info,intfName,addr,mcast));
break;
default :
}
}",0.9978888106966924
146259,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case MsgId.START_SEARCH:
    Bundle data=msg.getData();
  String name=data.getString(Router.PEER_NAME);
String addr=data.getString(Router.PEER_ADDR);
String port=data.getString(Router.PEER_PORT);
int timeout=data.getInt(Router.TIMEOUT);
router.startPeerSearch(sessionId,new DeviceInfo(name,addr,port),timeout);
break;
case MsgId.STOP_SEARCH:
router.stopPeerSearch(sessionId);
break;
case MsgId.ACCEPT_CONNECTION:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
router.acceptConnection(sessionId,new DeviceInfo(name,addr,port));
break;
case MsgId.DENY_CONNECTION:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
int denyCode=data.getInt(Router.CONN_DENY_CODE);
router.denyConnection(sessionId,new DeviceInfo(name,addr,port),denyCode);
break;
case MsgId.CONNECT:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
byte[] token=data.getByteArray(Router.AUTHENTICATION_TOKEN);
timeout=data.getInt(Router.TIMEOUT);
router.connectPeer(sessionId,new DeviceInfo(name,addr,port),token,timeout);
break;
case MsgId.DISCONNECT:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
router.disconnectPeer(sessionId,new DeviceInfo(name,addr,port));
break;
case MsgId.JOIN_GROUP:
String groupId=msg.getData().getString(Router.GROUP_ID);
router.joinGroup(groupId,null,new MyGroupHandler(groupId));
break;
case MsgId.LEAVE_GROUP:
groupId=msg.getData().getString(Router.GROUP_ID);
router.leaveGroup(groupId);
break;
case MsgId.SEND_MSG:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
groupId=data.getString(Router.GROUP_ID);
router.sendMsg(groupId,new DeviceInfo(name,addr,port),msg.getData());
break;
case MsgId.REGISTER_RECEIVER:
mClientMessenger=msg.replyTo;
break;
case MsgId.UNREGISTER_RECEIVER:
mClientMessenger=null;
break;
case MsgId.SET_CONNECTION_INFO:
data=msg.getData();
name=data.getString(Router.DEVICE_NAME);
int liveTime=data.getInt(Router.LIVENESS_TIMEOUT,-1);
int connTime=data.getInt(Router.CONNECT_TIMEOUT,-1);
int searchTime=data.getInt(Router.SEARCH_TIMEOUT,-1);
boolean useSSL=data.getBoolean(Router.USE_SSL,RouterConfig.DEF_USE_SSL);
router.setConnectionInfo(sessionId,name,useSSL,liveTime,connTime,searchTime);
break;
case MsgId.GET_CONNECTION_INFO:
router.getConnectionInfo(sessionId);
break;
case MsgId.GET_DEVICE_INFO:
router.getDeviceInfo(sessionId);
break;
case MsgId.GET_CONNECTED_PEERS:
data=msg.getData();
groupId=null;
if (data != null) groupId=data.getString(Router.GROUP_ID);
router.getConnectedPeers(groupId,sessionId);
break;
case MsgId.GET_NETWORKS:
router.getNetworks(sessionId);
break;
case MsgId.GET_ACTIVE_NETWORK:
router.getActiveNetwork(sessionId);
break;
case MsgId.ACTIVATE_NETWORK:
data=msg.getData();
int type=data.getInt(Router.NET_TYPE);
name=data.getString(Router.NET_NAME);
int encrypt=data.getInt(Router.NET_ENCRYPT);
String pass=data.getString(Router.NET_PASS);
boolean hidden=data.getBoolean(Router.NET_HIDDEN);
byte[] info=data.getByteArray(Router.NET_INFO);
String intfName=data.getString(Router.NET_INTF_NAME);
addr=data.getString(Router.NET_ADDR);
boolean mcast=data.getBoolean(Router.NET_INTF_MCAST);
router.activateNetwork(sessionId,new NetInfo(type,name,encrypt,pass,hidden,info,intfName,addr,mcast));
break;
default :
}
}","@Override public void handleMessage(Message msg){
switch (msg.what) {
case MsgId.START_SEARCH:
    Bundle data=msg.getData();
  String name=data.getString(Router.PEER_NAME);
String addr=data.getString(Router.PEER_ADDR);
String port=data.getString(Router.PEER_PORT);
int timeout=data.getInt(Router.SEARCH_TIMEOUT);
router.startPeerSearch(sessionId,new DeviceInfo(name,addr,port),timeout);
break;
case MsgId.STOP_SEARCH:
router.stopPeerSearch(sessionId);
break;
case MsgId.ACCEPT_CONNECTION:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
router.acceptConnection(sessionId,new DeviceInfo(name,addr,port));
break;
case MsgId.DENY_CONNECTION:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
int denyCode=data.getInt(Router.CONN_DENY_CODE);
router.denyConnection(sessionId,new DeviceInfo(name,addr,port),denyCode);
break;
case MsgId.CONNECT:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
byte[] token=data.getByteArray(Router.AUTHENTICATION_TOKEN);
timeout=data.getInt(Router.CONNECT_TIMEOUT);
router.connectPeer(sessionId,new DeviceInfo(name,addr,port),token,timeout);
break;
case MsgId.DISCONNECT:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
router.disconnectPeer(sessionId,new DeviceInfo(name,addr,port));
break;
case MsgId.JOIN_GROUP:
String groupId=msg.getData().getString(Router.GROUP_ID);
router.joinGroup(groupId,null,new MyGroupHandler(groupId));
break;
case MsgId.LEAVE_GROUP:
groupId=msg.getData().getString(Router.GROUP_ID);
router.leaveGroup(groupId);
break;
case MsgId.SEND_MSG:
data=msg.getData();
name=data.getString(Router.PEER_NAME);
addr=data.getString(Router.PEER_ADDR);
port=data.getString(Router.PEER_PORT);
groupId=data.getString(Router.GROUP_ID);
router.sendMsg(groupId,new DeviceInfo(name,addr,port),msg.getData());
break;
case MsgId.REGISTER_RECEIVER:
mClientMessenger=msg.replyTo;
break;
case MsgId.UNREGISTER_RECEIVER:
mClientMessenger=null;
break;
case MsgId.SET_CONNECTION_INFO:
data=msg.getData();
name=data.getString(Router.DEVICE_NAME);
int liveTime=data.getInt(Router.LIVENESS_TIMEOUT,-1);
int connTime=data.getInt(Router.CONNECT_TIMEOUT,-1);
int searchTime=data.getInt(Router.SEARCH_TIMEOUT,-1);
boolean useSSL=data.getBoolean(Router.USE_SSL,RouterConfig.DEF_USE_SSL);
router.setConnectionInfo(sessionId,name,useSSL,liveTime,connTime,searchTime);
break;
case MsgId.GET_CONNECTION_INFO:
router.getConnectionInfo(sessionId);
break;
case MsgId.GET_DEVICE_INFO:
router.getDeviceInfo(sessionId);
break;
case MsgId.GET_CONNECTED_PEERS:
data=msg.getData();
groupId=null;
if (data != null) groupId=data.getString(Router.GROUP_ID);
router.getConnectedPeers(groupId,sessionId);
break;
case MsgId.GET_NETWORKS:
router.getNetworks(sessionId);
break;
case MsgId.GET_ACTIVE_NETWORK:
router.getActiveNetwork(sessionId);
break;
case MsgId.ACTIVATE_NETWORK:
data=msg.getData();
int type=data.getInt(Router.NET_TYPE);
name=data.getString(Router.NET_NAME);
int encrypt=data.getInt(Router.NET_ENCRYPT);
String pass=data.getString(Router.NET_PASS);
boolean hidden=data.getBoolean(Router.NET_HIDDEN);
byte[] info=data.getByteArray(Router.NET_INFO);
String intfName=data.getString(Router.NET_INTF_NAME);
addr=data.getString(Router.NET_ADDR);
boolean mcast=data.getBoolean(Router.NET_INTF_MCAST);
router.activateNetwork(sessionId,new NetInfo(type,name,encrypt,pass,hidden,info,intfName,addr,mcast));
break;
default :
}
}",0.9979627869075104
146260,"public StockItemSnapshot getLatest(final Commodity commodity,final Date currentDate){
  return dbUtil.withDao(StockItemSnapshot.class,new DbUtil.Operation<StockItemSnapshot,StockItemSnapshot>(){
    @Override public StockItemSnapshot operate(    Dao<StockItemSnapshot,String> dao) throws SQLException {
      QueryBuilder<StockItemSnapshot,String> queryBuilder=dao.queryBuilder();
      queryBuilder.where().eq(""String_Node_Str"",commodity.getId()).and().le(""String_Node_Str"",currentDate);
      queryBuilder.orderBy(""String_Node_Str"",false);
      PreparedQuery<StockItemSnapshot> query=queryBuilder.prepare();
      return dao.queryForFirst(query);
    }
  }
);
}","public StockItemSnapshot getLatest(final Commodity commodity,final Date currentDate){
  return dbUtil.withDao(StockItemSnapshot.class,new DbUtil.Operation<StockItemSnapshot,StockItemSnapshot>(){
    @Override public StockItemSnapshot operate(    Dao<StockItemSnapshot,String> dao) throws SQLException {
      QueryBuilder<StockItemSnapshot,String> queryBuilder=dao.queryBuilder();
      queryBuilder.where().eq(""String_Node_Str"",commodity.getId()).and().eq(""String_Node_Str"",currentDate);
      queryBuilder.orderBy(""String_Node_Str"",false);
      PreparedQuery<StockItemSnapshot> query=queryBuilder.prepare();
      return dao.queryForFirst(query);
    }
  }
);
}",0.9969879518072288
146261,"@Override public StockItemSnapshot operate(Dao<StockItemSnapshot,String> dao) throws SQLException {
  QueryBuilder<StockItemSnapshot,String> queryBuilder=dao.queryBuilder();
  queryBuilder.where().eq(""String_Node_Str"",commodity.getId()).and().le(""String_Node_Str"",currentDate);
  queryBuilder.orderBy(""String_Node_Str"",false);
  PreparedQuery<StockItemSnapshot> query=queryBuilder.prepare();
  return dao.queryForFirst(query);
}","@Override public StockItemSnapshot operate(Dao<StockItemSnapshot,String> dao) throws SQLException {
  QueryBuilder<StockItemSnapshot,String> queryBuilder=dao.queryBuilder();
  queryBuilder.where().eq(""String_Node_Str"",commodity.getId()).and().eq(""String_Node_Str"",currentDate);
  queryBuilder.orderBy(""String_Node_Str"",false);
  PreparedQuery<StockItemSnapshot> query=queryBuilder.prepare();
  return dao.queryForFirst(query);
}",0.9953271028037384
146262,"public Receive generateReceive(){
  if ((allocation == null && spinnerSource.getSelectedItem().toString().contains(getString(R.string.lga_for_receive))) || (allocation != null && allocation.isDummy())) {
    generateDummyAllocation(textViewAllocationId.getText().toString().trim());
  }
  Receive receive=new Receive(spinnerSource.getSelectedItem().toString(),allocation);
  for (int i=0; i < arrayAdapter.getCount(); i++) {
    ReceiveCommodityViewModel viewModel=(ReceiveCommodityViewModel)arrayAdapter.getItem(i);
    ReceiveItem receiveItem=viewModel.getReceiveItem();
    receive.addReceiveItem(receiveItem);
  }
  return receive;
}","public Receive generateReceive(){
  if ((allocation == null && spinnerSource.getSelectedItem().toString().contains(getString(R.string.lga_for_receive))) || (allocation != null && allocation.isDummy())) {
    generateDummyAllocation(textViewAllocationId.getText().toString().trim());
  }
  Receive receive=new Receive(getString(FIXED_SOURCES.get(spinnerSource.getSelectedItemPosition())),allocation);
  for (int i=0; i < arrayAdapter.getCount(); i++) {
    ReceiveCommodityViewModel viewModel=(ReceiveCommodityViewModel)arrayAdapter.getItem(i);
    ReceiveItem receiveItem=viewModel.getReceiveItem();
    receive.addReceiveItem(receiveItem);
  }
  return receive;
}",0.9607993850883936
146263,"@Test public void shouldGenerateAReceiveFromSelectedReceiveCommodities() throws Exception {
  ReceiveActivity receiveActivity=getReceiveActivity();
  ReceiveCommodityViewModel viewModel=new ReceiveCommodityViewModel(new Commodity(PANADOL),3,6);
  EventBus.getDefault().post(new CommodityToggledEvent(viewModel));
  Receive receive=receiveActivity.generateReceive();
  assertThat(receive.getReceiveItems().size(),is(1));
  assertThat(receive.getReceiveItems().get(0).getCommodity().getName(),is(PANADOL));
  assertThat(receive.getSource(),is(application.getString(R.string.others_for_receive)));
}","@Test public void shouldGenerateAReceiveFromSelectedReceiveCommodities() throws Exception {
  ReceiveActivity receiveActivity=getReceiveActivity();
  ReceiveCommodityViewModel viewModel=new ReceiveCommodityViewModel(new Commodity(PANADOL),3,6);
  EventBus.getDefault().post(new CommodityToggledEvent(viewModel));
  Receive receive=receiveActivity.generateReceive();
  assertThat(receive.getReceiveItems().size(),is(1));
  assertThat(receive.getReceiveItems().get(0).getCommodity().getName(),is(PANADOL));
  assertThat(receive.getSource(),is(application.getString(R.string.others)));
}",0.9898305084745764
146264,"@Test public void shouldGenerateReceiveWithSource() throws Exception {
  ReceiveActivity receiveActivity=getReceiveActivity();
  ReceiveCommodityViewModel viewModel=new ReceiveCommodityViewModel(new Commodity(PANADOL),3,6);
  EventBus.getDefault().post(new CommodityToggledEvent(viewModel));
  String applicationString=application.getString(R.string.zonal_store_for_receive);
  setSource(receiveActivity,applicationString);
  Receive receive=receiveActivity.generateReceive();
  assertThat(receive.getSource(),is(applicationString));
}","@Test public void shouldGenerateReceiveWithSource() throws Exception {
  ReceiveActivity receiveActivity=getReceiveActivity();
  ReceiveCommodityViewModel viewModel=new ReceiveCommodityViewModel(new Commodity(PANADOL),3,6);
  EventBus.getDefault().post(new CommodityToggledEvent(viewModel));
  String applicationString=application.getString(R.string.zonal_store_for_receive);
  setSource(receiveActivity,applicationString);
  Receive receive=receiveActivity.generateReceive();
  assertThat(receive.getSource(),is(application.getString(R.string.zonal_store)));
}",0.9653284671532848
146265,"private List<UtilizationValue> getOpeningBalances(Commodity commodity,Date startDate,Date endDate) throws Exception {
  List<StockItemSnapshot> stockItemSnapshots=stockItemSnapshotService.get(commodity,DateUtil.addDayOfMonth(startDate,-1),endDate);
  List<UtilizationValue> utilizationValues=new ArrayList<>();
  int openingStock=stockItemSnapshotService.getLatestStock(commodity,startDate,true);
  int previousDaysOpeningStock=openingStock;
  Calendar calendar=DateUtil.calendarDate(startDate);
  Date upperLimitDate=DateUtil.addDayOfMonth(endDate,1);
  while (calendar.getTime().before(upperLimitDate)) {
    Date previousDay=DateUtil.addDayOfMonth(calendar.getTime(),-1);
    StockItemSnapshot openingStockSnapshot=stockItemSnapshotService.getSnapshot(previousDay,stockItemSnapshots);
    int openingBalance=openingStockSnapshot == null ? previousDaysOpeningStock : openingStockSnapshot.getQuantity();
    utilizationValues.add(new UtilizationValue(DateUtil.dayNumber(calendar.getTime()),openingBalance));
    previousDaysOpeningStock=openingBalance;
    calendar.add(Calendar.DAY_OF_MONTH,1);
  }
  return utilizationValues;
}","private List<UtilizationValue> getOpeningBalances(Commodity commodity,Date startDate,Date endDate) throws Exception {
  List<StockItemSnapshot> stockItemSnapshots=stockItemSnapshotService.get(commodity,DateUtil.addDayOfMonth(startDate,-1),endDate);
  List<UtilizationValue> utilizationValues=new ArrayList<>();
  int openingStock=stockItemSnapshotService.getOpenningBalance(commodity,startDate);
  int previousDaysOpeningStock=openingStock;
  Calendar calendar=DateUtil.calendarDate(startDate);
  Date upperLimitDate=DateUtil.addDayOfMonth(endDate,1);
  while (calendar.getTime().before(upperLimitDate)) {
    Date previousDay=DateUtil.addDayOfMonth(calendar.getTime(),-1);
    StockItemSnapshot openingStockSnapshot=stockItemSnapshotService.getSnapshot(previousDay,stockItemSnapshots);
    int openingBalance=openingStockSnapshot == null ? previousDaysOpeningStock : openingStockSnapshot.getQuantity();
    utilizationValues.add(new UtilizationValue(DateUtil.dayNumber(calendar.getTime()),openingBalance));
    previousDaysOpeningStock=openingBalance;
    calendar.add(Calendar.DAY_OF_MONTH,1);
  }
  return utilizationValues;
}",0.9862771137671535
146266,"private List<UtilizationValue> getEndingBalance(Commodity commodity,Date startDate,Date endDate) throws Exception {
  List<StockItemSnapshot> stockItemSnapshots=stockItemSnapshotService.get(commodity,DateUtil.addDayOfMonth(startDate,-1),endDate);
  List<UtilizationValue> utilizationValues=new ArrayList<>();
  int previousDaysClosingStock=stockItemSnapshotService.getLatestStock(commodity,startDate,false);
  Calendar calendar=DateUtil.calendarDate(startDate);
  Date upperLimitDate=DateUtil.addDayOfMonth(endDate,1);
  while (calendar.getTime().before(upperLimitDate)) {
    StockItemSnapshot closingStockSnapshot=stockItemSnapshotService.getSnapshot(calendar.getTime(),stockItemSnapshots);
    int closingBalance=closingStockSnapshot == null ? previousDaysClosingStock : closingStockSnapshot.getQuantity();
    UtilizationValue utilizationValue=new UtilizationValue(DateUtil.dayNumber(calendar.getTime()),closingBalance);
    utilizationValues.add(utilizationValue);
    calendar.add(Calendar.DAY_OF_MONTH,1);
    previousDaysClosingStock=closingBalance;
  }
  return utilizationValues;
}","private List<UtilizationValue> getEndingBalance(Commodity commodity,Date startDate,Date endDate) throws Exception {
  List<StockItemSnapshot> stockItemSnapshots=stockItemSnapshotService.get(commodity,DateUtil.addDayOfMonth(startDate,-1),endDate);
  List<UtilizationValue> utilizationValues=new ArrayList<>();
  int previousDaysClosingStock=stockItemSnapshotService.getClosingBalance(commodity,startDate);
  Calendar calendar=DateUtil.calendarDate(startDate);
  Date upperLimitDate=DateUtil.addDayOfMonth(endDate,1);
  while (calendar.getTime().before(upperLimitDate)) {
    StockItemSnapshot closingStockSnapshot=stockItemSnapshotService.getSnapshot(calendar.getTime(),stockItemSnapshots);
    int closingBalance=closingStockSnapshot == null ? previousDaysClosingStock : closingStockSnapshot.getQuantity();
    UtilizationValue utilizationValue=new UtilizationValue(DateUtil.dayNumber(calendar.getTime()),closingBalance);
    utilizationValues.add(utilizationValue);
    calendar.add(Calendar.DAY_OF_MONTH,1);
    previousDaysClosingStock=closingBalance;
  }
  return utilizationValues;
}",0.9857732905002294
146267,"public List<FacilityConsumptionReportRH2Item> getFacilityConsumptionReportRH2Items(Category category,String startingYear,String startingMonth,String endingYear,String endingMonth){
  ArrayList<FacilityConsumptionReportRH2Item> facilityConsumptionReportRH2Items=new ArrayList<>();
  try {
    Date startingDate=convertToDate(startingYear,startingMonth,true);
    Date endDate=convertToDate(endingYear,endingMonth,false);
    category=categoryService.get(category);
    for (    Commodity commodity : category.getCommodities()) {
      int openingStock=stockItemSnapshotService.getLatestStock(commodity,startingDate,true);
      int quantityReceived=GenericService.getTotal(commodity,startingDate,endDate,Receive.class,ReceiveItem.class,context);
      quantityReceived+=adjustmentService.totalAdjustment(commodity,startingDate,endDate,AdjustmentReason.RECEIVED_FROM_ANOTHER_FACILITY);
      int quantityDispensedToClients=GenericService.getTotal(commodity,startingDate,endDate,Dispensing.class,DispensingItem.class,context);
      int quantityLost=GenericService.getTotal(commodity,startingDate,endDate,Loss.class,LossItem.class,context);
      int commoditiesDispensedToFacilities=adjustmentService.totalAdjustment(commodity,startingDate,endDate,AdjustmentReason.SENT_TO_ANOTHER_FACILITY);
      int quantityAdjusted=commoditiesDispensedToFacilities;
      int closingStock=stockItemSnapshotService.getLatestStock(commodity,endDate,false);
      FacilityConsumptionReportRH2Item item=new FacilityConsumptionReportRH2Item(commodity.getName(),openingStock,quantityReceived,quantityDispensedToClients,quantityAdjusted,commoditiesDispensedToFacilities,quantityLost,closingStock);
      facilityConsumptionReportRH2Items.add(item);
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
  return facilityConsumptionReportRH2Items;
}","public List<FacilityConsumptionReportRH2Item> getFacilityConsumptionReportRH2Items(Category category,String startingYear,String startingMonth,String endingYear,String endingMonth){
  ArrayList<FacilityConsumptionReportRH2Item> facilityConsumptionReportRH2Items=new ArrayList<>();
  try {
    Date startingDate=convertToDate(startingYear,startingMonth,true);
    Date endDate=convertToDate(endingYear,endingMonth,false);
    category=categoryService.get(category);
    for (    Commodity commodity : category.getCommodities()) {
      int openingStock=stockItemSnapshotService.getOpenningBalance(commodity,startingDate);
      int quantityReceived=GenericService.getTotal(commodity,startingDate,endDate,Receive.class,ReceiveItem.class,context);
      quantityReceived+=adjustmentService.totalAdjustment(commodity,startingDate,endDate,AdjustmentReason.RECEIVED_FROM_ANOTHER_FACILITY);
      int quantityDispensedToClients=GenericService.getTotal(commodity,startingDate,endDate,Dispensing.class,DispensingItem.class,context);
      int quantityLost=GenericService.getTotal(commodity,startingDate,endDate,Loss.class,LossItem.class,context);
      int commoditiesDispensedToFacilities=adjustmentService.totalAdjustment(commodity,startingDate,endDate,AdjustmentReason.SENT_TO_ANOTHER_FACILITY);
      int quantityAdjusted=commoditiesDispensedToFacilities;
      int closingStock=stockItemSnapshotService.getClosingBalance(commodity,endDate);
      FacilityConsumptionReportRH2Item item=new FacilityConsumptionReportRH2Item(commodity.getName(),openingStock,quantityReceived,quantityDispensedToClients,quantityAdjusted,commoditiesDispensedToFacilities,quantityLost,closingStock);
      facilityConsumptionReportRH2Items.add(item);
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
  return facilityConsumptionReportRH2Items;
}",0.9622437971952535
146268,"public BinCard generateBinCard(Commodity commodity) throws Exception {
  List<String> receiveSources=Arrays.asList(context.getString(R.string.lga),context.getString(R.string.zonal_store),context.getString(R.string.others));
  Date today=new Date();
  Date tomorrow=DateUtil.addDayOfMonth(today,1);
  Date startDate=DateUtil.addDayOfMonth(today,-31);
  List<ReceiveItem> receiveItems=GenericService.getItems(commodity,startDate,today,Receive.class,ReceiveItem.class,context);
  List<DispensingItem> dispensingItems=GenericService.getItems(commodity,startDate,today,Dispensing.class,DispensingItem.class,context);
  List<LossItem> lossItems=GenericService.getItems(commodity,startDate,today,Loss.class,LossItem.class,context);
  List<StockItemSnapshot> stockItemSnapshots=stockItemSnapshotService.get(commodity,startDate,today);
  List<Adjustment> adjustments=adjustmentService.getAdjustments(commodity,startDate,today);
  int previousDaysClosingStock=stockItemSnapshotService.getLatestStock(commodity,startDate,false);
  List<BinCardItem> binCardItems=new ArrayList<>();
  Date date=startDate;
  while (date.before(tomorrow)) {
    List<BinCardItem> binCardItemsForDate=new ArrayList<>();
    int quantityDispensed=GenericService.getTotal(date,dispensingItems);
    int quantityLost=GenericService.getTotal(date,lossItems);
    int closingBalance=previousDaysClosingStock;
    List<ReceivedBySource> receivedBySources=new ArrayList<>();
    for (    final String source : receiveSources) {
      List<ReceiveItem> receiveItemsForDate=getItemsByDate(date,receiveItems);
      List<ReceiveItem> sourceReceiveItems=FluentIterable.from(receiveItemsForDate).filter(new Predicate<ReceiveItem>(){
        @Override public boolean apply(        ReceiveItem input){
          return input.getReceive().getSource().equalsIgnoreCase(source);
        }
      }
).toList();
      int quantityReceived=0;
      if (sourceReceiveItems != null) {
        for (        ReceiveItem item : sourceReceiveItems) {
          quantityReceived+=item.getQuantity();
        }
      }
      if (quantityReceived > 0) {
        receivedBySources.add(new ReceivedBySource(quantityReceived,source));
      }
    }
    int quantitySentToAnotherFacility=adjustmentService.totalAdjustment(commodity,adjustments,date,AdjustmentReason.SENT_TO_ANOTHER_FACILITY);
    int quantityReceivedFromAnotherFacility=adjustmentService.totalAdjustment(commodity,adjustments,date,AdjustmentReason.RECEIVED_FROM_ANOTHER_FACILITY);
    int quantityAdjusted=adjustmentService.totalAdjustment(commodity,adjustments,date,Arrays.asList(AdjustmentReason.PHYSICAL_COUNT,AdjustmentReason.RETURNED_TO_LGA));
    StockItemSnapshot dayStockItemSnapshot=stockItemSnapshotService.getSnapshot(date,stockItemSnapshots);
    if (dayStockItemSnapshot != null) {
      closingBalance=dayStockItemSnapshot.getQuantity();
    }
    if (quantityDispensed > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,quantityDispensed,0,0,-1));
    }
    if (quantityLost > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,0,quantityLost,0,-1));
    }
    if (quantityAdjusted > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,0,0,quantityAdjusted,-1));
    }
    if (quantityReceivedFromAnotherFacility > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,0,0,quantityReceivedFromAnotherFacility,-1));
    }
    if (quantitySentToAnotherFacility > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,0,0,quantitySentToAnotherFacility,-1));
    }
    for (    ReceivedBySource source : receivedBySources) {
      binCardItemsForDate.add(new BinCardItem(date,source.getSource(),source.getQuantityReceived(),0,0,0,-1));
    }
    if (binCardItemsForDate.size() > 0) {
      binCardItemsForDate.get(binCardItemsForDate.size() - 1).setStockBalance(closingBalance);
    }
    binCardItems.addAll(binCardItemsForDate);
    previousDaysClosingStock=closingBalance;
    date=DateUtil.addDayOfMonth(date,1);
  }
  return new BinCard(commodity.getMinimumThreshold(),commodity.getMaximumThreshold(),binCardItems,commodity);
}","public BinCard generateBinCard(Commodity commodity) throws Exception {
  List<String> receiveSources=Arrays.asList(context.getString(R.string.lga),context.getString(R.string.zonal_store),context.getString(R.string.others));
  Date today=new Date();
  Date tomorrow=DateUtil.addDayOfMonth(today,1);
  Date startDate=DateUtil.addDayOfMonth(today,-31);
  List<ReceiveItem> receiveItems=GenericService.getItems(commodity,startDate,today,Receive.class,ReceiveItem.class,context);
  List<DispensingItem> dispensingItems=GenericService.getItems(commodity,startDate,today,Dispensing.class,DispensingItem.class,context);
  List<LossItem> lossItems=GenericService.getItems(commodity,startDate,today,Loss.class,LossItem.class,context);
  List<StockItemSnapshot> stockItemSnapshots=stockItemSnapshotService.get(commodity,startDate,today);
  List<Adjustment> adjustments=adjustmentService.getAdjustments(commodity,startDate,today);
  int previousDaysClosingStock=stockItemSnapshotService.getClosingBalance(commodity,startDate);
  List<BinCardItem> binCardItems=new ArrayList<>();
  Date date=startDate;
  while (date.before(tomorrow)) {
    List<BinCardItem> binCardItemsForDate=new ArrayList<>();
    int quantityDispensed=GenericService.getTotal(date,dispensingItems);
    int quantityLost=GenericService.getTotal(date,lossItems);
    int closingBalance=previousDaysClosingStock;
    List<ReceivedBySource> receivedBySources=new ArrayList<>();
    for (    final String source : receiveSources) {
      List<ReceiveItem> receiveItemsForDate=getItemsByDate(date,receiveItems);
      List<ReceiveItem> sourceReceiveItems=FluentIterable.from(receiveItemsForDate).filter(new Predicate<ReceiveItem>(){
        @Override public boolean apply(        ReceiveItem input){
          return input.getReceive().getSource().equalsIgnoreCase(source);
        }
      }
).toList();
      int quantityReceived=0;
      if (sourceReceiveItems != null) {
        for (        ReceiveItem item : sourceReceiveItems) {
          quantityReceived+=item.getQuantity();
        }
      }
      if (quantityReceived > 0) {
        receivedBySources.add(new ReceivedBySource(quantityReceived,source));
      }
    }
    int quantitySentToAnotherFacility=adjustmentService.totalAdjustment(commodity,adjustments,date,AdjustmentReason.SENT_TO_ANOTHER_FACILITY);
    int quantityReceivedFromAnotherFacility=adjustmentService.totalAdjustment(commodity,adjustments,date,AdjustmentReason.RECEIVED_FROM_ANOTHER_FACILITY);
    int quantityAdjusted=adjustmentService.totalAdjustment(commodity,adjustments,date,Arrays.asList(AdjustmentReason.PHYSICAL_COUNT,AdjustmentReason.RETURNED_TO_LGA));
    StockItemSnapshot dayStockItemSnapshot=stockItemSnapshotService.getSnapshot(date,stockItemSnapshots);
    if (dayStockItemSnapshot != null) {
      closingBalance=dayStockItemSnapshot.getQuantity();
    }
    if (quantityDispensed > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,quantityDispensed,0,0,-1));
    }
    if (quantityLost > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,0,quantityLost,0,-1));
    }
    if (quantityAdjusted > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,0,0,quantityAdjusted,-1));
    }
    if (quantityReceivedFromAnotherFacility > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,0,0,quantityReceivedFromAnotherFacility,-1));
    }
    if (quantitySentToAnotherFacility > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,0,0,quantitySentToAnotherFacility,-1));
    }
    for (    ReceivedBySource source : receivedBySources) {
      binCardItemsForDate.add(new BinCardItem(date,source.getSource(),source.getQuantityReceived(),0,0,0,-1));
    }
    if (binCardItemsForDate.size() > 0) {
      binCardItemsForDate.get(binCardItemsForDate.size() - 1).setStockBalance(closingBalance);
    }
    binCardItems.addAll(binCardItemsForDate);
    previousDaysClosingStock=closingBalance;
    date=DateUtil.addDayOfMonth(date,1);
  }
  return new BinCard(commodity.getMinimumThreshold(),commodity.getMaximumThreshold(),binCardItems,commodity);
}",0.9917117117117116
146269,"public List<FacilityStockReportItem> getFacilityReportItemsForCategory(Category category,String startingYear,String startingMonth,String endingYear,String endingMonth){
  ArrayList<FacilityStockReportItem> facilityStockReportItems=new ArrayList<>();
  try {
    Date startingDate=convertToDate(startingYear,startingMonth,true);
    Date endDate=convertToDate(endingYear,endingMonth,false);
    category=categoryService.get(category);
    for (    Commodity commodity : category.getCommodities()) {
      int openingStock=stockItemSnapshotService.getLatestStock(commodity,startingDate,true);
      int quantityReceived=GenericService.getTotal(commodity,startingDate,endDate,Receive.class,ReceiveItem.class,context);
      int quantityDispensed=GenericService.getTotal(commodity,startingDate,endDate,Dispensing.class,DispensingItem.class,context);
      int quantityLost=GenericService.getTotal(commodity,startingDate,endDate,Loss.class,LossItem.class,context);
      int minThreshold=commodityActionService.getMonthlyValue(commodity,startingDate,endDate,DataElementType.MIN_STOCK_QUANTITY);
      int quantityAdjusted=adjustmentService.totalAdjustment(commodity,startingDate,endDate);
      int stockOnHand=stockItemSnapshotService.getLatestStock(commodity,endDate,false);
      int amc=commodityActionService.getMonthlyValue(commodity,startingDate,endDate,DataElementType.AMC);
      int maxThreshold=commodityActionService.getMonthlyValue(commodity,startingDate,endDate,DataElementType.MAX_STOCK_QUANTITY);
      int stockOutDays=stockItemSnapshotService.getStockOutDays(commodity,startingDate,endDate);
      FacilityStockReportItem item=new FacilityStockReportItem(commodity.getName(),openingStock,quantityReceived,quantityAdjusted,quantityLost,amc,stockOutDays,maxThreshold,minThreshold,quantityDispensed,stockOnHand);
      facilityStockReportItems.add(item);
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
  return facilityStockReportItems;
}","public List<FacilityStockReportItem> getFacilityReportItemsForCategory(Category category,String startingYear,String startingMonth,String endingYear,String endingMonth){
  ArrayList<FacilityStockReportItem> facilityStockReportItems=new ArrayList<>();
  try {
    Date startingDate=convertToDate(startingYear,startingMonth,true);
    Date endDate=convertToDate(endingYear,endingMonth,false);
    category=categoryService.get(category);
    for (    Commodity commodity : category.getCommodities()) {
      int openingStock=stockItemSnapshotService.getOpenningBalance(commodity,startingDate);
      int quantityReceived=GenericService.getTotal(commodity,startingDate,endDate,Receive.class,ReceiveItem.class,context);
      int quantityDispensed=GenericService.getTotal(commodity,startingDate,endDate,Dispensing.class,DispensingItem.class,context);
      int quantityLost=GenericService.getTotal(commodity,startingDate,endDate,Loss.class,LossItem.class,context);
      int minThreshold=commodityActionService.getMonthlyValue(commodity,startingDate,endDate,DataElementType.MIN_STOCK_QUANTITY);
      int quantityAdjusted=adjustmentService.totalAdjustment(commodity,startingDate,endDate);
      int stockOnHand=stockItemSnapshotService.getClosingBalance(commodity,endDate);
      int amc=commodityActionService.getMonthlyValue(commodity,startingDate,endDate,DataElementType.AMC);
      int maxThreshold=commodityActionService.getMonthlyValue(commodity,startingDate,endDate,DataElementType.MAX_STOCK_QUANTITY);
      int stockOutDays=stockItemSnapshotService.getStockOutDays(commodity,startingDate,endDate);
      FacilityStockReportItem item=new FacilityStockReportItem(commodity.getName(),openingStock,quantityReceived,quantityAdjusted,quantityLost,amc,stockOutDays,maxThreshold,minThreshold,quantityDispensed,stockOnHand);
      facilityStockReportItems.add(item);
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
  return facilityStockReportItems;
}",0.9646999495713564
146270,"public int getStockOutDays(Commodity commodity,Date startingDate,Date endDate) throws Exception {
  int openingStock=getLatestStock(commodity,startingDate,true);
  int numOfStockOutDays=0;
  List<StockItemSnapshot> snapshots=get(commodity,startingDate,endDate);
  Date closingDate=DateUtil.addDayOfMonth(endDate);
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(startingDate);
  while (calendar.getTime().before(closingDate)) {
    StockItemSnapshot stockItemSnapshot=getSnapshot(calendar.getTime(),snapshots);
    if (stockItemSnapshot != null && stockItemSnapshot.isStockOut() || stockItemSnapshot == null && openingStock == 0) {
      numOfStockOutDays++;
    }
    if (stockItemSnapshot != null) {
      openingStock=stockItemSnapshot.getQuantity();
    }
    calendar.add(Calendar.DAY_OF_MONTH,1);
  }
  return numOfStockOutDays;
}","public int getStockOutDays(Commodity commodity,Date startingDate,Date endDate) throws Exception {
  int openingStock=getOpenningBalance(commodity,startingDate);
  int numOfStockOutDays=0;
  List<StockItemSnapshot> snapshots=get(commodity,startingDate,endDate);
  Date closingDate=DateUtil.addDayOfMonth(endDate);
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(startingDate);
  while (calendar.getTime().before(closingDate)) {
    StockItemSnapshot stockItemSnapshot=getSnapshot(calendar.getTime(),snapshots);
    if (stockItemSnapshot != null && stockItemSnapshot.isStockOut() || stockItemSnapshot == null && openingStock == 0) {
      numOfStockOutDays++;
    }
    if (stockItemSnapshot != null) {
      openingStock=stockItemSnapshot.getQuantity();
    }
    calendar.add(Calendar.DAY_OF_MONTH,1);
  }
  return numOfStockOutDays;
}",0.9817754262198708
146271,"public int getLatestStock(Commodity commodity,Date date,boolean isOpeningStock,List<StockItemSnapshot> stockItemSnapshots) throws Exception {
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(date);
  if (isOpeningStock) {
    calendar.add(Calendar.DAY_OF_MONTH,-1);
  }
  Date requiredDate=calendar.getTime();
  StockItemSnapshot latestStockItemSnapshot=getLatest(commodity,requiredDate);
  if (latestStockItemSnapshot != null) {
    return latestStockItemSnapshot.getQuantity();
  }
  return 0;
}","@SuppressWarnings(""String_Node_Str"") public int getLatestStock(Commodity commodity,Date date,boolean isOpeningStock,List<StockItemSnapshot> stockItemSnapshots) throws Exception {
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(date);
  if (isOpeningStock) {
    calendar.add(Calendar.DAY_OF_MONTH,-1);
  }
  Date requiredDate=calendar.getTime();
  StockItemSnapshot latestStockItemSnapshot=getLatest(commodity,requiredDate);
  if (latestStockItemSnapshot != null) {
    return latestStockItemSnapshot.getQuantity();
  }
  return 0;
}",0.9650613786591123
146272,"@Override protected void beforeSetUpCommoditySearch(){
  Intent intent=getIntent();
  String allocationId=intent.getStringExtra(ALLOCATION_ID);
  if (StringUtils.isNotBlank(allocationId)) {
    Allocation allocationWithId=allocationService.getAllocationByLmisId(allocationId);
    if (allocationWithId != null && !allocationWithId.isReceived()) {
      presetAllocationId=allocationId;
    }
  }
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getApplicationContext(),R.layout.spinner_item_black,getReceiveSources());
  spinnerSource.setAdapter(adapter);
  spinnerSource.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> adapterView,    View view,    int position,    long l){
      String selected=getReceiveSources().get(position);
      if (selected.contains(getString(R.string.lga))) {
        setAllocation(textViewAllocationId.getText().toString());
        textViewAllocationId.setEnabled(true);
        textViewAllocationId.setVisibility(View.VISIBLE);
        textViewAllocationLabel.setVisibility(View.VISIBLE);
      }
 else {
        allocation=null;
        textViewAllocationId.setError(null);
        textViewAllocationId.setVisibility(View.INVISIBLE);
        textViewAllocationLabel.setVisibility(View.INVISIBLE);
        textViewAllocationId.setEnabled(false);
      }
      List<CommodityToggledEvent> events=new ArrayList<CommodityToggledEvent>();
      if (selected.contains(getString(R.string.zonal_store))) {
        for (        BaseCommodityViewModel model : selectedCommodities) {
          if (!model.getCommodity().isNonLGA()) {
            events.add(new CommodityToggledEvent(model));
          }
        }
      }
 else {
        for (        BaseCommodityViewModel model : selectedCommodities) {
          if (model.getCommodity().isNonLGA()) {
            events.add(new CommodityToggledEvent(model));
          }
        }
      }
      for (      CommodityToggledEvent event : events) {
        onEvent(event);
      }
      ((ReceiveCommoditiesAdapter)arrayAdapter).setQuantityAllocatedDisplay(!selected.contains(getString(R.string.others)) && !selected.contains(getString(R.string.zonal_store)));
      arrayAdapter.notifyDataSetChanged();
    }
    @Override public void onNothingSelected(    AdapterView<?> adapterView){
    }
  }
);
}","@Override protected void beforeSetUpCommoditySearch(){
  Intent intent=getIntent();
  String allocationId=intent.getStringExtra(ALLOCATION_ID);
  if (StringUtils.isNotBlank(allocationId)) {
    Allocation allocationWithId=allocationService.getAllocationByLmisId(allocationId);
    if (allocationWithId != null && !allocationWithId.isReceived()) {
      presetAllocationId=allocationId;
    }
  }
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getApplicationContext(),R.layout.spinner_item_black,getReceiveSources());
  spinnerSource.setAdapter(adapter);
  spinnerSource.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> adapterView,    View view,    int position,    long l){
      String selected=getReceiveSources().get(position);
      if (selected.contains(getString(R.string.lga_for_receive))) {
        setAllocation(textViewAllocationId.getText().toString());
        textViewAllocationId.setEnabled(true);
        textViewAllocationId.setVisibility(View.VISIBLE);
        textViewAllocationLabel.setVisibility(View.VISIBLE);
      }
 else {
        allocation=null;
        textViewAllocationId.setError(null);
        textViewAllocationId.setVisibility(View.INVISIBLE);
        textViewAllocationLabel.setVisibility(View.INVISIBLE);
        textViewAllocationId.setEnabled(false);
      }
      List<CommodityToggledEvent> events=new ArrayList<CommodityToggledEvent>();
      if (selected.contains(getString(R.string.zonal_store_for_receive))) {
        for (        BaseCommodityViewModel model : selectedCommodities) {
          if (!model.getCommodity().isNonLGA()) {
            events.add(new CommodityToggledEvent(model));
          }
        }
      }
 else {
        for (        BaseCommodityViewModel model : selectedCommodities) {
          if (model.getCommodity().isNonLGA()) {
            events.add(new CommodityToggledEvent(model));
          }
        }
      }
      for (      CommodityToggledEvent event : events) {
        onEvent(event);
      }
      ((ReceiveCommoditiesAdapter)arrayAdapter).setQuantityAllocatedDisplay(!selected.contains(getString(R.string.others_for_receive)) && !selected.contains(getString(R.string.zonal_store_for_receive)));
      arrayAdapter.notifyDataSetChanged();
    }
    @Override public void onNothingSelected(    AdapterView<?> adapterView){
    }
  }
);
}",0.9899328859060402
146273,"public Receive generateReceive(){
  if ((allocation == null && spinnerSource.getSelectedItem().toString().contains(getString(R.string.lga))) || (allocation != null && allocation.isDummy())) {
    generateDummyAllocation(textViewAllocationId.getText().toString().trim());
  }
  Receive receive=new Receive(spinnerSource.getSelectedItem().toString(),allocation);
  for (int i=0; i < arrayAdapter.getCount(); i++) {
    ReceiveCommodityViewModel viewModel=(ReceiveCommodityViewModel)arrayAdapter.getItem(i);
    ReceiveItem receiveItem=viewModel.getReceiveItem();
    receive.addReceiveItem(receiveItem);
  }
  return receive;
}","public Receive generateReceive(){
  if ((allocation == null && spinnerSource.getSelectedItem().toString().contains(getString(R.string.lga_for_receive))) || (allocation != null && allocation.isDummy())) {
    generateDummyAllocation(textViewAllocationId.getText().toString().trim());
  }
  Receive receive=new Receive(spinnerSource.getSelectedItem().toString(),allocation);
  for (int i=0; i < arrayAdapter.getCount(); i++) {
    ReceiveCommodityViewModel viewModel=(ReceiveCommodityViewModel)arrayAdapter.getItem(i);
    ReceiveItem receiveItem=viewModel.getReceiveItem();
    receive.addReceiveItem(receiveItem);
  }
  return receive;
}",0.9904912836767036
146274,"@Override public boolean allowClick(BaseCommodityViewModel commodityViewModel){
  if (spinnerSource.getSelectedItem().equals(getString(R.string.zonal_store))) {
    return commodityViewModel.getCommodity().isNonLGA();
  }
 else {
    if (""String_Node_Str"".equals(commodityViewModel.getCommodity().getCategory().getName())) {
      return false;
    }
 else {
      return !commodityViewModel.getCommodity().isNonLGA();
    }
  }
}","@Override public boolean allowClick(BaseCommodityViewModel commodityViewModel){
  String selectedSource=(String)spinnerSource.getSelectedItem();
  if (selectedSource.equals(getString(R.string.zonal_store_for_receive))) {
    return commodityViewModel.getCommodity().isNonLGA();
  }
 else {
    if (selectedSource.equals(getString(R.string.lga_for_receive))) {
      if (allocation == null) {
        return false;
      }
    }
    if (""String_Node_Str"".equals(commodityViewModel.getCommodity().getCategory().getName())) {
      return false;
    }
 else {
      return !commodityViewModel.getCommodity().isNonLGA();
    }
  }
}",0.8052930056710775
146275,"@Override public String getEmptyMessage(){
  String currentSource=spinnerSource.getSelectedItem().toString();
  if (!currentSource.equals(getString(R.string.zonal_store))) {
    return ""String_Node_Str"";
  }
 else {
    return String.format(""String_Node_Str"",currentSource);
  }
}","@Override public String getEmptyMessage(){
  String currentSource=spinnerSource.getSelectedItem().toString();
  if (currentSource.equals(getString(R.string.zonal_store_for_receive))) {
    return String.format(""String_Node_Str"",currentSource);
  }
 else   if (currentSource.equals(getString(R.string.others_for_receive))) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}",0.6872246696035242
146276,"@Override public void onItemSelected(AdapterView<?> adapterView,View view,int position,long l){
  String selected=getReceiveSources().get(position);
  if (selected.contains(getString(R.string.lga))) {
    setAllocation(textViewAllocationId.getText().toString());
    textViewAllocationId.setEnabled(true);
    textViewAllocationId.setVisibility(View.VISIBLE);
    textViewAllocationLabel.setVisibility(View.VISIBLE);
  }
 else {
    allocation=null;
    textViewAllocationId.setError(null);
    textViewAllocationId.setVisibility(View.INVISIBLE);
    textViewAllocationLabel.setVisibility(View.INVISIBLE);
    textViewAllocationId.setEnabled(false);
  }
  List<CommodityToggledEvent> events=new ArrayList<CommodityToggledEvent>();
  if (selected.contains(getString(R.string.zonal_store))) {
    for (    BaseCommodityViewModel model : selectedCommodities) {
      if (!model.getCommodity().isNonLGA()) {
        events.add(new CommodityToggledEvent(model));
      }
    }
  }
 else {
    for (    BaseCommodityViewModel model : selectedCommodities) {
      if (model.getCommodity().isNonLGA()) {
        events.add(new CommodityToggledEvent(model));
      }
    }
  }
  for (  CommodityToggledEvent event : events) {
    onEvent(event);
  }
  ((ReceiveCommoditiesAdapter)arrayAdapter).setQuantityAllocatedDisplay(!selected.contains(getString(R.string.others)) && !selected.contains(getString(R.string.zonal_store)));
  arrayAdapter.notifyDataSetChanged();
}","@Override public void onItemSelected(AdapterView<?> adapterView,View view,int position,long l){
  String selected=getReceiveSources().get(position);
  if (selected.contains(getString(R.string.lga_for_receive))) {
    setAllocation(textViewAllocationId.getText().toString());
    textViewAllocationId.setEnabled(true);
    textViewAllocationId.setVisibility(View.VISIBLE);
    textViewAllocationLabel.setVisibility(View.VISIBLE);
  }
 else {
    allocation=null;
    textViewAllocationId.setError(null);
    textViewAllocationId.setVisibility(View.INVISIBLE);
    textViewAllocationLabel.setVisibility(View.INVISIBLE);
    textViewAllocationId.setEnabled(false);
  }
  List<CommodityToggledEvent> events=new ArrayList<CommodityToggledEvent>();
  if (selected.contains(getString(R.string.zonal_store_for_receive))) {
    for (    BaseCommodityViewModel model : selectedCommodities) {
      if (!model.getCommodity().isNonLGA()) {
        events.add(new CommodityToggledEvent(model));
      }
    }
  }
 else {
    for (    BaseCommodityViewModel model : selectedCommodities) {
      if (model.getCommodity().isNonLGA()) {
        events.add(new CommodityToggledEvent(model));
      }
    }
  }
  for (  CommodityToggledEvent event : events) {
    onEvent(event);
  }
  ((ReceiveCommoditiesAdapter)arrayAdapter).setQuantityAllocatedDisplay(!selected.contains(getString(R.string.others_for_receive)) && !selected.contains(getString(R.string.zonal_store_for_receive)));
  arrayAdapter.notifyDataSetChanged();
}",0.9837947332883188
146277,"public List<String> getReceiveSources(){
  return Arrays.asList(getString(R.string.lga),getString(R.string.zonal_store),getString(R.string.others));
}","public List<String> getReceiveSources(){
  return Arrays.asList(getString(R.string.others_for_receive),getString(R.string.zonal_store_for_receive),getString(R.string.lga_for_receive));
}",0.8511904761904762
146278,"@Override protected CommodityDisplayStrategy getCheckBoxVisibilityStrategy(){
  return new CommodityDisplayStrategy(){
    @Override public boolean allowClick(    BaseCommodityViewModel commodityViewModel){
      if (spinnerSource.getSelectedItem().equals(getString(R.string.zonal_store))) {
        return commodityViewModel.getCommodity().isNonLGA();
      }
 else {
        if (""String_Node_Str"".equals(commodityViewModel.getCommodity().getCategory().getName())) {
          return false;
        }
 else {
          return !commodityViewModel.getCommodity().isNonLGA();
        }
      }
    }
    @Override public String getMessage(){
      return String.format(""String_Node_Str"",spinnerSource.getSelectedItem().toString());
    }
    @Override public String getEmptyMessage(){
      String currentSource=spinnerSource.getSelectedItem().toString();
      if (!currentSource.equals(getString(R.string.zonal_store))) {
        return ""String_Node_Str"";
      }
 else {
        return String.format(""String_Node_Str"",currentSource);
      }
    }
    @Override public boolean hideCommodities(){
      return true;
    }
  }
;
}","@Override protected CommodityDisplayStrategy getCheckBoxVisibilityStrategy(){
  return new CommodityDisplayStrategy(){
    @Override public boolean allowClick(    BaseCommodityViewModel commodityViewModel){
      String selectedSource=(String)spinnerSource.getSelectedItem();
      if (selectedSource.equals(getString(R.string.zonal_store_for_receive))) {
        return commodityViewModel.getCommodity().isNonLGA();
      }
 else {
        if (selectedSource.equals(getString(R.string.lga_for_receive))) {
          if (allocation == null) {
            return false;
          }
        }
        if (""String_Node_Str"".equals(commodityViewModel.getCommodity().getCategory().getName())) {
          return false;
        }
 else {
          return !commodityViewModel.getCommodity().isNonLGA();
        }
      }
    }
    @Override public String getMessage(){
      return String.format(""String_Node_Str"",spinnerSource.getSelectedItem().toString());
    }
    @Override public String getEmptyMessage(){
      String currentSource=spinnerSource.getSelectedItem().toString();
      if (currentSource.equals(getString(R.string.zonal_store_for_receive))) {
        return String.format(""String_Node_Str"",currentSource);
      }
 else       if (currentSource.equals(getString(R.string.others_for_receive))) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
    @Override public boolean hideCommodities(){
      return true;
    }
  }
;
}",0.8182166092613854
146279,"public void syncSOHWithServer(User user){
  List<CommoditySnapshot> sohSnapshotsToSync=new ArrayList<>();
  for (  Commodity commodity : commodityService.sortedAll()) {
    try {
      List<CommoditySnapshotValue> commoditySnapshotValues=stohService.getLatest(commodity,new Date()).getActivitiesValues();
      for (      CommoditySnapshotValue value : commoditySnapshotValues) {
        sohSnapshotsToSync.add(new CommoditySnapshot(value));
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      continue;
    }
  }
  if (!isEmpty(sohSnapshotsToSync)) {
    i(""String_Node_Str"",sohSnapshotsToSync.size() + ""String_Node_Str"");
    DataValueSet valueSet=toDataValueSet(sohSnapshotsToSync,user.getFacilityCode());
    try {
      DataValueSetPushResponse response=lmisServer.pushDataValueSet(valueSet,user);
    }
 catch (    LmisException ex) {
      e(""String_Node_Str"",sohSnapshotsToSync.size() + ""String_Node_Str"");
    }
  }
}","public void syncSOHWithServer(User user){
  List<CommoditySnapshot> sohSnapshotsToSync=new ArrayList<>();
  final Date dateOfYesterday=getDateOfYesterday();
  final Date dateOfToday=new Date();
  for (  Commodity commodity : commodityService.sortedAll()) {
    try {
      int quantityOfYesterday=0, quantityOfToday=0;
      StockItemSnapshot sohOfYesterday=stohService.get(commodity,dateOfYesterday);
      StockItemSnapshot sohOfToday=stohService.get(commodity,dateOfToday);
      if (sohOfYesterday != null) {
        quantityOfYesterday=sohOfYesterday.getQuantity();
      }
      if (sohOfToday != null) {
        sohOfToday.setQuantity(sohOfToday.getQuantity() + quantityOfYesterday);
        quantityOfToday=sohOfToday.getQuantity();
      }
      sohOfToday=stohService.createOrUpdate(commodity,quantityOfToday,dateOfToday);
      if (sohOfToday != null && sohOfToday.getActivitiesValues() != null) {
        for (        CommoditySnapshotValue value : sohOfToday.getActivitiesValues()) {
          sohSnapshotsToSync.add(new CommoditySnapshot(value));
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      continue;
    }
  }
  if (!isEmpty(sohSnapshotsToSync)) {
    i(""String_Node_Str"",sohSnapshotsToSync.size() + ""String_Node_Str"");
    DataValueSet valueSet=toDataValueSet(sohSnapshotsToSync,user.getFacilityCode());
    try {
      DataValueSetPushResponse response=lmisServer.pushDataValueSet(valueSet,user);
    }
 catch (    LmisException ex) {
      e(""String_Node_Str"",sohSnapshotsToSync.size() + ""String_Node_Str"");
    }
  }
}",0.6724752475247525
146280,"private List<UtilizationValue> getOpeningBalances(Commodity commodity,Date startDate,Date endDate) throws Exception {
  List<StockItemSnapshot> stockItemSnapshots=stockItemSnapshotService.get(commodity,DateUtil.addDayOfMonth(startDate,-1),endDate);
  List<UtilizationValue> utilizationValues=new ArrayList<>();
  int openingStock=stockItemSnapshotService.getOpenningBalance(commodity,startDate);
  int previousDaysOpeningStock=openingStock;
  Calendar calendar=DateUtil.calendarDate(startDate);
  Date upperLimitDate=DateUtil.addDayOfMonth(endDate,1);
  while (calendar.getTime().before(upperLimitDate)) {
    Date previousDay=DateUtil.addDayOfMonth(calendar.getTime(),-1);
    StockItemSnapshot openingStockSnapshot=stockItemSnapshotService.getSnapshot(previousDay,stockItemSnapshots);
    int openingBalance=openingStockSnapshot == null ? previousDaysOpeningStock : openingStockSnapshot.getQuantity();
    utilizationValues.add(new UtilizationValue(DateUtil.dayNumber(calendar.getTime()),openingBalance));
    previousDaysOpeningStock=openingBalance;
    calendar.add(Calendar.DAY_OF_MONTH,1);
  }
  return utilizationValues;
}","private List<UtilizationValue> getOpeningBalances(Commodity commodity,Date startDate,Date endDate) throws Exception {
  List<StockItemSnapshot> stockItemSnapshots=stockItemSnapshotService.get(commodity,DateUtil.addDayOfMonth(startDate,-1),endDate);
  List<UtilizationValue> utilizationValues=new ArrayList<>();
  int openingStock=stockItemSnapshotService.getLatestStock(commodity,startDate,true);
  int previousDaysOpeningStock=openingStock;
  Calendar calendar=DateUtil.calendarDate(startDate);
  Date upperLimitDate=DateUtil.addDayOfMonth(endDate,1);
  while (calendar.getTime().before(upperLimitDate)) {
    Date previousDay=DateUtil.addDayOfMonth(calendar.getTime(),-1);
    StockItemSnapshot openingStockSnapshot=stockItemSnapshotService.getSnapshot(previousDay,stockItemSnapshots);
    int openingBalance=openingStockSnapshot == null ? previousDaysOpeningStock : openingStockSnapshot.getQuantity();
    utilizationValues.add(new UtilizationValue(DateUtil.dayNumber(calendar.getTime()),openingBalance));
    previousDaysOpeningStock=openingBalance;
    calendar.add(Calendar.DAY_OF_MONTH,1);
  }
  return utilizationValues;
}",0.9862771137671535
146281,"private List<UtilizationValue> getEndingBalance(Commodity commodity,Date startDate,Date endDate) throws Exception {
  List<StockItemSnapshot> stockItemSnapshots=stockItemSnapshotService.get(commodity,DateUtil.addDayOfMonth(startDate,-1),endDate);
  List<UtilizationValue> utilizationValues=new ArrayList<>();
  int previousDaysClosingStock=stockItemSnapshotService.getClosingBalance(commodity,startDate);
  Calendar calendar=DateUtil.calendarDate(startDate);
  Date upperLimitDate=DateUtil.addDayOfMonth(endDate,1);
  while (calendar.getTime().before(upperLimitDate)) {
    StockItemSnapshot closingStockSnapshot=stockItemSnapshotService.getSnapshot(calendar.getTime(),stockItemSnapshots);
    int closingBalance=closingStockSnapshot == null ? previousDaysClosingStock : closingStockSnapshot.getQuantity();
    UtilizationValue utilizationValue=new UtilizationValue(DateUtil.dayNumber(calendar.getTime()),closingBalance);
    utilizationValues.add(utilizationValue);
    calendar.add(Calendar.DAY_OF_MONTH,1);
    previousDaysClosingStock=closingBalance;
  }
  return utilizationValues;
}","private List<UtilizationValue> getEndingBalance(Commodity commodity,Date startDate,Date endDate) throws Exception {
  List<StockItemSnapshot> stockItemSnapshots=stockItemSnapshotService.get(commodity,DateUtil.addDayOfMonth(startDate,-1),endDate);
  List<UtilizationValue> utilizationValues=new ArrayList<>();
  int previousDaysClosingStock=stockItemSnapshotService.getLatestStock(commodity,startDate,false);
  Calendar calendar=DateUtil.calendarDate(startDate);
  Date upperLimitDate=DateUtil.addDayOfMonth(endDate,1);
  while (calendar.getTime().before(upperLimitDate)) {
    StockItemSnapshot closingStockSnapshot=stockItemSnapshotService.getSnapshot(calendar.getTime(),stockItemSnapshots);
    int closingBalance=closingStockSnapshot == null ? previousDaysClosingStock : closingStockSnapshot.getQuantity();
    UtilizationValue utilizationValue=new UtilizationValue(DateUtil.dayNumber(calendar.getTime()),closingBalance);
    utilizationValues.add(utilizationValue);
    calendar.add(Calendar.DAY_OF_MONTH,1);
    previousDaysClosingStock=closingBalance;
  }
  return utilizationValues;
}",0.9857732905002294
146282,"public List<FacilityConsumptionReportRH2Item> getFacilityConsumptionReportRH2Items(Category category,String startingYear,String startingMonth,String endingYear,String endingMonth){
  ArrayList<FacilityConsumptionReportRH2Item> facilityConsumptionReportRH2Items=new ArrayList<>();
  try {
    Date startingDate=convertToDate(startingYear,startingMonth,true);
    Date endDate=convertToDate(endingYear,endingMonth,false);
    category=categoryService.get(category);
    for (    Commodity commodity : category.getCommodities()) {
      int openingStock=stockItemSnapshotService.getOpenningBalance(commodity,startingDate);
      int quantityReceived=GenericService.getTotal(commodity,startingDate,endDate,Receive.class,ReceiveItem.class,context);
      quantityReceived+=adjustmentService.totalAdjustment(commodity,startingDate,endDate,AdjustmentReason.RECEIVED_FROM_ANOTHER_FACILITY);
      int quantityDispensedToClients=GenericService.getTotal(commodity,startingDate,endDate,Dispensing.class,DispensingItem.class,context);
      int quantityLost=GenericService.getTotal(commodity,startingDate,endDate,Loss.class,LossItem.class,context);
      int commoditiesDispensedToFacilities=adjustmentService.totalAdjustment(commodity,startingDate,endDate,AdjustmentReason.SENT_TO_ANOTHER_FACILITY);
      int quantityAdjusted=commoditiesDispensedToFacilities;
      int closingStock=stockItemSnapshotService.getClosingBalance(commodity,endDate);
      FacilityConsumptionReportRH2Item item=new FacilityConsumptionReportRH2Item(commodity.getName(),openingStock,quantityReceived,quantityDispensedToClients,quantityAdjusted,commoditiesDispensedToFacilities,quantityLost,closingStock);
      facilityConsumptionReportRH2Items.add(item);
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
  return facilityConsumptionReportRH2Items;
}","public List<FacilityConsumptionReportRH2Item> getFacilityConsumptionReportRH2Items(Category category,String startingYear,String startingMonth,String endingYear,String endingMonth){
  ArrayList<FacilityConsumptionReportRH2Item> facilityConsumptionReportRH2Items=new ArrayList<>();
  try {
    Date startingDate=convertToDate(startingYear,startingMonth,true);
    Date endDate=convertToDate(endingYear,endingMonth,false);
    category=categoryService.get(category);
    for (    Commodity commodity : category.getCommodities()) {
      int openingStock=stockItemSnapshotService.getLatestStock(commodity,startingDate,true);
      int quantityReceived=GenericService.getTotal(commodity,startingDate,endDate,Receive.class,ReceiveItem.class,context);
      quantityReceived+=adjustmentService.totalAdjustment(commodity,startingDate,endDate,AdjustmentReason.RECEIVED_FROM_ANOTHER_FACILITY);
      int quantityDispensedToClients=GenericService.getTotal(commodity,startingDate,endDate,Dispensing.class,DispensingItem.class,context);
      int quantityLost=GenericService.getTotal(commodity,startingDate,endDate,Loss.class,LossItem.class,context);
      int commoditiesDispensedToFacilities=adjustmentService.totalAdjustment(commodity,startingDate,endDate,AdjustmentReason.SENT_TO_ANOTHER_FACILITY);
      int quantityAdjusted=commoditiesDispensedToFacilities;
      int closingStock=stockItemSnapshotService.getLatestStock(commodity,endDate,false);
      FacilityConsumptionReportRH2Item item=new FacilityConsumptionReportRH2Item(commodity.getName(),openingStock,quantityReceived,quantityDispensedToClients,quantityAdjusted,commoditiesDispensedToFacilities,quantityLost,closingStock);
      facilityConsumptionReportRH2Items.add(item);
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
  return facilityConsumptionReportRH2Items;
}",0.9622437971952535
146283,"public BinCard generateBinCard(Commodity commodity) throws Exception {
  List<String> receiveSources=Arrays.asList(context.getString(R.string.lga),context.getString(R.string.zonal_store),context.getString(R.string.others));
  Date today=new Date();
  Date tomorrow=DateUtil.addDayOfMonth(today,1);
  Date startDate=DateUtil.addDayOfMonth(today,-31);
  List<ReceiveItem> receiveItems=GenericService.getItems(commodity,startDate,today,Receive.class,ReceiveItem.class,context);
  List<DispensingItem> dispensingItems=GenericService.getItems(commodity,startDate,today,Dispensing.class,DispensingItem.class,context);
  List<LossItem> lossItems=GenericService.getItems(commodity,startDate,today,Loss.class,LossItem.class,context);
  List<StockItemSnapshot> stockItemSnapshots=stockItemSnapshotService.get(commodity,startDate,today);
  List<Adjustment> adjustments=adjustmentService.getAdjustments(commodity,startDate,today);
  int previousDaysClosingStock=stockItemSnapshotService.getClosingBalance(commodity,startDate);
  List<BinCardItem> binCardItems=new ArrayList<>();
  Date date=startDate;
  while (date.before(tomorrow)) {
    List<BinCardItem> binCardItemsForDate=new ArrayList<>();
    int quantityDispensed=GenericService.getTotal(date,dispensingItems);
    int quantityLost=GenericService.getTotal(date,lossItems);
    int closingBalance=previousDaysClosingStock;
    List<ReceivedBySource> receivedBySources=new ArrayList<>();
    for (    final String source : receiveSources) {
      List<ReceiveItem> receiveItemsForDate=getItemsByDate(date,receiveItems);
      List<ReceiveItem> sourceReceiveItems=FluentIterable.from(receiveItemsForDate).filter(new Predicate<ReceiveItem>(){
        @Override public boolean apply(        ReceiveItem input){
          return input.getReceive().getSource().equalsIgnoreCase(source);
        }
      }
).toList();
      int quantityReceived=0;
      if (sourceReceiveItems != null) {
        for (        ReceiveItem item : sourceReceiveItems) {
          quantityReceived+=item.getQuantity();
        }
      }
      if (quantityReceived > 0) {
        receivedBySources.add(new ReceivedBySource(quantityReceived,source));
      }
    }
    int quantitySentToAnotherFacility=adjustmentService.totalAdjustment(commodity,adjustments,date,AdjustmentReason.SENT_TO_ANOTHER_FACILITY);
    int quantityReceivedFromAnotherFacility=adjustmentService.totalAdjustment(commodity,adjustments,date,AdjustmentReason.RECEIVED_FROM_ANOTHER_FACILITY);
    int quantityAdjusted=adjustmentService.totalAdjustment(commodity,adjustments,date,Arrays.asList(AdjustmentReason.PHYSICAL_COUNT,AdjustmentReason.RETURNED_TO_LGA));
    StockItemSnapshot dayStockItemSnapshot=stockItemSnapshotService.getSnapshot(date,stockItemSnapshots);
    if (dayStockItemSnapshot != null) {
      closingBalance=dayStockItemSnapshot.getQuantity();
    }
    if (quantityDispensed > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,quantityDispensed,0,0,-1));
    }
    if (quantityLost > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,0,quantityLost,0,-1));
    }
    if (quantityAdjusted > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,0,0,quantityAdjusted,-1));
    }
    if (quantityReceivedFromAnotherFacility > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,0,0,quantityReceivedFromAnotherFacility,-1));
    }
    if (quantitySentToAnotherFacility > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,0,0,quantitySentToAnotherFacility,-1));
    }
    for (    ReceivedBySource source : receivedBySources) {
      binCardItemsForDate.add(new BinCardItem(date,source.getSource(),source.getQuantityReceived(),0,0,0,-1));
    }
    if (binCardItemsForDate.size() > 0) {
      binCardItemsForDate.get(binCardItemsForDate.size() - 1).setStockBalance(closingBalance);
    }
    binCardItems.addAll(binCardItemsForDate);
    previousDaysClosingStock=closingBalance;
    date=DateUtil.addDayOfMonth(date,1);
  }
  return new BinCard(commodity.getMinimumThreshold(),commodity.getMaximumThreshold(),binCardItems,commodity);
}","public BinCard generateBinCard(Commodity commodity) throws Exception {
  List<String> receiveSources=Arrays.asList(context.getString(R.string.lga),context.getString(R.string.zonal_store),context.getString(R.string.others));
  Date today=new Date();
  Date tomorrow=DateUtil.addDayOfMonth(today,1);
  Date startDate=DateUtil.addDayOfMonth(today,-31);
  List<ReceiveItem> receiveItems=GenericService.getItems(commodity,startDate,today,Receive.class,ReceiveItem.class,context);
  List<DispensingItem> dispensingItems=GenericService.getItems(commodity,startDate,today,Dispensing.class,DispensingItem.class,context);
  List<LossItem> lossItems=GenericService.getItems(commodity,startDate,today,Loss.class,LossItem.class,context);
  List<StockItemSnapshot> stockItemSnapshots=stockItemSnapshotService.get(commodity,startDate,today);
  List<Adjustment> adjustments=adjustmentService.getAdjustments(commodity,startDate,today);
  int previousDaysClosingStock=stockItemSnapshotService.getLatestStock(commodity,startDate,false);
  List<BinCardItem> binCardItems=new ArrayList<>();
  Date date=startDate;
  while (date.before(tomorrow)) {
    List<BinCardItem> binCardItemsForDate=new ArrayList<>();
    int quantityDispensed=GenericService.getTotal(date,dispensingItems);
    int quantityLost=GenericService.getTotal(date,lossItems);
    int closingBalance=previousDaysClosingStock;
    List<ReceivedBySource> receivedBySources=new ArrayList<>();
    for (    final String source : receiveSources) {
      List<ReceiveItem> receiveItemsForDate=getItemsByDate(date,receiveItems);
      List<ReceiveItem> sourceReceiveItems=FluentIterable.from(receiveItemsForDate).filter(new Predicate<ReceiveItem>(){
        @Override public boolean apply(        ReceiveItem input){
          return input.getReceive().getSource().equalsIgnoreCase(source);
        }
      }
).toList();
      int quantityReceived=0;
      if (sourceReceiveItems != null) {
        for (        ReceiveItem item : sourceReceiveItems) {
          quantityReceived+=item.getQuantity();
        }
      }
      if (quantityReceived > 0) {
        receivedBySources.add(new ReceivedBySource(quantityReceived,source));
      }
    }
    int quantitySentToAnotherFacility=adjustmentService.totalAdjustment(commodity,adjustments,date,AdjustmentReason.SENT_TO_ANOTHER_FACILITY);
    int quantityReceivedFromAnotherFacility=adjustmentService.totalAdjustment(commodity,adjustments,date,AdjustmentReason.RECEIVED_FROM_ANOTHER_FACILITY);
    int quantityAdjusted=adjustmentService.totalAdjustment(commodity,adjustments,date,Arrays.asList(AdjustmentReason.PHYSICAL_COUNT,AdjustmentReason.RETURNED_TO_LGA));
    StockItemSnapshot dayStockItemSnapshot=stockItemSnapshotService.getSnapshot(date,stockItemSnapshots);
    if (dayStockItemSnapshot != null) {
      closingBalance=dayStockItemSnapshot.getQuantity();
    }
    if (quantityDispensed > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,quantityDispensed,0,0,-1));
    }
    if (quantityLost > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,0,quantityLost,0,-1));
    }
    if (quantityAdjusted > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,0,0,quantityAdjusted,-1));
    }
    if (quantityReceivedFromAnotherFacility > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,0,0,quantityReceivedFromAnotherFacility,-1));
    }
    if (quantitySentToAnotherFacility > 0) {
      binCardItemsForDate.add(new BinCardItem(date,""String_Node_Str"",0,0,0,quantitySentToAnotherFacility,-1));
    }
    for (    ReceivedBySource source : receivedBySources) {
      binCardItemsForDate.add(new BinCardItem(date,source.getSource(),source.getQuantityReceived(),0,0,0,-1));
    }
    if (binCardItemsForDate.size() > 0) {
      binCardItemsForDate.get(binCardItemsForDate.size() - 1).setStockBalance(closingBalance);
    }
    binCardItems.addAll(binCardItemsForDate);
    previousDaysClosingStock=closingBalance;
    date=DateUtil.addDayOfMonth(date,1);
  }
  return new BinCard(commodity.getMinimumThreshold(),commodity.getMaximumThreshold(),binCardItems,commodity);
}",0.9917117117117116
146284,"public List<FacilityStockReportItem> getFacilityReportItemsForCategory(Category category,String startingYear,String startingMonth,String endingYear,String endingMonth){
  ArrayList<FacilityStockReportItem> facilityStockReportItems=new ArrayList<>();
  try {
    Date startingDate=convertToDate(startingYear,startingMonth,true);
    Date endDate=convertToDate(endingYear,endingMonth,false);
    category=categoryService.get(category);
    for (    Commodity commodity : category.getCommodities()) {
      int openingStock=stockItemSnapshotService.getOpenningBalance(commodity,startingDate);
      int quantityReceived=GenericService.getTotal(commodity,startingDate,endDate,Receive.class,ReceiveItem.class,context);
      int quantityDispensed=GenericService.getTotal(commodity,startingDate,endDate,Dispensing.class,DispensingItem.class,context);
      int quantityLost=GenericService.getTotal(commodity,startingDate,endDate,Loss.class,LossItem.class,context);
      int minThreshold=commodityActionService.getMonthlyValue(commodity,startingDate,endDate,DataElementType.MIN_STOCK_QUANTITY);
      int quantityAdjusted=adjustmentService.totalAdjustment(commodity,startingDate,endDate);
      int stockOnHand=stockItemSnapshotService.getClosingBalance(commodity,endDate);
      int amc=commodityActionService.getMonthlyValue(commodity,startingDate,endDate,DataElementType.AMC);
      int maxThreshold=commodityActionService.getMonthlyValue(commodity,startingDate,endDate,DataElementType.MAX_STOCK_QUANTITY);
      int stockOutDays=stockItemSnapshotService.getStockOutDays(commodity,startingDate,endDate);
      FacilityStockReportItem item=new FacilityStockReportItem(commodity.getName(),openingStock,quantityReceived,quantityAdjusted,quantityLost,amc,stockOutDays,maxThreshold,minThreshold,quantityDispensed,stockOnHand);
      facilityStockReportItems.add(item);
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
  return facilityStockReportItems;
}","public List<FacilityStockReportItem> getFacilityReportItemsForCategory(Category category,String startingYear,String startingMonth,String endingYear,String endingMonth){
  ArrayList<FacilityStockReportItem> facilityStockReportItems=new ArrayList<>();
  try {
    Date startingDate=convertToDate(startingYear,startingMonth,true);
    Date endDate=convertToDate(endingYear,endingMonth,false);
    category=categoryService.get(category);
    for (    Commodity commodity : category.getCommodities()) {
      int openingStock=stockItemSnapshotService.getLatestStock(commodity,startingDate,true);
      int quantityReceived=GenericService.getTotal(commodity,startingDate,endDate,Receive.class,ReceiveItem.class,context);
      int quantityDispensed=GenericService.getTotal(commodity,startingDate,endDate,Dispensing.class,DispensingItem.class,context);
      int quantityLost=GenericService.getTotal(commodity,startingDate,endDate,Loss.class,LossItem.class,context);
      int minThreshold=commodityActionService.getMonthlyValue(commodity,startingDate,endDate,DataElementType.MIN_STOCK_QUANTITY);
      int quantityAdjusted=adjustmentService.totalAdjustment(commodity,startingDate,endDate);
      int stockOnHand=stockItemSnapshotService.getLatestStock(commodity,endDate,false);
      int amc=commodityActionService.getMonthlyValue(commodity,startingDate,endDate,DataElementType.AMC);
      int maxThreshold=commodityActionService.getMonthlyValue(commodity,startingDate,endDate,DataElementType.MAX_STOCK_QUANTITY);
      int stockOutDays=stockItemSnapshotService.getStockOutDays(commodity,startingDate,endDate);
      FacilityStockReportItem item=new FacilityStockReportItem(commodity.getName(),openingStock,quantityReceived,quantityAdjusted,quantityLost,amc,stockOutDays,maxThreshold,minThreshold,quantityDispensed,stockOnHand);
      facilityStockReportItems.add(item);
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
  return facilityStockReportItems;
}",0.9646999495713564
146285,"public int getStockOutDays(Commodity commodity,Date startingDate,Date endDate) throws Exception {
  int openingStock=getOpenningBalance(commodity,startingDate);
  int numOfStockOutDays=0;
  List<StockItemSnapshot> snapshots=get(commodity,startingDate,endDate);
  Date closingDate=DateUtil.addDayOfMonth(endDate);
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(startingDate);
  while (calendar.getTime().before(closingDate)) {
    StockItemSnapshot stockItemSnapshot=getSnapshot(calendar.getTime(),snapshots);
    if (stockItemSnapshot != null && stockItemSnapshot.isStockOut() || stockItemSnapshot == null && openingStock == 0) {
      numOfStockOutDays++;
    }
    if (stockItemSnapshot != null) {
      openingStock=stockItemSnapshot.getQuantity();
    }
    calendar.add(Calendar.DAY_OF_MONTH,1);
  }
  return numOfStockOutDays;
}","public int getStockOutDays(Commodity commodity,Date startingDate,Date endDate) throws Exception {
  int openingStock=getLatestStock(commodity,startingDate,true);
  int numOfStockOutDays=0;
  List<StockItemSnapshot> snapshots=get(commodity,startingDate,endDate);
  Date closingDate=DateUtil.addDayOfMonth(endDate);
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(startingDate);
  while (calendar.getTime().before(closingDate)) {
    StockItemSnapshot stockItemSnapshot=getSnapshot(calendar.getTime(),snapshots);
    if (stockItemSnapshot != null && stockItemSnapshot.isStockOut() || stockItemSnapshot == null && openingStock == 0) {
      numOfStockOutDays++;
    }
    if (stockItemSnapshot != null) {
      openingStock=stockItemSnapshot.getQuantity();
    }
    calendar.add(Calendar.DAY_OF_MONTH,1);
  }
  return numOfStockOutDays;
}",0.9817754262198708
146286,"@SuppressWarnings(""String_Node_Str"") public int getLatestStock(Commodity commodity,Date date,boolean isOpeningStock,List<StockItemSnapshot> stockItemSnapshots) throws Exception {
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(date);
  if (isOpeningStock) {
    calendar.add(Calendar.DAY_OF_MONTH,-1);
  }
  Date requiredDate=calendar.getTime();
  StockItemSnapshot latestStockItemSnapshot=getLatest(commodity,requiredDate);
  if (latestStockItemSnapshot != null) {
    return latestStockItemSnapshot.getQuantity();
  }
  return 0;
}","public int getLatestStock(Commodity commodity,Date date,boolean isOpeningStock,List<StockItemSnapshot> stockItemSnapshots) throws Exception {
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(date);
  if (isOpeningStock) {
    calendar.add(Calendar.DAY_OF_MONTH,-1);
  }
  Date requiredDate=calendar.getTime();
  StockItemSnapshot latestStockItemSnapshot=getLatest(commodity,requiredDate);
  if (latestStockItemSnapshot != null) {
    return latestStockItemSnapshot.getQuantity();
  }
  return 0;
}",0.9650613786591123
146287,"@Override public boolean allowClick(BaseCommodityViewModel commodityViewModel){
  if (spinnerSource.getSelectedItem().equals(getString(R.string.zonal_store))) {
    return commodityViewModel.getCommodity().isNonLGA();
  }
 else {
    return !commodityViewModel.getCommodity().isNonLGA();
  }
}","@Override public boolean allowClick(BaseCommodityViewModel commodityViewModel){
  if (spinnerSource.getSelectedItem().equals(getString(R.string.zonal_store))) {
    return commodityViewModel.getCommodity().isNonLGA();
  }
 else {
    if (""String_Node_Str"".equals(commodityViewModel.getCommodity().getCategory().getName())) {
      return false;
    }
 else {
      return !commodityViewModel.getCommodity().isNonLGA();
    }
  }
}",0.8105117565698479
146288,"@Override public String getEmptyMessage(){
  return String.format(""String_Node_Str"",spinnerSource.getSelectedItem().toString());
}","@Override public String getEmptyMessage(){
  String currentSource=spinnerSource.getSelectedItem().toString();
  if (!currentSource.equals(getString(R.string.zonal_store))) {
    return ""String_Node_Str"";
  }
 else {
    return String.format(""String_Node_Str"",currentSource);
  }
}",0.3609756097560975
146289,"@Override protected CommodityDisplayStrategy getCheckBoxVisibilityStrategy(){
  return new CommodityDisplayStrategy(){
    @Override public boolean allowClick(    BaseCommodityViewModel commodityViewModel){
      if (spinnerSource.getSelectedItem().equals(getString(R.string.zonal_store))) {
        return commodityViewModel.getCommodity().isNonLGA();
      }
 else {
        return !commodityViewModel.getCommodity().isNonLGA();
      }
    }
    @Override public String getMessage(){
      return String.format(""String_Node_Str"",spinnerSource.getSelectedItem().toString());
    }
    @Override public String getEmptyMessage(){
      return String.format(""String_Node_Str"",spinnerSource.getSelectedItem().toString());
    }
    @Override public boolean hideCommodities(){
      return true;
    }
  }
;
}","@Override protected CommodityDisplayStrategy getCheckBoxVisibilityStrategy(){
  return new CommodityDisplayStrategy(){
    @Override public boolean allowClick(    BaseCommodityViewModel commodityViewModel){
      if (spinnerSource.getSelectedItem().equals(getString(R.string.zonal_store))) {
        return commodityViewModel.getCommodity().isNonLGA();
      }
 else {
        if (""String_Node_Str"".equals(commodityViewModel.getCommodity().getCategory().getName())) {
          return false;
        }
 else {
          return !commodityViewModel.getCommodity().isNonLGA();
        }
      }
    }
    @Override public String getMessage(){
      return String.format(""String_Node_Str"",spinnerSource.getSelectedItem().toString());
    }
    @Override public String getEmptyMessage(){
      String currentSource=spinnerSource.getSelectedItem().toString();
      if (!currentSource.equals(getString(R.string.zonal_store))) {
        return ""String_Node_Str"";
      }
 else {
        return String.format(""String_Node_Str"",currentSource);
      }
    }
    @Override public boolean hideCommodities(){
      return true;
    }
  }
;
}",0.7689922480620155
146290,"public void save(final List<Adjustment> adjustments){
  dbutil.withDao(Adjustment.class,new DbUtil.Operation<Adjustment,String>(){
    @Override public String operate(    Dao dao) throws SQLException {
      for (      Adjustment adjustment : adjustments) {
        dao.create(adjustment);
        commoditySnapshotService.add(adjustment);
        if (adjustment.isPositive()) {
          stockService.increaseStockLevelFor(adjustment.getCommodity(),adjustment.getQuantity(),adjustment.getCreated());
        }
 else {
          stockService.reduceStockLevelFor(adjustment.getCommodity(),adjustment.getQuantity(),adjustment.getCreated());
        }
      }
      return null;
    }
  }
);
  categoryService.clearCache();
  alertsService.disableAllMonthlyStockCountAlerts();
  alertsService.updateLowStockAlerts();
}","public void save(final List<Adjustment> adjustments){
  dbutil.withDao(Adjustment.class,new DbUtil.Operation<Adjustment,String>(){
    @Override public String operate(    Dao dao) throws SQLException {
      for (      Adjustment adjustment : adjustments) {
        dao.create(adjustment);
        StockItemSnapshot sis;
        if (adjustment.isPositive()) {
          sis=stockService.increaseStockLevelFor(adjustment.getCommodity(),adjustment.getQuantity(),adjustment.getCreated());
        }
 else {
          sis=stockService.reduceStockLevelFor(adjustment.getCommodity(),adjustment.getQuantity(),adjustment.getCreated());
        }
        commoditySnapshotService.add(sis,true);
        commoditySnapshotService.add(adjustment);
      }
      return null;
    }
  }
);
  categoryService.clearCache();
  alertsService.disableAllMonthlyStockCountAlerts();
  alertsService.updateLowStockAlerts();
}",0.9120559114735004
146291,"public void add(final Snapshotable snapshotable){
  List<CommoditySnapshotValue> commoditySnapshotValues=null;
  try {
    commoditySnapshotValues=snapshotable.getActivitiesValues();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  GenericDao<CommoditySnapshot> snapshotDao=new GenericDao<>(CommoditySnapshot.class,context);
  for (  CommoditySnapshotValue value : commoditySnapshotValues) {
    List<CommoditySnapshot> commoditySnapshots=getSnapshotsForCommodityPeriod(value);
    if (commoditySnapshots.isEmpty()) {
      createNewSnapshot(value,snapshotDao);
    }
 else {
      updateSnapshot(value,snapshotDao,commoditySnapshots);
    }
  }
}","public void add(final Snapshotable snapshotable,boolean isReplace){
  List<CommoditySnapshotValue> commoditySnapshotValues=null;
  try {
    commoditySnapshotValues=snapshotable.getActivitiesValues();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  GenericDao<CommoditySnapshot> snapshotDao=new GenericDao<>(CommoditySnapshot.class,context);
  for (  CommoditySnapshotValue value : commoditySnapshotValues) {
    List<CommoditySnapshot> commoditySnapshots=getSnapshotsForCommodityPeriod(value);
    if (commoditySnapshots.isEmpty()) {
      createNewSnapshot(value,snapshotDao);
    }
 else {
      updateSnapshot(value,snapshotDao,commoditySnapshots,isReplace);
    }
  }
}",0.9791666666666666
146292,"private void updateSnapshot(CommoditySnapshotValue commoditySnapshotValue,GenericDao<CommoditySnapshot> snapshotDao,List<CommoditySnapshot> commoditySnapshots){
  CommoditySnapshot commoditySnapshot=commoditySnapshots.get(0);
  commoditySnapshot.incrementValue(commoditySnapshotValue.getValue());
  commoditySnapshot.setSynced(false);
  snapshotDao.update(commoditySnapshot);
}","private void updateSnapshot(CommoditySnapshotValue commoditySnapshotValue,GenericDao<CommoditySnapshot> snapshotDao,List<CommoditySnapshot> commoditySnapshots,boolean isReplace){
  CommoditySnapshot commoditySnapshot=commoditySnapshots.get(0);
  if (isReplace) {
    commoditySnapshot.setValue(commoditySnapshotValue.getValue());
  }
 else {
    commoditySnapshot.incrementValue(commoditySnapshotValue.getValue());
  }
  commoditySnapshot.setSynced(false);
  snapshotDao.update(commoditySnapshot);
}",0.860730593607306
146293,"private void saveDispensingItems(final List<DispensingItem> dispensingItems){
  GenericDao<DispensingItem> dao=new GenericDao<>(DispensingItem.class,context);
  dao.bulkOperation(new DbUtil.Operation<DispensingItem,Object>(){
    @Override public Object operate(    Dao<DispensingItem,String> dao) throws SQLException {
      for (      DispensingItem dispensingItem : dispensingItems) {
        dao.create(dispensingItem);
      }
      return null;
    }
  }
);
  for (  DispensingItem dispensingItem : dispensingItems) {
    adjustStockLevel(dispensingItem);
    commoditySnapshotService.add(dispensingItem);
  }
  commodityService.addMostDispensedCommoditiesCache(dispensingItems.get(0).getCommodity());
}","private void saveDispensingItems(final List<DispensingItem> dispensingItems){
  GenericDao<DispensingItem> dao=new GenericDao<>(DispensingItem.class,context);
  dao.bulkOperation(new DbUtil.Operation<DispensingItem,Object>(){
    @Override public Object operate(    Dao<DispensingItem,String> dao) throws SQLException {
      for (      DispensingItem dispensingItem : dispensingItems) {
        dao.create(dispensingItem);
      }
      return null;
    }
  }
);
  for (  DispensingItem dispensingItem : dispensingItems) {
    commoditySnapshotService.add(adjustStockLevel(dispensingItem),true);
    commoditySnapshotService.add(dispensingItem);
  }
  commodityService.addMostDispensedCommoditiesCache(dispensingItems.get(0).getCommodity());
}",0.9759119064005506
146294,"private void adjustStockLevel(DispensingItem dispensing){
  stockService.reduceStockLevelFor(dispensing.getCommodity(),dispensing.getQuantity(),dispensing.created());
}","private StockItemSnapshot adjustStockLevel(DispensingItem dispensing){
  return stockService.reduceStockLevelFor(dispensing.getCommodity(),dispensing.getQuantity(),dispensing.created());
}",0.9269662921348316
146295,"private void saveLossItems(List<LossItem> lossItems){
  GenericDao<LossItem> lossItemDao=new GenericDao<>(LossItem.class,context);
  for (  LossItem lossItem : lossItems) {
    lossItemDao.create(lossItem);
    saveLossItemDetails(lossItem.getLossItemDetails());
    adjustStockLevel(lossItem);
    snapshotService.add(lossItem);
  }
}","private void saveLossItems(List<LossItem> lossItems){
  GenericDao<LossItem> lossItemDao=new GenericDao<>(LossItem.class,context);
  for (  LossItem lossItem : lossItems) {
    lossItemDao.create(lossItem);
    saveLossItemDetails(lossItem.getLossItemDetails());
    snapshotService.add(adjustStockLevel(lossItem),true);
    snapshotService.add(lossItem);
  }
}",0.9626436781609196
146296,"private void adjustStockLevel(LossItem lossItem){
  stockService.reduceStockLevelFor(lossItem.getCommodity(),lossItem.getTotalLosses(),lossItem.created());
}","private StockItemSnapshot adjustStockLevel(LossItem lossItem){
  return stockService.reduceStockLevelFor(lossItem.getCommodity(),lossItem.getTotalLosses(),lossItem.created());
}",0.9221556886227544
146297,"private void saveReceiveItems(List<ReceiveItem> receiveItems){
  GenericDao<ReceiveItem> receiveItemDao=new GenericDao<>(ReceiveItem.class,context);
  for (  ReceiveItem receiveItem : receiveItems) {
    receiveItemDao.create(receiveItem);
    stockService.increaseStockLevelFor(receiveItem.getCommodity(),receiveItem.getQuantityReceived(),receiveItem.created());
    commoditySnapshotService.add(receiveItem);
  }
  alertsService.updateLowStockAlerts();
}","private void saveReceiveItems(List<ReceiveItem> receiveItems){
  GenericDao<ReceiveItem> receiveItemDao=new GenericDao<>(ReceiveItem.class,context);
  for (  ReceiveItem receiveItem : receiveItems) {
    receiveItemDao.create(receiveItem);
    commoditySnapshotService.add(stockService.increaseStockLevelFor(receiveItem.getCommodity(),receiveItem.getQuantityReceived(),receiveItem.created()),true);
    commoditySnapshotService.add(receiveItem);
  }
  alertsService.updateLowStockAlerts();
}",0.9630411826821542
146298,"@Override public Void operate(Dao<StockItem,String> dao) throws SQLException {
  dao.update(stockItem);
  stockItemSnapshotService.createOrUpdate(commodity,stockItem.getQuantity(),date);
  return null;
}","@Override public Void operate(Dao<StockItem,String> dao) throws SQLException {
  dao.update(stockItem);
  return null;
}",0.7430340557275542
146299,"public void increaseStockLevelFor(Commodity commodity,int quantity,Date date){
  StockItem stockItem=commodity.increaseStockOnHandBy(quantity);
  saveStockLevel(commodity,stockItem,date);
  categoryService.clearCache();
}","public StockItemSnapshot increaseStockLevelFor(Commodity commodity,int quantity,Date date){
  StockItem stockItem=commodity.increaseStockOnHandBy(quantity);
  StockItemSnapshot siss=saveStockLevel(commodity,stockItem,date);
  categoryService.clearCache();
  return siss;
}",0.8803245436105477
146300,"public void reduceStockLevelFor(final Commodity commodity,int quantity,Date date){
  StockItem stockItem=commodity.reduceStockOnHandBy(quantity);
  saveStockLevel(commodity,stockItem,date);
  categoryService.clearCache();
}","public StockItemSnapshot reduceStockLevelFor(final Commodity commodity,int quantity,Date date){
  StockItem stockItem=commodity.reduceStockOnHandBy(quantity);
  StockItemSnapshot siss=saveStockLevel(commodity,stockItem,date);
  categoryService.clearCache();
  return siss;
}",0.8812877263581489
146301,"private void saveStockLevel(final Commodity commodity,final StockItem stockItem,final Date date){
  dbUtil.withDao(context,StockItem.class,new DbUtil.Operation<StockItem,Void>(){
    @Override public Void operate(    Dao<StockItem,String> dao) throws SQLException {
      dao.update(stockItem);
      stockItemSnapshotService.createOrUpdate(commodity,stockItem.getQuantity(),date);
      return null;
    }
  }
);
}","private StockItemSnapshot saveStockLevel(final Commodity commodity,final StockItem stockItem,final Date date){
  dbUtil.withDao(context,StockItem.class,new DbUtil.Operation<StockItem,Void>(){
    @Override public Void operate(    Dao<StockItem,String> dao) throws SQLException {
      dao.update(stockItem);
      return null;
    }
  }
);
  return stockItemSnapshotService.createOrUpdate(commodity,stockItem.getQuantity(),date);
}",0.8959810874704491
146302,"@Test public void shouldReturnReturnedToLGAUtilizationItemWithCorrectUtilizationValue() throws Exception {
  commodityService.initialise(new User(""String_Node_Str"",""String_Node_Str""));
  categoryService.clearCache();
  Commodity commodity=categoryService.all().get(6).getCommodities().get(0);
  Calendar calendar=Calendar.getInstance();
  Date today=calendar.getTime();
  assertNotNull(commodity);
  adjust(commodity,2,false,AdjustmentReason.RETURNED_TO_LGA,adjustmentService);
  adjust(commodity,3,false,AdjustmentReason.RETURNED_TO_LGA,adjustmentService);
  List<UtilizationItem> utilizationItems=commodityService.getMonthlyUtilizationItems(commodity,today);
  int expectedValue=5;
  int utilizationValueIndex=DateUtil.dayNumber(today) - 1;
  assertThat(utilizationItems.get(5).getUtilizationValues().get(utilizationValueIndex).getValue(),is(expectedValue));
}","@Test public void shouldReturnReturnedToLGAUtilizationItemWithCorrectUtilizationValue() throws Exception {
  commodityService.initialise(new User(""String_Node_Str"",""String_Node_Str""));
  categoryService.clearCache();
  Commodity commodity=categoryService.all().get(0).getCommodities().get(0);
  Calendar calendar=Calendar.getInstance();
  Date today=calendar.getTime();
  assertNotNull(commodity);
  adjust(commodity,2,false,AdjustmentReason.RETURNED_TO_LGA,adjustmentService);
  adjust(commodity,3,false,AdjustmentReason.RETURNED_TO_LGA,adjustmentService);
  List<UtilizationItem> utilizationItems=commodityService.getMonthlyUtilizationItems(commodity,today);
  int expectedValue=5;
  int utilizationValueIndex=DateUtil.dayNumber(today) - 1;
  assertThat(utilizationItems.get(5).getUtilizationValues().get(utilizationValueIndex).getValue(),is(expectedValue));
}",0.9988399071925754
146303,"@Test public void shouldUpdateSnapShotWhenLossItemIsSaved() throws Exception {
  Commodity commodity=commodityService.all().get(0);
  assertThat(snapshotGenericDao.queryForAll().size(),is(0));
  int stockOnHand=commodity.getStockOnHand();
  int expectedStockOnHand=stockOnHand - 1;
  Loss loss=new Loss();
  loss.addLossItem(new LossItem(commodity,1));
  lossService.saveLoss(loss);
  commodity=commodityService.all().get(0);
  assertThat(commodity.getStockOnHand(),is(expectedStockOnHand));
  assertThat(snapshotGenericDao.queryForAll().size(),is(2));
}","@Test public void shouldUpdateSnapShotWhenLossItemIsSaved() throws Exception {
  Commodity commodity=commodityService.all().get(0);
  assertThat(snapshotGenericDao.queryForAll().size(),is(0));
  int stockOnHand=commodity.getStockOnHand();
  int expectedStockOnHand=stockOnHand - 1;
  Loss loss=new Loss();
  loss.addLossItem(new LossItem(commodity,1));
  lossService.saveLoss(loss);
  commodity=commodityService.all().get(0);
  assertThat(commodity.getStockOnHand(),is(expectedStockOnHand));
}",0.941738299904489
146304,"@Override protected CommodityDisplayStrategy getCheckBoxVisibilityStrategy(){
  return CommodityDisplayStrategy.ALLOW_ONLY_LGA_COMMODITIES;
}","@Override protected CommodityDisplayStrategy getCheckBoxVisibilityStrategy(){
  return new CommodityDisplayStrategy(){
    @Override public boolean allowClick(    BaseCommodityViewModel commodityViewModel){
      return !""String_Node_Str"".equals(commodityViewModel.getCommodity().getCategory().getName());
    }
    @Override public String getMessage(){
      return String.format(""String_Node_Str"");
    }
    @Override public String getEmptyMessage(){
      return String.format(""String_Node_Str"");
    }
    @Override public boolean hideCommodities(){
      return true;
    }
  }
;
}",0.3324175824175824
146305,"@Override public List<CommoditySnapshotValue> getActivitiesValues() throws Exception {
  List<CommoditySnapshotValue> commoditySnapshotValues=new ArrayList<>(1);
  commoditySnapshotValues.add(new CommoditySnapshotValue(getCommodity().getCommodityAction(STOCK_ON_HAND.getActivity()),getQuantity(),getDate()));
  return commoditySnapshotValues;
}","@Override public List<CommoditySnapshotValue> getActivitiesValues() throws Exception {
  List<CommoditySnapshotValue> commoditySnapshotValues=new ArrayList<>(1);
  commoditySnapshotValues.add(new CommoditySnapshotValue(getCommodity().getCommodityAction(STOCK_ON_HAND.getActivity()),getQuantity(),getCreated()));
  return commoditySnapshotValues;
}",0.984081041968162
146306,"public void save(final List<Adjustment> adjustments){
  dbutil.withDao(Adjustment.class,new DbUtil.Operation<Adjustment,String>(){
    @Override public String operate(    Dao dao) throws SQLException {
      for (      Adjustment adjustment : adjustments) {
        dao.create(adjustment);
        StockItemSnapshot sis;
        if (adjustment.isPositive()) {
          sis=stockService.increaseStockLevelFor(adjustment.getCommodity(),adjustment.getQuantity(),adjustment.getCreated());
        }
 else {
          sis=stockService.reduceStockLevelFor(adjustment.getCommodity(),adjustment.getQuantity(),adjustment.getCreated());
        }
        commoditySnapshotService.add(sis,true);
        commoditySnapshotService.add(adjustment);
      }
      return null;
    }
  }
);
  categoryService.clearCache();
  alertsService.disableAllMonthlyStockCountAlerts();
  alertsService.updateLowStockAlerts();
}","public void save(final List<Adjustment> adjustments){
  dbutil.withDao(Adjustment.class,new DbUtil.Operation<Adjustment,String>(){
    @Override public String operate(    Dao dao) throws SQLException {
      for (      Adjustment adjustment : adjustments) {
        dao.create(adjustment);
        commoditySnapshotService.add(adjustment);
        if (adjustment.isPositive()) {
          stockService.increaseStockLevelFor(adjustment.getCommodity(),adjustment.getQuantity(),adjustment.getCreated());
        }
 else {
          stockService.reduceStockLevelFor(adjustment.getCommodity(),adjustment.getQuantity(),adjustment.getCreated());
        }
      }
      return null;
    }
  }
);
  categoryService.clearCache();
  alertsService.disableAllMonthlyStockCountAlerts();
  alertsService.updateLowStockAlerts();
}",0.9120559114735004
146307,"public void add(final Snapshotable snapshotable,boolean isReplace){
  List<CommoditySnapshotValue> commoditySnapshotValues=null;
  try {
    commoditySnapshotValues=snapshotable.getActivitiesValues();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  GenericDao<CommoditySnapshot> snapshotDao=new GenericDao<>(CommoditySnapshot.class,context);
  for (  CommoditySnapshotValue value : commoditySnapshotValues) {
    List<CommoditySnapshot> commoditySnapshots=getSnapshotsForCommodityPeriod(value);
    if (commoditySnapshots.isEmpty()) {
      createNewSnapshot(value,snapshotDao);
    }
 else {
      updateSnapshot(value,snapshotDao,commoditySnapshots,isReplace);
    }
  }
}","public void add(final Snapshotable snapshotable){
  List<CommoditySnapshotValue> commoditySnapshotValues=null;
  try {
    commoditySnapshotValues=snapshotable.getActivitiesValues();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  GenericDao<CommoditySnapshot> snapshotDao=new GenericDao<>(CommoditySnapshot.class,context);
  for (  CommoditySnapshotValue value : commoditySnapshotValues) {
    List<CommoditySnapshot> commoditySnapshots=getSnapshotsForCommodityPeriod(value);
    if (commoditySnapshots.isEmpty()) {
      createNewSnapshot(value,snapshotDao);
    }
 else {
      updateSnapshot(value,snapshotDao,commoditySnapshots);
    }
  }
}",0.9791666666666666
146308,"private void updateSnapshot(CommoditySnapshotValue commoditySnapshotValue,GenericDao<CommoditySnapshot> snapshotDao,List<CommoditySnapshot> commoditySnapshots,boolean isReplace){
  CommoditySnapshot commoditySnapshot=commoditySnapshots.get(0);
  if (isReplace) {
    commoditySnapshot.setValue(commoditySnapshotValue.getValue());
  }
 else {
    commoditySnapshot.incrementValue(commoditySnapshotValue.getValue());
  }
  commoditySnapshot.setSynced(false);
  snapshotDao.update(commoditySnapshot);
}","private void updateSnapshot(CommoditySnapshotValue commoditySnapshotValue,GenericDao<CommoditySnapshot> snapshotDao,List<CommoditySnapshot> commoditySnapshots){
  CommoditySnapshot commoditySnapshot=commoditySnapshots.get(0);
  commoditySnapshot.incrementValue(commoditySnapshotValue.getValue());
  commoditySnapshot.setSynced(false);
  snapshotDao.update(commoditySnapshot);
}",0.5365296803652968
146309,"private void saveDispensingItems(final List<DispensingItem> dispensingItems){
  GenericDao<DispensingItem> dao=new GenericDao<>(DispensingItem.class,context);
  dao.bulkOperation(new DbUtil.Operation<DispensingItem,Object>(){
    @Override public Object operate(    Dao<DispensingItem,String> dao) throws SQLException {
      for (      DispensingItem dispensingItem : dispensingItems) {
        dao.create(dispensingItem);
      }
      return null;
    }
  }
);
  for (  DispensingItem dispensingItem : dispensingItems) {
    commoditySnapshotService.add(adjustStockLevel(dispensingItem),true);
    commoditySnapshotService.add(dispensingItem);
  }
  commodityService.addMostDispensedCommoditiesCache(dispensingItems.get(0).getCommodity());
}","private void saveDispensingItems(final List<DispensingItem> dispensingItems){
  GenericDao<DispensingItem> dao=new GenericDao<>(DispensingItem.class,context);
  dao.bulkOperation(new DbUtil.Operation<DispensingItem,Object>(){
    @Override public Object operate(    Dao<DispensingItem,String> dao) throws SQLException {
      for (      DispensingItem dispensingItem : dispensingItems) {
        dao.create(dispensingItem);
      }
      return null;
    }
  }
);
  for (  DispensingItem dispensingItem : dispensingItems) {
    adjustStockLevel(dispensingItem);
    commoditySnapshotService.add(dispensingItem);
  }
  commodityService.addMostDispensedCommoditiesCache(dispensingItems.get(0).getCommodity());
}",0.7983482450103234
146310,"private StockItemSnapshot adjustStockLevel(DispensingItem dispensing){
  return stockService.reduceStockLevelFor(dispensing.getCommodity(),dispensing.getQuantity(),dispensing.created());
}","private void adjustStockLevel(DispensingItem dispensing){
  stockService.reduceStockLevelFor(dispensing.getCommodity(),dispensing.getQuantity(),dispensing.created());
}",0.9269662921348316
146311,"private void saveLossItems(List<LossItem> lossItems){
  GenericDao<LossItem> lossItemDao=new GenericDao<>(LossItem.class,context);
  for (  LossItem lossItem : lossItems) {
    lossItemDao.create(lossItem);
    saveLossItemDetails(lossItem.getLossItemDetails());
    snapshotService.add(adjustStockLevel(lossItem),true);
    snapshotService.add(lossItem);
  }
}","private void saveLossItems(List<LossItem> lossItems){
  GenericDao<LossItem> lossItemDao=new GenericDao<>(LossItem.class,context);
  for (  LossItem lossItem : lossItems) {
    lossItemDao.create(lossItem);
    saveLossItemDetails(lossItem.getLossItemDetails());
    adjustStockLevel(lossItem);
    snapshotService.add(lossItem);
  }
}",0.9626436781609196
146312,"private StockItemSnapshot adjustStockLevel(LossItem lossItem){
  return stockService.reduceStockLevelFor(lossItem.getCommodity(),lossItem.getTotalLosses(),lossItem.created());
}","private void adjustStockLevel(LossItem lossItem){
  stockService.reduceStockLevelFor(lossItem.getCommodity(),lossItem.getTotalLosses(),lossItem.created());
}",0.9221556886227544
146313,"private void saveReceiveItems(List<ReceiveItem> receiveItems){
  GenericDao<ReceiveItem> receiveItemDao=new GenericDao<>(ReceiveItem.class,context);
  for (  ReceiveItem receiveItem : receiveItems) {
    receiveItemDao.create(receiveItem);
    commoditySnapshotService.add(stockService.increaseStockLevelFor(receiveItem.getCommodity(),receiveItem.getQuantityReceived(),receiveItem.created()),true);
    commoditySnapshotService.add(receiveItem);
  }
  alertsService.updateLowStockAlerts();
}","private void saveReceiveItems(List<ReceiveItem> receiveItems){
  GenericDao<ReceiveItem> receiveItemDao=new GenericDao<>(ReceiveItem.class,context);
  for (  ReceiveItem receiveItem : receiveItems) {
    receiveItemDao.create(receiveItem);
    stockService.increaseStockLevelFor(receiveItem.getCommodity(),receiveItem.getQuantityReceived(),receiveItem.created());
    commoditySnapshotService.add(receiveItem);
  }
  alertsService.updateLowStockAlerts();
}",0.9630411826821542
146314,"@Override public Void operate(Dao<StockItem,String> dao) throws SQLException {
  dao.update(stockItem);
  return null;
}","@Override public Void operate(Dao<StockItem,String> dao) throws SQLException {
  dao.update(stockItem);
  stockItemSnapshotService.createOrUpdate(commodity,stockItem.getQuantity(),date);
  return null;
}",0.7430340557275542
146315,"public StockItemSnapshot increaseStockLevelFor(Commodity commodity,int quantity,Date date){
  StockItem stockItem=commodity.increaseStockOnHandBy(quantity);
  StockItemSnapshot siss=saveStockLevel(commodity,stockItem,date);
  categoryService.clearCache();
  return siss;
}","public void increaseStockLevelFor(Commodity commodity,int quantity,Date date){
  StockItem stockItem=commodity.increaseStockOnHandBy(quantity);
  saveStockLevel(commodity,stockItem,date);
  categoryService.clearCache();
}",0.6288032454361054
146316,"public StockItemSnapshot reduceStockLevelFor(final Commodity commodity,int quantity,Date date){
  StockItem stockItem=commodity.reduceStockOnHandBy(quantity);
  StockItemSnapshot siss=saveStockLevel(commodity,stockItem,date);
  categoryService.clearCache();
  return siss;
}","public void reduceStockLevelFor(final Commodity commodity,int quantity,Date date){
  StockItem stockItem=commodity.reduceStockOnHandBy(quantity);
  saveStockLevel(commodity,stockItem,date);
  categoryService.clearCache();
}",0.0885311871227364
146317,"private StockItemSnapshot saveStockLevel(final Commodity commodity,final StockItem stockItem,final Date date){
  dbUtil.withDao(context,StockItem.class,new DbUtil.Operation<StockItem,Void>(){
    @Override public Void operate(    Dao<StockItem,String> dao) throws SQLException {
      dao.update(stockItem);
      return null;
    }
  }
);
  return stockItemSnapshotService.createOrUpdate(commodity,stockItem.getQuantity(),date);
}","private void saveStockLevel(final Commodity commodity,final StockItem stockItem,final Date date){
  dbUtil.withDao(context,StockItem.class,new DbUtil.Operation<StockItem,Void>(){
    @Override public Void operate(    Dao<StockItem,String> dao) throws SQLException {
      dao.update(stockItem);
      stockItemSnapshotService.createOrUpdate(commodity,stockItem.getQuantity(),date);
      return null;
    }
  }
);
}",0.8959810874704491
146318,"@Override public void onPerformSync(Account account,Bundle extras,String authority,ContentProviderClient provider,SyncResult syncResult){
  User user=userService.getRegisteredUser();
  if (user == null) {
    return;
  }
  i(""String_Node_Str"",account.name);
  commoditySnapshotService.syncWithServer(user);
  i(""String_Node_Str"",account.name);
  allocationService.syncAllocations(user);
  i(""String_Node_Str"",account.name);
  commodityActionService.syncCommodityActionValues(user);
  i(""String_Node_Str"",account.name);
  commodityActionService.syncIndicatorValues(user,commodityService.all());
  SharedPreferences.Editor edit=sharedPreferences.edit();
  edit.putString(""String_Node_Str"",dateTimeFormater.format(new Date()));
  edit.commit();
  EventBus.getDefault().post(new SyncedEvent());
}","@Override public void onPerformSync(Account account,Bundle extras,String authority,ContentProviderClient provider,SyncResult syncResult){
  User user=userService.getRegisteredUser();
  if (user == null) {
    return;
  }
  i(""String_Node_Str"",account.name);
  commoditySnapshotService.syncWithServer(user);
  i(""String_Node_Str"",account.name);
  commoditySnapshotService.syncSOHWithServer(user);
  i(""String_Node_Str"",account.name);
  allocationService.syncAllocations(user);
  i(""String_Node_Str"",account.name);
  commodityActionService.syncCommodityActionValues(user);
  i(""String_Node_Str"",account.name);
  commodityActionService.syncIndicatorValues(user,commodityService.all());
  SharedPreferences.Editor edit=sharedPreferences.edit();
  edit.putString(""String_Node_Str"",dateTimeFormater.format(new Date()));
  edit.commit();
  EventBus.getDefault().post(new SyncedEvent());
}",0.9468021518230724
146319,"@Test public void shouldReturnReturnedToLGAUtilizationItemWithCorrectUtilizationValue() throws Exception {
  commodityService.initialise(new User(""String_Node_Str"",""String_Node_Str""));
  categoryService.clearCache();
  Commodity commodity=categoryService.all().get(0).getCommodities().get(0);
  Calendar calendar=Calendar.getInstance();
  Date today=calendar.getTime();
  assertNotNull(commodity);
  adjust(commodity,2,false,AdjustmentReason.RETURNED_TO_LGA,adjustmentService);
  adjust(commodity,3,false,AdjustmentReason.RETURNED_TO_LGA,adjustmentService);
  List<UtilizationItem> utilizationItems=commodityService.getMonthlyUtilizationItems(commodity,today);
  int expectedValue=5;
  int utilizationValueIndex=DateUtil.dayNumber(today) - 1;
  assertThat(utilizationItems.get(5).getUtilizationValues().get(utilizationValueIndex).getValue(),is(expectedValue));
}","@Test public void shouldReturnReturnedToLGAUtilizationItemWithCorrectUtilizationValue() throws Exception {
  commodityService.initialise(new User(""String_Node_Str"",""String_Node_Str""));
  categoryService.clearCache();
  Commodity commodity=categoryService.all().get(6).getCommodities().get(0);
  Calendar calendar=Calendar.getInstance();
  Date today=calendar.getTime();
  assertNotNull(commodity);
  adjust(commodity,2,false,AdjustmentReason.RETURNED_TO_LGA,adjustmentService);
  adjust(commodity,3,false,AdjustmentReason.RETURNED_TO_LGA,adjustmentService);
  List<UtilizationItem> utilizationItems=commodityService.getMonthlyUtilizationItems(commodity,today);
  int expectedValue=5;
  int utilizationValueIndex=DateUtil.dayNumber(today) - 1;
  assertThat(utilizationItems.get(5).getUtilizationValues().get(utilizationValueIndex).getValue(),is(expectedValue));
}",0.9988399071925754
146320,"@Test public void shouldUpdateSnapShotWhenLossItemIsSaved() throws Exception {
  Commodity commodity=commodityService.all().get(0);
  assertThat(snapshotGenericDao.queryForAll().size(),is(0));
  int stockOnHand=commodity.getStockOnHand();
  int expectedStockOnHand=stockOnHand - 1;
  Loss loss=new Loss();
  loss.addLossItem(new LossItem(commodity,1));
  lossService.saveLoss(loss);
  commodity=commodityService.all().get(0);
  assertThat(commodity.getStockOnHand(),is(expectedStockOnHand));
}","@Test public void shouldUpdateSnapShotWhenLossItemIsSaved() throws Exception {
  Commodity commodity=commodityService.all().get(0);
  assertThat(snapshotGenericDao.queryForAll().size(),is(0));
  int stockOnHand=commodity.getStockOnHand();
  int expectedStockOnHand=stockOnHand - 1;
  Loss loss=new Loss();
  loss.addLossItem(new LossItem(commodity,1));
  lossService.saveLoss(loss);
  commodity=commodityService.all().get(0);
  assertThat(commodity.getStockOnHand(),is(expectedStockOnHand));
  assertThat(snapshotGenericDao.queryForAll().size(),is(2));
}",0.941738299904489
146321,"public boolean quantityIsUnexpected(){
  return (quantityEntered > (1.1 * getExpectedOrderQuantity()));
}","public boolean quantityIsUnexpected(){
  return (getExpectedOrderQuantity() != 0) && (quantityEntered > (1.1 * getExpectedOrderQuantity()));
}",0.8502024291497976
146322,"@Override public View getView(int position,View convertView,ViewGroup parent){
  View rowView=getRowView(parent);
  final OrderCommodityViewModel orderCommodityViewModel=getCommodityViewModel(position);
  TextView textViewCommodityName=(TextView)rowView.findViewById(R.id.textViewCommodityName);
  TextView textViewExpectedQuantity=(TextView)rowView.findViewById(R.id.textViewSuggestedQuantity);
  final NumberTextView editTextOrderQuantity=(NumberTextView)rowView.findViewById(R.id.editTextOrderQuantity);
  final Spinner spinnerUnexpectedReasons=(Spinner)rowView.findViewById(R.id.spinnerUnexpectedQuantityReasons);
  final TextView textViewStartDate=(TextView)rowView.findViewById(R.id.textViewStartDate);
  final TextView textViewEndDate=(TextView)rowView.findViewById(R.id.textViewEndDate);
  activateCancelButton((ImageButton)rowView.findViewById(R.id.imageButtonCancel),orderCommodityViewModel);
  textViewCommodityName.setText(orderCommodityViewModel.getName() + ""String_Node_Str"" + orderCommodityViewModel.getStockOnHand()+ ""String_Node_Str"");
  textViewExpectedQuantity.setText(String.format(context.getString(R.string.suggested_quantity),orderCommodityViewModel.getExpectedOrderQuantity()));
  setupSpinners(orderCommodityViewModel,spinnerUnexpectedReasons,textViewStartDate,textViewEndDate);
  setupQuantity(orderCommodityViewModel,editTextOrderQuantity,spinnerUnexpectedReasons);
  initialiseDates(orderCommodityViewModel,textViewStartDate,textViewEndDate);
  textViewStartDate.addTextChangedListener(new StartDateTextWatcher(orderCommodityViewModel,textViewStartDate,textViewEndDate,spinnerUnexpectedReasons));
  textViewEndDate.addTextChangedListener(new EndDateTextWatcher(orderCommodityViewModel,spinnerUnexpectedReasons));
  setDateTextClickListeners(textViewStartDate,textViewEndDate);
  setVisibilityOfUnexpectedReasonsSpinner(null,null,orderCommodityViewModel,spinnerUnexpectedReasons);
  doUpdateEndDate(orderCommodityViewModel,textViewStartDate,textViewEndDate);
  return rowView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  View rowView=getRowView(parent);
  final OrderCommodityViewModel orderCommodityViewModel=getCommodityViewModel(position);
  TextView textViewCommodityName=(TextView)rowView.findViewById(R.id.textViewCommodityName);
  TextView textViewExpectedQuantity=(TextView)rowView.findViewById(R.id.textViewSuggestedQuantity);
  final NumberTextView editTextOrderQuantity=(NumberTextView)rowView.findViewById(R.id.editTextOrderQuantity);
  final Spinner spinnerUnexpectedReasons=(Spinner)rowView.findViewById(R.id.spinnerUnexpectedQuantityReasons);
  final TextView textViewStartDate=(TextView)rowView.findViewById(R.id.textViewStartDate);
  final TextView textViewEndDate=(TextView)rowView.findViewById(R.id.textViewEndDate);
  activateCancelButton((ImageButton)rowView.findViewById(R.id.imageButtonCancel),orderCommodityViewModel);
  textViewCommodityName.setText(orderCommodityViewModel.getName() + ""String_Node_Str"" + orderCommodityViewModel.getStockOnHand()+ ""String_Node_Str"");
  textViewExpectedQuantity.setText(String.format(context.getString(R.string.suggested_quantity),orderCommodityViewModel.getExpectedOrderQuantity()));
  setupSpinners(orderCommodityViewModel,spinnerUnexpectedReasons,textViewStartDate,textViewEndDate);
  setupQuantity(orderCommodityViewModel,editTextOrderQuantity,spinnerUnexpectedReasons);
  initialiseDates(orderCommodityViewModel,textViewStartDate,textViewEndDate);
  textViewStartDate.addTextChangedListener(new StartDateTextWatcher(orderCommodityViewModel,textViewStartDate,textViewEndDate,spinnerUnexpectedReasons));
  textViewEndDate.addTextChangedListener(new EndDateTextWatcher(orderCommodityViewModel,spinnerUnexpectedReasons));
  setVisibilityOfUnexpectedReasonsSpinner(null,null,orderCommodityViewModel,spinnerUnexpectedReasons);
  doUpdateEndDate(orderCommodityViewModel,textViewStartDate,textViewEndDate);
  return rowView;
}",0.9837810440952864
146323,"@Override protected AdapterView.OnItemClickListener getAutoCompleteTextViewCommoditiesAdapterListener(){
  return new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      Commodity commodity=searchCommodityAdapter.getItem(position);
      onEvent(new CommodityToggledEvent(new OrderCommodityViewModel(commodity)));
      autoCompleteTextViewCommodities.setText(""String_Node_Str"");
    }
  }
;
}","@Override protected AdapterView.OnItemClickListener getAutoCompleteTextViewCommoditiesAdapterListener(){
  return new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      Commodity commodity=searchCommodityAdapter.getItem(position);
      onEvent(new CommodityToggledEvent(setupOrderCommodityViewModel(commodity)));
      autoCompleteTextViewCommodities.setText(""String_Node_Str"");
    }
  }
;
}",0.9908443540183112
146324,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  Commodity commodity=searchCommodityAdapter.getItem(position);
  onEvent(new CommodityToggledEvent(new OrderCommodityViewModel(commodity)));
  autoCompleteTextViewCommodities.setText(""String_Node_Str"");
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  Commodity commodity=searchCommodityAdapter.getItem(position);
  onEvent(new CommodityToggledEvent(setupOrderCommodityViewModel(commodity)));
  autoCompleteTextViewCommodities.setText(""String_Node_Str"");
}",0.9847198641765704
146325,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getArguments() != null) {
    category=(Category)getArguments().getSerializable(CATEGORY);
    selectedCommodities=(ArrayList<? extends BaseCommodityViewModel>)getArguments().getSerializable(SELECTED_COMMODITIES);
    commodityDisplayStrategy=(CommodityDisplayStrategy)getArguments().getSerializable(COMMODITY_DISPLAY_STRATEGY);
    viewModelsConverter=(CommoditiesToViewModelsConverter)getArguments().getSerializable(COMMODITIES_TO_VIEW_MODELS_CONVERTER);
    activityName=(String)getArguments().getSerializable(ACTIVITY_NAME);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getArguments() != null) {
    category=(Category)getArguments().getSerializable(CATEGORY);
    selectedCommodities=(ArrayList<? extends BaseCommodityViewModel>)getArguments().getSerializable(SELECTED_COMMODITIES);
    activityName=(String)getArguments().getSerializable(ACTIVITY_NAME);
  }
}",0.7643064985451018
146326,"public static ItemSelectFragment newInstance(CommoditySelectableActivity parent,Category category,ArrayList<?> selectedCommodities,CommodityDisplayStrategy commodityDisplayStrategy,CommoditiesToViewModelsConverter generator,String activityName){
  Bundle arguments=new Bundle();
  arguments.putSerializable(CATEGORY,category);
  arguments.putSerializable(SELECTED_COMMODITIES,selectedCommodities);
  arguments.putSerializable(COMMODITY_DISPLAY_STRATEGY,commodityDisplayStrategy);
  arguments.putSerializable(COMMODITIES_TO_VIEW_MODELS_CONVERTER,generator);
  arguments.putSerializable(ACTIVITY_NAME,activityName);
  ItemSelectFragment fragment=new ItemSelectFragment();
  fragment.setArguments(arguments);
  fragment.parentActivity=parent;
  return fragment;
}","public static ItemSelectFragment newInstance(CommoditySelectableActivity parent,Category category,ArrayList<?> selectedCommodities,CommodityDisplayStrategy commodityDisplayStrategy,CommoditiesToViewModelsConverter generator,String activityName){
  Bundle arguments=new Bundle();
  arguments.putSerializable(CATEGORY,category);
  arguments.putSerializable(SELECTED_COMMODITIES,selectedCommodities);
  arguments.putSerializable(ACTIVITY_NAME,activityName);
  ItemSelectFragment fragment=new ItemSelectFragment();
  fragment.setArguments(arguments);
  fragment.parentActivity=parent;
  fragment.commodityDisplayStrategy=commodityDisplayStrategy;
  fragment.viewModelsConverter=generator;
  return fragment;
}",0.8109215017064847
146327,"@Override protected void onPostExecute(Boolean succeeded){
  if (dialog.isShowing() && dialog.getOwnerActivity() != null && !dialog.getOwnerActivity().isFinishing()) {
    dialog.dismiss();
  }
  if (succeeded) {
    startActivity(new Intent(getApplicationContext(),HomeActivity.class));
    finish();
  }
  String toastMessage=succeeded ? registrationSuccessfulMessage : failureCause.getMessage();
  Toast.makeText(getApplicationContext(),toastMessage,LENGTH_SHORT).show();
  Log.e(""String_Node_Str"",toastMessage + ""String_Node_Str"");
}","@Override protected void onPostExecute(Boolean succeeded){
  if (dialog.isShowing()) {
    dialog.dismiss();
  }
  if (succeeded) {
    startActivity(new Intent(getApplicationContext(),HomeActivity.class));
    finish();
  }
  String toastMessage=succeeded ? registrationSuccessfulMessage : failureCause.getMessage();
  Toast.makeText(getApplicationContext(),toastMessage,LENGTH_SHORT).show();
  Log.e(""String_Node_Str"",toastMessage + ""String_Node_Str"");
}",0.918429003021148
146328,"private int average(List<CommodityActionValue> commodityActionValues,int maxNumberOfValues){
  int value=0;
  for (  CommodityActionValue commodityActionValue : commodityActionValues) {
    value+=Integer.parseInt(commodityActionValue.getValue());
  }
  return value / maxNumberOfValues;
}","private int average(List<CommodityActionValue> commodityActionValues,int maxNumberOfValues){
  float value=0;
  for (  CommodityActionValue commodityActionValue : commodityActionValues) {
    value+=Float.parseFloat(commodityActionValue.getValue());
  }
  return (int)value / maxNumberOfValues;
}",0.9504273504273504
146329,"@Override public View getView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View view=inflater.inflate(resource,parent,false);
  Map<Integer,String> integerStringMap=new HashMap<>();
  FacilityConsumptionReportRH2Item item=getItem(position);
  integerStringMap.put(R.id.textViewCommodityName,item.getCommodityName());
  integerStringMap.put(R.id.textViewOpeningBalance,String.valueOf(item.getOpeningStock()));
  integerStringMap.put(R.id.textViewQuantityReceived,String.valueOf(item.getCommoditiesReceived()));
  integerStringMap.put(R.id.textViewQuantityAdjusted,String.valueOf(item.getCommoditiesAdjusted()));
  integerStringMap.put(R.id.textViewQuantityDispensed,String.valueOf(item.getCommoditiesDispensedToFacilities()));
  integerStringMap.put(R.id.textViewTotalDispensed,String.valueOf(item.totalDispensed()));
  integerStringMap.put(R.id.textViewQuantityLost,String.valueOf(item.getCommoditiesLost()));
  integerStringMap.put(R.id.textViewClosingStock,String.valueOf(item.getClosingStock()));
  for (  Integer key : integerStringMap.keySet()) {
    TextView textView=(TextView)view.findViewById(key);
    textView.setText(integerStringMap.get(key));
  }
  if (isGrey) {
    view.setBackgroundColor(getContext().getResources().getColor(R.color.m_grey));
  }
  isGrey=!isGrey;
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View view=inflater.inflate(resource,parent,false);
  Map<Integer,String> integerStringMap=new HashMap<>();
  FacilityConsumptionReportRH2Item item=getItem(position);
  integerStringMap.put(R.id.textViewCommodityName,item.getCommodityName());
  integerStringMap.put(R.id.textViewOpeningBalance,String.valueOf(item.getOpeningStock()));
  integerStringMap.put(R.id.textViewQuantityReceived,String.valueOf(item.getCommoditiesReceived()));
  integerStringMap.put(R.id.textViewQuantityAdjusted,String.valueOf(item.getCommoditiesAdjusted()));
  integerStringMap.put(R.id.textViewQuantityDispensed,String.valueOf(item.getCommoditiesDispensedToClients()));
  integerStringMap.put(R.id.textViewTotalDispensed,String.valueOf(item.totalDispensed()));
  integerStringMap.put(R.id.textViewQuantityLost,String.valueOf(item.getCommoditiesLost()));
  integerStringMap.put(R.id.textViewClosingStock,String.valueOf(item.getClosingStock()));
  for (  Integer key : integerStringMap.keySet()) {
    TextView textView=(TextView)view.findViewById(key);
    textView.setText(integerStringMap.get(key));
  }
  if (isGrey) {
    view.setBackgroundColor(getContext().getResources().getColor(R.color.m_grey));
  }
  isGrey=!isGrey;
  return view;
}",0.9946751863684772
146330,"public List<FacilityConsumptionReportRH2Item> getFacilityConsumptionReportRH2Items(Category category,String startingYear,String startingMonth,String endingYear,String endingMonth){
  ArrayList<FacilityConsumptionReportRH2Item> facilityConsumptionReportRH2Items=new ArrayList<>();
  try {
    Date startingDate=convertToDate(startingYear,startingMonth,true);
    Date endDate=convertToDate(endingYear,endingMonth,false);
    category=categoryService.get(category);
    for (    Commodity commodity : category.getCommodities()) {
      int openingStock=stockItemSnapshotService.getLatestStock(commodity,startingDate,true);
      int quantityReceived=GenericService.getTotal(commodity,startingDate,endDate,Receive.class,ReceiveItem.class,context);
      int quantityDispensedToClients=GenericService.getTotal(commodity,startingDate,endDate,Dispensing.class,DispensingItem.class,context);
      int quantityAdjusted=adjustmentService.totalAdjustmentNumber(commodity,startingDate,endDate);
      int quantityLost=GenericService.getTotal(commodity,startingDate,endDate,Loss.class,LossItem.class,context);
      int commoditiesDispensedToFacilities=adjustmentService.totalAdjustment(commodity,startingDate,endDate,AdjustmentReason.SENT_TO_ANOTHER_FACILITY);
      int closingStock=stockItemSnapshotService.getLatestStock(commodity,endDate,false);
      FacilityConsumptionReportRH2Item item=new FacilityConsumptionReportRH2Item(commodity.getName(),openingStock,quantityReceived,quantityDispensedToClients,quantityAdjusted,commoditiesDispensedToFacilities,quantityLost,closingStock);
      facilityConsumptionReportRH2Items.add(item);
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
  return facilityConsumptionReportRH2Items;
}","public List<FacilityConsumptionReportRH2Item> getFacilityConsumptionReportRH2Items(Category category,String startingYear,String startingMonth,String endingYear,String endingMonth){
  ArrayList<FacilityConsumptionReportRH2Item> facilityConsumptionReportRH2Items=new ArrayList<>();
  try {
    Date startingDate=convertToDate(startingYear,startingMonth,true);
    Date endDate=convertToDate(endingYear,endingMonth,false);
    category=categoryService.get(category);
    for (    Commodity commodity : category.getCommodities()) {
      int openingStock=stockItemSnapshotService.getLatestStock(commodity,startingDate,true);
      int quantityReceived=GenericService.getTotal(commodity,startingDate,endDate,Receive.class,ReceiveItem.class,context);
      quantityReceived+=adjustmentService.totalAdjustment(commodity,startingDate,endDate,AdjustmentReason.RECEIVED_FROM_ANOTHER_FACILITY);
      int quantityDispensedToClients=GenericService.getTotal(commodity,startingDate,endDate,Dispensing.class,DispensingItem.class,context);
      int quantityLost=GenericService.getTotal(commodity,startingDate,endDate,Loss.class,LossItem.class,context);
      int commoditiesDispensedToFacilities=adjustmentService.totalAdjustment(commodity,startingDate,endDate,AdjustmentReason.SENT_TO_ANOTHER_FACILITY);
      int quantityAdjusted=commoditiesDispensedToFacilities;
      int closingStock=stockItemSnapshotService.getLatestStock(commodity,endDate,false);
      FacilityConsumptionReportRH2Item item=new FacilityConsumptionReportRH2Item(commodity.getName(),openingStock,quantityReceived,quantityDispensedToClients,quantityAdjusted,commoditiesDispensedToFacilities,quantityLost,closingStock);
      facilityConsumptionReportRH2Items.add(item);
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
  return facilityConsumptionReportRH2Items;
}",0.9169435215946844
146331,"public static <T>Dao<T,String> initialiseDao(SQLiteOpenHelper openHelper,Class<T> domainClass) throws SQLException {
  ConnectionSource connectionSource=new AndroidConnectionSource(openHelper);
  return createDao(connectionSource,domainClass);
}","public static <T>Dao<T,String> initialiseDao(SQLiteOpenHelper openHelper,Class<T> domainClass) throws SQLException {
  ConnectionSource connectionSource;
  if (openHelper instanceof LmisSqliteOpenHelper) {
    LmisSqliteOpenHelper helper=(LmisSqliteOpenHelper)openHelper;
    connectionSource=helper.getConnectionSource();
  }
 else {
    connectionSource=new AndroidConnectionSource(openHelper);
  }
  return createDao(connectionSource,domainClass);
}",0.703012912482066
146332,"public List<UtilizationItem> getMonthlyUtilizationItems(Commodity commodity,Date date) throws Exception {
  Date monthEndDate=DateUtil.getMonthEndDate(date);
  Date monthStartDate=DateUtil.getMonthStartDate(date);
  List<UtilizationItem> utilizationItems=new ArrayList<>();
  if (monthStartDate.after(new Date())) {
    return utilizationItems;
  }
  if (monthEndDate.after(new Date())) {
    monthEndDate=new Date();
  }
  for (  UtilizationItemName utilizationItemName : UtilizationItemName.values()) {
    if (utilizationItemName.equals(UtilizationItemName.DAY_OF_MONTH)) {
      utilizationItems.add(new UtilizationItem(utilizationItemName.getName(),getDaysOfMonth(commodity,monthStartDate,monthEndDate)));
    }
    if (utilizationItemName.equals(UtilizationItemName.OPENING_BALANCE)) {
      utilizationItems.add(new UtilizationItem(utilizationItemName.getName(),getOpeningBalances(commodity,monthStartDate,monthEndDate)));
    }
    if (utilizationItemName.equals(UtilizationItemName.RECEIVED)) {
      utilizationItems.add(new UtilizationItem(utilizationItemName.getName(),receiveService.getReceivedValues(commodity,monthStartDate,monthEndDate)));
    }
    if (utilizationItemName.equals(UtilizationItemName.DOSES_OPENED) && !commodity.isDevice() || utilizationItemName.equals(UtilizationItemName.USED) && commodity.isDevice()) {
      utilizationItems.add(new UtilizationItem(utilizationItemName.getName(),dispensingService.getDispensedValues(commodity,monthStartDate,monthEndDate,utilizationItemName.equals(UtilizationItemName.DOSES_OPENED))));
    }
    if (utilizationItemName.equals(UtilizationItemName.ENDING_BALANCE)) {
      utilizationItems.add(new UtilizationItem(utilizationItemName.getName(),getEndingBalance(commodity,monthStartDate,monthEndDate)));
    }
    if (utilizationItemName.equals(UtilizationItemName.QUANTITY_RETURNED_TO_LGA)) {
      utilizationItems.add(new UtilizationItem(utilizationItemName.getName(),getReturnedToLGA(commodity,monthStartDate,monthEndDate)));
    }
  }
  return utilizationItems;
}","public List<UtilizationItem> getMonthlyUtilizationItems(Commodity commodity,Date date) throws Exception {
  Date monthEndDate=DateUtil.getMonthEndDate(date);
  Date monthStartDate=DateUtil.getMonthStartDate(date);
  List<UtilizationItem> utilizationItems=new ArrayList<>();
  if (monthStartDate.after(DateUtil.today())) {
    return utilizationItems;
  }
  if (monthEndDate.after(DateUtil.today())) {
    Calendar today=Calendar.getInstance();
    today.set(Calendar.HOUR_OF_DAY,0);
    today.set(Calendar.MINUTE,0);
    today.set(Calendar.SECOND,0);
    today.set(Calendar.MILLISECOND,0);
    monthEndDate=today.getTime();
  }
  for (  UtilizationItemName utilizationItemName : UtilizationItemName.values()) {
    if (utilizationItemName.equals(UtilizationItemName.DAY_OF_MONTH)) {
      utilizationItems.add(new UtilizationItem(utilizationItemName.getName(),getDaysOfMonth(commodity,monthStartDate,monthEndDate)));
    }
    if (utilizationItemName.equals(UtilizationItemName.OPENING_BALANCE)) {
      utilizationItems.add(new UtilizationItem(utilizationItemName.getName(),getOpeningBalances(commodity,monthStartDate,monthEndDate)));
    }
    if (utilizationItemName.equals(UtilizationItemName.RECEIVED)) {
      utilizationItems.add(new UtilizationItem(utilizationItemName.getName(),receiveService.getReceivedValues(commodity,monthStartDate,monthEndDate)));
    }
    if (utilizationItemName.equals(UtilizationItemName.DOSES_OPENED) && !commodity.isDevice() || utilizationItemName.equals(UtilizationItemName.USED) && commodity.isDevice()) {
      utilizationItems.add(new UtilizationItem(utilizationItemName.getName(),dispensingService.getDispensedValues(commodity,monthStartDate,monthEndDate,utilizationItemName.equals(UtilizationItemName.DOSES_OPENED))));
    }
    if (utilizationItemName.equals(UtilizationItemName.ENDING_BALANCE)) {
      utilizationItems.add(new UtilizationItem(utilizationItemName.getName(),getEndingBalance(commodity,monthStartDate,monthEndDate)));
    }
    if (utilizationItemName.equals(UtilizationItemName.QUANTITY_RETURNED_TO_LGA)) {
      utilizationItems.add(new UtilizationItem(utilizationItemName.getName(),getReturnedToLGA(commodity,monthStartDate,monthEndDate)));
    }
  }
  return utilizationItems;
}",0.94109396914446
146333,"@Override protected void onPostExecute(Boolean succeeded){
  if (dialog.isShowing()) {
    dialog.dismiss();
  }
  if (succeeded) {
    startActivity(new Intent(getApplicationContext(),HomeActivity.class));
    finish();
  }
  String toastMessage=succeeded ? registrationSuccessfulMessage : failureCause.getMessage();
  Toast.makeText(getApplicationContext(),toastMessage,LENGTH_SHORT).show();
  Log.e(""String_Node_Str"",toastMessage + ""String_Node_Str"");
}","@Override protected void onPostExecute(Boolean succeeded){
  if (dialog.isShowing() && dialog.getOwnerActivity() != null && !dialog.getOwnerActivity().isFinishing()) {
    dialog.dismiss();
  }
  if (succeeded) {
    startActivity(new Intent(getApplicationContext(),HomeActivity.class));
    finish();
  }
  String toastMessage=succeeded ? registrationSuccessfulMessage : failureCause.getMessage();
  Toast.makeText(getApplicationContext(),toastMessage,LENGTH_SHORT).show();
  Log.e(""String_Node_Str"",toastMessage + ""String_Node_Str"");
}",0.918429003021148
146334,"private Allocation toAllocation(Collection<CommodityActionValue> commodityActionValues){
  Collection<CommodityActionValue> filteredForAllocationId=filter(commodityActionValues,new Predicate<CommodityActionValue>(){
    @Override public boolean apply(    CommodityActionValue commodityActionValue){
      return DataElementType.ALLOCATION_ID.getActivity().equals(commodityActionValue.getCommodityAction().getName());
    }
  }
);
  CommodityActionValue allocationIdValue=newArrayList(filteredForAllocationId).get(0);
  Allocation allocation=new Allocation(allocationIdValue.getValue(),allocationIdValue.getPeriod());
  ArrayList<CommodityActionValue> allocationActionValues=newArrayList(commodityActionValues);
  allocationActionValues.remove(allocationIdValue);
  List<AllocationItem> allocationItems=transform(allocationActionValues,new Function<CommodityActionValue,AllocationItem>(){
    @Override public AllocationItem apply(    CommodityActionValue input){
      AllocationItem allocationItem=new AllocationItem();
      try {
        allocationItem.setQuantity(parseInt(input.getValue()));
      }
 catch (      NumberFormatException e) {
        throw new LmisException(""String_Node_Str"" + input.getCommodityAction().getActivityType() + ""String_Node_Str""+ input.getValue(),e);
      }
      allocationItem.setCommodity(input.getCommodityAction().getCommodity());
      return allocationItem;
    }
  }
);
  allocation.addTransientItems(allocationItems);
  return allocation;
}","private Allocation toAllocation(Collection<CommodityActionValue> commodityActionValues){
  Collection<CommodityActionValue> filteredForAllocationId=filter(commodityActionValues,new Predicate<CommodityActionValue>(){
    @Override public boolean apply(    CommodityActionValue commodityActionValue){
      return DataElementType.ALLOCATION_ID.getActivity().equals(commodityActionValue.getCommodityAction().getName());
    }
  }
);
  if (filteredForAllocationId == null || filteredForAllocationId.size() == 0) {
    return null;
  }
  CommodityActionValue allocationIdValue=newArrayList(filteredForAllocationId).get(0);
  Allocation allocation=new Allocation(allocationIdValue.getValue(),allocationIdValue.getPeriod());
  ArrayList<CommodityActionValue> allocationActionValues=newArrayList(commodityActionValues);
  allocationActionValues.remove(allocationIdValue);
  List<AllocationItem> allocationItems=transform(allocationActionValues,new Function<CommodityActionValue,AllocationItem>(){
    @Override public AllocationItem apply(    CommodityActionValue input){
      AllocationItem allocationItem=new AllocationItem();
      try {
        allocationItem.setQuantity(parseInt(input.getValue()));
      }
 catch (      NumberFormatException e) {
        throw new LmisException(""String_Node_Str"" + input.getCommodityAction().getActivityType() + ""String_Node_Str""+ input.getValue(),e);
      }
      allocationItem.setCommodity(input.getCommodityAction().getCommodity());
      return allocationItem;
    }
  }
);
  allocation.addTransientItems(allocationItems);
  return allocation;
}",0.967090257412838
146335,"private void setupListeners(){
  AdapterView.OnItemSelectedListener listener=new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      clearAdapter();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
;
  spinnerEndingMonth.setOnItemSelectedListener(listener);
  spinnerStartingYear.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      setupEndYearSpinner();
      setupStartingMonthSpinner();
      clearAdapter();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  spinnerEndingYear.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      setupEndMonthSpinner();
      if (getStartingYear().compareTo(getEndingYear()) < 0) {
        ArrayAdapter<String> startMonthAdapter;
        if (endingYearIsCurrent()) {
          startMonthAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_black,getMonths(0,DateUtil.monthNumber() + 1));
        }
 else {
          startMonthAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_black,getMonths());
        }
        spinnerEndingMonth.setAdapter(startMonthAdapter);
      }
      clearAdapter();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  spinnerStartingMonth.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      setupEndMonthSpinner();
      clearAdapter();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
}","private void setupListeners(){
  AdapterView.OnItemSelectedListener listener=new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      clearAdapter();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
;
  spinnerEndingMonth.setOnItemSelectedListener(listener);
  spinnerStartingYear.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      setupEndYearSpinner();
      setupStartingMonthSpinner();
      clearAdapter();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  spinnerEndingYear.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      setupEndMonthSpinner();
      if (getStartingYear().compareTo(getEndingYear()) < 0) {
        ArrayAdapter<String> startMonthAdapter;
        if (endingYearIsCurrent()) {
          startMonthAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_large,getMonths(0,DateUtil.monthNumber() + 1));
        }
 else {
          startMonthAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_large,getMonths());
        }
        spinnerEndingMonth.setAdapter(startMonthAdapter);
      }
      clearAdapter();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  spinnerStartingMonth.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      setupEndMonthSpinner();
      clearAdapter();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
}",0.9949109414758268
146336,"protected void setupEndMonthSpinner(){
  if (getStartingYear().compareTo(getEndingYear()) < 0) {
    return;
  }
  int selectedIndex=spinnerStartingMonth.getSelectedItemPosition();
  ArrayAdapter<String> endMonthAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_black,getMonths(selectedIndex,endingYearIsCurrent() ? DateUtil.monthNumber() + 1 : 12));
  spinnerEndingMonth.setAdapter(endMonthAdapter);
}","protected void setupEndMonthSpinner(){
  if (getStartingYear().compareTo(getEndingYear()) < 0) {
    return;
  }
  int selectedIndex=spinnerStartingMonth.getSelectedItemPosition();
  ArrayAdapter<String> endMonthAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_large,getMonths(selectedIndex,endingYearIsCurrent() ? DateUtil.monthNumber() + 1 : 12));
  spinnerEndingMonth.setAdapter(endMonthAdapter);
}",0.9882352941176472
146337,"protected void setupStartingMonthSpinner(){
  if (startingYearIsCurrent()) {
    ArrayAdapter<String> startMonthAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_black,getMonths(0,DateUtil.monthNumber() + 1));
    spinnerStartingMonth.setAdapter(startMonthAdapter);
  }
 else {
    ArrayAdapter<String> startMonthAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_black,getMonths());
    spinnerStartingMonth.setAdapter(startMonthAdapter);
  }
}","protected void setupStartingMonthSpinner(){
  if (startingYearIsCurrent()) {
    ArrayAdapter<String> startMonthAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_large,getMonths(0,DateUtil.monthNumber() + 1));
    spinnerStartingMonth.setAdapter(startMonthAdapter);
  }
 else {
    ArrayAdapter<String> startMonthAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_large,getMonths());
    spinnerStartingMonth.setAdapter(startMonthAdapter);
  }
}",0.979591836734694
146338,"private void setupSpinners(){
  ArrayAdapter<String> yearsAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_black,getLastNYears(NUMBER_OF_YEARS));
  spinnerStartingYear.setAdapter(yearsAdapter);
  spinnerStartingYear.setSelection(0);
  setupEndYearSpinner();
  ArrayAdapter<String> startMonthAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_black,getMonths());
  spinnerStartingMonth.setAdapter(startMonthAdapter);
  spinnerStartingMonth.setSelection(0);
  setupEndMonthSpinner();
  setupListeners();
  getStrategy().applyVisibilityStrategy(spinnerStartingMonth,spinnerEndingMonth,spinnerStartingYear,spinnerEndingYear,textViewEndingMonth,textViewEndingYear);
}","private void setupSpinners(){
  ArrayAdapter<String> yearsAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_large,getLastNYears(NUMBER_OF_YEARS));
  spinnerStartingYear.setAdapter(yearsAdapter);
  spinnerStartingYear.setSelection(0);
  setupEndYearSpinner();
  ArrayAdapter<String> startMonthAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_large,getMonths());
  spinnerStartingMonth.setAdapter(startMonthAdapter);
  spinnerStartingMonth.setSelection(0);
  setupEndMonthSpinner();
  setupListeners();
  getStrategy().applyVisibilityStrategy(spinnerStartingMonth,spinnerEndingMonth,spinnerStartingYear,spinnerEndingYear,textViewEndingMonth,textViewEndingYear);
}",0.9858757062146892
146339,"protected void setupEndYearSpinner(){
  int selectedIndex=spinnerStartingYear.getSelectedItemPosition();
  ArrayAdapter<String> endYearAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_black,getLastNYears(NUMBER_OF_YEARS).subList(0,selectedIndex + 1));
  spinnerEndingYear.setAdapter(endYearAdapter);
}","protected void setupEndYearSpinner(){
  int selectedIndex=spinnerStartingYear.getSelectedItemPosition();
  ArrayAdapter<String> endYearAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_large,getLastNYears(NUMBER_OF_YEARS).subList(0,selectedIndex + 1));
  spinnerEndingYear.setAdapter(endYearAdapter);
}",0.9846153846153848
146340,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setupActionBar();
  category=(Category)getIntent().getSerializableExtra(ReportsActivity.CATEGORY_BUNDLE_KEY);
  reportType=(ReportType)getIntent().getSerializableExtra(ReportsActivity.REPORT_TYPE_BUNDLE_KEY);
  setContentView(R.layout.activity_monthly_vaccine_utilization_report);
  textViewReportName.setText(reportType.getName());
  ArrayAdapter<String> yearsAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_black,getLastNYears(NUMBER_OF_YEARS));
  spinnerYear.setAdapter(yearsAdapter);
  setupMonthSpinner();
  setupListeners();
  buttonLoadReport.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      textViewReloadReport.setVisibility(View.GONE);
      scrollViewReportItems.setVisibility(View.VISIBLE);
      setItems();
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setupActionBar();
  category=(Category)getIntent().getSerializableExtra(ReportsActivity.CATEGORY_BUNDLE_KEY);
  reportType=(ReportType)getIntent().getSerializableExtra(ReportsActivity.REPORT_TYPE_BUNDLE_KEY);
  setContentView(R.layout.activity_monthly_vaccine_utilization_report);
  textViewReportName.setText(reportType.getName());
  ArrayAdapter<String> yearsAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_large,getLastNYears(NUMBER_OF_YEARS));
  spinnerYear.setAdapter(yearsAdapter);
  setupMonthSpinner();
  setupListeners();
  buttonLoadReport.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      textViewReloadReport.setVisibility(View.GONE);
      scrollViewReportItems.setVisibility(View.VISIBLE);
      setItems();
    }
  }
);
}",0.9945414847161572
146341,"private void setupMonthSpinner(){
  ArrayAdapter<String> startMonthAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_black,getMonths(0,yearIsCurrent() ? DateUtil.monthNumber() + 1 : 12));
  spinnerMonth.setAdapter(startMonthAdapter);
  if (yearIsCurrent()) {
    Calendar calendar=Calendar.getInstance();
    spinnerMonth.setSelection(calendar.get(Calendar.MONTH));
  }
}","private void setupMonthSpinner(){
  ArrayAdapter<String> startMonthAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_large,getMonths(0,yearIsCurrent() ? DateUtil.monthNumber() + 1 : 12));
  spinnerMonth.setAdapter(startMonthAdapter);
  if (yearIsCurrent()) {
    Calendar calendar=Calendar.getInstance();
    spinnerMonth.setSelection(calendar.get(Calendar.MONTH));
  }
}",0.9873096446700508
146342,"public void saveReceive(Receive receive){
  try {
    GenericDao<Receive> receiveDao=new GenericDao<>(Receive.class,context);
    receiveDao.create(receive);
    saveReceiveItems(receive.getReceiveItems());
    if (receive.getAllocation() != null) {
      Allocation allocation=receive.getAllocation();
      allocation.setReceived(true);
      if (!allocation.isDummy()) {
        allocationService.update(allocation);
        alertsService.deleteAllocationAlert(allocation);
      }
 else {
        allocationService.createAllocation(allocation);
        EventBus.getDefault().post(new AllocationCreateEvent(receive.getAllocation()));
      }
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
    e.printStackTrace();
  }
}","public void saveReceive(final Receive receive) throws Exception {
  TransactionManager.callInTransaction(LmisSqliteOpenHelper.getInstance(context).getConnectionSource(),new Callable<Object>(){
    @Override public Object call() throws Exception {
      GenericDao<Receive> receiveDao=new GenericDao<>(Receive.class,context);
      receiveDao.create(receive);
      saveReceiveItems(receive.getReceiveItems());
      if (receive.getAllocation() != null) {
        Allocation allocation=receive.getAllocation();
        allocation.setReceived(true);
        if (!allocation.isDummy()) {
          allocationService.update(allocation);
          alertsService.deleteAllocationAlert(allocation);
        }
 else {
          allocationService.createAllocation(allocation);
          EventBus.getDefault().post(new AllocationCreateEvent(receive.getAllocation()));
        }
      }
      return null;
    }
  }
);
}",0.7884615384615384
146343,"@Override public User operate(Dao<User,String> dao) throws SQLException {
  List<User> users=dao.queryForAll();
  return users.get(0);
}","@Override public User operate(Dao<User,String> dao) throws SQLException {
  List<User> users=dao.queryForAll();
  if (users != null && users.size() > 0) {
    return users.get(0);
  }
  return null;
}",0.8095238095238095
146344,"public User getRegisteredUser() throws IndexOutOfBoundsException {
  return dbUtil.withDao(context,User.class,new Operation<User,User>(){
    @Override public User operate(    Dao<User,String> dao) throws SQLException {
      List<User> users=dao.queryForAll();
      return users.get(0);
    }
  }
);
}","public User getRegisteredUser() throws IndexOutOfBoundsException {
  return dbUtil.withDao(context,User.class,new Operation<User,User>(){
    @Override public User operate(    Dao<User,String> dao) throws SQLException {
      List<User> users=dao.queryForAll();
      if (users != null && users.size() > 0) {
        return users.get(0);
      }
      return null;
    }
  }
);
}",0.8885630498533724
146345,"@Override public void onPerformSync(Account account,Bundle extras,String authority,ContentProviderClient provider,SyncResult syncResult){
  User user=userService.getRegisteredUser();
  i(""String_Node_Str"",account.name);
  commoditySnapshotService.syncWithServer(user);
  i(""String_Node_Str"",account.name);
  allocationService.syncAllocations(user);
  i(""String_Node_Str"",account.name);
  commodityActionService.syncCommodityActionValues(user);
  i(""String_Node_Str"",account.name);
  commodityActionService.syncIndicatorValues(user,commodityService.all());
}","@Override public void onPerformSync(Account account,Bundle extras,String authority,ContentProviderClient provider,SyncResult syncResult){
  User user=userService.getRegisteredUser();
  if (user == null) {
    return;
  }
  i(""String_Node_Str"",account.name);
  commoditySnapshotService.syncWithServer(user);
  i(""String_Node_Str"",account.name);
  allocationService.syncAllocations(user);
  i(""String_Node_Str"",account.name);
  commodityActionService.syncCommodityActionValues(user);
  i(""String_Node_Str"",account.name);
  commodityActionService.syncIndicatorValues(user,commodityService.all());
}",0.9670138888888888
146346,"public RelativeLayout getView(Context applicationContext,int biggestValue,int height){
  int barWidth=Math.round(applicationContext.getResources().getDimension(R.dimen.bar_width));
  int barLegendHeight=70;
  int barHeight=height - barLegendHeight - 50;
  heightForMinThreshold=getHeightForMinThreshold(barHeight,biggestValue);
  heightForMaxThreshold=getHeightForMaxThreshold(barHeight,biggestValue);
  RelativeLayout relativeLayout=getRelativeLayout(applicationContext);
  relativeLayout.addView(getSOHTextView(applicationContext,barWidth));
  relativeLayout.addView(getTextViewForCommodityName(applicationContext,barWidth,barLegendHeight));
  relativeLayout.addView(getColorViewHolder(applicationContext,biggestValue,barWidth,barHeight));
  if (heightForMaxThreshold > heightForMinThreshold) {
    ImageView imageViewSpaceBorderLeft=getImageViewForSpace(applicationContext,barWidth);
    relativeLayout.addView(imageViewSpaceBorderLeft);
    relativeLayout.addView(getMaxTextView(applicationContext,barWidth));
  }
  return relativeLayout;
}","public RelativeLayout getView(Context applicationContext,int biggestValue,int height){
  int barWidth=Math.round(applicationContext.getResources().getDimension(R.dimen.bar_width));
  int barLegendHeight=70;
  int barHeight=height - barLegendHeight - 50;
  heightForMinThreshold=getHeightForMinThreshold(barHeight,biggestValue);
  heightForMaxThreshold=getHeightForMaxThreshold(barHeight,biggestValue);
  RelativeLayout relativeLayout=getRelativeLayout(applicationContext);
  relativeLayout.addView(getSOHTextView(applicationContext,barWidth));
  relativeLayout.addView(getTextViewForCommodityName(applicationContext,barWidth,barLegendHeight));
  relativeLayout.addView(getColorViewHolder(applicationContext,biggestValue,barWidth,barHeight));
  if (heightForMaxThreshold > heightForMinThreshold) {
    ImageView imageViewSpaceBorderLeft=getImageViewForSpace(applicationContext,barWidth);
    relativeLayout.addView(imageViewSpaceBorderLeft);
    relativeLayout.addView(getMaxTextView(applicationContext,barWidth));
    if (actualStockOnHand < minimumThreshold) {
      relativeLayout.addView(getMinimumOrdersTextView(applicationContext,barWidth,minimumThreshold - actualStockOnHand));
    }
  }
  return relativeLayout;
}",0.92226148409894
146347,"@Override public View getView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View view=inflater.inflate(resource,parent,false);
  Map<Integer,String> integerStringMap=new HashMap<>();
  FacilityConsumptionReportRH2Item item=getItem(position);
  integerStringMap.put(R.id.textViewCommodityName,item.getCommodityName());
  integerStringMap.put(R.id.textViewOpeningBalance,String.valueOf(item.getOpeningStock()));
  integerStringMap.put(R.id.textViewQuantityReceived,String.valueOf(item.getCommoditiesReceived()));
  integerStringMap.put(R.id.textViewQuantityAdjusted,String.valueOf(item.getCommoditiesAdjusted()));
  integerStringMap.put(R.id.textViewQuantityDispensedToFacilities,String.valueOf(item.getCommoditiesDispensedToFacilities()));
  integerStringMap.put(R.id.textViewTotalDispensed,String.valueOf(item.totalDispensed()));
  integerStringMap.put(R.id.textViewQuantityLost,String.valueOf(item.getCommoditiesLost()));
  integerStringMap.put(R.id.textViewClosingStock,String.valueOf(item.getClosingStock()));
  for (  Integer key : integerStringMap.keySet()) {
    TextView textView=(TextView)view.findViewById(key);
    textView.setText(integerStringMap.get(key));
  }
  if (isGrey) {
    view.setBackgroundColor(getContext().getResources().getColor(R.color.m_grey));
  }
  isGrey=!isGrey;
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View view=inflater.inflate(resource,parent,false);
  Map<Integer,String> integerStringMap=new HashMap<>();
  FacilityConsumptionReportRH2Item item=getItem(position);
  integerStringMap.put(R.id.textViewCommodityName,item.getCommodityName());
  integerStringMap.put(R.id.textViewOpeningBalance,String.valueOf(item.getOpeningStock()));
  integerStringMap.put(R.id.textViewQuantityReceived,String.valueOf(item.getCommoditiesReceived()));
  integerStringMap.put(R.id.textViewQuantityAdjusted,String.valueOf(item.getCommoditiesAdjusted()));
  integerStringMap.put(R.id.textViewQuantityDispensed,String.valueOf(item.getCommoditiesDispensedToFacilities()));
  integerStringMap.put(R.id.textViewTotalDispensed,String.valueOf(item.totalDispensed()));
  integerStringMap.put(R.id.textViewQuantityLost,String.valueOf(item.getCommoditiesLost()));
  integerStringMap.put(R.id.textViewClosingStock,String.valueOf(item.getClosingStock()));
  for (  Integer key : integerStringMap.keySet()) {
    TextView textView=(TextView)view.findViewById(key);
    textView.setText(integerStringMap.get(key));
  }
  if (isGrey) {
    view.setBackgroundColor(getContext().getResources().getColor(R.color.m_grey));
  }
  isGrey=!isGrey;
  return view;
}",0.9957627118644068
146348,"public static LmisSqliteOpenHelper getInstance(Context context){
  if (_helperInstance == null)   _helperInstance=new LmisSqliteOpenHelper(context);
  return _helperInstance;
}","public static LmisSqliteOpenHelper getInstance(Context context){
  if (_helperInstance == null)   syncInit(context);
  return _helperInstance;
}",0.875
146349,"public List<Category> all(){
  if (allCategories == null) {
    allCategories=dbUtil.withDao(context,Category.class,new DbUtil.Operation<Category,List<Category>>(){
      @Override public List<Category> operate(      Dao<Category,String> dao) throws SQLException {
        return dao.queryForAll();
      }
    }
);
  }
  return allCategories;
}","public List<Category> all(){
  if (allCategories == null || allCategories.size() == 0) {
    allCategories=dbUtil.withDao(context,Category.class,new DbUtil.Operation<Category,List<Category>>(){
      @Override public List<Category> operate(      Dao<Category,String> dao) throws SQLException {
        return dao.queryForAll();
      }
    }
);
  }
  return allCategories;
}",0.9596662030598052
146350,"public List<DataSet> all(){
  if (allDataSets == null) {
    allDataSets=dbUtil.withDao(DataSet.class,new DbUtil.Operation<DataSet,List<DataSet>>(){
      @Override public List<DataSet> operate(      Dao<DataSet,String> dao) throws SQLException {
        return dao.queryForAll();
      }
    }
);
  }
  return allDataSets;
}","public List<DataSet> all(){
  if (allDataSets == null || allDataSets.size() == 0) {
    allDataSets=dbUtil.withDao(DataSet.class,new DbUtil.Operation<DataSet,List<DataSet>>(){
      @Override public List<DataSet> operate(      Dao<DataSet,String> dao) throws SQLException {
        return dao.queryForAll();
      }
    }
);
  }
  return allDataSets;
}",0.9601181683899556
146351,"public List<FacilityConsumptionReportRH2Item> getFacilityConsumptionReportRH2Items(Category category,String startingYear,String startingMonth,String endingYear,String endingMonth){
  ArrayList<FacilityConsumptionReportRH2Item> facilityConsumptionReportRH2Items=new ArrayList<>();
  try {
    Date startingDate=convertToDate(startingYear,startingMonth,true);
    Date endDate=convertToDate(endingYear,endingMonth,false);
    category=categoryService.get(category);
    for (    Commodity commodity : category.getCommodities()) {
      int openingStock=stockItemSnapshotService.getLatestStock(commodity,startingDate,true);
      int quantityReceived=GenericService.getTotal(commodity,startingDate,endDate,Receive.class,ReceiveItem.class,context);
      int quantityDispensedToClients=GenericService.getTotal(commodity,startingDate,endDate,Dispensing.class,DispensingItem.class,context);
      int quantityAdjusted=adjustmentService.totalAdjustment(commodity,startingDate,endDate);
      int quantityLost=GenericService.getTotal(commodity,startingDate,endDate,Loss.class,LossItem.class,context);
      int commoditiesDispensedToFacilities=adjustmentService.totalAdjustment(commodity,startingDate,endDate,AdjustmentReason.SENT_TO_ANOTHER_FACILITY);
      int closingStock=stockItemSnapshotService.getLatestStock(commodity,endDate,false);
      FacilityConsumptionReportRH2Item item=new FacilityConsumptionReportRH2Item(commodity.getName(),openingStock,quantityReceived,quantityDispensedToClients,quantityAdjusted,commoditiesDispensedToFacilities,quantityLost,closingStock);
      facilityConsumptionReportRH2Items.add(item);
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
  return facilityConsumptionReportRH2Items;
}","public List<FacilityConsumptionReportRH2Item> getFacilityConsumptionReportRH2Items(Category category,String startingYear,String startingMonth,String endingYear,String endingMonth){
  ArrayList<FacilityConsumptionReportRH2Item> facilityConsumptionReportRH2Items=new ArrayList<>();
  try {
    Date startingDate=convertToDate(startingYear,startingMonth,true);
    Date endDate=convertToDate(endingYear,endingMonth,false);
    category=categoryService.get(category);
    for (    Commodity commodity : category.getCommodities()) {
      int openingStock=stockItemSnapshotService.getLatestStock(commodity,startingDate,true);
      int quantityReceived=GenericService.getTotal(commodity,startingDate,endDate,Receive.class,ReceiveItem.class,context);
      int quantityDispensedToClients=GenericService.getTotal(commodity,startingDate,endDate,Dispensing.class,DispensingItem.class,context);
      int quantityAdjusted=adjustmentService.totalAdjustmentNumber(commodity,startingDate,endDate);
      int quantityLost=GenericService.getTotal(commodity,startingDate,endDate,Loss.class,LossItem.class,context);
      int commoditiesDispensedToFacilities=adjustmentService.totalAdjustment(commodity,startingDate,endDate,AdjustmentReason.SENT_TO_ANOTHER_FACILITY);
      int closingStock=stockItemSnapshotService.getLatestStock(commodity,endDate,false);
      FacilityConsumptionReportRH2Item item=new FacilityConsumptionReportRH2Item(commodity.getName(),openingStock,quantityReceived,quantityDispensedToClients,quantityAdjusted,commoditiesDispensedToFacilities,quantityLost,closingStock);
      facilityConsumptionReportRH2Items.add(item);
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
  return facilityConsumptionReportRH2Items;
}",0.9982886480319452
146352,"private void setupListeners(){
  AdapterView.OnItemSelectedListener listener=new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      clearAdapter();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
;
  spinnerEndingMonth.setOnItemSelectedListener(listener);
  spinnerStartingYear.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      setupEndYearSpinner();
      setupStartingMonthSpinner();
      clearAdapter();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  spinnerEndingYear.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      setupEndMonthSpinner();
      clearAdapter();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  spinnerStartingMonth.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      setupEndMonthSpinner();
      clearAdapter();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
}","private void setupListeners(){
  AdapterView.OnItemSelectedListener listener=new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      clearAdapter();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
;
  spinnerEndingMonth.setOnItemSelectedListener(listener);
  spinnerStartingYear.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      setupEndYearSpinner();
      setupStartingMonthSpinner();
      clearAdapter();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  spinnerEndingYear.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      setupEndMonthSpinner();
      if (getStartingYear().compareTo(getEndingYear()) < 0) {
        ArrayAdapter<String> startMonthAdapter;
        if (endingYearIsCurrent()) {
          startMonthAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_black,getMonths(0,DateUtil.monthNumber() + 1));
        }
 else {
          startMonthAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_black,getMonths());
        }
        spinnerEndingMonth.setAdapter(startMonthAdapter);
      }
      clearAdapter();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  spinnerStartingMonth.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      setupEndMonthSpinner();
      clearAdapter();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
}",0.8558951965065502
146353,"protected void setupEndMonthSpinner(){
  int selectedIndex=spinnerStartingMonth.getSelectedItemPosition();
  ArrayAdapter<String> endMonthAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_black,getMonths(selectedIndex,endingYearIsCurrent() ? DateUtil.monthNumber() + 1 : 12));
  spinnerEndingMonth.setAdapter(endMonthAdapter);
}","protected void setupEndMonthSpinner(){
  if (getStartingYear().compareTo(getEndingYear()) < 0) {
    return;
  }
  int selectedIndex=spinnerStartingMonth.getSelectedItemPosition();
  ArrayAdapter<String> endMonthAdapter=new ArrayAdapter<>(getApplicationContext(),R.layout.spinner_item_black,getMonths(selectedIndex,endingYearIsCurrent() ? DateUtil.monthNumber() + 1 : 12));
  spinnerEndingMonth.setAdapter(endMonthAdapter);
}",0.904639175257732
146354,"private void setupUnexpectedReasonsSpinner(final Spinner spinnerUnexpectedReasons,final OrderCommodityViewModel orderCommodityViewModel){
  spinnerUnexpectedReasons.setOnItemSelectedListener(new LmisOnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      orderCommodityViewModel.setUnexpectedReasonPosition(position);
      if (position != 0) {
        orderCommodityViewModel.setReasonForUnexpectedOrderQuantity((OrderReason)spinnerUnexpectedReasons.getAdapter().getItem(position));
      }
    }
  }
);
  setupSpinnerData(spinnerUnexpectedReasons,unexpectedOrderReasons,orderCommodityViewModel.getUnexpectedReasonPosition());
}","private void setupUnexpectedReasonsSpinner(final Spinner spinnerUnexpectedReasons,final OrderCommodityViewModel orderCommodityViewModel){
  spinnerUnexpectedReasons.setOnItemSelectedListener(new LmisOnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      orderCommodityViewModel.setUnexpectedReasonPosition(position);
      if (position != 0) {
        orderCommodityViewModel.setReasonForUnexpectedOrderQuantity((OrderReason)spinnerUnexpectedReasons.getAdapter().getItem(position));
      }
 else {
        orderCommodityViewModel.setReasonForUnexpectedOrderQuantity(null);
      }
    }
  }
);
  setupSpinnerData(spinnerUnexpectedReasons,unexpectedOrderReasons,orderCommodityViewModel.getUnexpectedReasonPosition());
}",0.940327868852459
146355,"@Override public void onClick(View v){
  if (!allocationIdIsValid(textViewAllocationId.getText().toString())) {
    Toast.makeText(getApplicationContext(),getString(R.string.receive_submit_validation_message_allocation_id),Toast.LENGTH_SHORT).show();
    return;
  }
  if (!quantitiesAreValid()) {
    Toast.makeText(getApplicationContext(),getString(R.string.receive_quantities_validation_error_message),Toast.LENGTH_SHORT).show();
    return;
  }
  ReceiveConfirmFragment receiveConfirmFragment=ReceiveConfirmFragment.newInstance(generateReceive());
  receiveConfirmFragment.show(getSupportFragmentManager(),""String_Node_Str"");
}","@Override public void onClick(View v){
  if (!allocationIdIsValid(textViewAllocationId.getText().toString())) {
    Toast.makeText(getApplicationContext(),getString(R.string.receive_submit_validation_message_allocation_id),Toast.LENGTH_SHORT).show();
    return;
  }
  if (!quantitiesAreValid()) {
    Toast.makeText(getApplicationContext(),getString(R.string.receive_quantities_validation_error_message),Toast.LENGTH_SHORT).show();
    return;
  }
  if (completedAllocationIds.contains(textViewAllocationId.getText().toString())) {
    Toast.makeText(getApplicationContext(),getString(R.string.error_allocation_received),Toast.LENGTH_SHORT).show();
    return;
  }
  ReceiveConfirmFragment receiveConfirmFragment=ReceiveConfirmFragment.newInstance(generateReceive());
  receiveConfirmFragment.show(getSupportFragmentManager(),""String_Node_Str"");
}",0.8532792427315754
146356,"private void setupAllocationIdTextView(){
  final ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_dropdown_item_1line,allocationService.getYetToBeReceivedAllocationIds());
  textViewAllocationId.setAdapter(adapter);
  textViewAllocationId.addTextChangedListener(new LmisTextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      String text=s.toString();
      if (text.trim().length() > 6) {
        setAllocation(text);
      }
    }
  }
);
  textViewAllocationId.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      String text=adapter.getItem(position);
      setAllocation(text);
    }
  }
);
}","private void setupAllocationIdTextView(){
  final ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_dropdown_item_1line,allocationService.getYetToBeReceivedAllocationIds());
  textViewAllocationId.setAdapter(adapter);
  textViewAllocationId.addTextChangedListener(new LmisTextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      String text=s.toString();
      if (text.trim().length() >= 6) {
        setAllocation(text);
      }
    }
  }
);
  textViewAllocationId.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      String text=adapter.getItem(position);
      setAllocation(text);
    }
  }
);
}",0.9993593850096092
146357,"public Receive generateReceive(){
  Receive receive=new Receive(spinnerSource.getSelectedItem().toString(),allocation);
  for (int i=0; i < arrayAdapter.getCount(); i++) {
    ReceiveCommodityViewModel viewModel=(ReceiveCommodityViewModel)arrayAdapter.getItem(i);
    ReceiveItem receiveItem=viewModel.getReceiveItem();
    receive.addReceiveItem(receiveItem);
  }
  return receive;
}","public Receive generateReceive(){
  if ((allocation == null && spinnerSource.getSelectedItem().toString().contains(getString(R.string.lga))) || (allocation != null && allocation.isDummy())) {
    generateDummyAllocation(textViewAllocationId.getText().toString().trim());
  }
  Receive receive=new Receive(spinnerSource.getSelectedItem().toString(),allocation);
  for (int i=0; i < arrayAdapter.getCount(); i++) {
    ReceiveCommodityViewModel viewModel=(ReceiveCommodityViewModel)arrayAdapter.getItem(i);
    ReceiveItem receiveItem=viewModel.getReceiveItem();
    receive.addReceiveItem(receiveItem);
  }
  return receive;
}",0.707631318136769
146358,"private void setupReceiveButton(){
  buttonSubmitReceive.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (!allocationIdIsValid(textViewAllocationId.getText().toString())) {
        Toast.makeText(getApplicationContext(),getString(R.string.receive_submit_validation_message_allocation_id),Toast.LENGTH_SHORT).show();
        return;
      }
      if (!quantitiesAreValid()) {
        Toast.makeText(getApplicationContext(),getString(R.string.receive_quantities_validation_error_message),Toast.LENGTH_SHORT).show();
        return;
      }
      ReceiveConfirmFragment receiveConfirmFragment=ReceiveConfirmFragment.newInstance(generateReceive());
      receiveConfirmFragment.show(getSupportFragmentManager(),""String_Node_Str"");
    }
  }
);
}","private void setupReceiveButton(){
  buttonSubmitReceive.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (!allocationIdIsValid(textViewAllocationId.getText().toString())) {
        Toast.makeText(getApplicationContext(),getString(R.string.receive_submit_validation_message_allocation_id),Toast.LENGTH_SHORT).show();
        return;
      }
      if (!quantitiesAreValid()) {
        Toast.makeText(getApplicationContext(),getString(R.string.receive_quantities_validation_error_message),Toast.LENGTH_SHORT).show();
        return;
      }
      if (completedAllocationIds.contains(textViewAllocationId.getText().toString())) {
        Toast.makeText(getApplicationContext(),getString(R.string.error_allocation_received),Toast.LENGTH_SHORT).show();
        return;
      }
      ReceiveConfirmFragment receiveConfirmFragment=ReceiveConfirmFragment.newInstance(generateReceive());
      receiveConfirmFragment.show(getSupportFragmentManager(),""String_Node_Str"");
    }
  }
);
}",0.8723287671232877
146359,"@Override public void afterTextChanged(Editable s){
  String text=s.toString();
  if (text.trim().length() > 6) {
    setAllocation(text);
  }
}","@Override public void afterTextChanged(Editable s){
  String text=s.toString();
  if (text.trim().length() >= 6) {
    setAllocation(text);
  }
}",0.9965397923875432
146360,"@Override protected void afterCreate(Bundle savedInstanceState){
  completedAllocationIds=allocationService.getReceivedAllocationIds();
  setupAllocationIdTextView();
  setupReceiveButton();
  if (presetAllocationId != null) {
    textViewAllocationId.setText(presetAllocationId);
  }
}","@Override protected void afterCreate(Bundle savedInstanceState){
  completedAllocationIds=new ArrayList<>(allocationService.getReceivedAllocationIds());
  setupAllocationIdTextView();
  setupReceiveButton();
  if (presetAllocationId != null) {
    textViewAllocationId.setText(presetAllocationId);
  }
}",0.9711375212224108
146361,"@Override protected void onPostExecute(Boolean success){
  super.onPostExecute(success);
  if (success) {
    Toast.makeText(fragment.getActivity().getApplicationContext(),getString(R.string.receive_successful),Toast.LENGTH_LONG).show();
    fragment.dismiss();
    FragmentActivity activity=getActivity();
    if (activity != null) {
      activity.finish();
      startActivity(activity.getIntent());
    }
  }
 else {
    Toast.makeText(fragment.getActivity().getApplicationContext(),getString(R.string.receive_failed),Toast.LENGTH_LONG).show();
  }
  this.dialog.dismiss();
}","@Override protected void onPostExecute(Boolean success){
  super.onPostExecute(success);
  if (success) {
    Toast.makeText(fragment.getActivity().getApplicationContext(),getString(R.string.receive_successful),Toast.LENGTH_LONG).show();
    fragment.dismiss();
    FragmentActivity activity=getActivity();
    if (activity instanceof ReceiveActivity) {
      ReceiveActivity receiveActivity=(ReceiveActivity)activity;
      receiveActivity.clearInput();
    }
  }
 else {
    Toast.makeText(fragment.getActivity().getApplicationContext(),getString(R.string.receive_failed),Toast.LENGTH_LONG).show();
  }
  this.dialog.dismiss();
}",0.8363636363636363
146362,"public void saveReceive(Receive receive){
  try {
    GenericDao<Receive> receiveDao=new GenericDao<>(Receive.class,context);
    receiveDao.create(receive);
    saveReceiveItems(receive.getReceiveItems());
    if (receive.getAllocation() != null) {
      Allocation allocation=receive.getAllocation();
      allocation.setReceived(true);
      if (!receive.getAllocation().isDummy()) {
        allocationService.update(allocation);
        alertsService.deleteAllocationAlert(allocation);
      }
 else {
        allocationService.createAllocation(receive.getAllocation());
      }
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
    e.printStackTrace();
  }
}","public void saveReceive(Receive receive){
  try {
    GenericDao<Receive> receiveDao=new GenericDao<>(Receive.class,context);
    receiveDao.create(receive);
    saveReceiveItems(receive.getReceiveItems());
    if (receive.getAllocation() != null) {
      Allocation allocation=receive.getAllocation();
      allocation.setReceived(true);
      if (!receive.getAllocation().isDummy()) {
        allocationService.update(allocation);
        alertsService.deleteAllocationAlert(allocation);
      }
 else {
        allocationService.createAllocation(receive.getAllocation());
        EventBus.getDefault().post(new AllocationCreateEvent(receive.getAllocation()));
      }
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
    e.printStackTrace();
  }
}",0.9402985074626866
146363,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getSupportActionBar().setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM | ActionBar.DISPLAY_SHOW_HOME | ActionBar.DISPLAY_HOME_AS_UP);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  getSupportActionBar().setDisplayUseLogoEnabled(true);
  getSupportActionBar().setHomeAsUpIndicator(R.drawable.transparent);
  commodities=commodityService.all();
  setUpAdapters();
  populateCommoditiesSpinner();
  setUpCommoditySearch();
  buttonLoadReport.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      textViewReloadBinCard.setVisibility(View.GONE);
      linearLayoutBinCardItems.setVisibility(View.VISIBLE);
      hideKeyboard();
      populateBinCard((Commodity)spinnerCommodities.getItemAtPosition(currentPosition));
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getSupportActionBar().setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM | ActionBar.DISPLAY_SHOW_HOME | ActionBar.DISPLAY_HOME_AS_UP);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  getSupportActionBar().setDisplayUseLogoEnabled(true);
  getSupportActionBar().setHomeAsUpIndicator(R.drawable.transparent);
  commodities=commodityService.sortedAll();
  setUpAdapters();
  populateCommoditiesSpinner();
  setUpCommoditySearch();
  buttonLoadReport.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      textViewReloadBinCard.setVisibility(View.GONE);
      linearLayoutBinCardItems.setVisibility(View.VISIBLE);
      hideKeyboard();
      populateBinCard((Commodity)spinnerCommodities.getItemAtPosition(currentPosition));
    }
  }
);
}",0.9955106621773288
146364,"private List<Commodity> getCommoditiesThatCanBeSelected(){
  return from(commodityService.all()).filter(new Predicate<Commodity>(){
    @Override public boolean apply(    Commodity input){
      return !commodityHasBeenSelected(input) && getCheckBoxVisibilityStrategy().allowClick(new BaseCommodityViewModel(input));
    }
  }
).toList();
}","private List<Commodity> getCommoditiesThatCanBeSelected(){
  return from(commodityService.sortedAll()).filter(new Predicate<Commodity>(){
    @Override public boolean apply(    Commodity input){
      return !commodityHasBeenSelected(input) && getCheckBoxVisibilityStrategy().allowClick(new BaseCommodityViewModel(input));
    }
  }
).toList();
}",0.9883381924198252
146365,"@Override public View getView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View view=inflater.inflate(resource,parent,false);
  Map<Integer,String> integerStringMap=new HashMap<>();
  FacilityConsumptionReportRH2Item item=getItem(position);
  integerStringMap.put(R.id.textViewCommodityName,item.getCommodityName());
  integerStringMap.put(R.id.textViewOpeningBalance,String.valueOf(item.getOpeningStock()));
  integerStringMap.put(R.id.textViewQuantityReceived,String.valueOf(item.getCommoditiesReceived()));
  integerStringMap.put(R.id.textViewQuantityDispensedToClients,String.valueOf(item.getCommoditiesDispensedToClients()));
  integerStringMap.put(R.id.textViewQuantityDispensedToFacilities,String.valueOf(item.getCommoditiesDispensedToFacilities()));
  integerStringMap.put(R.id.textViewTotalDispensed,String.valueOf(item.totalDispensed()));
  integerStringMap.put(R.id.textViewQuantityLost,String.valueOf(item.getCommoditiesLost()));
  integerStringMap.put(R.id.textViewClosingStock,String.valueOf(item.getClosingStock()));
  for (  Integer key : integerStringMap.keySet()) {
    TextView textView=(TextView)view.findViewById(key);
    textView.setText(integerStringMap.get(key));
  }
  if (isGrey) {
    view.setBackgroundColor(getContext().getResources().getColor(R.color.m_grey));
  }
  isGrey=!isGrey;
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View view=inflater.inflate(resource,parent,false);
  Map<Integer,String> integerStringMap=new HashMap<>();
  FacilityConsumptionReportRH2Item item=getItem(position);
  integerStringMap.put(R.id.textViewCommodityName,item.getCommodityName());
  integerStringMap.put(R.id.textViewOpeningBalance,String.valueOf(item.getOpeningStock()));
  integerStringMap.put(R.id.textViewQuantityReceived,String.valueOf(item.getCommoditiesReceived()));
  integerStringMap.put(R.id.textViewQuantityAdjusted,String.valueOf(item.getCommoditiesAdjusted()));
  integerStringMap.put(R.id.textViewQuantityDispensedToFacilities,String.valueOf(item.getCommoditiesDispensedToFacilities()));
  integerStringMap.put(R.id.textViewTotalDispensed,String.valueOf(item.totalDispensed()));
  integerStringMap.put(R.id.textViewQuantityLost,String.valueOf(item.getCommoditiesLost()));
  integerStringMap.put(R.id.textViewClosingStock,String.valueOf(item.getClosingStock()));
  for (  Integer key : integerStringMap.keySet()) {
    TextView textView=(TextView)view.findViewById(key);
    textView.setText(integerStringMap.get(key));
  }
  if (isGrey) {
    view.setBackgroundColor(getContext().getResources().getColor(R.color.m_grey));
  }
  isGrey=!isGrey;
  return view;
}",0.9581005586592178
146366,"public FacilityConsumptionReportRH2Item(String commodityName,int openingStock,int commoditiesReceived,int commoditiesDispensedToClients,int commoditiesDispensedToFacilities,int commoditiesLost,int closingStock){
  this.commodityName=commodityName;
  this.openingStock=openingStock;
  this.commoditiesReceived=commoditiesReceived;
  this.commoditiesDispensedToClients=commoditiesDispensedToClients;
  this.commoditiesDispensedToFacilities=commoditiesDispensedToFacilities;
  this.commoditiesLost=commoditiesLost;
  this.closingStock=closingStock;
}","public FacilityConsumptionReportRH2Item(String commodityName,int openingStock,int commoditiesReceived,int commoditiesDispensedToClients,int commoditiesAdjusted,int commoditiesDispensedToFacilities,int commoditiesLost,int closingStock){
  this.commodityName=commodityName;
  this.openingStock=openingStock;
  this.commoditiesReceived=commoditiesReceived;
  this.commoditiesDispensedToClients=commoditiesDispensedToClients;
  this.commoditiesAdjusted=commoditiesAdjusted;
  this.commoditiesDispensedToFacilities=commoditiesDispensedToFacilities;
  this.commoditiesLost=commoditiesLost;
  this.closingStock=closingStock;
}",0.9382504288164666
146367,"public List<FacilityConsumptionReportRH2Item> getFacilityConsumptionReportRH2Items(Category category,String startingYear,String startingMonth,String endingYear,String endingMonth){
  ArrayList<FacilityConsumptionReportRH2Item> facilityConsumptionReportRH2Items=new ArrayList<>();
  try {
    Date startingDate=convertToDate(startingYear,startingMonth,true);
    Date endDate=convertToDate(endingYear,endingMonth,false);
    category=categoryService.get(category);
    for (    Commodity commodity : category.getCommodities()) {
      int openingStock=stockItemSnapshotService.getLatestStock(commodity,startingDate,true);
      int quantityReceived=GenericService.getTotal(commodity,startingDate,endDate,Receive.class,ReceiveItem.class,context);
      int quantityDispensedToClients=GenericService.getTotal(commodity,startingDate,endDate,Dispensing.class,DispensingItem.class,context);
      int quantityLost=GenericService.getTotal(commodity,startingDate,endDate,Loss.class,LossItem.class,context);
      int commoditiesDispensedToFacilities=adjustmentService.totalAdjustment(commodity,startingDate,endDate,AdjustmentReason.SENT_TO_ANOTHER_FACILITY);
      int closingStock=stockItemSnapshotService.getLatestStock(commodity,endDate,false);
      FacilityConsumptionReportRH2Item item=new FacilityConsumptionReportRH2Item(commodity.getName(),openingStock,quantityReceived,quantityDispensedToClients,commoditiesDispensedToFacilities,quantityLost,closingStock);
      facilityConsumptionReportRH2Items.add(item);
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
  return facilityConsumptionReportRH2Items;
}","public List<FacilityConsumptionReportRH2Item> getFacilityConsumptionReportRH2Items(Category category,String startingYear,String startingMonth,String endingYear,String endingMonth){
  ArrayList<FacilityConsumptionReportRH2Item> facilityConsumptionReportRH2Items=new ArrayList<>();
  try {
    Date startingDate=convertToDate(startingYear,startingMonth,true);
    Date endDate=convertToDate(endingYear,endingMonth,false);
    category=categoryService.get(category);
    for (    Commodity commodity : category.getCommodities()) {
      int openingStock=stockItemSnapshotService.getLatestStock(commodity,startingDate,true);
      int quantityReceived=GenericService.getTotal(commodity,startingDate,endDate,Receive.class,ReceiveItem.class,context);
      int quantityDispensedToClients=GenericService.getTotal(commodity,startingDate,endDate,Dispensing.class,DispensingItem.class,context);
      int quantityAdjusted=adjustmentService.totalAdjustment(commodity,startingDate,endDate);
      int quantityLost=GenericService.getTotal(commodity,startingDate,endDate,Loss.class,LossItem.class,context);
      int commoditiesDispensedToFacilities=adjustmentService.totalAdjustment(commodity,startingDate,endDate,AdjustmentReason.SENT_TO_ANOTHER_FACILITY);
      int closingStock=stockItemSnapshotService.getLatestStock(commodity,endDate,false);
      FacilityConsumptionReportRH2Item item=new FacilityConsumptionReportRH2Item(commodity.getName(),openingStock,quantityReceived,quantityDispensedToClients,quantityAdjusted,commoditiesDispensedToFacilities,quantityLost,closingStock);
      facilityConsumptionReportRH2Items.add(item);
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
  }
  return facilityConsumptionReportRH2Items;
}",0.9672469755089996
146368,"Dispensing getDispensing(){
  final Dispensing dispensing=new Dispensing();
  dispensing.setPrescriptionId(textViewPrescriptionId.getText().toString());
  onEachSelectedCommodity(new SelectedCommodityHandler(){
    @Override public void operate(    View view,    BaseCommodityViewModel commodityViewModel){
      EditText editTextQuantity=(EditText)view.findViewById(R.id.editTextQuantity);
      int quantity=getIntFromString(editTextQuantity.getText().toString());
      dispensing.addItem(new DispensingItem(commodityViewModel.getCommodity(),quantity));
    }
  }
);
  return dispensing;
}","Dispensing getDispensing(){
  final Dispensing dispensing=new Dispensing();
  dispensing.setPrescriptionId(textViewPrescriptionId.getText().toString());
  for (int i=0; i < arrayAdapter.getCount(); i++) {
    BaseCommodityViewModel commodityViewMode=(BaseCommodityViewModel)arrayAdapter.getItem(i);
    dispensing.addItem(new DispensingItem(commodityViewMode.getCommodity(),commodityViewMode.getQuantityEntered()));
  }
  return dispensing;
}",0.3829787234042553
146369,"@Test public void getDispensingShouldGetItemsInTheListView() throws Exception {
  String commodityName=""String_Node_Str"";
  DispenseActivity dispenseActivity=getDispenseActivity();
  GridView mockGridView=mock(GridView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  SelectedCommoditiesAdapter mockSelectedCommoditiesAdapter=mock(SelectedCommoditiesAdapter.class);
  mockEditText.setText(""String_Node_Str"");
  Commodity commodity=new Commodity(commodityName);
  when(mockSelectedCommoditiesAdapter.getItem(anyInt())).thenReturn(new BaseCommodityViewModel(commodity));
  when(mockSelectedCommoditiesAdapter.getCount()).thenReturn(1);
  when(mockSelectedCommoditiesAdapter.getView(anyInt(),org.mockito.Matchers.any(View.class),org.mockito.Matchers.any(ViewGroup.class))).thenReturn(mockListItemView);
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockGridView.getChildAt(anyInt())).thenReturn(mockListItemView);
  when(mockGridView.getChildCount()).thenReturn(1);
  when(mockGridView.getAdapter()).thenReturn(mockSelectedCommoditiesAdapter);
  dispenseActivity.gridViewSelectedCommodities=mockGridView;
  Dispensing dispensing=dispenseActivity.getDispensing();
  assertThat(dispensing.getDispensingItems().size(),is(1));
  assertThat(dispensing.getDispensingItems().get(0).getQuantity(),is(12));
  assertThat(dispensing.getDispensingItems().get(0).getCommodity().getName(),is(commodityName));
}","@Test public void getDispensingShouldGetItemsInTheListView() throws Exception {
  String commodityName=""String_Node_Str"";
  DispenseActivity dispenseActivity=getDispenseActivity();
  BaseCommodityViewModel commodityViewModel=new BaseCommodityViewModel(new Commodity(commodityName));
  commodityViewModel.setQuantityEntered(12);
  CommodityToggledEvent commodityToggledEvent=new CommodityToggledEvent(commodityViewModel);
  EventBus.getDefault().post(commodityToggledEvent);
  Dispensing dispensing=dispenseActivity.getDispensing();
  assertThat(dispensing.getDispensingItems().size(),is(1));
  assertThat(dispensing.getDispensingItems().get(0).getQuantity(),is(12));
  assertThat(dispensing.getDispensingItems().get(0).getCommodity().getName(),is(commodityName));
}",0.4504424778761062
146370,"Dispensing getDispensing(){
  final Dispensing dispensing=new Dispensing();
  dispensing.setPrescriptionId(textViewPrescriptionId.getText().toString());
  onEachSelectedCommodity(new SelectedCommodityHandler(){
    @Override public void operate(    View view,    BaseCommodityViewModel commodityViewModel){
      EditText editTextQuantity=(EditText)view.findViewById(R.id.editTextQuantity);
      int quantity=getIntFromString(editTextQuantity.getText().toString());
      dispensing.addItem(new DispensingItem(commodityViewModel.getCommodity(),quantity));
    }
  }
);
  return dispensing;
}","Dispensing getDispensing(){
  final Dispensing dispensing=new Dispensing();
  dispensing.setPrescriptionId(textViewPrescriptionId.getText().toString());
  for (int i=0; i < arrayAdapter.getCount(); i++) {
    BaseCommodityViewModel commodityViewMode=(BaseCommodityViewModel)arrayAdapter.getItem(i);
    dispensing.addItem(new DispensingItem(commodityViewMode.getCommodity(),commodityViewMode.getQuantityEntered()));
  }
  return dispensing;
}",0.3829787234042553
146371,"@Test public void getDispensingShouldGetItemsInTheListView() throws Exception {
  String commodityName=""String_Node_Str"";
  DispenseActivity dispenseActivity=getDispenseActivity();
  GridView mockGridView=mock(GridView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  SelectedCommoditiesAdapter mockSelectedCommoditiesAdapter=mock(SelectedCommoditiesAdapter.class);
  mockEditText.setText(""String_Node_Str"");
  Commodity commodity=new Commodity(commodityName);
  when(mockSelectedCommoditiesAdapter.getItem(anyInt())).thenReturn(new BaseCommodityViewModel(commodity));
  when(mockSelectedCommoditiesAdapter.getCount()).thenReturn(1);
  when(mockSelectedCommoditiesAdapter.getView(anyInt(),org.mockito.Matchers.any(View.class),org.mockito.Matchers.any(ViewGroup.class))).thenReturn(mockListItemView);
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockGridView.getChildAt(anyInt())).thenReturn(mockListItemView);
  when(mockGridView.getChildCount()).thenReturn(1);
  when(mockGridView.getAdapter()).thenReturn(mockSelectedCommoditiesAdapter);
  dispenseActivity.gridViewSelectedCommodities=mockGridView;
  Dispensing dispensing=dispenseActivity.getDispensing();
  assertThat(dispensing.getDispensingItems().size(),is(1));
  assertThat(dispensing.getDispensingItems().get(0).getQuantity(),is(12));
  assertThat(dispensing.getDispensingItems().get(0).getCommodity().getName(),is(commodityName));
}","@Test public void getDispensingShouldGetItemsInTheListView() throws Exception {
  String commodityName=""String_Node_Str"";
  DispenseActivity dispenseActivity=getDispenseActivity();
  BaseCommodityViewModel commodityViewModel=new BaseCommodityViewModel(new Commodity(commodityName));
  commodityViewModel.setQuantityEntered(12);
  CommodityToggledEvent commodityToggledEvent=new CommodityToggledEvent(commodityViewModel);
  EventBus.getDefault().post(commodityToggledEvent);
  Dispensing dispensing=dispenseActivity.getDispensing();
  assertThat(dispensing.getDispensingItems().size(),is(1));
  assertThat(dispensing.getDispensingItems().get(0).getQuantity(),is(12));
  assertThat(dispensing.getDispensingItems().get(0).getCommodity().getName(),is(commodityName));
}",0.4504424778761062
146372,"public void onCommodityToggledEventCompleted(){
  searchCommodityAdapter=new SearchCommodityAdapter(this,R.layout.search_commodity_item,newArrayList(getCommoditiesThatCanBeSelected()));
  autoCompleteTextViewCommodities.setAdapter(searchCommodityAdapter);
}","public void onCommodityToggledEventCompleted(){
  searchCommodityAdapter.notifyDataSetChanged();
}",0.4901408450704225
146373,"@Override public void onClick(View v){
  if (!allocationIdIsValid(textViewAllocationId.getText().toString())) {
    Toast.makeText(getApplicationContext(),getString(R.string.receive_submit_validation_message_allocation_id),Toast.LENGTH_SHORT).show();
    return;
  }
  if (!quantitiesAreValid()) {
    Toast.makeText(getApplicationContext(),getString(R.string.receive_quantities_validation_error_message),Toast.LENGTH_SHORT).show();
    return;
  }
  ReceiveConfirmFragment receiveConfirmFragment=ReceiveConfirmFragment.newInstance(generateReceive());
  receiveConfirmFragment.show(getSupportFragmentManager(),""String_Node_Str"");
}","@Override public void onClick(View v){
  if (!allocationIdIsValid(textViewAllocationId.getText().toString())) {
    Toast.makeText(getApplicationContext(),getString(R.string.receive_submit_validation_message_allocation_id),Toast.LENGTH_SHORT).show();
    return;
  }
  if (!quantitiesAreValid()) {
    Toast.makeText(getApplicationContext(),getString(R.string.receive_quantities_validation_error_message),Toast.LENGTH_SHORT).show();
    return;
  }
  if (completedAllocationIds.contains(textViewAllocationId.getText().toString())) {
    Toast.makeText(getApplicationContext(),getString(R.string.error_allocation_received),Toast.LENGTH_SHORT).show();
    return;
  }
  ReceiveConfirmFragment receiveConfirmFragment=ReceiveConfirmFragment.newInstance(generateReceive());
  receiveConfirmFragment.show(getSupportFragmentManager(),""String_Node_Str"");
}",0.8532792427315754
146374,"private void setupAllocationIdTextView(){
  final ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_dropdown_item_1line,allocationService.getYetToBeReceivedAllocationIds());
  textViewAllocationId.setAdapter(adapter);
  textViewAllocationId.addTextChangedListener(new LmisTextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      String text=s.toString();
      if (text.trim().length() > 6) {
        setAllocation(text);
      }
    }
  }
);
  textViewAllocationId.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      String text=adapter.getItem(position);
      setAllocation(text);
    }
  }
);
}","private void setupAllocationIdTextView(){
  final ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_dropdown_item_1line,allocationService.getYetToBeReceivedAllocationIds());
  textViewAllocationId.setAdapter(adapter);
  textViewAllocationId.addTextChangedListener(new LmisTextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      String text=s.toString();
      if (text.trim().length() >= 6) {
        setAllocation(text);
      }
    }
  }
);
  textViewAllocationId.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      String text=adapter.getItem(position);
      setAllocation(text);
    }
  }
);
}",0.9993593850096092
146375,"public Receive generateReceive(){
  Receive receive=new Receive(spinnerSource.getSelectedItem().toString(),allocation);
  for (int i=0; i < arrayAdapter.getCount(); i++) {
    ReceiveCommodityViewModel viewModel=(ReceiveCommodityViewModel)arrayAdapter.getItem(i);
    ReceiveItem receiveItem=viewModel.getReceiveItem();
    receive.addReceiveItem(receiveItem);
  }
  return receive;
}","public Receive generateReceive(){
  if ((allocation == null && spinnerSource.getSelectedItem().toString().contains(getString(R.string.lga))) || (allocation != null && allocation.isDummy())) {
    generateDummyAllocation(textViewAllocationId.getText().toString().trim());
  }
  Receive receive=new Receive(spinnerSource.getSelectedItem().toString(),allocation);
  for (int i=0; i < arrayAdapter.getCount(); i++) {
    ReceiveCommodityViewModel viewModel=(ReceiveCommodityViewModel)arrayAdapter.getItem(i);
    ReceiveItem receiveItem=viewModel.getReceiveItem();
    receive.addReceiveItem(receiveItem);
  }
  return receive;
}",0.707631318136769
146376,"private void setupReceiveButton(){
  buttonSubmitReceive.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (!allocationIdIsValid(textViewAllocationId.getText().toString())) {
        Toast.makeText(getApplicationContext(),getString(R.string.receive_submit_validation_message_allocation_id),Toast.LENGTH_SHORT).show();
        return;
      }
      if (!quantitiesAreValid()) {
        Toast.makeText(getApplicationContext(),getString(R.string.receive_quantities_validation_error_message),Toast.LENGTH_SHORT).show();
        return;
      }
      ReceiveConfirmFragment receiveConfirmFragment=ReceiveConfirmFragment.newInstance(generateReceive());
      receiveConfirmFragment.show(getSupportFragmentManager(),""String_Node_Str"");
    }
  }
);
}","private void setupReceiveButton(){
  buttonSubmitReceive.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (!allocationIdIsValid(textViewAllocationId.getText().toString())) {
        Toast.makeText(getApplicationContext(),getString(R.string.receive_submit_validation_message_allocation_id),Toast.LENGTH_SHORT).show();
        return;
      }
      if (!quantitiesAreValid()) {
        Toast.makeText(getApplicationContext(),getString(R.string.receive_quantities_validation_error_message),Toast.LENGTH_SHORT).show();
        return;
      }
      if (completedAllocationIds.contains(textViewAllocationId.getText().toString())) {
        Toast.makeText(getApplicationContext(),getString(R.string.error_allocation_received),Toast.LENGTH_SHORT).show();
        return;
      }
      ReceiveConfirmFragment receiveConfirmFragment=ReceiveConfirmFragment.newInstance(generateReceive());
      receiveConfirmFragment.show(getSupportFragmentManager(),""String_Node_Str"");
    }
  }
);
}",0.8723287671232877
146377,"@Override public void afterTextChanged(Editable s){
  String text=s.toString();
  if (text.trim().length() > 6) {
    setAllocation(text);
  }
}","@Override public void afterTextChanged(Editable s){
  String text=s.toString();
  if (text.trim().length() >= 6) {
    setAllocation(text);
  }
}",0.9965397923875432
146378,"@Override protected void afterCreate(Bundle savedInstanceState){
  completedAllocationIds=allocationService.getReceivedAllocationIds();
  setupAllocationIdTextView();
  setupReceiveButton();
  if (presetAllocationId != null) {
    textViewAllocationId.setText(presetAllocationId);
  }
}","@Override protected void afterCreate(Bundle savedInstanceState){
  completedAllocationIds=new ArrayList<>(allocationService.getReceivedAllocationIds());
  setupAllocationIdTextView();
  setupReceiveButton();
  if (presetAllocationId != null) {
    textViewAllocationId.setText(presetAllocationId);
  }
}",0.9711375212224108
146379,"@Override protected void onPostExecute(Boolean success){
  super.onPostExecute(success);
  if (success) {
    Toast.makeText(fragment.getActivity().getApplicationContext(),getString(R.string.receive_successful),Toast.LENGTH_LONG).show();
    fragment.dismiss();
    FragmentActivity activity=getActivity();
    if (activity != null) {
      activity.finish();
      startActivity(activity.getIntent());
    }
  }
 else {
    Toast.makeText(fragment.getActivity().getApplicationContext(),getString(R.string.receive_failed),Toast.LENGTH_LONG).show();
  }
  this.dialog.dismiss();
}","@Override protected void onPostExecute(Boolean success){
  super.onPostExecute(success);
  if (success) {
    Toast.makeText(fragment.getActivity().getApplicationContext(),getString(R.string.receive_successful),Toast.LENGTH_LONG).show();
    fragment.dismiss();
    FragmentActivity activity=getActivity();
    if (activity instanceof ReceiveActivity) {
      ReceiveActivity receiveActivity=(ReceiveActivity)activity;
      receiveActivity.clearInput();
    }
  }
 else {
    Toast.makeText(fragment.getActivity().getApplicationContext(),getString(R.string.receive_failed),Toast.LENGTH_LONG).show();
  }
  this.dialog.dismiss();
}",0.8363636363636363
146380,"public void saveReceive(Receive receive){
  try {
    GenericDao<Receive> receiveDao=new GenericDao<>(Receive.class,context);
    receiveDao.create(receive);
    saveReceiveItems(receive.getReceiveItems());
    if (receive.getAllocation() != null) {
      Allocation allocation=receive.getAllocation();
      allocation.setReceived(true);
      if (!receive.getAllocation().isDummy()) {
        allocationService.update(allocation);
        alertsService.deleteAllocationAlert(allocation);
      }
 else {
        allocationService.createAllocation(receive.getAllocation());
      }
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
    e.printStackTrace();
  }
}","public void saveReceive(Receive receive){
  try {
    GenericDao<Receive> receiveDao=new GenericDao<>(Receive.class,context);
    receiveDao.create(receive);
    saveReceiveItems(receive.getReceiveItems());
    if (receive.getAllocation() != null) {
      Allocation allocation=receive.getAllocation();
      allocation.setReceived(true);
      if (!receive.getAllocation().isDummy()) {
        allocationService.update(allocation);
        alertsService.deleteAllocationAlert(allocation);
      }
 else {
        allocationService.createAllocation(receive.getAllocation());
        EventBus.getDefault().post(new AllocationCreateEvent(receive.getAllocation()));
      }
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getMessage());
    e.printStackTrace();
  }
}",0.9402985074626866
146381,"@Override public Adjustment apply(BaseCommodityViewModel input){
  AdjustmentsViewModel model=(AdjustmentsViewModel)input;
  return new Adjustment(model.getCommodity(),model.getQuantityEntered(),model.getQuantityAllocated(),model.isPositive(),model.getAdjustmentReason().getName());
}","@Override public Adjustment apply(BaseCommodityViewModel input){
  AdjustmentsViewModel model=(AdjustmentsViewModel)input;
  int quantity=abs(model.getAdjustmentReason().equals(AdjustmentReason.PHYSICAL_COUNT) ? model.getPhysicalStockCountDifference() : model.getQuantityEntered());
  return new Adjustment(model.getCommodity(),quantity,model.getQuantityAllocated(),model.isPositive(),model.getAdjustmentReason().getName());
}",0.7267605633802817
146382,"private List<Adjustment> getAdjustments(){
  return FluentIterable.from(selectedCommodities).transform(new Function<BaseCommodityViewModel,Adjustment>(){
    @Override public Adjustment apply(    BaseCommodityViewModel input){
      AdjustmentsViewModel model=(AdjustmentsViewModel)input;
      return new Adjustment(model.getCommodity(),model.getQuantityEntered(),model.getQuantityAllocated(),model.isPositive(),model.getAdjustmentReason().getName());
    }
  }
).toList();
}","private List<Adjustment> getAdjustments(){
  return FluentIterable.from(selectedCommodities).transform(new Function<BaseCommodityViewModel,Adjustment>(){
    @Override public Adjustment apply(    BaseCommodityViewModel input){
      AdjustmentsViewModel model=(AdjustmentsViewModel)input;
      int quantity=abs(model.getAdjustmentReason().equals(AdjustmentReason.PHYSICAL_COUNT) ? model.getPhysicalStockCountDifference() : model.getQuantityEntered());
      return new Adjustment(model.getCommodity(),quantity,model.getQuantityAllocated(),model.isPositive(),model.getAdjustmentReason().getName());
    }
  }
).toList();
}",0.7868852459016393
146383,"@Test public void shouldReturnTwoReportsForCategoryFamilyPlaning() throws Exception {
  List<ReportType> reportTypesForCategory=ReportType.getReportTypesForCategory(""String_Node_Str"");
  assertThat(reportTypesForCategory.size(),is(4));
  assertThat(reportTypesForCategory,containsInAnyOrder(ReportType.FacilityRequsitionIssueReportForm,ReportType.FacilityConsumptionReportRH2,ReportType.FacilityStockReport,ReportType.FacilityConsumptionReportRH1));
}","@Test public void shouldReturnTwoReportsForCategoryFamilyPlaning() throws Exception {
  List<ReportType> reportTypesForCategory=ReportType.getReportTypesForCategory(""String_Node_Str"");
  assertThat(reportTypesForCategory.size(),is(4));
  assertThat(reportTypesForCategory,containsInAnyOrder(ReportType.FacilityRequisitionIssueReportForm,ReportType.FacilityConsumptionReportRH2,ReportType.FacilityStockReport,ReportType.FacilityConsumptionReportRH1));
}",0.9988925802879292
146384,"private void setupGraph(){
  List<StockOnHandGraphBar> bars=new ArrayList<>();
  Map<Integer,Integer> colors=new HashMap<>();
  colors.put(0,getResources().getColor(R.color.chart0));
  colors.put(1,getResources().getColor(R.color.chart1));
  colors.put(2,getResources().getColor(R.color.chart2));
  colors.put(3,getResources().getColor(R.color.chart3));
  colors.put(4,getResources().getColor(R.color.chart4));
  colors.put(5,getResources().getColor(R.color.chart5));
  int count=0;
  for (  Commodity commodity : commodityService.getMost5HighlyConsumedCommodities()) {
    int factor=100;
    int amc=commodity.getLatestValueFromCommodityActionByName(DataElementType.AMC.toString());
    amc=amc == 0 ? 1 : amc;
    int monthsOfStock=(commodity.getStockOnHand() * factor / amc);
    int minimumThreshold=commodity.getLatestValueFromCommodityActionByName(DataElementType.MINIMUM_THRESHOLD.toString());
    int minThresholdInMonths=minimumThreshold * factor / amc;
    int maxThreshold=commodity.getLatestValueFromCommodityActionByName(DataElementType.MAXIMUM_THRESHOLD.toString());
    int maxThresholdInMonths=maxThreshold * factor / amc;
    bars.add(new StockOnHandGraphBar(commodity.getName(),minThresholdInMonths,maxThresholdInMonths,monthsOfStock,colors.get(count),commodity.getStockOnHand()));
    count++;
  }
  LinearLayout barChartLayout=(LinearLayout)findViewById(R.id.barChart);
  Display display=getWindowManager().getDefaultDisplay();
  Point size=new Point();
  display.getSize(size);
  int height=size.y;
  int graphHeight=2 * height / 3;
  LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,graphHeight);
  barChartLayout.setLayoutParams(params);
  int biggestValue=getBiggestValue(bars);
  for (  StockOnHandGraphBar bar : bars) {
    barChartLayout.addView(bar.getView(getApplicationContext(),biggestValue,graphHeight));
  }
}","private void setupGraph(){
  List<StockOnHandGraphBar> bars=new ArrayList<>();
  Map<Integer,Integer> colors=new HashMap<>();
  colors.put(0,getResources().getColor(R.color.chart0));
  colors.put(1,getResources().getColor(R.color.chart1));
  colors.put(2,getResources().getColor(R.color.chart2));
  colors.put(3,getResources().getColor(R.color.chart3));
  colors.put(4,getResources().getColor(R.color.chart4));
  colors.put(5,getResources().getColor(R.color.chart5));
  int count=0;
  for (  Commodity commodity : commodityService.getMost5HighlyConsumedCommodities()) {
    int factor=100;
    int amc=commodity.getAMC();
    amc=amc == 0 ? commodity.getStockOnHand() : amc;
    int monthsOfStock=(commodity.getStockOnHand() * factor / amc);
    int minimumThreshold=commodity.getLatestValueFromCommodityActionByName(DataElementType.MINIMUM_THRESHOLD.toString());
    int minThresholdInMonths=minimumThreshold * factor / amc;
    int maxThreshold=commodity.getLatestValueFromCommodityActionByName(DataElementType.MAXIMUM_THRESHOLD.toString());
    int maxThresholdInMonths=maxThreshold * factor / amc;
    bars.add(new StockOnHandGraphBar(commodity.getName(),minThresholdInMonths,maxThresholdInMonths,monthsOfStock,colors.get(count),commodity.getStockOnHand()));
    count++;
  }
  LinearLayout barChartLayout=(LinearLayout)findViewById(R.id.barChart);
  Display display=getWindowManager().getDefaultDisplay();
  Point size=new Point();
  display.getSize(size);
  int height=size.y;
  int graphHeight=2 * height / 3;
  LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,graphHeight);
  barChartLayout.setLayoutParams(params);
  int biggestValue=getBiggestValue(bars);
  for (  StockOnHandGraphBar bar : bars) {
    barChartLayout.addView(bar.getView(getApplicationContext(),biggestValue,graphHeight));
  }
}",0.9647812166488794
146385,"@Override protected Boolean doInBackground(Void... params){
  User user;
  try {
    user=userService.register(username,password);
    commodityService.initialise(user);
    orderService.syncOrderReasons();
    orderService.syncOrderTypes();
    smsSyncService.syncGatewayNumber();
  }
 catch (  Exception e) {
    this.failureCause=e;
    Log.e(""String_Node_Str"",e.getLocalizedMessage());
    e.printStackTrace();
    return false;
  }
  return true;
}","@Override protected Boolean doInBackground(Void... params){
  User user;
  try {
    user=userService.register(username,password);
    Log.i(""String_Node_Str"",""String_Node_Str"");
    commodityService.initialise(user);
    Log.i(""String_Node_Str"",""String_Node_Str"");
    orderService.syncOrderReasons();
    Log.i(""String_Node_Str"",""String_Node_Str"");
    orderService.syncOrderTypes();
    smsSyncService.syncGatewayNumber();
    Log.i(""String_Node_Str"",""String_Node_Str"");
    commodityActionService.syncCommodityActionValues(user,commodityService.all());
  }
 catch (  Exception e) {
    this.failureCause=e;
    Log.e(""String_Node_Str"",e.getLocalizedMessage());
    e.printStackTrace();
    return false;
  }
  return true;
}",0.7671464860287892
146386,"public float getMonthsOfStock(){
  return (float)getStockOnHand() / commodity.getAMC();
}","public float getMonthsOfStock(){
  int AMC=commodity.getAMC();
  return AMC == 0 ? 1 : (float)commodity.getStockOnHand() / AMC;
}",0.5321100917431193
146387,"@Override public List<CommodityActionValue> fetchCommodityActionValues(List<Commodity> commodities,User user){
  Dhis2Endpoint service=dhis2EndPointFactory.create(user);
  DataValueSet valueSet=new DataValueSet();
  try {
    String dataSet2=getDataSetId(commodities,DataElementType.AMC.getActivity());
    String dataSetId=getDataSetId(commodities,DataElementType.STOCK_ON_HAND.getActivity());
    valueSet=service.fetchDataValuesEx(dataSetId,user.getFacilityCode(),twoMonthsAgo(),today(),dataSet2);
  }
 catch (  LmisException exception) {
    e(SYNC,""String_Node_Str"");
  }
  return convertDataValuesToCommodityActions(valueSet.getDataValues());
}","@Override public List<CommodityActionValue> fetchCommodityActionValues(List<Commodity> commodities,User user){
  Dhis2Endpoint service=dhis2EndPointFactory.create(user);
  DataValueSet valueSet=new DataValueSet();
  try {
    String dataSet2=getDataSetId(commodities,DataElementType.AMC.getActivity());
    String dataSetId=getDataSetId(commodities,DataElementType.STOCK_ON_HAND.getActivity());
    valueSet=service.fetchDataValuesEx(dataSetId,user.getFacilityCode(),threeMonthsAgo(),today(),dataSet2);
  }
 catch (  LmisException exception) {
    e(SYNC,""String_Node_Str"");
  }
  return convertDataValuesToCommodityActions(valueSet.getDataValues());
}",0.9953917050691244
146388,"@Override public List<CommodityActionValue> fetchAllocations(final List<Commodity> commodities,User user){
  Dhis2Endpoint service=dhis2EndPointFactory.create(user);
  DataValueSet valueSet=new DataValueSet();
  try {
    String dataSetId=getDataSetId(commodities,DataElementType.ALLOCATED.getActivity());
    valueSet=service.fetchDataValues(dataSetId,user.getFacilityCode(),twoMonthsAgo(),today());
  }
 catch (  LmisException exception) {
    e(SYNC,""String_Node_Str"");
  }
  List<CommodityActionValue> commodityActionValues=convertDataValuesToCommodityActions(valueSet.getDataValues());
  return from(commodityActionValues).filter(new Predicate<CommodityActionValue>(){
    @Override public boolean apply(    CommodityActionValue input){
      return input.getCommodityAction().getActivityType().equals(DataElementType.ALLOCATED.getActivity());
    }
  }
).toList();
}","@Override public List<CommodityActionValue> fetchAllocations(final List<Commodity> commodities,User user){
  Dhis2Endpoint service=dhis2EndPointFactory.create(user);
  DataValueSet valueSet=new DataValueSet();
  try {
    String dataSetId=getDataSetId(commodities,DataElementType.ALLOCATED.getActivity());
    valueSet=service.fetchDataValues(dataSetId,user.getFacilityCode(),threeMonthsAgo(),today());
  }
 catch (  LmisException exception) {
    e(SYNC,""String_Node_Str"");
  }
  List<CommodityActionValue> commodityActionValues=convertDataValuesToCommodityActions(valueSet.getDataValues());
  return from(commodityActionValues).filter(new Predicate<CommodityActionValue>(){
    @Override public boolean apply(    CommodityActionValue input){
      return input.getCommodityAction().getActivityType().equals(DataElementType.ALLOCATED.getActivity());
    }
  }
).toList();
}",0.9965635738831616
146389,"void populateWithAllocation(Allocation allocation){
  if (allocation != null) {
    selectedCommodities.clear();
    arrayAdapter.clear();
    for (    AllocationItem item : allocation.getAllocationItems()) {
      CommodityToggledEvent event=new CommodityToggledEvent(new ReceiveCommodityViewModel(item));
      onEvent(event);
    }
  }
}","private void populateWithAllocation(Allocation allocation){
  if (allocation != null) {
    selectedCommodities.clear();
    arrayAdapter.clear();
    for (    AllocationItem item : allocation.getAllocationItems()) {
      CommodityToggledEvent event=new CommodityToggledEvent(new ReceiveCommodityViewModel(item));
      onEvent(event);
    }
  }
}",0.9883720930232558
146390,"public void syncAllocations(){
  GenericDao<Allocation> allocationGenericDao=new GenericDao<>(Allocation.class,context);
  GenericDao<AllocationItem> allocationItemGenericDao=new GenericDao<>(AllocationItem.class,context);
  GenericDao<Commodity> commodityDao=new GenericDao<>(Commodity.class,context);
  Allocation allocation=new Allocation();
  allocation.setReceived(false);
  allocation.setAllocationId(""String_Node_Str"");
  allocationGenericDao.create(allocation);
  AllocationItem item=new AllocationItem();
  item.setCommodity(commodityDao.queryForAll().get(0));
  item.setQuantity(10);
  item.setAllocation(allocation);
  allocationItemGenericDao.create(item);
}","public void syncAllocations(){
  createAllocation(""String_Node_Str"",9);
  createAllocation(""String_Node_Str"",10);
}",0.2394904458598726
146391,"protected void beforeArrayAdapterCreate(Bundle savedInstanceState){
}",abstract protected void beforeArrayAdapterCreate(Bundle savedInstanceState);,0.9103448275862068
146392,"@Override public void onClick(View v){
  dismiss();
}","@Override public void onClick(View v){
  orderService.saveOrder(order);
  showToastMessage(getString(R.string.order_successful));
  dismiss();
  FragmentActivity activity=getActivity();
  if (activity != null) {
    activity.finish();
    startActivity(activity.getIntent());
  }
}",0.3173652694610778
146393,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_order_confirmation,container,false);
  Button buttonOrderConfirm=(Button)view.findViewById(R.id.buttonOrderConfirm);
  Button buttonOrderGoBack=(Button)view.findViewById(R.id.buttonOrderGoBack);
  TextView textViewSRVNumber=(TextView)view.findViewById(R.id.textViewSRVNumber);
  ListView listViewOrderItems=(ListView)view.findViewById(R.id.listViewConfirmOrderItems);
  getDialog().setCanceledOnTouchOutside(false);
  getDialog().getWindow().requestFeature(Window.FEATURE_NO_TITLE);
  buttonOrderConfirm.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      orderService.saveOrder(order);
      showToastMessage(getString(R.string.order_successful));
      dismiss();
      FragmentActivity activity=getActivity();
      if (activity != null) {
        activity.finish();
        startActivity(activity.getIntent());
      }
    }
  }
);
  textViewSRVNumber.setText(order.getSrvNumber());
  buttonOrderGoBack.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      dismiss();
    }
  }
);
  listViewOrderItems.addHeaderView(inflater.inflate(R.layout.confirm_header_order,container));
  ConfirmOrderAdapter adapter=new ConfirmOrderAdapter(getActivity(),R.layout.confirm_order_list_item,order.getItems());
  listViewOrderItems.setAdapter(adapter);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_order_confirmation,container,false);
  Button buttonOrderConfirm=(Button)view.findViewById(R.id.buttonOrderConfirm);
  Button buttonOrderGoBack=(Button)view.findViewById(R.id.buttonOrderGoBack);
  TextView textViewSRVNumber=(TextView)view.findViewById(R.id.textViewSRVNumber);
  ListView listViewOrderItems=(ListView)view.findViewById(R.id.listViewConfirmOrderItems);
  getDialog().setCanceledOnTouchOutside(false);
  getDialog().getWindow().requestFeature(Window.FEATURE_NO_TITLE);
  setupConfirmButton(buttonOrderConfirm);
  textViewSRVNumber.setText(order.getSrvNumber());
  buttonOrderGoBack.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      dismiss();
    }
  }
);
  setupList(inflater,container,listViewOrderItems);
  return view;
}",0.6119281045751634
146394,"@Override public Throwable handleError(RetrofitError cause){
  if (cause.getResponse() == null) {
    return new LmisException(cause);
  }
  e(""String_Node_Str"",cause.getResponse().getReason());
  e(""String_Node_Str"",cause.getResponse().getUrl());
  for (  Header header : cause.getResponse().getHeaders()) {
    e(""String_Node_Str"",String.format(""String_Node_Str"",header.getName(),header.getValue()));
  }
  if (cause.isNetworkError()) {
    i(""String_Node_Str"",cause.getMessage());
    return new LmisException(messageNetworkError);
  }
  int statusCode=cause.getResponse().getStatus();
  if (statusCode == SC_NOT_FOUND) {
    i(""String_Node_Str"",""String_Node_Str"" + statusCode);
    return new LmisException(urlNotFound);
  }
  if (statusCode == SC_INTERNAL_SERVER_ERROR) {
    i(""String_Node_Str"",""String_Node_Str"" + statusCode);
    return new LmisException(internalServerError);
  }
  if (statusCode != SC_OK) {
    i(""String_Node_Str"",""String_Node_Str"" + statusCode);
    return new LmisException(messageInvalidLoginCredential);
  }
  return new LmisException(cause.getMessage());
}","@Override public Throwable handleError(RetrofitError cause){
  if (cause.getResponse() == null) {
    return new LmisException(cause);
  }
  printHeaders(cause);
  if (cause.isNetworkError()) {
    i(""String_Node_Str"",cause.getMessage());
    return new LmisException(messageNetworkError);
  }
  LmisException exception=checkForHTTPErrors(cause.getResponse().getStatus());
  if (exception != null) {
    return exception;
  }
 else {
    return new LmisException(cause.getMessage());
  }
}",0.3802281368821292
146395,"public ArrayList<OrderType> syncOrderTypes(){
  final ArrayList<OrderType> orderTypes=new ArrayList<>();
  final List<String> reasons=lmisServer.fetchOrderTypes(userService.getRegisteredUser());
  dbUtil.withDao(OrderType.class,new DbUtil.Operation<OrderType,Void>(){
    @Override public Void operate(    Dao<OrderType,String> dao) throws SQLException {
      dao.delete(dao.queryForAll());
      for (      String reason : reasons) {
        OrderType data=new OrderType(reason);
        dao.create(data);
        orderTypes.add(data);
      }
      return null;
    }
  }
);
  return orderTypes;
}","public ArrayList<OrderType> syncOrderTypes(){
  final ArrayList<OrderType> orderTypes=new ArrayList<>();
  final List<String> reasons=lmisServer.fetchOrderTypes(userService.getRegisteredUser());
  dbUtil.withDao(OrderType.class,new DbUtil.Operation<OrderType,Void>(){
    @Override public Void operate(    Dao<OrderType,String> dao) throws SQLException {
      saveOrderTypes(dao,reasons,orderTypes);
      return null;
    }
  }
);
  return orderTypes;
}",0.70521327014218
146396,"@Override public Void operate(Dao<OrderType,String> dao) throws SQLException {
  dao.delete(dao.queryForAll());
  for (  String reason : reasons) {
    OrderType data=new OrderType(reason);
    dao.create(data);
    orderTypes.add(data);
  }
  return null;
}","@Override public Void operate(Dao<OrderType,String> dao) throws SQLException {
  saveOrderTypes(dao,reasons,orderTypes);
  return null;
}",0.6531645569620254
146397,"public List<OrderReason> syncOrderReasons(){
  final ArrayList<OrderReason> savedReasons=new ArrayList<>();
  final List<String> reasons=lmisServer.fetchOrderReasons(userService.getRegisteredUser());
  dbUtil.withDao(OrderReason.class,new DbUtil.Operation<OrderReason,Void>(){
    @Override public Void operate(    Dao<OrderReason,String> dao) throws SQLException {
      dao.delete(dao.queryForAll());
      for (      String reason : reasons) {
        OrderReason data=new OrderReason(reason);
        dao.create(data);
        savedReasons.add(data);
      }
      return null;
    }
  }
);
  return savedReasons;
}","public List<OrderReason> syncOrderReasons(){
  final ArrayList<OrderReason> savedReasons=new ArrayList<>();
  final List<String> reasons=lmisServer.fetchOrderReasons(userService.getRegisteredUser());
  dbUtil.withDao(OrderReason.class,new DbUtil.Operation<OrderReason,Void>(){
    @Override public Void operate(    Dao<OrderReason,String> dao) throws SQLException {
      saveReasons(dao,reasons,savedReasons);
      return null;
    }
  }
);
  return savedReasons;
}",0.7053406998158379
146398,"private String getErrorMessage(String commodityName){
  String formatString=adapter.getContext().getString(R.string.unexpected_order_quantity_error);
  return String.format(formatString,orderCommodityViewModel.getExpectedOrderQuantity(),commodityName);
}","private String getErrorMessage(String commodityName){
  String formatString=adapter.getContext().getString(R.string.unexpected_order_quantity_error);
  return String.format(formatString,commodityName,orderCommodityViewModel.getQuantityEntered());
}",0.8685258964143426
146399,"private boolean allocationIdIsValid(){
  return textViewAllocationId.getError() == null;
}","private boolean allocationIdIsValid(){
  return textViewAllocationId.getError() == null && !isBlank(textViewAllocationId.getText().toString());
}",0.7659574468085106
146400,"private void createAggregation(final Commodity commodity){
  dbUtil.withDao(Aggregation.class,new Operation<Aggregation,Void>(){
    @Override public Void operate(    Dao<Aggregation,String> dao) throws SQLException {
      Aggregation aggregation=commodity.getAggregation();
      dao.create(aggregation);
      saveAllAggregationFields(aggregation);
      return null;
    }
  }
);
}","private void createAggregation(final Commodity commodity){
  dbUtil.withDao(Aggregation.class,new Operation<Aggregation,Void>(){
    @Override public Void operate(    Dao<Aggregation,String> dao) throws SQLException {
      Aggregation aggregation=commodity.getAggregation();
      dao.createOrUpdate(aggregation);
      saveAllAggregationFields(aggregation);
      return null;
    }
  }
);
}",0.9897172236503856
146401,"@Test public void shouldSaveCommodityAggregations(){
  List<Category> categories=new ArrayList<>();
  Category category=new Category(""String_Node_Str"");
  Commodity commodity=new Commodity(""String_Node_Str"");
  Aggregation aggregation=new Aggregation();
  aggregation.setId(""String_Node_Str"");
  aggregation.setName(""String_Node_Str"");
  AggregationField field=new AggregationField();
  field.setId(""String_Node_Str"");
  field.setName(""String_Node_Str"");
  aggregation.setAggregationFields(Arrays.asList(field));
  commodity.setAggregation(aggregation);
  category.addCommodity(commodity);
  categories.add(category);
  commodityService.saveToDatabase(categories);
  Long numberOfAggregations=dbUtil.withDao(Aggregation.class,new DbUtil.Operation<Aggregation,Long>(){
    @Override public Long operate(    Dao<Aggregation,String> dao) throws SQLException {
      return dao.countOf();
    }
  }
);
  Long numberOfFields=dbUtil.withDao(AggregationField.class,new DbUtil.Operation<AggregationField,Long>(){
    @Override public Long operate(    Dao<AggregationField,String> dao) throws SQLException {
      return dao.countOf();
    }
  }
);
  assertThat(numberOfAggregations,is(1L));
  assertThat(numberOfFields,is(1L));
}","@Test public void shouldSaveCommodityAggregations(){
  List<Category> categories=getTestCategories();
  commodityService.saveToDatabase(categories);
  Long numberOfAggregations=dbUtil.withDao(Aggregation.class,new DbUtil.Operation<Aggregation,Long>(){
    @Override public Long operate(    Dao<Aggregation,String> dao) throws SQLException {
      return dao.countOf();
    }
  }
);
  Long numberOfFields=dbUtil.withDao(AggregationField.class,new DbUtil.Operation<AggregationField,Long>(){
    @Override public Long operate(    Dao<AggregationField,String> dao) throws SQLException {
      return dao.countOf();
    }
  }
);
  assertThat(numberOfAggregations,is(1L));
  assertThat(numberOfFields,is(1L));
}",0.7133956386292835
146402,"private Date lastDayOfThisMonth(){
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.DAY_OF_MONTH,Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH));
  return cal.getTime();
}","private Date lastDayOfThisMonth(){
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.DAY_OF_MONTH,Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH));
  cal.set(Calendar.HOUR_OF_DAY,Calendar.getInstance().getActualMaximum(Calendar.HOUR_OF_DAY));
  cal.set(Calendar.MINUTE,Calendar.getInstance().getActualMaximum(Calendar.MINUTE));
  return cal.getTime();
}",0.6853146853146853
146403,"private Date firstDayOfThisMonth(){
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.DAY_OF_MONTH,Calendar.getInstance().getActualMinimum(Calendar.DAY_OF_MONTH));
  return cal.getTime();
}","private Date firstDayOfThisMonth(){
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.DAY_OF_MONTH,Calendar.getInstance().getActualMinimum(Calendar.DAY_OF_MONTH));
  cal.set(Calendar.HOUR_OF_DAY,Calendar.getInstance().getActualMinimum(Calendar.HOUR_OF_DAY));
  cal.set(Calendar.MINUTE,Calendar.getInstance().getActualMinimum(Calendar.MINUTE));
  return cal.getTime();
}",0.686411149825784
146404,"private void setupOrderReasonsSpinner(final Spinner spinnerOrderReasons,final TextView textViewStartDate,final CommodityViewModel orderCommodityViewModel,final TextView textViewEndDate){
  spinnerOrderReasons.setOnItemSelectedListener(new LmisOnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      orderCommodityViewModel.setOrderReasonPosition(position);
      OrderReason orderReason=getReason(spinnerOrderReasons.getAdapter().getItem(position).toString());
      orderCommodityViewModel.setReasonForOrder(orderReason);
      doUpdateEndDate(spinnerOrderReasons,orderCommodityViewModel,textViewStartDate,textViewEndDate);
    }
  }
);
  setupSpinnerData(spinnerOrderReasons,orderReasons,orderCommodityViewModel.getOrderReasonPosition());
}","private void setupOrderReasonsSpinner(final Spinner spinnerOrderReasons,final TextView textViewStartDate,final CommodityViewModel orderCommodityViewModel,final TextView textViewEndDate){
  spinnerOrderReasons.setOnItemSelectedListener(new LmisOnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      orderCommodityViewModel.setOrderReasonPosition(position);
      OrderReason orderReason=getReason(((OrderReason)spinnerOrderReasons.getSelectedItem()).getReason());
      orderCommodityViewModel.setReasonForOrder(orderReason);
      doUpdateEndDate(spinnerOrderReasons,orderCommodityViewModel,textViewStartDate,textViewEndDate);
    }
  }
);
  setupSpinnerData(spinnerOrderReasons,orderReasons,orderCommodityViewModel.getOrderReasonPosition());
}",0.9609140108238124
146405,"private void doUpdateEndDate(Spinner spinner,CommodityViewModel orderCommodityViewModel,TextView textViewStartDate,TextView textViewEndDate){
  Integer orderReasonPosition=orderCommodityViewModel.getOrderReasonPosition();
  String item=spinner.getItemAtPosition(orderReasonPosition).toString();
  if (item.equalsIgnoreCase(ROUTINE)) {
    String startDate=textViewStartDate.getText().toString();
    populateEndDate(startDate,30,textViewEndDate);
    textViewEndDate.setEnabled(false);
  }
 else {
    textViewEndDate.setEnabled(true);
  }
}","private void doUpdateEndDate(Spinner spinner,CommodityViewModel orderCommodityViewModel,TextView textViewStartDate,TextView textViewEndDate){
  Integer orderReasonPosition=orderCommodityViewModel.getOrderReasonPosition();
  String item=((OrderReason)spinner.getItemAtPosition(orderReasonPosition)).getReason();
  if (item.equalsIgnoreCase(ROUTINE)) {
    String startDate=textViewStartDate.getText().toString();
    populateEndDate(startDate,30,textViewEndDate);
    textViewEndDate.setEnabled(false);
  }
 else {
    textViewEndDate.setEnabled(true);
  }
}",0.9690346083788708
146406,"@Before public void setUp(){
  setUpInjection(this);
  Commodity commodity=mock(Commodity.class);
  when(commodity.getName()).thenReturn(""String_Node_Str"");
  when(commodity.getOrderDuration()).thenReturn(30);
  when(commodity.getStockItem()).thenReturn(new StockItem(commodity,20));
  commodities=new ArrayList<>();
  commodityViewModel=mock(CommodityViewModel.class);
  when(commodityViewModel.getCommodity()).thenReturn(commodity);
  when(commodityViewModel.getOrderReasonPosition()).thenReturn(0);
  commodities.add(commodityViewModel);
  orderReasons.add(routine);
  orderReasons.add(emergency);
  adapter=new SelectedOrderCommoditiesAdapter(Robolectric.application,list_item_layout,commodities,orderReasons);
}","@Before public void setUp(){
  setUpInjection(this);
  Commodity commodity=mock(Commodity.class);
  when(commodity.getName()).thenReturn(""String_Node_Str"");
  when(commodity.getOrderDuration()).thenReturn(30);
  when(commodity.getStockItem()).thenReturn(new StockItem(commodity,20));
  commodities=new ArrayList<>();
  commodityViewModel=mock(CommodityViewModel.class);
  when(commodityViewModel.getCommodity()).thenReturn(commodity);
  when(commodityViewModel.getOrderReasonPosition()).thenReturn(0);
  commodities.add(commodityViewModel);
  orderReasons.add(emergency);
  orderReasons.add(routine);
  adapter=new SelectedOrderCommoditiesAdapter(Robolectric.application,list_item_layout,commodities,orderReasons);
}",0.9594972067039106
146407,"@Test public void shouldPutOrderReasonsIntoOrderReasonsSpinnerAdapter(){
  Spinner spinner=(Spinner)getViewFromListRow(adapter,list_item_layout,R.id.spinnerOrderReasons);
  String reasonName=((OrderReason)spinner.getAdapter().getItem(0)).getReason();
  assertThat(reasonName,is(routine.getReason()));
}","@Test public void shouldPutOrderReasonsIntoOrderReasonsSpinnerAdapter(){
  Spinner spinner=(Spinner)getViewFromListRow(adapter,list_item_layout,R.id.spinnerOrderReasons);
  String reasonName=((OrderReason)spinner.getAdapter().getItem(0)).getReason();
  assertThat(reasonName,is(emergency.getReason()));
}",0.9735973597359736
146408,"protected void onEachSelectedCommodity(SelectedCommodityHandler handler){
  for (int i=0; i < listViewSelectedCommodities.getChildCount(); i++) {
    View view=listViewSelectedCommodities.getChildAt(i);
    CommodityViewModel commodityViewModel=(CommodityViewModel)listViewSelectedCommodities.getAdapter().getItem(i);
    handler.operate(view,commodityViewModel);
  }
}","protected void onEachSelectedCommodity(SelectedCommodityHandler handler){
  for (int i=0; i < listViewSelectedCommodities.getAdapter().getCount(); i++) {
    View view=listViewSelectedCommodities.getAdapter().getView(i,null,listViewSelectedCommodities);
    CommodityViewModel commodityViewModel=(CommodityViewModel)listViewSelectedCommodities.getAdapter().getItem(i);
    handler.operate(view,commodityViewModel);
  }
}",0.494296577946768
146409,"private List<View> wrap(ListView listView){
  List<View> result=newArrayList();
  for (int i=0; i < listView.getChildCount(); i++) {
    result.add(listView.getChildAt(i));
  }
  return result;
}","private List<View> wrap(ListView listView){
  List<View> result=newArrayList();
  for (int i=0; i < listView.getAdapter().getCount(); i++) {
    result.add(listView.getAdapter().getView(i,null,listView));
  }
  return result;
}",0.8625592417061612
146410,"@Override public void afterTextChanged(Editable editable){
  String value=editable.toString();
  if (!value.isEmpty()) {
    int quantity=Integer.parseInt(value);
    int stock_level=stockService.getStockLevelFor(commodityViewModel.getCommodity());
    commodityViewModel.setQuantityEntered(quantity);
    if (quantity > stock_level) {
      editTextQuantity.setError(String.format(""String_Node_Str"",stock_level));
    }
  }
}","@Override public void afterTextChanged(Editable editable){
  String value=editable.toString();
  if (!value.isEmpty()) {
    int quantity=Integer.parseInt(value);
    int stock_level=stockService.getStockLevelFor(commodityViewModel.getCommodity());
    commodityViewModel.setQuantityEntered(quantity);
    if (quantity > stock_level) {
      editTextQuantity.setError(String.format(""String_Node_Str"",stock_level));
    }
  }
 else {
    commodityViewModel.setQuantityEntered(0);
  }
}",0.9362637362637364
146411,"@Test public void testThatIfAllDispensingItemsHaveZeroQuantitiesAToastIsMade() throws Exception {
  DispenseActivity dispenseActivity=getDispenseActivity();
  ListView mockListView=mock(ListView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  mockEditText.setText(""String_Node_Str"");
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockListView.getChildAt(anyInt())).thenReturn(mockListItemView);
  when(mockListView.getChildCount()).thenReturn(1);
  dispenseActivity.listViewSelectedCommodities=mockListView;
  dispenseActivity.findViewById(R.id.buttonSubmitDispense).callOnClick();
  ShadowHandler.idleMainLooper();
  assertThat(ShadowToast.getTextOfLatestToast(),equalTo(application.getString(R.string.dispense_submit_validation_message_zero)));
}","@Test public void testThatIfAllDispensingItemsHaveZeroQuantitiesAToastIsMade() throws Exception {
  DispenseActivity dispenseActivity=getDispenseActivity();
  ListView mockListView=mock(ListView.class);
  View mockListItemView=mock(View.class);
  SelectedCommoditiesAdapter mockSelectedCommoditiesAdapter=mock(SelectedCommoditiesAdapter.class);
  EditText mockEditText=new EditText(application);
  mockEditText.setText(""String_Node_Str"");
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockListView.getAdapter()).thenReturn(mockSelectedCommoditiesAdapter);
  when(mockListView.getChildCount()).thenReturn(1);
  when(mockSelectedCommoditiesAdapter.getItem(anyInt())).thenReturn(new CommodityViewModel(new Commodity(""String_Node_Str"")));
  when(mockSelectedCommoditiesAdapter.getCount()).thenReturn(1);
  when(mockSelectedCommoditiesAdapter.getView(anyInt(),org.mockito.Matchers.any(View.class),org.mockito.Matchers.any(ViewGroup.class))).thenReturn(mockListItemView);
  dispenseActivity.listViewSelectedCommodities=mockListView;
  dispenseActivity.findViewById(R.id.buttonSubmitDispense).callOnClick();
  ShadowHandler.idleMainLooper();
  assertThat(ShadowToast.getTextOfLatestToast(),equalTo(application.getString(R.string.dispense_submit_validation_message_zero)));
}",0.7322253000923361
146412,"@Test public void testThatIfAllDispensingItemsHaveNoQuantitiesAToastIsMade() throws Exception {
  DispenseActivity dispenseActivity=getDispenseActivity();
  ListView mockListView=mock(ListView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockListView.getChildAt(anyInt())).thenReturn(mockListItemView);
  when(mockListView.getChildCount()).thenReturn(1);
  dispenseActivity.listViewSelectedCommodities=mockListView;
  dispenseActivity.findViewById(R.id.buttonSubmitDispense).callOnClick();
  ShadowHandler.idleMainLooper();
  assertThat(ShadowToast.getTextOfLatestToast(),equalTo(application.getString(R.string.dispense_submit_validation_message_filled)));
}","@Test public void testThatIfAllDispensingItemsHaveNoQuantitiesAToastIsMade() throws Exception {
  DispenseActivity dispenseActivity=getDispenseActivity();
  ListView mockListView=mock(ListView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  SelectedCommoditiesAdapter mockSelectedCommoditiesAdapter=mock(SelectedCommoditiesAdapter.class);
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockListView.getAdapter()).thenReturn(mockSelectedCommoditiesAdapter);
  when(mockListView.getChildCount()).thenReturn(1);
  when(mockSelectedCommoditiesAdapter.getItem(anyInt())).thenReturn(new CommodityViewModel(new Commodity(""String_Node_Str"")));
  when(mockSelectedCommoditiesAdapter.getCount()).thenReturn(1);
  when(mockSelectedCommoditiesAdapter.getView(anyInt(),org.mockito.Matchers.any(View.class),org.mockito.Matchers.any(ViewGroup.class))).thenReturn(mockListItemView);
  dispenseActivity.listViewSelectedCommodities=mockListView;
  dispenseActivity.findViewById(R.id.buttonSubmitDispense).callOnClick();
  ShadowHandler.idleMainLooper();
  assertThat(ShadowToast.getTextOfLatestToast(),equalTo(application.getString(R.string.dispense_submit_validation_message_filled)));
}",0.7163461538461539
146413,"@Test public void testThatIfAnyOfTheDispensingItemsHaveErrorsAToastIsMade() throws Exception {
  DispenseActivity dispenseActivity=getDispenseActivity();
  ListView mockListView=mock(ListView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  mockEditText.setText(""String_Node_Str"");
  mockEditText.setError(""String_Node_Str"");
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockListView.getChildAt(anyInt())).thenReturn(mockListItemView);
  when(mockListView.getChildCount()).thenReturn(1);
  dispenseActivity.listViewSelectedCommodities=mockListView;
  dispenseActivity.findViewById(R.id.buttonSubmitDispense).callOnClick();
  ShadowHandler.idleMainLooper();
  assertThat(ShadowToast.getTextOfLatestToast(),equalTo(application.getString(R.string.dispense_submit_validation_message_errors)));
}","@Test public void testThatIfAnyOfTheDispensingItemsHaveErrorsAToastIsMade() throws Exception {
  DispenseActivity dispenseActivity=getDispenseActivity();
  ListView mockListView=mock(ListView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  mockEditText.setText(""String_Node_Str"");
  mockEditText.setError(""String_Node_Str"");
  SelectedCommoditiesAdapter mockSelectedCommoditiesAdapter=mock(SelectedCommoditiesAdapter.class);
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockListView.getAdapter()).thenReturn(mockSelectedCommoditiesAdapter);
  when(mockListView.getChildCount()).thenReturn(1);
  when(mockSelectedCommoditiesAdapter.getItem(anyInt())).thenReturn(new CommodityViewModel(new Commodity(""String_Node_Str"")));
  when(mockSelectedCommoditiesAdapter.getCount()).thenReturn(1);
  when(mockSelectedCommoditiesAdapter.getView(anyInt(),org.mockito.Matchers.any(View.class),org.mockito.Matchers.any(ViewGroup.class))).thenReturn(mockListItemView);
  dispenseActivity.listViewSelectedCommodities=mockListView;
  dispenseActivity.findViewById(R.id.buttonSubmitDispense).callOnClick();
  ShadowHandler.idleMainLooper();
  assertThat(ShadowToast.getTextOfLatestToast(),equalTo(application.getString(R.string.dispense_submit_validation_message_errors)));
}",0.738898756660746
146414,"@Test public void getDispensingShouldGetItemsInTheListView() throws Exception {
  String commodityName=""String_Node_Str"";
  DispenseActivity dispenseActivity=getDispenseActivity();
  dispenseActivity.checkboxCommoditySelected.setChecked(true);
  ListView mockListView=mock(ListView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  SelectedCommoditiesAdapter mockSelectedCommoditiesAdapter=mock(SelectedCommoditiesAdapter.class);
  mockEditText.setText(""String_Node_Str"");
  Commodity commodity=new Commodity(commodityName);
  when(mockSelectedCommoditiesAdapter.getItem(anyInt())).thenReturn(new CommodityViewModel(commodity));
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockListView.getChildAt(anyInt())).thenReturn(mockListItemView);
  when(mockListView.getChildCount()).thenReturn(1);
  when(mockListView.getAdapter()).thenReturn(mockSelectedCommoditiesAdapter);
  dispenseActivity.listViewSelectedCommodities=mockListView;
  Dispensing dispensing=dispenseActivity.getDispensing();
  assertThat(dispensing.getDispensingItems().size(),is(1));
  assertThat(dispensing.isDispenseToFacility(),is(true));
  assertThat(dispensing.getDispensingItems().get(0).getQuantity(),is(12));
  assertThat(dispensing.getDispensingItems().get(0).getCommodity().getName(),is(commodityName));
}","@Test public void getDispensingShouldGetItemsInTheListView() throws Exception {
  String commodityName=""String_Node_Str"";
  DispenseActivity dispenseActivity=getDispenseActivity();
  dispenseActivity.checkboxCommoditySelected.setChecked(true);
  ListView mockListView=mock(ListView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  SelectedCommoditiesAdapter mockSelectedCommoditiesAdapter=mock(SelectedCommoditiesAdapter.class);
  mockEditText.setText(""String_Node_Str"");
  Commodity commodity=new Commodity(commodityName);
  when(mockSelectedCommoditiesAdapter.getItem(anyInt())).thenReturn(new CommodityViewModel(commodity));
  when(mockSelectedCommoditiesAdapter.getCount()).thenReturn(1);
  when(mockSelectedCommoditiesAdapter.getView(anyInt(),org.mockito.Matchers.any(View.class),org.mockito.Matchers.any(ViewGroup.class))).thenReturn(mockListItemView);
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockListView.getAdapter()).thenReturn(mockSelectedCommoditiesAdapter);
  dispenseActivity.listViewSelectedCommodities=mockListView;
  Dispensing dispensing=dispenseActivity.getDispensing();
  assertThat(dispensing.getDispensingItems().size(),is(1));
  assertThat(dispensing.isDispenseToFacility(),is(true));
  assertThat(dispensing.getDispensingItems().get(0).getQuantity(),is(12));
  assertThat(dispensing.getDispensingItems().get(0).getCommodity().getName(),is(commodityName));
}",0.8762635064482398
146415,"@Override public View getView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(LAYOUT_INFLATER_SERVICE);
  View rowView=inflater.inflate(R.layout.commodity_list_item,parent,false);
  CheckBox checkboxCommoditySelected=(CheckBox)rowView.findViewById(R.id.checkboxCommoditySelected);
  CommodityViewModel commodityViewModel=getItem(position);
  checkboxCommoditySelected.setChecked(commodityViewModel.getSelected());
  TextView textViewCommodityName=(TextView)rowView.findViewById(R.id.textViewCommodityName);
  textViewCommodityName.setText(commodityViewModel.getName());
  if (commodityViewModel.stockIsFinished()) {
    rowView.setBackgroundColor(getContext().getResources().getColor(R.color.disabled));
    checkboxCommoditySelected.setVisibility(View.INVISIBLE);
  }
  return rowView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(LAYOUT_INFLATER_SERVICE);
  View rowView=inflater.inflate(R.layout.commodity_list_item,parent,false);
  CheckBox checkboxCommoditySelected=(CheckBox)rowView.findViewById(R.id.checkboxCommoditySelected);
  CommodityViewModel commodityViewModel=getItem(position);
  checkboxCommoditySelected.setChecked(commodityViewModel.isSelected());
  TextView textViewCommodityName=(TextView)rowView.findViewById(R.id.textViewCommodityName);
  textViewCommodityName.setText(commodityViewModel.getName());
  if (commodityViewModel.stockIsFinished()) {
    rowView.setBackgroundColor(getContext().getResources().getColor(R.color.disabled));
    checkboxCommoditySelected.setVisibility(View.INVISIBLE);
  }
  return rowView;
}",0.9970947123765252
146416,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  setupDialog();
  final View overlayView=inflater.inflate(R.layout.fragment_item_select,container,false);
  categoriesLayout=(LinearLayout)overlayView.findViewById(R.id.itemSelectOverlayCategories);
  setupCloseButton(overlayView);
  listViewCommodities=(ListView)overlayView.findViewById(R.id.listViewCommodities);
  List<Category> categoryList=categoryService.all();
  adapterHashMap=new LinkedHashMap<>();
  for (  final Category category : categoryList) {
    Button button=new CategoryButton(getActivity(),category);
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        showCommodities(category);
      }
    }
);
    for (    Commodity commodity : category.getCommodities()) {
      CommodityViewModel commodityViewModel=new CommodityViewModel(commodity);
      if (selectedCommodities.contains(commodityViewModel)) {
        commodityViewModel.toggleSelected();
      }
    }
    List<CommodityViewModel> commodities=convertToViewModelsList(category.getCommodities());
    adapterHashMap.put(category,new CommoditiesAdapter(getActivity(),R.layout.commodity_list_item,commodities));
    categoriesLayout.addView(button);
  }
  showCommodities(category);
  return overlayView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  setupDialog();
  final View overlayView=inflater.inflate(R.layout.fragment_item_select,container,false);
  categoriesLayout=(LinearLayout)overlayView.findViewById(R.id.itemSelectOverlayCategories);
  setupCloseButton(overlayView);
  listViewCommodities=(ListView)overlayView.findViewById(R.id.listViewCommodities);
  List<Category> categoryList=categoryService.all();
  adapterHashMap=new LinkedHashMap<>();
  for (  final Category category : categoryList) {
    Button button=new CategoryButton(getActivity(),category);
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        showCommodities(category);
      }
    }
);
    List<CommodityViewModel> commodities=convertToViewModelsList(category.getCommodities());
    for (    CommodityViewModel commodityViewModel : commodities) {
      if (selectedCommodities.contains(commodityViewModel)) {
        commodityViewModel.toggleSelected();
      }
    }
    adapterHashMap.put(category,new CommoditiesAdapter(getActivity(),R.layout.commodity_list_item,commodities));
    categoriesLayout.addView(button);
  }
  showCommodities(category);
  return overlayView;
}",0.8371916508538899
146417,"@Test public void testThatSubmitButtonExists() throws Exception {
  DispenseActivity activity=getActivity();
  assertThat(activity.buttonSubmitDispense,is(notNullValue()));
}","@Test public void testThatSubmitButtonExists() throws Exception {
  DispenseActivity activity=getDispenseActivity();
  assertThat(activity.buttonSubmitDispense,is(notNullValue()));
}",0.9775280898876404
146418,"@Test public void shouldToggleSubmitButtonVisibility() throws Exception {
  DispenseActivity dispenseActivity=getActivity();
  assertFalse(dispenseActivity.buttonSubmitDispense.getVisibility() == View.VISIBLE);
  CommodityViewModel commodityViewModel=new CommodityViewModel(new Commodity(""String_Node_Str""));
  CommodityToggledEvent commodityToggledEvent=new CommodityToggledEvent(commodityViewModel);
  EventBus.getDefault().post(commodityToggledEvent);
  assertTrue(dispenseActivity.buttonSubmitDispense.getVisibility() == View.VISIBLE);
}","@Test public void shouldToggleSubmitButtonVisibility() throws Exception {
  DispenseActivity dispenseActivity=getDispenseActivity();
  assertFalse(dispenseActivity.buttonSubmitDispense.getVisibility() == View.VISIBLE);
  CommodityViewModel commodityViewModel=new CommodityViewModel(new Commodity(""String_Node_Str""));
  CommodityToggledEvent commodityToggledEvent=new CommodityToggledEvent(commodityViewModel);
  EventBus.getDefault().post(commodityToggledEvent);
  assertTrue(dispenseActivity.buttonSubmitDispense.getVisibility() == View.VISIBLE);
}",0.9926605504587156
146419,"@Test public void testThatDispenseToFacilityExists() throws Exception {
  DispenseActivity activity=getActivity();
  assertThat(activity.checkboxCommoditySelected,is(notNullValue()));
}","@Test public void testThatDispenseToFacilityExists() throws Exception {
  DispenseActivity activity=getDispenseActivity();
  assertThat(activity.checkboxCommoditySelected,is(notNullValue()));
}",0.9788359788359788
146420,"@Test public void testSubmitButtonLogicWhenDispensingIsInValid() throws Exception {
  DispenseActivity dispenseActivity=getActivity();
  ListView mockListView=mock(ListView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockListView.getChildAt(anyInt())).thenReturn(mockListItemView);
  when(mockListView.getChildCount()).thenReturn(1);
  dispenseActivity.listViewSelectedCommodities=mockListView;
  assertFalse(dispenseActivity.dispensingIsValid());
  dispenseActivity.buttonSubmitDispense.callOnClick();
  ShadowHandler.idleMainLooper();
  assertThat(getTextOfLatestToast(),equalTo(""String_Node_Str""));
}","@Test public void testSubmitButtonLogicWhenDispensingIsInValid() throws Exception {
  DispenseActivity dispenseActivity=getDispenseActivity();
  ListView mockListView=mock(ListView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockListView.getChildAt(anyInt())).thenReturn(mockListItemView);
  when(mockListView.getChildCount()).thenReturn(1);
  dispenseActivity.listViewSelectedCommodities=mockListView;
  assertFalse(dispenseActivity.dispensingIsValid());
  dispenseActivity.buttonSubmitDispense.callOnClick();
  ShadowHandler.idleMainLooper();
  assertThat(getTextOfLatestToast(),equalTo(""String_Node_Str""));
}",0.9947229551451188
146421,"private CommodityToggledEventDetails fireCommodityToggledEvent(){
  DispenseActivity dispenseActivity=getActivity();
  CommodityViewModel commodityViewModel=new CommodityViewModel(new Commodity(""String_Node_Str""));
  CommodityToggledEvent commodityToggledEvent=new CommodityToggledEvent(commodityViewModel);
  refire(commodityToggledEvent);
  return new CommodityToggledEventDetails(dispenseActivity,commodityToggledEvent);
}","public static CommodityToggledEventDetails fireCommodityToggledEvent(DispenseActivity dispenseActivity){
  CommodityViewModel commodityViewModel=new CommodityViewModel(new Commodity(""String_Node_Str""));
  CommodityToggledEvent commodityToggledEvent=new CommodityToggledEvent(commodityViewModel);
  refire(commodityToggledEvent);
  return new CommodityToggledEventDetails(dispenseActivity,commodityToggledEvent);
}",0.883054892601432
146422,"@Test public void testShouldDisplayAllCategoriesAsButtons() throws Exception {
  DispenseActivity dispenseActivity=getActivity();
  LinearLayout categoryLayout=(LinearLayout)dispenseActivity.findViewById(R.id.layoutCategories);
  int buttonAmount=categoryLayout.getChildCount();
  assertThat(buttonAmount,is(7));
  for (int i=1; i < buttonAmount; i++) {
    View childView=categoryLayout.getChildAt(i);
    assertThat(childView,instanceOf(Button.class));
  }
}","@Test public void testShouldDisplayAllCategoriesAsButtons() throws Exception {
  DispenseActivity dispenseActivity=getDispenseActivity();
  LinearLayout categoryLayout=(LinearLayout)dispenseActivity.findViewById(R.id.layoutCategories);
  int buttonAmount=categoryLayout.getChildCount();
  assertThat(buttonAmount,is(7));
  for (int i=1; i < buttonAmount; i++) {
    View childView=categoryLayout.getChildAt(i);
    assertThat(childView,instanceOf(Button.class));
  }
}",0.9913793103448276
146423,"@Test public void testThatDispensingIsInvalidIfAnyFieldHasAnError() throws Exception {
  DispenseActivity dispenseActivity=getActivity();
  ListView mockListView=mock(ListView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  mockEditText.setText(""String_Node_Str"");
  mockEditText.setError(""String_Node_Str"");
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockListView.getChildAt(anyInt())).thenReturn(mockListItemView);
  when(mockListView.getChildCount()).thenReturn(1);
  dispenseActivity.listViewSelectedCommodities=mockListView;
  assertFalse(dispenseActivity.dispensingIsValid());
}","@Test public void testThatDispensingIsInvalidIfAnyFieldHasAnError() throws Exception {
  DispenseActivity dispenseActivity=getDispenseActivity();
  ListView mockListView=mock(ListView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  mockEditText.setText(""String_Node_Str"");
  mockEditText.setError(""String_Node_Str"");
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockListView.getChildAt(anyInt())).thenReturn(mockListItemView);
  when(mockListView.getChildCount()).thenReturn(1);
  dispenseActivity.listViewSelectedCommodities=mockListView;
  assertFalse(dispenseActivity.dispensingIsValid());
}",0.9942363112391932
146424,"@Test public void testThatDispensingIsValidIfQuantitiesAreSet() throws Exception {
  DispenseActivity dispenseActivity=getActivity();
  ListView mockListView=mock(ListView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  mockEditText.setText(""String_Node_Str"");
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockListView.getChildAt(anyInt())).thenReturn(mockListItemView);
  when(mockListView.getChildCount()).thenReturn(1);
  dispenseActivity.listViewSelectedCommodities=mockListView;
  assertTrue(dispenseActivity.dispensingIsValid());
}","@Test public void testThatDispensingIsValidIfQuantitiesAreSet() throws Exception {
  DispenseActivity dispenseActivity=getDispenseActivity();
  ListView mockListView=mock(ListView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  mockEditText.setText(""String_Node_Str"");
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockListView.getChildAt(anyInt())).thenReturn(mockListItemView);
  when(mockListView.getChildCount()).thenReturn(1);
  dispenseActivity.listViewSelectedCommodities=mockListView;
  assertTrue(dispenseActivity.dispensingIsValid());
}",0.993798449612403
146425,"private void refire(CommodityToggledEvent commodityToggledEvent){
  EventBus.getDefault().post(commodityToggledEvent);
}","public static void refire(CommodityToggledEvent commodityToggledEvent){
  EventBus.getDefault().post(commodityToggledEvent);
}",0.951219512195122
146426,"@Test public void listViewShouldToggleCommodityWhenToggleEventIsTriggered() throws Exception {
  CommodityToggledEventDetails eventDetails=fireCommodityToggledEvent();
  CommodityViewModel commodityInList=(CommodityViewModel)eventDetails.dispenseActivity.listViewSelectedCommodities.getAdapter().getItem(0);
  assertThat(commodityInList,is(eventDetails.commodityViewModel()));
  refire(eventDetails.commodityToggledEvent);
  assertThat(eventDetails.dispenseActivity.listViewSelectedCommodities.getAdapter().getCount(),is(0));
}","@Test public void listViewShouldToggleCommodityWhenToggleEventIsTriggered() throws Exception {
  CommodityToggledEventDetails eventDetails=fireCommodityToggledEvent(getDispenseActivity());
  CommodityViewModel commodityInList=(CommodityViewModel)eventDetails.dispenseActivity.listViewSelectedCommodities.getAdapter().getItem(0);
  assertThat(commodityInList,is(eventDetails.commodityViewModel()));
  refire(eventDetails.commodityToggledEvent);
  assertThat(eventDetails.dispenseActivity.listViewSelectedCommodities.getAdapter().getCount(),is(0));
}",0.9804651162790696
146427,"@Test public void testThatDispensingIsInvalidIfNoQuantitiesAreSet() throws Exception {
  DispenseActivity dispenseActivity=getActivity();
  ListView mockListView=mock(ListView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockListView.getChildAt(anyInt())).thenReturn(mockListItemView);
  when(mockListView.getChildCount()).thenReturn(1);
  dispenseActivity.listViewSelectedCommodities=mockListView;
  assertFalse(dispenseActivity.dispensingIsValid());
}","@Test public void testThatDispensingIsInvalidIfNoQuantitiesAreSet() throws Exception {
  DispenseActivity dispenseActivity=getDispenseActivity();
  ListView mockListView=mock(ListView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockListView.getChildAt(anyInt())).thenReturn(mockListItemView);
  when(mockListView.getChildCount()).thenReturn(1);
  dispenseActivity.listViewSelectedCommodities=mockListView;
  assertFalse(dispenseActivity.dispensingIsValid());
}",0.9934102141680397
146428,"@Test public void shouldToggleSelectedItemsWhenToggleEventIsTriggered() throws Exception {
  CommodityToggledEventDetails eventDetails=fireCommodityToggledEvent();
  assertThat(eventDetails.dispenseActivity.selectedCommodities,contains(eventDetails.commodityViewModel()));
  refire(eventDetails.commodityToggledEvent);
  assertThat(eventDetails.dispenseActivity.selectedCommodities,not(contains(eventDetails.commodityViewModel())));
}","@Test public void shouldToggleSelectedItemsWhenToggleEventIsTriggered() throws Exception {
  CommodityToggledEventDetails eventDetails=fireCommodityToggledEvent(getDispenseActivity());
  assertThat(eventDetails.dispenseActivity.selectedCommodities,contains(eventDetails.commodityViewModel()));
  refire(eventDetails.commodityToggledEvent);
  assertThat(eventDetails.dispenseActivity.selectedCommodities,not(contains(eventDetails.commodityViewModel())));
}",0.9763779527559056
146429,"@Test public void testBuildActivity() throws Exception {
  DispenseActivity activity=getActivity();
  assertThat(activity,not(nullValue()));
  TextView textViewAppName=(TextView)activity.getActionBar().getCustomView().findViewById(R.id.textAppName);
  assertThat(textViewAppName,is(notNullValue()));
  assertThat(textViewAppName.getText().toString(),is(activity.getResources().getString(R.string.app_name)));
}","@Test public void testBuildActivity() throws Exception {
  DispenseActivity activity=getDispenseActivity();
  assertThat(activity,not(nullValue()));
  TextView textViewAppName=(TextView)activity.getActionBar().getCustomView().findViewById(R.id.textAppName);
  assertThat(textViewAppName,is(notNullValue()));
  assertThat(textViewAppName.getText().toString(),is(activity.getResources().getString(R.string.app_name)));
}",0.9903381642512076
146430,"@Test public void getDispensingShouldGetItemsInTheListView() throws Exception {
  String commodityName=""String_Node_Str"";
  DispenseActivity dispenseActivity=getActivity();
  dispenseActivity.checkboxCommoditySelected.setChecked(true);
  ListView mockListView=mock(ListView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  SelectedCommoditiesAdapter mockSelectedCommoditiesAdapter=mock(SelectedCommoditiesAdapter.class);
  mockEditText.setText(""String_Node_Str"");
  Commodity commodity=new Commodity(commodityName);
  when(mockSelectedCommoditiesAdapter.getItem(anyInt())).thenReturn(new CommodityViewModel(commodity));
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockListView.getChildAt(anyInt())).thenReturn(mockListItemView);
  when(mockListView.getChildCount()).thenReturn(1);
  when(mockListView.getAdapter()).thenReturn(mockSelectedCommoditiesAdapter);
  dispenseActivity.listViewSelectedCommodities=mockListView;
  Dispensing dispensing=dispenseActivity.getDispensing();
  assertThat(dispensing.getDispensingItems().size(),is(1));
  assertThat(dispensing.isDispenseToFacility(),is(true));
  assertThat(dispensing.getDispensingItems().get(0).getQuantity(),is(12));
  assertThat(dispensing.getDispensingItems().get(0).getCommodity().getName(),is(commodityName));
}","@Test public void getDispensingShouldGetItemsInTheListView() throws Exception {
  String commodityName=""String_Node_Str"";
  DispenseActivity dispenseActivity=getDispenseActivity();
  dispenseActivity.checkboxCommoditySelected.setChecked(true);
  ListView mockListView=mock(ListView.class);
  View mockListItemView=mock(View.class);
  EditText mockEditText=new EditText(application);
  SelectedCommoditiesAdapter mockSelectedCommoditiesAdapter=mock(SelectedCommoditiesAdapter.class);
  mockEditText.setText(""String_Node_Str"");
  Commodity commodity=new Commodity(commodityName);
  when(mockSelectedCommoditiesAdapter.getItem(anyInt())).thenReturn(new CommodityViewModel(commodity));
  when(mockListItemView.findViewById(R.id.editTextQuantity)).thenReturn(mockEditText);
  when(mockListView.getChildAt(anyInt())).thenReturn(mockListItemView);
  when(mockListView.getChildCount()).thenReturn(1);
  when(mockListView.getAdapter()).thenReturn(mockSelectedCommoditiesAdapter);
  dispenseActivity.listViewSelectedCommodities=mockListView;
  Dispensing dispensing=dispenseActivity.getDispensing();
  assertThat(dispensing.getDispensingItems().size(),is(1));
  assertThat(dispensing.isDispenseToFacility(),is(true));
  assertThat(dispensing.getDispensingItems().get(0).getQuantity(),is(12));
  assertThat(dispensing.getDispensingItems().get(0).getCommodity().getName(),is(commodityName));
}",0.9970951343500364
146431,"@Test public void shouldRemoveSelectedCommodityFromListWhenCancelButtonIsClicked(){
  CommodityToggledEventDetails eventDetails=fireCommodityToggledEvent();
  SelectedCommoditiesAdapter adapter=eventDetails.dispenseActivity.selectedCommoditiesAdapter;
  ImageButton cancelButton=(ImageButton)getViewFromListRow(adapter,R.layout.selected_commodity_list_item,R.id.imageButtonCancel);
  cancelButton.performClick();
  assertFalse(eventDetails.dispenseActivity.selectedCommodities.contains(eventDetails.commodityViewModel()));
  assertThat(eventDetails.dispenseActivity.listViewSelectedCommodities.getAdapter().getCount(),is(0));
}","@Test public void shouldRemoveSelectedCommodityFromListWhenCancelButtonIsClicked(){
  CommodityToggledEventDetails eventDetails=fireCommodityToggledEvent(getDispenseActivity());
  SelectedCommoditiesAdapter adapter=eventDetails.dispenseActivity.selectedCommoditiesAdapter;
  ImageButton cancelButton=(ImageButton)getViewFromListRow(adapter,R.layout.selected_commodity_list_item,R.id.imageButtonCancel);
  cancelButton.performClick();
  assertFalse(eventDetails.dispenseActivity.selectedCommodities.contains(eventDetails.commodityViewModel()));
  assertThat(eventDetails.dispenseActivity.listViewSelectedCommodities.getAdapter().getCount(),is(0));
}",0.983529411764706
146432,"@Test public void shouldToggleSelectedStatusOfCommodity(){
  CommodityViewModel commodity=new CommodityViewModel(new Commodity(""String_Node_Str""));
  assertFalse(commodity.getSelected());
  commodity.toggleSelected();
  assertTrue(commodity.getSelected());
}","@Test public void shouldToggleSelectedStatusOfCommodity(){
  CommodityViewModel commodity=new CommodityViewModel(new Commodity(""String_Node_Str""));
  assertFalse(commodity.isSelected());
  commodity.toggleSelected();
  assertTrue(commodity.isSelected());
}",0.980544747081712
146433,"@Override public View getView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View rowView=inflater.inflate(R.layout.selected_commodity_list_item,parent,false);
  TextView textViewCommodityName=(TextView)rowView.findViewById(R.id.textViewCommodityName);
  ImageButton imageButtonCancel=(ImageButton)rowView.findViewById(R.id.imageButtonCancel);
  final EditText editTextQuantity=(EditText)rowView.findViewById(R.id.editTextQuantity);
  final Commodity commodity=getItem(position);
  textViewCommodityName.setText(commodity.getName());
  TextWatcher watcher=new QuantityTextWatcher(editTextQuantity,commodity);
  editTextQuantity.addTextChangedListener(watcher);
  activateCancelButton(imageButtonCancel,commodity);
  return rowView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View rowView=inflater.inflate(R.layout.selected_commodity_list_item,parent,false);
  TextView textViewCommodityName=(TextView)rowView.findViewById(R.id.textViewCommodityName);
  ImageButton imageButtonCancel=(ImageButton)rowView.findViewById(R.id.imageButtonCancel);
  final EditText editTextQuantity=(EditText)rowView.findViewById(R.id.editTextQuantity);
  final Commodity commodity=getItem(position);
  textViewCommodityName.setText(commodity.getName());
  TextWatcher watcher=new QuantityTextWatcher(editTextQuantity,commodity);
  editTextQuantity.addTextChangedListener(watcher);
  int quantity=commodity.getQuantityToDispense();
  if (quantity > 0)   editTextQuantity.setText(Integer.toString(quantity));
  activateCancelButton(imageButtonCancel,commodity);
  return rowView;
}",0.9304635761589404
146434,"@Override public void afterTextChanged(Editable editable){
  String value=editable.toString();
  if (!value.isEmpty()) {
    int quantity=Integer.parseInt(value);
    int stock_level=stockService.getStockLevelFor(commodity);
    if (quantity > stock_level) {
      editTextQuantity.setError(String.format(""String_Node_Str"",stock_level));
    }
  }
}","@Override public void afterTextChanged(Editable editable){
  String value=editable.toString();
  if (!value.isEmpty()) {
    int quantity=Integer.parseInt(value);
    int stock_level=stockService.getStockLevelFor(commodity);
    commodity.setQuantityToDispense(quantity);
    if (quantity > stock_level) {
      editTextQuantity.setError(String.format(""String_Node_Str"",stock_level));
    }
  }
}",0.9369127516778524
146435,"Boolean offlineCurrentAndLogin(){
  WifiManager wifi_service=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);
  String macAddr=wifi_service.getConnectionInfo().getMacAddress();
  Log.d(""String_Node_Str"",macAddr);
  macAddr=macAddr.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (macAddr.equals(""String_Node_Str"")) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  for (  OnlineDevice device : onlineDevices) {
    if (device.mac.replaceAll(""String_Node_Str"",""String_Node_Str"").equals(macAddr)) {
      kick_ip_address=device.ip;
      session_id=device.session_id;
      nas_ip_address=device.nas_ip;
      if (offline()) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        new LoginTask(context).execute();
        return true;
      }
    }
  }
  return false;
}","Boolean offlineCurrentAndLogin(){
  WifiManager wifi_service=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);
  String macAddr=wifi_service.getConnectionInfo().getMacAddress();
  Log.d(""String_Node_Str"",macAddr);
  macAddr=macAddr.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (macAddr.equals(""String_Node_Str"")) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  getStates();
  for (  OnlineDevice device : onlineDevices) {
    if (device.mac.replaceAll(""String_Node_Str"",""String_Node_Str"").equals(macAddr)) {
      kick_ip_address=device.ip;
      session_id=device.session_id;
      nas_ip_address=device.nas_ip;
      if (offline()) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        new LoginTask(context).execute();
        return true;
      }
    }
  }
  return false;
}",0.9909035779260158
146436,"protected void onPostExecute(Boolean result){
  accountCardText.setText(account);
  if (!stopped) {
    accountStateText.setText(accountState);
    onlineStateText.setText(onlineState);
    usageText.setText(usage);
    expireDateText.setText(expireDate);
    remainMoneyText.setText(remainMoney);
    if (onlineDevices.size() > 0) {
      TableRow row=new TableRow(context);
      TextView t1=new TextView(context);
      setTextView(t1,""String_Node_Str"");
      row.addView(t1);
      TextView t2=new TextView(context);
      setTextView(t2,""String_Node_Str"");
      row.addView(t2);
      TextView t3=new TextView(context);
      setTextView(t3,""String_Node_Str"");
      row.addView(t3);
      onlineTable.addView(row,new TableLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
    }
    for (    OnlineDevice device : onlineDevices) {
      TableRow row=new TableRow(context);
      TextView t1=new TextView(context);
      setTextView(t1,device.position);
      row.addView(t1);
      TextView t2=new TextView(context);
      setTextView(t2,device.ip);
      row.addView(t2);
      TextView t3=new TextView(context);
      setTextView(t3,device.mac);
      row.addView(t3);
      Button b=new Button(context);
      b.setText(""String_Node_Str"");
      row.addView(b);
      onlineTable.addView(row,new TableLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
    }
  }
 else {
    accountStateText.setText(""String_Node_Str"");
  }
  if (networkError) {
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else   if (!errorInfo.equals(""String_Node_Str"")) {
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"" + errorInfo,Toast.LENGTH_LONG).show();
  }
  onRefreshComplete();
}","protected void onPostExecute(Boolean result){
  accountCardText.setText(account);
  if (!stopped) {
    accountStateText.setText(accountState);
    onlineStateText.setText(onlineState);
    usageText.setText(usage);
    expireDateText.setText(expireDate);
    remainMoneyText.setText(remainMoney);
    onlineTable.removeAllViews();
    onlineTable.removeAllViewsInLayout();
    if (onlineDevices.size() > 0) {
      TableRow row=new TableRow(context);
      TextView t1=new TextView(context);
      setTextView(t1,""String_Node_Str"");
      row.addView(t1);
      TextView t2=new TextView(context);
      setTextView(t2,""String_Node_Str"");
      row.addView(t2);
      TextView t3=new TextView(context);
      setTextView(t3,""String_Node_Str"");
      row.addView(t3);
      onlineTable.addView(row,new TableLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
    }
    for (    OnlineDevice device : onlineDevices) {
      TableRow row=new TableRow(context);
      TextView t1=new TextView(context);
      setTextView(t1,device.position);
      row.addView(t1);
      TextView t2=new TextView(context);
      setTextView(t2,device.ip);
      row.addView(t2);
      TextView t3=new TextView(context);
      setTextView(t3,device.mac);
      row.addView(t3);
      Button b=new Button(context);
      b.setText(""String_Node_Str"");
      row.addView(b);
      onlineTable.addView(row,new TableLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
    }
  }
 else {
    accountStateText.setText(""String_Node_Str"");
  }
  if (networkError) {
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else   if (!errorInfo.equals(""String_Node_Str"")) {
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"" + errorInfo,Toast.LENGTH_LONG).show();
  }
  onRefreshComplete();
}",0.9792349726775956
146437,"public Boolean getStates(){
  try {
    URI website=new URI(""String_Node_Str"");
    HttpGet request=new HttpGet(website);
    setGetHeader(request);
    HttpResponse response=client.execute(request);
    int statusCode=response.getStatusLine().getStatusCode();
    if (statusCode != 200) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + String.valueOf(statusCode));
      return false;
    }
    String responseStr=EntityUtils.toString(response.getEntity(),""String_Node_Str"");
    accountState=findInStr(responseStr,""String_Node_Str"");
    onlineState=findInStr(responseStr,""String_Node_Str"");
    usage=findInStr(responseStr,""String_Node_Str"");
    Pattern p=Pattern.compile(""String_Node_Str"");
    Matcher m=p.matcher(responseStr);
    while (m.find() && m.groupCount() == 5) {
      onlineDevices.add(new OnlineDevice(m.group(2),m.group(3),m.group(1),m.group(4),m.group(5)));
    }
    website=new URI(""String_Node_Str"");
    request.setURI(website);
    response=client.execute(request);
    statusCode=response.getStatusLine().getStatusCode();
    if (statusCode != 200) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + String.valueOf(statusCode));
      return false;
    }
    responseStr=EntityUtils.toString(response.getEntity(),""String_Node_Str"");
    remainMoney=findInStr(responseStr,""String_Node_Str"");
    return true;
  }
 catch (  Exception e) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + e.toString());
    networkError=true;
    return false;
  }
}","public Boolean getStates(){
  try {
    URI website=new URI(""String_Node_Str"");
    HttpGet request=new HttpGet(website);
    setGetHeader(request);
    HttpResponse response=client.execute(request);
    int statusCode=response.getStatusLine().getStatusCode();
    if (statusCode != 200) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + String.valueOf(statusCode));
      return false;
    }
    String responseStr=EntityUtils.toString(response.getEntity(),""String_Node_Str"");
    accountState=findInStr(responseStr,""String_Node_Str"");
    onlineState=findInStr(responseStr,""String_Node_Str"");
    usage=findInStr(responseStr,""String_Node_Str"");
    onlineDevices.clear();
    Pattern p=Pattern.compile(""String_Node_Str"");
    Matcher m=p.matcher(responseStr);
    while (m.find() && m.groupCount() == 5) {
      onlineDevices.add(new OnlineDevice(m.group(2),m.group(3),m.group(1),m.group(4),m.group(5)));
    }
    website=new URI(""String_Node_Str"");
    request.setURI(website);
    response=client.execute(request);
    statusCode=response.getStatusLine().getStatusCode();
    if (statusCode != 200) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + String.valueOf(statusCode));
      return false;
    }
    responseStr=EntityUtils.toString(response.getEntity(),""String_Node_Str"");
    remainMoney=findInStr(responseStr,""String_Node_Str"");
    return true;
  }
 catch (  Exception e) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + e.toString());
    networkError=true;
    return false;
  }
}",0.9909426366990942
146438,"@Override public void onStart(){
  super.onStart();
  accountCardText=(TextView)getActivity().findViewById(R.id.accountCard);
  accountStateText=(TextView)getActivity().findViewById(R.id.accountState);
  onlineStateText=(TextView)getActivity().findViewById(R.id.onlineState);
  onlineTable=(TableLayout)getActivity().findViewById(R.id.onlineTable);
  usageText=(TextView)getActivity().findViewById(R.id.usage);
  button_unlock=(Button)getActivity().findViewById(R.id.button_unlock);
  expireDateText=(TextView)getActivity().findViewById(R.id.expireDate);
  button_payfee=(Button)getActivity().findViewById(R.id.button_payfee);
  remainMoneyText=(TextView)getActivity().findViewById(R.id.remainMoney);
  buttonRecharge=(Button)getActivity().findViewById(R.id.buttonRecharge);
  onlineTable.setStretchAllColumns(true);
  builder=new AlertDialog.Builder(getActivity());
  unlockBuilder=new AlertDialog.Builder(getActivity());
  new NicTask(getActivity().getApplicationContext(),""String_Node_Str"").execute();
  button_unlock.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      unlockBuilder.setTitle(""String_Node_Str"").setMessage(""String_Node_Str"").setPositiveButton(android.R.string.yes,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          new NicTask(getActivity().getApplicationContext(),""String_Node_Str"").execute();
        }
      }
).setNegativeButton(android.R.string.no,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
        }
      }
).setIcon(android.R.drawable.ic_dialog_alert).show();
    }
  }
);
  button_payfee.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      PayFeeDialog editNameDialog=PayFeeDialog.newInstance(accountState);
      editNameDialog.show(fm,""String_Node_Str"");
    }
  }
);
  buttonRecharge.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      FragmentManager fm=getActivity().getSupportFragmentManager();
      RechargeDialog rechargeDialog=RechargeDialog.newInstance(account);
      rechargeDialog.show(fm,""String_Node_Str"");
    }
  }
);
}","@Override public void onStart(){
  super.onStart();
  refresh();
}",0.0549450549450549
146439,"public void accountOK(View view){
  EditText accountText=(EditText)findViewById(R.id.account_message);
  EditText passwdText=(EditText)findViewById(R.id.passwd_message);
  String account=accountText.getText().toString();
  String passwd=passwdText.getText().toString();
  if (account.isEmpty() || passwd.isEmpty()) {
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
    return;
  }
 else {
    InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
    if (view.getWindowToken() != null) {
      imm.hideSoftInputFromWindow(view.getWindowToken(),0);
    }
    Editor editor=getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE).edit();
    editor.putString(""String_Node_Str"",account);
    editor.putString(""String_Node_Str"",passwd);
    editor.commit();
    nicFragment.refresh();
    WifiManager wifi_service=(WifiManager)getApplicationContext().getSystemService(Context.WIFI_SERVICE);
    String ssid=wifi_service.getConnectionInfo().getSSID();
    if (ssid.startsWith(""String_Node_Str"") && ssid.endsWith(""String_Node_Str"")) {
      ssid=ssid.substring(1,ssid.length() - 1);
    }
    if (checkSsid(ssid)) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + ssid);
      new LoginTask(getApplicationContext()).execute();
    }
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}","public void accountOK(View view){
  EditText accountText=(EditText)findViewById(R.id.account_message);
  EditText passwdText=(EditText)findViewById(R.id.passwd_message);
  String account=accountText.getText().toString();
  String passwd=passwdText.getText().toString();
  if (account.isEmpty() || passwd.isEmpty()) {
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
    return;
  }
 else   if (accountText == null || passwdText == null) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    return;
  }
 else {
    InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
    if (view.getWindowToken() != null) {
      imm.hideSoftInputFromWindow(view.getWindowToken(),0);
    }
    Editor editor=getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE).edit();
    editor.putString(""String_Node_Str"",account);
    editor.putString(""String_Node_Str"",passwd);
    editor.commit();
    if (nicFragment != null)     nicFragment.refresh();
    WifiManager wifi_service=(WifiManager)getApplicationContext().getSystemService(Context.WIFI_SERVICE);
    String ssid=wifi_service.getConnectionInfo().getSSID();
    if (ssid.startsWith(""String_Node_Str"") && ssid.endsWith(""String_Node_Str"")) {
      ssid=ssid.substring(1,ssid.length() - 1);
    }
    if (checkSsid(ssid)) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + ssid);
      new LoginTask(getApplicationContext()).execute();
    }
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}",0.949290060851927
146440,"protected Boolean doInBackground(BasicNameValuePair... params){
  if (params.length > 0 && params[0].getName().equals(""String_Node_Str"")) {
    try {
      retrys=Integer.parseInt(params[0].getValue()) + 1;
    }
 catch (    NumberFormatException e) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + e.toString());
      return false;
    }
  }
  if (checkLogin()) {
    alreadyLoggedIn=true;
  }
 else {
    SharedPreferences sp=context.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
    account=sp.getString(""String_Node_Str"",""String_Node_Str"");
    passwd=sp.getString(""String_Node_Str"",""String_Node_Str"");
    if (account.equals(""String_Node_Str"") || passwd.equals(""String_Node_Str"")) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      return false;
    }
    if (login()) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      return true;
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      return false;
    }
  }
  return false;
}","protected Boolean doInBackground(BasicNameValuePair... params){
  if (params.length > 0 && params[0].getName().equals(""String_Node_Str"")) {
    try {
      retrys=Integer.parseInt(params[0].getValue()) + 1;
    }
 catch (    NumberFormatException e) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + e.toString());
      return false;
    }
  }
  if (checkLogin())   return false;
 else   if (retry) {
    retry();
    return false;
  }
 else {
    SharedPreferences sp=context.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
    account=sp.getString(""String_Node_Str"",""String_Node_Str"");
    passwd=sp.getString(""String_Node_Str"",""String_Node_Str"");
    if (account.equals(""String_Node_Str"") || passwd.equals(""String_Node_Str"")) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      return false;
    }
    if (login()) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      return true;
    }
 else     if (retry) {
      retry();
      return false;
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      return false;
    }
  }
}",0.9240506329113924
146441,"protected void onPostExecute(Boolean result){
  SQLiteHelper db=new SQLiteHelper(context);
  if (result) {
    db.addLog(""String_Node_Str"");
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else   if (retrys >= 3) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    db.addLog(""String_Node_Str"");
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else   if (exceedError) {
    db.addLog(""String_Node_Str"");
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else   if (passwdError) {
    db.addLog(""String_Node_Str"");
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else   if (alreadyLoggedIn) {
    db.addLog(""String_Node_Str"");
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}","protected void onPostExecute(Boolean result){
  if (retry)   return;
  SQLiteHelper db=new SQLiteHelper(context);
  if (result) {
    db.addLog(""String_Node_Str"");
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else   if (retrys >= 3) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    db.addLog(""String_Node_Str"");
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else   if (exceedError) {
    db.addLog(""String_Node_Str"");
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else   if (passwdError) {
    db.addLog(""String_Node_Str"");
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else   if (alreadyLoggedIn) {
    db.addLog(""String_Node_Str"");
    Toast.makeText(context.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}",0.9878883622959452
146442,"public Boolean login(){
  try {
    HttpClient client=new DefaultHttpClient();
    URI website=new URI(""String_Node_Str"");
    HttpPost request=new HttpPost(website);
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",passwd));
    request.setEntity(new UrlEncodedFormEntity(nameValuePairs));
    request.setHeader(""String_Node_Str"",""String_Node_Str"" + android.os.Build.VERSION.RELEASE + ""String_Node_Str""+ version);
    HttpResponse response=client.execute(request);
    int statusCode=response.getStatusLine().getStatusCode();
    if (statusCode == 200) {
      String responseStr=EntityUtils.toString(response.getEntity(),""String_Node_Str"");
      if (responseStr.contains(""String_Node_Str"")) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + String.valueOf(statusCode));
        return true;
      }
 else       if (responseStr.contains(""String_Node_Str"")) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        exceedError=true;
      }
 else       if (responseStr.contains(""String_Node_Str"")) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        passwdError=true;
      }
      return false;
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"" + String.valueOf(statusCode));
      return false;
    }
  }
 catch (  Exception e) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + e.toString());
    retry();
    return false;
  }
}","public Boolean login(){
  try {
    HttpClient client=new DefaultHttpClient();
    URI website=new URI(""String_Node_Str"");
    HttpPost request=new HttpPost(website);
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",passwd));
    request.setEntity(new UrlEncodedFormEntity(nameValuePairs));
    request.setHeader(""String_Node_Str"",""String_Node_Str"" + android.os.Build.VERSION.RELEASE + ""String_Node_Str""+ version);
    HttpResponse response=client.execute(request);
    int statusCode=response.getStatusLine().getStatusCode();
    if (statusCode == 200) {
      String responseStr=EntityUtils.toString(response.getEntity(),""String_Node_Str"");
      if (responseStr.contains(""String_Node_Str"")) {
        return true;
      }
 else       if (responseStr.contains(""String_Node_Str"")) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        exceedError=true;
      }
 else       if (responseStr.contains(""String_Node_Str"")) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        passwdError=true;
      }
      return false;
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"" + String.valueOf(statusCode));
      return false;
    }
  }
 catch (  Exception e) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + e.toString());
    retry=true;
    return false;
  }
}",0.734185733512786
146443,"public Boolean checkLogin(){
  try {
    HttpClient client=new DefaultHttpClient();
    URI website=new URI(""String_Node_Str"");
    HttpGet request=new HttpGet();
    request.setHeader(""String_Node_Str"",""String_Node_Str"" + android.os.Build.VERSION.RELEASE + ""String_Node_Str""+ version);
    request.setURI(website);
    HttpResponse response=client.execute(request);
    String responseStr=EntityUtils.toString(response.getEntity());
    if (responseStr.contains(""String_Node_Str"")) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      return true;
    }
 else {
      return false;
    }
  }
 catch (  UnknownHostException e) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    retry();
    return false;
  }
catch (  Exception e) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + e.toString());
    return false;
  }
}","public Boolean checkLogin(){
  try {
    HttpClient client=new DefaultHttpClient();
    URI website=new URI(""String_Node_Str"");
    HttpGet request=new HttpGet();
    request.setHeader(""String_Node_Str"",""String_Node_Str"" + android.os.Build.VERSION.RELEASE + ""String_Node_Str""+ version);
    request.setURI(website);
    HttpResponse response=client.execute(request);
    String responseStr=EntityUtils.toString(response.getEntity());
    if (responseStr.contains(""String_Node_Str"")) {
      alreadyLoggedIn=true;
      Log.d(""String_Node_Str"",""String_Node_Str"");
      return true;
    }
 else {
      return false;
    }
  }
 catch (  UnknownHostException e) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    retry=true;
    return false;
  }
catch (  Exception e) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + e.toString());
    return false;
  }
}",0.9792284866468842
146444,"public void retry(){
  if (retrys < 3) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + String.valueOf(retrys));
    String UNIQUE_STRING=""String_Node_Str"";
    Intent intent=new Intent(UNIQUE_STRING);
    intent.putExtra(""String_Node_Str"",String.valueOf(retrys));
    context.sendBroadcast(intent);
  }
}","public void retry(){
  if (retrys < 3) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + String.valueOf(retrys));
    String UNIQUE_STRING=""String_Node_Str"";
    Intent intent=new Intent(UNIQUE_STRING);
    intent.putExtra(""String_Node_Str"",String.valueOf(retrys));
    context.sendBroadcast(intent);
  }
 else   retry=false;
}",0.966824644549763
146445,"public Boolean checkLogin(){
  try {
    HttpClient client=new DefaultHttpClient();
    URI website=new URI(""String_Node_Str"");
    HttpGet request=new HttpGet();
    request.setHeader(""String_Node_Str"",""String_Node_Str"" + android.os.Build.VERSION.RELEASE + ""String_Node_Str""+ version);
    request.setURI(website);
    HttpResponse response=client.execute(request);
    String responseStr=EntityUtils.toString(response.getEntity());
    if (responseStr.contains(""String_Node_Str"")) {
      alreadyLoggedIn=true;
      Log.d(""String_Node_Str"",""String_Node_Str"");
      return true;
    }
 else {
      return false;
    }
  }
 catch (  UnknownHostException e) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    retry=true;
    return false;
  }
catch (  Exception e) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + e.toString());
    return false;
  }
}","public Boolean checkLogin(){
  try {
    HttpClient client=new DefaultHttpClient();
    URI website=new URI(""String_Node_Str"");
    HttpGet request=new HttpGet();
    request.setHeader(""String_Node_Str"",""String_Node_Str"" + android.os.Build.VERSION.RELEASE + ""String_Node_Str""+ version);
    request.setURI(website);
    HttpResponse response=client.execute(request);
    String responseStr=EntityUtils.toString(response.getEntity());
    if (responseStr.contains(""String_Node_Str"")) {
      alreadyLoggedIn=true;
      Log.d(""String_Node_Str"",""String_Node_Str"");
      return true;
    }
 else {
      return false;
    }
  }
 catch (  Exception e) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + e.toString());
    retry=true;
    return false;
  }
}",0.9162011173184358
146446,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  final ActionBar actionBar=getSupportActionBar();
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
  mSectionsPagerAdapter=new SectionsPagerAdapter(getSupportFragmentManager());
  mViewPager=(ViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      actionBar.setSelectedNavigationItem(position);
    }
  }
);
  for (int i=0; i < mSectionsPagerAdapter.getCount(); i++) {
    actionBar.addTab(actionBar.newTab().setText(mSectionsPagerAdapter.getPageTitle(i)).setTabListener(this));
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  final ActionBar actionBar=getSupportActionBar();
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
  mSectionsPagerAdapter=new SectionsPagerAdapter(getSupportFragmentManager());
  mViewPager=(ViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      actionBar.setSelectedNavigationItem(position);
    }
  }
);
  for (int i=0; i < mSectionsPagerAdapter.getCount(); i++) {
    actionBar.addTab(actionBar.newTab().setText(mSectionsPagerAdapter.getPageTitle(i)).setTabListener(this));
  }
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
}",0.951048951048951
146447,"public void onDateSet(DatePicker view,int year,int month,int day){
  Log.d(""String_Node_Str"",(""String_Node_Str"" + String.valueOf(year) + String.valueOf(month)+ String.valueOf(day)));
}","public void onDateSet(DatePicker view,int year,int month,int day){
  SQLiteHelper db=new SQLiteHelper(getActivity());
  String dateStamp=String.format(""String_Node_Str"",year).replace(' ','0') + String.format(""String_Node_Str"",month + 1).replace(' ','0') + String.format(""String_Node_Str"",day).replace(' ','0');
  Button button=(Button)getActivity().findViewById(R.id.button_changeDate);
  button.setText(dateStamp);
  List<String> dbLogList=db.getLogsByDate(dateStamp);
  String[] logs=dbLogList.toArray(new String[dbLogList.size()]);
  ListView logList=(ListView)getActivity().findViewById(R.id.logList);
  logList.setAdapter(new ArrayAdapter<String>(getActivity(),android.R.layout.simple_list_item_1,logs));
  Log.d(""String_Node_Str"",(""String_Node_Str"" + dateStamp));
}",0.2513089005235602
146448,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_log,container,false);
  Button button=(Button)rootView.findViewById(R.id.button_changeDate);
  ListView logList=(ListView)rootView.findViewById(R.id.logList);
  String dateStamp=new SimpleDateFormat(""String_Node_Str"",java.util.Locale.getDefault()).format(Calendar.getInstance().getTime());
  button.setText(dateStamp);
  SQLiteHelper db=new SQLiteHelper(getActivity());
  List<String> dbLogList=db.getLogsByDate(dateStamp);
  String[] logs=dbLogList.toArray(new String[dbLogList.size()]);
  logList.setAdapter(new ArrayAdapter<String>(getActivity(),android.R.layout.simple_list_item_1,logs));
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_log,container,false);
  Button button=(Button)rootView.findViewById(R.id.button_changeDate);
  String dateStamp=new SimpleDateFormat(""String_Node_Str"",java.util.Locale.getDefault()).format(Calendar.getInstance().getTime());
  button.setText(dateStamp);
  return rootView;
}",0.6921797004991681
146449,"@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.main,menu);
  InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
  imm.hideSoftInputFromWindow(this.getCurrentFocus().getWindowToken(),0);
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.main,menu);
  return true;
}",0.5896805896805897
146450,"public void addLog(String log){
  SQLiteDatabase db=this.getWritableDatabase();
  ContentValues values=new ContentValues();
  java.util.Date d=Calendar.getInstance().getTime();
  String dateStamp=new SimpleDateFormat(""String_Node_Str"",java.util.Locale.getDefault()).format(d);
  String timeStamp=new SimpleDateFormat(""String_Node_Str"",java.util.Locale.getDefault()).format(d);
  values.put(DATE,dateStamp);
  values.put(MSG,timeStamp + ""String_Node_Str"" + log);
  db.insert(TABLE_LOG,null,values);
  db.close();
  Log.d(""String_Node_Str"",log + dateStamp + timeStamp);
}","public void addLog(String log){
  SQLiteDatabase db=this.getWritableDatabase();
  ContentValues values=new ContentValues();
  java.util.Date d=Calendar.getInstance().getTime();
  String dateStamp=new SimpleDateFormat(""String_Node_Str"",java.util.Locale.getDefault()).format(d);
  String timeStamp=new SimpleDateFormat(""String_Node_Str"",java.util.Locale.getDefault()).format(d);
  values.put(DATE,dateStamp);
  values.put(MSG,timeStamp + ""String_Node_Str"" + log);
  db.insert(TABLE_LOG,null,values);
  db.close();
  Log.d(""String_Node_Str"",log + dateStamp + timeStamp);
  if (Calendar.getInstance().get(Calendar.DAY_OF_MONTH) <= 3) {
    cleanOldLogs();
  }
}",0.9282218597063622
146451,"public Boolean cleanOldLogs(){
  String dateStamp=new SimpleDateFormat(""String_Node_Str"",java.util.Locale.getDefault()).format(Calendar.getInstance().getTime());
  SQLiteDatabase db=this.getWritableDatabase();
  db.delete(TABLE_LOG,DATE + ""String_Node_Str"",new String[]{dateStamp});
  db.close();
  return true;
}","public Boolean cleanOldLogs(){
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.MONTH,cal.get(Calendar.MONTH) - 1);
  String dateStamp=new SimpleDateFormat(""String_Node_Str"",java.util.Locale.getDefault()).format(cal.getTime());
  SQLiteDatabase db=this.getWritableDatabase();
  int count=db.delete(TABLE_LOG,DATE + ""String_Node_Str"",new String[]{dateStamp});
  db.close();
  Log.d(""String_Node_Str"",String.valueOf(count) + ""String_Node_Str"" + dateStamp);
  return true;
}",0.733921815889029
146452,"public List<String> getLogsByDate(String date){
  List<String> logs=new LinkedList<String>();
  String query=""String_Node_Str"" + TABLE_LOG + ""String_Node_Str""+ date;
  SQLiteDatabase db=this.getReadableDatabase();
  Cursor cursor=db.rawQuery(query,null);
  Log.d(""String_Node_Str"",String.valueOf(cursor.getCount()));
  if (cursor.moveToFirst()) {
    do {
      String log=cursor.getString(2);
      logs.add(log);
    }
 while (cursor.moveToNext());
  }
  db.close();
  Log.d(""String_Node_Str"" + date,logs.toString());
  return logs;
}","public List<String> getLogsByDate(String date){
  List<String> logs=new LinkedList<String>();
  String query=""String_Node_Str"" + TABLE_LOG + ""String_Node_Str""+ date;
  SQLiteDatabase db=this.getReadableDatabase();
  Cursor cursor=db.rawQuery(query,null);
  if (cursor.moveToFirst()) {
    do {
      String log=cursor.getString(2);
      logs.add(log);
    }
 while (cursor.moveToNext());
  }
  db.close();
  Log.d(""String_Node_Str"" + date,logs.toString());
  return logs;
}",0.9386138613861386
146453,"public static void trackAppLaunch(Context context){
  SharedPreferences prefs=context.getSharedPreferences(APPRATER_LOG_FILENAME,Context.MODE_PRIVATE);
  if (prefs.getBoolean(DONT_SHOW_AGAIN_KEY,false)) {
    return;
  }
  SharedPreferences.Editor editor=prefs.edit();
  long launchCount=prefs.getLong(LAUNCH_COUNT_KEY,0) + 1;
  editor.putLong(LAUNCH_COUNT_KEY,launchCount);
  long firstLaunchTimestamp=prefs.getLong(FIRST_LAUNCH_TIMESTAMP,0);
  if (firstLaunchTimestamp == 0) {
    firstLaunchTimestamp=System.currentTimeMillis();
    editor.putLong(FIRST_LAUNCH_TIMESTAMP,firstLaunchTimestamp);
  }
  if (launchCount >= LAUNCHES_UNTIL_PROMPT) {
    if (System.currentTimeMillis() >= firstLaunchTimestamp + TimeUnit.DAYS.toMillis(DAYS_UNTIL_PROMPT)) {
      showRateDialog(context,editor);
    }
  }
  editor.apply();
}","public static void trackAppLaunch(Context context){
  SharedPreferences prefs=context.getSharedPreferences(APPRATER_LOG_FILENAME,Context.MODE_PRIVATE);
  if (prefs.getBoolean(DONT_SHOW_AGAIN_KEY,false)) {
    return;
  }
  SharedPreferences.Editor editor=prefs.edit();
  long launchCount=prefs.getLong(LAUNCH_COUNT_KEY,0) + 1;
  editor.putLong(LAUNCH_COUNT_KEY,launchCount);
  long firstLaunchTimestamp=prefs.getLong(FIRST_LAUNCH_TIMESTAMP,0);
  if (firstLaunchTimestamp == 0) {
    firstLaunchTimestamp=System.currentTimeMillis();
    editor.putLong(FIRST_LAUNCH_TIMESTAMP,firstLaunchTimestamp);
  }
  if (launchCount >= LAUNCHES_UNTIL_PROMPT && (System.currentTimeMillis() >= firstLaunchTimestamp + TimeUnit.DAYS.toMillis(DAYS_UNTIL_PROMPT))) {
    showRateDialog(context,editor);
  }
  editor.apply();
}",0.966789667896679
146454,"@Override public View getView(int position,View convertView,ViewGroup parent){
  int viewType=getItemViewType(position);
switch (viewType) {
case TYPE_ITEM:
    convertView=createOrBindItemType(position,convertView,parent);
  break;
case TYPE_SEPARATOR:
if (convertView == null) {
  convertView=LayoutInflater.from(context).inflate(R.layout.view_pair_separator,parent,false);
}
break;
}
return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  int viewType=getItemViewType(position);
switch (viewType) {
case TYPE_ITEM:
    convertView=createOrBindItemType(position,convertView,parent);
  break;
case TYPE_SEPARATOR:
if (convertView == null) {
  convertView=LayoutInflater.from(context).inflate(R.layout.view_pair_separator,parent,false);
}
break;
default :
break;
}
return convertView;
}",0.979591836734694
146455,"/** 
 * Get depth for the given pair
 * @param pair Pair (in app format, ex. ""BTC/USD"")
 * @return Depth call result
 */
@NonNull @WorkerThread public CallResult<Depth> depth(@NonNull String pair){
  pair=PairUtils.localToServer(pair);
  final String url=hostUrl + ""String_Node_Str"" + pair;
  JsonObject response=guestApi.call(url);
  CallResult<Depth> result=new CallResult<>();
  if (response == null || response.has(SUCCESS_KEY)) {
    result.isSuccess=false;
    result.error=response == null ? generalErrorText : response.get(ERROR_KEY).getAsString();
    return result;
  }
  result.isSuccess=true;
  result.payload=Depth.create(pair,response.getAsJsonObject(pair));
  return result;
}","/** 
 * Get depth for the given pair
 * @param pair Pair (in app format, ex. ""BTC/USD"")
 * @return Depth call result
 */
@NonNull @WorkerThread public CallResult<Depth> depth(@NonNull String pair){
  final String serverPair=PairUtils.localToServer(pair);
  final String url=hostUrl + ""String_Node_Str"" + serverPair;
  JsonObject response=guestApi.call(url);
  CallResult<Depth> result=new CallResult<>();
  if (response == null || response.has(SUCCESS_KEY)) {
    result.isSuccess=false;
    result.error=response == null ? generalErrorText : response.get(ERROR_KEY).getAsString();
    return result;
  }
  result.isSuccess=true;
  result.payload=Depth.create(pair,response.getAsJsonObject(serverPair));
  return result;
}",0.9738145789101204
146456,"/** 
 * Converts byte array to HEX string
 * @param array String as array of bytes
 * @return String in HEX format
 */
private String byteArrayToHexString(byte[] array){
  StringBuilder hexString=new StringBuilder();
  for (  byte b : array) {
    int intVal=b & 0xff;
    if (intVal < 0x10)     hexString.append(""String_Node_Str"");
    hexString.append(Integer.toHexString(intVal));
  }
  return hexString.toString();
}","/** 
 * Converts byte array to HEX string
 * @param array String as array of bytes
 * @return String in HEX format
 */
private String byteArrayToHexString(byte[] array){
  StringBuilder hexString=new StringBuilder();
  for (  byte b : array) {
    int intVal=b & 0xff;
    if (intVal < 0x10) {
      hexString.append('0');
    }
    hexString.append(Integer.toHexString(intVal));
  }
  return hexString.toString();
}",0.7990430622009569
146457,"/** 
 * Makes any request, which require authentication
 * @param method     Method of Trade API
 * @param parameters Additional arguments, which can exist for this method
 * @return Response of type {@link JsonObject}
 */
@Nullable JsonObject makeRequest(@TradeMethod @NonNull String method,@Nullable Map<String,String> parameters){
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + method + (parameters != null ? ""String_Node_Str"" + parameters.toString() : ""String_Node_Str""));
  }
  if (key.length() == 0 || secret.length() == 0) {
    return JSON_PARSER.parse(""String_Node_Str"" + appContext.getString(R.string.no_key_secret_error) + ""String_Node_Str"").getAsJsonObject();
  }
  if (parameters == null) {
    parameters=new HashMap<>();
  }
  parameters.put(""String_Node_Str"",method);
  parameters.put(""String_Node_Str"",""String_Node_Str"" + ++nonce);
  String postData=""String_Node_Str"";
  for (  Map.Entry<String,String> ent : parameters.entrySet()) {
    if (postData.length() > 0) {
      postData+=""String_Node_Str"";
    }
    postData+=ent.getKey() + ""String_Node_Str"" + ent.getValue();
  }
  final SecretKeySpec secretKeySpec;
  try {
    secretKeySpec=new SecretKeySpec(secret.getBytes(""String_Node_Str""),""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException uee) {
    Log.e(TAG,""String_Node_Str"",uee);
    return null;
  }
  final Mac mac;
  try {
    mac=Mac.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException nsae) {
    Log.e(TAG,""String_Node_Str"",nsae);
    return null;
  }
  try {
    mac.init(secretKeySpec);
  }
 catch (  InvalidKeyException ike) {
    Log.e(TAG,""String_Node_Str"",ike);
    return null;
  }
  HttpURLConnection connection=null;
  BufferedReader bufferedReader=null;
  DataOutputStream wr=null;
  try {
    connection=(HttpURLConnection)(new URL(hostUrl + ""String_Node_Str"")).openConnection();
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    connection.setRequestProperty(""String_Node_Str"",key);
    connection.setConnectTimeout((int)TimeUnit.SECONDS.toMillis(5));
    connection.setReadTimeout((int)TimeUnit.SECONDS.toMillis(30));
    byte[] array=mac.doFinal(postData.getBytes(""String_Node_Str""));
    connection.setRequestProperty(""String_Node_Str"",byteArrayToHexString(array));
    wr=new DataOutputStream(connection.getOutputStream());
    wr.writeBytes(postData);
    wr.flush();
    InputStream response=connection.getInputStream();
    StringBuilder sb=new StringBuilder();
    if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
      String line;
      bufferedReader=new BufferedReader(new InputStreamReader(response));
      while ((line=bufferedReader.readLine()) != null) {
        sb.append(line);
      }
      return JSON_PARSER.parse(sb.toString()).getAsJsonObject();
    }
  }
 catch (  IOException e) {
    logException(e);
  }
catch (  JsonParseException jpe) {
    logException(jpe);
  }
 finally {
    if (connection != null) {
      connection.disconnect();
    }
    if (bufferedReader != null) {
      try {
        bufferedReader.close();
      }
 catch (      IOException e) {
        logException(e);
      }
    }
    if (wr != null) {
      try {
        wr.close();
      }
 catch (      IOException e) {
        logException(e);
      }
    }
  }
  return null;
}","/** 
 * Makes any request, which require authentication
 * @param method     Method of Trade API
 * @param parameters Additional arguments, which can exist for this method
 * @return Response of type {@link JsonObject}
 */
@Nullable JsonObject makeRequest(@TradeMethod @NonNull String method,@Nullable Map<String,String> parameters){
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + method + (parameters != null ? ""String_Node_Str"" + parameters.toString() : ""String_Node_Str""));
  }
  if (key.length() == 0 || secret.length() == 0) {
    return JSON_PARSER.parse(""String_Node_Str"" + appContext.getString(R.string.no_key_secret_error) + ""String_Node_Str"").getAsJsonObject();
  }
  if (parameters == null) {
    parameters=new HashMap<>();
  }
  parameters.put(""String_Node_Str"",method);
  parameters.put(""String_Node_Str"",""String_Node_Str"" + ++nonce);
  String postData=""String_Node_Str"";
  for (  Map.Entry<String,String> ent : parameters.entrySet()) {
    if (postData.length() > 0) {
      postData+=""String_Node_Str"";
    }
    postData+=ent.getKey() + ""String_Node_Str"" + ent.getValue();
  }
  final SecretKeySpec secretKeySpec;
  try {
    secretKeySpec=new SecretKeySpec(secret.getBytes(""String_Node_Str""),""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException uee) {
    Log.e(TAG,""String_Node_Str"",uee);
    return null;
  }
  final Mac mac;
  try {
    mac=Mac.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException nsae) {
    Log.e(TAG,""String_Node_Str"",nsae);
    return null;
  }
  try {
    mac.init(secretKeySpec);
  }
 catch (  InvalidKeyException ike) {
    Log.e(TAG,""String_Node_Str"",ike);
    return null;
  }
  HttpURLConnection connection=null;
  BufferedReader bufferedReader=null;
  DataOutputStream wr=null;
  try {
    connection=(HttpURLConnection)(new URL(hostUrl + ""String_Node_Str"")).openConnection();
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    connection.setRequestProperty(""String_Node_Str"",key);
    connection.setConnectTimeout((int)TimeUnit.SECONDS.toMillis(5));
    connection.setReadTimeout((int)TimeUnit.SECONDS.toMillis(30));
    byte[] array=mac.doFinal(postData.getBytes(""String_Node_Str""));
    connection.setRequestProperty(""String_Node_Str"",byteArrayToHexString(array));
    wr=new DataOutputStream(connection.getOutputStream());
    wr.writeBytes(postData);
    wr.flush();
    InputStream response=connection.getInputStream();
    StringBuilder sb=new StringBuilder();
    if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
      String line;
      bufferedReader=new BufferedReader(new InputStreamReader(response,""String_Node_Str""));
      while ((line=bufferedReader.readLine()) != null) {
        sb.append(line);
      }
      return JSON_PARSER.parse(sb.toString()).getAsJsonObject();
    }
  }
 catch (  IOException e) {
    logException(e);
  }
catch (  JsonParseException jpe) {
    logException(jpe);
  }
 finally {
    if (connection != null) {
      connection.disconnect();
    }
    if (bufferedReader != null) {
      try {
        bufferedReader.close();
      }
 catch (      IOException e) {
        logException(e);
      }
    }
    if (wr != null) {
      try {
        wr.close();
      }
 catch (      IOException e) {
        logException(e);
      }
    }
  }
  return null;
}",0.9973576042278331
146458,"CallResult(){
}","/** 
 * Creates new instance
 */
CallResult(){
}",0.4761904761904761
146459,"/** 
 * Makes simple non-authenticated request
 * @param urlString URL of Public API
 * @return Response of type {@link JsonObject}
 */
@Nullable JsonObject call(@NonNull String urlString){
  HttpURLConnection connection=null;
  BufferedReader rd=null;
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + urlString);
  }
  try {
    URL url=new URL(urlString);
    connection=(HttpURLConnection)url.openConnection();
    connection.setConnectTimeout((int)TimeUnit.SECONDS.toMillis(5));
    connection.setReadTimeout((int)TimeUnit.SECONDS.toMillis(30));
    InputStream response=connection.getInputStream();
    StringBuilder sb=new StringBuilder();
    if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
      rd=new BufferedReader(new InputStreamReader(response));
      String line;
      while ((line=rd.readLine()) != null) {
        sb.append(line);
      }
      return JSON_PARSER.parse(sb.toString()).getAsJsonObject();
    }
  }
 catch (  IOException e) {
    logException(e);
  }
catch (  JsonParseException jpe) {
    logException(jpe);
  }
 finally {
    if (connection != null) {
      connection.disconnect();
    }
    if (rd != null) {
      try {
        rd.close();
      }
 catch (      IOException e) {
        logException(e);
      }
    }
  }
  return null;
}","/** 
 * Makes simple non-authenticated request
 * @param urlString URL of Public API
 * @return Response of type {@link JsonObject}
 */
@Nullable JsonObject call(@NonNull String urlString){
  HttpURLConnection connection=null;
  BufferedReader rd=null;
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + urlString);
  }
  try {
    URL url=new URL(urlString);
    connection=(HttpURLConnection)url.openConnection();
    connection.setConnectTimeout((int)TimeUnit.SECONDS.toMillis(5));
    connection.setReadTimeout((int)TimeUnit.SECONDS.toMillis(30));
    InputStream response=connection.getInputStream();
    StringBuilder sb=new StringBuilder();
    if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
      rd=new BufferedReader(new InputStreamReader(response,""String_Node_Str""));
      String line;
      while ((line=rd.readLine()) != null) {
        sb.append(line);
      }
      return JSON_PARSER.parse(sb.toString()).getAsJsonObject();
    }
  }
 catch (  IOException e) {
    logException(e);
  }
catch (  JsonParseException jpe) {
    logException(jpe);
  }
 finally {
    if (connection != null) {
      connection.disconnect();
    }
    if (rd != null) {
      try {
        rd.close();
      }
 catch (      IOException e) {
        logException(e);
      }
    }
  }
  return null;
}",0.9931506849315068
146460,"@NonNull public long getId(){
  return id;
}","public long getId(){
  return id;
}",0.8860759493670886
146461,"public static DBWorker getInstance(Context context){
  DBWorker localInstance=sInstance;
  if (localInstance == null) {
synchronized (DBWorker.class) {
      localInstance=sInstance;
      if (localInstance == null) {
        sInstance=new DBWorker(context.getApplicationContext());
        localInstance=sInstance;
      }
    }
  }
  return localInstance;
}","public static DBWorker getInstance(@NonNull Context context){
  DBWorker localInstance=sInstance;
  if (localInstance == null) {
synchronized (DBWorker.class) {
      localInstance=sInstance;
      if (localInstance == null) {
        sInstance=new DBWorker(context.getApplicationContext());
        localInstance=sInstance;
      }
    }
  }
  return localInstance;
}",0.9876203576341128
146462,"@Override public String getLabel(Crosshair crosshair,Plot plot,double v,double v2){
  int index=priceSeries.convertToArrayIndex(v);
  if (index < 0)   index=0;
  if (index >= 0) {
    if (index >= priceSeries.getPointCount())     index=priceSeries.getPointCount() - 1;
    return data.history.get(index).time.replace(""String_Node_Str"",""String_Node_Str"") + String.format(""String_Node_Str"",priceText) + PRICE_DECIMAL_FORMAT.format(v2)+ String.format(""String_Node_Str"",volumeText)+ String.valueOf((int)(data.history.get(index).volume + 0.5f));
  }
  return null;
}","@Override public String getLabel(Crosshair crosshair,Plot plot,double v,double v2){
  int index=priceSeries.convertToArrayIndex(v);
  if (index < 0) {
    index=0;
  }
  if (index >= 0) {
    if (index >= priceSeries.getPointCount()) {
      index=priceSeries.getPointCount() - 1;
    }
    return data.history.get(index).time.replace(""String_Node_Str"",""String_Node_Str"") + String.format(""String_Node_Str"",priceText) + PRICE_DECIMAL_FORMAT.format(v2)+ String.format(""String_Node_Str"",volumeText)+ String.valueOf((int)(data.history.get(index).volume + 0.5f));
  }
  return null;
}",0.9842105263157894
146463,"@Override public void updateChartData(){
  ConnectivityManager connectivityManager=(ConnectivityManager)getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();
  if (networkInfo == null || !networkInfo.isConnected()) {
    Toast.makeText(getActivity(),R.string.no_connection_text,Toast.LENGTH_SHORT).show();
    return;
  }
  if (chartsMap.size() > 0) {
    List<String> chartNames=new ArrayList<>(chartsMap.keySet());
    Collections.sort(chartNames,PairUtils.CURRENCY_COMPARATOR);
    if (getActivity() != null) {
      isUpdating=true;
      getActivity().invalidateOptionsMenu();
    }
    for (    String pair : chartNames) {
      chartsUpdater.queueChart(chartsMap.get(pair),pair);
    }
  }
}","@Override public void updateChartData(){
  ConnectivityManager connectivityManager=(ConnectivityManager)getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();
  if (networkInfo == null || !networkInfo.isConnected()) {
    Toast.makeText(getActivity(),R.string.no_connection_text,Toast.LENGTH_SHORT).show();
    return;
  }
  if (!chartsMap.isEmpty()) {
    List<String> chartNames=new ArrayList<>(chartsMap.keySet());
    Collections.sort(chartNames,PairUtils.CURRENCY_COMPARATOR);
    if (getActivity() != null) {
      isUpdating=true;
      getActivity().invalidateOptionsMenu();
    }
    for (    String pair : chartNames) {
      chartsUpdater.queueChart(chartsMap.get(pair),pair);
    }
  }
}",0.9742268041237112
146464,"@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
  ViewGroup viewGroup;
  if (getResources().getConfiguration().screenWidthDp >= 350) {
    viewGroup=(ViewGroup)buttonView.getParent().getParent().getParent();
  }
 else {
    viewGroup=(ViewGroup)buttonView.getParent();
  }
  StockChartView stockChartView=(StockChartView)viewGroup.findViewById(R.id.stockChartView);
  IndicatorManager iManager=stockChartView.getIndicatorManager();
  SeriesBase priceSeries=stockChartView.findSeriesByName(PRICE_SERIES_NAME);
  if (priceSeries != null) {
    if (isChecked) {
      onIndicatorEnabled(stockChartView,buttonView,priceSeries);
    }
 else {
      onIndicatorDisabled(stockChartView,buttonView);
    }
    stockChartView.recalcIndicators();
    stockChartView.recalc();
    stockChartView.invalidate();
  }
 else {
    SwitchCompat sw=(SwitchCompat)buttonView;
    sw.setChecked(!isChecked);
  }
}","@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
  ViewGroup viewGroup;
  if (getResources().getConfiguration().screenWidthDp >= 350) {
    viewGroup=(ViewGroup)buttonView.getParent().getParent().getParent();
  }
 else {
    viewGroup=(ViewGroup)buttonView.getParent();
  }
  StockChartView stockChartView=(StockChartView)viewGroup.findViewById(R.id.stockChartView);
  SeriesBase priceSeries=stockChartView.findSeriesByName(PRICE_SERIES_NAME);
  if (priceSeries != null) {
    if (isChecked) {
      onIndicatorEnabled(stockChartView,buttonView,priceSeries);
    }
 else {
      onIndicatorDisabled(stockChartView,buttonView);
    }
    stockChartView.recalcIndicators();
    stockChartView.recalc();
    stockChartView.invalidate();
  }
 else {
    SwitchCompat sw=(SwitchCompat)buttonView;
    sw.setChecked(!isChecked);
  }
}",0.9632107023411371
146465,"private void updateChart(@NonNull View chartView,@NonNull final String pair,@NonNull final ChartData data){
  StockChartView stockChartView=(StockChartView)chartView.findViewById(R.id.stockChartView);
  View tradeButton=chartView.findViewById(R.id.chart_trade_button);
  TextView namePriceView=(TextView)chartView.findViewById(R.id.chart_name_price);
  if (data.last != null) {
    tradeButton.setEnabled(true);
    tradeButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        mainNavigator.openTradingSection(pair,new BigDecimal(data.last));
      }
    }
);
    namePriceView.setText(String.format(""String_Node_Str"",pair,data.last));
  }
 else {
    tradeButton.setEnabled(false);
    tradeButton.setOnClickListener(null);
    namePriceView.setText(String.format(""String_Node_Str"",pair,""String_Node_Str""));
  }
  stockChartView.reset();
  stockChartView.getCrosshair().setAuto(true);
  final StockSeries priceSeries=new StockSeries();
  priceSeries.setViewType(StockSeries.ViewType.CANDLESTICK);
  priceSeries.setName(PRICE_SERIES_NAME);
  Appearance riseAppearance=priceSeries.getFallAppearance();
  riseAppearance.setFillColors(RISING_FILL_COLOR);
  riseAppearance.setOutlineColor(STICK_COLOR);
  Appearance fallAppearance=priceSeries.getRiseAppearance();
  fallAppearance.setFillColors(FALLING_FILL_COLOR);
  fallAppearance.setOutlineColor(STICK_COLOR);
  final BarSeries volumeSeries=new BarSeries();
  volumeSeries.setName(VOLUME_SERIES_NAME);
  volumeSeries.setYAxisSide(Axis.Side.LEFT);
  volumeSeries.getAppearance().setAllColors(VOLUME_BAR_COLOR);
  Area area=stockChartView.addArea();
  area.getAppearance().setOutlineColor(Color.TRANSPARENT);
  TypedValue a=new TypedValue();
  getActivity().getTheme().resolveAttribute(android.R.attr.windowBackground,a,true);
  if (a.type >= TypedValue.TYPE_FIRST_COLOR_INT && a.type <= TypedValue.TYPE_LAST_COLOR_INT) {
    int color=a.data;
    area.getAppearance().setPrimaryFillColor(color);
  }
  for (  HistoryItem historyItem : data.history) {
    priceSeries.addPoint(historyItem.open,historyItem.high,historyItem.low,historyItem.close);
    volumeSeries.addPoint(0,historyItem.volume);
  }
  area.getSeries().add(volumeSeries);
  area.getSeries().add(priceSeries);
  Axis.ILabelFormatProvider bottomLfp=new Axis.ILabelFormatProvider(){
    @Override public String getAxisLabel(    Axis axis,    double v){
      int index=priceSeries.convertToArrayIndex(v);
      if (index < 0)       index=0;
      if (index >= 0) {
        if (index >= priceSeries.getPointCount())         index=priceSeries.getPointCount() - 1;
        return data.history.get(index).time.replace(""String_Node_Str"",""String_Node_Str"");
      }
      return null;
    }
  }
;
  Crosshair.ILabelFormatProvider dp=new Crosshair.ILabelFormatProvider(){
    @Override public String getLabel(    Crosshair crosshair,    Plot plot,    double v,    double v2){
      int index=priceSeries.convertToArrayIndex(v);
      if (index < 0)       index=0;
      if (index >= 0) {
        if (index >= priceSeries.getPointCount())         index=priceSeries.getPointCount() - 1;
        return data.history.get(index).time.replace(""String_Node_Str"",""String_Node_Str"") + String.format(""String_Node_Str"",priceText) + PRICE_DECIMAL_FORMAT.format(v2)+ String.format(""String_Node_Str"",volumeText)+ String.valueOf((int)(data.history.get(index).volume + 0.5f));
      }
      return null;
    }
  }
;
  stockChartView.getCrosshair().setLabelFormatProvider(dp);
  area.getRightAxis().setLabelFormatProvider(new Axis.ILabelFormatProvider(){
    @Override public String getAxisLabel(    Axis axis,    double v){
      return PRICE_DECIMAL_FORMAT.format(v);
    }
  }
);
  area.getBottomAxis().setLabelFormatProvider(bottomLfp);
  area.getLeftAxis().setVisible(false);
  Activity activity=getActivity();
  if (activity == null) {
    return;
  }
  Resources resources=getResources();
  float axisFontSize=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,13,resources.getDisplayMetrics());
  area.getBottomAxis().setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,15,resources.getDisplayMetrics()));
  area.getRightAxis().setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,42,resources.getDisplayMetrics()));
  area.getBottomAxis().getAppearance().getFont().setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,12,resources.getDisplayMetrics()));
  area.getRightAxis().getAppearance().getFont().setSize(axisFontSize);
  stockChartView.getCrosshair().getAppearance().getFont().setSize(axisFontSize);
  stockChartView.invalidate();
}","private void updateChart(@NonNull View chartView,@NonNull final String pair,@NonNull final ChartData data){
  StockChartView stockChartView=(StockChartView)chartView.findViewById(R.id.stockChartView);
  View tradeButton=chartView.findViewById(R.id.chart_trade_button);
  TextView namePriceView=(TextView)chartView.findViewById(R.id.chart_name_price);
  if (data.last != null) {
    tradeButton.setEnabled(true);
    tradeButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        mainNavigator.openTradingSection(pair,new BigDecimal(data.last));
      }
    }
);
    namePriceView.setText(String.format(""String_Node_Str"",pair,data.last));
  }
 else {
    tradeButton.setEnabled(false);
    tradeButton.setOnClickListener(null);
    namePriceView.setText(String.format(""String_Node_Str"",pair,""String_Node_Str""));
  }
  stockChartView.reset();
  stockChartView.getCrosshair().setAuto(true);
  final StockSeries priceSeries=new StockSeries();
  priceSeries.setViewType(StockSeries.ViewType.CANDLESTICK);
  priceSeries.setName(PRICE_SERIES_NAME);
  Appearance riseAppearance=priceSeries.getFallAppearance();
  riseAppearance.setFillColors(RISING_FILL_COLOR);
  riseAppearance.setOutlineColor(STICK_COLOR);
  Appearance fallAppearance=priceSeries.getRiseAppearance();
  fallAppearance.setFillColors(FALLING_FILL_COLOR);
  fallAppearance.setOutlineColor(STICK_COLOR);
  final BarSeries volumeSeries=new BarSeries();
  volumeSeries.setName(VOLUME_SERIES_NAME);
  volumeSeries.setYAxisSide(Axis.Side.LEFT);
  volumeSeries.getAppearance().setAllColors(VOLUME_BAR_COLOR);
  Area area=stockChartView.addArea();
  area.getAppearance().setOutlineColor(Color.TRANSPARENT);
  TypedValue a=new TypedValue();
  getActivity().getTheme().resolveAttribute(android.R.attr.windowBackground,a,true);
  if (a.type >= TypedValue.TYPE_FIRST_COLOR_INT && a.type <= TypedValue.TYPE_LAST_COLOR_INT) {
    int color=a.data;
    area.getAppearance().setPrimaryFillColor(color);
  }
  for (  HistoryItem historyItem : data.history) {
    priceSeries.addPoint(historyItem.open,historyItem.high,historyItem.low,historyItem.close);
    volumeSeries.addPoint(0,historyItem.volume);
  }
  area.getSeries().add(volumeSeries);
  area.getSeries().add(priceSeries);
  Axis.ILabelFormatProvider bottomLfp=new Axis.ILabelFormatProvider(){
    @Override public String getAxisLabel(    Axis axis,    double v){
      int index=priceSeries.convertToArrayIndex(v);
      if (index < 0) {
        index=0;
      }
      if (index >= 0) {
        if (index >= priceSeries.getPointCount()) {
          index=priceSeries.getPointCount() - 1;
        }
        return data.history.get(index).time.replace(""String_Node_Str"",""String_Node_Str"");
      }
      return null;
    }
  }
;
  Crosshair.ILabelFormatProvider dp=new Crosshair.ILabelFormatProvider(){
    @Override public String getLabel(    Crosshair crosshair,    Plot plot,    double v,    double v2){
      int index=priceSeries.convertToArrayIndex(v);
      if (index < 0) {
        index=0;
      }
      if (index >= 0) {
        if (index >= priceSeries.getPointCount()) {
          index=priceSeries.getPointCount() - 1;
        }
        return data.history.get(index).time.replace(""String_Node_Str"",""String_Node_Str"") + String.format(""String_Node_Str"",priceText) + PRICE_DECIMAL_FORMAT.format(v2)+ String.format(""String_Node_Str"",volumeText)+ String.valueOf((int)(data.history.get(index).volume + 0.5f));
      }
      return null;
    }
  }
;
  stockChartView.getCrosshair().setLabelFormatProvider(dp);
  area.getRightAxis().setLabelFormatProvider(new Axis.ILabelFormatProvider(){
    @Override public String getAxisLabel(    Axis axis,    double v){
      return PRICE_DECIMAL_FORMAT.format(v);
    }
  }
);
  area.getBottomAxis().setLabelFormatProvider(bottomLfp);
  area.getLeftAxis().setVisible(false);
  Activity activity=getActivity();
  if (activity == null) {
    return;
  }
  Resources resources=getResources();
  float axisFontSize=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,13,resources.getDisplayMetrics());
  area.getBottomAxis().setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,15,resources.getDisplayMetrics()));
  area.getRightAxis().setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,42,resources.getDisplayMetrics()));
  area.getBottomAxis().getAppearance().getFont().setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,12,resources.getDisplayMetrics()));
  area.getRightAxis().getAppearance().getFont().setSize(axisFontSize);
  stockChartView.getCrosshair().getAppearance().getFont().setSize(axisFontSize);
  stockChartView.invalidate();
}",0.9944025834230356
146466,"@NonNull private String getChartHtml(@NonNull String tradingViewSymbol){
  return String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",tradingViewSymbol);
}","@NonNull private String getChartHtml(@NonNull String tradingViewSymbol){
  return String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",tradingViewSymbol);
}",0.983170947741364
146467,"@Override public void createChartViews(@NonNull View rootView){
  LinearLayout chartsContainer=(LinearLayout)rootView.findViewById(R.id.ChartsContainer);
  chartsContainer.removeAllViews();
  chartsMap=new HashMap<>();
  List<String> pairs=appPreferences.getChartsToDisplay();
  LinearLayout.LayoutParams lp=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
  lp.gravity=Gravity.CENTER;
  TextView noCharts=new TextView(getActivity());
  noCharts.setLayoutParams(lp);
  noCharts.setGravity(Gravity.CENTER);
  noCharts.setText(getString(R.string.no_charts_text));
  noCharts.setTypeface(Typeface.DEFAULT_BOLD);
  if (pairs.isEmpty()) {
    chartsContainer.addView(noCharts);
  }
  for (  String pair : pairs) {
    View chartView=LayoutInflater.from(getActivity()).inflate(R.layout.chart_item,chartsContainer,false);
    TextView namePriceView=(TextView)chartView.findViewById(R.id.chart_name_price);
    namePriceView.setText(String.format(""String_Node_Str"",pair));
    View tradeButton=chartView.findViewById(R.id.chart_trade_button);
    tradeButton.setEnabled(false);
    tradeButton.setOnClickListener(null);
    chartsContainer.addView(chartView);
    chartsMap.put(pair,chartView);
  }
  CompoundButton.OnCheckedChangeListener indicatorChangeStateListener=new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      ViewGroup viewGroup;
      if (getResources().getConfiguration().screenWidthDp >= 350) {
        viewGroup=(ViewGroup)buttonView.getParent().getParent().getParent();
      }
 else {
        viewGroup=(ViewGroup)buttonView.getParent();
      }
      StockChartView stockChartView=(StockChartView)viewGroup.findViewById(R.id.stockChartView);
      IndicatorManager iManager=stockChartView.getIndicatorManager();
      SeriesBase priceSeries=stockChartView.findSeriesByName(PRICE_SERIES_NAME);
      if (priceSeries != null) {
        if (isChecked) {
          onIndicatorEnabled(stockChartView,buttonView,priceSeries);
        }
 else {
          onIndicatorDisabled(stockChartView,buttonView);
        }
        stockChartView.recalcIndicators();
        stockChartView.recalc();
        stockChartView.invalidate();
      }
 else {
        SwitchCompat sw=(SwitchCompat)buttonView;
        sw.setChecked(!isChecked);
      }
    }
  }
;
  for (  String pair : chartsMap.keySet()) {
    View chartView=chartsMap.get(pair);
    ((SwitchCompat)chartView.findViewById(R.id.enableEMAIndicator)).setOnCheckedChangeListener(indicatorChangeStateListener);
    ((SwitchCompat)chartView.findViewById(R.id.enableRSIIndicator)).setOnCheckedChangeListener(indicatorChangeStateListener);
    ((SwitchCompat)chartView.findViewById(R.id.enableSMAIndicator)).setOnCheckedChangeListener(indicatorChangeStateListener);
    ((SwitchCompat)chartView.findViewById(R.id.enableMACDIndicator)).setOnCheckedChangeListener(indicatorChangeStateListener);
  }
}","@Override public void createChartViews(@NonNull View rootView){
  LinearLayout chartsContainer=(LinearLayout)rootView.findViewById(R.id.ChartsContainer);
  chartsContainer.removeAllViews();
  chartsMap=new HashMap<>();
  List<String> pairs=appPreferences.getChartsToDisplay();
  LinearLayout.LayoutParams lp=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
  lp.gravity=Gravity.CENTER;
  TextView noCharts=new TextView(getActivity());
  noCharts.setLayoutParams(lp);
  noCharts.setGravity(Gravity.CENTER);
  noCharts.setText(getString(R.string.no_charts_text));
  noCharts.setTypeface(Typeface.DEFAULT_BOLD);
  if (pairs.isEmpty()) {
    chartsContainer.addView(noCharts);
  }
  for (  String pair : pairs) {
    View chartView=LayoutInflater.from(getActivity()).inflate(R.layout.chart_item,chartsContainer,false);
    TextView namePriceView=(TextView)chartView.findViewById(R.id.chart_name_price);
    namePriceView.setText(String.format(""String_Node_Str"",pair));
    View tradeButton=chartView.findViewById(R.id.chart_trade_button);
    tradeButton.setEnabled(false);
    tradeButton.setOnClickListener(null);
    chartsContainer.addView(chartView);
    chartsMap.put(pair,chartView);
  }
  CompoundButton.OnCheckedChangeListener indicatorChangeStateListener=new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      ViewGroup viewGroup;
      if (getResources().getConfiguration().screenWidthDp >= 350) {
        viewGroup=(ViewGroup)buttonView.getParent().getParent().getParent();
      }
 else {
        viewGroup=(ViewGroup)buttonView.getParent();
      }
      StockChartView stockChartView=(StockChartView)viewGroup.findViewById(R.id.stockChartView);
      SeriesBase priceSeries=stockChartView.findSeriesByName(PRICE_SERIES_NAME);
      if (priceSeries != null) {
        if (isChecked) {
          onIndicatorEnabled(stockChartView,buttonView,priceSeries);
        }
 else {
          onIndicatorDisabled(stockChartView,buttonView);
        }
        stockChartView.recalcIndicators();
        stockChartView.recalc();
        stockChartView.invalidate();
      }
 else {
        SwitchCompat sw=(SwitchCompat)buttonView;
        sw.setChecked(!isChecked);
      }
    }
  }
;
  for (  String pair : chartsMap.keySet()) {
    View chartView=chartsMap.get(pair);
    ((SwitchCompat)chartView.findViewById(R.id.enableEMAIndicator)).setOnCheckedChangeListener(indicatorChangeStateListener);
    ((SwitchCompat)chartView.findViewById(R.id.enableRSIIndicator)).setOnCheckedChangeListener(indicatorChangeStateListener);
    ((SwitchCompat)chartView.findViewById(R.id.enableSMAIndicator)).setOnCheckedChangeListener(indicatorChangeStateListener);
    ((SwitchCompat)chartView.findViewById(R.id.enableMACDIndicator)).setOnCheckedChangeListener(indicatorChangeStateListener);
  }
}",0.9881876476544044
146468,"@Nullable @WorkerThread private String tryGetPriceFromApi(@NonNull String pair){
  Api api=BtcEApplication.get(getActivity()).getApi();
  CallResult<List<Ticker>> callResult=api.getPairInfo(Collections.singleton(pair));
  if (callResult.isSuccess()) {
    return callResult.getPayload().get(0).getLast().toPlainString();
  }
  return null;
}","@Nullable @WorkerThread private String tryGetPriceFromApi(@NonNull String pair){
  Context context=getActivity();
  if (context != null) {
    Api api=BtcEApplication.get(context).getApi();
    CallResult<List<Ticker>> callResult=api.getPairInfo(Collections.singleton(pair));
    if (callResult.isSuccess()) {
      return callResult.getPayload().get(0).getLast().toPlainString();
    }
  }
  return null;
}",0.8716577540106952
146469,"@Override protected void onPostExecute(Map<String,Status> statuses){
  AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(appContext);
  for (  int widgetId : pairWidgets.keySet()) {
    RemoteViews views=new RemoteViews(appContext.getPackageName(),R.layout.appwidget_layout);
    Status status=statuses.get(PairUtils.localToServer(pairWidgets.get(widgetId)));
    if (status == null) {
      continue;
    }
    double price=status.ticker.getLast();
    String priceString;
    if (price > 1) {
      priceString=new DecimalFormat(""String_Node_Str"").format(price);
    }
 else {
      priceString=String.valueOf(price);
    }
    views.setTextViewText(R.id.widgetCurrencyValue,priceString);
    views.setTextViewText(R.id.widgetPair,pairWidgets.get(widgetId));
    int colorValue=status.color;
    views.setTextColor(R.id.widgetCurrencyValue,colorValue);
    Intent intent=new Intent(AppWidgetManager.ACTION_APPWIDGET_UPDATE);
    intent.setClass(appContext,WidgetProvider.class);
    Bundle bundle=new Bundle();
    bundle.putIntArray(AppWidgetManager.EXTRA_APPWIDGET_IDS,appWidgetManager.getAppWidgetIds(new ComponentName(appContext,WidgetProvider.class)));
    intent.putExtras(bundle);
    PendingIntent pi=PendingIntent.getBroadcast(appContext,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.widgetContainer,pi);
    SimpleDateFormat df=new SimpleDateFormat(""String_Node_Str"",Locale.US);
    Calendar calendar=Calendar.getInstance();
    views.setTextViewText(R.id.widgetDate,df.format(calendar.getTime()));
    appWidgetManager.updateAppWidget(widgetId,views);
  }
}","@Override protected void onPostExecute(Map<String,Status> statuses){
  AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(appContext);
  for (  int widgetId : pairWidgets.keySet()) {
    RemoteViews views=new RemoteViews(appContext.getPackageName(),R.layout.appwidget_layout);
    Status status=statuses.get(pairWidgets.get(widgetId));
    if (status == null) {
      continue;
    }
    double price=status.ticker.getLast();
    String priceString;
    if (price > 1) {
      priceString=new DecimalFormat(""String_Node_Str"").format(price);
    }
 else {
      priceString=String.valueOf(price);
    }
    views.setTextViewText(R.id.widgetCurrencyValue,priceString);
    views.setTextViewText(R.id.widgetPair,pairWidgets.get(widgetId));
    int colorValue=status.color;
    views.setTextColor(R.id.widgetCurrencyValue,colorValue);
    Intent intent=new Intent(AppWidgetManager.ACTION_APPWIDGET_UPDATE);
    intent.setClass(appContext,WidgetProvider.class);
    Bundle bundle=new Bundle();
    bundle.putIntArray(AppWidgetManager.EXTRA_APPWIDGET_IDS,appWidgetManager.getAppWidgetIds(new ComponentName(appContext,WidgetProvider.class)));
    intent.putExtras(bundle);
    PendingIntent pi=PendingIntent.getBroadcast(appContext,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);
    views.setOnClickPendingIntent(R.id.widgetContainer,pi);
    SimpleDateFormat df=new SimpleDateFormat(""String_Node_Str"",Locale.US);
    Calendar calendar=Calendar.getInstance();
    views.setTextViewText(R.id.widgetDate,df.format(calendar.getTime()));
    appWidgetManager.updateAppWidget(widgetId,views);
  }
}",0.9922287845819088
146470,"@Override protected void onPostExecute(CallResult<AccountInfo> result){
  String notificationText;
  if (result.isSuccess()) {
    notificationText=getString(R.string.FundsInfoUpdatedtext);
    if (isVisible()) {
      refreshFundsView(result.getPayload().getFunds());
    }
  }
 else {
    notificationText=result.getError();
  }
  activityCallback.makeNotification(ConstantHolder.ACCOUNT_INFO_NOTIF_ID,notificationText);
}","@Override protected void onPostExecute(CallResult<AccountInfo> result){
  String notificationText;
  if (result.isSuccess()) {
    notificationText=getString(R.string.FundsInfoUpdatedtext);
    if (isVisible()) {
      refreshFundsView(result.getPayload().getFunds());
    }
  }
 else {
    notificationText=result.getError();
  }
  if (activityCallback != null) {
    activityCallback.makeNotification(ConstantHolder.ACCOUNT_INFO_NOTIF_ID,notificationText);
  }
}",0.954954954954955
146471,"@Override public void onSaveInstanceState(Bundle outState){
  outState.putInt(""String_Node_Str"",mPairsSpinner.getSelectedItemPosition());
}","@Override public void onSaveInstanceState(Bundle outState){
  if (mPairsSpinner != null) {
    outState.putInt(""String_Node_Str"",mPairsSpinner.getSelectedItemPosition());
  }
}",0.8825396825396825
146472,"@Override public void handleMessage(Message msg){
  if (msg.what == MESSAGE_DOWNLOAD) {
    @SuppressWarnings(""String_Node_Str"") StockChartView token=(StockChartView)msg.obj;
    handleRequest(token);
  }
}","@Override public boolean handleMessage(Message msg){
  if (msg.what == MESSAGE_DOWNLOAD) {
    @SuppressWarnings(""String_Node_Str"") StockChartView token=(StockChartView)msg.obj;
    handleRequest(token);
  }
  return true;
}",0.9395348837209302
146473,"/** 
 * Starts fetching charts data via HandlerThread and Messages
 */
private void updateCharts(){
  ConnectivityManager connectivityManager=(ConnectivityManager)getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();
  if (networkInfo == null || !networkInfo.isConnected()) {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  if (mCharts.size() > 0) {
    Set<String> chartNames=mCharts.keySet();
    String[] chartsNamesSorted=chartNames.toArray(new String[chartNames.size()]);
    Arrays.sort(chartsNamesSorted);
    if (mRefreshItem != null) {
      mRefreshItem.setActionView(R.layout.progress_bar_action_view);
      mRefreshItem.expandActionView();
    }
    for (    String x : chartsNamesSorted) {
      String pair=x.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase(Locale.US);
      mChartsUpdater.queueChart((StockChartView)mCharts.get(x).findViewById(R.id.StockChartView),pair);
    }
  }
}","/** 
 * Starts fetching charts data via HandlerThread and Messages
 */
private void updateCharts(){
  ConnectivityManager connectivityManager=(ConnectivityManager)getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();
  if (networkInfo == null || !networkInfo.isConnected()) {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  if (mCharts.size() > 0) {
    Set<String> chartNames=mCharts.keySet();
    String[] chartsNamesSorted=chartNames.toArray(new String[chartNames.size()]);
    Arrays.sort(chartsNamesSorted);
    if (mRefreshItem != null) {
      mRefreshItem.setActionView(R.layout.progress_bar_action_view);
      mRefreshItem.expandActionView();
    }
    for (    String x : chartsNamesSorted) {
      String pair=x.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase(Locale.US);
      mChartsUpdater.queueChart((StockChartView)mCharts.get(x).findViewById(R.id.stockChartView),pair);
    }
  }
}",0.9990338164251208
146474,"@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
  ViewGroup viewGroup;
  if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
    viewGroup=(ViewGroup)buttonView.getParent().getParent().getParent();
  }
 else {
    viewGroup=(ViewGroup)buttonView.getParent();
  }
  StockChartView stockChartView=(StockChartView)viewGroup.findViewById(R.id.StockChartView);
  IndicatorManager iManager=stockChartView.getIndicatorManager();
  if (stockChartView.findSeriesByName(""String_Node_Str"") != null) {
    if (isChecked) {
switch (buttonView.getId()) {
case R.id.enableEMAIndicator:
        iManager.addEma(stockChartView.findSeriesByName(""String_Node_Str""),0);
      break;
case R.id.enableMACDIndicator:
    iManager.addMacd(stockChartView.findSeriesByName(""String_Node_Str""),0);
  break;
case R.id.enableRSIIndicator:
iManager.addRsi(stockChartView.findSeriesByName(""String_Node_Str""),0);
break;
case R.id.enableSMAIndicator:
iManager.addSma(stockChartView.findSeriesByName(""String_Node_Str""),0);
break;
default :
break;
}
stockChartView.recalcIndicators();
stockChartView.recalc();
stockChartView.invalidate();
}
 else {
List<AbstractIndicator> indicators=stockChartView.getIndicatorManager().getIndicators();
for (AbstractIndicator x : indicators) {
switch (buttonView.getId()) {
case R.id.enableEMAIndicator:
if (x instanceof EmaIndicator) {
stockChartView.getIndicatorManager().removeIndicator(x);
}
break;
case R.id.enableMACDIndicator:
if (x instanceof MacdIndicator) {
stockChartView.getIndicatorManager().removeIndicator(x);
}
break;
case R.id.enableRSIIndicator:
if (x instanceof RsiIndicator) {
stockChartView.getIndicatorManager().removeIndicator(x);
}
break;
case R.id.enableSMAIndicator:
if (x instanceof SmaIndicator) {
stockChartView.getIndicatorManager().removeIndicator(x);
}
break;
default :
break;
}
}
stockChartView.recalc();
stockChartView.invalidate();
}
}
 else {
SwitchCompat sw=(SwitchCompat)buttonView;
sw.setChecked(!isChecked);
}
}","@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
  ViewGroup viewGroup;
  if (getResources().getConfiguration().screenWidthDp >= 350) {
    viewGroup=(ViewGroup)buttonView.getParent().getParent().getParent();
  }
 else {
    viewGroup=(ViewGroup)buttonView.getParent();
  }
  StockChartView stockChartView=(StockChartView)viewGroup.findViewById(R.id.stockChartView);
  IndicatorManager iManager=stockChartView.getIndicatorManager();
  if (stockChartView.findSeriesByName(""String_Node_Str"") != null) {
    if (isChecked) {
switch (buttonView.getId()) {
case R.id.enableEMAIndicator:
        iManager.addEma(stockChartView.findSeriesByName(""String_Node_Str""),0);
      break;
case R.id.enableMACDIndicator:
    iManager.addMacd(stockChartView.findSeriesByName(""String_Node_Str""),0);
  break;
case R.id.enableRSIIndicator:
iManager.addRsi(stockChartView.findSeriesByName(""String_Node_Str""),0);
break;
case R.id.enableSMAIndicator:
iManager.addSma(stockChartView.findSeriesByName(""String_Node_Str""),0);
break;
default :
break;
}
stockChartView.recalcIndicators();
stockChartView.recalc();
stockChartView.invalidate();
}
 else {
Iterator<AbstractIndicator> iterator=stockChartView.getIndicatorManager().getIndicators().iterator();
while (iterator.hasNext()) {
AbstractIndicator x=iterator.next();
switch (buttonView.getId()) {
case R.id.enableEMAIndicator:
if (x instanceof EmaIndicator) {
iterator.remove();
stockChartView.getIndicatorManager().removeIndicator(x);
}
break;
case R.id.enableMACDIndicator:
if (x instanceof MacdIndicator) {
iterator.remove();
stockChartView.getIndicatorManager().removeIndicator(x);
}
break;
case R.id.enableRSIIndicator:
if (x instanceof RsiIndicator) {
iterator.remove();
stockChartView.getIndicatorManager().removeIndicator(x);
}
break;
case R.id.enableSMAIndicator:
if (x instanceof SmaIndicator) {
iterator.remove();
stockChartView.getIndicatorManager().removeIndicator(x);
}
break;
default :
break;
}
}
stockChartView.recalc();
stockChartView.invalidate();
}
}
 else {
SwitchCompat sw=(SwitchCompat)buttonView;
sw.setChecked(!isChecked);
}
}",0.9381343644272596
146475,"/** 
 * Creates views for charts
 * @param inflater Inflater to be used for creating views
 */
private void refreshChartViews(LayoutInflater inflater){
  LinearLayout chartsContainer=(LinearLayout)mRootView.findViewById(R.id.ChartsContainer);
  chartsContainer.removeAllViews();
  mCharts=new HashMap<>();
  SharedPreferences sh=PreferenceManager.getDefaultSharedPreferences(getActivity());
  Set<String> hashSet=sh.getStringSet(""String_Node_Str"",new HashSet<String>());
  LinearLayout.LayoutParams lp=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
  lp.gravity=Gravity.CENTER;
  TextView noCharts=new TextView(getActivity());
  noCharts.setLayoutParams(lp);
  noCharts.setGravity(Gravity.CENTER);
  noCharts.setText(""String_Node_Str"");
  noCharts.setTypeface(Typeface.DEFAULT_BOLD);
  if (hashSet.size() == 0) {
    chartsContainer.addView(noCharts);
  }
  String[] pairs=hashSet.toArray(new String[hashSet.size()]);
  Arrays.sort(pairs);
  for (  String x : pairs) {
    View element=inflater.inflate(R.layout.chart_item,chartsContainer,false);
    chartsContainer.addView(element);
    mCharts.put(x,element);
  }
  CompoundButton.OnCheckedChangeListener IndicatorListener=new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      ViewGroup viewGroup;
      if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
        viewGroup=(ViewGroup)buttonView.getParent().getParent().getParent();
      }
 else {
        viewGroup=(ViewGroup)buttonView.getParent();
      }
      StockChartView stockChartView=(StockChartView)viewGroup.findViewById(R.id.StockChartView);
      IndicatorManager iManager=stockChartView.getIndicatorManager();
      if (stockChartView.findSeriesByName(""String_Node_Str"") != null) {
        if (isChecked) {
switch (buttonView.getId()) {
case R.id.enableEMAIndicator:
            iManager.addEma(stockChartView.findSeriesByName(""String_Node_Str""),0);
          break;
case R.id.enableMACDIndicator:
        iManager.addMacd(stockChartView.findSeriesByName(""String_Node_Str""),0);
      break;
case R.id.enableRSIIndicator:
    iManager.addRsi(stockChartView.findSeriesByName(""String_Node_Str""),0);
  break;
case R.id.enableSMAIndicator:
iManager.addSma(stockChartView.findSeriesByName(""String_Node_Str""),0);
break;
default :
break;
}
stockChartView.recalcIndicators();
stockChartView.recalc();
stockChartView.invalidate();
}
 else {
List<AbstractIndicator> indicators=stockChartView.getIndicatorManager().getIndicators();
for (AbstractIndicator x : indicators) {
switch (buttonView.getId()) {
case R.id.enableEMAIndicator:
if (x instanceof EmaIndicator) {
stockChartView.getIndicatorManager().removeIndicator(x);
}
break;
case R.id.enableMACDIndicator:
if (x instanceof MacdIndicator) {
stockChartView.getIndicatorManager().removeIndicator(x);
}
break;
case R.id.enableRSIIndicator:
if (x instanceof RsiIndicator) {
stockChartView.getIndicatorManager().removeIndicator(x);
}
break;
case R.id.enableSMAIndicator:
if (x instanceof SmaIndicator) {
stockChartView.getIndicatorManager().removeIndicator(x);
}
break;
default :
break;
}
}
stockChartView.recalc();
stockChartView.invalidate();
}
}
 else {
SwitchCompat sw=(SwitchCompat)buttonView;
sw.setChecked(!isChecked);
}
}
}
;
for (String x : mCharts.keySet()) {
((SwitchCompat)mCharts.get(x).findViewById(R.id.enableEMAIndicator)).setOnCheckedChangeListener(IndicatorListener);
((SwitchCompat)mCharts.get(x).findViewById(R.id.enableRSIIndicator)).setOnCheckedChangeListener(IndicatorListener);
((SwitchCompat)mCharts.get(x).findViewById(R.id.enableSMAIndicator)).setOnCheckedChangeListener(IndicatorListener);
((SwitchCompat)mCharts.get(x).findViewById(R.id.enableMACDIndicator)).setOnCheckedChangeListener(IndicatorListener);
}
}","/** 
 * Creates views for charts
 * @param inflater Inflater to be used for creating views
 */
private void refreshChartViews(LayoutInflater inflater){
  LinearLayout chartsContainer=(LinearLayout)mRootView.findViewById(R.id.ChartsContainer);
  chartsContainer.removeAllViews();
  mCharts=new HashMap<>();
  SharedPreferences sh=PreferenceManager.getDefaultSharedPreferences(getActivity());
  Set<String> hashSet=sh.getStringSet(""String_Node_Str"",new HashSet<String>());
  LinearLayout.LayoutParams lp=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
  lp.gravity=Gravity.CENTER;
  TextView noCharts=new TextView(getActivity());
  noCharts.setLayoutParams(lp);
  noCharts.setGravity(Gravity.CENTER);
  noCharts.setText(""String_Node_Str"");
  noCharts.setTypeface(Typeface.DEFAULT_BOLD);
  if (hashSet.size() == 0) {
    chartsContainer.addView(noCharts);
  }
  String[] pairs=hashSet.toArray(new String[hashSet.size()]);
  Arrays.sort(pairs);
  for (  String x : pairs) {
    View element=inflater.inflate(R.layout.chart_item,chartsContainer,false);
    chartsContainer.addView(element);
    mCharts.put(x,element);
  }
  CompoundButton.OnCheckedChangeListener indicatorChangeStateListener=new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      ViewGroup viewGroup;
      if (getResources().getConfiguration().screenWidthDp >= 350) {
        viewGroup=(ViewGroup)buttonView.getParent().getParent().getParent();
      }
 else {
        viewGroup=(ViewGroup)buttonView.getParent();
      }
      StockChartView stockChartView=(StockChartView)viewGroup.findViewById(R.id.stockChartView);
      IndicatorManager iManager=stockChartView.getIndicatorManager();
      if (stockChartView.findSeriesByName(""String_Node_Str"") != null) {
        if (isChecked) {
switch (buttonView.getId()) {
case R.id.enableEMAIndicator:
            iManager.addEma(stockChartView.findSeriesByName(""String_Node_Str""),0);
          break;
case R.id.enableMACDIndicator:
        iManager.addMacd(stockChartView.findSeriesByName(""String_Node_Str""),0);
      break;
case R.id.enableRSIIndicator:
    iManager.addRsi(stockChartView.findSeriesByName(""String_Node_Str""),0);
  break;
case R.id.enableSMAIndicator:
iManager.addSma(stockChartView.findSeriesByName(""String_Node_Str""),0);
break;
default :
break;
}
stockChartView.recalcIndicators();
stockChartView.recalc();
stockChartView.invalidate();
}
 else {
Iterator<AbstractIndicator> iterator=stockChartView.getIndicatorManager().getIndicators().iterator();
while (iterator.hasNext()) {
AbstractIndicator x=iterator.next();
switch (buttonView.getId()) {
case R.id.enableEMAIndicator:
if (x instanceof EmaIndicator) {
iterator.remove();
stockChartView.getIndicatorManager().removeIndicator(x);
}
break;
case R.id.enableMACDIndicator:
if (x instanceof MacdIndicator) {
iterator.remove();
stockChartView.getIndicatorManager().removeIndicator(x);
}
break;
case R.id.enableRSIIndicator:
if (x instanceof RsiIndicator) {
iterator.remove();
stockChartView.getIndicatorManager().removeIndicator(x);
}
break;
case R.id.enableSMAIndicator:
if (x instanceof SmaIndicator) {
iterator.remove();
stockChartView.getIndicatorManager().removeIndicator(x);
}
break;
default :
break;
}
}
stockChartView.recalc();
stockChartView.invalidate();
}
}
 else {
SwitchCompat sw=(SwitchCompat)buttonView;
sw.setChecked(!isChecked);
}
}
}
;
for (String x : mCharts.keySet()) {
((SwitchCompat)mCharts.get(x).findViewById(R.id.enableEMAIndicator)).setOnCheckedChangeListener(indicatorChangeStateListener);
((SwitchCompat)mCharts.get(x).findViewById(R.id.enableRSIIndicator)).setOnCheckedChangeListener(indicatorChangeStateListener);
((SwitchCompat)mCharts.get(x).findViewById(R.id.enableSMAIndicator)).setOnCheckedChangeListener(indicatorChangeStateListener);
((SwitchCompat)mCharts.get(x).findViewById(R.id.enableMACDIndicator)).setOnCheckedChangeListener(indicatorChangeStateListener);
}
}",0.949349501073639
146476,"void getCookies(){
  try {
    URL url=new URL(""String_Node_Str"");
    HttpsURLConnection connection=(HttpsURLConnection)url.openConnection();
    if (connection.getResponseCode() != HttpsURLConnection.HTTP_OK) {
      showError();
      return;
    }
    mCookies.addAll(connection.getHeaderFields().get(""String_Node_Str""));
    BufferedReader reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    Matcher matcher=pattern.matcher(reader.readLine());
    if (!matcher.find()) {
      showError();
      return;
    }
    reader.close();
    connection.disconnect();
    mCookies.add(matcher.group(1));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","void getCookies(){
  try {
    URL url=new URL(""String_Node_Str"");
    HttpsURLConnection connection=(HttpsURLConnection)url.openConnection();
    if (connection.getResponseCode() != HttpsURLConnection.HTTP_OK) {
      showError();
      return;
    }
    mCookies.addAll(connection.getHeaderFields().get(""String_Node_Str""));
    BufferedReader reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    StringBuilder stringBuilder=new StringBuilder();
    String line=""String_Node_Str"";
    while ((line=reader.readLine()) != null) {
      stringBuilder.append(line);
    }
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    Matcher matcher=pattern.matcher(stringBuilder.toString());
    if (!matcher.find()) {
      return;
    }
    reader.close();
    connection.disconnect();
    mCookies.add(matcher.group(1));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.8607594936708861
146477,"public void createHandler(){
  mHandler=new Handler(getLooper()){
    @Override public void handleMessage(    Message msg){
      if (msg.what == MESSAGE_DOWNLOAD) {
        @SuppressWarnings(""String_Node_Str"") StockChartView token=(StockChartView)msg.obj;
        handleRequest(token);
      }
    }
  }
;
}","public void createHandler(){
  mHandler=new Handler(getLooper(),new Handler.Callback(){
    @Override public boolean handleMessage(    Message msg){
      if (msg.what == MESSAGE_DOWNLOAD) {
        @SuppressWarnings(""String_Node_Str"") StockChartView token=(StockChartView)msg.obj;
        handleRequest(token);
      }
      return true;
    }
  }
);
}",0.9198184568835098
146478,"public void startFlipping(){
  mFrontCover=getChildAt(0);
  mBackCover=getChildAt(1);
  if (mFrontCover == null || mBackCover == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  int frontCoverHeight=mFrontCover.getHeight();
  mBackCover.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,frontCoverHeight));
  mFlipRightIn.setTarget(mFrontCover);
  mFlipRightOut.setTarget(mBackCover);
  mFlipLeftIn.setTarget(mBackCover);
  mFlipLeftOut.setTarget(mFrontCover);
  if (mFlipLeftIn == null || mFlipRightIn == null || mFlipLeftOut == null || mFlipRightOut == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (frontCoverShowing) {
    mFlipLeftIn.start();
    mFlipLeftOut.start();
  }
 else {
    mFlipRightIn.start();
    mFlipRightOut.start();
  }
}","public void startFlipping(){
  mFrontCover=getChildAt(0);
  mBackCover=getChildAt(1);
  if (mFrontCover == null || mBackCover == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  int frontCoverHeight=mFrontCover.getHeight();
  mBackCover.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,frontCoverHeight));
  if (mFlipLeftIn == null || mFlipRightIn == null || mFlipLeftOut == null || mFlipRightOut == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mFlipRightIn.setTarget(mFrontCover);
  mFlipRightOut.setTarget(mBackCover);
  mFlipLeftIn.setTarget(mBackCover);
  mFlipLeftOut.setTarget(mFrontCover);
  if (frontCoverShowing) {
    mFlipLeftIn.start();
    mFlipLeftOut.start();
  }
 else {
    mFlipRightIn.start();
    mFlipRightOut.start();
  }
}",0.8133333333333334
146479,"@Override public View getView(int position,View convertView,ViewGroup parent){
  FlippingView v;
  if (convertView == null) {
    LayoutInflater inflater=LayoutInflater.from(mContext);
    v=(FlippingView)inflater.inflate(R.layout.fragment_home_tickers_dashboard_item,parent,false);
    v.addAnimators(mLeftOut,mLeftIn,mRightOut,mRightIn);
    v.setOnLongClickListener(this);
  }
 else {
    v=(FlippingView)convertView;
  }
  Ticker ticker=mData.get(position);
  TextView pairFront=(TextView)v.findViewById(R.id.tickerPairFront);
  TextView last=(TextView)v.findViewById(R.id.tickerLastValue);
  TextView buy=(TextView)v.findViewById(R.id.tickerBuyValue);
  TextView sell=(TextView)v.findViewById(R.id.tickerSellValue);
  String pairValue=ticker.getPair().replace(""String_Node_Str"",""String_Node_Str"").toUpperCase(Locale.US);
  pairFront.setText(pairValue);
  last.setText(String.valueOf(ticker.getLast()));
  buy.setText(String.valueOf(ticker.getBuy()));
  sell.setText(String.valueOf(ticker.getSell()));
  Date updatedDate=new Date(ticker.getUpdated());
  last.setOnClickListener(this);
  buy.setOnClickListener(this);
  sell.setOnClickListener(this);
  last.setTag(pairValue);
  buy.setTag(pairValue);
  sell.setTag(pairValue);
  TextView highBack=(TextView)v.findViewById(R.id.tickerBackHighValue);
  TextView lowBack=(TextView)v.findViewById(R.id.tickerBackLowValue);
  TextView buyBack=(TextView)v.findViewById(R.id.tickerBackBuyValue);
  TextView sellBack=(TextView)v.findViewById(R.id.tickerBackSellValue);
  TextView updatedBack=(TextView)v.findViewById(R.id.tickerUpdated);
  highBack.setText(String.valueOf(ticker.getHigh()));
  lowBack.setText(String.valueOf(ticker.getLow()));
  buyBack.setText(String.valueOf(ticker.getBuy()));
  sellBack.setText(String.valueOf(ticker.getSell()));
  Ticker oldTicker=TickersStorage.loadPreviousData().get(ticker.getPair());
  if (oldTicker != null) {
    last.setTextColor(ticker.getLast() < oldTicker.getLast() ? Color.RED : Color.GREEN);
    buy.setTextColor(ticker.getBuy() < oldTicker.getBuy() ? Color.RED : Color.GREEN);
    sell.setTextColor(ticker.getSell() < oldTicker.getSell() ? Color.RED : Color.GREEN);
    highBack.setTextColor(ticker.getHigh() < oldTicker.getHigh() ? Color.RED : Color.GREEN);
    lowBack.setTextColor(ticker.getLow() < oldTicker.getLow() ? Color.RED : Color.GREEN);
    buyBack.setTextColor(ticker.getBuy() < oldTicker.getBuy() ? Color.RED : Color.GREEN);
    sellBack.setTextColor(ticker.getSell() < oldTicker.getSell() ? Color.RED : Color.GREEN);
  }
 else {
    last.setTextColor(Color.GREEN);
    buy.setTextColor(Color.GREEN);
    sell.setTextColor(Color.GREEN);
    highBack.setTextColor(Color.GREEN);
    lowBack.setTextColor(Color.GREEN);
    buyBack.setTextColor(Color.GREEN);
    sellBack.setTextColor(Color.GREEN);
  }
  return v;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  FlippingView v;
  if (convertView == null) {
    LayoutInflater inflater=LayoutInflater.from(mContext);
    v=(FlippingView)inflater.inflate(R.layout.fragment_home_tickers_dashboard_item,parent,false);
    v.addAnimators(mLeftOut,mLeftIn,mRightOut,mRightIn);
    v.setOnLongClickListener(this);
  }
 else {
    v=(FlippingView)convertView;
  }
  Ticker ticker=mData.get(position);
  TextView pairFront=(TextView)v.findViewById(R.id.tickerPairFront);
  TextView last=(TextView)v.findViewById(R.id.tickerLastValue);
  TextView buy=(TextView)v.findViewById(R.id.tickerBuyValue);
  TextView sell=(TextView)v.findViewById(R.id.tickerSellValue);
  String pairValue=ticker.getPair().replace(""String_Node_Str"",""String_Node_Str"").toUpperCase(Locale.US);
  pairFront.setText(pairValue);
  last.setText(String.valueOf(ticker.getLast()));
  buy.setText(String.valueOf(ticker.getBuy()));
  sell.setText(String.valueOf(ticker.getSell()));
  Date updatedDate=new Date(ticker.getUpdated() * 1000);
  last.setOnClickListener(this);
  buy.setOnClickListener(this);
  sell.setOnClickListener(this);
  last.setTag(pairValue);
  buy.setTag(pairValue);
  sell.setTag(pairValue);
  TextView highBack=(TextView)v.findViewById(R.id.tickerBackHighValue);
  TextView lowBack=(TextView)v.findViewById(R.id.tickerBackLowValue);
  TextView buyBack=(TextView)v.findViewById(R.id.tickerBackBuyValue);
  TextView sellBack=(TextView)v.findViewById(R.id.tickerBackSellValue);
  TextView updatedBack=(TextView)v.findViewById(R.id.tickerUpdated);
  highBack.setText(String.valueOf(ticker.getHigh()));
  lowBack.setText(String.valueOf(ticker.getLow()));
  buyBack.setText(String.valueOf(ticker.getBuy()));
  sellBack.setText(String.valueOf(ticker.getSell()));
  updatedBack.setText(format.format(updatedDate));
  Ticker oldTicker=TickersStorage.loadPreviousData().get(ticker.getPair());
  if (oldTicker != null) {
    last.setTextColor(ticker.getLast() < oldTicker.getLast() ? Color.RED : Color.GREEN);
    buy.setTextColor(ticker.getBuy() < oldTicker.getBuy() ? Color.RED : Color.GREEN);
    sell.setTextColor(ticker.getSell() < oldTicker.getSell() ? Color.RED : Color.GREEN);
    highBack.setTextColor(ticker.getHigh() < oldTicker.getHigh() ? Color.RED : Color.GREEN);
    lowBack.setTextColor(ticker.getLow() < oldTicker.getLow() ? Color.RED : Color.GREEN);
    buyBack.setTextColor(ticker.getBuy() < oldTicker.getBuy() ? Color.RED : Color.GREEN);
    sellBack.setTextColor(ticker.getSell() < oldTicker.getSell() ? Color.RED : Color.GREEN);
  }
 else {
    last.setTextColor(Color.GREEN);
    buy.setTextColor(Color.GREEN);
    sell.setTextColor(Color.GREEN);
    highBack.setTextColor(Color.GREEN);
    lowBack.setTextColor(Color.GREEN);
    buyBack.setTextColor(Color.GREEN);
    sellBack.setTextColor(Color.GREEN);
  }
  return v;
}",0.9898316970546984
146480,"public void queueChart(StockChartView token,String pair){
  requestMap.put(token,pair);
  mHandler.obtainMessage(MESSAGE_DOWNLOAD,token).sendToTarget();
}","public void queueChart(StockChartView token,String pair){
  if (mHandler == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  requestMap.put(token,pair);
  mHandler.obtainMessage(MESSAGE_DOWNLOAD,token).sendToTarget();
}",0.7837150127226463
146481,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  setHasOptionsMenu(true);
  mInflater=inflater;
  if (mRootView == null) {
    mRootView=inflater.inflate(R.layout.fragment_chart,container,false);
  }
  mChartsUpdater=new ChartsUpdater(new Handler());
  mChartsUpdater.setListener(new Listener<StockChartView>(){
    @Override public void onChartDownloaded(    StockChartView stockChartView){
      if (isVisible()) {
        stockChartView.invalidate();
      }
    }
  }
);
  mChartsUpdater.start();
  mChartsUpdater.getLooper();
  return mRootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  setHasOptionsMenu(true);
  mInflater=inflater;
  if (mRootView == null) {
    mRootView=inflater.inflate(R.layout.fragment_chart,container,false);
  }
  mChartsUpdater=new ChartsUpdater(new Handler());
  mChartsUpdater.setListener(new Listener<StockChartView>(){
    @Override public void onChartDownloaded(    StockChartView stockChartView){
      if (isVisible()) {
        stockChartView.invalidate();
      }
    }
  }
);
  mChartsUpdater.start();
  mChartsUpdater.createHandler();
  return mRootView;
}",0.985342019543974
146482,void onChartDownloaded(StockChartView token);,void onChartDownloaded(T token);,0.8051948051948052
146483,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  mTickersContainer=(FixedGridView)getView().findViewById(R.id.tickersContainer);
  mTickersContainer.setExpanded(true);
  final int dashboardSpacing=getResources().getDimensionPixelSize(R.dimen.dashboard_spacing);
  final int dahboardItemSize=getResources().getDimensionPixelSize(R.dimen.dashboard_item_size);
  mTickersContainer.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (mTickersDashboardAdapter.getNumColumns() == 0) {
        final int numColumns=(int)Math.floor(mTickersContainer.getWidth() / (dashboardSpacing + dahboardItemSize));
        if (numColumns > 0) {
          mTickersDashboardAdapter.setNumColumns(numColumns);
          mTickersContainer.setNumColumns(numColumns);
        }
      }
    }
  }
);
  mTickersDashboardAdapter=new TickersDashboardAdapter(getActivity(),this);
  updateStorageWithTickers();
  mTickersDashboardAdapter.update();
  mTickersContainer.setAdapter(mTickersDashboardAdapter);
  mTickersContainer.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      return event.getAction() == MotionEvent.ACTION_MOVE;
    }
  }
);
  mGetStatsReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (isVisible()) {
        mTickersDashboardAdapter.update();
      }
    }
  }
;
  LocalBroadcastManager.getInstance(getActivity().getApplicationContext()).registerReceiver(mGetStatsReceiver,new IntentFilter(""String_Node_Str""));
  View.OnClickListener tradeListener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      new RegisterTradeRequestTask().execute((v.getId() == R.id.BuyButton) ? ""String_Node_Str"" : ""String_Node_Str"");
    }
  }
;
  Button SellButton=(Button)getView().findViewById(R.id.SellButton);
  Button BuyButton=(Button)getView().findViewById(R.id.BuyButton);
  SellButton.setOnClickListener(tradeListener);
  BuyButton.setOnClickListener(tradeListener);
  Button UpdateAccountInfoButton=(Button)getView().findViewById(R.id.UpdateAccountInfoButton);
  UpdateAccountInfoButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      new UpdateFundsTask().execute();
    }
  }
);
  getActivity().sendBroadcast(new Intent(getActivity(),StartServiceReceiver.class));
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  mTickersContainer=(FixedGridView)getView().findViewById(R.id.tickersContainer);
  mTickersContainer.setExpanded(true);
  final int dashboardSpacing=getResources().getDimensionPixelSize(R.dimen.dashboard_spacing);
  final int dashboardItemSize=getResources().getDimensionPixelSize(R.dimen.dashboard_item_size);
  mTickersContainer.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (mTickersDashboardAdapter.getNumColumns() == 0) {
        final int numColumns=(int)Math.floor(mTickersContainer.getWidth() / (dashboardSpacing + dashboardItemSize));
        if (numColumns > 0) {
          mTickersDashboardAdapter.setNumColumns(numColumns);
          mTickersContainer.setNumColumns(numColumns);
        }
      }
    }
  }
);
  mTickersDashboardAdapter=new TickersDashboardAdapter(getActivity(),this);
  updateStorageWithTickers();
  mTickersDashboardAdapter.update();
  mTickersContainer.setAdapter(mTickersDashboardAdapter);
  TextView emptyView=(TextView)getView().findViewById(R.id.emptyView);
  mTickersContainer.setEmptyView(emptyView);
  mTickersContainer.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      return event.getAction() == MotionEvent.ACTION_MOVE;
    }
  }
);
  mGetStatsReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (isVisible()) {
        mTickersDashboardAdapter.update();
      }
    }
  }
;
  LocalBroadcastManager.getInstance(getActivity().getApplicationContext()).registerReceiver(mGetStatsReceiver,new IntentFilter(""String_Node_Str""));
  View.OnClickListener tradeListener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      new RegisterTradeRequestTask().execute((v.getId() == R.id.BuyButton) ? ""String_Node_Str"" : ""String_Node_Str"");
    }
  }
;
  Button SellButton=(Button)getView().findViewById(R.id.SellButton);
  Button BuyButton=(Button)getView().findViewById(R.id.BuyButton);
  SellButton.setOnClickListener(tradeListener);
  BuyButton.setOnClickListener(tradeListener);
  Button UpdateAccountInfoButton=(Button)getView().findViewById(R.id.UpdateAccountInfoButton);
  UpdateAccountInfoButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      new UpdateFundsTask().execute();
    }
  }
);
  getActivity().sendBroadcast(new Intent(getActivity(),StartServiceReceiver.class));
}",0.9768627450980392
146484,"@Override public void onGlobalLayout(){
  if (mTickersDashboardAdapter.getNumColumns() == 0) {
    final int numColumns=(int)Math.floor(mTickersContainer.getWidth() / (dashboardSpacing + dahboardItemSize));
    if (numColumns > 0) {
      mTickersDashboardAdapter.setNumColumns(numColumns);
      mTickersContainer.setNumColumns(numColumns);
    }
  }
}","@Override public void onGlobalLayout(){
  if (mTickersDashboardAdapter.getNumColumns() == 0) {
    final int numColumns=(int)Math.floor(mTickersContainer.getWidth() / (dashboardSpacing + dashboardItemSize));
    if (numColumns > 0) {
      mTickersDashboardAdapter.setNumColumns(numColumns);
      mTickersContainer.setNumColumns(numColumns);
    }
  }
}",0.9985855728429984
146485,"/** 
 * Updates TickerStorage with new tickers
 */
private void updateStorageWithTickers(){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(getActivity());
  Set<String> pairs=preferences.getStringSet(""String_Node_Str"",new HashSet<String>());
  for (  String pair : pairs) {
    if (!TickersStorage.loadLatestData().containsKey(pair.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase(Locale.US))) {
      Ticker ticker=new Ticker(pair);
      TickersStorage.addNewTicker(ticker);
    }
  }
}","/** 
 * Updates TickerStorage with new tickers
 */
private void updateStorageWithTickers(){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(getActivity());
  Set<String> pairs=preferences.getStringSet(""String_Node_Str"",new HashSet<String>());
  if (pairs.size() == 0) {
    TickersStorage.loadLatestData().clear();
    TickersStorage.loadPreviousData().clear();
    return;
  }
  for (  String pair : pairs) {
    if (!TickersStorage.loadLatestData().containsKey(pair.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase(Locale.US))) {
      Ticker ticker=new Ticker(pair);
      TickersStorage.addNewTicker(ticker);
    }
  }
  for (Iterator<String> iterator=TickersStorage.loadLatestData().keySet().<String>iterator(); iterator.hasNext(); ) {
    String key=iterator.next();
    if (!pairs.contains(key)) {
      iterator.remove();
    }
  }
}",0.7496443812233285
146486,"@Override protected void onHandleIntent(Intent intent){
  SharedPreferences sh=PreferenceManager.getDefaultSharedPreferences(this);
  Set<String> x=sh.getStringSet(""String_Node_Str"",new HashSet<String>());
  String[] pairs=x.toArray(new String[x.size()]);
  ConnectivityManager connMgr=(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo networkInfo=connMgr.getActiveNetworkInfo();
  String url=BASE_URL;
  for (  String xx : pairs) {
    url+=xx.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase(Locale.US) + ""String_Node_Str"";
  }
  SimpleRequest reqSim=new SimpleRequest();
  if (networkInfo != null && networkInfo.isConnected()) {
    JSONObject data=null;
    try {
      data=reqSim.makeRequest(url);
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
    if (data != null && data.optInt(""String_Node_Str"",1) != 0) {
      ArrayList<Ticker> tickers=new ArrayList<>();
      for (@SuppressWarnings(""String_Node_Str"") Iterator<String> iterator=data.keys(); iterator.hasNext(); ) {
        String key=iterator.next();
        JSONObject pairData=data.optJSONObject(key);
        Ticker ticker=new Ticker(key);
        ticker.setUpdated(pairData.optLong(""String_Node_Str""));
        ticker.setAvg(pairData.optDouble(""String_Node_Str""));
        ticker.setBuy(pairData.optDouble(""String_Node_Str""));
        ticker.setSell(pairData.optDouble(""String_Node_Str""));
        ticker.setHigh(pairData.optDouble(""String_Node_Str""));
        ticker.setLast(pairData.optDouble(""String_Node_Str""));
        ticker.setLow(pairData.optDouble(""String_Node_Str""));
        ticker.setVol(pairData.optDouble(""String_Node_Str""));
        ticker.setVolCur(pairData.optDouble(""String_Node_Str""));
        tickers.add(ticker);
      }
      String message=checkNotifiers(tickers,TickersStorage.loadLatestData());
      if (message.length() != 0) {
        NotificationManager notificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
        NotificationCompat.Builder nb=new NotificationCompat.Builder(this).setContentTitle(getResources().getString(R.string.app_name)).setSmallIcon(R.drawable.ic_launcher).setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)).setContentText(message.substring(0,message.length() - 2));
        notificationManager.notify(ConstantHolder.ALARM_NOTIF_ID,nb.build());
      }
      Map<String,Ticker> newData=new HashMap<>();
      for (      Ticker ticker : tickers) {
        newData.put(ticker.getPair(),ticker);
      }
      TickersStorage.saveData(newData);
      LocalBroadcastManager.getInstance(this).sendBroadcast(new Intent(""String_Node_Str""));
    }
  }
 else {
    new Handler().post(new Runnable(){
      @Override public void run(){
      }
    }
);
  }
}","@Override protected void onHandleIntent(Intent intent){
  SharedPreferences sh=PreferenceManager.getDefaultSharedPreferences(this);
  Set<String> x=sh.getStringSet(""String_Node_Str"",new HashSet<String>());
  if (x.size() == 0) {
    return;
  }
  String[] pairs=x.toArray(new String[x.size()]);
  ConnectivityManager connMgr=(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo networkInfo=connMgr.getActiveNetworkInfo();
  String url=BASE_URL;
  for (  String xx : pairs) {
    url+=xx.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase(Locale.US) + ""String_Node_Str"";
  }
  SimpleRequest reqSim=new SimpleRequest();
  if (networkInfo != null && networkInfo.isConnected()) {
    JSONObject data=null;
    try {
      data=reqSim.makeRequest(url);
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
    if (data != null && data.optInt(""String_Node_Str"",1) != 0) {
      ArrayList<Ticker> tickers=new ArrayList<>();
      for (@SuppressWarnings(""String_Node_Str"") Iterator<String> iterator=data.keys(); iterator.hasNext(); ) {
        String key=iterator.next();
        JSONObject pairData=data.optJSONObject(key);
        Ticker ticker=new Ticker(key);
        ticker.setUpdated(pairData.optLong(""String_Node_Str""));
        ticker.setAvg(pairData.optDouble(""String_Node_Str""));
        ticker.setBuy(pairData.optDouble(""String_Node_Str""));
        ticker.setSell(pairData.optDouble(""String_Node_Str""));
        ticker.setHigh(pairData.optDouble(""String_Node_Str""));
        ticker.setLast(pairData.optDouble(""String_Node_Str""));
        ticker.setLow(pairData.optDouble(""String_Node_Str""));
        ticker.setVol(pairData.optDouble(""String_Node_Str""));
        ticker.setVolCur(pairData.optDouble(""String_Node_Str""));
        tickers.add(ticker);
      }
      String message=checkNotifiers(tickers,TickersStorage.loadLatestData());
      if (message.length() != 0) {
        NotificationManager notificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
        NotificationCompat.Builder nb=new NotificationCompat.Builder(this).setContentTitle(getResources().getString(R.string.app_name)).setSmallIcon(R.drawable.ic_launcher).setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)).setContentText(message.substring(0,message.length() - 2));
        notificationManager.notify(ConstantHolder.ALARM_NOTIF_ID,nb.build());
      }
      Map<String,Ticker> newData=new HashMap<>();
      for (      Ticker ticker : tickers) {
        newData.put(ticker.getPair(),ticker);
      }
      TickersStorage.saveData(newData);
      LocalBroadcastManager.getInstance(this).sendBroadcast(new Intent(""String_Node_Str""));
    }
  }
 else {
    new Handler().post(new Runnable(){
      @Override public void run(){
      }
    }
);
  }
}",0.9930394431554525
146487,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder viewHolder;
  if (convertView == null) {
    convertView=new CheckBox(mContext);
    viewHolder=new ViewHolder();
    viewHolder.checkBox=(CheckBox)convertView;
    viewHolder.checkBox.setTextSize(TypedValue.COMPLEX_UNIT_SP,16);
    viewHolder.checkBox.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        CheckBox checkBox=(CheckBox)v;
        if (checkBox.isChecked()) {
          mSet.add(checkBox.getText().toString());
        }
 else {
          mSet.remove(checkBox.getText().toString());
        }
      }
    }
);
    convertView.setTag(viewHolder);
  }
 else {
    viewHolder=(ViewHolder)convertView.getTag();
  }
  CheckBox checkBox=viewHolder.checkBox;
  String text=(String)getItem(position);
  if (mSet.contains(text)) {
    checkBox.setChecked(true);
  }
 else {
    checkBox.setChecked(false);
  }
  checkBox.setText(text);
  return checkBox;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder viewHolder;
  if (convertView == null) {
    convertView=LayoutInflater.from(mContext).inflate(R.layout.checkbox,parent,false);
    viewHolder=new ViewHolder();
    viewHolder.checkBox=(CheckBox)convertView;
    viewHolder.checkBox.setTextSize(TypedValue.COMPLEX_UNIT_SP,16);
    viewHolder.checkBox.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        CheckBox checkBox=(CheckBox)v;
        if (checkBox.isChecked()) {
          mSet.add(checkBox.getText().toString());
        }
 else {
          mSet.remove(checkBox.getText().toString());
        }
      }
    }
);
    convertView.setTag(viewHolder);
  }
 else {
    viewHolder=(ViewHolder)convertView.getTag();
  }
  CheckBox checkBox=viewHolder.checkBox;
  String text=(String)getItem(position);
  if (mSet.contains(text)) {
    checkBox.setChecked(true);
  }
 else {
    checkBox.setChecked(false);
  }
  checkBox.setText(text);
  return checkBox;
}",0.95770539620807
146488,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mPairsSpinner=new Spinner(getActivity());
  mPairsSpinner.setAdapter(new ArrayAdapter<>(getActivity(),android.R.layout.simple_list_item_1,getResources().getStringArray(R.array.ExchangePairs)));
  if (savedInstanceState != null) {
    mPairsSpinner.setSelection(savedInstanceState.getInt(""String_Node_Str""));
  }
  mPairsSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      String selected=parent.getSelectedItem().toString();
      Bundle bundle=new Bundle();
      bundle.putString(""String_Node_Str"",selected);
      if (mFragmentOpenedFirstTime) {
        getLoaderManager().initLoader(LOADER_ID,bundle,OrdersBookFragment.this);
        mFragmentOpenedFirstTime=false;
      }
 else {
        getLoaderManager().restartLoader(LOADER_ID,bundle,OrdersBookFragment.this);
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mAsksAdapter=new OrdersBookAdapter(getActivity());
  mBidsAdapter=new OrdersBookAdapter(getActivity());
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mPairsSpinner=(Spinner)LayoutInflater.from(getActivity()).inflate(R.layout.spinner,null);
  mPairsSpinner.setAdapter(new ArrayAdapter<>(getActivity(),android.R.layout.simple_list_item_1,getResources().getStringArray(R.array.ExchangePairs)));
  if (savedInstanceState != null) {
    mPairsSpinner.setSelection(savedInstanceState.getInt(""String_Node_Str""));
  }
  mPairsSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      String selected=parent.getSelectedItem().toString();
      Bundle bundle=new Bundle();
      bundle.putString(""String_Node_Str"",selected);
      if (mFragmentOpenedFirstTime) {
        getLoaderManager().initLoader(LOADER_ID,bundle,OrdersBookFragment.this);
        mFragmentOpenedFirstTime=false;
      }
 else {
        getLoaderManager().restartLoader(LOADER_ID,bundle,OrdersBookFragment.this);
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mAsksAdapter=new OrdersBookAdapter(getActivity());
  mBidsAdapter=new OrdersBookAdapter(getActivity());
}",0.9613215149073328
146489,"/** 
 * Called when the activity is first created.
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  AppRater.app_launched(this);
  BitmapDrawable bg=(BitmapDrawable)getResources().getDrawable(R.drawable.bg_striped);
  bg.setTileModeXY(Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setBackgroundDrawable(bg);
  }
  final SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);
  boolean newDashboardNotificationShown=sharedPreferences.getBoolean(NEW_DASHBOARD_NOTIFICATION_SHOWN_KEY,false);
  if (!newDashboardNotificationShown) {
    new AlertDialog.Builder(this).setNeutralButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        SharedPreferences.Editor editor=sharedPreferences.edit();
        editor.putBoolean(NEW_DASHBOARD_NOTIFICATION_SHOWN_KEY,true);
        editor.commit();
      }
    }
).setTitle(""String_Node_Str"").setMessage(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").show();
  }
  alarmSet=sharedPreferences.getBoolean(""String_Node_Str"",false);
  if (alarmSet) {
    setRecurringAlarm(sharedPreferences.getLong(""String_Node_Str"",30000));
  }
  mDrawerListItems=getResources().getStringArray(R.array.NavSections);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  FrameLayout contentFrame=(FrameLayout)findViewById(R.id.content_frame);
  mDrawerList=(ListView)findViewById(R.id.left_drawer);
  mDrawerList.setAdapter(new ArrayAdapter<>(this,R.layout.drawer_list_item,mDrawerListItems));
  mDrawerList.setOnItemClickListener(new DrawerItemClickListener());
  mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,Gravity.START);
  if (((ViewGroup.MarginLayoutParams)contentFrame.getLayoutParams()).leftMargin == (int)getResources().getDimension(R.dimen.drawer_size)) {
    mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_OPEN,mDrawerList);
    mDrawerLayout.setScrimColor(Color.TRANSPARENT);
    mDrawerLayout.setFocusableInTouchMode(false);
    isDrawerLocked=true;
  }
  app=new App(this);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.app_name,R.string.app_name){
    public void onDrawerClosed(    View view){
      invalidateOptionsMenu();
    }
    public void onDrawerOpened(    View drawerView){
      invalidateOptionsMenu();
    }
  }
;
  if (!isDrawerLocked) {
    mDrawerLayout.setDrawerListener(mDrawerToggle);
    getActionBar().setDisplayHomeAsUpEnabled(true);
    getActionBar().setHomeButtonEnabled(true);
  }
  if (savedInstanceState == null) {
    displayItem(0);
  }
}","/** 
 * Called when the activity is first created.
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  AppRater.app_launched(this);
  BitmapDrawable bg=(BitmapDrawable)getResources().getDrawable(R.drawable.bg_striped);
  bg.setTileModeXY(Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setBackgroundDrawable(bg);
  }
  final SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);
  sharedPreferences.registerOnSharedPreferenceChangeListener(this);
  onVersionUpdate(sharedPreferences);
  alarmSet=sharedPreferences.getBoolean(SettingsFragment.KEY_CHECK_ENABLED,true);
  if (alarmSet) {
    setRecurringAlarm(Integer.parseInt(sharedPreferences.getString(SettingsFragment.KEY_CHECK_PERIOD,""String_Node_Str"")));
  }
  mDrawerListItems=getResources().getStringArray(R.array.NavSections);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  FrameLayout contentFrame=(FrameLayout)findViewById(R.id.content_frame);
  mDrawerList=(ListView)findViewById(R.id.left_drawer);
  mDrawerList.setAdapter(new ArrayAdapter<>(this,R.layout.drawer_list_item,mDrawerListItems));
  mDrawerList.setOnItemClickListener(new DrawerItemClickListener());
  mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,Gravity.START);
  if (((ViewGroup.MarginLayoutParams)contentFrame.getLayoutParams()).leftMargin == (int)getResources().getDimension(R.dimen.drawer_size)) {
    mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_OPEN,mDrawerList);
    mDrawerLayout.setScrimColor(Color.TRANSPARENT);
    mDrawerLayout.setFocusableInTouchMode(false);
    isDrawerLocked=true;
  }
  app=new App(this);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.app_name,R.string.app_name){
    public void onDrawerClosed(    View view){
      invalidateOptionsMenu();
    }
    public void onDrawerOpened(    View drawerView){
      invalidateOptionsMenu();
    }
  }
;
  if (!isDrawerLocked) {
    mDrawerLayout.setDrawerListener(mDrawerToggle);
    getActionBar().setDisplayHomeAsUpEnabled(true);
    getActionBar().setHomeButtonEnabled(true);
  }
  if (savedInstanceState == null) {
    displayItem(0);
  }
}",0.8106208512299883
146490,"@Override public void onClick(DialogInterface dialog,int which){
  SharedPreferences.Editor editor=sharedPreferences.edit();
  editor.putBoolean(NEW_DASHBOARD_NOTIFICATION_SHOWN_KEY,true);
  editor.commit();
}","@Override public void onClick(DialogInterface dialog,int which){
  SharedPreferences.Editor editor=sharedPreferences.edit();
  editor.putBoolean(keyToCheck,true);
  editor.commit();
}",0.8928571428571429
146491,"public AuthRequest(long nonce,Context context){
  SharedPreferences sh=PreferenceManager.getDefaultSharedPreferences(context);
  this.nonce=nonce;
  key=sh.getString(""String_Node_Str"",""String_Node_Str"");
  secret=sh.getString(""String_Node_Str"",""String_Node_Str"");
}","public AuthRequest(long nonce,Context context){
  SharedPreferences sh=PreferenceManager.getDefaultSharedPreferences(context);
  this.nonce=nonce;
  key=SecurityManager.getInstance(context).decryptString(sh.getString(SettingsFragment.KEY_API_KEY,""String_Node_Str""));
  secret=SecurityManager.getInstance(context).decryptString(sh.getString(SettingsFragment.KEY_API_SECRET,""String_Node_Str""));
}",0.622154779969651
146492,"/** 
 * Converts byte array to HEX string
 * @param array String as array of bytes
 * @return String in HEX format
 */
private static String byteArrayToHexString(byte[] array){
  StringBuilder hexString=new StringBuilder();
  for (  byte b : array) {
    int intVal=b & 0xff;
    if (intVal < 0x10)     hexString.append(""String_Node_Str"");
    hexString.append(Integer.toHexString(intVal));
  }
  return hexString.toString();
}","/** 
 * Converts byte array to HEX string
 * @param array String as array of bytes
 * @return String in HEX format
 */
private String byteArrayToHexString(byte[] array){
  StringBuilder hexString=new StringBuilder();
  for (  byte b : array) {
    int intVal=b & 0xff;
    if (intVal < 0x10)     hexString.append(""String_Node_Str"");
    hexString.append(Integer.toHexString(intVal));
  }
  return hexString.toString();
}",0.9917355371900828
146493,"/** 
 * Makes any request, which require authentication
 * @param method    Method of Trade API
 * @param arguments Additional arguments, which can exist for this method
 * @return Response of type JSONObject
 * @throws JSONException
 */
@Nullable public JSONObject makeRequest(@NotNull String method,Map<String,String> arguments) throws JSONException {
  if (key.length() == 0 || secret.length() == 0) {
    return new JSONObject(""String_Node_Str"");
  }
  if (arguments == null) {
    arguments=new HashMap<>();
  }
  arguments.put(""String_Node_Str"",method);
  arguments.put(""String_Node_Str"",""String_Node_Str"" + ++nonce);
  String postData=""String_Node_Str"";
  for (Iterator<Map.Entry<String,String>> it=arguments.entrySet().iterator(); it.hasNext(); ) {
    Map.Entry<String,String> ent=it.next();
    if (postData.length() > 0) {
      postData+=""String_Node_Str"";
    }
    postData+=ent.getKey() + ""String_Node_Str"" + ent.getValue();
  }
  try {
    _key=new SecretKeySpec(secret.getBytes(""String_Node_Str""),""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException uee) {
    System.err.println(""String_Node_Str"" + uee.toString());
    return null;
  }
  try {
    mac=Mac.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException nsae) {
    System.err.println(""String_Node_Str"" + nsae.toString());
    return null;
  }
  try {
    mac.init(_key);
  }
 catch (  InvalidKeyException ike) {
    System.err.println(""String_Node_Str"" + ike.toString());
    return null;
  }
  HttpURLConnection connection=null;
  BufferedReader bufferedReader=null;
  try {
    connection=(HttpURLConnection)(new URL(TRADE_API_URL)).openConnection();
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    connection.setRequestProperty(""String_Node_Str"",key);
    byte[] array=mac.doFinal(postData.getBytes(""String_Node_Str""));
    connection.setRequestProperty(""String_Node_Str"",byteArrayToHexString(array));
    DataOutputStream wr=new DataOutputStream(connection.getOutputStream());
    wr.writeBytes(postData);
    wr.flush();
    wr.close();
    InputStream response=connection.getInputStream();
    StringBuilder sb=new StringBuilder();
    if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
      String line;
      bufferedReader=new BufferedReader(new InputStreamReader(response));
      while ((line=bufferedReader.readLine()) != null) {
        sb.append(line);
      }
      return new JSONObject(sb.toString());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (connection != null) {
      connection.disconnect();
    }
    if (bufferedReader != null) {
      try {
        bufferedReader.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  return null;
}","/** 
 * Makes any request, which require authentication
 * @param method    Method of Trade API
 * @param arguments Additional arguments, which can exist for this method
 * @return Response of type JSONObject
 * @throws JSONException
 */
@Nullable public JSONObject makeRequest(@NotNull String method,Map<String,String> arguments) throws JSONException {
  if (key.length() == 0 || secret.length() == 0) {
    return new JSONObject(""String_Node_Str"");
  }
  if (arguments == null) {
    arguments=new HashMap<>();
  }
  arguments.put(""String_Node_Str"",method);
  arguments.put(""String_Node_Str"",""String_Node_Str"" + ++nonce);
  String postData=""String_Node_Str"";
  for (Iterator<Map.Entry<String,String>> it=arguments.entrySet().iterator(); it.hasNext(); ) {
    Map.Entry<String,String> ent=it.next();
    if (postData.length() > 0) {
      postData+=""String_Node_Str"";
    }
    postData+=ent.getKey() + ""String_Node_Str"" + ent.getValue();
  }
  try {
    _key=new SecretKeySpec(secret.getBytes(""String_Node_Str""),""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException uee) {
    System.err.println(""String_Node_Str"" + uee.toString());
    return null;
  }
  try {
    mac=Mac.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException nsae) {
    System.err.println(""String_Node_Str"" + nsae.toString());
    return null;
  }
  try {
    mac.init(_key);
  }
 catch (  InvalidKeyException ike) {
    System.err.println(""String_Node_Str"" + ike.toString());
    return null;
  }
  HttpURLConnection connection=null;
  BufferedReader bufferedReader=null;
  DataOutputStream wr=null;
  try {
    connection=(HttpURLConnection)(new URL(TRADE_API_URL)).openConnection();
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    connection.setRequestProperty(""String_Node_Str"",key);
    byte[] array=mac.doFinal(postData.getBytes(""String_Node_Str""));
    connection.setRequestProperty(""String_Node_Str"",byteArrayToHexString(array));
    wr=new DataOutputStream(connection.getOutputStream());
    wr.writeBytes(postData);
    wr.flush();
    InputStream response=connection.getInputStream();
    StringBuilder sb=new StringBuilder();
    if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
      String line;
      bufferedReader=new BufferedReader(new InputStreamReader(response));
      while ((line=bufferedReader.readLine()) != null) {
        sb.append(line);
      }
      return new JSONObject(sb.toString());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (connection != null) {
      connection.disconnect();
    }
    if (bufferedReader != null) {
      try {
        bufferedReader.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (wr != null) {
      try {
        wr.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  return null;
}",0.9423567420506715
146494,"public UpdateWidgetsTask(Context context,Map<Integer,String> map){
  mContext=context;
  mMap=map;
}","public UpdateWidgetsTask(Context context,Map<Integer,String> map){
  mContext=new WeakReference<>(context);
  mMap=map;
}",0.9049773755656108
146495,"@Override protected JSONObject doInBackground(Void... params){
  Set<String> set=new HashSet<>();
  JSONObject response=null;
  for (  int x : mMap.keySet()) {
    set.add(mMap.get(x));
  }
  try {
    response=App.getPairInfo(set.toArray(new String[set.size()]));
    response=response == null ? new JSONObject() : response;
    DBWorker dbWorker=DBWorker.getInstance(mContext);
    String[] columns={""String_Node_Str"",""String_Node_Str""};
    Cursor cursor=dbWorker.pullWidgetData(columns);
    Map<String,Double> values=new HashMap<>();
    if (cursor.moveToFirst()) {
      while (!cursor.isAfterLast()) {
        values.put(cursor.getString(cursor.getColumnIndex(columns[0])),cursor.getDouble(cursor.getColumnIndex(columns[1])));
        cursor.moveToNext();
      }
    }
    cursor.close();
    for (@SuppressWarnings(""String_Node_Str"") Iterator<String> x=response.keys(); x.hasNext(); ) {
      String pair=x.next();
      String pairInDB=pair.replace(""String_Node_Str"",""String_Node_Str"").toUpperCase(Locale.US);
      ContentValues cv=new ContentValues(4);
      double last=response.getJSONObject(pair).getDouble(""String_Node_Str"");
      double sell=response.getJSONObject(pair).getDouble(""String_Node_Str"");
      double buy=response.getJSONObject(pair).getDouble(""String_Node_Str"");
      cv.put(""String_Node_Str"",last);
      cv.put(""String_Node_Str"",buy);
      cv.put(""String_Node_Str"",sell);
      if (values.containsKey(pairInDB)) {
        if (last >= values.get(pairInDB)) {
          response.getJSONObject(pair).put(""String_Node_Str"",""String_Node_Str"");
        }
 else {
          response.getJSONObject(pair).put(""String_Node_Str"",""String_Node_Str"");
        }
      }
 else {
        response.getJSONObject(pair).put(""String_Node_Str"",""String_Node_Str"");
      }
      int result=dbWorker.updateWidgetData(cv,pair.replace(""String_Node_Str"",""String_Node_Str"").toUpperCase(Locale.US));
      if (result == 0) {
        cv.put(""String_Node_Str"",pair.replace(""String_Node_Str"",""String_Node_Str"").toUpperCase(Locale.US));
        dbWorker.insertToWidgetData(cv);
      }
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return response;
}","@Override protected JSONObject doInBackground(Void... params){
  Set<String> set=new HashSet<>();
  JSONObject response=null;
  for (  int x : mMap.keySet()) {
    set.add(mMap.get(x));
  }
  try {
    response=App.getPairInfo(set.toArray(new String[set.size()]));
    response=response == null ? new JSONObject() : response;
    Context context=mContext.get();
    if (context == null) {
      return null;
    }
    DBWorker dbWorker=DBWorker.getInstance(context);
    String[] columns={""String_Node_Str"",""String_Node_Str""};
    Cursor cursor=dbWorker.pullWidgetData(columns);
    Map<String,Double> values=new HashMap<>();
    if (cursor.moveToFirst()) {
      while (!cursor.isAfterLast()) {
        values.put(cursor.getString(cursor.getColumnIndex(columns[0])),cursor.getDouble(cursor.getColumnIndex(columns[1])));
        cursor.moveToNext();
      }
    }
    cursor.close();
    for (@SuppressWarnings(""String_Node_Str"") Iterator<String> x=response.keys(); x.hasNext(); ) {
      String pair=x.next();
      String pairInDB=pair.replace(""String_Node_Str"",""String_Node_Str"").toUpperCase(Locale.US);
      ContentValues cv=new ContentValues(4);
      double last=response.getJSONObject(pair).getDouble(""String_Node_Str"");
      double sell=response.getJSONObject(pair).getDouble(""String_Node_Str"");
      double buy=response.getJSONObject(pair).getDouble(""String_Node_Str"");
      cv.put(""String_Node_Str"",last);
      cv.put(""String_Node_Str"",buy);
      cv.put(""String_Node_Str"",sell);
      if (values.containsKey(pairInDB)) {
        if (last >= values.get(pairInDB)) {
          response.getJSONObject(pair).put(""String_Node_Str"",""String_Node_Str"");
        }
 else {
          response.getJSONObject(pair).put(""String_Node_Str"",""String_Node_Str"");
        }
      }
 else {
        response.getJSONObject(pair).put(""String_Node_Str"",""String_Node_Str"");
      }
      int result=dbWorker.updateWidgetData(cv,pair.replace(""String_Node_Str"",""String_Node_Str"").toUpperCase(Locale.US));
      if (result == 0) {
        cv.put(""String_Node_Str"",pair.replace(""String_Node_Str"",""String_Node_Str"").toUpperCase(Locale.US));
        dbWorker.insertToWidgetData(cv);
      }
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return response;
}",0.979518343461625
146496,"@Override protected void onPostExecute(JSONObject jsonObject){
  if (jsonObject != null) {
    try {
      AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(mContext);
      for (      int x : mMap.keySet()) {
        RemoteViews views=new RemoteViews(mContext.getPackageName(),R.layout.appwidget_layout);
        double price=jsonObject.getJSONObject(mMap.get(x).replace(""String_Node_Str"",""String_Node_Str"").toLowerCase(Locale.US)).getDouble(""String_Node_Str"");
        String priceString;
        if (price > 1) {
          priceString=(new DecimalFormat(""String_Node_Str"")).format(price);
        }
 else {
          priceString=String.valueOf(price);
        }
        views.setTextViewText(R.id.widgetCurrencyValue,priceString);
        views.setTextViewText(R.id.widgetPair,mMap.get(x));
        String color=jsonObject.getJSONObject(mMap.get(x).replace(""String_Node_Str"",""String_Node_Str"").toLowerCase(Locale.US)).getString(""String_Node_Str"");
        int colorValue=color.equals(""String_Node_Str"") ? Color.GREEN : Color.RED;
        views.setTextColor(R.id.widgetCurrencyValue,colorValue);
        Intent intent=new Intent(AppWidgetManager.ACTION_APPWIDGET_UPDATE);
        Bundle bundle=new Bundle();
        bundle.putIntArray(AppWidgetManager.EXTRA_APPWIDGET_IDS,appWidgetManager.getAppWidgetIds(new ComponentName(mContext,WidgetProvider.class)));
        intent.putExtras(bundle);
        PendingIntent pi=PendingIntent.getBroadcast(mContext,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);
        views.setOnClickPendingIntent(R.id.widgetContainer,pi);
        SimpleDateFormat df=new SimpleDateFormat(""String_Node_Str"",Locale.US);
        Calendar calendar=Calendar.getInstance();
        views.setTextViewText(R.id.widgetDate,df.format(calendar.getTime()));
        appWidgetManager.updateAppWidget(x,views);
      }
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
}","@Override protected void onPostExecute(JSONObject jsonObject){
  if (jsonObject != null) {
    try {
      Context context=mContext.get();
      if (context == null) {
        return;
      }
      AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(context);
      for (      int x : mMap.keySet()) {
        RemoteViews views=new RemoteViews(context.getPackageName(),R.layout.appwidget_layout);
        double price=jsonObject.getJSONObject(mMap.get(x).replace(""String_Node_Str"",""String_Node_Str"").toLowerCase(Locale.US)).getDouble(""String_Node_Str"");
        String priceString;
        if (price > 1) {
          priceString=(new DecimalFormat(""String_Node_Str"")).format(price);
        }
 else {
          priceString=String.valueOf(price);
        }
        views.setTextViewText(R.id.widgetCurrencyValue,priceString);
        views.setTextViewText(R.id.widgetPair,mMap.get(x));
        String color=jsonObject.getJSONObject(mMap.get(x).replace(""String_Node_Str"",""String_Node_Str"").toLowerCase(Locale.US)).getString(""String_Node_Str"");
        int colorValue=color.equals(""String_Node_Str"") ? Color.GREEN : Color.RED;
        views.setTextColor(R.id.widgetCurrencyValue,colorValue);
        Intent intent=new Intent(AppWidgetManager.ACTION_APPWIDGET_UPDATE);
        Bundle bundle=new Bundle();
        bundle.putIntArray(AppWidgetManager.EXTRA_APPWIDGET_IDS,appWidgetManager.getAppWidgetIds(new ComponentName(context,WidgetProvider.class)));
        intent.putExtras(bundle);
        PendingIntent pi=PendingIntent.getBroadcast(context,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);
        views.setOnClickPendingIntent(R.id.widgetContainer,pi);
        SimpleDateFormat df=new SimpleDateFormat(""String_Node_Str"",Locale.US);
        Calendar calendar=Calendar.getInstance();
        views.setTextViewText(R.id.widgetDate,df.format(calendar.getTime()));
        appWidgetManager.updateAppWidget(x,views);
      }
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
}",0.9737311910226985
146497,"@Override public View getView(int position,View convertView,ViewGroup parent){
  View v;
  if (convertView == null) {
    LayoutInflater inflater=LayoutInflater.from(mContext);
    v=inflater.inflate(R.layout.fragment_home_tickers_dashboard_item,parent,false);
  }
 else {
    v=convertView;
  }
  Ticker ticker=mData.get(position);
  TextView pair=(TextView)v.findViewById(R.id.tickerPair);
  TextView last=(TextView)v.findViewById(R.id.tickerLastValue);
  TextView buy=(TextView)v.findViewById(R.id.tickerBuyValue);
  TextView sell=(TextView)v.findViewById(R.id.tickerSellValue);
  String pairValue=ticker.getPair().replace(""String_Node_Str"",""String_Node_Str"").toUpperCase(Locale.US);
  pair.setText(pairValue);
  last.setText(String.valueOf(ticker.getLast()));
  buy.setText(String.valueOf(ticker.getBuy()));
  sell.setText(String.valueOf(ticker.getSell()));
  Ticker oldTicker=TickersStorage.loadPreviousData().get(ticker.getPair());
  if (oldTicker != null) {
    last.setTextColor(ticker.getLast() < oldTicker.getLast() ? Color.RED : Color.GREEN);
    buy.setTextColor(ticker.getBuy() < oldTicker.getBuy() ? Color.RED : Color.GREEN);
    sell.setTextColor(ticker.getSell() < oldTicker.getSell() ? Color.RED : Color.GREEN);
  }
 else {
    last.setTextColor(Color.GREEN);
    buy.setTextColor(Color.GREEN);
    sell.setTextColor(Color.GREEN);
  }
  last.setOnClickListener(this);
  buy.setOnClickListener(this);
  sell.setOnClickListener(this);
  last.setTag(pairValue);
  buy.setTag(pairValue);
  sell.setTag(pairValue);
  return v;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  FlippingView v;
  if (convertView == null) {
    LayoutInflater inflater=LayoutInflater.from(mContext);
    v=(FlippingView)inflater.inflate(R.layout.fragment_home_tickers_dashboard_item,parent,false);
    v.addAnimators(mLeftOut,mLeftIn,mRightOut,mRightIn);
    v.setOnLongClickListener(this);
  }
 else {
    v=(FlippingView)convertView;
  }
  Ticker ticker=mData.get(position);
  TextView pairFront=(TextView)v.findViewById(R.id.tickerPairFront);
  TextView last=(TextView)v.findViewById(R.id.tickerLastValue);
  TextView buy=(TextView)v.findViewById(R.id.tickerBuyValue);
  TextView sell=(TextView)v.findViewById(R.id.tickerSellValue);
  String pairValue=ticker.getPair().replace(""String_Node_Str"",""String_Node_Str"").toUpperCase(Locale.US);
  pairFront.setText(pairValue);
  last.setText(String.valueOf(ticker.getLast()));
  buy.setText(String.valueOf(ticker.getBuy()));
  sell.setText(String.valueOf(ticker.getSell()));
  Date updatedDate=new Date(ticker.getUpdated());
  last.setOnClickListener(this);
  buy.setOnClickListener(this);
  sell.setOnClickListener(this);
  last.setTag(pairValue);
  buy.setTag(pairValue);
  sell.setTag(pairValue);
  TextView highBack=(TextView)v.findViewById(R.id.tickerBackHighValue);
  TextView lowBack=(TextView)v.findViewById(R.id.tickerBackLowValue);
  TextView buyBack=(TextView)v.findViewById(R.id.tickerBackBuyValue);
  TextView sellBack=(TextView)v.findViewById(R.id.tickerBackSellValue);
  TextView updatedBack=(TextView)v.findViewById(R.id.tickerUpdated);
  highBack.setText(String.valueOf(ticker.getHigh()));
  lowBack.setText(String.valueOf(ticker.getLow()));
  buyBack.setText(String.valueOf(ticker.getBuy()));
  sellBack.setText(String.valueOf(ticker.getSell()));
  Ticker oldTicker=TickersStorage.loadPreviousData().get(ticker.getPair());
  if (oldTicker != null) {
    last.setTextColor(ticker.getLast() < oldTicker.getLast() ? Color.RED : Color.GREEN);
    buy.setTextColor(ticker.getBuy() < oldTicker.getBuy() ? Color.RED : Color.GREEN);
    sell.setTextColor(ticker.getSell() < oldTicker.getSell() ? Color.RED : Color.GREEN);
    highBack.setTextColor(ticker.getHigh() < oldTicker.getHigh() ? Color.RED : Color.GREEN);
    lowBack.setTextColor(ticker.getLow() < oldTicker.getLow() ? Color.RED : Color.GREEN);
    buyBack.setTextColor(ticker.getBuy() < oldTicker.getBuy() ? Color.RED : Color.GREEN);
    sellBack.setTextColor(ticker.getSell() < oldTicker.getSell() ? Color.RED : Color.GREEN);
  }
 else {
    last.setTextColor(Color.GREEN);
    buy.setTextColor(Color.GREEN);
    sell.setTextColor(Color.GREEN);
    highBack.setTextColor(Color.GREEN);
    lowBack.setTextColor(Color.GREEN);
    buyBack.setTextColor(Color.GREEN);
    sellBack.setTextColor(Color.GREEN);
  }
  return v;
}",0.6257162502865001
146498,"public TickersDashboardAdapter(@NotNull Context context,TickersDashboardAdapterCallbackInterface callback){
  mContext=context;
  mCallback=callback;
}","public TickersDashboardAdapter(@NotNull Context context,TickersDashboardAdapterCallbackInterface callback){
  mContext=context;
  mCallback=callback;
  mLeftOut=(AnimatorSet)AnimatorInflater.loadAnimator(mContext,R.animator.card_flip_left_out);
  mLeftIn=(AnimatorSet)AnimatorInflater.loadAnimator(mContext,R.animator.card_flip_left_in);
  mRightOut=(AnimatorSet)AnimatorInflater.loadAnimator(mContext,R.animator.card_flip_right_out);
  mRightIn=(AnimatorSet)AnimatorInflater.loadAnimator(mContext,R.animator.card_flip_right_in);
}",0.4428152492668621
146499,"/** 
 * Starts fetching charts data via AsyncTasks
 */
private void updateCharts(){
  ConnectivityManager connectivityManager=(ConnectivityManager)getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();
  if (networkInfo == null || !networkInfo.isConnected()) {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  if (mCharts.size() > 0) {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    Set<String> chartNames=mCharts.keySet();
    String[] chartsNamesSorted=chartNames.toArray(new String[chartNames.size()]);
    Arrays.sort(chartsNamesSorted);
    for (    String x : chartsNamesSorted) {
      String pair=x.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase(Locale.US);
      mChartsUpdater.queueChart((StockChartView)mCharts.get(x).findViewById(R.id.StockChartView),pair);
    }
  }
}","/** 
 * Starts fetching charts data via HandlerThread and Messages
 */
private void updateCharts(){
  ConnectivityManager connectivityManager=(ConnectivityManager)getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();
  if (networkInfo == null || !networkInfo.isConnected()) {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  if (mCharts.size() > 0) {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    Set<String> chartNames=mCharts.keySet();
    String[] chartsNamesSorted=chartNames.toArray(new String[chartNames.size()]);
    Arrays.sort(chartsNamesSorted);
    for (    String x : chartsNamesSorted) {
      String pair=x.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase(Locale.US);
      mChartsUpdater.queueChart((StockChartView)mCharts.get(x).findViewById(R.id.StockChartView),pair);
    }
  }
}",0.9822916666666668
146500,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mLoadingViewAsks=new ProgressBar(getActivity());
  mLoadingViewBids=new ProgressBar(getActivity());
  LinearLayout.LayoutParams lp=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.MATCH_PARENT);
  lp.gravity=Gravity.CENTER;
  mLoadingViewAsks.setLayoutParams(lp);
  mLoadingViewBids.setLayoutParams(lp);
  mPairsSpinner=new Spinner(getActivity());
  mPairsSpinner.setAdapter(new ArrayAdapter<>(getActivity(),android.R.layout.simple_list_item_1,getResources().getStringArray(R.array.ExchangePairs)));
  if (savedInstanceState != null) {
    mPairsSpinner.setSelection(savedInstanceState.getInt(""String_Node_Str""));
  }
  mPairsSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      String selected=parent.getSelectedItem().toString();
      Bundle bundle=new Bundle();
      bundle.putString(""String_Node_Str"",selected);
      if (mFragmentOpenedFirstTime) {
        getLoaderManager().initLoader(LOADER_ID,bundle,OrdersBookFragment.this);
        mFragmentOpenedFirstTime=false;
      }
 else {
        getLoaderManager().restartLoader(LOADER_ID,bundle,OrdersBookFragment.this);
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mAsksAdapter=new OrdersBookAdapter(getActivity());
  mBidsAdapter=new OrdersBookAdapter(getActivity());
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mPairsSpinner=new Spinner(getActivity());
  mPairsSpinner.setAdapter(new ArrayAdapter<>(getActivity(),android.R.layout.simple_list_item_1,getResources().getStringArray(R.array.ExchangePairs)));
  if (savedInstanceState != null) {
    mPairsSpinner.setSelection(savedInstanceState.getInt(""String_Node_Str""));
  }
  mPairsSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      String selected=parent.getSelectedItem().toString();
      Bundle bundle=new Bundle();
      bundle.putString(""String_Node_Str"",selected);
      if (mFragmentOpenedFirstTime) {
        getLoaderManager().initLoader(LOADER_ID,bundle,OrdersBookFragment.this);
        mFragmentOpenedFirstTime=false;
      }
 else {
        getLoaderManager().restartLoader(LOADER_ID,bundle,OrdersBookFragment.this);
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mAsksAdapter=new OrdersBookAdapter(getActivity());
  mBidsAdapter=new OrdersBookAdapter(getActivity());
}",0.873653984206748
146501,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  setHasOptionsMenu(true);
  @SuppressLint(""String_Node_Str"") View v=inflater.inflate(R.layout.fragment_ordersbook,container,false);
  mAsksList=(ListView)v.findViewById(R.id.asks);
  mBidsList=(ListView)v.findViewById(R.id.bids);
  mChartArea=(FrameLayout)v.findViewById(R.id.OrdersBookChart);
  ((LinearLayout)mAsksList.getParent()).addView(mLoadingViewAsks);
  mAsksList.setEmptyView(mLoadingViewAsks);
  ((LinearLayout)mBidsList.getParent()).addView(mLoadingViewBids);
  mBidsList.setEmptyView(mLoadingViewBids);
  getActivity().getActionBar().setCustomView(mPairsSpinner,new ActionBar.LayoutParams(Gravity.RIGHT));
  getActivity().getActionBar().setDisplayShowCustomEnabled(true);
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  setHasOptionsMenu(true);
  @SuppressLint(""String_Node_Str"") View v=inflater.inflate(R.layout.fragment_ordersbook,container,false);
  mAsksList=(ListView)v.findViewById(R.id.asks);
  mBidsList=(ListView)v.findViewById(R.id.bids);
  mChartArea=(FrameLayout)v.findViewById(R.id.OrdersBookChart);
  mLoadingViewAsks=new ProgressBar(getActivity());
  mLoadingViewBids=new ProgressBar(getActivity());
  LinearLayout.LayoutParams lp=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.MATCH_PARENT);
  lp.gravity=Gravity.CENTER;
  mLoadingViewAsks.setLayoutParams(lp);
  mLoadingViewBids.setLayoutParams(lp);
  ((LinearLayout)mAsksList.getParent()).addView(mLoadingViewAsks);
  mAsksList.setEmptyView(mLoadingViewAsks);
  ((LinearLayout)mBidsList.getParent()).addView(mLoadingViewBids);
  mBidsList.setEmptyView(mLoadingViewBids);
  getActivity().getActionBar().setCustomView(mPairsSpinner,new ActionBar.LayoutParams(Gravity.RIGHT));
  getActivity().getActionBar().setDisplayShowCustomEnabled(true);
  return v;
}",0.8207739307535642
146502,"public double getUpdated(){
  return updated;
}","public long getUpdated(){
  return updated;
}",0.9130434782608696
146503,"/** 
 * Displays selected fragment
 * @param position Position at the list (0-based)
 */
private void displayItem(final int position){
  Fragment fragment=null;
  final FragmentManager fragmentManager=getFragmentManager();
switch (position) {
case 0:
    fragment=mHomeFragment;
  fragmentManager.popBackStack(null,FragmentManager.POP_BACK_STACK_INCLUSIVE);
break;
case 1:
fragment=new OrdersBookFragment();
break;
case 2:
fragment=new ActiveOrdersFragment();
break;
case 3:
fragment=new TradeHistoryFragment();
break;
case 4:
fragment=new TransHistoryFragment();
break;
case 5:
fragment=new ChartsFragment();
break;
case 6:
fragment=new SettingsFragment();
break;
case 7:
fragment=new NotifiersFragment();
break;
case 8:
fragment=new HelpFragment();
break;
default :
break;
}
final Fragment fr=fragment;
if (fr != null) {
int delay=250;
new Handler().postDelayed(new Runnable(){
@Override public void run(){
FragmentTransaction transaction=fragmentManager.beginTransaction().replace(R.id.content_frame,fr).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
if (position != 0) {
transaction.addToBackStack(String.valueOf(position));
}
transaction.commit();
setTitle(mDrawerListItems[position]);
}
}
,delay);
mDrawerList.setItemChecked(position,true);
mDrawerList.setSelection(position);
if (!isDrawerLocked) {
mDrawerLayout.closeDrawer(mDrawerList);
}
}
}","/** 
 * Displays selected fragment
 * @param position Position at the list (0-based)
 */
private void displayItem(final int position){
  Fragment fragment=null;
  final FragmentManager fragmentManager=getFragmentManager();
switch (position) {
case 0:
    fragment=mHomeFragment;
  fragmentManager.popBackStack(null,FragmentManager.POP_BACK_STACK_INCLUSIVE);
break;
case 1:
fragment=new OrdersBookFragment();
break;
case 2:
fragment=new ActiveOrdersFragment();
break;
case 3:
fragment=HistoryFragment.newInstance(ListType.Trades);
break;
case 4:
fragment=HistoryFragment.newInstance(ListType.Transactions);
break;
case 5:
fragment=new ChartsFragment();
break;
case 6:
fragment=new SettingsFragment();
break;
case 7:
fragment=new NotifiersFragment();
break;
case 8:
fragment=new HelpFragment();
break;
default :
break;
}
final Fragment fr=fragment;
if (fr != null) {
int delay=250;
new Handler().postDelayed(new Runnable(){
@Override public void run(){
FragmentTransaction transaction=fragmentManager.beginTransaction().replace(R.id.content_frame,fr).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
if (position != 0) {
transaction.addToBackStack(String.valueOf(position));
}
transaction.commit();
setTitle(mDrawerListItems[position]);
}
}
,delay);
mDrawerList.setItemChecked(position,true);
mDrawerList.setSelection(position);
if (!isDrawerLocked) {
mDrawerLayout.closeDrawer(mDrawerList);
}
}
}",0.9515545914678236
146504,"public OrdersAdapter(Context context,ListTypes listType){
  mContext=context;
  mInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  mListType=listType;
  mDateFormat.setTimeZone(TimeZone.getDefault());
}","public OrdersAdapter(Context context,ListType listType){
  mContext=context;
  mInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  mListType=listType;
  mDateFormat.setTimeZone(TimeZone.getDefault());
}",0.9978947368421052
146505,"@Override public View getView(int position,View convertView,ViewGroup parent){
  View v=null;
  TextView timestamp;
  final JSONObject dataToDisplay=getItem(position);
  TextView orderID;
  TextView type;
  TextView amount;
  TextView pair;
  TextView rate;
switch (mListType) {
case Transactions:
    if (convertView == null) {
      v=mInflater.inflate(R.layout.fragment_trans_history_item,parent,false);
    }
 else {
      v=convertView;
    }
  TextView description=(TextView)v.findViewById(R.id.TransHistoryDesc);
timestamp=(TextView)v.findViewById(R.id.TransHistoryTimestamp);
amount=(TextView)v.findViewById(R.id.TransHistoryAmount);
try {
Calendar calendar=Calendar.getInstance(TimeZone.getDefault(),Locale.getDefault());
description.setText(dataToDisplay.getString(""String_Node_Str""));
calendar.setTimeInMillis(Long.parseLong(dataToDisplay.getString(""String_Node_Str"")) * 1000L);
timestamp.setText(mDateFormat.format(calendar.getTime()));
amount.setText(dataToDisplay.getString(""String_Node_Str"") + dataToDisplay.getString(""String_Node_Str""));
}
 catch (JSONException e) {
e.printStackTrace();
}
break;
case TradeOrders:
if (convertView == null) {
v=mInflater.inflate(R.layout.fragment_trade_history_item,parent,false);
}
 else {
v=convertView;
}
pair=(TextView)v.findViewById(R.id.TradeHistoryPair);
rate=(TextView)v.findViewById(R.id.TradeHistoryRate);
amount=(TextView)v.findViewById(R.id.TradeHistoryAmount);
type=(TextView)v.findViewById(R.id.TradeHistoryType);
orderID=(TextView)v.findViewById(R.id.TradeHistoryOrderID);
timestamp=(TextView)v.findViewById(R.id.TradeHistoryTimestamp);
try {
String pairValue=dataToDisplay.getString(""String_Node_Str"");
Calendar calendar=Calendar.getInstance(TimeZone.getDefault(),Locale.getDefault());
orderID.setText(dataToDisplay.getString(""String_Node_Str""));
calendar.setTimeInMillis(Long.parseLong(dataToDisplay.getString(""String_Node_Str"")) * 1000L);
timestamp.setText(mDateFormat.format(calendar.getTime()));
pair.setText(pairValue.replace(""String_Node_Str"",""String_Node_Str"").toUpperCase(Locale.US));
rate.setText(dataToDisplay.getString(""String_Node_Str"") + ""String_Node_Str"" + pairValue.substring(4).toUpperCase(Locale.US));
amount.setText(dataToDisplay.getString(""String_Node_Str"") + ""String_Node_Str"" + pairValue.substring(0,3).toUpperCase(Locale.US));
type.setText(dataToDisplay.getString(""String_Node_Str""));
}
 catch (JSONException e) {
e.printStackTrace();
}
break;
case ActiveOrders:
if (convertView == null) {
v=mInflater.inflate(R.layout.fragment_active_orders_item,parent,false);
}
 else {
v=convertView;
}
pair=(TextView)v.findViewById(R.id.ActiveOrderPair);
type=(TextView)v.findViewById(R.id.ActiveOrderType);
amount=(TextView)v.findViewById(R.id.ActiveOrderAmount);
rate=(TextView)v.findViewById(R.id.ActiveOrderRate);
timestamp=(TextView)v.findViewById(R.id.ActiveOrderTimestamp);
orderID=(TextView)v.findViewById(R.id.ActiveOrderID);
ImageView remove=(ImageView)v.findViewById(R.id.removeOrder);
remove.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
final int order_id=dataToDisplay.optInt(""String_Node_Str"");
new AlertDialog.Builder(mContext).setTitle(""String_Node_Str"").setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
new CancelActiveOrder().execute(order_id);
}
}
).setNegativeButton(""String_Node_Str"",null).setMessage(""String_Node_Str"" + dataToDisplay.optString(""String_Node_Str"") + ""String_Node_Str"").show();
}
}
);
try {
String pairValue=dataToDisplay.getString(""String_Node_Str"");
Calendar calendar=Calendar.getInstance(TimeZone.getDefault(),Locale.getDefault());
pair.setText(pairValue.replace(""String_Node_Str"",""String_Node_Str"").toUpperCase(Locale.US));
type.setText(dataToDisplay.getString(""String_Node_Str""));
amount.setText(dataToDisplay.getString(""String_Node_Str"") + ""String_Node_Str"" + pairValue.substring(0,3).toUpperCase(Locale.US));
rate.setText(dataToDisplay.getString(""String_Node_Str"") + ""String_Node_Str"" + pairValue.substring(4).toUpperCase(Locale.US));
calendar.setTimeInMillis(Long.parseLong(dataToDisplay.getString(""String_Node_Str"")) * 1000L);
timestamp.setText(mDateFormat.format(calendar.getTime()));
orderID.setText(String.valueOf(mData.get(position).optInt(""String_Node_Str"")));
}
 catch (JSONException e) {
e.printStackTrace();
}
default :
break;
}
return v;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  View v=null;
  TextView timestamp;
  final JSONObject dataToDisplay=getItem(position);
  TextView orderID;
  TextView type;
  TextView amount;
  TextView pair;
  TextView rate;
switch (mListType) {
case Transactions:
    if (convertView == null) {
      v=mInflater.inflate(R.layout.fragment_trans_history_item,parent,false);
    }
 else {
      v=convertView;
    }
  TextView description=(TextView)v.findViewById(R.id.TransHistoryDesc);
timestamp=(TextView)v.findViewById(R.id.TransHistoryTimestamp);
amount=(TextView)v.findViewById(R.id.TransHistoryAmount);
try {
Calendar calendar=Calendar.getInstance(TimeZone.getDefault(),Locale.getDefault());
description.setText(dataToDisplay.getString(""String_Node_Str""));
calendar.setTimeInMillis(Long.parseLong(dataToDisplay.getString(""String_Node_Str"")) * 1000L);
timestamp.setText(mDateFormat.format(calendar.getTime()));
amount.setText(dataToDisplay.getString(""String_Node_Str"") + dataToDisplay.getString(""String_Node_Str""));
}
 catch (JSONException e) {
e.printStackTrace();
}
break;
case Trades:
if (convertView == null) {
v=mInflater.inflate(R.layout.fragment_trade_history_item,parent,false);
}
 else {
v=convertView;
}
pair=(TextView)v.findViewById(R.id.TradeHistoryPair);
rate=(TextView)v.findViewById(R.id.TradeHistoryRate);
amount=(TextView)v.findViewById(R.id.TradeHistoryAmount);
type=(TextView)v.findViewById(R.id.TradeHistoryType);
orderID=(TextView)v.findViewById(R.id.TradeHistoryOrderID);
timestamp=(TextView)v.findViewById(R.id.TradeHistoryTimestamp);
try {
String pairValue=dataToDisplay.getString(""String_Node_Str"");
Calendar calendar=Calendar.getInstance(TimeZone.getDefault(),Locale.getDefault());
orderID.setText(dataToDisplay.getString(""String_Node_Str""));
calendar.setTimeInMillis(Long.parseLong(dataToDisplay.getString(""String_Node_Str"")) * 1000L);
timestamp.setText(mDateFormat.format(calendar.getTime()));
pair.setText(pairValue.replace(""String_Node_Str"",""String_Node_Str"").toUpperCase(Locale.US));
rate.setText(dataToDisplay.getString(""String_Node_Str"") + ""String_Node_Str"" + pairValue.substring(4).toUpperCase(Locale.US));
amount.setText(dataToDisplay.getString(""String_Node_Str"") + ""String_Node_Str"" + pairValue.substring(0,3).toUpperCase(Locale.US));
type.setText(dataToDisplay.getString(""String_Node_Str""));
}
 catch (JSONException e) {
e.printStackTrace();
}
break;
case ActiveOrders:
if (convertView == null) {
v=mInflater.inflate(R.layout.fragment_active_orders_item,parent,false);
}
 else {
v=convertView;
}
pair=(TextView)v.findViewById(R.id.ActiveOrderPair);
type=(TextView)v.findViewById(R.id.ActiveOrderType);
amount=(TextView)v.findViewById(R.id.ActiveOrderAmount);
rate=(TextView)v.findViewById(R.id.ActiveOrderRate);
timestamp=(TextView)v.findViewById(R.id.ActiveOrderTimestamp);
orderID=(TextView)v.findViewById(R.id.ActiveOrderID);
ImageView remove=(ImageView)v.findViewById(R.id.removeOrder);
remove.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
final int order_id=dataToDisplay.optInt(""String_Node_Str"");
new AlertDialog.Builder(mContext).setTitle(""String_Node_Str"").setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
new CancelActiveOrder().execute(order_id);
}
}
).setNegativeButton(""String_Node_Str"",null).setMessage(""String_Node_Str"" + dataToDisplay.optString(""String_Node_Str"") + ""String_Node_Str"").show();
}
}
);
try {
String pairValue=dataToDisplay.getString(""String_Node_Str"");
Calendar calendar=Calendar.getInstance(TimeZone.getDefault(),Locale.getDefault());
pair.setText(pairValue.replace(""String_Node_Str"",""String_Node_Str"").toUpperCase(Locale.US));
type.setText(dataToDisplay.getString(""String_Node_Str""));
amount.setText(dataToDisplay.getString(""String_Node_Str"") + ""String_Node_Str"" + pairValue.substring(0,3).toUpperCase(Locale.US));
rate.setText(dataToDisplay.getString(""String_Node_Str"") + ""String_Node_Str"" + pairValue.substring(4).toUpperCase(Locale.US));
calendar.setTimeInMillis(Long.parseLong(dataToDisplay.getString(""String_Node_Str"")) * 1000L);
timestamp.setText(mDateFormat.format(calendar.getTime()));
orderID.setText(String.valueOf(mData.get(position).optInt(""String_Node_Str"")));
}
 catch (JSONException e) {
e.printStackTrace();
}
default :
break;
}
return v;
}",0.9994313658592062
146506,"/** 
 * Makes any request, which require authentication
 * @param method    Method of Trade API
 * @param arguments Additional arguments, which can exist for this method
 * @return Response of type JSONObject
 * @throws JSONException
 */
@Nullable public JSONObject makeRequest(@NotNull String method,Map<String,String> arguments) throws JSONException {
  if (key.length() == 0 || secret.length() == 0) {
    return new JSONObject(""String_Node_Str"");
  }
  if (arguments == null) {
    arguments=new HashMap<>();
  }
  arguments.put(""String_Node_Str"",method);
  arguments.put(""String_Node_Str"",""String_Node_Str"" + ++nonce);
  String postData=""String_Node_Str"";
  for (Iterator<Map.Entry<String,String>> it=arguments.entrySet().iterator(); it.hasNext(); ) {
    Map.Entry<String,String> ent=it.next();
    if (postData.length() > 0) {
      postData+=""String_Node_Str"";
    }
    postData+=ent.getKey() + ""String_Node_Str"" + ent.getValue();
  }
  try {
    _key=new SecretKeySpec(secret.getBytes(""String_Node_Str""),""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException uee) {
    System.err.println(""String_Node_Str"" + uee.toString());
    return null;
  }
  try {
    mac=Mac.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException nsae) {
    System.err.println(""String_Node_Str"" + nsae.toString());
    return null;
  }
  try {
    mac.init(_key);
  }
 catch (  InvalidKeyException ike) {
    System.err.println(""String_Node_Str"" + ike.toString());
    return null;
  }
  try {
    HttpURLConnection connection=(HttpURLConnection)(new URL(""String_Node_Str"")).openConnection();
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    connection.setRequestProperty(""String_Node_Str"",key);
    byte[] array=mac.doFinal(postData.getBytes(""String_Node_Str""));
    connection.setRequestProperty(""String_Node_Str"",byteArrayToHexString(array));
    DataOutputStream wr=new DataOutputStream(connection.getOutputStream());
    wr.writeBytes(postData);
    wr.flush();
    wr.close();
    InputStream response=connection.getInputStream();
    StringBuilder sb=new StringBuilder();
    if (connection.getResponseCode() == 200) {
      String line;
      BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(response));
      while ((line=bufferedReader.readLine()) != null) {
        sb.append(line);
      }
      return new JSONObject(sb.toString());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return null;
}","/** 
 * Makes any request, which require authentication
 * @param method    Method of Trade API
 * @param arguments Additional arguments, which can exist for this method
 * @return Response of type JSONObject
 * @throws JSONException
 */
@Nullable public JSONObject makeRequest(@NotNull String method,Map<String,String> arguments) throws JSONException {
  if (key.length() == 0 || secret.length() == 0) {
    return new JSONObject(""String_Node_Str"");
  }
  if (arguments == null) {
    arguments=new HashMap<>();
  }
  arguments.put(""String_Node_Str"",method);
  arguments.put(""String_Node_Str"",""String_Node_Str"" + ++nonce);
  String postData=""String_Node_Str"";
  for (Iterator<Map.Entry<String,String>> it=arguments.entrySet().iterator(); it.hasNext(); ) {
    Map.Entry<String,String> ent=it.next();
    if (postData.length() > 0) {
      postData+=""String_Node_Str"";
    }
    postData+=ent.getKey() + ""String_Node_Str"" + ent.getValue();
  }
  try {
    _key=new SecretKeySpec(secret.getBytes(""String_Node_Str""),""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException uee) {
    System.err.println(""String_Node_Str"" + uee.toString());
    return null;
  }
  try {
    mac=Mac.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException nsae) {
    System.err.println(""String_Node_Str"" + nsae.toString());
    return null;
  }
  try {
    mac.init(_key);
  }
 catch (  InvalidKeyException ike) {
    System.err.println(""String_Node_Str"" + ike.toString());
    return null;
  }
  HttpURLConnection connection=null;
  BufferedReader bufferedReader=null;
  try {
    connection=(HttpURLConnection)(new URL(TRADE_API_URL)).openConnection();
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    connection.setRequestProperty(""String_Node_Str"",key);
    byte[] array=mac.doFinal(postData.getBytes(""String_Node_Str""));
    connection.setRequestProperty(""String_Node_Str"",byteArrayToHexString(array));
    DataOutputStream wr=new DataOutputStream(connection.getOutputStream());
    wr.writeBytes(postData);
    wr.flush();
    wr.close();
    InputStream response=connection.getInputStream();
    StringBuilder sb=new StringBuilder();
    if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
      String line;
      bufferedReader=new BufferedReader(new InputStreamReader(response));
      while ((line=bufferedReader.readLine()) != null) {
        sb.append(line);
      }
      return new JSONObject(sb.toString());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (connection != null) {
      connection.disconnect();
    }
    if (bufferedReader != null) {
      try {
        bufferedReader.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  return null;
}",0.922907488986784
146507,"/** 
 * Makes simple non-authenticated request
 * @param url URL of Trade API
 * @return Response of type JSONObject
 * @throws JSONException
 */
@Nullable public JSONObject makeRequest(String url) throws JSONException {
  try {
    HttpURLConnection connection=(HttpURLConnection)(new URL(url)).openConnection();
    InputStream response=connection.getInputStream();
    StringBuilder sb=new StringBuilder();
    if (connection.getResponseCode() == 200) {
      BufferedReader rd=new BufferedReader(new InputStreamReader(response));
      String line;
      while ((line=rd.readLine()) != null) {
        sb.append(line);
      }
      response.close();
      rd.close();
      return new JSONObject(sb.toString());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return null;
}","/** 
 * Makes simple non-authenticated request
 * @param urlString URL of Trade API
 * @return Response of type JSONObject
 * @throws JSONException
 */
@Nullable public JSONObject makeRequest(String urlString) throws JSONException {
  HttpURLConnection connection=null;
  BufferedReader rd=null;
  try {
    URL url=new URL(urlString);
    connection=(HttpURLConnection)url.openConnection();
    InputStream response=connection.getInputStream();
    StringBuilder sb=new StringBuilder();
    if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
      rd=new BufferedReader(new InputStreamReader(response));
      String line;
      while ((line=rd.readLine()) != null) {
        sb.append(line);
      }
      return new JSONObject(sb.toString());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (connection != null) {
      connection.disconnect();
    }
    if (rd != null) {
      try {
        rd.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  return null;
}",0.7466379774072082
146508,"@Override public Loader<JSONObject> onCreateLoader(int id,Bundle args){
  if (mNoItems != null) {
    mNoItems.setVisibility(View.GONE);
  }
  if (mLoadingView != null) {
    mListView.setEmptyView(mLoadingView);
  }
  return new OrdersLoader(getActivity(),null,ListTypes.ActiveOrders);
}","@Override public Loader<JSONObject> onCreateLoader(int id,Bundle args){
  if (mNoItems != null) {
    mNoItems.setVisibility(View.GONE);
  }
  if (mLoadingView != null) {
    mListView.setEmptyView(mLoadingView);
  }
  return new OrdersLoader(getActivity(),null,ListType.ActiveOrders);
}",0.9982608695652174
146509,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  mListView=(ListView)getView().findViewById(R.id.ActiveOrdersContainer);
  mAdapter=new OrdersAdapter(getActivity(),ListTypes.ActiveOrders);
  mLoadingView=(ProgressBar)getView().findViewById(R.id.Loading);
  mNoItems=(TextView)getView().findViewById(R.id.NoItems);
  mListView.setEmptyView(mLoadingView);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  mListView=(ListView)getView().findViewById(R.id.ActiveOrdersContainer);
  mAdapter=new OrdersAdapter(getActivity(),ListType.ActiveOrders);
  mLoadingView=(ProgressBar)getView().findViewById(R.id.Loading);
  mNoItems=(TextView)getView().findViewById(R.id.NoItems);
  mListView.setEmptyView(mLoadingView);
}",0.9986893840104848
146510,"/** 
 * Called when the activity is first created.
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  AppRater.app_launched(this);
  BitmapDrawable bg=(BitmapDrawable)getResources().getDrawable(R.drawable.bg_striped);
  bg.setTileModeXY(Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setBackgroundDrawable(bg);
  }
  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);
  alarmSet=sharedPreferences.getBoolean(""String_Node_Str"",false);
  if (alarmSet) {
    setRecurringAlarm(sharedPreferences.getLong(""String_Node_Str"",30000));
  }
  mDrawerListItems=getResources().getStringArray(R.array.NavSections);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerList=(ListView)findViewById(R.id.left_drawer);
  mDrawerList.setAdapter(new ArrayAdapter<>(this,R.layout.drawer_list_item,mDrawerListItems));
  mDrawerList.setOnItemClickListener(new DrawerItemClickListener());
  app=new App(this);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.app_name,R.string.app_name){
    public void onDrawerClosed(    View view){
      invalidateOptionsMenu();
    }
    public void onDrawerOpened(    View drawerView){
      invalidateOptionsMenu();
    }
  }
;
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  getActionBar().setHomeButtonEnabled(true);
  if (savedInstanceState == null) {
    getFragmentManager().beginTransaction().add(R.id.content_frame,mHomeFragment).commit();
  }
}","/** 
 * Called when the activity is first created.
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  AppRater.app_launched(this);
  BitmapDrawable bg=(BitmapDrawable)getResources().getDrawable(R.drawable.bg_striped);
  bg.setTileModeXY(Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setBackgroundDrawable(bg);
  }
  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);
  alarmSet=sharedPreferences.getBoolean(""String_Node_Str"",false);
  if (alarmSet) {
    setRecurringAlarm(sharedPreferences.getLong(""String_Node_Str"",30000));
  }
  mDrawerListItems=getResources().getStringArray(R.array.NavSections);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerList=(ListView)findViewById(R.id.left_drawer);
  mDrawerList.setAdapter(new ArrayAdapter<>(this,R.layout.drawer_list_item,mDrawerListItems));
  mDrawerList.setOnItemClickListener(new DrawerItemClickListener());
  app=new App(this);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.app_name,R.string.app_name){
    public void onDrawerClosed(    View view){
      invalidateOptionsMenu();
    }
    public void onDrawerOpened(    View drawerView){
      invalidateOptionsMenu();
    }
  }
;
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  getActionBar().setHomeButtonEnabled(true);
  if (savedInstanceState == null) {
    displayItem(0);
  }
}",0.9703389830508474
146511,"@Override public void run(){
  fragmentManager.beginTransaction().replace(R.id.content_frame,fr).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(String.valueOf(position)).commit();
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setTitle(mDrawerListItems[position]);
  }
}","@Override public void run(){
  FragmentTransaction transaction=fragmentManager.beginTransaction().replace(R.id.content_frame,fr).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
  if (position != 0) {
    transaction.addToBackStack(String.valueOf(position));
  }
  transaction.commit();
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setTitle(mDrawerListItems[position]);
  }
}",0.8778523489932886
146512,"/** 
 * Displays selected fragment
 * @param position Position at the list (0-based)
 */
private void displayItem(final int position){
  Fragment fragment=null;
  final FragmentManager fragmentManager=getFragmentManager();
switch (position) {
case 0:
    fragment=mHomeFragment;
  fragmentManager.popBackStack(null,FragmentManager.POP_BACK_STACK_INCLUSIVE);
break;
case 1:
fragment=new OrdersBookFragment();
break;
case 2:
fragment=new ActiveOrdersFragment();
break;
case 3:
fragment=new TradeHistoryFragment();
break;
case 4:
fragment=new TransHistoryFragment();
break;
case 5:
fragment=new ChartsFragment();
break;
case 6:
fragment=new SettingsFragment();
break;
case 7:
fragment=new NotifiersFragment();
break;
case 8:
fragment=new HelpFragment();
break;
default :
break;
}
final Fragment fr=fragment;
if (fr != null) {
int delay=250;
new Handler().postDelayed(new Runnable(){
@Override public void run(){
fragmentManager.beginTransaction().replace(R.id.content_frame,fr).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(String.valueOf(position)).commit();
ActionBar actionBar=getActionBar();
if (actionBar != null) {
actionBar.setTitle(mDrawerListItems[position]);
}
}
}
,delay);
mDrawerList.setItemChecked(position,true);
mDrawerList.setSelection(position);
mDrawerLayout.closeDrawer(mDrawerList);
}
}","/** 
 * Displays selected fragment
 * @param position Position at the list (0-based)
 */
private void displayItem(final int position){
  Fragment fragment=null;
  final FragmentManager fragmentManager=getFragmentManager();
switch (position) {
case 0:
    fragment=mHomeFragment;
  fragmentManager.popBackStack(null,FragmentManager.POP_BACK_STACK_INCLUSIVE);
break;
case 1:
fragment=new OrdersBookFragment();
break;
case 2:
fragment=new ActiveOrdersFragment();
break;
case 3:
fragment=new TradeHistoryFragment();
break;
case 4:
fragment=new TransHistoryFragment();
break;
case 5:
fragment=new ChartsFragment();
break;
case 6:
fragment=new SettingsFragment();
break;
case 7:
fragment=new NotifiersFragment();
break;
case 8:
fragment=new HelpFragment();
break;
default :
break;
}
final Fragment fr=fragment;
if (fr != null) {
int delay=250;
new Handler().postDelayed(new Runnable(){
@Override public void run(){
FragmentTransaction transaction=fragmentManager.beginTransaction().replace(R.id.content_frame,fr).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
if (position != 0) {
transaction.addToBackStack(String.valueOf(position));
}
transaction.commit();
ActionBar actionBar=getActionBar();
if (actionBar != null) {
actionBar.setTitle(mDrawerListItems[position]);
}
}
}
,delay);
mDrawerList.setItemChecked(position,true);
mDrawerList.setSelection(position);
mDrawerLayout.closeDrawer(mDrawerList);
}
}",0.9704271631982476
146513,"@Override public void onBackPressed(){
  super.onBackPressed();
  FragmentManager fm=getFragmentManager();
  if (fm.getBackStackEntryCount() != 0) {
    String stackName=fm.getBackStackEntryAt(fm.getBackStackEntryCount() - 1).getName();
    mDrawerList.setItemChecked(Integer.parseInt(stackName),true);
    mDrawerList.setSelection(Integer.parseInt(stackName));
  }
}","@Override public void onBackPressed(){
  super.onBackPressed();
  int switchToPosition=0;
  FragmentManager fm=getFragmentManager();
  if (fm.getBackStackEntryCount() != 0) {
    String stackName=fm.getBackStackEntryAt(fm.getBackStackEntryCount() - 1).getName();
    switchToPosition=Integer.parseInt(stackName);
  }
  mDrawerList.setItemChecked(switchToPosition,true);
  mDrawerList.setSelection(switchToPosition);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setTitle(mDrawerListItems[switchToPosition]);
  }
}",0.6067907995618839
146514,"@SuppressWarnings(""String_Node_Str"") @Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  Object systemSensorManager=XposedHelpers.getObjectField(param.thisObject,""String_Node_Str"");
  SparseArray<Sensor> sensors=getSensors(systemSensorManager);
  int handle=(Integer)(param.args[0]);
  Sensor sensor=sensors.get(handle);
  Context context=(Context)XposedHelpers.getObjectField(systemSensorManager,""String_Node_Str"");
  if (!isPackageAllowedToSeeTrueSensor(lpparam.processName,sensor,context) && getSensorStatus(sensor,context) == Constants.SENSOR_STATUS_MOCK_VALUES) {
    float[] values=getSensorValues(sensor,context);
    System.arraycopy(values,0,param.args[1],0,values.length);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  Object systemSensorManager=XposedHelpers.getObjectField(param.thisObject,""String_Node_Str"");
  SparseArray<Sensor> sensors=getSensors(systemSensorManager);
  int handle=(Integer)(param.args[0]);
  Sensor sensor=sensors.get(handle);
  Context context=AndroidAppHelper.currentApplication();
  if (!isPackageAllowedToSeeTrueSensor(lpparam.processName,sensor,context) && getSensorStatus(sensor,context) == Constants.SENSOR_STATUS_MOCK_VALUES) {
    float[] values=getSensorValues(sensor,context);
    System.arraycopy(values,0,param.args[1],0,values.length);
  }
}",0.9297374024130588
146515,"@Override public void modifySensor(final XC_LoadPackage.LoadPackageParam lpparam){
  XC_MethodHook mockSensorHook=new XC_MethodHook(){
    @SuppressWarnings(""String_Node_Str"") @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {
      Object systemSensorManager=XposedHelpers.getObjectField(param.thisObject,""String_Node_Str"");
      SparseArray<Sensor> sensors=getSensors(systemSensorManager);
      int handle=(Integer)(param.args[0]);
      Sensor sensor=sensors.get(handle);
      Context context=(Context)XposedHelpers.getObjectField(systemSensorManager,""String_Node_Str"");
      if (!isPackageAllowedToSeeTrueSensor(lpparam.processName,sensor,context) && getSensorStatus(sensor,context) == Constants.SENSOR_STATUS_MOCK_VALUES) {
        float[] values=getSensorValues(sensor,context);
        System.arraycopy(values,0,param.args[1],0,values.length);
      }
    }
  }
;
  XposedHelpers.findAndHookMethod(""String_Node_Str"",lpparam.classLoader,""String_Node_Str"",int.class,float[].class,int.class,long.class,mockSensorHook);
}","@Override public void modifySensor(final XC_LoadPackage.LoadPackageParam lpparam){
  XC_MethodHook mockSensorHook=new XC_MethodHook(){
    @SuppressWarnings(""String_Node_Str"") @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {
      Object systemSensorManager=XposedHelpers.getObjectField(param.thisObject,""String_Node_Str"");
      SparseArray<Sensor> sensors=getSensors(systemSensorManager);
      int handle=(Integer)(param.args[0]);
      Sensor sensor=sensors.get(handle);
      Context context=AndroidAppHelper.currentApplication();
      if (!isPackageAllowedToSeeTrueSensor(lpparam.processName,sensor,context) && getSensorStatus(sensor,context) == Constants.SENSOR_STATUS_MOCK_VALUES) {
        float[] values=getSensorValues(sensor,context);
        System.arraycopy(values,0,param.args[1],0,values.length);
      }
    }
  }
;
  XposedHelpers.findAndHookMethod(""String_Node_Str"",lpparam.classLoader,""String_Node_Str"",int.class,float[].class,int.class,long.class,mockSensorHook);
}",0.952744630071599
146516,"private boolean isWhitelistEnabled(){
  sharedPreferences.reload();
  return sharedPreferences.getString(Constants.PREFS_KEY_BLOCKLIST,""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"");
}","private boolean isWhitelistEnabled(){
  sharedPreferences.reload();
  return sharedPreferences.getString(Constants.PREFS_KEY_BLOCKLIST,BlocklistType.BLACKLIST.getValue()).equalsIgnoreCase(BlocklistType.WHITELIST.getValue());
}",0.7559808612440191
146517,"@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  if (!lpparam.packageName.equals(Constants.PACKAGE_NAME)) {
    @SuppressWarnings(""String_Node_Str"") List<Sensor> fullSensorList=new ArrayList<>((Collection<? extends Sensor>)param.getResult());
    Iterator<Sensor> iterator=fullSensorList.iterator();
    while (iterator.hasNext()) {
      Sensor sensor=iterator.next();
      if (!shouldAppHalt(lpparam.packageName,sensor) && getSensorStatus(sensor) == Constants.SENSOR_STATUS_REMOVE_SENSOR) {
        iterator.remove();
      }
    }
    param.setResult(fullSensorList);
  }
}","@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  if (!lpparam.packageName.equals(Constants.PACKAGE_NAME)) {
    @SuppressWarnings(""String_Node_Str"") List<Sensor> fullSensorList=new ArrayList<>((Collection<? extends Sensor>)param.getResult());
    Iterator<Sensor> iterator=fullSensorList.iterator();
    while (iterator.hasNext()) {
      Sensor sensor=iterator.next();
      if (!shouldAppHalt(lpparam.processName,sensor) && getSensorStatus(sensor) == Constants.SENSOR_STATUS_REMOVE_SENSOR) {
        iterator.remove();
      }
    }
    param.setResult(fullSensorList);
  }
}",0.991869918699187
146518,"/** 
 * Disable by removing the sensor data from the SensorManager. Apps will think the sensor does not exist.
 */
private void removeSensors(final LoadPackageParam lpparam){
  XposedHelpers.findAndHookMethod(""String_Node_Str"",lpparam.classLoader,""String_Node_Str"",new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      if (!lpparam.packageName.equals(Constants.PACKAGE_NAME)) {
        @SuppressWarnings(""String_Node_Str"") List<Sensor> fullSensorList=new ArrayList<>((Collection<? extends Sensor>)param.getResult());
        Iterator<Sensor> iterator=fullSensorList.iterator();
        while (iterator.hasNext()) {
          Sensor sensor=iterator.next();
          if (!shouldAppHalt(lpparam.packageName,sensor) && getSensorStatus(sensor) == Constants.SENSOR_STATUS_REMOVE_SENSOR) {
            iterator.remove();
          }
        }
        param.setResult(fullSensorList);
      }
    }
  }
);
}","/** 
 * Disable by removing the sensor data from the SensorManager. Apps will think the sensor does not exist.
 */
private void removeSensors(final LoadPackageParam lpparam){
  XposedHelpers.findAndHookMethod(""String_Node_Str"",lpparam.classLoader,""String_Node_Str"",new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      if (!lpparam.packageName.equals(Constants.PACKAGE_NAME)) {
        @SuppressWarnings(""String_Node_Str"") List<Sensor> fullSensorList=new ArrayList<>((Collection<? extends Sensor>)param.getResult());
        Iterator<Sensor> iterator=fullSensorList.iterator();
        while (iterator.hasNext()) {
          Sensor sensor=iterator.next();
          if (!shouldAppHalt(lpparam.processName,sensor) && getSensorStatus(sensor) == Constants.SENSOR_STATUS_REMOVE_SENSOR) {
            iterator.remove();
          }
        }
        param.setResult(fullSensorList);
      }
    }
  }
);
}",0.994824016563147
146519,"protected void showInfoDialog(){
  new AlertDialog.Builder(getContext()).setTitle(""String_Node_Str"").setMessage(""String_Node_Str"" + sensor.getName() + ""String_Node_Str""+ ""String_Node_Str""+ SensorUtil.getHumanStringType(sensor)+ ""String_Node_Str""+ ""String_Node_Str""+ sensor.getVendor()+ ""String_Node_Str""+ ""String_Node_Str""+ sensor.getMaximumRange()+ ""String_Node_Str"").show();
}","protected void showInfoDialog(){
  new AlertDialog.Builder(getContext()).setTitle(""String_Node_Str"").setMessage(""String_Node_Str"" + sensor.getName() + ""String_Node_Str""+ ""String_Node_Str""+ SensorUtil.getHumanStringType(sensor)+ ""String_Node_Str""+ ""String_Node_Str""+ sensor.getVendor()+ ""String_Node_Str""+ ""String_Node_Str""+ sensor.getMaximumRange()+ ""String_Node_Str""+ SensorUtil.getDescription(sensor)+ ""String_Node_Str"").show();
}",0.9333333333333332
146520,"@Override public void onCreate(){
  super.onCreate();
  SharedPreferences prefs=getSharedPreferences(Constants.PREFS_FILE_NAME,MODE_WORLD_READABLE);
  if (prefs.getBoolean(""String_Node_Str"",false)) {
    SensorManager sensorManager=(SensorManager)getSystemService(SENSOR_SERVICE);
    Sensor proximitySensor=sensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);
    String sensorKey=SensorUtil.generateUniqueSensorKey(proximitySensor);
    String mockValuesKey=SensorUtil.generateUniqueSensorMockValuesKey(proximitySensor);
    prefs.edit().putInt(sensorKey,Constants.SENSOR_STATUS_MOCK_VALUES).putString(mockValuesKey,""String_Node_Str"").remove(""String_Node_Str"").apply();
  }
}","@Override public void onCreate(){
  super.onCreate();
  SharedPreferences prefs=getSharedPreferences(Constants.PREFS_FILE_NAME,MODE_WORLD_READABLE);
  if (prefs.getBoolean(""String_Node_Str"",false)) {
    SensorManager sensorManager=(SensorManager)getSystemService(SENSOR_SERVICE);
    Sensor proximitySensor=sensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);
    String sensorKey=SensorUtil.generateUniqueSensorKey(proximitySensor);
    String mockValuesKey=SensorUtil.generateUniqueSensorMockValuesKey(proximitySensor);
    prefs.edit().putInt(sensorKey,Constants.SENSOR_STATUS_MOCK_VALUES).putString(mockValuesKey,proximitySensor.getMaximumRange() + ""String_Node_Str"").remove(""String_Node_Str"").apply();
  }
}",0.9741750358680056
146521,"public void ConcatenateFiles(List<Path> files){
  this.openTemp('W');
  for (  Path p : files) {
    try (BufferedReader in=Files.newBufferedReader(p,Charset.defaultCharset())){
      String line;
      while ((line=in.readLine()) != null) {
        this.output.write(line);
      }
      p.toFile().delete();
    }
 catch (    IOException ex) {
      log.log(Level.SEVERE,""String_Node_Str"" + files.toString(),ex);
    }
  }
  this.closeTemp('W');
}","public void ConcatenateFiles(List<Path> files){
  this.openTemp('W');
  for (  Path p : files) {
    try (BufferedReader in=Files.newBufferedReader(p,Charset.defaultCharset())){
      String line;
      while ((line=in.readLine()) != null) {
        this.output.write(line);
        this.output.write(System.lineSeparator());
      }
      p.toFile().delete();
    }
 catch (    IOException ex) {
      log.log(Level.SEVERE,""String_Node_Str"" + files.toString(),ex);
    }
  }
  this.closeTemp('W');
}",0.946259220231823
146522,"private long readNameHashBin(long hash){
  return hash >> 61;
}","private long readNameHashBin(long hash){
  return hash >> 60;
}",0.984126984126984
146523,"/** 
 * Writes the list of lines out to the output stream, append new lines after each line.
 * @param list
 * @param os
 * @throws IOException
 */
private void writeOut(List<String[]> list,OutputStream os) throws IOException {
  BufferedWriter writer=null;
  try {
    writer=new BufferedWriter(new OutputStreamWriter(os));
    for (    String[] s : list) {
      writer.write(StrArray.Join(s,delimiter));
      writer.write(""String_Node_Str"");
    }
    writer.flush();
  }
 catch (  IOException io) {
    log.log(Level.SEVERE,""String_Node_Str"" + os.toString(),io);
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      Exception e) {
      }
    }
  }
}","/** 
 * Writes the list of lines out to the output stream, append new lines after each line.
 * @param list
 * @param os
 * @throws IOException
 */
private void writeOut(List<String[]> list,OutputStream os) throws IOException {
  BufferedWriter writer=null;
  try {
    writer=new BufferedWriter(new OutputStreamWriter(os));
    for (    String[] s : list) {
      writer.write(StrArray.Join(s,delimiter));
      writer.write(System.lineSeparator());
    }
    writer.flush();
  }
 catch (  IOException io) {
    log.log(Level.SEVERE,""String_Node_Str"" + os.toString(),io);
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      Exception e) {
      }
    }
  }
}",0.9722814498933902
146524,"/** 
 * Reads the temporary files created by splitChunks method and merges them in a sorted manner into the output stream.
 * @param os
 * @throws IOException
 */
public void mergeChunks() throws IOException {
  OutputStream os=new FileOutputStream(this.tempFile.toFile());
  Map<StringWrapper,BufferedReader> map=new HashMap<>();
  List<BufferedReader> readers=new ArrayList<>();
  BufferedWriter writer=null;
  try {
    writer=new BufferedWriter(new OutputStreamWriter(os));
    for (int i=0; i < outputs.size(); i++) {
      BufferedReader reader=new BufferedReader(new FileReader(outputs.get(i)));
      readers.add(reader);
      String line=reader.readLine();
      if (line != null) {
        map.put(new StringWrapper(line.split(delimiter),colOrder),readers.get(i));
      }
    }
    List<StringWrapper> sorted=new LinkedList<>(map.keySet());
    while (map.size() > 0) {
      Collections.sort(sorted);
      StringWrapper line=sorted.remove(0);
      writer.write(StrArray.Join(line.string,delimiter));
      writer.write(""String_Node_Str"");
      BufferedReader reader=map.remove(line);
      String nextLine=reader.readLine();
      if (nextLine != null) {
        StringWrapper sw=new StringWrapper(nextLine.split(delimiter),colOrder);
        map.put(sw,reader);
        sorted.add(sw);
      }
    }
  }
 catch (  IOException io) {
    log.log(Level.SEVERE,""String_Node_Str"" + readers.size() + ""String_Node_Str""+ os.toString(),io);
  }
 finally {
    for (int i=0; i < readers.size(); i++) {
      try {
        readers.get(i).close();
      }
 catch (      Exception e) {
      }
    }
    for (int i=0; i < outputs.size(); i++) {
      outputs.get(i).delete();
    }
    try {
      writer.close();
    }
 catch (    Exception e) {
    }
  }
  os.close();
}","/** 
 * Reads the temporary files created by splitChunks method and merges them in a sorted manner into the output stream.
 * @param os
 * @throws IOException
 */
public void mergeChunks() throws IOException {
  OutputStream os=new FileOutputStream(this.tempFile.toFile());
  Map<StringWrapper,BufferedReader> map=new HashMap<>();
  List<BufferedReader> readers=new ArrayList<>();
  BufferedWriter writer=null;
  try {
    writer=new BufferedWriter(new OutputStreamWriter(os));
    for (int i=0; i < outputs.size(); i++) {
      BufferedReader reader=new BufferedReader(new FileReader(outputs.get(i)));
      String line=reader.readLine();
      if (line != null) {
        readers.add(reader);
        map.put(new StringWrapper(line.split(delimiter),colOrder),readers.get(readers.size() - 1));
      }
    }
    List<StringWrapper> sorted=new LinkedList<>(map.keySet());
    while (map.size() > 0) {
      Collections.sort(sorted);
      StringWrapper line=sorted.remove(0);
      writer.write(StrArray.Join(line.string,delimiter));
      writer.write(""String_Node_Str"");
      BufferedReader reader=map.remove(line);
      String nextLine=reader.readLine();
      if (nextLine != null) {
        StringWrapper sw=new StringWrapper(nextLine.split(delimiter),colOrder);
        map.put(sw,reader);
        sorted.add(sw);
      }
    }
  }
 catch (  IOException io) {
    log.log(Level.SEVERE,""String_Node_Str"" + readers.size() + ""String_Node_Str""+ os.toString(),io);
  }
 finally {
    for (int i=0; i < readers.size(); i++) {
      try {
        readers.get(i).close();
      }
 catch (      Exception e) {
        log.log(Level.SEVERE,""String_Node_Str"" + readers.get(i).toString());
      }
    }
    for (int i=0; i < outputs.size(); i++) {
      outputs.get(i).delete();
    }
    try {
      writer.close();
    }
 catch (    Exception e) {
    }
  }
  os.close();
}",0.9583333333333334
146525,"private void createTemp(Path path){
  try {
    this.tempFile=Files.createTempFile(path.toString(),""String_Node_Str"");
    this.tempFile.toFile().deleteOnExit();
  }
 catch (  IOException ex) {
    Logger.getLogger(TempDataClass.class.getName()).log(Level.SEVERE,null,ex);
  }
}","private void createTemp(Path path){
  try {
    this.tempFile=Files.createTempFile(path.toString(),""String_Node_Str"");
    this.tempFile.toFile().deleteOnExit();
    log.log(Level.FINE,""String_Node_Str"" + this.tempFile.toString());
  }
 catch (  IOException ex) {
    Logger.getLogger(TempDataClass.class.getName()).log(Level.SEVERE,null,ex);
  }
}",0.8881789137380192
146526,"/** 
 * Reads the input io stream and splits it into sorted chunks which are written to temporary files. 
 * @param in
 * @param identifier
 * @throws IOException
 */
public void splitChunks(InputStream in,String identifier){
  outputs.clear();
  BufferedReader br=null;
  List<String[]> lines=new ArrayList<>(maxChunkSize);
  log.log(Level.INFO,""String_Node_Str"" + identifier);
  try {
    br=new BufferedReader(new InputStreamReader(in));
    String line=null;
    int currChunkSize=0;
    while ((line=br.readLine()) != null) {
      lines.add(line.split(""String_Node_Str""));
      currChunkSize+=line.length() + 1;
      if (currChunkSize >= maxChunkSize) {
        currChunkSize=0;
        Collections.sort(lines,sorter);
        File file=new File(tempDirectory + ""String_Node_Str"" + System.currentTimeMillis());
        outputs.add(file);
        writeOut(lines,new FileOutputStream(file));
        lines.clear();
      }
    }
    Collections.sort(lines,sorter);
    File file=new File(tempDirectory + ""String_Node_Str"" + System.currentTimeMillis());
    outputs.add(file);
    writeOut(lines,new FileOutputStream(file));
    lines.clear();
  }
 catch (  IOException io) {
    log.log(Level.SEVERE,""String_Node_Str"" + in.toString(),io);
  }
 finally {
    if (br != null)     try {
      br.close();
    }
 catch (    Exception e) {
    }
  }
}","/** 
 * Reads the input io stream and splits it into sorted chunks which are written to temporary files. 
 * @param in
 * @param identifier
 * @throws IOException
 */
public void splitChunks(InputStream in,String identifier){
  outputs.clear();
  BufferedReader br=null;
  List<String[]> lines=new ArrayList<>(maxChunkSize);
  log.log(Level.INFO,""String_Node_Str"" + identifier);
  try {
    br=new BufferedReader(new InputStreamReader(in));
    String line=null;
    int currChunkSize=0;
    while ((line=br.readLine()) != null) {
      this.hasData=true;
      lines.add(line.split(""String_Node_Str""));
      currChunkSize+=line.length() + 1;
      if (currChunkSize >= maxChunkSize) {
        currChunkSize=0;
        Collections.sort(lines,sorter);
        String tmpfile=tempDirectory + ""String_Node_Str"" + System.currentTimeMillis();
        File file=new File(tmpfile);
        log.log(Level.FINE,""String_Node_Str"" + tmpfile + ""String_Node_Str""+ identifier);
        outputs.add(file);
        writeOut(lines,new FileOutputStream(file));
        lines.clear();
      }
    }
    Collections.sort(lines,sorter);
    File file=new File(tempDirectory + ""String_Node_Str"" + System.currentTimeMillis());
    outputs.add(file);
    writeOut(lines,new FileOutputStream(file));
    log.log(Level.FINE,""String_Node_Str"" + this.hasData);
    lines.clear();
  }
 catch (  IOException io) {
    log.log(Level.SEVERE,""String_Node_Str"" + in.toString(),io);
  }
 finally {
    if (br != null)     try {
      br.close();
    }
 catch (    Exception e) {
    }
  }
}",0.7874828060522696
146527,"public OutputEvents(String outfile,boolean debug){
  this.outfile=Paths.get(outfile);
  this.supportfile=Paths.get(outfile + ""String_Node_Str"");
  this.debug=debug;
  if (!this.outfile.toFile().exists())   try {
    this.outfile.toFile().createNewFile();
  }
 catch (  IOException ex) {
    Logger.getLogger(OutputEvents.class.getName()).log(Level.SEVERE,null,ex);
  }
 else {
    this.outfile.toFile().delete();
    try {
      this.outfile.toFile().createNewFile();
    }
 catch (    IOException ex) {
      Logger.getLogger(OutputEvents.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}","public OutputEvents(String outfile,boolean debug){
  this.outfile=Paths.get(outfile);
  this.supportfile=Paths.get(outfile + ""String_Node_Str"");
  this.debug=debug;
  if (!this.outfile.toFile().exists())   try {
    this.outfile.toFile().createNewFile();
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"" + outfile,ex);
    System.exit(-1);
  }
 else {
    this.outfile.toFile().delete();
    try {
      this.outfile.toFile().createNewFile();
    }
 catch (    IOException ex) {
      log.log(Level.SEVERE,""String_Node_Str"" + outfile,ex);
      System.exit(-1);
    }
  }
}",0.7755443886097152
146528,"public void WriteOut(){
  if (this.sets == null) {
    return;
  }
  try (BufferedWriter output=Files.newBufferedWriter(outfile,Charset.forName(""String_Node_Str""),StandardOpenOption.APPEND)){
    Collections.sort(sets);
    for (    finalSets event : this.sets) {
      String outLine=join(event.Chr(),String.valueOf(event.Start()),String.valueOf(event.InnerStart()),String.valueOf(event.InnerEnd()),String.valueOf(event.End()),String.valueOf(event.svType),String.valueOf(event.DiscSupport()),String.valueOf(event.SplitSupport()),String.valueOf(event.UnbalancedSplitSupport()),String.valueOf(event.SumFullSupport()));
      output.write(outLine);
    }
  }
 catch (  IOException ex) {
    Logger.getLogger(OutputEvents.class.getName()).log(Level.SEVERE,null,ex);
  }
  if (debug) {
    try (BufferedWriter support=Files.newBufferedWriter(supportfile,Charset.defaultCharset())){
      for (      finalSets event : this.sets) {
        support.write(event.getSupportReadStr());
        support.newLine();
      }
    }
 catch (    IOException ex) {
      Logger.getLogger(OutputEvents.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}","public void WriteOut(){
  if (this.sets == null) {
    return;
  }
  try (BufferedWriter output=Files.newBufferedWriter(outfile,Charset.forName(""String_Node_Str""),StandardOpenOption.APPEND)){
    Collections.sort(sets);
    for (    finalSets event : this.sets) {
      String outLine=join(event.Chr(),String.valueOf(event.Start()),String.valueOf(event.InnerStart()),String.valueOf(event.InnerEnd()),String.valueOf(event.End()),String.valueOf(event.svType),String.valueOf(event.DiscSupport()),String.valueOf(event.SplitSupport()),String.valueOf(event.UnbalancedSplitSupport()),String.valueOf(event.SumFullSupport()));
      output.write(outLine);
    }
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"" + this.outfile.toString(),ex);
  }
  if (debug) {
    try (BufferedWriter support=Files.newBufferedWriter(supportfile,Charset.defaultCharset())){
      for (      finalSets event : this.sets) {
        support.write(event.getSupportReadStr());
        support.newLine();
      }
    }
 catch (    IOException ex) {
      log.log(Level.SEVERE,""String_Node_Str"" + this.supportfile.toString(),ex);
    }
  }
}",0.9137323943661972
146529,"private boolean isSplit(String[] segs){
  int fflags=Integer.parseInt(segs[3]);
  Cigar c=TextCigarCodec.getSingleton().decode(segs[7]);
  return (((fflags & 0x4) == 0x4 && (fflags & 0x8) != 0x8 && (fflags & 0x100) != 0x100) || (isOverSoftClipThreshold(c,segs[11].length()) && (fflags & 0x100) != 0x100));
}","private boolean isSplit(String[] segs){
  int fflags=Integer.parseInt(segs[3]);
  Cigar c=TextCigarCodec.getSingleton().decode(segs[7]);
  boolean segmentUnmapped=(fflags & 0x4) == 0x4 && (fflags & 0x8) != 0x8 && (fflags & 0x100) != 0x100;
  boolean softclipThresh=isOverSoftClipThreshold(c,segs[11].length()) && (fflags & 0x100) != 0x100;
  return segmentUnmapped || softclipThresh;
}",0.4682080924855491
146530,"public void RetrieveMissingAnchors(Map<String,SplitOutputHandle> splits,SAMRecordIterator samItr){
  if (!this.anchorlookup.isEmpty()) {
    int anchorcount=this.anchorlookup.keySet().stream().map((s) -> anchorlookup.get(s).keySet().size()).reduce(0,Integer::sum);
    System.err.println(""String_Node_Str"" + anchorcount + ""String_Node_Str"");
    Map<String,Boolean> anchorfound=new HashMap<>();
    for (    String s : anchorlookup.keySet()) {
      anchorfound.put(s,false);
    }
    while (samItr.hasNext()) {
      SAMRecord s;
      try {
        s=samItr.next();
      }
 catch (      SAMFormatException ex) {
        System.err.println(ex.getMessage());
        continue;
      }
      SAMReadGroupRecord r;
      if (this.checkRGs)       r=s.getReadGroup();
 else       r=new SAMReadGroupRecord(defId);
      String rg=r.getId();
      if (this.anchorlookup.containsKey(rg)) {
        if (s.getReadName().matches(""String_Node_Str"")) {
          String initread=s.getReadName().replaceAll(""String_Node_Str"",""String_Node_Str"");
          s.setReadName(initread);
        }
        String clone=rn.GetCloneName(s.getReadName(),s.getFlags());
        if (this.anchorlookup.get(rg).containsKey(clone)) {
          short num=rn.GetCloneNum(s.getReadName(),s.getFlags());
          if (this.anchorlookup.get(rg).get(clone) == num) {
            splits.get(rg).AddAnchor(s);
            anchorfound.put(clone,true);
          }
        }
      }
    }
    long found=anchorfound.keySet().stream().filter((e) -> anchorfound.get(e)).count();
    long notfound=(long)anchorfound.size() - found;
    System.err.println(""String_Node_Str"" + found + ""String_Node_Str""+ notfound+ ""String_Node_Str""+ anchorfound.size()+ ""String_Node_Str"");
  }
  samItr.close();
  splits.keySet().stream().forEach((s) -> splits.get(s).CloseAnchorHandle());
}","/** 
 * This is a recursive iteration over the bam file to grab anchor reads that were not associated with split reads the first time. Could be avoided if the 0x8 flag was set on the parent anchor read (you can pull them out in the first pass)
 * @param splits the temp split output handle
 * @param samItr a samjdk iterator over the input bam file.
 */
public void RetrieveMissingAnchors(Map<String,SplitOutputHandle> splits,SAMRecordIterator samItr){
  if (!this.anchorlookup.isEmpty()) {
    int anchorcount=this.anchorlookup.keySet().stream().map((s) -> anchorlookup.get(s).keySet().size()).reduce(0,Integer::sum);
    System.err.println(""String_Node_Str"" + anchorcount + ""String_Node_Str"");
    Map<String,Boolean> anchorfound=new HashMap<>();
    for (    String s : anchorlookup.keySet()) {
      anchorfound.put(s,false);
    }
    while (samItr.hasNext()) {
      SAMRecord s;
      try {
        s=samItr.next();
      }
 catch (      SAMFormatException ex) {
        System.err.println(ex.getMessage());
        continue;
      }
      SAMReadGroupRecord r;
      if (this.checkRGs)       r=s.getReadGroup();
 else       r=new SAMReadGroupRecord(defId);
      String rg=r.getId();
      if (this.anchorlookup.containsKey(rg)) {
        if (s.getReadName().matches(""String_Node_Str"")) {
          String initread=s.getReadName().replaceAll(""String_Node_Str"",""String_Node_Str"");
          s.setReadName(initread);
        }
        String clone=rn.GetCloneName(s.getReadName(),s.getFlags());
        if (this.anchorlookup.get(rg).containsKey(clone)) {
          short num=rn.GetCloneNum(s.getReadName(),s.getFlags());
          if (this.anchorlookup.get(rg).get(clone) == num) {
            splits.get(rg).AddAnchor(s);
            anchorfound.put(clone,true);
          }
        }
      }
    }
    long found=anchorfound.keySet().stream().filter((e) -> anchorfound.get(e)).count();
    long notfound=(long)anchorfound.size() - found;
    System.err.println(""String_Node_Str"" + found + ""String_Node_Str""+ notfound+ ""String_Node_Str""+ anchorfound.size()+ ""String_Node_Str"");
  }
  samItr.close();
  splits.keySet().stream().forEach((s) -> splits.get(s).CloseAnchorHandle());
}",0.9118964659034344
146531,"public void convertToVariant(Map<String,DivetOutputHandle> divets,Map<String,SplitOutputHandle> splits){
  if (!this.buffer.isEmpty())   this.dumpDataToDisk();
  final Map<String,List<Path>> sortHolder=new ConcurrentHashMap<>();
  this.SamTemp.entrySet().stream().forEach((e) -> {
    e.getValue().entrySet().stream().forEach((l) -> {
      l.getValue().dumpDataToDisk();
    }
);
    if (!sortHolder.containsKey(e.getKey()))     sortHolder.put(e.getKey(),Collections.synchronizedList(new ArrayList<>()));
    e.getValue().entrySet().parallelStream().forEach((l) -> {
      TextFileQuickSort t=new TextFileQuickSort(""String_Node_Str"",new int[]{0,1},this.tempOutBase);
      try {
        if (!l.getValue().getTempFile().toFile().canRead())         throw new FileNotFoundException(""String_Node_Str"");
        t.splitChunks(new FileInputStream(l.getValue().getTempFile().toFile()),String.valueOf(l.getKey()));
        t.mergeChunks();
      }
 catch (      FileNotFoundException ex) {
        log.log(Level.SEVERE,""String_Node_Str"",ex);
      }
catch (      IOException ex) {
        log.log(Level.SEVERE,""String_Node_Str"",ex);
      }
catch (      Exception ex) {
        log.log(Level.SEVERE,""String_Node_Str"",ex);
      }
      sortHolder.get(e.getKey()).add(t.getTemp());
    }
);
  }
);
  Map<String,TempSortFileHolder> mergeHolder=sortHolder.entrySet().stream().collect(Collectors.toConcurrentMap(e -> e.getKey(),(e) -> {
    TempSortFileHolder t=new TempSortFileHolder(Paths.get(this.tempOutBase));
    t.ConcatenateFiles(e.getValue());
    return t;
  }
));
  anchorlookup=new ConcurrentHashMap<>();
  try {
    mergeHolder.keySet().parallelStream().forEach((    String s) -> {
      try {
        splits.get(s).OpenAnchorHandle();
        splits.get(s).OpenFQHandle();
        divets.get(s).OpenHandle();
        TempFileConverter(splits.get(s),divets.get(s),s,mergeHolder.get(s));
        log.log(Level.FINE,""String_Node_Str"" + s);
        mergeHolder.get(s).close();
        divets.get(s).CloseHandle();
        splits.get(s).CloseAnchorHandle();
        splits.get(s).CloseFQHandle();
      }
 catch (      Exception ex) {
        log.log(Level.SEVERE,""String_Node_Str"",ex);
      }
    }
);
    if (debug)     this.debugWriter.close();
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
}","/** 
 * Main routine that takes all identified discordant alignments and ships them to appropriate temp output handles. 
 * @param divets the temporary discordant read output handle
 * @param splits the temporary split read output handle
 */
public void convertToVariant(Map<String,DivetOutputHandle> divets,Map<String,SplitOutputHandle> splits){
  if (!this.buffer.isEmpty())   this.dumpDataToDisk();
  final Map<String,List<Path>> sortHolder=new ConcurrentHashMap<>();
  this.SamTemp.entrySet().stream().forEach((e) -> {
    e.getValue().entrySet().stream().forEach((l) -> {
      l.getValue().dumpDataToDisk();
    }
);
    if (!sortHolder.containsKey(e.getKey()))     sortHolder.put(e.getKey(),Collections.synchronizedList(new ArrayList<>()));
    e.getValue().entrySet().parallelStream().forEach((l) -> {
      TextFileQuickSort t=new TextFileQuickSort(""String_Node_Str"",new int[]{0,1},this.tempOutBase);
      try {
        if (!l.getValue().getTempFile().toFile().canRead())         throw new FileNotFoundException(""String_Node_Str"");
        t.splitChunks(new FileInputStream(l.getValue().getTempFile().toFile()),String.valueOf(l.getKey()));
        t.mergeChunks();
      }
 catch (      FileNotFoundException ex) {
        log.log(Level.SEVERE,""String_Node_Str"",ex);
      }
catch (      IOException ex) {
        log.log(Level.SEVERE,""String_Node_Str"",ex);
      }
catch (      Exception ex) {
        log.log(Level.SEVERE,""String_Node_Str"",ex);
      }
      sortHolder.get(e.getKey()).add(t.getTemp());
    }
);
  }
);
  Map<String,TempSortFileHolder> mergeHolder=sortHolder.entrySet().stream().collect(Collectors.toConcurrentMap(e -> e.getKey(),(e) -> {
    TempSortFileHolder t=new TempSortFileHolder(Paths.get(this.tempOutBase));
    t.ConcatenateFiles(e.getValue());
    return t;
  }
));
  anchorlookup=new ConcurrentHashMap<>();
  try {
    mergeHolder.keySet().parallelStream().forEach((    String s) -> {
      try {
        splits.get(s).OpenAnchorHandle();
        splits.get(s).OpenFQHandle();
        divets.get(s).OpenHandle();
        TempFileConverter(splits.get(s),divets.get(s),s,mergeHolder.get(s));
        log.log(Level.FINE,""String_Node_Str"" + s);
        mergeHolder.get(s).close();
        divets.get(s).CloseHandle();
        splits.get(s).CloseAnchorHandle();
        splits.get(s).CloseFQHandle();
      }
 catch (      Exception ex) {
        log.log(Level.SEVERE,""String_Node_Str"",ex);
      }
    }
);
    if (debug)     this.debugWriter.close();
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
}",0.9521739130434784
146532,"private void TempFileConverter(SplitOutputHandle splits,DivetOutputHandle divets,String rg,TempSortFileHolder sam) throws InterruptedException, IOException, Exception {
  String line, last=""String_Node_Str"";
  String[] lastsegs=null;
  ArrayList<String[]> records=new ArrayList<>();
  BufferedReader input=sam.GetTempReader();
  Map<Integer,Integer> readState=new HashMap<>();
  readState.put(0,0);
  readState.put(1,0);
  readState.put(2,0);
  readState.put(3,0);
  while ((line=input.readLine()) != null) {
    line=line.trim();
    String[] segs=line.split(""String_Node_Str"");
    if (!segs[0].equals(last)) {
      if (!records.isEmpty()) {
        if (records.stream().anyMatch((s) -> isSplit(s))) {
          int scount=0, acount=0;
          for (          String[] r : records) {
            if (this.isAnchor(r)) {
              splits.AddAnchor(r);
              if (debug)               this.debugWriter.write(""String_Node_Str"" + StrUtils.StrArray.Join(r,""String_Node_Str"") + System.lineSeparator());
              acount++;
            }
 else {
              splits.AddSplit(r);
              if (debug)               this.debugWriter.write(""String_Node_Str"" + StrUtils.StrArray.Join(r,""String_Node_Str"") + System.lineSeparator());
              scount++;
            }
          }
          if (acount == 0 && scount > 0) {
            String[] temp=records.get(0);
            if (!anchorlookup.containsKey(rg))             anchorlookup.put(rg,new HashMap<>());
            anchorlookup.get(rg).put(temp[0],this.flipCloneNum(Short.parseShort(temp[1])));
          }
        }
        if (records.size() > 1) {
          Integer[] t=thresholds.get(rg);
          SamToDivet converter=new SamToDivet(last,t[0],t[1],t[2]);
          records.stream().forEach((r) -> {
            processXAZTag(r).stream().forEach((n) -> {
              converter.addLines(n);
            }
);
            converter.addLines(r);
            try {
              if (debug)               this.debugWriter.write(""String_Node_Str"" + StrUtils.StrArray.Join(r,""String_Node_Str"") + System.lineSeparator());
            }
 catch (            IOException ex) {
              ex.printStackTrace();
            }
          }
);
          converter.processLinesToDivets();
          int state=converter.getState();
          if (state != 0) {
            readState.put(state,readState.get(state) + 1);
          }
 else {
            readState.put(state,readState.get(state) + 1);
            divets.PrintDivetOut(converter.getDivets());
          }
        }
        records.clear();
      }
    }
    lastsegs=segs;
    records.add(segs);
    last=segs[0];
  }
  log.log(Level.FINE,""String_Node_Str"" + readState.get(0) + ""String_Node_Str""+ rg+ ""String_Node_Str"");
  if (readState.get(1) > 0 || readState.get(2) > 0 || readState.get(3) > 0) {
    if (readState.get(1) > 0)     log.log(Level.WARNING,""String_Node_Str"" + readState.get(1) + ""String_Node_Str""+ rg);
    if (readState.get(2) > 0)     log.log(Level.WARNING,""String_Node_Str"" + readState.get(2) + ""String_Node_Str""+ rg);
    if (readState.get(3) > 0)     log.log(Level.WARNING,""String_Node_Str"" + readState.get(3) + ""String_Node_Str""+ rg+ ""String_Node_Str"");
  }
  int splitTrims=splits.getTrims();
  int splitDiscards=splits.getDiscards();
  log.log(Level.INFO,""String_Node_Str"" + splitDiscards + ""String_Node_Str""+ splitTrims+ ""String_Node_Str""+ splits.getTotalSplits()+ ""String_Node_Str"");
  divets.CloseHandle();
  splits.CloseFQHandle();
  input.close();
}","private void TempFileConverter(SplitOutputHandle splits,DivetOutputHandle divets,String rg,TempSortFileHolder sam) throws InterruptedException, IOException, Exception {
  String line, last=""String_Node_Str"";
  String[] lastsegs=null;
  ArrayList<String[]> records=new ArrayList<>();
  BufferedReader input=sam.GetTempReader();
  Map<Integer,Integer> readState=new HashMap<>();
  readState.put(0,0);
  readState.put(1,0);
  readState.put(2,0);
  readState.put(3,0);
  while ((line=input.readLine()) != null) {
    line=line.trim();
    String[] segs=line.split(""String_Node_Str"");
    if (!segs[0].equals(last)) {
      if (!records.isEmpty()) {
        if (records.stream().anyMatch((s) -> isSplit(s))) {
          int scount=0, acount=0;
          for (          String[] r : records) {
            if (this.isAnchor(r)) {
              splits.AddAnchor(r);
              if (debug)               this.debugWriter.write(""String_Node_Str"" + StrUtils.StrArray.Join(r,""String_Node_Str"") + System.lineSeparator());
              acount++;
            }
 else {
              splits.AddSplit(r);
              if (debug)               this.debugWriter.write(""String_Node_Str"" + StrUtils.StrArray.Join(r,""String_Node_Str"") + System.lineSeparator());
              scount++;
            }
          }
          if (acount == 0 && scount > 0) {
            String[] temp=records.get(0);
            if (!anchorlookup.containsKey(rg))             anchorlookup.put(rg,new HashMap<>());
            anchorlookup.get(rg).put(temp[0],this.flipCloneNum(Short.parseShort(temp[1])));
          }
        }
        if (records.size() > 1) {
          Integer[] t=thresholds.get(rg);
          SamToDivet converter=new SamToDivet(last,t[0],t[1],t[2]);
          records.stream().forEach((r) -> {
            processXAZTag(r).stream().forEach((n) -> {
              converter.addLines(n);
            }
);
            converter.addLines(r);
            try {
              if (debug)               this.debugWriter.write(""String_Node_Str"" + StrUtils.StrArray.Join(r,""String_Node_Str"") + System.lineSeparator());
            }
 catch (            IOException ex) {
              ex.printStackTrace();
            }
          }
);
          converter.processLinesToDivets();
          int state=converter.getState();
          if (state != 0) {
            readState.put(state,readState.get(state) + 1);
          }
 else {
            readState.put(state,readState.get(state) + 1);
            divets.PrintDivetOut(converter.getDivets());
          }
        }
        records.clear();
      }
    }
    lastsegs=segs;
    records.add(segs);
    last=segs[0];
  }
  log.log(Level.FINE,""String_Node_Str"" + readState.get(0) + ""String_Node_Str""+ rg+ ""String_Node_Str"");
  if (readState.get(1) > 0 || readState.get(2) > 0 || readState.get(3) > 0) {
    if (readState.get(1) > 0)     log.log(Level.WARNING,""String_Node_Str"" + readState.get(1) + ""String_Node_Str""+ rg);
    if (readState.get(2) > 0)     log.log(Level.WARNING,""String_Node_Str"" + readState.get(2) + ""String_Node_Str""+ rg);
    if (readState.get(3) > 0)     log.log(Level.WARNING,""String_Node_Str"" + readState.get(3) + ""String_Node_Str""+ rg+ ""String_Node_Str"");
  }
  int splitTrims=splits.getTrims();
  int splitDiscards=splits.getDiscards();
  int splitErrors=splits.getErrors();
  log.log(Level.INFO,""String_Node_Str"" + splitDiscards + ""String_Node_Str""+ splitTrims+ ""String_Node_Str""+ splits.getTotalSplits()+ ""String_Node_Str"");
  if (splitErrors > 0) {
    log.log(Level.INFO,""String_Node_Str"" + splitErrors + ""String_Node_Str"");
  }
  divets.CloseHandle();
  splits.CloseFQHandle();
  input.close();
}",0.9798657718120806
146533,"public void bufferedAdd(SAMRecord a){
  String rname=a.getReadName();
  int rgflags=a.getFlags();
  if (((rgflags & 0x4) == 0x4 && (rgflags & 0x8) == 0x8))   return;
  if ((rgflags & 0x100) == 0x100)   return;
  SAMReadGroupRecord r;
  if (this.checkRGs)   r=a.getReadGroup();
 else   r=new SAMReadGroupRecord(defId);
  Integer[] t=this.thresholds.get(r.getId());
  int insert=Math.abs(a.getInferredInsertSize());
  int softclips=0;
  if (a.getCigarString().contains(""String_Node_Str""))   softclips=this.getCigarSoftClips(a.getCigar());
  double softthresh=(double)a.getReadLength() * 0.20d;
  boolean properMDist=false;
  boolean properOrient=true;
  if ((rgflags & 0x1) == 0x1)   if (insert > t[0] && insert < t[1] && softclips < softthresh)   properMDist=true;
  if ((rgflags & 0x2) != 0x2)   properOrient=false;
  if (properMDist && properOrient)   return;
  if (a.getReadName().matches(""String_Node_Str"")) {
    String initread=a.getReadName().replaceAll(""String_Node_Str"",""String_Node_Str"");
    a.setReadName(initread);
  }
  String clone=rn.GetCloneName(a.getReadName(),a.getFlags());
  short num=rn.GetCloneNum(a.getReadName(),a.getFlags());
  long rnHash=rn.ReadHash(clone);
  long bin=readNameHashBin(rnHash);
  if (!SamTemp.containsKey(r.getId()))   SamTemp.put(r.getId(),new ConcurrentHashMap<>());
  if (!SamTemp.get(r.getId()).containsKey(bin))   SamTemp.get(r.getId()).put(bin,new SamOutputHandle(this.threshold,r.getId(),this.tempOutBase));
  SamTemp.get(r.getId()).get(bin).bufferedAdd(a,rnHash,num);
}","/** 
 * Buffered method for adding SAMRecords for processing. Will spill to disk automatically when threshold is reached.
 * @param a a SAMRecord object
 */
public void bufferedAdd(SAMRecord a){
  String rname=a.getReadName();
  int rgflags=a.getFlags();
  if (((rgflags & 0x4) == 0x4 && (rgflags & 0x8) == 0x8))   return;
  if ((rgflags & 0x100) == 0x100)   return;
  SAMReadGroupRecord r;
  if (this.checkRGs)   r=a.getReadGroup();
 else   r=new SAMReadGroupRecord(defId);
  Integer[] t=this.thresholds.get(r.getId());
  int insert=Math.abs(a.getInferredInsertSize());
  int softclips=0;
  if (a.getCigarString().contains(""String_Node_Str""))   softclips=this.getCigarSoftClips(a.getCigar());
  double softthresh=(double)a.getReadLength() * 0.20d;
  boolean properMDist=false;
  boolean properOrient=true;
  if ((rgflags & 0x1) == 0x1)   if (insert > t[0] && insert < t[1] && softclips < softthresh)   properMDist=true;
  if ((rgflags & 0x2) != 0x2)   properOrient=false;
  if (properMDist && properOrient)   return;
  if (a.getReadName().matches(""String_Node_Str"")) {
    String initread=a.getReadName().replaceAll(""String_Node_Str"",""String_Node_Str"");
    a.setReadName(initread);
  }
  String clone=rn.GetCloneName(a.getReadName(),a.getFlags());
  short num=rn.GetCloneNum(a.getReadName(),a.getFlags());
  long rnHash=rn.ReadHash(clone);
  long bin=readNameHashBin(rnHash);
  if (!SamTemp.containsKey(r.getId()))   SamTemp.put(r.getId(),new ConcurrentHashMap<>());
  if (!SamTemp.get(r.getId()).containsKey(bin))   SamTemp.get(r.getId()).put(bin,new SamOutputHandle(this.threshold,r.getId(),this.tempOutBase));
  SamTemp.get(r.getId()).get(bin).bufferedAdd(a,rnHash,num);
}",0.8245229903034095
146534,"public synchronized void combineRecordMatcher(SamRecordMatcher s){
  s.SamTemp.keySet().forEach((k) -> {
    if (!this.SamTemp.containsKey(k)) {
      this.SamTemp.put(k,new ConcurrentHashMap<>());
    }
    s.SamTemp.get(k).keySet().forEach((c) -> {
      if (!this.SamTemp.get(k).containsKey(c))       this.SamTemp.get(k).put(c,s.SamTemp.get(k).get(c));
 else {
        log.log(Level.FINE,""String_Node_Str"" + k + ""String_Node_Str""+ c);
        this.SamTemp.get(k).get(c).combineTempFiles(s.SamTemp.get(k).get(c));
      }
    }
);
  }
);
}","/** 
 * Method that merges several child SamRecordMatcher objects with a parent object.
 * @param s SamRecordMatcher class
 */
public synchronized void combineRecordMatcher(SamRecordMatcher s){
  s.SamTemp.keySet().forEach((k) -> {
    if (!this.SamTemp.containsKey(k)) {
      this.SamTemp.put(k,new ConcurrentHashMap<>());
    }
    s.SamTemp.get(k).keySet().forEach((c) -> {
      if (!this.SamTemp.get(k).containsKey(c))       this.SamTemp.get(k).put(c,s.SamTemp.get(k).get(c));
 else {
        log.log(Level.FINE,""String_Node_Str"" + k + ""String_Node_Str""+ c);
        this.SamTemp.get(k).get(c).combineTempFiles(s.SamTemp.get(k).get(c));
      }
    }
);
  }
);
}",0.8949545078577337
146535,"public SamRecordMatcher(int threshold,boolean checkRGs,String tmpoutname,Map<String,Integer[]> thresholds,boolean debug){
  this.threshold=threshold;
  this.checkRGs=checkRGs;
  this.thresholds=thresholds;
  this.debug=debug;
  if (debug) {
    debugOut=Paths.get(""String_Node_Str"");
    try {
      this.debugWriter=Files.newBufferedWriter(this.debugOut,Charset.defaultCharset());
    }
 catch (    IOException ex) {
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
  this.tempOutBase=tmpoutname;
}","/** 
 * Creates a factory that processes sam entries for discordant and split reads.
 * @param threshold The number of alignments to save in memory before spilling to disk
 * @param checkRGs true if the user wants the samheader read groups treated separately
 * @param tmpoutname The base temporary file output name
 * @param thresholds Obtained from the BamMetadataGeneration class -- [0] = lower insert size threshold [1] = upper insert size threshold
 * @param debug true if debug ""samsupport.tab"" file should be generated 
 */
public SamRecordMatcher(int threshold,boolean checkRGs,String tmpoutname,Map<String,Integer[]> thresholds,boolean debug){
  this.threshold=threshold;
  this.checkRGs=checkRGs;
  this.thresholds=thresholds;
  this.debug=debug;
  if (debug) {
    debugOut=Paths.get(""String_Node_Str"");
    try {
      this.debugWriter=Files.newBufferedWriter(this.debugOut,Charset.defaultCharset());
    }
 catch (    IOException ex) {
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
  this.tempOutBase=tmpoutname;
}",0.6576402321083172
146536,"public String fq1File(){
  return this.fq1path.toString();
}","/** 
 * @return returns the absolute path of the temp FQ file
 */
public String fq1File(){
  return this.fq1path.toString();
}",0.6451612903225806
146537,"public boolean fileIsOpen(){
  return fileopen;
}","/** 
 * Checks if the temporary files are open for writing.
 * @return true if the handles are open. 
 */
public boolean fileIsOpen(){
  return fileopen;
}",0.4803921568627451
146538,"public int getTotalSplits(){
  return this.totalSplits.intValue();
}","/** 
 * @return returns the total number of processed (trimmed and normal) split reads.
 */
public int getTotalSplits(){
  return this.totalSplits.intValue();
}",0.5964912280701754
146539,"public void CloseAnchorHandle(){
  if (fileopen) {
    anchorOut.close();
  }
  fileopen=false;
}","/** 
 * Closes the temp Anchor handle file for writing.
 */
public void CloseAnchorHandle(){
  if (fileopen) {
    anchorOut.close();
  }
  fileopen=false;
}",0.7637795275590551
146540,"public void OpenFQHandle(){
  try {
    fq1=Files.newBufferedWriter(fq1path,Charset.defaultCharset());
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"");
  }
}","/** 
 * Opens the temp FQ handle file for writing. 
 */
public void OpenFQHandle(){
  try {
    fq1=Files.newBufferedWriter(fq1path,Charset.defaultCharset());
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
}",0.8624708624708625
146541,"public int getTrims(){
  return this.trimCounter.intValue();
}","/** 
 * @return returns the count of split reads that were too long and were trimmed.
 */
public int getTrims(){
  return this.trimCounter.intValue();
}",0.5794392523364486
146542,"public void OpenAnchorHandle(){
  anchorOut=anchor.makeBAMWriter(header,false,anchorpath.toFile());
  fileopen=true;
}","/** 
 * Opens the temp Anchor handle file for writing.
 */
public void OpenAnchorHandle(){
  anchorOut=anchor.makeBAMWriter(header,false,anchorpath.toFile());
  fileopen=true;
}",0.8
146543,"public int getDiscards(){
  return this.discardCounter.intValue();
}","/** 
 * @return returns the count of split reads that were too short for processing
 */
public int getDiscards(){
  return this.discardCounter.intValue();
}",0.6071428571428571
146544,"public synchronized void AddAnchor(SAMRecord s){
  if (!fileopen)   this.OpenAnchorHandle();
  anchorOut.addAlignment(s);
}","/** 
 * This adds an anchor to the temp anchor file
 * @param s A SAMRecord object
 */
public synchronized void AddAnchor(SAMRecord s){
  if (!fileopen)   this.OpenAnchorHandle();
  anchorOut.addAlignment(s);
}",0.7387387387387387
146545,"public SplitOutputHandle(String file,String file2,SAMFileHeader sam,int readlen){
  fq1path=Paths.get(file);
  anchorpath=Paths.get(file2);
  header=sam;
  if (readlen % 2 != 0)   readlen-=1;
  this.splitreadlen=readlen / 2;
}","/** 
 * This class generates the temporary output file handle for split read generation
 * @param file The temporary fq file for alignment
 * @param file2 The output handle for the anchoring reads
 * @param sam A Samheader class object
 * @param readlen The read length chosen for read trimming
 */
public SplitOutputHandle(String file,String file2,SAMFileHeader sam,int readlen){
  fq1path=Paths.get(file);
  anchorpath=Paths.get(file2);
  header=sam;
  if (readlen % 2 != 0)   readlen-=1;
  this.splitreadlen=readlen / 2;
}",0.6018641810918774
146546,"public void CloseFQHandle(){
  try {
    fq1.close();
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"");
  }
}","/** 
 * Closes the temp FQ handle.
 */
public void CloseFQHandle(){
  try {
    fq1.close();
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"");
  }
}",0.8745980707395499
146547,"public synchronized void AddSplit(String[] segs){
  if (!fileopen)   this.OpenFQHandle();
  String nl=System.lineSeparator();
  String rn1=""String_Node_Str"" + segs[2] + ""String_Node_Str"";
  String rn2=""String_Node_Str"" + segs[2] + ""String_Node_Str"";
  int len=segs[11].length();
  if (len % 2 != 0)   len-=1;
  int splitter=len / 2;
  String tS1, tS2, tQ1, tQ2;
  if (splitter < this.splitreadlen) {
    this.discardCounter.incrementAndGet();
    return;
  }
 else   if (splitter > this.splitreadlen) {
    int diff=splitter - this.splitreadlen;
    this.trimCounter.incrementAndGet();
    tS1=segs[11].substring(diff,splitter);
    tS2=segs[11].substring(splitter,(splitter * 2) - diff);
    tQ1=segs[12].substring(diff,splitter);
    tQ2=segs[12].substring(splitter,(splitter * 2) - diff);
  }
 else {
    tS1=segs[11].substring(0,splitter);
    tS2=segs[11].substring(splitter,splitter * 2);
    tQ1=segs[12].substring(0,splitter);
    tQ2=segs[12].substring(splitter,splitter * 2);
  }
  this.totalSplits.incrementAndGet();
  try {
    fq1.write(rn1 + nl + tS1+ nl+ ""String_Node_Str""+ nl+ tQ1+ nl);
    fq1.write(rn2 + nl + tS2+ nl+ ""String_Node_Str""+ nl+ tQ2+ nl);
    fq1.flush();
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
}","/** 
 * This adds an alignment to the split read temporary file output
 * @param segs String representation of a temporary SAMRecord object (first two columns have the bin and RG ids)
 */
public synchronized void AddSplit(String[] segs){
  if (!fileopen)   this.OpenFQHandle();
  String nl=System.lineSeparator();
  String rn1=""String_Node_Str"" + segs[2] + ""String_Node_Str"";
  String rn2=""String_Node_Str"" + segs[2] + ""String_Node_Str"";
  int len=segs[11].length();
  if (len % 2 != 0)   len-=1;
  int splitter=len / 2;
  String tS1, tS2, tQ1, tQ2;
  if (segs[11].length() != segs[12].length()) {
    this.errorCounter.getAndIncrement();
    return;
  }
 else   if (splitter < this.splitreadlen) {
    this.discardCounter.incrementAndGet();
    return;
  }
 else   if (splitter > this.splitreadlen) {
    int diff=splitter - this.splitreadlen;
    this.trimCounter.incrementAndGet();
    tS1=segs[11].substring(diff,splitter);
    tS2=segs[11].substring(splitter,(splitter * 2) - diff);
    tQ1=segs[12].substring(diff,splitter);
    tQ2=segs[12].substring(splitter,(splitter * 2) - diff);
  }
 else {
    tS1=segs[11].substring(0,splitter);
    tS2=segs[11].substring(splitter,splitter * 2);
    tQ1=segs[12].substring(0,splitter);
    tQ2=segs[12].substring(splitter,splitter * 2);
  }
  this.totalSplits.incrementAndGet();
  try {
    fq1.write(rn1 + nl + tS1+ nl+ ""String_Node_Str""+ nl+ tQ1+ nl);
    fq1.write(rn2 + nl + tS2+ nl+ ""String_Node_Str""+ nl+ tQ2+ nl);
    fq1.flush();
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
}",0.8948294055575097
146548,"public String getAnchorFileStr(){
  return this.anchorpath.toAbsolutePath().toString();
}","/** 
 * @return returns the absolute path of the temp Anchor file
 */
public String getAnchorFileStr(){
  return this.anchorpath.toAbsolutePath().toString();
}",0.717741935483871
146549,"public void processLinesToDivets(){
  Map<Short,ArrayList<String[]>> holder=new HashMap<>();
  for (  String[] array : lines) {
    short num=Short.parseShort(array[1]);
    if (!holder.containsKey(num))     holder.put(num,new ArrayList<String[]>());
    holder.get(num).add(array);
  }
  short comp=1;
  if (!holder.containsKey(comp)) {
    System.err.println(""String_Node_Str"");
    return;
  }
  short second=2;
  if (!holder.containsKey(second)) {
    System.err.println(""String_Node_Str"");
    return;
  }
  for (  String[] first : holder.get(comp)) {
    String forient, fchr=first[4], fstart=first[5], fend=String.valueOf(Integer.parseInt(first[5]) + first[11].length()), fmdz=this.getMDZTag(first,first[11]);
    int fedit=Integer.parseInt(this.getNMITag(first));
    double fprob=1.0d - Math.pow(10d,Double.parseDouble(first[6]) / -10d);
    int fflags=Integer.parseInt(first[3]);
    if ((fflags & 0x10) == 0x10)     forient=""String_Node_Str"";
 else     forient=""String_Node_Str"";
    for (    String[] sec : holder.get(second)) {
      if (sec[5].startsWith(""String_Node_Str""))       System.out.println(StrUtils.StrArray.Join(sec,""String_Node_Str""));
      String sorient, schr=sec[4], sstart=sec[5], send=String.valueOf(Integer.parseInt(sec[5]) + sec[11].length()), smdz=this.getMDZTag(sec,sec[11]);
      int concordant=0, sedit=Integer.parseInt(this.getNMITag(sec));
      double sprob=1.0d - Math.pow(10d,Double.parseDouble(sec[6]) / -10d);
      int sflags=Integer.parseInt(sec[3]);
      if ((sflags & 0x10) == 0x10)       sorient=""String_Node_Str"";
 else       sorient=""String_Node_Str"";
      String svcall=this.generateSVCall(fchr,schr,Integer.parseInt(fstart),Integer.parseInt(sstart),Integer.parseInt(fend),Integer.parseInt(send),forient,sorient);
      if (svcall.equals(""String_Node_Str""))       continue;
      double avgphred=stats.calcAvgPhred.calcAvgPhred(first[12],sec[12]);
      divet d=new divet(clone,fchr,fstart,fend,forient,schr,sstart,send,sorient,svcall,String.valueOf((fedit + sedit) / 2d),String.valueOf(avgphred),String.valueOf((sprob + fprob) / 2d),String.valueOf(concordant));
      divets.add(d);
    }
  }
}","public void processLinesToDivets(){
  Map<Short,ArrayList<String[]>> holder=new HashMap<>();
  for (  String[] array : lines) {
    short num=Short.parseShort(array[1]);
    if (!holder.containsKey(num))     holder.put(num,new ArrayList<String[]>());
    holder.get(num).add(array);
  }
  short comp=1;
  if (!holder.containsKey(comp)) {
    return;
  }
  short second=2;
  if (!holder.containsKey(second)) {
    return;
  }
  for (  String[] first : holder.get(comp)) {
    String forient, fchr=first[4], fstart=first[5], fend=String.valueOf(Integer.parseInt(first[5]) + first[11].length()), fmdz=this.getMDZTag(first,first[11]);
    int fedit=Integer.parseInt(this.getNMITag(first));
    double fprob=1.0d - Math.pow(10d,Double.parseDouble(first[6]) / -10d);
    int fflags=Integer.parseInt(first[3]);
    if ((fflags & 0x10) == 0x10)     forient=""String_Node_Str"";
 else     forient=""String_Node_Str"";
    for (    String[] sec : holder.get(second)) {
      if (sec[5].startsWith(""String_Node_Str""))       System.out.println(StrUtils.StrArray.Join(sec,""String_Node_Str""));
      String sorient, schr=sec[4], sstart=sec[5], send=String.valueOf(Integer.parseInt(sec[5]) + sec[11].length()), smdz=this.getMDZTag(sec,sec[11]);
      int concordant=0, sedit=Integer.parseInt(this.getNMITag(sec));
      double sprob=1.0d - Math.pow(10d,Double.parseDouble(sec[6]) / -10d);
      int sflags=Integer.parseInt(sec[3]);
      if ((sflags & 0x10) == 0x10)       sorient=""String_Node_Str"";
 else       sorient=""String_Node_Str"";
      String svcall=this.generateSVCall(fchr,schr,Integer.parseInt(fstart),Integer.parseInt(sstart),Integer.parseInt(fend),Integer.parseInt(send),forient,sorient);
      if (svcall.equals(""String_Node_Str""))       continue;
      double avgphred=stats.calcAvgPhred.calcAvgPhred(first[12],sec[12]);
      divet d=new divet(clone,fchr,fstart,fend,forient,schr,sstart,send,sorient,svcall,String.valueOf((fedit + sedit) / 2d),String.valueOf(avgphred),String.valueOf((sprob + fprob) / 2d),String.valueOf(concordant));
      divets.add(d);
    }
  }
}",0.9539848197343452
146550,"private SetMap<BufferedInitialSet> populateDivets(FlatFile file){
  SetMap<BufferedInitialSet> tSet=new SetMap<>();
  readNameMappings divMaps=new readNameMappings();
  ArrayList<ReadPair> tempholder=new ArrayList<>();
  BufferedReader divetReader=ReaderReturn.openFile(file.getDivet().toFile());
  try {
    String line;
    String[] segs;
    while ((line=divetReader.readLine()) != null) {
      segs=line.split(""String_Node_Str"");
      if (segs.length < 13)       continue;
      if ((segs[1].equals(this.chr))) {
        divMaps.addRead(segs[0].trim());
        if (!segs[13].equals(""String_Node_Str"") && Double.valueOf(segs[12]) > pfilter && !segs[9].equals(""String_Node_Str"") && !segs[9].equals(""String_Node_Str"")) {
          ReadPair rp=new ReadPair(line,file,readEnum.IsDisc);
          tempholder.add(rp);
        }
      }
    }
  }
 catch (  IOException ex) {
    Logger.getLogger(BufferedReader.class.getName()).log(Level.SEVERE,null,ex);
  }
  int gapCount=0;
  int curSetCount=0;
  for (  ReadPair d : tempholder) {
    d.setMapCount(divMaps.retMap(d.Name()));
    if (this.useGapOverlap) {
      if (gaps.checkGapOverlap(d)) {
        gapCount++;
        continue;
      }
    }
    if (!tSet.checkAndCombinePairs(d)) {
      BufferedInitialSet temp=new BufferedInitialSet(this.buffer,""String_Node_Str"");
      temp.bufferedAdd(d);
      tSet.addBedData(temp);
      curSetCount++;
      if (curSetCount % 100000 == 0) {
        log.log(Level.FINE,""String_Node_Str"" + curSetCount + ""String_Node_Str""+ tempholder.size());
      }
    }
  }
  log.log(Level.INFO,""String_Node_Str"" + gapCount + ""String_Node_Str"");
  return tSet;
}","private SetMap<BufferedInitialSet> populateDivets(FlatFile file){
  SetMap<BufferedInitialSet> tSet=new SetMap<>();
  readNameMappings divMaps=new readNameMappings();
  ArrayList<ReadPair> tempholder=new ArrayList<>();
  BufferedReader divetReader=ReaderReturn.openFile(file.getDivet().toFile());
  try {
    String line;
    String[] segs;
    while ((line=divetReader.readLine()) != null) {
      segs=line.split(""String_Node_Str"");
      if (segs.length < 13)       continue;
      if ((segs[1].equals(this.chr))) {
        divMaps.addRead(segs[0].trim());
        if (!segs[13].equals(""String_Node_Str"") && Double.valueOf(segs[12]) > pfilter && !segs[9].equals(""String_Node_Str"") && !segs[9].equals(""String_Node_Str"")) {
          ReadPair rp=new ReadPair(line,file,readEnum.IsDisc);
          tempholder.add(rp);
        }
      }
    }
  }
 catch (  IOException ex) {
    Logger.getLogger(BufferedReader.class.getName()).log(Level.SEVERE,null,ex);
  }
  log.log(Level.FINE,""String_Node_Str"");
  int gapCount=0;
  int curSetCount=0;
  for (  ReadPair d : tempholder) {
    d.setMapCount(divMaps.retMap(d.Name()));
    if (this.useGapOverlap) {
      if (gaps.checkGapOverlap(d)) {
        gapCount++;
        continue;
      }
    }
    if (!tSet.checkAndCombinePairs(d)) {
      BufferedInitialSet temp=new BufferedInitialSet(this.buffer,""String_Node_Str"");
      temp.bufferedAdd(d);
      tSet.addBedData(temp);
      curSetCount++;
      if (curSetCount % 100000 == 0) {
        log.log(Level.FINE,""String_Node_Str"" + curSetCount + ""String_Node_Str""+ tempholder.size());
      }
    }
  }
  log.log(Level.INFO,""String_Node_Str"" + gapCount + ""String_Node_Str"");
  return tSet;
}",0.987691383968778
146551,"private boolean isSplit(String[] segs){
  int fflags=Integer.parseInt(segs[3]);
  Cigar c=TextCigarCodec.getSingleton().decode(segs[7]);
  return (((fflags & 0x4) == 0x4 && (fflags & 0x8) != 0x8) || isOverSoftClipThreshold(c,segs[11].length()));
}","private boolean isSplit(String[] segs){
  int fflags=Integer.parseInt(segs[3]);
  Cigar c=TextCigarCodec.getSingleton().decode(segs[7]);
  return (((fflags & 0x4) == 0x4 && (fflags & 0x8) != 0x8 && (fflags & 0x256) != 0x256) || (isOverSoftClipThreshold(c,segs[11].length()) && (fflags & 0x256) != 0x256));
}",0.8916967509025271
146552,"public SamRecordMatcher(int threshold,boolean checkRGs,String tmpoutname,Map<String,Integer[]> thresholds,boolean debug){
  this.threshold=threshold;
  this.checkRGs=checkRGs;
  this.thresholds=thresholds;
  this.debug=debug;
  if (debug) {
    debugOut=Paths.get(""String_Node_Str"");
    try {
      this.debugWriter=Files.newBufferedWriter(this.debugOut,Charset.defaultCharset());
    }
 catch (    IOException ex) {
      Logger.getLogger(SamRecordMatcher.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
  this.tempOutBase=tmpoutname;
}","public SamRecordMatcher(int threshold,boolean checkRGs,String tmpoutname,Map<String,Integer[]> thresholds,boolean debug){
  this.threshold=threshold;
  this.checkRGs=checkRGs;
  this.thresholds=thresholds;
  this.debug=debug;
  if (debug) {
    debugOut=Paths.get(""String_Node_Str"");
    try {
      this.debugWriter=Files.newBufferedWriter(this.debugOut,Charset.defaultCharset());
    }
 catch (    IOException ex) {
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
  this.tempOutBase=tmpoutname;
}",0.9297912713472486
146553,"public void run(){
  BamMetadataGeneration metadata=new BamMetadataGeneration(checkRG);
  metadata.ScanFile(input,samplimit);
  final Map<String,Integer[]> values=metadata.getThresholds(maxdist);
  Map<String,DivetOutputHandle> divets=metadata.generateDivetOuts(outbase);
  Map<String,SplitOutputHandle> splits=metadata.generateSplitOuts(outbase);
  System.err.println(""String_Node_Str"");
  metadata.getSampleIDs().stream().forEach((s) -> {
    System.err.println(""String_Node_Str"" + s + ""String_Node_Str""+ metadata.getSampleInsSize(s)+ ""String_Node_Str""+ metadata.getSampleInsStd(s));
  }
);
  final SAMFileReader reader=new SAMFileReader(new File(input));
  reader.setValidationStringency(SAMFileReader.ValidationStringency.SILENT);
  SAMFileHeader h=reader.getFileHeader();
  List<BedSimple> coords=this.getSamIntervals(h);
  List<SamRecordMatcher> collect=coords.parallelStream().map((b) -> {
    SamRecordMatcher w=new SamRecordMatcher(samplimit,checkRG,utilities.GetBaseName.getBaseName(outbase) + ""String_Node_Str"",values,debug);
    try {
      SAMFileReader temp=new SAMFileReader(new File(input));
      temp.setValidationStringency(SAMFileReader.ValidationStringency.SILENT);
      SAMRecordIterator itr=temp.queryContained(b.Chr(),b.Start(),b.End());
      itr.forEachRemaining((k) -> w.bufferedAdd(k));
      temp.close();
      System.out.print(""String_Node_Str"");
      System.out.print(""String_Node_Str"" + b.Chr() + ""String_Node_Str""+ b.Start()+ ""String_Node_Str""+ b.End()+ ""String_Node_Str"");
    }
 catch (    Exception ex) {
      System.err.println(""String_Node_Str"" + b.Chr() + ""String_Node_Str""+ b.Start()+ ""String_Node_Str""+ b.End());
      ex.printStackTrace();
    }
    return w;
  }
).collect(Collectors.toList());
  SamRecordMatcher worker=new SamRecordMatcher(samplimit,checkRG,utilities.GetBaseName.getBaseName(outbase) + ""String_Node_Str"",values,debug);
  collect.stream().forEachOrdered((s) -> {
    worker.combineRecordMatcher(s);
  }
);
  reader.close();
  System.out.println(System.lineSeparator() + ""String_Node_Str"");
  SAMFileReader next=new SAMFileReader(new File(input));
  next.setValidationStringency(SAMFileReader.ValidationStringency.SILENT);
  worker.convertToVariant(divets,splits);
  worker.RetrieveMissingAnchors(splits,next.iterator());
  System.err.println(""String_Node_Str"");
  MrsFastRuntimeFactory mfact=new MrsFastRuntimeFactory(threads,metadata.getSamFileHeader());
  mfact.ProcessSplitFastqs(splits,reference,outbase);
  Map<String,String> bams=mfact.getBams();
  try (BufferedWriter out=Files.newBufferedWriter(Paths.get(outbase + ""String_Node_Str""),Charset.defaultCharset())){
    for (    String s : values.keySet()) {
      out.write(bams.get(s) + ""String_Node_Str"" + divets.get(s).getDivetFileStr()+ ""String_Node_Str"");
      out.write(splits.get(s).getAnchorFileStr() + ""String_Node_Str"" + String.valueOf(metadata.getSampleInsSize(s))+ ""String_Node_Str"");
      out.write(String.valueOf(metadata.getSampleInsStd(s)));
      out.newLine();
    }
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
  System.err.println(""String_Node_Str"");
  splits.keySet().stream().forEach((s) -> {
    try {
      Files.deleteIfExists(Paths.get(splits.get(s).fq1File()));
    }
 catch (    IOException ex) {
      ex.printStackTrace();
    }
  }
);
  mfact.getSams().keySet().stream().forEach((s) -> {
    try {
      Files.deleteIfExists(Paths.get(s));
    }
 catch (    IOException ex) {
      ex.printStackTrace();
    }
  }
);
}","public void run(){
  log.log(Level.FINE,""String_Node_Str"");
  BamMetadataGeneration metadata=new BamMetadataGeneration(checkRG);
  metadata.ScanFile(input,samplimit);
  final Map<String,Integer[]> values=metadata.getThresholds(maxdist);
  Map<String,DivetOutputHandle> divets=metadata.generateDivetOuts(outbase);
  Map<String,SplitOutputHandle> splits=metadata.generateSplitOuts(outbase);
  System.err.println(""String_Node_Str"");
  metadata.getSampleIDs().stream().forEach((s) -> {
    System.err.println(""String_Node_Str"" + s + ""String_Node_Str""+ metadata.getSampleInsSize(s)+ ""String_Node_Str""+ metadata.getSampleInsStd(s));
    log.log(Level.INFO,""String_Node_Str"" + s + ""String_Node_Str""+ metadata.getSampleInsSize(s)+ ""String_Node_Str""+ metadata.getSampleInsStd(s));
  }
);
  final SAMFileReader reader=new SAMFileReader(new File(input));
  reader.setValidationStringency(SAMFileReader.ValidationStringency.SILENT);
  SAMFileHeader h=reader.getFileHeader();
  List<BedSimple> coords=this.getSamIntervals(h);
  List<SamRecordMatcher> collect=coords.parallelStream().map((b) -> {
    SamRecordMatcher w=new SamRecordMatcher(samplimit,checkRG,utilities.GetBaseName.getBaseName(outbase) + ""String_Node_Str"",values,debug);
    try {
      SAMFileReader temp=new SAMFileReader(new File(input));
      temp.setValidationStringency(SAMFileReader.ValidationStringency.SILENT);
      SAMRecordIterator itr=temp.queryContained(b.Chr(),b.Start(),b.End());
      itr.forEachRemaining((k) -> w.bufferedAdd(k));
      temp.close();
      System.out.print(""String_Node_Str"");
      System.out.print(""String_Node_Str"" + b.Chr() + ""String_Node_Str""+ b.Start()+ ""String_Node_Str""+ b.End()+ ""String_Node_Str"");
      log.log(Level.INFO,""String_Node_Str"" + b.Chr() + ""String_Node_Str""+ b.Start()+ ""String_Node_Str""+ b.End());
    }
 catch (    Exception ex) {
      System.err.println(""String_Node_Str"" + b.Chr() + ""String_Node_Str""+ b.Start()+ ""String_Node_Str""+ b.End());
      log.log(Level.SEVERE,""String_Node_Str"" + b.Chr() + ""String_Node_Str""+ b.Start()+ ""String_Node_Str""+ b.End());
      ex.printStackTrace();
    }
    return w;
  }
).collect(Collectors.toList());
  SamRecordMatcher worker=new SamRecordMatcher(samplimit,checkRG,utilities.GetBaseName.getBaseName(outbase) + ""String_Node_Str"",values,debug);
  collect.stream().forEachOrdered((s) -> {
    worker.combineRecordMatcher(s);
  }
);
  reader.close();
  System.out.println(System.lineSeparator() + ""String_Node_Str"");
  SAMFileReader next=new SAMFileReader(new File(input));
  next.setValidationStringency(SAMFileReader.ValidationStringency.SILENT);
  worker.convertToVariant(divets,splits);
  worker.RetrieveMissingAnchors(splits,next.iterator());
  System.err.println(""String_Node_Str"");
  log.log(Level.INFO,""String_Node_Str"");
  MrsFastRuntimeFactory mfact=new MrsFastRuntimeFactory(threads,metadata.getSamFileHeader());
  mfact.ProcessSplitFastqs(splits,reference,outbase);
  Map<String,String> bams=mfact.getBams();
  try (BufferedWriter out=Files.newBufferedWriter(Paths.get(outbase + ""String_Node_Str""),Charset.defaultCharset())){
    for (    String s : values.keySet()) {
      out.write(bams.get(s) + ""String_Node_Str"" + divets.get(s).getDivetFileStr()+ ""String_Node_Str"");
      out.write(splits.get(s).getAnchorFileStr() + ""String_Node_Str"" + String.valueOf(metadata.getSampleInsSize(s))+ ""String_Node_Str"");
      out.write(String.valueOf(metadata.getSampleInsStd(s)));
      out.newLine();
    }
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
  System.err.println(""String_Node_Str"");
  log.log(Level.INFO,""String_Node_Str"");
  splits.keySet().stream().forEach((s) -> {
    try {
      Files.deleteIfExists(Paths.get(splits.get(s).fq1File()));
      log.log(Level.FINE,""String_Node_Str"" + splits.get(s).fq1File().toString());
    }
 catch (    IOException ex) {
      log.log(Level.SEVERE,""String_Node_Str"" + splits.get(s).fq1File().toString(),ex);
    }
  }
);
  mfact.getSams().keySet().stream().forEach((s) -> {
    try {
      Files.deleteIfExists(Paths.get(s));
      log.log(Level.FINE,""String_Node_Str"" + s);
    }
 catch (    IOException ex) {
      log.log(Level.SEVERE,""String_Node_Str"" + s,ex);
    }
  }
);
}",0.8983094928478543
146554,"private List<BedSimple> getSamIntervals(SAMFileHeader h){
  List<BedSimple> coords=new ArrayList<>();
  coords=h.getSequenceDictionary().getSequences().stream().map((s) -> {
    String chr=s.getSequenceName();
    int len=s.getSequenceLength();
    return new BedSimple(chr,0,len);
  }
).collect(Collectors.toList());
  return coords;
}","private List<BedSimple> getSamIntervals(SAMFileHeader h){
  List<BedSimple> coords=new ArrayList<>();
  coords=h.getSequenceDictionary().getSequences().stream().map((s) -> {
    String chr=s.getSequenceName();
    int len=s.getSequenceLength();
    log.log(Level.FINE,""String_Node_Str"" + chr + ""String_Node_Str""+ 0+ ""String_Node_Str""+ len);
    return new BedSimple(chr,0,len);
  }
).collect(Collectors.toList());
  return coords;
}",0.875
146555,"/** 
 * Object constructor
 * @param hasRG This is a boolean flag telling the MetadataGenerator to search the BAM file for read groups and to treat them separately. A value of ""false"" will ignore all readgroups in the file.
 */
public BamMetadataGeneration(boolean hasRG){
  expectRG=hasRG;
}","/** 
 * Object constructor
 * @param hasRG This is a boolean flag telling the MetadataGenerator to search the BAM file for read groups and to treat them separately. A value of ""false"" will ignore all readgroups in the file.
 */
public BamMetadataGeneration(boolean hasRG){
  expectRG=hasRG;
  log.log(Level.FINE,""String_Node_Str"" + hasRG);
}",0.9225908372827804
146556,"/** 
 * This function is designed to retrieve the metadata created by this class for use in subsequence paired end discordancy discovery
 * @param maxdist The maximum distance on the same chromosome to limit paired enddiscordant read detection
 * @return A map of the threshold values for each read group. Map Key: the read group. Value: an integer array where the first value is the lower threshold for read lengths (insertion detection) and the second value is the upper threshold for detection (deletion detection).
 */
public Map<String,Integer[]> getThresholds(int maxdist){
  Map<String,Integer[]> vs=new HashMap<>();
  this.insertSizes.keySet().stream().forEach((r) -> {
    int median=stats.MedianAbsoluteDeviation.Median(this.insertSizes.get(r));
    int mad=stats.MedianAbsoluteDeviation.MAD(this.insertSizes.get(r));
    List<Integer> filtered=this.insertSizes.get(r).stream().filter(s -> s < median + (mad * 20)).collect(Collectors.toList());
    long fvalues=this.insertSizes.get(r).parallelStream().filter(s -> s > median + (mad * 20)).count();
    if (fvalues > 0)     System.err.println(""String_Node_Str"" + fvalues + ""String_Node_Str""+ median+ ""String_Node_Str""+ mad+ ""String_Node_Str""+ r);
    double avg=stats.StdevAvg.IntAvg(filtered);
    double stdev=stats.StdevAvg.stdevInt(avg,filtered);
    Double[] d={avg,stdev};
    this.values.put(r,d);
    int lower=(int)Math.round(avg - (3 * stdev));
    int upper=(int)Math.round(avg + (3 * stdev));
    if (lower < 0)     lower=0;
    Integer[] v={lower,upper,maxdist};
    vs.put(r,v);
  }
);
  return vs;
}","/** 
 * This function is designed to retrieve the metadata created by this class for use in subsequence paired end discordancy discovery
 * @param maxdist The maximum distance on the same chromosome to limit paired enddiscordant read detection
 * @return A map of the threshold values for each read group. Map Key: the read group. Value: an integer array where the first value is the lower threshold for read lengths (insertion detection) and the second value is the upper threshold for detection (deletion detection).
 */
public Map<String,Integer[]> getThresholds(int maxdist){
  Map<String,Integer[]> vs=new HashMap<>();
  this.insertSizes.keySet().stream().forEach((r) -> {
    int median=stats.MedianAbsoluteDeviation.Median(this.insertSizes.get(r));
    int mad=stats.MedianAbsoluteDeviation.MAD(this.insertSizes.get(r));
    List<Integer> filtered=this.insertSizes.get(r).stream().filter(s -> s < median + (mad * 20)).collect(Collectors.toList());
    long fvalues=this.insertSizes.get(r).parallelStream().filter(s -> s > median + (mad * 20)).count();
    if (fvalues > 0) {
      System.err.println(""String_Node_Str"" + fvalues + ""String_Node_Str""+ median+ ""String_Node_Str""+ mad+ ""String_Node_Str""+ r);
      log.log(Level.INFO,""String_Node_Str"" + fvalues + ""String_Node_Str""+ median+ ""String_Node_Str""+ mad+ ""String_Node_Str""+ r);
    }
    double avg=stats.StdevAvg.IntAvg(filtered);
    double stdev=stats.StdevAvg.stdevInt(avg,filtered);
    Double[] d={avg,stdev};
    this.values.put(r,d);
    int lower=(int)Math.round(avg - (3 * stdev));
    int upper=(int)Math.round(avg + (3 * stdev));
    if (lower < 0)     lower=0;
    Integer[] v={lower,upper,maxdist};
    vs.put(r,v);
  }
);
  return vs;
}",0.9577121995740796
146557,"/** 
 * This is a main, workhorse method designed to run through the BAM file and calculate the read group average and stdev values.
 * @param input The string of the path to the BAM file to scan
 * @param samplimit A limit on the number of BAM file entries per readgroupto sample statistics from. Higher limits require more memory.
 */
public void ScanFile(String input,int samplimit){
  SAMFileReader sam=new SAMFileReader(new File(input));
  sam.setValidationStringency(SAMFileReader.ValidationStringency.SILENT);
  if (!sam.hasIndex()) {
    System.out.println(""String_Node_Str"");
    BAMIndexer b=new BAMIndexer(new File(input + ""String_Node_Str""),sam.getFileHeader());
    sam.enableFileSource(true);
    sam.iterator().forEachRemaining((s) -> {
      b.processAlignment(s);
    }
);
    b.finish();
    sam.close();
    System.out.println(""String_Node_Str"");
    sam=new SAMFileReader(new File(input));
  }
  header=sam.getFileHeader();
  if (expectRG) {
    List<SAMReadGroupRecord> temp=header.getReadGroups();
    temp.forEach((e) -> rgList.add(e.getId()));
  }
 else   rgList.add(""String_Node_Str"");
  SAMRecordIterator itr=sam.iterator();
  while (itr.hasNext()) {
    SAMRecord s=itr.next();
    String rgid;
    if (expectRG)     rgid=s.getReadGroup().getId();
 else     rgid=""String_Node_Str"";
    int rFlags=s.getFlags();
    if ((rFlags & 0x4) == 0x4 || (rFlags & 0x8) == 0x8 || !((rFlags & 0x1) == 0x1))     continue;
    if (s.getInferredInsertSize() == 0)     continue;
    if (!insertSizes.containsKey(rgid))     insertSizes.put(rgid,new ArrayList<>(samplimit));
    if (insertSizes.get(rgid).size() >= samplimit) {
      if (checkIfSamplingDone(samplimit))       break;
    }
 else {
      insertSizes.get(rgid).add(Math.abs(s.getInferredInsertSize()));
    }
  }
  itr.close();
  sam.close();
}","/** 
 * This is a main, workhorse method designed to run through the BAM file and calculate the read group average and stdev values.
 * @param input The string of the path to the BAM file to scan
 * @param samplimit A limit on the number of BAM file entries per readgroupto sample statistics from. Higher limits require more memory.
 */
public void ScanFile(String input,int samplimit){
  SAMFileReader sam=new SAMFileReader(new File(input));
  sam.setValidationStringency(SAMFileReader.ValidationStringency.SILENT);
  if (!sam.hasIndex()) {
    System.out.println(""String_Node_Str"");
    log.log(Level.INFO,""String_Node_Str"" + input);
    BAMIndexer b=new BAMIndexer(new File(input + ""String_Node_Str""),sam.getFileHeader());
    sam.enableFileSource(true);
    sam.iterator().forEachRemaining((s) -> {
      b.processAlignment(s);
    }
);
    b.finish();
    sam.close();
    System.out.println(""String_Node_Str"");
    log.log(Level.FINE,""String_Node_Str"");
    sam=new SAMFileReader(new File(input));
  }
  header=sam.getFileHeader();
  if (expectRG) {
    List<SAMReadGroupRecord> temp=header.getReadGroups();
    temp.forEach((e) -> rgList.add(e.getId()));
    log.log(Level.FINE,""String_Node_Str"" + StrArray.Join((ArrayList<String>)rgList,""String_Node_Str""));
  }
 else {
    rgList.add(""String_Node_Str"");
    log.log(Level.FINE,""String_Node_Str"");
  }
  SAMRecordIterator itr=sam.iterator();
  while (itr.hasNext()) {
    SAMRecord s=itr.next();
    String rgid;
    if (expectRG)     rgid=s.getReadGroup().getId();
 else     rgid=""String_Node_Str"";
    int rFlags=s.getFlags();
    if ((rFlags & 0x4) == 0x4 || (rFlags & 0x8) == 0x8 || !((rFlags & 0x1) == 0x1))     continue;
    if (s.getInferredInsertSize() == 0)     continue;
    if (!insertSizes.containsKey(rgid))     insertSizes.put(rgid,new ArrayList<>(samplimit));
    if (insertSizes.get(rgid).size() >= samplimit) {
      if (checkIfSamplingDone(samplimit)) {
        log.log(Level.FINE,""String_Node_Str"" + rgid);
        break;
      }
    }
 else {
      insertSizes.get(rgid).add(Math.abs(s.getInferredInsertSize()));
    }
  }
  itr.close();
  sam.close();
  log.log(Level.INFO,""String_Node_Str"");
}",0.9107769423558896
146558,"private boolean isSplit(String[] segs){
  int fflags=Integer.parseInt(segs[3]);
  Cigar c=TextCigarCodec.getSingleton().decode(segs[7]);
  return (((fflags & 0x4) == 0x4 && (fflags & 0x8) != 0x8 && (fflags & 0x256) != 0x256) || (isOverSoftClipThreshold(c,segs[11].length()) && (fflags & 0x256) != 0x256));
}","private boolean isSplit(String[] segs){
  int fflags=Integer.parseInt(segs[3]);
  Cigar c=TextCigarCodec.getSingleton().decode(segs[7]);
  return (((fflags & 0x4) == 0x4 && (fflags & 0x8) != 0x8 && (fflags & 0x100) != 0x100) || (isOverSoftClipThreshold(c,segs[11].length()) && (fflags & 0x100) != 0x100));
}",0.9609120521172638
146559,"private SetMap<BufferedInitialSet> populateDivets(FlatFile file){
  SetMap<BufferedInitialSet> tSet=new SetMap<>();
  readNameMappings divMaps=new readNameMappings();
  ArrayList<ReadPair> tempholder=new ArrayList<>();
  BufferedReader divetReader=ReaderReturn.openFile(file.getDivet().toFile());
  try {
    String line;
    String[] segs;
    while ((line=divetReader.readLine()) != null) {
      segs=line.split(""String_Node_Str"");
      if (segs.length < 13)       continue;
      if ((segs[1].equals(this.chr))) {
        divMaps.addRead(segs[0].trim());
        if (!segs[13].equals(""String_Node_Str"") && Double.valueOf(segs[12]) > pfilter && segs[9].equals(""String_Node_Str"") && segs[9].equals(""String_Node_Str"")) {
          ReadPair rp=new ReadPair(line,file,readEnum.IsDisc);
          tempholder.add(rp);
        }
      }
    }
  }
 catch (  IOException ex) {
    Logger.getLogger(BufferedReader.class.getName()).log(Level.SEVERE,null,ex);
  }
  int gapCount=0;
  int curSetCount=0;
  for (  ReadPair d : tempholder) {
    d.setMapCount(divMaps.retMap(d.Name()));
    if (this.useGapOverlap) {
      if (gaps.checkGapOverlap(d)) {
        gapCount++;
        continue;
      }
    }
    if (!tSet.checkAndCombinePairs(d)) {
      BufferedInitialSet temp=new BufferedInitialSet(this.buffer,""String_Node_Str"");
      temp.bufferedAdd(d);
      tSet.addBedData(temp);
      curSetCount++;
      if (curSetCount % 100000 == 0) {
        log.log(Level.FINE,""String_Node_Str"" + curSetCount + ""String_Node_Str""+ tempholder.size());
      }
    }
  }
  log.log(Level.INFO,""String_Node_Str"" + gapCount + ""String_Node_Str"");
  return tSet;
}","private SetMap<BufferedInitialSet> populateDivets(FlatFile file){
  SetMap<BufferedInitialSet> tSet=new SetMap<>();
  readNameMappings divMaps=new readNameMappings();
  ArrayList<ReadPair> tempholder=new ArrayList<>();
  BufferedReader divetReader=ReaderReturn.openFile(file.getDivet().toFile());
  try {
    String line;
    String[] segs;
    while ((line=divetReader.readLine()) != null) {
      segs=line.split(""String_Node_Str"");
      if (segs.length < 13)       continue;
      if ((segs[1].equals(this.chr))) {
        divMaps.addRead(segs[0].trim());
        if (!segs[13].equals(""String_Node_Str"") && Double.valueOf(segs[12]) > pfilter && !segs[9].equals(""String_Node_Str"") && !segs[9].equals(""String_Node_Str"")) {
          ReadPair rp=new ReadPair(line,file,readEnum.IsDisc);
          tempholder.add(rp);
        }
      }
    }
  }
 catch (  IOException ex) {
    Logger.getLogger(BufferedReader.class.getName()).log(Level.SEVERE,null,ex);
  }
  int gapCount=0;
  int curSetCount=0;
  for (  ReadPair d : tempholder) {
    d.setMapCount(divMaps.retMap(d.Name()));
    if (this.useGapOverlap) {
      if (gaps.checkGapOverlap(d)) {
        gapCount++;
        continue;
      }
    }
    if (!tSet.checkAndCombinePairs(d)) {
      BufferedInitialSet temp=new BufferedInitialSet(this.buffer,""String_Node_Str"");
      temp.bufferedAdd(d);
      tSet.addBedData(temp);
      curSetCount++;
      if (curSetCount % 100000 == 0) {
        log.log(Level.FINE,""String_Node_Str"" + curSetCount + ""String_Node_Str""+ tempholder.size());
      }
    }
  }
  log.log(Level.INFO,""String_Node_Str"" + gapCount + ""String_Node_Str"");
  return tSet;
}",0.9993917274939172
146560,"public void OpenFQHandle(){
  try {
    fq1=Files.newBufferedWriter(fq1path,Charset.defaultCharset(),StandardOpenOption.APPEND);
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}","public void OpenFQHandle(){
  try {
    fq1=Files.newBufferedWriter(fq1path,Charset.defaultCharset());
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}",0.9273743016759776
146561,"@Override public void applyAndPropagateAnalyzer(XPathAnalyzer analyzer) throws AnalysisInvalidException {
  if (analyzer.shortCircuit()) {
    return;
  }
  analyzer.doAnalysis(TreeReference.this);
  if (this.hasPredicates()) {
    TreeReference contextForPredicates=this;
    if (this.contextType == CONTEXT_ORIGINAL) {
      if (analyzer.getOriginalContextRef() == null) {
        throw AnalysisInvalidException.INSTANCE;
      }
      contextForPredicates=this.contextualize(analyzer.getOriginalContextRef());
    }
 else     if (!this.isAbsolute()) {
      if (analyzer.getContextRef() == null) {
        throw AnalysisInvalidException.INSTANCE;
      }
      contextForPredicates=this.contextualize(analyzer.getContextRef());
    }
    for (int i=0; i < data.size(); i++) {
      TreeReferenceLevel subLevel=data.get(i);
      if (subLevel.getPredicates() != null) {
        TreeReference subContext=contextForPredicates.removePredicates().getSubReference(i);
        XPathAnalyzer subAnalyzer=analyzer.spawnSubAnalyzer(subContext);
        for (        XPathExpression expr : subLevel.getPredicates()) {
          expr.applyAndPropagateAnalyzer(subAnalyzer);
        }
      }
    }
  }
}","@Override public void applyAndPropagateAnalyzer(XPathAnalyzer analyzer) throws AnalysisInvalidException {
  if (analyzer.shortCircuit()) {
    return;
  }
  analyzer.doAnalysis(TreeReference.this);
  if (analyzer.shouldIncludePredicates() && this.hasPredicates()) {
    TreeReference contextForPredicates=this;
    if (this.contextType == CONTEXT_ORIGINAL) {
      if (analyzer.getOriginalContextRef() == null) {
        throw AnalysisInvalidException.INSTANCE;
      }
      contextForPredicates=this.contextualize(analyzer.getOriginalContextRef());
    }
 else     if (!this.isAbsolute()) {
      if (analyzer.getContextRef() == null) {
        throw AnalysisInvalidException.INSTANCE;
      }
      contextForPredicates=this.contextualize(analyzer.getContextRef());
    }
    for (int i=0; i < data.size(); i++) {
      TreeReferenceLevel subLevel=data.get(i);
      if (subLevel.getPredicates() != null) {
        TreeReference subContext=contextForPredicates.removePredicates().getSubReference(i);
        XPathAnalyzer subAnalyzer=analyzer.spawnSubAnalyzer(subContext);
        for (        XPathExpression expr : subLevel.getPredicates()) {
          expr.applyAndPropagateAnalyzer(subAnalyzer);
        }
      }
    }
  }
}",0.9843363561417972
146562,"@Override public void doNormalTreeRefAnalysis(TreeReference treeRef) throws AnalysisInvalidException {
  if (treeRef.getContextType() == TreeReference.CONTEXT_INSTANCE) {
    addResultToList(treeRef.getInstanceName());
  }
}","@Override public void doNormalTreeRefAnalysis(TreeReference treeRef) throws AnalysisInvalidException {
  if (treeRef.getContextType() == TreeReference.CONTEXT_INSTANCE) {
    addToResult(treeRef.getInstanceName());
  }
}",0.981981981981982
146563,"@Override public void doNormalTreeRefAnalysis(TreeReference treeRef) throws AnalysisInvalidException {
  addResultToList(treeRef.removePredicates());
}","@Override public void doNormalTreeRefAnalysis(TreeReference treeRef) throws AnalysisInvalidException {
  addToResult(treeRef.removePredicates());
}",0.9731543624161074
146564,"@Nullable public List<T> accumulateAsList(XPathAnalyzable rootExpression){
  try {
    rootExpression.applyAndPropagateAnalyzer(this);
    return aggregateResults(new ArrayList<T>());
  }
 catch (  AnalysisInvalidException e) {
    return null;
  }
}","@Nullable public List<T> accumulateAsList(XPathAnalyzable rootExpression){
  try {
    accumulated=new ArrayList<>();
    rootExpression.applyAndPropagateAnalyzer(this);
    List<T> resultList=new ArrayList<>();
    aggregateResults(resultList);
    return resultList;
  }
 catch (  AnalysisInvalidException e) {
    return null;
  }
}",0.7316239316239316
146565,"@Nullable public Set<T> accumulate(XPathAnalyzable rootExpression){
  try {
    rootExpression.applyAndPropagateAnalyzer(this);
    Set<T> set=new HashSet<>();
    set.addAll(aggregateResults(new ArrayList<T>()));
    return set;
  }
 catch (  AnalysisInvalidException e) {
    return null;
  }
}","@Nullable public Set<T> accumulate(XPathAnalyzable rootExpression){
  try {
    accumulated=new HashSet<>();
    rootExpression.applyAndPropagateAnalyzer(this);
    Set<T> resultSet=new HashSet<>();
    aggregateResults(resultSet);
    return resultSet;
  }
 catch (  AnalysisInvalidException e) {
    return null;
  }
}",0.8116883116883117
146566,"private List<T> aggregateResults(List<T> aggregated){
  aggregated.addAll(this.accumulatedList);
  for (  XPathAnalyzer subAnalyzer : this.subAnalyzers) {
    ((XPathAccumulatingAnalyzer)subAnalyzer).aggregateResults(aggregated);
  }
  return aggregated;
}","private void aggregateResults(Collection<T> resultCollection){
  resultCollection.addAll(this.accumulated);
  for (  XPathAnalyzer subAnalyzer : this.subAnalyzers) {
    ((XPathAccumulatingAnalyzer)subAnalyzer).aggregateResults(resultCollection);
  }
}",0.6771653543307087
146567,"@Override public int hashCode(){
  return expr.hashCode();
}","@Override public int hashCode(){
  int hash=expr.hashCode();
  if (contextRef != null) {
    hash^=contextRef.hashCode();
  }
  if (originalContextRef != null) {
    hash^=originalContextRef.hashCode();
  }
  return hash;
}",0.3745583038869258
146568,"public ExpressionCacheKey(InFormCacheableExpr expr){
  this.expr=expr;
}","public ExpressionCacheKey(InFormCacheableExpr expr,EvaluationContext ec){
  this.expr=expr;
  for (  int contextType : getRelevantContextTypes(expr)) {
    if (contextType == TreeReference.CONTEXT_INHERITED) {
      contextRef=ec.getContextRef();
    }
 else     if (contextType == TreeReference.CONTEXT_ORIGINAL) {
      originalContextRef=ec.getOriginalContext();
    }
  }
}",0.3207126948775056
146569,"@Override public boolean equals(Object o){
  if (o instanceof ExpressionCacheKey) {
    ExpressionCacheKey other=(ExpressionCacheKey)o;
    return expr.equals(other.expr);
  }
  return false;
}","@Override public boolean equals(Object o){
  if (o instanceof ExpressionCacheKey) {
    ExpressionCacheKey other=(ExpressionCacheKey)o;
    return this.expr.equals(other.expr) && contextsEqual(this,other) && originalContextsEqual(this,other);
  }
  return false;
}",0.774617067833698
146570,"void cache(Object value,EvaluationContext ec){
  if (ec.expressionCachingEnabled() && isCacheable(ec)) {
    ec.expressionCacher().cache(cacheKey(),value);
  }
}","void cache(Object value,EvaluationContext ec){
  if (ec.expressionCachingEnabled() && isCacheable(ec)) {
    ec.expressionCacher().cache(cacheKey(ec),value);
  }
}",0.9938271604938272
146571,"private ExpressionCacheKey cacheKey(){
  return new ExpressionCacheKey(this);
}","private ExpressionCacheKey cacheKey(EvaluationContext ec){
  return new ExpressionCacheKey(this,ec);
}",0.8729281767955801
146572,"private void queueUpCachedValue(EvaluationContext ec){
  justRetrieved=ec.expressionCacher().getCachedValue(cacheKey());
}","private void queueUpCachedValue(EvaluationContext ec){
  justRetrieved=ec.expressionCacher().getCachedValue(cacheKey(ec));
}",0.991869918699187
146573,"private ArrayList<String> depthFirstSearch(String startNode,String currentNode,ArrayList<String> visited){
  if (visited.contains(currentNode)) {
    if (startNode.equals(currentNode)) {
      return visited;
    }
    return null;
  }
  visited.add(currentNode);
  for (  String child : childrenMap.get(currentNode)) {
    ArrayList<String> shortestPath=depthFirstSearch(startNode,child,visited);
    if (shortestPath != null) {
      return shortestPath;
    }
  }
  visited.remove(currentNode);
  return null;
}","private ArrayList<String> depthFirstSearch(String startNode,String currentNode,ArrayList<String> visited){
  if (visited.contains(currentNode)) {
    if (startNode.equals(currentNode)) {
      return visited;
    }
    return null;
  }
  visited.add(currentNode);
  ArrayList<String> children=childrenMap.get(currentNode);
  if (children != null) {
    for (    String child : children) {
      ArrayList<String> shortestPath=depthFirstSearch(startNode,child,visited);
      if (shortestPath != null) {
        return shortestPath;
      }
    }
  }
  visited.remove(currentNode);
  return null;
}",0.8856885688568857
146574,"private void processAppUpdate(){
  mSession.clearAllState();
  this.mUpdatePending=false;
  String updateTarget=mUpdateTarget;
  this.mUpdateTarget=null;
  try {
    mEngine.attemptAppUpdate(updateTarget);
  }
 catch (  UnresolvedResourceException e) {
    printStream.println(""String_Node_Str"");
    e.printStackTrace();
  }
catch (  UnfullfilledRequirementsException e) {
    printStream.println(""String_Node_Str"");
    e.printStackTrace();
  }
catch (  Exception e) {
    printStream.println(""String_Node_Str"");
    e.printStackTrace();
  }
}","private void processAppUpdate(){
}",0.1174438687392055
146575,"private void processAppUpdate(){
  mSession.clearAllState();
  this.mUpdatePending=false;
  String updateTarget=mUpdateTarget;
  this.mUpdateTarget=null;
  try {
    mEngine.attemptAppUpdate(updateTarget);
  }
 catch (  UnresolvedResourceException e) {
    printStream.println(""String_Node_Str"");
    e.printStackTrace();
  }
catch (  UnfullfilledRequirementsException e) {
    printStream.println(""String_Node_Str"");
    e.printStackTrace();
  }
catch (  Exception e) {
    printStream.println(""String_Node_Str"");
    e.printStackTrace();
  }
}","private void processAppUpdate(){
}",0.1174438687392055
146576,"/** 
 * Copy Constructor
 */
private EvaluationContext(EvaluationContext base,DataInstance instance,TreeReference contextNode,Hashtable<String,DataInstance> formInstances,boolean inheritCaching){
  this.functionHandlers=base.functionHandlers;
  this.formInstances=formInstances;
  this.variables=new Hashtable<>();
  this.shallowVariablesCopy(base.variables);
  this.contextNode=contextNode;
  this.instance=instance;
  this.isConstraint=base.isConstraint;
  this.candidateValue=base.candidateValue;
  this.outputTextForm=base.outputTextForm;
  this.original=base.original;
  this.currentContextPosition=base.currentContextPosition;
  if (base.mAccumulateExprs) {
    this.mAccumulateExprs=true;
    this.mDebugCore=base.mDebugCore;
  }
  if (inheritCaching) {
    this.expressionCacher=base.expressionCacher;
  }
  setQueryContext(base.queryContext);
}","/** 
 * Copy Constructor
 */
private EvaluationContext(EvaluationContext base,DataInstance instance,TreeReference contextNode,Hashtable<String,DataInstance> formInstances){
  this.functionHandlers=base.functionHandlers;
  this.formInstances=formInstances;
  this.variables=new Hashtable<>();
  this.shallowVariablesCopy(base.variables);
  this.contextNode=contextNode;
  this.instance=instance;
  this.isConstraint=base.isConstraint;
  this.candidateValue=base.candidateValue;
  this.outputTextForm=base.outputTextForm;
  this.original=base.original;
  this.currentContextPosition=base.currentContextPosition;
  if (base.mAccumulateExprs) {
    this.mAccumulateExprs=true;
    this.mDebugCore=base.mDebugCore;
  }
  this.expressionCacher=base.expressionCacher;
  setQueryContext(base.queryContext);
}",0.8699334543254689
146577,"public ExpressionCacheKey(InFormCacheableExpr expr,EvaluationContext ec){
  this.originalExpression=expr;
  generateContextualizedRefs(ec);
}","public ExpressionCacheKey(InFormCacheableExpr expr,EvaluationContext ec){
  this.originalExpression=expr;
  contextualizedRefs=new TreeReferenceAccumulatingAnalyzer(ec).accumulate(originalExpression);
}",0.7696793002915452
146578,"private boolean answerQuestion(String input) throws BadPlaybackException, InvalidInputException {
switch (fec.getModel().getEvent()) {
case FormEntryController.EVENT_BEGINNING_OF_FORM:
    environment.recordAction(new Action(new Command(""String_Node_Str"")));
  fec.stepToNextEvent();
return false;
case FormEntryController.EVENT_END_OF_FORM:
environment.recordAction(new Action(new Command(""String_Node_Str"")));
mProcessOnExit=true;
return true;
case FormEntryController.EVENT_QUESTION:
FormEntryPrompt fep=fec.getModel().getQuestionPrompt();
String actualInput=input;
if (environment.isModePlayback()) {
actualInput=this.current.getAction().getRawAnswer();
}
 else {
Vector<SelectChoice> choices=fep.getSelectChoices();
if (choices != null) {
if (input.equals(""String_Node_Str"") && fep.getQuestion().getControlType() == Constants.CONTROL_SELECT_MULTI) {
Vector<Selection> answers=new Vector<>();
for (int i=0; i < mCurrentSelectList.length; ++i) {
if (mCurrentSelectList[i]) {
answers.addElement(choices.elementAt(i).selection());
}
}
actualInput=new SelectMultiData(answers).uncast().getString();
}
 else {
int index=parseAndValidate(input,choices.size()) - 1;
if (fep.getQuestion().getControlType() == Constants.CONTROL_SELECT_ONE) {
actualInput=choices.elementAt(index).getValue();
}
if (fep.getQuestion().getControlType() == Constants.CONTROL_SELECT_MULTI) {
this.mCurrentSelectList[index]=!this.mCurrentSelectList[index];
return false;
}
}
}
}
try {
IAnswerData value=actualInput.equals(""String_Node_Str"") ? null : AnswerDataFactory.template(fep.getControlType(),fep.getDataType()).cast(new UncastData(actualInput));
int response=fec.answerQuestion(value);
if (environment.isModePlayback()) {
ActionResponse actionResponse=current.getAction().getActionResponse();
actionResponse.validate(response,actualInput,fep);
}
if (response == FormEntryController.ANSWER_OK) {
environment.recordAction(new Action(actualInput));
fec.stepToNextEvent();
return false;
}
 else if (response == FormEntryController.ANSWER_REQUIRED_BUT_EMPTY) {
environment.recordAction(new Action(actualInput,ActionResponse.QuestionRequired()));
badInput(input,""String_Node_Str"");
return false;
}
 else if (response == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
environment.recordAction(new Action(actualInput,ActionResponse.ConstraintViolated()));
badInput(input,fep.getConstraintText());
return false;
}
}
 catch (Exception e) {
e.printStackTrace();
badInput(input,e.getMessage());
return false;
}
return false;
case FormEntryController.EVENT_REPEAT:
return true;
case FormEntryController.EVENT_REPEAT_JUNCTURE:
return true;
case FormEntryController.EVENT_PROMPT_NEW_REPEAT:
int index=parseAndValidate(input,2);
if (index == 1) {
fec.newRepeat();
fec.stepToNextEvent();
return false;
}
 else if (index == 2) {
fec.stepToNextEvent();
return false;
}
}
out.println(""String_Node_Str"");
return true;
}","private boolean answerQuestion(String input) throws BadPlaybackException, InvalidInputException {
switch (fec.getModel().getEvent()) {
case FormEntryController.EVENT_BEGINNING_OF_FORM:
    environment.recordAction(new Action(new Command(""String_Node_Str"")));
  fec.stepToNextEvent();
return false;
case FormEntryController.EVENT_END_OF_FORM:
environment.recordAction(new Action(new Command(""String_Node_Str"")));
mProcessOnExit=true;
return true;
case FormEntryController.EVENT_QUESTION:
FormEntryPrompt fep=fec.getModel().getQuestionPrompt();
String actualInput=input;
if (environment.isModePlayback()) {
actualInput=this.current.getAction().getRawAnswer();
}
 else {
Vector<SelectChoice> choices=fep.getSelectChoices();
if (choices != null) {
if (input.equals(""String_Node_Str"") && fep.getQuestion().getControlType() == Constants.CONTROL_SELECT_MULTI) {
Vector<Selection> answers=new Vector<>();
for (int i=0; i < mCurrentSelectList.length; ++i) {
if (mCurrentSelectList[i]) {
answers.addElement(choices.elementAt(i).selection());
}
}
actualInput=new SelectMultiData(answers).uncast().getString();
}
 else {
int index=parseAndValidate(input,choices.size()) - 1;
if (fep.getQuestion().getControlType() == Constants.CONTROL_SELECT_ONE) {
actualInput=choices.elementAt(index).getValue();
}
if (fep.getQuestion().getControlType() == Constants.CONTROL_SELECT_MULTI) {
this.mCurrentSelectList[index]=!this.mCurrentSelectList[index];
return false;
}
}
}
}
try {
IAnswerData value=actualInput.equals(""String_Node_Str"") ? null : AnswerDataFactory.template(fep.getControlType(),fep.getDataType()).cast(new UncastData(actualInput));
int response=fec.answerQuestion(value);
if (environment.isModePlayback()) {
ActionResponse actionResponse=current.getAction().getActionResponse();
actionResponse.validate(response,actualInput,fep);
}
if (response == FormEntryController.ANSWER_OK) {
environment.recordAction(new Action(actualInput));
fec.stepToNextEvent();
return false;
}
 else if (response == FormEntryController.ANSWER_REQUIRED_BUT_EMPTY) {
environment.recordAction(new Action(actualInput,ActionResponse.QuestionRequired()));
badInput(input,""String_Node_Str"");
return false;
}
 else if (response == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
environment.recordAction(new Action(actualInput,ActionResponse.ConstraintViolated()));
badInput(input,fep.getConstraintText());
return false;
}
}
 catch (InvalidInputException e) {
throw e;
}
catch (Exception e) {
e.printStackTrace();
badInput(input,e.getMessage());
return false;
}
return false;
case FormEntryController.EVENT_REPEAT:
return true;
case FormEntryController.EVENT_REPEAT_JUNCTURE:
return true;
case FormEntryController.EVENT_PROMPT_NEW_REPEAT:
int index=parseAndValidate(input,2);
if (index == 1) {
fec.newRepeat();
fec.stepToNextEvent();
return false;
}
 else if (index == 2) {
fec.stepToNextEvent();
return false;
}
}
out.println(""String_Node_Str"");
return true;
}",0.9922427167729702
146579,"@Override protected TreeElement cache(QueryContext context){
  if (recordId == TreeReference.INDEX_TEMPLATE) {
    return empty;
  }
synchronized (parent.treeCache) {
    TreeElement element=parent.treeCache.retrieve(recordId);
    if (element != null) {
      return element;
    }
    TreeElement partialMatch=detectAndProcessLimitedScopeResponse(recordId,context);
    if (partialMatch != null) {
      return partialMatch;
    }
    StorageIndexedTreeElementModel model=parent.getElement(recordId,context);
    TreeElement cacheBuilder=buildElementFromModel(model);
    parent.treeCache.register(recordId,cacheBuilder);
    return cacheBuilder;
  }
}","@Override protected TreeElement cache(QueryContext context){
  if (recordId == TreeReference.INDEX_TEMPLATE) {
    return empty;
  }
synchronized (parent.treeCache) {
    TreeElement partialMatch=detectAndProcessLimitedScopeResponse(recordId,context);
    if (partialMatch != null) {
      return partialMatch;
    }
    TreeElement element=parent.treeCache.retrieve(recordId);
    if (element != null) {
      return element;
    }
    StorageIndexedTreeElementModel model=parent.getElement(recordId,context);
    TreeElement cacheBuilder=buildElementFromModel(model);
    parent.treeCache.register(recordId,cacheBuilder);
    return cacheBuilder;
  }
}",0.8226299694189603
146580,"private String[] analyseScopeSufficientColumnList(ScopeLimitedReferenceRequestCache cache){
  String[] limitedScope=cache.getInternalScopedLimit(this.getInstanceName());
  if (limitedScope != null) {
    return limitedScope;
  }
  Set<TreeReference> referencesInScope=cache.getLimitedReferenceSet(this.getInstanceName());
  StorageIndexedTreeElementModel model=parent.getModelTemplate();
  TreeReference baseRefForChildElement=this.getRef().genericize();
  Vector<String> relativeSteps=model.getIndexedTreeReferenceSteps();
  HashMap<TreeReference,String> stepToColumnName=new HashMap<>();
  for (  String relativeStep : relativeSteps) {
    stepToColumnName.put(XPathReference.getPathExpr(relativeStep).getReference(),StorageIndexedTreeElementModel.getSqlColumnNameFromElementOrAttribute(relativeStep));
  }
  boolean failed=false;
  HashSet<String> columnNameCacheLoads=new HashSet<>();
  for (  TreeReference inScopeReference : referencesInScope) {
    TreeReference subReference=inScopeReference.relativize(baseRefForChildElement);
    if (!stepToColumnName.containsKey(subReference)) {
      failed=true;
      break;
    }
 else {
      columnNameCacheLoads.add(stepToColumnName.get(subReference));
    }
  }
  if (failed) {
    cache.setScopeLimitUnhelpful(this.getInstanceName());
    return null;
  }
  String[] columnList=new String[columnNameCacheLoads.size()];
  int i=0;
  for (  String s : columnNameCacheLoads) {
    columnList[i]=s;
    i++;
  }
  cache.setInternalScopeLimit(this.getInstanceName(),columnList);
  return columnList;
}","private String[] analyseScopeSufficientColumnList(ScopeLimitedReferenceRequestCache cache){
  String[] limitedScope=cache.getInternalScopedLimit(this.getInstanceName());
  if (limitedScope != null) {
    return limitedScope;
  }
  Set<TreeReference> referencesInScope=cache.getLimitedReferenceSet(this.getInstanceName());
  StorageIndexedTreeElementModel model=parent.getModelTemplate();
  TreeReference baseRefForChildElement=this.getRef().genericize();
  Vector<String> relativeSteps=model.getIndexedTreeReferenceSteps();
  HashMap<TreeReference,String> stepToColumnName=new HashMap<>();
  for (  String relativeStep : relativeSteps) {
    stepToColumnName.put(XPathReference.getPathExpr(relativeStep).getReference(),StorageIndexedTreeElementModel.getSqlColumnNameFromElementOrAttribute(relativeStep));
  }
  boolean failed=false;
  HashSet<String> columnNameCacheLoads=new HashSet<>();
  for (  TreeReference inScopeReference : referencesInScope) {
    if (inScopeReference.equals(baseRefForChildElement)) {
      continue;
    }
    TreeReference subReference=inScopeReference.relativize(baseRefForChildElement);
    if (!stepToColumnName.containsKey(subReference)) {
      failed=true;
      break;
    }
 else {
      columnNameCacheLoads.add(stepToColumnName.get(subReference));
    }
  }
  if (failed) {
    cache.setScopeLimitUnhelpful(this.getInstanceName());
    return null;
  }
  String[] columnList=new String[columnNameCacheLoads.size()];
  int i=0;
  for (  String s : columnNameCacheLoads) {
    columnList[i]=s;
    i++;
  }
  cache.setInternalScopeLimit(this.getInstanceName(),columnList);
  return columnList;
}",0.9745363093366866
146581,"/** 
 * Identifies whether in the current context it is potentially the case that a ""partial"" response is acceptable, and builds the response if so. Returns null if that strategy is not applicable or if a partial response could not be generated
 */
private TreeElement detectAndProcessLimitedScopeResponse(int recordId,QueryContext context){
  if (context == null) {
    return null;
  }
  ScopeLimitedReferenceRequestCache cache=context.getQueryCacheOrNull(ScopeLimitedReferenceRequestCache.class);
  if (cache == null) {
    return null;
  }
  TreeElement partialMatch=cache.getCachedElementIfExists(this.getInstanceName(),recordId);
  if (partialMatch != null) {
    return partialMatch;
  }
  if (!cache.isInstancePotentiallyScopeLimited(this.getInstanceName())) {
    return null;
  }
  String[] scopeSufficientColumnList=analyseScopeSufficientColumnList(cache);
  String[] objectMetadata=getElementMetadata(recordId,scopeSufficientColumnList,context);
  partialMatch=this.buildPartialElementFromMetadata(scopeSufficientColumnList,objectMetadata);
  cache.cacheElement(this.getInstanceName(),recordId,partialMatch);
  return partialMatch;
}","/** 
 * Identifies whether in the current context it is potentially the case that a ""partial"" response is acceptable, and builds the response if so. Returns null if that strategy is not applicable or if a partial response could not be generated
 */
private TreeElement detectAndProcessLimitedScopeResponse(int recordId,QueryContext context){
  if (context == null) {
    return null;
  }
  ScopeLimitedReferenceRequestCache cache=context.getQueryCacheOrNull(ScopeLimitedReferenceRequestCache.class);
  if (cache == null) {
    return null;
  }
  TreeElement partialMatch=cache.getCachedElementIfExists(this.getInstanceName(),recordId);
  if (partialMatch != null) {
    return partialMatch;
  }
  if (!cache.isInstancePotentiallyScopeLimited(this.getInstanceName())) {
    return null;
  }
  String[] scopeSufficientColumnList=analyseScopeSufficientColumnList(cache);
  if (scopeSufficientColumnList == null) {
    return null;
  }
  String[] objectMetadata=getElementMetadata(recordId,scopeSufficientColumnList,context);
  partialMatch=this.buildPartialElementFromMetadata(scopeSufficientColumnList,objectMetadata);
  cache.cacheElement(this.getInstanceName(),recordId,partialMatch);
  return partialMatch;
}",0.9728122344944776
146582,"public TreeElement getCachedElementIfExists(String instanceName,int recordId){
  if (!treeElementCache.containsKey(instanceName) || !treeElementCache.get(instanceName).containsKey(recordId)) {
    return null;
  }
  return treeElementCache.get(instanceName).get(recordId).get();
}","public TreeElement getCachedElementIfExists(String instanceName,int recordId){
  if (!treeElementCache.containsKey(instanceName) || !treeElementCache.get(instanceName).containsKey(recordId)) {
    return null;
  }
  return treeElementCache.get(instanceName).get(recordId);
}",0.9891696750902528
146583,"public void cacheElement(String instanceName,int recordId,TreeElement element){
  treeElementCache.get(instanceName).put(recordId,new WeakReference<TreeElement>(element));
}","public void cacheElement(String instanceName,int recordId,TreeElement element){
  treeElementCache.get(instanceName).put(recordId,element);
}",0.8980891719745223
146584,"/** 
 * Provide a cue from within an instance that it has determined a payload that it can use to process requests from limited scope. This signal is a guarantee that the instance will be able to dereference the tree references it is responsible for in the limited scope using a partial load rather than a full model load.
 */
public void setInternalScopeLimit(String instanceName,String[] columnNameCacheLoads){
  this.instanceScopeLimitCache.put(instanceName,columnNameCacheLoads);
  treeElementCache.put(instanceName,new HashMap<Integer,WeakReference<TreeElement>>());
}","/** 
 * Provide a cue from within an instance that it has determined a payload that it can use to process requests from limited scope. This signal is a guarantee that the instance will be able to dereference the tree references it is responsible for in the limited scope using a partial load rather than a full model load.
 */
public void setInternalScopeLimit(String instanceName,String[] columnNameCacheLoads){
  this.instanceScopeLimitCache.put(instanceName,columnNameCacheLoads);
  treeElementCache.put(instanceName,new HashMap());
}",0.9675675675675676
146585,"/** 
 * Attempt to process one or more of the elements from the heads of the key/value vector, and return the matching ID's. If an argument is processed, they should be removed from the key/value vector <b>Important:</b> This method and any re-implementations <i>must remove at least one key/value pair from the incoming Vectors</i>, or must throw an IllegalArgumentException to denote that the provided key can't be processed in the current context. The method can optionally remove/process more than one key at a time, but is expected to process at least the first.
 * @param profiles    A vector of pending optimizations to be attempted. The keys should be processed left->right
 * @param storage The storage to be processed
 * @param currentQueryContext
 * @return A Vector of integer ID's for records in the provided storage which match one or more of the keys provided.
 * @throws IllegalArgumentException If there was no index matching possible on the provided key and the key/value vectorswon't be shortened.
 */
protected Collection<Integer> getNextIndexMatch(Vector<PredicateProfile> profiles,IStorageUtilityIndexed<?> storage,QueryContext currentQueryContext) throws IllegalArgumentException {
  if (!(profiles.elementAt(0) instanceof IndexedValueLookup)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  IndexedValueLookup op=(IndexedValueLookup)profiles.elementAt(0);
  EvaluationTrace trace=new EvaluationTrace(""String_Node_Str"" + op.key + ""String_Node_Str"");
  List<Integer> ids=storage.getIDsForValue(op.key,op.value);
  if (getStorageCacheName() != null && ids.size() > 50 && ids.size() < PerformanceTuningUtil.getMaxPrefetchCaseBlock()) {
    RecordSetResultCache cue=currentQueryContext.getQueryCache(RecordSetResultCache.class);
    String bulkRecordSetKey=String.format(""String_Node_Str"",op.key,op.value);
    cue.reportBulkRecordSet(bulkRecordSetKey,getStorageCacheName(),new LinkedHashSet(ids));
  }
  trace.setOutcome(""String_Node_Str"" + ids.size());
  if (currentQueryContext != null) {
    currentQueryContext.reportTrace(trace);
  }
  if (defaultCacher != null) {
    defaultCacher.cacheResult(op.key,op.value,ids);
  }
  profiles.removeElementAt(0);
  return ids;
}","/** 
 * Attempt to process one or more of the elements from the heads of the key/value vector, and return the matching ID's. If an argument is processed, they should be removed from the key/value vector <b>Important:</b> This method and any re-implementations <i>must remove at least one key/value pair from the incoming Vectors</i>, or must throw an IllegalArgumentException to denote that the provided key can't be processed in the current context. The method can optionally remove/process more than one key at a time, but is expected to process at least the first.
 * @param profiles    A vector of pending optimizations to be attempted. The keys should be processed left->right
 * @param storage The storage to be processed
 * @param currentQueryContext
 * @return A Vector of integer ID's for records in the provided storage which match one or more of the keys provided.
 * @throws IllegalArgumentException If there was no index matching possible on the provided key and the key/value vectorswon't be shortened.
 */
protected Collection<Integer> getNextIndexMatch(Vector<PredicateProfile> profiles,IStorageUtilityIndexed<?> storage,QueryContext currentQueryContext) throws IllegalArgumentException {
  if (!(profiles.elementAt(0) instanceof IndexedValueLookup)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  IndexedValueLookup op=(IndexedValueLookup)profiles.elementAt(0);
  EvaluationTrace trace=new EvaluationTrace(""String_Node_Str"" + op.key + ""String_Node_Str"");
  List<Integer> ids=storage.getIDsForValue(op.key,op.value);
  if (getStorageCacheName() != null && ids.size() > 50 && ids.size() < PerformanceTuningUtil.getMaxPrefetchCaseBlock()) {
    RecordSetResultCache cue=currentQueryContext.getQueryCache(RecordSetResultCache.class);
    String bulkRecordSetKey=String.format(""String_Node_Str"",op.key,op.value);
    cue.reportBulkRecordSet(bulkRecordSetKey,getStorageCacheName(),new LinkedHashSet(ids));
  }
  trace.setOutcome(""String_Node_Str"" + ids.size());
  if (currentQueryContext != null) {
    currentQueryContext.reportTrace(trace);
  }
  boolean inTemporaryQueryContext=currentQueryContext.getQueryCacheOrNull(ScopeLimitedReferenceRequestCache.class) != null;
  if (defaultCacher != null && !inTemporaryQueryContext) {
    defaultCacher.cacheResult(op.key,op.value,ids);
  }
  profiles.removeElementAt(0);
  return ids;
}",0.959772627896808
146586,"private SelectChoice buildSelectChoice(TreeReference choiceRef,ItemsetBinding itemset,DataInstance formInstance,EvaluationContext ec,ReducingTraceReporter reporter,int index){
  String label=itemset.labelExpr.evalReadable(formInstance,new EvaluationContext(ec,choiceRef));
  if (reporter != null) {
    InstrumentationUtils.printAndClearTraces(reporter,""String_Node_Str"");
  }
  String value=null;
  TreeElement copyNode=null;
  if (itemset.copyMode) {
    copyNode=this.getMainInstance().resolveReference(itemset.copyRef.contextualize(choiceRef));
  }
  if (itemset.valueRef != null) {
    value=itemset.valueExpr.evalReadable(formInstance,new EvaluationContext(ec,choiceRef));
  }
  if (reporter != null) {
    InstrumentationUtils.printAndClearTraces(reporter,""String_Node_Str"");
  }
  SelectChoice choice=new SelectChoice(label,value != null ? value : ""String_Node_Str"" + index,itemset.labelIsItext);
  choice.setIndex(index);
  if (itemset.copyMode) {
    choice.copyNode=copyNode;
  }
  if (itemset.sortRef != null) {
    String evaluatedSortProperty=itemset.sortExpr.evalReadable(formInstance,new EvaluationContext(ec,choiceRef));
    choice.setSortProperty(evaluatedSortProperty);
  }
  if (reporter != null) {
    InstrumentationUtils.printAndClearTraces(reporter,""String_Node_Str"");
  }
  return choice;
}","private SelectChoice buildSelectChoice(TreeReference choiceRef,ItemsetBinding itemset,DataInstance formInstance,EvaluationContext ec,ReducingTraceReporter reporter,int index){
  EvaluationContext subContext=new EvaluationContext(ec,choiceRef);
  String label=itemset.labelExpr.evalReadable(formInstance,subContext);
  String value=null;
  TreeElement copyNode=null;
  if (itemset.copyMode) {
    copyNode=this.getMainInstance().resolveReference(itemset.copyRef.contextualize(choiceRef));
  }
  if (itemset.valueRef != null) {
    value=itemset.valueExpr.evalReadable(formInstance,subContext);
  }
  SelectChoice choice=new SelectChoice(label,value != null ? value : ""String_Node_Str"" + index,itemset.labelIsItext);
  choice.setIndex(index);
  if (itemset.copyMode) {
    choice.copyNode=copyNode;
  }
  if (itemset.sortRef != null) {
    String evaluatedSortProperty=itemset.sortExpr.evalReadable(formInstance,subContext);
    choice.setSortProperty(evaluatedSortProperty);
  }
  return choice;
}",0.2604932929467763
146587,"/** 
 * Identify the itemset in the backend model, and create a set of SelectChoice objects at the current question reference based on the data in the model. Will modify the itemset binding to contain the relevant choices
 * @param itemset The binding for an itemset, where the choices will be populated
 * @param curQRef A reference to the current question's element, which will beused to determine the values to be chosen from.
 */
public void populateDynamicChoices(ItemsetBinding itemset,TreeReference curQRef){
  DataInstance formInstance;
  if (itemset.nodesetRef.getInstanceName() != null) {
    formInstance=getNonMainInstance(itemset.nodesetRef.getInstanceName());
    if (formInstance == null) {
      throw new XPathException(""String_Node_Str"" + itemset.nodesetRef.getInstanceName() + ""String_Node_Str"");
    }
  }
 else {
    formInstance=getMainInstance();
  }
  EvaluationContext ec=new EvaluationContext(exprEvalContext,itemset.contextRef.contextualize(curQRef));
  ReducingTraceReporter reporter=null;
  if (mProfilingEnabled) {
    reporter=new ReducingTraceReporter();
    ec.setDebugModeOn(reporter);
  }
  QueryContext isolatedContext=ec.signalNewQueryContextForIsolation();
  Vector<TreeReference> matches=itemset.nodesetExpr.evalNodeset(formInstance,ec);
  if (reporter != null) {
    InstrumentationUtils.printAndClearTraces(reporter,""String_Node_Str"");
  }
  if (matches == null) {
    String instanceName=itemset.nodesetRef.getInstanceName();
    if (instanceName == null) {
      throw new XPathException(""String_Node_Str"" + itemset.nodesetRef + ""String_Node_Str"");
    }
 else {
      throw new XPathException(""String_Node_Str"" + instanceName + ""String_Node_Str"");
    }
  }
  Vector<SelectChoice> choices=new Vector<>();
  QueryContext newContext=ec.getCurrentQueryContext().checkForDerivativeContextAndReturn(matches.size());
  ec.setQueryContext(newContext);
  for (int i=0; i < matches.size(); i++) {
    choices.addElement(buildSelectChoice(matches.elementAt(i),itemset,formInstance,ec,reporter,i));
  }
  itemset.setChoices(choices);
}","/** 
 * Identify the itemset in the backend model, and create a set of SelectChoice objects at the current question reference based on the data in the model. Will modify the itemset binding to contain the relevant choices
 * @param itemset The binding for an itemset, where the choices will be populated
 * @param curQRef A reference to the current question's element, which will beused to determine the values to be chosen from.
 */
public void populateDynamicChoices(ItemsetBinding itemset,TreeReference curQRef){
  DataInstance formInstance;
  if (itemset.nodesetRef.getInstanceName() != null) {
    formInstance=getNonMainInstance(itemset.nodesetRef.getInstanceName());
    if (formInstance == null) {
      throw new XPathException(""String_Node_Str"" + itemset.nodesetRef.getInstanceName() + ""String_Node_Str"");
    }
  }
 else {
    formInstance=getMainInstance();
  }
  EvaluationContext ec=new EvaluationContext(exprEvalContext,itemset.contextRef.contextualize(curQRef));
  ReducingTraceReporter reporter=null;
  if (mProfilingEnabled) {
    reporter=new ReducingTraceReporter();
    ec.setDebugModeOn(reporter);
  }
  setPotentiallyLimitedScopeContext(ec,itemset);
  Vector<TreeReference> matches=itemset.nodesetExpr.evalNodeset(formInstance,ec);
  if (reporter != null) {
    InstrumentationUtils.printAndClearTraces(reporter,""String_Node_Str"");
  }
  if (matches == null) {
    String instanceName=itemset.nodesetRef.getInstanceName();
    if (instanceName == null) {
      throw new XPathException(""String_Node_Str"" + itemset.nodesetRef + ""String_Node_Str"");
    }
 else {
      throw new XPathException(""String_Node_Str"" + instanceName + ""String_Node_Str"");
    }
  }
  Vector<SelectChoice> choices=new Vector<>();
  QueryContext newContext=ec.getCurrentQueryContext().checkForDerivativeContextAndReturn(matches.size());
  ec.setQueryContext(newContext);
  for (int i=0; i < matches.size(); i++) {
    choices.addElement(buildSelectChoice(matches.elementAt(i),itemset,formInstance,ec,reporter,i));
  }
  if (reporter != null) {
    InstrumentationUtils.printAndClearTraces(reporter,""String_Node_Str"");
  }
  itemset.setChoices(choices);
}",0.9416785206258892
146588,"public AbstractTreeElement resolveReference(TreeReference qualifiedRef){
  DataInstance instance=this.getMainInstance();
  if (qualifiedRef.getInstanceName() != null && (instance == null || instance.getInstanceId() == null || !instance.getInstanceId().equals(qualifiedRef.getInstanceName()))) {
    instance=this.getInstance(qualifiedRef.getInstanceName());
  }
  return instance.resolveReference(qualifiedRef);
}","public AbstractTreeElement resolveReference(TreeReference qualifiedRef){
  DataInstance instance=this.getMainInstance();
  if (qualifiedRef.getInstanceName() != null && (instance == null || instance.getInstanceId() == null || !instance.getInstanceId().equals(qualifiedRef.getInstanceName()))) {
    instance=this.getInstance(qualifiedRef.getInstanceName());
  }
  return instance.resolveReference(qualifiedRef,this);
}",0.9939831528279182
146589,"/** 
 * Recursive helper function for expandReference that performs the search for all repeated nodes that match the pattern of the 'ref' argument.
 * @param sourceRef      original path we're matching against
 * @param sourceInstance original node obtained from sourceRef
 * @param workingRef     explicit path that refers to the current node
 * @param refs           Accumulator vector to collect matching paths. Containedreferences are unambiguous. Template nodes won't be included when matching INDEX_UNBOUND, but will be when INDEX_TEMPLATE is explicitly set.
 */
private void expandReferenceAccumulator(TreeReference sourceRef,DataInstance sourceInstance,TreeReference workingRef,Vector<TreeReference> refs,boolean includeTemplates){
  int depth=workingRef.size();
  if (depth == sourceRef.size()) {
    refs.addElement(workingRef);
    return;
  }
  String name=sourceRef.getName(depth);
  int mult=sourceRef.getMultiplicity(depth);
  Vector<XPathExpression> predicates=sourceRef.getPredicate(depth);
  Vector<XPathExpression> originalPredicates=predicates;
  if (predicates != null) {
    Vector<XPathExpression> predCopy=new Vector<>(predicates.size());
    for (    XPathExpression xpe : predicates) {
      predCopy.addElement(xpe);
    }
    predicates=predCopy;
  }
  AbstractTreeElement node=sourceInstance.resolveReference(workingRef);
  this.openBulkTrace();
  Collection<TreeReference> childSet=node.tryBatchChildFetch(name,mult,predicates,this);
  this.reportBulkTraceResults(originalPredicates,predicates,childSet);
  this.closeTrace();
  if (childSet == null) {
    childSet=loadReferencesChildren(node,name,mult,includeTemplates);
  }
  QueryContext subContext=queryContext.checkForDerivativeContextAndReturn(childSet == null ? 0 : childSet.size());
  if (this.getOriginalContextForPropogation() == null && subContext != queryContext) {
    subContext.setHackyOriginalContextBody(new CurrentModelQuerySet(childSet));
  }
  int[] positionContext=new int[predicates == null ? 0 : predicates.size()];
  for (  TreeReference refToExpand : childSet) {
    boolean passedAll=true;
    if (predicates != null && predicates.size() > 0) {
      int predIndex=-1;
      for (      XPathExpression predExpr : predicates) {
        predIndex++;
        positionContext[predIndex]++;
        EvaluationContext evalContext=rescope(refToExpand,positionContext[predIndex],subContext);
        Object o=predExpr.eval(sourceInstance,evalContext);
        o=FunctionUtils.unpack(o);
        boolean passed=false;
        if (o instanceof Double) {
          int intVal=FunctionUtils.toInt(o).intValue();
          passed=(intVal == positionContext[predIndex]);
        }
 else         if (o instanceof Boolean) {
          passed=(Boolean)o;
        }
        if (!passed) {
          passedAll=false;
          break;
        }
      }
    }
    if (passedAll) {
      expandReferenceAccumulator(sourceRef,sourceInstance,refToExpand,refs,includeTemplates);
    }
  }
}","/** 
 * Recursive helper function for expandReference that performs the search for all repeated nodes that match the pattern of the 'ref' argument.
 * @param sourceRef      original path we're matching against
 * @param sourceInstance original node obtained from sourceRef
 * @param workingRef     explicit path that refers to the current node
 * @param refs           Accumulator vector to collect matching paths. Containedreferences are unambiguous. Template nodes won't be included when matching INDEX_UNBOUND, but will be when INDEX_TEMPLATE is explicitly set.
 */
private void expandReferenceAccumulator(TreeReference sourceRef,DataInstance sourceInstance,TreeReference workingRef,Vector<TreeReference> refs,boolean includeTemplates){
  int depth=workingRef.size();
  if (depth == sourceRef.size()) {
    refs.addElement(workingRef);
    return;
  }
  String name=sourceRef.getName(depth);
  int mult=sourceRef.getMultiplicity(depth);
  Vector<XPathExpression> predicates=sourceRef.getPredicate(depth);
  Vector<XPathExpression> originalPredicates=predicates;
  if (predicates != null) {
    Vector<XPathExpression> predCopy=new Vector<>(predicates.size());
    for (    XPathExpression xpe : predicates) {
      predCopy.addElement(xpe);
    }
    predicates=predCopy;
  }
  AbstractTreeElement node=sourceInstance.resolveReference(workingRef,this);
  this.openBulkTrace();
  Collection<TreeReference> childSet=node.tryBatchChildFetch(name,mult,predicates,this);
  this.reportBulkTraceResults(originalPredicates,predicates,childSet);
  this.closeTrace();
  if (childSet == null) {
    childSet=loadReferencesChildren(node,name,mult,includeTemplates);
  }
  QueryContext subContext=queryContext.checkForDerivativeContextAndReturn(childSet == null ? 0 : childSet.size());
  if (this.getOriginalContextForPropogation() == null && subContext != queryContext) {
    subContext.setHackyOriginalContextBody(new CurrentModelQuerySet(childSet));
  }
  int[] positionContext=new int[predicates == null ? 0 : predicates.size()];
  for (  TreeReference refToExpand : childSet) {
    boolean passedAll=true;
    if (predicates != null && predicates.size() > 0) {
      int predIndex=-1;
      for (      XPathExpression predExpr : predicates) {
        predIndex++;
        positionContext[predIndex]++;
        EvaluationContext evalContext=rescope(refToExpand,positionContext[predIndex],subContext);
        Object o=predExpr.eval(sourceInstance,evalContext);
        o=FunctionUtils.unpack(o);
        boolean passed=false;
        if (o instanceof Double) {
          int intVal=FunctionUtils.toInt(o).intValue();
          passed=(intVal == positionContext[predIndex]);
        }
 else         if (o instanceof Boolean) {
          passed=(Boolean)o;
        }
        if (!passed) {
          passedAll=false;
          break;
        }
      }
    }
    if (passedAll) {
      expandReferenceAccumulator(sourceRef,sourceInstance,refToExpand,refs,includeTemplates);
    }
  }
}",0.9991592399529174
146590,"private String getRuntimeCount(long l){
  if (l / 1000 / 1000 > 0) {
    return l / 1000 / 1000 + ""String_Node_Str"";
  }
 else   if (l / 1000 > 0) {
    return l / 1000 + ""String_Node_Str"";
  }
 else {
    return l + ""String_Node_Str"";
  }
}","public static String getRuntimeCount(long l){
  if (l / 1000 / 1000 > 0) {
    return l / 1000 / 1000 + ""String_Node_Str"";
  }
 else   if (l / 1000 > 0) {
    return l / 1000 + ""String_Node_Str"";
  }
 else {
    return l + ""String_Node_Str"";
  }
}",0.971311475409836
146591,"private void performEvaluation(){
synchronized (evaluated) {
    if (evaluated) {
      return;
    }
    Vector<TreeReference> nodes=ec.expandReference(unExpandedRef);
    for (int i=0; i < nodes.size(); i++) {
      if (!instance.resolveReference(nodes.elementAt(i),ec).isRelevant()) {
        nodes.removeElementAt(i);
        i--;
      }
    }
    this.setReferences(nodes);
    evaluated=true;
  }
}","private void performEvaluation(){
synchronized (evaluated) {
    if (evaluated) {
      return;
    }
    Vector<TreeReference> nodes=ec.expandReference(unExpandedRef);
    for (int i=0; i < nodes.size(); i++) {
      if (!instance.resolveReference(nodes.elementAt(i),ec).isRelevant()) {
        nodes.removeElementAt(i);
        i--;
      }
    }
    this.setReferences(nodes);
    evaluated=new Boolean(true);
  }
}",0.9744835965978128
146592,"protected Model getElement(int recordId,QueryContext context){
  if (context == null || getStorageCacheName() == null) {
    return getElementSingular(recordId,context);
  }
  RecordSetResultCache recordSetCache=context.getQueryCacheOrNull(RecordSetResultCache.class);
  RecordObjectCache<Model> recordObjectCache=getRecordObjectCacheIfRelevant(context);
  if (recordObjectCache != null) {
    if (recordObjectCache.isLoaded(recordId)) {
      return recordObjectCache.getLoadedRecordObject(recordId);
    }
    if (canLoadRecordFromGroup(recordSetCache,recordId)) {
      Pair<String,LinkedHashSet<Integer>> tranche=recordSetCache.getRecordSetForRecordId(getStorageCacheName(),recordId);
      EvaluationTrace loadTrace=new EvaluationTrace(String.format(""String_Node_Str"",this.getStorageCacheName(),tranche.first));
      LinkedHashSet<Integer> body=tranche.second;
      storage.bulkRead(body,recordObjectCache.getLoadedCaseMap());
      loadTrace.setOutcome(""String_Node_Str"" + body.size());
      context.reportTrace(loadTrace);
      return recordObjectCache.getLoadedRecordObject(recordId);
    }
  }
  return getElementSingular(recordId,context);
}","protected Model getElement(int recordId,QueryContext context){
  if (context == null || getStorageCacheName() == null) {
    return getElementSingular(recordId,context);
  }
  RecordSetResultCache recordSetCache=context.getQueryCacheOrNull(RecordSetResultCache.class);
  RecordObjectCache<Model> recordObjectCache=getRecordObjectCacheIfRelevant(context);
  String storageCacheKey=getStorageCacheName();
  if (recordObjectCache != null) {
    if (recordObjectCache.isLoaded(storageCacheKey,recordId)) {
      return recordObjectCache.getLoadedRecordObject(storageCacheKey,recordId);
    }
    if (canLoadRecordFromGroup(recordSetCache,recordId)) {
      Pair<String,LinkedHashSet<Integer>> tranche=recordSetCache.getRecordSetForRecordId(storageCacheKey,recordId);
      EvaluationTrace loadTrace=new EvaluationTrace(String.format(""String_Node_Str"",this.getStorageCacheName(),tranche.first));
      LinkedHashSet<Integer> body=tranche.second;
      storage.bulkRead(body,recordObjectCache.getLoadedCaseMap(storageCacheKey));
      loadTrace.setOutcome(""String_Node_Str"" + body.size());
      context.reportTrace(loadTrace);
      return recordObjectCache.getLoadedRecordObject(storageCacheKey,recordId);
    }
  }
  return getElementSingular(recordId,context);
}",0.9391304347826088
146593,"public HashMap<Integer,T> getLoadedCaseMap(){
  return cachedRecordObjects;
}","public HashMap<Integer,T> getLoadedCaseMap(String storageSetID){
  return getCache(storageSetID);
}",0.75
146594,"public T getLoadedRecordObject(int recordId){
  return cachedRecordObjects.get(recordId);
}","public T getLoadedRecordObject(String storageSetID,int recordId){
  return getCache(storageSetID).get(recordId);
}",0.7804878048780488
146595,"public boolean isLoaded(int recordId){
  return cachedRecordObjects.containsKey(recordId);
}","public boolean isLoaded(String storageSetID,int recordId){
  return getCache(storageSetID).containsKey(recordId);
}",0.782608695652174
146596,"protected Model getElement(int recordId,QueryContext context){
  if (context == null || getStorageCacheName() == null) {
    return getElementSingular(recordId,context);
  }
  RecordSetResultCache recordSetCache=context.getQueryCacheOrNull(RecordSetResultCache.class);
  RecordObjectCache<Model> recordObjectCache=getRecordObjectCacheIfRelevant(context);
  if (recordObjectCache != null) {
    if (recordObjectCache.isLoaded(recordId)) {
      return recordObjectCache.getLoadedRecordObject(recordId);
    }
    if (canLoadRecordFromGroup(recordSetCache,recordId)) {
      Pair<String,LinkedHashSet<Integer>> tranche=recordSetCache.getRecordSetForRecordId(getStorageCacheName(),recordId);
      EvaluationTrace loadTrace=new EvaluationTrace(String.format(""String_Node_Str"",this.getStorageCacheName(),tranche.first));
      LinkedHashSet<Integer> body=tranche.second;
      storage.bulkRead(body,recordObjectCache.getLoadedCaseMap());
      loadTrace.setOutcome(""String_Node_Str"" + body.size());
      context.reportTrace(loadTrace);
      return recordObjectCache.getLoadedRecordObject(recordId);
    }
  }
  return getElementSingular(recordId,context);
}","protected Model getElement(int recordId,QueryContext context){
  if (context == null || getStorageCacheName() == null) {
    return getElementSingular(recordId,context);
  }
  RecordSetResultCache recordSetCache=context.getQueryCacheOrNull(RecordSetResultCache.class);
  RecordObjectCache<Model> recordObjectCache=getRecordObjectCacheIfRelevant(context);
  String storageCacheKey=getStorageCacheName();
  if (recordObjectCache != null) {
    if (recordObjectCache.isLoaded(storageCacheKey,recordId)) {
      return recordObjectCache.getLoadedRecordObject(storageCacheKey,recordId);
    }
    FunctionUtils.toString(XPathParseTool.parseXPath().eval(evalContext));
    if (canLoadRecordFromGroup(recordSetCache,recordId)) {
      Pair<String,LinkedHashSet<Integer>> tranche=recordSetCache.getRecordSetForRecordId(storageCacheKey,recordId);
      EvaluationTrace loadTrace=new EvaluationTrace(String.format(""String_Node_Str"",this.getStorageCacheName(),tranche.first));
      LinkedHashSet<Integer> body=tranche.second;
      storage.bulkRead(body,recordObjectCache.getLoadedCaseMap(storageCacheKey));
      loadTrace.setOutcome(""String_Node_Str"" + body.size());
      context.reportTrace(loadTrace);
      return recordObjectCache.getLoadedRecordObject(storageCacheKey,recordId);
    }
  }
  return getElementSingular(recordId,context);
}",0.910843373493976
146597,"public HashMap<Integer,T> getLoadedCaseMap(){
  return cachedRecordObjects;
}","public HashMap<Integer,T> getLoadedCaseMap(String storageSetID){
  return getCache(storageSetID);
}",0.75
146598,"public T getLoadedRecordObject(int recordId){
  return cachedRecordObjects.get(recordId);
}","public T getLoadedRecordObject(String storageSetID,int recordId){
  return getCache(storageSetID).get(recordId);
}",0.7804878048780488
146599,"public boolean isLoaded(int recordId){
  return cachedRecordObjects.containsKey(recordId);
}","public boolean isLoaded(String storageSetID,int recordId){
  return getCache(storageSetID).containsKey(recordId);
}",0.782608695652174
146600,"private SelectChoice buildSelectChoice(TreeReference choiceRef,ItemsetBinding itemset,DataInstance formInstance,EvaluationContext ec,int index){
  String label=itemset.labelExpr.evalReadable(formInstance,new EvaluationContext(ec,choiceRef));
  String value=null;
  TreeElement copyNode=null;
  if (itemset.copyMode) {
    copyNode=this.getMainInstance().resolveReference(itemset.copyRef.contextualize(choiceRef));
  }
  if (itemset.valueRef != null) {
    value=itemset.valueExpr.evalReadable(formInstance,new EvaluationContext(ec,choiceRef));
  }
  SelectChoice choice=new SelectChoice(label,value != null ? value : ""String_Node_Str"" + index,itemset.labelIsItext);
  choice.setIndex(index);
  if (itemset.copyMode) {
    choice.copyNode=copyNode;
  }
  if (itemset.sortRef != null) {
    String evaluatedSortProperty=itemset.sortExpr.evalReadable(formInstance,new EvaluationContext(ec,choiceRef));
    choice.setSortProperty(evaluatedSortProperty);
  }
  return choice;
  if (reporter != null) {
    InstrumentationUtils.printAndClearTraces(reporter,""String_Node_Str"");
  }
}","private SelectChoice buildSelectChoice(TreeReference choiceRef,ItemsetBinding itemset,DataInstance formInstance,EvaluationContext ec,ReducingTraceReporter reporter,int index){
  String label=itemset.labelExpr.evalReadable(formInstance,new EvaluationContext(ec,choiceRef));
  if (reporter != null) {
    InstrumentationUtils.printAndClearTraces(reporter,""String_Node_Str"");
  }
  String value=null;
  TreeElement copyNode=null;
  if (itemset.copyMode) {
    copyNode=this.getMainInstance().resolveReference(itemset.copyRef.contextualize(choiceRef));
  }
  if (itemset.valueRef != null) {
    value=itemset.valueExpr.evalReadable(formInstance,new EvaluationContext(ec,choiceRef));
  }
  if (reporter != null) {
    InstrumentationUtils.printAndClearTraces(reporter,""String_Node_Str"");
  }
  SelectChoice choice=new SelectChoice(label,value != null ? value : ""String_Node_Str"" + index,itemset.labelIsItext);
  choice.setIndex(index);
  if (itemset.copyMode) {
    choice.copyNode=copyNode;
  }
  if (itemset.sortRef != null) {
    String evaluatedSortProperty=itemset.sortExpr.evalReadable(formInstance,new EvaluationContext(ec,choiceRef));
    choice.setSortProperty(evaluatedSortProperty);
  }
  if (reporter != null) {
    InstrumentationUtils.printAndClearTraces(reporter,""String_Node_Str"");
  }
  return choice;
}",0.466750313676286
146601,"/** 
 * Identify the itemset in the backend model, and create a set of SelectChoice objects at the current question reference based on the data in the model. Will modify the itemset binding to contain the relevant choices
 * @param itemset The binding for an itemset, where the choices will be populated
 * @param curQRef A reference to the current question's element, which will beused to determine the values to be chosen from.
 */
public void populateDynamicChoices(ItemsetBinding itemset,TreeReference curQRef){
  DataInstance formInstance;
  if (itemset.nodesetRef.getInstanceName() != null) {
    formInstance=getNonMainInstance(itemset.nodesetRef.getInstanceName());
    if (formInstance == null) {
      throw new XPathException(""String_Node_Str"" + itemset.nodesetRef.getInstanceName() + ""String_Node_Str"");
    }
  }
 else {
    formInstance=getMainInstance();
  }
  EvaluationContext ec=new EvaluationContext(exprEvalContext,itemset.contextRef.contextualize(curQRef));
  ReducingTraceReporter reporter=null;
  if (mProfilingEnabled) {
    reporter=new ReducingTraceReporter();
    ec.setDebugModeOn(reporter);
  }
  Vector<TreeReference> matches=itemset.nodesetExpr.evalNodeset(formInstance,ec);
  if (reporter != null) {
    InstrumentationUtils.printAndClearTraces(reporter,""String_Node_Str"");
  }
  if (matches == null) {
    String instanceName=itemset.nodesetRef.getInstanceName();
    if (instanceName == null) {
      throw new XPathException(""String_Node_Str"" + itemset.nodesetRef + ""String_Node_Str"");
    }
 else {
      throw new XPathException(""String_Node_Str"" + instanceName + ""String_Node_Str"");
    }
  }
  Vector<SelectChoice> choices=new Vector<>();
  QueryContext newContext=ec.getCurrentQueryContext().checkForDerivativeContextAndReturn(matches.size());
  ec.setQueryContext(newContext);
  for (int i=0; i < matches.size(); i++) {
    choices.addElement(buildSelectChoice(matches.elementAt(i),itemset,formInstance,ec,i));
  }
  itemset.setChoices(choices);
}","/** 
 * Identify the itemset in the backend model, and create a set of SelectChoice objects at the current question reference based on the data in the model. Will modify the itemset binding to contain the relevant choices
 * @param itemset The binding for an itemset, where the choices will be populated
 * @param curQRef A reference to the current question's element, which will beused to determine the values to be chosen from.
 */
public void populateDynamicChoices(ItemsetBinding itemset,TreeReference curQRef){
  DataInstance formInstance;
  if (itemset.nodesetRef.getInstanceName() != null) {
    formInstance=getNonMainInstance(itemset.nodesetRef.getInstanceName());
    if (formInstance == null) {
      throw new XPathException(""String_Node_Str"" + itemset.nodesetRef.getInstanceName() + ""String_Node_Str"");
    }
  }
 else {
    formInstance=getMainInstance();
  }
  EvaluationContext ec=new EvaluationContext(exprEvalContext,itemset.contextRef.contextualize(curQRef));
  ReducingTraceReporter reporter=null;
  if (mProfilingEnabled) {
    reporter=new ReducingTraceReporter();
    ec.setDebugModeOn(reporter);
  }
  Vector<TreeReference> matches=itemset.nodesetExpr.evalNodeset(formInstance,ec);
  if (reporter != null) {
    InstrumentationUtils.printAndClearTraces(reporter,""String_Node_Str"");
  }
  if (matches == null) {
    String instanceName=itemset.nodesetRef.getInstanceName();
    if (instanceName == null) {
      throw new XPathException(""String_Node_Str"" + itemset.nodesetRef + ""String_Node_Str"");
    }
 else {
      throw new XPathException(""String_Node_Str"" + instanceName + ""String_Node_Str"");
    }
  }
  Vector<SelectChoice> choices=new Vector<>();
  QueryContext newContext=ec.getCurrentQueryContext().checkForDerivativeContextAndReturn(matches.size());
  ec.setQueryContext(newContext);
  for (int i=0; i < matches.size(); i++) {
    choices.addElement(buildSelectChoice(matches.elementAt(i),itemset,formInstance,ec,reporter,i));
  }
  itemset.setChoices(choices);
}",0.997741530740276
146602,"private void runAsync(Runnable test){
  Thread t=new Thread(test);
  t.start();
  try {
    t.join(50);
  }
 catch (  InterruptedException e) {
  }
  if (t.isAlive()) {
    t.stop();
    throw new RuntimeException(""String_Node_Str"");
  }
}","private void runAsync(Runnable test,String label){
  Thread t=new Thread(test);
  t.start();
  try {
    t.join(50);
  }
 catch (  InterruptedException e) {
  }
  if (t.isAlive()) {
    t.stop();
    throw new RuntimeException(""String_Node_Str"" + label);
  }
}",0.9258517034068136
146603,"@Test public void testLinearSub(){
  final String F=""String_Node_Str"";
  final String S=""String_Node_Str"";
  final String C=""String_Node_Str"";
  final String D=""String_Node_Str"";
  final String[] res=new String[]{""String_Node_Str"",""String_Node_Str""};
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F}),F);
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F,S}),F + ""String_Node_Str"" + S);
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F}),""String_Node_Str"" + F);
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F}),""String_Node_Str"" + F + ""String_Node_Str"");
  final String[] holder=new String[1];
  runAsync(new Runnable(){
    @Override public void run(){
      holder[0]=Localizer.processArguments(""String_Node_Str"",new String[]{C});
    }
  }
);
  assertEquals(holder[0],C);
  runAsync(new Runnable(){
    @Override public void run(){
      holder[0]=Localizer.processArguments(""String_Node_Str"",new String[]{D});
    }
  }
);
  assertEquals(holder[0],D);
  runAsync(new Runnable(){
    @Override public void run(){
      holder[0]=Localizer.processArguments(holder[0],res);
    }
  }
);
  assertEquals(holder[0],res[1] + res[0]);
  runAsync(new Runnable(){
    @Override public void run(){
      holder[0]=Localizer.processArguments(""String_Node_Str"",res);
    }
  }
);
  assertEquals(holder[0],""String_Node_Str"" + res[1]);
}","@Test public void testLinearSub(){
  final String F=""String_Node_Str"";
  final String S=""String_Node_Str"";
  final String C=""String_Node_Str"";
  final String D=""String_Node_Str"";
  final String[] res=new String[]{""String_Node_Str"",""String_Node_Str""};
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F}),F);
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F,S}),F + ""String_Node_Str"" + S);
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F}),""String_Node_Str"" + F);
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F}),""String_Node_Str"" + F + ""String_Node_Str"");
  final String[] holder=new String[1];
  runAsync(new Runnable(){
    @Override public void run(){
      holder[0]=Localizer.processArguments(""String_Node_Str"",new String[]{C});
    }
  }
,""String_Node_Str"" + C);
  assertEquals(holder[0],C);
  runAsync(new Runnable(){
    @Override public void run(){
      holder[0]=Localizer.processArguments(""String_Node_Str"",new String[]{D});
    }
  }
,""String_Node_Str"" + D);
  assertEquals(holder[0],D);
  runAsync(new Runnable(){
    @Override public void run(){
      holder[0]=Localizer.processArguments(holder[0],res);
    }
  }
,""String_Node_Str"" + res[1] + res[0]);
  assertEquals(holder[0],res[1] + res[0]);
  runAsync(new Runnable(){
    @Override public void run(){
      holder[0]=Localizer.processArguments(""String_Node_Str"",res);
    }
  }
,""String_Node_Str"" + ""String_Node_Str"" + res[1]);
  assertEquals(holder[0],""String_Node_Str"" + res[1]);
}",0.9575392845202272
146604,"/** 
 * Converts a (possibly relative) reference into an absolute reference based on its parent
 * @param ref       potentially null reference
 * @param parentRef must be an absolute path
 */
public static XPathReference getAbsRef(XPathReference ref,TreeReference parentRef){
  TreeReference tref;
  if (!parentRef.isAbsolute()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (ref != null) {
    tref=ref.getReference();
  }
 else {
    tref=TreeReference.selfRef();
  }
  tref=tref.parent(parentRef);
  if (tref == null) {
    throw new XFormParseException(""String_Node_Str"" + tref + ""String_Node_Str""+ parentRef+ ""String_Node_Str"");
  }
  return new XPathReference(tref);
}","/** 
 * Converts a (possibly relative) reference into an absolute reference based on its parent
 * @param ref       potentially null reference
 * @param parentRef must be an absolute path
 */
public static XPathReference getAbsRef(XPathReference ref,TreeReference parentRef){
  TreeReference tref;
  if (!parentRef.isAbsolute()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (ref != null) {
    tref=ref.getReference();
  }
 else {
    tref=TreeReference.selfRef();
  }
  tref=tref.parent(parentRef);
  if (tref == null) {
    throw new XFormParseException(""String_Node_Str"" + ref.getReference().toString(true) + ""String_Node_Str""+ parentRef+ ""String_Node_Str"");
  }
  return new XPathReference(tref);
}",0.9737402413058908
146605,"@Test public void testEmptyMenu(){
  SessionWrapper session=mApp.getSession();
  MenuLoader menuLoader=new MenuLoader(session.getPlatform(),session,""String_Node_Str"",new TestLogger());
  this.mChoices=menuLoader.getMenus();
  Assert.assertEquals(""String_Node_Str"",this.mChoices,1);
}","@Test public void testEmptyMenu(){
  SessionWrapper session=mApp.getSession();
  MenuLoader menuLoader=new MenuLoader(session.getPlatform(),session,""String_Node_Str"",new TestLogger());
  this.mChoices=menuLoader.getMenus();
  Assert.assertEquals(""String_Node_Str"",this.mChoices.length,1);
}",0.987783595113438
146606,"protected Model getModelTemplate(){
  return storage.read(1);
}","protected Model getModelTemplate(){
  return storage.read(0);
}",0.984126984126984
146607,"@Test public void queryLookupsOfSubelementsInIndexedFixtures() throws XPathSyntaxException, UnfullfilledRequirementsException, XmlPullParserException, IOException, InvalidStructureException {
  ParseUtils.parseIntoSandbox(getClass().getResourceAsStream(""String_Node_Str""),sandbox);
  assertEquals(4,sandbox.getIndexedFixtureStorage(""String_Node_Str"").getNumRecords());
  EvaluationContext ec=MockDataUtils.buildContextWithInstance(sandbox,""String_Node_Str"",CaseTestUtils.FIXTURE_INSTANCE_PRODUCT);
  CaseTestUtils.xpathEvalAndAssert(ec,""String_Node_Str"",""String_Node_Str"");
  CaseTestUtils.xpathEvalAndAssert(ec,""String_Node_Str"",""String_Node_Str"");
  CaseTestUtils.xpathEvalAndAssert(ec,""String_Node_Str"",""String_Node_Str"");
  CaseTestUtils.xpathEvalAndAssert(ec,""String_Node_Str"",""String_Node_Str"");
  CaseTestUtils.xpathEvalAndAssert(ec,""String_Node_Str"",""String_Node_Str"");
}","@Test public void queryLookupsOfSubelementsInIndexedFixtures() throws XPathSyntaxException, UnfullfilledRequirementsException, XmlPullParserException, IOException, InvalidStructureException {
  ParseUtils.parseIntoSandbox(getClass().getResourceAsStream(""String_Node_Str""),sandbox);
  assertEquals(4,sandbox.getIndexedFixtureStorage(""String_Node_Str"").getNumRecords());
  EvaluationContext ec=MockDataUtils.buildContextWithInstance(sandbox,""String_Node_Str"",CaseTestUtils.FIXTURE_INSTANCE_PRODUCT);
  CaseTestUtils.xpathEvalAndAssert(ec,""String_Node_Str"",""String_Node_Str"");
  CaseTestUtils.xpathEvalAndAssert(ec,""String_Node_Str"",""String_Node_Str"");
  CaseTestUtils.xpathEvalAndAssert(ec,""String_Node_Str"",""String_Node_Str"");
}",0.9053549190535491
146608,"@Override protected Hashtable<XPathPathExpr,String> getStorageIndexMap(){
  if (storageIndexMap == null) {
    storageIndexMap=new Hashtable<>();
    StorageBackedModel template=getModelTemplate();
    for (    String attrName : template.getAttributes().keySet()) {
      storageIndexMap.put(XPathReference.getPathExpr(attrName),StorageBackedModel.getColumnName(attrName));
    }
    for (    String elementName : template.getElements().keySet()) {
      String escapedElem=StorageBackedModel.getUniqueColumnName(elementName,template.getEscapedAttributeKeys());
      storageIndexMap.put(XPathReference.getPathExpr(elementName),escapedElem);
    }
  }
  return storageIndexMap;
}","@Override protected Hashtable<XPathPathExpr,String> getStorageIndexMap(){
  if (storageIndexMap == null) {
    storageIndexMap=new Hashtable<>();
    StorageBackedModel template=getModelTemplate();
    for (    String attrName : template.getAttributes().keySet()) {
      storageIndexMap.put(XPathReference.getPathExpr(""String_Node_Str"" + attrName),StorageBackedModel.getColumnName(attrName));
    }
    for (    String elementName : template.getElements().keySet()) {
      String escapedElem=StorageBackedModel.getUniqueColumnName(elementName,template.getEscapedAttributeKeys());
      storageIndexMap.put(XPathReference.getPathExpr(elementName),escapedElem);
    }
  }
  return storageIndexMap;
}",0.9854862119013064
146609,"public static void restoreUserToSandbox(UserSandbox sandbox,String username,final String password){
  String urlStateParams=""String_Node_Str"";
  boolean failed=true;
  boolean incremental=false;
  if (sandbox.getLoggedInUser() != null) {
    String syncToken=sandbox.getSyncToken();
    String caseStateHash=CaseDBUtils.computeCaseDbHash(sandbox.getCaseStorage());
    urlStateParams=String.format(""String_Node_Str"",syncToken,caseStateHash);
    incremental=true;
    if (incremental) {
      System.out.println(String.format(""String_Node_Str"",syncToken,caseStateHash));
    }
  }
  String otaFreshRestoreUrl=PropertyManager.instance().getSingularProperty(""String_Node_Str"") + ""String_Node_Str"";
  String otaSyncUrl=otaFreshRestoreUrl + urlStateParams;
  String domain=PropertyManager.instance().getSingularProperty(""String_Node_Str"");
  final String qualifiedUsername=username + ""String_Node_Str"" + domain;
  Authenticator.setDefault(new Authenticator(){
    @Override protected PasswordAuthentication getPasswordAuthentication(){
      return new PasswordAuthentication(qualifiedUsername,password.toCharArray());
    }
  }
);
  try {
    System.out.println(""String_Node_Str"" + otaSyncUrl);
    URL url=new URL(otaSyncUrl);
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    if (conn.getResponseCode() == 412) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    }
 else     if (conn.getResponseCode() == HttpURLConnection.HTTP_UNAUTHORIZED) {
      System.out.println(""String_Node_Str"");
    }
 else     if (conn.getResponseCode() >= 200 && conn.getResponseCode() < 300) {
      System.out.println(""String_Node_Str"" + username + ""String_Node_Str""+ domain);
      ParseUtils.parseIntoSandbox(new BufferedInputStream(conn.getInputStream()),sandbox);
      System.out.println(""String_Node_Str"" + sandbox.getSyncToken());
      failed=false;
    }
 else {
      System.out.println(""String_Node_Str"" + conn.getResponseCode());
    }
  }
 catch (  InvalidStructureException|IOException e) {
    e.printStackTrace();
  }
catch (  XmlPullParserException|UnfullfilledRequirementsException e) {
    e.printStackTrace();
  }
  if (failed) {
    if (!incremental) {
      System.exit(-1);
    }
  }
 else {
    for (IStorageIterator<User> iterator=sandbox.getUserStorage().iterate(); iterator.hasMore(); ) {
      User u=iterator.nextRecord();
      if (username.equalsIgnoreCase(u.getUsername())) {
        sandbox.setLoggedInUser(u);
      }
    }
  }
}","public void restoreUserToSandbox(UserSandbox sandbox,String username,final String password){
  String urlStateParams=""String_Node_Str"";
  boolean failed=true;
  boolean incremental=false;
  if (sandbox.getLoggedInUser() != null) {
    String syncToken=sandbox.getSyncToken();
    String caseStateHash=CaseDBUtils.computeCaseDbHash(sandbox.getCaseStorage());
    urlStateParams=String.format(""String_Node_Str"",syncToken,caseStateHash);
    incremental=true;
    if (incremental) {
      System.out.println(String.format(""String_Node_Str"",syncToken,caseStateHash));
    }
  }
  String otaFreshRestoreUrl=PropertyManager.instance().getSingularProperty(""String_Node_Str"") + ""String_Node_Str"";
  String otaSyncUrl=otaFreshRestoreUrl + urlStateParams;
  String domain=PropertyManager.instance().getSingularProperty(""String_Node_Str"");
  final String qualifiedUsername=username + ""String_Node_Str"" + domain;
  Authenticator.setDefault(new Authenticator(){
    @Override protected PasswordAuthentication getPasswordAuthentication(){
      return new PasswordAuthentication(qualifiedUsername,password.toCharArray());
    }
  }
);
  try {
    System.out.println(""String_Node_Str"" + otaSyncUrl);
    URL url=new URL(otaSyncUrl);
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    if (conn.getResponseCode() == 412) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    }
 else     if (conn.getResponseCode() == HttpURLConnection.HTTP_UNAUTHORIZED) {
      System.out.println(""String_Node_Str"");
    }
 else     if (conn.getResponseCode() >= 200 && conn.getResponseCode() < 300) {
      System.out.println(""String_Node_Str"" + username + ""String_Node_Str""+ domain);
      ParseUtils.parseIntoSandbox(new BufferedInputStream(conn.getInputStream()),sandbox);
      System.out.println(""String_Node_Str"" + sandbox.getSyncToken());
      failed=false;
    }
 else {
      System.out.println(""String_Node_Str"" + conn.getResponseCode());
    }
  }
 catch (  InvalidStructureException|IOException e) {
    e.printStackTrace();
  }
catch (  XmlPullParserException|UnfullfilledRequirementsException e) {
    e.printStackTrace();
  }
  if (failed) {
    if (!incremental) {
      System.exit(-1);
    }
  }
 else {
    for (IStorageIterator<User> iterator=sandbox.getUserStorage().iterate(); iterator.hasMore(); ) {
      User u=iterator.nextRecord();
      if (username.equalsIgnoreCase(u.getUsername())) {
        sandbox.setLoggedInUser(u);
      }
    }
  }
  if (mSession != null) {
    mSession.clearVolitiles();
  }
}",0.9866666666666668
146610,"private DataBinding processStandardBindAttributes(Vector<String> usedAtts,Element e){
  usedAtts.addElement(ID_ATTR);
  usedAtts.addElement(NODESET_ATTR);
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  DataBinding binding=new DataBinding();
  binding.setId(e.getAttributeValue(""String_Node_Str"",ID_ATTR));
  String nodeset=e.getAttributeValue(null,NODESET_ATTR);
  if (nodeset == null) {
    throw new XFormParseException(""String_Node_Str"",e);
  }
  XPathReference ref;
  try {
    ref=new XPathReference(nodeset);
  }
 catch (  XPathException xpe) {
    throw new XFormParseException(xpe.getMessage());
  }
  ref=getAbsRef(ref,_f);
  binding.setReference(ref);
  binding.setDataType(getDataType(e.getAttributeValue(null,""String_Node_Str"")));
  String xpathRel=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRel != null) {
    if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=false;
    }
 else {
      try {
        Condition c=buildCondition(xpathRel,""String_Node_Str"",ref);
        c=(Condition)_f.addTriggerable(c);
        binding.relevancyCondition=c;
      }
 catch (      XPathUnsupportedException xue) {
        throw buildParseException(nodeset,xue.getMessage(),xpathRel,""String_Node_Str"");
      }
    }
  }
  String xpathReq=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathReq != null) {
    if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=false;
    }
 else {
      try {
        Condition c=buildCondition(xpathReq,""String_Node_Str"",ref);
        c=(Condition)_f.addTriggerable(c);
        binding.requiredCondition=c;
      }
 catch (      XPathUnsupportedException xue) {
        throw buildParseException(nodeset,xue.getMessage(),xpathReq,""String_Node_Str"");
      }
    }
  }
  String xpathRO=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRO != null) {
    if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=false;
    }
 else {
      try {
        Condition c=buildCondition(xpathRO,""String_Node_Str"",ref);
        c=(Condition)_f.addTriggerable(c);
        binding.readonlyCondition=c;
      }
 catch (      XPathUnsupportedException xue) {
        throw buildParseException(nodeset,xue.getMessage(),xpathRO,""String_Node_Str"");
      }
    }
  }
  String xpathConstr=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathConstr != null) {
    try {
      binding.constraint=new XPathConditional(xpathConstr);
    }
 catch (    XPathSyntaxException xse) {
      throw buildParseException(nodeset,xse.getMessage(),xpathConstr,""String_Node_Str"");
    }
    binding.constraintMessage=e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str"");
  }
  String xpathCalc=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathCalc != null) {
    Recalculate r;
    try {
      r=buildCalculate(xpathCalc,ref);
    }
 catch (    XPathSyntaxException xpse) {
      throw buildParseException(nodeset,xpse.getMessage(),xpathCalc,""String_Node_Str"");
    }
    r=(Recalculate)_f.addTriggerable(r);
    binding.calculate=r;
  }
  binding.setPreload(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  binding.setPreloadParams(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  return binding;
}","private DataBinding processStandardBindAttributes(Vector<String> usedAtts,Element e){
  usedAtts.addElement(ID_ATTR);
  usedAtts.addElement(NODESET_ATTR);
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  DataBinding binding=new DataBinding();
  binding.setId(e.getAttributeValue(""String_Node_Str"",ID_ATTR));
  String nodeset=e.getAttributeValue(null,NODESET_ATTR);
  if (nodeset == null) {
    throw new XFormParseException(""String_Node_Str"",e);
  }
  XPathReference ref;
  try {
    ref=new XPathReference(nodeset);
  }
 catch (  XPathException xpe) {
    throw new XFormParseException(xpe.getMessage());
  }
  ref=getAbsRef(ref,_f);
  binding.setReference(ref);
  binding.setDataType(getDataType(e.getAttributeValue(null,""String_Node_Str"")));
  String xpathRel=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRel != null) {
    if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=false;
    }
 else {
      try {
        Condition c=buildCondition(xpathRel,""String_Node_Str"",ref);
        c=(Condition)_f.addTriggerable(c);
        binding.relevancyCondition=c;
      }
 catch (      XPathUnsupportedException xue) {
        throw buildParseException(nodeset,xue.getMessage(),xpathRel,""String_Node_Str"");
      }
    }
  }
  String xpathReq=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathReq != null) {
    if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=false;
    }
 else {
      try {
        Condition c=buildCondition(xpathReq,""String_Node_Str"",ref);
        c=(Condition)_f.addTriggerable(c);
        binding.requiredCondition=c;
      }
 catch (      XPathUnsupportedException xue) {
        throw buildParseException(nodeset,xue.getMessage(),xpathReq,""String_Node_Str"");
      }
    }
  }
  String xpathRO=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRO != null) {
    if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=false;
    }
 else {
      try {
        Condition c=buildCondition(xpathRO,""String_Node_Str"",ref);
        c=(Condition)_f.addTriggerable(c);
        binding.readonlyCondition=c;
      }
 catch (      XPathUnsupportedException xue) {
        throw buildParseException(nodeset,xue.getMessage(),xpathRO,""String_Node_Str"");
      }
    }
  }
  String xpathConstr=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathConstr != null) {
    try {
      binding.constraint=new XPathConditional(xpathConstr);
    }
 catch (    XPathSyntaxException xse) {
      throw buildParseException(nodeset,xse.getMessage(),xpathConstr,""String_Node_Str"");
    }
    binding.constraintMessage=e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str"");
  }
  String xpathCalc=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathCalc != null) {
    Recalculate r;
    try {
      r=buildCalculate(xpathCalc,ref);
    }
 catch (    XPathSyntaxException xpse) {
      throw buildParseException(nodeset,xpse.getMessage(),xpathCalc,""String_Node_Str"");
    }
    try {
      r=(Recalculate)_f.addTriggerable(r);
    }
 catch (    XPathException xpe) {
      throw buildParseException(nodeset,xpe.getMessage(),xpathCalc,""String_Node_Str"");
    }
    binding.calculate=r;
  }
  binding.setPreload(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  binding.setPreloadParams(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  return binding;
}",0.9814506844057824
146611,"protected TreeElement loadFixtureRoot(String reference,String userId){
  String refId=reference.substring(reference.lastIndexOf('/') + 1,reference.length());
  try {
    String key=refId + userId;
    TreeElement root=fixtureBases.retrieve(key);
    if (root == null) {
      FormInstance fixture=SandboxUtils.loadFixture(mSandbox,refId,userId);
      if (fixture == null) {
        throw new FixtureInitializationException(reference);
      }
      root=fixture.getRoot();
      fixtureBases.register(key,root);
    }
    return root;
  }
 catch (  IllegalStateException ise) {
    throw new FixtureInitializationException(reference);
  }
}","protected TreeElement loadFixtureRoot(ExternalDataInstance instance,String reference,String userId){
  String refId=reference.substring(reference.lastIndexOf('/') + 1,reference.length());
  String instanceBase=instance.getBase().getInstanceName();
  try {
    String key=refId + userId + instanceBase;
    TreeElement root=fixtureBases.retrieve(key);
    if (root == null) {
      FormInstance fixture=SandboxUtils.loadFixture(mSandbox,refId,userId);
      if (fixture == null) {
        throw new FixtureInitializationException(reference);
      }
      root=fixture.getRoot();
      fixtureBases.register(key,root);
    }
    return root;
  }
 catch (  IllegalStateException ise) {
    throw new FixtureInitializationException(reference);
  }
}",0.9242970439798124
146612,"protected AbstractTreeElement setupFixtureData(ExternalDataInstance instance){
  String ref=instance.getReference();
  String userId=""String_Node_Str"";
  User u=mSandbox.getLoggedInUser();
  if (u != null) {
    userId=u.getUniqueId();
  }
  TreeElement fixtureRoot=loadFixtureRoot(ref,userId);
  fixtureRoot.setParent(instance.getBase());
  return fixtureRoot;
}","protected AbstractTreeElement setupFixtureData(ExternalDataInstance instance){
  String ref=instance.getReference();
  String userId=""String_Node_Str"";
  User u=mSandbox.getLoggedInUser();
  if (u != null) {
    userId=u.getUniqueId();
  }
  TreeElement fixtureRoot=loadFixtureRoot(instance,ref,userId);
  fixtureRoot.setParent(instance.getBase());
  return fixtureRoot;
}",0.979591836734694
146613,"@Override public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  super.readExternal(in,pf);
  hiddenQueryValues=(Hashtable<String,XPathExpression>)ExtUtil.read(in,new ExtWrapMapPoly(String.class),pf);
  userQueryPrompts=(OrderedHashtable<String,DisplayUnit>)ExtUtil.read(in,new ExtWrapMap(String.class,DisplayUnit.class),pf);
}","@Override public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  super.readExternal(in,pf);
  hiddenQueryValues=(Hashtable<String,XPathExpression>)ExtUtil.read(in,new ExtWrapMapPoly(String.class),pf);
  userQueryPrompts=(OrderedHashtable<String,DisplayUnit>)ExtUtil.read(in,new ExtWrapMap(String.class,DisplayUnit.class,ExtWrapMap.TYPE_ORDERED),pf);
}",0.9698492462311558
146614,"/** 
 * Deletes the inner-most repeat that this node belongs to and returns the corresponding FormIndex. Behavior is currently undefined if you call this method on a node that is not contained within a repeat.
 */
public FormIndex deleteRepeat(FormIndex index){
  Vector indexes=new Vector();
  Vector multiplicities=new Vector();
  Vector elements=new Vector();
  collapseIndex(index,indexes,multiplicities,elements);
  for (int i=elements.size() - 1; i >= 0; i--) {
    IFormElement e=(IFormElement)elements.elementAt(i);
    if (e instanceof GroupDef && ((GroupDef)e).getRepeat()) {
      break;
    }
 else {
      indexes.removeElementAt(i);
      multiplicities.removeElementAt(i);
      elements.removeElementAt(i);
    }
  }
  FormIndex newIndex=buildIndex(indexes,multiplicities,elements);
  TreeReference deleteRef=getChildInstanceRef(newIndex);
  TreeElement deleteElement=mainInstance.resolveReference(deleteRef);
  TreeReference parentRef=deleteRef.getParentRef();
  TreeElement parentElement=mainInstance.resolveReference(parentRef);
  int childMult=deleteElement.getMult();
  parentElement.removeChild(deleteElement);
  for (int i=0; i < parentElement.getNumChildren(); i++) {
    TreeElement child=parentElement.getChildAt(i);
    if (child.getMult() > childMult) {
      child.setMult(child.getMult() - 1);
    }
  }
  this.getMainInstance().cleanCache();
  triggerTriggerables(deleteRef);
  return newIndex;
}","/** 
 * Deletes the inner-most repeat that this node belongs to and returns the corresponding FormIndex. Behavior is currently undefined if you call this method on a node that is not contained within a repeat.
 */
public FormIndex deleteRepeat(FormIndex index){
  Vector indexes=new Vector();
  Vector multiplicities=new Vector();
  Vector elements=new Vector();
  collapseIndex(index,indexes,multiplicities,elements);
  for (int i=elements.size() - 1; i >= 0; i--) {
    IFormElement e=(IFormElement)elements.elementAt(i);
    if (e instanceof GroupDef && ((GroupDef)e).getRepeat()) {
      break;
    }
 else {
      indexes.removeElementAt(i);
      multiplicities.removeElementAt(i);
      elements.removeElementAt(i);
    }
  }
  FormIndex newIndex=buildIndex(indexes,multiplicities,elements);
  TreeReference deleteRef=getChildInstanceRef(newIndex);
  TreeElement deleteElement=mainInstance.resolveReference(deleteRef);
  TreeReference parentRef=deleteRef.getParentRef();
  TreeElement parentElement=mainInstance.resolveReference(parentRef);
  int childMult=deleteElement.getMult();
  parentElement.removeChild(deleteElement);
  for (int i=0; i < parentElement.getNumChildren(); i++) {
    TreeElement child=parentElement.getChildAt(i);
    if (child.doFieldsMatch(deleteElement) && child.getMult() > childMult) {
      child.setMult(child.getMult() - 1);
    }
  }
  this.getMainInstance().cleanCache();
  triggerTriggerables(deleteRef);
  return newIndex;
}",0.9868603042876902
146615,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o instanceof TreeElement) {
    TreeElement otherTreeElement=(TreeElement)o;
    final boolean doFieldsMatch=(name.equals(otherTreeElement.name) && multiplicity == otherTreeElement.multiplicity && flags == otherTreeElement.flags && dataType == otherTreeElement.dataType && ((instanceName != null && instanceName.equals(otherTreeElement.instanceName)) || (instanceName == null && otherTreeElement.instanceName == null)) && ((constraint != null && constraint.equals(otherTreeElement.constraint)) || (constraint == null && otherTreeElement.constraint == null)) && ((preloadHandler != null && preloadHandler.equals(otherTreeElement.preloadHandler)) || (preloadHandler == null && otherTreeElement.preloadHandler == null)) && ((preloadParams != null && preloadParams.equals(otherTreeElement.preloadParams)) || (preloadParams == null && otherTreeElement.preloadParams == null)) && ((namespace != null && namespace.equals(otherTreeElement.namespace)) || (namespace == null && otherTreeElement.namespace == null)) && ((value != null && value.uncast().getString().equals(otherTreeElement.value.uncast().getString())) || value == null && otherTreeElement.value == null));
    if (doFieldsMatch) {
      if (children != null) {
        if (otherTreeElement.children == null) {
          return false;
        }
        for (        TreeElement child : children) {
          if (!otherTreeElement.children.contains(child)) {
            return false;
          }
        }
      }
 else {
        if (otherTreeElement.children != null) {
          return false;
        }
      }
      if (attributes != null) {
        if (otherTreeElement.attributes == null) {
          return false;
        }
        for (        TreeElement attr : attributes) {
          if (!otherTreeElement.attributes.contains(attr)) {
            return false;
          }
        }
      }
 else {
        if (otherTreeElement.attributes != null) {
          return false;
        }
      }
      return true;
    }
  }
  return false;
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o instanceof TreeElement) {
    TreeElement otherTreeElement=(TreeElement)o;
    final boolean doFieldsMatch=doFieldsMatch(otherTreeElement) && multiplicity == otherTreeElement.multiplicity;
    if (doFieldsMatch) {
      if (children != null) {
        if (otherTreeElement.children == null) {
          return false;
        }
        for (        TreeElement child : children) {
          if (!otherTreeElement.children.contains(child)) {
            return false;
          }
        }
      }
 else {
        if (otherTreeElement.children != null) {
          return false;
        }
      }
      if (attributes != null) {
        if (otherTreeElement.attributes == null) {
          return false;
        }
        for (        TreeElement attr : attributes) {
          if (!otherTreeElement.attributes.contains(attr)) {
            return false;
          }
        }
      }
 else {
        if (otherTreeElement.attributes != null) {
          return false;
        }
      }
      return true;
    }
  }
  return false;
}",0.2154420921544209
146616,"@Override public TreeReference getRef(){
  if (ref == null) {
    ref=TreeReference.buildRefFromTreeElement(this);
  }
  return ref;
}","@Override public TreeReference getRef(){
  if (ref == null) {
    ref=TreeReference.buildRefFromTreeElement((AbstractTreeElement)this);
  }
  return ref;
}",0.9273356401384084
146617,"@Override public TreeReference getRef(){
  if (cachedRef == null) {
    cachedRef=TreeReference.buildRefFromTreeElement(this);
  }
  return cachedRef;
}","@Override public TreeReference getRef(){
  if (cachedRef == null) {
    cachedRef=TreeReference.buildRefFromTreeElement((AbstractTreeElement)this);
  }
  return cachedRef;
}",0.9353846153846154
146618,"public TreeReference getRef(){
  if (ref == null) {
    ref=TreeReference.buildRefFromTreeElement(this);
  }
  return ref;
}","public TreeReference getRef(){
  if (ref == null) {
    ref=TreeReference.buildRefFromTreeElement((AbstractTreeElement)this);
  }
  return ref;
}",0.9219330855018588
146619,"@Override public TreeReference getRef(){
  if (cachedRef == null) {
    cachedRef=TreeReference.buildRefFromTreeElement(this);
  }
  return cachedRef;
}","@Override public TreeReference getRef(){
  if (cachedRef == null) {
    cachedRef=TreeReference.buildRefFromTreeElement((AbstractTreeElement)this);
  }
  return cachedRef;
}",0.9353846153846154
146620,"@Override public TreeReference getRef(){
  if (ref == null) {
    ref=TreeReference.buildRefFromTreeElement((AbstractTreeElement)this);
  }
  return ref;
}","@Override public TreeReference getRef(){
  if (ref == null) {
    ref=TreeReference.buildRefFromTreeElement(this);
  }
  return ref;
}",0.9273356401384084
146621,"@Override public TreeReference getRef(){
  if (cachedRef == null) {
    cachedRef=TreeReference.buildRefFromTreeElement((AbstractTreeElement)this);
  }
  return cachedRef;
}","@Override public TreeReference getRef(){
  if (cachedRef == null) {
    cachedRef=TreeReference.buildRefFromTreeElement(this);
  }
  return cachedRef;
}",0.9353846153846154
146622,"public TreeReference getRef(){
  if (ref == null) {
    ref=TreeReference.buildRefFromTreeElement((AbstractTreeElement)this);
  }
  return ref;
}","public TreeReference getRef(){
  if (ref == null) {
    ref=TreeReference.buildRefFromTreeElement(this);
  }
  return ref;
}",0.9219330855018588
146623,"@Override public TreeReference getRef(){
  if (cachedRef == null) {
    cachedRef=TreeReference.buildRefFromTreeElement((AbstractTreeElement)this);
  }
  return cachedRef;
}","@Override public TreeReference getRef(){
  if (cachedRef == null) {
    cachedRef=TreeReference.buildRefFromTreeElement(this);
  }
  return cachedRef;
}",0.9353846153846154
146624,"@Override public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.write(out,new ExtWrapMap(params));
  ExtUtil.writeString(out,url);
}","@Override public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.write(out,new ExtWrapMapPoly(params));
  ExtUtil.writeString(out,url);
}",0.9874213836477987
146625,"@Override public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  params=(Hashtable<String,XPathExpression>)ExtUtil.read(in,new ExtWrapMap(String.class,XPathExpression.class));
  url=ExtUtil.readString(in);
}","@Override public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  params=(Hashtable<String,XPathExpression>)ExtUtil.read(in,new ExtWrapMapPoly(String.class),pf);
  url=ExtUtil.readString(in);
}",0.9400386847195358
146626,"@Override public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  super.readExternal(in,pf);
  hiddenQueryValues=(Hashtable)ExtUtil.read(in,new ExtWrapMapPoly(String.class));
  userQueryPrompts=(Hashtable<String,DisplayUnit>)ExtUtil.read(in,new ExtWrapMap(String.class,DisplayUnit.class));
}","@Override public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  super.readExternal(in,pf);
  hiddenQueryValues=(Hashtable<String,XPathExpression>)ExtUtil.read(in,new ExtWrapMapPoly(String.class),pf);
  userQueryPrompts=(Hashtable<String,DisplayUnit>)ExtUtil.read(in,new ExtWrapMap(String.class,DisplayUnit.class),pf);
}",0.9587912087912088
146627,"@Override public boolean equals(Object o){
  if (o instanceof XPathBinaryOpExpr) {
    XPathBinaryOpExpr x=(XPathBinaryOpExpr)o;
    return op == x.op && a.equals(x.a) && b.equals(x.b);
  }
 else {
    return false;
  }
}",@Override public abstract boolean equals(Object o);,0.3088235294117647
146628,"@Override public boolean equals(Object o){
  if (o instanceof XPathBinaryOpExpr) {
    XPathBinaryOpExpr x=(XPathBinaryOpExpr)o;
    return op == x.op && a.equals(x.a) && b.equals(x.b);
  }
 else {
    return false;
  }
}",@Override public abstract boolean equals(Object o);,0.3088235294117647
146629,"@Override public FormInstance parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  this.checkNode(""String_Node_Str"");
  String fixtureId=parser.getAttributeValue(null,""String_Node_Str"");
  if (fixtureId == null) {
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
  String userId=parser.getAttributeValue(null,""String_Node_Str"");
  parser.nextTag();
  TreeElement root=new TreeElementParser(parser,0,fixtureId).parse();
  FormInstance instance=new FormInstance(root,fixtureId);
  if (userId != null) {
    instance.schema=userId;
  }
  if (storage() != null) {
    int recordId=-1;
    Vector<Integer> matchingFixtures=storage().getIDsForValue(FormInstance.META_ID,fixtureId);
    if (matchingFixtures.size() > 0) {
      Vector<Integer> matchingUsers=storage().getIDsForValue(FormInstance.META_XMLNS,ExtUtil.emptyIfNull(userId));
      for (      Integer i : matchingFixtures) {
        if (matchingUsers.indexOf(i) != -1) {
          recordId=i.intValue();
        }
      }
    }
    if (recordId != -1) {
      if (!overwrite) {
        return instance;
      }
      instance.setID(recordId);
    }
  }
  commit(instance);
  return instance;
}","@Override public FormInstance parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  this.checkNode(""String_Node_Str"");
  String fixtureId=parser.getAttributeValue(null,""String_Node_Str"");
  if (fixtureId == null) {
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
  String userId=parser.getAttributeValue(null,""String_Node_Str"");
  TreeElement root;
  if (!nextTagInBlock(""String_Node_Str"")) {
    return null;
  }
  root=new TreeElementParser(parser,0,fixtureId).parse();
  FormInstance instance=new FormInstance(root,fixtureId);
  if (userId != null) {
    instance.schema=userId;
  }
  if (storage() != null) {
    int recordId=-1;
    Vector<Integer> matchingFixtures=storage().getIDsForValue(FormInstance.META_ID,fixtureId);
    if (matchingFixtures.size() > 0) {
      Vector<Integer> matchingUsers=storage().getIDsForValue(FormInstance.META_XMLNS,ExtUtil.emptyIfNull(userId));
      for (      Integer i : matchingFixtures) {
        if (matchingUsers.indexOf(i) != -1) {
          recordId=i.intValue();
        }
      }
    }
    if (recordId != -1) {
      if (!overwrite) {
        return instance;
      }
      instance.setID(recordId);
    }
  }
  commit(instance);
  return instance;
}",0.9559348947995236
146630,"/** 
 * Template constructor (For elements that need to create reference nodesets but never look up values)
 */
private CaseChildElement(CaseInstanceTreeElement parent){
  this.parent=parent;
  this.recordId=TreeReference.INDEX_TEMPLATE;
  this.mult=TreeReference.INDEX_TEMPLATE;
  this.caseId=null;
  empty=new TreeElement();
  empty=new TreeElement(""String_Node_Str"");
  empty.setMult(this.mult);
  empty.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
  empty.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
  empty.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
  TreeElement scratch=new TreeElement(""String_Node_Str"");
  scratch.setAnswer(null);
  empty.addChild(scratch);
  scratch=new TreeElement(""String_Node_Str"");
  scratch.setAnswer(null);
  empty.addChild(scratch);
  scratch=new TreeElement(""String_Node_Str"");
  scratch.setAnswer(null);
  empty.addChild(scratch);
}","/** 
 * Template constructor (For elements that need to create reference nodesets but never look up values)
 */
private CaseChildElement(CaseInstanceTreeElement parent){
  this.parent=parent;
  this.recordId=TreeReference.INDEX_TEMPLATE;
  this.mult=TreeReference.INDEX_TEMPLATE;
  this.caseId=null;
  empty=new TreeElement(""String_Node_Str"");
  empty.setMult(this.mult);
  empty.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
  empty.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
  empty.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
  TreeElement scratch=new TreeElement(""String_Node_Str"");
  scratch.setAnswer(null);
  empty.addChild(scratch);
  scratch=new TreeElement(""String_Node_Str"");
  scratch.setAnswer(null);
  empty.addChild(scratch);
  scratch=new TreeElement(""String_Node_Str"");
  scratch.setAnswer(null);
  empty.addChild(scratch);
}",0.4772599663110612
146631,"private Vector<TreeElement> getChildrenWithName(String name,boolean includeTemplate){
  Vector<TreeElement> v=new Vector<TreeElement>();
  if (children == null) {
    return v;
  }
  for (int i=0; i < this.children.size(); i++) {
    TreeElement child=(TreeElement)this.children.elementAt(i);
    if ((child.getName().equals(name) || name.equals(TreeReference.NAME_WILDCARD)) && (includeTemplate || child.multiplicity != TreeReference.INDEX_TEMPLATE))     v.addElement(child);
  }
  return v;
}","private Vector<TreeElement> getChildrenWithName(String name,boolean includeTemplate){
  Vector<TreeElement> v=new Vector<TreeElement>();
  if (children == null) {
    return v;
  }
  for (int i=0; i < children.size(); i++) {
    TreeElement child=children.elementAt(i);
    if ((child.getName().equals(name) || name.equals(TreeReference.NAME_WILDCARD)) && (includeTemplate || child.multiplicity != TreeReference.INDEX_TEMPLATE))     v.addElement(child);
  }
  return v;
}",0.9761658031088084
146632,"@Override public TreeElement getChild(String name,int multiplicity){
  if (this.children == null) {
    return null;
  }
  if (name.equals(TreeReference.NAME_WILDCARD)) {
    if (multiplicity == TreeReference.INDEX_TEMPLATE || this.children.size() < multiplicity + 1) {
      return null;
    }
    return (TreeElement)this.children.elementAt(multiplicity);
  }
 else {
    for (    TreeElement child : children) {
      if (((name.hashCode() == child.getName().hashCode()) || name.equals(child.getName())) && child.getMult() == multiplicity) {
        return child;
      }
    }
  }
  return null;
}","@Override public TreeElement getChild(String name,int multiplicity){
  if (children == null) {
    return null;
  }
  if (TreeReference.NAME_WILDCARD.equals(name)) {
    if (multiplicity == TreeReference.INDEX_TEMPLATE || children.size() < multiplicity + 1) {
      return null;
    }
    return children.elementAt(multiplicity);
  }
 else {
    for (    TreeElement child : children) {
      if ((name.hashCode() == child.getName().hashCode() || name.equals(child.getName())) && child.getMult() == multiplicity) {
        return child;
      }
    }
  }
  return null;
}",0.7303754266211604
146633,"public void setEnabled(boolean enabled,boolean inherited){
  boolean oldEnabled=isEnabled();
  if (inherited) {
    setMaskVar(MASK_ENABLED_INH,enabled);
  }
 else {
    setMaskVar(MASK_ENABLED,enabled);
  }
  if (isEnabled() != oldEnabled) {
    if (children != null) {
      for (int i=0; i < children.size(); i++) {
        ((TreeElement)children.elementAt(i)).setEnabled(isEnabled(),true);
      }
    }
    alertStateObservers(FormElementStateListener.CHANGE_ENABLED);
  }
}","public void setEnabled(boolean enabled,boolean inherited){
  boolean oldEnabled=isEnabled();
  if (inherited) {
    setMaskVar(MASK_ENABLED_INH,enabled);
  }
 else {
    setMaskVar(MASK_ENABLED,enabled);
  }
  if (isEnabled() != oldEnabled) {
    if (children != null) {
      for (int i=0; i < children.size(); i++) {
        children.elementAt(i).setEnabled(isEnabled(),true);
      }
    }
    alertStateObservers(FormElementStateListener.CHANGE_ENABLED);
  }
}",0.9840933191940616
146634,"public TreeElement deepCopy(boolean includeTemplates){
  TreeElement newNode=shallowCopy();
  if (children != null) {
    newNode.children=new Vector<TreeElement>();
    for (int i=0; i < children.size(); i++) {
      TreeElement child=(TreeElement)children.elementAt(i);
      if (includeTemplates || child.getMult() != TreeReference.INDEX_TEMPLATE) {
        newNode.addChild(child.deepCopy(includeTemplates));
      }
    }
  }
  if (attributes != null) {
    newNode.attributes=new Vector<TreeElement>();
    for (    TreeElement attr : attributes) {
      if (includeTemplates || attr.getMult() != TreeReference.INDEX_TEMPLATE) {
        newNode.addAttribute(attr.deepCopy(includeTemplates));
      }
    }
  }
  return newNode;
}","public TreeElement deepCopy(boolean includeTemplates){
  TreeElement newNode=shallowCopy();
  if (children != null) {
    newNode.children=new Vector<TreeElement>();
    for (int i=0; i < children.size(); i++) {
      TreeElement child=children.elementAt(i);
      if (includeTemplates || child.getMult() != TreeReference.INDEX_TEMPLATE) {
        newNode.addChild(child.deepCopy(includeTemplates));
      }
    }
  }
  if (attributes != null) {
    newNode.attributes=new Vector<TreeElement>();
    for (    TreeElement attr : attributes) {
      if (includeTemplates || attr.getMult() != TreeReference.INDEX_TEMPLATE) {
        newNode.addAttribute(attr.deepCopy(includeTemplates));
      }
    }
  }
  return newNode;
}",0.9910775566231984
146635,"/** 
 * Rebuilding this node from an imported instance
 */
public void populate(TreeElement incoming){
  if (this.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      this.setValue(null);
    }
 else {
      this.setValue(AnswerDataFactory.templateByDataType(this.dataType).cast(value.uncast()));
    }
  }
 else {
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      if (child.getMaskVar(MASK_REPEATABLE) && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        this.removeChildAt(i);
        i--;
      }
    }
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      if (child.getMaskVar(MASK_REPEATABLE)) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          if (children == null) {
            children=new Vector();
          }
          this.children.insertElementAt(newChild,i + k + 1);
          newChild.populate((TreeElement)newChildren.elementAt(k));
        }
        i+=newChildren.size();
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          child.populate((TreeElement)newChildren.elementAt(0));
        }
      }
    }
  }
  for (int i=0; i < incoming.getAttributeCount(); i++) {
    String name=incoming.getAttributeName(i);
    String ns=incoming.getAttributeNamespace(i);
    String value=incoming.getAttributeValue(i);
    this.setAttribute(ns,name,value);
  }
}","/** 
 * Rebuilding this node from an imported instance
 */
public void populate(TreeElement incoming){
  if (this.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      this.setValue(null);
    }
 else {
      this.setValue(AnswerDataFactory.templateByDataType(this.dataType).cast(value.uncast()));
    }
  }
 else {
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      if (child.getMaskVar(MASK_REPEATABLE) && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        this.removeChildAt(i);
        i--;
      }
    }
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      if (child.getMaskVar(MASK_REPEATABLE)) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          if (children == null) {
            children=new Vector<TreeElement>();
          }
          this.children.insertElementAt(newChild,i + k + 1);
          newChild.populate((TreeElement)newChildren.elementAt(k));
        }
        i+=newChildren.size();
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          child.populate((TreeElement)newChildren.elementAt(0));
        }
      }
    }
  }
  for (int i=0; i < incoming.getAttributeCount(); i++) {
    String name=incoming.getAttributeName(i);
    String ns=incoming.getAttributeNamespace(i);
    String value=incoming.getAttributeValue(i);
    this.setAttribute(ns,name,value);
  }
}",0.9960713206406768
146636,"@Override public int getNumChildren(){
  return children == null ? 0 : this.children.size();
}","@Override public int getNumChildren(){
  return children == null ? 0 : children.size();
}",0.9726775956284152
146637,"private int smallestIntersectingLevelWithPred(TreeReference refInExpr){
  TreeReference intersectionRef=contextRef.intersect(refInExpr);
  for (int refLevel=0; refLevel <= intersectionRef.size(); refLevel++) {
    Vector<XPathExpression> predicates=refInExpr.getPredicate(refLevel);
    if (predicates != null && predicates.size() > 0) {
      return refLevel - 1;
    }
  }
  return -1;
}","private int smallestIntersectingLevelWithPred(TreeReference refInExpr){
  TreeReference intersectionRef=contextRef.intersect(refInExpr.removePredicates());
  for (int refLevel=0; refLevel < Math.min(refInExpr.size(),intersectionRef.size()); refLevel++) {
    Vector<XPathExpression> predicates=refInExpr.getPredicate(refLevel);
    if (predicates != null && predicates.size() > 0) {
      return refLevel;
    }
  }
  return -1;
}",0.9352869352869352
146638,"private static CliCommand getCliCommand(String[] args) throws CliCommandNotFound {
  final String commandName=args[0];
  final String[] restArgs=java.util.Arrays.copyOfRange(args,1,args.length);
switch (commandName) {
case ""String_Node_Str"":
    return new CliValidateCommand(commandName,restArgs);
case ""String_Node_Str"":
  return new CliPlayCommand(commandName,restArgs);
default :
throw new CliCommandNotFound(commandName);
}
}","private static CliCommand getCliCommand(String commandName) throws CliCommandNotFound {
switch (commandName) {
case ""String_Node_Str"":
    return new CliValidateCommand();
case ""String_Node_Str"":
  return new CliPlayCommand();
default :
throw new CliCommandNotFound(commandName);
}
}",0.2300140252454418
146639,"public static void main(String[] args){
  CommandLineParser parser=new DefaultParser();
  Options options=getOptions();
  CommandLine cmd;
  CliCommand cliCommand;
  try {
    cliCommand=getCliCommand(args);
  }
 catch (  CliCommandNotFound e) {
    try {
      cmd=parser.parse(options,args);
    }
 catch (    ParseException parseException) {
      System.out.println(""String_Node_Str"" + parseException.getMessage());
      System.exit(-1);
      return;
    }
    if (cmd.hasOption(""String_Node_Str"")) {
      printHelpText(options);
      System.exit(0);
      return;
    }
 else {
      System.out.println(""String_Node_Str"" + e.getCommandName());
      printHelpText(options);
      System.exit(-1);
      return;
    }
  }
  try {
    cliCommand.parseArguments();
  }
 catch (  ParseException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    System.exit(-1);
    return;
  }
  cliCommand.handle();
}","public static void main(String[] args){
  CommandLineParser parser=new DefaultParser();
  Options options=getOptions();
  CommandLine cmd;
  CliCommand cliCommand;
  try {
    cliCommand=getCliCommand(args[0]);
  }
 catch (  CliCommandNotFound e) {
    try {
      cmd=parser.parse(options,args);
    }
 catch (    ParseException parseException) {
      System.out.println(""String_Node_Str"" + parseException.getMessage());
      printHelpText();
      System.exit(-1);
      return;
    }
    if (cmd.hasOption(""String_Node_Str"")) {
      printHelpText();
      System.exit(0);
      return;
    }
 else {
      System.out.println(""String_Node_Str"" + e.getCommandName());
      printHelpText();
      System.exit(-1);
      return;
    }
  }
catch (  ArrayIndexOutOfBoundsException e) {
    printHelpText();
    System.exit(-1);
    return;
  }
  try {
    final String[] restArgs=java.util.Arrays.copyOfRange(args,1,args.length);
    cliCommand.parseArguments(restArgs);
  }
 catch (  ParseException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    cliCommand.printHelpText();
    System.exit(-1);
    return;
  }
catch (  ArrayIndexOutOfBoundsException e) {
    cliCommand.printHelpText();
    System.exit(-1);
    return;
  }
  cliCommand.handle();
}",0.7839927239654388
146640,"private static void printHelpText(Options options){
  HelpFormatter formatter=new HelpFormatter();
  formatter.printHelp(""String_Node_Str"",options);
}","private static void printHelpText(){
  Options options=getOptions();
  HelpFormatter formatter=new HelpFormatter();
  String header=""String_Node_Str"" + ""String_Node_Str"";
  CliCommand[] commands={new CliValidateCommand(),new CliPlayCommand()};
  for (  CliCommand command : commands) {
    header+=String.format(""String_Node_Str"",command.getCommandName(),command.getHelpTextDescription());
  }
  header+=""String_Node_Str"";
  formatter.printHelp(""String_Node_Str"",header,options,""String_Node_Str"");
}",0.2218798151001541
146641,protected abstract String getHelpTextDescription();,"public String getHelpTextDescription(){
  return helpTextDescription;
}",0.5737704918032787
146642,"public CliCommand(String commandName,String[] args){
  this.commandName=commandName;
  this.args=args;
  options=getOptions();
}","public CliCommand(String commandName,String helpTextDescription,String positionalArgsHelpText){
  options=getOptions();
  this.commandName=commandName;
  this.helpTextDescription=helpTextDescription;
  this.positionalArgsHelpText=positionalArgsHelpText;
}",0.370757180156658
146643,"public void parseArguments() throws ParseException {
  CommandLineParser parser=new DefaultParser();
  cmd=parser.parse(options,args);
}","public void parseArguments(String[] args) throws ParseException {
  CommandLineParser parser=new DefaultParser();
  cmd=parser.parse(options,args);
  this.args=cmd.getArgs();
}",0.8717948717948718
146644,"protected void printHelpText(){
  String usage=""String_Node_Str"" + commandName + ""String_Node_Str""+ getPositionalArgsHelpText();
  String header=getHelpTextDescription() + ""String_Node_Str"";
  HelpFormatter formatter=new HelpFormatter();
  formatter.setWidth(200);
  formatter.printHelp(usage,header,options,""String_Node_Str"",true);
}","protected void printHelpText(){
  String usage=""String_Node_Str"" + commandName + ""String_Node_Str""+ positionalArgsHelpText;
  String header=helpTextDescription + ""String_Node_Str"";
  HelpFormatter formatter=new HelpFormatter();
  formatter.setWidth(200);
  formatter.printHelp(usage,header,options,""String_Node_Str"",true);
}",0.9787234042553192
146645,"public CliPlayCommand(String commandName,String[] args){
  super(commandName,args);
}","public CliPlayCommand(){
  super(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.4914285714285714
146646,"@Override public void handle(){
  super.handle();
  PrototypeFactory prototypeFactory=new LivePrototypeFactory();
  if (args.length < 2) {
    printHelpText();
    System.exit(-1);
  }
  try {
    CommCareConfigEngine engine=configureApp(args[1],prototypeFactory);
    ApplicationHost host=new ApplicationHost(engine,prototypeFactory);
    if (cmd.hasOption(""String_Node_Str"")) {
      host.setRestoreToLocalFile(cmd.getOptionValue(""String_Node_Str""));
    }
 else {
      if (args.length < 4) {
        printHelpText();
        System.exit(-1);
        return;
      }
      String username=args[2];
      String password=args[3];
      username=username.trim().toLowerCase();
      host.setRestoreToRemoteUser(username,password);
    }
    host.run();
    System.exit(-1);
  }
 catch (  RuntimeException re) {
    System.out.print(""String_Node_Str"");
    re.printStackTrace();
    throw re;
  }
 finally {
    System.exit(0);
  }
}","@Override public void handle(){
  super.handle();
  PrototypeFactory prototypeFactory=new LivePrototypeFactory();
  try {
    CommCareConfigEngine engine=configureApp(args[0],prototypeFactory);
    ApplicationHost host=new ApplicationHost(engine,prototypeFactory);
    if (cmd.hasOption(""String_Node_Str"")) {
      host.setRestoreToLocalFile(cmd.getOptionValue(""String_Node_Str""));
    }
 else {
      username=username.trim().toLowerCase();
      host.setRestoreToRemoteUser(username,password);
    }
    host.run();
    System.exit(-1);
  }
 catch (  RuntimeException re) {
    System.out.print(""String_Node_Str"");
    re.printStackTrace();
    throw re;
  }
 finally {
    System.exit(0);
  }
}",0.3239263803680982
146647,"public CliValidateCommand(String commandName,String[] args){
  super(commandName,args);
}","public CliValidateCommand(){
  super(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.5136612021857924
146648,"@Override public void handle(){
  super.handle();
  PrototypeFactory prototypeFactory=new LivePrototypeFactory();
  if (args.length < 2) {
    printHelpText();
    System.exit(-1);
  }
  CommCareConfigEngine engine=configureApp(args[1],prototypeFactory);
  engine.describeApplication();
  System.exit(0);
}","@Override public void handle(){
  super.handle();
  PrototypeFactory prototypeFactory=new LivePrototypeFactory();
  CommCareConfigEngine engine=configureApp(resourcePath,prototypeFactory);
  engine.describeApplication();
  System.exit(0);
}",0.8351648351648352
146649,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  init();
  setValue(ExtUtil.readDate(in));
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  setValue(ExtUtil.readDate(in));
  init();
}",0.9363057324840764
146650,"private void parseControlChildren(Element e,QuestionDef question,IFormElement parent,boolean isSelect){
  for (int i=0; i < e.getChildCount(); i++) {
    int type=e.getType(i);
    Element child=(type == Node.ELEMENT ? e.getElement(i) : null);
    String childName=(child != null ? child.getName() : null);
    if (LABEL_ELEMENT.equals(childName) || HINT_ELEMENT.equals(childName) || HELP_ELEMENT.equals(childName)|| CONSTRAINT_ELEMENT.equals(childName)) {
      parseHelperText(question,child);
    }
 else     if (isSelect && ""String_Node_Str"".equals(childName)) {
      parseItem(question,child);
    }
 else     if (isSelect && ""String_Node_Str"".equals(childName)) {
      parseItemset(question,child,parent);
    }
 else     if (actionHandlers.contains(childName)) {
      actionHandlers.get(childName).handle(this,child,question);
    }
  }
}","private void parseControlChildren(Element e,QuestionDef question,IFormElement parent,boolean isSelect){
  for (int i=0; i < e.getChildCount(); i++) {
    int type=e.getType(i);
    Element child=(type == Node.ELEMENT ? e.getElement(i) : null);
    String childName=(child != null ? child.getName() : null);
    if (LABEL_ELEMENT.equals(childName) || HINT_ELEMENT.equals(childName) || HELP_ELEMENT.equals(childName)|| CONSTRAINT_ELEMENT.equals(childName)) {
      parseHelperText(question,child);
    }
 else     if (isSelect && ""String_Node_Str"".equals(childName)) {
      parseItem(question,child);
    }
 else     if (isSelect && ""String_Node_Str"".equals(childName)) {
      parseItemset(question,child,parent);
    }
 else     if (actionHandlers.containsKey(childName)) {
      actionHandlers.get(childName).handle(this,child,question);
    }
  }
}",0.998234255444379
146651,"/** 
 * Test triggers fired from inserting a new repeat entry. Triggers fired during insert action don't need to be fired again when all triggers rooted by that repeat entry are fired.
 */
@Test public void testRepeatInsertTriggering() throws Exception {
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=fpi.getFormEntryController();
  fpi.getFormDef().initialize(true,null);
  fec.jumpToIndex(FormIndex.createBeginningOfFormIndex());
  do {
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
  EvaluationContext evalCtx=fpi.getFormDef().getEvaluationContext();
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
}","/** 
 * Test triggers fired from inserting a new repeat entry. Triggers fired during insert action don't need to be fired again when all triggers rooted by that repeat entry are fired.
 */
@Test public void testRepeatInsertTriggering() throws Exception {
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=initFormEntry(fpi);
  stepThroughEntireForm(fec);
  EvaluationContext evalCtx=fpi.getFormDef().getEvaluationContext();
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
}",0.8271386430678466
146652,"/** 
 * Test nested form repeat triggers and actions
 */
@Test public void testNestedRepeatActions() throws Exception {
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=fpi.getFormEntryController();
  fpi.getFormDef().initialize(true,null);
  fec.jumpToIndex(FormIndex.createBeginningOfFormIndex());
  do {
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",30.0,""String_Node_Str"",fpi.getFormDef().getEvaluationContext());
}","/** 
 * Test nested form repeat triggers and actions
 */
@Test public void testNestedRepeatActions() throws Exception {
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=initFormEntry(fpi);
  stepThroughEntireForm(fec);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",30.0,""String_Node_Str"",fpi.getFormDef().getEvaluationContext());
}",0.7546346782988005
146653,"/** 
 * Tests trigger caching related to cascading relevancy calculations to children.
 */
@Test public void testTriggerCaching() throws Exception {
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=fpi.getFormEntryController();
  fpi.getFormDef().initialize(true,null);
  fec.jumpToIndex(FormIndex.createBeginningOfFormIndex());
  do {
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
  EvaluationContext evalCtx=fpi.getFormDef().getEvaluationContext();
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",400.0,""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",100.0,""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  Object weighTimeResult=ExprEvalUtils.xpathEval(evalCtx,""String_Node_Str"");
  if (""String_Node_Str"".equals(weighTimeResult) || ""String_Node_Str"".equals(weighTimeResult)) {
    fail(""String_Node_Str"");
  }
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",1.0,""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
}","/** 
 * Tests trigger caching related to cascading relevancy calculations to children.
 */
@Test public void testTriggerCaching() throws Exception {
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=initFormEntry(fpi);
  stepThroughEntireForm(fec);
  EvaluationContext evalCtx=fpi.getFormDef().getEvaluationContext();
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",400.0,""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",100.0,""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  Object weighTimeResult=ExprEvalUtils.xpathEval(evalCtx,""String_Node_Str"");
  if (""String_Node_Str"".equals(weighTimeResult) || ""String_Node_Str"".equals(weighTimeResult)) {
    fail(""String_Node_Str"");
  }
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",1.0,""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
}",0.9077798861480076
146654,"/** 
 * Make sure that 'current()' expands correctly when used in conditionals such as in 'relevant' tags. The test answers a question and expects the correct elements to be re-evaluated and set to not relevant.
 */
@Test public void testCurrentFuncInTriggers(){
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=fpi.getFormEntryController();
  fec.jumpToIndex(FormIndex.createBeginningOfFormIndex());
  do {
    QuestionDef q=fpi.getCurrentQuestion();
    if (q == null) {
      continue;
    }
    TreeReference qRef=(TreeReference)(q.getBind()).getReference();
    if (qRef.toString().equals(""String_Node_Str"")) {
      int response=fec.answerQuestion(new StringData(""String_Node_Str""));
      if (response != FormEntryController.ANSWER_OK) {
        fail(""String_Node_Str"");
      }
    }
 else     if (q.getID() == 2) {
      fail(""String_Node_Str"");
    }
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
}","/** 
 * Make sure that 'current()' expands correctly when used in conditionals such as in 'relevant' tags. The test answers a question and expects the correct elements to be re-evaluated and set to not relevant.
 */
@Test public void testCurrentFuncInTriggers(){
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=initFormEntry(fpi);
  do {
    QuestionDef q=fpi.getCurrentQuestion();
    if (q == null) {
      continue;
    }
    TreeReference qRef=(TreeReference)(q.getBind()).getReference();
    if (qRef.toString().equals(""String_Node_Str"")) {
      int response=fec.answerQuestion(new StringData(""String_Node_Str""));
      if (response != FormEntryController.ANSWER_OK) {
        fail(""String_Node_Str"");
      }
    }
 else     if (q.getID() == 2) {
      fail(""String_Node_Str"");
    }
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
}",0.9568919638105376
146655,"@Test public void testAnswerConstraintOldText(){
  IntegerData ans=new IntegerData(7);
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=fpi.getFormEntryController();
  fec.jumpToIndex(FormIndex.createBeginningOfFormIndex());
  fec.setLanguage(""String_Node_Str"");
  do {
    QuestionDef q=fpi.getCurrentQuestion();
    if (q == null || q.getTextID() == null || ""String_Node_Str"".equals(q.getTextID())) {
      continue;
    }
    if (q.getTextID().equals(""String_Node_Str"")) {
      int response=fec.answerQuestion(ans);
      if (response == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
        if (!""String_Node_Str"".equals(fec.getModel().getQuestionPrompt().getConstraintText())) {
          fail(""String_Node_Str"" + fec.getModel().getQuestionPrompt().getConstraintText());
        }
      }
 else       if (response == FormEntryController.ANSWER_OK) {
        fail(""String_Node_Str"");
        break;
      }
    }
    if (q.getTextID().equals(""String_Node_Str"")) {
      int response3=fec.answerQuestion(new IntegerData(13));
      if (response3 == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
        if (!""String_Node_Str"".equals(fec.getModel().getQuestionPrompt().getConstraintText())) {
          fail(""String_Node_Str"" + fec.getModel().getQuestionPrompt().getConstraintText());
        }
      }
 else       if (response3 == FormEntryController.ANSWER_OK) {
        fail(""String_Node_Str"");
        break;
      }
    }
    if (q.getTextID().equals(""String_Node_Str"")) {
      int response4=fec.answerQuestion(new IntegerData(13));
      if (response4 == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
        if (!""String_Node_Str"".equals(fec.getModel().getQuestionPrompt().getConstraintText())) {
          fail(""String_Node_Str"" + fec.getModel().getQuestionPrompt().getConstraintText());
        }
      }
 else       if (response4 == FormEntryController.ANSWER_OK) {
        fail(""String_Node_Str"");
        break;
      }
    }
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
}","@Test public void testAnswerConstraintOldText(){
  IntegerData ans=new IntegerData(7);
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=initFormEntry(fpi);
  fec.setLanguage(""String_Node_Str"");
  do {
    QuestionDef q=fpi.getCurrentQuestion();
    if (q == null || q.getTextID() == null || ""String_Node_Str"".equals(q.getTextID())) {
      continue;
    }
    if (q.getTextID().equals(""String_Node_Str"")) {
      int response=fec.answerQuestion(ans);
      if (response == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
        if (!""String_Node_Str"".equals(fec.getModel().getQuestionPrompt().getConstraintText())) {
          fail(""String_Node_Str"" + fec.getModel().getQuestionPrompt().getConstraintText());
        }
      }
 else       if (response == FormEntryController.ANSWER_OK) {
        fail(""String_Node_Str"");
        break;
      }
    }
    if (q.getTextID().equals(""String_Node_Str"")) {
      int response3=fec.answerQuestion(new IntegerData(13));
      if (response3 == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
        if (!""String_Node_Str"".equals(fec.getModel().getQuestionPrompt().getConstraintText())) {
          fail(""String_Node_Str"" + fec.getModel().getQuestionPrompt().getConstraintText());
        }
      }
 else       if (response3 == FormEntryController.ANSWER_OK) {
        fail(""String_Node_Str"");
        break;
      }
    }
    if (q.getTextID().equals(""String_Node_Str"")) {
      int response4=fec.answerQuestion(new IntegerData(13));
      if (response4 == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
        if (!""String_Node_Str"".equals(fec.getModel().getQuestionPrompt().getConstraintText())) {
          fail(""String_Node_Str"" + fec.getModel().getQuestionPrompt().getConstraintText());
        }
      }
 else       if (response4 == FormEntryController.ANSWER_OK) {
        fail(""String_Node_Str"");
        break;
      }
    }
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
}",0.9761377613776138
146656,"/** 
 * Regressions around complex repeat behaviors
 */
@Test public void testLoopedRepeatIndexFetches() throws Exception {
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=fpi.getFormEntryController();
  fpi.getFormDef().initialize(true,null);
  fec.jumpToIndex(FormIndex.createBeginningOfFormIndex());
  fec.stepToNextEvent();
  fec.stepToNextEvent();
  fec.answerQuestion(new IntegerData(2));
  while (fec.stepToNextEvent() != FormEntryController.EVENT_QUESTION)   ;
  fec.answerQuestion(new UncastData(""String_Node_Str""));
  while (fec.stepToNextEvent() != FormEntryController.EVENT_QUESTION)   ;
  fec.getNextIndex(fec.getModel().getFormIndex(),true);
  fec.answerQuestion(new IntegerData(2));
  fec.getNextIndex(fec.getModel().getFormIndex(),true);
}","/** 
 * Regressions around complex repeat behaviors
 */
@Test public void testLoopedRepeatIndexFetches() throws Exception {
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=initFormEntry(fpi);
  fec.stepToNextEvent();
  fec.stepToNextEvent();
  fec.answerQuestion(new IntegerData(2));
  while (fec.stepToNextEvent() != FormEntryController.EVENT_QUESTION)   ;
  fec.answerQuestion(new UncastData(""String_Node_Str""));
  while (fec.stepToNextEvent() != FormEntryController.EVENT_QUESTION)   ;
  fec.getNextIndex(fec.getModel().getFormIndex(),true);
  fec.answerQuestion(new IntegerData(2));
  fec.getNextIndex(fec.getModel().getFormIndex(),true);
}",0.9150237933378654
146657,"@Test public void testAnswerConstraint(){
  IntegerData ans=new IntegerData(13);
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=fpi.getFormEntryController();
  fec.jumpToIndex(FormIndex.createBeginningOfFormIndex());
  do {
    QuestionDef q=fpi.getCurrentQuestion();
    if (q == null || q.getTextID() == null || ""String_Node_Str"".equals(q.getTextID())) {
      continue;
    }
    if (q.getTextID().equals(""String_Node_Str"")) {
      int response=fec.answerQuestion(ans);
      if (response == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
        fail(""String_Node_Str"");
      }
 else       if (response == FormEntryController.ANSWER_OK) {
        break;
      }
 else {
        fail(""String_Node_Str"");
      }
    }
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
}","@Test public void testAnswerConstraint(){
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=initFormEntry(fpi);
  do {
    QuestionDef q=fpi.getCurrentQuestion();
    if (q == null || q.getTextID() == null || ""String_Node_Str"".equals(q.getTextID())) {
      continue;
    }
    if (q.getTextID().equals(""String_Node_Str"")) {
      int response=fec.answerQuestion(new IntegerData(13));
      if (response == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
        fail(""String_Node_Str"");
      }
 else       if (response == FormEntryController.ANSWER_OK) {
        break;
      }
 else {
        fail(""String_Node_Str"");
      }
    }
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
}",0.5018867924528302
146658,"/** 
 * Test setvalue expressions which have predicate references
 */
@Test public void testSetValuePredicate(){
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=fpi.getFormEntryController();
  fpi.getFormDef().initialize(true,null);
  fec.jumpToIndex(FormIndex.createBeginningOfFormIndex());
  boolean testPassed=false;
  do {
    if (fec.getModel().getEvent() != FormEntryController.EVENT_QUESTION) {
      continue;
    }
    String text=fec.getModel().getQuestionPrompt().getQuestionText();
    if (text.contains(""String_Node_Str"") && text.contains(""String_Node_Str"")) {
      testPassed=true;
    }
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
  if (!testPassed) {
    fail(""String_Node_Str"");
  }
}","/** 
 * Test setvalue expressions which have predicate references
 */
@Test public void testSetValuePredicate(){
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=initFormEntry(fpi);
  boolean testPassed=false;
  do {
    if (fec.getModel().getEvent() != FormEntryController.EVENT_QUESTION) {
      continue;
    }
    String text=fec.getModel().getQuestionPrompt().getQuestionText();
    if (text.contains(""String_Node_Str"") && text.contains(""String_Node_Str"")) {
      testPassed=true;
    }
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
  if (!testPassed) {
    fail(""String_Node_Str"");
  }
}",0.9028651292802236
146659,"/** 
 * Remove from the graph the node at this index, and remove all nodes that are made invalid by the non-existence of that node (i.e. all of its child and extension cases). Also accumulate a list of edges that need to be removed as a result of this method call. Actual edge removal should then be done all at once by the caller, to avoid ConcurrentModificationException
 */
private void removeNodeAndPropagate(String indexOfRemovedNode,Vector<String[]> accumulatedEdgesToRemove){
  Vector<Edge<String,String>> childCases=internalCaseDAG.getParents(indexOfRemovedNode);
  for (  Edge<String,String> child : childCases) {
    accumulatedEdgesToRemove.addElement(new String[]{child.i,indexOfRemovedNode});
    removeNodeAndPropagate(child.i,accumulatedEdgesToRemove);
  }
  Vector<Edge<String,String>> parentCases=internalCaseDAG.getChildren(indexOfRemovedNode);
  for (  Edge<String,String> parent : parentCases) {
    accumulatedEdgesToRemove.addElement(new String[]{indexOfRemovedNode,parent.i});
  }
  int storageIdOfRemovedNode=internalCaseDAG.removeNode(indexOfRemovedNode)[1];
  idsToRemove.addElement(new Integer(storageIdOfRemovedNode));
  casesRemovedDueToMissingCases.add(indexOfRemovedNode);
}","/** 
 * Remove from the graph the node at this index, and remove all nodes that are made invalid by the non-existence of that node (i.e. all of its child and extension cases). Also accumulate a list of edges that need to be removed as a result of this method call. Actual edge removal should then be done all at once by the caller, to avoid ConcurrentModificationException
 */
private void removeNodeAndPropagate(String indexOfRemovedNode,Vector<String[]> accumulatedEdgesToRemove){
  Vector<Edge<String,String>> childCases=internalCaseDAG.getParents(indexOfRemovedNode);
  for (  Edge<String,String> child : childCases) {
    accumulatedEdgesToRemove.addElement(new String[]{child.i,indexOfRemovedNode});
    removeNodeAndPropagate(child.i,accumulatedEdgesToRemove);
  }
  Vector<Edge<String,String>> parentCases=internalCaseDAG.getChildren(indexOfRemovedNode);
  for (  Edge<String,String> parent : parentCases) {
    accumulatedEdgesToRemove.addElement(new String[]{indexOfRemovedNode,parent.i});
  }
  int storageIdOfRemovedNode=internalCaseDAG.removeNode(indexOfRemovedNode)[1];
  idsToRemove.addElement(new Integer(storageIdOfRemovedNode));
  casesRemovedDueToMissingCases.addElement(indexOfRemovedNode);
}",0.9971038477451386
146660,"/** 
 * Traverse the graph to accumulate a list of any edges to empty nodes (which are created when a child makes a placeholder index to a parent, but then the parent does not actually exist on the phone for some reason). Then remove any nodes that are made invalid by that parent node not existing, which further accumulates the list of invalid edges
 * @return Whether or not this method invocation removed any invalid edges from the DAG
 */
private Vector<String[]> getInvalidEdges(){
  Hashtable<String,Vector<Edge<String,String>>> allEdges=internalCaseDAG.getEdges();
  Vector<String> childOfNonexistentParent=new Vector<String>();
  Vector<String[]> edgesToRemove=new Vector<String[]>();
  Enumeration edgeOriginIndices=allEdges.keys();
  while (edgeOriginIndices.hasMoreElements()) {
    String originIndex=(String)edgeOriginIndices.nextElement();
    Vector<Edge<String,String>> edgeListForOrigin=allEdges.get(originIndex);
    for (    Edge<String,String> edge : edgeListForOrigin) {
      String targetIndex=edge.i;
      if (internalCaseDAG.getNode(targetIndex) == null) {
        missingCases.add(targetIndex);
        edgesToRemove.addElement(new String[]{originIndex,targetIndex});
        childOfNonexistentParent.addElement(originIndex);
      }
    }
  }
  for (  String index : childOfNonexistentParent) {
    removeNodeAndPropagate(index,edgesToRemove);
  }
  invalidEdgesWereRemoved=edgesToRemove.size() > 0;
  return edgesToRemove;
}","/** 
 * Traverse the graph to accumulate a list of any edges to empty nodes (which are created when a child makes a placeholder index to a parent, but then the parent does not actually exist on the phone for some reason). Then remove any nodes that are made invalid by that parent node not existing, which further accumulates the list of invalid edges
 * @return Whether or not this method invocation removed any invalid edges from the DAG
 */
private Vector<String[]> getInvalidEdges(){
  Hashtable<String,Vector<Edge<String,String>>> allEdges=internalCaseDAG.getEdges();
  Vector<String> childOfNonexistentParent=new Vector<String>();
  Vector<String[]> edgesToRemove=new Vector<String[]>();
  Enumeration edgeOriginIndices=allEdges.keys();
  while (edgeOriginIndices.hasMoreElements()) {
    String originIndex=(String)edgeOriginIndices.nextElement();
    Vector<Edge<String,String>> edgeListForOrigin=allEdges.get(originIndex);
    for (    Edge<String,String> edge : edgeListForOrigin) {
      String targetIndex=edge.i;
      if (internalCaseDAG.getNode(targetIndex) == null) {
        missingCases.addElement(targetIndex);
        edgesToRemove.addElement(new String[]{originIndex,targetIndex});
        childOfNonexistentParent.addElement(originIndex);
      }
    }
  }
  for (  String index : childOfNonexistentParent) {
    removeNodeAndPropagate(index,edgesToRemove);
  }
  invalidEdgesWereRemoved=edgesToRemove.size() > 0;
  return edgesToRemove;
}",0.997598627787307
146661,"public void registerModule(){
  String[] classes={""String_Node_Str"",""String_Node_Str""};
  PrototypeManager.registerPrototypes(classes);
  PrototypeManager.registerPrototypes(XPathParseTool.xpathClasses);
  RestoreUtils.xfFact=new IXFormyFactory(){
    public TreeReference ref(    String refStr){
      return FormInstance.unpackReference(new XPathReference(refStr));
    }
    public IDataPayload serializeInstance(    FormInstance dm){
      try {
        return (new XFormSerializingVisitor()).createSerializedPayload(dm);
      }
 catch (      IOException e) {
        return null;
      }
    }
    public FormInstance parseRestore(    byte[] data,    Class restorableType){
      return XFormParser.restoreDataModel(data,restorableType);
    }
    public IConditionExpr refToPathExpr(    TreeReference ref){
      return new XPathConditional(XPathPathExpr.fromRef(ref));
    }
  }
;
}","public void registerModule(){
  String[] classes={""String_Node_Str"",""String_Node_Str""};
  PrototypeManager.registerPrototypes(classes);
  PrototypeManager.registerPrototypes(XPathParseTool.xpathClasses);
  RestoreUtils.xfFact=new IXFormyFactory(){
    public TreeReference ref(    String refStr){
      return FormInstance.unpackReference(new XPathReference(refStr));
    }
    public IDataPayload serializeInstance(    FormInstance dm){
      try {
        return (new XFormSerializingVisitor()).createSerializedPayload(dm);
      }
 catch (      IOException e) {
        return null;
      }
    }
    public IConditionExpr refToPathExpr(    TreeReference ref){
      return new XPathConditional(XPathPathExpr.fromRef(ref));
    }
  }
;
}",0.9079754601226994
146662,"protected AbstractTreeElement setupFixtureData(ExternalDataInstance instance){
  String ref=instance.getReference();
  String userId=""String_Node_Str"";
  User u=mSandbox.getLoggedInUser();
  if (u != null) {
    userId=u.getUniqueId();
  }
  String refId=ref.substring(ref.lastIndexOf('/') + 1,ref.length());
  try {
    FormInstance fixture=SandboxUtils.loadFixture(mSandbox,refId,userId);
    if (fixture == null) {
      throw new RuntimeException(""String_Node_Str"" + ref);
    }
    TreeElement root=fixture.getRoot();
    root.setParent(instance.getBase());
    return root;
  }
 catch (  IllegalStateException ise) {
    throw new RuntimeException(""String_Node_Str"" + ref);
  }
}","protected AbstractTreeElement setupFixtureData(ExternalDataInstance instance){
  String ref=instance.getReference();
  String userId=""String_Node_Str"";
  User u=mSandbox.getLoggedInUser();
  if (u != null) {
    userId=u.getUniqueId();
  }
  String refId=ref.substring(ref.lastIndexOf('/') + 1,ref.length());
  try {
    FormInstance fixture=SandboxUtils.loadFixture(mSandbox,refId,userId);
    if (fixture == null) {
      throw new FixtureInitializationException(""String_Node_Str"" + ref);
    }
    TreeElement root=fixture.getRoot();
    root.setParent(instance.getBase());
    return root;
  }
 catch (  IllegalStateException ise) {
    throw new FixtureInitializationException(""String_Node_Str"" + ref);
  }
}",0.9599427753934192
146663,"/** 
 * For the current index: Checks whether the index represents a node which should exist given a non-interactive repeat, along with a count for that repeat which is beneath the dynamic level specified. If this index does represent such a node, the new model for the repeat is created behind the scenes and the index for the initial question is returned. Note: This method will not prevent the addition of new repeat elements in the interface, it will merely use the xforms repeat hint to create new nodes that are assumed to exist
 * @param index To be evaluated as to whether the underlying model ishinted to exist
 */
public void createModelIfNecessary(FormIndex index){
  if (index.isInForm()) {
    IFormElement e=getForm().getChild(index);
    if (e instanceof GroupDef) {
      GroupDef g=(GroupDef)e;
      if (g.getRepeat() && g.getCountReference() != null) {
        IAnswerData count=getForm().getMainInstance().resolveReference(g.getConextualizedCountReference(index.getLocalReference())).getValue();
        if (count != null) {
          int fullcount=-1;
          try {
            fullcount=((Integer)new IntegerData().cast(count.uncast()).getValue()).intValue();
          }
 catch (          IllegalArgumentException iae) {
            throw new RuntimeException(""String_Node_Str"" + count.uncast().getString() + ""String_Node_Str""+ g.getConextualizedCountReference(index.getLocalReference()).toString()+ ""String_Node_Str"");
          }
          TreeReference ref=getForm().getChildInstanceRef(index);
          TreeElement element=getForm().getMainInstance().resolveReference(ref);
          if (element == null) {
            if (index.getInstanceIndex() < fullcount) {
              try {
                getForm().createNewRepeat(index);
              }
 catch (              InvalidReferenceException ire) {
                ire.printStackTrace();
                throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
              }
            }
          }
        }
      }
    }
  }
}","/** 
 * For the current index: Checks whether the index represents a node which should exist given a non-interactive repeat, along with a count for that repeat which is beneath the dynamic level specified. If this index does represent such a node, the new model for the repeat is created behind the scenes and the index for the initial question is returned. Note: This method will not prevent the addition of new repeat elements in the interface, it will merely use the xforms repeat hint to create new nodes that are assumed to exist
 * @param index To be evaluated as to whether the underlying model ishinted to exist
 */
public void createModelIfNecessary(FormIndex index){
  if (index.isInForm()) {
    IFormElement e=getForm().getChild(index);
    if (e instanceof GroupDef) {
      GroupDef g=(GroupDef)e;
      if (g.getRepeat() && g.getCountReference() != null) {
        IAnswerData count=getForm().getMainInstance().resolveReference(g.getConextualizedCountReference(index.getReference())).getValue();
        if (count != null) {
          int fullcount=-1;
          try {
            fullcount=((Integer)new IntegerData().cast(count.uncast()).getValue()).intValue();
          }
 catch (          IllegalArgumentException iae) {
            throw new RuntimeException(""String_Node_Str"" + count.uncast().getString() + ""String_Node_Str""+ g.getConextualizedCountReference(index.getLocalReference()).toString()+ ""String_Node_Str"");
          }
          TreeReference ref=getForm().getChildInstanceRef(index);
          TreeElement element=getForm().getMainInstance().resolveReference(ref);
          if (element == null) {
            if (index.getInstanceIndex() < fullcount) {
              try {
                getForm().createNewRepeat(index);
              }
 catch (              InvalidReferenceException ire) {
                ire.printStackTrace();
                throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
              }
            }
          }
        }
      }
    }
  }
}",0.998764516926118
146664,"/** 
 * For the current index: Checks whether the index represents a node which should exist given a non-interactive repeat, along with a count for that repeat which is beneath the dynamic level specified. If this index does represent such a node, the new model for the repeat is created behind the scenes and the index for the initial question is returned. Note: This method will not prevent the addition of new repeat elements in the interface, it will merely use the xforms repeat hint to create new nodes that are assumed to exist
 * @param index To be evaluated as to whether the underlying model ishinted to exist
 */
public void createModelIfNecessary(FormIndex index){
  if (index.isInForm()) {
    IFormElement e=getForm().getChild(index);
    if (e instanceof GroupDef) {
      GroupDef g=(GroupDef)e;
      if (g.getRepeat() && g.getCountReference() != null) {
        IAnswerData count=getForm().getMainInstance().resolveReference(g.getConextualizedCountReference(index.getReference())).getValue();
        if (count != null) {
          int fullcount=-1;
          try {
            fullcount=((Integer)new IntegerData().cast(count.uncast()).getValue()).intValue();
          }
 catch (          IllegalArgumentException iae) {
            throw new RuntimeException(""String_Node_Str"" + count.uncast().getString() + ""String_Node_Str""+ g.getConextualizedCountReference(index.getLocalReference()).toString()+ ""String_Node_Str"");
          }
          TreeReference ref=getForm().getChildInstanceRef(index);
          TreeElement element=getForm().getMainInstance().resolveReference(ref);
          if (element == null) {
            if (index.getInstanceIndex() < fullcount) {
              try {
                getForm().createNewRepeat(index);
              }
 catch (              InvalidReferenceException ire) {
                ire.printStackTrace();
                throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
              }
            }
          }
        }
      }
    }
  }
}","/** 
 * For the current index: Checks whether the index represents a node which should exist given a non-interactive repeat, along with a count for that repeat which is beneath the dynamic level specified. If this index does represent such a node, the new model for the repeat is created behind the scenes and the index for the initial question is returned. Note: This method will not prevent the addition of new repeat elements in the interface, it will merely use the xforms repeat hint to create new nodes that are assumed to exist
 * @param index To be evaluated as to whether the underlying model ishinted to exist
 */
public void createModelIfNecessary(FormIndex index){
  if (index.isInForm()) {
    IFormElement e=getForm().getChild(index);
    if (e instanceof GroupDef) {
      GroupDef g=(GroupDef)e;
      if (g.getRepeat() && g.getCountReference() != null) {
        IAnswerData count=getForm().getMainInstance().resolveReference(g.getConextualizedCountReference(index.getReference())).getValue();
        if (count != null) {
          int fullcount=-1;
          try {
            fullcount=((Integer)new IntegerData().cast(count.uncast()).getValue()).intValue();
          }
 catch (          IllegalArgumentException iae) {
            throw new RuntimeException(""String_Node_Str"" + count.uncast().getString() + ""String_Node_Str""+ g.getConextualizedCountReference(index.getReference()).toString()+ ""String_Node_Str"");
          }
          TreeReference ref=getForm().getChildInstanceRef(index);
          TreeElement element=getForm().getMainInstance().resolveReference(ref);
          if (element == null) {
            if (index.getInstanceIndex() < fullcount) {
              try {
                getForm().createNewRepeat(index);
              }
 catch (              InvalidReferenceException ire) {
                ire.printStackTrace();
                throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
              }
            }
          }
        }
      }
    }
  }
}",0.998761456527124
146665,"public static FormInstance loadFixtureForUser(String refId,String userId){
  IStorageUtilityIndexed storage=(IStorageUtilityIndexed)StorageManager.getStorage(""String_Node_Str"");
  FormInstance fixture=null;
  Vector<Integer> relevantFixtures=storage.getIDsForValue(FormInstance.META_ID,refId);
  if (relevantFixtures.size() == 1) {
    fixture=(FormInstance)storage.read(relevantFixtures.elementAt(0).intValue());
  }
 else   if (relevantFixtures.size() > 1) {
    Vector<Integer> relevantUserFixtures=storage.getIDsForValue(FormInstance.META_XMLNS,userId);
    if (relevantUserFixtures.size() != 0) {
      Integer userFixture=ArrayUtilities.intersectSingle(relevantFixtures,relevantUserFixtures);
      if (userFixture != null) {
        fixture=(FormInstance)storage.read(userFixture.intValue());
      }
    }
    if (fixture == null) {
      Integer globalFixture=ArrayUtilities.intersectSingle(storage.getIDsForValue(FormInstance.META_XMLNS,""String_Node_Str""),relevantFixtures);
      if (globalFixture == null) {
        return null;
      }
      fixture=(FormInstance)storage.read(globalFixture.intValue());
    }
  }
 else {
    return null;
  }
  return fixture;
}","public static FormInstance loadFixtureForUser(String refId,String userId){
  IStorageUtilityIndexed storage=(IStorageUtilityIndexed)StorageManager.getStorage(FormInstance.STORAGE_KEY);
  FormInstance fixture=null;
  Vector<Integer> relevantFixtures=storage.getIDsForValue(FormInstance.META_ID,refId);
  if (relevantFixtures.size() == 1) {
    fixture=(FormInstance)storage.read(relevantFixtures.elementAt(0).intValue());
  }
 else   if (relevantFixtures.size() > 1) {
    Vector<Integer> relevantUserFixtures=storage.getIDsForValue(FormInstance.META_XMLNS,userId);
    if (relevantUserFixtures.size() != 0) {
      Integer userFixture=ArrayUtilities.intersectSingle(relevantFixtures,relevantUserFixtures);
      if (userFixture != null) {
        fixture=(FormInstance)storage.read(userFixture.intValue());
      }
    }
    if (fixture == null) {
      Integer globalFixture=ArrayUtilities.intersectSingle(storage.getIDsForValue(FormInstance.META_XMLNS,""String_Node_Str""),relevantFixtures);
      if (globalFixture == null) {
        return null;
      }
      fixture=(FormInstance)storage.read(globalFixture.intValue());
    }
  }
 else {
    return null;
  }
  return fixture;
}",0.9834535426389478
146666,"protected IStorageUtilityIndexed<FormInstance> getFixtureStorage(){
  return (IStorageUtilityIndexed<FormInstance>)StorageManager.getStorage(""String_Node_Str"");
}","protected IStorageUtilityIndexed<FormInstance> getFixtureStorage(){
  return (IStorageUtilityIndexed<FormInstance>)StorageManager.getStorage(FormInstance.STORAGE_KEY);
}",0.8882175226586103
146667,"public IStorageUtilityIndexed<FormInstance> storage(){
  if (fixtureStorage == null) {
    fixtureStorage=CommCareTransactionParserFactory.this.sandbox.getUserFixtureStorage();
  }
  return fixtureStorage;
}","public IStorageUtilityIndexed<FormInstance> storage(){
  if (fixtureStorage == null) {
    fixtureStorage=sandbox.getUserFixtureStorage();
  }
  return fixtureStorage;
}",0.898936170212766
146668,"public void initFixtureParser(){
  fixtureParser=new TransactionParserFactory(){
    FixtureXmlParser created=null;
    public TransactionParser getParser(    KXmlParser parser){
      if (created == null) {
        created=new FixtureXmlParser(parser){
          private IStorageUtilityIndexed<FormInstance> fixtureStorage;
          public IStorageUtilityIndexed<FormInstance> storage(){
            if (fixtureStorage == null) {
              fixtureStorage=CommCareTransactionParserFactory.this.sandbox.getUserFixtureStorage();
            }
            return fixtureStorage;
          }
        }
;
      }
      return created;
    }
  }
;
}","public void initFixtureParser(){
  fixtureParser=new TransactionParserFactory(){
    FixtureXmlParser created=null;
    public TransactionParser getParser(    KXmlParser parser){
      if (created == null) {
        created=new FixtureXmlParser(parser){
          private IStorageUtilityIndexed<FormInstance> fixtureStorage;
          public IStorageUtilityIndexed<FormInstance> storage(){
            if (fixtureStorage == null) {
              fixtureStorage=sandbox.getUserFixtureStorage();
            }
            return fixtureStorage;
          }
        }
;
      }
      return created;
    }
  }
;
}",0.9507154213036566
146669,"public CommCareConfigEngine(OutputStream output,PrototypeFactory prototypeFactory){
  this.output=output;
  this.print=new PrintStream(output);
  this.platform=new CommCarePlatform(2,26);
  this.mLiveFactory=prototypeFactory;
  setRoots();
  table=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility(Resource.class,mLiveFactory));
  updateTable=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility(Resource.class,mLiveFactory));
  recoveryTable=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility(Resource.class,mLiveFactory));
  StorageManager.forceClear();
  StorageManager.setStorageFactory(new IStorageFactory(){
    public IStorageUtility newStorage(    String name,    Class type){
      return new DummyIndexedStorageUtility(type,mLiveFactory);
    }
  }
);
  StorageManager.registerStorage(Profile.STORAGE_KEY,Profile.class);
  StorageManager.registerStorage(Suite.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(FormDef.STORAGE_KEY,FormDef.class);
  StorageManager.registerStorage(""String_Node_Str"",FormInstance.class);
}","public CommCareConfigEngine(OutputStream output,PrototypeFactory prototypeFactory){
  this.output=output;
  this.print=new PrintStream(output);
  this.platform=new CommCarePlatform(2,26);
  this.mLiveFactory=prototypeFactory;
  setRoots();
  table=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility(Resource.class,mLiveFactory));
  updateTable=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility(Resource.class,mLiveFactory));
  recoveryTable=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility(Resource.class,mLiveFactory));
  StorageManager.forceClear();
  StorageManager.setStorageFactory(new IStorageFactory(){
    public IStorageUtility newStorage(    String name,    Class type){
      return new DummyIndexedStorageUtility(type,mLiveFactory);
    }
  }
);
  StorageManager.registerStorage(Profile.STORAGE_KEY,Profile.class);
  StorageManager.registerStorage(Suite.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(FormDef.STORAGE_KEY,FormDef.class);
  StorageManager.registerStorage(FormInstance.STORAGE_KEY,FormInstance.class);
}",0.9816815406294036
146670,"@Override public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.writeString(out,frameId);
  ExtUtil.write(out,new ExtWrapList(steps));
  ExtUtil.write(out,new ExtWrapList(snapshot));
  ExtUtil.writeBool(out,dead);
}","@Override public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.write(out,new ExtWrapNullable(frameId));
  ExtUtil.write(out,new ExtWrapList(steps));
  ExtUtil.write(out,new ExtWrapList(snapshot));
  ExtUtil.writeBool(out,dead);
}",0.9252525252525252
146671,"public synchronized void clearSnapshot(){
  this.snapshot=null;
}","public synchronized void clearSnapshot(){
  this.snapshot.clear();
}",0.9172932330827068
146672,"/** 
 * Requests that the frame capture an original snapshot of its state. This snapshot can be referenced later to compare the eventual state of the frame to an earlier point
 */
public synchronized void captureSnapshot(){
  snapshot=new Vector<StackFrameStep>();
  for (  StackFrameStep s : steps) {
    snapshot.addElement(s);
  }
}","/** 
 * Requests that the frame capture an original snapshot of its state. This snapshot can be referenced later to compare the eventual state of the frame to an earlier point
 */
public synchronized void captureSnapshot(){
  snapshot.clear();
  for (  StackFrameStep s : steps) {
    snapshot.addElement(s);
  }
}",0.9491525423728814
146673,"@Override public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  frameId=ExtUtil.readString(in);
  steps=(Vector<StackFrameStep>)ExtUtil.read(in,new ExtWrapList(StackFrameStep.class),pf);
  snapshot=(Vector<StackFrameStep>)ExtUtil.read(in,new ExtWrapList(StackFrameStep.class),pf);
  dead=ExtUtil.readBool(in);
}","@Override public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  frameId=(String)ExtUtil.read(in,new ExtWrapNullable(String.class));
  steps=(Vector<StackFrameStep>)ExtUtil.read(in,new ExtWrapList(StackFrameStep.class),pf);
  snapshot=(Vector<StackFrameStep>)ExtUtil.read(in,new ExtWrapList(StackFrameStep.class),pf);
  dead=ExtUtil.readBool(in);
}",0.9460154241645244
146674,"/** 
 * Determines whether the current frame state is incompatible with a previously snapshotted frame state, if one exists. If no snapshot exists, this method will return false. Compatibility is determined by checking that each step in the previous snapshot is matched by an identical step in the current snapshot.
 */
public synchronized boolean isSnapshotIncompatible(){
  if (snapshot == null) {
    return false;
  }
  if (snapshot.size() > steps.size()) {
    return true;
  }
  for (int i=0; i < snapshot.size(); ++i) {
    if (!snapshot.elementAt(i).equals(steps.elementAt(i))) {
      return true;
    }
  }
  return false;
}","/** 
 * Determines whether the current frame state is incompatible with a previously snapshotted frame state, if one exists. If no snapshot exists, this method will return false. Compatibility is determined by checking that each step in the previous snapshot is matched by an identical step in the current snapshot.
 */
public synchronized boolean isSnapshotIncompatible(){
  if (snapshot.isEmpty()) {
    return false;
  }
  if (snapshot.size() > steps.size()) {
    return true;
  }
  for (int i=0; i < snapshot.size(); ++i) {
    if (!snapshot.elementAt(i).equals(steps.elementAt(i))) {
      return true;
    }
  }
  return false;
}",0.9858267716535432
146675,"@Override public String toString(){
  StringBuilder output=new StringBuilder(""String_Node_Str"");
  prettyPrintSteps(steps,output);
  if (snapshot != null && !snapshot.isEmpty()) {
    output.append(""String_Node_Str"");
    prettyPrintSteps(snapshot,output);
  }
  if (dead) {
    output.append(""String_Node_Str"");
  }
  return output.toString();
}","@Override public String toString(){
  StringBuilder output=new StringBuilder(""String_Node_Str"");
  prettyPrintSteps(steps,output);
  if (!snapshot.isEmpty()) {
    output.append(""String_Node_Str"");
    prettyPrintSteps(snapshot,output);
  }
  if (dead) {
    output.append(""String_Node_Str"");
  }
  return output.toString();
}",0.9702380952380952
146676,"public Case parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(""String_Node_Str"");
  String caseId=parser.getAttributeValue(null,""String_Node_Str"");
  if (caseId == null || caseId.equals(""String_Node_Str"")) {
    throw new InvalidStructureException(""String_Node_Str"",this.parser);
  }
  String dateModified=parser.getAttributeValue(null,""String_Node_Str"");
  if (dateModified == null) {
    throw new InvalidStructureException(""String_Node_Str"",this.parser);
  }
  Date modified=DateUtils.parseDateTime(dateModified);
  boolean create=false;
  boolean update=false;
  boolean close=false;
  Case caseForBlock=null;
  while (this.nextTagInBlock(""String_Node_Str"")) {
    String action=parser.getName().toLowerCase();
    if (action.equals(""String_Node_Str"")) {
      String[] data=new String[3];
      while (this.nextTagInBlock(""String_Node_Str"")) {
        if (parser.getName().equals(""String_Node_Str"")) {
          data[0]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[1]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[2]=parser.nextText().trim();
        }
 else {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
      }
      if (data[0] == null || data[2] == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      boolean overriden=false;
      if (acceptCreateOverwrites) {
        caseForBlock=retrieve(caseId);
        if (caseForBlock != null) {
          caseForBlock.setName(data[2]);
          caseForBlock.setTypeId(data[0]);
          overriden=true;
        }
      }
      if (caseForBlock == null) {
        caseForBlock=CreateCase(data[2],data[0]);
        caseForBlock.setCaseId(caseId);
        caseForBlock.setDateOpened(modified);
      }
      if (data[1] != null) {
        caseForBlock.setUserId(data[1]);
      }
      create=true;
      String succesfulAction=overriden ? ""String_Node_Str"" : ""String_Node_Str"";
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      if (caseForBlock == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String key=parser.getName();
        String value=parser.nextText().trim();
        if (key.equals(""String_Node_Str"")) {
          caseForBlock.setTypeId(value);
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setName(value);
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setDateOpened(DateUtils.parseDate(value));
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setUserId(value);
        }
 else {
          caseForBlock.setProperty(key,value);
        }
      }
      update=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      if (caseForBlock == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      caseForBlock.setClosed(true);
      commit(caseForBlock);
      close=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String indexName=parser.getName();
        String caseType=parser.getAttributeValue(null,""String_Node_Str"");
        String value=parser.nextText().trim();
        if (value.equals(caseId)) {
          throw new InvalidStructureException(""String_Node_Str"" + caseId + ""String_Node_Str"",parser);
        }
        if (value.equals(""String_Node_Str"")) {
          value=null;
        }
        String relationship=parser.getAttributeValue(null,""String_Node_Str"");
        if (relationship == null) {
          relationship=CaseIndex.RELATIONSHIP_CHILD;
        }
        if (value == null) {
          caseForBlock.removeIndex(indexName);
        }
 else {
          caseForBlock.setIndex(new CaseIndex(indexName,caseType,value,relationship));
        }
      }
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String attachmentName=parser.getName();
        String src=parser.getAttributeValue(null,""String_Node_Str"");
        String from=parser.getAttributeValue(null,""String_Node_Str"");
        String fileName=parser.getAttributeValue(null,""String_Node_Str"");
        if ((src == null || ""String_Node_Str"".equals(src)) && (from == null || ""String_Node_Str"".equals(from))) {
          this.removeAttachment(caseForBlock,attachmentName);
          caseForBlock.removeAttachment(attachmentName);
          continue;
        }
        String reference=this.processAttachment(src,from,fileName,parser);
        if (reference != null) {
          caseForBlock.updateAttachment(attachmentName,reference);
        }
      }
    }
  }
  if (caseForBlock != null) {
    caseForBlock.setLastModified(modified);
    commit(caseForBlock);
  }
  if (create) {
    tallies[0]++;
  }
 else   if (close) {
    tallies[2]++;
  }
 else   if (update) {
    tallies[1]++;
  }
  return null;
}","public Case parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(""String_Node_Str"");
  String caseId=parser.getAttributeValue(null,""String_Node_Str"");
  if (caseId == null || caseId.equals(""String_Node_Str"")) {
    throw new InvalidStructureException(""String_Node_Str"",this.parser);
  }
  String dateModified=parser.getAttributeValue(null,""String_Node_Str"");
  if (dateModified == null) {
    throw new InvalidStructureException(""String_Node_Str"",this.parser);
  }
  Date modified=DateUtils.parseDateTime(dateModified);
  boolean create=false;
  boolean update=false;
  boolean close=false;
  Case caseForBlock=null;
  while (this.nextTagInBlock(""String_Node_Str"")) {
    String action=parser.getName().toLowerCase();
    if (action.equals(""String_Node_Str"")) {
      String[] data=new String[3];
      while (this.nextTagInBlock(""String_Node_Str"")) {
        if (parser.getName().equals(""String_Node_Str"")) {
          data[0]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[1]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[2]=parser.nextText().trim();
        }
 else {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
      }
      if (data[0] == null || data[2] == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      boolean overriden=false;
      if (acceptCreateOverwrites) {
        caseForBlock=retrieve(caseId);
        if (caseForBlock != null) {
          caseForBlock.setName(data[2]);
          caseForBlock.setTypeId(data[0]);
          overriden=true;
        }
      }
      if (caseForBlock == null) {
        caseForBlock=CreateCase(data[2],data[0]);
        caseForBlock.setCaseId(caseId);
        caseForBlock.setDateOpened(modified);
      }
      if (data[1] != null) {
        caseForBlock.setUserId(data[1]);
      }
      create=true;
      String succesfulAction=overriden ? ""String_Node_Str"" : ""String_Node_Str"";
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      if (caseForBlock == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String key=parser.getName();
        String value=parser.nextText().trim();
        if (key.equals(""String_Node_Str"")) {
          caseForBlock.setTypeId(value);
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setName(value);
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setDateOpened(DateUtils.parseDate(value));
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setUserId(value);
        }
 else {
          caseForBlock.setProperty(key,value);
        }
      }
      update=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      if (caseForBlock == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      caseForBlock.setClosed(true);
      commit(caseForBlock);
      close=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String indexName=parser.getName();
        String caseType=parser.getAttributeValue(null,""String_Node_Str"");
        String relationship=parser.getAttributeValue(null,""String_Node_Str"");
        if (relationship == null) {
          relationship=CaseIndex.RELATIONSHIP_CHILD;
        }
        String value=parser.nextText().trim();
        if (value.equals(caseId)) {
          throw new InvalidStructureException(""String_Node_Str"" + caseId + ""String_Node_Str"",parser);
        }
        if (value.equals(""String_Node_Str"")) {
          value=null;
        }
        if (value == null) {
          caseForBlock.removeIndex(indexName);
        }
 else {
          caseForBlock.setIndex(new CaseIndex(indexName,caseType,value,relationship));
        }
      }
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String attachmentName=parser.getName();
        String src=parser.getAttributeValue(null,""String_Node_Str"");
        String from=parser.getAttributeValue(null,""String_Node_Str"");
        String fileName=parser.getAttributeValue(null,""String_Node_Str"");
        if ((src == null || ""String_Node_Str"".equals(src)) && (from == null || ""String_Node_Str"".equals(from))) {
          this.removeAttachment(caseForBlock,attachmentName);
          caseForBlock.removeAttachment(attachmentName);
          continue;
        }
        String reference=this.processAttachment(src,from,fileName,parser);
        if (reference != null) {
          caseForBlock.updateAttachment(attachmentName,reference);
        }
      }
    }
  }
  if (caseForBlock != null) {
    caseForBlock.setLastModified(modified);
    commit(caseForBlock);
  }
  if (create) {
    tallies[0]++;
  }
 else   if (close) {
    tallies[2]++;
  }
 else   if (update) {
    tallies[1]++;
  }
  return null;
}",0.950199927299164
146677,"public Vector getChildrenWithName(String name){
  Vector children=super.getChildrenWithName(CaseChildElement.this.parent.intern(name));
  if (!done[0]) {
    return children;
  }
  if (children.size() == 0) {
    TreeElement emptyNode=new TreeElement(name);
    emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
    this.addChild(emptyNode);
    emptyNode.setParent(this);
    children.addElement(emptyNode);
  }
  return children;
}","public Vector getChildrenWithName(String name){
  Vector children=super.getChildrenWithName(CaseChildElement.this.parent.intern(name));
  if (!done[0]) {
    return children;
  }
  if (children.size() == 0) {
    TreeElement emptyNode=new TreeElement(name);
    emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
    emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
    this.addChild(emptyNode);
    emptyNode.setParent(this);
    children.addElement(emptyNode);
  }
  return children;
}",0.9276859504132232
146678,"private TreeElement cache(){
  if (recordId == TreeReference.INDEX_TEMPLATE) {
    return empty;
  }
synchronized (parent.treeCache) {
    TreeElement element=parent.treeCache.retrieve(recordId);
    if (element != null) {
      return element;
    }
    if (recordId == -1) {
      Vector<Integer> ids=parent.storage.getIDsForValue(""String_Node_Str"",caseId);
      recordId=ids.elementAt(0).intValue();
    }
    TreeElement cacheBuilder=new TreeElement(""String_Node_Str"");
    Case c=parent.getCase(recordId);
    caseId=c.getCaseId();
    cacheBuilder=new TreeElement(""String_Node_Str"");
    cacheBuilder.setMult(this.mult);
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getCaseId());
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getTypeId());
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.isClosed() ? ""String_Node_Str"" : ""String_Node_Str"");
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getUserId() == null ? ""String_Node_Str"" : c.getUserId());
    final boolean[] done=new boolean[]{false};
    if (!parent.reportMode) {
      TreeElement scratch=new TreeElement(""String_Node_Str"");
      String name=c.getName();
      scratch.setAnswer(new StringData(name == null ? ""String_Node_Str"" : name));
      cacheBuilder.addChild(scratch);
      scratch=new TreeElement(""String_Node_Str"");
      scratch.setAnswer(new DateData(c.getDateOpened()));
      cacheBuilder.addChild(scratch);
      scratch=new TreeElement(LAST_MODIFIED_KEY);
      scratch.setAnswer(new DateData(c.getLastModified()));
      cacheBuilder.addChild(scratch);
      for (Enumeration en=c.getProperties().keys(); en.hasMoreElements(); ) {
        String key=(String)en.nextElement();
        if (LAST_MODIFIED_KEY.equals(key)) {
          continue;
        }
        scratch=new TreeElement(parent.intern(key));
        Object temp=c.getProperty(key);
        if (temp instanceof String) {
          scratch.setValue(new UncastData((String)temp));
        }
 else {
          scratch.setValue(PreloadUtils.wrapIndeterminedObject(temp));
        }
        cacheBuilder.addChild(scratch);
      }
      TreeElement index=new TreeElement(""String_Node_Str""){
        public TreeElement getChild(        String name,        int multiplicity){
          TreeElement child=super.getChild(CaseChildElement.this.parent.intern(name),multiplicity);
          if (!done[0]) {
            return child;
          }
          if (multiplicity >= 0 && child == null) {
            TreeElement emptyNode=new TreeElement(CaseChildElement.this.parent.intern(name));
            emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            return emptyNode;
          }
          return child;
        }
        public Vector getChildrenWithName(        String name){
          Vector children=super.getChildrenWithName(CaseChildElement.this.parent.intern(name));
          if (!done[0]) {
            return children;
          }
          if (children.size() == 0) {
            TreeElement emptyNode=new TreeElement(name);
            emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            children.addElement(emptyNode);
          }
          return children;
        }
      }
;
      Vector<CaseIndex> indices=c.getIndices();
      for (      CaseIndex i : indices) {
        scratch=new TreeElement(i.getName());
        scratch.setAttribute(null,""String_Node_Str"",this.parent.intern(i.getTargetType()));
        scratch.setValue(new UncastData(i.getTarget()));
        index.addChild(scratch);
      }
      cacheBuilder.addChild(index);
      TreeElement attachments=new TreeElement(""String_Node_Str""){
        public TreeElement getChild(        String name,        int multiplicity){
          TreeElement child=super.getChild(CaseChildElement.this.parent.intern(name),multiplicity);
          if (!done[0]) {
            return child;
          }
          if (multiplicity >= 0 && child == null) {
            TreeElement emptyNode=new TreeElement(CaseChildElement.this.parent.intern(name));
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            return emptyNode;
          }
          return child;
        }
      }
;
      for (      String attachment : c.getAttachments()) {
        scratch=new TreeElement(attachment);
        scratch.setValue(new UncastData(c.getAttachmentSource(attachment)));
        attachments.addChild(scratch);
      }
      cacheBuilder.addChild(attachments);
    }
    cacheBuilder.setParent(this.parent);
    done[0]=true;
    parent.treeCache.register(recordId,cacheBuilder);
    return cacheBuilder;
  }
}","private TreeElement cache(){
  if (recordId == TreeReference.INDEX_TEMPLATE) {
    return empty;
  }
synchronized (parent.treeCache) {
    TreeElement element=parent.treeCache.retrieve(recordId);
    if (element != null) {
      return element;
    }
    if (recordId == -1) {
      Vector<Integer> ids=parent.storage.getIDsForValue(""String_Node_Str"",caseId);
      recordId=ids.elementAt(0).intValue();
    }
    TreeElement cacheBuilder=new TreeElement(""String_Node_Str"");
    Case c=parent.getCase(recordId);
    caseId=c.getCaseId();
    cacheBuilder=new TreeElement(""String_Node_Str"");
    cacheBuilder.setMult(this.mult);
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getCaseId());
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getTypeId());
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.isClosed() ? ""String_Node_Str"" : ""String_Node_Str"");
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getUserId() == null ? ""String_Node_Str"" : c.getUserId());
    final boolean[] done=new boolean[]{false};
    if (!parent.reportMode) {
      TreeElement scratch=new TreeElement(""String_Node_Str"");
      String name=c.getName();
      scratch.setAnswer(new StringData(name == null ? ""String_Node_Str"" : name));
      cacheBuilder.addChild(scratch);
      scratch=new TreeElement(""String_Node_Str"");
      scratch.setAnswer(new DateData(c.getDateOpened()));
      cacheBuilder.addChild(scratch);
      scratch=new TreeElement(LAST_MODIFIED_KEY);
      scratch.setAnswer(new DateData(c.getLastModified()));
      cacheBuilder.addChild(scratch);
      for (Enumeration en=c.getProperties().keys(); en.hasMoreElements(); ) {
        String key=(String)en.nextElement();
        if (LAST_MODIFIED_KEY.equals(key)) {
          continue;
        }
        scratch=new TreeElement(parent.intern(key));
        Object temp=c.getProperty(key);
        if (temp instanceof String) {
          scratch.setValue(new UncastData((String)temp));
        }
 else {
          scratch.setValue(PreloadUtils.wrapIndeterminedObject(temp));
        }
        cacheBuilder.addChild(scratch);
      }
      TreeElement index=new TreeElement(""String_Node_Str""){
        public TreeElement getChild(        String name,        int multiplicity){
          TreeElement child=super.getChild(CaseChildElement.this.parent.intern(name),multiplicity);
          if (!done[0]) {
            return child;
          }
          if (multiplicity >= 0 && child == null) {
            TreeElement emptyNode=new TreeElement(CaseChildElement.this.parent.intern(name));
            emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
            emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            return emptyNode;
          }
          return child;
        }
        public Vector getChildrenWithName(        String name){
          Vector children=super.getChildrenWithName(CaseChildElement.this.parent.intern(name));
          if (!done[0]) {
            return children;
          }
          if (children.size() == 0) {
            TreeElement emptyNode=new TreeElement(name);
            emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
            emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            children.addElement(emptyNode);
          }
          return children;
        }
      }
;
      Vector<CaseIndex> indices=c.getIndices();
      for (      CaseIndex i : indices) {
        scratch=new TreeElement(i.getName());
        scratch.setAttribute(null,""String_Node_Str"",this.parent.intern(i.getTargetType()));
        scratch.setAttribute(null,""String_Node_Str"",this.parent.intern(i.getRelationship()));
        scratch.setValue(new UncastData(i.getTarget()));
        index.addChild(scratch);
      }
      cacheBuilder.addChild(index);
      TreeElement attachments=new TreeElement(""String_Node_Str""){
        public TreeElement getChild(        String name,        int multiplicity){
          TreeElement child=super.getChild(CaseChildElement.this.parent.intern(name),multiplicity);
          if (!done[0]) {
            return child;
          }
          if (multiplicity >= 0 && child == null) {
            TreeElement emptyNode=new TreeElement(CaseChildElement.this.parent.intern(name));
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            return emptyNode;
          }
          return child;
        }
      }
;
      for (      String attachment : c.getAttachments()) {
        scratch=new TreeElement(attachment);
        scratch.setValue(new UncastData(c.getAttachmentSource(attachment)));
        attachments.addChild(scratch);
      }
      cacheBuilder.addChild(attachments);
    }
    cacheBuilder.setParent(this.parent);
    done[0]=true;
    parent.treeCache.register(recordId,cacheBuilder);
    return cacheBuilder;
  }
}",0.9583418419440474
146679,"/** 
 * Rebase assigns this tree element to a new root instance node. Used to migrate the already created tree structure to a new instance connector.
 * @param instanceRoot The root of the new tree that this element should be a part of
 */
public void rebase(AbstractTreeElement instanceRoot){
  this.instanceRoot=instanceRoot;
  expireCachedRef();
}","/** 
 * Rebase assigns this tree element to a new root instance node. Used to migrate the already created tree structure to a new instance connector.
 * @param instanceRoot The root of the new tree that this element should be a part of//     
 */
public void rebase(AbstractTreeElement instanceRoot){
  this.instanceRoot=instanceRoot;
  expireCachedRef();
}",0.99009900990099
146680,"@Override public Object eval(FormInstance model,EvaluationContext ec){
  try {
    return expr.evalRaw(model,ec);
  }
 catch (  XPathException e) {
    e.setSource(""String_Node_Str"" + contextRef.toString(true));
    throw e;
  }
}","public Object eval(FormInstance model,EvaluationContext ec){
  try {
    return expr.evalRaw(model,ec);
  }
 catch (  XPathException e) {
    e.setSource(""String_Node_Str"" + contextRef.toString(true));
    throw e;
  }
}",0.9777777777777776
146681,"@Override public boolean canCascade(){
  return true;
}","public boolean canCascade(){
  return true;
}",0.9
146682,"@Override public void apply(TreeReference ref,Object result,FormInstance model,FormDef f){
  int dataType=f.getMainInstance().resolveReference(ref).getDataType();
  f.setAnswer(wrapData(result,dataType),ref);
}","public void apply(TreeReference ref,Object result,FormInstance model,FormDef f){
  int dataType=f.getMainInstance().resolveReference(ref).getDataType();
  f.setAnswer(wrapData(result,dataType),ref);
}",0.975609756097561
146683,"@Override public String getDebugLabel(){
  return ""String_Node_Str"";
}","public String getDebugLabel(){
  return ""String_Node_Str"";
}",0.9230769230769232
146684,"/** 
 * Creates a new factory for processing incoming XML.
 * @param tolerant True if processing should fail in the event of conflicting data,false if processing should proceed as long as it is possible.
 */
public J2METransactionParserFactory(boolean tolerant){
  super(new J2MESandbox());
  syncToken=null;
  caseTallies=new int[3];
  this.tolerant=tolerant;
}","/** 
 * Creates a new factory for processing incoming XML.
 * @param tolerant True if processing should fail in the event of conflicting data,false if processing should proceed as long as it is possible.
 */
public J2METransactionParserFactory(boolean tolerant){
  super(new J2MESandbox());
  caseTallies=new int[3];
  this.tolerant=tolerant;
}",0.9745042492917848
146685,"/** 
 * Copy constructor
 */
public ExternalDataInstance(ExternalDataInstance instance){
  super(instance.getInstanceId());
  this.reference=instance.getReference();
  this.base=instance.getBase();
  this.root=instance.getRoot();
}","/** 
 * Copy constructor
 */
public ExternalDataInstance(ExternalDataInstance instance){
  super(instance.getInstanceId());
  this.reference=instance.getReference();
  this.base=instance.getBase();
  this.root=instance.getRoot();
  this.mCacheHost=instance.getCacheHost();
}",0.9148514851485148
146686,"public void processAction(FormDef model,TreeReference contextRef){
  TreeReference qualifiedReference=contextRef == null ? target : target.contextualize(contextRef);
  if (contextRef != null) {
    if (!contextRef.isParentOf(qualifiedReference,false)) {
      return;
    }
  }
  EvaluationContext context=new EvaluationContext(model.getEvaluationContext(),qualifiedReference);
  Object result;
  if (explicitValue != null) {
    result=explicitValue;
  }
 else {
    result=XPathFuncExpr.unpack(value.eval(model.getMainInstance(),context));
  }
  String failMessage=""String_Node_Str"" + target.toString(true) + ""String_Node_Str"";
  if (qualifiedReference.hasPredicates()) {
    Vector<TreeReference> references=context.expandReference(qualifiedReference);
    if (references.size() == 0) {
      throw new NullPointerException(failMessage);
    }
 else     if (references.size() > 1) {
      throw new XPathTypeMismatchException(""String_Node_Str"" + XPathNodeset.printNodeContents(references) + ""String_Node_Str"");
    }
 else {
      qualifiedReference=references.elementAt(0);
    }
  }
  AbstractTreeElement node=context.resolveReference(qualifiedReference);
  if (node == null) {
    throw new NullPointerException(failMessage);
  }
  int dataType=node.getDataType();
  IAnswerData val=Recalculate.wrapData(result,dataType);
  model.setValue(val == null ? null : AnswerDataFactory.templateByDataType(dataType).cast(val.uncast()),qualifiedReference);
}","public void processAction(FormDef model,TreeReference contextRef){
  TreeReference qualifiedReference=contextRef == null ? target : target.contextualize(contextRef);
  if (contextRef != null) {
    if (!contextRef.isParentOf(qualifiedReference,false)) {
      return;
    }
  }
  EvaluationContext context=new EvaluationContext(model.getEvaluationContext(),qualifiedReference);
  String failMessage=""String_Node_Str"" + target.toString(true) + ""String_Node_Str"";
  if (qualifiedReference.hasPredicates()) {
    Vector<TreeReference> references=context.expandReference(qualifiedReference,true);
    if (references.size() == 0) {
      throw new NullPointerException(failMessage);
    }
 else     if (references.size() > 1) {
      TreeReference singleFullyQualifiedRef=null;
      for (      TreeReference ref : references) {
        if (!ref.isTemplateRef()) {
          if (singleFullyQualifiedRef == null) {
            singleFullyQualifiedRef=ref;
          }
 else {
            throw new XPathTypeMismatchException(""String_Node_Str"" + XPathNodeset.printNodeContents(references) + ""String_Node_Str"");
          }
        }
      }
      if (singleFullyQualifiedRef == null) {
        return;
      }
    }
 else {
      qualifiedReference=references.elementAt(0);
    }
  }
  if (qualifiedReference.isTemplateRef()) {
    return;
  }
  AbstractTreeElement node=context.resolveReference(qualifiedReference);
  if (node == null) {
    if (model.getMainInstance().hasTemplatePath(target)) {
      return;
    }
 else {
      throw new NullPointerException(failMessage);
    }
  }
  Object result;
  if (explicitValue != null) {
    result=explicitValue;
  }
 else {
    result=XPathFuncExpr.unpack(value.eval(model.getMainInstance(),context));
  }
  int dataType=node.getDataType();
  IAnswerData val=Recalculate.wrapData(result,dataType);
  model.setValue(val == null ? null : AnswerDataFactory.templateByDataType(dataType).cast(val.uncast()),qualifiedReference);
}",0.4467836257309941
146687,"/** 
 * Take in a value (only a string for now, TODO: Extend?) that doesn't have any type information and attempt to infer a more specific type that may assist in equality or comparison operations
 * @param attrValue A typeless data object
 * @return The passed in object in as specific of a type as was able tobe identified.
 */
public static Object InferType(String attrValue){
  try {
    return new Double(Double.parseDouble(attrValue));
  }
 catch (  NumberFormatException ife) {
  }
  return attrValue;
}","/** 
 * Take in a value (only a string for now, TODO: Extend?) that doesn't have any type information and attempt to infer a more specific type that may assist in equality or comparison operations
 * @param attrValue A typeless data object
 * @return The passed in object in as specific of a type as was able tobe identified.
 */
public static Object InferType(String attrValue){
  Double d=mDoubleParseCache.retrieve(attrValue);
  if (d != null) {
    if (d.isNaN()) {
      return attrValue;
    }
 else {
      return d;
    }
  }
  try {
    Double ret=new Double(Double.parseDouble(attrValue));
    mDoubleParseCache.register(attrValue,ret);
    return ret;
  }
 catch (  NumberFormatException ife) {
    mDoubleParseCache.register(attrValue,new Double(Double.NaN));
  }
  return attrValue;
}",0.7651109410864575
146688,"public void doTests(){
  EvaluationContext ec=getFunctionHandlers();
  FormInstance instance=createTestInstance();
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",instance,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",instance,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new Double(5.0));
  testEval(""String_Node_Str"",null,null,new Double(555555.555));
  testEval(""String_Node_Str"",null,null,new Double(0.000555));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-5.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.23e21));
  testEval(""String_Node_Str"",null,null,new Double(1.23e-18));
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(100.0));
  testEval(""String_Node_Str"",null,null,new Double(100.001));
  testEval(""String_Node_Str"",null,null,new Double(0.1001));
  testEval(""String_Node_Str"",null,null,new Double(1.23e21));
  testEval(""String_Node_Str"",null,null,new Double(1.23e-18));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(-12345.6789));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(10.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(-123.5));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.POSITIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NEGATIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(14127.0));
  testEval(""String_Node_Str"",null,null,new Double(-10252.0));
  testEval(""String_Node_Str"",null,ec,new Double(5.0));
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(2000,1,1));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1945,4,26));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1996,2,29));
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,1));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,7));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,2));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1969,12,31));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(2008,9,5));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1941,12,7));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1989,11,9));
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(5.0));
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new Double(0.5));
  testEval(""String_Node_Str"",null,null,new Double(5.5));
  testEval(""String_Node_Str"",null,null,DateUtils.parseDate(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new Double(11.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.7));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(-4.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-40.0));
  testEval(""String_Node_Str"",null,null,new Double(-19.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.21));
  testEval(""String_Node_Str"",null,null,new Double(2.5));
  testEval(""String_Node_Str"",null,null,new Double(1.5));
  testEval(""String_Node_Str"",null,null,new Double(12.0));
  testEval(""String_Node_Str"",null,null,new Double(Double.POSITIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NEGATIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.9));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-2.0));
  testEval(""String_Node_Str"",null,null,new Double(-2.0));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(65.0));
  testEval(""String_Node_Str"",null,null,new Double(56088.0));
  testEval(""String_Node_Str"",null,null,new Double(9.0));
  testEval(""String_Node_Str"",null,null,new Double(9104.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(3.5));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-5.0));
  testEval(""String_Node_Str"",null,null,new Double(100.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(11.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"" + Math.E + ""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(4.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(6.25));
  testEval(""String_Node_Str"",null,null,new Double(.25));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new Double(-3.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,new Double(8.0));
  testEval(""String_Node_Str"",null,ec,new Double(3.0));
  testEval(""String_Node_Str"",null,ec,new XPathArityException());
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,new XPathArityException());
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  EvaluationContext varContext=getVariableContext();
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  testEval(""String_Node_Str"",null,varContext,""String_Node_Str"");
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  String wildcardIndex=""String_Node_Str"";
  String indexOne=""String_Node_Str"";
  String indexTwo=""String_Node_Str"";
  XPathPathExpr expr=XPathReference.getPathExpr(wildcardIndex);
  XPathPathExpr expr2=XPathReference.getPathExpr(indexOne);
  XPathPathExpr expr3=XPathReference.getPathExpr(indexTwo);
  if (!expr.matches(expr2)) {
    fail(""String_Node_Str"" + wildcardIndex + ""String_Node_Str""+ indexOne);
  }
  if (!expr2.matches(expr)) {
    fail(""String_Node_Str"" + indexOne + ""String_Node_Str""+ wildcardIndex);
  }
  if (expr2.matches(expr3)) {
    fail(""String_Node_Str"" + indexOne + ""String_Node_Str""+ indexTwo);
  }
  try {
    testEval(""String_Node_Str"",null,ec,new XPathUnhandledException());
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException npe) {
  }
  ec.addFunctionHandler(read);
  ec.addFunctionHandler(write);
  read.val=""String_Node_Str"";
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  if (!""String_Node_Str"".equals(write.val)) {
    fail(""String_Node_Str"");
  }
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new IntegerData(17));
  addDataRef(instance,""String_Node_Str"",new IntegerData(5));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  testEval(""String_Node_Str"",instance,null,""String_Node_Str"");
  testEval(""String_Node_Str"",instance,null,new Double(17.0));
  testEval(""String_Node_Str"",instance,null,new Double(5.0));
  testEval(""String_Node_Str"",instance,null,new Double(2));
  testEval(""String_Node_Str"",instance,null,new Double(2));
  testEval(""String_Node_Str"",instance,null,new Double(2));
  testEval(""String_Node_Str"",instance,null,new Double(1));
  testEval(""String_Node_Str"",instance,null,new Double(0));
  testEval(""String_Node_Str"",instance,null,new Double(1));
}","@Test public void doTests(){
  EvaluationContext ec=getFunctionHandlers();
  FormInstance instance=createTestInstance();
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",instance,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",instance,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new Double(5.0));
  testEval(""String_Node_Str"",null,null,new Double(555555.555));
  testEval(""String_Node_Str"",null,null,new Double(0.000555));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-5.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.23e21));
  testEval(""String_Node_Str"",null,null,new Double(1.23e-18));
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(100.0));
  testEval(""String_Node_Str"",null,null,new Double(100.001));
  testEval(""String_Node_Str"",null,null,new Double(0.1001));
  testEval(""String_Node_Str"",null,null,new Double(1.23e21));
  testEval(""String_Node_Str"",null,null,new Double(1.23e-18));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(-12345.6789));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(10.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(-123.5));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.POSITIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NEGATIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(14127.0));
  testEval(""String_Node_Str"",null,null,new Double(-10252.0));
  testEval(""String_Node_Str"",null,ec,new Double(5.0));
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(2000,1,1));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1945,4,26));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1996,2,29));
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,1));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,7));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,2));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1969,12,31));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(2008,9,5));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1941,12,7));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1989,11,9));
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(5.0));
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new Double(0.5));
  testEval(""String_Node_Str"",null,null,new Double(5.5));
  testEval(""String_Node_Str"",null,null,DateUtils.parseDate(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new Double(11.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.7));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(-4.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-40.0));
  testEval(""String_Node_Str"",null,null,new Double(-19.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.21));
  testEval(""String_Node_Str"",null,null,new Double(2.5));
  testEval(""String_Node_Str"",null,null,new Double(1.5));
  testEval(""String_Node_Str"",null,null,new Double(12.0));
  testEval(""String_Node_Str"",null,null,new Double(Double.POSITIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NEGATIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.9));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-2.0));
  testEval(""String_Node_Str"",null,null,new Double(-2.0));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(65.0));
  testEval(""String_Node_Str"",null,null,new Double(56088.0));
  testEval(""String_Node_Str"",null,null,new Double(9.0));
  testEval(""String_Node_Str"",null,null,new Double(9104.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(3.5));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-5.0));
  testEval(""String_Node_Str"",null,null,new Double(100.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(11.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"" + Math.E + ""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(4.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(6.25));
  testEval(""String_Node_Str"",null,null,new Double(.25));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new Double(-3.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,new Double(8.0));
  testEval(""String_Node_Str"",null,ec,new Double(3.0));
  testEval(""String_Node_Str"",null,ec,new XPathArityException());
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,new XPathArityException());
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  EvaluationContext varContext=getVariableContext();
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  testEval(""String_Node_Str"",null,varContext,""String_Node_Str"");
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  String wildcardIndex=""String_Node_Str"";
  String indexOne=""String_Node_Str"";
  String indexTwo=""String_Node_Str"";
  XPathPathExpr expr=XPathReference.getPathExpr(wildcardIndex);
  XPathPathExpr expr2=XPathReference.getPathExpr(indexOne);
  XPathPathExpr expr3=XPathReference.getPathExpr(indexTwo);
  if (!expr.matches(expr2)) {
    fail(""String_Node_Str"" + wildcardIndex + ""String_Node_Str""+ indexOne);
  }
  if (!expr2.matches(expr)) {
    fail(""String_Node_Str"" + indexOne + ""String_Node_Str""+ wildcardIndex);
  }
  if (expr2.matches(expr3)) {
    fail(""String_Node_Str"" + indexOne + ""String_Node_Str""+ indexTwo);
  }
  try {
    testEval(""String_Node_Str"",null,ec,new XPathUnhandledException());
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException npe) {
  }
  ec.addFunctionHandler(read);
  ec.addFunctionHandler(write);
  read.val=""String_Node_Str"";
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  if (!""String_Node_Str"".equals(write.val)) {
    fail(""String_Node_Str"");
  }
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new IntegerData(17));
  addDataRef(instance,""String_Node_Str"",new IntegerData(5));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  testEval(""String_Node_Str"",instance,null,""String_Node_Str"");
  testEval(""String_Node_Str"",instance,null,new Double(17.0));
  testEval(""String_Node_Str"",instance,null,new Double(5.0));
  testEval(""String_Node_Str"",instance,null,new Double(2));
  testEval(""String_Node_Str"",instance,null,new Double(2));
  testEval(""String_Node_Str"",instance,null,new Double(2));
  testEval(""String_Node_Str"",instance,null,new Double(1));
  testEval(""String_Node_Str"",instance,null,new Double(0));
  testEval(""String_Node_Str"",instance,null,new Double(1));
}",0.9998586239396796
146689,"/** 
 * Given an array of details, count their total number of fields.
 * @return int
 */
private int getFlattenedFieldCount(){
  Detail[] details=this.getFlattenedDetails();
  int count=0;
  for (int i=0; i < details.length; i++) {
    count+=details[i].getFields().length;
  }
  return count;
}","/** 
 * Given an array of details, count their total number of fields.
 * @return int
 */
public int getFlattenedFieldCount(){
  Detail[] details=this.getFlattenedDetails();
  int count=0;
  for (int i=0; i < details.length; i++) {
    count+=details[i].getFields().length;
  }
  return count;
}",0.9813874788494078
146690,"/** 
 * Makes some (or all) of the table's resources available
 * @param master       The global resource to prepare against. Used toestablish whether resources need to be fetched remotely
 * @param instance     The instance (version and profile) to prepare against
 * @param toInitialize The ID of a single resource after which the tablepreparation can stop.
 * @throws UnresolvedResourceException       Required resource couldn't beidentified
 * @throws UnfullfilledRequirementsException resource(s) incompatible withcurrent CommCare version
 */
public void prepareResources(ResourceTable master,CommCareInstance instance,String toInitialize) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  Stack<Resource> unreadyResources=getUnreadyResources();
  while (idNeedsInit(toInitialize) && !unreadyResources.isEmpty()) {
    for (    Resource r : unreadyResources) {
      boolean upgrade=false;
      Vector<Reference> invalid=new Vector<Reference>();
      if (master != null) {
        Resource peer=master.getResourceWithId(r.getResourceId());
        if (peer != null) {
          if (!r.isNewer(peer)) {
            peer.mimick(r);
            commit(peer,Resource.RESOURCE_STATUS_INSTALLED);
            continue;
          }
          upgrade=true;
          invalid=ResourceTable.gatherResourcesLocalRefs(peer,master);
        }
      }
      findResourceLocationAndInstall(r,invalid,upgrade,instance,master);
      if (stateListener != null) {
        stateListener.resourceStateUpdated(this);
      }
    }
    unreadyResources=getUnreadyResources();
  }
  if (toInitialize != null) {
    return;
  }
  for (  Resource stillPending : getResourcesWithStatus(Resource.RESOURCE_STATUS_PENDING)) {
    this.removeResource(stillPending);
  }
}","/** 
 * Makes some (or all) of the table's resources available
 * @param master       The global resource to prepare against. Used toestablish whether resources need to be fetched remotely
 * @param instance     The instance (version and profile) to prepare against
 * @param toInitialize The ID of a single resource after which the tablepreparation can stop.
 * @throws UnresolvedResourceException       Required resource couldn't beidentified
 * @throws UnfullfilledRequirementsException resource(s) incompatible withcurrent CommCare version
 */
public void prepareResources(ResourceTable master,CommCareInstance instance,String toInitialize) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  Vector<Resource> unreadyResources=getUnreadyResources();
  while (idNeedsInit(toInitialize) && !unreadyResources.isEmpty()) {
    for (    Resource r : unreadyResources) {
      boolean upgrade=false;
      Vector<Reference> invalid=new Vector<Reference>();
      if (master != null) {
        Resource peer=master.getResourceWithId(r.getResourceId());
        if (peer != null) {
          if (!r.isNewer(peer)) {
            peer.mimick(r);
            commit(peer,Resource.RESOURCE_STATUS_INSTALLED);
            continue;
          }
          upgrade=true;
          invalid=ResourceTable.gatherResourcesLocalRefs(peer,master);
        }
      }
      findResourceLocationAndInstall(r,invalid,upgrade,instance,master);
      if (stateListener != null) {
        stateListener.resourceStateUpdated(this);
      }
    }
    unreadyResources=getUnreadyResources();
  }
  if (toInitialize != null) {
    return;
  }
  for (  Resource stillPending : getResourcesWithStatus(Resource.RESOURCE_STATUS_PENDING)) {
    this.removeResource(stillPending);
  }
}",0.9968970380818054
146691,"public static void parseAndAdd(OrderedHashtable locale,String line,int curline){
  line=line.trim();
  int i=0;
  int dec=line.length();
  while ((i=LocalizationUtils.lastIndexOf(line.substring(0,dec),""String_Node_Str"")) != -1) {
    if ((i != 0) && !(line.charAt(i - 1) == '\\')) {
      line=line.substring(0,i);
      dec=line.length();
    }
 else {
      dec=i;
    }
  }
  if (line.indexOf('=') == -1) {
    if (line.trim().equals(""String_Node_Str"")) {
    }
 else {
      System.out.println(""String_Node_Str"" + curline + ""String_Node_Str""+ line);
    }
  }
 else {
    if (line.indexOf('=') != line.length() - 1) {
      String value=line.substring(line.indexOf('=') + 1,line.length());
      locale.put(line.substring(0,line.indexOf('=')),parseValue(value));
    }
 else {
      System.out.println(""String_Node_Str"" + curline + ""String_Node_Str""+ line+ ""String_Node_Str"");
    }
  }
}","public static void parseAndAdd(OrderedHashtable locale,String line,int curline){
  line=line.trim();
  int i=0;
  int dec=line.length();
  while ((i=LocalizationUtils.lastIndexOf(line.substring(0,dec),""String_Node_Str"")) != -1) {
    if ((i == 0) || !(line.charAt(i - 1) == '\\')) {
      line=line.substring(0,i);
      dec=line.length();
    }
 else {
      dec=i;
    }
  }
  if (line.indexOf('=') == -1) {
    if (line.trim().equals(""String_Node_Str"")) {
    }
 else {
      System.out.println(""String_Node_Str"" + curline + ""String_Node_Str""+ line);
    }
  }
 else {
    if (line.indexOf('=') != line.length() - 1) {
      String value=line.substring(line.indexOf('=') + 1,line.length());
      locale.put(line.substring(0,line.indexOf('=')),parseValue(value));
    }
 else {
      System.out.println(""String_Node_Str"" + curline + ""String_Node_Str""+ line+ ""String_Node_Str"");
    }
  }
}",0.9966367713004484
146692,"public CaseChildElement getChild(String name,int multiplicity){
  if ((multiplicity == TreeReference.INDEX_TEMPLATE) && ""String_Node_Str"".equals(name)) {
    return CaseChildElement.TemplateElement(this);
  }
  if (name.equals(""String_Node_Str"")) {
    getCases();
    if (cases.size() == 0) {
      return CaseChildElement.TemplateElement(this);
    }
    return cases.elementAt(multiplicity);
  }
  return null;
}","public CaseChildElement getChild(String name,int multiplicity){
  if ((multiplicity == TreeReference.INDEX_TEMPLATE) && ""String_Node_Str"".equals(name)) {
    return null;
  }
  if (name.equals(""String_Node_Str"")) {
    getCases();
    if (cases.size() == 0) {
      return CaseChildElement.TemplateElement(this);
    }
    return cases.elementAt(multiplicity);
  }
  return null;
}",0.9472361809045228
146693,"public LedgerChildElement getChild(String name,int multiplicity){
  if ((multiplicity == TreeReference.INDEX_TEMPLATE) && ""String_Node_Str"".equals(name)) {
    return LedgerChildElement.TemplateElement(this);
  }
  if (name.equals(LedgerChildElement.NAME)) {
    getLedgers();
    if (ledgers.size() == 0) {
      return LedgerChildElement.TemplateElement(this);
    }
    return ledgers.elementAt(multiplicity);
  }
  return null;
}","public LedgerChildElement getChild(String name,int multiplicity){
  if ((multiplicity == TreeReference.INDEX_TEMPLATE) && ""String_Node_Str"".equals(name)) {
    return null;
  }
  if (name.equals(LedgerChildElement.NAME)) {
    getLedgers();
    if (ledgers.size() == 0) {
      return LedgerChildElement.TemplateElement(this);
    }
    return ledgers.elementAt(multiplicity);
  }
  return null;
}",0.946987951807229
146694,"public FormInstance getSessionInstance(String deviceId,String appversion,String username,String userId,Hashtable<String,String> userFields){
  TreeElement sessionRoot=new TreeElement(""String_Node_Str"",0);
  TreeElement sessionData=new TreeElement(""String_Node_Str"",0);
  sessionRoot.addChild(sessionData);
  for (  StackFrameStep step : frame.getSteps()) {
    if (step.getType() == SessionFrame.STATE_DATUM_VAL) {
      TreeElement datum=new TreeElement(step.getId());
      datum.setValue(new UncastData(step.getValue()));
      sessionData.addChild(datum);
    }
  }
  TreeElement sessionMeta=new TreeElement(""String_Node_Str"",0);
  addData(sessionMeta,""String_Node_Str"",deviceId);
  addData(sessionMeta,""String_Node_Str"",appversion);
  addData(sessionMeta,""String_Node_Str"",username);
  addData(sessionMeta,""String_Node_Str"",userId);
  sessionRoot.addChild(sessionMeta);
  TreeElement user=new TreeElement(""String_Node_Str"",0);
  TreeElement userData=new TreeElement(""String_Node_Str"",0);
  user.addChild(userData);
  for (Enumeration en=userFields.keys(); en.hasMoreElements(); ) {
    String key=(String)en.nextElement();
    addData(userData,key,userFields.get(key));
  }
  sessionRoot.addChild(user);
  return new FormInstance(sessionRoot,""String_Node_Str"");
}","public FormInstance getSessionInstance(String deviceId,String appversion,String username,String userId,Hashtable<String,String> userFields){
  TreeElement sessionRoot=new TreeElement(""String_Node_Str"",0);
  TreeElement sessionData=new TreeElement(""String_Node_Str"",0);
  sessionRoot.addChild(sessionData);
  for (  StackFrameStep step : frame.getSteps()) {
    if (step.getType() == SessionFrame.STATE_DATUM_VAL) {
      Vector<TreeElement> matchingElements=sessionData.getChildrenWithName(step.getId());
      if (matchingElements.size() > 0) {
        matchingElements.elementAt(0).setValue(new UncastData(step.getValue()));
      }
 else {
        TreeElement datum=new TreeElement(step.getId());
        datum.setValue(new UncastData(step.getValue()));
        sessionData.addChild(datum);
      }
    }
  }
  TreeElement sessionMeta=new TreeElement(""String_Node_Str"",0);
  addData(sessionMeta,""String_Node_Str"",deviceId);
  addData(sessionMeta,""String_Node_Str"",appversion);
  addData(sessionMeta,""String_Node_Str"",username);
  addData(sessionMeta,""String_Node_Str"",userId);
  sessionRoot.addChild(sessionMeta);
  TreeElement user=new TreeElement(""String_Node_Str"",0);
  TreeElement userData=new TreeElement(""String_Node_Str"",0);
  user.addChild(userData);
  for (Enumeration en=userFields.keys(); en.hasMoreElements(); ) {
    String key=(String)en.nextElement();
    addData(userData,key,userFields.get(key));
  }
  sessionRoot.addChild(user);
  return new FormInstance(sessionRoot,""String_Node_Str"");
}",0.8207343412526998
146695,"public void stepBack(){
  StackFrameStep recentPop=frame.popStep();
  syncState();
  popped=recentPop;
  if (this.getNeededData() == SessionFrame.STATE_DATUM_COMPUTED) {
    stepBack();
  }
}","public void stepBack(){
  StackFrameStep recentPop=frame.popStep();
  syncState();
  while (this.getNeededData() == null || this.getNeededData() == SessionFrame.STATE_DATUM_COMPUTED) {
    recentPop=frame.popStep();
    syncState();
  }
  popped=recentPop;
}",0.7082405345211581
146696,"/** 
 * Based on the current state of the session, determine what information is needed next to proceed
 * @return 1 of the 4 STATE strings declared at the top of SessionFrame.java, or null ifcould not be determined
 */
public String getNeededData(){
  if (this.getCommand() == null) {
    return SessionFrame.STATE_COMMAND_ID;
  }
  Vector<Entry> entries=getEntriesForCommand(this.getCommand(),this.getData());
  String needDatum=null;
  String nextKey=null;
  for (  Entry e : entries) {
    if (e.getSessionDataReqs().size() > this.getData().size()) {
      SessionDatum datum=e.getSessionDataReqs().elementAt(this.getData().size());
      String needed=datum.getDataId();
      if (nextKey == null) {
        nextKey=needed;
        if (datum.getNodeset() != null) {
          needDatum=SessionFrame.STATE_DATUM_VAL;
        }
 else {
          needDatum=SessionFrame.STATE_DATUM_COMPUTED;
        }
        continue;
      }
 else {
        if (nextKey.equals(needed)) {
          continue;
        }
      }
    }
    needDatum=null;
    break;
  }
  if (needDatum != null) {
    return needDatum;
  }
  if (entries.size() > 1 || !entries.elementAt(0).getCommandId().equals(this.getCommand())) {
    return SessionFrame.STATE_COMMAND_ID;
  }
 else {
    return null;
  }
}","/** 
 * Based on the current state of the session, determine what information is needed next to proceed
 * @return 1 of the 4 STATE strings declared at the top of SessionFrame.java, or null ifthe session does not need anything else to proceed
 */
public String getNeededData(){
  if (this.getCommand() == null) {
    return SessionFrame.STATE_COMMAND_ID;
  }
  Vector<Entry> entries=getEntriesForCommand(this.getCommand(),this.getData());
  String needDatum=null;
  String nextKey=null;
  for (  Entry e : entries) {
    if (e.getSessionDataReqs().size() > this.getData().size()) {
      SessionDatum datum=e.getSessionDataReqs().elementAt(this.getData().size());
      String needed=datum.getDataId();
      if (nextKey == null) {
        nextKey=needed;
        if (datum.getNodeset() != null) {
          needDatum=SessionFrame.STATE_DATUM_VAL;
        }
 else {
          needDatum=SessionFrame.STATE_DATUM_COMPUTED;
        }
        continue;
      }
 else {
        if (nextKey.equals(needed)) {
          continue;
        }
      }
    }
    needDatum=null;
    break;
  }
  if (needDatum != null) {
    return needDatum;
  }
  if (entries.size() > 1 || !entries.elementAt(0).getCommandId().equals(this.getCommand())) {
    return SessionFrame.STATE_COMMAND_ID;
  }
 else {
    return null;
  }
}",0.9740611691831204
146697,"public void next(){
  String next=session.getNeededData();
  if (next == null) {
    String xmlns=session.getForm();
    if (xmlns == null) {
      this.back();
      return;
    }
    Entry entry=session.getCurrentEntry();
    if (failedAssertion(entry.getAssertions())) {
      return;
    }
    String title;
    if (CommCareSense.sense()) {
      title=null;
    }
 else {
      title=Localizer.clearArguments(entry.getText().evaluate());
    }
    initializer=null;
    suiteTable.clear();
    entryTable.clear();
    menuTable.clear();
    final Vector<StackOperation> ops=entry.getPostEntrySessionOperations();
    CommCareFormEntryState state=new CommCareFormEntryState(title,xmlns,getPreloaders(),CommCareContext._().getFuncHandlers(),getIif()){
      protected void goHome(){
        session.markCurrentFrameForDeath();
        if (ops.size() > 0) {
          EvaluationContext ec=session.getEvaluationContext(getIif());
          session.executeStackOperations(ops,ec);
        }
        if (session.finishAndPop()) {
          next();
        }
 else {
          J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
        }
      }
      public void abort(){
        back();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(state);
    return;
  }
  if (next.equals(SessionFrame.STATE_COMMAND_ID)) {
    if (session.getCommand() == null) {
      session.clearAllState();
      J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
      return;
    }
    MenuHomeState state=new MenuHomeState(this,session.getMenu(session.getCommand())){
      public void entry(      Suite suite,      Entry entry){
        throw new RuntimeException(""String_Node_Str"");
      }
      public void exitMenuTransition(){
        CommCareSessionController.this.back();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(state);
    return;
  }
  Suite suite=session.getCurrentSuite();
  SessionDatum datum=session.getNeededDatum();
  EvaluationContext context=session.getEvaluationContext(getIif());
  if (datum.getNodeset() == null) {
    XPathExpression form;
    try {
      form=XPathParseTool.parseXPath(datum.getValue());
    }
 catch (    XPathSyntaxException e) {
      e.printStackTrace();
      throw new RuntimeException(e.getMessage());
    }
    if (datum.getType() == SessionDatum.DATUM_TYPE_FORM) {
      CommCareSessionController.this.session.setXmlns(XPathFuncExpr.toString(form.eval(context.getMainInstance(),context)));
      CommCareSessionController.this.session.setDatum(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      CommCareSessionController.this.session.setDatum(datum.getDataId(),XPathFuncExpr.toString(form.eval(context.getMainInstance(),context)));
    }
    next();
    return;
  }
  Detail shortDetail=suite.getDetail(datum.getShortDetail());
  Detail longDetail=null;
  if (datum.getLongDetail() != null) {
    longDetail=suite.getDetail(datum.getLongDetail());
  }
  final NodeEntitySet nes=new NodeEntitySet(datum.getNodeset(),context);
  Entity<TreeReference> entity=new CommCareEntity(shortDetail,longDetail,context,nes);
  final CommCareSelectState<TreeReference> select=new CommCareSelectState<TreeReference>(entity,nes){
    SessionDatum datum;
    EvaluationContext context;
{
      datum=session.getNeededDatum();
      context=session.getEvaluationContext(getIif());
    }
    public void cancel(){
      CommCareSessionController.this.back();
    }
    public void entitySelected(    int id){
      TreeReference selected=nes.get(id);
      TreeReference outcome=XPathReference.getPathExpr(datum.getValue()).getReference().contextualize(selected);
      AbstractTreeElement element=context.resolveReference(outcome);
      if (element == null) {
        throw new RuntimeException(""String_Node_Str"" + outcome.toString());
      }
      String outputData=element.getValue().uncast().getString();
      CommCareSessionController.this.session.setDatum(datum.getDataId(),outputData);
      CommCareSessionController.this.next();
    }
  }
;
  J2MEDisplay.startStateWithLoadingScreen(select,new ProgressIndicator(){
    public double getProgress(){
      if (nes.loaded()) {
        return select.getProgressIndicator().getProgress();
      }
 else {
        return nes.getProgress();
      }
    }
    public String getCurrentLoadingStatus(){
      if (nes.loaded()) {
        return select.getProgressIndicator().getCurrentLoadingStatus();
      }
 else {
        return nes.getCurrentLoadingStatus();
      }
    }
    public int getIndicatorsProvided(){
      if (nes.loaded()) {
        return select.getProgressIndicator().getIndicatorsProvided();
      }
 else {
        return nes.getIndicatorsProvided();
      }
    }
  }
);
  return;
}","public void next(){
  String next=session.getNeededData();
  if (next == null) {
    String xmlns=session.getForm();
    if (xmlns == null) {
      this.back();
      return;
    }
    Entry entry=session.getCurrentEntry();
    if (failedAssertion(entry.getAssertions())) {
      return;
    }
    String title;
    if (CommCareSense.sense()) {
      title=null;
    }
 else {
      title=Localizer.clearArguments(entry.getText().evaluate());
    }
    initializer=null;
    suiteTable.clear();
    entryTable.clear();
    menuTable.clear();
    final Vector<StackOperation> ops=entry.getPostEntrySessionOperations();
    CommCareFormEntryState state=new CommCareFormEntryState(title,xmlns,getPreloaders(),CommCareContext._().getFuncHandlers(),getIif()){
      protected void goHome(){
        if (session.finishExecuteAndPop(session.getEvaluationContext(getIif()))) {
          next();
        }
 else {
          J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
        }
      }
      public void abort(){
        back();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(state);
    return;
  }
  if (next.equals(SessionFrame.STATE_COMMAND_ID)) {
    if (session.getCommand() == null) {
      session.clearAllState();
      J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
      return;
    }
    MenuHomeState state=new MenuHomeState(this,session.getMenu(session.getCommand())){
      public void entry(      Suite suite,      Entry entry){
        throw new RuntimeException(""String_Node_Str"");
      }
      public void exitMenuTransition(){
        CommCareSessionController.this.back();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(state);
    return;
  }
  Suite suite=session.getCurrentSuite();
  SessionDatum datum=session.getNeededDatum();
  EvaluationContext context=session.getEvaluationContext(getIif());
  if (datum.getNodeset() == null) {
    XPathExpression form;
    try {
      form=XPathParseTool.parseXPath(datum.getValue());
    }
 catch (    XPathSyntaxException e) {
      e.printStackTrace();
      throw new RuntimeException(e.getMessage());
    }
    if (datum.getType() == SessionDatum.DATUM_TYPE_FORM) {
      CommCareSessionController.this.session.setXmlns(XPathFuncExpr.toString(form.eval(context.getMainInstance(),context)));
      CommCareSessionController.this.session.setDatum(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      CommCareSessionController.this.session.setDatum(datum.getDataId(),XPathFuncExpr.toString(form.eval(context.getMainInstance(),context)));
    }
    next();
    return;
  }
  Detail shortDetail=suite.getDetail(datum.getShortDetail());
  Detail longDetail=null;
  if (datum.getLongDetail() != null) {
    longDetail=suite.getDetail(datum.getLongDetail());
  }
  final NodeEntitySet nes=new NodeEntitySet(datum.getNodeset(),context);
  Entity<TreeReference> entity=new CommCareEntity(shortDetail,longDetail,context,nes);
  final CommCareSelectState<TreeReference> select=new CommCareSelectState<TreeReference>(entity,nes){
    SessionDatum datum;
    EvaluationContext context;
{
      datum=session.getNeededDatum();
      context=session.getEvaluationContext(getIif());
    }
    public void cancel(){
      CommCareSessionController.this.back();
    }
    public void entitySelected(    int id){
      TreeReference selected=nes.get(id);
      TreeReference outcome=XPathReference.getPathExpr(datum.getValue()).getReference().contextualize(selected);
      AbstractTreeElement element=context.resolveReference(outcome);
      if (element == null) {
        throw new RuntimeException(""String_Node_Str"" + outcome.toString());
      }
      String outputData=element.getValue().uncast().getString();
      CommCareSessionController.this.session.setDatum(datum.getDataId(),outputData);
      CommCareSessionController.this.next();
    }
  }
;
  J2MEDisplay.startStateWithLoadingScreen(select,new ProgressIndicator(){
    public double getProgress(){
      if (nes.loaded()) {
        return select.getProgressIndicator().getProgress();
      }
 else {
        return nes.getProgress();
      }
    }
    public String getCurrentLoadingStatus(){
      if (nes.loaded()) {
        return select.getProgressIndicator().getCurrentLoadingStatus();
      }
 else {
        return nes.getCurrentLoadingStatus();
      }
    }
    public int getIndicatorsProvided(){
      if (nes.loaded()) {
        return select.getProgressIndicator().getIndicatorsProvided();
      }
 else {
        return nes.getIndicatorsProvided();
      }
    }
  }
);
  return;
}",0.9742157284056724
146698,"protected void goHome(){
  session.markCurrentFrameForDeath();
  if (ops.size() > 0) {
    EvaluationContext ec=session.getEvaluationContext(getIif());
    session.executeStackOperations(ops,ec);
  }
  if (session.finishAndPop()) {
    next();
  }
 else {
    J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
  }
}","protected void goHome(){
  if (session.finishExecuteAndPop(session.getEvaluationContext(getIif()))) {
    next();
  }
 else {
    J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
  }
}",0.6390977443609023
146699,"/** 
 * Complete the current session (and perform any cleanup), then check the stack for any pending frames, and load the top one into the current session if so.
 * @return True if there was a pending frame and it has beenpopped into the current session. False if the stack was empty and the session is over.
 */
public boolean finishAndPop(){
  cleanStack();
  if (frameStack.empty()) {
    return false;
  }
 else {
    frame=frameStack.pop();
    if (!frameStack.isEmpty()) {
      frame.captureSnapshot();
    }
    syncState();
    return true;
  }
}","/** 
 * Complete the current session (and perform any cleanup), then check the stack for any pending frames, and load the top one into the current session if so.
 * @return True if there was a pending frame and it has beenpopped into the current session. False if the stack was empty and the session is over.
 */
private boolean finishAndPop(){
  cleanStack();
  if (frameStack.empty()) {
    return false;
  }
 else {
    frame=frameStack.pop();
    if (!frameStack.isEmpty()) {
      frame.captureSnapshot();
    }
    syncState();
    return true;
  }
}",0.9882988298829884
146700,"/** 
 * @param args
 */
public static void main(String[] args){
  if (args.length < 1) {
    printformat();
    System.exit(-1);
  }
  PrototypeFactory prototypeFactory=setupStaticStorage();
  if (args[0].equals(""String_Node_Str"")) {
    if (args.length < 2) {
      printvalidateformat();
      System.exit(-1);
    }
    CommCareConfigEngine engine=configureApp(args,prototypeFactory);
    engine.describeApplication();
    System.exit(0);
  }
  if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 4) {
      printplayformat();
      System.exit(-1);
    }
    CommCareConfigEngine engine=configureApp(args,prototypeFactory);
    String username=args[2];
    String password=args[3];
    ApplicationHost host=new ApplicationHost(engine,username,password,prototypeFactory);
    host.run();
    System.exit(0);
  }
}","/** 
 * @param args
 */
public static void main(String[] args){
  if (args.length < 1) {
    printformat();
    System.exit(-1);
  }
  PrototypeFactory prototypeFactory=setupStaticStorage();
  if (args[0].equals(""String_Node_Str"")) {
    if (args.length < 2) {
      printvalidateformat();
      System.exit(-1);
    }
    CommCareConfigEngine engine=configureApp(args,prototypeFactory);
    engine.describeApplication();
    System.exit(0);
  }
  if (""String_Node_Str"".equals(args[0])) {
    try {
      if (args.length < 4) {
        printplayformat();
        System.exit(-1);
      }
      CommCareConfigEngine engine=configureApp(args,prototypeFactory);
      String username=args[2];
      String password=args[3];
      username=username.trim().toLowerCase();
      ApplicationHost host=new ApplicationHost(engine,username,password,prototypeFactory);
      host.run();
      System.exit(-1);
    }
 catch (    RuntimeException re) {
      System.out.print(""String_Node_Str"");
      re.printStackTrace();
      throw re;
    }
 finally {
      System.exit(0);
    }
  }
}",0.8487394957983193
146701,"private void loop() throws IOException {
  boolean keepExecuting=true;
  while (keepExecuting) {
    mSession.clearAllState();
    keepExecuting=loopSession();
    if (this.mUpdatePending) {
      mSession.clearAllState();
      this.mUpdatePending=false;
      boolean forceUpdate=mForceLatestUpdate;
      this.mForceLatestUpdate=false;
      mEngine.attemptAppUpdate(forceUpdate);
    }
  }
}","private void loop() throws IOException {
  boolean keepExecuting=true;
  while (keepExecuting) {
    if (!mSessionHasNextFrameReady) {
      mSession.clearAllState();
    }
    mSessionHasNextFrameReady=false;
    keepExecuting=loopSession();
    if (this.mUpdatePending) {
      processAppUpdate();
    }
  }
}",0.6175637393767706
146702,"private boolean loopSession() throws IOException {
  Screen s=getNextScreen();
  while (s != null) {
    try {
      s.init(mPlatform,mSession,mSandbox);
      System.out.println(""String_Node_Str"");
      s.prompt(System.out);
      System.out.print(""String_Node_Str"");
      String input=reader.readLine();
      if (input.startsWith(""String_Node_Str"")) {
        if (input.equals(""String_Node_Str"") || input.equals(""String_Node_Str"")) {
          return false;
        }
        if (input.startsWith(""String_Node_Str"")) {
          mUpdatePending=true;
          if (input.contains(""String_Node_Str"")) {
            mForceLatestUpdate=true;
          }
          return true;
        }
        if (input.equals(""String_Node_Str"")) {
          return true;
        }
      }
      s.updateSession(mSession,input);
      s=getNextScreen();
    }
 catch (    CommCareSessionException ccse) {
      System.out.println(""String_Node_Str"");
      ccse.printStackTrace();
      System.out.println(""String_Node_Str"");
      reader.readLine();
      return true;
    }
  }
  String formXmlns=mSession.getForm();
  XFormPlayer player=new XFormPlayer(System.in,System.out,null);
  player.setSessionIIF(mSession.getIIF());
  player.start(mEngine.loadFormByXmlns(formXmlns));
  return true;
}","private boolean loopSession() throws IOException {
  Screen s=getNextScreen();
  while (s != null) {
    try {
      s.init(mPlatform,mSession,mSandbox);
      System.out.println(""String_Node_Str"");
      s.prompt(System.out);
      System.out.print(""String_Node_Str"");
      String input=reader.readLine();
      if (input.startsWith(""String_Node_Str"")) {
        if (input.equals(""String_Node_Str"") || input.equals(""String_Node_Str"")) {
          return false;
        }
        if (input.startsWith(""String_Node_Str"")) {
          mUpdatePending=true;
          if (input.contains(""String_Node_Str"")) {
            mForceLatestUpdate=true;
          }
          return true;
        }
        if (input.equals(""String_Node_Str"")) {
          return true;
        }
      }
      s.updateSession(mSession,input);
      s=getNextScreen();
    }
 catch (    CommCareSessionException ccse) {
      printErrorAndContinue(""String_Node_Str"",ccse);
      return true;
    }
  }
  String formXmlns=mSession.getForm();
  XFormPlayer player=new XFormPlayer(System.in,System.out,null);
  player.setSessionIIF(mSession.getIIF());
  player.start(mEngine.loadFormByXmlns(formXmlns));
  if (player.getExecutionResult() == XFormPlayer.FormResult.Completed) {
    if (!processResultInstance(player.getResultStream())) {
      return true;
    }
    mSession.clearVolitiles();
    if (mSession.finishExecuteAndPop(mSession.getEvaluationContext())) {
      mSessionHasNextFrameReady=true;
    }
  }
  return true;
}",0.8272138228941684
146703,"private boolean propertiesEqual(String a,String b){
  return a == null && b != null || a != null && b == null || a != null && b != null && !a.equals(b);
}","private boolean propertiesEqual(String a,String b){
  if (a == null) {
    return b == null;
  }
 else {
    return (a.equals(b));
  }
}",0.6827586206896552
146704,"public String getNeededData(){
  if (this.getCommand() == null) {
    return SessionFrame.STATE_COMMAND_ID;
  }
  Vector<Entry> entries=getEntriesForCommand(this.getCommand(),this.getData());
  String needDatum=null;
  String nextKey=null;
  for (  Entry e : entries) {
    if (e.getSessionDataReqs().size() > this.getData().size()) {
      SessionDatum datum=e.getSessionDataReqs().elementAt(this.getData().size());
      String needed=datum.getDataId();
      if (nextKey == null) {
        nextKey=needed;
        if (datum.getNodeset() != null) {
          needDatum=SessionFrame.STATE_DATUM_VAL;
        }
 else {
          needDatum=SessionFrame.STATE_DATUM_COMPUTED;
        }
        continue;
      }
 else {
        if (nextKey.equals(needed)) {
          continue;
        }
      }
    }
    needDatum=null;
    break;
  }
  if (needDatum != null) {
    return needDatum;
  }
  if (entries.size() > 1 || !entries.elementAt(0).getCommandId().equals(this.getCommand())) {
    return SessionFrame.STATE_COMMAND_ID;
  }
 else {
    return null;
  }
}","/** 
 * Based on the current state of the session, determine what information is needed next to proceed
 * @return 1 of the 4 STATE strings declared at the top of SessionFrame.java, or null ifcould not be determined
 */
public String getNeededData(){
  if (this.getCommand() == null) {
    return SessionFrame.STATE_COMMAND_ID;
  }
  Vector<Entry> entries=getEntriesForCommand(this.getCommand(),this.getData());
  String needDatum=null;
  String nextKey=null;
  for (  Entry e : entries) {
    if (e.getSessionDataReqs().size() > this.getData().size()) {
      SessionDatum datum=e.getSessionDataReqs().elementAt(this.getData().size());
      String needed=datum.getDataId();
      if (nextKey == null) {
        nextKey=needed;
        if (datum.getNodeset() != null) {
          needDatum=SessionFrame.STATE_DATUM_VAL;
        }
 else {
          needDatum=SessionFrame.STATE_DATUM_COMPUTED;
        }
        continue;
      }
 else {
        if (nextKey.equals(needed)) {
          continue;
        }
      }
    }
    needDatum=null;
    break;
  }
  if (needDatum != null) {
    return needDatum;
  }
  if (entries.size() > 1 || !entries.elementAt(0).getCommandId().equals(this.getCommand())) {
    return SessionFrame.STATE_COMMAND_ID;
  }
 else {
    return null;
  }
}",0.9058219178082192
146705,"public <T extends Persistable>byte[] serialize(T t){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    t.writeExternal(new DataOutputStream(baos));
    return baos.toByteArray();
  }
 catch (  IOException e) {
    throw wrap(""String_Node_Str"" + t.getClass().getName(),e);
  }
}","public <T extends Externalizable>byte[] serialize(T t){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    t.writeExternal(new DataOutputStream(baos));
    return baos.toByteArray();
  }
 catch (  IOException e) {
    throw wrap(""String_Node_Str"" + t.getClass().getName(),e);
  }
}",0.9717138103161398
146706,"public <T extends Persistable>T deserialize(byte[] object,Class<T> c){
  try {
    return (T)ExtUtil.deserialize(object,c,factory);
  }
 catch (  IOException|DeserializationException e) {
    throw wrap(""String_Node_Str"" + c.getName(),e);
  }
}","public <T extends Externalizable>T deserialize(byte[] object,Class<T> c){
  try {
    return (T)ExtUtil.deserialize(object,c,factory);
  }
 catch (  IOException|DeserializationException e) {
    throw wrap(""String_Node_Str"" + c.getName(),e);
  }
}",0.9653767820773932
146707,"private void loop(){
  while (true) {
    mSession.clearAllState();
    loopSession();
  }
}","private void loop() throws IOException {
  while (true) {
    mSession.clearAllState();
    loopSession();
  }
}",0.9019607843137256
146708,"public void run(){
  setupSandbox();
  mSession=new SessionWrapper(mPlatform,mSandbox);
  loop();
}","public void run(){
  setupSandbox();
  mSession=new SessionWrapper(mPlatform,mSandbox);
  try {
    loop();
  }
 catch (  IOException e) {
    e.printStackTrace();
    System.exit(-1);
  }
}",0.6851211072664359
146709,"private void loopSession(){
  Screen s=getNextScreen();
  while (s != null) {
    s.init(mPlatform,mSession,mSandbox);
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    s.prompt(System.out);
    System.out.print(""String_Node_Str"");
    try {
      String input=reader.readLine();
      s.updateSession(mSession,input);
      s=getNextScreen();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  String formXmlns=mSession.getForm();
  XFormPlayer player=new XFormPlayer(System.in,System.out,null);
  player.setSessionIIF(mSession.getIIF());
  player.start(mEngine.loadFormByXmlns(formXmlns));
}","private void loopSession() throws IOException {
  Screen s=getNextScreen();
  while (s != null) {
    try {
      s.init(mPlatform,mSession,mSandbox);
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      s.prompt(System.out);
      System.out.print(""String_Node_Str"");
      String input=reader.readLine();
      s.updateSession(mSession,input);
      s=getNextScreen();
    }
 catch (    CommCareSessionException ccse) {
      System.out.println(""String_Node_Str"");
      ccse.printStackTrace();
      System.out.println(""String_Node_Str"");
      reader.readLine();
      mSession.clearAllState();
      loopSession();
    }
  }
  String formXmlns=mSession.getForm();
  XFormPlayer player=new XFormPlayer(System.in,System.out,null);
  player.setSessionIIF(mSession.getIIF());
  player.start(mEngine.loadFormByXmlns(formXmlns));
}",0.2793296089385474
146710,"@Override public void init(CommCarePlatform platform,SessionWrapper session,MockUserDataSandbox sandbox){
  this.mPlatform=platform;
  this.mSandbox=sandbox;
  this.mSession=session;
  needed=session.getNeededDatum();
  String detail=needed.getShortDetail();
  if (detail == null) {
    error(""String_Node_Str"" + needed.getDataId());
  }
  Detail shortDetail=platform.getDetail(detail);
  if (shortDetail == null) {
    error(""String_Node_Str"" + detail);
  }
  mTitle=shortDetail.getTitle().evaluate(session.getEvaluationContext()).getName();
  mHeader=this.createHeader(shortDetail);
  Vector<TreeReference> references=inflateReference(needed.getNodeset());
  rows=new String[references.size()];
  int i=0;
  for (  TreeReference entity : references) {
    rows[i]=createRow(entity,shortDetail);
    ++i;
  }
  this.mChoices=new TreeReference[references.size()];
  references.copyInto(mChoices);
  setTitle(mTitle);
}","@Override public void init(CommCarePlatform platform,SessionWrapper session,MockUserDataSandbox sandbox) throws CommCareSessionException {
  this.mPlatform=platform;
  this.mSandbox=sandbox;
  this.mSession=session;
  needed=session.getNeededDatum();
  String detail=needed.getShortDetail();
  if (detail == null) {
    throw new CommCareSessionException(""String_Node_Str"" + needed.getDataId());
  }
  Detail shortDetail=platform.getDetail(detail);
  if (shortDetail == null) {
    throw new CommCareSessionException(""String_Node_Str"" + detail);
  }
  mTitle=shortDetail.getTitle().evaluate(session.getEvaluationContext()).getName();
  mHeader=this.createHeader(shortDetail);
  Vector<TreeReference> references=inflateReference(needed.getNodeset());
  rows=new String[references.size()];
  int i=0;
  for (  TreeReference entity : references) {
    rows[i]=createRow(entity,shortDetail);
    ++i;
  }
  this.mChoices=new TreeReference[references.size()];
  references.copyInto(mChoices);
  setTitle(mTitle);
}",0.9423975090814738
146711,"@Override public void init(CommCarePlatform platform,SessionWrapper session,MockUserDataSandbox sandbox){
  String root=deriveMenuRoot(session);
  this.mPlatform=platform;
  this.mSandbox=sandbox;
  Vector<MenuDisplayable> choices=new Vector<MenuDisplayable>();
  Hashtable<String,Entry> map=platform.getMenuMap();
  EvaluationContext ec=null;
  for (  Suite s : platform.getInstalledSuites()) {
    for (    Menu m : s.getMenus()) {
      String xpathExpression=""String_Node_Str"";
      try {
        XPathExpression relevance=m.getMenuRelevance();
        if (m.getMenuRelevance() != null) {
          xpathExpression=m.getMenuRelevanceRaw();
          ec=session.getEvaluationContext(m.getId());
          if (XPathFuncExpr.toBoolean(relevance.eval(ec)).booleanValue() == false) {
            continue;
          }
        }
        if (m.getId().equals(root)) {
          if (mTitle == null) {
            try {
              mTitle=m.getName().evaluate();
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
          for (          String command : m.getCommandIds()) {
            xpathExpression=""String_Node_Str"";
            XPathExpression mRelevantCondition=m.getCommandRelevance(m.indexOfCommand(command));
            if (mRelevantCondition != null) {
              xpathExpression=m.getCommandRelevanceRaw(m.indexOfCommand(command));
              ec=session.getEvaluationContext();
              Object ret=mRelevantCondition.eval(ec);
              try {
                if (!XPathFuncExpr.toBoolean(ret)) {
                  continue;
                }
              }
 catch (              XPathTypeMismatchException e) {
                e.printStackTrace();
                error(""String_Node_Str"" + ret);
              }
              if (!XPathFuncExpr.toBoolean(ret)) {
                continue;
              }
            }
            Entry e=map.get(command);
            if (e.getXFormNamespace() == null) {
              if (session.getNeededDatum(e) == null) {
                continue;
              }
            }
            choices.add(e);
          }
          continue;
        }
        if (root.equals(m.getRoot())) {
          boolean idExists=false;
          for (          Object o : choices) {
            if (o instanceof Menu) {
              if (((Menu)o).getId().equals(m.getId())) {
                idExists=true;
                break;
              }
            }
          }
          if (!idExists) {
            choices.add(m);
          }
        }
      }
 catch (      XPathSyntaxException xpse) {
        error(xpse);
        return;
      }
catch (      XPathException xpe) {
        error(xpe);
        return;
      }
    }
  }
  this.mChoices=new MenuDisplayable[choices.size()];
  choices.copyInto(mChoices);
  setTitle(mTitle);
}","@Override public void init(CommCarePlatform platform,SessionWrapper session,MockUserDataSandbox sandbox) throws CommCareSessionException {
  String root=deriveMenuRoot(session);
  this.mPlatform=platform;
  this.mSandbox=sandbox;
  Vector<MenuDisplayable> choices=new Vector<MenuDisplayable>();
  Hashtable<String,Entry> map=platform.getMenuMap();
  EvaluationContext ec=null;
  for (  Suite s : platform.getInstalledSuites()) {
    for (    Menu m : s.getMenus()) {
      String xpathExpression=""String_Node_Str"";
      try {
        XPathExpression relevance=m.getMenuRelevance();
        if (m.getMenuRelevance() != null) {
          xpathExpression=m.getMenuRelevanceRaw();
          ec=session.getEvaluationContext(m.getId());
          if (XPathFuncExpr.toBoolean(relevance.eval(ec)).booleanValue() == false) {
            continue;
          }
        }
        if (m.getId().equals(root)) {
          if (mTitle == null) {
            try {
              mTitle=m.getName().evaluate();
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
          for (          String command : m.getCommandIds()) {
            xpathExpression=""String_Node_Str"";
            XPathExpression mRelevantCondition=m.getCommandRelevance(m.indexOfCommand(command));
            if (mRelevantCondition != null) {
              xpathExpression=m.getCommandRelevanceRaw(m.indexOfCommand(command));
              ec=session.getEvaluationContext();
              Object ret=mRelevantCondition.eval(ec);
              try {
                if (!XPathFuncExpr.toBoolean(ret)) {
                  continue;
                }
              }
 catch (              XPathTypeMismatchException e) {
                e.printStackTrace();
                throw new CommCareSessionException(""String_Node_Str"" + ret,e);
              }
              if (!XPathFuncExpr.toBoolean(ret)) {
                continue;
              }
            }
            Entry e=map.get(command);
            if (e.getXFormNamespace() == null) {
              if (session.getNeededDatum(e) == null) {
                continue;
              }
            }
            choices.add(e);
          }
          continue;
        }
        if (root.equals(m.getRoot())) {
          boolean idExists=false;
          for (          Object o : choices) {
            if (o instanceof Menu) {
              if (((Menu)o).getId().equals(m.getId())) {
                idExists=true;
                break;
              }
            }
          }
          if (!idExists) {
            choices.add(m);
          }
        }
      }
 catch (      XPathSyntaxException xpse) {
        throw new CommCareSessionException(""String_Node_Str"",xpse);
      }
catch (      XPathException xpe) {
        throw new CommCareSessionException(""String_Node_Str"",xpe);
      }
    }
  }
  this.mChoices=new MenuDisplayable[choices.size()];
  choices.copyInto(mChoices);
  setTitle(mTitle);
}",0.958490566037736
146712,"public abstract void init(CommCarePlatform platform,SessionWrapper session,MockUserDataSandbox sandbox);","public abstract void init(CommCarePlatform platform,SessionWrapper session,MockUserDataSandbox sandbox) throws CommCareSessionException ;",0.8630705394190872
146713,"public abstract void updateSession(CommCareSession session,String input);","public abstract void updateSession(CommCareSession session,String input) throws CommCareSessionException ;",0.8156424581005587
146714,public abstract void prompt(PrintStream out);,public abstract void prompt(PrintStream out) throws CommCareSessionException ;,0.7317073170731707
146715,"public void writeExternal(DataOutputStream dos) throws IOException {
  ExtUtil.writeNumeric(dos,getID());
  ExtUtil.write(dos,new ExtWrapNullable(binding == null ? null : new ExtWrapTagged(binding)));
  ExtUtil.write(dos,new ExtWrapNullable(getAppearanceAttr()));
  ExtUtil.writeNumeric(dos,getControlType());
  ExtUtil.write(dos,new ExtWrapList(ExtUtil.emptyIfNull(choices)));
  ExtUtil.write(dos,new ExtWrapNullable(dynamicChoices));
  ExtUtil.write(dos,new ExtWrapMap(String.class,QuestionString.class));
}","public void writeExternal(DataOutputStream dos) throws IOException {
  ExtUtil.writeNumeric(dos,getID());
  ExtUtil.write(dos,new ExtWrapNullable(binding == null ? null : new ExtWrapTagged(binding)));
  ExtUtil.write(dos,new ExtWrapNullable(getAppearanceAttr()));
  ExtUtil.writeNumeric(dos,getControlType());
  ExtUtil.write(dos,new ExtWrapList(ExtUtil.emptyIfNull(choices)));
  ExtUtil.write(dos,new ExtWrapNullable(dynamicChoices));
  ExtUtil.write(dos,new ExtWrapMap(mQuestionStrings));
}",0.965034965034965
146716,"public QuestionDef(int id,int controlType){
  setID(id);
  setControlType(controlType);
  observers=new Vector();
  mQuestionStrings=new Hashtable<String,QuestionString>();
}","public QuestionDef(int id,int controlType){
  setID(id);
  setControlType(controlType);
  observers=new Vector();
  mQuestionStrings=new Hashtable<String,QuestionString>();
  mQuestionStrings.put(XFormParser.LABEL_ELEMENT,new QuestionString(XFormParser.LABEL_ELEMENT,null));
}",0.7733333333333333
146717,"/** 
 * Convenience method Get longText form of text for THIS element (if available) !!Falls back to default form if 'long' form does not exist.!! Use getSpecialFormQuestionText() if you want short form only.
 * @return longText form
 */
public String getConstraintText(){
  String newConstraintMsg=this.localizeText(getQuestion().getQuestionString(XFormParser.CONSTRAINT_ELEMENT));
  if (newConstraintMsg != null) {
    return newConstraintMsg;
  }
  EvaluationContext ec=new EvaluationContext(form.exprEvalContext,mTreeElement.getRef());
  return mTreeElement.getConstraint().getConstraintMessage(ec,form.getMainInstance(),null);
}","public String getConstraintText(String textForm,IAnswerData attemptedValue){
  if (mTreeElement.getConstraint() == null) {
    return null;
  }
 else {
    EvaluationContext ec=new EvaluationContext(form.exprEvalContext,mTreeElement.getRef());
    if (textForm != null) {
      ec.setOutputTextForm(textForm);
    }
    if (attemptedValue != null) {
      ec.isConstraint=true;
      ec.candidateValue=attemptedValue;
    }
    return mTreeElement.getConstraint().getConstraintMessage(ec,form.getMainInstance(),textForm);
  }
}",0.3344827586206896
146718,"public void processAction(FormDef model,TreeReference contextRef){
  TreeReference qualifiedReference=contextRef == null ? target : target.contextualize(contextRef);
  if (contextRef != null) {
    if (!contextRef.isParentOf(qualifiedReference,false)) {
      return;
    }
  }
  EvaluationContext context=new EvaluationContext(model.getEvaluationContext(),qualifiedReference);
  Object result;
  if (explicitValue != null) {
    result=explicitValue;
  }
 else {
    result=XPathFuncExpr.unpack(value.eval(model.getMainInstance(),context));
  }
  AbstractTreeElement node=context.resolveReference(qualifiedReference);
  if (node == null) {
    throw new NullPointerException(""String_Node_Str"" + qualifiedReference.toString(true) + ""String_Node_Str"");
  }
  int dataType=node.getDataType();
  IAnswerData val=Recalculate.wrapData(result,dataType);
  model.setValue(val == null ? null : AnswerDataFactory.templateByDataType(dataType).cast(val.uncast()),qualifiedReference);
}","public void processAction(FormDef model,TreeReference contextRef){
  TreeReference qualifiedReference=contextRef == null ? target : target.contextualize(contextRef);
  if (contextRef != null) {
    if (!contextRef.isParentOf(qualifiedReference,false)) {
      return;
    }
  }
  EvaluationContext context=new EvaluationContext(model.getEvaluationContext(),qualifiedReference);
  Object result;
  if (explicitValue != null) {
    result=explicitValue;
  }
 else {
    result=XPathFuncExpr.unpack(value.eval(model.getMainInstance(),context));
  }
  String failMessage=""String_Node_Str"" + target.toString(true) + ""String_Node_Str"";
  if (qualifiedReference.hasPredicates()) {
    Vector<TreeReference> references=context.expandReference(qualifiedReference);
    if (references.size() == 0) {
      throw new NullPointerException(failMessage);
    }
 else     if (references.size() > 1) {
      throw new XPathTypeMismatchException(""String_Node_Str"" + XPathNodeset.printNodeContents(references) + ""String_Node_Str"");
    }
 else {
      qualifiedReference=references.elementAt(0);
    }
  }
  AbstractTreeElement node=context.resolveReference(qualifiedReference);
  if (node == null) {
    throw new NullPointerException(failMessage);
  }
  int dataType=node.getDataType();
  IAnswerData val=Recalculate.wrapData(result,dataType);
  model.setValue(val == null ? null : AnswerDataFactory.templateByDataType(dataType).cast(val.uncast()),qualifiedReference);
}",0.6820428336079077
146719,"protected String nodeContents(){
  if (nodes == null) {
    return ""String_Node_Str"" + pathEvaluated;
  }
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < nodes.size(); i++) {
    sb.append(nodes.elementAt(i).toString());
    if (i < nodes.size() - 1) {
      sb.append(""String_Node_Str"");
    }
  }
  return sb.toString();
}","protected String nodeContents(){
  if (nodes == null) {
    return ""String_Node_Str"" + pathEvaluated;
  }
  return printNodeContents(nodes);
}",0.5168067226890757
146720,"public void populateMenu(List list,String menu,MultimediaListener listener){
  suiteTable.clear();
  entryTable.clear();
  menuTable.clear();
  Enumeration en=session.platform.getInstalledSuites().elements();
  EvaluationContext ec=null;
  while (en.hasMoreElements()) {
    Suite suite=(Suite)en.nextElement();
    for (    Menu m : suite.getMenus()) {
      try {
        XPathExpression relevance=m.getMenuRelevance();
        if (relevance != null) {
          if (ec == null) {
            ec=session.getEvaluationContext(getIif(),m.getId());
          }
          if (XPathFuncExpr.toBoolean(relevance.eval(ec)).booleanValue() == false) {
            continue;
          }
        }
      }
 catch (      XPathSyntaxException e) {
        e.printStackTrace();
      }
      if (menu.equals(m.getId())) {
        for (int i=0; i < m.getCommandIds().size(); ++i) {
          try {
            String id=m.getCommandIds().elementAt(i);
            XPathExpression relevant=m.getCommandRelevance(i);
            if (relevant != null) {
              if (ec == null) {
                ec=session.getEvaluationContext(getIif());
              }
              if (XPathFuncExpr.toBoolean(relevant.eval(ec)).booleanValue() == false) {
                continue;
              }
            }
            Entry e=suite.getEntries().get(id);
            if (e.getXFormNamespace() == null) {
              if (session.getNeededDatum(e) == null) {
                continue;
              }
            }
            int location=list.size();
            list.append(CommCareUtil.getMenuText(e.getText(),suite,location),ImageUtils.getImage(e.getImageURI()));
            if (listener != null && (e.getAudioURI() != null && !""String_Node_Str"".equals(e.getAudioURI()))) {
              listener.registerAudioTrigger(location,e.getAudioURI());
            }
            suiteTable.put(new Integer(location),suite);
            entryTable.put(new Integer(location),e);
          }
 catch (          XPathSyntaxException xpse) {
            throw new RuntimeException(xpse.getMessage());
          }
        }
      }
 else       if (m.getRoot().equals(menu)) {
        int location=list.size();
        list.append(CommCareUtil.getMenuText(m.getName(),suite,location),ImageUtils.getImage(m.getImageURI()));
        if (listener != null && (m.getAudioURI() != null && !""String_Node_Str"".equals(m.getAudioURI()))) {
          listener.registerAudioTrigger(location,m.getAudioURI());
        }
        suiteTable.put(new Integer(location),suite);
        menuTable.put(new Integer(location),m);
      }
    }
  }
}","public void populateMenu(List list,String menu,MultimediaListener listener){
  suiteTable.clear();
  entryTable.clear();
  menuTable.clear();
  Enumeration en=session.platform.getInstalledSuites().elements();
  while (en.hasMoreElements()) {
    Suite suite=(Suite)en.nextElement();
    for (    Menu m : suite.getMenus()) {
      EvaluationContext ec=null;
      try {
        XPathExpression relevance=m.getMenuRelevance();
        if (relevance != null) {
          if (ec == null) {
            ec=session.getEvaluationContext(getIif(),m.getId());
          }
          if (XPathFuncExpr.toBoolean(relevance.eval(ec)).booleanValue() == false) {
            continue;
          }
        }
      }
 catch (      XPathSyntaxException e) {
        e.printStackTrace();
      }
      if (menu.equals(m.getId())) {
        for (int i=0; i < m.getCommandIds().size(); ++i) {
          try {
            String id=m.getCommandIds().elementAt(i);
            XPathExpression relevant=m.getCommandRelevance(i);
            if (relevant != null) {
              if (ec == null) {
                ec=session.getEvaluationContext(getIif());
              }
              if (XPathFuncExpr.toBoolean(relevant.eval(ec)).booleanValue() == false) {
                continue;
              }
            }
            Entry e=suite.getEntries().get(id);
            if (e.getXFormNamespace() == null) {
              if (session.getNeededDatum(e) == null) {
                continue;
              }
            }
            int location=list.size();
            list.append(CommCareUtil.getMenuText(e.getText(),suite,location),ImageUtils.getImage(e.getImageURI()));
            if (listener != null && (e.getAudioURI() != null && !""String_Node_Str"".equals(e.getAudioURI()))) {
              listener.registerAudioTrigger(location,e.getAudioURI());
            }
            suiteTable.put(new Integer(location),suite);
            entryTable.put(new Integer(location),e);
          }
 catch (          XPathSyntaxException xpse) {
            throw new RuntimeException(xpse.getMessage());
          }
        }
      }
 else       if (m.getRoot().equals(menu)) {
        int location=list.size();
        list.append(CommCareUtil.getMenuText(m.getName(),suite,location),ImageUtils.getImage(m.getImageURI()));
        if (listener != null && (m.getAudioURI() != null && !""String_Node_Str"".equals(m.getAudioURI()))) {
          listener.registerAudioTrigger(location,m.getAudioURI());
        }
        suiteTable.put(new Integer(location),suite);
        menuTable.put(new Integer(location),m);
      }
    }
  }
}",0.954632833525567
146721,"public DisplayData evaluate(EvaluationContext ec){
  return new DisplayData(name.evaluate(ec),imageReference.evaluate(ec),audioReference.evaluate(ec));
}","public DisplayData evaluate(EvaluationContext ec){
  String imageRef=imageReference == null ? null : imageReference.evaluate(ec);
  String audioRef=audioReference == null ? null : audioReference.evaluate(ec);
  return new DisplayData(name.evaluate(ec),imageRef,audioRef);
}",0.539906103286385
146722,"private void syncState(){
  this.data.clear();
  this.currentCmd=null;
  this.currentXmlns=null;
  this.popped=null;
  for (  StackFrameStep step : frame.getSteps()) {
    if (SessionFrame.STATE_DATUM_VAL.equals(step.getType())) {
      String key=step.getId();
      String value=step.getValue();
      data.put(key,value);
    }
 else     if (SessionFrame.STATE_COMMAND_ID.equals(step.getType())) {
      this.currentCmd=step.getId();
    }
 else     if (SessionFrame.STATE_FORM_XMLNS.equals(step.getType())) {
      this.currentXmlns=step.getId();
    }
  }
}","private void syncState(){
  this.data.clear();
  this.currentCmd=null;
  this.currentXmlns=null;
  this.popped=null;
  for (  StackFrameStep step : frame.getSteps()) {
    if (SessionFrame.STATE_DATUM_VAL.equals(step.getType())) {
      String key=step.getId();
      String value=step.getValue();
      if (key != null && value != null) {
        data.put(key,value);
      }
    }
 else     if (SessionFrame.STATE_COMMAND_ID.equals(step.getType())) {
      this.currentCmd=step.getId();
    }
 else     if (SessionFrame.STATE_FORM_XMLNS.equals(step.getType())) {
      this.currentXmlns=step.getId();
    }
  }
}",0.95578231292517
146723,"public DisplayData evaluate(EvaluationContext ec){
  return new DisplayData(name.evaluate(ec),imageReference.evaluate(ec),audioReference.evaluate(ec));
}","public DisplayData evaluate(EvaluationContext ec){
  String imageRef=imageReference == null ? null : imageReference.evaluate(ec);
  String audioRef=audioReference == null ? null : audioReference.evaluate(ec);
  return new DisplayData(name.evaluate(ec),imageRef,audioRef);
}",0.539906103286385
146724,"private void syncState(){
  this.data.clear();
  this.currentCmd=null;
  this.currentXmlns=null;
  this.popped=null;
  for (  StackFrameStep step : frame.getSteps()) {
    if (SessionFrame.STATE_DATUM_VAL.equals(step.getType())) {
      String key=step.getId();
      String value=step.getValue();
      data.put(key,value);
    }
 else     if (SessionFrame.STATE_COMMAND_ID.equals(step.getType())) {
      this.currentCmd=step.getId();
    }
 else     if (SessionFrame.STATE_FORM_XMLNS.equals(step.getType())) {
      this.currentXmlns=step.getId();
    }
  }
}","private void syncState(){
  this.data.clear();
  this.currentCmd=null;
  this.currentXmlns=null;
  this.popped=null;
  for (  StackFrameStep step : frame.getSteps()) {
    if (SessionFrame.STATE_DATUM_VAL.equals(step.getType())) {
      String key=step.getId();
      String value=step.getValue();
      if (key != null && value != null) {
        data.put(key,value);
      }
    }
 else     if (SessionFrame.STATE_COMMAND_ID.equals(step.getType())) {
      this.currentCmd=step.getId();
    }
 else     if (SessionFrame.STATE_FORM_XMLNS.equals(step.getType())) {
      this.currentXmlns=step.getId();
    }
  }
}",0.95578231292517
146725,"/** 
 * translate an xpath path reference into a TreeReference TreeReferences only support a subset of true xpath paths; restrictions are: simple child name tests 'child::name', '.', and '..' allowed only no predicates all '..' steps must come before anything else
 */
public TreeReference getReference(boolean allowPredicates) throws XPathUnsupportedException {
  TreeReference ref=new TreeReference();
  boolean parentsAllowed;
switch (init_context) {
case XPathPathExpr.INIT_CONTEXT_ROOT:
    ref.setRefLevel(TreeReference.REF_ABSOLUTE);
  parentsAllowed=false;
break;
case XPathPathExpr.INIT_CONTEXT_RELATIVE:
ref.setRefLevel(0);
parentsAllowed=true;
break;
case XPathPathExpr.INIT_CONTEXT_EXPR:
if (this.filtExpr.x != null && this.filtExpr.x instanceof XPathFuncExpr) {
XPathFuncExpr func=(XPathFuncExpr)(this.filtExpr.x);
if (func.id.toString().equals(""String_Node_Str"")) {
ref.setRefLevel(TreeReference.REF_ABSOLUTE);
parentsAllowed=false;
if (func.args.length != 1) {
throw new XPathUnsupportedException(""String_Node_Str"" + func.args.length + ""String_Node_Str"");
}
if (!(func.args[0] instanceof XPathStringLiteral)) {
throw new XPathUnsupportedException(""String_Node_Str"");
}
XPathStringLiteral strLit=(XPathStringLiteral)(func.args[0]);
ref.setInstanceName(strLit.s);
}
 else if (func.id.toString().equals(""String_Node_Str"")) {
parentsAllowed=true;
ref.setContext(TreeReference.CONTEXT_ORIGINAL);
}
 else {
throw new XPathUnsupportedException(""String_Node_Str"");
}
}
 else {
throw new XPathUnsupportedException(""String_Node_Str"");
}
break;
default :
throw new XPathUnsupportedException(""String_Node_Str"");
}
for (int i=0; i < steps.length; i++) {
XPathStep step=steps[i];
if (step.axis == XPathStep.AXIS_SELF) {
if (step.test != XPathStep.TEST_TYPE_NODE) {
throw new XPathUnsupportedException(""String_Node_Str"");
}
}
 else if (step.axis == XPathStep.AXIS_PARENT) {
if (!parentsAllowed || step.test != XPathStep.TEST_TYPE_NODE) {
throw new XPathUnsupportedException(""String_Node_Str"");
}
 else {
ref.incrementRefLevel();
}
}
 else if (step.axis == XPathStep.AXIS_ATTRIBUTE) {
if (step.test == XPathStep.TEST_NAME) {
ref.add(step.name.toString(),TreeReference.INDEX_ATTRIBUTE);
parentsAllowed=false;
}
 else {
throw new XPathUnsupportedException(""String_Node_Str"");
}
}
 else if (step.axis == XPathStep.AXIS_CHILD) {
if (step.test == XPathStep.TEST_NAME) {
ref.add(step.name.toString(),TreeReference.INDEX_UNBOUND);
parentsAllowed=false;
}
 else if (step.test == XPathStep.TEST_NAME_WILDCARD) {
ref.add(TreeReference.NAME_WILDCARD,TreeReference.INDEX_UNBOUND);
parentsAllowed=false;
}
 else {
throw new XPathUnsupportedException(""String_Node_Str"");
}
}
 else {
throw new XPathUnsupportedException(""String_Node_Str"");
}
if (step.predicates.length > 0) {
int refLevel=ref.getRefLevel();
Vector<XPathExpression> v=new Vector<XPathExpression>();
for (int j=0; j < step.predicates.length; j++) {
v.addElement(step.predicates[j]);
}
ref.addPredicate(i,v);
}
}
return ref;
}","/** 
 * Translate an xpath path reference into a TreeReference TreeReferences only support a subset of xpath paths: - only simple child name tests 'child::name', '.', and '..' allowed. - '../' steps must come before anything else
 * @param allowPredicates Is deprecated! Don't use this.
 * @return a reference built from this path expression
 */
public TreeReference getReference(boolean allowPredicates) throws XPathUnsupportedException {
  TreeReference ref=new TreeReference();
  boolean parentsAllowed;
switch (init_context) {
case XPathPathExpr.INIT_CONTEXT_ROOT:
    ref.setRefLevel(TreeReference.REF_ABSOLUTE);
  parentsAllowed=false;
break;
case XPathPathExpr.INIT_CONTEXT_RELATIVE:
ref.setRefLevel(0);
parentsAllowed=true;
break;
case XPathPathExpr.INIT_CONTEXT_EXPR:
if (this.filtExpr.x != null && this.filtExpr.x instanceof XPathFuncExpr) {
XPathFuncExpr func=(XPathFuncExpr)(this.filtExpr.x);
if (func.id.toString().equals(""String_Node_Str"")) {
ref.setRefLevel(TreeReference.REF_ABSOLUTE);
parentsAllowed=false;
if (func.args.length != 1) {
throw new XPathUnsupportedException(""String_Node_Str"" + func.args.length + ""String_Node_Str"");
}
if (!(func.args[0] instanceof XPathStringLiteral)) {
throw new XPathUnsupportedException(""String_Node_Str"");
}
XPathStringLiteral strLit=(XPathStringLiteral)(func.args[0]);
ref.setInstanceName(strLit.s);
}
 else if (func.id.toString().equals(""String_Node_Str"")) {
parentsAllowed=true;
ref.setContext(TreeReference.CONTEXT_ORIGINAL);
}
 else {
throw new XPathUnsupportedException(""String_Node_Str"");
}
}
 else {
throw new XPathUnsupportedException(""String_Node_Str"");
}
break;
default :
throw new XPathUnsupportedException(""String_Node_Str"");
}
final String otherStepMessage=""String_Node_Str"";
for (XPathStep step : steps) {
if (step.axis == XPathStep.AXIS_SELF) {
if (step.test != XPathStep.TEST_TYPE_NODE) {
throw new XPathUnsupportedException(otherStepMessage);
}
}
 else if (step.axis == XPathStep.AXIS_PARENT) {
if (!parentsAllowed || step.test != XPathStep.TEST_TYPE_NODE) {
throw new XPathUnsupportedException(otherStepMessage);
}
 else {
ref.incrementRefLevel();
}
}
 else if (step.axis == XPathStep.AXIS_ATTRIBUTE) {
if (step.test == XPathStep.TEST_NAME) {
ref.add(step.name.toString(),TreeReference.INDEX_ATTRIBUTE);
parentsAllowed=false;
}
 else {
throw new XPathUnsupportedException(""String_Node_Str"");
}
}
 else if (step.axis == XPathStep.AXIS_CHILD) {
if (step.test == XPathStep.TEST_NAME) {
ref.add(step.name.toString(),TreeReference.INDEX_UNBOUND);
parentsAllowed=false;
}
 else if (step.test == XPathStep.TEST_NAME_WILDCARD) {
ref.add(TreeReference.NAME_WILDCARD,TreeReference.INDEX_UNBOUND);
parentsAllowed=false;
}
 else {
throw new XPathUnsupportedException(otherStepMessage);
}
}
 else {
throw new XPathUnsupportedException(otherStepMessage);
}
if (step.predicates.length > 0) {
int refLevel=ref.getRefLevel();
Vector<XPathExpression> v=new Vector<XPathExpression>();
for (int j=0; j < step.predicates.length; j++) {
v.addElement(step.predicates[j]);
}
ref.addPredicate(ref.size() - 1,v);
}
}
return ref;
}",0.9087603305785124
146726,"/** 
 * Join this reference with the base reference argument.
 * @param baseRef an absolute reference or a relative reference with only'../'s
 * @return a join of this reference with the base reference argument.Returns a clone of this reference if it is absolute, and null if this reference has '../'s but baseRef argument a non-empty relative reference.
 */
public TreeReference parent(TreeReference baseRef){
  if (isAbsolute()) {
    return this.clone();
  }
 else {
    TreeReference newRef=baseRef.clone();
    if (refLevel > 0) {
      if (!baseRef.isAbsolute() && baseRef.size() == 0) {
        newRef.refLevel+=refLevel;
      }
 else {
        return null;
      }
    }
    for (    TreeReferenceLevel l : this.data) {
      newRef.add(l);
    }
    return newRef;
  }
}","/** 
 * Join this reference with the base reference argument.
 * @param baseRef an absolute reference or a relative reference with only'../'s
 * @return a join of this reference with the base reference argument.Returns a clone of this reference if it is absolute, and null if this reference has '../'s but baseRef argument a non-empty relative reference.
 */
public TreeReference parent(TreeReference baseRef){
  if (isAbsolute()) {
    return this.clone();
  }
 else {
    TreeReference newRef=baseRef.clone();
    if (refLevel > 0) {
      if (!baseRef.isAbsolute() && baseRef.size() == 0) {
        newRef.refLevel+=refLevel;
      }
 else {
        return null;
      }
    }
    for (    TreeReferenceLevel l : this.data) {
      newRef.add(l.shallowCopy());
    }
    return newRef;
  }
}",0.9911054637865312
146727,"/** 
 * Evaluate this reference in terms of a base absolute reference. For instance, anchoring ../../d/e/f to /a/b/c, results in  /a/d/e/f. NOTE: This function works when baseRef contains INDEX_UNBOUND multiplicites. Conditions depend on this behavior, but it is def slightly icky
 * @param baseRef an absolute reference to be anchored to.
 * @return null if base reference isn't absolute or there are too many'../'.
 */
public TreeReference anchor(TreeReference baseRef){
  if (isAbsolute()) {
    return this.clone();
  }
 else   if (!baseRef.isAbsolute() || (refLevel > baseRef.size())) {
    return null;
  }
 else {
    TreeReference newRef=baseRef.clone();
    for (int i=0; i < refLevel; i++) {
      newRef.removeLastLevel();
    }
    for (int i=0; i < size(); i++) {
      newRef.add(this.data.elementAt(i));
    }
    return newRef;
  }
}","/** 
 * Evaluate this reference in terms of a base absolute reference. For instance, anchoring ../../d/e/f to /a/b/c, results in  /a/d/e/f. NOTE: This function works when baseRef contains INDEX_UNBOUND multiplicites. Conditions depend on this behavior, but it is def slightly icky
 * @param baseRef an absolute reference to be anchored to.
 * @return null if base reference isn't absolute or there are too many'../'.
 */
public TreeReference anchor(TreeReference baseRef){
  if (isAbsolute()) {
    return this.clone();
  }
 else   if (!baseRef.isAbsolute() || (refLevel > baseRef.size())) {
    return null;
  }
 else {
    TreeReference newRef=baseRef.clone();
    for (int i=0; i < refLevel; i++) {
      newRef.removeLastLevel();
    }
    for (int i=0; i < size(); i++) {
      newRef.add(this.data.elementAt(i).shallowCopy());
    }
    return newRef;
  }
}",0.991822429906542
146728,"/** 
 * Return a copy of the reference
 */
public TreeReference clone(){
  TreeReference newRef=new TreeReference();
  newRef.setRefLevel(this.refLevel);
  for (  TreeReferenceLevel l : data) {
    newRef.add(l);
  }
  if (instanceName != null) {
    newRef.setInstanceName(instanceName);
  }
  newRef.contextType=this.contextType;
  return newRef;
}","/** 
 * Return a copy of the reference
 */
public TreeReference clone(){
  TreeReference newRef=new TreeReference();
  newRef.setRefLevel(this.refLevel);
  for (  TreeReferenceLevel l : data) {
    newRef.add(l.shallowCopy());
  }
  if (instanceName != null) {
    newRef.setInstanceName(instanceName);
  }
  newRef.contextType=this.contextType;
  return newRef;
}",0.9803921568627452
146729,"public Vector getChildrenWithName(String name){
  return cache().getChildrenWithName(name);
}","public Vector getChildrenWithName(String name){
  Vector children=super.getChildrenWithName(CaseChildElement.this.parent.intern(name));
  if (done[0] == false) {
    return children;
  }
  if (children.size() == 0) {
    TreeElement emptyNode=new TreeElement(name);
    emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
    this.addChild(emptyNode);
    emptyNode.setParent(this);
    children.add(emptyNode);
  }
  return children;
}",0.2651933701657458
146730,"private TreeElement cache(){
  if (recordId == TreeReference.INDEX_TEMPLATE) {
    return empty;
  }
synchronized (parent.treeCache) {
    TreeElement element=parent.treeCache.retrieve(recordId);
    if (element != null) {
      return element;
    }
    if (recordId == -1) {
      Vector<Integer> ids=parent.storage.getIDsForValue(""String_Node_Str"",caseId);
      recordId=ids.elementAt(0).intValue();
    }
    TreeElement cacheBuilder=new TreeElement(""String_Node_Str"");
    Case c=parent.getCase(recordId);
    caseId=c.getCaseId();
    cacheBuilder=new TreeElement(""String_Node_Str"");
    cacheBuilder.setMult(this.mult);
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getCaseId());
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getTypeId());
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.isClosed() ? ""String_Node_Str"" : ""String_Node_Str"");
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getUserId() == null ? ""String_Node_Str"" : c.getUserId());
    final boolean[] done=new boolean[]{false};
    if (!parent.reportMode) {
      TreeElement scratch=new TreeElement(""String_Node_Str"");
      String name=c.getName();
      scratch.setAnswer(new StringData(name == null ? ""String_Node_Str"" : name));
      cacheBuilder.addChild(scratch);
      scratch=new TreeElement(""String_Node_Str"");
      scratch.setAnswer(new DateData(c.getDateOpened()));
      cacheBuilder.addChild(scratch);
      scratch=new TreeElement(LAST_MODIFIED_KEY);
      scratch.setAnswer(new DateData(c.getLastModified()));
      cacheBuilder.addChild(scratch);
      for (Enumeration en=c.getProperties().keys(); en.hasMoreElements(); ) {
        String key=(String)en.nextElement();
        if (LAST_MODIFIED_KEY.equals(key)) {
          continue;
        }
        scratch=new TreeElement(parent.intern(key));
        Object temp=c.getProperty(key);
        if (temp instanceof String) {
          scratch.setValue(new UncastData((String)temp));
        }
 else {
          scratch.setValue(PreloadUtils.wrapIndeterminedObject(temp));
        }
        cacheBuilder.addChild(scratch);
      }
      TreeElement index=new TreeElement(""String_Node_Str""){
        public TreeElement getChild(        String name,        int multiplicity){
          TreeElement child=super.getChild(CaseChildElement.this.parent.intern(name),multiplicity);
          if (done[0] == false) {
            return child;
          }
          if (multiplicity >= 0 && child == null) {
            TreeElement emptyNode=new TreeElement(CaseChildElement.this.parent.intern(name));
            emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            return emptyNode;
          }
          return child;
        }
      }
;
      Vector<CaseIndex> indices=c.getIndices();
      for (      CaseIndex i : indices) {
        scratch=new TreeElement(i.getName());
        scratch.setAttribute(null,""String_Node_Str"",this.parent.intern(i.getTargetType()));
        scratch.setValue(new UncastData(i.getTarget()));
        index.addChild(scratch);
      }
      cacheBuilder.addChild(index);
      TreeElement attachments=new TreeElement(""String_Node_Str""){
        public TreeElement getChild(        String name,        int multiplicity){
          TreeElement child=super.getChild(CaseChildElement.this.parent.intern(name),multiplicity);
          if (done[0] == false) {
            return child;
          }
          if (multiplicity >= 0 && child == null) {
            TreeElement emptyNode=new TreeElement(CaseChildElement.this.parent.intern(name));
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            return emptyNode;
          }
          return child;
        }
      }
;
      for (      String attachment : c.getAttachments()) {
        scratch=new TreeElement(attachment);
        scratch.setValue(new UncastData(c.getAttachmentSource(attachment)));
        attachments.addChild(scratch);
      }
      cacheBuilder.addChild(attachments);
    }
    cacheBuilder.setParent(this.parent);
    done[0]=true;
    parent.treeCache.register(recordId,cacheBuilder);
    return cacheBuilder;
  }
}","private TreeElement cache(){
  if (recordId == TreeReference.INDEX_TEMPLATE) {
    return empty;
  }
synchronized (parent.treeCache) {
    TreeElement element=parent.treeCache.retrieve(recordId);
    if (element != null) {
      return element;
    }
    if (recordId == -1) {
      Vector<Integer> ids=parent.storage.getIDsForValue(""String_Node_Str"",caseId);
      recordId=ids.elementAt(0).intValue();
    }
    TreeElement cacheBuilder=new TreeElement(""String_Node_Str"");
    Case c=parent.getCase(recordId);
    caseId=c.getCaseId();
    cacheBuilder=new TreeElement(""String_Node_Str"");
    cacheBuilder.setMult(this.mult);
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getCaseId());
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getTypeId());
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.isClosed() ? ""String_Node_Str"" : ""String_Node_Str"");
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getUserId() == null ? ""String_Node_Str"" : c.getUserId());
    final boolean[] done=new boolean[]{false};
    if (!parent.reportMode) {
      TreeElement scratch=new TreeElement(""String_Node_Str"");
      String name=c.getName();
      scratch.setAnswer(new StringData(name == null ? ""String_Node_Str"" : name));
      cacheBuilder.addChild(scratch);
      scratch=new TreeElement(""String_Node_Str"");
      scratch.setAnswer(new DateData(c.getDateOpened()));
      cacheBuilder.addChild(scratch);
      scratch=new TreeElement(LAST_MODIFIED_KEY);
      scratch.setAnswer(new DateData(c.getLastModified()));
      cacheBuilder.addChild(scratch);
      for (Enumeration en=c.getProperties().keys(); en.hasMoreElements(); ) {
        String key=(String)en.nextElement();
        if (LAST_MODIFIED_KEY.equals(key)) {
          continue;
        }
        scratch=new TreeElement(parent.intern(key));
        Object temp=c.getProperty(key);
        if (temp instanceof String) {
          scratch.setValue(new UncastData((String)temp));
        }
 else {
          scratch.setValue(PreloadUtils.wrapIndeterminedObject(temp));
        }
        cacheBuilder.addChild(scratch);
      }
      TreeElement index=new TreeElement(""String_Node_Str""){
        public TreeElement getChild(        String name,        int multiplicity){
          TreeElement child=super.getChild(CaseChildElement.this.parent.intern(name),multiplicity);
          if (done[0] == false) {
            return child;
          }
          if (multiplicity >= 0 && child == null) {
            TreeElement emptyNode=new TreeElement(CaseChildElement.this.parent.intern(name));
            emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            return emptyNode;
          }
          return child;
        }
        public Vector getChildrenWithName(        String name){
          Vector children=super.getChildrenWithName(CaseChildElement.this.parent.intern(name));
          if (done[0] == false) {
            return children;
          }
          if (children.size() == 0) {
            TreeElement emptyNode=new TreeElement(name);
            emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            children.add(emptyNode);
          }
          return children;
        }
      }
;
      Vector<CaseIndex> indices=c.getIndices();
      for (      CaseIndex i : indices) {
        scratch=new TreeElement(i.getName());
        scratch.setAttribute(null,""String_Node_Str"",this.parent.intern(i.getTargetType()));
        scratch.setValue(new UncastData(i.getTarget()));
        index.addChild(scratch);
      }
      cacheBuilder.addChild(index);
      TreeElement attachments=new TreeElement(""String_Node_Str""){
        public TreeElement getChild(        String name,        int multiplicity){
          TreeElement child=super.getChild(CaseChildElement.this.parent.intern(name),multiplicity);
          if (done[0] == false) {
            return child;
          }
          if (multiplicity >= 0 && child == null) {
            TreeElement emptyNode=new TreeElement(CaseChildElement.this.parent.intern(name));
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            return emptyNode;
          }
          return child;
        }
      }
;
      for (      String attachment : c.getAttachments()) {
        scratch=new TreeElement(attachment);
        scratch.setValue(new UncastData(c.getAttachmentSource(attachment)));
        attachments.addChild(scratch);
      }
      cacheBuilder.addChild(attachments);
    }
    cacheBuilder.setParent(this.parent);
    done[0]=true;
    parent.treeCache.register(recordId,cacheBuilder);
    return cacheBuilder;
  }
}",0.7074497612967692
146731,"public void populateMenu(List list,String menu,MultimediaListener listener){
  suiteTable.clear();
  entryTable.clear();
  menuTable.clear();
  Enumeration en=session.platform.getInstalledSuites().elements();
  EvaluationContext ec=null;
  while (en.hasMoreElements()) {
    Suite suite=(Suite)en.nextElement();
    for (    Menu m : suite.getMenus()) {
      try {
        XPathExpression relevance=m.getMenuRelevance();
        if (relevance != null) {
          if (ec == null) {
            ec=session.getEvaluationContext(getIif());
          }
          if (XPathFuncExpr.toBoolean(relevance.eval(ec)).booleanValue() == false) {
            continue;
          }
        }
      }
 catch (      XPathSyntaxException e) {
        e.printStackTrace();
      }
      if (menu.equals(m.getId())) {
        for (int i=0; i < m.getCommandIds().size(); ++i) {
          try {
            String id=m.getCommandIds().elementAt(i);
            XPathExpression relevant=m.getCommandRelevance(i);
            if (relevant != null) {
              if (ec == null) {
                ec=session.getEvaluationContext(getIif());
              }
              if (XPathFuncExpr.toBoolean(relevant.eval(ec)).booleanValue() == false) {
                continue;
              }
            }
            Entry e=suite.getEntries().get(id);
            if (e.getXFormNamespace() == null) {
              if (session.getNeededDatum(e) == null) {
                continue;
              }
            }
            int location=list.size();
            list.append(CommCareUtil.getMenuText(e.getText(),suite,location),ImageUtils.getImage(e.getImageURI()));
            if (listener != null && (e.getAudioURI() != null && !""String_Node_Str"".equals(e.getAudioURI()))) {
              listener.registerAudioTrigger(location,e.getAudioURI());
            }
            suiteTable.put(new Integer(location),suite);
            entryTable.put(new Integer(location),e);
          }
 catch (          XPathSyntaxException xpse) {
            throw new RuntimeException(xpse.getMessage());
          }
        }
      }
 else       if (m.getRoot().equals(menu)) {
        int location=list.size();
        list.append(CommCareUtil.getMenuText(m.getName(),suite,location),ImageUtils.getImage(m.getImageURI()));
        if (listener != null && (m.getAudioURI() != null && !""String_Node_Str"".equals(m.getAudioURI()))) {
          listener.registerAudioTrigger(location,m.getAudioURI());
        }
        suiteTable.put(new Integer(location),suite);
        menuTable.put(new Integer(location),m);
      }
    }
  }
}","public void populateMenu(List list,String menu,MultimediaListener listener){
  suiteTable.clear();
  entryTable.clear();
  menuTable.clear();
  Enumeration en=session.platform.getInstalledSuites().elements();
  EvaluationContext ec=null;
  while (en.hasMoreElements()) {
    Suite suite=(Suite)en.nextElement();
    for (    Menu m : suite.getMenus()) {
      try {
        XPathExpression relevance=m.getMenuRelevance();
        if (relevance != null) {
          if (ec == null) {
            ec=session.getEvaluationContext(getIif(),m.getId());
          }
          if (XPathFuncExpr.toBoolean(relevance.eval(ec)).booleanValue() == false) {
            continue;
          }
        }
      }
 catch (      XPathSyntaxException e) {
        e.printStackTrace();
      }
      if (menu.equals(m.getId())) {
        for (int i=0; i < m.getCommandIds().size(); ++i) {
          try {
            String id=m.getCommandIds().elementAt(i);
            XPathExpression relevant=m.getCommandRelevance(i);
            if (relevant != null) {
              if (ec == null) {
                ec=session.getEvaluationContext(getIif());
              }
              if (XPathFuncExpr.toBoolean(relevant.eval(ec)).booleanValue() == false) {
                continue;
              }
            }
            Entry e=suite.getEntries().get(id);
            if (e.getXFormNamespace() == null) {
              if (session.getNeededDatum(e) == null) {
                continue;
              }
            }
            int location=list.size();
            list.append(CommCareUtil.getMenuText(e.getText(),suite,location),ImageUtils.getImage(e.getImageURI()));
            if (listener != null && (e.getAudioURI() != null && !""String_Node_Str"".equals(e.getAudioURI()))) {
              listener.registerAudioTrigger(location,e.getAudioURI());
            }
            suiteTable.put(new Integer(location),suite);
            entryTable.put(new Integer(location),e);
          }
 catch (          XPathSyntaxException xpse) {
            throw new RuntimeException(xpse.getMessage());
          }
        }
      }
 else       if (m.getRoot().equals(menu)) {
        int location=list.size();
        list.append(CommCareUtil.getMenuText(m.getName(),suite,location),ImageUtils.getImage(m.getImageURI()));
        if (listener != null && (m.getAudioURI() != null && !""String_Node_Str"".equals(m.getAudioURI()))) {
          listener.registerAudioTrigger(location,m.getAudioURI());
        }
        suiteTable.put(new Integer(location),suite);
        menuTable.put(new Integer(location),m);
      }
    }
  }
}",0.9980724749421742
146732,"public EvaluationContext getEvaluationContext(InstanceInitializationFactory iif){
  if (getCommand() == null) {
    return new EvaluationContext(null);
  }
  Entry entry=getEntriesForCommand(getCommand()).elementAt(0);
  Hashtable<String,DataInstance> instances=entry.getInstances();
  for (Enumeration en=instances.keys(); en.hasMoreElements(); ) {
    String key=(String)en.nextElement();
    instances.get(key).initialize(iif,key);
  }
  return new EvaluationContext(null,instances);
}","/** 
 * Retrieve an evaluation context in which to evaluate expressions in the context of a given command in the installed app
 * @param iif the instance initializer for the current platform
 * @return Evaluation context for a command in the installed app
 */
public EvaluationContext getEvaluationContext(InstanceInitializationFactory iif,String command){
  if (command == null) {
    return new EvaluationContext(null);
  }
  Entry entry=getEntriesForCommand(command).elementAt(0);
  Hashtable<String,DataInstance> instances=entry.getInstances();
  for (Enumeration en=instances.keys(); en.hasMoreElements(); ) {
    String key=(String)en.nextElement();
    instances.get(key).initialize(iif,key);
  }
  return new EvaluationContext(null,instances);
}",0.7671232876712328
146733,"private int getDataType(String type){
  int dataType=Constants.DATATYPE_NULL;
  if (type != null) {
    if (type.indexOf(""String_Node_Str"") != -1) {
      type=type.substring(type.indexOf(""String_Node_Str"") + 1);
    }
    if (typeMappings.containsKey(type)) {
      dataType=((Integer)typeMappings.get(type)).intValue();
    }
 else {
      dataType=Constants.DATATYPE_UNSUPPORTED;
      reporter.warning(XFormParserReporter.TYPE_ERROR_PRONE,""String_Node_Str"" + type + ""String_Node_Str"",null);
    }
  }
  return dataType;
}","/** 
 * Gets the datatype id corresponding to type string passed it. Undefined types result in returning the unsupported datatype id and raising a warning.
 * @param type is the String value of a elements's type attribute.
 * @return int representing datatype id
 */
private int getDataType(String type){
  int dataType=Constants.DATATYPE_NULL;
  if (type != null) {
    if (type.indexOf(""String_Node_Str"") != -1) {
      type=type.substring(type.indexOf(""String_Node_Str"") + 1);
    }
    if (typeMappings.containsKey(type)) {
      dataType=((Integer)typeMappings.get(type)).intValue();
    }
 else {
      dataType=Constants.DATATYPE_UNSUPPORTED;
      reporter.warning(XFormParserReporter.TYPE_ERROR_PRONE,""String_Node_Str"" + type + ""String_Node_Str"",null);
    }
  }
  return dataType;
}",0.7972665148063781
146734,"private static void initTypeMappings(){
  typeMappings=new Hashtable<String,Integer>();
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_TEXT));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_INTEGER));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_LONG));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_INTEGER));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DATE_TIME));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DATE));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_TIME));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_BOOLEAN));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_CHOICE));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_CHOICE_LIST));
  typeMappings.put(SELECTONE,DataUtil.integer(Constants.DATATYPE_CHOICE));
  typeMappings.put(SELECT,DataUtil.integer(Constants.DATATYPE_CHOICE_LIST));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_GEOPOINT));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_BARCODE));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_BINARY));
}","/** 
 * Setup mapping from a tag's type attribute to its datatype id.
 */
private static void initTypeMappings(){
  typeMappings=new Hashtable<String,Integer>();
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_TEXT));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_INTEGER));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_LONG));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_INTEGER));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DATE_TIME));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DATE));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_TIME));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_BOOLEAN));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_CHOICE));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_CHOICE_LIST));
  typeMappings.put(SELECTONE,DataUtil.integer(Constants.DATATYPE_CHOICE));
  typeMappings.put(SELECT,DataUtil.integer(Constants.DATATYPE_CHOICE_LIST));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_GEOPOINT));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_BARCODE));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_BINARY));
}",0.9840448469167744
146735,"private void parseElement(Element e,Object parent,Hashtable<String,IElementHandler> handlers){
  String name=e.getName();
  String[] suppressWarningArr={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Vector<String> suppressWarning=new Vector<String>();
  for (int i=0; i < suppressWarningArr.length; i++) {
    suppressWarning.addElement(suppressWarningArr[i]);
  }
  IElementHandler eh=handlers.get(name);
  if (eh != null) {
    eh.handle(this,e,parent);
  }
 else {
    if (!suppressWarning.contains(name)) {
      reporter.warning(XFormParserReporter.TYPE_UNKNOWN_MARKUP,""String_Node_Str"" + name + ""String_Node_Str"",getVagueLocation(e));
    }
    for (int i=0; i < e.getChildCount(); i++) {
      if (e.getType(i) == Element.ELEMENT) {
        parseElement(e.getElement(i),parent,handlers);
      }
    }
  }
}","/** 
 * @param element  is the current element we are parsing
 * @param parent   is the parent to the element we are parsing
 * @param handlers maps tags to IElementHandlers, used to perform parsing of that tag
 */
private void parseElement(Element e,Object parent,Hashtable<String,IElementHandler> handlers){
  String name=e.getName();
  String namespace=e.getNamespace();
  String[] suppressWarningArr={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Vector<String> suppressWarning=new Vector<String>();
  for (int i=0; i < suppressWarningArr.length; i++) {
    suppressWarning.addElement(suppressWarningArr[i]);
  }
  IElementHandler eh=handlers.get(name);
  if (eh != null) {
    eh.handle(this,e,parent);
  }
 else {
    if (inSpecExtension(namespace,name)) {
      parseUnregisteredSpecExtension(namespace,name,e,parent,handlers);
    }
 else {
      if (!suppressWarning.contains(name)) {
        reporter.warning(XFormParserReporter.TYPE_UNKNOWN_MARKUP,""String_Node_Str"" + name + ""String_Node_Str"",getVagueLocation(e));
      }
      for (int i=0; i < e.getChildCount(); i++) {
        if (e.getType(i) == Element.ELEMENT) {
          parseElement(e.getElement(i),parent,handlers);
        }
      }
    }
  }
}",0.8331262939958592
146736,"public static void addDataType(String type,int dataType){
  typeMappings.put(type,DataUtil.integer(dataType));
}","/** 
 * Register a type to datatype id mapping
 * @param type is the String value of a elements's type attribute.
 * @param int  representing datatype id defined in Constants
 */
public static void addDataType(String type,int dataType){
  typeMappings.put(type,DataUtil.integer(dataType));
}",0.5558312655086849
146737,"/** 
 * A general purpose method for taking an abstract tree element and attempting to batch fetch its children's predicates through static evaluation. 
 * @param parent The element whose children are being requested
 * @param childAttributeHintMap A mapping of paths which can be evaluated in memory.
 * @param name The name of the children being queried
 * @param mult the multiplicity being queried for (could be undefined)
 * @param predicates the evaluation step predicates which are being processed. NOTE: This vectorwill be modified by this method as a side effect if a predicate was succesfully statically evaluated
 * @param evalContext The current eval context.
 * @return A vector of TreeReferences which contains the nodes matched by predicate expressions.Expressions which result in returned matches will be removed from the predicate collection which is provided
 */
public static Vector<TreeReference> tryBatchChildFetch(AbstractTreeElement parent,Hashtable<XPathPathExpr,Hashtable<String,TreeElement[]>> childAttributeHintMap,String name,int mult,Vector<XPathExpression> predicates,EvaluationContext evalContext){
  if (mult != TreeReference.INDEX_UNBOUND || predicates == null) {
    return null;
  }
  Vector<Integer> toRemove=new Vector<Integer>();
  Vector<TreeReference> selectedChildren=null;
  Vector<String> attributes=null;
  Vector<XPathPathExpr> indices=null;
  Vector<TreeElement> kids=null;
  predicate:   for (int i=0; i < predicates.size(); ++i) {
    XPathExpression xpe=predicates.elementAt(i);
    if (xpe instanceof XPathEqExpr) {
      XPathExpression left=((XPathEqExpr)xpe).a;
      XPathExpression right=((XPathEqExpr)xpe).b;
      if (left instanceof XPathPathExpr && (right instanceof XPathStringLiteral || right instanceof XPathPathExpr)) {
        String literalMatch=null;
        if (right instanceof XPathStringLiteral) {
          literalMatch=((XPathStringLiteral)right).s;
        }
 else         if (right instanceof XPathPathExpr) {
          for (          XPathStep step : ((XPathPathExpr)right).steps) {
            if (step.predicates.length > 0) {
              break;
            }
          }
          try {
            Object o=XPathFuncExpr.unpack(right.eval(evalContext));
            literalMatch=XPathFuncExpr.toString(o);
          }
 catch (          XPathException e) {
            e.printStackTrace();
            break;
          }
        }
        if (childAttributeHintMap != null) {
          if (childAttributeHintMap.containsKey(left)) {
            TreeElement[] children=childAttributeHintMap.get(left).get(literalMatch);
            if (selectedChildren == null) {
              selectedChildren=new Vector<TreeReference>();
            }
            if (children != null) {
              for (              TreeElement element : children) {
                selectedChildren.addElement(element.getRef());
              }
            }
            toRemove.addElement(DataUtil.integer(i));
            continue predicate;
          }
        }
        if (attributes == null) {
          attributes=new Vector<String>();
          indices=new Vector<XPathPathExpr>();
          kids=parent.getChildrenWithName(name);
          if (kids.size() == 0) {
            return null;
          }
          AbstractTreeElement kid=kids.elementAt(0);
          for (int j=0; j < kid.getAttributeCount(); ++j) {
            String attribute=kid.getAttributeName(j);
            XPathPathExpr path=TreeUtilities.getXPathAttrExpression(attribute);
            attributes.addElement(attribute);
            indices.addElement(path);
          }
        }
        for (int j=0; j < indices.size(); ++j) {
          XPathPathExpr expr=indices.elementAt(j);
          if (expr.equals(left)) {
            String attributeName=attributes.elementAt(j);
            for (int kidI=0; kidI < kids.size(); ++kidI) {
              if (kids.elementAt(kidI).getAttributeValue(null,attributeName).equals(literalMatch)) {
                if (selectedChildren == null) {
                  selectedChildren=new Vector<TreeReference>();
                }
                selectedChildren.addElement(kids.elementAt(kidI).getRef());
              }
            }
            toRemove.addElement(DataUtil.integer(i));
            continue predicate;
          }
        }
      }
    }
    break;
  }
  if (selectedChildren == null) {
    return null;
  }
  for (int i=toRemove.size() - 1; i >= 0; i--) {
    predicates.removeElementAt(toRemove.elementAt(i).intValue());
  }
  return selectedChildren;
}","/** 
 * A general purpose method for taking an abstract tree element and attempting to batch fetch its children's predicates through static evaluation. 
 * @param parent The element whose children are being requested
 * @param childAttributeHintMap A mapping of paths which can be evaluated in memory.
 * @param name The name of the children being queried
 * @param mult the multiplicity being queried for (could be undefined)
 * @param predicates the evaluation step predicates which are being processed. NOTE: This vectorwill be modified by this method as a side effect if a predicate was succesfully statically evaluated
 * @param evalContext The current eval context.
 * @return A vector of TreeReferences which contains the nodes matched by predicate expressions.Expressions which result in returned matches will be removed from the predicate collection which is provided
 */
public static Vector<TreeReference> tryBatchChildFetch(AbstractTreeElement parent,Hashtable<XPathPathExpr,Hashtable<String,TreeElement[]>> childAttributeHintMap,String name,int mult,Vector<XPathExpression> predicates,EvaluationContext evalContext){
  if (mult != TreeReference.INDEX_UNBOUND || predicates == null) {
    return null;
  }
  Vector<Integer> toRemove=new Vector<Integer>();
  Vector<TreeReference> allSelectedChildren=null;
  Vector<String> attributes=null;
  Vector<XPathPathExpr> indices=null;
  Vector<TreeElement> kids=null;
  predicate:   for (int i=0; i < predicates.size(); ++i) {
    Vector<TreeReference> predicateMatches=new Vector<TreeReference>();
    XPathExpression xpe=predicates.elementAt(i);
    if (xpe instanceof XPathEqExpr) {
      XPathExpression left=((XPathEqExpr)xpe).a;
      XPathExpression right=((XPathEqExpr)xpe).b;
      if (left instanceof XPathPathExpr && (right instanceof XPathStringLiteral || right instanceof XPathPathExpr)) {
        String literalMatch=null;
        if (right instanceof XPathStringLiteral) {
          literalMatch=((XPathStringLiteral)right).s;
        }
 else         if (right instanceof XPathPathExpr) {
          for (          XPathStep step : ((XPathPathExpr)right).steps) {
            if (step.predicates.length > 0) {
              break;
            }
          }
          try {
            Object o=XPathFuncExpr.unpack(right.eval(evalContext));
            literalMatch=XPathFuncExpr.toString(o);
          }
 catch (          XPathException e) {
            e.printStackTrace();
            break;
          }
        }
        if (childAttributeHintMap != null) {
          if (childAttributeHintMap.containsKey(left)) {
            TreeElement[] children=childAttributeHintMap.get(left).get(literalMatch);
            if (children != null) {
              for (              TreeElement element : children) {
                predicateMatches.addElement(element.getRef());
              }
            }
            allSelectedChildren=merge(allSelectedChildren,predicateMatches,i,toRemove);
            continue predicate;
          }
        }
        if (attributes == null) {
          attributes=new Vector<String>();
          indices=new Vector<XPathPathExpr>();
          kids=parent.getChildrenWithName(name);
          if (kids.size() == 0) {
            return null;
          }
          AbstractTreeElement kid=kids.elementAt(0);
          for (int j=0; j < kid.getAttributeCount(); ++j) {
            String attribute=kid.getAttributeName(j);
            XPathPathExpr path=TreeUtilities.getXPathAttrExpression(attribute);
            attributes.addElement(attribute);
            indices.addElement(path);
          }
        }
        for (int j=0; j < indices.size(); ++j) {
          XPathPathExpr expr=indices.elementAt(j);
          if (expr.equals(left)) {
            String attributeName=attributes.elementAt(j);
            for (int kidI=0; kidI < kids.size(); ++kidI) {
              if (kids.elementAt(kidI).getAttributeValue(null,attributeName).equals(literalMatch)) {
                predicateMatches.addElement(kids.elementAt(kidI).getRef());
              }
            }
            allSelectedChildren=merge(allSelectedChildren,predicateMatches,i,toRemove);
            continue predicate;
          }
        }
      }
    }
    break;
  }
  if (allSelectedChildren == null) {
    return null;
  }
  for (int i=toRemove.size() - 1; i >= 0; i--) {
    predicates.removeElementAt(toRemove.elementAt(i).intValue());
  }
  return allSelectedChildren;
}",0.8800177916157012
146738,"public static Vector<Integer> union(Vector<Integer> a,Vector<Integer> b){
  Vector<Integer> u=new Vector<Integer>();
  for (  Integer i : a) {
    if (b.contains(i)) {
      u.addElement(i);
    }
  }
  return u;
}","public <T>Vector<T> union(Vector<T> a,Vector<T> b){
  Vector<T> u=new Vector<T>();
  for (  T i : a) {
    if (b.contains(i)) {
      u.addElement(i);
    }
  }
  return u;
}",0.8505154639175257
146739,"/** 
 * A general purpose method for taking an abstract tree element and attempting to batch fetch its children's predicates through static evaluation. 
 * @param parent The element whose children are being requested
 * @param childAttributeHintMap A mapping of paths which can be evaluated in memory.
 * @param name The name of the children being queried
 * @param mult the multiplicity being queried for (could be undefined)
 * @param predicates the evaluation step predicates which are being processed. NOTE: This vectorwill be modified by this method as a side effect if a predicate was succesfully statically evaluated
 * @param evalContext The current eval context.
 * @return A vector of TreeReferences which contains the nodes matched by predicate expressions.Expressions which result in returned matches will be removed from the predicate collection which is provided
 */
public static Vector<TreeReference> tryBatchChildFetch(AbstractTreeElement parent,Hashtable<XPathPathExpr,Hashtable<String,TreeElement[]>> childAttributeHintMap,String name,int mult,Vector<XPathExpression> predicates,EvaluationContext evalContext){
  if (mult != TreeReference.INDEX_UNBOUND || predicates == null) {
    return null;
  }
  Vector<Integer> toRemove=new Vector<Integer>();
  Vector<TreeReference> selectedChildren=null;
  Vector<String> attributes=null;
  Vector<XPathPathExpr> indices=null;
  Vector<TreeElement> kids=null;
  predicate:   for (int i=0; i < predicates.size(); ++i) {
    XPathExpression xpe=predicates.elementAt(i);
    if (xpe instanceof XPathEqExpr) {
      XPathExpression left=((XPathEqExpr)xpe).a;
      XPathExpression right=((XPathEqExpr)xpe).b;
      if (left instanceof XPathPathExpr && (right instanceof XPathStringLiteral || right instanceof XPathPathExpr)) {
        String literalMatch=null;
        if (right instanceof XPathStringLiteral) {
          literalMatch=((XPathStringLiteral)right).s;
        }
 else         if (right instanceof XPathPathExpr) {
          for (          XPathStep step : ((XPathPathExpr)right).steps) {
            if (step.predicates.length > 0) {
              break;
            }
          }
          try {
            Object o=XPathFuncExpr.unpack(right.eval(evalContext));
            literalMatch=XPathFuncExpr.toString(o);
          }
 catch (          XPathException e) {
            e.printStackTrace();
            break;
          }
        }
        if (childAttributeHintMap != null) {
          if (childAttributeHintMap.containsKey(left)) {
            TreeElement[] children=childAttributeHintMap.get(left).get(literalMatch);
            if (selectedChildren == null) {
              selectedChildren=new Vector<TreeReference>();
            }
            if (children != null) {
              for (              TreeElement element : children) {
                selectedChildren.addElement(element.getRef());
              }
            }
            toRemove.addElement(DataUtil.integer(i));
            continue predicate;
          }
        }
        if (attributes == null) {
          attributes=new Vector<String>();
          indices=new Vector<XPathPathExpr>();
          kids=parent.getChildrenWithName(name);
          if (kids.size() == 0) {
            return null;
          }
          AbstractTreeElement kid=kids.elementAt(0);
          for (int j=0; j < kid.getAttributeCount(); ++j) {
            String attribute=kid.getAttributeName(j);
            XPathPathExpr path=TreeUtilities.getXPathAttrExpression(attribute);
            attributes.addElement(attribute);
            indices.addElement(path);
          }
        }
        for (int j=0; j < indices.size(); ++j) {
          XPathPathExpr expr=indices.elementAt(j);
          if (expr.equals(left)) {
            String attributeName=attributes.elementAt(j);
            for (int kidI=0; kidI < kids.size(); ++kidI) {
              if (kids.elementAt(kidI).getAttributeValue(null,attributeName).equals(literalMatch)) {
                if (selectedChildren == null) {
                  selectedChildren=new Vector<TreeReference>();
                }
                selectedChildren.addElement(kids.elementAt(kidI).getRef());
              }
            }
            toRemove.addElement(DataUtil.integer(i));
            continue predicate;
          }
        }
      }
    }
    break;
  }
  if (selectedChildren == null) {
    return null;
  }
  for (int i=toRemove.size() - 1; i >= 0; i--) {
    predicates.removeElementAt(toRemove.elementAt(i).intValue());
  }
  return selectedChildren;
}","/** 
 * A general purpose method for taking an abstract tree element and attempting to batch fetch its children's predicates through static evaluation. 
 * @param parent The element whose children are being requested
 * @param childAttributeHintMap A mapping of paths which can be evaluated in memory.
 * @param name The name of the children being queried
 * @param mult the multiplicity being queried for (could be undefined)
 * @param predicates the evaluation step predicates which are being processed. NOTE: This vectorwill be modified by this method as a side effect if a predicate was succesfully statically evaluated
 * @param evalContext The current eval context.
 * @return A vector of TreeReferences which contains the nodes matched by predicate expressions.Expressions which result in returned matches will be removed from the predicate collection which is provided
 */
public static Vector<TreeReference> tryBatchChildFetch(AbstractTreeElement parent,Hashtable<XPathPathExpr,Hashtable<String,TreeElement[]>> childAttributeHintMap,String name,int mult,Vector<XPathExpression> predicates,EvaluationContext evalContext){
  if (mult != TreeReference.INDEX_UNBOUND || predicates == null) {
    return null;
  }
  Vector<Integer> toRemove=new Vector<Integer>();
  Vector<TreeReference> allSelectedChildren=null;
  Vector<String> attributes=null;
  Vector<XPathPathExpr> indices=null;
  Vector<TreeElement> kids=null;
  predicate:   for (int i=0; i < predicates.size(); ++i) {
    Vector<TreeReference> predicateMatches=new Vector<TreeReference>();
    XPathExpression xpe=predicates.elementAt(i);
    if (xpe instanceof XPathEqExpr) {
      XPathExpression left=((XPathEqExpr)xpe).a;
      XPathExpression right=((XPathEqExpr)xpe).b;
      if (left instanceof XPathPathExpr && (right instanceof XPathStringLiteral || right instanceof XPathPathExpr)) {
        String literalMatch=null;
        if (right instanceof XPathStringLiteral) {
          literalMatch=((XPathStringLiteral)right).s;
        }
 else         if (right instanceof XPathPathExpr) {
          for (          XPathStep step : ((XPathPathExpr)right).steps) {
            if (step.predicates.length > 0) {
              break;
            }
          }
          try {
            Object o=XPathFuncExpr.unpack(right.eval(evalContext));
            literalMatch=XPathFuncExpr.toString(o);
          }
 catch (          XPathException e) {
            e.printStackTrace();
            break;
          }
        }
        if (childAttributeHintMap != null) {
          if (childAttributeHintMap.containsKey(left)) {
            TreeElement[] children=childAttributeHintMap.get(left).get(literalMatch);
            if (children != null) {
              for (              TreeElement element : children) {
                predicateMatches.addElement(element.getRef());
              }
            }
            allSelectedChildren=merge(allSelectedChildren,predicateMatches,i,toRemove);
            continue predicate;
          }
        }
        if (attributes == null) {
          attributes=new Vector<String>();
          indices=new Vector<XPathPathExpr>();
          kids=parent.getChildrenWithName(name);
          if (kids.size() == 0) {
            return null;
          }
          AbstractTreeElement kid=kids.elementAt(0);
          for (int j=0; j < kid.getAttributeCount(); ++j) {
            String attribute=kid.getAttributeName(j);
            XPathPathExpr path=TreeUtilities.getXPathAttrExpression(attribute);
            attributes.addElement(attribute);
            indices.addElement(path);
          }
        }
        for (int j=0; j < indices.size(); ++j) {
          XPathPathExpr expr=indices.elementAt(j);
          if (expr.equals(left)) {
            String attributeName=attributes.elementAt(j);
            for (int kidI=0; kidI < kids.size(); ++kidI) {
              if (kids.elementAt(kidI).getAttributeValue(null,attributeName).equals(literalMatch)) {
                predicateMatches.addElement(kids.elementAt(kidI).getRef());
              }
            }
            allSelectedChildren=merge(allSelectedChildren,predicateMatches,i,toRemove);
            continue predicate;
          }
        }
      }
    }
    break;
  }
  if (allSelectedChildren == null) {
    return null;
  }
  for (int i=toRemove.size() - 1; i >= 0; i--) {
    predicates.removeElementAt(toRemove.elementAt(i).intValue());
  }
  return allSelectedChildren;
}",0.8800177916157012
146740,"public static Vector<Integer> union(Vector<Integer> a,Vector<Integer> b){
  Vector<Integer> u=new Vector<Integer>();
  for (  Integer i : a) {
    if (b.contains(i)) {
      u.addElement(i);
    }
  }
  return u;
}","public <T>Vector<T> union(Vector<T> a,Vector<T> b){
  Vector<T> u=new Vector<T>();
  for (  T i : a) {
    if (b.contains(i)) {
      u.addElement(i);
    }
  }
  return u;
}",0.8505154639175257
146741,"public Case parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(""String_Node_Str"");
  String caseId=parser.getAttributeValue(null,""String_Node_Str"");
  if (caseId == null) {
    throw new InvalidStructureException(""String_Node_Str"",this.parser);
  }
  String dateModified=parser.getAttributeValue(null,""String_Node_Str"");
  if (dateModified == null) {
    throw new InvalidStructureException(""String_Node_Str"",this.parser);
  }
  Date modified=DateUtils.parseDateTime(dateModified);
  boolean create=false;
  boolean update=false;
  boolean close=false;
  Case caseForBlock=null;
  while (this.nextTagInBlock(""String_Node_Str"")) {
    String action=parser.getName().toLowerCase();
    if (action.equals(""String_Node_Str"")) {
      String[] data=new String[3];
      while (this.nextTagInBlock(""String_Node_Str"")) {
        if (parser.getName().equals(""String_Node_Str"")) {
          data[0]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[1]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[2]=parser.nextText().trim();
        }
 else {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
      }
      if (data[0] == null || data[2] == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      boolean overriden=false;
      if (acceptCreateOverwrites) {
        caseForBlock=retrieve(caseId);
        if (caseForBlock != null) {
          caseForBlock.setName(data[2]);
          caseForBlock.setTypeId(data[0]);
          overriden=true;
        }
      }
      if (caseForBlock == null) {
        caseForBlock=CreateCase(data[2],data[0]);
        caseForBlock.setCaseId(caseId);
        caseForBlock.setDateOpened(modified);
      }
      if (data[1] != null) {
        caseForBlock.setUserId(data[1]);
      }
      create=true;
      String succesfulAction=overriden ? ""String_Node_Str"" : ""String_Node_Str"";
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      if (caseForBlock == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String key=parser.getName();
        String value=parser.nextText().trim();
        if (key.equals(""String_Node_Str"")) {
          caseForBlock.setTypeId(value);
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setName(value);
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setDateOpened(DateUtils.parseDate(value));
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setUserId(value);
        }
 else {
          caseForBlock.setProperty(key,value);
        }
      }
      update=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      if (caseForBlock == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      caseForBlock.setClosed(true);
      commit(caseForBlock);
      close=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String indexName=parser.getName();
        String caseType=parser.getAttributeValue(null,""String_Node_Str"");
        String value=parser.nextText().trim();
        String relationship=parser.getAttributeValue(null,""String_Node_Str"");
        caseForBlock.setIndex(new CaseIndex(indexName,caseType,value,relationship));
      }
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String attachmentName=parser.getName();
        String src=parser.getAttributeValue(null,""String_Node_Str"");
        String from=parser.getAttributeValue(null,""String_Node_Str"");
        String fileName=parser.getAttributeValue(null,""String_Node_Str"");
        if ((src == null || ""String_Node_Str"".equals(src)) && (from == null || ""String_Node_Str"".equals(from))) {
          this.removeAttachment(caseForBlock,attachmentName);
          caseForBlock.removeAttachment(attachmentName);
          continue;
        }
        String reference=this.processAttachment(src,from,fileName,parser);
        if (reference != null) {
          caseForBlock.updateAttachment(attachmentName,reference);
        }
      }
    }
  }
  if (caseForBlock != null) {
    caseForBlock.setLastModified(modified);
    commit(caseForBlock);
  }
  if (create) {
    tallies[0]++;
  }
 else   if (close) {
    tallies[2]++;
  }
 else   if (update) {
    tallies[1]++;
  }
  return null;
}","public Case parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(""String_Node_Str"");
  String caseId=parser.getAttributeValue(null,""String_Node_Str"");
  if (caseId == null) {
    throw new InvalidStructureException(""String_Node_Str"",this.parser);
  }
  String dateModified=parser.getAttributeValue(null,""String_Node_Str"");
  if (dateModified == null) {
    throw new InvalidStructureException(""String_Node_Str"",this.parser);
  }
  Date modified=DateUtils.parseDateTime(dateModified);
  boolean create=false;
  boolean update=false;
  boolean close=false;
  Case caseForBlock=null;
  while (this.nextTagInBlock(""String_Node_Str"")) {
    String action=parser.getName().toLowerCase();
    if (action.equals(""String_Node_Str"")) {
      String[] data=new String[3];
      while (this.nextTagInBlock(""String_Node_Str"")) {
        if (parser.getName().equals(""String_Node_Str"")) {
          data[0]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[1]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[2]=parser.nextText().trim();
        }
 else {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
      }
      if (data[0] == null || data[2] == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      boolean overriden=false;
      if (acceptCreateOverwrites) {
        caseForBlock=retrieve(caseId);
        if (caseForBlock != null) {
          caseForBlock.setName(data[2]);
          caseForBlock.setTypeId(data[0]);
          overriden=true;
        }
      }
      if (caseForBlock == null) {
        caseForBlock=CreateCase(data[2],data[0]);
        caseForBlock.setCaseId(caseId);
        caseForBlock.setDateOpened(modified);
      }
      if (data[1] != null) {
        caseForBlock.setUserId(data[1]);
      }
      create=true;
      String succesfulAction=overriden ? ""String_Node_Str"" : ""String_Node_Str"";
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      if (caseForBlock == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String key=parser.getName();
        String value=parser.nextText().trim();
        if (key.equals(""String_Node_Str"")) {
          caseForBlock.setTypeId(value);
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setName(value);
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setDateOpened(DateUtils.parseDate(value));
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setUserId(value);
        }
 else {
          caseForBlock.setProperty(key,value);
        }
      }
      update=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      if (caseForBlock == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      caseForBlock.setClosed(true);
      commit(caseForBlock);
      close=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String indexName=parser.getName();
        String caseType=parser.getAttributeValue(null,""String_Node_Str"");
        String value=parser.nextText().trim();
        String relationship=parser.getAttributeValue(null,""String_Node_Str"");
        if (relationship == null) {
          relationship=CaseIndex.RELATIONSHIP_CHILD;
        }
        caseForBlock.setIndex(new CaseIndex(indexName,caseType,value,relationship));
      }
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String attachmentName=parser.getName();
        String src=parser.getAttributeValue(null,""String_Node_Str"");
        String from=parser.getAttributeValue(null,""String_Node_Str"");
        String fileName=parser.getAttributeValue(null,""String_Node_Str"");
        if ((src == null || ""String_Node_Str"".equals(src)) && (from == null || ""String_Node_Str"".equals(from))) {
          this.removeAttachment(caseForBlock,attachmentName);
          caseForBlock.removeAttachment(attachmentName);
          continue;
        }
        String reference=this.processAttachment(src,from,fileName,parser);
        if (reference != null) {
          caseForBlock.updateAttachment(attachmentName,reference);
        }
      }
    }
  }
  if (caseForBlock != null) {
    caseForBlock.setLastModified(modified);
    commit(caseForBlock);
  }
  if (create) {
    tallies[0]++;
  }
 else   if (close) {
    tallies[2]++;
  }
 else   if (update) {
    tallies[1]++;
  }
  return null;
}",0.9902626143405134
146742,"/** 
 * Returns the subreference of this reference up to the level specified. Used to identify the reference context for a predicate at the same level Must be an absolute reference, otherwise will throw IllegalArgumentException
 * @param i
 * @return
 */
public TreeReference getSubReference(int level){
  if (!this.isAbsolute()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  TreeReference ret=new TreeReference();
  ret.refLevel=this.refLevel;
  ret.contextType=this.contextType;
  ret.instanceName=this.instanceName;
  ret.data=new Vector<TreeReferenceLevel>();
  for (int i=0; i <= level; ++i) {
    ret.data.addElement(this.data.elementAt(i));
  }
  return ret;
}","/** 
 * Returns the subreference of this reference up to the level specified. For instance, for the reference: (/data/path/to/node).getSubreference(2) => /data/path/to Used to identify the reference context for a predicate at the same level Must be an absolute reference, otherwise will throw IllegalArgumentException
 * @param i
 * @return
 */
public TreeReference getSubReference(int level){
  if (!this.isAbsolute()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  TreeReference ret=new TreeReference();
  ret.refLevel=this.refLevel;
  ret.contextType=this.contextType;
  ret.instanceName=this.instanceName;
  ret.data=new Vector<TreeReferenceLevel>();
  for (int i=0; i <= level; ++i) {
    ret.data.addElement(this.data.elementAt(i));
  }
  return ret;
}",0.9386084583901774
146743,"/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(DataInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(model,evalContext,args,argVals);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    argVals[0]=XPathFuncExpr.unpack(args[0].eval(model,evalContext));
    if (!isNull(argVals[0])) {
      return argVals[0];
    }
 else {
      argVals[1]=args[1].eval(model,evalContext);
      return argVals[1];
    }
  }
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  try {
    if (name.equals(""String_Node_Str"") && args.length == 0) {
      return Boolean.TRUE;
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 0) {
      return Boolean.FALSE;
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toBoolean(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toNumeric(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toInt(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toDouble(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toString(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toDate(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return boolNot(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return boolStr(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return dateStr(argVals[0],argVals[1]);
    }
 else     if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
      return multiSelected(argVals[0],argVals[1]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return countSelected(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return selectedAt(argVals[0],argVals[1]);
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
      if (args.length == 1) {
        return position(((XPathNodeset)argVals[0]).getRefAt(0));
      }
 else {
        if (evalContext.getContextPosition() != -1) {
          return new Double(evalContext.getContextPosition());
        }
        return position(evalContext.getContextRef());
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return count(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      if (argVals[0] instanceof XPathNodeset) {
        return sum(((XPathNodeset)argVals[0]).toArgList());
      }
 else {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
    }
 else     if (name.equals(""String_Node_Str"")) {
      if (argVals[0] instanceof XPathNodeset) {
        return max(((XPathNodeset)argVals[0]).toArgList());
      }
 else {
        return max(argVals);
      }
    }
 else     if (name.equals(""String_Node_Str"")) {
      if (argVals[0] instanceof XPathNodeset) {
        return min(((XPathNodeset)argVals[0]).toArgList());
      }
 else {
        return min(argVals);
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 0) {
      return DateUtils.roundDate(new Date());
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 0) {
      return new Date();
    }
 else     if (name.equals(""String_Node_Str"")) {
      if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
        return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
      }
 else {
        return join(""String_Node_Str"",argVals);
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length >= 1) {
      if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
        return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
      }
 else {
        return join(argVals[0],subsetArgList(argVals,1));
      }
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 2 || args.length == 3)) {
      return substring(argVals[0],argVals[1],args.length == 3 ? argVals[2] : null);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return stringLength(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return normalizeCase(argVals[0],true);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return normalizeCase(argVals[0],false);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return toString(argVals[0]).indexOf(toString(argVals[1])) != -1;
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return toString(argVals[0]).startsWith(toString(argVals[1]));
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return toString(argVals[0]).endsWith(toString(argVals[1]));
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 3) {
      return translate(argVals[0],argVals[1],argVals[2]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 3) {
      return replace(argVals[0],argVals[1],argVals[2]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length >= 2) {
      if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
        return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
      }
 else {
        return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
      if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
        Object[] factors=((XPathNodeset)argVals[2]).toArgList();
        Object[] weights=((XPathNodeset)argVals[3]).toArgList();
        if (factors.length != weights.length) {
          throw new XPathTypeMismatchException(""String_Node_Str"");
        }
        return checklistWeighted(argVals[0],argVals[1],factors,weights);
      }
 else {
        return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return regex(argVals[0],argVals[1]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length >= 1) {
      return argVals[0];
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 0) {
      return new Double(MathUtils.getRand().nextDouble());
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
      if (args.length == 0) {
        return PropertyUtils.genUUID();
      }
      int len=toInt(argVals[0]).intValue();
      return PropertyUtils.genGUID(len);
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 2)) {
      return power(argVals[0],argVals[1]);
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return new Double(Math.abs(toDouble(argVals[0]).doubleValue()));
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return new Double(Math.ceil(toDouble(argVals[0]).doubleValue()));
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return new Double(Math.floor(toDouble(argVals[0]).doubleValue()));
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return new Double((double)(Math.floor(toDouble(argVals[0]).doubleValue() + 0.5)));
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return log(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return log10(argVals[0]);
    }
 else {
      IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
      if (handler != null) {
        return evalCustomFunction(handler,argVals,evalContext);
      }
 else {
        throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
  }
 catch (  ClassCastException cce) {
    String args=""String_Node_Str"";
    for (int i=0; i < argVals.length; ++i) {
      args+=""String_Node_Str"" + String.valueOf(unpack(argVals[i])) + ""String_Node_Str""+ (i == argVals.length - 1 ? ""String_Node_Str"" : ""String_Node_Str"");
    }
    throw new XPathException(""String_Node_Str"" + name + ""String_Node_Str""+ args+ ""String_Node_Str""+ ""String_Node_Str""+ cce.getMessage());
  }
}","/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(DataInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(model,evalContext,args,argVals);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    argVals[0]=XPathFuncExpr.unpack(args[0].eval(model,evalContext));
    if (!isNull(argVals[0])) {
      return argVals[0];
    }
 else {
      argVals[1]=args[1].eval(model,evalContext);
      return argVals[1];
    }
  }
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  try {
    if (name.equals(""String_Node_Str"") && args.length == 0) {
      return Boolean.TRUE;
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 0) {
      return Boolean.FALSE;
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toBoolean(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toNumeric(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toInt(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toDouble(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toString(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toDate(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return boolNot(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return boolStr(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return dateStr(argVals[0],argVals[1]);
    }
 else     if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
      return multiSelected(argVals[0],argVals[1]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return countSelected(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return selectedAt(argVals[0],argVals[1]);
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
      if (args.length == 1) {
        return position(((XPathNodeset)argVals[0]).getRefAt(0));
      }
 else {
        if (evalContext.getContextPosition() != -1) {
          return new Double(evalContext.getContextPosition());
        }
        return position(evalContext.getContextRef());
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return count(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      if (argVals.length == 1 && argVals[0] instanceof XPathNodeset) {
        return sum(((XPathNodeset)argVals[0]).toArgList());
      }
 else {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
    }
 else     if (name.equals(""String_Node_Str"")) {
      if (argVals.length == 1 && argVals[0] instanceof XPathNodeset) {
        return max(((XPathNodeset)argVals[0]).toArgList());
      }
 else {
        return max(argVals);
      }
    }
 else     if (name.equals(""String_Node_Str"")) {
      if (argVals.length == 1 && argVals[0] instanceof XPathNodeset) {
        return min(((XPathNodeset)argVals[0]).toArgList());
      }
 else {
        return min(argVals);
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 0) {
      return DateUtils.roundDate(new Date());
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 0) {
      return new Date();
    }
 else     if (name.equals(""String_Node_Str"")) {
      if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
        return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
      }
 else {
        return join(""String_Node_Str"",argVals);
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length >= 1) {
      if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
        return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
      }
 else {
        return join(argVals[0],subsetArgList(argVals,1));
      }
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 2 || args.length == 3)) {
      return substring(argVals[0],argVals[1],args.length == 3 ? argVals[2] : null);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return stringLength(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return normalizeCase(argVals[0],true);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return normalizeCase(argVals[0],false);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return toString(argVals[0]).indexOf(toString(argVals[1])) != -1;
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return toString(argVals[0]).startsWith(toString(argVals[1]));
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return toString(argVals[0]).endsWith(toString(argVals[1]));
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 3) {
      return translate(argVals[0],argVals[1],argVals[2]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 3) {
      return replace(argVals[0],argVals[1],argVals[2]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length >= 2) {
      if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
        return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
      }
 else {
        return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
      if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
        Object[] factors=((XPathNodeset)argVals[2]).toArgList();
        Object[] weights=((XPathNodeset)argVals[3]).toArgList();
        if (factors.length != weights.length) {
          throw new XPathTypeMismatchException(""String_Node_Str"");
        }
        return checklistWeighted(argVals[0],argVals[1],factors,weights);
      }
 else {
        return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return regex(argVals[0],argVals[1]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length >= 1) {
      return argVals[0];
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 0) {
      return new Double(MathUtils.getRand().nextDouble());
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
      if (args.length == 0) {
        return PropertyUtils.genUUID();
      }
      int len=toInt(argVals[0]).intValue();
      return PropertyUtils.genGUID(len);
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 2)) {
      return power(argVals[0],argVals[1]);
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return new Double(Math.abs(toDouble(argVals[0]).doubleValue()));
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return new Double(Math.ceil(toDouble(argVals[0]).doubleValue()));
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return new Double(Math.floor(toDouble(argVals[0]).doubleValue()));
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return new Double((double)(Math.floor(toDouble(argVals[0]).doubleValue() + 0.5)));
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return log(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return log10(argVals[0]);
    }
 else {
      IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
      if (handler != null) {
        return evalCustomFunction(handler,argVals,evalContext);
      }
 else {
        throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
  }
 catch (  ClassCastException cce) {
    String args=""String_Node_Str"";
    for (int i=0; i < argVals.length; ++i) {
      args+=""String_Node_Str"" + String.valueOf(unpack(argVals[i])) + ""String_Node_Str""+ (i == argVals.length - 1 ? ""String_Node_Str"" : ""String_Node_Str"");
    }
    throw new XPathException(""String_Node_Str"" + name + ""String_Node_Str""+ args+ ""String_Node_Str""+ ""String_Node_Str""+ cce.getMessage());
  }
}",0.9962877279819228
146744,"public DataInstance(String instanceid){
  this.instanceid=instanceid;
  referenceCache=new CacheTable<TreeReference,T>();
}","public DataInstance(String instanceid){
  this.instanceid=instanceid;
}",0.7319587628865979
146745,"public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.writeString(out,id);
  ExtUtil.write(out,title);
  ExtUtil.writeString(out,titleForm);
  ExtUtil.write(out,new ExtWrapList(ArrayUtilities.toVector(details)));
  ExtUtil.write(out,new ExtWrapList(ArrayUtilities.toVector(fields)));
  ExtUtil.write(out,new ExtWrapMap(variables));
  ExtUtil.write(out,new ExtWrapNullable(action));
}","public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.writeString(out,id);
  ExtUtil.write(out,title);
  ExtUtil.write(out,new ExtWrapNullable(titleForm));
  ExtUtil.write(out,new ExtWrapList(ArrayUtilities.toVector(details)));
  ExtUtil.write(out,new ExtWrapList(ArrayUtilities.toVector(fields)));
  ExtUtil.write(out,new ExtWrapMap(variables));
  ExtUtil.write(out,new ExtWrapNullable(action));
}",0.9554753309265944
146746,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  id=ExtUtil.readString(in);
  title=(Text)ExtUtil.read(in,Text.class,pf);
  titleForm=ExtUtil.readString(in);
  Vector<Detail> theDetails=(Vector<Detail>)ExtUtil.read(in,new ExtWrapList(Detail.class),pf);
  details=new Detail[theDetails.size()];
  ArrayUtilities.copyIntoArray(theDetails,details);
  Vector<DetailField> theFields=(Vector<DetailField>)ExtUtil.read(in,new ExtWrapList(DetailField.class),pf);
  fields=new DetailField[theFields.size()];
  ArrayUtilities.copyIntoArray(theFields,fields);
  variables=(OrderedHashtable<String,String>)ExtUtil.read(in,new ExtWrapMap(String.class,String.class,ExtWrapMap.TYPE_SLOW_READ_ONLY));
  action=(Action)ExtUtil.read(in,new ExtWrapNullable(Action.class),pf);
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  id=ExtUtil.readString(in);
  title=(Text)ExtUtil.read(in,Text.class,pf);
  titleForm=(String)ExtUtil.read(in,new ExtWrapNullable(String.class));
  Vector<Detail> theDetails=(Vector<Detail>)ExtUtil.read(in,new ExtWrapList(Detail.class),pf);
  details=new Detail[theDetails.size()];
  ArrayUtilities.copyIntoArray(theDetails,details);
  Vector<DetailField> theFields=(Vector<DetailField>)ExtUtil.read(in,new ExtWrapList(DetailField.class),pf);
  fields=new DetailField[theFields.size()];
  ArrayUtilities.copyIntoArray(theFields,fields);
  variables=(OrderedHashtable<String,String>)ExtUtil.read(in,new ExtWrapMap(String.class,String.class,ExtWrapMap.TYPE_SLOW_READ_ONLY));
  action=(Action)ExtUtil.read(in,new ExtWrapNullable(Action.class),pf);
}",0.9750297265160524
146747,"public Detail parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String id=parser.getAttributeValue(null,""String_Node_Str"");
  Text background=new Text();
  getNextTagInBlock(""String_Node_Str"");
  checkNode(""String_Node_Str"");
  String titleForm=parser.getAttributeValue(null,""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  Text title=new TextParser(parser).parse();
  Action action=null;
  Vector<Detail> subdetails=new Vector<Detail>();
  Vector<DetailField> fields=new Vector<DetailField>();
  OrderedHashtable<String,String> variables=new OrderedHashtable<String,String>();
  while (nextTagInBlock(""String_Node_Str"")) {
    if (""String_Node_Str"".equals(parser.getName().toLowerCase())) {
      while (nextTagInBlock(""String_Node_Str"")) {
        String function=parser.getAttributeValue(null,""String_Node_Str"");
        if (function == null) {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
        try {
          XPathParseTool.parseXPath(function);
        }
 catch (        XPathSyntaxException e) {
          e.printStackTrace();
          throw new InvalidStructureException(""String_Node_Str"" + function + ""String_Node_Str""+ e.getMessage(),parser);
        }
        variables.put(parser.getName(),function);
      }
      continue;
    }
    if (ActionParser.NAME_ACTION.equalsIgnoreCase(parser.getName())) {
      action=new ActionParser(parser).parse();
      continue;
    }
    DetailField.Builder builder=new DetailField().new Builder();
    if (parser.getName().equals(""String_Node_Str"")) {
      subdetails.addElement((new DetailParser(parser)).parse());
    }
 else {
      checkNode(""String_Node_Str"");
      String sortDefault=parser.getAttributeValue(null,""String_Node_Str"");
      if (sortDefault != null && sortDefault.equals(""String_Node_Str"")) {
        builder.setSortOrder(1);
      }
      String relevancy=parser.getAttributeValue(null,""String_Node_Str"");
      if (relevancy != null) {
        try {
          XPathParseTool.parseXPath(relevancy);
          builder.setRelevancy(relevancy);
        }
 catch (        XPathSyntaxException e) {
          e.printStackTrace();
          throw new InvalidStructureException(""String_Node_Str"" + relevancy + ""String_Node_Str"",parser);
        }
      }
      if (nextTagInBlock(""String_Node_Str"")) {
        if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          StyleParser styleParser=new StyleParser(builder,parser);
          styleParser.parse();
          GridParser gridParser=new GridParser(builder,parser);
          gridParser.parse();
          parser.nextTag();
          parser.nextTag();
        }
        checkNode(""String_Node_Str"");
        builder.setHeaderHint(getWidth());
        String form=parser.getAttributeValue(null,""String_Node_Str"");
        builder.setHeaderForm(form == null ? ""String_Node_Str"" : form);
        parser.nextTag();
        checkNode(""String_Node_Str"");
        Text header=new TextParser(parser).parse();
        builder.setHeader(header);
      }
 else {
        throw new InvalidStructureException(""String_Node_Str"",parser);
      }
      if (nextTagInBlock(""String_Node_Str"")) {
        checkNode(""String_Node_Str"");
        builder.setTemplateHint(getWidth());
        String form=parser.getAttributeValue(null,""String_Node_Str"");
        if (form == null) {
          form=""String_Node_Str"";
        }
        builder.setTemplateForm(form);
        parser.nextTag();
        DetailTemplate template;
        if (form.equals(""String_Node_Str"")) {
          template=new GraphParser(parser).parse();
        }
 else {
          checkNode(""String_Node_Str"");
          template=new TextParser(parser).parse();
        }
        builder.setTemplate(template);
      }
 else {
        throw new InvalidStructureException(""String_Node_Str"",parser);
      }
      if (nextTagInBlock(""String_Node_Str"")) {
        checkNode(new String[]{""String_Node_Str"",""String_Node_Str""});
        String name=parser.getName().toLowerCase();
        if (name.equals(""String_Node_Str"")) {
          String order=parser.getAttributeValue(null,""String_Node_Str"");
          if (order != null && order != ""String_Node_Str"") {
            try {
              builder.setSortOrder(Integer.parseInt(order));
            }
 catch (            NumberFormatException nfe) {
            }
          }
          String direction=parser.getAttributeValue(null,""String_Node_Str"");
          if (""String_Node_Str"".equals(direction)) {
            builder.setSortDirection(DetailField.DIRECTION_ASCENDING);
          }
 else           if (""String_Node_Str"".equals(direction)) {
            builder.setSortDirection(DetailField.DIRECTION_DESCENDING);
          }
 else {
          }
          String type=parser.getAttributeValue(null,""String_Node_Str"");
          if (""String_Node_Str"".equals(type)) {
            builder.setSortType(Constants.DATATYPE_INTEGER);
          }
 else           if (""String_Node_Str"".equals(type)) {
            builder.setSortType(Constants.DATATYPE_DECIMAL);
          }
 else           if (""String_Node_Str"".equals(type)) {
            builder.setSortType(Constants.DATATYPE_TEXT);
          }
 else {
          }
          if (nextTagInBlock(""String_Node_Str"")) {
            checkNode(""String_Node_Str"");
            Text sort=new TextParser(parser).parse();
            builder.setSort(sort);
          }
        }
 else         if (name.equals(""String_Node_Str"")) {
          if (nextTagInBlock(""String_Node_Str"")) {
            checkNode(""String_Node_Str"");
            background=new TextParser(parser).parse();
            builder.setBackground(background);
          }
        }
      }
      fields.addElement(builder.build());
    }
  }
  Detail d=new Detail(id,title,titleForm,subdetails,fields,variables,action);
  return d;
}","public Detail parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String id=parser.getAttributeValue(null,""String_Node_Str"");
  Text background=new Text();
  getNextTagInBlock(""String_Node_Str"");
  checkNode(""String_Node_Str"");
  String titleForm=parser.getAttributeValue(null,""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  Text title=new TextParser(parser).parse();
  Action action=null;
  Vector<Detail> subdetails=new Vector<Detail>();
  Vector<DetailField> fields=new Vector<DetailField>();
  OrderedHashtable<String,String> variables=new OrderedHashtable<String,String>();
  while (nextTagInBlock(""String_Node_Str"")) {
    if (""String_Node_Str"".equals(parser.getName().toLowerCase())) {
      while (nextTagInBlock(""String_Node_Str"")) {
        String function=parser.getAttributeValue(null,""String_Node_Str"");
        if (function == null) {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
        try {
          XPathParseTool.parseXPath(function);
        }
 catch (        XPathSyntaxException e) {
          e.printStackTrace();
          throw new InvalidStructureException(""String_Node_Str"" + function + ""String_Node_Str""+ e.getMessage(),parser);
        }
        variables.put(parser.getName(),function);
      }
      continue;
    }
    if (ActionParser.NAME_ACTION.equalsIgnoreCase(parser.getName())) {
      action=new ActionParser(parser).parse();
      continue;
    }
    DetailField.Builder builder=new DetailField().new Builder();
    if (parser.getName().equals(""String_Node_Str"")) {
      subdetails.addElement((new DetailParser(parser)).parse());
    }
 else {
      checkNode(""String_Node_Str"");
      String sortDefault=parser.getAttributeValue(null,""String_Node_Str"");
      if (sortDefault != null && sortDefault.equals(""String_Node_Str"")) {
        builder.setSortOrder(1);
      }
      String relevancy=parser.getAttributeValue(null,""String_Node_Str"");
      if (relevancy != null) {
        try {
          XPathParseTool.parseXPath(relevancy);
          builder.setRelevancy(relevancy);
        }
 catch (        XPathSyntaxException e) {
          e.printStackTrace();
          throw new InvalidStructureException(""String_Node_Str"" + relevancy + ""String_Node_Str"",parser);
        }
      }
      if (nextTagInBlock(""String_Node_Str"")) {
        if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          StyleParser styleParser=new StyleParser(builder,parser);
          styleParser.parse();
          GridParser gridParser=new GridParser(builder,parser);
          gridParser.parse();
          parser.nextTag();
          parser.nextTag();
        }
        checkNode(""String_Node_Str"");
        builder.setHeaderHint(getWidth());
        String form=parser.getAttributeValue(null,""String_Node_Str"");
        builder.setHeaderForm(form == null ? ""String_Node_Str"" : form);
        parser.nextTag();
        checkNode(""String_Node_Str"");
        Text header=new TextParser(parser).parse();
        builder.setHeader(header);
      }
 else {
        throw new InvalidStructureException(""String_Node_Str"",parser);
      }
      if (nextTagInBlock(""String_Node_Str"")) {
        checkNode(""String_Node_Str"");
        builder.setTemplateHint(getWidth());
        String form=parser.getAttributeValue(null,""String_Node_Str"");
        if (form == null) {
          form=""String_Node_Str"";
        }
        builder.setTemplateForm(form);
        parser.nextTag();
        DetailTemplate template;
        if (form.equals(""String_Node_Str"")) {
          template=new GraphParser(parser).parse();
        }
 else {
          checkNode(""String_Node_Str"");
          try {
            template=new TextParser(parser).parse();
            builder.setTemplate(template);
          }
 catch (          InvalidStructureException ise) {
            throw new InvalidStructureException(""String_Node_Str"" + id + ""String_Node_Str""+ ise.getMessage(),parser);
          }
        }
      }
 else {
        throw new InvalidStructureException(""String_Node_Str"",parser);
      }
      if (nextTagInBlock(""String_Node_Str"")) {
        checkNode(new String[]{""String_Node_Str"",""String_Node_Str""});
        String name=parser.getName().toLowerCase();
        if (name.equals(""String_Node_Str"")) {
          String order=parser.getAttributeValue(null,""String_Node_Str"");
          if (order != null && order != ""String_Node_Str"") {
            try {
              builder.setSortOrder(Integer.parseInt(order));
            }
 catch (            NumberFormatException nfe) {
            }
          }
          String direction=parser.getAttributeValue(null,""String_Node_Str"");
          if (""String_Node_Str"".equals(direction)) {
            builder.setSortDirection(DetailField.DIRECTION_ASCENDING);
          }
 else           if (""String_Node_Str"".equals(direction)) {
            builder.setSortDirection(DetailField.DIRECTION_DESCENDING);
          }
 else {
          }
          String type=parser.getAttributeValue(null,""String_Node_Str"");
          if (""String_Node_Str"".equals(type)) {
            builder.setSortType(Constants.DATATYPE_INTEGER);
          }
 else           if (""String_Node_Str"".equals(type)) {
            builder.setSortType(Constants.DATATYPE_DECIMAL);
          }
 else           if (""String_Node_Str"".equals(type)) {
            builder.setSortType(Constants.DATATYPE_TEXT);
          }
 else {
          }
          if (nextTagInBlock(""String_Node_Str"")) {
            checkNode(""String_Node_Str"");
            Text sort=new TextParser(parser).parse();
            builder.setSort(sort);
          }
        }
 else         if (name.equals(""String_Node_Str"")) {
          if (nextTagInBlock(""String_Node_Str"")) {
            checkNode(""String_Node_Str"");
            background=new TextParser(parser).parse();
            builder.setBackground(background);
          }
        }
      }
      fields.addElement(builder.build());
    }
  }
  Detail d=new Detail(id,title,titleForm,subdetails,fields,variables,action);
  return d;
}",0.9759787216357744
146748,"public TreeElement getChild(String name,int multiplicity){
  if (this.children == null) {
    return null;
  }
  if (name.equals(TreeReference.NAME_WILDCARD)) {
    if (multiplicity == TreeReference.INDEX_TEMPLATE || this.children.size() < multiplicity + 1) {
      return null;
    }
    return (TreeElement)this.children.elementAt(multiplicity);
  }
 else {
    for (int i=0; i < this.children.size(); i++) {
      TreeElement child=(TreeElement)this.children.elementAt(i);
      if ((name.hashCode() == child.getName().hashCode()) || name.equals(child.getName()) && child.getMult() == multiplicity) {
        return child;
      }
    }
  }
  return null;
}","public TreeElement getChild(String name,int multiplicity){
  if (this.children == null) {
    return null;
  }
  if (name.equals(TreeReference.NAME_WILDCARD)) {
    if (multiplicity == TreeReference.INDEX_TEMPLATE || this.children.size() < multiplicity + 1) {
      return null;
    }
    return (TreeElement)this.children.elementAt(multiplicity);
  }
 else {
    for (int i=0; i < this.children.size(); i++) {
      TreeElement child=(TreeElement)this.children.elementAt(i);
      if (((name.hashCode() == child.getName().hashCode()) || name.equals(child.getName())) && child.getMult() == multiplicity) {
        return child;
      }
    }
  }
  return null;
}",0.9984871406959152
146749,"private void saveInstanceNode(Element instance){
  Element instanceNode=null;
  String instanceId=instance.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  for (int i=0; i < instance.getChildCount(); i++) {
    if (instance.getType(i) == Node.ELEMENT) {
      if (instanceNode != null) {
        throw new XFormParseException(""String_Node_Str"",instance);
      }
 else {
        instanceNode=instance.getElement(i);
      }
    }
  }
  if (instanceNode == null) {
    instanceNode=instance;
  }
  if (mainInstanceNode == null) {
    mainInstanceNode=instanceNode;
  }
  instanceNodes.addElement(instanceNode);
  instanceNodeIdStrs.addElement(instanceId);
}","private void saveInstanceNode(Element instance){
  Element instanceNode=null;
  String instanceId=instance.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  for (int i=0; i < instance.getChildCount(); i++) {
    if (instance.getType(i) == Node.ELEMENT) {
      if (instanceNode != null) {
        throw new XFormParseException(""String_Node_Str"",instance);
      }
 else {
        instanceNode=instance.getElement(i);
      }
    }
  }
  if (instanceNode == null) {
    instanceNode=instance;
  }
  if (mainInstanceNode == null) {
    mainInstanceNode=instanceNode;
  }
 else   if (instanceId == null) {
    throw new XFormParseException(""String_Node_Str"",instance);
  }
  instanceNodes.addElement(instanceNode);
  instanceNodeIdStrs.addElement(instanceId);
}",0.9294199860237596
146750,"private void parseDoc(){
  _f=new FormDef();
  initState();
  defaultNamespace=_xmldoc.getRootElement().getNamespaceUri(null);
  parseElement(_xmldoc.getRootElement(),_f,topLevelHandlers);
  collapseRepeatGroups(_f);
  if (instanceNodes.size() > 1) {
    for (int i=1; i < instanceNodes.size(); i++) {
      Element e=instanceNodes.elementAt(i);
      String srcLocation=e.getAttributeValue(null,""String_Node_Str"");
      DataInstance di;
      if (e.getChildCount() == 0 && srcLocation != null) {
        di=new ExternalDataInstance(srcLocation,instanceNodeIdStrs.elementAt(i));
      }
 else {
        FormInstance fi=parseInstance(e,false);
        loadInstanceData(e,fi.getRoot(),_f);
        di=fi;
      }
      _f.addNonMainInstance(di);
    }
  }
  if (mainInstanceNode != null) {
    FormInstance fi=parseInstance(mainInstanceNode,true);
    addMainInstanceToFormDef(mainInstanceNode,fi);
    _f.setInstance(fi);
  }
}","private void parseDoc(){
  _f=new FormDef();
  initState();
  defaultNamespace=_xmldoc.getRootElement().getNamespaceUri(null);
  parseElement(_xmldoc.getRootElement(),_f,topLevelHandlers);
  collapseRepeatGroups(_f);
  if (instanceNodes.size() > 1) {
    for (int i=1; i < instanceNodes.size(); i++) {
      Element e=instanceNodes.elementAt(i);
      String srcLocation=e.getAttributeValue(null,""String_Node_Str"");
      String instanceid=instanceNodeIdStrs.elementAt(i);
      DataInstance di;
      if (srcLocation != null) {
        if (e.getChildCount() > 0) {
          for (int k=0; k < e.getChildCount(); ++k) {
switch (e.getType(k)) {
case Element.TEXT:
              if (""String_Node_Str"".equals(e.getText(i).trim())) {
                continue;
              }
case Element.IGNORABLE_WHITESPACE:
            continue;
case Element.ELEMENT:
          throw new XFormParseException(""String_Node_Str"" + instanceid + ""String_Node_Str"",e);
      }
    }
  }
  di=new ExternalDataInstance(srcLocation,instanceid);
}
 else {
  FormInstance fi=parseInstance(e,false);
  loadInstanceData(e,fi.getRoot(),_f);
  di=fi;
}
_f.addNonMainInstance(di);
}
}
if (mainInstanceNode != null) {
FormInstance fi=parseInstance(mainInstanceNode,true);
addMainInstanceToFormDef(mainInstanceNode,fi);
_f.setInstance(fi);
}
}",0.4760626398210291
146751,"public boolean initialize(CommCareInstance instance) throws ResourceInitializationException {
  if (cache == null) {
    Localization.registerLanguageReference(locale,localReference);
  }
 else {
    Localization.getGlobalLocalizerAdvanced().registerLocaleResource(locale,new TableLocaleSource(cache));
  }
  return true;
}","public boolean initialize(CommCareInstance instance) throws ResourceInitializationException {
  if (cache == null) {
    Localization.registerLanguageReference(locale,localReference);
  }
 else {
    Localization.getGlobalLocalizerAdvanced().addAvailableLocale(locale);
    Localization.getGlobalLocalizerAdvanced().registerLocaleResource(locale,new TableLocaleSource(cache));
  }
  return true;
}",0.8972222222222223
146752,"private static int extractNextIndex(String text,String[] args){
  int start=text.indexOf(""String_Node_Str"");
  int end=text.indexOf(""String_Node_Str"");
  if (start != -1 && end != -1) {
    String val=text.substring(start + ""String_Node_Str"".length(),end);
    try {
      int index=Integer.parseInt(val);
      if (index >= 0 && index < args.length) {
        return index;
      }
    }
 catch (    NumberFormatException nfe) {
      return -1;
    }
  }
  return -1;
}","private static int extractNextIndex(String text,String[] args){
  int start=text.indexOf(""String_Node_Str"");
  int end=text.indexOf(""String_Node_Str"",start);
  if (start != -1 && end != -1) {
    String val=text.substring(start + ""String_Node_Str"".length(),end);
    try {
      int index=Integer.parseInt(val);
      if (index >= 0 && index < args.length) {
        return index;
      }
    }
 catch (    NumberFormatException nfe) {
      return -1;
    }
  }
  return -1;
}",0.9936708860759492
146753,"private static String[] replaceFirstValue(String text,String value){
  int start=text.indexOf(""String_Node_Str"");
  int end=text.indexOf(""String_Node_Str"");
  return new String[]{text.substring(0,start) + value,text.substring(end + 1,text.length())};
}","private static String[] replaceFirstValue(String text,String value){
  int start=text.indexOf(""String_Node_Str"");
  int end=text.indexOf(""String_Node_Str"",start);
  return new String[]{text.substring(0,start) + value,text.substring(end + 1,text.length())};
}",0.9882352941176472
146754,"public static String processArguments(String text,String[] args){
  String working=text;
  int currentArg=0;
  while (working.indexOf(""String_Node_Str"") != -1 && args.length > currentArg) {
    int index=extractNextIndex(working,args);
    if (index == -1) {
      index=currentArg;
      currentArg++;
    }
    String value=args[index];
    working=replaceFirstValue(working,value);
  }
  return working;
}","public static String processArguments(String text,String[] args,int currentArg){
  String working=text;
  if (working.indexOf(""String_Node_Str"") != -1 && args.length > currentArg) {
    int index=extractNextIndex(working,args);
    if (index == -1) {
      index=currentArg;
      currentArg++;
    }
    String value=args[index];
    String[] replaced=replaceFirstValue(working,value);
    return replaced[0] + processArguments(replaced[1],args,currentArg);
  }
 else {
    return working;
  }
}",0.7522123893805309
146755,"private static String replaceFirstValue(String text,String value){
  int start=text.indexOf(""String_Node_Str"");
  int end=text.indexOf(""String_Node_Str"");
  return text.substring(0,start) + value + text.substring(end + 1,text.length());
}","private static String[] replaceFirstValue(String text,String value){
  int start=text.indexOf(""String_Node_Str"");
  int end=text.indexOf(""String_Node_Str"");
  return new String[]{text.substring(0,start) + value,text.substring(end + 1,text.length())};
}",0.8857142857142857
146756,"public Boolean parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  try {
    String rootName=parser.getName();
    if (requiredRootEnvelope != null && !requiredRootEnvelope.equals(rootName)) {
      throw new InvalidStructureException(""String_Node_Str"" + rootName + ""String_Node_Str""+ requiredRootEnvelope+ ""String_Node_Str"",parser);
    }
    String itemString=parser.getAttributeValue(null,""String_Node_Str"");
    int itemNumber=-1;
    if (itemString != null) {
      try {
        itemNumber=Integer.parseInt(itemString);
      }
 catch (      NumberFormatException e) {
        itemNumber=0;
      }
      rListener.setTotalForms(itemNumber);
    }
    parseBlock(rootName);
  }
  finally {
    try {
      is.close();
    }
 catch (    IOException ioe) {
    }
  }
  if (errors.size() == 0) {
    return Boolean.TRUE;
  }
 else {
    return Boolean.FALSE;
  }
}","public Boolean parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  try {
    String rootName=parser.getName();
    if (requiredRootEnvelope != null && !requiredRootEnvelope.equals(rootName)) {
      throw new InvalidStructureException(""String_Node_Str"" + rootName + ""String_Node_Str""+ requiredRootEnvelope+ ""String_Node_Str"",parser);
    }
    String itemString=parser.getAttributeValue(null,""String_Node_Str"");
    int itemNumber=-1;
    if (itemString != null) {
      try {
        itemNumber=Integer.parseInt(itemString);
      }
 catch (      NumberFormatException e) {
        itemNumber=0;
      }
      if (rListener != null) {
        rListener.setTotalForms(itemNumber);
      }
    }
    parseBlock(rootName);
  }
  finally {
    try {
      is.close();
    }
 catch (    IOException ioe) {
    }
  }
  if (errors.size() == 0) {
    return Boolean.TRUE;
  }
 else {
    return Boolean.FALSE;
  }
}",0.978477690288714
146757,"protected DataBinding processStandardBindAttributes(Vector usedAtts,Element e){
  usedAtts.addElement(ID_ATTR);
  usedAtts.addElement(NODESET_ATTR);
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  DataBinding binding=new DataBinding();
  binding.setId(e.getAttributeValue(""String_Node_Str"",ID_ATTR));
  String nodeset=e.getAttributeValue(null,NODESET_ATTR);
  if (nodeset == null) {
    throw new XFormParseException(""String_Node_Str"",e);
  }
  IDataReference ref;
  try {
    ref=new XPathReference(nodeset);
  }
 catch (  XPathException xpe) {
    throw new XFormParseException(xpe.getMessage());
  }
  ref=getAbsRef(ref,_f);
  binding.setReference(ref);
  binding.setDataType(getDataType(e.getAttributeValue(null,""String_Node_Str"")));
  String xpathRel=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRel != null) {
    if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRel,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.relevancyCondition=c;
    }
  }
  String xpathReq=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathReq != null) {
    if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathReq,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.requiredCondition=c;
    }
  }
  String xpathRO=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRO != null) {
    if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRO,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.readonlyCondition=c;
    }
  }
  String xpathConstr=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathConstr != null) {
    try {
      binding.constraint=new XPathConditional(xpathConstr);
    }
 catch (    XPathSyntaxException xse) {
      reporter.error(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xpathConstr+ ""String_Node_Str""+ xse.getMessage());
    }
    binding.constraintMessage=e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str"");
  }
  String xpathCalc=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathCalc != null) {
    Recalculate r;
    try {
      r=buildCalculate(xpathCalc,ref);
    }
 catch (    XPathSyntaxException xpse) {
      throw new XFormParseException(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xpse.getMessage()+ ""String_Node_Str""+ xpathCalc);
    }
    r=(Recalculate)_f.addTriggerable(r);
    binding.calculate=r;
  }
  binding.setPreload(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  binding.setPreloadParams(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  return binding;
}","protected DataBinding processStandardBindAttributes(Vector usedAtts,Element e){
  usedAtts.addElement(ID_ATTR);
  usedAtts.addElement(NODESET_ATTR);
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  DataBinding binding=new DataBinding();
  binding.setId(e.getAttributeValue(""String_Node_Str"",ID_ATTR));
  String nodeset=e.getAttributeValue(null,NODESET_ATTR);
  if (nodeset == null) {
    throw new XFormParseException(""String_Node_Str"",e);
  }
  IDataReference ref;
  try {
    ref=new XPathReference(nodeset);
  }
 catch (  XPathException xpe) {
    throw new XFormParseException(xpe.getMessage());
  }
  ref=getAbsRef(ref,_f);
  binding.setReference(ref);
  binding.setDataType(getDataType(e.getAttributeValue(null,""String_Node_Str"")));
  String xpathRel=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRel != null) {
    if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRel,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.relevancyCondition=c;
    }
  }
  String xpathReq=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathReq != null) {
    if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathReq,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.requiredCondition=c;
    }
  }
  String xpathRO=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRO != null) {
    if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRO,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.readonlyCondition=c;
    }
  }
  String xpathConstr=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathConstr != null) {
    try {
      binding.constraint=new XPathConditional(xpathConstr);
    }
 catch (    XPathSyntaxException xse) {
      throw new XFormParseException(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xpathConstr+ ""String_Node_Str""+ xse.getMessage());
    }
    binding.constraintMessage=e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str"");
  }
  String xpathCalc=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathCalc != null) {
    Recalculate r;
    try {
      r=buildCalculate(xpathCalc,ref);
    }
 catch (    XPathSyntaxException xpse) {
      throw new XFormParseException(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xpse.getMessage()+ ""String_Node_Str""+ xpathCalc);
    }
    r=(Recalculate)_f.addTriggerable(r);
    binding.calculate=r;
  }
  binding.setPreload(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  binding.setPreloadParams(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  return binding;
}",0.9936959390118753
146758,"/** 
 * Identify the itemset in the backend model, and create a set of SelectChoice  objects at the current question reference based on the data in the model. Will modify the itemset binding to contain the relevant choices 
 * @param itemset The binding for an itemset, where the choices will be populated
 * @param curQRef A reference to the current question's element, which will beused to determine the values to be chosen from.
 */
public void populateDynamicChoices(ItemsetBinding itemset,TreeReference curQRef){
  Vector<SelectChoice> choices=new Vector<SelectChoice>();
  Vector<TreeReference> matches=itemset.nodesetExpr.evalNodeset(this.getMainInstance(),new EvaluationContext(exprEvalContext,itemset.contextRef.contextualize(curQRef)));
  DataInstance fi=null;
  if (itemset.nodesetRef.getInstanceName() != null) {
    fi=getNonMainInstance(itemset.nodesetRef.getInstanceName());
    if (fi == null) {
      System.out.println(""String_Node_Str"" + itemset.nodesetRef.getInstanceName() + ""String_Node_Str"");
    }
  }
 else {
    fi=getMainInstance();
  }
  for (int i=0; i < matches.size(); i++) {
    TreeReference item=matches.elementAt(i);
    String label=itemset.labelExpr.evalReadable(fi,new EvaluationContext(exprEvalContext,item));
    String value=null;
    TreeElement copyNode=null;
    if (itemset.copyMode) {
      copyNode=this.getMainInstance().resolveReference(itemset.copyRef.contextualize(item));
    }
    if (itemset.valueRef != null) {
      value=itemset.valueExpr.evalReadable(fi,new EvaluationContext(exprEvalContext,item));
    }
    SelectChoice choice=new SelectChoice(label,value != null ? value : ""String_Node_Str"" + i,itemset.labelIsItext);
    choice.setIndex(i);
    if (itemset.copyMode)     choice.copyNode=copyNode;
    choices.addElement(choice);
  }
  if (choices.size() == 0) {
    System.out.println(""String_Node_Str"" + itemset.nodesetRef + ""String_Node_Str"");
  }
  itemset.setChoices(choices,this.getLocalizer());
}","/** 
 * Identify the itemset in the backend model, and create a set of SelectChoice  objects at the current question reference based on the data in the model. Will modify the itemset binding to contain the relevant choices 
 * @param itemset The binding for an itemset, where the choices will be populated
 * @param curQRef A reference to the current question's element, which will beused to determine the values to be chosen from.
 */
public void populateDynamicChoices(ItemsetBinding itemset,TreeReference curQRef){
  Vector<SelectChoice> choices=new Vector<SelectChoice>();
  Vector<TreeReference> matches=itemset.nodesetExpr.evalNodeset(this.getMainInstance(),new EvaluationContext(exprEvalContext,itemset.contextRef.contextualize(curQRef)));
  DataInstance fi=null;
  if (itemset.nodesetRef.getInstanceName() != null) {
    fi=getNonMainInstance(itemset.nodesetRef.getInstanceName());
    if (fi == null) {
      System.out.println(""String_Node_Str"" + itemset.nodesetRef.getInstanceName() + ""String_Node_Str"");
    }
  }
 else {
    fi=getMainInstance();
  }
  if (matches == null) {
    throw new XPathException(""String_Node_Str"" + itemset.nodesetRef.getInstanceName());
  }
  for (int i=0; i < matches.size(); i++) {
    TreeReference item=matches.elementAt(i);
    String label=itemset.labelExpr.evalReadable(fi,new EvaluationContext(exprEvalContext,item));
    String value=null;
    TreeElement copyNode=null;
    if (itemset.copyMode) {
      copyNode=this.getMainInstance().resolveReference(itemset.copyRef.contextualize(item));
    }
    if (itemset.valueRef != null) {
      value=itemset.valueExpr.evalReadable(fi,new EvaluationContext(exprEvalContext,item));
    }
    SelectChoice choice=new SelectChoice(label,value != null ? value : ""String_Node_Str"" + i,itemset.labelIsItext);
    choice.setIndex(i);
    if (itemset.copyMode)     choice.copyNode=copyNode;
    choices.addElement(choice);
  }
  if (choices.size() == 0) {
    System.out.println(""String_Node_Str"" + itemset.nodesetRef + ""String_Node_Str"");
  }
  itemset.setChoices(choices,this.getLocalizer());
}",0.625648628613788
146759,"protected void checkNode(String[] names) throws InvalidStructureException {
  boolean checksOut=false;
  for (  String name : names) {
    if (parser.getName().toLowerCase().equals(name)) {
      checksOut=true;
    }
  }
  if (!checksOut) {
    int eventType=-1;
    try {
      eventType=parser.getEventType();
    }
 catch (    XmlPullParserException xppe) {
    }
    String oneOf=null;
    if (names.length == 1) {
      oneOf=""String_Node_Str"" + names[0] + ""String_Node_Str"";
    }
 else {
      oneOf=""String_Node_Str"";
      for (      String name : names) {
        oneOf+=""String_Node_Str"" + name + ""String_Node_Str"";
      }
      oneOf+=""String_Node_Str"";
    }
    throw new InvalidStructureException(""String_Node_Str"" + oneOf + (eventType == KXmlParser.END_TAG ? ""String_Node_Str"" : ""String_Node_Str"")+ parser.getName()+ ""String_Node_Str"",parser);
  }
}","protected void checkNode(String[] names) throws InvalidStructureException {
  boolean checksOut=false;
  if (parser.getName() == null) {
  }
 else {
    for (    String name : names) {
      if (parser.getName().toLowerCase().equals(name)) {
        checksOut=true;
      }
    }
  }
  if (!checksOut) {
    int eventType=-1;
    try {
      eventType=parser.getEventType();
    }
 catch (    XmlPullParserException xppe) {
    }
    String oneOf=null;
    if (names.length == 1) {
      oneOf=""String_Node_Str"" + names[0] + ""String_Node_Str"";
    }
 else {
      oneOf=""String_Node_Str"";
      for (      String name : names) {
        oneOf+=""String_Node_Str"" + name + ""String_Node_Str"";
      }
      oneOf+=""String_Node_Str"";
    }
    String foundInstead=""String_Node_Str"";
    if (eventType == KXmlParser.END_TAG) {
      foundInstead=""String_Node_Str"" + parser.getName() + ""String_Node_Str"";
    }
 else     if (eventType == KXmlParser.START_TAG) {
      foundInstead=""String_Node_Str"" + parser.getName() + ""String_Node_Str"";
    }
 else     if (eventType == KXmlParser.TEXT) {
      foundInstead=""String_Node_Str"" + parser.getText() + ""String_Node_Str"";
    }
 else {
      foundInstead=""String_Node_Str"";
    }
    throw new InvalidStructureException(""String_Node_Str"" + oneOf + foundInstead+ ""String_Node_Str"",parser);
  }
}",0.6905951840072694
146760,"public Stock[] parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(new String[]{""String_Node_Str"",""String_Node_Str""});
  String name=parser.getName().toLowerCase();
  Vector<Stock> toWrite=new Vector<Stock>();
  String dateModified=parser.getAttributeValue(null,""String_Node_Str"");
  if (dateModified == null) {
    throw new InvalidStructureException(""String_Node_Str"" + name + ""String_Node_Str"",this.parser);
  }
  Date modified=DateUtils.parseDateTime(dateModified);
  if (name.equals(""String_Node_Str"")) {
    String entityId=parser.getAttributeValue(null,""String_Node_Str"");
    if (entityId == null) {
      throw new InvalidStructureException(""String_Node_Str"",this.parser);
    }
    Stock s=retrieve(entityId);
    if (s == null) {
      s=new Stock(entityId,new Hashtable<String,Integer>());
    }
    while (this.nextTagInBlock(""String_Node_Str"")) {
      this.checkNode(""String_Node_Str"");
      String id=parser.getAttributeValue(null,""String_Node_Str"");
      String quantityString=parser.getAttributeValue(null,""String_Node_Str"");
      if (id == null || id == ""String_Node_Str"") {
        throw new InvalidStructureException(""String_Node_Str"",this.parser);
      }
      int quantity=this.parseInt(quantityString);
      s.setProductValue(id,quantity);
    }
    toWrite.addElement(s);
  }
 else   if (name.equals(""String_Node_Str"")) {
    String source=parser.getAttributeValue(null,""String_Node_Str"");
    if (source == null) {
      throw new InvalidStructureException(""String_Node_Str"",this.parser);
    }
    String destination=parser.getAttributeValue(null,""String_Node_Str"");
    if (destination == null) {
      throw new InvalidStructureException(""String_Node_Str"",this.parser);
    }
    Stock sourceStock=retrieve(source);
    if (sourceStock == null) {
      sourceStock=new Stock(source,new Hashtable<String,Integer>());
    }
    Stock destinationStock=retrieve(destination);
    if (destinationStock == null) {
      destinationStock=new Stock(source,new Hashtable<String,Integer>());
    }
    while (this.nextTagInBlock(""String_Node_Str"")) {
      this.checkNode(""String_Node_Str"");
      String productId=parser.getAttributeValue(null,""String_Node_Str"");
      String quantityString=parser.getAttributeValue(null,""String_Node_Str"");
      if (productId == null || productId == ""String_Node_Str"") {
        throw new InvalidStructureException(""String_Node_Str"",this.parser);
      }
      int quantity=this.parseInt(quantityString);
      sourceStock.setProductValue(productId,sourceStock.getProductValue(productId) - quantity);
      destinationStock.setProductValue(productId,destinationStock.getProductValue(productId) - quantity);
    }
    toWrite.addElement(sourceStock);
    toWrite.addElement(destinationStock);
  }
  Stock[] tw=new Stock[toWrite.size()];
  int i=0;
  for (  Stock s : toWrite) {
    tw[i]=s;
    i++;
  }
  commit(tw);
  return null;
}","public Stock[] parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(new String[]{""String_Node_Str"",""String_Node_Str""});
  String name=parser.getName().toLowerCase();
  Vector<Stock> toWrite=new Vector<Stock>();
  String dateModified=parser.getAttributeValue(null,""String_Node_Str"");
  if (dateModified == null) {
    throw new InvalidStructureException(""String_Node_Str"" + name + ""String_Node_Str"",this.parser);
  }
  Date modified=DateUtils.parseDateTime(dateModified);
  if (name.equals(""String_Node_Str"")) {
    String entityId=parser.getAttributeValue(null,""String_Node_Str"");
    if (entityId == null) {
      throw new InvalidStructureException(""String_Node_Str"",this.parser);
    }
    Stock s=retrieve(entityId);
    if (s == null) {
      s=new Stock(entityId,new Hashtable<String,Integer>());
    }
    while (this.nextTagInBlock(""String_Node_Str"")) {
      this.checkNode(""String_Node_Str"");
      String id=parser.getAttributeValue(null,""String_Node_Str"");
      String quantityString=parser.getAttributeValue(null,""String_Node_Str"");
      if (id == null || id == ""String_Node_Str"") {
        throw new InvalidStructureException(""String_Node_Str"",this.parser);
      }
      int quantity=this.parseInt(quantityString);
      s.setProductValue(id,quantity);
    }
    toWrite.addElement(s);
  }
 else   if (name.equals(""String_Node_Str"")) {
    String source=parser.getAttributeValue(null,""String_Node_Str"");
    if (source == null) {
      throw new InvalidStructureException(""String_Node_Str"",this.parser);
    }
    String destination=parser.getAttributeValue(null,""String_Node_Str"");
    if (destination == null) {
      throw new InvalidStructureException(""String_Node_Str"",this.parser);
    }
    Stock sourceStock=retrieve(source);
    if (sourceStock == null) {
      sourceStock=new Stock(source,new Hashtable<String,Integer>());
    }
    Stock destinationStock=retrieve(destination);
    if (destinationStock == null) {
      destinationStock=new Stock(destination,new Hashtable<String,Integer>());
    }
    while (this.nextTagInBlock(""String_Node_Str"")) {
      this.checkNode(""String_Node_Str"");
      String productId=parser.getAttributeValue(null,""String_Node_Str"");
      String quantityString=parser.getAttributeValue(null,""String_Node_Str"");
      if (productId == null || productId == ""String_Node_Str"") {
        throw new InvalidStructureException(""String_Node_Str"",this.parser);
      }
      int quantity=this.parseInt(quantityString);
      sourceStock.setProductValue(productId,sourceStock.getProductValue(productId) - quantity);
      destinationStock.setProductValue(productId,destinationStock.getProductValue(productId) + quantity);
    }
    toWrite.addElement(sourceStock);
    toWrite.addElement(destinationStock);
  }
  Stock[] tw=new Stock[toWrite.size()];
  int i=0;
  for (  Stock s : toWrite) {
    tw[i]=s;
    i++;
  }
  commit(tw);
  return tw;
}",0.9957490222751232
146761,"private TreeElement cache(){
  if (recordId == TreeReference.INDEX_TEMPLATE) {
    return empty;
  }
synchronized (parent.treeCache) {
    TreeElement element=parent.treeCache.retrieve(recordId);
    if (element != null) {
      return element;
    }
    TreeElement cacheBuilder=new TreeElement(""String_Node_Str"");
    Stock s=parent.storage.read(recordId);
    entityId=s.getEntiyId();
    cacheBuilder=new TreeElement(""String_Node_Str"");
    cacheBuilder.setMult(this.mult);
    cacheBuilder.setAttribute(null,""String_Node_Str"",s.getEntiyId());
    TreeElement product;
    String[] productList=s.getProductList();
    for (int i=0; i < productList.length; ++i) {
      product=new TreeElement(""String_Node_Str"");
      product.setAttribute(null,""String_Node_Str"",productList[i]);
      product.setValue(new IntegerData(s.getProductValue(productList[i])));
      cacheBuilder.addChild(product);
    }
    cacheBuilder.setParent(this.parent);
    parent.treeCache.register(recordId,cacheBuilder);
    return cacheBuilder;
  }
}","private TreeElement cache(){
  if (recordId == TreeReference.INDEX_TEMPLATE) {
    return empty;
  }
synchronized (parent.treeCache) {
    TreeElement element=parent.treeCache.retrieve(recordId);
    if (element != null) {
      return element;
    }
    TreeElement cacheBuilder=new TreeElement(""String_Node_Str"");
    Stock s=parent.storage.read(recordId);
    entityId=s.getEntiyId();
    cacheBuilder=new TreeElement(""String_Node_Str"");
    cacheBuilder.setMult(this.mult);
    cacheBuilder.setAttribute(null,""String_Node_Str"",s.getEntiyId());
    TreeElement product;
    String[] productList=s.getProductList();
    for (int i=0; i < productList.length; ++i) {
      product=new TreeElement(""String_Node_Str"",i);
      product.setAttribute(null,""String_Node_Str"",productList[i]);
      product.setValue(new IntegerData(s.getProductValue(productList[i])));
      cacheBuilder.addChild(product);
    }
    cacheBuilder.setParent(this.parent);
    parent.treeCache.register(recordId,cacheBuilder);
    return cacheBuilder;
  }
}",0.9990291262135922
146762,"public CommCareConfigEngine(OutputStream output){
  this.output=output;
  this.print=new PrintStream(output);
  suites=new Vector<Suite>();
  this.instance=new CommCareInstance(){
    public void registerSuite(    Suite s){
      CommCareConfigEngine.this.suites.add(s);
    }
    public void setProfile(    Profile p){
      CommCareConfigEngine.this.profile=p;
    }
    public int getMajorVersion(){
      return 2;
    }
    public int getMinorVersion(){
      return 9;
    }
  }
;
  setRoots();
  table=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility());
  StorageManager.setStorageFactory(new IStorageFactory(){
    public IStorageUtility newStorage(    String name,    Class type){
      return new DummyIndexedStorageUtility();
    }
  }
);
  StorageManager.registerStorage(Profile.STORAGE_KEY,Profile.class);
  StorageManager.registerStorage(Suite.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(FormDef.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(""String_Node_Str"",FormInstance.class);
}","public CommCareConfigEngine(OutputStream output){
  this.output=output;
  this.print=new PrintStream(output);
  suites=new Vector<Suite>();
  this.instance=new CommCareInstance(){
    public void registerSuite(    Suite s){
      CommCareConfigEngine.this.suites.add(s);
    }
    public void setProfile(    Profile p){
      CommCareConfigEngine.this.profile=p;
    }
    public int getMajorVersion(){
      return 2;
    }
    public int getMinorVersion(){
      return 10;
    }
  }
;
  setRoots();
  table=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility());
  StorageManager.setStorageFactory(new IStorageFactory(){
    public IStorageUtility newStorage(    String name,    Class type){
      return new DummyIndexedStorageUtility();
    }
  }
);
  StorageManager.registerStorage(Profile.STORAGE_KEY,Profile.class);
  StorageManager.registerStorage(Suite.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(FormDef.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(""String_Node_Str"",FormInstance.class);
}",0.9985514244326412
146763,"public int getMinorVersion(){
  return 9;
}","public int getMinorVersion(){
  return 10;
}",0.9655172413793104
146764,"public String entityType(){
  return shortDetail.getTitle().evaluate(context);
}","public String entityType(){
  return Localizer.clearArguments(shortDetail.getTitle().evaluate(context));
}",0.8602150537634409
146765,"protected void checkNode(String[] names) throws InvalidStructureException {
  boolean checksOut=false;
  if (parser.getName() == null) {
  }
 else {
    for (    String name : names) {
      if (parser.getName().toLowerCase().equals(name)) {
        checksOut=true;
      }
    }
  }
  if (!checksOut) {
    int eventType=-1;
    try {
      eventType=parser.getEventType();
    }
 catch (    XmlPullParserException xppe) {
    }
    String oneOf=null;
    if (names.length == 1) {
      oneOf=""String_Node_Str"" + names[0] + ""String_Node_Str"";
    }
 else {
      oneOf=""String_Node_Str"";
      for (      String name : names) {
        oneOf+=""String_Node_Str"" + name + ""String_Node_Str"";
      }
      oneOf+=""String_Node_Str"";
    }
    String foundInstead=""String_Node_Str"";
    if (eventType == KXmlParser.END_TAG) {
      foundInstead=""String_Node_Str"" + parser.getName() + ""String_Node_Str"";
    }
 else     if (eventType == KXmlParser.START_TAG) {
      foundInstead=""String_Node_Str"" + parser.getName() + ""String_Node_Str"";
    }
 else     if (eventType == KXmlParser.TEXT) {
      foundInstead=""String_Node_Str"" + parser.getText() + ""String_Node_Str"";
    }
 else {
      foundInstead=""String_Node_Str"";
    }
    throw new InvalidStructureException(""String_Node_Str"" + oneOf + foundInstead+ ""String_Node_Str"",parser);
  }
}","/** 
 * Evaluates whether the current node is of an appropriate name and throws the proper exception if not.
 * @param name A list of names which are valid during this stepof parsing
 * @throws InvalidStructureException If the node at the currentposition is not the one expected.
 */
protected void checkNode(String[] names) throws InvalidStructureException {
  boolean checksOut=false;
  if (parser.getName() == null) {
  }
 else {
    for (    String name : names) {
      if (parser.getName().toLowerCase().equals(name)) {
        checksOut=true;
      }
    }
  }
  if (!checksOut) {
    int eventType=-1;
    try {
      eventType=parser.getEventType();
    }
 catch (    XmlPullParserException xppe) {
    }
    String oneOf=null;
    if (names.length == 1) {
      oneOf=""String_Node_Str"" + names[0] + ""String_Node_Str"";
    }
 else {
      oneOf=""String_Node_Str"";
      for (      String name : names) {
        oneOf+=""String_Node_Str"" + name + ""String_Node_Str"";
      }
      oneOf+=""String_Node_Str"";
    }
    String foundInstead=""String_Node_Str"";
    if (eventType == KXmlParser.END_TAG) {
      foundInstead=""String_Node_Str"" + parser.getName() + ""String_Node_Str"";
    }
 else     if (eventType == KXmlParser.START_TAG) {
      foundInstead=""String_Node_Str"" + parser.getName() + ""String_Node_Str"";
    }
 else     if (eventType == KXmlParser.TEXT) {
      foundInstead=""String_Node_Str"" + parser.getText() + ""String_Node_Str"";
    }
 else {
      foundInstead=""String_Node_Str"";
    }
    throw new InvalidStructureException(""String_Node_Str"" + oneOf + foundInstead+ ""String_Node_Str"",parser);
  }
}",0.9037940379403794
146766,"public void serialize(DataInstance instance,TreeReference base) throws IOException {
  AbstractTreeElement root;
  if (base == null) {
    root=instance.getRoot();
  }
 else {
    root=instance.resolveReference(base);
  }
  serializer.startTag(root.getNamespace(),root.getName());
  for (int i=0; i < root.getNumChildren(); i++) {
    AbstractTreeElement childAt=root.getChildAt(i);
    serializeNode(childAt);
  }
  serializer.endTag(root.getNamespace(),root.getName());
}","public void serialize(DataInstance instance,TreeReference base) throws IOException {
  AbstractTreeElement root;
  if (base == null) {
    root=instance.getRoot();
  }
 else {
    root=instance.resolveReference(base);
  }
  serializer.startTag(root.getNamespace(),root.getName());
  for (int i=0; i < root.getNumChildren(); i++) {
    AbstractTreeElement childAt=root.getChildAt(i);
    serializeNode(childAt);
  }
  serializer.endTag(root.getNamespace(),root.getName());
  serializer.flush();
}",0.9772727272727272
146767,"/** 
 * @param context A data model which is compatible with any xpath functions in the underlying Text
 * @return The evaluated string value for this Text object.
 */
public String evaluate(EvaluationContext context){
switch (type) {
case TEXT_TYPE_FLAT:
    return argument;
case TEXT_TYPE_LOCALE:
  String id=argument;
if (argument.equals(""String_Node_Str"")) {
  id=arguments.get(""String_Node_Str"").evaluate(context);
}
return Localization.get(id);
case TEXT_TYPE_XPATH:
try {
if (cacheParse == null) {
cacheParse=XPathParseTool.parseXPath(""String_Node_Str"" + argument + ""String_Node_Str"");
}
EvaluationContext temp=new EvaluationContext(context,context == null ? null : context.getContextRef());
temp.addFunctionHandler(new IFunctionHandler(){
public Object eval(Object[] args,EvaluationContext ec){
  Object o=XPathFuncExpr.toDate(args[0]);
  if (!(o instanceof Date)) {
    return ""String_Node_Str"";
  }
  String type=(String)args[1];
  int format=DateUtils.FORMAT_HUMAN_READABLE_SHORT;
  if (type.equals(""String_Node_Str"")) {
    format=DateUtils.FORMAT_HUMAN_READABLE_SHORT;
  }
 else   if (type.equals(""String_Node_Str"")) {
    format=DateUtils.FORMAT_ISO8601;
  }
  return DateUtils.formatDate((Date)o,format);
}
public String getName(){
  return ""String_Node_Str"";
}
public Vector getPrototypes(){
  Vector format=new Vector();
  Class[] prototypes=new Class[]{Date.class,String.class};
  format.addElement(prototypes);
  return format;
}
public boolean rawArgs(){
  return false;
}
public boolean realTime(){
  return false;
}
}
);
temp.addFunctionHandler(new IFunctionHandler(){
public Object eval(Object[] args,EvaluationContext ec){
  Calendar c=Calendar.getInstance();
  c.setTime(new Date());
  return String.valueOf(c.get(Calendar.DAY_OF_WEEK));
}
public String getName(){
  return ""String_Node_Str"";
}
public Vector getPrototypes(){
  Vector format=new Vector();
  Class[] prototypes=new Class[]{};
  format.addElement(prototypes);
  return format;
}
public boolean rawArgs(){
  return false;
}
public boolean realTime(){
  return false;
}
}
);
for (Enumeration en=arguments.keys(); en.hasMoreElements(); ) {
String key=(String)en.nextElement();
String value=arguments.get(key).evaluate(context);
temp.setVariable(key,value);
}
return (String)cacheParse.eval(context.getMainInstance(),context);
}
 catch (XPathSyntaxException e) {
e.printStackTrace();
}
return argument;
case TEXT_TYPE_COMPOSITE:
String ret=""String_Node_Str"";
for (int i=0; i < arguments.size(); ++i) {
Text item=arguments.get(String.valueOf(i));
ret+=item.evaluate(context) + ""String_Node_Str"";
}
return ret;
default :
return argument;
}
}","/** 
 * @param context A data model which is compatible with any xpath functions in the underlying Text
 * @return The evaluated string value for this Text object.
 */
public String evaluate(EvaluationContext context){
switch (type) {
case TEXT_TYPE_FLAT:
    return argument;
case TEXT_TYPE_LOCALE:
  String id=argument;
if (argument.equals(""String_Node_Str"")) {
  id=arguments.get(""String_Node_Str"").evaluate(context);
}
return Localization.get(id);
case TEXT_TYPE_XPATH:
try {
if (cacheParse == null) {
cacheParse=XPathParseTool.parseXPath(""String_Node_Str"" + argument + ""String_Node_Str"");
}
EvaluationContext temp;
if (context == null) {
temp=new EvaluationContext(null);
}
 else {
temp=new EvaluationContext(context,context.getContextRef());
}
temp.addFunctionHandler(new IFunctionHandler(){
public Object eval(Object[] args,EvaluationContext ec){
  Object o=XPathFuncExpr.toDate(args[0]);
  if (!(o instanceof Date)) {
    return ""String_Node_Str"";
  }
  String type=(String)args[1];
  int format=DateUtils.FORMAT_HUMAN_READABLE_SHORT;
  if (type.equals(""String_Node_Str"")) {
    format=DateUtils.FORMAT_HUMAN_READABLE_SHORT;
  }
 else   if (type.equals(""String_Node_Str"")) {
    format=DateUtils.FORMAT_ISO8601;
  }
  return DateUtils.formatDate((Date)o,format);
}
public String getName(){
  return ""String_Node_Str"";
}
public Vector getPrototypes(){
  Vector format=new Vector();
  Class[] prototypes=new Class[]{Date.class,String.class};
  format.addElement(prototypes);
  return format;
}
public boolean rawArgs(){
  return false;
}
public boolean realTime(){
  return false;
}
}
);
temp.addFunctionHandler(new IFunctionHandler(){
public Object eval(Object[] args,EvaluationContext ec){
  Calendar c=Calendar.getInstance();
  c.setTime(new Date());
  return String.valueOf(c.get(Calendar.DAY_OF_WEEK));
}
public String getName(){
  return ""String_Node_Str"";
}
public Vector getPrototypes(){
  Vector format=new Vector();
  Class[] prototypes=new Class[]{};
  format.addElement(prototypes);
  return format;
}
public boolean rawArgs(){
  return false;
}
public boolean realTime(){
  return false;
}
}
);
for (Enumeration en=arguments.keys(); en.hasMoreElements(); ) {
String key=(String)en.nextElement();
String value=arguments.get(key).evaluate(context);
temp.setVariable(key,value);
}
return (String)cacheParse.eval(temp.getMainInstance(),temp);
}
 catch (XPathSyntaxException e) {
e.printStackTrace();
}
return argument;
case TEXT_TYPE_COMPOSITE:
String ret=""String_Node_Str"";
for (int i=0; i < arguments.size(); ++i) {
Text item=arguments.get(String.valueOf(i));
ret+=item.evaluate(context) + ""String_Node_Str"";
}
return ret;
default :
return argument;
}
}",0.9690332326283988
146768,"public boolean equals(Object o){
  return (o instanceof PrefixTreeNode ? prefix.equals(((PrefixTreeNode)o).prefix) : false);
}","public boolean equals(Object o){
  return (o instanceof PrefixTreeNode ? ArrayUtilities.arraysEqual(prefix,0,((PrefixTreeNode)o).prefix,0) : false);
}",0.855072463768116
146769,"/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(DataInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(model,evalContext,args,argVals);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    argVals[0]=XPathFuncExpr.unpack(args[0].eval(model,evalContext));
    if (!isNull(argVals[0])) {
      return argVals[0];
    }
 else {
      argVals[1]=args[1].eval(model,evalContext);
      return argVals[1];
    }
  }
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.TRUE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.FALSE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toBoolean(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toNumeric(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toInt(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDouble(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toString(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDate(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolNot(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolStr(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return dateStr(argVals[0],argVals[1]);
  }
 else   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
    return multiSelected(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return countSelected(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return selectedAt(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
    if (args.length == 1) {
      return position(((XPathNodeset)argVals[0]).getRefAt(0));
    }
 else {
      if (evalContext.getContextPosition() != -1) {
        return new Double(evalContext.getContextPosition());
      }
      return position(evalContext.getContextRef());
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return count(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    if (argVals[0] instanceof XPathNodeset) {
      return sum(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (argVals[0] instanceof XPathNodeset) {
      return max(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return max(argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (argVals[0] instanceof XPathNodeset) {
      return min(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return min(argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return DateUtils.roundDate(new Date());
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Date();
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
      return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return join(""String_Node_Str"",argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
      return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
    }
 else {
      return join(argVals[0],subsetArgList(argVals,1));
    }
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 2 || args.length == 3)) {
    return substring(argVals[0],argVals[1],args.length == 3 ? argVals[2] : null);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return stringLength(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2) {
    if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
      return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
    }
 else {
      return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
    if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
      Object[] factors=((XPathNodeset)argVals[2]).toArgList();
      Object[] weights=((XPathNodeset)argVals[3]).toArgList();
      if (factors.length != weights.length) {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
      return checklistWeighted(argVals[0],argVals[1],factors,weights);
    }
 else {
      return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return regex(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    return argVals[0];
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Double(MathUtils.getRand().nextDouble());
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
    if (args.length == 0) {
      return PropertyUtils.genUUID();
    }
    int len=toInt(argVals[0]).intValue();
    return PropertyUtils.genGUID(len);
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 2)) {
    double a=toDouble(argVals[0]).doubleValue();
    double b=toDouble(argVals[1]).doubleValue();
    return Math.pow(a,b);
  }
 else {
    IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
    if (handler != null) {
      return evalCustomFunction(handler,argVals,evalContext);
    }
 else {
      throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}","/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(DataInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(model,evalContext,args,argVals);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    argVals[0]=XPathFuncExpr.unpack(args[0].eval(model,evalContext));
    if (!isNull(argVals[0])) {
      return argVals[0];
    }
 else {
      argVals[1]=args[1].eval(model,evalContext);
      return argVals[1];
    }
  }
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.TRUE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.FALSE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toBoolean(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toNumeric(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toInt(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDouble(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toString(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDate(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolNot(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolStr(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return dateStr(argVals[0],argVals[1]);
  }
 else   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
    return multiSelected(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return countSelected(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return selectedAt(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
    if (args.length == 1) {
      return position(((XPathNodeset)argVals[0]).getRefAt(0));
    }
 else {
      if (evalContext.getContextPosition() != -1) {
        return new Double(evalContext.getContextPosition());
      }
      return position(evalContext.getContextRef());
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return count(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    if (argVals[0] instanceof XPathNodeset) {
      return sum(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (argVals[0] instanceof XPathNodeset) {
      return max(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return max(argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (argVals[0] instanceof XPathNodeset) {
      return min(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return min(argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return DateUtils.roundDate(new Date());
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Date();
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
      return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return join(""String_Node_Str"",argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
      return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
    }
 else {
      return join(argVals[0],subsetArgList(argVals,1));
    }
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 2 || args.length == 3)) {
    return substring(argVals[0],argVals[1],args.length == 3 ? argVals[2] : null);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return stringLength(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2) {
    if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
      return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
    }
 else {
      return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
    if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
      Object[] factors=((XPathNodeset)argVals[2]).toArgList();
      Object[] weights=((XPathNodeset)argVals[3]).toArgList();
      if (factors.length != weights.length) {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
      return checklistWeighted(argVals[0],argVals[1],factors,weights);
    }
 else {
      return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return regex(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    return argVals[0];
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Double(MathUtils.getRand().nextDouble());
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
    if (args.length == 0) {
      return PropertyUtils.genUUID();
    }
    int len=toInt(argVals[0]).intValue();
    return PropertyUtils.genGUID(len);
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 2)) {
    return power(argVals[0],argVals[1]);
  }
 else {
    IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
    if (handler != null) {
      return evalCustomFunction(handler,argVals,evalContext);
    }
 else {
      throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}",0.9920140669646128
146770,"protected DataBinding processStandardBindAttributes(Vector usedAtts,Element e){
  usedAtts.addElement(ID_ATTR);
  usedAtts.addElement(NODESET_ATTR);
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  DataBinding binding=new DataBinding();
  binding.setId(e.getAttributeValue(""String_Node_Str"",ID_ATTR));
  String nodeset=e.getAttributeValue(null,NODESET_ATTR);
  if (nodeset == null) {
    throw new XFormParseException(""String_Node_Str"",e);
  }
  IDataReference ref=new XPathReference(nodeset);
  ref=getAbsRef(ref,_f);
  binding.setReference(ref);
  binding.setDataType(getDataType(e.getAttributeValue(null,""String_Node_Str"")));
  String xpathRel=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRel != null) {
    if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRel,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.relevancyCondition=c;
    }
  }
  String xpathReq=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathReq != null) {
    if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathReq,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.requiredCondition=c;
    }
  }
  String xpathRO=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRO != null) {
    if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRO,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.readonlyCondition=c;
    }
  }
  String xpathConstr=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathConstr != null) {
    try {
      binding.constraint=new XPathConditional(xpathConstr);
    }
 catch (    XPathSyntaxException xse) {
      reporter.error(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xpathConstr+ ""String_Node_Str""+ xse.getMessage());
    }
    binding.constraintMessage=e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str"");
  }
  String xpathCalc=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathCalc != null) {
    Recalculate r;
    try {
      r=buildCalculate(xpathCalc,ref);
    }
 catch (    XPathSyntaxException xpse) {
      throw new XFormParseException(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xpse.getMessage()+ ""String_Node_Str""+ xpathCalc);
    }
    r=(Recalculate)_f.addTriggerable(r);
    binding.calculate=r;
  }
  binding.setPreload(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  binding.setPreloadParams(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  return binding;
}","protected DataBinding processStandardBindAttributes(Vector usedAtts,Element e){
  usedAtts.addElement(ID_ATTR);
  usedAtts.addElement(NODESET_ATTR);
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  DataBinding binding=new DataBinding();
  binding.setId(e.getAttributeValue(""String_Node_Str"",ID_ATTR));
  String nodeset=e.getAttributeValue(null,NODESET_ATTR);
  if (nodeset == null) {
    throw new XFormParseException(""String_Node_Str"",e);
  }
  IDataReference ref;
  try {
    ref=new XPathReference(nodeset);
  }
 catch (  XPathException xpe) {
    throw new XFormParseException(xpe.getMessage());
  }
  ref=getAbsRef(ref,_f);
  binding.setReference(ref);
  binding.setDataType(getDataType(e.getAttributeValue(null,""String_Node_Str"")));
  String xpathRel=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRel != null) {
    if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRel,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.relevancyCondition=c;
    }
  }
  String xpathReq=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathReq != null) {
    if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathReq,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.requiredCondition=c;
    }
  }
  String xpathRO=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRO != null) {
    if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRO,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.readonlyCondition=c;
    }
  }
  String xpathConstr=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathConstr != null) {
    try {
      binding.constraint=new XPathConditional(xpathConstr);
    }
 catch (    XPathSyntaxException xse) {
      reporter.error(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xpathConstr+ ""String_Node_Str""+ xse.getMessage());
    }
    binding.constraintMessage=e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str"");
  }
  String xpathCalc=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathCalc != null) {
    Recalculate r;
    try {
      r=buildCalculate(xpathCalc,ref);
    }
 catch (    XPathSyntaxException xpse) {
      throw new XFormParseException(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xpse.getMessage()+ ""String_Node_Str""+ xpathCalc);
    }
    r=(Recalculate)_f.addTriggerable(r);
    binding.calculate=r;
  }
  binding.setPreload(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  binding.setPreloadParams(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  return binding;
}",0.9835722819593788
146771,"private void repairIndexStore(){
  log(""String_Node_Str"",""String_Node_Str"");
  RMS ix=null;
  if (index != null && index.getIndexStore() != null) {
    ix=index.getIndexStore();
  }
 else {
    try {
      ix=rmsFactory.getIndexRMS(indexStoreName(),false);
    }
 catch (    RecordStoreException rse) {
    }
  }
  byte[] storageInfo=null;
  byte[] indexData=null;
  if (ix != null) {
    try {
      storageInfo=ix.readRecord(STORAGE_INFO_REC_ID);
    }
 catch (    RuntimeException rse) {
    }
    try {
      indexData=ix.readRecord(ID_INDEX_REC_ID);
    }
 catch (    RuntimeException rse) {
    }
  }
  if (ix != null) {
    ix.close();
  }
  try {
    RecordStore.deleteRecordStore(indexStoreName());
  }
 catch (  RecordStoreNotFoundException rsnfe) {
  }
catch (  RecordStoreException e) {
    String message=""String_Node_Str"" + indexStoreName() + ""String_Node_Str""+ e.getMessage();
    log(""String_Node_Str"",message);
    throw new RuntimeException(message);
  }
  this.initIndexStore();
  ix=index.getIndexStore();
  boolean infoRecordRecovered=false;
  if (storageInfo != null) {
    ix.updateRecord(STORAGE_INFO_REC_ID,storageInfo,true);
    infoRecordRecovered=true;
  }
  if (!infoRecordRecovered) {
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    log(""String_Node_Str"",""String_Node_Str"");
  }
  ;
  boolean indexDataRecoverd=false;
  if (indexData != null) {
    ix.updateRecord(ID_INDEX_REC_ID,storageInfo,true);
    indexDataRecoverd=true;
  }
  if (!indexDataRecoverd) {
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    log(""String_Node_Str"",""String_Node_Str"");
  }
  ;
  if (!infoRecordRecovered) {
    RMSStorageInfo info=(RMSStorageInfo)ix.readRecord(STORAGE_INFO_REC_ID,RMSStorageInfo.class);
    int stores=0;
    boolean failed=false;
    while (!failed) {
      try {
        RMS rms=rmsFactory.getDataRMS(dataStoreName(stores),false);
        stores++;
        rms.close();
      }
 catch (      RecordStoreException rse) {
        failed=true;
      }
    }
    info.numDataStores=stores;
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + stores+ ""String_Node_Str"");
    if (!ix.updateRecord(STORAGE_INFO_REC_ID,ExtUtil.serialize(info),true)) {
    }
  }
  this.datastores=new RMS[0];
  getInfoRecord();
  for (int i=0; i < datastores.length; ++i) {
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + i);
    this.getDataStore(i);
    datastores[i].ensureOpen();
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + i+ ""String_Node_Str"");
  }
  this.repair(true);
}","private void repairIndexStore(){
  log(""String_Node_Str"",""String_Node_Str"");
  RMS ix=null;
  if (index != null && index.getIndexStore() != null) {
    ix=index.getIndexStore();
  }
 else {
    try {
      ix=rmsFactory.getIndexRMS(indexStoreName(),false);
    }
 catch (    RecordStoreException rse) {
    }
  }
  byte[] storageInfo=null;
  byte[] indexData=null;
  if (ix != null) {
    try {
      storageInfo=ix.readRecord(STORAGE_INFO_REC_ID);
    }
 catch (    RuntimeException rse) {
    }
    try {
      indexData=ix.readRecord(ID_INDEX_REC_ID);
    }
 catch (    RuntimeException rse) {
    }
  }
  if (ix != null) {
    ix.close();
  }
  try {
    RecordStore.deleteRecordStore(indexStoreName());
  }
 catch (  RecordStoreNotFoundException rsnfe) {
  }
catch (  RecordStoreException e) {
    String message=""String_Node_Str"" + indexStoreName() + ""String_Node_Str""+ e.getMessage();
    log(""String_Node_Str"",message);
    throw new RuntimeException(message);
  }
  this.initIndexStore();
  ix=index.getIndexStore();
  boolean infoRecordRecovered=false;
  if (storageInfo != null) {
    ix.updateRecord(STORAGE_INFO_REC_ID,storageInfo,true);
    infoRecordRecovered=true;
  }
  if (!infoRecordRecovered) {
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    log(""String_Node_Str"",""String_Node_Str"");
  }
  ;
  boolean indexDataRecoverd=false;
  if (indexData != null) {
    ix.updateRecord(ID_INDEX_REC_ID,indexData,true);
    indexDataRecoverd=true;
  }
  if (!indexDataRecoverd) {
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    log(""String_Node_Str"",""String_Node_Str"");
  }
  ;
  if (!infoRecordRecovered) {
    RMSStorageInfo info=(RMSStorageInfo)ix.readRecord(STORAGE_INFO_REC_ID,RMSStorageInfo.class);
    int stores=0;
    boolean failed=false;
    while (!failed) {
      try {
        RMS rms=rmsFactory.getDataRMS(dataStoreName(stores),false);
        stores++;
        rms.close();
      }
 catch (      RecordStoreException rse) {
        failed=true;
      }
    }
    info.numDataStores=stores;
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + stores+ ""String_Node_Str"");
    if (!ix.updateRecord(STORAGE_INFO_REC_ID,ExtUtil.serialize(info),true)) {
    }
  }
  this.datastores=new RMS[0];
  getInfoRecord();
  for (int i=0; i < datastores.length; ++i) {
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + i);
    this.getDataStore(i);
    datastores[i].ensureOpen();
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + i+ ""String_Node_Str"");
  }
  this.repair(true);
}",0.9962092494313874
146772,"public Vector getSingleStringAttributeVector(){
  Vector strings=new Vector();
  if (attributes == null || attributes.size() == 0)   return null;
 else {
    for (int i=0; i < this.attributes.size(); i++) {
      TreeElement attribute=attributes.elementAt(i);
      String value=getAttributeValue(attribute);
      if (attribute.namespace == null || attribute.namespace == ""String_Node_Str"")       strings.addElement(new String(attribute.getName() + ""String_Node_Str"" + value));
 else       strings.addElement(new String(attribute.namespace + ""String_Node_Str"" + attribute.getName()+ ""String_Node_Str""+ value));
    }
    return strings;
  }
}","public Vector getSingleStringAttributeVector(){
  Vector strings=new Vector();
  if (attributes == null || attributes.size() == 0)   return null;
 else {
    for (int i=0; i < this.attributes.size(); i++) {
      TreeElement attribute=attributes.elementAt(i);
      String value=getAttributeValue(attribute);
      if (attribute.namespace == null || attribute.namespace.equals(""String_Node_Str""))       strings.addElement(new String(attribute.getName() + ""String_Node_Str"" + value));
 else       strings.addElement(new String(attribute.namespace + ""String_Node_Str"" + attribute.getName()+ ""String_Node_Str""+ value));
    }
    return strings;
  }
}",0.9899302865995352
146773,"public K intern(K k){
synchronized (this) {
    int hash=k.hashCode();
    K nk=retrieve(hash);
    if (nk == null) {
      register(hash,k);
      return k;
    }
    if (k.equals(nk)) {
      return nk;
    }
    return k;
  }
}","public K intern(K k){
synchronized (this) {
    int hash=k.hashCode();
    K nk=retrieve(hash);
    if (nk == null) {
      register(hash,k);
      return k;
    }
    if (k.equals(nk)) {
      return nk;
    }
 else {
      System.out.println(""String_Node_Str"" + nk.toString() + ""String_Node_Str""+ k);
    }
    return k;
  }
}",0.7598566308243727
146774,"public void run(){
  Vector<Integer> toRemove=new Vector<Integer>();
  while (true) {
    try {
      toRemove.removeAllElements();
      for (int i=0; i < caches.size(); ++i) {
        CacheTable cache=(CacheTable)caches.elementAt(i).get();
        if (cache == null) {
          toRemove.addElement(DataUtil.integer(i));
        }
 else {
          Hashtable<Integer,WeakReference> table=cache.currentTable;
          int start=table.size();
          if (start > cache.largestSize) {
            cache.largestSize=start;
          }
          for (Enumeration en=table.keys(); en.hasMoreElements(); ) {
            Object key=en.nextElement();
            if (((WeakReference)table.get(key)).get() == null) {
              table.remove(key);
            }
          }
synchronized (cache) {
            if (cache.largestSize > 50 && cache.largestSize > (cache.currentTable.size() >> 2)) {
              Hashtable newTable=new Hashtable(cache.currentTable.size());
              for (Enumeration en=table.keys(); en.hasMoreElements(); ) {
                Object key=en.nextElement();
                newTable.put(key,cache.currentTable.get(key));
              }
              cache.currentTable=newTable;
              cache.largestSize=cache.currentTable.size();
            }
          }
        }
      }
      for (int id=toRemove.size() - 1; id >= 0; --id) {
        caches.removeElementAt(toRemove.elementAt(id));
      }
      try {
        Thread.sleep(3000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public void run(){
  Vector<Integer> toRemove=new Vector<Integer>();
  while (true) {
    try {
      toRemove.removeAllElements();
      for (int i=0; i < caches.size(); ++i) {
        CacheTable cache=(CacheTable)caches.elementAt(i).get();
        if (cache == null) {
          toRemove.addElement(DataUtil.integer(i));
        }
 else {
          Hashtable<Integer,WeakReference> table=cache.currentTable;
          int start=table.size();
          if (start > cache.totalAdditions) {
            cache.totalAdditions=start;
          }
          for (Enumeration en=table.keys(); en.hasMoreElements(); ) {
            Object key=en.nextElement();
            if (((WeakReference)table.get(key)).get() == null) {
synchronized (cache) {
                table.remove(key);
              }
            }
          }
synchronized (cache) {
            if (cache.totalAdditions > 50 && cache.totalAdditions - cache.currentTable.size() > (cache.currentTable.size() >> 2)) {
              Hashtable newTable=new Hashtable(cache.currentTable.size());
              int oldMax=cache.totalAdditions;
              for (Enumeration en=table.keys(); en.hasMoreElements(); ) {
                Object key=en.nextElement();
                newTable.put(key,cache.currentTable.get(key));
              }
              cache.currentTable=newTable;
              cache.totalAdditions=cache.currentTable.size();
            }
          }
        }
      }
      for (int id=toRemove.size() - 1; id >= 0; --id) {
        caches.removeElementAt(toRemove.elementAt(id));
      }
      try {
        Thread.sleep(3000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.930576070901034
146775,"public void register(int key,K item){
synchronized (this) {
    currentTable.put(DataUtil.integer(key),new WeakReference(item));
  }
}","public void register(int key,K item){
synchronized (this) {
    currentTable.put(DataUtil.integer(key),new WeakReference(item));
    totalAdditions++;
  }
}",0.9241379310344828
146776,"public int hashCode(){
  int code=this.axis | this.test | (this.name == null ? 0 : this.name.hashCode())| (this.literal == null ? 0 : this.literal.hashCode())| (this.namespace == null ? 0 : this.namespace.hashCode());
  for (  XPathExpression xpe : predicates) {
    code|=xpe.hashCode();
  }
  return code;
}","public int hashCode(){
  int code=this.axis ^ this.test ^ (this.name == null ? 0 : this.name.hashCode())^ (this.literal == null ? 0 : this.literal.hashCode())^ (this.namespace == null ? 0 : this.namespace.hashCode());
  for (  XPathExpression xpe : predicates) {
    code^=xpe.hashCode();
  }
  return code;
}",0.948220064724919
146777,"private void buildIndex(){
synchronized (metadataAccessLock) {
    MemoryUtils.stopTerning();
    try {
      metaDataIndex=new Hashtable();
      if (!hasMetaData) {
        return;
      }
      String[] fields=getFields();
      for (int k=0; k < fields.length; k++) {
        metaDataIndex.put(fields[k],new Hashtable());
      }
      IStorageIterator i=iterate();
      int records=this.getNumRecords();
      Hashtable[] metadata=new Hashtable[records];
      int[] recordIds=new int[records];
      for (int j=0; j < records; ++j) {
        metadata[j]=new Hashtable(fields.length);
        for (        String field : fields) {
          metadata[j].put(field,""String_Node_Str"");
        }
      }
      int count=0;
      IMetaData obj;
      while (i.hasMore()) {
        recordIds[count]=i.nextID();
        count++;
      }
      for (int index=0; index < recordIds.length; ++index) {
        obj=(IMetaData)read(recordIds[index]);
        copyHT(metadata[index],getMetaData(obj,fields),fields);
        obj=null;
        System.gc();
      }
      for (int index=0; index < recordIds.length; ++index) {
        indexMetaData(recordIds[index],metadata[index]);
      }
    }
  finally {
      MemoryUtils.revertTerning();
    }
  }
}","private void buildIndex(){
synchronized (metadataAccessLock) {
    try {
      metaDataIndex=new Hashtable();
      if (!hasMetaData) {
        return;
      }
      String[] fields=getFields();
      for (int k=0; k < fields.length; k++) {
        metaDataIndex.put(fields[k],new Hashtable());
      }
      IStorageIterator i=iterate();
      int records=this.getNumRecords();
      Hashtable[] metadata=new Hashtable[records];
      int[] recordIds=new int[records];
      for (int j=0; j < records; ++j) {
        metadata[j]=new Hashtable(fields.length);
        for (        String field : fields) {
          metadata[j].put(field,""String_Node_Str"");
        }
      }
      int count=0;
      IMetaData obj;
      while (i.hasMore()) {
        recordIds[count]=i.nextID();
        count++;
      }
      for (int index=0; index < recordIds.length; ++index) {
        obj=(IMetaData)read(recordIds[index]);
        copyHT(metadata[index],getMetaData(obj,fields),fields);
        obj=null;
        System.gc();
      }
      for (int index=0; index < recordIds.length; ++index) {
        indexMetaData(recordIds[index],metadata[index]);
      }
    }
  finally {
    }
  }
}",0.9727947238252268
146778,"public static void startStateWithLoadingScreen(State state,ProgressIndicator indicator){
  final State s=state;
  loading.cancelLoading();
  loading=new LoadingScreenThread(display);
  loading.startLoading(indicator);
  if (display != null) {
    CrashHandler.expire(display.getCurrent());
  }
  new HandledThread(new Runnable(){
    public void run(){
      s.start();
    }
  }
).start();
}","public static void startStateWithLoadingScreen(State state,ProgressIndicator indicator){
  final State s=state;
  loading.cancelLoading();
  loading=new LoadingScreenThread(display);
  loading.startLoading(indicator);
  if (display != null) {
    CrashHandler.expire(display.getCurrent());
  }
  new HandledThread(new Runnable(){
    public void run(){
      String className=s.getClass().getName();
      MemoryUtils.printMemoryTest(className.substring(Math.max(0,className.lastIndexOf('.'))));
      s.start();
    }
  }
).start();
}",0.8457389428263214
146779,"public void run(){
  s.start();
}","public void run(){
  String className=s.getClass().getName();
  MemoryUtils.printMemoryTest(className.substring(Math.max(0,className.lastIndexOf('.'))));
  s.start();
}",0.3283582089552239
146780,"public static void main(String argv[]){
  XFormValidatorGUI.instance=new XFormValidatorGUI();
}","public static void main(String argv[]){
  XFormValidatorGUI.instance=new XFormValidatorGUI();
  XFormUtils.setXFormParserFactory(new XFormParserFactory(interns));
}",0.7335907335907336
146781,"public TreeReference genericize(){
  TreeReference genericRef=clone();
  for (int i=0; i < genericRef.size(); i++) {
    genericRef.setMultiplicity(i,INDEX_UNBOUND);
  }
  return genericRef;
}","public TreeReference genericize(){
  TreeReference genericRef=clone();
  for (int i=0; i < genericRef.size(); i++) {
    if (genericRef.getMultiplicity(i) > -1 || genericRef.getMultiplicity(i) == INDEX_TEMPLATE) {
      genericRef.setMultiplicity(i,INDEX_UNBOUND);
    }
  }
  return genericRef;
}",0.7075664621676891
146782,"public void configureApp(MIDlet m,InitializationListener listener){
  failsafeInit(m);
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  this.midlet=m;
  setProperties();
  loadModules();
  registerAddtlStorage();
  StorageManager.repairAll();
  RMSTransaction.cleanup();
  initReferences();
  Localization.registerLanguageReference(""String_Node_Str"",""String_Node_Str"");
  Localization.registerLanguageReference(""String_Node_Str"",""String_Node_Str"");
  final CommCareStartupInteraction interaction=new CommCareStartupInteraction(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
  Display.getDisplay(m).setCurrent(interaction);
  CommCareInitializer initializer=new CommCareInitializer(){
    int currentProgress=0;
    int block=0;
    private String validate(){
      this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
      SizeBoundVector<MissingMediaException> problems=new SizeBoundVector<MissingMediaException>(10);
      global.verifyInstallation(problems);
      if (problems.size() > 0) {
        int badImageRef=problems.getBadImageReferenceCount();
        int badAudioRef=problems.getBadAudioReferenceCount();
        int badVideoRef=problems.getBadVideoReferenceCount();
        String errorMessage=""String_Node_Str"";
        String message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",errorMessage,new String[]{""String_Node_Str"" + badImageRef,""String_Node_Str"" + badAudioRef,""String_Node_Str"" + badVideoRef});
        Hashtable<String,Vector<String>> problemList=new Hashtable<String,Vector<String>>();
        for (Enumeration en=problems.elements(); en.hasMoreElements(); ) {
          MissingMediaException ure=(MissingMediaException)en.nextElement();
          String res=ure.getResource().getResourceId();
          Vector<String> list;
          if (problemList.containsKey(res)) {
            list=problemList.get(res);
          }
 else {
            list=new Vector<String>();
          }
          int substringIndex=ure.getMessage().indexOf(""String_Node_Str"");
          String shortenedMessage=(ure.getMessage()).substring(substringIndex + 1);
          list.addElement(shortenedMessage);
          problemList.put(res,list);
        }
        message+=""String_Node_Str"";
        for (Enumeration en=problemList.keys(); en.hasMoreElements(); ) {
          String resource=(String)en.nextElement();
          for (          String s : problemList.get(resource)) {
            message+=""String_Node_Str"" + s;
          }
        }
        if (problems.getAdditional() > 0) {
          message+=""String_Node_Str"" + problems.getAdditional() + ""String_Node_Str"";
        }
        return message;
      }
      return null;
    }
    protected boolean runWrapper() throws UnfullfilledRequirementsException {
      updateProgress(10);
      ((IStorageUtilityIndexed)StorageManager.getStorage(FormDef.STORAGE_KEY)).getIDsForValue(""String_Node_Str"",""String_Node_Str"");
      CommCareContext.ClearUpdateTable();
      manager=new CommCarePlatform(CommCareUtil.getMajorVersion(),CommCareUtil.getMinorVersion());
      try {
        ResourceTable global=RetrieveGlobalResourceTable();
        ResourceTable upgrade=CommCareContext.CreateTemporaryResourceTable(CommCareUpgradeState.UPGRADE_TABLE_NAME);
        if (global.getTableReadiness() == ResourceTable.RESOURCE_TABLE_UNCOMMITED) {
          global.rollbackCommits();
        }
        if (upgrade.getTableReadiness() == ResourceTable.RESOURCE_TABLE_UNCOMMITED) {
          upgrade.rollbackCommits();
        }
        if (global.getTableReadiness() == ResourceTable.RESOURCE_TABLE_UNSTAGED) {
          global.repairTable(upgrade);
        }
        global.setStateListener(new TableStateListener(){
          static final int INSTALL_SCORE=5;
          public void resourceStateUpdated(          ResourceTable table){
            int score=0;
            int max=0;
            Vector<Resource> resources=CommCarePlatform.getResourceListFromProfile(table);
            max=resources.size() * INSTALL_SCORE;
            if (max <= INSTALL_SCORE * 2) {
              return;
            }
            for (            Resource r : resources) {
switch (r.getStatus()) {
case Resource.RESOURCE_STATUS_INSTALLED:
                score+=INSTALL_SCORE;
              break;
default :
            score+=1;
          break;
      }
    }
    updateProgress(10 + (int)Math.ceil(50 * (score * 1.0 / max)));
  }
  public void incrementProgress(  int complete,  int total){
    updateProgress(currentProgress + (int)Math.ceil(block * (complete * 1.0 / total)));
  }
}
);
if (global.isEmpty()) {
  this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
}
manager.init(CommCareUtil.getProfileReference(),global,false);
updateProgress(60);
}
 catch (UnfullfilledRequirementsException e) {
if (e.getSeverity() == UnfullfilledRequirementsException.SEVERITY_PROMPT) {
  String message=e.getMessage();
  if (e.getRequirementCode() == UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION || e.getRequirementCode() == UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION) {
    message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str"");
  }
  if (this.blockForResponse(message)) {
    try {
      RetrieveGlobalResourceTable().clear();
      manager.init(CommCareUtil.getProfileReference(),RetrieveGlobalResourceTable(),true);
    }
 catch (    UnfullfilledRequirementsException e1) {
      throw e1;
    }
catch (    UnresolvedResourceException e3) {
      throw new RuntimeException(e3.getMessage());
    }
  }
 else {
    throw e;
  }
}
 else {
  throw e;
}
}
catch (UnresolvedResourceException e) {
throw new RuntimeException(e.getMessage());
}
currentProgress=60;
block=30;
if (!CommCareUtil.getAppProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"") && !CommCareProperties.PROPERTY_YES.equals(PropertyManager._().getSingularProperty(CommCareProperties.CONTENT_VALIDATED))) {
String failureMessage=this.validate();
while (failureMessage != null) {
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  this.blockForResponse(failureMessage,""String_Node_Str"",""String_Node_Str"");
  if (this.response == CommCareInitializer.RESPONSE_YES) {
    failureMessage=this.validate();
  }
 else {
    CommCareContext.this.exitApp();
    return false;
  }
}
PropertyManager._().setProperty(CommCareProperties.CONTENT_VALIDATED,CommCareProperties.PROPERTY_YES);
}
updateProgress(90);
Localization.setLocale(""String_Node_Str"");
manager.initialize(RetrieveGlobalResourceTable());
purgeScheduler(false);
postProfilePropertyInit();
initUserFramework();
LogReportUtils.initPendingDates(new Date().getTime());
LanguageUtils.initializeLanguage(true,""String_Node_Str"");
updateProgress(95);
J2MEDisplay.init(CommCareContext.this.midlet);
if (CommCareSense.isAutoSendEnabled()) {
AutomatedSenderService.InitializeAndSpawnSenderService();
}
return true;
}
protected void askForResponse(String message,YesNoListener yesNoListener,boolean yesNo){
if (yesNo) {
interaction.AskYesNo(message,yesNoListener);
}
 else {
interaction.PromptResponse(message,yesNoListener);
}
}
protected void askForResponse(String message,YesNoListener yesNoListener,boolean yesNo,String left,String right){
if (yesNo) {
interaction.AskYesNo(message,yesNoListener,left,right);
}
 else {
interaction.PromptResponse(message,yesNoListener);
}
}
protected void setMessage(String message){
interaction.setMessage(message,true);
}
protected void updateProgress(int progress){
interaction.updateProgess(progress);
}
}
;
initializer.initialize(listener);
}","public void configureApp(MIDlet m,InitializationListener listener){
  failsafeInit(m);
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  this.midlet=m;
  setProperties();
  loadModules();
  registerAddtlStorage();
  StorageManager.repairAll();
  RMSTransaction.cleanup();
  initReferences();
  Localization.registerLanguageReference(""String_Node_Str"",""String_Node_Str"");
  Localization.registerLanguageReference(""String_Node_Str"",""String_Node_Str"");
  final CommCareStartupInteraction interaction=new CommCareStartupInteraction(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
  Display.getDisplay(m).setCurrent(interaction);
  CommCareInitializer initializer=new CommCareInitializer(){
    int currentProgress=0;
    int block=0;
    private String validate(){
      this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
      SizeBoundUniqueVector<MissingMediaException> problems=new SizeBoundUniqueVector<MissingMediaException>(10);
      global.verifyInstallation(problems);
      if (problems.size() > 0) {
        int badImageRef=problems.getBadImageReferenceCount();
        int badAudioRef=problems.getBadAudioReferenceCount();
        int badVideoRef=problems.getBadVideoReferenceCount();
        String errorMessage=""String_Node_Str"";
        String message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",errorMessage,new String[]{""String_Node_Str"" + badImageRef,""String_Node_Str"" + badAudioRef,""String_Node_Str"" + badVideoRef});
        Hashtable<String,Vector<String>> problemList=new Hashtable<String,Vector<String>>();
        for (Enumeration en=problems.elements(); en.hasMoreElements(); ) {
          MissingMediaException ure=(MissingMediaException)en.nextElement();
          String res=ure.getResource().getResourceId();
          Vector<String> list;
          if (problemList.containsKey(res)) {
            list=problemList.get(res);
          }
 else {
            list=new Vector<String>();
          }
          int substringIndex=ure.getMessage().indexOf(""String_Node_Str"");
          String shortenedMessage=(ure.getMessage()).substring(substringIndex + 1);
          list.addElement(shortenedMessage);
          problemList.put(res,list);
        }
        message+=""String_Node_Str"";
        for (Enumeration en=problemList.keys(); en.hasMoreElements(); ) {
          String resource=(String)en.nextElement();
          for (          String s : problemList.get(resource)) {
            message+=""String_Node_Str"" + s;
          }
        }
        if (problems.getAdditional() > 0) {
          message+=""String_Node_Str"" + problems.getAdditional() + ""String_Node_Str"";
        }
        return message;
      }
      return null;
    }
    protected boolean runWrapper() throws UnfullfilledRequirementsException {
      updateProgress(10);
      ((IStorageUtilityIndexed)StorageManager.getStorage(FormDef.STORAGE_KEY)).getIDsForValue(""String_Node_Str"",""String_Node_Str"");
      CommCareContext.ClearUpdateTable();
      manager=new CommCarePlatform(CommCareUtil.getMajorVersion(),CommCareUtil.getMinorVersion());
      try {
        ResourceTable global=RetrieveGlobalResourceTable();
        ResourceTable upgrade=CommCareContext.CreateTemporaryResourceTable(CommCareUpgradeState.UPGRADE_TABLE_NAME);
        if (global.getTableReadiness() == ResourceTable.RESOURCE_TABLE_UNCOMMITED) {
          global.rollbackCommits();
        }
        if (upgrade.getTableReadiness() == ResourceTable.RESOURCE_TABLE_UNCOMMITED) {
          upgrade.rollbackCommits();
        }
        if (global.getTableReadiness() == ResourceTable.RESOURCE_TABLE_UNSTAGED) {
          global.repairTable(upgrade);
        }
        global.setStateListener(new TableStateListener(){
          static final int INSTALL_SCORE=5;
          public void resourceStateUpdated(          ResourceTable table){
            int score=0;
            int max=0;
            Vector<Resource> resources=CommCarePlatform.getResourceListFromProfile(table);
            max=resources.size() * INSTALL_SCORE;
            if (max <= INSTALL_SCORE * 2) {
              return;
            }
            for (            Resource r : resources) {
switch (r.getStatus()) {
case Resource.RESOURCE_STATUS_INSTALLED:
                score+=INSTALL_SCORE;
              break;
default :
            score+=1;
          break;
      }
    }
    updateProgress(10 + (int)Math.ceil(50 * (score * 1.0 / max)));
  }
  public void incrementProgress(  int complete,  int total){
    updateProgress(currentProgress + (int)Math.ceil(block * (complete * 1.0 / total)));
  }
}
);
if (global.isEmpty()) {
  this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
}
manager.init(CommCareUtil.getProfileReference(),global,false);
updateProgress(60);
}
 catch (UnfullfilledRequirementsException e) {
if (e.getSeverity() == UnfullfilledRequirementsException.SEVERITY_PROMPT) {
  String message=e.getMessage();
  if (e.getRequirementCode() == UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION || e.getRequirementCode() == UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION) {
    message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str"");
  }
  if (this.blockForResponse(message)) {
    try {
      RetrieveGlobalResourceTable().clear();
      manager.init(CommCareUtil.getProfileReference(),RetrieveGlobalResourceTable(),true);
    }
 catch (    UnfullfilledRequirementsException e1) {
      throw e1;
    }
catch (    UnresolvedResourceException e3) {
      throw new RuntimeException(e3.getMessage());
    }
  }
 else {
    throw e;
  }
}
 else {
  throw e;
}
}
catch (UnresolvedResourceException e) {
throw new RuntimeException(e.getMessage());
}
currentProgress=60;
block=30;
if (!CommCareUtil.getAppProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"") && !CommCareProperties.PROPERTY_YES.equals(PropertyManager._().getSingularProperty(CommCareProperties.CONTENT_VALIDATED))) {
String failureMessage=this.validate();
while (failureMessage != null) {
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  this.blockForResponse(failureMessage,""String_Node_Str"",""String_Node_Str"");
  if (this.response == CommCareInitializer.RESPONSE_YES) {
    failureMessage=this.validate();
  }
 else {
    CommCareContext.this.exitApp();
    return false;
  }
}
PropertyManager._().setProperty(CommCareProperties.CONTENT_VALIDATED,CommCareProperties.PROPERTY_YES);
}
updateProgress(90);
Localization.setLocale(""String_Node_Str"");
manager.initialize(RetrieveGlobalResourceTable());
purgeScheduler(false);
postProfilePropertyInit();
initUserFramework();
LogReportUtils.initPendingDates(new Date().getTime());
LanguageUtils.initializeLanguage(true,""String_Node_Str"");
updateProgress(95);
J2MEDisplay.init(CommCareContext.this.midlet);
if (CommCareSense.isAutoSendEnabled()) {
AutomatedSenderService.InitializeAndSpawnSenderService();
}
return true;
}
protected void askForResponse(String message,YesNoListener yesNoListener,boolean yesNo){
if (yesNo) {
interaction.AskYesNo(message,yesNoListener);
}
 else {
interaction.PromptResponse(message,yesNoListener);
}
}
protected void askForResponse(String message,YesNoListener yesNoListener,boolean yesNo,String left,String right){
if (yesNo) {
interaction.AskYesNo(message,yesNoListener,left,right);
}
 else {
interaction.PromptResponse(message,yesNoListener);
}
}
protected void setMessage(String message){
interaction.setMessage(message,true);
}
protected void updateProgress(int progress){
interaction.updateProgess(progress);
}
}
;
initializer.initialize(listener);
}",0.9992160961588712
146783,"private String validate(){
  this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
  SizeBoundVector<MissingMediaException> problems=new SizeBoundVector<MissingMediaException>(10);
  global.verifyInstallation(problems);
  if (problems.size() > 0) {
    int badImageRef=problems.getBadImageReferenceCount();
    int badAudioRef=problems.getBadAudioReferenceCount();
    int badVideoRef=problems.getBadVideoReferenceCount();
    String errorMessage=""String_Node_Str"";
    String message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",errorMessage,new String[]{""String_Node_Str"" + badImageRef,""String_Node_Str"" + badAudioRef,""String_Node_Str"" + badVideoRef});
    Hashtable<String,Vector<String>> problemList=new Hashtable<String,Vector<String>>();
    for (Enumeration en=problems.elements(); en.hasMoreElements(); ) {
      MissingMediaException ure=(MissingMediaException)en.nextElement();
      String res=ure.getResource().getResourceId();
      Vector<String> list;
      if (problemList.containsKey(res)) {
        list=problemList.get(res);
      }
 else {
        list=new Vector<String>();
      }
      int substringIndex=ure.getMessage().indexOf(""String_Node_Str"");
      String shortenedMessage=(ure.getMessage()).substring(substringIndex + 1);
      list.addElement(shortenedMessage);
      problemList.put(res,list);
    }
    message+=""String_Node_Str"";
    for (Enumeration en=problemList.keys(); en.hasMoreElements(); ) {
      String resource=(String)en.nextElement();
      for (      String s : problemList.get(resource)) {
        message+=""String_Node_Str"" + s;
      }
    }
    if (problems.getAdditional() > 0) {
      message+=""String_Node_Str"" + problems.getAdditional() + ""String_Node_Str"";
    }
    return message;
  }
  return null;
}","private String validate(){
  this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
  SizeBoundUniqueVector<MissingMediaException> problems=new SizeBoundUniqueVector<MissingMediaException>(10);
  global.verifyInstallation(problems);
  if (problems.size() > 0) {
    int badImageRef=problems.getBadImageReferenceCount();
    int badAudioRef=problems.getBadAudioReferenceCount();
    int badVideoRef=problems.getBadVideoReferenceCount();
    String errorMessage=""String_Node_Str"";
    String message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",errorMessage,new String[]{""String_Node_Str"" + badImageRef,""String_Node_Str"" + badAudioRef,""String_Node_Str"" + badVideoRef});
    Hashtable<String,Vector<String>> problemList=new Hashtable<String,Vector<String>>();
    for (Enumeration en=problems.elements(); en.hasMoreElements(); ) {
      MissingMediaException ure=(MissingMediaException)en.nextElement();
      String res=ure.getResource().getResourceId();
      Vector<String> list;
      if (problemList.containsKey(res)) {
        list=problemList.get(res);
      }
 else {
        list=new Vector<String>();
      }
      int substringIndex=ure.getMessage().indexOf(""String_Node_Str"");
      String shortenedMessage=(ure.getMessage()).substring(substringIndex + 1);
      list.addElement(shortenedMessage);
      problemList.put(res,list);
    }
    message+=""String_Node_Str"";
    for (Enumeration en=problemList.keys(); en.hasMoreElements(); ) {
      String resource=(String)en.nextElement();
      for (      String s : problemList.get(resource)) {
        message+=""String_Node_Str"" + s;
      }
    }
    if (problems.getAdditional() > 0) {
      message+=""String_Node_Str"" + problems.getAdditional() + ""String_Node_Str"";
    }
    return message;
  }
  return null;
}",0.9967051070840196
146784,"public boolean verifyInstallation(Resource r,Vector<MissingMediaException> problems){
  SizeBoundVector sizeBoundProblems=(SizeBoundVector)problems;
  Suite mSuite;
  try {
    mSuite=(Suite)storage().read(cacheLocation);
  }
 catch (  Exception e) {
    sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str""));
    return true;
  }
  try {
    Hashtable<String,Entry> mHashtable=mSuite.getEntries();
    for (Enumeration en=mHashtable.keys(); en.hasMoreElements(); ) {
      String key=(String)en.nextElement();
    }
    Vector<Menu> menus=mSuite.getMenus();
    Iterator e=menus.iterator();
    int missingAURI=0;
    int missingIURI=0;
    while (e.hasNext()) {
      Menu mMenu=(Menu)e.next();
      String aURI=mMenu.getAudioURI();
      String iURI=mMenu.getImageURI();
      if (aURI != null) {
        Reference aRef=ReferenceManager._().DeriveReference(aURI);
        String aLocalName=aRef.getLocalURI();
        if (!aRef.doesBinaryExist()) {
          sizeBoundProblems.addElement(new MissingMediaException(r,aLocalName));
          sizeBoundProblems.addBadAudioReference();
          missingAURI++;
        }
      }
      if (iURI != null) {
        Reference iRef=ReferenceManager._().DeriveReference(iURI);
        String iLocalName=iRef.getLocalURI();
        if (!iRef.doesBinaryExist()) {
          sizeBoundProblems.addElement(new MissingMediaException(r,iLocalName));
          sizeBoundProblems.addBadImageReference();
          missingIURI++;
        }
      }
    }
  }
 catch (  Exception exc) {
    System.out.println(""String_Node_Str"" + exc.getMessage());
    System.out.println(""String_Node_Str"" + exc.toString());
  }
  if (problems.size() == 0) {
    return false;
  }
  return true;
}","public boolean verifyInstallation(Resource r,Vector<MissingMediaException> problems){
  SizeBoundUniqueVector sizeBoundProblems=(SizeBoundUniqueVector)problems;
  Suite mSuite;
  try {
    mSuite=(Suite)storage().read(cacheLocation);
  }
 catch (  Exception e) {
    sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str""));
    return true;
  }
  try {
    Hashtable<String,Entry> mHashtable=mSuite.getEntries();
    for (Enumeration en=mHashtable.keys(); en.hasMoreElements(); ) {
      String key=(String)en.nextElement();
    }
    Vector<Menu> menus=mSuite.getMenus();
    Iterator e=menus.iterator();
    int missingAURI=0;
    int missingIURI=0;
    while (e.hasNext()) {
      Menu mMenu=(Menu)e.next();
      String aURI=mMenu.getAudioURI();
      String iURI=mMenu.getImageURI();
      if (aURI != null) {
        Reference aRef=ReferenceManager._().DeriveReference(aURI);
        String aLocalName=aRef.getLocalURI();
        if (!aRef.doesBinaryExist()) {
          sizeBoundProblems.addElement(new MissingMediaException(r,aLocalName));
          sizeBoundProblems.addBadAudioReference();
          missingAURI++;
        }
      }
      if (iURI != null) {
        Reference iRef=ReferenceManager._().DeriveReference(iURI);
        String iLocalName=iRef.getLocalURI();
        if (!iRef.doesBinaryExist()) {
          sizeBoundProblems.addElement(new MissingMediaException(r,iLocalName));
          sizeBoundProblems.addBadImageReference();
          missingIURI++;
        }
      }
    }
  }
 catch (  Exception exc) {
    System.out.println(""String_Node_Str"" + exc.getMessage());
    System.out.println(""String_Node_Str"" + exc.toString());
  }
  if (problems.size() == 0) {
    return false;
  }
  return true;
}",0.9965576592082616
146785,"public boolean verifyInstallation(Resource r,Vector<MissingMediaException> problems){
  SizeBoundVector sizeBoundProblems=(SizeBoundVector)problems;
  FormDef formDef;
  try {
    formDef=(FormDef)storage().read(cacheLocation);
  }
 catch (  Exception e) {
    sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str""));
    return true;
  }
  Localizer localizer=formDef.getLocalizer();
  formDef=null;
  if (localizer == null) {
    return false;
  }
  int missingVideoCount=0;
  int missingImageCount=0;
  int missingAudioCount=0;
  for (  String locale : localizer.getAvailableLocales()) {
    OrderedHashtable<String,PrefixTreeNode> localeData=localizer.getLocaleData(locale);
    for (Enumeration en=localeData.keys(); en.hasMoreElements(); ) {
      String key=(String)en.nextElement();
      if (key.indexOf(""String_Node_Str"") != -1) {
        String form=key.substring(key.indexOf(""String_Node_Str"") + 1,key.length());
        if (form.equals(FormEntryCaption.TEXT_FORM_VIDEO) || form.equals(FormEntryCaption.TEXT_FORM_AUDIO) || form.equals(FormEntryCaption.TEXT_FORM_IMAGE)) {
          try {
            String externalMedia=localeData.get(key).render();
            Reference ref=ReferenceManager._().DeriveReference(externalMedia);
            String localName=ref.getLocalURI();
            try {
              if (!ref.doesBinaryExist()) {
                sizeBoundProblems.addElement(new MissingMediaException(r,localName));
                if (form.equals(FormEntryCaption.TEXT_FORM_VIDEO)) {
                  sizeBoundProblems.addBadVideoReference();
                }
                if (form.equals(FormEntryCaption.TEXT_FORM_AUDIO)) {
                  sizeBoundProblems.addBadAudioReference();
                }
                if (form.equals(FormEntryCaption.TEXT_FORM_IMAGE)) {
                  sizeBoundProblems.addBadImageReference();
                }
              }
            }
 catch (            IOException e) {
              sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str"" + localName));
            }
          }
 catch (          InvalidReferenceException e) {
          }
        }
      }
    }
  }
  if (sizeBoundProblems.size() == 0) {
    return false;
  }
  return true;
}","public boolean verifyInstallation(Resource r,Vector<MissingMediaException> problems){
  SizeBoundUniqueVector sizeBoundProblems=(SizeBoundUniqueVector)problems;
  FormDef formDef;
  try {
    formDef=(FormDef)storage().read(cacheLocation);
  }
 catch (  Exception e) {
    sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str""));
    return true;
  }
  Localizer localizer=formDef.getLocalizer();
  formDef=null;
  if (localizer == null) {
    return false;
  }
  int missingVideoCount=0;
  int missingImageCount=0;
  int missingAudioCount=0;
  for (  String locale : localizer.getAvailableLocales()) {
    OrderedHashtable<String,PrefixTreeNode> localeData=localizer.getLocaleData(locale);
    for (Enumeration en=localeData.keys(); en.hasMoreElements(); ) {
      String key=(String)en.nextElement();
      if (key.indexOf(""String_Node_Str"") != -1) {
        String form=key.substring(key.indexOf(""String_Node_Str"") + 1,key.length());
        if (form.equals(FormEntryCaption.TEXT_FORM_VIDEO) || form.equals(FormEntryCaption.TEXT_FORM_AUDIO) || form.equals(FormEntryCaption.TEXT_FORM_IMAGE)) {
          try {
            String externalMedia=localeData.get(key).render();
            Reference ref=ReferenceManager._().DeriveReference(externalMedia);
            String localName=ref.getLocalURI();
            try {
              if (!ref.doesBinaryExist()) {
                sizeBoundProblems.addElement(new MissingMediaException(r,localName));
                if (form.equals(FormEntryCaption.TEXT_FORM_VIDEO)) {
                  sizeBoundProblems.addBadVideoReference();
                }
                if (form.equals(FormEntryCaption.TEXT_FORM_AUDIO)) {
                  sizeBoundProblems.addBadAudioReference();
                }
                if (form.equals(FormEntryCaption.TEXT_FORM_IMAGE)) {
                  sizeBoundProblems.addBadImageReference();
                }
              }
            }
 catch (            IOException e) {
              sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str"" + localName));
            }
          }
 catch (          InvalidReferenceException e) {
          }
        }
      }
    }
  }
  if (sizeBoundProblems.size() == 0) {
    return false;
  }
  return true;
}",0.997355663287792
146786,"public boolean verifyInstallation(Resource r,Vector<MissingMediaException> problems){
  SizeBoundUniqueVector sizeBoundProblems=(SizeBoundUniqueVector)problems;
  FormDef formDef;
  try {
    formDef=(FormDef)storage().read(cacheLocation);
  }
 catch (  Exception e) {
    sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str""));
    return true;
  }
  Localizer localizer=formDef.getLocalizer();
  formDef=null;
  if (localizer == null) {
    return false;
  }
  int missingVideoCount=0;
  int missingImageCount=0;
  int missingAudioCount=0;
  for (  String locale : localizer.getAvailableLocales()) {
    OrderedHashtable<String,PrefixTreeNode> localeData=localizer.getLocaleData(locale);
    for (Enumeration en=localeData.keys(); en.hasMoreElements(); ) {
      String key=(String)en.nextElement();
      if (key.indexOf(""String_Node_Str"") != -1) {
        String form=key.substring(key.indexOf(""String_Node_Str"") + 1,key.length());
        if (form.equals(FormEntryCaption.TEXT_FORM_VIDEO) || form.equals(FormEntryCaption.TEXT_FORM_AUDIO) || form.equals(FormEntryCaption.TEXT_FORM_IMAGE)) {
          try {
            String externalMedia=localeData.get(key).render();
            Reference ref=ReferenceManager._().DeriveReference(externalMedia);
            String localName=ref.getLocalURI();
            try {
              if (!ref.doesBinaryExist()) {
                sizeBoundProblems.addElement(new MissingMediaException(r,localName));
                if (form.equals(FormEntryCaption.TEXT_FORM_VIDEO)) {
                  sizeBoundProblems.addBadVideoReference();
                }
                if (form.equals(FormEntryCaption.TEXT_FORM_AUDIO)) {
                  sizeBoundProblems.addBadAudioReference();
                }
                if (form.equals(FormEntryCaption.TEXT_FORM_IMAGE)) {
                  sizeBoundProblems.addBadImageReference();
                }
              }
            }
 catch (            IOException e) {
              sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str"" + localName));
            }
          }
 catch (          InvalidReferenceException e) {
          }
        }
      }
    }
  }
  if (sizeBoundProblems.size() == 0) {
    return false;
  }
  return true;
}","public boolean verifyInstallation(Resource r,Vector<MissingMediaException> problems){
  SizeBoundUniqueVector sizeBoundProblems=(SizeBoundUniqueVector)problems;
  FormDef formDef;
  try {
    formDef=(FormDef)storage().read(cacheLocation);
  }
 catch (  Exception e) {
    sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str""));
    return true;
  }
  Localizer localizer=formDef.getLocalizer();
  formDef=null;
  if (localizer == null) {
    return false;
  }
  int missingVideoCount=0;
  int missingImageCount=0;
  int missingAudioCount=0;
  for (  String locale : localizer.getAvailableLocales()) {
    OrderedHashtable<String,PrefixTreeNode> localeData=localizer.getLocaleData(locale);
    for (Enumeration en=localeData.keys(); en.hasMoreElements(); ) {
      String key=(String)en.nextElement();
      if (key.indexOf(""String_Node_Str"") != -1) {
        String form=key.substring(key.indexOf(""String_Node_Str"") + 1,key.length());
        if (form.equals(FormEntryCaption.TEXT_FORM_VIDEO) || form.equals(FormEntryCaption.TEXT_FORM_AUDIO) || form.equals(FormEntryCaption.TEXT_FORM_IMAGE)) {
          try {
            String externalMedia=localeData.get(key).render();
            Reference ref=ReferenceManager._().DeriveReference(externalMedia);
            String localName=ref.getLocalURI();
            try {
              if (!ref.doesBinaryExist()) {
                boolean addedSuccessfully=sizeBoundProblems.addElementForResult(new MissingMediaException(r,localName));
                if (addedSuccessfully) {
                  if (form.equals(FormEntryCaption.TEXT_FORM_VIDEO)) {
                    sizeBoundProblems.addBadVideoReference();
                  }
                  if (form.equals(FormEntryCaption.TEXT_FORM_AUDIO)) {
                    sizeBoundProblems.addBadAudioReference();
                  }
                  if (form.equals(FormEntryCaption.TEXT_FORM_IMAGE)) {
                    sizeBoundProblems.addBadImageReference();
                  }
                }
              }
            }
 catch (            IOException e) {
              sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str"" + localName));
            }
          }
 catch (          InvalidReferenceException e) {
          }
        }
      }
    }
  }
  if (sizeBoundProblems.size() == 0) {
    return false;
  }
  return true;
}",0.975975975975976
146787,"/** 
 * Makes some (or all) of the table's resources available
 * @param master The global resource to prepare against. Used to establish whether resources need to be fetchedremotely
 * @param instance The instance to prepare against
 * @param toInitialize The ID of a single resource after which the table preparation can stop.
 * @throws UnresolvedResourceException If a resource could not be identified and is required
 * @throws UnfullfilledRequirementsException If some resources are incompatible with the current version of CommCare
 */
public void prepareResources(ResourceTable master,CommCareInstance instance,String toInitialize) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  Stack<Resource> v=GetUnreadyResources();
  int round=-1;
  while (!v.isEmpty() && (toInitialize == null || this.getResourceWithId(toInitialize).getStatus() == Resource.RESOURCE_STATUS_UNINITIALIZED)) {
    round++;
    System.out.println(""String_Node_Str"" + round + ""String_Node_Str""+ v.size()+ ""String_Node_Str"");
    while (!v.isEmpty()) {
      Resource r=v.pop();
      boolean upgrade=false;
      Vector<Reference> invalid=new Vector<Reference>();
      if (master != null) {
        Resource peer=master.getResourceWithId(r.getResourceId());
        if (peer != null) {
          if (!r.isNewer(peer)) {
            commit(r,Resource.RESOURCE_STATUS_INSTALLED);
            continue;
          }
 else {
            upgrade=true;
          }
          invalid=ResourceTable.explodeLocalReferences(peer,master);
        }
      }
      boolean handled=false;
      UnreliableSourceException theFailure=null;
      for (      ResourceLocation location : r.getLocations()) {
        if (handled) {
          break;
        }
        if (location.isRelative()) {
          for (          Reference ref : explodeReferences(location,r,this,master)) {
            if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL && invalid.contains(ref)) {
              System.out.println(""String_Node_Str"" + location.getLocation());
            }
 else {
              try {
                handled=installResource(r,location,ref,this,instance,upgrade);
              }
 catch (              UnreliableSourceException use) {
                System.out.println(""String_Node_Str"");
                theFailure=use;
                handled=false;
                if (use.shouldBreak()) {
                  break;
                }
              }
              if (handled) {
                break;
              }
            }
          }
        }
 else {
          try {
            handled=installResource(r,location,ReferenceManager._().DeriveReference(location.getLocation()),this,instance,upgrade);
            if (handled) {
              break;
            }
          }
 catch (          InvalidReferenceException ire) {
            ire.printStackTrace();
          }
catch (          UnreliableSourceException use) {
            System.out.println(""String_Node_Str"");
            theFailure=use;
            handled=false;
            if (use.shouldBreak()) {
              break;
            }
          }
        }
      }
      if (!handled) {
        if (theFailure == null) {
          throw new UnresolvedResourceException(r,""String_Node_Str"" + r.getResourceId());
        }
 else {
          throw theFailure;
        }
      }
      if (stateListener != null) {
        stateListener.resourceStateUpdated(this);
      }
    }
    v=GetUnreadyResources();
  }
  if (toInitialize != null) {
    return;
  }
  for (  Resource stillPending : GetResources(Resource.RESOURCE_STATUS_PENDING)) {
    this.removeResource(stillPending);
  }
}","/** 
 * Makes some (or all) of the table's resources available
 * @param master The global resource to prepare against. Used to establish whether resources need to be fetchedremotely
 * @param instance The instance to prepare against
 * @param toInitialize The ID of a single resource after which the table preparation can stop.
 * @throws UnresolvedResourceException If a resource could not be identified and is required
 * @throws UnfullfilledRequirementsException If some resources are incompatible with the current version of CommCare
 */
public void prepareResources(ResourceTable master,CommCareInstance instance,String toInitialize) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  Stack<Resource> v=GetUnreadyResources();
  int round=-1;
  while (!v.isEmpty() && (toInitialize == null || this.getResourceWithId(toInitialize).getStatus() == Resource.RESOURCE_STATUS_UNINITIALIZED)) {
    round++;
    System.out.println(""String_Node_Str"" + round + ""String_Node_Str""+ v.size()+ ""String_Node_Str"");
    while (!v.isEmpty()) {
      Resource r=v.pop();
      boolean upgrade=false;
      Vector<Reference> invalid=new Vector<Reference>();
      if (master != null) {
        Resource peer=master.getResourceWithId(r.getResourceId());
        if (peer != null) {
          if (!r.isNewer(peer)) {
            commit(r,Resource.RESOURCE_STATUS_INSTALLED);
            continue;
          }
 else {
            upgrade=true;
          }
          invalid=ResourceTable.explodeLocalReferences(peer,master);
        }
      }
      boolean handled=false;
      UnreliableSourceException theFailure=null;
      for (      ResourceLocation location : r.getLocations()) {
        if (handled) {
          break;
        }
        if (location.isRelative()) {
          for (          Reference ref : explodeReferences(location,r,this,master)) {
            if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL && invalid.contains(ref)) {
              System.out.println(""String_Node_Str"" + location.getLocation());
            }
 else {
              try {
                handled=installResource(r,location,ref,this,instance,upgrade);
              }
 catch (              UnreliableSourceException use) {
                theFailure=use;
              }
              if (handled) {
                break;
              }
            }
          }
        }
 else {
          try {
            handled=installResource(r,location,ReferenceManager._().DeriveReference(location.getLocation()),this,instance,upgrade);
            if (handled) {
              break;
            }
          }
 catch (          InvalidReferenceException ire) {
            ire.printStackTrace();
          }
catch (          UnreliableSourceException use) {
            theFailure=use;
          }
        }
      }
      if (!handled) {
        if (theFailure == null) {
          throw new UnresolvedResourceException(r,""String_Node_Str"" + r.getResourceId());
        }
 else {
          throw theFailure;
        }
      }
      if (stateListener != null) {
        stateListener.resourceStateUpdated(this);
      }
    }
    v=GetUnreadyResources();
  }
  if (toInitialize != null) {
    return;
  }
  for (  Resource stillPending : GetResources(Resource.RESOURCE_STATUS_PENDING)) {
    this.removeResource(stillPending);
  }
}",0.884417808219178
146788,"/** 
 * This just calls the resource's installer directly, but also handles the logic around attempting retries if applicable
 * @throws UnfullfilledRequirementsException 
 */
private boolean installResource(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  UnreliableSourceException aFailure=null;
  for (int i=0; i < 1 + this.numberOfLossyRetries; ++i) {
    try {
      return r.getInstaller().install(r,location,ref,table,instance,upgrade);
    }
 catch (    UnreliableSourceException use) {
      System.out.println(""String_Node_Str"");
      aFailure=use;
      Logger.log(""String_Node_Str"",""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ (numberOfLossyRetries + 1)+ ""String_Node_Str""+ ref.getURI()+ ""String_Node_Str""+ use.getMessage());
      if (use.shouldBreak()) {
        break;
      }
    }
  }
  if (aFailure != null) {
    throw aFailure;
  }
  return false;
}","/** 
 * This just calls the resource's installer directly, but also handles the logic around attempting retries if applicable
 * @throws UnfullfilledRequirementsException 
 */
private boolean installResource(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  UnreliableSourceException aFailure=null;
  for (int i=0; i < 1 + this.numberOfLossyRetries; ++i) {
    try {
      return r.getInstaller().install(r,location,ref,table,instance,upgrade);
    }
 catch (    UnreliableSourceException use) {
      aFailure=use;
      Logger.log(""String_Node_Str"",""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ (numberOfLossyRetries + 1)+ ""String_Node_Str""+ ref.getURI()+ ""String_Node_Str""+ use.getMessage());
    }
  }
  if (aFailure != null) {
    throw aFailure;
  }
  return false;
}",0.8655941878567722
146789,"public UnreliableSourceException(Resource r,String message,boolean shouldBreak){
  super(r,message);
  this.shouldBreak=shouldBreak;
}","public UnreliableSourceException(Resource r,String message){
  super(r,message);
}",0.7592592592592593
146790,"public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  InputStream incoming=null;
  try {
    if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_CACHE) {
      return false;
    }
 else {
      incoming=ref.getStream();
      if (incoming == null) {
        return false;
      }
      FormDef formDef=new XFormParser(new InputStreamReader(incoming,""String_Node_Str"")).parse();
      if (formDef == null) {
        return false;
      }
      if (upgrade) {
        formDef.getInstance().schema=formDef.getInstance().schema + ""String_Node_Str"";
        storage().write(formDef);
        cacheLocation=formDef.getID();
        table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
      }
 else {
        storage().write(formDef);
        cacheLocation=formDef.getID();
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
      }
      return true;
    }
  }
 catch (  StorageFullException e) {
    e.printStackTrace();
    return false;
  }
catch (  IOException e) {
    throw new UnreliableSourceException(r,e.getMessage());
  }
catch (  XFormParseException xpe) {
    System.out.println(""String_Node_Str"");
    throw new UnreliableSourceException(r,xpe.getMessage(),true);
  }
 finally {
    try {
      if (incoming != null) {
        incoming.close();
      }
    }
 catch (    IOException e) {
    }
  }
}","public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  InputStream incoming=null;
  try {
    if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_CACHE) {
      return false;
    }
 else {
      incoming=ref.getStream();
      if (incoming == null) {
        return false;
      }
      FormDef formDef=new XFormParser(new InputStreamReader(incoming,""String_Node_Str"")).parse();
      if (formDef == null) {
        return false;
      }
      if (upgrade) {
        formDef.getInstance().schema=formDef.getInstance().schema + ""String_Node_Str"";
        storage().write(formDef);
        cacheLocation=formDef.getID();
        table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
      }
 else {
        storage().write(formDef);
        cacheLocation=formDef.getID();
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
      }
      return true;
    }
  }
 catch (  StorageFullException e) {
    e.printStackTrace();
    return false;
  }
catch (  IOException e) {
    throw new UnreliableSourceException(r,e.getMessage());
  }
catch (  XFormParseException xpe) {
    throw new UnresolvedResourceException(r,""String_Node_Str"" + ref.getURI() + ""String_Node_Str""+ xpe.getMessage(),true);
  }
 finally {
    try {
      if (incoming != null) {
        incoming.close();
      }
    }
 catch (    IOException e) {
    }
  }
}",0.9520524318730595
146791,"private static Recalculate buildCalculate(String xpath,IDataReference contextRef){
  XPathConditional calc;
  try {
    calc=new XPathConditional(xpath);
  }
 catch (  XPathSyntaxException xse) {
    System.err.println(""String_Node_Str"" + xpath + ""String_Node_Str"");
    return null;
  }
  Recalculate r=new Recalculate(calc,FormInstance.unpackReference(contextRef));
  return r;
}","private static Recalculate buildCalculate(String xpath,IDataReference contextRef) throws XPathSyntaxException {
  XPathConditional calc=new XPathConditional(xpath);
  Recalculate r=new Recalculate(calc,FormInstance.unpackReference(contextRef));
  return r;
}",0.6635367762128326
146792,"protected DataBinding processStandardBindAttributes(Vector usedAtts,Element e){
  usedAtts.addElement(ID_ATTR);
  usedAtts.addElement(NODESET_ATTR);
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  DataBinding binding=new DataBinding();
  binding.setId(e.getAttributeValue(""String_Node_Str"",ID_ATTR));
  String nodeset=e.getAttributeValue(null,NODESET_ATTR);
  if (nodeset == null) {
    throw new XFormParseException(""String_Node_Str"",e);
  }
  IDataReference ref=new XPathReference(nodeset);
  ref=getAbsRef(ref,_f);
  binding.setReference(ref);
  binding.setDataType(getDataType(e.getAttributeValue(null,""String_Node_Str"")));
  String xpathRel=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRel != null) {
    if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRel,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.relevancyCondition=c;
    }
  }
  String xpathReq=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathReq != null) {
    if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathReq,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.requiredCondition=c;
    }
  }
  String xpathRO=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRO != null) {
    if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRO,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.readonlyCondition=c;
    }
  }
  String xpathConstr=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathConstr != null) {
    try {
      binding.constraint=new XPathConditional(xpathConstr);
    }
 catch (    XPathSyntaxException xse) {
      System.err.println(""String_Node_Str"" + xpathConstr + ""String_Node_Str""+ getVagueLocation(e));
    }
    binding.constraintMessage=e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str"");
  }
  String xpathCalc=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathCalc != null) {
    Recalculate r=buildCalculate(xpathCalc,ref);
    r=(Recalculate)_f.addTriggerable(r);
    binding.calculate=r;
  }
  binding.setPreload(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  binding.setPreloadParams(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  return binding;
}","protected DataBinding processStandardBindAttributes(Vector usedAtts,Element e){
  usedAtts.addElement(ID_ATTR);
  usedAtts.addElement(NODESET_ATTR);
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  DataBinding binding=new DataBinding();
  binding.setId(e.getAttributeValue(""String_Node_Str"",ID_ATTR));
  String nodeset=e.getAttributeValue(null,NODESET_ATTR);
  if (nodeset == null) {
    throw new XFormParseException(""String_Node_Str"",e);
  }
  IDataReference ref=new XPathReference(nodeset);
  ref=getAbsRef(ref,_f);
  binding.setReference(ref);
  binding.setDataType(getDataType(e.getAttributeValue(null,""String_Node_Str"")));
  String xpathRel=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRel != null) {
    if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRel,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.relevancyCondition=c;
    }
  }
  String xpathReq=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathReq != null) {
    if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathReq,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.requiredCondition=c;
    }
  }
  String xpathRO=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRO != null) {
    if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRO,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.readonlyCondition=c;
    }
  }
  String xpathConstr=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathConstr != null) {
    try {
      binding.constraint=new XPathConditional(xpathConstr);
    }
 catch (    XPathSyntaxException xse) {
      System.err.println(""String_Node_Str"" + xpathConstr + ""String_Node_Str""+ getVagueLocation(e));
    }
    binding.constraintMessage=e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str"");
  }
  String xpathCalc=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathCalc != null) {
    Recalculate r;
    try {
      r=buildCalculate(xpathCalc,ref);
    }
 catch (    XPathSyntaxException xpse) {
      throw new XFormParseException(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xpse.getMessage()+ ""String_Node_Str""+ xpathCalc);
    }
    r=(Recalculate)_f.addTriggerable(r);
    binding.calculate=r;
  }
  binding.setPreload(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  binding.setPreloadParams(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  return binding;
}",0.9673347009626004
146793,"public void statusUpdate(int statusNumber){
switch (statusNumber) {
case CommCareOTARestoreListener.REGULAR_START:
    entry.sendMessage(""String_Node_Str"");
  return;
case CommCareOTARestoreListener.BYPASS_START:
view.addToMessage(Localization.get(""String_Node_Str"",new String[]{mRestorer.getBypassRef().getLocalURI()}));
break;
case CommCareOTARestoreListener.BYPASS_CLEAN:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.BYPASS_CLEAN_SUCCESS:
view.addToMessage(Localization.get(""String_Node_Str""));
return;
case CommCareOTARestoreListener.BYPASS_CLEANFAIL:
view.addToMessage(Localization.get(""String_Node_Str"",new String[]{mRestorer.getBypassRef().getLocalURI()}));
break;
case CommCareOTARestoreListener.BYPASS_FAIL:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_BAD_CREDENTIALS:
System.out.println(""String_Node_Str"");
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_CONNECTION_FAILED:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_BAD_DB:
entry.sendMessage(Localization.get(""String_Node_Str""));
view.setMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_DB_BUSY:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_CONNECTION_MADE:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_BAD_DOWNLOAD:
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_BAD_SERVER:
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_FAIL_OTHER:
entry.sendMessage(""String_Node_Str"");
break;
case CommCareOTARestoreListener.RESTORE_DOWNLOAD:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_RECOVER_SEND:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_NO_CACHE:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_DOWNLOADED:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_NEED_CACHE:
view.setMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_START:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_RECOVERY_WIPE:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_SUCCESS:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_FAIL:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_FAIL_PARTIAL:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_CONNECTION_FAIL_ENTRY:
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
default :
}
}","public void statusUpdate(int statusNumber){
switch (statusNumber) {
case CommCareOTARestoreListener.REGULAR_START:
    entry.sendMessage(""String_Node_Str"");
  return;
case CommCareOTARestoreListener.BYPASS_START:
view.addToMessage(Localization.get(""String_Node_Str"",new String[]{mRestorer.getBypassRef().getLocalURI()}));
break;
case CommCareOTARestoreListener.BYPASS_CLEAN:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.BYPASS_CLEAN_SUCCESS:
view.addToMessage(Localization.get(""String_Node_Str""));
return;
case CommCareOTARestoreListener.BYPASS_CLEANFAIL:
view.addToMessage(Localization.get(""String_Node_Str"",new String[]{mRestorer.getBypassRef().getLocalURI()}));
break;
case CommCareOTARestoreListener.BYPASS_FAIL:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_BAD_CREDENTIALS:
System.out.println(""String_Node_Str"");
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_CONNECTION_FAILED:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_BAD_DB:
entry.sendMessage(Localization.get(""String_Node_Str""));
view.setMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_DB_BUSY:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_CONNECTION_MADE:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_BAD_DOWNLOAD:
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_BAD_SERVER:
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_FAIL_OTHER:
entry.sendMessage(""String_Node_Str"");
break;
case CommCareOTARestoreListener.RESTORE_DOWNLOAD:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_RECOVER_SEND:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_NO_CACHE:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_DOWNLOADED:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_NEED_CACHE:
setFailView(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_START:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_RECOVERY_WIPE:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_SUCCESS:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_FAIL:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_FAIL_PARTIAL:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_CONNECTION_FAIL_ENTRY:
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
default :
}
}",0.9971453040251214
146794,"public Vector<TreeReference> evalNodeset(DataInstance model,EvaluationContext evalContext){
  if (expr instanceof XPathPathExpr) {
    return ((XPathPathExpr)expr).eval(model,evalContext).nodes;
  }
 else {
    throw new FatalException(""String_Node_Str"");
  }
}","public Vector<TreeReference> evalNodeset(DataInstance model,EvaluationContext evalContext){
  if (expr instanceof XPathPathExpr) {
    return ((XPathPathExpr)expr).eval(model,evalContext).getReferences();
  }
 else {
    throw new FatalException(""String_Node_Str"");
  }
}",0.962406015037594
146795,"private void performEvaluation(){
synchronized (evaluated) {
    if (evaluated.booleanValue()) {
      return;
    }
    nodes=ec.expandReference(unExpandedRef);
    for (int i=0; i < nodes.size(); i++) {
      if (!instance.resolveReference((TreeReference)nodes.elementAt(i)).isRelevant()) {
        nodes.removeElementAt(i);
        i--;
      }
    }
    evaluated=true;
  }
}","private void performEvaluation(){
synchronized (evaluated) {
    if (evaluated.booleanValue()) {
      return;
    }
    Vector<TreeReference> nodes=ec.expandReference(unExpandedRef);
    for (int i=0; i < nodes.size(); i++) {
      if (!instance.resolveReference((TreeReference)nodes.elementAt(i)).isRelevant()) {
        nodes.removeElementAt(i);
        i--;
      }
    }
    this.setReferences(nodes);
    evaluated=true;
  }
}",0.934648581997534
146796,"/** 
 * @return The value represented by this xpath. Can only be evaluated when this xpath represents exactly onereference, or when it represents 0 references after a filtering operation (a reference which _could_ have existed, but didn't, rather than a reference which could not represent a real node).
 */
public Object unpack(){
synchronized (evaluated) {
    if (evaluated.booleanValue()) {
      return super.unpack();
    }
    int size=unExpandedRef.size();
    boolean safe=true;
    ;
    for (int i=0; i < size; ++i) {
      if (unExpandedRef.getPredicate(i) != null) {
        safe=false;
        break;
      }
      int mult=unExpandedRef.getMultiplicity(i);
      if (!(mult >= 0 || mult == TreeReference.INDEX_UNBOUND)) {
        safe=false;
        break;
      }
    }
    if (!safe) {
      performEvaluation();
      return super.unpack();
    }
    return XPathPathExpr.getRefValue(instance,ec,unExpandedRef);
  }
}","/** 
 * @return The value represented by this xpath. Can only be evaluated when this xpath represents exactly onereference, or when it represents 0 references after a filtering operation (a reference which _could_ have existed, but didn't, rather than a reference which could not represent a real node).
 */
public Object unpack(){
synchronized (evaluated) {
    if (evaluated.booleanValue()) {
      return super.unpack();
    }
    int size=unExpandedRef.size();
    boolean safe=true;
    ;
    for (int i=0; i < size; ++i) {
      if (unExpandedRef.getPredicate(i) != null) {
        safe=false;
        break;
      }
      int mult=unExpandedRef.getMultiplicity(i);
      if (!(mult >= 0 || mult == TreeReference.INDEX_UNBOUND)) {
        safe=false;
        break;
      }
    }
    if (!safe) {
      performEvaluation();
      return super.unpack();
    }
    try {
      return XPathPathExpr.getRefValue(instance,ec,unExpandedRef);
    }
 catch (    XPathException xpe) {
      performEvaluation();
      return super.unpack();
    }
  }
}",0.9425403225806452
146797,"public boolean startRestore(InputStream input){
  listener.refreshView();
  listener.statusUpdate(CommCareOTARestoreListener.RESTORE_START);
  final InputStream fInput=input;
  if (recoveryMode) {
    listener.statusUpdate(CommCareOTARestoreListener.RESTORE_RECOVERY_WIPE);
    StorageManager.getStorage(Case.STORAGE_KEY).removeAll();
  }
  errorsOccurred=false;
  boolean success=false;
  String[] parseErrors=new String[0];
  String restoreID=null;
  System.out.println(""String_Node_Str"");
  try {
    beginTransaction();
    CommCareTransactionParserFactory factory=new CommCareTransactionParserFactory(!noPartial);
    DataModelPullParser parser=new DataModelPullParser(fInput,factory,listener);
    success=parser.parse();
    System.out.println(success ? ""String_Node_Str"" : ""String_Node_Str"");
    restoreID=factory.getRestoreId();
    caseTallies=factory.getCaseTallies();
    if (success) {
      transitions.commitSyncToken(restoreID);
      PropertyManager._().setProperty(CommCareProperties.LAST_SYNC_AT,DateUtils.formatDateTime(new Date(),DateUtils.FORMAT_ISO8601));
    }
    parseErrors=parser.getParseErrors();
  }
 catch (  IOException e) {
    listener.promptRetry(Localization.get(""String_Node_Str""));
    return false;
  }
catch (  InvalidStructureException e) {
    listener.promptRetry(Localization.get(""String_Node_Str""));
    Logger.exception(e);
    return false;
  }
catch (  XmlPullParserException e) {
    listener.promptRetry(Localization.get(""String_Node_Str""));
    Logger.exception(e);
    return false;
  }
catch (  UnfullfilledRequirementsException e) {
    listener.promptRetry(Localization.get(""String_Node_Str""));
    Logger.exception(e);
    return false;
  }
catch (  RuntimeException e) {
    Logger.exception(e);
    listener.promptRetry(Localization.get(""String_Node_Str""));
    return false;
  }
 finally {
    if (success) {
      commitTransaction();
    }
 else {
      rollbackTransaction();
    }
  }
  if (success) {
    listener.statusUpdate(CommCareOTARestoreListener.RESTORE_SUCCESS);
    Logger.log(""String_Node_Str"",""String_Node_Str"" + (restoreID != null ? restoreID : ""String_Node_Str""));
  }
 else {
    if (noPartial) {
      listener.statusUpdate(CommCareOTARestoreListener.RESTORE_FAIL);
    }
 else {
      listener.statusUpdate(CommCareOTARestoreListener.RESTORE_FAIL_PARTIAL);
    }
    Logger.log(""String_Node_Str"",(noPartial ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (restoreID != null ? restoreID : ""String_Node_Str""));
    for (    String s : parseErrors) {
      Logger.log(""String_Node_Str"",""String_Node_Str"" + s);
    }
    errorsOccurred=true;
  }
  listener.onSuccess();
  return success || !noPartial;
}","public boolean startRestore(InputStream input){
  listener.refreshView();
  listener.statusUpdate(CommCareOTARestoreListener.RESTORE_START);
  final InputStream fInput=input;
  if (recoveryMode) {
    listener.statusUpdate(CommCareOTARestoreListener.RESTORE_RECOVERY_WIPE);
    StorageManager.getStorage(Case.STORAGE_KEY).removeAll();
  }
  errorsOccurred=false;
  boolean success=false;
  String[] parseErrors=new String[0];
  String restoreID=null;
  System.out.println(""String_Node_Str"");
  try {
    beginTransaction();
    CommCareTransactionParserFactory factory=new CommCareTransactionParserFactory(!noPartial);
    DataModelPullParser parser=new DataModelPullParser(fInput,factory,listener);
    parser.requireRootEnvelopeType(""String_Node_Str"");
    success=parser.parse();
    System.out.println(success ? ""String_Node_Str"" : ""String_Node_Str"");
    restoreID=factory.getRestoreId();
    caseTallies=factory.getCaseTallies();
    if (success) {
      transitions.commitSyncToken(restoreID);
      PropertyManager._().setProperty(CommCareProperties.LAST_SYNC_AT,DateUtils.formatDateTime(new Date(),DateUtils.FORMAT_ISO8601));
    }
    parseErrors=parser.getParseErrors();
  }
 catch (  IOException e) {
    listener.promptRetry(Localization.get(""String_Node_Str""));
    return false;
  }
catch (  InvalidStructureException e) {
    listener.promptRetry(Localization.get(""String_Node_Str""));
    Logger.exception(e);
    return false;
  }
catch (  XmlPullParserException e) {
    listener.promptRetry(Localization.get(""String_Node_Str""));
    Logger.exception(e);
    return false;
  }
catch (  UnfullfilledRequirementsException e) {
    listener.promptRetry(Localization.get(""String_Node_Str""));
    Logger.exception(e);
    return false;
  }
catch (  RuntimeException e) {
    Logger.exception(e);
    listener.promptRetry(Localization.get(""String_Node_Str""));
    return false;
  }
 finally {
    if (success) {
      commitTransaction();
    }
 else {
      rollbackTransaction();
    }
  }
  if (success) {
    listener.statusUpdate(CommCareOTARestoreListener.RESTORE_SUCCESS);
    Logger.log(""String_Node_Str"",""String_Node_Str"" + (restoreID != null ? restoreID : ""String_Node_Str""));
  }
 else {
    if (noPartial) {
      listener.statusUpdate(CommCareOTARestoreListener.RESTORE_FAIL);
    }
 else {
      listener.statusUpdate(CommCareOTARestoreListener.RESTORE_FAIL_PARTIAL);
    }
    Logger.log(""String_Node_Str"",(noPartial ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (restoreID != null ? restoreID : ""String_Node_Str""));
    for (    String s : parseErrors) {
      Logger.log(""String_Node_Str"",""String_Node_Str"" + s);
    }
    errorsOccurred=true;
  }
  listener.onSuccess();
  return success || !noPartial;
}",0.9899026987332477
146798,"public Boolean parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  try {
    String rootName=parser.getName();
    String itemString=parser.getAttributeValue(null,""String_Node_Str"");
    int itemNumber=-1;
    if (itemString != null) {
      try {
        itemNumber=Integer.parseInt(itemString);
      }
 catch (      NumberFormatException e) {
        itemNumber=0;
      }
      rListener.setTotalForms(itemNumber);
    }
    parseBlock(rootName);
  }
  finally {
    try {
      is.close();
    }
 catch (    IOException ioe) {
    }
  }
  if (errors.size() == 0) {
    return Boolean.TRUE;
  }
 else {
    return Boolean.FALSE;
  }
}","public Boolean parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  try {
    String rootName=parser.getName();
    if (requiredRootEnvelope != null && !requiredRootEnvelope.equals(rootName)) {
      throw new InvalidStructureException(""String_Node_Str"" + rootName + ""String_Node_Str""+ requiredRootEnvelope+ ""String_Node_Str"",parser);
    }
    String itemString=parser.getAttributeValue(null,""String_Node_Str"");
    int itemNumber=-1;
    if (itemString != null) {
      try {
        itemNumber=Integer.parseInt(itemString);
      }
 catch (      NumberFormatException e) {
        itemNumber=0;
      }
      rListener.setTotalForms(itemNumber);
    }
    parseBlock(rootName);
  }
  finally {
    try {
      is.close();
    }
 catch (    IOException ioe) {
    }
  }
  if (errors.size() == 0) {
    return Boolean.TRUE;
  }
 else {
    return Boolean.FALSE;
  }
}",0.8599388379204893
146799,"/** 
 * Get all of the elements which will need to be evaluated (in order) when the triggerable is fired.
 * @param t
 */
public void fillTriggeredElements(Triggerable t,Vector<Triggerable> destination){
  if (t.canCascade()) {
    for (int j=0; j < t.getTargets().size(); j++) {
      TreeReference target=(TreeReference)t.getTargets().elementAt(j);
      Vector<TreeReference> updatedNodes=new Vector<TreeReference>();
      updatedNodes.addElement(target);
      if (t.isCascadingToChildren()) {
        addChildrenOfReference(target,updatedNodes);
      }
      for (      TreeReference ref : updatedNodes) {
        Vector<Triggerable> triggered=(Vector<Triggerable>)triggerIndex.get(ref);
        if (triggered != null) {
          for (int k=0; k < triggered.size(); k++) {
            Triggerable u=(Triggerable)triggered.elementAt(k);
            if (!destination.contains(u))             destination.addElement(u);
          }
        }
      }
    }
  }
}","/** 
 * Get all of the elements which will need to be evaluated (in order) when the triggerable is fired.
 * @param t
 */
public void fillTriggeredElements(Triggerable t,Vector<Triggerable> destination){
  if (t.canCascade()) {
    for (int j=0; j < t.getTargets().size(); j++) {
      TreeReference target=(TreeReference)t.getTargets().elementAt(j);
      Vector<TreeReference> updatedNodes=new Vector<TreeReference>();
      updatedNodes.addElement(target);
      if (t.isCascadingToChildren()) {
        addChildrenOfReference(target,updatedNodes);
      }
      for (      TreeReference ref : updatedNodes) {
        Vector<Triggerable> triggered=(Vector<Triggerable>)triggerIndex.get(ref.hasPredicates() ? ref.removePredicates() : ref);
        if (triggered != null) {
          for (int k=0; k < triggered.size(); k++) {
            Triggerable u=(Triggerable)triggered.elementAt(k);
            if (!destination.contains(u))             destination.addElement(u);
          }
        }
      }
    }
  }
}",0.9762506316321374
146800,"public int hashCode(){
  int hash=(new Integer(refLevel)).hashCode();
  for (int i=0; i < size(); i++) {
    Integer mult=DataUtil.integer(getMultiplicity(i));
    if (i == 0 && mult.intValue() == INDEX_UNBOUND)     mult=DataUtil.integer(0);
    hash^=getName(i).hashCode();
    hash^=mult.hashCode();
  }
  return hash;
}","public int hashCode(){
  int hash=(new Integer(refLevel)).hashCode();
  for (int i=0; i < size(); i++) {
    Integer mult=DataUtil.integer(getMultiplicity(i));
    if (i == 0 && mult.intValue() == INDEX_UNBOUND)     mult=DataUtil.integer(0);
    hash^=getName(i).hashCode();
    hash^=mult.hashCode();
    Vector<XPathExpression> predicates=this.getPredicate(i);
    if (predicates == null) {
      continue;
    }
    int val=0;
    for (    XPathExpression xpe : predicates) {
      hash^=val;
      hash^=xpe.hashCode();
      ++val;
    }
  }
  return hash;
}",0.6983050847457627
146801,"private static void getTriggers(XPathExpression x,Vector<TreeReference> v,TreeReference contextRef){
  if (x instanceof XPathPathExpr) {
    TreeReference ref=((XPathPathExpr)x).getReference();
    TreeReference contextualized=ref;
    if (contextRef != null) {
      contextualized=ref.contextualize(contextRef);
    }
    if (!v.contains(contextualized)) {
      v.addElement(contextualized);
    }
    for (int i=0; i < ref.size(); i++) {
      Vector<XPathExpression> predicates=ref.getPredicate(i);
      if (predicates == null) {
        continue;
      }
      if (!ref.isAbsolute()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      TreeReference predicateContext=ref.getSubReference(i);
      for (      XPathExpression predicate : predicates) {
        getTriggers(predicate,v,predicateContext);
      }
    }
  }
 else   if (x instanceof XPathBinaryOpExpr) {
    getTriggers(((XPathBinaryOpExpr)x).a,v,contextRef);
    getTriggers(((XPathBinaryOpExpr)x).b,v,contextRef);
  }
 else   if (x instanceof XPathUnaryOpExpr) {
    getTriggers(((XPathUnaryOpExpr)x).a,v,contextRef);
  }
 else   if (x instanceof XPathFuncExpr) {
    XPathFuncExpr fx=(XPathFuncExpr)x;
    for (int i=0; i < fx.args.length; i++)     getTriggers(fx.args[i],v,contextRef);
  }
}","private static void getTriggers(XPathExpression x,Vector<TreeReference> v,TreeReference contextRef){
  if (x instanceof XPathPathExpr) {
    TreeReference ref=((XPathPathExpr)x).getReference();
    TreeReference contextualized=ref;
    if (contextRef != null) {
      contextualized=ref.contextualize(contextRef);
    }
    if (contextualized.hasPredicates()) {
      contextualized=contextualized.removePredicates();
    }
    if (!v.contains(contextualized)) {
      v.addElement(contextualized);
    }
    for (int i=0; i < ref.size(); i++) {
      Vector<XPathExpression> predicates=ref.getPredicate(i);
      if (predicates == null) {
        continue;
      }
      if (!ref.isAbsolute()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      TreeReference predicateContext=ref.getSubReference(i);
      for (      XPathExpression predicate : predicates) {
        getTriggers(predicate,v,predicateContext);
      }
    }
  }
 else   if (x instanceof XPathBinaryOpExpr) {
    getTriggers(((XPathBinaryOpExpr)x).a,v,contextRef);
    getTriggers(((XPathBinaryOpExpr)x).b,v,contextRef);
  }
 else   if (x instanceof XPathUnaryOpExpr) {
    getTriggers(((XPathUnaryOpExpr)x).a,v,contextRef);
  }
 else   if (x instanceof XPathFuncExpr) {
    XPathFuncExpr fx=(XPathFuncExpr)x;
    for (int i=0; i < fx.args.length; i++)     getTriggers(fx.args[i],v,contextRef);
  }
}",0.9612518628912072
146802,"private boolean command(String command) throws BadPlaybackException {
  environment.recordAction(new Action(new Command(command)));
  if (""String_Node_Str"".equalsIgnoreCase(command)) {
    fec.stepToNextEvent();
    return false;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(command)) {
    forward=false;
    fec.stepToPreviousEvent();
    return false;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(command)) {
    out.println(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(command) && fec.getModel().getEvent() == FormEntryController.EVENT_END_OF_FORM) {
    out.println(""String_Node_Str"");
    return true;
  }
 else {
    badInput(command,""String_Node_Str"" + command);
    return false;
  }
}","private boolean command(String command) throws BadPlaybackException {
  environment.recordAction(new Action(new Command(command)));
  if (""String_Node_Str"".equalsIgnoreCase(command)) {
    fec.stepToNextEvent();
    return false;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(command)) {
    forward=false;
    fec.stepToPreviousEvent();
    return false;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(command)) {
    out.println(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(command) && fec.getModel().getEvent() == FormEntryController.EVENT_END_OF_FORM) {
    out.println(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(command)) {
    printInstance(out,fec.getModel().getForm().getInstance());
    return false;
  }
 else {
    badInput(command,""String_Node_Str"" + command);
    return false;
  }
}",0.9123020706455542
146803,"/** 
 */
private static void init(){
  if (globalLocalizer == null) {
    globalLocalizer=new Localizer(true,true);
  }
}","/** 
 */
private static void init(){
  if (globalLocalizer == null) {
    globalLocalizer=new Localizer(true,false);
  }
}",0.97119341563786
146804,"/** 
 * Retrieve the localized text for a text handle in the given locale. If no mapping is found initially, then, depending on enabled fallback modes, other places will be searched until a mapping is found. <p> The search order is thus: 1) Specified locale, specified text form 2) Specified locale, default text form 3) Default locale, specified text form 4) Default locale, default text form <p> (1) and (3) are only searched if a text form ('long', 'short', etc.) is specified. If a text form is specified, (2) and (4) are only searched if default-form-fallback mode is enabled. (3) and (4) are only searched if default-locale-fallback mode is enabled. It is not an error in this situation if no default locale is set; (3) and (4) will simply not be searched.
 * @param textID Text handle (text ID appended with optional text form). Must not be null.
 * @param locale Locale. Must be defined and not null.
 * @return Localized text. If no text is found after using all fallbacks, return null.
 * @throws UnregisteredLocaleException If the locale is not defined or null.
 * @throws NullPointerException if textID is null
 */
public String getText(String textID,String locale){
  String text=getRawText(locale,textID);
  if (text == null && fallbackDefaultForm && textID.indexOf(""String_Node_Str"") != -1)   text=getRawText(locale,textID.substring(0,textID.indexOf(""String_Node_Str"")));
  return text;
}","/** 
 * Retrieve the localized text for a text handle in the given locale. If no mapping is found initially, then, depending on enabled fallback modes, other places will be searched until a mapping is found. <p> The search order is thus: 1) Specified locale, specified text form 2) Specified locale, default text form 3) Default locale, specified text form 4) Default locale, default text form <p> (1) and (3) are only searched if a text form ('long', 'short', etc.) is specified. If a text form is specified, (2) and (4) are only searched if default-form-fallback mode is enabled. (3) and (4) are only searched if default-locale-fallback mode is enabled. It is not an error in this situation if no default locale is set; (3) and (4) will simply not be searched.
 * @param textID Text handle (text ID appended with optional text form). Must not be null.
 * @param locale Locale. Must be defined and not null.
 * @return Localized text. If no text is found after using all fallbacks, return null.
 * @throws UnregisteredLocaleException If the locale is not defined or null.
 * @throws NullPointerException if textID is null
 */
public String getText(String textID,String locale){
  String text=getRawText(locale,textID);
  if (text == null && fallbackDefaultForm && textID.indexOf(""String_Node_Str"") != -1)   text=getRawText(locale,textID.substring(0,textID.indexOf(""String_Node_Str"")));
  if (text == null && fallbackDefaultLocale && !locale.equals(defaultLocale) && defaultLocale != null && fallbackDefaultForm)   text=getText(textID,defaultLocale);
  return text;
}",0.9447811447811448
146805,"public User getUser(){
  if (loggedInUserID != null) {
    return (User)((IStorageUtilityIndexed)StorageManager.getStorage(User.STORAGE_KEY)).getRecordForValue(User.META_UID,loggedInUserID);
  }
 else   if (loggedInUserID == User.DEMO_USER) {
    return User.FactoryDemoUser();
  }
 else {
    return null;
  }
}","public User getUser(){
  if (User.DEMO_USER.equals(loggedInUserID)) {
    return User.FactoryDemoUser();
  }
 else   if (loggedInUserID != null) {
    return (User)((IStorageUtilityIndexed)StorageManager.getStorage(User.STORAGE_KEY)).getRecordForValue(User.META_UID,loggedInUserID);
  }
 else {
    return null;
  }
}",0.7027027027027027
146806,"/** 
 * Reads the form definition object from the supplied stream. Requires that the instance has been set to a prototype of the instance that should be used for deserialization.
 * @param dis - the stream to read from.
 * @throws IOException
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
public void readExternal(DataInputStream dis,PrototypeFactory pf) throws IOException, DeserializationException {
  setID(ExtUtil.readInt(dis));
  setName(ExtUtil.nullIfEmpty(ExtUtil.readString(dis)));
  setTitle((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setChildren((Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf));
  setInstance((FormInstance)ExtUtil.read(dis,FormInstance.class,pf));
  setLocalizer((Localizer)ExtUtil.read(dis,new ExtWrapNullable(Localizer.class),pf));
  Vector vcond=(Vector)ExtUtil.read(dis,new ExtWrapList(Condition.class),pf);
  for (Enumeration e=vcond.elements(); e.hasMoreElements(); ) {
    addTriggerable((Condition)e.nextElement());
  }
  Vector vcalc=(Vector)ExtUtil.read(dis,new ExtWrapList(Recalculate.class),pf);
  for (Enumeration e=vcalc.elements(); e.hasMoreElements(); ) {
    addTriggerable((Recalculate)e.nextElement());
  }
  finalizeTriggerables();
  outputFragments=(Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf);
  submissionProfiles=(Hashtable<String,SubmissionProfile>)ExtUtil.read(dis,new ExtWrapMap(String.class,SubmissionProfile.class));
  formInstances=(Hashtable<String,DataInstance>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapTagged()));
  eventListeners=(Hashtable<String,Vector<Action>>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapListPoly()));
  extensions=(Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf);
  setEvaluationContext(new EvaluationContext(null));
}","/** 
 * Reads the form definition object from the supplied stream. Requires that the instance has been set to a prototype of the instance that should be used for deserialization.
 * @param dis - the stream to read from.
 * @throws IOException
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
public void readExternal(DataInputStream dis,PrototypeFactory pf) throws IOException, DeserializationException {
  setID(ExtUtil.readInt(dis));
  setName(ExtUtil.nullIfEmpty(ExtUtil.readString(dis)));
  setTitle((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setChildren((Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf));
  setInstance((FormInstance)ExtUtil.read(dis,FormInstance.class,pf));
  setLocalizer((Localizer)ExtUtil.read(dis,new ExtWrapNullable(Localizer.class),pf));
  Vector vcond=(Vector)ExtUtil.read(dis,new ExtWrapList(Condition.class),pf);
  for (Enumeration e=vcond.elements(); e.hasMoreElements(); ) {
    addTriggerable((Condition)e.nextElement());
  }
  Vector vcalc=(Vector)ExtUtil.read(dis,new ExtWrapList(Recalculate.class),pf);
  for (Enumeration e=vcalc.elements(); e.hasMoreElements(); ) {
    addTriggerable((Recalculate)e.nextElement());
  }
  finalizeTriggerables();
  outputFragments=(Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf);
  submissionProfiles=(Hashtable<String,SubmissionProfile>)ExtUtil.read(dis,new ExtWrapMap(String.class,SubmissionProfile.class),pf);
  formInstances=(Hashtable<String,DataInstance>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapTagged()),pf);
  eventListeners=(Hashtable<String,Vector<Action>>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapListPoly()),pf);
  extensions=(Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf);
  setEvaluationContext(new EvaluationContext(null));
}",0.9974909395037636
146807,"public void purge(){
  this.purger.purge(logIDs);
}","public void purge(){
  if (purger != null) {
    this.purger.purge(logIDs);
  }
}",0.7727272727272727
146808,"public void serializeLogs(StreamLogSerializer serializer,int limit) throws IOException {
  if (storageBroken) {
    return;
  }
  ;
  int count=0;
  IStorageIterator li;
synchronized (logStorage) {
    li=logStorage.iterate();
  }
  while (li.hasMore() && count < limit) {
    int id=li.peekID();
    LogEntry log=(LogEntry)li.nextRecord();
    serializer.serializeLog(id,log);
    count++;
  }
  serializer.setPurger(new StreamLogSerializer.Purger(){
    public void purge(    SortedIntSet IDs){
      clearLogs(IDs);
    }
  }
);
}","public void serializeLogs(StreamLogSerializer serializer,int limit) throws IOException {
  if (storageBroken) {
    return;
  }
  ;
  Vector<Integer> logIds=new Vector<Integer>();
  Object lock=logStorage.getAccessLock();
synchronized (lock) {
    int count=0;
    IStorageIterator li=logStorage.iterate();
    while (li.hasMore() && count < limit) {
      int id=li.nextID();
      logIds.addElement(DataUtil.integer(id));
      count++;
    }
  }
  System.out.println(""String_Node_Str"" + logIds.size() + ""String_Node_Str"");
  for (  Integer logId : logIds) {
    LogEntry log=(LogEntry)logStorage.read(logId.intValue());
    if (log != null) {
      serializer.serializeLog(logId.intValue(),log);
    }
  }
  serializer.setPurger(new StreamLogSerializer.Purger(){
    public void purge(    SortedIntSet IDs){
      clearLogs(IDs);
    }
  }
);
}",0.5782608695652174
146809,"public boolean equals(Object o){
  if (this == o) {
    return true;
  }
 else   if (o instanceof TreeReference) {
    TreeReference ref=(TreeReference)o;
    if (this.refLevel == ref.refLevel && this.size() == ref.size()) {
      for (int i=0; i < this.size(); i++) {
        String nameA=this.getName(i);
        String nameB=ref.getName(i);
        int multA=this.getMultiplicity(i);
        int multB=ref.getMultiplicity(i);
        if (!nameA.equals(nameB)) {
          return false;
        }
 else         if (multA != multB) {
          if (i == 0 && (multA == 0 || multA == INDEX_UNBOUND) && (multB == 0 || multB == INDEX_UNBOUND)) {
          }
 else {
            return false;
          }
        }
      }
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}","public boolean equals(Object o){
  if (this == o) {
    return true;
  }
 else   if (o instanceof TreeReference) {
    TreeReference ref=(TreeReference)o;
    if (this.refLevel == ref.refLevel && this.size() == ref.size()) {
      for (int i=0; i < this.size(); i++) {
        String nameA=this.getName(i);
        String nameB=ref.getName(i);
        int multA=this.getMultiplicity(i);
        int multB=ref.getMultiplicity(i);
        Vector<XPathExpression> predA=this.getPredicate(i);
        Vector<XPathExpression> predB=ref.getPredicate(i);
        if (!nameA.equals(nameB)) {
          return false;
        }
 else         if (multA != multB) {
          if (i == 0 && (multA == 0 || multA == INDEX_UNBOUND) && (multB == 0 || multB == INDEX_UNBOUND)) {
          }
 else {
            return false;
          }
        }
 else         if (predA != null && predB != null) {
          if (predA.size() != predB.size()) {
            return false;
          }
          for (int j=0; j < predA.size(); ++j) {
            if (!predA.elementAt(j).equals(predB.elementAt(j))) {
              return false;
            }
          }
        }
 else         if ((predA == null && predB != null) || (predA != null && predB == null)) {
          return false;
        }
      }
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}",0.652014652014652
146810,"private void incrementHelper(Vector indexes,Vector multiplicities,Vector elements,boolean descend){
  int i=indexes.size() - 1;
  boolean exitRepeat=false;
  if (i == -1 || elements.elementAt(i) instanceof GroupDef) {
    if (i >= 0) {
      GroupDef group=(GroupDef)elements.elementAt(i);
      if (group.getRepeat()) {
        if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR) {
          if (((Integer)multiplicities.lastElement()).intValue() == TreeReference.INDEX_REPEAT_JUNCTURE) {
            descend=false;
            exitRepeat=true;
          }
        }
 else {
          if (form.getMainInstance().resolveReference(form.getChildInstanceRef(elements,multiplicities)) == null) {
            descend=false;
            exitRepeat=true;
          }
        }
      }
    }
    if (descend) {
      indexes.addElement(new Integer(0));
      multiplicities.addElement(new Integer(0));
      elements.addElement((i == -1 ? form : (IFormElement)elements.elementAt(i)).getChild(0));
      if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR) {
        if (elements.lastElement() instanceof GroupDef && ((GroupDef)elements.lastElement()).getRepeat()) {
          multiplicities.setElementAt(new Integer(TreeReference.INDEX_REPEAT_JUNCTURE),multiplicities.size() - 1);
        }
      }
      return;
    }
  }
  while (i >= 0) {
    if (!exitRepeat && elements.elementAt(i) instanceof GroupDef && ((GroupDef)elements.elementAt(i)).getRepeat()) {
      if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR) {
        multiplicities.setElementAt(new Integer(TreeReference.INDEX_REPEAT_JUNCTURE),i);
      }
 else {
        multiplicities.setElementAt(new Integer(((Integer)multiplicities.elementAt(i)).intValue() + 1),i);
      }
      return;
    }
    IFormElement parent=(i == 0 ? form : (IFormElement)elements.elementAt(i - 1));
    int curIndex=((Integer)indexes.elementAt(i)).intValue();
    if (curIndex + 1 >= parent.getChildren().size()) {
      indexes.removeElementAt(i);
      multiplicities.removeElementAt(i);
      elements.removeElementAt(i);
      i--;
      exitRepeat=false;
    }
 else {
      indexes.setElementAt(new Integer(curIndex + 1),i);
      multiplicities.setElementAt(new Integer(0),i);
      elements.setElementAt(parent.getChild(curIndex + 1),i);
      if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR) {
        if (elements.lastElement() instanceof GroupDef && ((GroupDef)elements.lastElement()).getRepeat()) {
          multiplicities.setElementAt(new Integer(TreeReference.INDEX_REPEAT_JUNCTURE),multiplicities.size() - 1);
        }
      }
      return;
    }
  }
}","private void incrementHelper(Vector indexes,Vector multiplicities,Vector elements,boolean descend){
  int i=indexes.size() - 1;
  boolean exitRepeat=false;
  if (i == -1 || elements.elementAt(i) instanceof GroupDef) {
    if (i >= 0) {
      GroupDef group=(GroupDef)elements.elementAt(i);
      if (group.getRepeat()) {
        if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR) {
          if (((Integer)multiplicities.lastElement()).intValue() == TreeReference.INDEX_REPEAT_JUNCTURE) {
            descend=false;
            exitRepeat=true;
          }
        }
 else {
          if (form.getMainInstance().resolveReference(form.getChildInstanceRef(elements,multiplicities)) == null) {
            descend=false;
            exitRepeat=true;
          }
        }
      }
    }
    if (descend && (i == -1 || ((IFormElement)elements.elementAt(i)).getChildren().size() > 0)) {
      indexes.addElement(new Integer(0));
      multiplicities.addElement(new Integer(0));
      elements.addElement((i == -1 ? form : (IFormElement)elements.elementAt(i)).getChild(0));
      if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR) {
        if (elements.lastElement() instanceof GroupDef && ((GroupDef)elements.lastElement()).getRepeat()) {
          multiplicities.setElementAt(new Integer(TreeReference.INDEX_REPEAT_JUNCTURE),multiplicities.size() - 1);
        }
      }
      return;
    }
  }
  while (i >= 0) {
    if (!exitRepeat && elements.elementAt(i) instanceof GroupDef && ((GroupDef)elements.elementAt(i)).getRepeat()) {
      if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR) {
        multiplicities.setElementAt(new Integer(TreeReference.INDEX_REPEAT_JUNCTURE),i);
      }
 else {
        multiplicities.setElementAt(new Integer(((Integer)multiplicities.elementAt(i)).intValue() + 1),i);
      }
      return;
    }
    IFormElement parent=(i == 0 ? form : (IFormElement)elements.elementAt(i - 1));
    int curIndex=((Integer)indexes.elementAt(i)).intValue();
    if (curIndex + 1 >= parent.getChildren().size()) {
      indexes.removeElementAt(i);
      multiplicities.removeElementAt(i);
      elements.removeElementAt(i);
      i--;
      exitRepeat=false;
    }
 else {
      indexes.setElementAt(new Integer(curIndex + 1),i);
      multiplicities.setElementAt(new Integer(0),i);
      elements.setElementAt(parent.getChild(curIndex + 1),i);
      if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR) {
        if (elements.lastElement() instanceof GroupDef && ((GroupDef)elements.lastElement()).getRepeat()) {
          multiplicities.setElementAt(new Integer(TreeReference.INDEX_REPEAT_JUNCTURE),multiplicities.size() - 1);
        }
      }
      return;
    }
  }
}",0.9850689850689852
146811,"private void tryDownload(AuthenticatedHttpTransportMessage message){
  listener.statusUpdate(CommCareOTARestoreListener.RESTORE_DOWNLOAD);
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  try {
    if (message.getUrl() == null) {
      listener.onFailure(Localization.get(""String_Node_Str""));
      listener.refreshView();
      listener.onFailure(null);
      return;
    }
    AuthenticatedHttpTransportMessage sent=(AuthenticatedHttpTransportMessage)TransportService.sendBlocking(message);
    if (sent.isSuccess()) {
      listener.statusUpdate(CommCareOTARestoreListener.RESTORE_CONNECTION_MADE);
      try {
        downloadRemoteData(sent.getResponse());
        return;
      }
 catch (      IOException e) {
        listener.getCredentials();
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_BAD_DOWNLOAD);
        listener.onFailure(Localization.get(""String_Node_Str"",new String[]{WrappedException.printException(e)}));
        return;
      }
    }
 else {
      if (sent.getResponseCode() == 401) {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_BAD_CREDENTIALS);
        if (authAttempts > 0) {
          Logger.log(""String_Node_Str"",""String_Node_Str"" + authAttempts + ""String_Node_Str"");
          authAttempts--;
          getCredentials();
        }
 else {
          System.out.println(""String_Node_Str"");
          listener.onFailure(Localization.get(""String_Node_Str""));
        }
        return;
      }
 else       if (sent.getResponseCode() == 404) {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_BAD_SERVER);
        listener.promptRetry(Localization.get(""String_Node_Str""));
        return;
      }
 else       if (sent.getResponseCode() == 412) {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_BAD_DB);
        startRecovery();
        return;
      }
 else       if (sent.getResponseCode() == 503) {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_DB_BUSY);
        listener.promptRetry(Localization.get(""String_Node_Str""));
        return;
      }
 else       if (sent.getResponseCode() == 0) {
        listener.promptRetry(Localization.get(""String_Node_Str""));
      }
 else {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_FAIL_OTHER);
        listener.promptRetry(Localization.get(""String_Node_Str"",new String[]{sent.getFailureReason()}));
        return;
      }
    }
  }
 catch (  TransportException e) {
    listener.statusUpdate(CommCareOTARestoreListener.RESTORE_CONNECTION_FAIL_ENTRY);
    listener.promptRetry(Localization.get(""String_Node_Str"",new String[]{WrappedException.printException(e)}));
  }
}","private void tryDownload(AuthenticatedHttpTransportMessage message){
  listener.statusUpdate(CommCareOTARestoreListener.RESTORE_DOWNLOAD);
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  try {
    if (message.getUrl() == null) {
      listener.onFailure(Localization.get(""String_Node_Str""));
      listener.refreshView();
      listener.onFailure(null);
      return;
    }
    AuthenticatedHttpTransportMessage sent=(AuthenticatedHttpTransportMessage)TransportService.sendBlocking(message);
    if (sent.isSuccess()) {
      listener.statusUpdate(CommCareOTARestoreListener.RESTORE_CONNECTION_MADE);
      try {
        downloadRemoteData(sent.getResponse());
        return;
      }
 catch (      IOException e) {
        listener.getCredentials();
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_BAD_DOWNLOAD);
        listener.onFailure(Localization.get(""String_Node_Str"",new String[]{WrappedException.printException(e)}));
        return;
      }
    }
 else {
      if (sent.getResponseCode() == 401) {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_BAD_CREDENTIALS);
        Logger.log(""String_Node_Str"",Localization.get(""String_Node_Str""));
        getCredentials();
        return;
      }
 else       if (sent.getResponseCode() == 404) {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_BAD_SERVER);
        listener.promptRetry(Localization.get(""String_Node_Str""));
        return;
      }
 else       if (sent.getResponseCode() == 412) {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_BAD_DB);
        startRecovery();
        return;
      }
 else       if (sent.getResponseCode() == 503) {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_DB_BUSY);
        listener.promptRetry(Localization.get(""String_Node_Str""));
        return;
      }
 else       if (sent.getResponseCode() == 0) {
        listener.promptRetry(Localization.get(""String_Node_Str""));
      }
 else {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_FAIL_OTHER);
        listener.promptRetry(Localization.get(""String_Node_Str"",new String[]{sent.getFailureReason()}));
        return;
      }
    }
  }
 catch (  TransportException e) {
    listener.statusUpdate(CommCareOTARestoreListener.RESTORE_CONNECTION_FAIL_ENTRY);
    listener.promptRetry(Localization.get(""String_Node_Str"",new String[]{WrappedException.printException(e)}));
  }
}",0.9379554855229466
146812,"private void startOtaProcess(){
  if (authenticator == null) {
    authAttempts=0;
    getCredentials();
  }
 else {
    authAttempts=1;
    listener.refreshView();
    tryDownload(AuthenticatedHttpTransportMessage.AuthenticatedHttpRequest(restoreURI,authenticator,new SecurityFailureListener(){
      public void onSecurityException(      SecurityException e){
        PeriodicEvent.schedule(new PermissionsEvent());
      }
    }
));
  }
}","private void startOtaProcess(){
  if (authenticator == null) {
    getCredentials();
  }
 else {
    listener.refreshView();
    tryDownload(AuthenticatedHttpTransportMessage.AuthenticatedHttpRequest(restoreURI,authenticator,new SecurityFailureListener(){
      public void onSecurityException(      SecurityException e){
        PeriodicEvent.schedule(new PermissionsEvent());
      }
    }
));
  }
}",0.9144893111638956
146813,"public void finalizeTriggerables(){
  Vector partialOrdering=new Vector();
  for (int i=0; i < triggerables.size(); i++) {
    Triggerable t=(Triggerable)triggerables.elementAt(i);
    Vector deps=new Vector();
    if (t.canCascade()) {
      for (int j=0; j < t.getTargets().size(); j++) {
        TreeReference target=(TreeReference)t.getTargets().elementAt(j);
        Vector triggered=(Vector)triggerIndex.get(target);
        if (triggered != null) {
          for (int k=0; k < triggered.size(); k++) {
            Triggerable u=(Triggerable)triggered.elementAt(k);
            if (!deps.contains(u))             deps.addElement(u);
          }
        }
      }
    }
    for (int j=0; j < deps.size(); j++) {
      Triggerable u=(Triggerable)deps.elementAt(j);
      Triggerable[] edge={t,u};
      partialOrdering.addElement(edge);
    }
  }
  Vector vertices=new Vector();
  for (int i=0; i < triggerables.size(); i++)   vertices.addElement(triggerables.elementAt(i));
  triggerables.removeAllElements();
  while (vertices.size() > 0) {
    Vector roots=new Vector();
    for (int i=0; i < vertices.size(); i++) {
      roots.addElement(vertices.elementAt(i));
    }
    for (int i=0; i < partialOrdering.size(); i++) {
      Triggerable[] edge=(Triggerable[])partialOrdering.elementAt(i);
      roots.removeElement(edge[1]);
    }
    if (roots.size() == 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < roots.size(); i++) {
      Triggerable root=(Triggerable)roots.elementAt(i);
      triggerables.addElement(root);
      vertices.removeElement(root);
    }
    for (int i=partialOrdering.size() - 1; i >= 0; i--) {
      Triggerable[] edge=(Triggerable[])partialOrdering.elementAt(i);
      if (roots.contains(edge[0]))       partialOrdering.removeElementAt(i);
    }
  }
  triggerablesInOrder=true;
  conditionRepeatTargetIndex=new Hashtable();
  for (int i=0; i < triggerables.size(); i++) {
    Triggerable t=(Triggerable)triggerables.elementAt(i);
    if (t instanceof Condition) {
      Vector targets=t.getTargets();
      for (int j=0; j < targets.size(); j++) {
        TreeReference target=(TreeReference)targets.elementAt(j);
        if (mainInstance.getTemplate(target) != null) {
          conditionRepeatTargetIndex.put(target,(Condition)t);
        }
      }
    }
  }
}","public void finalizeTriggerables(){
  Vector partialOrdering=new Vector();
  for (int i=0; i < triggerables.size(); i++) {
    Triggerable t=(Triggerable)triggerables.elementAt(i);
    Vector deps=new Vector();
    if (t.canCascade()) {
      for (int j=0; j < t.getTargets().size(); j++) {
        TreeReference target=(TreeReference)t.getTargets().elementAt(j);
        Vector<TreeReference> updatedNodes=new Vector<TreeReference>();
        updatedNodes.addElement(target);
        if (t.isCascadingToChildren()) {
          addChildrenOfReference(target,updatedNodes);
        }
        for (        TreeReference ref : updatedNodes) {
          Vector<Triggerable> triggered=(Vector<Triggerable>)triggerIndex.get(ref);
          if (triggered != null) {
            for (int k=0; k < triggered.size(); k++) {
              Triggerable u=(Triggerable)triggered.elementAt(k);
              if (!deps.contains(u))               deps.addElement(u);
            }
          }
        }
      }
    }
    for (int j=0; j < deps.size(); j++) {
      Triggerable u=(Triggerable)deps.elementAt(j);
      Triggerable[] edge={t,u};
      partialOrdering.addElement(edge);
    }
  }
  Vector vertices=new Vector();
  for (int i=0; i < triggerables.size(); i++)   vertices.addElement(triggerables.elementAt(i));
  triggerables.removeAllElements();
  while (vertices.size() > 0) {
    Vector roots=new Vector();
    for (int i=0; i < vertices.size(); i++) {
      roots.addElement(vertices.elementAt(i));
    }
    for (int i=0; i < partialOrdering.size(); i++) {
      Triggerable[] edge=(Triggerable[])partialOrdering.elementAt(i);
      roots.removeElement(edge[1]);
    }
    if (roots.size() == 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < roots.size(); i++) {
      Triggerable root=(Triggerable)roots.elementAt(i);
      triggerables.addElement(root);
      vertices.removeElement(root);
    }
    for (int i=partialOrdering.size() - 1; i >= 0; i--) {
      Triggerable[] edge=(Triggerable[])partialOrdering.elementAt(i);
      if (roots.contains(edge[0]))       partialOrdering.removeElementAt(i);
    }
  }
  triggerablesInOrder=true;
  conditionRepeatTargetIndex=new Hashtable();
  for (int i=0; i < triggerables.size(); i++) {
    Triggerable t=(Triggerable)triggerables.elementAt(i);
    if (t instanceof Condition) {
      Vector targets=t.getTargets();
      for (int j=0; j < targets.size(); j++) {
        TreeReference target=(TreeReference)targets.elementAt(j);
        if (mainInstance.getTemplate(target) != null) {
          conditionRepeatTargetIndex.put(target,(Condition)t);
        }
      }
    }
  }
}",0.9265265265265266
146814,"/** 
 * @return The indices of which fields should be used for sorting and their order
 */
public int[] getSortOrder(){
  Vector<Integer> indices=new Vector<Integer>();
  outer:   for (int i=0; i < fields.length; ++i) {
    int order=fields[i].getSortOrder();
    if (order < 1) {
      continue;
    }
    for (int j=0; j < indices.size(); ++j) {
      if (indices.size() > 0 || order < fields[indices.elementAt(j).intValue()].getSortOrder()) {
        indices.insertElementAt(new Integer(i),j);
        continue outer;
      }
    }
    indices.addElement(new Integer(i));
    continue;
  }
  if (indices.size() == 0) {
    return new int[]{};
  }
 else {
    int[] ret=new int[indices.size()];
    for (int i=0; i < ret.length; ++i) {
      ret[i]=indices.elementAt(i).intValue();
    }
    return ret;
  }
}","/** 
 * @return The indices of which fields should be used for sorting and their order
 */
public int[] getSortOrder(){
  Vector<Integer> indices=new Vector<Integer>();
  outer:   for (int i=0; i < fields.length; ++i) {
    int order=fields[i].getSortOrder();
    if (order < 1) {
      continue;
    }
    for (int j=0; j < indices.size(); ++j) {
      if (order < fields[indices.elementAt(j).intValue()].getSortOrder()) {
        indices.insertElementAt(new Integer(i),j);
        continue outer;
      }
    }
    indices.addElement(new Integer(i));
    continue;
  }
  if (indices.size() == 0) {
    return new int[]{};
  }
 else {
    int[] ret=new int[indices.size()];
    for (int i=0; i < ret.length; ++i) {
      ret[i]=indices.elementAt(i).intValue();
    }
    return ret;
  }
}",0.98625
146815,"public int read() throws IOException {
  if (position == count) {
    fillBuffer();
  }
  if (count == -1) {
    return -1;
  }
  return buffer[position++];
}","public int read() throws IOException {
  if (position == count) {
    fillBuffer();
  }
  if (count == -1) {
    return -1;
  }
  return buffer[position++] & 0xFF;
}",0.978328173374613
146816,"public int available() throws IOException {
  return in.available() + (count - position);
}","public int available() throws IOException {
  if (count == -1) {
    return 0;
  }
  return in.available() + (count - position);
}",0.8235294117647058
146817,"public static boolean arraysEqual(Object[] array1,Object[] array2){
  if (array1.length != array2.length) {
    return false;
  }
  boolean retVal=true;
  for (int i=0; i < array1.length; ++i) {
    if (!array1[i].equals(array2[i])) {
      retVal=false;
    }
  }
  return retVal;
}","public static boolean arraysEqual(byte[] array1,byte[] array2){
  if (array1.length != array2.length) {
    return false;
  }
  boolean retVal=true;
  for (int i=0; i < array1.length; ++i) {
    if (array1[i] != array2[i]) {
      retVal=false;
    }
  }
  return retVal;
}",0.9100719424460432
146818,"public TreeReference contextualize(TreeReference contextRef){
  if (!contextRef.isAbsolute()) {
    return null;
  }
  TreeReference newRef=anchor(contextRef);
  newRef.setContext(contextRef.getContext());
  for (int i=0; i < contextRef.size() && i < newRef.size(); i++) {
    if (TreeReference.NAME_WILDCARD.equals(newRef.getName(i)) && !TreeReference.NAME_WILDCARD.equals(contextRef.getName(i))) {
      newRef.data.setElementAt(newRef.data.elementAt(i).setName(contextRef.getName(i)),i);
    }
    if (contextRef.getName(i).equals(newRef.getName(i))) {
      if (newRef.getPredicate(i) == null) {
        newRef.setMultiplicity(i,contextRef.getMultiplicity(i));
      }
    }
 else {
      break;
    }
  }
  return newRef;
}","public TreeReference contextualize(TreeReference contextRef){
  if (!contextRef.isAbsolute()) {
    return null;
  }
  if (this.isAbsolute()) {
    if (this.getInstanceName() == null) {
      if (contextRef.getInstanceName() != null) {
        return this.clone();
      }
    }
 else     if (!this.getInstanceName().equals(contextRef.getInstanceName())) {
      return this.clone();
    }
  }
  TreeReference newRef=anchor(contextRef);
  newRef.setContext(contextRef.getContext());
  for (int i=0; i < contextRef.size() && i < newRef.size(); i++) {
    if (TreeReference.NAME_WILDCARD.equals(newRef.getName(i)) && !TreeReference.NAME_WILDCARD.equals(contextRef.getName(i))) {
      newRef.data.setElementAt(newRef.data.elementAt(i).setName(contextRef.getName(i)),i);
    }
    if (contextRef.getName(i).equals(newRef.getName(i))) {
      if (newRef.getPredicate(i) == null) {
        newRef.setMultiplicity(i,contextRef.getMultiplicity(i));
      }
    }
 else {
      break;
    }
  }
  return newRef;
}",0.8401615695326025
146819,"private InstanceInitializationFactory createIIF(){
  return new MockupProviderFactory(mockup.getInstances());
}","private InstanceInitializationFactory createIIF(){
  return new MockupProviderFactory(mockup == null ? new Hashtable() : mockup.getInstances());
}",0.8638132295719845
146820,"public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL) {
    try {
      if (ref.doesBinaryExist()) {
        localReference=ref.getURI();
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        return true;
      }
 else {
        return false;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
  }
 else   if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_REMOTE) {
    InputStream incoming=null;
    try {
      if (!ref.doesBinaryExist()) {
        return false;
      }
      incoming=ref.getStream();
      if (incoming == null) {
        return false;
      }
      String uri=ref.getURI();
      int lastslash=uri.lastIndexOf('/');
      uri=uri.substring(lastslash == -1 ? 0 : lastslash + 1);
      String cleanUri=""String_Node_Str"";
      for (int i=0; i < uri.length(); ++i) {
        char c=uri.charAt(i);
        if (valid.indexOf(c) == -1) {
          cleanUri+=""String_Node_Str"";
        }
 else {
          cleanUri+=c;
        }
      }
      uri=cleanUri;
      int copy=0;
      try {
        Reference destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + uri);
        while (destination.doesBinaryExist()) {
          copy++;
          String newUri=uri + ""String_Node_Str"" + copy;
          destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + newUri);
        }
        if (destination.isReadOnly()) {
          return cache(incoming,r,table,upgrade);
        }
        OutputStream output=destination.getOutputStream();
        try {
          StreamsUtil.writeFromInputToOutput(incoming,output);
        }
 catch (        IOException e) {
          throw new UnreliableSourceException(r,e.getMessage());
        }
        output.close();
        this.localReference=destination.getURI();
        if (upgrade) {
          table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
        }
 else {
          table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        }
        return true;
      }
 catch (      InvalidReferenceException e) {
        return cache(incoming,r,table,upgrade);
      }
catch (      IOException e) {
        return cache(incoming,r,table,upgrade);
      }
    }
 catch (    IOException e) {
      throw new UnreliableSourceException(r,e.getMessage());
    }
 finally {
      try {
        if (incoming != null) {
          incoming.close();
        }
      }
 catch (      IOException e) {
      }
    }
  }
  return false;
}","public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL) {
    try {
      if (ref.doesBinaryExist()) {
        localReference=ref.getURI();
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        return true;
      }
 else {
        return false;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
  }
 else   if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_REMOTE) {
    InputStream incoming=null;
    try {
      if (!ref.doesBinaryExist()) {
        return false;
      }
      incoming=ref.getStream();
      if (incoming == null) {
        return false;
      }
      String uri=ref.getURI();
      int lastslash=uri.lastIndexOf('/');
      uri=uri.substring(lastslash == -1 ? 0 : lastslash + 1);
      String cleanUri=""String_Node_Str"";
      for (int i=0; i < uri.length(); ++i) {
        char c=uri.charAt(i);
        if (valid.indexOf(c) == -1) {
          cleanUri+=""String_Node_Str"";
        }
 else {
          cleanUri+=c;
        }
      }
      uri=cleanUri;
      int copy=0;
      try {
        Reference destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + uri);
        while (destination.doesBinaryExist()) {
          copy++;
          String newUri=uri + ""String_Node_Str"" + copy;
          destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + newUri);
        }
        if (destination.isReadOnly()) {
          return cache(incoming,r,table,upgrade);
        }
        OutputStream output=destination.getOutputStream();
        try {
          StreamsUtil.writeFromInputToOutputSpecific(incoming,output);
        }
 catch (        InputIOException e) {
          throw new UnreliableSourceException(r,e.getMessage());
        }
 finally {
          output.close();
        }
        this.localReference=destination.getURI();
        if (upgrade) {
          table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
        }
 else {
          table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        }
        return true;
      }
 catch (      InvalidReferenceException e) {
        return cache(ref.getStream(),r,table,upgrade);
      }
catch (      IOException e) {
        return cache(ref.getStream(),r,table,upgrade);
      }
    }
 catch (    IOException e) {
      throw new UnreliableSourceException(r,e.getMessage());
    }
 finally {
      try {
        if (incoming != null) {
          incoming.close();
        }
      }
 catch (      IOException e) {
      }
    }
  }
  return false;
}",0.977255779269202
146821,"protected void serializeLog(LogEntry log) throws IOException {
  o.startTag(ns,""String_Node_Str"");
  o.attribute(null,""String_Node_Str"",DateUtils.formatDateTime(log.getTime(),DateUtils.FORMAT_ISO8601));
  o.startTag(ns,""String_Node_Str"");
  o.text(log.getType());
  o.endTag(ns,""String_Node_Str"");
  o.startTag(ns,""String_Node_Str"");
  o.text(log.getMessage());
  o.endTag(ns,""String_Node_Str"");
  o.endTag(ns,""String_Node_Str"");
}","protected void serializeLog(LogEntry log) throws IOException {
  o.startTag(ns,""String_Node_Str"");
  try {
    o.attribute(null,""String_Node_Str"",DateUtils.formatDateTime(log.getTime(),DateUtils.FORMAT_ISO8601));
    o.startTag(ns,""String_Node_Str"");
    try {
      o.text(log.getType());
    }
  finally {
      o.endTag(ns,""String_Node_Str"");
    }
    o.startTag(ns,""String_Node_Str"");
    try {
      o.text(log.getMessage());
    }
  finally {
      o.endTag(ns,""String_Node_Str"");
    }
  }
  finally {
    o.endTag(ns,""String_Node_Str"");
  }
}",0.5336048879837068
146822,"/** 
 * Writes the form definition object to the supplied stream.
 * @param dos - the stream to write to.
 * @throws IOException
 */
public void writeExternal(DataOutputStream dos) throws IOException {
  ExtUtil.writeNumeric(dos,getID());
  ExtUtil.writeString(dos,ExtUtil.emptyIfNull(getName()));
  ExtUtil.write(dos,new ExtWrapNullable(getTitle()));
  ExtUtil.write(dos,new ExtWrapListPoly(getChildren()));
  ExtUtil.write(dos,getMainInstance());
  ExtUtil.write(dos,new ExtWrapNullable(localizer));
  Vector conditions=new Vector();
  Vector recalcs=new Vector();
  for (int i=0; i < triggerables.size(); i++) {
    Triggerable t=(Triggerable)triggerables.elementAt(i);
    if (t instanceof Condition) {
      conditions.addElement(t);
    }
 else     if (t instanceof Recalculate) {
      recalcs.addElement(t);
    }
  }
  ExtUtil.write(dos,new ExtWrapList(conditions));
  ExtUtil.write(dos,new ExtWrapList(recalcs));
  ExtUtil.write(dos,new ExtWrapListPoly(outputFragments));
  ExtUtil.write(dos,new ExtWrapMap(submissionProfiles));
  ExtUtil.write(dos,new ExtWrapMap(formInstances,new ExtWrapTagged()));
  ExtUtil.write(dos,new ExtWrapMap(eventListeners,new ExtWrapListPoly()));
}","/** 
 * Writes the form definition object to the supplied stream.
 * @param dos - the stream to write to.
 * @throws IOException
 */
public void writeExternal(DataOutputStream dos) throws IOException {
  ExtUtil.writeNumeric(dos,getID());
  ExtUtil.writeString(dos,ExtUtil.emptyIfNull(getName()));
  ExtUtil.write(dos,new ExtWrapNullable(getTitle()));
  ExtUtil.write(dos,new ExtWrapListPoly(getChildren()));
  ExtUtil.write(dos,getMainInstance());
  ExtUtil.write(dos,new ExtWrapNullable(localizer));
  Vector conditions=new Vector();
  Vector recalcs=new Vector();
  for (int i=0; i < triggerables.size(); i++) {
    Triggerable t=(Triggerable)triggerables.elementAt(i);
    if (t instanceof Condition) {
      conditions.addElement(t);
    }
 else     if (t instanceof Recalculate) {
      recalcs.addElement(t);
    }
  }
  ExtUtil.write(dos,new ExtWrapList(conditions));
  ExtUtil.write(dos,new ExtWrapList(recalcs));
  ExtUtil.write(dos,new ExtWrapListPoly(outputFragments));
  ExtUtil.write(dos,new ExtWrapMap(submissionProfiles));
  ExtUtil.write(dos,new ExtWrapMap(formInstances,new ExtWrapTagged()));
  ExtUtil.write(dos,new ExtWrapMap(eventListeners,new ExtWrapListPoly()));
  ExtUtil.write(dos,new ExtWrapListPoly(extensions));
}",0.9777594728171336
146823,"/** 
 * Reads the form definition object from the supplied stream. Requires that the instance has been set to a prototype of the instance that should be used for deserialization.
 * @param dis - the stream to read from.
 * @throws IOException
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
public void readExternal(DataInputStream dis,PrototypeFactory pf) throws IOException, DeserializationException {
  setID(ExtUtil.readInt(dis));
  setName(ExtUtil.nullIfEmpty(ExtUtil.readString(dis)));
  setTitle((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setChildren((Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf));
  setInstance((FormInstance)ExtUtil.read(dis,FormInstance.class,pf));
  setLocalizer((Localizer)ExtUtil.read(dis,new ExtWrapNullable(Localizer.class),pf));
  Vector vcond=(Vector)ExtUtil.read(dis,new ExtWrapList(Condition.class),pf);
  for (Enumeration e=vcond.elements(); e.hasMoreElements(); ) {
    addTriggerable((Condition)e.nextElement());
  }
  Vector vcalc=(Vector)ExtUtil.read(dis,new ExtWrapList(Recalculate.class),pf);
  for (Enumeration e=vcalc.elements(); e.hasMoreElements(); ) {
    addTriggerable((Recalculate)e.nextElement());
  }
  finalizeTriggerables();
  outputFragments=(Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf);
  submissionProfiles=(Hashtable<String,SubmissionProfile>)ExtUtil.read(dis,new ExtWrapMap(String.class,SubmissionProfile.class));
  formInstances=(Hashtable<String,DataInstance>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapTagged()));
  eventListeners=(Hashtable<String,Vector<Action>>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapListPoly()));
  setEvaluationContext(new EvaluationContext(null));
}","/** 
 * Reads the form definition object from the supplied stream. Requires that the instance has been set to a prototype of the instance that should be used for deserialization.
 * @param dis - the stream to read from.
 * @throws IOException
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
public void readExternal(DataInputStream dis,PrototypeFactory pf) throws IOException, DeserializationException {
  setID(ExtUtil.readInt(dis));
  setName(ExtUtil.nullIfEmpty(ExtUtil.readString(dis)));
  setTitle((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setChildren((Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf));
  setInstance((FormInstance)ExtUtil.read(dis,FormInstance.class,pf));
  setLocalizer((Localizer)ExtUtil.read(dis,new ExtWrapNullable(Localizer.class),pf));
  Vector vcond=(Vector)ExtUtil.read(dis,new ExtWrapList(Condition.class),pf);
  for (Enumeration e=vcond.elements(); e.hasMoreElements(); ) {
    addTriggerable((Condition)e.nextElement());
  }
  Vector vcalc=(Vector)ExtUtil.read(dis,new ExtWrapList(Recalculate.class),pf);
  for (Enumeration e=vcalc.elements(); e.hasMoreElements(); ) {
    addTriggerable((Recalculate)e.nextElement());
  }
  finalizeTriggerables();
  outputFragments=(Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf);
  submissionProfiles=(Hashtable<String,SubmissionProfile>)ExtUtil.read(dis,new ExtWrapMap(String.class,SubmissionProfile.class));
  formInstances=(Hashtable<String,DataInstance>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapTagged()));
  eventListeners=(Hashtable<String,Vector<Action>>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapListPoly()));
  extensions=(Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf);
  setEvaluationContext(new EvaluationContext(null));
}",0.9814972957586108
146824,"/** 
 */
public FormDef(){
  setID(-1);
  setChildren(null);
  triggerables=new Vector();
  triggerablesInOrder=true;
  triggerIndex=new Hashtable();
  setEvaluationContext(new EvaluationContext(null));
  outputFragments=new Vector();
  submissionProfiles=new Hashtable<String,SubmissionProfile>();
  formInstances=new Hashtable<String,DataInstance>();
  eventListeners=new Hashtable<String,Vector<Action>>();
}","/** 
 */
public FormDef(){
  setID(-1);
  setChildren(null);
  triggerables=new Vector();
  triggerablesInOrder=true;
  triggerIndex=new Hashtable();
  setEvaluationContext(new EvaluationContext(null));
  outputFragments=new Vector();
  submissionProfiles=new Hashtable<String,SubmissionProfile>();
  formInstances=new Hashtable<String,DataInstance>();
  eventListeners=new Hashtable<String,Vector<Action>>();
  extensions=new Vector<XFormExtension>();
}",0.9502890173410404
146825,"public TreeReference contextualize(TreeReference contextRef){
  if (!contextRef.isAbsolute()) {
    return null;
  }
  TreeReference newRef=anchor(contextRef);
  newRef.setContext(contextRef.getContext());
  for (int i=0; i < contextRef.size() && i < newRef.size(); i++) {
    if (TreeReference.NAME_WILDCARD.equals(newRef.getName(i)) && !TreeReference.NAME_WILDCARD.equals(contextRef.getName(i))) {
      data.setElementAt(data.elementAt(i).setName(contextRef.getName(i)),i);
    }
    if (contextRef.getName(i).equals(newRef.getName(i))) {
      if (newRef.getPredicate(i) == null) {
        newRef.setMultiplicity(i,contextRef.getMultiplicity(i));
      }
    }
 else {
      break;
    }
  }
  return newRef;
}","public TreeReference contextualize(TreeReference contextRef){
  if (!contextRef.isAbsolute()) {
    return null;
  }
  TreeReference newRef=anchor(contextRef);
  newRef.setContext(contextRef.getContext());
  for (int i=0; i < contextRef.size() && i < newRef.size(); i++) {
    if (TreeReference.NAME_WILDCARD.equals(newRef.getName(i)) && !TreeReference.NAME_WILDCARD.equals(contextRef.getName(i))) {
      newRef.data.setElementAt(newRef.data.elementAt(i).setName(contextRef.getName(i)),i);
    }
    if (contextRef.getName(i).equals(newRef.getName(i))) {
      if (newRef.getPredicate(i) == null) {
        newRef.setMultiplicity(i,contextRef.getMultiplicity(i));
      }
    }
 else {
      break;
    }
  }
  return newRef;
}",0.9902912621359224
146826,"public void clearCaches(){
}","public void clearCaches(){
  expireReferenceCache();
}",0.6829268292682927
146827,"public DataModelSerializer(OutputStream stream,InstanceInitializationFactory factory) throws IOException {
  serializer=new KXmlSerializer();
  serializer.setOutput(stream,""String_Node_Str"");
  this.factory=factory;
}","public DataModelSerializer(KXmlSerializer serializer){
  this.serializer=serializer;
}",0.4554455445544554
146828,"public static void main(String[] args){
  if (args.length == 0) {
    System.out.println(""String_Node_Str"");
  }
  if (args.length == 1) {
    XFormPlayer xfp=new XFormPlayer(System.in,System.out);
    try {
      xfp.start(args[0]);
      Session s=xfp.environment.getSessionRecording();
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + args[0] + ""String_Node_Str"");
    }
  }
 else   if (args.length == 2) {
    XFormPlayer xfp=new XFormPlayer(System.in,System.out);
    try {
      xfp.start(args[0]);
      Session s=xfp.environment.getSessionRecording();
      xfp=new XFormPlayer(System.in,System.out);
      xfp.start(args[1],s);
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + args[0] + ""String_Node_Str"");
    }
  }
  System.exit(0);
}","public static void main(String[] args){
  if (args.length == 0) {
    System.out.println(""String_Node_Str"");
  }
  if (args.length == 1) {
    XFormPlayer xfp=new XFormPlayer(System.in,System.out,null);
    try {
      xfp.start(args[0]);
      Session s=xfp.environment.getSessionRecording();
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + args[0] + ""String_Node_Str"");
    }
  }
 else {
    try {
      if (args[0].equals(""String_Node_Str"")) {
        Mockup m=getMockup(args[1]);
        XFormPlayer xfp=new XFormPlayer(System.in,System.out,m);
        xfp.start(args[2]);
        Session s=xfp.environment.getSessionRecording();
        MockupEditor e=m.getEditor();
        e.addSession(s);
        e.commit();
        updateMockup(args[1],m);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  System.exit(0);
}",0.5874125874125874
146829,"private InstanceInitializationFactory createIIF(){
  return null;
}","private InstanceInitializationFactory createIIF(){
  return new MockupProviderFactory(mockup.getInstances());
}",0.7303370786516854
146830,"public XFormEnvironment(FormDef form,Session session){
  this.form=form;
  this.session=session;
  recording=false;
}","public XFormEnvironment(FormDef form,Mockup mockup){
  this(form);
  this.mockup=mockup;
}",0.6666666666666666
146831,"public Object eval(Object[] args,EvaluationContext ec){
  return today;
}","public Object eval(Object[] args,EvaluationContext ec){
  if (mockup != null && mockup.getDate() != null) {
    return mockup.getDate();
  }
 else {
    return new Date();
  }
}",0.56
146832,"public XFormPlayer(InputStream in,PrintStream out){
  this.in=in;
  this.out=out;
}","public XFormPlayer(InputStream in,PrintStream out,Mockup mockup){
  this.in=in;
  this.out=out;
  this.mockup=mockup;
}",0.8217821782178217
146833,"public void start(FormDef form){
  this.environment=new XFormEnvironment(form);
  fec=environment.setup();
  reader=new BufferedReader(new InputStreamReader(in));
  processLoop();
}","public void start(FormDef form){
  this.environment=new XFormEnvironment(form,mockup);
  fec=environment.setup();
  reader=new BufferedReader(new InputStreamReader(in));
  processLoop();
}",0.981029810298103
146834,"public Hashtable<String,DataInstance> getInstances(){
  return instances;
}","public Hashtable<String,FormInstance> getInstances(){
  return instances;
}",0.9466666666666668
146835,"public void addSession(Session session){
  this.sessions.addElement(session);
}","public void addSession(Session s){
  m.sessions.add(s);
}",0.8235294117647058
146836,"public Mockup(){
}","public Mockup(){
  sessions=new Vector<Session>();
  instances=new Hashtable<String,FormInstance>();
}",0.3
146837,"public Object getValue(){
  return gp;
}","public double[] getValue(){
  return gp;
}",0.8780487804878049
146838,"public static XPathPathExpr getPathExpr(String nodeset){
  XPathExpression path;
  boolean validNonPathExpr=false;
  try {
    path=XPathParseTool.parseXPath(nodeset);
    if (!(path instanceof XPathPathExpr)) {
      validNonPathExpr=true;
      throw new XPathSyntaxException();
    }
  }
 catch (  XPathSyntaxException xse) {
    if (validNonPathExpr) {
      throw new RuntimeException(""String_Node_Str"" + nodeset + ""String_Node_Str"");
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + nodeset + ""String_Node_Str"");
    }
  }
  return (XPathPathExpr)path;
}","public static XPathPathExpr getPathExpr(String nodeset){
  XPathExpression path;
  boolean validNonPathExpr=false;
  try {
    path=XPathParseTool.parseXPath(nodeset);
    if (!(path instanceof XPathPathExpr)) {
      validNonPathExpr=true;
      throw new XPathSyntaxException();
    }
  }
 catch (  XPathSyntaxException xse) {
    if (validNonPathExpr) {
      throw new RuntimeException(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xse.getMessage());
    }
 else {
      xse.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + nodeset + ""String_Node_Str""+ (xse.getMessage() == null ? ""String_Node_Str"" : ""String_Node_Str"" + xse.getMessage()));
    }
  }
  return (XPathPathExpr)path;
}",0.896124031007752
146839,"private boolean handled(Object a,Object b,Object sentinal,Vector<Object> pivots) throws UnpivotableExpressionException {
  if (sentinal == a) {
    if (b == null) {
      throw new UnpivotableExpressionException();
    }
 else     if (sentinal == b) {
      throw new UnpivotableExpressionException();
    }
 else {
      Double val=null;
      if (b instanceof Double) {
        val=(Double)b;
      }
 else {
        if (b instanceof Integer) {
          val=new Double(((Integer)b).doubleValue());
        }
        if (b instanceof Long) {
          val=new Double(((Long)b).doubleValue());
        }
        if (b instanceof Float) {
          val=new Double(((Float)b).doubleValue());
        }
        if (b instanceof Short) {
          val=new Double(((Short)b).shortValue());
        }
        if (b instanceof Byte) {
          val=new Double(((Byte)b).byteValue());
        }
 else {
          throw new UnpivotableExpressionException(""String_Node_Str"" + b);
        }
      }
      pivots.addElement(new CmpPivot(val.doubleValue(),op));
      return true;
    }
  }
  return false;
}","private boolean handled(Object a,Object b,Object sentinal,Vector<Object> pivots) throws UnpivotableExpressionException {
  if (sentinal == a) {
    if (b == null) {
      throw new UnpivotableExpressionException();
    }
 else     if (sentinal == b) {
      throw new UnpivotableExpressionException();
    }
 else {
      Double val=null;
      if (b instanceof Double) {
        val=(Double)b;
      }
 else {
        if (b instanceof Integer) {
          val=new Double(((Integer)b).doubleValue());
        }
 else         if (b instanceof Long) {
          val=new Double(((Long)b).doubleValue());
        }
 else         if (b instanceof Float) {
          val=new Double(((Float)b).doubleValue());
        }
 else         if (b instanceof Short) {
          val=new Double(((Short)b).shortValue());
        }
 else         if (b instanceof Byte) {
          val=new Double(((Byte)b).byteValue());
        }
 else {
          if (b instanceof String) {
            try {
              val=(Double)new DecimalData().cast(new UncastData((String)b)).getValue();
            }
 catch (            Exception e) {
              throw new UnpivotableExpressionException(""String_Node_Str"" + b);
            }
          }
 else {
            throw new UnpivotableExpressionException(""String_Node_Str"" + b);
          }
        }
      }
      pivots.addElement(new CmpPivot(val.doubleValue(),op));
      return true;
    }
  }
  return false;
}",0.8646942800788955
146840,"public Object pivot(DataInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  Object aval=a.pivot(model,evalContext,pivots,sentinal);
  Object bval=b.pivot(model,evalContext,pivots,sentinal);
  if (handled(aval,bval,sentinal,pivots) || handled(bval,aval,sentinal,pivots)) {
    return null;
  }
  return this.eval(model,evalContext);
}","public Object pivot(DataInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  Object aval=a.pivot(model,evalContext,pivots,sentinal);
  Object bval=b.pivot(model,evalContext,pivots,sentinal);
  if (bval instanceof XPathNodeset) {
    bval=((XPathNodeset)bval).unpack();
  }
  if (handled(aval,bval,sentinal,pivots) || handled(bval,aval,sentinal,pivots)) {
    return null;
  }
  return this.eval(model,evalContext);
}",0.9084821428571428
146841,"public Object pivot(DataInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  TreeReference ref=this.getReference();
  if (ref.equals(sentinal) || (ref.getRefLevel() == 0)) {
    return sentinal;
  }
 else {
    return this.eval(model,evalContext);
  }
}","public Object pivot(DataInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  TreeReference ref=this.getReference();
  if (ref.equals(sentinal) || (ref.getRefLevel() == 0)) {
    return sentinal;
  }
 else {
    for (int i=0; i < ref.size(); ++i) {
      if (ref.getPredicate(i) != null && ref.getPredicate(i).size() > 0) {
        throw new UnpivotableExpressionException(""String_Node_Str"" + ref.toString(true) + ""String_Node_Str"");
      }
    }
    return this.eval(model,evalContext);
  }
}",0.7174887892376681
146842,"public static Vector lex(String expr) throws XPathSyntaxException {
  Vector tokens=new Vector();
  int i=0;
  int context=LEX_CONTEXT_VAL;
  while (i < expr.length()) {
    int c=expr.charAt(i);
    int d=getChar(expr,i + 1);
    Token token=null;
    int skip=1;
    if (""String_Node_Str"".indexOf(c) >= 0) {
    }
 else     if (c == '=') {
      token=new Token(Token.EQ);
    }
 else     if (c == '!' && d == '=') {
      token=new Token(Token.NEQ);
      skip=2;
    }
 else     if (c == '<') {
      if (d == '=') {
        token=new Token(Token.LTE);
        skip=2;
      }
 else {
        token=new Token(Token.LT);
      }
    }
 else     if (c == '>') {
      if (d == '=') {
        token=new Token(Token.GTE);
        skip=2;
      }
 else {
        token=new Token(Token.GT);
      }
    }
 else     if (c == '+') {
      token=new Token(Token.PLUS);
    }
 else     if (c == '-') {
      token=new Token(context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);
    }
 else     if (c == '*') {
      token=new Token(context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);
    }
 else     if (c == '|') {
      token=new Token(Token.UNION);
    }
 else     if (c == '/') {
      if (d == '/') {
        token=new Token(Token.DBL_SLASH);
        skip=2;
      }
 else {
        token=new Token(Token.SLASH);
      }
    }
 else     if (c == '[') {
      token=new Token(Token.LBRACK);
    }
 else     if (c == ']') {
      token=new Token(Token.RBRACK);
    }
 else     if (c == '(') {
      token=new Token(Token.LPAREN);
    }
 else     if (c == ')') {
      token=new Token(Token.RPAREN);
    }
 else     if (c == '.') {
      if (d == '.') {
        token=new Token(Token.DBL_DOT);
        skip=2;
      }
 else       if (isDigit(d)) {
        skip=matchNumeric(expr,i);
        token=new Token(Token.NUM,Double.valueOf(expr.substring(i,i + skip)));
      }
 else {
        token=new Token(Token.DOT);
      }
    }
 else     if (c == '@') {
      token=new Token(Token.AT);
    }
 else     if (c == ',') {
      token=new Token(Token.COMMA);
    }
 else     if (c == ':' && d == ':') {
      token=new Token(Token.DBL_COLON);
      skip=2;
    }
 else     if (context == LEX_CONTEXT_OP && i + 3 <= expr.length() && ""String_Node_Str"".equals(expr.substring(i,i + 3))) {
      token=new Token(Token.AND);
      skip=3;
    }
 else     if (context == LEX_CONTEXT_OP && i + 2 <= expr.length() && ""String_Node_Str"".equals(expr.substring(i,i + 2))) {
      token=new Token(Token.OR);
      skip=2;
    }
 else     if (context == LEX_CONTEXT_OP && i + 3 <= expr.length() && ""String_Node_Str"".equals(expr.substring(i,i + 3))) {
      token=new Token(Token.DIV);
      skip=3;
    }
 else     if (context == LEX_CONTEXT_OP && i + 3 <= expr.length() && ""String_Node_Str"".equals(expr.substring(i,i + 3))) {
      token=new Token(Token.MOD);
      skip=3;
    }
 else     if (c == '$') {
      int len=matchQName(expr,i + 1);
      if (len == 0) {
        throw new XPathSyntaxException();
      }
 else {
        token=new Token(Token.VAR,new XPathQName(expr.substring(i + 1,i + len + 1)));
        skip=len + 1;
      }
    }
 else     if (c == '\'' || c == '\""') {
      int end=expr.indexOf(c,i + 1);
      if (end == -1) {
        throw new XPathSyntaxException();
      }
 else {
        token=new Token(Token.STR,expr.substring(i + 1,end));
        skip=(end - i) + 1;
      }
    }
 else     if (isDigit(c)) {
      skip=matchNumeric(expr,i);
      token=new Token(Token.NUM,Double.valueOf(expr.substring(i,i + skip)));
    }
 else     if (context == LEX_CONTEXT_VAL && (isAlpha(c) || c == '_')) {
      int len=matchQName(expr,i);
      String name=expr.substring(i,i + len);
      if (name.indexOf(':') == -1 && getChar(expr,i + len) == ':' && getChar(expr,i + len + 1) == '*') {
        token=new Token(Token.NSWILDCARD,name);
        skip=len + 2;
      }
 else {
        token=new Token(Token.QNAME,new XPathQName(name));
        skip=len;
      }
    }
 else {
      throw new XPathSyntaxException();
    }
    if (token != null) {
      if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {
        context=LEX_CONTEXT_OP;
      }
 else {
        context=LEX_CONTEXT_VAL;
      }
      tokens.addElement(token);
    }
    i+=skip;
  }
  return tokens;
}","public static Vector lex(String expr) throws XPathSyntaxException {
  Vector tokens=new Vector();
  int i=0;
  int context=LEX_CONTEXT_VAL;
  while (i < expr.length()) {
    int c=expr.charAt(i);
    int d=getChar(expr,i + 1);
    Token token=null;
    int skip=1;
    if (""String_Node_Str"".indexOf(c) >= 0) {
    }
 else     if (c == '=') {
      token=new Token(Token.EQ);
    }
 else     if (c == '!' && d == '=') {
      token=new Token(Token.NEQ);
      skip=2;
    }
 else     if (c == '<') {
      if (d == '=') {
        token=new Token(Token.LTE);
        skip=2;
      }
 else {
        token=new Token(Token.LT);
      }
    }
 else     if (c == '>') {
      if (d == '=') {
        token=new Token(Token.GTE);
        skip=2;
      }
 else {
        token=new Token(Token.GT);
      }
    }
 else     if (c == '+') {
      token=new Token(Token.PLUS);
    }
 else     if (c == '-') {
      token=new Token(context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);
    }
 else     if (c == '*') {
      token=new Token(context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);
    }
 else     if (c == '|') {
      token=new Token(Token.UNION);
    }
 else     if (c == '/') {
      if (d == '/') {
        token=new Token(Token.DBL_SLASH);
        skip=2;
      }
 else {
        token=new Token(Token.SLASH);
      }
    }
 else     if (c == '[') {
      token=new Token(Token.LBRACK);
    }
 else     if (c == ']') {
      token=new Token(Token.RBRACK);
    }
 else     if (c == '(') {
      token=new Token(Token.LPAREN);
    }
 else     if (c == ')') {
      token=new Token(Token.RPAREN);
    }
 else     if (c == '.') {
      if (d == '.') {
        token=new Token(Token.DBL_DOT);
        skip=2;
      }
 else       if (isDigit(d)) {
        skip=matchNumeric(expr,i);
        token=new Token(Token.NUM,Double.valueOf(expr.substring(i,i + skip)));
      }
 else {
        token=new Token(Token.DOT);
      }
    }
 else     if (c == '@') {
      token=new Token(Token.AT);
    }
 else     if (c == ',') {
      token=new Token(Token.COMMA);
    }
 else     if (c == ':' && d == ':') {
      token=new Token(Token.DBL_COLON);
      skip=2;
    }
 else     if (context == LEX_CONTEXT_OP && i + 3 <= expr.length() && ""String_Node_Str"".equals(expr.substring(i,i + 3))) {
      token=new Token(Token.AND);
      skip=3;
    }
 else     if (context == LEX_CONTEXT_OP && i + 2 <= expr.length() && ""String_Node_Str"".equals(expr.substring(i,i + 2))) {
      token=new Token(Token.OR);
      skip=2;
    }
 else     if (context == LEX_CONTEXT_OP && i + 3 <= expr.length() && ""String_Node_Str"".equals(expr.substring(i,i + 3))) {
      token=new Token(Token.DIV);
      skip=3;
    }
 else     if (context == LEX_CONTEXT_OP && i + 3 <= expr.length() && ""String_Node_Str"".equals(expr.substring(i,i + 3))) {
      token=new Token(Token.MOD);
      skip=3;
    }
 else     if (c == '$') {
      int len=matchQName(expr,i + 1);
      if (len == 0) {
        badParse(expr,i,(char)c);
      }
 else {
        token=new Token(Token.VAR,new XPathQName(expr.substring(i + 1,i + len + 1)));
        skip=len + 1;
      }
    }
 else     if (c == '\'' || c == '\""') {
      int end=expr.indexOf(c,i + 1);
      if (end == -1) {
        badParse(expr,i,(char)c);
      }
 else {
        token=new Token(Token.STR,expr.substring(i + 1,end));
        skip=(end - i) + 1;
      }
    }
 else     if (isDigit(c)) {
      skip=matchNumeric(expr,i);
      token=new Token(Token.NUM,Double.valueOf(expr.substring(i,i + skip)));
    }
 else     if (context == LEX_CONTEXT_VAL && (isAlpha(c) || c == '_')) {
      int len=matchQName(expr,i);
      String name=expr.substring(i,i + len);
      if (name.indexOf(':') == -1 && getChar(expr,i + len) == ':' && getChar(expr,i + len + 1) == '*') {
        token=new Token(Token.NSWILDCARD,name);
        skip=len + 2;
      }
 else {
        token=new Token(Token.QNAME,new XPathQName(name));
        skip=len;
      }
    }
 else {
      badParse(expr,i,(char)c);
    }
    if (token != null) {
      if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {
        context=LEX_CONTEXT_OP;
      }
 else {
        context=LEX_CONTEXT_VAL;
      }
      tokens.addElement(token);
    }
    i+=skip;
  }
  return tokens;
}",0.9846904814732638
146843,"private static void parseBalanced(ASTNode node,SubNodeFactory snf,int lToken,int rToken) throws XPathSyntaxException {
  if (node instanceof ASTNodeAbstractExpr) {
    ASTNodeAbstractExpr absNode=(ASTNodeAbstractExpr)node;
    int i=0;
    while (i < absNode.content.size()) {
      int type=absNode.getTokenType(i);
      if (type == rToken) {
        throw new XPathSyntaxException();
      }
 else       if (type == lToken) {
        int j=absNode.indexOfBalanced(i,rToken,lToken,rToken);
        if (j == -1) {
          throw new XPathSyntaxException();
        }
        absNode.condense(snf.newNode(absNode.extract(i + 1,j)),i,j + 1);
      }
      i++;
    }
  }
  for (Enumeration e=node.getChildren().elements(); e.hasMoreElements(); ) {
    parseBalanced((ASTNode)e.nextElement(),snf,lToken,rToken);
  }
}","private static void parseBalanced(ASTNode node,SubNodeFactory snf,int lToken,int rToken) throws XPathSyntaxException {
  if (node instanceof ASTNodeAbstractExpr) {
    ASTNodeAbstractExpr absNode=(ASTNodeAbstractExpr)node;
    int i=0;
    while (i < absNode.content.size()) {
      int type=absNode.getTokenType(i);
      if (type == rToken) {
        throw new XPathSyntaxException(""String_Node_Str"");
      }
 else       if (type == lToken) {
        int j=absNode.indexOfBalanced(i,rToken,lToken,rToken);
        if (j == -1) {
          throw new XPathSyntaxException();
        }
        absNode.condense(snf.newNode(absNode.extract(i + 1,j)),i,j + 1);
      }
      i++;
    }
  }
  for (Enumeration e=node.getChildren().elements(); e.hasMoreElements(); ) {
    parseBalanced((ASTNode)e.nextElement(),snf,lToken,rToken);
  }
}",0.9896907216494846
146844,"protected JrFormEntryController getController(){
  int formID=1;
  Vector<IPreloadHandler> preloaders=JRFormTestUtil.getPreloaders();
  FormDefFetcher fetcher=new FormDefFetcher(new RMSRetreivalMethod(formID),preloaders,null,new InstanceInitializationFactory());
  FormDef form=fetcher.getFormDef();
  JrFormEntryController controller=new JrFormEntryController(new JrFormEntryModel(form,false,FormEntryModel.REPEAT_STRUCTURE_NON_LINEAR));
  controller.setView(new Chatterbox(""String_Node_Str"",controller));
  return controller;
}","protected JrFormEntryController getController(){
  int formID=1;
  Vector<IPreloadHandler> preloaders=JRFormTestUtil.getPreloaders();
  FormDefFetcher fetcher=new FormDefFetcher(new RMSRetreivalMethod(formID),preloaders,null,new InstanceInitializationFactory());
  FormDef form=fetcher.getFormDef();
  JrFormEntryController controller=new JrFormEntryController(new JrFormEntryModel(form,false,FormEntryModel.REPEAT_STRUCTURE_NON_LINEAR));
  controller.setView(new SingleQuestionView(controller));
  return controller;
}",0.9255725190839694
146845,"public V put(K key,V value){
  if (key == null) {
    throw new NullPointerException();
  }
  if (super.containsKey(key)) {
    int i=orderedKeys.indexOf(key);
    if (i == -1) {
      throw new IllegalStateException(""String_Node_Str"" + key);
    }
    orderedKeys.setElementAt(key,i);
  }
 else {
    orderedKeys.addElement(key);
  }
  return super.put(key,value);
}","public V put(K key,V value){
  if (key == null) {
    throw new NullPointerException();
  }
  V v=super.put(key,value);
  if (super.size() > orderedKeys.size()) {
    orderedKeys.addElement(key);
  }
  return v;
}",0.3896551724137931
146846,"public boolean canCreateRepeat(TreeReference repeatRef,FormIndex repeatIndex){
  GroupDef repeat=(GroupDef)this.getChild(repeatIndex);
  if (repeat.noAddRemove) {
    if (repeat.getCountReference() != null) {
      int currentMultiplicity=repeatIndex.getElementMultiplicity();
      AbstractTreeElement countNode=this.getMainInstance().resolveReference(repeat.getCountReference());
      if (countNode == null) {
        throw new RuntimeException(""String_Node_Str"" + repeat.getCountReference().getReference().toString());
      }
      long fullcount=((Integer)countNode.getValue().getValue()).intValue();
      if (fullcount <= currentMultiplicity) {
        return false;
      }
    }
 else {
      return false;
    }
  }
  return true;
}","public boolean canCreateRepeat(TreeReference repeatRef,FormIndex repeatIndex){
  GroupDef repeat=(GroupDef)this.getChild(repeatIndex);
  if (repeat.noAddRemove) {
    if (repeat.getCountReference() != null) {
      int currentMultiplicity=repeatIndex.getElementMultiplicity();
      AbstractTreeElement countNode=this.getMainInstance().resolveReference(repeat.getCountReference());
      if (countNode == null) {
        throw new RuntimeException(""String_Node_Str"" + repeat.getCountReference().getReference().toString());
      }
      IAnswerData count=countNode.getValue();
      long fullcount=count == null ? 0 : ((Integer)count.getValue()).intValue();
      if (fullcount <= currentMultiplicity) {
        return false;
      }
    }
 else {
      return false;
    }
  }
  return true;
}",0.9355888093689004
146847,"public Profile parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  checkNode(""String_Node_Str"");
  String sVersion=parser.getAttributeValue(null,""String_Node_Str"");
  int version=parseInt(sVersion);
  String authRef=parser.getAttributeValue(null,""String_Node_Str"");
  String sMajor=parser.getAttributeValue(null,""String_Node_Str"");
  String sMinor=parser.getAttributeValue(null,""String_Node_Str"");
  int major=-1;
  int minor=-1;
  if (sMajor != null) {
    major=parseInt(sMajor);
  }
  if (sMinor != null) {
    minor=parseInt(sMinor);
  }
  if ((!forceVersion && this.instance != null) && (major != -1) && (minor != -1)) {
    if (this.instance.getMajorVersion() != -1 && this.instance.getMajorVersion() != major) {
      throw new UnfullfilledRequirementsException(""String_Node_Str"" + major + ""String_Node_Str""+ this.instance.getMajorVersion()+ ""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_PROMPT,UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION,major,minor,this.instance.getMajorVersion(),this.instance.getMinorVersion(),true);
    }
    if (this.instance.getMinorVersion() != -1 && this.instance.getMinorVersion() < minor) {
      throw new UnfullfilledRequirementsException(""String_Node_Str"" + minor + ""String_Node_Str""+ this.instance.getMinorVersion()+ ""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_PROMPT,UnfullfilledRequirementsException.REQUIREMENT_MINOR_APP_VERSION,major,minor,this.instance.getMajorVersion(),this.instance.getMinorVersion(),true);
    }
  }
  String registrationNamespace=null;
  Profile profile=new Profile(version,authRef);
  try {
    parser.next();
    int eventType;
    eventType=parser.getEventType();
    do {
      if (eventType == KXmlParser.END_DOCUMENT) {
      }
 else       if (eventType == KXmlParser.START_TAG) {
        if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          String key=parser.getAttributeValue(null,""String_Node_Str"");
          String value=parser.getAttributeValue(null,""String_Node_Str"");
          String force=parser.getAttributeValue(null,""String_Node_Str"");
          if (force != null) {
            if (""String_Node_Str"".equals(force.toLowerCase())) {
              profile.addPropertySetter(key,value,true);
            }
 else {
              profile.addPropertySetter(key,value,false);
            }
          }
 else {
            profile.addPropertySetter(key,value);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          RootTranslator root=new RootParser(this.parser).parse();
          profile.addRoot(root);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          getNextTagInBlock(""String_Node_Str"");
          Resource resource=new ResourceParser(parser,maximumResourceAuthority).parse();
          table.addResource(resource,table.getInstallers().getLoginImageInstaller(),resourceId,initialResourceStatus);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          while (nextTagInBlock(""String_Node_Str"")) {
            String tag=parser.getName().toLowerCase();
            String active=parser.getAttributeValue(null,""String_Node_Str"");
            boolean isActive=false;
            if (active != null && active.toLowerCase().equals(""String_Node_Str"")) {
              isActive=true;
            }
            if (tag.equals(""String_Node_Str"")) {
            }
 else             if (tag.equals(""String_Node_Str"")) {
              if (nextTagInBlock(""String_Node_Str"")) {
                checkNode(""String_Node_Str"");
                String reminderTime=parser.nextText();
                int days=this.parseInt(reminderTime);
              }
            }
 else             if (tag.equals(""String_Node_Str"")) {
            }
 else             if (tag.equals(""String_Node_Str"")) {
              while (nextTagInBlock(""String_Node_Str"")) {
                if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
                  registrationNamespace=parser.nextText();
                  profile.addPropertySetter(""String_Node_Str"",registrationNamespace,true);
                }
 else                 if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
                  String logo=parser.nextText();
                  profile.addPropertySetter(""String_Node_Str"",logo,true);
                }
 else {
                  throw new InvalidStructureException(""String_Node_Str"" + parser.getName() + ""String_Node_Str"",parser);
                }
              }
            }
 else             if (tag.equals(""String_Node_Str"")) {
            }
            profile.setFeatureActive(tag,isActive);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          getNextTagInBlock(""String_Node_Str"");
          Resource resource=new ResourceParser(parser,maximumResourceAuthority).parse();
          table.addResource(resource,table.getInstallers().getSuiteInstaller(),resourceId,initialResourceStatus);
        }
 else {
          System.out.println(""String_Node_Str"" + parser.getName());
        }
      }
 else       if (eventType == KXmlParser.END_TAG) {
      }
 else       if (eventType == KXmlParser.TEXT) {
      }
      eventType=parser.next();
    }
 while (eventType != KXmlParser.END_DOCUMENT);
    return profile;
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  StorageFullException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
}","public Profile parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  checkNode(""String_Node_Str"");
  String sVersion=parser.getAttributeValue(null,""String_Node_Str"");
  int version=parseInt(sVersion);
  String authRef=parser.getAttributeValue(null,""String_Node_Str"");
  String sMajor=parser.getAttributeValue(null,""String_Node_Str"");
  String sMinor=parser.getAttributeValue(null,""String_Node_Str"");
  int major=-1;
  int minor=-1;
  if (sMajor != null) {
    major=parseInt(sMajor);
  }
  if (sMinor != null) {
    minor=parseInt(sMinor);
  }
  if ((!forceVersion && this.instance != null) && (major != -1) && (minor != -1)) {
    if (this.instance.getMajorVersion() != -1 && this.instance.getMajorVersion() != major) {
      throw new UnfullfilledRequirementsException(""String_Node_Str"" + major + ""String_Node_Str""+ this.instance.getMajorVersion()+ ""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_PROMPT,UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION,major,minor,this.instance.getMajorVersion(),this.instance.getMinorVersion(),true);
    }
    if (this.instance.getMinorVersion() != -1 && this.instance.getMinorVersion() < minor) {
      throw new UnfullfilledRequirementsException(""String_Node_Str"" + minor + ""String_Node_Str""+ this.instance.getMinorVersion()+ ""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_PROMPT,UnfullfilledRequirementsException.REQUIREMENT_MINOR_APP_VERSION,major,minor,this.instance.getMajorVersion(),this.instance.getMinorVersion(),false);
    }
  }
  String registrationNamespace=null;
  Profile profile=new Profile(version,authRef);
  try {
    parser.next();
    int eventType;
    eventType=parser.getEventType();
    do {
      if (eventType == KXmlParser.END_DOCUMENT) {
      }
 else       if (eventType == KXmlParser.START_TAG) {
        if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          String key=parser.getAttributeValue(null,""String_Node_Str"");
          String value=parser.getAttributeValue(null,""String_Node_Str"");
          String force=parser.getAttributeValue(null,""String_Node_Str"");
          if (force != null) {
            if (""String_Node_Str"".equals(force.toLowerCase())) {
              profile.addPropertySetter(key,value,true);
            }
 else {
              profile.addPropertySetter(key,value,false);
            }
          }
 else {
            profile.addPropertySetter(key,value);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          RootTranslator root=new RootParser(this.parser).parse();
          profile.addRoot(root);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          getNextTagInBlock(""String_Node_Str"");
          Resource resource=new ResourceParser(parser,maximumResourceAuthority).parse();
          table.addResource(resource,table.getInstallers().getLoginImageInstaller(),resourceId,initialResourceStatus);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          while (nextTagInBlock(""String_Node_Str"")) {
            String tag=parser.getName().toLowerCase();
            String active=parser.getAttributeValue(null,""String_Node_Str"");
            boolean isActive=false;
            if (active != null && active.toLowerCase().equals(""String_Node_Str"")) {
              isActive=true;
            }
            if (tag.equals(""String_Node_Str"")) {
            }
 else             if (tag.equals(""String_Node_Str"")) {
              if (nextTagInBlock(""String_Node_Str"")) {
                checkNode(""String_Node_Str"");
                String reminderTime=parser.nextText();
                int days=this.parseInt(reminderTime);
              }
            }
 else             if (tag.equals(""String_Node_Str"")) {
            }
 else             if (tag.equals(""String_Node_Str"")) {
              while (nextTagInBlock(""String_Node_Str"")) {
                if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
                  registrationNamespace=parser.nextText();
                  profile.addPropertySetter(""String_Node_Str"",registrationNamespace,true);
                }
 else                 if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
                  String logo=parser.nextText();
                  profile.addPropertySetter(""String_Node_Str"",logo,true);
                }
 else {
                  throw new InvalidStructureException(""String_Node_Str"" + parser.getName() + ""String_Node_Str"",parser);
                }
              }
            }
 else             if (tag.equals(""String_Node_Str"")) {
            }
            profile.setFeatureActive(tag,isActive);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          getNextTagInBlock(""String_Node_Str"");
          Resource resource=new ResourceParser(parser,maximumResourceAuthority).parse();
          table.addResource(resource,table.getInstallers().getSuiteInstaller(),resourceId,initialResourceStatus);
        }
 else {
          System.out.println(""String_Node_Str"" + parser.getName());
        }
      }
 else       if (eventType == KXmlParser.END_TAG) {
      }
 else       if (eventType == KXmlParser.TEXT) {
      }
      eventType=parser.next();
    }
 while (eventType != KXmlParser.END_DOCUMENT);
    return profile;
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  StorageFullException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
}",0.9994001199760048
146848,"public UnfullfilledRequirementsException(String message,int severity,int requirement,int maR,int miR,int maA,int miA,boolean majorIsProblem){
  super(message);
  this.severity=severity;
  this.requirement=requirement;
  required=maR + ""String_Node_Str"" + miR;
  available=maA + ""String_Node_Str"" + miA;
}","public UnfullfilledRequirementsException(String message,int severity,int requirement,int maR,int miR,int maA,int miA,boolean majorIsProblem){
  super(message);
  this.severity=severity;
  this.requirement=requirement;
  required=maR + ""String_Node_Str"" + miR;
  available=maA + ""String_Node_Str"" + miA;
  this.majorIsProblem=majorIsProblem;
}",0.9411764705882352
146849,"public void populate(TreeElement incoming,FormDef f){
  if (this.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      this.setValue(null);
    }
 else {
      this.setValue(AnswerDataFactory.templateByDataType(this.dataType).cast(value.uncast()));
    }
  }
 else {
    Vector names=new Vector();
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      if (!names.contains(child.getName())) {
        names.addElement(child.getName());
      }
    }
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      if (child.getMaskVar(MASK_REPEATABLE) && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        this.removeChildAt(i);
        i--;
      }
    }
    if (this.getNumChildren() != names.size()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      String expectedName=(String)names.elementAt(i);
      if (!child.getName().equals(expectedName)) {
        TreeElement child2=null;
        int j;
        for (j=i + 1; j < this.getNumChildren(); j++) {
          child2=this.getChildAt(j);
          if (child2.getName().equals(expectedName)) {
            break;
          }
        }
        if (j == this.getNumChildren()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        this.removeChildAt(j);
        if (children == null) {
          children=new Vector();
        }
        this.children.insertElementAt(child2,i);
      }
    }
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      if (child.getMaskVar(MASK_REPEATABLE)) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          if (children == null) {
            children=new Vector();
          }
          this.children.insertElementAt(newChild,i + k + 1);
          newChild.populate((TreeElement)newChildren.elementAt(k),f);
        }
        i+=newChildren.size();
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          child.populate((TreeElement)newChildren.elementAt(0),f);
        }
      }
    }
  }
}","public void populate(TreeElement incoming,FormDef f){
  if (this.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      this.setValue(null);
    }
 else {
      this.setValue(AnswerDataFactory.templateByDataType(this.dataType).cast(value.uncast()));
    }
  }
 else {
    Vector names=new Vector();
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      if (!names.contains(child.getName())) {
        names.addElement(child.getName());
      }
    }
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      if (child.getMaskVar(MASK_REPEATABLE) && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        this.removeChildAt(i);
        i--;
      }
    }
    if (this.getNumChildren() != names.size()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      String expectedName=(String)names.elementAt(i);
      if (!child.getName().equals(expectedName)) {
        TreeElement child2=null;
        int j;
        for (j=i + 1; j < this.getNumChildren(); j++) {
          child2=this.getChildAt(j);
          if (child2.getName().equals(expectedName)) {
            break;
          }
        }
        if (j == this.getNumChildren()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        this.removeChildAt(j);
        if (children == null) {
          children=new Vector();
        }
        this.children.insertElementAt(child2,i);
      }
    }
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      if (child.getMaskVar(MASK_REPEATABLE)) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          if (children == null) {
            children=new Vector();
          }
          this.children.insertElementAt(newChild,i + k + 1);
          newChild.populate((TreeElement)newChildren.elementAt(k),f);
        }
        i+=newChildren.size();
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          child.populate((TreeElement)newChildren.elementAt(0),f);
        }
      }
    }
    for (int i=0; i < incoming.getAttributeCount(); i++) {
      String name=incoming.getAttributeName(i);
      String ns=incoming.getAttributeNamespace(i);
      String value=incoming.getAttributeValue(i);
      this.setAttribute(ns,name,value);
    }
  }
}",0.9500393391030684
146850,"private void syncMeta(){
  meta.clear();
  for (Enumeration en=data.keys(); en.hasMoreElements(); ) {
    Integer i=(Integer)en.nextElement();
    Externalizable e=(Externalizable)data.get(i);
    if (e instanceof IMetaData) {
      IMetaData m=(IMetaData)e;
      for (      String key : m.getMetaDataFields()) {
        if (!meta.containsKey(key)) {
          meta.put(key,new Hashtable<Object,Vector<Integer>>());
        }
      }
      for (      String key : dynamicIndices) {
        if (!meta.containsKey(key)) {
          meta.put(key,new Hashtable<Object,Vector<Integer>>());
        }
      }
      for (Enumeration keys=meta.keys(); en.hasMoreElements(); ) {
        String key=(String)keys.nextElement();
        Object value=m.getMetaData(key);
        Hashtable<Object,Vector<Integer>> records=meta.get(key);
        if (!records.containsKey(value)) {
          records.put(value,new Vector<Integer>());
        }
        Vector<Integer> indices=records.get(value);
        if (!indices.contains(i)) {
          records.get(value).addElement(i);
        }
      }
    }
  }
}","private void syncMeta(){
  meta.clear();
  for (Enumeration en=data.keys(); en.hasMoreElements(); ) {
    Integer i=(Integer)en.nextElement();
    Externalizable e=(Externalizable)data.get(i);
    if (e instanceof IMetaData) {
      IMetaData m=(IMetaData)e;
      for (      String key : m.getMetaDataFields()) {
        if (!meta.containsKey(key)) {
          meta.put(key,new Hashtable<Object,Vector<Integer>>());
        }
      }
      for (      String key : dynamicIndices) {
        if (!meta.containsKey(key)) {
          meta.put(key,new Hashtable<Object,Vector<Integer>>());
        }
      }
      for (Enumeration keys=meta.keys(); keys.hasMoreElements(); ) {
        String key=(String)keys.nextElement();
        Object value=m.getMetaData(key);
        Hashtable<Object,Vector<Integer>> records=meta.get(key);
        if (!records.containsKey(value)) {
          records.put(value,new Vector<Integer>());
        }
        Vector<Integer> indices=records.get(value);
        if (!indices.contains(i)) {
          records.get(value).addElement(i);
        }
      }
    }
  }
}",0.997250229147571
146851,"public void registerIndex(String index){
synchronized (metadataAccessLock) {
    if (dynamicIndices == null) {
      dynamicIndices=new Vector<String>();
    }
    dynamicIndices.addElement(index);
    buildIndex();
  }
}","public void registerIndex(String index){
  if (index == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
synchronized (metadataAccessLock) {
    if (dynamicIndices == null) {
      dynamicIndices=new Vector<String>();
    }
    dynamicIndices.addElement(index);
    buildIndex();
  }
}",0.8435114503816794
146852,"private IMetaData getMetaDataForRecord(int record){
  Hashtable<String,Object> data=null;
synchronized (metadataAccessLock) {
    if (hasMetaData) {
      if (exists(record)) {
        data=new Hashtable<String,Object>();
        Integer recordId=DataUtil.integer(record);
        for (        String s : proto.getMetaDataFields()) {
          Hashtable<Object,Vector<Integer>> values=metaDataIndex.get(s);
          for (Enumeration en=values.keys(); en.hasMoreElements(); ) {
            Object o=en.nextElement();
            Vector<Integer> ids=values.get(o);
            if (ids.contains(recordId)) {
              data.put(s,o);
              break;
            }
          }
        }
      }
    }
  }
  return new MetaDataWrapper(data);
}","private IMetaData getMetaDataForRecord(int record){
  Hashtable<String,Object> data=null;
synchronized (metadataAccessLock) {
    if (hasMetaData) {
      if (exists(record)) {
        data=new Hashtable<String,Object>();
        Integer recordId=DataUtil.integer(record);
        for (        String s : getFields()) {
          Hashtable<Object,Vector<Integer>> values=metaDataIndex.get(s);
          for (Enumeration en=values.keys(); en.hasMoreElements(); ) {
            Object o=en.nextElement();
            Vector<Integer> ids=values.get(o);
            if (ids.contains(recordId)) {
              data.put(s,o);
              break;
            }
          }
        }
      }
    }
  }
  return new MetaDataWrapper(data);
}",0.9864864864864864
146853,"private Hashtable<String,Object> getMetaData(IMetaData m,String[] index){
  Hashtable<String,Object> h=new Hashtable<String,Object>();
  for (  String s : index) {
    h.put(s,m.getMetaData(s));
  }
  return h;
}","private Hashtable<String,Object> getMetaData(IMetaData m,String[] index){
  Hashtable<String,Object> h=new Hashtable<String,Object>();
  for (  String s : index) {
    Object o=m.getMetaData(s);
    if (o == null || s == null) {
      ""String_Node_Str"".charAt(0);
    }
    h.put(s,o);
  }
  return h;
}",0.7611650485436893
146854,"public boolean isReadOnly(){
  try {
    FileConnection c=connector();
    if (c.exists()) {
      return c.canWrite();
    }
 else {
      try {
        String local=this.getLocalURI();
        if (local.indexOf(""String_Node_Str"") == -1) {
          return false;
        }
 else {
          String parent=local.substring(0,local.lastIndexOf('/'));
          FileConnection parentConnector=this.connector(parent,false);
          if (parentConnector.exists() && parentConnector.isDirectory()) {
            boolean result=parentConnector.canWrite();
            parentConnector.close();
            return result;
          }
          return false;
        }
      }
 catch (      Exception e) {
        return false;
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    return true;
  }
catch (  SecurityException se) {
    return true;
  }
}","public boolean isReadOnly(){
  try {
    FileConnection c=connector();
    if (c.exists()) {
      return !c.canWrite();
    }
 else {
      try {
        String local=this.getLocalURI();
        if (local.indexOf(""String_Node_Str"") == -1) {
          return false;
        }
 else {
          String parent=local.substring(0,local.lastIndexOf('/'));
          FileConnection parentConnector=this.connector(parent,false);
          if (parentConnector.exists() && parentConnector.isDirectory()) {
            boolean result=parentConnector.canWrite();
            parentConnector.close();
            return !result;
          }
          return false;
        }
      }
 catch (      Exception e) {
        return false;
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    return true;
  }
catch (  SecurityException se) {
    return true;
  }
}",0.9988465974625144
146855,"/** 
 * Get text for locale and exact text ID only, not using any fallbacks. NOTE: This call will only return the full compliment of available strings if and  only if the requested locale is current. Otherwise it will only retrieve strings declared at runtime.
 * @param locale Locale. Must be defined and not null.
 * @param textID Text handle (text ID appended with optional text form). Must not be null.
 * @return Localized text. Return null if none found.
 * @throws UnregisteredLocaleException If the locale is not defined or null.
 * @throws NullPointerException if textID is null
 */
public String getRawText(String locale,String textID){
  if (locale == null) {
    throw new UnregisteredLocaleException(""String_Node_Str"" + textID);
  }
  if (locale.equals(currentLocale)) {
    return currentLocaleData.get(textID).render();
  }
 else {
    return (String)getLocaleMap(locale).get(textID);
  }
}","/** 
 * Get text for locale and exact text ID only, not using any fallbacks. NOTE: This call will only return the full compliment of available strings if and  only if the requested locale is current. Otherwise it will only retrieve strings declared at runtime.
 * @param locale Locale. Must be defined and not null.
 * @param textID Text handle (text ID appended with optional text form). Must not be null.
 * @return Localized text. Return null if none found.
 * @throws UnregisteredLocaleException If the locale is not defined or null.
 * @throws NullPointerException if textID is null
 */
public String getRawText(String locale,String textID){
  if (locale == null) {
    throw new UnregisteredLocaleException(""String_Node_Str"" + textID);
  }
  if (locale.equals(currentLocale)) {
    PrefixTreeNode data=currentLocaleData.get(textID);
    return data == null ? null : data.render();
  }
 else {
    return (String)getLocaleMap(locale).get(textID);
  }
}",0.9645542427497314
146856,"public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.writeString(out,ExtUtil.emptyIfNull(name));
  ExtUtil.writeNumeric(out,multiplicity);
  ExtUtil.write(out,new ExtWrapList(ExtUtil.emptyIfNull(predicates)));
}","public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.writeString(out,ExtUtil.emptyIfNull(name));
  ExtUtil.writeNumeric(out,multiplicity);
  ExtUtil.write(out,new ExtWrapListPoly(ExtUtil.emptyIfNull(predicates)));
}",0.99163179916318
146857,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  name=ExtUtil.nullIfEmpty(ExtUtil.readString(in));
  multiplicity=ExtUtil.readInt(in);
  predicates=ExtUtil.nullIfEmpty((Vector<XPathExpression>)ExtUtil.read(in,new ExtWrapList(new ExtWrapTagged())));
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  name=ExtUtil.nullIfEmpty(ExtUtil.readString(in));
  multiplicity=ExtUtil.readInt(in);
  predicates=ExtUtil.nullIfEmpty((Vector<XPathExpression>)ExtUtil.read(in,new ExtWrapListPoly()));
}",0.959349593495935
146858,"public static void main(String[] args){
  int mode=-1;
  if (args.length == 0) {
    mode=MODE_SCHEMA;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_SCHEMA;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_SUMMARY_TEXT;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_CSV_DUMP;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_CSV_IMPORT;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_VALIDATE_MODEL;
  }
 else {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  if (mode == MODE_VALIDATE_MODEL) {
    String formPath=args[1];
    String modelPath=args[2];
    FileInputStream formInput=null;
    FileInputStream instanceInput=null;
    try {
      formInput=new FileInputStream(formPath);
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + formPath);
      System.exit(1);
    }
    try {
      instanceInput=new FileInputStream(modelPath);
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + modelPath);
      System.exit(1);
    }
    try {
      FormInstanceValidator validator=new FormInstanceValidator(formInput,instanceInput);
      validator.simulateEntryTest();
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.exit(1);
    }
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  PrintStream sysOut=System.out;
  System.setOut(System.err);
  if (mode == MODE_CSV_IMPORT) {
    System.setOut(sysOut);
    if (args.length > 1) {
      String delimeter=args[1];
      FormTranslationFormatter.turnTranslationsCSVtoItext(System.in,System.out,delimeter,null,null);
    }
 else     if (args.length > 2) {
      String delimeter=args[1];
      String encoding=args[2];
      FormTranslationFormatter.turnTranslationsCSVtoItext(System.in,System.out,delimeter,encoding,null);
    }
 else     if (args.length > 3) {
      String delimeter=args[1];
      String incoding=args[2];
      String outcoding=args[3];
      FormTranslationFormatter.turnTranslationsCSVtoItext(System.in,System.out,delimeter,incoding,outcoding);
    }
 else {
      FormTranslationFormatter.turnTranslationsCSVtoItext(System.in,System.out);
    }
    System.exit(0);
  }
  FormDef f=XFormUtils.getFormFromInputStream(System.in);
  System.setOut(sysOut);
  if (mode == MODE_SCHEMA) {
    Document schemaDoc=InstanceSchema.generateInstanceSchema(f);
    KXmlSerializer serializer=new KXmlSerializer();
    try {
      serializer.setOutput(System.out,null);
      schemaDoc.write(serializer);
      serializer.flush();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else   if (mode == MODE_SUMMARY_TEXT) {
    System.out.println(FormOverview.overview(f));
  }
 else   if (mode == MODE_CSV_DUMP) {
    System.out.println(FormTranslationFormatter.dumpTranslationsIntoCSV(f));
  }
}","public static void main(String[] args){
  int mode=-1;
  if (args.length == 0) {
    mode=MODE_SCHEMA;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_SCHEMA;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_SUMMARY_TEXT;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_CSV_DUMP;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_CSV_IMPORT;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_VALIDATE_MODEL;
  }
 else {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  if (mode == MODE_VALIDATE_MODEL) {
    String formPath=args[1];
    String modelPath=args[2];
    FileInputStream formInput=null;
    FileInputStream instanceInput=null;
    try {
      formInput=new FileInputStream(formPath);
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + formPath);
      System.exit(1);
    }
    try {
      instanceInput=new FileInputStream(modelPath);
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + modelPath);
      System.exit(1);
    }
    try {
      FormInstanceValidator validator=new FormInstanceValidator(formInput,instanceInput);
      validator.simulateEntryTest();
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.exit(1);
    }
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  PrintStream sysOut=System.out;
  System.setOut(System.err);
  if (mode == MODE_CSV_IMPORT) {
    System.setOut(sysOut);
    if (args.length > 1) {
      String delimeter=args[1];
      FormTranslationFormatter.turnTranslationsCSVtoItext(System.in,System.out,delimeter,null,null);
    }
 else     if (args.length > 2) {
      String delimeter=args[1];
      String encoding=args[2];
      FormTranslationFormatter.turnTranslationsCSVtoItext(System.in,System.out,delimeter,encoding,null);
    }
 else     if (args.length > 3) {
      String delimeter=args[1];
      String incoding=args[2];
      String outcoding=args[3];
      FormTranslationFormatter.turnTranslationsCSVtoItext(System.in,System.out,delimeter,incoding,outcoding);
    }
 else {
      FormTranslationFormatter.turnTranslationsCSVtoItext(System.in,System.out);
    }
    System.exit(0);
  }
  InputStream inputStream=System.in;
  if (args.length > 1) {
    String formPath=args[1];
    FileInputStream formInput=null;
    try {
      inputStream=new FileInputStream(formPath);
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + formPath);
      System.exit(1);
    }
  }
  FormDef f=XFormUtils.getFormFromInputStream(inputStream);
  System.setOut(sysOut);
  if (mode == MODE_SCHEMA) {
    Document schemaDoc=InstanceSchema.generateInstanceSchema(f);
    KXmlSerializer serializer=new KXmlSerializer();
    try {
      serializer.setOutput(System.out,null);
      schemaDoc.write(serializer);
      serializer.flush();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else   if (mode == MODE_SUMMARY_TEXT) {
    System.out.println(FormOverview.overview(f));
  }
 else   if (mode == MODE_CSV_DUMP) {
    System.out.println(FormTranslationFormatter.dumpTranslationsIntoCSV(f));
  }
  System.exit(0);
}",0.94357515410147
146859,"public void triggerTriggerables(TreeReference ref){
  TreeReference genericRef=ref.genericize();
  Vector triggered=(Vector)triggerIndex.get(genericRef);
  if (triggered == null)   return;
  Vector triggeredCopy=new Vector();
  for (int i=0; i < triggered.size(); i++)   triggeredCopy.addElement(triggered.elementAt(i));
  evaluateTriggerables(triggeredCopy,ref);
}","public void triggerTriggerables(TreeReference ref){
  TreeReference genericRef=ref.genericize();
  Vector triggered=(Vector)triggerIndex.get(genericRef);
  if (triggered == null) {
    return;
  }
  Vector triggeredCopy=new Vector();
  for (int i=0; i < triggered.size(); i++) {
    triggeredCopy.addElement(triggered.elementAt(i));
  }
  evaluateTriggerables(triggeredCopy,ref);
}",0.9785522788203752
146860,"/** 
 * Reads the form definition object from the supplied stream. Requires that the instance has been set to a prototype of the instance that should be used for deserialization.
 * @param dis - the stream to read from.
 * @throws IOException
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
public void readExternal(DataInputStream dis,PrototypeFactory pf) throws IOException, DeserializationException {
  setID(ExtUtil.readInt(dis));
  setName(ExtUtil.nullIfEmpty(ExtUtil.readString(dis)));
  setTitle((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setChildren((Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf));
  setInstance((FormInstance)ExtUtil.read(dis,FormInstance.class,pf));
  setLocalizer((Localizer)ExtUtil.read(dis,new ExtWrapNullable(Localizer.class),pf));
  Vector vcond=(Vector)ExtUtil.read(dis,new ExtWrapList(Condition.class),pf);
  for (Enumeration e=vcond.elements(); e.hasMoreElements(); )   addTriggerable((Condition)e.nextElement());
  Vector vcalc=(Vector)ExtUtil.read(dis,new ExtWrapList(Recalculate.class),pf);
  for (Enumeration e=vcalc.elements(); e.hasMoreElements(); )   addTriggerable((Recalculate)e.nextElement());
  finalizeTriggerables();
  outputFragments=(Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf);
  submissionProfiles=(Hashtable<String,SubmissionProfile>)ExtUtil.read(dis,new ExtWrapMap(String.class,SubmissionProfile.class));
  formInstances=(Hashtable<String,DataInstance>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapTagged()));
  eventListeners=(Hashtable<String,Vector<Action>>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapListPoly()));
  setEvaluationContext(new EvaluationContext(null));
}","/** 
 * Reads the form definition object from the supplied stream. Requires that the instance has been set to a prototype of the instance that should be used for deserialization.
 * @param dis - the stream to read from.
 * @throws IOException
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
public void readExternal(DataInputStream dis,PrototypeFactory pf) throws IOException, DeserializationException {
  setID(ExtUtil.readInt(dis));
  setName(ExtUtil.nullIfEmpty(ExtUtil.readString(dis)));
  setTitle((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setChildren((Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf));
  setInstance((FormInstance)ExtUtil.read(dis,FormInstance.class,pf));
  setLocalizer((Localizer)ExtUtil.read(dis,new ExtWrapNullable(Localizer.class),pf));
  Vector vcond=(Vector)ExtUtil.read(dis,new ExtWrapList(Condition.class),pf);
  for (Enumeration e=vcond.elements(); e.hasMoreElements(); ) {
    addTriggerable((Condition)e.nextElement());
  }
  Vector vcalc=(Vector)ExtUtil.read(dis,new ExtWrapList(Recalculate.class),pf);
  for (Enumeration e=vcalc.elements(); e.hasMoreElements(); ) {
    addTriggerable((Recalculate)e.nextElement());
  }
  finalizeTriggerables();
  outputFragments=(Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf);
  submissionProfiles=(Hashtable<String,SubmissionProfile>)ExtUtil.read(dis,new ExtWrapMap(String.class,SubmissionProfile.class));
  formInstances=(Hashtable<String,DataInstance>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapTagged()));
  eventListeners=(Hashtable<String,Vector<Action>>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapListPoly()));
  setEvaluationContext(new EvaluationContext(null));
}",0.9953379953379954
146861,"/** 
 * Add a Condition to the form's Collection.
 * @param condition the condition to be set
 */
public Triggerable addTriggerable(Triggerable t){
  int existingIx=triggerables.indexOf(t);
  if (existingIx >= 0) {
    Triggerable existingTriggerable=(Triggerable)triggerables.elementAt(existingIx);
    existingTriggerable.contextRef=existingTriggerable.contextRef.intersect(t.contextRef);
    return existingTriggerable;
  }
 else {
    triggerables.addElement(t);
    triggerablesInOrder=false;
    Vector triggers=t.getTriggers();
    for (int i=0; i < triggers.size(); i++) {
      TreeReference trigger=(TreeReference)triggers.elementAt(i);
      if (!triggerIndex.containsKey(trigger)) {
        triggerIndex.put(trigger,new Vector());
      }
      Vector triggered=(Vector)triggerIndex.get(trigger);
      if (!triggered.contains(t)) {
        triggered.addElement(t);
      }
    }
    return t;
  }
}","/** 
 * Add a Condition to the form's Collection.
 * @param condition the condition to be set
 */
public Triggerable addTriggerable(Triggerable t){
  int existingIx=triggerables.indexOf(t);
  if (existingIx >= 0) {
    Triggerable existingTriggerable=(Triggerable)triggerables.elementAt(existingIx);
    existingTriggerable.contextRef=existingTriggerable.contextRef.intersect(t.contextRef);
    return existingTriggerable;
  }
 else {
    triggerables.addElement(t);
    triggerablesInOrder=false;
    Vector triggers=t.getTriggers();
    for (int i=0; i < triggers.size(); i++) {
      TreeReference trigger=(TreeReference)triggers.elementAt(i);
      if (!triggerIndex.containsKey(trigger)) {
        triggerIndex.put(trigger.clone(),new Vector());
      }
      Vector triggered=(Vector)triggerIndex.get(trigger);
      if (!triggered.contains(t)) {
        triggered.addElement(t);
      }
    }
    return t;
  }
}",0.9956284153005464
146862,"private void evaluateTriggerable(Triggerable t,TreeReference anchorRef){
  TreeReference contextRef=t.contextRef.contextualize(anchorRef);
  Vector v=exprEvalContext.expandReference(contextRef);
  for (int i=0; i < v.size(); i++) {
    EvaluationContext ec=new EvaluationContext(exprEvalContext,(TreeReference)v.elementAt(i));
    try {
      t.apply(mainInstance,ec,this);
    }
 catch (    RuntimeException e) {
      throw e;
    }
  }
}","private void evaluateTriggerable(Triggerable t,TreeReference anchorRef){
  TreeReference contextRef=t.contextRef.contextualize(anchorRef);
  Vector<TreeReference> v=exprEvalContext.expandReference(contextRef);
  for (int i=0; i < v.size(); i++) {
    try {
      t.apply(mainInstance,exprEvalContext,v.elementAt(i),this);
    }
 catch (    RuntimeException e) {
      throw e;
    }
  }
}",0.6183574879227053
146863,Vector getTriggers();,Vector<TreeReference> getTriggers();,0.7368421052631579
146864,"Vector evalNodeset(DataInstance model,EvaluationContext evalContext);","Vector<TreeReference> evalNodeset(DataInstance model,EvaluationContext evalContext);",0.9019607843137256
146865,"public Vector getTargets(){
  return targets;
}","public Vector<TreeReference> getTargets(){
  return targets;
}",0.8623853211009175
146866,"public Vector getTriggers(){
  Vector relTriggers=expr.getTriggers();
  Vector absTriggers=new Vector();
  for (int i=0; i < relTriggers.size(); i++) {
    absTriggers.addElement(((TreeReference)relTriggers.elementAt(i)).anchor(contextRef));
  }
  return absTriggers;
}","public Vector<TreeReference> getTriggers(){
  Vector<TreeReference> relTriggers=expr.getTriggers();
  Vector<TreeReference> absTriggers=new Vector<TreeReference>();
  for (int i=0; i < relTriggers.size(); i++) {
    absTriggers.addElement(((TreeReference)relTriggers.elementAt(i)).anchor(originalContextRef));
  }
  return absTriggers;
}",0.8844884488448845
146867,"public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.write(out,new ExtWrapTagged(expr));
  ExtUtil.write(out,contextRef);
  ExtUtil.write(out,new ExtWrapList(targets));
}","public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.write(out,new ExtWrapTagged(expr));
  ExtUtil.write(out,contextRef);
  ExtUtil.write(out,originalContextRef);
  ExtUtil.write(out,new ExtWrapList(targets));
}",0.9053117782909932
146868,"public void apply(FormInstance instance,EvaluationContext evalContext,FormDef f){
  Object result=eval(instance,evalContext);
  for (int i=0; i < targets.size(); i++) {
    TreeReference targetRef=((TreeReference)targets.elementAt(i)).contextualize(evalContext.getContextRef());
    Vector v=evalContext.expandReference(targetRef);
    for (int j=0; j < v.size(); j++) {
      TreeReference affectedRef=(TreeReference)v.elementAt(j);
      apply(affectedRef,result,instance,f);
    }
  }
}","/** 
 * Not for re-implementation, dispatches all of the evaluation 
 * @param instance
 * @param evalContext
 * @param f
 */
public final void apply(FormInstance instance,EvaluationContext parentContext,TreeReference context,FormDef f){
  TreeReference ungenericised=originalContextRef.contextualize(context);
  EvaluationContext ec=new EvaluationContext(parentContext,ungenericised);
  Object result=eval(instance,ec);
  for (int i=0; i < targets.size(); i++) {
    TreeReference targetRef=((TreeReference)targets.elementAt(i)).contextualize(ec.getContextRef());
    Vector v=ec.expandReference(targetRef);
    for (int j=0; j < v.size(); j++) {
      TreeReference affectedRef=(TreeReference)v.elementAt(j);
      apply(affectedRef,result,instance,f);
    }
  }
}",0.7250996015936255
146869,"public boolean equals(Object o){
  if (o instanceof Triggerable) {
    Triggerable t=(Triggerable)o;
    if (this == t)     return true;
    if (this.expr.equals(t.expr)) {
      Vector Atriggers=this.getTriggers();
      Vector Btriggers=t.getTriggers();
      for (int k=0; k < 2; k++) {
        Vector v1=(k == 0 ? Atriggers : Btriggers);
        Vector v2=(k == 0 ? Btriggers : Atriggers);
        for (int i=0; i < v1.size(); i++) {
          if (v2.indexOf(v1.elementAt(i)) == -1) {
            return false;
          }
        }
      }
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}","public boolean equals(Object o){
  if (o instanceof Triggerable) {
    Triggerable t=(Triggerable)o;
    if (this == t)     return true;
    if (this.expr.equals(t.expr)) {
      Vector<TreeReference> Atriggers=this.getTriggers();
      Vector<TreeReference> Btriggers=t.getTriggers();
      for (int k=0; k < 2; k++) {
        Vector<TreeReference> v1=(k == 0 ? Atriggers : Btriggers);
        Vector<TreeReference> v2=(k == 0 ? Btriggers : Atriggers);
        for (int i=0; i < v1.size(); i++) {
          if (!v1.elementAt(i).isAbsolute() || v2.indexOf(v1.elementAt(i)) == -1) {
            return false;
          }
        }
      }
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}",0.9321663019693656
146870,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  expr=(IConditionExpr)ExtUtil.read(in,new ExtWrapTagged(),pf);
  contextRef=(TreeReference)ExtUtil.read(in,TreeReference.class,pf);
  targets=(Vector)ExtUtil.read(in,new ExtWrapList(TreeReference.class),pf);
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  expr=(IConditionExpr)ExtUtil.read(in,new ExtWrapTagged(),pf);
  contextRef=(TreeReference)ExtUtil.read(in,TreeReference.class,pf);
  originalContextRef=(TreeReference)ExtUtil.read(in,TreeReference.class,pf);
  targets=(Vector<TreeReference>)ExtUtil.read(in,new ExtWrapList(TreeReference.class),pf);
}",0.8586956521739131
146871,"public Triggerable(IConditionExpr expr,TreeReference contextRef){
  this.expr=expr;
  this.contextRef=contextRef;
  this.targets=new Vector();
}","public Triggerable(IConditionExpr expr,TreeReference contextRef){
  this.expr=expr;
  this.contextRef=contextRef;
  this.originalContextRef=contextRef;
  this.targets=new Vector();
}",0.8834355828220859
146872,"private static void getTriggers(XPathExpression x,Vector v,TreeReference contextRef){
  if (x instanceof XPathPathExpr) {
    TreeReference ref=((XPathPathExpr)x).getReference();
    TreeReference contextualized=ref;
    if (contextRef != null) {
      contextualized=ref.contextualize(contextRef);
    }
    if (!v.contains(contextualized)) {
      v.addElement(contextualized);
    }
    for (int i=0; i < ref.size(); i++) {
      Vector<XPathExpression> predicates=ref.getPredicate(i);
      if (predicates == null) {
        continue;
      }
      if (!ref.isAbsolute()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      TreeReference predicateContext=ref.getSubReference(i);
      for (      XPathExpression predicate : predicates) {
        getTriggers(predicate,v,predicateContext);
      }
    }
  }
 else   if (x instanceof XPathBinaryOpExpr) {
    getTriggers(((XPathBinaryOpExpr)x).a,v,contextRef);
    getTriggers(((XPathBinaryOpExpr)x).b,v,contextRef);
  }
 else   if (x instanceof XPathUnaryOpExpr) {
    getTriggers(((XPathUnaryOpExpr)x).a,v,contextRef);
  }
 else   if (x instanceof XPathFuncExpr) {
    XPathFuncExpr fx=(XPathFuncExpr)x;
    for (int i=0; i < fx.args.length; i++)     getTriggers(fx.args[i],v,contextRef);
  }
}","private static void getTriggers(XPathExpression x,Vector<TreeReference> v,TreeReference contextRef){
  if (x instanceof XPathPathExpr) {
    TreeReference ref=((XPathPathExpr)x).getReference();
    TreeReference contextualized=ref;
    if (contextRef != null) {
      contextualized=ref.contextualize(contextRef);
    }
    if (!v.contains(contextualized)) {
      v.addElement(contextualized);
    }
    for (int i=0; i < ref.size(); i++) {
      Vector<XPathExpression> predicates=ref.getPredicate(i);
      if (predicates == null) {
        continue;
      }
      if (!ref.isAbsolute()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      TreeReference predicateContext=ref.getSubReference(i);
      for (      XPathExpression predicate : predicates) {
        getTriggers(predicate,v,predicateContext);
      }
    }
  }
 else   if (x instanceof XPathBinaryOpExpr) {
    getTriggers(((XPathBinaryOpExpr)x).a,v,contextRef);
    getTriggers(((XPathBinaryOpExpr)x).b,v,contextRef);
  }
 else   if (x instanceof XPathUnaryOpExpr) {
    getTriggers(((XPathUnaryOpExpr)x).a,v,contextRef);
  }
 else   if (x instanceof XPathFuncExpr) {
    XPathFuncExpr fx=(XPathFuncExpr)x;
    for (int i=0; i < fx.args.length; i++)     getTriggers(fx.args[i],v,contextRef);
  }
}",0.9941520467836256
146873,"public String[] getSortFieldNames(){
  Vector<String> fields=new Vector<String>();
  int sortField=this.getSortFieldDefault() - 1;
  String[] headers=getHeaders(false);
  if (sortField == -1) {
    fields.addElement(Localization.get(""String_Node_Str""));
  }
 else {
    fields.addElement(headers[sortField]);
    fields.addElement(Localization.get(""String_Node_Str""));
  }
  for (int i=0; i < headers.length; ++i) {
    if (i == sortField) {
      continue;
    }
    String s=headers[i];
    if (s == null || ""String_Node_Str"".equals(s)) {
      continue;
    }
    fields.addElement(s);
  }
  String[] ret=new String[fields.size()];
  for (int i=0; i < ret.length; ++i) {
    ret[i]=fields.elementAt(i);
  }
  return ret;
}","public String[] getSortFieldNames(){
  Vector<String> fields=new Vector<String>();
  int sortField=this.getSortFieldDefault();
  if (sortField != -1) {
    sortField--;
  }
  String[] headers=getHeaders(false);
  if (sortField == -1) {
    fields.addElement(Localization.get(""String_Node_Str""));
  }
 else {
    fields.addElement(headers[sortField]);
    fields.addElement(Localization.get(""String_Node_Str""));
  }
  for (int i=0; i < headers.length; ++i) {
    if (i == sortField) {
      continue;
    }
    String s=headers[i];
    if (s == null || ""String_Node_Str"".equals(s)) {
      continue;
    }
    fields.addElement(s);
  }
  String[] ret=new String[fields.size()];
  for (int i=0; i < ret.length; ++i) {
    ret[i]=fields.elementAt(i);
  }
  return ret;
}",0.9691689008042896
146874,"public Element serializeNode(TreeElement instanceNode){
  Element e=new Element();
  if (!instanceNode.isRelevant() || instanceNode.getMult() == TreeReference.INDEX_TEMPLATE) {
    return null;
  }
  if (instanceNode.getValue() != null) {
    Object serializedAnswer=serializer.serializeAnswerData(instanceNode.getValue(),instanceNode.getDataType());
    if (serializedAnswer instanceof Element) {
      e=(Element)serializedAnswer;
    }
 else     if (serializedAnswer instanceof String) {
      e=new Element();
      e.addChild(Node.TEXT,(String)serializedAnswer);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + instanceNode.getValue().toString() + ""String_Node_Str""+ serializedAnswer);
    }
    if (serializer.containsExternalData(instanceNode.getValue()).booleanValue()) {
      IDataPointer[] pointer=serializer.retrieveExternalDataPointer(instanceNode.getValue());
      for (int i=0; i < pointer.length; ++i) {
        dataPointers.addElement(pointer[i]);
      }
    }
  }
 else {
    Vector childNames=new Vector();
    for (int i=0; i < instanceNode.getNumChildren(); i++) {
      String childName=instanceNode.getChildAt(i).getName();
      System.out.println(""String_Node_Str"" + childName);
      if (!childNames.contains(childName))       childNames.addElement(childName);
    }
    for (int i=0; i < childNames.size(); i++) {
      String childName=(String)childNames.elementAt(i);
      int mult=instanceNode.getChildMultiplicity(childName);
      for (int j=0; j < mult; j++) {
        Element child=serializeNode(instanceNode.getChild(childName,j));
        if (child != null) {
          e.addChild(Node.ELEMENT,child);
        }
      }
    }
  }
  e.setName(instanceNode.getName());
  for (int i=0; i < instanceNode.getAttributeCount(); i++) {
    String namespace=instanceNode.getAttributeNamespace(i);
    String name=instanceNode.getAttributeName(i);
    String val=instanceNode.getAttributeValue(i);
    e.setAttribute(namespace,name,val);
  }
  if (instanceNode.getNamespace() != null) {
    e.setNamespace(instanceNode.getNamespace());
  }
  return e;
}","public Element serializeNode(TreeElement instanceNode){
  Element e=new Element();
  if (!instanceNode.isRelevant() || instanceNode.getMult() == TreeReference.INDEX_TEMPLATE) {
    return null;
  }
  if (instanceNode.getValue() != null) {
    Object serializedAnswer=serializer.serializeAnswerData(instanceNode.getValue(),instanceNode.getDataType());
    if (serializedAnswer instanceof Element) {
      e=(Element)serializedAnswer;
    }
 else     if (serializedAnswer instanceof String) {
      e=new Element();
      e.addChild(Node.TEXT,(String)serializedAnswer);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + instanceNode.getValue().toString() + ""String_Node_Str""+ serializedAnswer);
    }
    if (serializer.containsExternalData(instanceNode.getValue()).booleanValue()) {
      IDataPointer[] pointer=serializer.retrieveExternalDataPointer(instanceNode.getValue());
      for (int i=0; i < pointer.length; ++i) {
        dataPointers.addElement(pointer[i]);
      }
    }
  }
 else {
    Vector childNames=new Vector();
    for (int i=0; i < instanceNode.getNumChildren(); i++) {
      String childName=instanceNode.getChildAt(i).getName();
      System.out.println(""String_Node_Str"" + childName);
      if (!childNames.contains(childName))       childNames.addElement(childName);
    }
    for (int i=0; i < childNames.size(); i++) {
      String childName=(String)childNames.elementAt(i);
      int mult=instanceNode.getChildMultiplicity(childName);
      for (int j=0; j < mult; j++) {
        Element child=serializeNode(instanceNode.getChild(childName,j));
        if (child != null) {
          e.addChild(Node.ELEMENT,child);
        }
      }
    }
  }
  e.setName(instanceNode.getName());
  for (int i=0; i < instanceNode.getAttributeCount(); i++) {
    String namespace=instanceNode.getAttributeNamespace(i);
    String name=instanceNode.getAttributeName(i);
    String val=instanceNode.getAttributeValue(i);
    if (val == null) {
      val=""String_Node_Str"";
    }
    e.setAttribute(namespace,name,val);
  }
  if (instanceNode.getNamespace() != null) {
    e.setNamespace(instanceNode.getNamespace());
  }
  return e;
}",0.9863849765258216
146875,"protected JrFormEntryController getController(){
  FormDefFetcher fetcher=new FormDefFetcher(new NamespaceRetrievalMethod(formName),preloaders,funcHandlers,iif);
  JrFormEntryController controller=CommCareUtil.createFormEntryController(fetcher);
  controller.setView(loadView(title,controller));
  return controller;
}","protected JrFormEntryController getController(){
  FormDefFetcher fetcher=new FormDefFetcher(new NamespaceRetrievalMethod(formName),preloaders,funcHandlers,iif);
  boolean supportsNewRepeats=false;
  String viewType=PropertyManager._().getSingularProperty(FormManagerProperties.VIEW_TYPE_PROPERTY);
  if (FormManagerProperties.VIEW_CHATTERBOX.equals(viewType)) {
    supportsNewRepeats=true;
  }
  JrFormEntryController controller=CommCareUtil.createFormEntryController(fetcher,supportsNewRepeats);
  controller.setView(loadView(title,controller));
  return controller;
}",0.7154105736782902
146876,"private Vector<String> roots(){
  if (fileroots == null) {
    fileroots=new Vector<String>();
    try {
      for (Enumeration en=FileSystemRegistry.listRoots(); en.hasMoreElements(); ) {
        String root=(String)en.nextElement();
        if (root.endsWith(""String_Node_Str"")) {
          root=root.substring(0,root.length() - 1);
          fileroots.addElement(root);
        }
      }
    }
 catch (    SecurityException e) {
      this.securityException(e);
      if (fileroots.size() > 0) {
        return fileroots;
      }
 else {
        fileroots=null;
        return new Vector<String>();
      }
    }
  }
  return fileroots;
}","private Vector<String> roots(){
  if (fileroots == null) {
    fileroots=new Vector<String>();
    try {
      for (Enumeration en=FileSystemRegistry.listRoots(); en.hasMoreElements(); ) {
        String root=(String)en.nextElement();
        if (root.endsWith(""String_Node_Str"")) {
          root=root.substring(0,root.length() - 1);
          fileroots.addElement(root);
        }
      }
    }
 catch (    SecurityException e) {
      this.securityException(e);
      if (fileroots.size() > 0) {
        return fileroots;
      }
 else {
        fileroots=null;
        return new Vector<String>();
      }
    }
catch (    NullPointerException npe) {
      return new Vector<String>();
    }
  }
  return fileroots;
}",0.9045521292217328
146877,"/** 
 * meant to be called after deserialization and initialization of handlers
 * @param newInstance true if the form is to be used for a new entry interaction, false if it is using an existing IDataModel
 */
public void initialize(boolean newInstance,InstanceInitializationFactory factory){
  for (Enumeration en=formInstances.keys(); en.hasMoreElements(); ) {
    String instanceId=(String)en.nextElement();
    DataInstance instance=formInstances.get(instanceId);
    instance.initialize(factory,instanceId);
  }
  if (newInstance) {
    preloadInstance(mainInstance.getRoot());
  }
  if (getLocalizer() != null && getLocalizer().getLocale() == null) {
    getLocalizer().setToDefault();
  }
  initializeTriggerables();
  dispatchFormEvent(Action.EVENT_XFORMS_READY);
}","/** 
 * meant to be called after deserialization and initialization of handlers
 * @param newInstance true if the form is to be used for a new entry interaction, false if it is using an existing IDataModel
 */
public void initialize(boolean newInstance,InstanceInitializationFactory factory){
  for (Enumeration en=formInstances.keys(); en.hasMoreElements(); ) {
    String instanceId=(String)en.nextElement();
    DataInstance instance=formInstances.get(instanceId);
    instance.initialize(factory,instanceId);
  }
  if (newInstance) {
    preloadInstance(mainInstance.getRoot());
  }
  if (getLocalizer() != null && getLocalizer().getLocale() == null) {
    getLocalizer().setToDefault();
  }
  dispatchFormEvent(Action.EVENT_XFORMS_READY);
  initializeTriggerables();
}",0.963777490297542
146878,"protected QuestionDef parseControl(IFormElement parent,Element e,int controlType){
  QuestionDef question=new QuestionDef();
  question.setID(serialQuestionID++);
  Vector usedAtts=new Vector();
  usedAtts.addElement(REF_ATTR);
  usedAtts.addElement(BIND_ATTR);
  usedAtts.addElement(APPEARANCE_ATTR);
  IDataReference dataRef=null;
  boolean refFromBind=false;
  String ref=e.getAttributeValue(null,REF_ATTR);
  String bind=e.getAttributeValue(null,BIND_ATTR);
  if (bind != null) {
    DataBinding binding=bindingsByID.get(bind);
    if (binding == null) {
      throw new XFormParseException(""String_Node_Str"" + bind + ""String_Node_Str"",e);
    }
    dataRef=binding.getReference();
    refFromBind=true;
  }
 else   if (ref != null) {
    dataRef=new XPathReference(ref);
  }
 else {
    if (controlType == Constants.CONTROL_TRIGGER) {
    }
 else {
      throw new XFormParseException(""String_Node_Str"",e);
    }
  }
  if (dataRef != null) {
    if (!refFromBind) {
      dataRef=getAbsRef(dataRef,parent);
    }
    question.setBind(dataRef);
    if (controlType == Constants.CONTROL_SELECT_ONE) {
      selectOnes.addElement((TreeReference)dataRef.getReference());
    }
 else     if (controlType == Constants.CONTROL_SELECT_MULTI) {
      selectMultis.addElement((TreeReference)dataRef.getReference());
    }
  }
  boolean isSelect=(controlType == Constants.CONTROL_SELECT_MULTI || controlType == Constants.CONTROL_SELECT_ONE);
  question.setControlType(controlType);
  question.setAppearanceAttr(e.getAttributeValue(null,APPEARANCE_ATTR));
  for (int i=0; i < e.getChildCount(); i++) {
    int type=e.getType(i);
    Element child=(type == Node.ELEMENT ? e.getElement(i) : null);
    String childName=(child != null ? child.getName() : null);
    if (LABEL_ELEMENT.equals(childName)) {
      parseQuestionLabel(question,child);
    }
 else     if (""String_Node_Str"".equals(childName)) {
      parseHint(question,child);
    }
 else     if (isSelect && ""String_Node_Str"".equals(childName)) {
      parseItem(question,child);
    }
 else     if (isSelect && ""String_Node_Str"".equals(childName)) {
      parseItemset(question,child,parent);
    }
  }
  if (isSelect) {
    if (question.getNumChoices() > 0 && question.getDynamicChoices() != null) {
      throw new XFormParseException(""String_Node_Str"");
    }
 else     if (question.getNumChoices() == 0 && question.getDynamicChoices() == null) {
      throw new XFormParseException(""String_Node_Str"");
    }
  }
  parent.addChild(question);
  if (XFormUtils.showUnusedAttributeWarning(e,usedAtts)) {
    System.out.println(XFormUtils.unusedAttWarning(e,usedAtts));
  }
  return question;
}","protected QuestionDef parseControl(IFormElement parent,Element e,int controlType){
  QuestionDef question=new QuestionDef();
  question.setID(serialQuestionID++);
  Vector usedAtts=new Vector();
  usedAtts.addElement(REF_ATTR);
  usedAtts.addElement(BIND_ATTR);
  usedAtts.addElement(APPEARANCE_ATTR);
  IDataReference dataRef=null;
  boolean refFromBind=false;
  String ref=e.getAttributeValue(null,REF_ATTR);
  String bind=e.getAttributeValue(null,BIND_ATTR);
  if (bind != null) {
    DataBinding binding=bindingsByID.get(bind);
    if (binding == null) {
      throw new XFormParseException(""String_Node_Str"" + bind + ""String_Node_Str"",e);
    }
    dataRef=binding.getReference();
    refFromBind=true;
  }
 else   if (ref != null) {
    try {
      dataRef=new XPathReference(ref);
    }
 catch (    RuntimeException el) {
      System.out.println(this.getVagueLocation(e));
      throw el;
    }
  }
 else {
    if (controlType == Constants.CONTROL_TRIGGER) {
    }
 else {
      throw new XFormParseException(""String_Node_Str"",e);
    }
  }
  if (dataRef != null) {
    if (!refFromBind) {
      dataRef=getAbsRef(dataRef,parent);
    }
    question.setBind(dataRef);
    if (controlType == Constants.CONTROL_SELECT_ONE) {
      selectOnes.addElement((TreeReference)dataRef.getReference());
    }
 else     if (controlType == Constants.CONTROL_SELECT_MULTI) {
      selectMultis.addElement((TreeReference)dataRef.getReference());
    }
  }
  boolean isSelect=(controlType == Constants.CONTROL_SELECT_MULTI || controlType == Constants.CONTROL_SELECT_ONE);
  question.setControlType(controlType);
  question.setAppearanceAttr(e.getAttributeValue(null,APPEARANCE_ATTR));
  for (int i=0; i < e.getChildCount(); i++) {
    int type=e.getType(i);
    Element child=(type == Node.ELEMENT ? e.getElement(i) : null);
    String childName=(child != null ? child.getName() : null);
    if (LABEL_ELEMENT.equals(childName)) {
      parseQuestionLabel(question,child);
    }
 else     if (""String_Node_Str"".equals(childName)) {
      parseHint(question,child);
    }
 else     if (isSelect && ""String_Node_Str"".equals(childName)) {
      parseItem(question,child);
    }
 else     if (isSelect && ""String_Node_Str"".equals(childName)) {
      parseItemset(question,child,parent);
    }
  }
  if (isSelect) {
    if (question.getNumChoices() > 0 && question.getDynamicChoices() != null) {
      throw new XFormParseException(""String_Node_Str"");
    }
 else     if (question.getNumChoices() == 0 && question.getDynamicChoices() == null) {
      throw new XFormParseException(""String_Node_Str"");
    }
  }
  parent.addChild(question);
  if (XFormUtils.showUnusedAttributeWarning(e,usedAtts)) {
    System.out.println(XFormUtils.unusedAttWarning(e,usedAtts));
  }
  return question;
}",0.9765725880833794
146879,"public static Alert showError(String title,String message,Image image,Displayable next,CommandListener customListener){
  final Alert alert=new Alert(title,message,image,AlertType.ERROR){
    int latches=0;
{
      getKeyStates();
    }
    protected boolean handleKeyPressed(    int keyCode,    int gameAction){
      return super.handleKeyPressed(keyCode,gameAction);
    }
    protected boolean handleKeyReleased(    int keyCode,    int gameAction){
      if (this.getKeyStates() > 0) {
        return super.handleKeyReleased(keyCode,gameAction);
      }
      return true;
    }
  }
;
  alert.setTimeout(Alert.FOREVER);
  if (customListener != null) {
    if (next != null) {
      System.err.println(""String_Node_Str"");
    }
    alert.setCommandListener(customListener);
  }
  if (next == null) {
    setView(alert);
  }
 else {
    loading.cancelLoading();
  }
  return alert;
}","public static Alert showError(String title,String message,Image image,Displayable next,CommandListener customListener){
  final Alert alert=new Alert(title,message,image,AlertType.ERROR){
    int latches=0;
{
      getKeyStates();
    }
    protected boolean handleKeyPressed(    int keyCode,    int gameAction){
      return super.handleKeyPressed(keyCode,gameAction);
    }
    protected boolean handleKeyReleased(    int keyCode,    int gameAction){
      if (this.getKeyStates() > 0) {
        return super.handleKeyReleased(keyCode,gameAction);
      }
      return true;
    }
  }
;
  alert.setTimeout(Alert.FOREVER);
  if (customListener != null) {
    if (next != null) {
      System.err.println(""String_Node_Str"");
    }
    alert.setCommandListener(customListener);
  }
  if (next == null) {
    setView(alert,true);
  }
 else {
    loading.cancelLoading();
  }
  return alert;
}",0.9971830985915492
146880,"public static void setView(Displayable d){
  loading.cancelLoading();
  Displayable old=display.getCurrent();
  display.setCurrent(d);
  if (old instanceof Screen) {
    try {
      old.addCommand(new Command(""String_Node_Str"",2,2));
      UiAccess.releaseResources((Screen)old);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","/** 
 * Sets the current displayable with the option to either clear or not clear the heavy resources from the current view 
 * @param d The new displayable to be viewed
 * @param savePreviousView false if resources should freed from thecurrent screen. True if those resources should be maintained. NOTE: if the current screen has major resources and True is set, those resources might need to be freed manually if any hanging references depend on them.
 */
public static void setView(Displayable d,boolean savePreviousView){
  loading.cancelLoading();
  Displayable old=display.getCurrent();
  display.setCurrent(d);
  if (!savePreviousView) {
    if (old instanceof Screen) {
      try {
        Command placeholder=new Command(""String_Node_Str"",2,2);
        old.addCommand(placeholder);
        UiAccess.releaseResources((Screen)old);
        old.removeCommand(placeholder);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
}",0.4897338403041825
146881,"private TreeElement cache(){
synchronized (cache) {
    if (cache.hasEntry(recordId)) {
      return cache.retrieve(recordId);
    }
    if (recordId == -1) {
      Vector<Integer> ids=storage.getIDsForValue(""String_Node_Str"",caseId);
      recordId=ids.elementAt(0).intValue();
    }
    TreeElement cacheBuilder=new TreeElement(""String_Node_Str"".intern());
    Case c=(Case)storage.read(recordId);
    caseId=c.getCaseId();
    cacheBuilder=new TreeElement(""String_Node_Str"".intern());
    cacheBuilder.setMult(this.mult);
    cacheBuilder.setAttribute(null,""String_Node_Str"".intern(),c.getCaseId());
    cacheBuilder.setAttribute(null,""String_Node_Str"".intern(),c.getTypeId());
    cacheBuilder.setAttribute(null,""String_Node_Str"".intern(),c.isClosed() ? ""String_Node_Str"".intern() : ""String_Node_Str"".intern());
    TreeElement scratch=new TreeElement(""String_Node_Str"".intern());
    scratch.setAnswer(new StringData(c.getName()));
    cacheBuilder.addChild(scratch);
    scratch=new TreeElement(""String_Node_Str"".intern());
    scratch.setAnswer(new DateData(c.getDateOpened()));
    cacheBuilder.addChild(scratch);
    for (Enumeration en=c.getProperties().keys(); en.hasMoreElements(); ) {
      String key=(String)en.nextElement();
      scratch=new TreeElement(key.intern());
      Object temp=c.getProperty(key);
      if (temp instanceof String) {
        scratch.setValue(new UncastData((String)temp));
      }
 else {
        scratch.setValue(PreloadUtils.wrapIndeterminedObject(temp));
      }
      cacheBuilder.addChild(scratch);
    }
    final boolean[] done=new boolean[]{false};
    TreeElement index=new TreeElement(""String_Node_Str"".intern()){
      public TreeElement getChild(      String name,      int multiplicity){
        TreeElement child=super.getChild(name.intern(),multiplicity);
        if (done[0] == false) {
          return child;
        }
        if (multiplicity >= 0 && child == null) {
          TreeElement emptyNode=new TreeElement(name.intern());
          this.addChild(emptyNode);
          emptyNode.setParent(this);
          return emptyNode;
        }
        return child;
      }
    }
;
    Vector<CaseIndex> indices=c.getIndices();
    for (    CaseIndex i : indices) {
      scratch=new TreeElement(i.getName());
      scratch.setAttribute(null,""String_Node_Str"".intern(),i.getTargetType().intern());
      scratch.setValue(new UncastData(i.getTarget()));
      index.addChild(scratch);
    }
    cacheBuilder.addChild(index);
    cacheBuilder.setParent(this.parent);
    done[0]=true;
    cache.register(recordId,cacheBuilder);
    return cacheBuilder;
  }
}","private TreeElement cache(){
synchronized (cache) {
    if (cache.hasEntry(recordId)) {
      return cache.retrieve(recordId);
    }
    if (recordId == -1) {
      Vector<Integer> ids=storage.getIDsForValue(""String_Node_Str"",caseId);
      recordId=ids.elementAt(0).intValue();
    }
    TreeElement cacheBuilder=new TreeElement(""String_Node_Str"".intern());
    Case c=(Case)storage.read(recordId);
    caseId=c.getCaseId();
    cacheBuilder=new TreeElement(""String_Node_Str"".intern());
    cacheBuilder.setMult(this.mult);
    cacheBuilder.setAttribute(null,""String_Node_Str"".intern(),c.getCaseId());
    cacheBuilder.setAttribute(null,""String_Node_Str"".intern(),c.getTypeId());
    cacheBuilder.setAttribute(null,""String_Node_Str"".intern(),c.isClosed() ? ""String_Node_Str"".intern() : ""String_Node_Str"".intern());
    cacheBuilder.setAttribute(null,""String_Node_Str"".intern(),c.getUserId());
    TreeElement scratch=new TreeElement(""String_Node_Str"".intern());
    scratch.setAnswer(new StringData(c.getName()));
    cacheBuilder.addChild(scratch);
    scratch=new TreeElement(""String_Node_Str"".intern());
    scratch.setAnswer(new DateData(c.getDateOpened()));
    cacheBuilder.addChild(scratch);
    for (Enumeration en=c.getProperties().keys(); en.hasMoreElements(); ) {
      String key=(String)en.nextElement();
      scratch=new TreeElement(key.intern());
      Object temp=c.getProperty(key);
      if (temp instanceof String) {
        scratch.setValue(new UncastData((String)temp));
      }
 else {
        scratch.setValue(PreloadUtils.wrapIndeterminedObject(temp));
      }
      cacheBuilder.addChild(scratch);
    }
    final boolean[] done=new boolean[]{false};
    TreeElement index=new TreeElement(""String_Node_Str"".intern()){
      public TreeElement getChild(      String name,      int multiplicity){
        TreeElement child=super.getChild(name.intern(),multiplicity);
        if (done[0] == false) {
          return child;
        }
        if (multiplicity >= 0 && child == null) {
          TreeElement emptyNode=new TreeElement(name.intern());
          this.addChild(emptyNode);
          emptyNode.setParent(this);
          return emptyNode;
        }
        return child;
      }
    }
;
    Vector<CaseIndex> indices=c.getIndices();
    for (    CaseIndex i : indices) {
      scratch=new TreeElement(i.getName());
      scratch.setAttribute(null,""String_Node_Str"".intern(),i.getTargetType().intern());
      scratch.setValue(new UncastData(i.getTarget()));
      index.addChild(scratch);
    }
    cacheBuilder.addChild(index);
    cacheBuilder.setParent(this.parent);
    done[0]=true;
    cache.register(recordId,cacheBuilder);
    return cacheBuilder;
  }
}",0.985316265060241
146882,"public TreeElementCache(int capacity){
  cache=new Hashtable<Integer,TreeElement>();
  this.capacityDesired=capacity;
  this.currentCapacity=capacityDesired;
  random=new Random();
  cacheList=new Vector<Integer>();
  totalMem=Runtime.getRuntime().freeMemory();
}","public TreeElementCache(int capacity){
  cache=new Hashtable<Integer,TreeElement>();
  this.capacityDesired=capacity;
  this.currentCapacity=capacityDesired;
  random=new Random();
  cacheList=new Vector<Integer>();
  Runtime.getRuntime().gc();
  totalMem=Runtime.getRuntime().freeMemory();
}",0.9477477477477476
146883,"public void register(int recordId,TreeElement item){
  long freeMemory=Runtime.getRuntime().freeMemory();
  double memory=freeMemory * 1.0 / totalMem;
  if (memory < .2) {
    Runtime.getRuntime().gc();
    freeMemory=Runtime.getRuntime().freeMemory();
    memory=freeMemory * 1.0 / totalMem;
  }
  if (memory < .2) {
    currentCapacity=Math.max(10,(int)(currentCapacity * .6));
    System.out.println(""String_Node_Str"" + currentCapacity);
    while (cache.size() > currentCapacity - 1) {
      randomPop();
    }
  }
  if (cache.size() == currentCapacity) {
    if (currentCapacity < capacityDesired && memory > .3) {
      currentCapacity+=(capacityDesired - currentCapacity) * .3;
      System.out.println(""String_Node_Str"" + currentCapacity);
    }
 else {
      for (int i=0; i < 3; ++i) {
        randomPop();
      }
    }
  }
  cache.put(new Integer(recordId),item);
  cacheList.addElement(new Integer(recordId));
}","public void register(int recordId,TreeElement item){
  long freeMemory=Runtime.getRuntime().freeMemory();
  double memory=freeMemory * 1.0 / totalMem;
  if (memory < .2) {
    Runtime.getRuntime().gc();
    freeMemory=Runtime.getRuntime().freeMemory();
    memory=freeMemory * 1.0 / totalMem;
  }
  if (memory < .2) {
    currentCapacity=Math.max(10,(int)(currentCapacity * .6));
    System.out.println(""String_Node_Str"" + currentCapacity);
    while (cache.size() > currentCapacity - 1) {
      randomPop();
    }
  }
  if (cache.size() == currentCapacity) {
    if (currentCapacity < capacityDesired && memory > .3) {
      currentCapacity++;
      System.out.println(""String_Node_Str"" + currentCapacity);
    }
 else {
      for (int i=0; i < 3; ++i) {
        randomPop();
      }
    }
  }
  cache.put(new Integer(recordId),item);
  cacheList.addElement(new Integer(recordId));
}",0.9767699115044248
146884,"private void processCase(TreeElement caseElement) throws MalformedCaseModelException {
  TreeElement caseIdAttribute=caseElement.getAttribute(null,""String_Node_Str"");
  if (caseIdAttribute == null) {
    throw new MalformedCaseModelException(""String_Node_Str"" + caseElement.getRef().toString(true),""String_Node_Str"");
  }
  if (caseIdAttribute.getValue() == null) {
    throw new MalformedCaseModelException(""String_Node_Str"" + caseElement.getRef().toString(true),""String_Node_Str"");
  }
  String caseId=caseIdAttribute.getValue().uncast().getString();
  TreeElement dateModified=caseElement.getAttribute(null,""String_Node_Str"");
  if (dateModified == null) {
    throw new MalformedCaseModelException(""String_Node_Str"" + caseElement.getRef().toString(true),""String_Node_Str"");
  }
  if (dateModified.getValue() == null) {
    throw new MalformedCaseModelException(""String_Node_Str"" + caseElement.getRef().toString(true),""String_Node_Str"");
  }
  Date date=(Date)(new DateTimeData().cast(dateModified.getValue().uncast())).getValue();
  for (int i=0; i < caseElement.getNumChildren(); ++i) {
    TreeElement kid=caseElement.getChildAt(i);
    if (!caseElement.isRelevant()) {
      continue;
    }
    if (kid.getName().equals(""String_Node_Str"")) {
      if (kid.isRelevant()) {
        c=processCaseCreate(kid,caseId,date);
      }
    }
 else     if (kid.getName().equals(""String_Node_Str"")) {
      if (c == null) {
        c=getCase(caseId);
      }
      if (kid.isRelevant()) {
        processCaseMutate(kid,c,date);
      }
    }
 else     if (kid.getName().equals(""String_Node_Str"")) {
      if (c == null) {
        c=getCase(caseId);
      }
      if (kid.isRelevant()) {
        processCaseClose(kid,c,date);
      }
    }
 else     if (kid.getName().equals(""String_Node_Str"")) {
      if (c == null) {
        c=getCase(caseId);
      }
      if (kid.isRelevant()) {
        processCaseIndex(kid,c);
      }
    }
  }
}","private void processCase(TreeElement caseElement) throws MalformedCaseModelException {
  c=null;
  TreeElement caseIdAttribute=caseElement.getAttribute(null,""String_Node_Str"");
  if (caseIdAttribute == null) {
    throw new MalformedCaseModelException(""String_Node_Str"" + caseElement.getRef().toString(true),""String_Node_Str"");
  }
  if (caseIdAttribute.getValue() == null) {
    throw new MalformedCaseModelException(""String_Node_Str"" + caseElement.getRef().toString(true),""String_Node_Str"");
  }
  String caseId=caseIdAttribute.getValue().uncast().getString();
  TreeElement dateModified=caseElement.getAttribute(null,""String_Node_Str"");
  if (dateModified == null) {
    throw new MalformedCaseModelException(""String_Node_Str"" + caseElement.getRef().toString(true),""String_Node_Str"");
  }
  if (dateModified.getValue() == null) {
    throw new MalformedCaseModelException(""String_Node_Str"" + caseElement.getRef().toString(true),""String_Node_Str"");
  }
  Date date=(Date)(new DateTimeData().cast(dateModified.getValue().uncast())).getValue();
  for (int i=0; i < caseElement.getNumChildren(); ++i) {
    TreeElement kid=caseElement.getChildAt(i);
    if (!caseElement.isRelevant()) {
      continue;
    }
    if (kid.getName().equals(""String_Node_Str"")) {
      if (kid.isRelevant()) {
        c=processCaseCreate(kid,caseId,date);
      }
    }
 else     if (kid.getName().equals(""String_Node_Str"")) {
      if (c == null) {
        c=getCase(caseId);
      }
      if (kid.isRelevant()) {
        processCaseMutate(kid,c,date);
      }
    }
 else     if (kid.getName().equals(""String_Node_Str"")) {
      if (c == null) {
        c=getCase(caseId);
      }
      if (kid.isRelevant()) {
        processCaseClose(kid,c,date);
      }
    }
 else     if (kid.getName().equals(""String_Node_Str"")) {
      if (c == null) {
        c=getCase(caseId);
      }
      if (kid.isRelevant()) {
        processCaseIndex(kid,c);
      }
    }
  }
}",0.9974173553719008
146885,"public int indexOfKey(Object key){
  return orderedKeys.indexOf(key);
}","public int indexOfKey(K key){
  return orderedKeys.indexOf(key);
}",0.948905109489051
146886,"public OrderedHashtable(int initialCapacity){
  super(initialCapacity);
  orderedKeys=new Vector(initialCapacity);
}","public OrderedHashtable(int initialCapacity){
  super(initialCapacity);
  orderedKeys=new Vector<K>(initialCapacity);
}",0.9872340425531916
146887,"public Object put(Object key,Object value){
  if (key == null) {
    throw new NullPointerException();
  }
  int i=orderedKeys.indexOf(key);
  if (i == -1) {
    orderedKeys.addElement(key);
  }
 else {
    orderedKeys.setElementAt(key,i);
  }
  return super.put(key,value);
}","public V put(K key,V value){
  if (key == null) {
    throw new NullPointerException();
  }
  int i=orderedKeys.indexOf(key);
  if (i == -1) {
    orderedKeys.addElement(key);
  }
 else {
    orderedKeys.setElementAt(key,i);
  }
  return super.put(key,value);
}",0.9422718808193667
146888,"public Object remove(Object key){
  orderedKeys.removeElement(key);
  return super.remove(key);
}","public V remove(Object key){
  orderedKeys.removeElement((K)key);
  return super.remove(key);
}",0.9479166666666666
146889,"/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(DataInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(model,evalContext,args,argVals);
  }
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.TRUE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.FALSE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toBoolean(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toNumeric(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toInt(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toString(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDate(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolNot(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolStr(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return dateStr(argVals[0],argVals[1]);
  }
 else   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
    return multiSelected(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return countSelected(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return (!isNull(argVals[0]) ? argVals[0] : argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return count(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    if (argVals[0] instanceof XPathNodeset) {
      return sum(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return DateUtils.roundDate(new Date());
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Date();
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
      return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return join(""String_Node_Str"",argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
      return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
    }
 else {
      return join(argVals[0],subsetArgList(argVals,1));
    }
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 2 || args.length == 3)) {
    return substring(argVals[0],argVals[1],args.length == 3 ? argVals[2] : null);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return stringLength(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2) {
    if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
      return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
    }
 else {
      return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
    if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
      Object[] factors=((XPathNodeset)argVals[2]).toArgList();
      Object[] weights=((XPathNodeset)argVals[3]).toArgList();
      if (factors.length != weights.length) {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
      return checklistWeighted(argVals[0],argVals[1],factors,weights);
    }
 else {
      return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return regex(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    return argVals[0];
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Double(MathUtils.getRand().nextDouble());
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
    if (args.length == 0) {
      return PropertyUtils.genUUID();
    }
    int len=toInt(argVals[0]).intValue();
    return PropertyUtils.genGUID(len);
  }
 else {
    IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
    if (handler != null) {
      return evalCustomFunction(handler,argVals,evalContext);
    }
 else {
      throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}","/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(DataInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(model,evalContext,args,argVals);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    argVals[0]=XPathFuncExpr.unpack(args[0].eval(model,evalContext));
    if (!isNull(argVals[0])) {
      return argVals[0];
    }
 else {
      argVals[1]=args[1].eval(model,evalContext);
      return argVals[1];
    }
  }
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.TRUE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.FALSE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toBoolean(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toNumeric(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toInt(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toString(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDate(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolNot(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolStr(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return dateStr(argVals[0],argVals[1]);
  }
 else   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
    return multiSelected(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return countSelected(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return count(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    if (argVals[0] instanceof XPathNodeset) {
      return sum(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (argVals[0] instanceof XPathNodeset) {
      return max(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return max(argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return DateUtils.roundDate(new Date());
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Date();
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
      return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return join(""String_Node_Str"",argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
      return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
    }
 else {
      return join(argVals[0],subsetArgList(argVals,1));
    }
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 2 || args.length == 3)) {
    return substring(argVals[0],argVals[1],args.length == 3 ? argVals[2] : null);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return stringLength(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2) {
    if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
      return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
    }
 else {
      return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
    if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
      Object[] factors=((XPathNodeset)argVals[2]).toArgList();
      Object[] weights=((XPathNodeset)argVals[3]).toArgList();
      if (factors.length != weights.length) {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
      return checklistWeighted(argVals[0],argVals[1],factors,weights);
    }
 else {
      return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return regex(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    return argVals[0];
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Double(MathUtils.getRand().nextDouble());
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
    if (args.length == 0) {
      return PropertyUtils.genUUID();
    }
    int len=toInt(argVals[0]).intValue();
    return PropertyUtils.genGUID(len);
  }
 else {
    IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
    if (handler != null) {
      return evalCustomFunction(handler,argVals,evalContext);
    }
 else {
      throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}",0.9348322501317408
146890,"/** 
 * convert a value to a number using xpath's type conversion rules (note that xpath itself makes no distinction between integer and floating point numbers)
 * @param o
 * @return
 */
public static Double toNumeric(Object o){
  Double val=null;
  o=unpack(o);
  if (o instanceof Boolean) {
    val=new Double(((Boolean)o).booleanValue() ? 1 : 0);
  }
 else   if (o instanceof Double) {
    val=(Double)o;
  }
 else   if (o instanceof String) {
    String s=(String)o;
    double d;
    try {
      s=s.trim();
      for (int i=0; i < s.length(); i++) {
        char c=s.charAt(i);
        if (c != '-' && c != '.' && (c < '0' || c > '9'))         throw new NumberFormatException();
      }
      d=Double.parseDouble(s);
      val=new Double(d);
    }
 catch (    NumberFormatException nfe) {
      val=new Double(Double.NaN);
    }
  }
 else   if (o instanceof Date) {
    val=new Double(DateUtils.daysSinceEpoch((Date)o));
  }
 else   if (o instanceof IExprDataType) {
    val=((IExprDataType)o).toNumeric();
  }
  if (val != null) {
    return val;
  }
 else {
    throw new XPathTypeMismatchException(""String_Node_Str"");
  }
}","/** 
 * convert a value to a number using xpath's type conversion rules (note that xpath itself makes no distinction between integer and floating point numbers)
 * @param o
 * @return
 */
public static Double toNumeric(Object o){
  Double val=null;
  o=unpack(o);
  if (o instanceof Boolean) {
    val=new Double(((Boolean)o).booleanValue() ? 1 : 0);
  }
 else   if (o instanceof Double) {
    val=(Double)o;
  }
 else   if (o instanceof String) {
    String s=(String)o;
    double d;
    try {
      s=s.trim();
      for (int i=0; i < s.length(); i++) {
        char c=s.charAt(i);
        if (c != '-' && c != '.' && (c < '0' || c > '9'))         throw new NumberFormatException();
      }
      d=Double.parseDouble(s);
      val=new Double(d);
    }
 catch (    NumberFormatException nfe) {
      val=new Double(Double.NaN);
    }
  }
 else   if (o instanceof Date) {
    val=new Double(DateUtils.daysSinceEpoch((Date)o));
  }
 else   if (o instanceof IExprDataType) {
    val=((IExprDataType)o).toNumeric();
  }
  if (val != null) {
    return val;
  }
 else {
    throw new XPathTypeMismatchException(""String_Node_Str"" + (o == null ? ""String_Node_Str"" : o.toString()) + ""String_Node_Str"");
  }
}",0.9704749679075738
146891,"public XPathNodeset eval(DataInstance m,EvaluationContext ec){
  TreeReference genericRef=getReference();
  TreeReference ref=genericRef.contextualize(ec.getContextRef());
  if (ref.getInstanceName() != null && ref.isAbsolute()) {
    DataInstance nonMain=ec.getInstance(ref.getInstanceName());
    if (nonMain != null) {
      m=nonMain;
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"" + ref.toString(true) + ""String_Node_Str"");
    }
  }
  if (ref.isAbsolute() && m.getTemplatePath(ref) == null) {
    throw new XPathTypeMismatchException(""String_Node_Str"" + genericRef.toString() + ""String_Node_Str"");
  }
  Vector<TreeReference> nodesetRefs=ec.expandReference(ref);
  for (int i=0; i < nodesetRefs.size(); i++) {
    if (!m.resolveReference((TreeReference)nodesetRefs.elementAt(i)).isRelevant()) {
      nodesetRefs.removeElementAt(i);
      i--;
    }
  }
  return new XPathNodeset(nodesetRefs,m,ec);
}","public XPathNodeset eval(DataInstance m,EvaluationContext ec){
  TreeReference genericRef=getReference();
  TreeReference ref=genericRef.contextualize(ec.getContextRef());
  if (ref.getInstanceName() != null && ref.isAbsolute()) {
    DataInstance nonMain=ec.getInstance(ref.getInstanceName());
    if (nonMain != null) {
      m=nonMain;
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"" + ref.toString(true) + ""String_Node_Str"");
    }
  }
 else {
    m=ec.getMainInstance();
  }
  if (ref.isAbsolute() && m.getTemplatePath(ref) == null) {
    throw new XPathTypeMismatchException(""String_Node_Str"" + genericRef.toString() + ""String_Node_Str"");
  }
  Vector<TreeReference> nodesetRefs=ec.expandReference(ref);
  for (int i=0; i < nodesetRefs.size(); i++) {
    if (!m.resolveReference((TreeReference)nodesetRefs.elementAt(i)).isRelevant()) {
      nodesetRefs.removeElementAt(i);
      i--;
    }
  }
  return new XPathNodeset(nodesetRefs,m,ec);
}",0.979035639412998
146892,"public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL) {
    try {
      if (ref.doesBinaryExist()) {
        localReference=ref.getURI();
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        return true;
      }
 else {
        return false;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
  }
 else   if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_REMOTE) {
    try {
      if (!ref.doesBinaryExist()) {
        return false;
      }
      InputStream incoming=ref.getStream();
      if (incoming == null) {
        return false;
      }
      String uri=ref.getURI();
      int lastslash=uri.lastIndexOf('/');
      uri=uri.substring(lastslash == -1 ? 0 : lastslash + 1);
      int copy=0;
      try {
        Reference destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + uri);
        while (destination.doesBinaryExist()) {
          copy++;
          String newUri=uri + ""String_Node_Str"" + copy;
          destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + newUri);
        }
        if (destination.isReadOnly()) {
          return cache(incoming,r,table);
        }
        OutputStream output=destination.getOutputStream();
        StreamsUtil.writeFromInputToOutput(incoming,output);
        output.close();
        this.localReference=destination.getURI();
        if (upgrade) {
          table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
        }
 else {
          table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        }
        return true;
      }
 catch (      InvalidReferenceException e) {
        return cache(incoming,r,table);
      }
    }
 catch (    IOException e) {
      Logger.exception(e);
      return false;
    }
  }
  return false;
}","public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL) {
    try {
      if (ref.doesBinaryExist()) {
        localReference=ref.getURI();
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        return true;
      }
 else {
        return false;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
  }
 else   if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_REMOTE) {
    try {
      if (!ref.doesBinaryExist()) {
        return false;
      }
      InputStream incoming=ref.getStream();
      if (incoming == null) {
        return false;
      }
      String uri=ref.getURI();
      int lastslash=uri.lastIndexOf('/');
      uri=uri.substring(lastslash == -1 ? 0 : lastslash + 1);
      String cleanUri=""String_Node_Str"";
      for (int i=0; i < uri.length(); ++i) {
        char c=uri.charAt(i);
        if (valid.indexOf(c) == -1) {
          cleanUri+=""String_Node_Str"";
        }
 else {
          cleanUri+=c;
        }
      }
      uri=cleanUri;
      int copy=0;
      try {
        Reference destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + uri);
        while (destination.doesBinaryExist()) {
          copy++;
          String newUri=uri + ""String_Node_Str"" + copy;
          destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + newUri);
        }
        if (destination.isReadOnly()) {
          return cache(incoming,r,table);
        }
        OutputStream output=destination.getOutputStream();
        StreamsUtil.writeFromInputToOutput(incoming,output);
        output.close();
        this.localReference=destination.getURI();
        if (upgrade) {
          table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
        }
 else {
          table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        }
        return true;
      }
 catch (      InvalidReferenceException e) {
        return cache(incoming,r,table);
      }
    }
 catch (    IOException e) {
      Logger.exception(e);
      return false;
    }
  }
  return false;
}",0.9354226020892688
146893,"public Object pivot(FormInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  Object aval=a.pivot(model,evalContext,pivots,sentinal);
  Object bval=b.pivot(model,evalContext,pivots,sentinal);
  if (aval == sentinal || bval == sentinal) {
    throw new UnpivotableExpressionException();
  }
  if (aval == null || bval == null) {
    return null;
  }
  return this.eval(model,evalContext);
}","public Object pivot(DataInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  Object aval=a.pivot(model,evalContext,pivots,sentinal);
  Object bval=b.pivot(model,evalContext,pivots,sentinal);
  if (aval == sentinal || bval == sentinal) {
    throw new UnpivotableExpressionException();
  }
  if (aval == null || bval == null) {
    return null;
  }
  return this.eval(model,evalContext);
}",0.9913232104121475
146894,"public Object pivot(FormInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  Object aval=a.pivot(model,evalContext,pivots,sentinal);
  Object bval=b.pivot(model,evalContext,pivots,sentinal);
  if (handled(aval,bval,sentinal,pivots) || handled(bval,aval,sentinal,pivots)) {
    return null;
  }
  return this.eval(model,evalContext);
}","public Object pivot(DataInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  Object aval=a.pivot(model,evalContext,pivots,sentinal);
  Object bval=b.pivot(model,evalContext,pivots,sentinal);
  if (handled(aval,bval,sentinal,pivots) || handled(bval,aval,sentinal,pivots)) {
    return null;
  }
  return this.eval(model,evalContext);
}",0.9901719901719902
146895,"public Object pivot(FormInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  throw new UnpivotableExpressionException();
}","public Object pivot(DataInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  throw new UnpivotableExpressionException();
}",0.9794871794871794
146896,"/** 
 */
public Object pivot(FormInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  String[] identities=new String[]{""String_Node_Str""};
  boolean id=false;
  for (  String identity : identities) {
    if (identity.equals(name)) {
      id=true;
    }
  }
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].pivot(model,evalContext,pivots,sentinal);
  }
  boolean pivoted=false;
  for (int i=0; i < argVals.length; ++i) {
    if (argVals[i] == null) {
      pivoted=true;
    }
 else     if (sentinal.equals(argVals[i])) {
      if (id) {
        return sentinal;
      }
 else {
        throw new UnpivotableExpressionException();
      }
    }
  }
  if (pivoted) {
    if (id) {
      return null;
    }
 else {
      throw new UnpivotableExpressionException();
    }
  }
  return eval(model,evalContext);
}","/** 
 */
public Object pivot(DataInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  String[] identities=new String[]{""String_Node_Str""};
  boolean id=false;
  for (  String identity : identities) {
    if (identity.equals(name)) {
      id=true;
    }
  }
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].pivot(model,evalContext,pivots,sentinal);
  }
  boolean pivoted=false;
  for (int i=0; i < argVals.length; ++i) {
    if (argVals[i] == null) {
      pivoted=true;
    }
 else     if (sentinal.equals(argVals[i])) {
      if (id) {
        return sentinal;
      }
 else {
        throw new UnpivotableExpressionException();
      }
    }
  }
  if (pivoted) {
    if (id) {
      return null;
    }
 else {
      throw new UnpivotableExpressionException();
    }
  }
  return eval(model,evalContext);
}",0.9958677685950412
146897,"public Object pivot(FormInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  TreeReference ref=this.getReference();
  if (ref.equals(sentinal) || (ref.getRefLevel() == 0)) {
    return sentinal;
  }
 else {
    return this.eval(model,evalContext);
  }
}","public Object pivot(DataInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  TreeReference ref=this.getReference();
  if (ref.equals(sentinal) || (ref.getRefLevel() == 0)) {
    return sentinal;
  }
 else {
    return this.eval(model,evalContext);
  }
}",0.9877300613496932
146898,"public String[] getSortFields(){
  String[] names=getSortFieldNames();
  String[] ret=new String[names.length];
  int defaultSort=getSortFieldDefault();
  if (defaultSort != -1) {
    ret[0]=String.valueOf(defaultSort);
    ret[1]=""String_Node_Str"";
  }
 else {
    ret[0]=""String_Node_Str"";
  }
  for (int i=1; i < ret.length; ++i) {
    if (defaultSort != i) {
      ret[i]=String.valueOf(i);
    }
  }
  return ret;
}","public String[] getSortFields(){
  String[] names=getSortFieldNames();
  String[] ret=new String[names.length];
  int defaultSort=getSortFieldDefault();
  if (defaultSort != -1) {
    ret[0]=String.valueOf(defaultSort);
    ret[1]=""String_Node_Str"";
  }
 else {
    ret[0]=""String_Node_Str"";
  }
  int position=defaultSort == -1 ? 1 : 2;
  for (int i=1; i < ret.length; ++i) {
    if (defaultSort != i) {
      ret[position]=String.valueOf(i);
      position++;
    }
  }
  return ret;
}",0.9239250275633958
146899,"public String[] getSortFieldNames(){
  Vector<String> fields=new Vector<String>();
  fields.addElement(Localization.get(""String_Node_Str""));
  for (  String s : getHeaders(false)) {
    if (s == null || ""String_Node_Str"".equals(s)) {
      continue;
    }
    fields.addElement(s);
  }
  String[] ret=new String[fields.size()];
  for (int i=0; i < ret.length; ++i) {
    ret[i]=fields.elementAt(i);
  }
  return ret;
}","public String[] getSortFieldNames(){
  Vector<String> fields=new Vector<String>();
  int sortField=this.getSortFieldDefault() - 1;
  String[] headers=getHeaders(false);
  if (sortField == -1) {
    fields.addElement(Localization.get(""String_Node_Str""));
  }
 else {
    fields.addElement(headers[sortField]);
    fields.addElement(Localization.get(""String_Node_Str""));
  }
  for (int i=0; i < headers.length; ++i) {
    if (i == sortField) {
      continue;
    }
    String s=headers[i];
    if (s == null || ""String_Node_Str"".equals(s)) {
      continue;
    }
    fields.addElement(s);
  }
  String[] ret=new String[fields.size()];
  for (int i=0; i < ret.length; ++i) {
    ret[i]=fields.elementAt(i);
  }
  return ret;
}",0.668416447944007
146900,"private int getSortFieldDefault(){
  int topIndex=shortDetail.getDefaultSort();
  if (topIndex == -1) {
    return -1;
  }
  int index=-1;
  Vector<String> fields=new Vector<String>();
  fields.addElement(Localization.get(""String_Node_Str""));
  String[] headers=getHeaders(false);
  for (int i=0; i < headers.length; ++i) {
    if (i == topIndex) {
      return fields.size();
    }
  }
  return -1;
}","private int getSortFieldDefault(){
  int topIndex=shortDetail.getDefaultSort();
  if (topIndex == -1) {
    return -1;
  }
  int index=-1;
  Vector<String> fields=new Vector<String>();
  fields.addElement(Localization.get(""String_Node_Str""));
  String[] headers=getHeaders(false);
  for (int i=0; i < headers.length; ++i) {
    fields.addElement(headers[i]);
    if (i == topIndex) {
      return fields.size() - 1;
    }
  }
  return -1;
}",0.9536266349583828
146901,"private void expandReference(TreeReference sourceRef,AbstractTreeElement node,Vector<TreeReference> refs,boolean includeTemplates){
  int depth=node.getDepth();
  Vector<XPathExpression> predicates=null;
  if (depth == sourceRef.size()) {
    refs.addElement(node.getRef());
  }
 else {
    String name=sourceRef.getName(depth);
    predicates=sourceRef.getPredicate(depth);
    int mult=sourceRef.getMultiplicity(depth);
    Vector<AbstractTreeElement> set=new Vector<AbstractTreeElement>();
    if (node.getNumChildren() > 0) {
      if (mult == TreeReference.INDEX_UNBOUND) {
        int count=node.getChildMultiplicity(name);
        for (int i=0; i < count; i++) {
          AbstractTreeElement child=node.getChild(name,i);
          if (child != null) {
            set.addElement(child);
          }
 else {
            throw new IllegalStateException();
          }
        }
        if (includeTemplates) {
          AbstractTreeElement template=node.getChild(name,TreeReference.INDEX_TEMPLATE);
          if (template != null) {
            set.addElement(template);
          }
        }
      }
 else       if (mult != TreeReference.INDEX_ATTRIBUTE) {
        AbstractTreeElement child=node.getChild(name,mult);
        if (child != null) {
          set.addElement(child);
        }
      }
    }
    if (mult == TreeReference.INDEX_ATTRIBUTE) {
      AbstractTreeElement attribute=node.getAttribute(null,name);
      if (attribute != null) {
        set.addElement(attribute);
      }
    }
    for (Enumeration e=set.elements(); e.hasMoreElements(); ) {
      AbstractTreeElement treeElement=(AbstractTreeElement)e.nextElement();
      if (predicates != null) {
        TreeReference treeRef=treeElement.getRef();
        boolean passedAll=true;
        for (        XPathExpression xpe : predicates) {
          EvaluationContext evalContext=new EvaluationContext(this,treeRef);
          Object o=xpe.eval(instance,evalContext);
          if (o instanceof Boolean) {
            boolean passed=((Boolean)o).booleanValue();
            if (!passed) {
              passedAll=false;
              break;
            }
          }
        }
        if (passedAll) {
          expandReference(sourceRef,treeElement,refs,includeTemplates);
        }
      }
 else {
        expandReference(sourceRef,treeElement,refs,includeTemplates);
      }
    }
  }
}","private void expandReference(TreeReference sourceRef,AbstractTreeElement node,Vector<TreeReference> refs,boolean includeTemplates){
  int depth=node.getDepth();
  Vector<XPathExpression> predicates=null;
  if (depth == sourceRef.size()) {
    refs.addElement(node.getRef());
  }
 else {
    String name=sourceRef.getName(depth);
    predicates=sourceRef.getPredicate(depth);
    int mult=sourceRef.getMultiplicity(depth);
    Vector<AbstractTreeElement> set=new Vector<AbstractTreeElement>();
    if (node.hasChildren()) {
      if (mult == TreeReference.INDEX_UNBOUND) {
        int count=node.getChildMultiplicity(name);
        for (int i=0; i < count; i++) {
          AbstractTreeElement child=node.getChild(name,i);
          if (child != null) {
            set.addElement(child);
          }
 else {
            throw new IllegalStateException();
          }
        }
        if (includeTemplates) {
          AbstractTreeElement template=node.getChild(name,TreeReference.INDEX_TEMPLATE);
          if (template != null) {
            set.addElement(template);
          }
        }
      }
 else       if (mult != TreeReference.INDEX_ATTRIBUTE) {
        AbstractTreeElement child=node.getChild(name,mult);
        if (child != null) {
          set.addElement(child);
        }
      }
    }
    if (mult == TreeReference.INDEX_ATTRIBUTE) {
      AbstractTreeElement attribute=node.getAttribute(null,name);
      if (attribute != null) {
        set.addElement(attribute);
      }
    }
    for (Enumeration e=set.elements(); e.hasMoreElements(); ) {
      AbstractTreeElement treeElement=(AbstractTreeElement)e.nextElement();
      if (predicates != null) {
        TreeReference treeRef=treeElement.getRef();
        boolean passedAll=true;
        for (        XPathExpression xpe : predicates) {
          EvaluationContext evalContext=new EvaluationContext(this,treeRef);
          Object o=xpe.eval(instance,evalContext);
          if (o instanceof Boolean) {
            boolean passed=((Boolean)o).booleanValue();
            if (!passed) {
              passedAll=false;
              break;
            }
          }
        }
        if (passedAll) {
          expandReference(sourceRef,treeElement,refs,includeTemplates);
        }
      }
 else {
        expandReference(sourceRef,treeElement,refs,includeTemplates);
      }
    }
  }
}",0.9972498413370002
146902,"public Object getValue(){
  return new Integer(n);
}","public Object getValue(){
  return DataUtil.integer(n);
}",0.8623853211009175
146903,"public UncastData uncast(){
  return new UncastData(new Integer(n).toString());
}","public UncastData uncast(){
  return new UncastData(DataUtil.integer(n).toString());
}",0.9101796407185628
146904,"public Vector<XPathExpression> getPredicate(int key){
  return predicates.get(new Integer(key));
}","public Vector<XPathExpression> getPredicate(int key){
  return predicates.get(DataUtil.integer(key));
}",0.9253731343283582
146905,"public int hashCode(){
  int hash=(new Integer(refLevel)).hashCode();
  for (int i=0; i < size(); i++) {
    Integer mult=new Integer(getMultiplicity(i));
    if (i == 0 && mult.intValue() == INDEX_UNBOUND)     mult=new Integer(0);
    hash^=getName(i).hashCode();
    hash^=mult.hashCode();
  }
  return hash;
}","public int hashCode(){
  int hash=(new Integer(refLevel)).hashCode();
  for (int i=0; i < size(); i++) {
    Integer mult=DataUtil.integer(getMultiplicity(i));
    if (i == 0 && mult.intValue() == INDEX_UNBOUND)     mult=DataUtil.integer(0);
    hash^=getName(i).hashCode();
    hash^=mult.hashCode();
  }
  return hash;
}",0.9526813880126184
146906,"public void add(String name,int index){
  names.addElement(name);
  multiplicity.addElement(new Integer(index));
}","public void add(String name,int index){
  names.addElement(name);
  multiplicity.addElement(DataUtil.integer(index));
}",0.9356223175965666
146907,"public TreeReference(){
  names=new Vector(0);
  multiplicity=new Vector(0);
  predicates=new Hashtable<Integer,Vector<XPathExpression>>();
  instanceName=null;
}","public TreeReference(){
  names=new Vector(0);
  multiplicity=new Vector(0);
  predicates=new Hashtable<Integer,Vector<XPathExpression>>(0);
  instanceName=null;
}",0.9969230769230768
146908,"public void setMultiplicity(int i,int mult){
  multiplicity.setElementAt(new Integer(mult),i);
}","public void setMultiplicity(int i,int mult){
  multiplicity.setElementAt(DataUtil.integer(mult),i);
}",0.9238578680203046
146909,"public void addPredicate(int key,Vector<XPathExpression> xpe){
  predicates.put(new Integer(key),xpe);
}","public void addPredicate(int key,Vector<XPathExpression> xpe){
  predicates.put(DataUtil.integer(key),xpe);
}",0.9295774647887324
146910,"private static void initTypeMappings(){
  typeMappings=new Hashtable<String,Integer>();
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_TEXT));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_INTEGER));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_LONG));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_INTEGER));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_DATE_TIME));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_DATE));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_TIME));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_BOOLEAN));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_CHOICE));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_CHOICE_LIST));
  typeMappings.put(SELECTONE,new Integer(Constants.DATATYPE_CHOICE));
  typeMappings.put(SELECT,new Integer(Constants.DATATYPE_CHOICE_LIST));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_GEOPOINT));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_BARCODE));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_BINARY));
}","private static void initTypeMappings(){
  typeMappings=new Hashtable<String,Integer>();
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_TEXT));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_INTEGER));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_LONG));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_INTEGER));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DATE_TIME));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DATE));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_TIME));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_BOOLEAN));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_CHOICE));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_CHOICE_LIST));
  typeMappings.put(SELECTONE,DataUtil.integer(Constants.DATATYPE_CHOICE));
  typeMappings.put(SELECT,DataUtil.integer(Constants.DATATYPE_CHOICE_LIST));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_GEOPOINT));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_BARCODE));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_BINARY));
}",0.6725304465493911
146911,"private static void loadInstanceData(Element node,TreeElement cur,FormDef f){
  int numChildren=node.getChildCount();
  boolean hasElements=false;
  for (int i=0; i < numChildren; i++) {
    if (node.getType(i) == Node.ELEMENT) {
      hasElements=true;
      break;
    }
  }
  if (hasElements) {
    Hashtable<String,Integer> multiplicities=new Hashtable<String,Integer>();
    for (int i=0; i < numChildren; i++) {
      if (node.getType(i) == Node.ELEMENT) {
        Element child=node.getElement(i);
        String name=child.getName();
        int index;
        boolean isTemplate=(child.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str"") != null);
        if (isTemplate) {
          index=TreeReference.INDEX_TEMPLATE;
        }
 else {
          Integer mult=multiplicities.get(name);
          index=(mult == null ? 0 : mult.intValue() + 1);
          multiplicities.put(name,new Integer(index));
        }
        loadInstanceData(child,cur.getChild(name,index),f);
      }
    }
  }
 else {
    String text=getXMLText(node,false);
    if (text != null && text.trim().length() > 0) {
      cur.setValue(XFormAnswerDataParser.getAnswerData(text,cur.getDataType(),ghettoGetQuestionDef(cur.getDataType(),f,cur.getRef())));
    }
  }
}","private static void loadInstanceData(Element node,TreeElement cur,FormDef f){
  int numChildren=node.getChildCount();
  boolean hasElements=false;
  for (int i=0; i < numChildren; i++) {
    if (node.getType(i) == Node.ELEMENT) {
      hasElements=true;
      break;
    }
  }
  if (hasElements) {
    Hashtable<String,Integer> multiplicities=new Hashtable<String,Integer>();
    for (int i=0; i < numChildren; i++) {
      if (node.getType(i) == Node.ELEMENT) {
        Element child=node.getElement(i);
        String name=child.getName();
        int index;
        boolean isTemplate=(child.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str"") != null);
        if (isTemplate) {
          index=TreeReference.INDEX_TEMPLATE;
        }
 else {
          Integer mult=multiplicities.get(name);
          index=(mult == null ? 0 : mult.intValue() + 1);
          multiplicities.put(name,DataUtil.integer(index));
        }
        loadInstanceData(child,cur.getChild(name,index),f);
      }
    }
  }
 else {
    String text=getXMLText(node,false);
    if (text != null && text.trim().length() > 0) {
      cur.setValue(XFormAnswerDataParser.getAnswerData(text,cur.getDataType(),ghettoGetQuestionDef(cur.getDataType(),f,cur.getRef())));
    }
  }
}",0.994002399040384
146912,"public static void addDataType(String type,int dataType){
  typeMappings.put(type,new Integer(dataType));
}","public static void addDataType(String type,int dataType){
  typeMappings.put(type,DataUtil.integer(dataType));
}",0.9315068493150684
146913,"public RMSStorageIterator(RMSStorageUtility store,Hashtable index){
  SortedIntSet IDs=new SortedIntSet();
  for (Enumeration e=index.keys(); e.hasMoreElements(); ) {
    IDs.add(((Integer)e.nextElement()).intValue());
  }
  this.index=index;
  this.store=store;
  this.IDs=IDs.getVector();
  pos=0;
  valid=true;
}","public RMSStorageIterator(RMSStorageUtility store,IdIndex index){
  SortedIntSet IDs=new SortedIntSet();
  for (Enumeration e=index.getIndexTable().keys(); e.hasMoreElements(); ) {
    IDs.add(((Integer)e.nextElement()).intValue());
  }
  this.index=index;
  this.store=store;
  this.IDs=IDs.getVector();
  pos=0;
  valid=true;
}",0.9503105590062112
146914,"/** 
 * Add a Condition to the form's Collection.
 * @param condition the condition to be set
 */
public Triggerable addTriggerable(Triggerable t){
  int existingIx=triggerables.indexOf(t);
  if (existingIx >= 0) {
    return (Triggerable)triggerables.elementAt(existingIx);
  }
 else {
    triggerables.addElement(t);
    triggerablesInOrder=false;
    Vector triggers=t.getTriggers();
    for (int i=0; i < triggers.size(); i++) {
      TreeReference trigger=(TreeReference)triggers.elementAt(i);
      if (!triggerIndex.containsKey(trigger)) {
        triggerIndex.put(trigger,new Vector());
      }
      Vector triggered=(Vector)triggerIndex.get(trigger);
      if (!triggered.contains(t)) {
        triggered.addElement(t);
      }
    }
    return t;
  }
}","/** 
 * Add a Condition to the form's Collection.
 * @param condition the condition to be set
 */
public Triggerable addTriggerable(Triggerable t){
  int existingIx=triggerables.indexOf(t);
  if (existingIx >= 0) {
    Triggerable existingTriggerable=(Triggerable)triggerables.elementAt(existingIx);
    existingTriggerable.contextRef=existingTriggerable.contextRef.intersect(t.contextRef);
    return existingTriggerable;
  }
 else {
    triggerables.addElement(t);
    triggerablesInOrder=false;
    Vector triggers=t.getTriggers();
    for (int i=0; i < triggers.size(); i++) {
      TreeReference trigger=(TreeReference)triggers.elementAt(i);
      if (!triggerIndex.containsKey(trigger)) {
        triggerIndex.put(trigger,new Vector());
      }
      Vector triggered=(Vector)triggerIndex.get(trigger);
      if (!triggered.contains(t)) {
        triggered.addElement(t);
      }
    }
    return t;
  }
}",0.8554360812425329
146915,"/** 
 * Get the workflow for how to manage each step in the pre/post processing workflow. TODO: This can/should be shared with JavaRosa core, probably. Safest way to stay in sync WRT SMS transport, etc.
 */
private FormTransportWorkflow getWorkflowFactory(final SubmissionProfile profile){
  if (CommCareProperties.SEND_STYLE_NONE.equals(profile.getMethod())) {
    return new FormTransportWorkflow(){
      public void preProcessing(      FormInstance instance){
      }
      public void postProcessing(){
        CommCareFormEntryState.this.goHome();
      }
    }
;
  }
 else   if (CommCareProperties.SEND_STYLE_FILE.equals(profile.getMethod())) {
    return new FormTransportWorkflow(){
      public void preProcessing(      FormInstance instance){
      }
      public void postProcessing(){
        CommCareFormEntryState.this.goHome();
      }
    }
;
  }
 else {
    return new FormTransportWorkflow(){
      TransportMessage message;
      boolean cacheable;
      public void preProcessing(      FormInstance instance){
        try {
          cacheable=profile.getMethod().equals(METHOD_POST);
          message=SubmissionTransportHelper.createMessage(instance,profile,cacheable);
          if (cacheable) {
            TransportService.send(message,0,0);
            Logger.log(""String_Node_Str"",""String_Node_Str"" + PropertyUtils.trim(message.getCacheIdentifier(),6));
          }
 else {
            Logger.log(""String_Node_Str"",""String_Node_Str"" + profile.getMethod() + ""String_Node_Str"");
            TransportService.send(message,3,0);
          }
        }
 catch (        IOException e) {
          e.printStackTrace();
          Logger.die(""String_Node_Str"",e);
          return;
        }
catch (        TransportException e) {
          e.printStackTrace();
          Logger.die(""String_Node_Str"",e);
          return;
        }
      }
      public void postProcessing(){
        CommCarePostFormEntryState httpAskSendState=new CommCarePostFormEntryState(message,CommCareSense.isAutoSendEnabled() || cacheable){
          public void goHome(){
            if (CommCareSense.isAutoSendEnabled()) {
              AutomatedSenderService.NotifyPending();
            }
            CommCareFormEntryState.this.goHome();
          }
        }
;
        J2MEDisplay.startStateWithLoadingScreen(httpAskSendState);
      }
    }
;
  }
}","/** 
 * Get the workflow for how to manage each step in the pre/post processing workflow. TODO: This can/should be shared with JavaRosa core, probably. Safest way to stay in sync WRT SMS transport, etc.
 */
private FormTransportWorkflow getWorkflowFactory(final SubmissionProfile profile){
  if (CommCareProperties.SEND_STYLE_NONE.equals(profile.getMethod())) {
    return new FormTransportWorkflow(){
      public void preProcessing(      FormInstance instance){
      }
      public void postProcessing(){
        CommCareFormEntryState.this.goHome();
      }
    }
;
  }
 else   if (CommCareProperties.SEND_STYLE_FILE.equals(profile.getMethod())) {
    return new FormTransportWorkflow(){
      public void preProcessing(      FormInstance instance){
      }
      public void postProcessing(){
        CommCareFormEntryState.this.goHome();
      }
    }
;
  }
 else {
    return new FormTransportWorkflow(){
      TransportMessage message;
      boolean cacheable;
      public void preProcessing(      FormInstance instance){
        try {
          cacheable=profile.getMethod().equals(METHOD_POST);
          message=SubmissionTransportHelper.createMessage(instance,profile,cacheable);
          if (cacheable) {
            TransportService.send(message,0,0);
            Logger.log(""String_Node_Str"",""String_Node_Str"" + PropertyUtils.trim(message.getCacheIdentifier(),6));
          }
 else {
            Logger.log(""String_Node_Str"",""String_Node_Str"" + profile.getMethod() + ""String_Node_Str"");
            TransportService.send(message,3,0);
          }
        }
 catch (        IOException e) {
          e.printStackTrace();
          Logger.die(""String_Node_Str"",e);
          return;
        }
catch (        TransportException e) {
          e.printStackTrace();
          Logger.die(""String_Node_Str"",e);
          return;
        }
      }
      public void postProcessing(){
        CommCarePostFormEntryState httpAskSendState=new CommCarePostFormEntryState(message,CommCareSense.isAutoSendEnabled() || !cacheable){
          public void goHome(){
            if (CommCareSense.isAutoSendEnabled()) {
              AutomatedSenderService.NotifyPending();
            }
            CommCareFormEntryState.this.goHome();
          }
        }
;
        J2MEDisplay.startStateWithLoadingScreen(httpAskSendState);
      }
    }
;
  }
}",0.999787279302276
146916,"public void postProcessing(){
  CommCarePostFormEntryState httpAskSendState=new CommCarePostFormEntryState(message,CommCareSense.isAutoSendEnabled() || cacheable){
    public void goHome(){
      if (CommCareSense.isAutoSendEnabled()) {
        AutomatedSenderService.NotifyPending();
      }
      CommCareFormEntryState.this.goHome();
    }
  }
;
  J2MEDisplay.startStateWithLoadingScreen(httpAskSendState);
}","public void postProcessing(){
  CommCarePostFormEntryState httpAskSendState=new CommCarePostFormEntryState(message,CommCareSense.isAutoSendEnabled() || !cacheable){
    public void goHome(){
      if (CommCareSense.isAutoSendEnabled()) {
        AutomatedSenderService.NotifyPending();
      }
      CommCareFormEntryState.this.goHome();
    }
  }
;
  J2MEDisplay.startStateWithLoadingScreen(httpAskSendState);
}",0.9987849331713244
146917,"public void resetDemoData(){
  System.out.println(""String_Node_Str"");
  StorageManager.getStorage(Case.STORAGE_KEY).removeAll();
  StorageManager.getStorage(PatientReferral.STORAGE_KEY).removeAll();
  StorageManager.getStorage(FormInstance.STORAGE_KEY).removeAll();
}","public void resetDemoData(){
  System.out.println(""String_Node_Str"");
  StorageManager.getStorage(Case.STORAGE_KEY).removeAll();
  StorageManager.getStorage(PatientReferral.STORAGE_KEY).removeAll();
  StorageManager.getStorage(FormInstance.STORAGE_KEY).removeAll();
  StorageManager.getStorage(TransportMessageStore.Q_STORENAME).removeAll();
  StorageManager.getStorage(TransportMessageStore.RECENTLY_SENT_STORENAME).removeAll();
}",0.7650429799426934
146918,"public void toggleDemoMode(boolean demoOn){
  if (demoOn != inDemoMode) {
    inDemoMode=demoOn;
    if (demoOn) {
      registerDemoStorage(Case.STORAGE_KEY,Case.class);
      registerDemoStorage(PatientReferral.STORAGE_KEY,PatientReferral.class);
      registerDemoStorage(FormInstance.STORAGE_KEY,FormInstance.class);
    }
 else {
      StorageManager.registerStorage(Case.STORAGE_KEY,Case.class);
      StorageManager.registerStorage(PatientReferral.STORAGE_KEY,PatientReferral.class);
      StorageManager.registerStorage(FormInstance.STORAGE_KEY,FormInstance.class);
    }
  }
}","public void toggleDemoMode(boolean demoOn){
  if (demoOn != inDemoMode) {
    inDemoMode=demoOn;
    if (demoOn) {
      registerDemoStorage(Case.STORAGE_KEY,Case.class);
      registerDemoStorage(PatientReferral.STORAGE_KEY,PatientReferral.class);
      registerDemoStorage(FormInstance.STORAGE_KEY,FormInstance.class);
      registerWrappedDemoStorage(TransportMessageStore.Q_STORENAME,new TransportMessageSerializationWrapper());
      registerWrappedDemoStorage(TransportMessageStore.RECENTLY_SENT_STORENAME,new TransportMessageSerializationWrapper());
      TransportService.reinit();
    }
 else {
      StorageManager.registerStorage(Case.STORAGE_KEY,Case.class);
      StorageManager.registerStorage(PatientReferral.STORAGE_KEY,PatientReferral.class);
      StorageManager.registerStorage(FormInstance.STORAGE_KEY,FormInstance.class);
      StorageManager.registerWrappedStorage(TransportMessageStore.Q_STORENAME,TransportMessageStore.Q_STORENAME,new TransportMessageSerializationWrapper());
      StorageManager.registerWrappedStorage(TransportMessageStore.RECENTLY_SENT_STORENAME,TransportMessageStore.RECENTLY_SENT_STORENAME,new TransportMessageSerializationWrapper());
      TransportService.reinit();
    }
  }
}",0.6464088397790055
146919,"/** 
 * Makes some (or all) of the table's resources available
 * @param master The global resource to prepare against. Used to establish whether resources need to be fetchedremotely
 * @param instance The instance to prepare against
 * @param toInitialize The ID of a single resource after which the table preparation can stop.
 * @throws UnresolvedResourceException If a resource could not be identified and is required
 * @throws UnfullfilledRequirementsException If some resources are incompatible with the current version of CommCare
 */
public void prepareResources(ResourceTable master,CommCareInstance instance,String toInitialize) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  Vector<Resource> v=GetUnreadyResources();
  int round=-1;
  while (v.size() > 0 || (toInitialize != null && this.getResourceWithId(toInitialize).getStatus() == Resource.RESOURCE_STATUS_UNINITIALIZED)) {
    round++;
    System.out.println(""String_Node_Str"" + round + ""String_Node_Str""+ v.size()+ ""String_Node_Str"");
    for (    Resource r : v) {
      boolean upgrade=false;
      Vector<Reference> invalid=new Vector<Reference>();
      if (master != null) {
        Resource peer=master.getResourceWithId(r.getResourceId());
        if (peer != null) {
          if (!r.isNewer(peer)) {
            commit(r,Resource.RESOURCE_STATUS_INSTALLED);
            continue;
          }
 else {
            upgrade=true;
          }
          invalid=ResourceTable.explodeLocalReferences(peer,master);
        }
      }
      boolean handled=false;
      for (      ResourceLocation location : r.getLocations()) {
        if (handled) {
          break;
        }
        if (location.isRelative()) {
          for (          Reference ref : explodeReferences(location,r,this,master)) {
            if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL && invalid.contains(ref)) {
              System.out.println(""String_Node_Str"" + location.getLocation());
            }
 else {
              handled=r.getInstaller().install(r,location,ref,this,instance,upgrade);
              if (handled) {
                break;
              }
            }
          }
        }
 else {
          try {
            handled=r.getInstaller().install(r,location,ReferenceManager._().DeriveReference(location.getLocation()),this,instance,upgrade);
            if (handled) {
              break;
            }
          }
 catch (          InvalidReferenceException ire) {
            ire.printStackTrace();
          }
        }
      }
      if (!handled) {
        throw new UnresolvedResourceException(r,""String_Node_Str"" + r.getResourceId());
      }
      if (stateListener != null) {
        stateListener.resourceStateUpdated(this);
      }
    }
    v=GetUnreadyResources();
  }
  if (toInitialize != null) {
    return;
  }
  for (  Resource stillPending : GetResources(Resource.RESOURCE_STATUS_PENDING)) {
    this.removeResource(stillPending);
  }
}","/** 
 * Makes some (or all) of the table's resources available
 * @param master The global resource to prepare against. Used to establish whether resources need to be fetchedremotely
 * @param instance The instance to prepare against
 * @param toInitialize The ID of a single resource after which the table preparation can stop.
 * @throws UnresolvedResourceException If a resource could not be identified and is required
 * @throws UnfullfilledRequirementsException If some resources are incompatible with the current version of CommCare
 */
public void prepareResources(ResourceTable master,CommCareInstance instance,String toInitialize) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  Vector<Resource> v=GetUnreadyResources();
  int round=-1;
  while (v.size() > 0 && (toInitialize == null || this.getResourceWithId(toInitialize).getStatus() == Resource.RESOURCE_STATUS_UNINITIALIZED)) {
    round++;
    System.out.println(""String_Node_Str"" + round + ""String_Node_Str""+ v.size()+ ""String_Node_Str"");
    for (    Resource r : v) {
      boolean upgrade=false;
      Vector<Reference> invalid=new Vector<Reference>();
      if (master != null) {
        Resource peer=master.getResourceWithId(r.getResourceId());
        if (peer != null) {
          if (!r.isNewer(peer)) {
            commit(r,Resource.RESOURCE_STATUS_INSTALLED);
            continue;
          }
 else {
            upgrade=true;
          }
          invalid=ResourceTable.explodeLocalReferences(peer,master);
        }
      }
      boolean handled=false;
      for (      ResourceLocation location : r.getLocations()) {
        if (handled) {
          break;
        }
        if (location.isRelative()) {
          for (          Reference ref : explodeReferences(location,r,this,master)) {
            if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL && invalid.contains(ref)) {
              System.out.println(""String_Node_Str"" + location.getLocation());
            }
 else {
              handled=r.getInstaller().install(r,location,ref,this,instance,upgrade);
              if (handled) {
                break;
              }
            }
          }
        }
 else {
          try {
            handled=r.getInstaller().install(r,location,ReferenceManager._().DeriveReference(location.getLocation()),this,instance,upgrade);
            if (handled) {
              break;
            }
          }
 catch (          InvalidReferenceException ire) {
            ire.printStackTrace();
          }
        }
      }
      if (!handled) {
        throw new UnresolvedResourceException(r,""String_Node_Str"" + r.getResourceId());
      }
      if (stateListener != null) {
        stateListener.resourceStateUpdated(this);
      }
    }
    v=GetUnreadyResources();
  }
  if (toInitialize != null) {
    return;
  }
  for (  Resource stillPending : GetResources(Resource.RESOURCE_STATUS_PENDING)) {
    this.removeResource(stillPending);
  }
}",0.9915796564499832
146920,"public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL) {
    try {
      if (ref.doesBinaryExist()) {
        localReference=ref.getURI();
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        return true;
      }
 else {
        return false;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
  }
 else   if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_REMOTE) {
    try {
      if (!ref.doesBinaryExist()) {
        return false;
      }
      InputStream incoming=ref.getStream();
      if (incoming == null) {
        return false;
      }
      String uri=ref.getURI();
      int lastslash=uri.lastIndexOf('/');
      uri=uri.substring(lastslash == -1 ? 0 : lastslash);
      int copy=0;
      try {
        Reference destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + uri);
        if (destination.isReadOnly()) {
          return cache(incoming,r,table);
        }
        while (destination.doesBinaryExist()) {
          copy++;
          String newUri=uri + ""String_Node_Str"" + copy;
          destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + newUri);
        }
        OutputStream output=destination.getOutputStream();
        StreamsUtil.writeFromInputToOutput(incoming,output);
        output.close();
        this.localReference=destination.getURI();
        if (upgrade) {
          table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
        }
 else {
          table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        }
        return true;
      }
 catch (      InvalidReferenceException e) {
        return cache(incoming,r,table);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
  }
  return false;
}","public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL) {
    try {
      if (ref.doesBinaryExist()) {
        localReference=ref.getURI();
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        return true;
      }
 else {
        return false;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
  }
 else   if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_REMOTE) {
    try {
      if (!ref.doesBinaryExist()) {
        return false;
      }
      InputStream incoming=ref.getStream();
      if (incoming == null) {
        return false;
      }
      String uri=ref.getURI();
      int lastslash=uri.lastIndexOf('/');
      uri=uri.substring(lastslash == -1 ? 0 : lastslash + 1);
      int copy=0;
      try {
        Reference destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + uri);
        while (destination.doesBinaryExist()) {
          copy++;
          String newUri=uri + ""String_Node_Str"" + copy;
          destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + newUri);
        }
        if (destination.isReadOnly()) {
          return cache(incoming,r,table);
        }
        OutputStream output=destination.getOutputStream();
        StreamsUtil.writeFromInputToOutput(incoming,output);
        output.close();
        this.localReference=destination.getURI();
        if (upgrade) {
          table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
        }
 else {
          table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        }
        return true;
      }
 catch (      InvalidReferenceException e) {
        return cache(incoming,r,table);
      }
    }
 catch (    IOException e) {
      Logger.exception(e);
      return false;
    }
  }
  return false;
}",0.9435975609756098
146921,"public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  try {
    if (getlocal().containsKey(r.getRecordGuid()) && r.getStatus() == Resource.RESOURCE_STATUS_LOCAL) {
      Profile local=getlocal().get(r.getRecordGuid());
      installInternal(local);
      table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
      localTable.remove(r.getRecordGuid());
      for (      Resource child : table.getResourcesForParent(r.getRecordGuid())) {
        table.commit(child,Resource.RESOURCE_STATUS_UNINITIALIZED);
      }
      return true;
    }
    if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_CACHE) {
      return false;
    }
 else {
      ProfileParser parser=new ProfileParser(ref.getStream(),instance,table,r.getRecordGuid(),upgrade ? Resource.RESOURCE_STATUS_PENDING : Resource.RESOURCE_STATUS_UNINITIALIZED,forceVersion);
      Profile p=parser.parse();
      if (upgrade) {
        getlocal().put(r.getRecordGuid(),p);
        table.commit(r,Resource.RESOURCE_STATUS_LOCAL,p.getVersion());
      }
 else {
        p.initializeProperties(true);
        installInternal(p);
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED,p.getVersion());
      }
      return true;
    }
  }
 catch (  InvalidStructureException e) {
    e.printStackTrace();
    return false;
  }
catch (  StorageFullException e) {
    e.printStackTrace();
    return false;
  }
catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  XmlPullParserException e) {
    e.printStackTrace();
    return false;
  }
}","public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  try {
    if (getlocal().containsKey(r.getRecordGuid()) && r.getStatus() == Resource.RESOURCE_STATUS_LOCAL) {
      Profile local=getlocal().get(r.getRecordGuid());
      installInternal(local);
      table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
      localTable.remove(r.getRecordGuid());
      for (      Resource child : table.getResourcesForParent(r.getRecordGuid())) {
        table.commit(child,Resource.RESOURCE_STATUS_UNINITIALIZED);
      }
      return true;
    }
    if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_CACHE) {
      return false;
    }
 else {
      ProfileParser parser=new ProfileParser(ref.getStream(),instance,table,r.getRecordGuid(),upgrade ? Resource.RESOURCE_STATUS_PENDING : Resource.RESOURCE_STATUS_UNINITIALIZED,forceVersion);
      if (Resource.RESOURCE_AUTHORITY_REMOTE == location.getAuthority()) {
        parser.setMaximumAuthority(Resource.RESOURCE_AUTHORITY_REMOTE);
      }
      Profile p=parser.parse();
      if (upgrade) {
        getlocal().put(r.getRecordGuid(),p);
        table.commit(r,Resource.RESOURCE_STATUS_LOCAL,p.getVersion());
      }
 else {
        p.initializeProperties(true);
        installInternal(p);
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED,p.getVersion());
      }
      return true;
    }
  }
 catch (  InvalidStructureException e) {
    e.printStackTrace();
    return false;
  }
catch (  StorageFullException e) {
    e.printStackTrace();
    return false;
  }
catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  XmlPullParserException e) {
    e.printStackTrace();
    return false;
  }
}",0.955928348023884
146922,"public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_CACHE) {
    return false;
  }
 else {
    try {
      SuiteParser parser=new SuiteParser(ref.getStream(),table,r.getRecordGuid());
      Suite s=parser.parse();
      storage().write(s);
      cacheLocation=s.getID();
      table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
      return true;
    }
 catch (    InvalidStructureException e) {
      e.printStackTrace();
      return false;
    }
catch (    StorageFullException e) {
      e.printStackTrace();
      return false;
    }
catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
catch (    XmlPullParserException e) {
      e.printStackTrace();
      return false;
    }
  }
}","public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_CACHE) {
    return false;
  }
 else {
    try {
      SuiteParser parser=new SuiteParser(ref.getStream(),table,r.getRecordGuid());
      if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_REMOTE) {
        parser.setMaximumAuthority(Resource.RESOURCE_AUTHORITY_REMOTE);
      }
      Suite s=parser.parse();
      storage().write(s);
      cacheLocation=s.getID();
      table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
      return true;
    }
 catch (    InvalidStructureException e) {
      e.printStackTrace();
      return false;
    }
catch (    StorageFullException e) {
      e.printStackTrace();
      return false;
    }
catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
catch (    XmlPullParserException e) {
      e.printStackTrace();
      return false;
    }
  }
}",0.9207971384772612
146923,"public ResourceTable stageUpgradeTable(ResourceTable global,ResourceTable temporary,String profileRef) throws UnfullfilledRequirementsException, StorageFullException, UnresolvedResourceException {
  temporary.clear();
  Vector<ResourceLocation> locations=new Vector<ResourceLocation>();
  locations.addElement(new ResourceLocation(Resource.RESOURCE_AUTHORITY_LOCAL,profileRef));
  Resource r=new Resource(Resource.RESOURCE_VERSION_UNKNOWN,APP_PROFILE_RESOURCE_ID,locations);
  temporary.addResource(r,temporary.getInstallers().getProfileInstaller(false),null);
  temporary.prepareResources(global,this,APP_PROFILE_RESOURCE_ID);
  return temporary;
}","public ResourceTable stageUpgradeTable(ResourceTable global,ResourceTable temporary,String profileRef) throws UnfullfilledRequirementsException, StorageFullException, UnresolvedResourceException {
  temporary.clear();
  Vector<ResourceLocation> locations=new Vector<ResourceLocation>();
  locations.addElement(new ResourceLocation(Resource.RESOURCE_AUTHORITY_REMOTE,profileRef));
  Resource r=new Resource(Resource.RESOURCE_VERSION_UNKNOWN,APP_PROFILE_RESOURCE_ID,locations);
  temporary.addResource(r,temporary.getInstallers().getProfileInstaller(false),null);
  temporary.prepareResources(global,this,APP_PROFILE_RESOURCE_ID);
  return temporary;
}",0.99153194765204
146924,"public void init(String profileReference,ResourceTable global,boolean forceInstall) throws UnfullfilledRequirementsException, UnresolvedResourceException {
  try {
    if (!global.isReady()) {
      global.prepareResources(null,this);
    }
    Resource profile=global.getResourceWithId(APP_PROFILE_RESOURCE_ID);
    if (profile == null) {
      Vector<ResourceLocation> locations=new Vector<ResourceLocation>();
      locations.addElement(new ResourceLocation(Resource.RESOURCE_AUTHORITY_REMOTE,profileReference));
      Resource r=new Resource(Resource.RESOURCE_VERSION_UNKNOWN,APP_PROFILE_RESOURCE_ID,locations);
      global.addResource(r,global.getInstallers().getProfileInstaller(forceInstall),""String_Node_Str"");
      global.prepareResources(null,this);
    }
 else {
    }
  }
 catch (  StorageFullException e) {
    e.printStackTrace();
  }
}","public void init(String profileReference,ResourceTable global,boolean forceInstall) throws UnfullfilledRequirementsException, UnresolvedResourceException {
  try {
    if (!global.isReady()) {
      global.prepareResources(null,this);
    }
    Resource profile=global.getResourceWithId(APP_PROFILE_RESOURCE_ID);
    if (profile == null) {
      Vector<ResourceLocation> locations=new Vector<ResourceLocation>();
      locations.addElement(new ResourceLocation(Resource.RESOURCE_AUTHORITY_LOCAL,profileReference));
      Resource r=new Resource(Resource.RESOURCE_VERSION_UNKNOWN,APP_PROFILE_RESOURCE_ID,locations);
      global.addResource(r,global.getInstallers().getProfileInstaller(forceInstall),""String_Node_Str"");
      global.prepareResources(null,this);
    }
 else {
    }
  }
 catch (  StorageFullException e) {
    e.printStackTrace();
  }
}",0.9935408103347034
146925,"public void upgrade(ResourceTable global,ResourceTable temporary) throws UnfullfilledRequirementsException {
  if (!global.isReady()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    temporary.prepareResources(global,this);
    global.upgradeTable(temporary);
    temporary.destroy();
  }
 catch (  UnresolvedResourceException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"");
  }
  profile=-1;
  suites.removeAllElements();
  initialize(global);
}","public void upgrade(ResourceTable global,ResourceTable temporary) throws UnfullfilledRequirementsException {
  if (!global.isReady()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    temporary.prepareResources(global,this);
    global.upgradeTable(temporary);
    temporary.destroy();
  }
 catch (  UnresolvedResourceException e) {
    Logger.exception(e);
    throw new RuntimeException(""String_Node_Str"");
  }
  profile=-1;
  suites.removeAllElements();
  initialize(global);
}",0.9639278557114228
146926,"public Profile parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  checkNode(""String_Node_Str"");
  String sVersion=parser.getAttributeValue(null,""String_Node_Str"");
  int version=parseInt(sVersion);
  String authRef=parser.getAttributeValue(null,""String_Node_Str"");
  String sMajor=parser.getAttributeValue(null,""String_Node_Str"");
  String sMinor=parser.getAttributeValue(null,""String_Node_Str"");
  int major=-1;
  int minor=-1;
  if (sMajor != null) {
    major=parseInt(sMajor);
  }
  if (sMinor != null) {
    minor=parseInt(sMinor);
  }
  if (!forceVersion && this.instance != null) {
    if (this.instance.getMajorVersion() != -1 && this.instance.getMajorVersion() < major) {
      throw new UnfullfilledRequirementsException(""String_Node_Str"" + major + ""String_Node_Str""+ this.instance.getMajorVersion()+ ""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_PROMPT,UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION);
    }
    if (this.instance.getMinorVersion() != -1 && this.instance.getMinorVersion() < minor) {
      throw new UnfullfilledRequirementsException(""String_Node_Str"" + minor + ""String_Node_Str""+ this.instance.getMinorVersion()+ ""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_PROMPT,UnfullfilledRequirementsException.REQUIREMENT_MINOR_APP_VERSION);
    }
  }
  String registrationNamespace=null;
  Profile profile=new Profile(version,authRef);
  try {
    parser.next();
    int eventType;
    eventType=parser.getEventType();
    do {
      if (eventType == KXmlParser.END_DOCUMENT) {
      }
 else       if (eventType == KXmlParser.START_TAG) {
        if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          String key=parser.getAttributeValue(null,""String_Node_Str"");
          String value=parser.getAttributeValue(null,""String_Node_Str"");
          String force=parser.getAttributeValue(null,""String_Node_Str"");
          if (force != null) {
            if (""String_Node_Str"".equals(force.toLowerCase())) {
              profile.addPropertySetter(key,value,true);
            }
 else {
              profile.addPropertySetter(key,value,false);
            }
          }
 else {
            profile.addPropertySetter(key,value);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          RootTranslator root=new RootParser(this.parser).parse();
          profile.addRoot(root);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          getNextTagInBlock(""String_Node_Str"");
          Resource resource=new ResourceParser(parser).parse();
          table.addResource(resource,table.getInstallers().getLoginImageInstaller(),resourceId,initialResourceStatus);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          while (nextTagInBlock(""String_Node_Str"")) {
            String tag=parser.getName().toLowerCase();
            String active=parser.getAttributeValue(null,""String_Node_Str"");
            boolean isActive=false;
            if (active != null && active.toLowerCase().equals(""String_Node_Str"")) {
              isActive=true;
            }
            if (tag.equals(""String_Node_Str"")) {
            }
 else             if (tag.equals(""String_Node_Str"")) {
              if (nextTagInBlock(""String_Node_Str"")) {
                checkNode(""String_Node_Str"");
                String reminderTime=parser.nextText();
                int days=this.parseInt(reminderTime);
              }
            }
 else             if (tag.equals(""String_Node_Str"")) {
            }
 else             if (tag.equals(""String_Node_Str"")) {
              while (nextTagInBlock(""String_Node_Str"")) {
                if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
                  registrationNamespace=parser.nextText();
                  profile.addPropertySetter(""String_Node_Str"",registrationNamespace,true);
                }
 else                 if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
                  String logo=parser.nextText();
                  profile.addPropertySetter(""String_Node_Str"",logo,true);
                }
 else {
                  throw new InvalidStructureException(""String_Node_Str"" + parser.getName() + ""String_Node_Str"",parser);
                }
              }
            }
 else             if (tag.equals(""String_Node_Str"")) {
            }
            profile.setFeatureActive(tag,isActive);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          getNextTagInBlock(""String_Node_Str"");
          Resource resource=new ResourceParser(parser).parse();
          table.addResource(resource,table.getInstallers().getSuiteInstaller(),resourceId,initialResourceStatus);
        }
 else {
          System.out.println(""String_Node_Str"" + parser.getName());
        }
      }
 else       if (eventType == KXmlParser.END_TAG) {
      }
 else       if (eventType == KXmlParser.TEXT) {
      }
      eventType=parser.next();
    }
 while (eventType != KXmlParser.END_DOCUMENT);
    return profile;
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  StorageFullException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
}","public Profile parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  checkNode(""String_Node_Str"");
  String sVersion=parser.getAttributeValue(null,""String_Node_Str"");
  int version=parseInt(sVersion);
  String authRef=parser.getAttributeValue(null,""String_Node_Str"");
  String sMajor=parser.getAttributeValue(null,""String_Node_Str"");
  String sMinor=parser.getAttributeValue(null,""String_Node_Str"");
  int major=-1;
  int minor=-1;
  if (sMajor != null) {
    major=parseInt(sMajor);
  }
  if (sMinor != null) {
    minor=parseInt(sMinor);
  }
  if (!forceVersion && this.instance != null) {
    if (this.instance.getMajorVersion() != -1 && this.instance.getMajorVersion() < major) {
      throw new UnfullfilledRequirementsException(""String_Node_Str"" + major + ""String_Node_Str""+ this.instance.getMajorVersion()+ ""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_PROMPT,UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION);
    }
    if (this.instance.getMinorVersion() != -1 && this.instance.getMinorVersion() < minor) {
      throw new UnfullfilledRequirementsException(""String_Node_Str"" + minor + ""String_Node_Str""+ this.instance.getMinorVersion()+ ""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_PROMPT,UnfullfilledRequirementsException.REQUIREMENT_MINOR_APP_VERSION);
    }
  }
  String registrationNamespace=null;
  Profile profile=new Profile(version,authRef);
  try {
    parser.next();
    int eventType;
    eventType=parser.getEventType();
    do {
      if (eventType == KXmlParser.END_DOCUMENT) {
      }
 else       if (eventType == KXmlParser.START_TAG) {
        if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          String key=parser.getAttributeValue(null,""String_Node_Str"");
          String value=parser.getAttributeValue(null,""String_Node_Str"");
          String force=parser.getAttributeValue(null,""String_Node_Str"");
          if (force != null) {
            if (""String_Node_Str"".equals(force.toLowerCase())) {
              profile.addPropertySetter(key,value,true);
            }
 else {
              profile.addPropertySetter(key,value,false);
            }
          }
 else {
            profile.addPropertySetter(key,value);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          RootTranslator root=new RootParser(this.parser).parse();
          profile.addRoot(root);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          getNextTagInBlock(""String_Node_Str"");
          Resource resource=new ResourceParser(parser,maximumResourceAuthority).parse();
          table.addResource(resource,table.getInstallers().getLoginImageInstaller(),resourceId,initialResourceStatus);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          while (nextTagInBlock(""String_Node_Str"")) {
            String tag=parser.getName().toLowerCase();
            String active=parser.getAttributeValue(null,""String_Node_Str"");
            boolean isActive=false;
            if (active != null && active.toLowerCase().equals(""String_Node_Str"")) {
              isActive=true;
            }
            if (tag.equals(""String_Node_Str"")) {
            }
 else             if (tag.equals(""String_Node_Str"")) {
              if (nextTagInBlock(""String_Node_Str"")) {
                checkNode(""String_Node_Str"");
                String reminderTime=parser.nextText();
                int days=this.parseInt(reminderTime);
              }
            }
 else             if (tag.equals(""String_Node_Str"")) {
            }
 else             if (tag.equals(""String_Node_Str"")) {
              while (nextTagInBlock(""String_Node_Str"")) {
                if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
                  registrationNamespace=parser.nextText();
                  profile.addPropertySetter(""String_Node_Str"",registrationNamespace,true);
                }
 else                 if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
                  String logo=parser.nextText();
                  profile.addPropertySetter(""String_Node_Str"",logo,true);
                }
 else {
                  throw new InvalidStructureException(""String_Node_Str"" + parser.getName() + ""String_Node_Str"",parser);
                }
              }
            }
 else             if (tag.equals(""String_Node_Str"")) {
            }
            profile.setFeatureActive(tag,isActive);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          getNextTagInBlock(""String_Node_Str"");
          Resource resource=new ResourceParser(parser,maximumResourceAuthority).parse();
          table.addResource(resource,table.getInstallers().getSuiteInstaller(),resourceId,initialResourceStatus);
        }
 else {
          System.out.println(""String_Node_Str"" + parser.getName());
        }
      }
 else       if (eventType == KXmlParser.END_TAG) {
      }
 else       if (eventType == KXmlParser.TEXT) {
      }
      eventType=parser.next();
    }
 while (eventType != KXmlParser.END_DOCUMENT);
    return profile;
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  StorageFullException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
}",0.9955436720142602
146927,"public ResourceParser(KXmlParser parser){
  super(parser);
}","public ResourceParser(KXmlParser parser,int maximumAuthority){
  super(parser);
  this.maximumAuthority=maximumAuthority;
}",0.6557377049180327
146928,"public Resource parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String id=parser.getAttributeValue(null,""String_Node_Str"");
  int version=parseInt(parser.getAttributeValue(null,""String_Node_Str""));
  Vector<ResourceLocation> locations=new Vector<ResourceLocation>();
  while (nextTagInBlock(""String_Node_Str"")) {
    String sAuthority=parser.getAttributeValue(null,""String_Node_Str"");
    String location=parser.nextText();
    int authority=Resource.RESOURCE_AUTHORITY_REMOTE;
    if (sAuthority.toLowerCase().equals(""String_Node_Str"")) {
      authority=Resource.RESOURCE_AUTHORITY_LOCAL;
    }
 else     if (sAuthority.toLowerCase().equals(""String_Node_Str"")) {
      authority=Resource.RESOURCE_AUTHORITY_REMOTE;
    }
    locations.addElement(new ResourceLocation(authority,location));
  }
  return new Resource(version,id,locations);
}","public Resource parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String id=parser.getAttributeValue(null,""String_Node_Str"");
  int version=parseInt(parser.getAttributeValue(null,""String_Node_Str""));
  Vector<ResourceLocation> locations=new Vector<ResourceLocation>();
  while (nextTagInBlock(""String_Node_Str"")) {
    String sAuthority=parser.getAttributeValue(null,""String_Node_Str"");
    String location=parser.nextText();
    int authority=Resource.RESOURCE_AUTHORITY_REMOTE;
    if (sAuthority.toLowerCase().equals(""String_Node_Str"")) {
      authority=Resource.RESOURCE_AUTHORITY_LOCAL;
    }
 else     if (sAuthority.toLowerCase().equals(""String_Node_Str"")) {
      authority=Resource.RESOURCE_AUTHORITY_REMOTE;
    }
    if (authority >= maximumAuthority) {
      locations.addElement(new ResourceLocation(authority,location));
    }
  }
  return new Resource(version,id,locations);
}",0.9736983360171766
146929,"public Suite parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String sVersion=parser.getAttributeValue(null,""String_Node_Str"");
  int version=Integer.parseInt(sVersion);
  Hashtable<String,Detail> details=new Hashtable<String,Detail>();
  Hashtable<String,Entry> entries=new Hashtable<String,Entry>();
  Vector<Menu> menus=new Vector<Menu>();
  try {
    parser.next();
    int eventType;
    eventType=parser.getEventType();
    do {
      if (eventType == KXmlParser.END_DOCUMENT) {
      }
 else       if (eventType == KXmlParser.START_TAG) {
        if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          Entry e=new EntryParser(parser).parse();
          entries.put(e.getCommandId(),e);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          Entry e=new ViewParser(parser).parse();
          entries.put(e.getCommandId(),e);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          String localeKey=parser.getAttributeValue(null,""String_Node_Str"");
          parser.nextTag();
          Resource r=new ResourceParser(parser).parse();
          table.addResource(r,table.getInstallers().getLocaleFileInstaller(localeKey),resourceGuid);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          String path=parser.getAttributeValue(null,""String_Node_Str"");
          while (this.nextTagInBlock(""String_Node_Str"")) {
            Resource r=new ResourceParser(parser).parse();
            table.addResource(r,table.getInstallers().getMediaInstaller(path),resourceGuid);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          parser.nextTag();
          Resource r=new ResourceParser(parser).parse();
          table.addResource(r,table.getInstallers().getXFormInstaller(),resourceGuid);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          Detail d=new DetailParser(parser).parse();
          details.put(d.getId(),d);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          Menu m=new MenuParser(parser).parse();
          menus.addElement(m);
        }
 else {
          System.out.println(""String_Node_Str"" + parser.getName());
        }
      }
 else       if (eventType == KXmlParser.END_TAG) {
      }
 else       if (eventType == KXmlParser.TEXT) {
      }
      eventType=parser.next();
    }
 while (eventType != KXmlParser.END_DOCUMENT);
    suite=new Suite(version,details,entries,menus);
    return suite;
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  StorageFullException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
}","public Suite parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String sVersion=parser.getAttributeValue(null,""String_Node_Str"");
  int version=Integer.parseInt(sVersion);
  Hashtable<String,Detail> details=new Hashtable<String,Detail>();
  Hashtable<String,Entry> entries=new Hashtable<String,Entry>();
  Vector<Menu> menus=new Vector<Menu>();
  try {
    parser.next();
    int eventType;
    eventType=parser.getEventType();
    do {
      if (eventType == KXmlParser.END_DOCUMENT) {
      }
 else       if (eventType == KXmlParser.START_TAG) {
        if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          Entry e=new EntryParser(parser).parse();
          entries.put(e.getCommandId(),e);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          Entry e=new ViewParser(parser).parse();
          entries.put(e.getCommandId(),e);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          String localeKey=parser.getAttributeValue(null,""String_Node_Str"");
          parser.nextTag();
          Resource r=new ResourceParser(parser,maximumResourceAuthority).parse();
          table.addResource(r,table.getInstallers().getLocaleFileInstaller(localeKey),resourceGuid);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          String path=parser.getAttributeValue(null,""String_Node_Str"");
          while (this.nextTagInBlock(""String_Node_Str"")) {
            Resource r=new ResourceParser(parser,maximumResourceAuthority).parse();
            table.addResource(r,table.getInstallers().getMediaInstaller(path),resourceGuid);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          parser.nextTag();
          Resource r=new ResourceParser(parser,maximumResourceAuthority).parse();
          table.addResource(r,table.getInstallers().getXFormInstaller(),resourceGuid);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          Detail d=new DetailParser(parser).parse();
          details.put(d.getId(),d);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          Menu m=new MenuParser(parser).parse();
          menus.addElement(m);
        }
 else {
          System.out.println(""String_Node_Str"" + parser.getName());
        }
      }
 else       if (eventType == KXmlParser.END_TAG) {
      }
 else       if (eventType == KXmlParser.TEXT) {
      }
      eventType=parser.next();
    }
 while (eventType != KXmlParser.END_DOCUMENT);
    suite=new Suite(version,details,entries,menus);
    return suite;
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  StorageFullException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
}",0.9879012743990966
146930,"private Vector scrapeForCaseElements(FormInstance tree){
  Vector caseElements=new Vector();
  Stack children=new Stack();
  children.push(tree.getRoot());
  while (!children.empty()) {
    TreeElement element=(TreeElement)children.pop();
    for (int i=0; i < element.getNumChildren(); ++i) {
      TreeElement caseElement=element.getChildAt(i);
      if (!caseElement.isRelevant()) {
        continue;
      }
      if (caseElement.getName().equals(""String_Node_Str"")) {
        caseElements.addElement(caseElement);
      }
 else {
        children.push(caseElement);
      }
    }
  }
  return caseElements;
}","private Vector scrapeForCaseElements(FormInstance tree){
  Vector caseElements=new Vector();
  Stack children=new Stack();
  children.push(tree.getRoot());
  while (!children.empty()) {
    TreeElement element=(TreeElement)children.pop();
    for (int i=0; i < element.getNumChildren(); ++i) {
      TreeElement caseElement=element.getChildAt(i);
      if (!caseElement.isRelevant() || caseElement.getMult() == TreeReference.INDEX_TEMPLATE) {
        continue;
      }
      if (caseElement.getName().equals(""String_Node_Str"")) {
        caseElements.addElement(caseElement);
      }
 else {
        children.push(caseElement);
      }
    }
  }
  return caseElements;
}",0.9555728760717068
146931,"/** 
 * Registers a resource file as a source of locale data for the specified locale.  
 * @param locale The locale of the definitions provided. 
 * @param resource A LocaleDataSource containing string data for the locale provided
 * @throws NullPointerException if resource or locale are null
 */
public void registerLocaleResource(String locale,LocaleDataSource resource){
  if (locale == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (resource == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Vector resources=new Vector();
  if (localeResources.containsKey(locale)) {
    resources=(Vector)localeResources.get(locale);
  }
  resources.addElement(resource);
  localeResources.put(locale,resources);
  if (locale.equals(currentLocale)) {
    loadCurrentLocaleResources();
  }
}","/** 
 * Registers a resource file as a source of locale data for the specified locale.  
 * @param locale The locale of the definitions provided. 
 * @param resource A LocaleDataSource containing string data for the locale provided
 * @throws NullPointerException if resource or locale are null
 */
public void registerLocaleResource(String locale,LocaleDataSource resource){
  if (locale == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (resource == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Vector resources=new Vector();
  if (localeResources.containsKey(locale)) {
    resources=(Vector)localeResources.get(locale);
  }
  resources.addElement(resource);
  localeResources.put(locale,resources);
  if (locale.equals(currentLocale) || locale.equals(defaultLocale)) {
    loadCurrentLocaleResources();
  }
}",0.9810650887573964
146932,"/** 
 * Load the ID index from the indexing/meta-data RMS
 * @return index hashtable, which maps integer record ID -> record locator
 */
public Hashtable getIDIndexRecord(){
  return (Hashtable)getIndexStore().readRecord(ID_INDEX_REC_ID,new ExtWrapMap(Integer.class,RMSRecordLoc.class));
}","/** 
 * Load the ID index from the indexing/meta-data RMS
 * @return index hashtable, which maps integer record ID -> record locator
 */
public Hashtable getIDIndexRecord(){
  if (this.transactionKey != null) {
    return (Hashtable)this.deleteActionCache[1];
  }
  return (Hashtable)getIndexStore().readRecord(ID_INDEX_REC_ID,new ExtWrapMap(Integer.class,RMSRecordLoc.class));
}",0.8652694610778443
146933,"/** 
 * Check that the StorageUtility is in an initialized, consistent, non-corrupt state. Throw an exception if it is not If the StorageUtility was not properly initialized, this call will fail. If transactions on this StorageUtility are currently in progress (such as by other threads), or a past transaction failed and did not properly clean itself up, this call will fail. 
 */
public void checkNotCorrupt(){
  checkStatusOK(false);
}","/** 
 * Check that the StorageUtility is in an initialized, consistent, non-corrupt state. Throw an exception if it is not If the StorageUtility was not properly initialized, this call will fail. If transactions on this StorageUtility are currently in progress (such as by other threads), or a past transaction failed and did not properly clean itself up, this call will fail. 
 */
public void checkNotCorrupt(){
  if (this.transactionKey == null) {
    checkStatusOK(false);
  }
 else {
    checkStatusOK(true);
  }
}",0.9163179916317992
146934,"public void configureApp(MIDlet m,InitializationListener listener){
  failsafeInit(m);
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  this.midlet=m;
  setProperties();
  loadModules();
  registerAddtlStorage();
  StorageManager.repairAll();
  RMSTransaction.cleanup();
  initReferences();
  Localization.registerLanguageReference(""String_Node_Str"",""String_Node_Str"");
  Localization.registerLanguageReference(""String_Node_Str"",""String_Node_Str"");
  final CommCareStartupInteraction interaction=new CommCareStartupInteraction(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
  Display.getDisplay(m).setCurrent(interaction);
  CommCareInitializer initializer=new CommCareInitializer(){
    private String validate(){
      this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
      Vector<UnresolvedResourceException> problems=global.verifyInstallation();
      if (problems.size() > 0) {
        String message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str"");
        Hashtable<String,Vector<String>> problemList=new Hashtable<String,Vector<String>>();
        for (        UnresolvedResourceException ure : problems) {
          String res=ure.getResource().getResourceId();
          Vector<String> list;
          if (problemList.containsKey(res)) {
            list=problemList.get(res);
          }
 else {
            list=new Vector<String>();
          }
          list.addElement(ure.getMessage());
          problemList.put(res,list);
        }
        for (Enumeration en=problemList.keys(); en.hasMoreElements(); ) {
          String resource=(String)en.nextElement();
          message+=""String_Node_Str"" + resource;
          message+=""String_Node_Str"";
          for (          String s : problemList.get(resource)) {
            message+=""String_Node_Str"" + s;
          }
        }
        return message;
      }
      return null;
    }
    protected boolean runWrapper() throws UnfullfilledRequirementsException {
      manager=new CommCarePlatform(CommCareUtil.getMajorVersion(),CommCareUtil.getMinorVersion());
      try {
        ResourceTable global=RetrieveGlobalResourceTable();
        boolean firstStart=false;
        if (global.isEmpty()) {
          firstStart=true;
          this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
        }
        manager.init(CommCareUtil.getProfileReference(),global,false);
      }
 catch (      UnfullfilledRequirementsException e) {
        if (e.getSeverity() == UnfullfilledRequirementsException.SEVERITY_PROMPT) {
          String message=e.getMessage();
          if (e.getRequirementCode() == UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION || e.getRequirementCode() == UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION) {
            message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str"");
          }
          if (this.blockForResponse(message)) {
            try {
              RetrieveGlobalResourceTable().clear();
              manager.init(CommCareUtil.getProfileReference(),RetrieveGlobalResourceTable(),true);
            }
 catch (            UnfullfilledRequirementsException e1) {
              throw e1;
            }
catch (            UnresolvedResourceException e3) {
              throw new RuntimeException(e3.getMessage());
            }
          }
 else {
            throw e;
          }
        }
 else {
          throw e;
        }
      }
catch (      UnresolvedResourceException e) {
        throw new RuntimeException(e.getMessage());
      }
      if (!CommCareUtil.getAppProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"") && !CommCareProperties.PROPERTY_YES.equals(PropertyManager._().getSingularProperty(CommCareProperties.CONTENT_VALIDATED))) {
        String failureMessage=this.validate();
        while (failureMessage != null) {
          Logger.log(""String_Node_Str"",""String_Node_Str"");
          this.blockForResponse(failureMessage);
          if (this.response == CommCareInitializer.RESPONSE_YES) {
            failureMessage=this.validate();
          }
 else {
            CommCareContext.this.exitApp();
            return false;
          }
        }
        PropertyManager._().setProperty(CommCareProperties.CONTENT_VALIDATED,CommCareProperties.PROPERTY_YES);
      }
      Localization.setLocale(""String_Node_Str"");
      manager.initialize(RetrieveGlobalResourceTable());
      purgeScheduler();
      postProfilePropertyInit();
      initUserFramework();
      LogReportUtils.initPendingDates(new Date().getTime());
      LanguageUtils.initializeLanguage(true,""String_Node_Str"");
      J2MEDisplay.init(CommCareContext.this.midlet);
      if (CommCareSense.isAutoSendEnabled()) {
        AutomatedSenderService.InitializeAndSpawnSenderService();
      }
      return true;
    }
    protected void askForResponse(    String message,    YesNoListener yesNoListener){
      interaction.AskYesNo(message,yesNoListener);
    }
    protected void setMessage(    String message){
      interaction.setMessage(message);
    }
  }
;
  initializer.initialize(listener);
}","public void configureApp(MIDlet m,InitializationListener listener){
  failsafeInit(m);
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  this.midlet=m;
  setProperties();
  loadModules();
  registerAddtlStorage();
  StorageManager.repairAll();
  RMSTransaction.cleanup();
  initReferences();
  Localization.registerLanguageReference(""String_Node_Str"",""String_Node_Str"");
  Localization.registerLanguageReference(""String_Node_Str"",""String_Node_Str"");
  final CommCareStartupInteraction interaction=new CommCareStartupInteraction(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
  Display.getDisplay(m).setCurrent(interaction);
  CommCareInitializer initializer=new CommCareInitializer(){
    private String validate(){
      this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
      Vector<UnresolvedResourceException> problems=global.verifyInstallation();
      if (problems.size() > 0) {
        String message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str"");
        Hashtable<String,Vector<String>> problemList=new Hashtable<String,Vector<String>>();
        for (        UnresolvedResourceException ure : problems) {
          String res=ure.getResource().getResourceId();
          Vector<String> list;
          if (problemList.containsKey(res)) {
            list=problemList.get(res);
          }
 else {
            list=new Vector<String>();
          }
          list.addElement(ure.getMessage());
          problemList.put(res,list);
        }
        for (Enumeration en=problemList.keys(); en.hasMoreElements(); ) {
          String resource=(String)en.nextElement();
          message+=""String_Node_Str"" + resource;
          message+=""String_Node_Str"";
          for (          String s : problemList.get(resource)) {
            message+=""String_Node_Str"" + s;
          }
        }
        return message;
      }
      return null;
    }
    protected boolean runWrapper() throws UnfullfilledRequirementsException {
      manager=new CommCarePlatform(CommCareUtil.getMajorVersion(),CommCareUtil.getMinorVersion());
      try {
        ResourceTable global=RetrieveGlobalResourceTable();
        boolean firstStart=false;
        if (global.isEmpty()) {
          firstStart=true;
          this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
        }
        manager.init(CommCareUtil.getProfileReference(),global,false);
      }
 catch (      UnfullfilledRequirementsException e) {
        if (e.getSeverity() == UnfullfilledRequirementsException.SEVERITY_PROMPT) {
          String message=e.getMessage();
          if (e.getRequirementCode() == UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION || e.getRequirementCode() == UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION) {
            message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str"");
          }
          if (this.blockForResponse(message)) {
            try {
              RetrieveGlobalResourceTable().clear();
              manager.init(CommCareUtil.getProfileReference(),RetrieveGlobalResourceTable(),true);
            }
 catch (            UnfullfilledRequirementsException e1) {
              throw e1;
            }
catch (            UnresolvedResourceException e3) {
              throw new RuntimeException(e3.getMessage());
            }
          }
 else {
            throw e;
          }
        }
 else {
          throw e;
        }
      }
catch (      UnresolvedResourceException e) {
        throw new RuntimeException(e.getMessage());
      }
      if (!CommCareUtil.getAppProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"") && !CommCareProperties.PROPERTY_YES.equals(PropertyManager._().getSingularProperty(CommCareProperties.CONTENT_VALIDATED))) {
        String failureMessage=this.validate();
        while (failureMessage != null) {
          Logger.log(""String_Node_Str"",""String_Node_Str"");
          this.blockForResponse(failureMessage);
          if (this.response == CommCareInitializer.RESPONSE_YES) {
            failureMessage=this.validate();
          }
 else {
            CommCareContext.this.exitApp();
            return false;
          }
        }
        PropertyManager._().setProperty(CommCareProperties.CONTENT_VALIDATED,CommCareProperties.PROPERTY_YES);
      }
      Localization.setLocale(""String_Node_Str"");
      manager.initialize(RetrieveGlobalResourceTable());
      purgeScheduler();
      postProfilePropertyInit();
      initUserFramework();
      LogReportUtils.initPendingDates(new Date().getTime());
      LanguageUtils.initializeLanguage(true,""String_Node_Str"");
      J2MEDisplay.init(CommCareContext.this.midlet);
      if (CommCareSense.isAutoSendEnabled()) {
        AutomatedSenderService.InitializeAndSpawnSenderService();
      }
      return true;
    }
    protected void askForResponse(    String message,    YesNoListener yesNoListener){
      interaction.AskYesNo(message,yesNoListener);
    }
    protected void setMessage(    String message){
      interaction.setMessage(message,true);
    }
  }
;
  initializer.initialize(listener);
}",0.9995211186667944
146935,"protected void setMessage(String message){
  interaction.setMessage(message);
}","protected void setMessage(String message){
  interaction.setMessage(message,true);
}",0.9693251533742332
146936,"public CommCareListView(String title,boolean autoSelect,boolean numericNavigation){
  super(title,List.IMPLICIT);
  this.addCommand(BACK);
  this.choiceGroup=new CustomChoiceGroup(null,ChoiceGroup.IMPLICIT,autoSelect,numericNavigation){
    public void playAudio(    int index){
      if (audioLocations.size() > index && audioLocations.elementAt(index) != null) {
        MediaUtils.playAudio(audioLocations.elementAt(index));
      }
    }
  }
;
  this.choiceGroup.isFocused=true;
  this.container=this.choiceGroup;
}","public CommCareListView(String title,boolean autoSelect,boolean numericNavigation){
  super(title,List.IMPLICIT);
  this.choiceGroup=new CustomChoiceGroup(null,ChoiceGroup.IMPLICIT,autoSelect,numericNavigation){
    public void playAudio(    int index){
      if (audioLocations.size() > index && audioLocations.elementAt(index) != null) {
        MediaUtils.playAudio(audioLocations.elementAt(index));
      }
    }
  }
;
  this.choiceGroup.isFocused=true;
  this.container=this.choiceGroup;
}",0.9753208292201382
146937,"public CommCareStartupInteraction(String message){
  super(failSafeText(""String_Node_Str"",""String_Node_Str""));
  messageItem=new StringItem(null,message);
  this.append(messageItem);
  this.setCommandListener(this);
}","public CommCareStartupInteraction(String message){
  super(failSafeText(""String_Node_Str"",""String_Node_Str""));
  messageItem=new StringItem(null,null);
  gauge=new Gauge(null,false,Gauge.INDEFINITE,Gauge.CONTINUOUS_RUNNING);
  this.append(messageItem);
  this.append(gauge);
  gauge.setVisible(false);
  this.setCommandListener(this);
  setMessage(message,true);
}",0.7228915662650602
146938,"public void AskYesNo(String message,YesNoListener listener){
  messageItem.setText(message);
  this.listener=listener;
  if (yes == null) {
    yes=new Command(failSafeText(""String_Node_Str"",""String_Node_Str""),Command.OK,0);
    no=new Command(failSafeText(""String_Node_Str"",""String_Node_Str""),Command.CANCEL,0);
    this.addCommand(yes);
    this.addCommand(no);
  }
}","public void AskYesNo(String message,YesNoListener listener){
  setMessage(message,false);
  this.listener=listener;
  if (yes == null) {
    yes=new Command(failSafeText(""String_Node_Str"",""String_Node_Str""),Command.OK,0);
    no=new Command(failSafeText(""String_Node_Str"",""String_Node_Str""),Command.CANCEL,0);
    this.addCommand(yes);
    this.addCommand(no);
  }
}",0.9333333333333332
146939,"public void setMessage(String message){
  this.messageItem.setText(message);
}","public void setMessage(String message,boolean showSpinner){
  this.messageItem.setText(message);
  gauge.setVisible(showSpinner);
}",0.7464114832535885
146940,"public CommCareSuiteController(CommCareSessionController controller,Menu m){
  this.m=m;
  this.controller=controller;
  view=new CommCareListView(m.getName().evaluate());
  view.setCommandListener(this);
}","public CommCareSuiteController(CommCareSessionController controller,Menu m){
  this.m=m;
  this.controller=controller;
  view=new CommCareListView(m.getName().evaluate());
  view.setCommandListener(this);
  view.addCommand(BACK);
}",0.94279176201373
146941,"public void _commandAction(Command c,Displayable d){
  if (c.equals(List.SELECT_COMMAND)) {
    controller.chooseSessionItem(view.getSelectedIndex());
    controller.next();
  }
 else   if (c.equals(CommCareListView.BACK)) {
    transitions.exitMenuTransition();
  }
}","public void _commandAction(Command c,Displayable d){
  if (c.equals(List.SELECT_COMMAND)) {
    controller.chooseSessionItem(view.getSelectedIndex());
    controller.next();
  }
 else   if (c.equals(BACK)) {
    transitions.exitMenuTransition();
  }
}",0.9672447013487476
146942,"private void completeDeleteAction(Object transactionKey){
synchronized (getAccessLock()) {
    if (this.transactionKey == null || deleteActionCache == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    if (!this.transactionKey.equals(transactionKey)) {
      return;
    }
    RMSStorageInfo info=(RMSStorageInfo)deleteActionCache[0];
    Hashtable idIndex=(Hashtable)deleteActionCache[1];
    commitIndex(info,idIndex);
    deleteActionCache=null;
    transactionKey=null;
    setClean();
    storageModified();
  }
}","private void completeDeleteAction(Object transactionKey){
synchronized (getAccessLock()) {
    if (this.transactionKey == null || deleteActionCache == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    if (!this.transactionKey.equals(transactionKey)) {
      return;
    }
    RMSStorageInfo info=(RMSStorageInfo)deleteActionCache[0];
    Hashtable idIndex=(Hashtable)deleteActionCache[1];
    commitIndex(info,idIndex);
    this.deleteActionCache=null;
    this.transactionKey=null;
    setClean();
    storageModified();
  }
}",0.990791896869245
146943,"public void next(){
  String next=session.getNeededData();
  if (next == null) {
    Entry entry=session.getEntriesForCommand(session.getCommand()).elementAt(0);
    String xmlns=session.getForm();
    String title;
    if (CommCareSense.sense()) {
      title=null;
    }
 else {
      title=Localizer.clearArguments(entry.getText().evaluate());
    }
    CommCareFormEntryState state=new CommCareFormEntryState(title,xmlns,getPreloaders(),CommCareContext._().getFuncHandlers()){
      protected void goHome(){
        J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(state);
    return;
  }
  if (next.equals(CommCareSession.STATE_COMMAND_ID)) {
    if (session.getCommand() == null) {
      session.clearState();
      J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
      return;
    }
    MenuHomeState state=new MenuHomeState(this,session.getMenu(session.getCommand())){
      public void entry(      Suite suite,      Entry entry){
        throw new RuntimeException(""String_Node_Str"");
      }
      public void exitMenuTransition(){
        CommCareSessionController.this.back();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(state);
    return;
  }
  Suite suite=session.getCurrentSuite();
  Entry entry=session.getEntriesForCommand(session.getCommand()).elementAt(0);
  if (next.equals(CommCareSession.STATE_REFERRAL_ID)) {
    Entity<PatientReferral> entity=new CommCareEntity<PatientReferral>(suite.getDetail(entry.getShortDetailId()),suite.getDetail(entry.getLongDetailId()),new ReferralInstanceLoader(entry.getReferences()));
    CommCareSelectState<PatientReferral> select=new CommCareSelectState<PatientReferral>(entity,PatientReferral.STORAGE_KEY){
      public void cancel(){
        CommCareSessionController.this.back();
      }
      public void entitySelected(      int id){
        PatientReferral r=CommCareUtil.getReferral(id);
        Case c=CommCareUtil.getCase(r.getLinkedId());
        CommCareSessionController.this.session.setReferral(r.getReferralId(),r.getType());
        CommCareSessionController.this.session.setCaseId(c.getCaseId());
        CommCareSessionController.this.next();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(select,select.getProgressIndicator());
    return;
  }
  if (next.equals(CommCareSession.STATE_CASE_ID)) {
    Entity<Case> entity=new CommCareEntity<Case>(suite.getDetail(entry.getShortDetailId()),suite.getDetail(entry.getLongDetailId()),new CaseInstanceLoader(entry.getReferences()));
    CommCareSelectState<Case> select=new CommCareSelectState<Case>(entity,Case.STORAGE_KEY){
      public void cancel(){
        CommCareSessionController.this.back();
      }
      public void entitySelected(      int id){
        Case c=CommCareUtil.getCase(id);
        CommCareSessionController.this.session.setCaseId(c.getCaseId());
        CommCareSessionController.this.next();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(select,select.getProgressIndicator());
    return;
  }
  if (next.equals(CommCareSession.STATE_FORM_XMLNS)) {
    Entity<FormDef> entity=new CommCareEntity<FormDef>(suite.getDetail(entry.getShortDetailId()),suite.getDetail(entry.getLongDetailId()),new FormDefInstanceLoader(entry.getReferences()));
    CommCareSelectState<FormDef> select=new CommCareSelectState<FormDef>(entity,FormDef.STORAGE_KEY){
      public void cancel(){
        CommCareSessionController.this.back();
      }
      public void entitySelected(      int id){
        FormDef r=CommCareUtil.getForm(id);
        CommCareSessionController.this.session.setXmlns(r.getInstance().schema);
        CommCareSessionController.this.next();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(select,select.getProgressIndicator());
    return;
  }
}","public void next(){
  String next=session.getNeededData();
  if (next == null) {
    String xmlns=session.getForm();
    if (xmlns == null) {
      this.back();
      return;
    }
    Entry entry=session.getEntriesForCommand(session.getCommand()).elementAt(0);
    String title;
    if (CommCareSense.sense()) {
      title=null;
    }
 else {
      title=Localizer.clearArguments(entry.getText().evaluate());
    }
    CommCareFormEntryState state=new CommCareFormEntryState(title,xmlns,getPreloaders(),CommCareContext._().getFuncHandlers()){
      protected void goHome(){
        J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(state);
    return;
  }
  if (next.equals(CommCareSession.STATE_COMMAND_ID)) {
    if (session.getCommand() == null) {
      session.clearState();
      J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
      return;
    }
    MenuHomeState state=new MenuHomeState(this,session.getMenu(session.getCommand())){
      public void entry(      Suite suite,      Entry entry){
        throw new RuntimeException(""String_Node_Str"");
      }
      public void exitMenuTransition(){
        CommCareSessionController.this.back();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(state);
    return;
  }
  Suite suite=session.getCurrentSuite();
  Entry entry=session.getEntriesForCommand(session.getCommand()).elementAt(0);
  if (next.equals(CommCareSession.STATE_REFERRAL_ID)) {
    Entity<PatientReferral> entity=new CommCareEntity<PatientReferral>(suite.getDetail(entry.getShortDetailId()),suite.getDetail(entry.getLongDetailId()),new ReferralInstanceLoader(entry.getReferences()));
    CommCareSelectState<PatientReferral> select=new CommCareSelectState<PatientReferral>(entity,PatientReferral.STORAGE_KEY){
      public void cancel(){
        CommCareSessionController.this.back();
      }
      public void entitySelected(      int id){
        PatientReferral r=CommCareUtil.getReferral(id);
        Case c=CommCareUtil.getCase(r.getLinkedId());
        CommCareSessionController.this.session.setReferral(r.getReferralId(),r.getType());
        CommCareSessionController.this.session.setCaseId(c.getCaseId());
        CommCareSessionController.this.next();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(select,select.getProgressIndicator());
    return;
  }
  if (next.equals(CommCareSession.STATE_CASE_ID)) {
    Entity<Case> entity=new CommCareEntity<Case>(suite.getDetail(entry.getShortDetailId()),suite.getDetail(entry.getLongDetailId()),new CaseInstanceLoader(entry.getReferences()));
    CommCareSelectState<Case> select=new CommCareSelectState<Case>(entity,Case.STORAGE_KEY){
      public void cancel(){
        CommCareSessionController.this.back();
      }
      public void entitySelected(      int id){
        Case c=CommCareUtil.getCase(id);
        CommCareSessionController.this.session.setCaseId(c.getCaseId());
        CommCareSessionController.this.next();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(select,select.getProgressIndicator());
    return;
  }
  if (next.equals(CommCareSession.STATE_FORM_XMLNS)) {
    Entity<FormDef> entity=new CommCareEntity<FormDef>(suite.getDetail(entry.getShortDetailId()),suite.getDetail(entry.getLongDetailId()),new FormDefInstanceLoader(entry.getReferences()));
    CommCareSelectState<FormDef> select=new CommCareSelectState<FormDef>(entity,FormDef.STORAGE_KEY){
      public void cancel(){
        CommCareSessionController.this.back();
      }
      public void entitySelected(      int id){
        FormDef r=CommCareUtil.getForm(id);
        CommCareSessionController.this.session.setXmlns(r.getInstance().schema);
        CommCareSessionController.this.next();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(select,select.getProgressIndicator());
    return;
  }
}",0.9824380165289256
146944,"public Vector<Entry> getEntriesForCommand(String commandId){
  Hashtable<String,Entry> map=platform.getMenuMap();
  Menu menu=null;
  Entry entry=null;
  top:   for (  Suite s : platform.getInstalledSuites()) {
    for (    Menu m : s.getMenus()) {
      if (currentCmd.equals(m.getId())) {
        menu=m;
        break top;
      }
      if (s.getEntries().containsKey(currentCmd)) {
        entry=s.getEntries().get(currentCmd);
        break top;
      }
    }
  }
  Vector<Entry> entries=new Vector<Entry>();
  if (entry != null) {
    entries.addElement(entry);
  }
  if (menu != null) {
    for (    String cmd : menu.getCommandIds()) {
      Entry e=map.get(cmd);
      entries.addElement(e);
    }
  }
  return entries;
}","public Vector<Entry> getEntriesForCommand(String commandId){
  Hashtable<String,Entry> map=platform.getMenuMap();
  Menu menu=null;
  Entry entry=null;
  top:   for (  Suite s : platform.getInstalledSuites()) {
    for (    Menu m : s.getMenus()) {
      if (commandId.equals(m.getId())) {
        menu=m;
        break top;
      }
      if (s.getEntries().containsKey(commandId)) {
        entry=s.getEntries().get(commandId);
        break top;
      }
    }
  }
  Vector<Entry> entries=new Vector<Entry>();
  if (entry != null) {
    entries.addElement(entry);
  }
  if (menu != null) {
    for (    String cmd : menu.getCommandIds()) {
      Entry e=map.get(cmd);
      entries.addElement(e);
    }
  }
  return entries;
}",0.3953328757721345
146945,"private boolean handled(Object a,Object b,Object sentinal,Vector<Object> pivots) throws UnpivotableExpressionException {
  if (sentinal == a) {
    if (b == null) {
      throw new UnpivotableExpressionException();
    }
 else     if (sentinal == b) {
      throw new UnpivotableExpressionException();
    }
 else {
      pivots.addElement(new CmpPivot(((Double)b).doubleValue(),op));
      return true;
    }
  }
  return false;
}","private boolean handled(Object a,Object b,Object sentinal,Vector<Object> pivots) throws UnpivotableExpressionException {
  if (sentinal == a) {
    if (b == null) {
      throw new UnpivotableExpressionException();
    }
 else     if (sentinal == b) {
      throw new UnpivotableExpressionException();
    }
 else {
      Double val=null;
      if (b instanceof Double) {
        val=(Double)b;
      }
 else {
        if (b instanceof Integer) {
          val=new Double(((Integer)b).doubleValue());
        }
        if (b instanceof Long) {
          val=new Double(((Long)b).doubleValue());
        }
        if (b instanceof Float) {
          val=new Double(((Float)b).doubleValue());
        }
        if (b instanceof Short) {
          val=new Double(((Short)b).shortValue());
        }
        if (b instanceof Byte) {
          val=new Double(((Byte)b).byteValue());
        }
 else {
          throw new UnpivotableExpressionException(""String_Node_Str"" + b);
        }
      }
      pivots.addElement(new CmpPivot(val.doubleValue(),op));
      return true;
    }
  }
  return false;
}",0.550098231827112
146946,"public void loggedIn(User u,String password){
  CommCareContext._().setUser(u,password == null ? null : new DefaultHttpCredentialProvider(u.getUsername(),password));
  Logger.log(""String_Node_Str"",PropertyUtils.trim(u.getUniqueId(),8) + ""String_Node_Str"" + u.getUsername());
  CommCareContext._().toggleDemoMode(User.DEMO_USER.equals(u.getUserType()));
  J2MEDisplay.startStateWithLoadingScreen(new DeviceReportState(){
    public String getDestURL(){
      String url=PropertyManager._().getSingularProperty(LogPropertyRules.LOG_SUBMIT_URL);
      if (url == null) {
        url=CommCareContext._().getSubmitURL();
      }
      return url;
    }
    public void done(){
      J2MEDisplay.startStateWithLoadingScreen(new PeriodicWrapperState(CommCareContext._().getEventDescriptors()){
        public void done(){
          J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
        }
      }
);
    }
  }
);
}","public void loggedIn(User u,String password){
  CommCareContext._().setUser(u,password == null ? null : new DefaultHttpCredentialProvider(u.getUsername(),password));
  Logger.log(""String_Node_Str"",PropertyUtils.trim(u.getUniqueId(),8) + ""String_Node_Str"" + u.getUsername());
  CommCareContext._().toggleDemoMode(User.DEMO_USER.equals(u.getUserType()));
  CommCareUtil.launchHomeWithSchedulers();
}",0.5532879818594104
146947,"public static void launchFirstState(){
  if (!CommCareContext._().getManager().getCurrentProfile().isFeatureActive(""String_Node_Str"")) {
    CommCareUtil.launchHomeState();
    return;
  }
  if (CommCareProperties.FIRST_RUN_YES.equals(PropertyManager._().getSingularProperty(CommCareProperties.IS_FIRST_RUN))) {
    J2MEDisplay.startStateWithLoadingScreen(new CommCareFirstStartState());
  }
 else {
    J2MEDisplay.startStateWithLoadingScreen(new CommCareLoginState());
  }
}","public static void launchFirstState(){
  if (!CommCareContext._().getManager().getCurrentProfile().isFeatureActive(""String_Node_Str"")) {
    CommCareUtil.launchHomeWithSchedulers();
    return;
  }
  if (CommCareProperties.FIRST_RUN_YES.equals(PropertyManager._().getSingularProperty(CommCareProperties.IS_FIRST_RUN))) {
    J2MEDisplay.startStateWithLoadingScreen(new CommCareFirstStartState());
  }
 else {
    J2MEDisplay.startStateWithLoadingScreen(new CommCareLoginState());
  }
}",0.980228928199792
146948,"/** 
 * Process the response to the current message (may have side effects).
 * @param message A completed transport message with an available response.
 * @return A string with the user facing messages which were parsed out from that response. 
 * @throws InvalidStructureException If the response is present, but incorrectly structured
 * @throws IOException 
 * @throws UnfullfilledRequirementsException If the isn't capable of processing the provided messagefor well recognized reasons (Like the API version of the response being above that currently understood) 
 * @throws XmlPullParserException
 */
public String processResponse(SimpleHttpTransportMessage message) throws InvalidStructureException, IOException, UnfullfilledRequirementsException, XmlPullParserException {
  if (message.getResponseProperties() != null && message.getResponseProperties().getORApiVersion().equals(ONE_OH)) {
    byte[] response=message.getResponseBody();
    CommCareTransactionParserFactory factory=new CommCareTransactionParserFactory(true);
    DataModelPullParser parser=new DataModelPullParser(new ByteArrayInputStream(response),factory);
    boolean success=parser.parse();
    if (factory.getResponseMessage() != null) {
      return factory.getResponseMessage();
    }
 else {
      return null;
    }
  }
  throw new UnfullfilledRequirementsException(""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_ENVIRONMENT);
}","/** 
 * Process the response to the current message (may have side effects).
 * @param message A completed transport message with an available response.
 * @return A string with the user facing messages which were parsed out from that response. 
 * @throws InvalidStructureException If the response is present, but incorrectly structured
 * @throws IOException 
 * @throws UnfullfilledRequirementsException If the isn't capable of processing the provided messagefor well recognized reasons (Like the API version of the response being above that currently understood) 
 * @throws XmlPullParserException
 */
public String processResponse(SimpleHttpTransportMessage message) throws InvalidStructureException, IOException, UnfullfilledRequirementsException, XmlPullParserException {
  if (message.getResponseProperties() != null && ONE_OH.equals(message.getResponseProperties().getORApiVersion())) {
    byte[] response=message.getResponseBody();
    CommCareTransactionParserFactory factory=new CommCareTransactionParserFactory(true);
    DataModelPullParser parser=new DataModelPullParser(new ByteArrayInputStream(response),factory);
    boolean success=parser.parse();
    if (factory.getResponseMessage() != null) {
      return factory.getResponseMessage();
    }
 else {
      return null;
    }
  }
  throw new UnfullfilledRequirementsException(""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_ENVIRONMENT);
}",0.9599719101123596
146949,"/** 
 * Whether the processor knows that it is capable of processing the response to the current message.
 * @param message A completed transport message with an available response.
 * @return true if the processor should be able to handle the response. false otherwise.
 */
public boolean handlesResponse(SimpleHttpTransportMessage message){
  if (message.getResponseProperties() != null && message.getResponseProperties().getORApiVersion().equals(ONE_OH)) {
    return true;
  }
  return false;
}","/** 
 * Whether the processor knows that it is capable of processing the response to the current message.
 * @param message A completed transport message with an available response.
 * @return true if the processor should be able to handle the response. false otherwise.
 */
public boolean handlesResponse(SimpleHttpTransportMessage message){
  if (message.getResponseProperties() != null && ONE_OH.equals(message.getResponseProperties().getORApiVersion())) {
    return true;
  }
  return false;
}",0.8855421686746988
146950,"/** 
 * convert the data object returned by the xpath expression into an IAnswerData suitable for storage in the FormInstance
 */
private static IAnswerData wrapData(Object val,int dataType){
  if ((val instanceof String && ((String)val).length() == 0) || (val instanceof Double && ((Double)val).isNaN())) {
    return null;
  }
  if (Constants.DATATYPE_BOOLEAN == dataType || val instanceof Boolean) {
    boolean b;
    if (val instanceof Boolean) {
      b=((Boolean)val).booleanValue();
    }
 else     if (val instanceof Double) {
      Double d=(Double)val;
      b=Math.abs(d.doubleValue()) > 1.0e-12 && !Double.isNaN(d);
    }
 else     if (val instanceof String) {
      String s=(String)val;
      b=s.length() > 0;
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
    return new BooleanData(b);
  }
 else   if (val instanceof Double) {
    double d=((Double)val).doubleValue();
    long l=(long)d;
    boolean isIntegral=Math.abs(d - l) < 1.0e-9;
    if (Constants.DATATYPE_INTEGER == dataType || (isIntegral && (Integer.MAX_VALUE >= l) && (Integer.MIN_VALUE <= l))) {
      return new IntegerData((int)d);
    }
 else     if (Constants.DATATYPE_LONG == dataType || isIntegral) {
      return new LongData((long)d);
    }
 else {
      return new DecimalData(d);
    }
  }
 else   if (val instanceof String) {
    return new StringData((String)val);
  }
 else   if (val instanceof Date) {
    return (dataType == Constants.DATATYPE_DATE_TIME ? new DateTimeData((Date)val) : new DateData((Date)val));
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + val.getClass().getName());
  }
}","/** 
 * convert the data object returned by the xpath expression into an IAnswerData suitable for storage in the FormInstance
 */
private static IAnswerData wrapData(Object val,int dataType){
  if ((val instanceof String && ((String)val).length() == 0) || (val instanceof Double && ((Double)val).isNaN())) {
    return null;
  }
  if (Constants.DATATYPE_BOOLEAN == dataType || val instanceof Boolean) {
    boolean b;
    if (val instanceof Boolean) {
      b=((Boolean)val).booleanValue();
    }
 else     if (val instanceof Double) {
      Double d=(Double)val;
      b=Math.abs(d.doubleValue()) > 1.0e-12 && !Double.isNaN(d);
    }
 else     if (val instanceof String) {
      String s=(String)val;
      b=s.length() > 0;
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
    return new BooleanData(b);
  }
 else   if (val instanceof Double) {
    double d=((Double)val).doubleValue();
    long l=(long)d;
    boolean isIntegral=Math.abs(d - l) < 1.0e-9;
    if (Constants.DATATYPE_INTEGER == dataType || (isIntegral && (Integer.MAX_VALUE >= l) && (Integer.MIN_VALUE <= l))) {
      return new IntegerData((int)d);
    }
 else     if (Constants.DATATYPE_LONG == dataType || isIntegral) {
      return new LongData((long)d);
    }
 else {
      return new DecimalData(d);
    }
  }
 else   if (val instanceof String) {
    return new StringData((String)val);
  }
 else   if (val instanceof Date) {
    if (dataType == Constants.DATATYPE_DATE_TIME) {
      return new DateTimeData((Date)val);
    }
 else     if (dataType == Constants.DATATYPE_TIME) {
      return new TimeData((Date)val);
    }
 else {
      return new DateData((Date)val);
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + val.getClass().getName());
  }
}",0.9411418481459682
146951,"/** 
 * Creates a new entry model for the form with the appropriate repeat structure
 * @param form
 * @param repeatStructure The structure of repeats (the repeat signals which shouldbe sent during form entry)
 * @throws IllegalArgumentException If repeatStructure is not valid
 */
public FormEntryModel(FormDef form,int repeatStructure){
  this.form=form;
  if (repeatStructure != REPEAT_STRUCTURE_LINEAR && repeatStructure != REPEAT_STRUCTURE_NON_LINEAR) {
    throw new IllegalArgumentException(repeatStructure + ""String_Node_Str"");
  }
  this.repeatStructure=repeatStructure;
  this.currentFormIndex=FormIndex.createBeginningOfFormIndex();
}","/** 
 * Creates a new entry model for the form with the appropriate repeat structure
 * @param form
 * @param repeatStructure The structure of repeats (the repeat signals which shouldbe sent during form entry)
 * @throws IllegalArgumentException If repeatStructure is not valid
 */
public FormEntryModel(FormDef form,int repeatStructure){
  this.form=form;
  if (repeatStructure != REPEAT_STRUCTURE_LINEAR && repeatStructure != REPEAT_STRUCTURE_NON_LINEAR) {
    throw new IllegalArgumentException(repeatStructure + ""String_Node_Str"");
  }
  if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR && containsRepeatGuesses(form)) {
    repeatStructure=REPEAT_STRUCTURE_LINEAR;
  }
  this.repeatStructure=repeatStructure;
  this.currentFormIndex=FormIndex.createBeginningOfFormIndex();
}",0.9046283309957924
146952,"/** 
 * For the current index: Checks whether the index represents a node which should exist given a non-interactive repeat, along with a count for that repeat which is beneath the dynamic level specified. If this index does represent such a node, the new model for the repeat is created behind the scenes and the index for the initial question is returned. Note: This method will not prevent the addition of new repeat elements in the interface, it will merely use the xforms repeat hint to create new nodes that are assumed to exist
 * @param The index to be evaluated as to whether the underlying model ishinted to exist
 */
private void createModelIfNecessary(FormIndex index){
  if (index.isInForm()) {
    IFormElement e=getForm().getChild(index);
    if (e instanceof GroupDef) {
      GroupDef g=(GroupDef)e;
      if (g.getRepeat() && g.getCountReference() != null) {
        IAnswerData count=getForm().getInstance().getDataValue(g.getCountReference());
        if (count != null) {
          int fullcount=((Integer)count.getValue()).intValue();
          TreeReference ref=getForm().getChildInstanceRef(index);
          TreeElement element=getForm().getInstance().resolveReference(ref);
          if (element == null) {
            if (index.getInstanceIndex() < fullcount) {
              try {
                getForm().createNewRepeat(index);
              }
 catch (              InvalidReferenceException ire) {
                ire.printStackTrace();
                throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
              }
            }
          }
        }
      }
    }
  }
}","/** 
 * For the current index: Checks whether the index represents a node which should exist given a non-interactive repeat, along with a count for that repeat which is beneath the dynamic level specified. If this index does represent such a node, the new model for the repeat is created behind the scenes and the index for the initial question is returned. Note: This method will not prevent the addition of new repeat elements in the interface, it will merely use the xforms repeat hint to create new nodes that are assumed to exist
 * @param The index to be evaluated as to whether the underlying model ishinted to exist
 */
private void createModelIfNecessary(FormIndex index){
  if (index.isInForm()) {
    IFormElement e=getForm().getChild(index);
    if (e instanceof GroupDef) {
      GroupDef g=(GroupDef)e;
      if (g.getRepeat() && g.getCountReference() != null) {
        IAnswerData count=getForm().getInstance().getDataValue(g.getCountReference());
        if (count != null) {
          long fullcount=((Integer)count.getValue()).intValue();
          TreeReference ref=getForm().getChildInstanceRef(index);
          TreeElement element=getForm().getInstance().resolveReference(ref);
          if (element == null) {
            if (index.getInstanceIndex() < fullcount) {
              try {
                getForm().createNewRepeat(index);
              }
 catch (              InvalidReferenceException ire) {
                ire.printStackTrace();
                throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
              }
            }
          }
        }
      }
    }
  }
}",0.9978428351309708
146953,"/** 
 * convert a value to a date. note that xpath has no intrinsic representation of dates, so this is off-spec. dates convert to strings as 'yyyy-mm-dd', convert to numbers as # of days since the unix epoch, and convert to booleans always as 'true' string and int conversions are reversable, however: * cannot convert bool to date * empty string and NaN (xpath's 'null values') go unchanged, instead of being converted into a date (which would cause an error, since Date has no null value (other than java null, which the xpath engine can't handle)) * note, however, than non-empty strings that aren't valid dates _will_ cause an error during conversion
 * @param o
 * @return
 */
public static Object toDate(Object o){
  o=unpack(o);
  if (o instanceof Double) {
    Double n=toInt(o);
    if (n.isNaN()) {
      return n;
    }
    if (n.isInfinite() || n.doubleValue() > Integer.MAX_VALUE || n.doubleValue() < Integer.MIN_VALUE) {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
    return DateUtils.dateAdd(DateUtils.getDate(1970,1,1),n.intValue());
  }
 else   if (o instanceof String) {
    String s=(String)o;
    if (s.length() == 0) {
      return s;
    }
    Date d=DateUtils.parseDate(s);
    if (d == null) {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
 else {
      return d;
    }
  }
 else   if (o instanceof Date) {
    return DateUtils.roundDate((Date)o);
  }
 else {
    throw new XPathTypeMismatchException(""String_Node_Str"");
  }
}","/** 
 * convert a value to a date. note that xpath has no intrinsic representation of dates, so this is off-spec. dates convert to strings as 'yyyy-mm-dd', convert to numbers as # of days since the unix epoch, and convert to booleans always as 'true' string and int conversions are reversable, however: * cannot convert bool to date * empty string and NaN (xpath's 'null values') go unchanged, instead of being converted into a date (which would cause an error, since Date has no null value (other than java null, which the xpath engine can't handle)) * note, however, than non-empty strings that aren't valid dates _will_ cause an error during conversion
 * @param o
 * @return
 */
public static Object toDate(Object o){
  o=unpack(o);
  if (o instanceof Double) {
    Double n=toInt(o);
    if (n.isNaN()) {
      return n;
    }
    if (n.isInfinite() || n.doubleValue() > Integer.MAX_VALUE || n.doubleValue() < Integer.MIN_VALUE) {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
    return DateUtils.dateAdd(DateUtils.getDate(1970,1,1),n.intValue());
  }
 else   if (o instanceof String) {
    String s=(String)o;
    if (s.length() == 0) {
      return s;
    }
    Date d=DateUtils.parseDateTime(s);
    if (d == null) {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
 else {
      return d;
    }
  }
 else   if (o instanceof Date) {
    return DateUtils.roundDate((Date)o);
  }
 else {
    throw new XPathTypeMismatchException(""String_Node_Str"");
  }
}",0.9986684420772304
146954,"public void _commandAction(Command c,Displayable d){
  if (c.equals(CommCareOTACredentialEntry.DOWNLOAD)) {
    if (userExists(entry.getUsername())) {
      entry.sendMessage(Localization.get(""String_Node_Str""));
      return;
    }
    tryDownload(getClientMessage());
  }
 else   if (d == entry && c.equals(CommCareOTACredentialEntry.CANCEL)) {
    transitions.cancel();
  }
 else   if (c.equals(view.FINISHED)) {
    transitions.done(errorsOccurred);
  }
}","public void _commandAction(Command c,Displayable d){
  if (c.equals(CommCareOTACredentialEntry.DOWNLOAD)) {
    if (userExists(entry.getUsername()) && !isSync) {
      entry.sendMessage(Localization.get(""String_Node_Str""));
      return;
    }
    tryDownload(getClientMessage());
  }
 else   if (d == entry && c.equals(CommCareOTACredentialEntry.CANCEL)) {
    transitions.cancel();
  }
 else   if (c.equals(view.FINISHED)) {
    transitions.done(errorsOccurred);
  }
}",0.9881593110871906
146955,"/** 
 * @param stream
 * @throws IOException If there was a problem which resulted in the cachedfile being corrupted or unavailable _and_ the input stream becoming invalidated such that a retry is necessary.
 */
private void downloadRemoteData(InputStream stream) throws IOException {
  J2MEDisplay.setView(view);
  Reference ref;
  try {
    ref=ReferenceManager._().DeriveReference(getCacheRef());
    if (ref.isReadOnly()) {
      view.addToMessage(Localization.get(""String_Node_Str""));
    }
 else {
      OutputStream output;
      try {
        if (ref.doesBinaryExist()) {
          ref.remove();
        }
        output=ref.getOutputStream();
      }
 catch (      Exception e) {
        noCache(stream);
        return;
      }
      StreamsUtil.writeFromInputToOutput(stream,output);
      view.addToMessage(Localization.get(""String_Node_Str""));
      startRestore(ref.getStream());
    }
  }
 catch (  InvalidReferenceException e) {
    noCache(stream);
  }
}","/** 
 * @param stream
 * @throws IOException If there was a problem which resulted in the cachedfile being corrupted or unavailable _and_ the input stream becoming invalidated such that a retry is necessary.
 */
private void downloadRemoteData(InputStream stream) throws IOException {
  J2MEDisplay.setView(view);
  Reference ref;
  try {
    ref=ReferenceManager._().DeriveReference(getCacheRef());
    if (ref.isReadOnly()) {
      view.addToMessage(Localization.get(""String_Node_Str""));
    }
 else {
      OutputStream output;
      try {
        if (ref.doesBinaryExist()) {
          ref.remove();
        }
        output=ref.getOutputStream();
      }
 catch (      Exception e) {
        noCache(stream);
        return;
      }
      StreamsUtil.writeFromInputToOutput(stream,output);
      output.close();
      view.addToMessage(Localization.get(""String_Node_Str""));
      startRestore(ref.getStream());
    }
  }
 catch (  InvalidReferenceException e) {
    noCache(stream);
  }
}",0.9887983706720976
146956,"public void requestConstraintHint(ConstraintHint hint) throws UnpivotableExpressionException {
  hint.init(new EvaluationContext(new EvaluationContext(),mTreeElement.getRef()),mTreeElement.getConstraint().constraint,this.form.getInstance());
}","public void requestConstraintHint(ConstraintHint hint) throws UnpivotableExpressionException {
  Constraint c=mTreeElement.getConstraint();
  if (c != null) {
    hint.init(new EvaluationContext(new EvaluationContext(),mTreeElement.getRef()),c.constraint,this.form.getInstance());
  }
 else {
    throw new UnpivotableExpressionException();
  }
}",0.6587436332767402
146957,"public Object pivot(FormInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  return eval(model,evalContext);
}","/** 
 * Pivot this expression, returning values if appropriate, and adding any pivots to the list. 
 * @param model The model to evaluate the current expression against
 * @param evalContext The evaluation context to evaluate against
 * @param pivots The list of pivot points in the xpath being evaluated. Pivots should be added to this list.
 * @param sentinal The value which is being pivoted around.
 * @return null - If a pivot was identified in this expression sentinal - If the current expression represents the sentinal being pivoted any other value - The result of the expression if no pivots are detected
 * @throws UnpivotableExpressionException If the expression is too complex to pivot
 */
public Object pivot(FormInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  return eval(model,evalContext);
}",0.3426966292134831
146958,"/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(FormInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.TRUE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.FALSE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toBoolean(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toNumeric(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toInt(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toString(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDate(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolNot(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolStr(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return dateStr(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(argVals[0],argVals[1],argVals[2]);
  }
 else   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
    return multiSelected(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return countSelected(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return (!isNull(argVals[0]) ? argVals[0] : argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return count(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    if (argVals[0] instanceof XPathNodeset) {
      return sum(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return DateUtils.roundDate(new Date());
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Date();
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
      return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return join(""String_Node_Str"",argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
      return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
    }
 else {
      return join(argVals[0],subsetArgList(argVals,1));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2) {
    if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
      return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
    }
 else {
      return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
    if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
      Object[] factors=((XPathNodeset)argVals[2]).toArgList();
      Object[] weights=((XPathNodeset)argVals[3]).toArgList();
      if (factors.length != weights.length) {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
      return checklistWeighted(argVals[0],argVals[1],factors,weights);
    }
 else {
      return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return regex(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    return argVals[0];
  }
 else {
    IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
    if (handler != null) {
      return evalCustomFunction(handler,argVals);
    }
 else {
      throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}","/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(FormInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.TRUE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.FALSE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toBoolean(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toNumeric(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toInt(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toString(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDate(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolNot(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolStr(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return dateStr(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(argVals[0],argVals[1],argVals[2]);
  }
 else   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
    return multiSelected(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return countSelected(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return (!isNull(argVals[0]) ? argVals[0] : argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return count(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    if (argVals[0] instanceof XPathNodeset) {
      return sum(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return DateUtils.roundDate(new Date());
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Date();
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
      return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return join(""String_Node_Str"",argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
      return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
    }
 else {
      return join(argVals[0],subsetArgList(argVals,1));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return stringLength(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2) {
    if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
      return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
    }
 else {
      return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
    if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
      Object[] factors=((XPathNodeset)argVals[2]).toArgList();
      Object[] weights=((XPathNodeset)argVals[3]).toArgList();
      if (factors.length != weights.length) {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
      return checklistWeighted(argVals[0],argVals[1],factors,weights);
    }
 else {
      return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return regex(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    return argVals[0];
  }
 else {
    IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
    if (handler != null) {
      return evalCustomFunction(handler,argVals);
    }
 else {
      throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}",0.9891005398798004
146959,"public void done(boolean errorsOccurred){
  done();
}",public abstract void done();,0.4691358024691358
146960,"public CommCareAddUserState(){
  super(PropertyManager._().getSingularProperty(CommCareProperties.USER_REG_NAMESPACE),CommCareContext._().getPreloaders(),CommCareContext._().getFuncHandlers());
}","public CommCareAddUserState(){
  super(PropertyManager._().getSingularProperty(CommCareProperties.USER_REG_NAMESPACE),filterPreloaders(CommCareContext._().getPreloaders()),CommCareContext._().getFuncHandlers());
}",0.9558823529411764
146961,"public CommCareEditUserState(User u){
  super(u,PropertyManager._().getSingularProperty(CommCareProperties.USER_REG_NAMESPACE),CommCareContext._().getPreloaders(),CommCareContext._().getFuncHandlers());
}","public CommCareEditUserState(User u){
  super(u,PropertyManager._().getSingularProperty(CommCareProperties.USER_REG_NAMESPACE),CommCareAddUserState.filterPreloaders(CommCareContext._().getPreloaders()),CommCareContext._().getFuncHandlers());
}",0.912751677852349
146962,"/** 
 * This method is generally used to retrieve special forms for a  (select or 1select) item, e.g. ""audio"", ""video"", etc.
 * @param sel - The Item whose text you're trying to retrieve.
 * @param form - Special text form of Item you're trying to retrieve. 
 * @return Special Form Text. <code>null</code> if no text for this element exists (with the specified special form).
 * @throws RunTimeException if this method is called on an element that is NOT a QuestionDef
 * @throws IllegalArgumentException if <code>sel == null</code>
 */
public String getSpecialFormSelectItemText(Selection sel,String form){
  if (sel == null)   throw new IllegalArgumentException(""String_Node_Str"");
  String textID=sel.choice.getTextID();
  if (textID == null || textID.equals(""String_Node_Str""))   return null;
  String returnText=getIText(textID,form);
  return substituteStringArgs(returnText);
}","/** 
 * This method is generally used to retrieve special forms for a  (select or 1select) item, e.g. ""audio"", ""video"", etc.
 * @param sel - The Item whose text you're trying to retrieve.
 * @param form - Special text form of Item you're trying to retrieve. 
 * @return Special Form Text. <code>null</code> if no text for this element exists (with the specified special form).
 * @throws RunTimeException if this method is called on an element that is NOT a QuestionDef
 * @throws IllegalArgumentException if <code>sel == null</code>
 */
public String getSpecialFormSelectItemText(Selection sel,String form){
  if (sel == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (sel.index == -1) {
    sel.attachChoice(this.getQuestion());
  }
  String textID=sel.choice.getTextID();
  if (textID == null || textID.equals(""String_Node_Str""))   return null;
  String returnText=getIText(textID,form);
  return substituteStringArgs(returnText);
}",0.9614340032590984
146963,"/** 
 * Attempts to return the specified Item (from a select or 1select) text. Will check for text in the following order:<br/> Localized Text (long form) -> Localized Text (no special form) <br /> If no textID is available, method will return this item's labelInnerText.
 * @param sel the selection (item), if <code>null</code> will throw a IllegalArgumentException
 * @return Question Text.  <code>null</code> if no text for this element exists (after all fallbacks).
 * @throws RunTimeException if this method is called on an element that is NOT a QuestionDef
 * @throws IllegalArgumentException if Selection is <code>null</code>
 */
public String getSelectItemText(Selection sel){
  if (!(getFormElement() instanceof QuestionDef))   throw new RuntimeException(""String_Node_Str"");
  if (sel == null)   throw new IllegalArgumentException(""String_Node_Str"");
  String tid=sel.choice.getTextID();
  if (tid == null || tid == ""String_Node_Str"")   return substituteStringArgs(sel.choice.getLabelInnerText());
  String returnText;
  returnText=getIText(tid,""String_Node_Str"");
  if (returnText == null)   returnText=getIText(tid,null);
  return substituteStringArgs(returnText);
}","/** 
 * Attempts to return the specified Item (from a select or 1select) text. Will check for text in the following order:<br/> Localized Text (long form) -> Localized Text (no special form) <br /> If no textID is available, method will return this item's labelInnerText.
 * @param sel the selection (item), if <code>null</code> will throw a IllegalArgumentException
 * @return Question Text.  <code>null</code> if no text for this element exists (after all fallbacks).
 * @throws RunTimeException if this method is called on an element that is NOT a QuestionDef
 * @throws IllegalArgumentException if Selection is <code>null</code>
 */
public String getSelectItemText(Selection sel){
  if (!(getFormElement() instanceof QuestionDef))   throw new RuntimeException(""String_Node_Str"");
  if (sel == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (sel.index == -1) {
    sel.attachChoice(this.getQuestion());
  }
  String tid=sel.choice.getTextID();
  if (tid == null || tid == ""String_Node_Str"")   return substituteStringArgs(sel.choice.getLabelInnerText());
  String returnText;
  returnText=getIText(tid,""String_Node_Str"");
  if (returnText == null)   returnText=getIText(tid,null);
  return substituteStringArgs(returnText);
}",0.970721649484536
146964,"public CommCareOTARestoreState(boolean isSync,HttpAuthenticator authenticator){
  this.isSync=isSync;
  this.authenticator=authenticator;
  this.noPartial=getPartialRestoreSetting();
  controller=getController();
}","public CommCareOTARestoreState(boolean isSync,HttpAuthenticator authenticator){
  this.isSync=isSync;
  this.authenticator=authenticator;
  this.partial=getPartialRestoreSetting();
  controller=getController();
}",0.9906103286384976
146965,"protected CommCareOTARestoreController getController(){
  return new CommCareOTARestoreController(this,CommCareContext._().getOTAURL(),authenticator,isSync,noPartial);
}","protected CommCareOTARestoreController getController(){
  return new CommCareOTARestoreController(this,CommCareContext._().getOTAURL(),authenticator,isSync,!partial);
}",0.9851632047477744
146966,"public TransactionParser getParser(String name,String namespace,KXmlParser parser){
  if (name.toLowerCase().equals(""String_Node_Str"")) {
    return new CaseXmlParser(parser,caseTallies);
  }
 else   if (name.toLowerCase().equals(""String_Node_Str"")) {
    return new UserXmlParser(parser);
  }
 else   if (name.equalsIgnoreCase(""String_Node_Str"")) {
    return new TransactionParser<String>(parser,""String_Node_Str"",null){
      public void commit(      String parsed) throws IOException {
      }
      public String parse() throws XmlPullParserException, IOException {
        String restoreID=parser.nextText().trim();
        restoreIDWrapper[0]=restoreID;
        return restoreID;
      }
    }
;
  }
  return null;
}","public TransactionParser getParser(String name,String namespace,KXmlParser parser){
  if (name.toLowerCase().equals(""String_Node_Str"")) {
    return new CaseXmlParser(parser,caseTallies,!noPartial);
  }
 else   if (name.toLowerCase().equals(""String_Node_Str"")) {
    return new UserXmlParser(parser);
  }
 else   if (name.equalsIgnoreCase(""String_Node_Str"")) {
    return new TransactionParser<String>(parser,""String_Node_Str"",null){
      public void commit(      String parsed) throws IOException {
      }
      public String parse() throws XmlPullParserException, IOException {
        String restoreID=parser.nextText().trim();
        restoreIDWrapper[0]=restoreID;
        return restoreID;
      }
    }
;
  }
  return null;
}",0.9924502402196294
146967,"public boolean startRestore(InputStream input){
  J2MEDisplay.setView(view);
  view.addToMessage(Localization.get(""String_Node_Str""));
  final String[] restoreIDWrapper={null};
  errorsOccurred=false;
  boolean success=false;
  String restoreID=null;
  String[] parseErrors=new String[0];
  try {
    beginTransaction();
    DataModelPullParser parser=new DataModelPullParser(input,new TransactionParserFactory(){
      public TransactionParser getParser(      String name,      String namespace,      KXmlParser parser){
        if (name.toLowerCase().equals(""String_Node_Str"")) {
          return new CaseXmlParser(parser,caseTallies);
        }
 else         if (name.toLowerCase().equals(""String_Node_Str"")) {
          return new UserXmlParser(parser);
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          return new TransactionParser<String>(parser,""String_Node_Str"",null){
            public void commit(            String parsed) throws IOException {
            }
            public String parse() throws XmlPullParserException, IOException {
              String restoreID=parser.nextText().trim();
              restoreIDWrapper[0]=restoreID;
              return restoreID;
            }
          }
;
        }
        return null;
      }
    }
);
    success=parser.parse();
    restoreID=restoreIDWrapper[0];
    if (success) {
      PropertyManager._().setProperty(CommCareProperties.LAST_SUCCESSFUL_SYNC,restoreID);
      PropertyManager._().setProperty(CommCareProperties.LAST_SYNC_AT,DateUtils.formatDateTime(new Date(),DateUtils.FORMAT_ISO8601));
    }
    parseErrors=parser.getParseErrors();
  }
 catch (  IOException e) {
    fail(Localization.get(""String_Node_Str""),e,null);
    return false;
  }
catch (  InvalidStructureException e) {
    fail(Localization.get(""String_Node_Str""),e,null);
    return false;
  }
catch (  XmlPullParserException e) {
    fail(Localization.get(""String_Node_Str""),e,null);
    return false;
  }
catch (  UnfullfilledRequirementsException e) {
    fail(Localization.get(""String_Node_Str""),e,null);
    return false;
  }
catch (  RuntimeException e) {
    success=false;
  }
 finally {
    if (success) {
      commitTransaction();
    }
 else {
      rollbackTransaction();
    }
  }
  if (success) {
    view.addToMessage(Localization.get(""String_Node_Str""));
    Logger.log(""String_Node_Str"",""String_Node_Str"" + (restoreID != null ? restoreID : ""String_Node_Str""));
  }
 else {
    if (noPartial) {
      view.addToMessage(Localization.get(""String_Node_Str""));
    }
 else {
      view.addToMessage(Localization.get(""String_Node_Str"") + ""String_Node_Str"" + parseErrors.length);
    }
    Logger.log(""String_Node_Str"",(noPartial ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (restoreID != null ? restoreID : ""String_Node_Str""));
    for (    String s : parseErrors) {
      Logger.log(""String_Node_Str"",""String_Node_Str"" + s);
    }
    errorsOccurred=true;
  }
  done();
  return success || !noPartial;
}","public boolean startRestore(InputStream input){
  J2MEDisplay.setView(view);
  view.addToMessage(Localization.get(""String_Node_Str""));
  final String[] restoreIDWrapper={null};
  errorsOccurred=false;
  boolean success=false;
  String restoreID=null;
  String[] parseErrors=new String[0];
  try {
    beginTransaction();
    DataModelPullParser parser=new DataModelPullParser(input,new TransactionParserFactory(){
      public TransactionParser getParser(      String name,      String namespace,      KXmlParser parser){
        if (name.toLowerCase().equals(""String_Node_Str"")) {
          return new CaseXmlParser(parser,caseTallies,!noPartial);
        }
 else         if (name.toLowerCase().equals(""String_Node_Str"")) {
          return new UserXmlParser(parser);
        }
 else         if (name.equalsIgnoreCase(""String_Node_Str"")) {
          return new TransactionParser<String>(parser,""String_Node_Str"",null){
            public void commit(            String parsed) throws IOException {
            }
            public String parse() throws XmlPullParserException, IOException {
              String restoreID=parser.nextText().trim();
              restoreIDWrapper[0]=restoreID;
              return restoreID;
            }
          }
;
        }
        return null;
      }
    }
);
    success=parser.parse();
    restoreID=restoreIDWrapper[0];
    if (success) {
      PropertyManager._().setProperty(CommCareProperties.LAST_SUCCESSFUL_SYNC,restoreID);
      PropertyManager._().setProperty(CommCareProperties.LAST_SYNC_AT,DateUtils.formatDateTime(new Date(),DateUtils.FORMAT_ISO8601));
    }
    parseErrors=parser.getParseErrors();
  }
 catch (  IOException e) {
    fail(Localization.get(""String_Node_Str""),e,null);
    return false;
  }
catch (  InvalidStructureException e) {
    fail(Localization.get(""String_Node_Str""),e,null);
    return false;
  }
catch (  XmlPullParserException e) {
    fail(Localization.get(""String_Node_Str""),e,null);
    return false;
  }
catch (  UnfullfilledRequirementsException e) {
    fail(Localization.get(""String_Node_Str""),e,null);
    return false;
  }
catch (  RuntimeException e) {
    success=false;
  }
 finally {
    if (success) {
      commitTransaction();
    }
 else {
      rollbackTransaction();
    }
  }
  if (success) {
    view.addToMessage(Localization.get(""String_Node_Str""));
    Logger.log(""String_Node_Str"",""String_Node_Str"" + (restoreID != null ? restoreID : ""String_Node_Str""));
  }
 else {
    if (noPartial) {
      view.addToMessage(Localization.get(""String_Node_Str""));
    }
 else {
      view.addToMessage(Localization.get(""String_Node_Str"") + ""String_Node_Str"" + parseErrors.length);
    }
    Logger.log(""String_Node_Str"",(noPartial ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (restoreID != null ? restoreID : ""String_Node_Str""));
    for (    String s : parseErrors) {
      Logger.log(""String_Node_Str"",""String_Node_Str"" + s);
    }
    errorsOccurred=true;
  }
  done();
  return success || !noPartial;
}",0.9981742738589212
146968,"protected void setProperties(){
  PropertyManager._().addRules(new JavaRosaPropertyRules());
  PropertyManager._().addRules(new CommCareProperties());
  PropertyManager._().addRules(new FormManagerProperties());
  PropertyUtils.initializeProperty(""String_Node_Str"",PropertyUtils.genGUID(25));
  PropertyUtils.initializeProperty(CommCareProperties.IS_FIRST_RUN,CommCareProperties.FIRST_RUN_YES);
  PropertyUtils.initializeProperty(FormManagerProperties.EXTRA_KEY_FORMAT,FormManagerProperties.EXTRA_KEY_LANGUAGE_CYCLE);
  PropertyUtils.initializeProperty(CommCareProperties.ENTRY_MODE,CommCareProperties.ENTRY_MODE_QUICK);
  PropertyManager._().setProperty(CommCareProperties.COMMCARE_VERSION,CommCareUtil.getVersion());
  PropertyUtils.initializeProperty(CommCareProperties.DEPLOYMENT_MODE,CommCareProperties.DEPLOY_DEFAULT);
}","protected void setProperties(){
  PropertyManager._().addRules(new JavaRosaPropertyRules());
  PropertyManager._().addRules(new CommCareProperties());
  PropertyManager._().addRules(new FormManagerProperties());
  PropertyUtils.initializeProperty(""String_Node_Str"",PropertyUtils.genGUID(25));
  PropertyUtils.initializeProperty(CommCareProperties.IS_FIRST_RUN,CommCareProperties.FIRST_RUN_YES);
  PropertyManager._().setProperty(CommCareProperties.COMMCARE_VERSION,CommCareUtil.getVersion());
  PropertyUtils.initializeProperty(CommCareProperties.DEPLOYMENT_MODE,CommCareProperties.DEPLOY_DEFAULT);
}",0.8415147265077139
146969,"private void postProfilePropertyInit(){
  PropertyUtils.initializeProperty(CommCareProperties.SEND_STYLE,CommCareProperties.SEND_STYLE_HTTP);
  PropertyUtils.initializeProperty(CommCareProperties.OTA_RESTORE_OFFLINE,""String_Node_Str"");
  PropertyUtils.initializeProperty(CommCareProperties.RESTORE_TOLERANCE,CommCareProperties.REST_TOL_LOOSE);
  PropertyUtils.initializeProperty(CommCareProperties.DEMO_MODE,CommCareProperties.DEMO_ENABLED);
  PropertyUtils.initializeProperty(CommCareProperties.TETHER_MODE,CommCareProperties.TETHER_PUSH_ONLY);
}","private void postProfilePropertyInit(){
  PropertyUtils.initializeProperty(FormManagerProperties.EXTRA_KEY_FORMAT,FormManagerProperties.EXTRA_KEY_LANGUAGE_CYCLE);
  PropertyUtils.initializeProperty(CommCareProperties.ENTRY_MODE,CommCareProperties.ENTRY_MODE_QUICK);
  PropertyUtils.initializeProperty(CommCareProperties.SEND_STYLE,CommCareProperties.SEND_STYLE_HTTP);
  PropertyUtils.initializeProperty(CommCareProperties.OTA_RESTORE_OFFLINE,""String_Node_Str"");
  PropertyUtils.initializeProperty(CommCareProperties.RESTORE_TOLERANCE,CommCareProperties.REST_TOL_LOOSE);
  PropertyUtils.initializeProperty(CommCareProperties.DEMO_MODE,CommCareProperties.DEMO_ENABLED);
  PropertyUtils.initializeProperty(CommCareProperties.TETHER_MODE,CommCareProperties.TETHER_PUSH_ONLY);
}",0.8287878787878787
146970,"public CaseXmlParser(KXmlParser parser,int[] tallies){
  super(parser,""String_Node_Str"",null);
  this.tallies=tallies;
}","public CaseXmlParser(KXmlParser parser,int[] tallies,boolean acceptCreateOverwrites){
  super(parser,""String_Node_Str"",null);
  this.tallies=tallies;
  this.acceptCreateOverwrites=acceptCreateOverwrites;
}",0.7384615384615385
146971,"public Case parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(""String_Node_Str"");
  this.nextTag(""String_Node_Str"");
  String caseId=parser.nextText().trim();
  this.nextTag(""String_Node_Str"");
  String dateModified=parser.nextText().trim();
  Date modified=DateUtils.parseDateTime(dateModified);
  boolean create=false;
  boolean update=false;
  boolean close=false;
  while (this.nextTagInBlock(""String_Node_Str"")) {
    String action=parser.getName().toLowerCase();
    if (action.equals(""String_Node_Str"")) {
      String[] data=new String[4];
      while (this.nextTagInBlock(""String_Node_Str"")) {
        if (parser.getName().equals(""String_Node_Str"")) {
          data[0]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[1]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[2]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[3]=parser.nextText().trim();
        }
 else {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
      }
      for (      String s : data) {
        if (s == null) {
          throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
        }
      }
      Case c=new Case(data[3],data[0]);
      c.setUserId(data[2]);
      c.setExternalId(data[1]);
      c.setCaseId(caseId);
      commit(c);
      create=true;
      Logger.log(""String_Node_Str"",c.getID() + ""String_Node_Str"" + PropertyUtils.trim(c.getCaseId(),12)+ ""String_Node_Str""+ c.getTypeId());
    }
 else     if (action.equals(""String_Node_Str"")) {
      Case c=retrieve(caseId);
      if (c == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String key=parser.getName();
        String value=parser.nextText().trim();
        c.setProperty(key,value);
      }
      commit(c);
      update=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      Case c=retrieve(caseId);
      if (c == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      c.setClosed(true);
      commit(c);
      Logger.log(""String_Node_Str"",PropertyUtils.trim(c.getCaseId(),12));
      close=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      new ReferralXmlParser(parser,caseId,modified).parse();
    }
  }
  if (create) {
    tallies[0]++;
  }
 else   if (close) {
    tallies[2]++;
  }
 else   if (update) {
    tallies[1]++;
  }
  return null;
}","public Case parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(""String_Node_Str"");
  this.nextTag(""String_Node_Str"");
  String caseId=parser.nextText().trim();
  this.nextTag(""String_Node_Str"");
  String dateModified=parser.nextText().trim();
  Date modified=DateUtils.parseDateTime(dateModified);
  boolean create=false;
  boolean update=false;
  boolean close=false;
  while (this.nextTagInBlock(""String_Node_Str"")) {
    String action=parser.getName().toLowerCase();
    if (action.equals(""String_Node_Str"")) {
      String[] data=new String[4];
      while (this.nextTagInBlock(""String_Node_Str"")) {
        if (parser.getName().equals(""String_Node_Str"")) {
          data[0]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[1]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[2]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[3]=parser.nextText().trim();
        }
 else {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
      }
      for (      String s : data) {
        if (s == null) {
          throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
        }
      }
      Case c=null;
      boolean overriden=false;
      if (acceptCreateOverwrites) {
        c=retrieve(caseId);
        if (c != null) {
          c.setName(data[3]);
          c.setTypeId(data[0]);
          overriden=true;
        }
      }
      if (c == null) {
        c=new Case(data[3],data[0]);
        c.setCaseId(caseId);
      }
      c.setUserId(data[2]);
      c.setExternalId(data[1]);
      commit(c);
      if (!overriden) {
        create=true;
      }
      String succesfulAction=overriden ? ""String_Node_Str"" : ""String_Node_Str"";
      Logger.log(succesfulAction,c.getID() + ""String_Node_Str"" + PropertyUtils.trim(c.getCaseId(),12)+ ""String_Node_Str""+ c.getTypeId());
    }
 else     if (action.equals(""String_Node_Str"")) {
      Case c=retrieve(caseId);
      if (c == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String key=parser.getName();
        String value=parser.nextText().trim();
        c.setProperty(key,value);
      }
      commit(c);
      update=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      Case c=retrieve(caseId);
      if (c == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      c.setClosed(true);
      commit(c);
      Logger.log(""String_Node_Str"",PropertyUtils.trim(c.getCaseId(),12));
      close=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      new ReferralXmlParser(parser,caseId,modified,acceptCreateOverwrites).parse();
    }
  }
  if (create) {
    tallies[0]++;
  }
 else   if (close) {
    tallies[2]++;
  }
 else   if (update) {
    tallies[1]++;
  }
  return null;
}",0.9108978752570254
146972,"public ReferralXmlParser(KXmlParser parser,String caseId,Date created){
  super(parser,""String_Node_Str"",null);
  this.caseId=caseId;
  this.created=created;
}","public ReferralXmlParser(KXmlParser parser,String caseId,Date created,boolean acceptCreateOverwrites){
  super(parser,""String_Node_Str"",null);
  this.caseId=caseId;
  this.created=created;
  this.acceptCreateOverwrites=acceptCreateOverwrites;
}",0.7890818858560794
146973,"public PatientReferral parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(""String_Node_Str"");
  this.nextTag(""String_Node_Str"");
  String refId=parser.nextText().trim();
  while (this.nextTagInBlock(""String_Node_Str"")) {
    String action=parser.getName().toLowerCase();
    Date followup=created;
    if (action.equals(""String_Node_Str"")) {
      String followupDate=parser.nextText();
      followup=DateUtils.parseDate(followupDate);
    }
    if (action.equals(""String_Node_Str"")) {
      this.getNextTagInBlock(""String_Node_Str"");
      checkNode(""String_Node_Str"");
      String referralTypes=parser.nextText();
      for (      Object s : DateUtils.split(referralTypes,""String_Node_Str"",true)) {
        PatientReferral pr=new PatientReferral((String)s,created,refId,caseId,followup);
        commit(pr);
        Logger.log(""String_Node_Str"",pr.getID() + ""String_Node_Str"" + PropertyUtils.trim(pr.getReferralId(),12)+ ""String_Node_Str""+ pr.getType());
      }
      if (this.nextTagInBlock(""String_Node_Str"")) {
        throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
      }
    }
 else     if (action.equals(""String_Node_Str"")) {
      this.getNextTagInBlock(""String_Node_Str"");
      checkNode(""String_Node_Str"");
      String refType=parser.nextText().trim();
      PatientReferral r=retrieve(refId,refType);
      if (r == null) {
        throw new InvalidStructureException(""String_Node_Str"" + refId,parser);
      }
      r.setDateDue(followup);
      if (this.nextTagInBlock(""String_Node_Str"")) {
        String dateClosed=parser.nextText();
        r.close();
        commit(r);
        Logger.log(""String_Node_Str"",PropertyUtils.trim(r.getReferralId(),12) + ""String_Node_Str"" + r.getType());
        if (this.nextTagInBlock(""String_Node_Str"")) {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
      }
    }
  }
  return null;
}","public PatientReferral parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(""String_Node_Str"");
  this.nextTag(""String_Node_Str"");
  String refId=parser.nextText().trim();
  while (this.nextTagInBlock(""String_Node_Str"")) {
    String action=parser.getName().toLowerCase();
    Date followup=created;
    if (action.equals(""String_Node_Str"")) {
      String followupDate=parser.nextText();
      followup=DateUtils.parseDate(followupDate);
    }
    if (action.equals(""String_Node_Str"")) {
      this.getNextTagInBlock(""String_Node_Str"");
      checkNode(""String_Node_Str"");
      String referralTypes=parser.nextText();
      for (      Object s : DateUtils.split(referralTypes,""String_Node_Str"",true)) {
        PatientReferral pr=new PatientReferral((String)s,created,refId,caseId,followup);
        boolean overriden=false;
        if (acceptCreateOverwrites) {
          PatientReferral old=retrieve(refId,(String)s);
          if (old != null) {
            pr.setID(old.getID());
            overriden=true;
          }
        }
        commit(pr);
        String succesfulAction=overriden ? ""String_Node_Str"" : ""String_Node_Str"";
        Logger.log(succesfulAction,pr.getID() + ""String_Node_Str"" + PropertyUtils.trim(pr.getReferralId(),12)+ ""String_Node_Str""+ pr.getType());
      }
      if (this.nextTagInBlock(""String_Node_Str"")) {
        throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
      }
    }
 else     if (action.equals(""String_Node_Str"")) {
      this.getNextTagInBlock(""String_Node_Str"");
      checkNode(""String_Node_Str"");
      String refType=parser.nextText().trim();
      PatientReferral r=retrieve(refId,refType);
      if (r == null) {
        throw new InvalidStructureException(""String_Node_Str"" + refId,parser);
      }
      r.setDateDue(followup);
      if (this.nextTagInBlock(""String_Node_Str"")) {
        String dateClosed=parser.nextText();
        r.close();
        commit(r);
        Logger.log(""String_Node_Str"",PropertyUtils.trim(r.getReferralId(),12) + ""String_Node_Str"" + r.getType());
        if (this.nextTagInBlock(""String_Node_Str"")) {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
      }
    }
  }
  return null;
}",0.916822429906542
146974,"/** 
 * Deletes the inner-most repeat that this node belongs to and returns the corresponding FormIndex. Behavior is currently undefined if you call this method on a node that is not contained within a repeat.
 * @param index
 * @return
 */
public FormIndex deleteRepeat(FormIndex index){
  Vector indexes=new Vector();
  Vector multiplicities=new Vector();
  Vector elements=new Vector();
  collapseIndex(index,indexes,multiplicities,elements);
  for (int i=elements.size() - 1; i >= 0; i--) {
    IFormElement e=(IFormElement)elements.elementAt(i);
    if (e instanceof GroupDef && ((GroupDef)e).getRepeat()) {
      break;
    }
 else {
      indexes.removeElementAt(i);
      multiplicities.removeElementAt(i);
      elements.removeElementAt(i);
    }
  }
  FormIndex newIndex=buildIndex(indexes,multiplicities,elements);
  TreeReference deleteRef=getChildInstanceRef(newIndex);
  TreeElement deleteElement=instance.resolveReference(deleteRef);
  TreeReference parentRef=deleteRef.getParentRef();
  TreeElement parentElement=instance.resolveReference(parentRef);
  int childMult=deleteElement.getMult();
  parentElement.removeChild(deleteElement);
  for (int i=0; i < parentElement.getNumChildren(); i++) {
    TreeElement child=parentElement.getChildAt(i);
    if (child.getMult() > childMult) {
      child.setMult(child.getMult() - 1);
    }
  }
  triggerTriggerables(parentRef);
  return newIndex;
}","/** 
 * Deletes the inner-most repeat that this node belongs to and returns the corresponding FormIndex. Behavior is currently undefined if you call this method on a node that is not contained within a repeat.
 * @param index
 * @return
 */
public FormIndex deleteRepeat(FormIndex index){
  Vector indexes=new Vector();
  Vector multiplicities=new Vector();
  Vector elements=new Vector();
  collapseIndex(index,indexes,multiplicities,elements);
  for (int i=elements.size() - 1; i >= 0; i--) {
    IFormElement e=(IFormElement)elements.elementAt(i);
    if (e instanceof GroupDef && ((GroupDef)e).getRepeat()) {
      break;
    }
 else {
      indexes.removeElementAt(i);
      multiplicities.removeElementAt(i);
      elements.removeElementAt(i);
    }
  }
  FormIndex newIndex=buildIndex(indexes,multiplicities,elements);
  TreeReference deleteRef=getChildInstanceRef(newIndex);
  TreeElement deleteElement=instance.resolveReference(deleteRef);
  TreeReference parentRef=deleteRef.getParentRef();
  TreeElement parentElement=instance.resolveReference(parentRef);
  int childMult=deleteElement.getMult();
  parentElement.removeChild(deleteElement);
  for (int i=0; i < parentElement.getNumChildren(); i++) {
    TreeElement child=parentElement.getChildAt(i);
    if (child.getMult() > childMult) {
      child.setMult(child.getMult() - 1);
    }
  }
  triggerTriggerables(deleteRef);
  return newIndex;
}",0.9957356076759062
146975,"/** 
 * Add a Condition to the form's Collection.
 * @param condition the condition to be set
 */
public Triggerable addTriggerable(Triggerable t){
  int existingIx=triggerables.indexOf(t);
  if (existingIx >= 0) {
    return (Triggerable)triggerables.elementAt(existingIx);
  }
 else {
    triggerables.addElement(t);
    triggerablesInOrder=false;
    Vector triggers=t.getTriggers();
    for (int i=0; i < triggers.size(); i++) {
      TreeReference trigger=(TreeReference)triggers.elementAt(i);
      if (!triggerIndex.containsKey(trigger)) {
        triggerIndex.put(trigger,new Vector());
      }
      Vector triggered=(Vector)triggerIndex.get(trigger);
      if (!triggered.contains(t)) {
        triggered.addElement(t);
      }
    }
    if (t instanceof Condition) {
      Vector targets=t.getTargets();
      for (int i=0; i < targets.size(); i++) {
        TreeReference target=(TreeReference)targets.elementAt(i);
        if (instance.getTemplate(target) != null) {
          conditionRepeatTargetIndex.put(target,(Condition)t);
        }
      }
    }
    return t;
  }
}","/** 
 * Add a Condition to the form's Collection.
 * @param condition the condition to be set
 */
public Triggerable addTriggerable(Triggerable t){
  int existingIx=triggerables.indexOf(t);
  if (existingIx >= 0) {
    return (Triggerable)triggerables.elementAt(existingIx);
  }
 else {
    triggerables.addElement(t);
    triggerablesInOrder=false;
    Vector triggers=t.getTriggers();
    for (int i=0; i < triggers.size(); i++) {
      TreeReference trigger=(TreeReference)triggers.elementAt(i);
      if (!triggerIndex.containsKey(trigger)) {
        triggerIndex.put(trigger,new Vector());
      }
      Vector triggered=(Vector)triggerIndex.get(trigger);
      if (!triggered.contains(t)) {
        triggered.addElement(t);
      }
    }
    return t;
  }
}",0.8155759870200108
146976,"public void finalizeTriggerables(){
  Vector partialOrdering=new Vector();
  for (int i=0; i < triggerables.size(); i++) {
    Triggerable t=(Triggerable)triggerables.elementAt(i);
    Vector deps=new Vector();
    if (t.canCascade()) {
      for (int j=0; j < t.getTargets().size(); j++) {
        TreeReference target=(TreeReference)t.getTargets().elementAt(j);
        Vector triggered=(Vector)triggerIndex.get(target);
        if (triggered != null) {
          for (int k=0; k < triggered.size(); k++) {
            Triggerable u=(Triggerable)triggered.elementAt(k);
            if (!deps.contains(u))             deps.addElement(u);
          }
        }
      }
    }
    for (int j=0; j < deps.size(); j++) {
      Triggerable u=(Triggerable)deps.elementAt(j);
      Triggerable[] edge={t,u};
      partialOrdering.addElement(edge);
    }
  }
  Vector vertices=new Vector();
  for (int i=0; i < triggerables.size(); i++)   vertices.addElement(triggerables.elementAt(i));
  triggerables.removeAllElements();
  while (vertices.size() > 0) {
    Vector roots=new Vector();
    for (int i=0; i < vertices.size(); i++) {
      roots.addElement(vertices.elementAt(i));
    }
    for (int i=0; i < partialOrdering.size(); i++) {
      Triggerable[] edge=(Triggerable[])partialOrdering.elementAt(i);
      roots.removeElement(edge[1]);
    }
    if (roots.size() == 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < roots.size(); i++) {
      Triggerable root=(Triggerable)roots.elementAt(i);
      triggerables.addElement(root);
      vertices.removeElement(root);
    }
    for (int i=partialOrdering.size() - 1; i >= 0; i--) {
      Triggerable[] edge=(Triggerable[])partialOrdering.elementAt(i);
      if (roots.contains(edge[0]))       partialOrdering.removeElementAt(i);
    }
  }
  triggerablesInOrder=true;
}","public void finalizeTriggerables(){
  Vector partialOrdering=new Vector();
  for (int i=0; i < triggerables.size(); i++) {
    Triggerable t=(Triggerable)triggerables.elementAt(i);
    Vector deps=new Vector();
    if (t.canCascade()) {
      for (int j=0; j < t.getTargets().size(); j++) {
        TreeReference target=(TreeReference)t.getTargets().elementAt(j);
        Vector triggered=(Vector)triggerIndex.get(target);
        if (triggered != null) {
          for (int k=0; k < triggered.size(); k++) {
            Triggerable u=(Triggerable)triggered.elementAt(k);
            if (!deps.contains(u))             deps.addElement(u);
          }
        }
      }
    }
    for (int j=0; j < deps.size(); j++) {
      Triggerable u=(Triggerable)deps.elementAt(j);
      Triggerable[] edge={t,u};
      partialOrdering.addElement(edge);
    }
  }
  Vector vertices=new Vector();
  for (int i=0; i < triggerables.size(); i++)   vertices.addElement(triggerables.elementAt(i));
  triggerables.removeAllElements();
  while (vertices.size() > 0) {
    Vector roots=new Vector();
    for (int i=0; i < vertices.size(); i++) {
      roots.addElement(vertices.elementAt(i));
    }
    for (int i=0; i < partialOrdering.size(); i++) {
      Triggerable[] edge=(Triggerable[])partialOrdering.elementAt(i);
      roots.removeElement(edge[1]);
    }
    if (roots.size() == 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < roots.size(); i++) {
      Triggerable root=(Triggerable)roots.elementAt(i);
      triggerables.addElement(root);
      vertices.removeElement(root);
    }
    for (int i=partialOrdering.size() - 1; i >= 0; i--) {
      Triggerable[] edge=(Triggerable[])partialOrdering.elementAt(i);
      if (roots.contains(edge[0]))       partialOrdering.removeElementAt(i);
    }
  }
  triggerablesInOrder=true;
  conditionRepeatTargetIndex=new Hashtable();
  for (int i=0; i < triggerables.size(); i++) {
    Triggerable t=(Triggerable)triggerables.elementAt(i);
    if (t instanceof Condition) {
      Vector targets=t.getTargets();
      for (int j=0; j < targets.size(); j++) {
        TreeReference target=(TreeReference)targets.elementAt(j);
        if (instance.getTemplate(target) != null) {
          conditionRepeatTargetIndex.put(target,(Condition)t);
        }
      }
    }
  }
}",0.8854888835763806
146977,"/** 
 */
public FormDef(){
  setID(-1);
  setChildren(null);
  triggerables=new Vector();
  triggerablesInOrder=true;
  triggerIndex=new Hashtable();
  conditionRepeatTargetIndex=new Hashtable();
  setEvaluationContext(new EvaluationContext());
  outputFragments=new Vector();
}","/** 
 */
public FormDef(){
  setID(-1);
  setChildren(null);
  triggerables=new Vector();
  triggerablesInOrder=true;
  triggerIndex=new Hashtable();
  setEvaluationContext(new EvaluationContext());
  outputFragments=new Vector();
}",0.9098039215686274
146978,"private static void parseInstance(FormDef f,Element e){
  TreeElement root=buildInstanceStructure(e,null);
  FormInstance instanceModel=new FormInstance(root);
  instanceModel.setName(f.getTitle());
  Vector usedAtts=new Vector();
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  String schema=e.getNamespace();
  if (schema != null && schema.length() > 0 && !schema.equals(defaultNamespace)) {
    instanceModel.schema=schema;
  }
  instanceModel.formVersion=e.getAttributeValue(null,""String_Node_Str"");
  instanceModel.uiVersion=e.getAttributeValue(null,""String_Node_Str"");
  loadNamespaces(e,instanceModel);
  processRepeats(instanceModel);
  verifyBindings(f,instanceModel);
  applyInstanceProperties(instanceModel);
  loadInstanceData(e,root,f);
  checkDependencyCycles(f);
  f.finalizeTriggerables();
  f.setInstance(instanceModel);
  if (XFormUtils.showUnusedAttributeWarning(e,usedAtts)) {
    System.out.println(XFormUtils.unusedAttWarning(e,usedAtts));
  }
}","private static void parseInstance(FormDef f,Element e){
  TreeElement root=buildInstanceStructure(e,null);
  FormInstance instanceModel=new FormInstance(root);
  instanceModel.setName(f.getTitle());
  Vector usedAtts=new Vector();
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  String schema=e.getNamespace();
  if (schema != null && schema.length() > 0 && !schema.equals(defaultNamespace)) {
    instanceModel.schema=schema;
  }
  instanceModel.formVersion=e.getAttributeValue(null,""String_Node_Str"");
  instanceModel.uiVersion=e.getAttributeValue(null,""String_Node_Str"");
  loadNamespaces(e,instanceModel);
  processRepeats(instanceModel);
  verifyBindings(f,instanceModel);
  applyInstanceProperties(instanceModel);
  loadInstanceData(e,root,f);
  checkDependencyCycles(f);
  f.setInstance(instanceModel);
  f.finalizeTriggerables();
  if (XFormUtils.showUnusedAttributeWarning(e,usedAtts)) {
    System.out.println(XFormUtils.unusedAttWarning(e,usedAtts));
  }
}",0.9681592039800996
146979,"public void start(){
  view=new CommCareSuiteView(m.getName().evaluate());
  view.setCommandListener(this);
  configView();
  J2MEDisplay.setView(view);
}","public void start(){
  view=new CommCareSuiteView(m.getName().evaluate());
  view.setCommandListener(this);
  J2MEDisplay.setView(view);
}",0.9452054794520548
146980,"public CommCareConfigEngine(OutputStream output){
  this.output=output;
  this.print=new PrintStream(output);
  suites=new Vector<Suite>();
  this.instance=new CommCareInstance(){
    public void registerSuite(    Suite s){
      CommCareConfigEngine.this.suites.add(s);
    }
    public void setProfile(    Profile p){
      CommCareConfigEngine.this.profile=p;
    }
    public int getMajorVersion(){
      return 1;
    }
    public int getMinorVersion(){
      return 1;
    }
    public int getMajorVersion(){
      return 1;
    }
    public int getMinorVersion(){
      return 0;
    }
  }
;
  setRoots();
  table=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility());
  StorageManager.setStorageFactory(new IStorageFactory(){
    public IStorageUtility newStorage(    String name,    Class type){
      return new DummyIndexedStorageUtility();
    }
  }
);
  StorageManager.registerStorage(Profile.STORAGE_KEY,Profile.class);
  StorageManager.registerStorage(Suite.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(FormDef.STORAGE_KEY,Suite.class);
}","public CommCareConfigEngine(OutputStream output){
  this.output=output;
  this.print=new PrintStream(output);
  suites=new Vector<Suite>();
  this.instance=new CommCareInstance(){
    public void registerSuite(    Suite s){
      CommCareConfigEngine.this.suites.add(s);
    }
    public void setProfile(    Profile p){
      CommCareConfigEngine.this.profile=p;
    }
    public int getMajorVersion(){
      return 1;
    }
    public int getMinorVersion(){
      return 1;
    }
  }
;
  setRoots();
  table=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility());
  StorageManager.setStorageFactory(new IStorageFactory(){
    public IStorageUtility newStorage(    String name,    Class type){
      return new DummyIndexedStorageUtility();
    }
  }
);
  StorageManager.registerStorage(Profile.STORAGE_KEY,Profile.class);
  StorageManager.registerStorage(Suite.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(FormDef.STORAGE_KEY,Suite.class);
}",0.9450441609421
146981,"public int getMinorVersion(){
  return 0;
}","public int getMinorVersion(){
  return 1;
}",0.9767441860465116
146982,"public FormIndex descendIntoRepeat(FormIndex index,int repIndex){
  Vector indexes=new Vector();
  Vector multiplicities=new Vector();
  Vector elements=new Vector();
  if (!index.isInForm()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  collapseIndex(index,indexes,multiplicities,elements);
  if (!(elements.lastElement() instanceof GroupDef) || !((GroupDef)elements.lastElement()).getRepeat()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TreeElement node=instance.resolveReference(getChildInstanceRef(elements,multiplicities));
  String name=node.getName();
  int numRepetitions=node.getParent().getChildMultiplicity(name);
  if (repIndex < 0 || repIndex >= numRepetitions) {
    throw new RuntimeException(""String_Node_Str"");
  }
  multiplicities.setElementAt(new Integer(repIndex),multiplicities.size() - 1);
  return buildIndex(indexes,multiplicities,elements);
}","public FormIndex descendIntoRepeat(FormIndex index,int repIndex){
  Vector indexes=new Vector();
  Vector multiplicities=new Vector();
  Vector elements=new Vector();
  if (!index.isInForm()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  collapseIndex(index,indexes,multiplicities,elements);
  if (!(elements.lastElement() instanceof GroupDef) || !((GroupDef)elements.lastElement()).getRepeat()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TreeElement node=instance.resolveReference(getChildInstanceRef(elements,multiplicities));
  int numRepetitions=0;
  if (node != null) {
    String name=node.getName();
    numRepetitions=node.getParent().getChildMultiplicity(name);
  }
  if (repIndex < 0 || repIndex >= numRepetitions) {
    throw new RuntimeException(""String_Node_Str"");
  }
  multiplicities.setElementAt(new Integer(repIndex),multiplicities.size() - 1);
  return buildIndex(indexes,multiplicities,elements);
}",0.969598262757872
146983,"public Vector<String> getAvailableRepetitions(FormIndex index){
  Vector indexes=new Vector();
  Vector multiplicities=new Vector();
  Vector elements=new Vector();
  collapseIndex(index,indexes,multiplicities,elements);
  TreeElement node=instance.resolveReference(getChildInstanceRef(elements,multiplicities));
  String name=node.getName();
  int numRepetitions=node.getParent().getChildMultiplicity(name);
  Vector<String> reps=new Vector<String>();
  for (int i=0; i < numRepetitions; i++) {
    reps.addElement(""String_Node_Str"" + (i + 1));
  }
  return reps;
}","public Vector<String> getAvailableRepetitions(FormIndex index){
  Vector indexes=new Vector();
  Vector multiplicities=new Vector();
  Vector elements=new Vector();
  collapseIndex(index,indexes,multiplicities,elements);
  TreeElement node=instance.resolveReference(getChildInstanceRef(elements,multiplicities));
  int numRepetitions=0;
  if (node != null) {
    String name=node.getName();
    numRepetitions=node.getParent().getChildMultiplicity(name);
  }
  Vector<String> reps=new Vector<String>();
  for (int i=0; i < numRepetitions; i++) {
    reps.addElement(""String_Node_Str"" + (i + 1));
  }
  return reps;
}",0.9526226734348562
146984,"/** 
 * Attempts to save the answer at the specified FormIndex into the datamodel.
 * @param index
 * @param data
 * @return OK if save was successful, error if a constraint was violated.
 */
public int answerQuestion(FormIndex index,IAnswerData data){
  QuestionDef q=model.getQuestionPrompt(index).getQuestion();
  if (model.getEvent() != FormEntryController.EVENT_QUESTION) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TreeElement element=model.getTreeElement(index);
  boolean complexQuestion=q.isComplex();
  boolean hasConstraints=false;
  if (element.required && data == null) {
    return ANSWER_REQUIRED_BUT_EMPTY;
  }
 else   if (!complexQuestion && !model.getForm().evaluateConstraint(index.getReference(),data)) {
    return ANSWER_CONSTRAINT_VIOLATED;
  }
 else   if (!complexQuestion) {
    commitAnswer(element,index,data);
    return ANSWER_OK;
  }
 else   if (complexQuestion && hasConstraints) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else {
    try {
      model.getForm().copyItemsetAnswer(q,element,data);
    }
 catch (    InvalidReferenceException ire) {
      ire.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
    }
    return ANSWER_OK;
  }
}","/** 
 * Attempts to save the answer at the specified FormIndex into the datamodel.
 * @param index
 * @param data
 * @return OK if save was successful, error if a constraint was violated.
 */
public int answerQuestion(FormIndex index,IAnswerData data){
  QuestionDef q=model.getQuestionPrompt(index).getQuestion();
  if (model.getEvent(index) != FormEntryController.EVENT_QUESTION) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TreeElement element=model.getTreeElement(index);
  boolean complexQuestion=q.isComplex();
  boolean hasConstraints=false;
  if (element.required && data == null) {
    return ANSWER_REQUIRED_BUT_EMPTY;
  }
 else   if (!complexQuestion && !model.getForm().evaluateConstraint(index.getReference(),data)) {
    return ANSWER_CONSTRAINT_VIOLATED;
  }
 else   if (!complexQuestion) {
    commitAnswer(element,index,data);
    return ANSWER_OK;
  }
 else   if (complexQuestion && hasConstraints) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else {
    try {
      model.getForm().copyItemsetAnswer(q,element,data);
    }
 catch (    InvalidReferenceException ire) {
      ire.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
    }
    return ANSWER_OK;
  }
}",0.9979927739863508
146985,"/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(FormInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.TRUE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.FALSE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toBoolean(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toNumeric(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toInt(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toString(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDate(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolNot(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolStr(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return dateStr(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(argVals[0],argVals[1],argVals[2]);
  }
 else   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
    return multiSelected(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return countSelected(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return count(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    if (argVals[0] instanceof XPathNodeset) {
      return sum(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return DateUtils.roundDate(new Date());
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Date();
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
      return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return join(""String_Node_Str"",argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
      return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
    }
 else {
      return join(argVals[0],subsetArgList(argVals,1));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2) {
    if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
      return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
    }
 else {
      return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
    if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
      Object[] factors=((XPathNodeset)argVals[2]).toArgList();
      Object[] weights=((XPathNodeset)argVals[3]).toArgList();
      if (factors.length != weights.length) {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
      return checklistWeighted(argVals[0],argVals[1],factors,weights);
    }
 else {
      return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return regex(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    return argVals[0];
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    Object o=(Date)toDate(argVals[0]);
    if (o instanceof Date) {
      return DateUtils.shortDateHack((Date)o);
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
    if (handler != null) {
      return evalCustomFunction(handler,argVals);
    }
 else {
      throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}","/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(FormInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.TRUE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.FALSE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toBoolean(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toNumeric(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toInt(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toString(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDate(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolNot(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolStr(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return dateStr(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(argVals[0],argVals[1],argVals[2]);
  }
 else   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
    return multiSelected(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return countSelected(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return count(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    if (argVals[0] instanceof XPathNodeset) {
      return sum(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return DateUtils.roundDate(new Date());
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Date();
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
      return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return join(""String_Node_Str"",argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
      return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
    }
 else {
      return join(argVals[0],subsetArgList(argVals,1));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2) {
    if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
      return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
    }
 else {
      return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
    if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
      Object[] factors=((XPathNodeset)argVals[2]).toArgList();
      Object[] weights=((XPathNodeset)argVals[3]).toArgList();
      if (factors.length != weights.length) {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
      return checklistWeighted(argVals[0],argVals[1],factors,weights);
    }
 else {
      return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return regex(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    return argVals[0];
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    Object o=toDate(argVals[0]);
    if (o instanceof Date) {
      return DateUtils.shortDateHack((Date)o);
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
    if (handler != null) {
      return evalCustomFunction(handler,argVals);
    }
 else {
      throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}",0.999395039322444
146986,"public void start(){
  J2MEDisplay.setView(view);
}","public void start(){
  view=new CommCareSuiteView(m.getName().evaluate());
  view.setCommandListener(this);
  configView();
  J2MEDisplay.setView(view);
}",0.4975609756097561
146987,"public Text parse() throws InvalidStructureException, IOException, XmlPullParserException {
  Vector<Text> texts=new Vector<Text>();
  checkNode(""String_Node_Str"");
  int entryLevel=parser.getDepth();
  try {
    parser.next();
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  while (parser.getDepth() > entryLevel) {
    Text t=parseBody();
    if (t != null) {
      texts.addElement(t);
    }
  }
  if (texts.size() == 1) {
    return texts.elementAt(0);
  }
 else {
    Text c=Text.CompositeText(texts);
    return c;
  }
}","public Text parse() throws InvalidStructureException, IOException, XmlPullParserException {
  Vector<Text> texts=new Vector<Text>();
  checkNode(""String_Node_Str"");
  int entryLevel=parser.getDepth();
  try {
    parser.next();
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  while (parser.getDepth() > entryLevel || parser.getEventType() == KXmlParser.TEXT) {
    Text t=parseBody();
    if (t != null) {
      texts.addElement(t);
    }
  }
  if (texts.size() == 1) {
    return texts.elementAt(0);
  }
 else {
    Text c=Text.CompositeText(texts);
    return c;
  }
}",0.964968152866242
146988,"public CommCareConfigEngine(OutputStream output){
  this.output=output;
  this.print=new PrintStream(output);
  suites=new Vector<Suite>();
  this.instance=new CommCareInstance(){
    public void registerSuite(    Suite s){
      CommCareConfigEngine.this.suites.add(s);
    }
    public void setProfile(    Profile p){
      CommCareConfigEngine.this.profile=p;
    }
    public int getMajorVersion(){
      return 1;
    }
    public int getMinorVersion(){
      return 1;
    }
  }
;
  setRoots();
  table=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility());
  StorageManager.setStorageFactory(new IStorageFactory(){
    public IStorageUtility newStorage(    String name,    Class type){
      return new DummyIndexedStorageUtility();
    }
  }
);
  StorageManager.registerStorage(Profile.STORAGE_KEY,Profile.class);
  StorageManager.registerStorage(Suite.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(FormDef.STORAGE_KEY,Suite.class);
}","public CommCareConfigEngine(OutputStream output){
  this.output=output;
  this.print=new PrintStream(output);
  suites=new Vector<Suite>();
  this.instance=new CommCareInstance(){
    public void registerSuite(    Suite s){
      CommCareConfigEngine.this.suites.add(s);
    }
    public void setProfile(    Profile p){
      CommCareConfigEngine.this.profile=p;
    }
    public int getMajorVersion(){
      return 1;
    }
    public int getMinorVersion(){
      return 1;
    }
    public int getMajorVersion(){
      return 1;
    }
    public int getMinorVersion(){
      return 0;
    }
  }
;
  setRoots();
  table=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility());
  StorageManager.setStorageFactory(new IStorageFactory(){
    public IStorageUtility newStorage(    String name,    Class type){
      return new DummyIndexedStorageUtility();
    }
  }
);
  StorageManager.registerStorage(Profile.STORAGE_KEY,Profile.class);
  StorageManager.registerStorage(Suite.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(FormDef.STORAGE_KEY,Suite.class);
}",0.9450441609421
146989,"public int getMinorVersion(){
  return 1;
}","public int getMinorVersion(){
  return 0;
}",0.9767441860465116
146990,"/** 
 * @param args
 */
public static void main(String[] args){
  if (args.length < 1) {
    printformat();
    System.exit(-1);
  }
  if (args[0].equals(""String_Node_Str"")) {
    if (args.length < 2) {
      printvalidateformat();
      System.exit(-1);
    }
    CommCareConfigEngine engine=new CommCareConfigEngine(System.out);
    engine.addLocalFileResource(args[1]);
    engine.resolveTable();
    engine.validateResources();
    engine.describeApplication();
    System.exit(0);
  }
}","/** 
 * @param args
 */
public static void main(String[] args){
  if (args.length < 1) {
    printformat();
    System.exit(-1);
  }
  if (args[0].equals(""String_Node_Str"")) {
    if (args.length < 2) {
      printvalidateformat();
      System.exit(-1);
    }
    CommCareConfigEngine engine=new CommCareConfigEngine(System.out);
    engine.addLocalFileResource(args[1]);
    if (args.length > 2) {
      if (args[2].equals(""String_Node_Str"")) {
      }
 else {
        engine.addJarResources(args[2]);
      }
    }
 else {
      engine.addJarResources(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
      engine.addJarResources(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
    }
    engine.resolveTable();
    engine.validateResources();
    engine.describeApplication();
    System.exit(0);
  }
}",0.6599462365591398
146991,"public JavaFileReference(String localPart,String uri){
  this.localPart=localPart;
  this.uri=uri;
}","public JavaFileReference(String localPart,String uri,String authority){
  this.localPart=localPart;
  this.uri=uri;
  this.authority=authority;
}",0.8163265306122449
146992,"public String getURI(){
  return ""String_Node_Str"" + uri;
}","public String getURI(){
  return ""String_Node_Str"" + authority + ""String_Node_Str""+ uri;
}",0.7919463087248322
146993,"protected Reference factory(String terminal,String URI){
  return new JavaFileReference(localRoot,terminal);
}","protected Reference factory(String terminal,String URI){
  if (authority != null) {
    return new JavaFileReference(localRoot,terminal,authority);
  }
 else {
    return new JavaFileReference(localRoot,terminal);
  }
}",0.668693009118541
146994,"public JavaFileRoot(String localRoot){
  super(new String[]{""String_Node_Str""});
  this.localRoot=localRoot;
}","public JavaFileRoot(String[] uriRoots,String localRoot){
  super(uriRoots);
  if (uriRoots.length == 1) {
    authority=uriRoots[0];
  }
  this.localRoot=localRoot;
}",0.6376811594202898
146995,"/** 
 * Convenience method Get longText form of text for THIS element (if available)  !!Falls back to default form if 'long' form does not exist.!! Use getSpecialFormQuestionText() if you want short form only.
 * @return longText form 
 */
public String getLongText(){
  String returnText=getSpecialFormQuestionText(getTextID(),TEXT_FORM_LONG);
  if (returnText == null)   returnText=getQuestionText(getTextID());
  return returnText;
}","/** 
 * Convenience method Get longText form of text for THIS element (if available)  !!Falls back to default form if 'long' form does not exist.!! Use getSpecialFormQuestionText() if you want short form only.
 * @return longText form 
 */
public String getLongText(){
  return getQuestionText(getTextID());
}",0.8026845637583893
146996,"/** 
 * Same as getSpecialFormQuestionText(String textID,String form) except that the textID defaults to the textID of the current element.
 * @param form - special text form of textID you're trying to retrieve. 
 * @return Special Form Question Text. <code>null</code> if no text for this element exists (with the specified special form).
 * @throws RunTimeException if this method is called on an element that is NOT a QuestionDef
 */
public String getSpecialFormQuestionText(String form){
  if (!(getFormElement() instanceof QuestionDef))   throw new RuntimeException(""String_Node_Str"");
  return getSpecialFormQuestionText(getTextID(),form);
}","/** 
 * Same as getSpecialFormQuestionText(String textID,String form) except that the textID defaults to the textID of the current element.
 * @param form - special text form of textID you're trying to retrieve. 
 * @return Special Form Question Text. <code>null</code> if no text for this element exists (with the specified special form).
 * @throws RunTimeException if this method is called on an element that is NOT a QuestionDef
 */
public String getSpecialFormQuestionText(String form){
  return getSpecialFormQuestionText(getTextID(),form);
}",0.9171548117154812
146997,"/** 
 * Convenience method Get shortText form of text for THIS element (if available)  !!Falls back to default form if 'short' form does not exist.!! Use getSpecialFormQuestionText() if you want short form only.
 * @return shortText form 
 */
public String getShortText(){
  String returnText=getSpecialFormQuestionText(getTextID(),TEXT_FORM_SHORT);
  if (returnText == null)   returnText=getQuestionText(getTextID());
  return returnText;
}","/** 
 * Convenience method Get shortText form of text for THIS element (if available)  !!Falls back to default form if 'short' form does not exist.!! Use getSpecialFormQuestionText() if you want short form only.
 * @return shortText form 
 */
public String getShortText(){
  String returnText=getSpecialFormQuestionText(getTextID(),TEXT_FORM_SHORT);
  if (returnText == null)   returnText=getSpecialFormQuestionText(null);
  return returnText;
}",0.9706546275395034
146998,"/** 
 * This method is generally used to retrieve special forms for a  (select or 1select) item, e.g. ""audio"", ""video"", etc.
 * @param sel - The Item whose text you're trying to retrieve.
 * @param form - Special text form of Item you're trying to retrieve. 
 * @return Special Form Text. <code>null</code> if no text for this element exists (with the specified special form).
 * @throws RunTimeException if this method is called on an element that is NOT a QuestionDef
 * @throws IllegalArgumentException if <code>sel == null</code>
 */
public String getSpecialFormSelectItemText(Selection sel,String form){
  if (!(getFormElement() instanceof QuestionDef))   throw new RuntimeException(""String_Node_Str"");
  if (sel == null)   throw new IllegalArgumentException(""String_Node_Str"");
  String textID=sel.choice.getTextID();
  if (textID == null || textID.equals(""String_Node_Str""))   return null;
  String returnText=getIText(textID,form);
  return substituteStringArgs(returnText);
}","/** 
 * This method is generally used to retrieve special forms for a  (select or 1select) item, e.g. ""audio"", ""video"", etc.
 * @param sel - The Item whose text you're trying to retrieve.
 * @param form - Special text form of Item you're trying to retrieve. 
 * @return Special Form Text. <code>null</code> if no text for this element exists (with the specified special form).
 * @throws RunTimeException if this method is called on an element that is NOT a QuestionDef
 * @throws IllegalArgumentException if <code>sel == null</code>
 */
public String getSpecialFormSelectItemText(Selection sel,String form){
  if (sel == null)   throw new IllegalArgumentException(""String_Node_Str"");
  String textID=sel.choice.getTextID();
  if (textID == null || textID.equals(""String_Node_Str""))   return null;
  String returnText=getIText(textID,form);
  return substituteStringArgs(returnText);
}",0.8475120385232745
146999,"public void visit(FormInstance tree){
  theXmlDoc=new Document();
  TreeElement root=tree.resolveReference(rootRef);
  for (int i=0; i < root.getNumChildren(); i++) {
    TreeElement childAt=root.getChildAt(i);
  }
  if (root != null) {
    theXmlDoc.addChild(Node.ELEMENT,serializeNode(root));
  }
  Element top=theXmlDoc.getElement(0);
  String[] prefixes=tree.getNamespacePrefixes();
  for (int i=0; i < prefixes.length; ++i) {
    top.setPrefix(prefixes[i],tree.getNamespaceURI(prefixes[i]));
  }
  if (tree.schema != null) {
    top.setNamespace(tree.schema);
    top.setPrefix(""String_Node_Str"",tree.schema);
  }
}","public void visit(FormInstance tree){
  theXmlDoc=new Document();
  TreeElement root=tree.resolveReference(rootRef);
  if (root == null) {
    root=tree.getRoot();
  }
  for (int i=0; i < root.getNumChildren(); i++) {
    TreeElement childAt=root.getChildAt(i);
  }
  if (root != null) {
    theXmlDoc.addChild(Node.ELEMENT,serializeNode(root));
  }
  Element top=theXmlDoc.getElement(0);
  String[] prefixes=tree.getNamespacePrefixes();
  for (int i=0; i < prefixes.length; ++i) {
    top.setPrefix(prefixes[i],tree.getNamespaceURI(prefixes[i]));
  }
  if (tree.schema != null) {
    top.setNamespace(tree.schema);
    top.setPrefix(""String_Node_Str"",tree.schema);
  }
}",0.9604957397366384
147000,"public Detail parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String id=parser.getAttributeValue(null,""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  checkNode(""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  Text title=new TextParser(parser).parse();
  getNextTagInBlock(""String_Node_Str"");
  Filter filter=Filter.EmptyFilter();
  if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
    filter=new FilterParser(parser).parse();
    getNextTagInBlock(""String_Node_Str"");
  }
  FormInstance model=parseModel();
  Vector<Text> headers=new Vector<Text>();
  Vector<Text> templates=new Vector<Text>();
  Vector<Integer> headerHints=new Vector<Integer>();
  Vector<Integer> templateHints=new Vector<Integer>();
  Vector<String> headerForms=new Vector<String>();
  Vector<String> templateForms=new Vector<String>();
  while (nextTagInBlock(""String_Node_Str"")) {
    checkNode(""String_Node_Str"");
    if (nextTagInBlock(""String_Node_Str"")) {
      checkNode(""String_Node_Str"");
      headerHints.addElement(new Integer(getWidth()));
      String form=parser.getAttributeValue(null,""String_Node_Str"");
      headerForms.addElement(form == null ? ""String_Node_Str"" : form);
      parser.nextTag();
      checkNode(""String_Node_Str"");
      Text header=new TextParser(parser).parse();
      headers.addElement(header);
    }
    if (nextTagInBlock(""String_Node_Str"")) {
      checkNode(""String_Node_Str"");
      templateHints.addElement(new Integer(getWidth()));
      String form=parser.getAttributeValue(null,""String_Node_Str"");
      templateForms.addElement(form == null ? ""String_Node_Str"" : form);
      parser.nextTag();
      checkNode(""String_Node_Str"");
      Text template=new TextParser(parser).parse();
      templates.addElement(template);
    }
  }
  Detail d=new Detail(id,title,model,headers,templates,filter,toArray(headerHints),toArray(templateHints),toArray(headerForms),toArray(templateForms));
  return d;
}","public Detail parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String id=parser.getAttributeValue(null,""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  checkNode(""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  Text title=new TextParser(parser).parse();
  getNextTagInBlock(""String_Node_Str"");
  Filter filter=Filter.EmptyFilter();
  if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
    filter=new FilterParser(parser).parse();
    getNextTagInBlock(""String_Node_Str"");
  }
  FormInstance model=parseModel();
  Vector<Text> headers=new Vector<Text>();
  Vector<Text> templates=new Vector<Text>();
  Vector<Integer> headerHints=new Vector<Integer>();
  Vector<Integer> templateHints=new Vector<Integer>();
  Vector<String> headerForms=new Vector<String>();
  Vector<String> templateForms=new Vector<String>();
  while (nextTagInBlock(""String_Node_Str"")) {
    checkNode(""String_Node_Str"");
    if (nextTagInBlock(""String_Node_Str"")) {
      checkNode(""String_Node_Str"");
      headerHints.addElement(new Integer(getWidth()));
      String form=parser.getAttributeValue(null,""String_Node_Str"");
      headerForms.addElement(form == null ? ""String_Node_Str"" : form);
      parser.nextTag();
      checkNode(""String_Node_Str"");
      Text header=new TextParser(parser).parse();
      headers.addElement(header);
    }
    if (nextTagInBlock(""String_Node_Str"")) {
      checkNode(""String_Node_Str"");
      templateHints.addElement(new Integer(getWidth()));
      String form=parser.getAttributeValue(null,""String_Node_Str"");
      templateForms.addElement(form == null ? ""String_Node_Str"" : form);
      parser.nextTag();
      checkNode(""String_Node_Str"");
      Text template=new TextParser(parser).parse();
      templates.addElement(template);
    }
  }
  Detail d=new Detail(id,title,model,headers,templates,filter,toIntArray(headerHints),toIntArray(templateHints),toStringArray(headerForms),toStringArray(templateForms));
  return d;
}",0.9955730447614364
